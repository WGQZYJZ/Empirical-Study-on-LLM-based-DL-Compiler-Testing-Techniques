==========mod==========
#[version = "0.0.5"]
def @func_2484(%var_2435: Tensor[(378), float32]) -> (Tensor[(378), bool], Tensor[(378), float32], Tensor[(378), float32], Tensor[(7, 3, 3), float64]) {
  %0 = @func_1976() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %1 = %0.3;
  %2 = cast(%var_2435, dtype="bool") /* ty=Tensor[(378), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(1), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(378), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?), bool] */;
  %6 = @func_1976() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %7 = greater(%4, %5) /* ty=Tensor[(378), bool] */;
  %8 = cast(%7, dtype="float32") /* ty=Tensor[(378), float32] */;
  %9 = reshape(%8, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %10 = @func_962(%9) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(14, 16, 9), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %11 = %10.3;
  %12 = cast(%11, dtype="float32") /* ty=Tensor[(378), float32] */;
  %13 = %6.3;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(378), float32] */;
  %15 = reshape(%14, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %16 = @func_1936(%15) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %17 = atanh(%12) /* ty=Tensor[(378), float32] */;
  %18 = %16.0;
  (%7, %13, %17, %18)
}

def @func_2816(%var_2768: float64) -> (Tensor[(9, 12, 11), float64], Tensor[(7, 3, 3), float64]) {
  %19 = cast(%var_2768, dtype="float64") /* ty=float64 */;
  %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 12, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 11), float64] */;
  %21 = @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %22 = %21.0;
  %23 = cast(%22, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
  %24 = floor_divide(%19, %20) /* ty=Tensor[(9, 12, 11), float64] */;
  %25 = sin(%23) /* ty=Tensor[(7, 3, 3), float64] */;
  (%24, %25)
}

def @func_4036(%var_3985: Tensor[(8, 10, 8), uint16], %var_3986: Tensor[(8, 10, 8), uint16], %var_4005: Tensor[(5, 60), float64], %var_4016: Tensor[(7, 3, 3), float64]) -> (Tensor[(630), float64], Tensor[(5, 12, 5), float64], Tensor[(5, 60), float64], Tensor[(8, 10, 8), bool], Tensor[(7, 3, 3), uint8]) {
  %26 = @func_2614() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(15, 7, 6), bool], Tensor[(630), float64]) */;
  %27 = cast(%var_4005, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %28 = reshape(%27, newshape=[300, 1]) /* ty=Tensor[(300, 1), float64] */;
  %29 = @func_1131(%28) /* ty=(Tensor[(7, 3, 3), float32], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) */;
  %30 = cast(%var_3986, dtype="uint16") /* ty=Tensor[(8, 10, 8), uint16] */;
  %31 = shape_of(%var_3985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_3985, dtype="uint16") /* ty=Tensor[(8, 10, 8), uint16] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %34 = add(%32, %33) /* ty=Tensor[(8, 10, 8), uint16] */;
  %35 = cast(%var_3986, dtype="int32") /* ty=Tensor[(8, 10, 8), int32] */;
  %36 = shape_of(%var_3985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%var_3985, dtype="int32") /* ty=Tensor[(8, 10, 8), int32] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %39 = left_shift(%37, %38) /* ty=Tensor[(8, 10, 8), int32] */;
  %40 = cast(%39, dtype="bool") /* ty=Tensor[(8, 10, 8), bool] */;
  %41 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%34, dtype="bool") /* ty=Tensor[(8, 10, 8), bool] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %44 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %45 = %44.0;
  %46 = cast(%var_4016, dtype="uint8") /* ty=Tensor[(7, 3, 3), uint8] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="uint8") /* ty=Tensor[(7, 3, 3), uint8] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %50 = %26.2;
  %51 = %29.1;
  %52 = logical_and(%42, %43) /* ty=Tensor[(8, 10, 8), bool] */;
  %53 = multiply(%48, %49) /* ty=Tensor[(7, 3, 3), uint8] */;
  (%50, %51, %var_4005, %52, %53)
}

def @func_3357() -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), bool]) {
  %54 = @func_2514() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %55 = @func_1562() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %56 = %55.1;
  %57 = cast(%56, dtype="float64") /* ty=Tensor[(9, 3, 14), float64] */;
  %58 = sigmoid(%57) /* ty=Tensor[(9, 3, 14), float64] */;
  %59 = cast(%56, dtype="float32") /* ty=Tensor[(9, 3, 14), float32] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%58, dtype="float32") /* ty=Tensor[(9, 3, 14), float32] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %63 = @func_2514() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %64 = cast(%56, dtype="bool") /* ty=Tensor[(9, 3, 14), bool] */;
  %65 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%58, dtype="bool") /* ty=Tensor[(9, 3, 14), bool] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %68 = %54.0;
  %69 = @func_2004() /* ty=Tensor[(7, 3, 3), float64] */;
  %70 = mod(%61, %62) /* ty=Tensor[(9, 3, 14), float32] */;
  %71 = %63.0;
  %72 = greater(%66, %67) /* ty=Tensor[(9, 3, 14), bool] */;
  (%68, %69, %70, %71, %72)
}

def @func_1448() -> (Tensor[(5, 15, 6), int32],) {
  %73 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 15, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 6), float64] */;
  %74 = tan(%73) /* ty=Tensor[(5, 15, 6), float64] */;
  %75 = cast(%74, dtype="int32") /* ty=Tensor[(5, 15, 6), int32] */;
  %76 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(5, 15, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 15, 6), float64] */, dtype="int32") /* ty=Tensor[(5, 15, 6), int32] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %79 = bitwise_xor(%77, %78) /* ty=Tensor[(5, 15, 6), int32] */;
  (%79,)
}

def @func_2723(%var_2709: int16, %var_2710: Tensor[(5, 6, 4), int16]) -> (Tensor[(5, 6, 4), int16], Tensor[(2016), float32], Tensor[(378), float32]) {
  %80 = cast(%var_2709, dtype="int16") /* ty=int16 */;
  %81 = cast(%var_2710, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
  %82 = cast(meta[relay.Constant][2] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %83 = reshape(%82, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %84 = @func_962(%83) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(14, 16, 9), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %85 = left_shift(%80, %81) /* ty=Tensor[(5, 6, 4), int16] */;
  %86 = %84.2;
  (%85, %86, meta[relay.Constant][2] /* ty=Tensor[(378), float32] */)
}

def @func_2883() -> Tensor[(15, 7, 6), bool] {
  %87 = @func_2614() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(15, 7, 6), bool], Tensor[(630), float64]) */;
  %87.1
}

def @func_4166(%var_4154: Tensor[(300), float64]) -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], Tensor[(2016), float32], Tensor[(300), float64], Tensor[(5, 15, 6), int32]) {
  %88 = @func_2058() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %90 = cast(%var_4154, dtype="float64") /* ty=Tensor[(300), float64] */;
  %91 = reshape(%89, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %92 = reshape(%90, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %93 = @func_2372(%91, %92) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(2016), uint32], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(2016), int32], Tensor[(378), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(5, 60), float64]) */;
  %94 = @func_1448() /* ty=(Tensor[(5, 15, 6), int32],) */;
  %95 = %88.0;
  %96 = @func_3216() /* ty=Tensor[(7, 3, 3), float64] */;
  %97 = %93.7;
  %98 = %94.0;
  (%95, %96, %97, meta[relay.Constant][3] /* ty=Tensor[(2016), float32] */, %var_4154, %98)
}

def @func_2687(%var_2638: Tensor[(1, 14, 14), float64], %var_2639: Tensor[(14, 14, 14), float64], %var_2647: Tensor[(11, 14, 14), float64], %var_2652: Tensor[(11, 14, 14), bool]) -> (Tensor[(11, 14, 14), bool], Tensor[(11, 14, 14), int32], Tensor[(14, 14, 14), float32]) {
  %99 = cast(%var_2638, dtype="bool") /* ty=Tensor[(1, 14, 14), bool] */;
  %100 = cast(%var_2647, dtype="bool") /* ty=Tensor[(11, 14, 14), bool] */;
  %101 = equal(%99, %100) /* ty=Tensor[(11, 14, 14), bool] */;
  %102 = cast(%var_2652, dtype="bool") /* ty=Tensor[(11, 14, 14), bool] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="bool") /* ty=Tensor[(11, 14, 14), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %106 = cast(%var_2652, dtype="int32") /* ty=Tensor[(11, 14, 14), int32] */;
  %107 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%101, dtype="int32") /* ty=Tensor[(11, 14, 14), int32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %110 = cast(%var_2638, dtype="float64") /* ty=Tensor[(1, 14, 14), float64] */;
  %111 = cast(%var_2639, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %112 = floor_mod(%110, %111) /* ty=Tensor[(14, 14, 14), float64] */;
  %113 = cast(%112, dtype="uint32") /* ty=Tensor[(14, 14, 14), uint32] */;
  %114 = cast(%var_2638, dtype="uint32") /* ty=Tensor[(1, 14, 14), uint32] */;
  %115 = bitwise_and(%113, %114) /* ty=Tensor[(14, 14, 14), uint32] */;
  %116 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 14, 14), uint32] */, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %120 = logical_and(%104, %105) /* ty=Tensor[(11, 14, 14), bool] */;
  %121 = bitwise_xor(%108, %109) /* ty=Tensor[(11, 14, 14), int32] */;
  %122 = mod(%118, %119) /* ty=Tensor[(14, 14, 14), float32] */;
  (%120, %121, %122)
}

def @func_154(%var_128: Tensor[(1, 13, 12), float32]) -> (Tensor[(15, 13, 12), uint16], Tensor[(1, 13, 12), float32]) {
  %123 = cast(%var_128, dtype="float32") /* ty=Tensor[(1, 13, 12), float32] */;
  %124 = tan(%123) /* ty=Tensor[(1, 13, 12), float32] */;
  %125 = cast(%124, dtype="uint16") /* ty=Tensor[(1, 13, 12), uint16] */;
  %126 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 13, 12), float32] */, dtype="uint16") /* ty=Tensor[(15, 13, 12), uint16] */;
  %127 = cast(%124, dtype="float64") /* ty=Tensor[(1, 13, 12), float64] */;
  %128 = asin(%127) /* ty=Tensor[(1, 13, 12), float64] */;
  %129 = cast(%128, dtype="float32") /* ty=Tensor[(1, 13, 12), float32] */;
  %130 = bitwise_or(%125, %126) /* ty=Tensor[(15, 13, 12), uint16] */;
  %131 = erf(%129) /* ty=Tensor[(1, 13, 12), float32] */;
  (%130, %131)
}

def @func_3497(%var_3471: Tensor[(1, 120), int16], %var_3483: Tensor[(450), int32]) -> (Tensor[(15, 7, 6), bool], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32], Tensor[(378), float32], int16, Tensor[(1, 120), int16], Tensor[(5, 15, 6), bool], Tensor[(450), int32], Tensor[(?, 15, 16), float64], Tensor[(2, 120), float64]) {
  %132 = @func_1908() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %133 = @func_3261() /* ty=(Tensor[(7, 3, 3), float32],) */;
  %134 = cast(meta[relay.Constant][6] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %135 = cast(%var_3471, dtype="int16") /* ty=Tensor[(1, 120), int16] */;
  %136 = reshape(%134, newshape=[]) /* ty=int16 */;
  %137 = reshape(%135, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %138 = @func_2723(%136, %137) /* ty=(Tensor[(5, 6, 4), int16], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %139 = cast(%var_3483, dtype="int32") /* ty=Tensor[(450), int32] */;
  %140 = reshape(%139, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), int32] */;
  %141 = @func_1749(%140) /* ty=(Tensor[(378), float32], Tensor[(5, 15, 6), bool], Tensor[(7, 3, 3), float64]) */;
  %142 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 120), float64] */, dtype="float64") /* ty=Tensor[(2, 120), float64] */;
  %143 = reshape(%142, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %144 = @func_1653(%143) /* ty=(Tensor[(?, 15, 16), float64],) */;
  %145 = @func_2883() /* ty=Tensor[(15, 7, 6), bool] */;
  %146 = %132.0;
  %147 = @func_3216() /* ty=Tensor[(7, 3, 3), float64] */;
  %148 = %133.0;
  %149 = %138.2;
  %150 = %141.1;
  %151 = %144.0;
  (%145, %146, %147, %148, %149, meta[relay.Constant][6] /* ty=int16 */, %var_3471, %150, %var_3483, %151, meta[relay.Constant][7] /* ty=Tensor[(2, 120), float64] */)
}

def @func_2577() -> Tensor[(7, 3, 3), float32] {
  %152 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %153 = %152.0;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  log10(%154) /* ty=Tensor[(7, 3, 3), float32] */
}

def @func_2258(%var_2182: Tensor[(16, 10, 9), float32], %var_2197: Tensor[(240), float64]) -> (Tensor[(?, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 3, 3), float64], Tensor[(16, 10, 9), float32], Tensor[(16, 10, 9), bool], Tensor[(2016), uint64], Tensor[(7, 3, 3), bool], Tensor[(16, 10, 9), float64]) {
  %155 = cast(%var_2197, dtype="float64") /* ty=Tensor[(240), float64] */;
  %156 = reshape(%155, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %157 = @func_1653(%156) /* ty=(Tensor[(?, 15, 16), float64],) */;
  %158 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %159 = cast(%var_2182, dtype="float32") /* ty=Tensor[(16, 10, 9), float32] */;
  %160 = sin(%159) /* ty=Tensor[(16, 10, 9), float32] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(16, 10, 9), float32] */;
  %162 = cast(%160, dtype="float32") /* ty=Tensor[(16, 10, 9), float32] */;
  %163 = acos(%162) /* ty=Tensor[(16, 10, 9), float32] */;
  %164 = cast(%163, dtype="bool") /* ty=Tensor[(16, 10, 9), bool] */;
  %165 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%160, dtype="bool") /* ty=Tensor[(16, 10, 9), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */;
  %169 = %158.0;
  %170 = cast(%169, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
  %171 = reshape(%170, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), float64] */;
  %172 = cast(%163, dtype="float64") /* ty=Tensor[(16, 10, 9), float64] */;
  %173 = sinh(%172) /* ty=Tensor[(16, 10, 9), float64] */;
  %174 = cast(%var_2182, dtype="uint8") /* ty=Tensor[(16, 10, 9), uint8] */;
  %175 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%163, dtype="uint8") /* ty=Tensor[(16, 10, 9), uint8] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %178 = maximum(%176, %177) /* ty=Tensor[(16, 10, 9), uint8] */;
  %179 = cast(%178, dtype="float64") /* ty=Tensor[(16, 10, 9), float64] */;
  %180 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%173, dtype="float64") /* ty=Tensor[(16, 10, 9), float64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %183 = %157.0;
  %184 = asin(%161) /* ty=Tensor[(16, 10, 9), float32] */;
  %185 = greater(%166, %167) /* ty=Tensor[(16, 10, 9), bool] */;
  %186 = %168.1;
  %187 = @func_2175(%171) /* ty=Tensor[(7, 3, 3), bool] */;
  %188 = multiply(%181, %182) /* ty=Tensor[(16, 10, 9), float64] */;
  (%183, %var_2197, %169, %184, %185, %186, %187, %188)
}

def @func_4441() -> (Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float32], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  %189 = @func_790() /* ty=Tensor[(7, 3, 3), float32] */;
  %190 = @func_3357() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), bool]) */;
  %191 = %190.1;
  %192 = cast(%191, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  %193 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%189, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %196 = cast(meta[relay.Constant][8] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %197 = cast(meta[relay.Constant][9] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %198 = reshape(%196, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
  %199 = reshape(%197, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %200 = @func_577(%198, %199) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
  %201 = floor_divide(%194, %195) /* ty=Tensor[(7, 3, 3), float32] */;
  %202 = @func_790() /* ty=Tensor[(7, 3, 3), float32] */;
  %203 = %200.2;
  (%201, %202, %203, meta[relay.Constant][8] /* ty=Tensor[(2016), float32] */, meta[relay.Constant][9] /* ty=Tensor[(378), float32] */)
}

def @func_4585() -> (Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float64]) {
  %204 = @func_3261() /* ty=(Tensor[(7, 3, 3), float32],) */;
  %205 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %206 = %204.0;
  %207 = %205.0;
  (%206, %207)
}

def @func_2372(%var_2304: Tensor[(2016), float32], %var_2368: Tensor[(5, 60), float64]) -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(2016), uint32], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(2016), int32], Tensor[(378), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(5, 60), float64]) {
  %208 = @func_2058() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %209 = cast(meta[relay.Constant][10] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %210 = reshape(%209, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %211 = @func_1936(%210) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %212 = %211.2;
  %213 = cast(%var_2304, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(1), int32] */;
  %215 = cast(%212, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %217 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %218 = cast(%var_2304, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %219 = log(%218) /* ty=Tensor[(2016), float64] */;
  %220 = cast(%212, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(1), int32] */;
  %222 = cast(%219, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?), int32] */;
  %224 = cast(meta[relay.Constant][11] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %225 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(378), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %226 = cast(meta[relay.Constant][10] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?), float32] */;
  %228 = divide(%226, %227) /* ty=Tensor[(378), float32] */;
  %229 = cast(%228, dtype="float64") /* ty=Tensor[(378), float64] */;
  %230 = cast(-4.52889f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %231 = cast(%var_2368, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %232 = reshape(%230, newshape=[]) /* ty=float64 */;
  %233 = reshape(%231, newshape=[5, 12, 5]) /* ty=Tensor[(5, 12, 5), float64] */;
  %234 = @func_2004() /* ty=Tensor[(7, 3, 3), float64] */;
  %235 = %208.0;
  %236 = bitwise_and(%215, %216) /* ty=Tensor[(2016), uint32] */;
  %237 = %217.0;
  %238 = @func_2004() /* ty=Tensor[(7, 3, 3), float64] */;
  %239 = logical_xor(%222, %223) /* ty=Tensor[(2016), int32] */;
  %240 = log(%229) /* ty=Tensor[(378), float64] */;
  %241 = @func_1078(%232, %233) /* ty=Tensor[(5, 12, 5), float64] */;
  (%234, %235, %236, %237, %238, %239, %240, %241, -4.52889f64 /* ty=float64 */, %var_2368)
}

def @func_861() -> (Tensor[(7, 3, 3), float64],) {
  %242 = @func_790() /* ty=Tensor[(7, 3, 3), float32] */;
  %243 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 3, 3), float32] */, dtype="uint16") /* ty=Tensor[(7, 3, 3), uint16] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%242, dtype="uint16") /* ty=Tensor[(7, 3, 3), uint16] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %247 = bitwise_and(%245, %246) /* ty=Tensor[(7, 3, 3), uint16] */;
  %248 = cast(%247, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
  %249 = atanh(%248) /* ty=Tensor[(7, 3, 3), float64] */;
  (%249,)
}

def @func_252(%var_185: Tensor[(9, 3, 14), float32]) -> Tensor[(9, 3, 14), float32] {
  %250 = cast(%var_185, dtype="float32") /* ty=Tensor[(9, 3, 14), float32] */;
  sinh(%250) /* ty=Tensor[(9, 3, 14), float32] */
}

def @func_1562() -> (Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  %251 = @func_1170() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %252 = cast(meta[relay.Constant][13] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %253 = cast(meta[relay.Constant][14] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %254 = reshape(%252, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
  %255 = reshape(%253, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %256 = @func_577(%254, %255) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
  %257 = %251.0;
  %258 = %256.1;
  (%257, %258, meta[relay.Constant][13] /* ty=Tensor[(2016), float32] */, meta[relay.Constant][14] /* ty=Tensor[(378), float32] */)
}

def @func_4087(%var_4053: Tensor[(48), int64]) -> (Tensor[(15, 7, 6), bool], Tensor[(6, 2, 4), int64], int64, Tensor[(48), int64], Tensor[(7, 3, 3), float64], Tensor[(378), float32], Tensor[(378), float32]) {
  %259 = cast(2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %260 = cast(%var_4053, dtype="int64") /* ty=Tensor[(48), int64] */;
  %261 = reshape(%259, newshape=[]) /* ty=int64 */;
  %262 = reshape(%260, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), int64] */;
  %263 = @func_3900(%261, %262) /* ty=(Tensor[(6, 2, 4), int64], Tensor[(7, 3, 3), float32]) */;
  %264 = cast(meta[relay.Constant][15] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %265 = reshape(%264, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %266 = @func_1936(%265) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %267 = cast(meta[relay.Constant][15] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %268 = reshape(%267, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %269 = @func_1936(%268) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %270 = @func_2883() /* ty=Tensor[(15, 7, 6), bool] */;
  %271 = %263.0;
  %272 = %266.0;
  %273 = %269.3;
  (%270, %271, 2 /* ty=int64 */, %var_4053, %272, meta[relay.Constant][15] /* ty=Tensor[(378), float32] */, %273)
}

def @func_3900(%var_3881: int64, %var_3882: Tensor[(6, 2, 4), int64]) -> (Tensor[(6, 2, 4), int64], Tensor[(7, 3, 3), float32]) {
  %274 = cast(%var_3881, dtype="int64") /* ty=int64 */;
  %275 = cast(%var_3882, dtype="int64") /* ty=Tensor[(6, 2, 4), int64] */;
  %276 = @func_3261() /* ty=(Tensor[(7, 3, 3), float32],) */;
  %277 = bitwise_xor(%274, %275) /* ty=Tensor[(6, 2, 4), int64] */;
  %278 = %276.0;
  (%277, %278)
}

def @func_1131(%var_1122: Tensor[(300, 1), float64]) -> (Tensor[(7, 3, 3), float32], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) {
  %279 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %280 = %279.0;
  %281 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 3, 3), float64] */, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%280, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %285 = cast(-9.69854f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %286 = cast(%var_1122, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %287 = reshape(%285, newshape=[]) /* ty=float64 */;
  %288 = reshape(%286, newshape=[5, 12, 5]) /* ty=Tensor[(5, 12, 5), float64] */;
  %289 = mod(%283, %284) /* ty=Tensor[(7, 3, 3), float32] */;
  %290 = @func_1078(%287, %288) /* ty=Tensor[(5, 12, 5), float64] */;
  (%289, %290, -9.69854f64 /* ty=float64 */, %var_1122)
}

def @func_3973(%var_3957: Tensor[(7, 8, 13), float64]) -> Tensor[(7, 8, 13), float64] {
  %291 = cast(%var_3957, dtype="float64") /* ty=Tensor[(7, 8, 13), float64] */;
  %292 = acosh(%291) /* ty=Tensor[(7, 8, 13), float64] */;
  %293 = cast(%var_3957, dtype="float64") /* ty=Tensor[(7, 8, 13), float64] */;
  %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%292, dtype="float64") /* ty=Tensor[(7, 8, 13), float64] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%295, %296) /* ty=Tensor[(7, 8, 13), float64] */
}

def @func_4291(%var_4283: float64, %var_4284: Tensor[(300, 1), float64]) -> (Tensor[(7, 3, 3), float64], Tensor[(11, 5, 14), bool], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) {
  %297 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %298 = @func_3640() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32], Tensor[(6, 63), uint16], Tensor[(378), float32], Tensor[(11, 5, 14), bool], Tensor[(5, 15, 6), bool], Tensor[(450), int32], Tensor[(11, 5, 14), float64]) */;
  %299 = cast(%var_4283, dtype="float64") /* ty=float64 */;
  %300 = cast(%var_4284, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %301 = reshape(%299, newshape=[]) /* ty=float64 */;
  %302 = reshape(%300, newshape=[5, 12, 5]) /* ty=Tensor[(5, 12, 5), float64] */;
  %303 = %297.0;
  %304 = %298.5;
  %305 = @func_2418() /* ty=Tensor[(7, 3, 3), float64] */;
  %306 = @func_1078(%301, %302) /* ty=Tensor[(5, 12, 5), float64] */;
  (%303, %304, %305, %306, %var_4283, %var_4284)
}

def @func_2743(%var_2735: Tensor[(16, 13, 16), float64]) -> (Tensor[(16, 13, 16), float64], Tensor[(7, 3, 3), float64]) {
  %307 = cast(%var_2735, dtype="float64") /* ty=Tensor[(16, 13, 16), float64] */;
  %308 = @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %309 = exp(%307) /* ty=Tensor[(16, 13, 16), float64] */;
  %310 = %308.0;
  (%309, %310)
}

def @func_1691() -> (Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) {
  %311 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %312 = @func_1562() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %313 = %312.2;
  %314 = cast(%313, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %315 = exp(%314) /* ty=Tensor[(2016), float64] */;
  %316 = cast(%313, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(1), int32] */;
  %318 = cast(%315, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?), bool] */;
  %320 = greater(%318, %319) /* ty=Tensor[(2016), bool] */;
  %321 = cast(%320, dtype="uint64") /* ty=Tensor[(2016), uint64] */;
  %322 = shape_of(%313, dtype="int32") /* ty=Tensor[(1), int32] */;
  %323 = cast(%313, dtype="uint64") /* ty=Tensor[(2016), uint64] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %325 = %311.0;
  %326 = subtract(%323, %324) /* ty=Tensor[(2016), uint64] */;
  (%325, %326)
}

def @func_4337(%var_4320: float64) -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(300), float64], Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float64]) {
  %327 = @func_2058() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %328 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %329 = cast(%var_4320, dtype="float64") /* ty=float64 */;
  %330 = cast(meta[relay.Constant][17] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %331 = reshape(%329, newshape=[]) /* ty=float64 */;
  %332 = reshape(%330, newshape=[300, 1]) /* ty=Tensor[(300, 1), float64] */;
  %333 = @func_4291(%331, %332) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(11, 5, 14), bool], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) */;
  %334 = cast(meta[relay.Constant][17] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %335 = reshape(%334, newshape=[300, 1]) /* ty=Tensor[(300, 1), float64] */;
  %336 = @func_1131(%335) /* ty=(Tensor[(7, 3, 3), float32], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) */;
  %337 = %327.0;
  %338 = %328.0;
  %339 = %333.3;
  %340 = %336.0;
  %341 = @func_2004() /* ty=Tensor[(7, 3, 3), float64] */;
  (%337, %338, %339, %var_4320, meta[relay.Constant][17] /* ty=Tensor[(300), float64] */, %340, %341)
}

def @func_4476() -> Tensor[(7, 3, 3), float32] {
  %342 = @func_1715() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) */;
  %342.1
}

def @func_3216() -> Tensor[(7, 3, 3), float64] {
  @func_890() /* ty=Tensor[(7, 3, 3), float64] */
}

def @func_2004() -> Tensor[(7, 3, 3), float64] {
  %343 = @func_1230() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %343.0
}

def @func_1312(%var_1272: Tensor[(156, 1), float32]) -> (Tensor[(7, 3, 3), float64], Tensor[(1, 13, 12), float32], Tensor[(156, 1), float32], Tensor[(7, 3, 3), float64]) {
  %344 = @func_1170() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %345 = cast(%var_1272, dtype="float32") /* ty=Tensor[(156, 1), float32] */;
  %346 = reshape(%345, newshape=[1, 13, 12]) /* ty=Tensor[(1, 13, 12), float32] */;
  %347 = @func_154(%346) /* ty=(Tensor[(15, 13, 12), uint16], Tensor[(1, 13, 12), float32]) */;
  %348 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %349 = %348.0;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
  %351 = sqrt(%350) /* ty=Tensor[(7, 3, 3), float64] */;
  %352 = cast(%351, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
  %353 = %344.0;
  %354 = %347.1;
  %355 = log2(%352) /* ty=Tensor[(7, 3, 3), float64] */;
  (%353, %354, %var_1272, %355)
}

def @func_2418() -> Tensor[(7, 3, 3), float64] {
  %356 = @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %356.0
}

def @func_2175(%var_2164: Tensor[(7, 3, 3), float64]) -> Tensor[(7, 3, 3), bool] {
  %357 = @func_2004() /* ty=Tensor[(7, 3, 3), float64] */;
  %358 = cast(%var_2164, dtype="bool") /* ty=Tensor[(7, 3, 3), bool] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="bool") /* ty=Tensor[(7, 3, 3), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%360, %361) /* ty=Tensor[(7, 3, 3), bool] */
}

def @func_4125() -> (Tensor[(7, 3, 3), float64], Tensor[(?, 15, 16), float64], Tensor[(1, 240), float64], Tensor[(7, 3, 3), bool]) {
  %362 = @func_1908() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %363 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 240), float64] */, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %364 = reshape(%363, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %365 = @func_1653(%364) /* ty=(Tensor[(?, 15, 16), float64],) */;
  %366 = %362.0;
  %367 = cast(%366, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
  %368 = reshape(%367, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), float64] */;
  %369 = %365.0;
  %370 = @func_2175(%368) /* ty=Tensor[(7, 3, 3), bool] */;
  (%366, %369, meta[relay.Constant][18] /* ty=Tensor[(1, 240), float64] */, %370)
}

def @func_790() -> Tensor[(7, 3, 3), float32] {
  %371 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 3, 3), float32] */, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  acosh(%371) /* ty=Tensor[(7, 3, 3), float32] */
}

def @func_1936(%var_1926: Tensor[(378), float32]) -> (Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  %372 = @func_1230() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %373 = cast(meta[relay.Constant][20] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %374 = cast(%var_1926, dtype="float32") /* ty=Tensor[(378), float32] */;
  %375 = reshape(%373, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
  %376 = reshape(%374, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %377 = @func_577(%375, %376) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
  %378 = %372.0;
  %379 = %377.1;
  (%378, %379, meta[relay.Constant][20] /* ty=Tensor[(2016), float32] */, %var_1926)
}

def @func_890() -> Tensor[(7, 3, 3), float64] {
  %380 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %380.0
}

def @func_2500() -> Tensor[(7, 3, 3), float64] {
  %381 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %381.0
}

def @func_1715() -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) {
  %382 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %383 = %382.0;
  %384 = @func_790() /* ty=Tensor[(7, 3, 3), float32] */;
  (%383, %384)
}

def @func_1749(%var_1739: Tensor[(5, 15, 6), int32]) -> (Tensor[(378), float32], Tensor[(5, 15, 6), bool], Tensor[(7, 3, 3), float64]) {
  %385 = @func_1562() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %386 = @func_1448() /* ty=(Tensor[(5, 15, 6), int32],) */;
  %387 = %386.0;
  %388 = cast(%var_1739, dtype="bool") /* ty=Tensor[(5, 15, 6), bool] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="bool") /* ty=Tensor[(5, 15, 6), bool] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %392 = @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */;
  %393 = %385.3;
  %394 = greater(%390, %391) /* ty=Tensor[(5, 15, 6), bool] */;
  %395 = %392.0;
  (%393, %394, %395)
}

def @func_577(%var_531: Tensor[(14, 16, 9), float32], %var_570: Tensor[(6, 63), float32]) -> (Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) {
  %396 = cast(%var_531, dtype="float32") /* ty=Tensor[(14, 16, 9), float32] */;
  %397 = rsqrt(%396) /* ty=Tensor[(14, 16, 9), float32] */;
  %398 = cast(%397, dtype="float32") /* ty=Tensor[(14, 16, 9), float32] */;
  %399 = sinh(%398) /* ty=Tensor[(14, 16, 9), float32] */;
  %400 = cast(%399, dtype="float32") /* ty=Tensor[(14, 16, 9), float32] */;
  %401 = cast(%var_570, dtype="float32") /* ty=Tensor[(6, 63), float32] */;
  %402 = reshape(%401, newshape=[9, 3, 14]) /* ty=Tensor[(9, 3, 14), float32] */;
  %403 = cos(%400) /* ty=Tensor[(14, 16, 9), float32] */;
  %404 = @func_252(%402) /* ty=Tensor[(9, 3, 14), float32] */;
  (%403, %404, %var_570)
}

def @func_4676() -> (Tensor[(7, 3, 3), float64], Tensor[(12, 15, 12), bool], Tensor[(2160), float64]) {
  %405 = @func_1715() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) */;
  %406 = cast(meta[relay.Constant][21] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %407 = cast(meta[relay.Constant][21] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %408 = reshape(%406, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %409 = reshape(%407, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %410 = @func_3755(%408, %409) /* ty=(Tensor[(12, 15, 12), bool], Tensor[(12, 15, 12), uint8], Tensor[(12, 15, 12), float64]) */;
  %411 = %405.0;
  %412 = %410.0;
  (%411, %412, meta[relay.Constant][21] /* ty=Tensor[(2160), float64] */)
}

def @func_1653(%var_1648: Tensor[(1, 15, 16), float64]) -> (Tensor[(?, 15, 16), float64],) {
  %413 = cast(%var_1648, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
  %414 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(1, 15, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 15, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %417 = add(%415, %416) /* ty=Tensor[(?, 15, 16), float64] */;
  (%417,)
}

def @func_2514() -> (Tensor[(7, 3, 3), float64],) {
  %418 = @func_1170() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %419 = %418.0;
  (%419,)
}

def @func_962(%var_950: Tensor[(378), float32]) -> (Tensor[(7, 3, 3), float64], Tensor[(14, 16, 9), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  %420 = cast(meta[relay.Constant][23] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %421 = cast(%var_950, dtype="float32") /* ty=Tensor[(378), float32] */;
  %422 = reshape(%420, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
  %423 = reshape(%421, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %424 = @func_577(%422, %423) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
  %425 = @func_890() /* ty=Tensor[(7, 3, 3), float64] */;
  %426 = %424.0;
  (%425, %426, meta[relay.Constant][23] /* ty=Tensor[(2016), float32] */, %var_950)
}

def @func_2058() -> (Tensor[(7, 3, 3), float64],) {
  %427 = @func_1715() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) */;
  %428 = %427.0;
  (%428,)
}

def @func_3664() -> (Tensor[(15, 7, 6), float64],) {
  %429 = @func_2883() /* ty=Tensor[(15, 7, 6), bool] */;
  %430 = cast(%429, dtype="float64") /* ty=Tensor[(15, 7, 6), float64] */;
  %431 = log(%430) /* ty=Tensor[(15, 7, 6), float64] */;
  (%431,)
}

def @func_4949(%var_4917: int64, %var_4918: Tensor[(3, 7, 2), int64]) -> (Tensor[(3, 7, 2), bool], Tensor[(2016), float32], Tensor[(378), float32], Tensor[(6, 63), float32]) {
  %432 = cast(%var_4917, dtype="int64") /* ty=int64 */;
  %433 = cast(%var_4918, dtype="int64") /* ty=Tensor[(3, 7, 2), int64] */;
  %434 = bitwise_or(%432, %433) /* ty=Tensor[(3, 7, 2), int64] */;
  %435 = cast(%var_4917, dtype="bool") /* ty=bool */;
  %436 = cast(%434, dtype="bool") /* ty=Tensor[(3, 7, 2), bool] */;
  %437 = cast(meta[relay.Constant][24] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %438 = reshape(%437, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %439 = @func_2035(%438) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %440 = %439.3;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %442 = cast(meta[relay.Constant][24] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %443 = reshape(%441, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
  %444 = reshape(%442, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %445 = @func_577(%443, %444) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
  %446 = less(%435, %436) /* ty=Tensor[(3, 7, 2), bool] */;
  %447 = %445.2;
  (%446, %440, meta[relay.Constant][24] /* ty=Tensor[(378), float32] */, %447)
}

def @func_3204(%var_3195: Tensor[(6, 63), float32]) -> (Tensor[(6, 63), uint16],) {
  %448 = @func_1976() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %449 = %448.1;
  %450 = cast(%var_3195, dtype="uint16") /* ty=Tensor[(6, 63), uint16] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(2), int32] */;
  %452 = cast(%449, dtype="uint16") /* ty=Tensor[(6, 63), uint16] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %454 = right_shift(%452, %453) /* ty=Tensor[(6, 63), uint16] */;
  (%454,)
}

def @func_3261() -> (Tensor[(7, 3, 3), float32],) {
  %455 = @func_1715() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) */;
  %456 = %455.1;
  (%456,)
}

def @func_2035(%var_2026: Tensor[(378), float32]) -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  %457 = @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */;
  %458 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %459 = cast(meta[relay.Constant][25] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %460 = cast(%var_2026, dtype="float32") /* ty=Tensor[(378), float32] */;
  %461 = reshape(%459, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
  %462 = reshape(%460, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %463 = @func_577(%461, %462) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
  %464 = %457.0;
  %465 = %458.0;
  %466 = %463.2;
  (%464, %465, %466, meta[relay.Constant][25] /* ty=Tensor[(2016), float32] */, %var_2026)
}

def @func_3439() -> Tensor[(7, 3, 3), float64] {
  @func_2004() /* ty=Tensor[(7, 3, 3), float64] */
}

def @func_1068() -> (Tensor[(7, 3, 3), float64],) {
  %467 = @func_790() /* ty=Tensor[(7, 3, 3), float32] */;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
  %469 = acos(%468) /* ty=Tensor[(7, 3, 3), float64] */;
  (%469,)
}

def @func_1908() -> (Tensor[(7, 3, 3), float64],) {
  %470 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %471 = %470.0;
  (%471,)
}

def @func_4876(%var_4872: Tensor[(10, 14, 12), float64]) -> (Tensor[(10, 14, 12), float64],) {
  %472 = cast(%var_4872, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %473 = acosh(%472) /* ty=Tensor[(10, 14, 12), float64] */;
  (%473,)
}

def @func_3755(%var_3722: Tensor[(12, 15, 12), float64], %var_3741: Tensor[(12, 15, 12), float64]) -> (Tensor[(12, 15, 12), bool], Tensor[(12, 15, 12), uint8], Tensor[(12, 15, 12), float64]) {
  %474 = cast(%var_3722, dtype="float64") /* ty=Tensor[(12, 15, 12), float64] */;
  %475 = atan(%474) /* ty=Tensor[(12, 15, 12), float64] */;
  %476 = cast(%var_3722, dtype="bool") /* ty=Tensor[(12, 15, 12), bool] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%475, dtype="bool") /* ty=Tensor[(12, 15, 12), bool] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %480 = cast(%var_3741, dtype="uint8") /* ty=Tensor[(12, 15, 12), uint8] */;
  %481 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%475, dtype="uint8") /* ty=Tensor[(12, 15, 12), uint8] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %484 = cast(%var_3741, dtype="float32") /* ty=Tensor[(12, 15, 12), float32] */;
  %485 = cos(%484) /* ty=Tensor[(12, 15, 12), float32] */;
  %486 = cast(%485, dtype="float64") /* ty=Tensor[(12, 15, 12), float64] */;
  %487 = greater_equal(%478, %479) /* ty=Tensor[(12, 15, 12), bool] */;
  %488 = left_shift(%482, %483) /* ty=Tensor[(12, 15, 12), uint8] */;
  %489 = exp(%486) /* ty=Tensor[(12, 15, 12), float64] */;
  (%487, %488, %489)
}

def @func_3640() -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32], Tensor[(6, 63), uint16], Tensor[(378), float32], Tensor[(11, 5, 14), bool], Tensor[(5, 15, 6), bool], Tensor[(450), int32], Tensor[(11, 5, 14), float64]) {
  %490 = @func_2058() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %491 = @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %492 = @func_1230() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %493 = %492.0;
  %494 = cast(%493, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  %495 = cast(meta[relay.Constant][26] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %496 = reshape(%495, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %497 = @func_3204(%496) /* ty=(Tensor[(6, 63), uint16],) */;
  %498 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
  %499 = acos(%498) /* ty=Tensor[(11, 5, 14), float32] */;
  %500 = cast(%499, dtype="uint8") /* ty=Tensor[(11, 5, 14), uint8] */;
  %501 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(11, 5, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 5, 14), float32] */, dtype="uint8") /* ty=Tensor[(11, 5, 14), uint8] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %504 = logical_xor(%502, %503) /* ty=Tensor[(11, 5, 14), uint8] */;
  %505 = cast(%504, dtype="int64") /* ty=Tensor[(11, 5, 14), int64] */;
  %506 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%499, dtype="int64") /* ty=Tensor[(11, 5, 14), int64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %509 = bitwise_and(%507, %508) /* ty=Tensor[(11, 5, 14), int64] */;
  %510 = cast(%504, dtype="bool") /* ty=Tensor[(11, 5, 14), bool] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="bool") /* ty=Tensor[(11, 5, 14), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %514 = cast(meta[relay.Constant][28] /* ty=Tensor[(450), int32] */, dtype="int32") /* ty=Tensor[(450), int32] */;
  %515 = reshape(%514, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), int32] */;
  %516 = @func_1749(%515) /* ty=(Tensor[(378), float32], Tensor[(5, 15, 6), bool], Tensor[(7, 3, 3), float64]) */;
  %517 = cast(%499, dtype="float64") /* ty=Tensor[(11, 5, 14), float64] */;
  %518 = %490.0;
  %519 = %491.0;
  %520 = tan(%494) /* ty=Tensor[(7, 3, 3), float32] */;
  %521 = %497.0;
  %522 = logical_or(%512, %513) /* ty=Tensor[(11, 5, 14), bool] */;
  %523 = %516.1;
  %524 = sin(%517) /* ty=Tensor[(11, 5, 14), float64] */;
  (%518, %519, %520, %521, meta[relay.Constant][26] /* ty=Tensor[(378), float32] */, %522, %523, meta[relay.Constant][28] /* ty=Tensor[(450), int32] */, %524)
}

def @func_3372() -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64]) {
  %525 = @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %526 = @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */;
  %527 = %525.0;
  %528 = %526.0;
  (%527, %528)
}

def @main(%var_4978: Tensor[(9, 12, 2), float64], %var_4996: Tensor[(9, 12, 2), float64], %var_5020: Tensor[(378), float32]) -> (Tensor[(7, 3, 3), float32], Tensor[(6, 63), uint16], Tensor[(378), float32], Tensor[(9, 12, 2), uint64], Tensor[(9, 12, 2), bool], Tensor[(9, 12, 2), float32]) {
  %529 = @func_1715() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) */;
  %530 = cast(%var_5020, dtype="float32") /* ty=Tensor[(378), float32] */;
  %531 = reshape(%530, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %532 = @func_3204(%531) /* ty=(Tensor[(6, 63), uint16],) */;
  %533 = cast(%var_4978, dtype="float64") /* ty=Tensor[(9, 12, 2), float64] */;
  %534 = cosh(%533) /* ty=Tensor[(9, 12, 2), float64] */;
  %535 = cast(%var_4996, dtype="uint16") /* ty=Tensor[(9, 12, 2), uint16] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="uint16") /* ty=Tensor[(9, 12, 2), uint16] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %539 = right_shift(%537, %538) /* ty=Tensor[(9, 12, 2), uint16] */;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %541 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%534, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %544 = power(%542, %543) /* ty=Tensor[(9, 12, 2), float32] */;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %546 = atan(%545) /* ty=Tensor[(9, 12, 2), float32] */;
  %547 = cast(%534, dtype="uint64") /* ty=Tensor[(9, 12, 2), uint64] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="uint64") /* ty=Tensor[(9, 12, 2), uint64] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %551 = cast(%var_4996, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %552 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%534, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %555 = cast(%546, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %556 = log2(%555) /* ty=Tensor[(9, 12, 2), float32] */;
  %557 = cast(%556, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %558 = %529.1;
  %559 = %532.0;
  %560 = subtract(%549, %550) /* ty=Tensor[(9, 12, 2), uint64] */;
  %561 = logical_and(%553, %554) /* ty=Tensor[(9, 12, 2), bool] */;
  %562 = sqrt(%557) /* ty=Tensor[(9, 12, 2), float32] */;
  (%558, %559, %var_5020, %560, %561, %562)
}

def @func_4365() -> (Tensor[(7, 3, 3), float64],) {
  %563 = @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */;
  %564 = %563.0;
  (%564,)
}

def @func_1976() -> (Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  %565 = @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %566 = cast(meta[relay.Constant][29] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %567 = cast(meta[relay.Constant][30] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %568 = reshape(%566, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
  %569 = reshape(%567, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %570 = @func_577(%568, %569) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
  %571 = %565.0;
  %572 = %570.2;
  (%571, %572, meta[relay.Constant][29] /* ty=Tensor[(2016), float32] */, meta[relay.Constant][30] /* ty=Tensor[(378), float32] */)
}

def @func_1917() -> (Tensor[(7, 3, 3), float64],) {
  %573 = @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */;
  %574 = %573.0;
  (%574,)
}

def @func_1078(%var_1070: float64, %var_1071: Tensor[(5, 12, 5), float64]) -> Tensor[(5, 12, 5), float64] {
  %575 = cast(%var_1070, dtype="float64") /* ty=float64 */;
  %576 = cast(%var_1071, dtype="float64") /* ty=Tensor[(5, 12, 5), float64] */;
  mod(%575, %576) /* ty=Tensor[(5, 12, 5), float64] */
}

def @func_4866(%var_4831: Tensor[(300), float64], %var_4863: float64) -> (Tensor[(5, 15, 6), int32], Tensor[(7, 3, 3), uint8], Tensor[(640), uint16], Tensor[(300), float64], Tensor[(12, 15, 12), bool], Tensor[(1, 2160), float64], Tensor[(63), float64], float64, float64) {
  %577 = @func_1448() /* ty=(Tensor[(5, 15, 6), int32],) */;
  %578 = cast(meta[relay.Constant][31] /* ty=Tensor[(640), uint16] */, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %579 = cast(meta[relay.Constant][31] /* ty=Tensor[(640), uint16] */, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %580 = cast(%var_4831, dtype="float64") /* ty=Tensor[(300), float64] */;
  %581 = cast(meta[relay.Constant][32] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %582 = reshape(%578, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), uint16] */;
  %583 = reshape(%579, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), uint16] */;
  %584 = reshape(%580, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %585 = reshape(%581, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), float64] */;
  %586 = @func_4036(%582, %583, %584, %585) /* ty=(Tensor[(630), float64], Tensor[(5, 12, 5), float64], Tensor[(5, 60), float64], Tensor[(8, 10, 8), bool], Tensor[(7, 3, 3), uint8]) */;
  %587 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 2160), float64] */, dtype="float64") /* ty=Tensor[(1, 2160), float64] */;
  %588 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 2160), float64] */, dtype="float64") /* ty=Tensor[(1, 2160), float64] */;
  %589 = reshape(%587, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %590 = reshape(%588, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %591 = @func_3755(%589, %590) /* ty=(Tensor[(12, 15, 12), bool], Tensor[(12, 15, 12), uint8], Tensor[(12, 15, 12), float64]) */;
  %592 = cast(meta[relay.Constant][32] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %593 = cast(%var_4863, dtype="float64") /* ty=float64 */;
  %594 = reshape(%593, newshape=[]) /* ty=float64 */;
  %595 = @func_4337(%594) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(300), float64], Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float64]) */;
  %596 = %577.0;
  %597 = %586.4;
  %598 = %591.0;
  %599 = exp(%592) /* ty=Tensor[(63), float64] */;
  %600 = %595.3;
  (%596, %597, meta[relay.Constant][31] /* ty=Tensor[(640), uint16] */, %var_4831, %598, meta[relay.Constant][33] /* ty=Tensor[(1, 2160), float64] */, %599, %600, %var_4863)
}

def @func_1531(%var_1493: Tensor[(5, 15, 6), int32], %var_1509: Tensor[(156), float32]) -> (Tensor[(5, 15, 6), uint64], Tensor[(5, 15, 6), int32], Tensor[(1, 13, 12), float32], Tensor[(156), float32]) {
  %601 = @func_1448() /* ty=(Tensor[(5, 15, 6), int32],) */;
  %602 = %601.0;
  %603 = cast(%var_1493, dtype="uint64") /* ty=Tensor[(5, 15, 6), uint64] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%602, dtype="uint64") /* ty=Tensor[(5, 15, 6), uint64] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %607 = cast(%var_1493, dtype="int32") /* ty=Tensor[(5, 15, 6), int32] */;
  %608 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%602, dtype="int32") /* ty=Tensor[(5, 15, 6), int32] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %611 = cast(%var_1509, dtype="float32") /* ty=Tensor[(156), float32] */;
  %612 = reshape(%611, newshape=[1, 13, 12]) /* ty=Tensor[(1, 13, 12), float32] */;
  %613 = @func_154(%612) /* ty=(Tensor[(15, 13, 12), uint16], Tensor[(1, 13, 12), float32]) */;
  %614 = bitwise_or(%605, %606) /* ty=Tensor[(5, 15, 6), uint64] */;
  %615 = left_shift(%609, %610) /* ty=Tensor[(5, 15, 6), int32] */;
  %616 = %613.1;
  (%614, %615, %616, %var_1509)
}

def @func_3136(%var_3074: Tensor[(7, 3, 3), float64]) -> (Tensor[(7, 3, 3), int16], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64]) {
  %617 = @func_2514() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %618 = %617.0;
  %619 = cast(%var_3074, dtype="int16") /* ty=Tensor[(7, 3, 3), int16] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%618, dtype="int16") /* ty=Tensor[(7, 3, 3), int16] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %623 = @func_1170() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %624 = @func_1230() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %625 = logical_xor(%621, %622) /* ty=Tensor[(7, 3, 3), int16] */;
  %626 = %623.0;
  %627 = %624.0;
  (%625, %626, %627)
}

def @func_4807(%var_4718: Tensor[(16, 9, 6), uint8], %var_4765: Tensor[(378), float32]) -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(?, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(16, 9, 6), bool]) {
  %628 = cast(%var_4765, dtype="float32") /* ty=Tensor[(378), float32] */;
  %629 = reshape(%628, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %630 = @func_1936(%629) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %631 = cast(meta[relay.Constant][34] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %632 = reshape(%631, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %633 = @func_1653(%632) /* ty=(Tensor[(?, 15, 16), float64],) */;
  %634 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %635 = @func_2514() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %636 = cast(%var_4718, dtype="uint8") /* ty=Tensor[(16, 9, 6), uint8] */;
  %637 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(16, 9, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 9, 6), uint8] */, dtype="uint8") /* ty=Tensor[(16, 9, 6), uint8] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %640 = bitwise_xor(%638, %639) /* ty=Tensor[(16, 9, 6), uint8] */;
  %641 = cast(%640, dtype="float64") /* ty=Tensor[(16, 9, 6), float64] */;
  %642 = sin(%641) /* ty=Tensor[(16, 9, 6), float64] */;
  %643 = cast(%var_4718, dtype="bool") /* ty=Tensor[(16, 9, 6), bool] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%642, dtype="bool") /* ty=Tensor[(16, 9, 6), bool] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %647 = %630.3;
  %648 = %633.0;
  %649 = %634.0;
  %650 = %635.0;
  %651 = greater(%645, %646) /* ty=Tensor[(16, 9, 6), bool] */;
  (%647, %var_4765, %648, meta[relay.Constant][34] /* ty=Tensor[(240), float64] */, %649, %650, %651)
}

def @func_2988(%var_2938: Tensor[(1, 7, 1), uint32]) -> (Tensor[(1, 7, 1), uint32], Tensor[(1, 7, 1), float32], Tensor[(1, 7, 1), float32], Tensor[(15, 7, 6), bool], Tensor[(7, 3, 3), float64]) {
  %652 = cast(meta[relay.Constant][36] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %653 = cast(%var_2938, dtype="uint32") /* ty=Tensor[(1, 7, 1), uint32] */;
  %654 = cast(%var_2938, dtype="float32") /* ty=Tensor[(1, 7, 1), float32] */;
  %655 = cast(meta[relay.Constant][36] /* ty=uint32 */, dtype="float32") /* ty=float32 */;
  %656 = cast(%var_2938, dtype="float32") /* ty=Tensor[(1, 7, 1), float32] */;
  %657 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %658 = bitwise_or(%652, %653) /* ty=Tensor[(1, 7, 1), uint32] */;
  %659 = mod(%654, %655) /* ty=Tensor[(1, 7, 1), float32] */;
  %660 = asin(%656) /* ty=Tensor[(1, 7, 1), float32] */;
  %661 = @func_2883() /* ty=Tensor[(15, 7, 6), bool] */;
  %662 = %657.0;
  (%658, %659, %660, %661, %662)
}

def @func_1170() -> (Tensor[(7, 3, 3), float64],) {
  %663 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %664 = %663.0;
  (%664,)
}

def @func_1230() -> (Tensor[(7, 3, 3), float64],) {
  %665 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %666 = %665.0;
  (%666,)
}

def @func_1820(%var_1795: Tensor[(15, 7, 6), float64]) -> (Tensor[(15, 7, 6), float32], Tensor[(15, 7, 6), bool]) {
  %667 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 7, 6), int64] */, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
  %668 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(15, 7, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 7, 6), int64] */, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %671 = not_equal(%669, %670) /* ty=Tensor[(15, 7, 6), bool] */;
  %672 = cast(%671, dtype="float64") /* ty=Tensor[(15, 7, 6), float64] */;
  %673 = asin(%672) /* ty=Tensor[(15, 7, 6), float64] */;
  %674 = cast(%var_1795, dtype="float32") /* ty=Tensor[(15, 7, 6), float32] */;
  %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%673, dtype="float32") /* ty=Tensor[(15, 7, 6), float32] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %678 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 7, 6), int64] */, dtype="int64") /* ty=Tensor[(15, 7, 6), int64] */;
  %679 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(15, 7, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 7, 6), int64] */, dtype="int64") /* ty=Tensor[(15, 7, 6), int64] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %682 = bitwise_and(%680, %681) /* ty=Tensor[(15, 7, 6), int64] */;
  %683 = cast(%682, dtype="float64") /* ty=Tensor[(15, 7, 6), float64] */;
  %684 = sigmoid(%683) /* ty=Tensor[(15, 7, 6), float64] */;
  %685 = cast(%684, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
  %686 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%673, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %689 = floor_divide(%676, %677) /* ty=Tensor[(15, 7, 6), float32] */;
  %690 = equal(%687, %688) /* ty=Tensor[(15, 7, 6), bool] */;
  (%689, %690)
}

def @func_2614() -> (Tensor[(7, 3, 3), float64], Tensor[(15, 7, 6), bool], Tensor[(630), float64]) {
  %691 = cast(meta[relay.Constant][39] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %692 = reshape(%691, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), float64] */;
  %693 = @func_1820(%692) /* ty=(Tensor[(15, 7, 6), float32], Tensor[(15, 7, 6), bool]) */;
  %694 = @func_2004() /* ty=Tensor[(7, 3, 3), float64] */;
  %695 = %693.1;
  (%694, %695, meta[relay.Constant][39] /* ty=Tensor[(630), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4878(%var_4877: Tensor[(10, 14, 12), float64]) -> (Tensor[(10, 14, 12), float64],) {
  %2 = fn (%var_4872: Tensor[(10, 14, 12), float64]) -> (Tensor[(10, 14, 12), float64],) {
    %0 = cast(%var_4872, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
    %1 = acosh(%0) /* ty=Tensor[(10, 14, 12), float64] */;
    (%1,)
  };
  %2(%var_4877) /* ty=(Tensor[(10, 14, 12), float64],) */
}

def @func_3642() -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32], Tensor[(6, 63), uint16], Tensor[(378), float32], Tensor[(11, 5, 14), bool], Tensor[(5, 15, 6), bool], Tensor[(450), int32], Tensor[(11, 5, 14), float64]) {
  @func_3640() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32], Tensor[(6, 63), uint16], Tensor[(378), float32], Tensor[(11, 5, 14), bool], Tensor[(5, 15, 6), bool], Tensor[(450), int32], Tensor[(11, 5, 14), float64]) */
}

def @func_1563() -> (Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  %11 = fn () -> (Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
    %3 = @func_1170() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %6 = reshape(%4, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
    %7 = reshape(%5, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
    %8 = @func_577(%6, %7) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
    %9 = %3.0;
    %10 = %8.1;
    (%9, %10, meta[relay.Constant][0] /* ty=Tensor[(2016), float32] */, meta[relay.Constant][1] /* ty=Tensor[(378), float32] */)
  };
  %11() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */
}

def @func_4340(%var_4338: float64) -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(300), float64], Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float64]) {
  @func_4337(%var_4338) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(300), float64], Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float64]) */
}

def @func_4126() -> (Tensor[(7, 3, 3), float64], Tensor[(?, 15, 16), float64], Tensor[(1, 240), float64], Tensor[(7, 3, 3), bool]) {
  %21 = fn () -> (Tensor[(7, 3, 3), float64], Tensor[(?, 15, 16), float64], Tensor[(1, 240), float64], Tensor[(7, 3, 3), bool]) {
    %12 = @func_1908() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %13 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 240), float64] */, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
    %14 = reshape(%13, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
    %15 = @func_1653(%14) /* ty=(Tensor[(?, 15, 16), float64],) */;
    %16 = %12.0;
    %17 = cast(%16, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
    %18 = reshape(%17, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), float64] */;
    %19 = %15.0;
    %20 = @func_2175(%18) /* ty=Tensor[(7, 3, 3), bool] */;
    (%16, %19, meta[relay.Constant][2] /* ty=Tensor[(1, 240), float64] */, %20)
  };
  %21() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(?, 15, 16), float64], Tensor[(1, 240), float64], Tensor[(7, 3, 3), bool]) */
}

def @func_2006() -> Tensor[(7, 3, 3), float64] {
  @func_2004() /* ty=Tensor[(7, 3, 3), float64] */
}

def @func_2372(%var_2304: Tensor[(2016), float32], %var_2368: Tensor[(5, 60), float64]) -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(2016), uint32], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(2016), int32], Tensor[(378), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(5, 60), float64]) {
  %22 = @func_2058() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %24 = reshape(%23, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %25 = @func_1936(%24) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %26 = %25.2;
  %27 = cast(%var_2304, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(1), int32] */;
  %29 = cast(%26, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %31 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %32 = cast(%var_2304, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %33 = log(%32) /* ty=Tensor[(2016), float64] */;
  %34 = cast(%26, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(1), int32] */;
  %36 = cast(%33, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?), int32] */;
  %38 = cast(meta[relay.Constant][4] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %39 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(378), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?), float32] */;
  %42 = divide(%40, %41) /* ty=Tensor[(378), float32] */;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(378), float64] */;
  %44 = cast(-4.52889f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %45 = cast(%var_2368, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %46 = reshape(%44, newshape=[]) /* ty=float64 */;
  %47 = reshape(%45, newshape=[5, 12, 5]) /* ty=Tensor[(5, 12, 5), float64] */;
  %48 = @func_2004() /* ty=Tensor[(7, 3, 3), float64] */;
  %49 = %22.0;
  %50 = bitwise_and(%29, %30) /* ty=Tensor[(2016), uint32] */;
  %51 = %31.0;
  %52 = @func_2004() /* ty=Tensor[(7, 3, 3), float64] */;
  %53 = logical_xor(%36, %37) /* ty=Tensor[(2016), int32] */;
  %54 = log(%43) /* ty=Tensor[(378), float64] */;
  %55 = @func_1078(%46, %47) /* ty=Tensor[(5, 12, 5), float64] */;
  (%48, %49, %50, %51, %52, %53, %54, %55, -4.52889f64 /* ty=float64 */, %var_2368)
}

def @func_1823(%var_1821: Tensor[(15, 7, 6), float64]) -> (Tensor[(15, 7, 6), float32], Tensor[(15, 7, 6), bool]) {
  @func_1820(%var_1821) /* ty=(Tensor[(15, 7, 6), float32], Tensor[(15, 7, 6), bool]) */
}

def @func_2578() -> Tensor[(7, 3, 3), float32] {
  %59 = fn () -> Tensor[(7, 3, 3), float32] {
    %56 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %57 = %56.0;
    %58 = cast(%57, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
    log10(%58) /* ty=Tensor[(7, 3, 3), float32] */
  };
  %59() /* ty=Tensor[(7, 3, 3), float32] */
}

def @func_1919() -> (Tensor[(7, 3, 3), float64],) {
  @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */
}

def @func_4866(%var_4831: Tensor[(300), float64], %var_4863: float64) -> (Tensor[(5, 15, 6), int32], Tensor[(7, 3, 3), uint8], Tensor[(640), uint16], Tensor[(300), float64], Tensor[(12, 15, 12), bool], Tensor[(1, 2160), float64], Tensor[(63), float64], float64, float64) {
  %60 = @func_1448() /* ty=(Tensor[(5, 15, 6), int32],) */;
  %61 = cast(meta[relay.Constant][5] /* ty=Tensor[(640), uint16] */, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %62 = cast(meta[relay.Constant][5] /* ty=Tensor[(640), uint16] */, dtype="uint16") /* ty=Tensor[(640), uint16] */;
  %63 = cast(%var_4831, dtype="float64") /* ty=Tensor[(300), float64] */;
  %64 = cast(meta[relay.Constant][6] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %65 = reshape(%61, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), uint16] */;
  %66 = reshape(%62, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), uint16] */;
  %67 = reshape(%63, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %68 = reshape(%64, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), float64] */;
  %69 = @func_4036(%65, %66, %67, %68) /* ty=(Tensor[(630), float64], Tensor[(5, 12, 5), float64], Tensor[(5, 60), float64], Tensor[(8, 10, 8), bool], Tensor[(7, 3, 3), uint8]) */;
  %70 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 2160), float64] */, dtype="float64") /* ty=Tensor[(1, 2160), float64] */;
  %71 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 2160), float64] */, dtype="float64") /* ty=Tensor[(1, 2160), float64] */;
  %72 = reshape(%70, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %73 = reshape(%71, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %74 = @func_3755(%72, %73) /* ty=(Tensor[(12, 15, 12), bool], Tensor[(12, 15, 12), uint8], Tensor[(12, 15, 12), float64]) */;
  %75 = cast(meta[relay.Constant][6] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %76 = cast(%var_4863, dtype="float64") /* ty=float64 */;
  %77 = reshape(%76, newshape=[]) /* ty=float64 */;
  %78 = @func_4337(%77) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(300), float64], Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float64]) */;
  %79 = %60.0;
  %80 = %69.4;
  %81 = %74.0;
  %82 = exp(%75) /* ty=Tensor[(63), float64] */;
  %83 = %78.3;
  (%79, %80, meta[relay.Constant][5] /* ty=Tensor[(640), uint16] */, %var_4831, %81, meta[relay.Constant][7] /* ty=Tensor[(1, 2160), float64] */, %82, %83, %var_4863)
}

def @func_892() -> Tensor[(7, 3, 3), float64] {
  @func_890() /* ty=Tensor[(7, 3, 3), float64] */
}

def @func_4443() -> (Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float32], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  @func_4441() /* ty=(Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float32], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) */
}

def @func_2990(%var_2989: Tensor[(1, 7, 1), uint32]) -> (Tensor[(1, 7, 1), uint32], Tensor[(1, 7, 1), float32], Tensor[(1, 7, 1), float32], Tensor[(15, 7, 6), bool], Tensor[(7, 3, 3), float64]) {
  %95 = fn (%var_2938: Tensor[(1, 7, 1), uint32]) -> (Tensor[(1, 7, 1), uint32], Tensor[(1, 7, 1), float32], Tensor[(1, 7, 1), float32], Tensor[(15, 7, 6), bool], Tensor[(7, 3, 3), float64]) {
    %84 = cast(meta[relay.Constant][8] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %85 = cast(%var_2938, dtype="uint32") /* ty=Tensor[(1, 7, 1), uint32] */;
    %86 = cast(%var_2938, dtype="float32") /* ty=Tensor[(1, 7, 1), float32] */;
    %87 = cast(meta[relay.Constant][8] /* ty=uint32 */, dtype="float32") /* ty=float32 */;
    %88 = cast(%var_2938, dtype="float32") /* ty=Tensor[(1, 7, 1), float32] */;
    %89 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %90 = bitwise_or(%84, %85) /* ty=Tensor[(1, 7, 1), uint32] */;
    %91 = mod(%86, %87) /* ty=Tensor[(1, 7, 1), float32] */;
    %92 = asin(%88) /* ty=Tensor[(1, 7, 1), float32] */;
    %93 = @func_2883() /* ty=Tensor[(15, 7, 6), bool] */;
    %94 = %89.0;
    (%90, %91, %92, %93, %94)
  };
  %95(%var_2989) /* ty=(Tensor[(1, 7, 1), uint32], Tensor[(1, 7, 1), float32], Tensor[(1, 7, 1), float32], Tensor[(15, 7, 6), bool], Tensor[(7, 3, 3), float64]) */
}

def @func_1534(%var_1532: Tensor[(5, 15, 6), int32], %var_1533: Tensor[(156), float32]) -> (Tensor[(5, 15, 6), uint64], Tensor[(5, 15, 6), int32], Tensor[(1, 13, 12), float32], Tensor[(156), float32]) {
  %112 = fn (%var_1493: Tensor[(5, 15, 6), int32], %var_1509: Tensor[(156), float32]) -> (Tensor[(5, 15, 6), uint64], Tensor[(5, 15, 6), int32], Tensor[(1, 13, 12), float32], Tensor[(156), float32]) {
    %96 = @func_1448() /* ty=(Tensor[(5, 15, 6), int32],) */;
    %97 = %96.0;
    %98 = cast(%var_1493, dtype="uint64") /* ty=Tensor[(5, 15, 6), uint64] */;
    %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
    %100 = cast(%97, dtype="uint64") /* ty=Tensor[(5, 15, 6), uint64] */;
    %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %102 = cast(%var_1493, dtype="int32") /* ty=Tensor[(5, 15, 6), int32] */;
    %103 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
    %104 = cast(%97, dtype="int32") /* ty=Tensor[(5, 15, 6), int32] */;
    %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %106 = cast(%var_1509, dtype="float32") /* ty=Tensor[(156), float32] */;
    %107 = reshape(%106, newshape=[1, 13, 12]) /* ty=Tensor[(1, 13, 12), float32] */;
    %108 = @func_154(%107) /* ty=(Tensor[(15, 13, 12), uint16], Tensor[(1, 13, 12), float32]) */;
    %109 = bitwise_or(%100, %101) /* ty=Tensor[(5, 15, 6), uint64] */;
    %110 = left_shift(%104, %105) /* ty=Tensor[(5, 15, 6), int32] */;
    %111 = %108.1;
    (%109, %110, %111, %var_1509)
  };
  %112(%var_1532, %var_1533) /* ty=(Tensor[(5, 15, 6), uint64], Tensor[(5, 15, 6), int32], Tensor[(1, 13, 12), float32], Tensor[(156), float32]) */
}

def @func_1909() -> (Tensor[(7, 3, 3), float64],) {
  %115 = fn () -> (Tensor[(7, 3, 3), float64],) {
    %113 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %114 = %113.0;
    (%114,)
  };
  %115() /* ty=(Tensor[(7, 3, 3), float64],) */
}

def @func_4337(%var_4320: float64) -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(300), float64], Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float64]) {
  %116 = @func_2058() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %117 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %118 = cast(%var_4320, dtype="float64") /* ty=float64 */;
  %119 = cast(meta[relay.Constant][9] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %120 = reshape(%118, newshape=[]) /* ty=float64 */;
  %121 = reshape(%119, newshape=[300, 1]) /* ty=Tensor[(300, 1), float64] */;
  %122 = @func_4291(%120, %121) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(11, 5, 14), bool], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) */;
  %123 = cast(meta[relay.Constant][9] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %124 = reshape(%123, newshape=[300, 1]) /* ty=Tensor[(300, 1), float64] */;
  %125 = @func_1131(%124) /* ty=(Tensor[(7, 3, 3), float32], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) */;
  %126 = %116.0;
  %127 = %117.0;
  %128 = %122.3;
  %129 = %125.0;
  %130 = @func_2004() /* ty=Tensor[(7, 3, 3), float64] */;
  (%126, %127, %128, %var_4320, meta[relay.Constant][9] /* ty=Tensor[(300), float64] */, %129, %130)
}

def @func_1820(%var_1795: Tensor[(15, 7, 6), float64]) -> (Tensor[(15, 7, 6), float32], Tensor[(15, 7, 6), bool]) {
  %131 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 7, 6), int64] */, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
  %132 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(15, 7, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 7, 6), int64] */, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %135 = not_equal(%133, %134) /* ty=Tensor[(15, 7, 6), bool] */;
  %136 = cast(%135, dtype="float64") /* ty=Tensor[(15, 7, 6), float64] */;
  %137 = asin(%136) /* ty=Tensor[(15, 7, 6), float64] */;
  %138 = cast(%var_1795, dtype="float32") /* ty=Tensor[(15, 7, 6), float32] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%137, dtype="float32") /* ty=Tensor[(15, 7, 6), float32] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %142 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 7, 6), int64] */, dtype="int64") /* ty=Tensor[(15, 7, 6), int64] */;
  %143 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(15, 7, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 7, 6), int64] */, dtype="int64") /* ty=Tensor[(15, 7, 6), int64] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %146 = bitwise_and(%144, %145) /* ty=Tensor[(15, 7, 6), int64] */;
  %147 = cast(%146, dtype="float64") /* ty=Tensor[(15, 7, 6), float64] */;
  %148 = sigmoid(%147) /* ty=Tensor[(15, 7, 6), float64] */;
  %149 = cast(%148, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
  %150 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%137, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %153 = floor_divide(%140, %141) /* ty=Tensor[(15, 7, 6), float32] */;
  %154 = equal(%151, %152) /* ty=Tensor[(15, 7, 6), bool] */;
  (%153, %154)
}

def @func_4678() -> (Tensor[(7, 3, 3), float64], Tensor[(12, 15, 12), bool], Tensor[(2160), float64]) {
  @func_4676() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(12, 15, 12), bool], Tensor[(2160), float64]) */
}

def @func_4478() -> Tensor[(7, 3, 3), float32] {
  @func_4476() /* ty=Tensor[(7, 3, 3), float32] */
}

def @func_4952(%var_4950: int64, %var_4951: Tensor[(3, 7, 2), int64]) -> (Tensor[(3, 7, 2), bool], Tensor[(2016), float32], Tensor[(378), float32], Tensor[(6, 63), float32]) {
  %171 = fn (%var_4917: int64, %var_4918: Tensor[(3, 7, 2), int64]) -> (Tensor[(3, 7, 2), bool], Tensor[(2016), float32], Tensor[(378), float32], Tensor[(6, 63), float32]) {
    %155 = cast(%var_4917, dtype="int64") /* ty=int64 */;
    %156 = cast(%var_4918, dtype="int64") /* ty=Tensor[(3, 7, 2), int64] */;
    %157 = bitwise_or(%155, %156) /* ty=Tensor[(3, 7, 2), int64] */;
    %158 = cast(%var_4917, dtype="bool") /* ty=bool */;
    %159 = cast(%157, dtype="bool") /* ty=Tensor[(3, 7, 2), bool] */;
    %160 = cast(meta[relay.Constant][12] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %161 = reshape(%160, newshape=[378]) /* ty=Tensor[(378), float32] */;
    %162 = @func_2035(%161) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
    %163 = %162.3;
    %164 = cast(%163, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %165 = cast(meta[relay.Constant][12] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %166 = reshape(%164, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
    %167 = reshape(%165, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
    %168 = @func_577(%166, %167) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
    %169 = less(%158, %159) /* ty=Tensor[(3, 7, 2), bool] */;
    %170 = %168.2;
    (%169, %163, meta[relay.Constant][12] /* ty=Tensor[(378), float32] */, %170)
  };
  %171(%var_4950, %var_4951) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(2016), float32], Tensor[(378), float32], Tensor[(6, 63), float32]) */
}

def @func_2177(%var_2176: Tensor[(7, 3, 3), float64]) -> Tensor[(7, 3, 3), bool] {
  %177 = fn (%var_2164: Tensor[(7, 3, 3), float64]) -> Tensor[(7, 3, 3), bool] {
    %172 = @func_2004() /* ty=Tensor[(7, 3, 3), float64] */;
    %173 = cast(%var_2164, dtype="bool") /* ty=Tensor[(7, 3, 3), bool] */;
    %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
    %175 = cast(%172, dtype="bool") /* ty=Tensor[(7, 3, 3), bool] */;
    %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%175, %176) /* ty=Tensor[(7, 3, 3), bool] */
  };
  %177(%var_2176) /* ty=Tensor[(7, 3, 3), bool] */
}

def @func_1655(%var_1654: Tensor[(1, 15, 16), float64]) -> (Tensor[(?, 15, 16), float64],) {
  %183 = fn (%var_1648: Tensor[(1, 15, 16), float64]) -> (Tensor[(?, 15, 16), float64],) {
    %178 = cast(%var_1648, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
    %179 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(1, 15, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %180 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 15, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
    %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %182 = add(%180, %181) /* ty=Tensor[(?, 15, 16), float64] */;
    (%182,)
  };
  %183(%var_1654) /* ty=(Tensor[(?, 15, 16), float64],) */
}

def @func_4810(%var_4808: Tensor[(16, 9, 6), uint8], %var_4809: Tensor[(378), float32]) -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(?, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(16, 9, 6), bool]) {
  %208 = fn (%var_4718: Tensor[(16, 9, 6), uint8], %var_4765: Tensor[(378), float32]) -> (Tensor[(378), float32], Tensor[(378), float32], Tensor[(?, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(16, 9, 6), bool]) {
    %184 = cast(%var_4765, dtype="float32") /* ty=Tensor[(378), float32] */;
    %185 = reshape(%184, newshape=[378]) /* ty=Tensor[(378), float32] */;
    %186 = @func_1936(%185) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
    %187 = cast(meta[relay.Constant][14] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %188 = reshape(%187, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
    %189 = @func_1653(%188) /* ty=(Tensor[(?, 15, 16), float64],) */;
    %190 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %191 = @func_2514() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %192 = cast(%var_4718, dtype="uint8") /* ty=Tensor[(16, 9, 6), uint8] */;
    %193 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(16, 9, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %194 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 9, 6), uint8] */, dtype="uint8") /* ty=Tensor[(16, 9, 6), uint8] */;
    %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %196 = bitwise_xor(%194, %195) /* ty=Tensor[(16, 9, 6), uint8] */;
    %197 = cast(%196, dtype="float64") /* ty=Tensor[(16, 9, 6), float64] */;
    %198 = sin(%197) /* ty=Tensor[(16, 9, 6), float64] */;
    %199 = cast(%var_4718, dtype="bool") /* ty=Tensor[(16, 9, 6), bool] */;
    %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
    %201 = cast(%198, dtype="bool") /* ty=Tensor[(16, 9, 6), bool] */;
    %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %203 = %186.3;
    %204 = %189.0;
    %205 = %190.0;
    %206 = %191.0;
    %207 = greater(%201, %202) /* ty=Tensor[(16, 9, 6), bool] */;
    (%203, %var_4765, %204, meta[relay.Constant][14] /* ty=Tensor[(240), float64] */, %205, %206, %207)
  };
  %208(%var_4808, %var_4809) /* ty=(Tensor[(378), float32], Tensor[(378), float32], Tensor[(?, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(16, 9, 6), bool]) */
}

def @func_581(%var_579: Tensor[(14, 16, 9), float32], %var_580: Tensor[(6, 63), float32]) -> (Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) {
  @func_577(%var_579, %var_580) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */
}

def @func_3975(%var_3974: Tensor[(7, 8, 13), float64]) -> Tensor[(7, 8, 13), float64] {
  %215 = fn (%var_3957: Tensor[(7, 8, 13), float64]) -> Tensor[(7, 8, 13), float64] {
    %209 = cast(%var_3957, dtype="float64") /* ty=Tensor[(7, 8, 13), float64] */;
    %210 = acosh(%209) /* ty=Tensor[(7, 8, 13), float64] */;
    %211 = cast(%var_3957, dtype="float64") /* ty=Tensor[(7, 8, 13), float64] */;
    %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
    %213 = cast(%210, dtype="float64") /* ty=Tensor[(7, 8, 13), float64] */;
    %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%213, %214) /* ty=Tensor[(7, 8, 13), float64] */
  };
  %215(%var_3974) /* ty=Tensor[(7, 8, 13), float64] */
}

def @func_1069() -> (Tensor[(7, 3, 3), float64],) {
  %219 = fn () -> (Tensor[(7, 3, 3), float64],) {
    %216 = @func_790() /* ty=Tensor[(7, 3, 3), float32] */;
    %217 = cast(%216, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
    %218 = acos(%217) /* ty=Tensor[(7, 3, 3), float64] */;
    (%218,)
  };
  %219() /* ty=(Tensor[(7, 3, 3), float64],) */
}

def @func_2484(%var_2435: Tensor[(378), float32]) -> (Tensor[(378), bool], Tensor[(378), float32], Tensor[(378), float32], Tensor[(7, 3, 3), float64]) {
  %220 = @func_1976() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %221 = %220.3;
  %222 = cast(%var_2435, dtype="bool") /* ty=Tensor[(378), bool] */;
  %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(1), int32] */;
  %224 = cast(%221, dtype="bool") /* ty=Tensor[(378), bool] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?), bool] */;
  %226 = @func_1976() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %227 = greater(%224, %225) /* ty=Tensor[(378), bool] */;
  %228 = cast(%227, dtype="float32") /* ty=Tensor[(378), float32] */;
  %229 = reshape(%228, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %230 = @func_962(%229) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(14, 16, 9), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %231 = %230.3;
  %232 = cast(%231, dtype="float32") /* ty=Tensor[(378), float32] */;
  %233 = %226.3;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(378), float32] */;
  %235 = reshape(%234, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %236 = @func_1936(%235) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %237 = atanh(%232) /* ty=Tensor[(378), float32] */;
  %238 = %236.0;
  (%227, %233, %237, %238)
}

def @func_890() -> Tensor[(7, 3, 3), float64] {
  %239 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %239.0
}

def @func_4166(%var_4154: Tensor[(300), float64]) -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], Tensor[(2016), float32], Tensor[(300), float64], Tensor[(5, 15, 6), int32]) {
  %240 = @func_2058() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %241 = cast(meta[relay.Constant][16] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %242 = cast(%var_4154, dtype="float64") /* ty=Tensor[(300), float64] */;
  %243 = reshape(%241, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %244 = reshape(%242, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %245 = @func_2372(%243, %244) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(2016), uint32], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(2016), int32], Tensor[(378), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(5, 60), float64]) */;
  %246 = @func_1448() /* ty=(Tensor[(5, 15, 6), int32],) */;
  %247 = %240.0;
  %248 = @func_3216() /* ty=Tensor[(7, 3, 3), float64] */;
  %249 = %245.7;
  %250 = %246.0;
  (%247, %248, %249, meta[relay.Constant][16] /* ty=Tensor[(2016), float32] */, %var_4154, %250)
}

def @func_1752(%var_1750: Tensor[(5, 15, 6), int32]) -> (Tensor[(378), float32], Tensor[(5, 15, 6), bool], Tensor[(7, 3, 3), float64]) {
  @func_1749(%var_1750) /* ty=(Tensor[(378), float32], Tensor[(5, 15, 6), bool], Tensor[(7, 3, 3), float64]) */
}

def @func_4087(%var_4053: Tensor[(48), int64]) -> (Tensor[(15, 7, 6), bool], Tensor[(6, 2, 4), int64], int64, Tensor[(48), int64], Tensor[(7, 3, 3), float64], Tensor[(378), float32], Tensor[(378), float32]) {
  %251 = cast(2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %252 = cast(%var_4053, dtype="int64") /* ty=Tensor[(48), int64] */;
  %253 = reshape(%251, newshape=[]) /* ty=int64 */;
  %254 = reshape(%252, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), int64] */;
  %255 = @func_3900(%253, %254) /* ty=(Tensor[(6, 2, 4), int64], Tensor[(7, 3, 3), float32]) */;
  %256 = cast(meta[relay.Constant][17] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %257 = reshape(%256, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %258 = @func_1936(%257) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %259 = cast(meta[relay.Constant][17] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %260 = reshape(%259, newshape=[378]) /* ty=Tensor[(378), float32] */;
  %261 = @func_1936(%260) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %262 = @func_2883() /* ty=Tensor[(15, 7, 6), bool] */;
  %263 = %255.0;
  %264 = %258.0;
  %265 = %261.3;
  (%262, %263, 2 /* ty=int64 */, %var_4053, %264, meta[relay.Constant][17] /* ty=Tensor[(378), float32] */, %265)
}

def @func_154(%var_128: Tensor[(1, 13, 12), float32]) -> (Tensor[(15, 13, 12), uint16], Tensor[(1, 13, 12), float32]) {
  %266 = cast(%var_128, dtype="float32") /* ty=Tensor[(1, 13, 12), float32] */;
  %267 = tan(%266) /* ty=Tensor[(1, 13, 12), float32] */;
  %268 = cast(%267, dtype="uint16") /* ty=Tensor[(1, 13, 12), uint16] */;
  %269 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 13, 12), float32] */, dtype="uint16") /* ty=Tensor[(15, 13, 12), uint16] */;
  %270 = cast(%267, dtype="float64") /* ty=Tensor[(1, 13, 12), float64] */;
  %271 = asin(%270) /* ty=Tensor[(1, 13, 12), float64] */;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(1, 13, 12), float32] */;
  %273 = bitwise_or(%268, %269) /* ty=Tensor[(15, 13, 12), uint16] */;
  %274 = erf(%272) /* ty=Tensor[(1, 13, 12), float32] */;
  (%273, %274)
}

def @func_3640() -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32], Tensor[(6, 63), uint16], Tensor[(378), float32], Tensor[(11, 5, 14), bool], Tensor[(5, 15, 6), bool], Tensor[(450), int32], Tensor[(11, 5, 14), float64]) {
  %275 = @func_2058() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %276 = @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %277 = @func_1230() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %278 = %277.0;
  %279 = cast(%278, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  %280 = cast(meta[relay.Constant][19] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %281 = reshape(%280, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %282 = @func_3204(%281) /* ty=(Tensor[(6, 63), uint16],) */;
  %283 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
  %284 = acos(%283) /* ty=Tensor[(11, 5, 14), float32] */;
  %285 = cast(%284, dtype="uint8") /* ty=Tensor[(11, 5, 14), uint8] */;
  %286 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(11, 5, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 5, 14), float32] */, dtype="uint8") /* ty=Tensor[(11, 5, 14), uint8] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %289 = logical_xor(%287, %288) /* ty=Tensor[(11, 5, 14), uint8] */;
  %290 = cast(%289, dtype="int64") /* ty=Tensor[(11, 5, 14), int64] */;
  %291 = shape_of(%284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%284, dtype="int64") /* ty=Tensor[(11, 5, 14), int64] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %294 = bitwise_and(%292, %293) /* ty=Tensor[(11, 5, 14), int64] */;
  %295 = cast(%289, dtype="bool") /* ty=Tensor[(11, 5, 14), bool] */;
  %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%294, dtype="bool") /* ty=Tensor[(11, 5, 14), bool] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %299 = cast(meta[relay.Constant][21] /* ty=Tensor[(450), int32] */, dtype="int32") /* ty=Tensor[(450), int32] */;
  %300 = reshape(%299, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), int32] */;
  %301 = @func_1749(%300) /* ty=(Tensor[(378), float32], Tensor[(5, 15, 6), bool], Tensor[(7, 3, 3), float64]) */;
  %302 = cast(%284, dtype="float64") /* ty=Tensor[(11, 5, 14), float64] */;
  %303 = %275.0;
  %304 = %276.0;
  %305 = tan(%279) /* ty=Tensor[(7, 3, 3), float32] */;
  %306 = %282.0;
  %307 = logical_or(%297, %298) /* ty=Tensor[(11, 5, 14), bool] */;
  %308 = %301.1;
  %309 = sin(%302) /* ty=Tensor[(11, 5, 14), float64] */;
  (%303, %304, %305, %306, meta[relay.Constant][19] /* ty=Tensor[(378), float32] */, %307, %308, meta[relay.Constant][21] /* ty=Tensor[(450), int32] */, %309)
}

def @func_3204(%var_3195: Tensor[(6, 63), float32]) -> (Tensor[(6, 63), uint16],) {
  %310 = @func_1976() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %311 = %310.1;
  %312 = cast(%var_3195, dtype="uint16") /* ty=Tensor[(6, 63), uint16] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(2), int32] */;
  %314 = cast(%311, dtype="uint16") /* ty=Tensor[(6, 63), uint16] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %316 = right_shift(%314, %315) /* ty=Tensor[(6, 63), uint16] */;
  (%316,)
}

def @func_1172() -> (Tensor[(7, 3, 3), float64],) {
  @func_1170() /* ty=(Tensor[(7, 3, 3), float64],) */
}

def @func_2726(%var_2724: int16, %var_2725: Tensor[(5, 6, 4), int16]) -> (Tensor[(5, 6, 4), int16], Tensor[(2016), float32], Tensor[(378), float32]) {
  %324 = fn (%var_2709: int16, %var_2710: Tensor[(5, 6, 4), int16]) -> (Tensor[(5, 6, 4), int16], Tensor[(2016), float32], Tensor[(378), float32]) {
    %317 = cast(%var_2709, dtype="int16") /* ty=int16 */;
    %318 = cast(%var_2710, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
    %319 = cast(meta[relay.Constant][22] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %320 = reshape(%319, newshape=[378]) /* ty=Tensor[(378), float32] */;
    %321 = @func_962(%320) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(14, 16, 9), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
    %322 = left_shift(%317, %318) /* ty=Tensor[(5, 6, 4), int16] */;
    %323 = %321.2;
    (%322, %323, meta[relay.Constant][22] /* ty=Tensor[(378), float32] */)
  };
  %324(%var_2724, %var_2725) /* ty=(Tensor[(5, 6, 4), int16], Tensor[(2016), float32], Tensor[(378), float32]) */
}

def @func_4870(%var_4868: Tensor[(300), float64], %var_4869: float64) -> (Tensor[(5, 15, 6), int32], Tensor[(7, 3, 3), uint8], Tensor[(640), uint16], Tensor[(300), float64], Tensor[(12, 15, 12), bool], Tensor[(1, 2160), float64], Tensor[(63), float64], float64, float64) {
  @func_4866(%var_4868, %var_4869) /* ty=(Tensor[(5, 15, 6), int32], Tensor[(7, 3, 3), uint8], Tensor[(640), uint16], Tensor[(300), float64], Tensor[(12, 15, 12), bool], Tensor[(1, 2160), float64], Tensor[(63), float64], float64, float64) */
}

def @func_1081(%var_1079: float64, %var_1080: Tensor[(5, 12, 5), float64]) -> Tensor[(5, 12, 5), float64] {
  %327 = fn (%var_1070: float64, %var_1071: Tensor[(5, 12, 5), float64]) -> Tensor[(5, 12, 5), float64] {
    %325 = cast(%var_1070, dtype="float64") /* ty=float64 */;
    %326 = cast(%var_1071, dtype="float64") /* ty=Tensor[(5, 12, 5), float64] */;
    mod(%325, %326) /* ty=Tensor[(5, 12, 5), float64] */
  };
  %327(%var_1079, %var_1080) /* ty=Tensor[(5, 12, 5), float64] */
}

def @func_254(%var_253: Tensor[(9, 3, 14), float32]) -> Tensor[(9, 3, 14), float32] {
  %329 = fn (%var_185: Tensor[(9, 3, 14), float32]) -> Tensor[(9, 3, 14), float32] {
    %328 = cast(%var_185, dtype="float32") /* ty=Tensor[(9, 3, 14), float32] */;
    sinh(%328) /* ty=Tensor[(9, 3, 14), float32] */
  };
  %329(%var_253) /* ty=Tensor[(9, 3, 14), float32] */
}

def @func_3501(%var_3499: Tensor[(1, 120), int16], %var_3500: Tensor[(450), int32]) -> (Tensor[(15, 7, 6), bool], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32], Tensor[(378), float32], int16, Tensor[(1, 120), int16], Tensor[(5, 15, 6), bool], Tensor[(450), int32], Tensor[(?, 15, 16), float64], Tensor[(2, 120), float64]) {
  @func_3497(%var_3499, %var_3500) /* ty=(Tensor[(15, 7, 6), bool], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32], Tensor[(378), float32], int16, Tensor[(1, 120), int16], Tensor[(5, 15, 6), bool], Tensor[(450), int32], Tensor[(?, 15, 16), float64], Tensor[(2, 120), float64]) */
}

def @func_2261(%var_2259: Tensor[(16, 10, 9), float32], %var_2260: Tensor[(240), float64]) -> (Tensor[(?, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 3, 3), float64], Tensor[(16, 10, 9), float32], Tensor[(16, 10, 9), bool], Tensor[(2016), uint64], Tensor[(7, 3, 3), bool], Tensor[(16, 10, 9), float64]) {
  %364 = fn (%var_2182: Tensor[(16, 10, 9), float32], %var_2197: Tensor[(240), float64]) -> (Tensor[(?, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 3, 3), float64], Tensor[(16, 10, 9), float32], Tensor[(16, 10, 9), bool], Tensor[(2016), uint64], Tensor[(7, 3, 3), bool], Tensor[(16, 10, 9), float64]) {
    %330 = cast(%var_2197, dtype="float64") /* ty=Tensor[(240), float64] */;
    %331 = reshape(%330, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
    %332 = @func_1653(%331) /* ty=(Tensor[(?, 15, 16), float64],) */;
    %333 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %334 = cast(%var_2182, dtype="float32") /* ty=Tensor[(16, 10, 9), float32] */;
    %335 = sin(%334) /* ty=Tensor[(16, 10, 9), float32] */;
    %336 = cast(%335, dtype="float32") /* ty=Tensor[(16, 10, 9), float32] */;
    %337 = cast(%335, dtype="float32") /* ty=Tensor[(16, 10, 9), float32] */;
    %338 = acos(%337) /* ty=Tensor[(16, 10, 9), float32] */;
    %339 = cast(%338, dtype="bool") /* ty=Tensor[(16, 10, 9), bool] */;
    %340 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%335, dtype="bool") /* ty=Tensor[(16, 10, 9), bool] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %343 = @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */;
    %344 = %333.0;
    %345 = cast(%344, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
    %346 = reshape(%345, newshape=[7, 3, 3]) /* ty=Tensor[(7, 3, 3), float64] */;
    %347 = cast(%338, dtype="float64") /* ty=Tensor[(16, 10, 9), float64] */;
    %348 = sinh(%347) /* ty=Tensor[(16, 10, 9), float64] */;
    %349 = cast(%var_2182, dtype="uint8") /* ty=Tensor[(16, 10, 9), uint8] */;
    %350 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
    %351 = cast(%338, dtype="uint8") /* ty=Tensor[(16, 10, 9), uint8] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %353 = maximum(%351, %352) /* ty=Tensor[(16, 10, 9), uint8] */;
    %354 = cast(%353, dtype="float64") /* ty=Tensor[(16, 10, 9), float64] */;
    %355 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
    %356 = cast(%348, dtype="float64") /* ty=Tensor[(16, 10, 9), float64] */;
    %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %358 = %332.0;
    %359 = asin(%336) /* ty=Tensor[(16, 10, 9), float32] */;
    %360 = greater(%341, %342) /* ty=Tensor[(16, 10, 9), bool] */;
    %361 = %343.1;
    %362 = @func_2175(%346) /* ty=Tensor[(7, 3, 3), bool] */;
    %363 = multiply(%356, %357) /* ty=Tensor[(16, 10, 9), float64] */;
    (%358, %var_2197, %344, %359, %360, %361, %362, %363)
  };
  %364(%var_2259, %var_2260) /* ty=(Tensor[(?, 15, 16), float64], Tensor[(240), float64], Tensor[(7, 3, 3), float64], Tensor[(16, 10, 9), float32], Tensor[(16, 10, 9), bool], Tensor[(2016), uint64], Tensor[(7, 3, 3), bool], Tensor[(16, 10, 9), float64]) */
}

def @func_3262() -> (Tensor[(7, 3, 3), float32],) {
  %367 = fn () -> (Tensor[(7, 3, 3), float32],) {
    %365 = @func_1715() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) */;
    %366 = %365.1;
    (%366,)
  };
  %367() /* ty=(Tensor[(7, 3, 3), float32],) */
}

def @func_4294(%var_4292: float64, %var_4293: Tensor[(300, 1), float64]) -> (Tensor[(7, 3, 3), float64], Tensor[(11, 5, 14), bool], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) {
  %378 = fn (%var_4283: float64, %var_4284: Tensor[(300, 1), float64]) -> (Tensor[(7, 3, 3), float64], Tensor[(11, 5, 14), bool], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) {
    %368 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %369 = @func_3640() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32], Tensor[(6, 63), uint16], Tensor[(378), float32], Tensor[(11, 5, 14), bool], Tensor[(5, 15, 6), bool], Tensor[(450), int32], Tensor[(11, 5, 14), float64]) */;
    %370 = cast(%var_4283, dtype="float64") /* ty=float64 */;
    %371 = cast(%var_4284, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
    %372 = reshape(%370, newshape=[]) /* ty=float64 */;
    %373 = reshape(%371, newshape=[5, 12, 5]) /* ty=Tensor[(5, 12, 5), float64] */;
    %374 = %368.0;
    %375 = %369.5;
    %376 = @func_2418() /* ty=Tensor[(7, 3, 3), float64] */;
    %377 = @func_1078(%372, %373) /* ty=Tensor[(5, 12, 5), float64] */;
    (%374, %375, %376, %377, %var_4283, %var_4284)
  };
  %378(%var_4292, %var_4293) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(11, 5, 14), bool], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) */
}

def @func_1715() -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) {
  %379 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %380 = %379.0;
  %381 = @func_790() /* ty=Tensor[(7, 3, 3), float32] */;
  (%380, %381)
}

def @func_3357() -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), bool]) {
  %382 = @func_2514() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %383 = @func_1562() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %384 = %383.1;
  %385 = cast(%384, dtype="float64") /* ty=Tensor[(9, 3, 14), float64] */;
  %386 = sigmoid(%385) /* ty=Tensor[(9, 3, 14), float64] */;
  %387 = cast(%384, dtype="float32") /* ty=Tensor[(9, 3, 14), float32] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%386, dtype="float32") /* ty=Tensor[(9, 3, 14), float32] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %391 = @func_2514() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %392 = cast(%384, dtype="bool") /* ty=Tensor[(9, 3, 14), bool] */;
  %393 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%386, dtype="bool") /* ty=Tensor[(9, 3, 14), bool] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %396 = %382.0;
  %397 = @func_2004() /* ty=Tensor[(7, 3, 3), float64] */;
  %398 = mod(%389, %390) /* ty=Tensor[(9, 3, 14), float32] */;
  %399 = %391.0;
  %400 = greater(%394, %395) /* ty=Tensor[(9, 3, 14), bool] */;
  (%396, %397, %398, %399, %400)
}

def @func_1938(%var_1937: Tensor[(378), float32]) -> (Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  %409 = fn (%var_1926: Tensor[(378), float32]) -> (Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
    %401 = @func_1230() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %402 = cast(meta[relay.Constant][23] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %403 = cast(%var_1926, dtype="float32") /* ty=Tensor[(378), float32] */;
    %404 = reshape(%402, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
    %405 = reshape(%403, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
    %406 = @func_577(%404, %405) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
    %407 = %401.0;
    %408 = %406.1;
    (%407, %408, meta[relay.Constant][23] /* ty=Tensor[(2016), float32] */, %var_1926)
  };
  %409(%var_1937) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */
}

def @func_861() -> (Tensor[(7, 3, 3), float64],) {
  %410 = @func_790() /* ty=Tensor[(7, 3, 3), float32] */;
  %411 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 3, 3), float32] */, dtype="uint16") /* ty=Tensor[(7, 3, 3), uint16] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="uint16") /* ty=Tensor[(7, 3, 3), uint16] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %415 = bitwise_and(%413, %414) /* ty=Tensor[(7, 3, 3), uint16] */;
  %416 = cast(%415, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
  %417 = atanh(%416) /* ty=Tensor[(7, 3, 3), float64] */;
  (%417,)
}

def @func_4041(%var_4037: Tensor[(8, 10, 8), uint16], %var_4038: Tensor[(8, 10, 8), uint16], %var_4039: Tensor[(5, 60), float64], %var_4040: Tensor[(7, 3, 3), float64]) -> (Tensor[(630), float64], Tensor[(5, 12, 5), float64], Tensor[(5, 60), float64], Tensor[(8, 10, 8), bool], Tensor[(7, 3, 3), uint8]) {
  %446 = fn (%var_3985: Tensor[(8, 10, 8), uint16], %var_3986: Tensor[(8, 10, 8), uint16], %var_4005: Tensor[(5, 60), float64], %var_4016: Tensor[(7, 3, 3), float64]) -> (Tensor[(630), float64], Tensor[(5, 12, 5), float64], Tensor[(5, 60), float64], Tensor[(8, 10, 8), bool], Tensor[(7, 3, 3), uint8]) {
    %418 = @func_2614() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(15, 7, 6), bool], Tensor[(630), float64]) */;
    %419 = cast(%var_4005, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    %420 = reshape(%419, newshape=[300, 1]) /* ty=Tensor[(300, 1), float64] */;
    %421 = @func_1131(%420) /* ty=(Tensor[(7, 3, 3), float32], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) */;
    %422 = cast(%var_3986, dtype="uint16") /* ty=Tensor[(8, 10, 8), uint16] */;
    %423 = shape_of(%var_3985, dtype="int32") /* ty=Tensor[(3), int32] */;
    %424 = cast(%var_3985, dtype="uint16") /* ty=Tensor[(8, 10, 8), uint16] */;
    %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %426 = add(%424, %425) /* ty=Tensor[(8, 10, 8), uint16] */;
    %427 = cast(%var_3986, dtype="int32") /* ty=Tensor[(8, 10, 8), int32] */;
    %428 = shape_of(%var_3985, dtype="int32") /* ty=Tensor[(3), int32] */;
    %429 = cast(%var_3985, dtype="int32") /* ty=Tensor[(8, 10, 8), int32] */;
    %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %431 = left_shift(%429, %430) /* ty=Tensor[(8, 10, 8), int32] */;
    %432 = cast(%431, dtype="bool") /* ty=Tensor[(8, 10, 8), bool] */;
    %433 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
    %434 = cast(%426, dtype="bool") /* ty=Tensor[(8, 10, 8), bool] */;
    %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %436 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %437 = %436.0;
    %438 = cast(%var_4016, dtype="uint8") /* ty=Tensor[(7, 3, 3), uint8] */;
    %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
    %440 = cast(%437, dtype="uint8") /* ty=Tensor[(7, 3, 3), uint8] */;
    %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %442 = %418.2;
    %443 = %421.1;
    %444 = logical_and(%434, %435) /* ty=Tensor[(8, 10, 8), bool] */;
    %445 = multiply(%440, %441) /* ty=Tensor[(7, 3, 3), uint8] */;
    (%442, %443, %var_4005, %444, %445)
  };
  %446(%var_4037, %var_4038, %var_4039, %var_4040) /* ty=(Tensor[(630), float64], Tensor[(5, 12, 5), float64], Tensor[(5, 60), float64], Tensor[(8, 10, 8), bool], Tensor[(7, 3, 3), uint8]) */
}

def @func_3138(%var_3137: Tensor[(7, 3, 3), float64]) -> (Tensor[(7, 3, 3), int16], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64]) {
  %458 = fn (%var_3074: Tensor[(7, 3, 3), float64]) -> (Tensor[(7, 3, 3), int16], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64]) {
    %447 = @func_2514() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %448 = %447.0;
    %449 = cast(%var_3074, dtype="int16") /* ty=Tensor[(7, 3, 3), int16] */;
    %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
    %451 = cast(%448, dtype="int16") /* ty=Tensor[(7, 3, 3), int16] */;
    %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %453 = @func_1170() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %454 = @func_1230() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %455 = logical_xor(%451, %452) /* ty=Tensor[(7, 3, 3), int16] */;
    %456 = %453.0;
    %457 = %454.0;
    (%455, %456, %457)
  };
  %458(%var_3137) /* ty=(Tensor[(7, 3, 3), int16], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64]) */
}

def @func_1131(%var_1122: Tensor[(300, 1), float64]) -> (Tensor[(7, 3, 3), float32], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) {
  %459 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %460 = %459.0;
  %461 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 3, 3), float64] */, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%460, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %465 = cast(-9.69854f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %466 = cast(%var_1122, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %467 = reshape(%465, newshape=[]) /* ty=float64 */;
  %468 = reshape(%466, newshape=[5, 12, 5]) /* ty=Tensor[(5, 12, 5), float64] */;
  %469 = mod(%463, %464) /* ty=Tensor[(7, 3, 3), float32] */;
  %470 = @func_1078(%467, %468) /* ty=Tensor[(5, 12, 5), float64] */;
  (%469, %470, -9.69854f64 /* ty=float64 */, %var_1122)
}

def @main(%var_4978: Tensor[(9, 12, 2), float64], %var_4996: Tensor[(9, 12, 2), float64], %var_5020: Tensor[(378), float32]) -> (Tensor[(7, 3, 3), float32], Tensor[(6, 63), uint16], Tensor[(378), float32], Tensor[(9, 12, 2), uint64], Tensor[(9, 12, 2), bool], Tensor[(9, 12, 2), float32]) {
  %471 = @func_1717() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) */;
  %472 = cast(%var_5020, dtype="float32") /* ty=Tensor[(378), float32] */;
  %473 = reshape(%472, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %474 = @func_3207(%473) /* ty=(Tensor[(6, 63), uint16],) */;
  %475 = cast(%var_4978, dtype="float64") /* ty=Tensor[(9, 12, 2), float64] */;
  %476 = cosh(%475) /* ty=Tensor[(9, 12, 2), float64] */;
  %477 = cast(%var_4996, dtype="uint16") /* ty=Tensor[(9, 12, 2), uint16] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%476, dtype="uint16") /* ty=Tensor[(9, 12, 2), uint16] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %481 = right_shift(%479, %480) /* ty=Tensor[(9, 12, 2), uint16] */;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %483 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%476, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %486 = power(%484, %485) /* ty=Tensor[(9, 12, 2), float32] */;
  %487 = cast(%486, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %488 = atan(%487) /* ty=Tensor[(9, 12, 2), float32] */;
  %489 = cast(%476, dtype="uint64") /* ty=Tensor[(9, 12, 2), uint64] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="uint64") /* ty=Tensor[(9, 12, 2), uint64] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %493 = cast(%var_4996, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %494 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%476, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = cast(%488, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %498 = log2(%497) /* ty=Tensor[(9, 12, 2), float32] */;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %500 = %471.1;
  %501 = %474.0;
  %502 = subtract(%491, %492) /* ty=Tensor[(9, 12, 2), uint64] */;
  %503 = logical_and(%495, %496) /* ty=Tensor[(9, 12, 2), bool] */;
  %504 = sqrt(%499) /* ty=Tensor[(9, 12, 2), float32] */;
  (%500, %501, %var_5020, %502, %503, %504)
}

def @func_1749(%var_1739: Tensor[(5, 15, 6), int32]) -> (Tensor[(378), float32], Tensor[(5, 15, 6), bool], Tensor[(7, 3, 3), float64]) {
  %505 = @func_1562() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %506 = @func_1448() /* ty=(Tensor[(5, 15, 6), int32],) */;
  %507 = %506.0;
  %508 = cast(%var_1739, dtype="bool") /* ty=Tensor[(5, 15, 6), bool] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="bool") /* ty=Tensor[(5, 15, 6), bool] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %512 = @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */;
  %513 = %505.3;
  %514 = greater(%510, %511) /* ty=Tensor[(5, 15, 6), bool] */;
  %515 = %512.0;
  (%513, %514, %515)
}

def @func_3904(%var_3902: int64, %var_3903: Tensor[(6, 2, 4), int64]) -> (Tensor[(6, 2, 4), int64], Tensor[(7, 3, 3), float32]) {
  @func_3900(%var_3902, %var_3903) /* ty=(Tensor[(6, 2, 4), int64], Tensor[(7, 3, 3), float32]) */
}

def @func_1449() -> (Tensor[(5, 15, 6), int32],) {
  %523 = fn () -> (Tensor[(5, 15, 6), int32],) {
    %516 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 15, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 6), float64] */;
    %517 = tan(%516) /* ty=Tensor[(5, 15, 6), float64] */;
    %518 = cast(%517, dtype="int32") /* ty=Tensor[(5, 15, 6), int32] */;
    %519 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(5, 15, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %520 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 15, 6), float64] */, dtype="int32") /* ty=Tensor[(5, 15, 6), int32] */;
    %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %522 = bitwise_xor(%520, %521) /* ty=Tensor[(5, 15, 6), int32] */;
    (%522,)
  };
  %523() /* ty=(Tensor[(5, 15, 6), int32],) */
}

def @func_3900(%var_3881: int64, %var_3882: Tensor[(6, 2, 4), int64]) -> (Tensor[(6, 2, 4), int64], Tensor[(7, 3, 3), float32]) {
  %524 = cast(%var_3881, dtype="int64") /* ty=int64 */;
  %525 = cast(%var_3882, dtype="int64") /* ty=Tensor[(6, 2, 4), int64] */;
  %526 = @func_3261() /* ty=(Tensor[(7, 3, 3), float32],) */;
  %527 = bitwise_xor(%524, %525) /* ty=Tensor[(6, 2, 4), int64] */;
  %528 = %526.0;
  (%527, %528)
}

def @func_157(%var_155: Tensor[(1, 13, 12), float32]) -> (Tensor[(15, 13, 12), uint16], Tensor[(1, 13, 12), float32]) {
  @func_154(%var_155) /* ty=(Tensor[(15, 13, 12), uint16], Tensor[(1, 13, 12), float32]) */
}

def @func_3441() -> Tensor[(7, 3, 3), float64] {
  @func_3439() /* ty=Tensor[(7, 3, 3), float64] */
}

def @func_2059() -> (Tensor[(7, 3, 3), float64],) {
  %531 = fn () -> (Tensor[(7, 3, 3), float64],) {
    %529 = @func_1715() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) */;
    %530 = %529.0;
    (%530,)
  };
  %531() /* ty=(Tensor[(7, 3, 3), float64],) */
}

def @func_1691() -> (Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) {
  %532 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %533 = @func_1562() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %534 = %533.2;
  %535 = cast(%534, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %536 = exp(%535) /* ty=Tensor[(2016), float64] */;
  %537 = cast(%534, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(1), int32] */;
  %539 = cast(%536, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?), bool] */;
  %541 = greater(%539, %540) /* ty=Tensor[(2016), bool] */;
  %542 = cast(%541, dtype="uint64") /* ty=Tensor[(2016), uint64] */;
  %543 = shape_of(%534, dtype="int32") /* ty=Tensor[(1), int32] */;
  %544 = cast(%534, dtype="uint64") /* ty=Tensor[(2016), uint64] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %546 = %532.0;
  %547 = subtract(%544, %545) /* ty=Tensor[(2016), uint64] */;
  (%546, %547)
}

def @func_2500() -> Tensor[(7, 3, 3), float64] {
  %548 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %548.0
}

def @func_3217() -> Tensor[(7, 3, 3), float64] {
  %549 = fn () -> Tensor[(7, 3, 3), float64] {
    @func_890() /* ty=Tensor[(7, 3, 3), float64] */
  };
  %549() /* ty=Tensor[(7, 3, 3), float64] */
}

def @func_1693() -> (Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) {
  @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */
}

def @func_2693(%var_2689: Tensor[(1, 14, 14), float64], %var_2690: Tensor[(14, 14, 14), float64], %var_2691: Tensor[(11, 14, 14), float64], %var_2692: Tensor[(11, 14, 14), bool]) -> (Tensor[(11, 14, 14), bool], Tensor[(11, 14, 14), int32], Tensor[(14, 14, 14), float32]) {
  @func_2687(%var_2689, %var_2690, %var_2691, %var_2692) /* ty=(Tensor[(11, 14, 14), bool], Tensor[(11, 14, 14), int32], Tensor[(14, 14, 14), float32]) */
}

def @func_962(%var_950: Tensor[(378), float32]) -> (Tensor[(7, 3, 3), float64], Tensor[(14, 16, 9), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  %550 = cast(meta[relay.Constant][27] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %551 = cast(%var_950, dtype="float32") /* ty=Tensor[(378), float32] */;
  %552 = reshape(%550, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
  %553 = reshape(%551, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %554 = @func_577(%552, %553) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
  %555 = @func_890() /* ty=Tensor[(7, 3, 3), float64] */;
  %556 = %554.0;
  (%555, %556, meta[relay.Constant][27] /* ty=Tensor[(2016), float32] */, %var_950)
}

def @func_2614() -> (Tensor[(7, 3, 3), float64], Tensor[(15, 7, 6), bool], Tensor[(630), float64]) {
  %557 = cast(meta[relay.Constant][28] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %558 = reshape(%557, newshape=[15, 7, 6]) /* ty=Tensor[(15, 7, 6), float64] */;
  %559 = @func_1820(%558) /* ty=(Tensor[(15, 7, 6), float32], Tensor[(15, 7, 6), bool]) */;
  %560 = @func_2004() /* ty=Tensor[(7, 3, 3), float64] */;
  %561 = %559.1;
  (%560, %561, meta[relay.Constant][28] /* ty=Tensor[(630), float64] */)
}

def @func_2616() -> (Tensor[(7, 3, 3), float64], Tensor[(15, 7, 6), bool], Tensor[(630), float64]) {
  @func_2614() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(15, 7, 6), bool], Tensor[(630), float64]) */
}

def @func_4441() -> (Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float32], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  %562 = @func_790() /* ty=Tensor[(7, 3, 3), float32] */;
  %563 = @func_3357() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), bool]) */;
  %564 = %563.1;
  %565 = cast(%564, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  %566 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%562, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %569 = cast(meta[relay.Constant][29] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %570 = cast(meta[relay.Constant][30] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %571 = reshape(%569, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
  %572 = reshape(%570, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
  %573 = @func_577(%571, %572) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
  %574 = floor_divide(%567, %568) /* ty=Tensor[(7, 3, 3), float32] */;
  %575 = @func_790() /* ty=Tensor[(7, 3, 3), float32] */;
  %576 = %573.2;
  (%574, %575, %576, meta[relay.Constant][29] /* ty=Tensor[(2016), float32] */, meta[relay.Constant][30] /* ty=Tensor[(378), float32] */)
}

def @func_2743(%var_2735: Tensor[(16, 13, 16), float64]) -> (Tensor[(16, 13, 16), float64], Tensor[(7, 3, 3), float64]) {
  %577 = cast(%var_2735, dtype="float64") /* ty=Tensor[(16, 13, 16), float64] */;
  %578 = @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %579 = exp(%577) /* ty=Tensor[(16, 13, 16), float64] */;
  %580 = %578.0;
  (%579, %580)
}

def @func_2487(%var_2485: Tensor[(378), float32]) -> (Tensor[(378), bool], Tensor[(378), float32], Tensor[(378), float32], Tensor[(7, 3, 3), float64]) {
  @func_2484(%var_2485) /* ty=(Tensor[(378), bool], Tensor[(378), float32], Tensor[(378), float32], Tensor[(7, 3, 3), float64]) */
}

def @func_4090(%var_4088: Tensor[(48), int64]) -> (Tensor[(15, 7, 6), bool], Tensor[(6, 2, 4), int64], int64, Tensor[(48), int64], Tensor[(7, 3, 3), float64], Tensor[(378), float32], Tensor[(378), float32]) {
  @func_4087(%var_4088) /* ty=(Tensor[(15, 7, 6), bool], Tensor[(6, 2, 4), int64], int64, Tensor[(48), int64], Tensor[(7, 3, 3), float64], Tensor[(378), float32], Tensor[(378), float32]) */
}

def @func_1717() -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) {
  @func_1715() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) */
}

def @func_2004() -> Tensor[(7, 3, 3), float64] {
  %581 = @func_1230() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %581.0
}

def @func_1977() -> (Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  %590 = fn () -> (Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
    %582 = @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %583 = cast(meta[relay.Constant][31] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %584 = cast(meta[relay.Constant][32] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %585 = reshape(%583, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
    %586 = reshape(%584, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
    %587 = @func_577(%585, %586) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
    %588 = %582.0;
    %589 = %587.2;
    (%588, %589, meta[relay.Constant][31] /* ty=Tensor[(2016), float32] */, meta[relay.Constant][32] /* ty=Tensor[(378), float32] */)
  };
  %590() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) */
}

def @func_3439() -> Tensor[(7, 3, 3), float64] {
  @func_2004() /* ty=Tensor[(7, 3, 3), float64] */
}

def @func_2037(%var_2036: Tensor[(378), float32]) -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  %601 = fn (%var_2026: Tensor[(378), float32]) -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
    %591 = @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */;
    %592 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %593 = cast(meta[relay.Constant][33] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %594 = cast(%var_2026, dtype="float32") /* ty=Tensor[(378), float32] */;
    %595 = reshape(%593, newshape=[14, 16, 9]) /* ty=Tensor[(14, 16, 9), float32] */;
    %596 = reshape(%594, newshape=[6, 63]) /* ty=Tensor[(6, 63), float32] */;
    %597 = @func_577(%595, %596) /* ty=(Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) */;
    %598 = %591.0;
    %599 = %592.0;
    %600 = %597.2;
    (%598, %599, %600, meta[relay.Constant][33] /* ty=Tensor[(2016), float32] */, %var_2026)
  };
  %601(%var_2036) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(6, 63), float32], Tensor[(2016), float32], Tensor[(378), float32]) */
}

def @func_2515() -> (Tensor[(7, 3, 3), float64],) {
  %604 = fn () -> (Tensor[(7, 3, 3), float64],) {
    %602 = @func_1170() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %603 = %602.0;
    (%603,)
  };
  %604() /* ty=(Tensor[(7, 3, 3), float64],) */
}

def @func_1917() -> (Tensor[(7, 3, 3), float64],) {
  %605 = @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */;
  %606 = %605.0;
  (%606,)
}

def @func_2419() -> Tensor[(7, 3, 3), float64] {
  %608 = fn () -> Tensor[(7, 3, 3), float64] {
    %607 = @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %607.0
  };
  %608() /* ty=Tensor[(7, 3, 3), float64] */
}

def @func_3373() -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64]) {
  %613 = fn () -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64]) {
    %609 = @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %610 = @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */;
    %611 = %609.0;
    %612 = %610.0;
    (%611, %612)
  };
  %613() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64]) */
}

def @func_2746(%var_2744: Tensor[(16, 13, 16), float64]) -> (Tensor[(16, 13, 16), float64], Tensor[(7, 3, 3), float64]) {
  @func_2743(%var_2744) /* ty=(Tensor[(16, 13, 16), float64], Tensor[(7, 3, 3), float64]) */
}

def @func_4586() -> (Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float64]) {
  %618 = fn () -> (Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float64]) {
    %614 = @func_3261() /* ty=(Tensor[(7, 3, 3), float32],) */;
    %615 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %616 = %614.0;
    %617 = %615.0;
    (%616, %617)
  };
  %618() /* ty=(Tensor[(7, 3, 3), float32], Tensor[(7, 3, 3), float64]) */
}

def @func_2818(%var_2817: float64) -> (Tensor[(9, 12, 11), float64], Tensor[(7, 3, 3), float64]) {
  %626 = fn (%var_2768: float64) -> (Tensor[(9, 12, 11), float64], Tensor[(7, 3, 3), float64]) {
    %619 = cast(%var_2768, dtype="float64") /* ty=float64 */;
    %620 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 12, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 11), float64] */;
    %621 = @func_1917() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %622 = %621.0;
    %623 = cast(%622, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
    %624 = floor_divide(%619, %620) /* ty=Tensor[(9, 12, 11), float64] */;
    %625 = sin(%623) /* ty=Tensor[(7, 3, 3), float64] */;
    (%624, %625)
  };
  %626(%var_2817) /* ty=(Tensor[(9, 12, 11), float64], Tensor[(7, 3, 3), float64]) */
}

def @func_3665() -> (Tensor[(15, 7, 6), float64],) {
  %630 = fn () -> (Tensor[(15, 7, 6), float64],) {
    %627 = @func_2883() /* ty=Tensor[(15, 7, 6), bool] */;
    %628 = cast(%627, dtype="float64") /* ty=Tensor[(15, 7, 6), float64] */;
    %629 = log(%628) /* ty=Tensor[(15, 7, 6), float64] */;
    (%629,)
  };
  %630() /* ty=(Tensor[(15, 7, 6), float64],) */
}

def @func_4366() -> (Tensor[(7, 3, 3), float64],) {
  %633 = fn () -> (Tensor[(7, 3, 3), float64],) {
    %631 = @func_1691() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(2016), uint64]) */;
    %632 = %631.0;
    (%632,)
  };
  %633() /* ty=(Tensor[(7, 3, 3), float64],) */
}

def @func_2502() -> Tensor[(7, 3, 3), float64] {
  @func_2500() /* ty=Tensor[(7, 3, 3), float64] */
}

def @func_2884() -> Tensor[(15, 7, 6), bool] {
  %635 = fn () -> Tensor[(15, 7, 6), bool] {
    %634 = @func_2614() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(15, 7, 6), bool], Tensor[(630), float64]) */;
    %634.1
  };
  %635() /* ty=Tensor[(15, 7, 6), bool] */
}

def @func_2376(%var_2374: Tensor[(2016), float32], %var_2375: Tensor[(5, 60), float64]) -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(2016), uint32], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(2016), int32], Tensor[(378), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(5, 60), float64]) {
  @func_2372(%var_2374, %var_2375) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(2016), uint32], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(2016), int32], Tensor[(378), float64], Tensor[(5, 12, 5), float64], float64, Tensor[(5, 60), float64]) */
}

def @func_2687(%var_2638: Tensor[(1, 14, 14), float64], %var_2639: Tensor[(14, 14, 14), float64], %var_2647: Tensor[(11, 14, 14), float64], %var_2652: Tensor[(11, 14, 14), bool]) -> (Tensor[(11, 14, 14), bool], Tensor[(11, 14, 14), int32], Tensor[(14, 14, 14), float32]) {
  %636 = cast(%var_2638, dtype="bool") /* ty=Tensor[(1, 14, 14), bool] */;
  %637 = cast(%var_2647, dtype="bool") /* ty=Tensor[(11, 14, 14), bool] */;
  %638 = equal(%636, %637) /* ty=Tensor[(11, 14, 14), bool] */;
  %639 = cast(%var_2652, dtype="bool") /* ty=Tensor[(11, 14, 14), bool] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%638, dtype="bool") /* ty=Tensor[(11, 14, 14), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %643 = cast(%var_2652, dtype="int32") /* ty=Tensor[(11, 14, 14), int32] */;
  %644 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%638, dtype="int32") /* ty=Tensor[(11, 14, 14), int32] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %647 = cast(%var_2638, dtype="float64") /* ty=Tensor[(1, 14, 14), float64] */;
  %648 = cast(%var_2639, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %649 = floor_mod(%647, %648) /* ty=Tensor[(14, 14, 14), float64] */;
  %650 = cast(%649, dtype="uint32") /* ty=Tensor[(14, 14, 14), uint32] */;
  %651 = cast(%var_2638, dtype="uint32") /* ty=Tensor[(1, 14, 14), uint32] */;
  %652 = bitwise_and(%650, %651) /* ty=Tensor[(14, 14, 14), uint32] */;
  %653 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 14, 14), uint32] */, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %657 = logical_and(%641, %642) /* ty=Tensor[(11, 14, 14), bool] */;
  %658 = bitwise_xor(%645, %646) /* ty=Tensor[(11, 14, 14), int32] */;
  %659 = mod(%655, %656) /* ty=Tensor[(14, 14, 14), float32] */;
  (%657, %658, %659)
}

def @func_1314(%var_1313: Tensor[(156, 1), float32]) -> (Tensor[(7, 3, 3), float64], Tensor[(1, 13, 12), float32], Tensor[(156, 1), float32], Tensor[(7, 3, 3), float64]) {
  %672 = fn (%var_1272: Tensor[(156, 1), float32]) -> (Tensor[(7, 3, 3), float64], Tensor[(1, 13, 12), float32], Tensor[(156, 1), float32], Tensor[(7, 3, 3), float64]) {
    %660 = @func_1170() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %661 = cast(%var_1272, dtype="float32") /* ty=Tensor[(156, 1), float32] */;
    %662 = reshape(%661, newshape=[1, 13, 12]) /* ty=Tensor[(1, 13, 12), float32] */;
    %663 = @func_154(%662) /* ty=(Tensor[(15, 13, 12), uint16], Tensor[(1, 13, 12), float32]) */;
    %664 = @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %665 = %664.0;
    %666 = cast(%665, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
    %667 = sqrt(%666) /* ty=Tensor[(7, 3, 3), float64] */;
    %668 = cast(%667, dtype="float64") /* ty=Tensor[(7, 3, 3), float64] */;
    %669 = %660.0;
    %670 = %663.1;
    %671 = log2(%668) /* ty=Tensor[(7, 3, 3), float64] */;
    (%669, %670, %var_1272, %671)
  };
  %672(%var_1313) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(1, 13, 12), float32], Tensor[(156, 1), float32], Tensor[(7, 3, 3), float64]) */
}

def @func_1134(%var_1132: Tensor[(300, 1), float64]) -> (Tensor[(7, 3, 3), float32], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) {
  @func_1131(%var_1132) /* ty=(Tensor[(7, 3, 3), float32], Tensor[(5, 12, 5), float64], float64, Tensor[(300, 1), float64]) */
}

def @func_3497(%var_3471: Tensor[(1, 120), int16], %var_3483: Tensor[(450), int32]) -> (Tensor[(15, 7, 6), bool], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32], Tensor[(378), float32], int16, Tensor[(1, 120), int16], Tensor[(5, 15, 6), bool], Tensor[(450), int32], Tensor[(?, 15, 16), float64], Tensor[(2, 120), float64]) {
  %673 = @func_1908() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %674 = @func_3261() /* ty=(Tensor[(7, 3, 3), float32],) */;
  %675 = cast(meta[relay.Constant][36] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %676 = cast(%var_3471, dtype="int16") /* ty=Tensor[(1, 120), int16] */;
  %677 = reshape(%675, newshape=[]) /* ty=int16 */;
  %678 = reshape(%676, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %679 = @func_2723(%677, %678) /* ty=(Tensor[(5, 6, 4), int16], Tensor[(2016), float32], Tensor[(378), float32]) */;
  %680 = cast(%var_3483, dtype="int32") /* ty=Tensor[(450), int32] */;
  %681 = reshape(%680, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), int32] */;
  %682 = @func_1749(%681) /* ty=(Tensor[(378), float32], Tensor[(5, 15, 6), bool], Tensor[(7, 3, 3), float64]) */;
  %683 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 120), float64] */, dtype="float64") /* ty=Tensor[(2, 120), float64] */;
  %684 = reshape(%683, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %685 = @func_1653(%684) /* ty=(Tensor[(?, 15, 16), float64],) */;
  %686 = @func_2883() /* ty=Tensor[(15, 7, 6), bool] */;
  %687 = %673.0;
  %688 = @func_3216() /* ty=Tensor[(7, 3, 3), float64] */;
  %689 = %674.0;
  %690 = %679.2;
  %691 = %682.1;
  %692 = %685.0;
  (%686, %687, %688, %689, %690, meta[relay.Constant][36] /* ty=int16 */, %var_3471, %691, %var_3483, %692, meta[relay.Constant][37] /* ty=Tensor[(2, 120), float64] */)
}

def @func_4476() -> Tensor[(7, 3, 3), float32] {
  %693 = @func_1715() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) */;
  %693.1
}

def @func_791() -> Tensor[(7, 3, 3), float32] {
  %695 = fn () -> Tensor[(7, 3, 3), float32] {
    %694 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 3, 3), float32] */, dtype="float32") /* ty=Tensor[(7, 3, 3), float32] */;
    acosh(%694) /* ty=Tensor[(7, 3, 3), float32] */
  };
  %695() /* ty=Tensor[(7, 3, 3), float32] */
}

def @func_4676() -> (Tensor[(7, 3, 3), float64], Tensor[(12, 15, 12), bool], Tensor[(2160), float64]) {
  %696 = @func_1715() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float32]) */;
  %697 = cast(meta[relay.Constant][39] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %698 = cast(meta[relay.Constant][39] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %699 = reshape(%697, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %700 = reshape(%698, newshape=[12, 15, 12]) /* ty=Tensor[(12, 15, 12), float64] */;
  %701 = @func_3755(%699, %700) /* ty=(Tensor[(12, 15, 12), bool], Tensor[(12, 15, 12), uint8], Tensor[(12, 15, 12), float64]) */;
  %702 = %696.0;
  %703 = %701.0;
  (%702, %703, meta[relay.Constant][39] /* ty=Tensor[(2160), float64] */)
}

def @func_1170() -> (Tensor[(7, 3, 3), float64],) {
  %704 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
  %705 = %704.0;
  (%705,)
}

def @func_3359() -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), bool]) {
  @func_3357() /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), float32], Tensor[(7, 3, 3), float64], Tensor[(9, 3, 14), bool]) */
}

def @func_3207(%var_3205: Tensor[(6, 63), float32]) -> (Tensor[(6, 63), uint16],) {
  @func_3204(%var_3205) /* ty=(Tensor[(6, 63), uint16],) */
}

def @func_3758(%var_3756: Tensor[(12, 15, 12), float64], %var_3757: Tensor[(12, 15, 12), float64]) -> (Tensor[(12, 15, 12), bool], Tensor[(12, 15, 12), uint8], Tensor[(12, 15, 12), float64]) {
  %722 = fn (%var_3722: Tensor[(12, 15, 12), float64], %var_3741: Tensor[(12, 15, 12), float64]) -> (Tensor[(12, 15, 12), bool], Tensor[(12, 15, 12), uint8], Tensor[(12, 15, 12), float64]) {
    %706 = cast(%var_3722, dtype="float64") /* ty=Tensor[(12, 15, 12), float64] */;
    %707 = atan(%706) /* ty=Tensor[(12, 15, 12), float64] */;
    %708 = cast(%var_3722, dtype="bool") /* ty=Tensor[(12, 15, 12), bool] */;
    %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %710 = cast(%707, dtype="bool") /* ty=Tensor[(12, 15, 12), bool] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %712 = cast(%var_3741, dtype="uint8") /* ty=Tensor[(12, 15, 12), uint8] */;
    %713 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %714 = cast(%707, dtype="uint8") /* ty=Tensor[(12, 15, 12), uint8] */;
    %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %716 = cast(%var_3741, dtype="float32") /* ty=Tensor[(12, 15, 12), float32] */;
    %717 = cos(%716) /* ty=Tensor[(12, 15, 12), float32] */;
    %718 = cast(%717, dtype="float64") /* ty=Tensor[(12, 15, 12), float64] */;
    %719 = greater_equal(%710, %711) /* ty=Tensor[(12, 15, 12), bool] */;
    %720 = left_shift(%714, %715) /* ty=Tensor[(12, 15, 12), uint8] */;
    %721 = exp(%718) /* ty=Tensor[(12, 15, 12), float64] */;
    (%719, %720, %721)
  };
  %722(%var_3756, %var_3757) /* ty=(Tensor[(12, 15, 12), bool], Tensor[(12, 15, 12), uint8], Tensor[(12, 15, 12), float64]) */
}

def @func_4169(%var_4167: Tensor[(300), float64]) -> (Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], Tensor[(2016), float32], Tensor[(300), float64], Tensor[(5, 15, 6), int32]) {
  @func_4166(%var_4167) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(7, 3, 3), float64], Tensor[(5, 12, 5), float64], Tensor[(2016), float32], Tensor[(300), float64], Tensor[(5, 15, 6), int32]) */
}

def @func_577(%var_531: Tensor[(14, 16, 9), float32], %var_570: Tensor[(6, 63), float32]) -> (Tensor[(14, 16, 9), float32], Tensor[(9, 3, 14), float32], Tensor[(6, 63), float32]) {
  %723 = cast(%var_531, dtype="float32") /* ty=Tensor[(14, 16, 9), float32] */;
  %724 = rsqrt(%723) /* ty=Tensor[(14, 16, 9), float32] */;
  %725 = cast(%724, dtype="float32") /* ty=Tensor[(14, 16, 9), float32] */;
  %726 = sinh(%725) /* ty=Tensor[(14, 16, 9), float32] */;
  %727 = cast(%726, dtype="float32") /* ty=Tensor[(14, 16, 9), float32] */;
  %728 = cast(%var_570, dtype="float32") /* ty=Tensor[(6, 63), float32] */;
  %729 = reshape(%728, newshape=[9, 3, 14]) /* ty=Tensor[(9, 3, 14), float32] */;
  %730 = cos(%727) /* ty=Tensor[(14, 16, 9), float32] */;
  %731 = @func_252(%729) /* ty=Tensor[(9, 3, 14), float32] */;
  (%730, %731, %var_570)
}

def @func_863() -> (Tensor[(7, 3, 3), float64],) {
  @func_861() /* ty=(Tensor[(7, 3, 3), float64],) */
}

def @func_965(%var_963: Tensor[(378), float32]) -> (Tensor[(7, 3, 3), float64], Tensor[(14, 16, 9), float32], Tensor[(2016), float32], Tensor[(378), float32]) {
  @func_962(%var_963) /* ty=(Tensor[(7, 3, 3), float64], Tensor[(14, 16, 9), float32], Tensor[(2016), float32], Tensor[(378), float32]) */
}

def @func_1231() -> (Tensor[(7, 3, 3), float64],) {
  %734 = fn () -> (Tensor[(7, 3, 3), float64],) {
    %732 = @func_1068() /* ty=(Tensor[(7, 3, 3), float64],) */;
    %733 = %732.0;
    (%733,)
  };
  %734() /* ty=(Tensor[(7, 3, 3), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
