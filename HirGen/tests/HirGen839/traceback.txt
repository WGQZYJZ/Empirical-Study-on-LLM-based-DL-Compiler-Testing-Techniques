==========mod==========
#[version = "0.0.5"]
def @func_8158(%var_8147: Tensor[(12, 14, 392), bool]) -> Tensor[(12, 14, 392), float32] {
  %0 = @func_4801() /* ty=Tensor[(12, 14, 392), bool] */;
  %1 = cast(%var_8147, dtype="float32") /* ty=Tensor[(12, 14, 392), float32] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%0, dtype="float32") /* ty=Tensor[(12, 14, 392), float32] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%3, %4) /* ty=Tensor[(12, 14, 392), float32] */
}

def @func_3656() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %5 = @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %6 = @func_1663() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %7 = %5.0;
  %8 = %6.0;
  (%7, %8)
}

def @func_8424() -> (Tensor[(15, 2, 15), float32],) {
  %9 = @func_7947() /* ty=(Tensor[(15, 2, 15), float32], Tensor[(12, 14, 1), float32]) */;
  %10 = %9.0;
  %11 = cast(%10, dtype="float32") /* ty=Tensor[(15, 2, 15), float32] */;
  %12 = asinh(%11) /* ty=Tensor[(15, 2, 15), float32] */;
  (%12,)
}

def @func_11040() -> (Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 12, 10), float64], Tensor[(1440), float64]) {
  %13 = @func_10028() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %16 = reshape(%14, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %17 = reshape(%15, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %18 = @func_4514(%16, %17) /* ty=(Tensor[(12, 12, 10), float64],) */;
  %19 = @func_8466() /* ty=Tensor[(12, 14, 1), float32] */;
  %20 = %13.0;
  %21 = %18.0;
  (%19, %20, %21, meta[relay.Constant][0] /* ty=Tensor[(1440), float64] */)
}

def @func_8959() -> (Tensor[(13, 6, 12), float32],) {
  %22 = @func_3414() /* ty=(Tensor[(8, 6, 2), float64], Tensor[(13, 6, 12), float32]) */;
  %23 = %22.1;
  (%23,)
}

def @func_3182(%var_3129: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), bool], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(8, 13, 12), int8], Tensor[(392), float32]) {
  %24 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %25 = %24.0;
  %26 = cast(%var_3129, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%25, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %30 = cast(%var_3129, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %32 = reshape(%31, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %33 = @func_2217(%32) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */;
  %34 = less_equal(%28, %29) /* ty=Tensor[(13, 6, 12), bool] */;
  %35 = log2(%30) /* ty=Tensor[(13, 6, 12), float32] */;
  %36 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %37 = %33.0;
  (%34, %35, %36, %37, meta[relay.Constant][1] /* ty=Tensor[(392), float32] */)
}

def @func_9003(%var_8975: Tensor[(4, 13, 9), float32], %var_8978: Tensor[(4, 13, 9), float32], %var_8989: Tensor[(105, 1), float64]) -> (Tensor[(4, 13, 9), int16], Tensor[(1, 7, 15), float64], Tensor[(105, 1), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %38 = cast(%var_8975, dtype="float32") /* ty=Tensor[(4, 13, 9), float32] */;
  %39 = sqrt(%38) /* ty=Tensor[(4, 13, 9), float32] */;
  %40 = cast(%var_8978, dtype="int16") /* ty=Tensor[(4, 13, 9), int16] */;
  %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%39, dtype="int16") /* ty=Tensor[(4, 13, 9), int16] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %44 = cast(%var_8989, dtype="float64") /* ty=Tensor[(105, 1), float64] */;
  %45 = reshape(%44, newshape=[1, 7, 15]) /* ty=Tensor[(1, 7, 15), float64] */;
  %46 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %47 = bitwise_xor(%42, %43) /* ty=Tensor[(4, 13, 9), int16] */;
  %48 = @func_6697(%45) /* ty=Tensor[(1, 7, 15), float64] */;
  %49 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %50 = %46.0;
  (%47, %48, %var_8989, %49, %50)
}

def @func_10324() -> Tensor[(3, 8, 1), uint8] {
  %51 = cast(meta[relay.Constant][2] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 8, 1), uint8] */, dtype="uint8") /* ty=Tensor[(3, 8, 1), uint8] */;
  minimum(%51, %52) /* ty=Tensor[(3, 8, 1), uint8] */
}

def @func_4350() -> (Tensor[(12, 14, 1), float32],) {
  %53 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  (%53,)
}

def @func_9067() -> Tensor[(12, 14, 1), float32] {
  %54 = @func_2297() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %55 = %54.3;
  %56 = cast(%55, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
  acos(%56) /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_9687(%var_9647: Tensor[(15, 14, 1), float64]) -> (Tensor[(15, 14, ?), float32], Tensor[(12, 14, 1), float32]) {
  %57 = @func_4379() /* ty=(Tensor[(15, 14, 1), float64],) */;
  %58 = %57.0;
  %59 = cast(%var_9647, dtype="float32") /* ty=Tensor[(15, 14, 1), float32] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%58, dtype="float32") /* ty=Tensor[(15, 14, 1), float32] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %63 = @func_8930() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %64 = divide(%61, %62) /* ty=Tensor[(15, 14, ?), float32] */;
  %65 = %63.0;
  (%64, %65)
}

def @func_11552(%var_11541: Tensor[(12, 14, 5), float32]) -> (Tensor[(12, 14, 5), int32],) {
  %66 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %67 = %66.0;
  %68 = cast(%67, dtype="int32") /* ty=Tensor[(12, 14, 1), int32] */;
  %69 = cast(%var_11541, dtype="int32") /* ty=Tensor[(12, 14, 5), int32] */;
  %70 = subtract(%68, %69) /* ty=Tensor[(12, 14, 5), int32] */;
  (%70,)
}

def @func_5516() -> Tensor[(12, 14, 1), float32] {
  %71 = @func_4323() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %71.0
}

def @func_11094(%var_11068: Tensor[(630, 4), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(630, 4), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64], Tensor[(12, 14, 392), bool]) {
  %72 = cast(%var_11068, dtype="float32") /* ty=Tensor[(630, 4), float32] */;
  %73 = reshape(%72, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %74 = @func_3249(%73) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) */;
  %75 = @func_8788() /* ty=(Tensor[(12, 14, 1248), uint64],) */;
  %76 = @func_2448() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), int64], Tensor[(1456, 144), uint64], Tensor[(392), float32], Tensor[(392), float32]) */;
  %77 = %76.3;
  %78 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  %79 = cast(%77, dtype="bool") /* ty=Tensor[(392), bool] */;
  %80 = cast(%78, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %81 = %74.0;
  %82 = @func_6278() /* ty=Tensor[(12, 14, 1), float32] */;
  %83 = %75.0;
  %84 = logical_or(%79, %80) /* ty=Tensor[(12, 14, 392), bool] */;
  (%81, %var_11068, %82, %83, %84)
}

def @func_2384(%var_2373: Tensor[(12, 14, 1248), uint64], %var_2378: Tensor[(12, 14, 1248), float64]) -> Tensor[(12, 14, 1248), int64] {
  %85 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
  %86 = %85.1;
  %87 = cast(%var_2373, dtype="float64") /* ty=Tensor[(12, 14, 1248), float64] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="float64") /* ty=Tensor[(12, 14, 1248), float64] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %91 = power(%89, %90) /* ty=Tensor[(12, 14, 1248), float64] */;
  %92 = cast(%var_2378, dtype="int64") /* ty=Tensor[(12, 14, 1248), int64] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="int64") /* ty=Tensor[(12, 14, 1248), int64] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  minimum(%94, %95) /* ty=Tensor[(12, 14, 1248), int64] */
}

def @func_2448() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), int64], Tensor[(1456, 144), uint64], Tensor[(392), float32], Tensor[(392), float32]) {
  %96 = cast(meta[relay.Constant][4] /* ty=Tensor[(1456, 144), uint64] */, dtype="uint64") /* ty=Tensor[(1456, 144), uint64] */;
  %97 = cast(meta[relay.Constant][4] /* ty=Tensor[(1456, 144), uint64] */, dtype="float64") /* ty=Tensor[(1456, 144), float64] */;
  %98 = reshape(%96, newshape=[12, 14, 1248]) /* ty=Tensor[(12, 14, 1248), uint64] */;
  %99 = reshape(%97, newshape=[12, 14, 1248]) /* ty=Tensor[(12, 14, 1248), float64] */;
  %100 = cast(meta[relay.Constant][5] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %101 = reshape(%100, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %102 = @func_2217(%101) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */;
  %103 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %104 = @func_2384(%98, %99) /* ty=Tensor[(12, 14, 1248), int64] */;
  %105 = %102.3;
  (%103, %104, meta[relay.Constant][4] /* ty=Tensor[(1456, 144), uint64] */, %105, meta[relay.Constant][5] /* ty=Tensor[(392), float32] */)
}

def @func_8658(%var_8637: Tensor[(1512), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 9), bool], Tensor[(1512), float32], Tensor[(1848), float32], Tensor[(3328), float64], Tensor[(12, 14, ?), float32]) {
  %106 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %107 = cast(%var_8637, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %108 = cast(meta[relay.Constant][6] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %109 = reshape(%107, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), float32] */;
  %110 = reshape(%108, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float32] */;
  %111 = @func_8113(%109, %110) /* ty=(Tensor[(12, 14, 9), bool], Tensor[(12, 14, 392), bool], Tensor[(12, 14, 11), uint32], Tensor[(12, 14, 1), float32], Tensor[(168), float32], Tensor[(13, 6, 12), float32]) */;
  %112 = @func_7624() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) */;
  %113 = %106.0;
  %114 = cast(%113, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
  %115 = reshape(%114, newshape=[12, 14, 1]) /* ty=Tensor[(12, 14, 1), float32] */;
  %116 = @func_7224(%115) /* ty=(Tensor[(12, 14, ?), float32],) */;
  %117 = %111.0;
  %118 = %112.2;
  %119 = %116.0;
  (%113, %117, %var_8637, meta[relay.Constant][6] /* ty=Tensor[(1848), float32] */, %118, %119)
}

def @func_6374(%var_6337: Tensor[(6, 28), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(6, 28), float32], Tensor[(8, 13, 13), float64], Tensor[(1352), float64], Tensor[(1440), float64]) {
  %120 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %121 = cast(%var_6337, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %122 = reshape(%121, newshape=[12, 14, 1]) /* ty=Tensor[(12, 14, 1), float32] */;
  %123 = @func_3764(%122) /* ty=(Tensor[(12, 14, ?), float64],) */;
  %124 = cast(meta[relay.Constant][7] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %126 = reshape(%124, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float64] */;
  %127 = reshape(%125, newshape=[1440]) /* ty=Tensor[(1440), float64] */;
  %128 = @func_5210(%126, %127) /* ty=(Tensor[(8, 13, 13), float64], Tensor[(12, 14, 392), int8], Tensor[(12, 12, 10), float64], Tensor[(1440), float64], Tensor[(12, 14, 15), bool], Tensor[(2520), float32], Tensor[(392), float32]) */;
  %129 = %120.0;
  %130 = %123.0;
  %131 = %128.0;
  (%129, %130, %var_6337, %131, meta[relay.Constant][7] /* ty=Tensor[(1352), float64] */, meta[relay.Constant][8] /* ty=Tensor[(1440), float64] */)
}

def @func_5547() -> Tensor[(936), float32] {
  %132 = @func_3781() /* ty=(Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %132.2
}

def @func_11507() -> (Tensor[(15, 14, 1), float64], Tensor[(15, 14, 1), float64]) {
  %133 = @func_4379() /* ty=(Tensor[(15, 14, 1), float64],) */;
  %134 = @func_11208() /* ty=(Tensor[(15, 14, 1), float64],) */;
  %135 = %133.0;
  %136 = %134.0;
  (%135, %136)
}

def @func_3625() -> (Tensor[(12, 14, 15), float64], Tensor[(936), float32]) {
  %137 = @func_2297() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %138 = %137.1;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(12, 14, 15), float64] */;
  %140 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %141 = sigmoid(%139) /* ty=Tensor[(12, 14, 15), float64] */;
  %142 = %140.2;
  (%141, %142)
}

def @func_9192() -> Tensor[(12, 14, 1248), float64] {
  %143 = @func_4732() /* ty=Tensor[(12, 14, 1248), uint64] */;
  %144 = cast(%143, dtype="float64") /* ty=Tensor[(12, 14, 1248), float64] */;
  atan(%144) /* ty=Tensor[(12, 14, 1248), float64] */
}

def @func_6615() -> (Tensor[(12, 14, 1), float32], Tensor[(936), float32]) {
  %145 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %146 = @func_3625() /* ty=(Tensor[(12, 14, 15), float64], Tensor[(936), float32]) */;
  %147 = %145.0;
  %148 = %146.1;
  (%147, %148)
}

def @func_9470() -> (Tensor[(936), float32], Tensor[(13, 6, 12), float32]) {
  %149 = @func_3321() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %150 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %151 = %149.4;
  %152 = %150.0;
  (%151, %152)
}

def @func_6523(%var_6519: Tensor[(60, 24), float64]) -> (Tensor[(12, 14, 1), float32], Tensor[(12, 12, 10), float64], Tensor[(60, 24), float64]) {
  %153 = @func_3984() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %154 = cast(%var_6519, dtype="float64") /* ty=Tensor[(60, 24), float64] */;
  %155 = cast(%var_6519, dtype="float64") /* ty=Tensor[(60, 24), float64] */;
  %156 = reshape(%154, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %157 = reshape(%155, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %158 = @func_4514(%156, %157) /* ty=(Tensor[(12, 12, 10), float64],) */;
  %159 = %153.0;
  %160 = %158.0;
  (%159, %160, %var_6519)
}

def @func_1580() -> Tensor[(12, 14, 1), float32] {
  %161 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %161.0
}

def @func_2532(%var_2524: Tensor[(7, 5, 13), float32]) -> Tensor[(7, 5, 13), float32] {
  %162 = cast(%var_2524, dtype="float32") /* ty=Tensor[(7, 5, 13), float32] */;
  cosh(%162) /* ty=Tensor[(7, 5, 13), float32] */
}

def @func_3709(%var_3695: Tensor[(12, 14, 12), float32]) -> Tensor[(12, 14, 12), float64] {
  %163 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %164 = cast(%163, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %165 = cast(%var_3695, dtype="bool") /* ty=Tensor[(12, 14, 12), bool] */;
  %166 = equal(%164, %165) /* ty=Tensor[(12, 14, 12), bool] */;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
  cosh(%167) /* ty=Tensor[(12, 14, 12), float64] */
}

def @func_7624() -> (Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) {
  %168 = cast(meta[relay.Constant][9] /* ty=Tensor[(3328), float64] */, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %169 = reshape(%168, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), float64] */;
  %170 = @func_306(%169) /* ty=(Tensor[(16, 13, 16), float64],) */;
  %171 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %172 = %170.0;
  (%171, %172, meta[relay.Constant][9] /* ty=Tensor[(3328), float64] */)
}

def @func_8788() -> (Tensor[(12, 14, 1248), uint64],) {
  %173 = @func_3880() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
  %174 = %173.1;
  (%174,)
}

def @func_3249(%var_3247: Tensor[(2520), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) {
  %175 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %176 = cast(%var_3247, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %177 = reshape(%176, newshape=[12, 14, 15]) /* ty=Tensor[(12, 14, 15), float32] */;
  %178 = @func_1715(%177) /* ty=(Tensor[(12, 14, 15), bool],) */;
  %179 = %175.0;
  %180 = %178.0;
  (%179, %180, %var_3247)
}

def @func_7464() -> (Tensor[(12, 14, 1), float32], Tensor[(168), float32]) {
  %181 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %182 = @func_6804() /* ty=Tensor[(168), float32] */;
  (%181, %182)
}

def @func_6248() -> Tensor[(12, 14, 1), float32] {
  @func_6015() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_7914(%var_7898: Tensor[(10, 16, 7), float64]) -> (Tensor[(10, 16, 7), float64], Tensor[(12, 14, 1), float32]) {
  %183 = cast(%var_7898, dtype="float64") /* ty=Tensor[(10, 16, 7), float64] */;
  %184 = sin(%183) /* ty=Tensor[(10, 16, 7), float64] */;
  %185 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  (%184, %185)
}

def @func_10851() -> Tensor[(3, 8, 1), uint8] {
  @func_10324() /* ty=Tensor[(3, 8, 1), uint8] */
}

def @func_4242() -> Tensor[(13, 6, 12), float32] {
  %186 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %186.0
}

def @func_2789() -> (Tensor[(12, 14, 1), float32],) {
  %187 = @func_1611() /* ty=Tensor[(12, 14, 1), float32] */;
  (%187,)
}

def @func_2350() -> (Tensor[(13, 6, 12), float32],) {
  %188 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
  %189 = %188.1;
  (%189,)
}

def @func_6007() -> (Tensor[(12, 14, 392), float32], Tensor[(8, 13, 12), int8], Tensor[(2, 468), float32]) {
  %190 = @func_4801() /* ty=Tensor[(12, 14, 392), bool] */;
  %191 = @func_3984() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %192 = %191.0;
  %193 = cast(%190, dtype="float32") /* ty=Tensor[(12, 14, 392), float32] */;
  %194 = cast(%192, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
  %195 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 468), float32] */, dtype="float32") /* ty=Tensor[(2, 468), float32] */;
  %196 = reshape(%195, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %197 = @func_3182(%196) /* ty=(Tensor[(13, 6, 12), bool], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(8, 13, 12), int8], Tensor[(392), float32]) */;
  %198 = multiply(%193, %194) /* ty=Tensor[(12, 14, 392), float32] */;
  %199 = %197.3;
  (%198, %199, meta[relay.Constant][10] /* ty=Tensor[(2, 468), float32] */)
}

def @func_10674() -> (Tensor[(12, 14, 1248), float64],) {
  %200 = @func_3463() /* ty=(Tensor[(12, 14, 1248), uint64], Tensor[(392), float32], Tensor[(13, 6, 12), bool]) */;
  %201 = %200.0;
  %202 = cast(%201, dtype="float64") /* ty=Tensor[(12, 14, 1248), float64] */;
  %203 = exp(%202) /* ty=Tensor[(12, 14, 1248), float64] */;
  (%203,)
}

def @func_5210(%var_5138: Tensor[(8, 13, 13), float64], %var_5176: Tensor[(1440), float64]) -> (Tensor[(8, 13, 13), float64], Tensor[(12, 14, 392), int8], Tensor[(12, 12, 10), float64], Tensor[(1440), float64], Tensor[(12, 14, 15), bool], Tensor[(2520), float32], Tensor[(392), float32]) {
  %204 = cast(%var_5138, dtype="float64") /* ty=Tensor[(8, 13, 13), float64] */;
  %205 = @func_4298() /* ty=(Tensor[(12, 14, 392), int8],) */;
  %206 = cast(%var_5176, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %207 = cast(%var_5176, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %208 = reshape(%206, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %209 = reshape(%207, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %210 = @func_4514(%208, %209) /* ty=(Tensor[(12, 12, 10), float64],) */;
  %211 = cast(meta[relay.Constant][11] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %212 = reshape(%211, newshape=[12, 14, 15]) /* ty=Tensor[(12, 14, 15), float32] */;
  %213 = @func_1715(%212) /* ty=(Tensor[(12, 14, 15), bool],) */;
  %214 = @func_3855() /* ty=(Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
  %215 = exp(%204) /* ty=Tensor[(8, 13, 13), float64] */;
  %216 = %205.0;
  %217 = %210.0;
  %218 = %213.0;
  %219 = %214.0;
  (%215, %216, %217, %var_5176, %218, meta[relay.Constant][11] /* ty=Tensor[(2520), float32] */, %219)
}

def @func_3781() -> (Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  %220 = @func_3594() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1248), uint8]) */;
  %221 = cast(meta[relay.Constant][12] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %222 = reshape(%221, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %223 = @func_1144(%222) /* ty=(Tensor[(13, 6, 12), float32],) */;
  %224 = %220.2;
  %225 = %223.0;
  (%224, %225, meta[relay.Constant][12] /* ty=Tensor[(936), float32] */)
}

def @func_4298() -> (Tensor[(12, 14, 392), int8],) {
  %226 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  %227 = @func_2448() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), int64], Tensor[(1456, 144), uint64], Tensor[(392), float32], Tensor[(392), float32]) */;
  %228 = %227.3;
  %229 = cast(%226, dtype="int8") /* ty=Tensor[(12, 14, 1), int8] */;
  %230 = cast(%228, dtype="int8") /* ty=Tensor[(392), int8] */;
  %231 = minimum(%229, %230) /* ty=Tensor[(12, 14, 392), int8] */;
  (%231,)
}

def @func_2297() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %232 = @func_1663() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %233 = cast(meta[relay.Constant][13] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %234 = reshape(%233, newshape=[12, 14, 15]) /* ty=Tensor[(12, 14, 15), float32] */;
  %235 = @func_1715(%234) /* ty=(Tensor[(12, 14, 15), bool],) */;
  %236 = %235.0;
  %237 = cast(meta[relay.Constant][13] /* ty=Tensor[(2520), float32] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="float64") /* ty=Tensor[(12, 14, 15), float64] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %241 = %232.0;
  %242 = divide(%239, %240) /* ty=Tensor[(12, 14, 15), float64] */;
  %243 = @func_1611() /* ty=Tensor[(12, 14, 1), float32] */;
  %244 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  (%241, %242, %243, %244)
}

def @func_9266() -> (Tensor[(936), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %245 = @func_6615() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(936), float32]) */;
  %246 = @func_8674() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %247 = @func_5428() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float64], Tensor[(936), float32]) */;
  %248 = %245.1;
  %249 = %246.0;
  %250 = %247.2;
  (%248, %249, %250)
}

def @func_10756() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, ?), float64]) {
  %251 = @func_5428() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float64], Tensor[(936), float32]) */;
  %252 = @func_9067() /* ty=Tensor[(12, 14, 1), float32] */;
  %253 = %251.1;
  (%252, %253)
}

def @func_6176() -> (Tensor[(12, 14, 392), int8], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) {
  %254 = @func_4298() /* ty=(Tensor[(12, 14, 392), int8],) */;
  %255 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %256 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %257 = %254.0;
  %258 = %255.0;
  %259 = %256.0;
  (%257, %258, %259)
}

def @func_8967() -> (Tensor[(16, 4, 7), float32],) {
  %260 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 4, 7), float32] */, dtype="float32") /* ty=Tensor[(16, 4, 7), float32] */;
  %261 = tan(%260) /* ty=Tensor[(16, 4, 7), float32] */;
  (%261,)
}

def @func_5428() -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float64], Tensor[(936), float32]) {
  %262 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %263 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %264 = cast(%263, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
  %265 = reshape(%264, newshape=[12, 14, 1]) /* ty=Tensor[(12, 14, 1), float32] */;
  %266 = @func_3764(%265) /* ty=(Tensor[(12, 14, ?), float64],) */;
  %267 = @func_4323() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %268 = cast(%263, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
  %269 = tan(%268) /* ty=Tensor[(12, 14, 1), float32] */;
  %270 = cast(%269, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
  %271 = acosh(%270) /* ty=Tensor[(12, 14, 1), float64] */;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
  %273 = @func_3781() /* ty=(Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %274 = %262.0;
  %275 = %266.0;
  %276 = @func_1611() /* ty=Tensor[(12, 14, 1), float32] */;
  %277 = %267.0;
  %278 = atan(%272) /* ty=Tensor[(12, 14, 1), float64] */;
  %279 = %273.2;
  (%274, %275, %276, %277, %278, %279)
}

def @func_4959() -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), int64]) {
  %280 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %281 = @func_1611() /* ty=Tensor[(12, 14, 1), float32] */;
  %282 = @func_3656() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %283 = %282.1;
  %284 = cast(%283, dtype="int64") /* ty=Tensor[(12, 14, 1), int64] */;
  %285 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%281, dtype="int64") /* ty=Tensor[(12, 14, 1), int64] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %288 = %280.0;
  %289 = right_shift(%286, %287) /* ty=Tensor[(12, 14, ?), int64] */;
  (%288, %289)
}

def @func_6697(%var_6671: Tensor[(1, 7, 15), float64]) -> Tensor[(1, 7, 15), float64] {
  %290 = cast(%var_6671, dtype="float64") /* ty=Tensor[(1, 7, 15), float64] */;
  log10(%290) /* ty=Tensor[(1, 7, 15), float64] */
}

def @func_3594() -> (Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1248), uint8]) {
  %291 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 56), float32] */, dtype="float32") /* ty=Tensor[(7, 56), float32] */;
  %292 = reshape(%291, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %293 = @func_2124(%292) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(936), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), uint8]) */;
  %294 = @func_3414() /* ty=(Tensor[(8, 6, 2), float64], Tensor[(13, 6, 12), float32]) */;
  %295 = @func_1663() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %296 = %295.0;
  %297 = @func_3463() /* ty=(Tensor[(12, 14, 1248), uint64], Tensor[(392), float32], Tensor[(13, 6, 12), bool]) */;
  %298 = %297.0;
  %299 = cast(%298, dtype="bool") /* ty=Tensor[(12, 14, 1248), bool] */;
  %300 = cast(%296, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %301 = not_equal(%299, %300) /* ty=Tensor[(12, 14, 1248), bool] */;
  %302 = cast(%296, dtype="uint8") /* ty=Tensor[(12, 14, 1), uint8] */;
  %303 = cast(%301, dtype="uint8") /* ty=Tensor[(12, 14, 1248), uint8] */;
  %304 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %305 = %293.3;
  %306 = %294.1;
  %307 = logical_xor(%302, %303) /* ty=Tensor[(12, 14, 1248), uint8] */;
  (%304, %305, meta[relay.Constant][15] /* ty=Tensor[(7, 56), float32] */, %306, %307)
}

def @func_3083() -> Tensor[(12, 14, 1), float32] {
  @func_1611() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_9339() -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(15, 2, 15), float32]) {
  %308 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %309 = @func_8674() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %310 = @func_7947() /* ty=(Tensor[(15, 2, 15), float32], Tensor[(12, 14, 1), float32]) */;
  %311 = %308.1;
  %312 = %309.0;
  %313 = %310.0;
  (%311, %312, %313)
}

def @func_8930() -> (Tensor[(12, 14, 1), float32],) {
  %314 = @func_7947() /* ty=(Tensor[(15, 2, 15), float32], Tensor[(12, 14, 1), float32]) */;
  %315 = %314.1;
  (%315,)
}

def @func_10343(%var_10340: Tensor[(16, 1, 3), float32]) -> (Tensor[(16, 1, 3), float32],) {
  %316 = cast(%var_10340, dtype="float32") /* ty=Tensor[(16, 1, 3), float32] */;
  %317 = acosh(%316) /* ty=Tensor[(16, 1, 3), float32] */;
  (%317,)
}

def @func_4460(%var_4424: Tensor[(14, 12, 2), float32]) -> (Tensor[(14, 12, 2), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %318 = cast(%var_4424, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %319 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %320 = @func_1663() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %321 = log2(%318) /* ty=Tensor[(14, 12, 2), float32] */;
  %322 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %323 = %319.0;
  %324 = %320.0;
  (%321, %322, %323, %324)
}

def @func_5705() -> Tensor[(12, 14, 1248), uint8] {
  %325 = @func_3594() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1248), uint8]) */;
  %325.4
}

def @func_6229(%var_6217: Tensor[(15, 10, 1), float64]) -> Tensor[(15, 10, 1), float64] {
  %326 = cast(%var_6217, dtype="float64") /* ty=Tensor[(15, 10, 1), float64] */;
  tan(%326) /* ty=Tensor[(15, 10, 1), float64] */
}

def @func_6595(%var_6566: Tensor[(5, 12, 6), uint32], %var_6574: Tensor[(209664), uint64]) -> (Tensor[(5, 12, 6), uint32], Tensor[(12, 14, 1248), int64], Tensor[(209664), uint64], Tensor[(5, 12, 6), float32]) {
  %327 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 12, 6), uint32] */, dtype="uint32") /* ty=Tensor[(5, 12, 6), uint32] */;
  %328 = shape_of(%var_6566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%var_6566, dtype="uint32") /* ty=Tensor[(5, 12, 6), uint32] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %331 = cast(%var_6574, dtype="uint64") /* ty=Tensor[(209664), uint64] */;
  %332 = cast(%var_6574, dtype="float64") /* ty=Tensor[(209664), float64] */;
  %333 = reshape(%331, newshape=[12, 14, 1248]) /* ty=Tensor[(12, 14, 1248), uint64] */;
  %334 = reshape(%332, newshape=[12, 14, 1248]) /* ty=Tensor[(12, 14, 1248), float64] */;
  %335 = cast(%var_6566, dtype="float32") /* ty=Tensor[(5, 12, 6), float32] */;
  %336 = logical_xor(%329, %330) /* ty=Tensor[(5, 12, 6), uint32] */;
  %337 = @func_2384(%333, %334) /* ty=Tensor[(12, 14, 1248), int64] */;
  %338 = asinh(%335) /* ty=Tensor[(5, 12, 6), float32] */;
  (%336, %337, %var_6574, %338)
}

def @func_306(%var_293: Tensor[(16, 13, 16), float64]) -> (Tensor[(16, 13, 16), float64],) {
  %339 = cast(%var_293, dtype="float64") /* ty=Tensor[(16, 13, 16), float64] */;
  %340 = sigmoid(%339) /* ty=Tensor[(16, 13, 16), float64] */;
  (%340,)
}

def @func_4157(%var_4143: Tensor[(12, 14, 8), float32]) -> (Tensor[(12, 14, 8), bool], Tensor[(12, 14, 1), float32]) {
  %341 = @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %342 = %341.0;
  %343 = cast(%342, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %344 = cast(%var_4143, dtype="bool") /* ty=Tensor[(12, 14, 8), bool] */;
  %345 = @func_3984() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %346 = not_equal(%343, %344) /* ty=Tensor[(12, 14, 8), bool] */;
  %347 = %345.0;
  (%346, %347)
}

def @func_10374() -> (Tensor[(12, 14, 1248), uint64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  %348 = @func_8788() /* ty=(Tensor[(12, 14, 1248), uint64],) */;
  %349 = cast(meta[relay.Constant][17] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %350 = reshape(%349, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %351 = @func_1556(%350) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), uint8], Tensor[(12, 14, 1), float32]) */;
  %352 = %348.0;
  %353 = %351.1;
  (%352, %353, meta[relay.Constant][17] /* ty=Tensor[(936), float32] */)
}

def @func_1588() -> (Tensor[(12, 14, 1), float32],) {
  %354 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %355 = %354.0;
  (%355,)
}

def @func_8674() -> (Tensor[(12, 14, 1), float32],) {
  %356 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %357 = %356.0;
  (%357,)
}

def @func_2124(%var_2095: Tensor[(392), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(936), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), uint8]) {
  %358 = cast(%var_2095, dtype="float32") /* ty=Tensor[(392), float32] */;
  %359 = cast(meta[relay.Constant][18] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %360 = reshape(%358, newshape=[14, 14, 2]) /* ty=Tensor[(14, 14, 2), float32] */;
  %361 = reshape(%359, newshape=[36, 26]) /* ty=Tensor[(36, 26), float32] */;
  %362 = @func_1632(%360, %361) /* ty=(Tensor[(14, 14, 2), float32], Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32]) */;
  %363 = cast(meta[relay.Constant][19] /* ty=Tensor[(3328), float64] */, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %364 = reshape(%363, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), float64] */;
  %365 = @func_306(%364) /* ty=(Tensor[(16, 13, 16), float64],) */;
  %366 = cast(meta[relay.Constant][18] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %367 = reshape(%366, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %368 = @func_1556(%367) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), uint8], Tensor[(12, 14, 1), float32]) */;
  %369 = @func_1611() /* ty=Tensor[(12, 14, 1), float32] */;
  %370 = %362.2;
  %371 = %365.0;
  %372 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %373 = %368.2;
  (%369, %370, %var_2095, meta[relay.Constant][18] /* ty=Tensor[(936), float32] */, %371, meta[relay.Constant][19] /* ty=Tensor[(3328), float64] */, %372, %373)
}

def @func_2485() -> Tensor[(13, 6, 12), float32] {
  %374 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %374.0
}

def @func_7170() -> (Tensor[(13, 6, 12), float32], Tensor[(1440), float64], Tensor[(12, 12, 10), float32]) {
  %375 = @func_6176() /* ty=(Tensor[(12, 14, 392), int8], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) */;
  %376 = cast(meta[relay.Constant][20] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %377 = cast(meta[relay.Constant][20] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %378 = reshape(%376, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %379 = reshape(%377, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %380 = @func_4514(%378, %379) /* ty=(Tensor[(12, 12, 10), float64],) */;
  %381 = %380.0;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(12, 12, 10), float32] */;
  %383 = %375.1;
  %384 = log(%382) /* ty=Tensor[(12, 12, 10), float32] */;
  (%383, meta[relay.Constant][20] /* ty=Tensor[(1440), float64] */, %384)
}

def @func_10826() -> (Tensor[(12, 14, 1), float32], Tensor[(392), float32], Tensor[(2688), float32], Tensor[(12, 14, 1), float32]) {
  %385 = @func_7464() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(168), float32]) */;
  %386 = cast(meta[relay.Constant][21] /* ty=Tensor[(2688), float32] */, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %387 = reshape(%386, newshape=[12, 14, 16]) /* ty=Tensor[(12, 14, 16), float32] */;
  %388 = @func_5783(%387) /* ty=(Tensor[(12, 14, 16), float64], Tensor[(392), float32]) */;
  %389 = @func_8930() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %390 = %385.0;
  %391 = %388.1;
  %392 = %389.0;
  (%390, %391, meta[relay.Constant][21] /* ty=Tensor[(2688), float32] */, %392)
}

def @func_11123() -> (Tensor[(12, 14, 1248), uint64],) {
  %393 = @func_8788() /* ty=(Tensor[(12, 14, 1248), uint64],) */;
  %394 = %393.0;
  (%394,)
}

def @func_2217(%var_2194: Tensor[(392), float32]) -> (Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) {
  %395 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
  %396 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
  %397 = cast(%var_2194, dtype="float32") /* ty=Tensor[(392), float32] */;
  %398 = reshape(%397, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %399 = @func_2124(%398) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(936), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), uint8]) */;
  %400 = cast(meta[relay.Constant][22] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %401 = reshape(%400, newshape=[12, 14, 15]) /* ty=Tensor[(12, 14, 15), float32] */;
  %402 = @func_1715(%401) /* ty=(Tensor[(12, 14, 15), bool],) */;
  %403 = %402.0;
  %404 = cast(%403, dtype="uint32") /* ty=Tensor[(12, 14, 15), uint32] */;
  %405 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(2520), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %406 = cast(meta[relay.Constant][22] /* ty=Tensor[(2520), float32] */, dtype="uint32") /* ty=Tensor[(2520), uint32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %408 = %395.0;
  %409 = %396.1;
  %410 = %399.1;
  %411 = add(%406, %407) /* ty=Tensor[(2520), uint32] */;
  (%408, %409, %410, %var_2194, %411)
}

def @func_10134() -> (Tensor[(392), float32],) {
  %412 = @func_6154() /* ty=(Tensor[(392), float32],) */;
  %413 = %412.0;
  (%413,)
}

def @func_1337() -> Tensor[(12, 14, 1), float32] {
  %414 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
  sqrt(%414) /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_7796() -> (Tensor[(13, 6, 12), float32],) {
  %415 = @func_3594() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1248), uint8]) */;
  %416 = %415.3;
  (%416,)
}

def @func_6804() -> Tensor[(168), float32] {
  %417 = @func_3855() /* ty=(Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
  %417.2
}

def @func_6278() -> Tensor[(12, 14, 1), float32] {
  %418 = @func_4350() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %418.0
}

def @func_9763() -> Tensor[(12, 14, 1), float32] {
  @func_6416() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_3965() -> (Tensor[(936, 1), float32], Tensor[(12, 14, 392), bool]) {
  %419 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %420 = %419.0;
  %421 = cast(meta[relay.Constant][24] /* ty=Tensor[(936, 1), float32] */, dtype="float32") /* ty=Tensor[(936, 1), float32] */;
  %422 = reshape(%421, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %423 = @func_3182(%422) /* ty=(Tensor[(13, 6, 12), bool], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(8, 13, 12), int8], Tensor[(392), float32]) */;
  %424 = %423.4;
  %425 = cast(%420, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %426 = cast(%424, dtype="bool") /* ty=Tensor[(392), bool] */;
  %427 = logical_and(%425, %426) /* ty=Tensor[(12, 14, 392), bool] */;
  (meta[relay.Constant][24] /* ty=Tensor[(936, 1), float32] */, %427)
}

def @func_7858(%var_7852: Tensor[(209664), uint64]) -> (Tensor[(12, 14, 1), float32], Tensor[(360), uint32], Tensor[(209664), uint64], Tensor[(12, 14, 1248), float64]) {
  %428 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %429 = cast(meta[relay.Constant][25] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %430 = cast(%var_7852, dtype="uint64") /* ty=Tensor[(209664), uint64] */;
  %431 = reshape(%429, newshape=[5, 12, 6]) /* ty=Tensor[(5, 12, 6), uint32] */;
  %432 = reshape(%430, newshape=[209664]) /* ty=Tensor[(209664), uint64] */;
  %433 = @func_6595(%431, %432) /* ty=(Tensor[(5, 12, 6), uint32], Tensor[(12, 14, 1248), int64], Tensor[(209664), uint64], Tensor[(5, 12, 6), float32]) */;
  %434 = %433.1;
  %435 = cast(%434, dtype="float64") /* ty=Tensor[(12, 14, 1248), float64] */;
  %436 = %428.0;
  %437 = atanh(%435) /* ty=Tensor[(12, 14, 1248), float64] */;
  (%436, meta[relay.Constant][25] /* ty=Tensor[(360), uint32] */, %var_7852, %437)
}

def @func_5109(%var_5066: Tensor[(13, 6, 12), float32], %var_5074: Tensor[(2520), float32]) -> (Tensor[(13, 6, 12), bool], Tensor[(12, 14, 15), bool], Tensor[(2520), float32], Tensor[(13, 6, 12), float32], Tensor[(936, 1), float32], Tensor[(12, 14, 1248), uint64]) {
  %438 = @func_2485() /* ty=Tensor[(13, 6, 12), float32] */;
  %439 = cast(%var_5066, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %443 = cast(%var_5074, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %444 = reshape(%443, newshape=[12, 14, 15]) /* ty=Tensor[(12, 14, 15), float32] */;
  %445 = @func_1715(%444) /* ty=(Tensor[(12, 14, 15), bool],) */;
  %446 = @func_3965() /* ty=(Tensor[(936, 1), float32], Tensor[(12, 14, 392), bool]) */;
  %447 = @func_3463() /* ty=(Tensor[(12, 14, 1248), uint64], Tensor[(392), float32], Tensor[(13, 6, 12), bool]) */;
  %448 = logical_or(%441, %442) /* ty=Tensor[(13, 6, 12), bool] */;
  %449 = %445.0;
  %450 = @func_2485() /* ty=Tensor[(13, 6, 12), float32] */;
  %451 = %446.0;
  %452 = %447.0;
  (%448, %449, %var_5074, %450, %451, %452)
}

def @func_6416() -> Tensor[(12, 14, 1), float32] {
  %453 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %453.0
}

def @func_8437() -> Tensor[(12, 14, 1), float32] {
  @func_4073() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_10587() -> (Tensor[(936), float32],) {
  %454 = @func_9266() /* ty=(Tensor[(936), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %455 = %454.0;
  (%455,)
}

def @func_10738() -> (Tensor[(13, 6, 12), float32],) {
  %456 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
  %457 = %456.1;
  (%457,)
}

def @func_11307() -> Tensor[(2520), float32] {
  %458 = @func_11182() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(2520), float32]) */;
  %458.1
}

def @func_9413(%var_9386: Tensor[(16, 13, 16), float64]) -> (Tensor[(16, 13, 16), uint8],) {
  %459 = @func_7571() /* ty=(Tensor[(936), float32], Tensor[(1248), int8], Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) */;
  %460 = %459.2;
  %461 = cast(%var_9386, dtype="uint8") /* ty=Tensor[(16, 13, 16), uint8] */;
  %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%460, dtype="uint8") /* ty=Tensor[(16, 13, 16), uint8] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %465 = bitwise_xor(%463, %464) /* ty=Tensor[(16, 13, 16), uint8] */;
  (%465,)
}

def @func_1715(%var_1706: Tensor[(12, 14, 15), float32]) -> (Tensor[(12, 14, 15), bool],) {
  %466 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  %467 = cast(%466, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %468 = cast(%var_1706, dtype="bool") /* ty=Tensor[(12, 14, 15), bool] */;
  %469 = not_equal(%467, %468) /* ty=Tensor[(12, 14, 15), bool] */;
  (%469,)
}

def @func_8393() -> (Tensor[(12, 14, 1), float32],) {
  %470 = @func_6794() /* ty=Tensor[(12, 14, 1), float32] */;
  (%470,)
}

def @func_9995(%var_9978: Tensor[(6, 10, 8), float64]) -> Tensor[(6, 10, 8), float64] {
  %471 = cast(%var_9978, dtype="float64") /* ty=Tensor[(6, 10, 8), float64] */;
  atan(%471) /* ty=Tensor[(6, 10, 8), float64] */
}

def @func_11433() -> (Tensor[(12, 14, 1), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) {
  %472 = @func_6176() /* ty=(Tensor[(12, 14, 392), int8], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) */;
  %473 = %472.2;
  %474 = cast(%473, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
  %475 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
  %476 = @func_7571() /* ty=(Tensor[(936), float32], Tensor[(1248), int8], Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) */;
  %477 = log2(%474) /* ty=Tensor[(12, 14, 1), float64] */;
  %478 = %475.1;
  %479 = %476.3;
  (%477, %478, %479)
}

def @func_3984() -> (Tensor[(12, 14, 1), float32],) {
  %480 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %481 = %480.0;
  (%481,)
}

def @func_9528() -> (Tensor[(12, 14, 1), float32], Tensor[(1248), int8], Tensor[(1248), int8]) {
  %482 = @func_8930() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %483 = cast(meta[relay.Constant][26] /* ty=Tensor[(1248), int8] */, dtype="int8") /* ty=Tensor[(1248), int8] */;
  %484 = reshape(%483, newshape=[1248]) /* ty=Tensor[(1248), int8] */;
  %485 = @func_6490(%484) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(936), float32], Tensor[(1248), int8]) */;
  %486 = %482.0;
  %487 = %485.2;
  (%486, %487, meta[relay.Constant][26] /* ty=Tensor[(1248), int8] */)
}

def @func_4514(%var_4499: Tensor[(12, 12, 10), float64], %var_4500: Tensor[(12, 12, 10), float64]) -> (Tensor[(12, 12, 10), float64],) {
  %488 = cast(%var_4500, dtype="float64") /* ty=Tensor[(12, 12, 10), float64] */;
  %489 = shape_of(%var_4499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%var_4499, dtype="float64") /* ty=Tensor[(12, 12, 10), float64] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %492 = floor_divide(%490, %491) /* ty=Tensor[(12, 12, 10), float64] */;
  (%492,)
}

def @func_3061() -> (Tensor[(12, 14, 1), float32],) {
  %493 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  (%493,)
}

def @func_5806(%var_5801: Tensor[(15, 7, 1), float64]) -> (Tensor[(15, 7, 1), float64],) {
  %494 = cast(%var_5801, dtype="float64") /* ty=Tensor[(15, 7, 1), float64] */;
  %495 = log2(%494) /* ty=Tensor[(15, 7, 1), float64] */;
  (%495,)
}

def @func_8197() -> (Tensor[(13, 6, 12), float32],) {
  %496 = @func_3414() /* ty=(Tensor[(8, 6, 2), float64], Tensor[(13, 6, 12), float32]) */;
  %497 = %496.1;
  (%497,)
}

def @func_1877() -> (Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) {
  %498 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %499 = %498.1;
  %500 = cast(%499, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %501 = reshape(%500, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %502 = @func_1144(%501) /* ty=(Tensor[(13, 6, 12), float32],) */;
  %503 = %502.0;
  (%499, %503)
}

def @func_5654(%var_5611: Tensor[(7, 56), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(7, 56), float32]) {
  %504 = @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %505 = @func_3781() /* ty=(Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %506 = %505.0;
  %507 = cast(%var_5611, dtype="float32") /* ty=Tensor[(7, 56), float32] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(2), int32] */;
  %509 = cast(%506, dtype="float32") /* ty=Tensor[(7, 56), float32] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %511 = floor_divide(%509, %510) /* ty=Tensor[(7, 56), float32] */;
  %512 = cast(%511, dtype="float32") /* ty=Tensor[(7, 56), float32] */;
  %513 = %504.0;
  %514 = log2(%512) /* ty=Tensor[(7, 56), float32] */;
  (%513, %514)
}

def @func_3321() -> (Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  %515 = @func_2614() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %516 = cast(meta[relay.Constant][27] /* ty=Tensor[(3328), float64] */, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %517 = reshape(%516, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), float64] */;
  %518 = @func_306(%517) /* ty=(Tensor[(16, 13, 16), float64],) */;
  %519 = cast(meta[relay.Constant][28] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %520 = reshape(%519, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %521 = @func_1144(%520) /* ty=(Tensor[(13, 6, 12), float32],) */;
  %522 = %515.0;
  %523 = %518.0;
  %524 = %521.0;
  (%522, %523, meta[relay.Constant][27] /* ty=Tensor[(3328), float64] */, %524, meta[relay.Constant][28] /* ty=Tensor[(936), float32] */)
}

def @func_1663() -> (Tensor[(12, 14, 1), float32],) {
  %525 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  (%525,)
}

def @func_6490(%var_6486: Tensor[(1248), int8]) -> (Tensor[(10, 7, 16), float32], Tensor[(936), float32], Tensor[(1248), int8]) {
  %526 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %527 = sin(%526) /* ty=Tensor[(10, 7, 16), float64] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %529 = tan(%528) /* ty=Tensor[(10, 7, 16), float64] */;
  %530 = cast(%527, dtype="uint32") /* ty=Tensor[(10, 7, 16), uint32] */;
  %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%529, dtype="uint32") /* ty=Tensor[(10, 7, 16), uint32] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %534 = right_shift(%532, %533) /* ty=Tensor[(10, 7, 16), uint32] */;
  %535 = cast(%534, dtype="float32") /* ty=Tensor[(10, 7, 16), float32] */;
  %536 = cast(%var_6486, dtype="int8") /* ty=Tensor[(1248), int8] */;
  %537 = reshape(%536, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), int8] */;
  %538 = @func_1795(%537) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(936), float32]) */;
  %539 = asinh(%535) /* ty=Tensor[(10, 7, 16), float32] */;
  %540 = %538.3;
  (%539, %540, %var_6486)
}

def @func_1939(%var_1937: Tensor[(3328), float64]) -> (Tensor[(13, 6, 12), uint16], Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) {
  %541 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
  %542 = %541.0;
  %543 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 6, 12), float32] */, dtype="uint16") /* ty=Tensor[(13, 6, 12), uint16] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="uint16") /* ty=Tensor[(13, 6, 12), uint16] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %547 = cast(%var_1937, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %548 = reshape(%547, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), float64] */;
  %549 = @func_306(%548) /* ty=(Tensor[(16, 13, 16), float64],) */;
  %550 = bitwise_and(%545, %546) /* ty=Tensor[(13, 6, 12), uint16] */;
  %551 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %552 = %549.0;
  (%550, %551, %552, %var_1937)
}

def @func_6154() -> (Tensor[(392), float32],) {
  %553 = @func_3855() /* ty=(Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
  %554 = %553.0;
  (%554,)
}

def @func_10104(%var_10073: Tensor[(8, 2, 1), float32]) -> (Tensor[(8, 2, ?), float64], Tensor[(13, 6, 12), float32]) {
  %555 = cast(%var_10073, dtype="float32") /* ty=Tensor[(8, 2, 1), float32] */;
  %556 = sqrt(%555) /* ty=Tensor[(8, 2, 1), float32] */;
  %557 = cast(%556, dtype="float32") /* ty=Tensor[(8, 2, 1), float32] */;
  %558 = rsqrt(%557) /* ty=Tensor[(8, 2, 1), float32] */;
  %559 = cast(%558, dtype="float64") /* ty=Tensor[(8, 2, 1), float64] */;
  %560 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%556, dtype="float64") /* ty=Tensor[(8, 2, 1), float64] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %563 = @func_3781() /* ty=(Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %564 = power(%561, %562) /* ty=Tensor[(8, 2, ?), float64] */;
  %565 = %563.1;
  (%564, %565)
}

def @func_7085(%var_7012: Tensor[(9, 15, 14), uint64], %var_7013: Tensor[(9, 15, 14), uint64], %var_7036: Tensor[(392), float32]) -> (Tensor[(9, 15, 14), bool], Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(392), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(168), float32], Tensor[(9, 15, 14), float64]) {
  %566 = cast(%var_7013, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %567 = shape_of(%var_7012, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%var_7012, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %570 = greater_equal(%568, %569) /* ty=Tensor[(9, 15, 14), bool] */;
  %571 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 15, 14), bool] */, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%570, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %575 = cast(meta[relay.Constant][32] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %576 = cast(%var_7036, dtype="float32") /* ty=Tensor[(392), float32] */;
  %577 = reshape(%575, newshape=[936]) /* ty=Tensor[(936), float32] */;
  %578 = reshape(%576, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %579 = @func_3930(%577, %578) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32], Tensor[(13, 6, 12), float32], Tensor[(392), float32]) */;
  %580 = @func_2297() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %581 = cast(%var_7012, dtype="float64") /* ty=Tensor[(9, 15, 14), float64] */;
  %582 = equal(%573, %574) /* ty=Tensor[(9, 15, 14), bool] */;
  %583 = %579.0;
  %584 = %580.3;
  %585 = @func_6416() /* ty=Tensor[(12, 14, 1), float32] */;
  %586 = @func_6804() /* ty=Tensor[(168), float32] */;
  %587 = log2(%581) /* ty=Tensor[(9, 15, 14), float64] */;
  (%582, %583, meta[relay.Constant][32] /* ty=Tensor[(936), float32] */, %var_7036, %584, %585, %586, %587)
}

def @func_7571() -> (Tensor[(936), float32], Tensor[(1248), int8], Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) {
  %588 = cast(meta[relay.Constant][33] /* ty=Tensor[(1248), int8] */, dtype="int8") /* ty=Tensor[(1248), int8] */;
  %589 = reshape(%588, newshape=[1248]) /* ty=Tensor[(1248), int8] */;
  %590 = @func_6490(%589) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(936), float32], Tensor[(1248), int8]) */;
  %591 = @func_5729() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) */;
  %592 = @func_3463() /* ty=(Tensor[(12, 14, 1248), uint64], Tensor[(392), float32], Tensor[(13, 6, 12), bool]) */;
  %593 = %592.2;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %595 = %590.1;
  %596 = %591.1;
  %597 = log(%594) /* ty=Tensor[(13, 6, 12), float32] */;
  %598 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  (%595, meta[relay.Constant][33] /* ty=Tensor[(1248), int8] */, %596, %597, %598)
}

def @func_10028() -> (Tensor[(13, 6, 12), float32],) {
  %599 = @func_7170() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(1440), float64], Tensor[(12, 12, 10), float32]) */;
  %600 = %599.0;
  (%600,)
}

def @func_1795(%var_1768: Tensor[(8, 13, 12), int8]) -> (Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(936), float32]) {
  %601 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 13, 12), int8] */, dtype="int8") /* ty=Tensor[(8, 13, 12), int8] */;
  %602 = shape_of(%var_1768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_1768, dtype="int8") /* ty=Tensor[(8, 13, 12), int8] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %605 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %606 = right_shift(%603, %604) /* ty=Tensor[(8, 13, 12), int8] */;
  %607 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %608 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %609 = %605.2;
  (%606, %607, %608, %609)
}

def @func_6015() -> Tensor[(12, 14, 1), float32] {
  %610 = @func_3984() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %610.0
}

def @func_5783(%var_5769: Tensor[(12, 14, 16), float32]) -> (Tensor[(12, 14, 16), float64], Tensor[(392), float32]) {
  %611 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %612 = %611.0;
  %613 = cast(%612, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
  %614 = cast(%var_5769, dtype="float64") /* ty=Tensor[(12, 14, 16), float64] */;
  %615 = @func_2568() /* ty=(Tensor[(392), float32],) */;
  %616 = divide(%613, %614) /* ty=Tensor[(12, 14, 16), float64] */;
  %617 = %615.0;
  (%616, %617)
}

def @func_1611() -> Tensor[(12, 14, 1), float32] {
  %618 = @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %618.0
}

def @func_2835() -> (Tensor[(12, 14, 1), float32],) {
  %619 = @func_2297() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %620 = %619.0;
  (%620,)
}

def @func_9129(%var_9096: Tensor[(2, 10, 4), float32]) -> Tensor[(2, 10, 4), bool] {
  %621 = cast(%var_9096, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
  %622 = cos(%621) /* ty=Tensor[(2, 10, 4), float32] */;
  %623 = cast(%var_9096, dtype="bool") /* ty=Tensor[(2, 10, 4), bool] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%622, dtype="bool") /* ty=Tensor[(2, 10, 4), bool] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%625, %626) /* ty=Tensor[(2, 10, 4), bool] */
}

def @func_2614() -> (Tensor[(12, 14, 1), float32],) {
  %627 = @func_2297() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %628 = %627.2;
  (%628,)
}

def @func_10488() -> (Tensor[(392), float32], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float64]) {
  %629 = @func_6154() /* ty=(Tensor[(392), float32],) */;
  %630 = @func_4323() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %631 = @func_7134() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
  %632 = %631.1;
  %633 = cast(%632, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
  %634 = %629.0;
  %635 = %630.1;
  %636 = erf(%633) /* ty=Tensor[(13, 6, 12), float64] */;
  (%634, %635, %636)
}

def @func_6094(%var_6066: Tensor[(12, 14, 6), float32]) -> (Tensor[(12, 14, 6), int8], Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32]) {
  %637 = @func_2614() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %638 = %637.0;
  %639 = cast(%638, dtype="int8") /* ty=Tensor[(12, 14, 1), int8] */;
  %640 = cast(%var_6066, dtype="int8") /* ty=Tensor[(12, 14, 6), int8] */;
  %641 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
  %642 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %643 = bitwise_xor(%639, %640) /* ty=Tensor[(12, 14, 6), int8] */;
  %644 = %641.0;
  %645 = %642.0;
  (%643, %644, %645)
}

def @func_10458() -> Tensor[(15, 14, 1), float64] {
  %646 = @func_4379() /* ty=(Tensor[(15, 14, 1), float64],) */;
  %647 = %646.0;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(15, 14, 1), float64] */;
  atanh(%648) /* ty=Tensor[(15, 14, 1), float64] */
}

def @func_7134() -> (Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) {
  %649 = @func_4959() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), int64]) */;
  %650 = %649.0;
  %651 = @func_4242() /* ty=Tensor[(13, 6, 12), float32] */;
  %652 = @func_4242() /* ty=Tensor[(13, 6, 12), float32] */;
  (%650, %651, %652)
}

def @func_1758() -> Tensor[(12, 14, 1), float32] {
  @func_1611() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_10278(%var_10270: Tensor[(2, 16, 13), uint32]) -> Tensor[(2, 16, 13), uint32] {
  %653 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 16, 13), uint32] */, dtype="uint32") /* ty=Tensor[(2, 16, 13), uint32] */;
  %654 = shape_of(%var_10270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%var_10270, dtype="uint32") /* ty=Tensor[(2, 16, 13), uint32] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%655, %656) /* ty=Tensor[(2, 16, 13), uint32] */
}

def @func_3463() -> (Tensor[(12, 14, 1248), uint64], Tensor[(392), float32], Tensor[(13, 6, 12), bool]) {
  %657 = cast(meta[relay.Constant][36] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %658 = reshape(%657, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %659 = @func_2217(%658) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */;
  %660 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %661 = %660.0;
  %662 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 6, 12), float32] */, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %666 = %659.1;
  %667 = less(%664, %665) /* ty=Tensor[(13, 6, 12), bool] */;
  (%666, meta[relay.Constant][36] /* ty=Tensor[(392), float32] */, %667)
}

def @func_11182() -> (Tensor[(12, 14, 1), float32], Tensor[(2520), float32]) {
  %668 = @func_5538() /* ty=(Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) */;
  %669 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %670 = %668.4;
  (%669, %670)
}

def @func_6794() -> Tensor[(12, 14, 1), float32] {
  %671 = @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %671.0
}

def @func_7947() -> (Tensor[(15, 2, 15), float32], Tensor[(12, 14, 1), float32]) {
  %672 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 15), float32] */;
  %673 = @func_4323() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %674 = asin(%672) /* ty=Tensor[(15, 2, 15), float32] */;
  %675 = %673.0;
  (%674, %675)
}

def @func_1977() -> (Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) {
  %676 = cast(meta[relay.Constant][39] /* ty=Tensor[(1248), int8] */, dtype="int8") /* ty=Tensor[(1248), int8] */;
  %677 = reshape(%676, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), int8] */;
  %678 = @func_1795(%677) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(936), float32]) */;
  %679 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  %680 = cast(%679, dtype="uint64") /* ty=Tensor[(12, 14, 1), uint64] */;
  %681 = cast(meta[relay.Constant][39] /* ty=Tensor[(1248), int8] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %682 = %678.0;
  %683 = maximum(%680, %681) /* ty=Tensor[(12, 14, 1248), uint64] */;
  (%682, %683)
}

def @func_10540() -> (Tensor[(13, 6, 12), float32], Tensor[(7, 5, 13), float32], Tensor[(12, 14, 455), bool], Tensor[(936), float32]) {
  %684 = @func_8197() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %685 = cast(meta[relay.Constant][40] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
  %686 = reshape(%685, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
  %687 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %688 = %687.0;
  %689 = cast(%688, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %690 = cast(meta[relay.Constant][40] /* ty=Tensor[(455), float32] */, dtype="bool") /* ty=Tensor[(455), bool] */;
  %691 = @func_6615() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(936), float32]) */;
  %692 = %684.0;
  %693 = @func_2532(%686) /* ty=Tensor[(7, 5, 13), float32] */;
  %694 = greater_equal(%689, %690) /* ty=Tensor[(12, 14, 455), bool] */;
  %695 = %691.1;
  (%692, %693, %694, %695)
}

def @func_4419(%var_4405: Tensor[(12, 14, 12), float32]) -> (Tensor[(12, 14, 12), bool], Tensor[(13, 6, 12), float32]) {
  %696 = @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %697 = %696.0;
  %698 = cast(%697, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %699 = cast(%var_4405, dtype="bool") /* ty=Tensor[(12, 14, 12), bool] */;
  %700 = not_equal(%698, %699) /* ty=Tensor[(12, 14, 12), bool] */;
  %701 = @func_4242() /* ty=Tensor[(13, 6, 12), float32] */;
  (%700, %701)
}

def @func_4801() -> Tensor[(12, 14, 392), bool] {
  %702 = @func_3965() /* ty=(Tensor[(936, 1), float32], Tensor[(12, 14, 392), bool]) */;
  %702.1
}

def @func_3764(%var_3758: Tensor[(12, 14, 1), float32]) -> (Tensor[(12, 14, ?), float64],) {
  %703 = @func_3061() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %704 = %703.0;
  %705 = cast(%var_3758, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
  %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%704, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %709 = power(%707, %708) /* ty=Tensor[(12, 14, ?), float64] */;
  (%709,)
}

def @func_9949(%var_9888: Tensor[(3328), float64], %var_9889: Tensor[(936), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(2520), uint32], Tensor[(936), float32], Tensor[(12, 14, 336), bool], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 3328), uint64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %710 = @func_3061() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %711 = cast(%var_9888, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %712 = cast(%var_9889, dtype="float32") /* ty=Tensor[(936), float32] */;
  %713 = reshape(%711, newshape=[3328]) /* ty=Tensor[(3328), float64] */;
  %714 = reshape(%712, newshape=[2, 468]) /* ty=Tensor[(2, 468), float32] */;
  %715 = @func_2950(%713, %714) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(392), float32], Tensor[(12, 14, 1248), bool], Tensor[(2520), uint32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1248), float64], Tensor[(13, 6, 12), float32], Tensor[(2, 468), float32]) */;
  %716 = cast(meta[relay.Constant][41] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %717 = reshape(%716, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
  %718 = @func_4460(%717) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %719 = %718.1;
  %720 = cast(meta[relay.Constant][41] /* ty=Tensor[(336), float32] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %721 = cast(%719, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %722 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %723 = @func_8930() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %724 = %723.0;
  %725 = cast(%var_9888, dtype="uint64") /* ty=Tensor[(3328), uint64] */;
  %726 = cast(%724, dtype="uint64") /* ty=Tensor[(12, 14, 1), uint64] */;
  %727 = %710.0;
  %728 = %715.3;
  %729 = greater_equal(%720, %721) /* ty=Tensor[(12, 14, 336), bool] */;
  %730 = %722.0;
  %731 = multiply(%725, %726) /* ty=Tensor[(12, 14, 3328), uint64] */;
  %732 = @func_8437() /* ty=Tensor[(12, 14, 1), float32] */;
  %733 = @func_5516() /* ty=Tensor[(12, 14, 1), float32] */;
  (%727, %728, %var_9889, %729, %730, %731, %732, %733)
}

def @func_4844(%var_4814: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), int16], Tensor[(7, 5, 13), float32], Tensor[(455), float32]) {
  %734 = @func_3781() /* ty=(Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %735 = %734.1;
  %736 = cast(%var_4814, dtype="int16") /* ty=Tensor[(13, 6, 12), int16] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%735, dtype="int16") /* ty=Tensor[(13, 6, 12), int16] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %740 = cast(meta[relay.Constant][42] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
  %741 = reshape(%740, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
  %742 = subtract(%738, %739) /* ty=Tensor[(13, 6, 12), int16] */;
  %743 = @func_2532(%741) /* ty=Tensor[(7, 5, 13), float32] */;
  (%742, %743, meta[relay.Constant][42] /* ty=Tensor[(455), float32] */)
}

def @func_4379() -> (Tensor[(15, 14, 1), float64],) {
  %744 = cast(meta[relay.Constant][43] /* ty=Tensor[(15, 14, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 14, 1), float64] */;
  %745 = erf(%744) /* ty=Tensor[(15, 14, 1), float64] */;
  (%745,)
}

def @func_6753() -> Tensor[(13, 6, 12), float32] {
  %746 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
  %746.0
}

def @func_2742(%var_2678: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(8, 13, 12), int8], Tensor[(13, 6, 12), float32]) {
  %747 = @func_2485() /* ty=Tensor[(13, 6, 12), float32] */;
  %748 = cast(%var_2678, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %752 = cast(meta[relay.Constant][44] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %753 = reshape(%752, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %754 = @func_2217(%753) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */;
  %755 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %756 = %754.2;
  %757 = cast(%756, dtype="float32") /* ty=Tensor[(36, 26), float32] */;
  %758 = reshape(%757, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %759 = @func_1144(%758) /* ty=(Tensor[(13, 6, 12), float32],) */;
  %760 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
  %761 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
  %762 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %763 = floor_mod(%750, %751) /* ty=Tensor[(13, 6, 12), float32] */;
  %764 = %755.0;
  %765 = %759.0;
  %766 = %760.1;
  %767 = %761.0;
  %768 = %762.0;
  (%763, %756, meta[relay.Constant][44] /* ty=Tensor[(392), float32] */, %764, %765, %766, %767, %768)
}

def @func_5912(%var_5899: Tensor[(12, 14, 7), float32]) -> (Tensor[(12, 14, 7), uint64], Tensor[(8, 13, 12), int8]) {
  %769 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %770 = cast(%769, dtype="uint64") /* ty=Tensor[(12, 14, 1), uint64] */;
  %771 = cast(%var_5899, dtype="uint64") /* ty=Tensor[(12, 14, 7), uint64] */;
  %772 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
  %773 = minimum(%770, %771) /* ty=Tensor[(12, 14, 7), uint64] */;
  %774 = %772.0;
  (%773, %774)
}

def @func_7224(%var_7211: Tensor[(12, 14, 1), float32]) -> (Tensor[(12, 14, ?), float32],) {
  %775 = @func_6278() /* ty=Tensor[(12, 14, 1), float32] */;
  %776 = cast(%var_7211, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %780 = floor_divide(%778, %779) /* ty=Tensor[(12, 14, ?), float32] */;
  (%780,)
}

def @func_3855() -> (Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) {
  %781 = @func_2568() /* ty=(Tensor[(392), float32],) */;
  %782 = cast(meta[relay.Constant][45] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %783 = reshape(%782, newshape=[12, 14, 1]) /* ty=Tensor[(12, 14, 1), float32] */;
  %784 = @func_3764(%783) /* ty=(Tensor[(12, 14, ?), float64],) */;
  %785 = @func_1663() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %786 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
  %787 = %781.0;
  %788 = %784.0;
  %789 = %785.0;
  %790 = %786.1;
  (%787, %788, meta[relay.Constant][45] /* ty=Tensor[(168), float32] */, %789, %790)
}

def @func_4732() -> Tensor[(12, 14, 1248), uint64] {
  %791 = @func_3855() /* ty=(Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
  %791.4
}

def @func_8113(%var_8017: Tensor[(12, 14, 9), float32], %var_8072: Tensor[(12, 14, 11), float32]) -> (Tensor[(12, 14, 9), bool], Tensor[(12, 14, 392), bool], Tensor[(12, 14, 11), uint32], Tensor[(12, 14, 1), float32], Tensor[(168), float32], Tensor[(13, 6, 12), float32]) {
  %792 = @func_4073() /* ty=Tensor[(12, 14, 1), float32] */;
  %793 = cast(%792, dtype="int8") /* ty=Tensor[(12, 14, 1), int8] */;
  %794 = cast(%var_8017, dtype="int8") /* ty=Tensor[(12, 14, 9), int8] */;
  %795 = logical_xor(%793, %794) /* ty=Tensor[(12, 14, 9), int8] */;
  %796 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 14, 9), int8] */, dtype="bool") /* ty=Tensor[(12, 14, 9), bool] */;
  %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%795, dtype="bool") /* ty=Tensor[(12, 14, 9), bool] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %800 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  %801 = cast(%800, dtype="uint32") /* ty=Tensor[(12, 14, 1), uint32] */;
  %802 = cast(%var_8072, dtype="uint32") /* ty=Tensor[(12, 14, 11), uint32] */;
  %803 = @func_5428() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float64], Tensor[(936), float32]) */;
  %804 = @func_3855() /* ty=(Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
  %805 = @func_3321() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %806 = greater_equal(%798, %799) /* ty=Tensor[(12, 14, 9), bool] */;
  %807 = @func_4801() /* ty=Tensor[(12, 14, 392), bool] */;
  %808 = minimum(%801, %802) /* ty=Tensor[(12, 14, 11), uint32] */;
  %809 = %803.3;
  %810 = %804.2;
  %811 = %805.3;
  (%806, %807, %808, %809, %810, %811)
}

def @func_11135() -> Tensor[(12, 14, 1), float32] {
  @func_9763() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_7762(%var_7713: Tensor[(3, 16, 11), float64]) -> (Tensor[(3, 16, 11), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  %812 = cast(%var_7713, dtype="float64") /* ty=Tensor[(3, 16, 11), float64] */;
  %813 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %814 = atan(%812) /* ty=Tensor[(3, 16, 11), float64] */;
  %815 = %813.0;
  %816 = @func_5547() /* ty=Tensor[(936), float32] */;
  (%814, %815, %816)
}

def @func_9593(%var_9570: Tensor[(65856), bool]) -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 392), float32], Tensor[(65856), float64]) {
  %817 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
  %818 = @func_3880() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
  %819 = cast(%var_9570, dtype="bool") /* ty=Tensor[(65856), bool] */;
  %820 = reshape(%819, newshape=[12, 14, 392]) /* ty=Tensor[(12, 14, 392), bool] */;
  %821 = cast(%var_9570, dtype="float64") /* ty=Tensor[(65856), float64] */;
  %822 = %817.1;
  %823 = %818.0;
  %824 = @func_8158(%820) /* ty=Tensor[(12, 14, 392), float32] */;
  %825 = acosh(%821) /* ty=Tensor[(65856), float64] */;
  (%822, %823, %824, %825)
}

def @func_10966(%var_10963: Tensor[(105), float64]) -> (Tensor[(12, 14, 1), float32], Tensor[(15, 7, 1), float64], Tensor[(105), float64]) {
  %826 = @func_8393() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %827 = cast(%var_10963, dtype="float64") /* ty=Tensor[(105), float64] */;
  %828 = reshape(%827, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float64] */;
  %829 = @func_5806(%828) /* ty=(Tensor[(15, 7, 1), float64],) */;
  %830 = %826.0;
  %831 = %829.0;
  (%830, %831, %var_10963)
}

def @func_11208() -> (Tensor[(15, 14, 1), float64],) {
  %832 = @func_10458() /* ty=Tensor[(15, 14, 1), float64] */;
  (%832,)
}

def @main() -> Tensor[(12, 14, 392), float64] {
  %833 = @func_4298() /* ty=(Tensor[(12, 14, 392), int8],) */;
  %834 = %833.0;
  %835 = cast(%834, dtype="float32") /* ty=Tensor[(12, 14, 392), float32] */;
  %836 = acos(%835) /* ty=Tensor[(12, 14, 392), float32] */;
  %837 = cast(%836, dtype="float64") /* ty=Tensor[(12, 14, 392), float64] */;
  cosh(%837) /* ty=Tensor[(12, 14, 392), float64] */
}

def @func_11150() -> (Tensor[(3, 8, 1), uint8],) {
  %838 = @func_10851() /* ty=Tensor[(3, 8, 1), uint8] */;
  (%838,)
}

def @func_3414() -> (Tensor[(8, 6, 2), float64], Tensor[(13, 6, 12), float32]) {
  %839 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 6, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 6, 2), float64] */;
  %840 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %841 = erf(%839) /* ty=Tensor[(8, 6, 2), float64] */;
  %842 = %840.0;
  (%841, %842)
}

def @func_5729() -> (Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) {
  %843 = cast(meta[relay.Constant][48] /* ty=Tensor[(3328), float64] */, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %844 = reshape(%843, newshape=[3328]) /* ty=Tensor[(3328), float64] */;
  %845 = @func_1939(%844) /* ty=(Tensor[(13, 6, 12), uint16], Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) */;
  %846 = @func_3083() /* ty=Tensor[(12, 14, 1), float32] */;
  %847 = %845.2;
  (%846, %847, meta[relay.Constant][48] /* ty=Tensor[(3328), float64] */)
}

def @func_4345() -> Tensor[(16, 13, 16), float64] {
  %848 = @func_3321() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %848.1
}

def @func_8466() -> Tensor[(12, 14, 1), float32] {
  %849 = @func_3321() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %849.0
}

def @func_1632(%var_1621: Tensor[(14, 14, 2), float32], %var_1628: Tensor[(36, 26), float32]) -> (Tensor[(14, 14, 2), float32], Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32]) {
  %850 = cast(%var_1621, dtype="float32") /* ty=Tensor[(14, 14, 2), float32] */;
  %851 = cast(%var_1628, dtype="float32") /* ty=Tensor[(36, 26), float32] */;
  %852 = reshape(%851, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %853 = @func_1144(%852) /* ty=(Tensor[(13, 6, 12), float32],) */;
  %854 = asin(%850) /* ty=Tensor[(14, 14, 2), float32] */;
  %855 = %853.0;
  (%854, %855, %var_1628)
}

def @func_5538() -> (Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) {
  %856 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %857 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %858 = cast(meta[relay.Constant][49] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %859 = reshape(%858, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %860 = @func_3249(%859) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) */;
  %861 = @func_4345() /* ty=Tensor[(16, 13, 16), float64] */;
  %862 = %856.0;
  %863 = %857.0;
  %864 = %860.1;
  (%861, %862, %863, %864, meta[relay.Constant][49] /* ty=Tensor[(2520), float32] */)
}

def @func_8528() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32]) {
  %865 = @func_6248() /* ty=Tensor[(12, 14, 1), float32] */;
  %866 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %867 = @func_2485() /* ty=Tensor[(13, 6, 12), float32] */;
  (%865, %866, %867)
}

def @func_1430() -> (Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  %868 = cast(meta[relay.Constant][50] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %869 = reshape(%868, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %870 = @func_1144(%869) /* ty=(Tensor[(13, 6, 12), float32],) */;
  %871 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %872 = %870.0;
  (%871, %872, meta[relay.Constant][50] /* ty=Tensor[(936), float32] */)
}

def @func_2950(%var_2937: Tensor[(3328), float64], %var_2947: Tensor[(2, 468), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(392), float32], Tensor[(12, 14, 1248), bool], Tensor[(2520), uint32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1248), float64], Tensor[(13, 6, 12), float32], Tensor[(2, 468), float32]) {
  %873 = cast(meta[relay.Constant][51] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %874 = reshape(%873, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %875 = @func_2217(%874) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */;
  %876 = %875.1;
  %877 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %878 = cast(%876, dtype="bool") /* ty=Tensor[(12, 14, 1248), bool] */;
  %879 = cast(%877, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %880 = cast(meta[relay.Constant][51] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %881 = reshape(%880, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %882 = @func_2217(%881) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */;
  %883 = cast(%var_2937, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %884 = reshape(%883, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), float64] */;
  %885 = @func_306(%884) /* ty=(Tensor[(16, 13, 16), float64],) */;
  %886 = cast(%876, dtype="float64") /* ty=Tensor[(12, 14, 1248), float64] */;
  %887 = cast(meta[relay.Constant][51] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %888 = cast(%var_2947, dtype="float32") /* ty=Tensor[(2, 468), float32] */;
  %889 = reshape(%887, newshape=[14, 14, 2]) /* ty=Tensor[(14, 14, 2), float32] */;
  %890 = reshape(%888, newshape=[36, 26]) /* ty=Tensor[(36, 26), float32] */;
  %891 = @func_1632(%889, %890) /* ty=(Tensor[(14, 14, 2), float32], Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32]) */;
  %892 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  %893 = less(%878, %879) /* ty=Tensor[(12, 14, 1248), bool] */;
  %894 = %882.4;
  %895 = %885.0;
  %896 = sqrt(%886) /* ty=Tensor[(12, 14, 1248), float64] */;
  %897 = %891.1;
  (%892, meta[relay.Constant][51] /* ty=Tensor[(392), float32] */, %893, %894, %895, %var_2937, %896, %897, %var_2947)
}

def @func_6110() -> (Tensor[(13, 6, 12), float32],) {
  %898 = @func_3414() /* ty=(Tensor[(8, 6, 2), float64], Tensor[(13, 6, 12), float32]) */;
  %899 = %898.1;
  (%899,)
}

def @func_4073() -> Tensor[(12, 14, 1), float32] {
  %900 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %900.0
}

def @func_8884() -> Tensor[(15, 2, 15), float32] {
  %901 = @func_8424() /* ty=(Tensor[(15, 2, 15), float32],) */;
  %901.0
}

def @func_3880() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) {
  %902 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
  %903 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %904 = %902.1;
  (%903, %904)
}

def @func_2568() -> (Tensor[(392), float32],) {
  %905 = @func_2448() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), int64], Tensor[(1456, 144), uint64], Tensor[(392), float32], Tensor[(392), float32]) */;
  %906 = %905.3;
  (%906,)
}

def @func_2392() -> (Tensor[(13, 6, 12), float32],) {
  %907 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %908 = %907.1;
  (%908,)
}

def @func_4323() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %909 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  %910 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  (%909, %910)
}

def @func_3930(%var_3915: Tensor[(936), float32], %var_3920: Tensor[(392), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32], Tensor[(13, 6, 12), float32], Tensor[(392), float32]) {
  %911 = cast(%var_3915, dtype="float32") /* ty=Tensor[(936), float32] */;
  %912 = reshape(%911, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %913 = @func_2742(%912) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(8, 13, 12), int8], Tensor[(13, 6, 12), float32]) */;
  %914 = cast(%var_3920, dtype="float32") /* ty=Tensor[(392), float32] */;
  %915 = cast(%var_3915, dtype="float32") /* ty=Tensor[(936), float32] */;
  %916 = reshape(%914, newshape=[14, 14, 2]) /* ty=Tensor[(14, 14, 2), float32] */;
  %917 = reshape(%915, newshape=[36, 26]) /* ty=Tensor[(36, 26), float32] */;
  %918 = @func_1632(%916, %917) /* ty=(Tensor[(14, 14, 2), float32], Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32]) */;
  %919 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %920 = %913.0;
  %921 = %918.1;
  (%919, %920, %var_3915, %921, %var_3920)
}

def @func_1144(%var_1135: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), float32],) {
  %922 = cast(%var_1135, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %923 = atanh(%922) /* ty=Tensor[(13, 6, 12), float32] */;
  (%923,)
}

def @func_8296(%var_8290: Tensor[(4, 252), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(8, 13, 12), int8], Tensor[(4, 252), float32]) {
  %924 = cast(%var_8290, dtype="float32") /* ty=Tensor[(4, 252), float32] */;
  %925 = reshape(%924, newshape=[12, 14, 6]) /* ty=Tensor[(12, 14, 6), float32] */;
  %926 = @func_6094(%925) /* ty=(Tensor[(12, 14, 6), int8], Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32]) */;
  %927 = @func_6248() /* ty=Tensor[(12, 14, 1), float32] */;
  %928 = %926.1;
  (%927, %928, %var_8290)
}

def @func_1556(%var_1524: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), uint8], Tensor[(12, 14, 1), float32]) {
  %929 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %930 = %929.1;
  %931 = cast(%930, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %932 = reshape(%931, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %933 = @func_1144(%932) /* ty=(Tensor[(13, 6, 12), float32],) */;
  %934 = %933.0;
  %935 = cast(%934, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %936 = cast(%var_1524, dtype="uint8") /* ty=Tensor[(13, 6, 12), uint8] */;
  %937 = shape_of(%934, dtype="int32") /* ty=Tensor[(3), int32] */;
  %938 = cast(%934, dtype="uint8") /* ty=Tensor[(13, 6, 12), uint8] */;
  %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %940 = tan(%935) /* ty=Tensor[(13, 6, 12), float32] */;
  %941 = multiply(%938, %939) /* ty=Tensor[(13, 6, 12), uint8] */;
  %942 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  (%930, %940, %941, %942)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2745(%var_2743: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(8, 13, 12), int8], Tensor[(13, 6, 12), float32]) {
  @func_2742(%var_2743) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(8, 13, 12), int8], Tensor[(13, 6, 12), float32]) */
}

def @func_7626() -> (Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) {
  @func_7624() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) */
}

def @func_8932() -> (Tensor[(12, 14, 1), float32],) {
  @func_8930() /* ty=(Tensor[(12, 14, 1), float32],) */
}

def @func_2219(%var_2218: Tensor[(392), float32]) -> (Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) {
  %17 = fn (%var_2194: Tensor[(392), float32]) -> (Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) {
    %0 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
    %1 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
    %2 = cast(%var_2194, dtype="float32") /* ty=Tensor[(392), float32] */;
    %3 = reshape(%2, newshape=[392]) /* ty=Tensor[(392), float32] */;
    %4 = @func_2124(%3) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(936), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), uint8]) */;
    %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %6 = reshape(%5, newshape=[12, 14, 15]) /* ty=Tensor[(12, 14, 15), float32] */;
    %7 = @func_1715(%6) /* ty=(Tensor[(12, 14, 15), bool],) */;
    %8 = %7.0;
    %9 = cast(%8, dtype="uint32") /* ty=Tensor[(12, 14, 15), uint32] */;
    %10 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(2520), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(2520), float32] */, dtype="uint32") /* ty=Tensor[(2520), uint32] */;
    %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %13 = %0.0;
    %14 = %1.1;
    %15 = %4.1;
    %16 = add(%11, %12) /* ty=Tensor[(2520), uint32] */;
    (%13, %14, %15, %var_2194, %16)
  };
  %17(%var_2218) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */
}

def @func_11183() -> (Tensor[(12, 14, 1), float32], Tensor[(2520), float32]) {
  %21 = fn () -> (Tensor[(12, 14, 1), float32], Tensor[(2520), float32]) {
    %18 = @func_5538() /* ty=(Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) */;
    %19 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
    %20 = %18.4;
    (%19, %20)
  };
  %21() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(2520), float32]) */
}

def @func_1590() -> (Tensor[(12, 14, 1), float32],) {
  @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */
}

def @func_9129(%var_9096: Tensor[(2, 10, 4), float32]) -> Tensor[(2, 10, 4), bool] {
  %22 = cast(%var_9096, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
  %23 = cos(%22) /* ty=Tensor[(2, 10, 4), float32] */;
  %24 = cast(%var_9096, dtype="bool") /* ty=Tensor[(2, 10, 4), bool] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="bool") /* ty=Tensor[(2, 10, 4), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%26, %27) /* ty=Tensor[(2, 10, 4), bool] */
}

def @func_1339() -> Tensor[(12, 14, 1), float32] {
  @func_1337() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_10326() -> Tensor[(3, 8, 1), uint8] {
  @func_10324() /* ty=Tensor[(3, 8, 1), uint8] */
}

def @func_3083() -> Tensor[(12, 14, 1), float32] {
  @func_1611() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_8961() -> (Tensor[(13, 6, 12), float32],) {
  @func_8959() /* ty=(Tensor[(13, 6, 12), float32],) */
}

def @func_3252(%var_3250: Tensor[(2520), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) {
  @func_3249(%var_3250) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) */
}

def @func_8789() -> (Tensor[(12, 14, 1248), uint64],) {
  %30 = fn () -> (Tensor[(12, 14, 1248), uint64],) {
    %28 = @func_3880() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
    %29 = %28.1;
    (%29,)
  };
  %30() /* ty=(Tensor[(12, 14, 1248), uint64],) */
}

def @func_4419(%var_4405: Tensor[(12, 14, 12), float32]) -> (Tensor[(12, 14, 12), bool], Tensor[(13, 6, 12), float32]) {
  %31 = @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %32 = %31.0;
  %33 = cast(%32, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %34 = cast(%var_4405, dtype="bool") /* ty=Tensor[(12, 14, 12), bool] */;
  %35 = not_equal(%33, %34) /* ty=Tensor[(12, 14, 12), bool] */;
  %36 = @func_4242() /* ty=Tensor[(13, 6, 12), float32] */;
  (%35, %36)
}

def @func_5912(%var_5899: Tensor[(12, 14, 7), float32]) -> (Tensor[(12, 14, 7), uint64], Tensor[(8, 13, 12), int8]) {
  %37 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %38 = cast(%37, dtype="uint64") /* ty=Tensor[(12, 14, 1), uint64] */;
  %39 = cast(%var_5899, dtype="uint64") /* ty=Tensor[(12, 14, 7), uint64] */;
  %40 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
  %41 = minimum(%38, %39) /* ty=Tensor[(12, 14, 7), uint64] */;
  %42 = %40.0;
  (%41, %42)
}

def @func_8113(%var_8017: Tensor[(12, 14, 9), float32], %var_8072: Tensor[(12, 14, 11), float32]) -> (Tensor[(12, 14, 9), bool], Tensor[(12, 14, 392), bool], Tensor[(12, 14, 11), uint32], Tensor[(12, 14, 1), float32], Tensor[(168), float32], Tensor[(13, 6, 12), float32]) {
  %43 = @func_4073() /* ty=Tensor[(12, 14, 1), float32] */;
  %44 = cast(%43, dtype="int8") /* ty=Tensor[(12, 14, 1), int8] */;
  %45 = cast(%var_8017, dtype="int8") /* ty=Tensor[(12, 14, 9), int8] */;
  %46 = logical_xor(%44, %45) /* ty=Tensor[(12, 14, 9), int8] */;
  %47 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 14, 9), int8] */, dtype="bool") /* ty=Tensor[(12, 14, 9), bool] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="bool") /* ty=Tensor[(12, 14, 9), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  %52 = cast(%51, dtype="uint32") /* ty=Tensor[(12, 14, 1), uint32] */;
  %53 = cast(%var_8072, dtype="uint32") /* ty=Tensor[(12, 14, 11), uint32] */;
  %54 = @func_5428() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float64], Tensor[(936), float32]) */;
  %55 = @func_3855() /* ty=(Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
  %56 = @func_3321() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %57 = greater_equal(%49, %50) /* ty=Tensor[(12, 14, 9), bool] */;
  %58 = @func_4801() /* ty=Tensor[(12, 14, 392), bool] */;
  %59 = minimum(%52, %53) /* ty=Tensor[(12, 14, 11), uint32] */;
  %60 = %54.3;
  %61 = %55.2;
  %62 = %56.3;
  (%57, %58, %59, %60, %61, %62)
}

def @func_10029() -> (Tensor[(13, 6, 12), float32],) {
  %65 = fn () -> (Tensor[(13, 6, 12), float32],) {
    %63 = @func_7170() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(1440), float64], Tensor[(12, 12, 10), float32]) */;
    %64 = %63.0;
    (%64,)
  };
  %65() /* ty=(Tensor[(13, 6, 12), float32],) */
}

def @func_9595(%var_9594: Tensor[(65856), bool]) -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 392), float32], Tensor[(65856), float64]) {
  %75 = fn (%var_9570: Tensor[(65856), bool]) -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 392), float32], Tensor[(65856), float64]) {
    %66 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
    %67 = @func_3880() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
    %68 = cast(%var_9570, dtype="bool") /* ty=Tensor[(65856), bool] */;
    %69 = reshape(%68, newshape=[12, 14, 392]) /* ty=Tensor[(12, 14, 392), bool] */;
    %70 = cast(%var_9570, dtype="float64") /* ty=Tensor[(65856), float64] */;
    %71 = %66.1;
    %72 = %67.0;
    %73 = @func_8158(%69) /* ty=Tensor[(12, 14, 392), float32] */;
    %74 = acosh(%70) /* ty=Tensor[(65856), float64] */;
    (%71, %72, %73, %74)
  };
  %75(%var_9594) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 392), float32], Tensor[(65856), float64]) */
}

def @func_4379() -> (Tensor[(15, 14, 1), float64],) {
  %76 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 14, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 14, 1), float64] */;
  %77 = erf(%76) /* ty=Tensor[(15, 14, 1), float64] */;
  (%77,)
}

def @func_5214(%var_5212: Tensor[(8, 13, 13), float64], %var_5213: Tensor[(1440), float64]) -> (Tensor[(8, 13, 13), float64], Tensor[(12, 14, 392), int8], Tensor[(12, 12, 10), float64], Tensor[(1440), float64], Tensor[(12, 14, 15), bool], Tensor[(2520), float32], Tensor[(392), float32]) {
  @func_5210(%var_5212, %var_5213) /* ty=(Tensor[(8, 13, 13), float64], Tensor[(12, 14, 392), int8], Tensor[(12, 12, 10), float64], Tensor[(1440), float64], Tensor[(12, 14, 15), bool], Tensor[(2520), float32], Tensor[(392), float32]) */
}

def @func_5809(%var_5807: Tensor[(15, 7, 1), float64]) -> (Tensor[(15, 7, 1), float64],) {
  @func_5806(%var_5807) /* ty=(Tensor[(15, 7, 1), float64],) */
}

def @func_8468() -> Tensor[(12, 14, 1), float32] {
  @func_8466() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_9192() -> Tensor[(12, 14, 1248), float64] {
  %78 = @func_4732() /* ty=Tensor[(12, 14, 1248), uint64] */;
  %79 = cast(%78, dtype="float64") /* ty=Tensor[(12, 14, 1248), float64] */;
  atan(%79) /* ty=Tensor[(12, 14, 1248), float64] */
}

def @func_6097(%var_6095: Tensor[(12, 14, 6), float32]) -> (Tensor[(12, 14, 6), int8], Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32]) {
  @func_6094(%var_6095) /* ty=(Tensor[(12, 14, 6), int8], Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32]) */
}

def @func_3984() -> (Tensor[(12, 14, 1), float32],) {
  %80 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %81 = %80.0;
  (%81,)
}

def @func_6418() -> Tensor[(12, 14, 1), float32] {
  @func_6416() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_8199() -> (Tensor[(13, 6, 12), float32],) {
  @func_8197() /* ty=(Tensor[(13, 6, 12), float32],) */
}

def @func_7465() -> (Tensor[(12, 14, 1), float32], Tensor[(168), float32]) {
  %84 = fn () -> (Tensor[(12, 14, 1), float32], Tensor[(168), float32]) {
    %82 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
    %83 = @func_6804() /* ty=Tensor[(168), float32] */;
    (%82, %83)
  };
  %84() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(168), float32]) */
}

def @func_10346(%var_10344: Tensor[(16, 1, 3), float32]) -> (Tensor[(16, 1, 3), float32],) {
  @func_10343(%var_10344) /* ty=(Tensor[(16, 1, 3), float32],) */
}

def @func_10757() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, ?), float64]) {
  %88 = fn () -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, ?), float64]) {
    %85 = @func_5428() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float64], Tensor[(936), float32]) */;
    %86 = @func_9067() /* ty=Tensor[(12, 14, 1), float32] */;
    %87 = %85.1;
    (%86, %87)
  };
  %88() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, ?), float64]) */
}

def @func_2569() -> (Tensor[(392), float32],) {
  %91 = fn () -> (Tensor[(392), float32],) {
    %89 = @func_2448() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), int64], Tensor[(1456, 144), uint64], Tensor[(392), float32], Tensor[(392), float32]) */;
    %90 = %89.3;
    (%90,)
  };
  %91() /* ty=(Tensor[(392), float32],) */
}

def @func_4518(%var_4516: Tensor[(12, 12, 10), float64], %var_4517: Tensor[(12, 12, 10), float64]) -> (Tensor[(12, 12, 10), float64],) {
  @func_4514(%var_4516, %var_4517) /* ty=(Tensor[(12, 12, 10), float64],) */
}

def @func_2614() -> (Tensor[(12, 14, 1), float32],) {
  %92 = @func_2297() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %93 = %92.2;
  (%93,)
}

def @func_2448() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), int64], Tensor[(1456, 144), uint64], Tensor[(392), float32], Tensor[(392), float32]) {
  %94 = cast(meta[relay.Constant][3] /* ty=Tensor[(1456, 144), uint64] */, dtype="uint64") /* ty=Tensor[(1456, 144), uint64] */;
  %95 = cast(meta[relay.Constant][3] /* ty=Tensor[(1456, 144), uint64] */, dtype="float64") /* ty=Tensor[(1456, 144), float64] */;
  %96 = reshape(%94, newshape=[12, 14, 1248]) /* ty=Tensor[(12, 14, 1248), uint64] */;
  %97 = reshape(%95, newshape=[12, 14, 1248]) /* ty=Tensor[(12, 14, 1248), float64] */;
  %98 = cast(meta[relay.Constant][4] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %99 = reshape(%98, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %100 = @func_2217(%99) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */;
  %101 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %102 = @func_2384(%96, %97) /* ty=Tensor[(12, 14, 1248), int64] */;
  %103 = %100.3;
  (%101, %102, meta[relay.Constant][3] /* ty=Tensor[(1456, 144), uint64] */, %103, meta[relay.Constant][4] /* ty=Tensor[(392), float32] */)
}

def @func_10324() -> Tensor[(3, 8, 1), uint8] {
  %104 = cast(meta[relay.Constant][5] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %105 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 8, 1), uint8] */, dtype="uint8") /* ty=Tensor[(3, 8, 1), uint8] */;
  minimum(%104, %105) /* ty=Tensor[(3, 8, 1), uint8] */
}

def @func_3882() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) {
  @func_3880() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */
}

def @func_11136() -> Tensor[(12, 14, 1), float32] {
  %106 = fn () -> Tensor[(12, 14, 1), float32] {
    @func_9763() /* ty=Tensor[(12, 14, 1), float32] */
  };
  %106() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_5517() -> Tensor[(12, 14, 1), float32] {
  %108 = fn () -> Tensor[(12, 14, 1), float32] {
    %107 = @func_4323() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
    %107.0
  };
  %108() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_6595(%var_6566: Tensor[(5, 12, 6), uint32], %var_6574: Tensor[(209664), uint64]) -> (Tensor[(5, 12, 6), uint32], Tensor[(12, 14, 1248), int64], Tensor[(209664), uint64], Tensor[(5, 12, 6), float32]) {
  %109 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 12, 6), uint32] */, dtype="uint32") /* ty=Tensor[(5, 12, 6), uint32] */;
  %110 = shape_of(%var_6566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%var_6566, dtype="uint32") /* ty=Tensor[(5, 12, 6), uint32] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %113 = cast(%var_6574, dtype="uint64") /* ty=Tensor[(209664), uint64] */;
  %114 = cast(%var_6574, dtype="float64") /* ty=Tensor[(209664), float64] */;
  %115 = reshape(%113, newshape=[12, 14, 1248]) /* ty=Tensor[(12, 14, 1248), uint64] */;
  %116 = reshape(%114, newshape=[12, 14, 1248]) /* ty=Tensor[(12, 14, 1248), float64] */;
  %117 = cast(%var_6566, dtype="float32") /* ty=Tensor[(5, 12, 6), float32] */;
  %118 = logical_xor(%111, %112) /* ty=Tensor[(5, 12, 6), uint32] */;
  %119 = @func_2384(%115, %116) /* ty=Tensor[(12, 14, 1248), int64] */;
  %120 = asinh(%117) /* ty=Tensor[(5, 12, 6), float32] */;
  (%118, %119, %var_6574, %120)
}

def @func_10540() -> (Tensor[(13, 6, 12), float32], Tensor[(7, 5, 13), float32], Tensor[(12, 14, 455), bool], Tensor[(936), float32]) {
  %121 = @func_8197() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
  %123 = reshape(%122, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
  %124 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %125 = %124.0;
  %126 = cast(%125, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %127 = cast(meta[relay.Constant][8] /* ty=Tensor[(455), float32] */, dtype="bool") /* ty=Tensor[(455), bool] */;
  %128 = @func_6615() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(936), float32]) */;
  %129 = %121.0;
  %130 = @func_2532(%123) /* ty=Tensor[(7, 5, 13), float32] */;
  %131 = greater_equal(%126, %127) /* ty=Tensor[(12, 14, 455), bool] */;
  %132 = %128.1;
  (%129, %130, %131, %132)
}

def @func_1979() -> (Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) {
  @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */
}

def @func_3594() -> (Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1248), uint8]) {
  %133 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 56), float32] */, dtype="float32") /* ty=Tensor[(7, 56), float32] */;
  %134 = reshape(%133, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %135 = @func_2124(%134) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(936), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), uint8]) */;
  %136 = @func_3414() /* ty=(Tensor[(8, 6, 2), float64], Tensor[(13, 6, 12), float32]) */;
  %137 = @func_1663() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %138 = %137.0;
  %139 = @func_3463() /* ty=(Tensor[(12, 14, 1248), uint64], Tensor[(392), float32], Tensor[(13, 6, 12), bool]) */;
  %140 = %139.0;
  %141 = cast(%140, dtype="bool") /* ty=Tensor[(12, 14, 1248), bool] */;
  %142 = cast(%138, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %143 = not_equal(%141, %142) /* ty=Tensor[(12, 14, 1248), bool] */;
  %144 = cast(%138, dtype="uint8") /* ty=Tensor[(12, 14, 1), uint8] */;
  %145 = cast(%143, dtype="uint8") /* ty=Tensor[(12, 14, 1248), uint8] */;
  %146 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %147 = %135.3;
  %148 = %136.1;
  %149 = logical_xor(%144, %145) /* ty=Tensor[(12, 14, 1248), uint8] */;
  (%146, %147, meta[relay.Constant][9] /* ty=Tensor[(7, 56), float32] */, %148, %149)
}

def @func_4463(%var_4461: Tensor[(14, 12, 2), float32]) -> (Tensor[(14, 12, 2), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  @func_4460(%var_4461) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */
}

def @func_6753() -> Tensor[(13, 6, 12), float32] {
  %150 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
  %150.0
}

def @func_10828() -> (Tensor[(12, 14, 1), float32], Tensor[(392), float32], Tensor[(2688), float32], Tensor[(12, 14, 1), float32]) {
  @func_10826() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(392), float32], Tensor[(2688), float32], Tensor[(12, 14, 1), float32]) */
}

def @func_1877() -> (Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) {
  %151 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %152 = %151.1;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %154 = reshape(%153, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %155 = @func_1144(%154) /* ty=(Tensor[(13, 6, 12), float32],) */;
  %156 = %155.0;
  (%152, %156)
}

def @func_6110() -> (Tensor[(13, 6, 12), float32],) {
  %157 = @func_3414() /* ty=(Tensor[(8, 6, 2), float64], Tensor[(13, 6, 12), float32]) */;
  %158 = %157.1;
  (%158,)
}

def @func_1758() -> Tensor[(12, 14, 1), float32] {
  @func_1611() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_9764() -> Tensor[(12, 14, 1), float32] {
  %159 = fn () -> Tensor[(12, 14, 1), float32] {
    @func_6416() /* ty=Tensor[(12, 14, 1), float32] */
  };
  %159() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_10675() -> (Tensor[(12, 14, 1248), float64],) {
  %164 = fn () -> (Tensor[(12, 14, 1248), float64],) {
    %160 = @func_3463() /* ty=(Tensor[(12, 14, 1248), uint64], Tensor[(392), float32], Tensor[(13, 6, 12), bool]) */;
    %161 = %160.0;
    %162 = cast(%161, dtype="float64") /* ty=Tensor[(12, 14, 1248), float64] */;
    %163 = exp(%162) /* ty=Tensor[(12, 14, 1248), float64] */;
    (%163,)
  };
  %164() /* ty=(Tensor[(12, 14, 1248), float64],) */
}

def @func_4324() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %167 = fn () -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
    %165 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
    %166 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
    (%165, %166)
  };
  %167() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */
}

def @func_4352() -> (Tensor[(12, 14, 1), float32],) {
  @func_4350() /* ty=(Tensor[(12, 14, 1), float32],) */
}

def @func_3880() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) {
  %168 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
  %169 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %170 = %168.1;
  (%169, %170)
}

def @func_2352() -> (Tensor[(13, 6, 12), float32],) {
  @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */
}

def @func_4299() -> (Tensor[(12, 14, 392), int8],) {
  %177 = fn () -> (Tensor[(12, 14, 392), int8],) {
    %171 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
    %172 = @func_2448() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), int64], Tensor[(1456, 144), uint64], Tensor[(392), float32], Tensor[(392), float32]) */;
    %173 = %172.3;
    %174 = cast(%171, dtype="int8") /* ty=Tensor[(12, 14, 1), int8] */;
    %175 = cast(%173, dtype="int8") /* ty=Tensor[(392), int8] */;
    %176 = minimum(%174, %175) /* ty=Tensor[(12, 14, 392), int8] */;
    (%176,)
  };
  %177() /* ty=(Tensor[(12, 14, 392), int8],) */
}

def @func_5785(%var_5784: Tensor[(12, 14, 16), float32]) -> (Tensor[(12, 14, 16), float64], Tensor[(392), float32]) {
  %185 = fn (%var_5769: Tensor[(12, 14, 16), float32]) -> (Tensor[(12, 14, 16), float64], Tensor[(392), float32]) {
    %178 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %179 = %178.0;
    %180 = cast(%179, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
    %181 = cast(%var_5769, dtype="float64") /* ty=Tensor[(12, 14, 16), float64] */;
    %182 = @func_2568() /* ty=(Tensor[(392), float32],) */;
    %183 = divide(%180, %181) /* ty=Tensor[(12, 14, 16), float64] */;
    %184 = %182.0;
    (%183, %184)
  };
  %185(%var_5784) /* ty=(Tensor[(12, 14, 16), float64], Tensor[(392), float32]) */
}

def @func_3085() -> Tensor[(12, 14, 1), float32] {
  @func_3083() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_9007(%var_9004: Tensor[(4, 13, 9), float32], %var_9005: Tensor[(4, 13, 9), float32], %var_9006: Tensor[(105, 1), float64]) -> (Tensor[(4, 13, 9), int16], Tensor[(1, 7, 15), float64], Tensor[(105, 1), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %199 = fn (%var_8975: Tensor[(4, 13, 9), float32], %var_8978: Tensor[(4, 13, 9), float32], %var_8989: Tensor[(105, 1), float64]) -> (Tensor[(4, 13, 9), int16], Tensor[(1, 7, 15), float64], Tensor[(105, 1), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
    %186 = cast(%var_8975, dtype="float32") /* ty=Tensor[(4, 13, 9), float32] */;
    %187 = sqrt(%186) /* ty=Tensor[(4, 13, 9), float32] */;
    %188 = cast(%var_8978, dtype="int16") /* ty=Tensor[(4, 13, 9), int16] */;
    %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
    %190 = cast(%187, dtype="int16") /* ty=Tensor[(4, 13, 9), int16] */;
    %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %192 = cast(%var_8989, dtype="float64") /* ty=Tensor[(105, 1), float64] */;
    %193 = reshape(%192, newshape=[1, 7, 15]) /* ty=Tensor[(1, 7, 15), float64] */;
    %194 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %195 = bitwise_xor(%190, %191) /* ty=Tensor[(4, 13, 9), int16] */;
    %196 = @func_6697(%193) /* ty=Tensor[(1, 7, 15), float64] */;
    %197 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
    %198 = %194.0;
    (%195, %196, %var_8989, %197, %198)
  };
  %199(%var_9004, %var_9005, %var_9006) /* ty=(Tensor[(4, 13, 9), int16], Tensor[(1, 7, 15), float64], Tensor[(105, 1), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */
}

def @func_2534(%var_2533: Tensor[(7, 5, 13), float32]) -> Tensor[(7, 5, 13), float32] {
  %201 = fn (%var_2524: Tensor[(7, 5, 13), float32]) -> Tensor[(7, 5, 13), float32] {
    %200 = cast(%var_2524, dtype="float32") /* ty=Tensor[(7, 5, 13), float32] */;
    cosh(%200) /* ty=Tensor[(7, 5, 13), float32] */
  };
  %201(%var_2533) /* ty=Tensor[(7, 5, 13), float32] */
}

def @func_5547() -> Tensor[(936), float32] {
  %202 = @func_3781() /* ty=(Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %202.2
}

def @func_6374(%var_6337: Tensor[(6, 28), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(6, 28), float32], Tensor[(8, 13, 13), float64], Tensor[(1352), float64], Tensor[(1440), float64]) {
  %203 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %204 = cast(%var_6337, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %205 = reshape(%204, newshape=[12, 14, 1]) /* ty=Tensor[(12, 14, 1), float32] */;
  %206 = @func_3764(%205) /* ty=(Tensor[(12, 14, ?), float64],) */;
  %207 = cast(meta[relay.Constant][10] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %208 = cast(meta[relay.Constant][11] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %209 = reshape(%207, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float64] */;
  %210 = reshape(%208, newshape=[1440]) /* ty=Tensor[(1440), float64] */;
  %211 = @func_5210(%209, %210) /* ty=(Tensor[(8, 13, 13), float64], Tensor[(12, 14, 392), int8], Tensor[(12, 12, 10), float64], Tensor[(1440), float64], Tensor[(12, 14, 15), bool], Tensor[(2520), float32], Tensor[(392), float32]) */;
  %212 = %203.0;
  %213 = %206.0;
  %214 = %211.0;
  (%212, %213, %var_6337, %214, meta[relay.Constant][10] /* ty=Tensor[(1352), float64] */, meta[relay.Constant][11] /* ty=Tensor[(1440), float64] */)
}

def @func_7227(%var_7225: Tensor[(12, 14, 1), float32]) -> (Tensor[(12, 14, ?), float32],) {
  @func_7224(%var_7225) /* ty=(Tensor[(12, 14, ?), float32],) */
}

def @func_1941(%var_1940: Tensor[(3328), float64]) -> (Tensor[(13, 6, 12), uint16], Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) {
  %227 = fn (%var_1937: Tensor[(3328), float64]) -> (Tensor[(13, 6, 12), uint16], Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) {
    %215 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
    %216 = %215.0;
    %217 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 6, 12), float32] */, dtype="uint16") /* ty=Tensor[(13, 6, 12), uint16] */;
    %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
    %219 = cast(%216, dtype="uint16") /* ty=Tensor[(13, 6, 12), uint16] */;
    %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %221 = cast(%var_1937, dtype="float64") /* ty=Tensor[(3328), float64] */;
    %222 = reshape(%221, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), float64] */;
    %223 = @func_306(%222) /* ty=(Tensor[(16, 13, 16), float64],) */;
    %224 = bitwise_and(%219, %220) /* ty=Tensor[(13, 6, 12), uint16] */;
    %225 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
    %226 = %223.0;
    (%224, %225, %226, %var_1937)
  };
  %227(%var_1940) /* ty=(Tensor[(13, 6, 12), uint16], Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) */
}

def @func_1635(%var_1633: Tensor[(14, 14, 2), float32], %var_1634: Tensor[(36, 26), float32]) -> (Tensor[(14, 14, 2), float32], Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32]) {
  %234 = fn (%var_1621: Tensor[(14, 14, 2), float32], %var_1628: Tensor[(36, 26), float32]) -> (Tensor[(14, 14, 2), float32], Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32]) {
    %228 = cast(%var_1621, dtype="float32") /* ty=Tensor[(14, 14, 2), float32] */;
    %229 = cast(%var_1628, dtype="float32") /* ty=Tensor[(36, 26), float32] */;
    %230 = reshape(%229, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
    %231 = @func_1144(%230) /* ty=(Tensor[(13, 6, 12), float32],) */;
    %232 = asin(%228) /* ty=Tensor[(14, 14, 2), float32] */;
    %233 = %231.0;
    (%232, %233, %var_1628)
  };
  %234(%var_1633, %var_1634) /* ty=(Tensor[(14, 14, 2), float32], Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32]) */
}

def @func_4073() -> Tensor[(12, 14, 1), float32] {
  %235 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %235.0
}

def @func_9068() -> Tensor[(12, 14, 1), float32] {
  %239 = fn () -> Tensor[(12, 14, 1), float32] {
    %236 = @func_2297() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
    %237 = %236.3;
    %238 = cast(%237, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
    acos(%238) /* ty=Tensor[(12, 14, 1), float32] */
  };
  %239() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_2387(%var_2385: Tensor[(12, 14, 1248), uint64], %var_2386: Tensor[(12, 14, 1248), float64]) -> Tensor[(12, 14, 1248), int64] {
  %251 = fn (%var_2373: Tensor[(12, 14, 1248), uint64], %var_2378: Tensor[(12, 14, 1248), float64]) -> Tensor[(12, 14, 1248), int64] {
    %240 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
    %241 = %240.1;
    %242 = cast(%var_2373, dtype="float64") /* ty=Tensor[(12, 14, 1248), float64] */;
    %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
    %244 = cast(%241, dtype="float64") /* ty=Tensor[(12, 14, 1248), float64] */;
    %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %246 = power(%244, %245) /* ty=Tensor[(12, 14, 1248), float64] */;
    %247 = cast(%var_2378, dtype="int64") /* ty=Tensor[(12, 14, 1248), int64] */;
    %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
    %249 = cast(%246, dtype="int64") /* ty=Tensor[(12, 14, 1248), int64] */;
    %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    minimum(%249, %250) /* ty=Tensor[(12, 14, 1248), int64] */
  };
  %251(%var_2385, %var_2386) /* ty=Tensor[(12, 14, 1248), int64] */
}

def @func_9340() -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(15, 2, 15), float32]) {
  %258 = fn () -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(15, 2, 15), float32]) {
    %252 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
    %253 = @func_8674() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %254 = @func_7947() /* ty=(Tensor[(15, 2, 15), float32], Tensor[(12, 14, 1), float32]) */;
    %255 = %252.1;
    %256 = %253.0;
    %257 = %254.0;
    (%255, %256, %257)
  };
  %258() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(15, 2, 15), float32]) */
}

def @func_2127(%var_2125: Tensor[(392), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(936), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), uint8]) {
  @func_2124(%var_2125) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(936), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), uint8]) */
}

def @func_5915(%var_5913: Tensor[(12, 14, 7), float32]) -> (Tensor[(12, 14, 7), uint64], Tensor[(8, 13, 12), int8]) {
  @func_5912(%var_5913) /* ty=(Tensor[(12, 14, 7), uint64], Tensor[(8, 13, 12), int8]) */
}

def @func_6177() -> (Tensor[(12, 14, 392), int8], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) {
  %265 = fn () -> (Tensor[(12, 14, 392), int8], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) {
    %259 = @func_4298() /* ty=(Tensor[(12, 14, 392), int8],) */;
    %260 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
    %261 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %262 = %259.0;
    %263 = %260.0;
    %264 = %261.0;
    (%262, %263, %264)
  };
  %265() /* ty=(Tensor[(12, 14, 392), int8], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) */
}

def @func_2953(%var_2951: Tensor[(3328), float64], %var_2952: Tensor[(2, 468), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(392), float32], Tensor[(12, 14, 1248), bool], Tensor[(2520), uint32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1248), float64], Tensor[(13, 6, 12), float32], Tensor[(2, 468), float32]) {
  %291 = fn (%var_2937: Tensor[(3328), float64], %var_2947: Tensor[(2, 468), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(392), float32], Tensor[(12, 14, 1248), bool], Tensor[(2520), uint32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1248), float64], Tensor[(13, 6, 12), float32], Tensor[(2, 468), float32]) {
    %266 = cast(meta[relay.Constant][13] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
    %267 = reshape(%266, newshape=[392]) /* ty=Tensor[(392), float32] */;
    %268 = @func_2217(%267) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */;
    %269 = %268.1;
    %270 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
    %271 = cast(%269, dtype="bool") /* ty=Tensor[(12, 14, 1248), bool] */;
    %272 = cast(%270, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
    %273 = cast(meta[relay.Constant][13] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
    %274 = reshape(%273, newshape=[392]) /* ty=Tensor[(392), float32] */;
    %275 = @func_2217(%274) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */;
    %276 = cast(%var_2937, dtype="float64") /* ty=Tensor[(3328), float64] */;
    %277 = reshape(%276, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), float64] */;
    %278 = @func_306(%277) /* ty=(Tensor[(16, 13, 16), float64],) */;
    %279 = cast(%269, dtype="float64") /* ty=Tensor[(12, 14, 1248), float64] */;
    %280 = cast(meta[relay.Constant][13] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
    %281 = cast(%var_2947, dtype="float32") /* ty=Tensor[(2, 468), float32] */;
    %282 = reshape(%280, newshape=[14, 14, 2]) /* ty=Tensor[(14, 14, 2), float32] */;
    %283 = reshape(%281, newshape=[36, 26]) /* ty=Tensor[(36, 26), float32] */;
    %284 = @func_1632(%282, %283) /* ty=(Tensor[(14, 14, 2), float32], Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32]) */;
    %285 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
    %286 = less(%271, %272) /* ty=Tensor[(12, 14, 1248), bool] */;
    %287 = %275.4;
    %288 = %278.0;
    %289 = sqrt(%279) /* ty=Tensor[(12, 14, 1248), float64] */;
    %290 = %284.1;
    (%285, meta[relay.Constant][13] /* ty=Tensor[(392), float32] */, %286, %287, %288, %var_2937, %289, %290, %var_2947)
  };
  %291(%var_2951, %var_2952) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(392), float32], Tensor[(12, 14, 1248), bool], Tensor[(2520), uint32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1248), float64], Tensor[(13, 6, 12), float32], Tensor[(2, 468), float32]) */
}

def @func_10135() -> (Tensor[(392), float32],) {
  %294 = fn () -> (Tensor[(392), float32],) {
    %292 = @func_6154() /* ty=(Tensor[(392), float32],) */;
    %293 = %292.0;
    (%293,)
  };
  %294() /* ty=(Tensor[(392), float32],) */
}

def @func_9266() -> (Tensor[(936), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %295 = @func_6615() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(936), float32]) */;
  %296 = @func_8674() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %297 = @func_5428() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float64], Tensor[(936), float32]) */;
  %298 = %295.1;
  %299 = %296.0;
  %300 = %297.2;
  (%298, %299, %300)
}

def @func_7916(%var_7915: Tensor[(10, 16, 7), float64]) -> (Tensor[(10, 16, 7), float64], Tensor[(12, 14, 1), float32]) {
  %304 = fn (%var_7898: Tensor[(10, 16, 7), float64]) -> (Tensor[(10, 16, 7), float64], Tensor[(12, 14, 1), float32]) {
    %301 = cast(%var_7898, dtype="float64") /* ty=Tensor[(10, 16, 7), float64] */;
    %302 = sin(%301) /* ty=Tensor[(10, 16, 7), float64] */;
    %303 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
    (%302, %303)
  };
  %304(%var_7915) /* ty=(Tensor[(10, 16, 7), float64], Tensor[(12, 14, 1), float32]) */
}

def @func_3767(%var_3765: Tensor[(12, 14, 1), float32]) -> (Tensor[(12, 14, ?), float64],) {
  @func_3764(%var_3765) /* ty=(Tensor[(12, 14, ?), float64],) */
}

def @func_6616() -> (Tensor[(12, 14, 1), float32], Tensor[(936), float32]) {
  %309 = fn () -> (Tensor[(12, 14, 1), float32], Tensor[(936), float32]) {
    %305 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %306 = @func_3625() /* ty=(Tensor[(12, 14, 15), float64], Tensor[(936), float32]) */;
    %307 = %305.0;
    %308 = %306.1;
    (%307, %308)
  };
  %309() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(936), float32]) */
}

def @func_4961() -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), int64]) {
  @func_4959() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), int64]) */
}

def @func_3933(%var_3931: Tensor[(936), float32], %var_3932: Tensor[(392), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32], Tensor[(13, 6, 12), float32], Tensor[(392), float32]) {
  %321 = fn (%var_3915: Tensor[(936), float32], %var_3920: Tensor[(392), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32], Tensor[(13, 6, 12), float32], Tensor[(392), float32]) {
    %310 = cast(%var_3915, dtype="float32") /* ty=Tensor[(936), float32] */;
    %311 = reshape(%310, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
    %312 = @func_2742(%311) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(8, 13, 12), int8], Tensor[(13, 6, 12), float32]) */;
    %313 = cast(%var_3920, dtype="float32") /* ty=Tensor[(392), float32] */;
    %314 = cast(%var_3915, dtype="float32") /* ty=Tensor[(936), float32] */;
    %315 = reshape(%313, newshape=[14, 14, 2]) /* ty=Tensor[(14, 14, 2), float32] */;
    %316 = reshape(%314, newshape=[36, 26]) /* ty=Tensor[(36, 26), float32] */;
    %317 = @func_1632(%315, %316) /* ty=(Tensor[(14, 14, 2), float32], Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32]) */;
    %318 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
    %319 = %312.0;
    %320 = %317.1;
    (%318, %319, %var_3915, %320, %var_3920)
  };
  %321(%var_3931, %var_3932) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32], Tensor[(13, 6, 12), float32], Tensor[(392), float32]) */
}

def @func_9953(%var_9951: Tensor[(3328), float64], %var_9952: Tensor[(936), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(2520), uint32], Tensor[(936), float32], Tensor[(12, 14, 336), bool], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 3328), uint64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  @func_9949(%var_9951, %var_9952) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(2520), uint32], Tensor[(936), float32], Tensor[(12, 14, 336), bool], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 3328), uint64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */
}

def @func_2124(%var_2095: Tensor[(392), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(936), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), uint8]) {
  %322 = cast(%var_2095, dtype="float32") /* ty=Tensor[(392), float32] */;
  %323 = cast(meta[relay.Constant][14] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %324 = reshape(%322, newshape=[14, 14, 2]) /* ty=Tensor[(14, 14, 2), float32] */;
  %325 = reshape(%323, newshape=[36, 26]) /* ty=Tensor[(36, 26), float32] */;
  %326 = @func_1632(%324, %325) /* ty=(Tensor[(14, 14, 2), float32], Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32]) */;
  %327 = cast(meta[relay.Constant][15] /* ty=Tensor[(3328), float64] */, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %328 = reshape(%327, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), float64] */;
  %329 = @func_306(%328) /* ty=(Tensor[(16, 13, 16), float64],) */;
  %330 = cast(meta[relay.Constant][14] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %331 = reshape(%330, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %332 = @func_1556(%331) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), uint8], Tensor[(12, 14, 1), float32]) */;
  %333 = @func_1611() /* ty=Tensor[(12, 14, 1), float32] */;
  %334 = %326.2;
  %335 = %329.0;
  %336 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %337 = %332.2;
  (%333, %334, %var_2095, meta[relay.Constant][14] /* ty=Tensor[(936), float32] */, %335, meta[relay.Constant][15] /* ty=Tensor[(3328), float64] */, %336, %337)
}

def @func_3856() -> (Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) {
  %348 = fn () -> (Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) {
    %338 = @func_2568() /* ty=(Tensor[(392), float32],) */;
    %339 = cast(meta[relay.Constant][16] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %340 = reshape(%339, newshape=[12, 14, 1]) /* ty=Tensor[(12, 14, 1), float32] */;
    %341 = @func_3764(%340) /* ty=(Tensor[(12, 14, ?), float64],) */;
    %342 = @func_1663() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %343 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
    %344 = %338.0;
    %345 = %341.0;
    %346 = %342.0;
    %347 = %343.1;
    (%344, %345, meta[relay.Constant][16] /* ty=Tensor[(168), float32] */, %346, %347)
  };
  %348() /* ty=(Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */
}

def @func_4460(%var_4424: Tensor[(14, 12, 2), float32]) -> (Tensor[(14, 12, 2), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %349 = cast(%var_4424, dtype="float32") /* ty=Tensor[(14, 12, 2), float32] */;
  %350 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %351 = @func_1663() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %352 = log2(%349) /* ty=Tensor[(14, 12, 2), float32] */;
  %353 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %354 = %350.0;
  %355 = %351.0;
  (%352, %353, %354, %355)
}

def @func_10460() -> Tensor[(15, 14, 1), float64] {
  @func_10458() /* ty=Tensor[(15, 14, 1), float64] */
}

def @func_10542() -> (Tensor[(13, 6, 12), float32], Tensor[(7, 5, 13), float32], Tensor[(12, 14, 455), bool], Tensor[(936), float32]) {
  @func_10540() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(7, 5, 13), float32], Tensor[(12, 14, 455), bool], Tensor[(936), float32]) */
}

def @func_10375() -> (Tensor[(12, 14, 1248), uint64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  %362 = fn () -> (Tensor[(12, 14, 1248), uint64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
    %356 = @func_8788() /* ty=(Tensor[(12, 14, 1248), uint64],) */;
    %357 = cast(meta[relay.Constant][17] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
    %358 = reshape(%357, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
    %359 = @func_1556(%358) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), uint8], Tensor[(12, 14, 1), float32]) */;
    %360 = %356.0;
    %361 = %359.1;
    (%360, %361, meta[relay.Constant][17] /* ty=Tensor[(936), float32] */)
  };
  %362() /* ty=(Tensor[(12, 14, 1248), uint64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */
}

def @func_11208() -> (Tensor[(15, 14, 1), float64],) {
  %363 = @func_10458() /* ty=Tensor[(15, 14, 1), float64] */;
  (%363,)
}

def @func_11124() -> (Tensor[(12, 14, 1248), uint64],) {
  %366 = fn () -> (Tensor[(12, 14, 1248), uint64],) {
    %364 = @func_8788() /* ty=(Tensor[(12, 14, 1248), uint64],) */;
    %365 = %364.0;
    (%365,)
  };
  %366() /* ty=(Tensor[(12, 14, 1248), uint64],) */
}

def @func_5549() -> Tensor[(936), float32] {
  @func_5547() /* ty=Tensor[(936), float32] */
}

def @func_8968() -> (Tensor[(16, 4, 7), float32],) {
  %369 = fn () -> (Tensor[(16, 4, 7), float32],) {
    %367 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 4, 7), float32] */, dtype="float32") /* ty=Tensor[(16, 4, 7), float32] */;
    %368 = tan(%367) /* ty=Tensor[(16, 4, 7), float32] */;
    (%368,)
  };
  %369() /* ty=(Tensor[(16, 4, 7), float32],) */
}

def @func_4075() -> Tensor[(12, 14, 1), float32] {
  @func_4073() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_1664() -> (Tensor[(12, 14, 1), float32],) {
  %371 = fn () -> (Tensor[(12, 14, 1), float32],) {
    %370 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
    (%370,)
  };
  %371() /* ty=(Tensor[(12, 14, 1), float32],) */
}

def @func_4733() -> Tensor[(12, 14, 1248), uint64] {
  %373 = fn () -> Tensor[(12, 14, 1248), uint64] {
    %372 = @func_3855() /* ty=(Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
    %372.4
  };
  %373() /* ty=Tensor[(12, 14, 1248), uint64] */
}

def @func_3323() -> (Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  @func_3321() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */
}

def @func_6796() -> Tensor[(12, 14, 1), float32] {
  @func_6794() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_3596() -> (Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1248), uint8]) {
  @func_3594() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1248), uint8]) */
}

def @func_1588() -> (Tensor[(12, 14, 1), float32],) {
  %374 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %375 = %374.0;
  (%375,)
}

def @func_11096(%var_11095: Tensor[(630, 4), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(630, 4), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64], Tensor[(12, 14, 392), bool]) {
  %389 = fn (%var_11068: Tensor[(630, 4), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(630, 4), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64], Tensor[(12, 14, 392), bool]) {
    %376 = cast(%var_11068, dtype="float32") /* ty=Tensor[(630, 4), float32] */;
    %377 = reshape(%376, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
    %378 = @func_3249(%377) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) */;
    %379 = @func_8788() /* ty=(Tensor[(12, 14, 1248), uint64],) */;
    %380 = @func_2448() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), int64], Tensor[(1456, 144), uint64], Tensor[(392), float32], Tensor[(392), float32]) */;
    %381 = %380.3;
    %382 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
    %383 = cast(%381, dtype="bool") /* ty=Tensor[(392), bool] */;
    %384 = cast(%382, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
    %385 = %378.0;
    %386 = @func_6278() /* ty=Tensor[(12, 14, 1), float32] */;
    %387 = %379.0;
    %388 = logical_or(%383, %384) /* ty=Tensor[(12, 14, 392), bool] */;
    (%385, %var_11068, %386, %387, %388)
  };
  %389(%var_11095) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(630, 4), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64], Tensor[(12, 14, 392), bool]) */
}

def @func_11309() -> Tensor[(2520), float32] {
  @func_11307() /* ty=Tensor[(2520), float32] */
}

def @func_5731() -> (Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) {
  @func_5729() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) */
}

def @func_1146(%var_1145: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), float32],) {
  %392 = fn (%var_1135: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), float32],) {
    %390 = cast(%var_1135, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
    %391 = atanh(%390) /* ty=Tensor[(13, 6, 12), float32] */;
    (%391,)
  };
  %392(%var_1145) /* ty=(Tensor[(13, 6, 12), float32],) */
}

def @func_3986() -> (Tensor[(12, 14, 1), float32],) {
  @func_3984() /* ty=(Tensor[(12, 14, 1), float32],) */
}

def @func_9995(%var_9978: Tensor[(6, 10, 8), float64]) -> Tensor[(6, 10, 8), float64] {
  %393 = cast(%var_9978, dtype="float64") /* ty=Tensor[(6, 10, 8), float64] */;
  atan(%393) /* ty=Tensor[(6, 10, 8), float64] */
}

def @func_3062() -> (Tensor[(12, 14, 1), float32],) {
  %395 = fn () -> (Tensor[(12, 14, 1), float32],) {
    %394 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
    (%394,)
  };
  %395() /* ty=(Tensor[(12, 14, 1), float32],) */
}

def @func_6112() -> (Tensor[(13, 6, 12), float32],) {
  @func_6110() /* ty=(Tensor[(13, 6, 12), float32],) */
}

def @func_5429() -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float64], Tensor[(936), float32]) {
  %414 = fn () -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float64], Tensor[(936), float32]) {
    %396 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
    %397 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
    %398 = cast(%397, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
    %399 = reshape(%398, newshape=[12, 14, 1]) /* ty=Tensor[(12, 14, 1), float32] */;
    %400 = @func_3764(%399) /* ty=(Tensor[(12, 14, ?), float64],) */;
    %401 = @func_4323() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
    %402 = cast(%397, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
    %403 = tan(%402) /* ty=Tensor[(12, 14, 1), float32] */;
    %404 = cast(%403, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
    %405 = acosh(%404) /* ty=Tensor[(12, 14, 1), float64] */;
    %406 = cast(%405, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
    %407 = @func_3781() /* ty=(Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
    %408 = %396.0;
    %409 = %400.0;
    %410 = @func_1611() /* ty=Tensor[(12, 14, 1), float32] */;
    %411 = %401.0;
    %412 = atan(%406) /* ty=Tensor[(12, 14, 1), float64] */;
    %413 = %407.2;
    (%408, %409, %410, %411, %412, %413)
  };
  %414() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float64], Tensor[(936), float32]) */
}

def @func_7860(%var_7859: Tensor[(209664), uint64]) -> (Tensor[(12, 14, 1), float32], Tensor[(360), uint32], Tensor[(209664), uint64], Tensor[(12, 14, 1248), float64]) {
  %425 = fn (%var_7852: Tensor[(209664), uint64]) -> (Tensor[(12, 14, 1), float32], Tensor[(360), uint32], Tensor[(209664), uint64], Tensor[(12, 14, 1248), float64]) {
    %415 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %416 = cast(meta[relay.Constant][19] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %417 = cast(%var_7852, dtype="uint64") /* ty=Tensor[(209664), uint64] */;
    %418 = reshape(%416, newshape=[5, 12, 6]) /* ty=Tensor[(5, 12, 6), uint32] */;
    %419 = reshape(%417, newshape=[209664]) /* ty=Tensor[(209664), uint64] */;
    %420 = @func_6595(%418, %419) /* ty=(Tensor[(5, 12, 6), uint32], Tensor[(12, 14, 1248), int64], Tensor[(209664), uint64], Tensor[(5, 12, 6), float32]) */;
    %421 = %420.1;
    %422 = cast(%421, dtype="float64") /* ty=Tensor[(12, 14, 1248), float64] */;
    %423 = %415.0;
    %424 = atanh(%422) /* ty=Tensor[(12, 14, 1248), float64] */;
    (%423, meta[relay.Constant][19] /* ty=Tensor[(360), uint32] */, %var_7852, %424)
  };
  %425(%var_7859) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(360), uint32], Tensor[(209664), uint64], Tensor[(12, 14, 1248), float64]) */
}

def @func_10106(%var_10105: Tensor[(8, 2, 1), float32]) -> (Tensor[(8, 2, ?), float64], Tensor[(13, 6, 12), float32]) {
  %437 = fn (%var_10073: Tensor[(8, 2, 1), float32]) -> (Tensor[(8, 2, ?), float64], Tensor[(13, 6, 12), float32]) {
    %426 = cast(%var_10073, dtype="float32") /* ty=Tensor[(8, 2, 1), float32] */;
    %427 = sqrt(%426) /* ty=Tensor[(8, 2, 1), float32] */;
    %428 = cast(%427, dtype="float32") /* ty=Tensor[(8, 2, 1), float32] */;
    %429 = rsqrt(%428) /* ty=Tensor[(8, 2, 1), float32] */;
    %430 = cast(%429, dtype="float64") /* ty=Tensor[(8, 2, 1), float64] */;
    %431 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
    %432 = cast(%427, dtype="float64") /* ty=Tensor[(8, 2, 1), float64] */;
    %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %434 = @func_3781() /* ty=(Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
    %435 = power(%432, %433) /* ty=Tensor[(8, 2, ?), float64] */;
    %436 = %434.1;
    (%435, %436)
  };
  %437(%var_10105) /* ty=(Tensor[(8, 2, ?), float64], Tensor[(13, 6, 12), float32]) */
}

def @func_10458() -> Tensor[(15, 14, 1), float64] {
  %438 = @func_4379() /* ty=(Tensor[(15, 14, 1), float64],) */;
  %439 = %438.0;
  %440 = cast(%439, dtype="float64") /* ty=Tensor[(15, 14, 1), float64] */;
  atanh(%440) /* ty=Tensor[(15, 14, 1), float64] */
}

def @func_3182(%var_3129: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), bool], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(8, 13, 12), int8], Tensor[(392), float32]) {
  %441 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %442 = %441.0;
  %443 = cast(%var_3129, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%442, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %447 = cast(%var_3129, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %448 = cast(meta[relay.Constant][20] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %449 = reshape(%448, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %450 = @func_2217(%449) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */;
  %451 = less_equal(%445, %446) /* ty=Tensor[(13, 6, 12), bool] */;
  %452 = log2(%447) /* ty=Tensor[(13, 6, 12), float32] */;
  %453 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %454 = %450.0;
  (%451, %452, %453, %454, meta[relay.Constant][20] /* ty=Tensor[(392), float32] */)
}

def @func_8158(%var_8147: Tensor[(12, 14, 392), bool]) -> Tensor[(12, 14, 392), float32] {
  %455 = @func_4801() /* ty=Tensor[(12, 14, 392), bool] */;
  %456 = cast(%var_8147, dtype="float32") /* ty=Tensor[(12, 14, 392), float32] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%455, dtype="float32") /* ty=Tensor[(12, 14, 392), float32] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%458, %459) /* ty=Tensor[(12, 14, 392), float32] */
}

def @func_2616() -> (Tensor[(12, 14, 1), float32],) {
  @func_2614() /* ty=(Tensor[(12, 14, 1), float32],) */
}

def @func_6794() -> Tensor[(12, 14, 1), float32] {
  %460 = @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %460.0
}

def @func_3712(%var_3710: Tensor[(12, 14, 12), float32]) -> Tensor[(12, 14, 12), float64] {
  @func_3709(%var_3710) /* ty=Tensor[(12, 14, 12), float64] */
}

def @func_10826() -> (Tensor[(12, 14, 1), float32], Tensor[(392), float32], Tensor[(2688), float32], Tensor[(12, 14, 1), float32]) {
  %461 = @func_7464() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(168), float32]) */;
  %462 = cast(meta[relay.Constant][21] /* ty=Tensor[(2688), float32] */, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %463 = reshape(%462, newshape=[12, 14, 16]) /* ty=Tensor[(12, 14, 16), float32] */;
  %464 = @func_5783(%463) /* ty=(Tensor[(12, 14, 16), float64], Tensor[(392), float32]) */;
  %465 = @func_8930() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %466 = %461.0;
  %467 = %464.1;
  %468 = %465.0;
  (%466, %467, meta[relay.Constant][21] /* ty=Tensor[(2688), float32] */, %468)
}

def @func_8425() -> (Tensor[(15, 2, 15), float32],) {
  %473 = fn () -> (Tensor[(15, 2, 15), float32],) {
    %469 = @func_7947() /* ty=(Tensor[(15, 2, 15), float32], Tensor[(12, 14, 1), float32]) */;
    %470 = %469.0;
    %471 = cast(%470, dtype="float32") /* ty=Tensor[(15, 2, 15), float32] */;
    %472 = asinh(%471) /* ty=Tensor[(15, 2, 15), float32] */;
    (%472,)
  };
  %473() /* ty=(Tensor[(15, 2, 15), float32],) */
}

def @func_10852() -> Tensor[(3, 8, 1), uint8] {
  %474 = fn () -> Tensor[(3, 8, 1), uint8] {
    @func_10324() /* ty=Tensor[(3, 8, 1), uint8] */
  };
  %474() /* ty=Tensor[(3, 8, 1), uint8] */
}

def @func_4350() -> (Tensor[(12, 14, 1), float32],) {
  %475 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  (%475,)
}

def @func_5656(%var_5655: Tensor[(7, 56), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(7, 56), float32]) {
  %487 = fn (%var_5611: Tensor[(7, 56), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(7, 56), float32]) {
    %476 = @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %477 = @func_3781() /* ty=(Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
    %478 = %477.0;
    %479 = cast(%var_5611, dtype="float32") /* ty=Tensor[(7, 56), float32] */;
    %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(2), int32] */;
    %481 = cast(%478, dtype="float32") /* ty=Tensor[(7, 56), float32] */;
    %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %483 = floor_divide(%481, %482) /* ty=Tensor[(7, 56), float32] */;
    %484 = cast(%483, dtype="float32") /* ty=Tensor[(7, 56), float32] */;
    %485 = %476.0;
    %486 = log2(%484) /* ty=Tensor[(7, 56), float32] */;
    (%485, %486)
  };
  %487(%var_5655) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(7, 56), float32]) */
}

def @func_2836() -> (Tensor[(12, 14, 1), float32],) {
  %490 = fn () -> (Tensor[(12, 14, 1), float32],) {
    %488 = @func_2297() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
    %489 = %488.0;
    (%489,)
  };
  %490() /* ty=(Tensor[(12, 14, 1), float32],) */
}

def @func_11554(%var_11553: Tensor[(12, 14, 5), float32]) -> (Tensor[(12, 14, 5), int32],) {
  %496 = fn (%var_11541: Tensor[(12, 14, 5), float32]) -> (Tensor[(12, 14, 5), int32],) {
    %491 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %492 = %491.0;
    %493 = cast(%492, dtype="int32") /* ty=Tensor[(12, 14, 1), int32] */;
    %494 = cast(%var_11541, dtype="int32") /* ty=Tensor[(12, 14, 5), int32] */;
    %495 = subtract(%493, %494) /* ty=Tensor[(12, 14, 5), int32] */;
    (%495,)
  };
  %496(%var_11553) /* ty=(Tensor[(12, 14, 5), int32],) */
}

def @func_1558(%var_1557: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), uint8], Tensor[(12, 14, 1), float32]) {
  %511 = fn (%var_1524: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), uint8], Tensor[(12, 14, 1), float32]) {
    %497 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
    %498 = %497.1;
    %499 = cast(%498, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
    %500 = reshape(%499, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
    %501 = @func_1144(%500) /* ty=(Tensor[(13, 6, 12), float32],) */;
    %502 = %501.0;
    %503 = cast(%502, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
    %504 = cast(%var_1524, dtype="uint8") /* ty=Tensor[(13, 6, 12), uint8] */;
    %505 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
    %506 = cast(%502, dtype="uint8") /* ty=Tensor[(13, 6, 12), uint8] */;
    %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %508 = tan(%503) /* ty=Tensor[(13, 6, 12), float32] */;
    %509 = multiply(%506, %507) /* ty=Tensor[(13, 6, 12), uint8] */;
    %510 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
    (%498, %508, %509, %510)
  };
  %511(%var_1557) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), uint8], Tensor[(12, 14, 1), float32]) */
}

def @func_3709(%var_3695: Tensor[(12, 14, 12), float32]) -> Tensor[(12, 14, 12), float64] {
  %512 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %513 = cast(%512, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %514 = cast(%var_3695, dtype="bool") /* ty=Tensor[(12, 14, 12), bool] */;
  %515 = equal(%513, %514) /* ty=Tensor[(12, 14, 12), bool] */;
  %516 = cast(%515, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
  cosh(%516) /* ty=Tensor[(12, 14, 12), float64] */
}

def @func_1337() -> Tensor[(12, 14, 1), float32] {
  %517 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
  sqrt(%517) /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_2742(%var_2678: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(8, 13, 12), int8], Tensor[(13, 6, 12), float32]) {
  %518 = @func_2485() /* ty=Tensor[(13, 6, 12), float32] */;
  %519 = cast(%var_2678, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%518, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %523 = cast(meta[relay.Constant][23] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %524 = reshape(%523, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %525 = @func_2217(%524) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */;
  %526 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %527 = %525.2;
  %528 = cast(%527, dtype="float32") /* ty=Tensor[(36, 26), float32] */;
  %529 = reshape(%528, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %530 = @func_1144(%529) /* ty=(Tensor[(13, 6, 12), float32],) */;
  %531 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
  %532 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
  %533 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %534 = floor_mod(%521, %522) /* ty=Tensor[(13, 6, 12), float32] */;
  %535 = %526.0;
  %536 = %530.0;
  %537 = %531.1;
  %538 = %532.0;
  %539 = %533.0;
  (%534, %527, meta[relay.Constant][23] /* ty=Tensor[(392), float32] */, %535, %536, %537, %538, %539)
}

def @func_6231(%var_6230: Tensor[(15, 10, 1), float64]) -> Tensor[(15, 10, 1), float64] {
  %541 = fn (%var_6217: Tensor[(15, 10, 1), float64]) -> Tensor[(15, 10, 1), float64] {
    %540 = cast(%var_6217, dtype="float64") /* ty=Tensor[(15, 10, 1), float64] */;
    tan(%540) /* ty=Tensor[(15, 10, 1), float64] */
  };
  %541(%var_6230) /* ty=Tensor[(15, 10, 1), float64] */
}

def @func_8530() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32]) {
  @func_8528() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32]) */
}

def @func_5112(%var_5110: Tensor[(13, 6, 12), float32], %var_5111: Tensor[(2520), float32]) -> (Tensor[(13, 6, 12), bool], Tensor[(12, 14, 15), bool], Tensor[(2520), float32], Tensor[(13, 6, 12), float32], Tensor[(936, 1), float32], Tensor[(12, 14, 1248), uint64]) {
  %557 = fn (%var_5066: Tensor[(13, 6, 12), float32], %var_5074: Tensor[(2520), float32]) -> (Tensor[(13, 6, 12), bool], Tensor[(12, 14, 15), bool], Tensor[(2520), float32], Tensor[(13, 6, 12), float32], Tensor[(936, 1), float32], Tensor[(12, 14, 1248), uint64]) {
    %542 = @func_2485() /* ty=Tensor[(13, 6, 12), float32] */;
    %543 = cast(%var_5066, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
    %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(%542, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %547 = cast(%var_5074, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %548 = reshape(%547, newshape=[12, 14, 15]) /* ty=Tensor[(12, 14, 15), float32] */;
    %549 = @func_1715(%548) /* ty=(Tensor[(12, 14, 15), bool],) */;
    %550 = @func_3965() /* ty=(Tensor[(936, 1), float32], Tensor[(12, 14, 392), bool]) */;
    %551 = @func_3463() /* ty=(Tensor[(12, 14, 1248), uint64], Tensor[(392), float32], Tensor[(13, 6, 12), bool]) */;
    %552 = logical_or(%545, %546) /* ty=Tensor[(13, 6, 12), bool] */;
    %553 = %549.0;
    %554 = @func_2485() /* ty=Tensor[(13, 6, 12), float32] */;
    %555 = %550.0;
    %556 = %551.0;
    (%552, %553, %var_5074, %554, %555, %556)
  };
  %557(%var_5110, %var_5111) /* ty=(Tensor[(13, 6, 12), bool], Tensor[(12, 14, 15), bool], Tensor[(2520), float32], Tensor[(13, 6, 12), float32], Tensor[(936, 1), float32], Tensor[(12, 14, 1248), uint64]) */
}

def @func_5539() -> (Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) {
  %567 = fn () -> (Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) {
    %558 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
    %559 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
    %560 = cast(meta[relay.Constant][24] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %561 = reshape(%560, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
    %562 = @func_3249(%561) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) */;
    %563 = @func_4345() /* ty=Tensor[(16, 13, 16), float64] */;
    %564 = %558.0;
    %565 = %559.0;
    %566 = %562.1;
    (%563, %564, %565, %566, meta[relay.Constant][24] /* ty=Tensor[(2520), float32] */)
  };
  %567() /* ty=(Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) */
}

def @func_9194() -> Tensor[(12, 14, 1248), float64] {
  @func_9192() /* ty=Tensor[(12, 14, 1248), float64] */
}

def @func_6805() -> Tensor[(168), float32] {
  %569 = fn () -> Tensor[(168), float32] {
    %568 = @func_3855() /* ty=(Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
    %568.2
  };
  %569() /* ty=Tensor[(168), float32] */
}

def @func_7573() -> (Tensor[(936), float32], Tensor[(1248), int8], Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) {
  @func_7571() /* ty=(Tensor[(936), float32], Tensor[(1248), int8], Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) */
}

def @func_8437() -> Tensor[(12, 14, 1), float32] {
  @func_4073() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_3321() -> (Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  %570 = @func_2614() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %571 = cast(meta[relay.Constant][25] /* ty=Tensor[(3328), float64] */, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %572 = reshape(%571, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), float64] */;
  %573 = @func_306(%572) /* ty=(Tensor[(16, 13, 16), float64],) */;
  %574 = cast(meta[relay.Constant][26] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %575 = reshape(%574, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %576 = @func_1144(%575) /* ty=(Tensor[(13, 6, 12), float32],) */;
  %577 = %570.0;
  %578 = %573.0;
  %579 = %576.0;
  (%577, %578, meta[relay.Constant][25] /* ty=Tensor[(3328), float64] */, %579, meta[relay.Constant][26] /* ty=Tensor[(936), float32] */)
}

def @func_5729() -> (Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) {
  %580 = cast(meta[relay.Constant][27] /* ty=Tensor[(3328), float64] */, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %581 = reshape(%580, newshape=[3328]) /* ty=Tensor[(3328), float64] */;
  %582 = @func_1939(%581) /* ty=(Tensor[(13, 6, 12), uint16], Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) */;
  %583 = @func_3083() /* ty=Tensor[(12, 14, 1), float32] */;
  %584 = %582.2;
  (%583, %584, meta[relay.Constant][27] /* ty=Tensor[(3328), float64] */)
}

def @func_2450() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), int64], Tensor[(1456, 144), uint64], Tensor[(392), float32], Tensor[(392), float32]) {
  @func_2448() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), int64], Tensor[(1456, 144), uint64], Tensor[(392), float32], Tensor[(392), float32]) */
}

def @func_8466() -> Tensor[(12, 14, 1), float32] {
  %585 = @func_3321() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %585.0
}

def @func_8197() -> (Tensor[(13, 6, 12), float32],) {
  %586 = @func_3414() /* ty=(Tensor[(8, 6, 2), float64], Tensor[(13, 6, 12), float32]) */;
  %587 = %586.1;
  (%587,)
}

def @func_1611() -> Tensor[(12, 14, 1), float32] {
  %588 = @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %588.0
}

def @func_7571() -> (Tensor[(936), float32], Tensor[(1248), int8], Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) {
  %589 = cast(meta[relay.Constant][28] /* ty=Tensor[(1248), int8] */, dtype="int8") /* ty=Tensor[(1248), int8] */;
  %590 = reshape(%589, newshape=[1248]) /* ty=Tensor[(1248), int8] */;
  %591 = @func_6490(%590) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(936), float32], Tensor[(1248), int8]) */;
  %592 = @func_5729() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) */;
  %593 = @func_3463() /* ty=(Tensor[(12, 14, 1248), uint64], Tensor[(392), float32], Tensor[(13, 6, 12), bool]) */;
  %594 = %593.2;
  %595 = cast(%594, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %596 = %591.1;
  %597 = %592.1;
  %598 = log(%595) /* ty=Tensor[(13, 6, 12), float32] */;
  %599 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  (%596, meta[relay.Constant][28] /* ty=Tensor[(1248), int8] */, %597, %598, %599)
}

def @func_7797() -> (Tensor[(13, 6, 12), float32],) {
  %602 = fn () -> (Tensor[(13, 6, 12), float32],) {
    %600 = @func_3594() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1248), uint8]) */;
    %601 = %600.3;
    (%601,)
  };
  %602() /* ty=(Tensor[(13, 6, 12), float32],) */
}

def @func_8959() -> (Tensor[(13, 6, 12), float32],) {
  %603 = @func_3414() /* ty=(Tensor[(8, 6, 2), float64], Tensor[(13, 6, 12), float32]) */;
  %604 = %603.1;
  (%604,)
}

def @func_8930() -> (Tensor[(12, 14, 1), float32],) {
  %605 = @func_7947() /* ty=(Tensor[(15, 2, 15), float32], Tensor[(12, 14, 1), float32]) */;
  %606 = %605.1;
  (%606,)
}

def @func_6094(%var_6066: Tensor[(12, 14, 6), float32]) -> (Tensor[(12, 14, 6), int8], Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32]) {
  %607 = @func_2614() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %608 = %607.0;
  %609 = cast(%608, dtype="int8") /* ty=Tensor[(12, 14, 1), int8] */;
  %610 = cast(%var_6066, dtype="int8") /* ty=Tensor[(12, 14, 6), int8] */;
  %611 = @func_1977() /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) */;
  %612 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %613 = bitwise_xor(%609, %610) /* ty=Tensor[(12, 14, 6), int8] */;
  %614 = %611.0;
  %615 = %612.0;
  (%613, %614, %615)
}

def @func_8660(%var_8659: Tensor[(1512), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 9), bool], Tensor[(1512), float32], Tensor[(1848), float32], Tensor[(3328), float64], Tensor[(12, 14, ?), float32]) {
  %630 = fn (%var_8637: Tensor[(1512), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 9), bool], Tensor[(1512), float32], Tensor[(1848), float32], Tensor[(3328), float64], Tensor[(12, 14, ?), float32]) {
    %616 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %617 = cast(%var_8637, dtype="float32") /* ty=Tensor[(1512), float32] */;
    %618 = cast(meta[relay.Constant][29] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
    %619 = reshape(%617, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), float32] */;
    %620 = reshape(%618, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float32] */;
    %621 = @func_8113(%619, %620) /* ty=(Tensor[(12, 14, 9), bool], Tensor[(12, 14, 392), bool], Tensor[(12, 14, 11), uint32], Tensor[(12, 14, 1), float32], Tensor[(168), float32], Tensor[(13, 6, 12), float32]) */;
    %622 = @func_7624() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) */;
    %623 = %616.0;
    %624 = cast(%623, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
    %625 = reshape(%624, newshape=[12, 14, 1]) /* ty=Tensor[(12, 14, 1), float32] */;
    %626 = @func_7224(%625) /* ty=(Tensor[(12, 14, ?), float32],) */;
    %627 = %621.0;
    %628 = %622.2;
    %629 = %626.0;
    (%623, %627, %var_8637, meta[relay.Constant][29] /* ty=Tensor[(1848), float32] */, %628, %629)
  };
  %630(%var_8659) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 9), bool], Tensor[(1512), float32], Tensor[(1848), float32], Tensor[(3328), float64], Tensor[(12, 14, ?), float32]) */
}

def @func_8528() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32]) {
  %631 = @func_6248() /* ty=Tensor[(12, 14, 1), float32] */;
  %632 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
  %633 = @func_2485() /* ty=Tensor[(13, 6, 12), float32] */;
  (%631, %632, %633)
}

def @func_9132(%var_9130: Tensor[(2, 10, 4), float32]) -> Tensor[(2, 10, 4), bool] {
  @func_9129(%var_9130) /* ty=Tensor[(2, 10, 4), bool] */
}

def @func_9949(%var_9888: Tensor[(3328), float64], %var_9889: Tensor[(936), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(2520), uint32], Tensor[(936), float32], Tensor[(12, 14, 336), bool], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 3328), uint64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %634 = @func_3061() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %635 = cast(%var_9888, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %636 = cast(%var_9889, dtype="float32") /* ty=Tensor[(936), float32] */;
  %637 = reshape(%635, newshape=[3328]) /* ty=Tensor[(3328), float64] */;
  %638 = reshape(%636, newshape=[2, 468]) /* ty=Tensor[(2, 468), float32] */;
  %639 = @func_2950(%637, %638) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(392), float32], Tensor[(12, 14, 1248), bool], Tensor[(2520), uint32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(12, 14, 1248), float64], Tensor[(13, 6, 12), float32], Tensor[(2, 468), float32]) */;
  %640 = cast(meta[relay.Constant][30] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %641 = reshape(%640, newshape=[14, 12, 2]) /* ty=Tensor[(14, 12, 2), float32] */;
  %642 = @func_4460(%641) /* ty=(Tensor[(14, 12, 2), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %643 = %642.1;
  %644 = cast(meta[relay.Constant][30] /* ty=Tensor[(336), float32] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %645 = cast(%643, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %646 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %647 = @func_8930() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %648 = %647.0;
  %649 = cast(%var_9888, dtype="uint64") /* ty=Tensor[(3328), uint64] */;
  %650 = cast(%648, dtype="uint64") /* ty=Tensor[(12, 14, 1), uint64] */;
  %651 = %634.0;
  %652 = %639.3;
  %653 = greater_equal(%644, %645) /* ty=Tensor[(12, 14, 336), bool] */;
  %654 = %646.0;
  %655 = multiply(%649, %650) /* ty=Tensor[(12, 14, 3328), uint64] */;
  %656 = @func_8437() /* ty=Tensor[(12, 14, 1), float32] */;
  %657 = @func_5516() /* ty=Tensor[(12, 14, 1), float32] */;
  (%651, %652, %var_9889, %653, %654, %655, %656, %657)
}

def @func_4157(%var_4143: Tensor[(12, 14, 8), float32]) -> (Tensor[(12, 14, 8), bool], Tensor[(12, 14, 1), float32]) {
  %658 = @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %659 = %658.0;
  %660 = cast(%659, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %661 = cast(%var_4143, dtype="bool") /* ty=Tensor[(12, 14, 8), bool] */;
  %662 = @func_3984() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %663 = not_equal(%660, %661) /* ty=Tensor[(12, 14, 8), bool] */;
  %664 = %662.0;
  (%663, %664)
}

def @func_3626() -> (Tensor[(12, 14, 15), float64], Tensor[(936), float32]) {
  %671 = fn () -> (Tensor[(12, 14, 15), float64], Tensor[(936), float32]) {
    %665 = @func_2297() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
    %666 = %665.1;
    %667 = cast(%666, dtype="float64") /* ty=Tensor[(12, 14, 15), float64] */;
    %668 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
    %669 = sigmoid(%667) /* ty=Tensor[(12, 14, 15), float64] */;
    %670 = %668.2;
    (%669, %670)
  };
  %671() /* ty=(Tensor[(12, 14, 15), float64], Tensor[(936), float32]) */
}

def @func_7947() -> (Tensor[(15, 2, 15), float32], Tensor[(12, 14, 1), float32]) {
  %672 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 15), float32] */;
  %673 = @func_4323() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %674 = asin(%672) /* ty=Tensor[(15, 2, 15), float32] */;
  %675 = %673.0;
  (%674, %675)
}

def @func_1581() -> Tensor[(12, 14, 1), float32] {
  %677 = fn () -> Tensor[(12, 14, 1), float32] {
    %676 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
    %676.0
  };
  %677() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_4345() -> Tensor[(16, 13, 16), float64] {
  %678 = @func_3321() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %678.1
}

def @func_2790() -> (Tensor[(12, 14, 1), float32],) {
  %680 = fn () -> (Tensor[(12, 14, 1), float32],) {
    %679 = @func_1611() /* ty=Tensor[(12, 14, 1), float32] */;
    (%679,)
  };
  %680() /* ty=(Tensor[(12, 14, 1), float32],) */
}

def @func_5806(%var_5801: Tensor[(15, 7, 1), float64]) -> (Tensor[(15, 7, 1), float64],) {
  %681 = cast(%var_5801, dtype="float64") /* ty=Tensor[(15, 7, 1), float64] */;
  %682 = log2(%681) /* ty=Tensor[(15, 7, 1), float64] */;
  (%682,)
}

def @func_6377(%var_6375: Tensor[(6, 28), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(6, 28), float32], Tensor[(8, 13, 13), float64], Tensor[(1352), float64], Tensor[(1440), float64]) {
  @func_6374(%var_6375) /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), float64], Tensor[(6, 28), float32], Tensor[(8, 13, 13), float64], Tensor[(1352), float64], Tensor[(1440), float64]) */
}

def @func_4244() -> Tensor[(13, 6, 12), float32] {
  @func_4242() /* ty=Tensor[(13, 6, 12), float32] */
}

def @func_10489() -> (Tensor[(392), float32], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float64]) {
  %691 = fn () -> (Tensor[(392), float32], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float64]) {
    %683 = @func_6154() /* ty=(Tensor[(392), float32],) */;
    %684 = @func_4323() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
    %685 = @func_7134() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
    %686 = %685.1;
    %687 = cast(%686, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
    %688 = %683.0;
    %689 = %684.1;
    %690 = erf(%687) /* ty=Tensor[(13, 6, 12), float64] */;
    (%688, %689, %690)
  };
  %691() /* ty=(Tensor[(392), float32], Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float64]) */
}

def @func_8117(%var_8115: Tensor[(12, 14, 9), float32], %var_8116: Tensor[(12, 14, 11), float32]) -> (Tensor[(12, 14, 9), bool], Tensor[(12, 14, 392), bool], Tensor[(12, 14, 11), uint32], Tensor[(12, 14, 1), float32], Tensor[(168), float32], Tensor[(13, 6, 12), float32]) {
  @func_8113(%var_8115, %var_8116) /* ty=(Tensor[(12, 14, 9), bool], Tensor[(12, 14, 392), bool], Tensor[(12, 14, 11), uint32], Tensor[(12, 14, 1), float32], Tensor[(168), float32], Tensor[(13, 6, 12), float32]) */
}

def @func_7224(%var_7211: Tensor[(12, 14, 1), float32]) -> (Tensor[(12, 14, ?), float32],) {
  %692 = @func_6278() /* ty=Tensor[(12, 14, 1), float32] */;
  %693 = cast(%var_7211, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
  %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%692, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %697 = floor_divide(%695, %696) /* ty=Tensor[(12, 14, ?), float32] */;
  (%697,)
}

def @func_10588() -> (Tensor[(936), float32],) {
  %700 = fn () -> (Tensor[(936), float32],) {
    %698 = @func_9266() /* ty=(Tensor[(936), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
    %699 = %698.0;
    (%699,)
  };
  %700() /* ty=(Tensor[(936), float32],) */
}

def @func_8299(%var_8297: Tensor[(4, 252), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(8, 13, 12), int8], Tensor[(4, 252), float32]) {
  @func_8296(%var_8297) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(8, 13, 12), int8], Tensor[(4, 252), float32]) */
}

def @func_10739() -> (Tensor[(13, 6, 12), float32],) {
  %703 = fn () -> (Tensor[(13, 6, 12), float32],) {
    %701 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
    %702 = %701.1;
    (%702,)
  };
  %703() /* ty=(Tensor[(13, 6, 12), float32],) */
}

def @func_11041() -> (Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 12, 10), float64], Tensor[(1440), float64]) {
  %713 = fn () -> (Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 12, 10), float64], Tensor[(1440), float64]) {
    %704 = @func_10028() /* ty=(Tensor[(13, 6, 12), float32],) */;
    %705 = cast(meta[relay.Constant][32] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
    %706 = cast(meta[relay.Constant][32] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
    %707 = reshape(%705, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
    %708 = reshape(%706, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
    %709 = @func_4514(%707, %708) /* ty=(Tensor[(12, 12, 10), float64],) */;
    %710 = @func_8466() /* ty=Tensor[(12, 14, 1), float32] */;
    %711 = %704.0;
    %712 = %709.0;
    (%710, %711, %712, meta[relay.Constant][32] /* ty=Tensor[(1440), float64] */)
  };
  %713() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 12, 10), float64], Tensor[(1440), float64]) */
}

def @func_7170() -> (Tensor[(13, 6, 12), float32], Tensor[(1440), float64], Tensor[(12, 12, 10), float32]) {
  %714 = @func_6176() /* ty=(Tensor[(12, 14, 392), int8], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) */;
  %715 = cast(meta[relay.Constant][33] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %716 = cast(meta[relay.Constant][33] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %717 = reshape(%715, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %718 = reshape(%716, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %719 = @func_4514(%717, %718) /* ty=(Tensor[(12, 12, 10), float64],) */;
  %720 = %719.0;
  %721 = cast(%720, dtype="float32") /* ty=Tensor[(12, 12, 10), float32] */;
  %722 = %714.1;
  %723 = log(%721) /* ty=Tensor[(12, 12, 10), float32] */;
  (%722, meta[relay.Constant][33] /* ty=Tensor[(1440), float64] */, %723)
}

def @func_3967() -> (Tensor[(936, 1), float32], Tensor[(12, 14, 392), bool]) {
  @func_3965() /* ty=(Tensor[(936, 1), float32], Tensor[(12, 14, 392), bool]) */
}

def @func_3465() -> (Tensor[(12, 14, 1248), uint64], Tensor[(392), float32], Tensor[(13, 6, 12), bool]) {
  @func_3463() /* ty=(Tensor[(12, 14, 1248), uint64], Tensor[(392), float32], Tensor[(13, 6, 12), bool]) */
}

def @func_11307() -> Tensor[(2520), float32] {
  %724 = @func_11182() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(2520), float32]) */;
  %724.1
}

def @func_2393() -> (Tensor[(13, 6, 12), float32],) {
  %727 = fn () -> (Tensor[(13, 6, 12), float32],) {
    %725 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
    %726 = %725.1;
    (%726,)
  };
  %727() /* ty=(Tensor[(13, 6, 12), float32],) */
}

def @func_3657() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %732 = fn () -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
    %728 = @func_1588() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %729 = @func_1663() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %730 = %728.0;
    %731 = %729.0;
    (%730, %731)
  };
  %732() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */
}

def @func_1977() -> (Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64]) {
  %733 = cast(meta[relay.Constant][34] /* ty=Tensor[(1248), int8] */, dtype="int8") /* ty=Tensor[(1248), int8] */;
  %734 = reshape(%733, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), int8] */;
  %735 = @func_1795(%734) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(936), float32]) */;
  %736 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  %737 = cast(%736, dtype="uint64") /* ty=Tensor[(12, 14, 1), uint64] */;
  %738 = cast(meta[relay.Constant][34] /* ty=Tensor[(1248), int8] */, dtype="uint64") /* ty=Tensor[(1248), uint64] */;
  %739 = %735.0;
  %740 = maximum(%737, %738) /* ty=Tensor[(12, 14, 1248), uint64] */;
  (%739, %740)
}

def @func_6249() -> Tensor[(12, 14, 1), float32] {
  %741 = fn () -> Tensor[(12, 14, 1), float32] {
    @func_6015() /* ty=Tensor[(12, 14, 1), float32] */
  };
  %741() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_9998(%var_9996: Tensor[(6, 10, 8), float64]) -> Tensor[(6, 10, 8), float64] {
  @func_9995(%var_9996) /* ty=Tensor[(6, 10, 8), float64] */
}

def @func_6017() -> Tensor[(12, 14, 1), float32] {
  @func_6015() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_7135() -> (Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) {
  %746 = fn () -> (Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) {
    %742 = @func_4959() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), int64]) */;
    %743 = %742.0;
    %744 = @func_4242() /* ty=Tensor[(13, 6, 12), float32] */;
    %745 = @func_4242() /* ty=Tensor[(13, 6, 12), float32] */;
    (%743, %744, %745)
  };
  %746() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */
}

def @func_9268() -> (Tensor[(936), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  @func_9266() /* ty=(Tensor[(936), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */
}

def @func_9413(%var_9386: Tensor[(16, 13, 16), float64]) -> (Tensor[(16, 13, 16), uint8],) {
  %747 = @func_7571() /* ty=(Tensor[(936), float32], Tensor[(1248), int8], Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) */;
  %748 = %747.2;
  %749 = cast(%var_9386, dtype="uint8") /* ty=Tensor[(16, 13, 16), uint8] */;
  %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%748, dtype="uint8") /* ty=Tensor[(16, 13, 16), uint8] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %753 = bitwise_xor(%751, %752) /* ty=Tensor[(16, 13, 16), uint8] */;
  (%753,)
}

def @func_4846(%var_4845: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), int16], Tensor[(7, 5, 13), float32], Tensor[(455), float32]) {
  %764 = fn (%var_4814: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), int16], Tensor[(7, 5, 13), float32], Tensor[(455), float32]) {
    %754 = @func_3781() /* ty=(Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
    %755 = %754.1;
    %756 = cast(%var_4814, dtype="int16") /* ty=Tensor[(13, 6, 12), int16] */;
    %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
    %758 = cast(%755, dtype="int16") /* ty=Tensor[(13, 6, 12), int16] */;
    %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %760 = cast(meta[relay.Constant][35] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
    %761 = reshape(%760, newshape=[7, 5, 13]) /* ty=Tensor[(7, 5, 13), float32] */;
    %762 = subtract(%758, %759) /* ty=Tensor[(13, 6, 12), int16] */;
    %763 = @func_2532(%761) /* ty=Tensor[(7, 5, 13), float32] */;
    (%762, %763, meta[relay.Constant][35] /* ty=Tensor[(455), float32] */)
  };
  %764(%var_4845) /* ty=(Tensor[(13, 6, 12), int16], Tensor[(7, 5, 13), float32], Tensor[(455), float32]) */
}

def @func_9529() -> (Tensor[(12, 14, 1), float32], Tensor[(1248), int8], Tensor[(1248), int8]) {
  %771 = fn () -> (Tensor[(12, 14, 1), float32], Tensor[(1248), int8], Tensor[(1248), int8]) {
    %765 = @func_8930() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %766 = cast(meta[relay.Constant][36] /* ty=Tensor[(1248), int8] */, dtype="int8") /* ty=Tensor[(1248), int8] */;
    %767 = reshape(%766, newshape=[1248]) /* ty=Tensor[(1248), int8] */;
    %768 = @func_6490(%767) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(936), float32], Tensor[(1248), int8]) */;
    %769 = %765.0;
    %770 = %768.2;
    (%769, %770, meta[relay.Constant][36] /* ty=Tensor[(1248), int8] */)
  };
  %771() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(1248), int8], Tensor[(1248), int8]) */
}

def @func_6279() -> Tensor[(12, 14, 1), float32] {
  %773 = fn () -> Tensor[(12, 14, 1), float32] {
    %772 = @func_4350() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %772.0
  };
  %773() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_10343(%var_10340: Tensor[(16, 1, 3), float32]) -> (Tensor[(16, 1, 3), float32],) {
  %774 = cast(%var_10340, dtype="float32") /* ty=Tensor[(16, 1, 3), float32] */;
  %775 = acosh(%774) /* ty=Tensor[(16, 1, 3), float32] */;
  (%775,)
}

def @func_2350() -> (Tensor[(13, 6, 12), float32],) {
  %776 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
  %777 = %776.1;
  (%777,)
}

def @func_6700(%var_6698: Tensor[(1, 7, 15), float64]) -> Tensor[(1, 7, 15), float64] {
  @func_6697(%var_6698) /* ty=Tensor[(1, 7, 15), float64] */
}

def @func_6526(%var_6524: Tensor[(60, 24), float64]) -> (Tensor[(12, 14, 1), float32], Tensor[(12, 12, 10), float64], Tensor[(60, 24), float64]) {
  @func_6523(%var_6524) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 12, 10), float64], Tensor[(60, 24), float64]) */
}

def @func_1430() -> (Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  %778 = cast(meta[relay.Constant][37] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %779 = reshape(%778, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %780 = @func_1144(%779) /* ty=(Tensor[(13, 6, 12), float32],) */;
  %781 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %782 = %780.0;
  (%781, %782, meta[relay.Constant][37] /* ty=Tensor[(936), float32] */)
}

def @func_4160(%var_4158: Tensor[(12, 14, 8), float32]) -> (Tensor[(12, 14, 8), bool], Tensor[(12, 14, 1), float32]) {
  @func_4157(%var_4158) /* ty=(Tensor[(12, 14, 8), bool], Tensor[(12, 14, 1), float32]) */
}

def @func_1760() -> Tensor[(12, 14, 1), float32] {
  @func_1758() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_1879() -> (Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) {
  @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */
}

def @func_6697(%var_6671: Tensor[(1, 7, 15), float64]) -> Tensor[(1, 7, 15), float64] {
  %783 = cast(%var_6671, dtype="float64") /* ty=Tensor[(1, 7, 15), float64] */;
  log10(%783) /* ty=Tensor[(1, 7, 15), float64] */
}

def @func_4422(%var_4420: Tensor[(12, 14, 12), float32]) -> (Tensor[(12, 14, 12), bool], Tensor[(13, 6, 12), float32]) {
  @func_4419(%var_4420) /* ty=(Tensor[(12, 14, 12), bool], Tensor[(13, 6, 12), float32]) */
}

def @func_308(%var_307: Tensor[(16, 13, 16), float64]) -> (Tensor[(16, 13, 16), float64],) {
  %786 = fn (%var_293: Tensor[(16, 13, 16), float64]) -> (Tensor[(16, 13, 16), float64],) {
    %784 = cast(%var_293, dtype="float64") /* ty=Tensor[(16, 13, 16), float64] */;
    %785 = sigmoid(%784) /* ty=Tensor[(16, 13, 16), float64] */;
    (%785,)
  };
  %786(%var_307) /* ty=(Tensor[(16, 13, 16), float64],) */
}

def @func_8296(%var_8290: Tensor[(4, 252), float32]) -> (Tensor[(12, 14, 1), float32], Tensor[(8, 13, 12), int8], Tensor[(4, 252), float32]) {
  %787 = cast(%var_8290, dtype="float32") /* ty=Tensor[(4, 252), float32] */;
  %788 = reshape(%787, newshape=[12, 14, 6]) /* ty=Tensor[(12, 14, 6), float32] */;
  %789 = @func_6094(%788) /* ty=(Tensor[(12, 14, 6), int8], Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32]) */;
  %790 = @func_6248() /* ty=Tensor[(12, 14, 1), float32] */;
  %791 = %789.1;
  (%790, %791, %var_8290)
}

def @func_4381() -> (Tensor[(15, 14, 1), float64],) {
  @func_4379() /* ty=(Tensor[(15, 14, 1), float64],) */
}

def @func_3463() -> (Tensor[(12, 14, 1248), uint64], Tensor[(392), float32], Tensor[(13, 6, 12), bool]) {
  %792 = cast(meta[relay.Constant][38] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %793 = reshape(%792, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %794 = @func_2217(%793) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1248), uint64], Tensor[(36, 26), float32], Tensor[(392), float32], Tensor[(2520), uint32]) */;
  %795 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %796 = %795.0;
  %797 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 6, 12), float32] */, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %798 = shape_of(%796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %799 = cast(%796, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %801 = %794.1;
  %802 = less(%799, %800) /* ty=Tensor[(13, 6, 12), bool] */;
  (%801, meta[relay.Constant][38] /* ty=Tensor[(392), float32] */, %802)
}

def @func_4959() -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, ?), int64]) {
  %803 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %804 = @func_1611() /* ty=Tensor[(12, 14, 1), float32] */;
  %805 = @func_3656() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
  %806 = %805.1;
  %807 = cast(%806, dtype="int64") /* ty=Tensor[(12, 14, 1), int64] */;
  %808 = shape_of(%804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %809 = cast(%804, dtype="int64") /* ty=Tensor[(12, 14, 1), int64] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %811 = %803.0;
  %812 = right_shift(%809, %810) /* ty=Tensor[(12, 14, ?), int64] */;
  (%811, %812)
}

def @func_8439() -> Tensor[(12, 14, 1), float32] {
  @func_8437() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_3965() -> (Tensor[(936, 1), float32], Tensor[(12, 14, 392), bool]) {
  %813 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %814 = %813.0;
  %815 = cast(meta[relay.Constant][40] /* ty=Tensor[(936, 1), float32] */, dtype="float32") /* ty=Tensor[(936, 1), float32] */;
  %816 = reshape(%815, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %817 = @func_3182(%816) /* ty=(Tensor[(13, 6, 12), bool], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(8, 13, 12), int8], Tensor[(392), float32]) */;
  %818 = %817.4;
  %819 = cast(%814, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
  %820 = cast(%818, dtype="bool") /* ty=Tensor[(392), bool] */;
  %821 = logical_and(%819, %820) /* ty=Tensor[(12, 14, 392), bool] */;
  (meta[relay.Constant][40] /* ty=Tensor[(936, 1), float32] */, %821)
}

def @func_6015() -> Tensor[(12, 14, 1), float32] {
  %822 = @func_3984() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %822.0
}

def @func_9416(%var_9414: Tensor[(16, 13, 16), float64]) -> (Tensor[(16, 13, 16), uint8],) {
  @func_9413(%var_9414) /* ty=(Tensor[(16, 13, 16), uint8],) */
}

def @func_3764(%var_3758: Tensor[(12, 14, 1), float32]) -> (Tensor[(12, 14, ?), float64],) {
  %823 = @func_3061() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %824 = %823.0;
  %825 = cast(%var_3758, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
  %826 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(%824, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %829 = power(%827, %828) /* ty=Tensor[(12, 14, ?), float64] */;
  (%829,)
}

def @func_11151() -> (Tensor[(3, 8, 1), uint8],) {
  %831 = fn () -> (Tensor[(3, 8, 1), uint8],) {
    %830 = @func_10851() /* ty=Tensor[(3, 8, 1), uint8] */;
    (%830,)
  };
  %831() /* ty=(Tensor[(3, 8, 1), uint8],) */
}

def @func_6492(%var_6491: Tensor[(1248), int8]) -> (Tensor[(10, 7, 16), float32], Tensor[(936), float32], Tensor[(1248), int8]) {
  %847 = fn (%var_6486: Tensor[(1248), int8]) -> (Tensor[(10, 7, 16), float32], Tensor[(936), float32], Tensor[(1248), int8]) {
    %832 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
    %833 = sin(%832) /* ty=Tensor[(10, 7, 16), float64] */;
    %834 = cast(%833, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
    %835 = tan(%834) /* ty=Tensor[(10, 7, 16), float64] */;
    %836 = cast(%833, dtype="uint32") /* ty=Tensor[(10, 7, 16), uint32] */;
    %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
    %838 = cast(%835, dtype="uint32") /* ty=Tensor[(10, 7, 16), uint32] */;
    %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %840 = right_shift(%838, %839) /* ty=Tensor[(10, 7, 16), uint32] */;
    %841 = cast(%840, dtype="float32") /* ty=Tensor[(10, 7, 16), float32] */;
    %842 = cast(%var_6486, dtype="int8") /* ty=Tensor[(1248), int8] */;
    %843 = reshape(%842, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), int8] */;
    %844 = @func_1795(%843) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(936), float32]) */;
    %845 = asinh(%841) /* ty=Tensor[(10, 7, 16), float32] */;
    %846 = %844.3;
    (%845, %846, %var_6486)
  };
  %847(%var_6491) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(936), float32], Tensor[(1248), int8]) */
}

def @func_4514(%var_4499: Tensor[(12, 12, 10), float64], %var_4500: Tensor[(12, 12, 10), float64]) -> (Tensor[(12, 12, 10), float64],) {
  %848 = cast(%var_4500, dtype="float64") /* ty=Tensor[(12, 12, 10), float64] */;
  %849 = shape_of(%var_4499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%var_4499, dtype="float64") /* ty=Tensor[(12, 12, 10), float64] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %852 = floor_divide(%850, %851) /* ty=Tensor[(12, 12, 10), float64] */;
  (%852,)
}

def @func_4347() -> Tensor[(16, 13, 16), float64] {
  @func_4345() /* ty=Tensor[(16, 13, 16), float64] */
}

def @func_5210(%var_5138: Tensor[(8, 13, 13), float64], %var_5176: Tensor[(1440), float64]) -> (Tensor[(8, 13, 13), float64], Tensor[(12, 14, 392), int8], Tensor[(12, 12, 10), float64], Tensor[(1440), float64], Tensor[(12, 14, 15), bool], Tensor[(2520), float32], Tensor[(392), float32]) {
  %853 = cast(%var_5138, dtype="float64") /* ty=Tensor[(8, 13, 13), float64] */;
  %854 = @func_4298() /* ty=(Tensor[(12, 14, 392), int8],) */;
  %855 = cast(%var_5176, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %856 = cast(%var_5176, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %857 = reshape(%855, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %858 = reshape(%856, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %859 = @func_4514(%857, %858) /* ty=(Tensor[(12, 12, 10), float64],) */;
  %860 = cast(meta[relay.Constant][42] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %861 = reshape(%860, newshape=[12, 14, 15]) /* ty=Tensor[(12, 14, 15), float32] */;
  %862 = @func_1715(%861) /* ty=(Tensor[(12, 14, 15), bool],) */;
  %863 = @func_3855() /* ty=(Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
  %864 = exp(%853) /* ty=Tensor[(8, 13, 13), float64] */;
  %865 = %854.0;
  %866 = %859.0;
  %867 = %862.0;
  %868 = %863.0;
  (%864, %865, %866, %var_5176, %867, meta[relay.Constant][42] /* ty=Tensor[(2520), float32] */, %868)
}

def @func_3782() -> (Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  %875 = fn () -> (Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
    %869 = @func_3594() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1248), uint8]) */;
    %870 = cast(meta[relay.Constant][43] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
    %871 = reshape(%870, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
    %872 = @func_1144(%871) /* ty=(Tensor[(13, 6, 12), float32],) */;
    %873 = %869.2;
    %874 = %872.0;
    (%873, %874, meta[relay.Constant][43] /* ty=Tensor[(936), float32] */)
  };
  %875() /* ty=(Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */
}

def @func_10968(%var_10967: Tensor[(105), float64]) -> (Tensor[(12, 14, 1), float32], Tensor[(15, 7, 1), float64], Tensor[(105), float64]) {
  %882 = fn (%var_10963: Tensor[(105), float64]) -> (Tensor[(12, 14, 1), float32], Tensor[(15, 7, 1), float64], Tensor[(105), float64]) {
    %876 = @func_8393() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %877 = cast(%var_10963, dtype="float64") /* ty=Tensor[(105), float64] */;
    %878 = reshape(%877, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float64] */;
    %879 = @func_5806(%878) /* ty=(Tensor[(15, 7, 1), float64],) */;
    %880 = %876.0;
    %881 = %879.0;
    (%880, %881, %var_10963)
  };
  %882(%var_10967) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(15, 7, 1), float64], Tensor[(105), float64]) */
}

def @func_8161(%var_8159: Tensor[(12, 14, 392), bool]) -> Tensor[(12, 14, 392), float32] {
  @func_8158(%var_8159) /* ty=Tensor[(12, 14, 392), float32] */
}

def @func_4242() -> Tensor[(13, 6, 12), float32] {
  %883 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %883.0
}

def @func_7172() -> (Tensor[(13, 6, 12), float32], Tensor[(1440), float64], Tensor[(12, 12, 10), float32]) {
  @func_7170() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(1440), float64], Tensor[(12, 12, 10), float32]) */
}

def @func_2299() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  @func_2297() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */
}

def @func_1432() -> (Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */
}

def @main() -> Tensor[(12, 14, 392), float64] {
  %884 = @func_4299() /* ty=(Tensor[(12, 14, 392), int8],) */;
  %885 = %884.0;
  %886 = cast(%885, dtype="float32") /* ty=Tensor[(12, 14, 392), float32] */;
  %887 = acos(%886) /* ty=Tensor[(12, 14, 392), float32] */;
  %888 = cast(%887, dtype="float64") /* ty=Tensor[(12, 14, 392), float64] */;
  cosh(%888) /* ty=Tensor[(12, 14, 392), float64] */
}

def @func_2486() -> Tensor[(13, 6, 12), float32] {
  %890 = fn () -> Tensor[(13, 6, 12), float32] {
    %889 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
    %889.0
  };
  %890() /* ty=Tensor[(13, 6, 12), float32] */
}

def @func_7089(%var_7086: Tensor[(9, 15, 14), uint64], %var_7087: Tensor[(9, 15, 14), uint64], %var_7088: Tensor[(392), float32]) -> (Tensor[(9, 15, 14), bool], Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(392), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(168), float32], Tensor[(9, 15, 14), float64]) {
  %913 = fn (%var_7012: Tensor[(9, 15, 14), uint64], %var_7013: Tensor[(9, 15, 14), uint64], %var_7036: Tensor[(392), float32]) -> (Tensor[(9, 15, 14), bool], Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(392), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(168), float32], Tensor[(9, 15, 14), float64]) {
    %891 = cast(%var_7013, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
    %892 = shape_of(%var_7012, dtype="int32") /* ty=Tensor[(3), int32] */;
    %893 = cast(%var_7012, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
    %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %895 = greater_equal(%893, %894) /* ty=Tensor[(9, 15, 14), bool] */;
    %896 = cast(meta[relay.Constant][44] /* ty=Tensor[(9, 15, 14), bool] */, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
    %897 = shape_of(%895, dtype="int32") /* ty=Tensor[(3), int32] */;
    %898 = cast(%895, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
    %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %900 = cast(meta[relay.Constant][45] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
    %901 = cast(%var_7036, dtype="float32") /* ty=Tensor[(392), float32] */;
    %902 = reshape(%900, newshape=[936]) /* ty=Tensor[(936), float32] */;
    %903 = reshape(%901, newshape=[392]) /* ty=Tensor[(392), float32] */;
    %904 = @func_3930(%902, %903) /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32], Tensor[(13, 6, 12), float32], Tensor[(392), float32]) */;
    %905 = @func_2297() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) */;
    %906 = cast(%var_7012, dtype="float64") /* ty=Tensor[(9, 15, 14), float64] */;
    %907 = equal(%898, %899) /* ty=Tensor[(9, 15, 14), bool] */;
    %908 = %904.0;
    %909 = %905.3;
    %910 = @func_6416() /* ty=Tensor[(12, 14, 1), float32] */;
    %911 = @func_6804() /* ty=Tensor[(168), float32] */;
    %912 = log2(%906) /* ty=Tensor[(9, 15, 14), float64] */;
    (%907, %908, meta[relay.Constant][45] /* ty=Tensor[(936), float32] */, %var_7036, %909, %910, %911, %912)
  };
  %913(%var_7086, %var_7087, %var_7088) /* ty=(Tensor[(9, 15, 14), bool], Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(392), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(168), float32], Tensor[(9, 15, 14), float64]) */
}

def @func_7765(%var_7763: Tensor[(3, 16, 11), float64]) -> (Tensor[(3, 16, 11), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  @func_7762(%var_7763) /* ty=(Tensor[(3, 16, 11), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */
}

def @func_9470() -> (Tensor[(936), float32], Tensor[(13, 6, 12), float32]) {
  %914 = @func_3321() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
  %915 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %916 = %914.4;
  %917 = %915.0;
  (%916, %917)
}

def @func_10278(%var_10270: Tensor[(2, 16, 13), uint32]) -> Tensor[(2, 16, 13), uint32] {
  %918 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 16, 13), uint32] */, dtype="uint32") /* ty=Tensor[(2, 16, 13), uint32] */;
  %919 = shape_of(%var_10270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %920 = cast(%var_10270, dtype="uint32") /* ty=Tensor[(2, 16, 13), uint32] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%920, %921) /* ty=Tensor[(2, 16, 13), uint32] */
}

def @func_11210() -> (Tensor[(15, 14, 1), float64],) {
  @func_11208() /* ty=(Tensor[(15, 14, 1), float64],) */
}

def @func_1797(%var_1796: Tensor[(8, 13, 12), int8]) -> (Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(936), float32]) {
  %931 = fn (%var_1768: Tensor[(8, 13, 12), int8]) -> (Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(936), float32]) {
    %922 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 13, 12), int8] */, dtype="int8") /* ty=Tensor[(8, 13, 12), int8] */;
    %923 = shape_of(%var_1768, dtype="int32") /* ty=Tensor[(3), int32] */;
    %924 = cast(%var_1768, dtype="int8") /* ty=Tensor[(8, 13, 12), int8] */;
    %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %926 = @func_1430() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) */;
    %927 = right_shift(%924, %925) /* ty=Tensor[(8, 13, 12), int8] */;
    %928 = @func_1758() /* ty=Tensor[(12, 14, 1), float32] */;
    %929 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
    %930 = %926.2;
    (%927, %928, %929, %930)
  };
  %931(%var_1796) /* ty=(Tensor[(8, 13, 12), int8], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32], Tensor[(936), float32]) */
}

def @func_7624() -> (Tensor[(12, 14, 1), float32], Tensor[(16, 13, 16), float64], Tensor[(3328), float64]) {
  %932 = cast(meta[relay.Constant][48] /* ty=Tensor[(3328), float64] */, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %933 = reshape(%932, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), float64] */;
  %934 = @func_306(%933) /* ty=(Tensor[(16, 13, 16), float64],) */;
  %935 = @func_1337() /* ty=Tensor[(12, 14, 1), float32] */;
  %936 = %934.0;
  (%935, %936, meta[relay.Constant][48] /* ty=Tensor[(3328), float64] */)
}

def @func_6599(%var_6597: Tensor[(5, 12, 6), uint32], %var_6598: Tensor[(209664), uint64]) -> (Tensor[(5, 12, 6), uint32], Tensor[(12, 14, 1248), int64], Tensor[(209664), uint64], Tensor[(5, 12, 6), float32]) {
  @func_6595(%var_6597, %var_6598) /* ty=(Tensor[(5, 12, 6), uint32], Tensor[(12, 14, 1248), int64], Tensor[(209664), uint64], Tensor[(5, 12, 6), float32]) */
}

def @func_8886() -> Tensor[(15, 2, 15), float32] {
  @func_8884() /* ty=Tensor[(15, 2, 15), float32] */
}

def @func_2297() -> (Tensor[(12, 14, 1), float32], Tensor[(12, 14, 15), float64], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1), float32]) {
  %937 = @func_1663() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %938 = cast(meta[relay.Constant][49] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %939 = reshape(%938, newshape=[12, 14, 15]) /* ty=Tensor[(12, 14, 15), float32] */;
  %940 = @func_1715(%939) /* ty=(Tensor[(12, 14, 15), bool],) */;
  %941 = %940.0;
  %942 = cast(meta[relay.Constant][49] /* ty=Tensor[(2520), float32] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %943 = shape_of(%941, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%941, dtype="float64") /* ty=Tensor[(12, 14, 15), float64] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %946 = %937.0;
  %947 = divide(%944, %945) /* ty=Tensor[(12, 14, 15), float64] */;
  %948 = @func_1611() /* ty=Tensor[(12, 14, 1), float32] */;
  %949 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
  (%946, %947, %948, %949)
}

def @func_6755() -> Tensor[(13, 6, 12), float32] {
  @func_6753() /* ty=Tensor[(13, 6, 12), float32] */
}

def @func_6523(%var_6519: Tensor[(60, 24), float64]) -> (Tensor[(12, 14, 1), float32], Tensor[(12, 12, 10), float64], Tensor[(60, 24), float64]) {
  %950 = @func_3984() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %951 = cast(%var_6519, dtype="float64") /* ty=Tensor[(60, 24), float64] */;
  %952 = cast(%var_6519, dtype="float64") /* ty=Tensor[(60, 24), float64] */;
  %953 = reshape(%951, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %954 = reshape(%952, newshape=[12, 12, 10]) /* ty=Tensor[(12, 12, 10), float64] */;
  %955 = @func_4514(%953, %954) /* ty=(Tensor[(12, 12, 10), float64],) */;
  %956 = %950.0;
  %957 = %955.0;
  (%956, %957, %var_6519)
}

def @func_9472() -> (Tensor[(936), float32], Tensor[(13, 6, 12), float32]) {
  @func_9470() /* ty=(Tensor[(936), float32], Tensor[(13, 6, 12), float32]) */
}

def @func_11507() -> (Tensor[(15, 14, 1), float64], Tensor[(15, 14, 1), float64]) {
  %958 = @func_4379() /* ty=(Tensor[(15, 14, 1), float64],) */;
  %959 = @func_11208() /* ty=(Tensor[(15, 14, 1), float64],) */;
  %960 = %958.0;
  %961 = %959.0;
  (%960, %961)
}

def @func_9689(%var_9688: Tensor[(15, 14, 1), float64]) -> (Tensor[(15, 14, ?), float32], Tensor[(12, 14, 1), float32]) {
  %971 = fn (%var_9647: Tensor[(15, 14, 1), float64]) -> (Tensor[(15, 14, ?), float32], Tensor[(12, 14, 1), float32]) {
    %962 = @func_4379() /* ty=(Tensor[(15, 14, 1), float64],) */;
    %963 = %962.0;
    %964 = cast(%var_9647, dtype="float32") /* ty=Tensor[(15, 14, 1), float32] */;
    %965 = shape_of(%963, dtype="int32") /* ty=Tensor[(3), int32] */;
    %966 = cast(%963, dtype="float32") /* ty=Tensor[(15, 14, 1), float32] */;
    %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %968 = @func_8930() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %969 = divide(%966, %967) /* ty=Tensor[(15, 14, ?), float32] */;
    %970 = %968.0;
    (%969, %970)
  };
  %971(%var_9688) /* ty=(Tensor[(15, 14, ?), float32], Tensor[(12, 14, 1), float32]) */
}

def @func_11434() -> (Tensor[(12, 14, 1), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) {
  %980 = fn () -> (Tensor[(12, 14, 1), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) {
    %972 = @func_6176() /* ty=(Tensor[(12, 14, 392), int8], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) */;
    %973 = %972.2;
    %974 = cast(%973, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
    %975 = @func_1877() /* ty=(Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */;
    %976 = @func_7571() /* ty=(Tensor[(936), float32], Tensor[(1248), int8], Tensor[(16, 13, 16), float64], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32]) */;
    %977 = log2(%974) /* ty=Tensor[(12, 14, 1), float64] */;
    %978 = %975.1;
    %979 = %976.3;
    (%977, %978, %979)
  };
  %980() /* ty=(Tensor[(12, 14, 1), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 6, 12), float32]) */
}

def @func_11509() -> (Tensor[(15, 14, 1), float64], Tensor[(15, 14, 1), float64]) {
  @func_11507() /* ty=(Tensor[(15, 14, 1), float64], Tensor[(15, 14, 1), float64]) */
}

def @func_6155() -> (Tensor[(392), float32],) {
  %983 = fn () -> (Tensor[(392), float32],) {
    %981 = @func_3855() /* ty=(Tensor[(392), float32], Tensor[(12, 14, ?), float64], Tensor[(168), float32], Tensor[(12, 14, 1), float32], Tensor[(12, 14, 1248), uint64]) */;
    %982 = %981.0;
    (%982,)
  };
  %983() /* ty=(Tensor[(392), float32],) */
}

def @func_5706() -> Tensor[(12, 14, 1248), uint8] {
  %985 = fn () -> Tensor[(12, 14, 1248), uint8] {
    %984 = @func_3594() /* ty=(Tensor[(12, 14, 1), float32], Tensor[(936), float32], Tensor[(7, 56), float32], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1248), uint8]) */;
    %984.4
  };
  %985() /* ty=Tensor[(12, 14, 1248), uint8] */
}

def @func_6008() -> (Tensor[(12, 14, 392), float32], Tensor[(8, 13, 12), int8], Tensor[(2, 468), float32]) {
  %996 = fn () -> (Tensor[(12, 14, 392), float32], Tensor[(8, 13, 12), int8], Tensor[(2, 468), float32]) {
    %986 = @func_4801() /* ty=Tensor[(12, 14, 392), bool] */;
    %987 = @func_3984() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %988 = %987.0;
    %989 = cast(%986, dtype="float32") /* ty=Tensor[(12, 14, 392), float32] */;
    %990 = cast(%988, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
    %991 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 468), float32] */, dtype="float32") /* ty=Tensor[(2, 468), float32] */;
    %992 = reshape(%991, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
    %993 = @func_3182(%992) /* ty=(Tensor[(13, 6, 12), bool], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(8, 13, 12), int8], Tensor[(392), float32]) */;
    %994 = multiply(%989, %990) /* ty=Tensor[(12, 14, 392), float32] */;
    %995 = %993.3;
    (%994, %995, meta[relay.Constant][50] /* ty=Tensor[(2, 468), float32] */)
  };
  %996() /* ty=(Tensor[(12, 14, 392), float32], Tensor[(8, 13, 12), int8], Tensor[(2, 468), float32]) */
}

def @func_10281(%var_10279: Tensor[(2, 16, 13), uint32]) -> Tensor[(2, 16, 13), uint32] {
  @func_10278(%var_10279) /* ty=Tensor[(2, 16, 13), uint32] */
}

def @func_1717(%var_1716: Tensor[(12, 14, 15), float32]) -> (Tensor[(12, 14, 15), bool],) {
  %1001 = fn (%var_1706: Tensor[(12, 14, 15), float32]) -> (Tensor[(12, 14, 15), bool],) {
    %997 = @func_1580() /* ty=Tensor[(12, 14, 1), float32] */;
    %998 = cast(%997, dtype="bool") /* ty=Tensor[(12, 14, 1), bool] */;
    %999 = cast(%var_1706, dtype="bool") /* ty=Tensor[(12, 14, 15), bool] */;
    %1000 = not_equal(%998, %999) /* ty=Tensor[(12, 14, 15), bool] */;
    (%1000,)
  };
  %1001(%var_1716) /* ty=(Tensor[(12, 14, 15), bool],) */
}

def @func_3249(%var_3247: Tensor[(2520), float32]) -> (Tensor[(13, 6, 12), float32], Tensor[(12, 14, 15), bool], Tensor[(2520), float32]) {
  %1002 = @func_2350() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %1003 = cast(%var_3247, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %1004 = reshape(%1003, newshape=[12, 14, 15]) /* ty=Tensor[(12, 14, 15), float32] */;
  %1005 = @func_1715(%1004) /* ty=(Tensor[(12, 14, 15), bool],) */;
  %1006 = %1002.0;
  %1007 = %1005.0;
  (%1006, %1007, %var_3247)
}

def @func_6416() -> Tensor[(12, 14, 1), float32] {
  %1008 = @func_2835() /* ty=(Tensor[(12, 14, 1), float32],) */;
  %1008.0
}

def @func_3185(%var_3183: Tensor[(13, 6, 12), float32]) -> (Tensor[(13, 6, 12), bool], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(8, 13, 12), int8], Tensor[(392), float32]) {
  @func_3182(%var_3183) /* ty=(Tensor[(13, 6, 12), bool], Tensor[(13, 6, 12), float32], Tensor[(12, 14, 1), float32], Tensor[(8, 13, 12), int8], Tensor[(392), float32]) */
}

def @func_7762(%var_7713: Tensor[(3, 16, 11), float64]) -> (Tensor[(3, 16, 11), float64], Tensor[(13, 6, 12), float32], Tensor[(936), float32]) {
  %1009 = cast(%var_7713, dtype="float64") /* ty=Tensor[(3, 16, 11), float64] */;
  %1010 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %1011 = atan(%1009) /* ty=Tensor[(3, 16, 11), float64] */;
  %1012 = %1010.0;
  %1013 = @func_5547() /* ty=Tensor[(936), float32] */;
  (%1011, %1012, %1013)
}

def @func_8675() -> (Tensor[(12, 14, 1), float32],) {
  %1016 = fn () -> (Tensor[(12, 14, 1), float32],) {
    %1014 = @func_2789() /* ty=(Tensor[(12, 14, 1), float32],) */;
    %1015 = %1014.0;
    (%1015,)
  };
  %1016() /* ty=(Tensor[(12, 14, 1), float32],) */
}

def @func_8394() -> (Tensor[(12, 14, 1), float32],) {
  %1018 = fn () -> (Tensor[(12, 14, 1), float32],) {
    %1017 = @func_6794() /* ty=Tensor[(12, 14, 1), float32] */;
    (%1017,)
  };
  %1018() /* ty=(Tensor[(12, 14, 1), float32],) */
}

def @func_4802() -> Tensor[(12, 14, 392), bool] {
  %1020 = fn () -> Tensor[(12, 14, 392), bool] {
    %1019 = @func_3965() /* ty=(Tensor[(936, 1), float32], Tensor[(12, 14, 392), bool]) */;
    %1019.1
  };
  %1020() /* ty=Tensor[(12, 14, 392), bool] */
}

def @func_1613() -> Tensor[(12, 14, 1), float32] {
  @func_1611() /* ty=Tensor[(12, 14, 1), float32] */
}

def @func_8884() -> Tensor[(15, 2, 15), float32] {
  %1021 = @func_8424() /* ty=(Tensor[(15, 2, 15), float32],) */;
  %1021.0
}

def @func_3415() -> (Tensor[(8, 6, 2), float64], Tensor[(13, 6, 12), float32]) {
  %1026 = fn () -> (Tensor[(8, 6, 2), float64], Tensor[(13, 6, 12), float32]) {
    %1022 = cast(meta[relay.Constant][51] /* ty=Tensor[(8, 6, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 6, 2), float64] */;
    %1023 = @func_2392() /* ty=(Tensor[(13, 6, 12), float32],) */;
    %1024 = erf(%1022) /* ty=Tensor[(8, 6, 2), float64] */;
    %1025 = %1023.0;
    (%1024, %1025)
  };
  %1026() /* ty=(Tensor[(8, 6, 2), float64], Tensor[(13, 6, 12), float32]) */
}

def @func_7949() -> (Tensor[(15, 2, 15), float32], Tensor[(12, 14, 1), float32]) {
  @func_7947() /* ty=(Tensor[(15, 2, 15), float32], Tensor[(12, 14, 1), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen839/build/output.py", line 3395, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:25:55] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

