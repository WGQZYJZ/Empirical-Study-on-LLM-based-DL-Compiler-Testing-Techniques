==========mod==========
#[version = "0.0.5"]
def @func_6545() -> (Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) {
  %0 = @func_3684() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %1 = @func_3516() /* ty=(Tensor[(10), float32],) */;
  %2 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %3 = %0.0;
  %4 = %1.0;
  %5 = %2.1;
  (%3, %4, %5)
}

def @func_1449() -> Tensor[(1300), float32] {
  %6 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %6.2
}

def @func_3278(%var_3202: Tensor[(14, 5, 15), float32]) -> (Tensor[(14, 5, 15), float32], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float64], Tensor[(14, 5, 15), uint8]) {
  %7 = @func_2642() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %8 = %7.0;
  %9 = cast(%var_3202, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%8, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %13 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %14 = @func_2819() /* ty=(Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float32], Tensor[(1144), uint8]) */;
  %15 = %13.2;
  %16 = cast(%15, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
  %17 = reshape(%16, newshape=[1300]) /* ty=Tensor[(1300), uint16] */;
  %18 = @func_2590(%17) /* ty=(Tensor[(1300), bool], Tensor[(1300), float64]) */;
  %19 = cast(%var_3202, dtype="float64") /* ty=Tensor[(14, 5, 15), float64] */;
  %20 = acos(%19) /* ty=Tensor[(14, 5, 15), float64] */;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(14, 5, 15), float64] */;
  %22 = sin(%21) /* ty=Tensor[(14, 5, 15), float64] */;
  %23 = cast(%20, dtype="uint8") /* ty=Tensor[(14, 5, 15), uint8] */;
  %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%22, dtype="uint8") /* ty=Tensor[(14, 5, 15), uint8] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %27 = subtract(%11, %12) /* ty=Tensor[(14, 5, 15), float32] */;
  %28 = %14.4;
  %29 = %18.1;
  %30 = bitwise_or(%25, %26) /* ty=Tensor[(14, 5, 15), uint8] */;
  (%27, %15, %28, %29, %30)
}

def @func_5548() -> (Tensor[(1300), float32], Tensor[(14, 5, 15), float32], Tensor[(1008), int8]) {
  %31 = @func_2090() /* ty=Tensor[(1300), bool] */;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %33 = cast(meta[relay.Constant][0] /* ty=Tensor[(1008), int8] */, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %34 = reshape(%33, newshape=[1008]) /* ty=Tensor[(1008), int8] */;
  %35 = @func_4402(%34) /* ty=(Tensor[(14, 5, 15), float32], Tensor[(12, 7, 12), bool], Tensor[(1008), int8], Tensor[(14, 5, 15), float32]) */;
  %36 = log2(%32) /* ty=Tensor[(1300), float32] */;
  %37 = %35.3;
  (%36, %37, meta[relay.Constant][0] /* ty=Tensor[(1008), int8] */)
}

def @func_3776(%var_3766: Tensor[(1, 2, 4), float32]) -> (Tensor[(1, 2, 4), float32],) {
  %38 = cast(5.18952f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %39 = cast(%var_3766, dtype="float32") /* ty=Tensor[(1, 2, 4), float32] */;
  %40 = subtract(%38, %39) /* ty=Tensor[(1, 2, 4), float32] */;
  (%40,)
}

def @func_3496() -> (Tensor[(1300), bool], Tensor[(1008), int8], Tensor[(1144), int32], Tensor[(1300), float32]) {
  %41 = cast(meta[relay.Constant][1] /* ty=Tensor[(1144), int32] */, dtype="int32") /* ty=Tensor[(1144), int32] */;
  %42 = reshape(%41, newshape=[1144]) /* ty=Tensor[(1144), int32] */;
  %43 = @func_1918(%42) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(?, 13, 16), float64], Tensor[(140), float32], Tensor[(13, 8, 11), float64], Tensor[(12, 7, 12), bool], Tensor[(1008), int8]) */;
  %44 = @func_2090() /* ty=Tensor[(1300), bool] */;
  %45 = %43.6;
  %46 = @func_2348() /* ty=Tensor[(1300), float32] */;
  (%44, %45, meta[relay.Constant][1] /* ty=Tensor[(1144), int32] */, %46)
}

def @func_1980() -> (Tensor[(13, 10, 10), bool], Tensor[(208), float32], float32, Tensor[(1300), uint16]) {
  %47 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %48 = cast(5.00003f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %49 = reshape(%48, newshape=[]) /* ty=float32 */;
  %50 = @func_1611(%49) /* ty=(Tensor[(1300), float32], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1, 1144), int32], Tensor[(?, 13, 16), float32], Tensor[(13, 10, 10), bool], float32, Tensor[(65), float32]) */;
  %51 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %52 = %47.1;
  %53 = %50.1;
  %54 = %51.0;
  (%52, %53, 5.00003f /* ty=float32 */, %54)
}

def @func_6199() -> (Tensor[(1300), float32], Tensor[(1300), float32]) {
  %55 = @func_5548() /* ty=(Tensor[(1300), float32], Tensor[(14, 5, 15), float32], Tensor[(1008), int8]) */;
  %56 = %55.0;
  %57 = @func_2348() /* ty=Tensor[(1300), float32] */;
  (%56, %57)
}

def @func_2136() -> (Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) {
  %58 = @func_2116() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %59 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
  %60 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
  %61 = %58.0;
  %62 = %59.1;
  %63 = %60.0;
  (%61, %62, %63)
}

def @func_4734(%var_4717: Tensor[(1, 1008), int8]) -> (Tensor[(1144), float64], Tensor[(?, 1008), float32]) {
  %64 = @func_3430() /* ty=(Tensor[(1144), float64],) */;
  %65 = cast(%var_4717, dtype="int8") /* ty=Tensor[(1, 1008), int8] */;
  %66 = cast(%var_4717, dtype="int8") /* ty=Tensor[(1, 1008), int8] */;
  %67 = cast(%var_4717, dtype="bool") /* ty=Tensor[(1, 1008), bool] */;
  %68 = reshape(%65, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %69 = reshape(%66, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %70 = reshape(%67, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), bool] */;
  %71 = @func_802(%68, %69, %70) /* ty=(Tensor[(12, 7, 12), bool],) */;
  %72 = %71.0;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(12, 7, 12), float32] */;
  %74 = shape_of(%var_4717, dtype="int32") /* ty=Tensor[(2), int32] */;
  %75 = cast(%var_4717, dtype="float32") /* ty=Tensor[(1, 1008), float32] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %77 = %64.0;
  %78 = floor_divide(%75, %76) /* ty=Tensor[(?, 1008), float32] */;
  (%77, %78)
}

def @func_6580() -> (Tensor[(3, 1, 11), int32], Tensor[(12, 7, 12), bool], Tensor[(1008), int8]) {
  %79 = cast(meta[relay.Constant][2] /* ty=Tensor[(1008), int8] */, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %80 = cast(meta[relay.Constant][2] /* ty=Tensor[(1008), int8] */, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %81 = cast(meta[relay.Constant][2] /* ty=Tensor[(1008), int8] */, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %82 = reshape(%79, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %83 = reshape(%80, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %84 = reshape(%81, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), bool] */;
  %85 = @func_802(%82, %83, %84) /* ty=(Tensor[(12, 7, 12), bool],) */;
  %86 = @func_5595() /* ty=Tensor[(3, 1, 11), int32] */;
  %87 = %85.0;
  (%86, %87, meta[relay.Constant][2] /* ty=Tensor[(1008), int8] */)
}

def @func_3430() -> (Tensor[(1144), float64],) {
  %88 = @func_2819() /* ty=(Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float32], Tensor[(1144), uint8]) */;
  %89 = %88.4;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %91 = sigmoid(%90) /* ty=Tensor[(1144), float64] */;
  (%91,)
}

def @func_5595() -> Tensor[(3, 1, 11), int32] {
  %92 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
  %92.3
}

def @func_3845() -> Tensor[(10), float32] {
  %93 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
  %93.1
}

def @func_6406(%var_6384: Tensor[(1300), bool]) -> (Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), bool], Tensor[(1300), float32], Tensor[(13, 10, 10), float64]) {
  %94 = @func_3290() /* ty=(Tensor[(10), float32],) */;
  %95 = @func_5750() /* ty=(float32, Tensor[(10), float32], Tensor[(10), float32]) */;
  %96 = @func_6199() /* ty=(Tensor[(1300), float32], Tensor[(1300), float32]) */;
  %97 = cast(%var_6384, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %98 = reshape(%97, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), bool] */;
  %99 = @func_6296(%98) /* ty=Tensor[(13, 10, 10), float32] */;
  %100 = cast(%99, dtype="float64") /* ty=Tensor[(13, 10, 10), float64] */;
  %101 = %94.0;
  %102 = %95.2;
  %103 = %96.1;
  %104 = acos(%100) /* ty=Tensor[(13, 10, 10), float64] */;
  (%101, %102, %var_6384, %103, %104)
}

def @func_6733(%var_6728: Tensor[(5, 15, 12), float64]) -> Tensor[(5, 15, 12), float64] {
  %105 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %106 = shape_of(%var_6728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_6728, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%107, %108) /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_5428() -> (Tensor[(1300), float32], Tensor[(1300), float32], Tensor[(14, 3, 5), float32]) {
  %109 = @func_5227() /* ty=(Tensor[(1300), float32],) */;
  %110 = @func_4625() /* ty=(Tensor[(14, 3, 5), float32],) */;
  %111 = %109.0;
  %112 = @func_2348() /* ty=Tensor[(1300), float32] */;
  %113 = %110.0;
  (%111, %112, %113)
}

def @func_7749() -> (Tensor[(13, 10, 10), bool],) {
  %114 = @func_2136() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) */;
  %115 = %114.2;
  (%115,)
}

def @func_5391() -> float32 {
  @func_2422() /* ty=float32 */
}

def @func_3575() -> (Tensor[(14, 5, 15), float32],) {
  %116 = @func_2116() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %117 = %116.0;
  (%117,)
}

def @func_6296(%var_6271: Tensor[(13, 10, 10), bool]) -> Tensor[(13, 10, 10), float32] {
  %118 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %119 = %118.1;
  %120 = cast(%var_6271, dtype="int8") /* ty=Tensor[(13, 10, 10), int8] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%119, dtype="int8") /* ty=Tensor[(13, 10, 10), int8] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %124 = add(%122, %123) /* ty=Tensor[(13, 10, 10), int8] */;
  %125 = cast(%124, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
  cos(%125) /* ty=Tensor[(13, 10, 10), float32] */
}

def @main(%var_8277: Tensor[(14, 11, 6), float32]) -> Tensor[(14, 11, 6), uint32] {
  %126 = cast(%var_8277, dtype="float32") /* ty=Tensor[(14, 11, 6), float32] */;
  %127 = asinh(%126) /* ty=Tensor[(14, 11, 6), float32] */;
  %128 = cast(%var_8277, dtype="uint32") /* ty=Tensor[(14, 11, 6), uint32] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%127, dtype="uint32") /* ty=Tensor[(14, 11, 6), uint32] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%130, %131) /* ty=Tensor[(14, 11, 6), uint32] */
}

def @func_6777() -> Tensor[(10), float32] {
  %132 = @func_3735() /* ty=(Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float32]) */;
  %132.1
}

def @func_6664() -> (Tensor[(208), float64],) {
  %133 = @func_1980() /* ty=(Tensor[(13, 10, 10), bool], Tensor[(208), float32], float32, Tensor[(1300), uint16]) */;
  %134 = %133.1;
  %135 = cast(%134, dtype="float64") /* ty=Tensor[(208), float64] */;
  %136 = asin(%135) /* ty=Tensor[(208), float64] */;
  (%136,)
}

def @func_1373(%var_1240: float32, %var_1241: Tensor[(13, 5, 1), float32], %var_1354: Tensor[(1, 13, 16), float32]) -> (Tensor[(13, 10, 10), bool], Tensor[(13, 5, 1), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(13, 5, 208), bool], Tensor[(13, 5, 208), int32], Tensor[(?, 13, 16), bool], Tensor[(13, 10, 10), bool], Tensor[(13, 5, 208), bool], Tensor[(?, 13, 16), int8]) {
  %137 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
  %138 = cast(%var_1240, dtype="float32") /* ty=float32 */;
  %139 = cast(%var_1241, dtype="float32") /* ty=Tensor[(13, 5, 1), float32] */;
  %140 = maximum(%138, %139) /* ty=Tensor[(13, 5, 1), float32] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(13, 5, 1), float32] */;
  %142 = cast(%var_1240, dtype="float32") /* ty=float32 */;
  %143 = cast(meta[relay.Constant][4] /* ty=Tensor[(1144), int32] */, dtype="int32") /* ty=Tensor[(1144), int32] */;
  %144 = reshape(%143, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), int32] */;
  %145 = %137.0;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
  %147 = cast(%145, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
  %148 = reshape(%146, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %149 = reshape(%147, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %150 = @func_750(%148, %149) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
  %151 = %150.1;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(?, 13, 16), float32] */;
  %153 = reshape(%152, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %154 = @func_1169(%153) /* ty=(Tensor[(7, 12, 11), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
  %155 = %154.2;
  %156 = cast(%155, dtype="bool") /* ty=Tensor[(208), bool] */;
  %157 = cast(%140, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
  %158 = cast(%140, dtype="int32") /* ty=Tensor[(13, 5, 1), int32] */;
  %159 = cast(%155, dtype="int32") /* ty=Tensor[(208), int32] */;
  %160 = cast(%151, dtype="float32") /* ty=Tensor[(?, 13, 16), float32] */;
  %161 = sinh(%160) /* ty=Tensor[(?, 13, 16), float32] */;
  %162 = cast(%151, dtype="bool") /* ty=Tensor[(?, 13, 16), bool] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="bool") /* ty=Tensor[(?, 13, 16), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = cast(%145, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
  %167 = cast(%145, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
  %168 = reshape(%166, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %169 = reshape(%167, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %170 = @func_750(%168, %169) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
  %171 = cast(%var_1241, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
  %172 = cast(%155, dtype="bool") /* ty=Tensor[(208), bool] */;
  %173 = cast(%var_1354, dtype="bool") /* ty=Tensor[(1, 13, 16), bool] */;
  %174 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%161, dtype="bool") /* ty=Tensor[(?, 13, 16), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %177 = not_equal(%175, %176) /* ty=Tensor[(?, 13, 16), bool] */;
  %178 = cast(%177, dtype="int8") /* ty=Tensor[(?, 13, 16), int8] */;
  %179 = cast(%var_1240, dtype="int8") /* ty=int8 */;
  %180 = power(%141, %142) /* ty=Tensor[(13, 5, 1), float32] */;
  %181 = @func_1022(%144) /* ty=Tensor[(13, 8, 11), bool] */;
  %182 = logical_or(%156, %157) /* ty=Tensor[(13, 5, 208), bool] */;
  %183 = right_shift(%158, %159) /* ty=Tensor[(13, 5, 208), int32] */;
  %184 = less_equal(%164, %165) /* ty=Tensor[(?, 13, 16), bool] */;
  %185 = %170.0;
  %186 = less(%171, %172) /* ty=Tensor[(13, 5, 208), bool] */;
  %187 = subtract(%178, %179) /* ty=Tensor[(?, 13, 16), int8] */;
  (%145, %180, %181, meta[relay.Constant][4] /* ty=Tensor[(1144), int32] */, %182, %183, %184, %185, %186, %187)
}

def @func_4615() -> Tensor[(10), float32] {
  %188 = @func_4501() /* ty=(Tensor[(10), float32], Tensor[(1300), uint16], Tensor[(14, 5, 15), float32]) */;
  %188.0
}

def @func_4276() -> Tensor[(10), float32] {
  %189 = @func_3516() /* ty=(Tensor[(10), float32],) */;
  %189.0
}

def @func_6521() -> (Tensor[(14, 5, 15), float64],) {
  %190 = @func_6114() /* ty=(Tensor[(14, 5, 15), float64], Tensor[(13, 10, 10), bool], Tensor[(288, 2), uint64]) */;
  %191 = %190.0;
  (%191,)
}

def @func_3656() -> (Tensor[(1300), float32],) {
  %192 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %193 = %192.0;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %195 = erf(%194) /* ty=Tensor[(1300), float32] */;
  (%195,)
}

def @func_4793(%var_4773: Tensor[(8, 1), uint64], %var_4774: Tensor[(8, 1), uint64]) -> Tensor[(8, ?), bool] {
  %196 = cast(%var_4774, dtype="bool") /* ty=Tensor[(8, 1), bool] */;
  %197 = shape_of(%var_4773, dtype="int32") /* ty=Tensor[(2), int32] */;
  %198 = cast(%var_4773, dtype="bool") /* ty=Tensor[(8, 1), bool] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  not_equal(%198, %199) /* ty=Tensor[(8, ?), bool] */
}

def @func_2819() -> (Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float32], Tensor[(1144), uint8]) {
  %200 = cast(meta[relay.Constant][5] /* ty=Tensor[(1144), int32] */, dtype="int32") /* ty=Tensor[(1144), int32] */;
  %201 = reshape(%200, newshape=[1144]) /* ty=Tensor[(1144), int32] */;
  %202 = @func_1918(%201) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(?, 13, 16), float64], Tensor[(140), float32], Tensor[(13, 8, 11), float64], Tensor[(12, 7, 12), bool], Tensor[(1008), int8]) */;
  %203 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
  %204 = @func_2170() /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool]) */;
  %205 = cast(meta[relay.Constant][5] /* ty=Tensor[(1144), int32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %206 = exp(%205) /* ty=Tensor[(1144), float32] */;
  %207 = cast(meta[relay.Constant][5] /* ty=Tensor[(1144), int32] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %208 = sinh(%207) /* ty=Tensor[(1144), float64] */;
  %209 = cast(%208, dtype="int64") /* ty=Tensor[(1144), int64] */;
  %210 = shape_of(%206, dtype="int32") /* ty=Tensor[(1), int32] */;
  %211 = cast(%206, dtype="int64") /* ty=Tensor[(1144), int64] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?), int64] */;
  %213 = left_shift(%211, %212) /* ty=Tensor[(1144), int64] */;
  %214 = cast(meta[relay.Constant][5] /* ty=Tensor[(1144), int32] */, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(1), int32] */;
  %216 = cast(%213, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %218 = cast(%206, dtype="uint8") /* ty=Tensor[(1144), uint8] */;
  %219 = shape_of(%208, dtype="int32") /* ty=Tensor[(1), int32] */;
  %220 = cast(%208, dtype="uint8") /* ty=Tensor[(1144), uint8] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %222 = @func_2488() /* ty=Tensor[(10), float32] */;
  %223 = %202.2;
  %224 = %203.0;
  %225 = %204.0;
  %226 = bitwise_or(%216, %217) /* ty=Tensor[(1144), uint64] */;
  %227 = @func_2348() /* ty=Tensor[(1300), float32] */;
  %228 = subtract(%220, %221) /* ty=Tensor[(1144), uint8] */;
  (%222, %223, %224, %225, %226, %227, %228)
}

def @func_7523() -> (Tensor[(?, 13, 16), float64], Tensor[(1, 2, 4), float32], Tensor[(2, 4), float32]) {
  %229 = @func_6259() /* ty=(Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
  %230 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 4), float32] */, dtype="float32") /* ty=Tensor[(2, 4), float32] */;
  %231 = reshape(%230, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), float32] */;
  %232 = @func_3776(%231) /* ty=(Tensor[(1, 2, 4), float32],) */;
  %233 = %229.1;
  %234 = %232.0;
  (%233, %234, meta[relay.Constant][6] /* ty=Tensor[(2, 4), float32] */)
}

def @func_2461(%var_2449: float32) -> (Tensor[(10), float32], Tensor[(208), float32], float32) {
  %235 = @func_2136() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) */;
  %236 = cast(%var_2449, dtype="float32") /* ty=float32 */;
  %237 = reshape(%236, newshape=[]) /* ty=float32 */;
  %238 = @func_1611(%237) /* ty=(Tensor[(1300), float32], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1, 1144), int32], Tensor[(?, 13, 16), float32], Tensor[(13, 10, 10), bool], float32, Tensor[(65), float32]) */;
  %239 = %235.1;
  %240 = %238.1;
  (%239, %240, %var_2449)
}

def @func_3735() -> (Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float32]) {
  %241 = @func_2819() /* ty=(Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float32], Tensor[(1144), uint8]) */;
  %242 = @func_3516() /* ty=(Tensor[(10), float32],) */;
  %243 = @func_3656() /* ty=(Tensor[(1300), float32],) */;
  %244 = %241.0;
  %245 = %242.0;
  %246 = %243.0;
  (%244, %245, %246)
}

def @func_5093(%var_5066: Tensor[(5, 2, 9), int32], %var_5067: Tensor[(5, 2, 9), int32]) -> (Tensor[(5, 2, 9), int32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) {
  %247 = cast(%var_5067, dtype="int32") /* ty=Tensor[(5, 2, 9), int32] */;
  %248 = shape_of(%var_5066, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%var_5066, dtype="int32") /* ty=Tensor[(5, 2, 9), int32] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %251 = cast(meta[relay.Constant][7] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %252 = reshape(%251, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %253 = cast(meta[relay.Constant][7] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %254 = left_shift(%249, %250) /* ty=Tensor[(5, 2, 9), int32] */;
  %255 = @func_332(%252) /* ty=Tensor[(?, 13, 16), float64] */;
  %256 = rsqrt(%253) /* ty=Tensor[(208), float32] */;
  (%254, %255, %256)
}

def @func_8188() -> (Tensor[(3, 12, 13), uint64],) {
  %257 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 12, 13), float64] */;
  %258 = acos(%257) /* ty=Tensor[(3, 12, 13), float64] */;
  %259 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 12, 13), float64] */, dtype="uint64") /* ty=Tensor[(3, 12, 13), uint64] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="uint64") /* ty=Tensor[(3, 12, 13), uint64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %263 = add(%261, %262) /* ty=Tensor[(3, 12, 13), uint64] */;
  (%263,)
}

def @func_4983() -> (Tensor[(1300), float64], Tensor[(14, 5, 15), float32], Tensor[(1170), float32], Tensor[(208), float32], Tensor[(1144), float64]) {
  %264 = @func_4596() /* ty=(Tensor[(1300), uint16], Tensor[(1300), float64]) */;
  %265 = cast(meta[relay.Constant][9] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %266 = reshape(%265, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %267 = @func_3174(%266) /* ty=(Tensor[(14, 5, 15), float32], Tensor[(1300), float64], Tensor[(13, 8, 11), bool], Tensor[(1170), float32]) */;
  %268 = %264.1;
  %269 = cast(%268, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %270 = cast(%268, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %271 = reshape(%269, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %272 = reshape(%270, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %273 = @func_750(%271, %272) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
  %274 = @func_3430() /* ty=(Tensor[(1144), float64],) */;
  %275 = %267.0;
  %276 = %273.2;
  %277 = %274.0;
  (%268, %275, meta[relay.Constant][9] /* ty=Tensor[(1170), float32] */, %276, %277)
}

def @func_7650() -> Tensor[(10), float32] {
  %278 = @func_4864() /* ty=(Tensor[(10), float32], Tensor[(10), float32], float32) */;
  %278.1
}

def @func_574(%var_569: Tensor[(2, 5, 1), float32]) -> (Tensor[(2, 5, ?), float32],) {
  %279 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 1), float32] */;
  %280 = shape_of(%var_569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%var_569, dtype="float32") /* ty=Tensor[(2, 5, 1), float32] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %283 = power(%281, %282) /* ty=Tensor[(2, 5, ?), float32] */;
  (%283,)
}

def @func_2642() -> (Tensor[(14, 5, 15), float32],) {
  %284 = @func_2116() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %285 = %284.0;
  (%285,)
}

def @func_4892() -> Tensor[(10), float32] {
  @func_3845() /* ty=Tensor[(10), float32] */
}

def @func_332(%var_306: Tensor[(1, 13, 16), float32]) -> Tensor[(?, 13, 16), float64] {
  %286 = cast(%var_306, dtype="float32") /* ty=Tensor[(1, 13, 16), float32] */;
  %287 = sqrt(%286) /* ty=Tensor[(1, 13, 16), float32] */;
  %288 = cast(%287, dtype="float64") /* ty=Tensor[(1, 13, 16), float64] */;
  %289 = shape_of(%var_306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%var_306, dtype="float64") /* ty=Tensor[(1, 13, 16), float64] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %292 = floor_mod(%290, %291) /* ty=Tensor[(?, 13, 16), float64] */;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(?, 13, 16), float64] */;
  log2(%293) /* ty=Tensor[(?, 13, 16), float64] */
}

def @func_1745() -> Tensor[(1300), uint16] {
  %294 = @func_1449() /* ty=Tensor[(1300), float32] */;
  %295 = cast(meta[relay.Constant][11] /* ty=Tensor[(1300), float32] */, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
  %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(1), int32] */;
  %297 = cast(%294, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?), uint16] */;
  maximum(%297, %298) /* ty=Tensor[(1300), uint16] */
}

def @func_1169(%var_1156: Tensor[(208), float32]) -> (Tensor[(7, 12, 11), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) {
  %299 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %300 = cast(%var_1156, dtype="float32") /* ty=Tensor[(208), float32] */;
  %301 = reshape(%300, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %302 = %299.0;
  %303 = @func_332(%301) /* ty=Tensor[(?, 13, 16), float64] */;
  (%302, %303, %var_1156)
}

def @func_834(%var_815: Tensor[(6, 12, 8), uint64], %var_816: Tensor[(6, 12, 8), uint64], %var_826: Tensor[(208, 1), float32]) -> (Tensor[(6, 12, 8), uint64], Tensor[(?, 13, 16), float64], Tensor[(208, 1), float32], Tensor[(?, 13, 16), float64]) {
  %304 = cast(%var_816, dtype="uint64") /* ty=Tensor[(6, 12, 8), uint64] */;
  %305 = shape_of(%var_815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%var_815, dtype="uint64") /* ty=Tensor[(6, 12, 8), uint64] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %308 = cast(%var_826, dtype="float32") /* ty=Tensor[(208, 1), float32] */;
  %309 = reshape(%308, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %310 = @func_332(%309) /* ty=Tensor[(?, 13, 16), float64] */;
  %311 = cast(%310, dtype="float32") /* ty=Tensor[(?, 13, 16), float32] */;
  %312 = reshape(%311, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %313 = right_shift(%306, %307) /* ty=Tensor[(6, 12, 8), uint64] */;
  %314 = @func_332(%312) /* ty=Tensor[(?, 13, 16), float64] */;
  (%313, %310, %var_826, %314)
}

def @func_6135() -> (Tensor[(10), float32], Tensor[(10), float32]) {
  %315 = @func_5750() /* ty=(float32, Tensor[(10), float32], Tensor[(10), float32]) */;
  %316 = @func_3290() /* ty=(Tensor[(10), float32],) */;
  %317 = %315.1;
  %318 = %316.0;
  (%317, %318)
}

def @func_4652(%var_4647: Tensor[(576), uint64]) -> (Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(208, 1), float32], Tensor[(576), uint64], Tensor[(208), float32]) {
  %319 = @func_3656() /* ty=(Tensor[(1300), float32],) */;
  %320 = @func_4323() /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(14, 9, 11), bool], Tensor[(1386), int64]) */;
  %321 = cast(%var_4647, dtype="uint64") /* ty=Tensor[(576), uint64] */;
  %322 = cast(%var_4647, dtype="uint64") /* ty=Tensor[(576), uint64] */;
  %323 = cast(meta[relay.Constant][12] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %324 = reshape(%321, newshape=[6, 12, 8]) /* ty=Tensor[(6, 12, 8), uint64] */;
  %325 = reshape(%322, newshape=[6, 12, 8]) /* ty=Tensor[(6, 12, 8), uint64] */;
  %326 = reshape(%323, newshape=[208, 1]) /* ty=Tensor[(208, 1), float32] */;
  %327 = @func_834(%324, %325, %326) /* ty=(Tensor[(6, 12, 8), uint64], Tensor[(?, 13, 16), float64], Tensor[(208, 1), float32], Tensor[(?, 13, 16), float64]) */;
  %328 = %319.0;
  %329 = %320.1;
  %330 = %327.2;
  (%328, %329, %330, %var_4647, meta[relay.Constant][12] /* ty=Tensor[(208), float32] */)
}

def @func_2348() -> Tensor[(1300), float32] {
  @func_1449() /* ty=Tensor[(1300), float32] */
}

def @func_1721(%var_1682: Tensor[(14, 9, 11), int64], %var_1683: Tensor[(14, 9, 11), int64]) -> (Tensor[(14, 9, 11), bool],) {
  %331 = cast(%var_1683, dtype="int64") /* ty=Tensor[(14, 9, 11), int64] */;
  %332 = shape_of(%var_1682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%var_1682, dtype="int64") /* ty=Tensor[(14, 9, 11), int64] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %335 = right_shift(%333, %334) /* ty=Tensor[(14, 9, 11), int64] */;
  %336 = cast(%335, dtype="bool") /* ty=Tensor[(14, 9, 11), bool] */;
  %337 = shape_of(%var_1682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%var_1682, dtype="bool") /* ty=Tensor[(14, 9, 11), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %340 = logical_or(%338, %339) /* ty=Tensor[(14, 9, 11), bool] */;
  (%340,)
}

def @func_7825() -> Tensor[(10), float32] {
  @func_3845() /* ty=Tensor[(10), float32] */
}

def @func_4417() -> Tensor[(10), float32] {
  %341 = @func_3735() /* ty=(Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float32]) */;
  %341.1
}

def @func_1022(%var_1010: Tensor[(13, 8, 11), int32]) -> Tensor[(13, 8, 11), bool] {
  %342 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 1, 11), int32] */, dtype="bool") /* ty=Tensor[(13, 1, 11), bool] */;
  %343 = cast(%var_1010, dtype="bool") /* ty=Tensor[(13, 8, 11), bool] */;
  less_equal(%342, %343) /* ty=Tensor[(13, 8, 11), bool] */
}

def @func_1430(%var_1397: Tensor[(208), float32]) -> (Tensor[(?, 13, 16), float64], Tensor[(1, 576), uint64], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(1300), bool]) {
  %344 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 576), uint64] */, dtype="uint64") /* ty=Tensor[(1, 576), uint64] */;
  %345 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 576), uint64] */, dtype="uint64") /* ty=Tensor[(1, 576), uint64] */;
  %346 = cast(%var_1397, dtype="float32") /* ty=Tensor[(208), float32] */;
  %347 = reshape(%344, newshape=[6, 12, 8]) /* ty=Tensor[(6, 12, 8), uint64] */;
  %348 = reshape(%345, newshape=[6, 12, 8]) /* ty=Tensor[(6, 12, 8), uint64] */;
  %349 = reshape(%346, newshape=[208, 1]) /* ty=Tensor[(208, 1), float32] */;
  %350 = @func_834(%347, %348, %349) /* ty=(Tensor[(6, 12, 8), uint64], Tensor[(?, 13, 16), float64], Tensor[(208, 1), float32], Tensor[(?, 13, 16), float64]) */;
  %351 = cast(meta[relay.Constant][15] /* ty=Tensor[(1144), int32] */, dtype="int32") /* ty=Tensor[(1144), int32] */;
  %352 = reshape(%351, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), int32] */;
  %353 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %354 = %353.2;
  %355 = cast(%354, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %356 = atan(%355) /* ty=Tensor[(1300), float32] */;
  %357 = cast(%354, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(1), int32] */;
  %359 = cast(%356, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?), bool] */;
  %361 = %350.1;
  %362 = @func_1022(%352) /* ty=Tensor[(13, 8, 11), bool] */;
  %363 = greater_equal(%359, %360) /* ty=Tensor[(1300), bool] */;
  (%361, meta[relay.Constant][14] /* ty=Tensor[(1, 576), uint64] */, %var_1397, %362, meta[relay.Constant][15] /* ty=Tensor[(1144), int32] */, %363)
}

def @func_4501() -> (Tensor[(10), float32], Tensor[(1300), uint16], Tensor[(14, 5, 15), float32]) {
  %364 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %365 = @func_3575() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %366 = @func_4417() /* ty=Tensor[(10), float32] */;
  %367 = %364.0;
  %368 = %365.0;
  (%366, %367, %368)
}

def @func_802(%var_780: Tensor[(12, 7, 12), int8], %var_781: Tensor[(12, 7, 12), int8], %var_786: Tensor[(12, 7, 12), bool]) -> (Tensor[(12, 7, 12), bool],) {
  %369 = cast(%var_781, dtype="bool") /* ty=Tensor[(12, 7, 12), bool] */;
  %370 = shape_of(%var_780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%var_780, dtype="bool") /* ty=Tensor[(12, 7, 12), bool] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %373 = not_equal(%371, %372) /* ty=Tensor[(12, 7, 12), bool] */;
  %374 = cast(%var_786, dtype="bool") /* ty=Tensor[(12, 7, 12), bool] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="bool") /* ty=Tensor[(12, 7, 12), bool] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %378 = less_equal(%376, %377) /* ty=Tensor[(12, 7, 12), bool] */;
  (%378,)
}

def @func_3532() -> Tensor[(1300), bool] {
  @func_2090() /* ty=Tensor[(1300), bool] */
}

def @func_1233() -> (Tensor[(13, 10, 10), bool],) {
  %379 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %380 = %379.1;
  (%380,)
}

def @func_1884(%var_1824: Tensor[(7, 5, 4), float32]) -> (Tensor[(7, 5, 4), float32], Tensor[(?, 13, 16), float64], Tensor[(104, 2), float32], Tensor[(1300), uint16], Tensor[(7, 12, 11), float32]) {
  %381 = cast(%var_1824, dtype="float32") /* ty=Tensor[(7, 5, 4), float32] */;
  %382 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(7, 5, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 4), float32] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %385 = cast(meta[relay.Constant][17] /* ty=Tensor[(104, 2), float32] */, dtype="float32") /* ty=Tensor[(104, 2), float32] */;
  %386 = reshape(%385, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %387 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %388 = power(%383, %384) /* ty=Tensor[(7, 5, 4), float32] */;
  %389 = @func_332(%386) /* ty=Tensor[(?, 13, 16), float64] */;
  %390 = @func_1745() /* ty=Tensor[(1300), uint16] */;
  %391 = %387.0;
  (%388, %389, meta[relay.Constant][17] /* ty=Tensor[(104, 2), float32] */, %390, %391)
}

def @func_1933() -> (Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) {
  %392 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
  %393 = @func_1745() /* ty=Tensor[(1300), uint16] */;
  %394 = %392.0;
  (%393, %394)
}

def @func_6175() -> (Tensor[(10), float32], Tensor[(10), float32]) {
  %395 = @func_4672() /* ty=Tensor[(10), float32] */;
  %396 = @func_4276() /* ty=Tensor[(10), float32] */;
  (%395, %396)
}

def @func_6718() -> (Tensor[(1300), float64], Tensor[(14, 5, 15), float64]) {
  %397 = @func_4596() /* ty=(Tensor[(1300), uint16], Tensor[(1300), float64]) */;
  %398 = @func_6114() /* ty=(Tensor[(14, 5, 15), float64], Tensor[(13, 10, 10), bool], Tensor[(288, 2), uint64]) */;
  %399 = %397.1;
  %400 = %398.0;
  (%399, %400)
}

def @func_3290() -> (Tensor[(10), float32],) {
  %401 = @func_2488() /* ty=Tensor[(10), float32] */;
  (%401,)
}

def @func_4201(%var_4104: Tensor[(208), float32], %var_4129: Tensor[(720), uint64]) -> (Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32], Tensor[(1, 576), uint64], Tensor[(10, 12, 6), float32], Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(10), float32], Tensor[(1170), float32], Tensor[(10), float32]) {
  %402 = @func_2170() /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool]) */;
  %403 = cast(%var_4104, dtype="float32") /* ty=Tensor[(208), float32] */;
  %404 = reshape(%403, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %405 = @func_1169(%404) /* ty=(Tensor[(7, 12, 11), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
  %406 = %405.1;
  %407 = cast(%406, dtype="float32") /* ty=Tensor[(?, 13, 16), float32] */;
  %408 = reshape(%407, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %409 = @func_1430(%408) /* ty=(Tensor[(?, 13, 16), float64], Tensor[(1, 576), uint64], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(1300), bool]) */;
  %410 = cast(%var_4129, dtype="uint64") /* ty=Tensor[(720), uint64] */;
  %411 = reshape(%410, newshape=[10, 12, 6]) /* ty=Tensor[(10, 12, 6), uint64] */;
  %412 = @func_2368(%411) /* ty=Tensor[(10, 12, 6), uint64] */;
  %413 = cast(%var_4129, dtype="float32") /* ty=Tensor[(720), float32] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="float32") /* ty=Tensor[(10, 12, 6), float32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %417 = %402.1;
  %418 = cast(%417, dtype="uint16") /* ty=Tensor[(13, 10, 10), uint16] */;
  %419 = reshape(%418, newshape=[1300]) /* ty=Tensor[(1300), uint16] */;
  %420 = @func_3078(%419) /* ty=(float32, Tensor[(1300), float64], Tensor[(1300), uint16]) */;
  %421 = mod(%415, %416) /* ty=Tensor[(10, 12, 6), float32] */;
  %422 = cast(%421, dtype="uint64") /* ty=Tensor[(10, 12, 6), uint64] */;
  %423 = reshape(%422, newshape=[720]) /* ty=Tensor[(720), uint64] */;
  %424 = @func_3038(%423) /* ty=(float32, float32, Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(1300), float64]) */;
  %425 = cast(meta[relay.Constant][18] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %426 = cast(%417, dtype="bool") /* ty=Tensor[(13, 10, 10), bool] */;
  %427 = cast(meta[relay.Constant][19] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %428 = reshape(%425, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %429 = reshape(%426, newshape=[1300]) /* ty=Tensor[(1300), bool] */;
  %430 = reshape(%427, newshape=[10]) /* ty=Tensor[(10), float32] */;
  %431 = @func_3405(%428, %429, %430) /* ty=(Tensor[(13, 8, 11), bool], Tensor[(1300), bool], Tensor[(1300), float64], Tensor[(10), float32], Tensor[(2, 5, 1170), bool], Tensor[(13, 10, 10), bool], Tensor[(1300), bool], Tensor[(1300), float64], Tensor[(10), float32]) */;
  %432 = %409.1;
  %433 = %420.2;
  %434 = %424.2;
  %435 = %431.8;
  (%417, %406, %var_4104, %432, %421, %433, %434, %435, meta[relay.Constant][18] /* ty=Tensor[(1170), float32] */, meta[relay.Constant][19] /* ty=Tensor[(10), float32] */)
}

def @func_4999() -> (Tensor[(2, 5, ?), float64],) {
  %436 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
  %437 = %436.0;
  %438 = cast(%437, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
  %439 = tan(%438) /* ty=Tensor[(2, 5, ?), float64] */;
  (%439,)
}

def @func_1078() -> (Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) {
  %440 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 12, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 11), float32] */;
  %441 = cast(meta[relay.Constant][21] /* ty=Tensor[(1300), float32] */, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %442 = cast(meta[relay.Constant][21] /* ty=Tensor[(1300), float32] */, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %443 = reshape(%441, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %444 = reshape(%442, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %445 = @func_750(%443, %444) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
  %446 = log2(%440) /* ty=Tensor[(7, 12, 11), float32] */;
  %447 = %445.0;
  (%446, %447, meta[relay.Constant][21] /* ty=Tensor[(1300), float32] */)
}

def @func_3038(%var_3030: Tensor[(720), uint64]) -> (float32, float32, Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(1300), float64]) {
  %448 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
  %449 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
  %450 = cast(%var_3030, dtype="uint64") /* ty=Tensor[(720), uint64] */;
  %451 = reshape(%450, newshape=[10, 12, 6]) /* ty=Tensor[(10, 12, 6), uint64] */;
  %452 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %453 = %452.0;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %455 = sqrt(%454) /* ty=Tensor[(1300), float32] */;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %457 = %448.2;
  %458 = %449.2;
  %459 = @func_2368(%451) /* ty=Tensor[(10, 12, 6), uint64] */;
  %460 = asinh(%456) /* ty=Tensor[(1300), float64] */;
  (%457, %458, %459, %var_3030, %460)
}

def @func_5227() -> (Tensor[(1300), float32],) {
  %461 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %462 = %461.2;
  (%462,)
}

def @func_3911(%var_3902: Tensor[(13, 5, 3), float32], %var_3903: Tensor[(13, 5, 3), float32]) -> (Tensor[(13, 5, 3), float32],) {
  %463 = cast(%var_3903, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
  %464 = shape_of(%var_3902, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%var_3902, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %467 = divide(%465, %466) /* ty=Tensor[(13, 5, 3), float32] */;
  (%467,)
}

def @func_2170() -> (Tensor[(1300), float32], Tensor[(13, 10, 10), bool]) {
  %468 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %469 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %470 = %468.2;
  %471 = %469.1;
  (%470, %471)
}

def @func_2116() -> (Tensor[(14, 5, 15), float32],) {
  %472 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %473 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(14, 5, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %476 = power(%474, %475) /* ty=Tensor[(14, 5, 15), float32] */;
  (%476,)
}

def @func_2422() -> float32 {
  %477 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
  %477.2
}

def @func_7568() -> (Tensor[(14, 5, 15), float32], Tensor[(2, 5, ?), float64]) {
  %478 = @func_4700() /* ty=(Tensor[(4, 3, 6), float32], Tensor[(14, 5, 15), float32]) */;
  %479 = %478.1;
  %480 = @func_7199() /* ty=Tensor[(2, 5, ?), float64] */;
  (%479, %480)
}

def @func_4323() -> (Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(14, 9, 11), bool], Tensor[(1386), int64]) {
  %481 = cast(meta[relay.Constant][24] /* ty=Tensor[(1144), int32] */, dtype="int32") /* ty=Tensor[(1144), int32] */;
  %482 = reshape(%481, newshape=[572, 2]) /* ty=Tensor[(572, 2), int32] */;
  %483 = @func_1561(%482) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(13, 8, 11), bool], Tensor[(572, 2), float64]) */;
  %484 = cast(meta[relay.Constant][25] /* ty=Tensor[(1386), int64] */, dtype="int64") /* ty=Tensor[(1386), int64] */;
  %485 = cast(meta[relay.Constant][25] /* ty=Tensor[(1386), int64] */, dtype="int64") /* ty=Tensor[(1386), int64] */;
  %486 = reshape(%484, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
  %487 = reshape(%485, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
  %488 = @func_1721(%486, %487) /* ty=(Tensor[(14, 9, 11), bool],) */;
  %489 = @func_2348() /* ty=Tensor[(1300), float32] */;
  %490 = %483.0;
  %491 = %488.0;
  (%489, %490, meta[relay.Constant][24] /* ty=Tensor[(1144), int32] */, %491, meta[relay.Constant][25] /* ty=Tensor[(1386), int64] */)
}

def @func_6017(%var_6012: Tensor[(14, 5, 15), float32]) -> (Tensor[(14, 5, 15), float32],) {
  %492 = @func_2136() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) */;
  %493 = %492.0;
  %494 = cast(%var_6012, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%493, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %498 = floor_divide(%496, %497) /* ty=Tensor[(14, 5, 15), float32] */;
  (%498,)
}

def @func_6114() -> (Tensor[(14, 5, 15), float64], Tensor[(13, 10, 10), bool], Tensor[(288, 2), uint64]) {
  %499 = @func_6065() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %500 = %499.0;
  %501 = cast(%500, dtype="float64") /* ty=Tensor[(14, 5, 15), float64] */;
  %502 = cast(meta[relay.Constant][26] /* ty=Tensor[(288, 2), uint64] */, dtype="uint64") /* ty=Tensor[(288, 2), uint64] */;
  %503 = reshape(%502, newshape=[576]) /* ty=Tensor[(576), uint64] */;
  %504 = @func_4652(%503) /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(208, 1), float32], Tensor[(576), uint64], Tensor[(208), float32]) */;
  %505 = asinh(%501) /* ty=Tensor[(14, 5, 15), float64] */;
  %506 = %504.1;
  (%505, %506, meta[relay.Constant][26] /* ty=Tensor[(288, 2), uint64] */)
}

def @func_6212() -> (Tensor[(1300), float32],) {
  %507 = @func_5227() /* ty=(Tensor[(1300), float32],) */;
  %508 = %507.0;
  (%508,)
}

def @func_4596() -> (Tensor[(1300), uint16], Tensor[(1300), float64]) {
  %509 = @func_1449() /* ty=Tensor[(1300), float32] */;
  %510 = @func_2170() /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool]) */;
  %511 = %510.0;
  %512 = cast(%511, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
  %513 = shape_of(%509, dtype="int32") /* ty=Tensor[(1), int32] */;
  %514 = cast(%509, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %516 = cast(%511, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %517 = bitwise_and(%514, %515) /* ty=Tensor[(1300), uint16] */;
  %518 = cos(%516) /* ty=Tensor[(1300), float64] */;
  (%517, %518)
}

def @func_5296(%var_5275: Tensor[(1050), float32]) -> (Tensor[(1300), uint16], Tensor[(14, 5, 15), uint8], Tensor[(1050), float32], Tensor[(14, 5, 15), float32]) {
  %519 = cast(%var_5275, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %520 = reshape(%519, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), float32] */;
  %521 = @func_3278(%520) /* ty=(Tensor[(14, 5, 15), float32], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float64], Tensor[(14, 5, 15), uint8]) */;
  %522 = @func_4700() /* ty=(Tensor[(4, 3, 6), float32], Tensor[(14, 5, 15), float32]) */;
  %523 = @func_1745() /* ty=Tensor[(1300), uint16] */;
  %524 = %521.4;
  %525 = %522.1;
  (%523, %524, %var_5275, %525)
}

def @func_7151(%var_7132: Tensor[(360, 2), uint64]) -> (Tensor[(208), float64], Tensor[(360, 2), uint64], Tensor[(720), uint64], Tensor[(13, 10, 10), float32]) {
  %526 = @func_6664() /* ty=(Tensor[(208), float64],) */;
  %527 = cast(%var_7132, dtype="uint64") /* ty=Tensor[(360, 2), uint64] */;
  %528 = reshape(%527, newshape=[720]) /* ty=Tensor[(720), uint64] */;
  %529 = @func_3118(%528) /* ty=(Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(14, 5, 15), float32]) */;
  %530 = %526.0;
  %531 = cast(%530, dtype="float32") /* ty=Tensor[(208), float32] */;
  %532 = cast(%var_7132, dtype="uint64") /* ty=Tensor[(360, 2), uint64] */;
  %533 = reshape(%531, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %534 = reshape(%532, newshape=[720]) /* ty=Tensor[(720), uint64] */;
  %535 = @func_4201(%533, %534) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32], Tensor[(1, 576), uint64], Tensor[(10, 12, 6), float32], Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(10), float32], Tensor[(1170), float32], Tensor[(10), float32]) */;
  %536 = %535.0;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
  %538 = %529.2;
  %539 = atan(%537) /* ty=Tensor[(13, 10, 10), float32] */;
  (%530, %var_7132, %538, %539)
}

def @func_8144() -> (Tensor[(10), float32], Tensor[(3, 1, 11), int32]) {
  %540 = @func_7700() /* ty=(Tensor[(10), float32],) */;
  %541 = %540.0;
  %542 = @func_5595() /* ty=Tensor[(3, 1, 11), int32] */;
  (%541, %542)
}

def @func_6461() -> (Tensor[(14, 5, 15), float32], Tensor[(2, 5, 1300), uint8]) {
  %543 = @func_5548() /* ty=(Tensor[(1300), float32], Tensor[(14, 5, 15), float32], Tensor[(1008), int8]) */;
  %544 = @func_2090() /* ty=Tensor[(1300), bool] */;
  %545 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
  %546 = %545.0;
  %547 = cast(%544, dtype="uint8") /* ty=Tensor[(1300), uint8] */;
  %548 = cast(%546, dtype="uint8") /* ty=Tensor[(2, 5, ?), uint8] */;
  %549 = %543.1;
  %550 = left_shift(%547, %548) /* ty=Tensor[(2, 5, 1300), uint8] */;
  (%549, %550)
}

def @func_7906() -> (Tensor[(10), float32],) {
  %551 = @func_6777() /* ty=Tensor[(10), float32] */;
  (%551,)
}

def @func_1918(%var_1898: Tensor[(1144), int32]) -> (Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(?, 13, 16), float64], Tensor[(140), float32], Tensor[(13, 8, 11), float64], Tensor[(12, 7, 12), bool], Tensor[(1008), int8]) {
  %552 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
  %553 = cast(meta[relay.Constant][27] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %554 = reshape(%553, newshape=[7, 5, 4]) /* ty=Tensor[(7, 5, 4), float32] */;
  %555 = @func_1884(%554) /* ty=(Tensor[(7, 5, 4), float32], Tensor[(?, 13, 16), float64], Tensor[(104, 2), float32], Tensor[(1300), uint16], Tensor[(7, 12, 11), float32]) */;
  %556 = cast(%var_1898, dtype="int32") /* ty=Tensor[(1144), int32] */;
  %557 = reshape(%556, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), int32] */;
  %558 = @func_1022(%557) /* ty=Tensor[(13, 8, 11), bool] */;
  %559 = cast(%558, dtype="float64") /* ty=Tensor[(13, 8, 11), float64] */;
  %560 = cast(meta[relay.Constant][28] /* ty=Tensor[(1008), int8] */, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %561 = cast(meta[relay.Constant][28] /* ty=Tensor[(1008), int8] */, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %562 = cast(meta[relay.Constant][28] /* ty=Tensor[(1008), int8] */, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %563 = reshape(%560, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %564 = reshape(%561, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %565 = reshape(%562, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), bool] */;
  %566 = @func_802(%563, %564, %565) /* ty=(Tensor[(12, 7, 12), bool],) */;
  %567 = %552.0;
  %568 = %555.1;
  %569 = sigmoid(%559) /* ty=Tensor[(13, 8, 11), float64] */;
  %570 = %566.0;
  (%567, %var_1898, %568, meta[relay.Constant][27] /* ty=Tensor[(140), float32] */, %569, %570, meta[relay.Constant][28] /* ty=Tensor[(1008), int8] */)
}

def @func_7700() -> (Tensor[(10), float32],) {
  %571 = @func_3735() /* ty=(Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float32]) */;
  %572 = %571.0;
  (%572,)
}

def @func_3684() -> (Tensor[(14, 5, 15), float32],) {
  %573 = @func_3575() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %574 = %573.0;
  (%574,)
}

def @func_4625() -> (Tensor[(14, 3, 5), float32],) {
  %575 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 3, 5), float32] */, dtype="float32") /* ty=Tensor[(14, 3, 5), float32] */;
  %576 = erf(%575) /* ty=Tensor[(14, 3, 5), float32] */;
  (%576,)
}

def @func_2368(%var_2362: Tensor[(10, 12, 6), uint64]) -> Tensor[(10, 12, 6), uint64] {
  %577 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 12, 6), uint64] */, dtype="uint64") /* ty=Tensor[(10, 12, 6), uint64] */;
  %578 = shape_of(%var_2362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%var_2362, dtype="uint64") /* ty=Tensor[(10, 12, 6), uint64] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%579, %580) /* ty=Tensor[(10, 12, 6), uint64] */
}

def @func_3405(%var_3315: Tensor[(1170), float32], %var_3343: Tensor[(1300), bool], %var_3351: Tensor[(10), float32]) -> (Tensor[(13, 8, 11), bool], Tensor[(1300), bool], Tensor[(1300), float64], Tensor[(10), float32], Tensor[(2, 5, 1170), bool], Tensor[(13, 10, 10), bool], Tensor[(1300), bool], Tensor[(1300), float64], Tensor[(10), float32]) {
  %581 = cast(%var_3315, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %582 = reshape(%581, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %583 = @func_3174(%582) /* ty=(Tensor[(14, 5, 15), float32], Tensor[(1300), float64], Tensor[(13, 8, 11), bool], Tensor[(1170), float32]) */;
  %584 = @func_2090() /* ty=Tensor[(1300), bool] */;
  %585 = cast(%var_3343, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(1), int32] */;
  %587 = cast(%584, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?), float64] */;
  %589 = cast(%var_3351, dtype="float32") /* ty=Tensor[(10), float32] */;
  %590 = reshape(%589, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), float32] */;
  %591 = @func_574(%590) /* ty=(Tensor[(2, 5, ?), float32],) */;
  %592 = %591.0;
  %593 = cast(%var_3315, dtype="bool") /* ty=Tensor[(1170), bool] */;
  %594 = cast(%592, dtype="bool") /* ty=Tensor[(2, 5, ?), bool] */;
  %595 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
  %596 = cast(%var_3343, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %597 = log(%596) /* ty=Tensor[(1300), float32] */;
  %598 = cast(meta[relay.Constant][31] /* ty=Tensor[(1300), float32] */, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(1), int32] */;
  %600 = cast(%597, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?), bool] */;
  %602 = cast(%597, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %603 = exp(%602) /* ty=Tensor[(1300), float64] */;
  %604 = cast(%584, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(1), int32] */;
  %606 = cast(%603, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?), float64] */;
  %608 = @func_2819() /* ty=(Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float32], Tensor[(1144), uint8]) */;
  %609 = %583.2;
  %610 = @func_2090() /* ty=Tensor[(1300), bool] */;
  %611 = divide(%587, %588) /* ty=Tensor[(1300), float64] */;
  %612 = less_equal(%593, %594) /* ty=Tensor[(2, 5, 1170), bool] */;
  %613 = %595.0;
  %614 = less(%600, %601) /* ty=Tensor[(1300), bool] */;
  %615 = multiply(%606, %607) /* ty=Tensor[(1300), float64] */;
  %616 = %608.0;
  (%609, %610, %611, %var_3351, %612, %613, %614, %615, %616)
}

def @func_5816(%var_5813: Tensor[(13, 1, 1), float64]) -> Tensor[(13, 1, 1), float64] {
  %617 = cast(%var_5813, dtype="float64") /* ty=Tensor[(13, 1, 1), float64] */;
  atan(%617) /* ty=Tensor[(13, 1, 1), float64] */
}

def @func_7016() -> Tensor[(1300), float32] {
  %618 = @func_6212() /* ty=(Tensor[(1300), float32],) */;
  %618.0
}

def @func_750(%var_732: Tensor[(13, 10, 10), float32], %var_733: Tensor[(13, 10, 10), float32]) -> (Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) {
  %619 = cast(%var_733, dtype="bool") /* ty=Tensor[(13, 10, 10), bool] */;
  %620 = shape_of(%var_732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%var_732, dtype="bool") /* ty=Tensor[(13, 10, 10), bool] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %623 = cast(meta[relay.Constant][32] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %624 = reshape(%623, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %625 = equal(%621, %622) /* ty=Tensor[(13, 10, 10), bool] */;
  %626 = @func_332(%624) /* ty=Tensor[(?, 13, 16), float64] */;
  (%625, %626, meta[relay.Constant][32] /* ty=Tensor[(208), float32] */)
}

def @func_6873() -> (Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float64], Tensor[(1300), uint16], Tensor[(10), float32], float32, Tensor[(1, 1144), int32]) {
  %627 = @func_3290() /* ty=(Tensor[(10), float32],) */;
  %628 = cast(meta[relay.Constant][33] /* ty=Tensor[(1300), uint16] */, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
  %629 = reshape(%628, newshape=[1300]) /* ty=Tensor[(1300), uint16] */;
  %630 = @func_2590(%629) /* ty=(Tensor[(1300), bool], Tensor[(1300), float64]) */;
  %631 = cast(6.19019f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %632 = reshape(%631, newshape=[]) /* ty=float32 */;
  %633 = @func_2461(%632) /* ty=(Tensor[(10), float32], Tensor[(208), float32], float32) */;
  %634 = cast(6.19019f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %635 = reshape(%634, newshape=[]) /* ty=float32 */;
  %636 = @func_1611(%635) /* ty=(Tensor[(1300), float32], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1, 1144), int32], Tensor[(?, 13, 16), float32], Tensor[(13, 10, 10), bool], float32, Tensor[(65), float32]) */;
  %637 = %627.0;
  %638 = @func_6777() /* ty=Tensor[(10), float32] */;
  %639 = %630.1;
  %640 = %633.0;
  %641 = %636.3;
  (%637, %638, %639, meta[relay.Constant][33] /* ty=Tensor[(1300), uint16] */, %640, 6.19019f /* ty=float32 */, %641)
}

def @func_2329(%var_2298: Tensor[(13, 15, 6), float32]) -> (Tensor[(13, 15, 6), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32]) {
  %642 = cast(%var_2298, dtype="float32") /* ty=Tensor[(13, 15, 6), float32] */;
  %643 = cast(meta[relay.Constant][34] /* ty=Tensor[(1144), int32] */, dtype="int32") /* ty=Tensor[(1144), int32] */;
  %644 = reshape(%643, newshape=[572, 2]) /* ty=Tensor[(572, 2), int32] */;
  %645 = @func_1561(%644) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(13, 8, 11), bool], Tensor[(572, 2), float64]) */;
  %646 = sqrt(%642) /* ty=Tensor[(13, 15, 6), float32] */;
  %647 = %645.1;
  (%646, %647, meta[relay.Constant][34] /* ty=Tensor[(1144), int32] */)
}

def @func_1561(%var_1548: Tensor[(572, 2), int32]) -> (Tensor[(13, 10, 10), bool], Tensor[(13, 8, 11), bool], Tensor[(572, 2), float64]) {
  %648 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
  %649 = cast(%var_1548, dtype="int32") /* ty=Tensor[(572, 2), int32] */;
  %650 = reshape(%649, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), int32] */;
  %651 = cast(%var_1548, dtype="float64") /* ty=Tensor[(572, 2), float64] */;
  %652 = %648.0;
  %653 = @func_1022(%650) /* ty=Tensor[(13, 8, 11), bool] */;
  %654 = log10(%651) /* ty=Tensor[(572, 2), float64] */;
  (%652, %653, %654)
}

def @func_4864() -> (Tensor[(10), float32], Tensor[(10), float32], float32) {
  %655 = cast(-1.13849f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %656 = reshape(%655, newshape=[]) /* ty=float32 */;
  %657 = @func_2461(%656) /* ty=(Tensor[(10), float32], Tensor[(208), float32], float32) */;
  %658 = @func_4672() /* ty=Tensor[(10), float32] */;
  %659 = %657.0;
  (%658, %659, -1.13849f /* ty=float32 */)
}

def @func_2488() -> Tensor[(10), float32] {
  %660 = @func_2136() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) */;
  %660.1
}

def @func_4402(%var_4362: Tensor[(1008), int8]) -> (Tensor[(14, 5, 15), float32], Tensor[(12, 7, 12), bool], Tensor[(1008), int8], Tensor[(14, 5, 15), float32]) {
  %661 = @func_3575() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %662 = cast(%var_4362, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %663 = cast(%var_4362, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %664 = cast(%var_4362, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %665 = reshape(%662, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %666 = reshape(%663, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %667 = reshape(%664, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), bool] */;
  %668 = @func_802(%665, %666, %667) /* ty=(Tensor[(12, 7, 12), bool],) */;
  %669 = @func_2136() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) */;
  %670 = %661.0;
  %671 = %668.0;
  %672 = %669.0;
  (%670, %671, %var_4362, %672)
}

def @func_2038() -> (Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) {
  %673 = cast(meta[relay.Constant][35] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %674 = reshape(%673, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), float32] */;
  %675 = @func_574(%674) /* ty=(Tensor[(2, 5, ?), float32],) */;
  %676 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 1, 11), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 11), float64] */;
  %677 = erf(%676) /* ty=Tensor[(3, 1, 11), float64] */;
  %678 = cast(-2.49571f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %679 = reshape(%678, newshape=[]) /* ty=float32 */;
  %680 = @func_1611(%679) /* ty=(Tensor[(1300), float32], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1, 1144), int32], Tensor[(?, 13, 16), float32], Tensor[(13, 10, 10), bool], float32, Tensor[(65), float32]) */;
  %681 = %680.6;
  %682 = cast(%677, dtype="int32") /* ty=Tensor[(3, 1, 11), int32] */;
  %683 = cast(%681, dtype="int32") /* ty=int32 */;
  %684 = %675.0;
  %685 = right_shift(%682, %683) /* ty=Tensor[(3, 1, 11), int32] */;
  (%684, meta[relay.Constant][35] /* ty=Tensor[(10), float32] */, -2.49571f /* ty=float32 */, %685)
}

def @func_3078(%var_3070: Tensor[(1300), uint16]) -> (float32, Tensor[(1300), float64], Tensor[(1300), uint16]) {
  %686 = @func_1980() /* ty=(Tensor[(13, 10, 10), bool], Tensor[(208), float32], float32, Tensor[(1300), uint16]) */;
  %687 = cast(%var_3070, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
  %688 = reshape(%687, newshape=[1300]) /* ty=Tensor[(1300), uint16] */;
  %689 = @func_2590(%688) /* ty=(Tensor[(1300), bool], Tensor[(1300), float64]) */;
  %690 = %686.2;
  %691 = %689.1;
  (%690, %691, %var_3070)
}

def @func_5878() -> (Tensor[(10), float32],) {
  %692 = @func_4615() /* ty=Tensor[(10), float32] */;
  (%692,)
}

def @func_7859() -> (Tensor[(1300), uint64], Tensor[(14, 5, 15), float64]) {
  %693 = @func_1449() /* ty=Tensor[(1300), float32] */;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %695 = cast(%693, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %696 = reshape(%694, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %697 = reshape(%695, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %698 = @func_5654(%696, %697) /* ty=(Tensor[(1300), bool], Tensor[(1300), uint64], Tensor[(1300), float32]) */;
  %699 = %698.0;
  %700 = cast(%699, dtype="uint64") /* ty=Tensor[(1300), uint64] */;
  %701 = shape_of(%693, dtype="int32") /* ty=Tensor[(1), int32] */;
  %702 = cast(%693, dtype="uint64") /* ty=Tensor[(1300), uint64] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %704 = @func_6718() /* ty=(Tensor[(1300), float64], Tensor[(14, 5, 15), float64]) */;
  %705 = bitwise_xor(%702, %703) /* ty=Tensor[(1300), uint64] */;
  %706 = %704.1;
  (%705, %706)
}

def @func_6259() -> (Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) {
  %707 = cast(meta[relay.Constant][37] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %708 = reshape(%707, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %709 = @func_4417() /* ty=Tensor[(10), float32] */;
  %710 = @func_332(%708) /* ty=Tensor[(?, 13, 16), float64] */;
  (%709, %710, meta[relay.Constant][37] /* ty=Tensor[(208), float32] */)
}

def @func_3174(%var_3172: Tensor[(1170), float32]) -> (Tensor[(14, 5, 15), float32], Tensor[(1300), float64], Tensor[(13, 8, 11), bool], Tensor[(1170), float32]) {
  %711 = @func_2116() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %712 = @func_2090() /* ty=Tensor[(1300), bool] */;
  %713 = cast(%712, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %714 = sigmoid(%713) /* ty=Tensor[(1300), float32] */;
  %715 = cast(%714, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %716 = cast(%var_3172, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %717 = reshape(%716, newshape=[13, 15, 6]) /* ty=Tensor[(13, 15, 6), float32] */;
  %718 = @func_2329(%717) /* ty=(Tensor[(13, 15, 6), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32]) */;
  %719 = %711.0;
  %720 = asin(%715) /* ty=Tensor[(1300), float64] */;
  %721 = %718.1;
  (%719, %720, %721, %var_3172)
}

def @func_2590(%var_2579: Tensor[(1300), uint16]) -> (Tensor[(1300), bool], Tensor[(1300), float64]) {
  %722 = @func_1745() /* ty=Tensor[(1300), uint16] */;
  %723 = cast(%var_2579, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(1), int32] */;
  %725 = cast(%722, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?), bool] */;
  %727 = cast(%var_2579, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %728 = greater(%725, %726) /* ty=Tensor[(1300), bool] */;
  %729 = rsqrt(%727) /* ty=Tensor[(1300), float64] */;
  (%728, %729)
}

def @func_4672() -> Tensor[(10), float32] {
  @func_3845() /* ty=Tensor[(10), float32] */
}

def @func_5706(%var_5682: Tensor[(1, 10, 4), float32]) -> (Tensor[(1, 10, 4), float32], Tensor[(1, 10, 4), float32]) {
  %730 = cast(%var_5682, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %731 = cast(%var_5682, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %732 = sigmoid(%730) /* ty=Tensor[(1, 10, 4), float32] */;
  %733 = log(%731) /* ty=Tensor[(1, 10, 4), float32] */;
  (%732, %733)
}

def @func_2090() -> Tensor[(1300), bool] {
  %734 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %735 = %734.0;
  %736 = cast(%735, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %737 = acosh(%736) /* ty=Tensor[(1300), float64] */;
  %738 = cast(%735, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(1), int32] */;
  %740 = cast(%737, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_and(%740, %741) /* ty=Tensor[(1300), bool] */
}

def @func_7069() -> (Tensor[(2, 5, ?), float64],) {
  %742 = @func_4999() /* ty=(Tensor[(2, 5, ?), float64],) */;
  %743 = %742.0;
  %744 = cast(%743, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
  %745 = exp(%744) /* ty=Tensor[(2, 5, ?), float64] */;
  (%745,)
}

def @func_1611(%var_1600: float32) -> (Tensor[(1300), float32], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1, 1144), int32], Tensor[(?, 13, 16), float32], Tensor[(13, 10, 10), bool], float32, Tensor[(65), float32]) {
  %746 = @func_1449() /* ty=Tensor[(1300), float32] */;
  %747 = cast(%746, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %748 = cast(%746, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %749 = reshape(%747, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %750 = reshape(%748, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %751 = @func_750(%749, %750) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
  %752 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 1144), int32] */, dtype="int32") /* ty=Tensor[(1, 1144), int32] */;
  %753 = reshape(%752, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), int32] */;
  %754 = %751.2;
  %755 = cast(%754, dtype="float32") /* ty=Tensor[(208), float32] */;
  %756 = reshape(%755, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %757 = @func_1169(%756) /* ty=(Tensor[(7, 12, 11), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
  %758 = %757.1;
  %759 = cast(%758, dtype="float32") /* ty=Tensor[(?, 13, 16), float32] */;
  %760 = cast(%var_1600, dtype="float32") /* ty=float32 */;
  %761 = cast(meta[relay.Constant][39] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %762 = cast(%758, dtype="float32") /* ty=Tensor[(?, 13, 16), float32] */;
  %763 = reshape(%760, newshape=[]) /* ty=float32 */;
  %764 = reshape(%761, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), float32] */;
  %765 = reshape(%762, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %766 = @func_1373(%763, %764, %765) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(13, 5, 1), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(13, 5, 208), bool], Tensor[(13, 5, 208), int32], Tensor[(?, 13, 16), bool], Tensor[(13, 10, 10), bool], Tensor[(13, 5, 208), bool], Tensor[(?, 13, 16), int8]) */;
  %767 = @func_1022(%753) /* ty=Tensor[(13, 8, 11), bool] */;
  %768 = acos(%759) /* ty=Tensor[(?, 13, 16), float32] */;
  %769 = %766.0;
  (%746, %754, %767, meta[relay.Constant][38] /* ty=Tensor[(1, 1144), int32] */, %768, %769, %var_1600, meta[relay.Constant][39] /* ty=Tensor[(65), float32] */)
}

def @func_5516(%var_5444: Tensor[(1386), int64], %var_5497: Tensor[(1008), int8]) -> (Tensor[(10), float32], Tensor[(8, ?), bool], Tensor[(8), uint64], Tensor[(14, 9, 11), bool], Tensor[(1386), int64], Tensor[(14, 9, 11), bool], Tensor[(1300), float32], Tensor[(14, 3, 5), float32], Tensor[(1008), int8], Tensor[(12, 7, 12), float64]) {
  %770 = cast(meta[relay.Constant][40] /* ty=Tensor[(8), uint64] */, dtype="uint64") /* ty=Tensor[(8), uint64] */;
  %771 = cast(meta[relay.Constant][40] /* ty=Tensor[(8), uint64] */, dtype="uint64") /* ty=Tensor[(8), uint64] */;
  %772 = reshape(%770, newshape=[8, 1]) /* ty=Tensor[(8, 1), uint64] */;
  %773 = reshape(%771, newshape=[8, 1]) /* ty=Tensor[(8, 1), uint64] */;
  %774 = cast(%var_5444, dtype="int64") /* ty=Tensor[(1386), int64] */;
  %775 = cast(%var_5444, dtype="int64") /* ty=Tensor[(1386), int64] */;
  %776 = reshape(%774, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
  %777 = reshape(%775, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
  %778 = @func_1721(%776, %777) /* ty=(Tensor[(14, 9, 11), bool],) */;
  %779 = cast(%var_5444, dtype="int64") /* ty=Tensor[(1386), int64] */;
  %780 = cast(%var_5444, dtype="int64") /* ty=Tensor[(1386), int64] */;
  %781 = reshape(%779, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
  %782 = reshape(%780, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
  %783 = @func_1721(%781, %782) /* ty=(Tensor[(14, 9, 11), bool],) */;
  %784 = @func_4625() /* ty=(Tensor[(14, 3, 5), float32],) */;
  %785 = cast(%var_5497, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %786 = cast(%var_5497, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %787 = cast(%var_5497, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %788 = reshape(%785, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %789 = reshape(%786, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %790 = reshape(%787, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), bool] */;
  %791 = @func_802(%788, %789, %790) /* ty=(Tensor[(12, 7, 12), bool],) */;
  %792 = %791.0;
  %793 = cast(%792, dtype="float64") /* ty=Tensor[(12, 7, 12), float64] */;
  %794 = asin(%793) /* ty=Tensor[(12, 7, 12), float64] */;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(12, 7, 12), float64] */;
  %796 = @func_4276() /* ty=Tensor[(10), float32] */;
  %797 = @func_4793(%772, %773) /* ty=Tensor[(8, ?), bool] */;
  %798 = %778.0;
  %799 = %783.0;
  %800 = @func_1449() /* ty=Tensor[(1300), float32] */;
  %801 = %784.0;
  %802 = sin(%795) /* ty=Tensor[(12, 7, 12), float64] */;
  (%796, %797, meta[relay.Constant][40] /* ty=Tensor[(8), uint64] */, %798, %var_5444, %799, %800, %801, %var_5497, %802)
}

def @func_3118(%var_3111: Tensor[(720), uint64]) -> (Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(14, 5, 15), float32]) {
  %803 = cast(%var_3111, dtype="uint64") /* ty=Tensor[(720), uint64] */;
  %804 = reshape(%803, newshape=[10, 12, 6]) /* ty=Tensor[(10, 12, 6), uint64] */;
  %805 = @func_2116() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %806 = @func_1745() /* ty=Tensor[(1300), uint16] */;
  %807 = @func_2368(%804) /* ty=Tensor[(10, 12, 6), uint64] */;
  %808 = %805.0;
  (%806, %807, %var_3111, %808)
}

def @func_6637(%var_6629: Tensor[(7, 11, 11), float64], %var_6630: Tensor[(7, 11, 11), float64]) -> Tensor[(7, 11, 11), float64] {
  %809 = cast(%var_6630, dtype="float64") /* ty=Tensor[(7, 11, 11), float64] */;
  %810 = shape_of(%var_6629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%var_6629, dtype="float64") /* ty=Tensor[(7, 11, 11), float64] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%811, %812) /* ty=Tensor[(7, 11, 11), float64] */
}

def @func_5654(%var_5635: Tensor[(1300), float32], %var_5639: Tensor[(1300), float32]) -> (Tensor[(1300), bool], Tensor[(1300), uint64], Tensor[(1300), float32]) {
  %813 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %814 = %813.2;
  %815 = cast(meta[relay.Constant][41] /* ty=Tensor[(1300), float32] */, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(1), int32] */;
  %817 = cast(%814, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?), bool] */;
  %819 = cast(%var_5635, dtype="uint64") /* ty=Tensor[(1300), uint64] */;
  %820 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(1300), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %821 = cast(meta[relay.Constant][41] /* ty=Tensor[(1300), float32] */, dtype="uint64") /* ty=Tensor[(1300), uint64] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %823 = cast(%var_5639, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %824 = shape_of(%814, dtype="int32") /* ty=Tensor[(1), int32] */;
  %825 = cast(%814, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?), float32] */;
  %827 = not_equal(%817, %818) /* ty=Tensor[(1300), bool] */;
  %828 = minimum(%821, %822) /* ty=Tensor[(1300), uint64] */;
  %829 = power(%825, %826) /* ty=Tensor[(1300), float32] */;
  (%827, %828, %829)
}

def @func_5750() -> (float32, Tensor[(10), float32], Tensor[(10), float32]) {
  %830 = @func_5391() /* ty=float32 */;
  %831 = @func_4417() /* ty=Tensor[(10), float32] */;
  %832 = @func_4892() /* ty=Tensor[(10), float32] */;
  (%830, %831, %832)
}

def @func_6065() -> (Tensor[(14, 5, 15), float32],) {
  %833 = @func_5130() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %834 = %833.0;
  (%834,)
}

def @func_2889(%var_2863: Tensor[(208), float32], %var_2884: Tensor[(154, 9), int64]) -> (Tensor[(14, 5, 15), float32], Tensor[(208), float32], Tensor[(208), float32], Tensor[(1300), bool], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int64]) {
  %835 = @func_2642() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %836 = %835.0;
  %837 = cast(%836, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %838 = cast(%var_2863, dtype="float32") /* ty=Tensor[(208), float32] */;
  %839 = reshape(%838, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %840 = @func_1169(%839) /* ty=(Tensor[(7, 12, 11), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
  %841 = cast(%var_2863, dtype="float32") /* ty=Tensor[(208), float32] */;
  %842 = reshape(%841, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %843 = @func_1430(%842) /* ty=(Tensor[(?, 13, 16), float64], Tensor[(1, 576), uint64], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(1300), bool]) */;
  %844 = cast(%var_2884, dtype="int64") /* ty=Tensor[(154, 9), int64] */;
  %845 = cast(%var_2884, dtype="int64") /* ty=Tensor[(154, 9), int64] */;
  %846 = reshape(%844, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
  %847 = reshape(%845, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
  %848 = @func_1721(%846, %847) /* ty=(Tensor[(14, 9, 11), bool],) */;
  %849 = log(%837) /* ty=Tensor[(14, 5, 15), float32] */;
  %850 = %840.2;
  %851 = %843.5;
  %852 = %848.0;
  (%849, %850, %var_2863, %851, %852, %var_2884)
}

def @func_7372(%var_7356: Tensor[(13), float64]) -> (Tensor[(2, 5, ?), float64], Tensor[(?, 13, 16), float64], Tensor[(4, 52), float32], Tensor[(13, 1, 1), float64], Tensor[(13), float64]) {
  %853 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 52), float32] */, dtype="float32") /* ty=Tensor[(4, 52), float32] */;
  %854 = reshape(%853, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %855 = cast(%var_7356, dtype="float64") /* ty=Tensor[(13), float64] */;
  %856 = reshape(%855, newshape=[13, 1, 1]) /* ty=Tensor[(13, 1, 1), float64] */;
  %857 = @func_7199() /* ty=Tensor[(2, 5, ?), float64] */;
  %858 = @func_332(%854) /* ty=Tensor[(?, 13, 16), float64] */;
  %859 = @func_5816(%856) /* ty=Tensor[(13, 1, 1), float64] */;
  (%857, %858, meta[relay.Constant][42] /* ty=Tensor[(4, 52), float32] */, %859, %var_7356)
}

def @func_5130() -> (Tensor[(14, 5, 15), float32],) {
  %860 = @func_3684() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %861 = %860.0;
  %862 = cast(%861, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %863 = log2(%862) /* ty=Tensor[(14, 5, 15), float32] */;
  (%863,)
}

def @func_5992() -> Tensor[(1300), bool] {
  @func_2090() /* ty=Tensor[(1300), bool] */
}

def @func_7199() -> Tensor[(2, 5, ?), float64] {
  %864 = @func_4999() /* ty=(Tensor[(2, 5, ?), float64],) */;
  %865 = %864.0;
  %866 = cast(%865, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
  atan(%866) /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_6989() -> (Tensor[(10), float32],) {
  %867 = @func_5878() /* ty=(Tensor[(10), float32],) */;
  %868 = %867.0;
  (%868,)
}

def @func_4700() -> (Tensor[(4, 3, 6), float32], Tensor[(14, 5, 15), float32]) {
  %869 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 3, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 3, 6), float32] */;
  %870 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 3, 6), float32] */, dtype="float32") /* ty=Tensor[(4, 3, 6), float32] */;
  %871 = @func_3684() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %872 = divide(%869, %870) /* ty=Tensor[(4, 3, 6), float32] */;
  %873 = %871.0;
  (%872, %873)
}

def @func_4547(%var_4533: Tensor[(195), float32]) -> (Tensor[(1144), float64], Tensor[(1, 576), uint64], Tensor[(720), uint64], Tensor[(13, 5, 3), float32], Tensor[(195), float32], Tensor[(2, 104), uint64]) {
  %874 = @func_3430() /* ty=(Tensor[(1144), float64],) */;
  %875 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 104), float32] */, dtype="float32") /* ty=Tensor[(2, 104), float32] */;
  %876 = cast(meta[relay.Constant][46] /* ty=Tensor[(720), uint64] */, dtype="uint64") /* ty=Tensor[(720), uint64] */;
  %877 = reshape(%875, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %878 = reshape(%876, newshape=[720]) /* ty=Tensor[(720), uint64] */;
  %879 = @func_4201(%877, %878) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32], Tensor[(1, 576), uint64], Tensor[(10, 12, 6), float32], Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(10), float32], Tensor[(1170), float32], Tensor[(10), float32]) */;
  %880 = cast(%var_4533, dtype="float32") /* ty=Tensor[(195), float32] */;
  %881 = cast(%var_4533, dtype="float32") /* ty=Tensor[(195), float32] */;
  %882 = reshape(%880, newshape=[13, 5, 3]) /* ty=Tensor[(13, 5, 3), float32] */;
  %883 = reshape(%881, newshape=[13, 5, 3]) /* ty=Tensor[(13, 5, 3), float32] */;
  %884 = @func_3911(%882, %883) /* ty=(Tensor[(13, 5, 3), float32],) */;
  %885 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 104), float32] */, dtype="uint64") /* ty=Tensor[(2, 104), uint64] */;
  %886 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(2, 104), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %887 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 104), float32] */, dtype="uint64") /* ty=Tensor[(2, 104), uint64] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %889 = %874.0;
  %890 = %879.3;
  %891 = %884.0;
  %892 = multiply(%887, %888) /* ty=Tensor[(2, 104), uint64] */;
  (%889, %890, meta[relay.Constant][46] /* ty=Tensor[(720), uint64] */, %891, %var_4533, %892)
}

def @func_8097(%var_8085: Tensor[(720, 1), uint64]) -> (Tensor[(10), float32], Tensor[(1008), int8], Tensor[(1300), uint16], Tensor[(1300), uint16], Tensor[(720, 1), float64]) {
  %893 = @func_5548() /* ty=(Tensor[(1300), float32], Tensor[(14, 5, 15), float32], Tensor[(1008), int8]) */;
  %894 = cast(%var_8085, dtype="uint64") /* ty=Tensor[(720, 1), uint64] */;
  %895 = reshape(%894, newshape=[720]) /* ty=Tensor[(720), uint64] */;
  %896 = @func_3118(%895) /* ty=(Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(14, 5, 15), float32]) */;
  %897 = cast(%var_8085, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
  %898 = @func_7825() /* ty=Tensor[(10), float32] */;
  %899 = %893.2;
  %900 = @func_1745() /* ty=Tensor[(1300), uint16] */;
  %901 = %896.0;
  %902 = tan(%897) /* ty=Tensor[(720, 1), float64] */;
  (%898, %899, %900, %901, %902)
}

def @func_3516() -> (Tensor[(10), float32],) {
  %903 = @func_2488() /* ty=Tensor[(10), float32] */;
  (%903,)
}

def @func_7255() -> (Tensor[(1300), uint16], Tensor[(10), float32], Tensor[(12, 7, 12), float64], Tensor[(1386), int64], Tensor[(1008), int8], Tensor[(10), float32], Tensor[(14, 5, 15), float32]) {
  %904 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %905 = @func_6135() /* ty=(Tensor[(10), float32], Tensor[(10), float32]) */;
  %906 = cast(meta[relay.Constant][48] /* ty=Tensor[(1386), int64] */, dtype="int64") /* ty=Tensor[(1386), int64] */;
  %907 = cast(meta[relay.Constant][49] /* ty=Tensor[(1008), int8] */, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %908 = reshape(%906, newshape=[1386]) /* ty=Tensor[(1386), int64] */;
  %909 = reshape(%907, newshape=[1008]) /* ty=Tensor[(1008), int8] */;
  %910 = @func_5516(%908, %909) /* ty=(Tensor[(10), float32], Tensor[(8, ?), bool], Tensor[(8), uint64], Tensor[(14, 9, 11), bool], Tensor[(1386), int64], Tensor[(14, 9, 11), bool], Tensor[(1300), float32], Tensor[(14, 3, 5), float32], Tensor[(1008), int8], Tensor[(12, 7, 12), float64]) */;
  %911 = @func_6065() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %912 = %904.0;
  %913 = %905.0;
  %914 = %910.9;
  %915 = @func_3845() /* ty=Tensor[(10), float32] */;
  %916 = %911.0;
  (%912, %913, %914, meta[relay.Constant][48] /* ty=Tensor[(1386), int64] */, meta[relay.Constant][49] /* ty=Tensor[(1008), int8] */, %915, %916)
}

def @func_7436() -> Tensor[(10), float32] {
  %917 = @func_6135() /* ty=(Tensor[(10), float32], Tensor[(10), float32]) */;
  %917.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4626() -> (Tensor[(14, 3, 5), float32],) {
  %2 = fn () -> (Tensor[(14, 3, 5), float32],) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 3, 5), float32] */, dtype="float32") /* ty=Tensor[(14, 3, 5), float32] */;
    %1 = erf(%0) /* ty=Tensor[(14, 3, 5), float32] */;
    (%1,)
  };
  %2() /* ty=(Tensor[(14, 3, 5), float32],) */
}

def @func_7652() -> Tensor[(10), float32] {
  @func_7650() /* ty=Tensor[(10), float32] */
}

def @func_5752() -> (float32, Tensor[(10), float32], Tensor[(10), float32]) {
  @func_5750() /* ty=(float32, Tensor[(10), float32], Tensor[(10), float32]) */
}

def @func_3497() -> (Tensor[(1300), bool], Tensor[(1008), int8], Tensor[(1144), int32], Tensor[(1300), float32]) {
  %9 = fn () -> (Tensor[(1300), bool], Tensor[(1008), int8], Tensor[(1144), int32], Tensor[(1300), float32]) {
    %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(1144), int32] */, dtype="int32") /* ty=Tensor[(1144), int32] */;
    %4 = reshape(%3, newshape=[1144]) /* ty=Tensor[(1144), int32] */;
    %5 = @func_1918(%4) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(?, 13, 16), float64], Tensor[(140), float32], Tensor[(13, 8, 11), float64], Tensor[(12, 7, 12), bool], Tensor[(1008), int8]) */;
    %6 = @func_2090() /* ty=Tensor[(1300), bool] */;
    %7 = %5.6;
    %8 = @func_2348() /* ty=Tensor[(1300), float32] */;
    (%6, %7, meta[relay.Constant][1] /* ty=Tensor[(1144), int32] */, %8)
  };
  %9() /* ty=(Tensor[(1300), bool], Tensor[(1008), int8], Tensor[(1144), int32], Tensor[(1300), float32]) */
}

def @func_6990() -> (Tensor[(10), float32],) {
  %12 = fn () -> (Tensor[(10), float32],) {
    %10 = @func_5878() /* ty=(Tensor[(10), float32],) */;
    %11 = %10.0;
    (%11,)
  };
  %12() /* ty=(Tensor[(10), float32],) */
}

def @func_5816(%var_5813: Tensor[(13, 1, 1), float64]) -> Tensor[(13, 1, 1), float64] {
  %13 = cast(%var_5813, dtype="float64") /* ty=Tensor[(13, 1, 1), float64] */;
  atan(%13) /* ty=Tensor[(13, 1, 1), float64] */
}

def @func_2172() -> (Tensor[(1300), float32], Tensor[(13, 10, 10), bool]) {
  @func_2170() /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool]) */
}

def @func_332(%var_306: Tensor[(1, 13, 16), float32]) -> Tensor[(?, 13, 16), float64] {
  %14 = cast(%var_306, dtype="float32") /* ty=Tensor[(1, 13, 16), float32] */;
  %15 = sqrt(%14) /* ty=Tensor[(1, 13, 16), float32] */;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(1, 13, 16), float64] */;
  %17 = shape_of(%var_306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%var_306, dtype="float64") /* ty=Tensor[(1, 13, 16), float64] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %20 = floor_mod(%18, %19) /* ty=Tensor[(?, 13, 16), float64] */;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(?, 13, 16), float64] */;
  log2(%21) /* ty=Tensor[(?, 13, 16), float64] */
}

def @func_1235() -> (Tensor[(13, 10, 10), bool],) {
  @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */
}

def @func_1982() -> (Tensor[(13, 10, 10), bool], Tensor[(208), float32], float32, Tensor[(1300), uint16]) {
  @func_1980() /* ty=(Tensor[(13, 10, 10), bool], Tensor[(208), float32], float32, Tensor[(1300), uint16]) */
}

def @func_7569() -> (Tensor[(14, 5, 15), float32], Tensor[(2, 5, ?), float64]) {
  %25 = fn () -> (Tensor[(14, 5, 15), float32], Tensor[(2, 5, ?), float64]) {
    %22 = @func_4700() /* ty=(Tensor[(4, 3, 6), float32], Tensor[(14, 5, 15), float32]) */;
    %23 = %22.1;
    %24 = @func_7199() /* ty=Tensor[(2, 5, ?), float64] */;
    (%23, %24)
  };
  %25() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(2, 5, ?), float64]) */
}

def @func_3081(%var_3079: Tensor[(1300), uint16]) -> (float32, Tensor[(1300), float64], Tensor[(1300), uint16]) {
  @func_3078(%var_3079) /* ty=(float32, Tensor[(1300), float64], Tensor[(1300), uint16]) */
}

def @func_2331(%var_2330: Tensor[(13, 15, 6), float32]) -> (Tensor[(13, 15, 6), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32]) {
  %32 = fn (%var_2298: Tensor[(13, 15, 6), float32]) -> (Tensor[(13, 15, 6), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32]) {
    %26 = cast(%var_2298, dtype="float32") /* ty=Tensor[(13, 15, 6), float32] */;
    %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(1144), int32] */, dtype="int32") /* ty=Tensor[(1144), int32] */;
    %28 = reshape(%27, newshape=[572, 2]) /* ty=Tensor[(572, 2), int32] */;
    %29 = @func_1561(%28) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(13, 8, 11), bool], Tensor[(572, 2), float64]) */;
    %30 = sqrt(%26) /* ty=Tensor[(13, 15, 6), float32] */;
    %31 = %29.1;
    (%30, %31, meta[relay.Constant][2] /* ty=Tensor[(1144), int32] */)
  };
  %32(%var_2330) /* ty=(Tensor[(13, 15, 6), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32]) */
}

def @func_1024(%var_1023: Tensor[(13, 8, 11), int32]) -> Tensor[(13, 8, 11), bool] {
  %35 = fn (%var_1010: Tensor[(13, 8, 11), int32]) -> Tensor[(13, 8, 11), bool] {
    %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 1, 11), int32] */, dtype="bool") /* ty=Tensor[(13, 1, 11), bool] */;
    %34 = cast(%var_1010, dtype="bool") /* ty=Tensor[(13, 8, 11), bool] */;
    less_equal(%33, %34) /* ty=Tensor[(13, 8, 11), bool] */
  };
  %35(%var_1023) /* ty=Tensor[(13, 8, 11), bool] */
}

def @func_1078() -> (Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) {
  %36 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 12, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 11), float32] */;
  %37 = cast(meta[relay.Constant][5] /* ty=Tensor[(1300), float32] */, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %38 = cast(meta[relay.Constant][5] /* ty=Tensor[(1300), float32] */, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %39 = reshape(%37, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %40 = reshape(%38, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %41 = @func_750(%39, %40) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
  %42 = log2(%36) /* ty=Tensor[(7, 12, 11), float32] */;
  %43 = %41.0;
  (%42, %43, meta[relay.Constant][5] /* ty=Tensor[(1300), float32] */)
}

def @func_3177(%var_3175: Tensor[(1170), float32]) -> (Tensor[(14, 5, 15), float32], Tensor[(1300), float64], Tensor[(13, 8, 11), bool], Tensor[(1170), float32]) {
  @func_3174(%var_3175) /* ty=(Tensor[(14, 5, 15), float32], Tensor[(1300), float64], Tensor[(13, 8, 11), bool], Tensor[(1170), float32]) */
}

def @func_4736(%var_4735: Tensor[(1, 1008), int8]) -> (Tensor[(1144), float64], Tensor[(?, 1008), float32]) {
  %59 = fn (%var_4717: Tensor[(1, 1008), int8]) -> (Tensor[(1144), float64], Tensor[(?, 1008), float32]) {
    %44 = @func_3430() /* ty=(Tensor[(1144), float64],) */;
    %45 = cast(%var_4717, dtype="int8") /* ty=Tensor[(1, 1008), int8] */;
    %46 = cast(%var_4717, dtype="int8") /* ty=Tensor[(1, 1008), int8] */;
    %47 = cast(%var_4717, dtype="bool") /* ty=Tensor[(1, 1008), bool] */;
    %48 = reshape(%45, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
    %49 = reshape(%46, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
    %50 = reshape(%47, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), bool] */;
    %51 = @func_802(%48, %49, %50) /* ty=(Tensor[(12, 7, 12), bool],) */;
    %52 = %51.0;
    %53 = cast(%52, dtype="float32") /* ty=Tensor[(12, 7, 12), float32] */;
    %54 = shape_of(%var_4717, dtype="int32") /* ty=Tensor[(2), int32] */;
    %55 = cast(%var_4717, dtype="float32") /* ty=Tensor[(1, 1008), float32] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %57 = %44.0;
    %58 = floor_divide(%55, %56) /* ty=Tensor[(?, 1008), float32] */;
    (%57, %58)
  };
  %59(%var_4735) /* ty=(Tensor[(1144), float64], Tensor[(?, 1008), float32]) */
}

def @func_7069() -> (Tensor[(2, 5, ?), float64],) {
  %60 = @func_4999() /* ty=(Tensor[(2, 5, ?), float64],) */;
  %61 = %60.0;
  %62 = cast(%61, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
  %63 = exp(%62) /* ty=Tensor[(2, 5, ?), float64] */;
  (%63,)
}

def @func_7256() -> (Tensor[(1300), uint16], Tensor[(10), float32], Tensor[(12, 7, 12), float64], Tensor[(1386), int64], Tensor[(1008), int8], Tensor[(10), float32], Tensor[(14, 5, 15), float32]) {
  %77 = fn () -> (Tensor[(1300), uint16], Tensor[(10), float32], Tensor[(12, 7, 12), float64], Tensor[(1386), int64], Tensor[(1008), int8], Tensor[(10), float32], Tensor[(14, 5, 15), float32]) {
    %64 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
    %65 = @func_6135() /* ty=(Tensor[(10), float32], Tensor[(10), float32]) */;
    %66 = cast(meta[relay.Constant][6] /* ty=Tensor[(1386), int64] */, dtype="int64") /* ty=Tensor[(1386), int64] */;
    %67 = cast(meta[relay.Constant][7] /* ty=Tensor[(1008), int8] */, dtype="int8") /* ty=Tensor[(1008), int8] */;
    %68 = reshape(%66, newshape=[1386]) /* ty=Tensor[(1386), int64] */;
    %69 = reshape(%67, newshape=[1008]) /* ty=Tensor[(1008), int8] */;
    %70 = @func_5516(%68, %69) /* ty=(Tensor[(10), float32], Tensor[(8, ?), bool], Tensor[(8), uint64], Tensor[(14, 9, 11), bool], Tensor[(1386), int64], Tensor[(14, 9, 11), bool], Tensor[(1300), float32], Tensor[(14, 3, 5), float32], Tensor[(1008), int8], Tensor[(12, 7, 12), float64]) */;
    %71 = @func_6065() /* ty=(Tensor[(14, 5, 15), float32],) */;
    %72 = %64.0;
    %73 = %65.0;
    %74 = %70.9;
    %75 = @func_3845() /* ty=Tensor[(10), float32] */;
    %76 = %71.0;
    (%72, %73, %74, meta[relay.Constant][6] /* ty=Tensor[(1386), int64] */, meta[relay.Constant][7] /* ty=Tensor[(1008), int8] */, %75, %76)
  };
  %77() /* ty=(Tensor[(1300), uint16], Tensor[(10), float32], Tensor[(12, 7, 12), float64], Tensor[(1386), int64], Tensor[(1008), int8], Tensor[(10), float32], Tensor[(14, 5, 15), float32]) */
}

def @func_8144() -> (Tensor[(10), float32], Tensor[(3, 1, 11), int32]) {
  %78 = @func_7700() /* ty=(Tensor[(10), float32],) */;
  %79 = %78.0;
  %80 = @func_5595() /* ty=Tensor[(3, 1, 11), int32] */;
  (%79, %80)
}

def @func_807(%var_804: Tensor[(12, 7, 12), int8], %var_805: Tensor[(12, 7, 12), int8], %var_806: Tensor[(12, 7, 12), bool]) -> (Tensor[(12, 7, 12), bool],) {
  @func_802(%var_804, %var_805, %var_806) /* ty=(Tensor[(12, 7, 12), bool],) */
}

def @func_3040(%var_3039: Tensor[(720), uint64]) -> (float32, float32, Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(1300), float64]) {
  %94 = fn (%var_3030: Tensor[(720), uint64]) -> (float32, float32, Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(1300), float64]) {
    %81 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
    %82 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
    %83 = cast(%var_3030, dtype="uint64") /* ty=Tensor[(720), uint64] */;
    %84 = reshape(%83, newshape=[10, 12, 6]) /* ty=Tensor[(10, 12, 6), uint64] */;
    %85 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
    %86 = %85.0;
    %87 = cast(%86, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %88 = sqrt(%87) /* ty=Tensor[(1300), float32] */;
    %89 = cast(%88, dtype="float64") /* ty=Tensor[(1300), float64] */;
    %90 = %81.2;
    %91 = %82.2;
    %92 = @func_2368(%84) /* ty=Tensor[(10, 12, 6), uint64] */;
    %93 = asinh(%89) /* ty=Tensor[(1300), float64] */;
    (%90, %91, %92, %var_3030, %93)
  };
  %94(%var_3039) /* ty=(float32, float32, Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(1300), float64]) */
}

def @func_5706(%var_5682: Tensor[(1, 10, 4), float32]) -> (Tensor[(1, 10, 4), float32], Tensor[(1, 10, 4), float32]) {
  %95 = cast(%var_5682, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %96 = cast(%var_5682, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %97 = sigmoid(%95) /* ty=Tensor[(1, 10, 4), float32] */;
  %98 = log(%96) /* ty=Tensor[(1, 10, 4), float32] */;
  (%97, %98)
}

def @func_6545() -> (Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) {
  %99 = @func_3684() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %100 = @func_3516() /* ty=(Tensor[(10), float32],) */;
  %101 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %102 = %99.0;
  %103 = %100.0;
  %104 = %101.1;
  (%102, %103, %104)
}

def @func_7524() -> (Tensor[(?, 13, 16), float64], Tensor[(1, 2, 4), float32], Tensor[(2, 4), float32]) {
  %111 = fn () -> (Tensor[(?, 13, 16), float64], Tensor[(1, 2, 4), float32], Tensor[(2, 4), float32]) {
    %105 = @func_6259() /* ty=(Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
    %106 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 4), float32] */, dtype="float32") /* ty=Tensor[(2, 4), float32] */;
    %107 = reshape(%106, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), float32] */;
    %108 = @func_3776(%107) /* ty=(Tensor[(1, 2, 4), float32],) */;
    %109 = %105.1;
    %110 = %108.0;
    (%109, %110, meta[relay.Constant][8] /* ty=Tensor[(2, 4), float32] */)
  };
  %111() /* ty=(Tensor[(?, 13, 16), float64], Tensor[(1, 2, 4), float32], Tensor[(2, 4), float32]) */
}

def @func_5393() -> float32 {
  @func_5391() /* ty=float32 */
}

def @func_3532() -> Tensor[(1300), bool] {
  @func_2090() /* ty=Tensor[(1300), bool] */
}

def @func_7700() -> (Tensor[(10), float32],) {
  %112 = @func_3735() /* ty=(Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float32]) */;
  %113 = %112.0;
  (%113,)
}

def @func_5516(%var_5444: Tensor[(1386), int64], %var_5497: Tensor[(1008), int8]) -> (Tensor[(10), float32], Tensor[(8, ?), bool], Tensor[(8), uint64], Tensor[(14, 9, 11), bool], Tensor[(1386), int64], Tensor[(14, 9, 11), bool], Tensor[(1300), float32], Tensor[(14, 3, 5), float32], Tensor[(1008), int8], Tensor[(12, 7, 12), float64]) {
  %114 = cast(meta[relay.Constant][9] /* ty=Tensor[(8), uint64] */, dtype="uint64") /* ty=Tensor[(8), uint64] */;
  %115 = cast(meta[relay.Constant][9] /* ty=Tensor[(8), uint64] */, dtype="uint64") /* ty=Tensor[(8), uint64] */;
  %116 = reshape(%114, newshape=[8, 1]) /* ty=Tensor[(8, 1), uint64] */;
  %117 = reshape(%115, newshape=[8, 1]) /* ty=Tensor[(8, 1), uint64] */;
  %118 = cast(%var_5444, dtype="int64") /* ty=Tensor[(1386), int64] */;
  %119 = cast(%var_5444, dtype="int64") /* ty=Tensor[(1386), int64] */;
  %120 = reshape(%118, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
  %121 = reshape(%119, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
  %122 = @func_1721(%120, %121) /* ty=(Tensor[(14, 9, 11), bool],) */;
  %123 = cast(%var_5444, dtype="int64") /* ty=Tensor[(1386), int64] */;
  %124 = cast(%var_5444, dtype="int64") /* ty=Tensor[(1386), int64] */;
  %125 = reshape(%123, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
  %126 = reshape(%124, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
  %127 = @func_1721(%125, %126) /* ty=(Tensor[(14, 9, 11), bool],) */;
  %128 = @func_4625() /* ty=(Tensor[(14, 3, 5), float32],) */;
  %129 = cast(%var_5497, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %130 = cast(%var_5497, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %131 = cast(%var_5497, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %132 = reshape(%129, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %133 = reshape(%130, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %134 = reshape(%131, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), bool] */;
  %135 = @func_802(%132, %133, %134) /* ty=(Tensor[(12, 7, 12), bool],) */;
  %136 = %135.0;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(12, 7, 12), float64] */;
  %138 = asin(%137) /* ty=Tensor[(12, 7, 12), float64] */;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(12, 7, 12), float64] */;
  %140 = @func_4276() /* ty=Tensor[(10), float32] */;
  %141 = @func_4793(%116, %117) /* ty=Tensor[(8, ?), bool] */;
  %142 = %122.0;
  %143 = %127.0;
  %144 = @func_1449() /* ty=Tensor[(1300), float32] */;
  %145 = %128.0;
  %146 = sin(%139) /* ty=Tensor[(12, 7, 12), float64] */;
  (%140, %141, meta[relay.Constant][9] /* ty=Tensor[(8), uint64] */, %142, %var_5444, %143, %144, %145, %var_5497, %146)
}

def @func_5548() -> (Tensor[(1300), float32], Tensor[(14, 5, 15), float32], Tensor[(1008), int8]) {
  %147 = @func_2090() /* ty=Tensor[(1300), bool] */;
  %148 = cast(%147, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %149 = cast(meta[relay.Constant][10] /* ty=Tensor[(1008), int8] */, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %150 = reshape(%149, newshape=[1008]) /* ty=Tensor[(1008), int8] */;
  %151 = @func_4402(%150) /* ty=(Tensor[(14, 5, 15), float32], Tensor[(12, 7, 12), bool], Tensor[(1008), int8], Tensor[(14, 5, 15), float32]) */;
  %152 = log2(%148) /* ty=Tensor[(1300), float32] */;
  %153 = %151.3;
  (%152, %153, meta[relay.Constant][10] /* ty=Tensor[(1008), int8] */)
}

def @func_2423() -> float32 {
  %155 = fn () -> float32 {
    %154 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
    %154.2
  };
  %155() /* ty=float32 */
}

def @func_3778(%var_3777: Tensor[(1, 2, 4), float32]) -> (Tensor[(1, 2, 4), float32],) {
  %159 = fn (%var_3766: Tensor[(1, 2, 4), float32]) -> (Tensor[(1, 2, 4), float32],) {
    %156 = cast(5.18952f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %157 = cast(%var_3766, dtype="float32") /* ty=Tensor[(1, 2, 4), float32] */;
    %158 = subtract(%156, %157) /* ty=Tensor[(1, 2, 4), float32] */;
    (%158,)
  };
  %159(%var_3777) /* ty=(Tensor[(1, 2, 4), float32],) */
}

def @func_5819(%var_5817: Tensor[(13, 1, 1), float64]) -> Tensor[(13, 1, 1), float64] {
  @func_5816(%var_5817) /* ty=Tensor[(13, 1, 1), float64] */
}

def @func_1980() -> (Tensor[(13, 10, 10), bool], Tensor[(208), float32], float32, Tensor[(1300), uint16]) {
  %160 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %161 = cast(5.00003f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %162 = reshape(%161, newshape=[]) /* ty=float32 */;
  %163 = @func_1611(%162) /* ty=(Tensor[(1300), float32], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1, 1144), int32], Tensor[(?, 13, 16), float32], Tensor[(13, 10, 10), bool], float32, Tensor[(65), float32]) */;
  %164 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %165 = %160.1;
  %166 = %163.1;
  %167 = %164.0;
  (%165, %166, 5.00003f /* ty=float32 */, %167)
}

def @func_1746() -> Tensor[(1300), uint16] {
  %173 = fn () -> Tensor[(1300), uint16] {
    %168 = @func_1449() /* ty=Tensor[(1300), float32] */;
    %169 = cast(meta[relay.Constant][11] /* ty=Tensor[(1300), float32] */, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
    %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(1), int32] */;
    %171 = cast(%168, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
    %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?), uint16] */;
    maximum(%171, %172) /* ty=Tensor[(1300), uint16] */
  };
  %173() /* ty=Tensor[(1300), uint16] */
}

def @func_3290() -> (Tensor[(10), float32],) {
  %174 = @func_2488() /* ty=Tensor[(10), float32] */;
  (%174,)
}

def @func_574(%var_569: Tensor[(2, 5, 1), float32]) -> (Tensor[(2, 5, ?), float32],) {
  %175 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 1), float32] */;
  %176 = shape_of(%var_569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%var_569, dtype="float32") /* ty=Tensor[(2, 5, 1), float32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %179 = power(%177, %178) /* ty=Tensor[(2, 5, ?), float32] */;
  (%179,)
}

def @func_5709(%var_5707: Tensor[(1, 10, 4), float32]) -> (Tensor[(1, 10, 4), float32], Tensor[(1, 10, 4), float32]) {
  @func_5706(%var_5707) /* ty=(Tensor[(1, 10, 4), float32], Tensor[(1, 10, 4), float32]) */
}

def @func_5229() -> (Tensor[(1300), float32],) {
  @func_5227() /* ty=(Tensor[(1300), float32],) */
}

def @func_7201() -> Tensor[(2, 5, ?), float64] {
  @func_7199() /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_577(%var_575: Tensor[(2, 5, 1), float32]) -> (Tensor[(2, 5, ?), float32],) {
  @func_574(%var_575) /* ty=(Tensor[(2, 5, ?), float32],) */
}

def @func_1172(%var_1170: Tensor[(208), float32]) -> (Tensor[(7, 12, 11), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) {
  @func_1169(%var_1170) /* ty=(Tensor[(7, 12, 11), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */
}

def @func_3278(%var_3202: Tensor[(14, 5, 15), float32]) -> (Tensor[(14, 5, 15), float32], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float64], Tensor[(14, 5, 15), uint8]) {
  %180 = @func_2642() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %181 = %180.0;
  %182 = cast(%var_3202, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%181, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %186 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %187 = @func_2819() /* ty=(Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float32], Tensor[(1144), uint8]) */;
  %188 = %186.2;
  %189 = cast(%188, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
  %190 = reshape(%189, newshape=[1300]) /* ty=Tensor[(1300), uint16] */;
  %191 = @func_2590(%190) /* ty=(Tensor[(1300), bool], Tensor[(1300), float64]) */;
  %192 = cast(%var_3202, dtype="float64") /* ty=Tensor[(14, 5, 15), float64] */;
  %193 = acos(%192) /* ty=Tensor[(14, 5, 15), float64] */;
  %194 = cast(%193, dtype="float64") /* ty=Tensor[(14, 5, 15), float64] */;
  %195 = sin(%194) /* ty=Tensor[(14, 5, 15), float64] */;
  %196 = cast(%193, dtype="uint8") /* ty=Tensor[(14, 5, 15), uint8] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="uint8") /* ty=Tensor[(14, 5, 15), uint8] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %200 = subtract(%184, %185) /* ty=Tensor[(14, 5, 15), float32] */;
  %201 = %187.4;
  %202 = %191.1;
  %203 = bitwise_or(%198, %199) /* ty=Tensor[(14, 5, 15), uint8] */;
  (%200, %188, %201, %202, %203)
}

def @func_7750() -> (Tensor[(13, 10, 10), bool],) {
  %206 = fn () -> (Tensor[(13, 10, 10), bool],) {
    %204 = @func_2136() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) */;
    %205 = %204.2;
    (%205,)
  };
  %206() /* ty=(Tensor[(13, 10, 10), bool],) */
}

def @func_2593(%var_2591: Tensor[(1300), uint16]) -> (Tensor[(1300), bool], Tensor[(1300), float64]) {
  @func_2590(%var_2591) /* ty=(Tensor[(1300), bool], Tensor[(1300), float64]) */
}

def @func_335(%var_333: Tensor[(1, 13, 16), float32]) -> Tensor[(?, 13, 16), float64] {
  @func_332(%var_333) /* ty=Tensor[(?, 13, 16), float64] */
}

def @func_6641(%var_6639: Tensor[(7, 11, 11), float64], %var_6640: Tensor[(7, 11, 11), float64]) -> Tensor[(7, 11, 11), float64] {
  @func_6637(%var_6639, %var_6640) /* ty=Tensor[(7, 11, 11), float64] */
}

def @func_6875() -> (Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float64], Tensor[(1300), uint16], Tensor[(10), float32], float32, Tensor[(1, 1144), int32]) {
  @func_6873() /* ty=(Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float64], Tensor[(1300), uint16], Tensor[(10), float32], float32, Tensor[(1, 1144), int32]) */
}

def @func_6523() -> (Tensor[(14, 5, 15), float64],) {
  @func_6521() /* ty=(Tensor[(14, 5, 15), float64],) */
}

def @func_8146() -> (Tensor[(10), float32], Tensor[(3, 1, 11), int32]) {
  @func_8144() /* ty=(Tensor[(10), float32], Tensor[(3, 1, 11), int32]) */
}

def @func_4204(%var_4202: Tensor[(208), float32], %var_4203: Tensor[(720), uint64]) -> (Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32], Tensor[(1, 576), uint64], Tensor[(10, 12, 6), float32], Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(10), float32], Tensor[(1170), float32], Tensor[(10), float32]) {
  %241 = fn (%var_4104: Tensor[(208), float32], %var_4129: Tensor[(720), uint64]) -> (Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32], Tensor[(1, 576), uint64], Tensor[(10, 12, 6), float32], Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(10), float32], Tensor[(1170), float32], Tensor[(10), float32]) {
    %207 = @func_2170() /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool]) */;
    %208 = cast(%var_4104, dtype="float32") /* ty=Tensor[(208), float32] */;
    %209 = reshape(%208, newshape=[208]) /* ty=Tensor[(208), float32] */;
    %210 = @func_1169(%209) /* ty=(Tensor[(7, 12, 11), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
    %211 = %210.1;
    %212 = cast(%211, dtype="float32") /* ty=Tensor[(?, 13, 16), float32] */;
    %213 = reshape(%212, newshape=[208]) /* ty=Tensor[(208), float32] */;
    %214 = @func_1430(%213) /* ty=(Tensor[(?, 13, 16), float64], Tensor[(1, 576), uint64], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(1300), bool]) */;
    %215 = cast(%var_4129, dtype="uint64") /* ty=Tensor[(720), uint64] */;
    %216 = reshape(%215, newshape=[10, 12, 6]) /* ty=Tensor[(10, 12, 6), uint64] */;
    %217 = @func_2368(%216) /* ty=Tensor[(10, 12, 6), uint64] */;
    %218 = cast(%var_4129, dtype="float32") /* ty=Tensor[(720), float32] */;
    %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%217, dtype="float32") /* ty=Tensor[(10, 12, 6), float32] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %222 = %207.1;
    %223 = cast(%222, dtype="uint16") /* ty=Tensor[(13, 10, 10), uint16] */;
    %224 = reshape(%223, newshape=[1300]) /* ty=Tensor[(1300), uint16] */;
    %225 = @func_3078(%224) /* ty=(float32, Tensor[(1300), float64], Tensor[(1300), uint16]) */;
    %226 = mod(%220, %221) /* ty=Tensor[(10, 12, 6), float32] */;
    %227 = cast(%226, dtype="uint64") /* ty=Tensor[(10, 12, 6), uint64] */;
    %228 = reshape(%227, newshape=[720]) /* ty=Tensor[(720), uint64] */;
    %229 = @func_3038(%228) /* ty=(float32, float32, Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(1300), float64]) */;
    %230 = cast(meta[relay.Constant][13] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %231 = cast(%222, dtype="bool") /* ty=Tensor[(13, 10, 10), bool] */;
    %232 = cast(meta[relay.Constant][14] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
    %233 = reshape(%230, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
    %234 = reshape(%231, newshape=[1300]) /* ty=Tensor[(1300), bool] */;
    %235 = reshape(%232, newshape=[10]) /* ty=Tensor[(10), float32] */;
    %236 = @func_3405(%233, %234, %235) /* ty=(Tensor[(13, 8, 11), bool], Tensor[(1300), bool], Tensor[(1300), float64], Tensor[(10), float32], Tensor[(2, 5, 1170), bool], Tensor[(13, 10, 10), bool], Tensor[(1300), bool], Tensor[(1300), float64], Tensor[(10), float32]) */;
    %237 = %214.1;
    %238 = %225.2;
    %239 = %229.2;
    %240 = %236.8;
    (%222, %211, %var_4104, %237, %226, %238, %239, %240, meta[relay.Constant][13] /* ty=Tensor[(1170), float32] */, meta[relay.Constant][14] /* ty=Tensor[(10), float32] */)
  };
  %241(%var_4202, %var_4203) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32], Tensor[(1, 576), uint64], Tensor[(10, 12, 6), float32], Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(10), float32], Tensor[(1170), float32], Tensor[(10), float32]) */
}

def @func_5430() -> (Tensor[(1300), float32], Tensor[(1300), float32], Tensor[(14, 3, 5), float32]) {
  @func_5428() /* ty=(Tensor[(1300), float32], Tensor[(1300), float32], Tensor[(14, 3, 5), float32]) */
}

def @func_3121(%var_3119: Tensor[(720), uint64]) -> (Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(14, 5, 15), float32]) {
  @func_3118(%var_3119) /* ty=(Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(14, 5, 15), float32]) */
}

def @func_4597() -> (Tensor[(1300), uint16], Tensor[(1300), float64]) {
  %252 = fn () -> (Tensor[(1300), uint16], Tensor[(1300), float64]) {
    %242 = @func_1449() /* ty=Tensor[(1300), float32] */;
    %243 = @func_2170() /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool]) */;
    %244 = %243.0;
    %245 = cast(%244, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
    %246 = shape_of(%242, dtype="int32") /* ty=Tensor[(1), int32] */;
    %247 = cast(%242, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
    %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %249 = cast(%244, dtype="float64") /* ty=Tensor[(1300), float64] */;
    %250 = bitwise_and(%247, %248) /* ty=Tensor[(1300), uint16] */;
    %251 = cos(%249) /* ty=Tensor[(1300), float64] */;
    (%250, %251)
  };
  %252() /* ty=(Tensor[(1300), uint16], Tensor[(1300), float64]) */
}

def @func_753(%var_751: Tensor[(13, 10, 10), float32], %var_752: Tensor[(13, 10, 10), float32]) -> (Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) {
  %261 = fn (%var_732: Tensor[(13, 10, 10), float32], %var_733: Tensor[(13, 10, 10), float32]) -> (Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) {
    %253 = cast(%var_733, dtype="bool") /* ty=Tensor[(13, 10, 10), bool] */;
    %254 = shape_of(%var_732, dtype="int32") /* ty=Tensor[(3), int32] */;
    %255 = cast(%var_732, dtype="bool") /* ty=Tensor[(13, 10, 10), bool] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %257 = cast(meta[relay.Constant][15] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
    %258 = reshape(%257, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
    %259 = equal(%255, %256) /* ty=Tensor[(13, 10, 10), bool] */;
    %260 = @func_332(%258) /* ty=Tensor[(?, 13, 16), float64] */;
    (%259, %260, meta[relay.Constant][15] /* ty=Tensor[(208), float32] */)
  };
  %261(%var_751, %var_752) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */
}

def @func_3281(%var_3279: Tensor[(14, 5, 15), float32]) -> (Tensor[(14, 5, 15), float32], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float64], Tensor[(14, 5, 15), uint8]) {
  @func_3278(%var_3279) /* ty=(Tensor[(14, 5, 15), float32], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float64], Tensor[(14, 5, 15), uint8]) */
}

def @func_5993() -> Tensor[(1300), bool] {
  %262 = fn () -> Tensor[(1300), bool] {
    @func_2090() /* ty=Tensor[(1300), bool] */
  };
  %262() /* ty=Tensor[(1300), bool] */
}

def @func_3292() -> (Tensor[(10), float32],) {
  @func_3290() /* ty=(Tensor[(10), float32],) */
}

def @func_1561(%var_1548: Tensor[(572, 2), int32]) -> (Tensor[(13, 10, 10), bool], Tensor[(13, 8, 11), bool], Tensor[(572, 2), float64]) {
  %263 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
  %264 = cast(%var_1548, dtype="int32") /* ty=Tensor[(572, 2), int32] */;
  %265 = reshape(%264, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), int32] */;
  %266 = cast(%var_1548, dtype="float64") /* ty=Tensor[(572, 2), float64] */;
  %267 = %263.0;
  %268 = @func_1022(%265) /* ty=Tensor[(13, 8, 11), bool] */;
  %269 = log10(%266) /* ty=Tensor[(572, 2), float64] */;
  (%267, %268, %269)
}

def @func_6581() -> (Tensor[(3, 1, 11), int32], Tensor[(12, 7, 12), bool], Tensor[(1008), int8]) {
  %279 = fn () -> (Tensor[(3, 1, 11), int32], Tensor[(12, 7, 12), bool], Tensor[(1008), int8]) {
    %270 = cast(meta[relay.Constant][16] /* ty=Tensor[(1008), int8] */, dtype="int8") /* ty=Tensor[(1008), int8] */;
    %271 = cast(meta[relay.Constant][16] /* ty=Tensor[(1008), int8] */, dtype="int8") /* ty=Tensor[(1008), int8] */;
    %272 = cast(meta[relay.Constant][16] /* ty=Tensor[(1008), int8] */, dtype="bool") /* ty=Tensor[(1008), bool] */;
    %273 = reshape(%270, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
    %274 = reshape(%271, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
    %275 = reshape(%272, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), bool] */;
    %276 = @func_802(%273, %274, %275) /* ty=(Tensor[(12, 7, 12), bool],) */;
    %277 = @func_5595() /* ty=Tensor[(3, 1, 11), int32] */;
    %278 = %276.0;
    (%277, %278, meta[relay.Constant][16] /* ty=Tensor[(1008), int8] */)
  };
  %279() /* ty=(Tensor[(3, 1, 11), int32], Tensor[(12, 7, 12), bool], Tensor[(1008), int8]) */
}

def @func_4547(%var_4533: Tensor[(195), float32]) -> (Tensor[(1144), float64], Tensor[(1, 576), uint64], Tensor[(720), uint64], Tensor[(13, 5, 3), float32], Tensor[(195), float32], Tensor[(2, 104), uint64]) {
  %280 = @func_3430() /* ty=(Tensor[(1144), float64],) */;
  %281 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 104), float32] */, dtype="float32") /* ty=Tensor[(2, 104), float32] */;
  %282 = cast(meta[relay.Constant][18] /* ty=Tensor[(720), uint64] */, dtype="uint64") /* ty=Tensor[(720), uint64] */;
  %283 = reshape(%281, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %284 = reshape(%282, newshape=[720]) /* ty=Tensor[(720), uint64] */;
  %285 = @func_4201(%283, %284) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32], Tensor[(1, 576), uint64], Tensor[(10, 12, 6), float32], Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(10), float32], Tensor[(1170), float32], Tensor[(10), float32]) */;
  %286 = cast(%var_4533, dtype="float32") /* ty=Tensor[(195), float32] */;
  %287 = cast(%var_4533, dtype="float32") /* ty=Tensor[(195), float32] */;
  %288 = reshape(%286, newshape=[13, 5, 3]) /* ty=Tensor[(13, 5, 3), float32] */;
  %289 = reshape(%287, newshape=[13, 5, 3]) /* ty=Tensor[(13, 5, 3), float32] */;
  %290 = @func_3911(%288, %289) /* ty=(Tensor[(13, 5, 3), float32],) */;
  %291 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 104), float32] */, dtype="uint64") /* ty=Tensor[(2, 104), uint64] */;
  %292 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2, 104), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %293 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 104), float32] */, dtype="uint64") /* ty=Tensor[(2, 104), uint64] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %295 = %280.0;
  %296 = %285.3;
  %297 = %290.0;
  %298 = multiply(%293, %294) /* ty=Tensor[(2, 104), uint64] */;
  (%295, %296, meta[relay.Constant][18] /* ty=Tensor[(720), uint64] */, %297, %var_4533, %298)
}

def @func_5391() -> float32 {
  @func_2422() /* ty=float32 */
}

def @func_5595() -> Tensor[(3, 1, 11), int32] {
  %299 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
  %299.3
}

def @func_4324() -> (Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(14, 9, 11), bool], Tensor[(1386), int64]) {
  %311 = fn () -> (Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(14, 9, 11), bool], Tensor[(1386), int64]) {
    %300 = cast(meta[relay.Constant][20] /* ty=Tensor[(1144), int32] */, dtype="int32") /* ty=Tensor[(1144), int32] */;
    %301 = reshape(%300, newshape=[572, 2]) /* ty=Tensor[(572, 2), int32] */;
    %302 = @func_1561(%301) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(13, 8, 11), bool], Tensor[(572, 2), float64]) */;
    %303 = cast(meta[relay.Constant][21] /* ty=Tensor[(1386), int64] */, dtype="int64") /* ty=Tensor[(1386), int64] */;
    %304 = cast(meta[relay.Constant][21] /* ty=Tensor[(1386), int64] */, dtype="int64") /* ty=Tensor[(1386), int64] */;
    %305 = reshape(%303, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
    %306 = reshape(%304, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
    %307 = @func_1721(%305, %306) /* ty=(Tensor[(14, 9, 11), bool],) */;
    %308 = @func_2348() /* ty=Tensor[(1300), float32] */;
    %309 = %302.0;
    %310 = %307.0;
    (%308, %309, meta[relay.Constant][20] /* ty=Tensor[(1144), int32] */, %310, meta[relay.Constant][21] /* ty=Tensor[(1386), int64] */)
  };
  %311() /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(14, 9, 11), bool], Tensor[(1386), int64]) */
}

def @func_5597() -> Tensor[(3, 1, 11), int32] {
  @func_5595() /* ty=Tensor[(3, 1, 11), int32] */
}

def @func_6637(%var_6629: Tensor[(7, 11, 11), float64], %var_6630: Tensor[(7, 11, 11), float64]) -> Tensor[(7, 11, 11), float64] {
  %312 = cast(%var_6630, dtype="float64") /* ty=Tensor[(7, 11, 11), float64] */;
  %313 = shape_of(%var_6629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%var_6629, dtype="float64") /* ty=Tensor[(7, 11, 11), float64] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%314, %315) /* ty=Tensor[(7, 11, 11), float64] */
}

def @func_8099(%var_8098: Tensor[(720, 1), uint64]) -> (Tensor[(10), float32], Tensor[(1008), int8], Tensor[(1300), uint16], Tensor[(1300), uint16], Tensor[(720, 1), float64]) {
  %326 = fn (%var_8085: Tensor[(720, 1), uint64]) -> (Tensor[(10), float32], Tensor[(1008), int8], Tensor[(1300), uint16], Tensor[(1300), uint16], Tensor[(720, 1), float64]) {
    %316 = @func_5548() /* ty=(Tensor[(1300), float32], Tensor[(14, 5, 15), float32], Tensor[(1008), int8]) */;
    %317 = cast(%var_8085, dtype="uint64") /* ty=Tensor[(720, 1), uint64] */;
    %318 = reshape(%317, newshape=[720]) /* ty=Tensor[(720), uint64] */;
    %319 = @func_3118(%318) /* ty=(Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(14, 5, 15), float32]) */;
    %320 = cast(%var_8085, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
    %321 = @func_7825() /* ty=Tensor[(10), float32] */;
    %322 = %316.2;
    %323 = @func_1745() /* ty=Tensor[(1300), uint16] */;
    %324 = %319.0;
    %325 = tan(%320) /* ty=Tensor[(720, 1), float64] */;
    (%321, %322, %323, %324, %325)
  };
  %326(%var_8098) /* ty=(Tensor[(10), float32], Tensor[(1008), int8], Tensor[(1300), uint16], Tensor[(1300), uint16], Tensor[(720, 1), float64]) */
}

def @func_802(%var_780: Tensor[(12, 7, 12), int8], %var_781: Tensor[(12, 7, 12), int8], %var_786: Tensor[(12, 7, 12), bool]) -> (Tensor[(12, 7, 12), bool],) {
  %327 = cast(%var_781, dtype="bool") /* ty=Tensor[(12, 7, 12), bool] */;
  %328 = shape_of(%var_780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%var_780, dtype="bool") /* ty=Tensor[(12, 7, 12), bool] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %331 = not_equal(%329, %330) /* ty=Tensor[(12, 7, 12), bool] */;
  %332 = cast(%var_786, dtype="bool") /* ty=Tensor[(12, 7, 12), bool] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="bool") /* ty=Tensor[(12, 7, 12), bool] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %336 = less_equal(%334, %335) /* ty=Tensor[(12, 7, 12), bool] */;
  (%336,)
}

def @func_7017() -> Tensor[(1300), float32] {
  %338 = fn () -> Tensor[(1300), float32] {
    %337 = @func_6212() /* ty=(Tensor[(1300), float32],) */;
    %337.0
  };
  %338() /* ty=Tensor[(1300), float32] */
}

def @func_1233() -> (Tensor[(13, 10, 10), bool],) {
  %339 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %340 = %339.1;
  (%340,)
}

def @func_3405(%var_3315: Tensor[(1170), float32], %var_3343: Tensor[(1300), bool], %var_3351: Tensor[(10), float32]) -> (Tensor[(13, 8, 11), bool], Tensor[(1300), bool], Tensor[(1300), float64], Tensor[(10), float32], Tensor[(2, 5, 1170), bool], Tensor[(13, 10, 10), bool], Tensor[(1300), bool], Tensor[(1300), float64], Tensor[(10), float32]) {
  %341 = cast(%var_3315, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %342 = reshape(%341, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %343 = @func_3174(%342) /* ty=(Tensor[(14, 5, 15), float32], Tensor[(1300), float64], Tensor[(13, 8, 11), bool], Tensor[(1170), float32]) */;
  %344 = @func_2090() /* ty=Tensor[(1300), bool] */;
  %345 = cast(%var_3343, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(1), int32] */;
  %347 = cast(%344, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?), float64] */;
  %349 = cast(%var_3351, dtype="float32") /* ty=Tensor[(10), float32] */;
  %350 = reshape(%349, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), float32] */;
  %351 = @func_574(%350) /* ty=(Tensor[(2, 5, ?), float32],) */;
  %352 = %351.0;
  %353 = cast(%var_3315, dtype="bool") /* ty=Tensor[(1170), bool] */;
  %354 = cast(%352, dtype="bool") /* ty=Tensor[(2, 5, ?), bool] */;
  %355 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
  %356 = cast(%var_3343, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %357 = log(%356) /* ty=Tensor[(1300), float32] */;
  %358 = cast(meta[relay.Constant][22] /* ty=Tensor[(1300), float32] */, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(1), int32] */;
  %360 = cast(%357, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?), bool] */;
  %362 = cast(%357, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %363 = exp(%362) /* ty=Tensor[(1300), float64] */;
  %364 = cast(%344, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(1), int32] */;
  %366 = cast(%363, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?), float64] */;
  %368 = @func_2819() /* ty=(Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float32], Tensor[(1144), uint8]) */;
  %369 = %343.2;
  %370 = @func_2090() /* ty=Tensor[(1300), bool] */;
  %371 = divide(%347, %348) /* ty=Tensor[(1300), float64] */;
  %372 = less_equal(%353, %354) /* ty=Tensor[(2, 5, 1170), bool] */;
  %373 = %355.0;
  %374 = less(%360, %361) /* ty=Tensor[(1300), bool] */;
  %375 = multiply(%366, %367) /* ty=Tensor[(1300), float64] */;
  %376 = %368.0;
  (%369, %370, %371, %var_3351, %372, %373, %374, %375, %376)
}

def @func_5550() -> (Tensor[(1300), float32], Tensor[(14, 5, 15), float32], Tensor[(1008), int8]) {
  @func_5548() /* ty=(Tensor[(1300), float32], Tensor[(14, 5, 15), float32], Tensor[(1008), int8]) */
}

def @func_8188() -> (Tensor[(3, 12, 13), uint64],) {
  %377 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 12, 13), float64] */;
  %378 = acos(%377) /* ty=Tensor[(3, 12, 13), float64] */;
  %379 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 12, 13), float64] */, dtype="uint64") /* ty=Tensor[(3, 12, 13), uint64] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%378, dtype="uint64") /* ty=Tensor[(3, 12, 13), uint64] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %383 = add(%381, %382) /* ty=Tensor[(3, 12, 13), uint64] */;
  (%383,)
}

def @func_3736() -> (Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float32]) {
  %390 = fn () -> (Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float32]) {
    %384 = @func_2819() /* ty=(Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float32], Tensor[(1144), uint8]) */;
    %385 = @func_3516() /* ty=(Tensor[(10), float32],) */;
    %386 = @func_3656() /* ty=(Tensor[(1300), float32],) */;
    %387 = %384.0;
    %388 = %385.0;
    %389 = %386.0;
    (%387, %388, %389)
  };
  %390() /* ty=(Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float32]) */
}

def @func_839(%var_836: Tensor[(6, 12, 8), uint64], %var_837: Tensor[(6, 12, 8), uint64], %var_838: Tensor[(208, 1), float32]) -> (Tensor[(6, 12, 8), uint64], Tensor[(?, 13, 16), float64], Tensor[(208, 1), float32], Tensor[(?, 13, 16), float64]) {
  @func_834(%var_836, %var_837, %var_838) /* ty=(Tensor[(6, 12, 8), uint64], Tensor[(?, 13, 16), float64], Tensor[(208, 1), float32], Tensor[(?, 13, 16), float64]) */
}

def @func_3078(%var_3070: Tensor[(1300), uint16]) -> (float32, Tensor[(1300), float64], Tensor[(1300), uint16]) {
  %391 = @func_1980() /* ty=(Tensor[(13, 10, 10), bool], Tensor[(208), float32], float32, Tensor[(1300), uint16]) */;
  %392 = cast(%var_3070, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
  %393 = reshape(%392, newshape=[1300]) /* ty=Tensor[(1300), uint16] */;
  %394 = @func_2590(%393) /* ty=(Tensor[(1300), bool], Tensor[(1300), float64]) */;
  %395 = %391.2;
  %396 = %394.1;
  (%395, %396, %var_3070)
}

def @func_2116() -> (Tensor[(14, 5, 15), float32],) {
  %397 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %398 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(14, 5, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %401 = power(%399, %400) /* ty=Tensor[(14, 5, 15), float32] */;
  (%401,)
}

def @func_4616() -> Tensor[(10), float32] {
  %403 = fn () -> Tensor[(10), float32] {
    %402 = @func_4501() /* ty=(Tensor[(10), float32], Tensor[(1300), uint16], Tensor[(14, 5, 15), float32]) */;
    %402.0
  };
  %403() /* ty=Tensor[(10), float32] */
}

def @func_2892(%var_2890: Tensor[(208), float32], %var_2891: Tensor[(154, 9), int64]) -> (Tensor[(14, 5, 15), float32], Tensor[(208), float32], Tensor[(208), float32], Tensor[(1300), bool], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int64]) {
  %422 = fn (%var_2863: Tensor[(208), float32], %var_2884: Tensor[(154, 9), int64]) -> (Tensor[(14, 5, 15), float32], Tensor[(208), float32], Tensor[(208), float32], Tensor[(1300), bool], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int64]) {
    %404 = @func_2642() /* ty=(Tensor[(14, 5, 15), float32],) */;
    %405 = %404.0;
    %406 = cast(%405, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
    %407 = cast(%var_2863, dtype="float32") /* ty=Tensor[(208), float32] */;
    %408 = reshape(%407, newshape=[208]) /* ty=Tensor[(208), float32] */;
    %409 = @func_1169(%408) /* ty=(Tensor[(7, 12, 11), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
    %410 = cast(%var_2863, dtype="float32") /* ty=Tensor[(208), float32] */;
    %411 = reshape(%410, newshape=[208]) /* ty=Tensor[(208), float32] */;
    %412 = @func_1430(%411) /* ty=(Tensor[(?, 13, 16), float64], Tensor[(1, 576), uint64], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(1300), bool]) */;
    %413 = cast(%var_2884, dtype="int64") /* ty=Tensor[(154, 9), int64] */;
    %414 = cast(%var_2884, dtype="int64") /* ty=Tensor[(154, 9), int64] */;
    %415 = reshape(%413, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
    %416 = reshape(%414, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int64] */;
    %417 = @func_1721(%415, %416) /* ty=(Tensor[(14, 9, 11), bool],) */;
    %418 = log(%406) /* ty=Tensor[(14, 5, 15), float32] */;
    %419 = %409.2;
    %420 = %412.5;
    %421 = %417.0;
    (%418, %419, %var_2863, %420, %421, %var_2884)
  };
  %422(%var_2890, %var_2891) /* ty=(Tensor[(14, 5, 15), float32], Tensor[(208), float32], Tensor[(208), float32], Tensor[(1300), bool], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int64]) */
}

def @func_1564(%var_1562: Tensor[(572, 2), int32]) -> (Tensor[(13, 10, 10), bool], Tensor[(13, 8, 11), bool], Tensor[(572, 2), float64]) {
  @func_1561(%var_1562) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(13, 8, 11), bool], Tensor[(572, 2), float64]) */
}

def @func_7153(%var_7152: Tensor[(360, 2), uint64]) -> (Tensor[(208), float64], Tensor[(360, 2), uint64], Tensor[(720), uint64], Tensor[(13, 10, 10), float32]) {
  %437 = fn (%var_7132: Tensor[(360, 2), uint64]) -> (Tensor[(208), float64], Tensor[(360, 2), uint64], Tensor[(720), uint64], Tensor[(13, 10, 10), float32]) {
    %423 = @func_6664() /* ty=(Tensor[(208), float64],) */;
    %424 = cast(%var_7132, dtype="uint64") /* ty=Tensor[(360, 2), uint64] */;
    %425 = reshape(%424, newshape=[720]) /* ty=Tensor[(720), uint64] */;
    %426 = @func_3118(%425) /* ty=(Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(14, 5, 15), float32]) */;
    %427 = %423.0;
    %428 = cast(%427, dtype="float32") /* ty=Tensor[(208), float32] */;
    %429 = cast(%var_7132, dtype="uint64") /* ty=Tensor[(360, 2), uint64] */;
    %430 = reshape(%428, newshape=[208]) /* ty=Tensor[(208), float32] */;
    %431 = reshape(%429, newshape=[720]) /* ty=Tensor[(720), uint64] */;
    %432 = @func_4201(%430, %431) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32], Tensor[(1, 576), uint64], Tensor[(10, 12, 6), float32], Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(10), float32], Tensor[(1170), float32], Tensor[(10), float32]) */;
    %433 = %432.0;
    %434 = cast(%433, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
    %435 = %426.2;
    %436 = atan(%434) /* ty=Tensor[(13, 10, 10), float32] */;
    (%427, %var_7132, %435, %436)
  };
  %437(%var_7152) /* ty=(Tensor[(208), float64], Tensor[(360, 2), uint64], Tensor[(720), uint64], Tensor[(13, 10, 10), float32]) */
}

def @func_4654(%var_4653: Tensor[(576), uint64]) -> (Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(208, 1), float32], Tensor[(576), uint64], Tensor[(208), float32]) {
  %450 = fn (%var_4647: Tensor[(576), uint64]) -> (Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(208, 1), float32], Tensor[(576), uint64], Tensor[(208), float32]) {
    %438 = @func_3656() /* ty=(Tensor[(1300), float32],) */;
    %439 = @func_4323() /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(14, 9, 11), bool], Tensor[(1386), int64]) */;
    %440 = cast(%var_4647, dtype="uint64") /* ty=Tensor[(576), uint64] */;
    %441 = cast(%var_4647, dtype="uint64") /* ty=Tensor[(576), uint64] */;
    %442 = cast(meta[relay.Constant][26] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
    %443 = reshape(%440, newshape=[6, 12, 8]) /* ty=Tensor[(6, 12, 8), uint64] */;
    %444 = reshape(%441, newshape=[6, 12, 8]) /* ty=Tensor[(6, 12, 8), uint64] */;
    %445 = reshape(%442, newshape=[208, 1]) /* ty=Tensor[(208, 1), float32] */;
    %446 = @func_834(%443, %444, %445) /* ty=(Tensor[(6, 12, 8), uint64], Tensor[(?, 13, 16), float64], Tensor[(208, 1), float32], Tensor[(?, 13, 16), float64]) */;
    %447 = %438.0;
    %448 = %439.1;
    %449 = %446.2;
    (%447, %448, %449, %var_4647, meta[relay.Constant][26] /* ty=Tensor[(208), float32] */)
  };
  %450(%var_4653) /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(208, 1), float32], Tensor[(576), uint64], Tensor[(208), float32]) */
}

def @func_1934() -> (Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) {
  %454 = fn () -> (Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) {
    %451 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
    %452 = @func_1745() /* ty=Tensor[(1300), uint16] */;
    %453 = %451.0;
    (%452, %453)
  };
  %454() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */
}

def @func_4700() -> (Tensor[(4, 3, 6), float32], Tensor[(14, 5, 15), float32]) {
  %455 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 3, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 3, 6), float32] */;
  %456 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 3, 6), float32] */, dtype="float32") /* ty=Tensor[(4, 3, 6), float32] */;
  %457 = @func_3684() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %458 = divide(%455, %456) /* ty=Tensor[(4, 3, 6), float32] */;
  %459 = %457.0;
  (%458, %459)
}

def @func_4793(%var_4773: Tensor[(8, 1), uint64], %var_4774: Tensor[(8, 1), uint64]) -> Tensor[(8, ?), bool] {
  %460 = cast(%var_4774, dtype="bool") /* ty=Tensor[(8, 1), bool] */;
  %461 = shape_of(%var_4773, dtype="int32") /* ty=Tensor[(2), int32] */;
  %462 = cast(%var_4773, dtype="bool") /* ty=Tensor[(8, 1), bool] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  not_equal(%462, %463) /* ty=Tensor[(8, ?), bool] */
}

def @func_6521() -> (Tensor[(14, 5, 15), float64],) {
  %464 = @func_6114() /* ty=(Tensor[(14, 5, 15), float64], Tensor[(13, 10, 10), bool], Tensor[(288, 2), uint64]) */;
  %465 = %464.0;
  (%465,)
}

def @func_4797(%var_4795: Tensor[(8, 1), uint64], %var_4796: Tensor[(8, 1), uint64]) -> Tensor[(8, ?), bool] {
  @func_4793(%var_4795, %var_4796) /* ty=Tensor[(8, ?), bool] */
}

def @func_6547() -> (Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) {
  @func_6545() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) */
}

def @func_3685() -> (Tensor[(14, 5, 15), float32],) {
  %468 = fn () -> (Tensor[(14, 5, 15), float32],) {
    %466 = @func_3575() /* ty=(Tensor[(14, 5, 15), float32],) */;
    %467 = %466.0;
    (%467,)
  };
  %468() /* ty=(Tensor[(14, 5, 15), float32],) */
}

def @func_2463(%var_2462: float32) -> (Tensor[(10), float32], Tensor[(208), float32], float32) {
  %475 = fn (%var_2449: float32) -> (Tensor[(10), float32], Tensor[(208), float32], float32) {
    %469 = @func_2136() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) */;
    %470 = cast(%var_2449, dtype="float32") /* ty=float32 */;
    %471 = reshape(%470, newshape=[]) /* ty=float32 */;
    %472 = @func_1611(%471) /* ty=(Tensor[(1300), float32], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1, 1144), int32], Tensor[(?, 13, 16), float32], Tensor[(13, 10, 10), bool], float32, Tensor[(65), float32]) */;
    %473 = %469.1;
    %474 = %472.1;
    (%473, %474, %var_2449)
  };
  %475(%var_2462) /* ty=(Tensor[(10), float32], Tensor[(208), float32], float32) */
}

def @func_2590(%var_2579: Tensor[(1300), uint16]) -> (Tensor[(1300), bool], Tensor[(1300), float64]) {
  %476 = @func_1745() /* ty=Tensor[(1300), uint16] */;
  %477 = cast(%var_2579, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(1), int32] */;
  %479 = cast(%476, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?), bool] */;
  %481 = cast(%var_2579, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %482 = greater(%479, %480) /* ty=Tensor[(1300), bool] */;
  %483 = rsqrt(%481) /* ty=Tensor[(1300), float64] */;
  (%482, %483)
}

def @func_2090() -> Tensor[(1300), bool] {
  %484 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %485 = %484.0;
  %486 = cast(%485, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %487 = acosh(%486) /* ty=Tensor[(1300), float64] */;
  %488 = cast(%485, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(1), int32] */;
  %490 = cast(%487, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_and(%490, %491) /* ty=Tensor[(1300), bool] */
}

def @func_7437() -> Tensor[(10), float32] {
  %493 = fn () -> Tensor[(10), float32] {
    %492 = @func_6135() /* ty=(Tensor[(10), float32], Tensor[(10), float32]) */;
    %492.0
  };
  %493() /* ty=Tensor[(10), float32] */
}

def @func_8190() -> (Tensor[(3, 12, 13), uint64],) {
  @func_8188() /* ty=(Tensor[(3, 12, 13), uint64],) */
}

def @func_4550(%var_4548: Tensor[(195), float32]) -> (Tensor[(1144), float64], Tensor[(1, 576), uint64], Tensor[(720), uint64], Tensor[(13, 5, 3), float32], Tensor[(195), float32], Tensor[(2, 104), uint64]) {
  @func_4547(%var_4548) /* ty=(Tensor[(1144), float64], Tensor[(1, 576), uint64], Tensor[(720), uint64], Tensor[(13, 5, 3), float32], Tensor[(195), float32], Tensor[(2, 104), uint64]) */
}

def @func_5130() -> (Tensor[(14, 5, 15), float32],) {
  %494 = @func_3684() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %495 = %494.0;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %497 = log2(%496) /* ty=Tensor[(14, 5, 15), float32] */;
  (%497,)
}

def @func_3657() -> (Tensor[(1300), float32],) {
  %502 = fn () -> (Tensor[(1300), float32],) {
    %498 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
    %499 = %498.0;
    %500 = cast(%499, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %501 = erf(%500) /* ty=Tensor[(1300), float32] */;
    (%501,)
  };
  %502() /* ty=(Tensor[(1300), float32],) */
}

def @func_6213() -> (Tensor[(1300), float32],) {
  %505 = fn () -> (Tensor[(1300), float32],) {
    %503 = @func_5227() /* ty=(Tensor[(1300), float32],) */;
    %504 = %503.0;
    (%504,)
  };
  %505() /* ty=(Tensor[(1300), float32],) */
}

def @func_2118() -> (Tensor[(14, 5, 15), float32],) {
  @func_2116() /* ty=(Tensor[(14, 5, 15), float32],) */
}

def @func_3118(%var_3111: Tensor[(720), uint64]) -> (Tensor[(1300), uint16], Tensor[(10, 12, 6), uint64], Tensor[(720), uint64], Tensor[(14, 5, 15), float32]) {
  %506 = cast(%var_3111, dtype="uint64") /* ty=Tensor[(720), uint64] */;
  %507 = reshape(%506, newshape=[10, 12, 6]) /* ty=Tensor[(10, 12, 6), uint64] */;
  %508 = @func_2116() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %509 = @func_1745() /* ty=Tensor[(1300), uint16] */;
  %510 = @func_2368(%507) /* ty=Tensor[(10, 12, 6), uint64] */;
  %511 = %508.0;
  (%509, %510, %var_3111, %511)
}

def @func_6067() -> (Tensor[(14, 5, 15), float32],) {
  @func_6065() /* ty=(Tensor[(14, 5, 15), float32],) */
}

def @func_7650() -> Tensor[(10), float32] {
  %512 = @func_4864() /* ty=(Tensor[(10), float32], Tensor[(10), float32], float32) */;
  %512.1
}

def @func_6665() -> (Tensor[(208), float64],) {
  %517 = fn () -> (Tensor[(208), float64],) {
    %513 = @func_1980() /* ty=(Tensor[(13, 10, 10), bool], Tensor[(208), float32], float32, Tensor[(1300), uint16]) */;
    %514 = %513.1;
    %515 = cast(%514, dtype="float64") /* ty=Tensor[(208), float64] */;
    %516 = asin(%515) /* ty=Tensor[(208), float64] */;
    (%516,)
  };
  %517() /* ty=(Tensor[(208), float64],) */
}

def @func_5298(%var_5297: Tensor[(1050), float32]) -> (Tensor[(1300), uint16], Tensor[(14, 5, 15), uint8], Tensor[(1050), float32], Tensor[(14, 5, 15), float32]) {
  %525 = fn (%var_5275: Tensor[(1050), float32]) -> (Tensor[(1300), uint16], Tensor[(14, 5, 15), uint8], Tensor[(1050), float32], Tensor[(14, 5, 15), float32]) {
    %518 = cast(%var_5275, dtype="float32") /* ty=Tensor[(1050), float32] */;
    %519 = reshape(%518, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), float32] */;
    %520 = @func_3278(%519) /* ty=(Tensor[(14, 5, 15), float32], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float64], Tensor[(14, 5, 15), uint8]) */;
    %521 = @func_4700() /* ty=(Tensor[(4, 3, 6), float32], Tensor[(14, 5, 15), float32]) */;
    %522 = @func_1745() /* ty=Tensor[(1300), uint16] */;
    %523 = %520.4;
    %524 = %521.1;
    (%522, %523, %var_5275, %524)
  };
  %525(%var_5297) /* ty=(Tensor[(1300), uint16], Tensor[(14, 5, 15), uint8], Tensor[(1050), float32], Tensor[(14, 5, 15), float32]) */
}

def @func_6733(%var_6728: Tensor[(5, 15, 12), float64]) -> Tensor[(5, 15, 12), float64] {
  %526 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %527 = shape_of(%var_6728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%var_6728, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%528, %529) /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_2821() -> (Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float32], Tensor[(1144), uint8]) {
  @func_2819() /* ty=(Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float32], Tensor[(1144), uint8]) */
}

def @func_7199() -> Tensor[(2, 5, ?), float64] {
  %530 = @func_4999() /* ty=(Tensor[(2, 5, ?), float64],) */;
  %531 = %530.0;
  %532 = cast(%531, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
  atan(%532) /* ty=Tensor[(2, 5, ?), float64] */
}

def @func_3914(%var_3912: Tensor[(13, 5, 3), float32], %var_3913: Tensor[(13, 5, 3), float32]) -> (Tensor[(13, 5, 3), float32],) {
  %538 = fn (%var_3902: Tensor[(13, 5, 3), float32], %var_3903: Tensor[(13, 5, 3), float32]) -> (Tensor[(13, 5, 3), float32],) {
    %533 = cast(%var_3903, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
    %534 = shape_of(%var_3902, dtype="int32") /* ty=Tensor[(3), int32] */;
    %535 = cast(%var_3902, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %537 = divide(%535, %536) /* ty=Tensor[(13, 5, 3), float32] */;
    (%537,)
  };
  %538(%var_3912, %var_3913) /* ty=(Tensor[(13, 5, 3), float32],) */
}

def @func_7860() -> (Tensor[(1300), uint64], Tensor[(14, 5, 15), float64]) {
  %553 = fn () -> (Tensor[(1300), uint64], Tensor[(14, 5, 15), float64]) {
    %539 = @func_1449() /* ty=Tensor[(1300), float32] */;
    %540 = cast(%539, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %541 = cast(%539, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %542 = reshape(%540, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
    %543 = reshape(%541, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
    %544 = @func_5654(%542, %543) /* ty=(Tensor[(1300), bool], Tensor[(1300), uint64], Tensor[(1300), float32]) */;
    %545 = %544.0;
    %546 = cast(%545, dtype="uint64") /* ty=Tensor[(1300), uint64] */;
    %547 = shape_of(%539, dtype="int32") /* ty=Tensor[(1), int32] */;
    %548 = cast(%539, dtype="uint64") /* ty=Tensor[(1300), uint64] */;
    %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %550 = @func_6718() /* ty=(Tensor[(1300), float64], Tensor[(14, 5, 15), float64]) */;
    %551 = bitwise_xor(%548, %549) /* ty=Tensor[(1300), uint64] */;
    %552 = %550.1;
    (%551, %552)
  };
  %553() /* ty=(Tensor[(1300), uint64], Tensor[(14, 5, 15), float64]) */
}

def @func_5750() -> (float32, Tensor[(10), float32], Tensor[(10), float32]) {
  %554 = @func_5391() /* ty=float32 */;
  %555 = @func_4417() /* ty=Tensor[(10), float32] */;
  %556 = @func_4892() /* ty=Tensor[(10), float32] */;
  (%554, %555, %556)
}

def @main(%var_8277: Tensor[(14, 11, 6), float32]) -> Tensor[(14, 11, 6), uint32] {
  %557 = cast(%var_8277, dtype="float32") /* ty=Tensor[(14, 11, 6), float32] */;
  %558 = asinh(%557) /* ty=Tensor[(14, 11, 6), float32] */;
  %559 = cast(%var_8277, dtype="uint32") /* ty=Tensor[(14, 11, 6), uint32] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%558, dtype="uint32") /* ty=Tensor[(14, 11, 6), uint32] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%561, %562) /* ty=Tensor[(14, 11, 6), uint32] */
}

def @func_5654(%var_5635: Tensor[(1300), float32], %var_5639: Tensor[(1300), float32]) -> (Tensor[(1300), bool], Tensor[(1300), uint64], Tensor[(1300), float32]) {
  %563 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %564 = %563.2;
  %565 = cast(meta[relay.Constant][30] /* ty=Tensor[(1300), float32] */, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(1), int32] */;
  %567 = cast(%564, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?), bool] */;
  %569 = cast(%var_5635, dtype="uint64") /* ty=Tensor[(1300), uint64] */;
  %570 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(1300), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %571 = cast(meta[relay.Constant][30] /* ty=Tensor[(1300), float32] */, dtype="uint64") /* ty=Tensor[(1300), uint64] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %573 = cast(%var_5639, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %574 = shape_of(%564, dtype="int32") /* ty=Tensor[(1), int32] */;
  %575 = cast(%564, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?), float32] */;
  %577 = not_equal(%567, %568) /* ty=Tensor[(1300), bool] */;
  %578 = minimum(%571, %572) /* ty=Tensor[(1300), uint64] */;
  %579 = power(%575, %576) /* ty=Tensor[(1300), float32] */;
  (%577, %578, %579)
}

def @func_5000() -> (Tensor[(2, 5, ?), float64],) {
  %584 = fn () -> (Tensor[(2, 5, ?), float64],) {
    %580 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
    %581 = %580.0;
    %582 = cast(%581, dtype="float64") /* ty=Tensor[(2, 5, ?), float64] */;
    %583 = tan(%582) /* ty=Tensor[(2, 5, ?), float64] */;
    (%583,)
  };
  %584() /* ty=(Tensor[(2, 5, ?), float64],) */
}

def @func_4277() -> Tensor[(10), float32] {
  %586 = fn () -> Tensor[(10), float32] {
    %585 = @func_3516() /* ty=(Tensor[(10), float32],) */;
    %585.0
  };
  %586() /* ty=Tensor[(10), float32] */
}

def @func_5227() -> (Tensor[(1300), float32],) {
  %587 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %588 = %587.2;
  (%588,)
}

def @func_6017(%var_6012: Tensor[(14, 5, 15), float32]) -> (Tensor[(14, 5, 15), float32],) {
  %589 = @func_2136() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) */;
  %590 = %589.0;
  %591 = cast(%var_6012, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%590, dtype="float32") /* ty=Tensor[(14, 5, 15), float32] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %595 = floor_divide(%593, %594) /* ty=Tensor[(14, 5, 15), float32] */;
  (%595,)
}

def @func_3410(%var_3407: Tensor[(1170), float32], %var_3408: Tensor[(1300), bool], %var_3409: Tensor[(10), float32]) -> (Tensor[(13, 8, 11), bool], Tensor[(1300), bool], Tensor[(1300), float64], Tensor[(10), float32], Tensor[(2, 5, 1170), bool], Tensor[(13, 10, 10), bool], Tensor[(1300), bool], Tensor[(1300), float64], Tensor[(10), float32]) {
  @func_3405(%var_3407, %var_3408, %var_3409) /* ty=(Tensor[(13, 8, 11), bool], Tensor[(1300), bool], Tensor[(1300), float64], Tensor[(10), float32], Tensor[(2, 5, 1170), bool], Tensor[(13, 10, 10), bool], Tensor[(1300), bool], Tensor[(1300), float64], Tensor[(10), float32]) */
}

def @func_2038() -> (Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) {
  %596 = cast(meta[relay.Constant][31] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %597 = reshape(%596, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), float32] */;
  %598 = @func_574(%597) /* ty=(Tensor[(2, 5, ?), float32],) */;
  %599 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 1, 11), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 11), float64] */;
  %600 = erf(%599) /* ty=Tensor[(3, 1, 11), float64] */;
  %601 = cast(-2.49571f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %602 = reshape(%601, newshape=[]) /* ty=float32 */;
  %603 = @func_1611(%602) /* ty=(Tensor[(1300), float32], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1, 1144), int32], Tensor[(?, 13, 16), float32], Tensor[(13, 10, 10), bool], float32, Tensor[(65), float32]) */;
  %604 = %603.6;
  %605 = cast(%600, dtype="int32") /* ty=Tensor[(3, 1, 11), int32] */;
  %606 = cast(%604, dtype="int32") /* ty=int32 */;
  %607 = %598.0;
  %608 = right_shift(%605, %606) /* ty=Tensor[(3, 1, 11), int32] */;
  (%607, meta[relay.Constant][31] /* ty=Tensor[(10), float32] */, -2.49571f /* ty=float32 */, %608)
}

def @func_6409(%var_6407: Tensor[(1300), bool]) -> (Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), bool], Tensor[(1300), float32], Tensor[(13, 10, 10), float64]) {
  @func_6406(%var_6407) /* ty=(Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), bool], Tensor[(1300), float32], Tensor[(13, 10, 10), float64]) */
}

def @func_6020(%var_6018: Tensor[(14, 5, 15), float32]) -> (Tensor[(14, 5, 15), float32],) {
  @func_6017(%var_6018) /* ty=(Tensor[(14, 5, 15), float32],) */
}

def @func_2349() -> Tensor[(1300), float32] {
  %609 = fn () -> Tensor[(1300), float32] {
    @func_1449() /* ty=Tensor[(1300), float32] */
  };
  %609() /* ty=Tensor[(1300), float32] */
}

def @func_3534() -> Tensor[(1300), bool] {
  @func_3532() /* ty=Tensor[(1300), bool] */
}

def @func_5132() -> (Tensor[(14, 5, 15), float32],) {
  @func_5130() /* ty=(Tensor[(14, 5, 15), float32],) */
}

def @func_2489() -> Tensor[(10), float32] {
  %611 = fn () -> Tensor[(10), float32] {
    %610 = @func_2136() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) */;
    %610.1
  };
  %611() /* ty=Tensor[(10), float32] */
}

def @func_3846() -> Tensor[(10), float32] {
  %613 = fn () -> Tensor[(10), float32] {
    %612 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
    %612.1
  };
  %613() /* ty=Tensor[(10), float32] */
}

def @func_2040() -> (Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) {
  @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */
}

def @func_4405(%var_4403: Tensor[(1008), int8]) -> (Tensor[(14, 5, 15), float32], Tensor[(12, 7, 12), bool], Tensor[(1008), int8], Tensor[(14, 5, 15), float32]) {
  @func_4402(%var_4403) /* ty=(Tensor[(14, 5, 15), float32], Tensor[(12, 7, 12), bool], Tensor[(1008), int8], Tensor[(14, 5, 15), float32]) */
}

def @func_4984() -> (Tensor[(1300), float64], Tensor[(14, 5, 15), float32], Tensor[(1170), float32], Tensor[(208), float32], Tensor[(1144), float64]) {
  %628 = fn () -> (Tensor[(1300), float64], Tensor[(14, 5, 15), float32], Tensor[(1170), float32], Tensor[(208), float32], Tensor[(1144), float64]) {
    %614 = @func_4596() /* ty=(Tensor[(1300), uint16], Tensor[(1300), float64]) */;
    %615 = cast(meta[relay.Constant][33] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %616 = reshape(%615, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
    %617 = @func_3174(%616) /* ty=(Tensor[(14, 5, 15), float32], Tensor[(1300), float64], Tensor[(13, 8, 11), bool], Tensor[(1170), float32]) */;
    %618 = %614.1;
    %619 = cast(%618, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %620 = cast(%618, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %621 = reshape(%619, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %622 = reshape(%620, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %623 = @func_750(%621, %622) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
    %624 = @func_3430() /* ty=(Tensor[(1144), float64],) */;
    %625 = %617.0;
    %626 = %623.2;
    %627 = %624.0;
    (%618, %625, meta[relay.Constant][33] /* ty=Tensor[(1170), float32] */, %626, %627)
  };
  %628() /* ty=(Tensor[(1300), float64], Tensor[(14, 5, 15), float32], Tensor[(1170), float32], Tensor[(208), float32], Tensor[(1144), float64]) */
}

def @func_6065() -> (Tensor[(14, 5, 15), float32],) {
  %629 = @func_5130() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %630 = %629.0;
  (%630,)
}

def @func_1080() -> (Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) {
  @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */
}

def @func_6201() -> (Tensor[(1300), float32], Tensor[(1300), float32]) {
  @func_6199() /* ty=(Tensor[(1300), float32], Tensor[(1300), float32]) */
}

def @func_1724(%var_1722: Tensor[(14, 9, 11), int64], %var_1723: Tensor[(14, 9, 11), int64]) -> (Tensor[(14, 9, 11), bool],) {
  %641 = fn (%var_1682: Tensor[(14, 9, 11), int64], %var_1683: Tensor[(14, 9, 11), int64]) -> (Tensor[(14, 9, 11), bool],) {
    %631 = cast(%var_1683, dtype="int64") /* ty=Tensor[(14, 9, 11), int64] */;
    %632 = shape_of(%var_1682, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%var_1682, dtype="int64") /* ty=Tensor[(14, 9, 11), int64] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %635 = right_shift(%633, %634) /* ty=Tensor[(14, 9, 11), int64] */;
    %636 = cast(%635, dtype="bool") /* ty=Tensor[(14, 9, 11), bool] */;
    %637 = shape_of(%var_1682, dtype="int32") /* ty=Tensor[(3), int32] */;
    %638 = cast(%var_1682, dtype="bool") /* ty=Tensor[(14, 9, 11), bool] */;
    %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %640 = logical_or(%638, %639) /* ty=Tensor[(14, 9, 11), bool] */;
    (%640,)
  };
  %641(%var_1722, %var_1723) /* ty=(Tensor[(14, 9, 11), bool],) */
}

def @func_834(%var_815: Tensor[(6, 12, 8), uint64], %var_816: Tensor[(6, 12, 8), uint64], %var_826: Tensor[(208, 1), float32]) -> (Tensor[(6, 12, 8), uint64], Tensor[(?, 13, 16), float64], Tensor[(208, 1), float32], Tensor[(?, 13, 16), float64]) {
  %642 = cast(%var_816, dtype="uint64") /* ty=Tensor[(6, 12, 8), uint64] */;
  %643 = shape_of(%var_815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%var_815, dtype="uint64") /* ty=Tensor[(6, 12, 8), uint64] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %646 = cast(%var_826, dtype="float32") /* ty=Tensor[(208, 1), float32] */;
  %647 = reshape(%646, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %648 = @func_332(%647) /* ty=Tensor[(?, 13, 16), float64] */;
  %649 = cast(%648, dtype="float32") /* ty=Tensor[(?, 13, 16), float32] */;
  %650 = reshape(%649, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %651 = right_shift(%644, %645) /* ty=Tensor[(6, 12, 8), uint64] */;
  %652 = @func_332(%650) /* ty=Tensor[(?, 13, 16), float64] */;
  (%651, %648, %var_826, %652)
}

def @func_6462() -> (Tensor[(14, 5, 15), float32], Tensor[(2, 5, 1300), uint8]) {
  %661 = fn () -> (Tensor[(14, 5, 15), float32], Tensor[(2, 5, 1300), uint8]) {
    %653 = @func_5548() /* ty=(Tensor[(1300), float32], Tensor[(14, 5, 15), float32], Tensor[(1008), int8]) */;
    %654 = @func_2090() /* ty=Tensor[(1300), bool] */;
    %655 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
    %656 = %655.0;
    %657 = cast(%654, dtype="uint8") /* ty=Tensor[(1300), uint8] */;
    %658 = cast(%656, dtype="uint8") /* ty=Tensor[(2, 5, ?), uint8] */;
    %659 = %653.1;
    %660 = left_shift(%657, %658) /* ty=Tensor[(2, 5, 1300), uint8] */;
    (%659, %660)
  };
  %661() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(2, 5, 1300), uint8]) */
}

def @func_3577() -> (Tensor[(14, 5, 15), float32],) {
  @func_3575() /* ty=(Tensor[(14, 5, 15), float32],) */
}

def @func_3174(%var_3172: Tensor[(1170), float32]) -> (Tensor[(14, 5, 15), float32], Tensor[(1300), float64], Tensor[(13, 8, 11), bool], Tensor[(1170), float32]) {
  %662 = @func_2116() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %663 = @func_2090() /* ty=Tensor[(1300), bool] */;
  %664 = cast(%663, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %665 = sigmoid(%664) /* ty=Tensor[(1300), float32] */;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %667 = cast(%var_3172, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %668 = reshape(%667, newshape=[13, 15, 6]) /* ty=Tensor[(13, 15, 6), float32] */;
  %669 = @func_2329(%668) /* ty=(Tensor[(13, 15, 6), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32]) */;
  %670 = %662.0;
  %671 = asin(%666) /* ty=Tensor[(1300), float64] */;
  %672 = %669.1;
  (%670, %671, %672, %var_3172)
}

def @func_6260() -> (Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) {
  %677 = fn () -> (Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) {
    %673 = cast(meta[relay.Constant][34] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
    %674 = reshape(%673, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
    %675 = @func_4417() /* ty=Tensor[(10), float32] */;
    %676 = @func_332(%674) /* ty=Tensor[(?, 13, 16), float64] */;
    (%675, %676, meta[relay.Constant][34] /* ty=Tensor[(208), float32] */)
  };
  %677() /* ty=(Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */
}

def @func_6718() -> (Tensor[(1300), float64], Tensor[(14, 5, 15), float64]) {
  %678 = @func_4596() /* ty=(Tensor[(1300), uint16], Tensor[(1300), float64]) */;
  %679 = @func_6114() /* ty=(Tensor[(14, 5, 15), float64], Tensor[(13, 10, 10), bool], Tensor[(288, 2), uint64]) */;
  %680 = %678.1;
  %681 = %679.0;
  (%680, %681)
}

def @func_6736(%var_6734: Tensor[(5, 15, 12), float64]) -> Tensor[(5, 15, 12), float64] {
  @func_6733(%var_6734) /* ty=Tensor[(5, 15, 12), float64] */
}

def @func_1432(%var_1431: Tensor[(208), float32]) -> (Tensor[(?, 13, 16), float64], Tensor[(1, 576), uint64], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(1300), bool]) {
  %702 = fn (%var_1397: Tensor[(208), float32]) -> (Tensor[(?, 13, 16), float64], Tensor[(1, 576), uint64], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(1300), bool]) {
    %682 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 576), uint64] */, dtype="uint64") /* ty=Tensor[(1, 576), uint64] */;
    %683 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 576), uint64] */, dtype="uint64") /* ty=Tensor[(1, 576), uint64] */;
    %684 = cast(%var_1397, dtype="float32") /* ty=Tensor[(208), float32] */;
    %685 = reshape(%682, newshape=[6, 12, 8]) /* ty=Tensor[(6, 12, 8), uint64] */;
    %686 = reshape(%683, newshape=[6, 12, 8]) /* ty=Tensor[(6, 12, 8), uint64] */;
    %687 = reshape(%684, newshape=[208, 1]) /* ty=Tensor[(208, 1), float32] */;
    %688 = @func_834(%685, %686, %687) /* ty=(Tensor[(6, 12, 8), uint64], Tensor[(?, 13, 16), float64], Tensor[(208, 1), float32], Tensor[(?, 13, 16), float64]) */;
    %689 = cast(meta[relay.Constant][36] /* ty=Tensor[(1144), int32] */, dtype="int32") /* ty=Tensor[(1144), int32] */;
    %690 = reshape(%689, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), int32] */;
    %691 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
    %692 = %691.2;
    %693 = cast(%692, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %694 = atan(%693) /* ty=Tensor[(1300), float32] */;
    %695 = cast(%692, dtype="bool") /* ty=Tensor[(1300), bool] */;
    %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(1), int32] */;
    %697 = cast(%694, dtype="bool") /* ty=Tensor[(1300), bool] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?), bool] */;
    %699 = %688.1;
    %700 = @func_1022(%690) /* ty=Tensor[(13, 8, 11), bool] */;
    %701 = greater_equal(%697, %698) /* ty=Tensor[(1300), bool] */;
    (%699, meta[relay.Constant][35] /* ty=Tensor[(1, 576), uint64] */, %var_1397, %700, meta[relay.Constant][36] /* ty=Tensor[(1144), int32] */, %701)
  };
  %702(%var_1431) /* ty=(Tensor[(?, 13, 16), float64], Tensor[(1, 576), uint64], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(1300), bool]) */
}

def @func_7826() -> Tensor[(10), float32] {
  %703 = fn () -> Tensor[(10), float32] {
    @func_3845() /* ty=Tensor[(10), float32] */
  };
  %703() /* ty=Tensor[(10), float32] */
}

def @func_5096(%var_5094: Tensor[(5, 2, 9), int32], %var_5095: Tensor[(5, 2, 9), int32]) -> (Tensor[(5, 2, 9), int32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) {
  %714 = fn (%var_5066: Tensor[(5, 2, 9), int32], %var_5067: Tensor[(5, 2, 9), int32]) -> (Tensor[(5, 2, 9), int32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) {
    %704 = cast(%var_5067, dtype="int32") /* ty=Tensor[(5, 2, 9), int32] */;
    %705 = shape_of(%var_5066, dtype="int32") /* ty=Tensor[(3), int32] */;
    %706 = cast(%var_5066, dtype="int32") /* ty=Tensor[(5, 2, 9), int32] */;
    %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %708 = cast(meta[relay.Constant][37] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
    %709 = reshape(%708, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
    %710 = cast(meta[relay.Constant][37] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
    %711 = left_shift(%706, %707) /* ty=Tensor[(5, 2, 9), int32] */;
    %712 = @func_332(%709) /* ty=Tensor[(?, 13, 16), float64] */;
    %713 = rsqrt(%710) /* ty=Tensor[(208), float32] */;
    (%711, %712, %713)
  };
  %714(%var_5094, %var_5095) /* ty=(Tensor[(5, 2, 9), int32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */
}

def @func_5878() -> (Tensor[(10), float32],) {
  %715 = @func_4615() /* ty=Tensor[(10), float32] */;
  (%715,)
}

def @func_3431() -> (Tensor[(1144), float64],) {
  %720 = fn () -> (Tensor[(1144), float64],) {
    %716 = @func_2819() /* ty=(Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float32], Tensor[(1144), uint8]) */;
    %717 = %716.4;
    %718 = cast(%717, dtype="float64") /* ty=Tensor[(1144), float64] */;
    %719 = sigmoid(%718) /* ty=Tensor[(1144), float64] */;
    (%719,)
  };
  %720() /* ty=(Tensor[(1144), float64],) */
}

def @func_1886(%var_1885: Tensor[(7, 5, 4), float32]) -> (Tensor[(7, 5, 4), float32], Tensor[(?, 13, 16), float64], Tensor[(104, 2), float32], Tensor[(1300), uint16], Tensor[(7, 12, 11), float32]) {
  %732 = fn (%var_1824: Tensor[(7, 5, 4), float32]) -> (Tensor[(7, 5, 4), float32], Tensor[(?, 13, 16), float64], Tensor[(104, 2), float32], Tensor[(1300), uint16], Tensor[(7, 12, 11), float32]) {
    %721 = cast(%var_1824, dtype="float32") /* ty=Tensor[(7, 5, 4), float32] */;
    %722 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(7, 5, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %723 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 5, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 4), float32] */;
    %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %725 = cast(meta[relay.Constant][39] /* ty=Tensor[(104, 2), float32] */, dtype="float32") /* ty=Tensor[(104, 2), float32] */;
    %726 = reshape(%725, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
    %727 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
    %728 = power(%723, %724) /* ty=Tensor[(7, 5, 4), float32] */;
    %729 = @func_332(%726) /* ty=Tensor[(?, 13, 16), float64] */;
    %730 = @func_1745() /* ty=Tensor[(1300), uint16] */;
    %731 = %727.0;
    (%728, %729, meta[relay.Constant][39] /* ty=Tensor[(104, 2), float32] */, %730, %731)
  };
  %732(%var_1885) /* ty=(Tensor[(7, 5, 4), float32], Tensor[(?, 13, 16), float64], Tensor[(104, 2), float32], Tensor[(1300), uint16], Tensor[(7, 12, 11), float32]) */
}

def @func_4501() -> (Tensor[(10), float32], Tensor[(1300), uint16], Tensor[(14, 5, 15), float32]) {
  %733 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %734 = @func_3575() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %735 = @func_4417() /* ty=Tensor[(10), float32] */;
  %736 = %733.0;
  %737 = %734.0;
  (%735, %736, %737)
}

def @func_3517() -> (Tensor[(10), float32],) {
  %739 = fn () -> (Tensor[(10), float32],) {
    %738 = @func_2488() /* ty=Tensor[(10), float32] */;
    (%738,)
  };
  %739() /* ty=(Tensor[(10), float32],) */
}

def @func_4702() -> (Tensor[(4, 3, 6), float32], Tensor[(14, 5, 15), float32]) {
  @func_4700() /* ty=(Tensor[(4, 3, 6), float32], Tensor[(14, 5, 15), float32]) */
}

def @func_2137() -> (Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) {
  %746 = fn () -> (Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) {
    %740 = @func_2116() /* ty=(Tensor[(14, 5, 15), float32],) */;
    %741 = @func_2038() /* ty=(Tensor[(2, 5, ?), float32], Tensor[(10), float32], float32, Tensor[(3, 1, 11), int32]) */;
    %742 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
    %743 = %740.0;
    %744 = %741.1;
    %745 = %742.0;
    (%743, %744, %745)
  };
  %746() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) */
}

def @func_7908() -> (Tensor[(10), float32],) {
  @func_7906() /* ty=(Tensor[(10), float32],) */
}

def @func_4418() -> Tensor[(10), float32] {
  %748 = fn () -> Tensor[(10), float32] {
    %747 = @func_3735() /* ty=(Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float32]) */;
    %747.1
  };
  %748() /* ty=Tensor[(10), float32] */
}

def @func_2370(%var_2369: Tensor[(10, 12, 6), uint64]) -> Tensor[(10, 12, 6), uint64] {
  %753 = fn (%var_2362: Tensor[(10, 12, 6), uint64]) -> Tensor[(10, 12, 6), uint64] {
    %749 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 12, 6), uint64] */, dtype="uint64") /* ty=Tensor[(10, 12, 6), uint64] */;
    %750 = shape_of(%var_2362, dtype="int32") /* ty=Tensor[(3), int32] */;
    %751 = cast(%var_2362, dtype="uint64") /* ty=Tensor[(10, 12, 6), uint64] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    multiply(%751, %752) /* ty=Tensor[(10, 12, 6), uint64] */
  };
  %753(%var_2369) /* ty=Tensor[(10, 12, 6), uint64] */
}

def @func_6176() -> (Tensor[(10), float32], Tensor[(10), float32]) {
  %756 = fn () -> (Tensor[(10), float32], Tensor[(10), float32]) {
    %754 = @func_4672() /* ty=Tensor[(10), float32] */;
    %755 = @func_4276() /* ty=Tensor[(10), float32] */;
    (%754, %755)
  };
  %756() /* ty=(Tensor[(10), float32], Tensor[(10), float32]) */
}

def @func_1450() -> Tensor[(1300), float32] {
  %758 = fn () -> Tensor[(1300), float32] {
    %757 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
    %757.2
  };
  %758() /* ty=Tensor[(1300), float32] */
}

def @func_6778() -> Tensor[(10), float32] {
  %760 = fn () -> Tensor[(10), float32] {
    %759 = @func_3735() /* ty=(Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float32]) */;
    %759.1
  };
  %760() /* ty=Tensor[(10), float32] */
}

def @func_6720() -> (Tensor[(1300), float64], Tensor[(14, 5, 15), float64]) {
  @func_6718() /* ty=(Tensor[(1300), float64], Tensor[(14, 5, 15), float64]) */
}

def @func_7374(%var_7373: Tensor[(13), float64]) -> (Tensor[(2, 5, ?), float64], Tensor[(?, 13, 16), float64], Tensor[(4, 52), float32], Tensor[(13, 1, 1), float64], Tensor[(13), float64]) {
  %768 = fn (%var_7356: Tensor[(13), float64]) -> (Tensor[(2, 5, ?), float64], Tensor[(?, 13, 16), float64], Tensor[(4, 52), float32], Tensor[(13, 1, 1), float64], Tensor[(13), float64]) {
    %761 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 52), float32] */, dtype="float32") /* ty=Tensor[(4, 52), float32] */;
    %762 = reshape(%761, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
    %763 = cast(%var_7356, dtype="float64") /* ty=Tensor[(13), float64] */;
    %764 = reshape(%763, newshape=[13, 1, 1]) /* ty=Tensor[(13, 1, 1), float64] */;
    %765 = @func_7199() /* ty=Tensor[(2, 5, ?), float64] */;
    %766 = @func_332(%762) /* ty=Tensor[(?, 13, 16), float64] */;
    %767 = @func_5816(%764) /* ty=Tensor[(13, 1, 1), float64] */;
    (%765, %766, meta[relay.Constant][41] /* ty=Tensor[(4, 52), float32] */, %767, %var_7356)
  };
  %768(%var_7373) /* ty=(Tensor[(2, 5, ?), float64], Tensor[(?, 13, 16), float64], Tensor[(4, 52), float32], Tensor[(13, 1, 1), float64], Tensor[(13), float64]) */
}

def @func_6298(%var_6297: Tensor[(13, 10, 10), bool]) -> Tensor[(13, 10, 10), float32] {
  %777 = fn (%var_6271: Tensor[(13, 10, 10), bool]) -> Tensor[(13, 10, 10), float32] {
    %769 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
    %770 = %769.1;
    %771 = cast(%var_6271, dtype="int8") /* ty=Tensor[(13, 10, 10), int8] */;
    %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
    %773 = cast(%770, dtype="int8") /* ty=Tensor[(13, 10, 10), int8] */;
    %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %775 = add(%773, %774) /* ty=Tensor[(13, 10, 10), int8] */;
    %776 = cast(%775, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
    cos(%776) /* ty=Tensor[(13, 10, 10), float32] */
  };
  %777(%var_6297) /* ty=Tensor[(13, 10, 10), float32] */
}

def @func_4893() -> Tensor[(10), float32] {
  %778 = fn () -> Tensor[(10), float32] {
    @func_3845() /* ty=Tensor[(10), float32] */
  };
  %778() /* ty=Tensor[(10), float32] */
}

def @func_7906() -> (Tensor[(10), float32],) {
  %779 = @func_6777() /* ty=Tensor[(10), float32] */;
  (%779,)
}

def @func_5658(%var_5656: Tensor[(1300), float32], %var_5657: Tensor[(1300), float32]) -> (Tensor[(1300), bool], Tensor[(1300), uint64], Tensor[(1300), float32]) {
  @func_5654(%var_5656, %var_5657) /* ty=(Tensor[(1300), bool], Tensor[(1300), uint64], Tensor[(1300), float32]) */
}

def @func_2819() -> (Tensor[(10), float32], Tensor[(?, 13, 16), float64], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(1144), uint64], Tensor[(1300), float32], Tensor[(1144), uint8]) {
  %780 = cast(meta[relay.Constant][42] /* ty=Tensor[(1144), int32] */, dtype="int32") /* ty=Tensor[(1144), int32] */;
  %781 = reshape(%780, newshape=[1144]) /* ty=Tensor[(1144), int32] */;
  %782 = @func_1918(%781) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(?, 13, 16), float64], Tensor[(140), float32], Tensor[(13, 8, 11), float64], Tensor[(12, 7, 12), bool], Tensor[(1008), int8]) */;
  %783 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
  %784 = @func_2170() /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool]) */;
  %785 = cast(meta[relay.Constant][42] /* ty=Tensor[(1144), int32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %786 = exp(%785) /* ty=Tensor[(1144), float32] */;
  %787 = cast(meta[relay.Constant][42] /* ty=Tensor[(1144), int32] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %788 = sinh(%787) /* ty=Tensor[(1144), float64] */;
  %789 = cast(%788, dtype="int64") /* ty=Tensor[(1144), int64] */;
  %790 = shape_of(%786, dtype="int32") /* ty=Tensor[(1), int32] */;
  %791 = cast(%786, dtype="int64") /* ty=Tensor[(1144), int64] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?), int64] */;
  %793 = left_shift(%791, %792) /* ty=Tensor[(1144), int64] */;
  %794 = cast(meta[relay.Constant][42] /* ty=Tensor[(1144), int32] */, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(1), int32] */;
  %796 = cast(%793, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %798 = cast(%786, dtype="uint8") /* ty=Tensor[(1144), uint8] */;
  %799 = shape_of(%788, dtype="int32") /* ty=Tensor[(1), int32] */;
  %800 = cast(%788, dtype="uint8") /* ty=Tensor[(1144), uint8] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %802 = @func_2488() /* ty=Tensor[(10), float32] */;
  %803 = %782.2;
  %804 = %783.0;
  %805 = %784.0;
  %806 = bitwise_or(%796, %797) /* ty=Tensor[(1144), uint64] */;
  %807 = @func_2348() /* ty=Tensor[(1300), float32] */;
  %808 = subtract(%800, %801) /* ty=Tensor[(1144), uint8] */;
  (%802, %803, %804, %805, %806, %807, %808)
}

def @func_1920(%var_1919: Tensor[(1144), int32]) -> (Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(?, 13, 16), float64], Tensor[(140), float32], Tensor[(13, 8, 11), float64], Tensor[(12, 7, 12), bool], Tensor[(1008), int8]) {
  %828 = fn (%var_1898: Tensor[(1144), int32]) -> (Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(?, 13, 16), float64], Tensor[(140), float32], Tensor[(13, 8, 11), float64], Tensor[(12, 7, 12), bool], Tensor[(1008), int8]) {
    %809 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
    %810 = cast(meta[relay.Constant][43] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %811 = reshape(%810, newshape=[7, 5, 4]) /* ty=Tensor[(7, 5, 4), float32] */;
    %812 = @func_1884(%811) /* ty=(Tensor[(7, 5, 4), float32], Tensor[(?, 13, 16), float64], Tensor[(104, 2), float32], Tensor[(1300), uint16], Tensor[(7, 12, 11), float32]) */;
    %813 = cast(%var_1898, dtype="int32") /* ty=Tensor[(1144), int32] */;
    %814 = reshape(%813, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), int32] */;
    %815 = @func_1022(%814) /* ty=Tensor[(13, 8, 11), bool] */;
    %816 = cast(%815, dtype="float64") /* ty=Tensor[(13, 8, 11), float64] */;
    %817 = cast(meta[relay.Constant][44] /* ty=Tensor[(1008), int8] */, dtype="int8") /* ty=Tensor[(1008), int8] */;
    %818 = cast(meta[relay.Constant][44] /* ty=Tensor[(1008), int8] */, dtype="int8") /* ty=Tensor[(1008), int8] */;
    %819 = cast(meta[relay.Constant][44] /* ty=Tensor[(1008), int8] */, dtype="bool") /* ty=Tensor[(1008), bool] */;
    %820 = reshape(%817, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
    %821 = reshape(%818, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
    %822 = reshape(%819, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), bool] */;
    %823 = @func_802(%820, %821, %822) /* ty=(Tensor[(12, 7, 12), bool],) */;
    %824 = %809.0;
    %825 = %812.1;
    %826 = sigmoid(%816) /* ty=Tensor[(13, 8, 11), float64] */;
    %827 = %823.0;
    (%824, %var_1898, %825, meta[relay.Constant][43] /* ty=Tensor[(140), float32] */, %826, %827, meta[relay.Constant][44] /* ty=Tensor[(1008), int8] */)
  };
  %828(%var_1919) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(1144), int32], Tensor[(?, 13, 16), float64], Tensor[(140), float32], Tensor[(13, 8, 11), float64], Tensor[(12, 7, 12), bool], Tensor[(1008), int8]) */
}

def @func_4402(%var_4362: Tensor[(1008), int8]) -> (Tensor[(14, 5, 15), float32], Tensor[(12, 7, 12), bool], Tensor[(1008), int8], Tensor[(14, 5, 15), float32]) {
  %829 = @func_3575() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %830 = cast(%var_4362, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %831 = cast(%var_4362, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %832 = cast(%var_4362, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %833 = reshape(%830, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %834 = reshape(%831, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %835 = reshape(%832, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), bool] */;
  %836 = @func_802(%833, %834, %835) /* ty=(Tensor[(12, 7, 12), bool],) */;
  %837 = @func_2136() /* ty=(Tensor[(14, 5, 15), float32], Tensor[(10), float32], Tensor[(13, 10, 10), bool]) */;
  %838 = %829.0;
  %839 = %836.0;
  %840 = %837.0;
  (%838, %839, %var_4362, %840)
}

def @func_4503() -> (Tensor[(10), float32], Tensor[(1300), uint16], Tensor[(14, 5, 15), float32]) {
  @func_4501() /* ty=(Tensor[(10), float32], Tensor[(1300), uint16], Tensor[(14, 5, 15), float32]) */
}

def @func_1377(%var_1374: float32, %var_1375: Tensor[(13, 5, 1), float32], %var_1376: Tensor[(1, 13, 16), float32]) -> (Tensor[(13, 10, 10), bool], Tensor[(13, 5, 1), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(13, 5, 208), bool], Tensor[(13, 5, 208), int32], Tensor[(?, 13, 16), bool], Tensor[(13, 10, 10), bool], Tensor[(13, 5, 208), bool], Tensor[(?, 13, 16), int8]) {
  %892 = fn (%var_1240: float32, %var_1241: Tensor[(13, 5, 1), float32], %var_1354: Tensor[(1, 13, 16), float32]) -> (Tensor[(13, 10, 10), bool], Tensor[(13, 5, 1), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(13, 5, 208), bool], Tensor[(13, 5, 208), int32], Tensor[(?, 13, 16), bool], Tensor[(13, 10, 10), bool], Tensor[(13, 5, 208), bool], Tensor[(?, 13, 16), int8]) {
    %841 = @func_1233() /* ty=(Tensor[(13, 10, 10), bool],) */;
    %842 = cast(%var_1240, dtype="float32") /* ty=float32 */;
    %843 = cast(%var_1241, dtype="float32") /* ty=Tensor[(13, 5, 1), float32] */;
    %844 = maximum(%842, %843) /* ty=Tensor[(13, 5, 1), float32] */;
    %845 = cast(%844, dtype="float32") /* ty=Tensor[(13, 5, 1), float32] */;
    %846 = cast(%var_1240, dtype="float32") /* ty=float32 */;
    %847 = cast(meta[relay.Constant][45] /* ty=Tensor[(1144), int32] */, dtype="int32") /* ty=Tensor[(1144), int32] */;
    %848 = reshape(%847, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), int32] */;
    %849 = %841.0;
    %850 = cast(%849, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
    %851 = cast(%849, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
    %852 = reshape(%850, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %853 = reshape(%851, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %854 = @func_750(%852, %853) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
    %855 = %854.1;
    %856 = cast(%855, dtype="float32") /* ty=Tensor[(?, 13, 16), float32] */;
    %857 = reshape(%856, newshape=[208]) /* ty=Tensor[(208), float32] */;
    %858 = @func_1169(%857) /* ty=(Tensor[(7, 12, 11), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
    %859 = %858.2;
    %860 = cast(%859, dtype="bool") /* ty=Tensor[(208), bool] */;
    %861 = cast(%844, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
    %862 = cast(%844, dtype="int32") /* ty=Tensor[(13, 5, 1), int32] */;
    %863 = cast(%859, dtype="int32") /* ty=Tensor[(208), int32] */;
    %864 = cast(%855, dtype="float32") /* ty=Tensor[(?, 13, 16), float32] */;
    %865 = sinh(%864) /* ty=Tensor[(?, 13, 16), float32] */;
    %866 = cast(%855, dtype="bool") /* ty=Tensor[(?, 13, 16), bool] */;
    %867 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
    %868 = cast(%865, dtype="bool") /* ty=Tensor[(?, 13, 16), bool] */;
    %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %870 = cast(%849, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
    %871 = cast(%849, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
    %872 = reshape(%870, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %873 = reshape(%871, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %874 = @func_750(%872, %873) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
    %875 = cast(%var_1241, dtype="bool") /* ty=Tensor[(13, 5, 1), bool] */;
    %876 = cast(%859, dtype="bool") /* ty=Tensor[(208), bool] */;
    %877 = cast(%var_1354, dtype="bool") /* ty=Tensor[(1, 13, 16), bool] */;
    %878 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
    %879 = cast(%865, dtype="bool") /* ty=Tensor[(?, 13, 16), bool] */;
    %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %881 = not_equal(%879, %880) /* ty=Tensor[(?, 13, 16), bool] */;
    %882 = cast(%881, dtype="int8") /* ty=Tensor[(?, 13, 16), int8] */;
    %883 = cast(%var_1240, dtype="int8") /* ty=int8 */;
    %884 = power(%845, %846) /* ty=Tensor[(13, 5, 1), float32] */;
    %885 = @func_1022(%848) /* ty=Tensor[(13, 8, 11), bool] */;
    %886 = logical_or(%860, %861) /* ty=Tensor[(13, 5, 208), bool] */;
    %887 = right_shift(%862, %863) /* ty=Tensor[(13, 5, 208), int32] */;
    %888 = less_equal(%868, %869) /* ty=Tensor[(?, 13, 16), bool] */;
    %889 = %874.0;
    %890 = less(%875, %876) /* ty=Tensor[(13, 5, 208), bool] */;
    %891 = subtract(%882, %883) /* ty=Tensor[(?, 13, 16), int8] */;
    (%849, %884, %885, meta[relay.Constant][45] /* ty=Tensor[(1144), int32] */, %886, %887, %888, %889, %890, %891)
  };
  %892(%var_1374, %var_1375, %var_1376) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(13, 5, 1), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(13, 5, 208), bool], Tensor[(13, 5, 208), int32], Tensor[(?, 13, 16), bool], Tensor[(13, 10, 10), bool], Tensor[(13, 5, 208), bool], Tensor[(?, 13, 16), int8]) */
}

def @func_6116() -> (Tensor[(14, 5, 15), float64], Tensor[(13, 10, 10), bool], Tensor[(288, 2), uint64]) {
  @func_6114() /* ty=(Tensor[(14, 5, 15), float64], Tensor[(13, 10, 10), bool], Tensor[(288, 2), uint64]) */
}

def @func_5520(%var_5518: Tensor[(1386), int64], %var_5519: Tensor[(1008), int8]) -> (Tensor[(10), float32], Tensor[(8, ?), bool], Tensor[(8), uint64], Tensor[(14, 9, 11), bool], Tensor[(1386), int64], Tensor[(14, 9, 11), bool], Tensor[(1300), float32], Tensor[(14, 3, 5), float32], Tensor[(1008), int8], Tensor[(12, 7, 12), float64]) {
  @func_5516(%var_5518, %var_5519) /* ty=(Tensor[(10), float32], Tensor[(8, ?), bool], Tensor[(8), uint64], Tensor[(14, 9, 11), bool], Tensor[(1386), int64], Tensor[(14, 9, 11), bool], Tensor[(1300), float32], Tensor[(14, 3, 5), float32], Tensor[(1008), int8], Tensor[(12, 7, 12), float64]) */
}

def @func_2642() -> (Tensor[(14, 5, 15), float32],) {
  %893 = @func_2116() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %894 = %893.0;
  (%894,)
}

def @func_6406(%var_6384: Tensor[(1300), bool]) -> (Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), bool], Tensor[(1300), float32], Tensor[(13, 10, 10), float64]) {
  %895 = @func_3290() /* ty=(Tensor[(10), float32],) */;
  %896 = @func_5750() /* ty=(float32, Tensor[(10), float32], Tensor[(10), float32]) */;
  %897 = @func_6199() /* ty=(Tensor[(1300), float32], Tensor[(1300), float32]) */;
  %898 = cast(%var_6384, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %899 = reshape(%898, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), bool] */;
  %900 = @func_6296(%899) /* ty=Tensor[(13, 10, 10), float32] */;
  %901 = cast(%900, dtype="float64") /* ty=Tensor[(13, 10, 10), float64] */;
  %902 = %895.0;
  %903 = %896.2;
  %904 = %897.1;
  %905 = acos(%901) /* ty=Tensor[(13, 10, 10), float64] */;
  (%902, %903, %var_6384, %904, %905)
}

def @func_6199() -> (Tensor[(1300), float32], Tensor[(1300), float32]) {
  %906 = @func_5548() /* ty=(Tensor[(1300), float32], Tensor[(14, 5, 15), float32], Tensor[(1008), int8]) */;
  %907 = %906.0;
  %908 = @func_2348() /* ty=Tensor[(1300), float32] */;
  (%907, %908)
}

def @func_1613(%var_1612: float32) -> (Tensor[(1300), float32], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1, 1144), int32], Tensor[(?, 13, 16), float32], Tensor[(13, 10, 10), bool], float32, Tensor[(65), float32]) {
  %933 = fn (%var_1600: float32) -> (Tensor[(1300), float32], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1, 1144), int32], Tensor[(?, 13, 16), float32], Tensor[(13, 10, 10), bool], float32, Tensor[(65), float32]) {
    %909 = @func_1449() /* ty=Tensor[(1300), float32] */;
    %910 = cast(%909, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %911 = cast(%909, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %912 = reshape(%910, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %913 = reshape(%911, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %914 = @func_750(%912, %913) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
    %915 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 1144), int32] */, dtype="int32") /* ty=Tensor[(1, 1144), int32] */;
    %916 = reshape(%915, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), int32] */;
    %917 = %914.2;
    %918 = cast(%917, dtype="float32") /* ty=Tensor[(208), float32] */;
    %919 = reshape(%918, newshape=[208]) /* ty=Tensor[(208), float32] */;
    %920 = @func_1169(%919) /* ty=(Tensor[(7, 12, 11), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) */;
    %921 = %920.1;
    %922 = cast(%921, dtype="float32") /* ty=Tensor[(?, 13, 16), float32] */;
    %923 = cast(%var_1600, dtype="float32") /* ty=float32 */;
    %924 = cast(meta[relay.Constant][47] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
    %925 = cast(%921, dtype="float32") /* ty=Tensor[(?, 13, 16), float32] */;
    %926 = reshape(%923, newshape=[]) /* ty=float32 */;
    %927 = reshape(%924, newshape=[13, 5, 1]) /* ty=Tensor[(13, 5, 1), float32] */;
    %928 = reshape(%925, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
    %929 = @func_1373(%926, %927, %928) /* ty=(Tensor[(13, 10, 10), bool], Tensor[(13, 5, 1), float32], Tensor[(13, 8, 11), bool], Tensor[(1144), int32], Tensor[(13, 5, 208), bool], Tensor[(13, 5, 208), int32], Tensor[(?, 13, 16), bool], Tensor[(13, 10, 10), bool], Tensor[(13, 5, 208), bool], Tensor[(?, 13, 16), int8]) */;
    %930 = @func_1022(%916) /* ty=Tensor[(13, 8, 11), bool] */;
    %931 = acos(%922) /* ty=Tensor[(?, 13, 16), float32] */;
    %932 = %929.0;
    (%909, %917, %930, meta[relay.Constant][46] /* ty=Tensor[(1, 1144), int32] */, %931, %932, %var_1600, meta[relay.Constant][47] /* ty=Tensor[(65), float32] */)
  };
  %933(%var_1612) /* ty=(Tensor[(1300), float32], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1, 1144), int32], Tensor[(?, 13, 16), float32], Tensor[(13, 10, 10), bool], float32, Tensor[(65), float32]) */
}

def @func_6137() -> (Tensor[(10), float32], Tensor[(10), float32]) {
  @func_6135() /* ty=(Tensor[(10), float32], Tensor[(10), float32]) */
}

def @func_5428() -> (Tensor[(1300), float32], Tensor[(1300), float32], Tensor[(14, 3, 5), float32]) {
  %934 = @func_5227() /* ty=(Tensor[(1300), float32],) */;
  %935 = @func_4625() /* ty=(Tensor[(14, 3, 5), float32],) */;
  %936 = %934.0;
  %937 = @func_2348() /* ty=Tensor[(1300), float32] */;
  %938 = %935.0;
  (%936, %937, %938)
}

def @func_2644() -> (Tensor[(14, 5, 15), float32],) {
  @func_2642() /* ty=(Tensor[(14, 5, 15), float32],) */
}

def @func_4673() -> Tensor[(10), float32] {
  %939 = fn () -> Tensor[(10), float32] {
    @func_3845() /* ty=Tensor[(10), float32] */
  };
  %939() /* ty=Tensor[(10), float32] */
}

def @func_6135() -> (Tensor[(10), float32], Tensor[(10), float32]) {
  %940 = @func_5750() /* ty=(float32, Tensor[(10), float32], Tensor[(10), float32]) */;
  %941 = @func_3290() /* ty=(Tensor[(10), float32],) */;
  %942 = %940.1;
  %943 = %941.0;
  (%942, %943)
}

def @func_3575() -> (Tensor[(14, 5, 15), float32],) {
  %944 = @func_2116() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %945 = %944.0;
  (%945,)
}

def @func_5880() -> (Tensor[(10), float32],) {
  @func_5878() /* ty=(Tensor[(10), float32],) */
}

def @func_6873() -> (Tensor[(10), float32], Tensor[(10), float32], Tensor[(1300), float64], Tensor[(1300), uint16], Tensor[(10), float32], float32, Tensor[(1, 1144), int32]) {
  %946 = @func_3290() /* ty=(Tensor[(10), float32],) */;
  %947 = cast(meta[relay.Constant][48] /* ty=Tensor[(1300), uint16] */, dtype="uint16") /* ty=Tensor[(1300), uint16] */;
  %948 = reshape(%947, newshape=[1300]) /* ty=Tensor[(1300), uint16] */;
  %949 = @func_2590(%948) /* ty=(Tensor[(1300), bool], Tensor[(1300), float64]) */;
  %950 = cast(6.19019f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %951 = reshape(%950, newshape=[]) /* ty=float32 */;
  %952 = @func_2461(%951) /* ty=(Tensor[(10), float32], Tensor[(208), float32], float32) */;
  %953 = cast(6.19019f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %954 = reshape(%953, newshape=[]) /* ty=float32 */;
  %955 = @func_1611(%954) /* ty=(Tensor[(1300), float32], Tensor[(208), float32], Tensor[(13, 8, 11), bool], Tensor[(1, 1144), int32], Tensor[(?, 13, 16), float32], Tensor[(13, 10, 10), bool], float32, Tensor[(65), float32]) */;
  %956 = %946.0;
  %957 = @func_6777() /* ty=Tensor[(10), float32] */;
  %958 = %949.1;
  %959 = %952.0;
  %960 = %955.3;
  (%956, %957, %958, meta[relay.Constant][48] /* ty=Tensor[(1300), uint16] */, %959, 6.19019f /* ty=float32 */, %960)
}

def @func_6114() -> (Tensor[(14, 5, 15), float64], Tensor[(13, 10, 10), bool], Tensor[(288, 2), uint64]) {
  %961 = @func_6065() /* ty=(Tensor[(14, 5, 15), float32],) */;
  %962 = %961.0;
  %963 = cast(%962, dtype="float64") /* ty=Tensor[(14, 5, 15), float64] */;
  %964 = cast(meta[relay.Constant][49] /* ty=Tensor[(288, 2), uint64] */, dtype="uint64") /* ty=Tensor[(288, 2), uint64] */;
  %965 = reshape(%964, newshape=[576]) /* ty=Tensor[(576), uint64] */;
  %966 = @func_4652(%965) /* ty=(Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(208, 1), float32], Tensor[(576), uint64], Tensor[(208), float32]) */;
  %967 = asinh(%963) /* ty=Tensor[(14, 5, 15), float64] */;
  %968 = %966.1;
  (%967, %968, meta[relay.Constant][49] /* ty=Tensor[(288, 2), uint64] */)
}

def @func_1169(%var_1156: Tensor[(208), float32]) -> (Tensor[(7, 12, 11), float32], Tensor[(?, 13, 16), float64], Tensor[(208), float32]) {
  %969 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %970 = cast(%var_1156, dtype="float32") /* ty=Tensor[(208), float32] */;
  %971 = reshape(%970, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %972 = %969.0;
  %973 = @func_332(%971) /* ty=Tensor[(?, 13, 16), float64] */;
  (%972, %973, %var_1156)
}

def @func_2092() -> Tensor[(1300), bool] {
  @func_2090() /* ty=Tensor[(1300), bool] */
}

def @func_2170() -> (Tensor[(1300), float32], Tensor[(13, 10, 10), bool]) {
  %974 = @func_1078() /* ty=(Tensor[(7, 12, 11), float32], Tensor[(13, 10, 10), bool], Tensor[(1300), float32]) */;
  %975 = @func_1933() /* ty=(Tensor[(1300), uint16], Tensor[(13, 10, 10), bool]) */;
  %976 = %974.2;
  %977 = %975.1;
  (%976, %977)
}

def @func_4865() -> (Tensor[(10), float32], Tensor[(10), float32], float32) {
  %983 = fn () -> (Tensor[(10), float32], Tensor[(10), float32], float32) {
    %978 = cast(-1.13849f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %979 = reshape(%978, newshape=[]) /* ty=float32 */;
    %980 = @func_2461(%979) /* ty=(Tensor[(10), float32], Tensor[(208), float32], float32) */;
    %981 = @func_4672() /* ty=Tensor[(10), float32] */;
    %982 = %980.0;
    (%981, %982, -1.13849f /* ty=float32 */)
  };
  %983() /* ty=(Tensor[(10), float32], Tensor[(10), float32], float32) */
}

def @func_7071() -> (Tensor[(2, 5, ?), float64],) {
  @func_7069() /* ty=(Tensor[(2, 5, ?), float64],) */
}

def @func_7702() -> (Tensor[(10), float32],) {
  @func_7700() /* ty=(Tensor[(10), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen410/build/output.py:2659: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen410/build/output.py", line 2664, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(924) tvmgen_default_fused_asinh_cast_cast_reshape_bitwise_or_kernel0(uint* __restrict__ T_bitwise_or, float* __restrict__ placeholder) {
  T_bitwise_or[(((int)threadIdx.x))] = (((uint)asinhf(placeholder[(((int)threadIdx.x))])) | ((uint)placeholder[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

