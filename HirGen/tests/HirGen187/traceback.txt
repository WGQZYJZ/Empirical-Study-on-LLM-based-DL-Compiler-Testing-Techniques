==========mod==========
#[version = "0.0.5"]
def @func_1208(%var_1198: Tensor[(3, 12, 12), float32]) -> Tensor[(3, 12, 12), float32] {
  %0 = cast(%var_1198, dtype="float32") /* ty=Tensor[(3, 12, 12), float32] */;
  sigmoid(%0) /* ty=Tensor[(3, 12, 12), float32] */
}

def @main(%var_6975: Tensor[(480, 2), int64]) -> (Tensor[(144), float32], Tensor[(480, 2), int64], Tensor[(8, 12, 10), float32]) {
  %1 = @func_5854() /* ty=(Tensor[(1, 196), float64], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %2 = cast(%var_6975, dtype="int64") /* ty=Tensor[(480, 2), int64] */;
  %3 = cast(%var_6975, dtype="int64") /* ty=Tensor[(480, 2), int64] */;
  %4 = reshape(%2, newshape=[8, 12, 10]) /* ty=Tensor[(8, 12, 10), int64] */;
  %5 = reshape(%3, newshape=[8, 12, 10]) /* ty=Tensor[(8, 12, 10), int64] */;
  %6 = @func_4935(%4, %5) /* ty=Tensor[(8, 12, 10), int64] */;
  %7 = cast(%6, dtype="float32") /* ty=Tensor[(8, 12, 10), float32] */;
  %8 = %1.2;
  %9 = erf(%7) /* ty=Tensor[(8, 12, 10), float32] */;
  (%8, %var_6975, %9)
}

def @func_2268(%var_2221: Tensor[(275), float64], %var_2253: Tensor[(1485), int8]) -> (Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float64], Tensor[(15, 9, 11), int8], Tensor[(1485), int8], Tensor[(1, 196), float64]) {
  %10 = @func_2011() /* ty=Tensor[(144), float32] */;
  %11 = cast(%10, dtype="float32") /* ty=Tensor[(144), float32] */;
  %12 = reshape(%11, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %13 = @func_356(%12) /* ty=(Tensor[(3, 4, 12), bool],) */;
  %14 = cast(%var_2221, dtype="float64") /* ty=Tensor[(275), float64] */;
  %15 = reshape(%14, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
  %16 = @func_1800(%15) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) */;
  %17 = cast(%var_2221, dtype="float64") /* ty=Tensor[(275), float64] */;
  %18 = reshape(%17, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
  %19 = @func_1800(%18) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) */;
  %20 = cast(%var_2221, dtype="float64") /* ty=Tensor[(275), float64] */;
  %21 = reshape(%20, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
  %22 = @func_613(%21) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
  %23 = %22.1;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %25 = erf(%24) /* ty=Tensor[(3, 4, 12), float32] */;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
  %27 = cast(%var_2253, dtype="int8") /* ty=Tensor[(1485), int8] */;
  %28 = reshape(%27, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int8] */;
  %29 = @func_767(%28) /* ty=(Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) */;
  %30 = @func_1874() /* ty=(Tensor[(9, 2, 3), float32], Tensor[(14, 14, 1), float64], Tensor[(1, 196), float64]) */;
  %31 = %13.0;
  %32 = %16.1;
  %33 = %19.1;
  %34 = sinh(%26) /* ty=Tensor[(3, 4, 12), float64] */;
  %35 = %29.0;
  %36 = %30.2;
  (%10, %31, %var_2221, %32, %33, %34, %35, %var_2253, %36)
}

def @func_3627(%var_3582: Tensor[(8, 16, 8), int32], %var_3602: Tensor[(11, 25), float64]) -> (Tensor[(8, 16, 8), int8], Tensor[(275), float64], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) {
  %37 = @func_1123() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool]) */;
  %38 = %37.0;
  %39 = cast(%var_3582, dtype="int8") /* ty=Tensor[(8, 16, 8), int8] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%38, dtype="int8") /* ty=Tensor[(8, 16, 8), int8] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %43 = cast(%var_3602, dtype="float64") /* ty=Tensor[(11, 25), float64] */;
  %44 = cast(%var_3602, dtype="float64") /* ty=Tensor[(11, 25), float64] */;
  %45 = reshape(%43, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %46 = reshape(%44, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %47 = @func_1642(%45, %46) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(144), uint16], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(1485), int8], Tensor[(55, 5), uint32]) */;
  %48 = @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */;
  %49 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 16, 8), int32] */, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %50 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%38, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %53 = cast(%38, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %54 = shape_of(%var_3582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%var_3582, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %57 = mod(%55, %56) /* ty=Tensor[(8, 16, 8), float32] */;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %59 = subtract(%41, %42) /* ty=Tensor[(8, 16, 8), int8] */;
  %60 = %47.7;
  %61 = %48.0;
  %62 = not_equal(%51, %52) /* ty=Tensor[(8, 16, 8), bool] */;
  %63 = exp(%58) /* ty=Tensor[(8, 16, 8), float32] */;
  (%59, %60, %var_3602, %61, %62, %63)
}

def @func_4743() -> Tensor[(275), uint16] {
  %64 = @func_4394() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), uint16], Tensor[(8, 16, 8), int32]) */;
  %64.2
}

def @func_767(%var_749: Tensor[(15, 9, 11), int8]) -> (Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) {
  %65 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %66 = cast(%var_749, dtype="int8") /* ty=Tensor[(15, 9, 11), int8] */;
  %67 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 25), float64] */, dtype="float64") /* ty=Tensor[(11, 25), float64] */;
  %68 = reshape(%67, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %69 = @func_733(%68) /* ty=(Tensor[(144), float32], Tensor[(8, 16, 8), int32], Tensor[(55, 5), float64]) */;
  %70 = minimum(%65, %66) /* ty=Tensor[(15, 9, 11), int8] */;
  %71 = %69.1;
  (%70, %71, meta[relay.Constant][2] /* ty=Tensor[(11, 25), float64] */)
}

def @func_6488() -> Tensor[(3, 4, 12), bool] {
  %72 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %72.2
}

def @func_2011() -> Tensor[(144), float32] {
  %73 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %73.1
}

def @func_1114() -> Tensor[(8, 16, 8), int32] {
  %74 = @func_1103() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %74.0
}

def @func_3443() -> (Tensor[(8, 16, 8), int32],) {
  %75 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %76 = %75.3;
  (%76,)
}

def @func_2419() -> (Tensor[(275), float64], Tensor[(8, 16, 8), int32], Tensor[(3, 12, 12), float32], Tensor[(2, 216), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(231), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) {
  %77 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
  %78 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %79 = reshape(%78, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %80 = cast(meta[relay.Constant][4] /* ty=Tensor[(231), float64] */, dtype="float64") /* ty=Tensor[(231), float64] */;
  %81 = %77.3;
  %82 = cast(%81, dtype="float64") /* ty=Tensor[(275), float64] */;
  %83 = reshape(%80, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), float64] */;
  %84 = reshape(%82, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %85 = @func_1054(%83, %84) /* ty=(Tensor[(3, 7, 11), float64], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) */;
  %86 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
  %87 = @func_1208(%79) /* ty=Tensor[(3, 12, 12), float32] */;
  %88 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  %89 = %85.2;
  %90 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  %91 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  (%81, %86, %87, meta[relay.Constant][3] /* ty=Tensor[(2, 216), float32] */, %88, %89, meta[relay.Constant][4] /* ty=Tensor[(231), float64] */, %90, %91)
}

def @func_4223(%var_4207: Tensor[(14, 12), float32]) -> (Tensor[(14, 12), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) {
  %92 = cast(%var_4207, dtype="float32") /* ty=Tensor[(14, 12), float32] */;
  %93 = @func_1123() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool]) */;
  %94 = @func_3114() /* ty=(Tensor[(3, 4, 12), bool],) */;
  %95 = asinh(%92) /* ty=Tensor[(14, 12), float32] */;
  %96 = %93.1;
  %97 = %94.0;
  (%95, %96, %97)
}

def @func_4114() -> (Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) {
  %98 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %99 = @func_2091() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %100 = %98.0;
  %101 = %99.0;
  (%100, %101)
}

def @func_5007(%var_4983: Tensor[(5, 6, 1), bool], %var_4984: Tensor[(5, 6, 1), bool], %var_4997: Tensor[(275), float64], %var_5002: Tensor[(440), float64]) -> (Tensor[(5, 6, ?), bool], Tensor[(275), float64], Tensor[(275), float64], Tensor[(5, 11, 8), float64], Tensor[(440), float64]) {
  %102 = cast(%var_4984, dtype="bool") /* ty=Tensor[(5, 6, 1), bool] */;
  %103 = shape_of(%var_4983, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%var_4983, dtype="bool") /* ty=Tensor[(5, 6, 1), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %106 = cast(%var_4997, dtype="float64") /* ty=Tensor[(275), float64] */;
  %107 = reshape(%106, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %108 = @func_3421(%107) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), uint32], Tensor[(275), float64]) */;
  %109 = cast(%var_5002, dtype="float64") /* ty=Tensor[(440), float64] */;
  %110 = reshape(%109, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %111 = @func_4431(%110) /* ty=(Tensor[(5, 11, 8), float64],) */;
  %112 = logical_and(%104, %105) /* ty=Tensor[(5, 6, ?), bool] */;
  %113 = %108.4;
  %114 = %111.0;
  (%112, %113, %var_4997, %114, %var_5002)
}

def @func_1402(%var_1399: Tensor[(14, 14, 1), float64]) -> (Tensor[(14, 14, 1), float64],) {
  %115 = cast(%var_1399, dtype="float64") /* ty=Tensor[(14, 14, 1), float64] */;
  %116 = atan(%115) /* ty=Tensor[(14, 14, 1), float64] */;
  (%116,)
}

def @func_3070() -> Tensor[(8, 16, 8), int32] {
  %117 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %117.2
}

def @func_5375() -> Tensor[(3, 4, 12), bool] {
  %118 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %118.2
}

def @func_2133() -> (Tensor[(3, 4, 12), bool],) {
  %119 = @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */;
  %120 = %119.0;
  (%120,)
}

def @func_2586() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) {
  %121 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %122 = %121.0;
  %123 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 4, 12), bool] */, dtype="uint8") /* ty=Tensor[(3, 4, 12), uint8] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="uint8") /* ty=Tensor[(3, 4, 12), uint8] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %127 = maximum(%125, %126) /* ty=Tensor[(3, 4, 12), uint8] */;
  %128 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 4, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%127, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %132 = @func_2125() /* ty=Tensor[(3, 4, 12), bool] */;
  %133 = greater(%130, %131) /* ty=Tensor[(3, 4, 12), bool] */;
  (%132, %133)
}

def @func_1054(%var_1034: Tensor[(3, 7, 11), float64], %var_1039: Tensor[(275), float64]) -> (Tensor[(3, 7, 11), float64], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) {
  %134 = cast(%var_1034, dtype="float64") /* ty=Tensor[(3, 7, 11), float64] */;
  %135 = cast(%var_1039, dtype="float64") /* ty=Tensor[(275), float64] */;
  %136 = reshape(%135, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
  %137 = @func_613(%136) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
  %138 = sinh(%134) /* ty=Tensor[(3, 7, 11), float64] */;
  %139 = %137.6;
  (%138, %139, %var_1039)
}

def @func_4726() -> (Tensor[(144), float32], Tensor[(3, 2, 14), uint16], Tensor[(42), float64], Tensor[(84), float64]) {
  %140 = cast(meta[relay.Constant][6] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %141 = cast(meta[relay.Constant][7] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %142 = reshape(%140, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), float64] */;
  %143 = reshape(%141, newshape=[3, 2, 14]) /* ty=Tensor[(3, 2, 14), float64] */;
  %144 = @func_1983(%142, %143) /* ty=(Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 2, 14), uint16]) */;
  %145 = @func_2011() /* ty=Tensor[(144), float32] */;
  %146 = %144.2;
  (%145, %146, meta[relay.Constant][6] /* ty=Tensor[(42), float64] */, meta[relay.Constant][7] /* ty=Tensor[(84), float64] */)
}

def @func_5978() -> (Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) {
  %147 = @func_4554() /* ty=Tensor[(8, 16, 8), int32] */;
  %148 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 16, 8), int32] */, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 16, 8), int32] */, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %153 = logical_and(%150, %151) /* ty=Tensor[(8, 16, 8), bool] */;
  %154 = tan(%152) /* ty=Tensor[(8, 16, 8), float32] */;
  (%153, %154)
}

def @func_3421(%var_3395: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), uint32], Tensor[(275), float64]) {
  %155 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %156 = cast(meta[relay.Constant][9] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
  %157 = cast(meta[relay.Constant][9] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
  %158 = reshape(%156, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %159 = reshape(%157, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %160 = @func_1642(%158, %159) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(144), uint16], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(1485), int8], Tensor[(55, 5), uint32]) */;
  %161 = cast(%var_3395, dtype="bool") /* ty=Tensor[(275), bool] */;
  %162 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(275), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %163 = cast(meta[relay.Constant][9] /* ty=Tensor[(275), float64] */, dtype="bool") /* ty=Tensor[(275), bool] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?), bool] */;
  %165 = less_equal(%163, %164) /* ty=Tensor[(275), bool] */;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(275), float64] */;
  %167 = reshape(%166, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %168 = @func_3322(%167) /* ty=(Tensor[(3, 4, 12), uint32], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) */;
  %169 = cast(%165, dtype="float64") /* ty=Tensor[(275), float64] */;
  %170 = exp(%169) /* ty=Tensor[(275), float64] */;
  %171 = cast(%170, dtype="float64") /* ty=Tensor[(275), float64] */;
  %172 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
  %173 = %155.4;
  %174 = %160.6;
  %175 = %168.0;
  %176 = sin(%171) /* ty=Tensor[(275), float64] */;
  (%172, %173, %174, %175, %176)
}

def @func_3879(%var_3841: Tensor[(275), float64]) -> (Tensor[(10, 16, 2), float64], Tensor[(320), float64], Tensor[(275), float64], Tensor[(275), float64], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(15, 9, 11), int8], Tensor[(3, 4, 12), float64]) {
  %177 = cast(meta[relay.Constant][10] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %178 = reshape(%177, newshape=[10, 16, 2]) /* ty=Tensor[(10, 16, 2), float64] */;
  %179 = @func_1770(%178) /* ty=(Tensor[(10, 16, 2), float64], Tensor[(8, 16, 8), int32]) */;
  %180 = cast(%var_3841, dtype="float64") /* ty=Tensor[(275), float64] */;
  %181 = reshape(%180, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %182 = @func_841(%181) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64]) */;
  %183 = @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */;
  %184 = @func_1103() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %185 = %183.1;
  %186 = cast(%185, dtype="int8") /* ty=Tensor[(1485), int8] */;
  %187 = reshape(%186, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int8] */;
  %188 = @func_767(%187) /* ty=(Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) */;
  %189 = @func_2586() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) */;
  %190 = %189.0;
  %191 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 4, 12), bool] */, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %195 = %179.0;
  %196 = %182.2;
  %197 = %184.0;
  %198 = %188.0;
  %199 = mod(%193, %194) /* ty=Tensor[(3, 4, 12), float64] */;
  (%195, meta[relay.Constant][10] /* ty=Tensor[(320), float64] */, %196, %var_3841, %185, %197, %198, %199)
}

def @func_1352(%var_1344: Tensor[(3, 4, 12), float32]) -> (Tensor[(3, 4, 12), uint64],) {
  %200 = @func_1153() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(3, 4, 12), bool]) */;
  %201 = %200.0;
  %202 = cast(%var_1344, dtype="uint64") /* ty=Tensor[(3, 4, 12), uint64] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="uint64") /* ty=Tensor[(3, 4, 12), uint64] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %206 = bitwise_xor(%204, %205) /* ty=Tensor[(3, 4, 12), uint64] */;
  (%206,)
}

def @func_3903() -> (Tensor[(16, 12, 16), bool],) {
  %207 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 1, 16), bool] */, dtype="bool") /* ty=Tensor[(16, 1, 16), bool] */;
  %208 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 12, 16), bool] */, dtype="bool") /* ty=Tensor[(16, 12, 16), bool] */;
  %209 = logical_or(%207, %208) /* ty=Tensor[(16, 12, 16), bool] */;
  (%209,)
}

def @func_1735(%var_1730: Tensor[(275), float64]) -> (Tensor[(1485), int8], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(8, 16, 8), int32]) {
  %210 = @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */;
  %211 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %212 = cast(%var_1730, dtype="float64") /* ty=Tensor[(275), float64] */;
  %213 = reshape(%212, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %214 = @func_1448(%213) /* ty=(Tensor[(275), bool], Tensor[(3, 4, 12), bool]) */;
  %215 = %210.1;
  %216 = %211.2;
  %217 = %214.1;
  %218 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
  (%215, %216, %217, %var_1730, %218)
}

def @func_2753() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(11, 25), float64], Tensor[(275), float64]) {
  %219 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %221 = reshape(%220, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %222 = @func_1352(%221) /* ty=(Tensor[(3, 4, 12), uint64],) */;
  %223 = cast(meta[relay.Constant][14] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
  %224 = reshape(%223, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
  %225 = @func_1800(%224) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) */;
  %226 = %222.0;
  %227 = %225.2;
  (%219, %226, %227, meta[relay.Constant][14] /* ty=Tensor[(275), float64] */)
}

def @func_1123() -> (Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool]) {
  %228 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %229 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %230 = %228.2;
  %231 = %229.0;
  (%230, %231)
}

def @func_6462(%var_6443: Tensor[(42, 2), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(42), float64], Tensor[(42, 2), float64]) {
  %232 = @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */;
  %233 = cast(meta[relay.Constant][15] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %234 = cast(%var_6443, dtype="float64") /* ty=Tensor[(42, 2), float64] */;
  %235 = reshape(%233, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), float64] */;
  %236 = reshape(%234, newshape=[3, 2, 14]) /* ty=Tensor[(3, 2, 14), float64] */;
  %237 = @func_1983(%235, %236) /* ty=(Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 2, 14), uint16]) */;
  %238 = %232.0;
  %239 = %237.0;
  (%238, %239, meta[relay.Constant][15] /* ty=Tensor[(42), float64] */, %var_6443)
}

def @func_6912(%var_6899: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) {
  %240 = cast(%var_6899, dtype="float64") /* ty=Tensor[(275), float64] */;
  %241 = reshape(%240, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %242 = @func_6885(%241) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(8, 16, 8), bool]) */;
  %243 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  %244 = %242.1;
  (%243, %244, %var_6899)
}

def @func_2703() -> (Tensor[(3, 4, 12), bool], Tensor[(9, 3), float64], Tensor[(3, 4, 12), uint32]) {
  %245 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 3), float64] */;
  %246 = reshape(%245, newshape=[1, 9, 3]) /* ty=Tensor[(1, 9, 3), float64] */;
  %247 = @func_1702(%246) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1, 144), float32], Tensor[(14, 14, 1), float64], Tensor[(196), float64], Tensor[(?, 9, 3), float64]) */;
  %248 = @func_2351() /* ty=Tensor[(3, 4, 12), float64] */;
  %249 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 4, 12), float64] */, dtype="uint32") /* ty=Tensor[(3, 4, 12), uint32] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%248, dtype="uint32") /* ty=Tensor[(3, 4, 12), uint32] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %253 = %247.0;
  %254 = multiply(%251, %252) /* ty=Tensor[(3, 4, 12), uint32] */;
  (%253, meta[relay.Constant][16] /* ty=Tensor[(9, 3), float64] */, %254)
}

def @func_2481() -> (Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32]) {
  %255 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %256 = @func_2091() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %257 = %255.4;
  %258 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
  %259 = %256.0;
  (%257, %258, %259)
}

def @func_5592() -> Tensor[(9, 3), float64] {
  %260 = @func_2703() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(9, 3), float64], Tensor[(3, 4, 12), uint32]) */;
  %260.1
}

def @func_5731() -> (Tensor[(9, 3), float64],) {
  %261 = @func_5592() /* ty=Tensor[(9, 3), float64] */;
  (%261,)
}

def @func_2125() -> Tensor[(3, 4, 12), bool] {
  @func_1283() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_4019() -> (Tensor[(8, 16, 8), int32],) {
  %262 = @func_2481() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32]) */;
  %263 = %262.1;
  (%263,)
}

def @func_1642(%var_1503: Tensor[(55, 5), float64], %var_1514: Tensor[(55, 5), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(144), uint16], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(1485), int8], Tensor[(55, 5), uint32]) {
  %264 = cast(%var_1514, dtype="uint8") /* ty=Tensor[(55, 5), uint8] */;
  %265 = shape_of(%var_1503, dtype="int32") /* ty=Tensor[(2), int32] */;
  %266 = cast(%var_1503, dtype="uint8") /* ty=Tensor[(55, 5), uint8] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %268 = subtract(%266, %267) /* ty=Tensor[(55, 5), uint8] */;
  %269 = cast(%268, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
  %270 = reshape(%269, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
  %271 = @func_613(%270) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
  %272 = cast(%var_1514, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
  %273 = reshape(%272, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
  %274 = @func_613(%273) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
  %275 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
  %276 = @func_1123() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool]) */;
  %277 = cast(%var_1503, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
  %278 = reshape(%277, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %279 = @func_841(%278) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64]) */;
  %280 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
  %281 = cast(%var_1503, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
  %282 = reshape(%281, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %283 = @func_733(%282) /* ty=(Tensor[(144), float32], Tensor[(8, 16, 8), int32], Tensor[(55, 5), float64]) */;
  %284 = %283.0;
  %285 = cast(%var_1514, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
  %286 = reshape(%285, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
  %287 = @func_613(%286) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
  %288 = %287.1;
  %289 = cast(%288, dtype="uint16") /* ty=Tensor[(3, 4, 12), uint16] */;
  %290 = shape_of(%284, dtype="int32") /* ty=Tensor[(1), int32] */;
  %291 = cast(%284, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %293 = cast(%var_1503, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
  %294 = reshape(%293, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
  %295 = @func_613(%294) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
  %296 = add(%291, %292) /* ty=Tensor[(144), uint16] */;
  %297 = cast(%296, dtype="float32") /* ty=Tensor[(144), float32] */;
  %298 = reshape(%297, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %299 = @func_356(%298) /* ty=(Tensor[(3, 4, 12), bool],) */;
  %300 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %301 = cast(%var_1514, dtype="uint16") /* ty=Tensor[(55, 5), uint16] */;
  %302 = shape_of(%268, dtype="int32") /* ty=Tensor[(2), int32] */;
  %303 = cast(%268, dtype="uint16") /* ty=Tensor[(55, 5), uint16] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %305 = bitwise_and(%303, %304) /* ty=Tensor[(55, 5), uint16] */;
  %306 = cast(%var_1503, dtype="uint32") /* ty=Tensor[(55, 5), uint32] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(2), int32] */;
  %308 = cast(%305, dtype="uint32") /* ty=Tensor[(55, 5), uint32] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %310 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  %311 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
  %312 = %271.2;
  %313 = %274.0;
  %314 = %275.1;
  %315 = %276.1;
  %316 = %279.1;
  %317 = %280.3;
  %318 = %295.3;
  %319 = %299.0;
  %320 = %300.1;
  %321 = right_shift(%308, %309) /* ty=Tensor[(55, 5), uint32] */;
  (%310, %311, %312, %313, %314, %315, %316, %317, %296, %318, %319, %320, %321)
}

def @func_4665(%var_4647: Tensor[(12, 16, 16), int32], %var_4648: Tensor[(12, 16, 16), int32]) -> (Tensor[(12, 16, 16), int32], Tensor[(15, 9, 11), int8], Tensor[(1485, 1), int8]) {
  %322 = cast(%var_4648, dtype="int32") /* ty=Tensor[(12, 16, 16), int32] */;
  %323 = shape_of(%var_4647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%var_4647, dtype="int32") /* ty=Tensor[(12, 16, 16), int32] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %326 = cast(meta[relay.Constant][18] /* ty=Tensor[(1485, 1), int8] */, dtype="int8") /* ty=Tensor[(1485, 1), int8] */;
  %327 = reshape(%326, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int8] */;
  %328 = @func_767(%327) /* ty=(Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) */;
  %329 = add(%324, %325) /* ty=Tensor[(12, 16, 16), int32] */;
  %330 = %328.0;
  (%329, %330, meta[relay.Constant][18] /* ty=Tensor[(1485, 1), int8] */)
}

def @func_5269(%var_5263: Tensor[(12), float32]) -> (Tensor[(3, 4, 12), bool], Tensor[(4, 3), float32], Tensor[(12), float32]) {
  %331 = @func_1153() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(3, 4, 12), bool]) */;
  %332 = cast(%var_5263, dtype="float32") /* ty=Tensor[(12), float32] */;
  %333 = cast(%var_5263, dtype="float32") /* ty=Tensor[(12), float32] */;
  %334 = reshape(%332, newshape=[4, 3]) /* ty=Tensor[(4, 3), float32] */;
  %335 = reshape(%333, newshape=[4, 3]) /* ty=Tensor[(4, 3), float32] */;
  %336 = %331.1;
  %337 = @func_4247(%334, %335) /* ty=Tensor[(4, 3), float32] */;
  (%336, %337, %var_5263)
}

def @func_1983(%var_1932: Tensor[(3, 1, 14), float64], %var_1933: Tensor[(3, 2, 14), float64]) -> (Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 2, 14), uint16]) {
  %338 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %339 = @func_1153() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(3, 4, 12), bool]) */;
  %340 = cast(%var_1932, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
  %341 = cast(%var_1933, dtype="float64") /* ty=Tensor[(3, 2, 14), float64] */;
  %342 = divide(%340, %341) /* ty=Tensor[(3, 2, 14), float64] */;
  %343 = cast(%342, dtype="uint16") /* ty=Tensor[(3, 2, 14), uint16] */;
  %344 = cast(%var_1932, dtype="uint16") /* ty=Tensor[(3, 1, 14), uint16] */;
  %345 = %338.3;
  %346 = %339.1;
  %347 = subtract(%343, %344) /* ty=Tensor[(3, 2, 14), uint16] */;
  (%345, %346, %347)
}

def @func_2091() -> (Tensor[(8, 16, 8), int32],) {
  %348 = @func_1103() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %349 = %348.0;
  (%349,)
}

def @func_5673() -> (Tensor[(3, 4, 12), bool],) {
  %350 = @func_2125() /* ty=Tensor[(3, 4, 12), bool] */;
  (%350,)
}

def @func_2622(%var_2620: Tensor[(275), float64]) -> (Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), float64]) {
  %351 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %352 = cast(%var_2620, dtype="float64") /* ty=Tensor[(275), float64] */;
  %353 = cast(%var_2620, dtype="float64") /* ty=Tensor[(275), float64] */;
  %354 = reshape(%352, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %355 = reshape(%353, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %356 = @func_1642(%354, %355) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(144), uint16], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(1485), int8], Tensor[(55, 5), uint32]) */;
  %357 = %351.3;
  %358 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  %359 = %356.7;
  (%357, %358, %359, %var_2620)
}

def @func_2940() -> Tensor[(8, 16, 8), int32] {
  %360 = @func_1103() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %360.0
}

def @func_6265() -> (Tensor[(8, 16, 8), int32], Tensor[(3072), bool], Tensor[(14, 14, 1), float64], Tensor[(27), float64], Tensor[(16, 12, 16), float32]) {
  %361 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %362 = cast(meta[relay.Constant][20] /* ty=Tensor[(27), float64] */, dtype="float64") /* ty=Tensor[(27), float64] */;
  %363 = reshape(%362, newshape=[1, 9, 3]) /* ty=Tensor[(1, 9, 3), float64] */;
  %364 = @func_1702(%363) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1, 144), float32], Tensor[(14, 14, 1), float64], Tensor[(196), float64], Tensor[(?, 9, 3), float64]) */;
  %365 = cast(meta[relay.Constant][19] /* ty=Tensor[(3072), bool] */, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %366 = reshape(%365, newshape=[16, 12, 16]) /* ty=Tensor[(16, 12, 16), bool] */;
  %367 = @func_5123(%366) /* ty=(Tensor[(16, 12, 16), int32],) */;
  %368 = %367.0;
  %369 = cast(%368, dtype="float64") /* ty=Tensor[(16, 12, 16), float64] */;
  %370 = acosh(%369) /* ty=Tensor[(16, 12, 16), float64] */;
  %371 = cast(%368, dtype="uint16") /* ty=Tensor[(16, 12, 16), uint16] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="uint16") /* ty=Tensor[(16, 12, 16), uint16] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %375 = maximum(%373, %374) /* ty=Tensor[(16, 12, 16), uint16] */;
  %376 = cast(%375, dtype="float32") /* ty=Tensor[(16, 12, 16), float32] */;
  %377 = %361.0;
  %378 = %364.2;
  %379 = log2(%376) /* ty=Tensor[(16, 12, 16), float32] */;
  (%377, meta[relay.Constant][19] /* ty=Tensor[(3072), bool] */, %378, meta[relay.Constant][20] /* ty=Tensor[(27), float64] */, %379)
}

def @func_6341() -> Tensor[(3, 4, 12), uint32] {
  @func_4589() /* ty=Tensor[(3, 4, 12), uint32] */
}

def @func_546() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) {
  %380 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %381 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %382 = %381.2;
  %383 = cast(%382, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %384 = reshape(%383, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %385 = @func_356(%384) /* ty=(Tensor[(3, 4, 12), bool],) */;
  %386 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %387 = %380.0;
  %388 = %385.0;
  %389 = %386.1;
  (%387, %382, %388, %389)
}

def @func_6885(%var_6874: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(8, 16, 8), bool]) {
  %390 = cast(%var_6874, dtype="float64") /* ty=Tensor[(275), float64] */;
  %391 = reshape(%390, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %392 = @func_3322(%391) /* ty=(Tensor[(3, 4, 12), uint32], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) */;
  %393 = @func_5978() /* ty=(Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) */;
  %394 = @func_2125() /* ty=Tensor[(3, 4, 12), bool] */;
  %395 = %392.1;
  %396 = %393.0;
  (%394, %395, %var_6874, %396)
}

def @func_6652(%var_6632: Tensor[(27), float64], %var_6644: Tensor[(8, 16, 8), int32]) -> (Tensor[(1, 144), float32], Tensor[(27), float64], Tensor[(8, 16, 8), float64]) {
  %397 = cast(%var_6632, dtype="float64") /* ty=Tensor[(27), float64] */;
  %398 = reshape(%397, newshape=[1, 9, 3]) /* ty=Tensor[(1, 9, 3), float64] */;
  %399 = @func_1702(%398) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1, 144), float32], Tensor[(14, 14, 1), float64], Tensor[(196), float64], Tensor[(?, 9, 3), float64]) */;
  %400 = @func_2940() /* ty=Tensor[(8, 16, 8), int32] */;
  %401 = cast(%var_6644, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%400, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %405 = %399.1;
  %406 = maximum(%403, %404) /* ty=Tensor[(8, 16, 8), float64] */;
  (%405, %var_6632, %406)
}

def @func_1266() -> Tensor[(3, 4, 12), bool] {
  @func_859() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_4823(%var_4799: Tensor[(15, 8, 9), int16]) -> (Tensor[(84), float64], Tensor[(15, 8, 9), uint32], Tensor[(15, 8, 9), int64], Tensor[(15, 8, 9), float64]) {
  %407 = @func_4726() /* ty=(Tensor[(144), float32], Tensor[(3, 2, 14), uint16], Tensor[(42), float64], Tensor[(84), float64]) */;
  %408 = cast(meta[relay.Constant][22] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %409 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 8, 9), int16] */, dtype="int16") /* ty=Tensor[(15, 8, 9), int16] */;
  %410 = add(%408, %409) /* ty=Tensor[(15, 8, 9), int16] */;
  %411 = cast(%410, dtype="uint32") /* ty=Tensor[(15, 8, 9), uint32] */;
  %412 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(15, 8, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 8, 9), int16] */, dtype="uint32") /* ty=Tensor[(15, 8, 9), uint32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %415 = cast(%var_4799, dtype="int64") /* ty=Tensor[(15, 8, 9), int64] */;
  %416 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(15, 8, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 8, 9), int16] */, dtype="int64") /* ty=Tensor[(15, 8, 9), int64] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %419 = cast(%410, dtype="float64") /* ty=Tensor[(15, 8, 9), float64] */;
  %420 = %407.3;
  %421 = bitwise_or(%413, %414) /* ty=Tensor[(15, 8, 9), uint32] */;
  %422 = multiply(%417, %418) /* ty=Tensor[(15, 8, 9), int64] */;
  %423 = log(%419) /* ty=Tensor[(15, 8, 9), float64] */;
  (%420, %421, %422, %423)
}

def @func_4431(%var_4424: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float64],) {
  %424 = cast(%var_4424, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %425 = sinh(%424) /* ty=Tensor[(5, 11, 8), float64] */;
  (%425,)
}

def @func_5106() -> (Tensor[(11, 25), bool], Tensor[(8, 16, 8), int32], Tensor[(11, 25), bool], Tensor[(11, 25), int16]) {
  %426 = @func_2753() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(11, 25), float64], Tensor[(275), float64]) */;
  %427 = %426.2;
  %428 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 25), float64] */, dtype="bool") /* ty=Tensor[(11, 25), bool] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(2), int32] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(11, 25), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %432 = @func_1103() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %433 = cast(%427, dtype="float32") /* ty=Tensor[(11, 25), float32] */;
  %434 = sigmoid(%433) /* ty=Tensor[(11, 25), float32] */;
  %435 = cast(%434, dtype="uint8") /* ty=Tensor[(11, 25), uint8] */;
  %436 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(11, 25), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %437 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 25), float64] */, dtype="uint8") /* ty=Tensor[(11, 25), uint8] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %439 = subtract(%437, %438) /* ty=Tensor[(11, 25), uint8] */;
  %440 = cast(%439, dtype="bool") /* ty=Tensor[(11, 25), bool] */;
  %441 = shape_of(%434, dtype="int32") /* ty=Tensor[(2), int32] */;
  %442 = cast(%434, dtype="bool") /* ty=Tensor[(11, 25), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %444 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 25), float64] */, dtype="int16") /* ty=Tensor[(11, 25), int16] */;
  %445 = shape_of(%427, dtype="int32") /* ty=Tensor[(2), int32] */;
  %446 = cast(%427, dtype="int16") /* ty=Tensor[(11, 25), int16] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %448 = logical_and(%430, %431) /* ty=Tensor[(11, 25), bool] */;
  %449 = %432.0;
  %450 = less_equal(%442, %443) /* ty=Tensor[(11, 25), bool] */;
  %451 = left_shift(%446, %447) /* ty=Tensor[(11, 25), int16] */;
  (%448, %449, %450, %451)
}

def @func_1702(%var_1672: Tensor[(1, 9, 3), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(1, 144), float32], Tensor[(14, 14, 1), float64], Tensor[(196), float64], Tensor[(?, 9, 3), float64]) {
  %452 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %453 = reshape(%452, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %454 = @func_356(%453) /* ty=(Tensor[(3, 4, 12), bool],) */;
  %455 = cast(meta[relay.Constant][26] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %456 = reshape(%455, newshape=[14, 14, 1]) /* ty=Tensor[(14, 14, 1), float64] */;
  %457 = @func_1402(%456) /* ty=(Tensor[(14, 14, 1), float64],) */;
  %458 = cast(%var_1672, dtype="float64") /* ty=Tensor[(1, 9, 3), float64] */;
  %459 = log10(%458) /* ty=Tensor[(1, 9, 3), float64] */;
  %460 = cast(%var_1672, dtype="float64") /* ty=Tensor[(1, 9, 3), float64] */;
  %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%459, dtype="float64") /* ty=Tensor[(1, 9, 3), float64] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %464 = %454.0;
  %465 = %457.0;
  %466 = floor_mod(%462, %463) /* ty=Tensor[(?, 9, 3), float64] */;
  (%464, meta[relay.Constant][25] /* ty=Tensor[(1, 144), float32] */, %465, meta[relay.Constant][26] /* ty=Tensor[(196), float64] */, %466)
}

def @func_6772() -> (Tensor[(3, 4, 12), bool],) {
  %467 = @func_2586() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) */;
  %468 = %467.0;
  (%468,)
}

def @func_1716() -> (Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) {
  %469 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %470 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %471 = %469.2;
  %472 = %470.1;
  (%471, %472)
}

def @func_5154(%var_5138: uint32, %var_5139: Tensor[(1, 9, 11), uint32]) -> (Tensor[(1, 9, 11), uint32], Tensor[(3, 4, 12), bool], Tensor[(15, 8, 9), int64], Tensor[(1080), int16]) {
  %473 = cast(%var_5138, dtype="uint32") /* ty=uint32 */;
  %474 = cast(%var_5139, dtype="uint32") /* ty=Tensor[(1, 9, 11), uint32] */;
  %475 = cast(meta[relay.Constant][27] /* ty=Tensor[(1080), int16] */, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %476 = reshape(%475, newshape=[15, 8, 9]) /* ty=Tensor[(15, 8, 9), int16] */;
  %477 = @func_4823(%476) /* ty=(Tensor[(84), float64], Tensor[(15, 8, 9), uint32], Tensor[(15, 8, 9), int64], Tensor[(15, 8, 9), float64]) */;
  %478 = right_shift(%473, %474) /* ty=Tensor[(1, 9, 11), uint32] */;
  %479 = @func_5024() /* ty=Tensor[(3, 4, 12), bool] */;
  %480 = %477.2;
  (%478, %479, %480, meta[relay.Constant][27] /* ty=Tensor[(1080), int16] */)
}

def @func_3041(%var_3036: Tensor[(3, 4, 12), bool]) -> (Tensor[(144), float32], Tensor[(3, 4, 12), float32]) {
  %481 = @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */;
  %482 = %481.0;
  %483 = cast(%var_3036, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %487 = @func_2011() /* ty=Tensor[(144), float32] */;
  %488 = power(%485, %486) /* ty=Tensor[(3, 4, 12), float32] */;
  (%487, %488)
}

def @func_4394() -> (Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), uint16], Tensor[(8, 16, 8), int32]) {
  %489 = @func_1153() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(3, 4, 12), bool]) */;
  %490 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
  %491 = %490.3;
  %492 = cast(%491, dtype="float64") /* ty=Tensor[(275), float64] */;
  %493 = reshape(%492, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %494 = @func_3879(%493) /* ty=(Tensor[(10, 16, 2), float64], Tensor[(320), float64], Tensor[(275), float64], Tensor[(275), float64], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(15, 9, 11), int8], Tensor[(3, 4, 12), float64]) */;
  %495 = cast(%491, dtype="float64") /* ty=Tensor[(275), float64] */;
  %496 = sqrt(%495) /* ty=Tensor[(275), float64] */;
  %497 = cast(%491, dtype="float64") /* ty=Tensor[(275), float64] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(1), int32] */;
  %499 = cast(%496, dtype="float64") /* ty=Tensor[(275), float64] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?), float64] */;
  %501 = mod(%499, %500) /* ty=Tensor[(275), float64] */;
  %502 = cast(%491, dtype="uint16") /* ty=Tensor[(275), uint16] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(1), int32] */;
  %504 = cast(%501, dtype="uint16") /* ty=Tensor[(275), uint16] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %506 = %489.1;
  %507 = %494.2;
  %508 = minimum(%504, %505) /* ty=Tensor[(275), uint16] */;
  %509 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
  (%506, %507, %508, %509)
}

def @func_1448(%var_1428: Tensor[(275), float64]) -> (Tensor[(275), bool], Tensor[(3, 4, 12), bool]) {
  %510 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %511 = %510.3;
  %512 = cast(%var_1428, dtype="bool") /* ty=Tensor[(275), bool] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(1), int32] */;
  %514 = cast(%511, dtype="bool") /* ty=Tensor[(275), bool] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?), bool] */;
  %516 = cast(%511, dtype="float64") /* ty=Tensor[(275), float64] */;
  %517 = reshape(%516, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %518 = @func_841(%517) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64]) */;
  %519 = greater(%514, %515) /* ty=Tensor[(275), bool] */;
  %520 = %518.0;
  (%519, %520)
}

def @func_6832() -> Tensor[(3, 4, 12), bool] {
  %521 = @func_5673() /* ty=(Tensor[(3, 4, 12), bool],) */;
  %521.0
}

def @func_6722(%var_6696: Tensor[(4, 196), float64]) -> (Tensor[(4, 196), float64],) {
  %522 = @func_4025() /* ty=(Tensor[(1, 196), float64],) */;
  %523 = %522.0;
  %524 = cast(%523, dtype="float64") /* ty=Tensor[(1, 196), float64] */;
  %525 = cast(%var_6696, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %526 = divide(%524, %525) /* ty=Tensor[(4, 196), float64] */;
  (%526,)
}

def @func_4589() -> Tensor[(3, 4, 12), uint32] {
  %527 = @func_2703() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(9, 3), float64], Tensor[(3, 4, 12), uint32]) */;
  %527.2
}

def @func_6283() -> (Tensor[(275), float64],) {
  %528 = @func_2753() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(11, 25), float64], Tensor[(275), float64]) */;
  %529 = %528.3;
  (%529,)
}

def @func_1283() -> Tensor[(3, 4, 12), bool] {
  %530 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
  %530.0
}

def @func_6955(%var_6937: Tensor[(2, 72), float32], %var_6947: Tensor[(275), float64]) -> (Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(2, 72), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) {
  %531 = @func_5978() /* ty=(Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) */;
  %532 = @func_2091() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %533 = cast(%var_6937, dtype="float32") /* ty=Tensor[(2, 72), float32] */;
  %534 = reshape(%533, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %535 = @func_356(%534) /* ty=(Tensor[(3, 4, 12), bool],) */;
  %536 = @func_2133() /* ty=(Tensor[(3, 4, 12), bool],) */;
  %537 = cast(%var_6947, dtype="float64") /* ty=Tensor[(275), float64] */;
  %538 = reshape(%537, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %539 = @func_6885(%538) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(8, 16, 8), bool]) */;
  %540 = %531.0;
  %541 = %532.0;
  %542 = %535.0;
  %543 = %536.0;
  %544 = %539.0;
  (%540, %541, %542, %var_6937, %543, %544, %var_6947)
}

def @func_1103() -> (Tensor[(8, 16, 8), int32],) {
  %545 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %546 = %545.3;
  (%546,)
}

def @func_4247(%var_4237: Tensor[(4, 3), float32], %var_4238: Tensor[(4, 3), float32]) -> Tensor[(4, 3), float32] {
  %547 = cast(%var_4238, dtype="float32") /* ty=Tensor[(4, 3), float32] */;
  %548 = shape_of(%var_4237, dtype="int32") /* ty=Tensor[(2), int32] */;
  %549 = cast(%var_4237, dtype="float32") /* ty=Tensor[(4, 3), float32] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  multiply(%549, %550) /* ty=Tensor[(4, 3), float32] */
}

def @func_356(%var_304: Tensor[(3, 4, 12), float32]) -> (Tensor[(3, 4, 12), bool],) {
  %551 = cast(%var_304, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %552 = sqrt(%551) /* ty=Tensor[(3, 4, 12), float32] */;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %554 = cosh(%553) /* ty=Tensor[(3, 4, 12), float32] */;
  %555 = cast(%552, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %559 = greater_equal(%557, %558) /* ty=Tensor[(3, 4, 12), bool] */;
  (%559,)
}

def @func_613(%var_553: Tensor[(5, 11, 5), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) {
  %560 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %561 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %562 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %563 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %564 = cast(%var_553, dtype="float64") /* ty=Tensor[(5, 11, 5), float64] */;
  %565 = cosh(%564) /* ty=Tensor[(5, 11, 5), float64] */;
  %566 = cast(%var_553, dtype="bool") /* ty=Tensor[(5, 11, 5), bool] */;
  %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%565, dtype="bool") /* ty=Tensor[(5, 11, 5), bool] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %570 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %571 = %570.1;
  %572 = cast(%571, dtype="float32") /* ty=Tensor[(144), float32] */;
  %573 = reshape(%572, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %574 = @func_356(%573) /* ty=(Tensor[(3, 4, 12), bool],) */;
  %575 = %560.1;
  %576 = %561.0;
  %577 = %562.0;
  %578 = %563.3;
  %579 = less(%568, %569) /* ty=Tensor[(5, 11, 5), bool] */;
  %580 = %574.0;
  (%575, %576, %577, %578, %579, %571, %580)
}

def @func_5297(%var_5275: Tensor[(10, 7, 14), float32]) -> (Tensor[(10, 7, 14), float32], Tensor[(10, 7, 14), float64], Tensor[(8, 16, 8), float32], Tensor[(1024), int32], Tensor[(275, 1), float64]) {
  %581 = cast(%var_5275, dtype="float32") /* ty=Tensor[(10, 7, 14), float32] */;
  %582 = cast(%var_5275, dtype="float64") /* ty=Tensor[(10, 7, 14), float64] */;
  %583 = cast(meta[relay.Constant][28] /* ty=Tensor[(1024), int32] */, dtype="int32") /* ty=Tensor[(1024), int32] */;
  %584 = cast(meta[relay.Constant][29] /* ty=Tensor[(275, 1), float64] */, dtype="float64") /* ty=Tensor[(275, 1), float64] */;
  %585 = reshape(%583, newshape=[8, 16, 8]) /* ty=Tensor[(8, 16, 8), int32] */;
  %586 = reshape(%584, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
  %587 = @func_3627(%585, %586) /* ty=(Tensor[(8, 16, 8), int8], Tensor[(275), float64], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) */;
  %588 = log10(%581) /* ty=Tensor[(10, 7, 14), float32] */;
  %589 = cos(%582) /* ty=Tensor[(10, 7, 14), float64] */;
  %590 = %587.5;
  (%588, %589, %590, meta[relay.Constant][28] /* ty=Tensor[(1024), int32] */, meta[relay.Constant][29] /* ty=Tensor[(275, 1), float64] */)
}

def @func_2778() -> (Tensor[(14, 14, 1), float64],) {
  %591 = @func_1874() /* ty=(Tensor[(9, 2, 3), float32], Tensor[(14, 14, 1), float64], Tensor[(1, 196), float64]) */;
  %592 = %591.1;
  %593 = cast(%592, dtype="float64") /* ty=Tensor[(14, 14, 1), float64] */;
  %594 = log2(%593) /* ty=Tensor[(14, 14, 1), float64] */;
  (%594,)
}

def @func_3257(%var_3245: Tensor[(4, 3, 6), int64]) -> Tensor[(4, 3, 6), int64] {
  %595 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 3, 6), int64] */, dtype="int64") /* ty=Tensor[(4, 3, 6), int64] */;
  %596 = shape_of(%var_3245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%var_3245, dtype="int64") /* ty=Tensor[(4, 3, 6), int64] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  multiply(%597, %598) /* ty=Tensor[(4, 3, 6), int64] */
}

def @func_3786() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32]) {
  %599 = @func_2753() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(11, 25), float64], Tensor[(275), float64]) */;
  %600 = @func_2125() /* ty=Tensor[(3, 4, 12), bool] */;
  %601 = cast(%600, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %602 = reshape(%601, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), bool] */;
  %603 = @func_3041(%602) /* ty=(Tensor[(144), float32], Tensor[(3, 4, 12), float32]) */;
  %604 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 25), float64] */, dtype="float64") /* ty=Tensor[(11, 25), float64] */;
  %605 = reshape(%604, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %606 = @func_2622(%605) /* ty=(Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), float64]) */;
  %607 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 25), float64] */, dtype="float64") /* ty=Tensor[(11, 25), float64] */;
  %608 = reshape(%607, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %609 = @func_3421(%608) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), uint32], Tensor[(275), float64]) */;
  %610 = %599.1;
  %611 = %603.0;
  %612 = %606.1;
  %613 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
  %614 = %609.1;
  (%600, %610, %611, %612, meta[relay.Constant][31] /* ty=Tensor[(11, 25), float64] */, %613, %614)
}

def @func_712(%var_690: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float32]) {
  %615 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %616 = cast(%var_690, dtype="float64") /* ty=Tensor[(275), float64] */;
  %617 = reshape(%616, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
  %618 = @func_613(%617) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
  %619 = cast(%var_690, dtype="float32") /* ty=Tensor[(275), float32] */;
  %620 = %615.0;
  %621 = %618.3;
  %622 = acos(%619) /* ty=Tensor[(275), float32] */;
  (%620, %621, %622)
}

def @func_2351() -> Tensor[(3, 4, 12), float64] {
  %623 = @func_2298() /* ty=(Tensor[(3, 4, 12), float64],) */;
  %623.0
}

def @func_841(%var_824: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64]) {
  %624 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %625 = cast(%var_824, dtype="float64") /* ty=Tensor[(275), float64] */;
  %626 = reshape(%625, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %627 = @func_733(%626) /* ty=(Tensor[(144), float32], Tensor[(8, 16, 8), int32], Tensor[(55, 5), float64]) */;
  %628 = %624.1;
  %629 = %627.1;
  (%628, %629, %var_824)
}

def @func_2298() -> (Tensor[(3, 4, 12), float64],) {
  %630 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
  %631 = %630.0;
  %632 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 4, 12), bool] */, dtype="uint8") /* ty=Tensor[(3, 4, 12), uint8] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="uint8") /* ty=Tensor[(3, 4, 12), uint8] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %636 = minimum(%634, %635) /* ty=Tensor[(3, 4, 12), uint8] */;
  %637 = cast(%636, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
  %638 = atan(%637) /* ty=Tensor[(3, 4, 12), float64] */;
  (%638,)
}

def @func_1153() -> (Tensor[(3, 4, 12), float32], Tensor[(3, 4, 12), bool]) {
  %639 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %640 = %639.4;
  %641 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
  (%640, %641)
}

def @func_4334(%var_4270: Tensor[(3, 16, 12), uint64]) -> (Tensor[(3, 16, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32], Tensor[(3, 16, 12), uint16], Tensor[(3, 4, 12), bool], Tensor[(3, 16, 12), bool]) {
  %642 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 16, 12), uint64] */, dtype="bool") /* ty=Tensor[(3, 16, 12), bool] */;
  %643 = shape_of(%var_4270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%var_4270, dtype="bool") /* ty=Tensor[(3, 16, 12), bool] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %646 = @func_2133() /* ty=(Tensor[(3, 4, 12), bool],) */;
  %647 = cast(%var_4270, dtype="float32") /* ty=Tensor[(3, 16, 12), float32] */;
  %648 = exp(%647) /* ty=Tensor[(3, 16, 12), float32] */;
  %649 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 16, 12), float32] */, dtype="uint16") /* ty=Tensor[(3, 16, 12), uint16] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="uint16") /* ty=Tensor[(3, 16, 12), uint16] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %653 = cast(%648, dtype="bool") /* ty=Tensor[(3, 16, 12), bool] */;
  %654 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(3, 16, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 16, 12), float32] */, dtype="bool") /* ty=Tensor[(3, 16, 12), bool] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %657 = greater(%644, %645) /* ty=Tensor[(3, 16, 12), bool] */;
  %658 = %646.0;
  %659 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
  %660 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
  %661 = minimum(%651, %652) /* ty=Tensor[(3, 16, 12), uint16] */;
  %662 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
  %663 = less(%655, %656) /* ty=Tensor[(3, 16, 12), bool] */;
  (%657, %658, %659, %660, %661, %662, %663)
}

def @func_3009(%var_2969: Tensor[(275), float64], %var_2985: Tensor[(231), float64], %var_2990: Tensor[(320), float64]) -> (Tensor[(8, 16, 8), float32], Tensor[(275), bool], Tensor[(3, 4, 12), float64], Tensor[(275), float64], Tensor[(231), float64], Tensor[(8, 16, 8), int32], Tensor[(320), float64]) {
  %664 = cast(meta[relay.Constant][35] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
  %665 = reshape(%664, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
  %666 = @func_1800(%665) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) */;
  %667 = cast(%var_2969, dtype="bool") /* ty=Tensor[(275), bool] */;
  %668 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(275), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %669 = cast(meta[relay.Constant][35] /* ty=Tensor[(275), float64] */, dtype="bool") /* ty=Tensor[(275), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?), bool] */;
  %671 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
  %672 = %671.1;
  %673 = cast(%672, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
  %674 = cast(%var_2985, dtype="float64") /* ty=Tensor[(231), float64] */;
  %675 = cast(meta[relay.Constant][35] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
  %676 = reshape(%674, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), float64] */;
  %677 = reshape(%675, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %678 = @func_1054(%676, %677) /* ty=(Tensor[(3, 7, 11), float64], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) */;
  %679 = cast(%var_2990, dtype="float64") /* ty=Tensor[(320), float64] */;
  %680 = reshape(%679, newshape=[10, 16, 2]) /* ty=Tensor[(10, 16, 2), float64] */;
  %681 = @func_1770(%680) /* ty=(Tensor[(10, 16, 2), float64], Tensor[(8, 16, 8), int32]) */;
  %682 = %666.0;
  %683 = greater_equal(%669, %670) /* ty=Tensor[(275), bool] */;
  %684 = exp(%673) /* ty=Tensor[(3, 4, 12), float64] */;
  %685 = %678.2;
  %686 = %681.1;
  (%682, %683, %684, %685, %var_2985, %686, %var_2990)
}

def @func_1874() -> (Tensor[(9, 2, 3), float32], Tensor[(14, 14, 1), float64], Tensor[(1, 196), float64]) {
  %687 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 2, 3), float64] */, dtype="float32") /* ty=Tensor[(9, 2, 3), float32] */;
  %688 = log(%687) /* ty=Tensor[(9, 2, 3), float32] */;
  %689 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
  %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%688, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %693 = divide(%691, %692) /* ty=Tensor[(9, 2, 3), float64] */;
  %694 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
  %695 = asinh(%694) /* ty=Tensor[(9, 2, 3), float64] */;
  %696 = cast(%695, dtype="float32") /* ty=Tensor[(9, 2, 3), float32] */;
  %697 = acosh(%696) /* ty=Tensor[(9, 2, 3), float32] */;
  %698 = cast(%697, dtype="uint64") /* ty=Tensor[(9, 2, 3), uint64] */;
  %699 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%693, dtype="uint64") /* ty=Tensor[(9, 2, 3), uint64] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %702 = bitwise_or(%700, %701) /* ty=Tensor[(9, 2, 3), uint64] */;
  %703 = cast(%688, dtype="float32") /* ty=Tensor[(9, 2, 3), float32] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%702, dtype="float32") /* ty=Tensor[(9, 2, 3), float32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %707 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 196), float64] */, dtype="float64") /* ty=Tensor[(1, 196), float64] */;
  %708 = reshape(%707, newshape=[14, 14, 1]) /* ty=Tensor[(14, 14, 1), float64] */;
  %709 = @func_1402(%708) /* ty=(Tensor[(14, 14, 1), float64],) */;
  %710 = floor_divide(%705, %706) /* ty=Tensor[(9, 2, 3), float32] */;
  %711 = %709.0;
  (%710, %711, meta[relay.Constant][37] /* ty=Tensor[(1, 196), float64] */)
}

def @func_3484(%var_3479: Tensor[(4, 12, 2), float32]) -> Tensor[(4, 12, 2), float32] {
  %712 = cast(%var_3479, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  log(%712) /* ty=Tensor[(4, 12, 2), float32] */
}

def @func_5854() -> (Tensor[(1, 196), float64], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) {
  %713 = @func_4025() /* ty=(Tensor[(1, 196), float64],) */;
  %714 = cast(meta[relay.Constant][38] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %715 = reshape(%714, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %716 = @func_356(%715) /* ty=(Tensor[(3, 4, 12), bool],) */;
  %717 = %713.0;
  %718 = %716.0;
  (%717, %718, meta[relay.Constant][38] /* ty=Tensor[(144), float32] */)
}

def @func_4935(%var_4930: Tensor[(8, 12, 10), int64], %var_4931: Tensor[(8, 12, 10), int64]) -> Tensor[(8, 12, 10), int64] {
  %719 = cast(%var_4931, dtype="int64") /* ty=Tensor[(8, 12, 10), int64] */;
  %720 = shape_of(%var_4930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_4930, dtype="int64") /* ty=Tensor[(8, 12, 10), int64] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  minimum(%721, %722) /* ty=Tensor[(8, 12, 10), int64] */
}

def @func_6114() -> (Tensor[(3, 4, 12), bool], Tensor[(12), float32], Tensor[(12), float32]) {
  %723 = cast(meta[relay.Constant][39] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
  %724 = reshape(%723, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %725 = @func_5269(%724) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(4, 3), float32], Tensor[(12), float32]) */;
  %726 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  %727 = %725.2;
  (%726, %727, meta[relay.Constant][39] /* ty=Tensor[(12), float32] */)
}

def @func_3983(%var_3936: float64, %var_3937: Tensor[(14, 1), float64]) -> (Tensor[(14, 1), float64], Tensor[(3, 4, 12), float64], Tensor[(8, 16, 8), float32], Tensor[(1024), int32], Tensor[(275), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) {
  %728 = cast(%var_3936, dtype="float64") /* ty=float64 */;
  %729 = cast(%var_3937, dtype="float64") /* ty=Tensor[(14, 1), float64] */;
  %730 = @func_2298() /* ty=(Tensor[(3, 4, 12), float64],) */;
  %731 = cast(meta[relay.Constant][40] /* ty=Tensor[(1024), int32] */, dtype="int32") /* ty=Tensor[(1024), int32] */;
  %732 = cast(meta[relay.Constant][41] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
  %733 = reshape(%731, newshape=[8, 16, 8]) /* ty=Tensor[(8, 16, 8), int32] */;
  %734 = reshape(%732, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
  %735 = @func_3627(%733, %734) /* ty=(Tensor[(8, 16, 8), int8], Tensor[(275), float64], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) */;
  %736 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %737 = cast(meta[relay.Constant][41] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
  %738 = reshape(%737, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
  %739 = @func_613(%738) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
  %740 = floor_divide(%728, %729) /* ty=Tensor[(14, 1), float64] */;
  %741 = %730.0;
  %742 = %735.5;
  %743 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
  %744 = %736.1;
  %745 = %739.2;
  (%740, %741, %742, meta[relay.Constant][40] /* ty=Tensor[(1024), int32] */, meta[relay.Constant][41] /* ty=Tensor[(275), float64] */, %743, %744, %745)
}

def @func_2187() -> (Tensor[(3, 4, 12), bool],) {
  %746 = @func_2125() /* ty=Tensor[(3, 4, 12), bool] */;
  (%746,)
}

def @func_6851(%var_6843: Tensor[(1, 13, 16), float32], %var_6844: Tensor[(1, 13, 16), float32]) -> Tensor[(?, 13, 16), float32] {
  %747 = cast(%var_6844, dtype="float32") /* ty=Tensor[(1, 13, 16), float32] */;
  %748 = shape_of(%var_6843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_6843, dtype="float32") /* ty=Tensor[(1, 13, 16), float32] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%749, %750) /* ty=Tensor[(?, 13, 16), float32] */
}

def @func_5024() -> Tensor[(3, 4, 12), bool] {
  %751 = @func_4394() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), uint16], Tensor[(8, 16, 8), int32]) */;
  %751.0
}

def @func_1770(%var_1748: Tensor[(10, 16, 2), float64]) -> (Tensor[(10, 16, 2), float64], Tensor[(8, 16, 8), int32]) {
  %752 = cast(%var_1748, dtype="float64") /* ty=Tensor[(10, 16, 2), float64] */;
  %753 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(10, 16, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 16, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 16, 2), float64] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %756 = @func_1103() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %757 = power(%754, %755) /* ty=Tensor[(10, 16, 2), float64] */;
  %758 = %756.0;
  (%757, %758)
}

def @func_733(%var_723: Tensor[(55, 5), float64]) -> (Tensor[(144), float32], Tensor[(8, 16, 8), int32], Tensor[(55, 5), float64]) {
  %759 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %760 = cast(%var_723, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
  %761 = reshape(%760, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %762 = @func_712(%761) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float32]) */;
  %763 = %759.1;
  %764 = %762.1;
  (%763, %764, %var_723)
}

def @func_2901(%var_2890: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), float32], Tensor[(144), float32], Tensor[(275), int8]) {
  %765 = @func_2481() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32]) */;
  %766 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
  %767 = %766.3;
  %768 = cast(%767, dtype="float64") /* ty=Tensor[(275), float64] */;
  %769 = reshape(%768, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %770 = @func_733(%769) /* ty=(Tensor[(144), float32], Tensor[(8, 16, 8), int32], Tensor[(55, 5), float64]) */;
  %771 = cast(%var_2890, dtype="int8") /* ty=Tensor[(275), int8] */;
  %772 = shape_of(%767, dtype="int32") /* ty=Tensor[(1), int32] */;
  %773 = cast(%767, dtype="int8") /* ty=Tensor[(275), int8] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?), int8] */;
  %775 = %765.0;
  %776 = %770.0;
  %777 = maximum(%773, %774) /* ty=Tensor[(275), int8] */;
  (%775, %776, %777)
}

def @func_3114() -> (Tensor[(3, 4, 12), bool],) {
  %778 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %779 = %778.2;
  (%779,)
}

def @func_3159(%var_3143: Tensor[(8, 16, 8), int32]) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 12), bool]) {
  %780 = @func_2940() /* ty=Tensor[(8, 16, 8), int32] */;
  %781 = cast(%var_3143, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%780, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %785 = @func_2419() /* ty=(Tensor[(275), float64], Tensor[(8, 16, 8), int32], Tensor[(3, 12, 12), float32], Tensor[(2, 216), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(231), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) */;
  %786 = floor_divide(%783, %784) /* ty=Tensor[(8, 16, 8), float64] */;
  %787 = %785.8;
  (%786, %787)
}

def @func_3322(%var_3320: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), uint32], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) {
  %788 = @func_2703() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(9, 3), float64], Tensor[(3, 4, 12), uint32]) */;
  %789 = cast(%var_3320, dtype="float64") /* ty=Tensor[(275), float64] */;
  %790 = reshape(%789, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %791 = @func_1448(%790) /* ty=(Tensor[(275), bool], Tensor[(3, 4, 12), bool]) */;
  %792 = %788.2;
  %793 = %791.1;
  (%792, %793, %var_3320)
}

def @func_1800(%var_1795: Tensor[(11, 25), float64]) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) {
  %794 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %795 = %794.0;
  %796 = cast(%795, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %797 = cast(%var_1795, dtype="float64") /* ty=Tensor[(11, 25), float64] */;
  %798 = reshape(%797, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %799 = @func_1448(%798) /* ty=(Tensor[(275), bool], Tensor[(3, 4, 12), bool]) */;
  %800 = cos(%796) /* ty=Tensor[(8, 16, 8), float32] */;
  %801 = %799.1;
  (%800, %801, %var_1795)
}

def @func_6570() -> Tensor[(3, 4, 12), bool] {
  @func_5375() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_942() -> (Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) {
  %802 = cast(meta[relay.Constant][43] /* ty=Tensor[(1485), int8] */, dtype="int8") /* ty=Tensor[(1485), int8] */;
  %803 = reshape(%802, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int8] */;
  %804 = @func_767(%803) /* ty=(Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) */;
  %805 = cast(meta[relay.Constant][44] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
  %806 = reshape(%805, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %807 = @func_712(%806) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float32]) */;
  %808 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %809 = %808.0;
  %810 = cast(%809, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %811 = sigmoid(%810) /* ty=Tensor[(3, 4, 12), float32] */;
  %812 = cast(%811, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %813 = %804.1;
  %814 = %807.1;
  %815 = acosh(%812) /* ty=Tensor[(3, 4, 12), float32] */;
  (%813, meta[relay.Constant][43] /* ty=Tensor[(1485), int8] */, %814, meta[relay.Constant][44] /* ty=Tensor[(275), float64] */, %815)
}

def @func_4731() -> (Tensor[(3, 4, 12), bool],) {
  %816 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
  (%816,)
}

def @func_4141(%var_4134: Tensor[(3, 4, 12), bool]) -> Tensor[(3, 4, 12), uint32] {
  %817 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  %818 = cast(%var_4134, dtype="uint32") /* ty=Tensor[(3, 4, 12), uint32] */;
  %819 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(%817, dtype="uint32") /* ty=Tensor[(3, 4, 12), uint32] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%820, %821) /* ty=Tensor[(3, 4, 12), uint32] */
}

def @func_859() -> Tensor[(3, 4, 12), bool] {
  %822 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %822.0
}

def @func_5123(%var_5112: Tensor[(16, 12, 16), bool]) -> (Tensor[(16, 12, 16), int32],) {
  %823 = @func_3903() /* ty=(Tensor[(16, 12, 16), bool],) */;
  %824 = %823.0;
  %825 = cast(%var_5112, dtype="int32") /* ty=Tensor[(16, 12, 16), int32] */;
  %826 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(%824, dtype="int32") /* ty=Tensor[(16, 12, 16), int32] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %829 = subtract(%827, %828) /* ty=Tensor[(16, 12, 16), int32] */;
  (%829,)
}

def @func_903() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) {
  %830 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %831 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %832 = cast(meta[relay.Constant][45] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
  %833 = reshape(%832, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %834 = @func_712(%833) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float32]) */;
  %835 = %830.2;
  %836 = %831.2;
  %837 = %834.2;
  (%835, %836, %837, meta[relay.Constant][45] /* ty=Tensor[(275), float64] */)
}

def @func_4025() -> (Tensor[(1, 196), float64],) {
  %838 = @func_1874() /* ty=(Tensor[(9, 2, 3), float32], Tensor[(14, 14, 1), float64], Tensor[(1, 196), float64]) */;
  %839 = %838.2;
  (%839,)
}

def @func_978(%var_958: uint8, %var_959: Tensor[(10, 1, 3), uint8]) -> (Tensor[(10, 1, 3), bool], Tensor[(10, 1, 3), float64]) {
  %840 = cast(%var_958, dtype="bool") /* ty=bool */;
  %841 = cast(%var_959, dtype="bool") /* ty=Tensor[(10, 1, 3), bool] */;
  %842 = cast(%var_959, dtype="float64") /* ty=Tensor[(10, 1, 3), float64] */;
  %843 = equal(%840, %841) /* ty=Tensor[(10, 1, 3), bool] */;
  %844 = sinh(%842) /* ty=Tensor[(10, 1, 3), float64] */;
  (%843, %844)
}

def @func_4955() -> (Tensor[(2, 6, 8), float64],) {
  %845 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 6, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 8), float64] */;
  %846 = tan(%845) /* ty=Tensor[(2, 6, 8), float64] */;
  (%846,)
}

def @func_475() -> (Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) {
  %847 = cast(meta[relay.Constant][47] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %848 = reshape(%847, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %849 = @func_356(%848) /* ty=(Tensor[(3, 4, 12), bool],) */;
  %850 = %849.0;
  %851 = cast(%850, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %852 = reshape(%851, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %853 = @func_356(%852) /* ty=(Tensor[(3, 4, 12), bool],) */;
  %854 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %855 = acos(%854) /* ty=Tensor[(8, 16, 8), float64] */;
  %856 = cast(%855, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %857 = cosh(%856) /* ty=Tensor[(8, 16, 8), float32] */;
  %858 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 16, 8), float64] */, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%857, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %862 = equal(%860, %861) /* ty=Tensor[(8, 16, 8), bool] */;
  %863 = cast(%862, dtype="int32") /* ty=Tensor[(8, 16, 8), int32] */;
  %864 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%857, dtype="int32") /* ty=Tensor[(8, 16, 8), int32] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %867 = %853.0;
  %868 = minimum(%865, %866) /* ty=Tensor[(8, 16, 8), int32] */;
  (%850, meta[relay.Constant][47] /* ty=Tensor[(144), float32] */, %867, %868)
}

def @func_4554() -> Tensor[(8, 16, 8), int32] {
  @func_1114() /* ty=Tensor[(8, 16, 8), int32] */
}

def @func_3227() -> (Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32], Tensor[(165, 9), int8], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float64]) {
  %869 = cast(meta[relay.Constant][49] /* ty=Tensor[(165, 9), int8] */, dtype="int8") /* ty=Tensor[(165, 9), int8] */;
  %870 = reshape(%869, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int8] */;
  %871 = @func_767(%870) /* ty=(Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) */;
  %872 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
  %873 = cast(%872, dtype="int32") /* ty=Tensor[(8, 16, 8), int32] */;
  %874 = reshape(%873, newshape=[8, 16, 8]) /* ty=Tensor[(8, 16, 8), int32] */;
  %875 = @func_3159(%874) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 12), bool]) */;
  %876 = @func_2703() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(9, 3), float64], Tensor[(3, 4, 12), uint32]) */;
  %877 = %871.1;
  %878 = %875.1;
  %879 = %876.0;
  %880 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  %881 = @func_2351() /* ty=Tensor[(3, 4, 12), float64] */;
  (%872, %877, meta[relay.Constant][49] /* ty=Tensor[(165, 9), int8] */, %878, %879, %880, %881)
}

def @func_6611(%var_6599: Tensor[(12), float32], %var_6601: Tensor[(16, 12, 16), bool]) -> (Tensor[(4, 3), float32], Tensor[(12), float32], Tensor[(16, 12, 16), int16], Tensor[(3, 4, 12), uint64]) {
  %882 = cast(%var_6599, dtype="float32") /* ty=Tensor[(12), float32] */;
  %883 = cast(%var_6599, dtype="float32") /* ty=Tensor[(12), float32] */;
  %884 = reshape(%882, newshape=[4, 3]) /* ty=Tensor[(4, 3), float32] */;
  %885 = reshape(%883, newshape=[4, 3]) /* ty=Tensor[(4, 3), float32] */;
  %886 = @func_3903() /* ty=(Tensor[(16, 12, 16), bool],) */;
  %887 = %886.0;
  %888 = cast(%var_6601, dtype="int16") /* ty=Tensor[(16, 12, 16), int16] */;
  %889 = shape_of(%887, dtype="int32") /* ty=Tensor[(3), int32] */;
  %890 = cast(%887, dtype="int16") /* ty=Tensor[(16, 12, 16), int16] */;
  %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %892 = @func_3786() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32]) */;
  %893 = @func_4247(%884, %885) /* ty=Tensor[(4, 3), float32] */;
  %894 = bitwise_xor(%890, %891) /* ty=Tensor[(16, 12, 16), int16] */;
  %895 = %892.1;
  (%893, %var_6599, %894, %895)
}

def @func_3350() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float64], Tensor[(1485), int8], Tensor[(1, 196), float64]) {
  %896 = @func_2586() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) */;
  %897 = @func_2298() /* ty=(Tensor[(3, 4, 12), float64],) */;
  %898 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %899 = @func_1874() /* ty=(Tensor[(9, 2, 3), float32], Tensor[(14, 14, 1), float64], Tensor[(1, 196), float64]) */;
  %900 = %896.0;
  %901 = %897.0;
  %902 = %898.1;
  %903 = %899.2;
  (%900, %901, %902, %903)
}

def @func_5799() -> (Tensor[(3, 4, 12), float64], Tensor[(11, 25), float64], Tensor[(275, 1), float64]) {
  %904 = @func_4394() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), uint16], Tensor[(8, 16, 8), int32]) */;
  %905 = %904.0;
  %906 = cast(%905, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
  %907 = cast(meta[relay.Constant][50] /* ty=Tensor[(275, 1), float64] */, dtype="float64") /* ty=Tensor[(275, 1), float64] */;
  %908 = reshape(%907, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
  %909 = @func_1800(%908) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) */;
  %910 = log2(%906) /* ty=Tensor[(3, 4, 12), float64] */;
  %911 = %909.2;
  (%910, %911, meta[relay.Constant][50] /* ty=Tensor[(275, 1), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_982(%var_980: uint8, %var_981: Tensor[(10, 1, 3), uint8]) -> (Tensor[(10, 1, 3), bool], Tensor[(10, 1, 3), float64]) {
  @func_978(%var_980, %var_981) /* ty=(Tensor[(10, 1, 3), bool], Tensor[(10, 1, 3), float64]) */
}

def @func_5732() -> (Tensor[(9, 3), float64],) {
  %1 = fn () -> (Tensor[(9, 3), float64],) {
    %0 = @func_5592() /* ty=Tensor[(9, 3), float64] */;
    (%0,)
  };
  %1() /* ty=(Tensor[(9, 3), float64],) */
}

def @func_1803(%var_1801: Tensor[(11, 25), float64]) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) {
  @func_1800(%var_1801) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) */
}

def @func_2134() -> (Tensor[(3, 4, 12), bool],) {
  %4 = fn () -> (Tensor[(3, 4, 12), bool],) {
    %2 = @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */;
    %3 = %2.0;
    (%3,)
  };
  %4() /* ty=(Tensor[(3, 4, 12), bool],) */
}

def @func_6887(%var_6886: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(8, 16, 8), bool]) {
  %12 = fn (%var_6874: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(8, 16, 8), bool]) {
    %5 = cast(%var_6874, dtype="float64") /* ty=Tensor[(275), float64] */;
    %6 = reshape(%5, newshape=[275]) /* ty=Tensor[(275), float64] */;
    %7 = @func_3322(%6) /* ty=(Tensor[(3, 4, 12), uint32], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) */;
    %8 = @func_5978() /* ty=(Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) */;
    %9 = @func_2125() /* ty=Tensor[(3, 4, 12), bool] */;
    %10 = %7.1;
    %11 = %8.0;
    (%9, %10, %var_6874, %11)
  };
  %12(%var_6886) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(8, 16, 8), bool]) */
}

def @func_3424(%var_3422: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), uint32], Tensor[(275), float64]) {
  @func_3421(%var_3422) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), uint32], Tensor[(275), float64]) */
}

def @func_4144(%var_4142: Tensor[(3, 4, 12), bool]) -> Tensor[(3, 4, 12), uint32] {
  @func_4141(%var_4142) /* ty=Tensor[(3, 4, 12), uint32] */
}

def @func_4957() -> (Tensor[(2, 6, 8), float64],) {
  @func_4955() /* ty=(Tensor[(2, 6, 8), float64],) */
}

def @func_5107() -> (Tensor[(11, 25), bool], Tensor[(8, 16, 8), int32], Tensor[(11, 25), bool], Tensor[(11, 25), int16]) {
  %39 = fn () -> (Tensor[(11, 25), bool], Tensor[(8, 16, 8), int32], Tensor[(11, 25), bool], Tensor[(11, 25), int16]) {
    %13 = @func_2753() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(11, 25), float64], Tensor[(275), float64]) */;
    %14 = %13.2;
    %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 25), float64] */, dtype="bool") /* ty=Tensor[(11, 25), bool] */;
    %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(2), int32] */;
    %17 = cast(%14, dtype="bool") /* ty=Tensor[(11, 25), bool] */;
    %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %19 = @func_1103() /* ty=(Tensor[(8, 16, 8), int32],) */;
    %20 = cast(%14, dtype="float32") /* ty=Tensor[(11, 25), float32] */;
    %21 = sigmoid(%20) /* ty=Tensor[(11, 25), float32] */;
    %22 = cast(%21, dtype="uint8") /* ty=Tensor[(11, 25), uint8] */;
    %23 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(11, 25), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 25), float64] */, dtype="uint8") /* ty=Tensor[(11, 25), uint8] */;
    %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %26 = subtract(%24, %25) /* ty=Tensor[(11, 25), uint8] */;
    %27 = cast(%26, dtype="bool") /* ty=Tensor[(11, 25), bool] */;
    %28 = shape_of(%21, dtype="int32") /* ty=Tensor[(2), int32] */;
    %29 = cast(%21, dtype="bool") /* ty=Tensor[(11, 25), bool] */;
    %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 25), float64] */, dtype="int16") /* ty=Tensor[(11, 25), int16] */;
    %32 = shape_of(%14, dtype="int32") /* ty=Tensor[(2), int32] */;
    %33 = cast(%14, dtype="int16") /* ty=Tensor[(11, 25), int16] */;
    %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %35 = logical_and(%17, %18) /* ty=Tensor[(11, 25), bool] */;
    %36 = %19.0;
    %37 = less_equal(%29, %30) /* ty=Tensor[(11, 25), bool] */;
    %38 = left_shift(%33, %34) /* ty=Tensor[(11, 25), int16] */;
    (%35, %36, %37, %38)
  };
  %39() /* ty=(Tensor[(11, 25), bool], Tensor[(8, 16, 8), int32], Tensor[(11, 25), bool], Tensor[(11, 25), int16]) */
}

def @func_6343() -> Tensor[(3, 4, 12), uint32] {
  @func_6341() /* ty=Tensor[(3, 4, 12), uint32] */
}

def @func_3260(%var_3258: Tensor[(4, 3, 6), int64]) -> Tensor[(4, 3, 6), int64] {
  @func_3257(%var_3258) /* ty=Tensor[(4, 3, 6), int64] */
}

def @func_2352() -> Tensor[(3, 4, 12), float64] {
  %41 = fn () -> Tensor[(3, 4, 12), float64] {
    %40 = @func_2298() /* ty=(Tensor[(3, 4, 12), float64],) */;
    %40.0
  };
  %41() /* ty=Tensor[(3, 4, 12), float64] */
}

def @func_3631(%var_3629: Tensor[(8, 16, 8), int32], %var_3630: Tensor[(11, 25), float64]) -> (Tensor[(8, 16, 8), int8], Tensor[(275), float64], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) {
  @func_3627(%var_3629, %var_3630) /* ty=(Tensor[(8, 16, 8), int8], Tensor[(275), float64], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) */
}

def @func_6722(%var_6696: Tensor[(4, 196), float64]) -> (Tensor[(4, 196), float64],) {
  %42 = @func_4025() /* ty=(Tensor[(1, 196), float64],) */;
  %43 = %42.0;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(1, 196), float64] */;
  %45 = cast(%var_6696, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %46 = divide(%44, %45) /* ty=Tensor[(4, 196), float64] */;
  (%46,)
}

def @func_1645(%var_1643: Tensor[(55, 5), float64], %var_1644: Tensor[(55, 5), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(144), uint16], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(1485), int8], Tensor[(55, 5), uint32]) {
  %105 = fn (%var_1503: Tensor[(55, 5), float64], %var_1514: Tensor[(55, 5), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(144), uint16], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(1485), int8], Tensor[(55, 5), uint32]) {
    %47 = cast(%var_1514, dtype="uint8") /* ty=Tensor[(55, 5), uint8] */;
    %48 = shape_of(%var_1503, dtype="int32") /* ty=Tensor[(2), int32] */;
    %49 = cast(%var_1503, dtype="uint8") /* ty=Tensor[(55, 5), uint8] */;
    %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %51 = subtract(%49, %50) /* ty=Tensor[(55, 5), uint8] */;
    %52 = cast(%51, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
    %53 = reshape(%52, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
    %54 = @func_613(%53) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
    %55 = cast(%var_1514, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
    %56 = reshape(%55, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
    %57 = @func_613(%56) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
    %58 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
    %59 = @func_1123() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool]) */;
    %60 = cast(%var_1503, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
    %61 = reshape(%60, newshape=[275]) /* ty=Tensor[(275), float64] */;
    %62 = @func_841(%61) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64]) */;
    %63 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
    %64 = cast(%var_1503, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
    %65 = reshape(%64, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
    %66 = @func_733(%65) /* ty=(Tensor[(144), float32], Tensor[(8, 16, 8), int32], Tensor[(55, 5), float64]) */;
    %67 = %66.0;
    %68 = cast(%var_1514, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
    %69 = reshape(%68, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
    %70 = @func_613(%69) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
    %71 = %70.1;
    %72 = cast(%71, dtype="uint16") /* ty=Tensor[(3, 4, 12), uint16] */;
    %73 = shape_of(%67, dtype="int32") /* ty=Tensor[(1), int32] */;
    %74 = cast(%67, dtype="uint16") /* ty=Tensor[(144), uint16] */;
    %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %76 = cast(%var_1503, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
    %77 = reshape(%76, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
    %78 = @func_613(%77) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
    %79 = add(%74, %75) /* ty=Tensor[(144), uint16] */;
    %80 = cast(%79, dtype="float32") /* ty=Tensor[(144), float32] */;
    %81 = reshape(%80, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
    %82 = @func_356(%81) /* ty=(Tensor[(3, 4, 12), bool],) */;
    %83 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
    %84 = cast(%var_1514, dtype="uint16") /* ty=Tensor[(55, 5), uint16] */;
    %85 = shape_of(%51, dtype="int32") /* ty=Tensor[(2), int32] */;
    %86 = cast(%51, dtype="uint16") /* ty=Tensor[(55, 5), uint16] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %88 = bitwise_and(%86, %87) /* ty=Tensor[(55, 5), uint16] */;
    %89 = cast(%var_1503, dtype="uint32") /* ty=Tensor[(55, 5), uint32] */;
    %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(2), int32] */;
    %91 = cast(%88, dtype="uint32") /* ty=Tensor[(55, 5), uint32] */;
    %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %93 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
    %94 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
    %95 = %54.2;
    %96 = %57.0;
    %97 = %58.1;
    %98 = %59.1;
    %99 = %62.1;
    %100 = %63.3;
    %101 = %78.3;
    %102 = %82.0;
    %103 = %83.1;
    %104 = right_shift(%91, %92) /* ty=Tensor[(55, 5), uint32] */;
    (%93, %94, %95, %96, %97, %98, %99, %100, %79, %101, %102, %103, %104)
  };
  %105(%var_1643, %var_1644) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(144), uint16], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(1485), int8], Tensor[(55, 5), uint32]) */
}

def @func_547() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) {
  %116 = fn () -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) {
    %106 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
    %107 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
    %108 = %107.2;
    %109 = cast(%108, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
    %110 = reshape(%109, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
    %111 = @func_356(%110) /* ty=(Tensor[(3, 4, 12), bool],) */;
    %112 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
    %113 = %106.0;
    %114 = %111.0;
    %115 = %112.1;
    (%113, %108, %114, %115)
  };
  %116() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */
}

def @func_4141(%var_4134: Tensor[(3, 4, 12), bool]) -> Tensor[(3, 4, 12), uint32] {
  %117 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  %118 = cast(%var_4134, dtype="uint32") /* ty=Tensor[(3, 4, 12), uint32] */;
  %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%117, dtype="uint32") /* ty=Tensor[(3, 4, 12), uint32] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%120, %121) /* ty=Tensor[(3, 4, 12), uint32] */
}

def @func_4556() -> Tensor[(8, 16, 8), int32] {
  @func_4554() /* ty=Tensor[(8, 16, 8), int32] */
}

def @main(%var_6975: Tensor[(480, 2), int64]) -> (Tensor[(144), float32], Tensor[(480, 2), int64], Tensor[(8, 12, 10), float32]) {
  %122 = @func_5855() /* ty=(Tensor[(1, 196), float64], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %123 = cast(%var_6975, dtype="int64") /* ty=Tensor[(480, 2), int64] */;
  %124 = cast(%var_6975, dtype="int64") /* ty=Tensor[(480, 2), int64] */;
  %125 = reshape(%123, newshape=[8, 12, 10]) /* ty=Tensor[(8, 12, 10), int64] */;
  %126 = reshape(%124, newshape=[8, 12, 10]) /* ty=Tensor[(8, 12, 10), int64] */;
  %127 = @func_4935(%125, %126) /* ty=Tensor[(8, 12, 10), int64] */;
  %128 = cast(%127, dtype="float32") /* ty=Tensor[(8, 12, 10), float32] */;
  %129 = %122.2;
  %130 = erf(%128) /* ty=Tensor[(8, 12, 10), float32] */;
  (%129, %var_6975, %130)
}

def @func_1875() -> (Tensor[(9, 2, 3), float32], Tensor[(14, 14, 1), float64], Tensor[(1, 196), float64]) {
  %156 = fn () -> (Tensor[(9, 2, 3), float32], Tensor[(14, 14, 1), float64], Tensor[(1, 196), float64]) {
    %131 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 2, 3), float64] */, dtype="float32") /* ty=Tensor[(9, 2, 3), float32] */;
    %132 = log(%131) /* ty=Tensor[(9, 2, 3), float32] */;
    %133 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
    %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
    %135 = cast(%132, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
    %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %137 = divide(%135, %136) /* ty=Tensor[(9, 2, 3), float64] */;
    %138 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
    %139 = asinh(%138) /* ty=Tensor[(9, 2, 3), float64] */;
    %140 = cast(%139, dtype="float32") /* ty=Tensor[(9, 2, 3), float32] */;
    %141 = acosh(%140) /* ty=Tensor[(9, 2, 3), float32] */;
    %142 = cast(%141, dtype="uint64") /* ty=Tensor[(9, 2, 3), uint64] */;
    %143 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
    %144 = cast(%137, dtype="uint64") /* ty=Tensor[(9, 2, 3), uint64] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %146 = bitwise_or(%144, %145) /* ty=Tensor[(9, 2, 3), uint64] */;
    %147 = cast(%132, dtype="float32") /* ty=Tensor[(9, 2, 3), float32] */;
    %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
    %149 = cast(%146, dtype="float32") /* ty=Tensor[(9, 2, 3), float32] */;
    %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %151 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 196), float64] */, dtype="float64") /* ty=Tensor[(1, 196), float64] */;
    %152 = reshape(%151, newshape=[14, 14, 1]) /* ty=Tensor[(14, 14, 1), float64] */;
    %153 = @func_1402(%152) /* ty=(Tensor[(14, 14, 1), float64],) */;
    %154 = floor_divide(%149, %150) /* ty=Tensor[(9, 2, 3), float32] */;
    %155 = %153.0;
    (%154, %155, meta[relay.Constant][3] /* ty=Tensor[(1, 196), float64] */)
  };
  %156() /* ty=(Tensor[(9, 2, 3), float32], Tensor[(14, 14, 1), float64], Tensor[(1, 196), float64]) */
}

def @func_2189() -> (Tensor[(3, 4, 12), bool],) {
  @func_2187() /* ty=(Tensor[(3, 4, 12), bool],) */
}

def @func_3116() -> (Tensor[(3, 4, 12), bool],) {
  @func_3114() /* ty=(Tensor[(3, 4, 12), bool],) */
}

def @func_3986(%var_3984: float64, %var_3985: Tensor[(14, 1), float64]) -> (Tensor[(14, 1), float64], Tensor[(3, 4, 12), float64], Tensor[(8, 16, 8), float32], Tensor[(1024), int32], Tensor[(275), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) {
  %175 = fn (%var_3936: float64, %var_3937: Tensor[(14, 1), float64]) -> (Tensor[(14, 1), float64], Tensor[(3, 4, 12), float64], Tensor[(8, 16, 8), float32], Tensor[(1024), int32], Tensor[(275), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) {
    %157 = cast(%var_3936, dtype="float64") /* ty=float64 */;
    %158 = cast(%var_3937, dtype="float64") /* ty=Tensor[(14, 1), float64] */;
    %159 = @func_2298() /* ty=(Tensor[(3, 4, 12), float64],) */;
    %160 = cast(meta[relay.Constant][4] /* ty=Tensor[(1024), int32] */, dtype="int32") /* ty=Tensor[(1024), int32] */;
    %161 = cast(meta[relay.Constant][5] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
    %162 = reshape(%160, newshape=[8, 16, 8]) /* ty=Tensor[(8, 16, 8), int32] */;
    %163 = reshape(%161, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
    %164 = @func_3627(%162, %163) /* ty=(Tensor[(8, 16, 8), int8], Tensor[(275), float64], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) */;
    %165 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
    %166 = cast(meta[relay.Constant][5] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
    %167 = reshape(%166, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
    %168 = @func_613(%167) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
    %169 = floor_divide(%157, %158) /* ty=Tensor[(14, 1), float64] */;
    %170 = %159.0;
    %171 = %164.5;
    %172 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
    %173 = %165.1;
    %174 = %168.2;
    (%169, %170, %171, meta[relay.Constant][4] /* ty=Tensor[(1024), int32] */, meta[relay.Constant][5] /* ty=Tensor[(275), float64] */, %172, %173, %174)
  };
  %175(%var_3984, %var_3985) /* ty=(Tensor[(14, 1), float64], Tensor[(3, 4, 12), float64], Tensor[(8, 16, 8), float32], Tensor[(1024), int32], Tensor[(275), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) */
}

def @func_978(%var_958: uint8, %var_959: Tensor[(10, 1, 3), uint8]) -> (Tensor[(10, 1, 3), bool], Tensor[(10, 1, 3), float64]) {
  %176 = cast(%var_958, dtype="bool") /* ty=bool */;
  %177 = cast(%var_959, dtype="bool") /* ty=Tensor[(10, 1, 3), bool] */;
  %178 = cast(%var_959, dtype="float64") /* ty=Tensor[(10, 1, 3), float64] */;
  %179 = equal(%176, %177) /* ty=Tensor[(10, 1, 3), bool] */;
  %180 = sinh(%178) /* ty=Tensor[(10, 1, 3), float64] */;
  (%179, %180)
}

def @func_3788() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32]) {
  @func_3786() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32]) */
}

def @func_3421(%var_3395: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), uint32], Tensor[(275), float64]) {
  %181 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %182 = cast(meta[relay.Constant][6] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
  %183 = cast(meta[relay.Constant][6] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
  %184 = reshape(%182, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %185 = reshape(%183, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %186 = @func_1642(%184, %185) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(144), uint16], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(1485), int8], Tensor[(55, 5), uint32]) */;
  %187 = cast(%var_3395, dtype="bool") /* ty=Tensor[(275), bool] */;
  %188 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(275), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %189 = cast(meta[relay.Constant][6] /* ty=Tensor[(275), float64] */, dtype="bool") /* ty=Tensor[(275), bool] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?), bool] */;
  %191 = less_equal(%189, %190) /* ty=Tensor[(275), bool] */;
  %192 = cast(%191, dtype="float64") /* ty=Tensor[(275), float64] */;
  %193 = reshape(%192, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %194 = @func_3322(%193) /* ty=(Tensor[(3, 4, 12), uint32], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) */;
  %195 = cast(%191, dtype="float64") /* ty=Tensor[(275), float64] */;
  %196 = exp(%195) /* ty=Tensor[(275), float64] */;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(275), float64] */;
  %198 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
  %199 = %181.4;
  %200 = %186.6;
  %201 = %194.0;
  %202 = sin(%197) /* ty=Tensor[(275), float64] */;
  (%198, %199, %200, %201, %202)
}

def @func_2271(%var_2269: Tensor[(275), float64], %var_2270: Tensor[(1485), int8]) -> (Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float64], Tensor[(15, 9, 11), int8], Tensor[(1485), int8], Tensor[(1, 196), float64]) {
  %230 = fn (%var_2221: Tensor[(275), float64], %var_2253: Tensor[(1485), int8]) -> (Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float64], Tensor[(15, 9, 11), int8], Tensor[(1485), int8], Tensor[(1, 196), float64]) {
    %203 = @func_2011() /* ty=Tensor[(144), float32] */;
    %204 = cast(%203, dtype="float32") /* ty=Tensor[(144), float32] */;
    %205 = reshape(%204, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
    %206 = @func_356(%205) /* ty=(Tensor[(3, 4, 12), bool],) */;
    %207 = cast(%var_2221, dtype="float64") /* ty=Tensor[(275), float64] */;
    %208 = reshape(%207, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
    %209 = @func_1800(%208) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) */;
    %210 = cast(%var_2221, dtype="float64") /* ty=Tensor[(275), float64] */;
    %211 = reshape(%210, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
    %212 = @func_1800(%211) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) */;
    %213 = cast(%var_2221, dtype="float64") /* ty=Tensor[(275), float64] */;
    %214 = reshape(%213, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
    %215 = @func_613(%214) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
    %216 = %215.1;
    %217 = cast(%216, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
    %218 = erf(%217) /* ty=Tensor[(3, 4, 12), float32] */;
    %219 = cast(%218, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
    %220 = cast(%var_2253, dtype="int8") /* ty=Tensor[(1485), int8] */;
    %221 = reshape(%220, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int8] */;
    %222 = @func_767(%221) /* ty=(Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) */;
    %223 = @func_1874() /* ty=(Tensor[(9, 2, 3), float32], Tensor[(14, 14, 1), float64], Tensor[(1, 196), float64]) */;
    %224 = %206.0;
    %225 = %209.1;
    %226 = %212.1;
    %227 = sinh(%219) /* ty=Tensor[(3, 4, 12), float64] */;
    %228 = %222.0;
    %229 = %223.2;
    (%203, %224, %var_2221, %225, %226, %227, %228, %var_2253, %229)
  };
  %230(%var_2269, %var_2270) /* ty=(Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float64], Tensor[(15, 9, 11), int8], Tensor[(1485), int8], Tensor[(1, 196), float64]) */
}

def @func_3162(%var_3160: Tensor[(8, 16, 8), int32]) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 12), bool]) {
  @func_3159(%var_3160) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 12), bool]) */
}

def @func_4554() -> Tensor[(8, 16, 8), int32] {
  @func_1114() /* ty=Tensor[(8, 16, 8), int32] */
}

def @func_5271(%var_5270: Tensor[(12), float32]) -> (Tensor[(3, 4, 12), bool], Tensor[(4, 3), float32], Tensor[(12), float32]) {
  %238 = fn (%var_5263: Tensor[(12), float32]) -> (Tensor[(3, 4, 12), bool], Tensor[(4, 3), float32], Tensor[(12), float32]) {
    %231 = @func_1153() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(3, 4, 12), bool]) */;
    %232 = cast(%var_5263, dtype="float32") /* ty=Tensor[(12), float32] */;
    %233 = cast(%var_5263, dtype="float32") /* ty=Tensor[(12), float32] */;
    %234 = reshape(%232, newshape=[4, 3]) /* ty=Tensor[(4, 3), float32] */;
    %235 = reshape(%233, newshape=[4, 3]) /* ty=Tensor[(4, 3), float32] */;
    %236 = %231.1;
    %237 = @func_4247(%234, %235) /* ty=Tensor[(4, 3), float32] */;
    (%236, %237, %var_5263)
  };
  %238(%var_5270) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(4, 3), float32], Tensor[(12), float32]) */
}

def @func_1770(%var_1748: Tensor[(10, 16, 2), float64]) -> (Tensor[(10, 16, 2), float64], Tensor[(8, 16, 8), int32]) {
  %239 = cast(%var_1748, dtype="float64") /* ty=Tensor[(10, 16, 2), float64] */;
  %240 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(10, 16, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 16, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 16, 2), float64] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %243 = @func_1103() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %244 = power(%241, %242) /* ty=Tensor[(10, 16, 2), float64] */;
  %245 = %243.0;
  (%244, %245)
}

def @func_943() -> (Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) {
  %260 = fn () -> (Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) {
    %246 = cast(meta[relay.Constant][8] /* ty=Tensor[(1485), int8] */, dtype="int8") /* ty=Tensor[(1485), int8] */;
    %247 = reshape(%246, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int8] */;
    %248 = @func_767(%247) /* ty=(Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) */;
    %249 = cast(meta[relay.Constant][9] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
    %250 = reshape(%249, newshape=[275]) /* ty=Tensor[(275), float64] */;
    %251 = @func_712(%250) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float32]) */;
    %252 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
    %253 = %252.0;
    %254 = cast(%253, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
    %255 = sigmoid(%254) /* ty=Tensor[(3, 4, 12), float32] */;
    %256 = cast(%255, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
    %257 = %248.1;
    %258 = %251.1;
    %259 = acosh(%256) /* ty=Tensor[(3, 4, 12), float32] */;
    (%257, meta[relay.Constant][8] /* ty=Tensor[(1485), int8] */, %258, meta[relay.Constant][9] /* ty=Tensor[(275), float64] */, %259)
  };
  %260() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */
}

def @func_4433(%var_4432: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float64],) {
  %263 = fn (%var_4424: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float64],) {
    %261 = cast(%var_4424, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
    %262 = sinh(%261) /* ty=Tensor[(5, 11, 8), float64] */;
    (%262,)
  };
  %263(%var_4432) /* ty=(Tensor[(5, 11, 8), float64],) */
}

def @func_3351() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float64], Tensor[(1485), int8], Tensor[(1, 196), float64]) {
  %272 = fn () -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float64], Tensor[(1485), int8], Tensor[(1, 196), float64]) {
    %264 = @func_2586() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) */;
    %265 = @func_2298() /* ty=(Tensor[(3, 4, 12), float64],) */;
    %266 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
    %267 = @func_1874() /* ty=(Tensor[(9, 2, 3), float32], Tensor[(14, 14, 1), float64], Tensor[(1, 196), float64]) */;
    %268 = %264.0;
    %269 = %265.0;
    %270 = %266.1;
    %271 = %267.2;
    (%268, %269, %270, %271)
  };
  %272() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float64], Tensor[(1485), int8], Tensor[(1, 196), float64]) */
}

def @func_1352(%var_1344: Tensor[(3, 4, 12), float32]) -> (Tensor[(3, 4, 12), uint64],) {
  %273 = @func_1153() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(3, 4, 12), bool]) */;
  %274 = %273.0;
  %275 = cast(%var_1344, dtype="uint64") /* ty=Tensor[(3, 4, 12), uint64] */;
  %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%274, dtype="uint64") /* ty=Tensor[(3, 4, 12), uint64] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %279 = bitwise_xor(%277, %278) /* ty=Tensor[(3, 4, 12), uint64] */;
  (%279,)
}

def @func_3484(%var_3479: Tensor[(4, 12, 2), float32]) -> Tensor[(4, 12, 2), float32] {
  %280 = cast(%var_3479, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  log(%280) /* ty=Tensor[(4, 12, 2), float32] */
}

def @func_6489() -> Tensor[(3, 4, 12), bool] {
  %282 = fn () -> Tensor[(3, 4, 12), bool] {
    %281 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
    %281.2
  };
  %282() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_3904() -> (Tensor[(16, 12, 16), bool],) {
  %286 = fn () -> (Tensor[(16, 12, 16), bool],) {
    %283 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 1, 16), bool] */, dtype="bool") /* ty=Tensor[(16, 1, 16), bool] */;
    %284 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 12, 16), bool] */, dtype="bool") /* ty=Tensor[(16, 12, 16), bool] */;
    %285 = logical_or(%283, %284) /* ty=Tensor[(16, 12, 16), bool] */;
    (%285,)
  };
  %286() /* ty=(Tensor[(16, 12, 16), bool],) */
}

def @func_6774() -> (Tensor[(3, 4, 12), bool],) {
  @func_6772() /* ty=(Tensor[(3, 4, 12), bool],) */
}

def @func_1404(%var_1403: Tensor[(14, 14, 1), float64]) -> (Tensor[(14, 14, 1), float64],) {
  %289 = fn (%var_1399: Tensor[(14, 14, 1), float64]) -> (Tensor[(14, 14, 1), float64],) {
    %287 = cast(%var_1399, dtype="float64") /* ty=Tensor[(14, 14, 1), float64] */;
    %288 = atan(%287) /* ty=Tensor[(14, 14, 1), float64] */;
    (%288,)
  };
  %289(%var_1403) /* ty=(Tensor[(14, 14, 1), float64],) */
}

def @func_715(%var_713: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float32]) {
  @func_712(%var_713) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float32]) */
}

def @func_5123(%var_5112: Tensor[(16, 12, 16), bool]) -> (Tensor[(16, 12, 16), int32],) {
  %290 = @func_3903() /* ty=(Tensor[(16, 12, 16), bool],) */;
  %291 = %290.0;
  %292 = cast(%var_5112, dtype="int32") /* ty=Tensor[(16, 12, 16), int32] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="int32") /* ty=Tensor[(16, 12, 16), int32] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %296 = subtract(%294, %295) /* ty=Tensor[(16, 12, 16), int32] */;
  (%296,)
}

def @func_736(%var_734: Tensor[(55, 5), float64]) -> (Tensor[(144), float32], Tensor[(8, 16, 8), int32], Tensor[(55, 5), float64]) {
  @func_733(%var_734) /* ty=(Tensor[(144), float32], Tensor[(8, 16, 8), int32], Tensor[(55, 5), float64]) */
}

def @func_6834() -> Tensor[(3, 4, 12), bool] {
  @func_6832() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_2299() -> (Tensor[(3, 4, 12), float64],) {
  %306 = fn () -> (Tensor[(3, 4, 12), float64],) {
    %297 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
    %298 = %297.0;
    %299 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 4, 12), bool] */, dtype="uint8") /* ty=Tensor[(3, 4, 12), uint8] */;
    %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
    %301 = cast(%298, dtype="uint8") /* ty=Tensor[(3, 4, 12), uint8] */;
    %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %303 = minimum(%301, %302) /* ty=Tensor[(3, 4, 12), uint8] */;
    %304 = cast(%303, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
    %305 = atan(%304) /* ty=Tensor[(3, 4, 12), float64] */;
    (%305,)
  };
  %306() /* ty=(Tensor[(3, 4, 12), float64],) */
}

def @func_3627(%var_3582: Tensor[(8, 16, 8), int32], %var_3602: Tensor[(11, 25), float64]) -> (Tensor[(8, 16, 8), int8], Tensor[(275), float64], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) {
  %307 = @func_1123() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool]) */;
  %308 = %307.0;
  %309 = cast(%var_3582, dtype="int8") /* ty=Tensor[(8, 16, 8), int8] */;
  %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%308, dtype="int8") /* ty=Tensor[(8, 16, 8), int8] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %313 = cast(%var_3602, dtype="float64") /* ty=Tensor[(11, 25), float64] */;
  %314 = cast(%var_3602, dtype="float64") /* ty=Tensor[(11, 25), float64] */;
  %315 = reshape(%313, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %316 = reshape(%314, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %317 = @func_1642(%315, %316) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(144), uint16], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(1485), int8], Tensor[(55, 5), uint32]) */;
  %318 = @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */;
  %319 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 16, 8), int32] */, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %320 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%308, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %323 = cast(%308, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %324 = shape_of(%var_3582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%var_3582, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %327 = mod(%325, %326) /* ty=Tensor[(8, 16, 8), float32] */;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %329 = subtract(%311, %312) /* ty=Tensor[(8, 16, 8), int8] */;
  %330 = %317.7;
  %331 = %318.0;
  %332 = not_equal(%321, %322) /* ty=Tensor[(8, 16, 8), bool] */;
  %333 = exp(%328) /* ty=Tensor[(8, 16, 8), float32] */;
  (%329, %330, %var_3602, %331, %332, %333)
}

def @func_4395() -> (Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), uint16], Tensor[(8, 16, 8), int32]) {
  %355 = fn () -> (Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), uint16], Tensor[(8, 16, 8), int32]) {
    %334 = @func_1153() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(3, 4, 12), bool]) */;
    %335 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
    %336 = %335.3;
    %337 = cast(%336, dtype="float64") /* ty=Tensor[(275), float64] */;
    %338 = reshape(%337, newshape=[275]) /* ty=Tensor[(275), float64] */;
    %339 = @func_3879(%338) /* ty=(Tensor[(10, 16, 2), float64], Tensor[(320), float64], Tensor[(275), float64], Tensor[(275), float64], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(15, 9, 11), int8], Tensor[(3, 4, 12), float64]) */;
    %340 = cast(%336, dtype="float64") /* ty=Tensor[(275), float64] */;
    %341 = sqrt(%340) /* ty=Tensor[(275), float64] */;
    %342 = cast(%336, dtype="float64") /* ty=Tensor[(275), float64] */;
    %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(1), int32] */;
    %344 = cast(%341, dtype="float64") /* ty=Tensor[(275), float64] */;
    %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?), float64] */;
    %346 = mod(%344, %345) /* ty=Tensor[(275), float64] */;
    %347 = cast(%336, dtype="uint16") /* ty=Tensor[(275), uint16] */;
    %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(1), int32] */;
    %349 = cast(%346, dtype="uint16") /* ty=Tensor[(275), uint16] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %351 = %334.1;
    %352 = %339.2;
    %353 = minimum(%349, %350) /* ty=Tensor[(275), uint16] */;
    %354 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
    (%351, %352, %353, %354)
  };
  %355() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), uint16], Tensor[(8, 16, 8), int32]) */
}

def @func_6266() -> (Tensor[(8, 16, 8), int32], Tensor[(3072), bool], Tensor[(14, 14, 1), float64], Tensor[(27), float64], Tensor[(16, 12, 16), float32]) {
  %375 = fn () -> (Tensor[(8, 16, 8), int32], Tensor[(3072), bool], Tensor[(14, 14, 1), float64], Tensor[(27), float64], Tensor[(16, 12, 16), float32]) {
    %356 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
    %357 = cast(meta[relay.Constant][15] /* ty=Tensor[(27), float64] */, dtype="float64") /* ty=Tensor[(27), float64] */;
    %358 = reshape(%357, newshape=[1, 9, 3]) /* ty=Tensor[(1, 9, 3), float64] */;
    %359 = @func_1702(%358) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1, 144), float32], Tensor[(14, 14, 1), float64], Tensor[(196), float64], Tensor[(?, 9, 3), float64]) */;
    %360 = cast(meta[relay.Constant][14] /* ty=Tensor[(3072), bool] */, dtype="bool") /* ty=Tensor[(3072), bool] */;
    %361 = reshape(%360, newshape=[16, 12, 16]) /* ty=Tensor[(16, 12, 16), bool] */;
    %362 = @func_5123(%361) /* ty=(Tensor[(16, 12, 16), int32],) */;
    %363 = %362.0;
    %364 = cast(%363, dtype="float64") /* ty=Tensor[(16, 12, 16), float64] */;
    %365 = acosh(%364) /* ty=Tensor[(16, 12, 16), float64] */;
    %366 = cast(%363, dtype="uint16") /* ty=Tensor[(16, 12, 16), uint16] */;
    %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
    %368 = cast(%365, dtype="uint16") /* ty=Tensor[(16, 12, 16), uint16] */;
    %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %370 = maximum(%368, %369) /* ty=Tensor[(16, 12, 16), uint16] */;
    %371 = cast(%370, dtype="float32") /* ty=Tensor[(16, 12, 16), float32] */;
    %372 = %356.0;
    %373 = %359.2;
    %374 = log2(%371) /* ty=Tensor[(16, 12, 16), float32] */;
    (%372, meta[relay.Constant][14] /* ty=Tensor[(3072), bool] */, %373, meta[relay.Constant][15] /* ty=Tensor[(27), float64] */, %374)
  };
  %375() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(3072), bool], Tensor[(14, 14, 1), float64], Tensor[(27), float64], Tensor[(16, 12, 16), float32]) */
}

def @func_3443() -> (Tensor[(8, 16, 8), int32],) {
  %376 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %377 = %376.3;
  (%377,)
}

def @func_5012(%var_5008: Tensor[(5, 6, 1), bool], %var_5009: Tensor[(5, 6, 1), bool], %var_5010: Tensor[(275), float64], %var_5011: Tensor[(440), float64]) -> (Tensor[(5, 6, ?), bool], Tensor[(275), float64], Tensor[(275), float64], Tensor[(5, 11, 8), float64], Tensor[(440), float64]) {
  %391 = fn (%var_4983: Tensor[(5, 6, 1), bool], %var_4984: Tensor[(5, 6, 1), bool], %var_4997: Tensor[(275), float64], %var_5002: Tensor[(440), float64]) -> (Tensor[(5, 6, ?), bool], Tensor[(275), float64], Tensor[(275), float64], Tensor[(5, 11, 8), float64], Tensor[(440), float64]) {
    %378 = cast(%var_4984, dtype="bool") /* ty=Tensor[(5, 6, 1), bool] */;
    %379 = shape_of(%var_4983, dtype="int32") /* ty=Tensor[(3), int32] */;
    %380 = cast(%var_4983, dtype="bool") /* ty=Tensor[(5, 6, 1), bool] */;
    %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %382 = cast(%var_4997, dtype="float64") /* ty=Tensor[(275), float64] */;
    %383 = reshape(%382, newshape=[275]) /* ty=Tensor[(275), float64] */;
    %384 = @func_3421(%383) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), uint32], Tensor[(275), float64]) */;
    %385 = cast(%var_5002, dtype="float64") /* ty=Tensor[(440), float64] */;
    %386 = reshape(%385, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
    %387 = @func_4431(%386) /* ty=(Tensor[(5, 11, 8), float64],) */;
    %388 = logical_and(%380, %381) /* ty=Tensor[(5, 6, ?), bool] */;
    %389 = %384.4;
    %390 = %387.0;
    (%388, %389, %var_4997, %390, %var_5002)
  };
  %391(%var_5008, %var_5009, %var_5010, %var_5011) /* ty=(Tensor[(5, 6, ?), bool], Tensor[(275), float64], Tensor[(275), float64], Tensor[(5, 11, 8), float64], Tensor[(440), float64]) */
}

def @func_4826(%var_4824: Tensor[(15, 8, 9), int16]) -> (Tensor[(84), float64], Tensor[(15, 8, 9), uint32], Tensor[(15, 8, 9), int64], Tensor[(15, 8, 9), float64]) {
  @func_4823(%var_4824) /* ty=(Tensor[(84), float64], Tensor[(15, 8, 9), uint32], Tensor[(15, 8, 9), int64], Tensor[(15, 8, 9), float64]) */
}

def @func_5157(%var_5155: uint32, %var_5156: Tensor[(1, 9, 11), uint32]) -> (Tensor[(1, 9, 11), uint32], Tensor[(3, 4, 12), bool], Tensor[(15, 8, 9), int64], Tensor[(1080), int16]) {
  %400 = fn (%var_5138: uint32, %var_5139: Tensor[(1, 9, 11), uint32]) -> (Tensor[(1, 9, 11), uint32], Tensor[(3, 4, 12), bool], Tensor[(15, 8, 9), int64], Tensor[(1080), int16]) {
    %392 = cast(%var_5138, dtype="uint32") /* ty=uint32 */;
    %393 = cast(%var_5139, dtype="uint32") /* ty=Tensor[(1, 9, 11), uint32] */;
    %394 = cast(meta[relay.Constant][16] /* ty=Tensor[(1080), int16] */, dtype="int16") /* ty=Tensor[(1080), int16] */;
    %395 = reshape(%394, newshape=[15, 8, 9]) /* ty=Tensor[(15, 8, 9), int16] */;
    %396 = @func_4823(%395) /* ty=(Tensor[(84), float64], Tensor[(15, 8, 9), uint32], Tensor[(15, 8, 9), int64], Tensor[(15, 8, 9), float64]) */;
    %397 = right_shift(%392, %393) /* ty=Tensor[(1, 9, 11), uint32] */;
    %398 = @func_5024() /* ty=Tensor[(3, 4, 12), bool] */;
    %399 = %396.2;
    (%397, %398, %399, meta[relay.Constant][16] /* ty=Tensor[(1080), int16] */)
  };
  %400(%var_5155, %var_5156) /* ty=(Tensor[(1, 9, 11), uint32], Tensor[(3, 4, 12), bool], Tensor[(15, 8, 9), int64], Tensor[(1080), int16]) */
}

def @func_2941() -> Tensor[(8, 16, 8), int32] {
  %402 = fn () -> Tensor[(8, 16, 8), int32] {
    %401 = @func_1103() /* ty=(Tensor[(8, 16, 8), int32],) */;
    %401.0
  };
  %402() /* ty=Tensor[(8, 16, 8), int32] */
}

def @func_4665(%var_4647: Tensor[(12, 16, 16), int32], %var_4648: Tensor[(12, 16, 16), int32]) -> (Tensor[(12, 16, 16), int32], Tensor[(15, 9, 11), int8], Tensor[(1485, 1), int8]) {
  %403 = cast(%var_4648, dtype="int32") /* ty=Tensor[(12, 16, 16), int32] */;
  %404 = shape_of(%var_4647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%var_4647, dtype="int32") /* ty=Tensor[(12, 16, 16), int32] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %407 = cast(meta[relay.Constant][17] /* ty=Tensor[(1485, 1), int8] */, dtype="int8") /* ty=Tensor[(1485, 1), int8] */;
  %408 = reshape(%407, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int8] */;
  %409 = @func_767(%408) /* ty=(Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) */;
  %410 = add(%405, %406) /* ty=Tensor[(12, 16, 16), int32] */;
  %411 = %409.0;
  (%410, %411, meta[relay.Constant][17] /* ty=Tensor[(1485, 1), int8] */)
}

def @func_477() -> (Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) {
  @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */
}

def @func_5297(%var_5275: Tensor[(10, 7, 14), float32]) -> (Tensor[(10, 7, 14), float32], Tensor[(10, 7, 14), float64], Tensor[(8, 16, 8), float32], Tensor[(1024), int32], Tensor[(275, 1), float64]) {
  %412 = cast(%var_5275, dtype="float32") /* ty=Tensor[(10, 7, 14), float32] */;
  %413 = cast(%var_5275, dtype="float64") /* ty=Tensor[(10, 7, 14), float64] */;
  %414 = cast(meta[relay.Constant][18] /* ty=Tensor[(1024), int32] */, dtype="int32") /* ty=Tensor[(1024), int32] */;
  %415 = cast(meta[relay.Constant][19] /* ty=Tensor[(275, 1), float64] */, dtype="float64") /* ty=Tensor[(275, 1), float64] */;
  %416 = reshape(%414, newshape=[8, 16, 8]) /* ty=Tensor[(8, 16, 8), int32] */;
  %417 = reshape(%415, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
  %418 = @func_3627(%416, %417) /* ty=(Tensor[(8, 16, 8), int8], Tensor[(275), float64], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) */;
  %419 = log10(%412) /* ty=Tensor[(10, 7, 14), float32] */;
  %420 = cos(%413) /* ty=Tensor[(10, 7, 14), float64] */;
  %421 = %418.5;
  (%419, %420, %421, meta[relay.Constant][18] /* ty=Tensor[(1024), int32] */, meta[relay.Constant][19] /* ty=Tensor[(275, 1), float64] */)
}

def @func_6615(%var_6613: Tensor[(12), float32], %var_6614: Tensor[(16, 12, 16), bool]) -> (Tensor[(4, 3), float32], Tensor[(12), float32], Tensor[(16, 12, 16), int16], Tensor[(3, 4, 12), uint64]) {
  @func_6611(%var_6613, %var_6614) /* ty=(Tensor[(4, 3), float32], Tensor[(12), float32], Tensor[(16, 12, 16), int16], Tensor[(3, 4, 12), uint64]) */
}

def @func_4027() -> (Tensor[(1, 196), float64],) {
  @func_4025() /* ty=(Tensor[(1, 196), float64],) */
}

def @func_2588() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) {
  @func_2586() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) */
}

def @func_4726() -> (Tensor[(144), float32], Tensor[(3, 2, 14), uint16], Tensor[(42), float64], Tensor[(84), float64]) {
  %422 = cast(meta[relay.Constant][20] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %423 = cast(meta[relay.Constant][21] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %424 = reshape(%422, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), float64] */;
  %425 = reshape(%423, newshape=[3, 2, 14]) /* ty=Tensor[(3, 2, 14), float64] */;
  %426 = @func_1983(%424, %425) /* ty=(Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 2, 14), uint16]) */;
  %427 = @func_2011() /* ty=Tensor[(144), float32] */;
  %428 = %426.2;
  (%427, %428, meta[relay.Constant][20] /* ty=Tensor[(42), float64] */, meta[relay.Constant][21] /* ty=Tensor[(84), float64] */)
}

def @func_4938(%var_4936: Tensor[(8, 12, 10), int64], %var_4937: Tensor[(8, 12, 10), int64]) -> Tensor[(8, 12, 10), int64] {
  %433 = fn (%var_4930: Tensor[(8, 12, 10), int64], %var_4931: Tensor[(8, 12, 10), int64]) -> Tensor[(8, 12, 10), int64] {
    %429 = cast(%var_4931, dtype="int64") /* ty=Tensor[(8, 12, 10), int64] */;
    %430 = shape_of(%var_4930, dtype="int32") /* ty=Tensor[(3), int32] */;
    %431 = cast(%var_4930, dtype="int64") /* ty=Tensor[(8, 12, 10), int64] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    minimum(%431, %432) /* ty=Tensor[(8, 12, 10), int64] */
  };
  %433(%var_4936, %var_4937) /* ty=Tensor[(8, 12, 10), int64] */
}

def @func_475() -> (Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) {
  %434 = cast(meta[relay.Constant][22] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %435 = reshape(%434, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %436 = @func_356(%435) /* ty=(Tensor[(3, 4, 12), bool],) */;
  %437 = %436.0;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %439 = reshape(%438, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %440 = @func_356(%439) /* ty=(Tensor[(3, 4, 12), bool],) */;
  %441 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %442 = acos(%441) /* ty=Tensor[(8, 16, 8), float64] */;
  %443 = cast(%442, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %444 = cosh(%443) /* ty=Tensor[(8, 16, 8), float32] */;
  %445 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 16, 8), float64] */, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%444, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %449 = equal(%447, %448) /* ty=Tensor[(8, 16, 8), bool] */;
  %450 = cast(%449, dtype="int32") /* ty=Tensor[(8, 16, 8), int32] */;
  %451 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%444, dtype="int32") /* ty=Tensor[(8, 16, 8), int32] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %454 = %440.0;
  %455 = minimum(%452, %453) /* ty=Tensor[(8, 16, 8), int32] */;
  (%437, meta[relay.Constant][22] /* ty=Tensor[(144), float32] */, %454, %455)
}

def @func_1355(%var_1353: Tensor[(3, 4, 12), float32]) -> (Tensor[(3, 4, 12), uint64],) {
  @func_1352(%var_1353) /* ty=(Tensor[(3, 4, 12), uint64],) */
}

def @func_6570() -> Tensor[(3, 4, 12), bool] {
  @func_5375() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_3013(%var_3010: Tensor[(275), float64], %var_3011: Tensor[(231), float64], %var_3012: Tensor[(320), float64]) -> (Tensor[(8, 16, 8), float32], Tensor[(275), bool], Tensor[(3, 4, 12), float64], Tensor[(275), float64], Tensor[(231), float64], Tensor[(8, 16, 8), int32], Tensor[(320), float64]) {
  %479 = fn (%var_2969: Tensor[(275), float64], %var_2985: Tensor[(231), float64], %var_2990: Tensor[(320), float64]) -> (Tensor[(8, 16, 8), float32], Tensor[(275), bool], Tensor[(3, 4, 12), float64], Tensor[(275), float64], Tensor[(231), float64], Tensor[(8, 16, 8), int32], Tensor[(320), float64]) {
    %456 = cast(meta[relay.Constant][24] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
    %457 = reshape(%456, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
    %458 = @func_1800(%457) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) */;
    %459 = cast(%var_2969, dtype="bool") /* ty=Tensor[(275), bool] */;
    %460 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(275), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %461 = cast(meta[relay.Constant][24] /* ty=Tensor[(275), float64] */, dtype="bool") /* ty=Tensor[(275), bool] */;
    %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?), bool] */;
    %463 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
    %464 = %463.1;
    %465 = cast(%464, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
    %466 = cast(%var_2985, dtype="float64") /* ty=Tensor[(231), float64] */;
    %467 = cast(meta[relay.Constant][24] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
    %468 = reshape(%466, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), float64] */;
    %469 = reshape(%467, newshape=[275]) /* ty=Tensor[(275), float64] */;
    %470 = @func_1054(%468, %469) /* ty=(Tensor[(3, 7, 11), float64], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) */;
    %471 = cast(%var_2990, dtype="float64") /* ty=Tensor[(320), float64] */;
    %472 = reshape(%471, newshape=[10, 16, 2]) /* ty=Tensor[(10, 16, 2), float64] */;
    %473 = @func_1770(%472) /* ty=(Tensor[(10, 16, 2), float64], Tensor[(8, 16, 8), int32]) */;
    %474 = %458.0;
    %475 = greater_equal(%461, %462) /* ty=Tensor[(275), bool] */;
    %476 = exp(%465) /* ty=Tensor[(3, 4, 12), float64] */;
    %477 = %470.2;
    %478 = %473.1;
    (%474, %475, %476, %477, %var_2985, %478, %var_2990)
  };
  %479(%var_3010, %var_3011, %var_3012) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(275), bool], Tensor[(3, 4, 12), float64], Tensor[(275), float64], Tensor[(231), float64], Tensor[(8, 16, 8), int32], Tensor[(320), float64]) */
}

def @func_3114() -> (Tensor[(3, 4, 12), bool],) {
  %480 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %481 = %480.2;
  (%481,)
}

def @func_4744() -> Tensor[(275), uint16] {
  %483 = fn () -> Tensor[(275), uint16] {
    %482 = @func_4394() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), uint16], Tensor[(8, 16, 8), int32]) */;
    %482.2
  };
  %483() /* ty=Tensor[(275), uint16] */
}

def @func_1104() -> (Tensor[(8, 16, 8), int32],) {
  %486 = fn () -> (Tensor[(8, 16, 8), int32],) {
    %484 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
    %485 = %484.3;
    (%485,)
  };
  %486() /* ty=(Tensor[(8, 16, 8), int32],) */
}

def @func_1735(%var_1730: Tensor[(275), float64]) -> (Tensor[(1485), int8], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(8, 16, 8), int32]) {
  %487 = @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */;
  %488 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %489 = cast(%var_1730, dtype="float64") /* ty=Tensor[(275), float64] */;
  %490 = reshape(%489, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %491 = @func_1448(%490) /* ty=(Tensor[(275), bool], Tensor[(3, 4, 12), bool]) */;
  %492 = %487.1;
  %493 = %488.2;
  %494 = %491.1;
  %495 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
  (%492, %493, %494, %var_1730, %495)
}

def @func_5593() -> Tensor[(9, 3), float64] {
  %497 = fn () -> Tensor[(9, 3), float64] {
    %496 = @func_2703() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(9, 3), float64], Tensor[(3, 4, 12), uint32]) */;
    %496.1
  };
  %497() /* ty=Tensor[(9, 3), float64] */
}

def @func_3879(%var_3841: Tensor[(275), float64]) -> (Tensor[(10, 16, 2), float64], Tensor[(320), float64], Tensor[(275), float64], Tensor[(275), float64], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(15, 9, 11), int8], Tensor[(3, 4, 12), float64]) {
  %498 = cast(meta[relay.Constant][25] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %499 = reshape(%498, newshape=[10, 16, 2]) /* ty=Tensor[(10, 16, 2), float64] */;
  %500 = @func_1770(%499) /* ty=(Tensor[(10, 16, 2), float64], Tensor[(8, 16, 8), int32]) */;
  %501 = cast(%var_3841, dtype="float64") /* ty=Tensor[(275), float64] */;
  %502 = reshape(%501, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %503 = @func_841(%502) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64]) */;
  %504 = @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */;
  %505 = @func_1103() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %506 = %504.1;
  %507 = cast(%506, dtype="int8") /* ty=Tensor[(1485), int8] */;
  %508 = reshape(%507, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int8] */;
  %509 = @func_767(%508) /* ty=(Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) */;
  %510 = @func_2586() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) */;
  %511 = %510.0;
  %512 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 4, 12), bool] */, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %516 = %500.0;
  %517 = %503.2;
  %518 = %505.0;
  %519 = %509.0;
  %520 = mod(%514, %515) /* ty=Tensor[(3, 4, 12), float64] */;
  (%516, meta[relay.Constant][25] /* ty=Tensor[(320), float64] */, %517, %var_3841, %506, %518, %519, %520)
}

def @func_6116() -> (Tensor[(3, 4, 12), bool], Tensor[(12), float32], Tensor[(12), float32]) {
  @func_6114() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(12), float32], Tensor[(12), float32]) */
}

def @func_2779() -> (Tensor[(14, 14, 1), float64],) {
  %525 = fn () -> (Tensor[(14, 14, 1), float64],) {
    %521 = @func_1874() /* ty=(Tensor[(9, 2, 3), float32], Tensor[(14, 14, 1), float64], Tensor[(1, 196), float64]) */;
    %522 = %521.1;
    %523 = cast(%522, dtype="float64") /* ty=Tensor[(14, 14, 1), float64] */;
    %524 = log2(%523) /* ty=Tensor[(14, 14, 1), float64] */;
    (%524,)
  };
  %525() /* ty=(Tensor[(14, 14, 1), float64],) */
}

def @func_859() -> Tensor[(3, 4, 12), bool] {
  %526 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %526.0
}

def @func_2187() -> (Tensor[(3, 4, 12), bool],) {
  %527 = @func_2125() /* ty=Tensor[(3, 4, 12), bool] */;
  (%527,)
}

def @func_2125() -> Tensor[(3, 4, 12), bool] {
  @func_1283() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_359(%var_357: Tensor[(3, 4, 12), float32]) -> (Tensor[(3, 4, 12), bool],) {
  @func_356(%var_357) /* ty=(Tensor[(3, 4, 12), bool],) */
}

def @func_1283() -> Tensor[(3, 4, 12), bool] {
  %528 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
  %528.0
}

def @func_3325(%var_3323: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), uint32], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) {
  @func_3322(%var_3323) /* ty=(Tensor[(3, 4, 12), uint32], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) */
}

def @func_2092() -> (Tensor[(8, 16, 8), int32],) {
  %531 = fn () -> (Tensor[(8, 16, 8), int32],) {
    %529 = @func_1103() /* ty=(Tensor[(8, 16, 8), int32],) */;
    %530 = %529.0;
    (%530,)
  };
  %531() /* ty=(Tensor[(8, 16, 8), int32],) */
}

def @func_1057(%var_1055: Tensor[(3, 7, 11), float64], %var_1056: Tensor[(275), float64]) -> (Tensor[(3, 7, 11), float64], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) {
  %538 = fn (%var_1034: Tensor[(3, 7, 11), float64], %var_1039: Tensor[(275), float64]) -> (Tensor[(3, 7, 11), float64], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) {
    %532 = cast(%var_1034, dtype="float64") /* ty=Tensor[(3, 7, 11), float64] */;
    %533 = cast(%var_1039, dtype="float64") /* ty=Tensor[(275), float64] */;
    %534 = reshape(%533, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
    %535 = @func_613(%534) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
    %536 = sinh(%532) /* ty=Tensor[(3, 7, 11), float64] */;
    %537 = %535.6;
    (%536, %537, %var_1039)
  };
  %538(%var_1055, %var_1056) /* ty=(Tensor[(3, 7, 11), float64], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) */
}

def @func_4020() -> (Tensor[(8, 16, 8), int32],) {
  %541 = fn () -> (Tensor[(8, 16, 8), int32],) {
    %539 = @func_2481() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32]) */;
    %540 = %539.1;
    (%540,)
  };
  %541() /* ty=(Tensor[(8, 16, 8), int32],) */
}

def @func_4728() -> (Tensor[(144), float32], Tensor[(3, 2, 14), uint16], Tensor[(42), float64], Tensor[(84), float64]) {
  @func_4726() /* ty=(Tensor[(144), float32], Tensor[(3, 2, 14), uint16], Tensor[(42), float64], Tensor[(84), float64]) */
}

def @func_5377() -> Tensor[(3, 4, 12), bool] {
  @func_5375() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_1154() -> (Tensor[(3, 4, 12), float32], Tensor[(3, 4, 12), bool]) {
  %545 = fn () -> (Tensor[(3, 4, 12), float32], Tensor[(3, 4, 12), bool]) {
    %542 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
    %543 = %542.4;
    %544 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
    (%543, %544)
  };
  %545() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(3, 4, 12), bool]) */
}

def @func_5673() -> (Tensor[(3, 4, 12), bool],) {
  %546 = @func_2125() /* ty=Tensor[(3, 4, 12), bool] */;
  (%546,)
}

def @func_6832() -> Tensor[(3, 4, 12), bool] {
  %547 = @func_5673() /* ty=(Tensor[(3, 4, 12), bool],) */;
  %547.0
}

def @func_1705(%var_1703: Tensor[(1, 9, 3), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(1, 144), float32], Tensor[(14, 14, 1), float64], Tensor[(196), float64], Tensor[(?, 9, 3), float64]) {
  @func_1702(%var_1703) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1, 144), float32], Tensor[(14, 14, 1), float64], Tensor[(196), float64], Tensor[(?, 9, 3), float64]) */
}

def @func_4250(%var_4248: Tensor[(4, 3), float32], %var_4249: Tensor[(4, 3), float32]) -> Tensor[(4, 3), float32] {
  %552 = fn (%var_4237: Tensor[(4, 3), float32], %var_4238: Tensor[(4, 3), float32]) -> Tensor[(4, 3), float32] {
    %548 = cast(%var_4238, dtype="float32") /* ty=Tensor[(4, 3), float32] */;
    %549 = shape_of(%var_4237, dtype="int32") /* ty=Tensor[(2), int32] */;
    %550 = cast(%var_4237, dtype="float32") /* ty=Tensor[(4, 3), float32] */;
    %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    multiply(%550, %551) /* ty=Tensor[(4, 3), float32] */
  };
  %552(%var_4248, %var_4249) /* ty=Tensor[(4, 3), float32] */
}

def @func_6464(%var_6463: Tensor[(42, 2), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(42), float64], Tensor[(42, 2), float64]) {
  %561 = fn (%var_6443: Tensor[(42, 2), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(42), float64], Tensor[(42, 2), float64]) {
    %553 = @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */;
    %554 = cast(meta[relay.Constant][27] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %555 = cast(%var_6443, dtype="float64") /* ty=Tensor[(42, 2), float64] */;
    %556 = reshape(%554, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), float64] */;
    %557 = reshape(%555, newshape=[3, 2, 14]) /* ty=Tensor[(3, 2, 14), float64] */;
    %558 = @func_1983(%556, %557) /* ty=(Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 2, 14), uint16]) */;
    %559 = %553.0;
    %560 = %558.0;
    (%559, %560, meta[relay.Constant][27] /* ty=Tensor[(42), float64] */, %var_6443)
  };
  %561(%var_6463) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(42), float64], Tensor[(42, 2), float64]) */
}

def @func_1800(%var_1795: Tensor[(11, 25), float64]) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) {
  %562 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %563 = %562.0;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %565 = cast(%var_1795, dtype="float64") /* ty=Tensor[(11, 25), float64] */;
  %566 = reshape(%565, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %567 = @func_1448(%566) /* ty=(Tensor[(275), bool], Tensor[(3, 4, 12), bool]) */;
  %568 = cos(%564) /* ty=Tensor[(8, 16, 8), float32] */;
  %569 = %567.1;
  (%568, %569, %var_1795)
}

def @func_4732() -> (Tensor[(3, 4, 12), bool],) {
  %571 = fn () -> (Tensor[(3, 4, 12), bool],) {
    %570 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
    (%570,)
  };
  %571() /* ty=(Tensor[(3, 4, 12), bool],) */
}

def @func_2586() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) {
  %572 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %573 = %572.0;
  %574 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 4, 12), bool] */, dtype="uint8") /* ty=Tensor[(3, 4, 12), uint8] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%573, dtype="uint8") /* ty=Tensor[(3, 4, 12), uint8] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %578 = maximum(%576, %577) /* ty=Tensor[(3, 4, 12), uint8] */;
  %579 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 4, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %583 = @func_2125() /* ty=Tensor[(3, 4, 12), bool] */;
  %584 = greater(%581, %582) /* ty=Tensor[(3, 4, 12), bool] */;
  (%583, %584)
}

def @func_1716() -> (Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) {
  %585 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %586 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %587 = %585.2;
  %588 = %586.1;
  (%587, %588)
}

def @func_1987(%var_1985: Tensor[(3, 1, 14), float64], %var_1986: Tensor[(3, 2, 14), float64]) -> (Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 2, 14), uint16]) {
  @func_1983(%var_1985, %var_1986) /* ty=(Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 2, 14), uint16]) */
}

def @func_2012() -> Tensor[(144), float32] {
  %590 = fn () -> Tensor[(144), float32] {
    %589 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
    %589.1
  };
  %590() /* ty=Tensor[(144), float32] */
}

def @func_3322(%var_3320: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), uint32], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) {
  %591 = @func_2703() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(9, 3), float64], Tensor[(3, 4, 12), uint32]) */;
  %592 = cast(%var_3320, dtype="float64") /* ty=Tensor[(275), float64] */;
  %593 = reshape(%592, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %594 = @func_1448(%593) /* ty=(Tensor[(275), bool], Tensor[(3, 4, 12), bool]) */;
  %595 = %591.2;
  %596 = %594.1;
  (%595, %596, %var_3320)
}

def @func_2625(%var_2623: Tensor[(275), float64]) -> (Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), float64]) {
  @func_2622(%var_2623) /* ty=(Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), float64]) */
}

def @func_2481() -> (Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32]) {
  %597 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %598 = @func_2091() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %599 = %597.4;
  %600 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
  %601 = %598.0;
  (%599, %600, %601)
}

def @func_2704() -> (Tensor[(3, 4, 12), bool], Tensor[(9, 3), float64], Tensor[(3, 4, 12), uint32]) {
  %612 = fn () -> (Tensor[(3, 4, 12), bool], Tensor[(9, 3), float64], Tensor[(3, 4, 12), uint32]) {
    %602 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 3), float64] */;
    %603 = reshape(%602, newshape=[1, 9, 3]) /* ty=Tensor[(1, 9, 3), float64] */;
    %604 = @func_1702(%603) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1, 144), float32], Tensor[(14, 14, 1), float64], Tensor[(196), float64], Tensor[(?, 9, 3), float64]) */;
    %605 = @func_2351() /* ty=Tensor[(3, 4, 12), float64] */;
    %606 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 4, 12), float64] */, dtype="uint32") /* ty=Tensor[(3, 4, 12), uint32] */;
    %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
    %608 = cast(%605, dtype="uint32") /* ty=Tensor[(3, 4, 12), uint32] */;
    %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %610 = %604.0;
    %611 = multiply(%608, %609) /* ty=Tensor[(3, 4, 12), uint32] */;
    (%610, meta[relay.Constant][29] /* ty=Tensor[(9, 3), float64] */, %611)
  };
  %612() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(9, 3), float64], Tensor[(3, 4, 12), uint32]) */
}

def @func_3487(%var_3485: Tensor[(4, 12, 2), float32]) -> Tensor[(4, 12, 2), float32] {
  @func_3484(%var_3485) /* ty=Tensor[(4, 12, 2), float32] */
}

def @func_6772() -> (Tensor[(3, 4, 12), bool],) {
  %613 = @func_2586() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) */;
  %614 = %613.0;
  (%614,)
}

def @func_2127() -> Tensor[(3, 4, 12), bool] {
  @func_2125() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_6284() -> (Tensor[(275), float64],) {
  %617 = fn () -> (Tensor[(275), float64],) {
    %615 = @func_2753() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(11, 25), float64], Tensor[(275), float64]) */;
    %616 = %615.3;
    (%616,)
  };
  %617() /* ty=(Tensor[(275), float64],) */
}

def @func_6958(%var_6956: Tensor[(2, 72), float32], %var_6957: Tensor[(275), float64]) -> (Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(2, 72), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) {
  %632 = fn (%var_6937: Tensor[(2, 72), float32], %var_6947: Tensor[(275), float64]) -> (Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(2, 72), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) {
    %618 = @func_5978() /* ty=(Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) */;
    %619 = @func_2091() /* ty=(Tensor[(8, 16, 8), int32],) */;
    %620 = cast(%var_6937, dtype="float32") /* ty=Tensor[(2, 72), float32] */;
    %621 = reshape(%620, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
    %622 = @func_356(%621) /* ty=(Tensor[(3, 4, 12), bool],) */;
    %623 = @func_2133() /* ty=(Tensor[(3, 4, 12), bool],) */;
    %624 = cast(%var_6947, dtype="float64") /* ty=Tensor[(275), float64] */;
    %625 = reshape(%624, newshape=[275]) /* ty=Tensor[(275), float64] */;
    %626 = @func_6885(%625) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(8, 16, 8), bool]) */;
    %627 = %618.0;
    %628 = %619.0;
    %629 = %622.0;
    %630 = %623.0;
    %631 = %626.0;
    (%627, %628, %629, %var_6937, %630, %631, %var_6947)
  };
  %632(%var_6956, %var_6957) /* ty=(Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(2, 72), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) */
}

def @func_1983(%var_1932: Tensor[(3, 1, 14), float64], %var_1933: Tensor[(3, 2, 14), float64]) -> (Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 2, 14), uint16]) {
  %633 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %634 = @func_1153() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(3, 4, 12), bool]) */;
  %635 = cast(%var_1932, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
  %636 = cast(%var_1933, dtype="float64") /* ty=Tensor[(3, 2, 14), float64] */;
  %637 = divide(%635, %636) /* ty=Tensor[(3, 2, 14), float64] */;
  %638 = cast(%637, dtype="uint16") /* ty=Tensor[(3, 2, 14), uint16] */;
  %639 = cast(%var_1932, dtype="uint16") /* ty=Tensor[(3, 1, 14), uint16] */;
  %640 = %633.3;
  %641 = %634.1;
  %642 = subtract(%638, %639) /* ty=Tensor[(3, 2, 14), uint16] */;
  (%640, %641, %642)
}

def @func_5980() -> (Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) {
  @func_5978() /* ty=(Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) */
}

def @func_6114() -> (Tensor[(3, 4, 12), bool], Tensor[(12), float32], Tensor[(12), float32]) {
  %643 = cast(meta[relay.Constant][31] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
  %644 = reshape(%643, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %645 = @func_5269(%644) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(4, 3), float32], Tensor[(12), float32]) */;
  %646 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  %647 = %645.2;
  (%646, %647, meta[relay.Constant][31] /* ty=Tensor[(12), float32] */)
}

def @func_712(%var_690: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float32]) {
  %648 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %649 = cast(%var_690, dtype="float64") /* ty=Tensor[(275), float64] */;
  %650 = reshape(%649, newshape=[5, 11, 5]) /* ty=Tensor[(5, 11, 5), float64] */;
  %651 = @func_613(%650) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */;
  %652 = cast(%var_690, dtype="float32") /* ty=Tensor[(275), float32] */;
  %653 = %648.0;
  %654 = %651.3;
  %655 = acos(%652) /* ty=Tensor[(275), float32] */;
  (%653, %654, %655)
}

def @func_3043(%var_3042: Tensor[(3, 4, 12), bool]) -> (Tensor[(144), float32], Tensor[(3, 4, 12), float32]) {
  %664 = fn (%var_3036: Tensor[(3, 4, 12), bool]) -> (Tensor[(144), float32], Tensor[(3, 4, 12), float32]) {
    %656 = @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */;
    %657 = %656.0;
    %658 = cast(%var_3036, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
    %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%657, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %662 = @func_2011() /* ty=Tensor[(144), float32] */;
    %663 = power(%660, %661) /* ty=Tensor[(3, 4, 12), float32] */;
    (%662, %663)
  };
  %664(%var_3042) /* ty=(Tensor[(144), float32], Tensor[(3, 4, 12), float32]) */
}

def @func_4589() -> Tensor[(3, 4, 12), uint32] {
  %665 = @func_2703() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(9, 3), float64], Tensor[(3, 4, 12), uint32]) */;
  %665.2
}

def @func_356(%var_304: Tensor[(3, 4, 12), float32]) -> (Tensor[(3, 4, 12), bool],) {
  %666 = cast(%var_304, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %667 = sqrt(%666) /* ty=Tensor[(3, 4, 12), float32] */;
  %668 = cast(%667, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
  %669 = cosh(%668) /* ty=Tensor[(3, 4, 12), float32] */;
  %670 = cast(%667, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%669, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %674 = greater_equal(%672, %673) /* ty=Tensor[(3, 4, 12), bool] */;
  (%674,)
}

def @func_1210(%var_1209: Tensor[(3, 12, 12), float32]) -> Tensor[(3, 12, 12), float32] {
  %676 = fn (%var_1198: Tensor[(3, 12, 12), float32]) -> Tensor[(3, 12, 12), float32] {
    %675 = cast(%var_1198, dtype="float32") /* ty=Tensor[(3, 12, 12), float32] */;
    sigmoid(%675) /* ty=Tensor[(3, 12, 12), float32] */
  };
  %676(%var_1209) /* ty=Tensor[(3, 12, 12), float32] */
}

def @func_1285() -> Tensor[(3, 4, 12), bool] {
  @func_1283() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_615(%var_614: Tensor[(5, 11, 5), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) {
  %698 = fn (%var_553: Tensor[(5, 11, 5), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) {
    %677 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
    %678 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
    %679 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
    %680 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
    %681 = cast(%var_553, dtype="float64") /* ty=Tensor[(5, 11, 5), float64] */;
    %682 = cosh(%681) /* ty=Tensor[(5, 11, 5), float64] */;
    %683 = cast(%var_553, dtype="bool") /* ty=Tensor[(5, 11, 5), bool] */;
    %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
    %685 = cast(%682, dtype="bool") /* ty=Tensor[(5, 11, 5), bool] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %687 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
    %688 = %687.1;
    %689 = cast(%688, dtype="float32") /* ty=Tensor[(144), float32] */;
    %690 = reshape(%689, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
    %691 = @func_356(%690) /* ty=(Tensor[(3, 4, 12), bool],) */;
    %692 = %677.1;
    %693 = %678.0;
    %694 = %679.0;
    %695 = %680.3;
    %696 = less(%685, %686) /* ty=Tensor[(5, 11, 5), bool] */;
    %697 = %691.0;
    (%692, %693, %694, %695, %696, %688, %697)
  };
  %698(%var_614) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(5, 11, 5), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool]) */
}

def @func_3159(%var_3143: Tensor[(8, 16, 8), int32]) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 12), bool]) {
  %699 = @func_2940() /* ty=Tensor[(8, 16, 8), int32] */;
  %700 = cast(%var_3143, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%699, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %704 = @func_2419() /* ty=(Tensor[(275), float64], Tensor[(8, 16, 8), int32], Tensor[(3, 12, 12), float32], Tensor[(2, 216), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(231), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) */;
  %705 = floor_divide(%702, %703) /* ty=Tensor[(8, 16, 8), float64] */;
  %706 = %704.8;
  (%705, %706)
}

def @func_2420() -> (Tensor[(275), float64], Tensor[(8, 16, 8), int32], Tensor[(3, 12, 12), float32], Tensor[(2, 216), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(231), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) {
  %722 = fn () -> (Tensor[(275), float64], Tensor[(8, 16, 8), int32], Tensor[(3, 12, 12), float32], Tensor[(2, 216), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(231), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) {
    %707 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
    %708 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
    %709 = reshape(%708, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
    %710 = cast(meta[relay.Constant][33] /* ty=Tensor[(231), float64] */, dtype="float64") /* ty=Tensor[(231), float64] */;
    %711 = %707.3;
    %712 = cast(%711, dtype="float64") /* ty=Tensor[(275), float64] */;
    %713 = reshape(%710, newshape=[3, 7, 11]) /* ty=Tensor[(3, 7, 11), float64] */;
    %714 = reshape(%712, newshape=[275]) /* ty=Tensor[(275), float64] */;
    %715 = @func_1054(%713, %714) /* ty=(Tensor[(3, 7, 11), float64], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) */;
    %716 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
    %717 = @func_1208(%709) /* ty=Tensor[(3, 12, 12), float32] */;
    %718 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
    %719 = %715.2;
    %720 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
    %721 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
    (%711, %716, %717, meta[relay.Constant][32] /* ty=Tensor[(2, 216), float32] */, %718, %719, meta[relay.Constant][33] /* ty=Tensor[(231), float64] */, %720, %721)
  };
  %722() /* ty=(Tensor[(275), float64], Tensor[(8, 16, 8), int32], Tensor[(3, 12, 12), float32], Tensor[(2, 216), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(231), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) */
}

def @func_1123() -> (Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool]) {
  %723 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
  %724 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %725 = %723.2;
  %726 = %724.0;
  (%725, %726)
}

def @func_770(%var_768: Tensor[(15, 9, 11), int8]) -> (Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) {
  @func_767(%var_768) /* ty=(Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) */
}

def @func_2754() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(11, 25), float64], Tensor[(275), float64]) {
  %736 = fn () -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(11, 25), float64], Tensor[(275), float64]) {
    %727 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
    %728 = cast(%727, dtype="float32") /* ty=Tensor[(3, 4, 12), float32] */;
    %729 = reshape(%728, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
    %730 = @func_1352(%729) /* ty=(Tensor[(3, 4, 12), uint64],) */;
    %731 = cast(meta[relay.Constant][34] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
    %732 = reshape(%731, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
    %733 = @func_1800(%732) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) */;
    %734 = %730.0;
    %735 = %733.2;
    (%727, %734, %735, meta[relay.Constant][34] /* ty=Tensor[(275), float64] */)
  };
  %736() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(11, 25), float64], Tensor[(275), float64]) */
}

def @func_5025() -> Tensor[(3, 4, 12), bool] {
  %738 = fn () -> Tensor[(3, 4, 12), bool] {
    %737 = @func_4394() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), uint16], Tensor[(8, 16, 8), int32]) */;
    %737.0
  };
  %738() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_904() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) {
  %747 = fn () -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) {
    %739 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
    %740 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
    %741 = cast(meta[relay.Constant][35] /* ty=Tensor[(275), float64] */, dtype="float64") /* ty=Tensor[(275), float64] */;
    %742 = reshape(%741, newshape=[275]) /* ty=Tensor[(275), float64] */;
    %743 = @func_712(%742) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float32]) */;
    %744 = %739.2;
    %745 = %740.2;
    %746 = %743.2;
    (%744, %745, %746, meta[relay.Constant][35] /* ty=Tensor[(275), float64] */)
  };
  %747() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */
}

def @func_4669(%var_4667: Tensor[(12, 16, 16), int32], %var_4668: Tensor[(12, 16, 16), int32]) -> (Tensor[(12, 16, 16), int32], Tensor[(15, 9, 11), int8], Tensor[(1485, 1), int8]) {
  @func_4665(%var_4667, %var_4668) /* ty=(Tensor[(12, 16, 16), int32], Tensor[(15, 9, 11), int8], Tensor[(1485, 1), int8]) */
}

def @func_5675() -> (Tensor[(3, 4, 12), bool],) {
  @func_5673() /* ty=(Tensor[(3, 4, 12), bool],) */
}

def @func_4114() -> (Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) {
  %748 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %749 = @func_2091() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %750 = %748.0;
  %751 = %749.0;
  (%750, %751)
}

def @func_3257(%var_3245: Tensor[(4, 3, 6), int64]) -> Tensor[(4, 3, 6), int64] {
  %752 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 3, 6), int64] */, dtype="int64") /* ty=Tensor[(4, 3, 6), int64] */;
  %753 = shape_of(%var_3245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%var_3245, dtype="int64") /* ty=Tensor[(4, 3, 6), int64] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  multiply(%754, %755) /* ty=Tensor[(4, 3, 6), int64] */
}

def @func_1125() -> (Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool]) {
  @func_1123() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool]) */
}

def @func_2622(%var_2620: Tensor[(275), float64]) -> (Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), float64]) {
  %756 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
  %757 = cast(%var_2620, dtype="float64") /* ty=Tensor[(275), float64] */;
  %758 = cast(%var_2620, dtype="float64") /* ty=Tensor[(275), float64] */;
  %759 = reshape(%757, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %760 = reshape(%758, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %761 = @func_1642(%759, %760) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(144), uint16], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool], Tensor[(1485), int8], Tensor[(55, 5), uint32]) */;
  %762 = %756.3;
  %763 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
  %764 = %761.7;
  (%762, %763, %764, %var_2620)
}

def @func_4823(%var_4799: Tensor[(15, 8, 9), int16]) -> (Tensor[(84), float64], Tensor[(15, 8, 9), uint32], Tensor[(15, 8, 9), int64], Tensor[(15, 8, 9), float64]) {
  %765 = @func_4726() /* ty=(Tensor[(144), float32], Tensor[(3, 2, 14), uint16], Tensor[(42), float64], Tensor[(84), float64]) */;
  %766 = cast(meta[relay.Constant][38] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %767 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 8, 9), int16] */, dtype="int16") /* ty=Tensor[(15, 8, 9), int16] */;
  %768 = add(%766, %767) /* ty=Tensor[(15, 8, 9), int16] */;
  %769 = cast(%768, dtype="uint32") /* ty=Tensor[(15, 8, 9), uint32] */;
  %770 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(15, 8, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 8, 9), int16] */, dtype="uint32") /* ty=Tensor[(15, 8, 9), uint32] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %773 = cast(%var_4799, dtype="int64") /* ty=Tensor[(15, 8, 9), int64] */;
  %774 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(15, 8, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 8, 9), int16] */, dtype="int64") /* ty=Tensor[(15, 8, 9), int64] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %777 = cast(%768, dtype="float64") /* ty=Tensor[(15, 8, 9), float64] */;
  %778 = %765.3;
  %779 = bitwise_or(%771, %772) /* ty=Tensor[(15, 8, 9), uint32] */;
  %780 = multiply(%775, %776) /* ty=Tensor[(15, 8, 9), int64] */;
  %781 = log(%777) /* ty=Tensor[(15, 8, 9), float64] */;
  (%778, %779, %780, %781)
}

def @func_5800() -> (Tensor[(3, 4, 12), float64], Tensor[(11, 25), float64], Tensor[(275, 1), float64]) {
  %790 = fn () -> (Tensor[(3, 4, 12), float64], Tensor[(11, 25), float64], Tensor[(275, 1), float64]) {
    %782 = @func_4394() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), uint16], Tensor[(8, 16, 8), int32]) */;
    %783 = %782.0;
    %784 = cast(%783, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
    %785 = cast(meta[relay.Constant][39] /* ty=Tensor[(275, 1), float64] */, dtype="float64") /* ty=Tensor[(275, 1), float64] */;
    %786 = reshape(%785, newshape=[11, 25]) /* ty=Tensor[(11, 25), float64] */;
    %787 = @func_1800(%786) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64]) */;
    %788 = log2(%784) /* ty=Tensor[(3, 4, 12), float64] */;
    %789 = %787.2;
    (%788, %789, meta[relay.Constant][39] /* ty=Tensor[(275, 1), float64] */)
  };
  %790() /* ty=(Tensor[(3, 4, 12), float64], Tensor[(11, 25), float64], Tensor[(275, 1), float64]) */
}

def @func_3445() -> (Tensor[(8, 16, 8), int32],) {
  @func_3443() /* ty=(Tensor[(8, 16, 8), int32],) */
}

def @func_1718() -> (Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) {
  @func_1716() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1485), int8]) */
}

def @func_4955() -> (Tensor[(2, 6, 8), float64],) {
  %791 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 6, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 8), float64] */;
  %792 = tan(%791) /* ty=Tensor[(2, 6, 8), float64] */;
  (%792,)
}

def @func_4116() -> (Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) {
  @func_4114() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */
}

def @func_6914(%var_6913: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) {
  %798 = fn (%var_6899: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) {
    %793 = cast(%var_6899, dtype="float64") /* ty=Tensor[(275), float64] */;
    %794 = reshape(%793, newshape=[275]) /* ty=Tensor[(275), float64] */;
    %795 = @func_6885(%794) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(8, 16, 8), bool]) */;
    %796 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
    %797 = %795.1;
    (%796, %797, %var_6899)
  };
  %798(%var_6913) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64]) */
}

def @func_4591() -> Tensor[(3, 4, 12), uint32] {
  @func_4589() /* ty=Tensor[(3, 4, 12), uint32] */
}

def @func_1267() -> Tensor[(3, 4, 12), bool] {
  %799 = fn () -> Tensor[(3, 4, 12), bool] {
    @func_859() /* ty=Tensor[(3, 4, 12), bool] */
  };
  %799() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_4225(%var_4224: Tensor[(14, 12), float32]) -> (Tensor[(14, 12), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) {
  %806 = fn (%var_4207: Tensor[(14, 12), float32]) -> (Tensor[(14, 12), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) {
    %800 = cast(%var_4207, dtype="float32") /* ty=Tensor[(14, 12), float32] */;
    %801 = @func_1123() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), bool]) */;
    %802 = @func_3114() /* ty=(Tensor[(3, 4, 12), bool],) */;
    %803 = asinh(%800) /* ty=Tensor[(14, 12), float32] */;
    %804 = %801.1;
    %805 = %802.0;
    (%803, %804, %805)
  };
  %806(%var_4224) /* ty=(Tensor[(14, 12), float32], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool]) */
}

def @func_3786() -> (Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32]) {
  %807 = @func_2753() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(11, 25), float64], Tensor[(275), float64]) */;
  %808 = @func_2125() /* ty=Tensor[(3, 4, 12), bool] */;
  %809 = cast(%808, dtype="bool") /* ty=Tensor[(3, 4, 12), bool] */;
  %810 = reshape(%809, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), bool] */;
  %811 = @func_3041(%810) /* ty=(Tensor[(144), float32], Tensor[(3, 4, 12), float32]) */;
  %812 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 25), float64] */, dtype="float64") /* ty=Tensor[(11, 25), float64] */;
  %813 = reshape(%812, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %814 = @func_2622(%813) /* ty=(Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(275), float64]) */;
  %815 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 25), float64] */, dtype="float64") /* ty=Tensor[(11, 25), float64] */;
  %816 = reshape(%815, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %817 = @func_3421(%816) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(3, 4, 12), uint32], Tensor[(275), float64]) */;
  %818 = %807.1;
  %819 = %811.0;
  %820 = %814.1;
  %821 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
  %822 = %817.1;
  (%808, %818, %819, %820, meta[relay.Constant][41] /* ty=Tensor[(11, 25), float64] */, %821, %822)
}

def @func_733(%var_723: Tensor[(55, 5), float64]) -> (Tensor[(144), float32], Tensor[(8, 16, 8), int32], Tensor[(55, 5), float64]) {
  %823 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %824 = cast(%var_723, dtype="float64") /* ty=Tensor[(55, 5), float64] */;
  %825 = reshape(%824, newshape=[275]) /* ty=Tensor[(275), float64] */;
  %826 = @func_712(%825) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float32]) */;
  %827 = %823.1;
  %828 = %826.1;
  (%827, %828, %var_723)
}

def @func_6341() -> Tensor[(3, 4, 12), uint32] {
  @func_4589() /* ty=Tensor[(3, 4, 12), uint32] */
}

def @func_767(%var_749: Tensor[(15, 9, 11), int8]) -> (Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) {
  %829 = cast(meta[relay.Constant][42] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %830 = cast(%var_749, dtype="int8") /* ty=Tensor[(15, 9, 11), int8] */;
  %831 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 25), float64] */, dtype="float64") /* ty=Tensor[(11, 25), float64] */;
  %832 = reshape(%831, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
  %833 = @func_733(%832) /* ty=(Tensor[(144), float32], Tensor[(8, 16, 8), int32], Tensor[(55, 5), float64]) */;
  %834 = minimum(%829, %830) /* ty=Tensor[(15, 9, 11), int8] */;
  %835 = %833.1;
  (%834, %835, meta[relay.Constant][43] /* ty=Tensor[(11, 25), float64] */)
}

def @func_3882(%var_3880: Tensor[(275), float64]) -> (Tensor[(10, 16, 2), float64], Tensor[(320), float64], Tensor[(275), float64], Tensor[(275), float64], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(15, 9, 11), int8], Tensor[(3, 4, 12), float64]) {
  @func_3879(%var_3880) /* ty=(Tensor[(10, 16, 2), float64], Tensor[(320), float64], Tensor[(275), float64], Tensor[(275), float64], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(15, 9, 11), int8], Tensor[(3, 4, 12), float64]) */
}

def @func_1773(%var_1771: Tensor[(10, 16, 2), float64]) -> (Tensor[(10, 16, 2), float64], Tensor[(8, 16, 8), int32]) {
  @func_1770(%var_1771) /* ty=(Tensor[(10, 16, 2), float64], Tensor[(8, 16, 8), int32]) */
}

def @func_3071() -> Tensor[(8, 16, 8), int32] {
  %837 = fn () -> Tensor[(8, 16, 8), int32] {
    %836 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
    %836.2
  };
  %837() /* ty=Tensor[(8, 16, 8), int32] */
}

def @func_6655(%var_6653: Tensor[(27), float64], %var_6654: Tensor[(8, 16, 8), int32]) -> (Tensor[(1, 144), float32], Tensor[(27), float64], Tensor[(8, 16, 8), float64]) {
  %848 = fn (%var_6632: Tensor[(27), float64], %var_6644: Tensor[(8, 16, 8), int32]) -> (Tensor[(1, 144), float32], Tensor[(27), float64], Tensor[(8, 16, 8), float64]) {
    %838 = cast(%var_6632, dtype="float64") /* ty=Tensor[(27), float64] */;
    %839 = reshape(%838, newshape=[1, 9, 3]) /* ty=Tensor[(1, 9, 3), float64] */;
    %840 = @func_1702(%839) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(1, 144), float32], Tensor[(14, 14, 1), float64], Tensor[(196), float64], Tensor[(?, 9, 3), float64]) */;
    %841 = @func_2940() /* ty=Tensor[(8, 16, 8), int32] */;
    %842 = cast(%var_6644, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
    %843 = shape_of(%841, dtype="int32") /* ty=Tensor[(3), int32] */;
    %844 = cast(%841, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
    %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %846 = %840.1;
    %847 = maximum(%844, %845) /* ty=Tensor[(8, 16, 8), float64] */;
    (%846, %var_6632, %847)
  };
  %848(%var_6653, %var_6654) /* ty=(Tensor[(1, 144), float32], Tensor[(27), float64], Tensor[(8, 16, 8), float64]) */
}

def @func_1116() -> Tensor[(8, 16, 8), int32] {
  @func_1114() /* ty=Tensor[(8, 16, 8), int32] */
}

def @func_6611(%var_6599: Tensor[(12), float32], %var_6601: Tensor[(16, 12, 16), bool]) -> (Tensor[(4, 3), float32], Tensor[(12), float32], Tensor[(16, 12, 16), int16], Tensor[(3, 4, 12), uint64]) {
  %849 = cast(%var_6599, dtype="float32") /* ty=Tensor[(12), float32] */;
  %850 = cast(%var_6599, dtype="float32") /* ty=Tensor[(12), float32] */;
  %851 = reshape(%849, newshape=[4, 3]) /* ty=Tensor[(4, 3), float32] */;
  %852 = reshape(%850, newshape=[4, 3]) /* ty=Tensor[(4, 3), float32] */;
  %853 = @func_3903() /* ty=(Tensor[(16, 12, 16), bool],) */;
  %854 = %853.0;
  %855 = cast(%var_6601, dtype="int16") /* ty=Tensor[(16, 12, 16), int16] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%854, dtype="int16") /* ty=Tensor[(16, 12, 16), int16] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %859 = @func_3786() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), uint64], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(11, 25), float64], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float32]) */;
  %860 = @func_4247(%851, %852) /* ty=Tensor[(4, 3), float32] */;
  %861 = bitwise_xor(%857, %858) /* ty=Tensor[(16, 12, 16), int16] */;
  %862 = %859.1;
  (%860, %var_6599, %861, %862)
}

def @func_843(%var_842: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64]) {
  %869 = fn (%var_824: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64]) {
    %863 = @func_546() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */;
    %864 = cast(%var_824, dtype="float64") /* ty=Tensor[(275), float64] */;
    %865 = reshape(%864, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
    %866 = @func_733(%865) /* ty=(Tensor[(144), float32], Tensor[(8, 16, 8), int32], Tensor[(55, 5), float64]) */;
    %867 = %863.1;
    %868 = %866.1;
    (%867, %868, %var_824)
  };
  %869(%var_842) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64]) */
}

def @func_5126(%var_5124: Tensor[(16, 12, 16), bool]) -> (Tensor[(16, 12, 16), int32],) {
  @func_5123(%var_5124) /* ty=(Tensor[(16, 12, 16), int32],) */
}

def @func_1114() -> Tensor[(8, 16, 8), int32] {
  %870 = @func_1103() /* ty=(Tensor[(8, 16, 8), int32],) */;
  %870.0
}

def @func_5300(%var_5298: Tensor[(10, 7, 14), float32]) -> (Tensor[(10, 7, 14), float32], Tensor[(10, 7, 14), float64], Tensor[(8, 16, 8), float32], Tensor[(1024), int32], Tensor[(275, 1), float64]) {
  @func_5297(%var_5298) /* ty=(Tensor[(10, 7, 14), float32], Tensor[(10, 7, 14), float64], Tensor[(8, 16, 8), float32], Tensor[(1024), int32], Tensor[(275, 1), float64]) */
}

def @func_4025() -> (Tensor[(1, 196), float64],) {
  %871 = @func_1874() /* ty=(Tensor[(9, 2, 3), float32], Tensor[(14, 14, 1), float64], Tensor[(1, 196), float64]) */;
  %872 = %871.2;
  (%872,)
}

def @func_3228() -> (Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32], Tensor[(165, 9), int8], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float64]) {
  %886 = fn () -> (Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32], Tensor[(165, 9), int8], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float64]) {
    %873 = cast(meta[relay.Constant][44] /* ty=Tensor[(165, 9), int8] */, dtype="int8") /* ty=Tensor[(165, 9), int8] */;
    %874 = reshape(%873, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int8] */;
    %875 = @func_767(%874) /* ty=(Tensor[(15, 9, 11), int8], Tensor[(8, 16, 8), int32], Tensor[(11, 25), float64]) */;
    %876 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
    %877 = cast(%876, dtype="int32") /* ty=Tensor[(8, 16, 8), int32] */;
    %878 = reshape(%877, newshape=[8, 16, 8]) /* ty=Tensor[(8, 16, 8), int32] */;
    %879 = @func_3159(%878) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 12), bool]) */;
    %880 = @func_2703() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(9, 3), float64], Tensor[(3, 4, 12), uint32]) */;
    %881 = %875.1;
    %882 = %879.1;
    %883 = %880.0;
    %884 = @func_1266() /* ty=Tensor[(3, 4, 12), bool] */;
    %885 = @func_2351() /* ty=Tensor[(3, 4, 12), float64] */;
    (%876, %881, meta[relay.Constant][44] /* ty=Tensor[(165, 9), int8] */, %882, %883, %884, %885)
  };
  %886() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32], Tensor[(165, 9), int8], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), float64]) */
}

def @func_5855() -> (Tensor[(1, 196), float64], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) {
  %893 = fn () -> (Tensor[(1, 196), float64], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) {
    %887 = @func_4025() /* ty=(Tensor[(1, 196), float64],) */;
    %888 = cast(meta[relay.Constant][45] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %889 = reshape(%888, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
    %890 = @func_356(%889) /* ty=(Tensor[(3, 4, 12), bool],) */;
    %891 = %887.0;
    %892 = %890.0;
    (%891, %892, meta[relay.Constant][45] /* ty=Tensor[(144), float32] */)
  };
  %893() /* ty=(Tensor[(1, 196), float64], Tensor[(3, 4, 12), bool], Tensor[(144), float32]) */
}

def @func_1450(%var_1449: Tensor[(275), float64]) -> (Tensor[(275), bool], Tensor[(3, 4, 12), bool]) {
  %905 = fn (%var_1428: Tensor[(275), float64]) -> (Tensor[(275), bool], Tensor[(3, 4, 12), bool]) {
    %894 = @func_942() /* ty=(Tensor[(8, 16, 8), int32], Tensor[(1485), int8], Tensor[(8, 16, 8), int32], Tensor[(275), float64], Tensor[(3, 4, 12), float32]) */;
    %895 = %894.3;
    %896 = cast(%var_1428, dtype="bool") /* ty=Tensor[(275), bool] */;
    %897 = shape_of(%895, dtype="int32") /* ty=Tensor[(1), int32] */;
    %898 = cast(%895, dtype="bool") /* ty=Tensor[(275), bool] */;
    %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?), bool] */;
    %900 = cast(%895, dtype="float64") /* ty=Tensor[(275), float64] */;
    %901 = reshape(%900, newshape=[275]) /* ty=Tensor[(275), float64] */;
    %902 = @func_841(%901) /* ty=(Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(275), float64]) */;
    %903 = greater(%898, %899) /* ty=Tensor[(275), bool] */;
    %904 = %902.0;
    (%903, %904)
  };
  %905(%var_1449) /* ty=(Tensor[(275), bool], Tensor[(3, 4, 12), bool]) */
}

def @func_6572() -> Tensor[(3, 4, 12), bool] {
  @func_6570() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_861() -> Tensor[(3, 4, 12), bool] {
  @func_859() /* ty=Tensor[(3, 4, 12), bool] */
}

def @func_2903(%var_2902: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), float32], Tensor[(144), float32], Tensor[(275), int8]) {
  %919 = fn (%var_2890: Tensor[(275), float64]) -> (Tensor[(3, 4, 12), float32], Tensor[(144), float32], Tensor[(275), int8]) {
    %906 = @func_2481() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32]) */;
    %907 = @func_903() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float32], Tensor[(275), float64]) */;
    %908 = %907.3;
    %909 = cast(%908, dtype="float64") /* ty=Tensor[(275), float64] */;
    %910 = reshape(%909, newshape=[55, 5]) /* ty=Tensor[(55, 5), float64] */;
    %911 = @func_733(%910) /* ty=(Tensor[(144), float32], Tensor[(8, 16, 8), int32], Tensor[(55, 5), float64]) */;
    %912 = cast(%var_2890, dtype="int8") /* ty=Tensor[(275), int8] */;
    %913 = shape_of(%908, dtype="int32") /* ty=Tensor[(1), int32] */;
    %914 = cast(%908, dtype="int8") /* ty=Tensor[(275), int8] */;
    %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?), int8] */;
    %916 = %906.0;
    %917 = %911.0;
    %918 = maximum(%914, %915) /* ty=Tensor[(275), int8] */;
    (%916, %917, %918)
  };
  %919(%var_2902) /* ty=(Tensor[(3, 4, 12), float32], Tensor[(144), float32], Tensor[(275), int8]) */
}

def @func_6854(%var_6852: Tensor[(1, 13, 16), float32], %var_6853: Tensor[(1, 13, 16), float32]) -> Tensor[(?, 13, 16), float32] {
  %924 = fn (%var_6843: Tensor[(1, 13, 16), float32], %var_6844: Tensor[(1, 13, 16), float32]) -> Tensor[(?, 13, 16), float32] {
    %920 = cast(%var_6844, dtype="float32") /* ty=Tensor[(1, 13, 16), float32] */;
    %921 = shape_of(%var_6843, dtype="int32") /* ty=Tensor[(3), int32] */;
    %922 = cast(%var_6843, dtype="float32") /* ty=Tensor[(1, 13, 16), float32] */;
    %923 = dyn.reshape(%920, %921, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%922, %923) /* ty=Tensor[(?, 13, 16), float32] */
  };
  %924(%var_6852, %var_6853) /* ty=Tensor[(?, 13, 16), float32] */
}

def @func_4336(%var_4335: Tensor[(3, 16, 12), uint64]) -> (Tensor[(3, 16, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32], Tensor[(3, 16, 12), uint16], Tensor[(3, 4, 12), bool], Tensor[(3, 16, 12), bool]) {
  %947 = fn (%var_4270: Tensor[(3, 16, 12), uint64]) -> (Tensor[(3, 16, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32], Tensor[(3, 16, 12), uint16], Tensor[(3, 4, 12), bool], Tensor[(3, 16, 12), bool]) {
    %925 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 16, 12), uint64] */, dtype="bool") /* ty=Tensor[(3, 16, 12), bool] */;
    %926 = shape_of(%var_4270, dtype="int32") /* ty=Tensor[(3), int32] */;
    %927 = cast(%var_4270, dtype="bool") /* ty=Tensor[(3, 16, 12), bool] */;
    %928 = dyn.reshape(%925, %926, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %929 = @func_2133() /* ty=(Tensor[(3, 4, 12), bool],) */;
    %930 = cast(%var_4270, dtype="float32") /* ty=Tensor[(3, 16, 12), float32] */;
    %931 = exp(%930) /* ty=Tensor[(3, 16, 12), float32] */;
    %932 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 16, 12), float32] */, dtype="uint16") /* ty=Tensor[(3, 16, 12), uint16] */;
    %933 = shape_of(%931, dtype="int32") /* ty=Tensor[(3), int32] */;
    %934 = cast(%931, dtype="uint16") /* ty=Tensor[(3, 16, 12), uint16] */;
    %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %936 = cast(%931, dtype="bool") /* ty=Tensor[(3, 16, 12), bool] */;
    %937 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(3, 16, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %938 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 16, 12), float32] */, dtype="bool") /* ty=Tensor[(3, 16, 12), bool] */;
    %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %940 = greater(%927, %928) /* ty=Tensor[(3, 16, 12), bool] */;
    %941 = %929.0;
    %942 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
    %943 = @func_1114() /* ty=Tensor[(8, 16, 8), int32] */;
    %944 = minimum(%934, %935) /* ty=Tensor[(3, 16, 12), uint16] */;
    %945 = @func_859() /* ty=Tensor[(3, 4, 12), bool] */;
    %946 = less(%938, %939) /* ty=Tensor[(3, 16, 12), bool] */;
    (%940, %941, %942, %943, %944, %945, %946)
  };
  %947(%var_4335) /* ty=(Tensor[(3, 16, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32], Tensor[(3, 16, 12), uint16], Tensor[(3, 4, 12), bool], Tensor[(3, 16, 12), bool]) */
}

def @func_1702(%var_1672: Tensor[(1, 9, 3), float64]) -> (Tensor[(3, 4, 12), bool], Tensor[(1, 144), float32], Tensor[(14, 14, 1), float64], Tensor[(196), float64], Tensor[(?, 9, 3), float64]) {
  %948 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %949 = reshape(%948, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float32] */;
  %950 = @func_356(%949) /* ty=(Tensor[(3, 4, 12), bool],) */;
  %951 = cast(meta[relay.Constant][49] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %952 = reshape(%951, newshape=[14, 14, 1]) /* ty=Tensor[(14, 14, 1), float64] */;
  %953 = @func_1402(%952) /* ty=(Tensor[(14, 14, 1), float64],) */;
  %954 = cast(%var_1672, dtype="float64") /* ty=Tensor[(1, 9, 3), float64] */;
  %955 = log10(%954) /* ty=Tensor[(1, 9, 3), float64] */;
  %956 = cast(%var_1672, dtype="float64") /* ty=Tensor[(1, 9, 3), float64] */;
  %957 = shape_of(%955, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(%955, dtype="float64") /* ty=Tensor[(1, 9, 3), float64] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %960 = %950.0;
  %961 = %953.0;
  %962 = floor_mod(%958, %959) /* ty=Tensor[(?, 9, 3), float64] */;
  (%960, meta[relay.Constant][48] /* ty=Tensor[(1, 144), float32] */, %961, meta[relay.Constant][49] /* ty=Tensor[(196), float64] */, %962)
}

def @func_1738(%var_1736: Tensor[(275), float64]) -> (Tensor[(1485), int8], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(8, 16, 8), int32]) {
  @func_1735(%var_1736) /* ty=(Tensor[(1485), int8], Tensor[(3, 4, 12), bool], Tensor[(3, 4, 12), bool], Tensor[(275), float64], Tensor[(8, 16, 8), int32]) */
}

def @func_6725(%var_6723: Tensor[(4, 196), float64]) -> (Tensor[(4, 196), float64],) {
  @func_6722(%var_6723) /* ty=(Tensor[(4, 196), float64],) */
}

def @func_2483() -> (Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32]) {
  @func_2481() /* ty=(Tensor[(3, 4, 12), float32], Tensor[(8, 16, 8), int32], Tensor[(8, 16, 8), int32]) */
}

def @func_5978() -> (Tensor[(8, 16, 8), bool], Tensor[(8, 16, 8), float32]) {
  %963 = @func_4554() /* ty=Tensor[(8, 16, 8), int32] */;
  %964 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 16, 8), int32] */, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %965 = shape_of(%963, dtype="int32") /* ty=Tensor[(3), int32] */;
  %966 = cast(%963, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %968 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 16, 8), int32] */, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %969 = logical_and(%966, %967) /* ty=Tensor[(8, 16, 8), bool] */;
  %970 = tan(%968) /* ty=Tensor[(8, 16, 8), float32] */;
  (%969, %970)
}

def @func_5375() -> Tensor[(3, 4, 12), bool] {
  %971 = @func_475() /* ty=(Tensor[(3, 4, 12), bool], Tensor[(144), float32], Tensor[(3, 4, 12), bool], Tensor[(8, 16, 8), int32]) */;
  %971.2
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen187/build/output.py", line 2489, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:55:54] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

