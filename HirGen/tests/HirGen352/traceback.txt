==========mod==========
#[version = "0.0.5"]
def @func_5204() -> (Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32], Tensor[(11, 3, 15), float64], Tensor[(495), float64]) {
  %0 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %1 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %3 = reshape(%2, newshape=[11, 3, 15]) /* ty=Tensor[(11, 3, 15), float64] */;
  %4 = @func_1898(%3) /* ty=(Tensor[(11, 3, 15), float64],) */;
  %5 = %0.1;
  %6 = %1.0;
  %7 = %4.0;
  (%5, %6, %7, meta[relay.Constant][0] /* ty=Tensor[(495), float64] */)
}

def @func_8295() -> (Tensor[(6, 9, 11), float32], Tensor[(840), float32]) {
  %8 = @func_7621() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(10, 7, 12), float32], Tensor[(840), float32], Tensor[(3, 2, 9), float32]) */;
  %9 = @func_5914() /* ty=Tensor[(6, 9, 11), float32] */;
  %10 = %8.2;
  (%9, %10)
}

def @func_5914() -> Tensor[(6, 9, 11), float32] {
  %11 = @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */;
  %12 = %11.0;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 9, 11), float64] */, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%15, %16) /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_5929() -> (Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) {
  %17 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %18 = @func_5825() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %19 = %17.0;
  %20 = %18.0;
  (%19, %20)
}

def @func_7490(%var_7470: Tensor[(640), float64]) -> (Tensor[(3, 2, 9), float32], Tensor[(4, 8, 16), float32], Tensor[(512), float32], Tensor[(80), float64], Tensor[(640), float64]) {
  %21 = @func_6957() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %24 = cast(%var_7470, dtype="float64") /* ty=Tensor[(640), float64] */;
  %25 = reshape(%22, newshape=[4, 8, 16]) /* ty=Tensor[(4, 8, 16), float32] */;
  %26 = reshape(%23, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %27 = reshape(%24, newshape=[16, 8, 5]) /* ty=Tensor[(16, 8, 5), float64] */;
  %28 = @func_1480(%25, %26, %27) /* ty=(Tensor[(4, 8, 16), float32], Tensor[(80), float64], Tensor[(16, 8, 5), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) */;
  %29 = %21.0;
  %30 = %28.0;
  (%29, %30, meta[relay.Constant][2] /* ty=Tensor[(512), float32] */, meta[relay.Constant][3] /* ty=Tensor[(80), float64] */, %var_7470)
}

def @func_7758(%var_7748: Tensor[(3, 2, 9), float32]) -> Tensor[(3, 2, 9), int8] {
  %31 = @func_6109() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %32 = %31.0;
  %33 = cast(%var_7748, dtype="int8") /* ty=Tensor[(3, 2, 9), int8] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="int8") /* ty=Tensor[(3, 2, 9), int8] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  maximum(%35, %36) /* ty=Tensor[(3, 2, 9), int8] */
}

def @func_7265(%var_7135: Tensor[(198, 3), float32], %var_7201: Tensor[(60, 14), float32]) -> (Tensor[(224), uint16], Tensor[(16), uint16], Tensor[(3, 2, 9), bool], Tensor[(10, 7, 12), float32], Tensor[(60, 14), float32], Tensor[(198, 3), bool], Tensor[(198, 3), bool], Tensor[(198, 3), float64], Tensor[(198, 3), float32]) {
  %37 = cast(%var_7135, dtype="float32") /* ty=Tensor[(198, 3), float32] */;
  %38 = cast(meta[relay.Constant][4] /* ty=Tensor[(16), uint16] */, dtype="uint16") /* ty=Tensor[(16), uint16] */;
  %39 = cast(meta[relay.Constant][5] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %40 = reshape(%37, newshape=[6, 9, 11]) /* ty=Tensor[(6, 9, 11), float32] */;
  %41 = reshape(%38, newshape=[16]) /* ty=Tensor[(16), uint16] */;
  %42 = reshape(%39, newshape=[]) /* ty=uint32 */;
  %43 = @func_6412(%40, %41, %42) /* ty=(Tensor[(6, 9, 11), int16], Tensor[(112), int32], Tensor[(14, 8, 2), bool], Tensor[(16), uint16], Tensor[(224), uint16], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32], Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %44 = @func_6957() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %45 = %44.0;
  %46 = cast(%45, dtype="bool") /* ty=Tensor[(3, 2, 9), bool] */;
  %47 = cast(meta[relay.Constant][5] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %48 = cast(%var_7201, dtype="float32") /* ty=Tensor[(60, 14), float32] */;
  %49 = reshape(%48, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), float32] */;
  %50 = cast(%var_7135, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %51 = cos(%50) /* ty=Tensor[(198, 3), float64] */;
  %52 = cast(%51, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %53 = sqrt(%52) /* ty=Tensor[(198, 3), float64] */;
  %54 = cast(%var_7135, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %55 = shape_of(%51, dtype="int32") /* ty=Tensor[(2), int32] */;
  %56 = cast(%51, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %58 = power(%56, %57) /* ty=Tensor[(198, 3), float64] */;
  %59 = cast(%58, dtype="bool") /* ty=Tensor[(198, 3), bool] */;
  %60 = shape_of(%53, dtype="int32") /* ty=Tensor[(2), int32] */;
  %61 = cast(%53, dtype="bool") /* ty=Tensor[(198, 3), bool] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %63 = equal(%61, %62) /* ty=Tensor[(198, 3), bool] */;
  %64 = cast(%63, dtype="bool") /* ty=Tensor[(198, 3), bool] */;
  %65 = cast(meta[relay.Constant][5] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %66 = cast(%58, dtype="bool") /* ty=Tensor[(198, 3), bool] */;
  %67 = shape_of(%51, dtype="int32") /* ty=Tensor[(2), int32] */;
  %68 = cast(%51, dtype="bool") /* ty=Tensor[(198, 3), bool] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %70 = cast(%53, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %71 = rsqrt(%70) /* ty=Tensor[(198, 3), float64] */;
  %72 = cast(%58, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %73 = shape_of(%71, dtype="int32") /* ty=Tensor[(2), int32] */;
  %74 = cast(%71, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %76 = cast(%51, dtype="float32") /* ty=Tensor[(198, 3), float32] */;
  %77 = %43.4;
  %78 = greater_equal(%46, %47) /* ty=Tensor[(3, 2, 9), bool] */;
  %79 = @func_639(%49) /* ty=Tensor[(10, 7, 12), float32] */;
  %80 = not_equal(%64, %65) /* ty=Tensor[(198, 3), bool] */;
  %81 = greater(%68, %69) /* ty=Tensor[(198, 3), bool] */;
  %82 = floor_divide(%74, %75) /* ty=Tensor[(198, 3), float64] */;
  %83 = sigmoid(%76) /* ty=Tensor[(198, 3), float32] */;
  (%77, meta[relay.Constant][4] /* ty=Tensor[(16), uint16] */, %78, %79, %var_7201, %80, %81, %82, %83)
}

def @func_8619(%var_8596: Tensor[(96, 2), uint32]) -> Tensor[(96, 2), bool] {
  %84 = @func_5788() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float64], Tensor[(112), int32], Tensor[(96, 2), uint32], Tensor[(112), int32]) */;
  %85 = %84.3;
  %86 = cast(%var_8596, dtype="bool") /* ty=Tensor[(96, 2), bool] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(2), int32] */;
  %88 = cast(%85, dtype="bool") /* ty=Tensor[(96, 2), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  less(%88, %89) /* ty=Tensor[(96, 2), bool] */
}

def @func_6554() -> (Tensor[(1440), int32],) {
  %90 = @func_5280() /* ty=(Tensor[(1440), int32], Tensor[(6, 9, 11), float32]) */;
  %91 = %90.0;
  (%91,)
}

def @func_6412(%var_6339: Tensor[(6, 9, 11), float32], %var_6373: Tensor[(16), uint16], %var_6380: uint32) -> (Tensor[(6, 9, 11), int16], Tensor[(112), int32], Tensor[(14, 8, 2), bool], Tensor[(16), uint16], Tensor[(224), uint16], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32], Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) {
  %92 = @func_5710() /* ty=Tensor[(6, 9, 11), float32] */;
  %93 = cast(%var_6339, dtype="int16") /* ty=Tensor[(6, 9, 11), int16] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%92, dtype="int16") /* ty=Tensor[(6, 9, 11), int16] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %97 = @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */;
  %98 = cast(%var_6373, dtype="uint16") /* ty=Tensor[(16), uint16] */;
  %99 = cast(meta[relay.Constant][6] /* ty=Tensor[(224), uint16] */, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %100 = reshape(%98, newshape=[1, 8, 2]) /* ty=Tensor[(1, 8, 2), uint16] */;
  %101 = reshape(%99, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), uint16] */;
  %102 = cast(%var_6380, dtype="uint32") /* ty=uint32 */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(130), uint32] */, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %104 = reshape(%102, newshape=[]) /* ty=uint32 */;
  %105 = reshape(%103, newshape=[1, 13, 10]) /* ty=Tensor[(1, 13, 10), uint32] */;
  %106 = @func_520(%104, %105) /* ty=(Tensor[(1, 13, 10), bool],) */;
  %107 = @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */;
  %108 = @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */;
  %109 = bitwise_or(%95, %96) /* ty=Tensor[(6, 9, 11), int16] */;
  %110 = %97.0;
  %111 = @func_4974(%100, %101) /* ty=Tensor[(14, 8, 2), bool] */;
  %112 = %106.0;
  %113 = %107.1;
  %114 = %108.1;
  (%109, %110, %111, %var_6373, meta[relay.Constant][6] /* ty=Tensor[(224), uint16] */, %112, %var_6380, meta[relay.Constant][7] /* ty=Tensor[(130), uint32] */, %113, %114)
}

def @func_3666() -> (Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) {
  %115 = @func_3523() /* ty=Tensor[(6, 9, 11), float32] */;
  %116 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 9, 11), float32] */, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %120 = cast(%115, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %121 = logical_or(%118, %119) /* ty=Tensor[(6, 9, 11), bool] */;
  %122 = log2(%120) /* ty=Tensor[(6, 9, 11), float64] */;
  %123 = @func_3523() /* ty=Tensor[(6, 9, 11), float32] */;
  (%121, %122, %123)
}

def @func_10601() -> (Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), int16]) {
  %124 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %125 = @func_10087() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), int16]) */;
  %126 = @func_7575() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) */;
  %127 = %124.0;
  %128 = %125.0;
  %129 = %126.0;
  (%127, %128, %129)
}

def @func_3523() -> Tensor[(6, 9, 11), float32] {
  %130 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 9, 11), float32] */, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  atan(%130) /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_4684() -> (Tensor[(6, 9, 11), float64],) {
  %131 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %132 = %131.0;
  (%132,)
}

def @func_8409() -> (Tensor[(6, 9, 11), float32], Tensor[(1440), int32], Tensor[(26, 5), uint32]) {
  %133 = @func_6203() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %134 = @func_5280() /* ty=(Tensor[(1440), int32], Tensor[(6, 9, 11), float32]) */;
  %135 = %133.0;
  %136 = %134.0;
  %137 = @func_4762() /* ty=Tensor[(26, 5), uint32] */;
  (%135, %136, %137)
}

def @func_5172(%var_5128: Tensor[(26, 5), uint32], %var_5145: Tensor[(112), int32]) -> (Tensor[(26, 5), float32], Tensor[(8, 7, 2), int32], Tensor[(112), int32], Tensor[(26, 5), int64], Tensor[(26, 5), uint32], Tensor[(6, 9, 11), int16], Tensor[(8, 7, 2), int32]) {
  %138 = @func_4762() /* ty=Tensor[(26, 5), uint32] */;
  %139 = cast(%var_5128, dtype="float32") /* ty=Tensor[(26, 5), float32] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(2), int32] */;
  %141 = cast(%138, dtype="float32") /* ty=Tensor[(26, 5), float32] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %143 = cast(%var_5145, dtype="int32") /* ty=Tensor[(112), int32] */;
  %144 = cast(%var_5145, dtype="int32") /* ty=Tensor[(112), int32] */;
  %145 = reshape(%143, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
  %146 = reshape(%144, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
  %147 = cast(%var_5128, dtype="float64") /* ty=Tensor[(26, 5), float64] */;
  %148 = log10(%147) /* ty=Tensor[(26, 5), float64] */;
  %149 = cast(%138, dtype="int64") /* ty=Tensor[(26, 5), int64] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(2), int32] */;
  %151 = cast(%148, dtype="int64") /* ty=Tensor[(26, 5), int64] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %153 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %154 = @func_5065() /* ty=(Tensor[(6, 9, 11), int16],) */;
  %155 = %154.0;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %157 = reshape(%156, newshape=[6, 9, 11]) /* ty=Tensor[(6, 9, 11), float64] */;
  %158 = @func_3771(%157) /* ty=(Tensor[(8, 7, 2), int32], Tensor[(180, 8), int32], Tensor[(11, 3, 15), float64], Tensor[(165, 3), float64], Tensor[(5, 6, 2), float64], Tensor[(16, 8, 5), float64], Tensor[(80), float64], Tensor[(6, 9, 11), float64], Tensor[(16, 5, 13), bool], Tensor[(1040), uint16]) */;
  %159 = floor_mod(%141, %142) /* ty=Tensor[(26, 5), float32] */;
  %160 = @func_543(%145, %146) /* ty=Tensor[(8, 7, 2), int32] */;
  %161 = left_shift(%151, %152) /* ty=Tensor[(26, 5), int64] */;
  %162 = %153.1;
  %163 = %158.0;
  (%159, %160, %var_5145, %161, %162, %155, %163)
}

def @func_8491() -> Tensor[(3, 2, 9), bool] {
  %164 = @func_6109() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %165 = %164.0;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(3, 2, 9), float64] */;
  %167 = sinh(%166) /* ty=Tensor[(3, 2, 9), float64] */;
  %168 = cast(%165, dtype="bool") /* ty=Tensor[(3, 2, 9), bool] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="bool") /* ty=Tensor[(3, 2, 9), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%170, %171) /* ty=Tensor[(3, 2, 9), bool] */
}

def @func_9941() -> Tensor[(112), int32] {
  %172 = @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */;
  %172.0
}

def @func_4249(%var_4208: Tensor[(112), int32], %var_4222: Tensor[(192), uint32]) -> (Tensor[(3, 2, 9), float64], Tensor[(112), int32], Tensor[(8, 7, 2), int32], Tensor[(192), uint32], Tensor[(5, 6, 2), float32], Tensor[(8, 7, 2), int32], Tensor[(3, 2, 9), float64], Tensor[(3, 2, 9), float32]) {
  %173 = cast(%var_4222, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %174 = cast(%var_4222, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %175 = cast(%var_4208, dtype="int32") /* ty=Tensor[(112), int32] */;
  %176 = reshape(%173, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %177 = reshape(%174, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %178 = reshape(%175, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %179 = @func_2540(%176, %177, %178) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %180 = cast(%var_4208, dtype="int32") /* ty=Tensor[(112), int32] */;
  %181 = reshape(%180, newshape=[28, 4]) /* ty=Tensor[(28, 4), int32] */;
  %182 = @func_2890(%181) /* ty=(Tensor[(5, 6, 2), float64], Tensor[(8, 7, 2), int32], Tensor[(28, 4), int32]) */;
  %183 = %182.0;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(5, 6, 2), float32] */;
  %185 = %179.5;
  %186 = cast(%185, dtype="int32") /* ty=Tensor[(8, 7, 2), int32] */;
  %187 = cast(%var_4208, dtype="int32") /* ty=Tensor[(112), int32] */;
  %188 = reshape(%186, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
  %189 = reshape(%187, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
  %190 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %191 = @func_4118() /* ty=Tensor[(3, 2, 9), float64] */;
  %192 = asinh(%184) /* ty=Tensor[(5, 6, 2), float32] */;
  %193 = @func_543(%188, %189) /* ty=Tensor[(8, 7, 2), int32] */;
  %194 = @func_4118() /* ty=Tensor[(3, 2, 9), float64] */;
  %195 = %190.0;
  (%191, %var_4208, %185, %var_4222, %192, %193, %194, %195)
}

def @func_4256() -> Tensor[(6, 9, 11), float32] {
  @func_3523() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_4928() -> (Tensor[(6, 9, 11), int16],) {
  %196 = @func_4481() /* ty=Tensor[(6, 9, 11), int16] */;
  (%196,)
}

def @func_6522(%var_6456: Tensor[(2, 56), int32]) -> (Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float64], Tensor[(192), uint32], Tensor[(1040), uint16], Tensor[(6, 9, 11), float32], Tensor[(2, 56), float32]) {
  %197 = @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */;
  %198 = cast(%var_6456, dtype="int32") /* ty=Tensor[(2, 56), int32] */;
  %199 = cast(meta[relay.Constant][10] /* ty=Tensor[(192), uint32] */, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %200 = reshape(%198, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %201 = reshape(%199, newshape=[192]) /* ty=Tensor[(192), uint32] */;
  %202 = @func_4249(%200, %201) /* ty=(Tensor[(3, 2, 9), float64], Tensor[(112), int32], Tensor[(8, 7, 2), int32], Tensor[(192), uint32], Tensor[(5, 6, 2), float32], Tensor[(8, 7, 2), int32], Tensor[(3, 2, 9), float64], Tensor[(3, 2, 9), float32]) */;
  %203 = %197.0;
  %204 = cast(%203, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %205 = reshape(%204, newshape=[6, 9, 11]) /* ty=Tensor[(6, 9, 11), float64] */;
  %206 = @func_3771(%205) /* ty=(Tensor[(8, 7, 2), int32], Tensor[(180, 8), int32], Tensor[(11, 3, 15), float64], Tensor[(165, 3), float64], Tensor[(5, 6, 2), float64], Tensor[(16, 8, 5), float64], Tensor[(80), float64], Tensor[(6, 9, 11), float64], Tensor[(16, 5, 13), bool], Tensor[(1040), uint16]) */;
  %207 = @func_5761() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %208 = cast(%var_6456, dtype="float32") /* ty=Tensor[(2, 56), float32] */;
  %209 = rsqrt(%208) /* ty=Tensor[(2, 56), float32] */;
  %210 = cast(%var_6456, dtype="float32") /* ty=Tensor[(2, 56), float32] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(2), int32] */;
  %212 = cast(%209, dtype="float32") /* ty=Tensor[(2, 56), float32] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %214 = %202.0;
  %215 = %206.9;
  %216 = %207.0;
  %217 = divide(%212, %213) /* ty=Tensor[(2, 56), float32] */;
  (%203, %214, meta[relay.Constant][10] /* ty=Tensor[(192), uint32] */, %215, %216, %217)
}

def @func_10530(%var_10522: Tensor[(14, 7, 1), float64], %var_10523: Tensor[(14, 7, 7), float64]) -> Tensor[(14, 7, 7), float64] {
  %218 = cast(%var_10522, dtype="float64") /* ty=Tensor[(14, 7, 1), float64] */;
  %219 = cast(%var_10523, dtype="float64") /* ty=Tensor[(14, 7, 7), float64] */;
  subtract(%218, %219) /* ty=Tensor[(14, 7, 7), float64] */
}

def @func_8777() -> Tensor[(1440), int32] {
  %220 = @func_6554() /* ty=(Tensor[(1440), int32],) */;
  %220.0
}

def @func_7873() -> (Tensor[(6, 9, 11), float64],) {
  %221 = @func_4684() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %222 = %221.0;
  (%222,)
}

def @func_3236(%var_3155: Tensor[(12, 1, 10), float64], %var_3156: Tensor[(12, 10, 10), float64], %var_3200: Tensor[(512), float32], %var_3201: Tensor[(80, 1), float64], %var_3202: Tensor[(640), float64]) -> (Tensor[(12, 10, 10), bool], Tensor[(8, 7, 2), int32], uint32, Tensor[(512), float32], Tensor[(80, 1), float64], Tensor[(640), float64], Tensor[(11, 3, 15), float64], Tensor[(495), float64], Tensor[(2, 56), bool], Tensor[(11, 3, 15), float64]) {
  %223 = cast(%var_3155, dtype="bool") /* ty=Tensor[(12, 1, 10), bool] */;
  %224 = cast(%var_3156, dtype="bool") /* ty=Tensor[(12, 10, 10), bool] */;
  %225 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 56), int32] */, dtype="int32") /* ty=Tensor[(2, 56), int32] */;
  %226 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 56), int32] */, dtype="int32") /* ty=Tensor[(2, 56), int32] */;
  %227 = reshape(%225, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
  %228 = reshape(%226, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
  %229 = cast(%var_3200, dtype="float32") /* ty=Tensor[(512), float32] */;
  %230 = cast(%var_3201, dtype="float64") /* ty=Tensor[(80, 1), float64] */;
  %231 = cast(%var_3202, dtype="float64") /* ty=Tensor[(640), float64] */;
  %232 = reshape(%229, newshape=[4, 8, 16]) /* ty=Tensor[(4, 8, 16), float32] */;
  %233 = reshape(%230, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %234 = reshape(%231, newshape=[16, 8, 5]) /* ty=Tensor[(16, 8, 5), float64] */;
  %235 = @func_1480(%232, %233, %234) /* ty=(Tensor[(4, 8, 16), float32], Tensor[(80), float64], Tensor[(16, 8, 5), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) */;
  %236 = cast(meta[relay.Constant][12] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %237 = reshape(%236, newshape=[11, 3, 15]) /* ty=Tensor[(11, 3, 15), float64] */;
  %238 = @func_1898(%237) /* ty=(Tensor[(11, 3, 15), float64],) */;
  %239 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 56), int32] */, dtype="bool") /* ty=Tensor[(2, 56), bool] */;
  %240 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(2, 56), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %241 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 56), int32] */, dtype="bool") /* ty=Tensor[(2, 56), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %243 = cast(meta[relay.Constant][12] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %244 = reshape(%243, newshape=[11, 3, 15]) /* ty=Tensor[(11, 3, 15), float64] */;
  %245 = @func_1898(%244) /* ty=(Tensor[(11, 3, 15), float64],) */;
  %246 = equal(%223, %224) /* ty=Tensor[(12, 10, 10), bool] */;
  %247 = @func_543(%227, %228) /* ty=Tensor[(8, 7, 2), int32] */;
  %248 = %235.4;
  %249 = %238.0;
  %250 = greater(%241, %242) /* ty=Tensor[(2, 56), bool] */;
  %251 = %245.0;
  (%246, %247, %248, %var_3200, %var_3201, %var_3202, %249, meta[relay.Constant][12] /* ty=Tensor[(495), float64] */, %250, %251)
}

def @func_2890(%var_2874: Tensor[(28, 4), int32]) -> (Tensor[(5, 6, 2), float64], Tensor[(8, 7, 2), int32], Tensor[(28, 4), int32]) {
  %252 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 6, 2), float64] */, dtype="float64") /* ty=Tensor[(5, 6, 2), float64] */;
  %253 = cast(%var_2874, dtype="int32") /* ty=Tensor[(28, 4), int32] */;
  %254 = cast(%var_2874, dtype="int32") /* ty=Tensor[(28, 4), int32] */;
  %255 = reshape(%253, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
  %256 = reshape(%254, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
  %257 = atanh(%252) /* ty=Tensor[(5, 6, 2), float64] */;
  %258 = @func_543(%255, %256) /* ty=Tensor[(8, 7, 2), int32] */;
  (%257, %258, %var_2874)
}

def @func_8934() -> Tensor[(6, 9, 11), float64] {
  %259 = @func_5929() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
  %259.0
}

def @func_5217() -> Tensor[(3, 2, 9), float32] {
  %260 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %260.0
}

def @func_3842() -> (Tensor[(6, 9, 11), float64],) {
  %261 = @func_3666() /* ty=(Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
  %262 = %261.1;
  (%262,)
}

def @func_1898(%var_1895: Tensor[(11, 3, 15), float64]) -> (Tensor[(11, 3, 15), float64],) {
  %263 = cast(%var_1895, dtype="float64") /* ty=Tensor[(11, 3, 15), float64] */;
  %264 = log(%263) /* ty=Tensor[(11, 3, 15), float64] */;
  (%264,)
}

def @func_4374(%var_4369: Tensor[(9, 1, 1), uint32], %var_4370: Tensor[(9, 12, 6), uint32]) -> (Tensor[(9, 12, 6), bool],) {
  %265 = cast(%var_4369, dtype="bool") /* ty=Tensor[(9, 1, 1), bool] */;
  %266 = cast(%var_4370, dtype="bool") /* ty=Tensor[(9, 12, 6), bool] */;
  %267 = greater_equal(%265, %266) /* ty=Tensor[(9, 12, 6), bool] */;
  (%267,)
}

def @func_7393() -> Tensor[(1440), int32] {
  %268 = @func_6554() /* ty=(Tensor[(1440), int32],) */;
  %268.0
}

def @func_7029(%var_7005: Tensor[(192), uint32], %var_7006: Tensor[(112), int32], %var_7018: Tensor[(80), float64]) -> (Tensor[(15, 8, 13), float32], Tensor[(4, 12, 4), float64], Tensor[(192), uint32], Tensor[(112), int32], Tensor[(192), uint32], Tensor[(16, 8, 5), float64], Tensor[(80), float64]) {
  %269 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 8, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 8, 13), float32] */;
  %270 = cast(%var_7005, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %271 = cast(%var_7005, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %272 = cast(%var_7006, dtype="int32") /* ty=Tensor[(112), int32] */;
  %273 = reshape(%270, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %274 = reshape(%271, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %275 = reshape(%272, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %276 = @func_2540(%273, %274, %275) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %277 = cast(%var_7006, dtype="int32") /* ty=Tensor[(112), int32] */;
  %278 = cast(%var_7005, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %279 = reshape(%277, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %280 = reshape(%278, newshape=[192]) /* ty=Tensor[(192), uint32] */;
  %281 = @func_4249(%279, %280) /* ty=(Tensor[(3, 2, 9), float64], Tensor[(112), int32], Tensor[(8, 7, 2), int32], Tensor[(192), uint32], Tensor[(5, 6, 2), float32], Tensor[(8, 7, 2), int32], Tensor[(3, 2, 9), float64], Tensor[(3, 2, 9), float32]) */;
  %282 = cast(%var_7018, dtype="float64") /* ty=Tensor[(80), float64] */;
  %283 = reshape(%282, newshape=[16, 1, 5]) /* ty=Tensor[(16, 1, 5), float64] */;
  %284 = @func_1427(%283) /* ty=(Tensor[(16, 8, 5), float64],) */;
  %285 = atan(%269) /* ty=Tensor[(15, 8, 13), float32] */;
  %286 = %276.4;
  %287 = %281.3;
  %288 = %284.0;
  (%285, %286, %var_7005, %var_7006, %287, %288, %var_7018)
}

def @func_6323(%var_6317: Tensor[(3, 2, 9), float32]) -> (Tensor[(1440), int32], Tensor[(3, 2, 9), int16]) {
  %289 = @func_5093() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(8, 7, 2), int32], Tensor[(1440), int32]) */;
  %290 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %291 = %290.1;
  %292 = cast(%var_6317, dtype="int16") /* ty=Tensor[(3, 2, 9), int16] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="int16") /* ty=Tensor[(3, 2, 9), int16] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %296 = %289.2;
  %297 = right_shift(%294, %295) /* ty=Tensor[(3, 2, 9), int16] */;
  (%296, %297)
}

def @func_8909() -> (Tensor[(1440), int32], Tensor[(130), uint32], Tensor[(256, 2), float32], Tensor[(80), float64], Tensor[(640), float64]) {
  %298 = cast(meta[relay.Constant][16] /* ty=Tensor[(256, 2), float32] */, dtype="float32") /* ty=Tensor[(256, 2), float32] */;
  %299 = cast(meta[relay.Constant][17] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %300 = cast(meta[relay.Constant][18] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %301 = reshape(%298, newshape=[4, 8, 16]) /* ty=Tensor[(4, 8, 16), float32] */;
  %302 = reshape(%299, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %303 = reshape(%300, newshape=[16, 8, 5]) /* ty=Tensor[(16, 8, 5), float64] */;
  %304 = @func_1480(%301, %302, %303) /* ty=(Tensor[(4, 8, 16), float32], Tensor[(80), float64], Tensor[(16, 8, 5), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) */;
  %305 = @func_8777() /* ty=Tensor[(1440), int32] */;
  %306 = %304.5;
  (%305, %306, meta[relay.Constant][16] /* ty=Tensor[(256, 2), float32] */, meta[relay.Constant][17] /* ty=Tensor[(80), float64] */, meta[relay.Constant][18] /* ty=Tensor[(640), float64] */)
}

def @func_9600() -> (Tensor[(6, 9, 11), int16],) {
  %307 = @func_4829() /* ty=Tensor[(6, 9, 11), int16] */;
  (%307,)
}

def @func_4894(%var_4860: Tensor[(594), float32], %var_4886: Tensor[(594), float32]) -> (Tensor[(3, 2, 9), float32], Tensor[(4, 12, 4), float64], Tensor[(112), int32], Tensor[(40, 2), float64], Tensor[(12, 8, 15), int32], Tensor[(1440), int32], Tensor[(26, 5), uint32], Tensor[(594), uint8]) {
  %308 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %309 = cast(%var_4860, dtype="float32") /* ty=Tensor[(594), float32] */;
  %310 = cast(meta[relay.Constant][19] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %311 = cast(meta[relay.Constant][20] /* ty=Tensor[(40, 2), float64] */, dtype="float64") /* ty=Tensor[(40, 2), float64] */;
  %312 = reshape(%309, newshape=[6, 9, 11]) /* ty=Tensor[(6, 9, 11), float32] */;
  %313 = reshape(%310, newshape=[2, 56]) /* ty=Tensor[(2, 56), int32] */;
  %314 = reshape(%311, newshape=[80, 1]) /* ty=Tensor[(80, 1), float64] */;
  %315 = @func_4005(%312, %313, %314) /* ty=(Tensor[(6, 9, 11), float64], Tensor[(4, 12, 4), float64], Tensor[(48, 4), uint32], Tensor[(2, 56), int32], Tensor[(16, 8, 5), float64], Tensor[(80, 1), float64]) */;
  %316 = cast(meta[relay.Constant][21] /* ty=Tensor[(1440), int32] */, dtype="int32") /* ty=Tensor[(1440), int32] */;
  %317 = cast(meta[relay.Constant][21] /* ty=Tensor[(1440), int32] */, dtype="int32") /* ty=Tensor[(1440), int32] */;
  %318 = reshape(%316, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
  %319 = reshape(%317, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
  %320 = @func_3578(%318, %319) /* ty=(Tensor[(12, 8, 15), int32], Tensor[(12, 8, 15), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %321 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %322 = cast(%var_4886, dtype="uint8") /* ty=Tensor[(594), uint8] */;
  %323 = shape_of(%var_4860, dtype="int32") /* ty=Tensor[(1), int32] */;
  %324 = cast(%var_4860, dtype="uint8") /* ty=Tensor[(594), uint8] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %326 = %308.1;
  %327 = %315.1;
  %328 = %320.0;
  %329 = %321.1;
  %330 = logical_xor(%324, %325) /* ty=Tensor[(594), uint8] */;
  (%326, %327, meta[relay.Constant][19] /* ty=Tensor[(112), int32] */, meta[relay.Constant][20] /* ty=Tensor[(40, 2), float64] */, %328, meta[relay.Constant][21] /* ty=Tensor[(1440), int32] */, %329, %330)
}

def @func_4005(%var_3980: Tensor[(6, 9, 11), float32], %var_3996: Tensor[(2, 56), int32], %var_4003: Tensor[(80, 1), float64]) -> (Tensor[(6, 9, 11), float64], Tensor[(4, 12, 4), float64], Tensor[(48, 4), uint32], Tensor[(2, 56), int32], Tensor[(16, 8, 5), float64], Tensor[(80, 1), float64]) {
  %331 = @func_3523() /* ty=Tensor[(6, 9, 11), float32] */;
  %332 = cast(%var_3980, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %336 = cast(meta[relay.Constant][22] /* ty=Tensor[(48, 4), uint32] */, dtype="uint32") /* ty=Tensor[(48, 4), uint32] */;
  %337 = cast(meta[relay.Constant][22] /* ty=Tensor[(48, 4), uint32] */, dtype="uint32") /* ty=Tensor[(48, 4), uint32] */;
  %338 = cast(%var_3996, dtype="int32") /* ty=Tensor[(2, 56), int32] */;
  %339 = reshape(%336, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %340 = reshape(%337, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %341 = reshape(%338, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %342 = @func_2540(%339, %340, %341) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %343 = cast(%var_4003, dtype="float64") /* ty=Tensor[(80, 1), float64] */;
  %344 = reshape(%343, newshape=[16, 1, 5]) /* ty=Tensor[(16, 1, 5), float64] */;
  %345 = @func_1427(%344) /* ty=(Tensor[(16, 8, 5), float64],) */;
  %346 = floor_mod(%334, %335) /* ty=Tensor[(6, 9, 11), float64] */;
  %347 = %342.4;
  %348 = %345.0;
  (%346, %347, meta[relay.Constant][22] /* ty=Tensor[(48, 4), uint32] */, %var_3996, %348, %var_4003)
}

def @func_8974() -> (Tensor[(3, 2, 9), float32], Tensor[(1, 15, 6), float32], Tensor[(3, 30), float32], Tensor[(1440), int32]) {
  %349 = @func_6957() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %350 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 30), float32] */, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
  %351 = reshape(%350, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), float32] */;
  %352 = @func_7351(%351) /* ty=(Tensor[(1, 15, 6), float32],) */;
  %353 = @func_6554() /* ty=(Tensor[(1440), int32],) */;
  %354 = %349.0;
  %355 = %352.0;
  %356 = %353.0;
  (%354, %355, meta[relay.Constant][23] /* ty=Tensor[(3, 30), float32] */, %356)
}

def @func_10623() -> Tensor[(96, 2), uint64] {
  %357 = @func_6778() /* ty=(Tensor[(96, 2), uint64],) */;
  %357.0
}

def @func_9207() -> (Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32], Tensor[(112), int32]) {
  %358 = @func_7575() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) */;
  %359 = @func_8549() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float64]) */;
  %360 = @func_4481() /* ty=Tensor[(6, 9, 11), int16] */;
  %361 = %358.1;
  %362 = %359.0;
  (%360, %361, %362)
}

def @func_10321(%var_10183: Tensor[(192), uint32], %var_10184: Tensor[(112), int32], %var_10185: Tensor[(80), float64], %var_10306: Tensor[(16), uint16], %var_10307: Tensor[(224), uint16], %var_10317: Tensor[(840), float32]) -> (Tensor[(192), uint32], Tensor[(192), uint32], Tensor[(80), float64], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32], Tensor[(12), float32], Tensor[(26, 5), uint32], Tensor[(12, 112), bool], Tensor[(6, 9, 11), float32], Tensor[(14, 8, 2), bool], Tensor[(16), uint16], Tensor[(224), uint16], Tensor[(10, 7, 12), float32], Tensor[(840), float32]) {
  %363 = cast(%var_10183, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %364 = cast(%var_10184, dtype="int32") /* ty=Tensor[(112), int32] */;
  %365 = cast(%var_10185, dtype="float64") /* ty=Tensor[(80), float64] */;
  %366 = reshape(%363, newshape=[192]) /* ty=Tensor[(192), uint32] */;
  %367 = reshape(%364, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %368 = reshape(%365, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %369 = @func_7029(%366, %367, %368) /* ty=(Tensor[(15, 8, 13), float32], Tensor[(4, 12, 4), float64], Tensor[(192), uint32], Tensor[(112), int32], Tensor[(192), uint32], Tensor[(16, 8, 5), float64], Tensor[(80), float64]) */;
  %370 = @func_4684() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %371 = @func_5825() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %372 = cast(meta[relay.Constant][24] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
  %373 = reshape(%372, newshape=[12, 1]) /* ty=Tensor[(12, 1), float32] */;
  %374 = @func_8635(%373) /* ty=(Tensor[(12, 1), float32],) */;
  %375 = %374.0;
  %376 = cast(%375, dtype="bool") /* ty=Tensor[(12, 1), bool] */;
  %377 = cast(%var_10184, dtype="bool") /* ty=Tensor[(112), bool] */;
  %378 = @func_6077() /* ty=Tensor[(6, 9, 11), float32] */;
  %379 = cast(%378, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %380 = log(%379) /* ty=Tensor[(6, 9, 11), float64] */;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %382 = sin(%381) /* ty=Tensor[(6, 9, 11), float64] */;
  %383 = cast(%382, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %384 = cast(%var_10306, dtype="uint16") /* ty=Tensor[(16), uint16] */;
  %385 = cast(%var_10307, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %386 = reshape(%384, newshape=[1, 8, 2]) /* ty=Tensor[(1, 8, 2), uint16] */;
  %387 = reshape(%385, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), uint16] */;
  %388 = cast(%var_10317, dtype="float32") /* ty=Tensor[(840), float32] */;
  %389 = reshape(%388, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), float32] */;
  %390 = %369.2;
  %391 = %370.0;
  %392 = %371.0;
  %393 = @func_4762() /* ty=Tensor[(26, 5), uint32] */;
  %394 = greater(%376, %377) /* ty=Tensor[(12, 112), bool] */;
  %395 = atanh(%383) /* ty=Tensor[(6, 9, 11), float32] */;
  %396 = @func_4974(%386, %387) /* ty=Tensor[(14, 8, 2), bool] */;
  %397 = @func_639(%389) /* ty=Tensor[(10, 7, 12), float32] */;
  (%390, %var_10183, %var_10185, %391, %392, meta[relay.Constant][24] /* ty=Tensor[(12), float32] */, %393, %394, %395, %396, %var_10306, %var_10307, %397, %var_10317)
}

def @func_5761() -> (Tensor[(6, 9, 11), float32],) {
  %398 = @func_3666() /* ty=(Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
  %399 = %398.2;
  %400 = cast(%399, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %401 = sigmoid(%400) /* ty=Tensor[(6, 9, 11), float32] */;
  (%401,)
}

def @func_6778() -> (Tensor[(96, 2), uint64],) {
  %402 = @func_5788() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float64], Tensor[(112), int32], Tensor[(96, 2), uint32], Tensor[(112), int32]) */;
  %403 = %402.3;
  %404 = cast(meta[relay.Constant][25] /* ty=Tensor[(96, 2), uint32] */, dtype="uint64") /* ty=Tensor[(96, 2), uint64] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(2), int32] */;
  %406 = cast(%403, dtype="uint64") /* ty=Tensor[(96, 2), uint64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %408 = minimum(%406, %407) /* ty=Tensor[(96, 2), uint64] */;
  (%408,)
}

def @func_6957() -> (Tensor[(3, 2, 9), float32],) {
  %409 = @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */;
  %410 = %409.1;
  (%410,)
}

def @func_9172() -> (Tensor[(12, 8, 15), int64], Tensor[(54), float32], Tensor[(1440), float64], Tensor[(8, 9, 3), float32]) {
  %411 = cast(meta[relay.Constant][26] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %412 = cast(meta[relay.Constant][27] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %413 = reshape(%411, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), float32] */;
  %414 = reshape(%412, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), float64] */;
  %415 = @func_4545(%413, %414) /* ty=(Tensor[(3, 2, 9), int8], Tensor[(26, 5), uint32], Tensor[(1440), int32], Tensor[(12, 8, 15), int64]) */;
  %416 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 9, 3), float32] */;
  %417 = asin(%416) /* ty=Tensor[(8, 9, 3), float32] */;
  %418 = cast(%417, dtype="float64") /* ty=Tensor[(8, 9, 3), float64] */;
  %419 = sigmoid(%418) /* ty=Tensor[(8, 9, 3), float64] */;
  %420 = cast(%417, dtype="float32") /* ty=Tensor[(8, 9, 3), float32] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="float32") /* ty=Tensor[(8, 9, 3), float32] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %424 = %415.3;
  %425 = minimum(%422, %423) /* ty=Tensor[(8, 9, 3), float32] */;
  (%424, meta[relay.Constant][26] /* ty=Tensor[(54), float32] */, meta[relay.Constant][27] /* ty=Tensor[(1440), float64] */, %425)
}

def @func_5280() -> (Tensor[(1440), int32], Tensor[(6, 9, 11), float32]) {
  %426 = @func_4481() /* ty=Tensor[(6, 9, 11), int16] */;
  %427 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 9, 11), int16] */, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
  %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%426, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %431 = not_equal(%429, %430) /* ty=Tensor[(6, 9, 11), bool] */;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %433 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 9, 11), int16] */, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %434 = reshape(%432, newshape=[594]) /* ty=Tensor[(594), float32] */;
  %435 = reshape(%433, newshape=[594]) /* ty=Tensor[(594), float32] */;
  %436 = @func_4894(%434, %435) /* ty=(Tensor[(3, 2, 9), float32], Tensor[(4, 12, 4), float64], Tensor[(112), int32], Tensor[(40, 2), float64], Tensor[(12, 8, 15), int32], Tensor[(1440), int32], Tensor[(26, 5), uint32], Tensor[(594), uint8]) */;
  %437 = cast(%431, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %438 = %436.5;
  %439 = sqrt(%437) /* ty=Tensor[(6, 9, 11), float32] */;
  (%438, %439)
}

def @func_5710() -> Tensor[(6, 9, 11), float32] {
  @func_4944() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_7621() -> (Tensor[(6, 9, 11), float64], Tensor[(10, 7, 12), float32], Tensor[(840), float32], Tensor[(3, 2, 9), float32]) {
  %440 = @func_5929() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
  %441 = cast(meta[relay.Constant][30] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %442 = reshape(%441, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), float32] */;
  %443 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %444 = %440.0;
  %445 = @func_639(%442) /* ty=Tensor[(10, 7, 12), float32] */;
  %446 = %443.0;
  (%444, %445, meta[relay.Constant][30] /* ty=Tensor[(840), float32] */, %446)
}

def @func_4137() -> (Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) {
  %447 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %448 = cast(meta[relay.Constant][31] /* ty=Tensor[(192), uint32] */, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %449 = cast(meta[relay.Constant][31] /* ty=Tensor[(192), uint32] */, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %450 = cast(meta[relay.Constant][32] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %451 = reshape(%448, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %452 = reshape(%449, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %453 = reshape(%450, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %454 = @func_2540(%451, %452, %453) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %455 = %447.0;
  %456 = %454.3;
  (%455, %456, meta[relay.Constant][31] /* ty=Tensor[(192), uint32] */, meta[relay.Constant][32] /* ty=Tensor[(112), int32] */)
}

def @func_9747() -> (Tensor[(3, 2, 9), float32], Tensor[(26, 5), uint32], Tensor[(3, 2, 9), float32], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), int16]) {
  %457 = @func_7856() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %458 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %459 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %460 = @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */;
  %461 = %460.0;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %463 = tan(%462) /* ty=Tensor[(6, 9, 11), float64] */;
  %464 = cast(%461, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
  %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%463, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %468 = logical_and(%466, %467) /* ty=Tensor[(6, 9, 11), bool] */;
  %469 = cast(%468, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
  %470 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%463, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %473 = less(%471, %472) /* ty=Tensor[(6, 9, 11), bool] */;
  %474 = cast(%468, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%473, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %478 = @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */;
  %479 = %457.0;
  %480 = %458.1;
  %481 = %459.0;
  %482 = divide(%476, %477) /* ty=Tensor[(6, 9, 11), float64] */;
  %483 = %478.0;
  (%479, %480, %481, %482, %483)
}

def @func_4675(%var_4636: Tensor[(80, 1), float64]) -> (Tensor[(5, 6, 2), float64], Tensor[(4, 28), int32], Tensor[(3, 2, 9), float32], Tensor[(16, 8, 5), float64], Tensor[(80, 1), float64], Tensor[(6, 9, 11), int32], Tensor[(3, 2, 9), float64]) {
  %484 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 28), int32] */, dtype="int32") /* ty=Tensor[(4, 28), int32] */;
  %485 = reshape(%484, newshape=[28, 4]) /* ty=Tensor[(28, 4), int32] */;
  %486 = @func_2890(%485) /* ty=(Tensor[(5, 6, 2), float64], Tensor[(8, 7, 2), int32], Tensor[(28, 4), int32]) */;
  %487 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %488 = cast(%var_4636, dtype="float64") /* ty=Tensor[(80, 1), float64] */;
  %489 = reshape(%488, newshape=[16, 1, 5]) /* ty=Tensor[(16, 1, 5), float64] */;
  %490 = @func_1427(%489) /* ty=(Tensor[(16, 8, 5), float64],) */;
  %491 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %492 = %491.0;
  %493 = @func_4256() /* ty=Tensor[(6, 9, 11), float32] */;
  %494 = cast(%493, dtype="int32") /* ty=Tensor[(6, 9, 11), int32] */;
  %495 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%492, dtype="int32") /* ty=Tensor[(6, 9, 11), int32] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %498 = %486.0;
  %499 = %487.1;
  %500 = %490.0;
  %501 = bitwise_and(%496, %497) /* ty=Tensor[(6, 9, 11), int32] */;
  %502 = @func_4118() /* ty=Tensor[(3, 2, 9), float64] */;
  (%498, meta[relay.Constant][33] /* ty=Tensor[(4, 28), int32] */, %499, %500, %var_4636, %501, %502)
}

def @func_8115(%var_8045: Tensor[(15, 11, 8), int8], %var_8046: Tensor[(15, 11, 8), int8], %var_8052: Tensor[(112), int32]) -> (Tensor[(15, 11, 8), int8], Tensor[(6, 9, 11), float64], Tensor[(28, 4), bool], Tensor[(28, 4), float64], Tensor[(15, 11, 8), float64]) {
  %503 = cast(%var_8046, dtype="int8") /* ty=Tensor[(15, 11, 8), int8] */;
  %504 = shape_of(%var_8045, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%var_8045, dtype="int8") /* ty=Tensor[(15, 11, 8), int8] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %507 = @func_4684() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %508 = cast(%var_8052, dtype="int32") /* ty=Tensor[(112), int32] */;
  %509 = reshape(%508, newshape=[28, 4]) /* ty=Tensor[(28, 4), int32] */;
  %510 = @func_2890(%509) /* ty=(Tensor[(5, 6, 2), float64], Tensor[(8, 7, 2), int32], Tensor[(28, 4), int32]) */;
  %511 = %510.2;
  %512 = cast(%var_8052, dtype="uint16") /* ty=Tensor[(112), uint16] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(2), int32] */;
  %514 = cast(%511, dtype="uint16") /* ty=Tensor[(28, 4), uint16] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %516 = right_shift(%514, %515) /* ty=Tensor[(28, 4), uint16] */;
  %517 = cast(%var_8052, dtype="bool") /* ty=Tensor[(112), bool] */;
  %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(2), int32] */;
  %519 = cast(%516, dtype="bool") /* ty=Tensor[(28, 4), bool] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %521 = cast(%511, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %522 = shape_of(%516, dtype="int32") /* ty=Tensor[(2), int32] */;
  %523 = cast(%516, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %525 = mod(%523, %524) /* ty=Tensor[(28, 4), float32] */;
  %526 = cast(meta[relay.Constant][34] /* ty=Tensor[(28, 4), float32] */, dtype="int8") /* ty=Tensor[(28, 4), int8] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(2), int32] */;
  %528 = cast(%525, dtype="int8") /* ty=Tensor[(28, 4), int8] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %530 = subtract(%528, %529) /* ty=Tensor[(28, 4), int8] */;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(28, 4), float64] */;
  %532 = shape_of(%516, dtype="int32") /* ty=Tensor[(2), int32] */;
  %533 = cast(%516, dtype="float64") /* ty=Tensor[(28, 4), float64] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %535 = cast(%var_8045, dtype="float64") /* ty=Tensor[(15, 11, 8), float64] */;
  %536 = bitwise_and(%505, %506) /* ty=Tensor[(15, 11, 8), int8] */;
  %537 = %507.0;
  %538 = equal(%519, %520) /* ty=Tensor[(28, 4), bool] */;
  %539 = power(%533, %534) /* ty=Tensor[(28, 4), float64] */;
  %540 = tan(%535) /* ty=Tensor[(15, 11, 8), float64] */;
  (%536, %537, %538, %539, %540)
}

def @func_6109() -> (Tensor[(3, 2, 9), float32],) {
  %541 = @func_5204() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32], Tensor[(11, 3, 15), float64], Tensor[(495), float64]) */;
  %542 = %541.0;
  (%542,)
}

def @func_5450() -> (Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) {
  %543 = @func_4684() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %544 = @func_5338() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %545 = %543.0;
  %546 = %544.0;
  (%545, %546)
}

def @func_1427(%var_1420: Tensor[(16, 1, 5), float64]) -> (Tensor[(16, 8, 5), float64],) {
  %547 = cast(%var_1420, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  %548 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 5), float64] */;
  %549 = divide(%547, %548) /* ty=Tensor[(16, 8, 5), float64] */;
  (%549,)
}

def @func_9463() -> Tensor[(6, 9, 11), float64] {
  %550 = @func_7873() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %550.0
}

def @func_8558() -> Tensor[(3, 2, 9), float32] {
  %551 = @func_7621() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(10, 7, 12), float32], Tensor[(840), float32], Tensor[(3, 2, 9), float32]) */;
  %551.3
}

def @func_1480(%var_1454: Tensor[(4, 8, 16), float32], %var_1463: Tensor[(80), float64], %var_1471: Tensor[(16, 8, 5), float64]) -> (Tensor[(4, 8, 16), float32], Tensor[(80), float64], Tensor[(16, 8, 5), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) {
  %552 = cast(%var_1454, dtype="float32") /* ty=Tensor[(4, 8, 16), float32] */;
  %553 = cast(%var_1463, dtype="float64") /* ty=Tensor[(80), float64] */;
  %554 = reshape(%553, newshape=[16, 1, 5]) /* ty=Tensor[(16, 1, 5), float64] */;
  %555 = @func_1427(%554) /* ty=(Tensor[(16, 8, 5), float64],) */;
  %556 = %555.0;
  %557 = cast(%var_1471, dtype="bool") /* ty=Tensor[(16, 8, 5), bool] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%556, dtype="bool") /* ty=Tensor[(16, 8, 5), bool] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %561 = cast(meta[relay.Constant][36] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %562 = cast(meta[relay.Constant][37] /* ty=Tensor[(130), uint32] */, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %563 = reshape(%561, newshape=[]) /* ty=uint32 */;
  %564 = reshape(%562, newshape=[1, 13, 10]) /* ty=Tensor[(1, 13, 10), uint32] */;
  %565 = @func_520(%563, %564) /* ty=(Tensor[(1, 13, 10), bool],) */;
  %566 = acosh(%552) /* ty=Tensor[(4, 8, 16), float32] */;
  %567 = less_equal(%559, %560) /* ty=Tensor[(16, 8, 5), bool] */;
  %568 = %565.0;
  (%566, %var_1463, %567, %568, meta[relay.Constant][36] /* ty=uint32 */, meta[relay.Constant][37] /* ty=Tensor[(130), uint32] */)
}

def @func_8834() -> (Tensor[(112), int32],) {
  %569 = @func_7891() /* ty=Tensor[(112), int32] */;
  (%569,)
}

def @func_10676() -> Tensor[(112), int32] {
  %570 = @func_8834() /* ty=(Tensor[(112), int32],) */;
  %570.0
}

def @func_10826(%var_10817: int64, %var_10818: Tensor[(10, 7, 6), int64]) -> Tensor[(10, 7, 6), int64] {
  %571 = cast(%var_10817, dtype="int64") /* ty=int64 */;
  %572 = cast(%var_10818, dtype="int64") /* ty=Tensor[(10, 7, 6), int64] */;
  multiply(%571, %572) /* ty=Tensor[(10, 7, 6), int64] */
}

def @func_9844() -> (Tensor[(6, 9, 11), float64], Tensor[(192), uint32]) {
  %573 = @func_6617() /* ty=(Tensor[(192), uint32],) */;
  %574 = @func_9622() /* ty=Tensor[(6, 9, 11), float64] */;
  %575 = %573.0;
  (%574, %575)
}

def @func_5626(%var_5615: Tensor[(4, 14, 15), float32]) -> (Tensor[(4, 14, 15), float32], Tensor[(6, 9, 11), float64]) {
  %576 = cast(%var_5615, dtype="float32") /* ty=Tensor[(4, 14, 15), float32] */;
  %577 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %578 = asinh(%576) /* ty=Tensor[(4, 14, 15), float32] */;
  %579 = %577.0;
  (%578, %579)
}

def @func_4545(%var_4517: Tensor[(3, 2, 9), float32], %var_4536: Tensor[(12, 8, 15), float64]) -> (Tensor[(3, 2, 9), int8], Tensor[(26, 5), uint32], Tensor[(1440), int32], Tensor[(12, 8, 15), int64]) {
  %580 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %581 = %580.0;
  %582 = cast(%var_4517, dtype="int8") /* ty=Tensor[(3, 2, 9), int8] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%581, dtype="int8") /* ty=Tensor[(3, 2, 9), int8] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %586 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %587 = cast(meta[relay.Constant][38] /* ty=Tensor[(1440), int32] */, dtype="int32") /* ty=Tensor[(1440), int32] */;
  %588 = cast(meta[relay.Constant][38] /* ty=Tensor[(1440), int32] */, dtype="int32") /* ty=Tensor[(1440), int32] */;
  %589 = reshape(%587, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
  %590 = reshape(%588, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
  %591 = @func_3578(%589, %590) /* ty=(Tensor[(12, 8, 15), int32], Tensor[(12, 8, 15), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %592 = %591.1;
  %593 = cast(%var_4536, dtype="int64") /* ty=Tensor[(12, 8, 15), int64] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="int64") /* ty=Tensor[(12, 8, 15), int64] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %597 = logical_xor(%584, %585) /* ty=Tensor[(3, 2, 9), int8] */;
  %598 = %586.1;
  %599 = bitwise_xor(%595, %596) /* ty=Tensor[(12, 8, 15), int64] */;
  (%597, %598, meta[relay.Constant][38] /* ty=Tensor[(1440), int32] */, %599)
}

def @func_6617() -> (Tensor[(192), uint32],) {
  %600 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %601 = %600.2;
  (%601,)
}

def @func_9334() -> (Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), float32]) {
  %602 = @func_4944() /* ty=Tensor[(6, 9, 11), float32] */;
  %603 = @func_7584() /* ty=Tensor[(6, 9, 11), float32] */;
  (%602, %603)
}

def @func_2540(%var_2495: Tensor[(4, 12, 4), uint32], %var_2496: Tensor[(4, 12, 4), uint32], %var_2523: Tensor[(112), int32]) -> (Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) {
  %604 = cast(%var_2496, dtype="bool") /* ty=Tensor[(4, 12, 4), bool] */;
  %605 = shape_of(%var_2495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%var_2495, dtype="bool") /* ty=Tensor[(4, 12, 4), bool] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %608 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %609 = cast(meta[relay.Constant][40] /* ty=Tensor[(26, 5), uint32] */, dtype="uint32") /* ty=Tensor[(26, 5), uint32] */;
  %610 = reshape(%608, newshape=[]) /* ty=uint32 */;
  %611 = reshape(%609, newshape=[1, 13, 10]) /* ty=Tensor[(1, 13, 10), uint32] */;
  %612 = @func_520(%610, %611) /* ty=(Tensor[(1, 13, 10), bool],) */;
  %613 = cast(%var_2495, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %614 = cast(%var_2523, dtype="int32") /* ty=Tensor[(112), int32] */;
  %615 = cast(%var_2523, dtype="int32") /* ty=Tensor[(112), int32] */;
  %616 = reshape(%614, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
  %617 = reshape(%615, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
  %618 = greater(%606, %607) /* ty=Tensor[(4, 12, 4), bool] */;
  %619 = %612.0;
  %620 = acosh(%613) /* ty=Tensor[(4, 12, 4), float64] */;
  %621 = @func_543(%616, %617) /* ty=Tensor[(8, 7, 2), int32] */;
  (%618, %619, meta[relay.Constant][39] /* ty=uint32 */, meta[relay.Constant][40] /* ty=Tensor[(26, 5), uint32] */, %620, %621, %var_2523)
}

def @func_5825() -> (Tensor[(6, 9, 11), float32],) {
  %622 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %623 = %622.0;
  (%623,)
}

def @func_7856() -> (Tensor[(3, 2, 9), float32],) {
  %624 = @func_7575() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) */;
  %625 = %624.1;
  (%625,)
}

def @func_9026() -> (Tensor[(6, 9, 11), float64], Tensor[(15, 14, 13), uint32], Tensor[(2730), uint32]) {
  %626 = @func_7873() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %627 = cast(meta[relay.Constant][41] /* ty=Tensor[(2730), uint32] */, dtype="uint32") /* ty=Tensor[(2730), uint32] */;
  %628 = cast(meta[relay.Constant][41] /* ty=Tensor[(2730), uint32] */, dtype="uint32") /* ty=Tensor[(2730), uint32] */;
  %629 = reshape(%627, newshape=[15, 14, 13]) /* ty=Tensor[(15, 14, 13), uint32] */;
  %630 = reshape(%628, newshape=[15, 14, 13]) /* ty=Tensor[(15, 14, 13), uint32] */;
  %631 = %626.0;
  %632 = @func_4275(%629, %630) /* ty=Tensor[(15, 14, 13), uint32] */;
  (%631, %632, meta[relay.Constant][41] /* ty=Tensor[(2730), uint32] */)
}

def @func_1554(%var_1545: Tensor[(16, 5, 13), uint16], %var_1546: Tensor[(16, 5, 13), uint16]) -> Tensor[(16, 5, 13), bool] {
  %633 = cast(%var_1546, dtype="bool") /* ty=Tensor[(16, 5, 13), bool] */;
  %634 = shape_of(%var_1545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_1545, dtype="bool") /* ty=Tensor[(16, 5, 13), bool] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%635, %636) /* ty=Tensor[(16, 5, 13), bool] */
}

def @func_5817() -> (Tensor[(112), int32], Tensor[(3, 2, 9), float32]) {
  %637 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %638 = @func_5338() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %639 = %637.3;
  %640 = %638.0;
  (%639, %640)
}

def @func_4160() -> (Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) {
  %641 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %642 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %643 = %641.0;
  %644 = %642.0;
  (%643, %644)
}

def @func_4275(%var_4265: Tensor[(15, 14, 13), uint32], %var_4266: Tensor[(15, 14, 13), uint32]) -> Tensor[(15, 14, 13), uint32] {
  %645 = cast(%var_4266, dtype="uint32") /* ty=Tensor[(15, 14, 13), uint32] */;
  %646 = shape_of(%var_4265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%var_4265, dtype="uint32") /* ty=Tensor[(15, 14, 13), uint32] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%647, %648) /* ty=Tensor[(15, 14, 13), uint32] */
}

def @func_9431() -> (Tensor[(112), int32],) {
  %649 = @func_8549() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float64]) */;
  %650 = %649.0;
  (%650,)
}

def @func_9554() -> (Tensor[(3, 2, 9), float32], Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), float64], Tensor[(840), float32], Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), int16], Tensor[(6, 9, 11), bool]) {
  %651 = @func_7856() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %652 = %651.0;
  %653 = cast(%652, dtype="float32") /* ty=Tensor[(3, 2, 9), float32] */;
  %654 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %655 = @func_8295() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(840), float32]) */;
  %656 = @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */;
  %657 = sqrt(%653) /* ty=Tensor[(3, 2, 9), float32] */;
  %658 = cast(%657, dtype="float32") /* ty=Tensor[(3, 2, 9), float32] */;
  %659 = reshape(%658, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), float32] */;
  %660 = @func_6323(%659) /* ty=(Tensor[(1440), int32], Tensor[(3, 2, 9), int16]) */;
  %661 = @func_3666() /* ty=(Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
  %662 = @func_4944() /* ty=Tensor[(6, 9, 11), float32] */;
  %663 = %654.0;
  %664 = %655.1;
  %665 = %656.0;
  %666 = %660.1;
  %667 = %661.0;
  (%657, %662, %663, %664, %665, %666, %667)
}

def @func_5010() -> (Tensor[(6, 9, 11), float32],) {
  %668 = @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */;
  %669 = %668.0;
  %670 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 9, 11), int16] */, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%669, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %674 = power(%672, %673) /* ty=Tensor[(6, 9, 11), float32] */;
  (%674,)
}

def @func_5338() -> (Tensor[(3, 2, 9), float32],) {
  %675 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %676 = %675.0;
  (%676,)
}

def @func_4944() -> Tensor[(6, 9, 11), float32] {
  @func_4256() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_8549() -> (Tensor[(112), int32], Tensor[(3, 2, 9), float64]) {
  %677 = @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */;
  %678 = %677.0;
  %679 = @func_4118() /* ty=Tensor[(3, 2, 9), float64] */;
  (%678, %679)
}

def @func_9099() -> (Tensor[(112), int32], Tensor[(3, 2, 9), float64]) {
  %680 = @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */;
  %681 = %680.0;
  %682 = cast(%681, dtype="int32") /* ty=Tensor[(112), int32] */;
  %683 = reshape(%682, newshape=[2, 56]) /* ty=Tensor[(2, 56), int32] */;
  %684 = @func_6522(%683) /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float64], Tensor[(192), uint32], Tensor[(1040), uint16], Tensor[(6, 9, 11), float32], Tensor[(2, 56), float32]) */;
  %685 = %684.1;
  (%681, %685)
}

def @func_8358() -> Tensor[(6, 9, 11), int8] {
  %686 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %687 = %686.0;
  %688 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 9, 11), float32] */, dtype="int8") /* ty=Tensor[(6, 9, 11), int8] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%687, dtype="int8") /* ty=Tensor[(6, 9, 11), int8] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  subtract(%690, %691) /* ty=Tensor[(6, 9, 11), int8] */
}

def @func_10412() -> (Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), float64]) {
  %692 = @func_7584() /* ty=Tensor[(6, 9, 11), float32] */;
  %693 = @func_7925() /* ty=Tensor[(6, 9, 11), float64] */;
  (%692, %693)
}

def @func_9083() -> (Tensor[(6, 9, 11), float64],) {
  %694 = @func_8996() /* ty=(Tensor[(6, 9, 11), int16],) */;
  %695 = %694.0;
  %696 = cast(%695, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %697 = asin(%696) /* ty=Tensor[(6, 9, 11), float64] */;
  (%697,)
}

def @func_9622() -> Tensor[(6, 9, 11), float64] {
  %698 = @func_5788() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float64], Tensor[(112), int32], Tensor[(96, 2), uint32], Tensor[(112), int32]) */;
  %698.1
}

def @func_4762() -> Tensor[(26, 5), uint32] {
  %699 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %699.1
}

def @func_7983() -> Tensor[(6, 9, 11), float32] {
  %700 = @func_7621() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(10, 7, 12), float32], Tensor[(840), float32], Tensor[(3, 2, 9), float32]) */;
  %701 = %700.0;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  asinh(%702) /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_7575() -> (Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) {
  %703 = @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */;
  %704 = @func_4829() /* ty=Tensor[(6, 9, 11), int16] */;
  %705 = %703.1;
  (%704, %705)
}

def @func_3771(%var_3742: Tensor[(6, 9, 11), float64]) -> (Tensor[(8, 7, 2), int32], Tensor[(180, 8), int32], Tensor[(11, 3, 15), float64], Tensor[(165, 3), float64], Tensor[(5, 6, 2), float64], Tensor[(16, 8, 5), float64], Tensor[(80), float64], Tensor[(6, 9, 11), float64], Tensor[(16, 5, 13), bool], Tensor[(1040), uint16]) {
  %706 = cast(meta[relay.Constant][44] /* ty=Tensor[(180, 8), int32] */, dtype="int32") /* ty=Tensor[(180, 8), int32] */;
  %707 = cast(meta[relay.Constant][44] /* ty=Tensor[(180, 8), int32] */, dtype="int32") /* ty=Tensor[(180, 8), int32] */;
  %708 = reshape(%706, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
  %709 = reshape(%707, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
  %710 = @func_3578(%708, %709) /* ty=(Tensor[(12, 8, 15), int32], Tensor[(12, 8, 15), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %711 = cast(meta[relay.Constant][45] /* ty=Tensor[(165, 3), float64] */, dtype="float64") /* ty=Tensor[(165, 3), float64] */;
  %712 = reshape(%711, newshape=[11, 3, 15]) /* ty=Tensor[(11, 3, 15), float64] */;
  %713 = @func_1898(%712) /* ty=(Tensor[(11, 3, 15), float64],) */;
  %714 = %710.2;
  %715 = cast(%714, dtype="int32") /* ty=Tensor[(8, 7, 2), int32] */;
  %716 = reshape(%715, newshape=[28, 4]) /* ty=Tensor[(28, 4), int32] */;
  %717 = @func_2890(%716) /* ty=(Tensor[(5, 6, 2), float64], Tensor[(8, 7, 2), int32], Tensor[(28, 4), int32]) */;
  %718 = cast(meta[relay.Constant][46] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %719 = reshape(%718, newshape=[16, 1, 5]) /* ty=Tensor[(16, 1, 5), float64] */;
  %720 = @func_1427(%719) /* ty=(Tensor[(16, 8, 5), float64],) */;
  %721 = @func_3666() /* ty=(Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
  %722 = %721.2;
  %723 = cast(%722, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %724 = cos(%723) /* ty=Tensor[(6, 9, 11), float64] */;
  %725 = @func_3523() /* ty=Tensor[(6, 9, 11), float32] */;
  %726 = cast(%725, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %727 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%724, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %730 = multiply(%728, %729) /* ty=Tensor[(6, 9, 11), float64] */;
  %731 = cast(%var_3742, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%730, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %735 = cast(meta[relay.Constant][47] /* ty=Tensor[(1040), uint16] */, dtype="uint16") /* ty=Tensor[(1040), uint16] */;
  %736 = cast(meta[relay.Constant][47] /* ty=Tensor[(1040), uint16] */, dtype="uint16") /* ty=Tensor[(1040), uint16] */;
  %737 = reshape(%735, newshape=[16, 5, 13]) /* ty=Tensor[(16, 5, 13), uint16] */;
  %738 = reshape(%736, newshape=[16, 5, 13]) /* ty=Tensor[(16, 5, 13), uint16] */;
  %739 = %713.0;
  %740 = %717.0;
  %741 = %720.0;
  %742 = mod(%733, %734) /* ty=Tensor[(6, 9, 11), float64] */;
  %743 = @func_1554(%737, %738) /* ty=Tensor[(16, 5, 13), bool] */;
  (%714, meta[relay.Constant][44] /* ty=Tensor[(180, 8), int32] */, %739, meta[relay.Constant][45] /* ty=Tensor[(165, 3), float64] */, %740, %741, meta[relay.Constant][46] /* ty=Tensor[(80), float64] */, %742, %743, meta[relay.Constant][47] /* ty=Tensor[(1040), uint16] */)
}

def @func_5666() -> (Tensor[(6, 9, 11), float32],) {
  %744 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %745 = %744.0;
  (%745,)
}

def @func_9663(%var_9648: Tensor[(96, 2), uint64]) -> (Tensor[(96, 2), bool], Tensor[(96, 2), float64], Tensor[(6, 9, 11), int16], Tensor[(1440), int32]) {
  %746 = @func_6778() /* ty=(Tensor[(96, 2), uint64],) */;
  %747 = %746.0;
  %748 = cast(meta[relay.Constant][48] /* ty=Tensor[(96, 2), uint64] */, dtype="bool") /* ty=Tensor[(96, 2), bool] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(2), int32] */;
  %750 = cast(%747, dtype="bool") /* ty=Tensor[(96, 2), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %752 = cast(%var_9648, dtype="float64") /* ty=Tensor[(96, 2), float64] */;
  %753 = shape_of(%747, dtype="int32") /* ty=Tensor[(2), int32] */;
  %754 = cast(%747, dtype="float64") /* ty=Tensor[(96, 2), float64] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %756 = @func_9207() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32], Tensor[(112), int32]) */;
  %757 = @func_5280() /* ty=(Tensor[(1440), int32], Tensor[(6, 9, 11), float32]) */;
  %758 = greater(%750, %751) /* ty=Tensor[(96, 2), bool] */;
  %759 = divide(%754, %755) /* ty=Tensor[(96, 2), float64] */;
  %760 = %756.0;
  %761 = %757.0;
  (%758, %759, %760, %761)
}

def @func_3578(%var_3556: Tensor[(12, 8, 15), int32], %var_3557: Tensor[(12, 8, 15), int32]) -> (Tensor[(12, 8, 15), int32], Tensor[(12, 8, 15), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) {
  %762 = cast(%var_3557, dtype="int32") /* ty=Tensor[(12, 8, 15), int32] */;
  %763 = shape_of(%var_3556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%var_3556, dtype="int32") /* ty=Tensor[(12, 8, 15), int32] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %766 = cast(%var_3557, dtype="float64") /* ty=Tensor[(12, 8, 15), float64] */;
  %767 = cast(meta[relay.Constant][49] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %768 = cast(meta[relay.Constant][49] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %769 = reshape(%767, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
  %770 = reshape(%768, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
  %771 = minimum(%764, %765) /* ty=Tensor[(12, 8, 15), int32] */;
  %772 = sin(%766) /* ty=Tensor[(12, 8, 15), float64] */;
  %773 = @func_543(%769, %770) /* ty=Tensor[(8, 7, 2), int32] */;
  (%771, %772, %773, meta[relay.Constant][49] /* ty=Tensor[(112), int32] */)
}

def @func_8845() -> Tensor[(6, 9, 11), int16] {
  %774 = @func_7575() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) */;
  %774.0
}

def @func_520(%var_500: uint32, %var_501: Tensor[(1, 13, 10), uint32]) -> (Tensor[(1, 13, 10), bool],) {
  %775 = cast(%var_500, dtype="bool") /* ty=bool */;
  %776 = cast(%var_501, dtype="bool") /* ty=Tensor[(1, 13, 10), bool] */;
  %777 = greater_equal(%775, %776) /* ty=Tensor[(1, 13, 10), bool] */;
  (%777,)
}

def @func_9612(%var_9606: Tensor[(130), uint32]) -> (Tensor[(3, 2, 9), float32], Tensor[(130), uint32], Tensor[(130), uint32]) {
  %778 = @func_7575() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) */;
  %779 = cast(%var_9606, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %780 = reshape(%779, newshape=[130]) /* ty=Tensor[(130), uint32] */;
  %781 = @func_5999(%780) /* ty=(Tensor[(6, 9, 11), float32], Tensor[(1440), int32], Tensor[(6, 9, 11), float32], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) */;
  %782 = %778.1;
  %783 = %781.5;
  (%782, %783, %var_9606)
}

def @func_4016() -> (Tensor[(3, 2, 9), float32],) {
  %784 = cast(meta[relay.Constant][50] /* ty=Tensor[(3, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 2, 9), float32] */;
  %785 = asinh(%784) /* ty=Tensor[(3, 2, 9), float32] */;
  (%785,)
}

def @func_9137() -> (Tensor[(3, 2, 9), float32],) {
  %786 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %787 = %786.1;
  (%787,)
}

def @func_543(%var_538: Tensor[(8, 7, 2), int32], %var_539: Tensor[(8, 7, 2), int32]) -> Tensor[(8, 7, 2), int32] {
  %788 = cast(%var_539, dtype="int32") /* ty=Tensor[(8, 7, 2), int32] */;
  %789 = shape_of(%var_538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%var_538, dtype="int32") /* ty=Tensor[(8, 7, 2), int32] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%790, %791) /* ty=Tensor[(8, 7, 2), int32] */
}

def @func_10111() -> (Tensor[(6, 9, 11), float32], Tensor[(1440), int32]) {
  %792 = @func_5761() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %793 = %792.0;
  %794 = @func_8777() /* ty=Tensor[(1440), int32] */;
  (%793, %794)
}

def @func_5788() -> (Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float64], Tensor[(112), int32], Tensor[(96, 2), uint32], Tensor[(112), int32]) {
  %795 = @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */;
  %796 = @func_3666() /* ty=(Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
  %797 = cast(meta[relay.Constant][51] /* ty=Tensor[(96, 2), uint32] */, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
  %798 = cast(meta[relay.Constant][51] /* ty=Tensor[(96, 2), uint32] */, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
  %799 = cast(meta[relay.Constant][52] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %800 = reshape(%797, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %801 = reshape(%798, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %802 = reshape(%799, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %803 = @func_2540(%800, %801, %802) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %804 = %795.0;
  %805 = %796.1;
  %806 = %803.6;
  (%804, %805, %806, meta[relay.Constant][51] /* ty=Tensor[(96, 2), uint32] */, meta[relay.Constant][52] /* ty=Tensor[(112), int32] */)
}

def @func_10146() -> (Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) {
  %807 = @func_8996() /* ty=(Tensor[(6, 9, 11), int16],) */;
  %808 = @func_9137() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %809 = %807.0;
  %810 = %808.0;
  (%809, %810)
}

def @func_9986() -> Tensor[(6, 9, 11), float32] {
  %811 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %811.0
}

def @func_4481() -> Tensor[(6, 9, 11), int16] {
  %812 = @func_4256() /* ty=Tensor[(6, 9, 11), float32] */;
  %813 = cast(%812, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %814 = acos(%813) /* ty=Tensor[(6, 9, 11), float32] */;
  %815 = cast(%812, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
  %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%814, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %819 = equal(%817, %818) /* ty=Tensor[(6, 9, 11), bool] */;
  %820 = cast(%819, dtype="int16") /* ty=Tensor[(6, 9, 11), int16] */;
  %821 = shape_of(%812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%812, dtype="int16") /* ty=Tensor[(6, 9, 11), int16] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  add(%822, %823) /* ty=Tensor[(6, 9, 11), int16] */
}

def @func_7891() -> Tensor[(112), int32] {
  %824 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %824.3
}

def @func_639(%var_626: Tensor[(10, 7, 12), float32]) -> Tensor[(10, 7, 12), float32] {
  %825 = cast(%var_626, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %826 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(10, 7, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(meta[relay.Constant][53] /* ty=Tensor[(10, 7, 12), float32] */, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %829 = floor_divide(%827, %828) /* ty=Tensor[(10, 7, 12), float32] */;
  %830 = cast(%var_626, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%829, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%832, %833) /* ty=Tensor[(10, 7, 12), float32] */
}

def @func_4829() -> Tensor[(6, 9, 11), int16] {
  @func_4481() /* ty=Tensor[(6, 9, 11), int16] */
}

def @func_5999(%var_5997: Tensor[(130), uint32]) -> (Tensor[(6, 9, 11), float32], Tensor[(1440), int32], Tensor[(6, 9, 11), float32], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) {
  %834 = @func_5929() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
  %835 = @func_5093() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(8, 7, 2), int32], Tensor[(1440), int32]) */;
  %836 = cast(meta[relay.Constant][54] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %837 = cast(%var_5997, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %838 = reshape(%836, newshape=[]) /* ty=uint32 */;
  %839 = reshape(%837, newshape=[1, 13, 10]) /* ty=Tensor[(1, 13, 10), uint32] */;
  %840 = @func_520(%838, %839) /* ty=(Tensor[(1, 13, 10), bool],) */;
  %841 = %834.1;
  %842 = %835.2;
  %843 = @func_3523() /* ty=Tensor[(6, 9, 11), float32] */;
  %844 = %840.0;
  (%841, %842, %843, %844, meta[relay.Constant][54] /* ty=uint32 */, %var_5997)
}

def @func_6077() -> Tensor[(6, 9, 11), float32] {
  %845 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %845.0
}

def @func_6273(%var_6255: Tensor[(112), int32]) -> (Tensor[(6, 9, 11), float64], Tensor[(15, 14, 13), uint32], Tensor[(2730), uint32], uint32, Tensor[(96, 2), uint32], Tensor[(112), int32], Tensor[(112), int32], Tensor[(3, 2, 9), float32]) {
  %846 = @func_5929() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
  %847 = cast(meta[relay.Constant][55] /* ty=Tensor[(2730), uint32] */, dtype="uint32") /* ty=Tensor[(2730), uint32] */;
  %848 = cast(meta[relay.Constant][55] /* ty=Tensor[(2730), uint32] */, dtype="uint32") /* ty=Tensor[(2730), uint32] */;
  %849 = reshape(%847, newshape=[15, 14, 13]) /* ty=Tensor[(15, 14, 13), uint32] */;
  %850 = reshape(%848, newshape=[15, 14, 13]) /* ty=Tensor[(15, 14, 13), uint32] */;
  %851 = cast(meta[relay.Constant][56] /* ty=Tensor[(96, 2), uint32] */, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
  %852 = cast(meta[relay.Constant][56] /* ty=Tensor[(96, 2), uint32] */, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
  %853 = cast(%var_6255, dtype="int32") /* ty=Tensor[(112), int32] */;
  %854 = reshape(%851, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %855 = reshape(%852, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %856 = reshape(%853, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %857 = @func_2540(%854, %855, %856) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %858 = @func_5788() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float64], Tensor[(112), int32], Tensor[(96, 2), uint32], Tensor[(112), int32]) */;
  %859 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %860 = %846.0;
  %861 = @func_4275(%849, %850) /* ty=Tensor[(15, 14, 13), uint32] */;
  %862 = %857.2;
  %863 = %858.4;
  %864 = %859.0;
  (%860, %861, meta[relay.Constant][55] /* ty=Tensor[(2730), uint32] */, %862, meta[relay.Constant][56] /* ty=Tensor[(96, 2), uint32] */, %var_6255, %863, %864)
}

def @func_8158() -> (Tensor[(8, 7, 2), int32],) {
  %865 = @func_5093() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(8, 7, 2), int32], Tensor[(1440), int32]) */;
  %866 = %865.1;
  (%866,)
}

def @func_7722(%var_7716: Tensor[(1440), int32]) -> (Tensor[(3, 2, 9), float32], Tensor[(1440), float32]) {
  %867 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %868 = @func_5093() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(8, 7, 2), int32], Tensor[(1440), int32]) */;
  %869 = %868.2;
  %870 = cast(%var_7716, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %871 = shape_of(%869, dtype="int32") /* ty=Tensor[(1), int32] */;
  %872 = cast(%869, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?), float32] */;
  %874 = %867.0;
  %875 = add(%872, %873) /* ty=Tensor[(1440), float32] */;
  (%874, %875)
}

def @func_9976() -> (Tensor[(6, 9, 11), float32],) {
  %876 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %877 = %876.0;
  (%877,)
}

def @func_7093() -> (Tensor[(1440), int32], Tensor[(6, 9, 11), int16], Tensor[(13, 10), uint32], Tensor[(112), int32]) {
  %878 = @func_6554() /* ty=(Tensor[(1440), int32],) */;
  %879 = cast(meta[relay.Constant][57] /* ty=Tensor[(13, 10), uint32] */, dtype="uint32") /* ty=Tensor[(13, 10), uint32] */;
  %880 = cast(meta[relay.Constant][58] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %881 = reshape(%879, newshape=[26, 5]) /* ty=Tensor[(26, 5), uint32] */;
  %882 = reshape(%880, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %883 = @func_5172(%881, %882) /* ty=(Tensor[(26, 5), float32], Tensor[(8, 7, 2), int32], Tensor[(112), int32], Tensor[(26, 5), int64], Tensor[(26, 5), uint32], Tensor[(6, 9, 11), int16], Tensor[(8, 7, 2), int32]) */;
  %884 = %878.0;
  %885 = %883.5;
  (%884, %885, meta[relay.Constant][57] /* ty=Tensor[(13, 10), uint32] */, meta[relay.Constant][58] /* ty=Tensor[(112), int32] */)
}

def @func_7646() -> Tensor[(6, 9, 11), float32] {
  %886 = @func_5761() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %886.0
}

def @func_9482() -> Tensor[(6, 9, 11), int8] {
  @func_8358() /* ty=Tensor[(6, 9, 11), int8] */
}

def @func_2740(%var_2732: Tensor[(16, 12, 15), float32]) -> (Tensor[(16, 12, 15), float32], Tensor[(16, 12, 15), float32]) {
  %887 = cast(meta[relay.Constant][59] /* ty=Tensor[(16, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 15), float32] */;
  %888 = shape_of(%var_2732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%var_2732, dtype="float32") /* ty=Tensor[(16, 12, 15), float32] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %891 = cast(%var_2732, dtype="float32") /* ty=Tensor[(16, 12, 15), float32] */;
  %892 = divide(%889, %890) /* ty=Tensor[(16, 12, 15), float32] */;
  %893 = sin(%891) /* ty=Tensor[(16, 12, 15), float32] */;
  (%892, %893)
}

def @func_7351(%var_7329: Tensor[(1, 15, 6), float32]) -> (Tensor[(1, 15, 6), float32],) {
  %894 = cast(%var_7329, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
  %895 = log2(%894) /* ty=Tensor[(1, 15, 6), float32] */;
  (%895,)
}

def @func_10087() -> (Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), int16]) {
  %896 = @func_7093() /* ty=(Tensor[(1440), int32], Tensor[(6, 9, 11), int16], Tensor[(13, 10), uint32], Tensor[(112), int32]) */;
  %897 = @func_7983() /* ty=Tensor[(6, 9, 11), float32] */;
  %898 = %896.1;
  (%897, %898)
}

def @func_4974(%var_4954: Tensor[(1, 8, 2), uint16], %var_4955: Tensor[(14, 8, 2), uint16]) -> Tensor[(14, 8, 2), bool] {
  %899 = cast(%var_4954, dtype="bool") /* ty=Tensor[(1, 8, 2), bool] */;
  %900 = cast(%var_4955, dtype="bool") /* ty=Tensor[(14, 8, 2), bool] */;
  less_equal(%899, %900) /* ty=Tensor[(14, 8, 2), bool] */
}

def @func_9309(%var_9293: uint64, %var_9294: Tensor[(16, 4, 11), uint64]) -> (Tensor[(16, 4, 11), bool],) {
  %901 = cast(%var_9293, dtype="bool") /* ty=bool */;
  %902 = cast(%var_9294, dtype="bool") /* ty=Tensor[(16, 4, 11), bool] */;
  %903 = greater_equal(%901, %902) /* ty=Tensor[(16, 4, 11), bool] */;
  (%903,)
}

def @func_4118() -> Tensor[(3, 2, 9), float64] {
  %904 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %905 = %904.0;
  %906 = cast(%905, dtype="float64") /* ty=Tensor[(3, 2, 9), float64] */;
  sigmoid(%906) /* ty=Tensor[(3, 2, 9), float64] */
}

def @func_8635(%var_8632: Tensor[(12, 1), float32]) -> (Tensor[(12, 1), float32],) {
  %907 = cast(%var_8632, dtype="float32") /* ty=Tensor[(12, 1), float32] */;
  %908 = asin(%907) /* ty=Tensor[(12, 1), float32] */;
  (%908,)
}

def @func_7584() -> Tensor[(6, 9, 11), float32] {
  %909 = @func_5666() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %909.0
}

def @func_8747() -> (Tensor[(3, 2, 9), float32],) {
  %910 = @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */;
  %911 = %910.1;
  (%911,)
}

def @func_5065() -> (Tensor[(6, 9, 11), int16],) {
  %912 = @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */;
  %913 = %912.0;
  (%913,)
}

def @func_6708() -> (Tensor[(6, 9, 11), float32], Tensor[(3, 2, 9), float32]) {
  %914 = @func_5338() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %915 = @func_5710() /* ty=Tensor[(6, 9, 11), float32] */;
  %916 = %914.0;
  (%915, %916)
}

def @func_7925() -> Tensor[(6, 9, 11), float64] {
  %917 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %917.0
}

def @func_5093() -> (Tensor[(6, 9, 11), float32], Tensor[(8, 7, 2), int32], Tensor[(1440), int32]) {
  %918 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %919 = cast(meta[relay.Constant][60] /* ty=Tensor[(1440), int32] */, dtype="int32") /* ty=Tensor[(1440), int32] */;
  %920 = cast(meta[relay.Constant][60] /* ty=Tensor[(1440), int32] */, dtype="int32") /* ty=Tensor[(1440), int32] */;
  %921 = reshape(%919, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
  %922 = reshape(%920, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
  %923 = @func_3578(%921, %922) /* ty=(Tensor[(12, 8, 15), int32], Tensor[(12, 8, 15), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %924 = %918.0;
  %925 = %923.2;
  (%924, %925, meta[relay.Constant][60] /* ty=Tensor[(1440), int32] */)
}

def @func_6203() -> (Tensor[(6, 9, 11), float32],) {
  %926 = @func_5914() /* ty=Tensor[(6, 9, 11), float32] */;
  (%926,)
}

def @main(%var_10839: Tensor[(2, 9, 12), float64]) -> (Tensor[(1440), int32], Tensor[(2, 9, 12), float64]) {
  %927 = cast(%var_10839, dtype="float64") /* ty=Tensor[(2, 9, 12), float64] */;
  %928 = cosh(%927) /* ty=Tensor[(2, 9, 12), float64] */;
  %929 = cast(%928, dtype="float64") /* ty=Tensor[(2, 9, 12), float64] */;
  %930 = @func_8777() /* ty=Tensor[(1440), int32] */;
  %931 = atan(%929) /* ty=Tensor[(2, 9, 12), float64] */;
  (%930, %931)
}

def @func_8996() -> (Tensor[(6, 9, 11), int16],) {
  %932 = @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */;
  %933 = %932.0;
  (%933,)
}

def @func_7298() -> Tensor[(10, 7, 10), float32] {
  %934 = cast(meta[relay.Constant][61] /* ty=Tensor[(10, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 7, 10), float32] */;
  sin(%934) /* ty=Tensor[(10, 7, 10), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7394() -> Tensor[(1440), int32] {
  %1 = fn () -> Tensor[(1440), int32] {
    %0 = @func_6554() /* ty=(Tensor[(1440), int32],) */;
    %0.0
  };
  %1() /* ty=Tensor[(1440), int32] */
}

def @func_8493() -> Tensor[(3, 2, 9), bool] {
  @func_8491() /* ty=Tensor[(3, 2, 9), bool] */
}

def @func_9101() -> (Tensor[(112), int32], Tensor[(3, 2, 9), float64]) {
  @func_9099() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float64]) */
}

def @func_7647() -> Tensor[(6, 9, 11), float32] {
  %3 = fn () -> Tensor[(6, 9, 11), float32] {
    %2 = @func_5761() /* ty=(Tensor[(6, 9, 11), float32],) */;
    %2.0
  };
  %3() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_4016() -> (Tensor[(3, 2, 9), float32],) {
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 2, 9), float32] */;
  %5 = asinh(%4) /* ty=Tensor[(3, 2, 9), float32] */;
  (%5,)
}

def @func_8779() -> Tensor[(1440), int32] {
  @func_8777() /* ty=Tensor[(1440), int32] */
}

def @func_4161() -> (Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) {
  %10 = fn () -> (Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) {
    %6 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
    %7 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
    %8 = %6.0;
    %9 = %7.0;
    (%8, %9)
  };
  %10() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */
}

def @func_9309(%var_9293: uint64, %var_9294: Tensor[(16, 4, 11), uint64]) -> (Tensor[(16, 4, 11), bool],) {
  %11 = cast(%var_9293, dtype="bool") /* ty=bool */;
  %12 = cast(%var_9294, dtype="bool") /* ty=Tensor[(16, 4, 11), bool] */;
  %13 = greater_equal(%11, %12) /* ty=Tensor[(16, 4, 11), bool] */;
  (%13,)
}

def @func_7873() -> (Tensor[(6, 9, 11), float64],) {
  %14 = @func_4684() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %15 = %14.0;
  (%15,)
}

def @func_9554() -> (Tensor[(3, 2, 9), float32], Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), float64], Tensor[(840), float32], Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), int16], Tensor[(6, 9, 11), bool]) {
  %16 = @func_7856() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %17 = %16.0;
  %18 = cast(%17, dtype="float32") /* ty=Tensor[(3, 2, 9), float32] */;
  %19 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %20 = @func_8295() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(840), float32]) */;
  %21 = @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */;
  %22 = sqrt(%18) /* ty=Tensor[(3, 2, 9), float32] */;
  %23 = cast(%22, dtype="float32") /* ty=Tensor[(3, 2, 9), float32] */;
  %24 = reshape(%23, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), float32] */;
  %25 = @func_6323(%24) /* ty=(Tensor[(1440), int32], Tensor[(3, 2, 9), int16]) */;
  %26 = @func_3666() /* ty=(Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
  %27 = @func_4944() /* ty=Tensor[(6, 9, 11), float32] */;
  %28 = %19.0;
  %29 = %20.1;
  %30 = %21.0;
  %31 = %25.1;
  %32 = %26.0;
  (%22, %27, %28, %29, %30, %31, %32)
}

def @func_9988() -> Tensor[(6, 9, 11), float32] {
  @func_9986() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_4946() -> Tensor[(6, 9, 11), float32] {
  @func_4944() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_8120(%var_8117: Tensor[(15, 11, 8), int8], %var_8118: Tensor[(15, 11, 8), int8], %var_8119: Tensor[(112), int32]) -> (Tensor[(15, 11, 8), int8], Tensor[(6, 9, 11), float64], Tensor[(28, 4), bool], Tensor[(28, 4), float64], Tensor[(15, 11, 8), float64]) {
  @func_8115(%var_8117, %var_8118, %var_8119) /* ty=(Tensor[(15, 11, 8), int8], Tensor[(6, 9, 11), float64], Tensor[(28, 4), bool], Tensor[(28, 4), float64], Tensor[(15, 11, 8), float64]) */
}

def @func_5340() -> (Tensor[(3, 2, 9), float32],) {
  @func_5338() /* ty=(Tensor[(3, 2, 9), float32],) */
}

def @func_8622(%var_8620: Tensor[(96, 2), uint32]) -> Tensor[(96, 2), bool] {
  @func_8619(%var_8620) /* ty=Tensor[(96, 2), bool] */
}

def @func_7354(%var_7352: Tensor[(1, 15, 6), float32]) -> (Tensor[(1, 15, 6), float32],) {
  @func_7351(%var_7352) /* ty=(Tensor[(1, 15, 6), float32],) */
}

def @func_9622() -> Tensor[(6, 9, 11), float64] {
  %33 = @func_5788() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float64], Tensor[(112), int32], Tensor[(96, 2), uint32], Tensor[(112), int32]) */;
  %33.1
}

def @func_4545(%var_4517: Tensor[(3, 2, 9), float32], %var_4536: Tensor[(12, 8, 15), float64]) -> (Tensor[(3, 2, 9), int8], Tensor[(26, 5), uint32], Tensor[(1440), int32], Tensor[(12, 8, 15), int64]) {
  %34 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %35 = %34.0;
  %36 = cast(%var_4517, dtype="int8") /* ty=Tensor[(3, 2, 9), int8] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="int8") /* ty=Tensor[(3, 2, 9), int8] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %40 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %41 = cast(meta[relay.Constant][1] /* ty=Tensor[(1440), int32] */, dtype="int32") /* ty=Tensor[(1440), int32] */;
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(1440), int32] */, dtype="int32") /* ty=Tensor[(1440), int32] */;
  %43 = reshape(%41, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
  %44 = reshape(%42, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
  %45 = @func_3578(%43, %44) /* ty=(Tensor[(12, 8, 15), int32], Tensor[(12, 8, 15), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %46 = %45.1;
  %47 = cast(%var_4536, dtype="int64") /* ty=Tensor[(12, 8, 15), int64] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="int64") /* ty=Tensor[(12, 8, 15), int64] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %51 = logical_xor(%38, %39) /* ty=Tensor[(3, 2, 9), int8] */;
  %52 = %40.1;
  %53 = bitwise_xor(%49, %50) /* ty=Tensor[(12, 8, 15), int64] */;
  (%51, %52, meta[relay.Constant][1] /* ty=Tensor[(1440), int32] */, %53)
}

def @func_1558(%var_1556: Tensor[(16, 5, 13), uint16], %var_1557: Tensor[(16, 5, 13), uint16]) -> Tensor[(16, 5, 13), bool] {
  @func_1554(%var_1556, %var_1557) /* ty=Tensor[(16, 5, 13), bool] */
}

def @func_3242(%var_3237: Tensor[(12, 1, 10), float64], %var_3238: Tensor[(12, 10, 10), float64], %var_3239: Tensor[(512), float32], %var_3240: Tensor[(80, 1), float64], %var_3241: Tensor[(640), float64]) -> (Tensor[(12, 10, 10), bool], Tensor[(8, 7, 2), int32], uint32, Tensor[(512), float32], Tensor[(80, 1), float64], Tensor[(640), float64], Tensor[(11, 3, 15), float64], Tensor[(495), float64], Tensor[(2, 56), bool], Tensor[(11, 3, 15), float64]) {
  %83 = fn (%var_3155: Tensor[(12, 1, 10), float64], %var_3156: Tensor[(12, 10, 10), float64], %var_3200: Tensor[(512), float32], %var_3201: Tensor[(80, 1), float64], %var_3202: Tensor[(640), float64]) -> (Tensor[(12, 10, 10), bool], Tensor[(8, 7, 2), int32], uint32, Tensor[(512), float32], Tensor[(80, 1), float64], Tensor[(640), float64], Tensor[(11, 3, 15), float64], Tensor[(495), float64], Tensor[(2, 56), bool], Tensor[(11, 3, 15), float64]) {
    %54 = cast(%var_3155, dtype="bool") /* ty=Tensor[(12, 1, 10), bool] */;
    %55 = cast(%var_3156, dtype="bool") /* ty=Tensor[(12, 10, 10), bool] */;
    %56 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 56), int32] */, dtype="int32") /* ty=Tensor[(2, 56), int32] */;
    %57 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 56), int32] */, dtype="int32") /* ty=Tensor[(2, 56), int32] */;
    %58 = reshape(%56, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
    %59 = reshape(%57, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
    %60 = cast(%var_3200, dtype="float32") /* ty=Tensor[(512), float32] */;
    %61 = cast(%var_3201, dtype="float64") /* ty=Tensor[(80, 1), float64] */;
    %62 = cast(%var_3202, dtype="float64") /* ty=Tensor[(640), float64] */;
    %63 = reshape(%60, newshape=[4, 8, 16]) /* ty=Tensor[(4, 8, 16), float32] */;
    %64 = reshape(%61, newshape=[80]) /* ty=Tensor[(80), float64] */;
    %65 = reshape(%62, newshape=[16, 8, 5]) /* ty=Tensor[(16, 8, 5), float64] */;
    %66 = @func_1480(%63, %64, %65) /* ty=(Tensor[(4, 8, 16), float32], Tensor[(80), float64], Tensor[(16, 8, 5), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) */;
    %67 = cast(meta[relay.Constant][3] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
    %68 = reshape(%67, newshape=[11, 3, 15]) /* ty=Tensor[(11, 3, 15), float64] */;
    %69 = @func_1898(%68) /* ty=(Tensor[(11, 3, 15), float64],) */;
    %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 56), int32] */, dtype="bool") /* ty=Tensor[(2, 56), bool] */;
    %71 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(2, 56), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %72 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 56), int32] */, dtype="bool") /* ty=Tensor[(2, 56), bool] */;
    %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %74 = cast(meta[relay.Constant][3] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
    %75 = reshape(%74, newshape=[11, 3, 15]) /* ty=Tensor[(11, 3, 15), float64] */;
    %76 = @func_1898(%75) /* ty=(Tensor[(11, 3, 15), float64],) */;
    %77 = equal(%54, %55) /* ty=Tensor[(12, 10, 10), bool] */;
    %78 = @func_543(%58, %59) /* ty=Tensor[(8, 7, 2), int32] */;
    %79 = %66.4;
    %80 = %69.0;
    %81 = greater(%72, %73) /* ty=Tensor[(2, 56), bool] */;
    %82 = %76.0;
    (%77, %78, %79, %var_3200, %var_3201, %var_3202, %80, meta[relay.Constant][3] /* ty=Tensor[(495), float64] */, %81, %82)
  };
  %83(%var_3237, %var_3238, %var_3239, %var_3240, %var_3241) /* ty=(Tensor[(12, 10, 10), bool], Tensor[(8, 7, 2), int32], uint32, Tensor[(512), float32], Tensor[(80, 1), float64], Tensor[(640), float64], Tensor[(11, 3, 15), float64], Tensor[(495), float64], Tensor[(2, 56), bool], Tensor[(11, 3, 15), float64]) */
}

def @func_4928() -> (Tensor[(6, 9, 11), int16],) {
  %84 = @func_4481() /* ty=Tensor[(6, 9, 11), int16] */;
  (%84,)
}

def @func_8491() -> Tensor[(3, 2, 9), bool] {
  %85 = @func_6109() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %86 = %85.0;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(3, 2, 9), float64] */;
  %88 = sinh(%87) /* ty=Tensor[(3, 2, 9), float64] */;
  %89 = cast(%86, dtype="bool") /* ty=Tensor[(3, 2, 9), bool] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%88, dtype="bool") /* ty=Tensor[(3, 2, 9), bool] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%91, %92) /* ty=Tensor[(3, 2, 9), bool] */
}

def @func_5817() -> (Tensor[(112), int32], Tensor[(3, 2, 9), float32]) {
  %93 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %94 = @func_5338() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %95 = %93.3;
  %96 = %94.0;
  (%95, %96)
}

def @func_5629(%var_5627: Tensor[(4, 14, 15), float32]) -> (Tensor[(4, 14, 15), float32], Tensor[(6, 9, 11), float64]) {
  @func_5626(%var_5627) /* ty=(Tensor[(4, 14, 15), float32], Tensor[(6, 9, 11), float64]) */
}

def @func_6554() -> (Tensor[(1440), int32],) {
  %97 = @func_5280() /* ty=(Tensor[(1440), int32], Tensor[(6, 9, 11), float32]) */;
  %98 = %97.0;
  (%98,)
}

def @func_7761(%var_7759: Tensor[(3, 2, 9), float32]) -> Tensor[(3, 2, 9), int8] {
  @func_7758(%var_7759) /* ty=Tensor[(3, 2, 9), int8] */
}

def @func_5914() -> Tensor[(6, 9, 11), float32] {
  %99 = @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */;
  %100 = %99.0;
  %101 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 9, 11), float64] */, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%103, %104) /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_10624() -> Tensor[(96, 2), uint64] {
  %106 = fn () -> Tensor[(96, 2), uint64] {
    %105 = @func_6778() /* ty=(Tensor[(96, 2), uint64],) */;
    %105.0
  };
  %106() /* ty=Tensor[(96, 2), uint64] */
}

def @func_4678(%var_4676: Tensor[(80, 1), float64]) -> (Tensor[(5, 6, 2), float64], Tensor[(4, 28), int32], Tensor[(3, 2, 9), float32], Tensor[(16, 8, 5), float64], Tensor[(80, 1), float64], Tensor[(6, 9, 11), int32], Tensor[(3, 2, 9), float64]) {
  @func_4675(%var_4676) /* ty=(Tensor[(5, 6, 2), float64], Tensor[(4, 28), int32], Tensor[(3, 2, 9), float32], Tensor[(16, 8, 5), float64], Tensor[(80, 1), float64], Tensor[(6, 9, 11), int32], Tensor[(3, 2, 9), float64]) */
}

def @func_8411() -> (Tensor[(6, 9, 11), float32], Tensor[(1440), int32], Tensor[(26, 5), uint32]) {
  @func_8409() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(1440), int32], Tensor[(26, 5), uint32]) */
}

def @func_5094() -> (Tensor[(6, 9, 11), float32], Tensor[(8, 7, 2), int32], Tensor[(1440), int32]) {
  %115 = fn () -> (Tensor[(6, 9, 11), float32], Tensor[(8, 7, 2), int32], Tensor[(1440), int32]) {
    %107 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
    %108 = cast(meta[relay.Constant][6] /* ty=Tensor[(1440), int32] */, dtype="int32") /* ty=Tensor[(1440), int32] */;
    %109 = cast(meta[relay.Constant][6] /* ty=Tensor[(1440), int32] */, dtype="int32") /* ty=Tensor[(1440), int32] */;
    %110 = reshape(%108, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
    %111 = reshape(%109, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
    %112 = @func_3578(%110, %111) /* ty=(Tensor[(12, 8, 15), int32], Tensor[(12, 8, 15), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
    %113 = %107.0;
    %114 = %112.2;
    (%113, %114, meta[relay.Constant][6] /* ty=Tensor[(1440), int32] */)
  };
  %115() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(8, 7, 2), int32], Tensor[(1440), int32]) */
}

def @func_520(%var_500: uint32, %var_501: Tensor[(1, 13, 10), uint32]) -> (Tensor[(1, 13, 10), bool],) {
  %116 = cast(%var_500, dtype="bool") /* ty=bool */;
  %117 = cast(%var_501, dtype="bool") /* ty=Tensor[(1, 13, 10), bool] */;
  %118 = greater_equal(%116, %117) /* ty=Tensor[(1, 13, 10), bool] */;
  (%118,)
}

def @func_6618() -> (Tensor[(192), uint32],) {
  %121 = fn () -> (Tensor[(192), uint32],) {
    %119 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
    %120 = %119.2;
    (%120,)
  };
  %121() /* ty=(Tensor[(192), uint32],) */
}

def @func_7983() -> Tensor[(6, 9, 11), float32] {
  %122 = @func_7621() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(10, 7, 12), float32], Tensor[(840), float32], Tensor[(3, 2, 9), float32]) */;
  %123 = %122.0;
  %124 = cast(%123, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  asinh(%124) /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_10147() -> (Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) {
  %129 = fn () -> (Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) {
    %125 = @func_8996() /* ty=(Tensor[(6, 9, 11), int16],) */;
    %126 = @func_9137() /* ty=(Tensor[(3, 2, 9), float32],) */;
    %127 = %125.0;
    %128 = %126.0;
    (%127, %128)
  };
  %129() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) */
}

def @func_642(%var_640: Tensor[(10, 7, 12), float32]) -> Tensor[(10, 7, 12), float32] {
  @func_639(%var_640) /* ty=Tensor[(10, 7, 12), float32] */
}

def @func_7758(%var_7748: Tensor[(3, 2, 9), float32]) -> Tensor[(3, 2, 9), int8] {
  %130 = @func_6109() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %131 = %130.0;
  %132 = cast(%var_7748, dtype="int8") /* ty=Tensor[(3, 2, 9), int8] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="int8") /* ty=Tensor[(3, 2, 9), int8] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  maximum(%134, %135) /* ty=Tensor[(3, 2, 9), int8] */
}

def @func_4257() -> Tensor[(6, 9, 11), float32] {
  %136 = fn () -> Tensor[(6, 9, 11), float32] {
    @func_3523() /* ty=Tensor[(6, 9, 11), float32] */
  };
  %136() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_7029(%var_7005: Tensor[(192), uint32], %var_7006: Tensor[(112), int32], %var_7018: Tensor[(80), float64]) -> (Tensor[(15, 8, 13), float32], Tensor[(4, 12, 4), float64], Tensor[(192), uint32], Tensor[(112), int32], Tensor[(192), uint32], Tensor[(16, 8, 5), float64], Tensor[(80), float64]) {
  %137 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 8, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 8, 13), float32] */;
  %138 = cast(%var_7005, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %139 = cast(%var_7005, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %140 = cast(%var_7006, dtype="int32") /* ty=Tensor[(112), int32] */;
  %141 = reshape(%138, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %142 = reshape(%139, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
  %143 = reshape(%140, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %144 = @func_2540(%141, %142, %143) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %145 = cast(%var_7006, dtype="int32") /* ty=Tensor[(112), int32] */;
  %146 = cast(%var_7005, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %147 = reshape(%145, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %148 = reshape(%146, newshape=[192]) /* ty=Tensor[(192), uint32] */;
  %149 = @func_4249(%147, %148) /* ty=(Tensor[(3, 2, 9), float64], Tensor[(112), int32], Tensor[(8, 7, 2), int32], Tensor[(192), uint32], Tensor[(5, 6, 2), float32], Tensor[(8, 7, 2), int32], Tensor[(3, 2, 9), float64], Tensor[(3, 2, 9), float32]) */;
  %150 = cast(%var_7018, dtype="float64") /* ty=Tensor[(80), float64] */;
  %151 = reshape(%150, newshape=[16, 1, 5]) /* ty=Tensor[(16, 1, 5), float64] */;
  %152 = @func_1427(%151) /* ty=(Tensor[(16, 8, 5), float64],) */;
  %153 = atan(%137) /* ty=Tensor[(15, 8, 13), float32] */;
  %154 = %144.4;
  %155 = %149.3;
  %156 = %152.0;
  (%153, %154, %var_7005, %var_7006, %155, %156, %var_7018)
}

def @func_8996() -> (Tensor[(6, 9, 11), int16],) {
  %157 = @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */;
  %158 = %157.0;
  (%158,)
}

def @func_8637(%var_8636: Tensor[(12, 1), float32]) -> (Tensor[(12, 1), float32],) {
  %161 = fn (%var_8632: Tensor[(12, 1), float32]) -> (Tensor[(12, 1), float32],) {
    %159 = cast(%var_8632, dtype="float32") /* ty=Tensor[(12, 1), float32] */;
    %160 = asin(%159) /* ty=Tensor[(12, 1), float32] */;
    (%160,)
  };
  %161(%var_8636) /* ty=(Tensor[(12, 1), float32],) */
}

def @func_1901(%var_1899: Tensor[(11, 3, 15), float64]) -> (Tensor[(11, 3, 15), float64],) {
  @func_1898(%var_1899) /* ty=(Tensor[(11, 3, 15), float64],) */
}

def @func_5916() -> Tensor[(6, 9, 11), float32] {
  @func_5914() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_9207() -> (Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32], Tensor[(112), int32]) {
  %162 = @func_7575() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) */;
  %163 = @func_8549() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float64]) */;
  %164 = @func_4481() /* ty=Tensor[(6, 9, 11), int16] */;
  %165 = %162.1;
  %166 = %163.0;
  (%164, %165, %166)
}

def @func_9335() -> (Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), float32]) {
  %169 = fn () -> (Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), float32]) {
    %167 = @func_4944() /* ty=Tensor[(6, 9, 11), float32] */;
    %168 = @func_7584() /* ty=Tensor[(6, 9, 11), float32] */;
    (%167, %168)
  };
  %169() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), float32]) */
}

def @func_4898(%var_4896: Tensor[(594), float32], %var_4897: Tensor[(594), float32]) -> (Tensor[(3, 2, 9), float32], Tensor[(4, 12, 4), float64], Tensor[(112), int32], Tensor[(40, 2), float64], Tensor[(12, 8, 15), int32], Tensor[(1440), int32], Tensor[(26, 5), uint32], Tensor[(594), uint8]) {
  @func_4894(%var_4896, %var_4897) /* ty=(Tensor[(3, 2, 9), float32], Tensor[(4, 12, 4), float64], Tensor[(112), int32], Tensor[(40, 2), float64], Tensor[(12, 8, 15), int32], Tensor[(1440), int32], Tensor[(26, 5), uint32], Tensor[(594), uint8]) */
}

def @func_4894(%var_4860: Tensor[(594), float32], %var_4886: Tensor[(594), float32]) -> (Tensor[(3, 2, 9), float32], Tensor[(4, 12, 4), float64], Tensor[(112), int32], Tensor[(40, 2), float64], Tensor[(12, 8, 15), int32], Tensor[(1440), int32], Tensor[(26, 5), uint32], Tensor[(594), uint8]) {
  %170 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %171 = cast(%var_4860, dtype="float32") /* ty=Tensor[(594), float32] */;
  %172 = cast(meta[relay.Constant][8] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %173 = cast(meta[relay.Constant][9] /* ty=Tensor[(40, 2), float64] */, dtype="float64") /* ty=Tensor[(40, 2), float64] */;
  %174 = reshape(%171, newshape=[6, 9, 11]) /* ty=Tensor[(6, 9, 11), float32] */;
  %175 = reshape(%172, newshape=[2, 56]) /* ty=Tensor[(2, 56), int32] */;
  %176 = reshape(%173, newshape=[80, 1]) /* ty=Tensor[(80, 1), float64] */;
  %177 = @func_4005(%174, %175, %176) /* ty=(Tensor[(6, 9, 11), float64], Tensor[(4, 12, 4), float64], Tensor[(48, 4), uint32], Tensor[(2, 56), int32], Tensor[(16, 8, 5), float64], Tensor[(80, 1), float64]) */;
  %178 = cast(meta[relay.Constant][10] /* ty=Tensor[(1440), int32] */, dtype="int32") /* ty=Tensor[(1440), int32] */;
  %179 = cast(meta[relay.Constant][10] /* ty=Tensor[(1440), int32] */, dtype="int32") /* ty=Tensor[(1440), int32] */;
  %180 = reshape(%178, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
  %181 = reshape(%179, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
  %182 = @func_3578(%180, %181) /* ty=(Tensor[(12, 8, 15), int32], Tensor[(12, 8, 15), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
  %183 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %184 = cast(%var_4886, dtype="uint8") /* ty=Tensor[(594), uint8] */;
  %185 = shape_of(%var_4860, dtype="int32") /* ty=Tensor[(1), int32] */;
  %186 = cast(%var_4860, dtype="uint8") /* ty=Tensor[(594), uint8] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %188 = %170.1;
  %189 = %177.1;
  %190 = %182.0;
  %191 = %183.1;
  %192 = logical_xor(%186, %187) /* ty=Tensor[(594), uint8] */;
  (%188, %189, meta[relay.Constant][8] /* ty=Tensor[(112), int32] */, meta[relay.Constant][9] /* ty=Tensor[(40, 2), float64] */, %190, meta[relay.Constant][10] /* ty=Tensor[(1440), int32] */, %191, %192)
}

def @func_4009(%var_4006: Tensor[(6, 9, 11), float32], %var_4007: Tensor[(2, 56), int32], %var_4008: Tensor[(80, 1), float64]) -> (Tensor[(6, 9, 11), float64], Tensor[(4, 12, 4), float64], Tensor[(48, 4), uint32], Tensor[(2, 56), int32], Tensor[(16, 8, 5), float64], Tensor[(80, 1), float64]) {
  %211 = fn (%var_3980: Tensor[(6, 9, 11), float32], %var_3996: Tensor[(2, 56), int32], %var_4003: Tensor[(80, 1), float64]) -> (Tensor[(6, 9, 11), float64], Tensor[(4, 12, 4), float64], Tensor[(48, 4), uint32], Tensor[(2, 56), int32], Tensor[(16, 8, 5), float64], Tensor[(80, 1), float64]) {
    %193 = @func_3523() /* ty=Tensor[(6, 9, 11), float32] */;
    %194 = cast(%var_3980, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
    %196 = cast(%193, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %198 = cast(meta[relay.Constant][11] /* ty=Tensor[(48, 4), uint32] */, dtype="uint32") /* ty=Tensor[(48, 4), uint32] */;
    %199 = cast(meta[relay.Constant][11] /* ty=Tensor[(48, 4), uint32] */, dtype="uint32") /* ty=Tensor[(48, 4), uint32] */;
    %200 = cast(%var_3996, dtype="int32") /* ty=Tensor[(2, 56), int32] */;
    %201 = reshape(%198, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
    %202 = reshape(%199, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
    %203 = reshape(%200, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %204 = @func_2540(%201, %202, %203) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
    %205 = cast(%var_4003, dtype="float64") /* ty=Tensor[(80, 1), float64] */;
    %206 = reshape(%205, newshape=[16, 1, 5]) /* ty=Tensor[(16, 1, 5), float64] */;
    %207 = @func_1427(%206) /* ty=(Tensor[(16, 8, 5), float64],) */;
    %208 = floor_mod(%196, %197) /* ty=Tensor[(6, 9, 11), float64] */;
    %209 = %204.4;
    %210 = %207.0;
    (%208, %209, meta[relay.Constant][11] /* ty=Tensor[(48, 4), uint32] */, %var_3996, %210, %var_4003)
  };
  %211(%var_4006, %var_4007, %var_4008) /* ty=(Tensor[(6, 9, 11), float64], Tensor[(4, 12, 4), float64], Tensor[(48, 4), uint32], Tensor[(2, 56), int32], Tensor[(16, 8, 5), float64], Tensor[(80, 1), float64]) */
}

def @func_9083() -> (Tensor[(6, 9, 11), float64],) {
  %212 = @func_8996() /* ty=(Tensor[(6, 9, 11), int16],) */;
  %213 = %212.0;
  %214 = cast(%213, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %215 = asin(%214) /* ty=Tensor[(6, 9, 11), float64] */;
  (%215,)
}

def @func_3843() -> (Tensor[(6, 9, 11), float64],) {
  %218 = fn () -> (Tensor[(6, 9, 11), float64],) {
    %216 = @func_3666() /* ty=(Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
    %217 = %216.1;
    (%217,)
  };
  %218() /* ty=(Tensor[(6, 9, 11), float64],) */
}

def @func_10533(%var_10531: Tensor[(14, 7, 1), float64], %var_10532: Tensor[(14, 7, 7), float64]) -> Tensor[(14, 7, 7), float64] {
  %221 = fn (%var_10522: Tensor[(14, 7, 1), float64], %var_10523: Tensor[(14, 7, 7), float64]) -> Tensor[(14, 7, 7), float64] {
    %219 = cast(%var_10522, dtype="float64") /* ty=Tensor[(14, 7, 1), float64] */;
    %220 = cast(%var_10523, dtype="float64") /* ty=Tensor[(14, 7, 7), float64] */;
    subtract(%219, %220) /* ty=Tensor[(14, 7, 7), float64] */
  };
  %221(%var_10531, %var_10532) /* ty=Tensor[(14, 7, 7), float64] */
}

def @func_4944() -> Tensor[(6, 9, 11), float32] {
  @func_4256() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_10412() -> (Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), float64]) {
  %222 = @func_7584() /* ty=Tensor[(6, 9, 11), float32] */;
  %223 = @func_7925() /* ty=Tensor[(6, 9, 11), float64] */;
  (%222, %223)
}

def @func_4831() -> Tensor[(6, 9, 11), int16] {
  @func_4829() /* ty=Tensor[(6, 9, 11), int16] */
}

def @func_6957() -> (Tensor[(3, 2, 9), float32],) {
  %224 = @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */;
  %225 = %224.1;
  (%225,)
}

def @func_5338() -> (Tensor[(3, 2, 9), float32],) {
  %226 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %227 = %226.0;
  (%227,)
}

def @func_6416(%var_6413: Tensor[(6, 9, 11), float32], %var_6414: Tensor[(16), uint16], %var_6415: uint32) -> (Tensor[(6, 9, 11), int16], Tensor[(112), int32], Tensor[(14, 8, 2), bool], Tensor[(16), uint16], Tensor[(224), uint16], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32], Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) {
  %251 = fn (%var_6339: Tensor[(6, 9, 11), float32], %var_6373: Tensor[(16), uint16], %var_6380: uint32) -> (Tensor[(6, 9, 11), int16], Tensor[(112), int32], Tensor[(14, 8, 2), bool], Tensor[(16), uint16], Tensor[(224), uint16], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32], Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) {
    %228 = @func_5710() /* ty=Tensor[(6, 9, 11), float32] */;
    %229 = cast(%var_6339, dtype="int16") /* ty=Tensor[(6, 9, 11), int16] */;
    %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
    %231 = cast(%228, dtype="int16") /* ty=Tensor[(6, 9, 11), int16] */;
    %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %233 = @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */;
    %234 = cast(%var_6373, dtype="uint16") /* ty=Tensor[(16), uint16] */;
    %235 = cast(meta[relay.Constant][12] /* ty=Tensor[(224), uint16] */, dtype="uint16") /* ty=Tensor[(224), uint16] */;
    %236 = reshape(%234, newshape=[1, 8, 2]) /* ty=Tensor[(1, 8, 2), uint16] */;
    %237 = reshape(%235, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), uint16] */;
    %238 = cast(%var_6380, dtype="uint32") /* ty=uint32 */;
    %239 = cast(meta[relay.Constant][13] /* ty=Tensor[(130), uint32] */, dtype="uint32") /* ty=Tensor[(130), uint32] */;
    %240 = reshape(%238, newshape=[]) /* ty=uint32 */;
    %241 = reshape(%239, newshape=[1, 13, 10]) /* ty=Tensor[(1, 13, 10), uint32] */;
    %242 = @func_520(%240, %241) /* ty=(Tensor[(1, 13, 10), bool],) */;
    %243 = @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */;
    %244 = @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */;
    %245 = bitwise_or(%231, %232) /* ty=Tensor[(6, 9, 11), int16] */;
    %246 = %233.0;
    %247 = @func_4974(%236, %237) /* ty=Tensor[(14, 8, 2), bool] */;
    %248 = %242.0;
    %249 = %243.1;
    %250 = %244.1;
    (%245, %246, %247, %var_6373, meta[relay.Constant][12] /* ty=Tensor[(224), uint16] */, %248, %var_6380, meta[relay.Constant][13] /* ty=Tensor[(130), uint32] */, %249, %250)
  };
  %251(%var_6413, %var_6414, %var_6415) /* ty=(Tensor[(6, 9, 11), int16], Tensor[(112), int32], Tensor[(14, 8, 2), bool], Tensor[(16), uint16], Tensor[(224), uint16], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32], Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */
}

def @func_5789() -> (Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float64], Tensor[(112), int32], Tensor[(96, 2), uint32], Tensor[(112), int32]) {
  %264 = fn () -> (Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float64], Tensor[(112), int32], Tensor[(96, 2), uint32], Tensor[(112), int32]) {
    %252 = @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */;
    %253 = @func_3666() /* ty=(Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
    %254 = cast(meta[relay.Constant][14] /* ty=Tensor[(96, 2), uint32] */, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
    %255 = cast(meta[relay.Constant][14] /* ty=Tensor[(96, 2), uint32] */, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
    %256 = cast(meta[relay.Constant][15] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %257 = reshape(%254, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
    %258 = reshape(%255, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
    %259 = reshape(%256, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %260 = @func_2540(%257, %258, %259) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
    %261 = %252.0;
    %262 = %253.1;
    %263 = %260.6;
    (%261, %262, %263, meta[relay.Constant][14] /* ty=Tensor[(96, 2), uint32] */, meta[relay.Constant][15] /* ty=Tensor[(112), int32] */)
  };
  %264() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float64], Tensor[(112), int32], Tensor[(96, 2), uint32], Tensor[(112), int32]) */
}

def @func_8160() -> (Tensor[(8, 7, 2), int32],) {
  @func_8158() /* ty=(Tensor[(8, 7, 2), int32],) */
}

def @func_4763() -> Tensor[(26, 5), uint32] {
  %266 = fn () -> Tensor[(26, 5), uint32] {
    %265 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
    %265.1
  };
  %266() /* ty=Tensor[(26, 5), uint32] */
}

def @func_10414() -> (Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), float64]) {
  @func_10412() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), float64]) */
}

def @func_10602() -> (Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), int16]) {
  %273 = fn () -> (Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), int16]) {
    %267 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
    %268 = @func_10087() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), int16]) */;
    %269 = @func_7575() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) */;
    %270 = %267.0;
    %271 = %268.0;
    %272 = %269.0;
    (%270, %271, %272)
  };
  %273() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), int16]) */
}

def @func_8619(%var_8596: Tensor[(96, 2), uint32]) -> Tensor[(96, 2), bool] {
  %274 = @func_5788() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float64], Tensor[(112), int32], Tensor[(96, 2), uint32], Tensor[(112), int32]) */;
  %275 = %274.3;
  %276 = cast(%var_8596, dtype="bool") /* ty=Tensor[(96, 2), bool] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(2), int32] */;
  %278 = cast(%275, dtype="bool") /* ty=Tensor[(96, 2), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  less(%278, %279) /* ty=Tensor[(96, 2), bool] */
}

def @func_8551() -> (Tensor[(112), int32], Tensor[(3, 2, 9), float64]) {
  @func_8549() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float64]) */
}

def @func_7269(%var_7267: Tensor[(198, 3), float32], %var_7268: Tensor[(60, 14), float32]) -> (Tensor[(224), uint16], Tensor[(16), uint16], Tensor[(3, 2, 9), bool], Tensor[(10, 7, 12), float32], Tensor[(60, 14), float32], Tensor[(198, 3), bool], Tensor[(198, 3), bool], Tensor[(198, 3), float64], Tensor[(198, 3), float32]) {
  @func_7265(%var_7267, %var_7268) /* ty=(Tensor[(224), uint16], Tensor[(16), uint16], Tensor[(3, 2, 9), bool], Tensor[(10, 7, 12), float32], Tensor[(60, 14), float32], Tensor[(198, 3), bool], Tensor[(198, 3), bool], Tensor[(198, 3), float64], Tensor[(198, 3), float32]) */
}

def @func_9624() -> Tensor[(6, 9, 11), float64] {
  @func_9622() /* ty=Tensor[(6, 9, 11), float64] */
}

def @func_8998() -> (Tensor[(6, 9, 11), int16],) {
  @func_8996() /* ty=(Tensor[(6, 9, 11), int16],) */
}

def @func_9977() -> (Tensor[(6, 9, 11), float32],) {
  %282 = fn () -> (Tensor[(6, 9, 11), float32],) {
    %280 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
    %281 = %280.0;
    (%281,)
  };
  %282() /* ty=(Tensor[(6, 9, 11), float32],) */
}

def @func_9027() -> (Tensor[(6, 9, 11), float64], Tensor[(15, 14, 13), uint32], Tensor[(2730), uint32]) {
  %290 = fn () -> (Tensor[(6, 9, 11), float64], Tensor[(15, 14, 13), uint32], Tensor[(2730), uint32]) {
    %283 = @func_7873() /* ty=(Tensor[(6, 9, 11), float64],) */;
    %284 = cast(meta[relay.Constant][16] /* ty=Tensor[(2730), uint32] */, dtype="uint32") /* ty=Tensor[(2730), uint32] */;
    %285 = cast(meta[relay.Constant][16] /* ty=Tensor[(2730), uint32] */, dtype="uint32") /* ty=Tensor[(2730), uint32] */;
    %286 = reshape(%284, newshape=[15, 14, 13]) /* ty=Tensor[(15, 14, 13), uint32] */;
    %287 = reshape(%285, newshape=[15, 14, 13]) /* ty=Tensor[(15, 14, 13), uint32] */;
    %288 = %283.0;
    %289 = @func_4275(%286, %287) /* ty=Tensor[(15, 14, 13), uint32] */;
    (%288, %289, meta[relay.Constant][16] /* ty=Tensor[(2730), uint32] */)
  };
  %290() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(15, 14, 13), uint32], Tensor[(2730), uint32]) */
}

def @func_4119() -> Tensor[(3, 2, 9), float64] {
  %294 = fn () -> Tensor[(3, 2, 9), float64] {
    %291 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
    %292 = %291.0;
    %293 = cast(%292, dtype="float64") /* ty=Tensor[(3, 2, 9), float64] */;
    sigmoid(%293) /* ty=Tensor[(3, 2, 9), float64] */
  };
  %294() /* ty=Tensor[(3, 2, 9), float64] */
}

def @func_9845() -> (Tensor[(6, 9, 11), float64], Tensor[(192), uint32]) {
  %298 = fn () -> (Tensor[(6, 9, 11), float64], Tensor[(192), uint32]) {
    %295 = @func_6617() /* ty=(Tensor[(192), uint32],) */;
    %296 = @func_9622() /* ty=Tensor[(6, 9, 11), float64] */;
    %297 = %295.0;
    (%296, %297)
  };
  %298() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(192), uint32]) */
}

def @func_7575() -> (Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) {
  %299 = @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */;
  %300 = @func_4829() /* ty=Tensor[(6, 9, 11), int16] */;
  %301 = %299.1;
  (%300, %301)
}

def @func_10830(%var_10828: int64, %var_10829: Tensor[(10, 7, 6), int64]) -> Tensor[(10, 7, 6), int64] {
  @func_10826(%var_10828, %var_10829) /* ty=Tensor[(10, 7, 6), int64] */
}

def @func_2740(%var_2732: Tensor[(16, 12, 15), float32]) -> (Tensor[(16, 12, 15), float32], Tensor[(16, 12, 15), float32]) {
  %302 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 15), float32] */;
  %303 = shape_of(%var_2732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%var_2732, dtype="float32") /* ty=Tensor[(16, 12, 15), float32] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %306 = cast(%var_2732, dtype="float32") /* ty=Tensor[(16, 12, 15), float32] */;
  %307 = divide(%304, %305) /* ty=Tensor[(16, 12, 15), float32] */;
  %308 = sin(%306) /* ty=Tensor[(16, 12, 15), float32] */;
  (%307, %308)
}

def @func_7858() -> (Tensor[(3, 2, 9), float32],) {
  @func_7856() /* ty=(Tensor[(3, 2, 9), float32],) */
}

def @func_7891() -> Tensor[(112), int32] {
  %309 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %309.3
}

def @func_8777() -> Tensor[(1440), int32] {
  %310 = @func_6554() /* ty=(Tensor[(1440), int32],) */;
  %310.0
}

def @func_9085() -> (Tensor[(6, 9, 11), float64],) {
  @func_9083() /* ty=(Tensor[(6, 9, 11), float64],) */
}

def @func_10321(%var_10183: Tensor[(192), uint32], %var_10184: Tensor[(112), int32], %var_10185: Tensor[(80), float64], %var_10306: Tensor[(16), uint16], %var_10307: Tensor[(224), uint16], %var_10317: Tensor[(840), float32]) -> (Tensor[(192), uint32], Tensor[(192), uint32], Tensor[(80), float64], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32], Tensor[(12), float32], Tensor[(26, 5), uint32], Tensor[(12, 112), bool], Tensor[(6, 9, 11), float32], Tensor[(14, 8, 2), bool], Tensor[(16), uint16], Tensor[(224), uint16], Tensor[(10, 7, 12), float32], Tensor[(840), float32]) {
  %311 = cast(%var_10183, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %312 = cast(%var_10184, dtype="int32") /* ty=Tensor[(112), int32] */;
  %313 = cast(%var_10185, dtype="float64") /* ty=Tensor[(80), float64] */;
  %314 = reshape(%311, newshape=[192]) /* ty=Tensor[(192), uint32] */;
  %315 = reshape(%312, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %316 = reshape(%313, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %317 = @func_7029(%314, %315, %316) /* ty=(Tensor[(15, 8, 13), float32], Tensor[(4, 12, 4), float64], Tensor[(192), uint32], Tensor[(112), int32], Tensor[(192), uint32], Tensor[(16, 8, 5), float64], Tensor[(80), float64]) */;
  %318 = @func_4684() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %319 = @func_5825() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %320 = cast(meta[relay.Constant][18] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
  %321 = reshape(%320, newshape=[12, 1]) /* ty=Tensor[(12, 1), float32] */;
  %322 = @func_8635(%321) /* ty=(Tensor[(12, 1), float32],) */;
  %323 = %322.0;
  %324 = cast(%323, dtype="bool") /* ty=Tensor[(12, 1), bool] */;
  %325 = cast(%var_10184, dtype="bool") /* ty=Tensor[(112), bool] */;
  %326 = @func_6077() /* ty=Tensor[(6, 9, 11), float32] */;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %328 = log(%327) /* ty=Tensor[(6, 9, 11), float64] */;
  %329 = cast(%328, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %330 = sin(%329) /* ty=Tensor[(6, 9, 11), float64] */;
  %331 = cast(%330, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %332 = cast(%var_10306, dtype="uint16") /* ty=Tensor[(16), uint16] */;
  %333 = cast(%var_10307, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %334 = reshape(%332, newshape=[1, 8, 2]) /* ty=Tensor[(1, 8, 2), uint16] */;
  %335 = reshape(%333, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), uint16] */;
  %336 = cast(%var_10317, dtype="float32") /* ty=Tensor[(840), float32] */;
  %337 = reshape(%336, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), float32] */;
  %338 = %317.2;
  %339 = %318.0;
  %340 = %319.0;
  %341 = @func_4762() /* ty=Tensor[(26, 5), uint32] */;
  %342 = greater(%324, %325) /* ty=Tensor[(12, 112), bool] */;
  %343 = atanh(%331) /* ty=Tensor[(6, 9, 11), float32] */;
  %344 = @func_4974(%334, %335) /* ty=Tensor[(14, 8, 2), bool] */;
  %345 = @func_639(%337) /* ty=Tensor[(10, 7, 12), float32] */;
  (%338, %var_10183, %var_10185, %339, %340, meta[relay.Constant][18] /* ty=Tensor[(12), float32] */, %341, %342, %343, %344, %var_10306, %var_10307, %345, %var_10317)
}

def @func_10113() -> (Tensor[(6, 9, 11), float32], Tensor[(1440), int32]) {
  @func_10111() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(1440), int32]) */
}

def @func_6323(%var_6317: Tensor[(3, 2, 9), float32]) -> (Tensor[(1440), int32], Tensor[(3, 2, 9), int16]) {
  %346 = @func_5093() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(8, 7, 2), int32], Tensor[(1440), int32]) */;
  %347 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %348 = %347.1;
  %349 = cast(%var_6317, dtype="int16") /* ty=Tensor[(3, 2, 9), int16] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%348, dtype="int16") /* ty=Tensor[(3, 2, 9), int16] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %353 = %346.2;
  %354 = right_shift(%351, %352) /* ty=Tensor[(3, 2, 9), int16] */;
  (%353, %354)
}

def @func_7893() -> Tensor[(112), int32] {
  @func_7891() /* ty=Tensor[(112), int32] */
}

def @func_7875() -> (Tensor[(6, 9, 11), float64],) {
  @func_7873() /* ty=(Tensor[(6, 9, 11), float64],) */
}

def @func_9600() -> (Tensor[(6, 9, 11), int16],) {
  %355 = @func_4829() /* ty=Tensor[(6, 9, 11), int16] */;
  (%355,)
}

def @func_3773(%var_3772: Tensor[(6, 9, 11), float64]) -> (Tensor[(8, 7, 2), int32], Tensor[(180, 8), int32], Tensor[(11, 3, 15), float64], Tensor[(165, 3), float64], Tensor[(5, 6, 2), float64], Tensor[(16, 8, 5), float64], Tensor[(80), float64], Tensor[(6, 9, 11), float64], Tensor[(16, 5, 13), bool], Tensor[(1040), uint16]) {
  %394 = fn (%var_3742: Tensor[(6, 9, 11), float64]) -> (Tensor[(8, 7, 2), int32], Tensor[(180, 8), int32], Tensor[(11, 3, 15), float64], Tensor[(165, 3), float64], Tensor[(5, 6, 2), float64], Tensor[(16, 8, 5), float64], Tensor[(80), float64], Tensor[(6, 9, 11), float64], Tensor[(16, 5, 13), bool], Tensor[(1040), uint16]) {
    %356 = cast(meta[relay.Constant][19] /* ty=Tensor[(180, 8), int32] */, dtype="int32") /* ty=Tensor[(180, 8), int32] */;
    %357 = cast(meta[relay.Constant][19] /* ty=Tensor[(180, 8), int32] */, dtype="int32") /* ty=Tensor[(180, 8), int32] */;
    %358 = reshape(%356, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
    %359 = reshape(%357, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), int32] */;
    %360 = @func_3578(%358, %359) /* ty=(Tensor[(12, 8, 15), int32], Tensor[(12, 8, 15), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
    %361 = cast(meta[relay.Constant][20] /* ty=Tensor[(165, 3), float64] */, dtype="float64") /* ty=Tensor[(165, 3), float64] */;
    %362 = reshape(%361, newshape=[11, 3, 15]) /* ty=Tensor[(11, 3, 15), float64] */;
    %363 = @func_1898(%362) /* ty=(Tensor[(11, 3, 15), float64],) */;
    %364 = %360.2;
    %365 = cast(%364, dtype="int32") /* ty=Tensor[(8, 7, 2), int32] */;
    %366 = reshape(%365, newshape=[28, 4]) /* ty=Tensor[(28, 4), int32] */;
    %367 = @func_2890(%366) /* ty=(Tensor[(5, 6, 2), float64], Tensor[(8, 7, 2), int32], Tensor[(28, 4), int32]) */;
    %368 = cast(meta[relay.Constant][21] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %369 = reshape(%368, newshape=[16, 1, 5]) /* ty=Tensor[(16, 1, 5), float64] */;
    %370 = @func_1427(%369) /* ty=(Tensor[(16, 8, 5), float64],) */;
    %371 = @func_3666() /* ty=(Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
    %372 = %371.2;
    %373 = cast(%372, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %374 = cos(%373) /* ty=Tensor[(6, 9, 11), float64] */;
    %375 = @func_3523() /* ty=Tensor[(6, 9, 11), float32] */;
    %376 = cast(%375, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %377 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
    %378 = cast(%374, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %380 = multiply(%378, %379) /* ty=Tensor[(6, 9, 11), float64] */;
    %381 = cast(%var_3742, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
    %383 = cast(%380, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %385 = cast(meta[relay.Constant][22] /* ty=Tensor[(1040), uint16] */, dtype="uint16") /* ty=Tensor[(1040), uint16] */;
    %386 = cast(meta[relay.Constant][22] /* ty=Tensor[(1040), uint16] */, dtype="uint16") /* ty=Tensor[(1040), uint16] */;
    %387 = reshape(%385, newshape=[16, 5, 13]) /* ty=Tensor[(16, 5, 13), uint16] */;
    %388 = reshape(%386, newshape=[16, 5, 13]) /* ty=Tensor[(16, 5, 13), uint16] */;
    %389 = %363.0;
    %390 = %367.0;
    %391 = %370.0;
    %392 = mod(%383, %384) /* ty=Tensor[(6, 9, 11), float64] */;
    %393 = @func_1554(%387, %388) /* ty=Tensor[(16, 5, 13), bool] */;
    (%364, meta[relay.Constant][19] /* ty=Tensor[(180, 8), int32] */, %389, meta[relay.Constant][20] /* ty=Tensor[(165, 3), float64] */, %390, %391, meta[relay.Constant][21] /* ty=Tensor[(80), float64] */, %392, %393, meta[relay.Constant][22] /* ty=Tensor[(1040), uint16] */)
  };
  %394(%var_3772) /* ty=(Tensor[(8, 7, 2), int32], Tensor[(180, 8), int32], Tensor[(11, 3, 15), float64], Tensor[(165, 3), float64], Tensor[(5, 6, 2), float64], Tensor[(16, 8, 5), float64], Tensor[(80), float64], Tensor[(6, 9, 11), float64], Tensor[(16, 5, 13), bool], Tensor[(1040), uint16]) */
}

def @func_8158() -> (Tensor[(8, 7, 2), int32],) {
  %395 = @func_5093() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(8, 7, 2), int32], Tensor[(1440), int32]) */;
  %396 = %395.1;
  (%396,)
}

def @func_6078() -> Tensor[(6, 9, 11), float32] {
  %398 = fn () -> Tensor[(6, 9, 11), float32] {
    %397 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
    %397.0
  };
  %398() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_5217() -> Tensor[(3, 2, 9), float32] {
  %399 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %399.0
}

def @func_7095() -> (Tensor[(1440), int32], Tensor[(6, 9, 11), int16], Tensor[(13, 10), uint32], Tensor[(112), int32]) {
  @func_7093() /* ty=(Tensor[(1440), int32], Tensor[(6, 9, 11), int16], Tensor[(13, 10), uint32], Tensor[(112), int32]) */
}

def @func_8297() -> (Tensor[(6, 9, 11), float32], Tensor[(840), float32]) {
  @func_8295() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(840), float32]) */
}

def @func_5219() -> Tensor[(3, 2, 9), float32] {
  @func_5217() /* ty=Tensor[(3, 2, 9), float32] */
}

def @func_10111() -> (Tensor[(6, 9, 11), float32], Tensor[(1440), int32]) {
  %400 = @func_5761() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %401 = %400.0;
  %402 = @func_8777() /* ty=Tensor[(1440), int32] */;
  (%401, %402)
}

def @func_10677() -> Tensor[(112), int32] {
  %404 = fn () -> Tensor[(112), int32] {
    %403 = @func_8834() /* ty=(Tensor[(112), int32],) */;
    %403.0
  };
  %404() /* ty=Tensor[(112), int32] */
}

def @func_4686() -> (Tensor[(6, 9, 11), float64],) {
  @func_4684() /* ty=(Tensor[(6, 9, 11), float64],) */
}

def @func_5175(%var_5173: Tensor[(26, 5), uint32], %var_5174: Tensor[(112), int32]) -> (Tensor[(26, 5), float32], Tensor[(8, 7, 2), int32], Tensor[(112), int32], Tensor[(26, 5), int64], Tensor[(26, 5), uint32], Tensor[(6, 9, 11), int16], Tensor[(8, 7, 2), int32]) {
  %431 = fn (%var_5128: Tensor[(26, 5), uint32], %var_5145: Tensor[(112), int32]) -> (Tensor[(26, 5), float32], Tensor[(8, 7, 2), int32], Tensor[(112), int32], Tensor[(26, 5), int64], Tensor[(26, 5), uint32], Tensor[(6, 9, 11), int16], Tensor[(8, 7, 2), int32]) {
    %405 = @func_4762() /* ty=Tensor[(26, 5), uint32] */;
    %406 = cast(%var_5128, dtype="float32") /* ty=Tensor[(26, 5), float32] */;
    %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(2), int32] */;
    %408 = cast(%405, dtype="float32") /* ty=Tensor[(26, 5), float32] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %410 = cast(%var_5145, dtype="int32") /* ty=Tensor[(112), int32] */;
    %411 = cast(%var_5145, dtype="int32") /* ty=Tensor[(112), int32] */;
    %412 = reshape(%410, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
    %413 = reshape(%411, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
    %414 = cast(%var_5128, dtype="float64") /* ty=Tensor[(26, 5), float64] */;
    %415 = log10(%414) /* ty=Tensor[(26, 5), float64] */;
    %416 = cast(%405, dtype="int64") /* ty=Tensor[(26, 5), int64] */;
    %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(2), int32] */;
    %418 = cast(%415, dtype="int64") /* ty=Tensor[(26, 5), int64] */;
    %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %420 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
    %421 = @func_5065() /* ty=(Tensor[(6, 9, 11), int16],) */;
    %422 = %421.0;
    %423 = cast(%422, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %424 = reshape(%423, newshape=[6, 9, 11]) /* ty=Tensor[(6, 9, 11), float64] */;
    %425 = @func_3771(%424) /* ty=(Tensor[(8, 7, 2), int32], Tensor[(180, 8), int32], Tensor[(11, 3, 15), float64], Tensor[(165, 3), float64], Tensor[(5, 6, 2), float64], Tensor[(16, 8, 5), float64], Tensor[(80), float64], Tensor[(6, 9, 11), float64], Tensor[(16, 5, 13), bool], Tensor[(1040), uint16]) */;
    %426 = floor_mod(%408, %409) /* ty=Tensor[(26, 5), float32] */;
    %427 = @func_543(%412, %413) /* ty=Tensor[(8, 7, 2), int32] */;
    %428 = left_shift(%418, %419) /* ty=Tensor[(26, 5), int64] */;
    %429 = %420.1;
    %430 = %425.0;
    (%426, %427, %var_5145, %428, %429, %422, %430)
  };
  %431(%var_5173, %var_5174) /* ty=(Tensor[(26, 5), float32], Tensor[(8, 7, 2), int32], Tensor[(112), int32], Tensor[(26, 5), int64], Tensor[(26, 5), uint32], Tensor[(6, 9, 11), int16], Tensor[(8, 7, 2), int32]) */
}

def @func_9209() -> (Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32], Tensor[(112), int32]) {
  @func_9207() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32], Tensor[(112), int32]) */
}

def @func_4483() -> Tensor[(6, 9, 11), int16] {
  @func_4481() /* ty=Tensor[(6, 9, 11), int16] */
}

def @func_1429(%var_1428: Tensor[(16, 1, 5), float64]) -> (Tensor[(16, 8, 5), float64],) {
  %435 = fn (%var_1420: Tensor[(16, 1, 5), float64]) -> (Tensor[(16, 8, 5), float64],) {
    %432 = cast(%var_1420, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
    %433 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 5), float64] */;
    %434 = divide(%432, %433) /* ty=Tensor[(16, 8, 5), float64] */;
    (%434,)
  };
  %435(%var_1428) /* ty=(Tensor[(16, 8, 5), float64],) */
}

def @func_9484() -> Tensor[(6, 9, 11), int8] {
  @func_9482() /* ty=Tensor[(6, 9, 11), int8] */
}

def @func_8749() -> (Tensor[(3, 2, 9), float32],) {
  @func_8747() /* ty=(Tensor[(3, 2, 9), float32],) */
}

def @func_7926() -> Tensor[(6, 9, 11), float64] {
  %437 = fn () -> Tensor[(6, 9, 11), float64] {
    %436 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
    %436.0
  };
  %437() /* ty=Tensor[(6, 9, 11), float64] */
}

def @func_3581(%var_3579: Tensor[(12, 8, 15), int32], %var_3580: Tensor[(12, 8, 15), int32]) -> (Tensor[(12, 8, 15), int32], Tensor[(12, 8, 15), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) {
  %450 = fn (%var_3556: Tensor[(12, 8, 15), int32], %var_3557: Tensor[(12, 8, 15), int32]) -> (Tensor[(12, 8, 15), int32], Tensor[(12, 8, 15), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) {
    %438 = cast(%var_3557, dtype="int32") /* ty=Tensor[(12, 8, 15), int32] */;
    %439 = shape_of(%var_3556, dtype="int32") /* ty=Tensor[(3), int32] */;
    %440 = cast(%var_3556, dtype="int32") /* ty=Tensor[(12, 8, 15), int32] */;
    %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %442 = cast(%var_3557, dtype="float64") /* ty=Tensor[(12, 8, 15), float64] */;
    %443 = cast(meta[relay.Constant][24] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %444 = cast(meta[relay.Constant][24] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %445 = reshape(%443, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
    %446 = reshape(%444, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
    %447 = minimum(%440, %441) /* ty=Tensor[(12, 8, 15), int32] */;
    %448 = sin(%442) /* ty=Tensor[(12, 8, 15), float64] */;
    %449 = @func_543(%445, %446) /* ty=Tensor[(8, 7, 2), int32] */;
    (%447, %448, %449, meta[relay.Constant][24] /* ty=Tensor[(112), int32] */)
  };
  %450(%var_3579, %var_3580) /* ty=(Tensor[(12, 8, 15), int32], Tensor[(12, 8, 15), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */
}

def @func_8358() -> Tensor[(6, 9, 11), int8] {
  %451 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %452 = %451.0;
  %453 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 9, 11), float32] */, dtype="int8") /* ty=Tensor[(6, 9, 11), int8] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="int8") /* ty=Tensor[(6, 9, 11), int8] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  subtract(%455, %456) /* ty=Tensor[(6, 9, 11), int8] */
}

def @func_5666() -> (Tensor[(6, 9, 11), float32],) {
  %457 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %458 = %457.0;
  (%458,)
}

def @func_4377(%var_4375: Tensor[(9, 1, 1), uint32], %var_4376: Tensor[(9, 12, 6), uint32]) -> (Tensor[(9, 12, 6), bool],) {
  %462 = fn (%var_4369: Tensor[(9, 1, 1), uint32], %var_4370: Tensor[(9, 12, 6), uint32]) -> (Tensor[(9, 12, 6), bool],) {
    %459 = cast(%var_4369, dtype="bool") /* ty=Tensor[(9, 1, 1), bool] */;
    %460 = cast(%var_4370, dtype="bool") /* ty=Tensor[(9, 12, 6), bool] */;
    %461 = greater_equal(%459, %460) /* ty=Tensor[(9, 12, 6), bool] */;
    (%461,)
  };
  %462(%var_4375, %var_4376) /* ty=(Tensor[(9, 12, 6), bool],) */
}

def @func_5204() -> (Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32], Tensor[(11, 3, 15), float64], Tensor[(495), float64]) {
  %463 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %464 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %465 = cast(meta[relay.Constant][26] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %466 = reshape(%465, newshape=[11, 3, 15]) /* ty=Tensor[(11, 3, 15), float64] */;
  %467 = @func_1898(%466) /* ty=(Tensor[(11, 3, 15), float64],) */;
  %468 = %463.1;
  %469 = %464.0;
  %470 = %467.0;
  (%468, %469, %470, meta[relay.Constant][26] /* ty=Tensor[(495), float64] */)
}

def @func_5762() -> (Tensor[(6, 9, 11), float32],) {
  %475 = fn () -> (Tensor[(6, 9, 11), float32],) {
    %471 = @func_3666() /* ty=(Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
    %472 = %471.2;
    %473 = cast(%472, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
    %474 = sigmoid(%473) /* ty=Tensor[(6, 9, 11), float32] */;
    (%474,)
  };
  %475() /* ty=(Tensor[(6, 9, 11), float32],) */
}

def @func_1484(%var_1481: Tensor[(4, 8, 16), float32], %var_1482: Tensor[(80), float64], %var_1483: Tensor[(16, 8, 5), float64]) -> (Tensor[(4, 8, 16), float32], Tensor[(80), float64], Tensor[(16, 8, 5), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) {
  %493 = fn (%var_1454: Tensor[(4, 8, 16), float32], %var_1463: Tensor[(80), float64], %var_1471: Tensor[(16, 8, 5), float64]) -> (Tensor[(4, 8, 16), float32], Tensor[(80), float64], Tensor[(16, 8, 5), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) {
    %476 = cast(%var_1454, dtype="float32") /* ty=Tensor[(4, 8, 16), float32] */;
    %477 = cast(%var_1463, dtype="float64") /* ty=Tensor[(80), float64] */;
    %478 = reshape(%477, newshape=[16, 1, 5]) /* ty=Tensor[(16, 1, 5), float64] */;
    %479 = @func_1427(%478) /* ty=(Tensor[(16, 8, 5), float64],) */;
    %480 = %479.0;
    %481 = cast(%var_1471, dtype="bool") /* ty=Tensor[(16, 8, 5), bool] */;
    %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
    %483 = cast(%480, dtype="bool") /* ty=Tensor[(16, 8, 5), bool] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %485 = cast(meta[relay.Constant][27] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %486 = cast(meta[relay.Constant][28] /* ty=Tensor[(130), uint32] */, dtype="uint32") /* ty=Tensor[(130), uint32] */;
    %487 = reshape(%485, newshape=[]) /* ty=uint32 */;
    %488 = reshape(%486, newshape=[1, 13, 10]) /* ty=Tensor[(1, 13, 10), uint32] */;
    %489 = @func_520(%487, %488) /* ty=(Tensor[(1, 13, 10), bool],) */;
    %490 = acosh(%476) /* ty=Tensor[(4, 8, 16), float32] */;
    %491 = less_equal(%483, %484) /* ty=Tensor[(16, 8, 5), bool] */;
    %492 = %489.0;
    (%490, %var_1463, %491, %492, meta[relay.Constant][27] /* ty=uint32 */, meta[relay.Constant][28] /* ty=Tensor[(130), uint32] */)
  };
  %493(%var_1481, %var_1482, %var_1483) /* ty=(Tensor[(4, 8, 16), float32], Tensor[(80), float64], Tensor[(16, 8, 5), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) */
}

def @func_8295() -> (Tensor[(6, 9, 11), float32], Tensor[(840), float32]) {
  %494 = @func_7621() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(10, 7, 12), float32], Tensor[(840), float32], Tensor[(3, 2, 9), float32]) */;
  %495 = @func_5914() /* ty=Tensor[(6, 9, 11), float32] */;
  %496 = %494.2;
  (%495, %496)
}

def @func_2544(%var_2541: Tensor[(4, 12, 4), uint32], %var_2542: Tensor[(4, 12, 4), uint32], %var_2543: Tensor[(112), int32]) -> (Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) {
  %515 = fn (%var_2495: Tensor[(4, 12, 4), uint32], %var_2496: Tensor[(4, 12, 4), uint32], %var_2523: Tensor[(112), int32]) -> (Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) {
    %497 = cast(%var_2496, dtype="bool") /* ty=Tensor[(4, 12, 4), bool] */;
    %498 = shape_of(%var_2495, dtype="int32") /* ty=Tensor[(3), int32] */;
    %499 = cast(%var_2495, dtype="bool") /* ty=Tensor[(4, 12, 4), bool] */;
    %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %501 = cast(meta[relay.Constant][29] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %502 = cast(meta[relay.Constant][30] /* ty=Tensor[(26, 5), uint32] */, dtype="uint32") /* ty=Tensor[(26, 5), uint32] */;
    %503 = reshape(%501, newshape=[]) /* ty=uint32 */;
    %504 = reshape(%502, newshape=[1, 13, 10]) /* ty=Tensor[(1, 13, 10), uint32] */;
    %505 = @func_520(%503, %504) /* ty=(Tensor[(1, 13, 10), bool],) */;
    %506 = cast(%var_2495, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
    %507 = cast(%var_2523, dtype="int32") /* ty=Tensor[(112), int32] */;
    %508 = cast(%var_2523, dtype="int32") /* ty=Tensor[(112), int32] */;
    %509 = reshape(%507, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
    %510 = reshape(%508, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
    %511 = greater(%499, %500) /* ty=Tensor[(4, 12, 4), bool] */;
    %512 = %505.0;
    %513 = acosh(%506) /* ty=Tensor[(4, 12, 4), float64] */;
    %514 = @func_543(%509, %510) /* ty=Tensor[(8, 7, 2), int32] */;
    (%511, %512, meta[relay.Constant][29] /* ty=uint32 */, meta[relay.Constant][30] /* ty=Tensor[(26, 5), uint32] */, %513, %514, %var_2523)
  };
  %515(%var_2541, %var_2542, %var_2543) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */
}

def @main(%var_10839: Tensor[(2, 9, 12), float64]) -> (Tensor[(1440), int32], Tensor[(2, 9, 12), float64]) {
  %516 = cast(%var_10839, dtype="float64") /* ty=Tensor[(2, 9, 12), float64] */;
  %517 = cosh(%516) /* ty=Tensor[(2, 9, 12), float64] */;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(2, 9, 12), float64] */;
  %519 = @func_8777() /* ty=Tensor[(1440), int32] */;
  %520 = atan(%518) /* ty=Tensor[(2, 9, 12), float64] */;
  (%519, %520)
}

def @func_6204() -> (Tensor[(6, 9, 11), float32],) {
  %522 = fn () -> (Tensor[(6, 9, 11), float32],) {
    %521 = @func_5914() /* ty=Tensor[(6, 9, 11), float32] */;
    (%521,)
  };
  %522() /* ty=(Tensor[(6, 9, 11), float32],) */
}

def @func_9433() -> (Tensor[(112), int32],) {
  @func_9431() /* ty=(Tensor[(112), int32],) */
}

def @func_9663(%var_9648: Tensor[(96, 2), uint64]) -> (Tensor[(96, 2), bool], Tensor[(96, 2), float64], Tensor[(6, 9, 11), int16], Tensor[(1440), int32]) {
  %523 = @func_6778() /* ty=(Tensor[(96, 2), uint64],) */;
  %524 = %523.0;
  %525 = cast(meta[relay.Constant][31] /* ty=Tensor[(96, 2), uint64] */, dtype="bool") /* ty=Tensor[(96, 2), bool] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(2), int32] */;
  %527 = cast(%524, dtype="bool") /* ty=Tensor[(96, 2), bool] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %529 = cast(%var_9648, dtype="float64") /* ty=Tensor[(96, 2), float64] */;
  %530 = shape_of(%524, dtype="int32") /* ty=Tensor[(2), int32] */;
  %531 = cast(%524, dtype="float64") /* ty=Tensor[(96, 2), float64] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %533 = @func_9207() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32], Tensor[(112), int32]) */;
  %534 = @func_5280() /* ty=(Tensor[(1440), int32], Tensor[(6, 9, 11), float32]) */;
  %535 = greater(%527, %528) /* ty=Tensor[(96, 2), bool] */;
  %536 = divide(%531, %532) /* ty=Tensor[(96, 2), float64] */;
  %537 = %533.0;
  %538 = %534.0;
  (%535, %536, %537, %538)
}

def @func_6522(%var_6456: Tensor[(2, 56), int32]) -> (Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float64], Tensor[(192), uint32], Tensor[(1040), uint16], Tensor[(6, 9, 11), float32], Tensor[(2, 56), float32]) {
  %539 = @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */;
  %540 = cast(%var_6456, dtype="int32") /* ty=Tensor[(2, 56), int32] */;
  %541 = cast(meta[relay.Constant][32] /* ty=Tensor[(192), uint32] */, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %542 = reshape(%540, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %543 = reshape(%541, newshape=[192]) /* ty=Tensor[(192), uint32] */;
  %544 = @func_4249(%542, %543) /* ty=(Tensor[(3, 2, 9), float64], Tensor[(112), int32], Tensor[(8, 7, 2), int32], Tensor[(192), uint32], Tensor[(5, 6, 2), float32], Tensor[(8, 7, 2), int32], Tensor[(3, 2, 9), float64], Tensor[(3, 2, 9), float32]) */;
  %545 = %539.0;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
  %547 = reshape(%546, newshape=[6, 9, 11]) /* ty=Tensor[(6, 9, 11), float64] */;
  %548 = @func_3771(%547) /* ty=(Tensor[(8, 7, 2), int32], Tensor[(180, 8), int32], Tensor[(11, 3, 15), float64], Tensor[(165, 3), float64], Tensor[(5, 6, 2), float64], Tensor[(16, 8, 5), float64], Tensor[(80), float64], Tensor[(6, 9, 11), float64], Tensor[(16, 5, 13), bool], Tensor[(1040), uint16]) */;
  %549 = @func_5761() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %550 = cast(%var_6456, dtype="float32") /* ty=Tensor[(2, 56), float32] */;
  %551 = rsqrt(%550) /* ty=Tensor[(2, 56), float32] */;
  %552 = cast(%var_6456, dtype="float32") /* ty=Tensor[(2, 56), float32] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(2), int32] */;
  %554 = cast(%551, dtype="float32") /* ty=Tensor[(2, 56), float32] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %556 = %544.0;
  %557 = %548.9;
  %558 = %549.0;
  %559 = divide(%554, %555) /* ty=Tensor[(2, 56), float32] */;
  (%545, %556, meta[relay.Constant][32] /* ty=Tensor[(192), uint32] */, %557, %558, %559)
}

def @func_8409() -> (Tensor[(6, 9, 11), float32], Tensor[(1440), int32], Tensor[(26, 5), uint32]) {
  %560 = @func_6203() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %561 = @func_5280() /* ty=(Tensor[(1440), int32], Tensor[(6, 9, 11), float32]) */;
  %562 = %560.0;
  %563 = %561.0;
  %564 = @func_4762() /* ty=Tensor[(26, 5), uint32] */;
  (%562, %563, %564)
}

def @func_4138() -> (Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) {
  %575 = fn () -> (Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) {
    %565 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
    %566 = cast(meta[relay.Constant][33] /* ty=Tensor[(192), uint32] */, dtype="uint32") /* ty=Tensor[(192), uint32] */;
    %567 = cast(meta[relay.Constant][33] /* ty=Tensor[(192), uint32] */, dtype="uint32") /* ty=Tensor[(192), uint32] */;
    %568 = cast(meta[relay.Constant][34] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %569 = reshape(%566, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
    %570 = reshape(%567, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
    %571 = reshape(%568, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %572 = @func_2540(%569, %570, %571) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
    %573 = %565.0;
    %574 = %572.3;
    (%573, %574, meta[relay.Constant][33] /* ty=Tensor[(192), uint32] */, meta[relay.Constant][34] /* ty=Tensor[(112), int32] */)
  };
  %575() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */
}

def @func_7490(%var_7470: Tensor[(640), float64]) -> (Tensor[(3, 2, 9), float32], Tensor[(4, 8, 16), float32], Tensor[(512), float32], Tensor[(80), float64], Tensor[(640), float64]) {
  %576 = @func_6957() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %577 = cast(meta[relay.Constant][35] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %578 = cast(meta[relay.Constant][36] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %579 = cast(%var_7470, dtype="float64") /* ty=Tensor[(640), float64] */;
  %580 = reshape(%577, newshape=[4, 8, 16]) /* ty=Tensor[(4, 8, 16), float32] */;
  %581 = reshape(%578, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %582 = reshape(%579, newshape=[16, 8, 5]) /* ty=Tensor[(16, 8, 5), float64] */;
  %583 = @func_1480(%580, %581, %582) /* ty=(Tensor[(4, 8, 16), float32], Tensor[(80), float64], Tensor[(16, 8, 5), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) */;
  %584 = %576.0;
  %585 = %583.0;
  (%584, %585, meta[relay.Constant][35] /* ty=Tensor[(512), float32] */, meta[relay.Constant][36] /* ty=Tensor[(80), float64] */, %var_7470)
}

def @func_6275(%var_6274: Tensor[(112), int32]) -> (Tensor[(6, 9, 11), float64], Tensor[(15, 14, 13), uint32], Tensor[(2730), uint32], uint32, Tensor[(96, 2), uint32], Tensor[(112), int32], Tensor[(112), int32], Tensor[(3, 2, 9), float32]) {
  %605 = fn (%var_6255: Tensor[(112), int32]) -> (Tensor[(6, 9, 11), float64], Tensor[(15, 14, 13), uint32], Tensor[(2730), uint32], uint32, Tensor[(96, 2), uint32], Tensor[(112), int32], Tensor[(112), int32], Tensor[(3, 2, 9), float32]) {
    %586 = @func_5929() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
    %587 = cast(meta[relay.Constant][37] /* ty=Tensor[(2730), uint32] */, dtype="uint32") /* ty=Tensor[(2730), uint32] */;
    %588 = cast(meta[relay.Constant][37] /* ty=Tensor[(2730), uint32] */, dtype="uint32") /* ty=Tensor[(2730), uint32] */;
    %589 = reshape(%587, newshape=[15, 14, 13]) /* ty=Tensor[(15, 14, 13), uint32] */;
    %590 = reshape(%588, newshape=[15, 14, 13]) /* ty=Tensor[(15, 14, 13), uint32] */;
    %591 = cast(meta[relay.Constant][38] /* ty=Tensor[(96, 2), uint32] */, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
    %592 = cast(meta[relay.Constant][38] /* ty=Tensor[(96, 2), uint32] */, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
    %593 = cast(%var_6255, dtype="int32") /* ty=Tensor[(112), int32] */;
    %594 = reshape(%591, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
    %595 = reshape(%592, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
    %596 = reshape(%593, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %597 = @func_2540(%594, %595, %596) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
    %598 = @func_5788() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float64], Tensor[(112), int32], Tensor[(96, 2), uint32], Tensor[(112), int32]) */;
    %599 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
    %600 = %586.0;
    %601 = @func_4275(%589, %590) /* ty=Tensor[(15, 14, 13), uint32] */;
    %602 = %597.2;
    %603 = %598.4;
    %604 = %599.0;
    (%600, %601, meta[relay.Constant][37] /* ty=Tensor[(2730), uint32] */, %602, meta[relay.Constant][38] /* ty=Tensor[(96, 2), uint32] */, %var_6255, %603, %604)
  };
  %605(%var_6274) /* ty=(Tensor[(6, 9, 11), float64], Tensor[(15, 14, 13), uint32], Tensor[(2730), uint32], uint32, Tensor[(96, 2), uint32], Tensor[(112), int32], Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */
}

def @func_5450() -> (Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) {
  %606 = @func_4684() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %607 = @func_5338() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %608 = %606.0;
  %609 = %607.0;
  (%608, %609)
}

def @func_9431() -> (Tensor[(112), int32],) {
  %610 = @func_8549() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float64]) */;
  %611 = %610.0;
  (%611,)
}

def @func_9986() -> Tensor[(6, 9, 11), float32] {
  %612 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %612.0
}

def @func_5819() -> (Tensor[(112), int32], Tensor[(3, 2, 9), float32]) {
  @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */
}

def @func_8549() -> (Tensor[(112), int32], Tensor[(3, 2, 9), float64]) {
  %613 = @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */;
  %614 = %613.0;
  %615 = @func_4118() /* ty=Tensor[(3, 2, 9), float64] */;
  (%614, %615)
}

def @func_7265(%var_7135: Tensor[(198, 3), float32], %var_7201: Tensor[(60, 14), float32]) -> (Tensor[(224), uint16], Tensor[(16), uint16], Tensor[(3, 2, 9), bool], Tensor[(10, 7, 12), float32], Tensor[(60, 14), float32], Tensor[(198, 3), bool], Tensor[(198, 3), bool], Tensor[(198, 3), float64], Tensor[(198, 3), float32]) {
  %616 = cast(%var_7135, dtype="float32") /* ty=Tensor[(198, 3), float32] */;
  %617 = cast(meta[relay.Constant][39] /* ty=Tensor[(16), uint16] */, dtype="uint16") /* ty=Tensor[(16), uint16] */;
  %618 = cast(meta[relay.Constant][40] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %619 = reshape(%616, newshape=[6, 9, 11]) /* ty=Tensor[(6, 9, 11), float32] */;
  %620 = reshape(%617, newshape=[16]) /* ty=Tensor[(16), uint16] */;
  %621 = reshape(%618, newshape=[]) /* ty=uint32 */;
  %622 = @func_6412(%619, %620, %621) /* ty=(Tensor[(6, 9, 11), int16], Tensor[(112), int32], Tensor[(14, 8, 2), bool], Tensor[(16), uint16], Tensor[(224), uint16], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32], Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %623 = @func_6957() /* ty=(Tensor[(3, 2, 9), float32],) */;
  %624 = %623.0;
  %625 = cast(%624, dtype="bool") /* ty=Tensor[(3, 2, 9), bool] */;
  %626 = cast(meta[relay.Constant][40] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %627 = cast(%var_7201, dtype="float32") /* ty=Tensor[(60, 14), float32] */;
  %628 = reshape(%627, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), float32] */;
  %629 = cast(%var_7135, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %630 = cos(%629) /* ty=Tensor[(198, 3), float64] */;
  %631 = cast(%630, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %632 = sqrt(%631) /* ty=Tensor[(198, 3), float64] */;
  %633 = cast(%var_7135, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %634 = shape_of(%630, dtype="int32") /* ty=Tensor[(2), int32] */;
  %635 = cast(%630, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %637 = power(%635, %636) /* ty=Tensor[(198, 3), float64] */;
  %638 = cast(%637, dtype="bool") /* ty=Tensor[(198, 3), bool] */;
  %639 = shape_of(%632, dtype="int32") /* ty=Tensor[(2), int32] */;
  %640 = cast(%632, dtype="bool") /* ty=Tensor[(198, 3), bool] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %642 = equal(%640, %641) /* ty=Tensor[(198, 3), bool] */;
  %643 = cast(%642, dtype="bool") /* ty=Tensor[(198, 3), bool] */;
  %644 = cast(meta[relay.Constant][40] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %645 = cast(%637, dtype="bool") /* ty=Tensor[(198, 3), bool] */;
  %646 = shape_of(%630, dtype="int32") /* ty=Tensor[(2), int32] */;
  %647 = cast(%630, dtype="bool") /* ty=Tensor[(198, 3), bool] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %649 = cast(%632, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %650 = rsqrt(%649) /* ty=Tensor[(198, 3), float64] */;
  %651 = cast(%637, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(2), int32] */;
  %653 = cast(%650, dtype="float64") /* ty=Tensor[(198, 3), float64] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %655 = cast(%630, dtype="float32") /* ty=Tensor[(198, 3), float32] */;
  %656 = %622.4;
  %657 = greater_equal(%625, %626) /* ty=Tensor[(3, 2, 9), bool] */;
  %658 = @func_639(%628) /* ty=Tensor[(10, 7, 12), float32] */;
  %659 = not_equal(%643, %644) /* ty=Tensor[(198, 3), bool] */;
  %660 = greater(%647, %648) /* ty=Tensor[(198, 3), bool] */;
  %661 = floor_divide(%653, %654) /* ty=Tensor[(198, 3), float64] */;
  %662 = sigmoid(%655) /* ty=Tensor[(198, 3), float32] */;
  (%656, meta[relay.Constant][39] /* ty=Tensor[(16), uint16] */, %657, %658, %var_7201, %659, %660, %661, %662)
}

def @func_7623() -> (Tensor[(6, 9, 11), float64], Tensor[(10, 7, 12), float32], Tensor[(840), float32], Tensor[(3, 2, 9), float32]) {
  @func_7621() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(10, 7, 12), float32], Tensor[(840), float32], Tensor[(3, 2, 9), float32]) */
}

def @func_6959() -> (Tensor[(3, 2, 9), float32],) {
  @func_6957() /* ty=(Tensor[(3, 2, 9), float32],) */
}

def @func_9748() -> (Tensor[(3, 2, 9), float32], Tensor[(26, 5), uint32], Tensor[(3, 2, 9), float32], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), int16]) {
  %690 = fn () -> (Tensor[(3, 2, 9), float32], Tensor[(26, 5), uint32], Tensor[(3, 2, 9), float32], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), int16]) {
    %663 = @func_7856() /* ty=(Tensor[(3, 2, 9), float32],) */;
    %664 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
    %665 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
    %666 = @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */;
    %667 = %666.0;
    %668 = cast(%667, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %669 = tan(%668) /* ty=Tensor[(6, 9, 11), float64] */;
    %670 = cast(%667, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
    %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
    %672 = cast(%669, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
    %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %674 = logical_and(%672, %673) /* ty=Tensor[(6, 9, 11), bool] */;
    %675 = cast(%674, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
    %676 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
    %677 = cast(%669, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
    %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %679 = less(%677, %678) /* ty=Tensor[(6, 9, 11), bool] */;
    %680 = cast(%674, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
    %682 = cast(%679, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %684 = @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */;
    %685 = %663.0;
    %686 = %664.1;
    %687 = %665.0;
    %688 = divide(%682, %683) /* ty=Tensor[(6, 9, 11), float64] */;
    %689 = %684.0;
    (%685, %686, %687, %688, %689)
  };
  %690() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(26, 5), uint32], Tensor[(3, 2, 9), float32], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), int16]) */
}

def @func_10826(%var_10817: int64, %var_10818: Tensor[(10, 7, 6), int64]) -> Tensor[(10, 7, 6), int64] {
  %691 = cast(%var_10817, dtype="int64") /* ty=int64 */;
  %692 = cast(%var_10818, dtype="int64") /* ty=Tensor[(10, 7, 6), int64] */;
  multiply(%691, %692) /* ty=Tensor[(10, 7, 6), int64] */
}

def @func_8115(%var_8045: Tensor[(15, 11, 8), int8], %var_8046: Tensor[(15, 11, 8), int8], %var_8052: Tensor[(112), int32]) -> (Tensor[(15, 11, 8), int8], Tensor[(6, 9, 11), float64], Tensor[(28, 4), bool], Tensor[(28, 4), float64], Tensor[(15, 11, 8), float64]) {
  %693 = cast(%var_8046, dtype="int8") /* ty=Tensor[(15, 11, 8), int8] */;
  %694 = shape_of(%var_8045, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%var_8045, dtype="int8") /* ty=Tensor[(15, 11, 8), int8] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %697 = @func_4684() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %698 = cast(%var_8052, dtype="int32") /* ty=Tensor[(112), int32] */;
  %699 = reshape(%698, newshape=[28, 4]) /* ty=Tensor[(28, 4), int32] */;
  %700 = @func_2890(%699) /* ty=(Tensor[(5, 6, 2), float64], Tensor[(8, 7, 2), int32], Tensor[(28, 4), int32]) */;
  %701 = %700.2;
  %702 = cast(%var_8052, dtype="uint16") /* ty=Tensor[(112), uint16] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(2), int32] */;
  %704 = cast(%701, dtype="uint16") /* ty=Tensor[(28, 4), uint16] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %706 = right_shift(%704, %705) /* ty=Tensor[(28, 4), uint16] */;
  %707 = cast(%var_8052, dtype="bool") /* ty=Tensor[(112), bool] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(2), int32] */;
  %709 = cast(%706, dtype="bool") /* ty=Tensor[(28, 4), bool] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %711 = cast(%701, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %712 = shape_of(%706, dtype="int32") /* ty=Tensor[(2), int32] */;
  %713 = cast(%706, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %715 = mod(%713, %714) /* ty=Tensor[(28, 4), float32] */;
  %716 = cast(meta[relay.Constant][41] /* ty=Tensor[(28, 4), float32] */, dtype="int8") /* ty=Tensor[(28, 4), int8] */;
  %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(2), int32] */;
  %718 = cast(%715, dtype="int8") /* ty=Tensor[(28, 4), int8] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %720 = subtract(%718, %719) /* ty=Tensor[(28, 4), int8] */;
  %721 = cast(%720, dtype="float64") /* ty=Tensor[(28, 4), float64] */;
  %722 = shape_of(%706, dtype="int32") /* ty=Tensor[(2), int32] */;
  %723 = cast(%706, dtype="float64") /* ty=Tensor[(28, 4), float64] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %725 = cast(%var_8045, dtype="float64") /* ty=Tensor[(15, 11, 8), float64] */;
  %726 = bitwise_and(%695, %696) /* ty=Tensor[(15, 11, 8), int8] */;
  %727 = %697.0;
  %728 = equal(%709, %710) /* ty=Tensor[(28, 4), bool] */;
  %729 = power(%723, %724) /* ty=Tensor[(28, 4), float64] */;
  %730 = tan(%725) /* ty=Tensor[(15, 11, 8), float64] */;
  (%726, %727, %728, %729, %730)
}

def @func_8847() -> Tensor[(6, 9, 11), int16] {
  @func_8845() /* ty=Tensor[(6, 9, 11), int16] */
}

def @func_6556() -> (Tensor[(1440), int32],) {
  @func_6554() /* ty=(Tensor[(1440), int32],) */
}

def @func_7034(%var_7031: Tensor[(192), uint32], %var_7032: Tensor[(112), int32], %var_7033: Tensor[(80), float64]) -> (Tensor[(15, 8, 13), float32], Tensor[(4, 12, 4), float64], Tensor[(192), uint32], Tensor[(112), int32], Tensor[(192), uint32], Tensor[(16, 8, 5), float64], Tensor[(80), float64]) {
  @func_7029(%var_7031, %var_7032, %var_7033) /* ty=(Tensor[(15, 8, 13), float32], Tensor[(4, 12, 4), float64], Tensor[(192), uint32], Tensor[(112), int32], Tensor[(192), uint32], Tensor[(16, 8, 5), float64], Tensor[(80), float64]) */
}

def @func_9099() -> (Tensor[(112), int32], Tensor[(3, 2, 9), float64]) {
  %731 = @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */;
  %732 = %731.0;
  %733 = cast(%732, dtype="int32") /* ty=Tensor[(112), int32] */;
  %734 = reshape(%733, newshape=[2, 56]) /* ty=Tensor[(2, 56), int32] */;
  %735 = @func_6522(%734) /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float64], Tensor[(192), uint32], Tensor[(1040), uint16], Tensor[(6, 9, 11), float32], Tensor[(2, 56), float32]) */;
  %736 = %735.1;
  (%732, %736)
}

def @func_4018() -> (Tensor[(3, 2, 9), float32],) {
  @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */
}

def @func_8845() -> Tensor[(6, 9, 11), int16] {
  %737 = @func_7575() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) */;
  %737.0
}

def @func_1554(%var_1545: Tensor[(16, 5, 13), uint16], %var_1546: Tensor[(16, 5, 13), uint16]) -> Tensor[(16, 5, 13), bool] {
  %738 = cast(%var_1546, dtype="bool") /* ty=Tensor[(16, 5, 13), bool] */;
  %739 = shape_of(%var_1545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%var_1545, dtype="bool") /* ty=Tensor[(16, 5, 13), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%740, %741) /* ty=Tensor[(16, 5, 13), bool] */
}

def @func_9615(%var_9613: Tensor[(130), uint32]) -> (Tensor[(3, 2, 9), float32], Tensor[(130), uint32], Tensor[(130), uint32]) {
  @func_9612(%var_9613) /* ty=(Tensor[(3, 2, 9), float32], Tensor[(130), uint32], Tensor[(130), uint32]) */
}

def @func_3525() -> Tensor[(6, 9, 11), float32] {
  @func_3523() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_9313(%var_9311: uint64, %var_9312: Tensor[(16, 4, 11), uint64]) -> (Tensor[(16, 4, 11), bool],) {
  @func_9309(%var_9311, %var_9312) /* ty=(Tensor[(16, 4, 11), bool],) */
}

def @func_6709() -> (Tensor[(6, 9, 11), float32], Tensor[(3, 2, 9), float32]) {
  %745 = fn () -> (Tensor[(6, 9, 11), float32], Tensor[(3, 2, 9), float32]) {
    %742 = @func_5338() /* ty=(Tensor[(3, 2, 9), float32],) */;
    %743 = @func_5710() /* ty=Tensor[(6, 9, 11), float32] */;
    %744 = %742.0;
    (%743, %744)
  };
  %745() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(3, 2, 9), float32]) */
}

def @func_7299() -> Tensor[(10, 7, 10), float32] {
  %747 = fn () -> Tensor[(10, 7, 10), float32] {
    %746 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 7, 10), float32] */;
    sin(%746) /* ty=Tensor[(10, 7, 10), float32] */
  };
  %747() /* ty=Tensor[(10, 7, 10), float32] */
}

def @func_10329(%var_10323: Tensor[(192), uint32], %var_10324: Tensor[(112), int32], %var_10325: Tensor[(80), float64], %var_10326: Tensor[(16), uint16], %var_10327: Tensor[(224), uint16], %var_10328: Tensor[(840), float32]) -> (Tensor[(192), uint32], Tensor[(192), uint32], Tensor[(80), float64], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32], Tensor[(12), float32], Tensor[(26, 5), uint32], Tensor[(12, 112), bool], Tensor[(6, 9, 11), float32], Tensor[(14, 8, 2), bool], Tensor[(16), uint16], Tensor[(224), uint16], Tensor[(10, 7, 12), float32], Tensor[(840), float32]) {
  @func_10321(%var_10323, %var_10324, %var_10325, %var_10326, %var_10327, %var_10328) /* ty=(Tensor[(192), uint32], Tensor[(192), uint32], Tensor[(80), float64], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32], Tensor[(12), float32], Tensor[(26, 5), uint32], Tensor[(12, 112), bool], Tensor[(6, 9, 11), float32], Tensor[(14, 8, 2), bool], Tensor[(16), uint16], Tensor[(224), uint16], Tensor[(10, 7, 12), float32], Tensor[(840), float32]) */
}

def @func_5452() -> (Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) {
  @func_5450() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float32]) */
}

def @func_5281() -> (Tensor[(1440), int32], Tensor[(6, 9, 11), float32]) {
  %762 = fn () -> (Tensor[(1440), int32], Tensor[(6, 9, 11), float32]) {
    %748 = @func_4481() /* ty=Tensor[(6, 9, 11), int16] */;
    %749 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 9, 11), int16] */, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
    %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
    %751 = cast(%748, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %753 = not_equal(%751, %752) /* ty=Tensor[(6, 9, 11), bool] */;
    %754 = cast(%753, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
    %755 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 9, 11), int16] */, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
    %756 = reshape(%754, newshape=[594]) /* ty=Tensor[(594), float32] */;
    %757 = reshape(%755, newshape=[594]) /* ty=Tensor[(594), float32] */;
    %758 = @func_4894(%756, %757) /* ty=(Tensor[(3, 2, 9), float32], Tensor[(4, 12, 4), float64], Tensor[(112), int32], Tensor[(40, 2), float64], Tensor[(12, 8, 15), int32], Tensor[(1440), int32], Tensor[(26, 5), uint32], Tensor[(594), uint8]) */;
    %759 = cast(%753, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
    %760 = %758.5;
    %761 = sqrt(%759) /* ty=Tensor[(6, 9, 11), float32] */;
    (%760, %761)
  };
  %762() /* ty=(Tensor[(1440), int32], Tensor[(6, 9, 11), float32]) */
}

def @func_639(%var_626: Tensor[(10, 7, 12), float32]) -> Tensor[(10, 7, 12), float32] {
  %763 = cast(%var_626, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %764 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(10, 7, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(meta[relay.Constant][44] /* ty=Tensor[(10, 7, 12), float32] */, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %767 = floor_divide(%765, %766) /* ty=Tensor[(10, 7, 12), float32] */;
  %768 = cast(%var_626, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%770, %771) /* ty=Tensor[(10, 7, 12), float32] */
}

def @func_4278(%var_4276: Tensor[(15, 14, 13), uint32], %var_4277: Tensor[(15, 14, 13), uint32]) -> Tensor[(15, 14, 13), uint32] {
  %776 = fn (%var_4265: Tensor[(15, 14, 13), uint32], %var_4266: Tensor[(15, 14, 13), uint32]) -> Tensor[(15, 14, 13), uint32] {
    %772 = cast(%var_4266, dtype="uint32") /* ty=Tensor[(15, 14, 13), uint32] */;
    %773 = shape_of(%var_4265, dtype="int32") /* ty=Tensor[(3), int32] */;
    %774 = cast(%var_4265, dtype="uint32") /* ty=Tensor[(15, 14, 13), uint32] */;
    %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_xor(%774, %775) /* ty=Tensor[(15, 14, 13), uint32] */
  };
  %776(%var_4276, %var_4277) /* ty=Tensor[(15, 14, 13), uint32] */
}

def @func_1898(%var_1895: Tensor[(11, 3, 15), float64]) -> (Tensor[(11, 3, 15), float64],) {
  %777 = cast(%var_1895, dtype="float64") /* ty=Tensor[(11, 3, 15), float64] */;
  %778 = log(%777) /* ty=Tensor[(11, 3, 15), float64] */;
  (%778,)
}

def @func_8910() -> (Tensor[(1440), int32], Tensor[(130), uint32], Tensor[(256, 2), float32], Tensor[(80), float64], Tensor[(640), float64]) {
  %788 = fn () -> (Tensor[(1440), int32], Tensor[(130), uint32], Tensor[(256, 2), float32], Tensor[(80), float64], Tensor[(640), float64]) {
    %779 = cast(meta[relay.Constant][45] /* ty=Tensor[(256, 2), float32] */, dtype="float32") /* ty=Tensor[(256, 2), float32] */;
    %780 = cast(meta[relay.Constant][46] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %781 = cast(meta[relay.Constant][47] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
    %782 = reshape(%779, newshape=[4, 8, 16]) /* ty=Tensor[(4, 8, 16), float32] */;
    %783 = reshape(%780, newshape=[80]) /* ty=Tensor[(80), float64] */;
    %784 = reshape(%781, newshape=[16, 8, 5]) /* ty=Tensor[(16, 8, 5), float64] */;
    %785 = @func_1480(%782, %783, %784) /* ty=(Tensor[(4, 8, 16), float32], Tensor[(80), float64], Tensor[(16, 8, 5), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) */;
    %786 = @func_8777() /* ty=Tensor[(1440), int32] */;
    %787 = %785.5;
    (%786, %787, meta[relay.Constant][45] /* ty=Tensor[(256, 2), float32] */, meta[relay.Constant][46] /* ty=Tensor[(80), float64] */, meta[relay.Constant][47] /* ty=Tensor[(640), float64] */)
  };
  %788() /* ty=(Tensor[(1440), int32], Tensor[(130), uint32], Tensor[(256, 2), float32], Tensor[(80), float64], Tensor[(640), float64]) */
}

def @func_4977(%var_4975: Tensor[(1, 8, 2), uint16], %var_4976: Tensor[(14, 8, 2), uint16]) -> Tensor[(14, 8, 2), bool] {
  %791 = fn (%var_4954: Tensor[(1, 8, 2), uint16], %var_4955: Tensor[(14, 8, 2), uint16]) -> Tensor[(14, 8, 2), bool] {
    %789 = cast(%var_4954, dtype="bool") /* ty=Tensor[(1, 8, 2), bool] */;
    %790 = cast(%var_4955, dtype="bool") /* ty=Tensor[(14, 8, 2), bool] */;
    less_equal(%789, %790) /* ty=Tensor[(14, 8, 2), bool] */
  };
  %791(%var_4975, %var_4976) /* ty=Tensor[(14, 8, 2), bool] */
}

def @func_8747() -> (Tensor[(3, 2, 9), float32],) {
  %792 = @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */;
  %793 = %792.1;
  (%793,)
}

def @func_6326(%var_6324: Tensor[(3, 2, 9), float32]) -> (Tensor[(1440), int32], Tensor[(3, 2, 9), int16]) {
  @func_6323(%var_6324) /* ty=(Tensor[(1440), int32], Tensor[(3, 2, 9), int16]) */
}

def @func_9464() -> Tensor[(6, 9, 11), float64] {
  %795 = fn () -> Tensor[(6, 9, 11), float64] {
    %794 = @func_7873() /* ty=(Tensor[(6, 9, 11), float64],) */;
    %794.0
  };
  %795() /* ty=Tensor[(6, 9, 11), float64] */
}

def @func_9666(%var_9664: Tensor[(96, 2), uint64]) -> (Tensor[(96, 2), bool], Tensor[(96, 2), float64], Tensor[(6, 9, 11), int16], Tensor[(1440), int32]) {
  @func_9663(%var_9664) /* ty=(Tensor[(96, 2), bool], Tensor[(96, 2), float64], Tensor[(6, 9, 11), int16], Tensor[(1440), int32]) */
}

def @func_4684() -> (Tensor[(6, 9, 11), float64],) {
  %796 = @func_4137() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(26, 5), uint32], Tensor[(192), uint32], Tensor[(112), int32]) */;
  %797 = %796.0;
  (%797,)
}

def @func_9602() -> (Tensor[(6, 9, 11), int16],) {
  @func_9600() /* ty=(Tensor[(6, 9, 11), int16],) */
}

def @func_7985() -> Tensor[(6, 9, 11), float32] {
  @func_7983() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_5711() -> Tensor[(6, 9, 11), float32] {
  %798 = fn () -> Tensor[(6, 9, 11), float32] {
    @func_4944() /* ty=Tensor[(6, 9, 11), float32] */
  };
  %798() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_524(%var_522: uint32, %var_523: Tensor[(1, 13, 10), uint32]) -> (Tensor[(1, 13, 10), bool],) {
  @func_520(%var_522, %var_523) /* ty=(Tensor[(1, 13, 10), bool],) */
}

def @func_4675(%var_4636: Tensor[(80, 1), float64]) -> (Tensor[(5, 6, 2), float64], Tensor[(4, 28), int32], Tensor[(3, 2, 9), float32], Tensor[(16, 8, 5), float64], Tensor[(80, 1), float64], Tensor[(6, 9, 11), int32], Tensor[(3, 2, 9), float64]) {
  %799 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 28), int32] */, dtype="int32") /* ty=Tensor[(4, 28), int32] */;
  %800 = reshape(%799, newshape=[28, 4]) /* ty=Tensor[(28, 4), int32] */;
  %801 = @func_2890(%800) /* ty=(Tensor[(5, 6, 2), float64], Tensor[(8, 7, 2), int32], Tensor[(28, 4), int32]) */;
  %802 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %803 = cast(%var_4636, dtype="float64") /* ty=Tensor[(80, 1), float64] */;
  %804 = reshape(%803, newshape=[16, 1, 5]) /* ty=Tensor[(16, 1, 5), float64] */;
  %805 = @func_1427(%804) /* ty=(Tensor[(16, 8, 5), float64],) */;
  %806 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %807 = %806.0;
  %808 = @func_4256() /* ty=Tensor[(6, 9, 11), float32] */;
  %809 = cast(%808, dtype="int32") /* ty=Tensor[(6, 9, 11), int32] */;
  %810 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%807, dtype="int32") /* ty=Tensor[(6, 9, 11), int32] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %813 = %801.0;
  %814 = %802.1;
  %815 = %805.0;
  %816 = bitwise_and(%811, %812) /* ty=Tensor[(6, 9, 11), int32] */;
  %817 = @func_4118() /* ty=Tensor[(3, 2, 9), float64] */;
  (%813, meta[relay.Constant][48] /* ty=Tensor[(4, 28), int32] */, %814, %815, %var_4636, %816, %817)
}

def @func_2743(%var_2741: Tensor[(16, 12, 15), float32]) -> (Tensor[(16, 12, 15), float32], Tensor[(16, 12, 15), float32]) {
  @func_2740(%var_2741) /* ty=(Tensor[(16, 12, 15), float32], Tensor[(16, 12, 15), float32]) */
}

def @func_543(%var_538: Tensor[(8, 7, 2), int32], %var_539: Tensor[(8, 7, 2), int32]) -> Tensor[(8, 7, 2), int32] {
  %818 = cast(%var_539, dtype="int32") /* ty=Tensor[(8, 7, 2), int32] */;
  %819 = shape_of(%var_538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(%var_538, dtype="int32") /* ty=Tensor[(8, 7, 2), int32] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%820, %821) /* ty=Tensor[(8, 7, 2), int32] */
}

def @func_7584() -> Tensor[(6, 9, 11), float32] {
  %822 = @func_5666() /* ty=(Tensor[(6, 9, 11), float32],) */;
  %822.0
}

def @func_7093() -> (Tensor[(1440), int32], Tensor[(6, 9, 11), int16], Tensor[(13, 10), uint32], Tensor[(112), int32]) {
  %823 = @func_6554() /* ty=(Tensor[(1440), int32],) */;
  %824 = cast(meta[relay.Constant][49] /* ty=Tensor[(13, 10), uint32] */, dtype="uint32") /* ty=Tensor[(13, 10), uint32] */;
  %825 = cast(meta[relay.Constant][50] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %826 = reshape(%824, newshape=[26, 5]) /* ty=Tensor[(26, 5), uint32] */;
  %827 = reshape(%825, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %828 = @func_5172(%826, %827) /* ty=(Tensor[(26, 5), float32], Tensor[(8, 7, 2), int32], Tensor[(112), int32], Tensor[(26, 5), int64], Tensor[(26, 5), uint32], Tensor[(6, 9, 11), int16], Tensor[(8, 7, 2), int32]) */;
  %829 = %823.0;
  %830 = %828.5;
  (%829, %830, meta[relay.Constant][49] /* ty=Tensor[(13, 10), uint32] */, meta[relay.Constant][50] /* ty=Tensor[(112), int32] */)
}

def @func_4549(%var_4547: Tensor[(3, 2, 9), float32], %var_4548: Tensor[(12, 8, 15), float64]) -> (Tensor[(3, 2, 9), int8], Tensor[(26, 5), uint32], Tensor[(1440), int32], Tensor[(12, 8, 15), int64]) {
  @func_4545(%var_4547, %var_4548) /* ty=(Tensor[(3, 2, 9), int8], Tensor[(26, 5), uint32], Tensor[(1440), int32], Tensor[(12, 8, 15), int64]) */
}

def @func_4829() -> Tensor[(6, 9, 11), int16] {
  @func_4481() /* ty=Tensor[(6, 9, 11), int16] */
}

def @func_9941() -> Tensor[(112), int32] {
  %831 = @func_5817() /* ty=(Tensor[(112), int32], Tensor[(3, 2, 9), float32]) */;
  %831.0
}

def @func_7621() -> (Tensor[(6, 9, 11), float64], Tensor[(10, 7, 12), float32], Tensor[(840), float32], Tensor[(3, 2, 9), float32]) {
  %832 = @func_5929() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
  %833 = cast(meta[relay.Constant][51] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %834 = reshape(%833, newshape=[10, 7, 12]) /* ty=Tensor[(10, 7, 12), float32] */;
  %835 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %836 = %832.0;
  %837 = @func_639(%834) /* ty=Tensor[(10, 7, 12), float32] */;
  %838 = %835.0;
  (%836, %837, meta[relay.Constant][51] /* ty=Tensor[(840), float32] */, %838)
}

def @func_6525(%var_6523: Tensor[(2, 56), int32]) -> (Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float64], Tensor[(192), uint32], Tensor[(1040), uint16], Tensor[(6, 9, 11), float32], Tensor[(2, 56), float32]) {
  @func_6522(%var_6523) /* ty=(Tensor[(6, 9, 11), float64], Tensor[(3, 2, 9), float64], Tensor[(192), uint32], Tensor[(1040), uint16], Tensor[(6, 9, 11), float32], Tensor[(2, 56), float32]) */
}

def @func_5066() -> (Tensor[(6, 9, 11), int16],) {
  %841 = fn () -> (Tensor[(6, 9, 11), int16],) {
    %839 = @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */;
    %840 = %839.0;
    (%840,)
  };
  %841() /* ty=(Tensor[(6, 9, 11), int16],) */
}

def @func_8360() -> Tensor[(6, 9, 11), int8] {
  @func_8358() /* ty=Tensor[(6, 9, 11), int8] */
}

def @func_5930() -> (Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) {
  %846 = fn () -> (Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) {
    %842 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
    %843 = @func_5825() /* ty=(Tensor[(6, 9, 11), float32],) */;
    %844 = %842.0;
    %845 = %843.0;
    (%844, %845)
  };
  %846() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */
}

def @func_7493(%var_7491: Tensor[(640), float64]) -> (Tensor[(3, 2, 9), float32], Tensor[(4, 8, 16), float32], Tensor[(512), float32], Tensor[(80), float64], Tensor[(640), float64]) {
  @func_7490(%var_7491) /* ty=(Tensor[(3, 2, 9), float32], Tensor[(4, 8, 16), float32], Tensor[(512), float32], Tensor[(80), float64], Tensor[(640), float64]) */
}

def @func_10088() -> (Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), int16]) {
  %850 = fn () -> (Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), int16]) {
    %847 = @func_7093() /* ty=(Tensor[(1440), int32], Tensor[(6, 9, 11), int16], Tensor[(13, 10), uint32], Tensor[(112), int32]) */;
    %848 = @func_7983() /* ty=Tensor[(6, 9, 11), float32] */;
    %849 = %847.1;
    (%848, %849)
  };
  %850() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), int16]) */
}

def @func_9556() -> (Tensor[(3, 2, 9), float32], Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), float64], Tensor[(840), float32], Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), int16], Tensor[(6, 9, 11), bool]) {
  @func_9554() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(6, 9, 11), float32], Tensor[(6, 9, 11), float64], Tensor[(840), float32], Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), int16], Tensor[(6, 9, 11), bool]) */
}

def @func_3523() -> Tensor[(6, 9, 11), float32] {
  %851 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 9, 11), float32] */, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  atan(%851) /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_7722(%var_7716: Tensor[(1440), int32]) -> (Tensor[(3, 2, 9), float32], Tensor[(1440), float32]) {
  %852 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
  %853 = @func_5093() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(8, 7, 2), int32], Tensor[(1440), int32]) */;
  %854 = %853.2;
  %855 = cast(%var_7716, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(1), int32] */;
  %857 = cast(%854, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?), float32] */;
  %859 = %852.0;
  %860 = add(%857, %858) /* ty=Tensor[(1440), float32] */;
  (%859, %860)
}

def @func_8975() -> (Tensor[(3, 2, 9), float32], Tensor[(1, 15, 6), float32], Tensor[(3, 30), float32], Tensor[(1440), int32]) {
  %869 = fn () -> (Tensor[(3, 2, 9), float32], Tensor[(1, 15, 6), float32], Tensor[(3, 30), float32], Tensor[(1440), int32]) {
    %861 = @func_6957() /* ty=(Tensor[(3, 2, 9), float32],) */;
    %862 = cast(meta[relay.Constant][53] /* ty=Tensor[(3, 30), float32] */, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
    %863 = reshape(%862, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), float32] */;
    %864 = @func_7351(%863) /* ty=(Tensor[(1, 15, 6), float32],) */;
    %865 = @func_6554() /* ty=(Tensor[(1440), int32],) */;
    %866 = %861.0;
    %867 = %864.0;
    %868 = %865.0;
    (%866, %867, meta[relay.Constant][53] /* ty=Tensor[(3, 30), float32] */, %868)
  };
  %869() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(1, 15, 6), float32], Tensor[(3, 30), float32], Tensor[(1440), int32]) */
}

def @func_6779() -> (Tensor[(96, 2), uint64],) {
  %877 = fn () -> (Tensor[(96, 2), uint64],) {
    %870 = @func_5788() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float64], Tensor[(112), int32], Tensor[(96, 2), uint32], Tensor[(112), int32]) */;
    %871 = %870.3;
    %872 = cast(meta[relay.Constant][54] /* ty=Tensor[(96, 2), uint32] */, dtype="uint64") /* ty=Tensor[(96, 2), uint64] */;
    %873 = shape_of(%871, dtype="int32") /* ty=Tensor[(2), int32] */;
    %874 = cast(%871, dtype="uint64") /* ty=Tensor[(96, 2), uint64] */;
    %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %876 = minimum(%874, %875) /* ty=Tensor[(96, 2), uint64] */;
    (%876,)
  };
  %877() /* ty=(Tensor[(96, 2), uint64],) */
}

def @func_7856() -> (Tensor[(3, 2, 9), float32],) {
  %878 = @func_7575() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) */;
  %879 = %878.1;
  (%879,)
}

def @func_8935() -> Tensor[(6, 9, 11), float64] {
  %881 = fn () -> Tensor[(6, 9, 11), float64] {
    %880 = @func_5929() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
    %880.0
  };
  %881() /* ty=Tensor[(6, 9, 11), float64] */
}

def @func_547(%var_545: Tensor[(8, 7, 2), int32], %var_546: Tensor[(8, 7, 2), int32]) -> Tensor[(8, 7, 2), int32] {
  @func_543(%var_545, %var_546) /* ty=Tensor[(8, 7, 2), int32] */
}

def @func_5206() -> (Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32], Tensor[(11, 3, 15), float64], Tensor[(495), float64]) {
  @func_5204() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32], Tensor[(11, 3, 15), float64], Tensor[(495), float64]) */
}

def @func_5668() -> (Tensor[(6, 9, 11), float32],) {
  @func_5666() /* ty=(Tensor[(6, 9, 11), float32],) */
}

def @func_4252(%var_4250: Tensor[(112), int32], %var_4251: Tensor[(192), uint32]) -> (Tensor[(3, 2, 9), float64], Tensor[(112), int32], Tensor[(8, 7, 2), int32], Tensor[(192), uint32], Tensor[(5, 6, 2), float32], Tensor[(8, 7, 2), int32], Tensor[(3, 2, 9), float64], Tensor[(3, 2, 9), float32]) {
  %905 = fn (%var_4208: Tensor[(112), int32], %var_4222: Tensor[(192), uint32]) -> (Tensor[(3, 2, 9), float64], Tensor[(112), int32], Tensor[(8, 7, 2), int32], Tensor[(192), uint32], Tensor[(5, 6, 2), float32], Tensor[(8, 7, 2), int32], Tensor[(3, 2, 9), float64], Tensor[(3, 2, 9), float32]) {
    %882 = cast(%var_4222, dtype="uint32") /* ty=Tensor[(192), uint32] */;
    %883 = cast(%var_4222, dtype="uint32") /* ty=Tensor[(192), uint32] */;
    %884 = cast(%var_4208, dtype="int32") /* ty=Tensor[(112), int32] */;
    %885 = reshape(%882, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
    %886 = reshape(%883, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), uint32] */;
    %887 = reshape(%884, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %888 = @func_2540(%885, %886, %887) /* ty=(Tensor[(4, 12, 4), bool], Tensor[(1, 13, 10), bool], uint32, Tensor[(26, 5), uint32], Tensor[(4, 12, 4), float64], Tensor[(8, 7, 2), int32], Tensor[(112), int32]) */;
    %889 = cast(%var_4208, dtype="int32") /* ty=Tensor[(112), int32] */;
    %890 = reshape(%889, newshape=[28, 4]) /* ty=Tensor[(28, 4), int32] */;
    %891 = @func_2890(%890) /* ty=(Tensor[(5, 6, 2), float64], Tensor[(8, 7, 2), int32], Tensor[(28, 4), int32]) */;
    %892 = %891.0;
    %893 = cast(%892, dtype="float32") /* ty=Tensor[(5, 6, 2), float32] */;
    %894 = %888.5;
    %895 = cast(%894, dtype="int32") /* ty=Tensor[(8, 7, 2), int32] */;
    %896 = cast(%var_4208, dtype="int32") /* ty=Tensor[(112), int32] */;
    %897 = reshape(%895, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
    %898 = reshape(%896, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
    %899 = @func_4016() /* ty=(Tensor[(3, 2, 9), float32],) */;
    %900 = @func_4118() /* ty=Tensor[(3, 2, 9), float64] */;
    %901 = asinh(%893) /* ty=Tensor[(5, 6, 2), float32] */;
    %902 = @func_543(%897, %898) /* ty=Tensor[(8, 7, 2), int32] */;
    %903 = @func_4118() /* ty=Tensor[(3, 2, 9), float64] */;
    %904 = %899.0;
    (%900, %var_4208, %894, %var_4222, %901, %902, %903, %904)
  };
  %905(%var_4250, %var_4251) /* ty=(Tensor[(3, 2, 9), float64], Tensor[(112), int32], Tensor[(8, 7, 2), int32], Tensor[(192), uint32], Tensor[(5, 6, 2), float32], Tensor[(8, 7, 2), int32], Tensor[(3, 2, 9), float64], Tensor[(3, 2, 9), float32]) */
}

def @func_2892(%var_2891: Tensor[(28, 4), int32]) -> (Tensor[(5, 6, 2), float64], Tensor[(8, 7, 2), int32], Tensor[(28, 4), int32]) {
  %913 = fn (%var_2874: Tensor[(28, 4), int32]) -> (Tensor[(5, 6, 2), float64], Tensor[(8, 7, 2), int32], Tensor[(28, 4), int32]) {
    %906 = cast(meta[relay.Constant][55] /* ty=Tensor[(5, 6, 2), float64] */, dtype="float64") /* ty=Tensor[(5, 6, 2), float64] */;
    %907 = cast(%var_2874, dtype="int32") /* ty=Tensor[(28, 4), int32] */;
    %908 = cast(%var_2874, dtype="int32") /* ty=Tensor[(28, 4), int32] */;
    %909 = reshape(%907, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
    %910 = reshape(%908, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), int32] */;
    %911 = atanh(%906) /* ty=Tensor[(5, 6, 2), float64] */;
    %912 = @func_543(%909, %910) /* ty=Tensor[(8, 7, 2), int32] */;
    (%911, %912, %var_2874)
  };
  %913(%var_2891) /* ty=(Tensor[(5, 6, 2), float64], Tensor[(8, 7, 2), int32], Tensor[(28, 4), int32]) */
}

def @func_8559() -> Tensor[(3, 2, 9), float32] {
  %915 = fn () -> Tensor[(3, 2, 9), float32] {
    %914 = @func_7621() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(10, 7, 12), float32], Tensor[(840), float32], Tensor[(3, 2, 9), float32]) */;
    %914.3
  };
  %915() /* ty=Tensor[(3, 2, 9), float32] */
}

def @func_6001(%var_6000: Tensor[(130), uint32]) -> (Tensor[(6, 9, 11), float32], Tensor[(1440), int32], Tensor[(6, 9, 11), float32], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) {
  %927 = fn (%var_5997: Tensor[(130), uint32]) -> (Tensor[(6, 9, 11), float32], Tensor[(1440), int32], Tensor[(6, 9, 11), float32], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) {
    %916 = @func_5929() /* ty=(Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */;
    %917 = @func_5093() /* ty=(Tensor[(6, 9, 11), float32], Tensor[(8, 7, 2), int32], Tensor[(1440), int32]) */;
    %918 = cast(meta[relay.Constant][56] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %919 = cast(%var_5997, dtype="uint32") /* ty=Tensor[(130), uint32] */;
    %920 = reshape(%918, newshape=[]) /* ty=uint32 */;
    %921 = reshape(%919, newshape=[1, 13, 10]) /* ty=Tensor[(1, 13, 10), uint32] */;
    %922 = @func_520(%920, %921) /* ty=(Tensor[(1, 13, 10), bool],) */;
    %923 = %916.1;
    %924 = %917.2;
    %925 = @func_3523() /* ty=Tensor[(6, 9, 11), float32] */;
    %926 = %922.0;
    (%923, %924, %925, %926, meta[relay.Constant][56] /* ty=uint32 */, %var_5997)
  };
  %927(%var_6000) /* ty=(Tensor[(6, 9, 11), float32], Tensor[(1440), int32], Tensor[(6, 9, 11), float32], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) */
}

def @func_9612(%var_9606: Tensor[(130), uint32]) -> (Tensor[(3, 2, 9), float32], Tensor[(130), uint32], Tensor[(130), uint32]) {
  %928 = @func_7575() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) */;
  %929 = cast(%var_9606, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %930 = reshape(%929, newshape=[130]) /* ty=Tensor[(130), uint32] */;
  %931 = @func_5999(%930) /* ty=(Tensor[(6, 9, 11), float32], Tensor[(1440), int32], Tensor[(6, 9, 11), float32], Tensor[(1, 13, 10), bool], uint32, Tensor[(130), uint32]) */;
  %932 = %928.1;
  %933 = %931.5;
  (%932, %933, %var_9606)
}

def @func_4930() -> (Tensor[(6, 9, 11), int16],) {
  @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */
}

def @func_8835() -> (Tensor[(112), int32],) {
  %935 = fn () -> (Tensor[(112), int32],) {
    %934 = @func_7891() /* ty=Tensor[(112), int32] */;
    (%934,)
  };
  %935() /* ty=(Tensor[(112), int32],) */
}

def @func_9482() -> Tensor[(6, 9, 11), int8] {
  @func_8358() /* ty=Tensor[(6, 9, 11), int8] */
}

def @func_3667() -> (Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) {
  %945 = fn () -> (Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) {
    %936 = @func_3523() /* ty=Tensor[(6, 9, 11), float32] */;
    %937 = cast(meta[relay.Constant][57] /* ty=Tensor[(6, 9, 11), float32] */, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
    %938 = shape_of(%936, dtype="int32") /* ty=Tensor[(3), int32] */;
    %939 = cast(%936, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
    %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %941 = cast(%936, dtype="float64") /* ty=Tensor[(6, 9, 11), float64] */;
    %942 = logical_or(%939, %940) /* ty=Tensor[(6, 9, 11), bool] */;
    %943 = log2(%941) /* ty=Tensor[(6, 9, 11), float64] */;
    %944 = @func_3523() /* ty=Tensor[(6, 9, 11), float32] */;
    (%942, %943, %944)
  };
  %945() /* ty=(Tensor[(6, 9, 11), bool], Tensor[(6, 9, 11), float64], Tensor[(6, 9, 11), float32]) */
}

def @func_7725(%var_7723: Tensor[(1440), int32]) -> (Tensor[(3, 2, 9), float32], Tensor[(1440), float32]) {
  @func_7722(%var_7723) /* ty=(Tensor[(3, 2, 9), float32], Tensor[(1440), float32]) */
}

def @func_5826() -> (Tensor[(6, 9, 11), float32],) {
  %948 = fn () -> (Tensor[(6, 9, 11), float32],) {
    %946 = @func_5010() /* ty=(Tensor[(6, 9, 11), float32],) */;
    %947 = %946.0;
    (%947,)
  };
  %948() /* ty=(Tensor[(6, 9, 11), float32],) */
}

def @func_5011() -> (Tensor[(6, 9, 11), float32],) {
  %956 = fn () -> (Tensor[(6, 9, 11), float32],) {
    %949 = @func_4928() /* ty=(Tensor[(6, 9, 11), int16],) */;
    %950 = %949.0;
    %951 = cast(meta[relay.Constant][58] /* ty=Tensor[(6, 9, 11), int16] */, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
    %952 = shape_of(%950, dtype="int32") /* ty=Tensor[(3), int32] */;
    %953 = cast(%950, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
    %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %955 = power(%953, %954) /* ty=Tensor[(6, 9, 11), float32] */;
    (%955,)
  };
  %956() /* ty=(Tensor[(6, 9, 11), float32],) */
}

def @func_5626(%var_5615: Tensor[(4, 14, 15), float32]) -> (Tensor[(4, 14, 15), float32], Tensor[(6, 9, 11), float64]) {
  %957 = cast(%var_5615, dtype="float32") /* ty=Tensor[(4, 14, 15), float32] */;
  %958 = @func_3842() /* ty=(Tensor[(6, 9, 11), float64],) */;
  %959 = asinh(%957) /* ty=Tensor[(4, 14, 15), float32] */;
  %960 = %958.0;
  (%959, %960)
}

def @func_4481() -> Tensor[(6, 9, 11), int16] {
  %961 = @func_4256() /* ty=Tensor[(6, 9, 11), float32] */;
  %962 = cast(%961, dtype="float32") /* ty=Tensor[(6, 9, 11), float32] */;
  %963 = acos(%962) /* ty=Tensor[(6, 9, 11), float32] */;
  %964 = cast(%961, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
  %965 = shape_of(%963, dtype="int32") /* ty=Tensor[(3), int32] */;
  %966 = cast(%963, dtype="bool") /* ty=Tensor[(6, 9, 11), bool] */;
  %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %968 = equal(%966, %967) /* ty=Tensor[(6, 9, 11), bool] */;
  %969 = cast(%968, dtype="int16") /* ty=Tensor[(6, 9, 11), int16] */;
  %970 = shape_of(%961, dtype="int32") /* ty=Tensor[(3), int32] */;
  %971 = cast(%961, dtype="int16") /* ty=Tensor[(6, 9, 11), int16] */;
  %972 = dyn.reshape(%969, %970, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  add(%971, %972) /* ty=Tensor[(6, 9, 11), int16] */
}

def @func_7351(%var_7329: Tensor[(1, 15, 6), float32]) -> (Tensor[(1, 15, 6), float32],) {
  %973 = cast(%var_7329, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
  %974 = log2(%973) /* ty=Tensor[(1, 15, 6), float32] */;
  (%974,)
}

def @func_9138() -> (Tensor[(3, 2, 9), float32],) {
  %977 = fn () -> (Tensor[(3, 2, 9), float32],) {
    %975 = @func_4160() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32]) */;
    %976 = %975.1;
    (%976,)
  };
  %977() /* ty=(Tensor[(3, 2, 9), float32],) */
}

def @func_7586() -> Tensor[(6, 9, 11), float32] {
  @func_7584() /* ty=Tensor[(6, 9, 11), float32] */
}

def @func_9173() -> (Tensor[(12, 8, 15), int64], Tensor[(54), float32], Tensor[(1440), float64], Tensor[(8, 9, 3), float32]) {
  %993 = fn () -> (Tensor[(12, 8, 15), int64], Tensor[(54), float32], Tensor[(1440), float64], Tensor[(8, 9, 3), float32]) {
    %978 = cast(meta[relay.Constant][59] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
    %979 = cast(meta[relay.Constant][60] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
    %980 = reshape(%978, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), float32] */;
    %981 = reshape(%979, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), float64] */;
    %982 = @func_4545(%980, %981) /* ty=(Tensor[(3, 2, 9), int8], Tensor[(26, 5), uint32], Tensor[(1440), int32], Tensor[(12, 8, 15), int64]) */;
    %983 = cast(meta[relay.Constant][61] /* ty=Tensor[(8, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 9, 3), float32] */;
    %984 = asin(%983) /* ty=Tensor[(8, 9, 3), float32] */;
    %985 = cast(%984, dtype="float64") /* ty=Tensor[(8, 9, 3), float64] */;
    %986 = sigmoid(%985) /* ty=Tensor[(8, 9, 3), float64] */;
    %987 = cast(%984, dtype="float32") /* ty=Tensor[(8, 9, 3), float32] */;
    %988 = shape_of(%986, dtype="int32") /* ty=Tensor[(3), int32] */;
    %989 = cast(%986, dtype="float32") /* ty=Tensor[(8, 9, 3), float32] */;
    %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %991 = %982.3;
    %992 = minimum(%989, %990) /* ty=Tensor[(8, 9, 3), float32] */;
    (%991, meta[relay.Constant][59] /* ty=Tensor[(54), float32] */, meta[relay.Constant][60] /* ty=Tensor[(1440), float64] */, %992)
  };
  %993() /* ty=(Tensor[(12, 8, 15), int64], Tensor[(54), float32], Tensor[(1440), float64], Tensor[(8, 9, 3), float32]) */
}

def @func_9943() -> Tensor[(112), int32] {
  @func_9941() /* ty=Tensor[(112), int32] */
}

def @func_6110() -> (Tensor[(3, 2, 9), float32],) {
  %996 = fn () -> (Tensor[(3, 2, 9), float32],) {
    %994 = @func_5204() /* ty=(Tensor[(3, 2, 9), float32], Tensor[(3, 2, 9), float32], Tensor[(11, 3, 15), float64], Tensor[(495), float64]) */;
    %995 = %994.0;
    (%995,)
  };
  %996() /* ty=(Tensor[(3, 2, 9), float32],) */
}

def @func_7577() -> (Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) {
  @func_7575() /* ty=(Tensor[(6, 9, 11), int16], Tensor[(3, 2, 9), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen352/build/output.py", line 2782, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:09:29] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

