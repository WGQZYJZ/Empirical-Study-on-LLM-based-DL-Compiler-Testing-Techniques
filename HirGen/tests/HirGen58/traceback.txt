==========mod==========
#[version = "0.0.5"]
def @func_1595(%var_1584: float64, %var_1585: Tensor[(12, 8, 11), float64]) -> (Tensor[(12, 8, 11), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64]) {
  %0 = cast(%var_1584, dtype="float64") /* ty=float64 */;
  %1 = cast(%var_1585, dtype="float64") /* ty=Tensor[(12, 8, 11), float64] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(195), float64] */, dtype="float64") /* ty=Tensor[(195), float64] */;
  %3 = reshape(%2, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), float64] */;
  %4 = @func_69(%3) /* ty=(Tensor[(3, 13, 5), float64],) */;
  %5 = divide(%0, %1) /* ty=Tensor[(12, 8, 11), float64] */;
  %6 = %4.0;
  (%5, %6, meta[relay.Constant][0] /* ty=Tensor[(195), float64] */)
}

def @func_3466(%var_3407: Tensor[(400, 1), uint8]) -> (Tensor[(400), uint8], Tensor[(400, 1), uint8], Tensor[(3, 13, 5), float64], float64, Tensor[(1056), float64], Tensor[(3, 13, 5), float64], Tensor[(13, 15, 11), float64], Tensor[(13, 15, 11), uint8], Tensor[(15, 4, 6), float64], Tensor[(360), float64], Tensor[(13, 15, 11), float64]) {
  %7 = cast(%var_3407, dtype="uint8") /* ty=Tensor[(400, 1), uint8] */;
  %8 = reshape(%7, newshape=[400]) /* ty=Tensor[(400), uint8] */;
  %9 = @func_3240(%8) /* ty=(Tensor[(13, 15, 11), uint8], uint8, Tensor[(400), uint8], Tensor[(16, 5, 5), float32], Tensor[(1, 7, 2), float64], Tensor[(7, 2), uint8], Tensor[(56, 2), uint8]) */;
  %10 = cast(3.88888f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %12 = reshape(%10, newshape=[]) /* ty=float64 */;
  %13 = reshape(%11, newshape=[12, 8, 11]) /* ty=Tensor[(12, 8, 11), float64] */;
  %14 = @func_1595(%12, %13) /* ty=(Tensor[(12, 8, 11), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64]) */;
  %15 = %14.1;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %17 = reshape(%16, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), float64] */;
  %18 = @func_69(%17) /* ty=(Tensor[(3, 13, 5), float64],) */;
  %19 = @func_3292() /* ty=Tensor[(13, 15, 11), bool] */;
  %20 = cast(%19, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %21 = log10(%20) /* ty=Tensor[(13, 15, 11), float32] */;
  %22 = cast(%21, dtype="float64") /* ty=Tensor[(13, 15, 11), float64] */;
  %23 = rsqrt(%22) /* ty=Tensor[(13, 15, 11), float64] */;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(13, 15, 11), float64] */;
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %26 = reshape(%25, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float64] */;
  %27 = cast(%23, dtype="float64") /* ty=Tensor[(13, 15, 11), float64] */;
  %28 = %9.2;
  %29 = %18.0;
  %30 = log2(%24) /* ty=Tensor[(13, 15, 11), float64] */;
  %31 = @func_3167() /* ty=Tensor[(13, 15, 11), uint8] */;
  %32 = @func_241(%26) /* ty=Tensor[(15, 4, 6), float64] */;
  %33 = sinh(%27) /* ty=Tensor[(13, 15, 11), float64] */;
  (%28, %var_3407, %15, 3.88888f64 /* ty=float64 */, meta[relay.Constant][1] /* ty=Tensor[(1056), float64] */, %29, %30, %31, %32, meta[relay.Constant][2] /* ty=Tensor[(360), float64] */, %33)
}

def @func_4019() -> Tensor[(13, 15, 11), bool] {
  @func_3592() /* ty=Tensor[(13, 15, 11), bool] */
}

def @func_5472(%var_5407: Tensor[(9, 2, 3), float64], %var_5453: Tensor[(14, 1), uint8]) -> (Tensor[(9, 2, 3), bool], Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), float32], Tensor[(15, 4, 6), float32], Tensor[(14, 1), uint8], Tensor[(13, 15, 11), bool]) {
  %34 = @func_5175() /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(27), float32], Tensor[(27), float32], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %35 = %34.3;
  %36 = cast(%var_5407, dtype="bool") /* ty=Tensor[(9, 2, 3), bool] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="bool") /* ty=Tensor[(9, 2, 3), bool] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %40 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %41 = %40.1;
  %42 = cast(%41, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %43 = cast(%41, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %44 = cast(%var_5453, dtype="uint8") /* ty=Tensor[(14, 1), uint8] */;
  %45 = reshape(%42, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), bool] */;
  %46 = reshape(%43, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), float32] */;
  %47 = reshape(%44, newshape=[1, 14]) /* ty=Tensor[(1, 14), uint8] */;
  %48 = @func_4499(%45, %46, %47) /* ty=(Tensor[(2400), int32], Tensor[(13, 15, 11), bool], Tensor[(1, 7, 2), float64], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(13, 15, 11), float32], Tensor[(15, 4, 6), float32]) */;
  %49 = @func_4781() /* ty=(Tensor[(13, 15, 11), bool],) */;
  %50 = logical_or(%38, %39) /* ty=Tensor[(9, 2, 3), bool] */;
  %51 = @func_3666() /* ty=Tensor[(13, 15, 11), float32] */;
  %52 = %48.6;
  %53 = %49.0;
  (%50, %41, %51, %52, %var_5453, %53)
}

def @func_5939(%var_5909: Tensor[(11, 12, 13), float64]) -> (Tensor[(11, 12, 13), float64], Tensor[(11, 12, 13), float64], Tensor[(13, 6, 8), float64]) {
  %54 = cast(%var_5909, dtype="float64") /* ty=Tensor[(11, 12, 13), float64] */;
  %55 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(11, 12, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(11, 12, 13), float64] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %58 = cast(%var_5909, dtype="float64") /* ty=Tensor[(11, 12, 13), float64] */;
  %59 = cast(meta[relay.Constant][4] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %61 = reshape(%59, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %62 = reshape(%60, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %63 = @func_1417(%61, %62) /* ty=Tensor[(13, 6, 8), uint64] */;
  %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(624), uint64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%63, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %68 = divide(%56, %57) /* ty=Tensor[(11, 12, 13), float64] */;
  %69 = cos(%58) /* ty=Tensor[(11, 12, 13), float64] */;
  %70 = divide(%66, %67) /* ty=Tensor[(13, 6, 8), float64] */;
  (%68, %69, %70)
}

def @func_241(%var_238: Tensor[(15, 4, 6), float64]) -> Tensor[(15, 4, 6), float64] {
  %71 = cast(%var_238, dtype="float64") /* ty=Tensor[(15, 4, 6), float64] */;
  atan(%71) /* ty=Tensor[(15, 4, 6), float64] */
}

def @func_5218() -> (Tensor[(13, 15, 11), float64],) {
  %72 = @func_4955() /* ty=(Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8]) */;
  %73 = %72.1;
  %74 = cast(%73, dtype="float64") /* ty=Tensor[(13, 15, 11), float64] */;
  %75 = log(%74) /* ty=Tensor[(13, 15, 11), float64] */;
  (%75,)
}

def @func_752(%var_729: Tensor[(6, 7, 8), float64], %var_742: Tensor[(3, 9), float32]) -> (Tensor[(6, 7, 8), bool], Tensor[(1, 3, 9), float32], Tensor[(3, 9), float32], Tensor[(1, 3, 9), float32]) {
  %76 = cast(%var_729, dtype="float64") /* ty=Tensor[(6, 7, 8), float64] */;
  %77 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(6, 7, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 8), float64] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %80 = floor_mod(%78, %79) /* ty=Tensor[(6, 7, 8), float64] */;
  %81 = cast(%80, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
  %82 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(6, 7, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 7, 8), float64] */, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %85 = cast(%var_742, dtype="float32") /* ty=Tensor[(3, 9), float32] */;
  %86 = reshape(%85, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
  %87 = @func_212(%86) /* ty=(Tensor[(1, 3, 9), float32],) */;
  %88 = %87.0;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %90 = reshape(%89, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
  %91 = @func_212(%90) /* ty=(Tensor[(1, 3, 9), float32],) */;
  %92 = not_equal(%83, %84) /* ty=Tensor[(6, 7, 8), bool] */;
  %93 = %91.0;
  (%92, %88, %var_742, %93)
}

def @func_3292() -> Tensor[(13, 15, 11), bool] {
  %94 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %95 = %94.0;
  %96 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %97 = %96.0;
  %98 = cast(%97, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %99 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%95, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%100, %101) /* ty=Tensor[(13, 15, 11), bool] */
}

def @func_3240(%var_3212: Tensor[(400), uint8]) -> (Tensor[(13, 15, 11), uint8], uint8, Tensor[(400), uint8], Tensor[(16, 5, 5), float32], Tensor[(1, 7, 2), float64], Tensor[(7, 2), uint8], Tensor[(56, 2), uint8]) {
  %102 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %103 = cast(meta[relay.Constant][6] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %104 = cast(%var_3212, dtype="uint8") /* ty=Tensor[(400), uint8] */;
  %105 = reshape(%103, newshape=[]) /* ty=uint8 */;
  %106 = reshape(%104, newshape=[16, 5, 5]) /* ty=Tensor[(16, 5, 5), uint8] */;
  %107 = @func_350(%105, %106) /* ty=(Tensor[(16, 5, 5), uint8],) */;
  %108 = %107.0;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(16, 5, 5), float32] */;
  %110 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 2), uint8] */, dtype="uint8") /* ty=Tensor[(7, 2), uint8] */;
  %111 = cast(meta[relay.Constant][8] /* ty=Tensor[(56, 2), uint8] */, dtype="uint8") /* ty=Tensor[(56, 2), uint8] */;
  %112 = reshape(%110, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), uint8] */;
  %113 = reshape(%111, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), uint8] */;
  %114 = @func_1168(%112, %113) /* ty=(Tensor[(8, 7, 2), uint8], Tensor[(1, 7, 2), float64], Tensor[(?, 7, 2), bool]) */;
  %115 = %102.0;
  %116 = cosh(%109) /* ty=Tensor[(16, 5, 5), float32] */;
  %117 = %114.1;
  (%115, meta[relay.Constant][6] /* ty=uint8 */, %var_3212, %116, %117, meta[relay.Constant][7] /* ty=Tensor[(7, 2), uint8] */, meta[relay.Constant][8] /* ty=Tensor[(56, 2), uint8] */)
}

def @func_3666() -> Tensor[(13, 15, 11), float32] {
  %118 = @func_3592() /* ty=Tensor[(13, 15, 11), bool] */;
  %119 = cast(%118, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  asin(%119) /* ty=Tensor[(13, 15, 11), float32] */
}

def @func_5303() -> (Tensor[(13, 15, 11), bool],) {
  %120 = @func_4019() /* ty=Tensor[(13, 15, 11), bool] */;
  (%120,)
}

def @func_4758() -> Tensor[(11, 4, 8), float32] {
  %121 = @func_4194() /* ty=(Tensor[(11, 4, 8), float32],) */;
  %121.0
}

def @func_2097(%var_2038: Tensor[(16, 5, 11), uint64], %var_2039: Tensor[(16, 5, 11), uint64], %var_2077: Tensor[(640), float32], %var_2078: Tensor[(195), float64]) -> (Tensor[(16, 5, 11), uint64], Tensor[(4, 16, 10), float64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(1008), uint64], Tensor[(624), uint64]) {
  %122 = cast(%var_2039, dtype="uint64") /* ty=Tensor[(16, 5, 11), uint64] */;
  %123 = shape_of(%var_2038, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%var_2038, dtype="uint64") /* ty=Tensor[(16, 5, 11), uint64] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %126 = cast(%var_2077, dtype="float32") /* ty=Tensor[(640), float32] */;
  %127 = cast(%var_2078, dtype="float64") /* ty=Tensor[(195), float64] */;
  %128 = cast(meta[relay.Constant][9] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %129 = cast(meta[relay.Constant][10] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %130 = cast(%var_2077, dtype="float32") /* ty=Tensor[(640), float32] */;
  %131 = reshape(%126, newshape=[4, 16, 10]) /* ty=Tensor[(4, 16, 10), float32] */;
  %132 = reshape(%127, newshape=[195]) /* ty=Tensor[(195), float64] */;
  %133 = reshape(%128, newshape=[1, 1008]) /* ty=Tensor[(1, 1008), uint64] */;
  %134 = reshape(%129, newshape=[624]) /* ty=Tensor[(624), uint64] */;
  %135 = reshape(%130, newshape=[4, 16, 10]) /* ty=Tensor[(4, 16, 10), float32] */;
  %136 = @func_1897(%131, %132, %133, %134, %135) /* ty=(Tensor[(4, 16, 10), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 1008), uint64], Tensor[(27), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64], Tensor[(9, 2, 3), float64], Tensor[(13, 6, 8), uint64], Tensor[(4, 16, 10), bool], Tensor[(13, 6, 8), uint64]) */;
  %137 = add(%124, %125) /* ty=Tensor[(16, 5, 11), uint64] */;
  %138 = %136.0;
  (%137, %138, %var_2077, %var_2078, meta[relay.Constant][9] /* ty=Tensor[(1008), uint64] */, meta[relay.Constant][10] /* ty=Tensor[(624), uint64] */)
}

def @func_4194() -> (Tensor[(11, 4, 8), float32],) {
  %139 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %140 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(11, 4, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %143 = power(%141, %142) /* ty=Tensor[(11, 4, 8), float32] */;
  (%143,)
}

def @func_4781() -> (Tensor[(13, 15, 11), bool],) {
  %144 = @func_4019() /* ty=Tensor[(13, 15, 11), bool] */;
  (%144,)
}

def @func_5276(%var_5269: int8) -> (Tensor[(13, 2, 14), int8],) {
  %145 = cast(%var_5269, dtype="int8") /* ty=int8 */;
  %146 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 2, 14), int8] */, dtype="int8") /* ty=Tensor[(13, 2, 14), int8] */;
  %147 = subtract(%145, %146) /* ty=Tensor[(13, 2, 14), int8] */;
  (%147,)
}

def @func_1897(%var_1807: Tensor[(4, 16, 10), float32], %var_1819: Tensor[(195), float64], %var_1829: Tensor[(1, 1008), uint64], %var_1842: Tensor[(624), uint64], %var_1866: Tensor[(4, 16, 10), float32]) -> (Tensor[(4, 16, 10), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 1008), uint64], Tensor[(27), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64], Tensor[(9, 2, 3), float64], Tensor[(13, 6, 8), uint64], Tensor[(4, 16, 10), bool], Tensor[(13, 6, 8), uint64]) {
  %148 = cast(%var_1807, dtype="float32") /* ty=Tensor[(4, 16, 10), float32] */;
  %149 = sinh(%148) /* ty=Tensor[(4, 16, 10), float32] */;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(4, 16, 10), float64] */;
  %151 = cast(%var_1819, dtype="float64") /* ty=Tensor[(195), float64] */;
  %152 = reshape(%151, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), float64] */;
  %153 = @func_69(%152) /* ty=(Tensor[(3, 13, 5), float64],) */;
  %154 = cast(meta[relay.Constant][14] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %155 = reshape(%154, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %156 = @func_1434(%155) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %157 = cast(%var_1829, dtype="uint64") /* ty=Tensor[(1, 1008), uint64] */;
  %158 = cast(%var_1829, dtype="uint64") /* ty=Tensor[(1, 1008), uint64] */;
  %159 = cast(meta[relay.Constant][15] /* ty=Tensor[(27), float32] */, dtype="float32") /* ty=Tensor[(27), float32] */;
  %160 = reshape(%157, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
  %161 = reshape(%158, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
  %162 = reshape(%159, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %163 = @func_408(%160, %161, %162) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) */;
  %164 = cast(%var_1842, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %165 = cast(%var_1842, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %166 = reshape(%164, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %167 = reshape(%165, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %168 = cast(meta[relay.Constant][14] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %169 = reshape(%168, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %170 = @func_1434(%169) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %171 = cast(%var_1842, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %172 = @func_1417(%166, %167) /* ty=Tensor[(13, 6, 8), uint64] */;
  %173 = cast(%172, dtype="uint64") /* ty=Tensor[(13, 6, 8), uint64] */;
  %174 = reshape(%171, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %175 = reshape(%173, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %176 = cast(%var_1866, dtype="bool") /* ty=Tensor[(4, 16, 10), bool] */;
  %177 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%149, dtype="bool") /* ty=Tensor[(4, 16, 10), bool] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %180 = cast(%var_1842, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %181 = @func_1417(%174, %175) /* ty=Tensor[(13, 6, 8), uint64] */;
  %182 = cast(%181, dtype="uint64") /* ty=Tensor[(13, 6, 8), uint64] */;
  %183 = reshape(%180, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %184 = reshape(%182, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %185 = log2(%150) /* ty=Tensor[(4, 16, 10), float64] */;
  %186 = %153.0;
  %187 = %156.0;
  %188 = %163.2;
  %189 = %170.0;
  %190 = logical_and(%178, %179) /* ty=Tensor[(4, 16, 10), bool] */;
  %191 = @func_1417(%183, %184) /* ty=Tensor[(13, 6, 8), uint64] */;
  (%185, %186, %var_1819, %187, meta[relay.Constant][14] /* ty=Tensor[(54), float64] */, %188, %var_1829, meta[relay.Constant][15] /* ty=Tensor[(27), float32] */, %172, %var_1842, %189, %181, %190, %191)
}

def @func_3141() -> (Tensor[(13, 15, 11), uint8],) {
  %192 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 15, 11), float64] */;
  %193 = cosh(%192) /* ty=Tensor[(13, 15, 11), float64] */;
  %194 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 15, 11), float64] */, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%193, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %198 = right_shift(%196, %197) /* ty=Tensor[(13, 15, 11), uint8] */;
  (%198,)
}

def @func_4333(%var_4317: Tensor[(3, 9), float32]) -> (Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8], Tensor[(27), float32], Tensor[(1008), uint64], Tensor[(3, 9), float32]) {
  %199 = cast(meta[relay.Constant][17] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %200 = cast(meta[relay.Constant][17] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %201 = cast(%var_4317, dtype="float32") /* ty=Tensor[(3, 9), float32] */;
  %202 = reshape(%199, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
  %203 = reshape(%200, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
  %204 = reshape(%201, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %205 = @func_408(%202, %203, %204) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) */;
  %206 = @func_3292() /* ty=Tensor[(13, 15, 11), bool] */;
  %207 = @func_3167() /* ty=Tensor[(13, 15, 11), uint8] */;
  %208 = %205.4;
  (%206, %207, %208, meta[relay.Constant][17] /* ty=Tensor[(1008), uint64] */, %var_4317)
}

def @func_4909(%var_4886: float32, %var_4896: Tensor[(16, 6, 14), float32]) -> (Tensor[(9, 10, 11), float32], Tensor[(16, 6, 14), uint32]) {
  %209 = cast(%var_4886, dtype="float32") /* ty=float32 */;
  %210 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 10, 11), float32] */, dtype="float32") /* ty=Tensor[(9, 10, 11), float32] */;
  %211 = cast(%var_4886, dtype="uint32") /* ty=uint32 */;
  %212 = cast(%var_4896, dtype="uint32") /* ty=Tensor[(16, 6, 14), uint32] */;
  %213 = floor_mod(%209, %210) /* ty=Tensor[(9, 10, 11), float32] */;
  %214 = add(%211, %212) /* ty=Tensor[(16, 6, 14), uint32] */;
  (%213, %214)
}

def @func_6165() -> (Tensor[(11, 4, 8), float32], Tensor[(11, 4, 8), int16], Tensor[(3, 13, 5), float64], Tensor[(1, 195), float64]) {
  %215 = @func_5233() /* ty=(Tensor[(11, 4, 8), float32],) */;
  %216 = %215.0;
  %217 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 4, 8), float32] */, dtype="int16") /* ty=Tensor[(11, 4, 8), int16] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="int16") /* ty=Tensor[(11, 4, 8), int16] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %221 = multiply(%219, %220) /* ty=Tensor[(11, 4, 8), int16] */;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %223 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 4, 8), float32] */, dtype="int16") /* ty=Tensor[(11, 4, 8), int16] */;
  %224 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%221, dtype="int16") /* ty=Tensor[(11, 4, 8), int16] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %227 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 195), float64] */, dtype="float64") /* ty=Tensor[(1, 195), float64] */;
  %228 = reshape(%227, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), float64] */;
  %229 = @func_69(%228) /* ty=(Tensor[(3, 13, 5), float64],) */;
  %230 = rsqrt(%222) /* ty=Tensor[(11, 4, 8), float32] */;
  %231 = minimum(%225, %226) /* ty=Tensor[(11, 4, 8), int16] */;
  %232 = %229.0;
  (%230, %231, %232, meta[relay.Constant][20] /* ty=Tensor[(1, 195), float64] */)
}

def @func_4528() -> (Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) {
  %233 = @func_4194() /* ty=(Tensor[(11, 4, 8), float32],) */;
  %234 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %235 = %233.0;
  %236 = %234.0;
  (%235, %236)
}

def @func_4955() -> (Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8]) {
  %237 = @func_3592() /* ty=Tensor[(13, 15, 11), bool] */;
  %238 = cast(%237, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %239 = reshape(%238, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), uint8] */;
  %240 = @func_3522(%239) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), int16], Tensor[(3, 18), float64], Tensor[(9, 2, 3), float32], Tensor[(13, 15, 11), bool]) */;
  %241 = %240.0;
  (%237, %241)
}

def @func_212(%var_199: Tensor[(1, 3, 9), float32]) -> (Tensor[(1, 3, 9), float32],) {
  %242 = cast(%var_199, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %243 = erf(%242) /* ty=Tensor[(1, 3, 9), float32] */;
  (%243,)
}

def @func_3167() -> Tensor[(13, 15, 11), uint8] {
  %244 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %244.0
}

def @func_5233() -> (Tensor[(11, 4, 8), float32],) {
  %245 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %246 = %245.0;
  (%246,)
}

def @func_623(%var_613: Tensor[(2, 14, 13), float64]) -> (Tensor[(2, 14, 13), float64],) {
  %247 = cast(%var_613, dtype="float64") /* ty=Tensor[(2, 14, 13), float64] */;
  %248 = tan(%247) /* ty=Tensor[(2, 14, 13), float64] */;
  (%248,)
}

def @func_5530() -> Tensor[(13, 15, 11), bool] {
  @func_4019() /* ty=Tensor[(13, 15, 11), bool] */
}

def @func_1168(%var_1143: Tensor[(1, 7, 2), uint8], %var_1144: Tensor[(8, 7, 2), uint8]) -> (Tensor[(8, 7, 2), uint8], Tensor[(1, 7, 2), float64], Tensor[(?, 7, 2), bool]) {
  %249 = cast(%var_1143, dtype="uint8") /* ty=Tensor[(1, 7, 2), uint8] */;
  %250 = cast(%var_1144, dtype="uint8") /* ty=Tensor[(8, 7, 2), uint8] */;
  %251 = cast(%var_1143, dtype="float32") /* ty=Tensor[(1, 7, 2), float32] */;
  %252 = log10(%251) /* ty=Tensor[(1, 7, 2), float32] */;
  %253 = cast(%252, dtype="float64") /* ty=Tensor[(1, 7, 2), float64] */;
  %254 = log(%253) /* ty=Tensor[(1, 7, 2), float64] */;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(1, 7, 2), float64] */;
  %256 = cast(%var_1143, dtype="bool") /* ty=Tensor[(1, 7, 2), bool] */;
  %257 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%254, dtype="bool") /* ty=Tensor[(1, 7, 2), bool] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %260 = bitwise_and(%249, %250) /* ty=Tensor[(8, 7, 2), uint8] */;
  %261 = atanh(%255) /* ty=Tensor[(1, 7, 2), float64] */;
  %262 = equal(%258, %259) /* ty=Tensor[(?, 7, 2), bool] */;
  (%260, %261, %262)
}

def @func_5865() -> (Tensor[(11, 4, 8), float64], Tensor[(13, 15, 11), bool]) {
  %263 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %264 = %263.0;
  %265 = cast(%264, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %266 = sigmoid(%265) /* ty=Tensor[(11, 4, 8), float32] */;
  %267 = cast(%264, dtype="float64") /* ty=Tensor[(11, 4, 8), float64] */;
  %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%266, dtype="float64") /* ty=Tensor[(11, 4, 8), float64] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %271 = @func_4781() /* ty=(Tensor[(13, 15, 11), bool],) */;
  %272 = add(%269, %270) /* ty=Tensor[(11, 4, 8), float64] */;
  %273 = %271.0;
  (%272, %273)
}

def @func_1417(%var_1406: Tensor[(13, 6, 8), uint64], %var_1407: Tensor[(13, 6, 8), uint64]) -> Tensor[(13, 6, 8), uint64] {
  %274 = cast(%var_1407, dtype="uint64") /* ty=Tensor[(13, 6, 8), uint64] */;
  %275 = shape_of(%var_1406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%var_1406, dtype="uint64") /* ty=Tensor[(13, 6, 8), uint64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%276, %277) /* ty=Tensor[(13, 6, 8), uint64] */
}

def @func_5803(%var_5780: Tensor[(13, 15, 11), bool]) -> (Tensor[(13, 15, 11), uint16], Tensor[(13, 15, 11), bool]) {
  %278 = @func_3592() /* ty=Tensor[(13, 15, 11), bool] */;
  %279 = cast(%var_5780, dtype="uint16") /* ty=Tensor[(13, 15, 11), uint16] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%278, dtype="uint16") /* ty=Tensor[(13, 15, 11), uint16] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %283 = logical_xor(%281, %282) /* ty=Tensor[(13, 15, 11), uint16] */;
  %284 = @func_5559() /* ty=Tensor[(13, 15, 11), bool] */;
  (%283, %284)
}

def @func_6116(%var_6097: Tensor[(11, 4, 8), float32]) -> (Tensor[(11, 4, 8), float32], Tensor[(11, 4, 8), bool]) {
  %285 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %286 = %285.0;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %288 = cast(%var_6097, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
  %289 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%286, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %292 = atan(%287) /* ty=Tensor[(11, 4, 8), float32] */;
  %293 = less(%290, %291) /* ty=Tensor[(11, 4, 8), bool] */;
  (%292, %293)
}

def @func_6362() -> Tensor[(11, 4, 8), int16] {
  %294 = @func_6165() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(11, 4, 8), int16], Tensor[(3, 13, 5), float64], Tensor[(1, 195), float64]) */;
  %294.1
}

def @func_3565(%var_3556: Tensor[(13, 15, 11), uint8]) -> (Tensor[(13, 15, 11), uint64], Tensor[(13, 15, 11), float32]) {
  %295 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %296 = %295.0;
  %297 = cast(%var_3556, dtype="uint64") /* ty=Tensor[(13, 15, 11), uint64] */;
  %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%296, dtype="uint64") /* ty=Tensor[(13, 15, 11), uint64] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %301 = cast(%var_3556, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %302 = bitwise_and(%299, %300) /* ty=Tensor[(13, 15, 11), uint64] */;
  %303 = acosh(%301) /* ty=Tensor[(13, 15, 11), float32] */;
  (%302, %303)
}

def @func_5559() -> Tensor[(13, 15, 11), bool] {
  %304 = @func_4955() /* ty=(Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8]) */;
  %304.0
}

def @func_5766(%var_5695: float64, %var_5696: Tensor[(7, 15, 5), float64]) -> (Tensor[(7, 15, 5), uint32], Tensor[(13, 15, 11), float32], Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), float32], Tensor[(2145), bool]) {
  %305 = cast(%var_5695, dtype="float64") /* ty=float64 */;
  %306 = cast(%var_5696, dtype="float64") /* ty=Tensor[(7, 15, 5), float64] */;
  %307 = floor_divide(%305, %306) /* ty=Tensor[(7, 15, 5), float64] */;
  %308 = cast(%var_5695, dtype="uint32") /* ty=uint32 */;
  %309 = cast(%307, dtype="uint32") /* ty=Tensor[(7, 15, 5), uint32] */;
  %310 = cast(meta[relay.Constant][21] /* ty=Tensor[(2145), bool] */, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %311 = cast(meta[relay.Constant][21] /* ty=Tensor[(2145), bool] */, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %312 = reshape(%310, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), bool] */;
  %313 = reshape(%311, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), bool] */;
  %314 = @func_3981(%312, %313) /* ty=(Tensor[(15, 4, 6), int64], Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), float32], Tensor[(13, 15, 11), float32], Tensor[(2400), float64]) */;
  %315 = cast(meta[relay.Constant][21] /* ty=Tensor[(2145), bool] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %316 = asin(%315) /* ty=Tensor[(2145), float32] */;
  %317 = cast(meta[relay.Constant][22] /* ty=Tensor[(2145), float32] */, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(1), int32] */;
  %319 = cast(%316, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?), bool] */;
  %321 = multiply(%308, %309) /* ty=Tensor[(7, 15, 5), uint32] */;
  %322 = %314.2;
  %323 = @func_3592() /* ty=Tensor[(13, 15, 11), bool] */;
  %324 = @func_3666() /* ty=Tensor[(13, 15, 11), float32] */;
  %325 = less(%319, %320) /* ty=Tensor[(2145), bool] */;
  (%321, %322, %323, %324, %325)
}

def @main(%var_6530: Tensor[(12, 12, 4), uint16]) -> (Tensor[(12, 12, 4), bool], Tensor[(12, 12, 4), float64]) {
  %326 = cast(%var_6530, dtype="bool") /* ty=Tensor[(12, 12, 4), bool] */;
  %327 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(12, 12, 4), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 12, 4), uint16] */, dtype="bool") /* ty=Tensor[(12, 12, 4), bool] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %330 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 12, 4), uint16] */, dtype="float64") /* ty=Tensor[(12, 12, 4), float64] */;
  %331 = less_equal(%328, %329) /* ty=Tensor[(12, 12, 4), bool] */;
  %332 = rsqrt(%330) /* ty=Tensor[(12, 12, 4), float64] */;
  (%331, %332)
}

def @func_3808(%var_3742: Tensor[(7, 1, 1), int64], %var_3743: Tensor[(7, 9, 1), int64], %var_3800: Tensor[(640), float32], %var_3801: Tensor[(195), float64], %var_3803: Tensor[(24, 26), uint64]) -> (Tensor[(7, 9, 1), bool], Tensor[(13, 6, 8), uint64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(12, 84), uint64], Tensor[(24, 26), uint64]) {
  %333 = cast(%var_3742, dtype="bool") /* ty=Tensor[(7, 1, 1), bool] */;
  %334 = cast(%var_3743, dtype="bool") /* ty=Tensor[(7, 9, 1), bool] */;
  %335 = cast(%var_3800, dtype="float32") /* ty=Tensor[(640), float32] */;
  %336 = cast(%var_3801, dtype="float64") /* ty=Tensor[(195), float64] */;
  %337 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 84), uint64] */, dtype="uint64") /* ty=Tensor[(12, 84), uint64] */;
  %338 = cast(%var_3803, dtype="uint64") /* ty=Tensor[(24, 26), uint64] */;
  %339 = cast(%var_3800, dtype="float32") /* ty=Tensor[(640), float32] */;
  %340 = reshape(%335, newshape=[4, 16, 10]) /* ty=Tensor[(4, 16, 10), float32] */;
  %341 = reshape(%336, newshape=[195]) /* ty=Tensor[(195), float64] */;
  %342 = reshape(%337, newshape=[1, 1008]) /* ty=Tensor[(1, 1008), uint64] */;
  %343 = reshape(%338, newshape=[624]) /* ty=Tensor[(624), uint64] */;
  %344 = reshape(%339, newshape=[4, 16, 10]) /* ty=Tensor[(4, 16, 10), float32] */;
  %345 = @func_1897(%340, %341, %342, %343, %344) /* ty=(Tensor[(4, 16, 10), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 1008), uint64], Tensor[(27), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64], Tensor[(9, 2, 3), float64], Tensor[(13, 6, 8), uint64], Tensor[(4, 16, 10), bool], Tensor[(13, 6, 8), uint64]) */;
  %346 = greater_equal(%333, %334) /* ty=Tensor[(7, 9, 1), bool] */;
  %347 = %345.8;
  (%346, %347, %var_3800, %var_3801, meta[relay.Constant][24] /* ty=Tensor[(12, 84), uint64] */, %var_3803)
}

def @func_5380(%var_5349: Tensor[(5, 13, 10), float32]) -> (Tensor[(5, 13, 10), float32],) {
  %348 = cast(%var_5349, dtype="float32") /* ty=Tensor[(5, 13, 10), float32] */;
  %349 = atanh(%348) /* ty=Tensor[(5, 13, 10), float32] */;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
  %351 = erf(%350) /* ty=Tensor[(5, 13, 10), float64] */;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(5, 13, 10), float32] */;
  %353 = log2(%352) /* ty=Tensor[(5, 13, 10), float32] */;
  (%353,)
}

def @func_6316(%var_6283: Tensor[(13, 5, 8), int32], %var_6284: Tensor[(13, 5, 8), int32]) -> (Tensor[(13, 15, 11), bool], Tensor[(13, 5, 8), bool]) {
  %354 = cast(%var_6284, dtype="int32") /* ty=Tensor[(13, 5, 8), int32] */;
  %355 = shape_of(%var_6283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%var_6283, dtype="int32") /* ty=Tensor[(13, 5, 8), int32] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %358 = bitwise_xor(%356, %357) /* ty=Tensor[(13, 5, 8), int32] */;
  %359 = cast(%358, dtype="bool") /* ty=Tensor[(13, 5, 8), bool] */;
  %360 = shape_of(%var_6284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%var_6284, dtype="bool") /* ty=Tensor[(13, 5, 8), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %363 = @func_5559() /* ty=Tensor[(13, 15, 11), bool] */;
  %364 = greater_equal(%361, %362) /* ty=Tensor[(13, 5, 8), bool] */;
  (%363, %364)
}

def @func_854(%var_846: Tensor[(16, 1, 3), float64]) -> Tensor[(16, ?, 3), float64] {
  %365 = cast(%var_846, dtype="float64") /* ty=Tensor[(16, 1, 3), float64] */;
  %366 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(16, 1, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 1, 3), float64] */, dtype="float64") /* ty=Tensor[(16, 1, 3), float64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%367, %368) /* ty=Tensor[(16, ?, 3), float64] */
}

def @func_5341() -> (Tensor[(13, 15, 11), bool], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) {
  %369 = @func_4781() /* ty=(Tensor[(13, 15, 11), bool],) */;
  %370 = cast(meta[relay.Constant][26] /* ty=Tensor[(27), float32] */, dtype="float32") /* ty=Tensor[(27), float32] */;
  %371 = reshape(%370, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
  %372 = @func_212(%371) /* ty=(Tensor[(1, 3, 9), float32],) */;
  %373 = %369.0;
  %374 = %372.0;
  (%373, %374, meta[relay.Constant][26] /* ty=Tensor[(27), float32] */)
}

def @func_6201(%var_6179: Tensor[(13, 15, 11), uint8]) -> (Tensor[(13, 15, 11), bool], Tensor[(3, 9), float32], Tensor[(9, 3, 9), float32]) {
  %375 = @func_5967() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %376 = %375.0;
  %377 = cast(%var_6179, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%376, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %381 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 9), float32] */;
  %382 = reshape(%381, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
  %383 = @func_212(%382) /* ty=(Tensor[(1, 3, 9), float32],) */;
  %384 = %383.0;
  %385 = cast(%384, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %386 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 3, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %387 = less(%379, %380) /* ty=Tensor[(13, 15, 11), bool] */;
  %388 = minimum(%385, %386) /* ty=Tensor[(9, 3, 9), float32] */;
  (%387, meta[relay.Constant][27] /* ty=Tensor[(3, 9), float32] */, %388)
}

def @func_4139(%var_4040: float64, %var_4041: Tensor[(1056), float64], %var_4077: Tensor[(63), int64], %var_4079: Tensor[(624), uint64], %var_4112: Tensor[(112), uint8], %var_4127: Tensor[(1008), uint64]) -> (Tensor[(13, 15, 11), uint8], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(1, 7), int64], Tensor[(63), int64], Tensor[(160, 4), float32], Tensor[(624), uint64], Tensor[(1056), float32], Tensor[(1, 7, 2), float64], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(195), float64], Tensor[(1056), int16], Tensor[(624), uint64], Tensor[(1008), uint64]) {
  %389 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %390 = cast(%var_4040, dtype="float64") /* ty=float64 */;
  %391 = cast(%var_4041, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %392 = reshape(%390, newshape=[]) /* ty=float64 */;
  %393 = reshape(%391, newshape=[12, 8, 11]) /* ty=Tensor[(12, 8, 11), float64] */;
  %394 = @func_1595(%392, %393) /* ty=(Tensor[(12, 8, 11), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64]) */;
  %395 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 7), int64] */, dtype="int64") /* ty=Tensor[(1, 7), int64] */;
  %396 = cast(%var_4077, dtype="int64") /* ty=Tensor[(63), int64] */;
  %397 = cast(meta[relay.Constant][30] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %398 = %394.1;
  %399 = cast(%398, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %400 = cast(%var_4079, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %401 = reshape(%395, newshape=[7, 1, 1]) /* ty=Tensor[(7, 1, 1), int64] */;
  %402 = reshape(%396, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), int64] */;
  %403 = reshape(%397, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %404 = reshape(%399, newshape=[195]) /* ty=Tensor[(195), float64] */;
  %405 = reshape(%400, newshape=[24, 26]) /* ty=Tensor[(24, 26), uint64] */;
  %406 = @func_3808(%401, %402, %403, %404, %405) /* ty=(Tensor[(7, 9, 1), bool], Tensor[(13, 6, 8), uint64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(12, 84), uint64], Tensor[(24, 26), uint64]) */;
  %407 = cast(%var_4041, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %408 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 14), uint8] */, dtype="uint8") /* ty=Tensor[(1, 14), uint8] */;
  %409 = cast(%var_4112, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %410 = reshape(%408, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), uint8] */;
  %411 = reshape(%409, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), uint8] */;
  %412 = @func_1168(%410, %411) /* ty=(Tensor[(8, 7, 2), uint8], Tensor[(1, 7, 2), float64], Tensor[(?, 7, 2), bool]) */;
  %413 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 7), int64] */, dtype="int64") /* ty=Tensor[(1, 7), int64] */;
  %414 = cast(%var_4077, dtype="int64") /* ty=Tensor[(63), int64] */;
  %415 = cast(meta[relay.Constant][30] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %416 = cast(%398, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %417 = cast(%var_4079, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %418 = reshape(%413, newshape=[7, 1, 1]) /* ty=Tensor[(7, 1, 1), int64] */;
  %419 = reshape(%414, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), int64] */;
  %420 = reshape(%415, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %421 = reshape(%416, newshape=[195]) /* ty=Tensor[(195), float64] */;
  %422 = reshape(%417, newshape=[24, 26]) /* ty=Tensor[(24, 26), uint64] */;
  %423 = @func_3808(%418, %419, %420, %421, %422) /* ty=(Tensor[(7, 9, 1), bool], Tensor[(13, 6, 8), uint64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(12, 84), uint64], Tensor[(24, 26), uint64]) */;
  %424 = cast(%var_4041, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %425 = rsqrt(%424) /* ty=Tensor[(1056), float32] */;
  %426 = cast(%425, dtype="bool") /* ty=Tensor[(1056), bool] */;
  %427 = cast(%var_4040, dtype="bool") /* ty=bool */;
  %428 = logical_and(%426, %427) /* ty=Tensor[(1056), bool] */;
  %429 = cast(%var_4041, dtype="int16") /* ty=Tensor[(1056), int16] */;
  %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(1), int32] */;
  %431 = cast(%428, dtype="int16") /* ty=Tensor[(1056), int16] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?), int16] */;
  %433 = cast(meta[relay.Constant][30] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %434 = %406.3;
  %435 = cast(%434, dtype="float64") /* ty=Tensor[(195), float64] */;
  %436 = cast(%var_4127, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %437 = cast(%var_4079, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %438 = cast(meta[relay.Constant][30] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %439 = reshape(%433, newshape=[4, 16, 10]) /* ty=Tensor[(4, 16, 10), float32] */;
  %440 = reshape(%435, newshape=[195]) /* ty=Tensor[(195), float64] */;
  %441 = reshape(%436, newshape=[1, 1008]) /* ty=Tensor[(1, 1008), uint64] */;
  %442 = reshape(%437, newshape=[624]) /* ty=Tensor[(624), uint64] */;
  %443 = reshape(%438, newshape=[4, 16, 10]) /* ty=Tensor[(4, 16, 10), float32] */;
  %444 = @func_1897(%439, %440, %441, %442, %443) /* ty=(Tensor[(4, 16, 10), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 1008), uint64], Tensor[(27), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64], Tensor[(9, 2, 3), float64], Tensor[(13, 6, 8), uint64], Tensor[(4, 16, 10), bool], Tensor[(13, 6, 8), uint64]) */;
  %445 = %389.0;
  %446 = acosh(%407) /* ty=Tensor[(1056), float32] */;
  %447 = %412.1;
  %448 = %423.3;
  %449 = subtract(%431, %432) /* ty=Tensor[(1056), int16] */;
  %450 = %444.9;
  (%445, %398, %434, meta[relay.Constant][29] /* ty=Tensor[(1, 7), int64] */, %var_4077, meta[relay.Constant][30] /* ty=Tensor[(160, 4), float32] */, %var_4079, %446, %447, meta[relay.Constant][31] /* ty=Tensor[(1, 14), uint8] */, %var_4112, %448, %449, %450, %var_4127)
}

def @func_3981(%var_3951: Tensor[(13, 15, 11), bool], %var_3967: Tensor[(13, 15, 11), bool]) -> (Tensor[(15, 4, 6), int64], Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), float32], Tensor[(13, 15, 11), float32], Tensor[(2400), float64]) {
  %451 = cast(meta[relay.Constant][32] /* ty=Tensor[(2400), int32] */, dtype="int32") /* ty=Tensor[(2400), int32] */;
  %452 = reshape(%451, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), int32] */;
  %453 = @func_2697(%452) /* ty=(Tensor[(16, 15, 10), int32], Tensor[(15, 4, 6), int64], Tensor[(15, 4, 6), float64]) */;
  %454 = @func_3292() /* ty=Tensor[(13, 15, 11), bool] */;
  %455 = cast(%var_3951, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %459 = cast(%var_3967, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %460 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%454, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %463 = cast(meta[relay.Constant][32] /* ty=Tensor[(2400), int32] */, dtype="float64") /* ty=Tensor[(2400), float64] */;
  %464 = %453.1;
  %465 = minimum(%457, %458) /* ty=Tensor[(13, 15, 11), uint8] */;
  %466 = @func_3666() /* ty=Tensor[(13, 15, 11), float32] */;
  %467 = divide(%461, %462) /* ty=Tensor[(13, 15, 11), float32] */;
  %468 = acosh(%463) /* ty=Tensor[(2400), float64] */;
  (%464, %465, %466, %467, %468)
}

def @func_3592() -> Tensor[(13, 15, 11), bool] {
  @func_3292() /* ty=Tensor[(13, 15, 11), bool] */
}

def @func_6017() -> (Tensor[(11, 4, 8), float32], Tensor[(27), int8]) {
  %469 = cast(meta[relay.Constant][33] /* ty=Tensor[(27), float32] */, dtype="float32") /* ty=Tensor[(27), float32] */;
  %470 = reshape(%469, newshape=[3, 9]) /* ty=Tensor[(3, 9), float32] */;
  %471 = @func_4333(%470) /* ty=(Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8], Tensor[(27), float32], Tensor[(1008), uint64], Tensor[(3, 9), float32]) */;
  %472 = %471.2;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(27), float32] */;
  %474 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(27), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %475 = cast(meta[relay.Constant][33] /* ty=Tensor[(27), float32] */, dtype="float32") /* ty=Tensor[(27), float32] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?), float32] */;
  %477 = divide(%475, %476) /* ty=Tensor[(27), float32] */;
  %478 = cast(%472, dtype="int8") /* ty=Tensor[(27), int8] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(1), int32] */;
  %480 = cast(%477, dtype="int8") /* ty=Tensor[(27), int8] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?), int8] */;
  %482 = @func_4758() /* ty=Tensor[(11, 4, 8), float32] */;
  %483 = maximum(%480, %481) /* ty=Tensor[(27), int8] */;
  (%482, %483)
}

def @func_4499(%var_4461: Tensor[(13, 15, 11), bool], %var_4470: Tensor[(13, 15, 11), float32], %var_4476: Tensor[(1, 14), uint8]) -> (Tensor[(2400), int32], Tensor[(13, 15, 11), bool], Tensor[(1, 7, 2), float64], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(13, 15, 11), float32], Tensor[(15, 4, 6), float32]) {
  %484 = @func_4019() /* ty=Tensor[(13, 15, 11), bool] */;
  %485 = cast(%var_4461, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = cast(%var_4476, dtype="uint8") /* ty=Tensor[(1, 14), uint8] */;
  %490 = cast(meta[relay.Constant][35] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %491 = reshape(%489, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), uint8] */;
  %492 = reshape(%490, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), uint8] */;
  %493 = @func_1168(%491, %492) /* ty=(Tensor[(8, 7, 2), uint8], Tensor[(1, 7, 2), float64], Tensor[(?, 7, 2), bool]) */;
  %494 = cast(%484, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %495 = tan(%494) /* ty=Tensor[(13, 15, 11), float32] */;
  %496 = cast(%var_4470, dtype="int32") /* ty=Tensor[(13, 15, 11), int32] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="int32") /* ty=Tensor[(13, 15, 11), int32] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %500 = maximum(%498, %499) /* ty=Tensor[(13, 15, 11), int32] */;
  %501 = cast(%var_4461, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %505 = cast(meta[relay.Constant][34] /* ty=Tensor[(2400), int32] */, dtype="int32") /* ty=Tensor[(2400), int32] */;
  %506 = reshape(%505, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), int32] */;
  %507 = @func_2697(%506) /* ty=(Tensor[(16, 15, 10), int32], Tensor[(15, 4, 6), int64], Tensor[(15, 4, 6), float64]) */;
  %508 = %507.2;
  %509 = cast(meta[relay.Constant][34] /* ty=Tensor[(2400), int32] */, dtype="int32") /* ty=Tensor[(2400), int32] */;
  %510 = reshape(%509, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), int32] */;
  %511 = @func_2697(%510) /* ty=(Tensor[(16, 15, 10), int32], Tensor[(15, 4, 6), int64], Tensor[(15, 4, 6), float64]) */;
  %512 = %511.2;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(15, 4, 6), float32] */;
  %514 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%508, dtype="float32") /* ty=Tensor[(15, 4, 6), float32] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %517 = less_equal(%487, %488) /* ty=Tensor[(13, 15, 11), bool] */;
  %518 = %493.1;
  %519 = floor_mod(%503, %504) /* ty=Tensor[(13, 15, 11), float32] */;
  %520 = floor_mod(%515, %516) /* ty=Tensor[(15, 4, 6), float32] */;
  (meta[relay.Constant][34] /* ty=Tensor[(2400), int32] */, %517, %518, %var_4476, meta[relay.Constant][35] /* ty=Tensor[(112), uint8] */, %519, %520)
}

def @func_5967() -> (Tensor[(13, 15, 11), uint8],) {
  %521 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %522 = %521.0;
  (%522,)
}

def @func_3522(%var_3481: Tensor[(13, 15, 11), uint8]) -> (Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), int16], Tensor[(3, 18), float64], Tensor[(9, 2, 3), float32], Tensor[(13, 15, 11), bool]) {
  %523 = @func_3167() /* ty=Tensor[(13, 15, 11), uint8] */;
  %524 = cast(%var_3481, dtype="int16") /* ty=Tensor[(13, 15, 11), int16] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="int16") /* ty=Tensor[(13, 15, 11), int16] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %528 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 18), float64] */, dtype="float64") /* ty=Tensor[(3, 18), float64] */;
  %529 = reshape(%528, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %530 = @func_1434(%529) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %531 = %530.0;
  %532 = cast(%531, dtype="float32") /* ty=Tensor[(9, 2, 3), float32] */;
  %533 = @func_3167() /* ty=Tensor[(13, 15, 11), uint8] */;
  %534 = multiply(%526, %527) /* ty=Tensor[(13, 15, 11), int16] */;
  %535 = sigmoid(%532) /* ty=Tensor[(9, 2, 3), float32] */;
  %536 = @func_3292() /* ty=Tensor[(13, 15, 11), bool] */;
  (%533, %534, meta[relay.Constant][36] /* ty=Tensor[(3, 18), float64] */, %535, %536)
}

def @func_350(%var_338: uint8, %var_339: Tensor[(16, 5, 5), uint8]) -> (Tensor[(16, 5, 5), uint8],) {
  %537 = cast(%var_338, dtype="uint8") /* ty=uint8 */;
  %538 = cast(%var_339, dtype="uint8") /* ty=Tensor[(16, 5, 5), uint8] */;
  %539 = logical_xor(%537, %538) /* ty=Tensor[(16, 5, 5), uint8] */;
  (%539,)
}

def @func_4591(%var_4567: Tensor[(9, 3), float32]) -> (Tensor[(11, 4, 8), float32], Tensor[(27), float32], Tensor[(9, 3), float32], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) {
  %540 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %541 = cast(%var_4567, dtype="float32") /* ty=Tensor[(9, 3), float32] */;
  %542 = reshape(%541, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %543 = @func_4397(%542) /* ty=(Tensor[(13, 15, 11), bool], Tensor[(9, 16, 7), int64], Tensor[(1008), uint64], Tensor[(27), float32]) */;
  %544 = cast(meta[relay.Constant][37] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %545 = reshape(%544, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %546 = @func_1434(%545) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %547 = %540.0;
  %548 = %543.3;
  %549 = %546.0;
  (%547, %548, %var_4567, %549, meta[relay.Constant][37] /* ty=Tensor[(54), float64] */)
}

def @func_1655(%var_1637: Tensor[(2, 13, 4), int32]) -> (Tensor[(2, 13, 4), float64], Tensor[(2, 13, 4), bool]) {
  %550 = cast(%var_1637, dtype="int32") /* ty=Tensor[(2, 13, 4), int32] */;
  %551 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(2, 13, 4), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 13, 4), int32] */, dtype="int32") /* ty=Tensor[(2, 13, 4), int32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %554 = right_shift(%552, %553) /* ty=Tensor[(2, 13, 4), int32] */;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %556 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 13, 4), int32] */, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %557 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%554, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %560 = exp(%555) /* ty=Tensor[(2, 13, 4), float64] */;
  %561 = greater(%558, %559) /* ty=Tensor[(2, 13, 4), bool] */;
  (%560, %561)
}

def @func_5820() -> (Tensor[(11, 4, 8), float32],) {
  %562 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %563 = %562.0;
  (%563,)
}

def @func_6432() -> (Tensor[(13, 15, 11), float64], Tensor[(13, 15, 11), bool]) {
  %564 = @func_5967() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(13, 15, 11), float64] */;
  %567 = erf(%566) /* ty=Tensor[(13, 15, 11), float64] */;
  %568 = cast(%567, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %569 = reshape(%568, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), bool] */;
  %570 = @func_5803(%569) /* ty=(Tensor[(13, 15, 11), uint16], Tensor[(13, 15, 11), bool]) */;
  %571 = %570.1;
  (%567, %571)
}

def @func_4654(%var_4648: Tensor[(27, 1), float32]) -> (Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(11, 4, 8), uint64], Tensor[(6, 7, 8), bool], Tensor[(336), float64], Tensor[(27, 1), float32]) {
  %572 = cast(meta[relay.Constant][40] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %573 = reshape(%572, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %574 = @func_1434(%573) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %575 = @func_4194() /* ty=(Tensor[(11, 4, 8), float32],) */;
  %576 = %575.0;
  %577 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 4, 8), float32] */, dtype="uint64") /* ty=Tensor[(11, 4, 8), uint64] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="uint64") /* ty=Tensor[(11, 4, 8), uint64] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %581 = cast(meta[relay.Constant][42] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %582 = cast(%var_4648, dtype="float32") /* ty=Tensor[(27, 1), float32] */;
  %583 = reshape(%581, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float64] */;
  %584 = reshape(%582, newshape=[3, 9]) /* ty=Tensor[(3, 9), float32] */;
  %585 = @func_752(%583, %584) /* ty=(Tensor[(6, 7, 8), bool], Tensor[(1, 3, 9), float32], Tensor[(3, 9), float32], Tensor[(1, 3, 9), float32]) */;
  %586 = %574.0;
  %587 = bitwise_xor(%579, %580) /* ty=Tensor[(11, 4, 8), uint64] */;
  %588 = %585.0;
  (%586, meta[relay.Constant][40] /* ty=Tensor[(54), float64] */, %587, %588, meta[relay.Constant][42] /* ty=Tensor[(336), float64] */, %var_4648)
}

def @func_6060(%var_6041: Tensor[(624), uint64]) -> (Tensor[(13, 15, 11), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64]) {
  %589 = @func_4781() /* ty=(Tensor[(13, 15, 11), bool],) */;
  %590 = %589.0;
  %591 = cast(%590, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %592 = cast(%var_6041, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %593 = cast(%var_6041, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %594 = reshape(%592, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %595 = reshape(%593, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %596 = exp(%591) /* ty=Tensor[(13, 15, 11), float32] */;
  %597 = @func_1417(%594, %595) /* ty=Tensor[(13, 6, 8), uint64] */;
  (%596, %597, %var_6041)
}

def @func_408(%var_381: Tensor[(9, 16, 7), uint64], %var_382: Tensor[(9, 16, 7), uint64], %var_406: Tensor[(27), float32]) -> (Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) {
  %598 = cast(meta[relay.Constant][43] /* ty=Tensor[(195), float64] */, dtype="float64") /* ty=Tensor[(195), float64] */;
  %599 = reshape(%598, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), float64] */;
  %600 = @func_69(%599) /* ty=(Tensor[(3, 13, 5), float64],) */;
  %601 = cast(%var_382, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %602 = tan(%601) /* ty=Tensor[(9, 16, 7), float64] */;
  %603 = cast(%var_382, dtype="uint64") /* ty=Tensor[(9, 16, 7), uint64] */;
  %604 = shape_of(%var_381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%var_381, dtype="uint64") /* ty=Tensor[(9, 16, 7), uint64] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %607 = minimum(%605, %606) /* ty=Tensor[(9, 16, 7), uint64] */;
  %608 = cast(%607, dtype="int64") /* ty=Tensor[(9, 16, 7), int64] */;
  %609 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%602, dtype="int64") /* ty=Tensor[(9, 16, 7), int64] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %612 = cast(%var_406, dtype="float32") /* ty=Tensor[(27), float32] */;
  %613 = reshape(%612, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
  %614 = @func_212(%613) /* ty=(Tensor[(1, 3, 9), float32],) */;
  %615 = %600.0;
  %616 = logical_xor(%610, %611) /* ty=Tensor[(9, 16, 7), int64] */;
  %617 = %614.0;
  (%615, meta[relay.Constant][43] /* ty=Tensor[(195), float64] */, %616, %617, %var_406)
}

def @func_4397(%var_4393: Tensor[(27), float32]) -> (Tensor[(13, 15, 11), bool], Tensor[(9, 16, 7), int64], Tensor[(1008), uint64], Tensor[(27), float32]) {
  %618 = cast(meta[relay.Constant][44] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %619 = cast(meta[relay.Constant][44] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %620 = cast(%var_4393, dtype="float32") /* ty=Tensor[(27), float32] */;
  %621 = reshape(%618, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
  %622 = reshape(%619, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
  %623 = reshape(%620, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %624 = @func_408(%621, %622, %623) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) */;
  %625 = @func_3592() /* ty=Tensor[(13, 15, 11), bool] */;
  %626 = %624.2;
  (%625, %626, meta[relay.Constant][44] /* ty=Tensor[(1008), uint64] */, %var_4393)
}

def @func_69(%var_62: Tensor[(3, 13, 5), float64]) -> (Tensor[(3, 13, 5), float64],) {
  %627 = cast(%var_62, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %628 = sinh(%627) /* ty=Tensor[(3, 13, 5), float64] */;
  %629 = cast(%628, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %630 = log10(%629) /* ty=Tensor[(3, 13, 5), float64] */;
  (%630,)
}

def @func_2697(%var_2674: Tensor[(16, 15, 10), int32]) -> (Tensor[(16, 15, 10), int32], Tensor[(15, 4, 6), int64], Tensor[(15, 4, 6), float64]) {
  %631 = cast(%var_2674, dtype="int32") /* ty=Tensor[(16, 15, 10), int32] */;
  %632 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(16, 15, 10), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 15, 10), int32] */, dtype="int32") /* ty=Tensor[(16, 15, 10), int32] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %635 = cast(meta[relay.Constant][46] /* ty=Tensor[(360, 1), float64] */, dtype="float64") /* ty=Tensor[(360, 1), float64] */;
  %636 = reshape(%635, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float64] */;
  %637 = @func_241(%636) /* ty=Tensor[(15, 4, 6), float64] */;
  %638 = cast(meta[relay.Constant][46] /* ty=Tensor[(360, 1), float64] */, dtype="int64") /* ty=Tensor[(360, 1), int64] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="int64") /* ty=Tensor[(15, 4, 6), int64] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %642 = cast(meta[relay.Constant][46] /* ty=Tensor[(360, 1), float64] */, dtype="float64") /* ty=Tensor[(360, 1), float64] */;
  %643 = reshape(%642, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float64] */;
  %644 = bitwise_xor(%633, %634) /* ty=Tensor[(16, 15, 10), int32] */;
  %645 = multiply(%640, %641) /* ty=Tensor[(15, 4, 6), int64] */;
  %646 = @func_241(%643) /* ty=Tensor[(15, 4, 6), float64] */;
  (%644, %645, %646)
}

def @func_5175() -> (Tensor[(13, 15, 11), uint8], Tensor[(27), float32], Tensor[(27), float32], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) {
  %647 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %648 = cast(meta[relay.Constant][47] /* ty=Tensor[(27), float32] */, dtype="float32") /* ty=Tensor[(27), float32] */;
  %649 = reshape(%648, newshape=[9, 3]) /* ty=Tensor[(9, 3), float32] */;
  %650 = @func_4591(%649) /* ty=(Tensor[(11, 4, 8), float32], Tensor[(27), float32], Tensor[(9, 3), float32], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %651 = cast(meta[relay.Constant][48] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %652 = reshape(%651, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %653 = @func_1434(%652) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %654 = %647.0;
  %655 = %650.1;
  %656 = %653.0;
  (%654, %655, meta[relay.Constant][47] /* ty=Tensor[(27), float32] */, %656, meta[relay.Constant][48] /* ty=Tensor[(54), float64] */)
}

def @func_1434(%var_1427: Tensor[(9, 2, 3), float64]) -> (Tensor[(9, 2, 3), float64],) {
  %657 = cast(%var_1427, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
  %658 = sinh(%657) /* ty=Tensor[(9, 2, 3), float64] */;
  (%658,)
}

def @func_5064(%var_4998: Tensor[(7), int64], %var_4999: Tensor[(63), int64], %var_5001: Tensor[(195), float64], %var_5002: Tensor[(624), uint64], %var_5014: Tensor[(12, 4), float64], %var_5048: Tensor[(400), uint8], %var_5053: Tensor[(11, 4, 8), float32]) -> (Tensor[(640), float32], Tensor[(7), int64], Tensor[(63), int64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(624), uint64], Tensor[(16, ?, 3), float64], Tensor[(12, 4), float64], Tensor[(13, 15, 11), bool], Tensor[(9, 2, 3), float32], Tensor[(15, 4, 6), float64], Tensor[(400), uint8], Tensor[(11, 4, 8), float32]) {
  %659 = cast(%var_4998, dtype="int64") /* ty=Tensor[(7), int64] */;
  %660 = cast(%var_4999, dtype="int64") /* ty=Tensor[(63), int64] */;
  %661 = cast(meta[relay.Constant][49] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %662 = cast(%var_5001, dtype="float64") /* ty=Tensor[(195), float64] */;
  %663 = cast(%var_5002, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %664 = reshape(%659, newshape=[7, 1, 1]) /* ty=Tensor[(7, 1, 1), int64] */;
  %665 = reshape(%660, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), int64] */;
  %666 = reshape(%661, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %667 = reshape(%662, newshape=[195]) /* ty=Tensor[(195), float64] */;
  %668 = reshape(%663, newshape=[24, 26]) /* ty=Tensor[(24, 26), uint64] */;
  %669 = @func_3808(%664, %665, %666, %667, %668) /* ty=(Tensor[(7, 9, 1), bool], Tensor[(13, 6, 8), uint64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(12, 84), uint64], Tensor[(24, 26), uint64]) */;
  %670 = cast(%var_5014, dtype="float64") /* ty=Tensor[(12, 4), float64] */;
  %671 = reshape(%670, newshape=[16, 1, 3]) /* ty=Tensor[(16, 1, 3), float64] */;
  %672 = @func_3292() /* ty=Tensor[(13, 15, 11), bool] */;
  %673 = cast(%672, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %674 = reshape(%673, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), uint8] */;
  %675 = @func_3522(%674) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), int16], Tensor[(3, 18), float64], Tensor[(9, 2, 3), float32], Tensor[(13, 15, 11), bool]) */;
  %676 = cast(%var_5048, dtype="uint8") /* ty=Tensor[(400), uint8] */;
  %677 = reshape(%676, newshape=[400, 1]) /* ty=Tensor[(400, 1), uint8] */;
  %678 = @func_3466(%677) /* ty=(Tensor[(400), uint8], Tensor[(400, 1), uint8], Tensor[(3, 13, 5), float64], float64, Tensor[(1056), float64], Tensor[(3, 13, 5), float64], Tensor[(13, 15, 11), float64], Tensor[(13, 15, 11), uint8], Tensor[(15, 4, 6), float64], Tensor[(360), float64], Tensor[(13, 15, 11), float64]) */;
  %679 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %680 = %679.0;
  %681 = cast(%680, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %682 = exp(%681) /* ty=Tensor[(11, 4, 8), float32] */;
  %683 = cast(%var_5053, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%682, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %687 = %669.2;
  %688 = @func_854(%671) /* ty=Tensor[(16, ?, 3), float64] */;
  %689 = %675.3;
  %690 = %678.8;
  %691 = mod(%685, %686) /* ty=Tensor[(11, 4, 8), float32] */;
  (%687, %var_4998, %var_4999, meta[relay.Constant][49] /* ty=Tensor[(640), float32] */, %var_5001, %var_5002, %688, %var_5014, %672, %689, %690, %var_5048, %691)
}

def @func_5292(%var_5284: Tensor[(1, 13, 1), float32], %var_5285: Tensor[(7, 13, 4), float32]) -> Tensor[(7, 13, 4), bool] {
  %692 = cast(%var_5284, dtype="bool") /* ty=Tensor[(1, 13, 1), bool] */;
  %693 = cast(%var_5285, dtype="bool") /* ty=Tensor[(7, 13, 4), bool] */;
  less_equal(%692, %693) /* ty=Tensor[(7, 13, 4), bool] */
}

def @func_4859(%var_4819: Tensor[(13, 6, 13), float64]) -> (Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(13, 6, 13), float32]) {
  %694 = cast(meta[relay.Constant][50] /* ty=Tensor[(195), float64] */, dtype="float64") /* ty=Tensor[(195), float64] */;
  %695 = reshape(%694, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), float64] */;
  %696 = @func_69(%695) /* ty=(Tensor[(3, 13, 5), float64],) */;
  %697 = cast(%var_4819, dtype="float64") /* ty=Tensor[(13, 6, 13), float64] */;
  %698 = exp(%697) /* ty=Tensor[(13, 6, 13), float64] */;
  %699 = cast(%var_4819, dtype="uint32") /* ty=Tensor[(13, 6, 13), uint32] */;
  %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%698, dtype="uint32") /* ty=Tensor[(13, 6, 13), uint32] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %703 = right_shift(%701, %702) /* ty=Tensor[(13, 6, 13), uint32] */;
  %704 = cast(%698, dtype="int32") /* ty=Tensor[(13, 6, 13), int32] */;
  %705 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%703, dtype="int32") /* ty=Tensor[(13, 6, 13), int32] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %708 = logical_xor(%706, %707) /* ty=Tensor[(13, 6, 13), int32] */;
  %709 = cast(%708, dtype="float32") /* ty=Tensor[(13, 6, 13), float32] */;
  %710 = %696.0;
  %711 = acosh(%709) /* ty=Tensor[(13, 6, 13), float32] */;
  (%710, meta[relay.Constant][50] /* ty=Tensor[(195), float64] */, %711)
}

def @func_4553(%var_4543: Tensor[(12, 9, 2), float32]) -> Tensor[(12, 9, 2), bool] {
  %712 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 9, 2), float32] */, dtype="float64") /* ty=Tensor[(1, 9, 2), float64] */;
  %713 = cast(%var_4543, dtype="float64") /* ty=Tensor[(12, 9, 2), float64] */;
  %714 = floor_mod(%712, %713) /* ty=Tensor[(12, 9, 2), float64] */;
  %715 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 9, 2), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 2), float32] */;
  %716 = tan(%715) /* ty=Tensor[(1, 9, 2), float32] */;
  %717 = cast(%714, dtype="bool") /* ty=Tensor[(12, 9, 2), bool] */;
  %718 = cast(%716, dtype="bool") /* ty=Tensor[(1, 9, 2), bool] */;
  greater(%717, %718) /* ty=Tensor[(12, 9, 2), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_215(%var_213: Tensor[(1, 3, 9), float32]) -> (Tensor[(1, 3, 9), float32],) {
  @func_212(%var_213) /* ty=(Tensor[(1, 3, 9), float32],) */
}

def @func_5296(%var_5294: Tensor[(1, 13, 1), float32], %var_5295: Tensor[(7, 13, 4), float32]) -> Tensor[(7, 13, 4), bool] {
  @func_5292(%var_5294, %var_5295) /* ty=Tensor[(7, 13, 4), bool] */
}

def @func_5292(%var_5284: Tensor[(1, 13, 1), float32], %var_5285: Tensor[(7, 13, 4), float32]) -> Tensor[(7, 13, 4), bool] {
  %0 = cast(%var_5284, dtype="bool") /* ty=Tensor[(1, 13, 1), bool] */;
  %1 = cast(%var_5285, dtype="bool") /* ty=Tensor[(7, 13, 4), bool] */;
  less_equal(%0, %1) /* ty=Tensor[(7, 13, 4), bool] */
}

def @func_4400(%var_4398: Tensor[(27), float32]) -> (Tensor[(13, 15, 11), bool], Tensor[(9, 16, 7), int64], Tensor[(1008), uint64], Tensor[(27), float32]) {
  @func_4397(%var_4398) /* ty=(Tensor[(13, 15, 11), bool], Tensor[(9, 16, 7), int64], Tensor[(1008), uint64], Tensor[(27), float32]) */
}

def @func_412(%var_409: Tensor[(9, 16, 7), uint64], %var_410: Tensor[(9, 16, 7), uint64], %var_411: Tensor[(27), float32]) -> (Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) {
  %22 = fn (%var_381: Tensor[(9, 16, 7), uint64], %var_382: Tensor[(9, 16, 7), uint64], %var_406: Tensor[(27), float32]) -> (Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) {
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(195), float64] */, dtype="float64") /* ty=Tensor[(195), float64] */;
    %3 = reshape(%2, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), float64] */;
    %4 = @func_69(%3) /* ty=(Tensor[(3, 13, 5), float64],) */;
    %5 = cast(%var_382, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
    %6 = tan(%5) /* ty=Tensor[(9, 16, 7), float64] */;
    %7 = cast(%var_382, dtype="uint64") /* ty=Tensor[(9, 16, 7), uint64] */;
    %8 = shape_of(%var_381, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%var_381, dtype="uint64") /* ty=Tensor[(9, 16, 7), uint64] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %11 = minimum(%9, %10) /* ty=Tensor[(9, 16, 7), uint64] */;
    %12 = cast(%11, dtype="int64") /* ty=Tensor[(9, 16, 7), int64] */;
    %13 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%6, dtype="int64") /* ty=Tensor[(9, 16, 7), int64] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %16 = cast(%var_406, dtype="float32") /* ty=Tensor[(27), float32] */;
    %17 = reshape(%16, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
    %18 = @func_212(%17) /* ty=(Tensor[(1, 3, 9), float32],) */;
    %19 = %4.0;
    %20 = logical_xor(%14, %15) /* ty=Tensor[(9, 16, 7), int64] */;
    %21 = %18.0;
    (%19, meta[relay.Constant][0] /* ty=Tensor[(195), float64] */, %20, %21, %var_406)
  };
  %22(%var_409, %var_410, %var_411) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) */
}

def @func_4594(%var_4592: Tensor[(9, 3), float32]) -> (Tensor[(11, 4, 8), float32], Tensor[(27), float32], Tensor[(9, 3), float32], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) {
  @func_4591(%var_4592) /* ty=(Tensor[(11, 4, 8), float32], Tensor[(27), float32], Tensor[(9, 3), float32], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */
}

def @func_4591(%var_4567: Tensor[(9, 3), float32]) -> (Tensor[(11, 4, 8), float32], Tensor[(27), float32], Tensor[(9, 3), float32], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) {
  %23 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %24 = cast(%var_4567, dtype="float32") /* ty=Tensor[(9, 3), float32] */;
  %25 = reshape(%24, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %26 = @func_4397(%25) /* ty=(Tensor[(13, 15, 11), bool], Tensor[(9, 16, 7), int64], Tensor[(1008), uint64], Tensor[(27), float32]) */;
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %28 = reshape(%27, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %29 = @func_1434(%28) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %30 = %23.0;
  %31 = %26.3;
  %32 = %29.0;
  (%30, %31, %var_4567, %32, meta[relay.Constant][1] /* ty=Tensor[(54), float64] */)
}

def @func_3567(%var_3566: Tensor[(13, 15, 11), uint8]) -> (Tensor[(13, 15, 11), uint64], Tensor[(13, 15, 11), float32]) {
  %42 = fn (%var_3556: Tensor[(13, 15, 11), uint8]) -> (Tensor[(13, 15, 11), uint64], Tensor[(13, 15, 11), float32]) {
    %33 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
    %34 = %33.0;
    %35 = cast(%var_3556, dtype="uint64") /* ty=Tensor[(13, 15, 11), uint64] */;
    %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
    %37 = cast(%34, dtype="uint64") /* ty=Tensor[(13, 15, 11), uint64] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %39 = cast(%var_3556, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
    %40 = bitwise_and(%37, %38) /* ty=Tensor[(13, 15, 11), uint64] */;
    %41 = acosh(%39) /* ty=Tensor[(13, 15, 11), float32] */;
    (%40, %41)
  };
  %42(%var_3566) /* ty=(Tensor[(13, 15, 11), uint64], Tensor[(13, 15, 11), float32]) */
}

def @func_4861(%var_4860: Tensor[(13, 6, 13), float64]) -> (Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(13, 6, 13), float32]) {
  %61 = fn (%var_4819: Tensor[(13, 6, 13), float64]) -> (Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(13, 6, 13), float32]) {
    %43 = cast(meta[relay.Constant][2] /* ty=Tensor[(195), float64] */, dtype="float64") /* ty=Tensor[(195), float64] */;
    %44 = reshape(%43, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), float64] */;
    %45 = @func_69(%44) /* ty=(Tensor[(3, 13, 5), float64],) */;
    %46 = cast(%var_4819, dtype="float64") /* ty=Tensor[(13, 6, 13), float64] */;
    %47 = exp(%46) /* ty=Tensor[(13, 6, 13), float64] */;
    %48 = cast(%var_4819, dtype="uint32") /* ty=Tensor[(13, 6, 13), uint32] */;
    %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
    %50 = cast(%47, dtype="uint32") /* ty=Tensor[(13, 6, 13), uint32] */;
    %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %52 = right_shift(%50, %51) /* ty=Tensor[(13, 6, 13), uint32] */;
    %53 = cast(%47, dtype="int32") /* ty=Tensor[(13, 6, 13), int32] */;
    %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
    %55 = cast(%52, dtype="int32") /* ty=Tensor[(13, 6, 13), int32] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %57 = logical_xor(%55, %56) /* ty=Tensor[(13, 6, 13), int32] */;
    %58 = cast(%57, dtype="float32") /* ty=Tensor[(13, 6, 13), float32] */;
    %59 = %45.0;
    %60 = acosh(%58) /* ty=Tensor[(13, 6, 13), float32] */;
    (%59, meta[relay.Constant][2] /* ty=Tensor[(195), float64] */, %60)
  };
  %61(%var_4860) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(13, 6, 13), float32]) */
}

def @func_6364() -> Tensor[(11, 4, 8), int16] {
  @func_6362() /* ty=Tensor[(11, 4, 8), int16] */
}

def @func_5532() -> Tensor[(13, 15, 11), bool] {
  @func_5530() /* ty=Tensor[(13, 15, 11), bool] */
}

def @main(%var_6530: Tensor[(12, 12, 4), uint16]) -> (Tensor[(12, 12, 4), bool], Tensor[(12, 12, 4), float64]) {
  %62 = cast(%var_6530, dtype="bool") /* ty=Tensor[(12, 12, 4), bool] */;
  %63 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(12, 12, 4), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 12, 4), uint16] */, dtype="bool") /* ty=Tensor[(12, 12, 4), bool] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %66 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 12, 4), uint16] */, dtype="float64") /* ty=Tensor[(12, 12, 4), float64] */;
  %67 = less_equal(%64, %65) /* ty=Tensor[(12, 12, 4), bool] */;
  %68 = rsqrt(%66) /* ty=Tensor[(12, 12, 4), float64] */;
  (%67, %68)
}

def @func_3143() -> (Tensor[(13, 15, 11), uint8],) {
  @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */
}

def @func_6018() -> (Tensor[(11, 4, 8), float32], Tensor[(27), int8]) {
  %84 = fn () -> (Tensor[(11, 4, 8), float32], Tensor[(27), int8]) {
    %69 = cast(meta[relay.Constant][4] /* ty=Tensor[(27), float32] */, dtype="float32") /* ty=Tensor[(27), float32] */;
    %70 = reshape(%69, newshape=[3, 9]) /* ty=Tensor[(3, 9), float32] */;
    %71 = @func_4333(%70) /* ty=(Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8], Tensor[(27), float32], Tensor[(1008), uint64], Tensor[(3, 9), float32]) */;
    %72 = %71.2;
    %73 = cast(%72, dtype="float32") /* ty=Tensor[(27), float32] */;
    %74 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(27), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %75 = cast(meta[relay.Constant][4] /* ty=Tensor[(27), float32] */, dtype="float32") /* ty=Tensor[(27), float32] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?), float32] */;
    %77 = divide(%75, %76) /* ty=Tensor[(27), float32] */;
    %78 = cast(%72, dtype="int8") /* ty=Tensor[(27), int8] */;
    %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(1), int32] */;
    %80 = cast(%77, dtype="int8") /* ty=Tensor[(27), int8] */;
    %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?), int8] */;
    %82 = @func_4758() /* ty=Tensor[(11, 4, 8), float32] */;
    %83 = maximum(%80, %81) /* ty=Tensor[(27), int8] */;
    (%82, %83)
  };
  %84() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(27), int8]) */
}

def @func_3814(%var_3809: Tensor[(7, 1, 1), int64], %var_3810: Tensor[(7, 9, 1), int64], %var_3811: Tensor[(640), float32], %var_3812: Tensor[(195), float64], %var_3813: Tensor[(24, 26), uint64]) -> (Tensor[(7, 9, 1), bool], Tensor[(13, 6, 8), uint64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(12, 84), uint64], Tensor[(24, 26), uint64]) {
  %100 = fn (%var_3742: Tensor[(7, 1, 1), int64], %var_3743: Tensor[(7, 9, 1), int64], %var_3800: Tensor[(640), float32], %var_3801: Tensor[(195), float64], %var_3803: Tensor[(24, 26), uint64]) -> (Tensor[(7, 9, 1), bool], Tensor[(13, 6, 8), uint64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(12, 84), uint64], Tensor[(24, 26), uint64]) {
    %85 = cast(%var_3742, dtype="bool") /* ty=Tensor[(7, 1, 1), bool] */;
    %86 = cast(%var_3743, dtype="bool") /* ty=Tensor[(7, 9, 1), bool] */;
    %87 = cast(%var_3800, dtype="float32") /* ty=Tensor[(640), float32] */;
    %88 = cast(%var_3801, dtype="float64") /* ty=Tensor[(195), float64] */;
    %89 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 84), uint64] */, dtype="uint64") /* ty=Tensor[(12, 84), uint64] */;
    %90 = cast(%var_3803, dtype="uint64") /* ty=Tensor[(24, 26), uint64] */;
    %91 = cast(%var_3800, dtype="float32") /* ty=Tensor[(640), float32] */;
    %92 = reshape(%87, newshape=[4, 16, 10]) /* ty=Tensor[(4, 16, 10), float32] */;
    %93 = reshape(%88, newshape=[195]) /* ty=Tensor[(195), float64] */;
    %94 = reshape(%89, newshape=[1, 1008]) /* ty=Tensor[(1, 1008), uint64] */;
    %95 = reshape(%90, newshape=[624]) /* ty=Tensor[(624), uint64] */;
    %96 = reshape(%91, newshape=[4, 16, 10]) /* ty=Tensor[(4, 16, 10), float32] */;
    %97 = @func_1897(%92, %93, %94, %95, %96) /* ty=(Tensor[(4, 16, 10), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 1008), uint64], Tensor[(27), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64], Tensor[(9, 2, 3), float64], Tensor[(13, 6, 8), uint64], Tensor[(4, 16, 10), bool], Tensor[(13, 6, 8), uint64]) */;
    %98 = greater_equal(%85, %86) /* ty=Tensor[(7, 9, 1), bool] */;
    %99 = %97.8;
    (%98, %99, %var_3800, %var_3801, meta[relay.Constant][5] /* ty=Tensor[(12, 84), uint64] */, %var_3803)
  };
  %100(%var_3809, %var_3810, %var_3811, %var_3812, %var_3813) /* ty=(Tensor[(7, 9, 1), bool], Tensor[(13, 6, 8), uint64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(12, 84), uint64], Tensor[(24, 26), uint64]) */
}

def @func_3524(%var_3523: Tensor[(13, 15, 11), uint8]) -> (Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), int16], Tensor[(3, 18), float64], Tensor[(9, 2, 3), float32], Tensor[(13, 15, 11), bool]) {
  %115 = fn (%var_3481: Tensor[(13, 15, 11), uint8]) -> (Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), int16], Tensor[(3, 18), float64], Tensor[(9, 2, 3), float32], Tensor[(13, 15, 11), bool]) {
    %101 = @func_3167() /* ty=Tensor[(13, 15, 11), uint8] */;
    %102 = cast(%var_3481, dtype="int16") /* ty=Tensor[(13, 15, 11), int16] */;
    %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
    %104 = cast(%101, dtype="int16") /* ty=Tensor[(13, 15, 11), int16] */;
    %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 18), float64] */, dtype="float64") /* ty=Tensor[(3, 18), float64] */;
    %107 = reshape(%106, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
    %108 = @func_1434(%107) /* ty=(Tensor[(9, 2, 3), float64],) */;
    %109 = %108.0;
    %110 = cast(%109, dtype="float32") /* ty=Tensor[(9, 2, 3), float32] */;
    %111 = @func_3167() /* ty=Tensor[(13, 15, 11), uint8] */;
    %112 = multiply(%104, %105) /* ty=Tensor[(13, 15, 11), int16] */;
    %113 = sigmoid(%110) /* ty=Tensor[(9, 2, 3), float32] */;
    %114 = @func_3292() /* ty=Tensor[(13, 15, 11), bool] */;
    (%111, %112, meta[relay.Constant][6] /* ty=Tensor[(3, 18), float64] */, %113, %114)
  };
  %115(%var_3523) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), int16], Tensor[(3, 18), float64], Tensor[(9, 2, 3), float32], Tensor[(13, 15, 11), bool]) */
}

def @func_4335(%var_4334: Tensor[(3, 9), float32]) -> (Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8], Tensor[(27), float32], Tensor[(1008), uint64], Tensor[(3, 9), float32]) {
  %126 = fn (%var_4317: Tensor[(3, 9), float32]) -> (Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8], Tensor[(27), float32], Tensor[(1008), uint64], Tensor[(3, 9), float32]) {
    %116 = cast(meta[relay.Constant][7] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
    %117 = cast(meta[relay.Constant][7] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
    %118 = cast(%var_4317, dtype="float32") /* ty=Tensor[(3, 9), float32] */;
    %119 = reshape(%116, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
    %120 = reshape(%117, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
    %121 = reshape(%118, newshape=[27]) /* ty=Tensor[(27), float32] */;
    %122 = @func_408(%119, %120, %121) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) */;
    %123 = @func_3292() /* ty=Tensor[(13, 15, 11), bool] */;
    %124 = @func_3167() /* ty=Tensor[(13, 15, 11), uint8] */;
    %125 = %122.4;
    (%123, %124, %125, meta[relay.Constant][7] /* ty=Tensor[(1008), uint64] */, %var_4317)
  };
  %126(%var_4334) /* ty=(Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8], Tensor[(27), float32], Tensor[(1008), uint64], Tensor[(3, 9), float32]) */
}

def @func_3981(%var_3951: Tensor[(13, 15, 11), bool], %var_3967: Tensor[(13, 15, 11), bool]) -> (Tensor[(15, 4, 6), int64], Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), float32], Tensor[(13, 15, 11), float32], Tensor[(2400), float64]) {
  %127 = cast(meta[relay.Constant][8] /* ty=Tensor[(2400), int32] */, dtype="int32") /* ty=Tensor[(2400), int32] */;
  %128 = reshape(%127, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), int32] */;
  %129 = @func_2697(%128) /* ty=(Tensor[(16, 15, 10), int32], Tensor[(15, 4, 6), int64], Tensor[(15, 4, 6), float64]) */;
  %130 = @func_3292() /* ty=Tensor[(13, 15, 11), bool] */;
  %131 = cast(%var_3951, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%130, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %135 = cast(%var_3967, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %136 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%130, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %139 = cast(meta[relay.Constant][8] /* ty=Tensor[(2400), int32] */, dtype="float64") /* ty=Tensor[(2400), float64] */;
  %140 = %129.1;
  %141 = minimum(%133, %134) /* ty=Tensor[(13, 15, 11), uint8] */;
  %142 = @func_3666() /* ty=Tensor[(13, 15, 11), float32] */;
  %143 = divide(%137, %138) /* ty=Tensor[(13, 15, 11), float32] */;
  %144 = acosh(%139) /* ty=Tensor[(2400), float64] */;
  (%140, %141, %142, %143, %144)
}

def @func_1434(%var_1427: Tensor[(9, 2, 3), float64]) -> (Tensor[(9, 2, 3), float64],) {
  %145 = cast(%var_1427, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
  %146 = sinh(%145) /* ty=Tensor[(9, 2, 3), float64] */;
  (%146,)
}

def @func_3466(%var_3407: Tensor[(400, 1), uint8]) -> (Tensor[(400), uint8], Tensor[(400, 1), uint8], Tensor[(3, 13, 5), float64], float64, Tensor[(1056), float64], Tensor[(3, 13, 5), float64], Tensor[(13, 15, 11), float64], Tensor[(13, 15, 11), uint8], Tensor[(15, 4, 6), float64], Tensor[(360), float64], Tensor[(13, 15, 11), float64]) {
  %147 = cast(%var_3407, dtype="uint8") /* ty=Tensor[(400, 1), uint8] */;
  %148 = reshape(%147, newshape=[400]) /* ty=Tensor[(400), uint8] */;
  %149 = @func_3240(%148) /* ty=(Tensor[(13, 15, 11), uint8], uint8, Tensor[(400), uint8], Tensor[(16, 5, 5), float32], Tensor[(1, 7, 2), float64], Tensor[(7, 2), uint8], Tensor[(56, 2), uint8]) */;
  %150 = cast(3.88888f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %151 = cast(meta[relay.Constant][9] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %152 = reshape(%150, newshape=[]) /* ty=float64 */;
  %153 = reshape(%151, newshape=[12, 8, 11]) /* ty=Tensor[(12, 8, 11), float64] */;
  %154 = @func_1595(%152, %153) /* ty=(Tensor[(12, 8, 11), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64]) */;
  %155 = %154.1;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %157 = reshape(%156, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), float64] */;
  %158 = @func_69(%157) /* ty=(Tensor[(3, 13, 5), float64],) */;
  %159 = @func_3292() /* ty=Tensor[(13, 15, 11), bool] */;
  %160 = cast(%159, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %161 = log10(%160) /* ty=Tensor[(13, 15, 11), float32] */;
  %162 = cast(%161, dtype="float64") /* ty=Tensor[(13, 15, 11), float64] */;
  %163 = rsqrt(%162) /* ty=Tensor[(13, 15, 11), float64] */;
  %164 = cast(%163, dtype="float64") /* ty=Tensor[(13, 15, 11), float64] */;
  %165 = cast(meta[relay.Constant][10] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %166 = reshape(%165, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float64] */;
  %167 = cast(%163, dtype="float64") /* ty=Tensor[(13, 15, 11), float64] */;
  %168 = %149.2;
  %169 = %158.0;
  %170 = log2(%164) /* ty=Tensor[(13, 15, 11), float64] */;
  %171 = @func_3167() /* ty=Tensor[(13, 15, 11), uint8] */;
  %172 = @func_241(%166) /* ty=Tensor[(15, 4, 6), float64] */;
  %173 = sinh(%167) /* ty=Tensor[(13, 15, 11), float64] */;
  (%168, %var_3407, %155, 3.88888f64 /* ty=float64 */, meta[relay.Constant][9] /* ty=Tensor[(1056), float64] */, %169, %170, %171, %172, meta[relay.Constant][10] /* ty=Tensor[(360), float64] */, %173)
}

def @func_4553(%var_4543: Tensor[(12, 9, 2), float32]) -> Tensor[(12, 9, 2), bool] {
  %174 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 9, 2), float32] */, dtype="float64") /* ty=Tensor[(1, 9, 2), float64] */;
  %175 = cast(%var_4543, dtype="float64") /* ty=Tensor[(12, 9, 2), float64] */;
  %176 = floor_mod(%174, %175) /* ty=Tensor[(12, 9, 2), float64] */;
  %177 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 9, 2), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 2), float32] */;
  %178 = tan(%177) /* ty=Tensor[(1, 9, 2), float32] */;
  %179 = cast(%176, dtype="bool") /* ty=Tensor[(12, 9, 2), bool] */;
  %180 = cast(%178, dtype="bool") /* ty=Tensor[(1, 9, 2), bool] */;
  greater(%179, %180) /* ty=Tensor[(12, 9, 2), bool] */
}

def @func_5233() -> (Tensor[(11, 4, 8), float32],) {
  %181 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %182 = %181.0;
  (%182,)
}

def @func_1904(%var_1899: Tensor[(4, 16, 10), float32], %var_1900: Tensor[(195), float64], %var_1901: Tensor[(1, 1008), uint64], %var_1902: Tensor[(624), uint64], %var_1903: Tensor[(4, 16, 10), float32]) -> (Tensor[(4, 16, 10), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 1008), uint64], Tensor[(27), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64], Tensor[(9, 2, 3), float64], Tensor[(13, 6, 8), uint64], Tensor[(4, 16, 10), bool], Tensor[(13, 6, 8), uint64]) {
  @func_1897(%var_1899, %var_1900, %var_1901, %var_1902, %var_1903) /* ty=(Tensor[(4, 16, 10), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 1008), uint64], Tensor[(27), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64], Tensor[(9, 2, 3), float64], Tensor[(13, 6, 8), uint64], Tensor[(4, 16, 10), bool], Tensor[(13, 6, 8), uint64]) */
}

def @func_2700(%var_2698: Tensor[(16, 15, 10), int32]) -> (Tensor[(16, 15, 10), int32], Tensor[(15, 4, 6), int64], Tensor[(15, 4, 6), float64]) {
  @func_2697(%var_2698) /* ty=(Tensor[(16, 15, 10), int32], Tensor[(15, 4, 6), int64], Tensor[(15, 4, 6), float64]) */
}

def @func_4139(%var_4040: float64, %var_4041: Tensor[(1056), float64], %var_4077: Tensor[(63), int64], %var_4079: Tensor[(624), uint64], %var_4112: Tensor[(112), uint8], %var_4127: Tensor[(1008), uint64]) -> (Tensor[(13, 15, 11), uint8], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(1, 7), int64], Tensor[(63), int64], Tensor[(160, 4), float32], Tensor[(624), uint64], Tensor[(1056), float32], Tensor[(1, 7, 2), float64], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(195), float64], Tensor[(1056), int16], Tensor[(624), uint64], Tensor[(1008), uint64]) {
  %183 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %184 = cast(%var_4040, dtype="float64") /* ty=float64 */;
  %185 = cast(%var_4041, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %186 = reshape(%184, newshape=[]) /* ty=float64 */;
  %187 = reshape(%185, newshape=[12, 8, 11]) /* ty=Tensor[(12, 8, 11), float64] */;
  %188 = @func_1595(%186, %187) /* ty=(Tensor[(12, 8, 11), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64]) */;
  %189 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 7), int64] */, dtype="int64") /* ty=Tensor[(1, 7), int64] */;
  %190 = cast(%var_4077, dtype="int64") /* ty=Tensor[(63), int64] */;
  %191 = cast(meta[relay.Constant][13] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %192 = %188.1;
  %193 = cast(%192, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %194 = cast(%var_4079, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %195 = reshape(%189, newshape=[7, 1, 1]) /* ty=Tensor[(7, 1, 1), int64] */;
  %196 = reshape(%190, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), int64] */;
  %197 = reshape(%191, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %198 = reshape(%193, newshape=[195]) /* ty=Tensor[(195), float64] */;
  %199 = reshape(%194, newshape=[24, 26]) /* ty=Tensor[(24, 26), uint64] */;
  %200 = @func_3808(%195, %196, %197, %198, %199) /* ty=(Tensor[(7, 9, 1), bool], Tensor[(13, 6, 8), uint64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(12, 84), uint64], Tensor[(24, 26), uint64]) */;
  %201 = cast(%var_4041, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %202 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 14), uint8] */, dtype="uint8") /* ty=Tensor[(1, 14), uint8] */;
  %203 = cast(%var_4112, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %204 = reshape(%202, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), uint8] */;
  %205 = reshape(%203, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), uint8] */;
  %206 = @func_1168(%204, %205) /* ty=(Tensor[(8, 7, 2), uint8], Tensor[(1, 7, 2), float64], Tensor[(?, 7, 2), bool]) */;
  %207 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 7), int64] */, dtype="int64") /* ty=Tensor[(1, 7), int64] */;
  %208 = cast(%var_4077, dtype="int64") /* ty=Tensor[(63), int64] */;
  %209 = cast(meta[relay.Constant][13] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %210 = cast(%192, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %211 = cast(%var_4079, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %212 = reshape(%207, newshape=[7, 1, 1]) /* ty=Tensor[(7, 1, 1), int64] */;
  %213 = reshape(%208, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), int64] */;
  %214 = reshape(%209, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %215 = reshape(%210, newshape=[195]) /* ty=Tensor[(195), float64] */;
  %216 = reshape(%211, newshape=[24, 26]) /* ty=Tensor[(24, 26), uint64] */;
  %217 = @func_3808(%212, %213, %214, %215, %216) /* ty=(Tensor[(7, 9, 1), bool], Tensor[(13, 6, 8), uint64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(12, 84), uint64], Tensor[(24, 26), uint64]) */;
  %218 = cast(%var_4041, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %219 = rsqrt(%218) /* ty=Tensor[(1056), float32] */;
  %220 = cast(%219, dtype="bool") /* ty=Tensor[(1056), bool] */;
  %221 = cast(%var_4040, dtype="bool") /* ty=bool */;
  %222 = logical_and(%220, %221) /* ty=Tensor[(1056), bool] */;
  %223 = cast(%var_4041, dtype="int16") /* ty=Tensor[(1056), int16] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(1), int32] */;
  %225 = cast(%222, dtype="int16") /* ty=Tensor[(1056), int16] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?), int16] */;
  %227 = cast(meta[relay.Constant][13] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %228 = %200.3;
  %229 = cast(%228, dtype="float64") /* ty=Tensor[(195), float64] */;
  %230 = cast(%var_4127, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %231 = cast(%var_4079, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %232 = cast(meta[relay.Constant][13] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %233 = reshape(%227, newshape=[4, 16, 10]) /* ty=Tensor[(4, 16, 10), float32] */;
  %234 = reshape(%229, newshape=[195]) /* ty=Tensor[(195), float64] */;
  %235 = reshape(%230, newshape=[1, 1008]) /* ty=Tensor[(1, 1008), uint64] */;
  %236 = reshape(%231, newshape=[624]) /* ty=Tensor[(624), uint64] */;
  %237 = reshape(%232, newshape=[4, 16, 10]) /* ty=Tensor[(4, 16, 10), float32] */;
  %238 = @func_1897(%233, %234, %235, %236, %237) /* ty=(Tensor[(4, 16, 10), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 1008), uint64], Tensor[(27), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64], Tensor[(9, 2, 3), float64], Tensor[(13, 6, 8), uint64], Tensor[(4, 16, 10), bool], Tensor[(13, 6, 8), uint64]) */;
  %239 = %183.0;
  %240 = acosh(%201) /* ty=Tensor[(1056), float32] */;
  %241 = %206.1;
  %242 = %217.3;
  %243 = subtract(%225, %226) /* ty=Tensor[(1056), int16] */;
  %244 = %238.9;
  (%239, %192, %228, meta[relay.Constant][12] /* ty=Tensor[(1, 7), int64] */, %var_4077, meta[relay.Constant][13] /* ty=Tensor[(160, 4), float32] */, %var_4079, %240, %241, meta[relay.Constant][14] /* ty=Tensor[(1, 14), uint8] */, %var_4112, %242, %243, %244, %var_4127)
}

def @func_3294() -> Tensor[(13, 15, 11), bool] {
  @func_3292() /* ty=Tensor[(13, 15, 11), bool] */
}

def @func_5064(%var_4998: Tensor[(7), int64], %var_4999: Tensor[(63), int64], %var_5001: Tensor[(195), float64], %var_5002: Tensor[(624), uint64], %var_5014: Tensor[(12, 4), float64], %var_5048: Tensor[(400), uint8], %var_5053: Tensor[(11, 4, 8), float32]) -> (Tensor[(640), float32], Tensor[(7), int64], Tensor[(63), int64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(624), uint64], Tensor[(16, ?, 3), float64], Tensor[(12, 4), float64], Tensor[(13, 15, 11), bool], Tensor[(9, 2, 3), float32], Tensor[(15, 4, 6), float64], Tensor[(400), uint8], Tensor[(11, 4, 8), float32]) {
  %245 = cast(%var_4998, dtype="int64") /* ty=Tensor[(7), int64] */;
  %246 = cast(%var_4999, dtype="int64") /* ty=Tensor[(63), int64] */;
  %247 = cast(meta[relay.Constant][15] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %248 = cast(%var_5001, dtype="float64") /* ty=Tensor[(195), float64] */;
  %249 = cast(%var_5002, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %250 = reshape(%245, newshape=[7, 1, 1]) /* ty=Tensor[(7, 1, 1), int64] */;
  %251 = reshape(%246, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), int64] */;
  %252 = reshape(%247, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %253 = reshape(%248, newshape=[195]) /* ty=Tensor[(195), float64] */;
  %254 = reshape(%249, newshape=[24, 26]) /* ty=Tensor[(24, 26), uint64] */;
  %255 = @func_3808(%250, %251, %252, %253, %254) /* ty=(Tensor[(7, 9, 1), bool], Tensor[(13, 6, 8), uint64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(12, 84), uint64], Tensor[(24, 26), uint64]) */;
  %256 = cast(%var_5014, dtype="float64") /* ty=Tensor[(12, 4), float64] */;
  %257 = reshape(%256, newshape=[16, 1, 3]) /* ty=Tensor[(16, 1, 3), float64] */;
  %258 = @func_3292() /* ty=Tensor[(13, 15, 11), bool] */;
  %259 = cast(%258, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %260 = reshape(%259, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), uint8] */;
  %261 = @func_3522(%260) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), int16], Tensor[(3, 18), float64], Tensor[(9, 2, 3), float32], Tensor[(13, 15, 11), bool]) */;
  %262 = cast(%var_5048, dtype="uint8") /* ty=Tensor[(400), uint8] */;
  %263 = reshape(%262, newshape=[400, 1]) /* ty=Tensor[(400, 1), uint8] */;
  %264 = @func_3466(%263) /* ty=(Tensor[(400), uint8], Tensor[(400, 1), uint8], Tensor[(3, 13, 5), float64], float64, Tensor[(1056), float64], Tensor[(3, 13, 5), float64], Tensor[(13, 15, 11), float64], Tensor[(13, 15, 11), uint8], Tensor[(15, 4, 6), float64], Tensor[(360), float64], Tensor[(13, 15, 11), float64]) */;
  %265 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %266 = %265.0;
  %267 = cast(%266, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %268 = exp(%267) /* ty=Tensor[(11, 4, 8), float32] */;
  %269 = cast(%var_5053, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%268, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %273 = %255.2;
  %274 = @func_854(%257) /* ty=Tensor[(16, ?, 3), float64] */;
  %275 = %261.3;
  %276 = %264.8;
  %277 = mod(%271, %272) /* ty=Tensor[(11, 4, 8), float32] */;
  (%273, %var_4998, %var_4999, meta[relay.Constant][15] /* ty=Tensor[(640), float32] */, %var_5001, %var_5002, %274, %var_5014, %258, %275, %276, %var_5048, %277)
}

def @func_5805(%var_5804: Tensor[(13, 15, 11), bool]) -> (Tensor[(13, 15, 11), uint16], Tensor[(13, 15, 11), bool]) {
  %285 = fn (%var_5780: Tensor[(13, 15, 11), bool]) -> (Tensor[(13, 15, 11), uint16], Tensor[(13, 15, 11), bool]) {
    %278 = @func_3592() /* ty=Tensor[(13, 15, 11), bool] */;
    %279 = cast(%var_5780, dtype="uint16") /* ty=Tensor[(13, 15, 11), uint16] */;
    %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
    %281 = cast(%278, dtype="uint16") /* ty=Tensor[(13, 15, 11), uint16] */;
    %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %283 = logical_xor(%281, %282) /* ty=Tensor[(13, 15, 11), uint16] */;
    %284 = @func_5559() /* ty=Tensor[(13, 15, 11), bool] */;
    (%283, %284)
  };
  %285(%var_5804) /* ty=(Tensor[(13, 15, 11), uint16], Tensor[(13, 15, 11), bool]) */
}

def @func_4759() -> Tensor[(11, 4, 8), float32] {
  %287 = fn () -> Tensor[(11, 4, 8), float32] {
    %286 = @func_4194() /* ty=(Tensor[(11, 4, 8), float32],) */;
    %286.0
  };
  %287() /* ty=Tensor[(11, 4, 8), float32] */
}

def @func_2097(%var_2038: Tensor[(16, 5, 11), uint64], %var_2039: Tensor[(16, 5, 11), uint64], %var_2077: Tensor[(640), float32], %var_2078: Tensor[(195), float64]) -> (Tensor[(16, 5, 11), uint64], Tensor[(4, 16, 10), float64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(1008), uint64], Tensor[(624), uint64]) {
  %288 = cast(%var_2039, dtype="uint64") /* ty=Tensor[(16, 5, 11), uint64] */;
  %289 = shape_of(%var_2038, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%var_2038, dtype="uint64") /* ty=Tensor[(16, 5, 11), uint64] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %292 = cast(%var_2077, dtype="float32") /* ty=Tensor[(640), float32] */;
  %293 = cast(%var_2078, dtype="float64") /* ty=Tensor[(195), float64] */;
  %294 = cast(meta[relay.Constant][16] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %295 = cast(meta[relay.Constant][17] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %296 = cast(%var_2077, dtype="float32") /* ty=Tensor[(640), float32] */;
  %297 = reshape(%292, newshape=[4, 16, 10]) /* ty=Tensor[(4, 16, 10), float32] */;
  %298 = reshape(%293, newshape=[195]) /* ty=Tensor[(195), float64] */;
  %299 = reshape(%294, newshape=[1, 1008]) /* ty=Tensor[(1, 1008), uint64] */;
  %300 = reshape(%295, newshape=[624]) /* ty=Tensor[(624), uint64] */;
  %301 = reshape(%296, newshape=[4, 16, 10]) /* ty=Tensor[(4, 16, 10), float32] */;
  %302 = @func_1897(%297, %298, %299, %300, %301) /* ty=(Tensor[(4, 16, 10), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 1008), uint64], Tensor[(27), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64], Tensor[(9, 2, 3), float64], Tensor[(13, 6, 8), uint64], Tensor[(4, 16, 10), bool], Tensor[(13, 6, 8), uint64]) */;
  %303 = add(%290, %291) /* ty=Tensor[(16, 5, 11), uint64] */;
  %304 = %302.0;
  (%303, %304, %var_2077, %var_2078, meta[relay.Constant][16] /* ty=Tensor[(1008), uint64] */, meta[relay.Constant][17] /* ty=Tensor[(624), uint64] */)
}

def @func_4530() -> (Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) {
  @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */
}

def @func_6167() -> (Tensor[(11, 4, 8), float32], Tensor[(11, 4, 8), int16], Tensor[(3, 13, 5), float64], Tensor[(1, 195), float64]) {
  @func_6165() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(11, 4, 8), int16], Tensor[(3, 13, 5), float64], Tensor[(1, 195), float64]) */
}

def @func_5176() -> (Tensor[(13, 15, 11), uint8], Tensor[(27), float32], Tensor[(27), float32], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) {
  %315 = fn () -> (Tensor[(13, 15, 11), uint8], Tensor[(27), float32], Tensor[(27), float32], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) {
    %305 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
    %306 = cast(meta[relay.Constant][18] /* ty=Tensor[(27), float32] */, dtype="float32") /* ty=Tensor[(27), float32] */;
    %307 = reshape(%306, newshape=[9, 3]) /* ty=Tensor[(9, 3), float32] */;
    %308 = @func_4591(%307) /* ty=(Tensor[(11, 4, 8), float32], Tensor[(27), float32], Tensor[(9, 3), float32], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
    %309 = cast(meta[relay.Constant][19] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
    %310 = reshape(%309, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
    %311 = @func_1434(%310) /* ty=(Tensor[(9, 2, 3), float64],) */;
    %312 = %305.0;
    %313 = %308.1;
    %314 = %311.0;
    (%312, %313, meta[relay.Constant][18] /* ty=Tensor[(27), float32] */, %314, meta[relay.Constant][19] /* ty=Tensor[(54), float64] */)
  };
  %315() /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(27), float32], Tensor[(27), float32], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */
}

def @func_3168() -> Tensor[(13, 15, 11), uint8] {
  %317 = fn () -> Tensor[(13, 15, 11), uint8] {
    %316 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
    %316.0
  };
  %317() /* ty=Tensor[(13, 15, 11), uint8] */
}

def @func_5820() -> (Tensor[(11, 4, 8), float32],) {
  %318 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %319 = %318.0;
  (%319,)
}

def @func_5341() -> (Tensor[(13, 15, 11), bool], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) {
  %320 = @func_4781() /* ty=(Tensor[(13, 15, 11), bool],) */;
  %321 = cast(meta[relay.Constant][20] /* ty=Tensor[(27), float32] */, dtype="float32") /* ty=Tensor[(27), float32] */;
  %322 = reshape(%321, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
  %323 = @func_212(%322) /* ty=(Tensor[(1, 3, 9), float32],) */;
  %324 = %320.0;
  %325 = %323.0;
  (%324, %325, meta[relay.Constant][20] /* ty=Tensor[(27), float32] */)
}

def @func_6165() -> (Tensor[(11, 4, 8), float32], Tensor[(11, 4, 8), int16], Tensor[(3, 13, 5), float64], Tensor[(1, 195), float64]) {
  %326 = @func_5233() /* ty=(Tensor[(11, 4, 8), float32],) */;
  %327 = %326.0;
  %328 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 4, 8), float32] */, dtype="int16") /* ty=Tensor[(11, 4, 8), int16] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="int16") /* ty=Tensor[(11, 4, 8), int16] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %332 = multiply(%330, %331) /* ty=Tensor[(11, 4, 8), int16] */;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %334 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 4, 8), float32] */, dtype="int16") /* ty=Tensor[(11, 4, 8), int16] */;
  %335 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%332, dtype="int16") /* ty=Tensor[(11, 4, 8), int16] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %338 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 195), float64] */, dtype="float64") /* ty=Tensor[(1, 195), float64] */;
  %339 = reshape(%338, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), float64] */;
  %340 = @func_69(%339) /* ty=(Tensor[(3, 13, 5), float64],) */;
  %341 = rsqrt(%333) /* ty=Tensor[(11, 4, 8), float32] */;
  %342 = minimum(%336, %337) /* ty=Tensor[(11, 4, 8), int16] */;
  %343 = %340.0;
  (%341, %342, %343, meta[relay.Constant][22] /* ty=Tensor[(1, 195), float64] */)
}

def @func_212(%var_199: Tensor[(1, 3, 9), float32]) -> (Tensor[(1, 3, 9), float32],) {
  %344 = cast(%var_199, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %345 = erf(%344) /* ty=Tensor[(1, 3, 9), float32] */;
  (%345,)
}

def @func_3985(%var_3983: Tensor[(13, 15, 11), bool], %var_3984: Tensor[(13, 15, 11), bool]) -> (Tensor[(15, 4, 6), int64], Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), float32], Tensor[(13, 15, 11), float32], Tensor[(2400), float64]) {
  @func_3981(%var_3983, %var_3984) /* ty=(Tensor[(15, 4, 6), int64], Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), float32], Tensor[(13, 15, 11), float32], Tensor[(2400), float64]) */
}

def @func_854(%var_846: Tensor[(16, 1, 3), float64]) -> Tensor[(16, ?, 3), float64] {
  %346 = cast(%var_846, dtype="float64") /* ty=Tensor[(16, 1, 3), float64] */;
  %347 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(16, 1, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 1, 3), float64] */, dtype="float64") /* ty=Tensor[(16, 1, 3), float64] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%348, %349) /* ty=Tensor[(16, ?, 3), float64] */
}

def @func_3240(%var_3212: Tensor[(400), uint8]) -> (Tensor[(13, 15, 11), uint8], uint8, Tensor[(400), uint8], Tensor[(16, 5, 5), float32], Tensor[(1, 7, 2), float64], Tensor[(7, 2), uint8], Tensor[(56, 2), uint8]) {
  %350 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %351 = cast(meta[relay.Constant][24] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %352 = cast(%var_3212, dtype="uint8") /* ty=Tensor[(400), uint8] */;
  %353 = reshape(%351, newshape=[]) /* ty=uint8 */;
  %354 = reshape(%352, newshape=[16, 5, 5]) /* ty=Tensor[(16, 5, 5), uint8] */;
  %355 = @func_350(%353, %354) /* ty=(Tensor[(16, 5, 5), uint8],) */;
  %356 = %355.0;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(16, 5, 5), float32] */;
  %358 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 2), uint8] */, dtype="uint8") /* ty=Tensor[(7, 2), uint8] */;
  %359 = cast(meta[relay.Constant][26] /* ty=Tensor[(56, 2), uint8] */, dtype="uint8") /* ty=Tensor[(56, 2), uint8] */;
  %360 = reshape(%358, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), uint8] */;
  %361 = reshape(%359, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), uint8] */;
  %362 = @func_1168(%360, %361) /* ty=(Tensor[(8, 7, 2), uint8], Tensor[(1, 7, 2), float64], Tensor[(?, 7, 2), bool]) */;
  %363 = %350.0;
  %364 = cosh(%357) /* ty=Tensor[(16, 5, 5), float32] */;
  %365 = %362.1;
  (%363, meta[relay.Constant][24] /* ty=uint8 */, %var_3212, %364, %365, meta[relay.Constant][25] /* ty=Tensor[(7, 2), uint8] */, meta[relay.Constant][26] /* ty=Tensor[(56, 2), uint8] */)
}

def @func_5305() -> (Tensor[(13, 15, 11), bool],) {
  @func_5303() /* ty=(Tensor[(13, 15, 11), bool],) */
}

def @func_4528() -> (Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) {
  %366 = @func_4194() /* ty=(Tensor[(11, 4, 8), float32],) */;
  %367 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %368 = %366.0;
  %369 = %367.0;
  (%368, %369)
}

def @func_5866() -> (Tensor[(11, 4, 8), float64], Tensor[(13, 15, 11), bool]) {
  %381 = fn () -> (Tensor[(11, 4, 8), float64], Tensor[(13, 15, 11), bool]) {
    %370 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
    %371 = %370.0;
    %372 = cast(%371, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
    %373 = sigmoid(%372) /* ty=Tensor[(11, 4, 8), float32] */;
    %374 = cast(%371, dtype="float64") /* ty=Tensor[(11, 4, 8), float64] */;
    %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
    %376 = cast(%373, dtype="float64") /* ty=Tensor[(11, 4, 8), float64] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %378 = @func_4781() /* ty=(Tensor[(13, 15, 11), bool],) */;
    %379 = add(%376, %377) /* ty=Tensor[(11, 4, 8), float64] */;
    %380 = %378.0;
    (%379, %380)
  };
  %381() /* ty=(Tensor[(11, 4, 8), float64], Tensor[(13, 15, 11), bool]) */
}

def @func_5219() -> (Tensor[(13, 15, 11), float64],) {
  %386 = fn () -> (Tensor[(13, 15, 11), float64],) {
    %382 = @func_4955() /* ty=(Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8]) */;
    %383 = %382.1;
    %384 = cast(%383, dtype="float64") /* ty=Tensor[(13, 15, 11), float64] */;
    %385 = log(%384) /* ty=Tensor[(13, 15, 11), float64] */;
    (%385,)
  };
  %386() /* ty=(Tensor[(13, 15, 11), float64],) */
}

def @func_5770(%var_5768: float64, %var_5769: Tensor[(7, 15, 5), float64]) -> (Tensor[(7, 15, 5), uint32], Tensor[(13, 15, 11), float32], Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), float32], Tensor[(2145), bool]) {
  @func_5766(%var_5768, %var_5769) /* ty=(Tensor[(7, 15, 5), uint32], Tensor[(13, 15, 11), float32], Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), float32], Tensor[(2145), bool]) */
}

def @func_4147(%var_4141: float64, %var_4142: Tensor[(1056), float64], %var_4143: Tensor[(63), int64], %var_4144: Tensor[(624), uint64], %var_4145: Tensor[(112), uint8], %var_4146: Tensor[(1008), uint64]) -> (Tensor[(13, 15, 11), uint8], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(1, 7), int64], Tensor[(63), int64], Tensor[(160, 4), float32], Tensor[(624), uint64], Tensor[(1056), float32], Tensor[(1, 7, 2), float64], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(195), float64], Tensor[(1056), int16], Tensor[(624), uint64], Tensor[(1008), uint64]) {
  @func_4139(%var_4141, %var_4142, %var_4143, %var_4144, %var_4145, %var_4146) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(1, 7), int64], Tensor[(63), int64], Tensor[(160, 4), float32], Tensor[(624), uint64], Tensor[(1056), float32], Tensor[(1, 7, 2), float64], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(195), float64], Tensor[(1056), int16], Tensor[(624), uint64], Tensor[(1008), uint64]) */
}

def @func_5303() -> (Tensor[(13, 15, 11), bool],) {
  %387 = @func_4019() /* ty=Tensor[(13, 15, 11), bool] */;
  (%387,)
}

def @func_1897(%var_1807: Tensor[(4, 16, 10), float32], %var_1819: Tensor[(195), float64], %var_1829: Tensor[(1, 1008), uint64], %var_1842: Tensor[(624), uint64], %var_1866: Tensor[(4, 16, 10), float32]) -> (Tensor[(4, 16, 10), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 1008), uint64], Tensor[(27), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64], Tensor[(9, 2, 3), float64], Tensor[(13, 6, 8), uint64], Tensor[(4, 16, 10), bool], Tensor[(13, 6, 8), uint64]) {
  %388 = cast(%var_1807, dtype="float32") /* ty=Tensor[(4, 16, 10), float32] */;
  %389 = sinh(%388) /* ty=Tensor[(4, 16, 10), float32] */;
  %390 = cast(%389, dtype="float64") /* ty=Tensor[(4, 16, 10), float64] */;
  %391 = cast(%var_1819, dtype="float64") /* ty=Tensor[(195), float64] */;
  %392 = reshape(%391, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), float64] */;
  %393 = @func_69(%392) /* ty=(Tensor[(3, 13, 5), float64],) */;
  %394 = cast(meta[relay.Constant][27] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %395 = reshape(%394, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %396 = @func_1434(%395) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %397 = cast(%var_1829, dtype="uint64") /* ty=Tensor[(1, 1008), uint64] */;
  %398 = cast(%var_1829, dtype="uint64") /* ty=Tensor[(1, 1008), uint64] */;
  %399 = cast(meta[relay.Constant][28] /* ty=Tensor[(27), float32] */, dtype="float32") /* ty=Tensor[(27), float32] */;
  %400 = reshape(%397, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
  %401 = reshape(%398, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
  %402 = reshape(%399, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %403 = @func_408(%400, %401, %402) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) */;
  %404 = cast(%var_1842, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %405 = cast(%var_1842, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %406 = reshape(%404, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %407 = reshape(%405, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %408 = cast(meta[relay.Constant][27] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %409 = reshape(%408, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %410 = @func_1434(%409) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %411 = cast(%var_1842, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %412 = @func_1417(%406, %407) /* ty=Tensor[(13, 6, 8), uint64] */;
  %413 = cast(%412, dtype="uint64") /* ty=Tensor[(13, 6, 8), uint64] */;
  %414 = reshape(%411, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %415 = reshape(%413, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %416 = cast(%var_1866, dtype="bool") /* ty=Tensor[(4, 16, 10), bool] */;
  %417 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%389, dtype="bool") /* ty=Tensor[(4, 16, 10), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = cast(%var_1842, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %421 = @func_1417(%414, %415) /* ty=Tensor[(13, 6, 8), uint64] */;
  %422 = cast(%421, dtype="uint64") /* ty=Tensor[(13, 6, 8), uint64] */;
  %423 = reshape(%420, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %424 = reshape(%422, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %425 = log2(%390) /* ty=Tensor[(4, 16, 10), float64] */;
  %426 = %393.0;
  %427 = %396.0;
  %428 = %403.2;
  %429 = %410.0;
  %430 = logical_and(%418, %419) /* ty=Tensor[(4, 16, 10), bool] */;
  %431 = @func_1417(%423, %424) /* ty=Tensor[(13, 6, 8), uint64] */;
  (%425, %426, %var_1819, %427, meta[relay.Constant][27] /* ty=Tensor[(54), float64] */, %428, %var_1829, meta[relay.Constant][28] /* ty=Tensor[(27), float32] */, %412, %var_1842, %429, %421, %430, %431)
}

def @func_4654(%var_4648: Tensor[(27, 1), float32]) -> (Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(11, 4, 8), uint64], Tensor[(6, 7, 8), bool], Tensor[(336), float64], Tensor[(27, 1), float32]) {
  %432 = cast(meta[relay.Constant][29] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %433 = reshape(%432, newshape=[9, 2, 3]) /* ty=Tensor[(9, 2, 3), float64] */;
  %434 = @func_1434(%433) /* ty=(Tensor[(9, 2, 3), float64],) */;
  %435 = @func_4194() /* ty=(Tensor[(11, 4, 8), float32],) */;
  %436 = %435.0;
  %437 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 4, 8), float32] */, dtype="uint64") /* ty=Tensor[(11, 4, 8), uint64] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="uint64") /* ty=Tensor[(11, 4, 8), uint64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %441 = cast(meta[relay.Constant][31] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %442 = cast(%var_4648, dtype="float32") /* ty=Tensor[(27, 1), float32] */;
  %443 = reshape(%441, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float64] */;
  %444 = reshape(%442, newshape=[3, 9]) /* ty=Tensor[(3, 9), float32] */;
  %445 = @func_752(%443, %444) /* ty=(Tensor[(6, 7, 8), bool], Tensor[(1, 3, 9), float32], Tensor[(3, 9), float32], Tensor[(1, 3, 9), float32]) */;
  %446 = %434.0;
  %447 = bitwise_xor(%439, %440) /* ty=Tensor[(11, 4, 8), uint64] */;
  %448 = %445.0;
  (%446, meta[relay.Constant][29] /* ty=Tensor[(54), float64] */, %447, %448, meta[relay.Constant][31] /* ty=Tensor[(336), float64] */, %var_4648)
}

def @func_5530() -> Tensor[(13, 15, 11), bool] {
  @func_4019() /* ty=Tensor[(13, 15, 11), bool] */
}

def @func_6060(%var_6041: Tensor[(624), uint64]) -> (Tensor[(13, 15, 11), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64]) {
  %449 = @func_4781() /* ty=(Tensor[(13, 15, 11), bool],) */;
  %450 = %449.0;
  %451 = cast(%450, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %452 = cast(%var_6041, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %453 = cast(%var_6041, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %454 = reshape(%452, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %455 = reshape(%453, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
  %456 = exp(%451) /* ty=Tensor[(13, 15, 11), float32] */;
  %457 = @func_1417(%454, %455) /* ty=Tensor[(13, 6, 8), uint64] */;
  (%456, %457, %var_6041)
}

def @func_6433() -> (Tensor[(13, 15, 11), float64], Tensor[(13, 15, 11), bool]) {
  %466 = fn () -> (Tensor[(13, 15, 11), float64], Tensor[(13, 15, 11), bool]) {
    %458 = @func_5967() /* ty=(Tensor[(13, 15, 11), uint8],) */;
    %459 = %458.0;
    %460 = cast(%459, dtype="float64") /* ty=Tensor[(13, 15, 11), float64] */;
    %461 = erf(%460) /* ty=Tensor[(13, 15, 11), float64] */;
    %462 = cast(%461, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
    %463 = reshape(%462, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), bool] */;
    %464 = @func_5803(%463) /* ty=(Tensor[(13, 15, 11), uint16], Tensor[(13, 15, 11), bool]) */;
    %465 = %464.1;
    (%461, %465)
  };
  %466() /* ty=(Tensor[(13, 15, 11), float64], Tensor[(13, 15, 11), bool]) */
}

def @func_4912(%var_4910: float32, %var_4911: Tensor[(16, 6, 14), float32]) -> (Tensor[(9, 10, 11), float32], Tensor[(16, 6, 14), uint32]) {
  %473 = fn (%var_4886: float32, %var_4896: Tensor[(16, 6, 14), float32]) -> (Tensor[(9, 10, 11), float32], Tensor[(16, 6, 14), uint32]) {
    %467 = cast(%var_4886, dtype="float32") /* ty=float32 */;
    %468 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 10, 11), float32] */, dtype="float32") /* ty=Tensor[(9, 10, 11), float32] */;
    %469 = cast(%var_4886, dtype="uint32") /* ty=uint32 */;
    %470 = cast(%var_4896, dtype="uint32") /* ty=Tensor[(16, 6, 14), uint32] */;
    %471 = floor_mod(%467, %468) /* ty=Tensor[(9, 10, 11), float32] */;
    %472 = add(%469, %470) /* ty=Tensor[(16, 6, 14), uint32] */;
    (%471, %472)
  };
  %473(%var_4910, %var_4911) /* ty=(Tensor[(9, 10, 11), float32], Tensor[(16, 6, 14), uint32]) */
}

def @func_857(%var_855: Tensor[(16, 1, 3), float64]) -> Tensor[(16, ?, 3), float64] {
  @func_854(%var_855) /* ty=Tensor[(16, ?, 3), float64] */
}

def @func_4956() -> (Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8]) {
  %479 = fn () -> (Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8]) {
    %474 = @func_3592() /* ty=Tensor[(13, 15, 11), bool] */;
    %475 = cast(%474, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
    %476 = reshape(%475, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), uint8] */;
    %477 = @func_3522(%476) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), int16], Tensor[(3, 18), float64], Tensor[(9, 2, 3), float32], Tensor[(13, 15, 11), bool]) */;
    %478 = %477.0;
    (%474, %478)
  };
  %479() /* ty=(Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8]) */
}

def @func_5472(%var_5407: Tensor[(9, 2, 3), float64], %var_5453: Tensor[(14, 1), uint8]) -> (Tensor[(9, 2, 3), bool], Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), float32], Tensor[(15, 4, 6), float32], Tensor[(14, 1), uint8], Tensor[(13, 15, 11), bool]) {
  %480 = @func_5175() /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(27), float32], Tensor[(27), float32], Tensor[(9, 2, 3), float64], Tensor[(54), float64]) */;
  %481 = %480.3;
  %482 = cast(%var_5407, dtype="bool") /* ty=Tensor[(9, 2, 3), bool] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="bool") /* ty=Tensor[(9, 2, 3), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %487 = %486.1;
  %488 = cast(%487, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %489 = cast(%487, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %490 = cast(%var_5453, dtype="uint8") /* ty=Tensor[(14, 1), uint8] */;
  %491 = reshape(%488, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), bool] */;
  %492 = reshape(%489, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), float32] */;
  %493 = reshape(%490, newshape=[1, 14]) /* ty=Tensor[(1, 14), uint8] */;
  %494 = @func_4499(%491, %492, %493) /* ty=(Tensor[(2400), int32], Tensor[(13, 15, 11), bool], Tensor[(1, 7, 2), float64], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(13, 15, 11), float32], Tensor[(15, 4, 6), float32]) */;
  %495 = @func_4781() /* ty=(Tensor[(13, 15, 11), bool],) */;
  %496 = logical_or(%484, %485) /* ty=Tensor[(9, 2, 3), bool] */;
  %497 = @func_3666() /* ty=Tensor[(13, 15, 11), float32] */;
  %498 = %494.6;
  %499 = %495.0;
  (%496, %487, %497, %498, %var_5453, %499)
}

def @func_6362() -> Tensor[(11, 4, 8), int16] {
  %500 = @func_6165() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(11, 4, 8), int16], Tensor[(3, 13, 5), float64], Tensor[(1, 195), float64]) */;
  %500.1
}

def @func_752(%var_729: Tensor[(6, 7, 8), float64], %var_742: Tensor[(3, 9), float32]) -> (Tensor[(6, 7, 8), bool], Tensor[(1, 3, 9), float32], Tensor[(3, 9), float32], Tensor[(1, 3, 9), float32]) {
  %501 = cast(%var_729, dtype="float64") /* ty=Tensor[(6, 7, 8), float64] */;
  %502 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(6, 7, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 8), float64] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %505 = floor_mod(%503, %504) /* ty=Tensor[(6, 7, 8), float64] */;
  %506 = cast(%505, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
  %507 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(6, 7, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 7, 8), float64] */, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %510 = cast(%var_742, dtype="float32") /* ty=Tensor[(3, 9), float32] */;
  %511 = reshape(%510, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
  %512 = @func_212(%511) /* ty=(Tensor[(1, 3, 9), float32],) */;
  %513 = %512.0;
  %514 = cast(%513, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %515 = reshape(%514, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
  %516 = @func_212(%515) /* ty=(Tensor[(1, 3, 9), float32],) */;
  %517 = not_equal(%508, %509) /* ty=Tensor[(6, 7, 8), bool] */;
  %518 = %516.0;
  (%517, %513, %var_742, %518)
}

def @func_5476(%var_5474: Tensor[(9, 2, 3), float64], %var_5475: Tensor[(14, 1), uint8]) -> (Tensor[(9, 2, 3), bool], Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), float32], Tensor[(15, 4, 6), float32], Tensor[(14, 1), uint8], Tensor[(13, 15, 11), bool]) {
  @func_5472(%var_5474, %var_5475) /* ty=(Tensor[(9, 2, 3), bool], Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), float32], Tensor[(15, 4, 6), float32], Tensor[(14, 1), uint8], Tensor[(13, 15, 11), bool]) */
}

def @func_626(%var_624: Tensor[(2, 14, 13), float64]) -> (Tensor[(2, 14, 13), float64],) {
  @func_623(%var_624) /* ty=(Tensor[(2, 14, 13), float64],) */
}

def @func_5967() -> (Tensor[(13, 15, 11), uint8],) {
  %519 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %520 = %519.0;
  (%520,)
}

def @func_3141() -> (Tensor[(13, 15, 11), uint8],) {
  %521 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 15, 11), float64] */;
  %522 = cosh(%521) /* ty=Tensor[(13, 15, 11), float64] */;
  %523 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 15, 11), float64] */, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%522, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %527 = right_shift(%525, %526) /* ty=Tensor[(13, 15, 11), uint8] */;
  (%527,)
}

def @func_5969() -> (Tensor[(13, 15, 11), uint8],) {
  @func_5967() /* ty=(Tensor[(13, 15, 11), uint8],) */
}

def @func_4194() -> (Tensor[(11, 4, 8), float32],) {
  %528 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %529 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(11, 4, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(meta[relay.Constant][35] /* ty=Tensor[(11, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %532 = power(%530, %531) /* ty=Tensor[(11, 4, 8), float32] */;
  (%532,)
}

def @func_623(%var_613: Tensor[(2, 14, 13), float64]) -> (Tensor[(2, 14, 13), float64],) {
  %533 = cast(%var_613, dtype="float64") /* ty=Tensor[(2, 14, 13), float64] */;
  %534 = tan(%533) /* ty=Tensor[(2, 14, 13), float64] */;
  (%534,)
}

def @func_4499(%var_4461: Tensor[(13, 15, 11), bool], %var_4470: Tensor[(13, 15, 11), float32], %var_4476: Tensor[(1, 14), uint8]) -> (Tensor[(2400), int32], Tensor[(13, 15, 11), bool], Tensor[(1, 7, 2), float64], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(13, 15, 11), float32], Tensor[(15, 4, 6), float32]) {
  %535 = @func_4019() /* ty=Tensor[(13, 15, 11), bool] */;
  %536 = cast(%var_4461, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %540 = cast(%var_4476, dtype="uint8") /* ty=Tensor[(1, 14), uint8] */;
  %541 = cast(meta[relay.Constant][38] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %542 = reshape(%540, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), uint8] */;
  %543 = reshape(%541, newshape=[8, 7, 2]) /* ty=Tensor[(8, 7, 2), uint8] */;
  %544 = @func_1168(%542, %543) /* ty=(Tensor[(8, 7, 2), uint8], Tensor[(1, 7, 2), float64], Tensor[(?, 7, 2), bool]) */;
  %545 = cast(%535, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %546 = tan(%545) /* ty=Tensor[(13, 15, 11), float32] */;
  %547 = cast(%var_4470, dtype="int32") /* ty=Tensor[(13, 15, 11), int32] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="int32") /* ty=Tensor[(13, 15, 11), int32] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %551 = maximum(%549, %550) /* ty=Tensor[(13, 15, 11), int32] */;
  %552 = cast(%var_4461, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%551, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %556 = cast(meta[relay.Constant][37] /* ty=Tensor[(2400), int32] */, dtype="int32") /* ty=Tensor[(2400), int32] */;
  %557 = reshape(%556, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), int32] */;
  %558 = @func_2697(%557) /* ty=(Tensor[(16, 15, 10), int32], Tensor[(15, 4, 6), int64], Tensor[(15, 4, 6), float64]) */;
  %559 = %558.2;
  %560 = cast(meta[relay.Constant][37] /* ty=Tensor[(2400), int32] */, dtype="int32") /* ty=Tensor[(2400), int32] */;
  %561 = reshape(%560, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), int32] */;
  %562 = @func_2697(%561) /* ty=(Tensor[(16, 15, 10), int32], Tensor[(15, 4, 6), int64], Tensor[(15, 4, 6), float64]) */;
  %563 = %562.2;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(15, 4, 6), float32] */;
  %565 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%559, dtype="float32") /* ty=Tensor[(15, 4, 6), float32] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %568 = less_equal(%538, %539) /* ty=Tensor[(13, 15, 11), bool] */;
  %569 = %544.1;
  %570 = floor_mod(%554, %555) /* ty=Tensor[(13, 15, 11), float32] */;
  %571 = floor_mod(%566, %567) /* ty=Tensor[(15, 4, 6), float32] */;
  (meta[relay.Constant][37] /* ty=Tensor[(2400), int32] */, %568, %569, %var_4476, meta[relay.Constant][38] /* ty=Tensor[(112), uint8] */, %570, %571)
}

def @func_1657(%var_1656: Tensor[(2, 13, 4), int32]) -> (Tensor[(2, 13, 4), float64], Tensor[(2, 13, 4), bool]) {
  %584 = fn (%var_1637: Tensor[(2, 13, 4), int32]) -> (Tensor[(2, 13, 4), float64], Tensor[(2, 13, 4), bool]) {
    %572 = cast(%var_1637, dtype="int32") /* ty=Tensor[(2, 13, 4), int32] */;
    %573 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(2, 13, 4), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 13, 4), int32] */, dtype="int32") /* ty=Tensor[(2, 13, 4), int32] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %576 = right_shift(%574, %575) /* ty=Tensor[(2, 13, 4), int32] */;
    %577 = cast(%576, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
    %578 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 13, 4), int32] */, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
    %579 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
    %580 = cast(%576, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
    %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %582 = exp(%577) /* ty=Tensor[(2, 13, 4), float64] */;
    %583 = greater(%580, %581) /* ty=Tensor[(2, 13, 4), bool] */;
    (%582, %583)
  };
  %584(%var_1656) /* ty=(Tensor[(2, 13, 4), float64], Tensor[(2, 13, 4), bool]) */
}

def @func_3292() -> Tensor[(13, 15, 11), bool] {
  %585 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %586 = %585.0;
  %587 = @func_3141() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %588 = %587.0;
  %589 = cast(%588, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %590 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%586, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%591, %592) /* ty=Tensor[(13, 15, 11), bool] */
}

def @func_6063(%var_6061: Tensor[(624), uint64]) -> (Tensor[(13, 15, 11), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64]) {
  @func_6060(%var_6061) /* ty=(Tensor[(13, 15, 11), float32], Tensor[(13, 6, 8), uint64], Tensor[(624), uint64]) */
}

def @func_5235() -> (Tensor[(11, 4, 8), float32],) {
  @func_5233() /* ty=(Tensor[(11, 4, 8), float32],) */
}

def @func_69(%var_62: Tensor[(3, 13, 5), float64]) -> (Tensor[(3, 13, 5), float64],) {
  %593 = cast(%var_62, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %594 = sinh(%593) /* ty=Tensor[(3, 13, 5), float64] */;
  %595 = cast(%594, dtype="float64") /* ty=Tensor[(3, 13, 5), float64] */;
  %596 = log10(%595) /* ty=Tensor[(3, 13, 5), float64] */;
  (%596,)
}

def @func_4196() -> (Tensor[(11, 4, 8), float32],) {
  @func_4194() /* ty=(Tensor[(11, 4, 8), float32],) */
}

def @func_6204(%var_6202: Tensor[(13, 15, 11), uint8]) -> (Tensor[(13, 15, 11), bool], Tensor[(3, 9), float32], Tensor[(9, 3, 9), float32]) {
  @func_6201(%var_6202) /* ty=(Tensor[(13, 15, 11), bool], Tensor[(3, 9), float32], Tensor[(9, 3, 9), float32]) */
}

def @func_1171(%var_1169: Tensor[(1, 7, 2), uint8], %var_1170: Tensor[(8, 7, 2), uint8]) -> (Tensor[(8, 7, 2), uint8], Tensor[(1, 7, 2), float64], Tensor[(?, 7, 2), bool]) {
  %611 = fn (%var_1143: Tensor[(1, 7, 2), uint8], %var_1144: Tensor[(8, 7, 2), uint8]) -> (Tensor[(8, 7, 2), uint8], Tensor[(1, 7, 2), float64], Tensor[(?, 7, 2), bool]) {
    %597 = cast(%var_1143, dtype="uint8") /* ty=Tensor[(1, 7, 2), uint8] */;
    %598 = cast(%var_1144, dtype="uint8") /* ty=Tensor[(8, 7, 2), uint8] */;
    %599 = cast(%var_1143, dtype="float32") /* ty=Tensor[(1, 7, 2), float32] */;
    %600 = log10(%599) /* ty=Tensor[(1, 7, 2), float32] */;
    %601 = cast(%600, dtype="float64") /* ty=Tensor[(1, 7, 2), float64] */;
    %602 = log(%601) /* ty=Tensor[(1, 7, 2), float64] */;
    %603 = cast(%602, dtype="float64") /* ty=Tensor[(1, 7, 2), float64] */;
    %604 = cast(%var_1143, dtype="bool") /* ty=Tensor[(1, 7, 2), bool] */;
    %605 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
    %606 = cast(%602, dtype="bool") /* ty=Tensor[(1, 7, 2), bool] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %608 = bitwise_and(%597, %598) /* ty=Tensor[(8, 7, 2), uint8] */;
    %609 = atanh(%603) /* ty=Tensor[(1, 7, 2), float64] */;
    %610 = equal(%606, %607) /* ty=Tensor[(?, 7, 2), bool] */;
    (%608, %609, %610)
  };
  %611(%var_1169, %var_1170) /* ty=(Tensor[(8, 7, 2), uint8], Tensor[(1, 7, 2), float64], Tensor[(?, 7, 2), bool]) */
}

def @func_72(%var_70: Tensor[(3, 13, 5), float64]) -> (Tensor[(3, 13, 5), float64],) {
  @func_69(%var_70) /* ty=(Tensor[(3, 13, 5), float64],) */
}

def @func_3469(%var_3467: Tensor[(400, 1), uint8]) -> (Tensor[(400), uint8], Tensor[(400, 1), uint8], Tensor[(3, 13, 5), float64], float64, Tensor[(1056), float64], Tensor[(3, 13, 5), float64], Tensor[(13, 15, 11), float64], Tensor[(13, 15, 11), uint8], Tensor[(15, 4, 6), float64], Tensor[(360), float64], Tensor[(13, 15, 11), float64]) {
  @func_3466(%var_3467) /* ty=(Tensor[(400), uint8], Tensor[(400, 1), uint8], Tensor[(3, 13, 5), float64], float64, Tensor[(1056), float64], Tensor[(3, 13, 5), float64], Tensor[(13, 15, 11), float64], Tensor[(13, 15, 11), uint8], Tensor[(15, 4, 6), float64], Tensor[(360), float64], Tensor[(13, 15, 11), float64]) */
}

def @func_5380(%var_5349: Tensor[(5, 13, 10), float32]) -> (Tensor[(5, 13, 10), float32],) {
  %612 = cast(%var_5349, dtype="float32") /* ty=Tensor[(5, 13, 10), float32] */;
  %613 = atanh(%612) /* ty=Tensor[(5, 13, 10), float32] */;
  %614 = cast(%613, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
  %615 = erf(%614) /* ty=Tensor[(5, 13, 10), float64] */;
  %616 = cast(%615, dtype="float32") /* ty=Tensor[(5, 13, 10), float32] */;
  %617 = log2(%616) /* ty=Tensor[(5, 13, 10), float32] */;
  (%617,)
}

def @func_5343() -> (Tensor[(13, 15, 11), bool], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) {
  @func_5341() /* ty=(Tensor[(13, 15, 11), bool], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) */
}

def @func_3667() -> Tensor[(13, 15, 11), float32] {
  %620 = fn () -> Tensor[(13, 15, 11), float32] {
    %618 = @func_3592() /* ty=Tensor[(13, 15, 11), bool] */;
    %619 = cast(%618, dtype="float32") /* ty=Tensor[(13, 15, 11), float32] */;
    asin(%619) /* ty=Tensor[(13, 15, 11), float32] */
  };
  %620() /* ty=Tensor[(13, 15, 11), float32] */
}

def @func_2697(%var_2674: Tensor[(16, 15, 10), int32]) -> (Tensor[(16, 15, 10), int32], Tensor[(15, 4, 6), int64], Tensor[(15, 4, 6), float64]) {
  %621 = cast(%var_2674, dtype="int32") /* ty=Tensor[(16, 15, 10), int32] */;
  %622 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(16, 15, 10), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 15, 10), int32] */, dtype="int32") /* ty=Tensor[(16, 15, 10), int32] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %625 = cast(meta[relay.Constant][42] /* ty=Tensor[(360, 1), float64] */, dtype="float64") /* ty=Tensor[(360, 1), float64] */;
  %626 = reshape(%625, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float64] */;
  %627 = @func_241(%626) /* ty=Tensor[(15, 4, 6), float64] */;
  %628 = cast(meta[relay.Constant][42] /* ty=Tensor[(360, 1), float64] */, dtype="int64") /* ty=Tensor[(360, 1), int64] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="int64") /* ty=Tensor[(15, 4, 6), int64] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %632 = cast(meta[relay.Constant][42] /* ty=Tensor[(360, 1), float64] */, dtype="float64") /* ty=Tensor[(360, 1), float64] */;
  %633 = reshape(%632, newshape=[15, 4, 6]) /* ty=Tensor[(15, 4, 6), float64] */;
  %634 = bitwise_xor(%623, %624) /* ty=Tensor[(16, 15, 10), int32] */;
  %635 = multiply(%630, %631) /* ty=Tensor[(15, 4, 6), int64] */;
  %636 = @func_241(%633) /* ty=Tensor[(15, 4, 6), float64] */;
  (%634, %635, %636)
}

def @func_4397(%var_4393: Tensor[(27), float32]) -> (Tensor[(13, 15, 11), bool], Tensor[(9, 16, 7), int64], Tensor[(1008), uint64], Tensor[(27), float32]) {
  %637 = cast(meta[relay.Constant][43] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %638 = cast(meta[relay.Constant][43] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %639 = cast(%var_4393, dtype="float32") /* ty=Tensor[(27), float32] */;
  %640 = reshape(%637, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
  %641 = reshape(%638, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
  %642 = reshape(%639, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %643 = @func_408(%640, %641, %642) /* ty=(Tensor[(3, 13, 5), float64], Tensor[(195), float64], Tensor[(9, 16, 7), int64], Tensor[(1, 3, 9), float32], Tensor[(27), float32]) */;
  %644 = @func_3592() /* ty=Tensor[(13, 15, 11), bool] */;
  %645 = %643.2;
  (%644, %645, meta[relay.Constant][43] /* ty=Tensor[(1008), uint64] */, %var_4393)
}

def @func_2103(%var_2099: Tensor[(16, 5, 11), uint64], %var_2100: Tensor[(16, 5, 11), uint64], %var_2101: Tensor[(640), float32], %var_2102: Tensor[(195), float64]) -> (Tensor[(16, 5, 11), uint64], Tensor[(4, 16, 10), float64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(1008), uint64], Tensor[(624), uint64]) {
  @func_2097(%var_2099, %var_2100, %var_2101, %var_2102) /* ty=(Tensor[(16, 5, 11), uint64], Tensor[(4, 16, 10), float64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(1008), uint64], Tensor[(624), uint64]) */
}

def @func_756(%var_754: Tensor[(6, 7, 8), float64], %var_755: Tensor[(3, 9), float32]) -> (Tensor[(6, 7, 8), bool], Tensor[(1, 3, 9), float32], Tensor[(3, 9), float32], Tensor[(1, 3, 9), float32]) {
  @func_752(%var_754, %var_755) /* ty=(Tensor[(6, 7, 8), bool], Tensor[(1, 3, 9), float32], Tensor[(3, 9), float32], Tensor[(1, 3, 9), float32]) */
}

def @func_4020() -> Tensor[(13, 15, 11), bool] {
  %646 = fn () -> Tensor[(13, 15, 11), bool] {
    @func_3592() /* ty=Tensor[(13, 15, 11), bool] */
  };
  %646() /* ty=Tensor[(13, 15, 11), bool] */
}

def @func_353(%var_351: uint8, %var_352: Tensor[(16, 5, 5), uint8]) -> (Tensor[(16, 5, 5), uint8],) {
  %650 = fn (%var_338: uint8, %var_339: Tensor[(16, 5, 5), uint8]) -> (Tensor[(16, 5, 5), uint8],) {
    %647 = cast(%var_338, dtype="uint8") /* ty=uint8 */;
    %648 = cast(%var_339, dtype="uint8") /* ty=Tensor[(16, 5, 5), uint8] */;
    %649 = logical_xor(%647, %648) /* ty=Tensor[(16, 5, 5), uint8] */;
    (%649,)
  };
  %650(%var_351, %var_352) /* ty=(Tensor[(16, 5, 5), uint8],) */
}

def @func_3243(%var_3241: Tensor[(400), uint8]) -> (Tensor[(13, 15, 11), uint8], uint8, Tensor[(400), uint8], Tensor[(16, 5, 5), float32], Tensor[(1, 7, 2), float64], Tensor[(7, 2), uint8], Tensor[(56, 2), uint8]) {
  @func_3240(%var_3241) /* ty=(Tensor[(13, 15, 11), uint8], uint8, Tensor[(400), uint8], Tensor[(16, 5, 5), float32], Tensor[(1, 7, 2), float64], Tensor[(7, 2), uint8], Tensor[(56, 2), uint8]) */
}

def @func_5941(%var_5940: Tensor[(11, 12, 13), float64]) -> (Tensor[(11, 12, 13), float64], Tensor[(11, 12, 13), float64], Tensor[(13, 6, 8), float64]) {
  %668 = fn (%var_5909: Tensor[(11, 12, 13), float64]) -> (Tensor[(11, 12, 13), float64], Tensor[(11, 12, 13), float64], Tensor[(13, 6, 8), float64]) {
    %651 = cast(%var_5909, dtype="float64") /* ty=Tensor[(11, 12, 13), float64] */;
    %652 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(11, 12, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %653 = cast(meta[relay.Constant][44] /* ty=Tensor[(11, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(11, 12, 13), float64] */;
    %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %655 = cast(%var_5909, dtype="float64") /* ty=Tensor[(11, 12, 13), float64] */;
    %656 = cast(meta[relay.Constant][45] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
    %657 = cast(meta[relay.Constant][45] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
    %658 = reshape(%656, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
    %659 = reshape(%657, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), uint64] */;
    %660 = @func_1417(%658, %659) /* ty=Tensor[(13, 6, 8), uint64] */;
    %661 = cast(meta[relay.Constant][45] /* ty=Tensor[(624), uint64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
    %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
    %663 = cast(%660, dtype="float64") /* ty=Tensor[(13, 6, 8), float64] */;
    %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %665 = divide(%653, %654) /* ty=Tensor[(11, 12, 13), float64] */;
    %666 = cos(%655) /* ty=Tensor[(11, 12, 13), float64] */;
    %667 = divide(%663, %664) /* ty=Tensor[(13, 6, 8), float64] */;
    (%665, %666, %667)
  };
  %668(%var_5940) /* ty=(Tensor[(11, 12, 13), float64], Tensor[(11, 12, 13), float64], Tensor[(13, 6, 8), float64]) */
}

def @func_5766(%var_5695: float64, %var_5696: Tensor[(7, 15, 5), float64]) -> (Tensor[(7, 15, 5), uint32], Tensor[(13, 15, 11), float32], Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), float32], Tensor[(2145), bool]) {
  %669 = cast(%var_5695, dtype="float64") /* ty=float64 */;
  %670 = cast(%var_5696, dtype="float64") /* ty=Tensor[(7, 15, 5), float64] */;
  %671 = floor_divide(%669, %670) /* ty=Tensor[(7, 15, 5), float64] */;
  %672 = cast(%var_5695, dtype="uint32") /* ty=uint32 */;
  %673 = cast(%671, dtype="uint32") /* ty=Tensor[(7, 15, 5), uint32] */;
  %674 = cast(meta[relay.Constant][46] /* ty=Tensor[(2145), bool] */, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %675 = cast(meta[relay.Constant][46] /* ty=Tensor[(2145), bool] */, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %676 = reshape(%674, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), bool] */;
  %677 = reshape(%675, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), bool] */;
  %678 = @func_3981(%676, %677) /* ty=(Tensor[(15, 4, 6), int64], Tensor[(13, 15, 11), uint8], Tensor[(13, 15, 11), float32], Tensor[(13, 15, 11), float32], Tensor[(2400), float64]) */;
  %679 = cast(meta[relay.Constant][46] /* ty=Tensor[(2145), bool] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %680 = asin(%679) /* ty=Tensor[(2145), float32] */;
  %681 = cast(meta[relay.Constant][47] /* ty=Tensor[(2145), float32] */, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(1), int32] */;
  %683 = cast(%680, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?), bool] */;
  %685 = multiply(%672, %673) /* ty=Tensor[(7, 15, 5), uint32] */;
  %686 = %678.2;
  %687 = @func_3592() /* ty=Tensor[(13, 15, 11), bool] */;
  %688 = @func_3666() /* ty=Tensor[(13, 15, 11), float32] */;
  %689 = less(%683, %684) /* ty=Tensor[(2145), bool] */;
  (%685, %686, %687, %688, %689)
}

def @func_1437(%var_1435: Tensor[(9, 2, 3), float64]) -> (Tensor[(9, 2, 3), float64],) {
  @func_1434(%var_1435) /* ty=(Tensor[(9, 2, 3), float64],) */
}

def @func_6116(%var_6097: Tensor[(11, 4, 8), float32]) -> (Tensor[(11, 4, 8), float32], Tensor[(11, 4, 8), bool]) {
  %690 = @func_4528() /* ty=(Tensor[(11, 4, 8), float32], Tensor[(13, 15, 11), uint8]) */;
  %691 = %690.0;
  %692 = cast(%691, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %693 = cast(%var_6097, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
  %694 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%691, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %697 = atan(%692) /* ty=Tensor[(11, 4, 8), float32] */;
  %698 = less(%695, %696) /* ty=Tensor[(11, 4, 8), bool] */;
  (%697, %698)
}

def @func_243(%var_242: Tensor[(15, 4, 6), float64]) -> Tensor[(15, 4, 6), float64] {
  %700 = fn (%var_238: Tensor[(15, 4, 6), float64]) -> Tensor[(15, 4, 6), float64] {
    %699 = cast(%var_238, dtype="float64") /* ty=Tensor[(15, 4, 6), float64] */;
    atan(%699) /* ty=Tensor[(15, 4, 6), float64] */
  };
  %700(%var_242) /* ty=Tensor[(15, 4, 6), float64] */
}

def @func_1598(%var_1596: float64, %var_1597: Tensor[(12, 8, 11), float64]) -> (Tensor[(12, 8, 11), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64]) {
  %708 = fn (%var_1584: float64, %var_1585: Tensor[(12, 8, 11), float64]) -> (Tensor[(12, 8, 11), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64]) {
    %701 = cast(%var_1584, dtype="float64") /* ty=float64 */;
    %702 = cast(%var_1585, dtype="float64") /* ty=Tensor[(12, 8, 11), float64] */;
    %703 = cast(meta[relay.Constant][48] /* ty=Tensor[(195), float64] */, dtype="float64") /* ty=Tensor[(195), float64] */;
    %704 = reshape(%703, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), float64] */;
    %705 = @func_69(%704) /* ty=(Tensor[(3, 13, 5), float64],) */;
    %706 = divide(%701, %702) /* ty=Tensor[(12, 8, 11), float64] */;
    %707 = %705.0;
    (%706, %707, meta[relay.Constant][48] /* ty=Tensor[(195), float64] */)
  };
  %708(%var_1596, %var_1597) /* ty=(Tensor[(12, 8, 11), float64], Tensor[(3, 13, 5), float64], Tensor[(195), float64]) */
}

def @func_6316(%var_6283: Tensor[(13, 5, 8), int32], %var_6284: Tensor[(13, 5, 8), int32]) -> (Tensor[(13, 15, 11), bool], Tensor[(13, 5, 8), bool]) {
  %709 = cast(%var_6284, dtype="int32") /* ty=Tensor[(13, 5, 8), int32] */;
  %710 = shape_of(%var_6283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%var_6283, dtype="int32") /* ty=Tensor[(13, 5, 8), int32] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %713 = bitwise_xor(%711, %712) /* ty=Tensor[(13, 5, 8), int32] */;
  %714 = cast(%713, dtype="bool") /* ty=Tensor[(13, 5, 8), bool] */;
  %715 = shape_of(%var_6284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%var_6284, dtype="bool") /* ty=Tensor[(13, 5, 8), bool] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %718 = @func_5559() /* ty=Tensor[(13, 15, 11), bool] */;
  %719 = greater_equal(%716, %717) /* ty=Tensor[(13, 5, 8), bool] */;
  (%718, %719)
}

def @func_4657(%var_4655: Tensor[(27, 1), float32]) -> (Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(11, 4, 8), uint64], Tensor[(6, 7, 8), bool], Tensor[(336), float64], Tensor[(27, 1), float32]) {
  @func_4654(%var_4655) /* ty=(Tensor[(9, 2, 3), float64], Tensor[(54), float64], Tensor[(11, 4, 8), uint64], Tensor[(6, 7, 8), bool], Tensor[(336), float64], Tensor[(27, 1), float32]) */
}

def @func_5276(%var_5269: int8) -> (Tensor[(13, 2, 14), int8],) {
  %720 = cast(%var_5269, dtype="int8") /* ty=int8 */;
  %721 = cast(meta[relay.Constant][49] /* ty=Tensor[(13, 2, 14), int8] */, dtype="int8") /* ty=Tensor[(13, 2, 14), int8] */;
  %722 = subtract(%720, %721) /* ty=Tensor[(13, 2, 14), int8] */;
  (%722,)
}

def @func_4504(%var_4501: Tensor[(13, 15, 11), bool], %var_4502: Tensor[(13, 15, 11), float32], %var_4503: Tensor[(1, 14), uint8]) -> (Tensor[(2400), int32], Tensor[(13, 15, 11), bool], Tensor[(1, 7, 2), float64], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(13, 15, 11), float32], Tensor[(15, 4, 6), float32]) {
  @func_4499(%var_4501, %var_4502, %var_4503) /* ty=(Tensor[(2400), int32], Tensor[(13, 15, 11), bool], Tensor[(1, 7, 2), float64], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(13, 15, 11), float32], Tensor[(15, 4, 6), float32]) */
}

def @func_5073(%var_5066: Tensor[(7), int64], %var_5067: Tensor[(63), int64], %var_5068: Tensor[(195), float64], %var_5069: Tensor[(624), uint64], %var_5070: Tensor[(12, 4), float64], %var_5071: Tensor[(400), uint8], %var_5072: Tensor[(11, 4, 8), float32]) -> (Tensor[(640), float32], Tensor[(7), int64], Tensor[(63), int64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(624), uint64], Tensor[(16, ?, 3), float64], Tensor[(12, 4), float64], Tensor[(13, 15, 11), bool], Tensor[(9, 2, 3), float32], Tensor[(15, 4, 6), float64], Tensor[(400), uint8], Tensor[(11, 4, 8), float32]) {
  @func_5064(%var_5066, %var_5067, %var_5068, %var_5069, %var_5070, %var_5071, %var_5072) /* ty=(Tensor[(640), float32], Tensor[(7), int64], Tensor[(63), int64], Tensor[(640), float32], Tensor[(195), float64], Tensor[(624), uint64], Tensor[(16, ?, 3), float64], Tensor[(12, 4), float64], Tensor[(13, 15, 11), bool], Tensor[(9, 2, 3), float32], Tensor[(15, 4, 6), float64], Tensor[(400), uint8], Tensor[(11, 4, 8), float32]) */
}

def @func_5822() -> (Tensor[(11, 4, 8), float32],) {
  @func_5820() /* ty=(Tensor[(11, 4, 8), float32],) */
}

def @func_6201(%var_6179: Tensor[(13, 15, 11), uint8]) -> (Tensor[(13, 15, 11), bool], Tensor[(3, 9), float32], Tensor[(9, 3, 9), float32]) {
  %723 = @func_5967() /* ty=(Tensor[(13, 15, 11), uint8],) */;
  %724 = %723.0;
  %725 = cast(%var_6179, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="bool") /* ty=Tensor[(13, 15, 11), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %729 = cast(meta[relay.Constant][50] /* ty=Tensor[(3, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 9), float32] */;
  %730 = reshape(%729, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
  %731 = @func_212(%730) /* ty=(Tensor[(1, 3, 9), float32],) */;
  %732 = %731.0;
  %733 = cast(%732, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %734 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 3, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %735 = less(%727, %728) /* ty=Tensor[(13, 15, 11), bool] */;
  %736 = minimum(%733, %734) /* ty=Tensor[(9, 3, 9), float32] */;
  (%735, meta[relay.Constant][50] /* ty=Tensor[(3, 9), float32] */, %736)
}

def @func_1420(%var_1418: Tensor[(13, 6, 8), uint64], %var_1419: Tensor[(13, 6, 8), uint64]) -> Tensor[(13, 6, 8), uint64] {
  %741 = fn (%var_1406: Tensor[(13, 6, 8), uint64], %var_1407: Tensor[(13, 6, 8), uint64]) -> Tensor[(13, 6, 8), uint64] {
    %737 = cast(%var_1407, dtype="uint64") /* ty=Tensor[(13, 6, 8), uint64] */;
    %738 = shape_of(%var_1406, dtype="int32") /* ty=Tensor[(3), int32] */;
    %739 = cast(%var_1406, dtype="uint64") /* ty=Tensor[(13, 6, 8), uint64] */;
    %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    maximum(%739, %740) /* ty=Tensor[(13, 6, 8), uint64] */
  };
  %741(%var_1418, %var_1419) /* ty=Tensor[(13, 6, 8), uint64] */
}

def @func_6119(%var_6117: Tensor[(11, 4, 8), float32]) -> (Tensor[(11, 4, 8), float32], Tensor[(11, 4, 8), bool]) {
  @func_6116(%var_6117) /* ty=(Tensor[(11, 4, 8), float32], Tensor[(11, 4, 8), bool]) */
}

def @func_5279(%var_5277: int8) -> (Tensor[(13, 2, 14), int8],) {
  @func_5276(%var_5277) /* ty=(Tensor[(13, 2, 14), int8],) */
}

def @func_6320(%var_6318: Tensor[(13, 5, 8), int32], %var_6319: Tensor[(13, 5, 8), int32]) -> (Tensor[(13, 15, 11), bool], Tensor[(13, 5, 8), bool]) {
  @func_6316(%var_6318, %var_6319) /* ty=(Tensor[(13, 15, 11), bool], Tensor[(13, 5, 8), bool]) */
}

def @func_3593() -> Tensor[(13, 15, 11), bool] {
  %742 = fn () -> Tensor[(13, 15, 11), bool] {
    @func_3292() /* ty=Tensor[(13, 15, 11), bool] */
  };
  %742() /* ty=Tensor[(13, 15, 11), bool] */
}

def @func_4556(%var_4554: Tensor[(12, 9, 2), float32]) -> Tensor[(12, 9, 2), bool] {
  @func_4553(%var_4554) /* ty=Tensor[(12, 9, 2), bool] */
}

def @func_5560() -> Tensor[(13, 15, 11), bool] {
  %744 = fn () -> Tensor[(13, 15, 11), bool] {
    %743 = @func_4955() /* ty=(Tensor[(13, 15, 11), bool], Tensor[(13, 15, 11), uint8]) */;
    %743.0
  };
  %744() /* ty=Tensor[(13, 15, 11), bool] */
}

def @func_4781() -> (Tensor[(13, 15, 11), bool],) {
  %745 = @func_4019() /* ty=Tensor[(13, 15, 11), bool] */;
  (%745,)
}

def @func_4783() -> (Tensor[(13, 15, 11), bool],) {
  @func_4781() /* ty=(Tensor[(13, 15, 11), bool],) */
}

def @func_5383(%var_5381: Tensor[(5, 13, 10), float32]) -> (Tensor[(5, 13, 10), float32],) {
  @func_5380(%var_5381) /* ty=(Tensor[(5, 13, 10), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen58/build/output.py:1594: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen58/build/output.py", line 1599, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(576) tvmgen_default_fused_cast_reshape_less_equal_kernel0(signed char* __restrict__ T_less_equal, signed char* __restrict__ placeholder, ushort* __restrict__ placeholder1) {
  T_less_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) <= ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

