==========mod==========
#[version = "0.0.5"]
def @func_7879() -> Tensor[(8, 15, 9), float64] {
  %0 = @func_7479() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(9, 12, 9), bool], Tensor[(550), uint32]) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  log(%2) /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_8067(%var_8038: Tensor[(6, 5, 16), float32]) -> (Tensor[(6, 5, 16), float32],) {
  %3 = cast(%var_8038, dtype="float32") /* ty=Tensor[(6, 5, 16), float32] */;
  %4 = asin(%3) /* ty=Tensor[(6, 5, 16), float32] */;
  (%4,)
}

def @func_9192() -> (Tensor[(8, 15, 9), float64], Tensor[(14, 2, 2), float32], Tensor[(28, 2), float64]) {
  %5 = @func_6459() /* ty=(Tensor[(15, 16, 15), float64], Tensor[(8, 15, 9), float64]) */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(28, 2), float64] */, dtype="float64") /* ty=Tensor[(28, 2), float64] */;
  %7 = reshape(%6, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), float64] */;
  %8 = %5.1;
  %9 = @func_6104(%7) /* ty=Tensor[(14, 2, 2), float32] */;
  (%8, %9, meta[relay.Constant][0] /* ty=Tensor[(28, 2), float64] */)
}

def @func_6759() -> (Tensor[(8, 15, 9), float64], Tensor[(273), uint16], Tensor[(39, 7), uint16]) {
  %10 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(39, 7), uint16] */, dtype="uint16") /* ty=Tensor[(39, 7), uint16] */;
  %12 = reshape(%11, newshape=[273]) /* ty=Tensor[(273), uint16] */;
  %13 = @func_5968(%12) /* ty=(Tensor[(8, 15, 9), float32], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */;
  %14 = %10.0;
  %15 = %13.2;
  (%14, %15, meta[relay.Constant][1] /* ty=Tensor[(39, 7), uint16] */)
}

def @func_8292(%var_8277: Tensor[(2), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(8, 15, 9), float64], Tensor[(550), uint32]) {
  %16 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %18 = cast(%var_8277, dtype="float32") /* ty=Tensor[(2), float32] */;
  %19 = reshape(%17, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), float64] */;
  %20 = reshape(%18, newshape=[2]) /* ty=Tensor[(2), float32] */;
  %21 = @func_1191(%19, %20) /* ty=(Tensor[(2340), float32], Tensor[(2), float32], Tensor[(6, 2, 15), float32]) */;
  %22 = @func_8213() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %23 = @func_7479() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(9, 12, 9), bool], Tensor[(550), uint32]) */;
  %24 = %16.0;
  %25 = %21.1;
  %26 = %22.0;
  %27 = %23.2;
  (%24, %25, meta[relay.Constant][2] /* ty=Tensor[(180), float64] */, %var_8277, %26, %27)
}

def @func_8478() -> Tensor[(8, 15, 9), float32] {
  @func_6363() /* ty=Tensor[(8, 15, 9), float32] */
}

def @func_1077(%var_1058: Tensor[(2, 1, 12), float32]) -> Tensor[(2, ?, 12), float32] {
  %28 = cast(%var_1058, dtype="float32") /* ty=Tensor[(2, 1, 12), float32] */;
  %29 = acos(%28) /* ty=Tensor[(2, 1, 12), float32] */;
  %30 = cast(%29, dtype="uint8") /* ty=Tensor[(2, 1, 12), uint8] */;
  %31 = shape_of(%var_1058, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_1058, dtype="uint8") /* ty=Tensor[(2, 1, 12), uint8] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %34 = bitwise_and(%32, %33) /* ty=Tensor[(2, ?, 12), uint8] */;
  %35 = cast(%34, dtype="float32") /* ty=Tensor[(2, ?, 12), float32] */;
  log(%35) /* ty=Tensor[(2, ?, 12), float32] */
}

def @func_4836(%var_4816: Tensor[(12), int8]) -> (Tensor[(8, 15, 9), float64], Tensor[(2, 6, 2), int8], Tensor[(12), int8]) {
  %36 = @func_4335() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(13, 15, 12), float64]) */;
  %37 = cast(%var_4816, dtype="int8") /* ty=Tensor[(12), int8] */;
  %38 = reshape(%37, newshape=[1, 6, 2]) /* ty=Tensor[(1, 6, 2), int8] */;
  %39 = @func_545(%38) /* ty=(Tensor[(2, 6, 2), int8],) */;
  %40 = %36.0;
  %41 = %39.0;
  (%40, %41, %var_4816)
}

def @func_6340() -> (Tensor[(8, 15, 9), float32],) {
  %42 = @func_5485() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %43 = %42.0;
  (%43,)
}

def @func_9015(%var_9012: Tensor[(273), uint16]) -> (Tensor[(8, 15, 9), float32], Tensor[(1053), float32], Tensor[(27, 70), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) {
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(27, 70), uint16] */, dtype="uint16") /* ty=Tensor[(27, 70), uint16] */;
  %45 = reshape(%44, newshape=[1890]) /* ty=Tensor[(1890), uint16] */;
  %46 = @func_7929(%45) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(1053), float32], Tensor[(1890), uint16]) */;
  %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(27, 70), uint16] */, dtype="float64") /* ty=Tensor[(27, 70), float64] */;
  %48 = @func_5095() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(27, 70), uint16] */, dtype="uint16") /* ty=Tensor[(27, 70), uint16] */;
  %50 = reshape(%49, newshape=[1890]) /* ty=Tensor[(1890), uint16] */;
  %51 = @func_7929(%50) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(1053), float32], Tensor[(1890), uint16]) */;
  %52 = cast(%var_9012, dtype="uint16") /* ty=Tensor[(273), uint16] */;
  %53 = reshape(%52, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), uint16] */;
  %54 = @func_6363() /* ty=Tensor[(8, 15, 9), float32] */;
  %55 = %46.1;
  %56 = acos(%47) /* ty=Tensor[(27, 70), float64] */;
  %57 = %48.0;
  %58 = %51.2;
  %59 = @func_1731(%53) /* ty=Tensor[(3, 7, 13), uint16] */;
  (%54, %55, %56, %57, %58, %59, %var_9012)
}

def @func_8170() -> (Tensor[(55, 10), uint32],) {
  %60 = @func_5244() /* ty=(Tensor[(10, 11, 5), bool], Tensor[(55, 10), uint32], Tensor[(15, 16, 15), float64], Tensor[(15, 16, 15), float64]) */;
  %61 = %60.1;
  (%61,)
}

def @func_8965() -> Tensor[(8, 15, 9), float64] {
  @func_4262() /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_7364(%var_7329: Tensor[(2912), uint32], %var_7333: Tensor[(2, 4, 12), float32], %var_7346: Tensor[(2), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(2912), int64], Tensor[(12, 4, 13), float32], Tensor[(624), float32], Tensor[(1, 1, 2), float32], Tensor[(2), float32], Tensor[(2, 4, 12), int16]) {
  %62 = @func_5449() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %63 = cast(%var_7329, dtype="int64") /* ty=Tensor[(2912), int64] */;
  %64 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2912), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %65 = cast(meta[relay.Constant][4] /* ty=Tensor[(2912), uint32] */, dtype="int64") /* ty=Tensor[(2912), int64] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?), int64] */;
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %68 = reshape(%67, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), float32] */;
  %69 = @func_1988(%68) /* ty=(Tensor[(12, 4, 13), float32],) */;
  %70 = cast(%var_7346, dtype="float32") /* ty=Tensor[(2), float32] */;
  %71 = reshape(%70, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
  %72 = @func_921(%71) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %73 = cast(meta[relay.Constant][6] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(2912), uint32] */, dtype="uint32") /* ty=Tensor[(2912), uint32] */;
  %75 = reshape(%73, newshape=[]) /* ty=uint32 */;
  %76 = reshape(%74, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), uint32] */;
  %77 = @func_2870(%75, %76) /* ty=(Tensor[(13, 14, 16), uint32], Tensor[(2, ?, 12), float32], Tensor[(24), float32]) */;
  %78 = %77.1;
  %79 = cast(%78, dtype="uint32") /* ty=Tensor[(2, ?, 12), uint32] */;
  %80 = cast(%var_7333, dtype="uint32") /* ty=Tensor[(2, 4, 12), uint32] */;
  %81 = add(%79, %80) /* ty=Tensor[(2, 4, 12), uint32] */;
  %82 = cast(%81, dtype="int16") /* ty=Tensor[(2, 4, 12), int16] */;
  %83 = cast(meta[relay.Constant][6] /* ty=uint32 */, dtype="int16") /* ty=int16 */;
  %84 = %62.0;
  %85 = add(%65, %66) /* ty=Tensor[(2912), int64] */;
  %86 = %69.0;
  %87 = %72.0;
  %88 = bitwise_xor(%82, %83) /* ty=Tensor[(2, 4, 12), int16] */;
  (%84, %85, %86, meta[relay.Constant][5] /* ty=Tensor[(624), float32] */, %87, %var_7346, %88)
}

def @func_8898(%var_8876: Tensor[(16, 3, 15), float64]) -> (Tensor[(16, 3, 15), float64], Tensor[(8, 15, 9), float64]) {
  %89 = cast(%var_8876, dtype="float64") /* ty=Tensor[(16, 3, 15), float64] */;
  %90 = acos(%89) /* ty=Tensor[(16, 3, 15), float64] */;
  %91 = @func_4182() /* ty=Tensor[(8, 15, 9), float64] */;
  (%90, %91)
}

def @func_8387() -> (Tensor[(2340), float32], Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) {
  %92 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
  %93 = @func_8213() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %94 = @func_7716() /* ty=(Tensor[(55, 10), uint32], Tensor[(8, 15, 9), float64]) */;
  %95 = %92.0;
  %96 = %93.0;
  %97 = %94.1;
  (%95, %96, %97)
}

def @func_8412(%var_8394: Tensor[(7, 14, 10), float64], %var_8402: Tensor[(1890), uint16]) -> (Tensor[(7, 14, 10), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16], Tensor[(55, 10), uint32], uint64) {
  %98 = cast(%var_8394, dtype="float64") /* ty=Tensor[(7, 14, 10), float64] */;
  %99 = cast(%var_8402, dtype="uint16") /* ty=Tensor[(1890), uint16] */;
  %100 = reshape(%99, newshape=[1890]) /* ty=Tensor[(1890), uint16] */;
  %101 = @func_7929(%100) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(1053), float32], Tensor[(1890), uint16]) */;
  %102 = cast(meta[relay.Constant][7] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %103 = reshape(%102, newshape=[]) /* ty=uint64 */;
  %104 = @func_7065(%103) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(2340), float64], Tensor[(55, 10), uint32], Tensor[(5, 7, 12), int16], uint64, Tensor[(286), uint64]) */;
  %105 = cos(%98) /* ty=Tensor[(7, 14, 10), float64] */;
  %106 = %101.0;
  %107 = %104.3;
  (%105, %106, %var_8402, %107, meta[relay.Constant][7] /* ty=uint64 */)
}

def @func_5968(%var_5966: Tensor[(273), uint16]) -> (Tensor[(8, 15, 9), float32], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) {
  %108 = @func_5754() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %109 = %108.0;
  %110 = cast(%109, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  %111 = cast(%var_5966, dtype="uint16") /* ty=Tensor[(273), uint16] */;
  %112 = reshape(%111, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), uint16] */;
  %113 = sigmoid(%110) /* ty=Tensor[(8, 15, 9), float32] */;
  %114 = @func_1731(%112) /* ty=Tensor[(3, 7, 13), uint16] */;
  (%113, %114, %var_5966)
}

def @func_6684() -> (Tensor[(8, 15, 9), float64],) {
  %115 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %116 = %115.0;
  (%116,)
}

def @func_9377() -> (Tensor[(2340), float32], Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), int64]) {
  %117 = @func_6932() /* ty=(Tensor[(2340), float32],) */;
  %118 = @func_4262() /* ty=Tensor[(8, 15, 9), float64] */;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %120 = reshape(%119, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float64] */;
  %121 = %117.0;
  %122 = @func_5382(%120) /* ty=Tensor[(8, 15, 9), int64] */;
  (%121, %118, %122)
}

def @func_9310(%var_9278: Tensor[(273), uint16]) -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(273), uint16], Tensor[(18, 50), float64], Tensor[(273), uint16], Tensor[(8, 15, 9), float32], Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16]) {
  %123 = @func_5630() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %124 = @func_5630() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(18, 50), float64] */, dtype="float64") /* ty=Tensor[(18, 50), float64] */;
  %126 = cast(meta[relay.Constant][8] /* ty=Tensor[(18, 50), float64] */, dtype="float64") /* ty=Tensor[(18, 50), float64] */;
  %127 = cast(%var_9278, dtype="uint16") /* ty=Tensor[(273), uint16] */;
  %128 = reshape(%125, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float64] */;
  %129 = reshape(%126, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float64] */;
  %130 = reshape(%127, newshape=[273]) /* ty=Tensor[(273), uint16] */;
  %131 = @func_8090(%128, %129, %130) /* ty=(Tensor[(9, 10, 10), float64], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */;
  %132 = @func_7479() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(9, 12, 9), bool], Tensor[(550), uint32]) */;
  %133 = cast(meta[relay.Constant][9] /* ty=Tensor[(1890), uint16] */, dtype="uint16") /* ty=Tensor[(1890), uint16] */;
  %134 = reshape(%133, newshape=[1890]) /* ty=Tensor[(1890), uint16] */;
  %135 = @func_7929(%134) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(1053), float32], Tensor[(1890), uint16]) */;
  %136 = %123.0;
  %137 = %124.0;
  %138 = %131.2;
  %139 = @func_5854() /* ty=Tensor[(8, 15, 9), float32] */;
  %140 = %132.0;
  %141 = %135.0;
  (%136, %137, %138, meta[relay.Constant][8] /* ty=Tensor[(18, 50), float64] */, %var_9278, %139, %140, %141, meta[relay.Constant][9] /* ty=Tensor[(1890), uint16] */)
}

def @func_7929(%var_7920: Tensor[(1890), uint16]) -> (Tensor[(8, 15, 9), float64], Tensor[(1053), float32], Tensor[(1890), uint16]) {
  %142 = @func_6459() /* ty=(Tensor[(15, 16, 15), float64], Tensor[(8, 15, 9), float64]) */;
  %143 = cast(%var_7920, dtype="uint16") /* ty=Tensor[(1890), uint16] */;
  %144 = reshape(%143, newshape=[15, 9, 14]) /* ty=Tensor[(15, 9, 14), uint16] */;
  %145 = @func_7538(%144) /* ty=(Tensor[(15, 9, 14), uint16], Tensor[(550), uint32], Tensor[(1053), float32]) */;
  %146 = %142.1;
  %147 = %145.2;
  (%146, %147, %var_7920)
}

def @func_8793(%var_8751: Tensor[(2), float32], %var_8757: Tensor[(91), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(13, 15, 12), float64], Tensor[(2), float32], Tensor[(7, 13, ?), uint16], Tensor[(91), float32]) {
  %148 = @func_5311() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) */;
  %149 = cast(%var_8751, dtype="float32") /* ty=Tensor[(2), float32] */;
  %150 = reshape(%149, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
  %151 = @func_921(%150) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %152 = cast(%var_8757, dtype="float32") /* ty=Tensor[(91), float32] */;
  %153 = reshape(%152, newshape=[7, 13, 1]) /* ty=Tensor[(7, 13, 1), float32] */;
  %154 = %148.1;
  %155 = %151.1;
  %156 = @func_7768(%153) /* ty=Tensor[(7, 13, ?), uint16] */;
  (%154, %155, %var_8751, %156, %var_8757)
}

def @func_6003(%var_5995: Tensor[(8, 15, 9), float64]) -> Tensor[(8, 15, 9), bool] {
  %157 = @func_4694() /* ty=Tensor[(8, 15, 9), float64] */;
  %158 = cast(%var_5995, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%160, %161) /* ty=Tensor[(8, 15, 9), bool] */
}

def @func_7232() -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) {
  %162 = @func_5915() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %163 = %162.0;
  %164 = cast(%163, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  %165 = reshape(%164, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float32] */;
  %166 = @func_4497(%165) /* ty=Tensor[(8, 15, 9), uint16] */;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %168 = log10(%167) /* ty=Tensor[(8, 15, 9), float64] */;
  (%163, %168)
}

def @func_9079(%var_9025: Tensor[(8, 6, 15), int8], %var_9026: Tensor[(8, 6, 15), int8], %var_9038: Tensor[(13, 21), uint16]) -> (Tensor[(8, 6, 15), bool], Tensor[(27, 70), float64], Tensor[(13, 21), uint16]) {
  %169 = cast(%var_9026, dtype="bool") /* ty=Tensor[(8, 6, 15), bool] */;
  %170 = shape_of(%var_9025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%var_9025, dtype="bool") /* ty=Tensor[(8, 6, 15), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %173 = cast(%var_9038, dtype="uint16") /* ty=Tensor[(13, 21), uint16] */;
  %174 = reshape(%173, newshape=[273]) /* ty=Tensor[(273), uint16] */;
  %175 = @func_9015(%174) /* ty=(Tensor[(8, 15, 9), float32], Tensor[(1053), float32], Tensor[(27, 70), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */;
  %176 = greater_equal(%171, %172) /* ty=Tensor[(8, 6, 15), bool] */;
  %177 = %175.2;
  (%176, %177, %var_9038)
}

def @func_3046(%var_3027: Tensor[(13, 9, 9), float32]) -> (Tensor[(13, 9, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) {
  %178 = cast(%var_3027, dtype="float32") /* ty=Tensor[(13, 9, 9), float32] */;
  %179 = cast(meta[relay.Constant][10] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %180 = reshape(%179, newshape=[10, 11, 5]) /* ty=Tensor[(10, 11, 5), uint32] */;
  %181 = sinh(%178) /* ty=Tensor[(13, 9, 9), float32] */;
  %182 = @func_1458(%180) /* ty=Tensor[(10, 11, 5), bool] */;
  (%181, %182, meta[relay.Constant][10] /* ty=Tensor[(550), uint32] */)
}

def @func_6619() -> Tensor[(55, 10), uint32] {
  %183 = @func_5244() /* ty=(Tensor[(10, 11, 5), bool], Tensor[(55, 10), uint32], Tensor[(15, 16, 15), float64], Tensor[(15, 16, 15), float64]) */;
  %183.1
}

def @func_2870(%var_2851: uint32, %var_2852: Tensor[(13, 14, 16), uint32]) -> (Tensor[(13, 14, 16), uint32], Tensor[(2, ?, 12), float32], Tensor[(24), float32]) {
  %184 = cast(%var_2851, dtype="uint32") /* ty=uint32 */;
  %185 = cast(%var_2852, dtype="uint32") /* ty=Tensor[(13, 14, 16), uint32] */;
  %186 = cast(meta[relay.Constant][11] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %187 = reshape(%186, newshape=[2, 1, 12]) /* ty=Tensor[(2, 1, 12), float32] */;
  %188 = bitwise_or(%184, %185) /* ty=Tensor[(13, 14, 16), uint32] */;
  %189 = @func_1077(%187) /* ty=Tensor[(2, ?, 12), float32] */;
  (%188, %189, meta[relay.Constant][11] /* ty=Tensor[(24), float32] */)
}

def @func_1559(%var_1498: Tensor[(1, 5, 7), uint32], %var_1503: Tensor[(550), uint32], %var_1532: Tensor[(286), uint64]) -> (Tensor[(?, 5, 7), uint64], Tensor[(10, 11, 5), bool], Tensor[(10, 11, 5), float32], Tensor[(13, 2, 11), uint64], Tensor[(286), uint64], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) {
  %190 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %191 = cast(%var_1498, dtype="bool") /* ty=Tensor[(1, 5, 7), bool] */;
  %192 = not_equal(%190, %191) /* ty=Tensor[(1, 5, 7), bool] */;
  %193 = cast(%var_1498, dtype="uint64") /* ty=Tensor[(1, 5, 7), uint64] */;
  %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%192, dtype="uint64") /* ty=Tensor[(1, 5, 7), uint64] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %197 = cast(%var_1503, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %198 = reshape(%197, newshape=[10, 11, 5]) /* ty=Tensor[(10, 11, 5), uint32] */;
  %199 = @func_1458(%198) /* ty=Tensor[(10, 11, 5), bool] */;
  %200 = cast(%var_1503, dtype="bool") /* ty=Tensor[(550), bool] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="bool") /* ty=Tensor[(10, 11, 5), bool] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %204 = cast(%199, dtype="float32") /* ty=Tensor[(10, 11, 5), float32] */;
  %205 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="uint64") /* ty=uint64 */;
  %206 = cast(%var_1532, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %207 = reshape(%205, newshape=[]) /* ty=uint64 */;
  %208 = reshape(%206, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), uint64] */;
  %209 = @func_1487(%207, %208) /* ty=(Tensor[(13, 2, 11), uint64],) */;
  %210 = cast(meta[relay.Constant][13] /* ty=Tensor[(2340), float32] */, dtype="float32") /* ty=Tensor[(2340), float32] */;
  %211 = reshape(%210, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
  %212 = @func_424(%211) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(13, 15, 12), float64]) */;
  %213 = right_shift(%195, %196) /* ty=Tensor[(?, 5, 7), uint64] */;
  %214 = greater(%202, %203) /* ty=Tensor[(10, 11, 5), bool] */;
  %215 = rsqrt(%204) /* ty=Tensor[(10, 11, 5), float32] */;
  %216 = %209.0;
  %217 = %212.1;
  (%213, %214, %215, %216, %var_1532, %217, meta[relay.Constant][13] /* ty=Tensor[(2340), float32] */)
}

def @func_1731(%var_1717: Tensor[(3, 7, 13), uint16]) -> Tensor[(3, 7, 13), uint16] {
  %218 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 1, 13), uint16] */, dtype="uint16") /* ty=Tensor[(1, 1, 13), uint16] */;
  %219 = cast(%var_1717, dtype="uint16") /* ty=Tensor[(3, 7, 13), uint16] */;
  logical_xor(%218, %219) /* ty=Tensor[(3, 7, 13), uint16] */
}

def @func_5668() -> (Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(2), float32]) {
  %220 = cast(meta[relay.Constant][15] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
  %221 = reshape(%220, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
  %222 = @func_921(%221) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %223 = @func_4182() /* ty=Tensor[(8, 15, 9), float64] */;
  %224 = %222.2;
  (%223, %224, meta[relay.Constant][15] /* ty=Tensor[(2), float32] */)
}

def @func_8213() -> (Tensor[(8, 15, 9), float64],) {
  %225 = @func_6684() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %226 = %225.0;
  (%226,)
}

def @func_8554(%var_8537: Tensor[(15, 16, 15), float64], %var_8546: Tensor[(450, 2), float64]) -> (Tensor[(15, 16, 15), int32], Tensor[(273), uint16], Tensor[(450, 2), float64], Tensor[(273), float64]) {
  %227 = @func_7896() /* ty=(Tensor[(15, 16, 15), float64],) */;
  %228 = %227.0;
  %229 = cast(%var_8537, dtype="int32") /* ty=Tensor[(15, 16, 15), int32] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%228, dtype="int32") /* ty=Tensor[(15, 16, 15), int32] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %233 = cast(%var_8546, dtype="float64") /* ty=Tensor[(450, 2), float64] */;
  %234 = cast(%var_8546, dtype="float64") /* ty=Tensor[(450, 2), float64] */;
  %235 = cast(meta[relay.Constant][16] /* ty=Tensor[(273), uint16] */, dtype="uint16") /* ty=Tensor[(273), uint16] */;
  %236 = reshape(%233, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float64] */;
  %237 = reshape(%234, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float64] */;
  %238 = reshape(%235, newshape=[273]) /* ty=Tensor[(273), uint16] */;
  %239 = @func_8090(%236, %237, %238) /* ty=(Tensor[(9, 10, 10), float64], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */;
  %240 = cast(meta[relay.Constant][16] /* ty=Tensor[(273), uint16] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %241 = logical_xor(%231, %232) /* ty=Tensor[(15, 16, 15), int32] */;
  %242 = %239.2;
  %243 = log10(%240) /* ty=Tensor[(273), float64] */;
  (%241, %242, %var_8546, %243)
}

def @func_4406(%var_4380: Tensor[(2, 1), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(1, 180), float64], Tensor[(2, 1), float32]) {
  %244 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %245 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %246 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 180), float64] */, dtype="float64") /* ty=Tensor[(1, 180), float64] */;
  %247 = cast(%var_4380, dtype="float32") /* ty=Tensor[(2, 1), float32] */;
  %248 = reshape(%246, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), float64] */;
  %249 = reshape(%247, newshape=[2]) /* ty=Tensor[(2), float32] */;
  %250 = @func_1191(%248, %249) /* ty=(Tensor[(2340), float32], Tensor[(2), float32], Tensor[(6, 2, 15), float32]) */;
  %251 = %244.0;
  %252 = %245.0;
  %253 = %250.1;
  (%251, %252, %253, meta[relay.Constant][17] /* ty=Tensor[(1, 180), float64] */, %var_4380)
}

def @func_7970(%var_7966: Tensor[(624), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), uint16], Tensor[(8, 15, 9), float64], Tensor[(12, 4, 13), float32], Tensor[(624), float32]) {
  %254 = @func_7232() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) */;
  %255 = %254.0;
  %256 = cast(%255, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  %257 = reshape(%256, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float32] */;
  %258 = @func_5915() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %259 = cast(%var_7966, dtype="float32") /* ty=Tensor[(624), float32] */;
  %260 = reshape(%259, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), float32] */;
  %261 = @func_1988(%260) /* ty=(Tensor[(12, 4, 13), float32],) */;
  %262 = @func_4497(%257) /* ty=Tensor[(8, 15, 9), uint16] */;
  %263 = %258.0;
  %264 = %261.0;
  (%255, %262, %263, %264, %var_7966)
}

def @func_7603(%var_7563: Tensor[(13, 11, 9), float32]) -> (Tensor[(13, 11, 9), float64], Tensor[(13, 11, 9), float32], Tensor[(55, 10), uint32], Tensor[(8, 15, 9), float64]) {
  %265 = cast(%var_7563, dtype="float32") /* ty=Tensor[(13, 11, 9), float32] */;
  %266 = asinh(%265) /* ty=Tensor[(13, 11, 9), float32] */;
  %267 = cast(%266, dtype="float64") /* ty=Tensor[(13, 11, 9), float64] */;
  %268 = cast(%266, dtype="float32") /* ty=Tensor[(13, 11, 9), float32] */;
  %269 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %270 = exp(%267) /* ty=Tensor[(13, 11, 9), float64] */;
  %271 = acos(%268) /* ty=Tensor[(13, 11, 9), float32] */;
  %272 = @func_6619() /* ty=Tensor[(55, 10), uint32] */;
  %273 = %269.0;
  (%270, %271, %272, %273)
}

def @func_921(%var_908: Tensor[(1, 1, 2), float32]) -> (Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) {
  %274 = cast(%var_908, dtype="float32") /* ty=Tensor[(1, 1, 2), float32] */;
  %275 = cast(meta[relay.Constant][18] /* ty=Tensor[(2340), float32] */, dtype="float32") /* ty=Tensor[(2340), float32] */;
  %276 = reshape(%275, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
  %277 = @func_424(%276) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(13, 15, 12), float64]) */;
  %278 = sigmoid(%274) /* ty=Tensor[(1, 1, 2), float32] */;
  %279 = %277.1;
  (%278, %279, meta[relay.Constant][18] /* ty=Tensor[(2340), float32] */)
}

def @func_5382(%var_5358: Tensor[(8, 15, 9), float64]) -> Tensor[(8, 15, 9), int64] {
  %280 = @func_4262() /* ty=Tensor[(8, 15, 9), float64] */;
  %281 = cast(%var_5358, dtype="int64") /* ty=Tensor[(8, 15, 9), int64] */;
  %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%280, dtype="int64") /* ty=Tensor[(8, 15, 9), int64] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%283, %284) /* ty=Tensor[(8, 15, 9), int64] */
}

def @func_4613(%var_4607: Tensor[(8, 15, 9), float64]) -> Tensor[(8, 15, 9), bool] {
  %285 = @func_4262() /* ty=Tensor[(8, 15, 9), float64] */;
  %286 = cast(%var_4607, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%285, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%288, %289) /* ty=Tensor[(8, 15, 9), bool] */
}

def @func_3616(%var_3613: uint32) -> (Tensor[(14, 10, 9), float64], Tensor[(24), float32], uint32, Tensor[(2912), uint32]) {
  %290 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 9), float64] */;
  %291 = cast(%var_3613, dtype="uint32") /* ty=uint32 */;
  %292 = cast(meta[relay.Constant][20] /* ty=Tensor[(2912), uint32] */, dtype="uint32") /* ty=Tensor[(2912), uint32] */;
  %293 = reshape(%291, newshape=[]) /* ty=uint32 */;
  %294 = reshape(%292, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), uint32] */;
  %295 = @func_2870(%293, %294) /* ty=(Tensor[(13, 14, 16), uint32], Tensor[(2, ?, 12), float32], Tensor[(24), float32]) */;
  %296 = rsqrt(%290) /* ty=Tensor[(14, 10, 9), float64] */;
  %297 = %295.2;
  (%296, %297, %var_3613, meta[relay.Constant][20] /* ty=Tensor[(2912), uint32] */)
}

def @func_4182() -> Tensor[(8, 15, 9), float64] {
  %298 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  asinh(%298) /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_4262() -> Tensor[(8, 15, 9), float64] {
  %299 = @func_4182() /* ty=Tensor[(8, 15, 9), float64] */;
  %300 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%302, %303) /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_7667(%var_7647: Tensor[(55, 10), float64]) -> (Tensor[(55, 10), bool], Tensor[(55, 10), uint16], Tensor[(8, 15, 9), float64]) {
  %304 = @func_6619() /* ty=Tensor[(55, 10), uint32] */;
  %305 = cast(meta[relay.Constant][23] /* ty=Tensor[(55, 10), uint32] */, dtype="bool") /* ty=Tensor[(55, 10), bool] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(2), int32] */;
  %307 = cast(%304, dtype="bool") /* ty=Tensor[(55, 10), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %309 = cast(meta[relay.Constant][23] /* ty=Tensor[(55, 10), uint32] */, dtype="float64") /* ty=Tensor[(55, 10), float64] */;
  %310 = tan(%309) /* ty=Tensor[(55, 10), float64] */;
  %311 = cast(%var_7647, dtype="uint16") /* ty=Tensor[(55, 10), uint16] */;
  %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(2), int32] */;
  %313 = cast(%310, dtype="uint16") /* ty=Tensor[(55, 10), uint16] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %315 = logical_and(%307, %308) /* ty=Tensor[(55, 10), bool] */;
  %316 = add(%313, %314) /* ty=Tensor[(55, 10), uint16] */;
  %317 = @func_4262() /* ty=Tensor[(8, 15, 9), float64] */;
  (%315, %316, %317)
}

def @func_5072(%var_5067: uint64, %var_5068: Tensor[(286), uint64]) -> (Tensor[(5, 7, 12), int16], Tensor[(5, 7, 12), float64], Tensor[(5, 7, 12), float32], Tensor[(13, 2, 11), uint64], uint64, Tensor[(286), uint64]) {
  %318 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 7, 12), int16] */, dtype="int16") /* ty=Tensor[(5, 7, 12), int16] */;
  %319 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(5, 7, 12), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 7, 12), int16] */, dtype="int16") /* ty=Tensor[(5, 7, 12), int16] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %322 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 7, 12), int16] */, dtype="float64") /* ty=Tensor[(5, 7, 12), float64] */;
  %323 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(5, 7, 12), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 7, 12), int16] */, dtype="float64") /* ty=Tensor[(5, 7, 12), float64] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %326 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 7, 12), int16] */, dtype="float32") /* ty=Tensor[(5, 7, 12), float32] */;
  %327 = cast(%var_5067, dtype="uint64") /* ty=uint64 */;
  %328 = cast(%var_5068, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %329 = reshape(%327, newshape=[]) /* ty=uint64 */;
  %330 = reshape(%328, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), uint64] */;
  %331 = @func_1487(%329, %330) /* ty=(Tensor[(13, 2, 11), uint64],) */;
  %332 = minimum(%320, %321) /* ty=Tensor[(5, 7, 12), int16] */;
  %333 = subtract(%324, %325) /* ty=Tensor[(5, 7, 12), float64] */;
  %334 = asinh(%326) /* ty=Tensor[(5, 7, 12), float32] */;
  %335 = %331.0;
  (%332, %333, %334, %335, %var_5067, %var_5068)
}

def @func_5754() -> (Tensor[(8, 15, 9), float64],) {
  %336 = @func_5668() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(2), float32]) */;
  %337 = %336.0;
  (%337,)
}

def @func_7065(%var_7060: uint64) -> (Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(2340), float64], Tensor[(55, 10), uint32], Tensor[(5, 7, 12), int16], uint64, Tensor[(286), uint64]) {
  %338 = @func_6347() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %339 = cast(meta[relay.Constant][26] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
  %340 = reshape(%339, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
  %341 = @func_921(%340) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %342 = %341.2;
  %343 = cast(meta[relay.Constant][27] /* ty=Tensor[(2340), float32] */, dtype="float64") /* ty=Tensor[(2340), float64] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(1), int32] */;
  %345 = cast(%342, dtype="float64") /* ty=Tensor[(2340), float64] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?), float64] */;
  %347 = cast(%var_7060, dtype="uint64") /* ty=uint64 */;
  %348 = cast(meta[relay.Constant][28] /* ty=Tensor[(286), uint64] */, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %349 = reshape(%347, newshape=[]) /* ty=uint64 */;
  %350 = reshape(%348, newshape=[286]) /* ty=Tensor[(286), uint64] */;
  %351 = @func_5072(%349, %350) /* ty=(Tensor[(5, 7, 12), int16], Tensor[(5, 7, 12), float64], Tensor[(5, 7, 12), float32], Tensor[(13, 2, 11), uint64], uint64, Tensor[(286), uint64]) */;
  %352 = %338.0;
  %353 = subtract(%345, %346) /* ty=Tensor[(2340), float64] */;
  %354 = @func_6619() /* ty=Tensor[(55, 10), uint32] */;
  %355 = %351.0;
  (%352, meta[relay.Constant][26] /* ty=Tensor[(2), float32] */, %353, %354, %355, %var_7060, meta[relay.Constant][28] /* ty=Tensor[(286), uint64] */)
}

def @func_7768(%var_7751: Tensor[(7, 13, 1), float32]) -> Tensor[(7, 13, ?), uint16] {
  %356 = cast(%var_7751, dtype="float32") /* ty=Tensor[(7, 13, 1), float32] */;
  %357 = sqrt(%356) /* ty=Tensor[(7, 13, 1), float32] */;
  %358 = cast(%357, dtype="uint16") /* ty=Tensor[(7, 13, 1), uint16] */;
  %359 = shape_of(%var_7751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%var_7751, dtype="uint16") /* ty=Tensor[(7, 13, 1), uint16] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%360, %361) /* ty=Tensor[(7, 13, ?), uint16] */
}

def @func_7092() -> (Tensor[(8, 15, 9), float32],) {
  %362 = @func_5854() /* ty=Tensor[(8, 15, 9), float32] */;
  (%362,)
}

def @func_9224() -> (Tensor[(2340), float32], Tensor[(8, 15, 9), uint16], Tensor[(1080), float32], Tensor[(2340), float32]) {
  %363 = @func_9204() /* ty=(Tensor[(2340), float32],) */;
  %364 = cast(meta[relay.Constant][29] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %365 = reshape(%364, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float32] */;
  %366 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
  %367 = %363.0;
  %368 = @func_4497(%365) /* ty=Tensor[(8, 15, 9), uint16] */;
  %369 = %366.0;
  (%367, %368, meta[relay.Constant][29] /* ty=Tensor[(1080), float32] */, %369)
}

def @func_5449() -> (Tensor[(8, 15, 9), float64],) {
  %370 = @func_5435() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %371 = %370.0;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %373 = erf(%372) /* ty=Tensor[(8, 15, 9), float64] */;
  (%373,)
}

def @func_9204() -> (Tensor[(2340), float32],) {
  %374 = @func_6932() /* ty=(Tensor[(2340), float32],) */;
  %375 = %374.0;
  (%375,)
}

def @func_5485() -> (Tensor[(8, 15, 9), float32],) {
  %376 = @func_5435() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %377 = %376.0;
  (%377,)
}

def @func_7479() -> (Tensor[(8, 15, 9), float64], Tensor[(9, 12, 9), bool], Tensor[(550), uint32]) {
  %378 = @func_5095() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %379 = cast(meta[relay.Constant][30] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %380 = reshape(%379, newshape=[550]) /* ty=Tensor[(550), uint32] */;
  %381 = @func_6656(%380) /* ty=(Tensor[(9, 12, 9), bool], Tensor[(2340), float32], Tensor[(35), uint32], Tensor[(550), uint32], Tensor[(286), uint64]) */;
  %382 = %378.0;
  %383 = %381.0;
  (%382, %383, meta[relay.Constant][30] /* ty=Tensor[(550), uint32] */)
}

def @func_1876(%var_1796: Tensor[(3, 12), float32], %var_1812: Tensor[(13, 22), uint64], %var_1815: Tensor[(273), uint16]) -> (Tensor[(3, 12), float32], Tensor[(16, 6, 3), float32], Tensor[(35), uint32], Tensor[(550), uint32], Tensor[(13, 22), uint64], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16], Tensor[(2, ?, 12), float32], Tensor[(6, 4), float32], Tensor[(286), float64], Tensor[(?, 288), uint32]) {
  %384 = cast(%var_1796, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %385 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 288), float32] */, dtype="float32") /* ty=Tensor[(1, 288), float32] */;
  %386 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 288), float32] */, dtype="float32") /* ty=Tensor[(1, 288), float32] */;
  %387 = reshape(%385, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %388 = reshape(%386, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %389 = cast(%var_1815, dtype="uint16") /* ty=Tensor[(273), uint16] */;
  %390 = reshape(%389, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), uint16] */;
  %391 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 4), float32] */;
  %392 = reshape(%391, newshape=[2, 1, 12]) /* ty=Tensor[(2, 1, 12), float32] */;
  %393 = cast(meta[relay.Constant][32] /* ty=Tensor[(35), uint32] */, dtype="uint32") /* ty=Tensor[(35), uint32] */;
  %394 = cast(meta[relay.Constant][33] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %395 = cast(%var_1812, dtype="uint64") /* ty=Tensor[(13, 22), uint64] */;
  %396 = reshape(%393, newshape=[1, 5, 7]) /* ty=Tensor[(1, 5, 7), uint32] */;
  %397 = reshape(%394, newshape=[550]) /* ty=Tensor[(550), uint32] */;
  %398 = reshape(%395, newshape=[286]) /* ty=Tensor[(286), uint64] */;
  %399 = @func_1559(%396, %397, %398) /* ty=(Tensor[(?, 5, 7), uint64], Tensor[(10, 11, 5), bool], Tensor[(10, 11, 5), float32], Tensor[(13, 2, 11), uint64], Tensor[(286), uint64], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %400 = %399.4;
  %401 = cast(%400, dtype="float64") /* ty=Tensor[(286), float64] */;
  %402 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 288), float32] */, dtype="float64") /* ty=Tensor[(1, 288), float64] */;
  %403 = asin(%402) /* ty=Tensor[(1, 288), float64] */;
  %404 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 288), float32] */, dtype="uint32") /* ty=Tensor[(1, 288), uint32] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(2), int32] */;
  %406 = cast(%403, dtype="uint32") /* ty=Tensor[(1, 288), uint32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %408 = acosh(%384) /* ty=Tensor[(3, 12), float32] */;
  %409 = @func_229(%387, %388) /* ty=Tensor[(16, 6, 3), float32] */;
  %410 = @func_1731(%390) /* ty=Tensor[(3, 7, 13), uint16] */;
  %411 = @func_1077(%392) /* ty=Tensor[(2, ?, 12), float32] */;
  %412 = cosh(%401) /* ty=Tensor[(286), float64] */;
  %413 = bitwise_xor(%406, %407) /* ty=Tensor[(?, 288), uint32] */;
  (%408, %409, meta[relay.Constant][32] /* ty=Tensor[(35), uint32] */, meta[relay.Constant][33] /* ty=Tensor[(550), uint32] */, %var_1812, %410, %var_1815, %411, meta[relay.Constant][34] /* ty=Tensor[(6, 4), float32] */, %412, %413)
}

def @func_5915() -> (Tensor[(8, 15, 9), float64],) {
  %414 = @func_5179() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %415 = %414.0;
  (%415,)
}

def @func_1458(%var_1447: Tensor[(10, 11, 5), uint32]) -> Tensor[(10, 11, 5), bool] {
  %416 = cast(%var_1447, dtype="bool") /* ty=Tensor[(10, 11, 5), bool] */;
  %417 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(10, 11, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 11, 5), uint32] */, dtype="bool") /* ty=Tensor[(10, 11, 5), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%418, %419) /* ty=Tensor[(10, 11, 5), bool] */
}

def @func_6104(%var_6098: Tensor[(14, 2, 2), float64]) -> Tensor[(14, 2, 2), float32] {
  %420 = cast(%var_6098, dtype="float64") /* ty=Tensor[(14, 2, 2), float64] */;
  %421 = log10(%420) /* ty=Tensor[(14, 2, 2), float64] */;
  %422 = cast(%421, dtype="float32") /* ty=Tensor[(14, 2, 2), float32] */;
  erf(%422) /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_7896() -> (Tensor[(15, 16, 15), float64],) {
  %423 = @func_6446() /* ty=Tensor[(15, 16, 15), float64] */;
  (%423,)
}

def @func_1191(%var_1176: Tensor[(6, 2, 15), float64], %var_1183: Tensor[(2), float32]) -> (Tensor[(2340), float32], Tensor[(2), float32], Tensor[(6, 2, 15), float32]) {
  %424 = cast(%var_1183, dtype="float32") /* ty=Tensor[(2), float32] */;
  %425 = reshape(%424, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
  %426 = @func_921(%425) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %427 = cast(%var_1176, dtype="float64") /* ty=Tensor[(6, 2, 15), float64] */;
  %428 = log10(%427) /* ty=Tensor[(6, 2, 15), float64] */;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(6, 2, 15), float32] */;
  %430 = %426.2;
  %431 = cosh(%429) /* ty=Tensor[(6, 2, 15), float32] */;
  (%430, %var_1183, %431)
}

def @func_8435() -> (Tensor[(2340), float32], Tensor[(8, 15, 9), float32]) {
  %432 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
  %433 = %432.0;
  %434 = @func_6363() /* ty=Tensor[(8, 15, 9), float32] */;
  (%433, %434)
}

def @func_5630() -> (Tensor[(8, 15, 9), float64],) {
  %435 = @func_5179() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %436 = %435.0;
  (%436,)
}

def @func_6347() -> (Tensor[(8, 15, 9), float64],) {
  %437 = @func_5311() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) */;
  %438 = %437.0;
  (%438,)
}

def @func_8706(%var_8664: int64, %var_8665: Tensor[(6, 16, 1), int64], %var_8676: Tensor[(1080), float64]) -> (Tensor[(55, 10), uint32], Tensor[(1080), float64], Tensor[(2, ?, 12), float32], uint32, Tensor[(6, 16, 24), float32]) {
  %439 = cast(%var_8676, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %440 = reshape(%439, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float64] */;
  %441 = @func_7443(%440) /* ty=(Tensor[(8, 15, 9), bool], Tensor[(55, 10), uint32]) */;
  %442 = cast(meta[relay.Constant][36] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %443 = reshape(%442, newshape=[2, 1, 12]) /* ty=Tensor[(2, 1, 12), float32] */;
  %444 = cast(%var_8664, dtype="uint32") /* ty=uint32 */;
  %445 = reshape(%444, newshape=[]) /* ty=uint32 */;
  %446 = @func_3616(%445) /* ty=(Tensor[(14, 10, 9), float64], Tensor[(24), float32], uint32, Tensor[(2912), uint32]) */;
  %447 = cast(%var_8664, dtype="int64") /* ty=int64 */;
  %448 = cast(%var_8665, dtype="int64") /* ty=Tensor[(6, 16, 1), int64] */;
  %449 = left_shift(%447, %448) /* ty=Tensor[(6, 16, 1), int64] */;
  %450 = cast(%449, dtype="float32") /* ty=Tensor[(6, 16, 1), float32] */;
  %451 = acosh(%450) /* ty=Tensor[(6, 16, 1), float32] */;
  %452 = cast(%451, dtype="float32") /* ty=Tensor[(6, 16, 1), float32] */;
  %453 = cast(meta[relay.Constant][36] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %454 = %441.1;
  %455 = @func_1077(%443) /* ty=Tensor[(2, ?, 12), float32] */;
  %456 = %446.2;
  %457 = add(%452, %453) /* ty=Tensor[(6, 16, 24), float32] */;
  (%454, %var_8676, %455, %456, %457)
}

def @func_3891(%var_3803: Tensor[(1, 11, 15), bool], %var_3804: Tensor[(15, 11, 15), bool], %var_3819: Tensor[(288), float32], %var_3874: Tensor[(15, 11, 15), float64]) -> (Tensor[(12, 4, 13), float32], Tensor[(2, 312), float32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(15, 11, 15), int16], Tensor[(15, 11, 15), float32]) {
  %458 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 312), float32] */, dtype="float32") /* ty=Tensor[(2, 312), float32] */;
  %459 = reshape(%458, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), float32] */;
  %460 = @func_1988(%459) /* ty=(Tensor[(12, 4, 13), float32],) */;
  %461 = cast(%var_3819, dtype="float32") /* ty=Tensor[(288), float32] */;
  %462 = cast(%var_3819, dtype="float32") /* ty=Tensor[(288), float32] */;
  %463 = reshape(%461, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %464 = reshape(%462, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %465 = cast(%var_3803, dtype="bool") /* ty=Tensor[(1, 11, 15), bool] */;
  %466 = cast(%var_3804, dtype="bool") /* ty=Tensor[(15, 11, 15), bool] */;
  %467 = logical_and(%465, %466) /* ty=Tensor[(15, 11, 15), bool] */;
  %468 = cast(%var_3803, dtype="float64") /* ty=Tensor[(1, 11, 15), float64] */;
  %469 = cast(%467, dtype="float64") /* ty=Tensor[(15, 11, 15), float64] */;
  %470 = maximum(%468, %469) /* ty=Tensor[(15, 11, 15), float64] */;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(15, 11, 15), float64] */;
  %472 = asinh(%471) /* ty=Tensor[(15, 11, 15), float64] */;
  %473 = cast(%472, dtype="float64") /* ty=Tensor[(15, 11, 15), float64] */;
  %474 = atan(%473) /* ty=Tensor[(15, 11, 15), float64] */;
  %475 = cast(%var_3874, dtype="int16") /* ty=Tensor[(15, 11, 15), int16] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%474, dtype="int16") /* ty=Tensor[(15, 11, 15), int16] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %479 = cast(%472, dtype="float32") /* ty=Tensor[(15, 11, 15), float32] */;
  %480 = %460.0;
  %481 = @func_229(%463, %464) /* ty=Tensor[(16, 6, 3), float32] */;
  %482 = right_shift(%477, %478) /* ty=Tensor[(15, 11, 15), int16] */;
  %483 = atanh(%479) /* ty=Tensor[(15, 11, 15), float32] */;
  (%480, meta[relay.Constant][37] /* ty=Tensor[(2, 312), float32] */, %481, %var_3819, %482, %483)
}

def @func_1487(%var_1479: uint64, %var_1480: Tensor[(13, 2, 11), uint64]) -> (Tensor[(13, 2, 11), uint64],) {
  %484 = cast(%var_1479, dtype="uint64") /* ty=uint64 */;
  %485 = cast(%var_1480, dtype="uint64") /* ty=Tensor[(13, 2, 11), uint64] */;
  %486 = right_shift(%484, %485) /* ty=Tensor[(13, 2, 11), uint64] */;
  (%486,)
}

def @func_6459() -> (Tensor[(15, 16, 15), float64], Tensor[(8, 15, 9), float64]) {
  %487 = @func_5244() /* ty=(Tensor[(10, 11, 5), bool], Tensor[(55, 10), uint32], Tensor[(15, 16, 15), float64], Tensor[(15, 16, 15), float64]) */;
  %488 = @func_5915() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %489 = %487.2;
  %490 = %488.0;
  (%489, %490)
}

def @func_4802(%var_4738: Tensor[(1053), float32], %var_4758: Tensor[(1053), float32], %var_4780: Tensor[(630), float32], %var_4781: Tensor[(2340), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(10, 11, 5), bool], Tensor[(1053), float64], Tensor[(8, 15, 9), bool], Tensor[(6, 15, 7), bool], Tensor[(630), float32], Tensor[(2340), float32], Tensor[(1, 180), float64], Tensor[(2), float32], Tensor[(?, 624), bool]) {
  %491 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %492 = cast(%var_4738, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %493 = reshape(%492, newshape=[13, 9, 9]) /* ty=Tensor[(13, 9, 9), float32] */;
  %494 = @func_3046(%493) /* ty=(Tensor[(13, 9, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) */;
  %495 = cast(%var_4758, dtype="float64") /* ty=Tensor[(1053), float64] */;
  %496 = shape_of(%var_4738, dtype="int32") /* ty=Tensor[(1), int32] */;
  %497 = cast(%var_4738, dtype="float64") /* ty=Tensor[(1053), float64] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?), float64] */;
  %499 = %491.0;
  %500 = cast(%499, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %501 = reshape(%500, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float64] */;
  %502 = cast(%var_4780, dtype="float32") /* ty=Tensor[(630), float32] */;
  %503 = cast(%var_4781, dtype="float32") /* ty=Tensor[(2340), float32] */;
  %504 = reshape(%502, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), float32] */;
  %505 = reshape(%503, newshape=[90, 26]) /* ty=Tensor[(90, 26), float32] */;
  %506 = @func_2582(%504, %505) /* ty=(Tensor[(6, 15, 7), bool], Tensor[(6, 15, 7), float64], Tensor[(1, 1, 2), float32], Tensor[(2), float32], Tensor[(13, 15, 12), float64], Tensor[(90, 26), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) */;
  %507 = cast(meta[relay.Constant][38] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
  %508 = reshape(%507, newshape=[2, 1]) /* ty=Tensor[(2, 1), float32] */;
  %509 = @func_4406(%508) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(1, 180), float64], Tensor[(2, 1), float32]) */;
  %510 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 624), float32] */, dtype="float32") /* ty=Tensor[(1, 624), float32] */;
  %511 = reshape(%510, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), float32] */;
  %512 = @func_1988(%511) /* ty=(Tensor[(12, 4, 13), float32],) */;
  %513 = %512.0;
  %514 = cast(%513, dtype="bool") /* ty=Tensor[(12, 4, 13), bool] */;
  %515 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(1, 624), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %516 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 624), float32] */, dtype="bool") /* ty=Tensor[(1, 624), bool] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %518 = %494.1;
  %519 = floor_divide(%497, %498) /* ty=Tensor[(1053), float64] */;
  %520 = @func_4613(%501) /* ty=Tensor[(8, 15, 9), bool] */;
  %521 = %506.0;
  %522 = %509.3;
  %523 = not_equal(%516, %517) /* ty=Tensor[(?, 624), bool] */;
  (%499, %518, %519, %520, %521, %var_4780, %var_4781, %522, meta[relay.Constant][38] /* ty=Tensor[(2), float32] */, %523)
}

def @func_4654(%var_4639: Tensor[(8, 10, 14), float64]) -> (Tensor[(8, 10, 14), float64], Tensor[(12, 4, 13), float32], Tensor[(624), float32]) {
  %524 = cast(%var_4639, dtype="float64") /* ty=Tensor[(8, 10, 14), float64] */;
  %525 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(8, 10, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 14), float64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %528 = cast(meta[relay.Constant][41] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %529 = reshape(%528, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), float32] */;
  %530 = @func_1988(%529) /* ty=(Tensor[(12, 4, 13), float32],) */;
  %531 = add(%526, %527) /* ty=Tensor[(8, 10, 14), float64] */;
  %532 = %530.0;
  (%531, %532, meta[relay.Constant][41] /* ty=Tensor[(624), float32] */)
}

def @func_7716() -> (Tensor[(55, 10), uint32], Tensor[(8, 15, 9), float64]) {
  %533 = @func_6818() /* ty=(Tensor[(55, 10), uint32],) */;
  %534 = @func_5754() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %535 = %533.0;
  %536 = %534.0;
  (%535, %536)
}

def @func_6923(%var_6908: Tensor[(7, 15, 10), float64], %var_6916: Tensor[(7, 15, 10), float64]) -> (Tensor[(7, 15, 10), float64], Tensor[(7, 15, 10), bool]) {
  %537 = cast(%var_6908, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
  %538 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(7, 15, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %541 = cast(%var_6916, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
  %542 = shape_of(%var_6908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%var_6908, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %545 = floor_divide(%539, %540) /* ty=Tensor[(7, 15, 10), float64] */;
  %546 = equal(%543, %544) /* ty=Tensor[(7, 15, 10), bool] */;
  (%545, %546)
}

def @func_545(%var_533: Tensor[(1, 6, 2), int8]) -> (Tensor[(2, 6, 2), int8],) {
  %547 = cast(%var_533, dtype="int8") /* ty=Tensor[(1, 6, 2), int8] */;
  %548 = cast(meta[relay.Constant][43] /* ty=Tensor[(2, 6, 2), int8] */, dtype="int8") /* ty=Tensor[(2, 6, 2), int8] */;
  %549 = bitwise_xor(%547, %548) /* ty=Tensor[(2, 6, 2), int8] */;
  (%549,)
}

def @func_7285(%var_7253: Tensor[(1120), float64], %var_7273: Tensor[(8, 15, 9), float32], %var_7278: Tensor[(624), float32]) -> (Tensor[(1120), float64], Tensor[(8, 15, 9), float64], Tensor[(624), float64]) {
  %550 = @func_6363() /* ty=Tensor[(8, 15, 9), float32] */;
  %551 = cast(%var_7273, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%550, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %555 = cast(%var_7253, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %556 = reshape(%555, newshape=[8, 10, 14]) /* ty=Tensor[(8, 10, 14), float64] */;
  %557 = @func_4654(%556) /* ty=(Tensor[(8, 10, 14), float64], Tensor[(12, 4, 13), float32], Tensor[(624), float32]) */;
  %558 = %557.2;
  %559 = cast(%var_7278, dtype="float64") /* ty=Tensor[(624), float64] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(1), int32] */;
  %561 = cast(%558, dtype="float64") /* ty=Tensor[(624), float64] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?), float64] */;
  %563 = power(%553, %554) /* ty=Tensor[(8, 15, 9), float64] */;
  %564 = floor_mod(%561, %562) /* ty=Tensor[(624), float64] */;
  (%var_7253, %563, %564)
}

def @func_6211() -> (Tensor[(8, 15, 9), float64], Tensor[(2340), float32]) {
  %565 = @func_5179() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %566 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
  %567 = %565.0;
  %568 = %566.0;
  (%567, %568)
}

def @func_5435() -> (Tensor[(8, 15, 9), float32],) {
  %569 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %570 = %569.0;
  %571 = cast(%570, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  %572 = acos(%571) /* ty=Tensor[(8, 15, 9), float32] */;
  (%572,)
}

def @func_5132() -> Tensor[(8, 15, 9), float64] {
  %573 = @func_4694() /* ty=Tensor[(8, 15, 9), float64] */;
  %574 = cast(%573, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  tan(%574) /* ty=Tensor[(8, 15, 9), float64] */
}

def @main() -> (Tensor[(550), uint32], Tensor[(2, 13, 6), float64]) {
  %575 = @func_7479() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(9, 12, 9), bool], Tensor[(550), uint32]) */;
  %576 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 13, 6), float64] */, dtype="float64") /* ty=Tensor[(2, 13, 6), float64] */;
  %577 = cosh(%576) /* ty=Tensor[(2, 13, 6), float64] */;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(2, 13, 6), float64] */;
  %579 = %575.2;
  %580 = log(%578) /* ty=Tensor[(2, 13, 6), float64] */;
  (%579, %580)
}

def @func_7538(%var_7527: Tensor[(15, 9, 14), uint16]) -> (Tensor[(15, 9, 14), uint16], Tensor[(550), uint32], Tensor[(1053), float32]) {
  %581 = cast(%var_7527, dtype="uint16") /* ty=Tensor[(15, 9, 14), uint16] */;
  %582 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(15, 9, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 9, 14), uint16] */, dtype="uint16") /* ty=Tensor[(15, 9, 14), uint16] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %585 = cast(meta[relay.Constant][46] /* ty=Tensor[(1053), float32] */, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %586 = reshape(%585, newshape=[13, 9, 9]) /* ty=Tensor[(13, 9, 9), float32] */;
  %587 = @func_3046(%586) /* ty=(Tensor[(13, 9, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) */;
  %588 = multiply(%583, %584) /* ty=Tensor[(15, 9, 14), uint16] */;
  %589 = %587.2;
  (%588, %589, meta[relay.Constant][46] /* ty=Tensor[(1053), float32] */)
}

def @func_5854() -> Tensor[(8, 15, 9), float32] {
  %590 = @func_5435() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %591 = %590.0;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  cosh(%592) /* ty=Tensor[(8, 15, 9), float32] */
}

def @func_8090(%var_8073: Tensor[(9, 10, 10), float64], %var_8074: Tensor[(9, 10, 10), float64], %var_8083: Tensor[(273), uint16]) -> (Tensor[(9, 10, 10), float64], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) {
  %593 = cast(%var_8074, dtype="float64") /* ty=Tensor[(9, 10, 10), float64] */;
  %594 = shape_of(%var_8073, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%var_8073, dtype="float64") /* ty=Tensor[(9, 10, 10), float64] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %597 = cast(%var_8083, dtype="uint16") /* ty=Tensor[(273), uint16] */;
  %598 = reshape(%597, newshape=[273]) /* ty=Tensor[(273), uint16] */;
  %599 = @func_5968(%598) /* ty=(Tensor[(8, 15, 9), float32], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */;
  %600 = divide(%595, %596) /* ty=Tensor[(9, 10, 10), float64] */;
  %601 = %599.1;
  (%600, %601, %var_8083)
}

def @func_7209(%var_7122: Tensor[(15, 3, 7), int8], %var_7123: Tensor[(15, 3, 7), int8]) -> (Tensor[(15, 3, 7), float32], Tensor[(630), float32], Tensor[(1053), float32], Tensor[(630), float32]) {
  %602 = cast(%var_7123, dtype="int8") /* ty=Tensor[(15, 3, 7), int8] */;
  %603 = shape_of(%var_7122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%var_7122, dtype="int8") /* ty=Tensor[(15, 3, 7), int8] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %606 = multiply(%604, %605) /* ty=Tensor[(15, 3, 7), int8] */;
  %607 = cast(%606, dtype="bool") /* ty=Tensor[(15, 3, 7), bool] */;
  %608 = shape_of(%var_7123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%var_7123, dtype="bool") /* ty=Tensor[(15, 3, 7), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %611 = less(%609, %610) /* ty=Tensor[(15, 3, 7), bool] */;
  %612 = cast(%606, dtype="uint8") /* ty=Tensor[(15, 3, 7), uint8] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="uint8") /* ty=Tensor[(15, 3, 7), uint8] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %616 = bitwise_or(%614, %615) /* ty=Tensor[(15, 3, 7), uint8] */;
  %617 = cast(%616, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
  %618 = cast(meta[relay.Constant][47] /* ty=Tensor[(1053), float32] */, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %619 = cast(meta[relay.Constant][48] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %620 = reshape(%618, newshape=[1053]) /* ty=Tensor[(1053), float32] */;
  %621 = reshape(%619, newshape=[10, 63]) /* ty=Tensor[(10, 63), float32] */;
  %622 = @func_6734(%620, %621) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(630), float32], Tensor[(1053), float32], Tensor[(10, 63), float32]) */;
  %623 = atanh(%617) /* ty=Tensor[(15, 3, 7), float32] */;
  %624 = %622.2;
  (%623, %624, meta[relay.Constant][47] /* ty=Tensor[(1053), float32] */, meta[relay.Constant][48] /* ty=Tensor[(630), float32] */)
}

def @func_6656(%var_6650: Tensor[(550), uint32]) -> (Tensor[(9, 12, 9), bool], Tensor[(2340), float32], Tensor[(35), uint32], Tensor[(550), uint32], Tensor[(286), uint64]) {
  %625 = cast(meta[relay.Constant][50] /* ty=Tensor[(9, 12, 9), uint64] */, dtype="bool") /* ty=Tensor[(9, 12, 9), bool] */;
  %626 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(9, 12, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(meta[relay.Constant][49] /* ty=Tensor[(9, 12, 9), uint64] */, dtype="bool") /* ty=Tensor[(9, 12, 9), bool] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %629 = cast(meta[relay.Constant][51] /* ty=Tensor[(35), uint32] */, dtype="uint32") /* ty=Tensor[(35), uint32] */;
  %630 = cast(%var_6650, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %631 = cast(meta[relay.Constant][52] /* ty=Tensor[(286), uint64] */, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %632 = reshape(%629, newshape=[1, 5, 7]) /* ty=Tensor[(1, 5, 7), uint32] */;
  %633 = reshape(%630, newshape=[550]) /* ty=Tensor[(550), uint32] */;
  %634 = reshape(%631, newshape=[286]) /* ty=Tensor[(286), uint64] */;
  %635 = @func_1559(%632, %633, %634) /* ty=(Tensor[(?, 5, 7), uint64], Tensor[(10, 11, 5), bool], Tensor[(10, 11, 5), float32], Tensor[(13, 2, 11), uint64], Tensor[(286), uint64], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %636 = less_equal(%627, %628) /* ty=Tensor[(9, 12, 9), bool] */;
  %637 = %635.6;
  (%636, %637, meta[relay.Constant][51] /* ty=Tensor[(35), uint32] */, %var_6650, meta[relay.Constant][52] /* ty=Tensor[(286), uint64] */)
}

def @func_4497(%var_4488: Tensor[(8, 15, 9), float32]) -> Tensor[(8, 15, 9), uint16] {
  %638 = @func_4335() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(13, 15, 12), float64]) */;
  %639 = %638.0;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  %641 = rsqrt(%640) /* ty=Tensor[(8, 15, 9), float32] */;
  %642 = cast(%var_4488, dtype="uint16") /* ty=Tensor[(8, 15, 9), uint16] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="uint16") /* ty=Tensor[(8, 15, 9), uint16] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%644, %645) /* ty=Tensor[(8, 15, 9), uint16] */
}

def @func_6363() -> Tensor[(8, 15, 9), float32] {
  %646 = @func_5485() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %646.0
}

def @func_1988(%var_1967: Tensor[(12, 4, 13), float32]) -> (Tensor[(12, 4, 13), float32],) {
  %647 = cast(%var_1967, dtype="float32") /* ty=Tensor[(12, 4, 13), float32] */;
  %648 = sinh(%647) /* ty=Tensor[(12, 4, 13), float32] */;
  %649 = cast(%648, dtype="float32") /* ty=Tensor[(12, 4, 13), float32] */;
  %650 = cosh(%649) /* ty=Tensor[(12, 4, 13), float32] */;
  (%650,)
}

def @func_5244() -> (Tensor[(10, 11, 5), bool], Tensor[(55, 10), uint32], Tensor[(15, 16, 15), float64], Tensor[(15, 16, 15), float64]) {
  %651 = cast(meta[relay.Constant][53] /* ty=Tensor[(55, 10), uint32] */, dtype="uint32") /* ty=Tensor[(55, 10), uint32] */;
  %652 = reshape(%651, newshape=[10, 11, 5]) /* ty=Tensor[(10, 11, 5), uint32] */;
  %653 = cast(meta[relay.Constant][54] /* ty=Tensor[(15, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 15), float64] */;
  %654 = asinh(%653) /* ty=Tensor[(15, 16, 15), float64] */;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(15, 16, 15), float64] */;
  %656 = cast(%654, dtype="float64") /* ty=Tensor[(15, 16, 15), float64] */;
  %657 = @func_1458(%652) /* ty=Tensor[(10, 11, 5), bool] */;
  %658 = sin(%655) /* ty=Tensor[(15, 16, 15), float64] */;
  %659 = atanh(%656) /* ty=Tensor[(15, 16, 15), float64] */;
  (%657, meta[relay.Constant][53] /* ty=Tensor[(55, 10), uint32] */, %658, %659)
}

def @func_5095() -> (Tensor[(8, 15, 9), float64],) {
  %660 = @func_4335() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(13, 15, 12), float64]) */;
  %661 = %660.0;
  (%661,)
}

def @func_6734(%var_6724: Tensor[(1053), float32], %var_6725: Tensor[(10, 63), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(630), float32], Tensor[(1053), float32], Tensor[(10, 63), float32]) {
  %662 = @func_6684() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %663 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
  %664 = cast(%var_6724, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %665 = cast(%var_6724, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %666 = cast(%var_6725, dtype="float32") /* ty=Tensor[(10, 63), float32] */;
  %667 = %663.0;
  %668 = cast(%667, dtype="float32") /* ty=Tensor[(2340), float32] */;
  %669 = reshape(%664, newshape=[1053]) /* ty=Tensor[(1053), float32] */;
  %670 = reshape(%665, newshape=[1053]) /* ty=Tensor[(1053), float32] */;
  %671 = reshape(%666, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %672 = reshape(%668, newshape=[2340]) /* ty=Tensor[(2340), float32] */;
  %673 = @func_4802(%669, %670, %671, %672) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(10, 11, 5), bool], Tensor[(1053), float64], Tensor[(8, 15, 9), bool], Tensor[(6, 15, 7), bool], Tensor[(630), float32], Tensor[(2340), float32], Tensor[(1, 180), float64], Tensor[(2), float32], Tensor[(?, 624), bool]) */;
  %674 = %662.0;
  %675 = %673.5;
  (%674, %667, %675, %var_6724, %var_6725)
}

def @func_2582(%var_2535: Tensor[(6, 15, 7), float32], %var_2563: Tensor[(90, 26), float32]) -> (Tensor[(6, 15, 7), bool], Tensor[(6, 15, 7), float64], Tensor[(1, 1, 2), float32], Tensor[(2), float32], Tensor[(13, 15, 12), float64], Tensor[(90, 26), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) {
  %676 = cast(%var_2535, dtype="float32") /* ty=Tensor[(6, 15, 7), float32] */;
  %677 = sinh(%676) /* ty=Tensor[(6, 15, 7), float32] */;
  %678 = cast(%var_2535, dtype="bool") /* ty=Tensor[(6, 15, 7), bool] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%677, dtype="bool") /* ty=Tensor[(6, 15, 7), bool] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %682 = cast(%677, dtype="float64") /* ty=Tensor[(6, 15, 7), float64] */;
  %683 = cast(meta[relay.Constant][55] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
  %684 = reshape(%683, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
  %685 = @func_921(%684) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %686 = cast(%var_2563, dtype="float32") /* ty=Tensor[(90, 26), float32] */;
  %687 = reshape(%686, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
  %688 = @func_424(%687) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(13, 15, 12), float64]) */;
  %689 = cast(meta[relay.Constant][56] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %690 = reshape(%689, newshape=[10, 11, 5]) /* ty=Tensor[(10, 11, 5), uint32] */;
  %691 = less(%680, %681) /* ty=Tensor[(6, 15, 7), bool] */;
  %692 = asinh(%682) /* ty=Tensor[(6, 15, 7), float64] */;
  %693 = %685.0;
  %694 = %688.1;
  %695 = @func_1458(%690) /* ty=Tensor[(10, 11, 5), bool] */;
  (%691, %692, %693, meta[relay.Constant][55] /* ty=Tensor[(2), float32] */, %694, %var_2563, %695, meta[relay.Constant][56] /* ty=Tensor[(550), uint32] */)
}

def @func_8249(%var_8246: Tensor[(275, 2), uint32]) -> (Tensor[(8, 15, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(275, 2), uint32]) {
  %696 = @func_5485() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %697 = cast(%var_8246, dtype="uint32") /* ty=Tensor[(275, 2), uint32] */;
  %698 = reshape(%697, newshape=[10, 11, 5]) /* ty=Tensor[(10, 11, 5), uint32] */;
  %699 = %696.0;
  %700 = @func_1458(%698) /* ty=Tensor[(10, 11, 5), bool] */;
  (%699, %700, %var_8246)
}

def @func_4219() -> (Tensor[(8, 15, 9), float64],) {
  %701 = @func_4182() /* ty=Tensor[(8, 15, 9), float64] */;
  (%701,)
}

def @func_4335() -> (Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(13, 15, 12), float64]) {
  %702 = cast(meta[relay.Constant][57] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %703 = cast(meta[relay.Constant][58] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
  %704 = reshape(%702, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), float64] */;
  %705 = reshape(%703, newshape=[2]) /* ty=Tensor[(2), float32] */;
  %706 = @func_1191(%704, %705) /* ty=(Tensor[(2340), float32], Tensor[(2), float32], Tensor[(6, 2, 15), float32]) */;
  %707 = %706.0;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(2340), float32] */;
  %709 = reshape(%708, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
  %710 = @func_424(%709) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(13, 15, 12), float64]) */;
  %711 = @func_4262() /* ty=Tensor[(8, 15, 9), float64] */;
  %712 = %710.1;
  (%711, %707, meta[relay.Constant][57] /* ty=Tensor[(180), float64] */, meta[relay.Constant][58] /* ty=Tensor[(2), float32] */, %712)
}

def @func_4694() -> Tensor[(8, 15, 9), float64] {
  @func_4182() /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_4866() -> (Tensor[(2340), float32],) {
  %713 = @func_4335() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(13, 15, 12), float64]) */;
  %714 = %713.1;
  (%714,)
}

def @func_6818() -> (Tensor[(55, 10), uint32],) {
  %715 = @func_6619() /* ty=Tensor[(55, 10), uint32] */;
  (%715,)
}

def @func_4953(%var_4901: uint32) -> (Tensor[(2340), float32], Tensor[(24), float32], uint32, Tensor[(2340), float32], Tensor[(12), int8], Tensor[(12), int8], Tensor[(8, 15, 9), float64], Tensor[(2), float32]) {
  %716 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
  %717 = cast(%var_4901, dtype="uint32") /* ty=uint32 */;
  %718 = reshape(%717, newshape=[]) /* ty=uint32 */;
  %719 = @func_3616(%718) /* ty=(Tensor[(14, 10, 9), float64], Tensor[(24), float32], uint32, Tensor[(2912), uint32]) */;
  %720 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
  %721 = cast(meta[relay.Constant][59] /* ty=Tensor[(12), int8] */, dtype="int8") /* ty=Tensor[(12), int8] */;
  %722 = reshape(%721, newshape=[12]) /* ty=Tensor[(12), int8] */;
  %723 = @func_4836(%722) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2, 6, 2), int8], Tensor[(12), int8]) */;
  %724 = cast(meta[relay.Constant][60] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
  %725 = reshape(%724, newshape=[2, 1]) /* ty=Tensor[(2, 1), float32] */;
  %726 = @func_4406(%725) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(1, 180), float64], Tensor[(2, 1), float32]) */;
  %727 = %716.0;
  %728 = %719.1;
  %729 = %720.0;
  %730 = %723.2;
  %731 = %726.0;
  (%727, %728, %var_4901, %729, %730, meta[relay.Constant][59] /* ty=Tensor[(12), int8] */, %731, meta[relay.Constant][60] /* ty=Tensor[(2), float32] */)
}

def @func_6446() -> Tensor[(15, 16, 15), float64] {
  %732 = @func_5244() /* ty=(Tensor[(10, 11, 5), bool], Tensor[(55, 10), uint32], Tensor[(15, 16, 15), float64], Tensor[(15, 16, 15), float64]) */;
  %732.2
}

def @func_5805() -> Tensor[(8, 15, 9), float64] {
  %733 = @func_5668() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(2), float32]) */;
  %733.0
}

def @func_8859() -> Tensor[(8, 15, 9), float64] {
  %734 = @func_6459() /* ty=(Tensor[(15, 16, 15), float64], Tensor[(8, 15, 9), float64]) */;
  %734.1
}

def @func_5179() -> (Tensor[(8, 15, 9), float64],) {
  %735 = @func_4694() /* ty=Tensor[(8, 15, 9), float64] */;
  (%735,)
}

def @func_6582(%var_6579: Tensor[(2475), bool], %var_6580: Tensor[(288), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(2, 312), float32], Tensor[(165), bool], Tensor[(2475), bool], Tensor[(288), float32]) {
  %736 = @func_5435() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %737 = %736.0;
  %738 = cast(%737, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %739 = cast(meta[relay.Constant][61] /* ty=Tensor[(165), bool] */, dtype="bool") /* ty=Tensor[(165), bool] */;
  %740 = cast(%var_6579, dtype="bool") /* ty=Tensor[(2475), bool] */;
  %741 = cast(%var_6580, dtype="float32") /* ty=Tensor[(288), float32] */;
  %742 = cast(%var_6579, dtype="float64") /* ty=Tensor[(2475), float64] */;
  %743 = reshape(%739, newshape=[1, 11, 15]) /* ty=Tensor[(1, 11, 15), bool] */;
  %744 = reshape(%740, newshape=[15, 11, 15]) /* ty=Tensor[(15, 11, 15), bool] */;
  %745 = reshape(%741, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %746 = reshape(%742, newshape=[15, 11, 15]) /* ty=Tensor[(15, 11, 15), float64] */;
  %747 = @func_3891(%743, %744, %745, %746) /* ty=(Tensor[(12, 4, 13), float32], Tensor[(2, 312), float32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(15, 11, 15), int16], Tensor[(15, 11, 15), float32]) */;
  %748 = acosh(%738) /* ty=Tensor[(8, 15, 9), float64] */;
  %749 = %747.1;
  (%748, %749, meta[relay.Constant][61] /* ty=Tensor[(165), bool] */, %var_6579, %var_6580)
}

def @func_7840(%var_7822: float64, %var_7829: Tensor[(1053), float32], %var_7835: Tensor[(550), uint32]) -> (Tensor[(8, 1), float64], Tensor[(1053), float32], Tensor[(550), bool]) {
  %750 = cast(%var_7822, dtype="float64") /* ty=float64 */;
  %751 = cast(meta[relay.Constant][62] /* ty=Tensor[(8, 1), float64] */, dtype="float64") /* ty=Tensor[(8, 1), float64] */;
  %752 = cast(%var_7829, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %753 = reshape(%752, newshape=[13, 9, 9]) /* ty=Tensor[(13, 9, 9), float32] */;
  %754 = @func_3046(%753) /* ty=(Tensor[(13, 9, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) */;
  %755 = %754.2;
  %756 = cast(%var_7835, dtype="bool") /* ty=Tensor[(550), bool] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(1), int32] */;
  %758 = cast(%755, dtype="bool") /* ty=Tensor[(550), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?), bool] */;
  %760 = floor_divide(%750, %751) /* ty=Tensor[(8, 1), float64] */;
  %761 = less_equal(%758, %759) /* ty=Tensor[(550), bool] */;
  (%760, %var_7829, %761)
}

def @func_424(%var_417: Tensor[(13, 15, 12), float32]) -> (Tensor[(13, 15, 12), float32], Tensor[(13, 15, 12), float64]) {
  %762 = cast(%var_417, dtype="float32") /* ty=Tensor[(13, 15, 12), float32] */;
  %763 = cast(%var_417, dtype="float64") /* ty=Tensor[(13, 15, 12), float64] */;
  %764 = sqrt(%762) /* ty=Tensor[(13, 15, 12), float32] */;
  %765 = sigmoid(%763) /* ty=Tensor[(13, 15, 12), float64] */;
  (%764, %765)
}

def @func_229(%var_217: Tensor[(16, 6, 3), float32], %var_218: Tensor[(16, 6, 3), float32]) -> Tensor[(16, 6, 3), float32] {
  %766 = cast(%var_218, dtype="float32") /* ty=Tensor[(16, 6, 3), float32] */;
  %767 = shape_of(%var_217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%var_217, dtype="float32") /* ty=Tensor[(16, 6, 3), float32] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%768, %769) /* ty=Tensor[(16, 6, 3), float32] */
}

def @func_6932() -> (Tensor[(2340), float32],) {
  %770 = @func_6211() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32]) */;
  %771 = %770.1;
  (%771,)
}

def @func_7696(%var_7690: Tensor[(550), float64]) -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(550), float64]) {
  %772 = @func_5311() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) */;
  %773 = cast(%var_7690, dtype="float64") /* ty=Tensor[(550), float64] */;
  %774 = reshape(%773, newshape=[55, 10]) /* ty=Tensor[(55, 10), float64] */;
  %775 = @func_7667(%774) /* ty=(Tensor[(55, 10), bool], Tensor[(55, 10), uint16], Tensor[(8, 15, 9), float64]) */;
  %776 = %772.1;
  %777 = %775.2;
  (%776, %777, %var_7690)
}

def @func_7443(%var_7424: Tensor[(8, 15, 9), float64]) -> (Tensor[(8, 15, 9), bool], Tensor[(55, 10), uint32]) {
  %778 = @func_4262() /* ty=Tensor[(8, 15, 9), float64] */;
  %779 = cast(%var_7424, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%778, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %783 = @func_6818() /* ty=(Tensor[(55, 10), uint32],) */;
  %784 = greater(%781, %782) /* ty=Tensor[(8, 15, 9), bool] */;
  %785 = %783.0;
  (%784, %785)
}

def @func_6789(%var_6784: Tensor[(8, 8, 4), float32]) -> (Tensor[(8, 8, 4), float32], Tensor[(8, 15, 9), float64]) {
  %786 = cast(%var_6784, dtype="float32") /* ty=Tensor[(8, 8, 4), float32] */;
  %787 = @func_6211() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32]) */;
  %788 = log2(%786) /* ty=Tensor[(8, 8, 4), float32] */;
  %789 = %787.0;
  (%788, %789)
}

def @func_5311() -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) {
  %790 = @func_5095() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %791 = %790.0;
  %792 = @func_5132() /* ty=Tensor[(8, 15, 9), float64] */;
  (%791, %792)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8094(%var_8091: Tensor[(9, 10, 10), float64], %var_8092: Tensor[(9, 10, 10), float64], %var_8093: Tensor[(273), uint16]) -> (Tensor[(9, 10, 10), float64], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) {
  %9 = fn (%var_8073: Tensor[(9, 10, 10), float64], %var_8074: Tensor[(9, 10, 10), float64], %var_8083: Tensor[(273), uint16]) -> (Tensor[(9, 10, 10), float64], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) {
    %0 = cast(%var_8074, dtype="float64") /* ty=Tensor[(9, 10, 10), float64] */;
    %1 = shape_of(%var_8073, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_8073, dtype="float64") /* ty=Tensor[(9, 10, 10), float64] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %4 = cast(%var_8083, dtype="uint16") /* ty=Tensor[(273), uint16] */;
    %5 = reshape(%4, newshape=[273]) /* ty=Tensor[(273), uint16] */;
    %6 = @func_5968(%5) /* ty=(Tensor[(8, 15, 9), float32], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */;
    %7 = divide(%2, %3) /* ty=Tensor[(9, 10, 10), float64] */;
    %8 = %6.1;
    (%7, %8, %var_8083)
  };
  %9(%var_8091, %var_8092, %var_8093) /* ty=(Tensor[(9, 10, 10), float64], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */
}

def @func_8170() -> (Tensor[(55, 10), uint32],) {
  %10 = @func_5244() /* ty=(Tensor[(10, 11, 5), bool], Tensor[(55, 10), uint32], Tensor[(15, 16, 15), float64], Tensor[(15, 16, 15), float64]) */;
  %11 = %10.1;
  (%11,)
}

def @func_7234() -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) {
  @func_7232() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) */
}

def @func_7896() -> (Tensor[(15, 16, 15), float64],) {
  %12 = @func_6446() /* ty=Tensor[(15, 16, 15), float64] */;
  (%12,)
}

def @func_7369(%var_7366: Tensor[(2912), uint32], %var_7367: Tensor[(2, 4, 12), float32], %var_7368: Tensor[(2), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(2912), int64], Tensor[(12, 4, 13), float32], Tensor[(624), float32], Tensor[(1, 1, 2), float32], Tensor[(2), float32], Tensor[(2, 4, 12), int16]) {
  @func_7364(%var_7366, %var_7367, %var_7368) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2912), int64], Tensor[(12, 4, 13), float32], Tensor[(624), float32], Tensor[(1, 1, 2), float32], Tensor[(2), float32], Tensor[(2, 4, 12), int16]) */
}

def @func_6932() -> (Tensor[(2340), float32],) {
  %13 = @func_6211() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32]) */;
  %14 = %13.1;
  (%14,)
}

def @func_4500(%var_4498: Tensor[(8, 15, 9), float32]) -> Tensor[(8, 15, 9), uint16] {
  @func_4497(%var_4498) /* ty=Tensor[(8, 15, 9), uint16] */
}

def @func_1734(%var_1732: Tensor[(3, 7, 13), uint16]) -> Tensor[(3, 7, 13), uint16] {
  @func_1731(%var_1732) /* ty=Tensor[(3, 7, 13), uint16] */
}

def @func_5133() -> Tensor[(8, 15, 9), float64] {
  %17 = fn () -> Tensor[(8, 15, 9), float64] {
    %15 = @func_4694() /* ty=Tensor[(8, 15, 9), float64] */;
    %16 = cast(%15, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
    tan(%16) /* ty=Tensor[(8, 15, 9), float64] */
  };
  %17() /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_9379() -> (Tensor[(2340), float32], Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), int64]) {
  @func_9377() /* ty=(Tensor[(2340), float32], Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), int64]) */
}

def @func_9079(%var_9025: Tensor[(8, 6, 15), int8], %var_9026: Tensor[(8, 6, 15), int8], %var_9038: Tensor[(13, 21), uint16]) -> (Tensor[(8, 6, 15), bool], Tensor[(27, 70), float64], Tensor[(13, 21), uint16]) {
  %18 = cast(%var_9026, dtype="bool") /* ty=Tensor[(8, 6, 15), bool] */;
  %19 = shape_of(%var_9025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%var_9025, dtype="bool") /* ty=Tensor[(8, 6, 15), bool] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %22 = cast(%var_9038, dtype="uint16") /* ty=Tensor[(13, 21), uint16] */;
  %23 = reshape(%22, newshape=[273]) /* ty=Tensor[(273), uint16] */;
  %24 = @func_9015(%23) /* ty=(Tensor[(8, 15, 9), float32], Tensor[(1053), float32], Tensor[(27, 70), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */;
  %25 = greater_equal(%20, %21) /* ty=Tensor[(8, 6, 15), bool] */;
  %26 = %24.2;
  (%25, %26, %var_9038)
}

def @func_1490(%var_1488: uint64, %var_1489: Tensor[(13, 2, 11), uint64]) -> (Tensor[(13, 2, 11), uint64],) {
  %30 = fn (%var_1479: uint64, %var_1480: Tensor[(13, 2, 11), uint64]) -> (Tensor[(13, 2, 11), uint64],) {
    %27 = cast(%var_1479, dtype="uint64") /* ty=uint64 */;
    %28 = cast(%var_1480, dtype="uint64") /* ty=Tensor[(13, 2, 11), uint64] */;
    %29 = right_shift(%27, %28) /* ty=Tensor[(13, 2, 11), uint64] */;
    (%29,)
  };
  %30(%var_1488, %var_1489) /* ty=(Tensor[(13, 2, 11), uint64],) */
}

def @func_1559(%var_1498: Tensor[(1, 5, 7), uint32], %var_1503: Tensor[(550), uint32], %var_1532: Tensor[(286), uint64]) -> (Tensor[(?, 5, 7), uint64], Tensor[(10, 11, 5), bool], Tensor[(10, 11, 5), float32], Tensor[(13, 2, 11), uint64], Tensor[(286), uint64], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) {
  %31 = cast(meta[relay.Constant][0] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %32 = cast(%var_1498, dtype="bool") /* ty=Tensor[(1, 5, 7), bool] */;
  %33 = not_equal(%31, %32) /* ty=Tensor[(1, 5, 7), bool] */;
  %34 = cast(%var_1498, dtype="uint64") /* ty=Tensor[(1, 5, 7), uint64] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="uint64") /* ty=Tensor[(1, 5, 7), uint64] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %38 = cast(%var_1503, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %39 = reshape(%38, newshape=[10, 11, 5]) /* ty=Tensor[(10, 11, 5), uint32] */;
  %40 = @func_1458(%39) /* ty=Tensor[(10, 11, 5), bool] */;
  %41 = cast(%var_1503, dtype="bool") /* ty=Tensor[(550), bool] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="bool") /* ty=Tensor[(10, 11, 5), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = cast(%40, dtype="float32") /* ty=Tensor[(10, 11, 5), float32] */;
  %46 = cast(meta[relay.Constant][0] /* ty=uint32 */, dtype="uint64") /* ty=uint64 */;
  %47 = cast(%var_1532, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %48 = reshape(%46, newshape=[]) /* ty=uint64 */;
  %49 = reshape(%47, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), uint64] */;
  %50 = @func_1487(%48, %49) /* ty=(Tensor[(13, 2, 11), uint64],) */;
  %51 = cast(meta[relay.Constant][1] /* ty=Tensor[(2340), float32] */, dtype="float32") /* ty=Tensor[(2340), float32] */;
  %52 = reshape(%51, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
  %53 = @func_424(%52) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(13, 15, 12), float64]) */;
  %54 = right_shift(%36, %37) /* ty=Tensor[(?, 5, 7), uint64] */;
  %55 = greater(%43, %44) /* ty=Tensor[(10, 11, 5), bool] */;
  %56 = rsqrt(%45) /* ty=Tensor[(10, 11, 5), float32] */;
  %57 = %50.0;
  %58 = %53.1;
  (%54, %55, %56, %57, %var_1532, %58, meta[relay.Constant][1] /* ty=Tensor[(2340), float32] */)
}

def @func_6582(%var_6579: Tensor[(2475), bool], %var_6580: Tensor[(288), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(2, 312), float32], Tensor[(165), bool], Tensor[(2475), bool], Tensor[(288), float32]) {
  %59 = @func_5435() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %60 = %59.0;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(165), bool] */, dtype="bool") /* ty=Tensor[(165), bool] */;
  %63 = cast(%var_6579, dtype="bool") /* ty=Tensor[(2475), bool] */;
  %64 = cast(%var_6580, dtype="float32") /* ty=Tensor[(288), float32] */;
  %65 = cast(%var_6579, dtype="float64") /* ty=Tensor[(2475), float64] */;
  %66 = reshape(%62, newshape=[1, 11, 15]) /* ty=Tensor[(1, 11, 15), bool] */;
  %67 = reshape(%63, newshape=[15, 11, 15]) /* ty=Tensor[(15, 11, 15), bool] */;
  %68 = reshape(%64, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %69 = reshape(%65, newshape=[15, 11, 15]) /* ty=Tensor[(15, 11, 15), float64] */;
  %70 = @func_3891(%66, %67, %68, %69) /* ty=(Tensor[(12, 4, 13), float32], Tensor[(2, 312), float32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(15, 11, 15), int16], Tensor[(15, 11, 15), float32]) */;
  %71 = acosh(%61) /* ty=Tensor[(8, 15, 9), float64] */;
  %72 = %70.1;
  (%71, %72, meta[relay.Constant][2] /* ty=Tensor[(165), bool] */, %var_6579, %var_6580)
}

def @func_5313() -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) {
  @func_5311() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) */
}

def @func_7209(%var_7122: Tensor[(15, 3, 7), int8], %var_7123: Tensor[(15, 3, 7), int8]) -> (Tensor[(15, 3, 7), float32], Tensor[(630), float32], Tensor[(1053), float32], Tensor[(630), float32]) {
  %73 = cast(%var_7123, dtype="int8") /* ty=Tensor[(15, 3, 7), int8] */;
  %74 = shape_of(%var_7122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%var_7122, dtype="int8") /* ty=Tensor[(15, 3, 7), int8] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %77 = multiply(%75, %76) /* ty=Tensor[(15, 3, 7), int8] */;
  %78 = cast(%77, dtype="bool") /* ty=Tensor[(15, 3, 7), bool] */;
  %79 = shape_of(%var_7123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_7123, dtype="bool") /* ty=Tensor[(15, 3, 7), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %82 = less(%80, %81) /* ty=Tensor[(15, 3, 7), bool] */;
  %83 = cast(%77, dtype="uint8") /* ty=Tensor[(15, 3, 7), uint8] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="uint8") /* ty=Tensor[(15, 3, 7), uint8] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %87 = bitwise_or(%85, %86) /* ty=Tensor[(15, 3, 7), uint8] */;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(1053), float32] */, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %90 = cast(meta[relay.Constant][4] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %91 = reshape(%89, newshape=[1053]) /* ty=Tensor[(1053), float32] */;
  %92 = reshape(%90, newshape=[10, 63]) /* ty=Tensor[(10, 63), float32] */;
  %93 = @func_6734(%91, %92) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(630), float32], Tensor[(1053), float32], Tensor[(10, 63), float32]) */;
  %94 = atanh(%88) /* ty=Tensor[(15, 3, 7), float32] */;
  %95 = %93.2;
  (%94, %95, meta[relay.Constant][3] /* ty=Tensor[(1053), float32] */, meta[relay.Constant][4] /* ty=Tensor[(630), float32] */)
}

def @func_7768(%var_7751: Tensor[(7, 13, 1), float32]) -> Tensor[(7, 13, ?), uint16] {
  %96 = cast(%var_7751, dtype="float32") /* ty=Tensor[(7, 13, 1), float32] */;
  %97 = sqrt(%96) /* ty=Tensor[(7, 13, 1), float32] */;
  %98 = cast(%97, dtype="uint16") /* ty=Tensor[(7, 13, 1), uint16] */;
  %99 = shape_of(%var_7751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%var_7751, dtype="uint16") /* ty=Tensor[(7, 13, 1), uint16] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%100, %101) /* ty=Tensor[(7, 13, ?), uint16] */
}

def @func_8898(%var_8876: Tensor[(16, 3, 15), float64]) -> (Tensor[(16, 3, 15), float64], Tensor[(8, 15, 9), float64]) {
  %102 = cast(%var_8876, dtype="float64") /* ty=Tensor[(16, 3, 15), float64] */;
  %103 = acos(%102) /* ty=Tensor[(16, 3, 15), float64] */;
  %104 = @func_4182() /* ty=Tensor[(8, 15, 9), float64] */;
  (%103, %104)
}

def @func_548(%var_546: Tensor[(1, 6, 2), int8]) -> (Tensor[(2, 6, 2), int8],) {
  @func_545(%var_546) /* ty=(Tensor[(2, 6, 2), int8],) */
}

def @func_9018(%var_9016: Tensor[(273), uint16]) -> (Tensor[(8, 15, 9), float32], Tensor[(1053), float32], Tensor[(27, 70), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) {
  @func_9015(%var_9016) /* ty=(Tensor[(8, 15, 9), float32], Tensor[(1053), float32], Tensor[(27, 70), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */
}

def @func_4219() -> (Tensor[(8, 15, 9), float64],) {
  %105 = @func_4182() /* ty=Tensor[(8, 15, 9), float64] */;
  (%105,)
}

def @func_7605(%var_7604: Tensor[(13, 11, 9), float32]) -> (Tensor[(13, 11, 9), float64], Tensor[(13, 11, 9), float32], Tensor[(55, 10), uint32], Tensor[(8, 15, 9), float64]) {
  %115 = fn (%var_7563: Tensor[(13, 11, 9), float32]) -> (Tensor[(13, 11, 9), float64], Tensor[(13, 11, 9), float32], Tensor[(55, 10), uint32], Tensor[(8, 15, 9), float64]) {
    %106 = cast(%var_7563, dtype="float32") /* ty=Tensor[(13, 11, 9), float32] */;
    %107 = asinh(%106) /* ty=Tensor[(13, 11, 9), float32] */;
    %108 = cast(%107, dtype="float64") /* ty=Tensor[(13, 11, 9), float64] */;
    %109 = cast(%107, dtype="float32") /* ty=Tensor[(13, 11, 9), float32] */;
    %110 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %111 = exp(%108) /* ty=Tensor[(13, 11, 9), float64] */;
    %112 = acos(%109) /* ty=Tensor[(13, 11, 9), float32] */;
    %113 = @func_6619() /* ty=Tensor[(55, 10), uint32] */;
    %114 = %110.0;
    (%111, %112, %113, %114)
  };
  %115(%var_7604) /* ty=(Tensor[(13, 11, 9), float64], Tensor[(13, 11, 9), float32], Tensor[(55, 10), uint32], Tensor[(8, 15, 9), float64]) */
}

def @func_4696() -> Tensor[(8, 15, 9), float64] {
  @func_4694() /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_8901(%var_8899: Tensor[(16, 3, 15), float64]) -> (Tensor[(16, 3, 15), float64], Tensor[(8, 15, 9), float64]) {
  @func_8898(%var_8899) /* ty=(Tensor[(16, 3, 15), float64], Tensor[(8, 15, 9), float64]) */
}

def @func_4836(%var_4816: Tensor[(12), int8]) -> (Tensor[(8, 15, 9), float64], Tensor[(2, 6, 2), int8], Tensor[(12), int8]) {
  %116 = @func_4335() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(13, 15, 12), float64]) */;
  %117 = cast(%var_4816, dtype="int8") /* ty=Tensor[(12), int8] */;
  %118 = reshape(%117, newshape=[1, 6, 2]) /* ty=Tensor[(1, 6, 2), int8] */;
  %119 = @func_545(%118) /* ty=(Tensor[(2, 6, 2), int8],) */;
  %120 = %116.0;
  %121 = %119.0;
  (%120, %121, %var_4816)
}

def @func_5076(%var_5074: uint64, %var_5075: Tensor[(286), uint64]) -> (Tensor[(5, 7, 12), int16], Tensor[(5, 7, 12), float64], Tensor[(5, 7, 12), float32], Tensor[(13, 2, 11), uint64], uint64, Tensor[(286), uint64]) {
  @func_5072(%var_5074, %var_5075) /* ty=(Tensor[(5, 7, 12), int16], Tensor[(5, 7, 12), float64], Tensor[(5, 7, 12), float32], Tensor[(13, 2, 11), uint64], uint64, Tensor[(286), uint64]) */
}

def @func_6365() -> Tensor[(8, 15, 9), float32] {
  @func_6363() /* ty=Tensor[(8, 15, 9), float32] */
}

def @func_2870(%var_2851: uint32, %var_2852: Tensor[(13, 14, 16), uint32]) -> (Tensor[(13, 14, 16), uint32], Tensor[(2, ?, 12), float32], Tensor[(24), float32]) {
  %122 = cast(%var_2851, dtype="uint32") /* ty=uint32 */;
  %123 = cast(%var_2852, dtype="uint32") /* ty=Tensor[(13, 14, 16), uint32] */;
  %124 = cast(meta[relay.Constant][5] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %125 = reshape(%124, newshape=[2, 1, 12]) /* ty=Tensor[(2, 1, 12), float32] */;
  %126 = bitwise_or(%122, %123) /* ty=Tensor[(13, 14, 16), uint32] */;
  %127 = @func_1077(%125) /* ty=Tensor[(2, ?, 12), float32] */;
  (%126, %127, meta[relay.Constant][5] /* ty=Tensor[(24), float32] */)
}

def @func_2874(%var_2872: uint32, %var_2873: Tensor[(13, 14, 16), uint32]) -> (Tensor[(13, 14, 16), uint32], Tensor[(2, ?, 12), float32], Tensor[(24), float32]) {
  @func_2870(%var_2872, %var_2873) /* ty=(Tensor[(13, 14, 16), uint32], Tensor[(2, ?, 12), float32], Tensor[(24), float32]) */
}

def @func_7970(%var_7966: Tensor[(624), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), uint16], Tensor[(8, 15, 9), float64], Tensor[(12, 4, 13), float32], Tensor[(624), float32]) {
  %128 = @func_7232() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) */;
  %129 = %128.0;
  %130 = cast(%129, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  %131 = reshape(%130, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float32] */;
  %132 = @func_5915() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %133 = cast(%var_7966, dtype="float32") /* ty=Tensor[(624), float32] */;
  %134 = reshape(%133, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), float32] */;
  %135 = @func_1988(%134) /* ty=(Tensor[(12, 4, 13), float32],) */;
  %136 = @func_4497(%131) /* ty=Tensor[(8, 15, 9), uint16] */;
  %137 = %132.0;
  %138 = %135.0;
  (%129, %136, %137, %138, %var_7966)
}

def @func_8214() -> (Tensor[(8, 15, 9), float64],) {
  %141 = fn () -> (Tensor[(8, 15, 9), float64],) {
    %139 = @func_6684() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %140 = %139.0;
    (%140,)
  };
  %141() /* ty=(Tensor[(8, 15, 9), float64],) */
}

def @func_7898() -> (Tensor[(15, 16, 15), float64],) {
  @func_7896() /* ty=(Tensor[(15, 16, 15), float64],) */
}

def @func_8558(%var_8556: Tensor[(15, 16, 15), float64], %var_8557: Tensor[(450, 2), float64]) -> (Tensor[(15, 16, 15), int32], Tensor[(273), uint16], Tensor[(450, 2), float64], Tensor[(273), float64]) {
  @func_8554(%var_8556, %var_8557) /* ty=(Tensor[(15, 16, 15), int32], Tensor[(273), uint16], Tensor[(450, 2), float64], Tensor[(273), float64]) */
}

def @func_4184() -> Tensor[(8, 15, 9), float64] {
  @func_4182() /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_8967() -> Tensor[(8, 15, 9), float64] {
  @func_8965() /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_6212() -> (Tensor[(8, 15, 9), float64], Tensor[(2340), float32]) {
  %146 = fn () -> (Tensor[(8, 15, 9), float64], Tensor[(2340), float32]) {
    %142 = @func_5179() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %143 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
    %144 = %142.0;
    %145 = %143.0;
    (%144, %145)
  };
  %146() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32]) */
}

def @func_8793(%var_8751: Tensor[(2), float32], %var_8757: Tensor[(91), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(13, 15, 12), float64], Tensor[(2), float32], Tensor[(7, 13, ?), uint16], Tensor[(91), float32]) {
  %147 = @func_5311() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) */;
  %148 = cast(%var_8751, dtype="float32") /* ty=Tensor[(2), float32] */;
  %149 = reshape(%148, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
  %150 = @func_921(%149) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %151 = cast(%var_8757, dtype="float32") /* ty=Tensor[(91), float32] */;
  %152 = reshape(%151, newshape=[7, 13, 1]) /* ty=Tensor[(7, 13, 1), float32] */;
  %153 = %147.1;
  %154 = %150.1;
  %155 = @func_7768(%152) /* ty=Tensor[(7, 13, ?), uint16] */;
  (%153, %154, %var_8751, %155, %var_8757)
}

def @func_6447() -> Tensor[(15, 16, 15), float64] {
  %157 = fn () -> Tensor[(15, 16, 15), float64] {
    %156 = @func_5244() /* ty=(Tensor[(10, 11, 5), bool], Tensor[(55, 10), uint32], Tensor[(15, 16, 15), float64], Tensor[(15, 16, 15), float64]) */;
    %156.2
  };
  %157() /* ty=Tensor[(15, 16, 15), float64] */
}

def @func_7445(%var_7444: Tensor[(8, 15, 9), float64]) -> (Tensor[(8, 15, 9), bool], Tensor[(55, 10), uint32]) {
  %166 = fn (%var_7424: Tensor[(8, 15, 9), float64]) -> (Tensor[(8, 15, 9), bool], Tensor[(55, 10), uint32]) {
    %158 = @func_4262() /* ty=Tensor[(8, 15, 9), float64] */;
    %159 = cast(%var_7424, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
    %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
    %161 = cast(%158, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
    %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %163 = @func_6818() /* ty=(Tensor[(55, 10), uint32],) */;
    %164 = greater(%161, %162) /* ty=Tensor[(8, 15, 9), bool] */;
    %165 = %163.0;
    (%164, %165)
  };
  %166(%var_7444) /* ty=(Tensor[(8, 15, 9), bool], Tensor[(55, 10), uint32]) */
}

def @func_8860() -> Tensor[(8, 15, 9), float64] {
  %168 = fn () -> Tensor[(8, 15, 9), float64] {
    %167 = @func_6459() /* ty=(Tensor[(15, 16, 15), float64], Tensor[(8, 15, 9), float64]) */;
    %167.1
  };
  %168() /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_5916() -> (Tensor[(8, 15, 9), float64],) {
  %171 = fn () -> (Tensor[(8, 15, 9), float64],) {
    %169 = @func_5179() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %170 = %169.0;
    (%170,)
  };
  %171() /* ty=(Tensor[(8, 15, 9), float64],) */
}

def @func_4866() -> (Tensor[(2340), float32],) {
  %172 = @func_4335() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(13, 15, 12), float64]) */;
  %173 = %172.1;
  (%173,)
}

def @func_7285(%var_7253: Tensor[(1120), float64], %var_7273: Tensor[(8, 15, 9), float32], %var_7278: Tensor[(624), float32]) -> (Tensor[(1120), float64], Tensor[(8, 15, 9), float64], Tensor[(624), float64]) {
  %174 = @func_6363() /* ty=Tensor[(8, 15, 9), float32] */;
  %175 = cast(%var_7273, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %179 = cast(%var_7253, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %180 = reshape(%179, newshape=[8, 10, 14]) /* ty=Tensor[(8, 10, 14), float64] */;
  %181 = @func_4654(%180) /* ty=(Tensor[(8, 10, 14), float64], Tensor[(12, 4, 13), float32], Tensor[(624), float32]) */;
  %182 = %181.2;
  %183 = cast(%var_7278, dtype="float64") /* ty=Tensor[(624), float64] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(1), int32] */;
  %185 = cast(%182, dtype="float64") /* ty=Tensor[(624), float64] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?), float64] */;
  %187 = power(%177, %178) /* ty=Tensor[(8, 15, 9), float64] */;
  %188 = floor_mod(%185, %186) /* ty=Tensor[(624), float64] */;
  (%var_7253, %187, %188)
}

def @func_1080(%var_1078: Tensor[(2, 1, 12), float32]) -> Tensor[(2, ?, 12), float32] {
  @func_1077(%var_1078) /* ty=Tensor[(2, ?, 12), float32] */
}

def @func_4221() -> (Tensor[(8, 15, 9), float64],) {
  @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */
}

def @func_1460(%var_1459: Tensor[(10, 11, 5), uint32]) -> Tensor[(10, 11, 5), bool] {
  %193 = fn (%var_1447: Tensor[(10, 11, 5), uint32]) -> Tensor[(10, 11, 5), bool] {
    %189 = cast(%var_1447, dtype="bool") /* ty=Tensor[(10, 11, 5), bool] */;
    %190 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(10, 11, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 11, 5), uint32] */, dtype="bool") /* ty=Tensor[(10, 11, 5), bool] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%191, %192) /* ty=Tensor[(10, 11, 5), bool] */
  };
  %193(%var_1459) /* ty=Tensor[(10, 11, 5), bool] */
}

def @func_426(%var_425: Tensor[(13, 15, 12), float32]) -> (Tensor[(13, 15, 12), float32], Tensor[(13, 15, 12), float64]) {
  %198 = fn (%var_417: Tensor[(13, 15, 12), float32]) -> (Tensor[(13, 15, 12), float32], Tensor[(13, 15, 12), float64]) {
    %194 = cast(%var_417, dtype="float32") /* ty=Tensor[(13, 15, 12), float32] */;
    %195 = cast(%var_417, dtype="float64") /* ty=Tensor[(13, 15, 12), float64] */;
    %196 = sqrt(%194) /* ty=Tensor[(13, 15, 12), float32] */;
    %197 = sigmoid(%195) /* ty=Tensor[(13, 15, 12), float64] */;
    (%196, %197)
  };
  %198(%var_425) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(13, 15, 12), float64]) */
}

def @func_5180() -> (Tensor[(8, 15, 9), float64],) {
  %200 = fn () -> (Tensor[(8, 15, 9), float64],) {
    %199 = @func_4694() /* ty=Tensor[(8, 15, 9), float64] */;
    (%199,)
  };
  %200() /* ty=(Tensor[(8, 15, 9), float64],) */
}

def @func_6619() -> Tensor[(55, 10), uint32] {
  %201 = @func_5244() /* ty=(Tensor[(10, 11, 5), bool], Tensor[(55, 10), uint32], Tensor[(15, 16, 15), float64], Tensor[(15, 16, 15), float64]) */;
  %201.1
}

def @func_6586(%var_6584: Tensor[(2475), bool], %var_6585: Tensor[(288), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(2, 312), float32], Tensor[(165), bool], Tensor[(2475), bool], Tensor[(288), float32]) {
  @func_6582(%var_6584, %var_6585) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2, 312), float32], Tensor[(165), bool], Tensor[(2475), bool], Tensor[(288), float32]) */
}

def @func_4839(%var_4837: Tensor[(12), int8]) -> (Tensor[(8, 15, 9), float64], Tensor[(2, 6, 2), int8], Tensor[(12), int8]) {
  @func_4836(%var_4837) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2, 6, 2), int8], Tensor[(12), int8]) */
}

def @func_4497(%var_4488: Tensor[(8, 15, 9), float32]) -> Tensor[(8, 15, 9), uint16] {
  %202 = @func_4335() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(13, 15, 12), float64]) */;
  %203 = %202.0;
  %204 = cast(%203, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  %205 = rsqrt(%204) /* ty=Tensor[(8, 15, 9), float32] */;
  %206 = cast(%var_4488, dtype="uint16") /* ty=Tensor[(8, 15, 9), uint16] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%205, dtype="uint16") /* ty=Tensor[(8, 15, 9), uint16] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%208, %209) /* ty=Tensor[(8, 15, 9), uint16] */
}

def @func_6818() -> (Tensor[(55, 10), uint32],) {
  %210 = @func_6619() /* ty=Tensor[(55, 10), uint32] */;
  (%210,)
}

def @func_6791(%var_6790: Tensor[(8, 8, 4), float32]) -> (Tensor[(8, 8, 4), float32], Tensor[(8, 15, 9), float64]) {
  %215 = fn (%var_6784: Tensor[(8, 8, 4), float32]) -> (Tensor[(8, 8, 4), float32], Tensor[(8, 15, 9), float64]) {
    %211 = cast(%var_6784, dtype="float32") /* ty=Tensor[(8, 8, 4), float32] */;
    %212 = @func_6211() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32]) */;
    %213 = log2(%211) /* ty=Tensor[(8, 8, 4), float32] */;
    %214 = %212.0;
    (%213, %214)
  };
  %215(%var_6790) /* ty=(Tensor[(8, 8, 4), float32], Tensor[(8, 15, 9), float64]) */
}

def @func_7364(%var_7329: Tensor[(2912), uint32], %var_7333: Tensor[(2, 4, 12), float32], %var_7346: Tensor[(2), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(2912), int64], Tensor[(12, 4, 13), float32], Tensor[(624), float32], Tensor[(1, 1, 2), float32], Tensor[(2), float32], Tensor[(2, 4, 12), int16]) {
  %216 = @func_5449() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %217 = cast(%var_7329, dtype="int64") /* ty=Tensor[(2912), int64] */;
  %218 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(2912), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %219 = cast(meta[relay.Constant][7] /* ty=Tensor[(2912), uint32] */, dtype="int64") /* ty=Tensor[(2912), int64] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?), int64] */;
  %221 = cast(meta[relay.Constant][8] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %222 = reshape(%221, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), float32] */;
  %223 = @func_1988(%222) /* ty=(Tensor[(12, 4, 13), float32],) */;
  %224 = cast(%var_7346, dtype="float32") /* ty=Tensor[(2), float32] */;
  %225 = reshape(%224, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
  %226 = @func_921(%225) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %227 = cast(meta[relay.Constant][9] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %228 = cast(meta[relay.Constant][7] /* ty=Tensor[(2912), uint32] */, dtype="uint32") /* ty=Tensor[(2912), uint32] */;
  %229 = reshape(%227, newshape=[]) /* ty=uint32 */;
  %230 = reshape(%228, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), uint32] */;
  %231 = @func_2870(%229, %230) /* ty=(Tensor[(13, 14, 16), uint32], Tensor[(2, ?, 12), float32], Tensor[(24), float32]) */;
  %232 = %231.1;
  %233 = cast(%232, dtype="uint32") /* ty=Tensor[(2, ?, 12), uint32] */;
  %234 = cast(%var_7333, dtype="uint32") /* ty=Tensor[(2, 4, 12), uint32] */;
  %235 = add(%233, %234) /* ty=Tensor[(2, 4, 12), uint32] */;
  %236 = cast(%235, dtype="int16") /* ty=Tensor[(2, 4, 12), int16] */;
  %237 = cast(meta[relay.Constant][9] /* ty=uint32 */, dtype="int16") /* ty=int16 */;
  %238 = %216.0;
  %239 = add(%219, %220) /* ty=Tensor[(2912), int64] */;
  %240 = %223.0;
  %241 = %226.0;
  %242 = bitwise_xor(%236, %237) /* ty=Tensor[(2, 4, 12), int16] */;
  (%238, %239, %240, meta[relay.Constant][8] /* ty=Tensor[(624), float32] */, %241, %var_7346, %242)
}

def @func_3891(%var_3803: Tensor[(1, 11, 15), bool], %var_3804: Tensor[(15, 11, 15), bool], %var_3819: Tensor[(288), float32], %var_3874: Tensor[(15, 11, 15), float64]) -> (Tensor[(12, 4, 13), float32], Tensor[(2, 312), float32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(15, 11, 15), int16], Tensor[(15, 11, 15), float32]) {
  %243 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 312), float32] */, dtype="float32") /* ty=Tensor[(2, 312), float32] */;
  %244 = reshape(%243, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), float32] */;
  %245 = @func_1988(%244) /* ty=(Tensor[(12, 4, 13), float32],) */;
  %246 = cast(%var_3819, dtype="float32") /* ty=Tensor[(288), float32] */;
  %247 = cast(%var_3819, dtype="float32") /* ty=Tensor[(288), float32] */;
  %248 = reshape(%246, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %249 = reshape(%247, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %250 = cast(%var_3803, dtype="bool") /* ty=Tensor[(1, 11, 15), bool] */;
  %251 = cast(%var_3804, dtype="bool") /* ty=Tensor[(15, 11, 15), bool] */;
  %252 = logical_and(%250, %251) /* ty=Tensor[(15, 11, 15), bool] */;
  %253 = cast(%var_3803, dtype="float64") /* ty=Tensor[(1, 11, 15), float64] */;
  %254 = cast(%252, dtype="float64") /* ty=Tensor[(15, 11, 15), float64] */;
  %255 = maximum(%253, %254) /* ty=Tensor[(15, 11, 15), float64] */;
  %256 = cast(%255, dtype="float64") /* ty=Tensor[(15, 11, 15), float64] */;
  %257 = asinh(%256) /* ty=Tensor[(15, 11, 15), float64] */;
  %258 = cast(%257, dtype="float64") /* ty=Tensor[(15, 11, 15), float64] */;
  %259 = atan(%258) /* ty=Tensor[(15, 11, 15), float64] */;
  %260 = cast(%var_3874, dtype="int16") /* ty=Tensor[(15, 11, 15), int16] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%259, dtype="int16") /* ty=Tensor[(15, 11, 15), int16] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %264 = cast(%257, dtype="float32") /* ty=Tensor[(15, 11, 15), float32] */;
  %265 = %245.0;
  %266 = @func_229(%248, %249) /* ty=Tensor[(16, 6, 3), float32] */;
  %267 = right_shift(%262, %263) /* ty=Tensor[(15, 11, 15), int16] */;
  %268 = atanh(%264) /* ty=Tensor[(15, 11, 15), float32] */;
  (%265, meta[relay.Constant][10] /* ty=Tensor[(2, 312), float32] */, %266, %var_3819, %267, %268)
}

def @func_8416(%var_8414: Tensor[(7, 14, 10), float64], %var_8415: Tensor[(1890), uint16]) -> (Tensor[(7, 14, 10), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16], Tensor[(55, 10), uint32], uint64) {
  @func_8412(%var_8414, %var_8415) /* ty=(Tensor[(7, 14, 10), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16], Tensor[(55, 10), uint32], uint64) */
}

def @func_8797(%var_8795: Tensor[(2), float32], %var_8796: Tensor[(91), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(13, 15, 12), float64], Tensor[(2), float32], Tensor[(7, 13, ?), uint16], Tensor[(91), float32]) {
  @func_8793(%var_8795, %var_8796) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(13, 15, 12), float64], Tensor[(2), float32], Tensor[(7, 13, ?), uint16], Tensor[(91), float32]) */
}

def @func_1990(%var_1989: Tensor[(12, 4, 13), float32]) -> (Tensor[(12, 4, 13), float32],) {
  %273 = fn (%var_1967: Tensor[(12, 4, 13), float32]) -> (Tensor[(12, 4, 13), float32],) {
    %269 = cast(%var_1967, dtype="float32") /* ty=Tensor[(12, 4, 13), float32] */;
    %270 = sinh(%269) /* ty=Tensor[(12, 4, 13), float32] */;
    %271 = cast(%270, dtype="float32") /* ty=Tensor[(12, 4, 13), float32] */;
    %272 = cosh(%271) /* ty=Tensor[(12, 4, 13), float32] */;
    (%272,)
  };
  %273(%var_1989) /* ty=(Tensor[(12, 4, 13), float32],) */
}

def @func_9193() -> (Tensor[(8, 15, 9), float64], Tensor[(14, 2, 2), float32], Tensor[(28, 2), float64]) {
  %279 = fn () -> (Tensor[(8, 15, 9), float64], Tensor[(14, 2, 2), float32], Tensor[(28, 2), float64]) {
    %274 = @func_6459() /* ty=(Tensor[(15, 16, 15), float64], Tensor[(8, 15, 9), float64]) */;
    %275 = cast(meta[relay.Constant][11] /* ty=Tensor[(28, 2), float64] */, dtype="float64") /* ty=Tensor[(28, 2), float64] */;
    %276 = reshape(%275, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), float64] */;
    %277 = %274.1;
    %278 = @func_6104(%276) /* ty=Tensor[(14, 2, 2), float32] */;
    (%277, %278, meta[relay.Constant][11] /* ty=Tensor[(28, 2), float64] */)
  };
  %279() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(14, 2, 2), float32], Tensor[(28, 2), float64]) */
}

def @func_2586(%var_2584: Tensor[(6, 15, 7), float32], %var_2585: Tensor[(90, 26), float32]) -> (Tensor[(6, 15, 7), bool], Tensor[(6, 15, 7), float64], Tensor[(1, 1, 2), float32], Tensor[(2), float32], Tensor[(13, 15, 12), float64], Tensor[(90, 26), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) {
  @func_2582(%var_2584, %var_2585) /* ty=(Tensor[(6, 15, 7), bool], Tensor[(6, 15, 7), float64], Tensor[(1, 1, 2), float32], Tensor[(2), float32], Tensor[(13, 15, 12), float64], Tensor[(90, 26), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) */
}

def @func_1077(%var_1058: Tensor[(2, 1, 12), float32]) -> Tensor[(2, ?, 12), float32] {
  %280 = cast(%var_1058, dtype="float32") /* ty=Tensor[(2, 1, 12), float32] */;
  %281 = acos(%280) /* ty=Tensor[(2, 1, 12), float32] */;
  %282 = cast(%281, dtype="uint8") /* ty=Tensor[(2, 1, 12), uint8] */;
  %283 = shape_of(%var_1058, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%var_1058, dtype="uint8") /* ty=Tensor[(2, 1, 12), uint8] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %286 = bitwise_and(%284, %285) /* ty=Tensor[(2, ?, 12), uint8] */;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(2, ?, 12), float32] */;
  log(%287) /* ty=Tensor[(2, ?, 12), float32] */
}

def @func_2582(%var_2535: Tensor[(6, 15, 7), float32], %var_2563: Tensor[(90, 26), float32]) -> (Tensor[(6, 15, 7), bool], Tensor[(6, 15, 7), float64], Tensor[(1, 1, 2), float32], Tensor[(2), float32], Tensor[(13, 15, 12), float64], Tensor[(90, 26), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) {
  %288 = cast(%var_2535, dtype="float32") /* ty=Tensor[(6, 15, 7), float32] */;
  %289 = sinh(%288) /* ty=Tensor[(6, 15, 7), float32] */;
  %290 = cast(%var_2535, dtype="bool") /* ty=Tensor[(6, 15, 7), bool] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="bool") /* ty=Tensor[(6, 15, 7), bool] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %294 = cast(%289, dtype="float64") /* ty=Tensor[(6, 15, 7), float64] */;
  %295 = cast(meta[relay.Constant][12] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
  %296 = reshape(%295, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
  %297 = @func_921(%296) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %298 = cast(%var_2563, dtype="float32") /* ty=Tensor[(90, 26), float32] */;
  %299 = reshape(%298, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
  %300 = @func_424(%299) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(13, 15, 12), float64]) */;
  %301 = cast(meta[relay.Constant][13] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %302 = reshape(%301, newshape=[10, 11, 5]) /* ty=Tensor[(10, 11, 5), uint32] */;
  %303 = less(%292, %293) /* ty=Tensor[(6, 15, 7), bool] */;
  %304 = asinh(%294) /* ty=Tensor[(6, 15, 7), float64] */;
  %305 = %297.0;
  %306 = %300.1;
  %307 = @func_1458(%302) /* ty=Tensor[(10, 11, 5), bool] */;
  (%303, %304, %305, meta[relay.Constant][12] /* ty=Tensor[(2), float32] */, %306, %var_2563, %307, meta[relay.Constant][13] /* ty=Tensor[(550), uint32] */)
}

def @func_5805() -> Tensor[(8, 15, 9), float64] {
  %308 = @func_5668() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(2), float32]) */;
  %308.0
}

def @func_7844(%var_7841: float64, %var_7842: Tensor[(1053), float32], %var_7843: Tensor[(550), uint32]) -> (Tensor[(8, 1), float64], Tensor[(1053), float32], Tensor[(550), bool]) {
  %321 = fn (%var_7822: float64, %var_7829: Tensor[(1053), float32], %var_7835: Tensor[(550), uint32]) -> (Tensor[(8, 1), float64], Tensor[(1053), float32], Tensor[(550), bool]) {
    %309 = cast(%var_7822, dtype="float64") /* ty=float64 */;
    %310 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 1), float64] */, dtype="float64") /* ty=Tensor[(8, 1), float64] */;
    %311 = cast(%var_7829, dtype="float32") /* ty=Tensor[(1053), float32] */;
    %312 = reshape(%311, newshape=[13, 9, 9]) /* ty=Tensor[(13, 9, 9), float32] */;
    %313 = @func_3046(%312) /* ty=(Tensor[(13, 9, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) */;
    %314 = %313.2;
    %315 = cast(%var_7835, dtype="bool") /* ty=Tensor[(550), bool] */;
    %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(1), int32] */;
    %317 = cast(%314, dtype="bool") /* ty=Tensor[(550), bool] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?), bool] */;
    %319 = floor_divide(%309, %310) /* ty=Tensor[(8, 1), float64] */;
    %320 = less_equal(%317, %318) /* ty=Tensor[(550), bool] */;
    (%319, %var_7829, %320)
  };
  %321(%var_7841, %var_7842, %var_7843) /* ty=(Tensor[(8, 1), float64], Tensor[(1053), float32], Tensor[(550), bool]) */
}

def @func_229(%var_217: Tensor[(16, 6, 3), float32], %var_218: Tensor[(16, 6, 3), float32]) -> Tensor[(16, 6, 3), float32] {
  %322 = cast(%var_218, dtype="float32") /* ty=Tensor[(16, 6, 3), float32] */;
  %323 = shape_of(%var_217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%var_217, dtype="float32") /* ty=Tensor[(16, 6, 3), float32] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%324, %325) /* ty=Tensor[(16, 6, 3), float32] */
}

def @func_5968(%var_5966: Tensor[(273), uint16]) -> (Tensor[(8, 15, 9), float32], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) {
  %326 = @func_5754() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %327 = %326.0;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  %329 = cast(%var_5966, dtype="uint16") /* ty=Tensor[(273), uint16] */;
  %330 = reshape(%329, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), uint16] */;
  %331 = sigmoid(%328) /* ty=Tensor[(8, 15, 9), float32] */;
  %332 = @func_1731(%330) /* ty=Tensor[(3, 7, 13), uint16] */;
  (%331, %332, %var_5966)
}

def @func_7213(%var_7211: Tensor[(15, 3, 7), int8], %var_7212: Tensor[(15, 3, 7), int8]) -> (Tensor[(15, 3, 7), float32], Tensor[(630), float32], Tensor[(1053), float32], Tensor[(630), float32]) {
  @func_7209(%var_7211, %var_7212) /* ty=(Tensor[(15, 3, 7), float32], Tensor[(630), float32], Tensor[(1053), float32], Tensor[(630), float32]) */
}

def @func_8249(%var_8246: Tensor[(275, 2), uint32]) -> (Tensor[(8, 15, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(275, 2), uint32]) {
  %333 = @func_5485() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %334 = cast(%var_8246, dtype="uint32") /* ty=Tensor[(275, 2), uint32] */;
  %335 = reshape(%334, newshape=[10, 11, 5]) /* ty=Tensor[(10, 11, 5), uint32] */;
  %336 = %333.0;
  %337 = @func_1458(%335) /* ty=Tensor[(10, 11, 5), bool] */;
  (%336, %337, %var_8246)
}

def @func_5754() -> (Tensor[(8, 15, 9), float64],) {
  %338 = @func_5668() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(2), float32]) */;
  %339 = %338.0;
  (%339,)
}

def @func_5436() -> (Tensor[(8, 15, 9), float32],) {
  %344 = fn () -> (Tensor[(8, 15, 9), float32],) {
    %340 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %341 = %340.0;
    %342 = cast(%341, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
    %343 = acos(%342) /* ty=Tensor[(8, 15, 9), float32] */;
    (%343,)
  };
  %344() /* ty=(Tensor[(8, 15, 9), float32],) */
}

def @func_7065(%var_7060: uint64) -> (Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(2340), float64], Tensor[(55, 10), uint32], Tensor[(5, 7, 12), int16], uint64, Tensor[(286), uint64]) {
  %345 = @func_6347() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %346 = cast(meta[relay.Constant][15] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
  %347 = reshape(%346, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
  %348 = @func_921(%347) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %349 = %348.2;
  %350 = cast(meta[relay.Constant][16] /* ty=Tensor[(2340), float32] */, dtype="float64") /* ty=Tensor[(2340), float64] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(1), int32] */;
  %352 = cast(%349, dtype="float64") /* ty=Tensor[(2340), float64] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?), float64] */;
  %354 = cast(%var_7060, dtype="uint64") /* ty=uint64 */;
  %355 = cast(meta[relay.Constant][17] /* ty=Tensor[(286), uint64] */, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %356 = reshape(%354, newshape=[]) /* ty=uint64 */;
  %357 = reshape(%355, newshape=[286]) /* ty=Tensor[(286), uint64] */;
  %358 = @func_5072(%356, %357) /* ty=(Tensor[(5, 7, 12), int16], Tensor[(5, 7, 12), float64], Tensor[(5, 7, 12), float32], Tensor[(13, 2, 11), uint64], uint64, Tensor[(286), uint64]) */;
  %359 = %345.0;
  %360 = subtract(%352, %353) /* ty=Tensor[(2340), float64] */;
  %361 = @func_6619() /* ty=Tensor[(55, 10), uint32] */;
  %362 = %358.0;
  (%359, meta[relay.Constant][15] /* ty=Tensor[(2), float32] */, %360, %361, %362, %var_7060, meta[relay.Constant][17] /* ty=Tensor[(286), uint64] */)
}

def @func_7698(%var_7697: Tensor[(550), float64]) -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(550), float64]) {
  %369 = fn (%var_7690: Tensor[(550), float64]) -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(550), float64]) {
    %363 = @func_5311() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) */;
    %364 = cast(%var_7690, dtype="float64") /* ty=Tensor[(550), float64] */;
    %365 = reshape(%364, newshape=[55, 10]) /* ty=Tensor[(55, 10), float64] */;
    %366 = @func_7667(%365) /* ty=(Tensor[(55, 10), bool], Tensor[(55, 10), uint16], Tensor[(8, 15, 9), float64]) */;
    %367 = %363.1;
    %368 = %366.2;
    (%367, %368, %var_7690)
  };
  %369(%var_7697) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(550), float64]) */
}

def @func_7879() -> Tensor[(8, 15, 9), float64] {
  %370 = @func_7479() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(9, 12, 9), bool], Tensor[(550), uint32]) */;
  %371 = %370.0;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  log(%372) /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_4182() -> Tensor[(8, 15, 9), float64] {
  %373 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  asinh(%373) /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_3049(%var_3047: Tensor[(13, 9, 9), float32]) -> (Tensor[(13, 9, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) {
  @func_3046(%var_3047) /* ty=(Tensor[(13, 9, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) */
}

def @func_4807(%var_4803: Tensor[(1053), float32], %var_4804: Tensor[(1053), float32], %var_4805: Tensor[(630), float32], %var_4806: Tensor[(2340), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(10, 11, 5), bool], Tensor[(1053), float64], Tensor[(8, 15, 9), bool], Tensor[(6, 15, 7), bool], Tensor[(630), float32], Tensor[(2340), float32], Tensor[(1, 180), float64], Tensor[(2), float32], Tensor[(?, 624), bool]) {
  %407 = fn (%var_4738: Tensor[(1053), float32], %var_4758: Tensor[(1053), float32], %var_4780: Tensor[(630), float32], %var_4781: Tensor[(2340), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(10, 11, 5), bool], Tensor[(1053), float64], Tensor[(8, 15, 9), bool], Tensor[(6, 15, 7), bool], Tensor[(630), float32], Tensor[(2340), float32], Tensor[(1, 180), float64], Tensor[(2), float32], Tensor[(?, 624), bool]) {
    %374 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %375 = cast(%var_4738, dtype="float32") /* ty=Tensor[(1053), float32] */;
    %376 = reshape(%375, newshape=[13, 9, 9]) /* ty=Tensor[(13, 9, 9), float32] */;
    %377 = @func_3046(%376) /* ty=(Tensor[(13, 9, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) */;
    %378 = cast(%var_4758, dtype="float64") /* ty=Tensor[(1053), float64] */;
    %379 = shape_of(%var_4738, dtype="int32") /* ty=Tensor[(1), int32] */;
    %380 = cast(%var_4738, dtype="float64") /* ty=Tensor[(1053), float64] */;
    %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?), float64] */;
    %382 = %374.0;
    %383 = cast(%382, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
    %384 = reshape(%383, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float64] */;
    %385 = cast(%var_4780, dtype="float32") /* ty=Tensor[(630), float32] */;
    %386 = cast(%var_4781, dtype="float32") /* ty=Tensor[(2340), float32] */;
    %387 = reshape(%385, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), float32] */;
    %388 = reshape(%386, newshape=[90, 26]) /* ty=Tensor[(90, 26), float32] */;
    %389 = @func_2582(%387, %388) /* ty=(Tensor[(6, 15, 7), bool], Tensor[(6, 15, 7), float64], Tensor[(1, 1, 2), float32], Tensor[(2), float32], Tensor[(13, 15, 12), float64], Tensor[(90, 26), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) */;
    %390 = cast(meta[relay.Constant][19] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
    %391 = reshape(%390, newshape=[2, 1]) /* ty=Tensor[(2, 1), float32] */;
    %392 = @func_4406(%391) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(1, 180), float64], Tensor[(2, 1), float32]) */;
    %393 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 624), float32] */, dtype="float32") /* ty=Tensor[(1, 624), float32] */;
    %394 = reshape(%393, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), float32] */;
    %395 = @func_1988(%394) /* ty=(Tensor[(12, 4, 13), float32],) */;
    %396 = %395.0;
    %397 = cast(%396, dtype="bool") /* ty=Tensor[(12, 4, 13), bool] */;
    %398 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(1, 624), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %399 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 624), float32] */, dtype="bool") /* ty=Tensor[(1, 624), bool] */;
    %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %401 = %377.1;
    %402 = floor_divide(%380, %381) /* ty=Tensor[(1053), float64] */;
    %403 = @func_4613(%384) /* ty=Tensor[(8, 15, 9), bool] */;
    %404 = %389.0;
    %405 = %392.3;
    %406 = not_equal(%399, %400) /* ty=Tensor[(?, 624), bool] */;
    (%382, %401, %402, %403, %404, %var_4780, %var_4781, %405, meta[relay.Constant][19] /* ty=Tensor[(2), float32] */, %406)
  };
  %407(%var_4803, %var_4804, %var_4805, %var_4806) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(10, 11, 5), bool], Tensor[(1053), float64], Tensor[(8, 15, 9), bool], Tensor[(6, 15, 7), bool], Tensor[(630), float32], Tensor[(2340), float32], Tensor[(1, 180), float64], Tensor[(2), float32], Tensor[(?, 624), bool]) */
}

def @func_9312(%var_9311: Tensor[(273), uint16]) -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(273), uint16], Tensor[(18, 50), float64], Tensor[(273), uint16], Tensor[(8, 15, 9), float32], Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16]) {
  %427 = fn (%var_9278: Tensor[(273), uint16]) -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(273), uint16], Tensor[(18, 50), float64], Tensor[(273), uint16], Tensor[(8, 15, 9), float32], Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16]) {
    %408 = @func_5630() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %409 = @func_5630() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %410 = cast(meta[relay.Constant][21] /* ty=Tensor[(18, 50), float64] */, dtype="float64") /* ty=Tensor[(18, 50), float64] */;
    %411 = cast(meta[relay.Constant][21] /* ty=Tensor[(18, 50), float64] */, dtype="float64") /* ty=Tensor[(18, 50), float64] */;
    %412 = cast(%var_9278, dtype="uint16") /* ty=Tensor[(273), uint16] */;
    %413 = reshape(%410, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float64] */;
    %414 = reshape(%411, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float64] */;
    %415 = reshape(%412, newshape=[273]) /* ty=Tensor[(273), uint16] */;
    %416 = @func_8090(%413, %414, %415) /* ty=(Tensor[(9, 10, 10), float64], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */;
    %417 = @func_7479() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(9, 12, 9), bool], Tensor[(550), uint32]) */;
    %418 = cast(meta[relay.Constant][22] /* ty=Tensor[(1890), uint16] */, dtype="uint16") /* ty=Tensor[(1890), uint16] */;
    %419 = reshape(%418, newshape=[1890]) /* ty=Tensor[(1890), uint16] */;
    %420 = @func_7929(%419) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(1053), float32], Tensor[(1890), uint16]) */;
    %421 = %408.0;
    %422 = %409.0;
    %423 = %416.2;
    %424 = @func_5854() /* ty=Tensor[(8, 15, 9), float32] */;
    %425 = %417.0;
    %426 = %420.0;
    (%421, %422, %423, meta[relay.Constant][21] /* ty=Tensor[(18, 50), float64] */, %var_9278, %424, %425, %426, meta[relay.Constant][22] /* ty=Tensor[(1890), uint16] */)
  };
  %427(%var_9311) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(273), uint16], Tensor[(18, 50), float64], Tensor[(273), uint16], Tensor[(8, 15, 9), float32], Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16]) */
}

def @func_9015(%var_9012: Tensor[(273), uint16]) -> (Tensor[(8, 15, 9), float32], Tensor[(1053), float32], Tensor[(27, 70), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) {
  %428 = cast(meta[relay.Constant][23] /* ty=Tensor[(27, 70), uint16] */, dtype="uint16") /* ty=Tensor[(27, 70), uint16] */;
  %429 = reshape(%428, newshape=[1890]) /* ty=Tensor[(1890), uint16] */;
  %430 = @func_7929(%429) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(1053), float32], Tensor[(1890), uint16]) */;
  %431 = cast(meta[relay.Constant][23] /* ty=Tensor[(27, 70), uint16] */, dtype="float64") /* ty=Tensor[(27, 70), float64] */;
  %432 = @func_5095() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %433 = cast(meta[relay.Constant][23] /* ty=Tensor[(27, 70), uint16] */, dtype="uint16") /* ty=Tensor[(27, 70), uint16] */;
  %434 = reshape(%433, newshape=[1890]) /* ty=Tensor[(1890), uint16] */;
  %435 = @func_7929(%434) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(1053), float32], Tensor[(1890), uint16]) */;
  %436 = cast(%var_9012, dtype="uint16") /* ty=Tensor[(273), uint16] */;
  %437 = reshape(%436, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), uint16] */;
  %438 = @func_6363() /* ty=Tensor[(8, 15, 9), float32] */;
  %439 = %430.1;
  %440 = acos(%431) /* ty=Tensor[(27, 70), float64] */;
  %441 = %432.0;
  %442 = %435.2;
  %443 = @func_1731(%437) /* ty=Tensor[(3, 7, 13), uint16] */;
  (%438, %439, %440, %441, %442, %443, %var_9012)
}

def @func_5311() -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) {
  %444 = @func_5095() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %445 = %444.0;
  %446 = @func_5132() /* ty=Tensor[(8, 15, 9), float64] */;
  (%445, %446)
}

def @func_8252(%var_8250: Tensor[(275, 2), uint32]) -> (Tensor[(8, 15, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(275, 2), uint32]) {
  @func_8249(%var_8250) /* ty=(Tensor[(8, 15, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(275, 2), uint32]) */
}

def @func_5631() -> (Tensor[(8, 15, 9), float64],) {
  %449 = fn () -> (Tensor[(8, 15, 9), float64],) {
    %447 = @func_5179() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %448 = %447.0;
    (%448,)
  };
  %449() /* ty=(Tensor[(8, 15, 9), float64],) */
}

def @func_5856() -> Tensor[(8, 15, 9), float32] {
  @func_5854() /* ty=Tensor[(8, 15, 9), float32] */
}

def @func_6820() -> (Tensor[(55, 10), uint32],) {
  @func_6818() /* ty=(Tensor[(55, 10), uint32],) */
}

def @func_1191(%var_1176: Tensor[(6, 2, 15), float64], %var_1183: Tensor[(2), float32]) -> (Tensor[(2340), float32], Tensor[(2), float32], Tensor[(6, 2, 15), float32]) {
  %450 = cast(%var_1183, dtype="float32") /* ty=Tensor[(2), float32] */;
  %451 = reshape(%450, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
  %452 = @func_921(%451) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
  %453 = cast(%var_1176, dtype="float64") /* ty=Tensor[(6, 2, 15), float64] */;
  %454 = log10(%453) /* ty=Tensor[(6, 2, 15), float64] */;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(6, 2, 15), float32] */;
  %456 = %452.2;
  %457 = cosh(%455) /* ty=Tensor[(6, 2, 15), float32] */;
  (%456, %var_1183, %457)
}

def @func_6761() -> (Tensor[(8, 15, 9), float64], Tensor[(273), uint16], Tensor[(39, 7), uint16]) {
  @func_6759() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(273), uint16], Tensor[(39, 7), uint16]) */
}

def @func_7068(%var_7066: uint64) -> (Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(2340), float64], Tensor[(55, 10), uint32], Tensor[(5, 7, 12), int16], uint64, Tensor[(286), uint64]) {
  @func_7065(%var_7066) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(2340), float64], Tensor[(55, 10), uint32], Tensor[(5, 7, 12), int16], uint64, Tensor[(286), uint64]) */
}

def @func_6686() -> (Tensor[(8, 15, 9), float64],) {
  @func_6684() /* ty=(Tensor[(8, 15, 9), float64],) */
}

def @func_9205() -> (Tensor[(2340), float32],) {
  %460 = fn () -> (Tensor[(2340), float32],) {
    %458 = @func_6932() /* ty=(Tensor[(2340), float32],) */;
    %459 = %458.0;
    (%459,)
  };
  %460() /* ty=(Tensor[(2340), float32],) */
}

def @func_8172() -> (Tensor[(55, 10), uint32],) {
  @func_8170() /* ty=(Tensor[(55, 10), uint32],) */
}

def @func_9084(%var_9081: Tensor[(8, 6, 15), int8], %var_9082: Tensor[(8, 6, 15), int8], %var_9083: Tensor[(13, 21), uint16]) -> (Tensor[(8, 6, 15), bool], Tensor[(27, 70), float64], Tensor[(13, 21), uint16]) {
  @func_9079(%var_9081, %var_9082, %var_9083) /* ty=(Tensor[(8, 6, 15), bool], Tensor[(27, 70), float64], Tensor[(13, 21), uint16]) */
}

def @func_5669() -> (Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(2), float32]) {
  %466 = fn () -> (Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(2), float32]) {
    %461 = cast(meta[relay.Constant][24] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
    %462 = reshape(%461, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
    %463 = @func_921(%462) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
    %464 = @func_4182() /* ty=Tensor[(8, 15, 9), float64] */;
    %465 = %463.2;
    (%464, %465, meta[relay.Constant][24] /* ty=Tensor[(2), float32] */)
  };
  %466() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(2), float32]) */
}

def @func_5246() -> (Tensor[(10, 11, 5), bool], Tensor[(55, 10), uint32], Tensor[(15, 16, 15), float64], Tensor[(15, 16, 15), float64]) {
  @func_5244() /* ty=(Tensor[(10, 11, 5), bool], Tensor[(55, 10), uint32], Tensor[(15, 16, 15), float64], Tensor[(15, 16, 15), float64]) */
}

def @func_6460() -> (Tensor[(15, 16, 15), float64], Tensor[(8, 15, 9), float64]) {
  %471 = fn () -> (Tensor[(15, 16, 15), float64], Tensor[(8, 15, 9), float64]) {
    %467 = @func_5244() /* ty=(Tensor[(10, 11, 5), bool], Tensor[(55, 10), uint32], Tensor[(15, 16, 15), float64], Tensor[(15, 16, 15), float64]) */;
    %468 = @func_5915() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %469 = %467.2;
    %470 = %468.0;
    (%469, %470)
  };
  %471() /* ty=(Tensor[(15, 16, 15), float64], Tensor[(8, 15, 9), float64]) */
}

def @func_5756() -> (Tensor[(8, 15, 9), float64],) {
  @func_5754() /* ty=(Tensor[(8, 15, 9), float64],) */
}

def @func_4868() -> (Tensor[(2340), float32],) {
  @func_4866() /* ty=(Tensor[(2340), float32],) */
}

def @func_1731(%var_1717: Tensor[(3, 7, 13), uint16]) -> Tensor[(3, 7, 13), uint16] {
  %472 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 1, 13), uint16] */, dtype="uint16") /* ty=Tensor[(1, 1, 13), uint16] */;
  %473 = cast(%var_1717, dtype="uint16") /* ty=Tensor[(3, 7, 13), uint16] */;
  logical_xor(%472, %473) /* ty=Tensor[(3, 7, 13), uint16] */
}

def @func_6340() -> (Tensor[(8, 15, 9), float32],) {
  %474 = @func_5485() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %475 = %474.0;
  (%475,)
}

def @func_6106(%var_6105: Tensor[(14, 2, 2), float64]) -> Tensor[(14, 2, 2), float32] {
  %479 = fn (%var_6098: Tensor[(14, 2, 2), float64]) -> Tensor[(14, 2, 2), float32] {
    %476 = cast(%var_6098, dtype="float64") /* ty=Tensor[(14, 2, 2), float64] */;
    %477 = log10(%476) /* ty=Tensor[(14, 2, 2), float64] */;
    %478 = cast(%477, dtype="float32") /* ty=Tensor[(14, 2, 2), float32] */;
    erf(%478) /* ty=Tensor[(14, 2, 2), float32] */
  };
  %479(%var_6105) /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_923(%var_922: Tensor[(1, 1, 2), float32]) -> (Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) {
  %486 = fn (%var_908: Tensor[(1, 1, 2), float32]) -> (Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) {
    %480 = cast(%var_908, dtype="float32") /* ty=Tensor[(1, 1, 2), float32] */;
    %481 = cast(meta[relay.Constant][26] /* ty=Tensor[(2340), float32] */, dtype="float32") /* ty=Tensor[(2340), float32] */;
    %482 = reshape(%481, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
    %483 = @func_424(%482) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(13, 15, 12), float64]) */;
    %484 = sigmoid(%480) /* ty=Tensor[(1, 1, 2), float32] */;
    %485 = %483.1;
    (%484, %485, meta[relay.Constant][26] /* ty=Tensor[(2340), float32] */)
  };
  %486(%var_922) /* ty=(Tensor[(1, 1, 2), float32], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */
}

def @func_7092() -> (Tensor[(8, 15, 9), float32],) {
  %487 = @func_5854() /* ty=Tensor[(8, 15, 9), float32] */;
  (%487,)
}

def @func_8479() -> Tensor[(8, 15, 9), float32] {
  %488 = fn () -> Tensor[(8, 15, 9), float32] {
    @func_6363() /* ty=Tensor[(8, 15, 9), float32] */
  };
  %488() /* ty=Tensor[(8, 15, 9), float32] */
}

def @func_4263() -> Tensor[(8, 15, 9), float64] {
  %494 = fn () -> Tensor[(8, 15, 9), float64] {
    %489 = @func_4182() /* ty=Tensor[(8, 15, 9), float64] */;
    %490 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
    %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
    %492 = cast(%489, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
    %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%492, %493) /* ty=Tensor[(8, 15, 9), float64] */
  };
  %494() /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_6363() -> Tensor[(8, 15, 9), float32] {
  %495 = @func_5485() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %495.0
}

def @func_7973(%var_7971: Tensor[(624), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), uint16], Tensor[(8, 15, 9), float64], Tensor[(12, 4, 13), float32], Tensor[(624), float32]) {
  @func_7970(%var_7971) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), uint16], Tensor[(8, 15, 9), float64], Tensor[(12, 4, 13), float32], Tensor[(624), float32]) */
}

def @func_3046(%var_3027: Tensor[(13, 9, 9), float32]) -> (Tensor[(13, 9, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) {
  %496 = cast(%var_3027, dtype="float32") /* ty=Tensor[(13, 9, 9), float32] */;
  %497 = cast(meta[relay.Constant][28] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %498 = reshape(%497, newshape=[10, 11, 5]) /* ty=Tensor[(10, 11, 5), uint32] */;
  %499 = sinh(%496) /* ty=Tensor[(13, 9, 9), float32] */;
  %500 = @func_1458(%498) /* ty=Tensor[(10, 11, 5), bool] */;
  (%499, %500, meta[relay.Constant][28] /* ty=Tensor[(550), uint32] */)
}

def @func_6926(%var_6924: Tensor[(7, 15, 10), float64], %var_6925: Tensor[(7, 15, 10), float64]) -> (Tensor[(7, 15, 10), float64], Tensor[(7, 15, 10), bool]) {
  %511 = fn (%var_6908: Tensor[(7, 15, 10), float64], %var_6916: Tensor[(7, 15, 10), float64]) -> (Tensor[(7, 15, 10), float64], Tensor[(7, 15, 10), bool]) {
    %501 = cast(%var_6908, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
    %502 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(7, 15, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %503 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
    %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %505 = cast(%var_6916, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
    %506 = shape_of(%var_6908, dtype="int32") /* ty=Tensor[(3), int32] */;
    %507 = cast(%var_6908, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %509 = floor_divide(%503, %504) /* ty=Tensor[(7, 15, 10), float64] */;
    %510 = equal(%507, %508) /* ty=Tensor[(7, 15, 10), bool] */;
    (%509, %510)
  };
  %511(%var_6924, %var_6925) /* ty=(Tensor[(7, 15, 10), float64], Tensor[(7, 15, 10), bool]) */
}

def @func_4955(%var_4954: uint32) -> (Tensor[(2340), float32], Tensor[(24), float32], uint32, Tensor[(2340), float32], Tensor[(12), int8], Tensor[(12), int8], Tensor[(8, 15, 9), float64], Tensor[(2), float32]) {
  %528 = fn (%var_4901: uint32) -> (Tensor[(2340), float32], Tensor[(24), float32], uint32, Tensor[(2340), float32], Tensor[(12), int8], Tensor[(12), int8], Tensor[(8, 15, 9), float64], Tensor[(2), float32]) {
    %512 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
    %513 = cast(%var_4901, dtype="uint32") /* ty=uint32 */;
    %514 = reshape(%513, newshape=[]) /* ty=uint32 */;
    %515 = @func_3616(%514) /* ty=(Tensor[(14, 10, 9), float64], Tensor[(24), float32], uint32, Tensor[(2912), uint32]) */;
    %516 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
    %517 = cast(meta[relay.Constant][30] /* ty=Tensor[(12), int8] */, dtype="int8") /* ty=Tensor[(12), int8] */;
    %518 = reshape(%517, newshape=[12]) /* ty=Tensor[(12), int8] */;
    %519 = @func_4836(%518) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2, 6, 2), int8], Tensor[(12), int8]) */;
    %520 = cast(meta[relay.Constant][31] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
    %521 = reshape(%520, newshape=[2, 1]) /* ty=Tensor[(2, 1), float32] */;
    %522 = @func_4406(%521) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(1, 180), float64], Tensor[(2, 1), float32]) */;
    %523 = %512.0;
    %524 = %515.1;
    %525 = %516.0;
    %526 = %519.2;
    %527 = %522.0;
    (%523, %524, %var_4901, %525, %526, meta[relay.Constant][30] /* ty=Tensor[(12), int8] */, %527, meta[relay.Constant][31] /* ty=Tensor[(2), float32] */)
  };
  %528(%var_4954) /* ty=(Tensor[(2340), float32], Tensor[(24), float32], uint32, Tensor[(2340), float32], Tensor[(12), int8], Tensor[(12), int8], Tensor[(8, 15, 9), float64], Tensor[(2), float32]) */
}

def @func_7481() -> (Tensor[(8, 15, 9), float64], Tensor[(9, 12, 9), bool], Tensor[(550), uint32]) {
  @func_7479() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(9, 12, 9), bool], Tensor[(550), uint32]) */
}

def @func_545(%var_533: Tensor[(1, 6, 2), int8]) -> (Tensor[(2, 6, 2), int8],) {
  %529 = cast(%var_533, dtype="int8") /* ty=Tensor[(1, 6, 2), int8] */;
  %530 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 6, 2), int8] */, dtype="int8") /* ty=Tensor[(2, 6, 2), int8] */;
  %531 = bitwise_xor(%529, %530) /* ty=Tensor[(2, 6, 2), int8] */;
  (%531,)
}

def @func_6348() -> (Tensor[(8, 15, 9), float64],) {
  %534 = fn () -> (Tensor[(8, 15, 9), float64],) {
    %532 = @func_5311() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) */;
    %533 = %532.0;
    (%533,)
  };
  %534() /* ty=(Tensor[(8, 15, 9), float64],) */
}

def @func_6759() -> (Tensor[(8, 15, 9), float64], Tensor[(273), uint16], Tensor[(39, 7), uint16]) {
  %535 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %536 = cast(meta[relay.Constant][33] /* ty=Tensor[(39, 7), uint16] */, dtype="uint16") /* ty=Tensor[(39, 7), uint16] */;
  %537 = reshape(%536, newshape=[273]) /* ty=Tensor[(273), uint16] */;
  %538 = @func_5968(%537) /* ty=(Tensor[(8, 15, 9), float32], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */;
  %539 = %535.0;
  %540 = %538.2;
  (%539, %540, meta[relay.Constant][33] /* ty=Tensor[(39, 7), uint16] */)
}

def @func_7929(%var_7920: Tensor[(1890), uint16]) -> (Tensor[(8, 15, 9), float64], Tensor[(1053), float32], Tensor[(1890), uint16]) {
  %541 = @func_6459() /* ty=(Tensor[(15, 16, 15), float64], Tensor[(8, 15, 9), float64]) */;
  %542 = cast(%var_7920, dtype="uint16") /* ty=Tensor[(1890), uint16] */;
  %543 = reshape(%542, newshape=[15, 9, 14]) /* ty=Tensor[(15, 9, 14), uint16] */;
  %544 = @func_7538(%543) /* ty=(Tensor[(15, 9, 14), uint16], Tensor[(550), uint32], Tensor[(1053), float32]) */;
  %545 = %541.1;
  %546 = %544.2;
  (%545, %546, %var_7920)
}

def @func_4694() -> Tensor[(8, 15, 9), float64] {
  @func_4182() /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_6621() -> Tensor[(55, 10), uint32] {
  @func_6619() /* ty=Tensor[(55, 10), uint32] */
}

def @func_5095() -> (Tensor[(8, 15, 9), float64],) {
  %547 = @func_4335() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(13, 15, 12), float64]) */;
  %548 = %547.0;
  (%548,)
}

def @func_4613(%var_4607: Tensor[(8, 15, 9), float64]) -> Tensor[(8, 15, 9), bool] {
  %549 = @func_4262() /* ty=Tensor[(8, 15, 9), float64] */;
  %550 = cast(%var_4607, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%552, %553) /* ty=Tensor[(8, 15, 9), bool] */
}

def @func_5449() -> (Tensor[(8, 15, 9), float64],) {
  %554 = @func_5435() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %555 = %554.0;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %557 = erf(%556) /* ty=Tensor[(8, 15, 9), float64] */;
  (%557,)
}

def @func_7932(%var_7930: Tensor[(1890), uint16]) -> (Tensor[(8, 15, 9), float64], Tensor[(1053), float32], Tensor[(1890), uint16]) {
  @func_7929(%var_7930) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(1053), float32], Tensor[(1890), uint16]) */
}

def @func_8436() -> (Tensor[(2340), float32], Tensor[(8, 15, 9), float32]) {
  %561 = fn () -> (Tensor[(2340), float32], Tensor[(8, 15, 9), float32]) {
    %558 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
    %559 = %558.0;
    %560 = @func_6363() /* ty=Tensor[(8, 15, 9), float32] */;
    (%559, %560)
  };
  %561() /* ty=(Tensor[(2340), float32], Tensor[(8, 15, 9), float32]) */
}

def @func_7717() -> (Tensor[(55, 10), uint32], Tensor[(8, 15, 9), float64]) {
  %566 = fn () -> (Tensor[(55, 10), uint32], Tensor[(8, 15, 9), float64]) {
    %562 = @func_6818() /* ty=(Tensor[(55, 10), uint32],) */;
    %563 = @func_5754() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %564 = %562.0;
    %565 = %563.0;
    (%564, %565)
  };
  %566() /* ty=(Tensor[(55, 10), uint32], Tensor[(8, 15, 9), float64]) */
}

def @func_8294(%var_8293: Tensor[(2), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(8, 15, 9), float64], Tensor[(550), uint32]) {
  %579 = fn (%var_8277: Tensor[(2), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(8, 15, 9), float64], Tensor[(550), uint32]) {
    %567 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %568 = cast(meta[relay.Constant][34] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %569 = cast(%var_8277, dtype="float32") /* ty=Tensor[(2), float32] */;
    %570 = reshape(%568, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), float64] */;
    %571 = reshape(%569, newshape=[2]) /* ty=Tensor[(2), float32] */;
    %572 = @func_1191(%570, %571) /* ty=(Tensor[(2340), float32], Tensor[(2), float32], Tensor[(6, 2, 15), float32]) */;
    %573 = @func_8213() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %574 = @func_7479() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(9, 12, 9), bool], Tensor[(550), uint32]) */;
    %575 = %567.0;
    %576 = %572.1;
    %577 = %573.0;
    %578 = %574.2;
    (%575, %576, meta[relay.Constant][34] /* ty=Tensor[(180), float64] */, %var_8277, %577, %578)
  };
  %579(%var_8293) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(8, 15, 9), float64], Tensor[(550), uint32]) */
}

def @main() -> (Tensor[(550), uint32], Tensor[(2, 13, 6), float64]) {
  %580 = @func_7481() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(9, 12, 9), bool], Tensor[(550), uint32]) */;
  %581 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 13, 6), float64] */, dtype="float64") /* ty=Tensor[(2, 13, 6), float64] */;
  %582 = cosh(%581) /* ty=Tensor[(2, 13, 6), float64] */;
  %583 = cast(%582, dtype="float64") /* ty=Tensor[(2, 13, 6), float64] */;
  %584 = %580.2;
  %585 = log(%583) /* ty=Tensor[(2, 13, 6), float64] */;
  (%584, %585)
}

def @func_4408(%var_4407: Tensor[(2, 1), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(1, 180), float64], Tensor[(2, 1), float32]) {
  %596 = fn (%var_4380: Tensor[(2, 1), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(1, 180), float64], Tensor[(2, 1), float32]) {
    %586 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %587 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %588 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 180), float64] */, dtype="float64") /* ty=Tensor[(1, 180), float64] */;
    %589 = cast(%var_4380, dtype="float32") /* ty=Tensor[(2, 1), float32] */;
    %590 = reshape(%588, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), float64] */;
    %591 = reshape(%589, newshape=[2]) /* ty=Tensor[(2), float32] */;
    %592 = @func_1191(%590, %591) /* ty=(Tensor[(2340), float32], Tensor[(2), float32], Tensor[(6, 2, 15), float32]) */;
    %593 = %586.0;
    %594 = %587.0;
    %595 = %592.1;
    (%593, %594, %595, meta[relay.Constant][36] /* ty=Tensor[(1, 180), float64] */, %var_4380)
  };
  %596(%var_4407) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(1, 180), float64], Tensor[(2, 1), float32]) */
}

def @func_8387() -> (Tensor[(2340), float32], Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) {
  %597 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
  %598 = @func_8213() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %599 = @func_7716() /* ty=(Tensor[(55, 10), uint32], Tensor[(8, 15, 9), float64]) */;
  %600 = %597.0;
  %601 = %598.0;
  %602 = %599.1;
  (%600, %601, %602)
}

def @func_9377() -> (Tensor[(2340), float32], Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), int64]) {
  %603 = @func_6932() /* ty=(Tensor[(2340), float32],) */;
  %604 = @func_4262() /* ty=Tensor[(8, 15, 9), float64] */;
  %605 = cast(%604, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %606 = reshape(%605, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float64] */;
  %607 = %603.0;
  %608 = @func_5382(%606) /* ty=Tensor[(8, 15, 9), int64] */;
  (%607, %604, %608)
}

def @func_5451() -> (Tensor[(8, 15, 9), float64],) {
  @func_5449() /* ty=(Tensor[(8, 15, 9), float64],) */
}

def @func_7094() -> (Tensor[(8, 15, 9), float32],) {
  @func_7092() /* ty=(Tensor[(8, 15, 9), float32],) */
}

def @func_8554(%var_8537: Tensor[(15, 16, 15), float64], %var_8546: Tensor[(450, 2), float64]) -> (Tensor[(15, 16, 15), int32], Tensor[(273), uint16], Tensor[(450, 2), float64], Tensor[(273), float64]) {
  %609 = @func_7896() /* ty=(Tensor[(15, 16, 15), float64],) */;
  %610 = %609.0;
  %611 = cast(%var_8537, dtype="int32") /* ty=Tensor[(15, 16, 15), int32] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="int32") /* ty=Tensor[(15, 16, 15), int32] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %615 = cast(%var_8546, dtype="float64") /* ty=Tensor[(450, 2), float64] */;
  %616 = cast(%var_8546, dtype="float64") /* ty=Tensor[(450, 2), float64] */;
  %617 = cast(meta[relay.Constant][37] /* ty=Tensor[(273), uint16] */, dtype="uint16") /* ty=Tensor[(273), uint16] */;
  %618 = reshape(%615, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float64] */;
  %619 = reshape(%616, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float64] */;
  %620 = reshape(%617, newshape=[273]) /* ty=Tensor[(273), uint16] */;
  %621 = @func_8090(%618, %619, %620) /* ty=(Tensor[(9, 10, 10), float64], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */;
  %622 = cast(meta[relay.Constant][37] /* ty=Tensor[(273), uint16] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %623 = logical_xor(%613, %614) /* ty=Tensor[(15, 16, 15), int32] */;
  %624 = %621.2;
  %625 = log10(%622) /* ty=Tensor[(273), float64] */;
  (%623, %624, %var_8546, %625)
}

def @func_233(%var_231: Tensor[(16, 6, 3), float32], %var_232: Tensor[(16, 6, 3), float32]) -> Tensor[(16, 6, 3), float32] {
  @func_229(%var_231, %var_232) /* ty=Tensor[(16, 6, 3), float32] */
}

def @func_6006(%var_6004: Tensor[(8, 15, 9), float64]) -> Tensor[(8, 15, 9), bool] {
  @func_6003(%var_6004) /* ty=Tensor[(8, 15, 9), bool] */
}

def @func_5807() -> Tensor[(8, 15, 9), float64] {
  @func_5805() /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_7881() -> Tensor[(8, 15, 9), float64] {
  @func_7879() /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_5244() -> (Tensor[(10, 11, 5), bool], Tensor[(55, 10), uint32], Tensor[(15, 16, 15), float64], Tensor[(15, 16, 15), float64]) {
  %626 = cast(meta[relay.Constant][38] /* ty=Tensor[(55, 10), uint32] */, dtype="uint32") /* ty=Tensor[(55, 10), uint32] */;
  %627 = reshape(%626, newshape=[10, 11, 5]) /* ty=Tensor[(10, 11, 5), uint32] */;
  %628 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 15), float64] */;
  %629 = asinh(%628) /* ty=Tensor[(15, 16, 15), float64] */;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(15, 16, 15), float64] */;
  %631 = cast(%629, dtype="float64") /* ty=Tensor[(15, 16, 15), float64] */;
  %632 = @func_1458(%627) /* ty=Tensor[(10, 11, 5), bool] */;
  %633 = sin(%630) /* ty=Tensor[(15, 16, 15), float64] */;
  %634 = atanh(%631) /* ty=Tensor[(15, 16, 15), float64] */;
  (%632, meta[relay.Constant][38] /* ty=Tensor[(55, 10), uint32] */, %633, %634)
}

def @func_7479() -> (Tensor[(8, 15, 9), float64], Tensor[(9, 12, 9), bool], Tensor[(550), uint32]) {
  %635 = @func_5095() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %636 = cast(meta[relay.Constant][40] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %637 = reshape(%636, newshape=[550]) /* ty=Tensor[(550), uint32] */;
  %638 = @func_6656(%637) /* ty=(Tensor[(9, 12, 9), bool], Tensor[(2340), float32], Tensor[(35), uint32], Tensor[(550), uint32], Tensor[(286), uint64]) */;
  %639 = %635.0;
  %640 = %638.0;
  (%639, %640, meta[relay.Constant][40] /* ty=Tensor[(550), uint32] */)
}

def @func_7541(%var_7539: Tensor[(15, 9, 14), uint16]) -> (Tensor[(15, 9, 14), uint16], Tensor[(550), uint32], Tensor[(1053), float32]) {
  @func_7538(%var_7539) /* ty=(Tensor[(15, 9, 14), uint16], Tensor[(550), uint32], Tensor[(1053), float32]) */
}

def @func_7232() -> (Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) {
  %641 = @func_5915() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %642 = %641.0;
  %643 = cast(%642, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  %644 = reshape(%643, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float32] */;
  %645 = @func_4497(%644) /* ty=Tensor[(8, 15, 9), uint16] */;
  %646 = cast(%645, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %647 = log10(%646) /* ty=Tensor[(8, 15, 9), float64] */;
  (%642, %647)
}

def @func_7771(%var_7769: Tensor[(7, 13, 1), float32]) -> Tensor[(7, 13, ?), uint16] {
  @func_7768(%var_7769) /* ty=Tensor[(7, 13, ?), uint16] */
}

def @func_3616(%var_3613: uint32) -> (Tensor[(14, 10, 9), float64], Tensor[(24), float32], uint32, Tensor[(2912), uint32]) {
  %648 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 9), float64] */;
  %649 = cast(%var_3613, dtype="uint32") /* ty=uint32 */;
  %650 = cast(meta[relay.Constant][42] /* ty=Tensor[(2912), uint32] */, dtype="uint32") /* ty=Tensor[(2912), uint32] */;
  %651 = reshape(%649, newshape=[]) /* ty=uint32 */;
  %652 = reshape(%650, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), uint32] */;
  %653 = @func_2870(%651, %652) /* ty=(Tensor[(13, 14, 16), uint32], Tensor[(2, ?, 12), float32], Tensor[(24), float32]) */;
  %654 = rsqrt(%648) /* ty=Tensor[(14, 10, 9), float64] */;
  %655 = %653.2;
  (%654, %655, %var_3613, meta[relay.Constant][42] /* ty=Tensor[(2912), uint32] */)
}

def @func_3619(%var_3617: uint32) -> (Tensor[(14, 10, 9), float64], Tensor[(24), float32], uint32, Tensor[(2912), uint32]) {
  @func_3616(%var_3617) /* ty=(Tensor[(14, 10, 9), float64], Tensor[(24), float32], uint32, Tensor[(2912), uint32]) */
}

def @func_5384(%var_5383: Tensor[(8, 15, 9), float64]) -> Tensor[(8, 15, 9), int64] {
  %661 = fn (%var_5358: Tensor[(8, 15, 9), float64]) -> Tensor[(8, 15, 9), int64] {
    %656 = @func_4262() /* ty=Tensor[(8, 15, 9), float64] */;
    %657 = cast(%var_5358, dtype="int64") /* ty=Tensor[(8, 15, 9), int64] */;
    %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
    %659 = cast(%656, dtype="int64") /* ty=Tensor[(8, 15, 9), int64] */;
    %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_and(%659, %660) /* ty=Tensor[(8, 15, 9), int64] */
  };
  %661(%var_5383) /* ty=Tensor[(8, 15, 9), int64] */
}

def @func_8706(%var_8664: int64, %var_8665: Tensor[(6, 16, 1), int64], %var_8676: Tensor[(1080), float64]) -> (Tensor[(55, 10), uint32], Tensor[(1080), float64], Tensor[(2, ?, 12), float32], uint32, Tensor[(6, 16, 24), float32]) {
  %662 = cast(%var_8676, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %663 = reshape(%662, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float64] */;
  %664 = @func_7443(%663) /* ty=(Tensor[(8, 15, 9), bool], Tensor[(55, 10), uint32]) */;
  %665 = cast(meta[relay.Constant][43] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %666 = reshape(%665, newshape=[2, 1, 12]) /* ty=Tensor[(2, 1, 12), float32] */;
  %667 = cast(%var_8664, dtype="uint32") /* ty=uint32 */;
  %668 = reshape(%667, newshape=[]) /* ty=uint32 */;
  %669 = @func_3616(%668) /* ty=(Tensor[(14, 10, 9), float64], Tensor[(24), float32], uint32, Tensor[(2912), uint32]) */;
  %670 = cast(%var_8664, dtype="int64") /* ty=int64 */;
  %671 = cast(%var_8665, dtype="int64") /* ty=Tensor[(6, 16, 1), int64] */;
  %672 = left_shift(%670, %671) /* ty=Tensor[(6, 16, 1), int64] */;
  %673 = cast(%672, dtype="float32") /* ty=Tensor[(6, 16, 1), float32] */;
  %674 = acosh(%673) /* ty=Tensor[(6, 16, 1), float32] */;
  %675 = cast(%674, dtype="float32") /* ty=Tensor[(6, 16, 1), float32] */;
  %676 = cast(meta[relay.Constant][43] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %677 = %664.1;
  %678 = @func_1077(%666) /* ty=Tensor[(2, ?, 12), float32] */;
  %679 = %669.2;
  %680 = add(%675, %676) /* ty=Tensor[(6, 16, 24), float32] */;
  (%677, %var_8676, %678, %679, %680)
}

def @func_9225() -> (Tensor[(2340), float32], Tensor[(8, 15, 9), uint16], Tensor[(1080), float32], Tensor[(2340), float32]) {
  %688 = fn () -> (Tensor[(2340), float32], Tensor[(8, 15, 9), uint16], Tensor[(1080), float32], Tensor[(2340), float32]) {
    %681 = @func_9204() /* ty=(Tensor[(2340), float32],) */;
    %682 = cast(meta[relay.Constant][44] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %683 = reshape(%682, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float32] */;
    %684 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
    %685 = %681.0;
    %686 = @func_4497(%683) /* ty=Tensor[(8, 15, 9), uint16] */;
    %687 = %684.0;
    (%685, %686, meta[relay.Constant][44] /* ty=Tensor[(1080), float32] */, %687)
  };
  %688() /* ty=(Tensor[(2340), float32], Tensor[(8, 15, 9), uint16], Tensor[(1080), float32], Tensor[(2340), float32]) */
}

def @func_6342() -> (Tensor[(8, 15, 9), float32],) {
  @func_6340() /* ty=(Tensor[(8, 15, 9), float32],) */
}

def @func_6934() -> (Tensor[(2340), float32],) {
  @func_6932() /* ty=(Tensor[(2340), float32],) */
}

def @func_3897(%var_3893: Tensor[(1, 11, 15), bool], %var_3894: Tensor[(15, 11, 15), bool], %var_3895: Tensor[(288), float32], %var_3896: Tensor[(15, 11, 15), float64]) -> (Tensor[(12, 4, 13), float32], Tensor[(2, 312), float32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(15, 11, 15), int16], Tensor[(15, 11, 15), float32]) {
  @func_3891(%var_3893, %var_3894, %var_3895, %var_3896) /* ty=(Tensor[(12, 4, 13), float32], Tensor[(2, 312), float32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(15, 11, 15), int16], Tensor[(15, 11, 15), float32]) */
}

def @func_8965() -> Tensor[(8, 15, 9), float64] {
  @func_4262() /* ty=Tensor[(8, 15, 9), float64] */
}

def @func_6658(%var_6657: Tensor[(550), uint32]) -> (Tensor[(9, 12, 9), bool], Tensor[(2340), float32], Tensor[(35), uint32], Tensor[(550), uint32], Tensor[(286), uint64]) {
  %702 = fn (%var_6650: Tensor[(550), uint32]) -> (Tensor[(9, 12, 9), bool], Tensor[(2340), float32], Tensor[(35), uint32], Tensor[(550), uint32], Tensor[(286), uint64]) {
    %689 = cast(meta[relay.Constant][46] /* ty=Tensor[(9, 12, 9), uint64] */, dtype="bool") /* ty=Tensor[(9, 12, 9), bool] */;
    %690 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(9, 12, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %691 = cast(meta[relay.Constant][45] /* ty=Tensor[(9, 12, 9), uint64] */, dtype="bool") /* ty=Tensor[(9, 12, 9), bool] */;
    %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %693 = cast(meta[relay.Constant][47] /* ty=Tensor[(35), uint32] */, dtype="uint32") /* ty=Tensor[(35), uint32] */;
    %694 = cast(%var_6650, dtype="uint32") /* ty=Tensor[(550), uint32] */;
    %695 = cast(meta[relay.Constant][48] /* ty=Tensor[(286), uint64] */, dtype="uint64") /* ty=Tensor[(286), uint64] */;
    %696 = reshape(%693, newshape=[1, 5, 7]) /* ty=Tensor[(1, 5, 7), uint32] */;
    %697 = reshape(%694, newshape=[550]) /* ty=Tensor[(550), uint32] */;
    %698 = reshape(%695, newshape=[286]) /* ty=Tensor[(286), uint64] */;
    %699 = @func_1559(%696, %697, %698) /* ty=(Tensor[(?, 5, 7), uint64], Tensor[(10, 11, 5), bool], Tensor[(10, 11, 5), float32], Tensor[(13, 2, 11), uint64], Tensor[(286), uint64], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
    %700 = less_equal(%691, %692) /* ty=Tensor[(9, 12, 9), bool] */;
    %701 = %699.6;
    (%700, %701, meta[relay.Constant][47] /* ty=Tensor[(35), uint32] */, %var_6650, meta[relay.Constant][48] /* ty=Tensor[(286), uint64] */)
  };
  %702(%var_6657) /* ty=(Tensor[(9, 12, 9), bool], Tensor[(2340), float32], Tensor[(35), uint32], Tensor[(550), uint32], Tensor[(286), uint64]) */
}

def @func_8389() -> (Tensor[(2340), float32], Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) {
  @func_8387() /* ty=(Tensor[(2340), float32], Tensor[(8, 15, 9), float64], Tensor[(8, 15, 9), float64]) */
}

def @func_6684() -> (Tensor[(8, 15, 9), float64],) {
  %703 = @func_4219() /* ty=(Tensor[(8, 15, 9), float64],) */;
  %704 = %703.0;
  (%704,)
}

def @func_5486() -> (Tensor[(8, 15, 9), float32],) {
  %707 = fn () -> (Tensor[(8, 15, 9), float32],) {
    %705 = @func_5435() /* ty=(Tensor[(8, 15, 9), float32],) */;
    %706 = %705.0;
    (%706,)
  };
  %707() /* ty=(Tensor[(8, 15, 9), float32],) */
}

def @func_5097() -> (Tensor[(8, 15, 9), float64],) {
  @func_5095() /* ty=(Tensor[(8, 15, 9), float64],) */
}

def @func_1564(%var_1561: Tensor[(1, 5, 7), uint32], %var_1562: Tensor[(550), uint32], %var_1563: Tensor[(286), uint64]) -> (Tensor[(?, 5, 7), uint64], Tensor[(10, 11, 5), bool], Tensor[(10, 11, 5), float32], Tensor[(13, 2, 11), uint64], Tensor[(286), uint64], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) {
  @func_1559(%var_1561, %var_1562, %var_1563) /* ty=(Tensor[(?, 5, 7), uint64], Tensor[(10, 11, 5), bool], Tensor[(10, 11, 5), float32], Tensor[(13, 2, 11), uint64], Tensor[(286), uint64], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */
}

def @func_1195(%var_1193: Tensor[(6, 2, 15), float64], %var_1194: Tensor[(2), float32]) -> (Tensor[(2340), float32], Tensor[(2), float32], Tensor[(6, 2, 15), float32]) {
  @func_1191(%var_1193, %var_1194) /* ty=(Tensor[(2340), float32], Tensor[(2), float32], Tensor[(6, 2, 15), float32]) */
}

def @func_8412(%var_8394: Tensor[(7, 14, 10), float64], %var_8402: Tensor[(1890), uint16]) -> (Tensor[(7, 14, 10), float64], Tensor[(8, 15, 9), float64], Tensor[(1890), uint16], Tensor[(55, 10), uint32], uint64) {
  %708 = cast(%var_8394, dtype="float64") /* ty=Tensor[(7, 14, 10), float64] */;
  %709 = cast(%var_8402, dtype="uint16") /* ty=Tensor[(1890), uint16] */;
  %710 = reshape(%709, newshape=[1890]) /* ty=Tensor[(1890), uint16] */;
  %711 = @func_7929(%710) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(1053), float32], Tensor[(1890), uint16]) */;
  %712 = cast(meta[relay.Constant][49] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %713 = reshape(%712, newshape=[]) /* ty=uint64 */;
  %714 = @func_7065(%713) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2), float32], Tensor[(2340), float64], Tensor[(55, 10), uint32], Tensor[(5, 7, 12), int16], uint64, Tensor[(286), uint64]) */;
  %715 = cos(%708) /* ty=Tensor[(7, 14, 10), float64] */;
  %716 = %711.0;
  %717 = %714.3;
  (%715, %716, %var_8402, %717, meta[relay.Constant][49] /* ty=uint64 */)
}

def @func_6737(%var_6735: Tensor[(1053), float32], %var_6736: Tensor[(10, 63), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(630), float32], Tensor[(1053), float32], Tensor[(10, 63), float32]) {
  %732 = fn (%var_6724: Tensor[(1053), float32], %var_6725: Tensor[(10, 63), float32]) -> (Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(630), float32], Tensor[(1053), float32], Tensor[(10, 63), float32]) {
    %718 = @func_6684() /* ty=(Tensor[(8, 15, 9), float64],) */;
    %719 = @func_4866() /* ty=(Tensor[(2340), float32],) */;
    %720 = cast(%var_6724, dtype="float32") /* ty=Tensor[(1053), float32] */;
    %721 = cast(%var_6724, dtype="float32") /* ty=Tensor[(1053), float32] */;
    %722 = cast(%var_6725, dtype="float32") /* ty=Tensor[(10, 63), float32] */;
    %723 = %719.0;
    %724 = cast(%723, dtype="float32") /* ty=Tensor[(2340), float32] */;
    %725 = reshape(%720, newshape=[1053]) /* ty=Tensor[(1053), float32] */;
    %726 = reshape(%721, newshape=[1053]) /* ty=Tensor[(1053), float32] */;
    %727 = reshape(%722, newshape=[630]) /* ty=Tensor[(630), float32] */;
    %728 = reshape(%724, newshape=[2340]) /* ty=Tensor[(2340), float32] */;
    %729 = @func_4802(%725, %726, %727, %728) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(10, 11, 5), bool], Tensor[(1053), float64], Tensor[(8, 15, 9), bool], Tensor[(6, 15, 7), bool], Tensor[(630), float32], Tensor[(2340), float32], Tensor[(1, 180), float64], Tensor[(2), float32], Tensor[(?, 624), bool]) */;
    %730 = %718.0;
    %731 = %729.5;
    (%730, %723, %731, %var_6724, %var_6725)
  };
  %732(%var_6735, %var_6736) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(630), float32], Tensor[(1053), float32], Tensor[(10, 63), float32]) */
}

def @func_1880(%var_1877: Tensor[(3, 12), float32], %var_1878: Tensor[(13, 22), uint64], %var_1879: Tensor[(273), uint16]) -> (Tensor[(3, 12), float32], Tensor[(16, 6, 3), float32], Tensor[(35), uint32], Tensor[(550), uint32], Tensor[(13, 22), uint64], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16], Tensor[(2, ?, 12), float32], Tensor[(6, 4), float32], Tensor[(286), float64], Tensor[(?, 288), uint32]) {
  %763 = fn (%var_1796: Tensor[(3, 12), float32], %var_1812: Tensor[(13, 22), uint64], %var_1815: Tensor[(273), uint16]) -> (Tensor[(3, 12), float32], Tensor[(16, 6, 3), float32], Tensor[(35), uint32], Tensor[(550), uint32], Tensor[(13, 22), uint64], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16], Tensor[(2, ?, 12), float32], Tensor[(6, 4), float32], Tensor[(286), float64], Tensor[(?, 288), uint32]) {
    %733 = cast(%var_1796, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
    %734 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 288), float32] */, dtype="float32") /* ty=Tensor[(1, 288), float32] */;
    %735 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 288), float32] */, dtype="float32") /* ty=Tensor[(1, 288), float32] */;
    %736 = reshape(%734, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
    %737 = reshape(%735, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
    %738 = cast(%var_1815, dtype="uint16") /* ty=Tensor[(273), uint16] */;
    %739 = reshape(%738, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), uint16] */;
    %740 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 4), float32] */;
    %741 = reshape(%740, newshape=[2, 1, 12]) /* ty=Tensor[(2, 1, 12), float32] */;
    %742 = cast(meta[relay.Constant][51] /* ty=Tensor[(35), uint32] */, dtype="uint32") /* ty=Tensor[(35), uint32] */;
    %743 = cast(meta[relay.Constant][52] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
    %744 = cast(%var_1812, dtype="uint64") /* ty=Tensor[(13, 22), uint64] */;
    %745 = reshape(%742, newshape=[1, 5, 7]) /* ty=Tensor[(1, 5, 7), uint32] */;
    %746 = reshape(%743, newshape=[550]) /* ty=Tensor[(550), uint32] */;
    %747 = reshape(%744, newshape=[286]) /* ty=Tensor[(286), uint64] */;
    %748 = @func_1559(%745, %746, %747) /* ty=(Tensor[(?, 5, 7), uint64], Tensor[(10, 11, 5), bool], Tensor[(10, 11, 5), float32], Tensor[(13, 2, 11), uint64], Tensor[(286), uint64], Tensor[(13, 15, 12), float64], Tensor[(2340), float32]) */;
    %749 = %748.4;
    %750 = cast(%749, dtype="float64") /* ty=Tensor[(286), float64] */;
    %751 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 288), float32] */, dtype="float64") /* ty=Tensor[(1, 288), float64] */;
    %752 = asin(%751) /* ty=Tensor[(1, 288), float64] */;
    %753 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 288), float32] */, dtype="uint32") /* ty=Tensor[(1, 288), uint32] */;
    %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(2), int32] */;
    %755 = cast(%752, dtype="uint32") /* ty=Tensor[(1, 288), uint32] */;
    %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %757 = acosh(%733) /* ty=Tensor[(3, 12), float32] */;
    %758 = @func_229(%736, %737) /* ty=Tensor[(16, 6, 3), float32] */;
    %759 = @func_1731(%739) /* ty=Tensor[(3, 7, 13), uint16] */;
    %760 = @func_1077(%741) /* ty=Tensor[(2, ?, 12), float32] */;
    %761 = cosh(%750) /* ty=Tensor[(286), float64] */;
    %762 = bitwise_xor(%755, %756) /* ty=Tensor[(?, 288), uint32] */;
    (%757, %758, meta[relay.Constant][51] /* ty=Tensor[(35), uint32] */, meta[relay.Constant][52] /* ty=Tensor[(550), uint32] */, %var_1812, %759, %var_1815, %760, meta[relay.Constant][53] /* ty=Tensor[(6, 4), float32] */, %761, %762)
  };
  %763(%var_1877, %var_1878, %var_1879) /* ty=(Tensor[(3, 12), float32], Tensor[(16, 6, 3), float32], Tensor[(35), uint32], Tensor[(550), uint32], Tensor[(13, 22), uint64], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16], Tensor[(2, ?, 12), float32], Tensor[(6, 4), float32], Tensor[(286), float64], Tensor[(?, 288), uint32]) */
}

def @func_4336() -> (Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(13, 15, 12), float64]) {
  %775 = fn () -> (Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(13, 15, 12), float64]) {
    %764 = cast(meta[relay.Constant][54] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %765 = cast(meta[relay.Constant][55] /* ty=Tensor[(2), float32] */, dtype="float32") /* ty=Tensor[(2), float32] */;
    %766 = reshape(%764, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), float64] */;
    %767 = reshape(%765, newshape=[2]) /* ty=Tensor[(2), float32] */;
    %768 = @func_1191(%766, %767) /* ty=(Tensor[(2340), float32], Tensor[(2), float32], Tensor[(6, 2, 15), float32]) */;
    %769 = %768.0;
    %770 = cast(%769, dtype="float32") /* ty=Tensor[(2340), float32] */;
    %771 = reshape(%770, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
    %772 = @func_424(%771) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(13, 15, 12), float64]) */;
    %773 = @func_4262() /* ty=Tensor[(8, 15, 9), float64] */;
    %774 = %772.1;
    (%773, %769, meta[relay.Constant][54] /* ty=Tensor[(180), float64] */, meta[relay.Constant][55] /* ty=Tensor[(2), float32] */, %774)
  };
  %775() /* ty=(Tensor[(8, 15, 9), float64], Tensor[(2340), float32], Tensor[(180), float64], Tensor[(2), float32], Tensor[(13, 15, 12), float64]) */
}

def @func_7669(%var_7668: Tensor[(55, 10), float64]) -> (Tensor[(55, 10), bool], Tensor[(55, 10), uint16], Tensor[(8, 15, 9), float64]) {
  %790 = fn (%var_7647: Tensor[(55, 10), float64]) -> (Tensor[(55, 10), bool], Tensor[(55, 10), uint16], Tensor[(8, 15, 9), float64]) {
    %776 = @func_6619() /* ty=Tensor[(55, 10), uint32] */;
    %777 = cast(meta[relay.Constant][56] /* ty=Tensor[(55, 10), uint32] */, dtype="bool") /* ty=Tensor[(55, 10), bool] */;
    %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(2), int32] */;
    %779 = cast(%776, dtype="bool") /* ty=Tensor[(55, 10), bool] */;
    %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %781 = cast(meta[relay.Constant][56] /* ty=Tensor[(55, 10), uint32] */, dtype="float64") /* ty=Tensor[(55, 10), float64] */;
    %782 = tan(%781) /* ty=Tensor[(55, 10), float64] */;
    %783 = cast(%var_7647, dtype="uint16") /* ty=Tensor[(55, 10), uint16] */;
    %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(2), int32] */;
    %785 = cast(%782, dtype="uint16") /* ty=Tensor[(55, 10), uint16] */;
    %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %787 = logical_and(%779, %780) /* ty=Tensor[(55, 10), bool] */;
    %788 = add(%785, %786) /* ty=Tensor[(55, 10), uint16] */;
    %789 = @func_4262() /* ty=Tensor[(8, 15, 9), float64] */;
    (%787, %788, %789)
  };
  %790(%var_7668) /* ty=(Tensor[(55, 10), bool], Tensor[(55, 10), uint16], Tensor[(8, 15, 9), float64]) */
}

def @func_5971(%var_5969: Tensor[(273), uint16]) -> (Tensor[(8, 15, 9), float32], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) {
  @func_5968(%var_5969) /* ty=(Tensor[(8, 15, 9), float32], Tensor[(3, 7, 13), uint16], Tensor[(273), uint16]) */
}

def @func_5072(%var_5067: uint64, %var_5068: Tensor[(286), uint64]) -> (Tensor[(5, 7, 12), int16], Tensor[(5, 7, 12), float64], Tensor[(5, 7, 12), float32], Tensor[(13, 2, 11), uint64], uint64, Tensor[(286), uint64]) {
  %791 = cast(meta[relay.Constant][58] /* ty=Tensor[(5, 7, 12), int16] */, dtype="int16") /* ty=Tensor[(5, 7, 12), int16] */;
  %792 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(5, 7, 12), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(meta[relay.Constant][57] /* ty=Tensor[(5, 7, 12), int16] */, dtype="int16") /* ty=Tensor[(5, 7, 12), int16] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %795 = cast(meta[relay.Constant][58] /* ty=Tensor[(5, 7, 12), int16] */, dtype="float64") /* ty=Tensor[(5, 7, 12), float64] */;
  %796 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(5, 7, 12), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(meta[relay.Constant][57] /* ty=Tensor[(5, 7, 12), int16] */, dtype="float64") /* ty=Tensor[(5, 7, 12), float64] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %799 = cast(meta[relay.Constant][58] /* ty=Tensor[(5, 7, 12), int16] */, dtype="float32") /* ty=Tensor[(5, 7, 12), float32] */;
  %800 = cast(%var_5067, dtype="uint64") /* ty=uint64 */;
  %801 = cast(%var_5068, dtype="uint64") /* ty=Tensor[(286), uint64] */;
  %802 = reshape(%800, newshape=[]) /* ty=uint64 */;
  %803 = reshape(%801, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), uint64] */;
  %804 = @func_1487(%802, %803) /* ty=(Tensor[(13, 2, 11), uint64],) */;
  %805 = minimum(%793, %794) /* ty=Tensor[(5, 7, 12), int16] */;
  %806 = subtract(%797, %798) /* ty=Tensor[(5, 7, 12), float64] */;
  %807 = asinh(%799) /* ty=Tensor[(5, 7, 12), float32] */;
  %808 = %804.0;
  (%805, %806, %807, %808, %var_5067, %var_5068)
}

def @func_5854() -> Tensor[(8, 15, 9), float32] {
  %809 = @func_5435() /* ty=(Tensor[(8, 15, 9), float32],) */;
  %810 = %809.0;
  %811 = cast(%810, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  cosh(%811) /* ty=Tensor[(8, 15, 9), float32] */
}

def @func_6003(%var_5995: Tensor[(8, 15, 9), float64]) -> Tensor[(8, 15, 9), bool] {
  %812 = @func_4694() /* ty=Tensor[(8, 15, 9), float64] */;
  %813 = cast(%var_5995, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %815 = cast(%812, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%815, %816) /* ty=Tensor[(8, 15, 9), bool] */
}

def @func_8711(%var_8708: int64, %var_8709: Tensor[(6, 16, 1), int64], %var_8710: Tensor[(1080), float64]) -> (Tensor[(55, 10), uint32], Tensor[(1080), float64], Tensor[(2, ?, 12), float32], uint32, Tensor[(6, 16, 24), float32]) {
  @func_8706(%var_8708, %var_8709, %var_8710) /* ty=(Tensor[(55, 10), uint32], Tensor[(1080), float64], Tensor[(2, ?, 12), float32], uint32, Tensor[(6, 16, 24), float32]) */
}

def @func_4616(%var_4614: Tensor[(8, 15, 9), float64]) -> Tensor[(8, 15, 9), bool] {
  @func_4613(%var_4614) /* ty=Tensor[(8, 15, 9), bool] */
}

def @func_8069(%var_8068: Tensor[(6, 5, 16), float32]) -> (Tensor[(6, 5, 16), float32],) {
  %819 = fn (%var_8038: Tensor[(6, 5, 16), float32]) -> (Tensor[(6, 5, 16), float32],) {
    %817 = cast(%var_8038, dtype="float32") /* ty=Tensor[(6, 5, 16), float32] */;
    %818 = asin(%817) /* ty=Tensor[(6, 5, 16), float32] */;
    (%818,)
  };
  %819(%var_8068) /* ty=(Tensor[(6, 5, 16), float32],) */
}

def @func_4656(%var_4655: Tensor[(8, 10, 14), float64]) -> (Tensor[(8, 10, 14), float64], Tensor[(12, 4, 13), float32], Tensor[(624), float32]) {
  %829 = fn (%var_4639: Tensor[(8, 10, 14), float64]) -> (Tensor[(8, 10, 14), float64], Tensor[(12, 4, 13), float32], Tensor[(624), float32]) {
    %820 = cast(%var_4639, dtype="float64") /* ty=Tensor[(8, 10, 14), float64] */;
    %821 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(8, 10, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %822 = cast(meta[relay.Constant][59] /* ty=Tensor[(8, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 14), float64] */;
    %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %824 = cast(meta[relay.Constant][60] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
    %825 = reshape(%824, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), float32] */;
    %826 = @func_1988(%825) /* ty=(Tensor[(12, 4, 13), float32],) */;
    %827 = add(%822, %823) /* ty=Tensor[(8, 10, 14), float64] */;
    %828 = %826.0;
    (%827, %828, meta[relay.Constant][60] /* ty=Tensor[(624), float32] */)
  };
  %829(%var_4655) /* ty=(Tensor[(8, 10, 14), float64], Tensor[(12, 4, 13), float32], Tensor[(624), float32]) */
}

def @func_7290(%var_7287: Tensor[(1120), float64], %var_7288: Tensor[(8, 15, 9), float32], %var_7289: Tensor[(624), float32]) -> (Tensor[(1120), float64], Tensor[(8, 15, 9), float64], Tensor[(624), float64]) {
  @func_7285(%var_7287, %var_7288, %var_7289) /* ty=(Tensor[(1120), float64], Tensor[(8, 15, 9), float64], Tensor[(624), float64]) */
}

def @func_7538(%var_7527: Tensor[(15, 9, 14), uint16]) -> (Tensor[(15, 9, 14), uint16], Tensor[(550), uint32], Tensor[(1053), float32]) {
  %830 = cast(%var_7527, dtype="uint16") /* ty=Tensor[(15, 9, 14), uint16] */;
  %831 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(15, 9, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(meta[relay.Constant][61] /* ty=Tensor[(15, 9, 14), uint16] */, dtype="uint16") /* ty=Tensor[(15, 9, 14), uint16] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %834 = cast(meta[relay.Constant][62] /* ty=Tensor[(1053), float32] */, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %835 = reshape(%834, newshape=[13, 9, 9]) /* ty=Tensor[(13, 9, 9), float32] */;
  %836 = @func_3046(%835) /* ty=(Tensor[(13, 9, 9), float32], Tensor[(10, 11, 5), bool], Tensor[(550), uint32]) */;
  %837 = multiply(%832, %833) /* ty=Tensor[(15, 9, 14), uint16] */;
  %838 = %836.2;
  (%837, %838, meta[relay.Constant][62] /* ty=Tensor[(1053), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen301/build/output.py", line 2291, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:05:00] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

