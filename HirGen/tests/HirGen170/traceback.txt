==========mod==========
#[version = "0.0.5"]
def @func_4090(%var_4034: Tensor[(2112), float32], %var_4047: Tensor[(156), float64]) -> (Tensor[(480), float64], Tensor[(5, ?, 2), bool], Tensor[(1, 10), uint64], Tensor[(12), float64], Tensor[(2112), float32], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(12, 1, 14), float64], Tensor[(2352), float64], Tensor[(480), float64], Tensor[(384), float32], Tensor[(480), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 10), uint64] */, dtype="uint64") /* ty=Tensor[(1, 10), uint64] */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %2 = cast(%var_4034, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %3 = reshape(%0, newshape=[5, 1, 2]) /* ty=Tensor[(5, 1, 2), uint64] */;
  %4 = reshape(%1, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %5 = reshape(%2, newshape=[132, 16]) /* ty=Tensor[(132, 16), float32] */;
  %6 = @func_1507(%3, %4, %5) /* ty=(Tensor[(16, 10, 3), float64], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(12), float64], Tensor[(5, ?, 2), bool], Tensor[(13, 12, 1), float64], Tensor[(39, 4), bool], Tensor[(4, 11, 3), float32], Tensor[(132, 16), bool], Tensor[(39, 4), float32]) */;
  %7 = cast(%var_4047, dtype="float64") /* ty=Tensor[(156), float64] */;
  %8 = @func_3200() /* ty=Tensor[(480), float64] */;
  %9 = cast(%8, dtype="float64") /* ty=Tensor[(480), float64] */;
  %10 = reshape(%7, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %11 = reshape(%9, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %12 = @func_1380(%10, %11) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %13 = cast(meta[relay.Constant][2] /* ty=Tensor[(2352), float64] */, dtype="float64") /* ty=Tensor[(2352), float64] */;
  %14 = reshape(%13, newshape=[12, 14, 14]) /* ty=Tensor[(12, 14, 14), float64] */;
  %15 = @func_2258(%14) /* ty=(Tensor[(12, 1, 14), float64], Tensor[(12, 14, 14), int32]) */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %17 = cast(meta[relay.Constant][3] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %18 = reshape(%16, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %19 = reshape(%17, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %20 = @func_3638(%18, %19) /* ty=(Tensor[(480), float64], Tensor[(2, ?, 6), uint8], Tensor[(12), float64], Tensor[(2, 12, 16), float32], Tensor[(384), float32]) */;
  %21 = @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
  %22 = %6.4;
  %23 = %12.1;
  %24 = %15.0;
  %25 = %20.0;
  %26 = %21.1;
  (%8, %22, meta[relay.Constant][0] /* ty=Tensor[(1, 10), uint64] */, meta[relay.Constant][1] /* ty=Tensor[(12), float64] */, %var_4034, %23, %var_4047, %24, meta[relay.Constant][2] /* ty=Tensor[(2352), float64] */, %25, meta[relay.Constant][3] /* ty=Tensor[(384), float32] */, %26)
}

def @func_5007() -> (Tensor[(156), float64], Tensor[(14, 8, 1), float32], Tensor[(112, 1), float32]) {
  %27 = @func_3392() /* ty=(Tensor[(156), float64],) */;
  %28 = cast(meta[relay.Constant][4] /* ty=Tensor[(112, 1), float32] */, dtype="float32") /* ty=Tensor[(112, 1), float32] */;
  %29 = reshape(%28, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), float32] */;
  %30 = @func_3367(%29) /* ty=(Tensor[(14, 8, 1), float32], Tensor[(16, 10, 3), float64], Tensor[(480), float64]) */;
  %31 = %27.0;
  %32 = %30.0;
  (%31, %32, meta[relay.Constant][4] /* ty=Tensor[(112, 1), float32] */)
}

def @func_12(%var_6: Tensor[(16, 10, 3), float64]) -> (Tensor[(16, 10, 3), float64],) {
  %33 = cast(meta[relay.Constant][5] /* ty=Tensor[(16, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %34 = shape_of(%var_6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%var_6, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %37 = divide(%35, %36) /* ty=Tensor[(16, 10, 3), float64] */;
  (%37,)
}

def @func_3427() -> (Tensor[(156), float64], Tensor[(480), float64], Tensor[(112), float32]) {
  %38 = @func_3392() /* ty=(Tensor[(156), float64],) */;
  %39 = cast(meta[relay.Constant][6] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %40 = reshape(%39, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), float32] */;
  %41 = @func_3367(%40) /* ty=(Tensor[(14, 8, 1), float32], Tensor[(16, 10, 3), float64], Tensor[(480), float64]) */;
  %42 = %38.0;
  %43 = %41.2;
  (%42, %43, meta[relay.Constant][6] /* ty=Tensor[(112), float32] */)
}

def @func_3471() -> (Tensor[(480), float64], Tensor[(14, 6, 14), float64], float64) {
  %44 = @func_3443() /* ty=Tensor[(480), float64] */;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(480), float64] */;
  %46 = cast(-0.379815f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %47 = reshape(%46, newshape=[]) /* ty=float64 */;
  %48 = exp(%45) /* ty=Tensor[(480), float64] */;
  %49 = @func_2809(%47) /* ty=Tensor[(14, 6, 14), float64] */;
  (%48, %49, -0.379815f64 /* ty=float64 */)
}

def @func_6083(%var_6080: Tensor[(132), float32]) -> (Tensor[(480), float64], Tensor[(4, 11, 3), float32], Tensor[(132), float32]) {
  %50 = @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
  %51 = cast(%var_6080, dtype="float32") /* ty=Tensor[(132), float32] */;
  %52 = %50.1;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(480), float64] */;
  %54 = reshape(%51, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %55 = reshape(%53, newshape=[480, 1]) /* ty=Tensor[(480, 1), float64] */;
  %56 = @func_238(%54, %55) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) */;
  %57 = %56.0;
  (%52, %57, %var_6080)
}

def @func_7103() -> (Tensor[(480), float64],) {
  %58 = @func_4903() /* ty=Tensor[(480), float64] */;
  (%58,)
}

def @func_5368() -> (Tensor[(480), float64],) {
  %59 = @func_4603() /* ty=Tensor[(480), float64] */;
  (%59,)
}

def @func_4207(%var_4198: Tensor[(15, 2, 12), bool], %var_4199: Tensor[(15, 2, 12), bool]) -> Tensor[(15, 2, 12), bool] {
  %60 = cast(%var_4199, dtype="bool") /* ty=Tensor[(15, 2, 12), bool] */;
  %61 = shape_of(%var_4198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%var_4198, dtype="bool") /* ty=Tensor[(15, 2, 12), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%62, %63) /* ty=Tensor[(15, 2, 12), bool] */
}

def @func_2386(%var_2382: Tensor[(6, 9, 12), float64]) -> Tensor[(6, 9, 12), float64] {
  %64 = cast(%var_2382, dtype="float64") /* ty=Tensor[(6, 9, 12), float64] */;
  acos(%64) /* ty=Tensor[(6, 9, 12), float64] */
}

def @func_5980() -> (Tensor[(156), float64], Tensor[(16, 10, 3), float64]) {
  %65 = @func_5007() /* ty=(Tensor[(156), float64], Tensor[(14, 8, 1), float32], Tensor[(112, 1), float32]) */;
  %66 = %65.0;
  %67 = @func_3884() /* ty=Tensor[(16, 10, 3), float64] */;
  (%66, %67)
}

def @func_5038() -> (Tensor[(480), float64],) {
  %68 = @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
  %69 = %68.1;
  (%69,)
}

def @func_6455() -> (Tensor[(480), float64],) {
  %70 = @func_5038() /* ty=(Tensor[(480), float64],) */;
  %71 = %70.0;
  (%71,)
}

def @func_5439() -> (Tensor[(112, 1), float32],) {
  %72 = @func_5007() /* ty=(Tensor[(156), float64], Tensor[(14, 8, 1), float32], Tensor[(112, 1), float32]) */;
  %73 = %72.2;
  (%73,)
}

def @func_238(%var_226: Tensor[(4, 11, 3), float32], %var_232: Tensor[(480, 1), float64]) -> (Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) {
  %74 = cast(%var_226, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
  %75 = cast(%var_232, dtype="float64") /* ty=Tensor[(480, 1), float64] */;
  %76 = reshape(%75, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %77 = @func_12(%76) /* ty=(Tensor[(16, 10, 3), float64],) */;
  %78 = log2(%74) /* ty=Tensor[(4, 11, 3), float32] */;
  %79 = %77.0;
  (%78, %79, %var_232)
}

def @func_3297() -> Tensor[(480), float64] {
  @func_3200() /* ty=Tensor[(480), float64] */
}

def @func_4903() -> Tensor[(480), float64] {
  %80 = @func_4665() /* ty=(Tensor[(480), float64],) */;
  %80.0
}

def @func_2758(%var_2727: Tensor[(10, 5, 5), uint8], %var_2728: Tensor[(10, 5, 5), uint8], %var_2751: Tensor[(36), int32]) -> (Tensor[(10, 5, 5), uint8], Tensor[(10, 5, 5), float32], Tensor[(576), int32], Tensor[(294), float32], Tensor[(480), float64], Tensor[(36), int32]) {
  %81 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(10, 5, 5), uint8] */;
  %82 = shape_of(%var_2727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%var_2727, dtype="uint8") /* ty=Tensor[(10, 5, 5), uint8] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %85 = cast(%var_2727, dtype="float32") /* ty=Tensor[(10, 5, 5), float32] */;
  %86 = cast(meta[relay.Constant][7] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %87 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %88 = cast(%var_2751, dtype="int32") /* ty=Tensor[(36), int32] */;
  %89 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %90 = reshape(%86, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
  %91 = reshape(%87, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %92 = reshape(%88, newshape=[36]) /* ty=Tensor[(36), int32] */;
  %93 = reshape(%89, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %94 = @func_1109(%90, %91, %92, %93) /* ty=(Tensor[(3, 7, 14), bool], Tensor[(480), float64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(16, 10, 3), int64]) */;
  %95 = logical_xor(%83, %84) /* ty=Tensor[(10, 5, 5), uint8] */;
  %96 = sigmoid(%85) /* ty=Tensor[(10, 5, 5), float32] */;
  %97 = %94.4;
  (%95, %96, %97, meta[relay.Constant][7] /* ty=Tensor[(294), float32] */, meta[relay.Constant][8] /* ty=Tensor[(480), float64] */, %var_2751)
}

def @func_1109(%var_1067: Tensor[(3, 7, 14), float32], %var_1074: Tensor[(480), float64], %var_1082: Tensor[(36), int32], %var_1101: Tensor[(16, 10, 3), float64]) -> (Tensor[(3, 7, 14), bool], Tensor[(480), float64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(16, 10, 3), int64]) {
  %98 = cast(%var_1067, dtype="bool") /* ty=Tensor[(3, 7, 14), bool] */;
  %99 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(3, 7, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 7, 14), float32] */, dtype="bool") /* ty=Tensor[(3, 7, 14), bool] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %102 = cast(%var_1082, dtype="int32") /* ty=Tensor[(36), int32] */;
  %103 = cast(meta[relay.Constant][10] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %104 = reshape(%102, newshape=[1, 9, 4]) /* ty=Tensor[(1, 9, 4), int32] */;
  %105 = reshape(%103, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), int32] */;
  %106 = cast(%var_1074, dtype="float64") /* ty=Tensor[(480), float64] */;
  %107 = reshape(%106, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %108 = @func_12(%107) /* ty=(Tensor[(16, 10, 3), float64],) */;
  %109 = %108.0;
  %110 = cast(%var_1101, dtype="int64") /* ty=Tensor[(16, 10, 3), int64] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="int64") /* ty=Tensor[(16, 10, 3), int64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %114 = less(%100, %101) /* ty=Tensor[(3, 7, 14), bool] */;
  %115 = @func_299(%104, %105) /* ty=Tensor[(16, 9, 4), bool] */;
  %116 = left_shift(%112, %113) /* ty=Tensor[(16, 10, 3), int64] */;
  (%114, %var_1074, %115, %var_1082, meta[relay.Constant][10] /* ty=Tensor[(576), int32] */, %116)
}

def @func_299(%var_283: Tensor[(1, 9, 4), int32], %var_284: Tensor[(16, 9, 4), int32]) -> Tensor[(16, 9, 4), bool] {
  %117 = cast(%var_283, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
  %118 = cast(%var_284, dtype="bool") /* ty=Tensor[(16, 9, 4), bool] */;
  %119 = equal(%117, %118) /* ty=Tensor[(16, 9, 4), bool] */;
  %120 = cast(%119, dtype="bool") /* ty=Tensor[(16, 9, 4), bool] */;
  %121 = shape_of(%var_284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%var_284, dtype="bool") /* ty=Tensor[(16, 9, 4), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%122, %123) /* ty=Tensor[(16, 9, 4), bool] */
}

def @func_3516(%var_3510: Tensor[(156), float64]) -> Tensor[(156), bool] {
  %124 = @func_3392() /* ty=(Tensor[(156), float64],) */;
  %125 = %124.0;
  %126 = cast(%var_3510, dtype="bool") /* ty=Tensor[(156), bool] */;
  %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(1), int32] */;
  %128 = cast(%125, dtype="bool") /* ty=Tensor[(156), bool] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?), bool] */;
  less(%128, %129) /* ty=Tensor[(156), bool] */
}

def @func_3692() -> Tensor[(156), float32] {
  %130 = @func_3392() /* ty=(Tensor[(156), float64],) */;
  %131 = %130.0;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(156), float32] */;
  sinh(%132) /* ty=Tensor[(156), float32] */
}

def @func_394(%var_391: Tensor[(10, 16, 5), float32]) -> Tensor[(10, 16, 5), float32] {
  %133 = cast(%var_391, dtype="float32") /* ty=Tensor[(10, 16, 5), float32] */;
  exp(%133) /* ty=Tensor[(10, 16, 5), float32] */
}

def @func_4018(%var_4013: Tensor[(800), float32]) -> (Tensor[(112), float32], Tensor[(10, 16, 5), float32], Tensor[(800), float32]) {
  %134 = @func_3427() /* ty=(Tensor[(156), float64], Tensor[(480), float64], Tensor[(112), float32]) */;
  %135 = cast(%var_4013, dtype="float32") /* ty=Tensor[(800), float32] */;
  %136 = reshape(%135, newshape=[10, 16, 5]) /* ty=Tensor[(10, 16, 5), float32] */;
  %137 = %134.2;
  %138 = @func_394(%136) /* ty=Tensor[(10, 16, 5), float32] */;
  (%137, %138, %var_4013)
}

def @func_5825(%var_5803: Tensor[(156), float32], %var_5816: Tensor[(390), float32]) -> (Tensor[(480), float64], Tensor[(480), float32], Tensor[(14, 6, 14), float64], float64, Tensor[(156), int64], Tensor[(1, 9), float32], Tensor[(9), float32], Tensor[(13, 10, 3), float32], Tensor[(390), float32]) {
  %139 = @func_3427() /* ty=(Tensor[(156), float64], Tensor[(480), float64], Tensor[(112), float32]) */;
  %140 = @func_3956() /* ty=(Tensor[(480), float32],) */;
  %141 = %140.0;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(480), float32] */;
  %143 = cast(-7.44563f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %144 = reshape(%143, newshape=[]) /* ty=float64 */;
  %145 = @func_3775() /* ty=Tensor[(156), float32] */;
  %146 = cast(%var_5803, dtype="int64") /* ty=Tensor[(156), int64] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(1), int32] */;
  %148 = cast(%145, dtype="int64") /* ty=Tensor[(156), int64] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?), int64] */;
  %150 = cast(-7.44563f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %151 = cast(meta[relay.Constant][11] /* ty=Tensor[(9), float32] */, dtype="float32") /* ty=Tensor[(9), float32] */;
  %152 = reshape(%150, newshape=[]) /* ty=float32 */;
  %153 = reshape(%151, newshape=[1, 9]) /* ty=Tensor[(1, 9), float32] */;
  %154 = cast(%var_5816, dtype="float32") /* ty=Tensor[(390), float32] */;
  %155 = reshape(%154, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float32] */;
  %156 = @func_5589(%155) /* ty=(Tensor[(13, 10, 3), float32], Tensor[(480), float64]) */;
  %157 = %139.1;
  %158 = log(%142) /* ty=Tensor[(480), float32] */;
  %159 = @func_2809(%144) /* ty=Tensor[(14, 6, 14), float64] */;
  %160 = right_shift(%148, %149) /* ty=Tensor[(156), int64] */;
  %161 = @func_5555(%152, %153) /* ty=Tensor[(1, 9), float32] */;
  %162 = %156.0;
  (%157, %158, %159, -7.44563f64 /* ty=float64 */, %160, %161, meta[relay.Constant][11] /* ty=Tensor[(9), float32] */, %162, %var_5816)
}

def @func_3870(%var_3865: Tensor[(480), float64]) -> Tensor[(480), bool] {
  %163 = @func_3427() /* ty=(Tensor[(156), float64], Tensor[(480), float64], Tensor[(112), float32]) */;
  %164 = %163.1;
  %165 = cast(%var_3865, dtype="bool") /* ty=Tensor[(480), bool] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(1), int32] */;
  %167 = cast(%164, dtype="bool") /* ty=Tensor[(480), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?), bool] */;
  greater_equal(%167, %168) /* ty=Tensor[(480), bool] */
}

def @func_530(%var_482: Tensor[(2, 1, 6), float64]) -> (Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) {
  %169 = cast(meta[relay.Constant][12] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %170 = cast(meta[relay.Constant][13] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %171 = reshape(%169, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %172 = reshape(%170, newshape=[480, 1]) /* ty=Tensor[(480, 1), float64] */;
  %173 = @func_238(%171, %172) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) */;
  %174 = cast(meta[relay.Constant][13] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %175 = reshape(%174, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %176 = @func_12(%175) /* ty=(Tensor[(16, 10, 3), float64],) */;
  %177 = cast(meta[relay.Constant][13] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %178 = reshape(%177, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %179 = @func_12(%178) /* ty=(Tensor[(16, 10, 3), float64],) */;
  %180 = cast(%var_482, dtype="float64") /* ty=Tensor[(2, 1, 6), float64] */;
  %181 = log10(%180) /* ty=Tensor[(2, 1, 6), float64] */;
  %182 = cast(%181, dtype="float64") /* ty=Tensor[(2, 1, 6), float64] */;
  %183 = sigmoid(%182) /* ty=Tensor[(2, 1, 6), float64] */;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(2, 1, 6), float64] */;
  %185 = cos(%184) /* ty=Tensor[(2, 1, 6), float64] */;
  %186 = cast(%185, dtype="uint8") /* ty=Tensor[(2, 1, 6), uint8] */;
  %187 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%183, dtype="uint8") /* ty=Tensor[(2, 1, 6), uint8] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %190 = %173.0;
  %191 = %176.0;
  %192 = %179.0;
  %193 = subtract(%188, %189) /* ty=Tensor[(2, ?, 6), uint8] */;
  (%190, meta[relay.Constant][12] /* ty=Tensor[(132), float32] */, meta[relay.Constant][13] /* ty=Tensor[(480), float64] */, %191, %192, %193)
}

def @func_5695() -> (Tensor[(480), float64], Tensor[(480), float64], Tensor[(480), float64], Tensor[(12, 1), float64], Tensor[(112, 1), float32]) {
  %194 = @func_5150() /* ty=(Tensor[(480), float64], Tensor[(15, 2, 12), bool], Tensor[(360), bool]) */;
  %195 = @func_5368() /* ty=(Tensor[(480), float64],) */;
  %196 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 1), float64] */;
  %197 = reshape(%196, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %198 = @func_4293(%197) /* ty=(Tensor[(480), float64], Tensor[(480), float64], Tensor[(12), float64]) */;
  %199 = @func_5439() /* ty=(Tensor[(112, 1), float32],) */;
  %200 = %194.0;
  %201 = %195.0;
  %202 = %198.0;
  %203 = %199.0;
  (%200, %201, %202, meta[relay.Constant][14] /* ty=Tensor[(12, 1), float64] */, %203)
}

def @func_3884() -> Tensor[(16, 10, 3), float64] {
  %204 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
  %204.1
}

def @func_4506() -> (Tensor[(10, 8, 15), float64],) {
  %205 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 8, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 15), float64] */;
  %206 = asin(%205) /* ty=Tensor[(10, 8, 15), float64] */;
  (%206,)
}

def @func_6068() -> Tensor[(280), uint32] {
  %207 = @func_4411() /* ty=(Tensor[(13, 12, 1), float64], Tensor[(78, 2), float64], Tensor[(90, 10), float32], Tensor[(280), uint32], Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(8, 60), float64], Tensor[(576), int32], Tensor[(250), uint8], Tensor[(36), int32]) */;
  %207.3
}

def @func_5918(%var_5895: Tensor[(480), float64], %var_5906: Tensor[(12, 32), float32]) -> (Tensor[(360), bool], Tensor[(480), float64], Tensor[(12, 32), uint16]) {
  %208 = @func_5150() /* ty=(Tensor[(480), float64], Tensor[(15, 2, 12), bool], Tensor[(360), bool]) */;
  %209 = cast(%var_5895, dtype="float64") /* ty=Tensor[(480), float64] */;
  %210 = cast(%var_5895, dtype="float64") /* ty=Tensor[(480), float64] */;
  %211 = reshape(%209, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float64] */;
  %212 = reshape(%210, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float64] */;
  %213 = @func_2013(%211, %212) /* ty=(Tensor[(5, 12, 8), float32], Tensor[(2, 12, 16), float32], Tensor[(12, 32), float32]) */;
  %214 = %213.2;
  %215 = cast(%var_5906, dtype="uint16") /* ty=Tensor[(12, 32), uint16] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(2), int32] */;
  %217 = cast(%214, dtype="uint16") /* ty=Tensor[(12, 32), uint16] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %219 = %208.2;
  %220 = multiply(%217, %218) /* ty=Tensor[(12, 32), uint16] */;
  (%219, %var_5895, %220)
}

def @func_6138() -> (Tensor[(156), float32], Tensor[(156), float32], Tensor[(480), float64]) {
  %221 = @func_3692() /* ty=Tensor[(156), float32] */;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(156), float32] */;
  %223 = cast(%221, dtype="float32") /* ty=Tensor[(156), float32] */;
  %224 = @func_4665() /* ty=(Tensor[(480), float64],) */;
  %225 = tan(%222) /* ty=Tensor[(156), float32] */;
  %226 = asin(%223) /* ty=Tensor[(156), float32] */;
  %227 = %224.0;
  (%225, %226, %227)
}

def @func_1380(%var_1362: Tensor[(13, 12, 1), float64], %var_1372: Tensor[(4, 120), float64]) -> (Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) {
  %228 = cast(%var_1362, dtype="float64") /* ty=Tensor[(13, 12, 1), float64] */;
  %229 = cast(meta[relay.Constant][16] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %230 = cast(%var_1372, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
  %231 = reshape(%229, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %232 = reshape(%230, newshape=[480, 1]) /* ty=Tensor[(480, 1), float64] */;
  %233 = @func_238(%231, %232) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) */;
  %234 = tan(%228) /* ty=Tensor[(13, 12, 1), float64] */;
  %235 = %233.1;
  (%234, %235, meta[relay.Constant][16] /* ty=Tensor[(132), float32] */, %var_1372)
}

def @func_2422(%var_2410: Tensor[(10, 10, 14), float32]) -> (Tensor[(10, 10, 14), uint32],) {
  %236 = cast(%var_2410, dtype="float32") /* ty=Tensor[(10, 10, 14), float32] */;
  %237 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(10, 10, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(10, 10, 14), float32] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %240 = multiply(%238, %239) /* ty=Tensor[(10, 10, 14), float32] */;
  %241 = cast(%240, dtype="uint32") /* ty=Tensor[(10, 10, 14), uint32] */;
  %242 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(10, 10, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 10, 14), float32] */, dtype="uint32") /* ty=Tensor[(10, 10, 14), uint32] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %245 = bitwise_xor(%243, %244) /* ty=Tensor[(10, 10, 14), uint32] */;
  (%245,)
}

def @func_4411() -> (Tensor[(13, 12, 1), float64], Tensor[(78, 2), float64], Tensor[(90, 10), float32], Tensor[(280), uint32], Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(8, 60), float64], Tensor[(576), int32], Tensor[(250), uint8], Tensor[(36), int32]) {
  %246 = cast(meta[relay.Constant][18] /* ty=Tensor[(78, 2), float64] */, dtype="float64") /* ty=Tensor[(78, 2), float64] */;
  %247 = @func_3297() /* ty=Tensor[(480), float64] */;
  %248 = cast(%247, dtype="float64") /* ty=Tensor[(480), float64] */;
  %249 = reshape(%246, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %250 = reshape(%248, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %251 = @func_1380(%249, %250) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %252 = cast(meta[relay.Constant][21] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %253 = cast(meta[relay.Constant][19] /* ty=Tensor[(90, 10), float32] */, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %254 = cast(meta[relay.Constant][19] /* ty=Tensor[(90, 10), float32] */, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %255 = cast(meta[relay.Constant][20] /* ty=Tensor[(280), uint32] */, dtype="uint32") /* ty=Tensor[(280), uint32] */;
  %256 = cast(meta[relay.Constant][18] /* ty=Tensor[(78, 2), float64] */, dtype="float64") /* ty=Tensor[(78, 2), float64] */;
  %257 = cast(meta[relay.Constant][19] /* ty=Tensor[(90, 10), float32] */, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %258 = reshape(%253, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float32] */;
  %259 = reshape(%254, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float32] */;
  %260 = reshape(%255, newshape=[280]) /* ty=Tensor[(280), uint32] */;
  %261 = reshape(%256, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %262 = reshape(%257, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float32] */;
  %263 = @func_1627(%258, %259, %260, %261, %262) /* ty=(Tensor[(6, 10, 15), float32], Tensor[(2, 12, 16), float32], Tensor[(384), float32], Tensor[(4, 7, 10), uint32], Tensor[(280), uint32], Tensor[(4, 120), float64], Tensor[(156), float64], Tensor[(8, 60), float64], Tensor[(16, 10, 3), float64], Tensor[(2, 12, 16), float32], Tensor[(480), float64], Tensor[(294), float32], Tensor[(36), int32], Tensor[(16, 10, 3), float64], Tensor[(6, 10, 15), float32], Tensor[(36), int32]) */;
  %264 = %263.7;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %266 = acosh(%265) /* ty=Tensor[(8, 60), float64] */;
  %267 = cast(%266, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %268 = reshape(%252, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %269 = reshape(%267, newshape=[480, 1]) /* ty=Tensor[(480, 1), float64] */;
  %270 = @func_238(%268, %269) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) */;
  %271 = cast(%247, dtype="float64") /* ty=Tensor[(480), float64] */;
  %272 = shape_of(%266, dtype="int32") /* ty=Tensor[(2), int32] */;
  %273 = cast(%266, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %275 = cast(meta[relay.Constant][22] /* ty=Tensor[(250), uint8] */, dtype="uint8") /* ty=Tensor[(250), uint8] */;
  %276 = cast(meta[relay.Constant][22] /* ty=Tensor[(250), uint8] */, dtype="uint8") /* ty=Tensor[(250), uint8] */;
  %277 = cast(meta[relay.Constant][23] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(36), int32] */;
  %278 = reshape(%275, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint8] */;
  %279 = reshape(%276, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint8] */;
  %280 = reshape(%277, newshape=[36]) /* ty=Tensor[(36), int32] */;
  %281 = @func_2758(%278, %279, %280) /* ty=(Tensor[(10, 5, 5), uint8], Tensor[(10, 5, 5), float32], Tensor[(576), int32], Tensor[(294), float32], Tensor[(480), float64], Tensor[(36), int32]) */;
  %282 = %251.0;
  %283 = %270.0;
  %284 = power(%273, %274) /* ty=Tensor[(8, 60), float64] */;
  %285 = %281.2;
  (%282, meta[relay.Constant][18] /* ty=Tensor[(78, 2), float64] */, meta[relay.Constant][19] /* ty=Tensor[(90, 10), float32] */, meta[relay.Constant][20] /* ty=Tensor[(280), uint32] */, %283, meta[relay.Constant][21] /* ty=Tensor[(132), float32] */, %284, %285, meta[relay.Constant][22] /* ty=Tensor[(250), uint8] */, meta[relay.Constant][23] /* ty=Tensor[(36), int32] */)
}

def @func_7188(%var_7125: Tensor[(480), float64], %var_7130: Tensor[(156), float64], %var_7155: Tensor[(36), int32], %var_7181: Tensor[(294), float32]) -> (Tensor[(14, 6, 14), float64], Tensor[(16, 9, 4), bool], Tensor[(480), float64], Tensor[(156), bool], Tensor[(156), float64], Tensor[(480), float64], Tensor[(36), int64], Tensor[(480), float64], Tensor[(294), int16]) {
  %286 = cast(meta[relay.Constant][24] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %287 = cast(%var_7125, dtype="float64") /* ty=Tensor[(480), float64] */;
  %288 = cast(meta[relay.Constant][25] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(36), int32] */;
  %289 = cast(%var_7125, dtype="float64") /* ty=Tensor[(480), float64] */;
  %290 = reshape(%286, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
  %291 = reshape(%287, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %292 = reshape(%288, newshape=[36]) /* ty=Tensor[(36), int32] */;
  %293 = reshape(%289, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %294 = @func_1109(%290, %291, %292, %293) /* ty=(Tensor[(3, 7, 14), bool], Tensor[(480), float64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(16, 10, 3), int64]) */;
  %295 = cast(%var_7130, dtype="float64") /* ty=Tensor[(156), float64] */;
  %296 = reshape(%295, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %297 = @func_5368() /* ty=(Tensor[(480), float64],) */;
  %298 = cast(%var_7155, dtype="int64") /* ty=Tensor[(36), int64] */;
  %299 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %300 = cast(meta[relay.Constant][25] /* ty=Tensor[(36), int32] */, dtype="int64") /* ty=Tensor[(36), int64] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?), int64] */;
  %302 = @func_5626() /* ty=(Tensor[(156), float64], Tensor[(480), float64]) */;
  %303 = cast(%var_7181, dtype="int16") /* ty=Tensor[(294), int16] */;
  %304 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(294), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %305 = cast(meta[relay.Constant][24] /* ty=Tensor[(294), float32] */, dtype="int16") /* ty=Tensor[(294), int16] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?), int16] */;
  %307 = @func_4305() /* ty=Tensor[(14, 6, 14), float64] */;
  %308 = %294.2;
  %309 = @func_3516(%296) /* ty=Tensor[(156), bool] */;
  %310 = %297.0;
  %311 = subtract(%300, %301) /* ty=Tensor[(36), int64] */;
  %312 = %302.1;
  %313 = bitwise_xor(%305, %306) /* ty=Tensor[(294), int16] */;
  (%307, %308, %var_7125, %309, %var_7130, %310, %311, %312, %313)
}

def @func_7358() -> (Tensor[(10, 8, 15), float64], Tensor[(10, 8, 15), float64]) {
  %314 = @func_5661() /* ty=(Tensor[(10, 8, 15), float64], Tensor[(480), float64], Tensor[(65, 6), float32]) */;
  %315 = @func_7028() /* ty=Tensor[(10, 8, 15), float64] */;
  %316 = %314.0;
  (%315, %316)
}

def @func_7378() -> (Tensor[(480), float64],) {
  %317 = @func_3443() /* ty=Tensor[(480), float64] */;
  (%317,)
}

def @func_6659() -> (Tensor[(480), float64], Tensor[(132), float32], Tensor[(156), bool], Tensor[(156), bool], Tensor[(156), bool], Tensor[(14, 6, 14), float64], Tensor[(156), float64], Tensor[(10, 16, 5), float32], Tensor[(800), float32], Tensor[(5, 12, 8), float32], Tensor[(1, 9), float32], float32, Tensor[(9, 1), float32]) {
  %318 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
  %319 = %318.2;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(156), float64] */;
  %321 = @func_4903() /* ty=Tensor[(480), float64] */;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(480), float64] */;
  %323 = reshape(%320, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %324 = reshape(%322, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %325 = @func_1380(%323, %324) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %326 = cast(%319, dtype="float64") /* ty=Tensor[(156), float64] */;
  %327 = reshape(%326, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %328 = @func_3516(%327) /* ty=Tensor[(156), bool] */;
  %329 = cast(%319, dtype="bool") /* ty=Tensor[(156), bool] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(1), int32] */;
  %331 = cast(%328, dtype="bool") /* ty=Tensor[(156), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?), bool] */;
  %333 = cast(%319, dtype="float64") /* ty=Tensor[(156), float64] */;
  %334 = reshape(%333, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %335 = cast(%319, dtype="float64") /* ty=Tensor[(156), float64] */;
  %336 = reshape(%335, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %337 = @func_3471() /* ty=(Tensor[(480), float64], Tensor[(14, 6, 14), float64], float64) */;
  %338 = @func_5626() /* ty=(Tensor[(156), float64], Tensor[(480), float64]) */;
  %339 = cast(meta[relay.Constant][26] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %340 = reshape(%339, newshape=[800]) /* ty=Tensor[(800), float32] */;
  %341 = @func_4018(%340) /* ty=(Tensor[(112), float32], Tensor[(10, 16, 5), float32], Tensor[(800), float32]) */;
  %342 = cast(%321, dtype="float64") /* ty=Tensor[(480), float64] */;
  %343 = cast(%321, dtype="float64") /* ty=Tensor[(480), float64] */;
  %344 = reshape(%342, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float64] */;
  %345 = reshape(%343, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float64] */;
  %346 = @func_2013(%344, %345) /* ty=(Tensor[(5, 12, 8), float32], Tensor[(2, 12, 16), float32], Tensor[(12, 32), float32]) */;
  %347 = cast(-9.72162f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %348 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 1), float32] */;
  %349 = reshape(%347, newshape=[]) /* ty=float32 */;
  %350 = reshape(%348, newshape=[1, 9]) /* ty=Tensor[(1, 9), float32] */;
  %351 = %325.2;
  %352 = not_equal(%331, %332) /* ty=Tensor[(156), bool] */;
  %353 = @func_3516(%334) /* ty=Tensor[(156), bool] */;
  %354 = @func_3516(%336) /* ty=Tensor[(156), bool] */;
  %355 = %337.1;
  %356 = %338.0;
  %357 = %341.1;
  %358 = %346.0;
  %359 = @func_5555(%349, %350) /* ty=Tensor[(1, 9), float32] */;
  (%321, %351, %352, %353, %354, %355, %356, %357, meta[relay.Constant][26] /* ty=Tensor[(800), float32] */, %358, %359, -9.72162f /* ty=float32 */, meta[relay.Constant][27] /* ty=Tensor[(9, 1), float32] */)
}

def @func_3160(%var_3156: Tensor[(11, 8, 2), int32]) -> Tensor[(11, 8, 2), bool] {
  %360 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 8, 2), int32] */, dtype="bool") /* ty=Tensor[(1, 8, 2), bool] */;
  %361 = cast(%var_3156, dtype="bool") /* ty=Tensor[(11, 8, 2), bool] */;
  equal(%360, %361) /* ty=Tensor[(11, 8, 2), bool] */
}

def @func_6804(%var_6796: Tensor[(12, 14, 10), bool]) -> Tensor[(12, 14, 10), bool] {
  %362 = @func_6323() /* ty=(Tensor[(12, 14, 10), bool],) */;
  %363 = %362.0;
  %364 = cast(%var_6796, dtype="bool") /* ty=Tensor[(12, 14, 10), bool] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%363, dtype="bool") /* ty=Tensor[(12, 14, 10), bool] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%366, %367) /* ty=Tensor[(12, 14, 10), bool] */
}

def @func_3956() -> (Tensor[(480), float32],) {
  %368 = @func_3443() /* ty=Tensor[(480), float64] */;
  %369 = cast(%368, dtype="float64") /* ty=Tensor[(480), float64] */;
  %370 = cos(%369) /* ty=Tensor[(480), float64] */;
  %371 = cast(%370, dtype="float32") /* ty=Tensor[(480), float32] */;
  %372 = sin(%371) /* ty=Tensor[(480), float32] */;
  (%372,)
}

def @func_3143() -> (Tensor[(480), float64],) {
  %373 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
  %374 = %373.3;
  (%374,)
}

def @func_5589(%var_5565: Tensor[(13, 10, 3), float32]) -> (Tensor[(13, 10, 3), float32], Tensor[(480), float64]) {
  %375 = cast(%var_5565, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  %376 = log2(%375) /* ty=Tensor[(13, 10, 3), float32] */;
  %377 = @func_4603() /* ty=Tensor[(480), float64] */;
  (%376, %377)
}

def @func_6390() -> Tensor[(480), float64] {
  %378 = @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
  %378.0
}

def @func_5765(%var_5745: Tensor[(900), float32], %var_5746: Tensor[(280), uint32], %var_5752: Tensor[(3, 52), float64]) -> (Tensor[(480), float64], Tensor[(480), float64], Tensor[(280), uint32], Tensor[(900), float32], Tensor[(280), uint32], Tensor[(3, 52), float32]) {
  %379 = @func_3498() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
  %380 = @func_5368() /* ty=(Tensor[(480), float64],) */;
  %381 = cast(%var_5745, dtype="float32") /* ty=Tensor[(900), float32] */;
  %382 = cast(%var_5745, dtype="float32") /* ty=Tensor[(900), float32] */;
  %383 = cast(%var_5746, dtype="uint32") /* ty=Tensor[(280), uint32] */;
  %384 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 52), float64] */, dtype="float64") /* ty=Tensor[(3, 52), float64] */;
  %385 = cast(%var_5745, dtype="float32") /* ty=Tensor[(900), float32] */;
  %386 = reshape(%381, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float32] */;
  %387 = reshape(%382, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float32] */;
  %388 = reshape(%383, newshape=[280]) /* ty=Tensor[(280), uint32] */;
  %389 = reshape(%384, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %390 = reshape(%385, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float32] */;
  %391 = @func_1627(%386, %387, %388, %389, %390) /* ty=(Tensor[(6, 10, 15), float32], Tensor[(2, 12, 16), float32], Tensor[(384), float32], Tensor[(4, 7, 10), uint32], Tensor[(280), uint32], Tensor[(4, 120), float64], Tensor[(156), float64], Tensor[(8, 60), float64], Tensor[(16, 10, 3), float64], Tensor[(2, 12, 16), float32], Tensor[(480), float64], Tensor[(294), float32], Tensor[(36), int32], Tensor[(16, 10, 3), float64], Tensor[(6, 10, 15), float32], Tensor[(36), int32]) */;
  %392 = cast(%var_5752, dtype="float32") /* ty=Tensor[(3, 52), float32] */;
  %393 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(3, 52), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %394 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 52), float64] */, dtype="float32") /* ty=Tensor[(3, 52), float32] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %396 = %379.1;
  %397 = %380.0;
  %398 = %391.4;
  %399 = power(%394, %395) /* ty=Tensor[(3, 52), float32] */;
  (%396, %397, %398, %var_5745, %var_5746, %399)
}

def @func_3367(%var_3340: Tensor[(14, 8, 1), float32]) -> (Tensor[(14, 8, 1), float32], Tensor[(16, 10, 3), float64], Tensor[(480), float64]) {
  %400 = cast(%var_3340, dtype="float32") /* ty=Tensor[(14, 8, 1), float32] */;
  %401 = cast(meta[relay.Constant][30] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %402 = reshape(%401, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %403 = @func_12(%402) /* ty=(Tensor[(16, 10, 3), float64],) */;
  %404 = sqrt(%400) /* ty=Tensor[(14, 8, 1), float32] */;
  %405 = %403.0;
  (%404, %405, meta[relay.Constant][30] /* ty=Tensor[(480), float64] */)
}

def @func_6679(%var_6661: Tensor[(4, 5, 2), int32], %var_6662: Tensor[(4, 5, 2), int32]) -> (Tensor[(4, 5, 2), int32], Tensor[(4, 5, 2), float32]) {
  %406 = cast(%var_6662, dtype="int32") /* ty=Tensor[(4, 5, 2), int32] */;
  %407 = shape_of(%var_6661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%var_6661, dtype="int32") /* ty=Tensor[(4, 5, 2), int32] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %410 = cast(%var_6662, dtype="float32") /* ty=Tensor[(4, 5, 2), float32] */;
  %411 = subtract(%408, %409) /* ty=Tensor[(4, 5, 2), int32] */;
  %412 = log(%410) /* ty=Tensor[(4, 5, 2), float32] */;
  (%411, %412)
}

def @func_7300() -> (Tensor[(480), float64],) {
  %413 = @func_5038() /* ty=(Tensor[(480), float64],) */;
  %414 = %413.0;
  (%414,)
}

def @func_7394() -> (Tensor[(480), float64], Tensor[(9, 1), float32]) {
  %415 = @func_6659() /* ty=(Tensor[(480), float64], Tensor[(132), float32], Tensor[(156), bool], Tensor[(156), bool], Tensor[(156), bool], Tensor[(14, 6, 14), float64], Tensor[(156), float64], Tensor[(10, 16, 5), float32], Tensor[(800), float32], Tensor[(5, 12, 8), float32], Tensor[(1, 9), float32], float32, Tensor[(9, 1), float32]) */;
  %416 = @func_3297() /* ty=Tensor[(480), float64] */;
  %417 = %415.12;
  (%416, %417)
}

def @func_428(%var_422: Tensor[(4, 7, 10), uint32]) -> Tensor[(4, 7, 10), uint32] {
  %418 = cast(%var_422, dtype="uint32") /* ty=Tensor[(4, 7, 10), uint32] */;
  %419 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(4, 7, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 7, 10), uint32] */, dtype="uint32") /* ty=Tensor[(4, 7, 10), uint32] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%420, %421) /* ty=Tensor[(4, 7, 10), uint32] */
}

def @func_3638(%var_3603: Tensor[(12), float64], %var_3626: Tensor[(384), float32]) -> (Tensor[(480), float64], Tensor[(2, ?, 6), uint8], Tensor[(12), float64], Tensor[(2, 12, 16), float32], Tensor[(384), float32]) {
  %422 = @func_3498() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
  %423 = cast(%var_3603, dtype="float64") /* ty=Tensor[(12), float64] */;
  %424 = reshape(%423, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float64] */;
  %425 = @func_530(%424) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) */;
  %426 = cast(%var_3626, dtype="float32") /* ty=Tensor[(384), float32] */;
  %427 = reshape(%426, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %428 = @func_869(%427) /* ty=(Tensor[(2, 12, 16), float32],) */;
  %429 = %422.0;
  %430 = %425.5;
  %431 = %428.0;
  (%429, %430, %var_3603, %431, %var_3626)
}

def @func_5246(%var_5186: Tensor[(8, 14, 12), float64], %var_5220: Tensor[(576), int32]) -> (Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(480), float64], Tensor[(8, 14, 12), bool], Tensor[(480), float64]) {
  %432 = cast(meta[relay.Constant][32] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(36), int32] */;
  %433 = cast(%var_5220, dtype="int32") /* ty=Tensor[(576), int32] */;
  %434 = reshape(%432, newshape=[1, 9, 4]) /* ty=Tensor[(1, 9, 4), int32] */;
  %435 = reshape(%433, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), int32] */;
  %436 = @func_4665() /* ty=(Tensor[(480), float64],) */;
  %437 = cast(%var_5186, dtype="float64") /* ty=Tensor[(8, 14, 12), float64] */;
  %438 = asin(%437) /* ty=Tensor[(8, 14, 12), float64] */;
  %439 = cast(%438, dtype="float32") /* ty=Tensor[(8, 14, 12), float32] */;
  %440 = cosh(%439) /* ty=Tensor[(8, 14, 12), float32] */;
  %441 = cast(%var_5186, dtype="float64") /* ty=Tensor[(8, 14, 12), float64] */;
  %442 = sigmoid(%441) /* ty=Tensor[(8, 14, 12), float64] */;
  %443 = cast(%442, dtype="uint32") /* ty=Tensor[(8, 14, 12), uint32] */;
  %444 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%440, dtype="uint32") /* ty=Tensor[(8, 14, 12), uint32] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %447 = maximum(%445, %446) /* ty=Tensor[(8, 14, 12), uint32] */;
  %448 = cast(%442, dtype="bool") /* ty=Tensor[(8, 14, 12), bool] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="bool") /* ty=Tensor[(8, 14, 12), bool] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %452 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
  %453 = @func_299(%434, %435) /* ty=Tensor[(16, 9, 4), bool] */;
  %454 = %436.0;
  %455 = less(%450, %451) /* ty=Tensor[(8, 14, 12), bool] */;
  %456 = %452.3;
  (%453, meta[relay.Constant][32] /* ty=Tensor[(36), int32] */, %var_5220, %454, %455, %456)
}

def @func_2624(%var_2567: bool, %var_2568: Tensor[(10, 1, 12), bool], %var_2576: Tensor[(10, 1, 12), bool], %var_2597: Tensor[(648), float64], %var_2620: Tensor[(648), float64]) -> (Tensor[(10, 1, 12), float32], Tensor[(10, 1, 12), float64], Tensor[(6, 9, 12), float64], Tensor[(10, ?, 12), bool], Tensor[(648), float64]) {
  %457 = cast(%var_2576, dtype="float32") /* ty=Tensor[(10, 1, 12), float32] */;
  %458 = cast(%var_2567, dtype="bool") /* ty=bool */;
  %459 = cast(%var_2568, dtype="bool") /* ty=Tensor[(10, 1, 12), bool] */;
  %460 = logical_or(%458, %459) /* ty=Tensor[(10, 1, 12), bool] */;
  %461 = cast(%460, dtype="float64") /* ty=Tensor[(10, 1, 12), float64] */;
  %462 = cast(%var_2597, dtype="float64") /* ty=Tensor[(648), float64] */;
  %463 = reshape(%462, newshape=[6, 9, 12]) /* ty=Tensor[(6, 9, 12), float64] */;
  %464 = cast(%460, dtype="float64") /* ty=Tensor[(10, 1, 12), float64] */;
  %465 = sqrt(%464) /* ty=Tensor[(10, 1, 12), float64] */;
  %466 = cast(%var_2576, dtype="int64") /* ty=Tensor[(10, 1, 12), int64] */;
  %467 = shape_of(%var_2568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%var_2568, dtype="int64") /* ty=Tensor[(10, 1, 12), int64] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %470 = bitwise_or(%468, %469) /* ty=Tensor[(10, ?, 12), int64] */;
  %471 = cast(%470, dtype="bool") /* ty=Tensor[(10, ?, 12), bool] */;
  %472 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%465, dtype="bool") /* ty=Tensor[(10, 1, 12), bool] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %475 = cast(%var_2620, dtype="float64") /* ty=Tensor[(648), float64] */;
  %476 = shape_of(%var_2597, dtype="int32") /* ty=Tensor[(1), int32] */;
  %477 = cast(%var_2597, dtype="float64") /* ty=Tensor[(648), float64] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?), float64] */;
  %479 = asin(%457) /* ty=Tensor[(10, 1, 12), float32] */;
  %480 = asinh(%461) /* ty=Tensor[(10, 1, 12), float64] */;
  %481 = @func_2386(%463) /* ty=Tensor[(6, 9, 12), float64] */;
  %482 = less_equal(%473, %474) /* ty=Tensor[(10, ?, 12), bool] */;
  %483 = floor_mod(%477, %478) /* ty=Tensor[(648), float64] */;
  (%479, %480, %481, %482, %483)
}

def @func_6323() -> (Tensor[(12, 14, 10), bool],) {
  %484 = @func_6009() /* ty=Tensor[(12, 14, 10), bool] */;
  (%484,)
}

def @func_4587() -> (Tensor[(10, 8, 15), float64], Tensor[(14, 6, 14), float32], Tensor[(10, 8, 15), float64], Tensor[(480), float64], Tensor[(480), float32]) {
  %485 = @func_4506() /* ty=(Tensor[(10, 8, 15), float64],) */;
  %486 = @func_4305() /* ty=Tensor[(14, 6, 14), float64] */;
  %487 = cast(%486, dtype="float32") /* ty=Tensor[(14, 6, 14), float32] */;
  %488 = @func_4506() /* ty=(Tensor[(10, 8, 15), float64],) */;
  %489 = @func_3956() /* ty=(Tensor[(480), float32],) */;
  %490 = %485.0;
  %491 = log10(%487) /* ty=Tensor[(14, 6, 14), float32] */;
  %492 = %488.0;
  %493 = @func_3200() /* ty=Tensor[(480), float64] */;
  %494 = %489.0;
  (%490, %491, %492, %493, %494)
}

def @func_3443() -> Tensor[(480), float64] {
  @func_3200() /* ty=Tensor[(480), float64] */
}

def @func_3908() -> (Tensor[(480), float64], Tensor[(480), float64]) {
  %495 = @func_3200() /* ty=Tensor[(480), float64] */;
  %496 = @func_3200() /* ty=Tensor[(480), float64] */;
  (%495, %496)
}

def @func_2809(%var_2799: float64) -> Tensor[(14, 6, 14), float64] {
  %497 = cast(%var_2799, dtype="float64") /* ty=float64 */;
  %498 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(14, 6, 14), float64] */;
  mod(%497, %498) /* ty=Tensor[(14, 6, 14), float64] */
}

def @func_4293(%var_4291: Tensor[(12), float64]) -> (Tensor[(480), float64], Tensor[(480), float64], Tensor[(12), float64]) {
  %499 = cast(%var_4291, dtype="float64") /* ty=Tensor[(12), float64] */;
  %500 = reshape(%499, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float64] */;
  %501 = @func_530(%500) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) */;
  %502 = @func_3443() /* ty=Tensor[(480), float64] */;
  %503 = %501.2;
  (%502, %503, %var_4291)
}

def @func_5555(%var_5520: float32, %var_5521: Tensor[(1, 9), float32]) -> Tensor[(1, 9), float32] {
  %504 = cast(%var_5520, dtype="float32") /* ty=float32 */;
  %505 = cast(%var_5521, dtype="float32") /* ty=Tensor[(1, 9), float32] */;
  mod(%504, %505) /* ty=Tensor[(1, 9), float32] */
}

def @func_5661() -> (Tensor[(10, 8, 15), float64], Tensor[(480), float64], Tensor[(65, 6), float32]) {
  %506 = @func_4506() /* ty=(Tensor[(10, 8, 15), float64],) */;
  %507 = cast(meta[relay.Constant][34] /* ty=Tensor[(65, 6), float32] */, dtype="float32") /* ty=Tensor[(65, 6), float32] */;
  %508 = reshape(%507, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float32] */;
  %509 = @func_5589(%508) /* ty=(Tensor[(13, 10, 3), float32], Tensor[(480), float64]) */;
  %510 = %506.0;
  %511 = %509.1;
  (%510, %511, meta[relay.Constant][34] /* ty=Tensor[(65, 6), float32] */)
}

def @func_6009() -> Tensor[(12, 14, 10), bool] {
  %512 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 14, 10), float32] */, dtype="bool") /* ty=Tensor[(12, 14, 10), bool] */;
  %513 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(12, 14, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 14, 10), float32] */, dtype="bool") /* ty=Tensor[(12, 14, 10), bool] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%514, %515) /* ty=Tensor[(12, 14, 10), bool] */
}

def @func_6933(%var_6911: Tensor[(156), float32]) -> (Tensor[(156), uint64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(12, 48), int32], Tensor[(16, 10, 3), float64], Tensor[(112, 1), float32]) {
  %516 = @func_3775() /* ty=Tensor[(156), float32] */;
  %517 = cast(%var_6911, dtype="uint64") /* ty=Tensor[(156), uint64] */;
  %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(1), int32] */;
  %519 = cast(%516, dtype="uint64") /* ty=Tensor[(156), uint64] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %521 = cast(meta[relay.Constant][37] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(36), int32] */;
  %522 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 48), int32] */, dtype="int32") /* ty=Tensor[(12, 48), int32] */;
  %523 = reshape(%521, newshape=[1, 9, 4]) /* ty=Tensor[(1, 9, 4), int32] */;
  %524 = reshape(%522, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), int32] */;
  %525 = @func_5980() /* ty=(Tensor[(156), float64], Tensor[(16, 10, 3), float64]) */;
  %526 = @func_5007() /* ty=(Tensor[(156), float64], Tensor[(14, 8, 1), float32], Tensor[(112, 1), float32]) */;
  %527 = bitwise_xor(%519, %520) /* ty=Tensor[(156), uint64] */;
  %528 = @func_299(%523, %524) /* ty=Tensor[(16, 9, 4), bool] */;
  %529 = %525.1;
  %530 = %526.2;
  (%527, %528, meta[relay.Constant][37] /* ty=Tensor[(36), int32] */, meta[relay.Constant][38] /* ty=Tensor[(12, 48), int32] */, %529, %530)
}

def @func_7247(%var_7233: Tensor[(6, 8, 4), float64]) -> (Tensor[(6, 8, 4), float64],) {
  %531 = cast(%var_7233, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
  %532 = acosh(%531) /* ty=Tensor[(6, 8, 4), float64] */;
  (%532,)
}

def @func_1627(%var_1532: Tensor[(6, 10, 15), float32], %var_1533: Tensor[(6, 10, 15), float32], %var_1554: Tensor[(280), uint32], %var_1565: Tensor[(156), float64], %var_1589: Tensor[(6, 10, 15), float32]) -> (Tensor[(6, 10, 15), float32], Tensor[(2, 12, 16), float32], Tensor[(384), float32], Tensor[(4, 7, 10), uint32], Tensor[(280), uint32], Tensor[(4, 120), float64], Tensor[(156), float64], Tensor[(8, 60), float64], Tensor[(16, 10, 3), float64], Tensor[(2, 12, 16), float32], Tensor[(480), float64], Tensor[(294), float32], Tensor[(36), int32], Tensor[(16, 10, 3), float64], Tensor[(6, 10, 15), float32], Tensor[(36), int32]) {
  %533 = cast(%var_1533, dtype="float32") /* ty=Tensor[(6, 10, 15), float32] */;
  %534 = shape_of(%var_1532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%var_1532, dtype="float32") /* ty=Tensor[(6, 10, 15), float32] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %537 = cast(meta[relay.Constant][39] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %538 = reshape(%537, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %539 = @func_869(%538) /* ty=(Tensor[(2, 12, 16), float32],) */;
  %540 = cast(%var_1554, dtype="uint32") /* ty=Tensor[(280), uint32] */;
  %541 = reshape(%540, newshape=[4, 7, 10]) /* ty=Tensor[(4, 7, 10), uint32] */;
  %542 = cast(%var_1565, dtype="float64") /* ty=Tensor[(156), float64] */;
  %543 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 60), float64] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %544 = reshape(%542, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %545 = reshape(%543, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %546 = @func_1380(%544, %545) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %547 = %546.3;
  %548 = cast(%547, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
  %549 = reshape(%548, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %550 = @func_12(%549) /* ty=(Tensor[(16, 10, 3), float64],) */;
  %551 = cast(meta[relay.Constant][39] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %552 = reshape(%551, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %553 = @func_869(%552) /* ty=(Tensor[(2, 12, 16), float32],) */;
  %554 = cast(meta[relay.Constant][41] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %555 = cast(%547, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
  %556 = cast(meta[relay.Constant][42] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(36), int32] */;
  %557 = cast(%547, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
  %558 = reshape(%554, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
  %559 = reshape(%555, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %560 = reshape(%556, newshape=[36]) /* ty=Tensor[(36), int32] */;
  %561 = reshape(%557, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %562 = @func_1109(%558, %559, %560, %561) /* ty=(Tensor[(3, 7, 14), bool], Tensor[(480), float64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(16, 10, 3), int64]) */;
  %563 = cast(%547, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
  %564 = reshape(%563, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %565 = @func_12(%564) /* ty=(Tensor[(16, 10, 3), float64],) */;
  %566 = cast(%var_1532, dtype="float32") /* ty=Tensor[(6, 10, 15), float32] */;
  %567 = sinh(%566) /* ty=Tensor[(6, 10, 15), float32] */;
  %568 = cast(%var_1589, dtype="float32") /* ty=Tensor[(6, 10, 15), float32] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="float32") /* ty=Tensor[(6, 10, 15), float32] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %572 = floor_divide(%570, %571) /* ty=Tensor[(6, 10, 15), float32] */;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(6, 10, 15), float64] */;
  %574 = atanh(%573) /* ty=Tensor[(6, 10, 15), float64] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(6, 10, 15), float32] */;
  %576 = cast(meta[relay.Constant][41] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %577 = cast(%547, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
  %578 = cast(meta[relay.Constant][42] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(36), int32] */;
  %579 = %550.0;
  %580 = cast(%579, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %581 = reshape(%576, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
  %582 = reshape(%577, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %583 = reshape(%578, newshape=[36]) /* ty=Tensor[(36), int32] */;
  %584 = reshape(%580, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %585 = @func_1109(%581, %582, %583, %584) /* ty=(Tensor[(3, 7, 14), bool], Tensor[(480), float64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(16, 10, 3), int64]) */;
  %586 = mod(%535, %536) /* ty=Tensor[(6, 10, 15), float32] */;
  %587 = %539.0;
  %588 = @func_428(%541) /* ty=Tensor[(4, 7, 10), uint32] */;
  %589 = %553.0;
  %590 = %562.1;
  %591 = %565.0;
  %592 = sqrt(%575) /* ty=Tensor[(6, 10, 15), float32] */;
  %593 = %585.3;
  (%586, %587, meta[relay.Constant][39] /* ty=Tensor[(384), float32] */, %588, %var_1554, %547, %var_1565, meta[relay.Constant][40] /* ty=Tensor[(8, 60), float64] */, %579, %589, %590, meta[relay.Constant][41] /* ty=Tensor[(294), float32] */, meta[relay.Constant][42] /* ty=Tensor[(36), int32] */, %591, %592, %593)
}

def @func_3392() -> (Tensor[(156), float64],) {
  %594 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
  %595 = %594.2;
  (%595,)
}

def @func_6376(%var_6354: Tensor[(16, 14, 14), float32]) -> (Tensor[(16, 14, 14), float32], Tensor[(12, 14, 10), bool]) {
  %596 = cast(%var_6354, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
  %597 = tan(%596) /* ty=Tensor[(16, 14, 14), float32] */;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
  %599 = exp(%598) /* ty=Tensor[(16, 14, 14), float32] */;
  %600 = @func_6009() /* ty=Tensor[(12, 14, 10), bool] */;
  (%599, %600)
}

def @func_6287(%var_6256: Tensor[(2112), float32], %var_6257: Tensor[(156), float64]) -> (Tensor[(10, 8, 15), uint16], Tensor[(480), float64], Tensor[(2112), float32], Tensor[(156), float64], Tensor[(10, 8, 15), bool]) {
  %601 = @func_4506() /* ty=(Tensor[(10, 8, 15), float64],) */;
  %602 = %601.0;
  %603 = cast(%602, dtype="float32") /* ty=Tensor[(10, 8, 15), float32] */;
  %604 = log10(%603) /* ty=Tensor[(10, 8, 15), float32] */;
  %605 = cast(%604, dtype="uint16") /* ty=Tensor[(10, 8, 15), uint16] */;
  %606 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%602, dtype="uint16") /* ty=Tensor[(10, 8, 15), uint16] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %609 = cast(%var_6256, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %610 = cast(%var_6257, dtype="float64") /* ty=Tensor[(156), float64] */;
  %611 = reshape(%609, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
  %612 = reshape(%610, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %613 = @func_4090(%611, %612) /* ty=(Tensor[(480), float64], Tensor[(5, ?, 2), bool], Tensor[(1, 10), uint64], Tensor[(12), float64], Tensor[(2112), float32], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(12, 1, 14), float64], Tensor[(2352), float64], Tensor[(480), float64], Tensor[(384), float32], Tensor[(480), float64]) */;
  %614 = cast(%602, dtype="bool") /* ty=Tensor[(10, 8, 15), bool] */;
  %615 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%604, dtype="bool") /* ty=Tensor[(10, 8, 15), bool] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %618 = bitwise_and(%607, %608) /* ty=Tensor[(10, 8, 15), uint16] */;
  %619 = %613.11;
  %620 = logical_or(%616, %617) /* ty=Tensor[(10, 8, 15), bool] */;
  (%618, %619, %var_6256, %var_6257, %620)
}

def @func_4862(%var_4832: Tensor[(156), float64]) -> (Tensor[(480), float32], Tensor[(13, 12, 1), float64], Tensor[(156), float64], Tensor[(132), float32], Tensor[(12), float64], Tensor[(10, 8, 15), float64], Tensor[(480), float64]) {
  %621 = @func_3956() /* ty=(Tensor[(480), float32],) */;
  %622 = cast(%var_4832, dtype="float64") /* ty=Tensor[(156), float64] */;
  %623 = %621.0;
  %624 = cast(%623, dtype="float64") /* ty=Tensor[(480), float64] */;
  %625 = reshape(%622, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %626 = reshape(%624, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %627 = @func_1380(%625, %626) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %628 = cast(meta[relay.Constant][43] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %629 = reshape(%628, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float64] */;
  %630 = @func_530(%629) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) */;
  %631 = @func_4506() /* ty=(Tensor[(10, 8, 15), float64],) */;
  %632 = @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
  %633 = %627.0;
  %634 = %630.1;
  %635 = %631.0;
  %636 = %632.0;
  (%623, %633, %var_4832, %634, meta[relay.Constant][43] /* ty=Tensor[(12), float64] */, %635, %636)
}

def @func_3775() -> Tensor[(156), float32] {
  %637 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
  %638 = %637.2;
  %639 = cast(%638, dtype="float32") /* ty=Tensor[(156), float32] */;
  erf(%639) /* ty=Tensor[(156), float32] */
}

def @func_3498() -> (Tensor[(480), float64], Tensor[(480), float64]) {
  %640 = @func_3143() /* ty=(Tensor[(480), float64],) */;
  %641 = @func_3471() /* ty=(Tensor[(480), float64], Tensor[(14, 6, 14), float64], float64) */;
  %642 = %640.0;
  %643 = %641.0;
  (%642, %643)
}

def @func_7028() -> Tensor[(10, 8, 15), float64] {
  %644 = @func_5661() /* ty=(Tensor[(10, 8, 15), float64], Tensor[(480), float64], Tensor[(65, 6), float32]) */;
  %644.0
}

def @func_3200() -> Tensor[(480), float64] {
  %645 = @func_3143() /* ty=(Tensor[(480), float64],) */;
  %645.0
}

def @func_5425() -> (Tensor[(480), float64],) {
  %646 = @func_3297() /* ty=Tensor[(480), float64] */;
  (%646,)
}

def @func_7211() -> Tensor[(14, 6, 14), float64] {
  %647 = @func_3471() /* ty=(Tensor[(480), float64], Tensor[(14, 6, 14), float64], float64) */;
  %647.1
}

def @func_4305() -> Tensor[(14, 6, 14), float64] {
  %648 = @func_3471() /* ty=(Tensor[(480), float64], Tensor[(14, 6, 14), float64], float64) */;
  %648.1
}

def @func_1507(%var_1418: Tensor[(5, 1, 2), uint64], %var_1439: Tensor[(12), float64], %var_1493: Tensor[(132, 16), float32]) -> (Tensor[(16, 10, 3), float64], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(12), float64], Tensor[(5, ?, 2), bool], Tensor[(13, 12, 1), float64], Tensor[(39, 4), bool], Tensor[(4, 11, 3), float32], Tensor[(132, 16), bool], Tensor[(39, 4), float32]) {
  %649 = cast(meta[relay.Constant][44] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %650 = reshape(%649, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %651 = @func_12(%650) /* ty=(Tensor[(16, 10, 3), float64],) */;
  %652 = cast(%var_1439, dtype="float64") /* ty=Tensor[(12), float64] */;
  %653 = reshape(%652, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float64] */;
  %654 = @func_530(%653) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) */;
  %655 = cast(%var_1418, dtype="bool") /* ty=Tensor[(5, 1, 2), bool] */;
  %656 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(5, 1, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 1, 2), uint64] */, dtype="bool") /* ty=Tensor[(5, 1, 2), bool] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %659 = greater_equal(%657, %658) /* ty=Tensor[(5, ?, 2), bool] */;
  %660 = cast(%var_1418, dtype="bool") /* ty=Tensor[(5, 1, 2), bool] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="bool") /* ty=Tensor[(5, ?, 2), bool] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %664 = logical_or(%662, %663) /* ty=Tensor[(5, ?, 2), bool] */;
  %665 = cast(%659, dtype="bool") /* ty=Tensor[(5, ?, 2), bool] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="bool") /* ty=Tensor[(5, ?, 2), bool] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %669 = cast(meta[relay.Constant][46] /* ty=Tensor[(39, 4), float64] */, dtype="float64") /* ty=Tensor[(39, 4), float64] */;
  %670 = %651.0;
  %671 = cast(%670, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %672 = reshape(%669, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %673 = reshape(%671, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %674 = @func_1380(%672, %673) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %675 = cast(meta[relay.Constant][47] /* ty=Tensor[(39, 4), float64] */, dtype="bool") /* ty=Tensor[(39, 4), bool] */;
  %676 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(39, 4), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %677 = cast(meta[relay.Constant][46] /* ty=Tensor[(39, 4), float64] */, dtype="bool") /* ty=Tensor[(39, 4), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %679 = cast(meta[relay.Constant][48] /* ty=Tensor[(132, 1), float32] */, dtype="float32") /* ty=Tensor[(132, 1), float32] */;
  %680 = cast(%670, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %681 = reshape(%679, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %682 = reshape(%680, newshape=[480, 1]) /* ty=Tensor[(480, 1), float64] */;
  %683 = @func_238(%681, %682) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) */;
  %684 = cast(meta[relay.Constant][48] /* ty=Tensor[(132, 1), float32] */, dtype="bool") /* ty=Tensor[(132, 1), bool] */;
  %685 = cast(%var_1493, dtype="bool") /* ty=Tensor[(132, 16), bool] */;
  %686 = cast(meta[relay.Constant][47] /* ty=Tensor[(39, 4), float64] */, dtype="float32") /* ty=Tensor[(39, 4), float32] */;
  %687 = %654.4;
  %688 = not_equal(%667, %668) /* ty=Tensor[(5, ?, 2), bool] */;
  %689 = %674.0;
  %690 = not_equal(%677, %678) /* ty=Tensor[(39, 4), bool] */;
  %691 = %683.0;
  %692 = logical_and(%684, %685) /* ty=Tensor[(132, 16), bool] */;
  %693 = acos(%686) /* ty=Tensor[(39, 4), float32] */;
  (%670, meta[relay.Constant][44] /* ty=Tensor[(480), float64] */, %687, %var_1439, %688, %689, %690, %691, %692, %693)
}

def @func_4724() -> Tensor[(480), float64] {
  %694 = @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
  %694.0
}

def @func_3128() -> (Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) {
  %695 = cast(meta[relay.Constant][49] /* ty=Tensor[(14, 7, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 7, 1), float32] */;
  %696 = tan(%695) /* ty=Tensor[(14, 7, 1), float32] */;
  %697 = cast(meta[relay.Constant][49] /* ty=Tensor[(14, 7, 1), float32] */, dtype="bool") /* ty=Tensor[(14, 7, 1), bool] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%696, dtype="bool") /* ty=Tensor[(14, 7, 1), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %701 = less(%699, %700) /* ty=Tensor[(14, 7, ?), bool] */;
  %702 = cast(%696, dtype="float64") /* ty=Tensor[(14, 7, 1), float64] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="float64") /* ty=Tensor[(14, 7, ?), float64] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %706 = cast(meta[relay.Constant][50] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %707 = cast(meta[relay.Constant][51] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %708 = reshape(%706, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %709 = reshape(%707, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %710 = @func_1380(%708, %709) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %711 = divide(%704, %705) /* ty=Tensor[(14, 7, ?), float64] */;
  %712 = %710.1;
  (%711, %712, meta[relay.Constant][50] /* ty=Tensor[(156), float64] */, meta[relay.Constant][51] /* ty=Tensor[(480), float64] */)
}

def @func_7657(%var_7542: Tensor[(15, 15, 8), float64], %var_7559: Tensor[(15, 15, 8), float64], %var_7569: Tensor[(15, 15, 8), int16]) -> (Tensor[(480), float64], Tensor[(10, 16, 5), float32], Tensor[(8, 100), float32], Tensor[(15, 15, 8), float64], Tensor[(15, 15, 8), bool], Tensor[(156), bool], Tensor[(156), float64], Tensor[(480), float64], Tensor[(15, 15, 8), float64], Tensor[(14, 6, 14), float64], Tensor[(156), float64]) {
  %713 = @func_5038() /* ty=(Tensor[(480), float64],) */;
  %714 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 100), float32] */, dtype="float32") /* ty=Tensor[(8, 100), float32] */;
  %715 = reshape(%714, newshape=[800]) /* ty=Tensor[(800), float32] */;
  %716 = @func_4018(%715) /* ty=(Tensor[(112), float32], Tensor[(10, 16, 5), float32], Tensor[(800), float32]) */;
  %717 = cast(%var_7542, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %718 = log2(%717) /* ty=Tensor[(15, 15, 8), float64] */;
  %719 = cast(%var_7559, dtype="int16") /* ty=Tensor[(15, 15, 8), int16] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%718, dtype="int16") /* ty=Tensor[(15, 15, 8), int16] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %723 = left_shift(%721, %722) /* ty=Tensor[(15, 15, 8), int16] */;
  %724 = cast(%var_7569, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%723, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %728 = power(%726, %727) /* ty=Tensor[(15, 15, 8), float64] */;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %730 = cos(%729) /* ty=Tensor[(15, 15, 8), float64] */;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %732 = cast(%var_7542, dtype="bool") /* ty=Tensor[(15, 15, 8), bool] */;
  %733 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%730, dtype="bool") /* ty=Tensor[(15, 15, 8), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %736 = cast(meta[relay.Constant][53] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %737 = reshape(%736, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %738 = @func_7378() /* ty=(Tensor[(480), float64],) */;
  %739 = cast(%var_7569, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %740 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%728, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %743 = floor_mod(%741, %742) /* ty=Tensor[(15, 15, 8), float64] */;
  %744 = cast(%743, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %745 = @func_3392() /* ty=(Tensor[(156), float64],) */;
  %746 = %713.0;
  %747 = %716.1;
  %748 = cosh(%731) /* ty=Tensor[(15, 15, 8), float64] */;
  %749 = equal(%734, %735) /* ty=Tensor[(15, 15, 8), bool] */;
  %750 = @func_3516(%737) /* ty=Tensor[(156), bool] */;
  %751 = %738.0;
  %752 = atan(%744) /* ty=Tensor[(15, 15, 8), float64] */;
  %753 = @func_7211() /* ty=Tensor[(14, 6, 14), float64] */;
  %754 = %745.0;
  (%746, %747, meta[relay.Constant][52] /* ty=Tensor[(8, 100), float32] */, %748, %749, %750, meta[relay.Constant][53] /* ty=Tensor[(156), float64] */, %751, %752, %753, %754)
}

def @func_869(%var_852: Tensor[(2, 12, 16), float32]) -> (Tensor[(2, 12, 16), float32],) {
  %755 = cast(%var_852, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
  %756 = rsqrt(%755) /* ty=Tensor[(2, 12, 16), float32] */;
  (%756,)
}

def @func_4603() -> Tensor[(480), float64] {
  @func_3200() /* ty=Tensor[(480), float64] */
}

def @main(%var_7719: Tensor[(15, 2, 7), float64], %var_7727: Tensor[(15, 2, 7), float64]) -> (Tensor[(15, 2, 7), int32],) {
  %757 = cast(%var_7719, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
  %758 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(15, 2, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(meta[relay.Constant][54] /* ty=Tensor[(15, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %761 = floor_divide(%759, %760) /* ty=Tensor[(15, 2, 7), float64] */;
  %762 = cast(%var_7727, dtype="int32") /* ty=Tensor[(15, 2, 7), int32] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="int32") /* ty=Tensor[(15, 2, 7), int32] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %766 = bitwise_and(%764, %765) /* ty=Tensor[(15, 2, 7), int32] */;
  (%766,)
}

def @func_6843(%var_6811: Tensor[(13, 7, 3), float64]) -> (Tensor[(156), float64], Tensor[(13, 7, 3), int64], Tensor[(13, 7, 3), float32]) {
  %767 = @func_3392() /* ty=(Tensor[(156), float64],) */;
  %768 = cast(%var_6811, dtype="float64") /* ty=Tensor[(13, 7, 3), float64] */;
  %769 = atanh(%768) /* ty=Tensor[(13, 7, 3), float64] */;
  %770 = cast(%769, dtype="int64") /* ty=Tensor[(13, 7, 3), int64] */;
  %771 = shape_of(%var_6811, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%var_6811, dtype="int64") /* ty=Tensor[(13, 7, 3), int64] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %774 = cast(%769, dtype="float32") /* ty=Tensor[(13, 7, 3), float32] */;
  %775 = %767.0;
  %776 = add(%772, %773) /* ty=Tensor[(13, 7, 3), int64] */;
  %777 = log10(%774) /* ty=Tensor[(13, 7, 3), float32] */;
  (%775, %776, %777)
}

def @func_5150() -> (Tensor[(480), float64], Tensor[(15, 2, 12), bool], Tensor[(360), bool]) {
  %778 = @func_3143() /* ty=(Tensor[(480), float64],) */;
  %779 = cast(meta[relay.Constant][55] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %780 = cast(meta[relay.Constant][55] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %781 = reshape(%779, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), bool] */;
  %782 = reshape(%780, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), bool] */;
  %783 = %778.0;
  %784 = @func_4207(%781, %782) /* ty=Tensor[(15, 2, 12), bool] */;
  (%783, %784, meta[relay.Constant][55] /* ty=Tensor[(360), bool] */)
}

def @func_4665() -> (Tensor[(480), float64],) {
  %785 = @func_3427() /* ty=(Tensor[(156), float64], Tensor[(480), float64], Tensor[(112), float32]) */;
  %786 = %785.1;
  (%786,)
}

def @func_6183(%var_6176: Tensor[(2112), float32]) -> (Tensor[(13, 12, 1), float64], Tensor[(2352), float64], Tensor[(2112), float32], Tensor[(16, 10, 3), float64]) {
  %787 = @func_4411() /* ty=(Tensor[(13, 12, 1), float64], Tensor[(78, 2), float64], Tensor[(90, 10), float32], Tensor[(280), uint32], Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(8, 60), float64], Tensor[(576), int32], Tensor[(250), uint8], Tensor[(36), int32]) */;
  %788 = cast(%var_6176, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %789 = %787.0;
  %790 = cast(%789, dtype="float64") /* ty=Tensor[(13, 12, 1), float64] */;
  %791 = reshape(%788, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
  %792 = reshape(%790, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %793 = @func_4090(%791, %792) /* ty=(Tensor[(480), float64], Tensor[(5, ?, 2), bool], Tensor[(1, 10), uint64], Tensor[(12), float64], Tensor[(2112), float32], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(12, 1, 14), float64], Tensor[(2352), float64], Tensor[(480), float64], Tensor[(384), float32], Tensor[(480), float64]) */;
  %794 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
  %795 = %793.8;
  %796 = %794.1;
  (%789, %795, %var_6176, %796)
}

def @func_2159(%var_2135: Tensor[(10, 11), float32]) -> Tensor[(10, 11), float32] {
  %797 = cast(%var_2135, dtype="float32") /* ty=Tensor[(10, 11), float32] */;
  cosh(%797) /* ty=Tensor[(10, 11), float32] */
}

def @func_4978() -> Tensor[(480), float64] {
  @func_3297() /* ty=Tensor[(480), float64] */
}

def @func_5626() -> (Tensor[(156), float64], Tensor[(480), float64]) {
  %798 = @func_3392() /* ty=(Tensor[(156), float64],) */;
  %799 = %798.0;
  %800 = @func_3297() /* ty=Tensor[(480), float64] */;
  (%799, %800)
}

def @func_6870(%var_6864: Tensor[(12), float64]) -> (Tensor[(480), float64], Tensor[(156), float64], Tensor[(132), float32], Tensor[(12), float64]) {
  %801 = @func_6455() /* ty=(Tensor[(480), float64],) */;
  %802 = @func_5626() /* ty=(Tensor[(156), float64], Tensor[(480), float64]) */;
  %803 = cast(%var_6864, dtype="float64") /* ty=Tensor[(12), float64] */;
  %804 = reshape(%803, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float64] */;
  %805 = @func_530(%804) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) */;
  %806 = %801.0;
  %807 = %802.0;
  %808 = %805.1;
  (%806, %807, %808, %var_6864)
}

def @func_2258(%var_2247: Tensor[(12, 14, 14), float64]) -> (Tensor[(12, 1, 14), float64], Tensor[(12, 14, 14), int32]) {
  %809 = cast(meta[relay.Constant][56] /* ty=Tensor[(12, 1, 14), float64] */, dtype="float64") /* ty=Tensor[(12, 1, 14), float64] */;
  %810 = cast(meta[relay.Constant][56] /* ty=Tensor[(12, 1, 14), float64] */, dtype="int32") /* ty=Tensor[(12, 1, 14), int32] */;
  %811 = cast(%var_2247, dtype="int32") /* ty=Tensor[(12, 14, 14), int32] */;
  %812 = tan(%809) /* ty=Tensor[(12, 1, 14), float64] */;
  %813 = logical_xor(%810, %811) /* ty=Tensor[(12, 14, 14), int32] */;
  (%812, %813)
}

def @func_2013(%var_2000: Tensor[(5, 12, 8), float64], %var_2001: Tensor[(5, 12, 8), float64]) -> (Tensor[(5, 12, 8), float32], Tensor[(2, 12, 16), float32], Tensor[(12, 32), float32]) {
  %814 = cast(%var_2001, dtype="float64") /* ty=Tensor[(5, 12, 8), float64] */;
  %815 = shape_of(%var_2000, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%var_2000, dtype="float64") /* ty=Tensor[(5, 12, 8), float64] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %818 = floor_mod(%816, %817) /* ty=Tensor[(5, 12, 8), float64] */;
  %819 = cast(%818, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
  %820 = cast(meta[relay.Constant][57] /* ty=Tensor[(12, 32), float32] */, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
  %821 = reshape(%820, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %822 = @func_869(%821) /* ty=(Tensor[(2, 12, 16), float32],) */;
  %823 = log(%819) /* ty=Tensor[(5, 12, 8), float32] */;
  %824 = %822.0;
  (%823, %824, meta[relay.Constant][57] /* ty=Tensor[(12, 32), float32] */)
}

def @func_6746() -> (Tensor[(14, 6, 14), float64], Tensor[(4, 7, 10), uint32], Tensor[(280), uint32], Tensor[(16, 10, 3), float64], Tensor[(78, 2), float64], Tensor[(480), float64]) {
  %825 = cast(meta[relay.Constant][58] /* ty=Tensor[(280), uint32] */, dtype="uint32") /* ty=Tensor[(280), uint32] */;
  %826 = reshape(%825, newshape=[4, 7, 10]) /* ty=Tensor[(4, 7, 10), uint32] */;
  %827 = cast(meta[relay.Constant][59] /* ty=Tensor[(78, 2), float64] */, dtype="float64") /* ty=Tensor[(78, 2), float64] */;
  %828 = cast(meta[relay.Constant][60] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %829 = reshape(%827, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %830 = reshape(%828, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %831 = @func_1380(%829, %830) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %832 = @func_4305() /* ty=Tensor[(14, 6, 14), float64] */;
  %833 = @func_428(%826) /* ty=Tensor[(4, 7, 10), uint32] */;
  %834 = %831.1;
  (%832, %833, meta[relay.Constant][58] /* ty=Tensor[(280), uint32] */, %834, meta[relay.Constant][59] /* ty=Tensor[(78, 2), float64] */, meta[relay.Constant][60] /* ty=Tensor[(480), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1383(%var_1381: Tensor[(13, 12, 1), float64], %var_1382: Tensor[(4, 120), float64]) -> (Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) {
  %8 = fn (%var_1362: Tensor[(13, 12, 1), float64], %var_1372: Tensor[(4, 120), float64]) -> (Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) {
    %0 = cast(%var_1362, dtype="float64") /* ty=Tensor[(13, 12, 1), float64] */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
    %2 = cast(%var_1372, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
    %3 = reshape(%1, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
    %4 = reshape(%2, newshape=[480, 1]) /* ty=Tensor[(480, 1), float64] */;
    %5 = @func_238(%3, %4) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) */;
    %6 = tan(%0) /* ty=Tensor[(13, 12, 1), float64] */;
    %7 = %5.1;
    (%6, %7, meta[relay.Constant][0] /* ty=Tensor[(132), float32] */, %var_1372)
  };
  %8(%var_1381, %var_1382) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */
}

def @func_7211() -> Tensor[(14, 6, 14), float64] {
  %9 = @func_3471() /* ty=(Tensor[(480), float64], Tensor[(14, 6, 14), float64], float64) */;
  %9.1
}

def @func_6186(%var_6184: Tensor[(2112), float32]) -> (Tensor[(13, 12, 1), float64], Tensor[(2352), float64], Tensor[(2112), float32], Tensor[(16, 10, 3), float64]) {
  @func_6183(%var_6184) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(2352), float64], Tensor[(2112), float32], Tensor[(16, 10, 3), float64]) */
}

def @func_5591(%var_5590: Tensor[(13, 10, 3), float32]) -> (Tensor[(13, 10, 3), float32], Tensor[(480), float64]) {
  %13 = fn (%var_5565: Tensor[(13, 10, 3), float32]) -> (Tensor[(13, 10, 3), float32], Tensor[(480), float64]) {
    %10 = cast(%var_5565, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
    %11 = log2(%10) /* ty=Tensor[(13, 10, 3), float32] */;
    %12 = @func_4603() /* ty=Tensor[(480), float64] */;
    (%11, %12)
  };
  %13(%var_5590) /* ty=(Tensor[(13, 10, 3), float32], Tensor[(480), float64]) */
}

def @func_3910() -> (Tensor[(480), float64], Tensor[(480), float64]) {
  @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */
}

def @func_6323() -> (Tensor[(12, 14, 10), bool],) {
  %14 = @func_6009() /* ty=Tensor[(12, 14, 10), bool] */;
  (%14,)
}

def @func_431(%var_429: Tensor[(4, 7, 10), uint32]) -> Tensor[(4, 7, 10), uint32] {
  @func_428(%var_429) /* ty=Tensor[(4, 7, 10), uint32] */
}

def @func_6748() -> (Tensor[(14, 6, 14), float64], Tensor[(4, 7, 10), uint32], Tensor[(280), uint32], Tensor[(16, 10, 3), float64], Tensor[(78, 2), float64], Tensor[(480), float64]) {
  @func_6746() /* ty=(Tensor[(14, 6, 14), float64], Tensor[(4, 7, 10), uint32], Tensor[(280), uint32], Tensor[(16, 10, 3), float64], Tensor[(78, 2), float64], Tensor[(480), float64]) */
}

def @func_4604() -> Tensor[(480), float64] {
  %15 = fn () -> Tensor[(480), float64] {
    @func_3200() /* ty=Tensor[(480), float64] */
  };
  %15() /* ty=Tensor[(480), float64] */
}

def @func_7379() -> (Tensor[(480), float64],) {
  %17 = fn () -> (Tensor[(480), float64],) {
    %16 = @func_3443() /* ty=Tensor[(480), float64] */;
    (%16,)
  };
  %17() /* ty=(Tensor[(480), float64],) */
}

def @func_6936(%var_6934: Tensor[(156), float32]) -> (Tensor[(156), uint64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(12, 48), int32], Tensor[(16, 10, 3), float64], Tensor[(112, 1), float32]) {
  @func_6933(%var_6934) /* ty=(Tensor[(156), uint64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(12, 48), int32], Tensor[(16, 10, 3), float64], Tensor[(112, 1), float32]) */
}

def @func_6183(%var_6176: Tensor[(2112), float32]) -> (Tensor[(13, 12, 1), float64], Tensor[(2352), float64], Tensor[(2112), float32], Tensor[(16, 10, 3), float64]) {
  %18 = @func_4411() /* ty=(Tensor[(13, 12, 1), float64], Tensor[(78, 2), float64], Tensor[(90, 10), float32], Tensor[(280), uint32], Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(8, 60), float64], Tensor[(576), int32], Tensor[(250), uint8], Tensor[(36), int32]) */;
  %19 = cast(%var_6176, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %20 = %18.0;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(13, 12, 1), float64] */;
  %22 = reshape(%19, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
  %23 = reshape(%21, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %24 = @func_4090(%22, %23) /* ty=(Tensor[(480), float64], Tensor[(5, ?, 2), bool], Tensor[(1, 10), uint64], Tensor[(12), float64], Tensor[(2112), float32], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(12, 1, 14), float64], Tensor[(2352), float64], Tensor[(480), float64], Tensor[(384), float32], Tensor[(480), float64]) */;
  %25 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
  %26 = %24.8;
  %27 = %25.1;
  (%20, %26, %var_6176, %27)
}

def @func_5769(%var_5766: Tensor[(900), float32], %var_5767: Tensor[(280), uint32], %var_5768: Tensor[(3, 52), float64]) -> (Tensor[(480), float64], Tensor[(480), float64], Tensor[(280), uint32], Tensor[(900), float32], Tensor[(280), uint32], Tensor[(3, 52), float32]) {
  %49 = fn (%var_5745: Tensor[(900), float32], %var_5746: Tensor[(280), uint32], %var_5752: Tensor[(3, 52), float64]) -> (Tensor[(480), float64], Tensor[(480), float64], Tensor[(280), uint32], Tensor[(900), float32], Tensor[(280), uint32], Tensor[(3, 52), float32]) {
    %28 = @func_3498() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
    %29 = @func_5368() /* ty=(Tensor[(480), float64],) */;
    %30 = cast(%var_5745, dtype="float32") /* ty=Tensor[(900), float32] */;
    %31 = cast(%var_5745, dtype="float32") /* ty=Tensor[(900), float32] */;
    %32 = cast(%var_5746, dtype="uint32") /* ty=Tensor[(280), uint32] */;
    %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 52), float64] */, dtype="float64") /* ty=Tensor[(3, 52), float64] */;
    %34 = cast(%var_5745, dtype="float32") /* ty=Tensor[(900), float32] */;
    %35 = reshape(%30, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float32] */;
    %36 = reshape(%31, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float32] */;
    %37 = reshape(%32, newshape=[280]) /* ty=Tensor[(280), uint32] */;
    %38 = reshape(%33, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %39 = reshape(%34, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float32] */;
    %40 = @func_1627(%35, %36, %37, %38, %39) /* ty=(Tensor[(6, 10, 15), float32], Tensor[(2, 12, 16), float32], Tensor[(384), float32], Tensor[(4, 7, 10), uint32], Tensor[(280), uint32], Tensor[(4, 120), float64], Tensor[(156), float64], Tensor[(8, 60), float64], Tensor[(16, 10, 3), float64], Tensor[(2, 12, 16), float32], Tensor[(480), float64], Tensor[(294), float32], Tensor[(36), int32], Tensor[(16, 10, 3), float64], Tensor[(6, 10, 15), float32], Tensor[(36), int32]) */;
    %41 = cast(%var_5752, dtype="float32") /* ty=Tensor[(3, 52), float32] */;
    %42 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(3, 52), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 52), float64] */, dtype="float32") /* ty=Tensor[(3, 52), float32] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %45 = %28.1;
    %46 = %29.0;
    %47 = %40.4;
    %48 = power(%43, %44) /* ty=Tensor[(3, 52), float32] */;
    (%45, %46, %47, %var_5745, %var_5746, %48)
  };
  %49(%var_5766, %var_5767, %var_5768) /* ty=(Tensor[(480), float64], Tensor[(480), float64], Tensor[(280), uint32], Tensor[(900), float32], Tensor[(280), uint32], Tensor[(3, 52), float32]) */
}

def @func_5426() -> (Tensor[(480), float64],) {
  %51 = fn () -> (Tensor[(480), float64],) {
    %50 = @func_3297() /* ty=Tensor[(480), float64] */;
    (%50,)
  };
  %51() /* ty=(Tensor[(480), float64],) */
}

def @func_7249(%var_7248: Tensor[(6, 8, 4), float64]) -> (Tensor[(6, 8, 4), float64],) {
  %54 = fn (%var_7233: Tensor[(6, 8, 4), float64]) -> (Tensor[(6, 8, 4), float64],) {
    %52 = cast(%var_7233, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
    %53 = acosh(%52) /* ty=Tensor[(6, 8, 4), float64] */;
    (%53,)
  };
  %54(%var_7248) /* ty=(Tensor[(6, 8, 4), float64],) */
}

def @func_6085(%var_6084: Tensor[(132), float32]) -> (Tensor[(480), float64], Tensor[(4, 11, 3), float32], Tensor[(132), float32]) {
  %63 = fn (%var_6080: Tensor[(132), float32]) -> (Tensor[(480), float64], Tensor[(4, 11, 3), float32], Tensor[(132), float32]) {
    %55 = @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
    %56 = cast(%var_6080, dtype="float32") /* ty=Tensor[(132), float32] */;
    %57 = %55.1;
    %58 = cast(%57, dtype="float64") /* ty=Tensor[(480), float64] */;
    %59 = reshape(%56, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
    %60 = reshape(%58, newshape=[480, 1]) /* ty=Tensor[(480, 1), float64] */;
    %61 = @func_238(%59, %60) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) */;
    %62 = %61.0;
    (%57, %62, %var_6080)
  };
  %63(%var_6084) /* ty=(Tensor[(480), float64], Tensor[(4, 11, 3), float32], Tensor[(132), float32]) */
}

def @func_2809(%var_2799: float64) -> Tensor[(14, 6, 14), float64] {
  %64 = cast(%var_2799, dtype="float64") /* ty=float64 */;
  %65 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(14, 6, 14), float64] */;
  mod(%64, %65) /* ty=Tensor[(14, 6, 14), float64] */
}

def @func_3499() -> (Tensor[(480), float64], Tensor[(480), float64]) {
  %70 = fn () -> (Tensor[(480), float64], Tensor[(480), float64]) {
    %66 = @func_3143() /* ty=(Tensor[(480), float64],) */;
    %67 = @func_3471() /* ty=(Tensor[(480), float64], Tensor[(14, 6, 14), float64], float64) */;
    %68 = %66.0;
    %69 = %67.0;
    (%68, %69)
  };
  %70() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */
}

def @func_5695() -> (Tensor[(480), float64], Tensor[(480), float64], Tensor[(480), float64], Tensor[(12, 1), float64], Tensor[(112, 1), float32]) {
  %71 = @func_5150() /* ty=(Tensor[(480), float64], Tensor[(15, 2, 12), bool], Tensor[(360), bool]) */;
  %72 = @func_5368() /* ty=(Tensor[(480), float64],) */;
  %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 1), float64] */;
  %74 = reshape(%73, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %75 = @func_4293(%74) /* ty=(Tensor[(480), float64], Tensor[(480), float64], Tensor[(12), float64]) */;
  %76 = @func_5439() /* ty=(Tensor[(112, 1), float32],) */;
  %77 = %71.0;
  %78 = %72.0;
  %79 = %75.0;
  %80 = %76.0;
  (%77, %78, %79, meta[relay.Constant][3] /* ty=Tensor[(12, 1), float64] */, %80)
}

def @func_5246(%var_5186: Tensor[(8, 14, 12), float64], %var_5220: Tensor[(576), int32]) -> (Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(480), float64], Tensor[(8, 14, 12), bool], Tensor[(480), float64]) {
  %81 = cast(meta[relay.Constant][4] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(36), int32] */;
  %82 = cast(%var_5220, dtype="int32") /* ty=Tensor[(576), int32] */;
  %83 = reshape(%81, newshape=[1, 9, 4]) /* ty=Tensor[(1, 9, 4), int32] */;
  %84 = reshape(%82, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), int32] */;
  %85 = @func_4665() /* ty=(Tensor[(480), float64],) */;
  %86 = cast(%var_5186, dtype="float64") /* ty=Tensor[(8, 14, 12), float64] */;
  %87 = asin(%86) /* ty=Tensor[(8, 14, 12), float64] */;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(8, 14, 12), float32] */;
  %89 = cosh(%88) /* ty=Tensor[(8, 14, 12), float32] */;
  %90 = cast(%var_5186, dtype="float64") /* ty=Tensor[(8, 14, 12), float64] */;
  %91 = sigmoid(%90) /* ty=Tensor[(8, 14, 12), float64] */;
  %92 = cast(%91, dtype="uint32") /* ty=Tensor[(8, 14, 12), uint32] */;
  %93 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%89, dtype="uint32") /* ty=Tensor[(8, 14, 12), uint32] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %96 = maximum(%94, %95) /* ty=Tensor[(8, 14, 12), uint32] */;
  %97 = cast(%91, dtype="bool") /* ty=Tensor[(8, 14, 12), bool] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%96, dtype="bool") /* ty=Tensor[(8, 14, 12), bool] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %101 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
  %102 = @func_299(%83, %84) /* ty=Tensor[(16, 9, 4), bool] */;
  %103 = %85.0;
  %104 = less(%99, %100) /* ty=Tensor[(8, 14, 12), bool] */;
  %105 = %101.3;
  (%102, meta[relay.Constant][4] /* ty=Tensor[(36), int32] */, %var_5220, %103, %104, %105)
}

def @func_6379(%var_6377: Tensor[(16, 14, 14), float32]) -> (Tensor[(16, 14, 14), float32], Tensor[(12, 14, 10), bool]) {
  @func_6376(%var_6377) /* ty=(Tensor[(16, 14, 14), float32], Tensor[(12, 14, 10), bool]) */
}

def @func_3472() -> (Tensor[(480), float64], Tensor[(14, 6, 14), float64], float64) {
  %112 = fn () -> (Tensor[(480), float64], Tensor[(14, 6, 14), float64], float64) {
    %106 = @func_3443() /* ty=Tensor[(480), float64] */;
    %107 = cast(%106, dtype="float64") /* ty=Tensor[(480), float64] */;
    %108 = cast(-0.379815f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %109 = reshape(%108, newshape=[]) /* ty=float64 */;
    %110 = exp(%107) /* ty=Tensor[(480), float64] */;
    %111 = @func_2809(%109) /* ty=Tensor[(14, 6, 14), float64] */;
    (%110, %111, -0.379815f64 /* ty=float64 */)
  };
  %112() /* ty=(Tensor[(480), float64], Tensor[(14, 6, 14), float64], float64) */
}

def @func_6843(%var_6811: Tensor[(13, 7, 3), float64]) -> (Tensor[(156), float64], Tensor[(13, 7, 3), int64], Tensor[(13, 7, 3), float32]) {
  %113 = @func_3392() /* ty=(Tensor[(156), float64],) */;
  %114 = cast(%var_6811, dtype="float64") /* ty=Tensor[(13, 7, 3), float64] */;
  %115 = atanh(%114) /* ty=Tensor[(13, 7, 3), float64] */;
  %116 = cast(%115, dtype="int64") /* ty=Tensor[(13, 7, 3), int64] */;
  %117 = shape_of(%var_6811, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%var_6811, dtype="int64") /* ty=Tensor[(13, 7, 3), int64] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %120 = cast(%115, dtype="float32") /* ty=Tensor[(13, 7, 3), float32] */;
  %121 = %113.0;
  %122 = add(%118, %119) /* ty=Tensor[(13, 7, 3), int64] */;
  %123 = log10(%120) /* ty=Tensor[(13, 7, 3), float32] */;
  (%121, %122, %123)
}

def @func_5369() -> (Tensor[(480), float64],) {
  %125 = fn () -> (Tensor[(480), float64],) {
    %124 = @func_4603() /* ty=Tensor[(480), float64] */;
    (%124,)
  };
  %125() /* ty=(Tensor[(480), float64],) */
}

def @func_3777() -> Tensor[(156), float32] {
  @func_3775() /* ty=Tensor[(156), float32] */
}

def @func_4725() -> Tensor[(480), float64] {
  %127 = fn () -> Tensor[(480), float64] {
    %126 = @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
    %126.0
  };
  %127() /* ty=Tensor[(480), float64] */
}

def @func_5150() -> (Tensor[(480), float64], Tensor[(15, 2, 12), bool], Tensor[(360), bool]) {
  %128 = @func_3143() /* ty=(Tensor[(480), float64],) */;
  %129 = cast(meta[relay.Constant][5] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %130 = cast(meta[relay.Constant][5] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %131 = reshape(%129, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), bool] */;
  %132 = reshape(%130, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), bool] */;
  %133 = %128.0;
  %134 = @func_4207(%131, %132) /* ty=Tensor[(15, 2, 12), bool] */;
  (%133, %134, meta[relay.Constant][5] /* ty=Tensor[(360), bool] */)
}

def @func_4665() -> (Tensor[(480), float64],) {
  %135 = @func_3427() /* ty=(Tensor[(156), float64], Tensor[(480), float64], Tensor[(112), float32]) */;
  %136 = %135.1;
  (%136,)
}

def @func_3297() -> Tensor[(480), float64] {
  @func_3200() /* ty=Tensor[(480), float64] */
}

def @func_7105() -> (Tensor[(480), float64],) {
  @func_7103() /* ty=(Tensor[(480), float64],) */
}

def @func_6139() -> (Tensor[(156), float32], Tensor[(156), float32], Tensor[(480), float64]) {
  %144 = fn () -> (Tensor[(156), float32], Tensor[(156), float32], Tensor[(480), float64]) {
    %137 = @func_3692() /* ty=Tensor[(156), float32] */;
    %138 = cast(%137, dtype="float32") /* ty=Tensor[(156), float32] */;
    %139 = cast(%137, dtype="float32") /* ty=Tensor[(156), float32] */;
    %140 = @func_4665() /* ty=(Tensor[(480), float64],) */;
    %141 = tan(%138) /* ty=Tensor[(156), float32] */;
    %142 = asin(%139) /* ty=Tensor[(156), float32] */;
    %143 = %140.0;
    (%141, %142, %143)
  };
  %144() /* ty=(Tensor[(156), float32], Tensor[(156), float32], Tensor[(480), float64]) */
}

def @func_3162(%var_3161: Tensor[(11, 8, 2), int32]) -> Tensor[(11, 8, 2), bool] {
  %147 = fn (%var_3156: Tensor[(11, 8, 2), int32]) -> Tensor[(11, 8, 2), bool] {
    %145 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 8, 2), int32] */, dtype="bool") /* ty=Tensor[(1, 8, 2), bool] */;
    %146 = cast(%var_3156, dtype="bool") /* ty=Tensor[(11, 8, 2), bool] */;
    equal(%145, %146) /* ty=Tensor[(11, 8, 2), bool] */
  };
  %147(%var_3161) /* ty=Tensor[(11, 8, 2), bool] */
}

def @func_3519(%var_3517: Tensor[(156), float64]) -> Tensor[(156), bool] {
  @func_3516(%var_3517) /* ty=Tensor[(156), bool] */
}

def @func_2762(%var_2759: Tensor[(10, 5, 5), uint8], %var_2760: Tensor[(10, 5, 5), uint8], %var_2761: Tensor[(36), int32]) -> (Tensor[(10, 5, 5), uint8], Tensor[(10, 5, 5), float32], Tensor[(576), int32], Tensor[(294), float32], Tensor[(480), float64], Tensor[(36), int32]) {
  %165 = fn (%var_2727: Tensor[(10, 5, 5), uint8], %var_2728: Tensor[(10, 5, 5), uint8], %var_2751: Tensor[(36), int32]) -> (Tensor[(10, 5, 5), uint8], Tensor[(10, 5, 5), float32], Tensor[(576), int32], Tensor[(294), float32], Tensor[(480), float64], Tensor[(36), int32]) {
    %148 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(10, 5, 5), uint8] */;
    %149 = shape_of(%var_2727, dtype="int32") /* ty=Tensor[(3), int32] */;
    %150 = cast(%var_2727, dtype="uint8") /* ty=Tensor[(10, 5, 5), uint8] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %152 = cast(%var_2727, dtype="float32") /* ty=Tensor[(10, 5, 5), float32] */;
    %153 = cast(meta[relay.Constant][7] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %154 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %155 = cast(%var_2751, dtype="int32") /* ty=Tensor[(36), int32] */;
    %156 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %157 = reshape(%153, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
    %158 = reshape(%154, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %159 = reshape(%155, newshape=[36]) /* ty=Tensor[(36), int32] */;
    %160 = reshape(%156, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
    %161 = @func_1109(%157, %158, %159, %160) /* ty=(Tensor[(3, 7, 14), bool], Tensor[(480), float64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(16, 10, 3), int64]) */;
    %162 = logical_xor(%150, %151) /* ty=Tensor[(10, 5, 5), uint8] */;
    %163 = sigmoid(%152) /* ty=Tensor[(10, 5, 5), float32] */;
    %164 = %161.4;
    (%162, %163, %164, meta[relay.Constant][7] /* ty=Tensor[(294), float32] */, meta[relay.Constant][8] /* ty=Tensor[(480), float64] */, %var_2751)
  };
  %165(%var_2759, %var_2760, %var_2761) /* ty=(Tensor[(10, 5, 5), uint8], Tensor[(10, 5, 5), float32], Tensor[(576), int32], Tensor[(294), float32], Tensor[(480), float64], Tensor[(36), int32]) */
}

def @func_532(%var_531: Tensor[(2, 1, 6), float64]) -> (Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) {
  %191 = fn (%var_482: Tensor[(2, 1, 6), float64]) -> (Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) {
    %166 = cast(meta[relay.Constant][9] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
    %167 = cast(meta[relay.Constant][10] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %168 = reshape(%166, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
    %169 = reshape(%167, newshape=[480, 1]) /* ty=Tensor[(480, 1), float64] */;
    %170 = @func_238(%168, %169) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) */;
    %171 = cast(meta[relay.Constant][10] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %172 = reshape(%171, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
    %173 = @func_12(%172) /* ty=(Tensor[(16, 10, 3), float64],) */;
    %174 = cast(meta[relay.Constant][10] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %175 = reshape(%174, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
    %176 = @func_12(%175) /* ty=(Tensor[(16, 10, 3), float64],) */;
    %177 = cast(%var_482, dtype="float64") /* ty=Tensor[(2, 1, 6), float64] */;
    %178 = log10(%177) /* ty=Tensor[(2, 1, 6), float64] */;
    %179 = cast(%178, dtype="float64") /* ty=Tensor[(2, 1, 6), float64] */;
    %180 = sigmoid(%179) /* ty=Tensor[(2, 1, 6), float64] */;
    %181 = cast(%180, dtype="float64") /* ty=Tensor[(2, 1, 6), float64] */;
    %182 = cos(%181) /* ty=Tensor[(2, 1, 6), float64] */;
    %183 = cast(%182, dtype="uint8") /* ty=Tensor[(2, 1, 6), uint8] */;
    %184 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
    %185 = cast(%180, dtype="uint8") /* ty=Tensor[(2, 1, 6), uint8] */;
    %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %187 = %170.0;
    %188 = %173.0;
    %189 = %176.0;
    %190 = subtract(%185, %186) /* ty=Tensor[(2, ?, 6), uint8] */;
    (%187, meta[relay.Constant][9] /* ty=Tensor[(132), float32] */, meta[relay.Constant][10] /* ty=Tensor[(480), float64] */, %188, %189, %190)
  };
  %191(%var_531) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) */
}

def @func_3957() -> (Tensor[(480), float32],) {
  %197 = fn () -> (Tensor[(480), float32],) {
    %192 = @func_3443() /* ty=Tensor[(480), float64] */;
    %193 = cast(%192, dtype="float64") /* ty=Tensor[(480), float64] */;
    %194 = cos(%193) /* ty=Tensor[(480), float64] */;
    %195 = cast(%194, dtype="float32") /* ty=Tensor[(480), float32] */;
    %196 = sin(%195) /* ty=Tensor[(480), float32] */;
    (%196,)
  };
  %197() /* ty=(Tensor[(480), float32],) */
}

def @func_4413() -> (Tensor[(13, 12, 1), float64], Tensor[(78, 2), float64], Tensor[(90, 10), float32], Tensor[(280), uint32], Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(8, 60), float64], Tensor[(576), int32], Tensor[(250), uint8], Tensor[(36), int32]) {
  @func_4411() /* ty=(Tensor[(13, 12, 1), float64], Tensor[(78, 2), float64], Tensor[(90, 10), float32], Tensor[(280), uint32], Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(8, 60), float64], Tensor[(576), int32], Tensor[(250), uint8], Tensor[(36), int32]) */
}

def @func_6290(%var_6288: Tensor[(2112), float32], %var_6289: Tensor[(156), float64]) -> (Tensor[(10, 8, 15), uint16], Tensor[(480), float64], Tensor[(2112), float32], Tensor[(156), float64], Tensor[(10, 8, 15), bool]) {
  %218 = fn (%var_6256: Tensor[(2112), float32], %var_6257: Tensor[(156), float64]) -> (Tensor[(10, 8, 15), uint16], Tensor[(480), float64], Tensor[(2112), float32], Tensor[(156), float64], Tensor[(10, 8, 15), bool]) {
    %198 = @func_4506() /* ty=(Tensor[(10, 8, 15), float64],) */;
    %199 = %198.0;
    %200 = cast(%199, dtype="float32") /* ty=Tensor[(10, 8, 15), float32] */;
    %201 = log10(%200) /* ty=Tensor[(10, 8, 15), float32] */;
    %202 = cast(%201, dtype="uint16") /* ty=Tensor[(10, 8, 15), uint16] */;
    %203 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
    %204 = cast(%199, dtype="uint16") /* ty=Tensor[(10, 8, 15), uint16] */;
    %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %206 = cast(%var_6256, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %207 = cast(%var_6257, dtype="float64") /* ty=Tensor[(156), float64] */;
    %208 = reshape(%206, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
    %209 = reshape(%207, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %210 = @func_4090(%208, %209) /* ty=(Tensor[(480), float64], Tensor[(5, ?, 2), bool], Tensor[(1, 10), uint64], Tensor[(12), float64], Tensor[(2112), float32], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(12, 1, 14), float64], Tensor[(2352), float64], Tensor[(480), float64], Tensor[(384), float32], Tensor[(480), float64]) */;
    %211 = cast(%199, dtype="bool") /* ty=Tensor[(10, 8, 15), bool] */;
    %212 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
    %213 = cast(%201, dtype="bool") /* ty=Tensor[(10, 8, 15), bool] */;
    %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %215 = bitwise_and(%204, %205) /* ty=Tensor[(10, 8, 15), uint16] */;
    %216 = %210.11;
    %217 = logical_or(%213, %214) /* ty=Tensor[(10, 8, 15), bool] */;
    (%215, %216, %var_6256, %var_6257, %217)
  };
  %218(%var_6288, %var_6289) /* ty=(Tensor[(10, 8, 15), uint16], Tensor[(480), float64], Tensor[(2112), float32], Tensor[(156), float64], Tensor[(10, 8, 15), bool]) */
}

def @func_2013(%var_2000: Tensor[(5, 12, 8), float64], %var_2001: Tensor[(5, 12, 8), float64]) -> (Tensor[(5, 12, 8), float32], Tensor[(2, 12, 16), float32], Tensor[(12, 32), float32]) {
  %219 = cast(%var_2001, dtype="float64") /* ty=Tensor[(5, 12, 8), float64] */;
  %220 = shape_of(%var_2000, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%var_2000, dtype="float64") /* ty=Tensor[(5, 12, 8), float64] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %223 = floor_mod(%221, %222) /* ty=Tensor[(5, 12, 8), float64] */;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
  %225 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 32), float32] */, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
  %226 = reshape(%225, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %227 = @func_869(%226) /* ty=(Tensor[(2, 12, 16), float32],) */;
  %228 = log(%224) /* ty=Tensor[(5, 12, 8), float32] */;
  %229 = %227.0;
  (%228, %229, meta[relay.Constant][11] /* ty=Tensor[(12, 32), float32] */)
}

def @func_3128() -> (Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) {
  %230 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 7, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 7, 1), float32] */;
  %231 = tan(%230) /* ty=Tensor[(14, 7, 1), float32] */;
  %232 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 7, 1), float32] */, dtype="bool") /* ty=Tensor[(14, 7, 1), bool] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="bool") /* ty=Tensor[(14, 7, 1), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %236 = less(%234, %235) /* ty=Tensor[(14, 7, ?), bool] */;
  %237 = cast(%231, dtype="float64") /* ty=Tensor[(14, 7, 1), float64] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="float64") /* ty=Tensor[(14, 7, ?), float64] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %241 = cast(meta[relay.Constant][13] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %242 = cast(meta[relay.Constant][14] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %243 = reshape(%241, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %244 = reshape(%242, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %245 = @func_1380(%243, %244) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %246 = divide(%239, %240) /* ty=Tensor[(14, 7, ?), float64] */;
  %247 = %245.1;
  (%246, %247, meta[relay.Constant][13] /* ty=Tensor[(156), float64] */, meta[relay.Constant][14] /* ty=Tensor[(480), float64] */)
}

def @func_4021(%var_4019: Tensor[(800), float32]) -> (Tensor[(112), float32], Tensor[(10, 16, 5), float32], Tensor[(800), float32]) {
  @func_4018(%var_4019) /* ty=(Tensor[(112), float32], Tensor[(10, 16, 5), float32], Tensor[(800), float32]) */
}

def @func_3692() -> Tensor[(156), float32] {
  %248 = @func_3392() /* ty=(Tensor[(156), float64],) */;
  %249 = %248.0;
  %250 = cast(%249, dtype="float32") /* ty=Tensor[(156), float32] */;
  sinh(%250) /* ty=Tensor[(156), float32] */
}

def @func_6376(%var_6354: Tensor[(16, 14, 14), float32]) -> (Tensor[(16, 14, 14), float32], Tensor[(12, 14, 10), bool]) {
  %251 = cast(%var_6354, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
  %252 = tan(%251) /* ty=Tensor[(16, 14, 14), float32] */;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
  %254 = exp(%253) /* ty=Tensor[(16, 14, 14), float32] */;
  %255 = @func_6009() /* ty=Tensor[(12, 14, 10), bool] */;
  (%254, %255)
}

def @func_15(%var_13: Tensor[(16, 10, 3), float64]) -> (Tensor[(16, 10, 3), float64],) {
  @func_12(%var_13) /* ty=(Tensor[(16, 10, 3), float64],) */
}

def @func_4506() -> (Tensor[(10, 8, 15), float64],) {
  %256 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 8, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 15), float64] */;
  %257 = asin(%256) /* ty=Tensor[(10, 8, 15), float64] */;
  (%257,)
}

def @func_1512(%var_1509: Tensor[(5, 1, 2), uint64], %var_1510: Tensor[(12), float64], %var_1511: Tensor[(132, 16), float32]) -> (Tensor[(16, 10, 3), float64], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(12), float64], Tensor[(5, ?, 2), bool], Tensor[(13, 12, 1), float64], Tensor[(39, 4), bool], Tensor[(4, 11, 3), float32], Tensor[(132, 16), bool], Tensor[(39, 4), float32]) {
  @func_1507(%var_1509, %var_1510, %var_1511) /* ty=(Tensor[(16, 10, 3), float64], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(12), float64], Tensor[(5, ?, 2), bool], Tensor[(13, 12, 1), float64], Tensor[(39, 4), bool], Tensor[(4, 11, 3), float32], Tensor[(132, 16), bool], Tensor[(39, 4), float32]) */
}

def @func_3394() -> (Tensor[(156), float64],) {
  @func_3392() /* ty=(Tensor[(156), float64],) */
}

def @func_1633(%var_1628: Tensor[(6, 10, 15), float32], %var_1629: Tensor[(6, 10, 15), float32], %var_1630: Tensor[(280), uint32], %var_1631: Tensor[(156), float64], %var_1632: Tensor[(6, 10, 15), float32]) -> (Tensor[(6, 10, 15), float32], Tensor[(2, 12, 16), float32], Tensor[(384), float32], Tensor[(4, 7, 10), uint32], Tensor[(280), uint32], Tensor[(4, 120), float64], Tensor[(156), float64], Tensor[(8, 60), float64], Tensor[(16, 10, 3), float64], Tensor[(2, 12, 16), float32], Tensor[(480), float64], Tensor[(294), float32], Tensor[(36), int32], Tensor[(16, 10, 3), float64], Tensor[(6, 10, 15), float32], Tensor[(36), int32]) {
  %319 = fn (%var_1532: Tensor[(6, 10, 15), float32], %var_1533: Tensor[(6, 10, 15), float32], %var_1554: Tensor[(280), uint32], %var_1565: Tensor[(156), float64], %var_1589: Tensor[(6, 10, 15), float32]) -> (Tensor[(6, 10, 15), float32], Tensor[(2, 12, 16), float32], Tensor[(384), float32], Tensor[(4, 7, 10), uint32], Tensor[(280), uint32], Tensor[(4, 120), float64], Tensor[(156), float64], Tensor[(8, 60), float64], Tensor[(16, 10, 3), float64], Tensor[(2, 12, 16), float32], Tensor[(480), float64], Tensor[(294), float32], Tensor[(36), int32], Tensor[(16, 10, 3), float64], Tensor[(6, 10, 15), float32], Tensor[(36), int32]) {
    %258 = cast(%var_1533, dtype="float32") /* ty=Tensor[(6, 10, 15), float32] */;
    %259 = shape_of(%var_1532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %260 = cast(%var_1532, dtype="float32") /* ty=Tensor[(6, 10, 15), float32] */;
    %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %262 = cast(meta[relay.Constant][16] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
    %263 = reshape(%262, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
    %264 = @func_869(%263) /* ty=(Tensor[(2, 12, 16), float32],) */;
    %265 = cast(%var_1554, dtype="uint32") /* ty=Tensor[(280), uint32] */;
    %266 = reshape(%265, newshape=[4, 7, 10]) /* ty=Tensor[(4, 7, 10), uint32] */;
    %267 = cast(%var_1565, dtype="float64") /* ty=Tensor[(156), float64] */;
    %268 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 60), float64] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
    %269 = reshape(%267, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
    %270 = reshape(%268, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
    %271 = @func_1380(%269, %270) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
    %272 = %271.3;
    %273 = cast(%272, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
    %274 = reshape(%273, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
    %275 = @func_12(%274) /* ty=(Tensor[(16, 10, 3), float64],) */;
    %276 = cast(meta[relay.Constant][16] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
    %277 = reshape(%276, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
    %278 = @func_869(%277) /* ty=(Tensor[(2, 12, 16), float32],) */;
    %279 = cast(meta[relay.Constant][18] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %280 = cast(%272, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
    %281 = cast(meta[relay.Constant][19] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(36), int32] */;
    %282 = cast(%272, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
    %283 = reshape(%279, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
    %284 = reshape(%280, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %285 = reshape(%281, newshape=[36]) /* ty=Tensor[(36), int32] */;
    %286 = reshape(%282, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
    %287 = @func_1109(%283, %284, %285, %286) /* ty=(Tensor[(3, 7, 14), bool], Tensor[(480), float64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(16, 10, 3), int64]) */;
    %288 = cast(%272, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
    %289 = reshape(%288, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
    %290 = @func_12(%289) /* ty=(Tensor[(16, 10, 3), float64],) */;
    %291 = cast(%var_1532, dtype="float32") /* ty=Tensor[(6, 10, 15), float32] */;
    %292 = sinh(%291) /* ty=Tensor[(6, 10, 15), float32] */;
    %293 = cast(%var_1589, dtype="float32") /* ty=Tensor[(6, 10, 15), float32] */;
    %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
    %295 = cast(%292, dtype="float32") /* ty=Tensor[(6, 10, 15), float32] */;
    %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %297 = floor_divide(%295, %296) /* ty=Tensor[(6, 10, 15), float32] */;
    %298 = cast(%297, dtype="float64") /* ty=Tensor[(6, 10, 15), float64] */;
    %299 = atanh(%298) /* ty=Tensor[(6, 10, 15), float64] */;
    %300 = cast(%299, dtype="float32") /* ty=Tensor[(6, 10, 15), float32] */;
    %301 = cast(meta[relay.Constant][18] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %302 = cast(%272, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
    %303 = cast(meta[relay.Constant][19] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(36), int32] */;
    %304 = %275.0;
    %305 = cast(%304, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
    %306 = reshape(%301, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
    %307 = reshape(%302, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %308 = reshape(%303, newshape=[36]) /* ty=Tensor[(36), int32] */;
    %309 = reshape(%305, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
    %310 = @func_1109(%306, %307, %308, %309) /* ty=(Tensor[(3, 7, 14), bool], Tensor[(480), float64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(16, 10, 3), int64]) */;
    %311 = mod(%260, %261) /* ty=Tensor[(6, 10, 15), float32] */;
    %312 = %264.0;
    %313 = @func_428(%266) /* ty=Tensor[(4, 7, 10), uint32] */;
    %314 = %278.0;
    %315 = %287.1;
    %316 = %290.0;
    %317 = sqrt(%300) /* ty=Tensor[(6, 10, 15), float32] */;
    %318 = %310.3;
    (%311, %312, meta[relay.Constant][16] /* ty=Tensor[(384), float32] */, %313, %var_1554, %272, %var_1565, meta[relay.Constant][17] /* ty=Tensor[(8, 60), float64] */, %304, %314, %315, meta[relay.Constant][18] /* ty=Tensor[(294), float32] */, meta[relay.Constant][19] /* ty=Tensor[(36), int32] */, %316, %317, %318)
  };
  %319(%var_1628, %var_1629, %var_1630, %var_1631, %var_1632) /* ty=(Tensor[(6, 10, 15), float32], Tensor[(2, 12, 16), float32], Tensor[(384), float32], Tensor[(4, 7, 10), uint32], Tensor[(280), uint32], Tensor[(4, 120), float64], Tensor[(156), float64], Tensor[(8, 60), float64], Tensor[(16, 10, 3), float64], Tensor[(2, 12, 16), float32], Tensor[(480), float64], Tensor[(294), float32], Tensor[(36), int32], Tensor[(16, 10, 3), float64], Tensor[(6, 10, 15), float32], Tensor[(36), int32]) */
}

def @func_869(%var_852: Tensor[(2, 12, 16), float32]) -> (Tensor[(2, 12, 16), float32],) {
  %320 = cast(%var_852, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
  %321 = rsqrt(%320) /* ty=Tensor[(2, 12, 16), float32] */;
  (%321,)
}

def @func_6009() -> Tensor[(12, 14, 10), bool] {
  %322 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 14, 10), float32] */, dtype="bool") /* ty=Tensor[(12, 14, 10), bool] */;
  %323 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(12, 14, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 14, 10), float32] */, dtype="bool") /* ty=Tensor[(12, 14, 10), bool] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%324, %325) /* ty=Tensor[(12, 14, 10), bool] */
}

def @func_3200() -> Tensor[(480), float64] {
  %326 = @func_3143() /* ty=(Tensor[(480), float64],) */;
  %326.0
}

def @func_3641(%var_3639: Tensor[(12), float64], %var_3640: Tensor[(384), float32]) -> (Tensor[(480), float64], Tensor[(2, ?, 6), uint8], Tensor[(12), float64], Tensor[(2, 12, 16), float32], Tensor[(384), float32]) {
  %337 = fn (%var_3603: Tensor[(12), float64], %var_3626: Tensor[(384), float32]) -> (Tensor[(480), float64], Tensor[(2, ?, 6), uint8], Tensor[(12), float64], Tensor[(2, 12, 16), float32], Tensor[(384), float32]) {
    %327 = @func_3498() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
    %328 = cast(%var_3603, dtype="float64") /* ty=Tensor[(12), float64] */;
    %329 = reshape(%328, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float64] */;
    %330 = @func_530(%329) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) */;
    %331 = cast(%var_3626, dtype="float32") /* ty=Tensor[(384), float32] */;
    %332 = reshape(%331, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
    %333 = @func_869(%332) /* ty=(Tensor[(2, 12, 16), float32],) */;
    %334 = %327.0;
    %335 = %330.5;
    %336 = %333.0;
    (%334, %335, %var_3603, %336, %var_3626)
  };
  %337(%var_3639, %var_3640) /* ty=(Tensor[(480), float64], Tensor[(2, ?, 6), uint8], Tensor[(12), float64], Tensor[(2, 12, 16), float32], Tensor[(384), float32]) */
}

def @func_6933(%var_6911: Tensor[(156), float32]) -> (Tensor[(156), uint64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(12, 48), int32], Tensor[(16, 10, 3), float64], Tensor[(112, 1), float32]) {
  %338 = @func_3775() /* ty=Tensor[(156), float32] */;
  %339 = cast(%var_6911, dtype="uint64") /* ty=Tensor[(156), uint64] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(1), int32] */;
  %341 = cast(%338, dtype="uint64") /* ty=Tensor[(156), uint64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %343 = cast(meta[relay.Constant][22] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(36), int32] */;
  %344 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 48), int32] */, dtype="int32") /* ty=Tensor[(12, 48), int32] */;
  %345 = reshape(%343, newshape=[1, 9, 4]) /* ty=Tensor[(1, 9, 4), int32] */;
  %346 = reshape(%344, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), int32] */;
  %347 = @func_5980() /* ty=(Tensor[(156), float64], Tensor[(16, 10, 3), float64]) */;
  %348 = @func_5007() /* ty=(Tensor[(156), float64], Tensor[(14, 8, 1), float32], Tensor[(112, 1), float32]) */;
  %349 = bitwise_xor(%341, %342) /* ty=Tensor[(156), uint64] */;
  %350 = @func_299(%345, %346) /* ty=Tensor[(16, 9, 4), bool] */;
  %351 = %347.1;
  %352 = %348.2;
  (%349, %350, meta[relay.Constant][22] /* ty=Tensor[(36), int32] */, meta[relay.Constant][23] /* ty=Tensor[(12, 48), int32] */, %351, %352)
}

def @func_394(%var_391: Tensor[(10, 16, 5), float32]) -> Tensor[(10, 16, 5), float32] {
  %353 = cast(%var_391, dtype="float32") /* ty=Tensor[(10, 16, 5), float32] */;
  exp(%353) /* ty=Tensor[(10, 16, 5), float32] */
}

def @func_2388(%var_2387: Tensor[(6, 9, 12), float64]) -> Tensor[(6, 9, 12), float64] {
  %355 = fn (%var_2382: Tensor[(6, 9, 12), float64]) -> Tensor[(6, 9, 12), float64] {
    %354 = cast(%var_2382, dtype="float64") /* ty=Tensor[(6, 9, 12), float64] */;
    acos(%354) /* ty=Tensor[(6, 9, 12), float64] */
  };
  %355(%var_2387) /* ty=Tensor[(6, 9, 12), float64] */
}

def @func_4905() -> Tensor[(480), float64] {
  @func_4903() /* ty=Tensor[(480), float64] */
}

def @func_6746() -> (Tensor[(14, 6, 14), float64], Tensor[(4, 7, 10), uint32], Tensor[(280), uint32], Tensor[(16, 10, 3), float64], Tensor[(78, 2), float64], Tensor[(480), float64]) {
  %356 = cast(meta[relay.Constant][24] /* ty=Tensor[(280), uint32] */, dtype="uint32") /* ty=Tensor[(280), uint32] */;
  %357 = reshape(%356, newshape=[4, 7, 10]) /* ty=Tensor[(4, 7, 10), uint32] */;
  %358 = cast(meta[relay.Constant][25] /* ty=Tensor[(78, 2), float64] */, dtype="float64") /* ty=Tensor[(78, 2), float64] */;
  %359 = cast(meta[relay.Constant][26] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %360 = reshape(%358, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %361 = reshape(%359, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %362 = @func_1380(%360, %361) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %363 = @func_4305() /* ty=Tensor[(14, 6, 14), float64] */;
  %364 = @func_428(%357) /* ty=Tensor[(4, 7, 10), uint32] */;
  %365 = %362.1;
  (%363, %364, meta[relay.Constant][24] /* ty=Tensor[(280), uint32] */, %365, meta[relay.Constant][25] /* ty=Tensor[(78, 2), float64] */, meta[relay.Constant][26] /* ty=Tensor[(480), float64] */)
}

def @func_6660() -> (Tensor[(480), float64], Tensor[(132), float32], Tensor[(156), bool], Tensor[(156), bool], Tensor[(156), bool], Tensor[(14, 6, 14), float64], Tensor[(156), float64], Tensor[(10, 16, 5), float32], Tensor[(800), float32], Tensor[(5, 12, 8), float32], Tensor[(1, 9), float32], float32, Tensor[(9, 1), float32]) {
  %408 = fn () -> (Tensor[(480), float64], Tensor[(132), float32], Tensor[(156), bool], Tensor[(156), bool], Tensor[(156), bool], Tensor[(14, 6, 14), float64], Tensor[(156), float64], Tensor[(10, 16, 5), float32], Tensor[(800), float32], Tensor[(5, 12, 8), float32], Tensor[(1, 9), float32], float32, Tensor[(9, 1), float32]) {
    %366 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
    %367 = %366.2;
    %368 = cast(%367, dtype="float64") /* ty=Tensor[(156), float64] */;
    %369 = @func_4903() /* ty=Tensor[(480), float64] */;
    %370 = cast(%369, dtype="float64") /* ty=Tensor[(480), float64] */;
    %371 = reshape(%368, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
    %372 = reshape(%370, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
    %373 = @func_1380(%371, %372) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
    %374 = cast(%367, dtype="float64") /* ty=Tensor[(156), float64] */;
    %375 = reshape(%374, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %376 = @func_3516(%375) /* ty=Tensor[(156), bool] */;
    %377 = cast(%367, dtype="bool") /* ty=Tensor[(156), bool] */;
    %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(1), int32] */;
    %379 = cast(%376, dtype="bool") /* ty=Tensor[(156), bool] */;
    %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?), bool] */;
    %381 = cast(%367, dtype="float64") /* ty=Tensor[(156), float64] */;
    %382 = reshape(%381, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %383 = cast(%367, dtype="float64") /* ty=Tensor[(156), float64] */;
    %384 = reshape(%383, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %385 = @func_3471() /* ty=(Tensor[(480), float64], Tensor[(14, 6, 14), float64], float64) */;
    %386 = @func_5626() /* ty=(Tensor[(156), float64], Tensor[(480), float64]) */;
    %387 = cast(meta[relay.Constant][27] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
    %388 = reshape(%387, newshape=[800]) /* ty=Tensor[(800), float32] */;
    %389 = @func_4018(%388) /* ty=(Tensor[(112), float32], Tensor[(10, 16, 5), float32], Tensor[(800), float32]) */;
    %390 = cast(%369, dtype="float64") /* ty=Tensor[(480), float64] */;
    %391 = cast(%369, dtype="float64") /* ty=Tensor[(480), float64] */;
    %392 = reshape(%390, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float64] */;
    %393 = reshape(%391, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float64] */;
    %394 = @func_2013(%392, %393) /* ty=(Tensor[(5, 12, 8), float32], Tensor[(2, 12, 16), float32], Tensor[(12, 32), float32]) */;
    %395 = cast(-9.72162f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %396 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 1), float32] */;
    %397 = reshape(%395, newshape=[]) /* ty=float32 */;
    %398 = reshape(%396, newshape=[1, 9]) /* ty=Tensor[(1, 9), float32] */;
    %399 = %373.2;
    %400 = not_equal(%379, %380) /* ty=Tensor[(156), bool] */;
    %401 = @func_3516(%382) /* ty=Tensor[(156), bool] */;
    %402 = @func_3516(%384) /* ty=Tensor[(156), bool] */;
    %403 = %385.1;
    %404 = %386.0;
    %405 = %389.1;
    %406 = %394.0;
    %407 = @func_5555(%397, %398) /* ty=Tensor[(1, 9), float32] */;
    (%369, %399, %400, %401, %402, %403, %404, %405, meta[relay.Constant][27] /* ty=Tensor[(800), float32] */, %406, %407, -9.72162f /* ty=float32 */, meta[relay.Constant][28] /* ty=Tensor[(9, 1), float32] */)
  };
  %408() /* ty=(Tensor[(480), float64], Tensor[(132), float32], Tensor[(156), bool], Tensor[(156), bool], Tensor[(156), bool], Tensor[(14, 6, 14), float64], Tensor[(156), float64], Tensor[(10, 16, 5), float32], Tensor[(800), float32], Tensor[(5, 12, 8), float32], Tensor[(1, 9), float32], float32, Tensor[(9, 1), float32]) */
}

def @func_3872(%var_3871: Tensor[(480), float64]) -> Tensor[(480), bool] {
  %415 = fn (%var_3865: Tensor[(480), float64]) -> Tensor[(480), bool] {
    %409 = @func_3427() /* ty=(Tensor[(156), float64], Tensor[(480), float64], Tensor[(112), float32]) */;
    %410 = %409.1;
    %411 = cast(%var_3865, dtype="bool") /* ty=Tensor[(480), bool] */;
    %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(1), int32] */;
    %413 = cast(%410, dtype="bool") /* ty=Tensor[(480), bool] */;
    %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?), bool] */;
    greater_equal(%413, %414) /* ty=Tensor[(480), bool] */
  };
  %415(%var_3871) /* ty=Tensor[(480), bool] */
}

def @func_4305() -> Tensor[(14, 6, 14), float64] {
  %416 = @func_3471() /* ty=(Tensor[(480), float64], Tensor[(14, 6, 14), float64], float64) */;
  %416.1
}

def @func_7359() -> (Tensor[(10, 8, 15), float64], Tensor[(10, 8, 15), float64]) {
  %420 = fn () -> (Tensor[(10, 8, 15), float64], Tensor[(10, 8, 15), float64]) {
    %417 = @func_5661() /* ty=(Tensor[(10, 8, 15), float64], Tensor[(480), float64], Tensor[(65, 6), float32]) */;
    %418 = @func_7028() /* ty=Tensor[(10, 8, 15), float64] */;
    %419 = %417.0;
    (%418, %419)
  };
  %420() /* ty=(Tensor[(10, 8, 15), float64], Tensor[(10, 8, 15), float64]) */
}

def @func_3775() -> Tensor[(156), float32] {
  %421 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
  %422 = %421.2;
  %423 = cast(%422, dtype="float32") /* ty=Tensor[(156), float32] */;
  erf(%423) /* ty=Tensor[(156), float32] */
}

def @func_4903() -> Tensor[(480), float64] {
  %424 = @func_4665() /* ty=(Tensor[(480), float64],) */;
  %424.0
}

def @func_6872(%var_6871: Tensor[(12), float64]) -> (Tensor[(480), float64], Tensor[(156), float64], Tensor[(132), float32], Tensor[(12), float64]) {
  %433 = fn (%var_6864: Tensor[(12), float64]) -> (Tensor[(480), float64], Tensor[(156), float64], Tensor[(132), float32], Tensor[(12), float64]) {
    %425 = @func_6455() /* ty=(Tensor[(480), float64],) */;
    %426 = @func_5626() /* ty=(Tensor[(156), float64], Tensor[(480), float64]) */;
    %427 = cast(%var_6864, dtype="float64") /* ty=Tensor[(12), float64] */;
    %428 = reshape(%427, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float64] */;
    %429 = @func_530(%428) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) */;
    %430 = %425.0;
    %431 = %426.0;
    %432 = %429.1;
    (%430, %431, %432, %var_6864)
  };
  %433(%var_6871) /* ty=(Tensor[(480), float64], Tensor[(156), float64], Tensor[(132), float32], Tensor[(12), float64]) */
}

def @func_6682(%var_6680: Tensor[(4, 5, 2), int32], %var_6681: Tensor[(4, 5, 2), int32]) -> (Tensor[(4, 5, 2), int32], Tensor[(4, 5, 2), float32]) {
  %441 = fn (%var_6661: Tensor[(4, 5, 2), int32], %var_6662: Tensor[(4, 5, 2), int32]) -> (Tensor[(4, 5, 2), int32], Tensor[(4, 5, 2), float32]) {
    %434 = cast(%var_6662, dtype="int32") /* ty=Tensor[(4, 5, 2), int32] */;
    %435 = shape_of(%var_6661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %436 = cast(%var_6661, dtype="int32") /* ty=Tensor[(4, 5, 2), int32] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %438 = cast(%var_6662, dtype="float32") /* ty=Tensor[(4, 5, 2), float32] */;
    %439 = subtract(%436, %437) /* ty=Tensor[(4, 5, 2), int32] */;
    %440 = log(%438) /* ty=Tensor[(4, 5, 2), float32] */;
    (%439, %440)
  };
  %441(%var_6680, %var_6681) /* ty=(Tensor[(4, 5, 2), int32], Tensor[(4, 5, 2), float32]) */
}

def @func_1507(%var_1418: Tensor[(5, 1, 2), uint64], %var_1439: Tensor[(12), float64], %var_1493: Tensor[(132, 16), float32]) -> (Tensor[(16, 10, 3), float64], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(12), float64], Tensor[(5, ?, 2), bool], Tensor[(13, 12, 1), float64], Tensor[(39, 4), bool], Tensor[(4, 11, 3), float32], Tensor[(132, 16), bool], Tensor[(39, 4), float32]) {
  %442 = cast(meta[relay.Constant][29] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %443 = reshape(%442, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %444 = @func_12(%443) /* ty=(Tensor[(16, 10, 3), float64],) */;
  %445 = cast(%var_1439, dtype="float64") /* ty=Tensor[(12), float64] */;
  %446 = reshape(%445, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float64] */;
  %447 = @func_530(%446) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) */;
  %448 = cast(%var_1418, dtype="bool") /* ty=Tensor[(5, 1, 2), bool] */;
  %449 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(5, 1, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 1, 2), uint64] */, dtype="bool") /* ty=Tensor[(5, 1, 2), bool] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %452 = greater_equal(%450, %451) /* ty=Tensor[(5, ?, 2), bool] */;
  %453 = cast(%var_1418, dtype="bool") /* ty=Tensor[(5, 1, 2), bool] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="bool") /* ty=Tensor[(5, ?, 2), bool] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %457 = logical_or(%455, %456) /* ty=Tensor[(5, ?, 2), bool] */;
  %458 = cast(%452, dtype="bool") /* ty=Tensor[(5, ?, 2), bool] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%457, dtype="bool") /* ty=Tensor[(5, ?, 2), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %462 = cast(meta[relay.Constant][31] /* ty=Tensor[(39, 4), float64] */, dtype="float64") /* ty=Tensor[(39, 4), float64] */;
  %463 = %444.0;
  %464 = cast(%463, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %465 = reshape(%462, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %466 = reshape(%464, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %467 = @func_1380(%465, %466) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %468 = cast(meta[relay.Constant][32] /* ty=Tensor[(39, 4), float64] */, dtype="bool") /* ty=Tensor[(39, 4), bool] */;
  %469 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(39, 4), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %470 = cast(meta[relay.Constant][31] /* ty=Tensor[(39, 4), float64] */, dtype="bool") /* ty=Tensor[(39, 4), bool] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %472 = cast(meta[relay.Constant][33] /* ty=Tensor[(132, 1), float32] */, dtype="float32") /* ty=Tensor[(132, 1), float32] */;
  %473 = cast(%463, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %474 = reshape(%472, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %475 = reshape(%473, newshape=[480, 1]) /* ty=Tensor[(480, 1), float64] */;
  %476 = @func_238(%474, %475) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) */;
  %477 = cast(meta[relay.Constant][33] /* ty=Tensor[(132, 1), float32] */, dtype="bool") /* ty=Tensor[(132, 1), bool] */;
  %478 = cast(%var_1493, dtype="bool") /* ty=Tensor[(132, 16), bool] */;
  %479 = cast(meta[relay.Constant][32] /* ty=Tensor[(39, 4), float64] */, dtype="float32") /* ty=Tensor[(39, 4), float32] */;
  %480 = %447.4;
  %481 = not_equal(%460, %461) /* ty=Tensor[(5, ?, 2), bool] */;
  %482 = %467.0;
  %483 = not_equal(%470, %471) /* ty=Tensor[(39, 4), bool] */;
  %484 = %476.0;
  %485 = logical_and(%477, %478) /* ty=Tensor[(132, 16), bool] */;
  %486 = acos(%479) /* ty=Tensor[(39, 4), float32] */;
  (%463, meta[relay.Constant][29] /* ty=Tensor[(480), float64] */, %480, %var_1439, %481, %482, %483, %484, %485, %486)
}

def @func_4588() -> (Tensor[(10, 8, 15), float64], Tensor[(14, 6, 14), float32], Tensor[(10, 8, 15), float64], Tensor[(480), float64], Tensor[(480), float32]) {
  %497 = fn () -> (Tensor[(10, 8, 15), float64], Tensor[(14, 6, 14), float32], Tensor[(10, 8, 15), float64], Tensor[(480), float64], Tensor[(480), float32]) {
    %487 = @func_4506() /* ty=(Tensor[(10, 8, 15), float64],) */;
    %488 = @func_4305() /* ty=Tensor[(14, 6, 14), float64] */;
    %489 = cast(%488, dtype="float32") /* ty=Tensor[(14, 6, 14), float32] */;
    %490 = @func_4506() /* ty=(Tensor[(10, 8, 15), float64],) */;
    %491 = @func_3956() /* ty=(Tensor[(480), float32],) */;
    %492 = %487.0;
    %493 = log10(%489) /* ty=Tensor[(14, 6, 14), float32] */;
    %494 = %490.0;
    %495 = @func_3200() /* ty=Tensor[(480), float64] */;
    %496 = %491.0;
    (%492, %493, %494, %495, %496)
  };
  %497() /* ty=(Tensor[(10, 8, 15), float64], Tensor[(14, 6, 14), float32], Tensor[(10, 8, 15), float64], Tensor[(480), float64], Tensor[(480), float32]) */
}

def @func_3369(%var_3368: Tensor[(14, 8, 1), float32]) -> (Tensor[(14, 8, 1), float32], Tensor[(16, 10, 3), float64], Tensor[(480), float64]) {
  %504 = fn (%var_3340: Tensor[(14, 8, 1), float32]) -> (Tensor[(14, 8, 1), float32], Tensor[(16, 10, 3), float64], Tensor[(480), float64]) {
    %498 = cast(%var_3340, dtype="float32") /* ty=Tensor[(14, 8, 1), float32] */;
    %499 = cast(meta[relay.Constant][34] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %500 = reshape(%499, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
    %501 = @func_12(%500) /* ty=(Tensor[(16, 10, 3), float64],) */;
    %502 = sqrt(%498) /* ty=Tensor[(14, 8, 1), float32] */;
    %503 = %501.0;
    (%502, %503, meta[relay.Constant][34] /* ty=Tensor[(480), float64] */)
  };
  %504(%var_3368) /* ty=(Tensor[(14, 8, 1), float32], Tensor[(16, 10, 3), float64], Tensor[(480), float64]) */
}

def @func_1115(%var_1111: Tensor[(3, 7, 14), float32], %var_1112: Tensor[(480), float64], %var_1113: Tensor[(36), int32], %var_1114: Tensor[(16, 10, 3), float64]) -> (Tensor[(3, 7, 14), bool], Tensor[(480), float64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(16, 10, 3), int64]) {
  @func_1109(%var_1111, %var_1112, %var_1113, %var_1114) /* ty=(Tensor[(3, 7, 14), bool], Tensor[(480), float64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(16, 10, 3), int64]) */
}

def @func_7394() -> (Tensor[(480), float64], Tensor[(9, 1), float32]) {
  %505 = @func_6659() /* ty=(Tensor[(480), float64], Tensor[(132), float32], Tensor[(156), bool], Tensor[(156), bool], Tensor[(156), bool], Tensor[(14, 6, 14), float64], Tensor[(156), float64], Tensor[(10, 16, 5), float32], Tensor[(800), float32], Tensor[(5, 12, 8), float32], Tensor[(1, 9), float32], float32, Tensor[(9, 1), float32]) */;
  %506 = @func_3297() /* ty=Tensor[(480), float64] */;
  %507 = %505.12;
  (%506, %507)
}

def @func_6325() -> (Tensor[(12, 14, 10), bool],) {
  @func_6323() /* ty=(Tensor[(12, 14, 10), bool],) */
}

def @func_7396() -> (Tensor[(480), float64], Tensor[(9, 1), float32]) {
  @func_7394() /* ty=(Tensor[(480), float64], Tensor[(9, 1), float32]) */
}

def @func_3130() -> (Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) {
  @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */
}

def @func_7213() -> Tensor[(14, 6, 14), float64] {
  @func_7211() /* ty=Tensor[(14, 6, 14), float64] */
}

def @func_5697() -> (Tensor[(480), float64], Tensor[(480), float64], Tensor[(480), float64], Tensor[(12, 1), float64], Tensor[(112, 1), float32]) {
  @func_5695() /* ty=(Tensor[(480), float64], Tensor[(480), float64], Tensor[(480), float64], Tensor[(12, 1), float64], Tensor[(112, 1), float32]) */
}

def @func_7661(%var_7658: Tensor[(15, 15, 8), float64], %var_7659: Tensor[(15, 15, 8), float64], %var_7660: Tensor[(15, 15, 8), int16]) -> (Tensor[(480), float64], Tensor[(10, 16, 5), float32], Tensor[(8, 100), float32], Tensor[(15, 15, 8), float64], Tensor[(15, 15, 8), bool], Tensor[(156), bool], Tensor[(156), float64], Tensor[(480), float64], Tensor[(15, 15, 8), float64], Tensor[(14, 6, 14), float64], Tensor[(156), float64]) {
  %550 = fn (%var_7542: Tensor[(15, 15, 8), float64], %var_7559: Tensor[(15, 15, 8), float64], %var_7569: Tensor[(15, 15, 8), int16]) -> (Tensor[(480), float64], Tensor[(10, 16, 5), float32], Tensor[(8, 100), float32], Tensor[(15, 15, 8), float64], Tensor[(15, 15, 8), bool], Tensor[(156), bool], Tensor[(156), float64], Tensor[(480), float64], Tensor[(15, 15, 8), float64], Tensor[(14, 6, 14), float64], Tensor[(156), float64]) {
    %508 = @func_5038() /* ty=(Tensor[(480), float64],) */;
    %509 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 100), float32] */, dtype="float32") /* ty=Tensor[(8, 100), float32] */;
    %510 = reshape(%509, newshape=[800]) /* ty=Tensor[(800), float32] */;
    %511 = @func_4018(%510) /* ty=(Tensor[(112), float32], Tensor[(10, 16, 5), float32], Tensor[(800), float32]) */;
    %512 = cast(%var_7542, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
    %513 = log2(%512) /* ty=Tensor[(15, 15, 8), float64] */;
    %514 = cast(%var_7559, dtype="int16") /* ty=Tensor[(15, 15, 8), int16] */;
    %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
    %516 = cast(%513, dtype="int16") /* ty=Tensor[(15, 15, 8), int16] */;
    %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %518 = left_shift(%516, %517) /* ty=Tensor[(15, 15, 8), int16] */;
    %519 = cast(%var_7569, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
    %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(%518, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %523 = power(%521, %522) /* ty=Tensor[(15, 15, 8), float64] */;
    %524 = cast(%523, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
    %525 = cos(%524) /* ty=Tensor[(15, 15, 8), float64] */;
    %526 = cast(%525, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
    %527 = cast(%var_7542, dtype="bool") /* ty=Tensor[(15, 15, 8), bool] */;
    %528 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
    %529 = cast(%525, dtype="bool") /* ty=Tensor[(15, 15, 8), bool] */;
    %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %531 = cast(meta[relay.Constant][36] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
    %532 = reshape(%531, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %533 = @func_7378() /* ty=(Tensor[(480), float64],) */;
    %534 = cast(%var_7569, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
    %535 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
    %536 = cast(%523, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
    %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %538 = floor_mod(%536, %537) /* ty=Tensor[(15, 15, 8), float64] */;
    %539 = cast(%538, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
    %540 = @func_3392() /* ty=(Tensor[(156), float64],) */;
    %541 = %508.0;
    %542 = %511.1;
    %543 = cosh(%526) /* ty=Tensor[(15, 15, 8), float64] */;
    %544 = equal(%529, %530) /* ty=Tensor[(15, 15, 8), bool] */;
    %545 = @func_3516(%532) /* ty=Tensor[(156), bool] */;
    %546 = %533.0;
    %547 = atan(%539) /* ty=Tensor[(15, 15, 8), float64] */;
    %548 = @func_7211() /* ty=Tensor[(14, 6, 14), float64] */;
    %549 = %540.0;
    (%541, %542, meta[relay.Constant][35] /* ty=Tensor[(8, 100), float32] */, %543, %544, %545, meta[relay.Constant][36] /* ty=Tensor[(156), float64] */, %546, %547, %548, %549)
  };
  %550(%var_7658, %var_7659, %var_7660) /* ty=(Tensor[(480), float64], Tensor[(10, 16, 5), float32], Tensor[(8, 100), float32], Tensor[(15, 15, 8), float64], Tensor[(15, 15, 8), bool], Tensor[(156), bool], Tensor[(156), float64], Tensor[(480), float64], Tensor[(15, 15, 8), float64], Tensor[(14, 6, 14), float64], Tensor[(156), float64]) */
}

def @func_3516(%var_3510: Tensor[(156), float64]) -> Tensor[(156), bool] {
  %551 = @func_3392() /* ty=(Tensor[(156), float64],) */;
  %552 = %551.0;
  %553 = cast(%var_3510, dtype="bool") /* ty=Tensor[(156), bool] */;
  %554 = shape_of(%552, dtype="int32") /* ty=Tensor[(1), int32] */;
  %555 = cast(%552, dtype="bool") /* ty=Tensor[(156), bool] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?), bool] */;
  less(%555, %556) /* ty=Tensor[(156), bool] */
}

def @func_5922(%var_5920: Tensor[(480), float64], %var_5921: Tensor[(12, 32), float32]) -> (Tensor[(360), bool], Tensor[(480), float64], Tensor[(12, 32), uint16]) {
  @func_5918(%var_5920, %var_5921) /* ty=(Tensor[(360), bool], Tensor[(480), float64], Tensor[(12, 32), uint16]) */
}

def @func_4018(%var_4013: Tensor[(800), float32]) -> (Tensor[(112), float32], Tensor[(10, 16, 5), float32], Tensor[(800), float32]) {
  %557 = @func_3427() /* ty=(Tensor[(156), float64], Tensor[(480), float64], Tensor[(112), float32]) */;
  %558 = cast(%var_4013, dtype="float32") /* ty=Tensor[(800), float32] */;
  %559 = reshape(%558, newshape=[10, 16, 5]) /* ty=Tensor[(10, 16, 5), float32] */;
  %560 = %557.2;
  %561 = @func_394(%559) /* ty=Tensor[(10, 16, 5), float32] */;
  (%560, %561, %var_4013)
}

def @func_3145() -> (Tensor[(480), float64],) {
  @func_3143() /* ty=(Tensor[(480), float64],) */
}

def @func_6457() -> (Tensor[(480), float64],) {
  @func_6455() /* ty=(Tensor[(480), float64],) */
}

def @func_3143() -> (Tensor[(480), float64],) {
  %562 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
  %563 = %562.3;
  (%563,)
}

def @func_5250(%var_5248: Tensor[(8, 14, 12), float64], %var_5249: Tensor[(576), int32]) -> (Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(480), float64], Tensor[(8, 14, 12), bool], Tensor[(480), float64]) {
  @func_5246(%var_5248, %var_5249) /* ty=(Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(480), float64], Tensor[(8, 14, 12), bool], Tensor[(480), float64]) */
}

def @func_397(%var_395: Tensor[(10, 16, 5), float32]) -> Tensor[(10, 16, 5), float32] {
  @func_394(%var_395) /* ty=Tensor[(10, 16, 5), float32] */
}

def @func_5559(%var_5557: float32, %var_5558: Tensor[(1, 9), float32]) -> Tensor[(1, 9), float32] {
  @func_5555(%var_5557, %var_5558) /* ty=Tensor[(1, 9), float32] */
}

def @func_5981() -> (Tensor[(156), float64], Tensor[(16, 10, 3), float64]) {
  %567 = fn () -> (Tensor[(156), float64], Tensor[(16, 10, 3), float64]) {
    %564 = @func_5007() /* ty=(Tensor[(156), float64], Tensor[(14, 8, 1), float32], Tensor[(112, 1), float32]) */;
    %565 = %564.0;
    %566 = @func_3884() /* ty=Tensor[(16, 10, 3), float64] */;
    (%565, %566)
  };
  %567() /* ty=(Tensor[(156), float64], Tensor[(16, 10, 3), float64]) */
}

def @func_3299() -> Tensor[(480), float64] {
  @func_3297() /* ty=Tensor[(480), float64] */
}

def @func_5627() -> (Tensor[(156), float64], Tensor[(480), float64]) {
  %571 = fn () -> (Tensor[(156), float64], Tensor[(480), float64]) {
    %568 = @func_3392() /* ty=(Tensor[(156), float64],) */;
    %569 = %568.0;
    %570 = @func_3297() /* ty=Tensor[(480), float64] */;
    (%569, %570)
  };
  %571() /* ty=(Tensor[(156), float64], Tensor[(480), float64]) */
}

def @func_3392() -> (Tensor[(156), float64],) {
  %572 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
  %573 = %572.2;
  (%573,)
}

def @func_3908() -> (Tensor[(480), float64], Tensor[(480), float64]) {
  %574 = @func_3200() /* ty=Tensor[(480), float64] */;
  %575 = @func_3200() /* ty=Tensor[(480), float64] */;
  (%574, %575)
}

def @func_6068() -> Tensor[(280), uint32] {
  %576 = @func_4411() /* ty=(Tensor[(13, 12, 1), float64], Tensor[(78, 2), float64], Tensor[(90, 10), float32], Tensor[(280), uint32], Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(8, 60), float64], Tensor[(576), int32], Tensor[(250), uint8], Tensor[(36), int32]) */;
  %576.3
}

def @func_4980() -> Tensor[(480), float64] {
  @func_4978() /* ty=Tensor[(480), float64] */
}

def @func_3694() -> Tensor[(156), float32] {
  @func_3692() /* ty=Tensor[(156), float32] */
}

def @func_5555(%var_5520: float32, %var_5521: Tensor[(1, 9), float32]) -> Tensor[(1, 9), float32] {
  %577 = cast(%var_5520, dtype="float32") /* ty=float32 */;
  %578 = cast(%var_5521, dtype="float32") /* ty=Tensor[(1, 9), float32] */;
  mod(%577, %578) /* ty=Tensor[(1, 9), float32] */
}

def @func_5918(%var_5895: Tensor[(480), float64], %var_5906: Tensor[(12, 32), float32]) -> (Tensor[(360), bool], Tensor[(480), float64], Tensor[(12, 32), uint16]) {
  %579 = @func_5150() /* ty=(Tensor[(480), float64], Tensor[(15, 2, 12), bool], Tensor[(360), bool]) */;
  %580 = cast(%var_5895, dtype="float64") /* ty=Tensor[(480), float64] */;
  %581 = cast(%var_5895, dtype="float64") /* ty=Tensor[(480), float64] */;
  %582 = reshape(%580, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float64] */;
  %583 = reshape(%581, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float64] */;
  %584 = @func_2013(%582, %583) /* ty=(Tensor[(5, 12, 8), float32], Tensor[(2, 12, 16), float32], Tensor[(12, 32), float32]) */;
  %585 = %584.2;
  %586 = cast(%var_5906, dtype="uint16") /* ty=Tensor[(12, 32), uint16] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(2), int32] */;
  %588 = cast(%585, dtype="uint16") /* ty=Tensor[(12, 32), uint16] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %590 = %579.2;
  %591 = multiply(%588, %589) /* ty=Tensor[(12, 32), uint16] */;
  (%590, %var_5895, %591)
}

def @func_7193(%var_7189: Tensor[(480), float64], %var_7190: Tensor[(156), float64], %var_7191: Tensor[(36), int32], %var_7192: Tensor[(294), float32]) -> (Tensor[(14, 6, 14), float64], Tensor[(16, 9, 4), bool], Tensor[(480), float64], Tensor[(156), bool], Tensor[(156), float64], Tensor[(480), float64], Tensor[(36), int64], Tensor[(480), float64], Tensor[(294), int16]) {
  %620 = fn (%var_7125: Tensor[(480), float64], %var_7130: Tensor[(156), float64], %var_7155: Tensor[(36), int32], %var_7181: Tensor[(294), float32]) -> (Tensor[(14, 6, 14), float64], Tensor[(16, 9, 4), bool], Tensor[(480), float64], Tensor[(156), bool], Tensor[(156), float64], Tensor[(480), float64], Tensor[(36), int64], Tensor[(480), float64], Tensor[(294), int16]) {
    %592 = cast(meta[relay.Constant][37] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %593 = cast(%var_7125, dtype="float64") /* ty=Tensor[(480), float64] */;
    %594 = cast(meta[relay.Constant][38] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(36), int32] */;
    %595 = cast(%var_7125, dtype="float64") /* ty=Tensor[(480), float64] */;
    %596 = reshape(%592, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
    %597 = reshape(%593, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %598 = reshape(%594, newshape=[36]) /* ty=Tensor[(36), int32] */;
    %599 = reshape(%595, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
    %600 = @func_1109(%596, %597, %598, %599) /* ty=(Tensor[(3, 7, 14), bool], Tensor[(480), float64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(16, 10, 3), int64]) */;
    %601 = cast(%var_7130, dtype="float64") /* ty=Tensor[(156), float64] */;
    %602 = reshape(%601, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %603 = @func_5368() /* ty=(Tensor[(480), float64],) */;
    %604 = cast(%var_7155, dtype="int64") /* ty=Tensor[(36), int64] */;
    %605 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %606 = cast(meta[relay.Constant][38] /* ty=Tensor[(36), int32] */, dtype="int64") /* ty=Tensor[(36), int64] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?), int64] */;
    %608 = @func_5626() /* ty=(Tensor[(156), float64], Tensor[(480), float64]) */;
    %609 = cast(%var_7181, dtype="int16") /* ty=Tensor[(294), int16] */;
    %610 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(294), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %611 = cast(meta[relay.Constant][37] /* ty=Tensor[(294), float32] */, dtype="int16") /* ty=Tensor[(294), int16] */;
    %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?), int16] */;
    %613 = @func_4305() /* ty=Tensor[(14, 6, 14), float64] */;
    %614 = %600.2;
    %615 = @func_3516(%602) /* ty=Tensor[(156), bool] */;
    %616 = %603.0;
    %617 = subtract(%606, %607) /* ty=Tensor[(36), int64] */;
    %618 = %608.1;
    %619 = bitwise_xor(%611, %612) /* ty=Tensor[(294), int16] */;
    (%613, %614, %var_7125, %615, %var_7130, %616, %617, %618, %619)
  };
  %620(%var_7189, %var_7190, %var_7191, %var_7192) /* ty=(Tensor[(14, 6, 14), float64], Tensor[(16, 9, 4), bool], Tensor[(480), float64], Tensor[(156), bool], Tensor[(156), float64], Tensor[(480), float64], Tensor[(36), int64], Tensor[(480), float64], Tensor[(294), int16]) */
}

def @func_2630(%var_2625: bool, %var_2626: Tensor[(10, 1, 12), bool], %var_2627: Tensor[(10, 1, 12), bool], %var_2628: Tensor[(648), float64], %var_2629: Tensor[(648), float64]) -> (Tensor[(10, 1, 12), float32], Tensor[(10, 1, 12), float64], Tensor[(6, 9, 12), float64], Tensor[(10, ?, 12), bool], Tensor[(648), float64]) {
  %648 = fn (%var_2567: bool, %var_2568: Tensor[(10, 1, 12), bool], %var_2576: Tensor[(10, 1, 12), bool], %var_2597: Tensor[(648), float64], %var_2620: Tensor[(648), float64]) -> (Tensor[(10, 1, 12), float32], Tensor[(10, 1, 12), float64], Tensor[(6, 9, 12), float64], Tensor[(10, ?, 12), bool], Tensor[(648), float64]) {
    %621 = cast(%var_2576, dtype="float32") /* ty=Tensor[(10, 1, 12), float32] */;
    %622 = cast(%var_2567, dtype="bool") /* ty=bool */;
    %623 = cast(%var_2568, dtype="bool") /* ty=Tensor[(10, 1, 12), bool] */;
    %624 = logical_or(%622, %623) /* ty=Tensor[(10, 1, 12), bool] */;
    %625 = cast(%624, dtype="float64") /* ty=Tensor[(10, 1, 12), float64] */;
    %626 = cast(%var_2597, dtype="float64") /* ty=Tensor[(648), float64] */;
    %627 = reshape(%626, newshape=[6, 9, 12]) /* ty=Tensor[(6, 9, 12), float64] */;
    %628 = cast(%624, dtype="float64") /* ty=Tensor[(10, 1, 12), float64] */;
    %629 = sqrt(%628) /* ty=Tensor[(10, 1, 12), float64] */;
    %630 = cast(%var_2576, dtype="int64") /* ty=Tensor[(10, 1, 12), int64] */;
    %631 = shape_of(%var_2568, dtype="int32") /* ty=Tensor[(3), int32] */;
    %632 = cast(%var_2568, dtype="int64") /* ty=Tensor[(10, 1, 12), int64] */;
    %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %634 = bitwise_or(%632, %633) /* ty=Tensor[(10, ?, 12), int64] */;
    %635 = cast(%634, dtype="bool") /* ty=Tensor[(10, ?, 12), bool] */;
    %636 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
    %637 = cast(%629, dtype="bool") /* ty=Tensor[(10, 1, 12), bool] */;
    %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %639 = cast(%var_2620, dtype="float64") /* ty=Tensor[(648), float64] */;
    %640 = shape_of(%var_2597, dtype="int32") /* ty=Tensor[(1), int32] */;
    %641 = cast(%var_2597, dtype="float64") /* ty=Tensor[(648), float64] */;
    %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?), float64] */;
    %643 = asin(%621) /* ty=Tensor[(10, 1, 12), float32] */;
    %644 = asinh(%625) /* ty=Tensor[(10, 1, 12), float64] */;
    %645 = @func_2386(%627) /* ty=Tensor[(6, 9, 12), float64] */;
    %646 = less_equal(%637, %638) /* ty=Tensor[(10, ?, 12), bool] */;
    %647 = floor_mod(%641, %642) /* ty=Tensor[(648), float64] */;
    (%643, %644, %645, %646, %647)
  };
  %648(%var_2625, %var_2626, %var_2627, %var_2628, %var_2629) /* ty=(Tensor[(10, 1, 12), float32], Tensor[(10, 1, 12), float64], Tensor[(6, 9, 12), float64], Tensor[(10, ?, 12), bool], Tensor[(648), float64]) */
}

def @main(%var_7719: Tensor[(15, 2, 7), float64], %var_7727: Tensor[(15, 2, 7), float64]) -> (Tensor[(15, 2, 7), int32],) {
  %649 = cast(%var_7719, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
  %650 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(15, 2, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %653 = floor_divide(%651, %652) /* ty=Tensor[(15, 2, 7), float64] */;
  %654 = cast(%var_7727, dtype="int32") /* ty=Tensor[(15, 2, 7), int32] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%653, dtype="int32") /* ty=Tensor[(15, 2, 7), int32] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %658 = bitwise_and(%656, %657) /* ty=Tensor[(15, 2, 7), int32] */;
  (%658,)
}

def @func_4864(%var_4863: Tensor[(156), float64]) -> (Tensor[(480), float32], Tensor[(13, 12, 1), float64], Tensor[(156), float64], Tensor[(132), float32], Tensor[(12), float64], Tensor[(10, 8, 15), float64], Tensor[(480), float64]) {
  %675 = fn (%var_4832: Tensor[(156), float64]) -> (Tensor[(480), float32], Tensor[(13, 12, 1), float64], Tensor[(156), float64], Tensor[(132), float32], Tensor[(12), float64], Tensor[(10, 8, 15), float64], Tensor[(480), float64]) {
    %659 = @func_3956() /* ty=(Tensor[(480), float32],) */;
    %660 = cast(%var_4832, dtype="float64") /* ty=Tensor[(156), float64] */;
    %661 = %659.0;
    %662 = cast(%661, dtype="float64") /* ty=Tensor[(480), float64] */;
    %663 = reshape(%660, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
    %664 = reshape(%662, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
    %665 = @func_1380(%663, %664) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
    %666 = cast(meta[relay.Constant][40] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
    %667 = reshape(%666, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float64] */;
    %668 = @func_530(%667) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) */;
    %669 = @func_4506() /* ty=(Tensor[(10, 8, 15), float64],) */;
    %670 = @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
    %671 = %665.0;
    %672 = %668.1;
    %673 = %669.0;
    %674 = %670.0;
    (%661, %671, %var_4832, %672, meta[relay.Constant][40] /* ty=Tensor[(12), float64] */, %673, %674)
  };
  %675(%var_4863) /* ty=(Tensor[(480), float32], Tensor[(13, 12, 1), float64], Tensor[(156), float64], Tensor[(132), float32], Tensor[(12), float64], Tensor[(10, 8, 15), float64], Tensor[(480), float64]) */
}

def @func_6846(%var_6844: Tensor[(13, 7, 3), float64]) -> (Tensor[(156), float64], Tensor[(13, 7, 3), int64], Tensor[(13, 7, 3), float32]) {
  @func_6843(%var_6844) /* ty=(Tensor[(156), float64], Tensor[(13, 7, 3), int64], Tensor[(13, 7, 3), float32]) */
}

def @func_6070() -> Tensor[(280), uint32] {
  @func_6068() /* ty=Tensor[(280), uint32] */
}

def @func_2424(%var_2423: Tensor[(10, 10, 14), float32]) -> (Tensor[(10, 10, 14), uint32],) {
  %686 = fn (%var_2410: Tensor[(10, 10, 14), float32]) -> (Tensor[(10, 10, 14), uint32],) {
    %676 = cast(%var_2410, dtype="float32") /* ty=Tensor[(10, 10, 14), float32] */;
    %677 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(10, 10, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %678 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(10, 10, 14), float32] */;
    %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %680 = multiply(%678, %679) /* ty=Tensor[(10, 10, 14), float32] */;
    %681 = cast(%680, dtype="uint32") /* ty=Tensor[(10, 10, 14), uint32] */;
    %682 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(10, 10, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %683 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 10, 14), float32] */, dtype="uint32") /* ty=Tensor[(10, 10, 14), uint32] */;
    %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %685 = bitwise_xor(%683, %684) /* ty=Tensor[(10, 10, 14), uint32] */;
    (%685,)
  };
  %686(%var_2423) /* ty=(Tensor[(10, 10, 14), uint32],) */
}

def @func_6391() -> Tensor[(480), float64] {
  %688 = fn () -> Tensor[(480), float64] {
    %687 = @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
    %687.0
  };
  %688() /* ty=Tensor[(480), float64] */
}

def @func_241(%var_239: Tensor[(4, 11, 3), float32], %var_240: Tensor[(480, 1), float64]) -> (Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) {
  %695 = fn (%var_226: Tensor[(4, 11, 3), float32], %var_232: Tensor[(480, 1), float64]) -> (Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) {
    %689 = cast(%var_226, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
    %690 = cast(%var_232, dtype="float64") /* ty=Tensor[(480, 1), float64] */;
    %691 = reshape(%690, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
    %692 = @func_12(%691) /* ty=(Tensor[(16, 10, 3), float64],) */;
    %693 = log2(%689) /* ty=Tensor[(4, 11, 3), float32] */;
    %694 = %692.0;
    (%693, %694, %var_232)
  };
  %695(%var_239, %var_240) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) */
}

def @func_2812(%var_2810: float64) -> Tensor[(14, 6, 14), float64] {
  @func_2809(%var_2810) /* ty=Tensor[(14, 6, 14), float64] */
}

def @func_3202() -> Tensor[(480), float64] {
  @func_3200() /* ty=Tensor[(480), float64] */
}

def @func_7029() -> Tensor[(10, 8, 15), float64] {
  %697 = fn () -> Tensor[(10, 8, 15), float64] {
    %696 = @func_5661() /* ty=(Tensor[(10, 8, 15), float64], Tensor[(480), float64], Tensor[(65, 6), float32]) */;
    %696.0
  };
  %697() /* ty=Tensor[(10, 8, 15), float64] */
}

def @func_7103() -> (Tensor[(480), float64],) {
  %698 = @func_4903() /* ty=Tensor[(480), float64] */;
  (%698,)
}

def @func_5440() -> (Tensor[(112, 1), float32],) {
  %701 = fn () -> (Tensor[(112, 1), float32],) {
    %699 = @func_5007() /* ty=(Tensor[(156), float64], Tensor[(14, 8, 1), float32], Tensor[(112, 1), float32]) */;
    %700 = %699.2;
    (%700,)
  };
  %701() /* ty=(Tensor[(112, 1), float32],) */
}

def @func_4307() -> Tensor[(14, 6, 14), float64] {
  @func_4305() /* ty=Tensor[(14, 6, 14), float64] */
}

def @func_4508() -> (Tensor[(10, 8, 15), float64],) {
  @func_4506() /* ty=(Tensor[(10, 8, 15), float64],) */
}

def @func_7301() -> (Tensor[(480), float64],) {
  %704 = fn () -> (Tensor[(480), float64],) {
    %702 = @func_5038() /* ty=(Tensor[(480), float64],) */;
    %703 = %702.0;
    (%703,)
  };
  %704() /* ty=(Tensor[(480), float64],) */
}

def @func_4295(%var_4294: Tensor[(12), float64]) -> (Tensor[(480), float64], Tensor[(480), float64], Tensor[(12), float64]) {
  %710 = fn (%var_4291: Tensor[(12), float64]) -> (Tensor[(480), float64], Tensor[(480), float64], Tensor[(12), float64]) {
    %705 = cast(%var_4291, dtype="float64") /* ty=Tensor[(12), float64] */;
    %706 = reshape(%705, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float64] */;
    %707 = @func_530(%706) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(16, 10, 3), float64], Tensor[(2, ?, 6), uint8]) */;
    %708 = @func_3443() /* ty=Tensor[(480), float64] */;
    %709 = %707.2;
    (%708, %709, %var_4291)
  };
  %710(%var_4294) /* ty=(Tensor[(480), float64], Tensor[(480), float64], Tensor[(12), float64]) */
}

def @func_428(%var_422: Tensor[(4, 7, 10), uint32]) -> Tensor[(4, 7, 10), uint32] {
  %711 = cast(%var_422, dtype="uint32") /* ty=Tensor[(4, 7, 10), uint32] */;
  %712 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(4, 7, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 7, 10), uint32] */, dtype="uint32") /* ty=Tensor[(4, 7, 10), uint32] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%713, %714) /* ty=Tensor[(4, 7, 10), uint32] */
}

def @func_2161(%var_2160: Tensor[(10, 11), float32]) -> Tensor[(10, 11), float32] {
  %716 = fn (%var_2135: Tensor[(10, 11), float32]) -> Tensor[(10, 11), float32] {
    %715 = cast(%var_2135, dtype="float32") /* ty=Tensor[(10, 11), float32] */;
    cosh(%715) /* ty=Tensor[(10, 11), float32] */
  };
  %716(%var_2160) /* ty=Tensor[(10, 11), float32] */
}

def @func_4411() -> (Tensor[(13, 12, 1), float64], Tensor[(78, 2), float64], Tensor[(90, 10), float32], Tensor[(280), uint32], Tensor[(4, 11, 3), float32], Tensor[(132), float32], Tensor[(8, 60), float64], Tensor[(576), int32], Tensor[(250), uint8], Tensor[(36), int32]) {
  %717 = cast(meta[relay.Constant][43] /* ty=Tensor[(78, 2), float64] */, dtype="float64") /* ty=Tensor[(78, 2), float64] */;
  %718 = @func_3297() /* ty=Tensor[(480), float64] */;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(480), float64] */;
  %720 = reshape(%717, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %721 = reshape(%719, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %722 = @func_1380(%720, %721) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %723 = cast(meta[relay.Constant][46] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %724 = cast(meta[relay.Constant][44] /* ty=Tensor[(90, 10), float32] */, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %725 = cast(meta[relay.Constant][44] /* ty=Tensor[(90, 10), float32] */, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %726 = cast(meta[relay.Constant][45] /* ty=Tensor[(280), uint32] */, dtype="uint32") /* ty=Tensor[(280), uint32] */;
  %727 = cast(meta[relay.Constant][43] /* ty=Tensor[(78, 2), float64] */, dtype="float64") /* ty=Tensor[(78, 2), float64] */;
  %728 = cast(meta[relay.Constant][44] /* ty=Tensor[(90, 10), float32] */, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %729 = reshape(%724, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float32] */;
  %730 = reshape(%725, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float32] */;
  %731 = reshape(%726, newshape=[280]) /* ty=Tensor[(280), uint32] */;
  %732 = reshape(%727, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %733 = reshape(%728, newshape=[6, 10, 15]) /* ty=Tensor[(6, 10, 15), float32] */;
  %734 = @func_1627(%729, %730, %731, %732, %733) /* ty=(Tensor[(6, 10, 15), float32], Tensor[(2, 12, 16), float32], Tensor[(384), float32], Tensor[(4, 7, 10), uint32], Tensor[(280), uint32], Tensor[(4, 120), float64], Tensor[(156), float64], Tensor[(8, 60), float64], Tensor[(16, 10, 3), float64], Tensor[(2, 12, 16), float32], Tensor[(480), float64], Tensor[(294), float32], Tensor[(36), int32], Tensor[(16, 10, 3), float64], Tensor[(6, 10, 15), float32], Tensor[(36), int32]) */;
  %735 = %734.7;
  %736 = cast(%735, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %737 = acosh(%736) /* ty=Tensor[(8, 60), float64] */;
  %738 = cast(%737, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %739 = reshape(%723, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %740 = reshape(%738, newshape=[480, 1]) /* ty=Tensor[(480, 1), float64] */;
  %741 = @func_238(%739, %740) /* ty=(Tensor[(4, 11, 3), float32], Tensor[(16, 10, 3), float64], Tensor[(480, 1), float64]) */;
  %742 = cast(%718, dtype="float64") /* ty=Tensor[(480), float64] */;
  %743 = shape_of(%737, dtype="int32") /* ty=Tensor[(2), int32] */;
  %744 = cast(%737, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %746 = cast(meta[relay.Constant][47] /* ty=Tensor[(250), uint8] */, dtype="uint8") /* ty=Tensor[(250), uint8] */;
  %747 = cast(meta[relay.Constant][47] /* ty=Tensor[(250), uint8] */, dtype="uint8") /* ty=Tensor[(250), uint8] */;
  %748 = cast(meta[relay.Constant][48] /* ty=Tensor[(36), int32] */, dtype="int32") /* ty=Tensor[(36), int32] */;
  %749 = reshape(%746, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint8] */;
  %750 = reshape(%747, newshape=[10, 5, 5]) /* ty=Tensor[(10, 5, 5), uint8] */;
  %751 = reshape(%748, newshape=[36]) /* ty=Tensor[(36), int32] */;
  %752 = @func_2758(%749, %750, %751) /* ty=(Tensor[(10, 5, 5), uint8], Tensor[(10, 5, 5), float32], Tensor[(576), int32], Tensor[(294), float32], Tensor[(480), float64], Tensor[(36), int32]) */;
  %753 = %722.0;
  %754 = %741.0;
  %755 = power(%744, %745) /* ty=Tensor[(8, 60), float64] */;
  %756 = %752.2;
  (%753, meta[relay.Constant][43] /* ty=Tensor[(78, 2), float64] */, meta[relay.Constant][44] /* ty=Tensor[(90, 10), float32] */, meta[relay.Constant][45] /* ty=Tensor[(280), uint32] */, %754, meta[relay.Constant][46] /* ty=Tensor[(132), float32] */, %755, %756, meta[relay.Constant][47] /* ty=Tensor[(250), uint8] */, meta[relay.Constant][48] /* ty=Tensor[(36), int32] */)
}

def @func_3444() -> Tensor[(480), float64] {
  %757 = fn () -> Tensor[(480), float64] {
    @func_3200() /* ty=Tensor[(480), float64] */
  };
  %757() /* ty=Tensor[(480), float64] */
}

def @func_2258(%var_2247: Tensor[(12, 14, 14), float64]) -> (Tensor[(12, 1, 14), float64], Tensor[(12, 14, 14), int32]) {
  %758 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 1, 14), float64] */, dtype="float64") /* ty=Tensor[(12, 1, 14), float64] */;
  %759 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 1, 14), float64] */, dtype="int32") /* ty=Tensor[(12, 1, 14), int32] */;
  %760 = cast(%var_2247, dtype="int32") /* ty=Tensor[(12, 14, 14), int32] */;
  %761 = tan(%758) /* ty=Tensor[(12, 1, 14), float64] */;
  %762 = logical_xor(%759, %760) /* ty=Tensor[(12, 14, 14), int32] */;
  (%761, %762)
}

def @func_302(%var_300: Tensor[(1, 9, 4), int32], %var_301: Tensor[(16, 9, 4), int32]) -> Tensor[(16, 9, 4), bool] {
  %770 = fn (%var_283: Tensor[(1, 9, 4), int32], %var_284: Tensor[(16, 9, 4), int32]) -> Tensor[(16, 9, 4), bool] {
    %763 = cast(%var_283, dtype="bool") /* ty=Tensor[(1, 9, 4), bool] */;
    %764 = cast(%var_284, dtype="bool") /* ty=Tensor[(16, 9, 4), bool] */;
    %765 = equal(%763, %764) /* ty=Tensor[(16, 9, 4), bool] */;
    %766 = cast(%765, dtype="bool") /* ty=Tensor[(16, 9, 4), bool] */;
    %767 = shape_of(%var_284, dtype="int32") /* ty=Tensor[(3), int32] */;
    %768 = cast(%var_284, dtype="bool") /* ty=Tensor[(16, 9, 4), bool] */;
    %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%768, %769) /* ty=Tensor[(16, 9, 4), bool] */
  };
  %770(%var_300, %var_301) /* ty=Tensor[(16, 9, 4), bool] */
}

def @func_2017(%var_2015: Tensor[(5, 12, 8), float64], %var_2016: Tensor[(5, 12, 8), float64]) -> (Tensor[(5, 12, 8), float32], Tensor[(2, 12, 16), float32], Tensor[(12, 32), float32]) {
  @func_2013(%var_2015, %var_2016) /* ty=(Tensor[(5, 12, 8), float32], Tensor[(2, 12, 16), float32], Tensor[(12, 32), float32]) */
}

def @func_4667() -> (Tensor[(480), float64],) {
  @func_4665() /* ty=(Tensor[(480), float64],) */
}

def @func_5662() -> (Tensor[(10, 8, 15), float64], Tensor[(480), float64], Tensor[(65, 6), float32]) {
  %777 = fn () -> (Tensor[(10, 8, 15), float64], Tensor[(480), float64], Tensor[(65, 6), float32]) {
    %771 = @func_4506() /* ty=(Tensor[(10, 8, 15), float64],) */;
    %772 = cast(meta[relay.Constant][50] /* ty=Tensor[(65, 6), float32] */, dtype="float32") /* ty=Tensor[(65, 6), float32] */;
    %773 = reshape(%772, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float32] */;
    %774 = @func_5589(%773) /* ty=(Tensor[(13, 10, 3), float32], Tensor[(480), float64]) */;
    %775 = %771.0;
    %776 = %774.1;
    (%775, %776, meta[relay.Constant][50] /* ty=Tensor[(65, 6), float32] */)
  };
  %777() /* ty=(Tensor[(10, 8, 15), float64], Tensor[(480), float64], Tensor[(65, 6), float32]) */
}

def @func_3885() -> Tensor[(16, 10, 3), float64] {
  %779 = fn () -> Tensor[(16, 10, 3), float64] {
    %778 = @func_3128() /* ty=(Tensor[(14, 7, ?), float64], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(480), float64]) */;
    %778.1
  };
  %779() /* ty=Tensor[(16, 10, 3), float64] */
}

def @func_5828(%var_5826: Tensor[(156), float32], %var_5827: Tensor[(390), float32]) -> (Tensor[(480), float64], Tensor[(480), float32], Tensor[(14, 6, 14), float64], float64, Tensor[(156), int64], Tensor[(1, 9), float32], Tensor[(9), float32], Tensor[(13, 10, 3), float32], Tensor[(390), float32]) {
  %804 = fn (%var_5803: Tensor[(156), float32], %var_5816: Tensor[(390), float32]) -> (Tensor[(480), float64], Tensor[(480), float32], Tensor[(14, 6, 14), float64], float64, Tensor[(156), int64], Tensor[(1, 9), float32], Tensor[(9), float32], Tensor[(13, 10, 3), float32], Tensor[(390), float32]) {
    %780 = @func_3427() /* ty=(Tensor[(156), float64], Tensor[(480), float64], Tensor[(112), float32]) */;
    %781 = @func_3956() /* ty=(Tensor[(480), float32],) */;
    %782 = %781.0;
    %783 = cast(%782, dtype="float32") /* ty=Tensor[(480), float32] */;
    %784 = cast(-7.44563f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %785 = reshape(%784, newshape=[]) /* ty=float64 */;
    %786 = @func_3775() /* ty=Tensor[(156), float32] */;
    %787 = cast(%var_5803, dtype="int64") /* ty=Tensor[(156), int64] */;
    %788 = shape_of(%786, dtype="int32") /* ty=Tensor[(1), int32] */;
    %789 = cast(%786, dtype="int64") /* ty=Tensor[(156), int64] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?), int64] */;
    %791 = cast(-7.44563f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
    %792 = cast(meta[relay.Constant][51] /* ty=Tensor[(9), float32] */, dtype="float32") /* ty=Tensor[(9), float32] */;
    %793 = reshape(%791, newshape=[]) /* ty=float32 */;
    %794 = reshape(%792, newshape=[1, 9]) /* ty=Tensor[(1, 9), float32] */;
    %795 = cast(%var_5816, dtype="float32") /* ty=Tensor[(390), float32] */;
    %796 = reshape(%795, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float32] */;
    %797 = @func_5589(%796) /* ty=(Tensor[(13, 10, 3), float32], Tensor[(480), float64]) */;
    %798 = %780.1;
    %799 = log(%783) /* ty=Tensor[(480), float32] */;
    %800 = @func_2809(%785) /* ty=Tensor[(14, 6, 14), float64] */;
    %801 = right_shift(%789, %790) /* ty=Tensor[(156), int64] */;
    %802 = @func_5555(%793, %794) /* ty=Tensor[(1, 9), float32] */;
    %803 = %797.0;
    (%798, %799, %800, -7.44563f64 /* ty=float64 */, %801, %802, meta[relay.Constant][51] /* ty=Tensor[(9), float32] */, %803, %var_5816)
  };
  %804(%var_5826, %var_5827) /* ty=(Tensor[(480), float64], Tensor[(480), float32], Tensor[(14, 6, 14), float64], float64, Tensor[(156), int64], Tensor[(1, 9), float32], Tensor[(9), float32], Tensor[(13, 10, 3), float32], Tensor[(390), float32]) */
}

def @func_4090(%var_4034: Tensor[(2112), float32], %var_4047: Tensor[(156), float64]) -> (Tensor[(480), float64], Tensor[(5, ?, 2), bool], Tensor[(1, 10), uint64], Tensor[(12), float64], Tensor[(2112), float32], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(12, 1, 14), float64], Tensor[(2352), float64], Tensor[(480), float64], Tensor[(384), float32], Tensor[(480), float64]) {
  %805 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 10), uint64] */, dtype="uint64") /* ty=Tensor[(1, 10), uint64] */;
  %806 = cast(meta[relay.Constant][53] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %807 = cast(%var_4034, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %808 = reshape(%805, newshape=[5, 1, 2]) /* ty=Tensor[(5, 1, 2), uint64] */;
  %809 = reshape(%806, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %810 = reshape(%807, newshape=[132, 16]) /* ty=Tensor[(132, 16), float32] */;
  %811 = @func_1507(%808, %809, %810) /* ty=(Tensor[(16, 10, 3), float64], Tensor[(480), float64], Tensor[(16, 10, 3), float64], Tensor[(12), float64], Tensor[(5, ?, 2), bool], Tensor[(13, 12, 1), float64], Tensor[(39, 4), bool], Tensor[(4, 11, 3), float32], Tensor[(132, 16), bool], Tensor[(39, 4), float32]) */;
  %812 = cast(%var_4047, dtype="float64") /* ty=Tensor[(156), float64] */;
  %813 = @func_3200() /* ty=Tensor[(480), float64] */;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(480), float64] */;
  %815 = reshape(%812, newshape=[13, 12, 1]) /* ty=Tensor[(13, 12, 1), float64] */;
  %816 = reshape(%814, newshape=[4, 120]) /* ty=Tensor[(4, 120), float64] */;
  %817 = @func_1380(%815, %816) /* ty=(Tensor[(13, 12, 1), float64], Tensor[(16, 10, 3), float64], Tensor[(132), float32], Tensor[(4, 120), float64]) */;
  %818 = cast(meta[relay.Constant][54] /* ty=Tensor[(2352), float64] */, dtype="float64") /* ty=Tensor[(2352), float64] */;
  %819 = reshape(%818, newshape=[12, 14, 14]) /* ty=Tensor[(12, 14, 14), float64] */;
  %820 = @func_2258(%819) /* ty=(Tensor[(12, 1, 14), float64], Tensor[(12, 14, 14), int32]) */;
  %821 = cast(meta[relay.Constant][53] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %822 = cast(meta[relay.Constant][55] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %823 = reshape(%821, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %824 = reshape(%822, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %825 = @func_3638(%823, %824) /* ty=(Tensor[(480), float64], Tensor[(2, ?, 6), uint8], Tensor[(12), float64], Tensor[(2, 12, 16), float32], Tensor[(384), float32]) */;
  %826 = @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
  %827 = %811.4;
  %828 = %817.1;
  %829 = %820.0;
  %830 = %825.0;
  %831 = %826.1;
  (%813, %827, meta[relay.Constant][52] /* ty=Tensor[(1, 10), uint64] */, meta[relay.Constant][53] /* ty=Tensor[(12), float64] */, %var_4034, %828, %var_4047, %829, meta[relay.Constant][54] /* ty=Tensor[(2352), float64] */, %830, meta[relay.Constant][55] /* ty=Tensor[(384), float32] */, %831)
}

def @func_12(%var_6: Tensor[(16, 10, 3), float64]) -> (Tensor[(16, 10, 3), float64],) {
  %832 = cast(meta[relay.Constant][56] /* ty=Tensor[(16, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %833 = shape_of(%var_6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %834 = cast(%var_6, dtype="float64") /* ty=Tensor[(16, 10, 3), float64] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %836 = divide(%834, %835) /* ty=Tensor[(16, 10, 3), float64] */;
  (%836,)
}

def @func_6455() -> (Tensor[(480), float64],) {
  %837 = @func_5038() /* ty=(Tensor[(480), float64],) */;
  %838 = %837.0;
  (%838,)
}

def @func_3428() -> (Tensor[(156), float64], Tensor[(480), float64], Tensor[(112), float32]) {
  %845 = fn () -> (Tensor[(156), float64], Tensor[(480), float64], Tensor[(112), float32]) {
    %839 = @func_3392() /* ty=(Tensor[(156), float64],) */;
    %840 = cast(meta[relay.Constant][57] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
    %841 = reshape(%840, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), float32] */;
    %842 = @func_3367(%841) /* ty=(Tensor[(14, 8, 1), float32], Tensor[(16, 10, 3), float64], Tensor[(480), float64]) */;
    %843 = %839.0;
    %844 = %842.2;
    (%843, %844, meta[relay.Constant][57] /* ty=Tensor[(112), float32] */)
  };
  %845() /* ty=(Tensor[(156), float64], Tensor[(480), float64], Tensor[(112), float32]) */
}

def @func_872(%var_870: Tensor[(2, 12, 16), float32]) -> (Tensor[(2, 12, 16), float32],) {
  @func_869(%var_870) /* ty=(Tensor[(2, 12, 16), float32],) */
}

def @func_6807(%var_6805: Tensor[(12, 14, 10), bool]) -> Tensor[(12, 14, 10), bool] {
  @func_6804(%var_6805) /* ty=Tensor[(12, 14, 10), bool] */
}

def @func_5152() -> (Tensor[(480), float64], Tensor[(15, 2, 12), bool], Tensor[(360), bool]) {
  @func_5150() /* ty=(Tensor[(480), float64], Tensor[(15, 2, 12), bool], Tensor[(360), bool]) */
}

def @func_6011() -> Tensor[(12, 14, 10), bool] {
  @func_6009() /* ty=Tensor[(12, 14, 10), bool] */
}

def @func_4094(%var_4092: Tensor[(2112), float32], %var_4093: Tensor[(156), float64]) -> (Tensor[(480), float64], Tensor[(5, ?, 2), bool], Tensor[(1, 10), uint64], Tensor[(12), float64], Tensor[(2112), float32], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(12, 1, 14), float64], Tensor[(2352), float64], Tensor[(480), float64], Tensor[(384), float32], Tensor[(480), float64]) {
  @func_4090(%var_4092, %var_4093) /* ty=(Tensor[(480), float64], Tensor[(5, ?, 2), bool], Tensor[(1, 10), uint64], Tensor[(12), float64], Tensor[(2112), float32], Tensor[(16, 10, 3), float64], Tensor[(156), float64], Tensor[(12, 1, 14), float64], Tensor[(2352), float64], Tensor[(480), float64], Tensor[(384), float32], Tensor[(480), float64]) */
}

def @func_1109(%var_1067: Tensor[(3, 7, 14), float32], %var_1074: Tensor[(480), float64], %var_1082: Tensor[(36), int32], %var_1101: Tensor[(16, 10, 3), float64]) -> (Tensor[(3, 7, 14), bool], Tensor[(480), float64], Tensor[(16, 9, 4), bool], Tensor[(36), int32], Tensor[(576), int32], Tensor[(16, 10, 3), int64]) {
  %846 = cast(%var_1067, dtype="bool") /* ty=Tensor[(3, 7, 14), bool] */;
  %847 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(3, 7, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(meta[relay.Constant][58] /* ty=Tensor[(3, 7, 14), float32] */, dtype="bool") /* ty=Tensor[(3, 7, 14), bool] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %850 = cast(%var_1082, dtype="int32") /* ty=Tensor[(36), int32] */;
  %851 = cast(meta[relay.Constant][59] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %852 = reshape(%850, newshape=[1, 9, 4]) /* ty=Tensor[(1, 9, 4), int32] */;
  %853 = reshape(%851, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), int32] */;
  %854 = cast(%var_1074, dtype="float64") /* ty=Tensor[(480), float64] */;
  %855 = reshape(%854, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float64] */;
  %856 = @func_12(%855) /* ty=(Tensor[(16, 10, 3), float64],) */;
  %857 = %856.0;
  %858 = cast(%var_1101, dtype="int64") /* ty=Tensor[(16, 10, 3), int64] */;
  %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%857, dtype="int64") /* ty=Tensor[(16, 10, 3), int64] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %862 = less(%848, %849) /* ty=Tensor[(3, 7, 14), bool] */;
  %863 = @func_299(%852, %853) /* ty=Tensor[(16, 9, 4), bool] */;
  %864 = left_shift(%860, %861) /* ty=Tensor[(16, 10, 3), int64] */;
  (%862, %var_1074, %863, %var_1082, meta[relay.Constant][59] /* ty=Tensor[(576), int32] */, %864)
}

def @func_5008() -> (Tensor[(156), float64], Tensor[(14, 8, 1), float32], Tensor[(112, 1), float32]) {
  %871 = fn () -> (Tensor[(156), float64], Tensor[(14, 8, 1), float32], Tensor[(112, 1), float32]) {
    %865 = @func_3392() /* ty=(Tensor[(156), float64],) */;
    %866 = cast(meta[relay.Constant][60] /* ty=Tensor[(112, 1), float32] */, dtype="float32") /* ty=Tensor[(112, 1), float32] */;
    %867 = reshape(%866, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), float32] */;
    %868 = @func_3367(%867) /* ty=(Tensor[(14, 8, 1), float32], Tensor[(16, 10, 3), float64], Tensor[(480), float64]) */;
    %869 = %865.0;
    %870 = %868.0;
    (%869, %870, meta[relay.Constant][60] /* ty=Tensor[(112, 1), float32] */)
  };
  %871() /* ty=(Tensor[(156), float64], Tensor[(14, 8, 1), float32], Tensor[(112, 1), float32]) */
}

def @func_2261(%var_2259: Tensor[(12, 14, 14), float64]) -> (Tensor[(12, 1, 14), float64], Tensor[(12, 14, 14), int32]) {
  @func_2258(%var_2259) /* ty=(Tensor[(12, 1, 14), float64], Tensor[(12, 14, 14), int32]) */
}

def @func_4210(%var_4208: Tensor[(15, 2, 12), bool], %var_4209: Tensor[(15, 2, 12), bool]) -> Tensor[(15, 2, 12), bool] {
  %876 = fn (%var_4198: Tensor[(15, 2, 12), bool], %var_4199: Tensor[(15, 2, 12), bool]) -> Tensor[(15, 2, 12), bool] {
    %872 = cast(%var_4199, dtype="bool") /* ty=Tensor[(15, 2, 12), bool] */;
    %873 = shape_of(%var_4198, dtype="int32") /* ty=Tensor[(3), int32] */;
    %874 = cast(%var_4198, dtype="bool") /* ty=Tensor[(15, 2, 12), bool] */;
    %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%874, %875) /* ty=Tensor[(15, 2, 12), bool] */
  };
  %876(%var_4208, %var_4209) /* ty=Tensor[(15, 2, 12), bool] */
}

def @func_4978() -> Tensor[(480), float64] {
  @func_3297() /* ty=Tensor[(480), float64] */
}

def @func_6804(%var_6796: Tensor[(12, 14, 10), bool]) -> Tensor[(12, 14, 10), bool] {
  %877 = @func_6323() /* ty=(Tensor[(12, 14, 10), bool],) */;
  %878 = %877.0;
  %879 = cast(%var_6796, dtype="bool") /* ty=Tensor[(12, 14, 10), bool] */;
  %880 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %881 = cast(%878, dtype="bool") /* ty=Tensor[(12, 14, 10), bool] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%881, %882) /* ty=Tensor[(12, 14, 10), bool] */
}

def @func_5039() -> (Tensor[(480), float64],) {
  %885 = fn () -> (Tensor[(480), float64],) {
    %883 = @func_3908() /* ty=(Tensor[(480), float64], Tensor[(480), float64]) */;
    %884 = %883.1;
    (%884,)
  };
  %885() /* ty=(Tensor[(480), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen170/build/output.py:2073: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen170/build/output.py", line 2078, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(210) tvmgen_default_fused_reshape_floor_divide_cast_cast_reshape_bitwise_and_kernel0(int* __restrict__ T_bitwise_and, double* __restrict__ placeholder, double* __restrict__ placeholder1, double* __restrict__ placeholder2) {
  T_bitwise_and[(((int)threadIdx.x))] = (((int)floor((placeholder[(((int)threadIdx.x))] / placeholder1[(((int)threadIdx.x))]))) & ((int)placeholder2[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

