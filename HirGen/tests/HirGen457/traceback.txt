==========mod==========
#[version = "0.0.5"]
def @func_6986(%var_6962: Tensor[(6, 15, 9), float64], %var_6969: Tensor[(432), float32], %var_6970: Tensor[(66), float64], %var_6973: Tensor[(1, 24), float64], %var_6975: Tensor[(220), float32]) -> (Tensor[(6, 15, 9), float32], Tensor[(432), float32], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1, 24), float64], Tensor[(1056), float64], Tensor[(220), float32], Tensor[(6, 15, 220), bool]) {
  %0 = @func_6552() /* ty=(Tensor[(6, 15, 1), float64],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(6, 15, 1), float32] */;
  %3 = cast(%var_6962, dtype="float32") /* ty=Tensor[(6, 15, 9), float32] */;
  %4 = cast(%var_6969, dtype="float32") /* ty=Tensor[(432), float32] */;
  %5 = cast(%var_6970, dtype="float64") /* ty=Tensor[(66), float64] */;
  %6 = cast(1.34023f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %8 = cast(%var_6973, dtype="float64") /* ty=Tensor[(1, 24), float64] */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %10 = cast(%var_6975, dtype="float32") /* ty=Tensor[(220), float32] */;
  %11 = reshape(%4, newshape=[12, 4, 9]) /* ty=Tensor[(12, 4, 9), float32] */;
  %12 = reshape(%5, newshape=[22, 3]) /* ty=Tensor[(22, 3), float64] */;
  %13 = reshape(%6, newshape=[]) /* ty=float64 */;
  %14 = reshape(%7, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
  %15 = reshape(%8, newshape=[24, 1]) /* ty=Tensor[(24, 1), float64] */;
  %16 = reshape(%9, newshape=[88, 12]) /* ty=Tensor[(88, 12), float64] */;
  %17 = reshape(%10, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %18 = @func_3705(%11, %12, %13, %14, %15, %16, %17) /* ty=(Tensor[(12, 4, 9), float32], float64, Tensor[(22, 3), float64], float64, Tensor[(14, 1), float64], Tensor[(24, 1), float64], Tensor[(88, 12), float64], Tensor[(220), float32]) */;
  %19 = %18.7;
  %20 = cast(%19, dtype="bool") /* ty=Tensor[(220), bool] */;
  %21 = cast(%1, dtype="bool") /* ty=Tensor[(6, 15, 1), bool] */;
  %22 = floor_divide(%2, %3) /* ty=Tensor[(6, 15, 9), float32] */;
  %23 = equal(%20, %21) /* ty=Tensor[(6, 15, 220), bool] */;
  (%22, %var_6969, %var_6970, 1.34023f64 /* ty=float64 */, meta[relay.Constant][0] /* ty=Tensor[(14), float64] */, %var_6973, meta[relay.Constant][1] /* ty=Tensor[(1056), float64] */, %var_6975, %23)
}

def @func_6804() -> (Tensor[(6, 15, 1), float64],) {
  %24 = @func_6304() /* ty=Tensor[(6, 15, 1), float64] */;
  (%24,)
}

def @func_6746() -> (Tensor[(7, 13, 4), float64], float64, float64, Tensor[(2, 528), float32]) {
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 13, 4), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 4), float64] */;
  %26 = cast(-0.347841f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 528), float64] */, dtype="float64") /* ty=Tensor[(2, 528), float64] */;
  %28 = reshape(%26, newshape=[]) /* ty=float64 */;
  %29 = reshape(%27, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %30 = @func_6521(%28, %29) /* ty=(Tensor[(6, 15, ?), float32], Tensor[(7, 13, 9), float32], Tensor[(819, 1), float64], Tensor[(6, 15, 1), float32], Tensor[(2, ?, 7), float32], Tensor[(6), float32], Tensor[(24), float64], Tensor[(10, 2, 11), float32], Tensor[(220), float32], Tensor[(220), float32], Tensor[(66), float64], float64, Tensor[(1056), float64], Tensor[(7, 1, 1), float32], Tensor[(1, 7), float32]) */;
  %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 528), float64] */, dtype="float32") /* ty=Tensor[(2, 528), float32] */;
  %32 = sigmoid(%25) /* ty=Tensor[(7, 13, 4), float64] */;
  %33 = %30.11;
  %34 = sin(%31) /* ty=Tensor[(2, 528), float32] */;
  (%32, %33, -0.347841f64 /* ty=float64 */, %34)
}

def @func_6552() -> (Tensor[(6, 15, 1), float64],) {
  %35 = @func_6304() /* ty=Tensor[(6, 15, 1), float64] */;
  (%35,)
}

def @func_1123(%var_1114: Tensor[(10, 2, 11), float32]) -> (Tensor[(10, 2, 11), float32],) {
  %36 = cast(%var_1114, dtype="float32") /* ty=Tensor[(10, 2, 11), float32] */;
  %37 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(10, 2, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 2, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 11), float32] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %40 = floor_mod(%38, %39) /* ty=Tensor[(10, 2, 11), float32] */;
  (%40,)
}

def @func_3506(%var_3500: Tensor[(11, 13, 5), uint8], %var_3501: Tensor[(11, 13, 5), uint8]) -> (Tensor[(11, 13, 5), bool],) {
  %41 = cast(%var_3501, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
  %42 = shape_of(%var_3500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%var_3500, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = greater(%43, %44) /* ty=Tensor[(11, 13, 5), bool] */;
  (%45,)
}

def @func_5844(%var_5815: Tensor[(7, 11, 1), float64]) -> (Tensor[(7, 11, ?), float32], Tensor[(7, 11, 1), float32]) {
  %46 = cast(%var_5815, dtype="float64") /* ty=Tensor[(7, 11, 1), float64] */;
  %47 = atanh(%46) /* ty=Tensor[(7, 11, 1), float64] */;
  %48 = cast(%47, dtype="float32") /* ty=Tensor[(7, 11, 1), float32] */;
  %49 = shape_of(%var_5815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%var_5815, dtype="float32") /* ty=Tensor[(7, 11, 1), float32] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %52 = cast(%var_5815, dtype="float32") /* ty=Tensor[(7, 11, 1), float32] */;
  %53 = floor_mod(%50, %51) /* ty=Tensor[(7, 11, ?), float32] */;
  %54 = sigmoid(%52) /* ty=Tensor[(7, 11, 1), float32] */;
  (%53, %54)
}

def @func_6631(%var_6572: Tensor[(3, 3), uint64], %var_6573: Tensor[(45), uint64], %var_6574: Tensor[(220), float32], %var_6582: Tensor[(1078, 9), float32]) -> (Tensor[(6, 15, 1), float64], Tensor[(3, 3), uint64], Tensor[(220), float32], Tensor[(1078, 9), bool], Tensor[(45), int32], Tensor[(1078, 1), float32]) {
  %55 = @func_6552() /* ty=(Tensor[(6, 15, 1), float64],) */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(1078, 1), float32] */, dtype="bool") /* ty=Tensor[(1078, 1), bool] */;
  %57 = cast(%var_6582, dtype="bool") /* ty=Tensor[(1078, 9), bool] */;
  %58 = cast(%var_6572, dtype="uint64") /* ty=Tensor[(3, 3), uint64] */;
  %59 = cast(%var_6573, dtype="uint64") /* ty=Tensor[(45), uint64] */;
  %60 = cast(%var_6574, dtype="float32") /* ty=Tensor[(220), float32] */;
  %61 = cast(meta[relay.Constant][5] /* ty=Tensor[(1078, 1), float32] */, dtype="float32") /* ty=Tensor[(1078, 1), float32] */;
  %62 = cast(%var_6572, dtype="uint64") /* ty=Tensor[(3, 3), uint64] */;
  %63 = reshape(%58, newshape=[3, 3, 1]) /* ty=Tensor[(3, 3, 1), uint64] */;
  %64 = reshape(%59, newshape=[3, 3, 5]) /* ty=Tensor[(3, 3, 5), uint64] */;
  %65 = reshape(%60, newshape=[1, 220]) /* ty=Tensor[(1, 220), float32] */;
  %66 = reshape(%61, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %67 = reshape(%62, newshape=[3, 3, 1]) /* ty=Tensor[(3, 3, 1), uint64] */;
  %68 = @func_5588(%63, %64, %65, %66, %67) /* ty=(Tensor[(3, 3, 5), uint64], Tensor[(756), int64], Tensor[(448), uint32], Tensor[(1, 220), float32], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(3, 3, ?), bool]) */;
  %69 = %68.5;
  %70 = cast(%69, dtype="int32") /* ty=int32 */;
  %71 = cast(%var_6573, dtype="int32") /* ty=Tensor[(45), int32] */;
  %72 = cast(meta[relay.Constant][5] /* ty=Tensor[(1078, 1), float32] */, dtype="float32") /* ty=Tensor[(1078, 1), float32] */;
  %73 = exp(%72) /* ty=Tensor[(1078, 1), float32] */;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(1078, 1), float32] */;
  %75 = %55.0;
  %76 = equal(%56, %57) /* ty=Tensor[(1078, 9), bool] */;
  %77 = multiply(%70, %71) /* ty=Tensor[(45), int32] */;
  %78 = log2(%74) /* ty=Tensor[(1078, 1), float32] */;
  (%75, %var_6572, %var_6574, %76, %77, %78)
}

def @func_3172(%var_3164: Tensor[(2, 14, 3), int64], %var_3165: Tensor[(2, 14, 3), int64]) -> Tensor[(2, 14, 3), int64] {
  %79 = cast(%var_3165, dtype="int64") /* ty=Tensor[(2, 14, 3), int64] */;
  %80 = shape_of(%var_3164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%var_3164, dtype="int64") /* ty=Tensor[(2, 14, 3), int64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%81, %82) /* ty=Tensor[(2, 14, 3), int64] */
}

def @func_4337(%var_4304: float32, %var_4305: Tensor[(14, 1, 3), float32]) -> (Tensor[(14, 1, 3), bool], Tensor[(11, 13, 5), bool], Tensor[(715), uint8]) {
  %83 = cast(%var_4304, dtype="bool") /* ty=bool */;
  %84 = cast(%var_4305, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
  %85 = cast(meta[relay.Constant][6] /* ty=Tensor[(715), uint8] */, dtype="uint8") /* ty=Tensor[(715), uint8] */;
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(715), uint8] */, dtype="uint8") /* ty=Tensor[(715), uint8] */;
  %87 = reshape(%85, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), uint8] */;
  %88 = reshape(%86, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), uint8] */;
  %89 = @func_3506(%87, %88) /* ty=(Tensor[(11, 13, 5), bool],) */;
  %90 = less(%83, %84) /* ty=Tensor[(14, 1, 3), bool] */;
  %91 = %89.0;
  (%90, %91, meta[relay.Constant][6] /* ty=Tensor[(715), uint8] */)
}

def @func_7057(%var_7046: Tensor[(1280), float64]) -> (float64, Tensor[(66), float64], Tensor[(1280), float64], Tensor[(195), float32]) {
  %92 = @func_6746() /* ty=(Tensor[(7, 13, 4), float64], float64, float64, Tensor[(2, 528), float32]) */;
  %93 = cast(meta[relay.Constant][7] /* ty=Tensor[(195), float32] */, dtype="float32") /* ty=Tensor[(195), float32] */;
  %94 = cast(%var_7046, dtype="float64") /* ty=Tensor[(1280), float64] */;
  %95 = reshape(%93, newshape=[3, 5, 13]) /* ty=Tensor[(3, 5, 13), float32] */;
  %96 = reshape(%94, newshape=[1280]) /* ty=Tensor[(1280), float64] */;
  %97 = @func_5149(%95, %96) /* ty=(Tensor[(3, 5, 13), float32], float64, Tensor[(1280), float64], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1056), float64], Tensor[(5, 44), float32]) */;
  %98 = cast(meta[relay.Constant][7] /* ty=Tensor[(195), float32] */, dtype="float32") /* ty=Tensor[(195), float32] */;
  %99 = %92.1;
  %100 = %97.3;
  %101 = cosh(%98) /* ty=Tensor[(195), float32] */;
  (%99, %100, %var_7046, %101)
}

def @func_7099() -> Tensor[(6, 15, 1), float64] {
  @func_6304() /* ty=Tensor[(6, 15, 1), float64] */
}

def @func_7414() -> Tensor[(6, 15, 1), float64] {
  %102 = @func_6552() /* ty=(Tensor[(6, 15, 1), float64],) */;
  %102.0
}

def @func_5149(%var_5132: Tensor[(3, 5, 13), float32], %var_5141: Tensor[(1280), float64]) -> (Tensor[(3, 5, 13), float32], float64, Tensor[(1280), float64], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1056), float64], Tensor[(5, 44), float32]) {
  %103 = cast(%var_5132, dtype="float32") /* ty=Tensor[(3, 5, 13), float32] */;
  %104 = cast(%var_5141, dtype="float64") /* ty=Tensor[(1280), float64] */;
  %105 = cast(meta[relay.Constant][8] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %106 = cast(7.31502f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %107 = cast(meta[relay.Constant][9] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %108 = cast(meta[relay.Constant][10] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %109 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 44), float32] */, dtype="float32") /* ty=Tensor[(5, 44), float32] */;
  %110 = reshape(%104, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float64] */;
  %111 = reshape(%105, newshape=[66]) /* ty=Tensor[(66), float64] */;
  %112 = reshape(%106, newshape=[]) /* ty=float64 */;
  %113 = reshape(%107, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %114 = reshape(%108, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %115 = reshape(%109, newshape=[1, 220]) /* ty=Tensor[(1, 220), float32] */;
  %116 = @func_3445(%110, %111, %112, %113, %114, %115) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(12, 2), float64], Tensor[(?, 2, 12), bool], Tensor[(16, 10, 8), int16], Tensor[(16, 6, 11), bool], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1056), float64], Tensor[(1, 220), float32], Tensor[(8, 11, 7), float32], Tensor[(308, 2), float32]) */;
  %117 = exp(%103) /* ty=Tensor[(3, 5, 13), float32] */;
  %118 = %116.6;
  (%117, %118, %var_5141, meta[relay.Constant][8] /* ty=Tensor[(66), float64] */, 7.31502f64 /* ty=float64 */, meta[relay.Constant][9] /* ty=Tensor[(14), float64] */, meta[relay.Constant][10] /* ty=Tensor[(1056), float64] */, meta[relay.Constant][11] /* ty=Tensor[(5, 44), float32] */)
}

def @func_2210(%var_2087: Tensor[(7, 11, 14), float32], %var_2095: Tensor[(7, 11, 14), float32], %var_2100: Tensor[(24), float64], %var_2104: float64, %var_2105: Tensor[(14), float64], %var_2172: Tensor[(756), int64], %var_2175: Tensor[(55, 4), float32]) -> (Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(7, 11, 14), float32], Tensor[(7, 11, 14), int64], Tensor[(12, 9, 7), bool], Tensor[(756), int64], Tensor[(10, 2, 11), float32], Tensor[(55, 4), float32], Tensor[(?, 2, 12), float32], Tensor[(10, 2, 11), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(14, 1), float64], Tensor[(66, 1), float64], Tensor[(1056), float64]) {
  %119 = cast(%var_2100, dtype="float64") /* ty=Tensor[(24), float64] */;
  %120 = reshape(%119, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %121 = @func_439(%120) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %122 = cast(%var_2104, dtype="float64") /* ty=float64 */;
  %123 = cast(%var_2105, dtype="float64") /* ty=Tensor[(14), float64] */;
  %124 = reshape(%122, newshape=[]) /* ty=float64 */;
  %125 = reshape(%123, newshape=[2, 1, 7]) /* ty=Tensor[(2, 1, 7), float64] */;
  %126 = @func_65(%124, %125) /* ty=(Tensor[(2, ?, 7), float32],) */;
  %127 = cast(%var_2087, dtype="float32") /* ty=Tensor[(7, 11, 14), float32] */;
  %128 = sin(%127) /* ty=Tensor[(7, 11, 14), float32] */;
  %129 = cast(%128, dtype="float32") /* ty=Tensor[(7, 11, 14), float32] */;
  %130 = cast(%var_2095, dtype="uint16") /* ty=Tensor[(7, 11, 14), uint16] */;
  %131 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%128, dtype="uint16") /* ty=Tensor[(7, 11, 14), uint16] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %134 = minimum(%132, %133) /* ty=Tensor[(7, 11, 14), uint16] */;
  %135 = cast(%128, dtype="int64") /* ty=Tensor[(7, 11, 14), int64] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="int64") /* ty=Tensor[(7, 11, 14), int64] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %139 = cast(%var_2172, dtype="int64") /* ty=Tensor[(756), int64] */;
  %140 = cast(%var_2172, dtype="int64") /* ty=Tensor[(756), int64] */;
  %141 = reshape(%139, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), int64] */;
  %142 = reshape(%140, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), int64] */;
  %143 = @func_1902(%141, %142) /* ty=(Tensor[(12, 9, 7), bool],) */;
  %144 = cast(%var_2175, dtype="float32") /* ty=Tensor[(55, 4), float32] */;
  %145 = reshape(%144, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
  %146 = @func_1123(%145) /* ty=(Tensor[(10, 2, 11), float32],) */;
  %147 = %121.1;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
  %149 = reshape(%148, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %150 = @func_439(%149) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %151 = cast(%var_2175, dtype="float32") /* ty=Tensor[(55, 4), float32] */;
  %152 = reshape(%151, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
  %153 = @func_1123(%152) /* ty=(Tensor[(10, 2, 11), float32],) */;
  %154 = cast(meta[relay.Constant][12] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
  %155 = cast(meta[relay.Constant][12] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
  %156 = reshape(%154, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
  %157 = reshape(%155, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
  %158 = @func_1755(%156, %157) /* ty=(Tensor[(8, 11, 7), float32],) */;
  %159 = cast(meta[relay.Constant][13] /* ty=Tensor[(66, 1), float64] */, dtype="float64") /* ty=Tensor[(66, 1), float64] */;
  %160 = cast(%var_2104, dtype="float64") /* ty=float64 */;
  %161 = %126.0;
  %162 = cast(%161, dtype="float64") /* ty=Tensor[(2, ?, 7), float64] */;
  %163 = cast(%var_2100, dtype="float64") /* ty=Tensor[(24), float64] */;
  %164 = cast(meta[relay.Constant][14] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %165 = cast(%var_2175, dtype="float32") /* ty=Tensor[(55, 4), float32] */;
  %166 = reshape(%159, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float64] */;
  %167 = reshape(%160, newshape=[]) /* ty=float64 */;
  %168 = reshape(%162, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
  %169 = reshape(%163, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
  %170 = reshape(%164, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float64] */;
  %171 = reshape(%165, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %172 = @func_1472(%166, %167, %168, %169, %170, %171) /* ty=(Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) */;
  %173 = cos(%129) /* ty=Tensor[(7, 11, 14), float32] */;
  %174 = right_shift(%137, %138) /* ty=Tensor[(7, 11, 14), int64] */;
  %175 = %143.0;
  %176 = %146.0;
  %177 = %150.1;
  %178 = %153.0;
  %179 = %158.0;
  %180 = %172.2;
  (%147, %var_2100, %161, %var_2104, %var_2105, %173, %174, %175, %var_2172, %176, %var_2175, %177, %178, %179, meta[relay.Constant][12] /* ty=Tensor[(616), float32] */, %180, meta[relay.Constant][13] /* ty=Tensor[(66, 1), float64] */, meta[relay.Constant][14] /* ty=Tensor[(1056), float64] */)
}

def @func_3153(%var_3139: Tensor[(14, 8, 16), float64]) -> Tensor[(14, 8, 16), float64] {
  %181 = cast(%var_3139, dtype="float64") /* ty=Tensor[(14, 8, 16), float64] */;
  %182 = acos(%181) /* ty=Tensor[(14, 8, 16), float64] */;
  %183 = cast(%var_3139, dtype="float64") /* ty=Tensor[(14, 8, 16), float64] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%182, dtype="float64") /* ty=Tensor[(14, 8, 16), float64] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%185, %186) /* ty=Tensor[(14, 8, 16), float64] */
}

def @func_5266(%var_5160: Tensor[(14, 4, 8), uint32], %var_5204: Tensor[(220, 1), float32], %var_5222: Tensor[(1078), float32], %var_5223: float64, %var_5224: Tensor[(14), float64]) -> (Tensor[(14, 4, 8), uint32], Tensor[(14, 4, 8), uint16], Tensor[(11, 11, 11), float64], Tensor[(1056), float64], Tensor[(220, 1), float32], Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(7, 11, 14), int64], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(756), int64], Tensor[(14, 4, 8), float64], Tensor[(?, 2, 12), bool]) {
  %187 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 4, 8), uint32] */, dtype="uint32") /* ty=Tensor[(14, 4, 8), uint32] */;
  %188 = shape_of(%var_5160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%var_5160, dtype="uint32") /* ty=Tensor[(14, 4, 8), uint32] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %191 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 4, 8), uint32] */, dtype="uint16") /* ty=Tensor[(14, 4, 8), uint16] */;
  %192 = shape_of(%var_5160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%var_5160, dtype="uint16") /* ty=Tensor[(14, 4, 8), uint16] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %195 = cast(meta[relay.Constant][17] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %196 = cast(%var_5204, dtype="float32") /* ty=Tensor[(220, 1), float32] */;
  %197 = reshape(%195, newshape=[8, 132]) /* ty=Tensor[(8, 132), float64] */;
  %198 = reshape(%196, newshape=[220, 1]) /* ty=Tensor[(220, 1), float32] */;
  %199 = @func_4271(%197, %198) /* ty=(Tensor[(11, 11, 11), float64], Tensor[(?, 2, 12), float32], Tensor[(66, 1), float64], float64, Tensor[(14), float64], Tensor[(24), float64], Tensor[(8, 132), float64], Tensor[(220, 1), float32]) */;
  %200 = cast(meta[relay.Constant][18] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %201 = reshape(%200, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %202 = @func_439(%201) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %203 = cast(%var_5222, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %204 = cast(%var_5222, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %205 = %202.1;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
  %207 = cast(%var_5223, dtype="float64") /* ty=float64 */;
  %208 = cast(%var_5224, dtype="float64") /* ty=Tensor[(14), float64] */;
  %209 = cast(meta[relay.Constant][19] /* ty=Tensor[(756), int64] */, dtype="int64") /* ty=Tensor[(756), int64] */;
  %210 = cast(%var_5204, dtype="float32") /* ty=Tensor[(220, 1), float32] */;
  %211 = reshape(%203, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %212 = reshape(%204, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %213 = reshape(%206, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %214 = reshape(%207, newshape=[]) /* ty=float64 */;
  %215 = reshape(%208, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %216 = reshape(%209, newshape=[756]) /* ty=Tensor[(756), int64] */;
  %217 = reshape(%210, newshape=[55, 4]) /* ty=Tensor[(55, 4), float32] */;
  %218 = @func_2210(%211, %212, %213, %214, %215, %216, %217) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(7, 11, 14), float32], Tensor[(7, 11, 14), int64], Tensor[(12, 9, 7), bool], Tensor[(756), int64], Tensor[(10, 2, 11), float32], Tensor[(55, 4), float32], Tensor[(?, 2, 12), float32], Tensor[(10, 2, 11), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(14, 1), float64], Tensor[(66, 1), float64], Tensor[(1056), float64]) */;
  %219 = cast(%var_5160, dtype="float32") /* ty=Tensor[(14, 4, 8), float32] */;
  %220 = acos(%219) /* ty=Tensor[(14, 4, 8), float32] */;
  %221 = cast(%220, dtype="float32") /* ty=Tensor[(14, 4, 8), float32] */;
  %222 = atan(%221) /* ty=Tensor[(14, 4, 8), float32] */;
  %223 = cast(%222, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  %224 = sin(%223) /* ty=Tensor[(14, 4, 8), float64] */;
  %225 = cast(%222, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %229 = cast(%205, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
  %230 = reshape(%229, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %231 = @func_439(%230) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %232 = left_shift(%189, %190) /* ty=Tensor[(14, 4, 8), uint32] */;
  %233 = subtract(%193, %194) /* ty=Tensor[(14, 4, 8), uint16] */;
  %234 = %199.0;
  %235 = %218.6;
  %236 = mod(%227, %228) /* ty=Tensor[(14, 4, 8), float64] */;
  %237 = %231.0;
  (%232, %233, %234, meta[relay.Constant][17] /* ty=Tensor[(1056), float64] */, %var_5204, %205, meta[relay.Constant][18] /* ty=Tensor[(24), float64] */, %235, %var_5222, %var_5223, %var_5224, meta[relay.Constant][19] /* ty=Tensor[(756), int64] */, %236, %237)
}

def @func_3705(%var_3671: Tensor[(12, 4, 9), float32], %var_3692: Tensor[(22, 3), float64], %var_3693: float64, %var_3694: Tensor[(14, 1), float64], %var_3695: Tensor[(24, 1), float64], %var_3696: Tensor[(88, 12), float64], %var_3697: Tensor[(220), float32]) -> (Tensor[(12, 4, 9), float32], float64, Tensor[(22, 3), float64], float64, Tensor[(14, 1), float64], Tensor[(24, 1), float64], Tensor[(88, 12), float64], Tensor[(220), float32]) {
  %238 = cast(%var_3671, dtype="float32") /* ty=Tensor[(12, 4, 9), float32] */;
  %239 = cast(%var_3692, dtype="float64") /* ty=Tensor[(22, 3), float64] */;
  %240 = cast(%var_3693, dtype="float64") /* ty=float64 */;
  %241 = cast(%var_3694, dtype="float64") /* ty=Tensor[(14, 1), float64] */;
  %242 = cast(%var_3695, dtype="float64") /* ty=Tensor[(24, 1), float64] */;
  %243 = cast(%var_3696, dtype="float64") /* ty=Tensor[(88, 12), float64] */;
  %244 = cast(%var_3697, dtype="float32") /* ty=Tensor[(220), float32] */;
  %245 = reshape(%239, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float64] */;
  %246 = reshape(%240, newshape=[]) /* ty=float64 */;
  %247 = reshape(%241, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
  %248 = reshape(%242, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
  %249 = reshape(%243, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float64] */;
  %250 = reshape(%244, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %251 = @func_1472(%245, %246, %247, %248, %249, %250) /* ty=(Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) */;
  %252 = log2(%238) /* ty=Tensor[(12, 4, 9), float32] */;
  %253 = %251.1;
  (%252, %253, %var_3692, %var_3693, %var_3694, %var_3695, %var_3696, %var_3697)
}

def @func_7776() -> (Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(6, 15, 7), float32]) {
  %254 = cast(meta[relay.Constant][20] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
  %255 = cast(meta[relay.Constant][20] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
  %256 = reshape(%254, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
  %257 = reshape(%255, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
  %258 = @func_1755(%256, %257) /* ty=(Tensor[(8, 11, 7), float32],) */;
  %259 = @func_7664() /* ty=Tensor[(6, 15, ?), float64] */;
  %260 = cast(%259, dtype="float32") /* ty=Tensor[(6, 15, ?), float32] */;
  %261 = asin(%260) /* ty=Tensor[(6, 15, ?), float32] */;
  %262 = @func_7664() /* ty=Tensor[(6, 15, ?), float64] */;
  %263 = cast(%262, dtype="bool") /* ty=Tensor[(6, 15, ?), bool] */;
  %264 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%261, dtype="bool") /* ty=Tensor[(6, 15, ?), bool] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %267 = logical_and(%265, %266) /* ty=Tensor[(6, 15, ?), bool] */;
  %268 = cast(%262, dtype="float64") /* ty=Tensor[(6, 15, ?), float64] */;
  %269 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 15, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 7), float64] */;
  %270 = floor_divide(%268, %269) /* ty=Tensor[(6, 15, 7), float64] */;
  %271 = cast(%261, dtype="uint16") /* ty=Tensor[(6, 15, ?), uint16] */;
  %272 = cast(%270, dtype="uint16") /* ty=Tensor[(6, 15, 7), uint16] */;
  %273 = bitwise_and(%271, %272) /* ty=Tensor[(6, 15, 7), uint16] */;
  %274 = cast(%267, dtype="float32") /* ty=Tensor[(6, 15, ?), float32] */;
  %275 = cast(%273, dtype="float32") /* ty=Tensor[(6, 15, 7), float32] */;
  %276 = %258.0;
  %277 = power(%274, %275) /* ty=Tensor[(6, 15, 7), float32] */;
  (%276, meta[relay.Constant][20] /* ty=Tensor[(616), float32] */, %277)
}

def @func_65(%var_53: float64, %var_54: Tensor[(2, 1, 7), float64]) -> (Tensor[(2, ?, 7), float32],) {
  %278 = cast(%var_53, dtype="bool") /* ty=bool */;
  %279 = cast(%var_54, dtype="bool") /* ty=Tensor[(2, 1, 7), bool] */;
  %280 = greater_equal(%278, %279) /* ty=Tensor[(2, 1, 7), bool] */;
  %281 = cast(%var_54, dtype="float32") /* ty=Tensor[(2, 1, 7), float32] */;
  %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%280, dtype="float32") /* ty=Tensor[(2, 1, 7), float32] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %285 = multiply(%283, %284) /* ty=Tensor[(2, ?, 7), float32] */;
  (%285,)
}

def @func_1755(%var_1749: Tensor[(8, 11, 7), float32], %var_1750: Tensor[(8, 11, 7), float32]) -> (Tensor[(8, 11, 7), float32],) {
  %286 = cast(%var_1750, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
  %287 = shape_of(%var_1749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%var_1749, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %290 = floor_mod(%288, %289) /* ty=Tensor[(8, 11, 7), float32] */;
  (%290,)
}

def @func_7430() -> (Tensor[(6, 15, 1), float64],) {
  %291 = @func_7099() /* ty=Tensor[(6, 15, 1), float64] */;
  (%291,)
}

def @func_7521() -> (Tensor[(7, 13, 4), float64], Tensor[(15, 3, 10), float64], Tensor[(450), float64]) {
  %292 = @func_6746() /* ty=(Tensor[(7, 13, 4), float64], float64, float64, Tensor[(2, 528), float32]) */;
  %293 = cast(meta[relay.Constant][22] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %294 = reshape(%293, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), float64] */;
  %295 = @func_6564(%294) /* ty=(Tensor[(15, 3, 10), float64],) */;
  %296 = %292.0;
  %297 = %295.0;
  (%296, %297, meta[relay.Constant][22] /* ty=Tensor[(450), float64] */)
}

def @func_4840(%var_4819: Tensor[(7, 1, 8), bool], %var_4820: Tensor[(7, 10, 8), bool]) -> (Tensor[(7, 13, 9), float32], Tensor[(819), float64], Tensor[(7, 10, 8), bool], Tensor[(7, 13, 9), float32]) {
  %298 = cast(meta[relay.Constant][23] /* ty=Tensor[(819), float64] */, dtype="float64") /* ty=Tensor[(819), float64] */;
  %299 = reshape(%298, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), float64] */;
  %300 = cast(%var_4819, dtype="bool") /* ty=Tensor[(7, 1, 8), bool] */;
  %301 = cast(%var_4820, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
  %302 = logical_or(%300, %301) /* ty=Tensor[(7, 10, 8), bool] */;
  %303 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 10, 8), bool] */, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %307 = @func_2829(%299) /* ty=Tensor[(7, 13, 9), float32] */;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(7, 13, 9), float64] */;
  %309 = reshape(%308, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), float64] */;
  %310 = less(%305, %306) /* ty=Tensor[(7, 10, 8), bool] */;
  %311 = @func_2829(%309) /* ty=Tensor[(7, 13, 9), float32] */;
  (%307, meta[relay.Constant][23] /* ty=Tensor[(819), float64] */, %310, %311)
}

def @func_6892(%var_6848: Tensor[(21, 4), int64], %var_6887: Tensor[(2, 14, 3), int64]) -> (Tensor[(?, 2, 12), float32], Tensor[(2, 12), float64], Tensor[(21, 4), int64], Tensor[(14), float64], Tensor[(1080), float64], Tensor[(7, 154), float32], Tensor[(6, 15, 448), float64], Tensor[(2, 14, 3), bool]) {
  %312 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 12), float64] */;
  %313 = reshape(%312, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %314 = @func_439(%313) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %315 = cast(meta[relay.Constant][26] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %316 = cast(meta[relay.Constant][27] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %317 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 154), float32] */, dtype="float32") /* ty=Tensor[(7, 154), float32] */;
  %318 = reshape(%315, newshape=[6, 15, 12]) /* ty=Tensor[(6, 15, 12), float64] */;
  %319 = reshape(%316, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %320 = reshape(%317, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %321 = @func_6367(%318, %319, %320) /* ty=(Tensor[(6, 15, 12), float64], Tensor[(220, 1), float32], Tensor[(448), uint32], Tensor[(220), float32], Tensor[(1078), float32], float64, Tensor[(14), float64]) */;
  %322 = @func_6804() /* ty=(Tensor[(6, 15, 1), float64],) */;
  %323 = %322.0;
  %324 = cast(meta[relay.Constant][27] /* ty=Tensor[(448), uint32] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %325 = cast(%323, dtype="float64") /* ty=Tensor[(6, 15, 1), float64] */;
  %326 = cast(%var_6848, dtype="int64") /* ty=Tensor[(21, 4), int64] */;
  %327 = cast(%var_6848, dtype="int64") /* ty=Tensor[(21, 4), int64] */;
  %328 = reshape(%326, newshape=[2, 14, 3]) /* ty=Tensor[(2, 14, 3), int64] */;
  %329 = reshape(%327, newshape=[2, 14, 3]) /* ty=Tensor[(2, 14, 3), int64] */;
  %330 = @func_3172(%328, %329) /* ty=Tensor[(2, 14, 3), int64] */;
  %331 = cast(%var_6887, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = %314.1;
  %336 = %321.6;
  %337 = mod(%324, %325) /* ty=Tensor[(6, 15, 448), float64] */;
  %338 = less_equal(%333, %334) /* ty=Tensor[(2, 14, 3), bool] */;
  (%335, meta[relay.Constant][25] /* ty=Tensor[(2, 12), float64] */, %var_6848, %336, meta[relay.Constant][26] /* ty=Tensor[(1080), float64] */, meta[relay.Constant][28] /* ty=Tensor[(7, 154), float32] */, %337, %338)
}

def @func_7664() -> Tensor[(6, 15, ?), float64] {
  %339 = @func_7430() /* ty=(Tensor[(6, 15, 1), float64],) */;
  %340 = %339.0;
  %341 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 15, 1), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 1), float64] */;
  %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%340, dtype="float64") /* ty=Tensor[(6, 15, 1), float64] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  minimum(%343, %344) /* ty=Tensor[(6, 15, ?), float64] */
}

def @func_7687() -> (Tensor[(15, 3, 10), float64],) {
  %345 = @func_7521() /* ty=(Tensor[(7, 13, 4), float64], Tensor[(15, 3, 10), float64], Tensor[(450), float64]) */;
  %346 = %345.1;
  (%346,)
}

def @func_3445(%var_3389: Tensor[(16, 10, 8), float64], %var_3432: Tensor[(66), float64], %var_3433: float64, %var_3434: Tensor[(14), float64], %var_3435: Tensor[(1056), float64], %var_3436: Tensor[(1, 220), float32]) -> (Tensor[(?, 2, 12), float32], Tensor[(12, 2), float64], Tensor[(?, 2, 12), bool], Tensor[(16, 10, 8), int16], Tensor[(16, 6, 11), bool], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1056), float64], Tensor[(1, 220), float32], Tensor[(8, 11, 7), float32], Tensor[(308, 2), float32]) {
  %347 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
  %348 = reshape(%347, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %349 = @func_439(%348) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %350 = %349.1;
  %351 = cast(%350, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
  %352 = reshape(%351, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %353 = @func_439(%352) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %354 = cast(%var_3389, dtype="float64") /* ty=Tensor[(16, 10, 8), float64] */;
  %355 = cos(%354) /* ty=Tensor[(16, 10, 8), float64] */;
  %356 = cast(%var_3389, dtype="int16") /* ty=Tensor[(16, 10, 8), int16] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="int16") /* ty=Tensor[(16, 10, 8), int16] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %360 = cast(%var_3432, dtype="float64") /* ty=Tensor[(66), float64] */;
  %361 = cast(%var_3433, dtype="float64") /* ty=float64 */;
  %362 = cast(%var_3434, dtype="float64") /* ty=Tensor[(14), float64] */;
  %363 = cast(%350, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
  %364 = cast(%var_3435, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %365 = cast(%var_3436, dtype="float32") /* ty=Tensor[(1, 220), float32] */;
  %366 = reshape(%360, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float64] */;
  %367 = reshape(%361, newshape=[]) /* ty=float64 */;
  %368 = reshape(%362, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
  %369 = reshape(%363, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
  %370 = reshape(%364, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float64] */;
  %371 = reshape(%365, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %372 = @func_1472(%366, %367, %368, %369, %370, %371) /* ty=(Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) */;
  %373 = cast(meta[relay.Constant][31] /* ty=Tensor[(308, 2), float32] */, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
  %374 = cast(meta[relay.Constant][31] /* ty=Tensor[(308, 2), float32] */, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
  %375 = reshape(%373, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
  %376 = reshape(%374, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
  %377 = @func_1755(%375, %376) /* ty=(Tensor[(8, 11, 7), float32],) */;
  %378 = %353.0;
  %379 = bitwise_xor(%358, %359) /* ty=Tensor[(16, 10, 8), int16] */;
  %380 = %372.6;
  %381 = %377.0;
  (%350, meta[relay.Constant][30] /* ty=Tensor[(12, 2), float64] */, %378, %379, %380, %var_3432, %var_3433, %var_3434, %var_3435, %var_3436, %381, meta[relay.Constant][31] /* ty=Tensor[(308, 2), float32] */)
}

def @func_4169(%var_4155: Tensor[(8, 14, 4), float32], %var_4156: Tensor[(8, 14, 4), float32]) -> Tensor[(8, 14, 4), uint32] {
  %382 = cast(%var_4156, dtype="float32") /* ty=Tensor[(8, 14, 4), float32] */;
  %383 = shape_of(%var_4155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%var_4155, dtype="float32") /* ty=Tensor[(8, 14, 4), float32] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %386 = floor_mod(%384, %385) /* ty=Tensor[(8, 14, 4), float32] */;
  %387 = cast(%386, dtype="uint32") /* ty=Tensor[(8, 14, 4), uint32] */;
  %388 = shape_of(%var_4155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%var_4155, dtype="uint32") /* ty=Tensor[(8, 14, 4), uint32] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%389, %390) /* ty=Tensor[(8, 14, 4), uint32] */
}

def @func_7395(%var_7388: Tensor[(7, 13, 4), float64]) -> (Tensor[(7, 13, 4), int8],) {
  %391 = @func_6746() /* ty=(Tensor[(7, 13, 4), float64], float64, float64, Tensor[(2, 528), float32]) */;
  %392 = %391.0;
  %393 = cast(%var_7388, dtype="int8") /* ty=Tensor[(7, 13, 4), int8] */;
  %394 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%392, dtype="int8") /* ty=Tensor[(7, 13, 4), int8] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %397 = bitwise_xor(%395, %396) /* ty=Tensor[(7, 13, 4), int8] */;
  (%397,)
}

def @func_2548(%var_2485: Tensor[(4, 4, 2), float32], %var_2493: Tensor[(1078), float32], %var_2494: Tensor[(1, 24), float64], %var_2496: Tensor[(14), float64], %var_2497: Tensor[(756), int64], %var_2498: Tensor[(220), float32]) -> (Tensor[(1056), float64], Tensor[(1078), float32], Tensor[(1, 24), float64], Tensor[(14), float64], Tensor[(756), int64], Tensor[(220), float32], Tensor[(4, 4, 2), float64], Tensor[(10, 2, 11), float32], Tensor[(10, 2, 11), float32]) {
  %398 = cast(%var_2493, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %399 = cast(%var_2493, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %400 = cast(%var_2494, dtype="float64") /* ty=Tensor[(1, 24), float64] */;
  %401 = cast(1.39945f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %402 = cast(%var_2496, dtype="float64") /* ty=Tensor[(14), float64] */;
  %403 = cast(%var_2497, dtype="int64") /* ty=Tensor[(756), int64] */;
  %404 = cast(%var_2498, dtype="float32") /* ty=Tensor[(220), float32] */;
  %405 = reshape(%398, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %406 = reshape(%399, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %407 = reshape(%400, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %408 = reshape(%401, newshape=[]) /* ty=float64 */;
  %409 = reshape(%402, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %410 = reshape(%403, newshape=[756]) /* ty=Tensor[(756), int64] */;
  %411 = reshape(%404, newshape=[55, 4]) /* ty=Tensor[(55, 4), float32] */;
  %412 = @func_2210(%405, %406, %407, %408, %409, %410, %411) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(7, 11, 14), float32], Tensor[(7, 11, 14), int64], Tensor[(12, 9, 7), bool], Tensor[(756), int64], Tensor[(10, 2, 11), float32], Tensor[(55, 4), float32], Tensor[(?, 2, 12), float32], Tensor[(10, 2, 11), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(14, 1), float64], Tensor[(66, 1), float64], Tensor[(1056), float64]) */;
  %413 = cast(%var_2485, dtype="float32") /* ty=Tensor[(4, 4, 2), float32] */;
  %414 = cosh(%413) /* ty=Tensor[(4, 4, 2), float32] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(4, 4, 2), float64] */;
  %416 = cast(1.39945f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %417 = cast(%var_2498, dtype="float32") /* ty=Tensor[(220), float32] */;
  %418 = reshape(%417, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
  %419 = @func_1123(%418) /* ty=(Tensor[(10, 2, 11), float32],) */;
  %420 = cast(%var_2498, dtype="float32") /* ty=Tensor[(220), float32] */;
  %421 = reshape(%420, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
  %422 = @func_1123(%421) /* ty=(Tensor[(10, 2, 11), float32],) */;
  %423 = %412.17;
  %424 = add(%415, %416) /* ty=Tensor[(4, 4, 2), float64] */;
  %425 = %419.0;
  %426 = %422.0;
  (%423, %var_2493, %var_2494, %var_2496, %var_2497, %var_2498, %424, %425, %426)
}

def @main(%var_7815: Tensor[(1, 12, 16), float64], %var_7816: Tensor[(9, 12, 16), float64]) -> (Tensor[(9, 12, 16), float32], Tensor[(9, 12, 16), float32], Tensor[(9, 12, 16), bool]) {
  %427 = cast(%var_7815, dtype="float32") /* ty=Tensor[(1, 12, 16), float32] */;
  %428 = cast(%var_7816, dtype="float32") /* ty=Tensor[(9, 12, 16), float32] */;
  %429 = cast(%var_7815, dtype="float64") /* ty=Tensor[(1, 12, 16), float64] */;
  %430 = cast(%var_7816, dtype="float64") /* ty=Tensor[(9, 12, 16), float64] */;
  %431 = floor_divide(%429, %430) /* ty=Tensor[(9, 12, 16), float64] */;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(9, 12, 16), float32] */;
  %433 = cast(%var_7816, dtype="bool") /* ty=Tensor[(9, 12, 16), bool] */;
  %434 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%431, dtype="bool") /* ty=Tensor[(9, 12, 16), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %437 = mod(%427, %428) /* ty=Tensor[(9, 12, 16), float32] */;
  %438 = asinh(%432) /* ty=Tensor[(9, 12, 16), float32] */;
  %439 = less(%435, %436) /* ty=Tensor[(9, 12, 16), bool] */;
  (%437, %438, %439)
}

def @func_6521(%var_6496: float64, %var_6497: Tensor[(1056), float64]) -> (Tensor[(6, 15, ?), float32], Tensor[(7, 13, 9), float32], Tensor[(819, 1), float64], Tensor[(6, 15, 1), float32], Tensor[(2, ?, 7), float32], Tensor[(6), float32], Tensor[(24), float64], Tensor[(10, 2, 11), float32], Tensor[(220), float32], Tensor[(220), float32], Tensor[(66), float64], float64, Tensor[(1056), float64], Tensor[(7, 1, 1), float32], Tensor[(1, 7), float32]) {
  %440 = @func_6304() /* ty=Tensor[(6, 15, 1), float64] */;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(6, 15, 1), float32] */;
  %442 = acos(%441) /* ty=Tensor[(6, 15, 1), float32] */;
  %443 = cast(%440, dtype="int8") /* ty=Tensor[(6, 15, 1), int8] */;
  %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%442, dtype="int8") /* ty=Tensor[(6, 15, 1), int8] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %447 = logical_xor(%445, %446) /* ty=Tensor[(6, 15, ?), int8] */;
  %448 = cast(%442, dtype="float32") /* ty=Tensor[(6, 15, 1), float32] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="float32") /* ty=Tensor[(6, 15, ?), float32] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %452 = cast(meta[relay.Constant][32] /* ty=Tensor[(819, 1), float64] */, dtype="float64") /* ty=Tensor[(819, 1), float64] */;
  %453 = reshape(%452, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), float64] */;
  %454 = cast(%442, dtype="float64") /* ty=Tensor[(6, 15, 1), float64] */;
  %455 = sqrt(%454) /* ty=Tensor[(6, 15, 1), float64] */;
  %456 = cast(%455, dtype="float32") /* ty=Tensor[(6, 15, 1), float32] */;
  %457 = cast(meta[relay.Constant][33] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %458 = cast(meta[relay.Constant][34] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %459 = reshape(%457, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
  %460 = reshape(%458, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %461 = @func_938(%459, %460) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(24), float64], Tensor[(?, ?, 6), uint64], Tensor[(?, 2, 12), bool], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(?, ?, 6), uint8], Tensor[(?, ?, 6), float64], Tensor[(2, ?, 7), float32], Tensor[(?, 2, 12), bool]) */;
  %462 = cast(meta[relay.Constant][35] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %463 = reshape(%462, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
  %464 = @func_1123(%463) /* ty=(Tensor[(10, 2, 11), float32],) */;
  %465 = cast(meta[relay.Constant][36] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %466 = cast(%var_6496, dtype="float64") /* ty=float64 */;
  %467 = %461.9;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(2, ?, 7), float64] */;
  %469 = cast(meta[relay.Constant][34] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %470 = cast(%var_6497, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %471 = %464.0;
  %472 = cast(%471, dtype="float32") /* ty=Tensor[(10, 2, 11), float32] */;
  %473 = reshape(%465, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float64] */;
  %474 = reshape(%466, newshape=[]) /* ty=float64 */;
  %475 = reshape(%468, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
  %476 = reshape(%469, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
  %477 = reshape(%470, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float64] */;
  %478 = reshape(%472, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %479 = @func_1472(%473, %474, %475, %476, %477, %478) /* ty=(Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) */;
  %480 = cast(%var_6496, dtype="float32") /* ty=float32 */;
  %481 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 7), float32] */, dtype="float32") /* ty=Tensor[(1, 7), float32] */;
  %482 = reshape(%480, newshape=[]) /* ty=float32 */;
  %483 = reshape(%481, newshape=[7, 1, 1]) /* ty=Tensor[(7, 1, 1), float32] */;
  %484 = floor_mod(%450, %451) /* ty=Tensor[(6, 15, ?), float32] */;
  %485 = @func_2829(%453) /* ty=Tensor[(7, 13, 9), float32] */;
  %486 = log2(%456) /* ty=Tensor[(6, 15, 1), float32] */;
  %487 = %479.8;
  %488 = @func_4297(%482, %483) /* ty=Tensor[(7, 1, 1), float32] */;
  (%484, %485, meta[relay.Constant][32] /* ty=Tensor[(819, 1), float64] */, %486, %467, meta[relay.Constant][33] /* ty=Tensor[(6), float32] */, meta[relay.Constant][34] /* ty=Tensor[(24), float64] */, %471, meta[relay.Constant][35] /* ty=Tensor[(220), float32] */, %487, meta[relay.Constant][36] /* ty=Tensor[(66), float64] */, %var_6496, %var_6497, %488, meta[relay.Constant][37] /* ty=Tensor[(1, 7), float32] */)
}

def @func_2829(%var_2797: Tensor[(7, 13, 9), float64]) -> Tensor[(7, 13, 9), float32] {
  %489 = cast(%var_2797, dtype="float64") /* ty=Tensor[(7, 13, 9), float64] */;
  %490 = sqrt(%489) /* ty=Tensor[(7, 13, 9), float64] */;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(7, 13, 9), float64] */;
  %492 = cosh(%491) /* ty=Tensor[(7, 13, 9), float64] */;
  %493 = cast(%492, dtype="float32") /* ty=Tensor[(7, 13, 9), float32] */;
  asin(%493) /* ty=Tensor[(7, 13, 9), float32] */
}

def @func_6304() -> Tensor[(6, 15, 1), float64] {
  %494 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 15, 1), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 1), float64] */;
  sin(%494) /* ty=Tensor[(6, 15, 1), float64] */
}

def @func_6367(%var_6333: Tensor[(6, 15, 12), float64], %var_6357: Tensor[(448), uint32], %var_6359: Tensor[(1078), float32]) -> (Tensor[(6, 15, 12), float64], Tensor[(220, 1), float32], Tensor[(448), uint32], Tensor[(220), float32], Tensor[(1078), float32], float64, Tensor[(14), float64]) {
  %495 = @func_6304() /* ty=Tensor[(6, 15, 1), float64] */;
  %496 = cast(%495, dtype="bool") /* ty=Tensor[(6, 15, 1), bool] */;
  %497 = cast(%var_6333, dtype="bool") /* ty=Tensor[(6, 15, 12), bool] */;
  %498 = equal(%496, %497) /* ty=Tensor[(6, 15, 12), bool] */;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(6, 15, 12), float64] */;
  %500 = cast(%var_6357, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %501 = cast(meta[relay.Constant][39] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %502 = cast(%var_6359, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %503 = cast(-2.94949f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %504 = cast(meta[relay.Constant][40] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %505 = reshape(%500, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), uint32] */;
  %506 = reshape(%501, newshape=[220, 1]) /* ty=Tensor[(220, 1), float32] */;
  %507 = reshape(%502, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %508 = reshape(%503, newshape=[]) /* ty=float64 */;
  %509 = reshape(%504, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %510 = @func_5266(%505, %506, %507, %508, %509) /* ty=(Tensor[(14, 4, 8), uint32], Tensor[(14, 4, 8), uint16], Tensor[(11, 11, 11), float64], Tensor[(1056), float64], Tensor[(220, 1), float32], Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(7, 11, 14), int64], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(756), int64], Tensor[(14, 4, 8), float64], Tensor[(?, 2, 12), bool]) */;
  %511 = sinh(%499) /* ty=Tensor[(6, 15, 12), float64] */;
  %512 = %510.4;
  (%511, %512, %var_6357, meta[relay.Constant][39] /* ty=Tensor[(220), float32] */, %var_6359, -2.94949f64 /* ty=float64 */, meta[relay.Constant][40] /* ty=Tensor[(14), float64] */)
}

def @func_7234(%var_7185: Tensor[(6, 15, 6), float64], %var_7226: Tensor[(448), float32]) -> (Tensor[(6, 15, 6), bool], float64, Tensor[(8, 14, 4), uint32], Tensor[(448), float32]) {
  %513 = @func_6552() /* ty=(Tensor[(6, 15, 1), float64],) */;
  %514 = %513.0;
  %515 = cast(%514, dtype="bool") /* ty=Tensor[(6, 15, 1), bool] */;
  %516 = cast(%var_7185, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
  %517 = @func_6746() /* ty=(Tensor[(7, 13, 4), float64], float64, float64, Tensor[(2, 528), float32]) */;
  %518 = cast(%var_7226, dtype="float32") /* ty=Tensor[(448), float32] */;
  %519 = cast(%var_7226, dtype="float32") /* ty=Tensor[(448), float32] */;
  %520 = reshape(%518, newshape=[8, 14, 4]) /* ty=Tensor[(8, 14, 4), float32] */;
  %521 = reshape(%519, newshape=[8, 14, 4]) /* ty=Tensor[(8, 14, 4), float32] */;
  %522 = less(%515, %516) /* ty=Tensor[(6, 15, 6), bool] */;
  %523 = %517.2;
  %524 = @func_4169(%520, %521) /* ty=Tensor[(8, 14, 4), uint32] */;
  (%522, %523, %524, %var_7226)
}

def @func_1472(%var_1404: Tensor[(1, 6, 11), float64], %var_1417: float64, %var_1418: Tensor[(14, 1), float64], %var_1433: Tensor[(6, 4), float64], %var_1448: Tensor[(16, 6, 11), float64], %var_1454: Tensor[(220), float32]) -> (Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) {
  %525 = cast(%var_1417, dtype="float64") /* ty=float64 */;
  %526 = cast(%var_1418, dtype="float64") /* ty=Tensor[(14, 1), float64] */;
  %527 = reshape(%525, newshape=[]) /* ty=float64 */;
  %528 = reshape(%526, newshape=[2, 1, 7]) /* ty=Tensor[(2, 1, 7), float64] */;
  %529 = @func_65(%527, %528) /* ty=(Tensor[(2, ?, 7), float32],) */;
  %530 = cast(%var_1433, dtype="float64") /* ty=Tensor[(6, 4), float64] */;
  %531 = reshape(%530, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %532 = @func_439(%531) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %533 = cast(%var_1404, dtype="float64") /* ty=Tensor[(1, 6, 11), float64] */;
  %534 = sqrt(%533) /* ty=Tensor[(1, 6, 11), float64] */;
  %535 = cast(%var_1404, dtype="bool") /* ty=Tensor[(1, 6, 11), bool] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="bool") /* ty=Tensor[(1, 6, 11), bool] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %539 = not_equal(%537, %538) /* ty=Tensor[(?, 6, 11), bool] */;
  %540 = cast(%539, dtype="uint32") /* ty=Tensor[(?, 6, 11), uint32] */;
  %541 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%534, dtype="uint32") /* ty=Tensor[(1, 6, 11), uint32] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %544 = minimum(%542, %543) /* ty=Tensor[(?, 6, 11), uint32] */;
  %545 = cast(%539, dtype="uint32") /* ty=Tensor[(?, 6, 11), uint32] */;
  %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%544, dtype="uint32") /* ty=Tensor[(?, 6, 11), uint32] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %549 = cast(%534, dtype="bool") /* ty=Tensor[(1, 6, 11), bool] */;
  %550 = cast(%var_1448, dtype="bool") /* ty=Tensor[(16, 6, 11), bool] */;
  %551 = cast(%var_1454, dtype="float32") /* ty=Tensor[(220), float32] */;
  %552 = reshape(%551, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
  %553 = @func_1123(%552) /* ty=(Tensor[(10, 2, 11), float32],) */;
  %554 = %529.0;
  %555 = %532.1;
  %556 = left_shift(%547, %548) /* ty=Tensor[(?, 6, 11), uint32] */;
  %557 = greater_equal(%549, %550) /* ty=Tensor[(16, 6, 11), bool] */;
  %558 = %553.0;
  (%554, %var_1417, %var_1418, %555, %var_1433, %556, %557, %558, %var_1454)
}

def @func_439(%var_407: Tensor[(1, 2, 12), float64]) -> (Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) {
  %559 = cast(%var_407, dtype="float64") /* ty=Tensor[(1, 2, 12), float64] */;
  %560 = atanh(%559) /* ty=Tensor[(1, 2, 12), float64] */;
  %561 = cast(%var_407, dtype="bool") /* ty=Tensor[(1, 2, 12), bool] */;
  %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%560, dtype="bool") /* ty=Tensor[(1, 2, 12), bool] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %565 = cast(%560, dtype="float64") /* ty=Tensor[(1, 2, 12), float64] */;
  %566 = shape_of(%var_407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%var_407, dtype="float64") /* ty=Tensor[(1, 2, 12), float64] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %569 = floor_divide(%567, %568) /* ty=Tensor[(?, 2, 12), float64] */;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(?, 2, 12), float32] */;
  %571 = less_equal(%563, %564) /* ty=Tensor[(?, 2, 12), bool] */;
  %572 = exp(%570) /* ty=Tensor[(?, 2, 12), float32] */;
  (%571, %572)
}

def @func_938(%var_812: Tensor[(1, 1, 6), float32], %var_831: Tensor[(24), float64]) -> (Tensor[(?, 2, 12), bool], Tensor[(24), float64], Tensor[(?, ?, 6), uint64], Tensor[(?, 2, 12), bool], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(?, ?, 6), uint8], Tensor[(?, ?, 6), float64], Tensor[(2, ?, 7), float32], Tensor[(?, 2, 12), bool]) {
  %573 = cast(%var_831, dtype="float64") /* ty=Tensor[(24), float64] */;
  %574 = reshape(%573, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %575 = @func_439(%574) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %576 = cast(%var_812, dtype="float32") /* ty=Tensor[(1, 1, 6), float32] */;
  %577 = sqrt(%576) /* ty=Tensor[(1, 1, 6), float32] */;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(1, 1, 6), float64] */;
  %579 = log(%578) /* ty=Tensor[(1, 1, 6), float64] */;
  %580 = cast(%577, dtype="bool") /* ty=Tensor[(1, 1, 6), bool] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="bool") /* ty=Tensor[(1, 1, 6), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %584 = logical_or(%582, %583) /* ty=Tensor[(?, ?, 6), bool] */;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(?, ?, 6), float32] */;
  %586 = log2(%585) /* ty=Tensor[(?, ?, 6), float32] */;
  %587 = cast(%584, dtype="uint64") /* ty=Tensor[(?, ?, 6), uint64] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="uint64") /* ty=Tensor[(?, ?, 6), uint64] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %591 = add(%589, %590) /* ty=Tensor[(?, ?, 6), uint64] */;
  %592 = cast(%579, dtype="uint64") /* ty=Tensor[(1, 1, 6), uint64] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%591, dtype="uint64") /* ty=Tensor[(?, ?, 6), uint64] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %596 = %575.0;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
  %598 = reshape(%597, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %599 = @func_439(%598) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %600 = cast(2.69159f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %601 = cast(meta[relay.Constant][41] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %602 = reshape(%600, newshape=[]) /* ty=float64 */;
  %603 = reshape(%601, newshape=[2, 1, 7]) /* ty=Tensor[(2, 1, 7), float64] */;
  %604 = @func_65(%602, %603) /* ty=(Tensor[(2, ?, 7), float32],) */;
  %605 = cast(%584, dtype="float32") /* ty=Tensor[(?, ?, 6), float32] */;
  %606 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%586, dtype="float32") /* ty=Tensor[(?, ?, 6), float32] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %609 = power(%607, %608) /* ty=Tensor[(?, ?, 6), float32] */;
  %610 = cast(%591, dtype="int8") /* ty=Tensor[(?, ?, 6), int8] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%609, dtype="int8") /* ty=Tensor[(?, ?, 6), int8] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %614 = bitwise_and(%612, %613) /* ty=Tensor[(?, ?, 6), int8] */;
  %615 = cast(%614, dtype="uint8") /* ty=Tensor[(?, ?, 6), uint8] */;
  %616 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%579, dtype="uint8") /* ty=Tensor[(1, 1, 6), uint8] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %619 = cast(%579, dtype="float64") /* ty=Tensor[(1, 1, 6), float64] */;
  %620 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%591, dtype="float64") /* ty=Tensor[(?, ?, 6), float64] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %623 = cast(2.69159f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %624 = %604.0;
  %625 = cast(%624, dtype="float64") /* ty=Tensor[(2, ?, 7), float64] */;
  %626 = reshape(%623, newshape=[]) /* ty=float64 */;
  %627 = reshape(%625, newshape=[2, 1, 7]) /* ty=Tensor[(2, 1, 7), float64] */;
  %628 = @func_65(%626, %627) /* ty=(Tensor[(2, ?, 7), float32],) */;
  %629 = cast(%var_831, dtype="float64") /* ty=Tensor[(24), float64] */;
  %630 = reshape(%629, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %631 = @func_439(%630) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %632 = maximum(%594, %595) /* ty=Tensor[(?, ?, 6), uint64] */;
  %633 = %599.0;
  %634 = minimum(%617, %618) /* ty=Tensor[(?, ?, 6), uint8] */;
  %635 = floor_divide(%621, %622) /* ty=Tensor[(?, ?, 6), float64] */;
  %636 = %628.0;
  %637 = %631.0;
  (%596, %var_831, %632, %633, %624, 2.69159f64 /* ty=float64 */, meta[relay.Constant][41] /* ty=Tensor[(14), float64] */, %634, %635, %636, %637)
}

def @func_7378(%var_7369: Tensor[(5, 7, 3), int64]) -> Tensor[(5, 7, 3), int64] {
  %638 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 7, 3), int64] */, dtype="int64") /* ty=Tensor[(1, 7, 3), int64] */;
  %639 = cast(%var_7369, dtype="int64") /* ty=Tensor[(5, 7, 3), int64] */;
  bitwise_or(%638, %639) /* ty=Tensor[(5, 7, 3), int64] */
}

def @func_6050(%var_5996: uint16, %var_5997: Tensor[(1, 8, 9), uint16], %var_6022: Tensor[(220), float32]) -> (Tensor[(1, 8, 9), uint16], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) {
  %640 = cast(%var_5996, dtype="uint16") /* ty=uint16 */;
  %641 = cast(%var_5997, dtype="uint16") /* ty=Tensor[(1, 8, 9), uint16] */;
  %642 = cast(%var_6022, dtype="float32") /* ty=Tensor[(220), float32] */;
  %643 = reshape(%642, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
  %644 = @func_1123(%643) /* ty=(Tensor[(10, 2, 11), float32],) */;
  %645 = logical_xor(%640, %641) /* ty=Tensor[(1, 8, 9), uint16] */;
  %646 = %644.0;
  (%645, %646, %var_6022)
}

def @func_6664(%var_6660: Tensor[(7, 2), float64], %var_6661: Tensor[(18, 42), int64], %var_6662: Tensor[(220), float32]) -> (Tensor[(6, 15, 1), float64], Tensor[(4, 4, 2), float64], Tensor[(32), float32], Tensor[(1078, 1), float32], Tensor[(24), float64], Tensor[(7, 2), float64], Tensor[(18, 42), int64], Tensor[(220), float32]) {
  %647 = cast(meta[relay.Constant][43] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %648 = cast(meta[relay.Constant][44] /* ty=Tensor[(1078, 1), float32] */, dtype="float32") /* ty=Tensor[(1078, 1), float32] */;
  %649 = cast(meta[relay.Constant][45] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %650 = cast(%var_6660, dtype="float64") /* ty=Tensor[(7, 2), float64] */;
  %651 = cast(%var_6661, dtype="int64") /* ty=Tensor[(18, 42), int64] */;
  %652 = cast(%var_6662, dtype="float32") /* ty=Tensor[(220), float32] */;
  %653 = reshape(%647, newshape=[4, 4, 2]) /* ty=Tensor[(4, 4, 2), float32] */;
  %654 = reshape(%648, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %655 = reshape(%649, newshape=[1, 24]) /* ty=Tensor[(1, 24), float64] */;
  %656 = reshape(%650, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %657 = reshape(%651, newshape=[756]) /* ty=Tensor[(756), int64] */;
  %658 = reshape(%652, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %659 = @func_2548(%653, %654, %655, %656, %657, %658) /* ty=(Tensor[(1056), float64], Tensor[(1078), float32], Tensor[(1, 24), float64], Tensor[(14), float64], Tensor[(756), int64], Tensor[(220), float32], Tensor[(4, 4, 2), float64], Tensor[(10, 2, 11), float32], Tensor[(10, 2, 11), float32]) */;
  %660 = @func_6304() /* ty=Tensor[(6, 15, 1), float64] */;
  %661 = %659.6;
  (%660, %661, meta[relay.Constant][43] /* ty=Tensor[(32), float32] */, meta[relay.Constant][44] /* ty=Tensor[(1078, 1), float32] */, meta[relay.Constant][45] /* ty=Tensor[(24), float64] */, %var_6660, %var_6661, %var_6662)
}

def @func_6564(%var_6560: Tensor[(15, 3, 10), float64]) -> (Tensor[(15, 3, 10), float64],) {
  %662 = cast(%var_6560, dtype="float64") /* ty=Tensor[(15, 3, 10), float64] */;
  %663 = rsqrt(%662) /* ty=Tensor[(15, 3, 10), float64] */;
  (%663,)
}

def @func_7593(%var_7586: Tensor[(364), float64]) -> (Tensor[(15, 3, 10), uint32], Tensor[(7, 13, 4), int8], Tensor[(364), float64]) {
  %664 = @func_7521() /* ty=(Tensor[(7, 13, 4), float64], Tensor[(15, 3, 10), float64], Tensor[(450), float64]) */;
  %665 = %664.1;
  %666 = cast(meta[relay.Constant][46] /* ty=Tensor[(15, 3, 10), float64] */, dtype="uint32") /* ty=Tensor[(15, 3, 10), uint32] */;
  %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%665, dtype="uint32") /* ty=Tensor[(15, 3, 10), uint32] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %670 = cast(%var_7586, dtype="float64") /* ty=Tensor[(364), float64] */;
  %671 = reshape(%670, newshape=[7, 13, 4]) /* ty=Tensor[(7, 13, 4), float64] */;
  %672 = @func_7395(%671) /* ty=(Tensor[(7, 13, 4), int8],) */;
  %673 = bitwise_and(%668, %669) /* ty=Tensor[(15, 3, 10), uint32] */;
  %674 = %672.0;
  (%673, %674, %var_7586)
}

def @func_7619() -> (Tensor[(450), float64],) {
  %675 = @func_7521() /* ty=(Tensor[(7, 13, 4), float64], Tensor[(15, 3, 10), float64], Tensor[(450), float64]) */;
  %676 = %675.2;
  (%676,)
}

def @func_1902(%var_1885: Tensor[(12, 9, 7), int64], %var_1886: Tensor[(12, 9, 7), int64]) -> (Tensor[(12, 9, 7), bool],) {
  %677 = cast(%var_1886, dtype="bool") /* ty=Tensor[(12, 9, 7), bool] */;
  %678 = shape_of(%var_1885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_1885, dtype="bool") /* ty=Tensor[(12, 9, 7), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %681 = less(%679, %680) /* ty=Tensor[(12, 9, 7), bool] */;
  (%681,)
}

def @func_4271(%var_4267: Tensor[(8, 132), float64], %var_4268: Tensor[(220, 1), float32]) -> (Tensor[(11, 11, 11), float64], Tensor[(?, 2, 12), float32], Tensor[(66, 1), float64], float64, Tensor[(14), float64], Tensor[(24), float64], Tensor[(8, 132), float64], Tensor[(220, 1), float32]) {
  %682 = cast(meta[relay.Constant][47] /* ty=Tensor[(11, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(11, 11, 11), float64] */;
  %683 = cast(meta[relay.Constant][48] /* ty=Tensor[(66, 1), float64] */, dtype="float64") /* ty=Tensor[(66, 1), float64] */;
  %684 = cast(-4.31242f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %685 = cast(meta[relay.Constant][49] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %686 = cast(meta[relay.Constant][50] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %687 = cast(%var_4267, dtype="float64") /* ty=Tensor[(8, 132), float64] */;
  %688 = cast(%var_4268, dtype="float32") /* ty=Tensor[(220, 1), float32] */;
  %689 = reshape(%683, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float64] */;
  %690 = reshape(%684, newshape=[]) /* ty=float64 */;
  %691 = reshape(%685, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
  %692 = reshape(%686, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
  %693 = reshape(%687, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float64] */;
  %694 = reshape(%688, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %695 = @func_1472(%689, %690, %691, %692, %693, %694) /* ty=(Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) */;
  %696 = acosh(%682) /* ty=Tensor[(11, 11, 11), float64] */;
  %697 = %695.3;
  (%696, %697, meta[relay.Constant][48] /* ty=Tensor[(66, 1), float64] */, -4.31242f64 /* ty=float64 */, meta[relay.Constant][49] /* ty=Tensor[(14), float64] */, meta[relay.Constant][50] /* ty=Tensor[(24), float64] */, %var_4267, %var_4268)
}

def @func_4723(%var_4618: Tensor[(5, 13, 6), int64], %var_4619: Tensor[(5, 13, 6), int64], %var_4627: Tensor[(32), float32], %var_4630: Tensor[(1, 14), float64], %var_4631: Tensor[(756), int64], %var_4632: Tensor[(220), float32], %var_4662: Tensor[(616), float32], %var_4685: Tensor[(5, 13, 6), float64], %var_4709: Tensor[(432), float32], %var_4710: Tensor[(66), float64], %var_4712: Tensor[(1056), float64]) -> (Tensor[(220), float32], Tensor[(32), float32], Tensor[(1078), float32], Tensor[(24), float64], Tensor[(1, 14), float64], Tensor[(756), int64], Tensor[(220), float32], Tensor[(5, 13, 6), uint8], Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(5, 13, 6), float64], Tensor[(12, 4, 9), float32], Tensor[(432), float32], Tensor[(66), float64], float64, Tensor[(1056), float64], Tensor[(11, 13, 5), bool], Tensor[(715), uint8]) {
  %698 = cast(%var_4627, dtype="float32") /* ty=Tensor[(32), float32] */;
  %699 = cast(meta[relay.Constant][51] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %700 = cast(meta[relay.Constant][52] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %701 = cast(%var_4630, dtype="float64") /* ty=Tensor[(1, 14), float64] */;
  %702 = cast(%var_4631, dtype="int64") /* ty=Tensor[(756), int64] */;
  %703 = cast(%var_4632, dtype="float32") /* ty=Tensor[(220), float32] */;
  %704 = reshape(%698, newshape=[4, 4, 2]) /* ty=Tensor[(4, 4, 2), float32] */;
  %705 = reshape(%699, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %706 = reshape(%700, newshape=[1, 24]) /* ty=Tensor[(1, 24), float64] */;
  %707 = reshape(%701, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %708 = reshape(%702, newshape=[756]) /* ty=Tensor[(756), int64] */;
  %709 = reshape(%703, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %710 = @func_2548(%704, %705, %706, %707, %708, %709) /* ty=(Tensor[(1056), float64], Tensor[(1078), float32], Tensor[(1, 24), float64], Tensor[(14), float64], Tensor[(756), int64], Tensor[(220), float32], Tensor[(4, 4, 2), float64], Tensor[(10, 2, 11), float32], Tensor[(10, 2, 11), float32]) */;
  %711 = cast(%var_4619, dtype="bool") /* ty=Tensor[(5, 13, 6), bool] */;
  %712 = shape_of(%var_4618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%var_4618, dtype="bool") /* ty=Tensor[(5, 13, 6), bool] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %715 = equal(%713, %714) /* ty=Tensor[(5, 13, 6), bool] */;
  %716 = cast(%var_4619, dtype="uint8") /* ty=Tensor[(5, 13, 6), uint8] */;
  %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(%715, dtype="uint8") /* ty=Tensor[(5, 13, 6), uint8] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %720 = cast(%var_4662, dtype="float32") /* ty=Tensor[(616), float32] */;
  %721 = cast(%var_4662, dtype="float32") /* ty=Tensor[(616), float32] */;
  %722 = reshape(%720, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
  %723 = reshape(%721, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
  %724 = @func_1755(%722, %723) /* ty=(Tensor[(8, 11, 7), float32],) */;
  %725 = cast(%var_4618, dtype="float64") /* ty=Tensor[(5, 13, 6), float64] */;
  %726 = cosh(%725) /* ty=Tensor[(5, 13, 6), float64] */;
  %727 = cast(%var_4685, dtype="float64") /* ty=Tensor[(5, 13, 6), float64] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="float64") /* ty=Tensor[(5, 13, 6), float64] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %731 = cast(%var_4709, dtype="float32") /* ty=Tensor[(432), float32] */;
  %732 = cast(%var_4710, dtype="float64") /* ty=Tensor[(66), float64] */;
  %733 = cast(5.48199f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %734 = cast(%var_4630, dtype="float64") /* ty=Tensor[(1, 14), float64] */;
  %735 = cast(meta[relay.Constant][52] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %736 = cast(%var_4712, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %737 = %710.5;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(220), float32] */;
  %739 = reshape(%731, newshape=[12, 4, 9]) /* ty=Tensor[(12, 4, 9), float32] */;
  %740 = reshape(%732, newshape=[22, 3]) /* ty=Tensor[(22, 3), float64] */;
  %741 = reshape(%733, newshape=[]) /* ty=float64 */;
  %742 = reshape(%734, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
  %743 = reshape(%735, newshape=[24, 1]) /* ty=Tensor[(24, 1), float64] */;
  %744 = reshape(%736, newshape=[88, 12]) /* ty=Tensor[(88, 12), float64] */;
  %745 = reshape(%738, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %746 = @func_3705(%739, %740, %741, %742, %743, %744, %745) /* ty=(Tensor[(12, 4, 9), float32], float64, Tensor[(22, 3), float64], float64, Tensor[(14, 1), float64], Tensor[(24, 1), float64], Tensor[(88, 12), float64], Tensor[(220), float32]) */;
  %747 = cast(meta[relay.Constant][53] /* ty=Tensor[(715), uint8] */, dtype="uint8") /* ty=Tensor[(715), uint8] */;
  %748 = cast(meta[relay.Constant][53] /* ty=Tensor[(715), uint8] */, dtype="uint8") /* ty=Tensor[(715), uint8] */;
  %749 = reshape(%747, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), uint8] */;
  %750 = reshape(%748, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), uint8] */;
  %751 = @func_3506(%749, %750) /* ty=(Tensor[(11, 13, 5), bool],) */;
  %752 = minimum(%718, %719) /* ty=Tensor[(5, 13, 6), uint8] */;
  %753 = %724.0;
  %754 = floor_mod(%729, %730) /* ty=Tensor[(5, 13, 6), float64] */;
  %755 = %746.0;
  %756 = %751.0;
  (%737, %var_4627, meta[relay.Constant][51] /* ty=Tensor[(1078), float32] */, meta[relay.Constant][52] /* ty=Tensor[(24), float64] */, %var_4630, %var_4631, %var_4632, %752, %753, %var_4662, %754, %755, %var_4709, %var_4710, 5.48199f64 /* ty=float64 */, %var_4712, %756, meta[relay.Constant][53] /* ty=Tensor[(715), uint8] */)
}

def @func_7549(%var_7534: Tensor[(220), float32]) -> (Tensor[(6, 15, 1), float64], Tensor[(1056), float64], Tensor[(220), float32], Tensor[(220, ?), bool]) {
  %757 = @func_6804() /* ty=(Tensor[(6, 15, 1), float64],) */;
  %758 = cast(meta[relay.Constant][54] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %759 = cast(%var_7534, dtype="float32") /* ty=Tensor[(220), float32] */;
  %760 = reshape(%758, newshape=[8, 132]) /* ty=Tensor[(8, 132), float64] */;
  %761 = reshape(%759, newshape=[220, 1]) /* ty=Tensor[(220, 1), float32] */;
  %762 = @func_4271(%760, %761) /* ty=(Tensor[(11, 11, 11), float64], Tensor[(?, 2, 12), float32], Tensor[(66, 1), float64], float64, Tensor[(14), float64], Tensor[(24), float64], Tensor[(8, 132), float64], Tensor[(220, 1), float32]) */;
  %763 = %762.7;
  %764 = cast(%763, dtype="float32") /* ty=Tensor[(220, 1), float32] */;
  %765 = sqrt(%764) /* ty=Tensor[(220, 1), float32] */;
  %766 = cast(%763, dtype="bool") /* ty=Tensor[(220, 1), bool] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(2), int32] */;
  %768 = cast(%765, dtype="bool") /* ty=Tensor[(220, 1), bool] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %770 = %757.0;
  %771 = less(%768, %769) /* ty=Tensor[(220, ?), bool] */;
  (%770, meta[relay.Constant][54] /* ty=Tensor[(1056), float64] */, %var_7534, %771)
}

def @func_5588(%var_5554: Tensor[(3, 3, 1), uint64], %var_5555: Tensor[(3, 3, 5), uint64], %var_5574: Tensor[(1, 220), float32], %var_5575: Tensor[(1078), float32], %var_5584: Tensor[(3, 3, 1), uint64]) -> (Tensor[(3, 3, 5), uint64], Tensor[(756), int64], Tensor[(448), uint32], Tensor[(1, 220), float32], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(3, 3, ?), bool]) {
  %772 = cast(%var_5554, dtype="uint64") /* ty=Tensor[(3, 3, 1), uint64] */;
  %773 = cast(%var_5555, dtype="uint64") /* ty=Tensor[(3, 3, 5), uint64] */;
  %774 = cast(meta[relay.Constant][55] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %775 = cast(%var_5574, dtype="float32") /* ty=Tensor[(1, 220), float32] */;
  %776 = cast(%var_5575, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %777 = cast(-2.32376f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %778 = cast(meta[relay.Constant][56] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %779 = reshape(%774, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), uint32] */;
  %780 = reshape(%775, newshape=[220, 1]) /* ty=Tensor[(220, 1), float32] */;
  %781 = reshape(%776, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %782 = reshape(%777, newshape=[]) /* ty=float64 */;
  %783 = reshape(%778, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %784 = @func_5266(%779, %780, %781, %782, %783) /* ty=(Tensor[(14, 4, 8), uint32], Tensor[(14, 4, 8), uint16], Tensor[(11, 11, 11), float64], Tensor[(1056), float64], Tensor[(220, 1), float32], Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(7, 11, 14), int64], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(756), int64], Tensor[(14, 4, 8), float64], Tensor[(?, 2, 12), bool]) */;
  %785 = cast(%var_5584, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
  %786 = shape_of(%var_5554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%var_5554, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %789 = add(%772, %773) /* ty=Tensor[(3, 3, 5), uint64] */;
  %790 = %784.11;
  %791 = greater(%787, %788) /* ty=Tensor[(3, 3, ?), bool] */;
  (%789, %790, meta[relay.Constant][55] /* ty=Tensor[(448), uint32] */, %var_5574, %var_5575, -2.32376f64 /* ty=float64 */, meta[relay.Constant][56] /* ty=Tensor[(14), float64] */, %791)
}

def @func_4297(%var_4292: float32, %var_4293: Tensor[(7, 1, 1), float32]) -> Tensor[(7, 1, 1), float32] {
  %792 = cast(%var_4292, dtype="float32") /* ty=float32 */;
  %793 = cast(%var_4293, dtype="float32") /* ty=Tensor[(7, 1, 1), float32] */;
  mod(%792, %793) /* ty=Tensor[(7, 1, 1), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3510(%var_3508: Tensor[(11, 13, 5), uint8], %var_3509: Tensor[(11, 13, 5), uint8]) -> (Tensor[(11, 13, 5), bool],) {
  @func_3506(%var_3508, %var_3509) /* ty=(Tensor[(11, 13, 5), bool],) */
}

def @func_5273(%var_5268: Tensor[(14, 4, 8), uint32], %var_5269: Tensor[(220, 1), float32], %var_5270: Tensor[(1078), float32], %var_5271: float64, %var_5272: Tensor[(14), float64]) -> (Tensor[(14, 4, 8), uint32], Tensor[(14, 4, 8), uint16], Tensor[(11, 11, 11), float64], Tensor[(1056), float64], Tensor[(220, 1), float32], Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(7, 11, 14), int64], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(756), int64], Tensor[(14, 4, 8), float64], Tensor[(?, 2, 12), bool]) {
  @func_5266(%var_5268, %var_5269, %var_5270, %var_5271, %var_5272) /* ty=(Tensor[(14, 4, 8), uint32], Tensor[(14, 4, 8), uint16], Tensor[(11, 11, 11), float64], Tensor[(1056), float64], Tensor[(220, 1), float32], Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(7, 11, 14), int64], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(756), int64], Tensor[(14, 4, 8), float64], Tensor[(?, 2, 12), bool]) */
}

def @func_7687() -> (Tensor[(15, 3, 10), float64],) {
  %0 = @func_7521() /* ty=(Tensor[(7, 13, 4), float64], Tensor[(15, 3, 10), float64], Tensor[(450), float64]) */;
  %1 = %0.1;
  (%1,)
}

def @func_69(%var_67: float64, %var_68: Tensor[(2, 1, 7), float64]) -> (Tensor[(2, ?, 7), float32],) {
  @func_65(%var_67, %var_68) /* ty=(Tensor[(2, ?, 7), float32],) */
}

def @func_1755(%var_1749: Tensor[(8, 11, 7), float32], %var_1750: Tensor[(8, 11, 7), float32]) -> (Tensor[(8, 11, 7), float32],) {
  %2 = cast(%var_1750, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
  %3 = shape_of(%var_1749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%var_1749, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %6 = floor_mod(%4, %5) /* ty=Tensor[(8, 11, 7), float32] */;
  (%6,)
}

def @func_1479(%var_1473: Tensor[(1, 6, 11), float64], %var_1474: float64, %var_1475: Tensor[(14, 1), float64], %var_1476: Tensor[(6, 4), float64], %var_1477: Tensor[(16, 6, 11), float64], %var_1478: Tensor[(220), float32]) -> (Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) {
  %41 = fn (%var_1404: Tensor[(1, 6, 11), float64], %var_1417: float64, %var_1418: Tensor[(14, 1), float64], %var_1433: Tensor[(6, 4), float64], %var_1448: Tensor[(16, 6, 11), float64], %var_1454: Tensor[(220), float32]) -> (Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) {
    %7 = cast(%var_1417, dtype="float64") /* ty=float64 */;
    %8 = cast(%var_1418, dtype="float64") /* ty=Tensor[(14, 1), float64] */;
    %9 = reshape(%7, newshape=[]) /* ty=float64 */;
    %10 = reshape(%8, newshape=[2, 1, 7]) /* ty=Tensor[(2, 1, 7), float64] */;
    %11 = @func_65(%9, %10) /* ty=(Tensor[(2, ?, 7), float32],) */;
    %12 = cast(%var_1433, dtype="float64") /* ty=Tensor[(6, 4), float64] */;
    %13 = reshape(%12, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
    %14 = @func_439(%13) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
    %15 = cast(%var_1404, dtype="float64") /* ty=Tensor[(1, 6, 11), float64] */;
    %16 = sqrt(%15) /* ty=Tensor[(1, 6, 11), float64] */;
    %17 = cast(%var_1404, dtype="bool") /* ty=Tensor[(1, 6, 11), bool] */;
    %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
    %19 = cast(%16, dtype="bool") /* ty=Tensor[(1, 6, 11), bool] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %21 = not_equal(%19, %20) /* ty=Tensor[(?, 6, 11), bool] */;
    %22 = cast(%21, dtype="uint32") /* ty=Tensor[(?, 6, 11), uint32] */;
    %23 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
    %24 = cast(%16, dtype="uint32") /* ty=Tensor[(1, 6, 11), uint32] */;
    %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %26 = minimum(%24, %25) /* ty=Tensor[(?, 6, 11), uint32] */;
    %27 = cast(%21, dtype="uint32") /* ty=Tensor[(?, 6, 11), uint32] */;
    %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
    %29 = cast(%26, dtype="uint32") /* ty=Tensor[(?, 6, 11), uint32] */;
    %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %31 = cast(%16, dtype="bool") /* ty=Tensor[(1, 6, 11), bool] */;
    %32 = cast(%var_1448, dtype="bool") /* ty=Tensor[(16, 6, 11), bool] */;
    %33 = cast(%var_1454, dtype="float32") /* ty=Tensor[(220), float32] */;
    %34 = reshape(%33, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
    %35 = @func_1123(%34) /* ty=(Tensor[(10, 2, 11), float32],) */;
    %36 = %11.0;
    %37 = %14.1;
    %38 = left_shift(%29, %30) /* ty=Tensor[(?, 6, 11), uint32] */;
    %39 = greater_equal(%31, %32) /* ty=Tensor[(16, 6, 11), bool] */;
    %40 = %35.0;
    (%36, %var_1417, %var_1418, %37, %var_1433, %38, %39, %40, %var_1454)
  };
  %41(%var_1473, %var_1474, %var_1475, %var_1476, %var_1477, %var_1478) /* ty=(Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) */
}

def @func_4337(%var_4304: float32, %var_4305: Tensor[(14, 1, 3), float32]) -> (Tensor[(14, 1, 3), bool], Tensor[(11, 13, 5), bool], Tensor[(715), uint8]) {
  %42 = cast(%var_4304, dtype="bool") /* ty=bool */;
  %43 = cast(%var_4305, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
  %44 = cast(meta[relay.Constant][0] /* ty=Tensor[(715), uint8] */, dtype="uint8") /* ty=Tensor[(715), uint8] */;
  %45 = cast(meta[relay.Constant][0] /* ty=Tensor[(715), uint8] */, dtype="uint8") /* ty=Tensor[(715), uint8] */;
  %46 = reshape(%44, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), uint8] */;
  %47 = reshape(%45, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), uint8] */;
  %48 = @func_3506(%46, %47) /* ty=(Tensor[(11, 13, 5), bool],) */;
  %49 = less(%42, %43) /* ty=Tensor[(14, 1, 3), bool] */;
  %50 = %48.0;
  (%49, %50, meta[relay.Constant][0] /* ty=Tensor[(715), uint8] */)
}

def @func_439(%var_407: Tensor[(1, 2, 12), float64]) -> (Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) {
  %51 = cast(%var_407, dtype="float64") /* ty=Tensor[(1, 2, 12), float64] */;
  %52 = atanh(%51) /* ty=Tensor[(1, 2, 12), float64] */;
  %53 = cast(%var_407, dtype="bool") /* ty=Tensor[(1, 2, 12), bool] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%52, dtype="bool") /* ty=Tensor[(1, 2, 12), bool] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %57 = cast(%52, dtype="float64") /* ty=Tensor[(1, 2, 12), float64] */;
  %58 = shape_of(%var_407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%var_407, dtype="float64") /* ty=Tensor[(1, 2, 12), float64] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %61 = floor_divide(%59, %60) /* ty=Tensor[(?, 2, 12), float64] */;
  %62 = cast(%61, dtype="float32") /* ty=Tensor[(?, 2, 12), float32] */;
  %63 = less_equal(%55, %56) /* ty=Tensor[(?, 2, 12), bool] */;
  %64 = exp(%62) /* ty=Tensor[(?, 2, 12), float32] */;
  (%63, %64)
}

def @func_6055(%var_6052: uint16, %var_6053: Tensor[(1, 8, 9), uint16], %var_6054: Tensor[(220), float32]) -> (Tensor[(1, 8, 9), uint16], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) {
  @func_6050(%var_6052, %var_6053, %var_6054) /* ty=(Tensor[(1, 8, 9), uint16], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) */
}

def @func_4172(%var_4170: Tensor[(8, 14, 4), float32], %var_4171: Tensor[(8, 14, 4), float32]) -> Tensor[(8, 14, 4), uint32] {
  %74 = fn (%var_4155: Tensor[(8, 14, 4), float32], %var_4156: Tensor[(8, 14, 4), float32]) -> Tensor[(8, 14, 4), uint32] {
    %65 = cast(%var_4156, dtype="float32") /* ty=Tensor[(8, 14, 4), float32] */;
    %66 = shape_of(%var_4155, dtype="int32") /* ty=Tensor[(3), int32] */;
    %67 = cast(%var_4155, dtype="float32") /* ty=Tensor[(8, 14, 4), float32] */;
    %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %69 = floor_mod(%67, %68) /* ty=Tensor[(8, 14, 4), float32] */;
    %70 = cast(%69, dtype="uint32") /* ty=Tensor[(8, 14, 4), uint32] */;
    %71 = shape_of(%var_4155, dtype="int32") /* ty=Tensor[(3), int32] */;
    %72 = cast(%var_4155, dtype="uint32") /* ty=Tensor[(8, 14, 4), uint32] */;
    %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_and(%72, %73) /* ty=Tensor[(8, 14, 4), uint32] */
  };
  %74(%var_4170, %var_4171) /* ty=Tensor[(8, 14, 4), uint32] */
}

def @func_7689() -> (Tensor[(15, 3, 10), float64],) {
  @func_7687() /* ty=(Tensor[(15, 3, 10), float64],) */
}

def @func_5149(%var_5132: Tensor[(3, 5, 13), float32], %var_5141: Tensor[(1280), float64]) -> (Tensor[(3, 5, 13), float32], float64, Tensor[(1280), float64], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1056), float64], Tensor[(5, 44), float32]) {
  %75 = cast(%var_5132, dtype="float32") /* ty=Tensor[(3, 5, 13), float32] */;
  %76 = cast(%var_5141, dtype="float64") /* ty=Tensor[(1280), float64] */;
  %77 = cast(meta[relay.Constant][1] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %78 = cast(7.31502f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %79 = cast(meta[relay.Constant][2] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %80 = cast(meta[relay.Constant][3] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %81 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 44), float32] */, dtype="float32") /* ty=Tensor[(5, 44), float32] */;
  %82 = reshape(%76, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float64] */;
  %83 = reshape(%77, newshape=[66]) /* ty=Tensor[(66), float64] */;
  %84 = reshape(%78, newshape=[]) /* ty=float64 */;
  %85 = reshape(%79, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %86 = reshape(%80, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %87 = reshape(%81, newshape=[1, 220]) /* ty=Tensor[(1, 220), float32] */;
  %88 = @func_3445(%82, %83, %84, %85, %86, %87) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(12, 2), float64], Tensor[(?, 2, 12), bool], Tensor[(16, 10, 8), int16], Tensor[(16, 6, 11), bool], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1056), float64], Tensor[(1, 220), float32], Tensor[(8, 11, 7), float32], Tensor[(308, 2), float32]) */;
  %89 = exp(%75) /* ty=Tensor[(3, 5, 13), float32] */;
  %90 = %88.6;
  (%89, %90, %var_5141, meta[relay.Constant][1] /* ty=Tensor[(66), float64] */, 7.31502f64 /* ty=float64 */, meta[relay.Constant][2] /* ty=Tensor[(14), float64] */, meta[relay.Constant][3] /* ty=Tensor[(1056), float64] */, meta[relay.Constant][4] /* ty=Tensor[(5, 44), float32] */)
}

def @func_2555(%var_2549: Tensor[(4, 4, 2), float32], %var_2550: Tensor[(1078), float32], %var_2551: Tensor[(1, 24), float64], %var_2552: Tensor[(14), float64], %var_2553: Tensor[(756), int64], %var_2554: Tensor[(220), float32]) -> (Tensor[(1056), float64], Tensor[(1078), float32], Tensor[(1, 24), float64], Tensor[(14), float64], Tensor[(756), int64], Tensor[(220), float32], Tensor[(4, 4, 2), float64], Tensor[(10, 2, 11), float32], Tensor[(10, 2, 11), float32]) {
  %120 = fn (%var_2485: Tensor[(4, 4, 2), float32], %var_2493: Tensor[(1078), float32], %var_2494: Tensor[(1, 24), float64], %var_2496: Tensor[(14), float64], %var_2497: Tensor[(756), int64], %var_2498: Tensor[(220), float32]) -> (Tensor[(1056), float64], Tensor[(1078), float32], Tensor[(1, 24), float64], Tensor[(14), float64], Tensor[(756), int64], Tensor[(220), float32], Tensor[(4, 4, 2), float64], Tensor[(10, 2, 11), float32], Tensor[(10, 2, 11), float32]) {
    %91 = cast(%var_2493, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %92 = cast(%var_2493, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %93 = cast(%var_2494, dtype="float64") /* ty=Tensor[(1, 24), float64] */;
    %94 = cast(1.39945f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %95 = cast(%var_2496, dtype="float64") /* ty=Tensor[(14), float64] */;
    %96 = cast(%var_2497, dtype="int64") /* ty=Tensor[(756), int64] */;
    %97 = cast(%var_2498, dtype="float32") /* ty=Tensor[(220), float32] */;
    %98 = reshape(%91, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
    %99 = reshape(%92, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
    %100 = reshape(%93, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %101 = reshape(%94, newshape=[]) /* ty=float64 */;
    %102 = reshape(%95, newshape=[14]) /* ty=Tensor[(14), float64] */;
    %103 = reshape(%96, newshape=[756]) /* ty=Tensor[(756), int64] */;
    %104 = reshape(%97, newshape=[55, 4]) /* ty=Tensor[(55, 4), float32] */;
    %105 = @func_2210(%98, %99, %100, %101, %102, %103, %104) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(7, 11, 14), float32], Tensor[(7, 11, 14), int64], Tensor[(12, 9, 7), bool], Tensor[(756), int64], Tensor[(10, 2, 11), float32], Tensor[(55, 4), float32], Tensor[(?, 2, 12), float32], Tensor[(10, 2, 11), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(14, 1), float64], Tensor[(66, 1), float64], Tensor[(1056), float64]) */;
    %106 = cast(%var_2485, dtype="float32") /* ty=Tensor[(4, 4, 2), float32] */;
    %107 = cosh(%106) /* ty=Tensor[(4, 4, 2), float32] */;
    %108 = cast(%107, dtype="float64") /* ty=Tensor[(4, 4, 2), float64] */;
    %109 = cast(1.39945f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %110 = cast(%var_2498, dtype="float32") /* ty=Tensor[(220), float32] */;
    %111 = reshape(%110, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
    %112 = @func_1123(%111) /* ty=(Tensor[(10, 2, 11), float32],) */;
    %113 = cast(%var_2498, dtype="float32") /* ty=Tensor[(220), float32] */;
    %114 = reshape(%113, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
    %115 = @func_1123(%114) /* ty=(Tensor[(10, 2, 11), float32],) */;
    %116 = %105.17;
    %117 = add(%108, %109) /* ty=Tensor[(4, 4, 2), float64] */;
    %118 = %112.0;
    %119 = %115.0;
    (%116, %var_2493, %var_2494, %var_2496, %var_2497, %var_2498, %117, %118, %119)
  };
  %120(%var_2549, %var_2550, %var_2551, %var_2552, %var_2553, %var_2554) /* ty=(Tensor[(1056), float64], Tensor[(1078), float32], Tensor[(1, 24), float64], Tensor[(14), float64], Tensor[(756), int64], Tensor[(220), float32], Tensor[(4, 4, 2), float64], Tensor[(10, 2, 11), float32], Tensor[(10, 2, 11), float32]) */
}

def @func_6992(%var_6987: Tensor[(6, 15, 9), float64], %var_6988: Tensor[(432), float32], %var_6989: Tensor[(66), float64], %var_6990: Tensor[(1, 24), float64], %var_6991: Tensor[(220), float32]) -> (Tensor[(6, 15, 9), float32], Tensor[(432), float32], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1, 24), float64], Tensor[(1056), float64], Tensor[(220), float32], Tensor[(6, 15, 220), bool]) {
  %145 = fn (%var_6962: Tensor[(6, 15, 9), float64], %var_6969: Tensor[(432), float32], %var_6970: Tensor[(66), float64], %var_6973: Tensor[(1, 24), float64], %var_6975: Tensor[(220), float32]) -> (Tensor[(6, 15, 9), float32], Tensor[(432), float32], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1, 24), float64], Tensor[(1056), float64], Tensor[(220), float32], Tensor[(6, 15, 220), bool]) {
    %121 = @func_6552() /* ty=(Tensor[(6, 15, 1), float64],) */;
    %122 = %121.0;
    %123 = cast(%122, dtype="float32") /* ty=Tensor[(6, 15, 1), float32] */;
    %124 = cast(%var_6962, dtype="float32") /* ty=Tensor[(6, 15, 9), float32] */;
    %125 = cast(%var_6969, dtype="float32") /* ty=Tensor[(432), float32] */;
    %126 = cast(%var_6970, dtype="float64") /* ty=Tensor[(66), float64] */;
    %127 = cast(1.34023f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %128 = cast(meta[relay.Constant][5] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
    %129 = cast(%var_6973, dtype="float64") /* ty=Tensor[(1, 24), float64] */;
    %130 = cast(meta[relay.Constant][6] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %131 = cast(%var_6975, dtype="float32") /* ty=Tensor[(220), float32] */;
    %132 = reshape(%125, newshape=[12, 4, 9]) /* ty=Tensor[(12, 4, 9), float32] */;
    %133 = reshape(%126, newshape=[22, 3]) /* ty=Tensor[(22, 3), float64] */;
    %134 = reshape(%127, newshape=[]) /* ty=float64 */;
    %135 = reshape(%128, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
    %136 = reshape(%129, newshape=[24, 1]) /* ty=Tensor[(24, 1), float64] */;
    %137 = reshape(%130, newshape=[88, 12]) /* ty=Tensor[(88, 12), float64] */;
    %138 = reshape(%131, newshape=[220]) /* ty=Tensor[(220), float32] */;
    %139 = @func_3705(%132, %133, %134, %135, %136, %137, %138) /* ty=(Tensor[(12, 4, 9), float32], float64, Tensor[(22, 3), float64], float64, Tensor[(14, 1), float64], Tensor[(24, 1), float64], Tensor[(88, 12), float64], Tensor[(220), float32]) */;
    %140 = %139.7;
    %141 = cast(%140, dtype="bool") /* ty=Tensor[(220), bool] */;
    %142 = cast(%122, dtype="bool") /* ty=Tensor[(6, 15, 1), bool] */;
    %143 = floor_divide(%123, %124) /* ty=Tensor[(6, 15, 9), float32] */;
    %144 = equal(%141, %142) /* ty=Tensor[(6, 15, 220), bool] */;
    (%143, %var_6969, %var_6970, 1.34023f64 /* ty=float64 */, meta[relay.Constant][5] /* ty=Tensor[(14), float64] */, %var_6973, meta[relay.Constant][6] /* ty=Tensor[(1056), float64] */, %var_6975, %144)
  };
  %145(%var_6987, %var_6988, %var_6989, %var_6990, %var_6991) /* ty=(Tensor[(6, 15, 9), float32], Tensor[(432), float32], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1, 24), float64], Tensor[(1056), float64], Tensor[(220), float32], Tensor[(6, 15, 220), bool]) */
}

def @func_7414() -> Tensor[(6, 15, 1), float64] {
  %146 = @func_6552() /* ty=(Tensor[(6, 15, 1), float64],) */;
  %146.0
}

def @func_2218(%var_2211: Tensor[(7, 11, 14), float32], %var_2212: Tensor[(7, 11, 14), float32], %var_2213: Tensor[(24), float64], %var_2214: float64, %var_2215: Tensor[(14), float64], %var_2216: Tensor[(756), int64], %var_2217: Tensor[(55, 4), float32]) -> (Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(7, 11, 14), float32], Tensor[(7, 11, 14), int64], Tensor[(12, 9, 7), bool], Tensor[(756), int64], Tensor[(10, 2, 11), float32], Tensor[(55, 4), float32], Tensor[(?, 2, 12), float32], Tensor[(10, 2, 11), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(14, 1), float64], Tensor[(66, 1), float64], Tensor[(1056), float64]) {
  %209 = fn (%var_2087: Tensor[(7, 11, 14), float32], %var_2095: Tensor[(7, 11, 14), float32], %var_2100: Tensor[(24), float64], %var_2104: float64, %var_2105: Tensor[(14), float64], %var_2172: Tensor[(756), int64], %var_2175: Tensor[(55, 4), float32]) -> (Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(7, 11, 14), float32], Tensor[(7, 11, 14), int64], Tensor[(12, 9, 7), bool], Tensor[(756), int64], Tensor[(10, 2, 11), float32], Tensor[(55, 4), float32], Tensor[(?, 2, 12), float32], Tensor[(10, 2, 11), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(14, 1), float64], Tensor[(66, 1), float64], Tensor[(1056), float64]) {
    %147 = cast(%var_2100, dtype="float64") /* ty=Tensor[(24), float64] */;
    %148 = reshape(%147, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
    %149 = @func_439(%148) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
    %150 = cast(%var_2104, dtype="float64") /* ty=float64 */;
    %151 = cast(%var_2105, dtype="float64") /* ty=Tensor[(14), float64] */;
    %152 = reshape(%150, newshape=[]) /* ty=float64 */;
    %153 = reshape(%151, newshape=[2, 1, 7]) /* ty=Tensor[(2, 1, 7), float64] */;
    %154 = @func_65(%152, %153) /* ty=(Tensor[(2, ?, 7), float32],) */;
    %155 = cast(%var_2087, dtype="float32") /* ty=Tensor[(7, 11, 14), float32] */;
    %156 = sin(%155) /* ty=Tensor[(7, 11, 14), float32] */;
    %157 = cast(%156, dtype="float32") /* ty=Tensor[(7, 11, 14), float32] */;
    %158 = cast(%var_2095, dtype="uint16") /* ty=Tensor[(7, 11, 14), uint16] */;
    %159 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
    %160 = cast(%156, dtype="uint16") /* ty=Tensor[(7, 11, 14), uint16] */;
    %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %162 = minimum(%160, %161) /* ty=Tensor[(7, 11, 14), uint16] */;
    %163 = cast(%156, dtype="int64") /* ty=Tensor[(7, 11, 14), int64] */;
    %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
    %165 = cast(%162, dtype="int64") /* ty=Tensor[(7, 11, 14), int64] */;
    %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %167 = cast(%var_2172, dtype="int64") /* ty=Tensor[(756), int64] */;
    %168 = cast(%var_2172, dtype="int64") /* ty=Tensor[(756), int64] */;
    %169 = reshape(%167, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), int64] */;
    %170 = reshape(%168, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), int64] */;
    %171 = @func_1902(%169, %170) /* ty=(Tensor[(12, 9, 7), bool],) */;
    %172 = cast(%var_2175, dtype="float32") /* ty=Tensor[(55, 4), float32] */;
    %173 = reshape(%172, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
    %174 = @func_1123(%173) /* ty=(Tensor[(10, 2, 11), float32],) */;
    %175 = %149.1;
    %176 = cast(%175, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
    %177 = reshape(%176, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
    %178 = @func_439(%177) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
    %179 = cast(%var_2175, dtype="float32") /* ty=Tensor[(55, 4), float32] */;
    %180 = reshape(%179, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
    %181 = @func_1123(%180) /* ty=(Tensor[(10, 2, 11), float32],) */;
    %182 = cast(meta[relay.Constant][7] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
    %183 = cast(meta[relay.Constant][7] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
    %184 = reshape(%182, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
    %185 = reshape(%183, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
    %186 = @func_1755(%184, %185) /* ty=(Tensor[(8, 11, 7), float32],) */;
    %187 = cast(meta[relay.Constant][8] /* ty=Tensor[(66, 1), float64] */, dtype="float64") /* ty=Tensor[(66, 1), float64] */;
    %188 = cast(%var_2104, dtype="float64") /* ty=float64 */;
    %189 = %154.0;
    %190 = cast(%189, dtype="float64") /* ty=Tensor[(2, ?, 7), float64] */;
    %191 = cast(%var_2100, dtype="float64") /* ty=Tensor[(24), float64] */;
    %192 = cast(meta[relay.Constant][9] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %193 = cast(%var_2175, dtype="float32") /* ty=Tensor[(55, 4), float32] */;
    %194 = reshape(%187, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float64] */;
    %195 = reshape(%188, newshape=[]) /* ty=float64 */;
    %196 = reshape(%190, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
    %197 = reshape(%191, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
    %198 = reshape(%192, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float64] */;
    %199 = reshape(%193, newshape=[220]) /* ty=Tensor[(220), float32] */;
    %200 = @func_1472(%194, %195, %196, %197, %198, %199) /* ty=(Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) */;
    %201 = cos(%157) /* ty=Tensor[(7, 11, 14), float32] */;
    %202 = right_shift(%165, %166) /* ty=Tensor[(7, 11, 14), int64] */;
    %203 = %171.0;
    %204 = %174.0;
    %205 = %178.1;
    %206 = %181.0;
    %207 = %186.0;
    %208 = %200.2;
    (%175, %var_2100, %189, %var_2104, %var_2105, %201, %202, %203, %var_2172, %204, %var_2175, %205, %206, %207, meta[relay.Constant][7] /* ty=Tensor[(616), float32] */, %208, meta[relay.Constant][8] /* ty=Tensor[(66, 1), float64] */, meta[relay.Constant][9] /* ty=Tensor[(1056), float64] */)
  };
  %209(%var_2211, %var_2212, %var_2213, %var_2214, %var_2215, %var_2216, %var_2217) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(7, 11, 14), float32], Tensor[(7, 11, 14), int64], Tensor[(12, 9, 7), bool], Tensor[(756), int64], Tensor[(10, 2, 11), float32], Tensor[(55, 4), float32], Tensor[(?, 2, 12), float32], Tensor[(10, 2, 11), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(14, 1), float64], Tensor[(66, 1), float64], Tensor[(1056), float64]) */
}

def @func_4274(%var_4272: Tensor[(8, 132), float64], %var_4273: Tensor[(220, 1), float32]) -> (Tensor[(11, 11, 11), float64], Tensor[(?, 2, 12), float32], Tensor[(66, 1), float64], float64, Tensor[(14), float64], Tensor[(24), float64], Tensor[(8, 132), float64], Tensor[(220, 1), float32]) {
  %226 = fn (%var_4267: Tensor[(8, 132), float64], %var_4268: Tensor[(220, 1), float32]) -> (Tensor[(11, 11, 11), float64], Tensor[(?, 2, 12), float32], Tensor[(66, 1), float64], float64, Tensor[(14), float64], Tensor[(24), float64], Tensor[(8, 132), float64], Tensor[(220, 1), float32]) {
    %210 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(11, 11, 11), float64] */;
    %211 = cast(meta[relay.Constant][11] /* ty=Tensor[(66, 1), float64] */, dtype="float64") /* ty=Tensor[(66, 1), float64] */;
    %212 = cast(-4.31242f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %213 = cast(meta[relay.Constant][12] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
    %214 = cast(meta[relay.Constant][13] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %215 = cast(%var_4267, dtype="float64") /* ty=Tensor[(8, 132), float64] */;
    %216 = cast(%var_4268, dtype="float32") /* ty=Tensor[(220, 1), float32] */;
    %217 = reshape(%211, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float64] */;
    %218 = reshape(%212, newshape=[]) /* ty=float64 */;
    %219 = reshape(%213, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
    %220 = reshape(%214, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
    %221 = reshape(%215, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float64] */;
    %222 = reshape(%216, newshape=[220]) /* ty=Tensor[(220), float32] */;
    %223 = @func_1472(%217, %218, %219, %220, %221, %222) /* ty=(Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) */;
    %224 = acosh(%210) /* ty=Tensor[(11, 11, 11), float64] */;
    %225 = %223.3;
    (%224, %225, meta[relay.Constant][11] /* ty=Tensor[(66, 1), float64] */, -4.31242f64 /* ty=float64 */, meta[relay.Constant][12] /* ty=Tensor[(14), float64] */, meta[relay.Constant][13] /* ty=Tensor[(24), float64] */, %var_4267, %var_4268)
  };
  %226(%var_4272, %var_4273) /* ty=(Tensor[(11, 11, 11), float64], Tensor[(?, 2, 12), float32], Tensor[(66, 1), float64], float64, Tensor[(14), float64], Tensor[(24), float64], Tensor[(8, 132), float64], Tensor[(220, 1), float32]) */
}

def @func_7237(%var_7235: Tensor[(6, 15, 6), float64], %var_7236: Tensor[(448), float32]) -> (Tensor[(6, 15, 6), bool], float64, Tensor[(8, 14, 4), uint32], Tensor[(448), float32]) {
  %239 = fn (%var_7185: Tensor[(6, 15, 6), float64], %var_7226: Tensor[(448), float32]) -> (Tensor[(6, 15, 6), bool], float64, Tensor[(8, 14, 4), uint32], Tensor[(448), float32]) {
    %227 = @func_6552() /* ty=(Tensor[(6, 15, 1), float64],) */;
    %228 = %227.0;
    %229 = cast(%228, dtype="bool") /* ty=Tensor[(6, 15, 1), bool] */;
    %230 = cast(%var_7185, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
    %231 = @func_6746() /* ty=(Tensor[(7, 13, 4), float64], float64, float64, Tensor[(2, 528), float32]) */;
    %232 = cast(%var_7226, dtype="float32") /* ty=Tensor[(448), float32] */;
    %233 = cast(%var_7226, dtype="float32") /* ty=Tensor[(448), float32] */;
    %234 = reshape(%232, newshape=[8, 14, 4]) /* ty=Tensor[(8, 14, 4), float32] */;
    %235 = reshape(%233, newshape=[8, 14, 4]) /* ty=Tensor[(8, 14, 4), float32] */;
    %236 = less(%229, %230) /* ty=Tensor[(6, 15, 6), bool] */;
    %237 = %231.2;
    %238 = @func_4169(%234, %235) /* ty=Tensor[(8, 14, 4), uint32] */;
    (%236, %237, %238, %var_7226)
  };
  %239(%var_7235, %var_7236) /* ty=(Tensor[(6, 15, 6), bool], float64, Tensor[(8, 14, 4), uint32], Tensor[(448), float32]) */
}

def @func_6564(%var_6560: Tensor[(15, 3, 10), float64]) -> (Tensor[(15, 3, 10), float64],) {
  %240 = cast(%var_6560, dtype="float64") /* ty=Tensor[(15, 3, 10), float64] */;
  %241 = rsqrt(%240) /* ty=Tensor[(15, 3, 10), float64] */;
  (%241,)
}

def @func_7549(%var_7534: Tensor[(220), float32]) -> (Tensor[(6, 15, 1), float64], Tensor[(1056), float64], Tensor[(220), float32], Tensor[(220, ?), bool]) {
  %242 = @func_6804() /* ty=(Tensor[(6, 15, 1), float64],) */;
  %243 = cast(meta[relay.Constant][14] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %244 = cast(%var_7534, dtype="float32") /* ty=Tensor[(220), float32] */;
  %245 = reshape(%243, newshape=[8, 132]) /* ty=Tensor[(8, 132), float64] */;
  %246 = reshape(%244, newshape=[220, 1]) /* ty=Tensor[(220, 1), float32] */;
  %247 = @func_4271(%245, %246) /* ty=(Tensor[(11, 11, 11), float64], Tensor[(?, 2, 12), float32], Tensor[(66, 1), float64], float64, Tensor[(14), float64], Tensor[(24), float64], Tensor[(8, 132), float64], Tensor[(220, 1), float32]) */;
  %248 = %247.7;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(220, 1), float32] */;
  %250 = sqrt(%249) /* ty=Tensor[(220, 1), float32] */;
  %251 = cast(%248, dtype="bool") /* ty=Tensor[(220, 1), bool] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(2), int32] */;
  %253 = cast(%250, dtype="bool") /* ty=Tensor[(220, 1), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %255 = %242.0;
  %256 = less(%253, %254) /* ty=Tensor[(220, ?), bool] */;
  (%255, meta[relay.Constant][14] /* ty=Tensor[(1056), float64] */, %var_7534, %256)
}

def @func_3156(%var_3154: Tensor[(14, 8, 16), float64]) -> Tensor[(14, 8, 16), float64] {
  @func_3153(%var_3154) /* ty=Tensor[(14, 8, 16), float64] */
}

def @func_7378(%var_7369: Tensor[(5, 7, 3), int64]) -> Tensor[(5, 7, 3), int64] {
  %257 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 7, 3), int64] */, dtype="int64") /* ty=Tensor[(1, 7, 3), int64] */;
  %258 = cast(%var_7369, dtype="int64") /* ty=Tensor[(5, 7, 3), int64] */;
  bitwise_or(%257, %258) /* ty=Tensor[(5, 7, 3), int64] */
}

def @func_6892(%var_6848: Tensor[(21, 4), int64], %var_6887: Tensor[(2, 14, 3), int64]) -> (Tensor[(?, 2, 12), float32], Tensor[(2, 12), float64], Tensor[(21, 4), int64], Tensor[(14), float64], Tensor[(1080), float64], Tensor[(7, 154), float32], Tensor[(6, 15, 448), float64], Tensor[(2, 14, 3), bool]) {
  %259 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 12), float64] */;
  %260 = reshape(%259, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %261 = @func_439(%260) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %262 = cast(meta[relay.Constant][17] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %263 = cast(meta[relay.Constant][18] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %264 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 154), float32] */, dtype="float32") /* ty=Tensor[(7, 154), float32] */;
  %265 = reshape(%262, newshape=[6, 15, 12]) /* ty=Tensor[(6, 15, 12), float64] */;
  %266 = reshape(%263, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %267 = reshape(%264, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %268 = @func_6367(%265, %266, %267) /* ty=(Tensor[(6, 15, 12), float64], Tensor[(220, 1), float32], Tensor[(448), uint32], Tensor[(220), float32], Tensor[(1078), float32], float64, Tensor[(14), float64]) */;
  %269 = @func_6804() /* ty=(Tensor[(6, 15, 1), float64],) */;
  %270 = %269.0;
  %271 = cast(meta[relay.Constant][18] /* ty=Tensor[(448), uint32] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %272 = cast(%270, dtype="float64") /* ty=Tensor[(6, 15, 1), float64] */;
  %273 = cast(%var_6848, dtype="int64") /* ty=Tensor[(21, 4), int64] */;
  %274 = cast(%var_6848, dtype="int64") /* ty=Tensor[(21, 4), int64] */;
  %275 = reshape(%273, newshape=[2, 14, 3]) /* ty=Tensor[(2, 14, 3), int64] */;
  %276 = reshape(%274, newshape=[2, 14, 3]) /* ty=Tensor[(2, 14, 3), int64] */;
  %277 = @func_3172(%275, %276) /* ty=Tensor[(2, 14, 3), int64] */;
  %278 = cast(%var_6887, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
  %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%277, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %282 = %261.1;
  %283 = %268.6;
  %284 = mod(%271, %272) /* ty=Tensor[(6, 15, 448), float64] */;
  %285 = less_equal(%280, %281) /* ty=Tensor[(2, 14, 3), bool] */;
  (%282, meta[relay.Constant][16] /* ty=Tensor[(2, 12), float64] */, %var_6848, %283, meta[relay.Constant][17] /* ty=Tensor[(1080), float64] */, meta[relay.Constant][19] /* ty=Tensor[(7, 154), float32] */, %284, %285)
}

def @func_4300(%var_4298: float32, %var_4299: Tensor[(7, 1, 1), float32]) -> Tensor[(7, 1, 1), float32] {
  %288 = fn (%var_4292: float32, %var_4293: Tensor[(7, 1, 1), float32]) -> Tensor[(7, 1, 1), float32] {
    %286 = cast(%var_4292, dtype="float32") /* ty=float32 */;
    %287 = cast(%var_4293, dtype="float32") /* ty=Tensor[(7, 1, 1), float32] */;
    mod(%286, %287) /* ty=Tensor[(7, 1, 1), float32] */
  };
  %288(%var_4298, %var_4299) /* ty=Tensor[(7, 1, 1), float32] */
}

def @func_6371(%var_6368: Tensor[(6, 15, 12), float64], %var_6369: Tensor[(448), uint32], %var_6370: Tensor[(1078), float32]) -> (Tensor[(6, 15, 12), float64], Tensor[(220, 1), float32], Tensor[(448), uint32], Tensor[(220), float32], Tensor[(1078), float32], float64, Tensor[(14), float64]) {
  %307 = fn (%var_6333: Tensor[(6, 15, 12), float64], %var_6357: Tensor[(448), uint32], %var_6359: Tensor[(1078), float32]) -> (Tensor[(6, 15, 12), float64], Tensor[(220, 1), float32], Tensor[(448), uint32], Tensor[(220), float32], Tensor[(1078), float32], float64, Tensor[(14), float64]) {
    %289 = @func_6304() /* ty=Tensor[(6, 15, 1), float64] */;
    %290 = cast(%289, dtype="bool") /* ty=Tensor[(6, 15, 1), bool] */;
    %291 = cast(%var_6333, dtype="bool") /* ty=Tensor[(6, 15, 12), bool] */;
    %292 = equal(%290, %291) /* ty=Tensor[(6, 15, 12), bool] */;
    %293 = cast(%292, dtype="float64") /* ty=Tensor[(6, 15, 12), float64] */;
    %294 = cast(%var_6357, dtype="uint32") /* ty=Tensor[(448), uint32] */;
    %295 = cast(meta[relay.Constant][20] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
    %296 = cast(%var_6359, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %297 = cast(-2.94949f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %298 = cast(meta[relay.Constant][21] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
    %299 = reshape(%294, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), uint32] */;
    %300 = reshape(%295, newshape=[220, 1]) /* ty=Tensor[(220, 1), float32] */;
    %301 = reshape(%296, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
    %302 = reshape(%297, newshape=[]) /* ty=float64 */;
    %303 = reshape(%298, newshape=[14]) /* ty=Tensor[(14), float64] */;
    %304 = @func_5266(%299, %300, %301, %302, %303) /* ty=(Tensor[(14, 4, 8), uint32], Tensor[(14, 4, 8), uint16], Tensor[(11, 11, 11), float64], Tensor[(1056), float64], Tensor[(220, 1), float32], Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(7, 11, 14), int64], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(756), int64], Tensor[(14, 4, 8), float64], Tensor[(?, 2, 12), bool]) */;
    %305 = sinh(%293) /* ty=Tensor[(6, 15, 12), float64] */;
    %306 = %304.4;
    (%305, %306, %var_6357, meta[relay.Constant][20] /* ty=Tensor[(220), float32] */, %var_6359, -2.94949f64 /* ty=float64 */, meta[relay.Constant][21] /* ty=Tensor[(14), float64] */)
  };
  %307(%var_6368, %var_6369, %var_6370) /* ty=(Tensor[(6, 15, 12), float64], Tensor[(220, 1), float32], Tensor[(448), uint32], Tensor[(220), float32], Tensor[(1078), float32], float64, Tensor[(14), float64]) */
}

def @func_5266(%var_5160: Tensor[(14, 4, 8), uint32], %var_5204: Tensor[(220, 1), float32], %var_5222: Tensor[(1078), float32], %var_5223: float64, %var_5224: Tensor[(14), float64]) -> (Tensor[(14, 4, 8), uint32], Tensor[(14, 4, 8), uint16], Tensor[(11, 11, 11), float64], Tensor[(1056), float64], Tensor[(220, 1), float32], Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(7, 11, 14), int64], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(756), int64], Tensor[(14, 4, 8), float64], Tensor[(?, 2, 12), bool]) {
  %308 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 4, 8), uint32] */, dtype="uint32") /* ty=Tensor[(14, 4, 8), uint32] */;
  %309 = shape_of(%var_5160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%var_5160, dtype="uint32") /* ty=Tensor[(14, 4, 8), uint32] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %312 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 4, 8), uint32] */, dtype="uint16") /* ty=Tensor[(14, 4, 8), uint16] */;
  %313 = shape_of(%var_5160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%var_5160, dtype="uint16") /* ty=Tensor[(14, 4, 8), uint16] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %316 = cast(meta[relay.Constant][24] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %317 = cast(%var_5204, dtype="float32") /* ty=Tensor[(220, 1), float32] */;
  %318 = reshape(%316, newshape=[8, 132]) /* ty=Tensor[(8, 132), float64] */;
  %319 = reshape(%317, newshape=[220, 1]) /* ty=Tensor[(220, 1), float32] */;
  %320 = @func_4271(%318, %319) /* ty=(Tensor[(11, 11, 11), float64], Tensor[(?, 2, 12), float32], Tensor[(66, 1), float64], float64, Tensor[(14), float64], Tensor[(24), float64], Tensor[(8, 132), float64], Tensor[(220, 1), float32]) */;
  %321 = cast(meta[relay.Constant][25] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %322 = reshape(%321, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %323 = @func_439(%322) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %324 = cast(%var_5222, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %325 = cast(%var_5222, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %326 = %323.1;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
  %328 = cast(%var_5223, dtype="float64") /* ty=float64 */;
  %329 = cast(%var_5224, dtype="float64") /* ty=Tensor[(14), float64] */;
  %330 = cast(meta[relay.Constant][26] /* ty=Tensor[(756), int64] */, dtype="int64") /* ty=Tensor[(756), int64] */;
  %331 = cast(%var_5204, dtype="float32") /* ty=Tensor[(220, 1), float32] */;
  %332 = reshape(%324, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %333 = reshape(%325, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %334 = reshape(%327, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %335 = reshape(%328, newshape=[]) /* ty=float64 */;
  %336 = reshape(%329, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %337 = reshape(%330, newshape=[756]) /* ty=Tensor[(756), int64] */;
  %338 = reshape(%331, newshape=[55, 4]) /* ty=Tensor[(55, 4), float32] */;
  %339 = @func_2210(%332, %333, %334, %335, %336, %337, %338) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(7, 11, 14), float32], Tensor[(7, 11, 14), int64], Tensor[(12, 9, 7), bool], Tensor[(756), int64], Tensor[(10, 2, 11), float32], Tensor[(55, 4), float32], Tensor[(?, 2, 12), float32], Tensor[(10, 2, 11), float32], Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(14, 1), float64], Tensor[(66, 1), float64], Tensor[(1056), float64]) */;
  %340 = cast(%var_5160, dtype="float32") /* ty=Tensor[(14, 4, 8), float32] */;
  %341 = acos(%340) /* ty=Tensor[(14, 4, 8), float32] */;
  %342 = cast(%341, dtype="float32") /* ty=Tensor[(14, 4, 8), float32] */;
  %343 = atan(%342) /* ty=Tensor[(14, 4, 8), float32] */;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  %345 = sin(%344) /* ty=Tensor[(14, 4, 8), float64] */;
  %346 = cast(%343, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%345, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %350 = cast(%326, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
  %351 = reshape(%350, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %352 = @func_439(%351) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
  %353 = left_shift(%310, %311) /* ty=Tensor[(14, 4, 8), uint32] */;
  %354 = subtract(%314, %315) /* ty=Tensor[(14, 4, 8), uint16] */;
  %355 = %320.0;
  %356 = %339.6;
  %357 = mod(%348, %349) /* ty=Tensor[(14, 4, 8), float64] */;
  %358 = %352.0;
  (%353, %354, %355, meta[relay.Constant][24] /* ty=Tensor[(1056), float64] */, %var_5204, %326, meta[relay.Constant][25] /* ty=Tensor[(24), float64] */, %356, %var_5222, %var_5223, %var_5224, meta[relay.Constant][26] /* ty=Tensor[(756), int64] */, %357, %358)
}

def @func_6524(%var_6522: float64, %var_6523: Tensor[(1056), float64]) -> (Tensor[(6, 15, ?), float32], Tensor[(7, 13, 9), float32], Tensor[(819, 1), float64], Tensor[(6, 15, 1), float32], Tensor[(2, ?, 7), float32], Tensor[(6), float32], Tensor[(24), float64], Tensor[(10, 2, 11), float32], Tensor[(220), float32], Tensor[(220), float32], Tensor[(66), float64], float64, Tensor[(1056), float64], Tensor[(7, 1, 1), float32], Tensor[(1, 7), float32]) {
  %408 = fn (%var_6496: float64, %var_6497: Tensor[(1056), float64]) -> (Tensor[(6, 15, ?), float32], Tensor[(7, 13, 9), float32], Tensor[(819, 1), float64], Tensor[(6, 15, 1), float32], Tensor[(2, ?, 7), float32], Tensor[(6), float32], Tensor[(24), float64], Tensor[(10, 2, 11), float32], Tensor[(220), float32], Tensor[(220), float32], Tensor[(66), float64], float64, Tensor[(1056), float64], Tensor[(7, 1, 1), float32], Tensor[(1, 7), float32]) {
    %359 = @func_6304() /* ty=Tensor[(6, 15, 1), float64] */;
    %360 = cast(%359, dtype="float32") /* ty=Tensor[(6, 15, 1), float32] */;
    %361 = acos(%360) /* ty=Tensor[(6, 15, 1), float32] */;
    %362 = cast(%359, dtype="int8") /* ty=Tensor[(6, 15, 1), int8] */;
    %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(%361, dtype="int8") /* ty=Tensor[(6, 15, 1), int8] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %366 = logical_xor(%364, %365) /* ty=Tensor[(6, 15, ?), int8] */;
    %367 = cast(%361, dtype="float32") /* ty=Tensor[(6, 15, 1), float32] */;
    %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(%366, dtype="float32") /* ty=Tensor[(6, 15, ?), float32] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %371 = cast(meta[relay.Constant][27] /* ty=Tensor[(819, 1), float64] */, dtype="float64") /* ty=Tensor[(819, 1), float64] */;
    %372 = reshape(%371, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), float64] */;
    %373 = cast(%361, dtype="float64") /* ty=Tensor[(6, 15, 1), float64] */;
    %374 = sqrt(%373) /* ty=Tensor[(6, 15, 1), float64] */;
    %375 = cast(%374, dtype="float32") /* ty=Tensor[(6, 15, 1), float32] */;
    %376 = cast(meta[relay.Constant][28] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
    %377 = cast(meta[relay.Constant][29] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %378 = reshape(%376, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
    %379 = reshape(%377, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %380 = @func_938(%378, %379) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(24), float64], Tensor[(?, ?, 6), uint64], Tensor[(?, 2, 12), bool], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(?, ?, 6), uint8], Tensor[(?, ?, 6), float64], Tensor[(2, ?, 7), float32], Tensor[(?, 2, 12), bool]) */;
    %381 = cast(meta[relay.Constant][30] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
    %382 = reshape(%381, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
    %383 = @func_1123(%382) /* ty=(Tensor[(10, 2, 11), float32],) */;
    %384 = cast(meta[relay.Constant][31] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
    %385 = cast(%var_6496, dtype="float64") /* ty=float64 */;
    %386 = %380.9;
    %387 = cast(%386, dtype="float64") /* ty=Tensor[(2, ?, 7), float64] */;
    %388 = cast(meta[relay.Constant][29] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %389 = cast(%var_6497, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %390 = %383.0;
    %391 = cast(%390, dtype="float32") /* ty=Tensor[(10, 2, 11), float32] */;
    %392 = reshape(%384, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float64] */;
    %393 = reshape(%385, newshape=[]) /* ty=float64 */;
    %394 = reshape(%387, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
    %395 = reshape(%388, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
    %396 = reshape(%389, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float64] */;
    %397 = reshape(%391, newshape=[220]) /* ty=Tensor[(220), float32] */;
    %398 = @func_1472(%392, %393, %394, %395, %396, %397) /* ty=(Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) */;
    %399 = cast(%var_6496, dtype="float32") /* ty=float32 */;
    %400 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 7), float32] */, dtype="float32") /* ty=Tensor[(1, 7), float32] */;
    %401 = reshape(%399, newshape=[]) /* ty=float32 */;
    %402 = reshape(%400, newshape=[7, 1, 1]) /* ty=Tensor[(7, 1, 1), float32] */;
    %403 = floor_mod(%369, %370) /* ty=Tensor[(6, 15, ?), float32] */;
    %404 = @func_2829(%372) /* ty=Tensor[(7, 13, 9), float32] */;
    %405 = log2(%375) /* ty=Tensor[(6, 15, 1), float32] */;
    %406 = %398.8;
    %407 = @func_4297(%401, %402) /* ty=Tensor[(7, 1, 1), float32] */;
    (%403, %404, meta[relay.Constant][27] /* ty=Tensor[(819, 1), float64] */, %405, %386, meta[relay.Constant][28] /* ty=Tensor[(6), float32] */, meta[relay.Constant][29] /* ty=Tensor[(24), float64] */, %390, meta[relay.Constant][30] /* ty=Tensor[(220), float32] */, %406, meta[relay.Constant][31] /* ty=Tensor[(66), float64] */, %var_6496, %var_6497, %407, meta[relay.Constant][32] /* ty=Tensor[(1, 7), float32] */)
  };
  %408(%var_6522, %var_6523) /* ty=(Tensor[(6, 15, ?), float32], Tensor[(7, 13, 9), float32], Tensor[(819, 1), float64], Tensor[(6, 15, 1), float32], Tensor[(2, ?, 7), float32], Tensor[(6), float32], Tensor[(24), float64], Tensor[(10, 2, 11), float32], Tensor[(220), float32], Tensor[(220), float32], Tensor[(66), float64], float64, Tensor[(1056), float64], Tensor[(7, 1, 1), float32], Tensor[(1, 7), float32]) */
}

def @func_6567(%var_6565: Tensor[(15, 3, 10), float64]) -> (Tensor[(15, 3, 10), float64],) {
  @func_6564(%var_6565) /* ty=(Tensor[(15, 3, 10), float64],) */
}

def @func_6896(%var_6894: Tensor[(21, 4), int64], %var_6895: Tensor[(2, 14, 3), int64]) -> (Tensor[(?, 2, 12), float32], Tensor[(2, 12), float64], Tensor[(21, 4), int64], Tensor[(14), float64], Tensor[(1080), float64], Tensor[(7, 154), float32], Tensor[(6, 15, 448), float64], Tensor[(2, 14, 3), bool]) {
  @func_6892(%var_6894, %var_6895) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(2, 12), float64], Tensor[(21, 4), int64], Tensor[(14), float64], Tensor[(1080), float64], Tensor[(7, 154), float32], Tensor[(6, 15, 448), float64], Tensor[(2, 14, 3), bool]) */
}

def @func_4341(%var_4339: float32, %var_4340: Tensor[(14, 1, 3), float32]) -> (Tensor[(14, 1, 3), bool], Tensor[(11, 13, 5), bool], Tensor[(715), uint8]) {
  @func_4337(%var_4339, %var_4340) /* ty=(Tensor[(14, 1, 3), bool], Tensor[(11, 13, 5), bool], Tensor[(715), uint8]) */
}

def @func_6305() -> Tensor[(6, 15, 1), float64] {
  %410 = fn () -> Tensor[(6, 15, 1), float64] {
    %409 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 15, 1), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 1), float64] */;
    sin(%409) /* ty=Tensor[(6, 15, 1), float64] */
  };
  %410() /* ty=Tensor[(6, 15, 1), float64] */
}

def @func_3713(%var_3706: Tensor[(12, 4, 9), float32], %var_3707: Tensor[(22, 3), float64], %var_3708: float64, %var_3709: Tensor[(14, 1), float64], %var_3710: Tensor[(24, 1), float64], %var_3711: Tensor[(88, 12), float64], %var_3712: Tensor[(220), float32]) -> (Tensor[(12, 4, 9), float32], float64, Tensor[(22, 3), float64], float64, Tensor[(14, 1), float64], Tensor[(24, 1), float64], Tensor[(88, 12), float64], Tensor[(220), float32]) {
  %427 = fn (%var_3671: Tensor[(12, 4, 9), float32], %var_3692: Tensor[(22, 3), float64], %var_3693: float64, %var_3694: Tensor[(14, 1), float64], %var_3695: Tensor[(24, 1), float64], %var_3696: Tensor[(88, 12), float64], %var_3697: Tensor[(220), float32]) -> (Tensor[(12, 4, 9), float32], float64, Tensor[(22, 3), float64], float64, Tensor[(14, 1), float64], Tensor[(24, 1), float64], Tensor[(88, 12), float64], Tensor[(220), float32]) {
    %411 = cast(%var_3671, dtype="float32") /* ty=Tensor[(12, 4, 9), float32] */;
    %412 = cast(%var_3692, dtype="float64") /* ty=Tensor[(22, 3), float64] */;
    %413 = cast(%var_3693, dtype="float64") /* ty=float64 */;
    %414 = cast(%var_3694, dtype="float64") /* ty=Tensor[(14, 1), float64] */;
    %415 = cast(%var_3695, dtype="float64") /* ty=Tensor[(24, 1), float64] */;
    %416 = cast(%var_3696, dtype="float64") /* ty=Tensor[(88, 12), float64] */;
    %417 = cast(%var_3697, dtype="float32") /* ty=Tensor[(220), float32] */;
    %418 = reshape(%412, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float64] */;
    %419 = reshape(%413, newshape=[]) /* ty=float64 */;
    %420 = reshape(%414, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
    %421 = reshape(%415, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
    %422 = reshape(%416, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float64] */;
    %423 = reshape(%417, newshape=[220]) /* ty=Tensor[(220), float32] */;
    %424 = @func_1472(%418, %419, %420, %421, %422, %423) /* ty=(Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) */;
    %425 = log2(%411) /* ty=Tensor[(12, 4, 9), float32] */;
    %426 = %424.1;
    (%425, %426, %var_3692, %var_3693, %var_3694, %var_3695, %var_3696, %var_3697)
  };
  %427(%var_3706, %var_3707, %var_3708, %var_3709, %var_3710, %var_3711, %var_3712) /* ty=(Tensor[(12, 4, 9), float32], float64, Tensor[(22, 3), float64], float64, Tensor[(14, 1), float64], Tensor[(24, 1), float64], Tensor[(88, 12), float64], Tensor[(220), float32]) */
}

def @func_442(%var_440: Tensor[(1, 2, 12), float64]) -> (Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) {
  @func_439(%var_440) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */
}

def @func_7416() -> Tensor[(6, 15, 1), float64] {
  @func_7414() /* ty=Tensor[(6, 15, 1), float64] */
}

def @func_1906(%var_1904: Tensor[(12, 9, 7), int64], %var_1905: Tensor[(12, 9, 7), int64]) -> (Tensor[(12, 9, 7), bool],) {
  @func_1902(%var_1904, %var_1905) /* ty=(Tensor[(12, 9, 7), bool],) */
}

def @func_7778() -> (Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(6, 15, 7), float32]) {
  @func_7776() /* ty=(Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(6, 15, 7), float32]) */
}

def @func_7776() -> (Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(6, 15, 7), float32]) {
  %428 = cast(meta[relay.Constant][34] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
  %429 = cast(meta[relay.Constant][34] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
  %430 = reshape(%428, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
  %431 = reshape(%429, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
  %432 = @func_1755(%430, %431) /* ty=(Tensor[(8, 11, 7), float32],) */;
  %433 = @func_7664() /* ty=Tensor[(6, 15, ?), float64] */;
  %434 = cast(%433, dtype="float32") /* ty=Tensor[(6, 15, ?), float32] */;
  %435 = asin(%434) /* ty=Tensor[(6, 15, ?), float32] */;
  %436 = @func_7664() /* ty=Tensor[(6, 15, ?), float64] */;
  %437 = cast(%436, dtype="bool") /* ty=Tensor[(6, 15, ?), bool] */;
  %438 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%435, dtype="bool") /* ty=Tensor[(6, 15, ?), bool] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %441 = logical_and(%439, %440) /* ty=Tensor[(6, 15, ?), bool] */;
  %442 = cast(%436, dtype="float64") /* ty=Tensor[(6, 15, ?), float64] */;
  %443 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 15, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 7), float64] */;
  %444 = floor_divide(%442, %443) /* ty=Tensor[(6, 15, 7), float64] */;
  %445 = cast(%435, dtype="uint16") /* ty=Tensor[(6, 15, ?), uint16] */;
  %446 = cast(%444, dtype="uint16") /* ty=Tensor[(6, 15, 7), uint16] */;
  %447 = bitwise_and(%445, %446) /* ty=Tensor[(6, 15, 7), uint16] */;
  %448 = cast(%441, dtype="float32") /* ty=Tensor[(6, 15, ?), float32] */;
  %449 = cast(%447, dtype="float32") /* ty=Tensor[(6, 15, 7), float32] */;
  %450 = %432.0;
  %451 = power(%448, %449) /* ty=Tensor[(6, 15, 7), float32] */;
  (%450, meta[relay.Constant][34] /* ty=Tensor[(616), float32] */, %451)
}

def @func_6747() -> (Tensor[(7, 13, 4), float64], float64, float64, Tensor[(2, 528), float32]) {
  %462 = fn () -> (Tensor[(7, 13, 4), float64], float64, float64, Tensor[(2, 528), float32]) {
    %452 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 13, 4), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 4), float64] */;
    %453 = cast(-0.347841f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %454 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 528), float64] */, dtype="float64") /* ty=Tensor[(2, 528), float64] */;
    %455 = reshape(%453, newshape=[]) /* ty=float64 */;
    %456 = reshape(%454, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
    %457 = @func_6521(%455, %456) /* ty=(Tensor[(6, 15, ?), float32], Tensor[(7, 13, 9), float32], Tensor[(819, 1), float64], Tensor[(6, 15, 1), float32], Tensor[(2, ?, 7), float32], Tensor[(6), float32], Tensor[(24), float64], Tensor[(10, 2, 11), float32], Tensor[(220), float32], Tensor[(220), float32], Tensor[(66), float64], float64, Tensor[(1056), float64], Tensor[(7, 1, 1), float32], Tensor[(1, 7), float32]) */;
    %458 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 528), float64] */, dtype="float32") /* ty=Tensor[(2, 528), float32] */;
    %459 = sigmoid(%452) /* ty=Tensor[(7, 13, 4), float64] */;
    %460 = %457.11;
    %461 = sin(%458) /* ty=Tensor[(2, 528), float32] */;
    (%459, %460, -0.347841f64 /* ty=float64 */, %461)
  };
  %462() /* ty=(Tensor[(7, 13, 4), float64], float64, float64, Tensor[(2, 528), float32]) */
}

def @func_7381(%var_7379: Tensor[(5, 7, 3), int64]) -> Tensor[(5, 7, 3), int64] {
  @func_7378(%var_7379) /* ty=Tensor[(5, 7, 3), int64] */
}

def @func_6553() -> (Tensor[(6, 15, 1), float64],) {
  %464 = fn () -> (Tensor[(6, 15, 1), float64],) {
    %463 = @func_6304() /* ty=Tensor[(6, 15, 1), float64] */;
    (%463,)
  };
  %464() /* ty=(Tensor[(6, 15, 1), float64],) */
}

def @func_7101() -> Tensor[(6, 15, 1), float64] {
  @func_7099() /* ty=Tensor[(6, 15, 1), float64] */
}

def @func_7593(%var_7586: Tensor[(364), float64]) -> (Tensor[(15, 3, 10), uint32], Tensor[(7, 13, 4), int8], Tensor[(364), float64]) {
  %465 = @func_7521() /* ty=(Tensor[(7, 13, 4), float64], Tensor[(15, 3, 10), float64], Tensor[(450), float64]) */;
  %466 = %465.1;
  %467 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 3, 10), float64] */, dtype="uint32") /* ty=Tensor[(15, 3, 10), uint32] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="uint32") /* ty=Tensor[(15, 3, 10), uint32] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %471 = cast(%var_7586, dtype="float64") /* ty=Tensor[(364), float64] */;
  %472 = reshape(%471, newshape=[7, 13, 4]) /* ty=Tensor[(7, 13, 4), float64] */;
  %473 = @func_7395(%472) /* ty=(Tensor[(7, 13, 4), int8],) */;
  %474 = bitwise_and(%469, %470) /* ty=Tensor[(15, 3, 10), uint32] */;
  %475 = %473.0;
  (%474, %475, %var_7586)
}

def @func_6805() -> (Tensor[(6, 15, 1), float64],) {
  %477 = fn () -> (Tensor[(6, 15, 1), float64],) {
    %476 = @func_6304() /* ty=Tensor[(6, 15, 1), float64] */;
    (%476,)
  };
  %477() /* ty=(Tensor[(6, 15, 1), float64],) */
}

def @func_3153(%var_3139: Tensor[(14, 8, 16), float64]) -> Tensor[(14, 8, 16), float64] {
  %478 = cast(%var_3139, dtype="float64") /* ty=Tensor[(14, 8, 16), float64] */;
  %479 = acos(%478) /* ty=Tensor[(14, 8, 16), float64] */;
  %480 = cast(%var_3139, dtype="float64") /* ty=Tensor[(14, 8, 16), float64] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%479, dtype="float64") /* ty=Tensor[(14, 8, 16), float64] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%482, %483) /* ty=Tensor[(14, 8, 16), float64] */
}

def @func_7665() -> Tensor[(6, 15, ?), float64] {
  %490 = fn () -> Tensor[(6, 15, ?), float64] {
    %484 = @func_7430() /* ty=(Tensor[(6, 15, 1), float64],) */;
    %485 = %484.0;
    %486 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 15, 1), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 1), float64] */;
    %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
    %488 = cast(%485, dtype="float64") /* ty=Tensor[(6, 15, 1), float64] */;
    %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    minimum(%488, %489) /* ty=Tensor[(6, 15, ?), float64] */
  };
  %490() /* ty=Tensor[(6, 15, ?), float64] */
}

def @func_3175(%var_3173: Tensor[(2, 14, 3), int64], %var_3174: Tensor[(2, 14, 3), int64]) -> Tensor[(2, 14, 3), int64] {
  %495 = fn (%var_3164: Tensor[(2, 14, 3), int64], %var_3165: Tensor[(2, 14, 3), int64]) -> Tensor[(2, 14, 3), int64] {
    %491 = cast(%var_3165, dtype="int64") /* ty=Tensor[(2, 14, 3), int64] */;
    %492 = shape_of(%var_3164, dtype="int32") /* ty=Tensor[(3), int32] */;
    %493 = cast(%var_3164, dtype="int64") /* ty=Tensor[(2, 14, 3), int64] */;
    %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    left_shift(%493, %494) /* ty=Tensor[(2, 14, 3), int64] */
  };
  %495(%var_3173, %var_3174) /* ty=Tensor[(2, 14, 3), int64] */
}

def @func_6050(%var_5996: uint16, %var_5997: Tensor[(1, 8, 9), uint16], %var_6022: Tensor[(220), float32]) -> (Tensor[(1, 8, 9), uint16], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) {
  %496 = cast(%var_5996, dtype="uint16") /* ty=uint16 */;
  %497 = cast(%var_5997, dtype="uint16") /* ty=Tensor[(1, 8, 9), uint16] */;
  %498 = cast(%var_6022, dtype="float32") /* ty=Tensor[(220), float32] */;
  %499 = reshape(%498, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float32] */;
  %500 = @func_1123(%499) /* ty=(Tensor[(10, 2, 11), float32],) */;
  %501 = logical_xor(%496, %497) /* ty=Tensor[(1, 8, 9), uint16] */;
  %502 = %500.0;
  (%501, %502, %var_6022)
}

def @func_2832(%var_2830: Tensor[(7, 13, 9), float64]) -> Tensor[(7, 13, 9), float32] {
  @func_2829(%var_2830) /* ty=Tensor[(7, 13, 9), float32] */
}

def @func_4735(%var_4724: Tensor[(5, 13, 6), int64], %var_4725: Tensor[(5, 13, 6), int64], %var_4726: Tensor[(32), float32], %var_4727: Tensor[(1, 14), float64], %var_4728: Tensor[(756), int64], %var_4729: Tensor[(220), float32], %var_4730: Tensor[(616), float32], %var_4731: Tensor[(5, 13, 6), float64], %var_4732: Tensor[(432), float32], %var_4733: Tensor[(66), float64], %var_4734: Tensor[(1056), float64]) -> (Tensor[(220), float32], Tensor[(32), float32], Tensor[(1078), float32], Tensor[(24), float64], Tensor[(1, 14), float64], Tensor[(756), int64], Tensor[(220), float32], Tensor[(5, 13, 6), uint8], Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(5, 13, 6), float64], Tensor[(12, 4, 9), float32], Tensor[(432), float32], Tensor[(66), float64], float64, Tensor[(1056), float64], Tensor[(11, 13, 5), bool], Tensor[(715), uint8]) {
  %562 = fn (%var_4618: Tensor[(5, 13, 6), int64], %var_4619: Tensor[(5, 13, 6), int64], %var_4627: Tensor[(32), float32], %var_4630: Tensor[(1, 14), float64], %var_4631: Tensor[(756), int64], %var_4632: Tensor[(220), float32], %var_4662: Tensor[(616), float32], %var_4685: Tensor[(5, 13, 6), float64], %var_4709: Tensor[(432), float32], %var_4710: Tensor[(66), float64], %var_4712: Tensor[(1056), float64]) -> (Tensor[(220), float32], Tensor[(32), float32], Tensor[(1078), float32], Tensor[(24), float64], Tensor[(1, 14), float64], Tensor[(756), int64], Tensor[(220), float32], Tensor[(5, 13, 6), uint8], Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(5, 13, 6), float64], Tensor[(12, 4, 9), float32], Tensor[(432), float32], Tensor[(66), float64], float64, Tensor[(1056), float64], Tensor[(11, 13, 5), bool], Tensor[(715), uint8]) {
    %503 = cast(%var_4627, dtype="float32") /* ty=Tensor[(32), float32] */;
    %504 = cast(meta[relay.Constant][40] /* ty=Tensor[(1078), float32] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %505 = cast(meta[relay.Constant][41] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %506 = cast(%var_4630, dtype="float64") /* ty=Tensor[(1, 14), float64] */;
    %507 = cast(%var_4631, dtype="int64") /* ty=Tensor[(756), int64] */;
    %508 = cast(%var_4632, dtype="float32") /* ty=Tensor[(220), float32] */;
    %509 = reshape(%503, newshape=[4, 4, 2]) /* ty=Tensor[(4, 4, 2), float32] */;
    %510 = reshape(%504, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
    %511 = reshape(%505, newshape=[1, 24]) /* ty=Tensor[(1, 24), float64] */;
    %512 = reshape(%506, newshape=[14]) /* ty=Tensor[(14), float64] */;
    %513 = reshape(%507, newshape=[756]) /* ty=Tensor[(756), int64] */;
    %514 = reshape(%508, newshape=[220]) /* ty=Tensor[(220), float32] */;
    %515 = @func_2548(%509, %510, %511, %512, %513, %514) /* ty=(Tensor[(1056), float64], Tensor[(1078), float32], Tensor[(1, 24), float64], Tensor[(14), float64], Tensor[(756), int64], Tensor[(220), float32], Tensor[(4, 4, 2), float64], Tensor[(10, 2, 11), float32], Tensor[(10, 2, 11), float32]) */;
    %516 = cast(%var_4619, dtype="bool") /* ty=Tensor[(5, 13, 6), bool] */;
    %517 = shape_of(%var_4618, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%var_4618, dtype="bool") /* ty=Tensor[(5, 13, 6), bool] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %520 = equal(%518, %519) /* ty=Tensor[(5, 13, 6), bool] */;
    %521 = cast(%var_4619, dtype="uint8") /* ty=Tensor[(5, 13, 6), uint8] */;
    %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
    %523 = cast(%520, dtype="uint8") /* ty=Tensor[(5, 13, 6), uint8] */;
    %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %525 = cast(%var_4662, dtype="float32") /* ty=Tensor[(616), float32] */;
    %526 = cast(%var_4662, dtype="float32") /* ty=Tensor[(616), float32] */;
    %527 = reshape(%525, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
    %528 = reshape(%526, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
    %529 = @func_1755(%527, %528) /* ty=(Tensor[(8, 11, 7), float32],) */;
    %530 = cast(%var_4618, dtype="float64") /* ty=Tensor[(5, 13, 6), float64] */;
    %531 = cosh(%530) /* ty=Tensor[(5, 13, 6), float64] */;
    %532 = cast(%var_4685, dtype="float64") /* ty=Tensor[(5, 13, 6), float64] */;
    %533 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
    %534 = cast(%531, dtype="float64") /* ty=Tensor[(5, 13, 6), float64] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %536 = cast(%var_4709, dtype="float32") /* ty=Tensor[(432), float32] */;
    %537 = cast(%var_4710, dtype="float64") /* ty=Tensor[(66), float64] */;
    %538 = cast(5.48199f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %539 = cast(%var_4630, dtype="float64") /* ty=Tensor[(1, 14), float64] */;
    %540 = cast(meta[relay.Constant][41] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %541 = cast(%var_4712, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %542 = %515.5;
    %543 = cast(%542, dtype="float32") /* ty=Tensor[(220), float32] */;
    %544 = reshape(%536, newshape=[12, 4, 9]) /* ty=Tensor[(12, 4, 9), float32] */;
    %545 = reshape(%537, newshape=[22, 3]) /* ty=Tensor[(22, 3), float64] */;
    %546 = reshape(%538, newshape=[]) /* ty=float64 */;
    %547 = reshape(%539, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
    %548 = reshape(%540, newshape=[24, 1]) /* ty=Tensor[(24, 1), float64] */;
    %549 = reshape(%541, newshape=[88, 12]) /* ty=Tensor[(88, 12), float64] */;
    %550 = reshape(%543, newshape=[220]) /* ty=Tensor[(220), float32] */;
    %551 = @func_3705(%544, %545, %546, %547, %548, %549, %550) /* ty=(Tensor[(12, 4, 9), float32], float64, Tensor[(22, 3), float64], float64, Tensor[(14, 1), float64], Tensor[(24, 1), float64], Tensor[(88, 12), float64], Tensor[(220), float32]) */;
    %552 = cast(meta[relay.Constant][42] /* ty=Tensor[(715), uint8] */, dtype="uint8") /* ty=Tensor[(715), uint8] */;
    %553 = cast(meta[relay.Constant][42] /* ty=Tensor[(715), uint8] */, dtype="uint8") /* ty=Tensor[(715), uint8] */;
    %554 = reshape(%552, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), uint8] */;
    %555 = reshape(%553, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), uint8] */;
    %556 = @func_3506(%554, %555) /* ty=(Tensor[(11, 13, 5), bool],) */;
    %557 = minimum(%523, %524) /* ty=Tensor[(5, 13, 6), uint8] */;
    %558 = %529.0;
    %559 = floor_mod(%534, %535) /* ty=Tensor[(5, 13, 6), float64] */;
    %560 = %551.0;
    %561 = %556.0;
    (%542, %var_4627, meta[relay.Constant][40] /* ty=Tensor[(1078), float32] */, meta[relay.Constant][41] /* ty=Tensor[(24), float64] */, %var_4630, %var_4631, %var_4632, %557, %558, %var_4662, %559, %560, %var_4709, %var_4710, 5.48199f64 /* ty=float64 */, %var_4712, %561, meta[relay.Constant][42] /* ty=Tensor[(715), uint8] */)
  };
  %562(%var_4724, %var_4725, %var_4726, %var_4727, %var_4728, %var_4729, %var_4730, %var_4731, %var_4732, %var_4733, %var_4734) /* ty=(Tensor[(220), float32], Tensor[(32), float32], Tensor[(1078), float32], Tensor[(24), float64], Tensor[(1, 14), float64], Tensor[(756), int64], Tensor[(220), float32], Tensor[(5, 13, 6), uint8], Tensor[(8, 11, 7), float32], Tensor[(616), float32], Tensor[(5, 13, 6), float64], Tensor[(12, 4, 9), float32], Tensor[(432), float32], Tensor[(66), float64], float64, Tensor[(1056), float64], Tensor[(11, 13, 5), bool], Tensor[(715), uint8]) */
}

def @func_941(%var_939: Tensor[(1, 1, 6), float32], %var_940: Tensor[(24), float64]) -> (Tensor[(?, 2, 12), bool], Tensor[(24), float64], Tensor[(?, ?, 6), uint64], Tensor[(?, 2, 12), bool], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(?, ?, 6), uint8], Tensor[(?, ?, 6), float64], Tensor[(2, ?, 7), float32], Tensor[(?, 2, 12), bool]) {
  %628 = fn (%var_812: Tensor[(1, 1, 6), float32], %var_831: Tensor[(24), float64]) -> (Tensor[(?, 2, 12), bool], Tensor[(24), float64], Tensor[(?, ?, 6), uint64], Tensor[(?, 2, 12), bool], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(?, ?, 6), uint8], Tensor[(?, ?, 6), float64], Tensor[(2, ?, 7), float32], Tensor[(?, 2, 12), bool]) {
    %563 = cast(%var_831, dtype="float64") /* ty=Tensor[(24), float64] */;
    %564 = reshape(%563, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
    %565 = @func_439(%564) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
    %566 = cast(%var_812, dtype="float32") /* ty=Tensor[(1, 1, 6), float32] */;
    %567 = sqrt(%566) /* ty=Tensor[(1, 1, 6), float32] */;
    %568 = cast(%567, dtype="float64") /* ty=Tensor[(1, 1, 6), float64] */;
    %569 = log(%568) /* ty=Tensor[(1, 1, 6), float64] */;
    %570 = cast(%567, dtype="bool") /* ty=Tensor[(1, 1, 6), bool] */;
    %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
    %572 = cast(%569, dtype="bool") /* ty=Tensor[(1, 1, 6), bool] */;
    %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %574 = logical_or(%572, %573) /* ty=Tensor[(?, ?, 6), bool] */;
    %575 = cast(%574, dtype="float32") /* ty=Tensor[(?, ?, 6), float32] */;
    %576 = log2(%575) /* ty=Tensor[(?, ?, 6), float32] */;
    %577 = cast(%574, dtype="uint64") /* ty=Tensor[(?, ?, 6), uint64] */;
    %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
    %579 = cast(%576, dtype="uint64") /* ty=Tensor[(?, ?, 6), uint64] */;
    %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %581 = add(%579, %580) /* ty=Tensor[(?, ?, 6), uint64] */;
    %582 = cast(%569, dtype="uint64") /* ty=Tensor[(1, 1, 6), uint64] */;
    %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
    %584 = cast(%581, dtype="uint64") /* ty=Tensor[(?, ?, 6), uint64] */;
    %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %586 = %565.0;
    %587 = cast(%586, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
    %588 = reshape(%587, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
    %589 = @func_439(%588) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
    %590 = cast(2.69159f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %591 = cast(meta[relay.Constant][43] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
    %592 = reshape(%590, newshape=[]) /* ty=float64 */;
    %593 = reshape(%591, newshape=[2, 1, 7]) /* ty=Tensor[(2, 1, 7), float64] */;
    %594 = @func_65(%592, %593) /* ty=(Tensor[(2, ?, 7), float32],) */;
    %595 = cast(%574, dtype="float32") /* ty=Tensor[(?, ?, 6), float32] */;
    %596 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
    %597 = cast(%576, dtype="float32") /* ty=Tensor[(?, ?, 6), float32] */;
    %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %599 = power(%597, %598) /* ty=Tensor[(?, ?, 6), float32] */;
    %600 = cast(%581, dtype="int8") /* ty=Tensor[(?, ?, 6), int8] */;
    %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
    %602 = cast(%599, dtype="int8") /* ty=Tensor[(?, ?, 6), int8] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %604 = bitwise_and(%602, %603) /* ty=Tensor[(?, ?, 6), int8] */;
    %605 = cast(%604, dtype="uint8") /* ty=Tensor[(?, ?, 6), uint8] */;
    %606 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
    %607 = cast(%569, dtype="uint8") /* ty=Tensor[(1, 1, 6), uint8] */;
    %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %609 = cast(%569, dtype="float64") /* ty=Tensor[(1, 1, 6), float64] */;
    %610 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
    %611 = cast(%581, dtype="float64") /* ty=Tensor[(?, ?, 6), float64] */;
    %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %613 = cast(2.69159f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %614 = %594.0;
    %615 = cast(%614, dtype="float64") /* ty=Tensor[(2, ?, 7), float64] */;
    %616 = reshape(%613, newshape=[]) /* ty=float64 */;
    %617 = reshape(%615, newshape=[2, 1, 7]) /* ty=Tensor[(2, 1, 7), float64] */;
    %618 = @func_65(%616, %617) /* ty=(Tensor[(2, ?, 7), float32],) */;
    %619 = cast(%var_831, dtype="float64") /* ty=Tensor[(24), float64] */;
    %620 = reshape(%619, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
    %621 = @func_439(%620) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
    %622 = maximum(%584, %585) /* ty=Tensor[(?, ?, 6), uint64] */;
    %623 = %589.0;
    %624 = minimum(%607, %608) /* ty=Tensor[(?, ?, 6), uint8] */;
    %625 = floor_divide(%611, %612) /* ty=Tensor[(?, ?, 6), float64] */;
    %626 = %618.0;
    %627 = %621.0;
    (%586, %var_831, %622, %623, %614, 2.69159f64 /* ty=float64 */, meta[relay.Constant][43] /* ty=Tensor[(14), float64] */, %624, %625, %626, %627)
  };
  %628(%var_939, %var_940) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(24), float64], Tensor[(?, ?, 6), uint64], Tensor[(?, 2, 12), bool], Tensor[(2, ?, 7), float32], float64, Tensor[(14), float64], Tensor[(?, ?, 6), uint8], Tensor[(?, ?, 6), float64], Tensor[(2, ?, 7), float32], Tensor[(?, 2, 12), bool]) */
}

def @func_65(%var_53: float64, %var_54: Tensor[(2, 1, 7), float64]) -> (Tensor[(2, ?, 7), float32],) {
  %629 = cast(%var_53, dtype="bool") /* ty=bool */;
  %630 = cast(%var_54, dtype="bool") /* ty=Tensor[(2, 1, 7), bool] */;
  %631 = greater_equal(%629, %630) /* ty=Tensor[(2, 1, 7), bool] */;
  %632 = cast(%var_54, dtype="float32") /* ty=Tensor[(2, 1, 7), float32] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="float32") /* ty=Tensor[(2, 1, 7), float32] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %636 = multiply(%634, %635) /* ty=Tensor[(2, ?, 7), float32] */;
  (%636,)
}

def @func_7596(%var_7594: Tensor[(364), float64]) -> (Tensor[(15, 3, 10), uint32], Tensor[(7, 13, 4), int8], Tensor[(364), float64]) {
  @func_7593(%var_7594) /* ty=(Tensor[(15, 3, 10), uint32], Tensor[(7, 13, 4), int8], Tensor[(364), float64]) */
}

def @func_5846(%var_5845: Tensor[(7, 11, 1), float64]) -> (Tensor[(7, 11, ?), float32], Tensor[(7, 11, 1), float32]) {
  %646 = fn (%var_5815: Tensor[(7, 11, 1), float64]) -> (Tensor[(7, 11, ?), float32], Tensor[(7, 11, 1), float32]) {
    %637 = cast(%var_5815, dtype="float64") /* ty=Tensor[(7, 11, 1), float64] */;
    %638 = atanh(%637) /* ty=Tensor[(7, 11, 1), float64] */;
    %639 = cast(%638, dtype="float32") /* ty=Tensor[(7, 11, 1), float32] */;
    %640 = shape_of(%var_5815, dtype="int32") /* ty=Tensor[(3), int32] */;
    %641 = cast(%var_5815, dtype="float32") /* ty=Tensor[(7, 11, 1), float32] */;
    %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %643 = cast(%var_5815, dtype="float32") /* ty=Tensor[(7, 11, 1), float32] */;
    %644 = floor_mod(%641, %642) /* ty=Tensor[(7, 11, ?), float32] */;
    %645 = sigmoid(%643) /* ty=Tensor[(7, 11, 1), float32] */;
    (%644, %645)
  };
  %646(%var_5845) /* ty=(Tensor[(7, 11, ?), float32], Tensor[(7, 11, 1), float32]) */
}

def @func_7552(%var_7550: Tensor[(220), float32]) -> (Tensor[(6, 15, 1), float64], Tensor[(1056), float64], Tensor[(220), float32], Tensor[(220, ?), bool]) {
  @func_7549(%var_7550) /* ty=(Tensor[(6, 15, 1), float64], Tensor[(1056), float64], Tensor[(220), float32], Tensor[(220, ?), bool]) */
}

def @func_1902(%var_1885: Tensor[(12, 9, 7), int64], %var_1886: Tensor[(12, 9, 7), int64]) -> (Tensor[(12, 9, 7), bool],) {
  %647 = cast(%var_1886, dtype="bool") /* ty=Tensor[(12, 9, 7), bool] */;
  %648 = shape_of(%var_1885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%var_1885, dtype="bool") /* ty=Tensor[(12, 9, 7), bool] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %651 = less(%649, %650) /* ty=Tensor[(12, 9, 7), bool] */;
  (%651,)
}

def @func_6631(%var_6572: Tensor[(3, 3), uint64], %var_6573: Tensor[(45), uint64], %var_6574: Tensor[(220), float32], %var_6582: Tensor[(1078, 9), float32]) -> (Tensor[(6, 15, 1), float64], Tensor[(3, 3), uint64], Tensor[(220), float32], Tensor[(1078, 9), bool], Tensor[(45), int32], Tensor[(1078, 1), float32]) {
  %652 = @func_6552() /* ty=(Tensor[(6, 15, 1), float64],) */;
  %653 = cast(meta[relay.Constant][44] /* ty=Tensor[(1078, 1), float32] */, dtype="bool") /* ty=Tensor[(1078, 1), bool] */;
  %654 = cast(%var_6582, dtype="bool") /* ty=Tensor[(1078, 9), bool] */;
  %655 = cast(%var_6572, dtype="uint64") /* ty=Tensor[(3, 3), uint64] */;
  %656 = cast(%var_6573, dtype="uint64") /* ty=Tensor[(45), uint64] */;
  %657 = cast(%var_6574, dtype="float32") /* ty=Tensor[(220), float32] */;
  %658 = cast(meta[relay.Constant][44] /* ty=Tensor[(1078, 1), float32] */, dtype="float32") /* ty=Tensor[(1078, 1), float32] */;
  %659 = cast(%var_6572, dtype="uint64") /* ty=Tensor[(3, 3), uint64] */;
  %660 = reshape(%655, newshape=[3, 3, 1]) /* ty=Tensor[(3, 3, 1), uint64] */;
  %661 = reshape(%656, newshape=[3, 3, 5]) /* ty=Tensor[(3, 3, 5), uint64] */;
  %662 = reshape(%657, newshape=[1, 220]) /* ty=Tensor[(1, 220), float32] */;
  %663 = reshape(%658, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %664 = reshape(%659, newshape=[3, 3, 1]) /* ty=Tensor[(3, 3, 1), uint64] */;
  %665 = @func_5588(%660, %661, %662, %663, %664) /* ty=(Tensor[(3, 3, 5), uint64], Tensor[(756), int64], Tensor[(448), uint32], Tensor[(1, 220), float32], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(3, 3, ?), bool]) */;
  %666 = %665.5;
  %667 = cast(%666, dtype="int32") /* ty=int32 */;
  %668 = cast(%var_6573, dtype="int32") /* ty=Tensor[(45), int32] */;
  %669 = cast(meta[relay.Constant][44] /* ty=Tensor[(1078, 1), float32] */, dtype="float32") /* ty=Tensor[(1078, 1), float32] */;
  %670 = exp(%669) /* ty=Tensor[(1078, 1), float32] */;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(1078, 1), float32] */;
  %672 = %652.0;
  %673 = equal(%653, %654) /* ty=Tensor[(1078, 9), bool] */;
  %674 = multiply(%667, %668) /* ty=Tensor[(45), int32] */;
  %675 = log2(%671) /* ty=Tensor[(1078, 1), float32] */;
  (%672, %var_6572, %var_6574, %673, %674, %675)
}

def @func_7522() -> (Tensor[(7, 13, 4), float64], Tensor[(15, 3, 10), float64], Tensor[(450), float64]) {
  %682 = fn () -> (Tensor[(7, 13, 4), float64], Tensor[(15, 3, 10), float64], Tensor[(450), float64]) {
    %676 = @func_6746() /* ty=(Tensor[(7, 13, 4), float64], float64, float64, Tensor[(2, 528), float32]) */;
    %677 = cast(meta[relay.Constant][45] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
    %678 = reshape(%677, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), float64] */;
    %679 = @func_6564(%678) /* ty=(Tensor[(15, 3, 10), float64],) */;
    %680 = %676.0;
    %681 = %679.0;
    (%680, %681, meta[relay.Constant][45] /* ty=Tensor[(450), float64] */)
  };
  %682() /* ty=(Tensor[(7, 13, 4), float64], Tensor[(15, 3, 10), float64], Tensor[(450), float64]) */
}

def @func_5153(%var_5151: Tensor[(3, 5, 13), float32], %var_5152: Tensor[(1280), float64]) -> (Tensor[(3, 5, 13), float32], float64, Tensor[(1280), float64], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1056), float64], Tensor[(5, 44), float32]) {
  @func_5149(%var_5151, %var_5152) /* ty=(Tensor[(3, 5, 13), float32], float64, Tensor[(1280), float64], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1056), float64], Tensor[(5, 44), float32]) */
}

def @func_1759(%var_1757: Tensor[(8, 11, 7), float32], %var_1758: Tensor[(8, 11, 7), float32]) -> (Tensor[(8, 11, 7), float32],) {
  @func_1755(%var_1757, %var_1758) /* ty=(Tensor[(8, 11, 7), float32],) */
}

def @func_6664(%var_6660: Tensor[(7, 2), float64], %var_6661: Tensor[(18, 42), int64], %var_6662: Tensor[(220), float32]) -> (Tensor[(6, 15, 1), float64], Tensor[(4, 4, 2), float64], Tensor[(32), float32], Tensor[(1078, 1), float32], Tensor[(24), float64], Tensor[(7, 2), float64], Tensor[(18, 42), int64], Tensor[(220), float32]) {
  %683 = cast(meta[relay.Constant][46] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %684 = cast(meta[relay.Constant][47] /* ty=Tensor[(1078, 1), float32] */, dtype="float32") /* ty=Tensor[(1078, 1), float32] */;
  %685 = cast(meta[relay.Constant][48] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %686 = cast(%var_6660, dtype="float64") /* ty=Tensor[(7, 2), float64] */;
  %687 = cast(%var_6661, dtype="int64") /* ty=Tensor[(18, 42), int64] */;
  %688 = cast(%var_6662, dtype="float32") /* ty=Tensor[(220), float32] */;
  %689 = reshape(%683, newshape=[4, 4, 2]) /* ty=Tensor[(4, 4, 2), float32] */;
  %690 = reshape(%684, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
  %691 = reshape(%685, newshape=[1, 24]) /* ty=Tensor[(1, 24), float64] */;
  %692 = reshape(%686, newshape=[14]) /* ty=Tensor[(14), float64] */;
  %693 = reshape(%687, newshape=[756]) /* ty=Tensor[(756), int64] */;
  %694 = reshape(%688, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %695 = @func_2548(%689, %690, %691, %692, %693, %694) /* ty=(Tensor[(1056), float64], Tensor[(1078), float32], Tensor[(1, 24), float64], Tensor[(14), float64], Tensor[(756), int64], Tensor[(220), float32], Tensor[(4, 4, 2), float64], Tensor[(10, 2, 11), float32], Tensor[(10, 2, 11), float32]) */;
  %696 = @func_6304() /* ty=Tensor[(6, 15, 1), float64] */;
  %697 = %695.6;
  (%696, %697, meta[relay.Constant][46] /* ty=Tensor[(32), float32] */, meta[relay.Constant][47] /* ty=Tensor[(1078, 1), float32] */, meta[relay.Constant][48] /* ty=Tensor[(24), float64] */, %var_6660, %var_6661, %var_6662)
}

def @func_4843(%var_4841: Tensor[(7, 1, 8), bool], %var_4842: Tensor[(7, 10, 8), bool]) -> (Tensor[(7, 13, 9), float32], Tensor[(819), float64], Tensor[(7, 10, 8), bool], Tensor[(7, 13, 9), float32]) {
  %712 = fn (%var_4819: Tensor[(7, 1, 8), bool], %var_4820: Tensor[(7, 10, 8), bool]) -> (Tensor[(7, 13, 9), float32], Tensor[(819), float64], Tensor[(7, 10, 8), bool], Tensor[(7, 13, 9), float32]) {
    %698 = cast(meta[relay.Constant][49] /* ty=Tensor[(819), float64] */, dtype="float64") /* ty=Tensor[(819), float64] */;
    %699 = reshape(%698, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), float64] */;
    %700 = cast(%var_4819, dtype="bool") /* ty=Tensor[(7, 1, 8), bool] */;
    %701 = cast(%var_4820, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
    %702 = logical_or(%700, %701) /* ty=Tensor[(7, 10, 8), bool] */;
    %703 = cast(meta[relay.Constant][50] /* ty=Tensor[(7, 10, 8), bool] */, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
    %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
    %705 = cast(%702, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
    %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %707 = @func_2829(%699) /* ty=Tensor[(7, 13, 9), float32] */;
    %708 = cast(%707, dtype="float64") /* ty=Tensor[(7, 13, 9), float64] */;
    %709 = reshape(%708, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), float64] */;
    %710 = less(%705, %706) /* ty=Tensor[(7, 10, 8), bool] */;
    %711 = @func_2829(%709) /* ty=Tensor[(7, 13, 9), float32] */;
    (%707, meta[relay.Constant][49] /* ty=Tensor[(819), float64] */, %710, %711)
  };
  %712(%var_4841, %var_4842) /* ty=(Tensor[(7, 13, 9), float32], Tensor[(819), float64], Tensor[(7, 10, 8), bool], Tensor[(7, 13, 9), float32]) */
}

def @func_7397(%var_7396: Tensor[(7, 13, 4), float64]) -> (Tensor[(7, 13, 4), int8],) {
  %720 = fn (%var_7388: Tensor[(7, 13, 4), float64]) -> (Tensor[(7, 13, 4), int8],) {
    %713 = @func_6746() /* ty=(Tensor[(7, 13, 4), float64], float64, float64, Tensor[(2, 528), float32]) */;
    %714 = %713.0;
    %715 = cast(%var_7388, dtype="int8") /* ty=Tensor[(7, 13, 4), int8] */;
    %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
    %717 = cast(%714, dtype="int8") /* ty=Tensor[(7, 13, 4), int8] */;
    %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %719 = bitwise_xor(%717, %718) /* ty=Tensor[(7, 13, 4), int8] */;
    (%719,)
  };
  %720(%var_7396) /* ty=(Tensor[(7, 13, 4), int8],) */
}

def @func_2829(%var_2797: Tensor[(7, 13, 9), float64]) -> Tensor[(7, 13, 9), float32] {
  %721 = cast(%var_2797, dtype="float64") /* ty=Tensor[(7, 13, 9), float64] */;
  %722 = sqrt(%721) /* ty=Tensor[(7, 13, 9), float64] */;
  %723 = cast(%722, dtype="float64") /* ty=Tensor[(7, 13, 9), float64] */;
  %724 = cosh(%723) /* ty=Tensor[(7, 13, 9), float64] */;
  %725 = cast(%724, dtype="float32") /* ty=Tensor[(7, 13, 9), float32] */;
  asin(%725) /* ty=Tensor[(7, 13, 9), float32] */
}

def @func_3506(%var_3500: Tensor[(11, 13, 5), uint8], %var_3501: Tensor[(11, 13, 5), uint8]) -> (Tensor[(11, 13, 5), bool],) {
  %726 = cast(%var_3501, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
  %727 = shape_of(%var_3500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%var_3500, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %730 = greater(%728, %729) /* ty=Tensor[(11, 13, 5), bool] */;
  (%730,)
}

def @func_3452(%var_3446: Tensor[(16, 10, 8), float64], %var_3447: Tensor[(66), float64], %var_3448: float64, %var_3449: Tensor[(14), float64], %var_3450: Tensor[(1056), float64], %var_3451: Tensor[(1, 220), float32]) -> (Tensor[(?, 2, 12), float32], Tensor[(12, 2), float64], Tensor[(?, 2, 12), bool], Tensor[(16, 10, 8), int16], Tensor[(16, 6, 11), bool], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1056), float64], Tensor[(1, 220), float32], Tensor[(8, 11, 7), float32], Tensor[(308, 2), float32]) {
  %766 = fn (%var_3389: Tensor[(16, 10, 8), float64], %var_3432: Tensor[(66), float64], %var_3433: float64, %var_3434: Tensor[(14), float64], %var_3435: Tensor[(1056), float64], %var_3436: Tensor[(1, 220), float32]) -> (Tensor[(?, 2, 12), float32], Tensor[(12, 2), float64], Tensor[(?, 2, 12), bool], Tensor[(16, 10, 8), int16], Tensor[(16, 6, 11), bool], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1056), float64], Tensor[(1, 220), float32], Tensor[(8, 11, 7), float32], Tensor[(308, 2), float32]) {
    %731 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
    %732 = reshape(%731, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
    %733 = @func_439(%732) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
    %734 = %733.1;
    %735 = cast(%734, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
    %736 = reshape(%735, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
    %737 = @func_439(%736) /* ty=(Tensor[(?, 2, 12), bool], Tensor[(?, 2, 12), float32]) */;
    %738 = cast(%var_3389, dtype="float64") /* ty=Tensor[(16, 10, 8), float64] */;
    %739 = cos(%738) /* ty=Tensor[(16, 10, 8), float64] */;
    %740 = cast(%var_3389, dtype="int16") /* ty=Tensor[(16, 10, 8), int16] */;
    %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
    %742 = cast(%739, dtype="int16") /* ty=Tensor[(16, 10, 8), int16] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %744 = cast(%var_3432, dtype="float64") /* ty=Tensor[(66), float64] */;
    %745 = cast(%var_3433, dtype="float64") /* ty=float64 */;
    %746 = cast(%var_3434, dtype="float64") /* ty=Tensor[(14), float64] */;
    %747 = cast(%734, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
    %748 = cast(%var_3435, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %749 = cast(%var_3436, dtype="float32") /* ty=Tensor[(1, 220), float32] */;
    %750 = reshape(%744, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float64] */;
    %751 = reshape(%745, newshape=[]) /* ty=float64 */;
    %752 = reshape(%746, newshape=[14, 1]) /* ty=Tensor[(14, 1), float64] */;
    %753 = reshape(%747, newshape=[6, 4]) /* ty=Tensor[(6, 4), float64] */;
    %754 = reshape(%748, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float64] */;
    %755 = reshape(%749, newshape=[220]) /* ty=Tensor[(220), float32] */;
    %756 = @func_1472(%750, %751, %752, %753, %754, %755) /* ty=(Tensor[(2, ?, 7), float32], float64, Tensor[(14, 1), float64], Tensor[(?, 2, 12), float32], Tensor[(6, 4), float64], Tensor[(?, 6, 11), uint32], Tensor[(16, 6, 11), bool], Tensor[(10, 2, 11), float32], Tensor[(220), float32]) */;
    %757 = cast(meta[relay.Constant][52] /* ty=Tensor[(308, 2), float32] */, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
    %758 = cast(meta[relay.Constant][52] /* ty=Tensor[(308, 2), float32] */, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
    %759 = reshape(%757, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
    %760 = reshape(%758, newshape=[8, 11, 7]) /* ty=Tensor[(8, 11, 7), float32] */;
    %761 = @func_1755(%759, %760) /* ty=(Tensor[(8, 11, 7), float32],) */;
    %762 = %737.0;
    %763 = bitwise_xor(%742, %743) /* ty=Tensor[(16, 10, 8), int16] */;
    %764 = %756.6;
    %765 = %761.0;
    (%734, meta[relay.Constant][51] /* ty=Tensor[(12, 2), float64] */, %762, %763, %764, %var_3432, %var_3433, %var_3434, %var_3435, %var_3436, %765, meta[relay.Constant][52] /* ty=Tensor[(308, 2), float32] */)
  };
  %766(%var_3446, %var_3447, %var_3448, %var_3449, %var_3450, %var_3451) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(12, 2), float64], Tensor[(?, 2, 12), bool], Tensor[(16, 10, 8), int16], Tensor[(16, 6, 11), bool], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1056), float64], Tensor[(1, 220), float32], Tensor[(8, 11, 7), float32], Tensor[(308, 2), float32]) */
}

def @func_6669(%var_6666: Tensor[(7, 2), float64], %var_6667: Tensor[(18, 42), int64], %var_6668: Tensor[(220), float32]) -> (Tensor[(6, 15, 1), float64], Tensor[(4, 4, 2), float64], Tensor[(32), float32], Tensor[(1078, 1), float32], Tensor[(24), float64], Tensor[(7, 2), float64], Tensor[(18, 42), int64], Tensor[(220), float32]) {
  @func_6664(%var_6666, %var_6667, %var_6668) /* ty=(Tensor[(6, 15, 1), float64], Tensor[(4, 4, 2), float64], Tensor[(32), float32], Tensor[(1078, 1), float32], Tensor[(24), float64], Tensor[(7, 2), float64], Tensor[(18, 42), int64], Tensor[(220), float32]) */
}

def @func_7059(%var_7058: Tensor[(1280), float64]) -> (float64, Tensor[(66), float64], Tensor[(1280), float64], Tensor[(195), float32]) {
  %777 = fn (%var_7046: Tensor[(1280), float64]) -> (float64, Tensor[(66), float64], Tensor[(1280), float64], Tensor[(195), float32]) {
    %767 = @func_6746() /* ty=(Tensor[(7, 13, 4), float64], float64, float64, Tensor[(2, 528), float32]) */;
    %768 = cast(meta[relay.Constant][53] /* ty=Tensor[(195), float32] */, dtype="float32") /* ty=Tensor[(195), float32] */;
    %769 = cast(%var_7046, dtype="float64") /* ty=Tensor[(1280), float64] */;
    %770 = reshape(%768, newshape=[3, 5, 13]) /* ty=Tensor[(3, 5, 13), float32] */;
    %771 = reshape(%769, newshape=[1280]) /* ty=Tensor[(1280), float64] */;
    %772 = @func_5149(%770, %771) /* ty=(Tensor[(3, 5, 13), float32], float64, Tensor[(1280), float64], Tensor[(66), float64], float64, Tensor[(14), float64], Tensor[(1056), float64], Tensor[(5, 44), float32]) */;
    %773 = cast(meta[relay.Constant][53] /* ty=Tensor[(195), float32] */, dtype="float32") /* ty=Tensor[(195), float32] */;
    %774 = %767.1;
    %775 = %772.3;
    %776 = cosh(%773) /* ty=Tensor[(195), float32] */;
    (%774, %775, %var_7046, %776)
  };
  %777(%var_7058) /* ty=(float64, Tensor[(66), float64], Tensor[(1280), float64], Tensor[(195), float32]) */
}

def @func_6637(%var_6633: Tensor[(3, 3), uint64], %var_6634: Tensor[(45), uint64], %var_6635: Tensor[(220), float32], %var_6636: Tensor[(1078, 9), float32]) -> (Tensor[(6, 15, 1), float64], Tensor[(3, 3), uint64], Tensor[(220), float32], Tensor[(1078, 9), bool], Tensor[(45), int32], Tensor[(1078, 1), float32]) {
  @func_6631(%var_6633, %var_6634, %var_6635, %var_6636) /* ty=(Tensor[(6, 15, 1), float64], Tensor[(3, 3), uint64], Tensor[(220), float32], Tensor[(1078, 9), bool], Tensor[(45), int32], Tensor[(1078, 1), float32]) */
}

def @func_7099() -> Tensor[(6, 15, 1), float64] {
  @func_6304() /* ty=Tensor[(6, 15, 1), float64] */
}

def @main(%var_7815: Tensor[(1, 12, 16), float64], %var_7816: Tensor[(9, 12, 16), float64]) -> (Tensor[(9, 12, 16), float32], Tensor[(9, 12, 16), float32], Tensor[(9, 12, 16), bool]) {
  %778 = cast(%var_7815, dtype="float32") /* ty=Tensor[(1, 12, 16), float32] */;
  %779 = cast(%var_7816, dtype="float32") /* ty=Tensor[(9, 12, 16), float32] */;
  %780 = cast(%var_7815, dtype="float64") /* ty=Tensor[(1, 12, 16), float64] */;
  %781 = cast(%var_7816, dtype="float64") /* ty=Tensor[(9, 12, 16), float64] */;
  %782 = floor_divide(%780, %781) /* ty=Tensor[(9, 12, 16), float64] */;
  %783 = cast(%782, dtype="float32") /* ty=Tensor[(9, 12, 16), float32] */;
  %784 = cast(%var_7816, dtype="bool") /* ty=Tensor[(9, 12, 16), bool] */;
  %785 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%782, dtype="bool") /* ty=Tensor[(9, 12, 16), bool] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %788 = mod(%778, %779) /* ty=Tensor[(9, 12, 16), float32] */;
  %789 = asinh(%783) /* ty=Tensor[(9, 12, 16), float32] */;
  %790 = less(%786, %787) /* ty=Tensor[(9, 12, 16), bool] */;
  (%788, %789, %790)
}

def @func_7620() -> (Tensor[(450), float64],) {
  %793 = fn () -> (Tensor[(450), float64],) {
    %791 = @func_7521() /* ty=(Tensor[(7, 13, 4), float64], Tensor[(15, 3, 10), float64], Tensor[(450), float64]) */;
    %792 = %791.2;
    (%792,)
  };
  %793() /* ty=(Tensor[(450), float64],) */
}

def @func_7431() -> (Tensor[(6, 15, 1), float64],) {
  %795 = fn () -> (Tensor[(6, 15, 1), float64],) {
    %794 = @func_7099() /* ty=Tensor[(6, 15, 1), float64] */;
    (%794,)
  };
  %795() /* ty=(Tensor[(6, 15, 1), float64],) */
}

def @func_5594(%var_5589: Tensor[(3, 3, 1), uint64], %var_5590: Tensor[(3, 3, 5), uint64], %var_5591: Tensor[(1, 220), float32], %var_5592: Tensor[(1078), float32], %var_5593: Tensor[(3, 3, 1), uint64]) -> (Tensor[(3, 3, 5), uint64], Tensor[(756), int64], Tensor[(448), uint32], Tensor[(1, 220), float32], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(3, 3, ?), bool]) {
  %816 = fn (%var_5554: Tensor[(3, 3, 1), uint64], %var_5555: Tensor[(3, 3, 5), uint64], %var_5574: Tensor[(1, 220), float32], %var_5575: Tensor[(1078), float32], %var_5584: Tensor[(3, 3, 1), uint64]) -> (Tensor[(3, 3, 5), uint64], Tensor[(756), int64], Tensor[(448), uint32], Tensor[(1, 220), float32], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(3, 3, ?), bool]) {
    %796 = cast(%var_5554, dtype="uint64") /* ty=Tensor[(3, 3, 1), uint64] */;
    %797 = cast(%var_5555, dtype="uint64") /* ty=Tensor[(3, 3, 5), uint64] */;
    %798 = cast(meta[relay.Constant][54] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
    %799 = cast(%var_5574, dtype="float32") /* ty=Tensor[(1, 220), float32] */;
    %800 = cast(%var_5575, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %801 = cast(-2.32376f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %802 = cast(meta[relay.Constant][55] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
    %803 = reshape(%798, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), uint32] */;
    %804 = reshape(%799, newshape=[220, 1]) /* ty=Tensor[(220, 1), float32] */;
    %805 = reshape(%800, newshape=[1078]) /* ty=Tensor[(1078), float32] */;
    %806 = reshape(%801, newshape=[]) /* ty=float64 */;
    %807 = reshape(%802, newshape=[14]) /* ty=Tensor[(14), float64] */;
    %808 = @func_5266(%803, %804, %805, %806, %807) /* ty=(Tensor[(14, 4, 8), uint32], Tensor[(14, 4, 8), uint16], Tensor[(11, 11, 11), float64], Tensor[(1056), float64], Tensor[(220, 1), float32], Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(7, 11, 14), int64], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(756), int64], Tensor[(14, 4, 8), float64], Tensor[(?, 2, 12), bool]) */;
    %809 = cast(%var_5584, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
    %810 = shape_of(%var_5554, dtype="int32") /* ty=Tensor[(3), int32] */;
    %811 = cast(%var_5554, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
    %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %813 = add(%796, %797) /* ty=Tensor[(3, 3, 5), uint64] */;
    %814 = %808.11;
    %815 = greater(%811, %812) /* ty=Tensor[(3, 3, ?), bool] */;
    (%813, %814, meta[relay.Constant][54] /* ty=Tensor[(448), uint32] */, %var_5574, %var_5575, -2.32376f64 /* ty=float64 */, meta[relay.Constant][55] /* ty=Tensor[(14), float64] */, %815)
  };
  %816(%var_5589, %var_5590, %var_5591, %var_5592, %var_5593) /* ty=(Tensor[(3, 3, 5), uint64], Tensor[(756), int64], Tensor[(448), uint32], Tensor[(1, 220), float32], Tensor[(1078), float32], float64, Tensor[(14), float64], Tensor[(3, 3, ?), bool]) */
}

def @func_1125(%var_1124: Tensor[(10, 2, 11), float32]) -> (Tensor[(10, 2, 11), float32],) {
  %822 = fn (%var_1114: Tensor[(10, 2, 11), float32]) -> (Tensor[(10, 2, 11), float32],) {
    %817 = cast(%var_1114, dtype="float32") /* ty=Tensor[(10, 2, 11), float32] */;
    %818 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(10, 2, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %819 = cast(meta[relay.Constant][56] /* ty=Tensor[(10, 2, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 11), float32] */;
    %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %821 = floor_mod(%819, %820) /* ty=Tensor[(10, 2, 11), float32] */;
    (%821,)
  };
  %822(%var_1124) /* ty=(Tensor[(10, 2, 11), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen457/build/output.py:1308: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen457/build/output.py", line 1313, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_cast_cast_reshape_less_kernel0(signed char* __restrict__ T_less, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 108) {
    if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1728) {
      T_less[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = ((signed char)(((bool)placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]) < ((bool)placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))])));
    }
  }
}

extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_cast_cast_mod_kernel0(float* __restrict__ T_mod, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 108) {
    if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1728) {
      T_mod[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = fmodf(((float)placeholder[((((((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) % 12) * 16) + (((int)threadIdx.x) & 15)))]), ((float)placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]));
    }
  }
}

extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_floor_divide_kernel0(double* __restrict__ T_floor_divide, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 108) {
    if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1728) {
      T_floor_divide[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = floor((placeholder[((((((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) % 12) * 16) + (((int)threadIdx.x) & 15)))] / placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]));
    }
  }
}

extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_cast_asinh_kernel0(float* __restrict__ T_asinh, double* __restrict__ placeholder) {
  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 108) {
    if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1728) {
      T_asinh[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = asinhf(((float)placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]));
    }
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

