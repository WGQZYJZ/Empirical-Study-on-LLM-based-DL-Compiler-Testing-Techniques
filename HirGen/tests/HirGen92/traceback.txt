==========mod==========
#[version = "0.0.5"]
def @func_3368(%var_3358: Tensor[(1, 11, 3), uint64], %var_3359: Tensor[(3, 11, 3), uint64]) -> Tensor[(3, 11, 3), uint64] {
  %0 = cast(%var_3358, dtype="uint64") /* ty=Tensor[(1, 11, 3), uint64] */;
  %1 = cast(%var_3359, dtype="uint64") /* ty=Tensor[(3, 11, 3), uint64] */;
  minimum(%0, %1) /* ty=Tensor[(3, 11, 3), uint64] */
}

def @func_4821() -> Tensor[(15, 4, 16), float32] {
  %2 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %2.0
}

def @func_1380(%var_1350: Tensor[(11, 13, 11), float32], %var_1351: Tensor[(11, 13, 11), float32], %var_1373: Tensor[(14, 3), float64]) -> (Tensor[(11, 13, 11), float32], Tensor[(30), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(11, 13, 7), int16], Tensor[(1001, 1), float64], Tensor[(14, 3), float64], Tensor[(11, 13, 11), float64]) {
  %3 = cast(%var_1351, dtype="float32") /* ty=Tensor[(11, 13, 11), float32] */;
  %4 = shape_of(%var_1350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_1350, dtype="float32") /* ty=Tensor[(11, 13, 11), float32] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(441), float32] */, dtype="float32") /* ty=Tensor[(441), float32] */;
  %9 = reshape(%7, newshape=[15, 2, 11]) /* ty=Tensor[(15, 2, 11), float64] */;
  %10 = reshape(%8, newshape=[441]) /* ty=Tensor[(441), float32] */;
  %11 = @func_961(%9, %10) /* ty=(Tensor[(15, 2, 11), float64], Tensor[(7, 9, 7), float64], Tensor[(441), float32], Tensor[(7, 9, 7), bool], Tensor[(2, 15), bool], Tensor[(30), bool]) */;
  %12 = cast(meta[relay.Constant][2] /* ty=Tensor[(1001, 1), float64] */, dtype="float64") /* ty=Tensor[(1001, 1), float64] */;
  %13 = cast(%var_1373, dtype="float64") /* ty=Tensor[(14, 3), float64] */;
  %14 = reshape(%12, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
  %15 = reshape(%13, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %16 = @func_564(%14, %15) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(36), int16], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), int16], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(12, 3, 1), float32]) */;
  %17 = cast(%var_1351, dtype="float64") /* ty=Tensor[(11, 13, 11), float64] */;
  %18 = divide(%5, %6) /* ty=Tensor[(11, 13, 11), float32] */;
  %19 = %11.5;
  %20 = %16.4;
  %21 = sinh(%17) /* ty=Tensor[(11, 13, 11), float64] */;
  (%18, %19, meta[relay.Constant][0] /* ty=Tensor[(330), float64] */, meta[relay.Constant][1] /* ty=Tensor[(441), float32] */, %20, meta[relay.Constant][2] /* ty=Tensor[(1001, 1), float64] */, %var_1373, %21)
}

def @func_1747() -> Tensor[(15, 4, 16), float32] {
  %22 = @func_1598() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %22.0
}

def @func_1580() -> (Tensor[(15, 4, 16), float32],) {
  %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 4, 16), float64] */;
  %24 = cosh(%23) /* ty=Tensor[(15, 4, 16), float64] */;
  %25 = cast(%24, dtype="float32") /* ty=Tensor[(15, 4, 16), float32] */;
  %26 = asinh(%25) /* ty=Tensor[(15, 4, 16), float32] */;
  (%26,)
}

def @func_3252(%var_3208: float64, %var_3209: Tensor[(16, 15, 14), float64]) -> (Tensor[(16, 15, 14), float64], Tensor[(16, 15, 14), int32]) {
  %27 = cast(%var_3209, dtype="float32") /* ty=Tensor[(16, 15, 14), float32] */;
  %28 = atan(%27) /* ty=Tensor[(16, 15, 14), float32] */;
  %29 = cast(%28, dtype="float32") /* ty=Tensor[(16, 15, 14), float32] */;
  %30 = tan(%29) /* ty=Tensor[(16, 15, 14), float32] */;
  %31 = cast(%30, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
  %32 = cast(%var_3208, dtype="float64") /* ty=float64 */;
  %33 = cast(%var_3209, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
  %34 = power(%32, %33) /* ty=Tensor[(16, 15, 14), float64] */;
  %35 = cast(%34, dtype="int32") /* ty=Tensor[(16, 15, 14), int32] */;
  %36 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%30, dtype="int32") /* ty=Tensor[(16, 15, 14), int32] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %39 = sigmoid(%31) /* ty=Tensor[(16, 15, 14), float64] */;
  %40 = bitwise_or(%37, %38) /* ty=Tensor[(16, 15, 14), int32] */;
  (%39, %40)
}

def @func_1905() -> (Tensor[(15, 4, 16), float32], int16, Tensor[(1001), float64], Tensor[(7, 6), float64]) {
  %41 = cast(meta[relay.Constant][4] /* ty=Tensor[(1001), float64] */, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %42 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
  %43 = reshape(%41, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
  %44 = reshape(%42, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %45 = @func_564(%43, %44) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(36), int16], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), int16], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(12, 3, 1), float32]) */;
  %46 = @func_1747() /* ty=Tensor[(15, 4, 16), float32] */;
  %47 = %45.1;
  (%46, %47, meta[relay.Constant][4] /* ty=Tensor[(1001), float64] */, meta[relay.Constant][5] /* ty=Tensor[(7, 6), float64] */)
}

def @func_4010() -> (Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool]) {
  %48 = @func_2798() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %49 = @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %50 = %48.0;
  %51 = %49.0;
  (%50, %51)
}

def @func_2014() -> Tensor[(10, 2, 14), bool] {
  %52 = @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %52.0
}

def @func_2236(%var_2227: Tensor[(15, 4, 16), float32]) -> Tensor[(15, 4, 16), bool] {
  %53 = @func_1747() /* ty=Tensor[(15, 4, 16), float32] */;
  %54 = cast(%var_2227, dtype="bool") /* ty=Tensor[(15, 4, 16), bool] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="bool") /* ty=Tensor[(15, 4, 16), bool] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%56, %57) /* ty=Tensor[(15, 4, 16), bool] */
}

def @func_1412() -> (Tensor[(10, 2, 14), bool],) {
  %58 = @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %59 = %58.0;
  (%59,)
}

def @func_2378() -> (Tensor[(15, 4, 16), float32],) {
  %60 = @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */;
  %61 = %60.2;
  (%61,)
}

def @func_4591(%var_4579: Tensor[(10, 2, 14), bool]) -> Tensor[(10, 2, 14), uint32] {
  %62 = @func_4393() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %63 = %62.0;
  %64 = cast(%var_4579, dtype="uint32") /* ty=Tensor[(10, 2, 14), uint32] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%63, dtype="uint32") /* ty=Tensor[(10, 2, 14), uint32] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%66, %67) /* ty=Tensor[(10, 2, 14), uint32] */
}

def @func_4803(%var_4764: Tensor[(11, 5, 8), float32], %var_4780: Tensor[(42), float64]) -> (Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(11, 5, 8), float32]) {
  %68 = cast(%var_4780, dtype="float64") /* ty=Tensor[(42), float64] */;
  %69 = reshape(%68, newshape=[2, 7, 3]) /* ty=Tensor[(2, 7, 3), float64] */;
  %70 = @func_292(%69) /* ty=(Tensor[(2, 7, 3), float64],) */;
  %71 = cast(%var_4764, dtype="float32") /* ty=Tensor[(11, 5, 8), float32] */;
  %72 = log(%71) /* ty=Tensor[(11, 5, 8), float32] */;
  %73 = cast(%var_4764, dtype="uint8") /* ty=Tensor[(11, 5, 8), uint8] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="uint8") /* ty=Tensor[(11, 5, 8), uint8] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %77 = left_shift(%75, %76) /* ty=Tensor[(11, 5, 8), uint8] */;
  %78 = cast(%77, dtype="float32") /* ty=Tensor[(11, 5, 8), float32] */;
  %79 = %70.0;
  %80 = log10(%78) /* ty=Tensor[(11, 5, 8), float32] */;
  (%79, %var_4780, %80)
}

def @func_3308(%var_3268: int16, %var_3269: Tensor[(36), int16]) -> (Tensor[(10, 2, 14), bool], int16, Tensor[(36), int16], Tensor[(12, 3, 1), int16], Tensor[(15, 4, 16), float32], Tensor[(12, 3, 1), float64]) {
  %81 = @func_2109() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) */;
  %82 = cast(%var_3268, dtype="int16") /* ty=int16 */;
  %83 = cast(%var_3268, dtype="int16") /* ty=int16 */;
  %84 = cast(%var_3269, dtype="int16") /* ty=Tensor[(36), int16] */;
  %85 = reshape(%83, newshape=[]) /* ty=int16 */;
  %86 = reshape(%84, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int16] */;
  %87 = @func_377(%85, %86) /* ty=(Tensor[(12, 3, 1), int16],) */;
  %88 = %87.0;
  %89 = cast(%88, dtype="int16") /* ty=Tensor[(12, 3, 1), int16] */;
  %90 = reshape(%82, newshape=[]) /* ty=int16 */;
  %91 = reshape(%89, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int16] */;
  %92 = @func_377(%90, %91) /* ty=(Tensor[(12, 3, 1), int16],) */;
  %93 = @func_2412() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %94 = cast(%88, dtype="float64") /* ty=Tensor[(12, 3, 1), float64] */;
  %95 = %81.1;
  %96 = %92.0;
  %97 = %93.0;
  %98 = asin(%94) /* ty=Tensor[(12, 3, 1), float64] */;
  (%95, %var_3268, %var_3269, %96, %97, %98)
}

def @func_2680() -> (Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool]) {
  %99 = @func_1412() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %100 = %99.0;
  %101 = @func_1654() /* ty=Tensor[(10, 2, 14), bool] */;
  (%100, %101)
}

def @func_3974(%var_3934: Tensor[(8, 13, 1), int8], %var_3935: Tensor[(8, 13, 2), int8], %var_3939: Tensor[(8, 13, 2), int8]) -> (Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), float32], Tensor[(8, 13, 2), float64]) {
  %102 = @func_2870() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(10, 2, 14), float32]) */;
  %103 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %104 = cast(%var_3934, dtype="float32") /* ty=Tensor[(8, 13, 1), float32] */;
  %105 = tan(%104) /* ty=Tensor[(8, 13, 1), float32] */;
  %106 = cast(%var_3934, dtype="int8") /* ty=Tensor[(8, 13, 1), int8] */;
  %107 = cast(%var_3935, dtype="int8") /* ty=Tensor[(8, 13, 2), int8] */;
  %108 = left_shift(%106, %107) /* ty=Tensor[(8, 13, 2), int8] */;
  %109 = cast(%var_3939, dtype="float32") /* ty=Tensor[(8, 13, 2), float32] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="float32") /* ty=Tensor[(8, 13, 2), float32] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %113 = divide(%111, %112) /* ty=Tensor[(8, 13, 2), float32] */;
  %114 = cast(%105, dtype="int64") /* ty=Tensor[(8, 13, 1), int64] */;
  %115 = cast(%113, dtype="int64") /* ty=Tensor[(8, 13, 2), int64] */;
  %116 = logical_xor(%114, %115) /* ty=Tensor[(8, 13, 2), int64] */;
  %117 = cast(%116, dtype="float64") /* ty=Tensor[(8, 13, 2), float64] */;
  %118 = %102.0;
  %119 = %103.0;
  %120 = sin(%117) /* ty=Tensor[(8, 13, 2), float64] */;
  (%118, %119, %120)
}

def @func_2991(%var_2942: Tensor[(10, 2, 14), bool]) -> (Tensor[(10, 2, 14), float64], Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool]) {
  %121 = @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %122 = %121.0;
  %123 = cast(%var_2942, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %127 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 2, 14), bool] */, dtype="bool") /* ty=Tensor[(10, 2, 14), bool] */;
  %128 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%122, dtype="bool") /* ty=Tensor[(10, 2, 14), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %131 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %132 = mod(%125, %126) /* ty=Tensor[(10, 2, 14), float64] */;
  %133 = greater_equal(%129, %130) /* ty=Tensor[(10, 2, 14), bool] */;
  %134 = %131.0;
  (%132, %133, %134)
}

def @func_5739(%var_5708: Tensor[(10, 2, 14), float32], %var_5720: Tensor[(45), float32]) -> (Tensor[(10, 2, 14), int32], Tensor[(45), float32], Tensor[(3, 1, 15), float64]) {
  %135 = @func_2870() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(10, 2, 14), float32]) */;
  %136 = %135.3;
  %137 = cast(%var_5708, dtype="int32") /* ty=Tensor[(10, 2, 14), int32] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="int32") /* ty=Tensor[(10, 2, 14), int32] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %141 = cast(%var_5720, dtype="float32") /* ty=Tensor[(45), float32] */;
  %142 = reshape(%141, newshape=[3, 1, 15]) /* ty=Tensor[(3, 1, 15), float32] */;
  %143 = @func_3776(%142) /* ty=Tensor[(3, 1, 15), float32] */;
  %144 = cast(%143, dtype="float64") /* ty=Tensor[(3, 1, 15), float64] */;
  %145 = multiply(%139, %140) /* ty=Tensor[(10, 2, 14), int32] */;
  %146 = cos(%144) /* ty=Tensor[(3, 1, 15), float64] */;
  (%145, %var_5720, %146)
}

def @func_3733() -> (Tensor[(10, 2, 14), bool],) {
  %147 = @func_2680() /* ty=(Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool]) */;
  %148 = %147.0;
  (%148,)
}

def @func_1112(%var_1075: Tensor[(264), uint16]) -> (Tensor[(11, 13, 7), bool], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), float64]) {
  %149 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %150 = cast(%var_1075, dtype="uint16") /* ty=Tensor[(264), uint16] */;
  %151 = reshape(%150, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), uint16] */;
  %152 = @func_594(%151) /* ty=(Tensor[(12, 2, 11), uint16], Tensor[(12, 2, 11), float64]) */;
  %153 = @func_1034() /* ty=(Tensor[(11, 13, 7), float64],) */;
  %154 = %149.0;
  %155 = %152.1;
  %156 = %153.0;
  (%154, %155, %var_1075, %156)
}

def @func_1654() -> Tensor[(10, 2, 14), bool] {
  %157 = @func_1249() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %157.0
}

def @func_5457(%var_5428: float64, %var_5429: Tensor[(6, 10, 11), float64]) -> (Tensor[(6, 10, 11), float64], Tensor[(6, 10, 11), uint16]) {
  %158 = cast(%var_5428, dtype="float64") /* ty=float64 */;
  %159 = cast(%var_5429, dtype="float64") /* ty=Tensor[(6, 10, 11), float64] */;
  %160 = cast(%var_5428, dtype="uint16") /* ty=uint16 */;
  %161 = cast(%var_5429, dtype="uint16") /* ty=Tensor[(6, 10, 11), uint16] */;
  %162 = divide(%158, %159) /* ty=Tensor[(6, 10, 11), float64] */;
  %163 = add(%160, %161) /* ty=Tensor[(6, 10, 11), uint16] */;
  (%162, %163)
}

def @func_1140() -> (Tensor[(10, 2, 14), bool],) {
  %164 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 2, 14), uint16] */, dtype="uint16") /* ty=Tensor[(10, 2, 14), uint16] */;
  %165 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(10, 2, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 2, 14), uint16] */, dtype="uint16") /* ty=Tensor[(10, 2, 14), uint16] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %168 = add(%166, %167) /* ty=Tensor[(10, 2, 14), uint16] */;
  %169 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 2, 14), uint16] */, dtype="bool") /* ty=Tensor[(10, 2, 14), bool] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="bool") /* ty=Tensor[(10, 2, 14), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %173 = greater(%171, %172) /* ty=Tensor[(10, 2, 14), bool] */;
  (%173,)
}

def @func_4157(%var_4102: float64, %var_4103: Tensor[(9, 13, 6), float64]) -> (Tensor[(11, 13, 7), float64], Tensor[(9, 13, 6), int32], Tensor[(9, 13, 6), float64]) {
  %174 = @func_1497() /* ty=(Tensor[(11, 13, 7), float64],) */;
  %175 = cast(%var_4103, dtype="int32") /* ty=Tensor[(9, 13, 6), int32] */;
  %176 = cast(%var_4102, dtype="int32") /* ty=int32 */;
  %177 = cast(%var_4102, dtype="bool") /* ty=bool */;
  %178 = cast(%var_4103, dtype="bool") /* ty=Tensor[(9, 13, 6), bool] */;
  %179 = greater(%177, %178) /* ty=Tensor[(9, 13, 6), bool] */;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(9, 13, 6), float64] */;
  %181 = tan(%180) /* ty=Tensor[(9, 13, 6), float64] */;
  %182 = cast(%179, dtype="bool") /* ty=Tensor[(9, 13, 6), bool] */;
  %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%181, dtype="bool") /* ty=Tensor[(9, 13, 6), bool] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %186 = not_equal(%184, %185) /* ty=Tensor[(9, 13, 6), bool] */;
  %187 = cast(%186, dtype="float64") /* ty=Tensor[(9, 13, 6), float64] */;
  %188 = %174.0;
  %189 = bitwise_and(%175, %176) /* ty=Tensor[(9, 13, 6), int32] */;
  %190 = atan(%187) /* ty=Tensor[(9, 13, 6), float64] */;
  (%188, %189, %190)
}

def @func_2207() -> (Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) {
  %191 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %192 = cast(meta[relay.Constant][9] /* ty=Tensor[(264), uint16] */, dtype="uint16") /* ty=Tensor[(264), uint16] */;
  %193 = reshape(%192, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), uint16] */;
  %194 = @func_594(%193) /* ty=(Tensor[(12, 2, 11), uint16], Tensor[(12, 2, 11), float64]) */;
  %195 = @func_2109() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) */;
  %196 = %191.0;
  %197 = @func_1461() /* ty=Tensor[(10, 2, 14), float32] */;
  %198 = @func_1747() /* ty=Tensor[(15, 4, 16), float32] */;
  %199 = %194.1;
  %200 = %195.0;
  (%196, %197, %198, %199, meta[relay.Constant][9] /* ty=Tensor[(264), uint16] */, %200)
}

def @func_4275() -> (Tensor[(10, 2, 14), bool],) {
  %201 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %202 = %201.0;
  (%202,)
}

def @func_4923(%var_4903: Tensor[(224), uint8], %var_4904: Tensor[(1001), bool]) -> (Tensor[(15, 4, 16), float32], Tensor[(8, 14, 2), uint8], Tensor[(224), uint8], Tensor[(1001), bool], Tensor[(15, 4, 16), float32]) {
  %203 = @func_2798() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %204 = cast(%var_4903, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %205 = cast(%var_4903, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %206 = cast(%var_4904, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %207 = reshape(%204, newshape=[8, 14, 2]) /* ty=Tensor[(8, 14, 2), uint8] */;
  %208 = reshape(%205, newshape=[8, 14, 2]) /* ty=Tensor[(8, 14, 2), uint8] */;
  %209 = reshape(%206, newshape=[13, 77]) /* ty=Tensor[(13, 77), bool] */;
  %210 = @func_2519(%207, %208, %209) /* ty=(Tensor[(8, 14, 2), uint8], Tensor[(11, 13, 7), bool], Tensor[(13, 77), bool], Tensor[(8, 14, 2), float32], Tensor[(12, 2, 11), float64]) */;
  %211 = @func_2648() /* ty=(Tensor[(10, 2, 14), float64], Tensor[(11, 13, 7), float32], Tensor[(1001), bool], Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), float64]) */;
  %212 = %203.0;
  %213 = %210.0;
  %214 = %211.3;
  (%212, %213, %var_4903, %var_4904, %214)
}

def @func_1598() -> (Tensor[(15, 4, 16), float32],) {
  %215 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %216 = %215.0;
  (%216,)
}

def @func_2344(%var_2329: Tensor[(15, 4, 16), float32]) -> (Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), bool], Tensor[(15, 4, 16), float32]) {
  %217 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %218 = @func_1598() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %219 = %218.0;
  %220 = cast(%var_2329, dtype="bool") /* ty=Tensor[(15, 4, 16), bool] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%219, dtype="bool") /* ty=Tensor[(15, 4, 16), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %224 = cast(%219, dtype="float32") /* ty=Tensor[(15, 4, 16), float32] */;
  %225 = %217.0;
  %226 = greater(%222, %223) /* ty=Tensor[(15, 4, 16), bool] */;
  %227 = asin(%224) /* ty=Tensor[(15, 4, 16), float32] */;
  (%225, %226, %227)
}

def @func_1435() -> Tensor[(10, 2, 14), bool] {
  %228 = @func_1412() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %228.0
}

def @func_671(%var_633: Tensor[(264), uint16], %var_637: int16) -> (Tensor[(12, 3, 1), int16], int16, Tensor[(18, 2), int16], Tensor[(12, 2, 11), uint16], Tensor[(11, 13, 7), float64], Tensor[(2, 7, 3), float64], Tensor[(42), float64]) {
  %229 = cast(%var_637, dtype="int16") /* ty=int16 */;
  %230 = cast(meta[relay.Constant][10] /* ty=Tensor[(18, 2), int16] */, dtype="int16") /* ty=Tensor[(18, 2), int16] */;
  %231 = reshape(%229, newshape=[]) /* ty=int16 */;
  %232 = reshape(%230, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int16] */;
  %233 = @func_377(%231, %232) /* ty=(Tensor[(12, 3, 1), int16],) */;
  %234 = cast(%var_633, dtype="uint16") /* ty=Tensor[(264), uint16] */;
  %235 = reshape(%234, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), uint16] */;
  %236 = @func_594(%235) /* ty=(Tensor[(12, 2, 11), uint16], Tensor[(12, 2, 11), float64]) */;
  %237 = %236.1;
  %238 = cast(%var_633, dtype="uint16") /* ty=Tensor[(264), uint16] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="uint16") /* ty=Tensor[(12, 2, 11), uint16] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %242 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %243 = %242.0;
  %244 = cast(%243, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  %245 = cast(meta[relay.Constant][11] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %246 = reshape(%245, newshape=[2, 7, 3]) /* ty=Tensor[(2, 7, 3), float64] */;
  %247 = @func_292(%246) /* ty=(Tensor[(2, 7, 3), float64],) */;
  %248 = %233.0;
  %249 = minimum(%240, %241) /* ty=Tensor[(12, 2, 11), uint16] */;
  %250 = log10(%244) /* ty=Tensor[(11, 13, 7), float64] */;
  %251 = %247.0;
  (%248, %var_637, meta[relay.Constant][10] /* ty=Tensor[(18, 2), int16] */, %249, %250, %251, meta[relay.Constant][11] /* ty=Tensor[(42), float64] */)
}

def @func_3448(%var_3440: Tensor[(15, 4, 16), float32]) -> (Tensor[(15, 4, 16), bool],) {
  %252 = @func_2395() /* ty=Tensor[(15, 4, 16), float32] */;
  %253 = cast(%var_3440, dtype="bool") /* ty=Tensor[(15, 4, 16), bool] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="bool") /* ty=Tensor[(15, 4, 16), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = less(%255, %256) /* ty=Tensor[(15, 4, 16), bool] */;
  (%257,)
}

def @func_3914(%var_3860: Tensor[(330), float64]) -> (Tensor[(15, 4, 16), float32], Tensor[(36), int16], Tensor[(330), float64], Tensor[(7, 9, 7), float32], Tensor[(36), int16]) {
  %258 = @func_3544() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), float64]) */;
  %259 = cast(meta[relay.Constant][12] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %260 = cast(meta[relay.Constant][13] /* ty=Tensor[(36), int16] */, dtype="int16") /* ty=Tensor[(36), int16] */;
  %261 = reshape(%259, newshape=[]) /* ty=int16 */;
  %262 = reshape(%260, newshape=[36]) /* ty=Tensor[(36), int16] */;
  %263 = @func_3308(%261, %262) /* ty=(Tensor[(10, 2, 14), bool], int16, Tensor[(36), int16], Tensor[(12, 3, 1), int16], Tensor[(15, 4, 16), float32], Tensor[(12, 3, 1), float64]) */;
  %264 = cast(%var_3860, dtype="float64") /* ty=Tensor[(330), float64] */;
  %265 = reshape(%264, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %266 = @func_1848(%265) /* ty=(Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(7, 9, 7), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(10, 2, 14), float64]) */;
  %267 = %266.2;
  %268 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 9, 7), bool] */, dtype="float32") /* ty=Tensor[(7, 9, 7), float32] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="float32") /* ty=Tensor[(7, 9, 7), float32] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %272 = cast(meta[relay.Constant][13] /* ty=Tensor[(36), int16] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %273 = cast(meta[relay.Constant][12] /* ty=int16 */, dtype="float32") /* ty=float32 */;
  %274 = floor_mod(%272, %273) /* ty=Tensor[(36), float32] */;
  %275 = cast(%274, dtype="float64") /* ty=Tensor[(36), float64] */;
  %276 = sinh(%275) /* ty=Tensor[(36), float64] */;
  %277 = cast(%276, dtype="int16") /* ty=Tensor[(36), int16] */;
  %278 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(36), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %279 = cast(meta[relay.Constant][13] /* ty=Tensor[(36), int16] */, dtype="int16") /* ty=Tensor[(36), int16] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?), int16] */;
  %281 = %258.0;
  %282 = %263.2;
  %283 = floor_mod(%270, %271) /* ty=Tensor[(7, 9, 7), float32] */;
  %284 = add(%279, %280) /* ty=Tensor[(36), int16] */;
  (%281, %282, %var_3860, %283, %284)
}

def @func_1848(%var_1832: Tensor[(330), float64]) -> (Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(7, 9, 7), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(10, 2, 14), float64]) {
  %285 = cast(meta[relay.Constant][15] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %286 = reshape(%285, newshape=[2, 7, 3]) /* ty=Tensor[(2, 7, 3), float64] */;
  %287 = @func_292(%286) /* ty=(Tensor[(2, 7, 3), float64],) */;
  %288 = cast(%var_1832, dtype="float64") /* ty=Tensor[(330), float64] */;
  %289 = cast(meta[relay.Constant][16] /* ty=Tensor[(441), float32] */, dtype="float32") /* ty=Tensor[(441), float32] */;
  %290 = reshape(%288, newshape=[15, 2, 11]) /* ty=Tensor[(15, 2, 11), float64] */;
  %291 = reshape(%289, newshape=[441]) /* ty=Tensor[(441), float32] */;
  %292 = @func_961(%290, %291) /* ty=(Tensor[(15, 2, 11), float64], Tensor[(7, 9, 7), float64], Tensor[(441), float32], Tensor[(7, 9, 7), bool], Tensor[(2, 15), bool], Tensor[(30), bool]) */;
  %293 = @func_1654() /* ty=Tensor[(10, 2, 14), bool] */;
  %294 = cast(%293, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
  %295 = asin(%294) /* ty=Tensor[(10, 2, 14), float32] */;
  %296 = cast(%295, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
  %297 = rsqrt(%296) /* ty=Tensor[(10, 2, 14), float32] */;
  %298 = cast(%295, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %302 = %287.0;
  %303 = %292.3;
  %304 = power(%300, %301) /* ty=Tensor[(10, 2, 14), float64] */;
  (%302, meta[relay.Constant][15] /* ty=Tensor[(42), float64] */, %303, %var_1832, meta[relay.Constant][16] /* ty=Tensor[(441), float32] */, %304)
}

def @func_3166() -> Tensor[(15, 4, 16), float32] {
  %305 = @func_1598() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %305.0
}

def @func_4030() -> (Tensor[(11, 13, 7), bool],) {
  %306 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %307 = %306.0;
  (%307,)
}

def @func_4094(%var_4075: Tensor[(224), uint8], %var_4076: Tensor[(1001), bool], %var_4091: Tensor[(960), float32], %var_4092: Tensor[(42), float64]) -> (Tensor[(8, 14, 2), float32], Tensor[(224), uint8], Tensor[(1001), bool], Tensor[(10, 2, 14), bool], Tensor[(960), float32], Tensor[(175, 2), uint8], Tensor[(960), float32], Tensor[(42), float64]) {
  %308 = cast(%var_4075, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %309 = cast(%var_4075, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %310 = cast(%var_4076, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %311 = reshape(%308, newshape=[8, 14, 2]) /* ty=Tensor[(8, 14, 2), uint8] */;
  %312 = reshape(%309, newshape=[8, 14, 2]) /* ty=Tensor[(8, 14, 2), uint8] */;
  %313 = reshape(%310, newshape=[13, 77]) /* ty=Tensor[(13, 77), bool] */;
  %314 = @func_2519(%311, %312, %313) /* ty=(Tensor[(8, 14, 2), uint8], Tensor[(11, 13, 7), bool], Tensor[(13, 77), bool], Tensor[(8, 14, 2), float32], Tensor[(12, 2, 11), float64]) */;
  %315 = @func_1435() /* ty=Tensor[(10, 2, 14), bool] */;
  %316 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 2, 14), bool] */, dtype="bool") /* ty=Tensor[(10, 2, 14), bool] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="bool") /* ty=Tensor[(10, 2, 14), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = cast(meta[relay.Constant][18] /* ty=Tensor[(175, 2), uint8] */, dtype="uint8") /* ty=Tensor[(175, 2), uint8] */;
  %321 = cast(meta[relay.Constant][18] /* ty=Tensor[(175, 2), uint8] */, dtype="uint8") /* ty=Tensor[(175, 2), uint8] */;
  %322 = cast(%var_4091, dtype="float32") /* ty=Tensor[(960), float32] */;
  %323 = cast(%var_4092, dtype="float64") /* ty=Tensor[(42), float64] */;
  %324 = reshape(%320, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), uint8] */;
  %325 = reshape(%321, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), uint8] */;
  %326 = reshape(%322, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %327 = reshape(%323, newshape=[42, 1]) /* ty=Tensor[(42, 1), float64] */;
  %328 = @func_2928(%324, %325, %326, %327) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(7, 10, 5), float32], Tensor[(15, 4, 16), bool], Tensor[(42), float64], Tensor[(1, 1001), float64], Tensor[(42, 1), float64]) */;
  %329 = %314.3;
  %330 = less(%318, %319) /* ty=Tensor[(10, 2, 14), bool] */;
  %331 = %328.1;
  (%329, %var_4075, %var_4076, %330, %331, meta[relay.Constant][18] /* ty=Tensor[(175, 2), uint8] */, %var_4091, %var_4092)
}

def @func_2395() -> Tensor[(15, 4, 16), float32] {
  %332 = @func_2378() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %332.0
}

def @func_292(%var_272: Tensor[(2, 7, 3), float64]) -> (Tensor[(2, 7, 3), float64],) {
  %333 = cast(%var_272, dtype="float64") /* ty=Tensor[(2, 7, 3), float64] */;
  %334 = cosh(%333) /* ty=Tensor[(2, 7, 3), float64] */;
  (%334,)
}

def @func_2109() -> (Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) {
  %335 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %336 = %335.0;
  %337 = @func_1654() /* ty=Tensor[(10, 2, 14), bool] */;
  (%336, %337)
}

def @func_2759() -> (Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64]) {
  %338 = @func_1598() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %339 = @func_1034() /* ty=(Tensor[(11, 13, 7), float64],) */;
  %340 = %338.0;
  %341 = @func_1435() /* ty=Tensor[(10, 2, 14), bool] */;
  %342 = %339.0;
  (%340, %341, %342)
}

def @func_3776(%var_3771: Tensor[(3, 1, 15), float32]) -> Tensor[(3, 1, 15), float32] {
  %343 = cast(%var_3771, dtype="float32") /* ty=Tensor[(3, 1, 15), float32] */;
  tan(%343) /* ty=Tensor[(3, 1, 15), float32] */
}

def @func_3602() -> (Tensor[(42), float64], Tensor[(15, 4, 16), float32], Tensor[(11, 13, 11), uint8]) {
  %344 = @func_2870() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(10, 2, 14), float32]) */;
  %345 = @func_2412() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %346 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 1573), float32] */, dtype="float32") /* ty=Tensor[(1, 1573), float32] */;
  %347 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 1573), float32] */, dtype="float32") /* ty=Tensor[(1, 1573), float32] */;
  %348 = %344.2;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(42), float64] */;
  %350 = reshape(%346, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %351 = reshape(%347, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %352 = reshape(%349, newshape=[14, 3]) /* ty=Tensor[(14, 3), float64] */;
  %353 = @func_1380(%350, %351, %352) /* ty=(Tensor[(11, 13, 11), float32], Tensor[(30), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(11, 13, 7), int16], Tensor[(1001, 1), float64], Tensor[(14, 3), float64], Tensor[(11, 13, 11), float64]) */;
  %354 = %353.0;
  %355 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 1573), float32] */, dtype="uint8") /* ty=Tensor[(1, 1573), uint8] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%354, dtype="uint8") /* ty=Tensor[(11, 13, 11), uint8] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %359 = %345.0;
  %360 = minimum(%357, %358) /* ty=Tensor[(11, 13, 11), uint8] */;
  (%348, %359, %360)
}

def @func_4324() -> (Tensor[(10, 2, 14), bool],) {
  %361 = @func_3733() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %362 = %361.0;
  (%362,)
}

def @func_4366() -> (Tensor[(10, 2, 14), float64], Tensor[(11, 13, 7), int16], Tensor[(1573), float32], Tensor[(42), float64]) {
  %363 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %364 = %363.0;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %366 = cast(meta[relay.Constant][20] /* ty=Tensor[(1573), float32] */, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %367 = cast(meta[relay.Constant][20] /* ty=Tensor[(1573), float32] */, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %368 = cast(meta[relay.Constant][21] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %369 = reshape(%366, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %370 = reshape(%367, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %371 = reshape(%368, newshape=[14, 3]) /* ty=Tensor[(14, 3), float64] */;
  %372 = @func_1380(%369, %370, %371) /* ty=(Tensor[(11, 13, 11), float32], Tensor[(30), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(11, 13, 7), int16], Tensor[(1001, 1), float64], Tensor[(14, 3), float64], Tensor[(11, 13, 11), float64]) */;
  %373 = sin(%365) /* ty=Tensor[(10, 2, 14), float64] */;
  %374 = %372.4;
  (%373, %374, meta[relay.Constant][20] /* ty=Tensor[(1573), float32] */, meta[relay.Constant][21] /* ty=Tensor[(42), float64] */)
}

def @func_2830(%var_2824: Tensor[(132, 2), uint16], %var_2825: int16) -> (Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64], Tensor[(132, 2), uint16], int16) {
  %375 = @func_2759() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64]) */;
  %376 = @func_1249() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %377 = cast(%var_2824, dtype="uint16") /* ty=Tensor[(132, 2), uint16] */;
  %378 = cast(%var_2825, dtype="int16") /* ty=int16 */;
  %379 = reshape(%377, newshape=[264]) /* ty=Tensor[(264), uint16] */;
  %380 = reshape(%378, newshape=[]) /* ty=int16 */;
  %381 = @func_671(%379, %380) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(18, 2), int16], Tensor[(12, 2, 11), uint16], Tensor[(11, 13, 7), float64], Tensor[(2, 7, 3), float64], Tensor[(42), float64]) */;
  %382 = %375.1;
  %383 = %376.0;
  %384 = %381.4;
  (%382, %383, %384, %var_2824, %var_2825)
}

def @func_4393() -> (Tensor[(10, 2, 14), bool],) {
  %385 = @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %386 = %385.0;
  (%386,)
}

def @func_5528() -> Tensor[(15, 4, 16), float32] {
  %387 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %387.0
}

def @func_5051() -> (Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) {
  %388 = @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */;
  %389 = @func_2680() /* ty=(Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool]) */;
  %390 = %388.5;
  %391 = @func_4940() /* ty=Tensor[(11, 13, 7), bool] */;
  %392 = %389.1;
  (%390, %391, %392)
}

def @func_4651() -> Tensor[(10, 2, 14), bool] {
  %393 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %393.0
}

def @func_4311(%var_4283: Tensor[(960), float32]) -> (Tensor[(264), uint16], Tensor[(960), float32], Tensor[(960), float32], Tensor[(18, 2), int16], int16, Tensor[(2, 15), bool], Tensor[(30), bool], Tensor[(12, 2, 11), float64]) {
  %394 = @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */;
  %395 = cast(%var_4283, dtype="float32") /* ty=Tensor[(960), float32] */;
  %396 = cast(%var_4283, dtype="bool") /* ty=Tensor[(960), bool] */;
  %397 = reshape(%395, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %398 = reshape(%396, newshape=[15, 4, 16]) /* ty=Tensor[(15, 4, 16), bool] */;
  %399 = @func_3508(%397, %398) /* ty=(Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool], Tensor[(960), float32], Tensor[(15, 4, 16), int64], Tensor[(15, 4, 16), uint32]) */;
  %400 = %394.4;
  %401 = cast(%400, dtype="uint16") /* ty=Tensor[(264), uint16] */;
  %402 = cast(meta[relay.Constant][22] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %403 = reshape(%401, newshape=[264]) /* ty=Tensor[(264), uint16] */;
  %404 = reshape(%402, newshape=[]) /* ty=int16 */;
  %405 = @func_671(%403, %404) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(18, 2), int16], Tensor[(12, 2, 11), uint16], Tensor[(11, 13, 7), float64], Tensor[(2, 7, 3), float64], Tensor[(42), float64]) */;
  %406 = cast(meta[relay.Constant][23] /* ty=Tensor[(30), bool] */, dtype="bool") /* ty=Tensor[(30), bool] */;
  %407 = cast(meta[relay.Constant][23] /* ty=Tensor[(30), bool] */, dtype="bool") /* ty=Tensor[(30), bool] */;
  %408 = reshape(%406, newshape=[2, 15]) /* ty=Tensor[(2, 15), bool] */;
  %409 = reshape(%407, newshape=[2, 15]) /* ty=Tensor[(2, 15), bool] */;
  %410 = @func_918(%408, %409) /* ty=(Tensor[(2, 15), bool], Tensor[(11, 13, 7), float64]) */;
  %411 = @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */;
  %412 = %399.2;
  %413 = %405.2;
  %414 = %410.0;
  %415 = %411.3;
  (%400, %412, %var_4283, %413, meta[relay.Constant][22] /* ty=int16 */, %414, meta[relay.Constant][23] /* ty=Tensor[(30), bool] */, %415)
}

def @func_1249() -> (Tensor[(10, 2, 14), bool],) {
  %416 = @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %417 = %416.0;
  (%417,)
}

def @main() -> Tensor[(11, 13, 7), float64] {
  %418 = @func_4228() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), float64]) */;
  %419 = %418.0;
  %420 = cast(%419, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  atanh(%420) /* ty=Tensor[(11, 13, 7), float64] */
}

def @func_564(%var_509: Tensor[(11, 13, 7), float64], %var_554: Tensor[(42), float64]) -> (Tensor[(12, 3, 1), int16], int16, Tensor[(36), int16], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), int16], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(12, 3, 1), float32]) {
  %421 = cast(meta[relay.Constant][24] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %422 = cast(meta[relay.Constant][25] /* ty=Tensor[(36), int16] */, dtype="int16") /* ty=Tensor[(36), int16] */;
  %423 = reshape(%421, newshape=[]) /* ty=int16 */;
  %424 = reshape(%422, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int16] */;
  %425 = @func_377(%423, %424) /* ty=(Tensor[(12, 3, 1), int16],) */;
  %426 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %427 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %428 = %427.0;
  %429 = cast(%428, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  %430 = acosh(%429) /* ty=Tensor[(11, 13, 7), float64] */;
  %431 = cast(%var_509, dtype="int16") /* ty=Tensor[(11, 13, 7), int16] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="int16") /* ty=Tensor[(11, 13, 7), int16] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %435 = cast(%var_554, dtype="float64") /* ty=Tensor[(42), float64] */;
  %436 = reshape(%435, newshape=[2, 7, 3]) /* ty=Tensor[(2, 7, 3), float64] */;
  %437 = @func_292(%436) /* ty=(Tensor[(2, 7, 3), float64],) */;
  %438 = cast(meta[relay.Constant][24] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %439 = %425.0;
  %440 = cast(%439, dtype="int16") /* ty=Tensor[(12, 3, 1), int16] */;
  %441 = reshape(%438, newshape=[]) /* ty=int16 */;
  %442 = reshape(%440, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int16] */;
  %443 = @func_377(%441, %442) /* ty=(Tensor[(12, 3, 1), int16],) */;
  %444 = %443.0;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %446 = %426.0;
  %447 = minimum(%433, %434) /* ty=Tensor[(11, 13, 7), int16] */;
  %448 = %437.0;
  %449 = log10(%445) /* ty=Tensor[(12, 3, 1), float32] */;
  (%439, meta[relay.Constant][24] /* ty=int16 */, meta[relay.Constant][25] /* ty=Tensor[(36), int16] */, %446, %447, %448, %var_554, %449)
}

def @func_4749(%var_4744: Tensor[(10, 2, 14), bool]) -> (Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), int32]) {
  %450 = @func_4393() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %451 = @func_4651() /* ty=Tensor[(10, 2, 14), bool] */;
  %452 = cast(%var_4744, dtype="int32") /* ty=Tensor[(10, 2, 14), int32] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%451, dtype="int32") /* ty=Tensor[(10, 2, 14), int32] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %456 = %450.0;
  %457 = bitwise_and(%454, %455) /* ty=Tensor[(10, 2, 14), int32] */;
  (%456, %457)
}

def @func_1034() -> (Tensor[(11, 13, 7), float64],) {
  %458 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %459 = %458.0;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  %461 = sqrt(%460) /* ty=Tensor[(11, 13, 7), float64] */;
  (%461,)
}

def @func_5398() -> (Tensor[(15, 4, 16), float32],) {
  %462 = @func_3172() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %463 = %462.0;
  (%463,)
}

def @func_1497() -> (Tensor[(11, 13, 7), float64],) {
  %464 = @func_1034() /* ty=(Tensor[(11, 13, 7), float64],) */;
  %465 = %464.0;
  (%465,)
}

def @func_4424(%var_4410: bool) -> (Tensor[(4, 8, 8), float64],) {
  %466 = cast(%var_4410, dtype="bool") /* ty=bool */;
  %467 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 8, 8), bool] */, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
  %468 = logical_and(%466, %467) /* ty=Tensor[(4, 8, 8), bool] */;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(4, 8, 8), float64] */;
  %470 = sin(%469) /* ty=Tensor[(4, 8, 8), float64] */;
  (%470,)
}

def @func_4878(%var_4848: Tensor[(7, 6), float64], %var_4850: Tensor[(1, 350), uint8]) -> (Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float32], Tensor[(7, 6), float64], Tensor[(1001, 1), float32], Tensor[(1, 350), uint8], Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), bool]) {
  %471 = cast(%var_4848, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
  %472 = cast(meta[relay.Constant][27] /* ty=Tensor[(1001, 1), float32] */, dtype="float32") /* ty=Tensor[(1001, 1), float32] */;
  %473 = cast(%var_4850, dtype="uint8") /* ty=Tensor[(1, 350), uint8] */;
  %474 = reshape(%471, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %475 = reshape(%472, newshape=[1001]) /* ty=Tensor[(1001), float32] */;
  %476 = reshape(%473, newshape=[350, 1]) /* ty=Tensor[(350, 1), uint8] */;
  %477 = @func_3153(%474, %475, %476) /* ty=(Tensor[(10, 2, 14), bool], Tensor[(42), float64], Tensor[(12, 3, 1001), bool], Tensor[(11, 13, 7), float64], Tensor[(11, 13, 7), float32], Tensor[(1001), float32], Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(350, 1), uint8]) */;
  %478 = @func_3172() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %479 = %478.0;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(15, 4, 16), float32] */;
  %481 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %482 = %477.4;
  %483 = cast(%482, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
  %484 = cast(meta[relay.Constant][27] /* ty=Tensor[(1001, 1), float32] */, dtype="bool") /* ty=Tensor[(1001, 1), bool] */;
  %485 = reshape(%483, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %486 = reshape(%484, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %487 = @func_1285(%485, %486) /* ty=(Tensor[(11, 13, 7), int64], Tensor[(11, 13, 7), bool]) */;
  %488 = @func_2014() /* ty=Tensor[(10, 2, 14), bool] */;
  %489 = atan(%480) /* ty=Tensor[(15, 4, 16), float32] */;
  %490 = %481.0;
  %491 = %487.1;
  (%488, %482, %var_4848, meta[relay.Constant][27] /* ty=Tensor[(1001, 1), float32] */, %var_4850, %489, %490, %491)
}

def @func_2357(%var_2352: Tensor[(91, 11), bool]) -> (Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), bool], Tensor[(91, 11), bool]) {
  %492 = @func_1598() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %493 = cast(%var_2352, dtype="bool") /* ty=Tensor[(91, 11), bool] */;
  %494 = cast(%var_2352, dtype="bool") /* ty=Tensor[(91, 11), bool] */;
  %495 = reshape(%493, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %496 = reshape(%494, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %497 = @func_1285(%495, %496) /* ty=(Tensor[(11, 13, 7), int64], Tensor[(11, 13, 7), bool]) */;
  %498 = %492.0;
  %499 = %497.1;
  (%498, %499, %var_2352)
}

def @func_4601() -> (Tensor[(11, 13, 7), bool],) {
  %500 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %501 = %500.0;
  (%501,)
}

def @func_1167() -> (Tensor[(10, 2, 14), bool],) {
  %502 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %503 = %502.0;
  (%503,)
}

def @func_442() -> (Tensor[(11, 13, 7), bool],) {
  %504 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 13, 7), uint16] */, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
  %505 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(11, 13, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 13, 7), uint16] */, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %508 = greater_equal(%506, %507) /* ty=Tensor[(11, 13, 7), bool] */;
  (%508,)
}

def @func_1461() -> Tensor[(10, 2, 14), float32] {
  %509 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %510 = %509.0;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %512 = log(%511) /* ty=Tensor[(10, 2, 14), float64] */;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
  cosh(%513) /* ty=Tensor[(10, 2, 14), float32] */
}

def @func_5354(%var_5305: Tensor[(10, 2, 14), bool]) -> (Tensor[(10, 2, 14), float32], Tensor[(11, 13, 7), int64], Tensor[(1001), bool]) {
  %514 = @func_1412() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %515 = %514.0;
  %516 = cast(%var_5305, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %520 = cast(meta[relay.Constant][30] /* ty=Tensor[(1001), bool] */, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %521 = cast(meta[relay.Constant][30] /* ty=Tensor[(1001), bool] */, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %522 = reshape(%520, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %523 = reshape(%521, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %524 = @func_1285(%522, %523) /* ty=(Tensor[(11, 13, 7), int64], Tensor[(11, 13, 7), bool]) */;
  %525 = maximum(%518, %519) /* ty=Tensor[(10, 2, 14), float32] */;
  %526 = %524.0;
  (%525, %526, meta[relay.Constant][30] /* ty=Tensor[(1001), bool] */)
}

def @func_4940() -> Tensor[(11, 13, 7), bool] {
  %527 = @func_4030() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %527.0
}

def @func_3153(%var_3052: Tensor[(42), float64], %var_3099: Tensor[(1001), float32], %var_3133: Tensor[(350, 1), uint8]) -> (Tensor[(10, 2, 14), bool], Tensor[(42), float64], Tensor[(12, 3, 1001), bool], Tensor[(11, 13, 7), float64], Tensor[(11, 13, 7), float32], Tensor[(1001), float32], Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(350, 1), uint8]) {
  %528 = cast(meta[relay.Constant][31] /* ty=Tensor[(1001), float64] */, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %529 = cast(%var_3052, dtype="float64") /* ty=Tensor[(42), float64] */;
  %530 = reshape(%528, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
  %531 = reshape(%529, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %532 = @func_564(%530, %531) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(36), int16], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), int16], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(12, 3, 1), float32]) */;
  %533 = %532.7;
  %534 = cast(%533, dtype="bool") /* ty=Tensor[(12, 3, 1), bool] */;
  %535 = cast(meta[relay.Constant][31] /* ty=Tensor[(1001), float64] */, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %536 = not_equal(%534, %535) /* ty=Tensor[(12, 3, 1001), bool] */;
  %537 = cast(%536, dtype="bool") /* ty=Tensor[(12, 3, 1001), bool] */;
  %538 = cast(%533, dtype="bool") /* ty=Tensor[(12, 3, 1), bool] */;
  %539 = less_equal(%537, %538) /* ty=Tensor[(12, 3, 1001), bool] */;
  %540 = cast(%539, dtype="bool") /* ty=Tensor[(12, 3, 1001), bool] */;
  %541 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%536, dtype="bool") /* ty=Tensor[(12, 3, 1001), bool] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %544 = @func_2759() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64]) */;
  %545 = cast(%var_3099, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %546 = reshape(%545, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %547 = @func_708(%546) /* ty=(Tensor[(11, 13, 7), float32],) */;
  %548 = cast(meta[relay.Constant][31] /* ty=Tensor[(1001), float64] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %549 = acosh(%548) /* ty=Tensor[(1001), float32] */;
  %550 = cast(%var_3099, dtype="uint64") /* ty=Tensor[(1001), uint64] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(1), int32] */;
  %552 = cast(%549, dtype="uint64") /* ty=Tensor[(1001), uint64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %554 = logical_xor(%552, %553) /* ty=Tensor[(1001), uint64] */;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %556 = atanh(%555) /* ty=Tensor[(1001), float64] */;
  %557 = cast(%556, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %558 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %559 = @func_2759() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64]) */;
  %560 = cast(%var_3133, dtype="uint8") /* ty=Tensor[(350, 1), uint8] */;
  %561 = cast(%var_3133, dtype="uint8") /* ty=Tensor[(350, 1), uint8] */;
  %562 = %558.0;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(15, 4, 16), float32] */;
  %564 = cast(%var_3052, dtype="float64") /* ty=Tensor[(42), float64] */;
  %565 = reshape(%560, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), uint8] */;
  %566 = reshape(%561, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), uint8] */;
  %567 = reshape(%563, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %568 = reshape(%564, newshape=[42, 1]) /* ty=Tensor[(42, 1), float64] */;
  %569 = @func_2928(%565, %566, %567, %568) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(7, 10, 5), float32], Tensor[(15, 4, 16), bool], Tensor[(42), float64], Tensor[(1, 1001), float64], Tensor[(42, 1), float64]) */;
  %570 = @func_1654() /* ty=Tensor[(10, 2, 14), bool] */;
  %571 = greater(%542, %543) /* ty=Tensor[(12, 3, 1001), bool] */;
  %572 = %544.2;
  %573 = %547.0;
  %574 = sin(%557) /* ty=Tensor[(1001), float32] */;
  %575 = %559.0;
  %576 = %569.1;
  (%570, %var_3052, %571, %572, %573, %574, %562, %575, %576, %var_3133)
}

def @func_3172() -> (Tensor[(15, 4, 16), float32],) {
  %577 = @func_2412() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %578 = %577.0;
  (%578,)
}

def @func_2870() -> (Tensor[(15, 4, 16), float32], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(10, 2, 14), float32]) {
  %579 = @func_2759() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64]) */;
  %580 = cast(meta[relay.Constant][32] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %581 = reshape(%580, newshape=[2, 7, 3]) /* ty=Tensor[(2, 7, 3), float64] */;
  %582 = @func_292(%581) /* ty=(Tensor[(2, 7, 3), float64],) */;
  %583 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %584 = %583.0;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
  %586 = %579.0;
  %587 = %582.0;
  %588 = atan(%585) /* ty=Tensor[(10, 2, 14), float32] */;
  (%586, %587, meta[relay.Constant][32] /* ty=Tensor[(42), float64] */, %588)
}

def @func_2798() -> (Tensor[(15, 4, 16), float32],) {
  %589 = @func_2378() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %590 = %589.0;
  (%590,)
}

def @func_2412() -> (Tensor[(15, 4, 16), float32],) {
  %591 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %592 = %591.0;
  (%592,)
}

def @func_2928(%var_2877: Tensor[(7, 10, 5), uint8], %var_2878: Tensor[(7, 10, 5), uint8], %var_2890: Tensor[(960), float32], %var_2926: Tensor[(42, 1), float64]) -> (Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(7, 10, 5), float32], Tensor[(15, 4, 16), bool], Tensor[(42), float64], Tensor[(1, 1001), float64], Tensor[(42, 1), float64]) {
  %593 = cast(%var_2890, dtype="float32") /* ty=Tensor[(960), float32] */;
  %594 = reshape(%593, newshape=[15, 4, 16]) /* ty=Tensor[(15, 4, 16), float32] */;
  %595 = @func_2344(%594) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), bool], Tensor[(15, 4, 16), float32]) */;
  %596 = cast(%var_2877, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %597 = shape_of(%var_2878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%var_2878, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %600 = floor_divide(%598, %599) /* ty=Tensor[(7, 10, 5), float64] */;
  %601 = cast(%var_2878, dtype="bool") /* ty=Tensor[(7, 10, 5), bool] */;
  %602 = shape_of(%var_2877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_2877, dtype="bool") /* ty=Tensor[(7, 10, 5), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = not_equal(%603, %604) /* ty=Tensor[(7, 10, 5), bool] */;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
  %607 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%600, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %610 = %595.0;
  %611 = cast(%610, dtype="float32") /* ty=Tensor[(15, 4, 16), float32] */;
  %612 = reshape(%611, newshape=[15, 4, 16]) /* ty=Tensor[(15, 4, 16), float32] */;
  %613 = @func_2344(%612) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), bool], Tensor[(15, 4, 16), float32]) */;
  %614 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 1001), float64] */, dtype="float64") /* ty=Tensor[(1, 1001), float64] */;
  %615 = cast(%var_2926, dtype="float64") /* ty=Tensor[(42, 1), float64] */;
  %616 = reshape(%614, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
  %617 = reshape(%615, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %618 = @func_564(%616, %617) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(36), int16], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), int16], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(12, 3, 1), float32]) */;
  %619 = multiply(%608, %609) /* ty=Tensor[(7, 10, 5), float32] */;
  %620 = %613.1;
  %621 = %618.6;
  (%610, %var_2890, %619, %620, %621, meta[relay.Constant][33] /* ty=Tensor[(1, 1001), float64] */, %var_2926)
}

def @func_4449() -> (Tensor[(10, 2, 14), bool],) {
  %622 = @func_4393() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %623 = %622.0;
  (%623,)
}

def @func_5626(%var_5623: Tensor[(2016), bool]) -> (Tensor[(11, 13, 7), bool], Tensor[(12, 12, 14), float32], Tensor[(2016), bool]) {
  %624 = cast(%var_5623, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %625 = cast(%var_5623, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %626 = reshape(%624, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), bool] */;
  %627 = reshape(%625, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), bool] */;
  %628 = @func_3832(%626, %627) /* ty=(Tensor[(12, 12, 14), float32], Tensor[(3, 11, 3), uint64], Tensor[(33), uint64], Tensor[(99), uint64]) */;
  %629 = @func_4940() /* ty=Tensor[(11, 13, 7), bool] */;
  %630 = %628.0;
  (%629, %630, %var_5623)
}

def @func_3832(%var_3800: Tensor[(12, 12, 14), bool], %var_3801: Tensor[(12, 12, 14), bool]) -> (Tensor[(12, 12, 14), float32], Tensor[(3, 11, 3), uint64], Tensor[(33), uint64], Tensor[(99), uint64]) {
  %631 = cast(%var_3801, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
  %632 = shape_of(%var_3800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%var_3800, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %635 = logical_and(%633, %634) /* ty=Tensor[(12, 12, 14), bool] */;
  %636 = cast(%635, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %637 = cast(meta[relay.Constant][34] /* ty=Tensor[(33), uint64] */, dtype="uint64") /* ty=Tensor[(33), uint64] */;
  %638 = cast(meta[relay.Constant][35] /* ty=Tensor[(99), uint64] */, dtype="uint64") /* ty=Tensor[(99), uint64] */;
  %639 = reshape(%637, newshape=[1, 11, 3]) /* ty=Tensor[(1, 11, 3), uint64] */;
  %640 = reshape(%638, newshape=[3, 11, 3]) /* ty=Tensor[(3, 11, 3), uint64] */;
  %641 = asinh(%636) /* ty=Tensor[(12, 12, 14), float32] */;
  %642 = @func_3368(%639, %640) /* ty=Tensor[(3, 11, 3), uint64] */;
  (%641, %642, meta[relay.Constant][34] /* ty=Tensor[(33), uint64] */, meta[relay.Constant][35] /* ty=Tensor[(99), uint64] */)
}

def @func_5557() -> Tensor[(10, 2, 14), bool] {
  @func_4651() /* ty=Tensor[(10, 2, 14), bool] */
}

def @func_777(%var_756: Tensor[(7, 9, 7), float32], %var_757: Tensor[(7, 9, 7), float32]) -> (Tensor[(7, 9, 7), bool], Tensor[(7, 9, 7), float64]) {
  %643 = cast(%var_757, dtype="bool") /* ty=Tensor[(7, 9, 7), bool] */;
  %644 = shape_of(%var_756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%var_756, dtype="bool") /* ty=Tensor[(7, 9, 7), bool] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %647 = cast(%var_756, dtype="float64") /* ty=Tensor[(7, 9, 7), float64] */;
  %648 = greater(%645, %646) /* ty=Tensor[(7, 9, 7), bool] */;
  %649 = tan(%647) /* ty=Tensor[(7, 9, 7), float64] */;
  (%648, %649)
}

def @func_4228() -> (Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), float64]) {
  %650 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %651 = %650.0;
  %652 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 13, 7), bool] */, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %656 = @func_1034() /* ty=(Tensor[(11, 13, 7), float64],) */;
  %657 = logical_or(%654, %655) /* ty=Tensor[(11, 13, 7), bool] */;
  %658 = %656.0;
  (%657, %658)
}

def @func_2519(%var_2428: Tensor[(8, 14, 2), uint8], %var_2429: Tensor[(8, 14, 2), uint8], %var_2455: Tensor[(13, 77), bool]) -> (Tensor[(8, 14, 2), uint8], Tensor[(11, 13, 7), bool], Tensor[(13, 77), bool], Tensor[(8, 14, 2), float32], Tensor[(12, 2, 11), float64]) {
  %659 = cast(%var_2429, dtype="uint8") /* ty=Tensor[(8, 14, 2), uint8] */;
  %660 = shape_of(%var_2428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%var_2428, dtype="uint8") /* ty=Tensor[(8, 14, 2), uint8] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %663 = cast(%var_2455, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
  %664 = cast(%var_2455, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
  %665 = reshape(%663, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %666 = reshape(%664, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %667 = @func_1285(%665, %666) /* ty=(Tensor[(11, 13, 7), int64], Tensor[(11, 13, 7), bool]) */;
  %668 = cast(%var_2429, dtype="float32") /* ty=Tensor[(8, 14, 2), float32] */;
  %669 = @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */;
  %670 = bitwise_xor(%661, %662) /* ty=Tensor[(8, 14, 2), uint8] */;
  %671 = %667.1;
  %672 = acosh(%668) /* ty=Tensor[(8, 14, 2), float32] */;
  %673 = %669.3;
  (%670, %671, %var_2455, %672, %673)
}

def @func_5110(%var_5101: Tensor[(4, 11, 12), float64]) -> (Tensor[(4, 11, 12), float64], Tensor[(11, 13, 7), bool]) {
  %674 = cast(%var_5101, dtype="float64") /* ty=Tensor[(4, 11, 12), float64] */;
  %675 = @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */;
  %676 = tan(%674) /* ty=Tensor[(4, 11, 12), float64] */;
  %677 = %675.0;
  (%676, %677)
}

def @func_918(%var_879: Tensor[(2, 15), bool], %var_880: Tensor[(2, 15), bool]) -> (Tensor[(2, 15), bool], Tensor[(11, 13, 7), float64]) {
  %678 = cast(%var_880, dtype="bool") /* ty=Tensor[(2, 15), bool] */;
  %679 = shape_of(%var_879, dtype="int32") /* ty=Tensor[(2), int32] */;
  %680 = cast(%var_879, dtype="bool") /* ty=Tensor[(2, 15), bool] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %682 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %683 = %682.0;
  %684 = cast(%683, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  %685 = logical_and(%680, %681) /* ty=Tensor[(2, 15), bool] */;
  %686 = atan(%684) /* ty=Tensor[(11, 13, 7), float64] */;
  (%685, %686)
}

def @func_708(%var_692: Tensor[(11, 13, 7), bool]) -> (Tensor[(11, 13, 7), float32],) {
  %687 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %688 = %687.0;
  %689 = cast(%var_692, dtype="float32") /* ty=Tensor[(11, 13, 7), float32] */;
  %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%688, dtype="float32") /* ty=Tensor[(11, 13, 7), float32] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %693 = floor_divide(%691, %692) /* ty=Tensor[(11, 13, 7), float32] */;
  (%693,)
}

def @func_594(%var_583: Tensor[(12, 2, 11), uint16]) -> (Tensor[(12, 2, 11), uint16], Tensor[(12, 2, 11), float64]) {
  %694 = cast(%var_583, dtype="uint16") /* ty=Tensor[(12, 2, 11), uint16] */;
  %695 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(12, 2, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 2, 11), uint16] */, dtype="uint16") /* ty=Tensor[(12, 2, 11), uint16] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %698 = cast(%var_583, dtype="float64") /* ty=Tensor[(12, 2, 11), float64] */;
  %699 = maximum(%696, %697) /* ty=Tensor[(12, 2, 11), uint16] */;
  %700 = acos(%698) /* ty=Tensor[(12, 2, 11), float64] */;
  (%699, %700)
}

def @func_2648() -> (Tensor[(10, 2, 14), float64], Tensor[(11, 13, 7), float32], Tensor[(1001), bool], Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), float64]) {
  %701 = @func_1249() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %704 = cast(meta[relay.Constant][38] /* ty=Tensor[(1001), bool] */, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %705 = reshape(%704, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %706 = @func_708(%705) /* ty=(Tensor[(11, 13, 7), float32],) */;
  %707 = @func_2378() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %708 = @func_1249() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %709 = %708.0;
  %710 = cast(%709, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %711 = tan(%703) /* ty=Tensor[(10, 2, 14), float64] */;
  %712 = %706.0;
  %713 = %707.0;
  %714 = asinh(%710) /* ty=Tensor[(10, 2, 14), float64] */;
  (%711, %712, meta[relay.Constant][38] /* ty=Tensor[(1001), bool] */, %713, %714)
}

def @func_377(%var_361: int16, %var_362: Tensor[(12, 3, 1), int16]) -> (Tensor[(12, 3, 1), int16],) {
  %715 = cast(%var_361, dtype="int16") /* ty=int16 */;
  %716 = cast(%var_362, dtype="int16") /* ty=Tensor[(12, 3, 1), int16] */;
  %717 = bitwise_or(%715, %716) /* ty=Tensor[(12, 3, 1), int16] */;
  (%717,)
}

def @func_5603() -> Tensor[(15, 4, 16), float32] {
  %718 = @func_3172() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %718.0
}

def @func_1285(%var_1275: Tensor[(11, 13, 7), bool], %var_1281: Tensor[(11, 13, 7), bool]) -> (Tensor[(11, 13, 7), int64], Tensor[(11, 13, 7), bool]) {
  %719 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %720 = %719.0;
  %721 = cast(%var_1275, dtype="int64") /* ty=Tensor[(11, 13, 7), int64] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%720, dtype="int64") /* ty=Tensor[(11, 13, 7), int64] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %725 = cast(%var_1281, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
  %726 = shape_of(%var_1275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%var_1275, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %729 = bitwise_and(%723, %724) /* ty=Tensor[(11, 13, 7), int64] */;
  %730 = less(%727, %728) /* ty=Tensor[(11, 13, 7), bool] */;
  (%729, %730)
}

def @func_3544() -> (Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), float64]) {
  %731 = @func_2798() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %732 = @func_1497() /* ty=(Tensor[(11, 13, 7), float64],) */;
  %733 = %732.0;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  %735 = %731.0;
  %736 = cos(%734) /* ty=Tensor[(11, 13, 7), float64] */;
  (%735, %736)
}

def @func_3714(%var_3684: Tensor[(33), uint64]) -> (Tensor[(3, 11, 3), uint64], Tensor[(33), uint64], Tensor[(99), uint64], Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), float32]) {
  %737 = cast(%var_3684, dtype="uint64") /* ty=Tensor[(33), uint64] */;
  %738 = cast(meta[relay.Constant][39] /* ty=Tensor[(99), uint64] */, dtype="uint64") /* ty=Tensor[(99), uint64] */;
  %739 = reshape(%737, newshape=[1, 11, 3]) /* ty=Tensor[(1, 11, 3), uint64] */;
  %740 = reshape(%738, newshape=[3, 11, 3]) /* ty=Tensor[(3, 11, 3), uint64] */;
  %741 = @func_2798() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %742 = @func_2109() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) */;
  %743 = %742.1;
  %744 = cast(%743, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %745 = log2(%744) /* ty=Tensor[(10, 2, 14), float64] */;
  %746 = cast(%745, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
  %747 = @func_3368(%739, %740) /* ty=Tensor[(3, 11, 3), uint64] */;
  %748 = %741.0;
  %749 = sigmoid(%746) /* ty=Tensor[(10, 2, 14), float32] */;
  (%747, %var_3684, meta[relay.Constant][39] /* ty=Tensor[(99), uint64] */, %748, %749)
}

def @func_961(%var_926: Tensor[(15, 2, 11), float64], %var_939: Tensor[(441), float32]) -> (Tensor[(15, 2, 11), float64], Tensor[(7, 9, 7), float64], Tensor[(441), float32], Tensor[(7, 9, 7), bool], Tensor[(2, 15), bool], Tensor[(30), bool]) {
  %750 = cast(%var_926, dtype="float64") /* ty=Tensor[(15, 2, 11), float64] */;
  %751 = cast(%var_939, dtype="float32") /* ty=Tensor[(441), float32] */;
  %752 = cast(%var_939, dtype="float32") /* ty=Tensor[(441), float32] */;
  %753 = reshape(%751, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), float32] */;
  %754 = reshape(%752, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), float32] */;
  %755 = @func_777(%753, %754) /* ty=(Tensor[(7, 9, 7), bool], Tensor[(7, 9, 7), float64]) */;
  %756 = cast(%var_939, dtype="float32") /* ty=Tensor[(441), float32] */;
  %757 = %755.1;
  %758 = cast(%757, dtype="float32") /* ty=Tensor[(7, 9, 7), float32] */;
  %759 = reshape(%756, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), float32] */;
  %760 = reshape(%758, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), float32] */;
  %761 = @func_777(%759, %760) /* ty=(Tensor[(7, 9, 7), bool], Tensor[(7, 9, 7), float64]) */;
  %762 = cast(meta[relay.Constant][40] /* ty=Tensor[(30), bool] */, dtype="bool") /* ty=Tensor[(30), bool] */;
  %763 = cast(meta[relay.Constant][40] /* ty=Tensor[(30), bool] */, dtype="bool") /* ty=Tensor[(30), bool] */;
  %764 = reshape(%762, newshape=[2, 15]) /* ty=Tensor[(2, 15), bool] */;
  %765 = reshape(%763, newshape=[2, 15]) /* ty=Tensor[(2, 15), bool] */;
  %766 = @func_918(%764, %765) /* ty=(Tensor[(2, 15), bool], Tensor[(11, 13, 7), float64]) */;
  %767 = atan(%750) /* ty=Tensor[(15, 2, 11), float64] */;
  %768 = %761.0;
  %769 = %766.0;
  (%767, %757, %var_939, %768, %769, meta[relay.Constant][40] /* ty=Tensor[(30), bool] */)
}

def @func_5290(%var_5279: Tensor[(42), float64]) -> (Tensor[(42), bool],) {
  %770 = @func_4366() /* ty=(Tensor[(10, 2, 14), float64], Tensor[(11, 13, 7), int16], Tensor[(1573), float32], Tensor[(42), float64]) */;
  %771 = %770.3;
  %772 = cast(%var_5279, dtype="bool") /* ty=Tensor[(42), bool] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(1), int32] */;
  %774 = cast(%771, dtype="bool") /* ty=Tensor[(42), bool] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?), bool] */;
  %776 = equal(%774, %775) /* ty=Tensor[(42), bool] */;
  (%776,)
}

def @func_3508(%var_3473: Tensor[(960), float32], %var_3485: Tensor[(15, 4, 16), bool]) -> (Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool], Tensor[(960), float32], Tensor[(15, 4, 16), int64], Tensor[(15, 4, 16), uint32]) {
  %777 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %778 = cast(%var_3473, dtype="float32") /* ty=Tensor[(960), float32] */;
  %779 = reshape(%778, newshape=[15, 4, 16]) /* ty=Tensor[(15, 4, 16), float32] */;
  %780 = @func_2236(%779) /* ty=Tensor[(15, 4, 16), bool] */;
  %781 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 4, 16), bool] */, dtype="int64") /* ty=Tensor[(15, 4, 16), int64] */;
  %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%780, dtype="int64") /* ty=Tensor[(15, 4, 16), int64] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %785 = cast(%var_3485, dtype="uint32") /* ty=Tensor[(15, 4, 16), uint32] */;
  %786 = shape_of(%780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%780, dtype="uint32") /* ty=Tensor[(15, 4, 16), uint32] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %789 = @func_1435() /* ty=Tensor[(10, 2, 14), bool] */;
  %790 = %777.0;
  %791 = bitwise_or(%783, %784) /* ty=Tensor[(15, 4, 16), int64] */;
  %792 = right_shift(%787, %788) /* ty=Tensor[(15, 4, 16), uint32] */;
  (%789, %790, %var_3473, %791, %792)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2395() -> Tensor[(15, 4, 16), float32] {
  %0 = @func_2378() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %0.0
}

def @func_4424(%var_4410: bool) -> (Tensor[(4, 8, 8), float64],) {
  %1 = cast(%var_4410, dtype="bool") /* ty=bool */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 8, 8), bool] */, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
  %3 = logical_and(%1, %2) /* ty=Tensor[(4, 8, 8), bool] */;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(4, 8, 8), float64] */;
  %5 = sin(%4) /* ty=Tensor[(4, 8, 8), float64] */;
  (%5,)
}

def @func_4652() -> Tensor[(10, 2, 14), bool] {
  %7 = fn () -> Tensor[(10, 2, 14), bool] {
    %6 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %6.0
  };
  %7() /* ty=Tensor[(10, 2, 14), bool] */
}

def @func_2239(%var_2237: Tensor[(15, 4, 16), float32]) -> Tensor[(15, 4, 16), bool] {
  @func_2236(%var_2237) /* ty=Tensor[(15, 4, 16), bool] */
}

def @func_2649() -> (Tensor[(10, 2, 14), float64], Tensor[(11, 13, 7), float32], Tensor[(1001), bool], Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), float64]) {
  %22 = fn () -> (Tensor[(10, 2, 14), float64], Tensor[(11, 13, 7), float32], Tensor[(1001), bool], Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), float64]) {
    %8 = @func_1249() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %9 = %8.0;
    %10 = cast(%9, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
    %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(1001), bool] */, dtype="bool") /* ty=Tensor[(1001), bool] */;
    %12 = reshape(%11, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
    %13 = @func_708(%12) /* ty=(Tensor[(11, 13, 7), float32],) */;
    %14 = @func_2378() /* ty=(Tensor[(15, 4, 16), float32],) */;
    %15 = @func_1249() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %16 = %15.0;
    %17 = cast(%16, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
    %18 = tan(%10) /* ty=Tensor[(10, 2, 14), float64] */;
    %19 = %13.0;
    %20 = %14.0;
    %21 = asinh(%17) /* ty=Tensor[(10, 2, 14), float64] */;
    (%18, %19, meta[relay.Constant][1] /* ty=Tensor[(1001), bool] */, %20, %21)
  };
  %22() /* ty=(Tensor[(10, 2, 14), float64], Tensor[(11, 13, 7), float32], Tensor[(1001), bool], Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), float64]) */
}

def @func_3734() -> (Tensor[(10, 2, 14), bool],) {
  %25 = fn () -> (Tensor[(10, 2, 14), bool],) {
    %23 = @func_2680() /* ty=(Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool]) */;
    %24 = %23.0;
    (%24,)
  };
  %25() /* ty=(Tensor[(10, 2, 14), bool],) */
}

def @func_377(%var_361: int16, %var_362: Tensor[(12, 3, 1), int16]) -> (Tensor[(12, 3, 1), int16],) {
  %26 = cast(%var_361, dtype="int16") /* ty=int16 */;
  %27 = cast(%var_362, dtype="int16") /* ty=Tensor[(12, 3, 1), int16] */;
  %28 = bitwise_or(%26, %27) /* ty=Tensor[(12, 3, 1), int16] */;
  (%28,)
}

def @func_5398() -> (Tensor[(15, 4, 16), float32],) {
  %29 = @func_3172() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %30 = %29.0;
  (%30,)
}

def @func_918(%var_879: Tensor[(2, 15), bool], %var_880: Tensor[(2, 15), bool]) -> (Tensor[(2, 15), bool], Tensor[(11, 13, 7), float64]) {
  %31 = cast(%var_880, dtype="bool") /* ty=Tensor[(2, 15), bool] */;
  %32 = shape_of(%var_879, dtype="int32") /* ty=Tensor[(2), int32] */;
  %33 = cast(%var_879, dtype="bool") /* ty=Tensor[(2, 15), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %35 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %36 = %35.0;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  %38 = logical_and(%33, %34) /* ty=Tensor[(2, 15), bool] */;
  %39 = atan(%37) /* ty=Tensor[(11, 13, 7), float64] */;
  (%38, %39)
}

def @func_3832(%var_3800: Tensor[(12, 12, 14), bool], %var_3801: Tensor[(12, 12, 14), bool]) -> (Tensor[(12, 12, 14), float32], Tensor[(3, 11, 3), uint64], Tensor[(33), uint64], Tensor[(99), uint64]) {
  %40 = cast(%var_3801, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
  %41 = shape_of(%var_3800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%var_3800, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %44 = logical_and(%42, %43) /* ty=Tensor[(12, 12, 14), bool] */;
  %45 = cast(%44, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(33), uint64] */, dtype="uint64") /* ty=Tensor[(33), uint64] */;
  %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(99), uint64] */, dtype="uint64") /* ty=Tensor[(99), uint64] */;
  %48 = reshape(%46, newshape=[1, 11, 3]) /* ty=Tensor[(1, 11, 3), uint64] */;
  %49 = reshape(%47, newshape=[3, 11, 3]) /* ty=Tensor[(3, 11, 3), uint64] */;
  %50 = asinh(%45) /* ty=Tensor[(12, 12, 14), float32] */;
  %51 = @func_3368(%48, %49) /* ty=Tensor[(3, 11, 3), uint64] */;
  (%50, %51, meta[relay.Constant][2] /* ty=Tensor[(33), uint64] */, meta[relay.Constant][3] /* ty=Tensor[(99), uint64] */)
}

def @func_5354(%var_5305: Tensor[(10, 2, 14), bool]) -> (Tensor[(10, 2, 14), float32], Tensor[(11, 13, 7), int64], Tensor[(1001), bool]) {
  %52 = @func_1412() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %53 = %52.0;
  %54 = cast(%var_5305, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(1001), bool] */, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %59 = cast(meta[relay.Constant][4] /* ty=Tensor[(1001), bool] */, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %60 = reshape(%58, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %61 = reshape(%59, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %62 = @func_1285(%60, %61) /* ty=(Tensor[(11, 13, 7), int64], Tensor[(11, 13, 7), bool]) */;
  %63 = maximum(%56, %57) /* ty=Tensor[(10, 2, 14), float32] */;
  %64 = %62.0;
  (%63, %64, meta[relay.Constant][4] /* ty=Tensor[(1001), bool] */)
}

def @func_4094(%var_4075: Tensor[(224), uint8], %var_4076: Tensor[(1001), bool], %var_4091: Tensor[(960), float32], %var_4092: Tensor[(42), float64]) -> (Tensor[(8, 14, 2), float32], Tensor[(224), uint8], Tensor[(1001), bool], Tensor[(10, 2, 14), bool], Tensor[(960), float32], Tensor[(175, 2), uint8], Tensor[(960), float32], Tensor[(42), float64]) {
  %65 = cast(%var_4075, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %66 = cast(%var_4075, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %67 = cast(%var_4076, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %68 = reshape(%65, newshape=[8, 14, 2]) /* ty=Tensor[(8, 14, 2), uint8] */;
  %69 = reshape(%66, newshape=[8, 14, 2]) /* ty=Tensor[(8, 14, 2), uint8] */;
  %70 = reshape(%67, newshape=[13, 77]) /* ty=Tensor[(13, 77), bool] */;
  %71 = @func_2519(%68, %69, %70) /* ty=(Tensor[(8, 14, 2), uint8], Tensor[(11, 13, 7), bool], Tensor[(13, 77), bool], Tensor[(8, 14, 2), float32], Tensor[(12, 2, 11), float64]) */;
  %72 = @func_1435() /* ty=Tensor[(10, 2, 14), bool] */;
  %73 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 2, 14), bool] */, dtype="bool") /* ty=Tensor[(10, 2, 14), bool] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="bool") /* ty=Tensor[(10, 2, 14), bool] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %77 = cast(meta[relay.Constant][6] /* ty=Tensor[(175, 2), uint8] */, dtype="uint8") /* ty=Tensor[(175, 2), uint8] */;
  %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(175, 2), uint8] */, dtype="uint8") /* ty=Tensor[(175, 2), uint8] */;
  %79 = cast(%var_4091, dtype="float32") /* ty=Tensor[(960), float32] */;
  %80 = cast(%var_4092, dtype="float64") /* ty=Tensor[(42), float64] */;
  %81 = reshape(%77, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), uint8] */;
  %82 = reshape(%78, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), uint8] */;
  %83 = reshape(%79, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %84 = reshape(%80, newshape=[42, 1]) /* ty=Tensor[(42, 1), float64] */;
  %85 = @func_2928(%81, %82, %83, %84) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(7, 10, 5), float32], Tensor[(15, 4, 16), bool], Tensor[(42), float64], Tensor[(1, 1001), float64], Tensor[(42, 1), float64]) */;
  %86 = %71.3;
  %87 = less(%75, %76) /* ty=Tensor[(10, 2, 14), bool] */;
  %88 = %85.1;
  (%86, %var_4075, %var_4076, %87, %88, meta[relay.Constant][6] /* ty=Tensor[(175, 2), uint8] */, %var_4091, %var_4092)
}

def @func_1251() -> (Tensor[(10, 2, 14), bool],) {
  @func_1249() /* ty=(Tensor[(10, 2, 14), bool],) */
}

def @func_1385(%var_1382: Tensor[(11, 13, 11), float32], %var_1383: Tensor[(11, 13, 11), float32], %var_1384: Tensor[(14, 3), float64]) -> (Tensor[(11, 13, 11), float32], Tensor[(30), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(11, 13, 7), int16], Tensor[(1001, 1), float64], Tensor[(14, 3), float64], Tensor[(11, 13, 11), float64]) {
  @func_1380(%var_1382, %var_1383, %var_1384) /* ty=(Tensor[(11, 13, 11), float32], Tensor[(30), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(11, 13, 7), int16], Tensor[(1001, 1), float64], Tensor[(14, 3), float64], Tensor[(11, 13, 11), float64]) */
}

def @func_2207() -> (Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) {
  %89 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %90 = cast(meta[relay.Constant][7] /* ty=Tensor[(264), uint16] */, dtype="uint16") /* ty=Tensor[(264), uint16] */;
  %91 = reshape(%90, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), uint16] */;
  %92 = @func_594(%91) /* ty=(Tensor[(12, 2, 11), uint16], Tensor[(12, 2, 11), float64]) */;
  %93 = @func_2109() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) */;
  %94 = %89.0;
  %95 = @func_1461() /* ty=Tensor[(10, 2, 14), float32] */;
  %96 = @func_1747() /* ty=Tensor[(15, 4, 16), float32] */;
  %97 = %92.1;
  %98 = %93.0;
  (%94, %95, %96, %97, meta[relay.Constant][7] /* ty=Tensor[(264), uint16] */, %98)
}

def @func_4940() -> Tensor[(11, 13, 7), bool] {
  %99 = @func_4030() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %99.0
}

def @func_1599() -> (Tensor[(15, 4, 16), float32],) {
  %102 = fn () -> (Tensor[(15, 4, 16), float32],) {
    %100 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
    %101 = %100.0;
    (%101,)
  };
  %102() /* ty=(Tensor[(15, 4, 16), float32],) */
}

def @func_294(%var_293: Tensor[(2, 7, 3), float64]) -> (Tensor[(2, 7, 3), float64],) {
  %105 = fn (%var_272: Tensor[(2, 7, 3), float64]) -> (Tensor[(2, 7, 3), float64],) {
    %103 = cast(%var_272, dtype="float64") /* ty=Tensor[(2, 7, 3), float64] */;
    %104 = cosh(%103) /* ty=Tensor[(2, 7, 3), float64] */;
    (%104,)
  };
  %105(%var_293) /* ty=(Tensor[(2, 7, 3), float64],) */
}

def @func_5605() -> Tensor[(15, 4, 16), float32] {
  @func_5603() /* ty=Tensor[(15, 4, 16), float32] */
}

def @func_4603() -> (Tensor[(11, 13, 7), bool],) {
  @func_4601() /* ty=(Tensor[(11, 13, 7), bool],) */
}

def @func_381(%var_379: int16, %var_380: Tensor[(12, 3, 1), int16]) -> (Tensor[(12, 3, 1), int16],) {
  @func_377(%var_379, %var_380) /* ty=(Tensor[(12, 3, 1), int16],) */
}

def @func_964(%var_962: Tensor[(15, 2, 11), float64], %var_963: Tensor[(441), float32]) -> (Tensor[(15, 2, 11), float64], Tensor[(7, 9, 7), float64], Tensor[(441), float32], Tensor[(7, 9, 7), bool], Tensor[(2, 15), bool], Tensor[(30), bool]) {
  %126 = fn (%var_926: Tensor[(15, 2, 11), float64], %var_939: Tensor[(441), float32]) -> (Tensor[(15, 2, 11), float64], Tensor[(7, 9, 7), float64], Tensor[(441), float32], Tensor[(7, 9, 7), bool], Tensor[(2, 15), bool], Tensor[(30), bool]) {
    %106 = cast(%var_926, dtype="float64") /* ty=Tensor[(15, 2, 11), float64] */;
    %107 = cast(%var_939, dtype="float32") /* ty=Tensor[(441), float32] */;
    %108 = cast(%var_939, dtype="float32") /* ty=Tensor[(441), float32] */;
    %109 = reshape(%107, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), float32] */;
    %110 = reshape(%108, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), float32] */;
    %111 = @func_777(%109, %110) /* ty=(Tensor[(7, 9, 7), bool], Tensor[(7, 9, 7), float64]) */;
    %112 = cast(%var_939, dtype="float32") /* ty=Tensor[(441), float32] */;
    %113 = %111.1;
    %114 = cast(%113, dtype="float32") /* ty=Tensor[(7, 9, 7), float32] */;
    %115 = reshape(%112, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), float32] */;
    %116 = reshape(%114, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), float32] */;
    %117 = @func_777(%115, %116) /* ty=(Tensor[(7, 9, 7), bool], Tensor[(7, 9, 7), float64]) */;
    %118 = cast(meta[relay.Constant][8] /* ty=Tensor[(30), bool] */, dtype="bool") /* ty=Tensor[(30), bool] */;
    %119 = cast(meta[relay.Constant][8] /* ty=Tensor[(30), bool] */, dtype="bool") /* ty=Tensor[(30), bool] */;
    %120 = reshape(%118, newshape=[2, 15]) /* ty=Tensor[(2, 15), bool] */;
    %121 = reshape(%119, newshape=[2, 15]) /* ty=Tensor[(2, 15), bool] */;
    %122 = @func_918(%120, %121) /* ty=(Tensor[(2, 15), bool], Tensor[(11, 13, 7), float64]) */;
    %123 = atan(%106) /* ty=Tensor[(15, 2, 11), float64] */;
    %124 = %117.0;
    %125 = %122.0;
    (%123, %113, %var_939, %124, %125, meta[relay.Constant][8] /* ty=Tensor[(30), bool] */)
  };
  %126(%var_962, %var_963) /* ty=(Tensor[(15, 2, 11), float64], Tensor[(7, 9, 7), float64], Tensor[(441), float32], Tensor[(7, 9, 7), bool], Tensor[(2, 15), bool], Tensor[(30), bool]) */
}

def @func_2994(%var_2992: Tensor[(10, 2, 14), bool]) -> (Tensor[(10, 2, 14), float64], Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool]) {
  @func_2991(%var_2992) /* ty=(Tensor[(10, 2, 14), float64], Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool]) */
}

def @func_2347(%var_2345: Tensor[(15, 4, 16), float32]) -> (Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), bool], Tensor[(15, 4, 16), float32]) {
  @func_2344(%var_2345) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), bool], Tensor[(15, 4, 16), float32]) */
}

def @func_5603() -> Tensor[(15, 4, 16), float32] {
  %127 = @func_3172() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %127.0
}

def @func_3512(%var_3510: Tensor[(960), float32], %var_3511: Tensor[(15, 4, 16), bool]) -> (Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool], Tensor[(960), float32], Tensor[(15, 4, 16), int64], Tensor[(15, 4, 16), uint32]) {
  @func_3508(%var_3510, %var_3511) /* ty=(Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool], Tensor[(960), float32], Tensor[(15, 4, 16), int64], Tensor[(15, 4, 16), uint32]) */
}

def @func_2397() -> Tensor[(15, 4, 16), float32] {
  @func_2395() /* ty=Tensor[(15, 4, 16), float32] */
}

def @func_1748() -> Tensor[(15, 4, 16), float32] {
  %129 = fn () -> Tensor[(15, 4, 16), float32] {
    %128 = @func_1598() /* ty=(Tensor[(15, 4, 16), float32],) */;
    %128.0
  };
  %129() /* ty=Tensor[(15, 4, 16), float32] */
}

def @func_4011() -> (Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool]) {
  %134 = fn () -> (Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool]) {
    %130 = @func_2798() /* ty=(Tensor[(15, 4, 16), float32],) */;
    %131 = @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %132 = %130.0;
    %133 = %131.0;
    (%132, %133)
  };
  %134() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool]) */
}

def @func_4230() -> (Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), float64]) {
  @func_4228() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), float64]) */
}

def @func_2412() -> (Tensor[(15, 4, 16), float32],) {
  %135 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %136 = %135.0;
  (%136,)
}

def @func_2991(%var_2942: Tensor[(10, 2, 14), bool]) -> (Tensor[(10, 2, 14), float64], Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool]) {
  %137 = @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %138 = %137.0;
  %139 = cast(%var_2942, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%138, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %143 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 2, 14), bool] */, dtype="bool") /* ty=Tensor[(10, 2, 14), bool] */;
  %144 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%138, dtype="bool") /* ty=Tensor[(10, 2, 14), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %148 = mod(%141, %142) /* ty=Tensor[(10, 2, 14), float64] */;
  %149 = greater_equal(%145, %146) /* ty=Tensor[(10, 2, 14), bool] */;
  %150 = %147.0;
  (%148, %149, %150)
}

def @func_780(%var_778: Tensor[(7, 9, 7), float32], %var_779: Tensor[(7, 9, 7), float32]) -> (Tensor[(7, 9, 7), bool], Tensor[(7, 9, 7), float64]) {
  %158 = fn (%var_756: Tensor[(7, 9, 7), float32], %var_757: Tensor[(7, 9, 7), float32]) -> (Tensor[(7, 9, 7), bool], Tensor[(7, 9, 7), float64]) {
    %151 = cast(%var_757, dtype="bool") /* ty=Tensor[(7, 9, 7), bool] */;
    %152 = shape_of(%var_756, dtype="int32") /* ty=Tensor[(3), int32] */;
    %153 = cast(%var_756, dtype="bool") /* ty=Tensor[(7, 9, 7), bool] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %155 = cast(%var_756, dtype="float64") /* ty=Tensor[(7, 9, 7), float64] */;
    %156 = greater(%153, %154) /* ty=Tensor[(7, 9, 7), bool] */;
    %157 = tan(%155) /* ty=Tensor[(7, 9, 7), float64] */;
    (%156, %157)
  };
  %158(%var_778, %var_779) /* ty=(Tensor[(7, 9, 7), bool], Tensor[(7, 9, 7), float64]) */
}

def @func_3714(%var_3684: Tensor[(33), uint64]) -> (Tensor[(3, 11, 3), uint64], Tensor[(33), uint64], Tensor[(99), uint64], Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), float32]) {
  %159 = cast(%var_3684, dtype="uint64") /* ty=Tensor[(33), uint64] */;
  %160 = cast(meta[relay.Constant][10] /* ty=Tensor[(99), uint64] */, dtype="uint64") /* ty=Tensor[(99), uint64] */;
  %161 = reshape(%159, newshape=[1, 11, 3]) /* ty=Tensor[(1, 11, 3), uint64] */;
  %162 = reshape(%160, newshape=[3, 11, 3]) /* ty=Tensor[(3, 11, 3), uint64] */;
  %163 = @func_2798() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %164 = @func_2109() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) */;
  %165 = %164.1;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %167 = log2(%166) /* ty=Tensor[(10, 2, 14), float64] */;
  %168 = cast(%167, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
  %169 = @func_3368(%161, %162) /* ty=Tensor[(3, 11, 3), uint64] */;
  %170 = %163.0;
  %171 = sigmoid(%168) /* ty=Tensor[(10, 2, 14), float32] */;
  (%169, %var_3684, meta[relay.Constant][10] /* ty=Tensor[(99), uint64] */, %170, %171)
}

def @func_4276() -> (Tensor[(10, 2, 14), bool],) {
  %174 = fn () -> (Tensor[(10, 2, 14), bool],) {
    %172 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %173 = %172.0;
    (%173,)
  };
  %174() /* ty=(Tensor[(10, 2, 14), bool],) */
}

def @func_3448(%var_3440: Tensor[(15, 4, 16), float32]) -> (Tensor[(15, 4, 16), bool],) {
  %175 = @func_2395() /* ty=Tensor[(15, 4, 16), float32] */;
  %176 = cast(%var_3440, dtype="bool") /* ty=Tensor[(15, 4, 16), bool] */;
  %177 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%175, dtype="bool") /* ty=Tensor[(15, 4, 16), bool] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %180 = less(%178, %179) /* ty=Tensor[(15, 4, 16), bool] */;
  (%180,)
}

def @func_2378() -> (Tensor[(15, 4, 16), float32],) {
  %181 = @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */;
  %182 = %181.2;
  (%182,)
}

def @func_2236(%var_2227: Tensor[(15, 4, 16), float32]) -> Tensor[(15, 4, 16), bool] {
  %183 = @func_1747() /* ty=Tensor[(15, 4, 16), float32] */;
  %184 = cast(%var_2227, dtype="bool") /* ty=Tensor[(15, 4, 16), bool] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="bool") /* ty=Tensor[(15, 4, 16), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%186, %187) /* ty=Tensor[(15, 4, 16), bool] */
}

def @func_1167() -> (Tensor[(10, 2, 14), bool],) {
  %188 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %189 = %188.0;
  (%189,)
}

def @func_5357(%var_5355: Tensor[(10, 2, 14), bool]) -> (Tensor[(10, 2, 14), float32], Tensor[(11, 13, 7), int64], Tensor[(1001), bool]) {
  @func_5354(%var_5355) /* ty=(Tensor[(10, 2, 14), float32], Tensor[(11, 13, 7), int64], Tensor[(1001), bool]) */
}

def @func_2833(%var_2831: Tensor[(132, 2), uint16], %var_2832: int16) -> (Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64], Tensor[(132, 2), uint16], int16) {
  %200 = fn (%var_2824: Tensor[(132, 2), uint16], %var_2825: int16) -> (Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64], Tensor[(132, 2), uint16], int16) {
    %190 = @func_2759() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64]) */;
    %191 = @func_1249() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %192 = cast(%var_2824, dtype="uint16") /* ty=Tensor[(132, 2), uint16] */;
    %193 = cast(%var_2825, dtype="int16") /* ty=int16 */;
    %194 = reshape(%192, newshape=[264]) /* ty=Tensor[(264), uint16] */;
    %195 = reshape(%193, newshape=[]) /* ty=int16 */;
    %196 = @func_671(%194, %195) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(18, 2), int16], Tensor[(12, 2, 11), uint16], Tensor[(11, 13, 7), float64], Tensor[(2, 7, 3), float64], Tensor[(42), float64]) */;
    %197 = %190.1;
    %198 = %191.0;
    %199 = %196.4;
    (%197, %198, %199, %var_2824, %var_2825)
  };
  %200(%var_2831, %var_2832) /* ty=(Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64], Tensor[(132, 2), uint16], int16) */
}

def @func_4942() -> Tensor[(11, 13, 7), bool] {
  @func_4940() /* ty=Tensor[(11, 13, 7), bool] */
}

def @func_594(%var_583: Tensor[(12, 2, 11), uint16]) -> (Tensor[(12, 2, 11), uint16], Tensor[(12, 2, 11), float64]) {
  %201 = cast(%var_583, dtype="uint16") /* ty=Tensor[(12, 2, 11), uint16] */;
  %202 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(12, 2, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 2, 11), uint16] */, dtype="uint16") /* ty=Tensor[(12, 2, 11), uint16] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %205 = cast(%var_583, dtype="float64") /* ty=Tensor[(12, 2, 11), float64] */;
  %206 = maximum(%203, %204) /* ty=Tensor[(12, 2, 11), uint16] */;
  %207 = acos(%205) /* ty=Tensor[(12, 2, 11), float64] */;
  (%206, %207)
}

def @func_2800() -> (Tensor[(15, 4, 16), float32],) {
  @func_2798() /* ty=(Tensor[(15, 4, 16), float32],) */
}

def @func_1906() -> (Tensor[(15, 4, 16), float32], int16, Tensor[(1001), float64], Tensor[(7, 6), float64]) {
  %215 = fn () -> (Tensor[(15, 4, 16), float32], int16, Tensor[(1001), float64], Tensor[(7, 6), float64]) {
    %208 = cast(meta[relay.Constant][12] /* ty=Tensor[(1001), float64] */, dtype="float64") /* ty=Tensor[(1001), float64] */;
    %209 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
    %210 = reshape(%208, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
    %211 = reshape(%209, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %212 = @func_564(%210, %211) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(36), int16], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), int16], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(12, 3, 1), float32]) */;
    %213 = @func_1747() /* ty=Tensor[(15, 4, 16), float32] */;
    %214 = %212.1;
    (%213, %214, meta[relay.Constant][12] /* ty=Tensor[(1001), float64] */, meta[relay.Constant][13] /* ty=Tensor[(7, 6), float64] */)
  };
  %215() /* ty=(Tensor[(15, 4, 16), float32], int16, Tensor[(1001), float64], Tensor[(7, 6), float64]) */
}

def @func_2523(%var_2520: Tensor[(8, 14, 2), uint8], %var_2521: Tensor[(8, 14, 2), uint8], %var_2522: Tensor[(13, 77), bool]) -> (Tensor[(8, 14, 2), uint8], Tensor[(11, 13, 7), bool], Tensor[(13, 77), bool], Tensor[(8, 14, 2), float32], Tensor[(12, 2, 11), float64]) {
  %231 = fn (%var_2428: Tensor[(8, 14, 2), uint8], %var_2429: Tensor[(8, 14, 2), uint8], %var_2455: Tensor[(13, 77), bool]) -> (Tensor[(8, 14, 2), uint8], Tensor[(11, 13, 7), bool], Tensor[(13, 77), bool], Tensor[(8, 14, 2), float32], Tensor[(12, 2, 11), float64]) {
    %216 = cast(%var_2429, dtype="uint8") /* ty=Tensor[(8, 14, 2), uint8] */;
    %217 = shape_of(%var_2428, dtype="int32") /* ty=Tensor[(3), int32] */;
    %218 = cast(%var_2428, dtype="uint8") /* ty=Tensor[(8, 14, 2), uint8] */;
    %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %220 = cast(%var_2455, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
    %221 = cast(%var_2455, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
    %222 = reshape(%220, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
    %223 = reshape(%221, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
    %224 = @func_1285(%222, %223) /* ty=(Tensor[(11, 13, 7), int64], Tensor[(11, 13, 7), bool]) */;
    %225 = cast(%var_2429, dtype="float32") /* ty=Tensor[(8, 14, 2), float32] */;
    %226 = @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */;
    %227 = bitwise_xor(%218, %219) /* ty=Tensor[(8, 14, 2), uint8] */;
    %228 = %224.1;
    %229 = acosh(%225) /* ty=Tensor[(8, 14, 2), float32] */;
    %230 = %226.3;
    (%227, %228, %var_2455, %229, %230)
  };
  %231(%var_2520, %var_2521, %var_2522) /* ty=(Tensor[(8, 14, 2), uint8], Tensor[(11, 13, 7), bool], Tensor[(13, 77), bool], Tensor[(8, 14, 2), float32], Tensor[(12, 2, 11), float64]) */
}

def @func_5628(%var_5627: Tensor[(2016), bool]) -> (Tensor[(11, 13, 7), bool], Tensor[(12, 12, 14), float32], Tensor[(2016), bool]) {
  %239 = fn (%var_5623: Tensor[(2016), bool]) -> (Tensor[(11, 13, 7), bool], Tensor[(12, 12, 14), float32], Tensor[(2016), bool]) {
    %232 = cast(%var_5623, dtype="bool") /* ty=Tensor[(2016), bool] */;
    %233 = cast(%var_5623, dtype="bool") /* ty=Tensor[(2016), bool] */;
    %234 = reshape(%232, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), bool] */;
    %235 = reshape(%233, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), bool] */;
    %236 = @func_3832(%234, %235) /* ty=(Tensor[(12, 12, 14), float32], Tensor[(3, 11, 3), uint64], Tensor[(33), uint64], Tensor[(99), uint64]) */;
    %237 = @func_4940() /* ty=Tensor[(11, 13, 7), bool] */;
    %238 = %236.0;
    (%237, %238, %var_5623)
  };
  %239(%var_5627) /* ty=(Tensor[(11, 13, 7), bool], Tensor[(12, 12, 14), float32], Tensor[(2016), bool]) */
}

def @func_5530() -> Tensor[(15, 4, 16), float32] {
  @func_5528() /* ty=Tensor[(15, 4, 16), float32] */
}

def @func_5293(%var_5291: Tensor[(42), float64]) -> (Tensor[(42), bool],) {
  @func_5290(%var_5291) /* ty=(Tensor[(42), bool],) */
}

def @func_2360(%var_2358: Tensor[(91, 11), bool]) -> (Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), bool], Tensor[(91, 11), bool]) {
  @func_2357(%var_2358) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), bool], Tensor[(91, 11), bool]) */
}

def @func_3604() -> (Tensor[(42), float64], Tensor[(15, 4, 16), float32], Tensor[(11, 13, 11), uint8]) {
  @func_3602() /* ty=(Tensor[(42), float64], Tensor[(15, 4, 16), float32], Tensor[(11, 13, 11), uint8]) */
}

def @func_5053() -> (Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) {
  @func_5051() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) */
}

def @func_708(%var_692: Tensor[(11, 13, 7), bool]) -> (Tensor[(11, 13, 7), float32],) {
  %240 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %241 = %240.0;
  %242 = cast(%var_692, dtype="float32") /* ty=Tensor[(11, 13, 7), float32] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%241, dtype="float32") /* ty=Tensor[(11, 13, 7), float32] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %246 = floor_divide(%244, %245) /* ty=Tensor[(11, 13, 7), float32] */;
  (%246,)
}

def @func_4394() -> (Tensor[(10, 2, 14), bool],) {
  %249 = fn () -> (Tensor[(10, 2, 14), bool],) {
    %247 = @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %248 = %247.0;
    (%248,)
  };
  %249() /* ty=(Tensor[(10, 2, 14), bool],) */
}

def @func_1656() -> Tensor[(10, 2, 14), bool] {
  @func_1654() /* ty=Tensor[(10, 2, 14), bool] */
}

def @func_4311(%var_4283: Tensor[(960), float32]) -> (Tensor[(264), uint16], Tensor[(960), float32], Tensor[(960), float32], Tensor[(18, 2), int16], int16, Tensor[(2, 15), bool], Tensor[(30), bool], Tensor[(12, 2, 11), float64]) {
  %250 = @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */;
  %251 = cast(%var_4283, dtype="float32") /* ty=Tensor[(960), float32] */;
  %252 = cast(%var_4283, dtype="bool") /* ty=Tensor[(960), bool] */;
  %253 = reshape(%251, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %254 = reshape(%252, newshape=[15, 4, 16]) /* ty=Tensor[(15, 4, 16), bool] */;
  %255 = @func_3508(%253, %254) /* ty=(Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool], Tensor[(960), float32], Tensor[(15, 4, 16), int64], Tensor[(15, 4, 16), uint32]) */;
  %256 = %250.4;
  %257 = cast(%256, dtype="uint16") /* ty=Tensor[(264), uint16] */;
  %258 = cast(meta[relay.Constant][14] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %259 = reshape(%257, newshape=[264]) /* ty=Tensor[(264), uint16] */;
  %260 = reshape(%258, newshape=[]) /* ty=int16 */;
  %261 = @func_671(%259, %260) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(18, 2), int16], Tensor[(12, 2, 11), uint16], Tensor[(11, 13, 7), float64], Tensor[(2, 7, 3), float64], Tensor[(42), float64]) */;
  %262 = cast(meta[relay.Constant][15] /* ty=Tensor[(30), bool] */, dtype="bool") /* ty=Tensor[(30), bool] */;
  %263 = cast(meta[relay.Constant][15] /* ty=Tensor[(30), bool] */, dtype="bool") /* ty=Tensor[(30), bool] */;
  %264 = reshape(%262, newshape=[2, 15]) /* ty=Tensor[(2, 15), bool] */;
  %265 = reshape(%263, newshape=[2, 15]) /* ty=Tensor[(2, 15), bool] */;
  %266 = @func_918(%264, %265) /* ty=(Tensor[(2, 15), bool], Tensor[(11, 13, 7), float64]) */;
  %267 = @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */;
  %268 = %255.2;
  %269 = %261.2;
  %270 = %266.0;
  %271 = %267.3;
  (%256, %268, %var_4283, %269, meta[relay.Constant][14] /* ty=int16 */, %270, meta[relay.Constant][15] /* ty=Tensor[(30), bool] */, %271)
}

def @func_5457(%var_5428: float64, %var_5429: Tensor[(6, 10, 11), float64]) -> (Tensor[(6, 10, 11), float64], Tensor[(6, 10, 11), uint16]) {
  %272 = cast(%var_5428, dtype="float64") /* ty=float64 */;
  %273 = cast(%var_5429, dtype="float64") /* ty=Tensor[(6, 10, 11), float64] */;
  %274 = cast(%var_5428, dtype="uint16") /* ty=uint16 */;
  %275 = cast(%var_5429, dtype="uint16") /* ty=Tensor[(6, 10, 11), uint16] */;
  %276 = divide(%272, %273) /* ty=Tensor[(6, 10, 11), float64] */;
  %277 = add(%274, %275) /* ty=Tensor[(6, 10, 11), uint16] */;
  (%276, %277)
}

def @func_2111() -> (Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) {
  @func_2109() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) */
}

def @func_5742(%var_5740: Tensor[(10, 2, 14), float32], %var_5741: Tensor[(45), float32]) -> (Tensor[(10, 2, 14), int32], Tensor[(45), float32], Tensor[(3, 1, 15), float64]) {
  %290 = fn (%var_5708: Tensor[(10, 2, 14), float32], %var_5720: Tensor[(45), float32]) -> (Tensor[(10, 2, 14), int32], Tensor[(45), float32], Tensor[(3, 1, 15), float64]) {
    %278 = @func_2870() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(10, 2, 14), float32]) */;
    %279 = %278.3;
    %280 = cast(%var_5708, dtype="int32") /* ty=Tensor[(10, 2, 14), int32] */;
    %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%279, dtype="int32") /* ty=Tensor[(10, 2, 14), int32] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %284 = cast(%var_5720, dtype="float32") /* ty=Tensor[(45), float32] */;
    %285 = reshape(%284, newshape=[3, 1, 15]) /* ty=Tensor[(3, 1, 15), float32] */;
    %286 = @func_3776(%285) /* ty=Tensor[(3, 1, 15), float32] */;
    %287 = cast(%286, dtype="float64") /* ty=Tensor[(3, 1, 15), float64] */;
    %288 = multiply(%282, %283) /* ty=Tensor[(10, 2, 14), int32] */;
    %289 = cos(%287) /* ty=Tensor[(3, 1, 15), float64] */;
    (%288, %var_5720, %289)
  };
  %290(%var_5740, %var_5741) /* ty=(Tensor[(10, 2, 14), int32], Tensor[(45), float32], Tensor[(3, 1, 15), float64]) */
}

def @func_5461(%var_5459: float64, %var_5460: Tensor[(6, 10, 11), float64]) -> (Tensor[(6, 10, 11), float64], Tensor[(6, 10, 11), uint16]) {
  @func_5457(%var_5459, %var_5460) /* ty=(Tensor[(6, 10, 11), float64], Tensor[(6, 10, 11), uint16]) */
}

def @func_922(%var_920: Tensor[(2, 15), bool], %var_921: Tensor[(2, 15), bool]) -> (Tensor[(2, 15), bool], Tensor[(11, 13, 7), float64]) {
  @func_918(%var_920, %var_921) /* ty=(Tensor[(2, 15), bool], Tensor[(11, 13, 7), float64]) */
}

def @func_1414() -> (Tensor[(10, 2, 14), bool],) {
  @func_1412() /* ty=(Tensor[(10, 2, 14), bool],) */
}

def @func_2209() -> (Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) {
  @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */
}

def @func_3451(%var_3449: Tensor[(15, 4, 16), float32]) -> (Tensor[(15, 4, 16), bool],) {
  @func_3448(%var_3449) /* ty=(Tensor[(15, 4, 16), bool],) */
}

def @func_2681() -> (Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool]) {
  %294 = fn () -> (Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool]) {
    %291 = @func_1412() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %292 = %291.0;
    %293 = @func_1654() /* ty=Tensor[(10, 2, 14), bool] */;
    (%292, %293)
  };
  %294() /* ty=(Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool]) */
}

def @func_2928(%var_2877: Tensor[(7, 10, 5), uint8], %var_2878: Tensor[(7, 10, 5), uint8], %var_2890: Tensor[(960), float32], %var_2926: Tensor[(42, 1), float64]) -> (Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(7, 10, 5), float32], Tensor[(15, 4, 16), bool], Tensor[(42), float64], Tensor[(1, 1001), float64], Tensor[(42, 1), float64]) {
  %295 = cast(%var_2890, dtype="float32") /* ty=Tensor[(960), float32] */;
  %296 = reshape(%295, newshape=[15, 4, 16]) /* ty=Tensor[(15, 4, 16), float32] */;
  %297 = @func_2344(%296) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), bool], Tensor[(15, 4, 16), float32]) */;
  %298 = cast(%var_2877, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %299 = shape_of(%var_2878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%var_2878, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %302 = floor_divide(%300, %301) /* ty=Tensor[(7, 10, 5), float64] */;
  %303 = cast(%var_2878, dtype="bool") /* ty=Tensor[(7, 10, 5), bool] */;
  %304 = shape_of(%var_2877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_2877, dtype="bool") /* ty=Tensor[(7, 10, 5), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %307 = not_equal(%305, %306) /* ty=Tensor[(7, 10, 5), bool] */;
  %308 = cast(%307, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
  %309 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%302, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %312 = %297.0;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(15, 4, 16), float32] */;
  %314 = reshape(%313, newshape=[15, 4, 16]) /* ty=Tensor[(15, 4, 16), float32] */;
  %315 = @func_2344(%314) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), bool], Tensor[(15, 4, 16), float32]) */;
  %316 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 1001), float64] */, dtype="float64") /* ty=Tensor[(1, 1001), float64] */;
  %317 = cast(%var_2926, dtype="float64") /* ty=Tensor[(42, 1), float64] */;
  %318 = reshape(%316, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
  %319 = reshape(%317, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %320 = @func_564(%318, %319) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(36), int16], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), int16], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(12, 3, 1), float32]) */;
  %321 = multiply(%310, %311) /* ty=Tensor[(7, 10, 5), float32] */;
  %322 = %315.1;
  %323 = %320.6;
  (%312, %var_2890, %321, %322, %323, meta[relay.Constant][16] /* ty=Tensor[(1, 1001), float64] */, %var_2926)
}

def @func_3173() -> (Tensor[(15, 4, 16), float32],) {
  %326 = fn () -> (Tensor[(15, 4, 16), float32],) {
    %324 = @func_2412() /* ty=(Tensor[(15, 4, 16), float32],) */;
    %325 = %324.0;
    (%325,)
  };
  %326() /* ty=(Tensor[(15, 4, 16), float32],) */
}

def @func_5051() -> (Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) {
  %327 = @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */;
  %328 = @func_2680() /* ty=(Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool]) */;
  %329 = %327.5;
  %330 = @func_4940() /* ty=Tensor[(11, 13, 7), bool] */;
  %331 = %328.1;
  (%329, %330, %331)
}

def @func_1461() -> Tensor[(10, 2, 14), float32] {
  %332 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %333 = %332.0;
  %334 = cast(%333, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
  %335 = log(%334) /* ty=Tensor[(10, 2, 14), float64] */;
  %336 = cast(%335, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
  cosh(%336) /* ty=Tensor[(10, 2, 14), float32] */
}

def @func_711(%var_709: Tensor[(11, 13, 7), bool]) -> (Tensor[(11, 13, 7), float32],) {
  @func_708(%var_709) /* ty=(Tensor[(11, 13, 7), float32],) */
}

def @func_2761() -> (Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64]) {
  @func_2759() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64]) */
}

def @func_4450() -> (Tensor[(10, 2, 14), bool],) {
  %339 = fn () -> (Tensor[(10, 2, 14), bool],) {
    %337 = @func_4393() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %338 = %337.0;
    (%338,)
  };
  %339() /* ty=(Tensor[(10, 2, 14), bool],) */
}

def @func_4823() -> Tensor[(15, 4, 16), float32] {
  @func_4821() /* ty=Tensor[(15, 4, 16), float32] */
}

def @func_675(%var_673: Tensor[(264), uint16], %var_674: int16) -> (Tensor[(12, 3, 1), int16], int16, Tensor[(18, 2), int16], Tensor[(12, 2, 11), uint16], Tensor[(11, 13, 7), float64], Tensor[(2, 7, 3), float64], Tensor[(42), float64]) {
  @func_671(%var_673, %var_674) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(18, 2), int16], Tensor[(12, 2, 11), uint16], Tensor[(11, 13, 7), float64], Tensor[(2, 7, 3), float64], Tensor[(42), float64]) */
}

def @func_1035() -> (Tensor[(11, 13, 7), float64],) {
  %344 = fn () -> (Tensor[(11, 13, 7), float64],) {
    %340 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
    %341 = %340.0;
    %342 = cast(%341, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
    %343 = sqrt(%342) /* ty=Tensor[(11, 13, 7), float64] */;
    (%343,)
  };
  %344() /* ty=(Tensor[(11, 13, 7), float64],) */
}

def @func_3508(%var_3473: Tensor[(960), float32], %var_3485: Tensor[(15, 4, 16), bool]) -> (Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), bool], Tensor[(960), float32], Tensor[(15, 4, 16), int64], Tensor[(15, 4, 16), uint32]) {
  %345 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %346 = cast(%var_3473, dtype="float32") /* ty=Tensor[(960), float32] */;
  %347 = reshape(%346, newshape=[15, 4, 16]) /* ty=Tensor[(15, 4, 16), float32] */;
  %348 = @func_2236(%347) /* ty=Tensor[(15, 4, 16), bool] */;
  %349 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 4, 16), bool] */, dtype="int64") /* ty=Tensor[(15, 4, 16), int64] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%348, dtype="int64") /* ty=Tensor[(15, 4, 16), int64] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %353 = cast(%var_3485, dtype="uint32") /* ty=Tensor[(15, 4, 16), uint32] */;
  %354 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%348, dtype="uint32") /* ty=Tensor[(15, 4, 16), uint32] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %357 = @func_1435() /* ty=Tensor[(10, 2, 14), bool] */;
  %358 = %345.0;
  %359 = bitwise_or(%351, %352) /* ty=Tensor[(15, 4, 16), int64] */;
  %360 = right_shift(%355, %356) /* ty=Tensor[(15, 4, 16), uint32] */;
  (%357, %358, %var_3473, %359, %360)
}

def @func_4228() -> (Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), float64]) {
  %361 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %362 = %361.0;
  %363 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 13, 7), bool] */, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%362, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %367 = @func_1034() /* ty=(Tensor[(11, 13, 7), float64],) */;
  %368 = logical_or(%365, %366) /* ty=Tensor[(11, 13, 7), bool] */;
  %369 = %367.0;
  (%368, %369)
}

def @func_4367() -> (Tensor[(10, 2, 14), float64], Tensor[(11, 13, 7), int16], Tensor[(1573), float32], Tensor[(42), float64]) {
  %382 = fn () -> (Tensor[(10, 2, 14), float64], Tensor[(11, 13, 7), int16], Tensor[(1573), float32], Tensor[(42), float64]) {
    %370 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %371 = %370.0;
    %372 = cast(%371, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
    %373 = cast(meta[relay.Constant][19] /* ty=Tensor[(1573), float32] */, dtype="float32") /* ty=Tensor[(1573), float32] */;
    %374 = cast(meta[relay.Constant][19] /* ty=Tensor[(1573), float32] */, dtype="float32") /* ty=Tensor[(1573), float32] */;
    %375 = cast(meta[relay.Constant][20] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %376 = reshape(%373, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
    %377 = reshape(%374, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
    %378 = reshape(%375, newshape=[14, 3]) /* ty=Tensor[(14, 3), float64] */;
    %379 = @func_1380(%376, %377, %378) /* ty=(Tensor[(11, 13, 11), float32], Tensor[(30), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(11, 13, 7), int16], Tensor[(1001, 1), float64], Tensor[(14, 3), float64], Tensor[(11, 13, 11), float64]) */;
    %380 = sin(%372) /* ty=Tensor[(10, 2, 14), float64] */;
    %381 = %379.4;
    (%380, %381, meta[relay.Constant][19] /* ty=Tensor[(1573), float32] */, meta[relay.Constant][20] /* ty=Tensor[(42), float64] */)
  };
  %382() /* ty=(Tensor[(10, 2, 14), float64], Tensor[(11, 13, 7), int16], Tensor[(1573), float32], Tensor[(42), float64]) */
}

def @func_3836(%var_3834: Tensor[(12, 12, 14), bool], %var_3835: Tensor[(12, 12, 14), bool]) -> (Tensor[(12, 12, 14), float32], Tensor[(3, 11, 3), uint64], Tensor[(33), uint64], Tensor[(99), uint64]) {
  @func_3832(%var_3834, %var_3835) /* ty=(Tensor[(12, 12, 14), float32], Tensor[(3, 11, 3), uint64], Tensor[(33), uint64], Tensor[(99), uint64]) */
}

def @func_4806(%var_4804: Tensor[(11, 5, 8), float32], %var_4805: Tensor[(42), float64]) -> (Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(11, 5, 8), float32]) {
  %396 = fn (%var_4764: Tensor[(11, 5, 8), float32], %var_4780: Tensor[(42), float64]) -> (Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(11, 5, 8), float32]) {
    %383 = cast(%var_4780, dtype="float64") /* ty=Tensor[(42), float64] */;
    %384 = reshape(%383, newshape=[2, 7, 3]) /* ty=Tensor[(2, 7, 3), float64] */;
    %385 = @func_292(%384) /* ty=(Tensor[(2, 7, 3), float64],) */;
    %386 = cast(%var_4764, dtype="float32") /* ty=Tensor[(11, 5, 8), float32] */;
    %387 = log(%386) /* ty=Tensor[(11, 5, 8), float32] */;
    %388 = cast(%var_4764, dtype="uint8") /* ty=Tensor[(11, 5, 8), uint8] */;
    %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
    %390 = cast(%387, dtype="uint8") /* ty=Tensor[(11, 5, 8), uint8] */;
    %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %392 = left_shift(%390, %391) /* ty=Tensor[(11, 5, 8), uint8] */;
    %393 = cast(%392, dtype="float32") /* ty=Tensor[(11, 5, 8), float32] */;
    %394 = %385.0;
    %395 = log10(%393) /* ty=Tensor[(11, 5, 8), float32] */;
    (%394, %var_4780, %395)
  };
  %396(%var_4804, %var_4805) /* ty=(Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(11, 5, 8), float32]) */
}

def @func_443() -> (Tensor[(11, 13, 7), bool],) {
  %402 = fn () -> (Tensor[(11, 13, 7), bool],) {
    %397 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 13, 7), uint16] */, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
    %398 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(11, 13, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %399 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 13, 7), uint16] */, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
    %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %401 = greater_equal(%399, %400) /* ty=Tensor[(11, 13, 7), bool] */;
    (%401,)
  };
  %402() /* ty=(Tensor[(11, 13, 7), bool],) */
}

def @func_3311(%var_3309: int16, %var_3310: Tensor[(36), int16]) -> (Tensor[(10, 2, 14), bool], int16, Tensor[(36), int16], Tensor[(12, 3, 1), int16], Tensor[(15, 4, 16), float32], Tensor[(12, 3, 1), float64]) {
  %421 = fn (%var_3268: int16, %var_3269: Tensor[(36), int16]) -> (Tensor[(10, 2, 14), bool], int16, Tensor[(36), int16], Tensor[(12, 3, 1), int16], Tensor[(15, 4, 16), float32], Tensor[(12, 3, 1), float64]) {
    %403 = @func_2109() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) */;
    %404 = cast(%var_3268, dtype="int16") /* ty=int16 */;
    %405 = cast(%var_3268, dtype="int16") /* ty=int16 */;
    %406 = cast(%var_3269, dtype="int16") /* ty=Tensor[(36), int16] */;
    %407 = reshape(%405, newshape=[]) /* ty=int16 */;
    %408 = reshape(%406, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int16] */;
    %409 = @func_377(%407, %408) /* ty=(Tensor[(12, 3, 1), int16],) */;
    %410 = %409.0;
    %411 = cast(%410, dtype="int16") /* ty=Tensor[(12, 3, 1), int16] */;
    %412 = reshape(%404, newshape=[]) /* ty=int16 */;
    %413 = reshape(%411, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int16] */;
    %414 = @func_377(%412, %413) /* ty=(Tensor[(12, 3, 1), int16],) */;
    %415 = @func_2412() /* ty=(Tensor[(15, 4, 16), float32],) */;
    %416 = cast(%410, dtype="float64") /* ty=Tensor[(12, 3, 1), float64] */;
    %417 = %403.1;
    %418 = %414.0;
    %419 = %415.0;
    %420 = asin(%416) /* ty=Tensor[(12, 3, 1), float64] */;
    (%417, %var_3268, %var_3269, %418, %419, %420)
  };
  %421(%var_3309, %var_3310) /* ty=(Tensor[(10, 2, 14), bool], int16, Tensor[(36), int16], Tensor[(12, 3, 1), int16], Tensor[(15, 4, 16), float32], Tensor[(12, 3, 1), float64]) */
}

def @func_2798() -> (Tensor[(15, 4, 16), float32],) {
  %422 = @func_2378() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %423 = %422.0;
  (%423,)
}

def @func_1436() -> Tensor[(10, 2, 14), bool] {
  %425 = fn () -> Tensor[(10, 2, 14), bool] {
    %424 = @func_1412() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %424.0
  };
  %425() /* ty=Tensor[(10, 2, 14), bool] */
}

def @func_4601() -> (Tensor[(11, 13, 7), bool],) {
  %426 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %427 = %426.0;
  (%427,)
}

def @func_1498() -> (Tensor[(11, 13, 7), float64],) {
  %430 = fn () -> (Tensor[(11, 13, 7), float64],) {
    %428 = @func_1034() /* ty=(Tensor[(11, 13, 7), float64],) */;
    %429 = %428.0;
    (%429,)
  };
  %430() /* ty=(Tensor[(11, 13, 7), float64],) */
}

def @func_3974(%var_3934: Tensor[(8, 13, 1), int8], %var_3935: Tensor[(8, 13, 2), int8], %var_3939: Tensor[(8, 13, 2), int8]) -> (Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), float32], Tensor[(8, 13, 2), float64]) {
  %431 = @func_2870() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(10, 2, 14), float32]) */;
  %432 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %433 = cast(%var_3934, dtype="float32") /* ty=Tensor[(8, 13, 1), float32] */;
  %434 = tan(%433) /* ty=Tensor[(8, 13, 1), float32] */;
  %435 = cast(%var_3934, dtype="int8") /* ty=Tensor[(8, 13, 1), int8] */;
  %436 = cast(%var_3935, dtype="int8") /* ty=Tensor[(8, 13, 2), int8] */;
  %437 = left_shift(%435, %436) /* ty=Tensor[(8, 13, 2), int8] */;
  %438 = cast(%var_3939, dtype="float32") /* ty=Tensor[(8, 13, 2), float32] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="float32") /* ty=Tensor[(8, 13, 2), float32] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %442 = divide(%440, %441) /* ty=Tensor[(8, 13, 2), float32] */;
  %443 = cast(%434, dtype="int64") /* ty=Tensor[(8, 13, 1), int64] */;
  %444 = cast(%442, dtype="int64") /* ty=Tensor[(8, 13, 2), int64] */;
  %445 = logical_xor(%443, %444) /* ty=Tensor[(8, 13, 2), int64] */;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(8, 13, 2), float64] */;
  %447 = %431.0;
  %448 = %432.0;
  %449 = sin(%446) /* ty=Tensor[(8, 13, 2), float64] */;
  (%447, %448, %449)
}

def @func_5110(%var_5101: Tensor[(4, 11, 12), float64]) -> (Tensor[(4, 11, 12), float64], Tensor[(11, 13, 7), bool]) {
  %450 = cast(%var_5101, dtype="float64") /* ty=Tensor[(4, 11, 12), float64] */;
  %451 = @func_2207() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), float32], Tensor[(15, 4, 16), float32], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), bool]) */;
  %452 = tan(%450) /* ty=Tensor[(4, 11, 12), float64] */;
  %453 = %451.0;
  (%452, %453)
}

def @func_4882(%var_4880: Tensor[(7, 6), float64], %var_4881: Tensor[(1, 350), uint8]) -> (Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float32], Tensor[(7, 6), float64], Tensor[(1001, 1), float32], Tensor[(1, 350), uint8], Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), bool]) {
  @func_4878(%var_4880, %var_4881) /* ty=(Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float32], Tensor[(7, 6), float64], Tensor[(1001, 1), float32], Tensor[(1, 350), uint8], Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), bool]) */
}

def @func_3157(%var_3154: Tensor[(42), float64], %var_3155: Tensor[(1001), float32], %var_3156: Tensor[(350, 1), uint8]) -> (Tensor[(10, 2, 14), bool], Tensor[(42), float64], Tensor[(12, 3, 1001), bool], Tensor[(11, 13, 7), float64], Tensor[(11, 13, 7), float32], Tensor[(1001), float32], Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(350, 1), uint8]) {
  %503 = fn (%var_3052: Tensor[(42), float64], %var_3099: Tensor[(1001), float32], %var_3133: Tensor[(350, 1), uint8]) -> (Tensor[(10, 2, 14), bool], Tensor[(42), float64], Tensor[(12, 3, 1001), bool], Tensor[(11, 13, 7), float64], Tensor[(11, 13, 7), float32], Tensor[(1001), float32], Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(350, 1), uint8]) {
    %454 = cast(meta[relay.Constant][23] /* ty=Tensor[(1001), float64] */, dtype="float64") /* ty=Tensor[(1001), float64] */;
    %455 = cast(%var_3052, dtype="float64") /* ty=Tensor[(42), float64] */;
    %456 = reshape(%454, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
    %457 = reshape(%455, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %458 = @func_564(%456, %457) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(36), int16], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), int16], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(12, 3, 1), float32]) */;
    %459 = %458.7;
    %460 = cast(%459, dtype="bool") /* ty=Tensor[(12, 3, 1), bool] */;
    %461 = cast(meta[relay.Constant][23] /* ty=Tensor[(1001), float64] */, dtype="bool") /* ty=Tensor[(1001), bool] */;
    %462 = not_equal(%460, %461) /* ty=Tensor[(12, 3, 1001), bool] */;
    %463 = cast(%462, dtype="bool") /* ty=Tensor[(12, 3, 1001), bool] */;
    %464 = cast(%459, dtype="bool") /* ty=Tensor[(12, 3, 1), bool] */;
    %465 = less_equal(%463, %464) /* ty=Tensor[(12, 3, 1001), bool] */;
    %466 = cast(%465, dtype="bool") /* ty=Tensor[(12, 3, 1001), bool] */;
    %467 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
    %468 = cast(%462, dtype="bool") /* ty=Tensor[(12, 3, 1001), bool] */;
    %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %470 = @func_2759() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64]) */;
    %471 = cast(%var_3099, dtype="bool") /* ty=Tensor[(1001), bool] */;
    %472 = reshape(%471, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
    %473 = @func_708(%472) /* ty=(Tensor[(11, 13, 7), float32],) */;
    %474 = cast(meta[relay.Constant][23] /* ty=Tensor[(1001), float64] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %475 = acosh(%474) /* ty=Tensor[(1001), float32] */;
    %476 = cast(%var_3099, dtype="uint64") /* ty=Tensor[(1001), uint64] */;
    %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(1), int32] */;
    %478 = cast(%475, dtype="uint64") /* ty=Tensor[(1001), uint64] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %480 = logical_xor(%478, %479) /* ty=Tensor[(1001), uint64] */;
    %481 = cast(%480, dtype="float64") /* ty=Tensor[(1001), float64] */;
    %482 = atanh(%481) /* ty=Tensor[(1001), float64] */;
    %483 = cast(%482, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %484 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
    %485 = @func_2759() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64]) */;
    %486 = cast(%var_3133, dtype="uint8") /* ty=Tensor[(350, 1), uint8] */;
    %487 = cast(%var_3133, dtype="uint8") /* ty=Tensor[(350, 1), uint8] */;
    %488 = %484.0;
    %489 = cast(%488, dtype="float32") /* ty=Tensor[(15, 4, 16), float32] */;
    %490 = cast(%var_3052, dtype="float64") /* ty=Tensor[(42), float64] */;
    %491 = reshape(%486, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), uint8] */;
    %492 = reshape(%487, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), uint8] */;
    %493 = reshape(%489, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %494 = reshape(%490, newshape=[42, 1]) /* ty=Tensor[(42, 1), float64] */;
    %495 = @func_2928(%491, %492, %493, %494) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(7, 10, 5), float32], Tensor[(15, 4, 16), bool], Tensor[(42), float64], Tensor[(1, 1001), float64], Tensor[(42, 1), float64]) */;
    %496 = @func_1654() /* ty=Tensor[(10, 2, 14), bool] */;
    %497 = greater(%468, %469) /* ty=Tensor[(12, 3, 1001), bool] */;
    %498 = %470.2;
    %499 = %473.0;
    %500 = sin(%483) /* ty=Tensor[(1001), float32] */;
    %501 = %485.0;
    %502 = %495.1;
    (%496, %var_3052, %497, %498, %499, %500, %488, %501, %502, %var_3133)
  };
  %503(%var_3154, %var_3155, %var_3156) /* ty=(Tensor[(10, 2, 14), bool], Tensor[(42), float64], Tensor[(12, 3, 1001), bool], Tensor[(11, 13, 7), float64], Tensor[(11, 13, 7), float32], Tensor[(1001), float32], Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(350, 1), uint8]) */
}

def @func_1249() -> (Tensor[(10, 2, 14), bool],) {
  %504 = @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %505 = %504.0;
  (%505,)
}

def @func_1380(%var_1350: Tensor[(11, 13, 11), float32], %var_1351: Tensor[(11, 13, 11), float32], %var_1373: Tensor[(14, 3), float64]) -> (Tensor[(11, 13, 11), float32], Tensor[(30), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(11, 13, 7), int16], Tensor[(1001, 1), float64], Tensor[(14, 3), float64], Tensor[(11, 13, 11), float64]) {
  %506 = cast(%var_1351, dtype="float32") /* ty=Tensor[(11, 13, 11), float32] */;
  %507 = shape_of(%var_1350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%var_1350, dtype="float32") /* ty=Tensor[(11, 13, 11), float32] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %510 = cast(meta[relay.Constant][24] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %511 = cast(meta[relay.Constant][25] /* ty=Tensor[(441), float32] */, dtype="float32") /* ty=Tensor[(441), float32] */;
  %512 = reshape(%510, newshape=[15, 2, 11]) /* ty=Tensor[(15, 2, 11), float64] */;
  %513 = reshape(%511, newshape=[441]) /* ty=Tensor[(441), float32] */;
  %514 = @func_961(%512, %513) /* ty=(Tensor[(15, 2, 11), float64], Tensor[(7, 9, 7), float64], Tensor[(441), float32], Tensor[(7, 9, 7), bool], Tensor[(2, 15), bool], Tensor[(30), bool]) */;
  %515 = cast(meta[relay.Constant][26] /* ty=Tensor[(1001, 1), float64] */, dtype="float64") /* ty=Tensor[(1001, 1), float64] */;
  %516 = cast(%var_1373, dtype="float64") /* ty=Tensor[(14, 3), float64] */;
  %517 = reshape(%515, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
  %518 = reshape(%516, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %519 = @func_564(%517, %518) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(36), int16], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), int16], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(12, 3, 1), float32]) */;
  %520 = cast(%var_1351, dtype="float64") /* ty=Tensor[(11, 13, 11), float64] */;
  %521 = divide(%508, %509) /* ty=Tensor[(11, 13, 11), float32] */;
  %522 = %514.5;
  %523 = %519.4;
  %524 = sinh(%520) /* ty=Tensor[(11, 13, 11), float64] */;
  (%521, %522, meta[relay.Constant][24] /* ty=Tensor[(330), float64] */, meta[relay.Constant][25] /* ty=Tensor[(441), float32] */, %523, meta[relay.Constant][26] /* ty=Tensor[(1001, 1), float64] */, %var_1373, %524)
}

def @func_567(%var_565: Tensor[(11, 13, 7), float64], %var_566: Tensor[(42), float64]) -> (Tensor[(12, 3, 1), int16], int16, Tensor[(36), int16], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), int16], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(12, 3, 1), float32]) {
  %554 = fn (%var_509: Tensor[(11, 13, 7), float64], %var_554: Tensor[(42), float64]) -> (Tensor[(12, 3, 1), int16], int16, Tensor[(36), int16], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), int16], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(12, 3, 1), float32]) {
    %525 = cast(meta[relay.Constant][27] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %526 = cast(meta[relay.Constant][28] /* ty=Tensor[(36), int16] */, dtype="int16") /* ty=Tensor[(36), int16] */;
    %527 = reshape(%525, newshape=[]) /* ty=int16 */;
    %528 = reshape(%526, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int16] */;
    %529 = @func_377(%527, %528) /* ty=(Tensor[(12, 3, 1), int16],) */;
    %530 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
    %531 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
    %532 = %531.0;
    %533 = cast(%532, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
    %534 = acosh(%533) /* ty=Tensor[(11, 13, 7), float64] */;
    %535 = cast(%var_509, dtype="int16") /* ty=Tensor[(11, 13, 7), int16] */;
    %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%534, dtype="int16") /* ty=Tensor[(11, 13, 7), int16] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %539 = cast(%var_554, dtype="float64") /* ty=Tensor[(42), float64] */;
    %540 = reshape(%539, newshape=[2, 7, 3]) /* ty=Tensor[(2, 7, 3), float64] */;
    %541 = @func_292(%540) /* ty=(Tensor[(2, 7, 3), float64],) */;
    %542 = cast(meta[relay.Constant][27] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %543 = %529.0;
    %544 = cast(%543, dtype="int16") /* ty=Tensor[(12, 3, 1), int16] */;
    %545 = reshape(%542, newshape=[]) /* ty=int16 */;
    %546 = reshape(%544, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int16] */;
    %547 = @func_377(%545, %546) /* ty=(Tensor[(12, 3, 1), int16],) */;
    %548 = %547.0;
    %549 = cast(%548, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
    %550 = %530.0;
    %551 = minimum(%537, %538) /* ty=Tensor[(11, 13, 7), int16] */;
    %552 = %541.0;
    %553 = log10(%549) /* ty=Tensor[(12, 3, 1), float32] */;
    (%543, meta[relay.Constant][27] /* ty=int16 */, meta[relay.Constant][28] /* ty=Tensor[(36), int16] */, %550, %551, %552, %var_554, %553)
  };
  %554(%var_565, %var_566) /* ty=(Tensor[(12, 3, 1), int16], int16, Tensor[(36), int16], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), int16], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(12, 3, 1), float32]) */
}

def @func_1142() -> (Tensor[(10, 2, 14), bool],) {
  @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */
}

def @func_4100(%var_4096: Tensor[(224), uint8], %var_4097: Tensor[(1001), bool], %var_4098: Tensor[(960), float32], %var_4099: Tensor[(42), float64]) -> (Tensor[(8, 14, 2), float32], Tensor[(224), uint8], Tensor[(1001), bool], Tensor[(10, 2, 14), bool], Tensor[(960), float32], Tensor[(175, 2), uint8], Tensor[(960), float32], Tensor[(42), float64]) {
  @func_4094(%var_4096, %var_4097, %var_4098, %var_4099) /* ty=(Tensor[(8, 14, 2), float32], Tensor[(224), uint8], Tensor[(1001), bool], Tensor[(10, 2, 14), bool], Tensor[(960), float32], Tensor[(175, 2), uint8], Tensor[(960), float32], Tensor[(42), float64]) */
}

def @func_4821() -> Tensor[(15, 4, 16), float32] {
  %555 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %555.0
}

def @func_1140() -> (Tensor[(10, 2, 14), bool],) {
  %556 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 2, 14), uint16] */, dtype="uint16") /* ty=Tensor[(10, 2, 14), uint16] */;
  %557 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(10, 2, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 2, 14), uint16] */, dtype="uint16") /* ty=Tensor[(10, 2, 14), uint16] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %560 = add(%558, %559) /* ty=Tensor[(10, 2, 14), uint16] */;
  %561 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 2, 14), uint16] */, dtype="bool") /* ty=Tensor[(10, 2, 14), bool] */;
  %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%560, dtype="bool") /* ty=Tensor[(10, 2, 14), bool] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %565 = greater(%563, %564) /* ty=Tensor[(10, 2, 14), bool] */;
  (%565,)
}

def @func_1169() -> (Tensor[(10, 2, 14), bool],) {
  @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */
}

def @func_2871() -> (Tensor[(15, 4, 16), float32], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(10, 2, 14), float32]) {
  %576 = fn () -> (Tensor[(15, 4, 16), float32], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(10, 2, 14), float32]) {
    %566 = @func_2759() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64]) */;
    %567 = cast(meta[relay.Constant][31] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %568 = reshape(%567, newshape=[2, 7, 3]) /* ty=Tensor[(2, 7, 3), float64] */;
    %569 = @func_292(%568) /* ty=(Tensor[(2, 7, 3), float64],) */;
    %570 = @func_1140() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %571 = %570.0;
    %572 = cast(%571, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
    %573 = %566.0;
    %574 = %569.0;
    %575 = atan(%572) /* ty=Tensor[(10, 2, 14), float32] */;
    (%573, %574, meta[relay.Constant][31] /* ty=Tensor[(42), float64] */, %575)
  };
  %576() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(10, 2, 14), float32]) */
}

def @func_4160(%var_4158: float64, %var_4159: Tensor[(9, 13, 6), float64]) -> (Tensor[(11, 13, 7), float64], Tensor[(9, 13, 6), int32], Tensor[(9, 13, 6), float64]) {
  %594 = fn (%var_4102: float64, %var_4103: Tensor[(9, 13, 6), float64]) -> (Tensor[(11, 13, 7), float64], Tensor[(9, 13, 6), int32], Tensor[(9, 13, 6), float64]) {
    %577 = @func_1497() /* ty=(Tensor[(11, 13, 7), float64],) */;
    %578 = cast(%var_4103, dtype="int32") /* ty=Tensor[(9, 13, 6), int32] */;
    %579 = cast(%var_4102, dtype="int32") /* ty=int32 */;
    %580 = cast(%var_4102, dtype="bool") /* ty=bool */;
    %581 = cast(%var_4103, dtype="bool") /* ty=Tensor[(9, 13, 6), bool] */;
    %582 = greater(%580, %581) /* ty=Tensor[(9, 13, 6), bool] */;
    %583 = cast(%582, dtype="float64") /* ty=Tensor[(9, 13, 6), float64] */;
    %584 = tan(%583) /* ty=Tensor[(9, 13, 6), float64] */;
    %585 = cast(%582, dtype="bool") /* ty=Tensor[(9, 13, 6), bool] */;
    %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %587 = cast(%584, dtype="bool") /* ty=Tensor[(9, 13, 6), bool] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %589 = not_equal(%587, %588) /* ty=Tensor[(9, 13, 6), bool] */;
    %590 = cast(%589, dtype="float64") /* ty=Tensor[(9, 13, 6), float64] */;
    %591 = %577.0;
    %592 = bitwise_and(%578, %579) /* ty=Tensor[(9, 13, 6), int32] */;
    %593 = atan(%590) /* ty=Tensor[(9, 13, 6), float64] */;
    (%591, %592, %593)
  };
  %594(%var_4158, %var_4159) /* ty=(Tensor[(11, 13, 7), float64], Tensor[(9, 13, 6), int32], Tensor[(9, 13, 6), float64]) */
}

def @func_5400() -> (Tensor[(15, 4, 16), float32],) {
  @func_5398() /* ty=(Tensor[(15, 4, 16), float32],) */
}

def @func_2109() -> (Tensor[(11, 13, 7), bool], Tensor[(10, 2, 14), bool]) {
  %595 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %596 = %595.0;
  %597 = @func_1654() /* ty=Tensor[(10, 2, 14), bool] */;
  (%596, %597)
}

def @func_1412() -> (Tensor[(10, 2, 14), bool],) {
  %598 = @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %599 = %598.0;
  (%599,)
}

def @func_3979(%var_3976: Tensor[(8, 13, 1), int8], %var_3977: Tensor[(8, 13, 2), int8], %var_3978: Tensor[(8, 13, 2), int8]) -> (Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), float32], Tensor[(8, 13, 2), float64]) {
  @func_3974(%var_3976, %var_3977, %var_3978) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), float32], Tensor[(8, 13, 2), float64]) */
}

def @func_4325() -> (Tensor[(10, 2, 14), bool],) {
  %602 = fn () -> (Tensor[(10, 2, 14), bool],) {
    %600 = @func_3733() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %601 = %600.0;
    (%601,)
  };
  %602() /* ty=(Tensor[(10, 2, 14), bool],) */
}

def @func_2357(%var_2352: Tensor[(91, 11), bool]) -> (Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), bool], Tensor[(91, 11), bool]) {
  %603 = @func_1598() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %604 = cast(%var_2352, dtype="bool") /* ty=Tensor[(91, 11), bool] */;
  %605 = cast(%var_2352, dtype="bool") /* ty=Tensor[(91, 11), bool] */;
  %606 = reshape(%604, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %607 = reshape(%605, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %608 = @func_1285(%606, %607) /* ty=(Tensor[(11, 13, 7), int64], Tensor[(11, 13, 7), bool]) */;
  %609 = %603.0;
  %610 = %608.1;
  (%609, %610, %var_2352)
}

def @func_2015() -> Tensor[(10, 2, 14), bool] {
  %612 = fn () -> Tensor[(10, 2, 14), bool] {
    %611 = @func_1167() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %611.0
  };
  %612() /* ty=Tensor[(10, 2, 14), bool] */
}

def @func_5558() -> Tensor[(10, 2, 14), bool] {
  %613 = fn () -> Tensor[(10, 2, 14), bool] {
    @func_4651() /* ty=Tensor[(10, 2, 14), bool] */
  };
  %613() /* ty=Tensor[(10, 2, 14), bool] */
}

def @func_3167() -> Tensor[(15, 4, 16), float32] {
  %615 = fn () -> Tensor[(15, 4, 16), float32] {
    %614 = @func_1598() /* ty=(Tensor[(15, 4, 16), float32],) */;
    %614.0
  };
  %615() /* ty=Tensor[(15, 4, 16), float32] */
}

def @func_3916(%var_3915: Tensor[(330), float64]) -> (Tensor[(15, 4, 16), float32], Tensor[(36), int16], Tensor[(330), float64], Tensor[(7, 9, 7), float32], Tensor[(36), int16]) {
  %643 = fn (%var_3860: Tensor[(330), float64]) -> (Tensor[(15, 4, 16), float32], Tensor[(36), int16], Tensor[(330), float64], Tensor[(7, 9, 7), float32], Tensor[(36), int16]) {
    %616 = @func_3544() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), float64]) */;
    %617 = cast(meta[relay.Constant][32] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %618 = cast(meta[relay.Constant][33] /* ty=Tensor[(36), int16] */, dtype="int16") /* ty=Tensor[(36), int16] */;
    %619 = reshape(%617, newshape=[]) /* ty=int16 */;
    %620 = reshape(%618, newshape=[36]) /* ty=Tensor[(36), int16] */;
    %621 = @func_3308(%619, %620) /* ty=(Tensor[(10, 2, 14), bool], int16, Tensor[(36), int16], Tensor[(12, 3, 1), int16], Tensor[(15, 4, 16), float32], Tensor[(12, 3, 1), float64]) */;
    %622 = cast(%var_3860, dtype="float64") /* ty=Tensor[(330), float64] */;
    %623 = reshape(%622, newshape=[330]) /* ty=Tensor[(330), float64] */;
    %624 = @func_1848(%623) /* ty=(Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(7, 9, 7), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(10, 2, 14), float64]) */;
    %625 = %624.2;
    %626 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 9, 7), bool] */, dtype="float32") /* ty=Tensor[(7, 9, 7), float32] */;
    %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%625, dtype="float32") /* ty=Tensor[(7, 9, 7), float32] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %630 = cast(meta[relay.Constant][33] /* ty=Tensor[(36), int16] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %631 = cast(meta[relay.Constant][32] /* ty=int16 */, dtype="float32") /* ty=float32 */;
    %632 = floor_mod(%630, %631) /* ty=Tensor[(36), float32] */;
    %633 = cast(%632, dtype="float64") /* ty=Tensor[(36), float64] */;
    %634 = sinh(%633) /* ty=Tensor[(36), float64] */;
    %635 = cast(%634, dtype="int16") /* ty=Tensor[(36), int16] */;
    %636 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(36), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %637 = cast(meta[relay.Constant][33] /* ty=Tensor[(36), int16] */, dtype="int16") /* ty=Tensor[(36), int16] */;
    %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?), int16] */;
    %639 = %616.0;
    %640 = %621.2;
    %641 = floor_mod(%628, %629) /* ty=Tensor[(7, 9, 7), float32] */;
    %642 = add(%637, %638) /* ty=Tensor[(36), int16] */;
    (%639, %640, %var_3860, %641, %642)
  };
  %643(%var_3915) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(36), int16], Tensor[(330), float64], Tensor[(7, 9, 7), float32], Tensor[(36), int16]) */
}

def @func_5528() -> Tensor[(15, 4, 16), float32] {
  %644 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %644.0
}

def @func_1463() -> Tensor[(10, 2, 14), float32] {
  @func_1461() /* ty=Tensor[(10, 2, 14), float32] */
}

def @func_1850(%var_1849: Tensor[(330), float64]) -> (Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(7, 9, 7), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(10, 2, 14), float64]) {
  %665 = fn (%var_1832: Tensor[(330), float64]) -> (Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(7, 9, 7), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(10, 2, 14), float64]) {
    %645 = cast(meta[relay.Constant][35] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %646 = reshape(%645, newshape=[2, 7, 3]) /* ty=Tensor[(2, 7, 3), float64] */;
    %647 = @func_292(%646) /* ty=(Tensor[(2, 7, 3), float64],) */;
    %648 = cast(%var_1832, dtype="float64") /* ty=Tensor[(330), float64] */;
    %649 = cast(meta[relay.Constant][36] /* ty=Tensor[(441), float32] */, dtype="float32") /* ty=Tensor[(441), float32] */;
    %650 = reshape(%648, newshape=[15, 2, 11]) /* ty=Tensor[(15, 2, 11), float64] */;
    %651 = reshape(%649, newshape=[441]) /* ty=Tensor[(441), float32] */;
    %652 = @func_961(%650, %651) /* ty=(Tensor[(15, 2, 11), float64], Tensor[(7, 9, 7), float64], Tensor[(441), float32], Tensor[(7, 9, 7), bool], Tensor[(2, 15), bool], Tensor[(30), bool]) */;
    %653 = @func_1654() /* ty=Tensor[(10, 2, 14), bool] */;
    %654 = cast(%653, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
    %655 = asin(%654) /* ty=Tensor[(10, 2, 14), float32] */;
    %656 = cast(%655, dtype="float32") /* ty=Tensor[(10, 2, 14), float32] */;
    %657 = rsqrt(%656) /* ty=Tensor[(10, 2, 14), float32] */;
    %658 = cast(%655, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
    %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%657, dtype="float64") /* ty=Tensor[(10, 2, 14), float64] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %662 = %647.0;
    %663 = %652.3;
    %664 = power(%660, %661) /* ty=Tensor[(10, 2, 14), float64] */;
    (%662, meta[relay.Constant][35] /* ty=Tensor[(42), float64] */, %663, %var_1832, meta[relay.Constant][36] /* ty=Tensor[(441), float32] */, %664)
  };
  %665(%var_1849) /* ty=(Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(7, 9, 7), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(10, 2, 14), float64]) */
}

def @func_1654() -> Tensor[(10, 2, 14), bool] {
  %666 = @func_1249() /* ty=(Tensor[(10, 2, 14), bool],) */;
  %666.0
}

def @func_1288(%var_1286: Tensor[(11, 13, 7), bool], %var_1287: Tensor[(11, 13, 7), bool]) -> (Tensor[(11, 13, 7), int64], Tensor[(11, 13, 7), bool]) {
  %679 = fn (%var_1275: Tensor[(11, 13, 7), bool], %var_1281: Tensor[(11, 13, 7), bool]) -> (Tensor[(11, 13, 7), int64], Tensor[(11, 13, 7), bool]) {
    %667 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
    %668 = %667.0;
    %669 = cast(%var_1275, dtype="int64") /* ty=Tensor[(11, 13, 7), int64] */;
    %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
    %671 = cast(%668, dtype="int64") /* ty=Tensor[(11, 13, 7), int64] */;
    %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %673 = cast(%var_1281, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
    %674 = shape_of(%var_1275, dtype="int32") /* ty=Tensor[(3), int32] */;
    %675 = cast(%var_1275, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
    %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %677 = bitwise_and(%671, %672) /* ty=Tensor[(11, 13, 7), int64] */;
    %678 = less(%675, %676) /* ty=Tensor[(11, 13, 7), bool] */;
    (%677, %678)
  };
  %679(%var_1286, %var_1287) /* ty=(Tensor[(11, 13, 7), int64], Tensor[(11, 13, 7), bool]) */
}

def @func_3602() -> (Tensor[(42), float64], Tensor[(15, 4, 16), float32], Tensor[(11, 13, 11), uint8]) {
  %680 = @func_2870() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(2, 7, 3), float64], Tensor[(42), float64], Tensor[(10, 2, 14), float32]) */;
  %681 = @func_2412() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %682 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 1573), float32] */, dtype="float32") /* ty=Tensor[(1, 1573), float32] */;
  %683 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 1573), float32] */, dtype="float32") /* ty=Tensor[(1, 1573), float32] */;
  %684 = %680.2;
  %685 = cast(%684, dtype="float64") /* ty=Tensor[(42), float64] */;
  %686 = reshape(%682, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %687 = reshape(%683, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %688 = reshape(%685, newshape=[14, 3]) /* ty=Tensor[(14, 3), float64] */;
  %689 = @func_1380(%686, %687, %688) /* ty=(Tensor[(11, 13, 11), float32], Tensor[(30), bool], Tensor[(330), float64], Tensor[(441), float32], Tensor[(11, 13, 7), int16], Tensor[(1001, 1), float64], Tensor[(14, 3), float64], Tensor[(11, 13, 11), float64]) */;
  %690 = %689.0;
  %691 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 1573), float32] */, dtype="uint8") /* ty=Tensor[(1, 1573), uint8] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%690, dtype="uint8") /* ty=Tensor[(11, 13, 11), uint8] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %695 = %681.0;
  %696 = minimum(%693, %694) /* ty=Tensor[(11, 13, 11), uint8] */;
  (%684, %695, %696)
}

def @func_2344(%var_2329: Tensor[(15, 4, 16), float32]) -> (Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), bool], Tensor[(15, 4, 16), float32]) {
  %697 = @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %698 = @func_1598() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %699 = %698.0;
  %700 = cast(%var_2329, dtype="bool") /* ty=Tensor[(15, 4, 16), bool] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%699, dtype="bool") /* ty=Tensor[(15, 4, 16), bool] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %704 = cast(%699, dtype="float32") /* ty=Tensor[(15, 4, 16), float32] */;
  %705 = %697.0;
  %706 = greater(%702, %703) /* ty=Tensor[(15, 4, 16), bool] */;
  %707 = asin(%704) /* ty=Tensor[(15, 4, 16), float32] */;
  (%705, %706, %707)
}

def @func_2380() -> (Tensor[(15, 4, 16), float32],) {
  @func_2378() /* ty=(Tensor[(15, 4, 16), float32],) */
}

def @func_2934(%var_2930: Tensor[(7, 10, 5), uint8], %var_2931: Tensor[(7, 10, 5), uint8], %var_2932: Tensor[(960), float32], %var_2933: Tensor[(42, 1), float64]) -> (Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(7, 10, 5), float32], Tensor[(15, 4, 16), bool], Tensor[(42), float64], Tensor[(1, 1001), float64], Tensor[(42, 1), float64]) {
  @func_2928(%var_2930, %var_2931, %var_2932, %var_2933) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(7, 10, 5), float32], Tensor[(15, 4, 16), bool], Tensor[(42), float64], Tensor[(1, 1001), float64], Tensor[(42, 1), float64]) */
}

def @func_3371(%var_3369: Tensor[(1, 11, 3), uint64], %var_3370: Tensor[(3, 11, 3), uint64]) -> Tensor[(3, 11, 3), uint64] {
  %710 = fn (%var_3358: Tensor[(1, 11, 3), uint64], %var_3359: Tensor[(3, 11, 3), uint64]) -> Tensor[(3, 11, 3), uint64] {
    %708 = cast(%var_3358, dtype="uint64") /* ty=Tensor[(1, 11, 3), uint64] */;
    %709 = cast(%var_3359, dtype="uint64") /* ty=Tensor[(3, 11, 3), uint64] */;
    minimum(%708, %709) /* ty=Tensor[(3, 11, 3), uint64] */
  };
  %710(%var_3369, %var_3370) /* ty=Tensor[(3, 11, 3), uint64] */
}

def @func_4926(%var_4924: Tensor[(224), uint8], %var_4925: Tensor[(1001), bool]) -> (Tensor[(15, 4, 16), float32], Tensor[(8, 14, 2), uint8], Tensor[(224), uint8], Tensor[(1001), bool], Tensor[(15, 4, 16), float32]) {
  %723 = fn (%var_4903: Tensor[(224), uint8], %var_4904: Tensor[(1001), bool]) -> (Tensor[(15, 4, 16), float32], Tensor[(8, 14, 2), uint8], Tensor[(224), uint8], Tensor[(1001), bool], Tensor[(15, 4, 16), float32]) {
    %711 = @func_2798() /* ty=(Tensor[(15, 4, 16), float32],) */;
    %712 = cast(%var_4903, dtype="uint8") /* ty=Tensor[(224), uint8] */;
    %713 = cast(%var_4903, dtype="uint8") /* ty=Tensor[(224), uint8] */;
    %714 = cast(%var_4904, dtype="bool") /* ty=Tensor[(1001), bool] */;
    %715 = reshape(%712, newshape=[8, 14, 2]) /* ty=Tensor[(8, 14, 2), uint8] */;
    %716 = reshape(%713, newshape=[8, 14, 2]) /* ty=Tensor[(8, 14, 2), uint8] */;
    %717 = reshape(%714, newshape=[13, 77]) /* ty=Tensor[(13, 77), bool] */;
    %718 = @func_2519(%715, %716, %717) /* ty=(Tensor[(8, 14, 2), uint8], Tensor[(11, 13, 7), bool], Tensor[(13, 77), bool], Tensor[(8, 14, 2), float32], Tensor[(12, 2, 11), float64]) */;
    %719 = @func_2648() /* ty=(Tensor[(10, 2, 14), float64], Tensor[(11, 13, 7), float32], Tensor[(1001), bool], Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), float64]) */;
    %720 = %711.0;
    %721 = %718.0;
    %722 = %719.3;
    (%720, %721, %var_4903, %var_4904, %722)
  };
  %723(%var_4924, %var_4925) /* ty=(Tensor[(15, 4, 16), float32], Tensor[(8, 14, 2), uint8], Tensor[(224), uint8], Tensor[(1001), bool], Tensor[(15, 4, 16), float32]) */
}

def @func_3778(%var_3777: Tensor[(3, 1, 15), float32]) -> Tensor[(3, 1, 15), float32] {
  %725 = fn (%var_3771: Tensor[(3, 1, 15), float32]) -> Tensor[(3, 1, 15), float32] {
    %724 = cast(%var_3771, dtype="float32") /* ty=Tensor[(3, 1, 15), float32] */;
    tan(%724) /* ty=Tensor[(3, 1, 15), float32] */
  };
  %725(%var_3777) /* ty=Tensor[(3, 1, 15), float32] */
}

def @func_4427(%var_4425: bool) -> (Tensor[(4, 8, 8), float64],) {
  @func_4424(%var_4425) /* ty=(Tensor[(4, 8, 8), float64],) */
}

def @func_5290(%var_5279: Tensor[(42), float64]) -> (Tensor[(42), bool],) {
  %726 = @func_4366() /* ty=(Tensor[(10, 2, 14), float64], Tensor[(11, 13, 7), int16], Tensor[(1573), float32], Tensor[(42), float64]) */;
  %727 = %726.3;
  %728 = cast(%var_5279, dtype="bool") /* ty=Tensor[(42), bool] */;
  %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(1), int32] */;
  %730 = cast(%727, dtype="bool") /* ty=Tensor[(42), bool] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?), bool] */;
  %732 = equal(%730, %731) /* ty=Tensor[(42), bool] */;
  (%732,)
}

def @func_4031() -> (Tensor[(11, 13, 7), bool],) {
  %735 = fn () -> (Tensor[(11, 13, 7), bool],) {
    %733 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
    %734 = %733.0;
    (%734,)
  };
  %735() /* ty=(Tensor[(11, 13, 7), bool],) */
}

def @func_3717(%var_3715: Tensor[(33), uint64]) -> (Tensor[(3, 11, 3), uint64], Tensor[(33), uint64], Tensor[(99), uint64], Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), float32]) {
  @func_3714(%var_3715) /* ty=(Tensor[(3, 11, 3), uint64], Tensor[(33), uint64], Tensor[(99), uint64], Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), float32]) */
}

def @func_4751(%var_4750: Tensor[(10, 2, 14), bool]) -> (Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), int32]) {
  %744 = fn (%var_4744: Tensor[(10, 2, 14), bool]) -> (Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), int32]) {
    %736 = @func_4393() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %737 = @func_4651() /* ty=Tensor[(10, 2, 14), bool] */;
    %738 = cast(%var_4744, dtype="int32") /* ty=Tensor[(10, 2, 14), int32] */;
    %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %740 = cast(%737, dtype="int32") /* ty=Tensor[(10, 2, 14), int32] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %742 = %736.0;
    %743 = bitwise_and(%740, %741) /* ty=Tensor[(10, 2, 14), int32] */;
    (%742, %743)
  };
  %744(%var_4750) /* ty=(Tensor[(10, 2, 14), bool], Tensor[(10, 2, 14), int32]) */
}

def @func_671(%var_633: Tensor[(264), uint16], %var_637: int16) -> (Tensor[(12, 3, 1), int16], int16, Tensor[(18, 2), int16], Tensor[(12, 2, 11), uint16], Tensor[(11, 13, 7), float64], Tensor[(2, 7, 3), float64], Tensor[(42), float64]) {
  %745 = cast(%var_637, dtype="int16") /* ty=int16 */;
  %746 = cast(meta[relay.Constant][38] /* ty=Tensor[(18, 2), int16] */, dtype="int16") /* ty=Tensor[(18, 2), int16] */;
  %747 = reshape(%745, newshape=[]) /* ty=int16 */;
  %748 = reshape(%746, newshape=[12, 3, 1]) /* ty=Tensor[(12, 3, 1), int16] */;
  %749 = @func_377(%747, %748) /* ty=(Tensor[(12, 3, 1), int16],) */;
  %750 = cast(%var_633, dtype="uint16") /* ty=Tensor[(264), uint16] */;
  %751 = reshape(%750, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), uint16] */;
  %752 = @func_594(%751) /* ty=(Tensor[(12, 2, 11), uint16], Tensor[(12, 2, 11), float64]) */;
  %753 = %752.1;
  %754 = cast(%var_633, dtype="uint16") /* ty=Tensor[(264), uint16] */;
  %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%753, dtype="uint16") /* ty=Tensor[(12, 2, 11), uint16] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %758 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %759 = %758.0;
  %760 = cast(%759, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  %761 = cast(meta[relay.Constant][39] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %762 = reshape(%761, newshape=[2, 7, 3]) /* ty=Tensor[(2, 7, 3), float64] */;
  %763 = @func_292(%762) /* ty=(Tensor[(2, 7, 3), float64],) */;
  %764 = %749.0;
  %765 = minimum(%756, %757) /* ty=Tensor[(12, 2, 11), uint16] */;
  %766 = log10(%760) /* ty=Tensor[(11, 13, 7), float64] */;
  %767 = %763.0;
  (%764, %var_637, meta[relay.Constant][38] /* ty=Tensor[(18, 2), int16] */, %765, %766, %767, meta[relay.Constant][39] /* ty=Tensor[(42), float64] */)
}

def @func_3255(%var_3253: float64, %var_3254: Tensor[(16, 15, 14), float64]) -> (Tensor[(16, 15, 14), float64], Tensor[(16, 15, 14), int32]) {
  %782 = fn (%var_3208: float64, %var_3209: Tensor[(16, 15, 14), float64]) -> (Tensor[(16, 15, 14), float64], Tensor[(16, 15, 14), int32]) {
    %768 = cast(%var_3209, dtype="float32") /* ty=Tensor[(16, 15, 14), float32] */;
    %769 = atan(%768) /* ty=Tensor[(16, 15, 14), float32] */;
    %770 = cast(%769, dtype="float32") /* ty=Tensor[(16, 15, 14), float32] */;
    %771 = tan(%770) /* ty=Tensor[(16, 15, 14), float32] */;
    %772 = cast(%771, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
    %773 = cast(%var_3208, dtype="float64") /* ty=float64 */;
    %774 = cast(%var_3209, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
    %775 = power(%773, %774) /* ty=Tensor[(16, 15, 14), float64] */;
    %776 = cast(%775, dtype="int32") /* ty=Tensor[(16, 15, 14), int32] */;
    %777 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
    %778 = cast(%771, dtype="int32") /* ty=Tensor[(16, 15, 14), int32] */;
    %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %780 = sigmoid(%772) /* ty=Tensor[(16, 15, 14), float64] */;
    %781 = bitwise_or(%778, %779) /* ty=Tensor[(16, 15, 14), int32] */;
    (%780, %781)
  };
  %782(%var_3253, %var_3254) /* ty=(Tensor[(16, 15, 14), float64], Tensor[(16, 15, 14), int32]) */
}

def @func_4593(%var_4592: Tensor[(10, 2, 14), bool]) -> Tensor[(10, 2, 14), uint32] {
  %789 = fn (%var_4579: Tensor[(10, 2, 14), bool]) -> Tensor[(10, 2, 14), uint32] {
    %783 = @func_4393() /* ty=(Tensor[(10, 2, 14), bool],) */;
    %784 = %783.0;
    %785 = cast(%var_4579, dtype="uint32") /* ty=Tensor[(10, 2, 14), uint32] */;
    %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
    %787 = cast(%784, dtype="uint32") /* ty=Tensor[(10, 2, 14), uint32] */;
    %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    right_shift(%787, %788) /* ty=Tensor[(10, 2, 14), uint32] */
  };
  %789(%var_4592) /* ty=Tensor[(10, 2, 14), uint32] */
}

def @func_2759() -> (Tensor[(15, 4, 16), float32], Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float64]) {
  %790 = @func_1598() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %791 = @func_1034() /* ty=(Tensor[(11, 13, 7), float64],) */;
  %792 = %790.0;
  %793 = @func_1435() /* ty=Tensor[(10, 2, 14), bool] */;
  %794 = %791.0;
  (%792, %793, %794)
}

def @func_1114(%var_1113: Tensor[(264), uint16]) -> (Tensor[(11, 13, 7), bool], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), float64]) {
  %803 = fn (%var_1075: Tensor[(264), uint16]) -> (Tensor[(11, 13, 7), bool], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), float64]) {
    %795 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
    %796 = cast(%var_1075, dtype="uint16") /* ty=Tensor[(264), uint16] */;
    %797 = reshape(%796, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), uint16] */;
    %798 = @func_594(%797) /* ty=(Tensor[(12, 2, 11), uint16], Tensor[(12, 2, 11), float64]) */;
    %799 = @func_1034() /* ty=(Tensor[(11, 13, 7), float64],) */;
    %800 = %795.0;
    %801 = %798.1;
    %802 = %799.0;
    (%800, %801, %var_1075, %802)
  };
  %803(%var_1113) /* ty=(Tensor[(11, 13, 7), bool], Tensor[(12, 2, 11), float64], Tensor[(264), uint16], Tensor[(11, 13, 7), float64]) */
}

def @func_5113(%var_5111: Tensor[(4, 11, 12), float64]) -> (Tensor[(4, 11, 12), float64], Tensor[(11, 13, 7), bool]) {
  @func_5110(%var_5111) /* ty=(Tensor[(4, 11, 12), float64], Tensor[(11, 13, 7), bool]) */
}

def @func_1580() -> (Tensor[(15, 4, 16), float32],) {
  %804 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 4, 16), float64] */;
  %805 = cosh(%804) /* ty=Tensor[(15, 4, 16), float64] */;
  %806 = cast(%805, dtype="float32") /* ty=Tensor[(15, 4, 16), float32] */;
  %807 = asinh(%806) /* ty=Tensor[(15, 4, 16), float32] */;
  (%807,)
}

def @func_3545() -> (Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), float64]) {
  %814 = fn () -> (Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), float64]) {
    %808 = @func_2798() /* ty=(Tensor[(15, 4, 16), float32],) */;
    %809 = @func_1497() /* ty=(Tensor[(11, 13, 7), float64],) */;
    %810 = %809.0;
    %811 = cast(%810, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
    %812 = %808.0;
    %813 = cos(%811) /* ty=Tensor[(11, 13, 7), float64] */;
    (%812, %813)
  };
  %814() /* ty=(Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), float64]) */
}

def @func_4314(%var_4312: Tensor[(960), float32]) -> (Tensor[(264), uint16], Tensor[(960), float32], Tensor[(960), float32], Tensor[(18, 2), int16], int16, Tensor[(2, 15), bool], Tensor[(30), bool], Tensor[(12, 2, 11), float64]) {
  @func_4311(%var_4312) /* ty=(Tensor[(264), uint16], Tensor[(960), float32], Tensor[(960), float32], Tensor[(18, 2), int16], int16, Tensor[(2, 15), bool], Tensor[(30), bool], Tensor[(12, 2, 11), float64]) */
}

def @main() -> Tensor[(11, 13, 7), float64] {
  %815 = @func_4230() /* ty=(Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), float64]) */;
  %816 = %815.0;
  %817 = cast(%816, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  atanh(%817) /* ty=Tensor[(11, 13, 7), float64] */
}

def @func_597(%var_595: Tensor[(12, 2, 11), uint16]) -> (Tensor[(12, 2, 11), uint16], Tensor[(12, 2, 11), float64]) {
  @func_594(%var_595) /* ty=(Tensor[(12, 2, 11), uint16], Tensor[(12, 2, 11), float64]) */
}

def @func_4878(%var_4848: Tensor[(7, 6), float64], %var_4850: Tensor[(1, 350), uint8]) -> (Tensor[(10, 2, 14), bool], Tensor[(11, 13, 7), float32], Tensor[(7, 6), float64], Tensor[(1001, 1), float32], Tensor[(1, 350), uint8], Tensor[(15, 4, 16), float32], Tensor[(11, 13, 7), bool], Tensor[(11, 13, 7), bool]) {
  %818 = cast(%var_4848, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
  %819 = cast(meta[relay.Constant][41] /* ty=Tensor[(1001, 1), float32] */, dtype="float32") /* ty=Tensor[(1001, 1), float32] */;
  %820 = cast(%var_4850, dtype="uint8") /* ty=Tensor[(1, 350), uint8] */;
  %821 = reshape(%818, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %822 = reshape(%819, newshape=[1001]) /* ty=Tensor[(1001), float32] */;
  %823 = reshape(%820, newshape=[350, 1]) /* ty=Tensor[(350, 1), uint8] */;
  %824 = @func_3153(%821, %822, %823) /* ty=(Tensor[(10, 2, 14), bool], Tensor[(42), float64], Tensor[(12, 3, 1001), bool], Tensor[(11, 13, 7), float64], Tensor[(11, 13, 7), float32], Tensor[(1001), float32], Tensor[(15, 4, 16), float32], Tensor[(15, 4, 16), float32], Tensor[(960), float32], Tensor[(350, 1), uint8]) */;
  %825 = @func_3172() /* ty=(Tensor[(15, 4, 16), float32],) */;
  %826 = %825.0;
  %827 = cast(%826, dtype="float32") /* ty=Tensor[(15, 4, 16), float32] */;
  %828 = @func_442() /* ty=(Tensor[(11, 13, 7), bool],) */;
  %829 = %824.4;
  %830 = cast(%829, dtype="bool") /* ty=Tensor[(11, 13, 7), bool] */;
  %831 = cast(meta[relay.Constant][41] /* ty=Tensor[(1001, 1), float32] */, dtype="bool") /* ty=Tensor[(1001, 1), bool] */;
  %832 = reshape(%830, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %833 = reshape(%831, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), bool] */;
  %834 = @func_1285(%832, %833) /* ty=(Tensor[(11, 13, 7), int64], Tensor[(11, 13, 7), bool]) */;
  %835 = @func_2014() /* ty=Tensor[(10, 2, 14), bool] */;
  %836 = atan(%827) /* ty=Tensor[(15, 4, 16), float32] */;
  %837 = %828.0;
  %838 = %834.1;
  (%835, %829, %var_4848, meta[relay.Constant][41] /* ty=Tensor[(1001, 1), float32] */, %var_4850, %836, %837, %838)
}

def @func_2414() -> (Tensor[(15, 4, 16), float32],) {
  @func_2412() /* ty=(Tensor[(15, 4, 16), float32],) */
}

def @func_1582() -> (Tensor[(15, 4, 16), float32],) {
  @func_1580() /* ty=(Tensor[(15, 4, 16), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen92/build/output.py", line 2024, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:49:07] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

