==========mod==========
#[version = "0.0.5"]
def @func_3603(%var_3593: Tensor[(4, 14, 9), bool], %var_3594: Tensor[(4, 14, 9), bool]) -> Tensor[(4, 14, 9), bool] {
  %0 = cast(%var_3594, dtype="bool") /* ty=Tensor[(4, 14, 9), bool] */;
  %1 = shape_of(%var_3593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_3593, dtype="bool") /* ty=Tensor[(4, 14, 9), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%2, %3) /* ty=Tensor[(4, 14, 9), bool] */
}

def @func_4441() -> (Tensor[(14, 7, 14), float32], Tensor[(2925), float32]) {
  %4 = @func_4165() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %5 = @func_2853() /* ty=(Tensor[(2925), float64],) */;
  %6 = %5.0;
  %7 = cast(%6, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %8 = sigmoid(%7) /* ty=Tensor[(2925), float32] */;
  %9 = cast(%8, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %10 = %4.0;
  %11 = cosh(%9) /* ty=Tensor[(2925), float32] */;
  (%10, %11)
}

def @func_7027() -> (Tensor[(2925), float32],) {
  %12 = @func_5308() /* ty=(Tensor[(2925), float32],) */;
  %13 = %12.0;
  (%13,)
}

def @func_2555() -> Tensor[(14, 7, 14), float32] {
  %14 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %15 = %14.0;
  %16 = cast(%15, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  sinh(%16) /* ty=Tensor[(14, 7, 14), float32] */
}

def @func_4665() -> Tensor[(14, 7, 14), float32] {
  %17 = @func_3291() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %17.0
}

def @func_722(%var_710: uint32) -> (Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint8]) {
  %18 = cast(%var_710, dtype="uint32") /* ty=uint32 */;
  %19 = reshape(%18, newshape=[]) /* ty=uint32 */;
  %20 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %21 = %20.1;
  %22 = cast(%21, dtype="uint8") /* ty=Tensor[(14, 7, 14), uint8] */;
  %23 = cast(%var_710, dtype="uint8") /* ty=uint8 */;
  %24 = @func_106(%19) /* ty=Tensor[(3, 1), bool] */;
  %25 = bitwise_and(%22, %23) /* ty=Tensor[(14, 7, 14), uint8] */;
  (%24, %25)
}

def @func_2833(%var_2824: Tensor[(4, 5, 11), float32]) -> (Tensor[(4, 5, 11), float32],) {
  %26 = cast(%var_2824, dtype="float32") /* ty=Tensor[(4, 5, 11), float32] */;
  %27 = exp(%26) /* ty=Tensor[(4, 5, 11), float32] */;
  (%27,)
}

def @func_5617() -> (Tensor[(14, 7, 14), float32],) {
  %28 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %29 = %28.0;
  (%29,)
}

def @func_4655(%var_4632: Tensor[(48), uint32], %var_4651: uint32) -> (Tensor[(8, 13, 6), int32], Tensor[(9, 48), float32], Tensor[(14, 7, 14), float32], uint32, uint32) {
  %30 = cast(%var_4632, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %31 = reshape(%30, newshape=[8, 1, 6]) /* ty=Tensor[(8, 1, 6), uint32] */;
  %32 = @func_3234(%31) /* ty=(uint32, Tensor[(14, 7, 14), float64], Tensor[(8, 13, 6), int32], Tensor[(8, ?, 6), float64]) */;
  %33 = @func_3545() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(9, 1), uint32]) */;
  %34 = %33.1;
  %35 = cast(%var_4632, dtype="float32") /* ty=Tensor[(48), float32] */;
  %36 = cast(%34, dtype="float32") /* ty=Tensor[(9, 1), float32] */;
  %37 = @func_3291() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %38 = %37.0;
  %39 = cast(%38, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %40 = cast(%var_4651, dtype="uint32") /* ty=uint32 */;
  %41 = reshape(%39, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float32] */;
  %42 = reshape(%40, newshape=[]) /* ty=uint32 */;
  %43 = @func_2947(%41, %42) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], uint32, uint32, Tensor[(14, 7, 14), float64]) */;
  %44 = %32.2;
  %45 = mod(%35, %36) /* ty=Tensor[(9, 48), float32] */;
  %46 = %43.3;
  (%44, %45, %38, %46, %var_4651)
}

def @func_2947(%var_2912: Tensor[(14, 7, 14), float32], %var_2929: uint32) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], uint32, uint32, Tensor[(14, 7, 14), float64]) {
  %47 = @func_2289() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %48 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %49 = %48.0;
  %50 = cast(%var_2912, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%49, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %54 = %47.0;
  %55 = cast(%54, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %56 = cast(%var_2929, dtype="uint32") /* ty=uint32 */;
  %57 = reshape(%55, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float32] */;
  %58 = reshape(%56, newshape=[]) /* ty=uint32 */;
  %59 = @func_2171(%57, %58) /* ty=(Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) */;
  %60 = %59.2;
  %61 = cast(%60, dtype="uint64") /* ty=uint64 */;
  %62 = reshape(%61, newshape=[]) /* ty=uint64 */;
  %63 = @func_1645(%62) /* ty=(Tensor[(?, 8, ?), int32], Tensor[(396), float64], Tensor[(14, 7, 14), float64]) */;
  %64 = multiply(%52, %53) /* ty=Tensor[(14, 7, 14), float64] */;
  %65 = %63.2;
  (%54, %64, %60, %var_2929, %65)
}

def @func_6597(%var_6590: Tensor[(11, 10, 1), int16]) -> Tensor[(11, 10, 10), int16] {
  %66 = cast(%var_6590, dtype="int16") /* ty=Tensor[(11, 10, 1), int16] */;
  %67 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 10, 10), int16] */, dtype="int16") /* ty=Tensor[(11, 10, 10), int16] */;
  logical_xor(%66, %67) /* ty=Tensor[(11, 10, 10), int16] */
}

def @func_6486(%var_6474: Tensor[(15, 12, 12), bool], %var_6475: Tensor[(15, 12, 12), bool]) -> Tensor[(15, 12, 12), bool] {
  %68 = cast(%var_6475, dtype="bool") /* ty=Tensor[(15, 12, 12), bool] */;
  %69 = shape_of(%var_6474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%var_6474, dtype="bool") /* ty=Tensor[(15, 12, 12), bool] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%70, %71) /* ty=Tensor[(15, 12, 12), bool] */
}

def @func_4042() -> (Tensor[(14, 7, 14), float64], Tensor[(2925), float64]) {
  %72 = @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
  %73 = @func_3742() /* ty=(Tensor[(2925), float64],) */;
  %74 = %72.0;
  %75 = %73.0;
  (%74, %75)
}

def @func_892() -> Tensor[(14, 7, 14), float64] {
  %76 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %76.0
}

def @func_4062(%var_4052: Tensor[(15, 12, 15), int64], %var_4053: Tensor[(15, 12, 15), int64]) -> Tensor[(15, 12, 15), bool] {
  %77 = cast(%var_4053, dtype="bool") /* ty=Tensor[(15, 12, 15), bool] */;
  %78 = shape_of(%var_4052, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%var_4052, dtype="bool") /* ty=Tensor[(15, 12, 15), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%79, %80) /* ty=Tensor[(15, 12, 15), bool] */
}

def @func_3742() -> (Tensor[(2925), float64],) {
  %81 = @func_2853() /* ty=(Tensor[(2925), float64],) */;
  %82 = %81.0;
  (%82,)
}

def @func_5864() -> (Tensor[(14, 7, 14), float64],) {
  %83 = @func_5275() /* ty=Tensor[(14, 7, 14), float64] */;
  (%83,)
}

def @func_3545() -> (Tensor[(14, 7, 14), bool], Tensor[(9, 1), uint32]) {
  %84 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %85 = %84.1;
  %86 = @func_1169() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %87 = %86.0;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %89 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%85, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %92 = floor_mod(%90, %91) /* ty=Tensor[(14, 7, 14), float32] */;
  %93 = cast(%85, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%92, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %97 = @func_3377() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64], Tensor[(1372), float32], Tensor[(9, 1), uint32]) */;
  %98 = less_equal(%95, %96) /* ty=Tensor[(14, 7, 14), bool] */;
  %99 = %97.3;
  (%98, %99)
}

def @func_5219(%var_5216: uint32) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32) {
  %100 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %101 = %100.0;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %103 = cast(%var_5216, dtype="uint32") /* ty=uint32 */;
  %104 = reshape(%102, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float32] */;
  %105 = reshape(%103, newshape=[]) /* ty=uint32 */;
  %106 = @func_2171(%104, %105) /* ty=(Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) */;
  %107 = %106.0;
  (%101, %107, %var_5216)
}

def @func_3492(%var_3467: Tensor[(15, 15, 15), float64]) -> (Tensor[(15, 15, 15), float64], Tensor[(2925), float64], Tensor[(15, 15, 15), float64]) {
  %108 = cast(%var_3467, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %109 = @func_2853() /* ty=(Tensor[(2925), float64],) */;
  %110 = cast(%var_3467, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %111 = tan(%108) /* ty=Tensor[(15, 15, 15), float64] */;
  %112 = %109.0;
  %113 = asin(%110) /* ty=Tensor[(15, 15, 15), float64] */;
  (%111, %112, %113)
}

def @func_4522() -> (Tensor[(14, 7, 14), float32],) {
  %114 = @func_3291() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %115 = %114.0;
  (%115,)
}

def @func_1778() -> (Tensor[(14, 7, 14), float64],) {
  %116 = @func_892() /* ty=Tensor[(14, 7, 14), float64] */;
  (%116,)
}

def @func_3768(%var_3764: Tensor[(7, 14, 8), float64]) -> (Tensor[(7, 14, 8), float64],) {
  %117 = cast(%var_3764, dtype="float64") /* ty=Tensor[(7, 14, 8), float64] */;
  %118 = acosh(%117) /* ty=Tensor[(7, 14, 8), float64] */;
  (%118,)
}

def @func_1169() -> (Tensor[(14, 7, 14), float32],) {
  %119 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %120 = %119.1;
  (%120,)
}

def @func_2200() -> Tensor[(14, 7, 14), float64] {
  %121 = @func_1778() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %121.0
}

def @func_1219(%var_1182: Tensor[(6, 6, 11), float64]) -> (Tensor[(6, 6, 11), float32], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) {
  %122 = cast(%var_1182, dtype="float64") /* ty=Tensor[(6, 6, 11), float64] */;
  %123 = asin(%122) /* ty=Tensor[(6, 6, 11), float64] */;
  %124 = cast(%var_1182, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%123, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %128 = @func_871() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %129 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %130 = floor_divide(%126, %127) /* ty=Tensor[(6, 6, 11), float32] */;
  %131 = %128.1;
  %132 = %129.0;
  (%130, %131, %132)
}

def @func_5768() -> (Tensor[(14, 7, 14), float64],) {
  %133 = @func_5485() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %134 = %133.0;
  (%134,)
}

def @func_7085(%var_7030: Tensor[(3, 1, 10), float64], %var_7042: uint16, %var_7043: Tensor[(2, 1), uint16]) -> (Tensor[(1, 2), bool], uint16, Tensor[(2, 1), uint16], Tensor[(9, 1), uint32], Tensor[(3, ?, 10), float32]) {
  %135 = cast(%var_7042, dtype="uint16") /* ty=uint16 */;
  %136 = cast(%var_7043, dtype="uint16") /* ty=Tensor[(2, 1), uint16] */;
  %137 = reshape(%135, newshape=[]) /* ty=uint16 */;
  %138 = reshape(%136, newshape=[1, 2]) /* ty=Tensor[(1, 2), uint16] */;
  %139 = @func_5993(%137, %138) /* ty=(Tensor[(1, 2), bool],) */;
  %140 = @func_3545() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(9, 1), uint32]) */;
  %141 = cast(%var_7030, dtype="float64") /* ty=Tensor[(3, 1, 10), float64] */;
  %142 = acos(%141) /* ty=Tensor[(3, 1, 10), float64] */;
  %143 = cast(%var_7030, dtype="uint64") /* ty=Tensor[(3, 1, 10), uint64] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%142, dtype="uint64") /* ty=Tensor[(3, 1, 10), uint64] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %147 = bitwise_xor(%145, %146) /* ty=Tensor[(3, ?, 10), uint64] */;
  %148 = cast(%147, dtype="float32") /* ty=Tensor[(3, ?, 10), float32] */;
  %149 = %139.0;
  %150 = %140.1;
  %151 = tan(%148) /* ty=Tensor[(3, ?, 10), float32] */;
  (%149, %var_7042, %var_7043, %150, %151)
}

def @func_5429(%var_5397: Tensor[(2, 4), float32], %var_5404: uint32) -> (Tensor[(14, 7, 14), float64], Tensor[(3, 2, 4), float32], Tensor[(2, 4), float32], Tensor[(24), float32], Tensor[(14, 7, 14), int16], uint32) {
  %152 = @func_3377() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64], Tensor[(1372), float32], Tensor[(9, 1), uint32]) */;
  %153 = cast(%var_5397, dtype="float32") /* ty=Tensor[(2, 4), float32] */;
  %154 = cast(meta[relay.Constant][1] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %155 = reshape(%153, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), float32] */;
  %156 = reshape(%154, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), float32] */;
  %157 = cast(%var_5404, dtype="uint32") /* ty=uint32 */;
  %158 = reshape(%157, newshape=[]) /* ty=uint32 */;
  %159 = @func_5219(%158) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32) */;
  %160 = %152.0;
  %161 = @func_3013(%155, %156) /* ty=Tensor[(3, 2, 4), float32] */;
  %162 = %159.1;
  (%160, %161, %var_5397, meta[relay.Constant][1] /* ty=Tensor[(24), float32] */, %162, %var_5404)
}

def @func_6920() -> (uint32,) {
  %163 = @func_5175() /* ty=(uint32,) */;
  %164 = %163.0;
  (%164,)
}

def @func_548() -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) {
  %165 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %166 = asin(%165) /* ty=Tensor[(14, 7, 14), float32] */;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %168 = cast(%166, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %169 = cos(%168) /* ty=Tensor[(14, 7, 14), float32] */;
  %170 = cast(%169, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %171 = log10(%167) /* ty=Tensor[(14, 7, 14), float64] */;
  %172 = erf(%170) /* ty=Tensor[(14, 7, 14), float32] */;
  (%171, %172)
}

def @func_698(%var_691: uint32) -> (Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) {
  %173 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %174 = cast(%var_691, dtype="uint32") /* ty=uint32 */;
  %175 = reshape(%174, newshape=[]) /* ty=uint32 */;
  %176 = %173.0;
  %177 = @func_106(%175) /* ty=Tensor[(3, 1), bool] */;
  (%176, %177, %var_691)
}

def @func_1156(%var_1142: Tensor[(14, 11, 13), int8]) -> Tensor[(14, 11, 13), int8] {
  %178 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 11, 13), int8] */, dtype="int8") /* ty=Tensor[(14, 11, 13), int8] */;
  %179 = shape_of(%var_1142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%var_1142, dtype="int8") /* ty=Tensor[(14, 11, 13), int8] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%180, %181) /* ty=Tensor[(14, 11, 13), int8] */
}

def @func_119(%var_111: Tensor[(7, 9, 10), float32]) -> Tensor[(7, 9, 10), int64] {
  %182 = cast(%var_111, dtype="float32") /* ty=Tensor[(7, 9, 10), float32] */;
  %183 = cos(%182) /* ty=Tensor[(7, 9, 10), float32] */;
  %184 = cast(%var_111, dtype="int64") /* ty=Tensor[(7, 9, 10), int64] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="int64") /* ty=Tensor[(7, 9, 10), int64] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  subtract(%186, %187) /* ty=Tensor[(7, 9, 10), int64] */
}

def @func_1296(%var_1249: Tensor[(630), float32]) -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64], uint8, Tensor[(24, 8), uint8], Tensor[(14, 7, 14), float64], Tensor[(630), uint64], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), bool]) {
  %188 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %189 = cast(meta[relay.Constant][4] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %190 = cast(meta[relay.Constant][5] /* ty=Tensor[(24, 8), uint8] */, dtype="uint8") /* ty=Tensor[(24, 8), uint8] */;
  %191 = cast(meta[relay.Constant][6] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %192 = reshape(%189, newshape=[]) /* ty=uint8 */;
  %193 = reshape(%190, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), uint8] */;
  %194 = reshape(%191, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %195 = @func_985(%192, %193, %194) /* ty=(Tensor[(8, 8, 3), uint8], Tensor[(3, 1), bool], Tensor[(7, 9, 10), int64], Tensor[(630), float32], Tensor[(14, 7, 14), float64]) */;
  %196 = cast(meta[relay.Constant][4] /* ty=uint8 */, dtype="uint32") /* ty=uint32 */;
  %197 = reshape(%196, newshape=[]) /* ty=uint32 */;
  %198 = @func_799(%197) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool]) */;
  %199 = cast(%var_1249, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %200 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(630), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %201 = cast(meta[relay.Constant][6] /* ty=Tensor[(630), float32] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %203 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %204 = @func_941() /* ty=Tensor[(14, 7, 14), float64] */;
  %205 = @func_1169() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %208 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%204, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = %188.0;
  %212 = %195.4;
  %213 = %198.0;
  %214 = minimum(%201, %202) /* ty=Tensor[(630), uint64] */;
  %215 = %203.0;
  %216 = not_equal(%209, %210) /* ty=Tensor[(14, 7, 14), bool] */;
  (%211, %212, meta[relay.Constant][4] /* ty=uint8 */, meta[relay.Constant][5] /* ty=Tensor[(24, 8), uint8] */, %213, %214, %215, %216)
}

def @func_2311(%var_2307: Tensor[(13, 2, 3), float64]) -> (Tensor[(13, 2, 3), float64],) {
  %217 = cast(%var_2307, dtype="float64") /* ty=Tensor[(13, 2, 3), float64] */;
  %218 = asinh(%217) /* ty=Tensor[(13, 2, 3), float64] */;
  (%218,)
}

def @func_2430(%var_2350: Tensor[(2925), uint32]) -> (Tensor[(14, 7, 14), float64], Tensor[(2925), uint32], Tensor[(14, 7, 14), float64], Tensor[(13, 15, 15), float32], Tensor[(13, 15, 15), int64], Tensor[(13, 15, 15), float64]) {
  %219 = @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
  %220 = cast(%var_2350, dtype="uint32") /* ty=Tensor[(2925), uint32] */;
  %221 = reshape(%220, newshape=[13, 15, 15]) /* ty=Tensor[(13, 15, 15), uint32] */;
  %222 = @func_2125(%221) /* ty=(Tensor[(13, 15, 15), int8], Tensor[(3, 1), bool], Tensor[(13, 15, 15), uint16]) */;
  %223 = %222.2;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  %225 = sqrt(%224) /* ty=Tensor[(13, 15, 15), float32] */;
  %226 = cast(%225, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
  %227 = cos(%226) /* ty=Tensor[(13, 15, 15), float64] */;
  %228 = cast(%225, dtype="uint8") /* ty=Tensor[(13, 15, 15), uint8] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%227, dtype="uint8") /* ty=Tensor[(13, 15, 15), uint8] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %232 = bitwise_or(%230, %231) /* ty=Tensor[(13, 15, 15), uint8] */;
  %233 = cast(%232, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  %234 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%225, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %237 = cast(%227, dtype="int64") /* ty=Tensor[(13, 15, 15), int64] */;
  %238 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%225, dtype="int64") /* ty=Tensor[(13, 15, 15), int64] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %241 = cast(%232, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
  %242 = @func_951() /* ty=Tensor[(14, 7, 14), float64] */;
  %243 = %219.0;
  %244 = power(%235, %236) /* ty=Tensor[(13, 15, 15), float32] */;
  %245 = bitwise_xor(%239, %240) /* ty=Tensor[(13, 15, 15), int64] */;
  %246 = asin(%241) /* ty=Tensor[(13, 15, 15), float64] */;
  (%242, %var_2350, %243, %244, %245, %246)
}

def @func_5993(%var_5965: uint16, %var_5966: Tensor[(1, 2), uint16]) -> (Tensor[(1, 2), bool],) {
  %247 = cast(%var_5965, dtype="bool") /* ty=bool */;
  %248 = cast(%var_5966, dtype="bool") /* ty=Tensor[(1, 2), bool] */;
  %249 = equal(%247, %248) /* ty=Tensor[(1, 2), bool] */;
  (%249,)
}

def @func_2461(%var_2453: uint32) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32], Tensor[(3, 1), bool], uint32) {
  %250 = @func_2289() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %251 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %252 = cast(%var_2453, dtype="uint32") /* ty=uint32 */;
  %253 = reshape(%252, newshape=[]) /* ty=uint32 */;
  %254 = @func_722(%253) /* ty=(Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint8]) */;
  %255 = %250.0;
  %256 = %251.0;
  %257 = %254.0;
  (%255, %256, %257, %var_2453)
}

def @func_6158(%var_6067: Tensor[(3375), float64]) -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32], Tensor[(3375), int64], Tensor[(15, 15, 15), float32], Tensor[(2925), float64], Tensor[(14, 7, 14), float32], Tensor[(15, 15, 15), float32], Tensor[(7, 9, 10), int64], Tensor[(630), float32], uint32, Tensor[(15, 15, 15), bool], Tensor[(7, 9, 10), int64], Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) {
  %258 = @func_871() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %259 = cast(meta[relay.Constant][7] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %260 = reshape(%259, newshape=[]) /* ty=uint32 */;
  %261 = @func_5219(%260) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32) */;
  %262 = cast(%var_6067, dtype="int64") /* ty=Tensor[(3375), int64] */;
  %263 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(3375), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %264 = cast(meta[relay.Constant][8] /* ty=Tensor[(3375), float64] */, dtype="int64") /* ty=Tensor[(3375), int64] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?), int64] */;
  %266 = cast(meta[relay.Constant][8] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %267 = reshape(%266, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %268 = @func_3492(%267) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2925), float64], Tensor[(15, 15, 15), float64]) */;
  %269 = %268.0;
  %270 = cast(%269, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %271 = cos(%270) /* ty=Tensor[(15, 15, 15), float64] */;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(15, 15, 15), float32] */;
  %273 = maximum(%264, %265) /* ty=Tensor[(3375), int64] */;
  %274 = cast(%273, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %275 = reshape(%274, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %276 = @func_3492(%275) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2925), float64], Tensor[(15, 15, 15), float64]) */;
  %277 = cast(%271, dtype="float32") /* ty=Tensor[(15, 15, 15), float32] */;
  %278 = cast(meta[relay.Constant][9] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %279 = reshape(%278, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float32] */;
  %280 = cast(%271, dtype="bool") /* ty=Tensor[(15, 15, 15), bool] */;
  %281 = cast(meta[relay.Constant][7] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %282 = @func_119(%279) /* ty=Tensor[(7, 9, 10), int64] */;
  %283 = cast(%282, dtype="float32") /* ty=Tensor[(7, 9, 10), float32] */;
  %284 = reshape(%283, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float32] */;
  %285 = @func_1778() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %286 = @func_4000() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %287 = %258.0;
  %288 = %261.0;
  %289 = log(%272) /* ty=Tensor[(15, 15, 15), float32] */;
  %290 = %276.1;
  %291 = @func_4665() /* ty=Tensor[(14, 7, 14), float32] */;
  %292 = cosh(%277) /* ty=Tensor[(15, 15, 15), float32] */;
  %293 = @func_3002() /* ty=uint32 */;
  %294 = greater_equal(%280, %281) /* ty=Tensor[(15, 15, 15), bool] */;
  %295 = @func_119(%284) /* ty=Tensor[(7, 9, 10), int64] */;
  %296 = %285.0;
  %297 = %286.0;
  (%287, %288, %273, %289, %290, %291, %292, %282, meta[relay.Constant][9] /* ty=Tensor[(630), float32] */, %293, %294, %295, %296, %297)
}

def @func_3002() -> uint32 {
  %298 = @func_2783() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) */;
  %298.4
}

def @func_4135() -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) {
  %299 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %300 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %301 = %299.0;
  %302 = %300.0;
  (%301, %302)
}

def @func_5485() -> (Tensor[(14, 7, 14), float64],) {
  %303 = @func_4135() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) */;
  %304 = %303.0;
  (%304,)
}

def @func_3013(%var_3008: Tensor[(1, 2, 4), float32], %var_3009: Tensor[(3, 2, 4), float32]) -> Tensor[(3, 2, 4), float32] {
  %305 = cast(%var_3008, dtype="float32") /* ty=Tensor[(1, 2, 4), float32] */;
  %306 = cast(%var_3009, dtype="float32") /* ty=Tensor[(3, 2, 4), float32] */;
  mod(%305, %306) /* ty=Tensor[(3, 2, 4), float32] */
}

def @func_4936(%var_4919: uint32) -> (Tensor[(14, 7, 14), float64], uint32, Tensor[(3, 1), uint8]) {
  %307 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %308 = cast(%var_4919, dtype="uint32") /* ty=uint32 */;
  %309 = reshape(%308, newshape=[]) /* ty=uint32 */;
  %310 = @func_698(%309) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
  %311 = %307.0;
  %312 = cast(%311, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %313 = cast(%var_4919, dtype="uint32") /* ty=uint32 */;
  %314 = reshape(%312, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float64] */;
  %315 = reshape(%313, newshape=[]) /* ty=uint32 */;
  %316 = @func_1970(%314, %315) /* ty=(Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint32], Tensor[(14, 7, 14), float32], uint32, uint32) */;
  %317 = %316.0;
  %318 = cast(%var_4919, dtype="uint8") /* ty=uint8 */;
  %319 = cast(%317, dtype="uint8") /* ty=Tensor[(3, 1), uint8] */;
  %320 = %310.2;
  %321 = add(%318, %319) /* ty=Tensor[(3, 1), uint8] */;
  (%311, %320, %321)
}

def @func_4997(%var_4958: Tensor[(10, 14, 8), float32], %var_4959: Tensor[(10, 14, 8), float32], %var_4963: Tensor[(10, 14, 8), float32], %var_4982: Tensor[(784), float64]) -> (Tensor[(10, 14, 8), float32], Tensor[(10, 14, 8), int32], Tensor[(10, 14, 8), uint8], Tensor[(14, 7, 14), float64], Tensor[(10, 14, 8), float32], Tensor[(7, 14, 8), float64], Tensor[(784), float64], Tensor[(6, 6, 11), float32], Tensor[(396), float64]) {
  %322 = cast(%var_4959, dtype="float32") /* ty=Tensor[(10, 14, 8), float32] */;
  %323 = shape_of(%var_4958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%var_4958, dtype="float32") /* ty=Tensor[(10, 14, 8), float32] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %326 = cast(%var_4963, dtype="int32") /* ty=Tensor[(10, 14, 8), int32] */;
  %327 = shape_of(%var_4958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%var_4958, dtype="int32") /* ty=Tensor[(10, 14, 8), int32] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %330 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 14, 8), float32] */, dtype="uint8") /* ty=Tensor[(10, 14, 8), uint8] */;
  %331 = shape_of(%var_4959, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%var_4959, dtype="uint8") /* ty=Tensor[(10, 14, 8), uint8] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %334 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 8), float32] */;
  %335 = cast(%var_4982, dtype="float64") /* ty=Tensor[(784), float64] */;
  %336 = reshape(%335, newshape=[7, 14, 8]) /* ty=Tensor[(7, 14, 8), float64] */;
  %337 = @func_3768(%336) /* ty=(Tensor[(7, 14, 8), float64],) */;
  %338 = cast(meta[relay.Constant][11] /* ty=Tensor[(396), float64] */, dtype="float64") /* ty=Tensor[(396), float64] */;
  %339 = reshape(%338, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), float64] */;
  %340 = @func_1219(%339) /* ty=(Tensor[(6, 6, 11), float32], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) */;
  %341 = divide(%324, %325) /* ty=Tensor[(10, 14, 8), float32] */;
  %342 = add(%328, %329) /* ty=Tensor[(10, 14, 8), int32] */;
  %343 = left_shift(%332, %333) /* ty=Tensor[(10, 14, 8), uint8] */;
  %344 = @func_941() /* ty=Tensor[(14, 7, 14), float64] */;
  %345 = acos(%334) /* ty=Tensor[(10, 14, 8), float32] */;
  %346 = %337.0;
  %347 = %340.0;
  (%341, %342, %343, %344, %345, %346, %var_4982, %347, meta[relay.Constant][11] /* ty=Tensor[(396), float64] */)
}

def @func_4392(%var_4331: Tensor[(120), float32], %var_4369: Tensor[(8), float32]) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32], Tensor[(4, 6, 5), float32], Tensor[(120), float32], uint32, Tensor[(14, 7, 14), float64], Tensor[(15, 13, 5), bool], Tensor[(975), uint16], Tensor[(3, 2, 4), float32], Tensor[(8), float32], Tensor[(24, 1), float32], Tensor[(8), float32]) {
  %348 = @func_871() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %349 = @func_4135() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) */;
  %350 = %349.0;
  %351 = cast(%350, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %352 = cast(%var_4331, dtype="float32") /* ty=Tensor[(120), float32] */;
  %353 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %354 = reshape(%352, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), float32] */;
  %355 = reshape(%353, newshape=[]) /* ty=uint32 */;
  %356 = @func_3443(%354, %355) /* ty=(Tensor[(4, 6, 5), float32], Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
  %357 = @func_4042() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64]) */;
  %358 = cast(meta[relay.Constant][13] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %359 = cast(meta[relay.Constant][13] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
  %360 = reshape(%358, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
  %361 = reshape(%359, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
  %362 = @func_349(%360, %361) /* ty=(Tensor[(15, 13, 5), bool], Tensor[(3, 1), bool], uint32) */;
  %363 = cast(%var_4369, dtype="float32") /* ty=Tensor[(8), float32] */;
  %364 = cast(meta[relay.Constant][14] /* ty=Tensor[(24, 1), float32] */, dtype="float32") /* ty=Tensor[(24, 1), float32] */;
  %365 = reshape(%363, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), float32] */;
  %366 = reshape(%364, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), float32] */;
  %367 = %362.0;
  %368 = cast(%367, dtype="uint16") /* ty=Tensor[(15, 13, 5), uint16] */;
  %369 = @func_3013(%365, %366) /* ty=Tensor[(3, 2, 4), float32] */;
  %370 = cast(%369, dtype="float32") /* ty=Tensor[(3, 2, 4), float32] */;
  %371 = reshape(%368, newshape=[65, 15]) /* ty=Tensor[(65, 15), uint16] */;
  %372 = reshape(%370, newshape=[2, 12]) /* ty=Tensor[(2, 12), float32] */;
  %373 = @func_3108(%371, %372) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64], uint32, Tensor[(65, 15), uint16], Tensor[(3, 2, 4), float32], Tensor[(8), float32], Tensor[(2, 12), float32]) */;
  %374 = %348.1;
  %375 = atan(%351) /* ty=Tensor[(14, 7, 14), float32] */;
  %376 = %356.0;
  %377 = %357.0;
  %378 = %373.5;
  (%374, %375, %376, %var_4331, meta[relay.Constant][12] /* ty=uint32 */, %377, %367, meta[relay.Constant][13] /* ty=Tensor[(975), uint16] */, %369, %var_4369, meta[relay.Constant][14] /* ty=Tensor[(24, 1), float32] */, %378)
}

def @func_6239(%var_6188: Tensor[(7, 10, 10), float32]) -> (Tensor[(7, 10, 10), float32], Tensor[(14, 7, 14), float64], Tensor[(7, 10, 10), float64], Tensor[(14, 7, 14), float64], uint32, Tensor[(9), uint32]) {
  %379 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
  %380 = shape_of(%var_6188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%var_6188, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %383 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 10, 10), float32] */, dtype="float64") /* ty=Tensor[(7, 10, 10), float64] */;
  %384 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %385 = %384.0;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %387 = cast(meta[relay.Constant][16] /* ty=Tensor[(9), uint32] */, dtype="uint32") /* ty=Tensor[(9), uint32] */;
  %388 = reshape(%386, newshape=[1372]) /* ty=Tensor[(1372), float32] */;
  %389 = reshape(%387, newshape=[1, 9, 1]) /* ty=Tensor[(1, 9, 1), uint32] */;
  %390 = @func_2593(%388, %389) /* ty=(Tensor[(8, 2), float64], uint32, Tensor[(1372), float32], Tensor[(1, 9, 1), uint16]) */;
  %391 = floor_divide(%381, %382) /* ty=Tensor[(7, 10, 10), float32] */;
  %392 = @func_941() /* ty=Tensor[(14, 7, 14), float64] */;
  %393 = exp(%383) /* ty=Tensor[(7, 10, 10), float64] */;
  %394 = %390.1;
  (%391, %392, %393, %385, %394, meta[relay.Constant][16] /* ty=Tensor[(9), uint32] */)
}

def @func_4860(%var_4785: Tensor[(396), float64], %var_4794: Tensor[(192), uint8], %var_4800: Tensor[(2925), uint32], %var_4848: Tensor[(3, 900), int64]) -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32], Tensor[(396), float64], Tensor[(8, 8, 3), uint8], uint8, Tensor[(192), uint8], Tensor[(630), float32], Tensor[(13, 15, 15), uint16], Tensor[(2925), uint32], Tensor[(14, 7, 14), float32], Tensor[(15, 12, 15), bool], Tensor[(3, 900), int64]) {
  %395 = @func_4135() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) */;
  %396 = cast(%var_4785, dtype="float64") /* ty=Tensor[(396), float64] */;
  %397 = reshape(%396, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), float64] */;
  %398 = @func_1219(%397) /* ty=(Tensor[(6, 6, 11), float32], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) */;
  %399 = cast(meta[relay.Constant][17] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %400 = cast(%var_4794, dtype="uint8") /* ty=Tensor[(192), uint8] */;
  %401 = cast(meta[relay.Constant][18] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %402 = reshape(%399, newshape=[]) /* ty=uint8 */;
  %403 = reshape(%400, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), uint8] */;
  %404 = reshape(%401, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %405 = @func_985(%402, %403, %404) /* ty=(Tensor[(8, 8, 3), uint8], Tensor[(3, 1), bool], Tensor[(7, 9, 10), int64], Tensor[(630), float32], Tensor[(14, 7, 14), float64]) */;
  %406 = cast(%var_4800, dtype="uint32") /* ty=Tensor[(2925), uint32] */;
  %407 = reshape(%406, newshape=[13, 15, 15]) /* ty=Tensor[(13, 15, 15), uint32] */;
  %408 = @func_2125(%407) /* ty=(Tensor[(13, 15, 15), int8], Tensor[(3, 1), bool], Tensor[(13, 15, 15), uint16]) */;
  %409 = cast(%var_4848, dtype="int64") /* ty=Tensor[(3, 900), int64] */;
  %410 = cast(%var_4848, dtype="int64") /* ty=Tensor[(3, 900), int64] */;
  %411 = reshape(%409, newshape=[15, 12, 15]) /* ty=Tensor[(15, 12, 15), int64] */;
  %412 = reshape(%410, newshape=[15, 12, 15]) /* ty=Tensor[(15, 12, 15), int64] */;
  %413 = %395.0;
  %414 = %398.1;
  %415 = %405.0;
  %416 = %408.2;
  %417 = @func_3970() /* ty=Tensor[(14, 7, 14), float32] */;
  %418 = @func_4062(%411, %412) /* ty=Tensor[(15, 12, 15), bool] */;
  (%413, %414, %var_4785, %415, meta[relay.Constant][17] /* ty=uint8 */, %var_4794, meta[relay.Constant][18] /* ty=Tensor[(630), float32] */, %416, %var_4800, %417, %418, %var_4848)
}

def @func_3291() -> (Tensor[(14, 7, 14), float32],) {
  %419 = @func_2289() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %420 = %419.0;
  (%420,)
}

def @func_6899() -> Tensor[(14, 7, 14), float32] {
  %421 = @func_2783() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) */;
  %421.0
}

def @func_6349() -> uint32 {
  @func_3002() /* ty=uint32 */
}

def @func_7192() -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) {
  %422 = @func_6695() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64]) */;
  %423 = %422.0;
  %424 = @func_3970() /* ty=Tensor[(14, 7, 14), float32] */;
  (%423, %424)
}

def @func_7373() -> Tensor[(14, 7, 14), float32] {
  %425 = @func_7220() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %425.0
}

def @func_985(%var_960: uint8, %var_961: Tensor[(8, 8, 3), uint8], %var_968: Tensor[(630), float32]) -> (Tensor[(8, 8, 3), uint8], Tensor[(3, 1), bool], Tensor[(7, 9, 10), int64], Tensor[(630), float32], Tensor[(14, 7, 14), float64]) {
  %426 = cast(%var_960, dtype="uint8") /* ty=uint8 */;
  %427 = cast(%var_961, dtype="uint8") /* ty=Tensor[(8, 8, 3), uint8] */;
  %428 = cast(%var_960, dtype="uint32") /* ty=uint32 */;
  %429 = reshape(%428, newshape=[]) /* ty=uint32 */;
  %430 = @func_799(%429) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool]) */;
  %431 = cast(%var_968, dtype="float32") /* ty=Tensor[(630), float32] */;
  %432 = reshape(%431, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float32] */;
  %433 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %434 = left_shift(%426, %427) /* ty=Tensor[(8, 8, 3), uint8] */;
  %435 = %430.1;
  %436 = @func_119(%432) /* ty=Tensor[(7, 9, 10), int64] */;
  %437 = %433.0;
  (%434, %435, %436, %var_968, %437)
}

def @func_5329() -> Tensor[(14, 7, 14), float64] {
  @func_951() /* ty=Tensor[(14, 7, 14), float64] */
}

def @func_2125(%var_2099: Tensor[(13, 15, 15), uint32]) -> (Tensor[(13, 15, 15), int8], Tensor[(3, 1), bool], Tensor[(13, 15, 15), uint16]) {
  %438 = @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
  %439 = %438.2;
  %440 = cast(%439, dtype="int8") /* ty=int8 */;
  %441 = cast(%var_2099, dtype="int8") /* ty=Tensor[(13, 15, 15), int8] */;
  %442 = cast(%439, dtype="uint32") /* ty=uint32 */;
  %443 = reshape(%442, newshape=[]) /* ty=uint32 */;
  %444 = cast(%var_2099, dtype="uint16") /* ty=Tensor[(13, 15, 15), uint16] */;
  %445 = cast(%439, dtype="uint16") /* ty=uint16 */;
  %446 = maximum(%440, %441) /* ty=Tensor[(13, 15, 15), int8] */;
  %447 = @func_106(%443) /* ty=Tensor[(3, 1), bool] */;
  %448 = left_shift(%444, %445) /* ty=Tensor[(13, 15, 15), uint16] */;
  (%446, %447, %448)
}

def @func_5052() -> (Tensor[(7, 9, 10), int64], Tensor[(70, 9), float32], Tensor[(14, 7, 14), float32]) {
  %449 = cast(meta[relay.Constant][19] /* ty=Tensor[(70, 9), float32] */, dtype="float32") /* ty=Tensor[(70, 9), float32] */;
  %450 = reshape(%449, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float32] */;
  %451 = @func_4556() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %452 = %451.0;
  %453 = cast(%452, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %454 = cosh(%453) /* ty=Tensor[(14, 7, 14), float32] */;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %456 = @func_119(%450) /* ty=Tensor[(7, 9, 10), int64] */;
  %457 = log2(%455) /* ty=Tensor[(14, 7, 14), float32] */;
  (%456, meta[relay.Constant][19] /* ty=Tensor[(70, 9), float32] */, %457)
}

def @func_941() -> Tensor[(14, 7, 14), float64] {
  %458 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %458.0
}

def @func_5175() -> (uint32,) {
  %459 = @func_3002() /* ty=uint32 */;
  (%459,)
}

def @func_619() -> (Tensor[(14, 7, 14), float64],) {
  %460 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %461 = %460.0;
  (%461,)
}

def @func_871() -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) {
  %462 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %463 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %464 = %463.0;
  %465 = cast(%464, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %466 = %462.0;
  %467 = sigmoid(%465) /* ty=Tensor[(14, 7, 14), float32] */;
  (%466, %467)
}

def @func_1970(%var_1938: Tensor[(14, 7, 14), float64], %var_1964: uint32) -> (Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint32], Tensor[(14, 7, 14), float32], uint32, uint32) {
  %468 = @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
  %469 = @func_941() /* ty=Tensor[(14, 7, 14), float64] */;
  %470 = cast(%469, dtype="uint32") /* ty=Tensor[(14, 7, 14), uint32] */;
  %471 = shape_of(%var_1938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%var_1938, dtype="uint32") /* ty=Tensor[(14, 7, 14), uint32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %474 = cast(%var_1938, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %475 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%469, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %478 = logical_or(%476, %477) /* ty=Tensor[(14, 7, 14), bool] */;
  %479 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 7, 14), bool] */, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%478, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %483 = cast(%var_1964, dtype="uint32") /* ty=uint32 */;
  %484 = reshape(%483, newshape=[]) /* ty=uint32 */;
  %485 = @func_698(%484) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
  %486 = %468.1;
  %487 = bitwise_or(%472, %473) /* ty=Tensor[(14, 7, 14), uint32] */;
  %488 = add(%481, %482) /* ty=Tensor[(14, 7, 14), float32] */;
  %489 = %485.2;
  (%486, %487, %488, %489, %var_1964)
}

def @func_6461() -> (Tensor[(14, 7, 14), float64],) {
  %490 = @func_5275() /* ty=Tensor[(14, 7, 14), float64] */;
  (%490,)
}

def @func_4556() -> (Tensor[(14, 7, 14), float32],) {
  %491 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %492 = %491.0;
  (%492,)
}

def @func_2289() -> (Tensor[(14, 7, 14), float32],) {
  %493 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %494 = %493.0;
  (%494,)
}

def @func_3825(%var_3818: uint32) -> (Tensor[(14, 7, 14), float32], Tensor[(3, 1), bool], uint32) {
  %495 = @func_951() /* ty=Tensor[(14, 7, 14), float64] */;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %497 = cast(%var_3818, dtype="uint32") /* ty=uint32 */;
  %498 = reshape(%497, newshape=[]) /* ty=uint32 */;
  %499 = @func_722(%498) /* ty=(Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint8]) */;
  %500 = atanh(%496) /* ty=Tensor[(14, 7, 14), float32] */;
  %501 = %499.0;
  (%500, %501, %var_3818)
}

def @func_349(%var_325: Tensor[(15, 13, 5), uint16], %var_326: Tensor[(15, 13, 5), uint16]) -> (Tensor[(15, 13, 5), bool], Tensor[(3, 1), bool], uint32) {
  %502 = cast(%var_326, dtype="bool") /* ty=Tensor[(15, 13, 5), bool] */;
  %503 = shape_of(%var_325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_325, dtype="bool") /* ty=Tensor[(15, 13, 5), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = cast(meta[relay.Constant][21] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %507 = reshape(%506, newshape=[]) /* ty=uint32 */;
  %508 = not_equal(%504, %505) /* ty=Tensor[(15, 13, 5), bool] */;
  %509 = @func_106(%507) /* ty=Tensor[(3, 1), bool] */;
  (%508, %509, meta[relay.Constant][21] /* ty=uint32 */)
}

def @func_5523(%var_5517: uint32, %var_5520: Tensor[(24), float32]) -> (Tensor[(14, 7, 14), float32], Tensor[(9, 1), uint32], uint32, Tensor[(3375), float64], Tensor[(8), float32], Tensor[(24), float32]) {
  %510 = @func_4556() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %511 = cast(%var_5517, dtype="uint32") /* ty=uint32 */;
  %512 = cast(meta[relay.Constant][22] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %513 = cast(meta[relay.Constant][23] /* ty=Tensor[(8), float32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
  %514 = cast(%var_5520, dtype="float32") /* ty=Tensor[(24), float32] */;
  %515 = reshape(%511, newshape=[]) /* ty=uint32 */;
  %516 = reshape(%512, newshape=[225, 15]) /* ty=Tensor[(225, 15), float64] */;
  %517 = reshape(%513, newshape=[2, 4]) /* ty=Tensor[(2, 4), float32] */;
  %518 = reshape(%514, newshape=[24, 1]) /* ty=Tensor[(24, 1), float32] */;
  %519 = @func_3881(%515, %516, %517, %518) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32, Tensor[(15, 15, 15), float64], Tensor[(225, 15), float64], Tensor[(3, 2, 4), float32], Tensor[(2, 4), float32], Tensor[(24, 1), float32], Tensor[(14, 7, 14), float32], Tensor[(8, 2), float64], Tensor[(9, 1), uint32]) */;
  %520 = %510.0;
  %521 = %519.10;
  (%520, %521, %var_5517, meta[relay.Constant][22] /* ty=Tensor[(3375), float64] */, meta[relay.Constant][23] /* ty=Tensor[(8), float32] */, %var_5520)
}

def @func_106(%var_81: uint32) -> Tensor[(3, 1), bool] {
  %522 = cast(%var_81, dtype="bool") /* ty=bool */;
  %523 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 1), uint32] */, dtype="bool") /* ty=Tensor[(3, 1), bool] */;
  equal(%522, %523) /* ty=Tensor[(3, 1), bool] */
}

def @func_2783() -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) {
  %524 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %525 = cast(meta[relay.Constant][25] /* ty=Tensor[(2925), uint32] */, dtype="uint32") /* ty=Tensor[(2925), uint32] */;
  %526 = reshape(%525, newshape=[2925]) /* ty=Tensor[(2925), uint32] */;
  %527 = @func_2430(%526) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), uint32], Tensor[(14, 7, 14), float64], Tensor[(13, 15, 15), float32], Tensor[(13, 15, 15), int64], Tensor[(13, 15, 15), float64]) */;
  %528 = cast(meta[relay.Constant][26] /* ty=Tensor[(2925), uint32] */, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %529 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(2925), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %530 = cast(meta[relay.Constant][25] /* ty=Tensor[(2925), uint32] */, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?), float32] */;
  %532 = add(%530, %531) /* ty=Tensor[(2925), float32] */;
  %533 = cast(%532, dtype="uint16") /* ty=Tensor[(2925), uint16] */;
  %534 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(2925), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %535 = cast(meta[relay.Constant][26] /* ty=Tensor[(2925), uint32] */, dtype="uint16") /* ty=Tensor[(2925), uint16] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %537 = %527.0;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %539 = cast(meta[relay.Constant][27] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %540 = reshape(%538, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float32] */;
  %541 = reshape(%539, newshape=[]) /* ty=uint32 */;
  %542 = @func_2171(%540, %541) /* ty=(Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) */;
  %543 = %524.0;
  %544 = right_shift(%535, %536) /* ty=Tensor[(2925), uint16] */;
  %545 = %542.2;
  (%543, %537, %544, %545, meta[relay.Constant][27] /* ty=uint32 */)
}

def @func_7334() -> Tensor[(14, 7, 14), float64] {
  %546 = @func_6248() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %546.0
}

def @func_7220() -> (Tensor[(14, 7, 14), float32],) {
  %547 = @func_4441() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(2925), float32]) */;
  %548 = %547.0;
  (%548,)
}

def @func_1436(%var_1397: Tensor[(12, 11, 9), int32], %var_1398: Tensor[(12, 11, 9), int32], %var_1417: Tensor[(192), uint8]) -> (Tensor[(12, 11, 9), float32], Tensor[(12, 11, 9), bool], Tensor[(8, 8, 3), uint8], uint8, Tensor[(192), uint8], Tensor[(630), float32], Tensor[(14, 7, 14), float32]) {
  %549 = cast(%var_1398, dtype="int32") /* ty=Tensor[(12, 11, 9), int32] */;
  %550 = shape_of(%var_1397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%var_1397, dtype="int32") /* ty=Tensor[(12, 11, 9), int32] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %553 = minimum(%551, %552) /* ty=Tensor[(12, 11, 9), int32] */;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %555 = cast(%var_1398, dtype="bool") /* ty=Tensor[(12, 11, 9), bool] */;
  %556 = shape_of(%var_1397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%var_1397, dtype="bool") /* ty=Tensor[(12, 11, 9), bool] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %559 = cast(meta[relay.Constant][28] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %560 = cast(%var_1417, dtype="uint8") /* ty=Tensor[(192), uint8] */;
  %561 = cast(meta[relay.Constant][29] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %562 = reshape(%559, newshape=[]) /* ty=uint8 */;
  %563 = reshape(%560, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), uint8] */;
  %564 = reshape(%561, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %565 = @func_985(%562, %563, %564) /* ty=(Tensor[(8, 8, 3), uint8], Tensor[(3, 1), bool], Tensor[(7, 9, 10), int64], Tensor[(630), float32], Tensor[(14, 7, 14), float64]) */;
  %566 = @func_871() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %567 = sqrt(%554) /* ty=Tensor[(12, 11, 9), float32] */;
  %568 = logical_and(%557, %558) /* ty=Tensor[(12, 11, 9), bool] */;
  %569 = %565.0;
  %570 = %566.1;
  (%567, %568, %569, meta[relay.Constant][28] /* ty=uint8 */, %var_1417, meta[relay.Constant][29] /* ty=Tensor[(630), float32] */, %570)
}

def @func_6943() -> Tensor[(2925), float64] {
  %571 = @func_3742() /* ty=(Tensor[(2925), float64],) */;
  %571.0
}

def @func_951() -> Tensor[(14, 7, 14), float64] {
  @func_892() /* ty=Tensor[(14, 7, 14), float64] */
}

def @func_1496(%var_1475: uint8, %var_1476: Tensor[(192, 1), uint8]) -> (Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint8, Tensor[(192, 1), uint8], Tensor[(630), float32]) {
  %572 = @func_871() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %573 = cast(%var_1475, dtype="uint8") /* ty=uint8 */;
  %574 = cast(%var_1476, dtype="uint8") /* ty=Tensor[(192, 1), uint8] */;
  %575 = cast(meta[relay.Constant][30] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %576 = reshape(%573, newshape=[]) /* ty=uint8 */;
  %577 = reshape(%574, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), uint8] */;
  %578 = reshape(%575, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %579 = @func_985(%576, %577, %578) /* ty=(Tensor[(8, 8, 3), uint8], Tensor[(3, 1), bool], Tensor[(7, 9, 10), int64], Tensor[(630), float32], Tensor[(14, 7, 14), float64]) */;
  %580 = %572.0;
  %581 = %579.1;
  (%580, %581, %var_1475, %var_1476, meta[relay.Constant][30] /* ty=Tensor[(630), float32] */)
}

def @func_3443(%var_3427: Tensor[(4, 6, 5), float32], %var_3438: uint32) -> (Tensor[(4, 6, 5), float32], Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) {
  %582 = cast(%var_3427, dtype="float32") /* ty=Tensor[(4, 6, 5), float32] */;
  %583 = @func_2783() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) */;
  %584 = cast(%var_3438, dtype="uint32") /* ty=uint32 */;
  %585 = reshape(%584, newshape=[]) /* ty=uint32 */;
  %586 = @func_799(%585) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool]) */;
  %587 = atan(%582) /* ty=Tensor[(4, 6, 5), float32] */;
  %588 = %583.1;
  %589 = %586.1;
  (%587, %588, %589, %var_3438)
}

def @func_3377() -> (Tensor[(14, 7, 14), float64], Tensor[(2925), float64], Tensor[(1372), float32], Tensor[(9, 1), uint32]) {
  %590 = @func_1169() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %591 = %590.0;
  %592 = cast(%591, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %593 = @func_2853() /* ty=(Tensor[(2925), float64],) */;
  %594 = asinh(%592) /* ty=Tensor[(14, 7, 14), float64] */;
  %595 = cast(%594, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %596 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 1), uint32] */, dtype="uint32") /* ty=Tensor[(9, 1), uint32] */;
  %597 = reshape(%595, newshape=[1372]) /* ty=Tensor[(1372), float32] */;
  %598 = reshape(%596, newshape=[1, 9, 1]) /* ty=Tensor[(1, 9, 1), uint32] */;
  %599 = @func_2593(%597, %598) /* ty=(Tensor[(8, 2), float64], uint32, Tensor[(1372), float32], Tensor[(1, 9, 1), uint16]) */;
  %600 = %593.0;
  %601 = %599.2;
  (%594, %600, %601, meta[relay.Constant][31] /* ty=Tensor[(9, 1), uint32] */)
}

def @func_7363() -> (uint32, uint32) {
  %602 = @func_3002() /* ty=uint32 */;
  %603 = @func_3002() /* ty=uint32 */;
  (%602, %603)
}

def @func_6248() -> (Tensor[(14, 7, 14), float64],) {
  %604 = @func_892() /* ty=Tensor[(14, 7, 14), float64] */;
  (%604,)
}

def @func_5585() -> uint32 {
  %605 = @func_2783() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) */;
  %605.4
}

def @func_6886(%var_6803: Tensor[(3, 7, 8), float32], %var_6804: Tensor[(3, 7, 8), float32], %var_6825: Tensor[(450, 6), int64], %var_6833: Tensor[(1, 2925), uint32]) -> (uint32, Tensor[(15, 12, 15), bool], Tensor[(2925), uint32], Tensor[(1, 2925), uint32], Tensor[(14, 7, 14), float64], Tensor[(450, 6), bool], Tensor[(3, 7, 8), int8], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64]) {
  %606 = cast(meta[relay.Constant][32] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %607 = reshape(%606, newshape=[]) /* ty=uint32 */;
  %608 = @func_698(%607) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
  %609 = cast(%var_6825, dtype="int64") /* ty=Tensor[(450, 6), int64] */;
  %610 = cast(%var_6825, dtype="int64") /* ty=Tensor[(450, 6), int64] */;
  %611 = reshape(%609, newshape=[15, 12, 15]) /* ty=Tensor[(15, 12, 15), int64] */;
  %612 = reshape(%610, newshape=[15, 12, 15]) /* ty=Tensor[(15, 12, 15), int64] */;
  %613 = cast(%var_6833, dtype="uint32") /* ty=Tensor[(1, 2925), uint32] */;
  %614 = reshape(%613, newshape=[2925]) /* ty=Tensor[(2925), uint32] */;
  %615 = @func_2430(%614) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), uint32], Tensor[(14, 7, 14), float64], Tensor[(13, 15, 15), float32], Tensor[(13, 15, 15), int64], Tensor[(13, 15, 15), float64]) */;
  %616 = @func_5864() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %617 = cast(%var_6825, dtype="bool") /* ty=Tensor[(450, 6), bool] */;
  %618 = cast(meta[relay.Constant][32] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %619 = cast(%var_6804, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %620 = shape_of(%var_6803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%var_6803, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %623 = less(%621, %622) /* ty=Tensor[(3, 7, 8), bool] */;
  %624 = cast(%623, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
  %625 = sin(%624) /* ty=Tensor[(3, 7, 8), float64] */;
  %626 = cast(%var_6803, dtype="int8") /* ty=Tensor[(3, 7, 8), int8] */;
  %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%625, dtype="int8") /* ty=Tensor[(3, 7, 8), int8] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %630 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %631 = @func_5768() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %632 = %608.2;
  %633 = @func_4062(%611, %612) /* ty=Tensor[(15, 12, 15), bool] */;
  %634 = %615.1;
  %635 = %616.0;
  %636 = not_equal(%617, %618) /* ty=Tensor[(450, 6), bool] */;
  %637 = multiply(%628, %629) /* ty=Tensor[(3, 7, 8), int8] */;
  %638 = %630.0;
  %639 = %631.0;
  (%632, %633, %634, %var_6833, %635, %636, %637, %638, %639)
}

def @func_2853() -> (Tensor[(2925), float64],) {
  %640 = @func_2783() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) */;
  %641 = %640.2;
  %642 = cast(%641, dtype="float64") /* ty=Tensor[(2925), float64] */;
  %643 = rsqrt(%642) /* ty=Tensor[(2925), float64] */;
  (%643,)
}

def @func_5275() -> Tensor[(14, 7, 14), float64] {
  %644 = @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
  %644.0
}

def @func_3234(%var_3196: Tensor[(8, 1, 6), uint32]) -> (uint32, Tensor[(14, 7, 14), float64], Tensor[(8, 13, 6), int32], Tensor[(8, ?, 6), float64]) {
  %645 = @func_3002() /* ty=uint32 */;
  %646 = cast(%645, dtype="int16") /* ty=int16 */;
  %647 = cast(%var_3196, dtype="int16") /* ty=Tensor[(8, 1, 6), int16] */;
  %648 = bitwise_or(%646, %647) /* ty=Tensor[(8, 1, 6), int16] */;
  %649 = cast(%648, dtype="float64") /* ty=Tensor[(8, 1, 6), float64] */;
  %650 = cast(%645, dtype="float64") /* ty=float64 */;
  %651 = divide(%649, %650) /* ty=Tensor[(8, 1, 6), float64] */;
  %652 = cast(%651, dtype="int32") /* ty=Tensor[(8, 1, 6), int32] */;
  %653 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 13, 6), float64] */, dtype="int32") /* ty=Tensor[(8, 13, 6), int32] */;
  %654 = cast(%var_3196, dtype="float32") /* ty=Tensor[(8, 1, 6), float32] */;
  %655 = atan(%654) /* ty=Tensor[(8, 1, 6), float32] */;
  %656 = cast(%648, dtype="bool") /* ty=Tensor[(8, 1, 6), bool] */;
  %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%655, dtype="bool") /* ty=Tensor[(8, 1, 6), bool] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %660 = not_equal(%658, %659) /* ty=Tensor[(8, ?, 6), bool] */;
  %661 = cast(%660, dtype="float64") /* ty=Tensor[(8, ?, 6), float64] */;
  %662 = @func_3002() /* ty=uint32 */;
  %663 = @func_951() /* ty=Tensor[(14, 7, 14), float64] */;
  %664 = bitwise_or(%652, %653) /* ty=Tensor[(8, 13, 6), int32] */;
  %665 = cosh(%661) /* ty=Tensor[(8, ?, 6), float64] */;
  (%662, %663, %664, %665)
}

def @func_5308() -> (Tensor[(2925), float32],) {
  %666 = @func_5194() /* ty=Tensor[(2925), float32] */;
  (%666,)
}

def @func_6509() -> Tensor[(14, 7, 14), float32] {
  %667 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %667.0
}

def @func_6533() -> Tensor[(14, 7, 14), float64] {
  @func_5329() /* ty=Tensor[(14, 7, 14), float64] */
}

def @func_5356() -> (Tensor[(3, 1), bool],) {
  %668 = @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
  %669 = %668.1;
  (%669,)
}

def @func_2171(%var_2161: Tensor[(14, 7, 14), float32], %var_2169: uint32) -> (Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) {
  %670 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %671 = %670.0;
  %672 = cast(%var_2161, dtype="int16") /* ty=Tensor[(14, 7, 14), int16] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="int16") /* ty=Tensor[(14, 7, 14), int16] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %676 = cast(%var_2161, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %677 = cast(%var_2169, dtype="uint32") /* ty=uint32 */;
  %678 = reshape(%676, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float64] */;
  %679 = reshape(%677, newshape=[]) /* ty=uint32 */;
  %680 = @func_1970(%678, %679) /* ty=(Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint32], Tensor[(14, 7, 14), float32], uint32, uint32) */;
  %681 = maximum(%674, %675) /* ty=Tensor[(14, 7, 14), int16] */;
  %682 = %680.2;
  (%681, %682, %var_2169)
}

def @func_6376() -> Tensor[(9, 5, 10), int16] {
  %683 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 5, 10), int16] */, dtype="int16") /* ty=Tensor[(9, 5, 10), int16] */;
  %684 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(9, 5, 10), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 5, 10), int16] */, dtype="int16") /* ty=Tensor[(9, 5, 10), int16] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  minimum(%685, %686) /* ty=Tensor[(9, 5, 10), int16] */
}

def @func_2593(%var_2572: Tensor[(1372), float32], %var_2584: Tensor[(1, 9, 1), uint32]) -> (Tensor[(8, 2), float64], uint32, Tensor[(1372), float32], Tensor[(1, 9, 1), uint16]) {
  %687 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 2), float64] */;
  %688 = cast(%var_2572, dtype="float32") /* ty=Tensor[(1372), float32] */;
  %689 = cast(meta[relay.Constant][37] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %690 = reshape(%688, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float32] */;
  %691 = reshape(%689, newshape=[]) /* ty=uint32 */;
  %692 = @func_2171(%690, %691) /* ty=(Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) */;
  %693 = cast(meta[relay.Constant][37] /* ty=uint32 */, dtype="uint16") /* ty=uint16 */;
  %694 = cast(%var_2584, dtype="uint16") /* ty=Tensor[(1, 9, 1), uint16] */;
  %695 = sin(%687) /* ty=Tensor[(8, 2), float64] */;
  %696 = %692.2;
  %697 = multiply(%693, %694) /* ty=Tensor[(1, 9, 1), uint16] */;
  (%695, %696, %var_2572, %697)
}

def @func_6653() -> Tensor[(2925), float64] {
  %698 = @func_3742() /* ty=(Tensor[(2925), float64],) */;
  %698.0
}

def @func_2706(%var_2689: int16, %var_2690: Tensor[(16, 11, 12), int16]) -> (Tensor[(14, 7, 14), float64], Tensor[(16, 11, 12), float32]) {
  %699 = cast(%var_2689, dtype="bool") /* ty=bool */;
  %700 = cast(%var_2690, dtype="bool") /* ty=Tensor[(16, 11, 12), bool] */;
  %701 = not_equal(%699, %700) /* ty=Tensor[(16, 11, 12), bool] */;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(16, 11, 12), float32] */;
  %703 = @func_2200() /* ty=Tensor[(14, 7, 14), float64] */;
  %704 = acosh(%702) /* ty=Tensor[(16, 11, 12), float32] */;
  (%703, %704)
}

def @func_3970() -> Tensor[(14, 7, 14), float32] {
  %705 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %706 = %705.0;
  %707 = cast(%706, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  acosh(%707) /* ty=Tensor[(14, 7, 14), float32] */
}

def @func_6695() -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64]) {
  %708 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %709 = @func_5485() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %710 = %708.0;
  %711 = %709.0;
  (%710, %711)
}

def @func_3108(%var_3079: Tensor[(65, 15), uint16], %var_3093: Tensor[(2, 12), float32]) -> (Tensor[(14, 7, 14), float64], Tensor[(2925), float64], uint32, Tensor[(65, 15), uint16], Tensor[(3, 2, 4), float32], Tensor[(8), float32], Tensor[(2, 12), float32]) {
  %712 = @func_2853() /* ty=(Tensor[(2925), float64],) */;
  %713 = cast(%var_3079, dtype="uint16") /* ty=Tensor[(65, 15), uint16] */;
  %714 = cast(%var_3079, dtype="uint16") /* ty=Tensor[(65, 15), uint16] */;
  %715 = reshape(%713, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
  %716 = reshape(%714, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
  %717 = @func_349(%715, %716) /* ty=(Tensor[(15, 13, 5), bool], Tensor[(3, 1), bool], uint32) */;
  %718 = cast(meta[relay.Constant][38] /* ty=Tensor[(8), float32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
  %719 = cast(%var_3093, dtype="float32") /* ty=Tensor[(2, 12), float32] */;
  %720 = reshape(%718, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), float32] */;
  %721 = reshape(%719, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), float32] */;
  %722 = @func_951() /* ty=Tensor[(14, 7, 14), float64] */;
  %723 = %712.0;
  %724 = %717.2;
  %725 = @func_3013(%720, %721) /* ty=Tensor[(3, 2, 4), float32] */;
  (%722, %723, %724, %var_3079, %725, meta[relay.Constant][38] /* ty=Tensor[(8), float32] */, %var_3093)
}

def @func_799(%var_791: uint32) -> (Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool]) {
  %726 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %727 = cast(%var_791, dtype="uint32") /* ty=uint32 */;
  %728 = reshape(%727, newshape=[]) /* ty=uint32 */;
  %729 = @func_106(%728) /* ty=Tensor[(3, 1), bool] */;
  %730 = cast(%var_791, dtype="bool") /* ty=bool */;
  %731 = cast(%729, dtype="bool") /* ty=Tensor[(3, 1), bool] */;
  %732 = %726.0;
  %733 = less(%730, %731) /* ty=Tensor[(3, 1), bool] */;
  (%732, %733)
}

def @func_1113() -> (Tensor[(14, 7, 14), float32],) {
  %734 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %735 = %734.1;
  (%735,)
}

def @func_3461() -> (Tensor[(14, 7, 14), float32],) {
  %736 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %737 = %736.0;
  (%737,)
}

def @func_4000() -> (Tensor[(14, 7, 14), float64],) {
  %738 = @func_2200() /* ty=Tensor[(14, 7, 14), float64] */;
  (%738,)
}

def @func_5194() -> Tensor[(2925), float32] {
  %739 = @func_4441() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(2925), float32]) */;
  %739.1
}

def @func_5714(%var_5706: Tensor[(1, 2112), int16]) -> (Tensor[(14, 7, 14), float64], uint32, Tensor[(48), uint32], uint32, Tensor[(16, 11, 12), float32], Tensor[(1, 2112), int16]) {
  %740 = @func_4042() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64]) */;
  %741 = cast(meta[relay.Constant][39] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %742 = reshape(%741, newshape=[8, 1, 6]) /* ty=Tensor[(8, 1, 6), uint32] */;
  %743 = @func_3234(%742) /* ty=(uint32, Tensor[(14, 7, 14), float64], Tensor[(8, 13, 6), int32], Tensor[(8, ?, 6), float64]) */;
  %744 = %740.0;
  %745 = cast(%744, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %746 = %743.0;
  %747 = cast(%746, dtype="uint32") /* ty=uint32 */;
  %748 = reshape(%745, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float64] */;
  %749 = reshape(%747, newshape=[]) /* ty=uint32 */;
  %750 = @func_1970(%748, %749) /* ty=(Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint32], Tensor[(14, 7, 14), float32], uint32, uint32) */;
  %751 = cast(%746, dtype="int16") /* ty=int16 */;
  %752 = cast(%var_5706, dtype="int16") /* ty=Tensor[(1, 2112), int16] */;
  %753 = reshape(%751, newshape=[]) /* ty=int16 */;
  %754 = reshape(%752, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), int16] */;
  %755 = @func_2706(%753, %754) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(16, 11, 12), float32]) */;
  %756 = %750.4;
  %757 = %755.1;
  (%744, %746, meta[relay.Constant][39] /* ty=Tensor[(48), uint32] */, %756, %757, %var_5706)
}

def @func_4596(%var_4572: Tensor[(784), float64], %var_4589: Tensor[(7, 14, 8), float32]) -> (Tensor[(14, 7, 14), float64], Tensor[(784), float64], Tensor[(7, 14, 8), uint32]) {
  %758 = @func_4000() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %759 = cast(%var_4572, dtype="float64") /* ty=Tensor[(784), float64] */;
  %760 = reshape(%759, newshape=[7, 14, 8]) /* ty=Tensor[(7, 14, 8), float64] */;
  %761 = @func_3768(%760) /* ty=(Tensor[(7, 14, 8), float64],) */;
  %762 = %761.0;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(7, 14, 8), float32] */;
  %764 = asinh(%763) /* ty=Tensor[(7, 14, 8), float32] */;
  %765 = cast(%var_4589, dtype="uint32") /* ty=Tensor[(7, 14, 8), uint32] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%764, dtype="uint32") /* ty=Tensor[(7, 14, 8), uint32] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %769 = %758.0;
  %770 = left_shift(%767, %768) /* ty=Tensor[(7, 14, 8), uint32] */;
  (%769, %var_4572, %770)
}

def @func_6676() -> (Tensor[(14, 7, 14), float32],) {
  %771 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %772 = %771.0;
  (%772,)
}

def @main(%var_7401: Tensor[(6, 7, 10), int8], %var_7402: Tensor[(6, 7, 10), int8], %var_7417: Tensor[(6, 7, 10), int8]) -> (Tensor[(6, 7, 10), bool], Tensor[(6, 7, 10), float32], Tensor[(6, 7, 10), float64]) {
  %773 = cast(%var_7402, dtype="bool") /* ty=Tensor[(6, 7, 10), bool] */;
  %774 = shape_of(%var_7401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%var_7401, dtype="bool") /* ty=Tensor[(6, 7, 10), bool] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %777 = cast(%var_7417, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
  %778 = shape_of(%var_7401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%var_7401, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %781 = cast(%var_7402, dtype="float64") /* ty=Tensor[(6, 7, 10), float64] */;
  %782 = tan(%781) /* ty=Tensor[(6, 7, 10), float64] */;
  %783 = cast(%782, dtype="float64") /* ty=Tensor[(6, 7, 10), float64] */;
  %784 = less_equal(%775, %776) /* ty=Tensor[(6, 7, 10), bool] */;
  %785 = floor_mod(%779, %780) /* ty=Tensor[(6, 7, 10), float32] */;
  %786 = asin(%783) /* ty=Tensor[(6, 7, 10), float64] */;
  (%784, %785, %786)
}

def @func_1022() -> (Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) {
  %787 = cast(meta[relay.Constant][40] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %788 = reshape(%787, newshape=[]) /* ty=uint32 */;
  %789 = @func_941() /* ty=Tensor[(14, 7, 14), float64] */;
  %790 = @func_106(%788) /* ty=Tensor[(3, 1), bool] */;
  (%789, %790, meta[relay.Constant][40] /* ty=uint32 */)
}

def @func_6607() -> (Tensor[(14, 7, 14), float32],) {
  %791 = @func_3970() /* ty=Tensor[(14, 7, 14), float32] */;
  (%791,)
}

def @func_1387() -> (Tensor[(14, 7, 14), float32],) {
  %792 = @func_1169() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %793 = %792.0;
  (%793,)
}

def @func_1645(%var_1567: uint64) -> (Tensor[(?, 8, ?), int32], Tensor[(396), float64], Tensor[(14, 7, 14), float64]) {
  %794 = cast(%var_1567, dtype="uint64") /* ty=uint64 */;
  %795 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 8, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1, 8, 1), uint64] */;
  %796 = left_shift(%794, %795) /* ty=Tensor[(1, 8, 1), uint64] */;
  %797 = cast(%796, dtype="int16") /* ty=Tensor[(1, 8, 1), int16] */;
  %798 = cast(%var_1567, dtype="int16") /* ty=int16 */;
  %799 = minimum(%797, %798) /* ty=Tensor[(1, 8, 1), int16] */;
  %800 = cast(%796, dtype="int32") /* ty=Tensor[(1, 8, 1), int32] */;
  %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%799, dtype="int32") /* ty=Tensor[(1, 8, 1), int32] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %804 = cast(meta[relay.Constant][42] /* ty=Tensor[(396), float64] */, dtype="float64") /* ty=Tensor[(396), float64] */;
  %805 = reshape(%804, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), float64] */;
  %806 = @func_1219(%805) /* ty=(Tensor[(6, 6, 11), float32], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) */;
  %807 = %806.2;
  %808 = cast(%807, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %809 = bitwise_or(%802, %803) /* ty=Tensor[(?, 8, ?), int32] */;
  %810 = tan(%808) /* ty=Tensor[(14, 7, 14), float64] */;
  (%809, meta[relay.Constant][42] /* ty=Tensor[(396), float64] */, %810)
}

def @func_4165() -> (Tensor[(14, 7, 14), float32],) {
  %811 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %812 = %811.0;
  (%812,)
}

def @func_3881(%var_3846: uint32, %var_3849: Tensor[(225, 15), float64], %var_3865: Tensor[(2, 4), float32], %var_3866: Tensor[(24, 1), float32]) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32, Tensor[(15, 15, 15), float64], Tensor[(225, 15), float64], Tensor[(3, 2, 4), float32], Tensor[(2, 4), float32], Tensor[(24, 1), float32], Tensor[(14, 7, 14), float32], Tensor[(8, 2), float64], Tensor[(9, 1), uint32]) {
  %813 = @func_3291() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %814 = %813.0;
  %815 = cast(%814, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %816 = cast(%var_3846, dtype="uint32") /* ty=uint32 */;
  %817 = reshape(%815, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float32] */;
  %818 = reshape(%816, newshape=[]) /* ty=uint32 */;
  %819 = @func_2171(%817, %818) /* ty=(Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) */;
  %820 = cast(%var_3849, dtype="float64") /* ty=Tensor[(225, 15), float64] */;
  %821 = reshape(%820, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %822 = @func_3492(%821) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2925), float64], Tensor[(15, 15, 15), float64]) */;
  %823 = cast(%var_3865, dtype="float32") /* ty=Tensor[(2, 4), float32] */;
  %824 = cast(%var_3866, dtype="float32") /* ty=Tensor[(24, 1), float32] */;
  %825 = reshape(%823, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), float32] */;
  %826 = reshape(%824, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), float32] */;
  %827 = cast(%814, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %828 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 1), uint32] */, dtype="uint32") /* ty=Tensor[(9, 1), uint32] */;
  %829 = reshape(%827, newshape=[1372]) /* ty=Tensor[(1372), float32] */;
  %830 = reshape(%828, newshape=[1, 9, 1]) /* ty=Tensor[(1, 9, 1), uint32] */;
  %831 = @func_2593(%829, %830) /* ty=(Tensor[(8, 2), float64], uint32, Tensor[(1372), float32], Tensor[(1, 9, 1), uint16]) */;
  %832 = %819.0;
  %833 = %822.0;
  %834 = @func_3013(%825, %826) /* ty=Tensor[(3, 2, 4), float32] */;
  %835 = @func_2555() /* ty=Tensor[(14, 7, 14), float32] */;
  %836 = %831.0;
  (%814, %832, %var_3846, %833, %var_3849, %834, %var_3865, %var_3866, %835, %836, meta[relay.Constant][43] /* ty=Tensor[(9, 1), uint32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1647(%var_1646: uint64) -> (Tensor[(?, 8, ?), int32], Tensor[(396), float64], Tensor[(14, 7, 14), float64]) {
  %17 = fn (%var_1567: uint64) -> (Tensor[(?, 8, ?), int32], Tensor[(396), float64], Tensor[(14, 7, 14), float64]) {
    %0 = cast(%var_1567, dtype="uint64") /* ty=uint64 */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 8, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1, 8, 1), uint64] */;
    %2 = left_shift(%0, %1) /* ty=Tensor[(1, 8, 1), uint64] */;
    %3 = cast(%2, dtype="int16") /* ty=Tensor[(1, 8, 1), int16] */;
    %4 = cast(%var_1567, dtype="int16") /* ty=int16 */;
    %5 = minimum(%3, %4) /* ty=Tensor[(1, 8, 1), int16] */;
    %6 = cast(%2, dtype="int32") /* ty=Tensor[(1, 8, 1), int32] */;
    %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%5, dtype="int32") /* ty=Tensor[(1, 8, 1), int32] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(396), float64] */, dtype="float64") /* ty=Tensor[(396), float64] */;
    %11 = reshape(%10, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), float64] */;
    %12 = @func_1219(%11) /* ty=(Tensor[(6, 6, 11), float32], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) */;
    %13 = %12.2;
    %14 = cast(%13, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
    %15 = bitwise_or(%8, %9) /* ty=Tensor[(?, 8, ?), int32] */;
    %16 = tan(%14) /* ty=Tensor[(14, 7, 14), float64] */;
    (%15, meta[relay.Constant][1] /* ty=Tensor[(396), float64] */, %16)
  };
  %17(%var_1646) /* ty=(Tensor[(?, 8, ?), int32], Tensor[(396), float64], Tensor[(14, 7, 14), float64]) */
}

def @func_3494(%var_3493: Tensor[(15, 15, 15), float64]) -> (Tensor[(15, 15, 15), float64], Tensor[(2925), float64], Tensor[(15, 15, 15), float64]) {
  %24 = fn (%var_3467: Tensor[(15, 15, 15), float64]) -> (Tensor[(15, 15, 15), float64], Tensor[(2925), float64], Tensor[(15, 15, 15), float64]) {
    %18 = cast(%var_3467, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
    %19 = @func_2853() /* ty=(Tensor[(2925), float64],) */;
    %20 = cast(%var_3467, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
    %21 = tan(%18) /* ty=Tensor[(15, 15, 15), float64] */;
    %22 = %19.0;
    %23 = asin(%20) /* ty=Tensor[(15, 15, 15), float64] */;
    (%21, %22, %23)
  };
  %24(%var_3493) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2925), float64], Tensor[(15, 15, 15), float64]) */
}

def @func_3003() -> uint32 {
  %26 = fn () -> uint32 {
    %25 = @func_2783() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) */;
    %25.4
  };
  %26() /* ty=uint32 */
}

def @func_4043() -> (Tensor[(14, 7, 14), float64], Tensor[(2925), float64]) {
  %31 = fn () -> (Tensor[(14, 7, 14), float64], Tensor[(2925), float64]) {
    %27 = @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
    %28 = @func_3742() /* ty=(Tensor[(2925), float64],) */;
    %29 = %27.0;
    %30 = %28.0;
    (%29, %30)
  };
  %31() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64]) */
}

def @func_5523(%var_5517: uint32, %var_5520: Tensor[(24), float32]) -> (Tensor[(14, 7, 14), float32], Tensor[(9, 1), uint32], uint32, Tensor[(3375), float64], Tensor[(8), float32], Tensor[(24), float32]) {
  %32 = @func_4556() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %33 = cast(%var_5517, dtype="uint32") /* ty=uint32 */;
  %34 = cast(meta[relay.Constant][2] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(8), float32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
  %36 = cast(%var_5520, dtype="float32") /* ty=Tensor[(24), float32] */;
  %37 = reshape(%33, newshape=[]) /* ty=uint32 */;
  %38 = reshape(%34, newshape=[225, 15]) /* ty=Tensor[(225, 15), float64] */;
  %39 = reshape(%35, newshape=[2, 4]) /* ty=Tensor[(2, 4), float32] */;
  %40 = reshape(%36, newshape=[24, 1]) /* ty=Tensor[(24, 1), float32] */;
  %41 = @func_3881(%37, %38, %39, %40) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32, Tensor[(15, 15, 15), float64], Tensor[(225, 15), float64], Tensor[(3, 2, 4), float32], Tensor[(2, 4), float32], Tensor[(24, 1), float32], Tensor[(14, 7, 14), float32], Tensor[(8, 2), float64], Tensor[(9, 1), uint32]) */;
  %42 = %32.0;
  %43 = %41.10;
  (%42, %43, %var_5517, meta[relay.Constant][2] /* ty=Tensor[(3375), float64] */, meta[relay.Constant][3] /* ty=Tensor[(8), float32] */, %var_5520)
}

def @func_4865(%var_4861: Tensor[(396), float64], %var_4862: Tensor[(192), uint8], %var_4863: Tensor[(2925), uint32], %var_4864: Tensor[(3, 900), int64]) -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32], Tensor[(396), float64], Tensor[(8, 8, 3), uint8], uint8, Tensor[(192), uint8], Tensor[(630), float32], Tensor[(13, 15, 15), uint16], Tensor[(2925), uint32], Tensor[(14, 7, 14), float32], Tensor[(15, 12, 15), bool], Tensor[(3, 900), int64]) {
  %68 = fn (%var_4785: Tensor[(396), float64], %var_4794: Tensor[(192), uint8], %var_4800: Tensor[(2925), uint32], %var_4848: Tensor[(3, 900), int64]) -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32], Tensor[(396), float64], Tensor[(8, 8, 3), uint8], uint8, Tensor[(192), uint8], Tensor[(630), float32], Tensor[(13, 15, 15), uint16], Tensor[(2925), uint32], Tensor[(14, 7, 14), float32], Tensor[(15, 12, 15), bool], Tensor[(3, 900), int64]) {
    %44 = @func_4135() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) */;
    %45 = cast(%var_4785, dtype="float64") /* ty=Tensor[(396), float64] */;
    %46 = reshape(%45, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), float64] */;
    %47 = @func_1219(%46) /* ty=(Tensor[(6, 6, 11), float32], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) */;
    %48 = cast(meta[relay.Constant][4] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %49 = cast(%var_4794, dtype="uint8") /* ty=Tensor[(192), uint8] */;
    %50 = cast(meta[relay.Constant][5] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
    %51 = reshape(%48, newshape=[]) /* ty=uint8 */;
    %52 = reshape(%49, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), uint8] */;
    %53 = reshape(%50, newshape=[630]) /* ty=Tensor[(630), float32] */;
    %54 = @func_985(%51, %52, %53) /* ty=(Tensor[(8, 8, 3), uint8], Tensor[(3, 1), bool], Tensor[(7, 9, 10), int64], Tensor[(630), float32], Tensor[(14, 7, 14), float64]) */;
    %55 = cast(%var_4800, dtype="uint32") /* ty=Tensor[(2925), uint32] */;
    %56 = reshape(%55, newshape=[13, 15, 15]) /* ty=Tensor[(13, 15, 15), uint32] */;
    %57 = @func_2125(%56) /* ty=(Tensor[(13, 15, 15), int8], Tensor[(3, 1), bool], Tensor[(13, 15, 15), uint16]) */;
    %58 = cast(%var_4848, dtype="int64") /* ty=Tensor[(3, 900), int64] */;
    %59 = cast(%var_4848, dtype="int64") /* ty=Tensor[(3, 900), int64] */;
    %60 = reshape(%58, newshape=[15, 12, 15]) /* ty=Tensor[(15, 12, 15), int64] */;
    %61 = reshape(%59, newshape=[15, 12, 15]) /* ty=Tensor[(15, 12, 15), int64] */;
    %62 = %44.0;
    %63 = %47.1;
    %64 = %54.0;
    %65 = %57.2;
    %66 = @func_3970() /* ty=Tensor[(14, 7, 14), float32] */;
    %67 = @func_4062(%60, %61) /* ty=Tensor[(15, 12, 15), bool] */;
    (%62, %63, %var_4785, %64, meta[relay.Constant][4] /* ty=uint8 */, %var_4794, meta[relay.Constant][5] /* ty=Tensor[(630), float32] */, %65, %var_4800, %66, %67, %var_4848)
  };
  %68(%var_4861, %var_4862, %var_4863, %var_4864) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32], Tensor[(396), float64], Tensor[(8, 8, 3), uint8], uint8, Tensor[(192), uint8], Tensor[(630), float32], Tensor[(13, 15, 15), uint16], Tensor[(2925), uint32], Tensor[(14, 7, 14), float32], Tensor[(15, 12, 15), bool], Tensor[(3, 900), int64]) */
}

def @func_4667() -> Tensor[(14, 7, 14), float32] {
  @func_4665() /* ty=Tensor[(14, 7, 14), float32] */
}

def @func_802(%var_800: uint32) -> (Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool]) {
  @func_799(%var_800) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool]) */
}

def @func_1299(%var_1297: Tensor[(630), float32]) -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64], uint8, Tensor[(24, 8), uint8], Tensor[(14, 7, 14), float64], Tensor[(630), uint64], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), bool]) {
  @func_1296(%var_1297) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64], uint8, Tensor[(24, 8), uint8], Tensor[(14, 7, 14), float64], Tensor[(630), uint64], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), bool]) */
}

def @func_6921() -> (uint32,) {
  %71 = fn () -> (uint32,) {
    %69 = @func_5175() /* ty=(uint32,) */;
    %70 = %69.0;
    (%70,)
  };
  %71() /* ty=(uint32,) */
}

def @func_2951(%var_2949: Tensor[(14, 7, 14), float32], %var_2950: uint32) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], uint32, uint32, Tensor[(14, 7, 14), float64]) {
  @func_2947(%var_2949, %var_2950) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], uint32, uint32, Tensor[(14, 7, 14), float64]) */
}

def @func_893() -> Tensor[(14, 7, 14), float64] {
  %73 = fn () -> Tensor[(14, 7, 14), float64] {
    %72 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
    %72.0
  };
  %73() /* ty=Tensor[(14, 7, 14), float64] */
}

def @func_2200() -> Tensor[(14, 7, 14), float64] {
  %74 = @func_1778() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %74.0
}

def @func_6158(%var_6067: Tensor[(3375), float64]) -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32], Tensor[(3375), int64], Tensor[(15, 15, 15), float32], Tensor[(2925), float64], Tensor[(14, 7, 14), float32], Tensor[(15, 15, 15), float32], Tensor[(7, 9, 10), int64], Tensor[(630), float32], uint32, Tensor[(15, 15, 15), bool], Tensor[(7, 9, 10), int64], Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) {
  %75 = @func_871() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %76 = cast(meta[relay.Constant][6] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %77 = reshape(%76, newshape=[]) /* ty=uint32 */;
  %78 = @func_5219(%77) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32) */;
  %79 = cast(%var_6067, dtype="int64") /* ty=Tensor[(3375), int64] */;
  %80 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(3375), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %81 = cast(meta[relay.Constant][7] /* ty=Tensor[(3375), float64] */, dtype="int64") /* ty=Tensor[(3375), int64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?), int64] */;
  %83 = cast(meta[relay.Constant][7] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %84 = reshape(%83, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %85 = @func_3492(%84) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2925), float64], Tensor[(15, 15, 15), float64]) */;
  %86 = %85.0;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %88 = cos(%87) /* ty=Tensor[(15, 15, 15), float64] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(15, 15, 15), float32] */;
  %90 = maximum(%81, %82) /* ty=Tensor[(3375), int64] */;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %92 = reshape(%91, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %93 = @func_3492(%92) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2925), float64], Tensor[(15, 15, 15), float64]) */;
  %94 = cast(%88, dtype="float32") /* ty=Tensor[(15, 15, 15), float32] */;
  %95 = cast(meta[relay.Constant][8] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %96 = reshape(%95, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float32] */;
  %97 = cast(%88, dtype="bool") /* ty=Tensor[(15, 15, 15), bool] */;
  %98 = cast(meta[relay.Constant][6] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %99 = @func_119(%96) /* ty=Tensor[(7, 9, 10), int64] */;
  %100 = cast(%99, dtype="float32") /* ty=Tensor[(7, 9, 10), float32] */;
  %101 = reshape(%100, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float32] */;
  %102 = @func_1778() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %103 = @func_4000() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %104 = %75.0;
  %105 = %78.0;
  %106 = log(%89) /* ty=Tensor[(15, 15, 15), float32] */;
  %107 = %93.1;
  %108 = @func_4665() /* ty=Tensor[(14, 7, 14), float32] */;
  %109 = cosh(%94) /* ty=Tensor[(15, 15, 15), float32] */;
  %110 = @func_3002() /* ty=uint32 */;
  %111 = greater_equal(%97, %98) /* ty=Tensor[(15, 15, 15), bool] */;
  %112 = @func_119(%101) /* ty=Tensor[(7, 9, 10), int64] */;
  %113 = %102.0;
  %114 = %103.0;
  (%104, %105, %90, %106, %107, %108, %109, %99, meta[relay.Constant][8] /* ty=Tensor[(630), float32] */, %110, %111, %112, %113, %114)
}

def @func_2710(%var_2708: int16, %var_2709: Tensor[(16, 11, 12), int16]) -> (Tensor[(14, 7, 14), float64], Tensor[(16, 11, 12), float32]) {
  @func_2706(%var_2708, %var_2709) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(16, 11, 12), float32]) */
}

def @func_5587() -> uint32 {
  @func_5585() /* ty=uint32 */
}

def @func_2311(%var_2307: Tensor[(13, 2, 3), float64]) -> (Tensor[(13, 2, 3), float64],) {
  %115 = cast(%var_2307, dtype="float64") /* ty=Tensor[(13, 2, 3), float64] */;
  %116 = asinh(%115) /* ty=Tensor[(13, 2, 3), float64] */;
  (%116,)
}

def @func_6248() -> (Tensor[(14, 7, 14), float64],) {
  %117 = @func_892() /* ty=Tensor[(14, 7, 14), float64] */;
  (%117,)
}

def @func_5617() -> (Tensor[(14, 7, 14), float32],) {
  %118 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %119 = %118.0;
  (%119,)
}

def @func_2947(%var_2912: Tensor[(14, 7, 14), float32], %var_2929: uint32) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], uint32, uint32, Tensor[(14, 7, 14), float64]) {
  %120 = @func_2289() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %121 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %122 = %121.0;
  %123 = cast(%var_2912, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %127 = %120.0;
  %128 = cast(%127, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %129 = cast(%var_2929, dtype="uint32") /* ty=uint32 */;
  %130 = reshape(%128, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float32] */;
  %131 = reshape(%129, newshape=[]) /* ty=uint32 */;
  %132 = @func_2171(%130, %131) /* ty=(Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) */;
  %133 = %132.2;
  %134 = cast(%133, dtype="uint64") /* ty=uint64 */;
  %135 = reshape(%134, newshape=[]) /* ty=uint64 */;
  %136 = @func_1645(%135) /* ty=(Tensor[(?, 8, ?), int32], Tensor[(396), float64], Tensor[(14, 7, 14), float64]) */;
  %137 = multiply(%125, %126) /* ty=Tensor[(14, 7, 14), float64] */;
  %138 = %136.2;
  (%127, %137, %133, %var_2929, %138)
}

def @func_3828(%var_3826: uint32) -> (Tensor[(14, 7, 14), float32], Tensor[(3, 1), bool], uint32) {
  @func_3825(%var_3826) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(3, 1), bool], uint32) */
}

def @func_5993(%var_5965: uint16, %var_5966: Tensor[(1, 2), uint16]) -> (Tensor[(1, 2), bool],) {
  %139 = cast(%var_5965, dtype="bool") /* ty=bool */;
  %140 = cast(%var_5966, dtype="bool") /* ty=Tensor[(1, 2), bool] */;
  %141 = equal(%139, %140) /* ty=Tensor[(1, 2), bool] */;
  (%141,)
}

def @func_5527(%var_5525: uint32, %var_5526: Tensor[(24), float32]) -> (Tensor[(14, 7, 14), float32], Tensor[(9, 1), uint32], uint32, Tensor[(3375), float64], Tensor[(8), float32], Tensor[(24), float32]) {
  @func_5523(%var_5525, %var_5526) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(9, 1), uint32], uint32, Tensor[(3375), float64], Tensor[(8), float32], Tensor[(24), float32]) */
}

def @func_1022() -> (Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) {
  %142 = cast(meta[relay.Constant][9] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %143 = reshape(%142, newshape=[]) /* ty=uint32 */;
  %144 = @func_941() /* ty=Tensor[(14, 7, 14), float64] */;
  %145 = @func_106(%143) /* ty=Tensor[(3, 1), bool] */;
  (%144, %145, meta[relay.Constant][9] /* ty=uint32 */)
}

def @func_2706(%var_2689: int16, %var_2690: Tensor[(16, 11, 12), int16]) -> (Tensor[(14, 7, 14), float64], Tensor[(16, 11, 12), float32]) {
  %146 = cast(%var_2689, dtype="bool") /* ty=bool */;
  %147 = cast(%var_2690, dtype="bool") /* ty=Tensor[(16, 11, 12), bool] */;
  %148 = not_equal(%146, %147) /* ty=Tensor[(16, 11, 12), bool] */;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(16, 11, 12), float32] */;
  %150 = @func_2200() /* ty=Tensor[(14, 7, 14), float64] */;
  %151 = acosh(%149) /* ty=Tensor[(16, 11, 12), float32] */;
  (%150, %151)
}

def @func_7374() -> Tensor[(14, 7, 14), float32] {
  %153 = fn () -> Tensor[(14, 7, 14), float32] {
    %152 = @func_7220() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %152.0
  };
  %153() /* ty=Tensor[(14, 7, 14), float32] */
}

def @func_5052() -> (Tensor[(7, 9, 10), int64], Tensor[(70, 9), float32], Tensor[(14, 7, 14), float32]) {
  %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(70, 9), float32] */, dtype="float32") /* ty=Tensor[(70, 9), float32] */;
  %155 = reshape(%154, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float32] */;
  %156 = @func_4556() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %157 = %156.0;
  %158 = cast(%157, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %159 = cosh(%158) /* ty=Tensor[(14, 7, 14), float32] */;
  %160 = cast(%159, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %161 = @func_119(%155) /* ty=Tensor[(7, 9, 10), int64] */;
  %162 = log2(%160) /* ty=Tensor[(14, 7, 14), float32] */;
  (%161, meta[relay.Constant][10] /* ty=Tensor[(70, 9), float32] */, %162)
}

def @func_698(%var_691: uint32) -> (Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) {
  %163 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %164 = cast(%var_691, dtype="uint32") /* ty=uint32 */;
  %165 = reshape(%164, newshape=[]) /* ty=uint32 */;
  %166 = %163.0;
  %167 = @func_106(%165) /* ty=Tensor[(3, 1), bool] */;
  (%166, %167, %var_691)
}

def @func_4658(%var_4656: Tensor[(48), uint32], %var_4657: uint32) -> (Tensor[(8, 13, 6), int32], Tensor[(9, 48), float32], Tensor[(14, 7, 14), float32], uint32, uint32) {
  %185 = fn (%var_4632: Tensor[(48), uint32], %var_4651: uint32) -> (Tensor[(8, 13, 6), int32], Tensor[(9, 48), float32], Tensor[(14, 7, 14), float32], uint32, uint32) {
    %168 = cast(%var_4632, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %169 = reshape(%168, newshape=[8, 1, 6]) /* ty=Tensor[(8, 1, 6), uint32] */;
    %170 = @func_3234(%169) /* ty=(uint32, Tensor[(14, 7, 14), float64], Tensor[(8, 13, 6), int32], Tensor[(8, ?, 6), float64]) */;
    %171 = @func_3545() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(9, 1), uint32]) */;
    %172 = %171.1;
    %173 = cast(%var_4632, dtype="float32") /* ty=Tensor[(48), float32] */;
    %174 = cast(%172, dtype="float32") /* ty=Tensor[(9, 1), float32] */;
    %175 = @func_3291() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %176 = %175.0;
    %177 = cast(%176, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
    %178 = cast(%var_4651, dtype="uint32") /* ty=uint32 */;
    %179 = reshape(%177, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float32] */;
    %180 = reshape(%178, newshape=[]) /* ty=uint32 */;
    %181 = @func_2947(%179, %180) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], uint32, uint32, Tensor[(14, 7, 14), float64]) */;
    %182 = %170.2;
    %183 = mod(%173, %174) /* ty=Tensor[(9, 48), float32] */;
    %184 = %181.3;
    (%182, %183, %176, %184, %var_4651)
  };
  %185(%var_4656, %var_4657) /* ty=(Tensor[(8, 13, 6), int32], Tensor[(9, 48), float32], Tensor[(14, 7, 14), float32], uint32, uint32) */
}

def @func_2463(%var_2462: uint32) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32], Tensor[(3, 1), bool], uint32) {
  %194 = fn (%var_2453: uint32) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32], Tensor[(3, 1), bool], uint32) {
    %186 = @func_2289() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %187 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %188 = cast(%var_2453, dtype="uint32") /* ty=uint32 */;
    %189 = reshape(%188, newshape=[]) /* ty=uint32 */;
    %190 = @func_722(%189) /* ty=(Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint8]) */;
    %191 = %186.0;
    %192 = %187.0;
    %193 = %190.0;
    (%191, %192, %193, %var_2453)
  };
  %194(%var_2462) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32], Tensor[(3, 1), bool], uint32) */
}

def @func_7027() -> (Tensor[(2925), float32],) {
  %195 = @func_5308() /* ty=(Tensor[(2925), float32],) */;
  %196 = %195.0;
  (%196,)
}

def @func_5277() -> Tensor[(14, 7, 14), float64] {
  @func_5275() /* ty=Tensor[(14, 7, 14), float64] */
}

def @func_353(%var_351: Tensor[(15, 13, 5), uint16], %var_352: Tensor[(15, 13, 5), uint16]) -> (Tensor[(15, 13, 5), bool], Tensor[(3, 1), bool], uint32) {
  @func_349(%var_351, %var_352) /* ty=(Tensor[(15, 13, 5), bool], Tensor[(3, 1), bool], uint32) */
}

def @func_2290() -> (Tensor[(14, 7, 14), float32],) {
  %199 = fn () -> (Tensor[(14, 7, 14), float32],) {
    %197 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %198 = %197.0;
    (%198,)
  };
  %199() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_3112(%var_3110: Tensor[(65, 15), uint16], %var_3111: Tensor[(2, 12), float32]) -> (Tensor[(14, 7, 14), float64], Tensor[(2925), float64], uint32, Tensor[(65, 15), uint16], Tensor[(3, 2, 4), float32], Tensor[(8), float32], Tensor[(2, 12), float32]) {
  @func_3108(%var_3110, %var_3111) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64], uint32, Tensor[(65, 15), uint16], Tensor[(3, 2, 4), float32], Tensor[(8), float32], Tensor[(2, 12), float32]) */
}

def @func_2855() -> (Tensor[(2925), float64],) {
  @func_2853() /* ty=(Tensor[(2925), float64],) */
}

def @func_548() -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) {
  %200 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %201 = asin(%200) /* ty=Tensor[(14, 7, 14), float32] */;
  %202 = cast(%201, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %203 = cast(%201, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %204 = cos(%203) /* ty=Tensor[(14, 7, 14), float32] */;
  %205 = cast(%204, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %206 = log10(%202) /* ty=Tensor[(14, 7, 14), float64] */;
  %207 = erf(%205) /* ty=Tensor[(14, 7, 14), float32] */;
  (%206, %207)
}

def @func_985(%var_960: uint8, %var_961: Tensor[(8, 8, 3), uint8], %var_968: Tensor[(630), float32]) -> (Tensor[(8, 8, 3), uint8], Tensor[(3, 1), bool], Tensor[(7, 9, 10), int64], Tensor[(630), float32], Tensor[(14, 7, 14), float64]) {
  %208 = cast(%var_960, dtype="uint8") /* ty=uint8 */;
  %209 = cast(%var_961, dtype="uint8") /* ty=Tensor[(8, 8, 3), uint8] */;
  %210 = cast(%var_960, dtype="uint32") /* ty=uint32 */;
  %211 = reshape(%210, newshape=[]) /* ty=uint32 */;
  %212 = @func_799(%211) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool]) */;
  %213 = cast(%var_968, dtype="float32") /* ty=Tensor[(630), float32] */;
  %214 = reshape(%213, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), float32] */;
  %215 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %216 = left_shift(%208, %209) /* ty=Tensor[(8, 8, 3), uint8] */;
  %217 = %212.1;
  %218 = @func_119(%214) /* ty=Tensor[(7, 9, 10), int64] */;
  %219 = %215.0;
  (%216, %217, %218, %var_968, %219)
}

def @func_1388() -> (Tensor[(14, 7, 14), float32],) {
  %222 = fn () -> (Tensor[(14, 7, 14), float32],) {
    %220 = @func_1169() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %221 = %220.0;
    (%221,)
  };
  %222() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_5585() -> uint32 {
  %223 = @func_2783() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) */;
  %223.4
}

def @func_5864() -> (Tensor[(14, 7, 14), float64],) {
  %224 = @func_5275() /* ty=Tensor[(14, 7, 14), float64] */;
  (%224,)
}

def @func_3237(%var_3235: Tensor[(8, 1, 6), uint32]) -> (uint32, Tensor[(14, 7, 14), float64], Tensor[(8, 13, 6), int32], Tensor[(8, ?, 6), float64]) {
  @func_3234(%var_3235) /* ty=(uint32, Tensor[(14, 7, 14), float64], Tensor[(8, 13, 6), int32], Tensor[(8, ?, 6), float64]) */
}

def @func_4600(%var_4598: Tensor[(784), float64], %var_4599: Tensor[(7, 14, 8), float32]) -> (Tensor[(14, 7, 14), float64], Tensor[(784), float64], Tensor[(7, 14, 8), uint32]) {
  @func_4596(%var_4598, %var_4599) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(784), float64], Tensor[(7, 14, 8), uint32]) */
}

def @func_1169() -> (Tensor[(14, 7, 14), float32],) {
  %225 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %226 = %225.1;
  (%226,)
}

def @func_6654() -> Tensor[(2925), float64] {
  %228 = fn () -> Tensor[(2925), float64] {
    %227 = @func_3742() /* ty=(Tensor[(2925), float64],) */;
    %227.0
  };
  %228() /* ty=Tensor[(2925), float64] */
}

def @func_6695() -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64]) {
  %229 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %230 = @func_5485() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %231 = %229.0;
  %232 = %230.0;
  (%231, %232)
}

def @func_3768(%var_3764: Tensor[(7, 14, 8), float64]) -> (Tensor[(7, 14, 8), float64],) {
  %233 = cast(%var_3764, dtype="float64") /* ty=Tensor[(7, 14, 8), float64] */;
  %234 = acosh(%233) /* ty=Tensor[(7, 14, 8), float64] */;
  (%234,)
}

def @func_5194() -> Tensor[(2925), float32] {
  %235 = @func_4441() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(2925), float32]) */;
  %235.1
}

def @func_2174(%var_2172: Tensor[(14, 7, 14), float32], %var_2173: uint32) -> (Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) {
  %249 = fn (%var_2161: Tensor[(14, 7, 14), float32], %var_2169: uint32) -> (Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) {
    %236 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %237 = %236.0;
    %238 = cast(%var_2161, dtype="int16") /* ty=Tensor[(14, 7, 14), int16] */;
    %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
    %240 = cast(%237, dtype="int16") /* ty=Tensor[(14, 7, 14), int16] */;
    %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %242 = cast(%var_2161, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
    %243 = cast(%var_2169, dtype="uint32") /* ty=uint32 */;
    %244 = reshape(%242, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float64] */;
    %245 = reshape(%243, newshape=[]) /* ty=uint32 */;
    %246 = @func_1970(%244, %245) /* ty=(Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint32], Tensor[(14, 7, 14), float32], uint32, uint32) */;
    %247 = maximum(%240, %241) /* ty=Tensor[(14, 7, 14), int16] */;
    %248 = %246.2;
    (%247, %248, %var_2169)
  };
  %249(%var_2172, %var_2173) /* ty=(Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) */
}

def @func_5997(%var_5995: uint16, %var_5996: Tensor[(1, 2), uint16]) -> (Tensor[(1, 2), bool],) {
  @func_5993(%var_5995, %var_5996) /* ty=(Tensor[(1, 2), bool],) */
}

def @func_7222() -> (Tensor[(14, 7, 14), float32],) {
  @func_7220() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_5175() -> (uint32,) {
  %250 = @func_3002() /* ty=uint32 */;
  (%250,)
}

def @func_990(%var_987: uint8, %var_988: Tensor[(8, 8, 3), uint8], %var_989: Tensor[(630), float32]) -> (Tensor[(8, 8, 3), uint8], Tensor[(3, 1), bool], Tensor[(7, 9, 10), int64], Tensor[(630), float32], Tensor[(14, 7, 14), float64]) {
  @func_985(%var_987, %var_988, %var_989) /* ty=(Tensor[(8, 8, 3), uint8], Tensor[(3, 1), bool], Tensor[(7, 9, 10), int64], Tensor[(630), float32], Tensor[(14, 7, 14), float64]) */
}

def @func_7029() -> (Tensor[(2925), float32],) {
  @func_7027() /* ty=(Tensor[(2925), float32],) */
}

def @func_5619() -> (Tensor[(14, 7, 14), float32],) {
  @func_5617() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_6697() -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64]) {
  @func_6695() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64]) */
}

def @func_3016(%var_3014: Tensor[(1, 2, 4), float32], %var_3015: Tensor[(3, 2, 4), float32]) -> Tensor[(3, 2, 4), float32] {
  %253 = fn (%var_3008: Tensor[(1, 2, 4), float32], %var_3009: Tensor[(3, 2, 4), float32]) -> Tensor[(3, 2, 4), float32] {
    %251 = cast(%var_3008, dtype="float32") /* ty=Tensor[(1, 2, 4), float32] */;
    %252 = cast(%var_3009, dtype="float32") /* ty=Tensor[(3, 2, 4), float32] */;
    mod(%251, %252) /* ty=Tensor[(3, 2, 4), float32] */
  };
  %253(%var_3014, %var_3015) /* ty=Tensor[(3, 2, 4), float32] */
}

def @func_5770() -> (Tensor[(14, 7, 14), float64],) {
  @func_5768() /* ty=(Tensor[(14, 7, 14), float64],) */
}

def @func_349(%var_325: Tensor[(15, 13, 5), uint16], %var_326: Tensor[(15, 13, 5), uint16]) -> (Tensor[(15, 13, 5), bool], Tensor[(3, 1), bool], uint32) {
  %254 = cast(%var_326, dtype="bool") /* ty=Tensor[(15, 13, 5), bool] */;
  %255 = shape_of(%var_325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%var_325, dtype="bool") /* ty=Tensor[(15, 13, 5), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %258 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %259 = reshape(%258, newshape=[]) /* ty=uint32 */;
  %260 = not_equal(%256, %257) /* ty=Tensor[(15, 13, 5), bool] */;
  %261 = @func_106(%259) /* ty=Tensor[(3, 1), bool] */;
  (%260, %261, meta[relay.Constant][12] /* ty=uint32 */)
}

def @func_942() -> Tensor[(14, 7, 14), float64] {
  %263 = fn () -> Tensor[(14, 7, 14), float64] {
    %262 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
    %262.0
  };
  %263() /* ty=Tensor[(14, 7, 14), float64] */
}

def @func_106(%var_81: uint32) -> Tensor[(3, 1), bool] {
  %264 = cast(%var_81, dtype="bool") /* ty=bool */;
  %265 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 1), uint32] */, dtype="bool") /* ty=Tensor[(3, 1), bool] */;
  equal(%264, %265) /* ty=Tensor[(3, 1), bool] */
}

def @func_5487() -> (Tensor[(14, 7, 14), float64],) {
  @func_5485() /* ty=(Tensor[(14, 7, 14), float64],) */
}

def @func_121(%var_120: Tensor[(7, 9, 10), float32]) -> Tensor[(7, 9, 10), int64] {
  %272 = fn (%var_111: Tensor[(7, 9, 10), float32]) -> Tensor[(7, 9, 10), int64] {
    %266 = cast(%var_111, dtype="float32") /* ty=Tensor[(7, 9, 10), float32] */;
    %267 = cos(%266) /* ty=Tensor[(7, 9, 10), float32] */;
    %268 = cast(%var_111, dtype="int64") /* ty=Tensor[(7, 9, 10), int64] */;
    %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
    %270 = cast(%267, dtype="int64") /* ty=Tensor[(7, 9, 10), int64] */;
    %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    subtract(%270, %271) /* ty=Tensor[(7, 9, 10), int64] */
  };
  %272(%var_120) /* ty=Tensor[(7, 9, 10), int64] */
}

def @func_3462() -> (Tensor[(14, 7, 14), float32],) {
  %275 = fn () -> (Tensor[(14, 7, 14), float32],) {
    %273 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %274 = %273.0;
    (%274,)
  };
  %275() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_3970() -> Tensor[(14, 7, 14), float32] {
  %276 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %277 = %276.0;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  acosh(%278) /* ty=Tensor[(14, 7, 14), float32] */
}

def @func_3108(%var_3079: Tensor[(65, 15), uint16], %var_3093: Tensor[(2, 12), float32]) -> (Tensor[(14, 7, 14), float64], Tensor[(2925), float64], uint32, Tensor[(65, 15), uint16], Tensor[(3, 2, 4), float32], Tensor[(8), float32], Tensor[(2, 12), float32]) {
  %279 = @func_2853() /* ty=(Tensor[(2925), float64],) */;
  %280 = cast(%var_3079, dtype="uint16") /* ty=Tensor[(65, 15), uint16] */;
  %281 = cast(%var_3079, dtype="uint16") /* ty=Tensor[(65, 15), uint16] */;
  %282 = reshape(%280, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
  %283 = reshape(%281, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
  %284 = @func_349(%282, %283) /* ty=(Tensor[(15, 13, 5), bool], Tensor[(3, 1), bool], uint32) */;
  %285 = cast(meta[relay.Constant][14] /* ty=Tensor[(8), float32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
  %286 = cast(%var_3093, dtype="float32") /* ty=Tensor[(2, 12), float32] */;
  %287 = reshape(%285, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), float32] */;
  %288 = reshape(%286, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), float32] */;
  %289 = @func_951() /* ty=Tensor[(14, 7, 14), float64] */;
  %290 = %279.0;
  %291 = %284.2;
  %292 = @func_3013(%287, %288) /* ty=Tensor[(3, 2, 4), float32] */;
  (%289, %290, %291, %var_3079, %292, meta[relay.Constant][14] /* ty=Tensor[(8), float32] */, %var_3093)
}

def @func_3606(%var_3604: Tensor[(4, 14, 9), bool], %var_3605: Tensor[(4, 14, 9), bool]) -> Tensor[(4, 14, 9), bool] {
  %297 = fn (%var_3593: Tensor[(4, 14, 9), bool], %var_3594: Tensor[(4, 14, 9), bool]) -> Tensor[(4, 14, 9), bool] {
    %293 = cast(%var_3594, dtype="bool") /* ty=Tensor[(4, 14, 9), bool] */;
    %294 = shape_of(%var_3593, dtype="int32") /* ty=Tensor[(3), int32] */;
    %295 = cast(%var_3593, dtype="bool") /* ty=Tensor[(4, 14, 9), bool] */;
    %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%295, %296) /* ty=Tensor[(4, 14, 9), bool] */
  };
  %297(%var_3604, %var_3605) /* ty=Tensor[(4, 14, 9), bool] */
}

def @func_5196() -> Tensor[(2925), float32] {
  @func_5194() /* ty=Tensor[(2925), float32] */
}

def @func_4936(%var_4919: uint32) -> (Tensor[(14, 7, 14), float64], uint32, Tensor[(3, 1), uint8]) {
  %298 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %299 = cast(%var_4919, dtype="uint32") /* ty=uint32 */;
  %300 = reshape(%299, newshape=[]) /* ty=uint32 */;
  %301 = @func_698(%300) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
  %302 = %298.0;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %304 = cast(%var_4919, dtype="uint32") /* ty=uint32 */;
  %305 = reshape(%303, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float64] */;
  %306 = reshape(%304, newshape=[]) /* ty=uint32 */;
  %307 = @func_1970(%305, %306) /* ty=(Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint32], Tensor[(14, 7, 14), float32], uint32, uint32) */;
  %308 = %307.0;
  %309 = cast(%var_4919, dtype="uint8") /* ty=uint8 */;
  %310 = cast(%308, dtype="uint8") /* ty=Tensor[(3, 1), uint8] */;
  %311 = %301.2;
  %312 = add(%309, %310) /* ty=Tensor[(3, 1), uint8] */;
  (%302, %311, %312)
}

def @func_7090(%var_7087: Tensor[(3, 1, 10), float64], %var_7088: uint16, %var_7089: Tensor[(2, 1), uint16]) -> (Tensor[(1, 2), bool], uint16, Tensor[(2, 1), uint16], Tensor[(9, 1), uint32], Tensor[(3, ?, 10), float32]) {
  @func_7085(%var_7087, %var_7088, %var_7089) /* ty=(Tensor[(1, 2), bool], uint16, Tensor[(2, 1), uint16], Tensor[(9, 1), uint32], Tensor[(3, ?, 10), float32]) */
}

def @func_7334() -> Tensor[(14, 7, 14), float64] {
  %313 = @func_6248() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %313.0
}

def @func_5309() -> (Tensor[(2925), float32],) {
  %315 = fn () -> (Tensor[(2925), float32],) {
    %314 = @func_5194() /* ty=Tensor[(2925), float32] */;
    (%314,)
  };
  %315() /* ty=(Tensor[(2925), float32],) */
}

def @func_7193() -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) {
  %319 = fn () -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) {
    %316 = @func_6695() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64]) */;
    %317 = %316.0;
    %318 = @func_3970() /* ty=Tensor[(14, 7, 14), float32] */;
    (%317, %318)
  };
  %319() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) */
}

def @main(%var_7401: Tensor[(6, 7, 10), int8], %var_7402: Tensor[(6, 7, 10), int8], %var_7417: Tensor[(6, 7, 10), int8]) -> (Tensor[(6, 7, 10), bool], Tensor[(6, 7, 10), float32], Tensor[(6, 7, 10), float64]) {
  %320 = cast(%var_7402, dtype="bool") /* ty=Tensor[(6, 7, 10), bool] */;
  %321 = shape_of(%var_7401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_7401, dtype="bool") /* ty=Tensor[(6, 7, 10), bool] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %324 = cast(%var_7417, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
  %325 = shape_of(%var_7401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%var_7401, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %328 = cast(%var_7402, dtype="float64") /* ty=Tensor[(6, 7, 10), float64] */;
  %329 = tan(%328) /* ty=Tensor[(6, 7, 10), float64] */;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(6, 7, 10), float64] */;
  %331 = less_equal(%322, %323) /* ty=Tensor[(6, 7, 10), bool] */;
  %332 = floor_mod(%326, %327) /* ty=Tensor[(6, 7, 10), float32] */;
  %333 = asin(%330) /* ty=Tensor[(6, 7, 10), float64] */;
  (%331, %332, %333)
}

def @func_4523() -> (Tensor[(14, 7, 14), float32],) {
  %336 = fn () -> (Tensor[(14, 7, 14), float32],) {
    %334 = @func_3291() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %335 = %334.0;
    (%335,)
  };
  %336() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_2127(%var_2126: Tensor[(13, 15, 15), uint32]) -> (Tensor[(13, 15, 15), int8], Tensor[(3, 1), bool], Tensor[(13, 15, 15), uint16]) {
  %348 = fn (%var_2099: Tensor[(13, 15, 15), uint32]) -> (Tensor[(13, 15, 15), int8], Tensor[(3, 1), bool], Tensor[(13, 15, 15), uint16]) {
    %337 = @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
    %338 = %337.2;
    %339 = cast(%338, dtype="int8") /* ty=int8 */;
    %340 = cast(%var_2099, dtype="int8") /* ty=Tensor[(13, 15, 15), int8] */;
    %341 = cast(%338, dtype="uint32") /* ty=uint32 */;
    %342 = reshape(%341, newshape=[]) /* ty=uint32 */;
    %343 = cast(%var_2099, dtype="uint16") /* ty=Tensor[(13, 15, 15), uint16] */;
    %344 = cast(%338, dtype="uint16") /* ty=uint16 */;
    %345 = maximum(%339, %340) /* ty=Tensor[(13, 15, 15), int8] */;
    %346 = @func_106(%342) /* ty=Tensor[(3, 1), bool] */;
    %347 = left_shift(%343, %344) /* ty=Tensor[(13, 15, 15), uint16] */;
    (%345, %346, %347)
  };
  %348(%var_2126) /* ty=(Tensor[(13, 15, 15), int8], Tensor[(3, 1), bool], Tensor[(13, 15, 15), uint16]) */
}

def @func_2596(%var_2594: Tensor[(1372), float32], %var_2595: Tensor[(1, 9, 1), uint32]) -> (Tensor[(8, 2), float64], uint32, Tensor[(1372), float32], Tensor[(1, 9, 1), uint16]) {
  %360 = fn (%var_2572: Tensor[(1372), float32], %var_2584: Tensor[(1, 9, 1), uint32]) -> (Tensor[(8, 2), float64], uint32, Tensor[(1372), float32], Tensor[(1, 9, 1), uint16]) {
    %349 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 2), float64] */;
    %350 = cast(%var_2572, dtype="float32") /* ty=Tensor[(1372), float32] */;
    %351 = cast(meta[relay.Constant][16] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %352 = reshape(%350, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float32] */;
    %353 = reshape(%351, newshape=[]) /* ty=uint32 */;
    %354 = @func_2171(%352, %353) /* ty=(Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) */;
    %355 = cast(meta[relay.Constant][16] /* ty=uint32 */, dtype="uint16") /* ty=uint16 */;
    %356 = cast(%var_2584, dtype="uint16") /* ty=Tensor[(1, 9, 1), uint16] */;
    %357 = sin(%349) /* ty=Tensor[(8, 2), float64] */;
    %358 = %354.2;
    %359 = multiply(%355, %356) /* ty=Tensor[(1, 9, 1), uint16] */;
    (%357, %358, %var_2572, %359)
  };
  %360(%var_2594, %var_2595) /* ty=(Tensor[(8, 2), float64], uint32, Tensor[(1372), float32], Tensor[(1, 9, 1), uint16]) */
}

def @func_1158(%var_1157: Tensor[(14, 11, 13), int8]) -> Tensor[(14, 11, 13), int8] {
  %365 = fn (%var_1142: Tensor[(14, 11, 13), int8]) -> Tensor[(14, 11, 13), int8] {
    %361 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 11, 13), int8] */, dtype="int8") /* ty=Tensor[(14, 11, 13), int8] */;
    %362 = shape_of(%var_1142, dtype="int32") /* ty=Tensor[(3), int32] */;
    %363 = cast(%var_1142, dtype="int8") /* ty=Tensor[(14, 11, 13), int8] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_and(%363, %364) /* ty=Tensor[(14, 11, 13), int8] */
  };
  %365(%var_1157) /* ty=Tensor[(14, 11, 13), int8] */
}

def @func_7085(%var_7030: Tensor[(3, 1, 10), float64], %var_7042: uint16, %var_7043: Tensor[(2, 1), uint16]) -> (Tensor[(1, 2), bool], uint16, Tensor[(2, 1), uint16], Tensor[(9, 1), uint32], Tensor[(3, ?, 10), float32]) {
  %366 = cast(%var_7042, dtype="uint16") /* ty=uint16 */;
  %367 = cast(%var_7043, dtype="uint16") /* ty=Tensor[(2, 1), uint16] */;
  %368 = reshape(%366, newshape=[]) /* ty=uint16 */;
  %369 = reshape(%367, newshape=[1, 2]) /* ty=Tensor[(1, 2), uint16] */;
  %370 = @func_5993(%368, %369) /* ty=(Tensor[(1, 2), bool],) */;
  %371 = @func_3545() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(9, 1), uint32]) */;
  %372 = cast(%var_7030, dtype="float64") /* ty=Tensor[(3, 1, 10), float64] */;
  %373 = acos(%372) /* ty=Tensor[(3, 1, 10), float64] */;
  %374 = cast(%var_7030, dtype="uint64") /* ty=Tensor[(3, 1, 10), uint64] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="uint64") /* ty=Tensor[(3, 1, 10), uint64] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %378 = bitwise_xor(%376, %377) /* ty=Tensor[(3, ?, 10), uint64] */;
  %379 = cast(%378, dtype="float32") /* ty=Tensor[(3, ?, 10), float32] */;
  %380 = %370.0;
  %381 = %371.1;
  %382 = tan(%379) /* ty=Tensor[(3, ?, 10), float32] */;
  (%380, %var_7042, %var_7043, %381, %382)
}

def @func_1496(%var_1475: uint8, %var_1476: Tensor[(192, 1), uint8]) -> (Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint8, Tensor[(192, 1), uint8], Tensor[(630), float32]) {
  %383 = @func_871() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %384 = cast(%var_1475, dtype="uint8") /* ty=uint8 */;
  %385 = cast(%var_1476, dtype="uint8") /* ty=Tensor[(192, 1), uint8] */;
  %386 = cast(meta[relay.Constant][18] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %387 = reshape(%384, newshape=[]) /* ty=uint8 */;
  %388 = reshape(%385, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), uint8] */;
  %389 = reshape(%386, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %390 = @func_985(%387, %388, %389) /* ty=(Tensor[(8, 8, 3), uint8], Tensor[(3, 1), bool], Tensor[(7, 9, 10), int64], Tensor[(630), float32], Tensor[(14, 7, 14), float64]) */;
  %391 = %383.0;
  %392 = %390.1;
  (%391, %392, %var_1475, %var_1476, meta[relay.Constant][18] /* ty=Tensor[(630), float32] */)
}

def @func_4065(%var_4063: Tensor[(15, 12, 15), int64], %var_4064: Tensor[(15, 12, 15), int64]) -> Tensor[(15, 12, 15), bool] {
  %397 = fn (%var_4052: Tensor[(15, 12, 15), int64], %var_4053: Tensor[(15, 12, 15), int64]) -> Tensor[(15, 12, 15), bool] {
    %393 = cast(%var_4053, dtype="bool") /* ty=Tensor[(15, 12, 15), bool] */;
    %394 = shape_of(%var_4052, dtype="int32") /* ty=Tensor[(3), int32] */;
    %395 = cast(%var_4052, dtype="bool") /* ty=Tensor[(15, 12, 15), bool] */;
    %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%395, %396) /* ty=Tensor[(15, 12, 15), bool] */
  };
  %397(%var_4063, %var_4064) /* ty=Tensor[(15, 12, 15), bool] */
}

def @func_6250() -> (Tensor[(14, 7, 14), float64],) {
  @func_6248() /* ty=(Tensor[(14, 7, 14), float64],) */
}

def @func_3292() -> (Tensor[(14, 7, 14), float32],) {
  %400 = fn () -> (Tensor[(14, 7, 14), float32],) {
    %398 = @func_2289() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %399 = %398.0;
    (%399,)
  };
  %400() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_1115() -> (Tensor[(14, 7, 14), float32],) {
  @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_3743() -> (Tensor[(2925), float64],) {
  %403 = fn () -> (Tensor[(2925), float64],) {
    %401 = @func_2853() /* ty=(Tensor[(2925), float64],) */;
    %402 = %401.0;
    (%402,)
  };
  %403() /* ty=(Tensor[(2925), float64],) */
}

def @func_2833(%var_2824: Tensor[(4, 5, 11), float32]) -> (Tensor[(4, 5, 11), float32],) {
  %404 = cast(%var_2824, dtype="float32") /* ty=Tensor[(4, 5, 11), float32] */;
  %405 = exp(%404) /* ty=Tensor[(4, 5, 11), float32] */;
  (%405,)
}

def @func_5330() -> Tensor[(14, 7, 14), float64] {
  %406 = fn () -> Tensor[(14, 7, 14), float64] {
    @func_951() /* ty=Tensor[(14, 7, 14), float64] */
  };
  %406() /* ty=Tensor[(14, 7, 14), float64] */
}

def @func_6534() -> Tensor[(14, 7, 14), float64] {
  %407 = fn () -> Tensor[(14, 7, 14), float64] {
    @func_5329() /* ty=Tensor[(14, 7, 14), float64] */
  };
  %407() /* ty=Tensor[(14, 7, 14), float64] */
}

def @func_4441() -> (Tensor[(14, 7, 14), float32], Tensor[(2925), float32]) {
  %408 = @func_4165() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %409 = @func_2853() /* ty=(Tensor[(2925), float64],) */;
  %410 = %409.0;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %412 = sigmoid(%411) /* ty=Tensor[(2925), float32] */;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %414 = %408.0;
  %415 = cosh(%413) /* ty=Tensor[(2925), float32] */;
  (%414, %415)
}

def @func_6510() -> Tensor[(14, 7, 14), float32] {
  %417 = fn () -> Tensor[(14, 7, 14), float32] {
    %416 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %416.0
  };
  %417() /* ty=Tensor[(14, 7, 14), float32] */
}

def @func_6489(%var_6487: Tensor[(15, 12, 12), bool], %var_6488: Tensor[(15, 12, 12), bool]) -> Tensor[(15, 12, 12), bool] {
  %422 = fn (%var_6474: Tensor[(15, 12, 12), bool], %var_6475: Tensor[(15, 12, 12), bool]) -> Tensor[(15, 12, 12), bool] {
    %418 = cast(%var_6475, dtype="bool") /* ty=Tensor[(15, 12, 12), bool] */;
    %419 = shape_of(%var_6474, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(%var_6474, dtype="bool") /* ty=Tensor[(15, 12, 12), bool] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%420, %421) /* ty=Tensor[(15, 12, 12), bool] */
  };
  %422(%var_6487, %var_6488) /* ty=Tensor[(15, 12, 12), bool] */
}

def @func_5485() -> (Tensor[(14, 7, 14), float64],) {
  %423 = @func_4135() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) */;
  %424 = %423.0;
  (%424,)
}

def @func_4001() -> (Tensor[(14, 7, 14), float64],) {
  %426 = fn () -> (Tensor[(14, 7, 14), float64],) {
    %425 = @func_2200() /* ty=Tensor[(14, 7, 14), float64] */;
    (%425,)
  };
  %426() /* ty=(Tensor[(14, 7, 14), float64],) */
}

def @func_2836(%var_2834: Tensor[(4, 5, 11), float32]) -> (Tensor[(4, 5, 11), float32],) {
  @func_2833(%var_2834) /* ty=(Tensor[(4, 5, 11), float32],) */
}

def @func_5221(%var_5220: uint32) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32) {
  %435 = fn (%var_5216: uint32) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32) {
    %427 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %428 = %427.0;
    %429 = cast(%428, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
    %430 = cast(%var_5216, dtype="uint32") /* ty=uint32 */;
    %431 = reshape(%429, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float32] */;
    %432 = reshape(%430, newshape=[]) /* ty=uint32 */;
    %433 = @func_2171(%431, %432) /* ty=(Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) */;
    %434 = %433.0;
    (%428, %434, %var_5216)
  };
  %435(%var_5220) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32) */
}

def @func_5433(%var_5431: Tensor[(2, 4), float32], %var_5432: uint32) -> (Tensor[(14, 7, 14), float64], Tensor[(3, 2, 4), float32], Tensor[(2, 4), float32], Tensor[(24), float32], Tensor[(14, 7, 14), int16], uint32) {
  @func_5429(%var_5431, %var_5432) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 2, 4), float32], Tensor[(2, 4), float32], Tensor[(24), float32], Tensor[(14, 7, 14), int16], uint32) */
}

def @func_4558() -> (Tensor[(14, 7, 14), float32],) {
  @func_4556() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_1440(%var_1437: Tensor[(12, 11, 9), int32], %var_1438: Tensor[(12, 11, 9), int32], %var_1439: Tensor[(192), uint8]) -> (Tensor[(12, 11, 9), float32], Tensor[(12, 11, 9), bool], Tensor[(8, 8, 3), uint8], uint8, Tensor[(192), uint8], Tensor[(630), float32], Tensor[(14, 7, 14), float32]) {
  %458 = fn (%var_1397: Tensor[(12, 11, 9), int32], %var_1398: Tensor[(12, 11, 9), int32], %var_1417: Tensor[(192), uint8]) -> (Tensor[(12, 11, 9), float32], Tensor[(12, 11, 9), bool], Tensor[(8, 8, 3), uint8], uint8, Tensor[(192), uint8], Tensor[(630), float32], Tensor[(14, 7, 14), float32]) {
    %436 = cast(%var_1398, dtype="int32") /* ty=Tensor[(12, 11, 9), int32] */;
    %437 = shape_of(%var_1397, dtype="int32") /* ty=Tensor[(3), int32] */;
    %438 = cast(%var_1397, dtype="int32") /* ty=Tensor[(12, 11, 9), int32] */;
    %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %440 = minimum(%438, %439) /* ty=Tensor[(12, 11, 9), int32] */;
    %441 = cast(%440, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
    %442 = cast(%var_1398, dtype="bool") /* ty=Tensor[(12, 11, 9), bool] */;
    %443 = shape_of(%var_1397, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(%var_1397, dtype="bool") /* ty=Tensor[(12, 11, 9), bool] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %446 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %447 = cast(%var_1417, dtype="uint8") /* ty=Tensor[(192), uint8] */;
    %448 = cast(meta[relay.Constant][20] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
    %449 = reshape(%446, newshape=[]) /* ty=uint8 */;
    %450 = reshape(%447, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), uint8] */;
    %451 = reshape(%448, newshape=[630]) /* ty=Tensor[(630), float32] */;
    %452 = @func_985(%449, %450, %451) /* ty=(Tensor[(8, 8, 3), uint8], Tensor[(3, 1), bool], Tensor[(7, 9, 10), int64], Tensor[(630), float32], Tensor[(14, 7, 14), float64]) */;
    %453 = @func_871() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
    %454 = sqrt(%441) /* ty=Tensor[(12, 11, 9), float32] */;
    %455 = logical_and(%444, %445) /* ty=Tensor[(12, 11, 9), bool] */;
    %456 = %452.0;
    %457 = %453.1;
    (%454, %455, %456, meta[relay.Constant][19] /* ty=uint8 */, %var_1417, meta[relay.Constant][20] /* ty=Tensor[(630), float32] */, %457)
  };
  %458(%var_1437, %var_1438, %var_1439) /* ty=(Tensor[(12, 11, 9), float32], Tensor[(12, 11, 9), bool], Tensor[(8, 8, 3), uint8], uint8, Tensor[(192), uint8], Tensor[(630), float32], Tensor[(14, 7, 14), float32]) */
}

def @func_109(%var_107: uint32) -> Tensor[(3, 1), bool] {
  @func_106(%var_107) /* ty=Tensor[(3, 1), bool] */
}

def @func_620() -> (Tensor[(14, 7, 14), float64],) {
  %461 = fn () -> (Tensor[(14, 7, 14), float64],) {
    %459 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
    %460 = %459.0;
    (%460,)
  };
  %461() /* ty=(Tensor[(14, 7, 14), float64],) */
}

def @func_1221(%var_1220: Tensor[(6, 6, 11), float64]) -> (Tensor[(6, 6, 11), float32], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) {
  %473 = fn (%var_1182: Tensor[(6, 6, 11), float64]) -> (Tensor[(6, 6, 11), float32], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) {
    %462 = cast(%var_1182, dtype="float64") /* ty=Tensor[(6, 6, 11), float64] */;
    %463 = asin(%462) /* ty=Tensor[(6, 6, 11), float64] */;
    %464 = cast(%var_1182, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
    %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %466 = cast(%463, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
    %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %468 = @func_871() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
    %469 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %470 = floor_divide(%466, %467) /* ty=Tensor[(6, 6, 11), float32] */;
    %471 = %468.1;
    %472 = %469.0;
    (%470, %471, %472)
  };
  %473(%var_1220) /* ty=(Tensor[(6, 6, 11), float32], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) */
}

def @func_6599(%var_6598: Tensor[(11, 10, 1), int16]) -> Tensor[(11, 10, 10), int16] {
  %476 = fn (%var_6590: Tensor[(11, 10, 1), int16]) -> Tensor[(11, 10, 10), int16] {
    %474 = cast(%var_6590, dtype="int16") /* ty=Tensor[(11, 10, 1), int16] */;
    %475 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 10, 10), int16] */, dtype="int16") /* ty=Tensor[(11, 10, 10), int16] */;
    logical_xor(%474, %475) /* ty=Tensor[(11, 10, 10), int16] */
  };
  %476(%var_6598) /* ty=Tensor[(11, 10, 10), int16] */
}

def @func_4997(%var_4958: Tensor[(10, 14, 8), float32], %var_4959: Tensor[(10, 14, 8), float32], %var_4963: Tensor[(10, 14, 8), float32], %var_4982: Tensor[(784), float64]) -> (Tensor[(10, 14, 8), float32], Tensor[(10, 14, 8), int32], Tensor[(10, 14, 8), uint8], Tensor[(14, 7, 14), float64], Tensor[(10, 14, 8), float32], Tensor[(7, 14, 8), float64], Tensor[(784), float64], Tensor[(6, 6, 11), float32], Tensor[(396), float64]) {
  %477 = cast(%var_4959, dtype="float32") /* ty=Tensor[(10, 14, 8), float32] */;
  %478 = shape_of(%var_4958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%var_4958, dtype="float32") /* ty=Tensor[(10, 14, 8), float32] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %481 = cast(%var_4963, dtype="int32") /* ty=Tensor[(10, 14, 8), int32] */;
  %482 = shape_of(%var_4958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%var_4958, dtype="int32") /* ty=Tensor[(10, 14, 8), int32] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %485 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 14, 8), float32] */, dtype="uint8") /* ty=Tensor[(10, 14, 8), uint8] */;
  %486 = shape_of(%var_4959, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%var_4959, dtype="uint8") /* ty=Tensor[(10, 14, 8), uint8] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %489 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 8), float32] */;
  %490 = cast(%var_4982, dtype="float64") /* ty=Tensor[(784), float64] */;
  %491 = reshape(%490, newshape=[7, 14, 8]) /* ty=Tensor[(7, 14, 8), float64] */;
  %492 = @func_3768(%491) /* ty=(Tensor[(7, 14, 8), float64],) */;
  %493 = cast(meta[relay.Constant][23] /* ty=Tensor[(396), float64] */, dtype="float64") /* ty=Tensor[(396), float64] */;
  %494 = reshape(%493, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), float64] */;
  %495 = @func_1219(%494) /* ty=(Tensor[(6, 6, 11), float32], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32]) */;
  %496 = divide(%479, %480) /* ty=Tensor[(10, 14, 8), float32] */;
  %497 = add(%483, %484) /* ty=Tensor[(10, 14, 8), int32] */;
  %498 = left_shift(%487, %488) /* ty=Tensor[(10, 14, 8), uint8] */;
  %499 = @func_941() /* ty=Tensor[(14, 7, 14), float64] */;
  %500 = acos(%489) /* ty=Tensor[(10, 14, 8), float32] */;
  %501 = %492.0;
  %502 = %495.0;
  (%496, %497, %498, %499, %500, %501, %var_4982, %502, meta[relay.Constant][23] /* ty=Tensor[(396), float64] */)
}

def @func_871() -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) {
  %503 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %504 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %505 = %504.0;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %507 = %503.0;
  %508 = sigmoid(%506) /* ty=Tensor[(14, 7, 14), float32] */;
  (%507, %508)
}

def @func_4939(%var_4937: uint32) -> (Tensor[(14, 7, 14), float64], uint32, Tensor[(3, 1), uint8]) {
  @func_4936(%var_4937) /* ty=(Tensor[(14, 7, 14), float64], uint32, Tensor[(3, 1), uint8]) */
}

def @func_1779() -> (Tensor[(14, 7, 14), float64],) {
  %510 = fn () -> (Tensor[(14, 7, 14), float64],) {
    %509 = @func_892() /* ty=Tensor[(14, 7, 14), float64] */;
    (%509,)
  };
  %510() /* ty=(Tensor[(14, 7, 14), float64],) */
}

def @func_1024() -> (Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) {
  @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */
}

def @func_6945() -> Tensor[(2925), float64] {
  @func_6943() /* ty=Tensor[(2925), float64] */
}

def @func_5054() -> (Tensor[(7, 9, 10), int64], Tensor[(70, 9), float32], Tensor[(14, 7, 14), float32]) {
  @func_5052() /* ty=(Tensor[(7, 9, 10), int64], Tensor[(70, 9), float32], Tensor[(14, 7, 14), float32]) */
}

def @func_701(%var_699: uint32) -> (Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) {
  @func_698(%var_699) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */
}

def @func_1113() -> (Tensor[(14, 7, 14), float32],) {
  %511 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
  %512 = %511.1;
  (%512,)
}

def @func_5716(%var_5715: Tensor[(1, 2112), int16]) -> (Tensor[(14, 7, 14), float64], uint32, Tensor[(48), uint32], uint32, Tensor[(16, 11, 12), float32], Tensor[(1, 2112), int16]) {
  %531 = fn (%var_5706: Tensor[(1, 2112), int16]) -> (Tensor[(14, 7, 14), float64], uint32, Tensor[(48), uint32], uint32, Tensor[(16, 11, 12), float32], Tensor[(1, 2112), int16]) {
    %513 = @func_4042() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64]) */;
    %514 = cast(meta[relay.Constant][24] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %515 = reshape(%514, newshape=[8, 1, 6]) /* ty=Tensor[(8, 1, 6), uint32] */;
    %516 = @func_3234(%515) /* ty=(uint32, Tensor[(14, 7, 14), float64], Tensor[(8, 13, 6), int32], Tensor[(8, ?, 6), float64]) */;
    %517 = %513.0;
    %518 = cast(%517, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
    %519 = %516.0;
    %520 = cast(%519, dtype="uint32") /* ty=uint32 */;
    %521 = reshape(%518, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float64] */;
    %522 = reshape(%520, newshape=[]) /* ty=uint32 */;
    %523 = @func_1970(%521, %522) /* ty=(Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint32], Tensor[(14, 7, 14), float32], uint32, uint32) */;
    %524 = cast(%519, dtype="int16") /* ty=int16 */;
    %525 = cast(%var_5706, dtype="int16") /* ty=Tensor[(1, 2112), int16] */;
    %526 = reshape(%524, newshape=[]) /* ty=int16 */;
    %527 = reshape(%525, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), int16] */;
    %528 = @func_2706(%526, %527) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(16, 11, 12), float32]) */;
    %529 = %523.4;
    %530 = %528.1;
    (%517, %519, meta[relay.Constant][24] /* ty=Tensor[(48), uint32] */, %529, %530, %var_5706)
  };
  %531(%var_5715) /* ty=(Tensor[(14, 7, 14), float64], uint32, Tensor[(48), uint32], uint32, Tensor[(16, 11, 12), float32], Tensor[(1, 2112), int16]) */
}

def @func_2556() -> Tensor[(14, 7, 14), float32] {
  %535 = fn () -> Tensor[(14, 7, 14), float32] {
    %532 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %533 = %532.0;
    %534 = cast(%533, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
    sinh(%534) /* ty=Tensor[(14, 7, 14), float32] */
  };
  %535() /* ty=Tensor[(14, 7, 14), float32] */
}

def @func_6608() -> (Tensor[(14, 7, 14), float32],) {
  %537 = fn () -> (Tensor[(14, 7, 14), float32],) {
    %536 = @func_3970() /* ty=Tensor[(14, 7, 14), float32] */;
    (%536,)
  };
  %537() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_2785() -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) {
  @func_2783() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) */
}

def @func_2853() -> (Tensor[(2925), float64],) {
  %538 = @func_2783() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) */;
  %539 = %538.2;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(2925), float64] */;
  %541 = rsqrt(%540) /* ty=Tensor[(2925), float64] */;
  (%541,)
}

def @func_5003(%var_4999: Tensor[(10, 14, 8), float32], %var_5000: Tensor[(10, 14, 8), float32], %var_5001: Tensor[(10, 14, 8), float32], %var_5002: Tensor[(784), float64]) -> (Tensor[(10, 14, 8), float32], Tensor[(10, 14, 8), int32], Tensor[(10, 14, 8), uint8], Tensor[(14, 7, 14), float64], Tensor[(10, 14, 8), float32], Tensor[(7, 14, 8), float64], Tensor[(784), float64], Tensor[(6, 6, 11), float32], Tensor[(396), float64]) {
  @func_4997(%var_4999, %var_5000, %var_5001, %var_5002) /* ty=(Tensor[(10, 14, 8), float32], Tensor[(10, 14, 8), int32], Tensor[(10, 14, 8), uint8], Tensor[(14, 7, 14), float64], Tensor[(10, 14, 8), float32], Tensor[(7, 14, 8), float64], Tensor[(784), float64], Tensor[(6, 6, 11), float32], Tensor[(396), float64]) */
}

def @func_953() -> Tensor[(14, 7, 14), float64] {
  @func_951() /* ty=Tensor[(14, 7, 14), float64] */
}

def @func_6900() -> Tensor[(14, 7, 14), float32] {
  %543 = fn () -> Tensor[(14, 7, 14), float32] {
    %542 = @func_2783() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) */;
    %542.0
  };
  %543() /* ty=Tensor[(14, 7, 14), float32] */
}

def @func_2432(%var_2431: Tensor[(2925), uint32]) -> (Tensor[(14, 7, 14), float64], Tensor[(2925), uint32], Tensor[(14, 7, 14), float64], Tensor[(13, 15, 15), float32], Tensor[(13, 15, 15), int64], Tensor[(13, 15, 15), float64]) {
  %572 = fn (%var_2350: Tensor[(2925), uint32]) -> (Tensor[(14, 7, 14), float64], Tensor[(2925), uint32], Tensor[(14, 7, 14), float64], Tensor[(13, 15, 15), float32], Tensor[(13, 15, 15), int64], Tensor[(13, 15, 15), float64]) {
    %544 = @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
    %545 = cast(%var_2350, dtype="uint32") /* ty=Tensor[(2925), uint32] */;
    %546 = reshape(%545, newshape=[13, 15, 15]) /* ty=Tensor[(13, 15, 15), uint32] */;
    %547 = @func_2125(%546) /* ty=(Tensor[(13, 15, 15), int8], Tensor[(3, 1), bool], Tensor[(13, 15, 15), uint16]) */;
    %548 = %547.2;
    %549 = cast(%548, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
    %550 = sqrt(%549) /* ty=Tensor[(13, 15, 15), float32] */;
    %551 = cast(%550, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
    %552 = cos(%551) /* ty=Tensor[(13, 15, 15), float64] */;
    %553 = cast(%550, dtype="uint8") /* ty=Tensor[(13, 15, 15), uint8] */;
    %554 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
    %555 = cast(%552, dtype="uint8") /* ty=Tensor[(13, 15, 15), uint8] */;
    %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %557 = bitwise_or(%555, %556) /* ty=Tensor[(13, 15, 15), uint8] */;
    %558 = cast(%557, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
    %559 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
    %560 = cast(%550, dtype="float32") /* ty=Tensor[(13, 15, 15), float32] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %562 = cast(%552, dtype="int64") /* ty=Tensor[(13, 15, 15), int64] */;
    %563 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
    %564 = cast(%550, dtype="int64") /* ty=Tensor[(13, 15, 15), int64] */;
    %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %566 = cast(%557, dtype="float64") /* ty=Tensor[(13, 15, 15), float64] */;
    %567 = @func_951() /* ty=Tensor[(14, 7, 14), float64] */;
    %568 = %544.0;
    %569 = power(%560, %561) /* ty=Tensor[(13, 15, 15), float32] */;
    %570 = bitwise_xor(%564, %565) /* ty=Tensor[(13, 15, 15), int64] */;
    %571 = asin(%566) /* ty=Tensor[(13, 15, 15), float64] */;
    (%567, %var_2350, %568, %569, %570, %571)
  };
  %572(%var_2431) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), uint32], Tensor[(14, 7, 14), float64], Tensor[(13, 15, 15), float32], Tensor[(13, 15, 15), int64], Tensor[(13, 15, 15), float64]) */
}

def @func_2783() -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) {
  %573 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %574 = cast(meta[relay.Constant][25] /* ty=Tensor[(2925), uint32] */, dtype="uint32") /* ty=Tensor[(2925), uint32] */;
  %575 = reshape(%574, newshape=[2925]) /* ty=Tensor[(2925), uint32] */;
  %576 = @func_2430(%575) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), uint32], Tensor[(14, 7, 14), float64], Tensor[(13, 15, 15), float32], Tensor[(13, 15, 15), int64], Tensor[(13, 15, 15), float64]) */;
  %577 = cast(meta[relay.Constant][26] /* ty=Tensor[(2925), uint32] */, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %578 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(2925), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %579 = cast(meta[relay.Constant][25] /* ty=Tensor[(2925), uint32] */, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?), float32] */;
  %581 = add(%579, %580) /* ty=Tensor[(2925), float32] */;
  %582 = cast(%581, dtype="uint16") /* ty=Tensor[(2925), uint16] */;
  %583 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(2925), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %584 = cast(meta[relay.Constant][26] /* ty=Tensor[(2925), uint32] */, dtype="uint16") /* ty=Tensor[(2925), uint16] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %586 = %576.0;
  %587 = cast(%586, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %588 = cast(meta[relay.Constant][27] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %589 = reshape(%587, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float32] */;
  %590 = reshape(%588, newshape=[]) /* ty=uint32 */;
  %591 = @func_2171(%589, %590) /* ty=(Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) */;
  %592 = %573.0;
  %593 = right_shift(%584, %585) /* ty=Tensor[(2925), uint16] */;
  %594 = %591.2;
  (%592, %586, %593, %594, meta[relay.Constant][27] /* ty=uint32 */)
}

def @func_7365() -> (uint32, uint32) {
  @func_7363() /* ty=(uint32, uint32) */
}

def @func_6350() -> uint32 {
  %595 = fn () -> uint32 {
    @func_3002() /* ty=uint32 */
  };
  %595() /* ty=uint32 */
}

def @func_7220() -> (Tensor[(14, 7, 14), float32],) {
  %596 = @func_4441() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(2925), float32]) */;
  %597 = %596.0;
  (%597,)
}

def @func_6461() -> (Tensor[(14, 7, 14), float64],) {
  %598 = @func_5275() /* ty=Tensor[(14, 7, 14), float64] */;
  (%598,)
}

def @func_1500(%var_1498: uint8, %var_1499: Tensor[(192, 1), uint8]) -> (Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint8, Tensor[(192, 1), uint8], Tensor[(630), float32]) {
  @func_1496(%var_1498, %var_1499) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint8, Tensor[(192, 1), uint8], Tensor[(630), float32]) */
}

def @func_7336() -> Tensor[(14, 7, 14), float64] {
  @func_7334() /* ty=Tensor[(14, 7, 14), float64] */
}

def @func_1296(%var_1249: Tensor[(630), float32]) -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64], uint8, Tensor[(24, 8), uint8], Tensor[(14, 7, 14), float64], Tensor[(630), uint64], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), bool]) {
  %599 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %600 = cast(meta[relay.Constant][28] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %601 = cast(meta[relay.Constant][29] /* ty=Tensor[(24, 8), uint8] */, dtype="uint8") /* ty=Tensor[(24, 8), uint8] */;
  %602 = cast(meta[relay.Constant][30] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %603 = reshape(%600, newshape=[]) /* ty=uint8 */;
  %604 = reshape(%601, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), uint8] */;
  %605 = reshape(%602, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %606 = @func_985(%603, %604, %605) /* ty=(Tensor[(8, 8, 3), uint8], Tensor[(3, 1), bool], Tensor[(7, 9, 10), int64], Tensor[(630), float32], Tensor[(14, 7, 14), float64]) */;
  %607 = cast(meta[relay.Constant][28] /* ty=uint8 */, dtype="uint32") /* ty=uint32 */;
  %608 = reshape(%607, newshape=[]) /* ty=uint32 */;
  %609 = @func_799(%608) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool]) */;
  %610 = cast(%var_1249, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %611 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(630), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %612 = cast(meta[relay.Constant][30] /* ty=Tensor[(630), float32] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %614 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %615 = @func_941() /* ty=Tensor[(14, 7, 14), float64] */;
  %616 = @func_1169() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %617 = %616.0;
  %618 = cast(%617, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %619 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%615, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %622 = %599.0;
  %623 = %606.4;
  %624 = %609.0;
  %625 = minimum(%612, %613) /* ty=Tensor[(630), uint64] */;
  %626 = %614.0;
  %627 = not_equal(%620, %621) /* ty=Tensor[(14, 7, 14), bool] */;
  (%622, %623, meta[relay.Constant][28] /* ty=uint8 */, meta[relay.Constant][29] /* ty=Tensor[(24, 8), uint8] */, %624, %625, %626, %627)
}

def @func_4556() -> (Tensor[(14, 7, 14), float32],) {
  %628 = @func_1113() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %629 = %628.0;
  (%629,)
}

def @func_1973(%var_1971: Tensor[(14, 7, 14), float64], %var_1972: uint32) -> (Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint32], Tensor[(14, 7, 14), float32], uint32, uint32) {
  %652 = fn (%var_1938: Tensor[(14, 7, 14), float64], %var_1964: uint32) -> (Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint32], Tensor[(14, 7, 14), float32], uint32, uint32) {
    %630 = @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
    %631 = @func_941() /* ty=Tensor[(14, 7, 14), float64] */;
    %632 = cast(%631, dtype="uint32") /* ty=Tensor[(14, 7, 14), uint32] */;
    %633 = shape_of(%var_1938, dtype="int32") /* ty=Tensor[(3), int32] */;
    %634 = cast(%var_1938, dtype="uint32") /* ty=Tensor[(14, 7, 14), uint32] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %636 = cast(%var_1938, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
    %637 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
    %638 = cast(%631, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
    %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %640 = logical_or(%638, %639) /* ty=Tensor[(14, 7, 14), bool] */;
    %641 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 7, 14), bool] */, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
    %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
    %643 = cast(%640, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
    %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %645 = cast(%var_1964, dtype="uint32") /* ty=uint32 */;
    %646 = reshape(%645, newshape=[]) /* ty=uint32 */;
    %647 = @func_698(%646) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
    %648 = %630.1;
    %649 = bitwise_or(%634, %635) /* ty=Tensor[(14, 7, 14), uint32] */;
    %650 = add(%643, %644) /* ty=Tensor[(14, 7, 14), float32] */;
    %651 = %647.2;
    (%648, %649, %650, %651, %var_1964)
  };
  %652(%var_1971, %var_1972) /* ty=(Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint32], Tensor[(14, 7, 14), float32], uint32, uint32) */
}

def @func_550() -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) {
  @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */
}

def @func_3886(%var_3882: uint32, %var_3883: Tensor[(225, 15), float64], %var_3884: Tensor[(2, 4), float32], %var_3885: Tensor[(24, 1), float32]) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32, Tensor[(15, 15, 15), float64], Tensor[(225, 15), float64], Tensor[(3, 2, 4), float32], Tensor[(2, 4), float32], Tensor[(24, 1), float32], Tensor[(14, 7, 14), float32], Tensor[(8, 2), float64], Tensor[(9, 1), uint32]) {
  %677 = fn (%var_3846: uint32, %var_3849: Tensor[(225, 15), float64], %var_3865: Tensor[(2, 4), float32], %var_3866: Tensor[(24, 1), float32]) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32, Tensor[(15, 15, 15), float64], Tensor[(225, 15), float64], Tensor[(3, 2, 4), float32], Tensor[(2, 4), float32], Tensor[(24, 1), float32], Tensor[(14, 7, 14), float32], Tensor[(8, 2), float64], Tensor[(9, 1), uint32]) {
    %653 = @func_3291() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %654 = %653.0;
    %655 = cast(%654, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
    %656 = cast(%var_3846, dtype="uint32") /* ty=uint32 */;
    %657 = reshape(%655, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), float32] */;
    %658 = reshape(%656, newshape=[]) /* ty=uint32 */;
    %659 = @func_2171(%657, %658) /* ty=(Tensor[(14, 7, 14), int16], Tensor[(14, 7, 14), float32], uint32) */;
    %660 = cast(%var_3849, dtype="float64") /* ty=Tensor[(225, 15), float64] */;
    %661 = reshape(%660, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
    %662 = @func_3492(%661) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2925), float64], Tensor[(15, 15, 15), float64]) */;
    %663 = cast(%var_3865, dtype="float32") /* ty=Tensor[(2, 4), float32] */;
    %664 = cast(%var_3866, dtype="float32") /* ty=Tensor[(24, 1), float32] */;
    %665 = reshape(%663, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), float32] */;
    %666 = reshape(%664, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), float32] */;
    %667 = cast(%654, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
    %668 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 1), uint32] */, dtype="uint32") /* ty=Tensor[(9, 1), uint32] */;
    %669 = reshape(%667, newshape=[1372]) /* ty=Tensor[(1372), float32] */;
    %670 = reshape(%668, newshape=[1, 9, 1]) /* ty=Tensor[(1, 9, 1), uint32] */;
    %671 = @func_2593(%669, %670) /* ty=(Tensor[(8, 2), float64], uint32, Tensor[(1372), float32], Tensor[(1, 9, 1), uint16]) */;
    %672 = %659.0;
    %673 = %662.0;
    %674 = @func_3013(%665, %666) /* ty=Tensor[(3, 2, 4), float32] */;
    %675 = @func_2555() /* ty=Tensor[(14, 7, 14), float32] */;
    %676 = %671.0;
    (%654, %672, %var_3846, %673, %var_3849, %674, %var_3865, %var_3866, %675, %676, meta[relay.Constant][32] /* ty=Tensor[(9, 1), uint32] */)
  };
  %677(%var_3882, %var_3883, %var_3884, %var_3885) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32, Tensor[(15, 15, 15), float64], Tensor[(225, 15), float64], Tensor[(3, 2, 4), float32], Tensor[(2, 4), float32], Tensor[(24, 1), float32], Tensor[(14, 7, 14), float32], Tensor[(8, 2), float64], Tensor[(9, 1), uint32]) */
}

def @func_6677() -> (Tensor[(14, 7, 14), float32],) {
  %680 = fn () -> (Tensor[(14, 7, 14), float32],) {
    %678 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %679 = %678.0;
    (%679,)
  };
  %680() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_2202() -> Tensor[(14, 7, 14), float64] {
  @func_2200() /* ty=Tensor[(14, 7, 14), float64] */
}

def @func_799(%var_791: uint32) -> (Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool]) {
  %681 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %682 = cast(%var_791, dtype="uint32") /* ty=uint32 */;
  %683 = reshape(%682, newshape=[]) /* ty=uint32 */;
  %684 = @func_106(%683) /* ty=Tensor[(3, 1), bool] */;
  %685 = cast(%var_791, dtype="bool") /* ty=bool */;
  %686 = cast(%684, dtype="bool") /* ty=Tensor[(3, 1), bool] */;
  %687 = %681.0;
  %688 = less(%685, %686) /* ty=Tensor[(3, 1), bool] */;
  (%687, %688)
}

def @func_2314(%var_2312: Tensor[(13, 2, 3), float64]) -> (Tensor[(13, 2, 3), float64],) {
  @func_2311(%var_2312) /* ty=(Tensor[(13, 2, 3), float64],) */
}

def @func_6241(%var_6240: Tensor[(7, 10, 10), float32]) -> (Tensor[(7, 10, 10), float32], Tensor[(14, 7, 14), float64], Tensor[(7, 10, 10), float64], Tensor[(14, 7, 14), float64], uint32, Tensor[(9), uint32]) {
  %705 = fn (%var_6188: Tensor[(7, 10, 10), float32]) -> (Tensor[(7, 10, 10), float32], Tensor[(14, 7, 14), float64], Tensor[(7, 10, 10), float64], Tensor[(14, 7, 14), float64], uint32, Tensor[(9), uint32]) {
    %689 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
    %690 = shape_of(%var_6188, dtype="int32") /* ty=Tensor[(3), int32] */;
    %691 = cast(%var_6188, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
    %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %693 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 10, 10), float32] */, dtype="float64") /* ty=Tensor[(7, 10, 10), float64] */;
    %694 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
    %695 = %694.0;
    %696 = cast(%695, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
    %697 = cast(meta[relay.Constant][34] /* ty=Tensor[(9), uint32] */, dtype="uint32") /* ty=Tensor[(9), uint32] */;
    %698 = reshape(%696, newshape=[1372]) /* ty=Tensor[(1372), float32] */;
    %699 = reshape(%697, newshape=[1, 9, 1]) /* ty=Tensor[(1, 9, 1), uint32] */;
    %700 = @func_2593(%698, %699) /* ty=(Tensor[(8, 2), float64], uint32, Tensor[(1372), float32], Tensor[(1, 9, 1), uint16]) */;
    %701 = floor_divide(%691, %692) /* ty=Tensor[(7, 10, 10), float32] */;
    %702 = @func_941() /* ty=Tensor[(14, 7, 14), float64] */;
    %703 = exp(%693) /* ty=Tensor[(7, 10, 10), float64] */;
    %704 = %700.1;
    (%701, %702, %703, %695, %704, meta[relay.Constant][34] /* ty=Tensor[(9), uint32] */)
  };
  %705(%var_6240) /* ty=(Tensor[(7, 10, 10), float32], Tensor[(14, 7, 14), float64], Tensor[(7, 10, 10), float64], Tensor[(14, 7, 14), float64], uint32, Tensor[(9), uint32]) */
}

def @func_3234(%var_3196: Tensor[(8, 1, 6), uint32]) -> (uint32, Tensor[(14, 7, 14), float64], Tensor[(8, 13, 6), int32], Tensor[(8, ?, 6), float64]) {
  %706 = @func_3002() /* ty=uint32 */;
  %707 = cast(%706, dtype="int16") /* ty=int16 */;
  %708 = cast(%var_3196, dtype="int16") /* ty=Tensor[(8, 1, 6), int16] */;
  %709 = bitwise_or(%707, %708) /* ty=Tensor[(8, 1, 6), int16] */;
  %710 = cast(%709, dtype="float64") /* ty=Tensor[(8, 1, 6), float64] */;
  %711 = cast(%706, dtype="float64") /* ty=float64 */;
  %712 = divide(%710, %711) /* ty=Tensor[(8, 1, 6), float64] */;
  %713 = cast(%712, dtype="int32") /* ty=Tensor[(8, 1, 6), int32] */;
  %714 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 13, 6), float64] */, dtype="int32") /* ty=Tensor[(8, 13, 6), int32] */;
  %715 = cast(%var_3196, dtype="float32") /* ty=Tensor[(8, 1, 6), float32] */;
  %716 = atan(%715) /* ty=Tensor[(8, 1, 6), float32] */;
  %717 = cast(%709, dtype="bool") /* ty=Tensor[(8, 1, 6), bool] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="bool") /* ty=Tensor[(8, 1, 6), bool] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %721 = not_equal(%719, %720) /* ty=Tensor[(8, ?, 6), bool] */;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(8, ?, 6), float64] */;
  %723 = @func_3002() /* ty=uint32 */;
  %724 = @func_951() /* ty=Tensor[(14, 7, 14), float64] */;
  %725 = bitwise_or(%713, %714) /* ty=Tensor[(8, 13, 6), int32] */;
  %726 = cosh(%722) /* ty=Tensor[(8, ?, 6), float64] */;
  (%723, %724, %725, %726)
}

def @func_5429(%var_5397: Tensor[(2, 4), float32], %var_5404: uint32) -> (Tensor[(14, 7, 14), float64], Tensor[(3, 2, 4), float32], Tensor[(2, 4), float32], Tensor[(24), float32], Tensor[(14, 7, 14), int16], uint32) {
  %727 = @func_3377() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64], Tensor[(1372), float32], Tensor[(9, 1), uint32]) */;
  %728 = cast(%var_5397, dtype="float32") /* ty=Tensor[(2, 4), float32] */;
  %729 = cast(meta[relay.Constant][36] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %730 = reshape(%728, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), float32] */;
  %731 = reshape(%729, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), float32] */;
  %732 = cast(%var_5404, dtype="uint32") /* ty=uint32 */;
  %733 = reshape(%732, newshape=[]) /* ty=uint32 */;
  %734 = @func_5219(%733) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), int16], uint32) */;
  %735 = %727.0;
  %736 = @func_3013(%730, %731) /* ty=Tensor[(3, 2, 4), float32] */;
  %737 = %734.1;
  (%735, %736, %var_5397, meta[relay.Constant][36] /* ty=Tensor[(24), float32] */, %737, %var_5404)
}

def @func_5275() -> Tensor[(14, 7, 14), float64] {
  %738 = @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
  %738.0
}

def @func_5768() -> (Tensor[(14, 7, 14), float64],) {
  %739 = @func_5485() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %740 = %739.0;
  (%740,)
}

def @func_951() -> Tensor[(14, 7, 14), float64] {
  @func_892() /* ty=Tensor[(14, 7, 14), float64] */
}

def @func_4136() -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) {
  %745 = fn () -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) {
    %741 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
    %742 = @func_619() /* ty=(Tensor[(14, 7, 14), float64],) */;
    %743 = %741.0;
    %744 = %742.0;
    (%743, %744)
  };
  %745() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) */
}

def @func_7363() -> (uint32, uint32) {
  %746 = @func_3002() /* ty=uint32 */;
  %747 = @func_3002() /* ty=uint32 */;
  (%746, %747)
}

def @func_5357() -> (Tensor[(3, 1), bool],) {
  %750 = fn () -> (Tensor[(3, 1), bool],) {
    %748 = @func_1022() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
    %749 = %748.1;
    (%749,)
  };
  %750() /* ty=(Tensor[(3, 1), bool],) */
}

def @func_5177() -> (uint32,) {
  @func_5175() /* ty=(uint32,) */
}

def @func_4596(%var_4572: Tensor[(784), float64], %var_4589: Tensor[(7, 14, 8), float32]) -> (Tensor[(14, 7, 14), float64], Tensor[(784), float64], Tensor[(7, 14, 8), uint32]) {
  %751 = @func_4000() /* ty=(Tensor[(14, 7, 14), float64],) */;
  %752 = cast(%var_4572, dtype="float64") /* ty=Tensor[(784), float64] */;
  %753 = reshape(%752, newshape=[7, 14, 8]) /* ty=Tensor[(7, 14, 8), float64] */;
  %754 = @func_3768(%753) /* ty=(Tensor[(7, 14, 8), float64],) */;
  %755 = %754.0;
  %756 = cast(%755, dtype="float32") /* ty=Tensor[(7, 14, 8), float32] */;
  %757 = asinh(%756) /* ty=Tensor[(7, 14, 8), float32] */;
  %758 = cast(%var_4589, dtype="uint32") /* ty=Tensor[(7, 14, 8), uint32] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="uint32") /* ty=Tensor[(7, 14, 8), uint32] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %762 = %751.0;
  %763 = left_shift(%760, %761) /* ty=Tensor[(7, 14, 8), uint32] */;
  (%762, %var_4572, %763)
}

def @func_4665() -> Tensor[(14, 7, 14), float32] {
  %764 = @func_3291() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %764.0
}

def @func_873() -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) {
  @func_871() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */
}

def @func_1171() -> (Tensor[(14, 7, 14), float32],) {
  @func_1169() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_4166() -> (Tensor[(14, 7, 14), float32],) {
  %767 = fn () -> (Tensor[(14, 7, 14), float32],) {
    %765 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %766 = %765.0;
    (%766,)
  };
  %767() /* ty=(Tensor[(14, 7, 14), float32],) */
}

def @func_6377() -> Tensor[(9, 5, 10), int16] {
  %772 = fn () -> Tensor[(9, 5, 10), int16] {
    %768 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 5, 10), int16] */, dtype="int16") /* ty=Tensor[(9, 5, 10), int16] */;
    %769 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(9, 5, 10), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %770 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 5, 10), int16] */, dtype="int16") /* ty=Tensor[(9, 5, 10), int16] */;
    %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    minimum(%770, %771) /* ty=Tensor[(9, 5, 10), int16] */
  };
  %772() /* ty=Tensor[(9, 5, 10), int16] */
}

def @func_724(%var_723: uint32) -> (Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint8]) {
  %781 = fn (%var_710: uint32) -> (Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint8]) {
    %773 = cast(%var_710, dtype="uint32") /* ty=uint32 */;
    %774 = reshape(%773, newshape=[]) /* ty=uint32 */;
    %775 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
    %776 = %775.1;
    %777 = cast(%776, dtype="uint8") /* ty=Tensor[(14, 7, 14), uint8] */;
    %778 = cast(%var_710, dtype="uint8") /* ty=uint8 */;
    %779 = @func_106(%774) /* ty=Tensor[(3, 1), bool] */;
    %780 = bitwise_and(%777, %778) /* ty=Tensor[(14, 7, 14), uint8] */;
    (%779, %780)
  };
  %781(%var_723) /* ty=(Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint8]) */
}

def @func_3825(%var_3818: uint32) -> (Tensor[(14, 7, 14), float32], Tensor[(3, 1), bool], uint32) {
  %782 = @func_951() /* ty=Tensor[(14, 7, 14), float64] */;
  %783 = cast(%782, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %784 = cast(%var_3818, dtype="uint32") /* ty=uint32 */;
  %785 = reshape(%784, newshape=[]) /* ty=uint32 */;
  %786 = @func_722(%785) /* ty=(Tensor[(3, 1), bool], Tensor[(14, 7, 14), uint8]) */;
  %787 = atanh(%783) /* ty=Tensor[(14, 7, 14), float32] */;
  %788 = %786.0;
  (%787, %788, %var_3818)
}

def @func_3379() -> (Tensor[(14, 7, 14), float64], Tensor[(2925), float64], Tensor[(1372), float32], Tensor[(9, 1), uint32]) {
  @func_3377() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64], Tensor[(1372), float32], Tensor[(9, 1), uint32]) */
}

def @func_6943() -> Tensor[(2925), float64] {
  %789 = @func_3742() /* ty=(Tensor[(2925), float64],) */;
  %789.0
}

def @func_3771(%var_3769: Tensor[(7, 14, 8), float64]) -> (Tensor[(7, 14, 8), float64],) {
  @func_3768(%var_3769) /* ty=(Tensor[(7, 14, 8), float64],) */
}

def @func_3972() -> Tensor[(14, 7, 14), float32] {
  @func_3970() /* ty=Tensor[(14, 7, 14), float32] */
}

def @func_3546() -> (Tensor[(14, 7, 14), bool], Tensor[(9, 1), uint32]) {
  %806 = fn () -> (Tensor[(14, 7, 14), bool], Tensor[(9, 1), uint32]) {
    %790 = @func_548() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
    %791 = %790.1;
    %792 = @func_1169() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %793 = %792.0;
    %794 = cast(%793, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
    %795 = shape_of(%791, dtype="int32") /* ty=Tensor[(3), int32] */;
    %796 = cast(%791, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
    %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %798 = floor_mod(%796, %797) /* ty=Tensor[(14, 7, 14), float32] */;
    %799 = cast(%791, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
    %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
    %801 = cast(%798, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %803 = @func_3377() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64], Tensor[(1372), float32], Tensor[(9, 1), uint32]) */;
    %804 = less_equal(%801, %802) /* ty=Tensor[(14, 7, 14), bool] */;
    %805 = %803.3;
    (%804, %805)
  };
  %806() /* ty=(Tensor[(14, 7, 14), bool], Tensor[(9, 1), uint32]) */
}

def @func_4443() -> (Tensor[(14, 7, 14), float32], Tensor[(2925), float32]) {
  @func_4441() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(2925), float32]) */
}

def @func_4395(%var_4393: Tensor[(120), float32], %var_4394: Tensor[(8), float32]) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32], Tensor[(4, 6, 5), float32], Tensor[(120), float32], uint32, Tensor[(14, 7, 14), float64], Tensor[(15, 13, 5), bool], Tensor[(975), uint16], Tensor[(3, 2, 4), float32], Tensor[(8), float32], Tensor[(24, 1), float32], Tensor[(8), float32]) {
  %838 = fn (%var_4331: Tensor[(120), float32], %var_4369: Tensor[(8), float32]) -> (Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32], Tensor[(4, 6, 5), float32], Tensor[(120), float32], uint32, Tensor[(14, 7, 14), float64], Tensor[(15, 13, 5), bool], Tensor[(975), uint16], Tensor[(3, 2, 4), float32], Tensor[(8), float32], Tensor[(24, 1), float32], Tensor[(8), float32]) {
    %807 = @func_871() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32]) */;
    %808 = @func_4135() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) */;
    %809 = %808.0;
    %810 = cast(%809, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
    %811 = cast(%var_4331, dtype="float32") /* ty=Tensor[(120), float32] */;
    %812 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %813 = reshape(%811, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), float32] */;
    %814 = reshape(%812, newshape=[]) /* ty=uint32 */;
    %815 = @func_3443(%813, %814) /* ty=(Tensor[(4, 6, 5), float32], Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
    %816 = @func_4042() /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64]) */;
    %817 = cast(meta[relay.Constant][40] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
    %818 = cast(meta[relay.Constant][40] /* ty=Tensor[(975), uint16] */, dtype="uint16") /* ty=Tensor[(975), uint16] */;
    %819 = reshape(%817, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
    %820 = reshape(%818, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), uint16] */;
    %821 = @func_349(%819, %820) /* ty=(Tensor[(15, 13, 5), bool], Tensor[(3, 1), bool], uint32) */;
    %822 = cast(%var_4369, dtype="float32") /* ty=Tensor[(8), float32] */;
    %823 = cast(meta[relay.Constant][41] /* ty=Tensor[(24, 1), float32] */, dtype="float32") /* ty=Tensor[(24, 1), float32] */;
    %824 = reshape(%822, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), float32] */;
    %825 = reshape(%823, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), float32] */;
    %826 = %821.0;
    %827 = cast(%826, dtype="uint16") /* ty=Tensor[(15, 13, 5), uint16] */;
    %828 = @func_3013(%824, %825) /* ty=Tensor[(3, 2, 4), float32] */;
    %829 = cast(%828, dtype="float32") /* ty=Tensor[(3, 2, 4), float32] */;
    %830 = reshape(%827, newshape=[65, 15]) /* ty=Tensor[(65, 15), uint16] */;
    %831 = reshape(%829, newshape=[2, 12]) /* ty=Tensor[(2, 12), float32] */;
    %832 = @func_3108(%830, %831) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), float64], uint32, Tensor[(65, 15), uint16], Tensor[(3, 2, 4), float32], Tensor[(8), float32], Tensor[(2, 12), float32]) */;
    %833 = %807.1;
    %834 = atan(%810) /* ty=Tensor[(14, 7, 14), float32] */;
    %835 = %815.0;
    %836 = %816.0;
    %837 = %832.5;
    (%833, %834, %835, %var_4331, meta[relay.Constant][39] /* ty=uint32 */, %836, %826, meta[relay.Constant][40] /* ty=Tensor[(975), uint16] */, %828, %var_4369, meta[relay.Constant][41] /* ty=Tensor[(24, 1), float32] */, %837)
  };
  %838(%var_4393, %var_4394) /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float32], Tensor[(4, 6, 5), float32], Tensor[(120), float32], uint32, Tensor[(14, 7, 14), float64], Tensor[(15, 13, 5), bool], Tensor[(975), uint16], Tensor[(3, 2, 4), float32], Tensor[(8), float32], Tensor[(24, 1), float32], Tensor[(8), float32]) */
}

def @func_6161(%var_6159: Tensor[(3375), float64]) -> (Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32], Tensor[(3375), int64], Tensor[(15, 15, 15), float32], Tensor[(2925), float64], Tensor[(14, 7, 14), float32], Tensor[(15, 15, 15), float32], Tensor[(7, 9, 10), int64], Tensor[(630), float32], uint32, Tensor[(15, 15, 15), bool], Tensor[(7, 9, 10), int64], Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) {
  @func_6158(%var_6159) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float32], Tensor[(3375), int64], Tensor[(15, 15, 15), float32], Tensor[(2925), float64], Tensor[(14, 7, 14), float32], Tensor[(15, 15, 15), float32], Tensor[(7, 9, 10), int64], Tensor[(630), float32], uint32, Tensor[(15, 15, 15), bool], Tensor[(7, 9, 10), int64], Tensor[(14, 7, 14), float64], Tensor[(14, 7, 14), float64]) */
}

def @func_6463() -> (Tensor[(14, 7, 14), float64],) {
  @func_6461() /* ty=(Tensor[(14, 7, 14), float64],) */
}

def @func_3446(%var_3444: Tensor[(4, 6, 5), float32], %var_3445: uint32) -> (Tensor[(4, 6, 5), float32], Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) {
  %847 = fn (%var_3427: Tensor[(4, 6, 5), float32], %var_3438: uint32) -> (Tensor[(4, 6, 5), float32], Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) {
    %839 = cast(%var_3427, dtype="float32") /* ty=Tensor[(4, 6, 5), float32] */;
    %840 = @func_2783() /* ty=(Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64], Tensor[(2925), uint16], uint32, uint32) */;
    %841 = cast(%var_3438, dtype="uint32") /* ty=uint32 */;
    %842 = reshape(%841, newshape=[]) /* ty=uint32 */;
    %843 = @func_799(%842) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool]) */;
    %844 = atan(%839) /* ty=Tensor[(4, 6, 5), float32] */;
    %845 = %840.1;
    %846 = %843.1;
    (%844, %845, %846, %var_3438)
  };
  %847(%var_3444, %var_3445) /* ty=(Tensor[(4, 6, 5), float32], Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */
}

def @func_6891(%var_6887: Tensor[(3, 7, 8), float32], %var_6888: Tensor[(3, 7, 8), float32], %var_6889: Tensor[(450, 6), int64], %var_6890: Tensor[(1, 2925), uint32]) -> (uint32, Tensor[(15, 12, 15), bool], Tensor[(2925), uint32], Tensor[(1, 2925), uint32], Tensor[(14, 7, 14), float64], Tensor[(450, 6), bool], Tensor[(3, 7, 8), int8], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64]) {
  %882 = fn (%var_6803: Tensor[(3, 7, 8), float32], %var_6804: Tensor[(3, 7, 8), float32], %var_6825: Tensor[(450, 6), int64], %var_6833: Tensor[(1, 2925), uint32]) -> (uint32, Tensor[(15, 12, 15), bool], Tensor[(2925), uint32], Tensor[(1, 2925), uint32], Tensor[(14, 7, 14), float64], Tensor[(450, 6), bool], Tensor[(3, 7, 8), int8], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64]) {
    %848 = cast(meta[relay.Constant][42] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %849 = reshape(%848, newshape=[]) /* ty=uint32 */;
    %850 = @func_698(%849) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(3, 1), bool], uint32) */;
    %851 = cast(%var_6825, dtype="int64") /* ty=Tensor[(450, 6), int64] */;
    %852 = cast(%var_6825, dtype="int64") /* ty=Tensor[(450, 6), int64] */;
    %853 = reshape(%851, newshape=[15, 12, 15]) /* ty=Tensor[(15, 12, 15), int64] */;
    %854 = reshape(%852, newshape=[15, 12, 15]) /* ty=Tensor[(15, 12, 15), int64] */;
    %855 = cast(%var_6833, dtype="uint32") /* ty=Tensor[(1, 2925), uint32] */;
    %856 = reshape(%855, newshape=[2925]) /* ty=Tensor[(2925), uint32] */;
    %857 = @func_2430(%856) /* ty=(Tensor[(14, 7, 14), float64], Tensor[(2925), uint32], Tensor[(14, 7, 14), float64], Tensor[(13, 15, 15), float32], Tensor[(13, 15, 15), int64], Tensor[(13, 15, 15), float64]) */;
    %858 = @func_5864() /* ty=(Tensor[(14, 7, 14), float64],) */;
    %859 = cast(%var_6825, dtype="bool") /* ty=Tensor[(450, 6), bool] */;
    %860 = cast(meta[relay.Constant][42] /* ty=uint32 */, dtype="bool") /* ty=bool */;
    %861 = cast(%var_6804, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
    %862 = shape_of(%var_6803, dtype="int32") /* ty=Tensor[(3), int32] */;
    %863 = cast(%var_6803, dtype="bool") /* ty=Tensor[(3, 7, 8), bool] */;
    %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %865 = less(%863, %864) /* ty=Tensor[(3, 7, 8), bool] */;
    %866 = cast(%865, dtype="float64") /* ty=Tensor[(3, 7, 8), float64] */;
    %867 = sin(%866) /* ty=Tensor[(3, 7, 8), float64] */;
    %868 = cast(%var_6803, dtype="int8") /* ty=Tensor[(3, 7, 8), int8] */;
    %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
    %870 = cast(%867, dtype="int8") /* ty=Tensor[(3, 7, 8), int8] */;
    %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %872 = @func_1387() /* ty=(Tensor[(14, 7, 14), float32],) */;
    %873 = @func_5768() /* ty=(Tensor[(14, 7, 14), float64],) */;
    %874 = %850.2;
    %875 = @func_4062(%853, %854) /* ty=Tensor[(15, 12, 15), bool] */;
    %876 = %857.1;
    %877 = %858.0;
    %878 = not_equal(%859, %860) /* ty=Tensor[(450, 6), bool] */;
    %879 = multiply(%870, %871) /* ty=Tensor[(3, 7, 8), int8] */;
    %880 = %872.0;
    %881 = %873.0;
    (%874, %875, %876, %var_6833, %877, %878, %879, %880, %881)
  };
  %882(%var_6887, %var_6888, %var_6889, %var_6890) /* ty=(uint32, Tensor[(15, 12, 15), bool], Tensor[(2925), uint32], Tensor[(1, 2925), uint32], Tensor[(14, 7, 14), float64], Tensor[(450, 6), bool], Tensor[(3, 7, 8), int8], Tensor[(14, 7, 14), float32], Tensor[(14, 7, 14), float64]) */
}

def @func_5866() -> (Tensor[(14, 7, 14), float64],) {
  @func_5864() /* ty=(Tensor[(14, 7, 14), float64],) */
}

def @func_3377() -> (Tensor[(14, 7, 14), float64], Tensor[(2925), float64], Tensor[(1372), float32], Tensor[(9, 1), uint32]) {
  %883 = @func_1169() /* ty=(Tensor[(14, 7, 14), float32],) */;
  %884 = %883.0;
  %885 = cast(%884, dtype="float64") /* ty=Tensor[(14, 7, 14), float64] */;
  %886 = @func_2853() /* ty=(Tensor[(2925), float64],) */;
  %887 = asinh(%885) /* ty=Tensor[(14, 7, 14), float64] */;
  %888 = cast(%887, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %889 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 1), uint32] */, dtype="uint32") /* ty=Tensor[(9, 1), uint32] */;
  %890 = reshape(%888, newshape=[1372]) /* ty=Tensor[(1372), float32] */;
  %891 = reshape(%889, newshape=[1, 9, 1]) /* ty=Tensor[(1, 9, 1), uint32] */;
  %892 = @func_2593(%890, %891) /* ty=(Tensor[(8, 2), float64], uint32, Tensor[(1372), float32], Tensor[(1, 9, 1), uint16]) */;
  %893 = %886.0;
  %894 = %892.2;
  (%887, %893, %894, meta[relay.Constant][43] /* ty=Tensor[(9, 1), uint32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen175/build/output.py:2378: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen175/build/output.py", line 2383, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(420) tvmgen_default_fused_cast_cast_reshape_floor_mod_kernel0(float* __restrict__ T_floor_mod, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_floor_mod[(((int)threadIdx.x))] = (((float)placeholder[(((int)threadIdx.x))]) - (floorf((((float)placeholder[(((int)threadIdx.x))]) / ((float)placeholder1[(((int)threadIdx.x))]))) * ((float)placeholder1[(((int)threadIdx.x))])));
}

extern "C" __global__ void __launch_bounds__(420) tvmgen_default_fused_cast_cast_reshape_less_equal_kernel0(signed char* __restrict__ T_less_equal, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_less_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) <= ((bool)placeholder1[(((int)threadIdx.x))])));
}

extern "C" __global__ void __launch_bounds__(420) tvmgen_default_fused_cast_tan_asin_kernel0(double* __restrict__ T_asin, signed char* __restrict__ placeholder) {
  T_asin[(((int)threadIdx.x))] = asin(tan(((double)placeholder[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

