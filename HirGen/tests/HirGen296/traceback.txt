==========mod==========
#[version = "0.0.5"]
def @func_4146() -> Tensor[(5, 11, 4), float64] {
  %0 = @func_1398() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64]) */;
  %0.1
}

def @func_1344() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %1 = @func_412() /* ty=Tensor[(5, 11, 4), float32] */;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %3 = reshape(%2, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %4 = @func_791(%3) /* ty=Tensor[(5, 11, 4), float32] */;
  (%1, %4)
}

def @func_1368() -> (Tensor[(12, 7, 14), float32],) {
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
  %6 = rsqrt(%5) /* ty=Tensor[(12, 7, 14), float32] */;
  (%6,)
}

def @func_6354() -> (Tensor[(5, 11, 4), int32],) {
  %7 = @func_3508() /* ty=(Tensor[(5, 11, 4), float32], float32, Tensor[(98), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 7, 1), float64]) */;
  %8 = %7.3;
  %9 = @func_2936() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %10 = %9.0;
  %11 = cast(%10, dtype="int32") /* ty=Tensor[(5, 11, 4), int32] */;
  %12 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%8, dtype="int32") /* ty=Tensor[(5, 11, 4), int32] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %15 = maximum(%13, %14) /* ty=Tensor[(5, 11, 4), int32] */;
  (%15,)
}

def @func_4434() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], int32, Tensor[(2145), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %16 = @func_1344() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %17 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %19 = reshape(%17, newshape=[]) /* ty=int32 */;
  %20 = reshape(%18, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %21 = @func_2728(%19, %20) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(1, 6, 8), int32], Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(2145), float32], Tensor[(11, 11, 7), uint16], Tensor[(847), uint16], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float64], Tensor[(11, 13, 15), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %22 = @func_1846() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %23 = %16.0;
  %24 = %21.1;
  %25 = @func_3993() /* ty=Tensor[(5, 11, 4), float64] */;
  %26 = %22.0;
  %27 = @func_1072() /* ty=Tensor[(5, 11, 4), float32] */;
  (%23, %24, 4 /* ty=int32 */, meta[relay.Constant][1] /* ty=Tensor[(2145), float32] */, %25, %26, %27)
}

def @main(%var_9810: Tensor[(16, 8, 11), int8], %var_9811: Tensor[(16, 8, 11), int8]) -> (Tensor[(16, 8, 11), int8],) {
  %28 = cast(%var_9811, dtype="int8") /* ty=Tensor[(16, 8, 11), int8] */;
  %29 = shape_of(%var_9810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_9810, dtype="int8") /* ty=Tensor[(16, 8, 11), int8] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %32 = minimum(%30, %31) /* ty=Tensor[(16, 8, 11), int8] */;
  (%32,)
}

def @func_9254() -> Tensor[(5, 11, 4), float32] {
  %33 = @func_2412() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %33.0
}

def @func_5888() -> Tensor[(5, 11, 4), float32] {
  @func_2294() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_3128() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %34 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %35 = @func_1883() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %36 = %34.0;
  %37 = %35.1;
  %38 = @func_1425() /* ty=Tensor[(5, 11, 4), float32] */;
  (%36, %37, %38)
}

def @func_6678(%var_6672: Tensor[(7, 4, 7), float64]) -> Tensor[(7, 4, 7), int32] {
  %39 = @func_3537() /* ty=(Tensor[(7, 4, 7), float64],) */;
  %40 = %39.0;
  %41 = cast(%var_6672, dtype="int32") /* ty=Tensor[(7, 4, 7), int32] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="int32") /* ty=Tensor[(7, 4, 7), int32] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%43, %44) /* ty=Tensor[(7, 4, 7), int32] */
}

def @func_7297() -> (Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16]) {
  %45 = @func_5667() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %46 = @func_4458() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145, 1), float32]) */;
  %47 = %45.0;
  %48 = %46.1;
  (%47, %48)
}

def @func_8085(%var_8067: Tensor[(12, 11, 8), float64], %var_8068: Tensor[(12, 11, 8), float64]) -> (Tensor[(12, 11, 8), float64], Tensor[(5, 11, 4), float32]) {
  %49 = cast(%var_8068, dtype="float64") /* ty=Tensor[(12, 11, 8), float64] */;
  %50 = shape_of(%var_8067, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%var_8067, dtype="float64") /* ty=Tensor[(12, 11, 8), float64] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %53 = divide(%51, %52) /* ty=Tensor[(12, 11, 8), float64] */;
  %54 = @func_7098() /* ty=Tensor[(5, 11, 4), float32] */;
  (%53, %54)
}

def @func_4091() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 13, 15), float64]) {
  %55 = @func_3653() /* ty=Tensor[(5, 11, 4), float32] */;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %57 = @func_3745() /* ty=(Tensor[(5, 13, 15), float64],) */;
  %58 = sinh(%56) /* ty=Tensor[(5, 11, 4), float64] */;
  %59 = %57.0;
  (%58, %59)
}

def @func_9412() -> Tensor[(5, 11, 4), float32] {
  %60 = @func_1883() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %60.0
}

def @func_1043() -> (Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) {
  %61 = @func_859() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %63 = cast(meta[relay.Constant][2] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %64 = reshape(%62, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
  %65 = reshape(%63, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
  %66 = %61.0;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %68 = cast(%66, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %69 = reshape(%67, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float32] */;
  %70 = reshape(%68, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), bool] */;
  %71 = @func_573(%69, %70) /* ty=(Tensor[(5, 11, 4), float64],) */;
  %72 = @func_884(%64, %65) /* ty=Tensor[(7, 4, 7), float64] */;
  %73 = %71.0;
  (%66, %72, meta[relay.Constant][2] /* ty=Tensor[(196), float64] */, %73)
}

def @func_8755() -> Tensor[(5, 11, 4), float32] {
  %74 = @func_8030() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %74.0
}

def @func_1398() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64]) {
  %75 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %76 = %75.0;
  %77 = cast(%76, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %78 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  %79 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
  %80 = cos(%77) /* ty=Tensor[(5, 11, 4), float64] */;
  (%78, %79, %80)
}

def @func_5845() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(7, 8, 7), bool], Tensor[(392), float32]) {
  %81 = @func_4146() /* ty=Tensor[(5, 11, 4), float64] */;
  %82 = cast(%81, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %83 = cast(meta[relay.Constant][3] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %84 = reshape(%83, newshape=[7, 8, 7]) /* ty=Tensor[(7, 8, 7), float32] */;
  %85 = @func_1587(%84) /* ty=(Tensor[(7, 8, 7), bool],) */;
  %86 = @func_1955() /* ty=Tensor[(5, 11, 4), float64] */;
  %87 = acos(%82) /* ty=Tensor[(5, 11, 4), float32] */;
  %88 = %85.0;
  (%86, %87, %88, meta[relay.Constant][3] /* ty=Tensor[(392), float32] */)
}

def @func_4025(%var_4009: Tensor[(5, 11, 4), float32]) -> (Tensor[(5, 11, 4), int16],) {
  %89 = @func_2832() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %90 = %89.1;
  %91 = cast(%var_4009, dtype="int16") /* ty=Tensor[(5, 11, 4), int16] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%90, dtype="int16") /* ty=Tensor[(5, 11, 4), int16] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %95 = bitwise_xor(%93, %94) /* ty=Tensor[(5, 11, 4), int16] */;
  (%95,)
}

def @func_9066(%var_9037: Tensor[(14, 2, 13), int16]) -> (Tensor[(14, 2, 13), bool], Tensor[(14, 2, 13), float32]) {
  %96 = cast(%var_9037, dtype="bool") /* ty=Tensor[(14, 2, 13), bool] */;
  %97 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(14, 2, 13), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 2, 13), int16] */, dtype="bool") /* ty=Tensor[(14, 2, 13), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %100 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 2, 13), int16] */, dtype="float32") /* ty=Tensor[(14, 2, 13), float32] */;
  %101 = equal(%98, %99) /* ty=Tensor[(14, 2, 13), bool] */;
  %102 = cosh(%100) /* ty=Tensor[(14, 2, 13), float32] */;
  (%101, %102)
}

def @func_1846() -> (Tensor[(5, 11, 4), float32],) {
  %103 = @func_1091() /* ty=Tensor[(5, 11, 4), float32] */;
  (%103,)
}

def @func_1255(%var_1242: int32, %var_1243: Tensor[(48), int32]) -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(1, 6, 8), int32], int32, Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %104 = @func_1043() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) */;
  %105 = cast(%var_1242, dtype="int32") /* ty=int32 */;
  %106 = cast(%var_1243, dtype="int32") /* ty=Tensor[(48), int32] */;
  %107 = reshape(%105, newshape=[]) /* ty=int32 */;
  %108 = reshape(%106, newshape=[1, 6, 8]) /* ty=Tensor[(1, 6, 8), int32] */;
  %109 = @func_182(%107, %108) /* ty=(Tensor[(1, 6, 8), int32],) */;
  %110 = @func_1091() /* ty=Tensor[(5, 11, 4), float32] */;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %112 = asin(%111) /* ty=Tensor[(5, 11, 4), float64] */;
  %113 = cast(%112, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %114 = @func_1072() /* ty=Tensor[(5, 11, 4), float32] */;
  %115 = %104.0;
  %116 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
  %117 = %109.0;
  %118 = @func_1072() /* ty=Tensor[(5, 11, 4), float32] */;
  %119 = tan(%113) /* ty=Tensor[(5, 11, 4), float32] */;
  (%114, %115, %116, %117, %var_1242, %var_1243, %118, %119)
}

def @func_8533() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %120 = @func_2936() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %121 = @func_3653() /* ty=Tensor[(5, 11, 4), float32] */;
  %122 = %120.0;
  (%121, %122)
}

def @func_9796(%var_9784: Tensor[(98, 2), float64]) -> (Tensor[(5, 11, 4), float32], Tensor[(8, 9, 16), bool], Tensor[(1, 1152), float32], Tensor[(98, 2), float64], Tensor[(7, 4, 7), float64]) {
  %123 = @func_2310() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %124 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 1152), float32] */, dtype="float32") /* ty=Tensor[(1, 1152), float32] */;
  %125 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 1152), float32] */, dtype="float32") /* ty=Tensor[(1, 1152), float32] */;
  %126 = cast(%var_9784, dtype="float64") /* ty=Tensor[(98, 2), float64] */;
  %127 = reshape(%124, newshape=[8, 9, 16]) /* ty=Tensor[(8, 9, 16), float32] */;
  %128 = reshape(%125, newshape=[8, 9, 16]) /* ty=Tensor[(8, 9, 16), float32] */;
  %129 = reshape(%126, newshape=[196]) /* ty=Tensor[(196), float64] */;
  %130 = @func_4703(%127, %128, %129) /* ty=(Tensor[(8, 9, 16), bool], Tensor[(5, 11, 4), float32], Tensor[(220), float64], Tensor[(624), float64], Tensor[(196), float64]) */;
  %131 = %123.0;
  %132 = %130.0;
  %133 = @func_5718() /* ty=Tensor[(7, 4, 7), float64] */;
  (%131, %132, meta[relay.Constant][5] /* ty=Tensor[(1, 1152), float32] */, %var_9784, %133)
}

def @func_1824(%var_1813: Tensor[(11, 11, 7), uint16], %var_1814: Tensor[(11, 11, 7), uint16]) -> (Tensor[(11, 11, 7), uint16], Tensor[(12, 7, 14), float32]) {
  %134 = cast(%var_1814, dtype="uint16") /* ty=Tensor[(11, 11, 7), uint16] */;
  %135 = shape_of(%var_1813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%var_1813, dtype="uint16") /* ty=Tensor[(11, 11, 7), uint16] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %138 = @func_1368() /* ty=(Tensor[(12, 7, 14), float32],) */;
  %139 = maximum(%136, %137) /* ty=Tensor[(11, 11, 7), uint16] */;
  %140 = %138.0;
  (%139, %140)
}

def @func_5239(%var_5193: Tensor[(16, 12, 1), int16], %var_5194: Tensor[(16, 12, 8), int16], %var_5224: Tensor[(16, 12, 3), int16]) -> (Tensor[(16, 12, 8), int16], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 3), bool]) {
  %141 = cast(%var_5193, dtype="int16") /* ty=Tensor[(16, 12, 1), int16] */;
  %142 = cast(%var_5194, dtype="int16") /* ty=Tensor[(16, 12, 8), int16] */;
  %143 = cast(%var_5194, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
  %144 = cast(%var_5193, dtype="float32") /* ty=Tensor[(16, 12, 1), float32] */;
  %145 = cast(%var_5193, dtype="bool") /* ty=Tensor[(16, 12, 1), bool] */;
  %146 = cast(%var_5224, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
  %147 = left_shift(%141, %142) /* ty=Tensor[(16, 12, 8), int16] */;
  %148 = add(%143, %144) /* ty=Tensor[(16, 12, 8), float32] */;
  %149 = equal(%145, %146) /* ty=Tensor[(16, 12, 3), bool] */;
  (%147, %148, %149)
}

def @func_5462() -> Tensor[(5, 11, 4), float32] {
  %150 = @func_1883() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %150.1
}

def @func_3296(%var_3271: Tensor[(1, 6, 14), float32]) -> (Tensor[(1, 6, 14), float32],) {
  %151 = cast(%var_3271, dtype="float32") /* ty=Tensor[(1, 6, 14), float32] */;
  %152 = cos(%151) /* ty=Tensor[(1, 6, 14), float32] */;
  (%152,)
}

def @func_4888(%var_4881: Tensor[(5, 11, 4), float32]) -> Tensor[(5, 11, 4), uint8] {
  %153 = @func_3340() /* ty=Tensor[(5, 11, 4), float32] */;
  %154 = cast(%var_4881, dtype="uint8") /* ty=Tensor[(5, 11, 4), uint8] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="uint8") /* ty=Tensor[(5, 11, 4), uint8] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%156, %157) /* ty=Tensor[(5, 11, 4), uint8] */
}

def @func_8904() -> Tensor[(5, 11, 4), float32] {
  @func_8755() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_7191() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(13, 3, 8), bool], Tensor[(312), int32]) {
  %158 = @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */;
  %159 = cast(meta[relay.Constant][6] /* ty=Tensor[(312), int32] */, dtype="int32") /* ty=Tensor[(312), int32] */;
  %160 = reshape(%159, newshape=[13, 3, 8]) /* ty=Tensor[(13, 3, 8), int32] */;
  %161 = @func_5770(%160) /* ty=(Tensor[(13, 3, 8), bool], Tensor[(13, 3, 8), bool], Tensor[(5, 11, 4), float32]) */;
  %162 = %158.0;
  %163 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
  %164 = %161.1;
  (%162, %163, %164, meta[relay.Constant][6] /* ty=Tensor[(312), int32] */)
}

def @func_8160() -> (Tensor[(5, 10), float64], Tensor[(5, 11, 4), int32], Tensor[(5, 11, 4), float32]) {
  %165 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 10), float64] */;
  %166 = @func_7383() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), int32], Tensor[(5, 13, 15), float64]) */;
  %167 = @func_8030() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %168 = asin(%165) /* ty=Tensor[(5, 10), float64] */;
  %169 = %166.2;
  %170 = %167.0;
  (%168, %169, %170)
}

def @func_2197() -> (Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145), float32], Tensor[(11, 11, 7), bool], Tensor[(5, 11, 4), float32]) {
  %171 = @func_1719() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %172 = cast(meta[relay.Constant][8] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %173 = cast(meta[relay.Constant][8] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %174 = reshape(%172, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float32] */;
  %175 = reshape(%173, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float32] */;
  %176 = @func_1001(%174, %175) /* ty=(Tensor[(11, 13, 15), int16],) */;
  %177 = cast(meta[relay.Constant][9] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %178 = cast(meta[relay.Constant][9] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %179 = reshape(%177, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), uint16] */;
  %180 = reshape(%178, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), uint16] */;
  %181 = @func_1824(%179, %180) /* ty=(Tensor[(11, 11, 7), uint16], Tensor[(12, 7, 14), float32]) */;
  %182 = %181.0;
  %183 = cast(meta[relay.Constant][9] /* ty=Tensor[(847), uint16] */, dtype="bool") /* ty=Tensor[(847), bool] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%182, dtype="bool") /* ty=Tensor[(11, 11, 7), bool] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %187 = %171.1;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %189 = reshape(%188, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %190 = @func_941(%189) /* ty=(Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32]) */;
  %191 = %176.0;
  %192 = less_equal(%185, %186) /* ty=Tensor[(11, 11, 7), bool] */;
  %193 = %190.1;
  (%187, %191, meta[relay.Constant][8] /* ty=Tensor[(2145), float32] */, %192, %193)
}

def @func_5732() -> Tensor[(5, 11, 4), float64] {
  @func_4146() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_3508() -> (Tensor[(5, 11, 4), float32], float32, Tensor[(98), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 7, 1), float64]) {
  %194 = @func_1398() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64]) */;
  %195 = @func_3008() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %196 = cast(1.59581f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %197 = cast(meta[relay.Constant][10] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %198 = reshape(%196, newshape=[]) /* ty=float32 */;
  %199 = reshape(%197, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), float32] */;
  %200 = @func_629(%198, %199) /* ty=(Tensor[(14, 7, 1), float32],) */;
  %201 = %200.0;
  %202 = cast(%201, dtype="float64") /* ty=Tensor[(14, 7, 1), float64] */;
  %203 = %194.0;
  %204 = @func_3340() /* ty=Tensor[(5, 11, 4), float32] */;
  %205 = %195.0;
  %206 = acosh(%202) /* ty=Tensor[(14, 7, 1), float64] */;
  (%203, 1.59581f /* ty=float32 */, meta[relay.Constant][10] /* ty=Tensor[(98), float32] */, %204, %205, %206)
}

def @func_6986() -> (Tensor[(12, 7, 14), float32],) {
  %207 = @func_3846() /* ty=Tensor[(12, 7, 14), uint8] */;
  %208 = cast(%207, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
  %209 = cos(%208) /* ty=Tensor[(12, 7, 14), float32] */;
  %210 = cast(%207, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %214 = minimum(%212, %213) /* ty=Tensor[(12, 7, 14), float32] */;
  (%214,)
}

def @func_3850() -> Tensor[(5, 11, 4), float32] {
  %215 = @func_2197() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145), float32], Tensor[(11, 11, 7), bool], Tensor[(5, 11, 4), float32]) */;
  %215.0
}

def @func_397() -> Tensor[(5, 11, 4), float64] {
  %216 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  %217 = cast(%216, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %218 = atan(%217) /* ty=Tensor[(5, 11, 4), float64] */;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  log(%219) /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_684() -> (Tensor[(5, 11, 4), float32],) {
  %220 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  (%220,)
}

def @func_3537() -> (Tensor[(7, 4, 7), float64],) {
  %221 = @func_1794() /* ty=Tensor[(7, 4, 7), float64] */;
  (%221,)
}

def @func_1587(%var_1582: Tensor[(7, 8, 7), float32]) -> (Tensor[(7, 8, 7), bool],) {
  %222 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 8, 7), float32] */, dtype="bool") /* ty=Tensor[(7, 8, 7), bool] */;
  %223 = shape_of(%var_1582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_1582, dtype="bool") /* ty=Tensor[(7, 8, 7), bool] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %226 = equal(%224, %225) /* ty=Tensor[(7, 8, 7), bool] */;
  (%226,)
}

def @func_3653() -> Tensor[(5, 11, 4), float32] {
  %227 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %227.0
}

def @func_6222() -> Tensor[(5, 11, 4), float64] {
  %228 = @func_3073() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %228.0
}

def @func_941(%var_925: Tensor[(5, 11, 4), float64]) -> (Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32]) {
  %229 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
  %230 = cast(%var_925, dtype="uint8") /* ty=Tensor[(5, 11, 4), uint8] */;
  %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%229, dtype="uint8") /* ty=Tensor[(5, 11, 4), uint8] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %234 = bitwise_and(%232, %233) /* ty=Tensor[(5, 11, 4), uint8] */;
  %235 = @func_412() /* ty=Tensor[(5, 11, 4), float32] */;
  (%234, %235)
}

def @func_6585(%var_6573: int32) -> (Tensor[(5, 11, 4), float32], int32, Tensor[(48), int32], Tensor[(1, 6, 8), float32]) {
  %236 = @func_4208() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %237 = cast(%var_6573, dtype="int32") /* ty=int32 */;
  %238 = cast(meta[relay.Constant][12] /* ty=Tensor[(48), int32] */, dtype="int32") /* ty=Tensor[(48), int32] */;
  %239 = reshape(%237, newshape=[]) /* ty=int32 */;
  %240 = reshape(%238, newshape=[1, 6, 8]) /* ty=Tensor[(1, 6, 8), int32] */;
  %241 = @func_182(%239, %240) /* ty=(Tensor[(1, 6, 8), int32],) */;
  %242 = %241.0;
  %243 = cast(%242, dtype="float32") /* ty=Tensor[(1, 6, 8), float32] */;
  %244 = %236.0;
  %245 = log10(%243) /* ty=Tensor[(1, 6, 8), float32] */;
  (%244, %var_6573, meta[relay.Constant][12] /* ty=Tensor[(48), int32] */, %245)
}

def @func_2728(%var_2643: int32, %var_2663: Tensor[(2145), float32]) -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(1, 6, 8), int32], Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(2145), float32], Tensor[(11, 11, 7), uint16], Tensor[(847), uint16], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float64], Tensor[(11, 13, 15), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %246 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %247 = @func_2310() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %248 = cast(%var_2643, dtype="int32") /* ty=int32 */;
  %249 = cast(meta[relay.Constant][13] /* ty=Tensor[(48), int32] */, dtype="int32") /* ty=Tensor[(48), int32] */;
  %250 = reshape(%248, newshape=[]) /* ty=int32 */;
  %251 = reshape(%249, newshape=[1, 6, 8]) /* ty=Tensor[(1, 6, 8), int32] */;
  %252 = @func_182(%250, %251) /* ty=(Tensor[(1, 6, 8), int32],) */;
  %253 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %254 = cast(meta[relay.Constant][14] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %255 = cast(meta[relay.Constant][14] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %256 = reshape(%254, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), uint16] */;
  %257 = reshape(%255, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), uint16] */;
  %258 = @func_1824(%256, %257) /* ty=(Tensor[(11, 11, 7), uint16], Tensor[(12, 7, 14), float32]) */;
  %259 = @func_480() /* ty=Tensor[(5, 11, 4), float32] */;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %261 = cast(%var_2643, dtype="float64") /* ty=float64 */;
  %262 = cast(%var_2663, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %263 = cast(%var_2663, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %264 = reshape(%262, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float32] */;
  %265 = reshape(%263, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float32] */;
  %266 = @func_1001(%264, %265) /* ty=(Tensor[(11, 13, 15), int16],) */;
  %267 = %266.0;
  %268 = cast(%267, dtype="float64") /* ty=Tensor[(11, 13, 15), float64] */;
  %269 = @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */;
  %270 = @func_1846() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %271 = %246.0;
  %272 = %247.0;
  %273 = %252.0;
  %274 = %253.0;
  %275 = %258.0;
  %276 = @func_1794() /* ty=Tensor[(7, 4, 7), float64] */;
  %277 = add(%260, %261) /* ty=Tensor[(5, 11, 4), float64] */;
  %278 = atanh(%268) /* ty=Tensor[(11, 13, 15), float64] */;
  %279 = %269.0;
  %280 = %270.0;
  (%271, %272, %273, meta[relay.Constant][13] /* ty=Tensor[(48), int32] */, %274, %var_2663, %275, meta[relay.Constant][14] /* ty=Tensor[(847), uint16] */, %276, %277, %278, %279, %280)
}

def @func_7869() -> Tensor[(5, 11, 4), float64] {
  %281 = @func_3698() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %281.1
}

def @func_5442() -> Tensor[(5, 11, 4), float32] {
  @func_3850() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_1758() -> Tensor[(5, 11, 4), bool] {
  %282 = @func_412() /* ty=Tensor[(5, 11, 4), float32] */;
  %283 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 11, 4), float32] */, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%282, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%285, %286) /* ty=Tensor[(5, 11, 4), bool] */
}

def @func_1925() -> (Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) {
  %287 = @func_1398() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64]) */;
  %288 = @func_1368() /* ty=(Tensor[(12, 7, 14), float32],) */;
  %289 = %288.0;
  %290 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 7, 14), float32] */, dtype="uint8") /* ty=Tensor[(12, 7, 14), uint8] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="uint8") /* ty=Tensor[(12, 7, 14), uint8] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %294 = %287.0;
  %295 = maximum(%292, %293) /* ty=Tensor[(12, 7, 14), uint8] */;
  (%294, %295)
}

def @func_6759() -> Tensor[(5, 11, 4), float64] {
  %296 = @func_2900() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %296.1
}

def @func_9466() -> (Tensor[(7, 4, 7), float64],) {
  %297 = @func_3537() /* ty=(Tensor[(7, 4, 7), float64],) */;
  %298 = %297.0;
  (%298,)
}

def @func_3897() -> (Tensor[(7, 4, 7), float64],) {
  %299 = @func_3537() /* ty=(Tensor[(7, 4, 7), float64],) */;
  %300 = %299.0;
  (%300,)
}

def @func_5945(%var_5904: Tensor[(5, 15, 13), int8], %var_5912: Tensor[(5, 15, 13), int8]) -> (Tensor[(5, 15, 13), bool], Tensor[(5, 15, 13), int32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %301 = cast(%var_5904, dtype="bool") /* ty=Tensor[(5, 15, 13), bool] */;
  %302 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(5, 15, 13), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 15, 13), int8] */, dtype="bool") /* ty=Tensor[(5, 15, 13), bool] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %305 = cast(%var_5912, dtype="int32") /* ty=Tensor[(5, 15, 13), int32] */;
  %306 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(5, 15, 13), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 15, 13), int8] */, dtype="int32") /* ty=Tensor[(5, 15, 13), int32] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %309 = @func_2412() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %310 = less_equal(%303, %304) /* ty=Tensor[(5, 15, 13), bool] */;
  %311 = bitwise_and(%307, %308) /* ty=Tensor[(5, 15, 13), int32] */;
  %312 = %309.0;
  %313 = @func_5442() /* ty=Tensor[(5, 11, 4), float32] */;
  (%310, %311, %312, %313)
}

def @func_9342() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %314 = @func_3698() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %315 = @func_5693() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %316 = %314.0;
  %317 = @func_7773() /* ty=Tensor[(5, 11, 4), float32] */;
  %318 = %315.0;
  (%316, %317, %318)
}

def @func_5667() -> (Tensor[(5, 11, 4), float32],) {
  %319 = @func_480() /* ty=Tensor[(5, 11, 4), float32] */;
  (%319,)
}

def @func_4616(%var_4605: Tensor[(13, 11, 5), int64]) -> (Tensor[(13, 11, 5), bool],) {
  %320 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 11, 5), int64] */, dtype="bool") /* ty=Tensor[(13, 11, 5), bool] */;
  %321 = shape_of(%var_4605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_4605, dtype="bool") /* ty=Tensor[(13, 11, 5), bool] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %324 = greater_equal(%322, %323) /* ty=Tensor[(13, 11, 5), bool] */;
  (%324,)
}

def @func_8309() -> (Tensor[(12, 16, 15), float32], Tensor[(12, 16, 15), float32]) {
  %325 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 15), float32] */;
  %326 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 15), float32] */;
  %327 = sin(%325) /* ty=Tensor[(12, 16, 15), float32] */;
  %328 = sqrt(%326) /* ty=Tensor[(12, 16, 15), float32] */;
  (%327, %328)
}

def @func_5094() -> (Tensor[(12, 7, 14), float64],) {
  %329 = @func_1368() /* ty=(Tensor[(12, 7, 14), float32],) */;
  %330 = %329.0;
  %331 = cast(%330, dtype="float64") /* ty=Tensor[(12, 7, 14), float64] */;
  %332 = acosh(%331) /* ty=Tensor[(12, 7, 14), float64] */;
  (%332,)
}

def @func_3073() -> (Tensor[(5, 11, 4), float64],) {
  %333 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
  (%333,)
}

def @func_7142(%var_7129: Tensor[(98), float32]) -> (float32, Tensor[(14, 7, 1), float32], Tensor[(98), float32]) {
  %334 = @func_3508() /* ty=(Tensor[(5, 11, 4), float32], float32, Tensor[(98), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 7, 1), float64]) */;
  %335 = %334.1;
  %336 = cast(%335, dtype="float32") /* ty=float32 */;
  %337 = cast(%var_7129, dtype="float32") /* ty=Tensor[(98), float32] */;
  %338 = reshape(%336, newshape=[]) /* ty=float32 */;
  %339 = reshape(%337, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), float32] */;
  %340 = @func_629(%338, %339) /* ty=(Tensor[(14, 7, 1), float32],) */;
  %341 = %340.0;
  (%335, %341, %var_7129)
}

def @func_4458() -> (Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145, 1), float32]) {
  %342 = cast(meta[relay.Constant][20] /* ty=Tensor[(2145, 1), float32] */, dtype="float32") /* ty=Tensor[(2145, 1), float32] */;
  %343 = cast(meta[relay.Constant][20] /* ty=Tensor[(2145, 1), float32] */, dtype="float32") /* ty=Tensor[(2145, 1), float32] */;
  %344 = reshape(%342, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float32] */;
  %345 = reshape(%343, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float32] */;
  %346 = @func_1001(%344, %345) /* ty=(Tensor[(11, 13, 15), int16],) */;
  %347 = @func_2294() /* ty=Tensor[(5, 11, 4), float32] */;
  %348 = %346.0;
  (%347, %348, meta[relay.Constant][20] /* ty=Tensor[(2145, 1), float32] */)
}

def @func_2936() -> (Tensor[(5, 11, 4), float64],) {
  %349 = @func_1043() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) */;
  %350 = %349.3;
  (%350,)
}

def @func_8737() -> Tensor[(7, 4, 7), float64] {
  %351 = @func_3897() /* ty=(Tensor[(7, 4, 7), float64],) */;
  %351.0
}

def @func_7581() -> Tensor[(12, 7, 14), uint8] {
  @func_3846() /* ty=Tensor[(12, 7, 14), uint8] */
}

def @func_5693() -> (Tensor[(5, 11, 4), float32],) {
  %352 = @func_4208() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %353 = %352.0;
  (%353,)
}

def @func_1072() -> Tensor[(5, 11, 4), float32] {
  %354 = @func_412() /* ty=Tensor[(5, 11, 4), float32] */;
  %355 = cast(%354, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %356 = reshape(%355, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %357 = @func_941(%356) /* ty=(Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32]) */;
  %358 = %357.0;
  %359 = cast(%354, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%361, %362) /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_5171(%var_5129: Tensor[(7, 4, 7), float64], %var_5155: int32, %var_5156: Tensor[(48), int32]) -> (Tensor[(7, 4, 7), uint64], Tensor[(5, 11, 4), bool], Tensor[(48), int32], int32, Tensor[(48), int32]) {
  %363 = @func_1794() /* ty=Tensor[(7, 4, 7), float64] */;
  %364 = cast(%var_5129, dtype="uint64") /* ty=Tensor[(7, 4, 7), uint64] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%363, dtype="uint64") /* ty=Tensor[(7, 4, 7), uint64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %368 = cast(%var_5155, dtype="int32") /* ty=int32 */;
  %369 = cast(%var_5156, dtype="int32") /* ty=Tensor[(48), int32] */;
  %370 = reshape(%368, newshape=[]) /* ty=int32 */;
  %371 = reshape(%369, newshape=[48]) /* ty=Tensor[(48), int32] */;
  %372 = @func_1255(%370, %371) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(1, 6, 8), int32], int32, Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %373 = subtract(%366, %367) /* ty=Tensor[(7, 4, 7), uint64] */;
  %374 = @func_1758() /* ty=Tensor[(5, 11, 4), bool] */;
  %375 = %372.5;
  (%373, %374, %375, %var_5155, %var_5156)
}

def @func_480() -> Tensor[(5, 11, 4), float32] {
  %376 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
  %377 = cast(%376, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  atanh(%377) /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_2294() -> Tensor[(5, 11, 4), float32] {
  %378 = @func_1883() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %378.1
}

def @func_9523() -> (Tensor[(196), float64],) {
  %379 = @func_8659() /* ty=(Tensor[(196), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %380 = %379.0;
  (%380,)
}

def @func_3619(%var_3607: Tensor[(1, 15, 10), float64]) -> (Tensor[(1, 15, 10), float64],) {
  %381 = cast(%var_3607, dtype="float64") /* ty=Tensor[(1, 15, 10), float64] */;
  %382 = tan(%381) /* ty=Tensor[(1, 15, 10), float64] */;
  (%382,)
}

def @func_7098() -> Tensor[(5, 11, 4), float32] {
  @func_1072() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_8886(%var_8846: Tensor[(10, 8, 14), uint8], %var_8847: Tensor[(10, 8, 14), uint8]) -> (Tensor[(10, 8, 14), bool], Tensor[(5, 11, 4), float64], Tensor[(10, 8, 14), bool]) {
  %383 = cast(%var_8847, dtype="bool") /* ty=Tensor[(10, 8, 14), bool] */;
  %384 = shape_of(%var_8846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%var_8846, dtype="bool") /* ty=Tensor[(10, 8, 14), bool] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %387 = @func_7191() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(13, 3, 8), bool], Tensor[(312), int32]) */;
  %388 = cast(%var_8847, dtype="bool") /* ty=Tensor[(10, 8, 14), bool] */;
  %389 = shape_of(%var_8846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%var_8846, dtype="bool") /* ty=Tensor[(10, 8, 14), bool] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %392 = less(%385, %386) /* ty=Tensor[(10, 8, 14), bool] */;
  %393 = %387.1;
  %394 = greater(%390, %391) /* ty=Tensor[(10, 8, 14), bool] */;
  (%392, %393, %394)
}

def @func_8472() -> Tensor[(5, 11, 4), float32] {
  @func_361() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_9477() -> Tensor[(11, 11, 7), bool] {
  %395 = @func_2197() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145), float32], Tensor[(11, 11, 7), bool], Tensor[(5, 11, 4), float32]) */;
  %395.3
}

def @func_1794() -> Tensor[(7, 4, 7), float64] {
  %396 = @func_1043() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) */;
  %396.1
}

def @func_7414() -> (Tensor[(12, 7, 14), uint8],) {
  %397 = @func_3846() /* ty=Tensor[(12, 7, 14), uint8] */;
  (%397,)
}

def @func_3340() -> Tensor[(5, 11, 4), float32] {
  @func_1072() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_4755() -> Tensor[(5, 13, 15), float64] {
  %398 = @func_3745() /* ty=(Tensor[(5, 13, 15), float64],) */;
  %398.0
}

def @func_9185() -> (Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float64]) {
  %399 = @func_6429() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %400 = @func_7837() /* ty=(Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float32]) */;
  %401 = @func_3073() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %402 = %399.0;
  %403 = %400.0;
  %404 = %401.0;
  (%402, %403, %404)
}

def @func_1425() -> Tensor[(5, 11, 4), float32] {
  @func_412() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_7725() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64]) {
  %405 = @func_7098() /* ty=Tensor[(5, 11, 4), float32] */;
  %406 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %408 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%405, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %411 = @func_5693() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %412 = @func_1344() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %413 = cast(meta[relay.Constant][21] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %414 = cast(meta[relay.Constant][21] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %415 = reshape(%413, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
  %416 = reshape(%414, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
  %417 = mod(%409, %410) /* ty=Tensor[(5, 11, 4), float64] */;
  %418 = %411.0;
  %419 = %412.1;
  %420 = @func_884(%415, %416) /* ty=Tensor[(7, 4, 7), float64] */;
  (%417, %418, %419, %420, meta[relay.Constant][21] /* ty=Tensor[(196), float64] */)
}

def @func_4586(%var_4569: Tensor[(1, 2, 14), int8], %var_4570: Tensor[(15, 2, 14), int8]) -> Tensor[(15, 2, 14), int8] {
  %421 = cast(%var_4569, dtype="int8") /* ty=Tensor[(1, 2, 14), int8] */;
  %422 = cast(%var_4570, dtype="int8") /* ty=Tensor[(15, 2, 14), int8] */;
  maximum(%421, %422) /* ty=Tensor[(15, 2, 14), int8] */
}

def @func_9348() -> Tensor[(5, 11, 4), float32] {
  @func_8472() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_8030() -> (Tensor[(5, 11, 4), float32],) {
  %423 = @func_5693() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %424 = %423.0;
  (%424,)
}

def @func_5877() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %425 = @func_2087() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %426 = %425.0;
  %427 = cast(%426, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %428 = reshape(%427, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %429 = @func_791(%428) /* ty=Tensor[(5, 11, 4), float32] */;
  (%426, %429)
}

def @func_629(%var_621: float32, %var_622: Tensor[(14, 7, 1), float32]) -> (Tensor[(14, 7, 1), float32],) {
  %430 = cast(%var_621, dtype="float32") /* ty=float32 */;
  %431 = cast(%var_622, dtype="float32") /* ty=Tensor[(14, 7, 1), float32] */;
  %432 = minimum(%430, %431) /* ty=Tensor[(14, 7, 1), float32] */;
  (%432,)
}

def @func_6285() -> Tensor[(5, 11, 4), float32] {
  @func_5852() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_3236(%var_3219: uint16, %var_3220: Tensor[(9, 2, 13), uint16]) -> Tensor[(9, 2, 13), uint16] {
  %433 = cast(%var_3219, dtype="uint16") /* ty=uint16 */;
  %434 = cast(%var_3220, dtype="uint16") /* ty=Tensor[(9, 2, 13), uint16] */;
  logical_xor(%433, %434) /* ty=Tensor[(9, 2, 13), uint16] */
}

def @func_2801(%var_2791: Tensor[(1, 11, 6), float64]) -> (Tensor[(?, 11, 6), bool],) {
  %435 = cast(%var_2791, dtype="float64") /* ty=Tensor[(1, 11, 6), float64] */;
  %436 = cos(%435) /* ty=Tensor[(1, 11, 6), float64] */;
  %437 = cast(%var_2791, dtype="bool") /* ty=Tensor[(1, 11, 6), bool] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="bool") /* ty=Tensor[(1, 11, 6), bool] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %441 = logical_and(%439, %440) /* ty=Tensor[(?, 11, 6), bool] */;
  (%441,)
}

def @func_7062(%var_7011: Tensor[(847), uint16], %var_7059: Tensor[(330), float64]) -> (Tensor[(5, 11, 4), float64], Tensor[(12, 7, 14), float32], Tensor[(847), int16], Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), float64], Tensor[(330), float64], Tensor[(192), int16]) {
  %442 = cast(%var_7011, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %443 = cast(%var_7011, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %444 = reshape(%442, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), uint16] */;
  %445 = reshape(%443, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), uint16] */;
  %446 = @func_1824(%444, %445) /* ty=(Tensor[(11, 11, 7), uint16], Tensor[(12, 7, 14), float32]) */;
  %447 = cast(meta[relay.Constant][22] /* ty=Tensor[(847), uint16] */, dtype="int16") /* ty=Tensor[(847), int16] */;
  %448 = shape_of(%var_7011, dtype="int32") /* ty=Tensor[(1), int32] */;
  %449 = cast(%var_7011, dtype="int16") /* ty=Tensor[(847), int16] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?), int16] */;
  %451 = cast(%var_7059, dtype="float64") /* ty=Tensor[(330), float64] */;
  %452 = cast(meta[relay.Constant][23] /* ty=Tensor[(192), int16] */, dtype="int16") /* ty=Tensor[(192), int16] */;
  %453 = reshape(%451, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float64] */;
  %454 = reshape(%452, newshape=[192]) /* ty=Tensor[(192), int16] */;
  %455 = @func_5369(%453, %454) /* ty=(Tensor[(6, 5, 11), float64], Tensor[(16, 12, 8), int16], Tensor[(192), int16], Tensor[(64, 24), int16], Tensor[(576), int16], Tensor[(12, 7, 14), float64]) */;
  %456 = @func_4146() /* ty=Tensor[(5, 11, 4), float64] */;
  %457 = %446.1;
  %458 = multiply(%449, %450) /* ty=Tensor[(847), int16] */;
  %459 = @func_2294() /* ty=Tensor[(5, 11, 4), float32] */;
  %460 = %455.5;
  (%456, %457, %458, %459, %460, %var_7059, meta[relay.Constant][23] /* ty=Tensor[(192), int16] */)
}

def @func_4537() -> (Tensor[(5, 11, 4), float32],) {
  %461 = @func_2832() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %462 = %461.0;
  (%462,)
}

def @func_5524(%var_5516: Tensor[(5, 13, 15), float64]) -> (Tensor[(5, 13, 15), bool], Tensor[(5, 11, 4), float32]) {
  %463 = @func_4091() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 13, 15), float64]) */;
  %464 = %463.1;
  %465 = cast(%var_5516, dtype="bool") /* ty=Tensor[(5, 13, 15), bool] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="bool") /* ty=Tensor[(5, 13, 15), bool] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %469 = logical_and(%467, %468) /* ty=Tensor[(5, 13, 15), bool] */;
  %470 = @func_5442() /* ty=Tensor[(5, 11, 4), float32] */;
  (%469, %470)
}

def @func_5623() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %471 = @func_859() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %472 = %471.0;
  %473 = @func_1072() /* ty=Tensor[(5, 11, 4), float32] */;
  (%472, %473)
}

def @func_6857() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %474 = @func_3128() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %475 = @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */;
  %476 = %474.0;
  %477 = %475.0;
  (%476, %477)
}

def @func_2087() -> (Tensor[(5, 11, 4), float32],) {
  %478 = @func_1344() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %479 = %478.0;
  (%479,)
}

def @func_2412() -> (Tensor[(5, 11, 4), float32],) {
  %480 = @func_2087() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %481 = %480.0;
  (%481,)
}

def @func_1719() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %482 = @func_859() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %483 = %482.0;
  %484 = @func_1091() /* ty=Tensor[(5, 11, 4), float32] */;
  (%483, %484)
}

def @func_884(%var_872: Tensor[(7, 4, 7), float64], %var_873: Tensor[(7, 4, 7), float64]) -> Tensor[(7, 4, 7), float64] {
  %485 = cast(%var_873, dtype="float64") /* ty=Tensor[(7, 4, 7), float64] */;
  %486 = shape_of(%var_872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%var_872, dtype="float64") /* ty=Tensor[(7, 4, 7), float64] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%487, %488) /* ty=Tensor[(7, 4, 7), float64] */
}

def @func_3993() -> Tensor[(5, 11, 4), float64] {
  %489 = @func_2900() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %489.1
}

def @func_182(%var_177: int32, %var_178: Tensor[(1, 6, 8), int32]) -> (Tensor[(1, 6, 8), int32],) {
  %490 = cast(%var_177, dtype="int32") /* ty=int32 */;
  %491 = cast(%var_178, dtype="int32") /* ty=Tensor[(1, 6, 8), int32] */;
  %492 = subtract(%490, %491) /* ty=Tensor[(1, 6, 8), int32] */;
  (%492,)
}

def @func_6802() -> (Tensor[(5, 11, 4), float64],) {
  %493 = @func_6405() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) */;
  %494 = %493.1;
  (%494,)
}

def @func_8816(%var_8774: Tensor[(768, 2), int16], %var_8787: Tensor[(768, 2), int16]) -> (Tensor[(16, 12, 3), bool], Tensor[(2, 96), int16], Tensor[(576), int16], Tensor[(768, 2), bool], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64]) {
  %495 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 96), int16] */, dtype="int16") /* ty=Tensor[(2, 96), int16] */;
  %496 = cast(%var_8774, dtype="int16") /* ty=Tensor[(768, 2), int16] */;
  %497 = cast(meta[relay.Constant][25] /* ty=Tensor[(576), int16] */, dtype="int16") /* ty=Tensor[(576), int16] */;
  %498 = reshape(%495, newshape=[16, 12, 1]) /* ty=Tensor[(16, 12, 1), int16] */;
  %499 = reshape(%496, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int16] */;
  %500 = reshape(%497, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), int16] */;
  %501 = @func_5239(%498, %499, %500) /* ty=(Tensor[(16, 12, 8), int16], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 3), bool]) */;
  %502 = cast(%var_8787, dtype="bool") /* ty=Tensor[(768, 2), bool] */;
  %503 = shape_of(%var_8774, dtype="int32") /* ty=Tensor[(2), int32] */;
  %504 = cast(%var_8774, dtype="bool") /* ty=Tensor[(768, 2), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %506 = @func_6061() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %507 = %506.0;
  %508 = cast(%507, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %509 = @func_5623() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %510 = %501.2;
  %511 = less_equal(%504, %505) /* ty=Tensor[(768, 2), bool] */;
  %512 = sigmoid(%508) /* ty=Tensor[(5, 11, 4), float64] */;
  %513 = %509.1;
  %514 = @func_5718() /* ty=Tensor[(7, 4, 7), float64] */;
  (%510, meta[relay.Constant][24] /* ty=Tensor[(2, 96), int16] */, meta[relay.Constant][25] /* ty=Tensor[(576), int16] */, %511, %512, %513, %514)
}

def @func_9531() -> (Tensor[(5, 11, 4), float64],) {
  %515 = @func_3993() /* ty=Tensor[(5, 11, 4), float64] */;
  (%515,)
}

def @func_5369(%var_5285: Tensor[(6, 5, 11), float64], %var_5318: Tensor[(192), int16]) -> (Tensor[(6, 5, 11), float64], Tensor[(16, 12, 8), int16], Tensor[(192), int16], Tensor[(64, 24), int16], Tensor[(576), int16], Tensor[(12, 7, 14), float64]) {
  %516 = cast(%var_5285, dtype="float64") /* ty=Tensor[(6, 5, 11), float64] */;
  %517 = cast(%var_5318, dtype="int16") /* ty=Tensor[(192), int16] */;
  %518 = cast(meta[relay.Constant][26] /* ty=Tensor[(64, 24), int16] */, dtype="int16") /* ty=Tensor[(64, 24), int16] */;
  %519 = cast(meta[relay.Constant][27] /* ty=Tensor[(576), int16] */, dtype="int16") /* ty=Tensor[(576), int16] */;
  %520 = reshape(%517, newshape=[16, 12, 1]) /* ty=Tensor[(16, 12, 1), int16] */;
  %521 = reshape(%518, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int16] */;
  %522 = reshape(%519, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), int16] */;
  %523 = @func_5239(%520, %521, %522) /* ty=(Tensor[(16, 12, 8), int16], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 3), bool]) */;
  %524 = @func_5094() /* ty=(Tensor[(12, 7, 14), float64],) */;
  %525 = exp(%516) /* ty=Tensor[(6, 5, 11), float64] */;
  %526 = %523.0;
  %527 = %524.0;
  (%525, %526, %var_5318, meta[relay.Constant][26] /* ty=Tensor[(64, 24), int16] */, meta[relay.Constant][27] /* ty=Tensor[(576), int16] */, %527)
}

def @func_573(%var_557: Tensor[(5, 11, 4), float32], %var_562: Tensor[(5, 11, 4), bool]) -> (Tensor[(5, 11, 4), float64],) {
  %528 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  %529 = cast(%var_557, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%528, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %533 = greater(%531, %532) /* ty=Tensor[(5, 11, 4), bool] */;
  %534 = cast(%var_562, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%533, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %538 = multiply(%536, %537) /* ty=Tensor[(5, 11, 4), float64] */;
  (%538,)
}

def @func_8975() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) {
  %539 = @func_5623() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %540 = @func_7510() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %541 = %539.0;
  %542 = @func_1955() /* ty=Tensor[(5, 11, 4), float64] */;
  %543 = %540.0;
  (%541, %542, %543)
}

def @func_4339(%var_4283: Tensor[(8, 6, 13), float64], %var_4288: Tensor[(196), float64], %var_4292: Tensor[(7, 4, 7), float64], %var_4336: Tensor[(220), float64]) -> (Tensor[(8, 6, 13), float64], Tensor[(196), float64], Tensor[(7, 4, 7), bool], Tensor[(8, 6, 13), float64], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float32], Tensor[(220), float64]) {
  %544 = cast(%var_4283, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %545 = cast(%var_4288, dtype="float64") /* ty=Tensor[(196), float64] */;
  %546 = cast(%var_4288, dtype="float64") /* ty=Tensor[(196), float64] */;
  %547 = reshape(%545, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
  %548 = reshape(%546, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
  %549 = @func_884(%547, %548) /* ty=Tensor[(7, 4, 7), float64] */;
  %550 = cast(%var_4292, dtype="bool") /* ty=Tensor[(7, 4, 7), bool] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="bool") /* ty=Tensor[(7, 4, 7), bool] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %554 = cast(%var_4283, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
  %555 = cast(%549, dtype="float64") /* ty=Tensor[(7, 4, 7), float64] */;
  %556 = cast(%var_4336, dtype="float64") /* ty=Tensor[(220), float64] */;
  %557 = reshape(%556, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %558 = sqrt(%544) /* ty=Tensor[(8, 6, 13), float64] */;
  %559 = less_equal(%552, %553) /* ty=Tensor[(7, 4, 7), bool] */;
  %560 = tan(%554) /* ty=Tensor[(8, 6, 13), float64] */;
  %561 = atanh(%555) /* ty=Tensor[(7, 4, 7), float64] */;
  %562 = @func_791(%557) /* ty=Tensor[(5, 11, 4), float32] */;
  (%558, %var_4288, %559, %560, %561, %562, %var_4336)
}

def @func_5008() -> Tensor[(5, 11, 4), float32] {
  @func_2294() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_6429() -> (Tensor[(5, 11, 4), float32],) {
  %563 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %564 = %563.0;
  (%564,)
}

def @func_1001(%var_972: Tensor[(11, 13, 15), float32], %var_973: Tensor[(11, 13, 15), float32]) -> (Tensor[(11, 13, 15), int16],) {
  %565 = cast(%var_973, dtype="float32") /* ty=Tensor[(11, 13, 15), float32] */;
  %566 = shape_of(%var_972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%var_972, dtype="float32") /* ty=Tensor[(11, 13, 15), float32] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %569 = floor_divide(%567, %568) /* ty=Tensor[(11, 13, 15), float32] */;
  %570 = cast(%var_973, dtype="float32") /* ty=Tensor[(11, 13, 15), float32] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="float32") /* ty=Tensor[(11, 13, 15), float32] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %574 = floor_mod(%572, %573) /* ty=Tensor[(11, 13, 15), float32] */;
  %575 = cast(%574, dtype="int16") /* ty=Tensor[(11, 13, 15), int16] */;
  %576 = shape_of(%var_972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%var_972, dtype="int16") /* ty=Tensor[(11, 13, 15), int16] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %579 = bitwise_or(%577, %578) /* ty=Tensor[(11, 13, 15), int16] */;
  (%579,)
}

def @func_2832() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %580 = @func_859() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %581 = @func_412() /* ty=Tensor[(5, 11, 4), float32] */;
  %582 = %580.0;
  (%581, %582)
}

def @func_7268(%var_7260: Tensor[(10, 1, 9), int16]) -> Tensor[(10, ?, 9), bool] {
  %583 = cast(%var_7260, dtype="bool") /* ty=Tensor[(10, 1, 9), bool] */;
  %584 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(10, 1, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 1, 9), int16] */, dtype="bool") /* ty=Tensor[(10, 1, 9), bool] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%585, %586) /* ty=Tensor[(10, ?, 9), bool] */
}

def @func_3008() -> (Tensor[(5, 11, 4), float64],) {
  %587 = @func_1398() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64]) */;
  %588 = %587.2;
  (%588,)
}

def @func_8608() -> (Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %589 = @func_4208() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %590 = @func_1368() /* ty=(Tensor[(12, 7, 14), float32],) */;
  %591 = @func_8489() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %592 = @func_3698() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %593 = %589.0;
  %594 = %590.0;
  %595 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
  %596 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
  %597 = %591.0;
  %598 = %592.1;
  (%593, %594, %595, %596, %597, %598)
}

def @func_5770(%var_5749: Tensor[(13, 3, 8), int32]) -> (Tensor[(13, 3, 8), bool], Tensor[(13, 3, 8), bool], Tensor[(5, 11, 4), float32]) {
  %599 = cast(%var_5749, dtype="bool") /* ty=Tensor[(13, 3, 8), bool] */;
  %600 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(13, 3, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 3, 8), int32] */, dtype="bool") /* ty=Tensor[(13, 3, 8), bool] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %603 = cast(%var_5749, dtype="float32") /* ty=Tensor[(13, 3, 8), float32] */;
  %604 = sqrt(%603) /* ty=Tensor[(13, 3, 8), float32] */;
  %605 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 3, 8), int32] */, dtype="bool") /* ty=Tensor[(13, 3, 8), bool] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%604, dtype="bool") /* ty=Tensor[(13, 3, 8), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %609 = equal(%601, %602) /* ty=Tensor[(13, 3, 8), bool] */;
  %610 = greater_equal(%607, %608) /* ty=Tensor[(13, 3, 8), bool] */;
  %611 = @func_1425() /* ty=Tensor[(5, 11, 4), float32] */;
  (%609, %610, %611)
}

def @func_2900() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %612 = @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */;
  %613 = %612.0;
  %614 = @func_1955() /* ty=Tensor[(5, 11, 4), float64] */;
  (%613, %614)
}

def @func_361() -> Tensor[(5, 11, 4), float32] {
  %615 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 11, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %616 = sin(%615) /* ty=Tensor[(5, 11, 4), float32] */;
  %617 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 11, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%616, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%619, %620) /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_1883() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %621 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
  %622 = cast(%621, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %623 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  %624 = asinh(%622) /* ty=Tensor[(5, 11, 4), float32] */;
  (%623, %624)
}

def @func_9112() -> (Tensor[(5, 11, 4), float32],) {
  %625 = @func_859() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %626 = %625.0;
  (%626,)
}

def @func_9189() -> (Tensor[(11, 13, 15), int16],) {
  %627 = @func_7297() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16]) */;
  %628 = %627.1;
  (%628,)
}

def @func_859() -> (Tensor[(5, 11, 4), float32],) {
  %629 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %631 = erf(%630) /* ty=Tensor[(5, 11, 4), float32] */;
  (%631,)
}

def @func_6405() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) {
  %632 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %633 = @func_2900() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %634 = @func_5693() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %635 = %632.0;
  %636 = %633.1;
  %637 = %634.0;
  (%635, %636, %637)
}

def @func_3846() -> Tensor[(12, 7, 14), uint8] {
  %638 = @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */;
  %638.1
}

def @func_545(%var_534: Tensor[(7, 2, 3), float32], %var_543: Tensor[(48), int32]) -> (Tensor[(7, 2, 3), float64], Tensor[(1, 6, 8), int32], int32, Tensor[(48), int32]) {
  %639 = cast(%var_534, dtype="float32") /* ty=Tensor[(7, 2, 3), float32] */;
  %640 = acosh(%639) /* ty=Tensor[(7, 2, 3), float32] */;
  %641 = cast(%640, dtype="float64") /* ty=Tensor[(7, 2, 3), float64] */;
  %642 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %643 = cast(%var_543, dtype="int32") /* ty=Tensor[(48), int32] */;
  %644 = reshape(%642, newshape=[]) /* ty=int32 */;
  %645 = reshape(%643, newshape=[1, 6, 8]) /* ty=Tensor[(1, 6, 8), int32] */;
  %646 = @func_182(%644, %645) /* ty=(Tensor[(1, 6, 8), int32],) */;
  %647 = sin(%641) /* ty=Tensor[(7, 2, 3), float64] */;
  %648 = %646.0;
  (%647, %648, -5 /* ty=int32 */, %var_543)
}

def @func_8285() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(12, 7, 14), bool], Tensor[(5, 11, 4), int32]) {
  %649 = @func_859() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %650 = @func_5094() /* ty=(Tensor[(12, 7, 14), float64],) */;
  %651 = %650.0;
  %652 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 7, 14), float64] */, dtype="bool") /* ty=Tensor[(12, 7, 14), bool] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="bool") /* ty=Tensor[(12, 7, 14), bool] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %656 = @func_6354() /* ty=(Tensor[(5, 11, 4), int32],) */;
  %657 = %649.0;
  %658 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
  %659 = less(%654, %655) /* ty=Tensor[(12, 7, 14), bool] */;
  %660 = %656.0;
  (%657, %658, %659, %660)
}

def @func_3211() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %661 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %663 = reshape(%662, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %664 = @func_941(%663) /* ty=(Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32]) */;
  %665 = @func_1883() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %666 = %664.0;
  %667 = %665.0;
  %668 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  (%661, %666, %667, %668)
}

def @func_7510() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %669 = @func_4533() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(16, 7, ?), uint64], Tensor[(5, 11, 4), float32]) */;
  %670 = %669.3;
  %671 = @func_5732() /* ty=Tensor[(5, 11, 4), float64] */;
  (%670, %671)
}

def @func_8659() -> (Tensor[(196), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %672 = @func_5953() /* ty=(Tensor[(196), float64],) */;
  %673 = @func_3008() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %674 = %672.0;
  %675 = @func_7098() /* ty=Tensor[(5, 11, 4), float32] */;
  %676 = %673.0;
  (%674, %675, %676)
}

def @func_1091() -> Tensor[(5, 11, 4), float32] {
  %677 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %677.0
}

def @func_9512() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) {
  %678 = @func_2197() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145), float32], Tensor[(11, 11, 7), bool], Tensor[(5, 11, 4), float32]) */;
  %679 = @func_4146() /* ty=Tensor[(5, 11, 4), float64] */;
  %680 = %678.0;
  (%679, %680)
}

def @func_4830(%var_4815: int32, %var_4816: Tensor[(48), int32]) -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], int32, Tensor[(48), int32]) {
  %681 = @func_3073() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %682 = %681.0;
  %683 = cast(%682, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %684 = reshape(%683, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %685 = @func_941(%684) /* ty=(Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32]) */;
  %686 = cast(%var_4815, dtype="int32") /* ty=int32 */;
  %687 = cast(%var_4816, dtype="int32") /* ty=Tensor[(48), int32] */;
  %688 = reshape(%686, newshape=[]) /* ty=int32 */;
  %689 = reshape(%687, newshape=[48]) /* ty=Tensor[(48), int32] */;
  %690 = @func_1255(%688, %689) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(1, 6, 8), int32], int32, Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %691 = %685.1;
  %692 = %690.2;
  (%682, %691, %692, %var_4815, %var_4816)
}

def @func_5953() -> (Tensor[(196), float64],) {
  %693 = @func_1043() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) */;
  %694 = %693.2;
  (%694,)
}

def @func_6766(%var_6761: Tensor[(15, 4, 13), uint64], %var_6762: Tensor[(15, 4, 13), uint64]) -> Tensor[(15, 4, 13), uint64] {
  %695 = cast(%var_6762, dtype="uint64") /* ty=Tensor[(15, 4, 13), uint64] */;
  %696 = shape_of(%var_6761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%var_6761, dtype="uint64") /* ty=Tensor[(15, 4, 13), uint64] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%697, %698) /* ty=Tensor[(15, 4, 13), uint64] */
}

def @func_8489() -> (Tensor[(5, 11, 4), float32],) {
  %699 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  (%699,)
}

def @func_1955() -> Tensor[(5, 11, 4), float64] {
  %700 = @func_1846() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %701 = %700.0;
  %702 = cast(%701, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  log2(%702) /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_5706(%var_5700: Tensor[(3, 8, 16), uint32], %var_5701: Tensor[(3, 8, 16), uint32]) -> (Tensor[(3, 8, 16), uint32],) {
  %703 = cast(%var_5701, dtype="uint32") /* ty=Tensor[(3, 8, 16), uint32] */;
  %704 = shape_of(%var_5700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%var_5700, dtype="uint32") /* ty=Tensor[(3, 8, 16), uint32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %707 = logical_xor(%705, %706) /* ty=Tensor[(3, 8, 16), uint32] */;
  (%707,)
}

def @func_4533() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(16, 7, ?), uint64], Tensor[(5, 11, 4), float32]) {
  %708 = @func_3008() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %709 = @func_3806() /* ty=(Tensor[(16, 7, ?), uint64],) */;
  %710 = @func_1719() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %711 = %708.0;
  %712 = @func_3993() /* ty=Tensor[(5, 11, 4), float64] */;
  %713 = %709.0;
  %714 = %710.1;
  (%711, %712, %713, %714)
}

def @func_4703(%var_4684: Tensor[(8, 9, 16), float32], %var_4685: Tensor[(8, 9, 16), float32], %var_4698: Tensor[(196), float64]) -> (Tensor[(8, 9, 16), bool], Tensor[(5, 11, 4), float32], Tensor[(220), float64], Tensor[(624), float64], Tensor[(196), float64]) {
  %715 = cast(%var_4685, dtype="bool") /* ty=Tensor[(8, 9, 16), bool] */;
  %716 = shape_of(%var_4684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%var_4684, dtype="bool") /* ty=Tensor[(8, 9, 16), bool] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %719 = cast(meta[relay.Constant][33] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %720 = cast(%var_4698, dtype="float64") /* ty=Tensor[(196), float64] */;
  %721 = cast(%var_4698, dtype="float64") /* ty=Tensor[(196), float64] */;
  %722 = @func_3653() /* ty=Tensor[(5, 11, 4), float32] */;
  %723 = cast(%722, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %724 = reshape(%719, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float64] */;
  %725 = reshape(%720, newshape=[196]) /* ty=Tensor[(196), float64] */;
  %726 = reshape(%721, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
  %727 = reshape(%723, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %728 = @func_4339(%724, %725, %726, %727) /* ty=(Tensor[(8, 6, 13), float64], Tensor[(196), float64], Tensor[(7, 4, 7), bool], Tensor[(8, 6, 13), float64], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float32], Tensor[(220), float64]) */;
  %729 = equal(%717, %718) /* ty=Tensor[(8, 9, 16), bool] */;
  %730 = %728.6;
  (%729, %722, %730, meta[relay.Constant][33] /* ty=Tensor[(624), float64] */, %var_4698)
}

def @func_526() -> Tensor[(5, 11, 4), float64] {
  @func_397() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_1575(%var_1565: Tensor[(5, 11, 4), float32]) -> Tensor[(5, 11, 4), bool] {
  %731 = @func_480() /* ty=Tensor[(5, 11, 4), float32] */;
  %732 = cast(%var_1565, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%731, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%734, %735) /* ty=Tensor[(5, 11, 4), bool] */
}

def @func_3745() -> (Tensor[(5, 13, 15), float64],) {
  %736 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 13, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 13, 15), float64] */;
  %737 = atanh(%736) /* ty=Tensor[(5, 13, 15), float64] */;
  (%737,)
}

def @func_7773() -> Tensor[(5, 11, 4), float32] {
  @func_5442() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_7922() -> (Tensor[(5, 11, 4), float32],) {
  %738 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %739 = %738.0;
  (%739,)
}

def @func_6061() -> (Tensor[(5, 11, 4), float32],) {
  %740 = @func_1719() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %741 = %740.1;
  (%741,)
}

def @func_6611() -> (Tensor[(5, 11, 4), float64],) {
  %742 = @func_3993() /* ty=Tensor[(5, 11, 4), float64] */;
  (%742,)
}

def @func_8844() -> Tensor[(5, 11, 4), float32] {
  %743 = @func_4208() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %743.0
}

def @func_7974() -> (Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), float32], Tensor[(12, 7, 14), uint8]) {
  %744 = @func_1846() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %745 = @func_6986() /* ty=(Tensor[(12, 7, 14), float32],) */;
  %746 = %744.0;
  %747 = %745.0;
  %748 = @func_7581() /* ty=Tensor[(12, 7, 14), uint8] */;
  (%746, %747, %748)
}

def @func_7383() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), int32], Tensor[(5, 13, 15), float64]) {
  %749 = @func_5667() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %750 = @func_6354() /* ty=(Tensor[(5, 11, 4), int32],) */;
  %751 = @func_3745() /* ty=(Tensor[(5, 13, 15), float64],) */;
  %752 = @func_5462() /* ty=Tensor[(5, 11, 4), float32] */;
  %753 = %749.0;
  %754 = %750.0;
  %755 = %751.0;
  (%752, %753, %754, %755)
}

def @func_9760() -> (Tensor[(5, 11, 4), float32],) {
  %756 = @func_5462() /* ty=Tensor[(5, 11, 4), float32] */;
  (%756,)
}

def @func_791(%var_756: Tensor[(5, 11, 4), float64]) -> Tensor[(5, 11, 4), float32] {
  %757 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
  %758 = cast(%var_756, dtype="int64") /* ty=Tensor[(5, 11, 4), int64] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="int64") /* ty=Tensor[(5, 11, 4), int64] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %762 = logical_xor(%760, %761) /* ty=Tensor[(5, 11, 4), int64] */;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  sqrt(%763) /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_5072(%var_5064: Tensor[(12, 7, 14), uint8]) -> (Tensor[(12, 7, 14), float32],) {
  %764 = @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */;
  %765 = %764.1;
  %766 = cast(%var_5064, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%765, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %770 = mod(%768, %769) /* ty=Tensor[(12, 7, 14), float32] */;
  (%770,)
}

def @func_412() -> Tensor[(5, 11, 4), float32] {
  @func_361() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_5569() -> (Tensor[(5, 11, 4), float64], Tensor[(7, 4, 7), float64]) {
  %771 = @func_4533() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(16, 7, ?), uint64], Tensor[(5, 11, 4), float32]) */;
  %772 = @func_1043() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) */;
  %773 = %771.0;
  %774 = %772.1;
  (%773, %774)
}

def @func_5718() -> Tensor[(7, 4, 7), float64] {
  %775 = @func_3897() /* ty=(Tensor[(7, 4, 7), float64],) */;
  %775.0
}

def @func_5852() -> Tensor[(5, 11, 4), float32] {
  %776 = @func_4533() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(16, 7, ?), uint64], Tensor[(5, 11, 4), float32]) */;
  %776.3
}

def @func_4208() -> (Tensor[(5, 11, 4), float32],) {
  %777 = @func_3211() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %778 = %777.1;
  %779 = cast(%778, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %780 = log10(%779) /* ty=Tensor[(5, 11, 4), float32] */;
  (%780,)
}

def @func_2310() -> (Tensor[(5, 11, 4), float32],) {
  %781 = @func_1425() /* ty=Tensor[(5, 11, 4), float32] */;
  (%781,)
}

def @func_7604() -> Tensor[(5, 11, 4), float32] {
  %782 = @func_6453() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %782.0
}

def @func_7837() -> (Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float32]) {
  %783 = @func_3897() /* ty=(Tensor[(7, 4, 7), float64],) */;
  %784 = %783.0;
  %785 = @func_7098() /* ty=Tensor[(5, 11, 4), float32] */;
  (%784, %785)
}

def @func_5981(%var_5970: Tensor[(12, 10, 12), int32]) -> (Tensor[(12, 10, 12), bool],) {
  %786 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 10, 12), int32] */, dtype="bool") /* ty=Tensor[(12, 10, 12), bool] */;
  %787 = shape_of(%var_5970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%var_5970, dtype="bool") /* ty=Tensor[(12, 10, 12), bool] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %790 = not_equal(%788, %789) /* ty=Tensor[(12, 10, 12), bool] */;
  (%790,)
}

def @func_749(%var_730: float32) -> (Tensor[(5, 11, 4), float32], Tensor[(98), float32], Tensor[(14, 7, 1), bool]) {
  %791 = cast(%var_730, dtype="float32") /* ty=float32 */;
  %792 = cast(meta[relay.Constant][36] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %793 = reshape(%791, newshape=[]) /* ty=float32 */;
  %794 = reshape(%792, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), float32] */;
  %795 = @func_629(%793, %794) /* ty=(Tensor[(14, 7, 1), float32],) */;
  %796 = %795.0;
  %797 = cast(%796, dtype="float32") /* ty=Tensor[(14, 7, 1), float32] */;
  %798 = sinh(%797) /* ty=Tensor[(14, 7, 1), float32] */;
  %799 = cast(%798, dtype="bool") /* ty=Tensor[(14, 7, 1), bool] */;
  %800 = cast(%var_730, dtype="bool") /* ty=bool */;
  %801 = @func_480() /* ty=Tensor[(5, 11, 4), float32] */;
  %802 = logical_and(%799, %800) /* ty=Tensor[(14, 7, 1), bool] */;
  (%801, meta[relay.Constant][36] /* ty=Tensor[(98), float32] */, %802)
}

def @func_3698() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %803 = @func_1425() /* ty=Tensor[(5, 11, 4), float32] */;
  %804 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
  (%803, %804)
}

def @func_9715(%var_9659: Tensor[(14, 9, 5), uint16], %var_9676: Tensor[(96), int32], %var_9701: Tensor[(28), int8]) -> (Tensor[(14, 9, 5), uint16], Tensor[(96), int32], Tensor[(98), float32], Tensor[(15, 2, 14), int8], Tensor[(420), int8], Tensor[(28), uint64]) {
  %805 = cast(%var_9659, dtype="uint16") /* ty=Tensor[(14, 9, 5), uint16] */;
  %806 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(14, 9, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %807 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 9, 5), uint16] */, dtype="uint16") /* ty=Tensor[(14, 9, 5), uint16] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %809 = cast(%var_9676, dtype="int32") /* ty=Tensor[(96), int32] */;
  %810 = reshape(%809, newshape=[2, 6, 8]) /* ty=Tensor[(2, 6, 8), int32] */;
  %811 = @func_8439(%810) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(12, 4), int32], Tensor[(2, 6, 8), bool], Tensor[(5, 11, 4), float32], Tensor[(2, 6, 8), uint8], float32, Tensor[(98), float32]) */;
  %812 = %811.7;
  %813 = cast(%812, dtype="float32") /* ty=Tensor[(98), float32] */;
  %814 = cast(meta[relay.Constant][38] /* ty=Tensor[(28), int8] */, dtype="int8") /* ty=Tensor[(28), int8] */;
  %815 = cast(meta[relay.Constant][39] /* ty=Tensor[(420), int8] */, dtype="int8") /* ty=Tensor[(420), int8] */;
  %816 = reshape(%814, newshape=[1, 2, 14]) /* ty=Tensor[(1, 2, 14), int8] */;
  %817 = reshape(%815, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), int8] */;
  %818 = cast(%var_9701, dtype="uint64") /* ty=Tensor[(28), uint64] */;
  %819 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(28), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %820 = cast(meta[relay.Constant][38] /* ty=Tensor[(28), int8] */, dtype="uint64") /* ty=Tensor[(28), uint64] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %822 = add(%807, %808) /* ty=Tensor[(14, 9, 5), uint16] */;
  %823 = asin(%813) /* ty=Tensor[(98), float32] */;
  %824 = @func_4586(%816, %817) /* ty=Tensor[(15, 2, 14), int8] */;
  %825 = logical_xor(%820, %821) /* ty=Tensor[(28), uint64] */;
  (%822, %var_9676, %823, %824, meta[relay.Constant][39] /* ty=Tensor[(420), int8] */, %825)
}

def @func_6453() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %826 = @func_5623() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %827 = @func_5877() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %828 = %826.1;
  %829 = @func_480() /* ty=Tensor[(5, 11, 4), float32] */;
  %830 = %827.0;
  (%828, %829, %830)
}

def @func_3806() -> (Tensor[(16, 7, ?), uint64],) {
  %831 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 7, 1), float32] */, dtype="float32") /* ty=Tensor[(16, 7, 1), float32] */;
  %832 = tan(%831) /* ty=Tensor[(16, 7, 1), float32] */;
  %833 = cast(%832, dtype="uint64") /* ty=Tensor[(16, 7, 1), uint64] */;
  %834 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(16, 7, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 7, 1), float32] */, dtype="uint64") /* ty=Tensor[(16, 7, 1), uint64] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %837 = subtract(%835, %836) /* ty=Tensor[(16, 7, ?), uint64] */;
  (%837,)
}

def @func_7748(%var_7740: Tensor[(15, 14, 16), float64]) -> (Tensor[(15, 14, 16), float64],) {
  %838 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 14, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 14, 16), float64] */;
  %839 = shape_of(%var_7740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(%var_7740, dtype="float64") /* ty=Tensor[(15, 14, 16), float64] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %842 = power(%840, %841) /* ty=Tensor[(15, 14, 16), float64] */;
  (%842,)
}

def @func_8496() -> Tensor[(5, 11, 4), float32] {
  @func_5442() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_8439(%var_8375: Tensor[(2, 6, 8), int32]) -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(12, 4), int32], Tensor[(2, 6, 8), bool], Tensor[(5, 11, 4), float32], Tensor[(2, 6, 8), uint8], float32, Tensor[(98), float32]) {
  %843 = @func_4208() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %844 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %845 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 4), int32] */, dtype="int32") /* ty=Tensor[(12, 4), int32] */;
  %846 = reshape(%844, newshape=[]) /* ty=int32 */;
  %847 = reshape(%845, newshape=[48]) /* ty=Tensor[(48), int32] */;
  %848 = @func_4830(%846, %847) /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], int32, Tensor[(48), int32]) */;
  %849 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %850 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 4), int32] */, dtype="int32") /* ty=Tensor[(12, 4), int32] */;
  %851 = reshape(%849, newshape=[]) /* ty=int32 */;
  %852 = reshape(%850, newshape=[1, 6, 8]) /* ty=Tensor[(1, 6, 8), int32] */;
  %853 = @func_182(%851, %852) /* ty=(Tensor[(1, 6, 8), int32],) */;
  %854 = %853.0;
  %855 = cast(%854, dtype="bool") /* ty=Tensor[(1, 6, 8), bool] */;
  %856 = cast(%var_8375, dtype="bool") /* ty=Tensor[(2, 6, 8), bool] */;
  %857 = cast(-2 /* ty=int32 */, dtype="float64") /* ty=float64 */;
  %858 = cast(%var_8375, dtype="float64") /* ty=Tensor[(2, 6, 8), float64] */;
  %859 = floor_divide(%857, %858) /* ty=Tensor[(2, 6, 8), float64] */;
  %860 = cast(%854, dtype="uint8") /* ty=Tensor[(1, 6, 8), uint8] */;
  %861 = cast(%859, dtype="uint8") /* ty=Tensor[(2, 6, 8), uint8] */;
  %862 = cast(meta[relay.Constant][43] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %863 = reshape(%862, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %864 = @func_7142(%863) /* ty=(float32, Tensor[(14, 7, 1), float32], Tensor[(98), float32]) */;
  %865 = %843.0;
  %866 = %848.2;
  %867 = logical_or(%855, %856) /* ty=Tensor[(2, 6, 8), bool] */;
  %868 = @func_8180() /* ty=Tensor[(5, 11, 4), float32] */;
  %869 = bitwise_or(%860, %861) /* ty=Tensor[(2, 6, 8), uint8] */;
  %870 = %864.0;
  (%865, %866, meta[relay.Constant][42] /* ty=Tensor[(12, 4), int32] */, %867, %868, %869, %870, meta[relay.Constant][43] /* ty=Tensor[(98), float32] */)
}

def @func_8180() -> Tensor[(5, 11, 4), float32] {
  @func_3850() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_9618() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(11, 11, 7), bool]) {
  %871 = @func_1846() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %872 = %871.0;
  %873 = cast(%872, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %874 = cast(%872, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %875 = reshape(%873, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float32] */;
  %876 = reshape(%874, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), bool] */;
  %877 = @func_573(%875, %876) /* ty=(Tensor[(5, 11, 4), float64],) */;
  %878 = %877.0;
  %879 = @func_9477() /* ty=Tensor[(11, 11, 7), bool] */;
  (%872, %878, %879)
}

def @func_9131() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %880 = @func_8496() /* ty=Tensor[(5, 11, 4), float32] */;
  %881 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
  (%880, %881)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6355() -> (Tensor[(5, 11, 4), int32],) {
  %9 = fn () -> (Tensor[(5, 11, 4), int32],) {
    %0 = @func_3508() /* ty=(Tensor[(5, 11, 4), float32], float32, Tensor[(98), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 7, 1), float64]) */;
    %1 = %0.3;
    %2 = @func_2936() /* ty=(Tensor[(5, 11, 4), float64],) */;
    %3 = %2.0;
    %4 = cast(%3, dtype="int32") /* ty=Tensor[(5, 11, 4), int32] */;
    %5 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
    %6 = cast(%1, dtype="int32") /* ty=Tensor[(5, 11, 4), int32] */;
    %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %8 = maximum(%6, %7) /* ty=Tensor[(5, 11, 4), int32] */;
    (%8,)
  };
  %9() /* ty=(Tensor[(5, 11, 4), int32],) */
}

def @func_7268(%var_7260: Tensor[(10, 1, 9), int16]) -> Tensor[(10, ?, 9), bool] {
  %10 = cast(%var_7260, dtype="bool") /* ty=Tensor[(10, 1, 9), bool] */;
  %11 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(10, 1, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 1, 9), int16] */, dtype="bool") /* ty=Tensor[(10, 1, 9), bool] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%12, %13) /* ty=Tensor[(10, ?, 9), bool] */
}

def @func_7727() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64]) {
  @func_7725() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64]) */
}

def @func_2832() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %14 = @func_859() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %15 = @func_412() /* ty=Tensor[(5, 11, 4), float32] */;
  %16 = %14.0;
  (%15, %16)
}

def @func_6063() -> (Tensor[(5, 11, 4), float32],) {
  @func_6061() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_7923() -> (Tensor[(5, 11, 4), float32],) {
  %19 = fn () -> (Tensor[(5, 11, 4), float32],) {
    %17 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %18 = %17.0;
    (%18,)
  };
  %19() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_3655() -> Tensor[(5, 11, 4), float32] {
  @func_3653() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_8489() -> (Tensor[(5, 11, 4), float32],) {
  %20 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  (%20,)
}

def @func_6804() -> (Tensor[(5, 11, 4), float64],) {
  @func_6802() /* ty=(Tensor[(5, 11, 4), float64],) */
}

def @func_1577(%var_1576: Tensor[(5, 11, 4), float32]) -> Tensor[(5, 11, 4), bool] {
  %26 = fn (%var_1565: Tensor[(5, 11, 4), float32]) -> Tensor[(5, 11, 4), bool] {
    %21 = @func_480() /* ty=Tensor[(5, 11, 4), float32] */;
    %22 = cast(%var_1565, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
    %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
    %24 = cast(%21, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
    %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%24, %25) /* ty=Tensor[(5, 11, 4), bool] */
  };
  %26(%var_1576) /* ty=Tensor[(5, 11, 4), bool] */
}

def @func_7748(%var_7740: Tensor[(15, 14, 16), float64]) -> (Tensor[(15, 14, 16), float64],) {
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 14, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 14, 16), float64] */;
  %28 = shape_of(%var_7740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%var_7740, dtype="float64") /* ty=Tensor[(15, 14, 16), float64] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %31 = power(%29, %30) /* ty=Tensor[(15, 14, 16), float64] */;
  (%31,)
}

def @func_5854() -> Tensor[(5, 11, 4), float32] {
  @func_5852() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_9350() -> Tensor[(5, 11, 4), float32] {
  @func_9348() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_8286() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(12, 7, 14), bool], Tensor[(5, 11, 4), int32]) {
  %44 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(12, 7, 14), bool], Tensor[(5, 11, 4), int32]) {
    %32 = @func_859() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %33 = @func_5094() /* ty=(Tensor[(12, 7, 14), float64],) */;
    %34 = %33.0;
    %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 7, 14), float64] */, dtype="bool") /* ty=Tensor[(12, 7, 14), bool] */;
    %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
    %37 = cast(%34, dtype="bool") /* ty=Tensor[(12, 7, 14), bool] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %39 = @func_6354() /* ty=(Tensor[(5, 11, 4), int32],) */;
    %40 = %32.0;
    %41 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
    %42 = less(%37, %38) /* ty=Tensor[(12, 7, 14), bool] */;
    %43 = %39.0;
    (%40, %41, %42, %43)
  };
  %44() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(12, 7, 14), bool], Tensor[(5, 11, 4), int32]) */
}

def @func_6858() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %49 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
    %45 = @func_3128() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
    %46 = @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */;
    %47 = %45.0;
    %48 = %46.0;
    (%47, %48)
  };
  %49() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_8886(%var_8846: Tensor[(10, 8, 14), uint8], %var_8847: Tensor[(10, 8, 14), uint8]) -> (Tensor[(10, 8, 14), bool], Tensor[(5, 11, 4), float64], Tensor[(10, 8, 14), bool]) {
  %50 = cast(%var_8847, dtype="bool") /* ty=Tensor[(10, 8, 14), bool] */;
  %51 = shape_of(%var_8846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%var_8846, dtype="bool") /* ty=Tensor[(10, 8, 14), bool] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %54 = @func_7191() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(13, 3, 8), bool], Tensor[(312), int32]) */;
  %55 = cast(%var_8847, dtype="bool") /* ty=Tensor[(10, 8, 14), bool] */;
  %56 = shape_of(%var_8846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_8846, dtype="bool") /* ty=Tensor[(10, 8, 14), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %59 = less(%52, %53) /* ty=Tensor[(10, 8, 14), bool] */;
  %60 = %54.1;
  %61 = greater(%57, %58) /* ty=Tensor[(10, 8, 14), bool] */;
  (%59, %60, %61)
}

def @func_5954() -> (Tensor[(196), float64],) {
  %64 = fn () -> (Tensor[(196), float64],) {
    %62 = @func_1043() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) */;
    %63 = %62.2;
    (%63,)
  };
  %64() /* ty=(Tensor[(196), float64],) */
}

def @func_3700() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  @func_3698() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */
}

def @func_1255(%var_1242: int32, %var_1243: Tensor[(48), int32]) -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(1, 6, 8), int32], int32, Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %65 = @func_1043() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) */;
  %66 = cast(%var_1242, dtype="int32") /* ty=int32 */;
  %67 = cast(%var_1243, dtype="int32") /* ty=Tensor[(48), int32] */;
  %68 = reshape(%66, newshape=[]) /* ty=int32 */;
  %69 = reshape(%67, newshape=[1, 6, 8]) /* ty=Tensor[(1, 6, 8), int32] */;
  %70 = @func_182(%68, %69) /* ty=(Tensor[(1, 6, 8), int32],) */;
  %71 = @func_1091() /* ty=Tensor[(5, 11, 4), float32] */;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %73 = asin(%72) /* ty=Tensor[(5, 11, 4), float64] */;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %75 = @func_1072() /* ty=Tensor[(5, 11, 4), float32] */;
  %76 = %65.0;
  %77 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
  %78 = %70.0;
  %79 = @func_1072() /* ty=Tensor[(5, 11, 4), float32] */;
  %80 = tan(%74) /* ty=Tensor[(5, 11, 4), float32] */;
  (%75, %76, %77, %78, %var_1242, %var_1243, %79, %80)
}

def @func_4891(%var_4889: Tensor[(5, 11, 4), float32]) -> Tensor[(5, 11, 4), uint8] {
  @func_4888(%var_4889) /* ty=Tensor[(5, 11, 4), uint8] */
}

def @func_8491() -> (Tensor[(5, 11, 4), float32],) {
  @func_8489() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_860() -> (Tensor[(5, 11, 4), float32],) {
  %84 = fn () -> (Tensor[(5, 11, 4), float32],) {
    %81 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
    %82 = cast(%81, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
    %83 = erf(%82) /* ty=Tensor[(5, 11, 4), float32] */;
    (%83,)
  };
  %84() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_5949(%var_5947: Tensor[(5, 15, 13), int8], %var_5948: Tensor[(5, 15, 13), int8]) -> (Tensor[(5, 15, 13), bool], Tensor[(5, 15, 13), int32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  @func_5945(%var_5947, %var_5948) /* ty=(Tensor[(5, 15, 13), bool], Tensor[(5, 15, 13), int32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_9467() -> (Tensor[(7, 4, 7), float64],) {
  %87 = fn () -> (Tensor[(7, 4, 7), float64],) {
    %85 = @func_3537() /* ty=(Tensor[(7, 4, 7), float64],) */;
    %86 = %85.0;
    (%86,)
  };
  %87() /* ty=(Tensor[(7, 4, 7), float64],) */
}

def @func_186(%var_184: int32, %var_185: Tensor[(1, 6, 8), int32]) -> (Tensor[(1, 6, 8), int32],) {
  @func_182(%var_184, %var_185) /* ty=(Tensor[(1, 6, 8), int32],) */
}

def @func_8738() -> Tensor[(7, 4, 7), float64] {
  %89 = fn () -> Tensor[(7, 4, 7), float64] {
    %88 = @func_3897() /* ty=(Tensor[(7, 4, 7), float64],) */;
    %88.0
  };
  %89() /* ty=Tensor[(7, 4, 7), float64] */
}

def @func_8845() -> Tensor[(5, 11, 4), float32] {
  %91 = fn () -> Tensor[(5, 11, 4), float32] {
    %90 = @func_4208() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %90.0
  };
  %91() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_3239(%var_3237: uint16, %var_3238: Tensor[(9, 2, 13), uint16]) -> Tensor[(9, 2, 13), uint16] {
  %94 = fn (%var_3219: uint16, %var_3220: Tensor[(9, 2, 13), uint16]) -> Tensor[(9, 2, 13), uint16] {
    %92 = cast(%var_3219, dtype="uint16") /* ty=uint16 */;
    %93 = cast(%var_3220, dtype="uint16") /* ty=Tensor[(9, 2, 13), uint16] */;
    logical_xor(%92, %93) /* ty=Tensor[(9, 2, 13), uint16] */
  };
  %94(%var_3237, %var_3238) /* ty=Tensor[(9, 2, 13), uint16] */
}

def @func_7385() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), int32], Tensor[(5, 13, 15), float64]) {
  @func_7383() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), int32], Tensor[(5, 13, 15), float64]) */
}

def @func_1093() -> Tensor[(5, 11, 4), float32] {
  @func_1091() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_5369(%var_5285: Tensor[(6, 5, 11), float64], %var_5318: Tensor[(192), int16]) -> (Tensor[(6, 5, 11), float64], Tensor[(16, 12, 8), int16], Tensor[(192), int16], Tensor[(64, 24), int16], Tensor[(576), int16], Tensor[(12, 7, 14), float64]) {
  %95 = cast(%var_5285, dtype="float64") /* ty=Tensor[(6, 5, 11), float64] */;
  %96 = cast(%var_5318, dtype="int16") /* ty=Tensor[(192), int16] */;
  %97 = cast(meta[relay.Constant][3] /* ty=Tensor[(64, 24), int16] */, dtype="int16") /* ty=Tensor[(64, 24), int16] */;
  %98 = cast(meta[relay.Constant][4] /* ty=Tensor[(576), int16] */, dtype="int16") /* ty=Tensor[(576), int16] */;
  %99 = reshape(%96, newshape=[16, 12, 1]) /* ty=Tensor[(16, 12, 1), int16] */;
  %100 = reshape(%97, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int16] */;
  %101 = reshape(%98, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), int16] */;
  %102 = @func_5239(%99, %100, %101) /* ty=(Tensor[(16, 12, 8), int16], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 3), bool]) */;
  %103 = @func_5094() /* ty=(Tensor[(12, 7, 14), float64],) */;
  %104 = exp(%95) /* ty=Tensor[(6, 5, 11), float64] */;
  %105 = %102.0;
  %106 = %103.0;
  (%104, %105, %var_5318, meta[relay.Constant][3] /* ty=Tensor[(64, 24), int16] */, meta[relay.Constant][4] /* ty=Tensor[(576), int16] */, %106)
}

def @func_8757() -> Tensor[(5, 11, 4), float32] {
  @func_8755() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_1073() -> Tensor[(5, 11, 4), float32] {
  %116 = fn () -> Tensor[(5, 11, 4), float32] {
    %107 = @func_412() /* ty=Tensor[(5, 11, 4), float32] */;
    %108 = cast(%107, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
    %109 = reshape(%108, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
    %110 = @func_941(%109) /* ty=(Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32]) */;
    %111 = %110.0;
    %112 = cast(%107, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
    %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
    %114 = cast(%111, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
    %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%114, %115) /* ty=Tensor[(5, 11, 4), float32] */
  };
  %116() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_686() -> (Tensor[(5, 11, 4), float32],) {
  @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_8608() -> (Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %117 = @func_4208() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %118 = @func_1368() /* ty=(Tensor[(12, 7, 14), float32],) */;
  %119 = @func_8489() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %120 = @func_3698() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %121 = %117.0;
  %122 = %118.0;
  %123 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
  %124 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
  %125 = %119.0;
  %126 = %120.1;
  (%121, %122, %123, %124, %125, %126)
}

def @func_5444() -> Tensor[(5, 11, 4), float32] {
  @func_5442() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_2295() -> Tensor[(5, 11, 4), float32] {
  %128 = fn () -> Tensor[(5, 11, 4), float32] {
    %127 = @func_1883() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
    %127.1
  };
  %128() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_6760() -> Tensor[(5, 11, 4), float64] {
  %130 = fn () -> Tensor[(5, 11, 4), float64] {
    %129 = @func_2900() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
    %129.1
  };
  %130() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_398() -> Tensor[(5, 11, 4), float64] {
  %135 = fn () -> Tensor[(5, 11, 4), float64] {
    %131 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
    %132 = cast(%131, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
    %133 = atan(%132) /* ty=Tensor[(5, 11, 4), float64] */;
    %134 = cast(%133, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
    log(%134) /* ty=Tensor[(5, 11, 4), float64] */
  };
  %135() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_1399() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64]) {
  %142 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64]) {
    %136 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %137 = %136.0;
    %138 = cast(%137, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
    %139 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
    %140 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
    %141 = cos(%138) /* ty=Tensor[(5, 11, 4), float64] */;
    (%139, %140, %141)
  };
  %142() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64]) */
}

def @func_1346() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  @func_1344() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_6405() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) {
  %143 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %144 = @func_2900() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %145 = @func_5693() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %146 = %143.0;
  %147 = %144.1;
  %148 = %145.0;
  (%146, %147, %148)
}

def @func_4756() -> Tensor[(5, 13, 15), float64] {
  %150 = fn () -> Tensor[(5, 13, 15), float64] {
    %149 = @func_3745() /* ty=(Tensor[(5, 13, 15), float64],) */;
    %149.0
  };
  %150() /* ty=Tensor[(5, 13, 15), float64] */
}

def @func_4888(%var_4881: Tensor[(5, 11, 4), float32]) -> Tensor[(5, 11, 4), uint8] {
  %151 = @func_3340() /* ty=Tensor[(5, 11, 4), float32] */;
  %152 = cast(%var_4881, dtype="uint8") /* ty=Tensor[(5, 11, 4), uint8] */;
  %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%151, dtype="uint8") /* ty=Tensor[(5, 11, 4), uint8] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%154, %155) /* ty=Tensor[(5, 11, 4), uint8] */
}

def @func_7775() -> Tensor[(5, 11, 4), float32] {
  @func_7773() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_8311() -> (Tensor[(12, 16, 15), float32], Tensor[(12, 16, 15), float32]) {
  @func_8309() /* ty=(Tensor[(12, 16, 15), float32], Tensor[(12, 16, 15), float32]) */
}

def @func_7416() -> (Tensor[(12, 7, 14), uint8],) {
  @func_7414() /* ty=(Tensor[(12, 7, 14), uint8],) */
}

def @func_5877() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %156 = @func_2087() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %157 = %156.0;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %159 = reshape(%158, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %160 = @func_791(%159) /* ty=Tensor[(5, 11, 4), float32] */;
  (%157, %160)
}

def @func_6681(%var_6679: Tensor[(7, 4, 7), float64]) -> Tensor[(7, 4, 7), int32] {
  @func_6678(%var_6679) /* ty=Tensor[(7, 4, 7), int32] */
}

def @func_3342() -> Tensor[(5, 11, 4), float32] {
  @func_3340() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_2834() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  @func_2832() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_6407() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) {
  @func_6405() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) */
}

def @func_3340() -> Tensor[(5, 11, 4), float32] {
  @func_1072() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_5889() -> Tensor[(5, 11, 4), float32] {
  %161 = fn () -> Tensor[(5, 11, 4), float32] {
    @func_2294() /* ty=Tensor[(5, 11, 4), float32] */
  };
  %161() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_6224() -> Tensor[(5, 11, 4), float64] {
  @func_6222() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_5981(%var_5970: Tensor[(12, 10, 12), int32]) -> (Tensor[(12, 10, 12), bool],) {
  %162 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 10, 12), int32] */, dtype="bool") /* ty=Tensor[(12, 10, 12), bool] */;
  %163 = shape_of(%var_5970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%var_5970, dtype="bool") /* ty=Tensor[(12, 10, 12), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = not_equal(%164, %165) /* ty=Tensor[(12, 10, 12), bool] */;
  (%166,)
}

def @func_4460() -> (Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145, 1), float32]) {
  @func_4458() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145, 1), float32]) */
}

def @func_2312() -> (Tensor[(5, 11, 4), float32],) {
  @func_2310() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_528() -> Tensor[(5, 11, 4), float64] {
  @func_526() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_8182() -> Tensor[(5, 11, 4), float32] {
  @func_8180() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_3129() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %172 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
    %167 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %168 = @func_1883() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
    %169 = %167.0;
    %170 = %168.1;
    %171 = @func_1425() /* ty=Tensor[(5, 11, 4), float32] */;
    (%169, %170, %171)
  };
  %172() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_4025(%var_4009: Tensor[(5, 11, 4), float32]) -> (Tensor[(5, 11, 4), int16],) {
  %173 = @func_2832() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %174 = %173.1;
  %175 = cast(%var_4009, dtype="int16") /* ty=Tensor[(5, 11, 4), int16] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="int16") /* ty=Tensor[(5, 11, 4), int16] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %179 = bitwise_xor(%177, %178) /* ty=Tensor[(5, 11, 4), int16] */;
  (%179,)
}

def @func_1427() -> Tensor[(5, 11, 4), float32] {
  @func_1425() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_5373(%var_5371: Tensor[(6, 5, 11), float64], %var_5372: Tensor[(192), int16]) -> (Tensor[(6, 5, 11), float64], Tensor[(16, 12, 8), int16], Tensor[(192), int16], Tensor[(64, 24), int16], Tensor[(576), int16], Tensor[(12, 7, 14), float64]) {
  @func_5369(%var_5371, %var_5372) /* ty=(Tensor[(6, 5, 11), float64], Tensor[(16, 12, 8), int16], Tensor[(192), int16], Tensor[(64, 24), int16], Tensor[(576), int16], Tensor[(12, 7, 14), float64]) */
}

def @func_3993() -> Tensor[(5, 11, 4), float64] {
  %180 = @func_2900() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %180.1
}

def @func_6431() -> (Tensor[(5, 11, 4), float32],) {
  @func_6429() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_9524() -> (Tensor[(196), float64],) {
  %183 = fn () -> (Tensor[(196), float64],) {
    %181 = @func_8659() /* ty=(Tensor[(196), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
    %182 = %181.0;
    (%182,)
  };
  %183() /* ty=(Tensor[(196), float64],) */
}

def @func_8180() -> Tensor[(5, 11, 4), float32] {
  @func_3850() /* ty=Tensor[(5, 11, 4), float32] */
}

def @main(%var_9810: Tensor[(16, 8, 11), int8], %var_9811: Tensor[(16, 8, 11), int8]) -> (Tensor[(16, 8, 11), int8],) {
  %184 = cast(%var_9811, dtype="int8") /* ty=Tensor[(16, 8, 11), int8] */;
  %185 = shape_of(%var_9810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%var_9810, dtype="int8") /* ty=Tensor[(16, 8, 11), int8] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %188 = minimum(%186, %187) /* ty=Tensor[(16, 8, 11), int8] */;
  (%188,)
}

def @func_8904() -> Tensor[(5, 11, 4), float32] {
  @func_8755() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_4707(%var_4704: Tensor[(8, 9, 16), float32], %var_4705: Tensor[(8, 9, 16), float32], %var_4706: Tensor[(196), float64]) -> (Tensor[(8, 9, 16), bool], Tensor[(5, 11, 4), float32], Tensor[(220), float64], Tensor[(624), float64], Tensor[(196), float64]) {
  %205 = fn (%var_4684: Tensor[(8, 9, 16), float32], %var_4685: Tensor[(8, 9, 16), float32], %var_4698: Tensor[(196), float64]) -> (Tensor[(8, 9, 16), bool], Tensor[(5, 11, 4), float32], Tensor[(220), float64], Tensor[(624), float64], Tensor[(196), float64]) {
    %189 = cast(%var_4685, dtype="bool") /* ty=Tensor[(8, 9, 16), bool] */;
    %190 = shape_of(%var_4684, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(%var_4684, dtype="bool") /* ty=Tensor[(8, 9, 16), bool] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %193 = cast(meta[relay.Constant][6] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
    %194 = cast(%var_4698, dtype="float64") /* ty=Tensor[(196), float64] */;
    %195 = cast(%var_4698, dtype="float64") /* ty=Tensor[(196), float64] */;
    %196 = @func_3653() /* ty=Tensor[(5, 11, 4), float32] */;
    %197 = cast(%196, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
    %198 = reshape(%193, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float64] */;
    %199 = reshape(%194, newshape=[196]) /* ty=Tensor[(196), float64] */;
    %200 = reshape(%195, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
    %201 = reshape(%197, newshape=[220]) /* ty=Tensor[(220), float64] */;
    %202 = @func_4339(%198, %199, %200, %201) /* ty=(Tensor[(8, 6, 13), float64], Tensor[(196), float64], Tensor[(7, 4, 7), bool], Tensor[(8, 6, 13), float64], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float32], Tensor[(220), float64]) */;
    %203 = equal(%191, %192) /* ty=Tensor[(8, 9, 16), bool] */;
    %204 = %202.6;
    (%203, %196, %204, meta[relay.Constant][6] /* ty=Tensor[(624), float64] */, %var_4698)
  };
  %205(%var_4704, %var_4705, %var_4706) /* ty=(Tensor[(8, 9, 16), bool], Tensor[(5, 11, 4), float32], Tensor[(220), float64], Tensor[(624), float64], Tensor[(196), float64]) */
}

def @func_9131() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %206 = @func_8496() /* ty=Tensor[(5, 11, 4), float32] */;
  %207 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
  (%206, %207)
}

def @func_8088(%var_8086: Tensor[(12, 11, 8), float64], %var_8087: Tensor[(12, 11, 8), float64]) -> (Tensor[(12, 11, 8), float64], Tensor[(5, 11, 4), float32]) {
  %214 = fn (%var_8067: Tensor[(12, 11, 8), float64], %var_8068: Tensor[(12, 11, 8), float64]) -> (Tensor[(12, 11, 8), float64], Tensor[(5, 11, 4), float32]) {
    %208 = cast(%var_8068, dtype="float64") /* ty=Tensor[(12, 11, 8), float64] */;
    %209 = shape_of(%var_8067, dtype="int32") /* ty=Tensor[(3), int32] */;
    %210 = cast(%var_8067, dtype="float64") /* ty=Tensor[(12, 11, 8), float64] */;
    %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %212 = divide(%210, %211) /* ty=Tensor[(12, 11, 8), float64] */;
    %213 = @func_7098() /* ty=Tensor[(5, 11, 4), float32] */;
    (%212, %213)
  };
  %214(%var_8086, %var_8087) /* ty=(Tensor[(12, 11, 8), float64], Tensor[(5, 11, 4), float32]) */
}

def @func_9798(%var_9797: Tensor[(98, 2), float64]) -> (Tensor[(5, 11, 4), float32], Tensor[(8, 9, 16), bool], Tensor[(1, 1152), float32], Tensor[(98, 2), float64], Tensor[(7, 4, 7), float64]) {
  %226 = fn (%var_9784: Tensor[(98, 2), float64]) -> (Tensor[(5, 11, 4), float32], Tensor[(8, 9, 16), bool], Tensor[(1, 1152), float32], Tensor[(98, 2), float64], Tensor[(7, 4, 7), float64]) {
    %215 = @func_2310() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %216 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 1152), float32] */, dtype="float32") /* ty=Tensor[(1, 1152), float32] */;
    %217 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 1152), float32] */, dtype="float32") /* ty=Tensor[(1, 1152), float32] */;
    %218 = cast(%var_9784, dtype="float64") /* ty=Tensor[(98, 2), float64] */;
    %219 = reshape(%216, newshape=[8, 9, 16]) /* ty=Tensor[(8, 9, 16), float32] */;
    %220 = reshape(%217, newshape=[8, 9, 16]) /* ty=Tensor[(8, 9, 16), float32] */;
    %221 = reshape(%218, newshape=[196]) /* ty=Tensor[(196), float64] */;
    %222 = @func_4703(%219, %220, %221) /* ty=(Tensor[(8, 9, 16), bool], Tensor[(5, 11, 4), float32], Tensor[(220), float64], Tensor[(624), float64], Tensor[(196), float64]) */;
    %223 = %215.0;
    %224 = %222.0;
    %225 = @func_5718() /* ty=Tensor[(7, 4, 7), float64] */;
    (%223, %224, meta[relay.Constant][7] /* ty=Tensor[(1, 1152), float32] */, %var_9784, %225)
  };
  %226(%var_9797) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(8, 9, 16), bool], Tensor[(1, 1152), float32], Tensor[(98, 2), float64], Tensor[(7, 4, 7), float64]) */
}

def @func_362() -> Tensor[(5, 11, 4), float32] {
  %233 = fn () -> Tensor[(5, 11, 4), float32] {
    %227 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 11, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
    %228 = sin(%227) /* ty=Tensor[(5, 11, 4), float32] */;
    %229 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 11, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
    %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
    %231 = cast(%228, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
    %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%231, %232) /* ty=Tensor[(5, 11, 4), float32] */
  };
  %233() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_684() -> (Tensor[(5, 11, 4), float32],) {
  %234 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  (%234,)
}

def @func_6587(%var_6586: int32) -> (Tensor[(5, 11, 4), float32], int32, Tensor[(48), int32], Tensor[(1, 6, 8), float32]) {
  %245 = fn (%var_6573: int32) -> (Tensor[(5, 11, 4), float32], int32, Tensor[(48), int32], Tensor[(1, 6, 8), float32]) {
    %235 = @func_4208() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %236 = cast(%var_6573, dtype="int32") /* ty=int32 */;
    %237 = cast(meta[relay.Constant][10] /* ty=Tensor[(48), int32] */, dtype="int32") /* ty=Tensor[(48), int32] */;
    %238 = reshape(%236, newshape=[]) /* ty=int32 */;
    %239 = reshape(%237, newshape=[1, 6, 8]) /* ty=Tensor[(1, 6, 8), int32] */;
    %240 = @func_182(%238, %239) /* ty=(Tensor[(1, 6, 8), int32],) */;
    %241 = %240.0;
    %242 = cast(%241, dtype="float32") /* ty=Tensor[(1, 6, 8), float32] */;
    %243 = %235.0;
    %244 = log10(%242) /* ty=Tensor[(1, 6, 8), float32] */;
    (%243, %var_6573, meta[relay.Constant][10] /* ty=Tensor[(48), int32] */, %244)
  };
  %245(%var_6586) /* ty=(Tensor[(5, 11, 4), float32], int32, Tensor[(48), int32], Tensor[(1, 6, 8), float32]) */
}

def @func_1925() -> (Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) {
  %246 = @func_1398() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64]) */;
  %247 = @func_1368() /* ty=(Tensor[(12, 7, 14), float32],) */;
  %248 = %247.0;
  %249 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 7, 14), float32] */, dtype="uint8") /* ty=Tensor[(12, 7, 14), uint8] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%248, dtype="uint8") /* ty=Tensor[(12, 7, 14), uint8] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %253 = %246.0;
  %254 = maximum(%251, %252) /* ty=Tensor[(12, 7, 14), uint8] */;
  (%253, %254)
}

def @func_4589(%var_4587: Tensor[(1, 2, 14), int8], %var_4588: Tensor[(15, 2, 14), int8]) -> Tensor[(15, 2, 14), int8] {
  %257 = fn (%var_4569: Tensor[(1, 2, 14), int8], %var_4570: Tensor[(15, 2, 14), int8]) -> Tensor[(15, 2, 14), int8] {
    %255 = cast(%var_4569, dtype="int8") /* ty=Tensor[(1, 2, 14), int8] */;
    %256 = cast(%var_4570, dtype="int8") /* ty=Tensor[(15, 2, 14), int8] */;
    maximum(%255, %256) /* ty=Tensor[(15, 2, 14), int8] */
  };
  %257(%var_4587, %var_4588) /* ty=Tensor[(15, 2, 14), int8] */
}

def @func_9478() -> Tensor[(11, 11, 7), bool] {
  %259 = fn () -> Tensor[(11, 11, 7), bool] {
    %258 = @func_2197() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145), float32], Tensor[(11, 11, 7), bool], Tensor[(5, 11, 4), float32]) */;
    %258.3
  };
  %259() /* ty=Tensor[(11, 11, 7), bool] */
}

def @func_9342() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %260 = @func_3698() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %261 = @func_5693() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %262 = %260.0;
  %263 = @func_7773() /* ty=Tensor[(5, 11, 4), float32] */;
  %264 = %261.0;
  (%262, %263, %264)
}

def @func_3510() -> (Tensor[(5, 11, 4), float32], float32, Tensor[(98), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 7, 1), float64]) {
  @func_3508() /* ty=(Tensor[(5, 11, 4), float32], float32, Tensor[(98), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 7, 1), float64]) */
}

def @func_7100() -> Tensor[(5, 11, 4), float32] {
  @func_7098() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_9114() -> (Tensor[(5, 11, 4), float32],) {
  @func_9112() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_9619() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(11, 11, 7), bool]) {
  %274 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(11, 11, 7), bool]) {
    %265 = @func_1846() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %266 = %265.0;
    %267 = cast(%266, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
    %268 = cast(%266, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
    %269 = reshape(%267, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float32] */;
    %270 = reshape(%268, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), bool] */;
    %271 = @func_573(%269, %270) /* ty=(Tensor[(5, 11, 4), float64],) */;
    %272 = %271.0;
    %273 = @func_9477() /* ty=Tensor[(11, 11, 7), bool] */;
    (%266, %272, %273)
  };
  %274() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(11, 11, 7), bool]) */
}

def @func_4537() -> (Tensor[(5, 11, 4), float32],) {
  %275 = @func_2832() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %276 = %275.0;
  (%276,)
}

def @func_6802() -> (Tensor[(5, 11, 4), float64],) {
  %277 = @func_6405() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) */;
  %278 = %277.1;
  (%278,)
}

def @func_629(%var_621: float32, %var_622: Tensor[(14, 7, 1), float32]) -> (Tensor[(14, 7, 1), float32],) {
  %279 = cast(%var_621, dtype="float32") /* ty=float32 */;
  %280 = cast(%var_622, dtype="float32") /* ty=Tensor[(14, 7, 1), float32] */;
  %281 = minimum(%279, %280) /* ty=Tensor[(14, 7, 1), float32] */;
  (%281,)
}

def @func_8661() -> (Tensor[(196), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  @func_8659() /* ty=(Tensor[(196), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */
}

def @func_9068(%var_9067: Tensor[(14, 2, 13), int16]) -> (Tensor[(14, 2, 13), bool], Tensor[(14, 2, 13), float32]) {
  %289 = fn (%var_9037: Tensor[(14, 2, 13), int16]) -> (Tensor[(14, 2, 13), bool], Tensor[(14, 2, 13), float32]) {
    %282 = cast(%var_9037, dtype="bool") /* ty=Tensor[(14, 2, 13), bool] */;
    %283 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(14, 2, 13), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %284 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 2, 13), int16] */, dtype="bool") /* ty=Tensor[(14, 2, 13), bool] */;
    %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %286 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 2, 13), int16] */, dtype="float32") /* ty=Tensor[(14, 2, 13), float32] */;
    %287 = equal(%284, %285) /* ty=Tensor[(14, 2, 13), bool] */;
    %288 = cosh(%286) /* ty=Tensor[(14, 2, 13), float32] */;
    (%287, %288)
  };
  %289(%var_9067) /* ty=(Tensor[(14, 2, 13), bool], Tensor[(14, 2, 13), float32]) */
}

def @func_9720(%var_9717: Tensor[(14, 9, 5), uint16], %var_9718: Tensor[(96), int32], %var_9719: Tensor[(28), int8]) -> (Tensor[(14, 9, 5), uint16], Tensor[(96), int32], Tensor[(98), float32], Tensor[(15, 2, 14), int8], Tensor[(420), int8], Tensor[(28), uint64]) {
  @func_9715(%var_9717, %var_9718, %var_9719) /* ty=(Tensor[(14, 9, 5), uint16], Tensor[(96), int32], Tensor[(98), float32], Tensor[(15, 2, 14), int8], Tensor[(420), int8], Tensor[(28), uint64]) */
}

def @func_5526(%var_5525: Tensor[(5, 13, 15), float64]) -> (Tensor[(5, 13, 15), bool], Tensor[(5, 11, 4), float32]) {
  %298 = fn (%var_5516: Tensor[(5, 13, 15), float64]) -> (Tensor[(5, 13, 15), bool], Tensor[(5, 11, 4), float32]) {
    %290 = @func_4091() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 13, 15), float64]) */;
    %291 = %290.1;
    %292 = cast(%var_5516, dtype="bool") /* ty=Tensor[(5, 13, 15), bool] */;
    %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
    %294 = cast(%291, dtype="bool") /* ty=Tensor[(5, 13, 15), bool] */;
    %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %296 = logical_and(%294, %295) /* ty=Tensor[(5, 13, 15), bool] */;
    %297 = @func_5442() /* ty=Tensor[(5, 11, 4), float32] */;
    (%296, %297)
  };
  %298(%var_5525) /* ty=(Tensor[(5, 13, 15), bool], Tensor[(5, 11, 4), float32]) */
}

def @func_5846() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(7, 8, 7), bool], Tensor[(392), float32]) {
  %307 = fn () -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(7, 8, 7), bool], Tensor[(392), float32]) {
    %299 = @func_4146() /* ty=Tensor[(5, 11, 4), float64] */;
    %300 = cast(%299, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
    %301 = cast(meta[relay.Constant][13] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
    %302 = reshape(%301, newshape=[7, 8, 7]) /* ty=Tensor[(7, 8, 7), float32] */;
    %303 = @func_1587(%302) /* ty=(Tensor[(7, 8, 7), bool],) */;
    %304 = @func_1955() /* ty=Tensor[(5, 11, 4), float64] */;
    %305 = acos(%300) /* ty=Tensor[(5, 11, 4), float32] */;
    %306 = %303.0;
    (%304, %305, %306, meta[relay.Constant][13] /* ty=Tensor[(392), float32] */)
  };
  %307() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(7, 8, 7), bool], Tensor[(392), float32]) */
}

def @func_9190() -> (Tensor[(11, 13, 15), int16],) {
  %310 = fn () -> (Tensor[(11, 13, 15), int16],) {
    %308 = @func_7297() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16]) */;
    %309 = %308.1;
    (%309,)
  };
  %310() /* ty=(Tensor[(11, 13, 15), int16],) */
}

def @func_5709(%var_5707: Tensor[(3, 8, 16), uint32], %var_5708: Tensor[(3, 8, 16), uint32]) -> (Tensor[(3, 8, 16), uint32],) {
  %316 = fn (%var_5700: Tensor[(3, 8, 16), uint32], %var_5701: Tensor[(3, 8, 16), uint32]) -> (Tensor[(3, 8, 16), uint32],) {
    %311 = cast(%var_5701, dtype="uint32") /* ty=Tensor[(3, 8, 16), uint32] */;
    %312 = shape_of(%var_5700, dtype="int32") /* ty=Tensor[(3), int32] */;
    %313 = cast(%var_5700, dtype="uint32") /* ty=Tensor[(3, 8, 16), uint32] */;
    %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %315 = logical_xor(%313, %314) /* ty=Tensor[(3, 8, 16), uint32] */;
    (%315,)
  };
  %316(%var_5707, %var_5708) /* ty=(Tensor[(3, 8, 16), uint32],) */
}

def @func_8906() -> Tensor[(5, 11, 4), float32] {
  @func_8904() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_5175(%var_5172: Tensor[(7, 4, 7), float64], %var_5173: int32, %var_5174: Tensor[(48), int32]) -> (Tensor[(7, 4, 7), uint64], Tensor[(5, 11, 4), bool], Tensor[(48), int32], int32, Tensor[(48), int32]) {
  %330 = fn (%var_5129: Tensor[(7, 4, 7), float64], %var_5155: int32, %var_5156: Tensor[(48), int32]) -> (Tensor[(7, 4, 7), uint64], Tensor[(5, 11, 4), bool], Tensor[(48), int32], int32, Tensor[(48), int32]) {
    %317 = @func_1794() /* ty=Tensor[(7, 4, 7), float64] */;
    %318 = cast(%var_5129, dtype="uint64") /* ty=Tensor[(7, 4, 7), uint64] */;
    %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
    %320 = cast(%317, dtype="uint64") /* ty=Tensor[(7, 4, 7), uint64] */;
    %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %322 = cast(%var_5155, dtype="int32") /* ty=int32 */;
    %323 = cast(%var_5156, dtype="int32") /* ty=Tensor[(48), int32] */;
    %324 = reshape(%322, newshape=[]) /* ty=int32 */;
    %325 = reshape(%323, newshape=[48]) /* ty=Tensor[(48), int32] */;
    %326 = @func_1255(%324, %325) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(1, 6, 8), int32], int32, Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
    %327 = subtract(%320, %321) /* ty=Tensor[(7, 4, 7), uint64] */;
    %328 = @func_1758() /* ty=Tensor[(5, 11, 4), bool] */;
    %329 = %326.5;
    (%327, %328, %329, %var_5155, %var_5156)
  };
  %330(%var_5172, %var_5173, %var_5174) /* ty=(Tensor[(7, 4, 7), uint64], Tensor[(5, 11, 4), bool], Tensor[(48), int32], int32, Tensor[(48), int32]) */
}

def @func_482() -> Tensor[(5, 11, 4), float32] {
  @func_480() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_749(%var_730: float32) -> (Tensor[(5, 11, 4), float32], Tensor[(98), float32], Tensor[(14, 7, 1), bool]) {
  %331 = cast(%var_730, dtype="float32") /* ty=float32 */;
  %332 = cast(meta[relay.Constant][14] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %333 = reshape(%331, newshape=[]) /* ty=float32 */;
  %334 = reshape(%332, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), float32] */;
  %335 = @func_629(%333, %334) /* ty=(Tensor[(14, 7, 1), float32],) */;
  %336 = %335.0;
  %337 = cast(%336, dtype="float32") /* ty=Tensor[(14, 7, 1), float32] */;
  %338 = sinh(%337) /* ty=Tensor[(14, 7, 1), float32] */;
  %339 = cast(%338, dtype="bool") /* ty=Tensor[(14, 7, 1), bool] */;
  %340 = cast(%var_730, dtype="bool") /* ty=bool */;
  %341 = @func_480() /* ty=Tensor[(5, 11, 4), float32] */;
  %342 = logical_and(%339, %340) /* ty=Tensor[(14, 7, 1), bool] */;
  (%341, meta[relay.Constant][14] /* ty=Tensor[(98), float32] */, %342)
}

def @func_3539() -> (Tensor[(7, 4, 7), float64],) {
  @func_3537() /* ty=(Tensor[(7, 4, 7), float64],) */
}

def @func_7098() -> Tensor[(5, 11, 4), float32] {
  @func_1072() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_8890(%var_8888: Tensor[(10, 8, 14), uint8], %var_8889: Tensor[(10, 8, 14), uint8]) -> (Tensor[(10, 8, 14), bool], Tensor[(5, 11, 4), float64], Tensor[(10, 8, 14), bool]) {
  @func_8886(%var_8888, %var_8889) /* ty=(Tensor[(10, 8, 14), bool], Tensor[(5, 11, 4), float64], Tensor[(10, 8, 14), bool]) */
}

def @func_1795() -> Tensor[(7, 4, 7), float64] {
  %344 = fn () -> Tensor[(7, 4, 7), float64] {
    %343 = @func_1043() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) */;
    %343.1
  };
  %344() /* ty=Tensor[(7, 4, 7), float64] */
}

def @func_9533() -> (Tensor[(5, 11, 4), float64],) {
  @func_9531() /* ty=(Tensor[(5, 11, 4), float64],) */
}

def @func_5879() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  @func_5877() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_4028(%var_4026: Tensor[(5, 11, 4), float32]) -> (Tensor[(5, 11, 4), int16],) {
  @func_4025(%var_4026) /* ty=(Tensor[(5, 11, 4), int16],) */
}

def @func_5734() -> Tensor[(5, 11, 4), float64] {
  @func_5732() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_7605() -> Tensor[(5, 11, 4), float32] {
  %346 = fn () -> Tensor[(5, 11, 4), float32] {
    %345 = @func_6453() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
    %345.0
  };
  %346() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_4434() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], int32, Tensor[(2145), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %347 = @func_1344() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %348 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %349 = cast(meta[relay.Constant][15] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %350 = reshape(%348, newshape=[]) /* ty=int32 */;
  %351 = reshape(%349, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %352 = @func_2728(%350, %351) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(1, 6, 8), int32], Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(2145), float32], Tensor[(11, 11, 7), uint16], Tensor[(847), uint16], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float64], Tensor[(11, 13, 15), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %353 = @func_1846() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %354 = %347.0;
  %355 = %352.1;
  %356 = @func_3993() /* ty=Tensor[(5, 11, 4), float64] */;
  %357 = %353.0;
  %358 = @func_1072() /* ty=Tensor[(5, 11, 4), float32] */;
  (%354, %355, 4 /* ty=int32 */, meta[relay.Constant][15] /* ty=Tensor[(2145), float32] */, %356, %357, %358)
}

def @func_5624() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %362 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
    %359 = @func_859() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %360 = %359.0;
    %361 = @func_1072() /* ty=Tensor[(5, 11, 4), float32] */;
    (%360, %361)
  };
  %362() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_2937() -> (Tensor[(5, 11, 4), float64],) {
  %365 = fn () -> (Tensor[(5, 11, 4), float64],) {
    %363 = @func_1043() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) */;
    %364 = %363.3;
    (%364,)
  };
  %365() /* ty=(Tensor[(5, 11, 4), float64],) */
}

def @func_7869() -> Tensor[(5, 11, 4), float64] {
  %366 = @func_3698() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %366.1
}

def @func_8659() -> (Tensor[(196), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %367 = @func_5953() /* ty=(Tensor[(196), float64],) */;
  %368 = @func_3008() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %369 = %367.0;
  %370 = @func_7098() /* ty=Tensor[(5, 11, 4), float32] */;
  %371 = %368.0;
  (%369, %370, %371)
}

def @func_9514() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) {
  @func_9512() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) */
}

def @func_3747() -> (Tensor[(5, 13, 15), float64],) {
  @func_3745() /* ty=(Tensor[(5, 13, 15), float64],) */
}

def @func_412() -> Tensor[(5, 11, 4), float32] {
  @func_361() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_7383() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), int32], Tensor[(5, 13, 15), float64]) {
  %372 = @func_5667() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %373 = @func_6354() /* ty=(Tensor[(5, 11, 4), int32],) */;
  %374 = @func_3745() /* ty=(Tensor[(5, 13, 15), float64],) */;
  %375 = @func_5462() /* ty=Tensor[(5, 11, 4), float32] */;
  %376 = %372.0;
  %377 = %373.0;
  %378 = %374.0;
  (%375, %376, %377, %378)
}

def @func_1344() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %379 = @func_412() /* ty=Tensor[(5, 11, 4), float32] */;
  %380 = cast(%379, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %381 = reshape(%380, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %382 = @func_791(%381) /* ty=Tensor[(5, 11, 4), float32] */;
  (%379, %382)
}

def @func_3745() -> (Tensor[(5, 13, 15), float64],) {
  %383 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 13, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 13, 15), float64] */;
  %384 = atanh(%383) /* ty=Tensor[(5, 13, 15), float64] */;
  (%384,)
}

def @func_5669() -> (Tensor[(5, 11, 4), float32],) {
  @func_5667() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_2199() -> (Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145), float32], Tensor[(11, 11, 7), bool], Tensor[(5, 11, 4), float32]) {
  @func_2197() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145), float32], Tensor[(11, 11, 7), bool], Tensor[(5, 11, 4), float32]) */
}

def @func_5095() -> (Tensor[(12, 7, 14), float64],) {
  %389 = fn () -> (Tensor[(12, 7, 14), float64],) {
    %385 = @func_1368() /* ty=(Tensor[(12, 7, 14), float32],) */;
    %386 = %385.0;
    %387 = cast(%386, dtype="float64") /* ty=Tensor[(12, 7, 14), float64] */;
    %388 = acosh(%387) /* ty=Tensor[(12, 7, 14), float64] */;
    (%388,)
  };
  %389() /* ty=(Tensor[(12, 7, 14), float64],) */
}

def @func_5442() -> Tensor[(5, 11, 4), float32] {
  @func_3850() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_1883() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %390 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
  %391 = cast(%390, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %392 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  %393 = asinh(%391) /* ty=Tensor[(5, 11, 4), float32] */;
  (%392, %393)
}

def @func_5945(%var_5904: Tensor[(5, 15, 13), int8], %var_5912: Tensor[(5, 15, 13), int8]) -> (Tensor[(5, 15, 13), bool], Tensor[(5, 15, 13), int32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %394 = cast(%var_5904, dtype="bool") /* ty=Tensor[(5, 15, 13), bool] */;
  %395 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(5, 15, 13), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 15, 13), int8] */, dtype="bool") /* ty=Tensor[(5, 15, 13), bool] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %398 = cast(%var_5912, dtype="int32") /* ty=Tensor[(5, 15, 13), int32] */;
  %399 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(5, 15, 13), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 15, 13), int8] */, dtype="int32") /* ty=Tensor[(5, 15, 13), int32] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %402 = @func_2412() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %403 = less_equal(%396, %397) /* ty=Tensor[(5, 15, 13), bool] */;
  %404 = bitwise_and(%400, %401) /* ty=Tensor[(5, 15, 13), int32] */;
  %405 = %402.0;
  %406 = @func_5442() /* ty=Tensor[(5, 11, 4), float32] */;
  (%403, %404, %405, %406)
}

def @func_3807() -> (Tensor[(16, 7, ?), uint64],) {
  %414 = fn () -> (Tensor[(16, 7, ?), uint64],) {
    %407 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 7, 1), float32] */, dtype="float32") /* ty=Tensor[(16, 7, 1), float32] */;
    %408 = tan(%407) /* ty=Tensor[(16, 7, 1), float32] */;
    %409 = cast(%408, dtype="uint64") /* ty=Tensor[(16, 7, 1), uint64] */;
    %410 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(16, 7, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %411 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 7, 1), float32] */, dtype="uint64") /* ty=Tensor[(16, 7, 1), uint64] */;
    %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %413 = subtract(%411, %412) /* ty=Tensor[(16, 7, ?), uint64] */;
    (%413,)
  };
  %414() /* ty=(Tensor[(16, 7, ?), uint64],) */
}

def @func_1885() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  @func_1883() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_5667() -> (Tensor[(5, 11, 4), float32],) {
  %415 = @func_480() /* ty=Tensor[(5, 11, 4), float32] */;
  (%415,)
}

def @func_8442(%var_8440: Tensor[(2, 6, 8), int32]) -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(12, 4), int32], Tensor[(2, 6, 8), bool], Tensor[(5, 11, 4), float32], Tensor[(2, 6, 8), uint8], float32, Tensor[(98), float32]) {
  @func_8439(%var_8440) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(12, 4), int32], Tensor[(2, 6, 8), bool], Tensor[(5, 11, 4), float32], Tensor[(2, 6, 8), uint8], float32, Tensor[(98), float32]) */
}

def @func_5852() -> Tensor[(5, 11, 4), float32] {
  %416 = @func_4533() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(16, 7, ?), uint64], Tensor[(5, 11, 4), float32]) */;
  %416.3
}

def @func_8031() -> (Tensor[(5, 11, 4), float32],) {
  %419 = fn () -> (Tensor[(5, 11, 4), float32],) {
    %417 = @func_5693() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %418 = %417.0;
    (%418,)
  };
  %419() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_3009() -> (Tensor[(5, 11, 4), float64],) {
  %422 = fn () -> (Tensor[(5, 11, 4), float64],) {
    %420 = @func_1398() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64]) */;
    %421 = %420.2;
    (%421,)
  };
  %422() /* ty=(Tensor[(5, 11, 4), float64],) */
}

def @func_3995() -> Tensor[(5, 11, 4), float64] {
  @func_3993() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_9715(%var_9659: Tensor[(14, 9, 5), uint16], %var_9676: Tensor[(96), int32], %var_9701: Tensor[(28), int8]) -> (Tensor[(14, 9, 5), uint16], Tensor[(96), int32], Tensor[(98), float32], Tensor[(15, 2, 14), int8], Tensor[(420), int8], Tensor[(28), uint64]) {
  %423 = cast(%var_9659, dtype="uint16") /* ty=Tensor[(14, 9, 5), uint16] */;
  %424 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(14, 9, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 9, 5), uint16] */, dtype="uint16") /* ty=Tensor[(14, 9, 5), uint16] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %427 = cast(%var_9676, dtype="int32") /* ty=Tensor[(96), int32] */;
  %428 = reshape(%427, newshape=[2, 6, 8]) /* ty=Tensor[(2, 6, 8), int32] */;
  %429 = @func_8439(%428) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(12, 4), int32], Tensor[(2, 6, 8), bool], Tensor[(5, 11, 4), float32], Tensor[(2, 6, 8), uint8], float32, Tensor[(98), float32]) */;
  %430 = %429.7;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(98), float32] */;
  %432 = cast(meta[relay.Constant][20] /* ty=Tensor[(28), int8] */, dtype="int8") /* ty=Tensor[(28), int8] */;
  %433 = cast(meta[relay.Constant][21] /* ty=Tensor[(420), int8] */, dtype="int8") /* ty=Tensor[(420), int8] */;
  %434 = reshape(%432, newshape=[1, 2, 14]) /* ty=Tensor[(1, 2, 14), int8] */;
  %435 = reshape(%433, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), int8] */;
  %436 = cast(%var_9701, dtype="uint64") /* ty=Tensor[(28), uint64] */;
  %437 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(28), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %438 = cast(meta[relay.Constant][20] /* ty=Tensor[(28), int8] */, dtype="uint64") /* ty=Tensor[(28), uint64] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %440 = add(%425, %426) /* ty=Tensor[(14, 9, 5), uint16] */;
  %441 = asin(%431) /* ty=Tensor[(98), float32] */;
  %442 = @func_4586(%434, %435) /* ty=Tensor[(15, 2, 14), int8] */;
  %443 = logical_xor(%438, %439) /* ty=Tensor[(28), uint64] */;
  (%440, %var_9676, %441, %442, meta[relay.Constant][21] /* ty=Tensor[(420), int8] */, %443)
}

def @func_7144(%var_7143: Tensor[(98), float32]) -> (float32, Tensor[(14, 7, 1), float32], Tensor[(98), float32]) {
  %452 = fn (%var_7129: Tensor[(98), float32]) -> (float32, Tensor[(14, 7, 1), float32], Tensor[(98), float32]) {
    %444 = @func_3508() /* ty=(Tensor[(5, 11, 4), float32], float32, Tensor[(98), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 7, 1), float64]) */;
    %445 = %444.1;
    %446 = cast(%445, dtype="float32") /* ty=float32 */;
    %447 = cast(%var_7129, dtype="float32") /* ty=Tensor[(98), float32] */;
    %448 = reshape(%446, newshape=[]) /* ty=float32 */;
    %449 = reshape(%447, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), float32] */;
    %450 = @func_629(%448, %449) /* ty=(Tensor[(14, 7, 1), float32],) */;
    %451 = %450.0;
    (%445, %451, %var_7129)
  };
  %452(%var_7143) /* ty=(float32, Tensor[(14, 7, 1), float32], Tensor[(98), float32]) */
}

def @func_2412() -> (Tensor[(5, 11, 4), float32],) {
  %453 = @func_2087() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %454 = %453.0;
  (%454,)
}

def @func_8496() -> Tensor[(5, 11, 4), float32] {
  @func_5442() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_4436() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], int32, Tensor[(2145), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  @func_4434() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], int32, Tensor[(2145), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_2310() -> (Tensor[(5, 11, 4), float32],) {
  %455 = @func_1425() /* ty=Tensor[(5, 11, 4), float32] */;
  (%455,)
}

def @func_4344(%var_4340: Tensor[(8, 6, 13), float64], %var_4341: Tensor[(196), float64], %var_4342: Tensor[(7, 4, 7), float64], %var_4343: Tensor[(220), float64]) -> (Tensor[(8, 6, 13), float64], Tensor[(196), float64], Tensor[(7, 4, 7), bool], Tensor[(8, 6, 13), float64], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float32], Tensor[(220), float64]) {
  %475 = fn (%var_4283: Tensor[(8, 6, 13), float64], %var_4288: Tensor[(196), float64], %var_4292: Tensor[(7, 4, 7), float64], %var_4336: Tensor[(220), float64]) -> (Tensor[(8, 6, 13), float64], Tensor[(196), float64], Tensor[(7, 4, 7), bool], Tensor[(8, 6, 13), float64], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float32], Tensor[(220), float64]) {
    %456 = cast(%var_4283, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
    %457 = cast(%var_4288, dtype="float64") /* ty=Tensor[(196), float64] */;
    %458 = cast(%var_4288, dtype="float64") /* ty=Tensor[(196), float64] */;
    %459 = reshape(%457, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
    %460 = reshape(%458, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
    %461 = @func_884(%459, %460) /* ty=Tensor[(7, 4, 7), float64] */;
    %462 = cast(%var_4292, dtype="bool") /* ty=Tensor[(7, 4, 7), bool] */;
    %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
    %464 = cast(%461, dtype="bool") /* ty=Tensor[(7, 4, 7), bool] */;
    %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %466 = cast(%var_4283, dtype="float64") /* ty=Tensor[(8, 6, 13), float64] */;
    %467 = cast(%461, dtype="float64") /* ty=Tensor[(7, 4, 7), float64] */;
    %468 = cast(%var_4336, dtype="float64") /* ty=Tensor[(220), float64] */;
    %469 = reshape(%468, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
    %470 = sqrt(%456) /* ty=Tensor[(8, 6, 13), float64] */;
    %471 = less_equal(%464, %465) /* ty=Tensor[(7, 4, 7), bool] */;
    %472 = tan(%466) /* ty=Tensor[(8, 6, 13), float64] */;
    %473 = atanh(%467) /* ty=Tensor[(7, 4, 7), float64] */;
    %474 = @func_791(%469) /* ty=Tensor[(5, 11, 4), float32] */;
    (%470, %var_4288, %471, %472, %473, %474, %var_4336)
  };
  %475(%var_4340, %var_4341, %var_4342, %var_4343) /* ty=(Tensor[(8, 6, 13), float64], Tensor[(196), float64], Tensor[(7, 4, 7), bool], Tensor[(8, 6, 13), float64], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float32], Tensor[(220), float64]) */
}

def @func_1589(%var_1588: Tensor[(7, 8, 7), float32]) -> (Tensor[(7, 8, 7), bool],) {
  %481 = fn (%var_1582: Tensor[(7, 8, 7), float32]) -> (Tensor[(7, 8, 7), bool],) {
    %476 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 8, 7), float32] */, dtype="bool") /* ty=Tensor[(7, 8, 7), bool] */;
    %477 = shape_of(%var_1582, dtype="int32") /* ty=Tensor[(3), int32] */;
    %478 = cast(%var_1582, dtype="bool") /* ty=Tensor[(7, 8, 7), bool] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %480 = equal(%478, %479) /* ty=Tensor[(7, 8, 7), bool] */;
    (%480,)
  };
  %481(%var_1588) /* ty=(Tensor[(7, 8, 7), bool],) */
}

def @func_2197() -> (Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145), float32], Tensor[(11, 11, 7), bool], Tensor[(5, 11, 4), float32]) {
  %482 = @func_1719() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %483 = cast(meta[relay.Constant][23] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %484 = cast(meta[relay.Constant][23] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %485 = reshape(%483, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float32] */;
  %486 = reshape(%484, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float32] */;
  %487 = @func_1001(%485, %486) /* ty=(Tensor[(11, 13, 15), int16],) */;
  %488 = cast(meta[relay.Constant][24] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %489 = cast(meta[relay.Constant][24] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %490 = reshape(%488, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), uint16] */;
  %491 = reshape(%489, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), uint16] */;
  %492 = @func_1824(%490, %491) /* ty=(Tensor[(11, 11, 7), uint16], Tensor[(12, 7, 14), float32]) */;
  %493 = %492.0;
  %494 = cast(meta[relay.Constant][24] /* ty=Tensor[(847), uint16] */, dtype="bool") /* ty=Tensor[(847), bool] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%493, dtype="bool") /* ty=Tensor[(11, 11, 7), bool] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %498 = %482.1;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %500 = reshape(%499, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %501 = @func_941(%500) /* ty=(Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32]) */;
  %502 = %487.0;
  %503 = less_equal(%496, %497) /* ty=Tensor[(11, 11, 7), bool] */;
  %504 = %501.1;
  (%498, %502, meta[relay.Constant][23] /* ty=Tensor[(2145), float32] */, %503, %504)
}

def @func_3653() -> Tensor[(5, 11, 4), float32] {
  %505 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %505.0
}

def @func_8535() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  @func_8533() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */
}

def @func_9760() -> (Tensor[(5, 11, 4), float32],) {
  %506 = @func_5462() /* ty=Tensor[(5, 11, 4), float32] */;
  (%506,)
}

def @func_4147() -> Tensor[(5, 11, 4), float64] {
  %508 = fn () -> Tensor[(5, 11, 4), float64] {
    %507 = @func_1398() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64]) */;
    %507.1
  };
  %508() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_1425() -> Tensor[(5, 11, 4), float32] {
  @func_412() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_3073() -> (Tensor[(5, 11, 4), float64],) {
  %509 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
  (%509,)
}

def @func_3211() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %510 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %512 = reshape(%511, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %513 = @func_941(%512) /* ty=(Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32]) */;
  %514 = @func_1883() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %515 = %513.0;
  %516 = %514.0;
  %517 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  (%510, %515, %516, %517)
}

def @func_1045() -> (Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) {
  @func_1043() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) */
}

def @func_1259(%var_1257: int32, %var_1258: Tensor[(48), int32]) -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(1, 6, 8), int32], int32, Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  @func_1255(%var_1257, %var_1258) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(1, 6, 8), int32], int32, Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_414() -> Tensor[(5, 11, 4), float32] {
  @func_412() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_3213() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  @func_3211() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_2087() -> (Tensor[(5, 11, 4), float32],) {
  %518 = @func_1344() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %519 = %518.0;
  (%519,)
}

def @func_3847() -> Tensor[(12, 7, 14), uint8] {
  %521 = fn () -> Tensor[(12, 7, 14), uint8] {
    %520 = @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */;
    %520.1
  };
  %521() /* ty=Tensor[(12, 7, 14), uint8] */
}

def @func_4539() -> (Tensor[(5, 11, 4), float32],) {
  @func_4537() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_1828(%var_1826: Tensor[(11, 11, 7), uint16], %var_1827: Tensor[(11, 11, 7), uint16]) -> (Tensor[(11, 11, 7), uint16], Tensor[(12, 7, 14), float32]) {
  @func_1824(%var_1826, %var_1827) /* ty=(Tensor[(11, 11, 7), uint16], Tensor[(12, 7, 14), float32]) */
}

def @func_526() -> Tensor[(5, 11, 4), float64] {
  @func_397() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_8755() -> Tensor[(5, 11, 4), float32] {
  %522 = @func_8030() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %522.0
}

def @func_3508() -> (Tensor[(5, 11, 4), float32], float32, Tensor[(98), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 7, 1), float64]) {
  %523 = @func_1398() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64]) */;
  %524 = @func_3008() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %525 = cast(1.59581f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %526 = cast(meta[relay.Constant][25] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %527 = reshape(%525, newshape=[]) /* ty=float32 */;
  %528 = reshape(%526, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), float32] */;
  %529 = @func_629(%527, %528) /* ty=(Tensor[(14, 7, 1), float32],) */;
  %530 = %529.0;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(14, 7, 1), float64] */;
  %532 = %523.0;
  %533 = @func_3340() /* ty=Tensor[(5, 11, 4), float32] */;
  %534 = %524.0;
  %535 = acosh(%531) /* ty=Tensor[(14, 7, 1), float64] */;
  (%532, 1.59581f /* ty=float32 */, meta[relay.Constant][25] /* ty=Tensor[(98), float32] */, %533, %534, %535)
}

def @func_8975() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) {
  %536 = @func_5623() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %537 = @func_7510() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */;
  %538 = %536.0;
  %539 = @func_1955() /* ty=Tensor[(5, 11, 4), float64] */;
  %540 = %537.0;
  (%538, %539, %540)
}

def @func_5694() -> (Tensor[(5, 11, 4), float32],) {
  %543 = fn () -> (Tensor[(5, 11, 4), float32],) {
    %541 = @func_4208() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %542 = %541.0;
    (%542,)
  };
  %543() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_6222() -> Tensor[(5, 11, 4), float64] {
  %544 = @func_3073() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %544.0
}

def @func_5074(%var_5073: Tensor[(12, 7, 14), uint8]) -> (Tensor[(12, 7, 14), float32],) {
  %552 = fn (%var_5064: Tensor[(12, 7, 14), uint8]) -> (Tensor[(12, 7, 14), float32],) {
    %545 = @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */;
    %546 = %545.1;
    %547 = cast(%var_5064, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
    %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
    %549 = cast(%546, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
    %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %551 = mod(%549, %550) /* ty=Tensor[(12, 7, 14), float32] */;
    (%551,)
  };
  %552(%var_5073) /* ty=(Tensor[(12, 7, 14), float32],) */
}

def @func_3850() -> Tensor[(5, 11, 4), float32] {
  %553 = @func_2197() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145), float32], Tensor[(11, 11, 7), bool], Tensor[(5, 11, 4), float32]) */;
  %553.0
}

def @func_8610() -> (Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  @func_8608() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */
}

def @func_2414() -> (Tensor[(5, 11, 4), float32],) {
  @func_2412() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_4534() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(16, 7, ?), uint64], Tensor[(5, 11, 4), float32]) {
  %561 = fn () -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(16, 7, ?), uint64], Tensor[(5, 11, 4), float32]) {
    %554 = @func_3008() /* ty=(Tensor[(5, 11, 4), float64],) */;
    %555 = @func_3806() /* ty=(Tensor[(16, 7, ?), uint64],) */;
    %556 = @func_1719() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
    %557 = %554.0;
    %558 = @func_3993() /* ty=Tensor[(5, 11, 4), float64] */;
    %559 = %555.0;
    %560 = %556.1;
    (%557, %558, %559, %560)
  };
  %561() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(16, 7, ?), uint64], Tensor[(5, 11, 4), float32]) */
}

def @func_1956() -> Tensor[(5, 11, 4), float64] {
  %565 = fn () -> Tensor[(5, 11, 4), float64] {
    %562 = @func_1846() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %563 = %562.0;
    %564 = cast(%563, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
    log2(%564) /* ty=Tensor[(5, 11, 4), float64] */
  };
  %565() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_9512() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) {
  %566 = @func_2197() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145), float32], Tensor[(11, 11, 7), bool], Tensor[(5, 11, 4), float32]) */;
  %567 = @func_4146() /* ty=Tensor[(5, 11, 4), float64] */;
  %568 = %566.0;
  (%567, %568)
}

def @func_4830(%var_4815: int32, %var_4816: Tensor[(48), int32]) -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], int32, Tensor[(48), int32]) {
  %569 = @func_3073() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %570 = %569.0;
  %571 = cast(%570, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %572 = reshape(%571, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float64] */;
  %573 = @func_941(%572) /* ty=(Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32]) */;
  %574 = cast(%var_4815, dtype="int32") /* ty=int32 */;
  %575 = cast(%var_4816, dtype="int32") /* ty=Tensor[(48), int32] */;
  %576 = reshape(%574, newshape=[]) /* ty=int32 */;
  %577 = reshape(%575, newshape=[48]) /* ty=Tensor[(48), int32] */;
  %578 = @func_1255(%576, %577) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(1, 6, 8), int32], int32, Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %579 = %573.1;
  %580 = %578.2;
  (%570, %579, %580, %var_4815, %var_4816)
}

def @func_8498() -> Tensor[(5, 11, 4), float32] {
  @func_8496() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_7773() -> Tensor[(5, 11, 4), float32] {
  @func_5442() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_9531() -> (Tensor[(5, 11, 4), float64],) {
  %581 = @func_3993() /* ty=Tensor[(5, 11, 4), float64] */;
  (%581,)
}

def @func_5984(%var_5982: Tensor[(12, 10, 12), int32]) -> (Tensor[(12, 10, 12), bool],) {
  @func_5981(%var_5982) /* ty=(Tensor[(12, 10, 12), bool],) */
}

def @func_5463() -> Tensor[(5, 11, 4), float32] {
  %583 = fn () -> Tensor[(5, 11, 4), float32] {
    %582 = @func_1883() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
    %582.1
  };
  %583() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_4208() -> (Tensor[(5, 11, 4), float32],) {
  %584 = @func_3211() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %585 = %584.1;
  %586 = cast(%585, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %587 = log10(%586) /* ty=Tensor[(5, 11, 4), float32] */;
  (%587,)
}

def @func_3075() -> (Tensor[(5, 11, 4), float64],) {
  @func_3073() /* ty=(Tensor[(5, 11, 4), float64],) */
}

def @func_4618(%var_4617: Tensor[(13, 11, 5), int64]) -> (Tensor[(13, 11, 5), bool],) {
  %593 = fn (%var_4605: Tensor[(13, 11, 5), int64]) -> (Tensor[(13, 11, 5), bool],) {
    %588 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 11, 5), int64] */, dtype="bool") /* ty=Tensor[(13, 11, 5), bool] */;
    %589 = shape_of(%var_4605, dtype="int32") /* ty=Tensor[(3), int32] */;
    %590 = cast(%var_4605, dtype="bool") /* ty=Tensor[(13, 11, 5), bool] */;
    %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %592 = greater_equal(%590, %591) /* ty=Tensor[(13, 11, 5), bool] */;
    (%592,)
  };
  %593(%var_4617) /* ty=(Tensor[(13, 11, 5), bool],) */
}

def @func_6285() -> Tensor[(5, 11, 4), float32] {
  @func_5852() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_9344() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  @func_9342() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_633(%var_631: float32, %var_632: Tensor[(14, 7, 1), float32]) -> (Tensor[(14, 7, 1), float32],) {
  @func_629(%var_631, %var_632) /* ty=(Tensor[(14, 7, 1), float32],) */
}

def @func_8472() -> Tensor[(5, 11, 4), float32] {
  @func_361() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_3698() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %594 = @func_1425() /* ty=Tensor[(5, 11, 4), float32] */;
  %595 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
  (%594, %595)
}

def @func_3619(%var_3607: Tensor[(1, 15, 10), float64]) -> (Tensor[(1, 15, 10), float64],) {
  %596 = cast(%var_3607, dtype="float64") /* ty=Tensor[(1, 15, 10), float64] */;
  %597 = tan(%596) /* ty=Tensor[(1, 15, 10), float64] */;
  (%597,)
}

def @func_4834(%var_4832: int32, %var_4833: Tensor[(48), int32]) -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], int32, Tensor[(48), int32]) {
  @func_4830(%var_4832, %var_4833) /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], int32, Tensor[(48), int32]) */
}

def @func_4210() -> (Tensor[(5, 11, 4), float32],) {
  @func_4208() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_9186() -> (Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float64]) {
  %604 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float64]) {
    %598 = @func_6429() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %599 = @func_7837() /* ty=(Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float32]) */;
    %600 = @func_3073() /* ty=(Tensor[(5, 11, 4), float64],) */;
    %601 = %598.0;
    %602 = %599.0;
    %603 = %600.0;
    (%601, %602, %603)
  };
  %604() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float64]) */
}

def @func_6429() -> (Tensor[(5, 11, 4), float32],) {
  %605 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %606 = %605.0;
  (%606,)
}

def @func_4092() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 13, 15), float64]) {
  %612 = fn () -> (Tensor[(5, 11, 4), float64], Tensor[(5, 13, 15), float64]) {
    %607 = @func_3653() /* ty=Tensor[(5, 11, 4), float32] */;
    %608 = cast(%607, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
    %609 = @func_3745() /* ty=(Tensor[(5, 13, 15), float64],) */;
    %610 = sinh(%608) /* ty=Tensor[(5, 11, 4), float64] */;
    %611 = %609.0;
    (%610, %611)
  };
  %612() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 13, 15), float64]) */
}

def @func_1005(%var_1003: Tensor[(11, 13, 15), float32], %var_1004: Tensor[(11, 13, 15), float32]) -> (Tensor[(11, 13, 15), int16],) {
  @func_1001(%var_1003, %var_1004) /* ty=(Tensor[(11, 13, 15), int16],) */
}

def @func_8439(%var_8375: Tensor[(2, 6, 8), int32]) -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(12, 4), int32], Tensor[(2, 6, 8), bool], Tensor[(5, 11, 4), float32], Tensor[(2, 6, 8), uint8], float32, Tensor[(98), float32]) {
  %613 = @func_4208() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %614 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %615 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 4), int32] */, dtype="int32") /* ty=Tensor[(12, 4), int32] */;
  %616 = reshape(%614, newshape=[]) /* ty=int32 */;
  %617 = reshape(%615, newshape=[48]) /* ty=Tensor[(48), int32] */;
  %618 = @func_4830(%616, %617) /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], int32, Tensor[(48), int32]) */;
  %619 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %620 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 4), int32] */, dtype="int32") /* ty=Tensor[(12, 4), int32] */;
  %621 = reshape(%619, newshape=[]) /* ty=int32 */;
  %622 = reshape(%620, newshape=[1, 6, 8]) /* ty=Tensor[(1, 6, 8), int32] */;
  %623 = @func_182(%621, %622) /* ty=(Tensor[(1, 6, 8), int32],) */;
  %624 = %623.0;
  %625 = cast(%624, dtype="bool") /* ty=Tensor[(1, 6, 8), bool] */;
  %626 = cast(%var_8375, dtype="bool") /* ty=Tensor[(2, 6, 8), bool] */;
  %627 = cast(-2 /* ty=int32 */, dtype="float64") /* ty=float64 */;
  %628 = cast(%var_8375, dtype="float64") /* ty=Tensor[(2, 6, 8), float64] */;
  %629 = floor_divide(%627, %628) /* ty=Tensor[(2, 6, 8), float64] */;
  %630 = cast(%624, dtype="uint8") /* ty=Tensor[(1, 6, 8), uint8] */;
  %631 = cast(%629, dtype="uint8") /* ty=Tensor[(2, 6, 8), uint8] */;
  %632 = cast(meta[relay.Constant][28] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %633 = reshape(%632, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %634 = @func_7142(%633) /* ty=(float32, Tensor[(14, 7, 1), float32], Tensor[(98), float32]) */;
  %635 = %613.0;
  %636 = %618.2;
  %637 = logical_or(%625, %626) /* ty=Tensor[(2, 6, 8), bool] */;
  %638 = @func_8180() /* ty=Tensor[(5, 11, 4), float32] */;
  %639 = bitwise_or(%630, %631) /* ty=Tensor[(2, 6, 8), uint8] */;
  %640 = %634.0;
  (%635, %636, meta[relay.Constant][27] /* ty=Tensor[(12, 4), int32] */, %637, %638, %639, %640, meta[relay.Constant][28] /* ty=Tensor[(98), float32] */)
}

def @func_7975() -> (Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), float32], Tensor[(12, 7, 14), uint8]) {
  %646 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), float32], Tensor[(12, 7, 14), uint8]) {
    %641 = @func_1846() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %642 = @func_6986() /* ty=(Tensor[(12, 7, 14), float32],) */;
    %643 = %641.0;
    %644 = %642.0;
    %645 = @func_7581() /* ty=Tensor[(12, 7, 14), uint8] */;
    (%643, %644, %645)
  };
  %646() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), float32], Tensor[(12, 7, 14), uint8]) */
}

def @func_9762() -> (Tensor[(5, 11, 4), float32],) {
  @func_9760() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_1043() -> (Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) {
  %647 = @func_859() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %648 = cast(meta[relay.Constant][29] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %649 = cast(meta[relay.Constant][29] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %650 = reshape(%648, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
  %651 = reshape(%649, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
  %652 = %647.0;
  %653 = cast(%652, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %654 = cast(%652, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %655 = reshape(%653, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float32] */;
  %656 = reshape(%654, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), bool] */;
  %657 = @func_573(%655, %656) /* ty=(Tensor[(5, 11, 4), float64],) */;
  %658 = @func_884(%650, %651) /* ty=Tensor[(7, 4, 7), float64] */;
  %659 = %657.0;
  (%652, %658, meta[relay.Constant][29] /* ty=Tensor[(196), float64] */, %659)
}

def @func_1369() -> (Tensor[(12, 7, 14), float32],) {
  %662 = fn () -> (Tensor[(12, 7, 14), float32],) {
    %660 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
    %661 = rsqrt(%660) /* ty=Tensor[(12, 7, 14), float32] */;
    (%661,)
  };
  %662() /* ty=(Tensor[(12, 7, 14), float32],) */
}

def @func_1720() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %666 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
    %663 = @func_859() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %664 = %663.0;
    %665 = @func_1091() /* ty=Tensor[(5, 11, 4), float32] */;
    (%664, %665)
  };
  %666() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_7583() -> Tensor[(12, 7, 14), uint8] {
  @func_7581() /* ty=Tensor[(12, 7, 14), uint8] */
}

def @func_6769(%var_6767: Tensor[(15, 4, 13), uint64], %var_6768: Tensor[(15, 4, 13), uint64]) -> Tensor[(15, 4, 13), uint64] {
  %671 = fn (%var_6761: Tensor[(15, 4, 13), uint64], %var_6762: Tensor[(15, 4, 13), uint64]) -> Tensor[(15, 4, 13), uint64] {
    %667 = cast(%var_6762, dtype="uint64") /* ty=Tensor[(15, 4, 13), uint64] */;
    %668 = shape_of(%var_6761, dtype="int32") /* ty=Tensor[(3), int32] */;
    %669 = cast(%var_6761, dtype="uint64") /* ty=Tensor[(15, 4, 13), uint64] */;
    %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    maximum(%669, %670) /* ty=Tensor[(15, 4, 13), uint64] */
  };
  %671(%var_6767, %var_6768) /* ty=Tensor[(15, 4, 13), uint64] */
}

def @func_2731(%var_2729: int32, %var_2730: Tensor[(2145), float32]) -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(1, 6, 8), int32], Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(2145), float32], Tensor[(11, 11, 7), uint16], Tensor[(847), uint16], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float64], Tensor[(11, 13, 15), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %707 = fn (%var_2643: int32, %var_2663: Tensor[(2145), float32]) -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(1, 6, 8), int32], Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(2145), float32], Tensor[(11, 11, 7), uint16], Tensor[(847), uint16], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float64], Tensor[(11, 13, 15), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
    %672 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %673 = @func_2310() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %674 = cast(%var_2643, dtype="int32") /* ty=int32 */;
    %675 = cast(meta[relay.Constant][31] /* ty=Tensor[(48), int32] */, dtype="int32") /* ty=Tensor[(48), int32] */;
    %676 = reshape(%674, newshape=[]) /* ty=int32 */;
    %677 = reshape(%675, newshape=[1, 6, 8]) /* ty=Tensor[(1, 6, 8), int32] */;
    %678 = @func_182(%676, %677) /* ty=(Tensor[(1, 6, 8), int32],) */;
    %679 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %680 = cast(meta[relay.Constant][32] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
    %681 = cast(meta[relay.Constant][32] /* ty=Tensor[(847), uint16] */, dtype="uint16") /* ty=Tensor[(847), uint16] */;
    %682 = reshape(%680, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), uint16] */;
    %683 = reshape(%681, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), uint16] */;
    %684 = @func_1824(%682, %683) /* ty=(Tensor[(11, 11, 7), uint16], Tensor[(12, 7, 14), float32]) */;
    %685 = @func_480() /* ty=Tensor[(5, 11, 4), float32] */;
    %686 = cast(%685, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
    %687 = cast(%var_2643, dtype="float64") /* ty=float64 */;
    %688 = cast(%var_2663, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %689 = cast(%var_2663, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %690 = reshape(%688, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float32] */;
    %691 = reshape(%689, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float32] */;
    %692 = @func_1001(%690, %691) /* ty=(Tensor[(11, 13, 15), int16],) */;
    %693 = %692.0;
    %694 = cast(%693, dtype="float64") /* ty=Tensor[(11, 13, 15), float64] */;
    %695 = @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */;
    %696 = @func_1846() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %697 = %672.0;
    %698 = %673.0;
    %699 = %678.0;
    %700 = %679.0;
    %701 = %684.0;
    %702 = @func_1794() /* ty=Tensor[(7, 4, 7), float64] */;
    %703 = add(%686, %687) /* ty=Tensor[(5, 11, 4), float64] */;
    %704 = atanh(%694) /* ty=Tensor[(11, 13, 15), float64] */;
    %705 = %695.0;
    %706 = %696.0;
    (%697, %698, %699, meta[relay.Constant][31] /* ty=Tensor[(48), int32] */, %700, %var_2663, %701, meta[relay.Constant][32] /* ty=Tensor[(847), uint16] */, %702, %703, %704, %705, %706)
  };
  %707(%var_2729, %var_2730) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(1, 6, 8), int32], Tensor[(48), int32], Tensor[(5, 11, 4), float32], Tensor[(2145), float32], Tensor[(11, 11, 7), uint16], Tensor[(847), uint16], Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float64], Tensor[(11, 13, 15), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_9348() -> Tensor[(5, 11, 4), float32] {
  @func_8472() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_1824(%var_1813: Tensor[(11, 11, 7), uint16], %var_1814: Tensor[(11, 11, 7), uint16]) -> (Tensor[(11, 11, 7), uint16], Tensor[(12, 7, 14), float32]) {
  %708 = cast(%var_1814, dtype="uint16") /* ty=Tensor[(11, 11, 7), uint16] */;
  %709 = shape_of(%var_1813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%var_1813, dtype="uint16") /* ty=Tensor[(11, 11, 7), uint16] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %712 = @func_1368() /* ty=(Tensor[(12, 7, 14), float32],) */;
  %713 = maximum(%710, %711) /* ty=Tensor[(11, 11, 7), uint16] */;
  %714 = %712.0;
  (%713, %714)
}

def @func_7725() -> (Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64]) {
  %715 = @func_7098() /* ty=Tensor[(5, 11, 4), float32] */;
  %716 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  %717 = cast(%716, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %718 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%715, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %721 = @func_5693() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %722 = @func_1344() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %723 = cast(meta[relay.Constant][33] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %724 = cast(meta[relay.Constant][33] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %725 = reshape(%723, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
  %726 = reshape(%724, newshape=[7, 4, 7]) /* ty=Tensor[(7, 4, 7), float64] */;
  %727 = mod(%719, %720) /* ty=Tensor[(5, 11, 4), float64] */;
  %728 = %721.0;
  %729 = %722.1;
  %730 = @func_884(%725, %726) /* ty=Tensor[(7, 4, 7), float64] */;
  (%727, %728, %729, %730, meta[relay.Constant][33] /* ty=Tensor[(196), float64] */)
}

def @func_1927() -> (Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) {
  @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */
}

def @func_7511() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %734 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
    %731 = @func_4533() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(16, 7, ?), uint64], Tensor[(5, 11, 4), float32]) */;
    %732 = %731.3;
    %733 = @func_5732() /* ty=Tensor[(5, 11, 4), float64] */;
    (%732, %733)
  };
  %734() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */
}

def @func_8533() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %735 = @func_2936() /* ty=(Tensor[(5, 11, 4), float64],) */;
  %736 = @func_3653() /* ty=Tensor[(5, 11, 4), float32] */;
  %737 = %735.0;
  (%736, %737)
}

def @func_5719() -> Tensor[(7, 4, 7), float64] {
  %739 = fn () -> Tensor[(7, 4, 7), float64] {
    %738 = @func_3897() /* ty=(Tensor[(7, 4, 7), float64],) */;
    %738.0
  };
  %739() /* ty=Tensor[(7, 4, 7), float64] */
}

def @func_7871() -> Tensor[(5, 11, 4), float64] {
  @func_7869() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_1846() -> (Tensor[(5, 11, 4), float32],) {
  %740 = @func_1091() /* ty=Tensor[(5, 11, 4), float32] */;
  (%740,)
}

def @func_548(%var_546: Tensor[(7, 2, 3), float32], %var_547: Tensor[(48), int32]) -> (Tensor[(7, 2, 3), float64], Tensor[(1, 6, 8), int32], int32, Tensor[(48), int32]) {
  %751 = fn (%var_534: Tensor[(7, 2, 3), float32], %var_543: Tensor[(48), int32]) -> (Tensor[(7, 2, 3), float64], Tensor[(1, 6, 8), int32], int32, Tensor[(48), int32]) {
    %741 = cast(%var_534, dtype="float32") /* ty=Tensor[(7, 2, 3), float32] */;
    %742 = acosh(%741) /* ty=Tensor[(7, 2, 3), float32] */;
    %743 = cast(%742, dtype="float64") /* ty=Tensor[(7, 2, 3), float64] */;
    %744 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %745 = cast(%var_543, dtype="int32") /* ty=Tensor[(48), int32] */;
    %746 = reshape(%744, newshape=[]) /* ty=int32 */;
    %747 = reshape(%745, newshape=[1, 6, 8]) /* ty=Tensor[(1, 6, 8), int32] */;
    %748 = @func_182(%746, %747) /* ty=(Tensor[(1, 6, 8), int32],) */;
    %749 = sin(%743) /* ty=Tensor[(7, 2, 3), float64] */;
    %750 = %748.0;
    (%749, %750, -5 /* ty=int32 */, %var_543)
  };
  %751(%var_546, %var_547) /* ty=(Tensor[(7, 2, 3), float64], Tensor[(1, 6, 8), int32], int32, Tensor[(48), int32]) */
}

def @func_6678(%var_6672: Tensor[(7, 4, 7), float64]) -> Tensor[(7, 4, 7), int32] {
  %752 = @func_3537() /* ty=(Tensor[(7, 4, 7), float64],) */;
  %753 = %752.0;
  %754 = cast(%var_6672, dtype="int32") /* ty=Tensor[(7, 4, 7), int32] */;
  %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%753, dtype="int32") /* ty=Tensor[(7, 4, 7), int32] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%756, %757) /* ty=Tensor[(7, 4, 7), int32] */
}

def @func_6061() -> (Tensor[(5, 11, 4), float32],) {
  %758 = @func_1719() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
  %759 = %758.1;
  (%759,)
}

def @func_5009() -> Tensor[(5, 11, 4), float32] {
  %760 = fn () -> Tensor[(5, 11, 4), float32] {
    @func_2294() /* ty=Tensor[(5, 11, 4), float32] */
  };
  %760() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_480() -> Tensor[(5, 11, 4), float32] {
  %761 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
  %762 = cast(%761, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  atanh(%762) /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_3622(%var_3620: Tensor[(1, 15, 10), float64]) -> (Tensor[(1, 15, 10), float64],) {
  @func_3619(%var_3620) /* ty=(Tensor[(1, 15, 10), float64],) */
}

def @func_182(%var_177: int32, %var_178: Tensor[(1, 6, 8), int32]) -> (Tensor[(1, 6, 8), int32],) {
  %763 = cast(%var_177, dtype="int32") /* ty=int32 */;
  %764 = cast(%var_178, dtype="int32") /* ty=Tensor[(1, 6, 8), int32] */;
  %765 = subtract(%763, %764) /* ty=Tensor[(1, 6, 8), int32] */;
  (%765,)
}

def @func_6612() -> (Tensor[(5, 11, 4), float64],) {
  %767 = fn () -> (Tensor[(5, 11, 4), float64],) {
    %766 = @func_3993() /* ty=Tensor[(5, 11, 4), float64] */;
    (%766,)
  };
  %767() /* ty=(Tensor[(5, 11, 4), float64],) */
}

def @func_7751(%var_7749: Tensor[(15, 14, 16), float64]) -> (Tensor[(15, 14, 16), float64],) {
  @func_7748(%var_7749) /* ty=(Tensor[(15, 14, 16), float64],) */
}

def @func_1848() -> (Tensor[(5, 11, 4), float32],) {
  @func_1846() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_9133() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  @func_9131() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */
}

def @func_6454() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
  %773 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) {
    %768 = @func_5623() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
    %769 = @func_5877() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
    %770 = %768.1;
    %771 = @func_480() /* ty=Tensor[(5, 11, 4), float32] */;
    %772 = %769.0;
    (%770, %771, %772)
  };
  %773() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */
}

def @func_8160() -> (Tensor[(5, 10), float64], Tensor[(5, 11, 4), int32], Tensor[(5, 11, 4), float32]) {
  %774 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 10), float64] */;
  %775 = @func_7383() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), int32], Tensor[(5, 13, 15), float64]) */;
  %776 = @func_8030() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %777 = asin(%774) /* ty=Tensor[(5, 10), float64] */;
  %778 = %775.2;
  %779 = %776.0;
  (%777, %778, %779)
}

def @func_6987() -> (Tensor[(12, 7, 14), float32],) {
  %788 = fn () -> (Tensor[(12, 7, 14), float32],) {
    %780 = @func_3846() /* ty=Tensor[(12, 7, 14), uint8] */;
    %781 = cast(%780, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
    %782 = cos(%781) /* ty=Tensor[(12, 7, 14), float32] */;
    %783 = cast(%780, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
    %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
    %785 = cast(%782, dtype="float32") /* ty=Tensor[(12, 7, 14), float32] */;
    %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %787 = minimum(%785, %786) /* ty=Tensor[(12, 7, 14), float32] */;
    (%787,)
  };
  %788() /* ty=(Tensor[(12, 7, 14), float32],) */
}

def @func_573(%var_557: Tensor[(5, 11, 4), float32], %var_562: Tensor[(5, 11, 4), bool]) -> (Tensor[(5, 11, 4), float64],) {
  %789 = @func_361() /* ty=Tensor[(5, 11, 4), float32] */;
  %790 = cast(%var_557, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%789, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %794 = greater(%792, %793) /* ty=Tensor[(5, 11, 4), bool] */;
  %795 = cast(%var_562, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%794, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %799 = multiply(%797, %798) /* ty=Tensor[(5, 11, 4), float64] */;
  (%799,)
}

def @func_3537() -> (Tensor[(7, 4, 7), float64],) {
  %800 = @func_1794() /* ty=Tensor[(7, 4, 7), float64] */;
  (%800,)
}

def @func_1759() -> Tensor[(5, 11, 4), bool] {
  %806 = fn () -> Tensor[(5, 11, 4), bool] {
    %801 = @func_412() /* ty=Tensor[(5, 11, 4), float32] */;
    %802 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 11, 4), float32] */, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
    %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
    %804 = cast(%801, dtype="bool") /* ty=Tensor[(5, 11, 4), bool] */;
    %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%804, %805) /* ty=Tensor[(5, 11, 4), bool] */
  };
  %806() /* ty=Tensor[(5, 11, 4), bool] */
}

def @func_887(%var_885: Tensor[(7, 4, 7), float64], %var_886: Tensor[(7, 4, 7), float64]) -> Tensor[(7, 4, 7), float64] {
  %811 = fn (%var_872: Tensor[(7, 4, 7), float64], %var_873: Tensor[(7, 4, 7), float64]) -> Tensor[(7, 4, 7), float64] {
    %807 = cast(%var_873, dtype="float64") /* ty=Tensor[(7, 4, 7), float64] */;
    %808 = shape_of(%var_872, dtype="int32") /* ty=Tensor[(3), int32] */;
    %809 = cast(%var_872, dtype="float64") /* ty=Tensor[(7, 4, 7), float64] */;
    %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%809, %810) /* ty=Tensor[(7, 4, 7), float64] */
  };
  %811(%var_885, %var_886) /* ty=Tensor[(7, 4, 7), float64] */
}

def @func_8474() -> Tensor[(5, 11, 4), float32] {
  @func_8472() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_1091() -> Tensor[(5, 11, 4), float32] {
  %812 = @func_684() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %812.0
}

def @func_4458() -> (Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145, 1), float32]) {
  %813 = cast(meta[relay.Constant][36] /* ty=Tensor[(2145, 1), float32] */, dtype="float32") /* ty=Tensor[(2145, 1), float32] */;
  %814 = cast(meta[relay.Constant][36] /* ty=Tensor[(2145, 1), float32] */, dtype="float32") /* ty=Tensor[(2145, 1), float32] */;
  %815 = reshape(%813, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float32] */;
  %816 = reshape(%814, newshape=[11, 13, 15]) /* ty=Tensor[(11, 13, 15), float32] */;
  %817 = @func_1001(%815, %816) /* ty=(Tensor[(11, 13, 15), int16],) */;
  %818 = @func_2294() /* ty=Tensor[(5, 11, 4), float32] */;
  %819 = %817.0;
  (%818, %819, meta[relay.Constant][36] /* ty=Tensor[(2145, 1), float32] */)
}

def @func_8819(%var_8817: Tensor[(768, 2), int16], %var_8818: Tensor[(768, 2), int16]) -> (Tensor[(16, 12, 3), bool], Tensor[(2, 96), int16], Tensor[(576), int16], Tensor[(768, 2), bool], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64]) {
  %840 = fn (%var_8774: Tensor[(768, 2), int16], %var_8787: Tensor[(768, 2), int16]) -> (Tensor[(16, 12, 3), bool], Tensor[(2, 96), int16], Tensor[(576), int16], Tensor[(768, 2), bool], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64]) {
    %820 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 96), int16] */, dtype="int16") /* ty=Tensor[(2, 96), int16] */;
    %821 = cast(%var_8774, dtype="int16") /* ty=Tensor[(768, 2), int16] */;
    %822 = cast(meta[relay.Constant][38] /* ty=Tensor[(576), int16] */, dtype="int16") /* ty=Tensor[(576), int16] */;
    %823 = reshape(%820, newshape=[16, 12, 1]) /* ty=Tensor[(16, 12, 1), int16] */;
    %824 = reshape(%821, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int16] */;
    %825 = reshape(%822, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), int16] */;
    %826 = @func_5239(%823, %824, %825) /* ty=(Tensor[(16, 12, 8), int16], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 3), bool]) */;
    %827 = cast(%var_8787, dtype="bool") /* ty=Tensor[(768, 2), bool] */;
    %828 = shape_of(%var_8774, dtype="int32") /* ty=Tensor[(2), int32] */;
    %829 = cast(%var_8774, dtype="bool") /* ty=Tensor[(768, 2), bool] */;
    %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %831 = @func_6061() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %832 = %831.0;
    %833 = cast(%832, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
    %834 = @func_5623() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
    %835 = %826.2;
    %836 = less_equal(%829, %830) /* ty=Tensor[(768, 2), bool] */;
    %837 = sigmoid(%833) /* ty=Tensor[(5, 11, 4), float64] */;
    %838 = %834.1;
    %839 = @func_5718() /* ty=Tensor[(7, 4, 7), float64] */;
    (%835, meta[relay.Constant][37] /* ty=Tensor[(2, 96), int16] */, meta[relay.Constant][38] /* ty=Tensor[(576), int16] */, %836, %837, %838, %839)
  };
  %840(%var_8817, %var_8818) /* ty=(Tensor[(16, 12, 3), bool], Tensor[(2, 96), int16], Tensor[(576), int16], Tensor[(768, 2), bool], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64]) */
}

def @func_1001(%var_972: Tensor[(11, 13, 15), float32], %var_973: Tensor[(11, 13, 15), float32]) -> (Tensor[(11, 13, 15), int16],) {
  %841 = cast(%var_973, dtype="float32") /* ty=Tensor[(11, 13, 15), float32] */;
  %842 = shape_of(%var_972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%var_972, dtype="float32") /* ty=Tensor[(11, 13, 15), float32] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %845 = floor_divide(%843, %844) /* ty=Tensor[(11, 13, 15), float32] */;
  %846 = cast(%var_973, dtype="float32") /* ty=Tensor[(11, 13, 15), float32] */;
  %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%845, dtype="float32") /* ty=Tensor[(11, 13, 15), float32] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %850 = floor_mod(%848, %849) /* ty=Tensor[(11, 13, 15), float32] */;
  %851 = cast(%850, dtype="int16") /* ty=Tensor[(11, 13, 15), int16] */;
  %852 = shape_of(%var_972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%var_972, dtype="int16") /* ty=Tensor[(11, 13, 15), int16] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %855 = bitwise_or(%853, %854) /* ty=Tensor[(11, 13, 15), int16] */;
  (%855,)
}

def @func_9112() -> (Tensor[(5, 11, 4), float32],) {
  %856 = @func_859() /* ty=(Tensor[(5, 11, 4), float32],) */;
  %857 = %856.0;
  (%857,)
}

def @func_3898() -> (Tensor[(7, 4, 7), float64],) {
  %860 = fn () -> (Tensor[(7, 4, 7), float64],) {
    %858 = @func_3537() /* ty=(Tensor[(7, 4, 7), float64],) */;
    %859 = %858.0;
    (%859,)
  };
  %860() /* ty=(Tensor[(7, 4, 7), float64],) */
}

def @func_793(%var_792: Tensor[(5, 11, 4), float64]) -> Tensor[(5, 11, 4), float32] {
  %868 = fn (%var_756: Tensor[(5, 11, 4), float64]) -> Tensor[(5, 11, 4), float32] {
    %861 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
    %862 = cast(%var_756, dtype="int64") /* ty=Tensor[(5, 11, 4), int64] */;
    %863 = shape_of(%861, dtype="int32") /* ty=Tensor[(3), int32] */;
    %864 = cast(%861, dtype="int64") /* ty=Tensor[(5, 11, 4), int64] */;
    %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %866 = logical_xor(%864, %865) /* ty=Tensor[(5, 11, 4), int64] */;
    %867 = cast(%866, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
    sqrt(%867) /* ty=Tensor[(5, 11, 4), float32] */
  };
  %868(%var_792) /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_8977() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) {
  @func_8975() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float32]) */
}

def @func_3298(%var_3297: Tensor[(1, 6, 14), float32]) -> (Tensor[(1, 6, 14), float32],) {
  %871 = fn (%var_3271: Tensor[(1, 6, 14), float32]) -> (Tensor[(1, 6, 14), float32],) {
    %869 = cast(%var_3271, dtype="float32") /* ty=Tensor[(1, 6, 14), float32] */;
    %870 = cos(%869) /* ty=Tensor[(1, 6, 14), float32] */;
    (%870,)
  };
  %871(%var_3297) /* ty=(Tensor[(1, 6, 14), float32],) */
}

def @func_943(%var_942: Tensor[(5, 11, 4), float64]) -> (Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32]) {
  %879 = fn (%var_925: Tensor[(5, 11, 4), float64]) -> (Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32]) {
    %872 = @func_397() /* ty=Tensor[(5, 11, 4), float64] */;
    %873 = cast(%var_925, dtype="uint8") /* ty=Tensor[(5, 11, 4), uint8] */;
    %874 = shape_of(%872, dtype="int32") /* ty=Tensor[(3), int32] */;
    %875 = cast(%872, dtype="uint8") /* ty=Tensor[(5, 11, 4), uint8] */;
    %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %877 = bitwise_and(%875, %876) /* ty=Tensor[(5, 11, 4), uint8] */;
    %878 = @func_412() /* ty=Tensor[(5, 11, 4), float32] */;
    (%877, %878)
  };
  %879(%var_942) /* ty=(Tensor[(5, 11, 4), uint8], Tensor[(5, 11, 4), float32]) */
}

def @func_5732() -> Tensor[(5, 11, 4), float64] {
  @func_4146() /* ty=Tensor[(5, 11, 4), float64] */
}

def @func_5243(%var_5240: Tensor[(16, 12, 1), int16], %var_5241: Tensor[(16, 12, 8), int16], %var_5242: Tensor[(16, 12, 3), int16]) -> (Tensor[(16, 12, 8), int16], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 3), bool]) {
  %889 = fn (%var_5193: Tensor[(16, 12, 1), int16], %var_5194: Tensor[(16, 12, 8), int16], %var_5224: Tensor[(16, 12, 3), int16]) -> (Tensor[(16, 12, 8), int16], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 3), bool]) {
    %880 = cast(%var_5193, dtype="int16") /* ty=Tensor[(16, 12, 1), int16] */;
    %881 = cast(%var_5194, dtype="int16") /* ty=Tensor[(16, 12, 8), int16] */;
    %882 = cast(%var_5194, dtype="float32") /* ty=Tensor[(16, 12, 8), float32] */;
    %883 = cast(%var_5193, dtype="float32") /* ty=Tensor[(16, 12, 1), float32] */;
    %884 = cast(%var_5193, dtype="bool") /* ty=Tensor[(16, 12, 1), bool] */;
    %885 = cast(%var_5224, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
    %886 = left_shift(%880, %881) /* ty=Tensor[(16, 12, 8), int16] */;
    %887 = add(%882, %883) /* ty=Tensor[(16, 12, 8), float32] */;
    %888 = equal(%884, %885) /* ty=Tensor[(16, 12, 3), bool] */;
    (%886, %887, %888)
  };
  %889(%var_5240, %var_5241, %var_5242) /* ty=(Tensor[(16, 12, 8), int16], Tensor[(16, 12, 8), float32], Tensor[(16, 12, 3), bool]) */
}

def @func_7581() -> Tensor[(12, 7, 14), uint8] {
  @func_3846() /* ty=Tensor[(12, 7, 14), uint8] */
}

def @func_577(%var_575: Tensor[(5, 11, 4), float32], %var_576: Tensor[(5, 11, 4), bool]) -> (Tensor[(5, 11, 4), float64],) {
  @func_573(%var_575, %var_576) /* ty=(Tensor[(5, 11, 4), float64],) */
}

def @func_752(%var_750: float32) -> (Tensor[(5, 11, 4), float32], Tensor[(98), float32], Tensor[(14, 7, 1), bool]) {
  @func_749(%var_750) /* ty=(Tensor[(5, 11, 4), float32], Tensor[(98), float32], Tensor[(14, 7, 1), bool]) */
}

def @func_9255() -> Tensor[(5, 11, 4), float32] {
  %891 = fn () -> Tensor[(5, 11, 4), float32] {
    %890 = @func_2412() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %890.0
  };
  %891() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_7192() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(13, 3, 8), bool], Tensor[(312), int32]) {
  %899 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(13, 3, 8), bool], Tensor[(312), int32]) {
    %892 = @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */;
    %893 = cast(meta[relay.Constant][39] /* ty=Tensor[(312), int32] */, dtype="int32") /* ty=Tensor[(312), int32] */;
    %894 = reshape(%893, newshape=[13, 3, 8]) /* ty=Tensor[(13, 3, 8), int32] */;
    %895 = @func_5770(%894) /* ty=(Tensor[(13, 3, 8), bool], Tensor[(13, 3, 8), bool], Tensor[(5, 11, 4), float32]) */;
    %896 = %892.0;
    %897 = @func_526() /* ty=Tensor[(5, 11, 4), float64] */;
    %898 = %895.1;
    (%896, %897, %898, meta[relay.Constant][39] /* ty=Tensor[(312), int32] */)
  };
  %899() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64], Tensor[(13, 3, 8), bool], Tensor[(312), int32]) */
}

def @func_7839() -> (Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float32]) {
  @func_7837() /* ty=(Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float32]) */
}

def @func_5772(%var_5771: Tensor[(13, 3, 8), int32]) -> (Tensor[(13, 3, 8), bool], Tensor[(13, 3, 8), bool], Tensor[(5, 11, 4), float32]) {
  %913 = fn (%var_5749: Tensor[(13, 3, 8), int32]) -> (Tensor[(13, 3, 8), bool], Tensor[(13, 3, 8), bool], Tensor[(5, 11, 4), float32]) {
    %900 = cast(%var_5749, dtype="bool") /* ty=Tensor[(13, 3, 8), bool] */;
    %901 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(13, 3, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %902 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 3, 8), int32] */, dtype="bool") /* ty=Tensor[(13, 3, 8), bool] */;
    %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %904 = cast(%var_5749, dtype="float32") /* ty=Tensor[(13, 3, 8), float32] */;
    %905 = sqrt(%904) /* ty=Tensor[(13, 3, 8), float32] */;
    %906 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 3, 8), int32] */, dtype="bool") /* ty=Tensor[(13, 3, 8), bool] */;
    %907 = shape_of(%905, dtype="int32") /* ty=Tensor[(3), int32] */;
    %908 = cast(%905, dtype="bool") /* ty=Tensor[(13, 3, 8), bool] */;
    %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %910 = equal(%902, %903) /* ty=Tensor[(13, 3, 8), bool] */;
    %911 = greater_equal(%908, %909) /* ty=Tensor[(13, 3, 8), bool] */;
    %912 = @func_1425() /* ty=Tensor[(5, 11, 4), float32] */;
    (%910, %911, %912)
  };
  %913(%var_5771) /* ty=(Tensor[(13, 3, 8), bool], Tensor[(13, 3, 8), bool], Tensor[(5, 11, 4), float32]) */
}

def @func_7837() -> (Tensor[(7, 4, 7), float64], Tensor[(5, 11, 4), float32]) {
  %914 = @func_3897() /* ty=(Tensor[(7, 4, 7), float64],) */;
  %915 = %914.0;
  %916 = @func_7098() /* ty=Tensor[(5, 11, 4), float32] */;
  (%915, %916)
}

def @func_9413() -> Tensor[(5, 11, 4), float32] {
  %918 = fn () -> Tensor[(5, 11, 4), float32] {
    %917 = @func_1883() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float32]) */;
    %917.0
  };
  %918() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_6287() -> Tensor[(5, 11, 4), float32] {
  @func_6285() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_7062(%var_7011: Tensor[(847), uint16], %var_7059: Tensor[(330), float64]) -> (Tensor[(5, 11, 4), float64], Tensor[(12, 7, 14), float32], Tensor[(847), int16], Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), float64], Tensor[(330), float64], Tensor[(192), int16]) {
  %919 = cast(%var_7011, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %920 = cast(%var_7011, dtype="uint16") /* ty=Tensor[(847), uint16] */;
  %921 = reshape(%919, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), uint16] */;
  %922 = reshape(%920, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), uint16] */;
  %923 = @func_1824(%921, %922) /* ty=(Tensor[(11, 11, 7), uint16], Tensor[(12, 7, 14), float32]) */;
  %924 = cast(meta[relay.Constant][41] /* ty=Tensor[(847), uint16] */, dtype="int16") /* ty=Tensor[(847), int16] */;
  %925 = shape_of(%var_7011, dtype="int32") /* ty=Tensor[(1), int32] */;
  %926 = cast(%var_7011, dtype="int16") /* ty=Tensor[(847), int16] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?), int16] */;
  %928 = cast(%var_7059, dtype="float64") /* ty=Tensor[(330), float64] */;
  %929 = cast(meta[relay.Constant][42] /* ty=Tensor[(192), int16] */, dtype="int16") /* ty=Tensor[(192), int16] */;
  %930 = reshape(%928, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float64] */;
  %931 = reshape(%929, newshape=[192]) /* ty=Tensor[(192), int16] */;
  %932 = @func_5369(%930, %931) /* ty=(Tensor[(6, 5, 11), float64], Tensor[(16, 12, 8), int16], Tensor[(192), int16], Tensor[(64, 24), int16], Tensor[(576), int16], Tensor[(12, 7, 14), float64]) */;
  %933 = @func_4146() /* ty=Tensor[(5, 11, 4), float64] */;
  %934 = %923.1;
  %935 = multiply(%926, %927) /* ty=Tensor[(847), int16] */;
  %936 = @func_2294() /* ty=Tensor[(5, 11, 4), float32] */;
  %937 = %932.5;
  (%933, %934, %935, %936, %937, %var_7059, meta[relay.Constant][42] /* ty=Tensor[(192), int16] */)
}

def @func_2801(%var_2791: Tensor[(1, 11, 6), float64]) -> (Tensor[(?, 11, 6), bool],) {
  %938 = cast(%var_2791, dtype="float64") /* ty=Tensor[(1, 11, 6), float64] */;
  %939 = cos(%938) /* ty=Tensor[(1, 11, 6), float64] */;
  %940 = cast(%var_2791, dtype="bool") /* ty=Tensor[(1, 11, 6), bool] */;
  %941 = shape_of(%939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %942 = cast(%939, dtype="bool") /* ty=Tensor[(1, 11, 6), bool] */;
  %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %944 = logical_and(%942, %943) /* ty=Tensor[(?, 11, 6), bool] */;
  (%944,)
}

def @func_8309() -> (Tensor[(12, 16, 15), float32], Tensor[(12, 16, 15), float32]) {
  %945 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 15), float32] */;
  %946 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 15), float32] */;
  %947 = sin(%945) /* ty=Tensor[(12, 16, 15), float32] */;
  %948 = sqrt(%946) /* ty=Tensor[(12, 16, 15), float32] */;
  (%947, %948)
}

def @func_3852() -> Tensor[(5, 11, 4), float32] {
  @func_3850() /* ty=Tensor[(5, 11, 4), float32] */
}

def @func_7066(%var_7064: Tensor[(847), uint16], %var_7065: Tensor[(330), float64]) -> (Tensor[(5, 11, 4), float64], Tensor[(12, 7, 14), float32], Tensor[(847), int16], Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), float64], Tensor[(330), float64], Tensor[(192), int16]) {
  @func_7062(%var_7064, %var_7065) /* ty=(Tensor[(5, 11, 4), float64], Tensor[(12, 7, 14), float32], Tensor[(847), int16], Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), float64], Tensor[(330), float64], Tensor[(192), int16]) */
}

def @func_2089() -> (Tensor[(5, 11, 4), float32],) {
  @func_2087() /* ty=(Tensor[(5, 11, 4), float32],) */
}

def @func_7298() -> (Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16]) {
  %953 = fn () -> (Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16]) {
    %949 = @func_5667() /* ty=(Tensor[(5, 11, 4), float32],) */;
    %950 = @func_4458() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16], Tensor[(2145, 1), float32]) */;
    %951 = %949.0;
    %952 = %950.1;
    (%951, %952)
  };
  %953() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(11, 13, 15), int16]) */
}

def @func_2902() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  @func_2900() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) */
}

def @func_7414() -> (Tensor[(12, 7, 14), uint8],) {
  %954 = @func_3846() /* ty=Tensor[(12, 7, 14), uint8] */;
  (%954,)
}

def @func_2804(%var_2802: Tensor[(1, 11, 6), float64]) -> (Tensor[(?, 11, 6), bool],) {
  @func_2801(%var_2802) /* ty=(Tensor[(?, 11, 6), bool],) */
}

def @func_7271(%var_7269: Tensor[(10, 1, 9), int16]) -> Tensor[(10, ?, 9), bool] {
  @func_7268(%var_7269) /* ty=Tensor[(10, ?, 9), bool] */
}

def @func_2900() -> (Tensor[(5, 11, 4), float32], Tensor[(5, 11, 4), float64]) {
  %955 = @func_1925() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(12, 7, 14), uint8]) */;
  %956 = %955.0;
  %957 = @func_1955() /* ty=Tensor[(5, 11, 4), float64] */;
  (%956, %957)
}

def @func_8162() -> (Tensor[(5, 10), float64], Tensor[(5, 11, 4), int32], Tensor[(5, 11, 4), float32]) {
  @func_8160() /* ty=(Tensor[(5, 10), float64], Tensor[(5, 11, 4), int32], Tensor[(5, 11, 4), float32]) */
}

def @func_5570() -> (Tensor[(5, 11, 4), float64], Tensor[(7, 4, 7), float64]) {
  %962 = fn () -> (Tensor[(5, 11, 4), float64], Tensor[(7, 4, 7), float64]) {
    %958 = @func_4533() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(5, 11, 4), float64], Tensor[(16, 7, ?), uint64], Tensor[(5, 11, 4), float32]) */;
    %959 = @func_1043() /* ty=(Tensor[(5, 11, 4), float32], Tensor[(7, 4, 7), float64], Tensor[(196), float64], Tensor[(5, 11, 4), float64]) */;
    %960 = %958.0;
    %961 = %959.1;
    (%960, %961)
  };
  %962() /* ty=(Tensor[(5, 11, 4), float64], Tensor[(7, 4, 7), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen296/build/output.py:3360: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen296/build/output.py", line 3365, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_reshape_minimum_kernel0(signed char* __restrict__ T_minimum, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1408) {
    T_minimum[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = min(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))], placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

