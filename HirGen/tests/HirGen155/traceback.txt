==========mod==========
#[version = "0.0.5"]
def @func_1677() -> Tensor[(3, 1, 9), bool] {
  %0 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
  %0.1
}

def @func_3258() -> (Tensor[(16, 14, 6), float64], int16) {
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 14, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 14, 6), float64] */;
  %2 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %3 = cosh(%1) /* ty=Tensor[(16, 14, 6), float64] */;
  %4 = %2.0;
  (%3, %4)
}

def @func_2816() -> int16 {
  %5 = @func_1249() /* ty=(int16, Tensor[(450), float64]) */;
  %5.0
}

def @func_2016() -> (int16,) {
  %6 = @func_1249() /* ty=(int16, Tensor[(450), float64]) */;
  %7 = %6.0;
  (%7,)
}

def @func_5493() -> (int16,) {
  %8 = @func_3036() /* ty=int16 */;
  (%8,)
}

def @func_2694() -> Tensor[(576), uint32] {
  %9 = @func_2668() /* ty=(int16, int16, Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(27), int16]) */;
  %9.3
}

def @func_3532(%var_3518: Tensor[(16, 12, 11), float64], %var_3523: Tensor[(27), int16]) -> (Tensor[(16, 12, 11), float64], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) {
  %10 = cast(%var_3518, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
  %11 = cast(meta[relay.Constant][1] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %12 = cast(%var_3523, dtype="int16") /* ty=Tensor[(27), int16] */;
  %13 = reshape(%11, newshape=[]) /* ty=int16 */;
  %14 = reshape(%12, newshape=[3, 1, 9]) /* ty=Tensor[(3, 1, 9), int16] */;
  %15 = atanh(%10) /* ty=Tensor[(16, 12, 11), float64] */;
  %16 = @func_416(%13, %14) /* ty=Tensor[(3, 1, 9), bool] */;
  (%15, %16, meta[relay.Constant][1] /* ty=int16 */, %var_3523)
}

def @func_3712(%var_3679: Tensor[(15, 14, 12), float32], %var_3691: Tensor[(675), float64], %var_3692: Tensor[(144), float32]) -> (Tensor[(15, 3, 15), float64], Tensor[(675), float64], Tensor[(144), float32], int16, Tensor[(15, 14, 12), float32]) {
  %17 = cast(%var_3691, dtype="float64") /* ty=Tensor[(675), float64] */;
  %18 = cast(%var_3692, dtype="float32") /* ty=Tensor[(144), float32] */;
  %19 = reshape(%17, newshape=[15, 3, 15]) /* ty=Tensor[(15, 3, 15), float64] */;
  %20 = reshape(%18, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %21 = @func_2340(%19, %20) /* ty=(Tensor[(15, 3, 15), float64], Tensor[(3, 1, 9), bool], Tensor[(450), float32], Tensor[(144), float32], Tensor[(450), float32]) */;
  %22 = cast(%var_3679, dtype="float32") /* ty=Tensor[(15, 14, 12), float32] */;
  %23 = acosh(%22) /* ty=Tensor[(15, 14, 12), float32] */;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(15, 14, 12), float32] */;
  %25 = %21.0;
  %26 = @func_2816() /* ty=int16 */;
  %27 = erf(%24) /* ty=Tensor[(15, 14, 12), float32] */;
  (%25, %var_3691, %var_3692, %26, %27)
}

def @func_4725(%var_4720: Tensor[(3, 16, 9), bool]) -> Tensor[(3, 16, 9), float32] {
  %28 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %29 = %28.0;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %31 = cast(%var_4720, dtype="float32") /* ty=Tensor[(3, 16, 9), float32] */;
  floor_divide(%30, %31) /* ty=Tensor[(3, 16, 9), float32] */
}

def @func_5753() -> Tensor[(3, 1, 9), bool] {
  %32 = @func_3091() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %32.0
}

def @func_2668() -> (int16, int16, Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(27), int16]) {
  %33 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %34 = @func_1249() /* ty=(int16, Tensor[(450), float64]) */;
  %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(576), uint32] */, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %36 = reshape(%35, newshape=[3, 16, 12]) /* ty=Tensor[(3, 16, 12), uint32] */;
  %37 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
  %38 = %33.0;
  %39 = %34.0;
  %40 = @func_253(%36) /* ty=Tensor[(3, 16, 12), float64] */;
  %41 = %37.3;
  (%38, %39, %40, meta[relay.Constant][2] /* ty=Tensor[(576), uint32] */, %41)
}

def @func_2386() -> (int16, Tensor[(3, 1, 9), bool]) {
  %42 = @func_1107() /* ty=(int16,) */;
  %43 = %42.0;
  %44 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  (%43, %44)
}

def @func_2802() -> (Tensor[(6, 9, 8), float32],) {
  %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 9, 8), float32] */;
  %46 = acosh(%45) /* ty=Tensor[(6, 9, 8), float32] */;
  (%46,)
}

def @func_3036() -> int16 {
  %47 = @func_2668() /* ty=(int16, int16, Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(27), int16]) */;
  %47.1
}

def @func_11(%var_8: Tensor[(10, 9, 5), float32]) -> (Tensor[(10, 9, 5), float32],) {
  %48 = cast(%var_8, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %49 = log10(%48) /* ty=Tensor[(10, 9, 5), float32] */;
  (%49,)
}

def @func_5126(%var_5120: Tensor[(405), int16], %var_5122: Tensor[(450), float32]) -> (Tensor[(3, 1, 9), bool], Tensor[(405), int16], Tensor[(405), int16], Tensor[(440), int16], Tensor[(450), float32]) {
  %50 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %51 = cast(%var_5120, dtype="int16") /* ty=Tensor[(405), int16] */;
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(440), int16] */, dtype="int16") /* ty=Tensor[(440), int16] */;
  %53 = cast(%var_5122, dtype="float32") /* ty=Tensor[(450), float32] */;
  %54 = reshape(%51, newshape=[405]) /* ty=Tensor[(405), int16] */;
  %55 = reshape(%52, newshape=[110, 4]) /* ty=Tensor[(110, 4), int16] */;
  %56 = reshape(%53, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %57 = @func_3655(%54, %55, %56) /* ty=(Tensor[(3, 1, 9), bool], int16, Tensor[(14, 14), float32], Tensor[(3, 15, 9), float32], Tensor[(405), int16], Tensor[(110, 4), int16], Tensor[(3, 1, 9), bool], Tensor[(11, 8, 5), float64], int16, Tensor[(6, 9, 8), float32], Tensor[(450), float32]) */;
  %58 = %50.0;
  %59 = %57.4;
  (%58, %59, %var_5120, meta[relay.Constant][4] /* ty=Tensor[(440), int16] */, %var_5122)
}

def @func_4538(%var_4502: Tensor[(10, 6, 8), int8], %var_4503: Tensor[(10, 6, 8), int8]) -> (Tensor[(10, 6, 8), int8], int16, Tensor[(10, 6, 8), float32]) {
  %60 = cast(%var_4503, dtype="int8") /* ty=Tensor[(10, 6, 8), int8] */;
  %61 = shape_of(%var_4502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%var_4502, dtype="int8") /* ty=Tensor[(10, 6, 8), int8] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %64 = @func_1170() /* ty=(int16, int16) */;
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 6, 8), int8] */, dtype="uint32") /* ty=Tensor[(10, 6, 8), uint32] */;
  %66 = shape_of(%var_4502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%var_4502, dtype="uint32") /* ty=Tensor[(10, 6, 8), uint32] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %69 = left_shift(%67, %68) /* ty=Tensor[(10, 6, 8), uint32] */;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(10, 6, 8), float32] */;
  %71 = minimum(%62, %63) /* ty=Tensor[(10, 6, 8), int8] */;
  %72 = %64.1;
  %73 = acos(%70) /* ty=Tensor[(10, 6, 8), float32] */;
  (%71, %72, %73)
}

def @func_5268(%var_5251: Tensor[(13, 2, 7), float32]) -> (Tensor[(13, 2, 7), bool],) {
  %74 = cast(%var_5251, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %75 = log(%74) /* ty=Tensor[(13, 2, 7), float32] */;
  %76 = cast(%var_5251, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%75, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %80 = less(%78, %79) /* ty=Tensor[(13, 2, 7), bool] */;
  (%80,)
}

def @func_1021(%var_946: Tensor[(9, 3, 5), float32], %var_996: int16, %var_1010: Tensor[(450), float32], %var_1015: Tensor[(9, 3, 5), float32]) -> (Tensor[(9, 3, 5), float32], Tensor[(192), float32], Tensor[(6, 2, 16), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(1, 27), int16], Tensor[(10, 9, 5), float32], Tensor[(450), float32], Tensor[(9, 3, 5), uint16]) {
  %81 = cast(%var_946, dtype="float32") /* ty=Tensor[(9, 3, 5), float32] */;
  %82 = asin(%81) /* ty=Tensor[(9, 3, 5), float32] */;
  %83 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 3, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 5), float32] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="float32") /* ty=Tensor[(9, 3, 5), float32] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %87 = cast(meta[relay.Constant][7] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %89 = reshape(%87, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %90 = reshape(%88, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %91 = @func_804(%89, %90) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */;
  %92 = %91.0;
  %93 = cast(%92, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
  %94 = cast(%var_996, dtype="int16") /* ty=int16 */;
  %95 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 27), int16] */, dtype="int16") /* ty=Tensor[(1, 27), int16] */;
  %96 = reshape(%94, newshape=[]) /* ty=int16 */;
  %97 = reshape(%95, newshape=[3, 1, 9]) /* ty=Tensor[(3, 1, 9), int16] */;
  %98 = cast(%var_1010, dtype="float32") /* ty=Tensor[(450), float32] */;
  %99 = reshape(%98, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), float32] */;
  %100 = @func_11(%99) /* ty=(Tensor[(10, 9, 5), float32],) */;
  %101 = cast(%var_1015, dtype="uint16") /* ty=Tensor[(9, 3, 5), uint16] */;
  %102 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%82, dtype="uint16") /* ty=Tensor[(9, 3, 5), uint16] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %105 = mod(%85, %86) /* ty=Tensor[(9, 3, 5), float32] */;
  %106 = tan(%93) /* ty=Tensor[(6, 2, 16), float32] */;
  %107 = @func_416(%96, %97) /* ty=Tensor[(3, 1, 9), bool] */;
  %108 = %100.0;
  %109 = right_shift(%103, %104) /* ty=Tensor[(9, 3, 5), uint16] */;
  (%105, meta[relay.Constant][7] /* ty=Tensor[(192), float32] */, %106, %107, %var_996, meta[relay.Constant][8] /* ty=Tensor[(1, 27), int16] */, %108, %var_1010, %109)
}

def @func_2147(%var_2129: Tensor[(7, 10, 11), int8], %var_2130: Tensor[(7, 10, 11), int8]) -> (Tensor[(7, 10, 11), bool], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) {
  %110 = cast(%var_2130, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
  %111 = shape_of(%var_2129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%var_2129, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %114 = cast(meta[relay.Constant][9] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %115 = cast(meta[relay.Constant][9] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %116 = reshape(%114, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %117 = reshape(%115, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %118 = @func_804(%116, %117) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */;
  %119 = equal(%112, %113) /* ty=Tensor[(7, 10, 11), bool] */;
  %120 = %118.0;
  (%119, %120, meta[relay.Constant][9] /* ty=Tensor[(192), float32] */)
}

def @func_4471() -> (int16,) {
  %121 = @func_2016() /* ty=(int16,) */;
  %122 = %121.0;
  (%122,)
}

def @func_1249() -> (int16, Tensor[(450), float64]) {
  %123 = @func_1107() /* ty=(int16,) */;
  %124 = cast(meta[relay.Constant][10] /* ty=Tensor[(450), float32] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %125 = asin(%124) /* ty=Tensor[(450), float64] */;
  %126 = cast(meta[relay.Constant][10] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %127 = reshape(%126, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), float32] */;
  %128 = @func_11(%127) /* ty=(Tensor[(10, 9, 5), float32],) */;
  %129 = %128.0;
  %130 = cast(%129, dtype="float64") /* ty=Tensor[(10, 9, 5), float64] */;
  %131 = shape_of(%125, dtype="int32") /* ty=Tensor[(1), int32] */;
  %132 = cast(%125, dtype="float64") /* ty=Tensor[(450), float64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?), float64] */;
  %134 = %123.0;
  %135 = minimum(%132, %133) /* ty=Tensor[(450), float64] */;
  (%134, %135)
}

def @func_3655(%var_3596: Tensor[(405), int16], %var_3609: Tensor[(110, 4), int16], %var_3652: Tensor[(450), float32]) -> (Tensor[(3, 1, 9), bool], int16, Tensor[(14, 14), float32], Tensor[(3, 15, 9), float32], Tensor[(405), int16], Tensor[(110, 4), int16], Tensor[(3, 1, 9), bool], Tensor[(11, 8, 5), float64], int16, Tensor[(6, 9, 8), float32], Tensor[(450), float32]) {
  %136 = @func_3091() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %137 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
  %138 = @func_3276() /* ty=(Tensor[(14, 14), float32],) */;
  %139 = cast(%var_3596, dtype="int16") /* ty=Tensor[(405), int16] */;
  %140 = reshape(%139, newshape=[3, 15, 9]) /* ty=Tensor[(3, 15, 9), int16] */;
  %141 = @func_3169(%140) /* ty=(Tensor[(3, 15, 9), float32], Tensor[(3, 15, 9), float32]) */;
  %142 = cast(%var_3609, dtype="int16") /* ty=Tensor[(110, 4), int16] */;
  %143 = cast(%var_3609, dtype="int16") /* ty=Tensor[(110, 4), int16] */;
  %144 = reshape(%142, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), int16] */;
  %145 = reshape(%143, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), int16] */;
  %146 = @func_2744(%144, %145) /* ty=(Tensor[(11, 8, 5), bool], int16) */;
  %147 = %146.0;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(11, 8, 5), float64] */;
  %149 = cast(%var_3652, dtype="float32") /* ty=Tensor[(450), float32] */;
  %150 = reshape(%149, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %151 = @func_2932(%150) /* ty=(Tensor[(3, ?, 9), float64], Tensor[(6, 2, 16), float32], Tensor[(450), float32], Tensor[(6, 9, 8), float32]) */;
  %152 = %136.0;
  %153 = %137.2;
  %154 = %138.0;
  %155 = %141.0;
  %156 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  %157 = acosh(%148) /* ty=Tensor[(11, 8, 5), float64] */;
  %158 = @func_3203() /* ty=int16 */;
  %159 = %151.3;
  (%152, %153, %154, %155, %var_3596, %var_3609, %156, %157, %158, %159, %var_3652)
}

def @func_1770() -> Tensor[(3, 1, 9), bool] {
  %160 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
  %160.1
}

def @func_804(%var_791: Tensor[(6, 2, 16), float32], %var_792: Tensor[(6, 2, 16), float32]) -> (Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) {
  %161 = cast(%var_792, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
  %162 = shape_of(%var_791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%var_791, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %165 = cast(%var_792, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
  %166 = divide(%163, %164) /* ty=Tensor[(6, 2, 16), float32] */;
  %167 = sin(%165) /* ty=Tensor[(6, 2, 16), float32] */;
  (%166, %167)
}

def @func_3203() -> int16 {
  %168 = @func_1170() /* ty=(int16, int16) */;
  %168.0
}

def @func_3091() -> (Tensor[(3, 1, 9), bool],) {
  %169 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %170 = %169.1;
  (%170,)
}

def @func_5504() -> (int16,) {
  %171 = @func_5493() /* ty=(int16,) */;
  %172 = %171.0;
  (%172,)
}

def @func_3069() -> (int16,) {
  %173 = @func_3036() /* ty=int16 */;
  (%173,)
}

def @func_2932(%var_2904: Tensor[(450), float32]) -> (Tensor[(3, ?, 9), float64], Tensor[(6, 2, 16), float32], Tensor[(450), float32], Tensor[(6, 9, 8), float32]) {
  %174 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %175 = %174.1;
  %176 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %177 = %176.0;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %179 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%175, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %182 = cast(%var_2904, dtype="float32") /* ty=Tensor[(450), float32] */;
  %183 = reshape(%182, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %184 = @func_1561(%183) /* ty=(int16, Tensor[(450), float32], int16, int16, Tensor[(27), int16], int16, Tensor[(10, 9, 5), float64], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) */;
  %185 = @func_2802() /* ty=(Tensor[(6, 9, 8), float32],) */;
  %186 = add(%180, %181) /* ty=Tensor[(3, ?, 9), float64] */;
  %187 = %184.7;
  %188 = %185.0;
  (%186, %187, %var_2904, %188)
}

def @func_2744(%var_2722: Tensor[(11, 8, 5), int16], %var_2723: Tensor[(11, 8, 5), int16]) -> (Tensor[(11, 8, 5), bool], int16) {
  %189 = cast(%var_2723, dtype="bool") /* ty=Tensor[(11, 8, 5), bool] */;
  %190 = shape_of(%var_2722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%var_2722, dtype="bool") /* ty=Tensor[(11, 8, 5), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %193 = @func_2016() /* ty=(int16,) */;
  %194 = equal(%191, %192) /* ty=Tensor[(11, 8, 5), bool] */;
  %195 = %193.0;
  (%194, %195)
}

def @func_5042() -> (int16,) {
  %196 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %197 = %196.0;
  (%197,)
}

def @func_5413(%var_5379: Tensor[(3, 13, 9), float32]) -> (Tensor[(3, 13, 9), bool], Tensor[(3, 1, 9), float32], int16) {
  %198 = @func_4665() /* ty=(Tensor[(3, 1, 9), float32],) */;
  %199 = %198.0;
  %200 = cast(%199, dtype="bool") /* ty=Tensor[(3, 1, 9), bool] */;
  %201 = cast(%var_5379, dtype="bool") /* ty=Tensor[(3, 13, 9), bool] */;
  %202 = cast(%199, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %203 = @func_1107() /* ty=(int16,) */;
  %204 = less_equal(%200, %201) /* ty=Tensor[(3, 13, 9), bool] */;
  %205 = sigmoid(%202) /* ty=Tensor[(3, 1, 9), float32] */;
  %206 = %203.0;
  (%204, %205, %206)
}

def @func_2204(%var_2193: Tensor[(7, 110), int8]) -> (int16, Tensor[(7, 10, 11), bool], Tensor[(7, 110), int8], int16, Tensor[(3, 1, 9), bool]) {
  %207 = @func_2016() /* ty=(int16,) */;
  %208 = cast(%var_2193, dtype="int8") /* ty=Tensor[(7, 110), int8] */;
  %209 = cast(%var_2193, dtype="int8") /* ty=Tensor[(7, 110), int8] */;
  %210 = reshape(%208, newshape=[7, 10, 11]) /* ty=Tensor[(7, 10, 11), int8] */;
  %211 = reshape(%209, newshape=[7, 10, 11]) /* ty=Tensor[(7, 10, 11), int8] */;
  %212 = @func_2147(%210, %211) /* ty=(Tensor[(7, 10, 11), bool], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) */;
  %213 = %207.0;
  %214 = cast(%213, dtype="float64") /* ty=float64 */;
  %215 = reshape(%214, newshape=[]) /* ty=float64 */;
  %216 = @func_1742(%215) /* ty=(int16, Tensor[(1, 8, 6), uint8]) */;
  %217 = @func_2081() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %218 = %212.0;
  %219 = %216.0;
  %220 = %217.0;
  (%213, %218, %var_2193, %219, %220)
}

def @func_4166() -> Tensor[(16, 14, 6), uint8] {
  %221 = @func_3258() /* ty=(Tensor[(16, 14, 6), float64], int16) */;
  %222 = %221.0;
  %223 = cast(%222, dtype="float32") /* ty=Tensor[(16, 14, 6), float32] */;
  %224 = tan(%223) /* ty=Tensor[(16, 14, 6), float32] */;
  %225 = cast(%222, dtype="uint8") /* ty=Tensor[(16, 14, 6), uint8] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="uint8") /* ty=Tensor[(16, 14, 6), uint8] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  add(%227, %228) /* ty=Tensor[(16, 14, 6), uint8] */
}

def @func_2340(%var_2322: Tensor[(15, 3, 15), float64], %var_2333: Tensor[(144), float32]) -> (Tensor[(15, 3, 15), float64], Tensor[(3, 1, 9), bool], Tensor[(450), float32], Tensor[(144), float32], Tensor[(450), float32]) {
  %229 = cast(%var_2322, dtype="float64") /* ty=Tensor[(15, 3, 15), float64] */;
  %230 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %231 = cast(%var_2333, dtype="float32") /* ty=Tensor[(144), float32] */;
  %232 = cast(meta[relay.Constant][11] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %233 = reshape(%231, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), float32] */;
  %234 = reshape(%232, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %235 = @func_1310(%233, %234) /* ty=(Tensor[(16, 1, 9), float32], int16, Tensor[(10, 9, 5), float32], Tensor[(450), float32]) */;
  %236 = atanh(%229) /* ty=Tensor[(15, 3, 15), float64] */;
  %237 = %230.0;
  %238 = %235.3;
  (%236, %237, %238, %var_2333, meta[relay.Constant][11] /* ty=Tensor[(450), float32] */)
}

def @func_4320() -> int16 {
  %239 = @func_2016() /* ty=(int16,) */;
  %239.0
}

def @func_2452() -> (int16,) {
  %240 = @func_1170() /* ty=(int16, int16) */;
  %241 = %240.0;
  (%241,)
}

def @func_4437() -> (int16, int16) {
  %242 = @func_4206() /* ty=(int16,) */;
  %243 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %244 = %242.0;
  %245 = %243.0;
  (%244, %245)
}

def @func_5244(%var_5242: Tensor[(24, 8), float32]) -> (Tensor[(9, 12, 12), uint64], Tensor[(9, 12, 12), float64], Tensor[(6, 2, 16), float32], Tensor[(24, 8), float32]) {
  %246 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 12, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 12, 12), float32] */;
  %247 = cos(%246) /* ty=Tensor[(9, 12, 12), float32] */;
  %248 = cast(%247, dtype="float32") /* ty=Tensor[(9, 12, 12), float32] */;
  %249 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 12, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 12, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 12, 12), float32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %252 = maximum(%250, %251) /* ty=Tensor[(9, 12, 12), float32] */;
  %253 = cast(%247, dtype="uint64") /* ty=Tensor[(9, 12, 12), uint64] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="uint64") /* ty=Tensor[(9, 12, 12), uint64] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %257 = cast(%247, dtype="float64") /* ty=Tensor[(9, 12, 12), float64] */;
  %258 = cast(%var_5242, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
  %259 = cast(%var_5242, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
  %260 = reshape(%258, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %261 = reshape(%259, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %262 = @func_804(%260, %261) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */;
  %263 = bitwise_xor(%255, %256) /* ty=Tensor[(9, 12, 12), uint64] */;
  %264 = sigmoid(%257) /* ty=Tensor[(9, 12, 12), float64] */;
  %265 = %262.1;
  (%263, %264, %265, %var_5242)
}

def @func_5904(%var_5874: Tensor[(182), float32]) -> (Tensor[(3, 1, 9), float32], Tensor[(13, 2, 7), bool], Tensor[(182), float32], Tensor[(3, 1, 9), bool], Tensor[(182), float32]) {
  %266 = @func_4665() /* ty=(Tensor[(3, 1, 9), float32],) */;
  %267 = cast(%var_5874, dtype="float32") /* ty=Tensor[(182), float32] */;
  %268 = reshape(%267, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), float32] */;
  %269 = @func_5268(%268) /* ty=(Tensor[(13, 2, 7), bool],) */;
  %270 = cast(%var_5874, dtype="float64") /* ty=Tensor[(182), float64] */;
  %271 = sinh(%270) /* ty=Tensor[(182), float64] */;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(182), float32] */;
  %273 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %274 = cast(%271, dtype="float32") /* ty=Tensor[(182), float32] */;
  %275 = %266.0;
  %276 = %269.0;
  %277 = atanh(%272) /* ty=Tensor[(182), float32] */;
  %278 = %273.1;
  %279 = rsqrt(%274) /* ty=Tensor[(182), float32] */;
  (%275, %276, %277, %278, %279)
}

def @func_5301(%var_5287: Tensor[(3, 2, 9), bool]) -> (Tensor[(3, 2, 9), uint32], Tensor[(3, 1, 9), bool], int16) {
  %280 = @func_5142() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %281 = %280.0;
  %282 = cast(%281, dtype="uint32") /* ty=Tensor[(3, 1, 9), uint32] */;
  %283 = cast(%var_5287, dtype="uint32") /* ty=Tensor[(3, 2, 9), uint32] */;
  %284 = @func_3091() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %285 = @func_1249() /* ty=(int16, Tensor[(450), float64]) */;
  %286 = subtract(%282, %283) /* ty=Tensor[(3, 2, 9), uint32] */;
  %287 = %284.0;
  %288 = %285.0;
  (%286, %287, %288)
}

def @func_5954() -> (Tensor[(3, 1, 9), bool],) {
  %289 = @func_2827() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %290 = %289.0;
  (%290,)
}

def @func_6002(%var_5977: Tensor[(4, 8, 8), float64]) -> (Tensor[(4, 8, 8), float64], Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) {
  %291 = cast(%var_5977, dtype="float64") /* ty=Tensor[(4, 8, 8), float64] */;
  %292 = @func_2081() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %293 = @func_2827() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %294 = asinh(%291) /* ty=Tensor[(4, 8, 8), float64] */;
  %295 = %292.0;
  %296 = %293.0;
  (%294, %295, %296)
}

def @func_6028(%var_6025: Tensor[(432), bool]) -> (int16, Tensor[(3, 16, 9), float32], Tensor[(432), bool]) {
  %297 = @func_1170() /* ty=(int16, int16) */;
  %298 = cast(%var_6025, dtype="bool") /* ty=Tensor[(432), bool] */;
  %299 = reshape(%298, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), bool] */;
  %300 = %297.0;
  %301 = @func_4725(%299) /* ty=Tensor[(3, 16, 9), float32] */;
  (%300, %301, %var_6025)
}

def @func_4370() -> (int16, Tensor[(3, 1, 9), float64]) {
  %302 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %304 = @func_3203() /* ty=int16 */;
  %305 = rsqrt(%303) /* ty=Tensor[(3, 1, 9), float64] */;
  (%304, %305)
}

def @func_416(%var_411: int16, %var_412: Tensor[(3, 1, 9), int16]) -> Tensor[(3, 1, 9), bool] {
  %306 = cast(%var_411, dtype="bool") /* ty=bool */;
  %307 = cast(%var_412, dtype="bool") /* ty=Tensor[(3, 1, 9), bool] */;
  not_equal(%306, %307) /* ty=Tensor[(3, 1, 9), bool] */
}

def @func_5340() -> (Tensor[(3, 1, 9), float64], Tensor[(9, 12, 12), float64], Tensor[(192), float32]) {
  %308 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %310 = cast(meta[relay.Constant][13] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %311 = reshape(%310, newshape=[24, 8]) /* ty=Tensor[(24, 8), float32] */;
  %312 = @func_5244(%311) /* ty=(Tensor[(9, 12, 12), uint64], Tensor[(9, 12, 12), float64], Tensor[(6, 2, 16), float32], Tensor[(24, 8), float32]) */;
  %313 = sqrt(%309) /* ty=Tensor[(3, 1, 9), float64] */;
  %314 = %312.1;
  (%313, %314, meta[relay.Constant][13] /* ty=Tensor[(192), float32] */)
}

def @func_2827() -> (Tensor[(3, 1, 9), bool],) {
  %315 = @func_1770() /* ty=Tensor[(3, 1, 9), bool] */;
  (%315,)
}

def @func_2995() -> (int16,) {
  %316 = @func_2452() /* ty=(int16,) */;
  %317 = %316.0;
  (%317,)
}

def @func_3231() -> (Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) {
  %318 = @func_2081() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %319 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %320 = %318.0;
  %321 = %319.0;
  (%320, %321)
}

def @func_6259() -> (Tensor[(3, 1, 9), bool], Tensor[(576), uint32], int16, Tensor[(14, 14), float32]) {
  %322 = @func_5142() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %323 = @func_5042() /* ty=(int16,) */;
  %324 = @func_3276() /* ty=(Tensor[(14, 14), float32],) */;
  %325 = %322.0;
  %326 = @func_2694() /* ty=Tensor[(576), uint32] */;
  %327 = %323.0;
  %328 = %324.0;
  (%325, %326, %327, %328)
}

def @func_1170() -> (int16, int16) {
  %329 = @func_1080() /* ty=(int16,) */;
  %330 = @func_1107() /* ty=(int16,) */;
  %331 = %329.0;
  %332 = %330.0;
  (%331, %332)
}

def @func_2042() -> (Tensor[(3, 1, 9), bool],) {
  %333 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  (%333,)
}

def @func_3326() -> Tensor[(3, 1, 9), bool] {
  %334 = @func_2827() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %334.0
}

def @func_2486() -> (int16, Tensor[(450), float64]) {
  %335 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
  %336 = @func_1249() /* ty=(int16, Tensor[(450), float64]) */;
  %337 = %335.2;
  %338 = %336.1;
  (%337, %338)
}

def @func_3767(%var_3763: Tensor[(1, 7), uint32]) -> (Tensor[(1, 7), uint32],) {
  %339 = cast(meta[relay.Constant][14] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %340 = cast(%var_3763, dtype="uint32") /* ty=Tensor[(1, 7), uint32] */;
  %341 = add(%339, %340) /* ty=Tensor[(1, 7), uint32] */;
  (%341,)
}

def @func_4665() -> (Tensor[(3, 1, 9), float32],) {
  %342 = @func_3231() /* ty=(Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) */;
  %343 = %342.1;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %345 = acosh(%344) /* ty=Tensor[(3, 1, 9), float64] */;
  %346 = cast(%345, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %347 = sin(%346) /* ty=Tensor[(3, 1, 9), float32] */;
  (%347,)
}

def @func_3907(%var_3902: Tensor[(3, 1, 9), bool]) -> Tensor[(3, ?, 9), float32] {
  %348 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %349 = %348.0;
  %350 = cast(%var_3902, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%349, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%352, %353) /* ty=Tensor[(3, ?, 9), float32] */
}

def @func_3276() -> (Tensor[(14, 14), float32],) {
  %354 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
  %355 = %354.0;
  (%355,)
}

def @func_3503(%var_3458: Tensor[(264), float64], %var_3476: Tensor[(135), float32], %var_3477: Tensor[(450), float32]) -> (int16, Tensor[(264), float64], Tensor[(3, 1, 9), float32], Tensor[(450), float32], Tensor[(135), float32], Tensor[(450), float32], Tensor[(3, 1, 9), bool]) {
  %356 = cast(%var_3458, dtype="float64") /* ty=Tensor[(264), float64] */;
  %357 = reshape(%356, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %358 = @func_1666(%357) /* ty=(Tensor[(8, 3, 11), float64], int16, int16) */;
  %359 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  %360 = cast(%359, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %361 = cast(%var_3476, dtype="float32") /* ty=Tensor[(135), float32] */;
  %362 = %358.1;
  %363 = cast(%362, dtype="int16") /* ty=int16 */;
  %364 = cast(%var_3477, dtype="float32") /* ty=Tensor[(450), float32] */;
  %365 = cast(%var_3476, dtype="float32") /* ty=Tensor[(135), float32] */;
  %366 = reshape(%361, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), float32] */;
  %367 = reshape(%363, newshape=[]) /* ty=int16 */;
  %368 = reshape(%364, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %369 = reshape(%365, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), float32] */;
  %370 = @func_1021(%366, %367, %368, %369) /* ty=(Tensor[(9, 3, 5), float32], Tensor[(192), float32], Tensor[(6, 2, 16), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(1, 27), int16], Tensor[(10, 9, 5), float32], Tensor[(450), float32], Tensor[(9, 3, 5), uint16]) */;
  %371 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %372 = sinh(%360) /* ty=Tensor[(3, 1, 9), float32] */;
  %373 = %370.7;
  %374 = %371.0;
  (%362, %var_3458, %372, %373, %var_3476, %var_3477, %374)
}

def @func_4617() -> (int16, Tensor[(9, 15, 10), float32], Tensor[(1350), float32]) {
  %375 = @func_4437() /* ty=(int16, int16) */;
  %376 = cast(meta[relay.Constant][15] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %377 = reshape(%376, newshape=[9, 15, 10]) /* ty=Tensor[(9, 15, 10), float32] */;
  %378 = @func_4061(%377) /* ty=(Tensor[(9, 15, 10), float32],) */;
  %379 = %375.0;
  %380 = %378.0;
  (%379, %380, meta[relay.Constant][15] /* ty=Tensor[(1350), float32] */)
}

def @func_5542() -> int16 {
  %381 = @func_2995() /* ty=(int16,) */;
  %381.0
}

def @func_1561(%var_1439: Tensor[(450), float32]) -> (int16, Tensor[(450), float32], int16, int16, Tensor[(27), int16], int16, Tensor[(10, 9, 5), float64], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) {
  %382 = @func_1170() /* ty=(int16, int16) */;
  %383 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
  %384 = @func_1080() /* ty=(int16,) */;
  %385 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
  %386 = @func_1080() /* ty=(int16,) */;
  %387 = cast(%var_1439, dtype="float32") /* ty=Tensor[(450), float32] */;
  %388 = reshape(%387, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), float32] */;
  %389 = @func_11(%388) /* ty=(Tensor[(10, 9, 5), float32],) */;
  %390 = %389.0;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(10, 9, 5), float64] */;
  %392 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %393 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %394 = reshape(%392, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %395 = reshape(%393, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %396 = @func_804(%394, %395) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */;
  %397 = %382.0;
  %398 = %383.2;
  %399 = %384.0;
  %400 = %385.3;
  %401 = %386.0;
  %402 = acosh(%391) /* ty=Tensor[(10, 9, 5), float64] */;
  %403 = %396.0;
  (%397, %var_1439, %398, %399, %400, %401, %402, %403, meta[relay.Constant][16] /* ty=Tensor[(192), float32] */)
}

def @func_6321(%var_6280: Tensor[(7, 8, 1), float64], %var_6281: Tensor[(7, 8, 4), float64]) -> (Tensor[(7, 8, 4), float64], Tensor[(3, 1, 9), float32], Tensor[(10, 6, 8), float32], Tensor[(480), int8]) {
  %404 = cast(%var_6280, dtype="float64") /* ty=Tensor[(7, 8, 1), float64] */;
  %405 = cast(%var_6281, dtype="float64") /* ty=Tensor[(7, 8, 4), float64] */;
  %406 = @func_4665() /* ty=(Tensor[(3, 1, 9), float32],) */;
  %407 = cast(meta[relay.Constant][17] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %408 = cast(meta[relay.Constant][17] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %409 = reshape(%407, newshape=[10, 6, 8]) /* ty=Tensor[(10, 6, 8), int8] */;
  %410 = reshape(%408, newshape=[10, 6, 8]) /* ty=Tensor[(10, 6, 8), int8] */;
  %411 = @func_4538(%409, %410) /* ty=(Tensor[(10, 6, 8), int8], int16, Tensor[(10, 6, 8), float32]) */;
  %412 = power(%404, %405) /* ty=Tensor[(7, 8, 4), float64] */;
  %413 = %406.0;
  %414 = %411.2;
  (%412, %413, %414, meta[relay.Constant][17] /* ty=Tensor[(480), int8] */)
}

def @main() -> (Tensor[(14, 13, 1), bool], Tensor[(14, 13, 1), float64]) {
  %415 = @func_6217() /* ty=int16 */;
  %416 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 13, 1), int16] */, dtype="bool") /* ty=Tensor[(14, 13, 1), bool] */;
  %417 = cast(%415, dtype="bool") /* ty=bool */;
  %418 = cast(%415, dtype="bool") /* ty=bool */;
  %419 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 13, 1), int16] */, dtype="bool") /* ty=Tensor[(14, 13, 1), bool] */;
  %420 = logical_and(%418, %419) /* ty=Tensor[(14, 13, 1), bool] */;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %422 = less(%416, %417) /* ty=Tensor[(14, 13, 1), bool] */;
  %423 = acosh(%421) /* ty=Tensor[(14, 13, 1), float64] */;
  (%422, %423)
}

def @func_4843(%var_4822: Tensor[(16, 5, 8), float32], %var_4829: Tensor[(16, 5, 8), float32]) -> (Tensor[(16, 5, 8), int8], Tensor[(16, 5, 8), float64]) {
  %424 = cast(%var_4822, dtype="float32") /* ty=Tensor[(16, 5, 8), float32] */;
  %425 = exp(%424) /* ty=Tensor[(16, 5, 8), float32] */;
  %426 = cast(%425, dtype="float32") /* ty=Tensor[(16, 5, 8), float32] */;
  %427 = acos(%426) /* ty=Tensor[(16, 5, 8), float32] */;
  %428 = cast(%var_4829, dtype="int8") /* ty=Tensor[(16, 5, 8), int8] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="int8") /* ty=Tensor[(16, 5, 8), int8] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %432 = cast(%427, dtype="float64") /* ty=Tensor[(16, 5, 8), float64] */;
  %433 = bitwise_and(%430, %431) /* ty=Tensor[(16, 5, 8), int8] */;
  %434 = asin(%432) /* ty=Tensor[(16, 5, 8), float64] */;
  (%433, %434)
}

def @func_6204() -> (Tensor[(16, 14, 6), float64], Tensor[(3, 1, 9), bool]) {
  %435 = @func_3258() /* ty=(Tensor[(16, 14, 6), float64], int16) */;
  %436 = @func_5142() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %437 = %435.0;
  %438 = %436.0;
  (%437, %438)
}

def @func_5671(%var_5595: Tensor[(3, 16, 12), float64], %var_5624: Tensor[(144), float32], %var_5625: Tensor[(450), float32]) -> (int16, Tensor[(144), float32], Tensor[(450), float32], Tensor[(3, 16, 12), float32], Tensor[(3, 16, 12), float64], int16) {
  %439 = cast(%var_5624, dtype="float32") /* ty=Tensor[(144), float32] */;
  %440 = cast(%var_5625, dtype="float32") /* ty=Tensor[(450), float32] */;
  %441 = reshape(%439, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), float32] */;
  %442 = reshape(%440, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %443 = @func_1310(%441, %442) /* ty=(Tensor[(16, 1, 9), float32], int16, Tensor[(10, 9, 5), float32], Tensor[(450), float32]) */;
  %444 = @func_2668() /* ty=(int16, int16, Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(27), int16]) */;
  %445 = %444.2;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(3, 16, 12), float64] */;
  %447 = cosh(%446) /* ty=Tensor[(3, 16, 12), float64] */;
  %448 = cast(%var_5595, dtype="uint32") /* ty=Tensor[(3, 16, 12), uint32] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="uint32") /* ty=Tensor[(3, 16, 12), uint32] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %452 = bitwise_and(%450, %451) /* ty=Tensor[(3, 16, 12), uint32] */;
  %453 = cast(%452, dtype="float32") /* ty=Tensor[(3, 16, 12), float32] */;
  %454 = cast(%452, dtype="float64") /* ty=Tensor[(3, 16, 12), float64] */;
  %455 = tan(%454) /* ty=Tensor[(3, 16, 12), float64] */;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(3, 16, 12), float64] */;
  %457 = @func_5493() /* ty=(int16,) */;
  %458 = %443.1;
  %459 = log10(%453) /* ty=Tensor[(3, 16, 12), float32] */;
  %460 = log2(%456) /* ty=Tensor[(3, 16, 12), float64] */;
  %461 = %457.0;
  (%458, %var_5624, %var_5625, %459, %460, %461)
}

def @func_6121() -> (Tensor[(6, 9, 8), float32], Tensor[(10, 9, 11), bool], Tensor[(10, 9, 11), uint64], Tensor[(10, 9, 11), float64], Tensor[(3, ?, 9), float32], Tensor[(27), bool]) {
  %462 = @func_2802() /* ty=(Tensor[(6, 9, 8), float32],) */;
  %463 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 9, 11), int16] */, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %464 = asinh(%463) /* ty=Tensor[(10, 9, 11), float64] */;
  %465 = @func_1080() /* ty=(int16,) */;
  %466 = %465.0;
  %467 = cast(%466, dtype="bool") /* ty=bool */;
  %468 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 9, 11), int16] */, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %469 = logical_and(%467, %468) /* ty=Tensor[(10, 9, 11), bool] */;
  %470 = cast(%469, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %471 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%464, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 9, 11), int16] */, dtype="float32") /* ty=Tensor[(10, 9, 11), float32] */;
  %475 = cosh(%474) /* ty=Tensor[(10, 9, 11), float32] */;
  %476 = cast(%469, dtype="uint64") /* ty=Tensor[(10, 9, 11), uint64] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%475, dtype="uint64") /* ty=Tensor[(10, 9, 11), uint64] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %480 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 9, 11), int16] */, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %481 = cast(meta[relay.Constant][20] /* ty=Tensor[(27), bool] */, dtype="bool") /* ty=Tensor[(27), bool] */;
  %482 = reshape(%481, newshape=[3, 1, 9]) /* ty=Tensor[(3, 1, 9), bool] */;
  %483 = %462.0;
  %484 = less(%472, %473) /* ty=Tensor[(10, 9, 11), bool] */;
  %485 = left_shift(%478, %479) /* ty=Tensor[(10, 9, 11), uint64] */;
  %486 = acos(%480) /* ty=Tensor[(10, 9, 11), float64] */;
  %487 = @func_3907(%482) /* ty=Tensor[(3, ?, 9), float32] */;
  (%483, %484, %485, %486, %487, meta[relay.Constant][20] /* ty=Tensor[(27), bool] */)
}

def @func_4061(%var_4056: Tensor[(9, 15, 10), float32]) -> (Tensor[(9, 15, 10), float32],) {
  %488 = cast(%var_4056, dtype="float32") /* ty=Tensor[(9, 15, 10), float32] */;
  %489 = sqrt(%488) /* ty=Tensor[(9, 15, 10), float32] */;
  (%489,)
}

def @func_1072() -> (Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) {
  %490 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 14), float32] */;
  %491 = cast(meta[relay.Constant][22] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %492 = cast(meta[relay.Constant][23] /* ty=Tensor[(27), int16] */, dtype="int16") /* ty=Tensor[(27), int16] */;
  %493 = reshape(%491, newshape=[]) /* ty=int16 */;
  %494 = reshape(%492, newshape=[3, 1, 9]) /* ty=Tensor[(3, 1, 9), int16] */;
  %495 = log2(%490) /* ty=Tensor[(14, 14), float32] */;
  %496 = @func_416(%493, %494) /* ty=Tensor[(3, 1, 9), bool] */;
  (%495, %496, meta[relay.Constant][22] /* ty=int16 */, meta[relay.Constant][23] /* ty=Tensor[(27), int16] */)
}

def @func_1867() -> (Tensor[(3, 1, 9), int16], Tensor[(3, ?, 9), float64], int16) {
  %497 = @func_1170() /* ty=(int16, int16) */;
  %498 = %497.0;
  %499 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  %500 = cast(%498, dtype="int8") /* ty=int8 */;
  %501 = cast(%499, dtype="int8") /* ty=Tensor[(3, 1, 9), int8] */;
  %502 = multiply(%500, %501) /* ty=Tensor[(3, 1, 9), int8] */;
  %503 = cast(%502, dtype="int16") /* ty=Tensor[(3, 1, 9), int16] */;
  %504 = cast(%498, dtype="int16") /* ty=int16 */;
  %505 = cast(%502, dtype="bool") /* ty=Tensor[(3, 1, 9), bool] */;
  %506 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%499, dtype="bool") /* ty=Tensor[(3, 1, 9), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %509 = greater(%507, %508) /* ty=Tensor[(3, ?, 9), bool] */;
  %510 = cast(%509, dtype="uint32") /* ty=Tensor[(3, ?, 9), uint32] */;
  %511 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%502, dtype="uint32") /* ty=Tensor[(3, 1, 9), uint32] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %514 = minimum(%512, %513) /* ty=Tensor[(3, ?, 9), uint32] */;
  %515 = cast(%514, dtype="float64") /* ty=Tensor[(3, ?, 9), float64] */;
  %516 = @func_1107() /* ty=(int16,) */;
  %517 = right_shift(%503, %504) /* ty=Tensor[(3, 1, 9), int16] */;
  %518 = acos(%515) /* ty=Tensor[(3, ?, 9), float64] */;
  %519 = %516.0;
  (%517, %518, %519)
}

def @func_253(%var_237: Tensor[(3, 16, 12), uint32]) -> Tensor[(3, 16, 12), float64] {
  %520 = cast(meta[relay.Constant][24] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %521 = cast(%var_237, dtype="uint32") /* ty=Tensor[(3, 16, 12), uint32] */;
  %522 = logical_xor(%520, %521) /* ty=Tensor[(3, 16, 12), uint32] */;
  %523 = cast(%522, dtype="float64") /* ty=Tensor[(3, 16, 12), float64] */;
  sin(%523) /* ty=Tensor[(3, 16, 12), float64] */
}

def @func_1080() -> (int16,) {
  %524 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
  %525 = %524.2;
  (%525,)
}

def @func_3834(%var_3811: Tensor[(3, 5, 9), float64], %var_3827: Tensor[(660), int16], %var_3828: Tensor[(770), int8]) -> (int16, Tensor[(3, 5, 9), bool], int16, Tensor[(660), int16], Tensor[(770), int8]) {
  %526 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %527 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %529 = asin(%528) /* ty=Tensor[(3, 1, 9), float64] */;
  %530 = cast(%529, dtype="bool") /* ty=Tensor[(3, 1, 9), bool] */;
  %531 = cast(%var_3811, dtype="bool") /* ty=Tensor[(3, 5, 9), bool] */;
  %532 = cast(%var_3827, dtype="int16") /* ty=Tensor[(660), int16] */;
  %533 = cast(%var_3827, dtype="float64") /* ty=Tensor[(660), float64] */;
  %534 = cast(%var_3828, dtype="int8") /* ty=Tensor[(770), int8] */;
  %535 = reshape(%532, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), int16] */;
  %536 = reshape(%533, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), float64] */;
  %537 = reshape(%534, newshape=[770]) /* ty=Tensor[(770), int8] */;
  %538 = @func_2557(%535, %536, %537) /* ty=(Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), bool], int16, Tensor[(770), int8]) */;
  %539 = %526.0;
  %540 = not_equal(%530, %531) /* ty=Tensor[(3, 5, 9), bool] */;
  %541 = %538.2;
  (%539, %540, %541, %var_3827, %var_3828)
}

def @func_5568(%var_5553: Tensor[(16, 3, 5), float64]) -> (Tensor[(16, 3, 5), float64],) {
  %542 = cast(-5.48799f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %543 = cast(%var_5553, dtype="float64") /* ty=Tensor[(16, 3, 5), float64] */;
  %544 = floor_divide(%542, %543) /* ty=Tensor[(16, 3, 5), float64] */;
  (%544,)
}

def @func_2557(%var_2508: Tensor[(4, 15, 11), int16], %var_2540: Tensor[(4, 15, 11), float64], %var_2545: Tensor[(770), int8]) -> (Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), bool], int16, Tensor[(770), int8]) {
  %545 = cast(%var_2508, dtype="bool") /* ty=Tensor[(4, 15, 11), bool] */;
  %546 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(4, 15, 11), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 15, 11), int16] */, dtype="bool") /* ty=Tensor[(4, 15, 11), bool] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %549 = less(%547, %548) /* ty=Tensor[(4, 15, 11), bool] */;
  %550 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 15, 11), int16] */, dtype="uint16") /* ty=Tensor[(4, 15, 11), uint16] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="uint16") /* ty=Tensor[(4, 15, 11), uint16] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %554 = cast(%549, dtype="float32") /* ty=Tensor[(4, 15, 11), float32] */;
  %555 = rsqrt(%554) /* ty=Tensor[(4, 15, 11), float32] */;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(4, 15, 11), float64] */;
  %557 = log10(%556) /* ty=Tensor[(4, 15, 11), float64] */;
  %558 = cast(%var_2540, dtype="bool") /* ty=Tensor[(4, 15, 11), bool] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="bool") /* ty=Tensor[(4, 15, 11), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = cast(%var_2545, dtype="int8") /* ty=Tensor[(770), int8] */;
  %563 = reshape(%562, newshape=[7, 110]) /* ty=Tensor[(7, 110), int8] */;
  %564 = @func_2204(%563) /* ty=(int16, Tensor[(7, 10, 11), bool], Tensor[(7, 110), int8], int16, Tensor[(3, 1, 9), bool]) */;
  %565 = left_shift(%552, %553) /* ty=Tensor[(4, 15, 11), uint16] */;
  %566 = greater(%560, %561) /* ty=Tensor[(4, 15, 11), bool] */;
  %567 = %564.3;
  (%565, %566, %567, %var_2545)
}

def @func_6217() -> int16 {
  %568 = @func_5504() /* ty=(int16,) */;
  %568.0
}

def @func_4047() -> (int16, Tensor[(10, 4, 15), int16]) {
  %569 = @func_2016() /* ty=(int16,) */;
  %570 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 4, 15), int32] */, dtype="bool") /* ty=Tensor[(1, 4, 15), bool] */;
  %571 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 4, 15), int32] */, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
  %572 = less(%570, %571) /* ty=Tensor[(10, 4, 15), bool] */;
  %573 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 4, 15), int32] */, dtype="int16") /* ty=Tensor[(10, 4, 15), int16] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%572, dtype="int16") /* ty=Tensor[(10, 4, 15), int16] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %577 = %569.0;
  %578 = subtract(%575, %576) /* ty=Tensor[(10, 4, 15), int16] */;
  (%577, %578)
}

def @func_3169(%var_3155: Tensor[(3, 15, 9), int16]) -> (Tensor[(3, 15, 9), float32], Tensor[(3, 15, 9), float32]) {
  %579 = @func_1867() /* ty=(Tensor[(3, 1, 9), int16], Tensor[(3, ?, 9), float64], int16) */;
  %580 = %579.0;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %582 = cast(%var_3155, dtype="float32") /* ty=Tensor[(3, 15, 9), float32] */;
  %583 = cast(%var_3155, dtype="float64") /* ty=Tensor[(3, 15, 9), float64] */;
  %584 = cosh(%583) /* ty=Tensor[(3, 15, 9), float64] */;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(3, 15, 9), float32] */;
  %586 = multiply(%581, %582) /* ty=Tensor[(3, 15, 9), float32] */;
  %587 = exp(%585) /* ty=Tensor[(3, 15, 9), float32] */;
  (%586, %587)
}

def @func_4763(%var_4758: Tensor[(576), uint32]) -> (int16, Tensor[(16, 14, 6), float64], Tensor[(3, 16, 12), float64], Tensor[(576), uint32]) {
  %588 = @func_4471() /* ty=(int16,) */;
  %589 = @func_3258() /* ty=(Tensor[(16, 14, 6), float64], int16) */;
  %590 = cast(%var_4758, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %591 = reshape(%590, newshape=[3, 16, 12]) /* ty=Tensor[(3, 16, 12), uint32] */;
  %592 = %588.0;
  %593 = %589.0;
  %594 = @func_253(%591) /* ty=Tensor[(3, 16, 12), float64] */;
  (%592, %593, %594, %var_4758)
}

def @func_2081() -> (Tensor[(3, 1, 9), bool],) {
  %595 = @func_1770() /* ty=Tensor[(3, 1, 9), bool] */;
  (%595,)
}

def @func_1742(%var_1721: float64) -> (int16, Tensor[(1, 8, 6), uint8]) {
  %596 = @func_1080() /* ty=(int16,) */;
  %597 = cast(%var_1721, dtype="float64") /* ty=float64 */;
  %598 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 8, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 6), float64] */;
  %599 = power(%597, %598) /* ty=Tensor[(1, 8, 6), float64] */;
  %600 = cast(%var_1721, dtype="uint8") /* ty=uint8 */;
  %601 = cast(%599, dtype="uint8") /* ty=Tensor[(1, 8, 6), uint8] */;
  %602 = %596.0;
  %603 = minimum(%600, %601) /* ty=Tensor[(1, 8, 6), uint8] */;
  (%602, %603)
}

def @func_6012(%var_6007: Tensor[(5, 6, 8), uint32]) -> (Tensor[(5, 6, 8), bool],) {
  %604 = cast(%var_6007, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %605 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(5, 6, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 6, 8), uint32] */, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %608 = less(%606, %607) /* ty=Tensor[(5, 6, 8), bool] */;
  (%608,)
}

def @func_4278(%var_4249: Tensor[(450), float64]) -> (Tensor[(450), int64], int16, Tensor[(1, 8, 6), uint8]) {
  %609 = @func_1249() /* ty=(int16, Tensor[(450), float64]) */;
  %610 = %609.1;
  %611 = cast(%var_4249, dtype="int64") /* ty=Tensor[(450), int64] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(1), int32] */;
  %613 = cast(%610, dtype="int64") /* ty=Tensor[(450), int64] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?), int64] */;
  %615 = @func_2016() /* ty=(int16,) */;
  %616 = %615.0;
  %617 = cast(%616, dtype="float64") /* ty=float64 */;
  %618 = reshape(%617, newshape=[]) /* ty=float64 */;
  %619 = @func_1742(%618) /* ty=(int16, Tensor[(1, 8, 6), uint8]) */;
  %620 = left_shift(%613, %614) /* ty=Tensor[(450), int64] */;
  %621 = %619.1;
  (%620, %616, %621)
}

def @func_1884() -> (Tensor[(3, 1, 9), bool],) {
  %622 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  (%622,)
}

def @func_2272(%var_2217: Tensor[(8, 10, 13), float64], %var_2230: Tensor[(576), uint32], %var_2258: Tensor[(135), float32]) -> (Tensor[(8, 10, 13), float64], Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool], int16, int16, Tensor[(5, 90), float32], Tensor[(3, 1, 9), bool], Tensor[(10, 9, 5), float32], Tensor[(135), float32], Tensor[(3, 1, 9), bool]) {
  %623 = cast(%var_2217, dtype="float64") /* ty=Tensor[(8, 10, 13), float64] */;
  %624 = cast(%var_2230, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %625 = reshape(%624, newshape=[3, 16, 12]) /* ty=Tensor[(3, 16, 12), uint32] */;
  %626 = cast(meta[relay.Constant][30] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %627 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  %628 = cast(%627, dtype="int16") /* ty=Tensor[(3, 1, 9), int16] */;
  %629 = reshape(%626, newshape=[]) /* ty=int16 */;
  %630 = reshape(%628, newshape=[3, 1, 9]) /* ty=Tensor[(3, 1, 9), int16] */;
  %631 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 90), float32] */, dtype="float32") /* ty=Tensor[(5, 90), float32] */;
  %632 = reshape(%631, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %633 = @func_1561(%632) /* ty=(int16, Tensor[(450), float32], int16, int16, Tensor[(27), int16], int16, Tensor[(10, 9, 5), float64], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) */;
  %634 = cast(%var_2258, dtype="float32") /* ty=Tensor[(135), float32] */;
  %635 = cast(meta[relay.Constant][30] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %636 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 90), float32] */, dtype="float32") /* ty=Tensor[(5, 90), float32] */;
  %637 = cast(%var_2258, dtype="float32") /* ty=Tensor[(135), float32] */;
  %638 = reshape(%634, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), float32] */;
  %639 = reshape(%635, newshape=[]) /* ty=int16 */;
  %640 = reshape(%636, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %641 = reshape(%637, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), float32] */;
  %642 = @func_1021(%638, %639, %640, %641) /* ty=(Tensor[(9, 3, 5), float32], Tensor[(192), float32], Tensor[(6, 2, 16), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(1, 27), int16], Tensor[(10, 9, 5), float32], Tensor[(450), float32], Tensor[(9, 3, 5), uint16]) */;
  %643 = @func_1884() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %644 = exp(%623) /* ty=Tensor[(8, 10, 13), float64] */;
  %645 = @func_253(%625) /* ty=Tensor[(3, 16, 12), float64] */;
  %646 = @func_416(%629, %630) /* ty=Tensor[(3, 1, 9), bool] */;
  %647 = %633.0;
  %648 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  %649 = %642.6;
  %650 = %643.0;
  (%644, %645, %var_2230, %627, %646, meta[relay.Constant][30] /* ty=int16 */, %647, meta[relay.Constant][31] /* ty=Tensor[(5, 90), float32] */, %648, %649, %var_2258, %650)
}

def @func_1107() -> (int16,) {
  %651 = @func_1080() /* ty=(int16,) */;
  %652 = %651.0;
  (%652,)
}

def @func_1310(%var_1289: Tensor[(16, 1, 9), float32], %var_1300: Tensor[(450), float32]) -> (Tensor[(16, 1, 9), float32], int16, Tensor[(10, 9, 5), float32], Tensor[(450), float32]) {
  %653 = cast(%var_1289, dtype="float32") /* ty=Tensor[(16, 1, 9), float32] */;
  %654 = @func_1080() /* ty=(int16,) */;
  %655 = cast(%var_1300, dtype="float32") /* ty=Tensor[(450), float32] */;
  %656 = reshape(%655, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), float32] */;
  %657 = @func_11(%656) /* ty=(Tensor[(10, 9, 5), float32],) */;
  %658 = log(%653) /* ty=Tensor[(16, 1, 9), float32] */;
  %659 = %654.0;
  %660 = %657.0;
  (%658, %659, %660, %var_1300)
}

def @func_5142() -> (Tensor[(3, 1, 9), bool],) {
  %661 = @func_3231() /* ty=(Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) */;
  %662 = %661.0;
  (%662,)
}

def @func_1666(%var_1633: Tensor[(8, 3, 11), float64]) -> (Tensor[(8, 3, 11), float64], int16, int16) {
  %663 = cast(%var_1633, dtype="float64") /* ty=Tensor[(8, 3, 11), float64] */;
  %664 = @func_1080() /* ty=(int16,) */;
  %665 = @func_1170() /* ty=(int16, int16) */;
  %666 = sigmoid(%663) /* ty=Tensor[(8, 3, 11), float64] */;
  %667 = %664.0;
  %668 = %665.0;
  (%666, %667, %668)
}

def @func_4024(%var_3988: Tensor[(72, 2), float32]) -> (Tensor[(3, 15, 9), bool], int16, Tensor[(72, 2), float32], Tensor[(450), float32], Tensor[(3, 1, 9), bool], Tensor[(3, 15, 9), float32], Tensor[(3, 15, 9), float64]) {
  %669 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  %670 = cast(%669, dtype="bool") /* ty=Tensor[(3, 1, 9), bool] */;
  %671 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 15, 9), bool] */, dtype="bool") /* ty=Tensor[(3, 15, 9), bool] */;
  %672 = cast(%var_3988, dtype="float32") /* ty=Tensor[(72, 2), float32] */;
  %673 = cast(meta[relay.Constant][33] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %674 = reshape(%672, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), float32] */;
  %675 = reshape(%673, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %676 = @func_1310(%674, %675) /* ty=(Tensor[(16, 1, 9), float32], int16, Tensor[(10, 9, 5), float32], Tensor[(450), float32]) */;
  %677 = @func_3231() /* ty=(Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) */;
  %678 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 15, 9), bool] */, dtype="float32") /* ty=Tensor[(3, 15, 9), float32] */;
  %679 = acosh(%678) /* ty=Tensor[(3, 15, 9), float32] */;
  %680 = cast(%679, dtype="int16") /* ty=Tensor[(3, 15, 9), int16] */;
  %681 = reshape(%680, newshape=[3, 15, 9]) /* ty=Tensor[(3, 15, 9), int16] */;
  %682 = @func_3169(%681) /* ty=(Tensor[(3, 15, 9), float32], Tensor[(3, 15, 9), float32]) */;
  %683 = cast(%679, dtype="float64") /* ty=Tensor[(3, 15, 9), float64] */;
  %684 = less_equal(%670, %671) /* ty=Tensor[(3, 15, 9), bool] */;
  %685 = %676.1;
  %686 = %677.1;
  %687 = %682.1;
  %688 = sinh(%683) /* ty=Tensor[(3, 15, 9), float64] */;
  (%684, %685, %var_3988, meta[relay.Constant][33] /* ty=Tensor[(450), float32] */, %686, %687, %688)
}

def @func_5822(%var_5803: Tensor[(135), float32]) -> (Tensor[(3, 1, 9), float64], Tensor[(135), float32], Tensor[(135), float32], Tensor[(450), float32], Tensor[(3, 88), int16], int16) {
  %689 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %690 = %689.0;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %692 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 88), float64] */, dtype="float64") /* ty=Tensor[(3, 88), float64] */;
  %693 = cast(%var_5803, dtype="float32") /* ty=Tensor[(135), float32] */;
  %694 = cast(meta[relay.Constant][35] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %695 = reshape(%692, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %696 = reshape(%693, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %697 = reshape(%694, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %698 = @func_3503(%695, %696, %697) /* ty=(int16, Tensor[(264), float64], Tensor[(3, 1, 9), float32], Tensor[(450), float32], Tensor[(135), float32], Tensor[(450), float32], Tensor[(3, 1, 9), bool]) */;
  %699 = @func_4047() /* ty=(int16, Tensor[(10, 4, 15), int16]) */;
  %700 = %699.0;
  %701 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 88), float64] */, dtype="int16") /* ty=Tensor[(3, 88), int16] */;
  %702 = cast(%700, dtype="int16") /* ty=int16 */;
  %703 = @func_5493() /* ty=(int16,) */;
  %704 = tan(%691) /* ty=Tensor[(3, 1, 9), float64] */;
  %705 = %698.4;
  %706 = subtract(%701, %702) /* ty=Tensor[(3, 88), int16] */;
  %707 = %703.0;
  (%704, %705, %var_5803, meta[relay.Constant][35] /* ty=Tensor[(450), float32] */, %706, %707)
}

def @func_4206() -> (int16,) {
  %708 = @func_2816() /* ty=int16 */;
  (%708,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2386() -> (int16, Tensor[(3, 1, 9), bool]) {
  %0 = @func_1107() /* ty=(int16,) */;
  %1 = %0.0;
  %2 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  (%1, %2)
}

def @func_2453() -> (int16,) {
  %5 = fn () -> (int16,) {
    %3 = @func_1170() /* ty=(int16, int16) */;
    %4 = %3.0;
    (%4,)
  };
  %5() /* ty=(int16,) */
}

def @func_4843(%var_4822: Tensor[(16, 5, 8), float32], %var_4829: Tensor[(16, 5, 8), float32]) -> (Tensor[(16, 5, 8), int8], Tensor[(16, 5, 8), float64]) {
  %6 = cast(%var_4822, dtype="float32") /* ty=Tensor[(16, 5, 8), float32] */;
  %7 = exp(%6) /* ty=Tensor[(16, 5, 8), float32] */;
  %8 = cast(%7, dtype="float32") /* ty=Tensor[(16, 5, 8), float32] */;
  %9 = acos(%8) /* ty=Tensor[(16, 5, 8), float32] */;
  %10 = cast(%var_4829, dtype="int8") /* ty=Tensor[(16, 5, 8), int8] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="int8") /* ty=Tensor[(16, 5, 8), int8] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %14 = cast(%9, dtype="float64") /* ty=Tensor[(16, 5, 8), float64] */;
  %15 = bitwise_and(%12, %13) /* ty=Tensor[(16, 5, 8), int8] */;
  %16 = asin(%14) /* ty=Tensor[(16, 5, 8), float64] */;
  (%15, %16)
}

def @func_2995() -> (int16,) {
  %17 = @func_2452() /* ty=(int16,) */;
  %18 = %17.0;
  (%18,)
}

def @func_2561(%var_2558: Tensor[(4, 15, 11), int16], %var_2559: Tensor[(4, 15, 11), float64], %var_2560: Tensor[(770), int8]) -> (Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), bool], int16, Tensor[(770), int8]) {
  %42 = fn (%var_2508: Tensor[(4, 15, 11), int16], %var_2540: Tensor[(4, 15, 11), float64], %var_2545: Tensor[(770), int8]) -> (Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), bool], int16, Tensor[(770), int8]) {
    %19 = cast(%var_2508, dtype="bool") /* ty=Tensor[(4, 15, 11), bool] */;
    %20 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 15, 11), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 15, 11), int16] */, dtype="bool") /* ty=Tensor[(4, 15, 11), bool] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %23 = less(%21, %22) /* ty=Tensor[(4, 15, 11), bool] */;
    %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 15, 11), int16] */, dtype="uint16") /* ty=Tensor[(4, 15, 11), uint16] */;
    %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
    %26 = cast(%23, dtype="uint16") /* ty=Tensor[(4, 15, 11), uint16] */;
    %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %28 = cast(%23, dtype="float32") /* ty=Tensor[(4, 15, 11), float32] */;
    %29 = rsqrt(%28) /* ty=Tensor[(4, 15, 11), float32] */;
    %30 = cast(%29, dtype="float64") /* ty=Tensor[(4, 15, 11), float64] */;
    %31 = log10(%30) /* ty=Tensor[(4, 15, 11), float64] */;
    %32 = cast(%var_2540, dtype="bool") /* ty=Tensor[(4, 15, 11), bool] */;
    %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
    %34 = cast(%31, dtype="bool") /* ty=Tensor[(4, 15, 11), bool] */;
    %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %36 = cast(%var_2545, dtype="int8") /* ty=Tensor[(770), int8] */;
    %37 = reshape(%36, newshape=[7, 110]) /* ty=Tensor[(7, 110), int8] */;
    %38 = @func_2204(%37) /* ty=(int16, Tensor[(7, 10, 11), bool], Tensor[(7, 110), int8], int16, Tensor[(3, 1, 9), bool]) */;
    %39 = left_shift(%26, %27) /* ty=Tensor[(4, 15, 11), uint16] */;
    %40 = greater(%34, %35) /* ty=Tensor[(4, 15, 11), bool] */;
    %41 = %38.3;
    (%39, %40, %41, %var_2545)
  };
  %42(%var_2558, %var_2559, %var_2560) /* ty=(Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), bool], int16, Tensor[(770), int8]) */
}

def @func_5416(%var_5414: Tensor[(3, 13, 9), float32]) -> (Tensor[(3, 13, 9), bool], Tensor[(3, 1, 9), float32], int16) {
  @func_5413(%var_5414) /* ty=(Tensor[(3, 13, 9), bool], Tensor[(3, 1, 9), float32], int16) */
}

def @func_3508(%var_3505: Tensor[(264), float64], %var_3506: Tensor[(135), float32], %var_3507: Tensor[(450), float32]) -> (int16, Tensor[(264), float64], Tensor[(3, 1, 9), float32], Tensor[(450), float32], Tensor[(135), float32], Tensor[(450), float32], Tensor[(3, 1, 9), bool]) {
  @func_3503(%var_3505, %var_3506, %var_3507) /* ty=(int16, Tensor[(264), float64], Tensor[(3, 1, 9), float32], Tensor[(450), float32], Tensor[(135), float32], Tensor[(450), float32], Tensor[(3, 1, 9), bool]) */
}

def @func_5142() -> (Tensor[(3, 1, 9), bool],) {
  %43 = @func_3231() /* ty=(Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) */;
  %44 = %43.0;
  (%44,)
}

def @func_1742(%var_1721: float64) -> (int16, Tensor[(1, 8, 6), uint8]) {
  %45 = @func_1080() /* ty=(int16,) */;
  %46 = cast(%var_1721, dtype="float64") /* ty=float64 */;
  %47 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 8, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 6), float64] */;
  %48 = power(%46, %47) /* ty=Tensor[(1, 8, 6), float64] */;
  %49 = cast(%var_1721, dtype="uint8") /* ty=uint8 */;
  %50 = cast(%48, dtype="uint8") /* ty=Tensor[(1, 8, 6), uint8] */;
  %51 = %45.0;
  %52 = minimum(%49, %50) /* ty=Tensor[(1, 8, 6), uint8] */;
  (%51, %52)
}

def @func_808(%var_806: Tensor[(6, 2, 16), float32], %var_807: Tensor[(6, 2, 16), float32]) -> (Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) {
  @func_804(%var_806, %var_807) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */
}

def @func_2147(%var_2129: Tensor[(7, 10, 11), int8], %var_2130: Tensor[(7, 10, 11), int8]) -> (Tensor[(7, 10, 11), bool], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) {
  %53 = cast(%var_2130, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
  %54 = shape_of(%var_2129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%var_2129, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %57 = cast(meta[relay.Constant][2] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %58 = cast(meta[relay.Constant][2] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %59 = reshape(%57, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %60 = reshape(%58, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
  %61 = @func_804(%59, %60) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */;
  %62 = equal(%55, %56) /* ty=Tensor[(7, 10, 11), bool] */;
  %63 = %61.0;
  (%62, %63, meta[relay.Constant][2] /* ty=Tensor[(192), float32] */)
}

def @func_5907(%var_5905: Tensor[(182), float32]) -> (Tensor[(3, 1, 9), float32], Tensor[(13, 2, 7), bool], Tensor[(182), float32], Tensor[(3, 1, 9), bool], Tensor[(182), float32]) {
  @func_5904(%var_5905) /* ty=(Tensor[(3, 1, 9), float32], Tensor[(13, 2, 7), bool], Tensor[(182), float32], Tensor[(3, 1, 9), bool], Tensor[(182), float32]) */
}

def @func_255(%var_254: Tensor[(3, 16, 12), uint32]) -> Tensor[(3, 16, 12), float64] {
  %68 = fn (%var_237: Tensor[(3, 16, 12), uint32]) -> Tensor[(3, 16, 12), float64] {
    %64 = cast(meta[relay.Constant][3] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %65 = cast(%var_237, dtype="uint32") /* ty=Tensor[(3, 16, 12), uint32] */;
    %66 = logical_xor(%64, %65) /* ty=Tensor[(3, 16, 12), uint32] */;
    %67 = cast(%66, dtype="float64") /* ty=Tensor[(3, 16, 12), float64] */;
    sin(%67) /* ty=Tensor[(3, 16, 12), float64] */
  };
  %68(%var_254) /* ty=Tensor[(3, 16, 12), float64] */
}

def @func_3503(%var_3458: Tensor[(264), float64], %var_3476: Tensor[(135), float32], %var_3477: Tensor[(450), float32]) -> (int16, Tensor[(264), float64], Tensor[(3, 1, 9), float32], Tensor[(450), float32], Tensor[(135), float32], Tensor[(450), float32], Tensor[(3, 1, 9), bool]) {
  %69 = cast(%var_3458, dtype="float64") /* ty=Tensor[(264), float64] */;
  %70 = reshape(%69, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %71 = @func_1666(%70) /* ty=(Tensor[(8, 3, 11), float64], int16, int16) */;
  %72 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %74 = cast(%var_3476, dtype="float32") /* ty=Tensor[(135), float32] */;
  %75 = %71.1;
  %76 = cast(%75, dtype="int16") /* ty=int16 */;
  %77 = cast(%var_3477, dtype="float32") /* ty=Tensor[(450), float32] */;
  %78 = cast(%var_3476, dtype="float32") /* ty=Tensor[(135), float32] */;
  %79 = reshape(%74, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), float32] */;
  %80 = reshape(%76, newshape=[]) /* ty=int16 */;
  %81 = reshape(%77, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %82 = reshape(%78, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), float32] */;
  %83 = @func_1021(%79, %80, %81, %82) /* ty=(Tensor[(9, 3, 5), float32], Tensor[(192), float32], Tensor[(6, 2, 16), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(1, 27), int16], Tensor[(10, 9, 5), float32], Tensor[(450), float32], Tensor[(9, 3, 5), uint16]) */;
  %84 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %85 = sinh(%73) /* ty=Tensor[(3, 1, 9), float32] */;
  %86 = %83.7;
  %87 = %84.0;
  (%75, %var_3458, %85, %86, %var_3476, %var_3477, %87)
}

def @func_3231() -> (Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) {
  %88 = @func_2081() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %89 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %90 = %88.0;
  %91 = %89.0;
  (%90, %91)
}

def @func_2018() -> (int16,) {
  @func_2016() /* ty=(int16,) */
}

def @func_4026(%var_4025: Tensor[(72, 2), float32]) -> (Tensor[(3, 15, 9), bool], int16, Tensor[(72, 2), float32], Tensor[(450), float32], Tensor[(3, 1, 9), bool], Tensor[(3, 15, 9), float32], Tensor[(3, 15, 9), float64]) {
  %112 = fn (%var_3988: Tensor[(72, 2), float32]) -> (Tensor[(3, 15, 9), bool], int16, Tensor[(72, 2), float32], Tensor[(450), float32], Tensor[(3, 1, 9), bool], Tensor[(3, 15, 9), float32], Tensor[(3, 15, 9), float64]) {
    %92 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
    %93 = cast(%92, dtype="bool") /* ty=Tensor[(3, 1, 9), bool] */;
    %94 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 15, 9), bool] */, dtype="bool") /* ty=Tensor[(3, 15, 9), bool] */;
    %95 = cast(%var_3988, dtype="float32") /* ty=Tensor[(72, 2), float32] */;
    %96 = cast(meta[relay.Constant][5] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
    %97 = reshape(%95, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), float32] */;
    %98 = reshape(%96, newshape=[450]) /* ty=Tensor[(450), float32] */;
    %99 = @func_1310(%97, %98) /* ty=(Tensor[(16, 1, 9), float32], int16, Tensor[(10, 9, 5), float32], Tensor[(450), float32]) */;
    %100 = @func_3231() /* ty=(Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) */;
    %101 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 15, 9), bool] */, dtype="float32") /* ty=Tensor[(3, 15, 9), float32] */;
    %102 = acosh(%101) /* ty=Tensor[(3, 15, 9), float32] */;
    %103 = cast(%102, dtype="int16") /* ty=Tensor[(3, 15, 9), int16] */;
    %104 = reshape(%103, newshape=[3, 15, 9]) /* ty=Tensor[(3, 15, 9), int16] */;
    %105 = @func_3169(%104) /* ty=(Tensor[(3, 15, 9), float32], Tensor[(3, 15, 9), float32]) */;
    %106 = cast(%102, dtype="float64") /* ty=Tensor[(3, 15, 9), float64] */;
    %107 = less_equal(%93, %94) /* ty=Tensor[(3, 15, 9), bool] */;
    %108 = %99.1;
    %109 = %100.1;
    %110 = %105.1;
    %111 = sinh(%106) /* ty=Tensor[(3, 15, 9), float64] */;
    (%107, %108, %var_3988, meta[relay.Constant][5] /* ty=Tensor[(450), float32] */, %109, %110, %111)
  };
  %112(%var_4025) /* ty=(Tensor[(3, 15, 9), bool], int16, Tensor[(72, 2), float32], Tensor[(450), float32], Tensor[(3, 1, 9), bool], Tensor[(3, 15, 9), float32], Tensor[(3, 15, 9), float64]) */
}

def @func_2016() -> (int16,) {
  %113 = @func_1249() /* ty=(int16, Tensor[(450), float64]) */;
  %114 = %113.0;
  (%114,)
}

def @main() -> (Tensor[(14, 13, 1), bool], Tensor[(14, 13, 1), float64]) {
  %115 = @func_6217() /* ty=int16 */;
  %116 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 13, 1), int16] */, dtype="bool") /* ty=Tensor[(14, 13, 1), bool] */;
  %117 = cast(%115, dtype="bool") /* ty=bool */;
  %118 = cast(%115, dtype="bool") /* ty=bool */;
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 13, 1), int16] */, dtype="bool") /* ty=Tensor[(14, 13, 1), bool] */;
  %120 = logical_and(%118, %119) /* ty=Tensor[(14, 13, 1), bool] */;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %122 = less(%116, %117) /* ty=Tensor[(14, 13, 1), bool] */;
  %123 = acosh(%121) /* ty=Tensor[(14, 13, 1), float64] */;
  (%122, %123)
}

def @func_5144() -> (Tensor[(3, 1, 9), bool],) {
  @func_5142() /* ty=(Tensor[(3, 1, 9), bool],) */
}

def @func_1313(%var_1311: Tensor[(16, 1, 9), float32], %var_1312: Tensor[(450), float32]) -> (Tensor[(16, 1, 9), float32], int16, Tensor[(10, 9, 5), float32], Tensor[(450), float32]) {
  %132 = fn (%var_1289: Tensor[(16, 1, 9), float32], %var_1300: Tensor[(450), float32]) -> (Tensor[(16, 1, 9), float32], int16, Tensor[(10, 9, 5), float32], Tensor[(450), float32]) {
    %124 = cast(%var_1289, dtype="float32") /* ty=Tensor[(16, 1, 9), float32] */;
    %125 = @func_1080() /* ty=(int16,) */;
    %126 = cast(%var_1300, dtype="float32") /* ty=Tensor[(450), float32] */;
    %127 = reshape(%126, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), float32] */;
    %128 = @func_11(%127) /* ty=(Tensor[(10, 9, 5), float32],) */;
    %129 = log(%124) /* ty=Tensor[(16, 1, 9), float32] */;
    %130 = %125.0;
    %131 = %128.0;
    (%129, %130, %131, %var_1300)
  };
  %132(%var_1311, %var_1312) /* ty=(Tensor[(16, 1, 9), float32], int16, Tensor[(10, 9, 5), float32], Tensor[(450), float32]) */
}

def @func_2818() -> int16 {
  @func_2816() /* ty=int16 */
}

def @func_1678() -> Tensor[(3, 1, 9), bool] {
  %134 = fn () -> Tensor[(3, 1, 9), bool] {
    %133 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
    %133.1
  };
  %134() /* ty=Tensor[(3, 1, 9), bool] */
}

def @func_1170() -> (int16, int16) {
  %135 = @func_1080() /* ty=(int16,) */;
  %136 = @func_1107() /* ty=(int16,) */;
  %137 = %135.0;
  %138 = %136.0;
  (%137, %138)
}

def @func_4765(%var_4764: Tensor[(576), uint32]) -> (int16, Tensor[(16, 14, 6), float64], Tensor[(3, 16, 12), float64], Tensor[(576), uint32]) {
  %146 = fn (%var_4758: Tensor[(576), uint32]) -> (int16, Tensor[(16, 14, 6), float64], Tensor[(3, 16, 12), float64], Tensor[(576), uint32]) {
    %139 = @func_4471() /* ty=(int16,) */;
    %140 = @func_3258() /* ty=(Tensor[(16, 14, 6), float64], int16) */;
    %141 = cast(%var_4758, dtype="uint32") /* ty=Tensor[(576), uint32] */;
    %142 = reshape(%141, newshape=[3, 16, 12]) /* ty=Tensor[(3, 16, 12), uint32] */;
    %143 = %139.0;
    %144 = %140.0;
    %145 = @func_253(%142) /* ty=Tensor[(3, 16, 12), float64] */;
    (%143, %144, %145, %var_4758)
  };
  %146(%var_4764) /* ty=(int16, Tensor[(16, 14, 6), float64], Tensor[(3, 16, 12), float64], Tensor[(576), uint32]) */
}

def @func_2829() -> (Tensor[(3, 1, 9), bool],) {
  @func_2827() /* ty=(Tensor[(3, 1, 9), bool],) */
}

def @func_2695() -> Tensor[(576), uint32] {
  %148 = fn () -> Tensor[(576), uint32] {
    %147 = @func_2668() /* ty=(int16, int16, Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(27), int16]) */;
    %147.3
  };
  %148() /* ty=Tensor[(576), uint32] */
}

def @func_5301(%var_5287: Tensor[(3, 2, 9), bool]) -> (Tensor[(3, 2, 9), uint32], Tensor[(3, 1, 9), bool], int16) {
  %149 = @func_5142() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %150 = %149.0;
  %151 = cast(%150, dtype="uint32") /* ty=Tensor[(3, 1, 9), uint32] */;
  %152 = cast(%var_5287, dtype="uint32") /* ty=Tensor[(3, 2, 9), uint32] */;
  %153 = @func_3091() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %154 = @func_1249() /* ty=(int16, Tensor[(450), float64]) */;
  %155 = subtract(%151, %152) /* ty=Tensor[(3, 2, 9), uint32] */;
  %156 = %153.0;
  %157 = %154.0;
  (%155, %156, %157)
}

def @func_1026(%var_1022: Tensor[(9, 3, 5), float32], %var_1023: int16, %var_1024: Tensor[(450), float32], %var_1025: Tensor[(9, 3, 5), float32]) -> (Tensor[(9, 3, 5), float32], Tensor[(192), float32], Tensor[(6, 2, 16), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(1, 27), int16], Tensor[(10, 9, 5), float32], Tensor[(450), float32], Tensor[(9, 3, 5), uint16]) {
  %187 = fn (%var_946: Tensor[(9, 3, 5), float32], %var_996: int16, %var_1010: Tensor[(450), float32], %var_1015: Tensor[(9, 3, 5), float32]) -> (Tensor[(9, 3, 5), float32], Tensor[(192), float32], Tensor[(6, 2, 16), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(1, 27), int16], Tensor[(10, 9, 5), float32], Tensor[(450), float32], Tensor[(9, 3, 5), uint16]) {
    %158 = cast(%var_946, dtype="float32") /* ty=Tensor[(9, 3, 5), float32] */;
    %159 = asin(%158) /* ty=Tensor[(9, 3, 5), float32] */;
    %160 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 3, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 5), float32] */;
    %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
    %162 = cast(%159, dtype="float32") /* ty=Tensor[(9, 3, 5), float32] */;
    %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %164 = cast(meta[relay.Constant][8] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %165 = cast(meta[relay.Constant][8] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %166 = reshape(%164, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
    %167 = reshape(%165, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
    %168 = @func_804(%166, %167) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */;
    %169 = %168.0;
    %170 = cast(%169, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
    %171 = cast(%var_996, dtype="int16") /* ty=int16 */;
    %172 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 27), int16] */, dtype="int16") /* ty=Tensor[(1, 27), int16] */;
    %173 = reshape(%171, newshape=[]) /* ty=int16 */;
    %174 = reshape(%172, newshape=[3, 1, 9]) /* ty=Tensor[(3, 1, 9), int16] */;
    %175 = cast(%var_1010, dtype="float32") /* ty=Tensor[(450), float32] */;
    %176 = reshape(%175, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), float32] */;
    %177 = @func_11(%176) /* ty=(Tensor[(10, 9, 5), float32],) */;
    %178 = cast(%var_1015, dtype="uint16") /* ty=Tensor[(9, 3, 5), uint16] */;
    %179 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
    %180 = cast(%159, dtype="uint16") /* ty=Tensor[(9, 3, 5), uint16] */;
    %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %182 = mod(%162, %163) /* ty=Tensor[(9, 3, 5), float32] */;
    %183 = tan(%170) /* ty=Tensor[(6, 2, 16), float32] */;
    %184 = @func_416(%173, %174) /* ty=Tensor[(3, 1, 9), bool] */;
    %185 = %177.0;
    %186 = right_shift(%180, %181) /* ty=Tensor[(9, 3, 5), uint16] */;
    (%182, meta[relay.Constant][8] /* ty=Tensor[(192), float32] */, %183, %184, %var_996, meta[relay.Constant][9] /* ty=Tensor[(1, 27), int16] */, %185, %var_1010, %186)
  };
  %187(%var_1022, %var_1023, %var_1024, %var_1025) /* ty=(Tensor[(9, 3, 5), float32], Tensor[(192), float32], Tensor[(6, 2, 16), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(1, 27), int16], Tensor[(10, 9, 5), float32], Tensor[(450), float32], Tensor[(9, 3, 5), uint16]) */
}

def @func_5506() -> (int16,) {
  @func_5504() /* ty=(int16,) */
}

def @func_3277() -> (Tensor[(14, 14), float32],) {
  %190 = fn () -> (Tensor[(14, 14), float32],) {
    %188 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
    %189 = %188.0;
    (%189,)
  };
  %190() /* ty=(Tensor[(14, 14), float32],) */
}

def @func_4280(%var_4279: Tensor[(450), float64]) -> (Tensor[(450), int64], int16, Tensor[(1, 8, 6), uint8]) {
  %204 = fn (%var_4249: Tensor[(450), float64]) -> (Tensor[(450), int64], int16, Tensor[(1, 8, 6), uint8]) {
    %191 = @func_1249() /* ty=(int16, Tensor[(450), float64]) */;
    %192 = %191.1;
    %193 = cast(%var_4249, dtype="int64") /* ty=Tensor[(450), int64] */;
    %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(1), int32] */;
    %195 = cast(%192, dtype="int64") /* ty=Tensor[(450), int64] */;
    %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?), int64] */;
    %197 = @func_2016() /* ty=(int16,) */;
    %198 = %197.0;
    %199 = cast(%198, dtype="float64") /* ty=float64 */;
    %200 = reshape(%199, newshape=[]) /* ty=float64 */;
    %201 = @func_1742(%200) /* ty=(int16, Tensor[(1, 8, 6), uint8]) */;
    %202 = left_shift(%195, %196) /* ty=Tensor[(450), int64] */;
    %203 = %201.1;
    (%202, %198, %203)
  };
  %204(%var_4279) /* ty=(Tensor[(450), int64], int16, Tensor[(1, 8, 6), uint8]) */
}

def @func_2804() -> (Tensor[(6, 9, 8), float32],) {
  @func_2802() /* ty=(Tensor[(6, 9, 8), float32],) */
}

def @func_2082() -> (Tensor[(3, 1, 9), bool],) {
  %206 = fn () -> (Tensor[(3, 1, 9), bool],) {
    %205 = @func_1770() /* ty=Tensor[(3, 1, 9), bool] */;
    (%205,)
  };
  %206() /* ty=(Tensor[(3, 1, 9), bool],) */
}

def @func_6121() -> (Tensor[(6, 9, 8), float32], Tensor[(10, 9, 11), bool], Tensor[(10, 9, 11), uint64], Tensor[(10, 9, 11), float64], Tensor[(3, ?, 9), float32], Tensor[(27), bool]) {
  %207 = @func_2802() /* ty=(Tensor[(6, 9, 8), float32],) */;
  %208 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 9, 11), int16] */, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %209 = asinh(%208) /* ty=Tensor[(10, 9, 11), float64] */;
  %210 = @func_1080() /* ty=(int16,) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="bool") /* ty=bool */;
  %213 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 9, 11), int16] */, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %214 = logical_and(%212, %213) /* ty=Tensor[(10, 9, 11), bool] */;
  %215 = cast(%214, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %216 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%209, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %219 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 9, 11), int16] */, dtype="float32") /* ty=Tensor[(10, 9, 11), float32] */;
  %220 = cosh(%219) /* ty=Tensor[(10, 9, 11), float32] */;
  %221 = cast(%214, dtype="uint64") /* ty=Tensor[(10, 9, 11), uint64] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="uint64") /* ty=Tensor[(10, 9, 11), uint64] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %225 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 9, 11), int16] */, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %226 = cast(meta[relay.Constant][11] /* ty=Tensor[(27), bool] */, dtype="bool") /* ty=Tensor[(27), bool] */;
  %227 = reshape(%226, newshape=[3, 1, 9]) /* ty=Tensor[(3, 1, 9), bool] */;
  %228 = %207.0;
  %229 = less(%217, %218) /* ty=Tensor[(10, 9, 11), bool] */;
  %230 = left_shift(%223, %224) /* ty=Tensor[(10, 9, 11), uint64] */;
  %231 = acos(%225) /* ty=Tensor[(10, 9, 11), float64] */;
  %232 = @func_3907(%227) /* ty=Tensor[(3, ?, 9), float32] */;
  (%228, %229, %230, %231, %232, meta[relay.Constant][11] /* ty=Tensor[(27), bool] */)
}

def @func_1081() -> (int16,) {
  %235 = fn () -> (int16,) {
    %233 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
    %234 = %233.2;
    (%234,)
  };
  %235() /* ty=(int16,) */
}

def @func_2997() -> (int16,) {
  @func_2995() /* ty=(int16,) */
}

def @func_1666(%var_1633: Tensor[(8, 3, 11), float64]) -> (Tensor[(8, 3, 11), float64], int16, int16) {
  %236 = cast(%var_1633, dtype="float64") /* ty=Tensor[(8, 3, 11), float64] */;
  %237 = @func_1080() /* ty=(int16,) */;
  %238 = @func_1170() /* ty=(int16, int16) */;
  %239 = sigmoid(%236) /* ty=Tensor[(8, 3, 11), float64] */;
  %240 = %237.0;
  %241 = %238.0;
  (%239, %240, %241)
}

def @func_4167() -> Tensor[(16, 14, 6), uint8] {
  %250 = fn () -> Tensor[(16, 14, 6), uint8] {
    %242 = @func_3258() /* ty=(Tensor[(16, 14, 6), float64], int16) */;
    %243 = %242.0;
    %244 = cast(%243, dtype="float32") /* ty=Tensor[(16, 14, 6), float32] */;
    %245 = tan(%244) /* ty=Tensor[(16, 14, 6), float32] */;
    %246 = cast(%243, dtype="uint8") /* ty=Tensor[(16, 14, 6), uint8] */;
    %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
    %248 = cast(%245, dtype="uint8") /* ty=Tensor[(16, 14, 6), uint8] */;
    %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    add(%248, %249) /* ty=Tensor[(16, 14, 6), uint8] */
  };
  %250() /* ty=Tensor[(16, 14, 6), uint8] */
}

def @func_5044() -> (int16,) {
  @func_5042() /* ty=(int16,) */
}

def @func_5822(%var_5803: Tensor[(135), float32]) -> (Tensor[(3, 1, 9), float64], Tensor[(135), float32], Tensor[(135), float32], Tensor[(450), float32], Tensor[(3, 88), int16], int16) {
  %251 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %252 = %251.0;
  %253 = cast(%252, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %254 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 88), float64] */, dtype="float64") /* ty=Tensor[(3, 88), float64] */;
  %255 = cast(%var_5803, dtype="float32") /* ty=Tensor[(135), float32] */;
  %256 = cast(meta[relay.Constant][13] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %257 = reshape(%254, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %258 = reshape(%255, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %259 = reshape(%256, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %260 = @func_3503(%257, %258, %259) /* ty=(int16, Tensor[(264), float64], Tensor[(3, 1, 9), float32], Tensor[(450), float32], Tensor[(135), float32], Tensor[(450), float32], Tensor[(3, 1, 9), bool]) */;
  %261 = @func_4047() /* ty=(int16, Tensor[(10, 4, 15), int16]) */;
  %262 = %261.0;
  %263 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 88), float64] */, dtype="int16") /* ty=Tensor[(3, 88), int16] */;
  %264 = cast(%262, dtype="int16") /* ty=int16 */;
  %265 = @func_5493() /* ty=(int16,) */;
  %266 = tan(%253) /* ty=Tensor[(3, 1, 9), float64] */;
  %267 = %260.4;
  %268 = subtract(%263, %264) /* ty=Tensor[(3, 88), int16] */;
  %269 = %265.0;
  (%266, %267, %var_5803, meta[relay.Constant][13] /* ty=Tensor[(450), float32] */, %268, %269)
}

def @func_14(%var_12: Tensor[(10, 9, 5), float32]) -> (Tensor[(10, 9, 5), float32],) {
  @func_11(%var_12) /* ty=(Tensor[(10, 9, 5), float32],) */
}

def @func_2487() -> (int16, Tensor[(450), float64]) {
  %274 = fn () -> (int16, Tensor[(450), float64]) {
    %270 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
    %271 = @func_1249() /* ty=(int16, Tensor[(450), float64]) */;
    %272 = %270.2;
    %273 = %271.1;
    (%272, %273)
  };
  %274() /* ty=(int16, Tensor[(450), float64]) */
}

def @func_6218() -> int16 {
  %276 = fn () -> int16 {
    %275 = @func_5504() /* ty=(int16,) */;
    %275.0
  };
  %276() /* ty=int16 */
}

def @func_3204() -> int16 {
  %278 = fn () -> int16 {
    %277 = @func_1170() /* ty=(int16, int16) */;
    %277.0
  };
  %278() /* ty=int16 */
}

def @func_1249() -> (int16, Tensor[(450), float64]) {
  %279 = @func_1107() /* ty=(int16,) */;
  %280 = cast(meta[relay.Constant][14] /* ty=Tensor[(450), float32] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %281 = asin(%280) /* ty=Tensor[(450), float64] */;
  %282 = cast(meta[relay.Constant][14] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %283 = reshape(%282, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), float32] */;
  %284 = @func_11(%283) /* ty=(Tensor[(10, 9, 5), float32],) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(10, 9, 5), float64] */;
  %287 = shape_of(%281, dtype="int32") /* ty=Tensor[(1), int32] */;
  %288 = cast(%281, dtype="float64") /* ty=Tensor[(450), float64] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?), float64] */;
  %290 = %279.0;
  %291 = minimum(%288, %289) /* ty=Tensor[(450), float64] */;
  (%290, %291)
}

def @func_2670() -> (int16, int16, Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(27), int16]) {
  @func_2668() /* ty=(int16, int16, Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(27), int16]) */
}

def @func_5570(%var_5569: Tensor[(16, 3, 5), float64]) -> (Tensor[(16, 3, 5), float64],) {
  %295 = fn (%var_5553: Tensor[(16, 3, 5), float64]) -> (Tensor[(16, 3, 5), float64],) {
    %292 = cast(-5.48799f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %293 = cast(%var_5553, dtype="float64") /* ty=Tensor[(16, 3, 5), float64] */;
    %294 = floor_divide(%292, %293) /* ty=Tensor[(16, 3, 5), float64] */;
    (%294,)
  };
  %295(%var_5569) /* ty=(Tensor[(16, 3, 5), float64],) */
}

def @func_2276(%var_2273: Tensor[(8, 10, 13), float64], %var_2274: Tensor[(576), uint32], %var_2275: Tensor[(135), float32]) -> (Tensor[(8, 10, 13), float64], Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool], int16, int16, Tensor[(5, 90), float32], Tensor[(3, 1, 9), bool], Tensor[(10, 9, 5), float32], Tensor[(135), float32], Tensor[(3, 1, 9), bool]) {
  %324 = fn (%var_2217: Tensor[(8, 10, 13), float64], %var_2230: Tensor[(576), uint32], %var_2258: Tensor[(135), float32]) -> (Tensor[(8, 10, 13), float64], Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool], int16, int16, Tensor[(5, 90), float32], Tensor[(3, 1, 9), bool], Tensor[(10, 9, 5), float32], Tensor[(135), float32], Tensor[(3, 1, 9), bool]) {
    %296 = cast(%var_2217, dtype="float64") /* ty=Tensor[(8, 10, 13), float64] */;
    %297 = cast(%var_2230, dtype="uint32") /* ty=Tensor[(576), uint32] */;
    %298 = reshape(%297, newshape=[3, 16, 12]) /* ty=Tensor[(3, 16, 12), uint32] */;
    %299 = cast(meta[relay.Constant][15] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %300 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
    %301 = cast(%300, dtype="int16") /* ty=Tensor[(3, 1, 9), int16] */;
    %302 = reshape(%299, newshape=[]) /* ty=int16 */;
    %303 = reshape(%301, newshape=[3, 1, 9]) /* ty=Tensor[(3, 1, 9), int16] */;
    %304 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 90), float32] */, dtype="float32") /* ty=Tensor[(5, 90), float32] */;
    %305 = reshape(%304, newshape=[450]) /* ty=Tensor[(450), float32] */;
    %306 = @func_1561(%305) /* ty=(int16, Tensor[(450), float32], int16, int16, Tensor[(27), int16], int16, Tensor[(10, 9, 5), float64], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) */;
    %307 = cast(%var_2258, dtype="float32") /* ty=Tensor[(135), float32] */;
    %308 = cast(meta[relay.Constant][15] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %309 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 90), float32] */, dtype="float32") /* ty=Tensor[(5, 90), float32] */;
    %310 = cast(%var_2258, dtype="float32") /* ty=Tensor[(135), float32] */;
    %311 = reshape(%307, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), float32] */;
    %312 = reshape(%308, newshape=[]) /* ty=int16 */;
    %313 = reshape(%309, newshape=[450]) /* ty=Tensor[(450), float32] */;
    %314 = reshape(%310, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), float32] */;
    %315 = @func_1021(%311, %312, %313, %314) /* ty=(Tensor[(9, 3, 5), float32], Tensor[(192), float32], Tensor[(6, 2, 16), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(1, 27), int16], Tensor[(10, 9, 5), float32], Tensor[(450), float32], Tensor[(9, 3, 5), uint16]) */;
    %316 = @func_1884() /* ty=(Tensor[(3, 1, 9), bool],) */;
    %317 = exp(%296) /* ty=Tensor[(8, 10, 13), float64] */;
    %318 = @func_253(%298) /* ty=Tensor[(3, 16, 12), float64] */;
    %319 = @func_416(%302, %303) /* ty=Tensor[(3, 1, 9), bool] */;
    %320 = %306.0;
    %321 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
    %322 = %315.6;
    %323 = %316.0;
    (%317, %318, %var_2230, %300, %319, meta[relay.Constant][15] /* ty=int16 */, %320, meta[relay.Constant][16] /* ty=Tensor[(5, 90), float32] */, %321, %322, %var_2258, %323)
  };
  %324(%var_2273, %var_2274, %var_2275) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool], int16, int16, Tensor[(5, 90), float32], Tensor[(3, 1, 9), bool], Tensor[(10, 9, 5), float32], Tensor[(135), float32], Tensor[(3, 1, 9), bool]) */
}

def @func_5825(%var_5823: Tensor[(135), float32]) -> (Tensor[(3, 1, 9), float64], Tensor[(135), float32], Tensor[(135), float32], Tensor[(450), float32], Tensor[(3, 88), int16], int16) {
  @func_5822(%var_5823) /* ty=(Tensor[(3, 1, 9), float64], Tensor[(135), float32], Tensor[(135), float32], Tensor[(450), float32], Tensor[(3, 88), int16], int16) */
}

def @func_4617() -> (int16, Tensor[(9, 15, 10), float32], Tensor[(1350), float32]) {
  %325 = @func_4437() /* ty=(int16, int16) */;
  %326 = cast(meta[relay.Constant][17] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %327 = reshape(%326, newshape=[9, 15, 10]) /* ty=Tensor[(9, 15, 10), float32] */;
  %328 = @func_4061(%327) /* ty=(Tensor[(9, 15, 10), float32],) */;
  %329 = %325.0;
  %330 = %328.0;
  (%329, %330, meta[relay.Constant][17] /* ty=Tensor[(1350), float32] */)
}

def @func_1251() -> (int16, Tensor[(450), float64]) {
  @func_1249() /* ty=(int16, Tensor[(450), float64]) */
}

def @func_3260() -> (Tensor[(16, 14, 6), float64], int16) {
  @func_3258() /* ty=(Tensor[(16, 14, 6), float64], int16) */
}

def @func_3838(%var_3835: Tensor[(3, 5, 9), float64], %var_3836: Tensor[(660), int16], %var_3837: Tensor[(770), int8]) -> (int16, Tensor[(3, 5, 9), bool], int16, Tensor[(660), int16], Tensor[(770), int8]) {
  %347 = fn (%var_3811: Tensor[(3, 5, 9), float64], %var_3827: Tensor[(660), int16], %var_3828: Tensor[(770), int8]) -> (int16, Tensor[(3, 5, 9), bool], int16, Tensor[(660), int16], Tensor[(770), int8]) {
    %331 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
    %332 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
    %333 = cast(%332, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
    %334 = asin(%333) /* ty=Tensor[(3, 1, 9), float64] */;
    %335 = cast(%334, dtype="bool") /* ty=Tensor[(3, 1, 9), bool] */;
    %336 = cast(%var_3811, dtype="bool") /* ty=Tensor[(3, 5, 9), bool] */;
    %337 = cast(%var_3827, dtype="int16") /* ty=Tensor[(660), int16] */;
    %338 = cast(%var_3827, dtype="float64") /* ty=Tensor[(660), float64] */;
    %339 = cast(%var_3828, dtype="int8") /* ty=Tensor[(770), int8] */;
    %340 = reshape(%337, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), int16] */;
    %341 = reshape(%338, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), float64] */;
    %342 = reshape(%339, newshape=[770]) /* ty=Tensor[(770), int8] */;
    %343 = @func_2557(%340, %341, %342) /* ty=(Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), bool], int16, Tensor[(770), int8]) */;
    %344 = %331.0;
    %345 = not_equal(%335, %336) /* ty=Tensor[(3, 5, 9), bool] */;
    %346 = %343.2;
    (%344, %345, %346, %var_3827, %var_3828)
  };
  %347(%var_3835, %var_3836, %var_3837) /* ty=(int16, Tensor[(3, 5, 9), bool], int16, Tensor[(660), int16], Tensor[(770), int8]) */
}

def @func_6260() -> (Tensor[(3, 1, 9), bool], Tensor[(576), uint32], int16, Tensor[(14, 14), float32]) {
  %355 = fn () -> (Tensor[(3, 1, 9), bool], Tensor[(576), uint32], int16, Tensor[(14, 14), float32]) {
    %348 = @func_5142() /* ty=(Tensor[(3, 1, 9), bool],) */;
    %349 = @func_5042() /* ty=(int16,) */;
    %350 = @func_3276() /* ty=(Tensor[(14, 14), float32],) */;
    %351 = %348.0;
    %352 = @func_2694() /* ty=Tensor[(576), uint32] */;
    %353 = %349.0;
    %354 = %350.0;
    (%351, %352, %353, %354)
  };
  %355() /* ty=(Tensor[(3, 1, 9), bool], Tensor[(576), uint32], int16, Tensor[(14, 14), float32]) */
}

def @func_3910(%var_3908: Tensor[(3, 1, 9), bool]) -> Tensor[(3, ?, 9), float32] {
  @func_3907(%var_3908) /* ty=Tensor[(3, ?, 9), float32] */
}

def @func_5130(%var_5128: Tensor[(405), int16], %var_5129: Tensor[(450), float32]) -> (Tensor[(3, 1, 9), bool], Tensor[(405), int16], Tensor[(405), int16], Tensor[(440), int16], Tensor[(450), float32]) {
  @func_5126(%var_5128, %var_5129) /* ty=(Tensor[(3, 1, 9), bool], Tensor[(405), int16], Tensor[(405), int16], Tensor[(440), int16], Tensor[(450), float32]) */
}

def @func_1885() -> (Tensor[(3, 1, 9), bool],) {
  %357 = fn () -> (Tensor[(3, 1, 9), bool],) {
    %356 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
    (%356,)
  };
  %357() /* ty=(Tensor[(3, 1, 9), bool],) */
}

def @func_1172() -> (int16, int16) {
  @func_1170() /* ty=(int16, int16) */
}

def @func_1669(%var_1667: Tensor[(8, 3, 11), float64]) -> (Tensor[(8, 3, 11), float64], int16, int16) {
  @func_1666(%var_1667) /* ty=(Tensor[(8, 3, 11), float64], int16, int16) */
}

def @func_4048() -> (int16, Tensor[(10, 4, 15), int16]) {
  %368 = fn () -> (int16, Tensor[(10, 4, 15), int16]) {
    %358 = @func_2016() /* ty=(int16,) */;
    %359 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 4, 15), int32] */, dtype="bool") /* ty=Tensor[(1, 4, 15), bool] */;
    %360 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 4, 15), int32] */, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
    %361 = less(%359, %360) /* ty=Tensor[(10, 4, 15), bool] */;
    %362 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 4, 15), int32] */, dtype="int16") /* ty=Tensor[(10, 4, 15), int16] */;
    %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(%361, dtype="int16") /* ty=Tensor[(10, 4, 15), int16] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %366 = %358.0;
    %367 = subtract(%364, %365) /* ty=Tensor[(10, 4, 15), int16] */;
    (%366, %367)
  };
  %368() /* ty=(int16, Tensor[(10, 4, 15), int16]) */
}

def @func_1745(%var_1743: float64) -> (int16, Tensor[(1, 8, 6), uint8]) {
  @func_1742(%var_1743) /* ty=(int16, Tensor[(1, 8, 6), uint8]) */
}

def @func_3769(%var_3768: Tensor[(1, 7), uint32]) -> (Tensor[(1, 7), uint32],) {
  %372 = fn (%var_3763: Tensor[(1, 7), uint32]) -> (Tensor[(1, 7), uint32],) {
    %369 = cast(meta[relay.Constant][20] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %370 = cast(%var_3763, dtype="uint32") /* ty=Tensor[(1, 7), uint32] */;
    %371 = add(%369, %370) /* ty=Tensor[(1, 7), uint32] */;
    (%371,)
  };
  %372(%var_3768) /* ty=(Tensor[(1, 7), uint32],) */
}

def @func_5042() -> (int16,) {
  %373 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %374 = %373.0;
  (%374,)
}

def @func_6004(%var_6003: Tensor[(4, 8, 8), float64]) -> (Tensor[(4, 8, 8), float64], Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) {
  %381 = fn (%var_5977: Tensor[(4, 8, 8), float64]) -> (Tensor[(4, 8, 8), float64], Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) {
    %375 = cast(%var_5977, dtype="float64") /* ty=Tensor[(4, 8, 8), float64] */;
    %376 = @func_2081() /* ty=(Tensor[(3, 1, 9), bool],) */;
    %377 = @func_2827() /* ty=(Tensor[(3, 1, 9), bool],) */;
    %378 = asinh(%375) /* ty=Tensor[(4, 8, 8), float64] */;
    %379 = %376.0;
    %380 = %377.0;
    (%378, %379, %380)
  };
  %381(%var_6003) /* ty=(Tensor[(4, 8, 8), float64], Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) */
}

def @func_2748(%var_2746: Tensor[(11, 8, 5), int16], %var_2747: Tensor[(11, 8, 5), int16]) -> (Tensor[(11, 8, 5), bool], int16) {
  @func_2744(%var_2746, %var_2747) /* ty=(Tensor[(11, 8, 5), bool], int16) */
}

def @func_4847(%var_4845: Tensor[(16, 5, 8), float32], %var_4846: Tensor[(16, 5, 8), float32]) -> (Tensor[(16, 5, 8), int8], Tensor[(16, 5, 8), float64]) {
  @func_4843(%var_4845, %var_4846) /* ty=(Tensor[(16, 5, 8), int8], Tensor[(16, 5, 8), float64]) */
}

def @func_2043() -> (Tensor[(3, 1, 9), bool],) {
  %383 = fn () -> (Tensor[(3, 1, 9), bool],) {
    %382 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
    (%382,)
  };
  %383() /* ty=(Tensor[(3, 1, 9), bool],) */
}

def @func_6123() -> (Tensor[(6, 9, 8), float32], Tensor[(10, 9, 11), bool], Tensor[(10, 9, 11), uint64], Tensor[(10, 9, 11), float64], Tensor[(3, ?, 9), float32], Tensor[(27), bool]) {
  @func_6121() /* ty=(Tensor[(6, 9, 8), float32], Tensor[(10, 9, 11), bool], Tensor[(10, 9, 11), uint64], Tensor[(10, 9, 11), float64], Tensor[(3, ?, 9), float32], Tensor[(27), bool]) */
}

def @func_5754() -> Tensor[(3, 1, 9), bool] {
  %385 = fn () -> Tensor[(3, 1, 9), bool] {
    %384 = @func_3091() /* ty=(Tensor[(3, 1, 9), bool],) */;
    %384.0
  };
  %385() /* ty=Tensor[(3, 1, 9), bool] */
}

def @func_2935(%var_2933: Tensor[(450), float32]) -> (Tensor[(3, ?, 9), float64], Tensor[(6, 2, 16), float32], Tensor[(450), float32], Tensor[(6, 9, 8), float32]) {
  @func_2932(%var_2933) /* ty=(Tensor[(3, ?, 9), float64], Tensor[(6, 2, 16), float32], Tensor[(450), float32], Tensor[(6, 9, 8), float32]) */
}

def @func_5504() -> (int16,) {
  %386 = @func_5493() /* ty=(int16,) */;
  %387 = %386.0;
  (%387,)
}

def @func_5904(%var_5874: Tensor[(182), float32]) -> (Tensor[(3, 1, 9), float32], Tensor[(13, 2, 7), bool], Tensor[(182), float32], Tensor[(3, 1, 9), bool], Tensor[(182), float32]) {
  %388 = @func_4665() /* ty=(Tensor[(3, 1, 9), float32],) */;
  %389 = cast(%var_5874, dtype="float32") /* ty=Tensor[(182), float32] */;
  %390 = reshape(%389, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), float32] */;
  %391 = @func_5268(%390) /* ty=(Tensor[(13, 2, 7), bool],) */;
  %392 = cast(%var_5874, dtype="float64") /* ty=Tensor[(182), float64] */;
  %393 = sinh(%392) /* ty=Tensor[(182), float64] */;
  %394 = cast(%393, dtype="float32") /* ty=Tensor[(182), float32] */;
  %395 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %396 = cast(%393, dtype="float32") /* ty=Tensor[(182), float32] */;
  %397 = %388.0;
  %398 = %391.0;
  %399 = atanh(%394) /* ty=Tensor[(182), float32] */;
  %400 = %395.1;
  %401 = rsqrt(%396) /* ty=Tensor[(182), float32] */;
  (%397, %398, %399, %400, %401)
}

def @func_4063(%var_4062: Tensor[(9, 15, 10), float32]) -> (Tensor[(9, 15, 10), float32],) {
  %404 = fn (%var_4056: Tensor[(9, 15, 10), float32]) -> (Tensor[(9, 15, 10), float32],) {
    %402 = cast(%var_4056, dtype="float32") /* ty=Tensor[(9, 15, 10), float32] */;
    %403 = sqrt(%402) /* ty=Tensor[(9, 15, 10), float32] */;
    (%403,)
  };
  %404(%var_4062) /* ty=(Tensor[(9, 15, 10), float32],) */
}

def @func_4725(%var_4720: Tensor[(3, 16, 9), bool]) -> Tensor[(3, 16, 9), float32] {
  %405 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %406 = %405.0;
  %407 = cast(%406, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %408 = cast(%var_4720, dtype="float32") /* ty=Tensor[(3, 16, 9), float32] */;
  floor_divide(%407, %408) /* ty=Tensor[(3, 16, 9), float32] */
}

def @func_5413(%var_5379: Tensor[(3, 13, 9), float32]) -> (Tensor[(3, 13, 9), bool], Tensor[(3, 1, 9), float32], int16) {
  %409 = @func_4665() /* ty=(Tensor[(3, 1, 9), float32],) */;
  %410 = %409.0;
  %411 = cast(%410, dtype="bool") /* ty=Tensor[(3, 1, 9), bool] */;
  %412 = cast(%var_5379, dtype="bool") /* ty=Tensor[(3, 13, 9), bool] */;
  %413 = cast(%410, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %414 = @func_1107() /* ty=(int16,) */;
  %415 = less_equal(%411, %412) /* ty=Tensor[(3, 13, 9), bool] */;
  %416 = sigmoid(%413) /* ty=Tensor[(3, 1, 9), float32] */;
  %417 = %414.0;
  (%415, %416, %417)
}

def @func_3070() -> (int16,) {
  %419 = fn () -> (int16,) {
    %418 = @func_3036() /* ty=int16 */;
    (%418,)
  };
  %419() /* ty=(int16,) */
}

def @func_1108() -> (int16,) {
  %422 = fn () -> (int16,) {
    %420 = @func_1080() /* ty=(int16,) */;
    %421 = %420.0;
    (%421,)
  };
  %422() /* ty=(int16,) */
}

def @func_4321() -> int16 {
  %424 = fn () -> int16 {
    %423 = @func_2016() /* ty=(int16,) */;
    %423.0
  };
  %424() /* ty=int16 */
}

def @func_6014(%var_6013: Tensor[(5, 6, 8), uint32]) -> (Tensor[(5, 6, 8), bool],) {
  %430 = fn (%var_6007: Tensor[(5, 6, 8), uint32]) -> (Tensor[(5, 6, 8), bool],) {
    %425 = cast(%var_6007, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
    %426 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(5, 6, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %427 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 6, 8), uint32] */, dtype="bool") /* ty=Tensor[(5, 6, 8), bool] */;
    %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %429 = less(%427, %428) /* ty=Tensor[(5, 6, 8), bool] */;
    (%429,)
  };
  %430(%var_6013) /* ty=(Tensor[(5, 6, 8), bool],) */
}

def @func_3258() -> (Tensor[(16, 14, 6), float64], int16) {
  %431 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 14, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 14, 6), float64] */;
  %432 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %433 = cosh(%431) /* ty=Tensor[(16, 14, 6), float64] */;
  %434 = %432.0;
  (%433, %434)
}

def @func_1770() -> Tensor[(3, 1, 9), bool] {
  %435 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
  %435.1
}

def @func_3659(%var_3656: Tensor[(405), int16], %var_3657: Tensor[(110, 4), int16], %var_3658: Tensor[(450), float32]) -> (Tensor[(3, 1, 9), bool], int16, Tensor[(14, 14), float32], Tensor[(3, 15, 9), float32], Tensor[(405), int16], Tensor[(110, 4), int16], Tensor[(3, 1, 9), bool], Tensor[(11, 8, 5), float64], int16, Tensor[(6, 9, 8), float32], Tensor[(450), float32]) {
  %460 = fn (%var_3596: Tensor[(405), int16], %var_3609: Tensor[(110, 4), int16], %var_3652: Tensor[(450), float32]) -> (Tensor[(3, 1, 9), bool], int16, Tensor[(14, 14), float32], Tensor[(3, 15, 9), float32], Tensor[(405), int16], Tensor[(110, 4), int16], Tensor[(3, 1, 9), bool], Tensor[(11, 8, 5), float64], int16, Tensor[(6, 9, 8), float32], Tensor[(450), float32]) {
    %436 = @func_3091() /* ty=(Tensor[(3, 1, 9), bool],) */;
    %437 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
    %438 = @func_3276() /* ty=(Tensor[(14, 14), float32],) */;
    %439 = cast(%var_3596, dtype="int16") /* ty=Tensor[(405), int16] */;
    %440 = reshape(%439, newshape=[3, 15, 9]) /* ty=Tensor[(3, 15, 9), int16] */;
    %441 = @func_3169(%440) /* ty=(Tensor[(3, 15, 9), float32], Tensor[(3, 15, 9), float32]) */;
    %442 = cast(%var_3609, dtype="int16") /* ty=Tensor[(110, 4), int16] */;
    %443 = cast(%var_3609, dtype="int16") /* ty=Tensor[(110, 4), int16] */;
    %444 = reshape(%442, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), int16] */;
    %445 = reshape(%443, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), int16] */;
    %446 = @func_2744(%444, %445) /* ty=(Tensor[(11, 8, 5), bool], int16) */;
    %447 = %446.0;
    %448 = cast(%447, dtype="float64") /* ty=Tensor[(11, 8, 5), float64] */;
    %449 = cast(%var_3652, dtype="float32") /* ty=Tensor[(450), float32] */;
    %450 = reshape(%449, newshape=[450]) /* ty=Tensor[(450), float32] */;
    %451 = @func_2932(%450) /* ty=(Tensor[(3, ?, 9), float64], Tensor[(6, 2, 16), float32], Tensor[(450), float32], Tensor[(6, 9, 8), float32]) */;
    %452 = %436.0;
    %453 = %437.2;
    %454 = %438.0;
    %455 = %441.0;
    %456 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
    %457 = acosh(%448) /* ty=Tensor[(11, 8, 5), float64] */;
    %458 = @func_3203() /* ty=int16 */;
    %459 = %451.3;
    (%452, %453, %454, %455, %var_3596, %var_3609, %456, %457, %458, %459, %var_3652)
  };
  %460(%var_3656, %var_3657, %var_3658) /* ty=(Tensor[(3, 1, 9), bool], int16, Tensor[(14, 14), float32], Tensor[(3, 15, 9), float32], Tensor[(405), int16], Tensor[(110, 4), int16], Tensor[(3, 1, 9), bool], Tensor[(11, 8, 5), float64], int16, Tensor[(6, 9, 8), float32], Tensor[(450), float32]) */
}

def @func_3037() -> int16 {
  %462 = fn () -> int16 {
    %461 = @func_2668() /* ty=(int16, int16, Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(27), int16]) */;
    %461.1
  };
  %462() /* ty=int16 */
}

def @func_804(%var_791: Tensor[(6, 2, 16), float32], %var_792: Tensor[(6, 2, 16), float32]) -> (Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) {
  %463 = cast(%var_792, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
  %464 = shape_of(%var_791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%var_791, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %467 = cast(%var_792, dtype="float32") /* ty=Tensor[(6, 2, 16), float32] */;
  %468 = divide(%465, %466) /* ty=Tensor[(6, 2, 16), float32] */;
  %469 = sin(%467) /* ty=Tensor[(6, 2, 16), float32] */;
  (%468, %469)
}

def @func_3171(%var_3170: Tensor[(3, 15, 9), int16]) -> (Tensor[(3, 15, 9), float32], Tensor[(3, 15, 9), float32]) {
  %479 = fn (%var_3155: Tensor[(3, 15, 9), int16]) -> (Tensor[(3, 15, 9), float32], Tensor[(3, 15, 9), float32]) {
    %470 = @func_1867() /* ty=(Tensor[(3, 1, 9), int16], Tensor[(3, ?, 9), float64], int16) */;
    %471 = %470.0;
    %472 = cast(%471, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
    %473 = cast(%var_3155, dtype="float32") /* ty=Tensor[(3, 15, 9), float32] */;
    %474 = cast(%var_3155, dtype="float64") /* ty=Tensor[(3, 15, 9), float64] */;
    %475 = cosh(%474) /* ty=Tensor[(3, 15, 9), float64] */;
    %476 = cast(%475, dtype="float32") /* ty=Tensor[(3, 15, 9), float32] */;
    %477 = multiply(%472, %473) /* ty=Tensor[(3, 15, 9), float32] */;
    %478 = exp(%476) /* ty=Tensor[(3, 15, 9), float32] */;
    (%477, %478)
  };
  %479(%var_3170) /* ty=(Tensor[(3, 15, 9), float32], Tensor[(3, 15, 9), float32]) */
}

def @func_3233() -> (Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) {
  @func_3231() /* ty=(Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) */
}

def @func_4619() -> (int16, Tensor[(9, 15, 10), float32], Tensor[(1350), float32]) {
  @func_4617() /* ty=(int16, Tensor[(9, 15, 10), float32], Tensor[(1350), float32]) */
}

def @func_4667() -> (Tensor[(3, 1, 9), float32],) {
  @func_4665() /* ty=(Tensor[(3, 1, 9), float32],) */
}

def @func_4438() -> (int16, int16) {
  %484 = fn () -> (int16, int16) {
    %480 = @func_4206() /* ty=(int16,) */;
    %481 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
    %482 = %480.0;
    %483 = %481.0;
    (%482, %483)
  };
  %484() /* ty=(int16, int16) */
}

def @func_1563(%var_1562: Tensor[(450), float32]) -> (int16, Tensor[(450), float32], int16, int16, Tensor[(27), int16], int16, Tensor[(10, 9, 5), float64], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) {
  %507 = fn (%var_1439: Tensor[(450), float32]) -> (int16, Tensor[(450), float32], int16, int16, Tensor[(27), int16], int16, Tensor[(10, 9, 5), float64], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) {
    %485 = @func_1170() /* ty=(int16, int16) */;
    %486 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
    %487 = @func_1080() /* ty=(int16,) */;
    %488 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
    %489 = @func_1080() /* ty=(int16,) */;
    %490 = cast(%var_1439, dtype="float32") /* ty=Tensor[(450), float32] */;
    %491 = reshape(%490, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), float32] */;
    %492 = @func_11(%491) /* ty=(Tensor[(10, 9, 5), float32],) */;
    %493 = %492.0;
    %494 = cast(%493, dtype="float64") /* ty=Tensor[(10, 9, 5), float64] */;
    %495 = cast(meta[relay.Constant][23] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %496 = cast(meta[relay.Constant][23] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %497 = reshape(%495, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
    %498 = reshape(%496, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
    %499 = @func_804(%497, %498) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */;
    %500 = %485.0;
    %501 = %486.2;
    %502 = %487.0;
    %503 = %488.3;
    %504 = %489.0;
    %505 = acosh(%494) /* ty=Tensor[(10, 9, 5), float64] */;
    %506 = %499.0;
    (%500, %var_1439, %501, %502, %503, %504, %505, %506, meta[relay.Constant][23] /* ty=Tensor[(192), float32] */)
  };
  %507(%var_1562) /* ty=(int16, Tensor[(450), float32], int16, int16, Tensor[(27), int16], int16, Tensor[(10, 9, 5), float64], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) */
}

def @func_5340() -> (Tensor[(3, 1, 9), float64], Tensor[(9, 12, 12), float64], Tensor[(192), float32]) {
  %508 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  %509 = cast(%508, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %510 = cast(meta[relay.Constant][24] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %511 = reshape(%510, newshape=[24, 8]) /* ty=Tensor[(24, 8), float32] */;
  %512 = @func_5244(%511) /* ty=(Tensor[(9, 12, 12), uint64], Tensor[(9, 12, 12), float64], Tensor[(6, 2, 16), float32], Tensor[(24, 8), float32]) */;
  %513 = sqrt(%509) /* ty=Tensor[(3, 1, 9), float64] */;
  %514 = %512.1;
  (%513, %514, meta[relay.Constant][24] /* ty=Tensor[(192), float32] */)
}

def @func_5304(%var_5302: Tensor[(3, 2, 9), bool]) -> (Tensor[(3, 2, 9), uint32], Tensor[(3, 1, 9), bool], int16) {
  @func_5301(%var_5302) /* ty=(Tensor[(3, 2, 9), uint32], Tensor[(3, 1, 9), bool], int16) */
}

def @func_11(%var_8: Tensor[(10, 9, 5), float32]) -> (Tensor[(10, 9, 5), float32],) {
  %515 = cast(%var_8, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %516 = log10(%515) /* ty=Tensor[(10, 9, 5), float32] */;
  (%516,)
}

def @func_3091() -> (Tensor[(3, 1, 9), bool],) {
  %517 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %518 = %517.1;
  (%518,)
}

def @func_1073() -> (Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) {
  %526 = fn () -> (Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) {
    %519 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 14), float32] */;
    %520 = cast(meta[relay.Constant][26] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %521 = cast(meta[relay.Constant][27] /* ty=Tensor[(27), int16] */, dtype="int16") /* ty=Tensor[(27), int16] */;
    %522 = reshape(%520, newshape=[]) /* ty=int16 */;
    %523 = reshape(%521, newshape=[3, 1, 9]) /* ty=Tensor[(3, 1, 9), int16] */;
    %524 = log2(%519) /* ty=Tensor[(14, 14), float32] */;
    %525 = @func_416(%522, %523) /* ty=Tensor[(3, 1, 9), bool] */;
    (%524, %525, meta[relay.Constant][26] /* ty=int16 */, meta[relay.Constant][27] /* ty=Tensor[(27), int16] */)
  };
  %526() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */
}

def @func_2816() -> int16 {
  %527 = @func_1249() /* ty=(int16, Tensor[(450), float64]) */;
  %527.0
}

def @func_3093() -> (Tensor[(3, 1, 9), bool],) {
  @func_3091() /* ty=(Tensor[(3, 1, 9), bool],) */
}

def @func_3712(%var_3679: Tensor[(15, 14, 12), float32], %var_3691: Tensor[(675), float64], %var_3692: Tensor[(144), float32]) -> (Tensor[(15, 3, 15), float64], Tensor[(675), float64], Tensor[(144), float32], int16, Tensor[(15, 14, 12), float32]) {
  %528 = cast(%var_3691, dtype="float64") /* ty=Tensor[(675), float64] */;
  %529 = cast(%var_3692, dtype="float32") /* ty=Tensor[(144), float32] */;
  %530 = reshape(%528, newshape=[15, 3, 15]) /* ty=Tensor[(15, 3, 15), float64] */;
  %531 = reshape(%529, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %532 = @func_2340(%530, %531) /* ty=(Tensor[(15, 3, 15), float64], Tensor[(3, 1, 9), bool], Tensor[(450), float32], Tensor[(144), float32], Tensor[(450), float32]) */;
  %533 = cast(%var_3679, dtype="float32") /* ty=Tensor[(15, 14, 12), float32] */;
  %534 = acosh(%533) /* ty=Tensor[(15, 14, 12), float32] */;
  %535 = cast(%534, dtype="float32") /* ty=Tensor[(15, 14, 12), float32] */;
  %536 = %532.0;
  %537 = @func_2816() /* ty=int16 */;
  %538 = erf(%535) /* ty=Tensor[(15, 14, 12), float32] */;
  (%536, %var_3691, %var_3692, %537, %538)
}

def @func_5126(%var_5120: Tensor[(405), int16], %var_5122: Tensor[(450), float32]) -> (Tensor[(3, 1, 9), bool], Tensor[(405), int16], Tensor[(405), int16], Tensor[(440), int16], Tensor[(450), float32]) {
  %539 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %540 = cast(%var_5120, dtype="int16") /* ty=Tensor[(405), int16] */;
  %541 = cast(meta[relay.Constant][28] /* ty=Tensor[(440), int16] */, dtype="int16") /* ty=Tensor[(440), int16] */;
  %542 = cast(%var_5122, dtype="float32") /* ty=Tensor[(450), float32] */;
  %543 = reshape(%540, newshape=[405]) /* ty=Tensor[(405), int16] */;
  %544 = reshape(%541, newshape=[110, 4]) /* ty=Tensor[(110, 4), int16] */;
  %545 = reshape(%542, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %546 = @func_3655(%543, %544, %545) /* ty=(Tensor[(3, 1, 9), bool], int16, Tensor[(14, 14), float32], Tensor[(3, 15, 9), float32], Tensor[(405), int16], Tensor[(110, 4), int16], Tensor[(3, 1, 9), bool], Tensor[(11, 8, 5), float64], int16, Tensor[(6, 9, 8), float32], Tensor[(450), float32]) */;
  %547 = %539.0;
  %548 = %546.4;
  (%547, %548, %var_5120, meta[relay.Constant][28] /* ty=Tensor[(440), int16] */, %var_5122)
}

def @func_2802() -> (Tensor[(6, 9, 8), float32],) {
  %549 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 9, 8), float32] */;
  %550 = acosh(%549) /* ty=Tensor[(6, 9, 8), float32] */;
  (%550,)
}

def @func_3717(%var_3714: Tensor[(15, 14, 12), float32], %var_3715: Tensor[(675), float64], %var_3716: Tensor[(144), float32]) -> (Tensor[(15, 3, 15), float64], Tensor[(675), float64], Tensor[(144), float32], int16, Tensor[(15, 14, 12), float32]) {
  @func_3712(%var_3714, %var_3715, %var_3716) /* ty=(Tensor[(15, 3, 15), float64], Tensor[(675), float64], Tensor[(144), float32], int16, Tensor[(15, 14, 12), float32]) */
}

def @func_5342() -> (Tensor[(3, 1, 9), float64], Tensor[(9, 12, 12), float64], Tensor[(192), float32]) {
  @func_5340() /* ty=(Tensor[(3, 1, 9), float64], Tensor[(9, 12, 12), float64], Tensor[(192), float32]) */
}

def @func_3535(%var_3533: Tensor[(16, 12, 11), float64], %var_3534: Tensor[(27), int16]) -> (Tensor[(16, 12, 11), float64], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) {
  %558 = fn (%var_3518: Tensor[(16, 12, 11), float64], %var_3523: Tensor[(27), int16]) -> (Tensor[(16, 12, 11), float64], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) {
    %551 = cast(%var_3518, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
    %552 = cast(meta[relay.Constant][30] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %553 = cast(%var_3523, dtype="int16") /* ty=Tensor[(27), int16] */;
    %554 = reshape(%552, newshape=[]) /* ty=int16 */;
    %555 = reshape(%553, newshape=[3, 1, 9]) /* ty=Tensor[(3, 1, 9), int16] */;
    %556 = atanh(%551) /* ty=Tensor[(16, 12, 11), float64] */;
    %557 = @func_416(%554, %555) /* ty=Tensor[(3, 1, 9), bool] */;
    (%556, %557, meta[relay.Constant][30] /* ty=int16 */, %var_3523)
  };
  %558(%var_3533, %var_3534) /* ty=(Tensor[(16, 12, 11), float64], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */
}

def @func_6030(%var_6029: Tensor[(432), bool]) -> (int16, Tensor[(3, 16, 9), float32], Tensor[(432), bool]) {
  %564 = fn (%var_6025: Tensor[(432), bool]) -> (int16, Tensor[(3, 16, 9), float32], Tensor[(432), bool]) {
    %559 = @func_1170() /* ty=(int16, int16) */;
    %560 = cast(%var_6025, dtype="bool") /* ty=Tensor[(432), bool] */;
    %561 = reshape(%560, newshape=[3, 16, 9]) /* ty=Tensor[(3, 16, 9), bool] */;
    %562 = %559.0;
    %563 = @func_4725(%561) /* ty=Tensor[(3, 16, 9), float32] */;
    (%562, %563, %var_6025)
  };
  %564(%var_6029) /* ty=(int16, Tensor[(3, 16, 9), float32], Tensor[(432), bool]) */
}

def @func_2668() -> (int16, int16, Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(27), int16]) {
  %565 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %566 = @func_1249() /* ty=(int16, Tensor[(450), float64]) */;
  %567 = cast(meta[relay.Constant][31] /* ty=Tensor[(576), uint32] */, dtype="uint32") /* ty=Tensor[(576), uint32] */;
  %568 = reshape(%567, newshape=[3, 16, 12]) /* ty=Tensor[(3, 16, 12), uint32] */;
  %569 = @func_1072() /* ty=(Tensor[(14, 14), float32], Tensor[(3, 1, 9), bool], int16, Tensor[(27), int16]) */;
  %570 = %565.0;
  %571 = %566.0;
  %572 = @func_253(%568) /* ty=Tensor[(3, 16, 12), float64] */;
  %573 = %569.3;
  (%570, %571, %572, meta[relay.Constant][31] /* ty=Tensor[(576), uint32] */, %573)
}

def @func_419(%var_417: int16, %var_418: Tensor[(3, 1, 9), int16]) -> Tensor[(3, 1, 9), bool] {
  %576 = fn (%var_411: int16, %var_412: Tensor[(3, 1, 9), int16]) -> Tensor[(3, 1, 9), bool] {
    %574 = cast(%var_411, dtype="bool") /* ty=bool */;
    %575 = cast(%var_412, dtype="bool") /* ty=Tensor[(3, 1, 9), bool] */;
    not_equal(%574, %575) /* ty=Tensor[(3, 1, 9), bool] */
  };
  %576(%var_417, %var_418) /* ty=Tensor[(3, 1, 9), bool] */
}

def @func_2388() -> (int16, Tensor[(3, 1, 9), bool]) {
  @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */
}

def @func_3907(%var_3902: Tensor[(3, 1, 9), bool]) -> Tensor[(3, ?, 9), float32] {
  %577 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %578 = %577.0;
  %579 = cast(%var_3902, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%581, %582) /* ty=Tensor[(3, ?, 9), float32] */
}

def @func_5270(%var_5269: Tensor[(13, 2, 7), float32]) -> (Tensor[(13, 2, 7), bool],) {
  %590 = fn (%var_5251: Tensor[(13, 2, 7), float32]) -> (Tensor[(13, 2, 7), bool],) {
    %583 = cast(%var_5251, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
    %584 = log(%583) /* ty=Tensor[(13, 2, 7), float32] */;
    %585 = cast(%var_5251, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
    %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %587 = cast(%584, dtype="bool") /* ty=Tensor[(13, 2, 7), bool] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %589 = less(%587, %588) /* ty=Tensor[(13, 2, 7), bool] */;
    (%589,)
  };
  %590(%var_5269) /* ty=(Tensor[(13, 2, 7), bool],) */
}

def @func_6324(%var_6322: Tensor[(7, 8, 1), float64], %var_6323: Tensor[(7, 8, 4), float64]) -> (Tensor[(7, 8, 4), float64], Tensor[(3, 1, 9), float32], Tensor[(10, 6, 8), float32], Tensor[(480), int8]) {
  %602 = fn (%var_6280: Tensor[(7, 8, 1), float64], %var_6281: Tensor[(7, 8, 4), float64]) -> (Tensor[(7, 8, 4), float64], Tensor[(3, 1, 9), float32], Tensor[(10, 6, 8), float32], Tensor[(480), int8]) {
    %591 = cast(%var_6280, dtype="float64") /* ty=Tensor[(7, 8, 1), float64] */;
    %592 = cast(%var_6281, dtype="float64") /* ty=Tensor[(7, 8, 4), float64] */;
    %593 = @func_4665() /* ty=(Tensor[(3, 1, 9), float32],) */;
    %594 = cast(meta[relay.Constant][32] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
    %595 = cast(meta[relay.Constant][32] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
    %596 = reshape(%594, newshape=[10, 6, 8]) /* ty=Tensor[(10, 6, 8), int8] */;
    %597 = reshape(%595, newshape=[10, 6, 8]) /* ty=Tensor[(10, 6, 8), int8] */;
    %598 = @func_4538(%596, %597) /* ty=(Tensor[(10, 6, 8), int8], int16, Tensor[(10, 6, 8), float32]) */;
    %599 = power(%591, %592) /* ty=Tensor[(7, 8, 4), float64] */;
    %600 = %593.0;
    %601 = %598.2;
    (%599, %600, %601, meta[relay.Constant][32] /* ty=Tensor[(480), int8] */)
  };
  %602(%var_6322, %var_6323) /* ty=(Tensor[(7, 8, 4), float64], Tensor[(3, 1, 9), float32], Tensor[(10, 6, 8), float32], Tensor[(480), int8]) */
}

def @func_6205() -> (Tensor[(16, 14, 6), float64], Tensor[(3, 1, 9), bool]) {
  %607 = fn () -> (Tensor[(16, 14, 6), float64], Tensor[(3, 1, 9), bool]) {
    %603 = @func_3258() /* ty=(Tensor[(16, 14, 6), float64], int16) */;
    %604 = @func_5142() /* ty=(Tensor[(3, 1, 9), bool],) */;
    %605 = %603.0;
    %606 = %604.0;
    (%605, %606)
  };
  %607() /* ty=(Tensor[(16, 14, 6), float64], Tensor[(3, 1, 9), bool]) */
}

def @func_4207() -> (int16,) {
  %609 = fn () -> (int16,) {
    %608 = @func_2816() /* ty=int16 */;
    (%608,)
  };
  %609() /* ty=(int16,) */
}

def @func_2151(%var_2149: Tensor[(7, 10, 11), int8], %var_2150: Tensor[(7, 10, 11), int8]) -> (Tensor[(7, 10, 11), bool], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) {
  @func_2147(%var_2149, %var_2150) /* ty=(Tensor[(7, 10, 11), bool], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) */
}

def @func_5246(%var_5245: Tensor[(24, 8), float32]) -> (Tensor[(9, 12, 12), uint64], Tensor[(9, 12, 12), float64], Tensor[(6, 2, 16), float32], Tensor[(24, 8), float32]) {
  %630 = fn (%var_5242: Tensor[(24, 8), float32]) -> (Tensor[(9, 12, 12), uint64], Tensor[(9, 12, 12), float64], Tensor[(6, 2, 16), float32], Tensor[(24, 8), float32]) {
    %610 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 12, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 12, 12), float32] */;
    %611 = cos(%610) /* ty=Tensor[(9, 12, 12), float32] */;
    %612 = cast(%611, dtype="float32") /* ty=Tensor[(9, 12, 12), float32] */;
    %613 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(9, 12, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %614 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 12, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 12, 12), float32] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %616 = maximum(%614, %615) /* ty=Tensor[(9, 12, 12), float32] */;
    %617 = cast(%611, dtype="uint64") /* ty=Tensor[(9, 12, 12), uint64] */;
    %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
    %619 = cast(%616, dtype="uint64") /* ty=Tensor[(9, 12, 12), uint64] */;
    %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %621 = cast(%611, dtype="float64") /* ty=Tensor[(9, 12, 12), float64] */;
    %622 = cast(%var_5242, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
    %623 = cast(%var_5242, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
    %624 = reshape(%622, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
    %625 = reshape(%623, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float32] */;
    %626 = @func_804(%624, %625) /* ty=(Tensor[(6, 2, 16), float32], Tensor[(6, 2, 16), float32]) */;
    %627 = bitwise_xor(%619, %620) /* ty=Tensor[(9, 12, 12), uint64] */;
    %628 = sigmoid(%621) /* ty=Tensor[(9, 12, 12), float64] */;
    %629 = %626.1;
    (%627, %628, %629, %var_5242)
  };
  %630(%var_5245) /* ty=(Tensor[(9, 12, 12), uint64], Tensor[(9, 12, 12), float64], Tensor[(6, 2, 16), float32], Tensor[(24, 8), float32]) */
}

def @func_2827() -> (Tensor[(3, 1, 9), bool],) {
  %631 = @func_1770() /* ty=Tensor[(3, 1, 9), bool] */;
  (%631,)
}

def @func_5494() -> (int16,) {
  %633 = fn () -> (int16,) {
    %632 = @func_3036() /* ty=int16 */;
    (%632,)
  };
  %633() /* ty=(int16,) */
}

def @func_4728(%var_4726: Tensor[(3, 16, 9), bool]) -> Tensor[(3, 16, 9), float32] {
  @func_4725(%var_4726) /* ty=Tensor[(3, 16, 9), float32] */
}

def @func_2932(%var_2904: Tensor[(450), float32]) -> (Tensor[(3, ?, 9), float64], Tensor[(6, 2, 16), float32], Tensor[(450), float32], Tensor[(6, 9, 8), float32]) {
  %634 = @func_2386() /* ty=(int16, Tensor[(3, 1, 9), bool]) */;
  %635 = %634.1;
  %636 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
  %637 = %636.0;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %639 = shape_of(%635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%635, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %642 = cast(%var_2904, dtype="float32") /* ty=Tensor[(450), float32] */;
  %643 = reshape(%642, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %644 = @func_1561(%643) /* ty=(int16, Tensor[(450), float32], int16, int16, Tensor[(27), int16], int16, Tensor[(10, 9, 5), float64], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) */;
  %645 = @func_2802() /* ty=(Tensor[(6, 9, 8), float32],) */;
  %646 = add(%640, %641) /* ty=Tensor[(3, ?, 9), float64] */;
  %647 = %644.7;
  %648 = %645.0;
  (%646, %647, %var_2904, %648)
}

def @func_2206(%var_2205: Tensor[(7, 110), int8]) -> (int16, Tensor[(7, 10, 11), bool], Tensor[(7, 110), int8], int16, Tensor[(3, 1, 9), bool]) {
  %663 = fn (%var_2193: Tensor[(7, 110), int8]) -> (int16, Tensor[(7, 10, 11), bool], Tensor[(7, 110), int8], int16, Tensor[(3, 1, 9), bool]) {
    %649 = @func_2016() /* ty=(int16,) */;
    %650 = cast(%var_2193, dtype="int8") /* ty=Tensor[(7, 110), int8] */;
    %651 = cast(%var_2193, dtype="int8") /* ty=Tensor[(7, 110), int8] */;
    %652 = reshape(%650, newshape=[7, 10, 11]) /* ty=Tensor[(7, 10, 11), int8] */;
    %653 = reshape(%651, newshape=[7, 10, 11]) /* ty=Tensor[(7, 10, 11), int8] */;
    %654 = @func_2147(%652, %653) /* ty=(Tensor[(7, 10, 11), bool], Tensor[(6, 2, 16), float32], Tensor[(192), float32]) */;
    %655 = %649.0;
    %656 = cast(%655, dtype="float64") /* ty=float64 */;
    %657 = reshape(%656, newshape=[]) /* ty=float64 */;
    %658 = @func_1742(%657) /* ty=(int16, Tensor[(1, 8, 6), uint8]) */;
    %659 = @func_2081() /* ty=(Tensor[(3, 1, 9), bool],) */;
    %660 = %654.0;
    %661 = %658.0;
    %662 = %659.0;
    (%655, %660, %var_2193, %661, %662)
  };
  %663(%var_2205) /* ty=(int16, Tensor[(7, 10, 11), bool], Tensor[(7, 110), int8], int16, Tensor[(3, 1, 9), bool]) */
}

def @func_5675(%var_5672: Tensor[(3, 16, 12), float64], %var_5673: Tensor[(144), float32], %var_5674: Tensor[(450), float32]) -> (int16, Tensor[(144), float32], Tensor[(450), float32], Tensor[(3, 16, 12), float32], Tensor[(3, 16, 12), float64], int16) {
  %687 = fn (%var_5595: Tensor[(3, 16, 12), float64], %var_5624: Tensor[(144), float32], %var_5625: Tensor[(450), float32]) -> (int16, Tensor[(144), float32], Tensor[(450), float32], Tensor[(3, 16, 12), float32], Tensor[(3, 16, 12), float64], int16) {
    %664 = cast(%var_5624, dtype="float32") /* ty=Tensor[(144), float32] */;
    %665 = cast(%var_5625, dtype="float32") /* ty=Tensor[(450), float32] */;
    %666 = reshape(%664, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), float32] */;
    %667 = reshape(%665, newshape=[450]) /* ty=Tensor[(450), float32] */;
    %668 = @func_1310(%666, %667) /* ty=(Tensor[(16, 1, 9), float32], int16, Tensor[(10, 9, 5), float32], Tensor[(450), float32]) */;
    %669 = @func_2668() /* ty=(int16, int16, Tensor[(3, 16, 12), float64], Tensor[(576), uint32], Tensor[(27), int16]) */;
    %670 = %669.2;
    %671 = cast(%670, dtype="float64") /* ty=Tensor[(3, 16, 12), float64] */;
    %672 = cosh(%671) /* ty=Tensor[(3, 16, 12), float64] */;
    %673 = cast(%var_5595, dtype="uint32") /* ty=Tensor[(3, 16, 12), uint32] */;
    %674 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
    %675 = cast(%672, dtype="uint32") /* ty=Tensor[(3, 16, 12), uint32] */;
    %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %677 = bitwise_and(%675, %676) /* ty=Tensor[(3, 16, 12), uint32] */;
    %678 = cast(%677, dtype="float32") /* ty=Tensor[(3, 16, 12), float32] */;
    %679 = cast(%677, dtype="float64") /* ty=Tensor[(3, 16, 12), float64] */;
    %680 = tan(%679) /* ty=Tensor[(3, 16, 12), float64] */;
    %681 = cast(%680, dtype="float64") /* ty=Tensor[(3, 16, 12), float64] */;
    %682 = @func_5493() /* ty=(int16,) */;
    %683 = %668.1;
    %684 = log10(%678) /* ty=Tensor[(3, 16, 12), float32] */;
    %685 = log2(%681) /* ty=Tensor[(3, 16, 12), float64] */;
    %686 = %682.0;
    (%683, %var_5624, %var_5625, %684, %685, %686)
  };
  %687(%var_5672, %var_5673, %var_5674) /* ty=(int16, Tensor[(144), float32], Tensor[(450), float32], Tensor[(3, 16, 12), float32], Tensor[(3, 16, 12), float64], int16) */
}

def @func_2744(%var_2722: Tensor[(11, 8, 5), int16], %var_2723: Tensor[(11, 8, 5), int16]) -> (Tensor[(11, 8, 5), bool], int16) {
  %688 = cast(%var_2723, dtype="bool") /* ty=Tensor[(11, 8, 5), bool] */;
  %689 = shape_of(%var_2722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%var_2722, dtype="bool") /* ty=Tensor[(11, 8, 5), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %692 = @func_2016() /* ty=(int16,) */;
  %693 = equal(%690, %691) /* ty=Tensor[(11, 8, 5), bool] */;
  %694 = %692.0;
  (%693, %694)
}

def @func_2343(%var_2341: Tensor[(15, 3, 15), float64], %var_2342: Tensor[(144), float32]) -> (Tensor[(15, 3, 15), float64], Tensor[(3, 1, 9), bool], Tensor[(450), float32], Tensor[(144), float32], Tensor[(450), float32]) {
  %705 = fn (%var_2322: Tensor[(15, 3, 15), float64], %var_2333: Tensor[(144), float32]) -> (Tensor[(15, 3, 15), float64], Tensor[(3, 1, 9), bool], Tensor[(450), float32], Tensor[(144), float32], Tensor[(450), float32]) {
    %695 = cast(%var_2322, dtype="float64") /* ty=Tensor[(15, 3, 15), float64] */;
    %696 = @func_2042() /* ty=(Tensor[(3, 1, 9), bool],) */;
    %697 = cast(%var_2333, dtype="float32") /* ty=Tensor[(144), float32] */;
    %698 = cast(meta[relay.Constant][34] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
    %699 = reshape(%697, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), float32] */;
    %700 = reshape(%698, newshape=[450]) /* ty=Tensor[(450), float32] */;
    %701 = @func_1310(%699, %700) /* ty=(Tensor[(16, 1, 9), float32], int16, Tensor[(10, 9, 5), float32], Tensor[(450), float32]) */;
    %702 = atanh(%695) /* ty=Tensor[(15, 3, 15), float64] */;
    %703 = %696.0;
    %704 = %701.3;
    (%702, %703, %704, %var_2333, meta[relay.Constant][34] /* ty=Tensor[(450), float32] */)
  };
  %705(%var_2341, %var_2342) /* ty=(Tensor[(15, 3, 15), float64], Tensor[(3, 1, 9), bool], Tensor[(450), float32], Tensor[(144), float32], Tensor[(450), float32]) */
}

def @func_4472() -> (int16,) {
  %708 = fn () -> (int16,) {
    %706 = @func_2016() /* ty=(int16,) */;
    %707 = %706.0;
    (%707,)
  };
  %708() /* ty=(int16,) */
}

def @func_4372() -> (int16, Tensor[(3, 1, 9), float64]) {
  @func_4370() /* ty=(int16, Tensor[(3, 1, 9), float64]) */
}

def @func_4370() -> (int16, Tensor[(3, 1, 9), float64]) {
  %709 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
  %710 = cast(%709, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %711 = @func_3203() /* ty=int16 */;
  %712 = rsqrt(%710) /* ty=Tensor[(3, 1, 9), float64] */;
  (%711, %712)
}

def @func_4541(%var_4539: Tensor[(10, 6, 8), int8], %var_4540: Tensor[(10, 6, 8), int8]) -> (Tensor[(10, 6, 8), int8], int16, Tensor[(10, 6, 8), float32]) {
  %727 = fn (%var_4502: Tensor[(10, 6, 8), int8], %var_4503: Tensor[(10, 6, 8), int8]) -> (Tensor[(10, 6, 8), int8], int16, Tensor[(10, 6, 8), float32]) {
    %713 = cast(%var_4503, dtype="int8") /* ty=Tensor[(10, 6, 8), int8] */;
    %714 = shape_of(%var_4502, dtype="int32") /* ty=Tensor[(3), int32] */;
    %715 = cast(%var_4502, dtype="int8") /* ty=Tensor[(10, 6, 8), int8] */;
    %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %717 = @func_1170() /* ty=(int16, int16) */;
    %718 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 6, 8), int8] */, dtype="uint32") /* ty=Tensor[(10, 6, 8), uint32] */;
    %719 = shape_of(%var_4502, dtype="int32") /* ty=Tensor[(3), int32] */;
    %720 = cast(%var_4502, dtype="uint32") /* ty=Tensor[(10, 6, 8), uint32] */;
    %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %722 = left_shift(%720, %721) /* ty=Tensor[(10, 6, 8), uint32] */;
    %723 = cast(%722, dtype="float32") /* ty=Tensor[(10, 6, 8), float32] */;
    %724 = minimum(%715, %716) /* ty=Tensor[(10, 6, 8), int8] */;
    %725 = %717.1;
    %726 = acos(%723) /* ty=Tensor[(10, 6, 8), float32] */;
    (%724, %725, %726)
  };
  %727(%var_4539, %var_4540) /* ty=(Tensor[(10, 6, 8), int8], int16, Tensor[(10, 6, 8), float32]) */
}

def @func_5955() -> (Tensor[(3, 1, 9), bool],) {
  %730 = fn () -> (Tensor[(3, 1, 9), bool],) {
    %728 = @func_2827() /* ty=(Tensor[(3, 1, 9), bool],) */;
    %729 = %728.0;
    (%729,)
  };
  %730() /* ty=(Tensor[(3, 1, 9), bool],) */
}

def @func_5543() -> int16 {
  %732 = fn () -> int16 {
    %731 = @func_2995() /* ty=(int16,) */;
    %731.0
  };
  %732() /* ty=int16 */
}

def @func_1772() -> Tensor[(3, 1, 9), bool] {
  @func_1770() /* ty=Tensor[(3, 1, 9), bool] */
}

def @func_3327() -> Tensor[(3, 1, 9), bool] {
  %734 = fn () -> Tensor[(3, 1, 9), bool] {
    %733 = @func_2827() /* ty=(Tensor[(3, 1, 9), bool],) */;
    %733.0
  };
  %734() /* ty=Tensor[(3, 1, 9), bool] */
}

def @func_1868() -> (Tensor[(3, 1, 9), int16], Tensor[(3, ?, 9), float64], int16) {
  %758 = fn () -> (Tensor[(3, 1, 9), int16], Tensor[(3, ?, 9), float64], int16) {
    %735 = @func_1170() /* ty=(int16, int16) */;
    %736 = %735.0;
    %737 = @func_1677() /* ty=Tensor[(3, 1, 9), bool] */;
    %738 = cast(%736, dtype="int8") /* ty=int8 */;
    %739 = cast(%737, dtype="int8") /* ty=Tensor[(3, 1, 9), int8] */;
    %740 = multiply(%738, %739) /* ty=Tensor[(3, 1, 9), int8] */;
    %741 = cast(%740, dtype="int16") /* ty=Tensor[(3, 1, 9), int16] */;
    %742 = cast(%736, dtype="int16") /* ty=int16 */;
    %743 = cast(%740, dtype="bool") /* ty=Tensor[(3, 1, 9), bool] */;
    %744 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %745 = cast(%737, dtype="bool") /* ty=Tensor[(3, 1, 9), bool] */;
    %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %747 = greater(%745, %746) /* ty=Tensor[(3, ?, 9), bool] */;
    %748 = cast(%747, dtype="uint32") /* ty=Tensor[(3, ?, 9), uint32] */;
    %749 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
    %750 = cast(%740, dtype="uint32") /* ty=Tensor[(3, 1, 9), uint32] */;
    %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %752 = minimum(%750, %751) /* ty=Tensor[(3, ?, 9), uint32] */;
    %753 = cast(%752, dtype="float64") /* ty=Tensor[(3, ?, 9), float64] */;
    %754 = @func_1107() /* ty=(int16,) */;
    %755 = right_shift(%741, %742) /* ty=Tensor[(3, 1, 9), int16] */;
    %756 = acos(%753) /* ty=Tensor[(3, ?, 9), float64] */;
    %757 = %754.0;
    (%755, %756, %757)
  };
  %758() /* ty=(Tensor[(3, 1, 9), int16], Tensor[(3, ?, 9), float64], int16) */
}

def @func_4665() -> (Tensor[(3, 1, 9), float32],) {
  %759 = @func_3231() /* ty=(Tensor[(3, 1, 9), bool], Tensor[(3, 1, 9), bool]) */;
  %760 = %759.1;
  %761 = cast(%760, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %762 = acosh(%761) /* ty=Tensor[(3, 1, 9), float64] */;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %764 = sin(%763) /* ty=Tensor[(3, 1, 9), float32] */;
  (%764,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
