==========mod==========
#[version = "0.0.5"]
def @func_6656() -> (Tensor[(11, 11, 6), bool],) {
  %0 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %1 = %0.0;
  (%1,)
}

def @func_7501() -> (Tensor[(11, 11, 6), float32], Tensor[(6, 1, 5), float64]) {
  %2 = @func_6799() /* ty=(Tensor[(6, 1, 5), float64],) */;
  %3 = @func_4756() /* ty=Tensor[(11, 11, 6), float32] */;
  %4 = %2.0;
  (%3, %4)
}

def @func_3006(%var_2963: Tensor[(1, 6, 9), uint8], %var_2978: int32) -> (Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) {
  %5 = cast(%var_2963, dtype="uint8") /* ty=Tensor[(1, 6, 9), uint8] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 6, 9), uint8] */, dtype="uint8") /* ty=Tensor[(11, 6, 9), uint8] */;
  %7 = cast(%var_2963, dtype="float32") /* ty=Tensor[(1, 6, 9), float32] */;
  %8 = cast(%var_2978, dtype="int32") /* ty=int32 */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %10 = reshape(%8, newshape=[]) /* ty=int32 */;
  %11 = reshape(%9, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
  %12 = @func_984(%10, %11) /* ty=(Tensor[(12, 12, 14), int32],) */;
  %13 = cast(meta[relay.Constant][2] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %14 = reshape(%13, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), float32] */;
  %15 = logical_xor(%5, %6) /* ty=Tensor[(11, 6, 9), uint8] */;
  %16 = cosh(%7) /* ty=Tensor[(1, 6, 9), float32] */;
  %17 = %12.0;
  %18 = @func_696(%14) /* ty=Tensor[(8, 6, 10), float32] */;
  (%15, %16, %17, %var_2978, meta[relay.Constant][1] /* ty=Tensor[(2016), int32] */, %18, meta[relay.Constant][2] /* ty=Tensor[(480), float32] */)
}

def @func_2148(%var_2073: Tensor[(4, 14, 4), float32], %var_2077: Tensor[(1, 720), float64], %var_2085: Tensor[(540), float64], %var_2101: Tensor[(4, 196), float32], %var_2117: Tensor[(40, 12), float32]) -> (Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) {
  %19 = cast(%var_2077, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
  %20 = cast(%var_2077, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
  %21 = reshape(%19, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %22 = reshape(%20, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %23 = cast(%var_2085, dtype="float64") /* ty=Tensor[(540), float64] */;
  %24 = cast(%var_2085, dtype="float64") /* ty=Tensor[(540), float64] */;
  %25 = reshape(%23, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
  %26 = reshape(%24, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
  %27 = @func_1168(%25, %26) /* ty=(Tensor[(6, 15, 6), bool],) */;
  %28 = cast(%var_2073, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
  %29 = cosh(%28) /* ty=Tensor[(4, 14, 4), float32] */;
  %30 = cast(%var_2073, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %34 = cast(%var_2101, dtype="float32") /* ty=Tensor[(4, 196), float32] */;
  %35 = cast(%var_2101, dtype="float32") /* ty=Tensor[(4, 196), float32] */;
  %36 = reshape(%34, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
  %37 = reshape(%35, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
  %38 = cast(%var_2117, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %39 = reshape(%38, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), float32] */;
  %40 = %27.0;
  %41 = cast(%40, dtype="float64") /* ty=Tensor[(6, 15, 6), float64] */;
  %42 = cast(%40, dtype="float64") /* ty=Tensor[(6, 15, 6), float64] */;
  %43 = reshape(%41, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
  %44 = reshape(%42, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
  %45 = @func_1168(%43, %44) /* ty=(Tensor[(6, 15, 6), bool],) */;
  %46 = @func_861(%36, %37) /* ty=Tensor[(7, 7, 16), float32] */;
  %47 = cast(%46, dtype="float32") /* ty=Tensor[(7, 7, 16), float32] */;
  %48 = cast(%46, dtype="float32") /* ty=Tensor[(7, 7, 16), float32] */;
  %49 = reshape(%47, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
  %50 = reshape(%48, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
  %51 = cast(%29, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
  %52 = atanh(%51) /* ty=Tensor[(4, 14, 4), float32] */;
  %53 = cast(%29, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%52, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %57 = @func_1715(%21, %22) /* ty=Tensor[(4, 12, 15), bool] */;
  %58 = mod(%32, %33) /* ty=Tensor[(4, 14, 4), float32] */;
  %59 = @func_696(%39) /* ty=Tensor[(8, 6, 10), float32] */;
  %60 = %45.0;
  %61 = @func_861(%49, %50) /* ty=Tensor[(7, 7, 16), float32] */;
  %62 = power(%55, %56) /* ty=Tensor[(4, 14, 4), float64] */;
  (%57, %var_2077, %40, %var_2085, %58, %46, %var_2101, %59, %var_2117, %60, %61, %62)
}

def @func_8102() -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool]) {
  %63 = @func_5836() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %64 = @func_5836() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %65 = %63.0;
  %66 = %64.0;
  (%65, %66)
}

def @func_5836() -> (Tensor[(11, 11, 6), bool],) {
  %67 = @func_5306() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) */;
  %68 = %67.1;
  (%68,)
}

def @func_2728(%var_2722: Tensor[(6, 13, 6), float64]) -> (Tensor[(6, 13, 6), float64],) {
  %69 = cast(%var_2722, dtype="float64") /* ty=Tensor[(6, 13, 6), float64] */;
  %70 = acosh(%69) /* ty=Tensor[(6, 13, 6), float64] */;
  (%70,)
}

def @func_10289(%var_10256: Tensor[(720), float64], %var_10258: Tensor[(784), float32]) -> (Tensor[(720), float64], Tensor[(192, 1), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(4, 36), float64], Tensor[(2880), int64], Tensor[(468), float64], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(784), float32]) {
  %71 = cast(meta[relay.Constant][3] /* ty=Tensor[(192, 1), float32] */, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %72 = cast(%var_10256, dtype="float64") /* ty=Tensor[(720), float64] */;
  %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %74 = cast(%var_10258, dtype="float32") /* ty=Tensor[(784), float32] */;
  %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %76 = reshape(%71, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %77 = reshape(%72, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %78 = reshape(%73, newshape=[9, 60]) /* ty=Tensor[(9, 60), float64] */;
  %79 = reshape(%74, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %80 = reshape(%75, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %81 = @func_4556(%76, %77, %78, %79, %80) /* ty=(Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(6, 15, 6), bool], Tensor[(224), float32], Tensor[(720), float64], Tensor[(9, 60), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), bool]) */;
  %82 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 36), float64] */, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %83 = cast(meta[relay.Constant][7] /* ty=Tensor[(2880), int64] */, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %84 = cast(meta[relay.Constant][8] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %85 = reshape(%82, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float64] */;
  %86 = reshape(%83, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %87 = reshape(%84, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %88 = @func_3348(%85, %86, %87) /* ty=(Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) */;
  %89 = @func_6990() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64]) */;
  %90 = %89.0;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %92 = asin(%91) /* ty=Tensor[(11, 11, 6), float64] */;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %94 = cast(%var_10258, dtype="float32") /* ty=Tensor[(784), float32] */;
  %95 = reshape(%94, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %96 = @func_7148(%95) /* ty=(Tensor[(2, 15, 12), float64], Tensor[(12, 16, 15), int64], Tensor[(8, 360), int64], Tensor[(784), float32], Tensor[(784), float32]) */;
  %97 = %81.4;
  %98 = @func_4221() /* ty=Tensor[(11, 11, 6), float32] */;
  %99 = %88.4;
  %100 = cosh(%93) /* ty=Tensor[(11, 11, 6), float64] */;
  %101 = @func_10071() /* ty=Tensor[(11, 11, 6), bool] */;
  %102 = %96.3;
  (%97, meta[relay.Constant][3] /* ty=Tensor[(192, 1), float32] */, %var_10256, meta[relay.Constant][4] /* ty=Tensor[(540), float64] */, %var_10258, meta[relay.Constant][5] /* ty=Tensor[(480), float32] */, %98, %99, meta[relay.Constant][6] /* ty=Tensor[(4, 36), float64] */, meta[relay.Constant][7] /* ty=Tensor[(2880), int64] */, meta[relay.Constant][8] /* ty=Tensor[(468), float64] */, %100, %101, %102)
}

def @func_4556(%var_4511: Tensor[(192), float32], %var_4527: Tensor[(720), float64], %var_4528: Tensor[(9, 60), float64], %var_4529: Tensor[(784), float32], %var_4530: Tensor[(480), float32]) -> (Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(6, 15, 6), bool], Tensor[(224), float32], Tensor[(720), float64], Tensor[(9, 60), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), bool]) {
  %103 = cast(%var_4511, dtype="float32") /* ty=Tensor[(192), float32] */;
  %104 = reshape(%103, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
  %105 = cast(meta[relay.Constant][9] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %106 = cast(%var_4527, dtype="float64") /* ty=Tensor[(720), float64] */;
  %107 = cast(%var_4528, dtype="float64") /* ty=Tensor[(9, 60), float64] */;
  %108 = cast(%var_4529, dtype="float32") /* ty=Tensor[(784), float32] */;
  %109 = cast(%var_4530, dtype="float32") /* ty=Tensor[(480), float32] */;
  %110 = reshape(%105, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
  %111 = reshape(%106, newshape=[1, 720]) /* ty=Tensor[(1, 720), float64] */;
  %112 = reshape(%107, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %113 = reshape(%108, newshape=[4, 196]) /* ty=Tensor[(4, 196), float32] */;
  %114 = reshape(%109, newshape=[40, 12]) /* ty=Tensor[(40, 12), float32] */;
  %115 = @func_2148(%110, %111, %112, %113, %114) /* ty=(Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) */;
  %116 = @func_4221() /* ty=Tensor[(11, 11, 6), float32] */;
  %117 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 11, 6), float32] */, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %121 = @func_2185(%104) /* ty=Tensor[(16, 2, 6), float32] */;
  %122 = %115.9;
  %123 = less_equal(%119, %120) /* ty=Tensor[(11, 11, 6), bool] */;
  (%121, %var_4511, %122, meta[relay.Constant][9] /* ty=Tensor[(224), float32] */, %var_4527, %var_4528, %var_4529, %var_4530, %123)
}

def @func_10037() -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) {
  %124 = @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %125 = @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %126 = %124.0;
  %127 = %125.0;
  (%126, %127)
}

def @main(%var_10749: Tensor[(12, 14, 8), int64], %var_10755: Tensor[(392), float32]) -> (Tensor[(54), uint8], Tensor[(392), float32], Tensor[(11, 11, 6), float32], Tensor[(12, 14, 8), uint32]) {
  %128 = cast(%var_10755, dtype="float32") /* ty=Tensor[(392), float32] */;
  %129 = reshape(%128, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %130 = @func_4133(%129) /* ty=(Tensor[(11, 11, 6), int32], Tensor[(2016), int32], Tensor[(392), float32], Tensor[(2880), int64], Tensor[(2016), int32], Tensor[(54), uint8]) */;
  %131 = @func_8643() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %132 = cast(%var_10749, dtype="int64") /* ty=Tensor[(12, 14, 8), int64] */;
  %133 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(12, 14, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 14, 8), int64] */, dtype="int64") /* ty=Tensor[(12, 14, 8), int64] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %136 = minimum(%134, %135) /* ty=Tensor[(12, 14, 8), int64] */;
  %137 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 14, 8), int64] */, dtype="uint32") /* ty=Tensor[(12, 14, 8), uint32] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="uint32") /* ty=Tensor[(12, 14, 8), uint32] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %141 = %130.5;
  %142 = %131.0;
  %143 = right_shift(%139, %140) /* ty=Tensor[(12, 14, 8), uint32] */;
  (%141, %var_10755, %142, %143)
}

def @func_4949() -> Tensor[(6, 1, 5), float64] {
  %144 = cast(-2.93554f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %145 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 1, 5), float64] */, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  power(%144, %145) /* ty=Tensor[(6, 1, 5), float64] */
}

def @func_7365(%var_7362: Tensor[(2016), int32]) -> (Tensor[(11, 11, 6), bool], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32]) {
  %146 = @func_5836() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %147 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %148 = cast(%var_7362, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %149 = reshape(%147, newshape=[]) /* ty=int32 */;
  %150 = reshape(%148, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
  %151 = @func_984(%149, %150) /* ty=(Tensor[(12, 12, 14), int32],) */;
  %152 = %146.0;
  %153 = %151.0;
  (%152, %153, 8 /* ty=int32 */, %var_7362)
}

def @func_3243(%var_3175: Tensor[(6, 16, 9), float32], %var_3179: int32, %var_3202: Tensor[(540), float64]) -> (Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(6, 16, 9), float32], int32, Tensor[(3, 18), uint8], Tensor[(6, 15, 6), bool], Tensor[(6, 16, 9), float32]) {
  %154 = cast(%var_3179, dtype="int32") /* ty=int32 */;
  %155 = cast(meta[relay.Constant][13] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %156 = reshape(%154, newshape=[]) /* ty=int32 */;
  %157 = reshape(%155, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
  %158 = @func_984(%156, %157) /* ty=(Tensor[(12, 12, 14), int32],) */;
  %159 = cast(%var_3202, dtype="float64") /* ty=Tensor[(540), float64] */;
  %160 = cast(%var_3202, dtype="float64") /* ty=Tensor[(540), float64] */;
  %161 = reshape(%159, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
  %162 = reshape(%160, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
  %163 = @func_1168(%161, %162) /* ty=(Tensor[(6, 15, 6), bool],) */;
  %164 = cast(%var_3175, dtype="float32") /* ty=Tensor[(6, 16, 9), float32] */;
  %165 = log2(%164) /* ty=Tensor[(6, 16, 9), float32] */;
  %166 = cast(%165, dtype="float32") /* ty=Tensor[(6, 16, 9), float32] */;
  %167 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 18), uint8] */, dtype="uint8") /* ty=Tensor[(3, 18), uint8] */;
  %168 = cast(%var_3179, dtype="int32") /* ty=int32 */;
  %169 = reshape(%167, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), uint8] */;
  %170 = reshape(%168, newshape=[]) /* ty=int32 */;
  %171 = @func_3006(%169, %170) /* ty=(Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) */;
  %172 = %163.0;
  %173 = cast(%172, dtype="float64") /* ty=Tensor[(6, 15, 6), float64] */;
  %174 = cast(%var_3202, dtype="float64") /* ty=Tensor[(540), float64] */;
  %175 = reshape(%173, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
  %176 = reshape(%174, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
  %177 = @func_1168(%175, %176) /* ty=(Tensor[(6, 15, 6), bool],) */;
  %178 = cast(%165, dtype="float32") /* ty=Tensor[(6, 16, 9), float32] */;
  %179 = %158.0;
  %180 = sinh(%166) /* ty=Tensor[(6, 16, 9), float32] */;
  %181 = %171.3;
  %182 = %177.0;
  %183 = cos(%178) /* ty=Tensor[(6, 16, 9), float32] */;
  (%179, %var_3179, meta[relay.Constant][13] /* ty=Tensor[(2016), int32] */, %172, %var_3202, %180, %181, meta[relay.Constant][14] /* ty=Tensor[(3, 18), uint8] */, %182, %183)
}

def @func_8470() -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) {
  %184 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
  %185 = @func_5115() /* ty=Tensor[(11, 11, 6), float32] */;
  (%184, %185)
}

def @func_5115() -> Tensor[(11, 11, 6), float32] {
  @func_4896() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_9065(%var_9018: Tensor[(7, 28), float64], %var_9056: Tensor[(140), float32]) -> (Tensor[(11, 11, 6), float32], Tensor[(7, 28), bool], Tensor[(11, 11, 6), bool], Tensor[(140), float32]) {
  %186 = cast(%var_9018, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %187 = acos(%186) /* ty=Tensor[(7, 28), float32] */;
  %188 = cast(%var_9018, dtype="float64") /* ty=Tensor[(7, 28), float64] */;
  %189 = reshape(%188, newshape=[196]) /* ty=Tensor[(196), float64] */;
  %190 = @func_7535(%189) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(14, 2, 7), float64], Tensor[(196), float64]) */;
  %191 = %190.3;
  %192 = cast(%191, dtype="bool") /* ty=Tensor[(196), bool] */;
  %193 = shape_of(%187, dtype="int32") /* ty=Tensor[(2), int32] */;
  %194 = cast(%187, dtype="bool") /* ty=Tensor[(7, 28), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %196 = cast(%var_9056, dtype="float32") /* ty=Tensor[(140), float32] */;
  %197 = reshape(%196, newshape=[1, 140]) /* ty=Tensor[(1, 140), float32] */;
  %198 = @func_5541(%197) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 5, 4), float32], Tensor[(1, 140), float32]) */;
  %199 = @func_5449() /* ty=Tensor[(11, 11, 6), float32] */;
  %200 = greater_equal(%194, %195) /* ty=Tensor[(7, 28), bool] */;
  %201 = %198.0;
  (%199, %200, %201, %var_9056)
}

def @func_8033(%var_8030: Tensor[(64), float64], %var_8031: Tensor[(832), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(16, 4, 13), float64], Tensor[(64), float64], Tensor[(832), float64]) {
  %202 = @func_5632() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %203 = cast(%var_8030, dtype="float64") /* ty=Tensor[(64), float64] */;
  %204 = cast(%var_8031, dtype="float64") /* ty=Tensor[(832), float64] */;
  %205 = reshape(%203, newshape=[16, 4, 1]) /* ty=Tensor[(16, 4, 1), float64] */;
  %206 = reshape(%204, newshape=[16, 4, 13]) /* ty=Tensor[(16, 4, 13), float64] */;
  %207 = %202.0;
  %208 = @func_7845(%205, %206) /* ty=Tensor[(16, 4, 13), float64] */;
  (%207, %208, %var_8030, %var_8031)
}

def @func_9899() -> Tensor[(11, 11, 6), float64] {
  %209 = @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %209.0
}

def @func_8353(%var_8281: Tensor[(5, 3, 7), int32], %var_8297: Tensor[(112, 2), float32]) -> (Tensor[(5, 3, 7), float32], Tensor[(14, 8, 2), float32], Tensor[(112, 2), float32], Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(196), float64], Tensor[(11, 11, 6), float32], Tensor[(5, 3, 7), float32]) {
  %210 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 3, 7), int32] */, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
  %211 = shape_of(%var_8281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%var_8281, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %214 = less(%212, %213) /* ty=Tensor[(5, 3, 7), bool] */;
  %215 = cast(%var_8281, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%214, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %219 = cast(%var_8297, dtype="float32") /* ty=Tensor[(112, 2), float32] */;
  %220 = reshape(%219, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float32] */;
  %221 = @func_7391(%220) /* ty=(Tensor[(14, 8, 2), float32],) */;
  %222 = @func_4736() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %223 = cast(meta[relay.Constant][16] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %224 = reshape(%223, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), float64] */;
  %225 = @func_3990(%224) /* ty=(Tensor[(14, 2, 7), float64],) */;
  %226 = cast(%var_8281, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
  %227 = divide(%217, %218) /* ty=Tensor[(5, 3, 7), float32] */;
  %228 = %221.0;
  %229 = %222.0;
  %230 = %225.0;
  %231 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
  %232 = log10(%226) /* ty=Tensor[(5, 3, 7), float32] */;
  (%227, %228, %var_8297, %229, %230, meta[relay.Constant][16] /* ty=Tensor[(196), float64] */, %231, %232)
}

def @func_8496() -> Tensor[(11, 11, 6), float64] {
  %233 = @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %233.0
}

def @func_10739() -> (Tensor[(14, 2, 7), float64], Tensor[(11, 11, 6), float32]) {
  %234 = @func_8643() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %235 = @func_10191() /* ty=Tensor[(14, 2, 7), float64] */;
  %236 = %234.0;
  (%235, %236)
}

def @func_4776() -> Tensor[(11, 11, 6), int64] {
  %237 = @func_4263() /* ty=Tensor[(11, 11, 6), bool] */;
  %238 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 11, 6), bool] */, dtype="int64") /* ty=Tensor[(11, 11, 6), int64] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="int64") /* ty=Tensor[(11, 11, 6), int64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%240, %241) /* ty=Tensor[(11, 11, 6), int64] */
}

def @func_9537() -> (Tensor[(11, 11, 6), float64],) {
  %242 = @func_7901() /* ty=Tensor[(11, 11, 6), float64] */;
  (%242,)
}

def @func_8129() -> (Tensor[(11, 11, 6), float64],) {
  %243 = @func_6547() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %244 = %243.0;
  (%244,)
}

def @func_5605(%var_5582: Tensor[(6, 1, 5), float64]) -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32], Tensor[(720), float64], Tensor[(11, 11, 6), bool], Tensor[(6, ?, 5), float32]) {
  %245 = @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %246 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %247 = %246.0;
  %248 = cast(%247, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %249 = reshape(%248, newshape=[11, 11, 6]) /* ty=Tensor[(11, 11, 6), bool] */;
  %250 = @func_3654(%249) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) */;
  %251 = cast(meta[relay.Constant][18] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %252 = reshape(%251, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %253 = @func_5171(%252) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(4, 14, 4), float32], Tensor[(224), float32], Tensor[(720), float64], Tensor[(1, 540), float64], Tensor[(784), float32], Tensor[(120, 4), float32]) */;
  %254 = @func_4279() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %255 = @func_4949() /* ty=Tensor[(6, 1, 5), float64] */;
  %256 = cast(%var_5582, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %260 = less(%258, %259) /* ty=Tensor[(6, ?, 5), bool] */;
  %261 = cast(%260, dtype="float32") /* ty=Tensor[(6, ?, 5), float32] */;
  %262 = shape_of(%var_5582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%var_5582, dtype="float32") /* ty=Tensor[(6, 1, 5), float32] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %265 = %245.0;
  %266 = %250.0;
  %267 = %253.0;
  %268 = %254.0;
  %269 = subtract(%263, %264) /* ty=Tensor[(6, ?, 5), float32] */;
  (%265, %247, %266, %267, meta[relay.Constant][18] /* ty=Tensor[(720), float64] */, %268, %269)
}

def @func_6226() -> Tensor[(11, 11, 6), float32] {
  @func_4221() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_8550() -> (Tensor[(6, 1, 5), float64],) {
  %270 = @func_4949() /* ty=Tensor[(6, 1, 5), float64] */;
  (%270,)
}

def @func_6799() -> (Tensor[(6, 1, 5), float64],) {
  %271 = @func_4949() /* ty=Tensor[(6, 1, 5), float64] */;
  (%271,)
}

def @func_10437() -> (Tensor[(6, 11, 15), int64], Tensor[(11, 11, 6), bool], Tensor[(121, 6), bool], Tensor[(300), float64], Tensor[(11, 11, 6), float32], Tensor[(6, 11, 15), float64]) {
  %272 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 11, 15), int64] */, dtype="int64") /* ty=Tensor[(6, 11, 15), int64] */;
  %273 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(6, 11, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 11, 15), int64] */, dtype="int64") /* ty=Tensor[(6, 11, 15), int64] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %276 = cast(meta[relay.Constant][21] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %277 = reshape(%276, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), float64] */;
  %278 = @func_8915(%277) /* ty=(Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), bool], Tensor[(121, 6), bool], Tensor[(6, 10, 5), float32]) */;
  %279 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 11, 15), int64] */, dtype="uint32") /* ty=Tensor[(6, 11, 15), uint32] */;
  %280 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(6, 11, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 11, 15), int64] */, dtype="uint32") /* ty=Tensor[(6, 11, 15), uint32] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %283 = add(%281, %282) /* ty=Tensor[(6, 11, 15), uint32] */;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(6, 11, 15), float64] */;
  %285 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(6, 11, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 11, 15), int64] */, dtype="float64") /* ty=Tensor[(6, 11, 15), float64] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %288 = right_shift(%274, %275) /* ty=Tensor[(6, 11, 15), int64] */;
  %289 = @func_6113() /* ty=Tensor[(11, 11, 6), bool] */;
  %290 = %278.2;
  %291 = @func_4756() /* ty=Tensor[(11, 11, 6), float32] */;
  %292 = floor_divide(%286, %287) /* ty=Tensor[(6, 11, 15), float64] */;
  (%288, %289, %290, meta[relay.Constant][21] /* ty=Tensor[(300), float64] */, %291, %292)
}

def @func_3862(%var_3846: Tensor[(720), float64]) -> (Tensor[(11, 11, 6), bool], Tensor[(4, 12, 15), bool], Tensor[(720), float64]) {
  %293 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %294 = cast(%var_3846, dtype="float64") /* ty=Tensor[(720), float64] */;
  %295 = cast(%var_3846, dtype="float64") /* ty=Tensor[(720), float64] */;
  %296 = reshape(%294, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %297 = reshape(%295, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %298 = %293.0;
  %299 = @func_1715(%296, %297) /* ty=Tensor[(4, 12, 15), bool] */;
  (%298, %299, %var_3846)
}

def @func_7901() -> Tensor[(11, 11, 6), float64] {
  %300 = @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %300.0
}

def @func_1715(%var_1663: Tensor[(4, 12, 15), float64], %var_1709: Tensor[(4, 12, 15), float64]) -> Tensor[(4, 12, 15), bool] {
  %301 = cast(%var_1663, dtype="float64") /* ty=Tensor[(4, 12, 15), float64] */;
  %302 = log2(%301) /* ty=Tensor[(4, 12, 15), float64] */;
  %303 = cast(%var_1709, dtype="bool") /* ty=Tensor[(4, 12, 15), bool] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="bool") /* ty=Tensor[(4, 12, 15), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%305, %306) /* ty=Tensor[(4, 12, 15), bool] */
}

def @func_5632() -> (Tensor[(11, 11, 6), float32],) {
  %307 = @func_5115() /* ty=Tensor[(11, 11, 6), float32] */;
  (%307,)
}

def @func_4993() -> (Tensor[(11, 11, 6), float64],) {
  %308 = @func_4380() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) */;
  %309 = %308.0;
  (%309,)
}

def @func_4263() -> Tensor[(11, 11, 6), bool] {
  @func_3503() /* ty=Tensor[(11, 11, 6), bool] */
}

def @func_5541(%var_5538: Tensor[(1, 140), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(7, 5, 4), float32], Tensor[(1, 140), float32]) {
  %310 = @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %311 = %310.0;
  %312 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 11, 6), float64] */, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %316 = cast(%var_5538, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
  %317 = reshape(%316, newshape=[7, 5, 4]) /* ty=Tensor[(7, 5, 4), float32] */;
  %318 = @func_2422(%317) /* ty=(Tensor[(7, 5, 4), float32],) */;
  %319 = greater_equal(%314, %315) /* ty=Tensor[(11, 11, 6), bool] */;
  %320 = %318.0;
  (%319, %320, %var_5538)
}

def @func_6197(%var_6155: Tensor[(11, 14, 13), uint8], %var_6156: Tensor[(11, 14, 13), uint8], %var_6168: int32, %var_6187: Tensor[(256), int32]) -> (Tensor[(11, 14, 13), uint8], Tensor[(12, 12, 14), int32], Tensor[(27, 2), uint8], int32, Tensor[(11, 11, 6), float64], Tensor[(256), int32], Tensor[(2156), float64], Tensor[(256), int32], Tensor[(11, 11, 6), bool]) {
  %321 = cast(%var_6156, dtype="uint8") /* ty=Tensor[(11, 14, 13), uint8] */;
  %322 = shape_of(%var_6155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%var_6155, dtype="uint8") /* ty=Tensor[(11, 14, 13), uint8] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %325 = cast(meta[relay.Constant][23] /* ty=Tensor[(27, 2), uint8] */, dtype="uint8") /* ty=Tensor[(27, 2), uint8] */;
  %326 = cast(%var_6168, dtype="int32") /* ty=int32 */;
  %327 = reshape(%325, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), uint8] */;
  %328 = reshape(%326, newshape=[]) /* ty=int32 */;
  %329 = @func_3006(%327, %328) /* ty=(Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) */;
  %330 = @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %331 = cast(meta[relay.Constant][24] /* ty=Tensor[(2156), float64] */, dtype="float64") /* ty=Tensor[(2156), float64] */;
  %332 = cast(%var_6187, dtype="int32") /* ty=Tensor[(256), int32] */;
  %333 = reshape(%331, newshape=[14, 14, 11]) /* ty=Tensor[(14, 14, 11), float64] */;
  %334 = reshape(%332, newshape=[256]) /* ty=Tensor[(256), int32] */;
  %335 = @func_5240(%333, %334) /* ty=(Tensor[(14, 14, 11), float64], Tensor[(12, 12, 14), int32], Tensor[(256), int32], int32) */;
  %336 = @func_4279() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %337 = minimum(%323, %324) /* ty=Tensor[(11, 14, 13), uint8] */;
  %338 = %329.2;
  %339 = %330.0;
  %340 = %335.2;
  %341 = %336.0;
  (%337, %338, meta[relay.Constant][23] /* ty=Tensor[(27, 2), uint8] */, %var_6168, %339, %340, meta[relay.Constant][24] /* ty=Tensor[(2156), float64] */, %var_6187, %341)
}

def @func_7808(%var_7789: Tensor[(27, 2), uint8], %var_7790: Tensor[(192), float32], %var_7791: Tensor[(216, 4), float32], %var_7792: Tensor[(9, 60), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(2016), int32], Tensor[(27, 2), uint8], Tensor[(192), float32], Tensor[(216, 4), float32], Tensor[(9, 60), float64], Tensor[(784), float32], Tensor[(784), float32]) {
  %342 = @func_4404() /* ty=(Tensor[(11, 11, 6), float32], int32, Tensor[(54), uint8], int32) */;
  %343 = cast(%var_7789, dtype="uint8") /* ty=Tensor[(27, 2), uint8] */;
  %344 = cast(%var_7790, dtype="float32") /* ty=Tensor[(192), float32] */;
  %345 = cast(%var_7791, dtype="float32") /* ty=Tensor[(216, 4), float32] */;
  %346 = cast(%var_7792, dtype="float64") /* ty=Tensor[(9, 60), float64] */;
  %347 = reshape(%343, newshape=[54]) /* ty=Tensor[(54), uint8] */;
  %348 = reshape(%344, newshape=[1, 192]) /* ty=Tensor[(1, 192), float32] */;
  %349 = reshape(%345, newshape=[108, 8]) /* ty=Tensor[(108, 8), float32] */;
  %350 = reshape(%346, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %351 = @func_4627(%347, %348, %349, %350) /* ty=(Tensor[(1, 6, 9), float32], Tensor[(54), uint8], Tensor[(16, 2, 6), float32], Tensor[(1, 192), float32], Tensor[(16, 2, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(2016), int32], Tensor[(108, 8), float32], Tensor[(540), float64]) */;
  %352 = cast(meta[relay.Constant][25] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %353 = reshape(%352, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %354 = @func_7148(%353) /* ty=(Tensor[(2, 15, 12), float64], Tensor[(12, 16, 15), int64], Tensor[(8, 360), int64], Tensor[(784), float32], Tensor[(784), float32]) */;
  %355 = %342.0;
  %356 = %351.6;
  %357 = %354.3;
  (%355, %356, %var_7789, %var_7790, %var_7791, %var_7792, %357, meta[relay.Constant][25] /* ty=Tensor[(784), float32] */)
}

def @func_6940(%var_6929: Tensor[(6, 2, 5), float64]) -> (Tensor[(6, 2, 5), bool], Tensor[(11, 11, 6), bool], Tensor[(8, 98), float32]) {
  %358 = @func_6885() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(6, 1, 5), float64]) */;
  %359 = %358.1;
  %360 = cast(%359, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
  %361 = cast(%var_6929, dtype="bool") /* ty=Tensor[(6, 2, 5), bool] */;
  %362 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 98), float32] */, dtype="float32") /* ty=Tensor[(8, 98), float32] */;
  %363 = reshape(%362, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %364 = @func_4254(%363) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) */;
  %365 = equal(%360, %361) /* ty=Tensor[(6, 2, 5), bool] */;
  %366 = %364.0;
  (%365, %366, meta[relay.Constant][26] /* ty=Tensor[(8, 98), float32] */)
}

def @func_8968() -> (Tensor[(11, 11, 6), float64],) {
  %367 = @func_7901() /* ty=Tensor[(11, 11, 6), float64] */;
  (%367,)
}

def @func_9796(%var_9755: Tensor[(64), float64], %var_9778: Tensor[(4, 56), float32], %var_9779: Tensor[(720), float64]) -> (Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64], Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 15, 6), bool], Tensor[(4, 56), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(64), float64]) {
  %368 = @func_8068() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(6, 1, 5), float64]) */;
  %369 = cast(%var_9755, dtype="float64") /* ty=Tensor[(64), float64] */;
  %370 = cast(meta[relay.Constant][27] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %371 = reshape(%369, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %372 = reshape(%370, newshape=[832]) /* ty=Tensor[(832), float64] */;
  %373 = @func_8033(%371, %372) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(16, 4, 13), float64], Tensor[(64), float64], Tensor[(832), float64]) */;
  %374 = cast(meta[relay.Constant][28] /* ty=Tensor[(2880), int64] */, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %375 = cast(meta[relay.Constant][28] /* ty=Tensor[(2880), int64] */, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %376 = reshape(%374, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %377 = reshape(%375, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %378 = @func_2527(%376, %377) /* ty=(Tensor[(12, 16, 15), int64],) */;
  %379 = cast(%var_9778, dtype="float32") /* ty=Tensor[(4, 56), float32] */;
  %380 = cast(%var_9779, dtype="float64") /* ty=Tensor[(720), float64] */;
  %381 = cast(meta[relay.Constant][29] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %382 = cast(meta[relay.Constant][30] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %383 = cast(meta[relay.Constant][31] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %384 = reshape(%379, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
  %385 = reshape(%380, newshape=[1, 720]) /* ty=Tensor[(1, 720), float64] */;
  %386 = reshape(%381, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %387 = reshape(%382, newshape=[4, 196]) /* ty=Tensor[(4, 196), float32] */;
  %388 = reshape(%383, newshape=[40, 12]) /* ty=Tensor[(40, 12), float32] */;
  %389 = @func_2148(%384, %385, %386, %387, %388) /* ty=(Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) */;
  %390 = cast(%var_9779, dtype="float32") /* ty=Tensor[(720), float32] */;
  %391 = reshape(%390, newshape=[8, 15, 6]) /* ty=Tensor[(8, 15, 6), float32] */;
  %392 = @func_9308(%391) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(8, 15, 6), float64], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64]) */;
  %393 = %368.1;
  %394 = %373.0;
  %395 = %378.0;
  %396 = %389.2;
  %397 = %392.3;
  (%393, %394, %var_9755, meta[relay.Constant][27] /* ty=Tensor[(832), float64] */, %395, meta[relay.Constant][28] /* ty=Tensor[(2880), int64] */, %396, %var_9778, %var_9779, meta[relay.Constant][29] /* ty=Tensor[(540), float64] */, meta[relay.Constant][30] /* ty=Tensor[(784), float32] */, meta[relay.Constant][31] /* ty=Tensor[(480), float32] */, %397)
}

def @func_5420() -> Tensor[(54), uint8] {
  %398 = @func_4404() /* ty=(Tensor[(11, 11, 6), float32], int32, Tensor[(54), uint8], int32) */;
  %398.2
}

def @func_7673(%var_7659: Tensor[(14, 2, 8), float32]) -> (Tensor[(14, 2, 8), float32], Tensor[(11, 11, 6), bool], Tensor[(360, 2), float64]) {
  %399 = cast(%var_7659, dtype="float32") /* ty=Tensor[(14, 2, 8), float32] */;
  %400 = cast(meta[relay.Constant][32] /* ty=Tensor[(360, 2), float64] */, dtype="float64") /* ty=Tensor[(360, 2), float64] */;
  %401 = reshape(%400, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %402 = @func_3862(%401) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(4, 12, 15), bool], Tensor[(720), float64]) */;
  %403 = asinh(%399) /* ty=Tensor[(14, 2, 8), float32] */;
  %404 = %402.0;
  (%403, %404, meta[relay.Constant][32] /* ty=Tensor[(360, 2), float64] */)
}

def @func_3583() -> (Tensor[(11, 11, 6), bool],) {
  %405 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %406 = %405.0;
  (%406,)
}

def @func_3990(%var_3986: Tensor[(14, 2, 7), float64]) -> (Tensor[(14, 2, 7), float64],) {
  %407 = cast(%var_3986, dtype="float64") /* ty=Tensor[(14, 2, 7), float64] */;
  %408 = cosh(%407) /* ty=Tensor[(14, 2, 7), float64] */;
  (%408,)
}

def @func_4896() -> Tensor[(11, 11, 6), float32] {
  @func_4336() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_4052(%var_4034: Tensor[(16, 2, 6), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(16, 2, 6), uint16]) {
  %409 = cast(meta[relay.Constant][33] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %410 = reshape(%409, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
  %411 = @func_2185(%410) /* ty=Tensor[(16, 2, 6), float32] */;
  %412 = cast(%411, dtype="float32") /* ty=Tensor[(16, 2, 6), float32] */;
  %413 = reshape(%412, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
  %414 = @func_2185(%413) /* ty=Tensor[(16, 2, 6), float32] */;
  %415 = cast(%var_4034, dtype="uint16") /* ty=Tensor[(16, 2, 6), uint16] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="uint16") /* ty=Tensor[(16, 2, 6), uint16] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %419 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
  %420 = multiply(%417, %418) /* ty=Tensor[(16, 2, 6), uint16] */;
  (%419, %411, meta[relay.Constant][33] /* ty=Tensor[(192), float32] */, %420)
}

def @func_3532() -> (Tensor[(11, 11, 6), bool],) {
  %421 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
  (%421,)
}

def @func_4683() -> (Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(1, 196), float64]) {
  %422 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 196), float64] */, dtype="float64") /* ty=Tensor[(1, 196), float64] */;
  %423 = reshape(%422, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), float64] */;
  %424 = @func_3990(%423) /* ty=(Tensor[(14, 2, 7), float64],) */;
  %425 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
  %426 = %424.0;
  (%425, %426, meta[relay.Constant][34] /* ty=Tensor[(1, 196), float64] */)
}

def @func_6777(%var_6710: Tensor[(720), float64], %var_6729: Tensor[(144), float64], %var_6730: Tensor[(2880), int64], %var_6756: Tensor[(192), float32]) -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64], Tensor[(720), float64], Tensor[(6, 13, 6), float64], Tensor[(144), float64], Tensor[(2880), int64], Tensor[(468), float64], Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(11, 11, 6), float32], Tensor[(4, 14, 4), float64]) {
  %427 = @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %428 = cast(%var_6729, dtype="float64") /* ty=Tensor[(144), float64] */;
  %429 = cast(%var_6730, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %430 = cast(meta[relay.Constant][35] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %431 = reshape(%428, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float64] */;
  %432 = reshape(%429, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %433 = reshape(%430, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %434 = @func_3348(%431, %432, %433) /* ty=(Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) */;
  %435 = cast(%var_6756, dtype="float32") /* ty=Tensor[(192), float32] */;
  %436 = reshape(%435, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
  %437 = @func_4052(%436) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(16, 2, 6), uint16]) */;
  %438 = cast(%var_6710, dtype="float64") /* ty=Tensor[(720), float64] */;
  %439 = reshape(%438, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %440 = @func_5171(%439) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(4, 14, 4), float32], Tensor[(224), float32], Tensor[(720), float64], Tensor[(1, 540), float64], Tensor[(784), float32], Tensor[(120, 4), float32]) */;
  %441 = %440.2;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
  %443 = @func_6682() /* ty=Tensor[(11, 11, 6), float64] */;
  %444 = %427.0;
  %445 = %434.4;
  %446 = %437.1;
  %447 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
  %448 = sin(%442) /* ty=Tensor[(4, 14, 4), float64] */;
  (%443, %444, %var_6710, %445, %var_6729, %var_6730, meta[relay.Constant][35] /* ty=Tensor[(468), float64] */, %446, %var_6756, %447, %448)
}

def @func_7555() -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), int16], Tensor[(196), float64]) {
  %449 = @func_6490() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %450 = cast(meta[relay.Constant][36] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %451 = reshape(%450, newshape=[196]) /* ty=Tensor[(196), float64] */;
  %452 = @func_7277(%451) /* ty=(Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), int16], Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(196), float64]) */;
  %453 = %449.0;
  %454 = %452.1;
  (%453, %454, meta[relay.Constant][36] /* ty=Tensor[(196), float64] */)
}

def @func_6575() -> (Tensor[(11, 11, 6), bool],) {
  %455 = @func_6113() /* ty=Tensor[(11, 11, 6), bool] */;
  (%455,)
}

def @func_8085() -> Tensor[(11, 11, 6), float64] {
  @func_6682() /* ty=Tensor[(11, 11, 6), float64] */
}

def @func_2185(%var_2176: Tensor[(16, 2, 6), float32]) -> Tensor[(16, 2, 6), float32] {
  %456 = cast(%var_2176, dtype="float32") /* ty=Tensor[(16, 2, 6), float32] */;
  %457 = erf(%456) /* ty=Tensor[(16, 2, 6), float32] */;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(16, 2, 6), float32] */;
  exp(%458) /* ty=Tensor[(16, 2, 6), float32] */
}

def @func_6038() -> Tensor[(11, 11, 6), float32] {
  %459 = @func_4736() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %459.0
}

def @func_5056(%var_5029: Tensor[(8, 8, 4), int32], %var_5053: int32) -> (Tensor[(8, 8, 4), int32], Tensor[(12, 12, 14), int32], Tensor[(392), float32], Tensor[(2880), int64], Tensor[(2016), int32], Tensor[(12, 12, 14), int32], int32) {
  %460 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 8, 4), int32] */, dtype="int32") /* ty=Tensor[(8, 8, 4), int32] */;
  %461 = shape_of(%var_5029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_5029, dtype="int32") /* ty=Tensor[(8, 8, 4), int32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %464 = cast(meta[relay.Constant][38] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %465 = cast(meta[relay.Constant][39] /* ty=Tensor[(2880), int64] */, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %466 = cast(meta[relay.Constant][40] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %467 = cast(meta[relay.Constant][38] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %468 = reshape(%464, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float32] */;
  %469 = reshape(%465, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %470 = reshape(%466, newshape=[2016]) /* ty=Tensor[(2016), int32] */;
  %471 = reshape(%467, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float32] */;
  %472 = @func_3822(%468, %469, %470, %471) /* ty=(Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(12, 12, 14), int32], Tensor[(54), uint8], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(4, 7, 14), bool], Tensor[(6, 13, 6), float64]) */;
  %473 = cast(%var_5053, dtype="int32") /* ty=int32 */;
  %474 = cast(meta[relay.Constant][40] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %475 = reshape(%473, newshape=[]) /* ty=int32 */;
  %476 = reshape(%474, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
  %477 = @func_984(%475, %476) /* ty=(Tensor[(12, 12, 14), int32],) */;
  %478 = bitwise_and(%462, %463) /* ty=Tensor[(8, 8, 4), int32] */;
  %479 = %472.7;
  %480 = %477.0;
  (%478, %479, meta[relay.Constant][38] /* ty=Tensor[(392), float32] */, meta[relay.Constant][39] /* ty=Tensor[(2880), int64] */, meta[relay.Constant][40] /* ty=Tensor[(2016), int32] */, %480, %var_5053)
}

def @func_9308(%var_9217: Tensor[(8, 15, 6), float32]) -> (Tensor[(11, 11, 6), float32], Tensor[(8, 15, 6), float64], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64]) {
  %481 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %482 = cast(%var_9217, dtype="float32") /* ty=Tensor[(8, 15, 6), float32] */;
  %483 = acosh(%482) /* ty=Tensor[(8, 15, 6), float32] */;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  %485 = cast(meta[relay.Constant][41] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %486 = cast(meta[relay.Constant][42] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %487 = reshape(%485, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %488 = reshape(%486, newshape=[832]) /* ty=Tensor[(832), float64] */;
  %489 = @func_8033(%487, %488) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(16, 4, 13), float64], Tensor[(64), float64], Tensor[(832), float64]) */;
  %490 = %481.0;
  %491 = cos(%484) /* ty=Tensor[(8, 15, 6), float64] */;
  %492 = %489.0;
  (%490, %491, %492, meta[relay.Constant][41] /* ty=Tensor[(64), float64] */, meta[relay.Constant][42] /* ty=Tensor[(832), float64] */)
}

def @func_6274() -> Tensor[(11, 11, 6), bool] {
  %493 = @func_3583() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %493.0
}

def @func_3654(%var_3650: Tensor[(11, 11, 6), bool]) -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) {
  %494 = @func_3583() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %495 = %494.0;
  %496 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 11, 6), bool] */, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %500 = cast(%var_3650, dtype="float32") /* ty=Tensor[(11, 11, 6), float32] */;
  %501 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(11, 11, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 11, 6), bool] */, dtype="float32") /* ty=Tensor[(11, 11, 6), float32] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %504 = logical_and(%498, %499) /* ty=Tensor[(11, 11, 6), bool] */;
  %505 = floor_mod(%502, %503) /* ty=Tensor[(11, 11, 6), float32] */;
  (%504, %505)
}

def @func_6990() -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64]) {
  %506 = @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %507 = @func_6274() /* ty=Tensor[(11, 11, 6), bool] */;
  %508 = %506.0;
  (%507, %508)
}

def @func_2527(%var_2516: Tensor[(12, 16, 15), int64], %var_2517: Tensor[(12, 16, 15), int64]) -> (Tensor[(12, 16, 15), int64],) {
  %509 = cast(%var_2517, dtype="int64") /* ty=Tensor[(12, 16, 15), int64] */;
  %510 = shape_of(%var_2516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%var_2516, dtype="int64") /* ty=Tensor[(12, 16, 15), int64] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %513 = logical_xor(%511, %512) /* ty=Tensor[(12, 16, 15), int64] */;
  (%513,)
}

def @func_4654(%var_4642: Tensor[(784), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) {
  %514 = cast(%var_4642, dtype="float32") /* ty=Tensor[(784), float32] */;
  %515 = reshape(%514, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %516 = @func_4254(%515) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) */;
  %517 = @func_4263() /* ty=Tensor[(11, 11, 6), bool] */;
  %518 = %516.1;
  (%517, %518, %var_4642)
}

def @func_7476(%var_7461: int32, %var_7462: Tensor[(2016), int32]) -> (Tensor[(11, 11, 6), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32]) {
  %519 = @func_6547() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %520 = cast(%var_7461, dtype="int32") /* ty=int32 */;
  %521 = cast(%var_7462, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %522 = reshape(%520, newshape=[]) /* ty=int32 */;
  %523 = reshape(%521, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
  %524 = @func_984(%522, %523) /* ty=(Tensor[(12, 12, 14), int32],) */;
  %525 = %519.0;
  %526 = %524.0;
  (%525, %526, %var_7461, %var_7462)
}

def @func_4133(%var_4115: Tensor[(392), float32]) -> (Tensor[(11, 11, 6), int32], Tensor[(2016), int32], Tensor[(392), float32], Tensor[(2880), int64], Tensor[(2016), int32], Tensor[(54), uint8]) {
  %527 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %528 = %527.0;
  %529 = cast(%528, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %530 = sinh(%529) /* ty=Tensor[(11, 11, 6), float64] */;
  %531 = cast(%528, dtype="int32") /* ty=Tensor[(11, 11, 6), int32] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%530, dtype="int32") /* ty=Tensor[(11, 11, 6), int32] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %535 = cast(%var_4115, dtype="float32") /* ty=Tensor[(392), float32] */;
  %536 = cast(meta[relay.Constant][44] /* ty=Tensor[(2880), int64] */, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %537 = cast(meta[relay.Constant][45] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %538 = cast(%var_4115, dtype="float32") /* ty=Tensor[(392), float32] */;
  %539 = reshape(%535, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float32] */;
  %540 = reshape(%536, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %541 = reshape(%537, newshape=[2016]) /* ty=Tensor[(2016), int32] */;
  %542 = reshape(%538, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float32] */;
  %543 = @func_3822(%539, %540, %541, %542) /* ty=(Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(12, 12, 14), int32], Tensor[(54), uint8], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(4, 7, 14), bool], Tensor[(6, 13, 6), float64]) */;
  %544 = cast(%var_4115, dtype="float32") /* ty=Tensor[(392), float32] */;
  %545 = cast(meta[relay.Constant][44] /* ty=Tensor[(2880), int64] */, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %546 = cast(meta[relay.Constant][45] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %547 = cast(%var_4115, dtype="float32") /* ty=Tensor[(392), float32] */;
  %548 = reshape(%544, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float32] */;
  %549 = reshape(%545, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %550 = reshape(%546, newshape=[2016]) /* ty=Tensor[(2016), int32] */;
  %551 = reshape(%547, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float32] */;
  %552 = @func_3822(%548, %549, %550, %551) /* ty=(Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(12, 12, 14), int32], Tensor[(54), uint8], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(4, 7, 14), bool], Tensor[(6, 13, 6), float64]) */;
  %553 = maximum(%533, %534) /* ty=Tensor[(11, 11, 6), int32] */;
  %554 = %543.6;
  %555 = %552.8;
  (%553, %554, %var_4115, meta[relay.Constant][44] /* ty=Tensor[(2880), int64] */, meta[relay.Constant][45] /* ty=Tensor[(2016), int32] */, %555)
}

def @func_3822(%var_3734: Tensor[(4, 7, 14), float32], %var_3745: Tensor[(2880), int64], %var_3761: Tensor[(2016), int32], %var_3813: Tensor[(4, 7, 14), float32]) -> (Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(12, 12, 14), int32], Tensor[(54), uint8], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(4, 7, 14), bool], Tensor[(6, 13, 6), float64]) {
  %556 = cast(%var_3745, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %557 = cast(%var_3745, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %558 = reshape(%556, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %559 = reshape(%557, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %560 = @func_2527(%558, %559) /* ty=(Tensor[(12, 16, 15), int64],) */;
  %561 = cast(meta[relay.Constant][46] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %562 = reshape(%561, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float64] */;
  %563 = @func_2728(%562) /* ty=(Tensor[(6, 13, 6), float64],) */;
  %564 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %565 = cast(%var_3761, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %566 = reshape(%564, newshape=[]) /* ty=int32 */;
  %567 = reshape(%565, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
  %568 = @func_984(%566, %567) /* ty=(Tensor[(12, 12, 14), int32],) */;
  %569 = cast(meta[relay.Constant][47] /* ty=Tensor[(54), uint8] */, dtype="uint8") /* ty=Tensor[(54), uint8] */;
  %570 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %571 = reshape(%569, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), uint8] */;
  %572 = reshape(%570, newshape=[]) /* ty=int32 */;
  %573 = @func_3006(%571, %572) /* ty=(Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) */;
  %574 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %575 = @func_3583() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %576 = cast(%var_3734, dtype="float32") /* ty=Tensor[(4, 7, 14), float32] */;
  %577 = rsqrt(%576) /* ty=Tensor[(4, 7, 14), float32] */;
  %578 = cast(%var_3813, dtype="bool") /* ty=Tensor[(4, 7, 14), bool] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="bool") /* ty=Tensor[(4, 7, 14), bool] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %582 = %563.0;
  %583 = cast(%582, dtype="float64") /* ty=Tensor[(6, 13, 6), float64] */;
  %584 = reshape(%583, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float64] */;
  %585 = @func_2728(%584) /* ty=(Tensor[(6, 13, 6), float64],) */;
  %586 = %560.0;
  %587 = %568.0;
  %588 = %573.2;
  %589 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
  %590 = %574.0;
  %591 = %575.0;
  %592 = less_equal(%580, %581) /* ty=Tensor[(4, 7, 14), bool] */;
  %593 = %585.0;
  (%586, %var_3745, %582, meta[relay.Constant][46] /* ty=Tensor[(468), float64] */, %587, -4 /* ty=int32 */, %var_3761, %588, meta[relay.Constant][47] /* ty=Tensor[(54), uint8] */, %589, %590, %591, %592, %593)
}

def @func_5449() -> Tensor[(11, 11, 6), float32] {
  @func_4756() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_7277(%var_7260: Tensor[(196), float64]) -> (Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), int16], Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(196), float64]) {
  %594 = @func_6799() /* ty=(Tensor[(6, 1, 5), float64],) */;
  %595 = @func_7032() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %596 = %595.0;
  %597 = @func_4736() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %598 = %597.0;
  %599 = cast(%598, dtype="int16") /* ty=Tensor[(11, 11, 6), int16] */;
  %600 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%596, dtype="int16") /* ty=Tensor[(11, 11, 6), int16] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %603 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %604 = cast(%var_7260, dtype="float64") /* ty=Tensor[(196), float64] */;
  %605 = reshape(%604, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), float64] */;
  %606 = @func_3990(%605) /* ty=(Tensor[(14, 2, 7), float64],) */;
  %607 = %594.0;
  %608 = minimum(%601, %602) /* ty=Tensor[(11, 11, 6), int16] */;
  %609 = %603.0;
  %610 = %606.0;
  (%607, %608, %609, %610, %var_7260)
}

def @func_7391(%var_7382: Tensor[(14, 8, 2), float32]) -> (Tensor[(14, 8, 2), float32],) {
  %611 = cast(%var_7382, dtype="float32") /* ty=Tensor[(14, 8, 2), float32] */;
  %612 = cos(%611) /* ty=Tensor[(14, 8, 2), float32] */;
  (%612,)
}

def @func_4935() -> Tensor[(11, 11, 6), float64] {
  %613 = @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %613.0
}

def @func_5673() -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32]) {
  %614 = @func_4380() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) */;
  %615 = @func_4279() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %616 = @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %617 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %618 = %614.0;
  %619 = %615.0;
  %620 = %616.0;
  %621 = %617.0;
  (%618, %619, %620, %621)
}

def @func_6490() -> (Tensor[(11, 11, 6), bool],) {
  %622 = @func_5306() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) */;
  %623 = %622.1;
  (%623,)
}

def @func_8417() -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), int64]) {
  %624 = @func_4380() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) */;
  %625 = @func_5306() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) */;
  %626 = %624.0;
  %627 = %625.1;
  %628 = @func_4776() /* ty=Tensor[(11, 11, 6), int64] */;
  (%626, %627, %628)
}

def @func_10226() -> (Tensor[(11, 11, 6), bool], Tensor[(300), float64], Tensor[(6, 1, 5), float32]) {
  %629 = @func_9594() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %630 = cast(meta[relay.Constant][48] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %631 = reshape(%630, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), float64] */;
  %632 = @func_8915(%631) /* ty=(Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), bool], Tensor[(121, 6), bool], Tensor[(6, 10, 5), float32]) */;
  %633 = %632.0;
  %634 = cast(%633, dtype="float32") /* ty=Tensor[(6, 1, 5), float32] */;
  %635 = %629.0;
  %636 = exp(%634) /* ty=Tensor[(6, 1, 5), float32] */;
  (%635, meta[relay.Constant][48] /* ty=Tensor[(300), float64] */, %636)
}

def @func_4254(%var_4249: Tensor[(784), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) {
  %637 = cast(%var_4249, dtype="float32") /* ty=Tensor[(784), float32] */;
  %638 = cast(%var_4249, dtype="float32") /* ty=Tensor[(784), float32] */;
  %639 = reshape(%637, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
  %640 = reshape(%638, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
  %641 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
  %642 = @func_861(%639, %640) /* ty=Tensor[(7, 7, 16), float32] */;
  (%641, %642, %var_4249)
}

def @func_6682() -> Tensor[(11, 11, 6), float64] {
  %643 = @func_6547() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %643.0
}

def @func_7880() -> Tensor[(6, 1, 5), float64] {
  %644 = @func_7501() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(6, 1, 5), float64]) */;
  %644.1
}

def @func_6547() -> (Tensor[(11, 11, 6), float64],) {
  %645 = @func_5836() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %646 = %645.0;
  %647 = cast(%646, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %648 = exp(%647) /* ty=Tensor[(11, 11, 6), float64] */;
  (%648,)
}

def @func_6431(%var_6403: Tensor[(11, 11, 6), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(14, 2, 7), float64], Tensor[(196), float64], Tensor[(11, 11, 6), float64]) {
  %649 = @func_5449() /* ty=Tensor[(11, 11, 6), float32] */;
  %650 = cast(%var_6403, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%649, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %654 = cast(meta[relay.Constant][49] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %655 = reshape(%654, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), float64] */;
  %656 = @func_3990(%655) /* ty=(Tensor[(14, 2, 7), float64],) */;
  %657 = cast(%var_6403, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %658 = less(%652, %653) /* ty=Tensor[(11, 11, 6), bool] */;
  %659 = %656.0;
  %660 = cos(%657) /* ty=Tensor[(11, 11, 6), float64] */;
  (%658, %659, meta[relay.Constant][49] /* ty=Tensor[(196), float64] */, %660)
}

def @func_9160(%var_9147: Tensor[(8, 9, 8), float64]) -> Tensor[(8, 9, 8), float64] {
  %661 = cast(%var_9147, dtype="float64") /* ty=Tensor[(8, 9, 8), float64] */;
  erf(%661) /* ty=Tensor[(8, 9, 8), float64] */
}

def @func_984(%var_977: int32, %var_978: Tensor[(12, 12, 14), int32]) -> (Tensor[(12, 12, 14), int32],) {
  %662 = cast(%var_977, dtype="int32") /* ty=int32 */;
  %663 = cast(%var_978, dtype="int32") /* ty=Tensor[(12, 12, 14), int32] */;
  %664 = multiply(%662, %663) /* ty=Tensor[(12, 12, 14), int32] */;
  (%664,)
}

def @func_8521(%var_8505: Tensor[(720), float64], %var_8506: Tensor[(540), float64], %var_8508: Tensor[(480), float32]) -> (int32, Tensor[(4, 14, 4), float64], Tensor[(224), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), float64], Tensor[(8, 6, 10), float32]) {
  %665 = @func_4404() /* ty=(Tensor[(11, 11, 6), float32], int32, Tensor[(54), uint8], int32) */;
  %666 = cast(meta[relay.Constant][50] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %667 = cast(%var_8505, dtype="float64") /* ty=Tensor[(720), float64] */;
  %668 = cast(%var_8506, dtype="float64") /* ty=Tensor[(540), float64] */;
  %669 = cast(meta[relay.Constant][51] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %670 = cast(%var_8508, dtype="float32") /* ty=Tensor[(480), float32] */;
  %671 = reshape(%666, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
  %672 = reshape(%667, newshape=[1, 720]) /* ty=Tensor[(1, 720), float64] */;
  %673 = reshape(%668, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %674 = reshape(%669, newshape=[4, 196]) /* ty=Tensor[(4, 196), float32] */;
  %675 = reshape(%670, newshape=[40, 12]) /* ty=Tensor[(40, 12), float32] */;
  %676 = @func_2148(%671, %672, %673, %674, %675) /* ty=(Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) */;
  %677 = cast(%var_8508, dtype="float32") /* ty=Tensor[(480), float32] */;
  %678 = reshape(%677, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), float32] */;
  %679 = %665.3;
  %680 = %676.11;
  %681 = @func_8085() /* ty=Tensor[(11, 11, 6), float64] */;
  %682 = @func_696(%678) /* ty=Tensor[(8, 6, 10), float32] */;
  (%679, %680, meta[relay.Constant][50] /* ty=Tensor[(224), float32] */, %var_8505, %var_8506, meta[relay.Constant][51] /* ty=Tensor[(784), float32] */, %var_8508, %681, %682)
}

def @func_5171(%var_5152: Tensor[(720), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(4, 14, 4), float32], Tensor[(224), float32], Tensor[(720), float64], Tensor[(1, 540), float64], Tensor[(784), float32], Tensor[(120, 4), float32]) {
  %683 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %684 = cast(meta[relay.Constant][52] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %685 = cast(%var_5152, dtype="float64") /* ty=Tensor[(720), float64] */;
  %686 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 540), float64] */, dtype="float64") /* ty=Tensor[(1, 540), float64] */;
  %687 = cast(meta[relay.Constant][54] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %688 = cast(meta[relay.Constant][55] /* ty=Tensor[(120, 4), float32] */, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %689 = reshape(%684, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
  %690 = reshape(%685, newshape=[1, 720]) /* ty=Tensor[(1, 720), float64] */;
  %691 = reshape(%686, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %692 = reshape(%687, newshape=[4, 196]) /* ty=Tensor[(4, 196), float32] */;
  %693 = reshape(%688, newshape=[40, 12]) /* ty=Tensor[(40, 12), float32] */;
  %694 = @func_2148(%689, %690, %691, %692, %693) /* ty=(Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) */;
  %695 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
  %696 = %683.0;
  %697 = %694.4;
  (%695, %696, %697, meta[relay.Constant][52] /* ty=Tensor[(224), float32] */, %var_5152, meta[relay.Constant][53] /* ty=Tensor[(1, 540), float64] */, meta[relay.Constant][54] /* ty=Tensor[(784), float32] */, meta[relay.Constant][55] /* ty=Tensor[(120, 4), float32] */)
}

def @func_10022() -> Tensor[(11, 11, 6), float32] {
  @func_6038() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_10587() -> (Tensor[(11, 11, 6), float64], Tensor[(720), float64], Tensor[(1, 540), float64], Tensor[(480), float32], Tensor[(5, 5, 9), int32]) {
  %698 = cast(meta[relay.Constant][56] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %699 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 540), float64] */, dtype="float64") /* ty=Tensor[(1, 540), float64] */;
  %700 = cast(meta[relay.Constant][58] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %701 = reshape(%698, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %702 = reshape(%699, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %703 = reshape(%700, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %704 = @func_8521(%701, %702, %703) /* ty=(int32, Tensor[(4, 14, 4), float64], Tensor[(224), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), float64], Tensor[(8, 6, 10), float32]) */;
  %705 = cast(meta[relay.Constant][59] /* ty=Tensor[(5, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(5, 5, 9), float32] */;
  %706 = atan(%705) /* ty=Tensor[(5, 5, 9), float32] */;
  %707 = cast(meta[relay.Constant][59] /* ty=Tensor[(5, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(5, 5, 9), float32] */;
  %708 = sigmoid(%707) /* ty=Tensor[(5, 5, 9), float32] */;
  %709 = cast(%708, dtype="int64") /* ty=Tensor[(5, 5, 9), int64] */;
  %710 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(5, 5, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(meta[relay.Constant][59] /* ty=Tensor[(5, 5, 9), float32] */, dtype="int64") /* ty=Tensor[(5, 5, 9), int64] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %713 = maximum(%711, %712) /* ty=Tensor[(5, 5, 9), int64] */;
  %714 = cast(%713, dtype="float64") /* ty=Tensor[(5, 5, 9), float64] */;
  %715 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%706, dtype="float64") /* ty=Tensor[(5, 5, 9), float64] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %718 = floor_mod(%716, %717) /* ty=Tensor[(5, 5, 9), float64] */;
  %719 = cast(%708, dtype="int32") /* ty=Tensor[(5, 5, 9), int32] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%718, dtype="int32") /* ty=Tensor[(5, 5, 9), int32] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %723 = %704.7;
  %724 = right_shift(%721, %722) /* ty=Tensor[(5, 5, 9), int32] */;
  (%723, meta[relay.Constant][56] /* ty=Tensor[(720), float64] */, meta[relay.Constant][57] /* ty=Tensor[(1, 540), float64] */, meta[relay.Constant][58] /* ty=Tensor[(480), float32] */, %724)
}

def @func_4627(%var_4585: Tensor[(54), uint8], %var_4597: Tensor[(1, 192), float32], %var_4619: Tensor[(108, 8), float32], %var_4620: Tensor[(540), float64]) -> (Tensor[(1, 6, 9), float32], Tensor[(54), uint8], Tensor[(16, 2, 6), float32], Tensor[(1, 192), float32], Tensor[(16, 2, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(2016), int32], Tensor[(108, 8), float32], Tensor[(540), float64]) {
  %725 = cast(%var_4585, dtype="uint8") /* ty=Tensor[(54), uint8] */;
  %726 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %727 = reshape(%725, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), uint8] */;
  %728 = reshape(%726, newshape=[]) /* ty=int32 */;
  %729 = @func_3006(%727, %728) /* ty=(Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) */;
  %730 = cast(%var_4597, dtype="float32") /* ty=Tensor[(1, 192), float32] */;
  %731 = reshape(%730, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
  %732 = @func_2185(%731) /* ty=Tensor[(16, 2, 6), float32] */;
  %733 = cast(%732, dtype="float32") /* ty=Tensor[(16, 2, 6), float32] */;
  %734 = reshape(%733, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
  %735 = @func_4221() /* ty=Tensor[(11, 11, 6), float32] */;
  %736 = cast(-10 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %737 = cast(%735, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %738 = cast(%var_4619, dtype="float32") /* ty=Tensor[(108, 8), float32] */;
  %739 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %740 = cast(%var_4620, dtype="float64") /* ty=Tensor[(540), float64] */;
  %741 = reshape(%738, newshape=[6, 16, 9]) /* ty=Tensor[(6, 16, 9), float32] */;
  %742 = reshape(%739, newshape=[]) /* ty=int32 */;
  %743 = reshape(%740, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %744 = @func_3243(%741, %742, %743) /* ty=(Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(6, 16, 9), float32], int32, Tensor[(3, 18), uint8], Tensor[(6, 15, 6), bool], Tensor[(6, 16, 9), float32]) */;
  %745 = %729.1;
  %746 = @func_2185(%734) /* ty=Tensor[(16, 2, 6), float32] */;
  %747 = not_equal(%736, %737) /* ty=Tensor[(11, 11, 6), bool] */;
  %748 = %744.2;
  (%745, %var_4585, %732, %var_4597, %746, %747, %748, %var_4619, %var_4620)
}

def @func_4786() -> (Tensor[(11, 11, 6), float32],) {
  %749 = @func_4683() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(1, 196), float64]) */;
  %750 = %749.0;
  (%750,)
}

def @func_4756() -> Tensor[(11, 11, 6), float32] {
  @func_4221() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_6113() -> Tensor[(11, 11, 6), bool] {
  %751 = @func_3583() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %751.0
}

def @func_3503() -> Tensor[(11, 11, 6), bool] {
  %752 = cast(meta[relay.Constant][60] /* ty=Tensor[(11, 11, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 6), float32] */;
  %753 = log10(%752) /* ty=Tensor[(11, 11, 6), float32] */;
  %754 = cast(meta[relay.Constant][60] /* ty=Tensor[(11, 11, 6), float32] */, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%753, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%756, %757) /* ty=Tensor[(11, 11, 6), bool] */
}

def @func_10672() -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) {
  %758 = @func_10022() /* ty=Tensor[(11, 11, 6), float32] */;
  %759 = @func_10022() /* ty=Tensor[(11, 11, 6), float32] */;
  %760 = @func_6274() /* ty=Tensor[(11, 11, 6), bool] */;
  (%758, %759, %760)
}

def @func_6379() -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(30), float64], Tensor[(6, 13, 6), float64], Tensor[(6, 78), float64]) {
  %761 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %762 = cast(meta[relay.Constant][61] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %763 = reshape(%762, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %764 = @func_5605(%763) /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32], Tensor[(720), float64], Tensor[(11, 11, 6), bool], Tensor[(6, ?, 5), float32]) */;
  %765 = cast(meta[relay.Constant][62] /* ty=Tensor[(6, 78), float64] */, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
  %766 = reshape(%765, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float64] */;
  %767 = @func_2728(%766) /* ty=(Tensor[(6, 13, 6), float64],) */;
  %768 = @func_6038() /* ty=Tensor[(11, 11, 6), float32] */;
  %769 = %761.0;
  %770 = %764.2;
  %771 = %767.0;
  (%768, %769, %770, meta[relay.Constant][61] /* ty=Tensor[(30), float64] */, %771, meta[relay.Constant][62] /* ty=Tensor[(6, 78), float64] */)
}

def @func_9880(%var_9871: Tensor[(13, 2, 8), float64]) -> (Tensor[(13, 2, 8), float64],) {
  %772 = cast(%var_9871, dtype="float64") /* ty=Tensor[(13, 2, 8), float64] */;
  %773 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(13, 2, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(meta[relay.Constant][63] /* ty=Tensor[(13, 2, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 8), float64] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %776 = floor_divide(%774, %775) /* ty=Tensor[(13, 2, 8), float64] */;
  (%776,)
}

def @func_8222(%var_8177: Tensor[(11, 5, 15), uint64], %var_8178: Tensor[(11, 5, 15), uint64], %var_8190: Tensor[(784), float32]) -> (Tensor[(11, 5, 15), bool], Tensor[(4, 196), float32], Tensor[(1, 224), float32], Tensor[(720), float64], Tensor[(540, 1), float64], Tensor[(784), float32], Tensor[(480), float32]) {
  %777 = cast(%var_8178, dtype="bool") /* ty=Tensor[(11, 5, 15), bool] */;
  %778 = shape_of(%var_8177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%var_8177, dtype="bool") /* ty=Tensor[(11, 5, 15), bool] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %781 = cast(meta[relay.Constant][64] /* ty=Tensor[(1, 224), float32] */, dtype="float32") /* ty=Tensor[(1, 224), float32] */;
  %782 = cast(meta[relay.Constant][65] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %783 = cast(meta[relay.Constant][66] /* ty=Tensor[(540, 1), float64] */, dtype="float64") /* ty=Tensor[(540, 1), float64] */;
  %784 = cast(%var_8190, dtype="float32") /* ty=Tensor[(784), float32] */;
  %785 = cast(meta[relay.Constant][67] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %786 = reshape(%781, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
  %787 = reshape(%782, newshape=[1, 720]) /* ty=Tensor[(1, 720), float64] */;
  %788 = reshape(%783, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %789 = reshape(%784, newshape=[4, 196]) /* ty=Tensor[(4, 196), float32] */;
  %790 = reshape(%785, newshape=[40, 12]) /* ty=Tensor[(40, 12), float32] */;
  %791 = @func_2148(%786, %787, %788, %789, %790) /* ty=(Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) */;
  %792 = less(%779, %780) /* ty=Tensor[(11, 5, 15), bool] */;
  %793 = %791.6;
  (%792, %793, meta[relay.Constant][64] /* ty=Tensor[(1, 224), float32] */, meta[relay.Constant][65] /* ty=Tensor[(720), float64] */, meta[relay.Constant][66] /* ty=Tensor[(540, 1), float64] */, %var_8190, meta[relay.Constant][67] /* ty=Tensor[(480), float32] */)
}

def @func_1168(%var_1161: Tensor[(6, 15, 6), float64], %var_1162: Tensor[(6, 15, 6), float64]) -> (Tensor[(6, 15, 6), bool],) {
  %794 = cast(%var_1162, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
  %795 = shape_of(%var_1161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%var_1161, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %798 = less_equal(%796, %797) /* ty=Tensor[(6, 15, 6), bool] */;
  (%798,)
}

def @func_8643() -> (Tensor[(11, 11, 6), float32],) {
  %799 = @func_4896() /* ty=Tensor[(11, 11, 6), float32] */;
  (%799,)
}

def @func_9102() -> (Tensor[(11, 11, 6), float32],) {
  %800 = @func_8643() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %801 = %800.0;
  (%801,)
}

def @func_9594() -> (Tensor[(11, 11, 6), bool],) {
  %802 = @func_6990() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64]) */;
  %803 = %802.0;
  (%803,)
}

def @func_4854() -> (Tensor[(11, 11, 6), float64],) {
  %804 = @func_4380() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) */;
  %805 = %804.1;
  %806 = cast(%805, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %807 = asinh(%806) /* ty=Tensor[(11, 11, 6), float64] */;
  (%807,)
}

def @func_5240(%var_5226: Tensor[(14, 14, 11), float64], %var_5231: Tensor[(256), int32]) -> (Tensor[(14, 14, 11), float64], Tensor[(12, 12, 14), int32], Tensor[(256), int32], int32) {
  %808 = cast(%var_5226, dtype="float64") /* ty=Tensor[(14, 14, 11), float64] */;
  %809 = cast(%var_5231, dtype="int32") /* ty=Tensor[(256), int32] */;
  %810 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %811 = reshape(%809, newshape=[8, 8, 4]) /* ty=Tensor[(8, 8, 4), int32] */;
  %812 = reshape(%810, newshape=[]) /* ty=int32 */;
  %813 = @func_5056(%811, %812) /* ty=(Tensor[(8, 8, 4), int32], Tensor[(12, 12, 14), int32], Tensor[(392), float32], Tensor[(2880), int64], Tensor[(2016), int32], Tensor[(12, 12, 14), int32], int32) */;
  %814 = exp(%808) /* ty=Tensor[(14, 14, 11), float64] */;
  %815 = %813.5;
  (%814, %815, %var_5231, -5 /* ty=int32 */)
}

def @func_7845(%var_7840: Tensor[(16, 4, 1), float64], %var_7841: Tensor[(16, 4, 13), float64]) -> Tensor[(16, 4, 13), float64] {
  %816 = cast(%var_7840, dtype="float64") /* ty=Tensor[(16, 4, 1), float64] */;
  %817 = cast(%var_7841, dtype="float64") /* ty=Tensor[(16, 4, 13), float64] */;
  floor_divide(%816, %817) /* ty=Tensor[(16, 4, 13), float64] */
}

def @func_861(%var_844: Tensor[(7, 7, 16), float32], %var_845: Tensor[(7, 7, 16), float32]) -> Tensor[(7, 7, 16), float32] {
  %818 = cast(%var_845, dtype="float32") /* ty=Tensor[(7, 7, 16), float32] */;
  %819 = shape_of(%var_844, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(%var_844, dtype="float32") /* ty=Tensor[(7, 7, 16), float32] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%820, %821) /* ty=Tensor[(7, 7, 16), float32] */
}

def @func_6848(%var_6829: Tensor[(10, 14, 15), int8], %var_6830: Tensor[(10, 14, 15), int8]) -> (Tensor[(11, 11, 6), float32], Tensor[(10, 14, 15), float64]) {
  %822 = @func_5673() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32]) */;
  %823 = cast(%var_6830, dtype="bool") /* ty=Tensor[(10, 14, 15), bool] */;
  %824 = shape_of(%var_6829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%var_6829, dtype="bool") /* ty=Tensor[(10, 14, 15), bool] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %827 = greater(%825, %826) /* ty=Tensor[(10, 14, 15), bool] */;
  %828 = cast(%827, dtype="float32") /* ty=Tensor[(10, 14, 15), float32] */;
  %829 = asin(%828) /* ty=Tensor[(10, 14, 15), float32] */;
  %830 = cast(%829, dtype="float64") /* ty=Tensor[(10, 14, 15), float64] */;
  %831 = %822.3;
  %832 = acos(%830) /* ty=Tensor[(10, 14, 15), float64] */;
  (%831, %832)
}

def @func_10071() -> Tensor[(11, 11, 6), bool] {
  %833 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %833.0
}

def @func_7148(%var_7146: Tensor[(784), float32]) -> (Tensor[(2, 15, 12), float64], Tensor[(12, 16, 15), int64], Tensor[(8, 360), int64], Tensor[(784), float32], Tensor[(784), float32]) {
  %834 = cast(meta[relay.Constant][68] /* ty=Tensor[(2, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 12), float64] */;
  %835 = cast(meta[relay.Constant][69] /* ty=Tensor[(8, 360), int64] */, dtype="int64") /* ty=Tensor[(8, 360), int64] */;
  %836 = cast(meta[relay.Constant][69] /* ty=Tensor[(8, 360), int64] */, dtype="int64") /* ty=Tensor[(8, 360), int64] */;
  %837 = reshape(%835, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %838 = reshape(%836, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %839 = @func_2527(%837, %838) /* ty=(Tensor[(12, 16, 15), int64],) */;
  %840 = cast(%var_7146, dtype="float32") /* ty=Tensor[(784), float32] */;
  %841 = reshape(%840, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %842 = @func_4654(%841) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) */;
  %843 = cosh(%834) /* ty=Tensor[(2, 15, 12), float64] */;
  %844 = %839.0;
  %845 = %842.2;
  (%843, %844, meta[relay.Constant][69] /* ty=Tensor[(8, 360), int64] */, %845, %var_7146)
}

def @func_2422(%var_2411: Tensor[(7, 5, 4), float32]) -> (Tensor[(7, 5, 4), float32],) {
  %846 = cast(%var_2411, dtype="float32") /* ty=Tensor[(7, 5, 4), float32] */;
  %847 = erf(%846) /* ty=Tensor[(7, 5, 4), float32] */;
  (%847,)
}

def @func_4404() -> (Tensor[(11, 11, 6), float32], int32, Tensor[(54), uint8], int32) {
  %848 = cast(meta[relay.Constant][70] /* ty=Tensor[(54), uint8] */, dtype="uint8") /* ty=Tensor[(54), uint8] */;
  %849 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %850 = reshape(%848, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), uint8] */;
  %851 = reshape(%849, newshape=[]) /* ty=int32 */;
  %852 = @func_3006(%850, %851) /* ty=(Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) */;
  %853 = @func_4221() /* ty=Tensor[(11, 11, 6), float32] */;
  %854 = %852.3;
  (%853, %854, meta[relay.Constant][70] /* ty=Tensor[(54), uint8] */, 9 /* ty=int32 */)
}

def @func_5730(%var_5700: Tensor[(35, 4), float32], %var_5716: Tensor[(35, 4), float32], %var_5721: Tensor[(468), float64]) -> (Tensor[(54), uint8], Tensor[(1, 140), float32], Tensor[(11, 11, 6), float32], Tensor[(35, 4), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64]) {
  %855 = cast(%var_5700, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %856 = reshape(%855, newshape=[1, 140]) /* ty=Tensor[(1, 140), float32] */;
  %857 = @func_5541(%856) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 5, 4), float32], Tensor[(1, 140), float32]) */;
  %858 = cast(%var_5716, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %859 = shape_of(%var_5700, dtype="int32") /* ty=Tensor[(2), int32] */;
  %860 = cast(%var_5700, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %862 = cast(%var_5721, dtype="float64") /* ty=Tensor[(468), float64] */;
  %863 = reshape(%862, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float64] */;
  %864 = @func_2728(%863) /* ty=(Tensor[(6, 13, 6), float64],) */;
  %865 = @func_5420() /* ty=Tensor[(54), uint8] */;
  %866 = %857.2;
  %867 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
  %868 = divide(%860, %861) /* ty=Tensor[(35, 4), float32] */;
  %869 = %864.0;
  (%865, %866, %867, %868, %869, %var_5721)
}

def @func_4380() -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) {
  %870 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
  %871 = @func_4263() /* ty=Tensor[(11, 11, 6), bool] */;
  %872 = cast(%871, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %873 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %874 = cast(%870, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %876 = cast(%870, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %877 = mod(%874, %875) /* ty=Tensor[(11, 11, 6), float64] */;
  %878 = erf(%876) /* ty=Tensor[(11, 11, 6), float64] */;
  (%877, %878)
}

def @func_6885() -> (Tensor[(11, 11, 6), bool], Tensor[(6, 1, 5), float64]) {
  %879 = @func_4279() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %880 = @func_6799() /* ty=(Tensor[(6, 1, 5), float64],) */;
  %881 = %879.0;
  %882 = %880.0;
  (%881, %882)
}

def @func_10299() -> (Tensor[(11, 11, 6), float64],) {
  %883 = @func_8085() /* ty=Tensor[(11, 11, 6), float64] */;
  (%883,)
}

def @func_3945(%var_3918: Tensor[(11, 11, 6), bool], %var_3926: Tensor[(140), float32], %var_3935: Tensor[(192), float32]) -> (Tensor[(11, 11, 6), uint8], Tensor[(7, 5, 4), float32], Tensor[(140), float32], Tensor[(16, 2, 6), float32], Tensor[(192), float32]) {
  %884 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %885 = %884.0;
  %886 = cast(%var_3918, dtype="uint8") /* ty=Tensor[(11, 11, 6), uint8] */;
  %887 = shape_of(%885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %888 = cast(%885, dtype="uint8") /* ty=Tensor[(11, 11, 6), uint8] */;
  %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %890 = cast(%var_3926, dtype="float32") /* ty=Tensor[(140), float32] */;
  %891 = reshape(%890, newshape=[7, 5, 4]) /* ty=Tensor[(7, 5, 4), float32] */;
  %892 = @func_2422(%891) /* ty=(Tensor[(7, 5, 4), float32],) */;
  %893 = cast(%var_3935, dtype="float32") /* ty=Tensor[(192), float32] */;
  %894 = reshape(%893, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
  %895 = logical_xor(%888, %889) /* ty=Tensor[(11, 11, 6), uint8] */;
  %896 = %892.0;
  %897 = @func_2185(%894) /* ty=Tensor[(16, 2, 6), float32] */;
  (%895, %896, %var_3926, %897, %var_3935)
}

def @func_8068() -> (Tensor[(11, 11, 6), float32], Tensor[(6, 1, 5), float64]) {
  %898 = @func_6799() /* ty=(Tensor[(6, 1, 5), float64],) */;
  %899 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
  %900 = %898.0;
  (%899, %900)
}

def @func_7032() -> (Tensor[(11, 11, 6), float32],) {
  %901 = @func_4896() /* ty=Tensor[(11, 11, 6), float32] */;
  (%901,)
}

def @func_5986(%var_5948: Tensor[(72, 2), float64], %var_5949: Tensor[(2880), int64], %var_5950: Tensor[(468), float64]) -> (Tensor[(2880), int64], Tensor[(72, 2), float64], Tensor[(2880), int64], Tensor[(468), float64], Tensor[(14, 2, 7), uint64], Tensor[(2, 12, 6), float64]) {
  %902 = cast(%var_5948, dtype="float64") /* ty=Tensor[(72, 2), float64] */;
  %903 = cast(%var_5949, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %904 = cast(%var_5950, dtype="float64") /* ty=Tensor[(468), float64] */;
  %905 = reshape(%902, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float64] */;
  %906 = reshape(%903, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %907 = reshape(%904, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %908 = @func_3348(%905, %906, %907) /* ty=(Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) */;
  %909 = @func_4683() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(1, 196), float64]) */;
  %910 = %909.1;
  %911 = cast(%910, dtype="float32") /* ty=Tensor[(14, 2, 7), float32] */;
  %912 = log(%911) /* ty=Tensor[(14, 2, 7), float32] */;
  %913 = cast(%910, dtype="uint64") /* ty=Tensor[(14, 2, 7), uint64] */;
  %914 = shape_of(%912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %915 = cast(%912, dtype="uint64") /* ty=Tensor[(14, 2, 7), uint64] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %917 = cast(%var_5948, dtype="float64") /* ty=Tensor[(72, 2), float64] */;
  %918 = cast(%var_5949, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %919 = cast(%var_5950, dtype="float64") /* ty=Tensor[(468), float64] */;
  %920 = reshape(%917, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float64] */;
  %921 = reshape(%918, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %922 = reshape(%919, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %923 = @func_3348(%920, %921, %922) /* ty=(Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) */;
  %924 = %908.1;
  %925 = bitwise_and(%915, %916) /* ty=Tensor[(14, 2, 7), uint64] */;
  %926 = %923.0;
  (%924, %var_5948, %var_5949, %var_5950, %925, %926)
}

def @func_10482(%var_10469: Tensor[(224), float32]) -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64], Tensor[(14, 2, 8), float32], Tensor[(224), float32]) {
  %927 = cast(meta[relay.Constant][71] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %928 = cast(meta[relay.Constant][72] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %929 = reshape(%927, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %930 = reshape(%928, newshape=[832]) /* ty=Tensor[(832), float64] */;
  %931 = @func_8033(%929, %930) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(16, 4, 13), float64], Tensor[(64), float64], Tensor[(832), float64]) */;
  %932 = cast(%var_10469, dtype="float32") /* ty=Tensor[(224), float32] */;
  %933 = reshape(%932, newshape=[14, 2, 8]) /* ty=Tensor[(14, 2, 8), float32] */;
  %934 = @func_7673(%933) /* ty=(Tensor[(14, 2, 8), float32], Tensor[(11, 11, 6), bool], Tensor[(360, 2), float64]) */;
  %935 = @func_6038() /* ty=Tensor[(11, 11, 6), float32] */;
  %936 = %931.0;
  %937 = %934.0;
  (%935, %936, meta[relay.Constant][71] /* ty=Tensor[(64), float64] */, meta[relay.Constant][72] /* ty=Tensor[(832), float64] */, %937, %var_10469)
}

def @func_4336() -> Tensor[(11, 11, 6), float32] {
  %938 = @func_3583() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %939 = %938.0;
  %940 = cast(%939, dtype="float32") /* ty=Tensor[(11, 11, 6), float32] */;
  sigmoid(%940) /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_10191() -> Tensor[(14, 2, 7), float64] {
  %941 = @func_4683() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(1, 196), float64]) */;
  %941.1
}

def @func_696(%var_688: Tensor[(8, 6, 10), float32]) -> Tensor[(8, 6, 10), float32] {
  %942 = cast(%var_688, dtype="float32") /* ty=Tensor[(8, 6, 10), float32] */;
  rsqrt(%942) /* ty=Tensor[(8, 6, 10), float32] */
}

def @func_7167() -> Tensor[(11, 11, 6), bool] {
  %943 = @func_6656() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %943.0
}

def @func_5306() -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) {
  %944 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
  %945 = cast(%944, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %946 = reshape(%945, newshape=[11, 11, 6]) /* ty=Tensor[(11, 11, 6), bool] */;
  %947 = @func_3654(%946) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) */;
  %948 = %947.0;
  (%944, %948)
}

def @func_10491(%var_10486: Tensor[(11, 2, 4), float32]) -> Tensor[(11, 2, 4), float32] {
  %949 = cast(meta[relay.Constant][73] /* ty=Tensor[(11, 2, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
  %950 = shape_of(%var_10486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %951 = cast(%var_10486, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
  %952 = dyn.reshape(%949, %950, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%951, %952) /* ty=Tensor[(11, 2, 4), float32] */
}

def @func_3700(%var_3685: Tensor[(9, 3, 8), float32], %var_3689: Tensor[(9, 3, 8), float32]) -> (Tensor[(9, 3, 8), int32],) {
  %953 = cast(%var_3685, dtype="float32") /* ty=Tensor[(9, 3, 8), float32] */;
  %954 = atanh(%953) /* ty=Tensor[(9, 3, 8), float32] */;
  %955 = cast(%var_3689, dtype="bool") /* ty=Tensor[(9, 3, 8), bool] */;
  %956 = shape_of(%954, dtype="int32") /* ty=Tensor[(3), int32] */;
  %957 = cast(%954, dtype="bool") /* ty=Tensor[(9, 3, 8), bool] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %959 = greater_equal(%957, %958) /* ty=Tensor[(9, 3, 8), bool] */;
  %960 = cast(%var_3685, dtype="int32") /* ty=Tensor[(9, 3, 8), int32] */;
  %961 = shape_of(%959, dtype="int32") /* ty=Tensor[(3), int32] */;
  %962 = cast(%959, dtype="int32") /* ty=Tensor[(9, 3, 8), int32] */;
  %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %964 = logical_xor(%962, %963) /* ty=Tensor[(9, 3, 8), int32] */;
  (%964,)
}

def @func_4221() -> Tensor[(11, 11, 6), float32] {
  %965 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
  %966 = cast(%965, dtype="float32") /* ty=Tensor[(11, 11, 6), float32] */;
  sqrt(%966) /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_5898(%var_5875: Tensor[(480), float32]) -> (Tensor[(11, 11, 6), float32], Tensor[(720), float64], Tensor[(192), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32]) {
  %967 = @func_4683() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(1, 196), float64]) */;
  %968 = cast(meta[relay.Constant][74] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %969 = cast(meta[relay.Constant][75] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %970 = cast(meta[relay.Constant][76] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %971 = cast(meta[relay.Constant][77] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %972 = cast(%var_5875, dtype="float32") /* ty=Tensor[(480), float32] */;
  %973 = reshape(%968, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %974 = reshape(%969, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %975 = reshape(%970, newshape=[9, 60]) /* ty=Tensor[(9, 60), float64] */;
  %976 = reshape(%971, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %977 = reshape(%972, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %978 = @func_4556(%973, %974, %975, %976, %977) /* ty=(Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(6, 15, 6), bool], Tensor[(224), float32], Tensor[(720), float64], Tensor[(9, 60), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), bool]) */;
  %979 = %967.0;
  %980 = %978.4;
  (%979, %980, meta[relay.Constant][74] /* ty=Tensor[(192), float32] */, meta[relay.Constant][75] /* ty=Tensor[(720), float64] */, meta[relay.Constant][76] /* ty=Tensor[(540), float64] */, meta[relay.Constant][77] /* ty=Tensor[(784), float32] */, %var_5875)
}

def @func_7535(%var_7524: Tensor[(196), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(14, 2, 7), float64], Tensor[(196), float64]) {
  %981 = cast(%var_7524, dtype="float64") /* ty=Tensor[(196), float64] */;
  %982 = reshape(%981, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), float64] */;
  %983 = @func_3990(%982) /* ty=(Tensor[(14, 2, 7), float64],) */;
  %984 = @func_6038() /* ty=Tensor[(11, 11, 6), float32] */;
  %985 = @func_4263() /* ty=Tensor[(11, 11, 6), bool] */;
  %986 = %983.0;
  (%984, %985, %986, %var_7524)
}

def @func_9196() -> (Tensor[(6, 1, 5), float64], Tensor[(12, 16, 15), int64], Tensor[(1, 2880), int64]) {
  %987 = @func_8550() /* ty=(Tensor[(6, 1, 5), float64],) */;
  %988 = cast(meta[relay.Constant][78] /* ty=Tensor[(1, 2880), int64] */, dtype="int64") /* ty=Tensor[(1, 2880), int64] */;
  %989 = cast(meta[relay.Constant][78] /* ty=Tensor[(1, 2880), int64] */, dtype="int64") /* ty=Tensor[(1, 2880), int64] */;
  %990 = reshape(%988, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %991 = reshape(%989, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %992 = @func_2527(%990, %991) /* ty=(Tensor[(12, 16, 15), int64],) */;
  %993 = %987.0;
  %994 = %992.0;
  (%993, %994, meta[relay.Constant][78] /* ty=Tensor[(1, 2880), int64] */)
}

def @func_4279() -> (Tensor[(11, 11, 6), bool],) {
  %995 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %996 = %995.0;
  (%996,)
}

def @func_8669() -> (Tensor[(11, 11, 6), int64],) {
  %997 = @func_8417() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), int64]) */;
  %998 = %997.2;
  (%998,)
}

def @func_8915(%var_8865: Tensor[(6, 10, 5), float64]) -> (Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), bool], Tensor[(121, 6), bool], Tensor[(6, 10, 5), float32]) {
  %999 = @func_6885() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(6, 1, 5), float64]) */;
  %1000 = %999.1;
  %1001 = cast(%1000, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %1002 = cast(meta[relay.Constant][79] /* ty=Tensor[(121, 6), bool] */, dtype="bool") /* ty=Tensor[(121, 6), bool] */;
  %1003 = reshape(%1002, newshape=[11, 11, 6]) /* ty=Tensor[(11, 11, 6), bool] */;
  %1004 = @func_3654(%1003) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) */;
  %1005 = cast(%1000, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
  %1006 = cast(%var_8865, dtype="bool") /* ty=Tensor[(6, 10, 5), bool] */;
  %1007 = not_equal(%1005, %1006) /* ty=Tensor[(6, 10, 5), bool] */;
  %1008 = cast(%1007, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %1009 = log2(%1008) /* ty=Tensor[(6, 10, 5), float64] */;
  %1010 = cast(%1009, dtype="float32") /* ty=Tensor[(6, 10, 5), float32] */;
  %1011 = sin(%1001) /* ty=Tensor[(6, 1, 5), float64] */;
  %1012 = %1004.0;
  %1013 = atanh(%1010) /* ty=Tensor[(6, 10, 5), float32] */;
  (%1011, %1012, meta[relay.Constant][79] /* ty=Tensor[(121, 6), bool] */, %1013)
}

def @func_9139(%var_9134: Tensor[(144), float64], %var_9135: Tensor[(2880), int64], %var_9136: Tensor[(3, 156), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float64], Tensor[(468), float64], Tensor[(144), float64], Tensor[(2880), int64], Tensor[(3, 156), float64]) {
  %1014 = @func_4736() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %1015 = @func_8417() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), int64]) */;
  %1016 = cast(%var_9134, dtype="float64") /* ty=Tensor[(144), float64] */;
  %1017 = cast(%var_9135, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %1018 = cast(%var_9136, dtype="float64") /* ty=Tensor[(3, 156), float64] */;
  %1019 = reshape(%1016, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float64] */;
  %1020 = reshape(%1017, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %1021 = reshape(%1018, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %1022 = @func_3348(%1019, %1020, %1021) /* ty=(Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) */;
  %1023 = %1014.0;
  %1024 = %1015.0;
  %1025 = %1022.5;
  (%1023, %1024, %1025, %var_9134, %var_9135, %var_9136)
}

def @func_8275(%var_8252: Tensor[(10, 14, 16), uint16], %var_8253: Tensor[(10, 14, 16), uint16]) -> (Tensor[(10, 14, 16), uint16],) {
  %1026 = cast(%var_8253, dtype="uint16") /* ty=Tensor[(10, 14, 16), uint16] */;
  %1027 = shape_of(%var_8252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1028 = cast(%var_8252, dtype="uint16") /* ty=Tensor[(10, 14, 16), uint16] */;
  %1029 = dyn.reshape(%1026, %1027, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1030 = bitwise_and(%1028, %1029) /* ty=Tensor[(10, 14, 16), uint16] */;
  (%1030,)
}

def @func_4736() -> (Tensor[(11, 11, 6), float32],) {
  %1031 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
  (%1031,)
}

def @func_3348(%var_3276: Tensor[(2, 12, 6), float64], %var_3282: Tensor[(2880), int64], %var_3305: Tensor[(468), float64]) -> (Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) {
  %1032 = cast(%var_3276, dtype="float64") /* ty=Tensor[(2, 12, 6), float64] */;
  %1033 = shape_of(meta[relay.Constant][80] /* ty=Tensor[(2, 12, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1034 = cast(meta[relay.Constant][80] /* ty=Tensor[(2, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 6), float64] */;
  %1035 = dyn.reshape(%1032, %1033, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1036 = cast(%var_3282, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %1037 = cast(%var_3282, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %1038 = reshape(%1036, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %1039 = reshape(%1037, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %1040 = @func_2527(%1038, %1039) /* ty=(Tensor[(12, 16, 15), int64],) */;
  %1041 = %1040.0;
  %1042 = cast(%1041, dtype="int64") /* ty=Tensor[(12, 16, 15), int64] */;
  %1043 = cast(%var_3282, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %1044 = reshape(%1042, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %1045 = reshape(%1043, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %1046 = @func_2527(%1044, %1045) /* ty=(Tensor[(12, 16, 15), int64],) */;
  %1047 = cast(%var_3276, dtype="float32") /* ty=Tensor[(2, 12, 6), float32] */;
  %1048 = cast(%var_3305, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1049 = reshape(%1048, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float64] */;
  %1050 = @func_2728(%1049) /* ty=(Tensor[(6, 13, 6), float64],) */;
  %1051 = cast(%1041, dtype="float32") /* ty=Tensor[(12, 16, 15), float32] */;
  %1052 = floor_divide(%1034, %1035) /* ty=Tensor[(2, 12, 6), float64] */;
  %1053 = %1046.0;
  %1054 = rsqrt(%1047) /* ty=Tensor[(2, 12, 6), float32] */;
  %1055 = %1050.0;
  %1056 = sigmoid(%1051) /* ty=Tensor[(12, 16, 15), float32] */;
  (%1052, %var_3282, %1053, %1054, %1055, %var_3305, %1056)
}

def @func_8792(%var_8765: Tensor[(6, 16, 12), float32], %var_8766: Tensor[(6, 16, 12), float32], %var_8781: Tensor[(2016), int32]) -> (Tensor[(11, 11, 6), float32], Tensor[(12, 12, 14), int32], Tensor[(2016), int32], Tensor[(6, 16, 12), bool]) {
  %1057 = @func_7032() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %1058 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1059 = cast(%var_8781, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %1060 = reshape(%1058, newshape=[]) /* ty=int32 */;
  %1061 = reshape(%1059, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
  %1062 = @func_984(%1060, %1061) /* ty=(Tensor[(12, 12, 14), int32],) */;
  %1063 = cast(%var_8766, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
  %1064 = shape_of(%var_8765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1065 = cast(%var_8765, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
  %1066 = dyn.reshape(%1063, %1064, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1067 = subtract(%1065, %1066) /* ty=Tensor[(6, 16, 12), float32] */;
  %1068 = cast(%1067, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %1069 = cast(1 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %1070 = %1057.0;
  %1071 = %1062.0;
  %1072 = greater(%1068, %1069) /* ty=Tensor[(6, 16, 12), bool] */;
  (%1070, %1071, %var_8781, %1072)
}

def @func_9356(%var_9314: Tensor[(3, 8, 8), float64]) -> (Tensor[(3, 8, 8), float64], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32]) {
  %1073 = cast(%var_9314, dtype="float64") /* ty=Tensor[(3, 8, 8), float64] */;
  %1074 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %1075 = @func_4380() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) */;
  %1076 = atanh(%1073) /* ty=Tensor[(3, 8, 8), float64] */;
  %1077 = %1074.0;
  %1078 = %1075.0;
  %1079 = @func_4756() /* ty=Tensor[(11, 11, 6), float32] */;
  (%1076, %1077, %1078, %1079)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5734(%var_5731: Tensor[(35, 4), float32], %var_5732: Tensor[(35, 4), float32], %var_5733: Tensor[(468), float64]) -> (Tensor[(54), uint8], Tensor[(1, 140), float32], Tensor[(11, 11, 6), float32], Tensor[(35, 4), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64]) {
  %15 = fn (%var_5700: Tensor[(35, 4), float32], %var_5716: Tensor[(35, 4), float32], %var_5721: Tensor[(468), float64]) -> (Tensor[(54), uint8], Tensor[(1, 140), float32], Tensor[(11, 11, 6), float32], Tensor[(35, 4), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64]) {
    %0 = cast(%var_5700, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
    %1 = reshape(%0, newshape=[1, 140]) /* ty=Tensor[(1, 140), float32] */;
    %2 = @func_5541(%1) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 5, 4), float32], Tensor[(1, 140), float32]) */;
    %3 = cast(%var_5716, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
    %4 = shape_of(%var_5700, dtype="int32") /* ty=Tensor[(2), int32] */;
    %5 = cast(%var_5700, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
    %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %7 = cast(%var_5721, dtype="float64") /* ty=Tensor[(468), float64] */;
    %8 = reshape(%7, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float64] */;
    %9 = @func_2728(%8) /* ty=(Tensor[(6, 13, 6), float64],) */;
    %10 = @func_5420() /* ty=Tensor[(54), uint8] */;
    %11 = %2.2;
    %12 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
    %13 = divide(%5, %6) /* ty=Tensor[(35, 4), float32] */;
    %14 = %9.0;
    (%10, %11, %12, %13, %14, %var_5721)
  };
  %15(%var_5731, %var_5732, %var_5733) /* ty=(Tensor[(54), uint8], Tensor[(1, 140), float32], Tensor[(11, 11, 6), float32], Tensor[(35, 4), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64]) */
}

def @func_8496() -> Tensor[(11, 11, 6), float64] {
  %16 = @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %16.0
}

def @func_3990(%var_3986: Tensor[(14, 2, 7), float64]) -> (Tensor[(14, 2, 7), float64],) {
  %17 = cast(%var_3986, dtype="float64") /* ty=Tensor[(14, 2, 7), float64] */;
  %18 = cosh(%17) /* ty=Tensor[(14, 2, 7), float64] */;
  (%18,)
}

def @func_4223() -> Tensor[(11, 11, 6), float32] {
  @func_4221() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_6115() -> Tensor[(11, 11, 6), bool] {
  @func_6113() /* ty=Tensor[(11, 11, 6), bool] */
}

def @func_5173(%var_5172: Tensor[(720), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(4, 14, 4), float32], Tensor[(224), float32], Tensor[(720), float64], Tensor[(1, 540), float64], Tensor[(784), float32], Tensor[(120, 4), float32]) {
  %34 = fn (%var_5152: Tensor[(720), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(4, 14, 4), float32], Tensor[(224), float32], Tensor[(720), float64], Tensor[(1, 540), float64], Tensor[(784), float32], Tensor[(120, 4), float32]) {
    %19 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
    %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %21 = cast(%var_5152, dtype="float64") /* ty=Tensor[(720), float64] */;
    %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 540), float64] */, dtype="float64") /* ty=Tensor[(1, 540), float64] */;
    %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
    %24 = cast(meta[relay.Constant][3] /* ty=Tensor[(120, 4), float32] */, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
    %25 = reshape(%20, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
    %26 = reshape(%21, newshape=[1, 720]) /* ty=Tensor[(1, 720), float64] */;
    %27 = reshape(%22, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %28 = reshape(%23, newshape=[4, 196]) /* ty=Tensor[(4, 196), float32] */;
    %29 = reshape(%24, newshape=[40, 12]) /* ty=Tensor[(40, 12), float32] */;
    %30 = @func_2148(%25, %26, %27, %28, %29) /* ty=(Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) */;
    %31 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
    %32 = %19.0;
    %33 = %30.4;
    (%31, %32, %33, meta[relay.Constant][0] /* ty=Tensor[(224), float32] */, %var_5152, meta[relay.Constant][1] /* ty=Tensor[(1, 540), float64] */, meta[relay.Constant][2] /* ty=Tensor[(784), float32] */, meta[relay.Constant][3] /* ty=Tensor[(120, 4), float32] */)
  };
  %34(%var_5172) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(4, 14, 4), float32], Tensor[(224), float32], Tensor[(720), float64], Tensor[(1, 540), float64], Tensor[(784), float32], Tensor[(120, 4), float32]) */
}

def @func_7882() -> Tensor[(6, 1, 5), float64] {
  @func_7880() /* ty=Tensor[(6, 1, 5), float64] */
}

def @func_8796(%var_8793: Tensor[(6, 16, 12), float32], %var_8794: Tensor[(6, 16, 12), float32], %var_8795: Tensor[(2016), int32]) -> (Tensor[(11, 11, 6), float32], Tensor[(12, 12, 14), int32], Tensor[(2016), int32], Tensor[(6, 16, 12), bool]) {
  %51 = fn (%var_8765: Tensor[(6, 16, 12), float32], %var_8766: Tensor[(6, 16, 12), float32], %var_8781: Tensor[(2016), int32]) -> (Tensor[(11, 11, 6), float32], Tensor[(12, 12, 14), int32], Tensor[(2016), int32], Tensor[(6, 16, 12), bool]) {
    %35 = @func_7032() /* ty=(Tensor[(11, 11, 6), float32],) */;
    %36 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %37 = cast(%var_8781, dtype="int32") /* ty=Tensor[(2016), int32] */;
    %38 = reshape(%36, newshape=[]) /* ty=int32 */;
    %39 = reshape(%37, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
    %40 = @func_984(%38, %39) /* ty=(Tensor[(12, 12, 14), int32],) */;
    %41 = cast(%var_8766, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
    %42 = shape_of(%var_8765, dtype="int32") /* ty=Tensor[(3), int32] */;
    %43 = cast(%var_8765, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %45 = subtract(%43, %44) /* ty=Tensor[(6, 16, 12), float32] */;
    %46 = cast(%45, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
    %47 = cast(1 /* ty=int32 */, dtype="bool") /* ty=bool */;
    %48 = %35.0;
    %49 = %40.0;
    %50 = greater(%46, %47) /* ty=Tensor[(6, 16, 12), bool] */;
    (%48, %49, %var_8781, %50)
  };
  %51(%var_8793, %var_8794, %var_8795) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(12, 12, 14), int32], Tensor[(2016), int32], Tensor[(6, 16, 12), bool]) */
}

def @func_4279() -> (Tensor[(11, 11, 6), bool],) {
  %52 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %53 = %52.0;
  (%53,)
}

def @func_6682() -> Tensor[(11, 11, 6), float64] {
  %54 = @func_6547() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %54.0
}

def @func_8070() -> (Tensor[(11, 11, 6), float32], Tensor[(6, 1, 5), float64]) {
  @func_8068() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(6, 1, 5), float64]) */
}

def @func_3949(%var_3946: Tensor[(11, 11, 6), bool], %var_3947: Tensor[(140), float32], %var_3948: Tensor[(192), float32]) -> (Tensor[(11, 11, 6), uint8], Tensor[(7, 5, 4), float32], Tensor[(140), float32], Tensor[(16, 2, 6), float32], Tensor[(192), float32]) {
  %69 = fn (%var_3918: Tensor[(11, 11, 6), bool], %var_3926: Tensor[(140), float32], %var_3935: Tensor[(192), float32]) -> (Tensor[(11, 11, 6), uint8], Tensor[(7, 5, 4), float32], Tensor[(140), float32], Tensor[(16, 2, 6), float32], Tensor[(192), float32]) {
    %55 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %56 = %55.0;
    %57 = cast(%var_3918, dtype="uint8") /* ty=Tensor[(11, 11, 6), uint8] */;
    %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
    %59 = cast(%56, dtype="uint8") /* ty=Tensor[(11, 11, 6), uint8] */;
    %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %61 = cast(%var_3926, dtype="float32") /* ty=Tensor[(140), float32] */;
    %62 = reshape(%61, newshape=[7, 5, 4]) /* ty=Tensor[(7, 5, 4), float32] */;
    %63 = @func_2422(%62) /* ty=(Tensor[(7, 5, 4), float32],) */;
    %64 = cast(%var_3935, dtype="float32") /* ty=Tensor[(192), float32] */;
    %65 = reshape(%64, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
    %66 = logical_xor(%59, %60) /* ty=Tensor[(11, 11, 6), uint8] */;
    %67 = %63.0;
    %68 = @func_2185(%65) /* ty=Tensor[(16, 2, 6), float32] */;
    (%66, %67, %var_3926, %68, %var_3935)
  };
  %69(%var_3946, %var_3947, %var_3948) /* ty=(Tensor[(11, 11, 6), uint8], Tensor[(7, 5, 4), float32], Tensor[(140), float32], Tensor[(16, 2, 6), float32], Tensor[(192), float32]) */
}

def @func_9068(%var_9066: Tensor[(7, 28), float64], %var_9067: Tensor[(140), float32]) -> (Tensor[(11, 11, 6), float32], Tensor[(7, 28), bool], Tensor[(11, 11, 6), bool], Tensor[(140), float32]) {
  %86 = fn (%var_9018: Tensor[(7, 28), float64], %var_9056: Tensor[(140), float32]) -> (Tensor[(11, 11, 6), float32], Tensor[(7, 28), bool], Tensor[(11, 11, 6), bool], Tensor[(140), float32]) {
    %70 = cast(%var_9018, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
    %71 = acos(%70) /* ty=Tensor[(7, 28), float32] */;
    %72 = cast(%var_9018, dtype="float64") /* ty=Tensor[(7, 28), float64] */;
    %73 = reshape(%72, newshape=[196]) /* ty=Tensor[(196), float64] */;
    %74 = @func_7535(%73) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(14, 2, 7), float64], Tensor[(196), float64]) */;
    %75 = %74.3;
    %76 = cast(%75, dtype="bool") /* ty=Tensor[(196), bool] */;
    %77 = shape_of(%71, dtype="int32") /* ty=Tensor[(2), int32] */;
    %78 = cast(%71, dtype="bool") /* ty=Tensor[(7, 28), bool] */;
    %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %80 = cast(%var_9056, dtype="float32") /* ty=Tensor[(140), float32] */;
    %81 = reshape(%80, newshape=[1, 140]) /* ty=Tensor[(1, 140), float32] */;
    %82 = @func_5541(%81) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 5, 4), float32], Tensor[(1, 140), float32]) */;
    %83 = @func_5449() /* ty=Tensor[(11, 11, 6), float32] */;
    %84 = greater_equal(%78, %79) /* ty=Tensor[(7, 28), bool] */;
    %85 = %82.0;
    (%83, %84, %85, %var_9056)
  };
  %86(%var_9066, %var_9067) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(7, 28), bool], Tensor[(11, 11, 6), bool], Tensor[(140), float32]) */
}

def @func_7537(%var_7536: Tensor[(196), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(14, 2, 7), float64], Tensor[(196), float64]) {
  %93 = fn (%var_7524: Tensor[(196), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(14, 2, 7), float64], Tensor[(196), float64]) {
    %87 = cast(%var_7524, dtype="float64") /* ty=Tensor[(196), float64] */;
    %88 = reshape(%87, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), float64] */;
    %89 = @func_3990(%88) /* ty=(Tensor[(14, 2, 7), float64],) */;
    %90 = @func_6038() /* ty=Tensor[(11, 11, 6), float32] */;
    %91 = @func_4263() /* ty=Tensor[(11, 11, 6), bool] */;
    %92 = %89.0;
    (%90, %91, %92, %var_7524)
  };
  %93(%var_7536) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(14, 2, 7), float64], Tensor[(196), float64]) */
}

def @func_3703(%var_3701: Tensor[(9, 3, 8), float32], %var_3702: Tensor[(9, 3, 8), float32]) -> (Tensor[(9, 3, 8), int32],) {
  %106 = fn (%var_3685: Tensor[(9, 3, 8), float32], %var_3689: Tensor[(9, 3, 8), float32]) -> (Tensor[(9, 3, 8), int32],) {
    %94 = cast(%var_3685, dtype="float32") /* ty=Tensor[(9, 3, 8), float32] */;
    %95 = atanh(%94) /* ty=Tensor[(9, 3, 8), float32] */;
    %96 = cast(%var_3689, dtype="bool") /* ty=Tensor[(9, 3, 8), bool] */;
    %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
    %98 = cast(%95, dtype="bool") /* ty=Tensor[(9, 3, 8), bool] */;
    %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %100 = greater_equal(%98, %99) /* ty=Tensor[(9, 3, 8), bool] */;
    %101 = cast(%var_3685, dtype="int32") /* ty=Tensor[(9, 3, 8), int32] */;
    %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
    %103 = cast(%100, dtype="int32") /* ty=Tensor[(9, 3, 8), int32] */;
    %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %105 = logical_xor(%103, %104) /* ty=Tensor[(9, 3, 8), int32] */;
    (%105,)
  };
  %106(%var_3701, %var_3702) /* ty=(Tensor[(9, 3, 8), int32],) */
}

def @func_864(%var_862: Tensor[(7, 7, 16), float32], %var_863: Tensor[(7, 7, 16), float32]) -> Tensor[(7, 7, 16), float32] {
  %111 = fn (%var_844: Tensor[(7, 7, 16), float32], %var_845: Tensor[(7, 7, 16), float32]) -> Tensor[(7, 7, 16), float32] {
    %107 = cast(%var_845, dtype="float32") /* ty=Tensor[(7, 7, 16), float32] */;
    %108 = shape_of(%var_844, dtype="int32") /* ty=Tensor[(3), int32] */;
    %109 = cast(%var_844, dtype="float32") /* ty=Tensor[(7, 7, 16), float32] */;
    %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%109, %110) /* ty=Tensor[(7, 7, 16), float32] */
  };
  %111(%var_862, %var_863) /* ty=Tensor[(7, 7, 16), float32] */
}

def @func_988(%var_986: int32, %var_987: Tensor[(12, 12, 14), int32]) -> (Tensor[(12, 12, 14), int32],) {
  @func_984(%var_986, %var_987) /* ty=(Tensor[(12, 12, 14), int32],) */
}

def @func_5836() -> (Tensor[(11, 11, 6), bool],) {
  %112 = @func_5306() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) */;
  %113 = %112.1;
  (%113,)
}

def @func_3352(%var_3349: Tensor[(2, 12, 6), float64], %var_3350: Tensor[(2880), int64], %var_3351: Tensor[(468), float64]) -> (Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) {
  %139 = fn (%var_3276: Tensor[(2, 12, 6), float64], %var_3282: Tensor[(2880), int64], %var_3305: Tensor[(468), float64]) -> (Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) {
    %114 = cast(%var_3276, dtype="float64") /* ty=Tensor[(2, 12, 6), float64] */;
    %115 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2, 12, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %116 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 6), float64] */;
    %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %118 = cast(%var_3282, dtype="int64") /* ty=Tensor[(2880), int64] */;
    %119 = cast(%var_3282, dtype="int64") /* ty=Tensor[(2880), int64] */;
    %120 = reshape(%118, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
    %121 = reshape(%119, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
    %122 = @func_2527(%120, %121) /* ty=(Tensor[(12, 16, 15), int64],) */;
    %123 = %122.0;
    %124 = cast(%123, dtype="int64") /* ty=Tensor[(12, 16, 15), int64] */;
    %125 = cast(%var_3282, dtype="int64") /* ty=Tensor[(2880), int64] */;
    %126 = reshape(%124, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
    %127 = reshape(%125, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
    %128 = @func_2527(%126, %127) /* ty=(Tensor[(12, 16, 15), int64],) */;
    %129 = cast(%var_3276, dtype="float32") /* ty=Tensor[(2, 12, 6), float32] */;
    %130 = cast(%var_3305, dtype="float64") /* ty=Tensor[(468), float64] */;
    %131 = reshape(%130, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float64] */;
    %132 = @func_2728(%131) /* ty=(Tensor[(6, 13, 6), float64],) */;
    %133 = cast(%123, dtype="float32") /* ty=Tensor[(12, 16, 15), float32] */;
    %134 = floor_divide(%116, %117) /* ty=Tensor[(2, 12, 6), float64] */;
    %135 = %128.0;
    %136 = rsqrt(%129) /* ty=Tensor[(2, 12, 6), float32] */;
    %137 = %132.0;
    %138 = sigmoid(%133) /* ty=Tensor[(12, 16, 15), float32] */;
    (%134, %var_3282, %135, %136, %137, %var_3305, %138)
  };
  %139(%var_3349, %var_3350, %var_3351) /* ty=(Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) */
}

def @func_10192() -> Tensor[(14, 2, 7), float64] {
  %141 = fn () -> Tensor[(14, 2, 7), float64] {
    %140 = @func_4683() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(1, 196), float64]) */;
    %140.1
  };
  %141() /* ty=Tensor[(14, 2, 7), float64] */
}

def @func_6992() -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64]) {
  @func_6990() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64]) */
}

def @func_4777() -> Tensor[(11, 11, 6), int64] {
  %147 = fn () -> Tensor[(11, 11, 6), int64] {
    %142 = @func_4263() /* ty=Tensor[(11, 11, 6), bool] */;
    %143 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 11, 6), bool] */, dtype="int64") /* ty=Tensor[(11, 11, 6), int64] */;
    %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
    %145 = cast(%142, dtype="int64") /* ty=Tensor[(11, 11, 6), int64] */;
    %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_and(%145, %146) /* ty=Tensor[(11, 11, 6), int64] */
  };
  %147() /* ty=Tensor[(11, 11, 6), int64] */
}

def @func_8671() -> (Tensor[(11, 11, 6), int64],) {
  @func_8669() /* ty=(Tensor[(11, 11, 6), int64],) */
}

def @func_10672() -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) {
  %148 = @func_10022() /* ty=Tensor[(11, 11, 6), float32] */;
  %149 = @func_10022() /* ty=Tensor[(11, 11, 6), float32] */;
  %150 = @func_6274() /* ty=Tensor[(11, 11, 6), bool] */;
  (%148, %149, %150)
}

def @func_4264() -> Tensor[(11, 11, 6), bool] {
  %151 = fn () -> Tensor[(11, 11, 6), bool] {
    @func_3503() /* ty=Tensor[(11, 11, 6), bool] */
  };
  %151() /* ty=Tensor[(11, 11, 6), bool] */
}

def @func_8353(%var_8281: Tensor[(5, 3, 7), int32], %var_8297: Tensor[(112, 2), float32]) -> (Tensor[(5, 3, 7), float32], Tensor[(14, 8, 2), float32], Tensor[(112, 2), float32], Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(196), float64], Tensor[(11, 11, 6), float32], Tensor[(5, 3, 7), float32]) {
  %152 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 3, 7), int32] */, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
  %153 = shape_of(%var_8281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%var_8281, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %156 = less(%154, %155) /* ty=Tensor[(5, 3, 7), bool] */;
  %157 = cast(%var_8281, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%156, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %161 = cast(%var_8297, dtype="float32") /* ty=Tensor[(112, 2), float32] */;
  %162 = reshape(%161, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float32] */;
  %163 = @func_7391(%162) /* ty=(Tensor[(14, 8, 2), float32],) */;
  %164 = @func_4736() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %165 = cast(meta[relay.Constant][7] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %166 = reshape(%165, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), float64] */;
  %167 = @func_3990(%166) /* ty=(Tensor[(14, 2, 7), float64],) */;
  %168 = cast(%var_8281, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
  %169 = divide(%159, %160) /* ty=Tensor[(5, 3, 7), float32] */;
  %170 = %163.0;
  %171 = %164.0;
  %172 = %167.0;
  %173 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
  %174 = log10(%168) /* ty=Tensor[(5, 3, 7), float32] */;
  (%169, %170, %var_8297, %171, %172, meta[relay.Constant][7] /* ty=Tensor[(196), float64] */, %173, %174)
}

def @func_4563(%var_4558: Tensor[(192), float32], %var_4559: Tensor[(720), float64], %var_4560: Tensor[(9, 60), float64], %var_4561: Tensor[(784), float32], %var_4562: Tensor[(480), float32]) -> (Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(6, 15, 6), bool], Tensor[(224), float32], Tensor[(720), float64], Tensor[(9, 60), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), bool]) {
  @func_4556(%var_4558, %var_4559, %var_4560, %var_4561, %var_4562) /* ty=(Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(6, 15, 6), bool], Tensor[(224), float32], Tensor[(720), float64], Tensor[(9, 60), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), bool]) */
}

def @func_8915(%var_8865: Tensor[(6, 10, 5), float64]) -> (Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), bool], Tensor[(121, 6), bool], Tensor[(6, 10, 5), float32]) {
  %175 = @func_6885() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(6, 1, 5), float64]) */;
  %176 = %175.1;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %178 = cast(meta[relay.Constant][8] /* ty=Tensor[(121, 6), bool] */, dtype="bool") /* ty=Tensor[(121, 6), bool] */;
  %179 = reshape(%178, newshape=[11, 11, 6]) /* ty=Tensor[(11, 11, 6), bool] */;
  %180 = @func_3654(%179) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) */;
  %181 = cast(%176, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
  %182 = cast(%var_8865, dtype="bool") /* ty=Tensor[(6, 10, 5), bool] */;
  %183 = not_equal(%181, %182) /* ty=Tensor[(6, 10, 5), bool] */;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %185 = log2(%184) /* ty=Tensor[(6, 10, 5), float64] */;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(6, 10, 5), float32] */;
  %187 = sin(%177) /* ty=Tensor[(6, 1, 5), float64] */;
  %188 = %180.0;
  %189 = atanh(%186) /* ty=Tensor[(6, 10, 5), float32] */;
  (%187, %188, meta[relay.Constant][8] /* ty=Tensor[(121, 6), bool] */, %189)
}

def @func_3862(%var_3846: Tensor[(720), float64]) -> (Tensor[(11, 11, 6), bool], Tensor[(4, 12, 15), bool], Tensor[(720), float64]) {
  %190 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %191 = cast(%var_3846, dtype="float64") /* ty=Tensor[(720), float64] */;
  %192 = cast(%var_3846, dtype="float64") /* ty=Tensor[(720), float64] */;
  %193 = reshape(%191, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %194 = reshape(%192, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %195 = %190.0;
  %196 = @func_1715(%193, %194) /* ty=Tensor[(4, 12, 15), bool] */;
  (%195, %196, %var_3846)
}

def @func_6490() -> (Tensor[(11, 11, 6), bool],) {
  %197 = @func_5306() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) */;
  %198 = %197.1;
  (%198,)
}

def @func_10439() -> (Tensor[(6, 11, 15), int64], Tensor[(11, 11, 6), bool], Tensor[(121, 6), bool], Tensor[(300), float64], Tensor[(11, 11, 6), float32], Tensor[(6, 11, 15), float64]) {
  @func_10437() /* ty=(Tensor[(6, 11, 15), int64], Tensor[(11, 11, 6), bool], Tensor[(121, 6), bool], Tensor[(300), float64], Tensor[(11, 11, 6), float32], Tensor[(6, 11, 15), float64]) */
}

def @func_4684() -> (Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(1, 196), float64]) {
  %204 = fn () -> (Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(1, 196), float64]) {
    %199 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 196), float64] */, dtype="float64") /* ty=Tensor[(1, 196), float64] */;
    %200 = reshape(%199, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), float64] */;
    %201 = @func_3990(%200) /* ty=(Tensor[(14, 2, 7), float64],) */;
    %202 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
    %203 = %201.0;
    (%202, %203, meta[relay.Constant][9] /* ty=Tensor[(1, 196), float64] */)
  };
  %204() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(1, 196), float64]) */
}

def @func_4556(%var_4511: Tensor[(192), float32], %var_4527: Tensor[(720), float64], %var_4528: Tensor[(9, 60), float64], %var_4529: Tensor[(784), float32], %var_4530: Tensor[(480), float32]) -> (Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(6, 15, 6), bool], Tensor[(224), float32], Tensor[(720), float64], Tensor[(9, 60), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), bool]) {
  %205 = cast(%var_4511, dtype="float32") /* ty=Tensor[(192), float32] */;
  %206 = reshape(%205, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
  %207 = cast(meta[relay.Constant][10] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %208 = cast(%var_4527, dtype="float64") /* ty=Tensor[(720), float64] */;
  %209 = cast(%var_4528, dtype="float64") /* ty=Tensor[(9, 60), float64] */;
  %210 = cast(%var_4529, dtype="float32") /* ty=Tensor[(784), float32] */;
  %211 = cast(%var_4530, dtype="float32") /* ty=Tensor[(480), float32] */;
  %212 = reshape(%207, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
  %213 = reshape(%208, newshape=[1, 720]) /* ty=Tensor[(1, 720), float64] */;
  %214 = reshape(%209, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %215 = reshape(%210, newshape=[4, 196]) /* ty=Tensor[(4, 196), float32] */;
  %216 = reshape(%211, newshape=[40, 12]) /* ty=Tensor[(40, 12), float32] */;
  %217 = @func_2148(%212, %213, %214, %215, %216) /* ty=(Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) */;
  %218 = @func_4221() /* ty=Tensor[(11, 11, 6), float32] */;
  %219 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 11, 6), float32] */, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%218, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %223 = @func_2185(%206) /* ty=Tensor[(16, 2, 6), float32] */;
  %224 = %217.9;
  %225 = less_equal(%221, %222) /* ty=Tensor[(11, 11, 6), bool] */;
  (%223, %var_4511, %224, meta[relay.Constant][10] /* ty=Tensor[(224), float32] */, %var_4527, %var_4528, %var_4529, %var_4530, %225)
}

def @func_6228() -> Tensor[(11, 11, 6), float32] {
  @func_6226() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_6852(%var_6850: Tensor[(10, 14, 15), int8], %var_6851: Tensor[(10, 14, 15), int8]) -> (Tensor[(11, 11, 6), float32], Tensor[(10, 14, 15), float64]) {
  @func_6848(%var_6850, %var_6851) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(10, 14, 15), float64]) */
}

def @func_10073() -> Tensor[(11, 11, 6), bool] {
  @func_10071() /* ty=Tensor[(11, 11, 6), bool] */
}

def @func_6657() -> (Tensor[(11, 11, 6), bool],) {
  %228 = fn () -> (Tensor[(11, 11, 6), bool],) {
    %226 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %227 = %226.0;
    (%227,)
  };
  %228() /* ty=(Tensor[(11, 11, 6), bool],) */
}

def @func_10739() -> (Tensor[(14, 2, 7), float64], Tensor[(11, 11, 6), float32]) {
  %229 = @func_8643() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %230 = @func_10191() /* ty=Tensor[(14, 2, 7), float64] */;
  %231 = %229.0;
  (%230, %231)
}

def @func_4897() -> Tensor[(11, 11, 6), float32] {
  %232 = fn () -> Tensor[(11, 11, 6), float32] {
    @func_4336() /* ty=Tensor[(11, 11, 6), float32] */
  };
  %232() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_6380() -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(30), float64], Tensor[(6, 13, 6), float64], Tensor[(6, 78), float64]) {
  %244 = fn () -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(30), float64], Tensor[(6, 13, 6), float64], Tensor[(6, 78), float64]) {
    %233 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
    %234 = cast(meta[relay.Constant][12] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %235 = reshape(%234, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
    %236 = @func_5605(%235) /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32], Tensor[(720), float64], Tensor[(11, 11, 6), bool], Tensor[(6, ?, 5), float32]) */;
    %237 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 78), float64] */, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
    %238 = reshape(%237, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float64] */;
    %239 = @func_2728(%238) /* ty=(Tensor[(6, 13, 6), float64],) */;
    %240 = @func_6038() /* ty=Tensor[(11, 11, 6), float32] */;
    %241 = %233.0;
    %242 = %236.2;
    %243 = %239.0;
    (%240, %241, %242, meta[relay.Constant][12] /* ty=Tensor[(30), float64] */, %243, meta[relay.Constant][13] /* ty=Tensor[(6, 78), float64] */)
  };
  %244() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(30), float64], Tensor[(6, 13, 6), float64], Tensor[(6, 78), float64]) */
}

def @func_9143(%var_9140: Tensor[(144), float64], %var_9141: Tensor[(2880), int64], %var_9142: Tensor[(3, 156), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float64], Tensor[(468), float64], Tensor[(144), float64], Tensor[(2880), int64], Tensor[(3, 156), float64]) {
  %257 = fn (%var_9134: Tensor[(144), float64], %var_9135: Tensor[(2880), int64], %var_9136: Tensor[(3, 156), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float64], Tensor[(468), float64], Tensor[(144), float64], Tensor[(2880), int64], Tensor[(3, 156), float64]) {
    %245 = @func_4736() /* ty=(Tensor[(11, 11, 6), float32],) */;
    %246 = @func_8417() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), int64]) */;
    %247 = cast(%var_9134, dtype="float64") /* ty=Tensor[(144), float64] */;
    %248 = cast(%var_9135, dtype="int64") /* ty=Tensor[(2880), int64] */;
    %249 = cast(%var_9136, dtype="float64") /* ty=Tensor[(3, 156), float64] */;
    %250 = reshape(%247, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float64] */;
    %251 = reshape(%248, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
    %252 = reshape(%249, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %253 = @func_3348(%250, %251, %252) /* ty=(Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) */;
    %254 = %245.0;
    %255 = %246.0;
    %256 = %253.5;
    (%254, %255, %256, %var_9134, %var_9135, %var_9136)
  };
  %257(%var_9140, %var_9141, %var_9142) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float64], Tensor[(468), float64], Tensor[(144), float64], Tensor[(2880), int64], Tensor[(3, 156), float64]) */
}

def @func_1168(%var_1161: Tensor[(6, 15, 6), float64], %var_1162: Tensor[(6, 15, 6), float64]) -> (Tensor[(6, 15, 6), bool],) {
  %258 = cast(%var_1162, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
  %259 = shape_of(%var_1161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%var_1161, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %262 = less_equal(%260, %261) /* ty=Tensor[(6, 15, 6), bool] */;
  (%262,)
}

def @func_8969() -> (Tensor[(11, 11, 6), float64],) {
  %264 = fn () -> (Tensor[(11, 11, 6), float64],) {
    %263 = @func_7901() /* ty=Tensor[(11, 11, 6), float64] */;
    (%263,)
  };
  %264() /* ty=(Tensor[(11, 11, 6), float64],) */
}

def @func_4254(%var_4249: Tensor[(784), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) {
  %265 = cast(%var_4249, dtype="float32") /* ty=Tensor[(784), float32] */;
  %266 = cast(%var_4249, dtype="float32") /* ty=Tensor[(784), float32] */;
  %267 = reshape(%265, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
  %268 = reshape(%266, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
  %269 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
  %270 = @func_861(%267, %268) /* ty=Tensor[(7, 7, 16), float32] */;
  (%269, %270, %var_4249)
}

def @func_8033(%var_8030: Tensor[(64), float64], %var_8031: Tensor[(832), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(16, 4, 13), float64], Tensor[(64), float64], Tensor[(832), float64]) {
  %271 = @func_5632() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %272 = cast(%var_8030, dtype="float64") /* ty=Tensor[(64), float64] */;
  %273 = cast(%var_8031, dtype="float64") /* ty=Tensor[(832), float64] */;
  %274 = reshape(%272, newshape=[16, 4, 1]) /* ty=Tensor[(16, 4, 1), float64] */;
  %275 = reshape(%273, newshape=[16, 4, 13]) /* ty=Tensor[(16, 4, 13), float64] */;
  %276 = %271.0;
  %277 = @func_7845(%274, %275) /* ty=Tensor[(16, 4, 13), float64] */;
  (%276, %277, %var_8030, %var_8031)
}

def @func_5986(%var_5948: Tensor[(72, 2), float64], %var_5949: Tensor[(2880), int64], %var_5950: Tensor[(468), float64]) -> (Tensor[(2880), int64], Tensor[(72, 2), float64], Tensor[(2880), int64], Tensor[(468), float64], Tensor[(14, 2, 7), uint64], Tensor[(2, 12, 6), float64]) {
  %278 = cast(%var_5948, dtype="float64") /* ty=Tensor[(72, 2), float64] */;
  %279 = cast(%var_5949, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %280 = cast(%var_5950, dtype="float64") /* ty=Tensor[(468), float64] */;
  %281 = reshape(%278, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float64] */;
  %282 = reshape(%279, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %283 = reshape(%280, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %284 = @func_3348(%281, %282, %283) /* ty=(Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) */;
  %285 = @func_4683() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(1, 196), float64]) */;
  %286 = %285.1;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(14, 2, 7), float32] */;
  %288 = log(%287) /* ty=Tensor[(14, 2, 7), float32] */;
  %289 = cast(%286, dtype="uint64") /* ty=Tensor[(14, 2, 7), uint64] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="uint64") /* ty=Tensor[(14, 2, 7), uint64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %293 = cast(%var_5948, dtype="float64") /* ty=Tensor[(72, 2), float64] */;
  %294 = cast(%var_5949, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %295 = cast(%var_5950, dtype="float64") /* ty=Tensor[(468), float64] */;
  %296 = reshape(%293, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float64] */;
  %297 = reshape(%294, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %298 = reshape(%295, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %299 = @func_3348(%296, %297, %298) /* ty=(Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) */;
  %300 = %284.1;
  %301 = bitwise_and(%291, %292) /* ty=Tensor[(14, 2, 7), uint64] */;
  %302 = %299.0;
  (%300, %var_5948, %var_5949, %var_5950, %301, %302)
}

def @func_4854() -> (Tensor[(11, 11, 6), float64],) {
  %303 = @func_4380() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) */;
  %304 = %303.1;
  %305 = cast(%304, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %306 = asinh(%305) /* ty=Tensor[(11, 11, 6), float64] */;
  (%306,)
}

def @func_3584() -> (Tensor[(11, 11, 6), bool],) {
  %309 = fn () -> (Tensor[(11, 11, 6), bool],) {
    %307 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %308 = %307.0;
    (%308,)
  };
  %309() /* ty=(Tensor[(11, 11, 6), bool],) */
}

def @func_9310(%var_9309: Tensor[(8, 15, 6), float32]) -> (Tensor[(11, 11, 6), float32], Tensor[(8, 15, 6), float64], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64]) {
  %322 = fn (%var_9217: Tensor[(8, 15, 6), float32]) -> (Tensor[(11, 11, 6), float32], Tensor[(8, 15, 6), float64], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64]) {
    %310 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
    %311 = cast(%var_9217, dtype="float32") /* ty=Tensor[(8, 15, 6), float32] */;
    %312 = acosh(%311) /* ty=Tensor[(8, 15, 6), float32] */;
    %313 = cast(%312, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
    %314 = cast(meta[relay.Constant][14] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %315 = cast(meta[relay.Constant][15] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
    %316 = reshape(%314, newshape=[64]) /* ty=Tensor[(64), float64] */;
    %317 = reshape(%315, newshape=[832]) /* ty=Tensor[(832), float64] */;
    %318 = @func_8033(%316, %317) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(16, 4, 13), float64], Tensor[(64), float64], Tensor[(832), float64]) */;
    %319 = %310.0;
    %320 = cos(%313) /* ty=Tensor[(8, 15, 6), float64] */;
    %321 = %318.0;
    (%319, %320, %321, meta[relay.Constant][14] /* ty=Tensor[(64), float64] */, meta[relay.Constant][15] /* ty=Tensor[(832), float64] */)
  };
  %322(%var_9309) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(8, 15, 6), float64], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64]) */
}

def @func_6276() -> Tensor[(11, 11, 6), bool] {
  @func_6274() /* ty=Tensor[(11, 11, 6), bool] */
}

def @func_10491(%var_10486: Tensor[(11, 2, 4), float32]) -> Tensor[(11, 2, 4), float32] {
  %323 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 2, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
  %324 = shape_of(%var_10486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%var_10486, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%325, %326) /* ty=Tensor[(11, 2, 4), float32] */
}

def @func_7476(%var_7461: int32, %var_7462: Tensor[(2016), int32]) -> (Tensor[(11, 11, 6), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32]) {
  %327 = @func_6547() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %328 = cast(%var_7461, dtype="int32") /* ty=int32 */;
  %329 = cast(%var_7462, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %330 = reshape(%328, newshape=[]) /* ty=int32 */;
  %331 = reshape(%329, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
  %332 = @func_984(%330, %331) /* ty=(Tensor[(12, 12, 14), int32],) */;
  %333 = %327.0;
  %334 = %332.0;
  (%333, %334, %var_7461, %var_7462)
}

def @func_2422(%var_2411: Tensor[(7, 5, 4), float32]) -> (Tensor[(7, 5, 4), float32],) {
  %335 = cast(%var_2411, dtype="float32") /* ty=Tensor[(7, 5, 4), float32] */;
  %336 = erf(%335) /* ty=Tensor[(7, 5, 4), float32] */;
  (%336,)
}

def @func_3503() -> Tensor[(11, 11, 6), bool] {
  %337 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 11, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 6), float32] */;
  %338 = log10(%337) /* ty=Tensor[(11, 11, 6), float32] */;
  %339 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 11, 6), float32] */, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%341, %342) /* ty=Tensor[(11, 11, 6), bool] */
}

def @func_8418() -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), int64]) {
  %348 = fn () -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), int64]) {
    %343 = @func_4380() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) */;
    %344 = @func_5306() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) */;
    %345 = %343.0;
    %346 = %344.1;
    %347 = @func_4776() /* ty=Tensor[(11, 11, 6), int64] */;
    (%345, %346, %347)
  };
  %348() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), int64]) */
}

def @func_10674() -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) {
  @func_10672() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) */
}

def @func_5838() -> (Tensor[(11, 11, 6), bool],) {
  @func_5836() /* ty=(Tensor[(11, 11, 6), bool],) */
}

def @func_4382() -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) {
  @func_4380() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) */
}

def @func_4786() -> (Tensor[(11, 11, 6), float32],) {
  %349 = @func_4683() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(1, 196), float64]) */;
  %350 = %349.0;
  (%350,)
}

def @func_6783(%var_6779: Tensor[(720), float64], %var_6780: Tensor[(144), float64], %var_6781: Tensor[(2880), int64], %var_6782: Tensor[(192), float32]) -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64], Tensor[(720), float64], Tensor[(6, 13, 6), float64], Tensor[(144), float64], Tensor[(2880), int64], Tensor[(468), float64], Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(11, 11, 6), float32], Tensor[(4, 14, 4), float64]) {
  @func_6777(%var_6779, %var_6780, %var_6781, %var_6782) /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64], Tensor[(720), float64], Tensor[(6, 13, 6), float64], Tensor[(144), float64], Tensor[(2880), int64], Tensor[(468), float64], Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(11, 11, 6), float32], Tensor[(4, 14, 4), float64]) */
}

def @func_5307() -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) {
  %356 = fn () -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) {
    %351 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
    %352 = cast(%351, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
    %353 = reshape(%352, newshape=[11, 11, 6]) /* ty=Tensor[(11, 11, 6), bool] */;
    %354 = @func_3654(%353) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) */;
    %355 = %354.0;
    (%351, %355)
  };
  %356() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool]) */
}

def @func_2185(%var_2176: Tensor[(16, 2, 6), float32]) -> Tensor[(16, 2, 6), float32] {
  %357 = cast(%var_2176, dtype="float32") /* ty=Tensor[(16, 2, 6), float32] */;
  %358 = erf(%357) /* ty=Tensor[(16, 2, 6), float32] */;
  %359 = cast(%358, dtype="float32") /* ty=Tensor[(16, 2, 6), float32] */;
  exp(%359) /* ty=Tensor[(16, 2, 6), float32] */
}

def @func_4993() -> (Tensor[(11, 11, 6), float64],) {
  %360 = @func_4380() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) */;
  %361 = %360.0;
  (%361,)
}

def @func_4937() -> Tensor[(11, 11, 6), float64] {
  @func_4935() /* ty=Tensor[(11, 11, 6), float64] */
}

def @func_8643() -> (Tensor[(11, 11, 6), float32],) {
  %362 = @func_4896() /* ty=Tensor[(11, 11, 6), float32] */;
  (%362,)
}

def @func_4133(%var_4115: Tensor[(392), float32]) -> (Tensor[(11, 11, 6), int32], Tensor[(2016), int32], Tensor[(392), float32], Tensor[(2880), int64], Tensor[(2016), int32], Tensor[(54), uint8]) {
  %363 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %364 = %363.0;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %366 = sinh(%365) /* ty=Tensor[(11, 11, 6), float64] */;
  %367 = cast(%364, dtype="int32") /* ty=Tensor[(11, 11, 6), int32] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="int32") /* ty=Tensor[(11, 11, 6), int32] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %371 = cast(%var_4115, dtype="float32") /* ty=Tensor[(392), float32] */;
  %372 = cast(meta[relay.Constant][18] /* ty=Tensor[(2880), int64] */, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %373 = cast(meta[relay.Constant][19] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %374 = cast(%var_4115, dtype="float32") /* ty=Tensor[(392), float32] */;
  %375 = reshape(%371, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float32] */;
  %376 = reshape(%372, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %377 = reshape(%373, newshape=[2016]) /* ty=Tensor[(2016), int32] */;
  %378 = reshape(%374, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float32] */;
  %379 = @func_3822(%375, %376, %377, %378) /* ty=(Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(12, 12, 14), int32], Tensor[(54), uint8], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(4, 7, 14), bool], Tensor[(6, 13, 6), float64]) */;
  %380 = cast(%var_4115, dtype="float32") /* ty=Tensor[(392), float32] */;
  %381 = cast(meta[relay.Constant][18] /* ty=Tensor[(2880), int64] */, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %382 = cast(meta[relay.Constant][19] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %383 = cast(%var_4115, dtype="float32") /* ty=Tensor[(392), float32] */;
  %384 = reshape(%380, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float32] */;
  %385 = reshape(%381, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %386 = reshape(%382, newshape=[2016]) /* ty=Tensor[(2016), int32] */;
  %387 = reshape(%383, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float32] */;
  %388 = @func_3822(%384, %385, %386, %387) /* ty=(Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(12, 12, 14), int32], Tensor[(54), uint8], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(4, 7, 14), bool], Tensor[(6, 13, 6), float64]) */;
  %389 = maximum(%369, %370) /* ty=Tensor[(11, 11, 6), int32] */;
  %390 = %379.6;
  %391 = %388.8;
  (%389, %390, %var_4115, meta[relay.Constant][18] /* ty=Tensor[(2880), int64] */, meta[relay.Constant][19] /* ty=Tensor[(2016), int32] */, %391)
}

def @func_8471() -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) {
  %394 = fn () -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) {
    %392 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
    %393 = @func_5115() /* ty=Tensor[(11, 11, 6), float32] */;
    (%392, %393)
  };
  %394() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) */
}

def @func_8222(%var_8177: Tensor[(11, 5, 15), uint64], %var_8178: Tensor[(11, 5, 15), uint64], %var_8190: Tensor[(784), float32]) -> (Tensor[(11, 5, 15), bool], Tensor[(4, 196), float32], Tensor[(1, 224), float32], Tensor[(720), float64], Tensor[(540, 1), float64], Tensor[(784), float32], Tensor[(480), float32]) {
  %395 = cast(%var_8178, dtype="bool") /* ty=Tensor[(11, 5, 15), bool] */;
  %396 = shape_of(%var_8177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%var_8177, dtype="bool") /* ty=Tensor[(11, 5, 15), bool] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %399 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 224), float32] */, dtype="float32") /* ty=Tensor[(1, 224), float32] */;
  %400 = cast(meta[relay.Constant][21] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %401 = cast(meta[relay.Constant][22] /* ty=Tensor[(540, 1), float64] */, dtype="float64") /* ty=Tensor[(540, 1), float64] */;
  %402 = cast(%var_8190, dtype="float32") /* ty=Tensor[(784), float32] */;
  %403 = cast(meta[relay.Constant][23] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %404 = reshape(%399, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
  %405 = reshape(%400, newshape=[1, 720]) /* ty=Tensor[(1, 720), float64] */;
  %406 = reshape(%401, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %407 = reshape(%402, newshape=[4, 196]) /* ty=Tensor[(4, 196), float32] */;
  %408 = reshape(%403, newshape=[40, 12]) /* ty=Tensor[(40, 12), float32] */;
  %409 = @func_2148(%404, %405, %406, %407, %408) /* ty=(Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) */;
  %410 = less(%397, %398) /* ty=Tensor[(11, 5, 15), bool] */;
  %411 = %409.6;
  (%410, %411, meta[relay.Constant][20] /* ty=Tensor[(1, 224), float32] */, meta[relay.Constant][21] /* ty=Tensor[(720), float64] */, meta[relay.Constant][22] /* ty=Tensor[(540, 1), float64] */, %var_8190, meta[relay.Constant][23] /* ty=Tensor[(480), float32] */)
}

def @func_7277(%var_7260: Tensor[(196), float64]) -> (Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), int16], Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(196), float64]) {
  %412 = @func_6799() /* ty=(Tensor[(6, 1, 5), float64],) */;
  %413 = @func_7032() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %414 = %413.0;
  %415 = @func_4736() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %416 = %415.0;
  %417 = cast(%416, dtype="int16") /* ty=Tensor[(11, 11, 6), int16] */;
  %418 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%414, dtype="int16") /* ty=Tensor[(11, 11, 6), int16] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %421 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %422 = cast(%var_7260, dtype="float64") /* ty=Tensor[(196), float64] */;
  %423 = reshape(%422, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), float64] */;
  %424 = @func_3990(%423) /* ty=(Tensor[(14, 2, 7), float64],) */;
  %425 = %412.0;
  %426 = minimum(%419, %420) /* ty=Tensor[(11, 11, 6), int16] */;
  %427 = %421.0;
  %428 = %424.0;
  (%425, %426, %427, %428, %var_7260)
}

def @func_7502() -> (Tensor[(11, 11, 6), float32], Tensor[(6, 1, 5), float64]) {
  %432 = fn () -> (Tensor[(11, 11, 6), float32], Tensor[(6, 1, 5), float64]) {
    %429 = @func_6799() /* ty=(Tensor[(6, 1, 5), float64],) */;
    %430 = @func_4756() /* ty=Tensor[(11, 11, 6), float32] */;
    %431 = %429.0;
    (%430, %431)
  };
  %432() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(6, 1, 5), float64]) */
}

def @func_6492() -> (Tensor[(11, 11, 6), bool],) {
  @func_6490() /* ty=(Tensor[(11, 11, 6), bool],) */
}

def @func_4995() -> (Tensor[(11, 11, 6), float64],) {
  @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */
}

def @func_10587() -> (Tensor[(11, 11, 6), float64], Tensor[(720), float64], Tensor[(1, 540), float64], Tensor[(480), float32], Tensor[(5, 5, 9), int32]) {
  %433 = cast(meta[relay.Constant][24] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %434 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 540), float64] */, dtype="float64") /* ty=Tensor[(1, 540), float64] */;
  %435 = cast(meta[relay.Constant][26] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %436 = reshape(%433, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %437 = reshape(%434, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %438 = reshape(%435, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %439 = @func_8521(%436, %437, %438) /* ty=(int32, Tensor[(4, 14, 4), float64], Tensor[(224), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), float64], Tensor[(8, 6, 10), float32]) */;
  %440 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(5, 5, 9), float32] */;
  %441 = atan(%440) /* ty=Tensor[(5, 5, 9), float32] */;
  %442 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(5, 5, 9), float32] */;
  %443 = sigmoid(%442) /* ty=Tensor[(5, 5, 9), float32] */;
  %444 = cast(%443, dtype="int64") /* ty=Tensor[(5, 5, 9), int64] */;
  %445 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(5, 5, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 5, 9), float32] */, dtype="int64") /* ty=Tensor[(5, 5, 9), int64] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %448 = maximum(%446, %447) /* ty=Tensor[(5, 5, 9), int64] */;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(5, 5, 9), float64] */;
  %450 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%441, dtype="float64") /* ty=Tensor[(5, 5, 9), float64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %453 = floor_mod(%451, %452) /* ty=Tensor[(5, 5, 9), float64] */;
  %454 = cast(%443, dtype="int32") /* ty=Tensor[(5, 5, 9), int32] */;
  %455 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%453, dtype="int32") /* ty=Tensor[(5, 5, 9), int32] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %458 = %439.7;
  %459 = right_shift(%456, %457) /* ty=Tensor[(5, 5, 9), int32] */;
  (%458, meta[relay.Constant][24] /* ty=Tensor[(720), float64] */, meta[relay.Constant][25] /* ty=Tensor[(1, 540), float64] */, meta[relay.Constant][26] /* ty=Tensor[(480), float32] */, %459)
}

def @func_8103() -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool]) {
  %464 = fn () -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool]) {
    %460 = @func_5836() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %461 = @func_5836() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %462 = %460.0;
    %463 = %461.0;
    (%462, %463)
  };
  %464() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool]) */
}

def @func_7168() -> Tensor[(11, 11, 6), bool] {
  %466 = fn () -> Tensor[(11, 11, 6), bool] {
    %465 = @func_6656() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %465.0
  };
  %466() /* ty=Tensor[(11, 11, 6), bool] */
}

def @func_3505() -> Tensor[(11, 11, 6), bool] {
  @func_3503() /* ty=Tensor[(11, 11, 6), bool] */
}

def @func_8525(%var_8522: Tensor[(720), float64], %var_8523: Tensor[(540), float64], %var_8524: Tensor[(480), float32]) -> (int32, Tensor[(4, 14, 4), float64], Tensor[(224), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), float64], Tensor[(8, 6, 10), float32]) {
  %485 = fn (%var_8505: Tensor[(720), float64], %var_8506: Tensor[(540), float64], %var_8508: Tensor[(480), float32]) -> (int32, Tensor[(4, 14, 4), float64], Tensor[(224), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), float64], Tensor[(8, 6, 10), float32]) {
    %467 = @func_4404() /* ty=(Tensor[(11, 11, 6), float32], int32, Tensor[(54), uint8], int32) */;
    %468 = cast(meta[relay.Constant][28] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %469 = cast(%var_8505, dtype="float64") /* ty=Tensor[(720), float64] */;
    %470 = cast(%var_8506, dtype="float64") /* ty=Tensor[(540), float64] */;
    %471 = cast(meta[relay.Constant][29] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
    %472 = cast(%var_8508, dtype="float32") /* ty=Tensor[(480), float32] */;
    %473 = reshape(%468, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
    %474 = reshape(%469, newshape=[1, 720]) /* ty=Tensor[(1, 720), float64] */;
    %475 = reshape(%470, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %476 = reshape(%471, newshape=[4, 196]) /* ty=Tensor[(4, 196), float32] */;
    %477 = reshape(%472, newshape=[40, 12]) /* ty=Tensor[(40, 12), float32] */;
    %478 = @func_2148(%473, %474, %475, %476, %477) /* ty=(Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) */;
    %479 = cast(%var_8508, dtype="float32") /* ty=Tensor[(480), float32] */;
    %480 = reshape(%479, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), float32] */;
    %481 = %467.3;
    %482 = %478.11;
    %483 = @func_8085() /* ty=Tensor[(11, 11, 6), float64] */;
    %484 = @func_696(%480) /* ty=Tensor[(8, 6, 10), float32] */;
    (%481, %482, meta[relay.Constant][28] /* ty=Tensor[(224), float32] */, %var_8505, %var_8506, meta[relay.Constant][29] /* ty=Tensor[(784), float32] */, %var_8508, %483, %484)
  };
  %485(%var_8522, %var_8523, %var_8524) /* ty=(int32, Tensor[(4, 14, 4), float64], Tensor[(224), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), float64], Tensor[(8, 6, 10), float32]) */
}

def @func_3865(%var_3863: Tensor[(720), float64]) -> (Tensor[(11, 11, 6), bool], Tensor[(4, 12, 15), bool], Tensor[(720), float64]) {
  @func_3862(%var_3863) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(4, 12, 15), bool], Tensor[(720), float64]) */
}

def @func_10228() -> (Tensor[(11, 11, 6), bool], Tensor[(300), float64], Tensor[(6, 1, 5), float32]) {
  @func_10226() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(300), float64], Tensor[(6, 1, 5), float32]) */
}

def @func_9196() -> (Tensor[(6, 1, 5), float64], Tensor[(12, 16, 15), int64], Tensor[(1, 2880), int64]) {
  %486 = @func_8550() /* ty=(Tensor[(6, 1, 5), float64],) */;
  %487 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 2880), int64] */, dtype="int64") /* ty=Tensor[(1, 2880), int64] */;
  %488 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 2880), int64] */, dtype="int64") /* ty=Tensor[(1, 2880), int64] */;
  %489 = reshape(%487, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %490 = reshape(%488, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %491 = @func_2527(%489, %490) /* ty=(Tensor[(12, 16, 15), int64],) */;
  %492 = %486.0;
  %493 = %491.0;
  (%492, %493, meta[relay.Constant][30] /* ty=Tensor[(1, 2880), int64] */)
}

def @func_8918(%var_8916: Tensor[(6, 10, 5), float64]) -> (Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), bool], Tensor[(121, 6), bool], Tensor[(6, 10, 5), float32]) {
  @func_8915(%var_8916) /* ty=(Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), bool], Tensor[(121, 6), bool], Tensor[(6, 10, 5), float32]) */
}

def @func_6038() -> Tensor[(11, 11, 6), float32] {
  %494 = @func_4736() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %494.0
}

def @func_2730(%var_2729: Tensor[(6, 13, 6), float64]) -> (Tensor[(6, 13, 6), float64],) {
  %497 = fn (%var_2722: Tensor[(6, 13, 6), float64]) -> (Tensor[(6, 13, 6), float64],) {
    %495 = cast(%var_2722, dtype="float64") /* ty=Tensor[(6, 13, 6), float64] */;
    %496 = acosh(%495) /* ty=Tensor[(6, 13, 6), float64] */;
    (%496,)
  };
  %497(%var_2729) /* ty=(Tensor[(6, 13, 6), float64],) */
}

def @func_8498() -> Tensor[(11, 11, 6), float64] {
  @func_8496() /* ty=Tensor[(11, 11, 6), float64] */
}

def @func_6800() -> (Tensor[(6, 1, 5), float64],) {
  %499 = fn () -> (Tensor[(6, 1, 5), float64],) {
    %498 = @func_4949() /* ty=Tensor[(6, 1, 5), float64] */;
    (%498,)
  };
  %499() /* ty=(Tensor[(6, 1, 5), float64],) */
}

def @func_6886() -> (Tensor[(11, 11, 6), bool], Tensor[(6, 1, 5), float64]) {
  %504 = fn () -> (Tensor[(11, 11, 6), bool], Tensor[(6, 1, 5), float64]) {
    %500 = @func_4279() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %501 = @func_6799() /* ty=(Tensor[(6, 1, 5), float64],) */;
    %502 = %500.0;
    %503 = %501.0;
    (%502, %503)
  };
  %504() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(6, 1, 5), float64]) */
}

def @func_6777(%var_6710: Tensor[(720), float64], %var_6729: Tensor[(144), float64], %var_6730: Tensor[(2880), int64], %var_6756: Tensor[(192), float32]) -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64], Tensor[(720), float64], Tensor[(6, 13, 6), float64], Tensor[(144), float64], Tensor[(2880), int64], Tensor[(468), float64], Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(11, 11, 6), float32], Tensor[(4, 14, 4), float64]) {
  %505 = @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %506 = cast(%var_6729, dtype="float64") /* ty=Tensor[(144), float64] */;
  %507 = cast(%var_6730, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %508 = cast(meta[relay.Constant][31] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %509 = reshape(%506, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float64] */;
  %510 = reshape(%507, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %511 = reshape(%508, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %512 = @func_3348(%509, %510, %511) /* ty=(Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) */;
  %513 = cast(%var_6756, dtype="float32") /* ty=Tensor[(192), float32] */;
  %514 = reshape(%513, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
  %515 = @func_4052(%514) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(16, 2, 6), uint16]) */;
  %516 = cast(%var_6710, dtype="float64") /* ty=Tensor[(720), float64] */;
  %517 = reshape(%516, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %518 = @func_5171(%517) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(4, 14, 4), float32], Tensor[(224), float32], Tensor[(720), float64], Tensor[(1, 540), float64], Tensor[(784), float32], Tensor[(120, 4), float32]) */;
  %519 = %518.2;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
  %521 = @func_6682() /* ty=Tensor[(11, 11, 6), float64] */;
  %522 = %505.0;
  %523 = %512.4;
  %524 = %515.1;
  %525 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
  %526 = sin(%520) /* ty=Tensor[(4, 14, 4), float64] */;
  (%521, %522, %var_6710, %523, %var_6729, %var_6730, meta[relay.Constant][31] /* ty=Tensor[(468), float64] */, %524, %var_6756, %525, %526)
}

def @func_4054(%var_4053: Tensor[(16, 2, 6), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(16, 2, 6), uint16]) {
  %539 = fn (%var_4034: Tensor[(16, 2, 6), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(16, 2, 6), uint16]) {
    %527 = cast(meta[relay.Constant][32] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %528 = reshape(%527, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
    %529 = @func_2185(%528) /* ty=Tensor[(16, 2, 6), float32] */;
    %530 = cast(%529, dtype="float32") /* ty=Tensor[(16, 2, 6), float32] */;
    %531 = reshape(%530, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
    %532 = @func_2185(%531) /* ty=Tensor[(16, 2, 6), float32] */;
    %533 = cast(%var_4034, dtype="uint16") /* ty=Tensor[(16, 2, 6), uint16] */;
    %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %535 = cast(%532, dtype="uint16") /* ty=Tensor[(16, 2, 6), uint16] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %537 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
    %538 = multiply(%535, %536) /* ty=Tensor[(16, 2, 6), uint16] */;
    (%537, %529, meta[relay.Constant][32] /* ty=Tensor[(192), float32] */, %538)
  };
  %539(%var_4053) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(16, 2, 6), uint16]) */
}

def @func_698(%var_697: Tensor[(8, 6, 10), float32]) -> Tensor[(8, 6, 10), float32] {
  %541 = fn (%var_688: Tensor[(8, 6, 10), float32]) -> Tensor[(8, 6, 10), float32] {
    %540 = cast(%var_688, dtype="float32") /* ty=Tensor[(8, 6, 10), float32] */;
    rsqrt(%540) /* ty=Tensor[(8, 6, 10), float32] */
  };
  %541(%var_697) /* ty=Tensor[(8, 6, 10), float32] */
}

def @func_4632(%var_4628: Tensor[(54), uint8], %var_4629: Tensor[(1, 192), float32], %var_4630: Tensor[(108, 8), float32], %var_4631: Tensor[(540), float64]) -> (Tensor[(1, 6, 9), float32], Tensor[(54), uint8], Tensor[(16, 2, 6), float32], Tensor[(1, 192), float32], Tensor[(16, 2, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(2016), int32], Tensor[(108, 8), float32], Tensor[(540), float64]) {
  %566 = fn (%var_4585: Tensor[(54), uint8], %var_4597: Tensor[(1, 192), float32], %var_4619: Tensor[(108, 8), float32], %var_4620: Tensor[(540), float64]) -> (Tensor[(1, 6, 9), float32], Tensor[(54), uint8], Tensor[(16, 2, 6), float32], Tensor[(1, 192), float32], Tensor[(16, 2, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(2016), int32], Tensor[(108, 8), float32], Tensor[(540), float64]) {
    %542 = cast(%var_4585, dtype="uint8") /* ty=Tensor[(54), uint8] */;
    %543 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %544 = reshape(%542, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), uint8] */;
    %545 = reshape(%543, newshape=[]) /* ty=int32 */;
    %546 = @func_3006(%544, %545) /* ty=(Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) */;
    %547 = cast(%var_4597, dtype="float32") /* ty=Tensor[(1, 192), float32] */;
    %548 = reshape(%547, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
    %549 = @func_2185(%548) /* ty=Tensor[(16, 2, 6), float32] */;
    %550 = cast(%549, dtype="float32") /* ty=Tensor[(16, 2, 6), float32] */;
    %551 = reshape(%550, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float32] */;
    %552 = @func_4221() /* ty=Tensor[(11, 11, 6), float32] */;
    %553 = cast(-10 /* ty=int32 */, dtype="bool") /* ty=bool */;
    %554 = cast(%552, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
    %555 = cast(%var_4619, dtype="float32") /* ty=Tensor[(108, 8), float32] */;
    %556 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %557 = cast(%var_4620, dtype="float64") /* ty=Tensor[(540), float64] */;
    %558 = reshape(%555, newshape=[6, 16, 9]) /* ty=Tensor[(6, 16, 9), float32] */;
    %559 = reshape(%556, newshape=[]) /* ty=int32 */;
    %560 = reshape(%557, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %561 = @func_3243(%558, %559, %560) /* ty=(Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(6, 16, 9), float32], int32, Tensor[(3, 18), uint8], Tensor[(6, 15, 6), bool], Tensor[(6, 16, 9), float32]) */;
    %562 = %546.1;
    %563 = @func_2185(%551) /* ty=Tensor[(16, 2, 6), float32] */;
    %564 = not_equal(%553, %554) /* ty=Tensor[(11, 11, 6), bool] */;
    %565 = %561.2;
    (%562, %var_4585, %549, %var_4597, %563, %564, %565, %var_4619, %var_4620)
  };
  %566(%var_4628, %var_4629, %var_4630, %var_4631) /* ty=(Tensor[(1, 6, 9), float32], Tensor[(54), uint8], Tensor[(16, 2, 6), float32], Tensor[(1, 192), float32], Tensor[(16, 2, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(2016), int32], Tensor[(108, 8), float32], Tensor[(540), float64]) */
}

def @func_5634() -> (Tensor[(11, 11, 6), float32],) {
  @func_5632() /* ty=(Tensor[(11, 11, 6), float32],) */
}

def @func_5991(%var_5988: Tensor[(72, 2), float64], %var_5989: Tensor[(2880), int64], %var_5990: Tensor[(468), float64]) -> (Tensor[(2880), int64], Tensor[(72, 2), float64], Tensor[(2880), int64], Tensor[(468), float64], Tensor[(14, 2, 7), uint64], Tensor[(2, 12, 6), float64]) {
  @func_5986(%var_5988, %var_5989, %var_5990) /* ty=(Tensor[(2880), int64], Tensor[(72, 2), float64], Tensor[(2880), int64], Tensor[(468), float64], Tensor[(14, 2, 7), uint64], Tensor[(2, 12, 6), float64]) */
}

def @func_6274() -> Tensor[(11, 11, 6), bool] {
  %567 = @func_3583() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %567.0
}

def @func_10037() -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) {
  %568 = @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %569 = @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %570 = %568.0;
  %571 = %569.0;
  (%570, %571)
}

def @func_9537() -> (Tensor[(11, 11, 6), float64],) {
  %572 = @func_7901() /* ty=Tensor[(11, 11, 6), float64] */;
  (%572,)
}

def @func_8357(%var_8355: Tensor[(5, 3, 7), int32], %var_8356: Tensor[(112, 2), float32]) -> (Tensor[(5, 3, 7), float32], Tensor[(14, 8, 2), float32], Tensor[(112, 2), float32], Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(196), float64], Tensor[(11, 11, 6), float32], Tensor[(5, 3, 7), float32]) {
  @func_8353(%var_8355, %var_8356) /* ty=(Tensor[(5, 3, 7), float32], Tensor[(14, 8, 2), float32], Tensor[(112, 2), float32], Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(196), float64], Tensor[(11, 11, 6), float32], Tensor[(5, 3, 7), float32]) */
}

def @func_7394(%var_7392: Tensor[(14, 8, 2), float32]) -> (Tensor[(14, 8, 2), float32],) {
  @func_7391(%var_7392) /* ty=(Tensor[(14, 8, 2), float32],) */
}

def @func_9539() -> (Tensor[(11, 11, 6), float64],) {
  @func_9537() /* ty=(Tensor[(11, 11, 6), float64],) */
}

def @func_9596() -> (Tensor[(11, 11, 6), bool],) {
  @func_9594() /* ty=(Tensor[(11, 11, 6), bool],) */
}

def @func_5059(%var_5057: Tensor[(8, 8, 4), int32], %var_5058: int32) -> (Tensor[(8, 8, 4), int32], Tensor[(12, 12, 14), int32], Tensor[(392), float32], Tensor[(2880), int64], Tensor[(2016), int32], Tensor[(12, 12, 14), int32], int32) {
  %594 = fn (%var_5029: Tensor[(8, 8, 4), int32], %var_5053: int32) -> (Tensor[(8, 8, 4), int32], Tensor[(12, 12, 14), int32], Tensor[(392), float32], Tensor[(2880), int64], Tensor[(2016), int32], Tensor[(12, 12, 14), int32], int32) {
    %573 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 8, 4), int32] */, dtype="int32") /* ty=Tensor[(8, 8, 4), int32] */;
    %574 = shape_of(%var_5029, dtype="int32") /* ty=Tensor[(3), int32] */;
    %575 = cast(%var_5029, dtype="int32") /* ty=Tensor[(8, 8, 4), int32] */;
    %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %577 = cast(meta[relay.Constant][34] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
    %578 = cast(meta[relay.Constant][35] /* ty=Tensor[(2880), int64] */, dtype="int64") /* ty=Tensor[(2880), int64] */;
    %579 = cast(meta[relay.Constant][36] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
    %580 = cast(meta[relay.Constant][34] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
    %581 = reshape(%577, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float32] */;
    %582 = reshape(%578, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
    %583 = reshape(%579, newshape=[2016]) /* ty=Tensor[(2016), int32] */;
    %584 = reshape(%580, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), float32] */;
    %585 = @func_3822(%581, %582, %583, %584) /* ty=(Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(12, 12, 14), int32], Tensor[(54), uint8], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(4, 7, 14), bool], Tensor[(6, 13, 6), float64]) */;
    %586 = cast(%var_5053, dtype="int32") /* ty=int32 */;
    %587 = cast(meta[relay.Constant][36] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
    %588 = reshape(%586, newshape=[]) /* ty=int32 */;
    %589 = reshape(%587, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
    %590 = @func_984(%588, %589) /* ty=(Tensor[(12, 12, 14), int32],) */;
    %591 = bitwise_and(%575, %576) /* ty=Tensor[(8, 8, 4), int32] */;
    %592 = %585.7;
    %593 = %590.0;
    (%591, %592, meta[relay.Constant][34] /* ty=Tensor[(392), float32] */, meta[relay.Constant][35] /* ty=Tensor[(2880), int64] */, meta[relay.Constant][36] /* ty=Tensor[(2016), int32] */, %593, %var_5053)
  };
  %594(%var_5057, %var_5058) /* ty=(Tensor[(8, 8, 4), int32], Tensor[(12, 12, 14), int32], Tensor[(392), float32], Tensor[(2880), int64], Tensor[(2016), int32], Tensor[(12, 12, 14), int32], int32) */
}

def @func_6226() -> Tensor[(11, 11, 6), float32] {
  @func_4221() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_6040() -> Tensor[(11, 11, 6), float32] {
  @func_6038() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_6548() -> (Tensor[(11, 11, 6), float64],) {
  %599 = fn () -> (Tensor[(11, 11, 6), float64],) {
    %595 = @func_5836() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %596 = %595.0;
    %597 = cast(%596, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
    %598 = exp(%597) /* ty=Tensor[(11, 11, 6), float64] */;
    (%598,)
  };
  %599() /* ty=(Tensor[(11, 11, 6), float64],) */
}

def @func_3827(%var_3823: Tensor[(4, 7, 14), float32], %var_3824: Tensor[(2880), int64], %var_3825: Tensor[(2016), int32], %var_3826: Tensor[(4, 7, 14), float32]) -> (Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(12, 12, 14), int32], Tensor[(54), uint8], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(4, 7, 14), bool], Tensor[(6, 13, 6), float64]) {
  %638 = fn (%var_3734: Tensor[(4, 7, 14), float32], %var_3745: Tensor[(2880), int64], %var_3761: Tensor[(2016), int32], %var_3813: Tensor[(4, 7, 14), float32]) -> (Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(12, 12, 14), int32], Tensor[(54), uint8], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(4, 7, 14), bool], Tensor[(6, 13, 6), float64]) {
    %600 = cast(%var_3745, dtype="int64") /* ty=Tensor[(2880), int64] */;
    %601 = cast(%var_3745, dtype="int64") /* ty=Tensor[(2880), int64] */;
    %602 = reshape(%600, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
    %603 = reshape(%601, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
    %604 = @func_2527(%602, %603) /* ty=(Tensor[(12, 16, 15), int64],) */;
    %605 = cast(meta[relay.Constant][37] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %606 = reshape(%605, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float64] */;
    %607 = @func_2728(%606) /* ty=(Tensor[(6, 13, 6), float64],) */;
    %608 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %609 = cast(%var_3761, dtype="int32") /* ty=Tensor[(2016), int32] */;
    %610 = reshape(%608, newshape=[]) /* ty=int32 */;
    %611 = reshape(%609, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
    %612 = @func_984(%610, %611) /* ty=(Tensor[(12, 12, 14), int32],) */;
    %613 = cast(meta[relay.Constant][38] /* ty=Tensor[(54), uint8] */, dtype="uint8") /* ty=Tensor[(54), uint8] */;
    %614 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %615 = reshape(%613, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), uint8] */;
    %616 = reshape(%614, newshape=[]) /* ty=int32 */;
    %617 = @func_3006(%615, %616) /* ty=(Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) */;
    %618 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %619 = @func_3583() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %620 = cast(%var_3734, dtype="float32") /* ty=Tensor[(4, 7, 14), float32] */;
    %621 = rsqrt(%620) /* ty=Tensor[(4, 7, 14), float32] */;
    %622 = cast(%var_3813, dtype="bool") /* ty=Tensor[(4, 7, 14), bool] */;
    %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
    %624 = cast(%621, dtype="bool") /* ty=Tensor[(4, 7, 14), bool] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %626 = %607.0;
    %627 = cast(%626, dtype="float64") /* ty=Tensor[(6, 13, 6), float64] */;
    %628 = reshape(%627, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float64] */;
    %629 = @func_2728(%628) /* ty=(Tensor[(6, 13, 6), float64],) */;
    %630 = %604.0;
    %631 = %612.0;
    %632 = %617.2;
    %633 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
    %634 = %618.0;
    %635 = %619.0;
    %636 = less_equal(%624, %625) /* ty=Tensor[(4, 7, 14), bool] */;
    %637 = %629.0;
    (%630, %var_3745, %626, meta[relay.Constant][37] /* ty=Tensor[(468), float64] */, %631, -4 /* ty=int32 */, %var_3761, %632, meta[relay.Constant][38] /* ty=Tensor[(54), uint8] */, %633, %634, %635, %636, %637)
  };
  %638(%var_3823, %var_3824, %var_3825, %var_3826) /* ty=(Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(12, 12, 14), int32], Tensor[(54), uint8], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), bool], Tensor[(4, 7, 14), bool], Tensor[(6, 13, 6), float64]) */
}

def @func_10039() -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) {
  @func_10037() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) */
}

def @func_9800(%var_9797: Tensor[(64), float64], %var_9798: Tensor[(4, 56), float32], %var_9799: Tensor[(720), float64]) -> (Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64], Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 15, 6), bool], Tensor[(4, 56), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(64), float64]) {
  %669 = fn (%var_9755: Tensor[(64), float64], %var_9778: Tensor[(4, 56), float32], %var_9779: Tensor[(720), float64]) -> (Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64], Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 15, 6), bool], Tensor[(4, 56), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(64), float64]) {
    %639 = @func_8068() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(6, 1, 5), float64]) */;
    %640 = cast(%var_9755, dtype="float64") /* ty=Tensor[(64), float64] */;
    %641 = cast(meta[relay.Constant][39] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
    %642 = reshape(%640, newshape=[64]) /* ty=Tensor[(64), float64] */;
    %643 = reshape(%641, newshape=[832]) /* ty=Tensor[(832), float64] */;
    %644 = @func_8033(%642, %643) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(16, 4, 13), float64], Tensor[(64), float64], Tensor[(832), float64]) */;
    %645 = cast(meta[relay.Constant][40] /* ty=Tensor[(2880), int64] */, dtype="int64") /* ty=Tensor[(2880), int64] */;
    %646 = cast(meta[relay.Constant][40] /* ty=Tensor[(2880), int64] */, dtype="int64") /* ty=Tensor[(2880), int64] */;
    %647 = reshape(%645, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
    %648 = reshape(%646, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
    %649 = @func_2527(%647, %648) /* ty=(Tensor[(12, 16, 15), int64],) */;
    %650 = cast(%var_9778, dtype="float32") /* ty=Tensor[(4, 56), float32] */;
    %651 = cast(%var_9779, dtype="float64") /* ty=Tensor[(720), float64] */;
    %652 = cast(meta[relay.Constant][41] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
    %653 = cast(meta[relay.Constant][42] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
    %654 = cast(meta[relay.Constant][43] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %655 = reshape(%650, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
    %656 = reshape(%651, newshape=[1, 720]) /* ty=Tensor[(1, 720), float64] */;
    %657 = reshape(%652, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %658 = reshape(%653, newshape=[4, 196]) /* ty=Tensor[(4, 196), float32] */;
    %659 = reshape(%654, newshape=[40, 12]) /* ty=Tensor[(40, 12), float32] */;
    %660 = @func_2148(%655, %656, %657, %658, %659) /* ty=(Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) */;
    %661 = cast(%var_9779, dtype="float32") /* ty=Tensor[(720), float32] */;
    %662 = reshape(%661, newshape=[8, 15, 6]) /* ty=Tensor[(8, 15, 6), float32] */;
    %663 = @func_9308(%662) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(8, 15, 6), float64], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64]) */;
    %664 = %639.1;
    %665 = %644.0;
    %666 = %649.0;
    %667 = %660.2;
    %668 = %663.3;
    (%664, %665, %var_9755, meta[relay.Constant][39] /* ty=Tensor[(832), float64] */, %666, meta[relay.Constant][40] /* ty=Tensor[(2880), int64] */, %667, %var_9778, %var_9779, meta[relay.Constant][41] /* ty=Tensor[(540), float64] */, meta[relay.Constant][42] /* ty=Tensor[(784), float32] */, meta[relay.Constant][43] /* ty=Tensor[(480), float32] */, %668)
  };
  %669(%var_9797, %var_9798, %var_9799) /* ty=(Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64], Tensor[(12, 16, 15), int64], Tensor[(2880), int64], Tensor[(6, 15, 6), bool], Tensor[(4, 56), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(64), float64]) */
}

def @func_2530(%var_2528: Tensor[(12, 16, 15), int64], %var_2529: Tensor[(12, 16, 15), int64]) -> (Tensor[(12, 16, 15), int64],) {
  %675 = fn (%var_2516: Tensor[(12, 16, 15), int64], %var_2517: Tensor[(12, 16, 15), int64]) -> (Tensor[(12, 16, 15), int64],) {
    %670 = cast(%var_2517, dtype="int64") /* ty=Tensor[(12, 16, 15), int64] */;
    %671 = shape_of(%var_2516, dtype="int32") /* ty=Tensor[(3), int32] */;
    %672 = cast(%var_2516, dtype="int64") /* ty=Tensor[(12, 16, 15), int64] */;
    %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %674 = logical_xor(%672, %673) /* ty=Tensor[(12, 16, 15), int64] */;
    (%674,)
  };
  %675(%var_2528, %var_2529) /* ty=(Tensor[(12, 16, 15), int64],) */
}

def @func_4856() -> (Tensor[(11, 11, 6), float64],) {
  @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */
}

def @func_5243(%var_5241: Tensor[(14, 14, 11), float64], %var_5242: Tensor[(256), int32]) -> (Tensor[(14, 14, 11), float64], Tensor[(12, 12, 14), int32], Tensor[(256), int32], int32) {
  %684 = fn (%var_5226: Tensor[(14, 14, 11), float64], %var_5231: Tensor[(256), int32]) -> (Tensor[(14, 14, 11), float64], Tensor[(12, 12, 14), int32], Tensor[(256), int32], int32) {
    %676 = cast(%var_5226, dtype="float64") /* ty=Tensor[(14, 14, 11), float64] */;
    %677 = cast(%var_5231, dtype="int32") /* ty=Tensor[(256), int32] */;
    %678 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %679 = reshape(%677, newshape=[8, 8, 4]) /* ty=Tensor[(8, 8, 4), int32] */;
    %680 = reshape(%678, newshape=[]) /* ty=int32 */;
    %681 = @func_5056(%679, %680) /* ty=(Tensor[(8, 8, 4), int32], Tensor[(12, 12, 14), int32], Tensor[(392), float32], Tensor[(2880), int64], Tensor[(2016), int32], Tensor[(12, 12, 14), int32], int32) */;
    %682 = exp(%676) /* ty=Tensor[(14, 14, 11), float64] */;
    %683 = %681.5;
    (%682, %683, %var_5231, -5 /* ty=int32 */)
  };
  %684(%var_5241, %var_5242) /* ty=(Tensor[(14, 14, 11), float64], Tensor[(12, 12, 14), int32], Tensor[(256), int32], int32) */
}

def @func_8087() -> Tensor[(11, 11, 6), float64] {
  @func_8085() /* ty=Tensor[(11, 11, 6), float64] */
}

def @func_7391(%var_7382: Tensor[(14, 8, 2), float32]) -> (Tensor[(14, 8, 2), float32],) {
  %685 = cast(%var_7382, dtype="float32") /* ty=Tensor[(14, 8, 2), float32] */;
  %686 = cos(%685) /* ty=Tensor[(14, 8, 2), float32] */;
  (%686,)
}

def @func_10071() -> Tensor[(11, 11, 6), bool] {
  %687 = @func_3532() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %687.0
}

def @func_10293(%var_10291: Tensor[(720), float64], %var_10292: Tensor[(784), float32]) -> (Tensor[(720), float64], Tensor[(192, 1), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(4, 36), float64], Tensor[(2880), int64], Tensor[(468), float64], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(784), float32]) {
  @func_10289(%var_10291, %var_10292) /* ty=(Tensor[(720), float64], Tensor[(192, 1), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(4, 36), float64], Tensor[(2880), int64], Tensor[(468), float64], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(784), float32]) */
}

def @func_5449() -> Tensor[(11, 11, 6), float32] {
  @func_4756() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_6684() -> Tensor[(11, 11, 6), float64] {
  @func_6682() /* ty=Tensor[(11, 11, 6), float64] */
}

def @func_10494(%var_10492: Tensor[(11, 2, 4), float32]) -> Tensor[(11, 2, 4), float32] {
  @func_10491(%var_10492) /* ty=Tensor[(11, 2, 4), float32] */
}

def @main(%var_10749: Tensor[(12, 14, 8), int64], %var_10755: Tensor[(392), float32]) -> (Tensor[(54), uint8], Tensor[(392), float32], Tensor[(11, 11, 6), float32], Tensor[(12, 14, 8), uint32]) {
  %688 = cast(%var_10755, dtype="float32") /* ty=Tensor[(392), float32] */;
  %689 = reshape(%688, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %690 = @func_4136(%689) /* ty=(Tensor[(11, 11, 6), int32], Tensor[(2016), int32], Tensor[(392), float32], Tensor[(2880), int64], Tensor[(2016), int32], Tensor[(54), uint8]) */;
  %691 = @func_8645() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %692 = cast(%var_10749, dtype="int64") /* ty=Tensor[(12, 14, 8), int64] */;
  %693 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(12, 14, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 14, 8), int64] */, dtype="int64") /* ty=Tensor[(12, 14, 8), int64] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %696 = minimum(%694, %695) /* ty=Tensor[(12, 14, 8), int64] */;
  %697 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 14, 8), int64] */, dtype="uint32") /* ty=Tensor[(12, 14, 8), uint32] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%696, dtype="uint32") /* ty=Tensor[(12, 14, 8), uint32] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %701 = %690.5;
  %702 = %691.0;
  %703 = right_shift(%699, %700) /* ty=Tensor[(12, 14, 8), uint32] */;
  (%701, %var_10755, %702, %703)
}

def @func_3656(%var_3655: Tensor[(11, 11, 6), bool]) -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) {
  %716 = fn (%var_3650: Tensor[(11, 11, 6), bool]) -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) {
    %704 = @func_3583() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %705 = %704.0;
    %706 = cast(meta[relay.Constant][45] /* ty=Tensor[(11, 11, 6), bool] */, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
    %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
    %708 = cast(%705, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
    %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %710 = cast(%var_3650, dtype="float32") /* ty=Tensor[(11, 11, 6), float32] */;
    %711 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(11, 11, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %712 = cast(meta[relay.Constant][45] /* ty=Tensor[(11, 11, 6), bool] */, dtype="float32") /* ty=Tensor[(11, 11, 6), float32] */;
    %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %714 = logical_and(%708, %709) /* ty=Tensor[(11, 11, 6), bool] */;
    %715 = floor_mod(%712, %713) /* ty=Tensor[(11, 11, 6), float32] */;
    (%714, %715)
  };
  %716(%var_3655) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) */
}

def @func_10589() -> (Tensor[(11, 11, 6), float64], Tensor[(720), float64], Tensor[(1, 540), float64], Tensor[(480), float32], Tensor[(5, 5, 9), int32]) {
  @func_10587() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(720), float64], Tensor[(1, 540), float64], Tensor[(480), float32], Tensor[(5, 5, 9), int32]) */
}

def @func_10437() -> (Tensor[(6, 11, 15), int64], Tensor[(11, 11, 6), bool], Tensor[(121, 6), bool], Tensor[(300), float64], Tensor[(11, 11, 6), float32], Tensor[(6, 11, 15), float64]) {
  %717 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 11, 15), int64] */, dtype="int64") /* ty=Tensor[(6, 11, 15), int64] */;
  %718 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(6, 11, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 11, 15), int64] */, dtype="int64") /* ty=Tensor[(6, 11, 15), int64] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %721 = cast(meta[relay.Constant][48] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %722 = reshape(%721, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), float64] */;
  %723 = @func_8915(%722) /* ty=(Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), bool], Tensor[(121, 6), bool], Tensor[(6, 10, 5), float32]) */;
  %724 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 11, 15), int64] */, dtype="uint32") /* ty=Tensor[(6, 11, 15), uint32] */;
  %725 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(6, 11, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 11, 15), int64] */, dtype="uint32") /* ty=Tensor[(6, 11, 15), uint32] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %728 = add(%726, %727) /* ty=Tensor[(6, 11, 15), uint32] */;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(6, 11, 15), float64] */;
  %730 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(6, 11, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 11, 15), int64] */, dtype="float64") /* ty=Tensor[(6, 11, 15), float64] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %733 = right_shift(%719, %720) /* ty=Tensor[(6, 11, 15), int64] */;
  %734 = @func_6113() /* ty=Tensor[(11, 11, 6), bool] */;
  %735 = %723.2;
  %736 = @func_4756() /* ty=Tensor[(11, 11, 6), float32] */;
  %737 = floor_divide(%731, %732) /* ty=Tensor[(6, 11, 15), float64] */;
  (%733, %734, %735, meta[relay.Constant][48] /* ty=Tensor[(300), float64] */, %736, %737)
}

def @func_2425(%var_2423: Tensor[(7, 5, 4), float32]) -> (Tensor[(7, 5, 4), float32],) {
  @func_2422(%var_2423) /* ty=(Tensor[(7, 5, 4), float32],) */
}

def @func_9882(%var_9881: Tensor[(13, 2, 8), float64]) -> (Tensor[(13, 2, 8), float64],) {
  %743 = fn (%var_9871: Tensor[(13, 2, 8), float64]) -> (Tensor[(13, 2, 8), float64],) {
    %738 = cast(%var_9871, dtype="float64") /* ty=Tensor[(13, 2, 8), float64] */;
    %739 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(13, 2, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %740 = cast(meta[relay.Constant][49] /* ty=Tensor[(13, 2, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 8), float64] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %742 = floor_divide(%740, %741) /* ty=Tensor[(13, 2, 8), float64] */;
    (%742,)
  };
  %743(%var_9881) /* ty=(Tensor[(13, 2, 8), float64],) */
}

def @func_6431(%var_6403: Tensor[(11, 11, 6), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(14, 2, 7), float64], Tensor[(196), float64], Tensor[(11, 11, 6), float64]) {
  %744 = @func_5449() /* ty=Tensor[(11, 11, 6), float32] */;
  %745 = cast(%var_6403, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %746 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%744, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %749 = cast(meta[relay.Constant][50] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %750 = reshape(%749, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), float64] */;
  %751 = @func_3990(%750) /* ty=(Tensor[(14, 2, 7), float64],) */;
  %752 = cast(%var_6403, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %753 = less(%747, %748) /* ty=Tensor[(11, 11, 6), bool] */;
  %754 = %751.0;
  %755 = cos(%752) /* ty=Tensor[(11, 11, 6), float64] */;
  (%753, %754, meta[relay.Constant][50] /* ty=Tensor[(196), float64] */, %755)
}

def @func_10301() -> (Tensor[(11, 11, 6), float64],) {
  @func_10299() /* ty=(Tensor[(11, 11, 6), float64],) */
}

def @func_10299() -> (Tensor[(11, 11, 6), float64],) {
  %756 = @func_8085() /* ty=Tensor[(11, 11, 6), float64] */;
  (%756,)
}

def @func_3247(%var_3244: Tensor[(6, 16, 9), float32], %var_3245: int32, %var_3246: Tensor[(540), float64]) -> (Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(6, 16, 9), float32], int32, Tensor[(3, 18), uint8], Tensor[(6, 15, 6), bool], Tensor[(6, 16, 9), float32]) {
  %787 = fn (%var_3175: Tensor[(6, 16, 9), float32], %var_3179: int32, %var_3202: Tensor[(540), float64]) -> (Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(6, 16, 9), float32], int32, Tensor[(3, 18), uint8], Tensor[(6, 15, 6), bool], Tensor[(6, 16, 9), float32]) {
    %757 = cast(%var_3179, dtype="int32") /* ty=int32 */;
    %758 = cast(meta[relay.Constant][51] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
    %759 = reshape(%757, newshape=[]) /* ty=int32 */;
    %760 = reshape(%758, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
    %761 = @func_984(%759, %760) /* ty=(Tensor[(12, 12, 14), int32],) */;
    %762 = cast(%var_3202, dtype="float64") /* ty=Tensor[(540), float64] */;
    %763 = cast(%var_3202, dtype="float64") /* ty=Tensor[(540), float64] */;
    %764 = reshape(%762, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
    %765 = reshape(%763, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
    %766 = @func_1168(%764, %765) /* ty=(Tensor[(6, 15, 6), bool],) */;
    %767 = cast(%var_3175, dtype="float32") /* ty=Tensor[(6, 16, 9), float32] */;
    %768 = log2(%767) /* ty=Tensor[(6, 16, 9), float32] */;
    %769 = cast(%768, dtype="float32") /* ty=Tensor[(6, 16, 9), float32] */;
    %770 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 18), uint8] */, dtype="uint8") /* ty=Tensor[(3, 18), uint8] */;
    %771 = cast(%var_3179, dtype="int32") /* ty=int32 */;
    %772 = reshape(%770, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), uint8] */;
    %773 = reshape(%771, newshape=[]) /* ty=int32 */;
    %774 = @func_3006(%772, %773) /* ty=(Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) */;
    %775 = %766.0;
    %776 = cast(%775, dtype="float64") /* ty=Tensor[(6, 15, 6), float64] */;
    %777 = cast(%var_3202, dtype="float64") /* ty=Tensor[(540), float64] */;
    %778 = reshape(%776, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
    %779 = reshape(%777, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
    %780 = @func_1168(%778, %779) /* ty=(Tensor[(6, 15, 6), bool],) */;
    %781 = cast(%768, dtype="float32") /* ty=Tensor[(6, 16, 9), float32] */;
    %782 = %761.0;
    %783 = sinh(%769) /* ty=Tensor[(6, 16, 9), float32] */;
    %784 = %774.3;
    %785 = %780.0;
    %786 = cos(%781) /* ty=Tensor[(6, 16, 9), float32] */;
    (%782, %var_3179, meta[relay.Constant][51] /* ty=Tensor[(2016), int32] */, %775, %var_3202, %783, %784, meta[relay.Constant][52] /* ty=Tensor[(3, 18), uint8] */, %785, %786)
  };
  %787(%var_3244, %var_3245, %var_3246) /* ty=(Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(6, 16, 9), float32], int32, Tensor[(3, 18), uint8], Tensor[(6, 15, 6), bool], Tensor[(6, 16, 9), float32]) */
}

def @func_9103() -> (Tensor[(11, 11, 6), float32],) {
  %790 = fn () -> (Tensor[(11, 11, 6), float32],) {
    %788 = @func_8643() /* ty=(Tensor[(11, 11, 6), float32],) */;
    %789 = %788.0;
    (%789,)
  };
  %790() /* ty=(Tensor[(11, 11, 6), float32],) */
}

def @func_8645() -> (Tensor[(11, 11, 6), float32],) {
  @func_8643() /* ty=(Tensor[(11, 11, 6), float32],) */
}

def @func_7675(%var_7674: Tensor[(14, 2, 8), float32]) -> (Tensor[(14, 2, 8), float32], Tensor[(11, 11, 6), bool], Tensor[(360, 2), float64]) {
  %797 = fn (%var_7659: Tensor[(14, 2, 8), float32]) -> (Tensor[(14, 2, 8), float32], Tensor[(11, 11, 6), bool], Tensor[(360, 2), float64]) {
    %791 = cast(%var_7659, dtype="float32") /* ty=Tensor[(14, 2, 8), float32] */;
    %792 = cast(meta[relay.Constant][53] /* ty=Tensor[(360, 2), float64] */, dtype="float64") /* ty=Tensor[(360, 2), float64] */;
    %793 = reshape(%792, newshape=[720]) /* ty=Tensor[(720), float64] */;
    %794 = @func_3862(%793) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(4, 12, 15), bool], Tensor[(720), float64]) */;
    %795 = asinh(%791) /* ty=Tensor[(14, 2, 8), float32] */;
    %796 = %794.0;
    (%795, %796, meta[relay.Constant][53] /* ty=Tensor[(360, 2), float64] */)
  };
  %797(%var_7674) /* ty=(Tensor[(14, 2, 8), float32], Tensor[(11, 11, 6), bool], Tensor[(360, 2), float64]) */
}

def @func_9900() -> Tensor[(11, 11, 6), float64] {
  %799 = fn () -> Tensor[(11, 11, 6), float64] {
    %798 = @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */;
    %798.0
  };
  %799() /* ty=Tensor[(11, 11, 6), float64] */
}

def @func_5898(%var_5875: Tensor[(480), float32]) -> (Tensor[(11, 11, 6), float32], Tensor[(720), float64], Tensor[(192), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32]) {
  %800 = @func_4683() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(1, 196), float64]) */;
  %801 = cast(meta[relay.Constant][54] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %802 = cast(meta[relay.Constant][55] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %803 = cast(meta[relay.Constant][56] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %804 = cast(meta[relay.Constant][57] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %805 = cast(%var_5875, dtype="float32") /* ty=Tensor[(480), float32] */;
  %806 = reshape(%801, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %807 = reshape(%802, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %808 = reshape(%803, newshape=[9, 60]) /* ty=Tensor[(9, 60), float64] */;
  %809 = reshape(%804, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %810 = reshape(%805, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %811 = @func_4556(%806, %807, %808, %809, %810) /* ty=(Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(6, 15, 6), bool], Tensor[(224), float32], Tensor[(720), float64], Tensor[(9, 60), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), bool]) */;
  %812 = %800.0;
  %813 = %811.4;
  (%812, %813, meta[relay.Constant][54] /* ty=Tensor[(192), float32] */, meta[relay.Constant][55] /* ty=Tensor[(720), float64] */, meta[relay.Constant][56] /* ty=Tensor[(540), float64] */, meta[relay.Constant][57] /* ty=Tensor[(784), float32] */, %var_5875)
}

def @func_4136(%var_4134: Tensor[(392), float32]) -> (Tensor[(11, 11, 6), int32], Tensor[(2016), int32], Tensor[(392), float32], Tensor[(2880), int64], Tensor[(2016), int32], Tensor[(54), uint8]) {
  @func_4133(%var_4134) /* ty=(Tensor[(11, 11, 6), int32], Tensor[(2016), int32], Tensor[(392), float32], Tensor[(2880), int64], Tensor[(2016), int32], Tensor[(54), uint8]) */
}

def @func_4935() -> Tensor[(11, 11, 6), float64] {
  %814 = @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %814.0
}

def @func_6203(%var_6199: Tensor[(11, 14, 13), uint8], %var_6200: Tensor[(11, 14, 13), uint8], %var_6201: int32, %var_6202: Tensor[(256), int32]) -> (Tensor[(11, 14, 13), uint8], Tensor[(12, 12, 14), int32], Tensor[(27, 2), uint8], int32, Tensor[(11, 11, 6), float64], Tensor[(256), int32], Tensor[(2156), float64], Tensor[(256), int32], Tensor[(11, 11, 6), bool]) {
  @func_6197(%var_6199, %var_6200, %var_6201, %var_6202) /* ty=(Tensor[(11, 14, 13), uint8], Tensor[(12, 12, 14), int32], Tensor[(27, 2), uint8], int32, Tensor[(11, 11, 6), float64], Tensor[(256), int32], Tensor[(2156), float64], Tensor[(256), int32], Tensor[(11, 11, 6), bool]) */
}

def @func_984(%var_977: int32, %var_978: Tensor[(12, 12, 14), int32]) -> (Tensor[(12, 12, 14), int32],) {
  %815 = cast(%var_977, dtype="int32") /* ty=int32 */;
  %816 = cast(%var_978, dtype="int32") /* ty=Tensor[(12, 12, 14), int32] */;
  %817 = multiply(%815, %816) /* ty=Tensor[(12, 12, 14), int32] */;
  (%817,)
}

def @func_3010(%var_3008: Tensor[(1, 6, 9), uint8], %var_3009: int32) -> (Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) {
  @func_3006(%var_3008, %var_3009) /* ty=(Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) */
}

def @func_7880() -> Tensor[(6, 1, 5), float64] {
  %818 = @func_7501() /* ty=(Tensor[(11, 11, 6), float32], Tensor[(6, 1, 5), float64]) */;
  %818.1
}

def @func_5632() -> (Tensor[(11, 11, 6), float32],) {
  %819 = @func_5115() /* ty=Tensor[(11, 11, 6), float32] */;
  (%819,)
}

def @func_5673() -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32]) {
  %820 = @func_4380() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) */;
  %821 = @func_4279() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %822 = @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %823 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
  %824 = %820.0;
  %825 = %821.0;
  %826 = %822.0;
  %827 = %823.0;
  (%824, %825, %826, %827)
}

def @func_7902() -> Tensor[(11, 11, 6), float64] {
  %829 = fn () -> Tensor[(11, 11, 6), float64] {
    %828 = @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */;
    %828.0
  };
  %829() /* ty=Tensor[(11, 11, 6), float64] */
}

def @func_9594() -> (Tensor[(11, 11, 6), bool],) {
  %830 = @func_6990() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64]) */;
  %831 = %830.0;
  (%831,)
}

def @func_7814(%var_7810: Tensor[(27, 2), uint8], %var_7811: Tensor[(192), float32], %var_7812: Tensor[(216, 4), float32], %var_7813: Tensor[(9, 60), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(2016), int32], Tensor[(27, 2), uint8], Tensor[(192), float32], Tensor[(216, 4), float32], Tensor[(9, 60), float64], Tensor[(784), float32], Tensor[(784), float32]) {
  @func_7808(%var_7810, %var_7811, %var_7812, %var_7813) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(2016), int32], Tensor[(27, 2), uint8], Tensor[(192), float32], Tensor[(216, 4), float32], Tensor[(9, 60), float64], Tensor[(784), float32], Tensor[(784), float32]) */
}

def @func_9163(%var_9161: Tensor[(8, 9, 8), float64]) -> Tensor[(8, 9, 8), float64] {
  @func_9160(%var_9161) /* ty=Tensor[(8, 9, 8), float64] */
}

def @func_7034() -> (Tensor[(11, 11, 6), float32],) {
  @func_7032() /* ty=(Tensor[(11, 11, 6), float32],) */
}

def @func_8037(%var_8035: Tensor[(64), float64], %var_8036: Tensor[(832), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(16, 4, 13), float64], Tensor[(64), float64], Tensor[(832), float64]) {
  @func_8033(%var_8035, %var_8036) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(16, 4, 13), float64], Tensor[(64), float64], Tensor[(832), float64]) */
}

def @func_1719(%var_1717: Tensor[(4, 12, 15), float64], %var_1718: Tensor[(4, 12, 15), float64]) -> Tensor[(4, 12, 15), bool] {
  @func_1715(%var_1717, %var_1718) /* ty=Tensor[(4, 12, 15), bool] */
}

def @func_9160(%var_9147: Tensor[(8, 9, 8), float64]) -> Tensor[(8, 9, 8), float64] {
  %832 = cast(%var_9147, dtype="float64") /* ty=Tensor[(8, 9, 8), float64] */;
  erf(%832) /* ty=Tensor[(8, 9, 8), float64] */
}

def @func_7480(%var_7478: int32, %var_7479: Tensor[(2016), int32]) -> (Tensor[(11, 11, 6), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32]) {
  @func_7476(%var_7478, %var_7479) /* ty=(Tensor[(11, 11, 6), float64], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32]) */
}

def @func_4221() -> Tensor[(11, 11, 6), float32] {
  %833 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
  %834 = cast(%833, dtype="float32") /* ty=Tensor[(11, 11, 6), float32] */;
  sqrt(%834) /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_6942(%var_6941: Tensor[(6, 2, 5), float64]) -> (Tensor[(6, 2, 5), bool], Tensor[(11, 11, 6), bool], Tensor[(8, 98), float32]) {
  %844 = fn (%var_6929: Tensor[(6, 2, 5), float64]) -> (Tensor[(6, 2, 5), bool], Tensor[(11, 11, 6), bool], Tensor[(8, 98), float32]) {
    %835 = @func_6885() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(6, 1, 5), float64]) */;
    %836 = %835.1;
    %837 = cast(%836, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
    %838 = cast(%var_6929, dtype="bool") /* ty=Tensor[(6, 2, 5), bool] */;
    %839 = cast(meta[relay.Constant][58] /* ty=Tensor[(8, 98), float32] */, dtype="float32") /* ty=Tensor[(8, 98), float32] */;
    %840 = reshape(%839, newshape=[784]) /* ty=Tensor[(784), float32] */;
    %841 = @func_4254(%840) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) */;
    %842 = equal(%837, %838) /* ty=Tensor[(6, 2, 5), bool] */;
    %843 = %841.0;
    (%842, %843, meta[relay.Constant][58] /* ty=Tensor[(8, 98), float32] */)
  };
  %844(%var_6941) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(11, 11, 6), bool], Tensor[(8, 98), float32]) */
}

def @func_7280(%var_7278: Tensor[(196), float64]) -> (Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), int16], Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(196), float64]) {
  @func_7277(%var_7278) /* ty=(Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), int16], Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(196), float64]) */
}

def @func_4257(%var_4255: Tensor[(784), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) {
  @func_4254(%var_4255) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) */
}

def @func_5543(%var_5542: Tensor[(1, 140), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(7, 5, 4), float32], Tensor[(1, 140), float32]) {
  %856 = fn (%var_5538: Tensor[(1, 140), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(7, 5, 4), float32], Tensor[(1, 140), float32]) {
    %845 = @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */;
    %846 = %845.0;
    %847 = cast(meta[relay.Constant][59] /* ty=Tensor[(11, 11, 6), float64] */, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
    %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
    %849 = cast(%846, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
    %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %851 = cast(%var_5538, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
    %852 = reshape(%851, newshape=[7, 5, 4]) /* ty=Tensor[(7, 5, 4), float32] */;
    %853 = @func_2422(%852) /* ty=(Tensor[(7, 5, 4), float32],) */;
    %854 = greater_equal(%849, %850) /* ty=Tensor[(11, 11, 6), bool] */;
    %855 = %853.0;
    (%854, %855, %var_5538)
  };
  %856(%var_5542) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 5, 4), float32], Tensor[(1, 140), float32]) */
}

def @func_2154(%var_2149: Tensor[(4, 14, 4), float32], %var_2150: Tensor[(1, 720), float64], %var_2151: Tensor[(540), float64], %var_2152: Tensor[(4, 196), float32], %var_2153: Tensor[(40, 12), float32]) -> (Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) {
  %901 = fn (%var_2073: Tensor[(4, 14, 4), float32], %var_2077: Tensor[(1, 720), float64], %var_2085: Tensor[(540), float64], %var_2101: Tensor[(4, 196), float32], %var_2117: Tensor[(40, 12), float32]) -> (Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) {
    %857 = cast(%var_2077, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
    %858 = cast(%var_2077, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
    %859 = reshape(%857, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
    %860 = reshape(%858, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
    %861 = cast(%var_2085, dtype="float64") /* ty=Tensor[(540), float64] */;
    %862 = cast(%var_2085, dtype="float64") /* ty=Tensor[(540), float64] */;
    %863 = reshape(%861, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
    %864 = reshape(%862, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
    %865 = @func_1168(%863, %864) /* ty=(Tensor[(6, 15, 6), bool],) */;
    %866 = cast(%var_2073, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
    %867 = cosh(%866) /* ty=Tensor[(4, 14, 4), float32] */;
    %868 = cast(%var_2073, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
    %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
    %870 = cast(%867, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
    %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %872 = cast(%var_2101, dtype="float32") /* ty=Tensor[(4, 196), float32] */;
    %873 = cast(%var_2101, dtype="float32") /* ty=Tensor[(4, 196), float32] */;
    %874 = reshape(%872, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
    %875 = reshape(%873, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
    %876 = cast(%var_2117, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
    %877 = reshape(%876, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), float32] */;
    %878 = %865.0;
    %879 = cast(%878, dtype="float64") /* ty=Tensor[(6, 15, 6), float64] */;
    %880 = cast(%878, dtype="float64") /* ty=Tensor[(6, 15, 6), float64] */;
    %881 = reshape(%879, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
    %882 = reshape(%880, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), float64] */;
    %883 = @func_1168(%881, %882) /* ty=(Tensor[(6, 15, 6), bool],) */;
    %884 = @func_861(%874, %875) /* ty=Tensor[(7, 7, 16), float32] */;
    %885 = cast(%884, dtype="float32") /* ty=Tensor[(7, 7, 16), float32] */;
    %886 = cast(%884, dtype="float32") /* ty=Tensor[(7, 7, 16), float32] */;
    %887 = reshape(%885, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
    %888 = reshape(%886, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), float32] */;
    %889 = cast(%867, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
    %890 = atanh(%889) /* ty=Tensor[(4, 14, 4), float32] */;
    %891 = cast(%867, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
    %892 = shape_of(%890, dtype="int32") /* ty=Tensor[(3), int32] */;
    %893 = cast(%890, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
    %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %895 = @func_1715(%859, %860) /* ty=Tensor[(4, 12, 15), bool] */;
    %896 = mod(%870, %871) /* ty=Tensor[(4, 14, 4), float32] */;
    %897 = @func_696(%877) /* ty=Tensor[(8, 6, 10), float32] */;
    %898 = %883.0;
    %899 = @func_861(%887, %888) /* ty=Tensor[(7, 7, 16), float32] */;
    %900 = power(%893, %894) /* ty=Tensor[(4, 14, 4), float64] */;
    (%895, %var_2077, %878, %var_2085, %896, %884, %var_2101, %897, %var_2117, %898, %899, %900)
  };
  %901(%var_2149, %var_2150, %var_2151, %var_2152, %var_2153) /* ty=(Tensor[(4, 12, 15), bool], Tensor[(1, 720), float64], Tensor[(6, 15, 6), bool], Tensor[(540), float64], Tensor[(4, 14, 4), float32], Tensor[(7, 7, 16), float32], Tensor[(4, 196), float32], Tensor[(8, 6, 10), float32], Tensor[(40, 12), float32], Tensor[(6, 15, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(4, 14, 4), float64]) */
}

def @func_4405() -> (Tensor[(11, 11, 6), float32], int32, Tensor[(54), uint8], int32) {
  %909 = fn () -> (Tensor[(11, 11, 6), float32], int32, Tensor[(54), uint8], int32) {
    %902 = cast(meta[relay.Constant][60] /* ty=Tensor[(54), uint8] */, dtype="uint8") /* ty=Tensor[(54), uint8] */;
    %903 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %904 = reshape(%902, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), uint8] */;
    %905 = reshape(%903, newshape=[]) /* ty=int32 */;
    %906 = @func_3006(%904, %905) /* ty=(Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) */;
    %907 = @func_4221() /* ty=Tensor[(11, 11, 6), float32] */;
    %908 = %906.3;
    (%907, %908, meta[relay.Constant][60] /* ty=Tensor[(54), uint8] */, 9 /* ty=int32 */)
  };
  %909() /* ty=(Tensor[(11, 11, 6), float32], int32, Tensor[(54), uint8], int32) */
}

def @func_7808(%var_7789: Tensor[(27, 2), uint8], %var_7790: Tensor[(192), float32], %var_7791: Tensor[(216, 4), float32], %var_7792: Tensor[(9, 60), float64]) -> (Tensor[(11, 11, 6), float32], Tensor[(2016), int32], Tensor[(27, 2), uint8], Tensor[(192), float32], Tensor[(216, 4), float32], Tensor[(9, 60), float64], Tensor[(784), float32], Tensor[(784), float32]) {
  %910 = @func_4404() /* ty=(Tensor[(11, 11, 6), float32], int32, Tensor[(54), uint8], int32) */;
  %911 = cast(%var_7789, dtype="uint8") /* ty=Tensor[(27, 2), uint8] */;
  %912 = cast(%var_7790, dtype="float32") /* ty=Tensor[(192), float32] */;
  %913 = cast(%var_7791, dtype="float32") /* ty=Tensor[(216, 4), float32] */;
  %914 = cast(%var_7792, dtype="float64") /* ty=Tensor[(9, 60), float64] */;
  %915 = reshape(%911, newshape=[54]) /* ty=Tensor[(54), uint8] */;
  %916 = reshape(%912, newshape=[1, 192]) /* ty=Tensor[(1, 192), float32] */;
  %917 = reshape(%913, newshape=[108, 8]) /* ty=Tensor[(108, 8), float32] */;
  %918 = reshape(%914, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %919 = @func_4627(%915, %916, %917, %918) /* ty=(Tensor[(1, 6, 9), float32], Tensor[(54), uint8], Tensor[(16, 2, 6), float32], Tensor[(1, 192), float32], Tensor[(16, 2, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(2016), int32], Tensor[(108, 8), float32], Tensor[(540), float64]) */;
  %920 = cast(meta[relay.Constant][61] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %921 = reshape(%920, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %922 = @func_7148(%921) /* ty=(Tensor[(2, 15, 12), float64], Tensor[(12, 16, 15), int64], Tensor[(8, 360), int64], Tensor[(784), float32], Tensor[(784), float32]) */;
  %923 = %910.0;
  %924 = %919.6;
  %925 = %922.3;
  (%923, %924, %var_7789, %var_7790, %var_7791, %var_7792, %925, meta[relay.Constant][61] /* ty=Tensor[(784), float32] */)
}

def @func_8227(%var_8224: Tensor[(11, 5, 15), uint64], %var_8225: Tensor[(11, 5, 15), uint64], %var_8226: Tensor[(784), float32]) -> (Tensor[(11, 5, 15), bool], Tensor[(4, 196), float32], Tensor[(1, 224), float32], Tensor[(720), float64], Tensor[(540, 1), float64], Tensor[(784), float32], Tensor[(480), float32]) {
  @func_8222(%var_8224, %var_8225, %var_8226) /* ty=(Tensor[(11, 5, 15), bool], Tensor[(4, 196), float32], Tensor[(1, 224), float32], Tensor[(720), float64], Tensor[(540, 1), float64], Tensor[(784), float32], Tensor[(480), float32]) */
}

def @func_10023() -> Tensor[(11, 11, 6), float32] {
  %926 = fn () -> Tensor[(11, 11, 6), float32] {
    @func_6038() /* ty=Tensor[(11, 11, 6), float32] */
  };
  %926() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_5451() -> Tensor[(11, 11, 6), float32] {
  @func_5449() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_8669() -> (Tensor[(11, 11, 6), int64],) {
  %927 = @func_8417() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), int64]) */;
  %928 = %927.2;
  (%928,)
}

def @func_6990() -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64]) {
  %929 = @func_4854() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %930 = @func_6274() /* ty=Tensor[(11, 11, 6), bool] */;
  %931 = %929.0;
  (%930, %931)
}

def @func_1715(%var_1663: Tensor[(4, 12, 15), float64], %var_1709: Tensor[(4, 12, 15), float64]) -> Tensor[(4, 12, 15), bool] {
  %932 = cast(%var_1663, dtype="float64") /* ty=Tensor[(4, 12, 15), float64] */;
  %933 = log2(%932) /* ty=Tensor[(4, 12, 15), float64] */;
  %934 = cast(%var_1709, dtype="bool") /* ty=Tensor[(4, 12, 15), bool] */;
  %935 = shape_of(%933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(%933, dtype="bool") /* ty=Tensor[(4, 12, 15), bool] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%936, %937) /* ty=Tensor[(4, 12, 15), bool] */
}

def @func_2188(%var_2186: Tensor[(16, 2, 6), float32]) -> Tensor[(16, 2, 6), float32] {
  @func_2185(%var_2186) /* ty=Tensor[(16, 2, 6), float32] */
}

def @func_8068() -> (Tensor[(11, 11, 6), float32], Tensor[(6, 1, 5), float64]) {
  %938 = @func_6799() /* ty=(Tensor[(6, 1, 5), float64],) */;
  %939 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
  %940 = %938.0;
  (%939, %940)
}

def @func_1172(%var_1170: Tensor[(6, 15, 6), float64], %var_1171: Tensor[(6, 15, 6), float64]) -> (Tensor[(6, 15, 6), bool],) {
  @func_1168(%var_1170, %var_1171) /* ty=(Tensor[(6, 15, 6), bool],) */
}

def @func_8130() -> (Tensor[(11, 11, 6), float64],) {
  %943 = fn () -> (Tensor[(11, 11, 6), float64],) {
    %941 = @func_6547() /* ty=(Tensor[(11, 11, 6), float64],) */;
    %942 = %941.0;
    (%942,)
  };
  %943() /* ty=(Tensor[(11, 11, 6), float64],) */
}

def @func_7032() -> (Tensor[(11, 11, 6), float32],) {
  %944 = @func_4896() /* ty=Tensor[(11, 11, 6), float32] */;
  (%944,)
}

def @func_9198() -> (Tensor[(6, 1, 5), float64], Tensor[(12, 16, 15), int64], Tensor[(1, 2880), int64]) {
  @func_9196() /* ty=(Tensor[(6, 1, 5), float64], Tensor[(12, 16, 15), int64], Tensor[(1, 2880), int64]) */
}

def @func_10289(%var_10256: Tensor[(720), float64], %var_10258: Tensor[(784), float32]) -> (Tensor[(720), float64], Tensor[(192, 1), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(4, 36), float64], Tensor[(2880), int64], Tensor[(468), float64], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(784), float32]) {
  %945 = cast(meta[relay.Constant][62] /* ty=Tensor[(192, 1), float32] */, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %946 = cast(%var_10256, dtype="float64") /* ty=Tensor[(720), float64] */;
  %947 = cast(meta[relay.Constant][63] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %948 = cast(%var_10258, dtype="float32") /* ty=Tensor[(784), float32] */;
  %949 = cast(meta[relay.Constant][64] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %950 = reshape(%945, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %951 = reshape(%946, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %952 = reshape(%947, newshape=[9, 60]) /* ty=Tensor[(9, 60), float64] */;
  %953 = reshape(%948, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %954 = reshape(%949, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %955 = @func_4556(%950, %951, %952, %953, %954) /* ty=(Tensor[(16, 2, 6), float32], Tensor[(192), float32], Tensor[(6, 15, 6), bool], Tensor[(224), float32], Tensor[(720), float64], Tensor[(9, 60), float64], Tensor[(784), float32], Tensor[(480), float32], Tensor[(11, 11, 6), bool]) */;
  %956 = cast(meta[relay.Constant][65] /* ty=Tensor[(4, 36), float64] */, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %957 = cast(meta[relay.Constant][66] /* ty=Tensor[(2880), int64] */, dtype="int64") /* ty=Tensor[(2880), int64] */;
  %958 = cast(meta[relay.Constant][67] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %959 = reshape(%956, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float64] */;
  %960 = reshape(%957, newshape=[2880]) /* ty=Tensor[(2880), int64] */;
  %961 = reshape(%958, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %962 = @func_3348(%959, %960, %961) /* ty=(Tensor[(2, 12, 6), float64], Tensor[(2880), int64], Tensor[(12, 16, 15), int64], Tensor[(2, 12, 6), float32], Tensor[(6, 13, 6), float64], Tensor[(468), float64], Tensor[(12, 16, 15), float32]) */;
  %963 = @func_6990() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64]) */;
  %964 = %963.0;
  %965 = cast(%964, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %966 = asin(%965) /* ty=Tensor[(11, 11, 6), float64] */;
  %967 = cast(%966, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %968 = cast(%var_10258, dtype="float32") /* ty=Tensor[(784), float32] */;
  %969 = reshape(%968, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %970 = @func_7148(%969) /* ty=(Tensor[(2, 15, 12), float64], Tensor[(12, 16, 15), int64], Tensor[(8, 360), int64], Tensor[(784), float32], Tensor[(784), float32]) */;
  %971 = %955.4;
  %972 = @func_4221() /* ty=Tensor[(11, 11, 6), float32] */;
  %973 = %962.4;
  %974 = cosh(%967) /* ty=Tensor[(11, 11, 6), float64] */;
  %975 = @func_10071() /* ty=Tensor[(11, 11, 6), bool] */;
  %976 = %970.3;
  (%971, meta[relay.Constant][62] /* ty=Tensor[(192, 1), float32] */, %var_10256, meta[relay.Constant][63] /* ty=Tensor[(540), float64] */, %var_10258, meta[relay.Constant][64] /* ty=Tensor[(480), float32] */, %972, %973, meta[relay.Constant][65] /* ty=Tensor[(4, 36), float64] */, meta[relay.Constant][66] /* ty=Tensor[(2880), int64] */, meta[relay.Constant][67] /* ty=Tensor[(468), float64] */, %974, %975, %976)
}

def @func_4950() -> Tensor[(6, 1, 5), float64] {
  %979 = fn () -> Tensor[(6, 1, 5), float64] {
    %977 = cast(-2.93554f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %978 = cast(meta[relay.Constant][68] /* ty=Tensor[(6, 1, 5), float64] */, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
    power(%977, %978) /* ty=Tensor[(6, 1, 5), float64] */
  };
  %979() /* ty=Tensor[(6, 1, 5), float64] */
}

def @func_3006(%var_2963: Tensor[(1, 6, 9), uint8], %var_2978: int32) -> (Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) {
  %980 = cast(%var_2963, dtype="uint8") /* ty=Tensor[(1, 6, 9), uint8] */;
  %981 = cast(meta[relay.Constant][69] /* ty=Tensor[(11, 6, 9), uint8] */, dtype="uint8") /* ty=Tensor[(11, 6, 9), uint8] */;
  %982 = cast(%var_2963, dtype="float32") /* ty=Tensor[(1, 6, 9), float32] */;
  %983 = cast(%var_2978, dtype="int32") /* ty=int32 */;
  %984 = cast(meta[relay.Constant][70] /* ty=Tensor[(2016), int32] */, dtype="int32") /* ty=Tensor[(2016), int32] */;
  %985 = reshape(%983, newshape=[]) /* ty=int32 */;
  %986 = reshape(%984, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
  %987 = @func_984(%985, %986) /* ty=(Tensor[(12, 12, 14), int32],) */;
  %988 = cast(meta[relay.Constant][71] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %989 = reshape(%988, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), float32] */;
  %990 = logical_xor(%980, %981) /* ty=Tensor[(11, 6, 9), uint8] */;
  %991 = cosh(%982) /* ty=Tensor[(1, 6, 9), float32] */;
  %992 = %987.0;
  %993 = @func_696(%989) /* ty=Tensor[(8, 6, 10), float32] */;
  (%990, %991, %992, %var_2978, meta[relay.Constant][70] /* ty=Tensor[(2016), int32] */, %993, meta[relay.Constant][71] /* ty=Tensor[(480), float32] */)
}

def @func_7151(%var_7149: Tensor[(784), float32]) -> (Tensor[(2, 15, 12), float64], Tensor[(12, 16, 15), int64], Tensor[(8, 360), int64], Tensor[(784), float32], Tensor[(784), float32]) {
  @func_7148(%var_7149) /* ty=(Tensor[(2, 15, 12), float64], Tensor[(12, 16, 15), int64], Tensor[(8, 360), int64], Tensor[(784), float32], Tensor[(784), float32]) */
}

def @func_5607(%var_5606: Tensor[(6, 1, 5), float64]) -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32], Tensor[(720), float64], Tensor[(11, 11, 6), bool], Tensor[(6, ?, 5), float32]) {
  %1019 = fn (%var_5582: Tensor[(6, 1, 5), float64]) -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32], Tensor[(720), float64], Tensor[(11, 11, 6), bool], Tensor[(6, ?, 5), float32]) {
    %994 = @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */;
    %995 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
    %996 = %995.0;
    %997 = cast(%996, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
    %998 = reshape(%997, newshape=[11, 11, 6]) /* ty=Tensor[(11, 11, 6), bool] */;
    %999 = @func_3654(%998) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32]) */;
    %1000 = cast(meta[relay.Constant][72] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %1001 = reshape(%1000, newshape=[720]) /* ty=Tensor[(720), float64] */;
    %1002 = @func_5171(%1001) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(4, 14, 4), float32], Tensor[(224), float32], Tensor[(720), float64], Tensor[(1, 540), float64], Tensor[(784), float32], Tensor[(120, 4), float32]) */;
    %1003 = @func_4279() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %1004 = @func_4949() /* ty=Tensor[(6, 1, 5), float64] */;
    %1005 = cast(%var_5582, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
    %1006 = shape_of(%1004, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1007 = cast(%1004, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
    %1008 = dyn.reshape(%1005, %1006, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1009 = less(%1007, %1008) /* ty=Tensor[(6, ?, 5), bool] */;
    %1010 = cast(%1009, dtype="float32") /* ty=Tensor[(6, ?, 5), float32] */;
    %1011 = shape_of(%var_5582, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1012 = cast(%var_5582, dtype="float32") /* ty=Tensor[(6, 1, 5), float32] */;
    %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1014 = %994.0;
    %1015 = %999.0;
    %1016 = %1002.0;
    %1017 = %1003.0;
    %1018 = subtract(%1012, %1013) /* ty=Tensor[(6, ?, 5), float32] */;
    (%1014, %996, %1015, %1016, meta[relay.Constant][72] /* ty=Tensor[(720), float64] */, %1017, %1018)
  };
  %1019(%var_5606) /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float32], Tensor[(720), float64], Tensor[(11, 11, 6), bool], Tensor[(6, ?, 5), float32]) */
}

def @func_9358(%var_9357: Tensor[(3, 8, 8), float64]) -> (Tensor[(3, 8, 8), float64], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32]) {
  %1027 = fn (%var_9314: Tensor[(3, 8, 8), float64]) -> (Tensor[(3, 8, 8), float64], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32]) {
    %1020 = cast(%var_9314, dtype="float64") /* ty=Tensor[(3, 8, 8), float64] */;
    %1021 = @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */;
    %1022 = @func_4380() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) */;
    %1023 = atanh(%1020) /* ty=Tensor[(3, 8, 8), float64] */;
    %1024 = %1021.0;
    %1025 = %1022.0;
    %1026 = @func_4756() /* ty=Tensor[(11, 11, 6), float32] */;
    (%1023, %1024, %1025, %1026)
  };
  %1027(%var_9357) /* ty=(Tensor[(3, 8, 8), float64], Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32]) */
}

def @func_6113() -> Tensor[(11, 11, 6), bool] {
  %1028 = @func_3583() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %1028.0
}

def @func_3533() -> (Tensor[(11, 11, 6), bool],) {
  %1030 = fn () -> (Tensor[(11, 11, 6), bool],) {
    %1029 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
    (%1029,)
  };
  %1030() /* ty=(Tensor[(11, 11, 6), bool],) */
}

def @func_10484(%var_10483: Tensor[(224), float32]) -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64], Tensor[(14, 2, 8), float32], Tensor[(224), float32]) {
  %1042 = fn (%var_10469: Tensor[(224), float32]) -> (Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64], Tensor[(14, 2, 8), float32], Tensor[(224), float32]) {
    %1031 = cast(meta[relay.Constant][73] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %1032 = cast(meta[relay.Constant][74] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
    %1033 = reshape(%1031, newshape=[64]) /* ty=Tensor[(64), float64] */;
    %1034 = reshape(%1032, newshape=[832]) /* ty=Tensor[(832), float64] */;
    %1035 = @func_8033(%1033, %1034) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(16, 4, 13), float64], Tensor[(64), float64], Tensor[(832), float64]) */;
    %1036 = cast(%var_10469, dtype="float32") /* ty=Tensor[(224), float32] */;
    %1037 = reshape(%1036, newshape=[14, 2, 8]) /* ty=Tensor[(14, 2, 8), float32] */;
    %1038 = @func_7673(%1037) /* ty=(Tensor[(14, 2, 8), float32], Tensor[(11, 11, 6), bool], Tensor[(360, 2), float64]) */;
    %1039 = @func_6038() /* ty=Tensor[(11, 11, 6), float32] */;
    %1040 = %1035.0;
    %1041 = %1038.0;
    (%1039, %1040, meta[relay.Constant][73] /* ty=Tensor[(64), float64] */, meta[relay.Constant][74] /* ty=Tensor[(832), float64] */, %1041, %var_10469)
  };
  %1042(%var_10483) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(11, 11, 6), float32], Tensor[(64), float64], Tensor[(832), float64], Tensor[(14, 2, 8), float32], Tensor[(224), float32]) */
}

def @func_7148(%var_7146: Tensor[(784), float32]) -> (Tensor[(2, 15, 12), float64], Tensor[(12, 16, 15), int64], Tensor[(8, 360), int64], Tensor[(784), float32], Tensor[(784), float32]) {
  %1043 = cast(meta[relay.Constant][75] /* ty=Tensor[(2, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 12), float64] */;
  %1044 = cast(meta[relay.Constant][76] /* ty=Tensor[(8, 360), int64] */, dtype="int64") /* ty=Tensor[(8, 360), int64] */;
  %1045 = cast(meta[relay.Constant][76] /* ty=Tensor[(8, 360), int64] */, dtype="int64") /* ty=Tensor[(8, 360), int64] */;
  %1046 = reshape(%1044, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %1047 = reshape(%1045, newshape=[12, 16, 15]) /* ty=Tensor[(12, 16, 15), int64] */;
  %1048 = @func_2527(%1046, %1047) /* ty=(Tensor[(12, 16, 15), int64],) */;
  %1049 = cast(%var_7146, dtype="float32") /* ty=Tensor[(784), float32] */;
  %1050 = reshape(%1049, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %1051 = @func_4654(%1050) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) */;
  %1052 = cosh(%1043) /* ty=Tensor[(2, 15, 12), float64] */;
  %1053 = %1048.0;
  %1054 = %1051.2;
  (%1052, %1053, meta[relay.Constant][76] /* ty=Tensor[(8, 360), int64] */, %1054, %var_7146)
}

def @func_4337() -> Tensor[(11, 11, 6), float32] {
  %1058 = fn () -> Tensor[(11, 11, 6), float32] {
    %1055 = @func_3583() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %1056 = %1055.0;
    %1057 = cast(%1056, dtype="float32") /* ty=Tensor[(11, 11, 6), float32] */;
    sigmoid(%1057) /* ty=Tensor[(11, 11, 6), float32] */
  };
  %1058() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_10741() -> (Tensor[(14, 2, 7), float64], Tensor[(11, 11, 6), float32]) {
  @func_10739() /* ty=(Tensor[(14, 2, 7), float64], Tensor[(11, 11, 6), float32]) */
}

def @func_8085() -> Tensor[(11, 11, 6), float64] {
  @func_6682() /* ty=Tensor[(11, 11, 6), float64] */
}

def @func_4788() -> (Tensor[(11, 11, 6), float32],) {
  @func_4786() /* ty=(Tensor[(11, 11, 6), float32],) */
}

def @func_8279(%var_8277: Tensor[(10, 14, 16), uint16], %var_8278: Tensor[(10, 14, 16), uint16]) -> (Tensor[(10, 14, 16), uint16],) {
  @func_8275(%var_8277, %var_8278) /* ty=(Tensor[(10, 14, 16), uint16],) */
}

def @func_6197(%var_6155: Tensor[(11, 14, 13), uint8], %var_6156: Tensor[(11, 14, 13), uint8], %var_6168: int32, %var_6187: Tensor[(256), int32]) -> (Tensor[(11, 14, 13), uint8], Tensor[(12, 12, 14), int32], Tensor[(27, 2), uint8], int32, Tensor[(11, 11, 6), float64], Tensor[(256), int32], Tensor[(2156), float64], Tensor[(256), int32], Tensor[(11, 11, 6), bool]) {
  %1059 = cast(%var_6156, dtype="uint8") /* ty=Tensor[(11, 14, 13), uint8] */;
  %1060 = shape_of(%var_6155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1061 = cast(%var_6155, dtype="uint8") /* ty=Tensor[(11, 14, 13), uint8] */;
  %1062 = dyn.reshape(%1059, %1060, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1063 = cast(meta[relay.Constant][77] /* ty=Tensor[(27, 2), uint8] */, dtype="uint8") /* ty=Tensor[(27, 2), uint8] */;
  %1064 = cast(%var_6168, dtype="int32") /* ty=int32 */;
  %1065 = reshape(%1063, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), uint8] */;
  %1066 = reshape(%1064, newshape=[]) /* ty=int32 */;
  %1067 = @func_3006(%1065, %1066) /* ty=(Tensor[(11, 6, 9), uint8], Tensor[(1, 6, 9), float32], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32], Tensor[(8, 6, 10), float32], Tensor[(480), float32]) */;
  %1068 = @func_4993() /* ty=(Tensor[(11, 11, 6), float64],) */;
  %1069 = cast(meta[relay.Constant][78] /* ty=Tensor[(2156), float64] */, dtype="float64") /* ty=Tensor[(2156), float64] */;
  %1070 = cast(%var_6187, dtype="int32") /* ty=Tensor[(256), int32] */;
  %1071 = reshape(%1069, newshape=[14, 14, 11]) /* ty=Tensor[(14, 14, 11), float64] */;
  %1072 = reshape(%1070, newshape=[256]) /* ty=Tensor[(256), int32] */;
  %1073 = @func_5240(%1071, %1072) /* ty=(Tensor[(14, 14, 11), float64], Tensor[(12, 12, 14), int32], Tensor[(256), int32], int32) */;
  %1074 = @func_4279() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %1075 = minimum(%1061, %1062) /* ty=Tensor[(11, 14, 13), uint8] */;
  %1076 = %1067.2;
  %1077 = %1068.0;
  %1078 = %1073.2;
  %1079 = %1074.0;
  (%1075, %1076, meta[relay.Constant][77] /* ty=Tensor[(27, 2), uint8] */, %var_6168, %1077, %1078, meta[relay.Constant][78] /* ty=Tensor[(2156), float64] */, %var_6187, %1079)
}

def @func_4656(%var_4655: Tensor[(784), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) {
  %1085 = fn (%var_4642: Tensor[(784), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) {
    %1080 = cast(%var_4642, dtype="float32") /* ty=Tensor[(784), float32] */;
    %1081 = reshape(%1080, newshape=[784]) /* ty=Tensor[(784), float32] */;
    %1082 = @func_4254(%1081) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) */;
    %1083 = @func_4263() /* ty=Tensor[(11, 11, 6), bool] */;
    %1084 = %1082.1;
    (%1083, %1084, %var_4642)
  };
  %1085(%var_4655) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(7, 7, 16), float32], Tensor[(784), float32]) */
}

def @func_8551() -> (Tensor[(6, 1, 5), float64],) {
  %1087 = fn () -> (Tensor[(6, 1, 5), float64],) {
    %1086 = @func_4949() /* ty=Tensor[(6, 1, 5), float64] */;
    (%1086,)
  };
  %1087() /* ty=(Tensor[(6, 1, 5), float64],) */
}

def @func_4380() -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float64]) {
  %1088 = @func_3503() /* ty=Tensor[(11, 11, 6), bool] */;
  %1089 = @func_4263() /* ty=Tensor[(11, 11, 6), bool] */;
  %1090 = cast(%1089, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %1091 = shape_of(%1088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1092 = cast(%1088, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %1093 = dyn.reshape(%1090, %1091, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1094 = cast(%1088, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %1095 = mod(%1092, %1093) /* ty=Tensor[(11, 11, 6), float64] */;
  %1096 = erf(%1094) /* ty=Tensor[(11, 11, 6), float64] */;
  (%1095, %1096)
}

def @func_5675() -> (Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32]) {
  @func_5673() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32]) */
}

def @func_4281() -> (Tensor[(11, 11, 6), bool],) {
  @func_4279() /* ty=(Tensor[(11, 11, 6), bool],) */
}

def @func_10226() -> (Tensor[(11, 11, 6), bool], Tensor[(300), float64], Tensor[(6, 1, 5), float32]) {
  %1097 = @func_9594() /* ty=(Tensor[(11, 11, 6), bool],) */;
  %1098 = cast(meta[relay.Constant][79] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %1099 = reshape(%1098, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), float64] */;
  %1100 = @func_8915(%1099) /* ty=(Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), bool], Tensor[(121, 6), bool], Tensor[(6, 10, 5), float32]) */;
  %1101 = %1100.0;
  %1102 = cast(%1101, dtype="float32") /* ty=Tensor[(6, 1, 5), float32] */;
  %1103 = %1097.0;
  %1104 = exp(%1102) /* ty=Tensor[(6, 1, 5), float32] */;
  (%1103, meta[relay.Constant][79] /* ty=Tensor[(300), float64] */, %1104)
}

def @func_4737() -> (Tensor[(11, 11, 6), float32],) {
  %1106 = fn () -> (Tensor[(11, 11, 6), float32],) {
    %1105 = @func_4336() /* ty=Tensor[(11, 11, 6), float32] */;
    (%1105,)
  };
  %1106() /* ty=(Tensor[(11, 11, 6), float32],) */
}

def @func_7556() -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), int16], Tensor[(196), float64]) {
  %1113 = fn () -> (Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), int16], Tensor[(196), float64]) {
    %1107 = @func_6490() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %1108 = cast(meta[relay.Constant][80] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
    %1109 = reshape(%1108, newshape=[196]) /* ty=Tensor[(196), float64] */;
    %1110 = @func_7277(%1109) /* ty=(Tensor[(6, 1, 5), float64], Tensor[(11, 11, 6), int16], Tensor[(11, 11, 6), float32], Tensor[(14, 2, 7), float64], Tensor[(196), float64]) */;
    %1111 = %1107.0;
    %1112 = %1110.1;
    (%1111, %1112, meta[relay.Constant][80] /* ty=Tensor[(196), float64] */)
  };
  %1113() /* ty=(Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), int16], Tensor[(196), float64]) */
}

def @func_5116() -> Tensor[(11, 11, 6), float32] {
  %1114 = fn () -> Tensor[(11, 11, 6), float32] {
    @func_4896() /* ty=Tensor[(11, 11, 6), float32] */
  };
  %1114() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_6576() -> (Tensor[(11, 11, 6), bool],) {
  %1116 = fn () -> (Tensor[(11, 11, 6), bool],) {
    %1115 = @func_6113() /* ty=Tensor[(11, 11, 6), bool] */;
    (%1115,)
  };
  %1116() /* ty=(Tensor[(11, 11, 6), bool],) */
}

def @func_6434(%var_6432: Tensor[(11, 11, 6), float32]) -> (Tensor[(11, 11, 6), bool], Tensor[(14, 2, 7), float64], Tensor[(196), float64], Tensor[(11, 11, 6), float64]) {
  @func_6431(%var_6432) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(14, 2, 7), float64], Tensor[(196), float64], Tensor[(11, 11, 6), float64]) */
}

def @func_3993(%var_3991: Tensor[(14, 2, 7), float64]) -> (Tensor[(14, 2, 7), float64],) {
  @func_3990(%var_3991) /* ty=(Tensor[(14, 2, 7), float64],) */
}

def @func_7367(%var_7366: Tensor[(2016), int32]) -> (Tensor[(11, 11, 6), bool], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32]) {
  %1125 = fn (%var_7362: Tensor[(2016), int32]) -> (Tensor[(11, 11, 6), bool], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32]) {
    %1117 = @func_5836() /* ty=(Tensor[(11, 11, 6), bool],) */;
    %1118 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %1119 = cast(%var_7362, dtype="int32") /* ty=Tensor[(2016), int32] */;
    %1120 = reshape(%1118, newshape=[]) /* ty=int32 */;
    %1121 = reshape(%1119, newshape=[12, 12, 14]) /* ty=Tensor[(12, 12, 14), int32] */;
    %1122 = @func_984(%1120, %1121) /* ty=(Tensor[(12, 12, 14), int32],) */;
    %1123 = %1117.0;
    %1124 = %1122.0;
    (%1123, %1124, 8 /* ty=int32 */, %var_7362)
  };
  %1125(%var_7366) /* ty=(Tensor[(11, 11, 6), bool], Tensor[(12, 12, 14), int32], int32, Tensor[(2016), int32]) */
}

def @func_8275(%var_8252: Tensor[(10, 14, 16), uint16], %var_8253: Tensor[(10, 14, 16), uint16]) -> (Tensor[(10, 14, 16), uint16],) {
  %1126 = cast(%var_8253, dtype="uint16") /* ty=Tensor[(10, 14, 16), uint16] */;
  %1127 = shape_of(%var_8252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1128 = cast(%var_8252, dtype="uint16") /* ty=Tensor[(10, 14, 16), uint16] */;
  %1129 = dyn.reshape(%1126, %1127, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1130 = bitwise_and(%1128, %1129) /* ty=Tensor[(10, 14, 16), uint16] */;
  (%1130,)
}

def @func_5901(%var_5899: Tensor[(480), float32]) -> (Tensor[(11, 11, 6), float32], Tensor[(720), float64], Tensor[(192), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32]) {
  @func_5898(%var_5899) /* ty=(Tensor[(11, 11, 6), float32], Tensor[(720), float64], Tensor[(192), float32], Tensor[(720), float64], Tensor[(540), float64], Tensor[(784), float32], Tensor[(480), float32]) */
}

def @func_6848(%var_6829: Tensor[(10, 14, 15), int8], %var_6830: Tensor[(10, 14, 15), int8]) -> (Tensor[(11, 11, 6), float32], Tensor[(10, 14, 15), float64]) {
  %1131 = @func_5673() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), bool], Tensor[(11, 11, 6), float64], Tensor[(11, 11, 6), float32]) */;
  %1132 = cast(%var_6830, dtype="bool") /* ty=Tensor[(10, 14, 15), bool] */;
  %1133 = shape_of(%var_6829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1134 = cast(%var_6829, dtype="bool") /* ty=Tensor[(10, 14, 15), bool] */;
  %1135 = dyn.reshape(%1132, %1133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1136 = greater(%1134, %1135) /* ty=Tensor[(10, 14, 15), bool] */;
  %1137 = cast(%1136, dtype="float32") /* ty=Tensor[(10, 14, 15), float32] */;
  %1138 = asin(%1137) /* ty=Tensor[(10, 14, 15), float32] */;
  %1139 = cast(%1138, dtype="float64") /* ty=Tensor[(10, 14, 15), float64] */;
  %1140 = %1131.3;
  %1141 = acos(%1139) /* ty=Tensor[(10, 14, 15), float64] */;
  (%1140, %1141)
}

def @func_7848(%var_7846: Tensor[(16, 4, 1), float64], %var_7847: Tensor[(16, 4, 13), float64]) -> Tensor[(16, 4, 13), float64] {
  %1144 = fn (%var_7840: Tensor[(16, 4, 1), float64], %var_7841: Tensor[(16, 4, 13), float64]) -> Tensor[(16, 4, 13), float64] {
    %1142 = cast(%var_7840, dtype="float64") /* ty=Tensor[(16, 4, 1), float64] */;
    %1143 = cast(%var_7841, dtype="float64") /* ty=Tensor[(16, 4, 13), float64] */;
    floor_divide(%1142, %1143) /* ty=Tensor[(16, 4, 13), float64] */
  };
  %1144(%var_7846, %var_7847) /* ty=Tensor[(16, 4, 13), float64] */
}

def @func_4757() -> Tensor[(11, 11, 6), float32] {
  %1145 = fn () -> Tensor[(11, 11, 6), float32] {
    @func_4221() /* ty=Tensor[(11, 11, 6), float32] */
  };
  %1145() /* ty=Tensor[(11, 11, 6), float32] */
}

def @func_5421() -> Tensor[(54), uint8] {
  %1147 = fn () -> Tensor[(54), uint8] {
    %1146 = @func_4404() /* ty=(Tensor[(11, 11, 6), float32], int32, Tensor[(54), uint8], int32) */;
    %1146.2
  };
  %1147() /* ty=Tensor[(54), uint8] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen596/build/output.py", line 2939, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:37:36] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

