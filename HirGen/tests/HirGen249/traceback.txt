==========mod==========
#[version = "0.0.5"]
def @func_3182(%var_3172: Tensor[(1, 858), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(240), float64], Tensor[(240, 1), float64], Tensor[(1, 858), float32]) {
  %0 = @func_937() /* ty=(Tensor[(240), float64],) */;
  %1 = cast(%var_3172, dtype="float32") /* ty=Tensor[(1, 858), float32] */;
  %2 = cast(%var_3172, dtype="float32") /* ty=Tensor[(1, 858), float32] */;
  %3 = %0.0;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(240), float64] */;
  %5 = reshape(%1, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %6 = reshape(%2, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %7 = reshape(%4, newshape=[240, 1]) /* ty=Tensor[(240, 1), float64] */;
  %8 = @func_493(%5, %6, %7) /* ty=(Tensor[(11, 6, 13), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240, 1), float64]) */;
  %9 = @func_2711() /* ty=Tensor[(9, 12, 15), int64] */;
  %10 = %8.3;
  (%9, %3, %10, %var_3172)
}

def @func_4306(%var_4229: Tensor[(490), float32], %var_4283: Tensor[(9, 12, 15), int64]) -> (Tensor[(240), float64], Tensor[(490), float32], Tensor[(240), float64], Tensor[(9, 12, 15), uint8], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32]) {
  %11 = @func_3158() /* ty=(Tensor[(240), float64], Tensor[(240), float64]) */;
  %12 = cast(%var_4229, dtype="float32") /* ty=Tensor[(490), float32] */;
  %13 = reshape(%12, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %14 = @func_1283(%13) /* ty=(Tensor[(10, 5), float64], Tensor[(9, 12, 15), int64], Tensor[(490), float32], Tensor[(240), float64]) */;
  %15 = %14.1;
  %16 = cast(%var_4283, dtype="uint8") /* ty=Tensor[(9, 12, 15), uint8] */;
  %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%15, dtype="uint8") /* ty=Tensor[(9, 12, 15), uint8] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %20 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %21 = @func_1533() /* ty=(Tensor[(210, 1), float32], Tensor[(9, 12, 15), uint32]) */;
  %22 = @func_2436() /* ty=Tensor[(240), float64] */;
  %23 = %11.0;
  %24 = bitwise_xor(%18, %19) /* ty=Tensor[(9, 12, 15), uint8] */;
  %25 = %20.0;
  %26 = %21.1;
  (%22, %var_4229, %23, %24, %25, %26)
}

def @func_5536() -> Tensor[(9, 12, 15), int64] {
  %27 = @func_4797() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
  %27.0
}

def @func_6795() -> Tensor[(240), float64] {
  %28 = @func_6557() /* ty=(Tensor[(240), float64], Tensor[(9, 12, 15), int64]) */;
  %28.0
}

def @func_5650(%var_5632: Tensor[(78), int64], %var_5633: Tensor[(546), int64], %var_5635: Tensor[(6, 10, 13), uint32]) -> (Tensor[(240), float64], Tensor[(9, 12, 15), int64], Tensor[(6, 13, 7), int64], Tensor[(78), int64], Tensor[(546), int64], Tensor[(6, 10, 13), float32]) {
  %29 = @func_4924() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
  %30 = cast(%var_5632, dtype="int64") /* ty=Tensor[(78), int64] */;
  %31 = cast(%var_5633, dtype="int64") /* ty=Tensor[(546), int64] */;
  %32 = reshape(%30, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
  %33 = reshape(%31, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int64] */;
  %34 = @func_4410(%32, %33) /* ty=(Tensor[(6, 13, 7), int64], Tensor[(6, 13, 7), float32]) */;
  %35 = @func_5223() /* ty=(Tensor[(240), float64], Tensor[(6, 10, 13), uint32], Tensor[(780), uint32], Tensor[(105, 2), float32]) */;
  %36 = %35.1;
  %37 = cast(%var_5635, dtype="float32") /* ty=Tensor[(6, 10, 13), float32] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%36, dtype="float32") /* ty=Tensor[(6, 10, 13), float32] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %41 = @func_1482() /* ty=Tensor[(240), float64] */;
  %42 = %29.0;
  %43 = %34.0;
  %44 = power(%39, %40) /* ty=Tensor[(6, 10, 13), float32] */;
  (%41, %42, %43, %var_5632, %var_5633, %44)
}

def @func_2256(%var_2236: bool) -> (Tensor[(240), float64], Tensor[(9, 12, 15), bool], Tensor[(240), float64], Tensor[(7, 1, 15), bool], bool) {
  %45 = @func_1454() /* ty=(Tensor[(9, 12, 15), bool],) */;
  %46 = cast(%var_2236, dtype="bool") /* ty=bool */;
  %47 = reshape(%46, newshape=[]) /* ty=bool */;
  %48 = @func_174(%47) /* ty=(Tensor[(7, 1, 15), bool],) */;
  %49 = @func_1908() /* ty=Tensor[(240), float64] */;
  %50 = %45.0;
  %51 = @func_1840() /* ty=Tensor[(240), float64] */;
  %52 = %48.0;
  (%49, %50, %51, %52, %var_2236)
}

def @func_6296() -> (Tensor[(9, 12, 15), int64],) {
  %53 = @func_3060() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %54 = %53.0;
  (%54,)
}

def @func_5223() -> (Tensor[(240), float64], Tensor[(6, 10, 13), uint32], Tensor[(780), uint32], Tensor[(105, 2), float32]) {
  %55 = @func_4964() /* ty=(Tensor[(240), float64],) */;
  %56 = cast(meta[relay.Constant][0] /* ty=Tensor[(780), uint32] */, dtype="uint32") /* ty=Tensor[(780), uint32] */;
  %57 = cast(meta[relay.Constant][0] /* ty=Tensor[(780), uint32] */, dtype="uint32") /* ty=Tensor[(780), uint32] */;
  %58 = cast(meta[relay.Constant][1] /* ty=Tensor[(105, 2), float32] */, dtype="float32") /* ty=Tensor[(105, 2), float32] */;
  %59 = reshape(%56, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), uint32] */;
  %60 = reshape(%57, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), uint32] */;
  %61 = reshape(%58, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %62 = @func_1347(%59, %60, %61) /* ty=(Tensor[(6, 10, 13), uint32], Tensor[(14, 15, ?), bool], Tensor[(210), float32], Tensor[(70, 9), float64], Tensor[(9, 12, 15), int64]) */;
  %63 = %55.0;
  %64 = %62.0;
  (%63, %64, meta[relay.Constant][0] /* ty=Tensor[(780), uint32] */, meta[relay.Constant][1] /* ty=Tensor[(105, 2), float32] */)
}

def @func_4011(%var_3984: Tensor[(10, 11, 10), int16], %var_4006: Tensor[(780), uint32]) -> (Tensor[(10, 11, 10), int16], Tensor[(10, 11, 10), float32], Tensor[(12, 2, 10), uint8], Tensor[(11, 78), float32], Tensor[(240), float64], Tensor[(210), float32], Tensor[(780), uint32], Tensor[(1, 210), float32]) {
  %65 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 11, 10), int16] */, dtype="int16") /* ty=Tensor[(10, 11, 10), int16] */;
  %66 = shape_of(%var_3984, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%var_3984, dtype="int16") /* ty=Tensor[(10, 11, 10), int16] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %69 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 11, 10), int16] */, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %70 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 78), float32] */, dtype="float32") /* ty=Tensor[(11, 78), float32] */;
  %71 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 78), float32] */, dtype="float32") /* ty=Tensor[(11, 78), float32] */;
  %72 = cast(meta[relay.Constant][4] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %73 = reshape(%70, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %74 = reshape(%71, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %75 = reshape(%72, newshape=[240, 1]) /* ty=Tensor[(240, 1), float64] */;
  %76 = @func_493(%73, %74, %75) /* ty=(Tensor[(11, 6, 13), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240, 1), float64]) */;
  %77 = cast(%var_4006, dtype="uint32") /* ty=Tensor[(780), uint32] */;
  %78 = cast(%var_4006, dtype="uint32") /* ty=Tensor[(780), uint32] */;
  %79 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 210), float32] */, dtype="float32") /* ty=Tensor[(1, 210), float32] */;
  %80 = reshape(%77, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), uint32] */;
  %81 = reshape(%78, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), uint32] */;
  %82 = reshape(%79, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %83 = @func_1347(%80, %81, %82) /* ty=(Tensor[(6, 10, 13), uint32], Tensor[(14, 15, ?), bool], Tensor[(210), float32], Tensor[(70, 9), float64], Tensor[(9, 12, 15), int64]) */;
  %84 = bitwise_and(%67, %68) /* ty=Tensor[(10, 11, 10), int16] */;
  %85 = log(%69) /* ty=Tensor[(10, 11, 10), float32] */;
  %86 = %76.2;
  %87 = %83.2;
  (%84, %85, %86, meta[relay.Constant][3] /* ty=Tensor[(11, 78), float32] */, meta[relay.Constant][4] /* ty=Tensor[(240), float64] */, %87, %var_4006, meta[relay.Constant][5] /* ty=Tensor[(1, 210), float32] */)
}

def @func_5352(%var_5342: Tensor[(1, 11, 14), float64]) -> (Tensor[(1, 11, 14), float64], Tensor[(1, 11, 14), float64]) {
  %88 = cast(%var_5342, dtype="float64") /* ty=Tensor[(1, 11, 14), float64] */;
  %89 = cast(%var_5342, dtype="float64") /* ty=Tensor[(1, 11, 14), float64] */;
  %90 = exp(%88) /* ty=Tensor[(1, 11, 14), float64] */;
  %91 = log(%89) /* ty=Tensor[(1, 11, 14), float64] */;
  (%90, %91)
}

def @func_2343() -> (Tensor[(9, 12, 15), int64],) {
  %92 = @func_1010() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
  %93 = %92.1;
  (%93,)
}

def @func_6931(%var_6927: Tensor[(40, 12), float32]) -> (Tensor[(12, 2, 10), uint8], bool, Tensor[(40, 12), float32], bool) {
  %94 = @func_641() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) */;
  %95 = cast(%var_6927, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %96 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %97 = reshape(%95, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float32] */;
  %98 = reshape(%96, newshape=[]) /* ty=bool */;
  %99 = @func_1712(%97, %98) /* ty=(Tensor[(4, 10, 12), float32], Tensor[(70, 9), float64], Tensor[(210), float32], bool, bool) */;
  %100 = %94.1;
  %101 = %99.4;
  (%100, %101, %var_6927, False /* ty=bool */)
}

def @func_2205(%var_2199: Tensor[(2, 9, 12), float32]) -> (Tensor[(2, 9, 12), float32],) {
  %102 = cast(%var_2199, dtype="float32") /* ty=Tensor[(2, 9, 12), float32] */;
  %103 = acos(%102) /* ty=Tensor[(2, 9, 12), float32] */;
  (%103,)
}

def @func_937() -> (Tensor[(240), float64],) {
  %104 = @func_641() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) */;
  %105 = %104.2;
  (%105,)
}

def @func_1454() -> (Tensor[(9, 12, 15), bool],) {
  %106 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %107 = %106.0;
  %108 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %109 = %108.0;
  %110 = cast(%109, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %111 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%107, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %114 = not_equal(%112, %113) /* ty=Tensor[(9, 12, 15), bool] */;
  (%114,)
}

def @func_2072(%var_2006: Tensor[(6, 220), uint8], %var_2031: Tensor[(210), float32]) -> (Tensor[(240), float64], Tensor[(9, 12, 15), int64], Tensor[(6, 220), uint8], Tensor[(240), float64], Tensor[(70, 9), float64], Tensor[(210), float32], Tensor[(15, 8, 11), float32]) {
  %115 = @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */;
  %116 = cast(%var_2031, dtype="float32") /* ty=Tensor[(210), float32] */;
  %117 = reshape(%116, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %118 = @func_1397(%117) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(70, 9), float64], Tensor[(780), uint32], Tensor[(210), float32], Tensor[(9, 12, 15), int64]) */;
  %119 = cast(%var_2006, dtype="uint8") /* ty=Tensor[(6, 220), uint8] */;
  %120 = reshape(%119, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), uint8] */;
  %121 = @func_693(%120) /* ty=(Tensor[(15, 8, 11), uint8],) */;
  %122 = %121.0;
  %123 = cast(%122, dtype="float32") /* ty=Tensor[(15, 8, 11), float32] */;
  %124 = @func_1840() /* ty=Tensor[(240), float64] */;
  %125 = %115.0;
  %126 = @func_514() /* ty=Tensor[(240), float64] */;
  %127 = %118.2;
  %128 = erf(%123) /* ty=Tensor[(15, 8, 11), float32] */;
  (%124, %125, %var_2006, %126, %127, %var_2031, %128)
}

def @func_5335(%var_5329: bool) -> (Tensor[(9, 12, 15), float64], bool, bool, Tensor[(9, 12, 15), int64]) {
  %129 = @func_1010() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
  %130 = %129.1;
  %131 = cast(%130, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %132 = cast(%var_5329, dtype="bool") /* ty=bool */;
  %133 = reshape(%132, newshape=[]) /* ty=bool */;
  %134 = @func_408(%133) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */;
  %135 = log(%131) /* ty=Tensor[(9, 12, 15), float64] */;
  %136 = %134.2;
  %137 = @func_2881() /* ty=Tensor[(9, 12, 15), int64] */;
  (%135, %136, %var_5329, %137)
}

def @func_1010() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  %138 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %139 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %140 = %138.0;
  %141 = %139.0;
  (%140, %141)
}

def @func_303() -> (Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) {
  %142 = cast(meta[relay.Constant][6] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %143 = reshape(%142, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
  %144 = @func_52(%143) /* ty=(Tensor[(12, 2, 10), uint8],) */;
  %145 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 15), float64] */;
  %146 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(9, 1, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 15), float64] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %149 = power(%147, %148) /* ty=Tensor[(9, ?, 15), float64] */;
  %150 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 1, 15), float64] */, dtype="bool") /* ty=Tensor[(9, 1, 15), bool] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="bool") /* ty=Tensor[(9, ?, 15), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = greater_equal(%152, %153) /* ty=Tensor[(9, ?, 15), bool] */;
  %155 = cast(%149, dtype="bool") /* ty=Tensor[(9, ?, 15), bool] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="bool") /* ty=Tensor[(9, ?, 15), bool] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %159 = %144.0;
  %160 = logical_and(%157, %158) /* ty=Tensor[(9, ?, 15), bool] */;
  (%159, meta[relay.Constant][6] /* ty=Tensor[(240), float64] */, %160)
}

def @func_4024(%var_4020: Tensor[(2, 1, 11), float64]) -> (Tensor[(2, 1, 11), float64],) {
  %161 = cast(%var_4020, dtype="float64") /* ty=Tensor[(2, 1, 11), float64] */;
  %162 = log(%161) /* ty=Tensor[(2, 1, 11), float64] */;
  (%162,)
}

def @func_4574(%var_4555: Tensor[(3, 1, 9), float32]) -> (Tensor[(3, 1, 9), float64],) {
  %163 = cast(%var_4555, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %164 = exp(%163) /* ty=Tensor[(3, 1, 9), float32] */;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
  %166 = cos(%165) /* ty=Tensor[(3, 1, 9), float32] */;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
  %168 = asinh(%167) /* ty=Tensor[(3, 1, 9), float64] */;
  (%168,)
}

def @func_3549() -> (Tensor[(9, 12, 15), bool],) {
  %169 = @func_1454() /* ty=(Tensor[(9, 12, 15), bool],) */;
  %170 = %169.0;
  (%170,)
}

def @func_5125() -> (Tensor[(9, 12, 15), int64],) {
  %171 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %172 = %171.0;
  (%172,)
}

def @func_3043(%var_3038: uint64, %var_3039: Tensor[(3, 1, 1), uint64]) -> (Tensor[(3, 1, 1), uint64],) {
  %173 = cast(%var_3038, dtype="uint64") /* ty=uint64 */;
  %174 = cast(%var_3039, dtype="uint64") /* ty=Tensor[(3, 1, 1), uint64] */;
  %175 = bitwise_and(%173, %174) /* ty=Tensor[(3, 1, 1), uint64] */;
  (%175,)
}

def @func_2551() -> (Tensor[(9, 12, 15), int64],) {
  %176 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %177 = %176.0;
  (%177,)
}

def @func_4091(%var_4072: Tensor[(2, 2, 13), float64], %var_4084: Tensor[(2, 2, 13), float64]) -> (Tensor[(2, 2, 13), float64], Tensor[(240), float64], Tensor[(2, 2, 13), bool]) {
  %178 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %179 = shape_of(%var_4072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%var_4072, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %182 = cast(%var_4084, dtype="bool") /* ty=Tensor[(2, 2, 13), bool] */;
  %183 = shape_of(%var_4072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%var_4072, dtype="bool") /* ty=Tensor[(2, 2, 13), bool] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %186 = subtract(%180, %181) /* ty=Tensor[(2, 2, 13), float64] */;
  %187 = @func_2436() /* ty=Tensor[(240), float64] */;
  %188 = less(%184, %185) /* ty=Tensor[(2, 2, 13), bool] */;
  (%186, %187, %188)
}

def @func_5021() -> (Tensor[(9, 12, 15), int64],) {
  %189 = @func_4380() /* ty=Tensor[(9, 12, 15), int64] */;
  (%189,)
}

def @func_3408(%var_3394: Tensor[(9, 12, 15), int64]) -> (Tensor[(9, 12, 15), bool], Tensor[(3, 1, 1), uint64], uint64, Tensor[(3), uint64]) {
  %190 = @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */;
  %191 = %190.0;
  %192 = cast(%var_3394, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %196 = cast(meta[relay.Constant][10] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %197 = cast(meta[relay.Constant][11] /* ty=Tensor[(3), uint64] */, dtype="uint64") /* ty=Tensor[(3), uint64] */;
  %198 = reshape(%196, newshape=[]) /* ty=uint64 */;
  %199 = reshape(%197, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), uint64] */;
  %200 = @func_3043(%198, %199) /* ty=(Tensor[(3, 1, 1), uint64],) */;
  %201 = logical_or(%194, %195) /* ty=Tensor[(9, 12, 15), bool] */;
  %202 = %200.0;
  (%201, %202, meta[relay.Constant][10] /* ty=uint64 */, meta[relay.Constant][11] /* ty=Tensor[(3), uint64] */)
}

def @func_5863(%var_5843: Tensor[(6, 11, 8), int16], %var_5844: Tensor[(6, 11, 8), int16], %var_5854: Tensor[(6, 11, 8), float64]) -> Tensor[(6, 11, 8), float32] {
  %203 = cast(%var_5844, dtype="int16") /* ty=Tensor[(6, 11, 8), int16] */;
  %204 = shape_of(%var_5843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%var_5843, dtype="int16") /* ty=Tensor[(6, 11, 8), int16] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %207 = add(%205, %206) /* ty=Tensor[(6, 11, 8), int16] */;
  %208 = cast(%207, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
  %209 = erf(%208) /* ty=Tensor[(6, 11, 8), float64] */;
  %210 = cast(%var_5854, dtype="float32") /* ty=Tensor[(6, 11, 8), float32] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="float32") /* ty=Tensor[(6, 11, 8), float32] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  minimum(%212, %213) /* ty=Tensor[(6, 11, 8), float32] */
}

def @func_3622(%var_3593: Tensor[(12, 14, 12), float32]) -> (Tensor[(12, 14, 12), float32], Tensor[(12, 14, 12), bool]) {
  %214 = cast(%var_3593, dtype="float32") /* ty=Tensor[(12, 14, 12), float32] */;
  %215 = log10(%214) /* ty=Tensor[(12, 14, 12), float32] */;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(12, 14, 12), float32] */;
  %217 = cast(%215, dtype="float32") /* ty=Tensor[(12, 14, 12), float32] */;
  %218 = exp(%217) /* ty=Tensor[(12, 14, 12), float32] */;
  %219 = cast(%215, dtype="bool") /* ty=Tensor[(12, 14, 12), bool] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%218, dtype="bool") /* ty=Tensor[(12, 14, 12), bool] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %223 = acos(%216) /* ty=Tensor[(12, 14, 12), float32] */;
  %224 = greater_equal(%221, %222) /* ty=Tensor[(12, 14, 12), bool] */;
  (%223, %224)
}

def @func_4964() -> (Tensor[(240), float64],) {
  %225 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %226 = %225.1;
  (%226,)
}

def @func_3894(%var_3854: Tensor[(7, 5, 6), float32], %var_3855: Tensor[(7, 5, 6), float32]) -> (Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), float32], Tensor[(2, 9, 12), float32], Tensor[(216), float32]) {
  %227 = cast(%var_3855, dtype="bool") /* ty=Tensor[(7, 5, 6), bool] */;
  %228 = shape_of(%var_3854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%var_3854, dtype="bool") /* ty=Tensor[(7, 5, 6), bool] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %231 = cast(%var_3854, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
  %232 = cast(meta[relay.Constant][12] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %233 = reshape(%232, newshape=[2, 9, 12]) /* ty=Tensor[(2, 9, 12), float32] */;
  %234 = @func_2205(%233) /* ty=(Tensor[(2, 9, 12), float32],) */;
  %235 = less(%229, %230) /* ty=Tensor[(7, 5, 6), bool] */;
  %236 = asinh(%231) /* ty=Tensor[(7, 5, 6), float32] */;
  %237 = %234.0;
  (%235, %236, %237, meta[relay.Constant][12] /* ty=Tensor[(216), float32] */)
}

def @func_2352() -> (Tensor[(240), float64],) {
  %238 = @func_1908() /* ty=Tensor[(240), float64] */;
  (%238,)
}

def @func_1176(%var_1151: Tensor[(9, 12, 15), uint16]) -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), bool], Tensor[(12, 2, 10), bool]) {
  %239 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  %240 = cast(%239, dtype="int64") /* ty=Tensor[(9, 12, 15), int64] */;
  %241 = reshape(%240, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), int64] */;
  %242 = @func_887(%241) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(9, 12, 15), uint16], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(858), float64]) */;
  %243 = %242.1;
  %244 = cast(%var_1151, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = cast(%239, dtype="int64") /* ty=Tensor[(9, 12, 15), int64] */;
  %249 = reshape(%248, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), int64] */;
  %250 = @func_887(%249) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(9, 12, 15), uint16], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(858), float64]) */;
  %251 = %250.2;
  %252 = @func_937() /* ty=(Tensor[(240), float64],) */;
  %253 = %252.0;
  %254 = cast(%253, dtype="bool") /* ty=Tensor[(240), bool] */;
  %255 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%251, dtype="bool") /* ty=Tensor[(12, 2, 10), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %258 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  %259 = less_equal(%246, %247) /* ty=Tensor[(9, 12, 15), bool] */;
  %260 = equal(%256, %257) /* ty=Tensor[(12, 2, 10), bool] */;
  (%239, %258, %259, %260)
}

def @func_3802(%var_3785: float64, %var_3786: Tensor[(3), uint64]) -> (Tensor[(13, 13, 13), bool], float64, Tensor[(3), uint64], Tensor[(630), float64], Tensor[(9, 12, 15), float32]) {
  %261 = cast(%var_3785, dtype="float64") /* ty=float64 */;
  %262 = cast(%var_3786, dtype="uint64") /* ty=Tensor[(3), uint64] */;
  %263 = cast(meta[relay.Constant][13] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %264 = @func_3060() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %265 = %264.0;
  %266 = cast(%265, dtype="int64") /* ty=Tensor[(9, 12, 15), int64] */;
  %267 = reshape(%261, newshape=[]) /* ty=float64 */;
  %268 = reshape(%262, newshape=[3]) /* ty=Tensor[(3), uint64] */;
  %269 = reshape(%263, newshape=[630]) /* ty=Tensor[(630), float64] */;
  %270 = reshape(%266, newshape=[1620]) /* ty=Tensor[(1620), int64] */;
  %271 = @func_3495(%267, %268, %269, %270) /* ty=(Tensor[(13, 13, 13), bool], Tensor[(3, 1, 1), uint64], Tensor[(3), uint64], Tensor[(9, 12, 15), float64], Tensor[(630), float64], Tensor[(1620), int64], Tensor[(3, 1, 1), uint64], Tensor[(13, 13, 13), float64], Tensor[(210), float32], Tensor[(480), float32]) */;
  %272 = cast(%265, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
  %273 = sigmoid(%272) /* ty=Tensor[(9, 12, 15), float32] */;
  %274 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 12, 15), float32] */, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = less(%276, %277) /* ty=Tensor[(9, 12, 15), bool] */;
  %279 = cast(%278, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
  %280 = %271.0;
  %281 = rsqrt(%279) /* ty=Tensor[(9, 12, 15), float32] */;
  (%280, %var_3785, %var_3786, meta[relay.Constant][13] /* ty=Tensor[(630), float64] */, %281)
}

def @func_6232() -> Tensor[(9, 12, 15), bool] {
  %282 = @func_3549() /* ty=(Tensor[(9, 12, 15), bool],) */;
  %282.0
}

def @func_607(%var_587: Tensor[(240), float64]) -> (Tensor[(240), int8], Tensor[(12, 2, 10), uint8]) {
  %283 = @func_514() /* ty=Tensor[(240), float64] */;
  %284 = cast(%var_587, dtype="int8") /* ty=Tensor[(240), int8] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(1), int32] */;
  %286 = cast(%283, dtype="int8") /* ty=Tensor[(240), int8] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?), int8] */;
  %288 = cast(%var_587, dtype="float64") /* ty=Tensor[(240), float64] */;
  %289 = reshape(%288, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
  %290 = @func_52(%289) /* ty=(Tensor[(12, 2, 10), uint8],) */;
  %291 = maximum(%286, %287) /* ty=Tensor[(240), int8] */;
  %292 = %290.0;
  (%291, %292)
}

def @func_4156() -> (Tensor[(9, 12, 15), int64],) {
  %293 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %294 = %293.0;
  (%294,)
}

def @func_723() -> (Tensor[(9, 12, 15), int64],) {
  %295 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  (%295,)
}

def @func_6379(%var_6340: Tensor[(15, 12), float32]) -> (Tensor[(15, 12), float32], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  %296 = cast(%var_6340, dtype="float32") /* ty=Tensor[(15, 12), float32] */;
  %297 = @func_2672() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %298 = @func_2128() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %299 = sin(%296) /* ty=Tensor[(15, 12), float32] */;
  %300 = %297.0;
  %301 = %298.0;
  (%299, %300, %301)
}

def @func_2711() -> Tensor[(9, 12, 15), int64] {
  %302 = @func_2128() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %302.0
}

def @func_408(%var_388: bool) -> (Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) {
  %303 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %304 = cast(%var_388, dtype="bool") /* ty=bool */;
  %305 = reshape(%304, newshape=[]) /* ty=bool */;
  %306 = @func_174(%305) /* ty=(Tensor[(7, 1, 15), bool],) */;
  %307 = cast(%var_388, dtype="bool") /* ty=bool */;
  %308 = reshape(%307, newshape=[]) /* ty=bool */;
  %309 = @func_174(%308) /* ty=(Tensor[(7, 1, 15), bool],) */;
  %310 = %303.0;
  %311 = cast(%310, dtype="float64") /* ty=Tensor[(12, 2, 10), float64] */;
  %312 = reshape(%311, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
  %313 = @func_52(%312) /* ty=(Tensor[(12, 2, 10), uint8],) */;
  %314 = %306.0;
  %315 = %309.0;
  %316 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  %317 = %313.0;
  (%310, %314, %var_388, %315, %316, %317)
}

def @func_4209() -> (Tensor[(9, 12, 15), float64],) {
  %318 = @func_2579() /* ty=(Tensor[(9, 12, 15), float32],) */;
  %319 = %318.0;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %321 = acosh(%320) /* ty=Tensor[(9, 12, 15), float64] */;
  (%321,)
}

def @func_4410(%var_4396: Tensor[(6, 13, 1), int64], %var_4397: Tensor[(6, 13, 7), int64]) -> (Tensor[(6, 13, 7), int64], Tensor[(6, 13, 7), float32]) {
  %322 = cast(%var_4396, dtype="int64") /* ty=Tensor[(6, 13, 1), int64] */;
  %323 = cast(%var_4397, dtype="int64") /* ty=Tensor[(6, 13, 7), int64] */;
  %324 = cast(%var_4397, dtype="float32") /* ty=Tensor[(6, 13, 7), float32] */;
  %325 = logical_xor(%322, %323) /* ty=Tensor[(6, 13, 7), int64] */;
  %326 = atanh(%324) /* ty=Tensor[(6, 13, 7), float32] */;
  (%325, %326)
}

def @func_6579() -> (Tensor[(9, 12, 15), float64],) {
  %327 = @func_5000() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), float32]) */;
  %328 = %327.1;
  %329 = cast(%328, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %330 = log10(%329) /* ty=Tensor[(9, 12, 15), float64] */;
  (%330,)
}

def @func_3060() -> (Tensor[(9, 12, 15), int64],) {
  %331 = @func_2128() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %332 = %331.0;
  (%332,)
}

def @func_1629() -> (Tensor[(9, 12, 15), int64], Tensor[(240), float64]) {
  %333 = @func_1010() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
  %334 = %333.1;
  %335 = @func_514() /* ty=Tensor[(240), float64] */;
  (%334, %335)
}

def @func_4797() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  %336 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %337 = @func_4350() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %338 = %336.0;
  %339 = %337.0;
  (%338, %339)
}

def @func_1210(%var_1188: Tensor[(5, 14, 7), float32], %var_1189: Tensor[(5, 14, 7), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(5, 14, 7), bool]) {
  %340 = @func_1010() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
  %341 = cast(%var_1189, dtype="float32") /* ty=Tensor[(5, 14, 7), float32] */;
  %342 = shape_of(%var_1188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_1188, dtype="float32") /* ty=Tensor[(5, 14, 7), float32] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %345 = floor_mod(%343, %344) /* ty=Tensor[(5, 14, 7), float32] */;
  %346 = cast(%var_1189, dtype="bool") /* ty=Tensor[(5, 14, 7), bool] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%345, dtype="bool") /* ty=Tensor[(5, 14, 7), bool] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %350 = %340.0;
  %351 = greater_equal(%348, %349) /* ty=Tensor[(5, 14, 7), bool] */;
  (%350, %351)
}

def @func_3495(%var_3444: float64, %var_3454: Tensor[(3), uint64], %var_3462: Tensor[(630), float64], %var_3463: Tensor[(1620), int64]) -> (Tensor[(13, 13, 13), bool], Tensor[(3, 1, 1), uint64], Tensor[(3), uint64], Tensor[(9, 12, 15), float64], Tensor[(630), float64], Tensor[(1620), int64], Tensor[(3, 1, 1), uint64], Tensor[(13, 13, 13), float64], Tensor[(210), float32], Tensor[(480), float32]) {
  %352 = cast(%var_3444, dtype="bool") /* ty=bool */;
  %353 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 13, 13), float64] */, dtype="bool") /* ty=Tensor[(13, 13, 13), bool] */;
  %354 = cast(%var_3444, dtype="uint64") /* ty=uint64 */;
  %355 = cast(%var_3454, dtype="uint64") /* ty=Tensor[(3), uint64] */;
  %356 = reshape(%354, newshape=[]) /* ty=uint64 */;
  %357 = reshape(%355, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), uint64] */;
  %358 = @func_3043(%356, %357) /* ty=(Tensor[(3, 1, 1), uint64],) */;
  %359 = cast(%var_3462, dtype="float64") /* ty=Tensor[(630), float64] */;
  %360 = cast(%var_3463, dtype="int64") /* ty=Tensor[(1620), int64] */;
  %361 = cast(%var_3444, dtype="int16") /* ty=int16 */;
  %362 = reshape(%359, newshape=[630]) /* ty=Tensor[(630), float64] */;
  %363 = reshape(%360, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), int64] */;
  %364 = reshape(%361, newshape=[]) /* ty=int16 */;
  %365 = @func_2532(%362, %363, %364) /* ty=(Tensor[(240), float64], Tensor[(240), float64], Tensor[(210), float32], Tensor[(630), float64], Tensor[(9, 12, 15), float64], Tensor[(2, 9, 12), float32], Tensor[(216), float32], Tensor[(12, 2, 10), bool], Tensor[(5, 8, 14), uint64], int16, Tensor[(5, 8, 14), uint64], Tensor[(9, 12, 15), bool]) */;
  %366 = cast(%var_3444, dtype="uint64") /* ty=uint64 */;
  %367 = %358.0;
  %368 = cast(%367, dtype="uint64") /* ty=Tensor[(3, 1, 1), uint64] */;
  %369 = reshape(%366, newshape=[]) /* ty=uint64 */;
  %370 = reshape(%368, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), uint64] */;
  %371 = @func_3043(%369, %370) /* ty=(Tensor[(3, 1, 1), uint64],) */;
  %372 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 13, 13), float64] */, dtype="float32") /* ty=Tensor[(13, 13, 13), float32] */;
  %373 = sqrt(%372) /* ty=Tensor[(13, 13, 13), float32] */;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(13, 13, 13), float64] */;
  %375 = cast(meta[relay.Constant][16] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %376 = cast(%var_3444, dtype="bool") /* ty=bool */;
  %377 = reshape(%375, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float32] */;
  %378 = reshape(%376, newshape=[]) /* ty=bool */;
  %379 = @func_1712(%377, %378) /* ty=(Tensor[(4, 10, 12), float32], Tensor[(70, 9), float64], Tensor[(210), float32], bool, bool) */;
  %380 = not_equal(%352, %353) /* ty=Tensor[(13, 13, 13), bool] */;
  %381 = %365.4;
  %382 = %371.0;
  %383 = atan(%374) /* ty=Tensor[(13, 13, 13), float64] */;
  %384 = %379.2;
  (%380, %367, %var_3454, %381, %var_3462, %var_3463, %382, %383, %384, meta[relay.Constant][16] /* ty=Tensor[(480), float32] */)
}

def @func_2915(%var_2902: bool) -> (Tensor[(9, 12, 15), int64], bool, Tensor[(12, 2, 10), float32]) {
  %385 = @func_2551() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %386 = cast(%var_2902, dtype="bool") /* ty=bool */;
  %387 = reshape(%386, newshape=[]) /* ty=bool */;
  %388 = @func_408(%387) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */;
  %389 = %388.5;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(12, 2, 10), float32] */;
  %391 = %385.0;
  %392 = asin(%390) /* ty=Tensor[(12, 2, 10), float32] */;
  (%391, %var_2902, %392)
}

def @func_4466() -> Tensor[(9, 12, 15), int64] {
  %393 = @func_1010() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
  %393.1
}

def @func_5772() -> (Tensor[(9, 12, 15), int64],) {
  %394 = @func_2551() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %395 = %394.0;
  (%395,)
}

def @func_6403() -> (Tensor[(9, 12, 15), int64],) {
  %396 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %397 = %396.0;
  (%397,)
}

def @func_514() -> Tensor[(240), float64] {
  %398 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %398.1
}

def @func_6509() -> (Tensor[(9, 12, 15), bool],) {
  %399 = @func_1454() /* ty=(Tensor[(9, 12, 15), bool],) */;
  %400 = %399.0;
  (%400,)
}

def @func_4536(%var_4475: Tensor[(7, 3, 14), float64], %var_4492: Tensor[(7, 3, 14), float64]) -> (Tensor[(240), float64], Tensor[(7, 3, 14), bool], Tensor[(7, 3, 14), float32]) {
  %401 = cast(%var_4475, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
  %402 = acosh(%401) /* ty=Tensor[(7, 3, 14), float64] */;
  %403 = cast(%var_4492, dtype="bool") /* ty=Tensor[(7, 3, 14), bool] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%402, dtype="bool") /* ty=Tensor[(7, 3, 14), bool] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %407 = cast(%402, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
  %408 = sigmoid(%407) /* ty=Tensor[(7, 3, 14), float32] */;
  %409 = cast(%var_4475, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%408, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %413 = @func_1908() /* ty=Tensor[(240), float64] */;
  %414 = logical_or(%405, %406) /* ty=Tensor[(7, 3, 14), bool] */;
  %415 = mod(%411, %412) /* ty=Tensor[(7, 3, 14), float32] */;
  (%413, %414, %415)
}

def @func_6161() -> Tensor[(9, 12, 15), bool] {
  %416 = @func_1454() /* ty=(Tensor[(9, 12, 15), bool],) */;
  %416.0
}

def @func_2881() -> Tensor[(9, 12, 15), int64] {
  %417 = @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */;
  %417.0
}

def @func_4724(%var_4711: Tensor[(1, 9, 3), int32], %var_4712: Tensor[(14, 9, 3), int32], %var_4719: Tensor[(1, 2016), float32]) -> (Tensor[(14, 9, 3), int32], Tensor[(12, 14, 12), bool], Tensor[(1, 2016), float32]) {
  %418 = cast(%var_4711, dtype="int32") /* ty=Tensor[(1, 9, 3), int32] */;
  %419 = cast(%var_4712, dtype="int32") /* ty=Tensor[(14, 9, 3), int32] */;
  %420 = cast(%var_4719, dtype="float32") /* ty=Tensor[(1, 2016), float32] */;
  %421 = reshape(%420, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float32] */;
  %422 = @func_3622(%421) /* ty=(Tensor[(12, 14, 12), float32], Tensor[(12, 14, 12), bool]) */;
  %423 = maximum(%418, %419) /* ty=Tensor[(14, 9, 3), int32] */;
  %424 = %422.1;
  (%423, %424, %var_4719)
}

def @func_887(%var_806: Tensor[(9, 12, 15), int64]) -> (Tensor[(9, 12, 15), float32], Tensor[(9, 12, 15), uint16], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(858), float64]) {
  %425 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %426 = %425.0;
  %427 = cast(%var_806, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
  %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%426, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %431 = cast(%var_806, dtype="uint16") /* ty=Tensor[(9, 12, 15), uint16] */;
  %432 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%426, dtype="uint16") /* ty=Tensor[(9, 12, 15), uint16] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %435 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %436 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %437 = reshape(%436, newshape=[]) /* ty=bool */;
  %438 = @func_408(%437) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */;
  %439 = cast(meta[relay.Constant][17] /* ty=Tensor[(858), float32] */, dtype="float32") /* ty=Tensor[(858), float32] */;
  %440 = cast(meta[relay.Constant][17] /* ty=Tensor[(858), float32] */, dtype="float32") /* ty=Tensor[(858), float32] */;
  %441 = %438.5;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(12, 2, 10), float64] */;
  %443 = reshape(%439, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %444 = reshape(%440, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %445 = reshape(%442, newshape=[240, 1]) /* ty=Tensor[(240, 1), float64] */;
  %446 = @func_493(%443, %444, %445) /* ty=(Tensor[(11, 6, 13), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240, 1), float64]) */;
  %447 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %448 = cast(meta[relay.Constant][17] /* ty=Tensor[(858), float32] */, dtype="float32") /* ty=Tensor[(858), float32] */;
  %449 = cos(%448) /* ty=Tensor[(858), float32] */;
  %450 = cast(%449, dtype="float32") /* ty=Tensor[(858), float32] */;
  %451 = tan(%450) /* ty=Tensor[(858), float32] */;
  %452 = cast(%451, dtype="float64") /* ty=Tensor[(858), float64] */;
  %453 = cast(False /* ty=bool */, dtype="float64") /* ty=float64 */;
  %454 = power(%429, %430) /* ty=Tensor[(9, 12, 15), float32] */;
  %455 = add(%433, %434) /* ty=Tensor[(9, 12, 15), uint16] */;
  %456 = %435.0;
  %457 = %446.2;
  %458 = %447.0;
  %459 = floor_divide(%452, %453) /* ty=Tensor[(858), float64] */;
  (%454, %455, %456, %441, %457, %458, %459)
}

def @func_1482() -> Tensor[(240), float64] {
  %460 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %460.1
}

def @func_6267(%var_6239: Tensor[(9, 14, 4), float64]) -> (Tensor[(9, 14, 4), float64], Tensor[(9, 14, 4), float32], Tensor[(12, 2, 10), uint8], bool) {
  %461 = cast(%var_6239, dtype="float64") /* ty=Tensor[(9, 14, 4), float64] */;
  %462 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(9, 14, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 14, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 14, 4), float64] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %465 = cast(%var_6239, dtype="float32") /* ty=Tensor[(9, 14, 4), float32] */;
  %466 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %467 = reshape(%466, newshape=[]) /* ty=bool */;
  %468 = @func_408(%467) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */;
  %469 = add(%463, %464) /* ty=Tensor[(9, 14, 4), float64] */;
  %470 = cosh(%465) /* ty=Tensor[(9, 14, 4), float32] */;
  %471 = %468.5;
  (%469, %470, %471, False /* ty=bool */)
}

def @func_5750(%var_5737: Tensor[(7, 70), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32], Tensor[(7, 70), float32]) {
  %472 = @func_641() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) */;
  %473 = cast(%var_5737, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
  %474 = %472.0;
  %475 = cast(%474, dtype="int64") /* ty=Tensor[(9, 12, 15), int64] */;
  %476 = reshape(%473, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %477 = reshape(%475, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), int64] */;
  %478 = @func_4306(%476, %477) /* ty=(Tensor[(240), float64], Tensor[(490), float32], Tensor[(240), float64], Tensor[(9, 12, 15), uint8], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32]) */;
  %479 = cast(%var_5737, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
  %480 = %478.5;
  %481 = sinh(%479) /* ty=Tensor[(7, 70), float32] */;
  (%474, %480, %481)
}

def @func_5506() -> (Tensor[(9, 12, 15), float32], Tensor[(105, 2), float32], Tensor[(15, 8, 11), uint8], Tensor[(1320), uint8], Tensor[(78), int64], Tensor[(6, 13, 7), bool], Tensor[(210), float32], Tensor[(2, 1, 11), float64], Tensor[(22), float64]) {
  %482 = @func_2579() /* ty=(Tensor[(9, 12, 15), float32],) */;
  %483 = @func_5223() /* ty=(Tensor[(240), float64], Tensor[(6, 10, 13), uint32], Tensor[(780), uint32], Tensor[(105, 2), float32]) */;
  %484 = cast(meta[relay.Constant][19] /* ty=Tensor[(1320), uint8] */, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %485 = reshape(%484, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), uint8] */;
  %486 = @func_693(%485) /* ty=(Tensor[(15, 8, 11), uint8],) */;
  %487 = cast(meta[relay.Constant][20] /* ty=Tensor[(78), int64] */, dtype="int64") /* ty=Tensor[(78), int64] */;
  %488 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 546), int64] */, dtype="int64") /* ty=Tensor[(1, 546), int64] */;
  %489 = reshape(%487, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
  %490 = reshape(%488, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int64] */;
  %491 = @func_4410(%489, %490) /* ty=(Tensor[(6, 13, 7), int64], Tensor[(6, 13, 7), float32]) */;
  %492 = %491.0;
  %493 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 546), int64] */, dtype="bool") /* ty=Tensor[(1, 546), bool] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="bool") /* ty=Tensor[(6, 13, 7), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = %483.3;
  %498 = cast(%497, dtype="float32") /* ty=Tensor[(105, 2), float32] */;
  %499 = reshape(%498, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %500 = @func_2857(%499) /* ty=(Tensor[(9, 12, 15), uint32], Tensor[(9, 12, 15), int64], Tensor[(210), float32]) */;
  %501 = cast(meta[relay.Constant][22] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %502 = reshape(%501, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float64] */;
  %503 = @func_4024(%502) /* ty=(Tensor[(2, 1, 11), float64],) */;
  %504 = %482.0;
  %505 = %486.0;
  %506 = less(%495, %496) /* ty=Tensor[(6, 13, 7), bool] */;
  %507 = %500.2;
  %508 = %503.0;
  (%504, %497, %505, meta[relay.Constant][19] /* ty=Tensor[(1320), uint8] */, meta[relay.Constant][20] /* ty=Tensor[(78), int64] */, %506, %507, %508, meta[relay.Constant][22] /* ty=Tensor[(22), float64] */)
}

def @func_2532(%var_2503: Tensor[(630), float64], %var_2505: Tensor[(9, 12, 15), int64], %var_2523: int16) -> (Tensor[(240), float64], Tensor[(240), float64], Tensor[(210), float32], Tensor[(630), float64], Tensor[(9, 12, 15), float64], Tensor[(2, 9, 12), float32], Tensor[(216), float32], Tensor[(12, 2, 10), bool], Tensor[(5, 8, 14), uint64], int16, Tensor[(5, 8, 14), uint64], Tensor[(9, 12, 15), bool]) {
  %509 = cast(meta[relay.Constant][23] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %510 = cast(%var_2503, dtype="float64") /* ty=Tensor[(630), float64] */;
  %511 = reshape(%509, newshape=[14, 15, 1]) /* ty=Tensor[(14, 15, 1), float32] */;
  %512 = reshape(%510, newshape=[14, 15, 3]) /* ty=Tensor[(14, 15, 3), float64] */;
  %513 = @func_1087(%511, %512) /* ty=(Tensor[(240), float64], Tensor[(14, 15, ?), bool], Tensor[(14, 15, 3), bool]) */;
  %514 = @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */;
  %515 = %514.0;
  %516 = cast(%var_2505, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %520 = cast(meta[relay.Constant][24] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %521 = reshape(%520, newshape=[2, 9, 12]) /* ty=Tensor[(2, 9, 12), float32] */;
  %522 = @func_2205(%521) /* ty=(Tensor[(2, 9, 12), float32],) */;
  %523 = cast(%515, dtype="uint16") /* ty=Tensor[(9, 12, 15), uint16] */;
  %524 = reshape(%523, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), uint16] */;
  %525 = @func_1176(%524) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), bool], Tensor[(12, 2, 10), bool]) */;
  %526 = cast(%var_2523, dtype="int16") /* ty=int16 */;
  %527 = reshape(%526, newshape=[]) /* ty=int16 */;
  %528 = @func_1656(%527) /* ty=(Tensor[(5, 8, 14), uint64],) */;
  %529 = cast(%var_2523, dtype="int16") /* ty=int16 */;
  %530 = reshape(%529, newshape=[]) /* ty=int16 */;
  %531 = @func_1656(%530) /* ty=(Tensor[(5, 8, 14), uint64],) */;
  %532 = @func_1454() /* ty=(Tensor[(9, 12, 15), bool],) */;
  %533 = @func_2436() /* ty=Tensor[(240), float64] */;
  %534 = %513.0;
  %535 = mod(%518, %519) /* ty=Tensor[(9, 12, 15), float64] */;
  %536 = %522.0;
  %537 = %525.3;
  %538 = %528.0;
  %539 = %531.0;
  %540 = %532.0;
  (%533, %534, meta[relay.Constant][23] /* ty=Tensor[(210), float32] */, %var_2503, %535, %536, meta[relay.Constant][24] /* ty=Tensor[(216), float32] */, %537, %538, %var_2523, %539, %540)
}

def @func_5924() -> (Tensor[(9, 12, 15), bool],) {
  %541 = @func_1454() /* ty=(Tensor[(9, 12, 15), bool],) */;
  %542 = %541.0;
  (%542,)
}

def @func_1087(%var_1051: Tensor[(14, 15, 1), float32], %var_1083: Tensor[(14, 15, 3), float64]) -> (Tensor[(240), float64], Tensor[(14, 15, ?), bool], Tensor[(14, 15, 3), bool]) {
  %543 = @func_937() /* ty=(Tensor[(240), float64],) */;
  %544 = cast(%var_1051, dtype="float32") /* ty=Tensor[(14, 15, 1), float32] */;
  %545 = log2(%544) /* ty=Tensor[(14, 15, 1), float32] */;
  %546 = cast(%var_1051, dtype="bool") /* ty=Tensor[(14, 15, 1), bool] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="bool") /* ty=Tensor[(14, 15, 1), bool] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %550 = cast(%545, dtype="float64") /* ty=Tensor[(14, 15, 1), float64] */;
  %551 = shape_of(%var_1051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%var_1051, dtype="float64") /* ty=Tensor[(14, 15, 1), float64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %554 = floor_divide(%552, %553) /* ty=Tensor[(14, 15, ?), float64] */;
  %555 = cast(%554, dtype="bool") /* ty=Tensor[(14, 15, ?), bool] */;
  %556 = cast(%var_1083, dtype="bool") /* ty=Tensor[(14, 15, 3), bool] */;
  %557 = %543.0;
  %558 = greater(%548, %549) /* ty=Tensor[(14, 15, ?), bool] */;
  %559 = equal(%555, %556) /* ty=Tensor[(14, 15, 3), bool] */;
  (%557, %558, %559)
}

def @func_1397(%var_1385: Tensor[(210), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(70, 9), float64], Tensor[(780), uint32], Tensor[(210), float32], Tensor[(9, 12, 15), int64]) {
  %560 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %561 = cast(meta[relay.Constant][25] /* ty=Tensor[(780), uint32] */, dtype="uint32") /* ty=Tensor[(780), uint32] */;
  %562 = cast(meta[relay.Constant][25] /* ty=Tensor[(780), uint32] */, dtype="uint32") /* ty=Tensor[(780), uint32] */;
  %563 = cast(%var_1385, dtype="float32") /* ty=Tensor[(210), float32] */;
  %564 = reshape(%561, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), uint32] */;
  %565 = reshape(%562, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), uint32] */;
  %566 = reshape(%563, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %567 = @func_1347(%564, %565, %566) /* ty=(Tensor[(6, 10, 13), uint32], Tensor[(14, 15, ?), bool], Tensor[(210), float32], Tensor[(70, 9), float64], Tensor[(9, 12, 15), int64]) */;
  %568 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  %569 = cast(%568, dtype="uint16") /* ty=Tensor[(9, 12, 15), uint16] */;
  %570 = reshape(%569, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), uint16] */;
  %571 = @func_1176(%570) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), bool], Tensor[(12, 2, 10), bool]) */;
  %572 = %560.0;
  %573 = %567.3;
  %574 = %571.0;
  (%572, %568, %573, meta[relay.Constant][25] /* ty=Tensor[(780), uint32] */, %var_1385, %574)
}

def @func_4350() -> (Tensor[(9, 12, 15), int64],) {
  %575 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %576 = %575.0;
  (%576,)
}

def @func_2192(%var_2182: Tensor[(240), float64]) -> (Tensor[(9, 12, 15), uint32], Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(240), int8]) {
  %577 = @func_1533() /* ty=(Tensor[(210, 1), float32], Tensor[(9, 12, 15), uint32]) */;
  %578 = cast(%var_2182, dtype="float64") /* ty=Tensor[(240), float64] */;
  %579 = reshape(%578, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
  %580 = @func_52(%579) /* ty=(Tensor[(12, 2, 10), uint8],) */;
  %581 = cast(%var_2182, dtype="float64") /* ty=Tensor[(240), float64] */;
  %582 = reshape(%581, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %583 = @func_607(%582) /* ty=(Tensor[(240), int8], Tensor[(12, 2, 10), uint8]) */;
  %584 = %577.1;
  %585 = %580.0;
  %586 = %583.0;
  (%584, %585, %var_2182, %586)
}

def @func_4757() -> (Tensor[(240), float64], Tensor[(9, 12, 15), int64]) {
  %587 = @func_2551() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %588 = @func_1908() /* ty=Tensor[(240), float64] */;
  %589 = %587.0;
  (%588, %589)
}

def @func_4380() -> Tensor[(9, 12, 15), int64] {
  %590 = @func_3060() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %590.0
}

def @func_5250() -> (Tensor[(240), float64],) {
  %591 = @func_2352() /* ty=(Tensor[(240), float64],) */;
  %592 = %591.0;
  (%592,)
}

def @func_1840() -> Tensor[(240), float64] {
  %593 = @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */;
  %593.1
}

def @func_2857(%var_2837: Tensor[(210), float32]) -> (Tensor[(9, 12, 15), uint32], Tensor[(9, 12, 15), int64], Tensor[(210), float32]) {
  %594 = @func_1533() /* ty=(Tensor[(210, 1), float32], Tensor[(9, 12, 15), uint32]) */;
  %595 = cast(%var_2837, dtype="float32") /* ty=Tensor[(210), float32] */;
  %596 = reshape(%595, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %597 = @func_1397(%596) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(70, 9), float64], Tensor[(780), uint32], Tensor[(210), float32], Tensor[(9, 12, 15), int64]) */;
  %598 = %594.1;
  %599 = %597.0;
  (%598, %599, %var_2837)
}

def @func_693(%var_689: Tensor[(15, 8, 11), uint8]) -> (Tensor[(15, 8, 11), uint8],) {
  %600 = cast(%var_689, dtype="uint8") /* ty=Tensor[(15, 8, 11), uint8] */;
  %601 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(15, 8, 11), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 8, 11), uint8] */, dtype="uint8") /* ty=Tensor[(15, 8, 11), uint8] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %604 = right_shift(%602, %603) /* ty=Tensor[(15, 8, 11), uint8] */;
  (%604,)
}

def @func_4444(%var_4437: Tensor[(2016), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(12, 14, 12), float32], Tensor[(2016), float32], Tensor[(240), float64]) {
  %605 = cast(%var_4437, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %606 = reshape(%605, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float32] */;
  %607 = @func_3622(%606) /* ty=(Tensor[(12, 14, 12), float32], Tensor[(12, 14, 12), bool]) */;
  %608 = @func_2711() /* ty=Tensor[(9, 12, 15), int64] */;
  %609 = %607.0;
  %610 = @func_2436() /* ty=Tensor[(240), float64] */;
  (%608, %609, %var_4437, %610)
}

def @func_6609() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32], Tensor[(210), float32]) {
  %611 = @func_3060() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %612 = cast(meta[relay.Constant][27] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %613 = reshape(%612, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %614 = @func_2857(%613) /* ty=(Tensor[(9, 12, 15), uint32], Tensor[(9, 12, 15), int64], Tensor[(210), float32]) */;
  %615 = %611.0;
  %616 = %614.0;
  (%615, %616, meta[relay.Constant][27] /* ty=Tensor[(210), float32] */)
}

def @func_6099(%var_6093: Tensor[(210), float32]) -> (Tensor[(780), uint32], Tensor[(9, 12, 15), uint32], Tensor[(210), float32]) {
  %617 = @func_5223() /* ty=(Tensor[(240), float64], Tensor[(6, 10, 13), uint32], Tensor[(780), uint32], Tensor[(105, 2), float32]) */;
  %618 = cast(%var_6093, dtype="float32") /* ty=Tensor[(210), float32] */;
  %619 = reshape(%618, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %620 = @func_2857(%619) /* ty=(Tensor[(9, 12, 15), uint32], Tensor[(9, 12, 15), int64], Tensor[(210), float32]) */;
  %621 = %617.2;
  %622 = %620.0;
  (%621, %622, %var_6093)
}

def @func_4052() -> (Tensor[(9, 12, 15), float32],) {
  %623 = @func_2579() /* ty=(Tensor[(9, 12, 15), float32],) */;
  %624 = %623.0;
  (%624,)
}

def @func_1283(%var_1251: Tensor[(490), float32]) -> (Tensor[(10, 5), float64], Tensor[(9, 12, 15), int64], Tensor[(490), float32], Tensor[(240), float64]) {
  %625 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 5), float64] */;
  %626 = cast(%var_1251, dtype="float32") /* ty=Tensor[(490), float32] */;
  %627 = cast(%var_1251, dtype="float32") /* ty=Tensor[(490), float32] */;
  %628 = reshape(%626, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float32] */;
  %629 = reshape(%627, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float32] */;
  %630 = @func_1210(%628, %629) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(5, 14, 7), bool]) */;
  %631 = @func_937() /* ty=(Tensor[(240), float64],) */;
  %632 = atan(%625) /* ty=Tensor[(10, 5), float64] */;
  %633 = %630.0;
  %634 = %631.0;
  (%632, %633, %var_1251, %634)
}

def @main(%var_6964: bool) -> (Tensor[(9, 12, 15), int64], Tensor[(3), uint64], bool, Tensor[(12, 2, 10), float32]) {
  %635 = @func_5021() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %636 = %635.0;
  %637 = cast(%636, dtype="int64") /* ty=Tensor[(9, 12, 15), int64] */;
  %638 = reshape(%637, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), int64] */;
  %639 = @func_3408(%638) /* ty=(Tensor[(9, 12, 15), bool], Tensor[(3, 1, 1), uint64], uint64, Tensor[(3), uint64]) */;
  %640 = cast(%var_6964, dtype="bool") /* ty=bool */;
  %641 = reshape(%640, newshape=[]) /* ty=bool */;
  %642 = @func_408(%641) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */;
  %643 = %642.0;
  %644 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 2, 10), uint8] */, dtype="float32") /* ty=Tensor[(12, 2, 10), float32] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="float32") /* ty=Tensor[(12, 2, 10), float32] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %648 = %639.3;
  %649 = maximum(%646, %647) /* ty=Tensor[(12, 2, 10), float32] */;
  (%636, %648, %var_6964, %649)
}

def @func_6074() -> (Tensor[(9, 12, 15), int64], Tensor[(240), float64]) {
  %650 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %651 = @func_5223() /* ty=(Tensor[(240), float64], Tensor[(6, 10, 13), uint32], Tensor[(780), uint32], Tensor[(105, 2), float32]) */;
  %652 = %650.0;
  %653 = %651.0;
  (%652, %653)
}

def @func_2672() -> (Tensor[(9, 12, 15), int64],) {
  %654 = @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */;
  %655 = %654.0;
  (%655,)
}

def @func_2579() -> (Tensor[(9, 12, 15), float32],) {
  %656 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %657 = %656.0;
  %658 = cast(%657, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
  %659 = erf(%658) /* ty=Tensor[(9, 12, 15), float32] */;
  (%659,)
}

def @func_3831() -> (Tensor[(240), float64], Tensor[(240), float64]) {
  %660 = @func_2352() /* ty=(Tensor[(240), float64],) */;
  %661 = %660.0;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(240), float64] */;
  %663 = sin(%662) /* ty=Tensor[(240), float64] */;
  %664 = @func_514() /* ty=Tensor[(240), float64] */;
  (%663, %664)
}

def @func_641() -> (Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) {
  %665 = cast(meta[relay.Constant][30] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %666 = reshape(%665, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
  %667 = @func_52(%666) /* ty=(Tensor[(12, 2, 10), uint8],) */;
  %668 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  %669 = %667.0;
  (%668, %669, meta[relay.Constant][30] /* ty=Tensor[(240), float64] */)
}

def @func_5683(%var_5663: Tensor[(13, 13, 15), float32], %var_5671: Tensor[(13, 13, 15), float32]) -> (Tensor[(13, 13, 15), float32], Tensor[(13, 13, 15), int32]) {
  %670 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 13, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 1), float32] */;
  %671 = cast(%var_5663, dtype="float32") /* ty=Tensor[(13, 13, 15), float32] */;
  %672 = divide(%670, %671) /* ty=Tensor[(13, 13, 15), float32] */;
  %673 = cast(%var_5671, dtype="float64") /* ty=Tensor[(13, 13, 15), float64] */;
  %674 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%672, dtype="float64") /* ty=Tensor[(13, 13, 15), float64] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %677 = floor_divide(%675, %676) /* ty=Tensor[(13, 13, 15), float64] */;
  %678 = cast(%var_5663, dtype="float32") /* ty=Tensor[(13, 13, 15), float32] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%677, dtype="float32") /* ty=Tensor[(13, 13, 15), float32] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %682 = cast(%672, dtype="int32") /* ty=Tensor[(13, 13, 15), int32] */;
  %683 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%677, dtype="int32") /* ty=Tensor[(13, 13, 15), int32] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %686 = floor_mod(%680, %681) /* ty=Tensor[(13, 13, 15), float32] */;
  %687 = bitwise_and(%684, %685) /* ty=Tensor[(13, 13, 15), int32] */;
  (%686, %687)
}

def @func_5074(%var_5064: uint64, %var_5065: Tensor[(6, 2, 3), uint64], %var_5070: Tensor[(1100), int16], %var_5071: Tensor[(10, 78), uint32]) -> (Tensor[(6, 2, 3), uint64], Tensor[(10, 11, 10), float32], Tensor[(1100), int16], Tensor[(10, 78), uint32]) {
  %688 = cast(%var_5064, dtype="uint64") /* ty=uint64 */;
  %689 = cast(%var_5065, dtype="uint64") /* ty=Tensor[(6, 2, 3), uint64] */;
  %690 = cast(%var_5070, dtype="int16") /* ty=Tensor[(1100), int16] */;
  %691 = cast(%var_5071, dtype="uint32") /* ty=Tensor[(10, 78), uint32] */;
  %692 = reshape(%690, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), int16] */;
  %693 = reshape(%691, newshape=[780]) /* ty=Tensor[(780), uint32] */;
  %694 = @func_4011(%692, %693) /* ty=(Tensor[(10, 11, 10), int16], Tensor[(10, 11, 10), float32], Tensor[(12, 2, 10), uint8], Tensor[(11, 78), float32], Tensor[(240), float64], Tensor[(210), float32], Tensor[(780), uint32], Tensor[(1, 210), float32]) */;
  %695 = multiply(%688, %689) /* ty=Tensor[(6, 2, 3), uint64] */;
  %696 = %694.1;
  (%695, %696, %var_5070, %var_5071)
}

def @func_4950() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  %697 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %698 = @func_2711() /* ty=Tensor[(9, 12, 15), int64] */;
  %699 = %697.0;
  (%698, %699)
}

def @func_1908() -> Tensor[(240), float64] {
  %700 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %700.1
}

def @func_4609(%var_4578: Tensor[(8, 7, 6), float64]) -> (Tensor[(8, 7, 6), float64], Tensor[(8, 7, 6), float64], Tensor[(2, 1, 11), float64], Tensor[(22, 1), float64], Tensor[(8, 7, 6), float64]) {
  %701 = cast(%var_4578, dtype="float64") /* ty=Tensor[(8, 7, 6), float64] */;
  %702 = cast(%var_4578, dtype="float64") /* ty=Tensor[(8, 7, 6), float64] */;
  %703 = cast(meta[relay.Constant][32] /* ty=Tensor[(22, 1), float64] */, dtype="float64") /* ty=Tensor[(22, 1), float64] */;
  %704 = reshape(%703, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float64] */;
  %705 = @func_4024(%704) /* ty=(Tensor[(2, 1, 11), float64],) */;
  %706 = cast(%var_4578, dtype="float64") /* ty=Tensor[(8, 7, 6), float64] */;
  %707 = exp(%701) /* ty=Tensor[(8, 7, 6), float64] */;
  %708 = tan(%702) /* ty=Tensor[(8, 7, 6), float64] */;
  %709 = %705.0;
  %710 = sigmoid(%706) /* ty=Tensor[(8, 7, 6), float64] */;
  (%707, %708, %709, meta[relay.Constant][32] /* ty=Tensor[(22, 1), float64] */, %710)
}

def @func_325() -> Tensor[(9, 12, 15), int64] {
  %711 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %712 = %711.2;
  %713 = cast(%712, dtype="int64") /* ty=Tensor[(9, ?, 15), int64] */;
  %714 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 12, 15), bool] */, dtype="int64") /* ty=Tensor[(9, 12, 15), int64] */;
  left_shift(%713, %714) /* ty=Tensor[(9, 12, 15), int64] */
}

def @func_3541(%var_3534: Tensor[(210, 9), float32]) -> Tensor[(210, 9), uint64] {
  %715 = @func_1533() /* ty=(Tensor[(210, 1), float32], Tensor[(9, 12, 15), uint32]) */;
  %716 = %715.0;
  %717 = cast(%716, dtype="uint64") /* ty=Tensor[(210, 1), uint64] */;
  %718 = cast(%var_3534, dtype="uint64") /* ty=Tensor[(210, 9), uint64] */;
  right_shift(%717, %718) /* ty=Tensor[(210, 9), uint64] */
}

def @func_493(%var_459: Tensor[(11, 6, 13), float32], %var_460: Tensor[(11, 6, 13), float32], %var_482: Tensor[(240, 1), float64]) -> (Tensor[(11, 6, 13), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240, 1), float64]) {
  %719 = cast(%var_460, dtype="bool") /* ty=Tensor[(11, 6, 13), bool] */;
  %720 = shape_of(%var_459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_459, dtype="bool") /* ty=Tensor[(11, 6, 13), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %723 = cast(%var_482, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %724 = reshape(%723, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
  %725 = @func_52(%724) /* ty=(Tensor[(12, 2, 10), uint8],) */;
  %726 = not_equal(%721, %722) /* ty=Tensor[(11, 6, 13), bool] */;
  %727 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  %728 = %725.0;
  (%726, %727, %728, %var_482)
}

def @func_2781(%var_2765: Tensor[(1, 490), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(240), float64], Tensor[(10, 5), float64], Tensor[(1, 490), float32]) {
  %729 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %730 = cast(%var_2765, dtype="float32") /* ty=Tensor[(1, 490), float32] */;
  %731 = reshape(%730, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %732 = @func_1283(%731) /* ty=(Tensor[(10, 5), float64], Tensor[(9, 12, 15), int64], Tensor[(490), float32], Tensor[(240), float64]) */;
  %733 = %729.0;
  %734 = @func_514() /* ty=Tensor[(240), float64] */;
  %735 = %732.0;
  (%733, %734, %735, %var_2765)
}

def @func_1533() -> (Tensor[(210, 1), float32], Tensor[(9, 12, 15), uint32]) {
  %736 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  %737 = cast(meta[relay.Constant][34] /* ty=Tensor[(210, 1), float32] */, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %738 = reshape(%737, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %739 = @func_1397(%738) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(70, 9), float64], Tensor[(780), uint32], Tensor[(210), float32], Tensor[(9, 12, 15), int64]) */;
  %740 = %739.5;
  %741 = cast(%740, dtype="uint32") /* ty=Tensor[(9, 12, 15), uint32] */;
  %742 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%736, dtype="uint32") /* ty=Tensor[(9, 12, 15), uint32] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %745 = minimum(%743, %744) /* ty=Tensor[(9, 12, 15), uint32] */;
  (meta[relay.Constant][34] /* ty=Tensor[(210, 1), float32] */, %745)
}

def @func_4128() -> (Tensor[(240), float64],) {
  %746 = @func_3831() /* ty=(Tensor[(240), float64], Tensor[(240), float64]) */;
  %747 = %746.0;
  (%747,)
}

def @func_3158() -> (Tensor[(240), float64], Tensor[(240), float64]) {
  %748 = @func_1908() /* ty=Tensor[(240), float64] */;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(240), float64] */;
  %750 = reshape(%749, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %751 = @func_2192(%750) /* ty=(Tensor[(9, 12, 15), uint32], Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(240), int8]) */;
  %752 = %751.2;
  (%748, %752)
}

def @func_1656(%var_1637: int16) -> (Tensor[(5, 8, 14), uint64],) {
  %753 = cast(%var_1637, dtype="int16") /* ty=int16 */;
  %754 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 8, 14), int16] */, dtype="int16") /* ty=Tensor[(5, 8, 14), int16] */;
  %755 = bitwise_or(%753, %754) /* ty=Tensor[(5, 8, 14), int16] */;
  %756 = cast(%755, dtype="uint64") /* ty=Tensor[(5, 8, 14), uint64] */;
  %757 = cast(%var_1637, dtype="uint64") /* ty=uint64 */;
  %758 = add(%756, %757) /* ty=Tensor[(5, 8, 14), uint64] */;
  (%758,)
}

def @func_3383(%var_3361: float64, %var_3362: Tensor[(5, 4, 1), float64]) -> (Tensor[(5, 4, 1), float64], Tensor[(5, 4, 1), float64]) {
  %759 = cast(%var_3361, dtype="float64") /* ty=float64 */;
  %760 = cast(%var_3362, dtype="float64") /* ty=Tensor[(5, 4, 1), float64] */;
  %761 = cast(%var_3362, dtype="float64") /* ty=Tensor[(5, 4, 1), float64] */;
  %762 = exp(%761) /* ty=Tensor[(5, 4, 1), float64] */;
  %763 = cast(%762, dtype="float64") /* ty=Tensor[(5, 4, 1), float64] */;
  %764 = power(%759, %760) /* ty=Tensor[(5, 4, 1), float64] */;
  %765 = atanh(%763) /* ty=Tensor[(5, 4, 1), float64] */;
  (%764, %765)
}

def @func_174(%var_148: bool) -> (Tensor[(7, 1, 15), bool],) {
  %766 = cast(%var_148, dtype="bool") /* ty=bool */;
  %767 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 1, 15), bool] */, dtype="bool") /* ty=Tensor[(7, 1, 15), bool] */;
  %768 = logical_or(%766, %767) /* ty=Tensor[(7, 1, 15), bool] */;
  (%768,)
}

def @func_1712(%var_1689: Tensor[(4, 10, 12), float32], %var_1708: bool) -> (Tensor[(4, 10, 12), float32], Tensor[(70, 9), float64], Tensor[(210), float32], bool, bool) {
  %769 = cast(%var_1689, dtype="float32") /* ty=Tensor[(4, 10, 12), float32] */;
  %770 = cast(meta[relay.Constant][37] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %771 = reshape(%770, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %772 = @func_1397(%771) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(70, 9), float64], Tensor[(780), uint32], Tensor[(210), float32], Tensor[(9, 12, 15), int64]) */;
  %773 = cast(%var_1708, dtype="bool") /* ty=bool */;
  %774 = reshape(%773, newshape=[]) /* ty=bool */;
  %775 = @func_408(%774) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */;
  %776 = sigmoid(%769) /* ty=Tensor[(4, 10, 12), float32] */;
  %777 = %772.2;
  %778 = %775.2;
  (%776, %777, meta[relay.Constant][37] /* ty=Tensor[(210), float32] */, %778, %var_1708)
}

def @func_4924() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  %779 = @func_4466() /* ty=Tensor[(9, 12, 15), int64] */;
  %780 = @func_2711() /* ty=Tensor[(9, 12, 15), int64] */;
  (%779, %780)
}

def @func_6557() -> (Tensor[(240), float64], Tensor[(9, 12, 15), int64]) {
  %781 = @func_641() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) */;
  %782 = @func_4350() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %783 = %781.2;
  %784 = %782.0;
  (%783, %784)
}

def @func_6004(%var_5991: Tensor[(14, 1, 4), float64]) -> (Tensor[(14, 1, 4), float64], Tensor[(9, 12, 15), int64]) {
  %785 = cast(%var_5991, dtype="float64") /* ty=Tensor[(14, 1, 4), float64] */;
  %786 = log10(%785) /* ty=Tensor[(14, 1, 4), float64] */;
  %787 = @func_2881() /* ty=Tensor[(9, 12, 15), int64] */;
  (%786, %787)
}

def @func_5379() -> Tensor[(9, 12, 15), int64] {
  %788 = @func_3060() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %788.0
}

def @func_52(%var_41: Tensor[(12, 2, 10), float64]) -> (Tensor[(12, 2, 10), uint8],) {
  %789 = cast(%var_41, dtype="float64") /* ty=Tensor[(12, 2, 10), float64] */;
  %790 = atan(%789) /* ty=Tensor[(12, 2, 10), float64] */;
  %791 = cast(%790, dtype="uint8") /* ty=Tensor[(12, 2, 10), uint8] */;
  %792 = shape_of(%var_41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%var_41, dtype="uint8") /* ty=Tensor[(12, 2, 10), uint8] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %795 = bitwise_or(%793, %794) /* ty=Tensor[(12, 2, 10), uint8] */;
  (%795,)
}

def @func_4875() -> Tensor[(9, 12, 15), int64] {
  %796 = @func_4156() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %796.0
}

def @func_5183() -> (Tensor[(9, 12, 15), int64],) {
  %797 = @func_4156() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %798 = %797.0;
  (%798,)
}

def @func_6431(%var_6406: Tensor[(4, 8, 6), float64]) -> (Tensor[(240), float64], bool, Tensor[(4, 8, 6), bool]) {
  %799 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %800 = reshape(%799, newshape=[]) /* ty=bool */;
  %801 = @func_2256(%800) /* ty=(Tensor[(240), float64], Tensor[(9, 12, 15), bool], Tensor[(240), float64], Tensor[(7, 1, 15), bool], bool) */;
  %802 = cast(%var_6406, dtype="float64") /* ty=Tensor[(4, 8, 6), float64] */;
  %803 = cosh(%802) /* ty=Tensor[(4, 8, 6), float64] */;
  %804 = cast(%var_6406, dtype="bool") /* ty=Tensor[(4, 8, 6), bool] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%803, dtype="bool") /* ty=Tensor[(4, 8, 6), bool] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %808 = %801.2;
  %809 = not_equal(%806, %807) /* ty=Tensor[(4, 8, 6), bool] */;
  (%808, True /* ty=bool */, %809)
}

def @func_6889() -> (Tensor[(240), float64],) {
  %810 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %811 = %810.1;
  (%811,)
}

def @func_2128() -> (Tensor[(9, 12, 15), int64],) {
  %812 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  (%812,)
}

def @func_6717(%var_6697: Tensor[(2, 15, 7), float32]) -> (Tensor[(9, 14, 4), float32], Tensor[(504), float64], Tensor[(2, 15, 7), float64], Tensor[(9, 12, 15), int64]) {
  %813 = cast(meta[relay.Constant][38] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %814 = reshape(%813, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float64] */;
  %815 = @func_6267(%814) /* ty=(Tensor[(9, 14, 4), float64], Tensor[(9, 14, 4), float32], Tensor[(12, 2, 10), uint8], bool) */;
  %816 = cast(%var_6697, dtype="float32") /* ty=Tensor[(2, 15, 7), float32] */;
  %817 = atan(%816) /* ty=Tensor[(2, 15, 7), float32] */;
  %818 = cast(%817, dtype="float32") /* ty=Tensor[(2, 15, 7), float32] */;
  %819 = sinh(%818) /* ty=Tensor[(2, 15, 7), float32] */;
  %820 = cast(%819, dtype="float64") /* ty=Tensor[(2, 15, 7), float64] */;
  %821 = @func_2551() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %822 = %815.1;
  %823 = acosh(%820) /* ty=Tensor[(2, 15, 7), float64] */;
  %824 = %821.0;
  (%822, meta[relay.Constant][38] /* ty=Tensor[(504), float64] */, %823, %824)
}

def @func_6462() -> Tensor[(9, 12, 15), int64] {
  @func_325() /* ty=Tensor[(9, 12, 15), int64] */
}

def @func_2436() -> Tensor[(240), float64] {
  @func_1908() /* ty=Tensor[(240), float64] */
}

def @func_3311(%var_3260: Tensor[(630), float64]) -> (Tensor[(9, 12, 15), int64], Tensor[(210), float32], Tensor[(630), float64], Tensor[(240), float64], Tensor[(240), float64], Tensor[(14, 15, 3), float32], Tensor[(9, 12, 15), int64]) {
  %825 = @func_937() /* ty=(Tensor[(240), float64],) */;
  %826 = @func_937() /* ty=(Tensor[(240), float64],) */;
  %827 = cast(meta[relay.Constant][39] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %828 = cast(%var_3260, dtype="float64") /* ty=Tensor[(630), float64] */;
  %829 = reshape(%827, newshape=[14, 15, 1]) /* ty=Tensor[(14, 15, 1), float32] */;
  %830 = reshape(%828, newshape=[14, 15, 3]) /* ty=Tensor[(14, 15, 3), float64] */;
  %831 = @func_1087(%829, %830) /* ty=(Tensor[(240), float64], Tensor[(14, 15, ?), bool], Tensor[(14, 15, 3), bool]) */;
  %832 = %831.2;
  %833 = cast(%832, dtype="float32") /* ty=Tensor[(14, 15, 3), float32] */;
  %834 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %835 = @func_2881() /* ty=Tensor[(9, 12, 15), int64] */;
  %836 = %825.0;
  %837 = %826.0;
  %838 = erf(%833) /* ty=Tensor[(14, 15, 3), float32] */;
  %839 = %834.0;
  (%835, meta[relay.Constant][39] /* ty=Tensor[(210), float32] */, %var_3260, %836, %837, %838, %839)
}

def @func_5000() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), float32]) {
  %840 = @func_2579() /* ty=(Tensor[(9, 12, 15), float32],) */;
  %841 = @func_4466() /* ty=Tensor[(9, 12, 15), int64] */;
  %842 = %840.0;
  (%841, %842)
}

def @func_6325() -> (Tensor[(9, 12, 15), int64],) {
  %843 = @func_5536() /* ty=Tensor[(9, 12, 15), int64] */;
  (%843,)
}

def @func_1347(%var_1329: Tensor[(6, 10, 13), uint32], %var_1330: Tensor[(6, 10, 13), uint32], %var_1339: Tensor[(210), float32]) -> (Tensor[(6, 10, 13), uint32], Tensor[(14, 15, ?), bool], Tensor[(210), float32], Tensor[(70, 9), float64], Tensor[(9, 12, 15), int64]) {
  %844 = cast(%var_1330, dtype="uint32") /* ty=Tensor[(6, 10, 13), uint32] */;
  %845 = shape_of(%var_1329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%var_1329, dtype="uint32") /* ty=Tensor[(6, 10, 13), uint32] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %848 = cast(%var_1339, dtype="float32") /* ty=Tensor[(210), float32] */;
  %849 = cast(meta[relay.Constant][40] /* ty=Tensor[(70, 9), float64] */, dtype="float64") /* ty=Tensor[(70, 9), float64] */;
  %850 = reshape(%848, newshape=[14, 15, 1]) /* ty=Tensor[(14, 15, 1), float32] */;
  %851 = reshape(%849, newshape=[14, 15, 3]) /* ty=Tensor[(14, 15, 3), float64] */;
  %852 = @func_1087(%850, %851) /* ty=(Tensor[(240), float64], Tensor[(14, 15, ?), bool], Tensor[(14, 15, 3), bool]) */;
  %853 = @func_641() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) */;
  %854 = multiply(%846, %847) /* ty=Tensor[(6, 10, 13), uint32] */;
  %855 = %852.1;
  %856 = %853.0;
  (%854, %855, %var_1339, meta[relay.Constant][40] /* ty=Tensor[(70, 9), float64] */, %856)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5022() -> (Tensor[(9, 12, 15), int64],) {
  %1 = fn () -> (Tensor[(9, 12, 15), int64],) {
    %0 = @func_4380() /* ty=Tensor[(9, 12, 15), int64] */;
    (%0,)
  };
  %1() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_1842() -> Tensor[(240), float64] {
  @func_1840() /* ty=Tensor[(240), float64] */
}

def @func_2915(%var_2902: bool) -> (Tensor[(9, 12, 15), int64], bool, Tensor[(12, 2, 10), float32]) {
  %2 = @func_2551() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %3 = cast(%var_2902, dtype="bool") /* ty=bool */;
  %4 = reshape(%3, newshape=[]) /* ty=bool */;
  %5 = @func_408(%4) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */;
  %6 = %5.5;
  %7 = cast(%6, dtype="float32") /* ty=Tensor[(12, 2, 10), float32] */;
  %8 = %2.0;
  %9 = asin(%7) /* ty=Tensor[(12, 2, 10), float32] */;
  (%8, %var_2902, %9)
}

def @func_3411(%var_3409: Tensor[(9, 12, 15), int64]) -> (Tensor[(9, 12, 15), bool], Tensor[(3, 1, 1), uint64], uint64, Tensor[(3), uint64]) {
  @func_3408(%var_3409) /* ty=(Tensor[(9, 12, 15), bool], Tensor[(3, 1, 1), uint64], uint64, Tensor[(3), uint64]) */
}

def @func_4757() -> (Tensor[(240), float64], Tensor[(9, 12, 15), int64]) {
  %10 = @func_2551() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %11 = @func_1908() /* ty=Tensor[(240), float64] */;
  %12 = %10.0;
  (%11, %12)
}

def @func_304() -> (Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) {
  %32 = fn () -> (Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) {
    %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %14 = reshape(%13, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
    %15 = @func_52(%14) /* ty=(Tensor[(12, 2, 10), uint8],) */;
    %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 15), float64] */;
    %17 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(9, 1, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 15), float64] */;
    %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %20 = power(%18, %19) /* ty=Tensor[(9, ?, 15), float64] */;
    %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 1, 15), float64] */, dtype="bool") /* ty=Tensor[(9, 1, 15), bool] */;
    %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
    %23 = cast(%20, dtype="bool") /* ty=Tensor[(9, ?, 15), bool] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %25 = greater_equal(%23, %24) /* ty=Tensor[(9, ?, 15), bool] */;
    %26 = cast(%20, dtype="bool") /* ty=Tensor[(9, ?, 15), bool] */;
    %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%25, dtype="bool") /* ty=Tensor[(9, ?, 15), bool] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %30 = %15.0;
    %31 = logical_and(%28, %29) /* ty=Tensor[(9, ?, 15), bool] */;
    (%30, meta[relay.Constant][0] /* ty=Tensor[(240), float64] */, %31)
  };
  %32() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */
}

def @func_4382() -> Tensor[(9, 12, 15), int64] {
  @func_4380() /* ty=Tensor[(9, 12, 15), int64] */
}

def @func_6075() -> (Tensor[(9, 12, 15), int64], Tensor[(240), float64]) {
  %37 = fn () -> (Tensor[(9, 12, 15), int64], Tensor[(240), float64]) {
    %33 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %34 = @func_5223() /* ty=(Tensor[(240), float64], Tensor[(6, 10, 13), uint32], Tensor[(780), uint32], Tensor[(105, 2), float32]) */;
    %35 = %33.0;
    %36 = %34.0;
    (%35, %36)
  };
  %37() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */
}

def @func_1011() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  %42 = fn () -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
    %38 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %39 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %40 = %38.0;
    %41 = %39.0;
    (%40, %41)
  };
  %42() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */
}

def @func_5506() -> (Tensor[(9, 12, 15), float32], Tensor[(105, 2), float32], Tensor[(15, 8, 11), uint8], Tensor[(1320), uint8], Tensor[(78), int64], Tensor[(6, 13, 7), bool], Tensor[(210), float32], Tensor[(2, 1, 11), float64], Tensor[(22), float64]) {
  %43 = @func_2579() /* ty=(Tensor[(9, 12, 15), float32],) */;
  %44 = @func_5223() /* ty=(Tensor[(240), float64], Tensor[(6, 10, 13), uint32], Tensor[(780), uint32], Tensor[(105, 2), float32]) */;
  %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(1320), uint8] */, dtype="uint8") /* ty=Tensor[(1320), uint8] */;
  %46 = reshape(%45, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), uint8] */;
  %47 = @func_693(%46) /* ty=(Tensor[(15, 8, 11), uint8],) */;
  %48 = cast(meta[relay.Constant][4] /* ty=Tensor[(78), int64] */, dtype="int64") /* ty=Tensor[(78), int64] */;
  %49 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 546), int64] */, dtype="int64") /* ty=Tensor[(1, 546), int64] */;
  %50 = reshape(%48, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
  %51 = reshape(%49, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int64] */;
  %52 = @func_4410(%50, %51) /* ty=(Tensor[(6, 13, 7), int64], Tensor[(6, 13, 7), float32]) */;
  %53 = %52.0;
  %54 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 546), int64] */, dtype="bool") /* ty=Tensor[(1, 546), bool] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="bool") /* ty=Tensor[(6, 13, 7), bool] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %58 = %44.3;
  %59 = cast(%58, dtype="float32") /* ty=Tensor[(105, 2), float32] */;
  %60 = reshape(%59, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %61 = @func_2857(%60) /* ty=(Tensor[(9, 12, 15), uint32], Tensor[(9, 12, 15), int64], Tensor[(210), float32]) */;
  %62 = cast(meta[relay.Constant][6] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %63 = reshape(%62, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float64] */;
  %64 = @func_4024(%63) /* ty=(Tensor[(2, 1, 11), float64],) */;
  %65 = %43.0;
  %66 = %47.0;
  %67 = less(%56, %57) /* ty=Tensor[(6, 13, 7), bool] */;
  %68 = %61.2;
  %69 = %64.0;
  (%65, %58, %66, meta[relay.Constant][3] /* ty=Tensor[(1320), uint8] */, meta[relay.Constant][4] /* ty=Tensor[(78), int64] */, %67, %68, %69, meta[relay.Constant][6] /* ty=Tensor[(22), float64] */)
}

def @func_4759() -> (Tensor[(240), float64], Tensor[(9, 12, 15), int64]) {
  @func_4757() /* ty=(Tensor[(240), float64], Tensor[(9, 12, 15), int64]) */
}

def @func_2536(%var_2533: Tensor[(630), float64], %var_2534: Tensor[(9, 12, 15), int64], %var_2535: int16) -> (Tensor[(240), float64], Tensor[(240), float64], Tensor[(210), float32], Tensor[(630), float64], Tensor[(9, 12, 15), float64], Tensor[(2, 9, 12), float32], Tensor[(216), float32], Tensor[(12, 2, 10), bool], Tensor[(5, 8, 14), uint64], int16, Tensor[(5, 8, 14), uint64], Tensor[(9, 12, 15), bool]) {
  %102 = fn (%var_2503: Tensor[(630), float64], %var_2505: Tensor[(9, 12, 15), int64], %var_2523: int16) -> (Tensor[(240), float64], Tensor[(240), float64], Tensor[(210), float32], Tensor[(630), float64], Tensor[(9, 12, 15), float64], Tensor[(2, 9, 12), float32], Tensor[(216), float32], Tensor[(12, 2, 10), bool], Tensor[(5, 8, 14), uint64], int16, Tensor[(5, 8, 14), uint64], Tensor[(9, 12, 15), bool]) {
    %70 = cast(meta[relay.Constant][7] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %71 = cast(%var_2503, dtype="float64") /* ty=Tensor[(630), float64] */;
    %72 = reshape(%70, newshape=[14, 15, 1]) /* ty=Tensor[(14, 15, 1), float32] */;
    %73 = reshape(%71, newshape=[14, 15, 3]) /* ty=Tensor[(14, 15, 3), float64] */;
    %74 = @func_1087(%72, %73) /* ty=(Tensor[(240), float64], Tensor[(14, 15, ?), bool], Tensor[(14, 15, 3), bool]) */;
    %75 = @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */;
    %76 = %75.0;
    %77 = cast(%var_2505, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
    %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
    %79 = cast(%76, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
    %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %81 = cast(meta[relay.Constant][8] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
    %82 = reshape(%81, newshape=[2, 9, 12]) /* ty=Tensor[(2, 9, 12), float32] */;
    %83 = @func_2205(%82) /* ty=(Tensor[(2, 9, 12), float32],) */;
    %84 = cast(%76, dtype="uint16") /* ty=Tensor[(9, 12, 15), uint16] */;
    %85 = reshape(%84, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), uint16] */;
    %86 = @func_1176(%85) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), bool], Tensor[(12, 2, 10), bool]) */;
    %87 = cast(%var_2523, dtype="int16") /* ty=int16 */;
    %88 = reshape(%87, newshape=[]) /* ty=int16 */;
    %89 = @func_1656(%88) /* ty=(Tensor[(5, 8, 14), uint64],) */;
    %90 = cast(%var_2523, dtype="int16") /* ty=int16 */;
    %91 = reshape(%90, newshape=[]) /* ty=int16 */;
    %92 = @func_1656(%91) /* ty=(Tensor[(5, 8, 14), uint64],) */;
    %93 = @func_1454() /* ty=(Tensor[(9, 12, 15), bool],) */;
    %94 = @func_2436() /* ty=Tensor[(240), float64] */;
    %95 = %74.0;
    %96 = mod(%79, %80) /* ty=Tensor[(9, 12, 15), float64] */;
    %97 = %83.0;
    %98 = %86.3;
    %99 = %89.0;
    %100 = %92.0;
    %101 = %93.0;
    (%94, %95, meta[relay.Constant][7] /* ty=Tensor[(210), float32] */, %var_2503, %96, %97, meta[relay.Constant][8] /* ty=Tensor[(216), float32] */, %98, %99, %var_2523, %100, %101)
  };
  %102(%var_2533, %var_2534, %var_2535) /* ty=(Tensor[(240), float64], Tensor[(240), float64], Tensor[(210), float32], Tensor[(630), float64], Tensor[(9, 12, 15), float64], Tensor[(2, 9, 12), float32], Tensor[(216), float32], Tensor[(12, 2, 10), bool], Tensor[(5, 8, 14), uint64], int16, Tensor[(5, 8, 14), uint64], Tensor[(9, 12, 15), bool]) */
}

def @func_5654(%var_5651: Tensor[(78), int64], %var_5652: Tensor[(546), int64], %var_5653: Tensor[(6, 10, 13), uint32]) -> (Tensor[(240), float64], Tensor[(9, 12, 15), int64], Tensor[(6, 13, 7), int64], Tensor[(78), int64], Tensor[(546), int64], Tensor[(6, 10, 13), float32]) {
  %119 = fn (%var_5632: Tensor[(78), int64], %var_5633: Tensor[(546), int64], %var_5635: Tensor[(6, 10, 13), uint32]) -> (Tensor[(240), float64], Tensor[(9, 12, 15), int64], Tensor[(6, 13, 7), int64], Tensor[(78), int64], Tensor[(546), int64], Tensor[(6, 10, 13), float32]) {
    %103 = @func_4924() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
    %104 = cast(%var_5632, dtype="int64") /* ty=Tensor[(78), int64] */;
    %105 = cast(%var_5633, dtype="int64") /* ty=Tensor[(546), int64] */;
    %106 = reshape(%104, newshape=[6, 13, 1]) /* ty=Tensor[(6, 13, 1), int64] */;
    %107 = reshape(%105, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int64] */;
    %108 = @func_4410(%106, %107) /* ty=(Tensor[(6, 13, 7), int64], Tensor[(6, 13, 7), float32]) */;
    %109 = @func_5223() /* ty=(Tensor[(240), float64], Tensor[(6, 10, 13), uint32], Tensor[(780), uint32], Tensor[(105, 2), float32]) */;
    %110 = %109.1;
    %111 = cast(%var_5635, dtype="float32") /* ty=Tensor[(6, 10, 13), float32] */;
    %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
    %113 = cast(%110, dtype="float32") /* ty=Tensor[(6, 10, 13), float32] */;
    %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %115 = @func_1482() /* ty=Tensor[(240), float64] */;
    %116 = %103.0;
    %117 = %108.0;
    %118 = power(%113, %114) /* ty=Tensor[(6, 10, 13), float32] */;
    (%115, %116, %117, %var_5632, %var_5633, %118)
  };
  %119(%var_5651, %var_5652, %var_5653) /* ty=(Tensor[(240), float64], Tensor[(9, 12, 15), int64], Tensor[(6, 13, 7), int64], Tensor[(78), int64], Tensor[(546), int64], Tensor[(6, 10, 13), float32]) */
}

def @func_693(%var_689: Tensor[(15, 8, 11), uint8]) -> (Tensor[(15, 8, 11), uint8],) {
  %120 = cast(%var_689, dtype="uint8") /* ty=Tensor[(15, 8, 11), uint8] */;
  %121 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(15, 8, 11), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 8, 11), uint8] */, dtype="uint8") /* ty=Tensor[(15, 8, 11), uint8] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %124 = right_shift(%122, %123) /* ty=Tensor[(15, 8, 11), uint8] */;
  (%124,)
}

def @func_6382(%var_6380: Tensor[(15, 12), float32]) -> (Tensor[(15, 12), float32], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  @func_6379(%var_6380) /* ty=(Tensor[(15, 12), float32], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */
}

def @func_2781(%var_2765: Tensor[(1, 490), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(240), float64], Tensor[(10, 5), float64], Tensor[(1, 490), float32]) {
  %125 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %126 = cast(%var_2765, dtype="float32") /* ty=Tensor[(1, 490), float32] */;
  %127 = reshape(%126, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %128 = @func_1283(%127) /* ty=(Tensor[(10, 5), float64], Tensor[(9, 12, 15), int64], Tensor[(490), float32], Tensor[(240), float64]) */;
  %129 = %125.0;
  %130 = @func_514() /* ty=Tensor[(240), float64] */;
  %131 = %128.0;
  (%129, %130, %131, %var_2765)
}

def @func_1659(%var_1657: int16) -> (Tensor[(5, 8, 14), uint64],) {
  @func_1656(%var_1657) /* ty=(Tensor[(5, 8, 14), uint64],) */
}

def @func_4156() -> (Tensor[(9, 12, 15), int64],) {
  %132 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %133 = %132.0;
  (%133,)
}

def @func_3158() -> (Tensor[(240), float64], Tensor[(240), float64]) {
  %134 = @func_1908() /* ty=Tensor[(240), float64] */;
  %135 = cast(%134, dtype="float64") /* ty=Tensor[(240), float64] */;
  %136 = reshape(%135, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %137 = @func_2192(%136) /* ty=(Tensor[(9, 12, 15), uint32], Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(240), int8]) */;
  %138 = %137.2;
  (%134, %138)
}

def @func_6325() -> (Tensor[(9, 12, 15), int64],) {
  %139 = @func_5536() /* ty=Tensor[(9, 12, 15), int64] */;
  (%139,)
}

def @func_6162() -> Tensor[(9, 12, 15), bool] {
  %141 = fn () -> Tensor[(9, 12, 15), bool] {
    %140 = @func_1454() /* ty=(Tensor[(9, 12, 15), bool],) */;
    %140.0
  };
  %141() /* ty=Tensor[(9, 12, 15), bool] */
}

def @func_5001() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), float32]) {
  %145 = fn () -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), float32]) {
    %142 = @func_2579() /* ty=(Tensor[(9, 12, 15), float32],) */;
    %143 = @func_4466() /* ty=Tensor[(9, 12, 15), int64] */;
    %144 = %142.0;
    (%143, %144)
  };
  %145() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), float32]) */
}

def @func_4380() -> Tensor[(9, 12, 15), int64] {
  %146 = @func_3060() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %146.0
}

def @func_6327() -> (Tensor[(9, 12, 15), int64],) {
  @func_6325() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_411(%var_409: bool) -> (Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) {
  @func_408(%var_409) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */
}

def @func_2129() -> (Tensor[(9, 12, 15), int64],) {
  %148 = fn () -> (Tensor[(9, 12, 15), int64],) {
    %147 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
    (%147,)
  };
  %148() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_6431(%var_6406: Tensor[(4, 8, 6), float64]) -> (Tensor[(240), float64], bool, Tensor[(4, 8, 6), bool]) {
  %149 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %150 = reshape(%149, newshape=[]) /* ty=bool */;
  %151 = @func_2256(%150) /* ty=(Tensor[(240), float64], Tensor[(9, 12, 15), bool], Tensor[(240), float64], Tensor[(7, 1, 15), bool], bool) */;
  %152 = cast(%var_6406, dtype="float64") /* ty=Tensor[(4, 8, 6), float64] */;
  %153 = cosh(%152) /* ty=Tensor[(4, 8, 6), float64] */;
  %154 = cast(%var_6406, dtype="bool") /* ty=Tensor[(4, 8, 6), bool] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="bool") /* ty=Tensor[(4, 8, 6), bool] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %158 = %151.2;
  %159 = not_equal(%156, %157) /* ty=Tensor[(4, 8, 6), bool] */;
  (%158, True /* ty=bool */, %159)
}

def @func_5752(%var_5751: Tensor[(7, 70), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32], Tensor[(7, 70), float32]) {
  %170 = fn (%var_5737: Tensor[(7, 70), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32], Tensor[(7, 70), float32]) {
    %160 = @func_641() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) */;
    %161 = cast(%var_5737, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
    %162 = %160.0;
    %163 = cast(%162, dtype="int64") /* ty=Tensor[(9, 12, 15), int64] */;
    %164 = reshape(%161, newshape=[490]) /* ty=Tensor[(490), float32] */;
    %165 = reshape(%163, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), int64] */;
    %166 = @func_4306(%164, %165) /* ty=(Tensor[(240), float64], Tensor[(490), float32], Tensor[(240), float64], Tensor[(9, 12, 15), uint8], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32]) */;
    %167 = cast(%var_5737, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
    %168 = %166.5;
    %169 = sinh(%167) /* ty=Tensor[(7, 70), float32] */;
    (%162, %168, %169)
  };
  %170(%var_5751) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32], Tensor[(7, 70), float32]) */
}

def @func_4209() -> (Tensor[(9, 12, 15), float64],) {
  %171 = @func_2579() /* ty=(Tensor[(9, 12, 15), float32],) */;
  %172 = %171.0;
  %173 = cast(%172, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %174 = acosh(%173) /* ty=Tensor[(9, 12, 15), float64] */;
  (%174,)
}

def @func_5251() -> (Tensor[(240), float64],) {
  %177 = fn () -> (Tensor[(240), float64],) {
    %175 = @func_2352() /* ty=(Tensor[(240), float64],) */;
    %176 = %175.0;
    (%176,)
  };
  %177() /* ty=(Tensor[(240), float64],) */
}

def @func_2860(%var_2858: Tensor[(210), float32]) -> (Tensor[(9, 12, 15), uint32], Tensor[(9, 12, 15), int64], Tensor[(210), float32]) {
  @func_2857(%var_2858) /* ty=(Tensor[(9, 12, 15), uint32], Tensor[(9, 12, 15), int64], Tensor[(210), float32]) */
}

def @func_4446(%var_4445: Tensor[(2016), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(12, 14, 12), float32], Tensor[(2016), float32], Tensor[(240), float64]) {
  %184 = fn (%var_4437: Tensor[(2016), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(12, 14, 12), float32], Tensor[(2016), float32], Tensor[(240), float64]) {
    %178 = cast(%var_4437, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %179 = reshape(%178, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float32] */;
    %180 = @func_3622(%179) /* ty=(Tensor[(12, 14, 12), float32], Tensor[(12, 14, 12), bool]) */;
    %181 = @func_2711() /* ty=Tensor[(9, 12, 15), int64] */;
    %182 = %180.0;
    %183 = @func_2436() /* ty=Tensor[(240), float64] */;
    (%181, %182, %var_4437, %183)
  };
  %184(%var_4445) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(12, 14, 12), float32], Tensor[(2016), float32], Tensor[(240), float64]) */
}

def @func_2343() -> (Tensor[(9, 12, 15), int64],) {
  %185 = @func_1010() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
  %186 = %185.1;
  (%186,)
}

def @func_5074(%var_5064: uint64, %var_5065: Tensor[(6, 2, 3), uint64], %var_5070: Tensor[(1100), int16], %var_5071: Tensor[(10, 78), uint32]) -> (Tensor[(6, 2, 3), uint64], Tensor[(10, 11, 10), float32], Tensor[(1100), int16], Tensor[(10, 78), uint32]) {
  %187 = cast(%var_5064, dtype="uint64") /* ty=uint64 */;
  %188 = cast(%var_5065, dtype="uint64") /* ty=Tensor[(6, 2, 3), uint64] */;
  %189 = cast(%var_5070, dtype="int16") /* ty=Tensor[(1100), int16] */;
  %190 = cast(%var_5071, dtype="uint32") /* ty=Tensor[(10, 78), uint32] */;
  %191 = reshape(%189, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), int16] */;
  %192 = reshape(%190, newshape=[780]) /* ty=Tensor[(780), uint32] */;
  %193 = @func_4011(%191, %192) /* ty=(Tensor[(10, 11, 10), int16], Tensor[(10, 11, 10), float32], Tensor[(12, 2, 10), uint8], Tensor[(11, 78), float32], Tensor[(240), float64], Tensor[(210), float32], Tensor[(780), uint32], Tensor[(1, 210), float32]) */;
  %194 = multiply(%187, %188) /* ty=Tensor[(6, 2, 3), uint64] */;
  %195 = %193.1;
  (%194, %195, %var_5070, %var_5071)
}

def @func_6889() -> (Tensor[(240), float64],) {
  %196 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %197 = %196.1;
  (%197,)
}

def @func_6006(%var_6005: Tensor[(14, 1, 4), float64]) -> (Tensor[(14, 1, 4), float64], Tensor[(9, 12, 15), int64]) {
  %201 = fn (%var_5991: Tensor[(14, 1, 4), float64]) -> (Tensor[(14, 1, 4), float64], Tensor[(9, 12, 15), int64]) {
    %198 = cast(%var_5991, dtype="float64") /* ty=Tensor[(14, 1, 4), float64] */;
    %199 = log10(%198) /* ty=Tensor[(14, 1, 4), float64] */;
    %200 = @func_2881() /* ty=Tensor[(9, 12, 15), int64] */;
    (%199, %200)
  };
  %201(%var_6005) /* ty=(Tensor[(14, 1, 4), float64], Tensor[(9, 12, 15), int64]) */
}

def @func_6933(%var_6932: Tensor[(40, 12), float32]) -> (Tensor[(12, 2, 10), uint8], bool, Tensor[(40, 12), float32], bool) {
  %210 = fn (%var_6927: Tensor[(40, 12), float32]) -> (Tensor[(12, 2, 10), uint8], bool, Tensor[(40, 12), float32], bool) {
    %202 = @func_641() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) */;
    %203 = cast(%var_6927, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
    %204 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %205 = reshape(%203, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float32] */;
    %206 = reshape(%204, newshape=[]) /* ty=bool */;
    %207 = @func_1712(%205, %206) /* ty=(Tensor[(4, 10, 12), float32], Tensor[(70, 9), float64], Tensor[(210), float32], bool, bool) */;
    %208 = %202.1;
    %209 = %207.4;
    (%208, %209, %var_6927, False /* ty=bool */)
  };
  %210(%var_6932) /* ty=(Tensor[(12, 2, 10), uint8], bool, Tensor[(40, 12), float32], bool) */
}

def @func_4027(%var_4025: Tensor[(2, 1, 11), float64]) -> (Tensor[(2, 1, 11), float64],) {
  @func_4024(%var_4025) /* ty=(Tensor[(2, 1, 11), float64],) */
}

def @func_6434(%var_6432: Tensor[(4, 8, 6), float64]) -> (Tensor[(240), float64], bool, Tensor[(4, 8, 6), bool]) {
  @func_6431(%var_6432) /* ty=(Tensor[(240), float64], bool, Tensor[(4, 8, 6), bool]) */
}

def @func_2258(%var_2257: bool) -> (Tensor[(240), float64], Tensor[(9, 12, 15), bool], Tensor[(240), float64], Tensor[(7, 1, 15), bool], bool) {
  %219 = fn (%var_2236: bool) -> (Tensor[(240), float64], Tensor[(9, 12, 15), bool], Tensor[(240), float64], Tensor[(7, 1, 15), bool], bool) {
    %211 = @func_1454() /* ty=(Tensor[(9, 12, 15), bool],) */;
    %212 = cast(%var_2236, dtype="bool") /* ty=bool */;
    %213 = reshape(%212, newshape=[]) /* ty=bool */;
    %214 = @func_174(%213) /* ty=(Tensor[(7, 1, 15), bool],) */;
    %215 = @func_1908() /* ty=Tensor[(240), float64] */;
    %216 = %211.0;
    %217 = @func_1840() /* ty=Tensor[(240), float64] */;
    %218 = %214.0;
    (%215, %216, %217, %218, %var_2236)
  };
  %219(%var_2257) /* ty=(Tensor[(240), float64], Tensor[(9, 12, 15), bool], Tensor[(240), float64], Tensor[(7, 1, 15), bool], bool) */
}

def @func_3544(%var_3542: Tensor[(210, 9), float32]) -> Tensor[(210, 9), uint64] {
  @func_3541(%var_3542) /* ty=Tensor[(210, 9), uint64] */
}

def @func_4052() -> (Tensor[(9, 12, 15), float32],) {
  %220 = @func_2579() /* ty=(Tensor[(9, 12, 15), float32],) */;
  %221 = %220.0;
  (%221,)
}

def @func_2581() -> (Tensor[(9, 12, 15), float32],) {
  @func_2579() /* ty=(Tensor[(9, 12, 15), float32],) */
}

def @func_609(%var_608: Tensor[(240), float64]) -> (Tensor[(240), int8], Tensor[(12, 2, 10), uint8]) {
  %232 = fn (%var_587: Tensor[(240), float64]) -> (Tensor[(240), int8], Tensor[(12, 2, 10), uint8]) {
    %222 = @func_514() /* ty=Tensor[(240), float64] */;
    %223 = cast(%var_587, dtype="int8") /* ty=Tensor[(240), int8] */;
    %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(1), int32] */;
    %225 = cast(%222, dtype="int8") /* ty=Tensor[(240), int8] */;
    %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?), int8] */;
    %227 = cast(%var_587, dtype="float64") /* ty=Tensor[(240), float64] */;
    %228 = reshape(%227, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
    %229 = @func_52(%228) /* ty=(Tensor[(12, 2, 10), uint8],) */;
    %230 = maximum(%225, %226) /* ty=Tensor[(240), int8] */;
    %231 = %229.0;
    (%230, %231)
  };
  %232(%var_608) /* ty=(Tensor[(240), int8], Tensor[(12, 2, 10), uint8]) */
}

def @func_2345() -> (Tensor[(9, 12, 15), int64],) {
  @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_2881() -> Tensor[(9, 12, 15), int64] {
  %233 = @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */;
  %233.0
}

def @func_4924() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  %234 = @func_4466() /* ty=Tensor[(9, 12, 15), int64] */;
  %235 = @func_2711() /* ty=Tensor[(9, 12, 15), int64] */;
  (%234, %235)
}

def @func_4576(%var_4575: Tensor[(3, 1, 9), float32]) -> (Tensor[(3, 1, 9), float64],) {
  %242 = fn (%var_4555: Tensor[(3, 1, 9), float32]) -> (Tensor[(3, 1, 9), float64],) {
    %236 = cast(%var_4555, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
    %237 = exp(%236) /* ty=Tensor[(3, 1, 9), float32] */;
    %238 = cast(%237, dtype="float32") /* ty=Tensor[(3, 1, 9), float32] */;
    %239 = cos(%238) /* ty=Tensor[(3, 1, 9), float32] */;
    %240 = cast(%239, dtype="float64") /* ty=Tensor[(3, 1, 9), float64] */;
    %241 = asinh(%240) /* ty=Tensor[(3, 1, 9), float64] */;
    (%241,)
  };
  %242(%var_4575) /* ty=(Tensor[(3, 1, 9), float64],) */
}

def @func_6796() -> Tensor[(240), float64] {
  %244 = fn () -> Tensor[(240), float64] {
    %243 = @func_6557() /* ty=(Tensor[(240), float64], Tensor[(9, 12, 15), int64]) */;
    %243.0
  };
  %244() /* ty=Tensor[(240), float64] */
}

def @func_2354() -> (Tensor[(240), float64],) {
  @func_2352() /* ty=(Tensor[(240), float64],) */
}

def @func_938() -> (Tensor[(240), float64],) {
  %247 = fn () -> (Tensor[(240), float64],) {
    %245 = @func_641() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) */;
    %246 = %245.2;
    (%246,)
  };
  %247() /* ty=(Tensor[(240), float64],) */
}

def @func_5224() -> (Tensor[(240), float64], Tensor[(6, 10, 13), uint32], Tensor[(780), uint32], Tensor[(105, 2), float32]) {
  %258 = fn () -> (Tensor[(240), float64], Tensor[(6, 10, 13), uint32], Tensor[(780), uint32], Tensor[(105, 2), float32]) {
    %248 = @func_4964() /* ty=(Tensor[(240), float64],) */;
    %249 = cast(meta[relay.Constant][10] /* ty=Tensor[(780), uint32] */, dtype="uint32") /* ty=Tensor[(780), uint32] */;
    %250 = cast(meta[relay.Constant][10] /* ty=Tensor[(780), uint32] */, dtype="uint32") /* ty=Tensor[(780), uint32] */;
    %251 = cast(meta[relay.Constant][11] /* ty=Tensor[(105, 2), float32] */, dtype="float32") /* ty=Tensor[(105, 2), float32] */;
    %252 = reshape(%249, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), uint32] */;
    %253 = reshape(%250, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), uint32] */;
    %254 = reshape(%251, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %255 = @func_1347(%252, %253, %254) /* ty=(Tensor[(6, 10, 13), uint32], Tensor[(14, 15, ?), bool], Tensor[(210), float32], Tensor[(70, 9), float64], Tensor[(9, 12, 15), int64]) */;
    %256 = %248.0;
    %257 = %255.0;
    (%256, %257, meta[relay.Constant][10] /* ty=Tensor[(780), uint32] */, meta[relay.Constant][11] /* ty=Tensor[(105, 2), float32] */)
  };
  %258() /* ty=(Tensor[(240), float64], Tensor[(6, 10, 13), uint32], Tensor[(780), uint32], Tensor[(105, 2), float32]) */
}

def @func_497(%var_494: Tensor[(11, 6, 13), float32], %var_495: Tensor[(11, 6, 13), float32], %var_496: Tensor[(240, 1), float64]) -> (Tensor[(11, 6, 13), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240, 1), float64]) {
  %269 = fn (%var_459: Tensor[(11, 6, 13), float32], %var_460: Tensor[(11, 6, 13), float32], %var_482: Tensor[(240, 1), float64]) -> (Tensor[(11, 6, 13), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240, 1), float64]) {
    %259 = cast(%var_460, dtype="bool") /* ty=Tensor[(11, 6, 13), bool] */;
    %260 = shape_of(%var_459, dtype="int32") /* ty=Tensor[(3), int32] */;
    %261 = cast(%var_459, dtype="bool") /* ty=Tensor[(11, 6, 13), bool] */;
    %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %263 = cast(%var_482, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
    %264 = reshape(%263, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
    %265 = @func_52(%264) /* ty=(Tensor[(12, 2, 10), uint8],) */;
    %266 = not_equal(%261, %262) /* ty=Tensor[(11, 6, 13), bool] */;
    %267 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
    %268 = %265.0;
    (%266, %267, %268, %var_482)
  };
  %269(%var_494, %var_495, %var_496) /* ty=(Tensor[(11, 6, 13), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240, 1), float64]) */
}

def @func_4965() -> (Tensor[(240), float64],) {
  %272 = fn () -> (Tensor[(240), float64],) {
    %270 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
    %271 = %270.1;
    (%271,)
  };
  %272() /* ty=(Tensor[(240), float64],) */
}

def @func_1535() -> (Tensor[(210, 1), float32], Tensor[(9, 12, 15), uint32]) {
  @func_1533() /* ty=(Tensor[(210, 1), float32], Tensor[(9, 12, 15), uint32]) */
}

def @func_2076(%var_2074: Tensor[(6, 220), uint8], %var_2075: Tensor[(210), float32]) -> (Tensor[(240), float64], Tensor[(9, 12, 15), int64], Tensor[(6, 220), uint8], Tensor[(240), float64], Tensor[(70, 9), float64], Tensor[(210), float32], Tensor[(15, 8, 11), float32]) {
  @func_2072(%var_2074, %var_2075) /* ty=(Tensor[(240), float64], Tensor[(9, 12, 15), int64], Tensor[(6, 220), uint8], Tensor[(240), float64], Tensor[(70, 9), float64], Tensor[(210), float32], Tensor[(15, 8, 11), float32]) */
}

def @func_4054() -> (Tensor[(9, 12, 15), float32],) {
  @func_4052() /* ty=(Tensor[(9, 12, 15), float32],) */
}

def @func_1090(%var_1088: Tensor[(14, 15, 1), float32], %var_1089: Tensor[(14, 15, 3), float64]) -> (Tensor[(240), float64], Tensor[(14, 15, ?), bool], Tensor[(14, 15, 3), bool]) {
  %290 = fn (%var_1051: Tensor[(14, 15, 1), float32], %var_1083: Tensor[(14, 15, 3), float64]) -> (Tensor[(240), float64], Tensor[(14, 15, ?), bool], Tensor[(14, 15, 3), bool]) {
    %273 = @func_937() /* ty=(Tensor[(240), float64],) */;
    %274 = cast(%var_1051, dtype="float32") /* ty=Tensor[(14, 15, 1), float32] */;
    %275 = log2(%274) /* ty=Tensor[(14, 15, 1), float32] */;
    %276 = cast(%var_1051, dtype="bool") /* ty=Tensor[(14, 15, 1), bool] */;
    %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(%275, dtype="bool") /* ty=Tensor[(14, 15, 1), bool] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %280 = cast(%275, dtype="float64") /* ty=Tensor[(14, 15, 1), float64] */;
    %281 = shape_of(%var_1051, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%var_1051, dtype="float64") /* ty=Tensor[(14, 15, 1), float64] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %284 = floor_divide(%282, %283) /* ty=Tensor[(14, 15, ?), float64] */;
    %285 = cast(%284, dtype="bool") /* ty=Tensor[(14, 15, ?), bool] */;
    %286 = cast(%var_1083, dtype="bool") /* ty=Tensor[(14, 15, 3), bool] */;
    %287 = %273.0;
    %288 = greater(%278, %279) /* ty=Tensor[(14, 15, ?), bool] */;
    %289 = equal(%285, %286) /* ty=Tensor[(14, 15, 3), bool] */;
    (%287, %288, %289)
  };
  %290(%var_1088, %var_1089) /* ty=(Tensor[(240), float64], Tensor[(14, 15, ?), bool], Tensor[(14, 15, 3), bool]) */
}

def @func_1840() -> Tensor[(240), float64] {
  %291 = @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */;
  %291.1
}

def @func_4413(%var_4411: Tensor[(6, 13, 1), int64], %var_4412: Tensor[(6, 13, 7), int64]) -> (Tensor[(6, 13, 7), int64], Tensor[(6, 13, 7), float32]) {
  %297 = fn (%var_4396: Tensor[(6, 13, 1), int64], %var_4397: Tensor[(6, 13, 7), int64]) -> (Tensor[(6, 13, 7), int64], Tensor[(6, 13, 7), float32]) {
    %292 = cast(%var_4396, dtype="int64") /* ty=Tensor[(6, 13, 1), int64] */;
    %293 = cast(%var_4397, dtype="int64") /* ty=Tensor[(6, 13, 7), int64] */;
    %294 = cast(%var_4397, dtype="float32") /* ty=Tensor[(6, 13, 7), float32] */;
    %295 = logical_xor(%292, %293) /* ty=Tensor[(6, 13, 7), int64] */;
    %296 = atanh(%294) /* ty=Tensor[(6, 13, 7), float32] */;
    (%295, %296)
  };
  %297(%var_4411, %var_4412) /* ty=(Tensor[(6, 13, 7), int64], Tensor[(6, 13, 7), float32]) */
}

def @func_516() -> Tensor[(240), float64] {
  @func_514() /* ty=Tensor[(240), float64] */
}

def @func_54(%var_53: Tensor[(12, 2, 10), float64]) -> (Tensor[(12, 2, 10), uint8],) {
  %305 = fn (%var_41: Tensor[(12, 2, 10), float64]) -> (Tensor[(12, 2, 10), uint8],) {
    %298 = cast(%var_41, dtype="float64") /* ty=Tensor[(12, 2, 10), float64] */;
    %299 = atan(%298) /* ty=Tensor[(12, 2, 10), float64] */;
    %300 = cast(%299, dtype="uint8") /* ty=Tensor[(12, 2, 10), uint8] */;
    %301 = shape_of(%var_41, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%var_41, dtype="uint8") /* ty=Tensor[(12, 2, 10), uint8] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %304 = bitwise_or(%302, %303) /* ty=Tensor[(12, 2, 10), uint8] */;
    (%304,)
  };
  %305(%var_53) /* ty=(Tensor[(12, 2, 10), uint8],) */
}

def @func_3500(%var_3496: float64, %var_3497: Tensor[(3), uint64], %var_3498: Tensor[(630), float64], %var_3499: Tensor[(1620), int64]) -> (Tensor[(13, 13, 13), bool], Tensor[(3, 1, 1), uint64], Tensor[(3), uint64], Tensor[(9, 12, 15), float64], Tensor[(630), float64], Tensor[(1620), int64], Tensor[(3, 1, 1), uint64], Tensor[(13, 13, 13), float64], Tensor[(210), float32], Tensor[(480), float32]) {
  %339 = fn (%var_3444: float64, %var_3454: Tensor[(3), uint64], %var_3462: Tensor[(630), float64], %var_3463: Tensor[(1620), int64]) -> (Tensor[(13, 13, 13), bool], Tensor[(3, 1, 1), uint64], Tensor[(3), uint64], Tensor[(9, 12, 15), float64], Tensor[(630), float64], Tensor[(1620), int64], Tensor[(3, 1, 1), uint64], Tensor[(13, 13, 13), float64], Tensor[(210), float32], Tensor[(480), float32]) {
    %306 = cast(%var_3444, dtype="bool") /* ty=bool */;
    %307 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 13, 13), float64] */, dtype="bool") /* ty=Tensor[(13, 13, 13), bool] */;
    %308 = cast(%var_3444, dtype="uint64") /* ty=uint64 */;
    %309 = cast(%var_3454, dtype="uint64") /* ty=Tensor[(3), uint64] */;
    %310 = reshape(%308, newshape=[]) /* ty=uint64 */;
    %311 = reshape(%309, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), uint64] */;
    %312 = @func_3043(%310, %311) /* ty=(Tensor[(3, 1, 1), uint64],) */;
    %313 = cast(%var_3462, dtype="float64") /* ty=Tensor[(630), float64] */;
    %314 = cast(%var_3463, dtype="int64") /* ty=Tensor[(1620), int64] */;
    %315 = cast(%var_3444, dtype="int16") /* ty=int16 */;
    %316 = reshape(%313, newshape=[630]) /* ty=Tensor[(630), float64] */;
    %317 = reshape(%314, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), int64] */;
    %318 = reshape(%315, newshape=[]) /* ty=int16 */;
    %319 = @func_2532(%316, %317, %318) /* ty=(Tensor[(240), float64], Tensor[(240), float64], Tensor[(210), float32], Tensor[(630), float64], Tensor[(9, 12, 15), float64], Tensor[(2, 9, 12), float32], Tensor[(216), float32], Tensor[(12, 2, 10), bool], Tensor[(5, 8, 14), uint64], int16, Tensor[(5, 8, 14), uint64], Tensor[(9, 12, 15), bool]) */;
    %320 = cast(%var_3444, dtype="uint64") /* ty=uint64 */;
    %321 = %312.0;
    %322 = cast(%321, dtype="uint64") /* ty=Tensor[(3, 1, 1), uint64] */;
    %323 = reshape(%320, newshape=[]) /* ty=uint64 */;
    %324 = reshape(%322, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), uint64] */;
    %325 = @func_3043(%323, %324) /* ty=(Tensor[(3, 1, 1), uint64],) */;
    %326 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 13, 13), float64] */, dtype="float32") /* ty=Tensor[(13, 13, 13), float32] */;
    %327 = sqrt(%326) /* ty=Tensor[(13, 13, 13), float32] */;
    %328 = cast(%327, dtype="float64") /* ty=Tensor[(13, 13, 13), float64] */;
    %329 = cast(meta[relay.Constant][13] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %330 = cast(%var_3444, dtype="bool") /* ty=bool */;
    %331 = reshape(%329, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float32] */;
    %332 = reshape(%330, newshape=[]) /* ty=bool */;
    %333 = @func_1712(%331, %332) /* ty=(Tensor[(4, 10, 12), float32], Tensor[(70, 9), float64], Tensor[(210), float32], bool, bool) */;
    %334 = not_equal(%306, %307) /* ty=Tensor[(13, 13, 13), bool] */;
    %335 = %319.4;
    %336 = %325.0;
    %337 = atan(%328) /* ty=Tensor[(13, 13, 13), float64] */;
    %338 = %333.2;
    (%334, %321, %var_3454, %335, %var_3462, %var_3463, %336, %337, %338, meta[relay.Constant][13] /* ty=Tensor[(480), float32] */)
  };
  %339(%var_3496, %var_3497, %var_3498, %var_3499) /* ty=(Tensor[(13, 13, 13), bool], Tensor[(3, 1, 1), uint64], Tensor[(3), uint64], Tensor[(9, 12, 15), float64], Tensor[(630), float64], Tensor[(1620), int64], Tensor[(3, 1, 1), uint64], Tensor[(13, 13, 13), float64], Tensor[(210), float32], Tensor[(480), float32]) */
}

def @func_6557() -> (Tensor[(240), float64], Tensor[(9, 12, 15), int64]) {
  %340 = @func_641() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) */;
  %341 = @func_4350() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %342 = %340.2;
  %343 = %341.0;
  (%342, %343)
}

def @func_5380() -> Tensor[(9, 12, 15), int64] {
  %345 = fn () -> Tensor[(9, 12, 15), int64] {
    %344 = @func_3060() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %344.0
  };
  %345() /* ty=Tensor[(9, 12, 15), int64] */
}

def @func_2673() -> (Tensor[(9, 12, 15), int64],) {
  %348 = fn () -> (Tensor[(9, 12, 15), int64],) {
    %346 = @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */;
    %347 = %346.0;
    (%347,)
  };
  %348() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_3043(%var_3038: uint64, %var_3039: Tensor[(3, 1, 1), uint64]) -> (Tensor[(3, 1, 1), uint64],) {
  %349 = cast(%var_3038, dtype="uint64") /* ty=uint64 */;
  %350 = cast(%var_3039, dtype="uint64") /* ty=Tensor[(3, 1, 1), uint64] */;
  %351 = bitwise_and(%349, %350) /* ty=Tensor[(3, 1, 1), uint64] */;
  (%351,)
}

def @func_4952() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  @func_4950() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */
}

def @func_3047(%var_3045: uint64, %var_3046: Tensor[(3, 1, 1), uint64]) -> (Tensor[(3, 1, 1), uint64],) {
  @func_3043(%var_3045, %var_3046) /* ty=(Tensor[(3, 1, 1), uint64],) */
}

def @func_1285(%var_1284: Tensor[(490), float32]) -> (Tensor[(10, 5), float64], Tensor[(9, 12, 15), int64], Tensor[(490), float32], Tensor[(240), float64]) {
  %362 = fn (%var_1251: Tensor[(490), float32]) -> (Tensor[(10, 5), float64], Tensor[(9, 12, 15), int64], Tensor[(490), float32], Tensor[(240), float64]) {
    %352 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 5), float64] */;
    %353 = cast(%var_1251, dtype="float32") /* ty=Tensor[(490), float32] */;
    %354 = cast(%var_1251, dtype="float32") /* ty=Tensor[(490), float32] */;
    %355 = reshape(%353, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float32] */;
    %356 = reshape(%354, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), float32] */;
    %357 = @func_1210(%355, %356) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(5, 14, 7), bool]) */;
    %358 = @func_937() /* ty=(Tensor[(240), float64],) */;
    %359 = atan(%352) /* ty=Tensor[(10, 5), float64] */;
    %360 = %357.0;
    %361 = %358.0;
    (%359, %360, %var_1251, %361)
  };
  %362(%var_1284) /* ty=(Tensor[(10, 5), float64], Tensor[(9, 12, 15), int64], Tensor[(490), float32], Tensor[(240), float64]) */
}

def @func_4310(%var_4308: Tensor[(490), float32], %var_4309: Tensor[(9, 12, 15), int64]) -> (Tensor[(240), float64], Tensor[(490), float32], Tensor[(240), float64], Tensor[(9, 12, 15), uint8], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32]) {
  @func_4306(%var_4308, %var_4309) /* ty=(Tensor[(240), float64], Tensor[(490), float32], Tensor[(240), float64], Tensor[(9, 12, 15), uint8], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32]) */
}

def @func_2437() -> Tensor[(240), float64] {
  %363 = fn () -> Tensor[(240), float64] {
    @func_1908() /* ty=Tensor[(240), float64] */
  };
  %363() /* ty=Tensor[(240), float64] */
}

def @func_5538() -> Tensor[(9, 12, 15), int64] {
  @func_5536() /* ty=Tensor[(9, 12, 15), int64] */
}

def @func_5354(%var_5353: Tensor[(1, 11, 14), float64]) -> (Tensor[(1, 11, 14), float64], Tensor[(1, 11, 14), float64]) {
  %368 = fn (%var_5342: Tensor[(1, 11, 14), float64]) -> (Tensor[(1, 11, 14), float64], Tensor[(1, 11, 14), float64]) {
    %364 = cast(%var_5342, dtype="float64") /* ty=Tensor[(1, 11, 14), float64] */;
    %365 = cast(%var_5342, dtype="float64") /* ty=Tensor[(1, 11, 14), float64] */;
    %366 = exp(%364) /* ty=Tensor[(1, 11, 14), float64] */;
    %367 = log(%365) /* ty=Tensor[(1, 11, 14), float64] */;
    (%366, %367)
  };
  %368(%var_5353) /* ty=(Tensor[(1, 11, 14), float64], Tensor[(1, 11, 14), float64]) */
}

def @func_2918(%var_2916: bool) -> (Tensor[(9, 12, 15), int64], bool, Tensor[(12, 2, 10), float32]) {
  @func_2915(%var_2916) /* ty=(Tensor[(9, 12, 15), int64], bool, Tensor[(12, 2, 10), float32]) */
}

def @func_1484() -> Tensor[(240), float64] {
  @func_1482() /* ty=Tensor[(240), float64] */
}

def @func_5774() -> (Tensor[(9, 12, 15), int64],) {
  @func_5772() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_3160() -> (Tensor[(240), float64], Tensor[(240), float64]) {
  @func_3158() /* ty=(Tensor[(240), float64], Tensor[(240), float64]) */
}

def @func_1213(%var_1211: Tensor[(5, 14, 7), float32], %var_1212: Tensor[(5, 14, 7), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(5, 14, 7), bool]) {
  %381 = fn (%var_1188: Tensor[(5, 14, 7), float32], %var_1189: Tensor[(5, 14, 7), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(5, 14, 7), bool]) {
    %369 = @func_1010() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
    %370 = cast(%var_1189, dtype="float32") /* ty=Tensor[(5, 14, 7), float32] */;
    %371 = shape_of(%var_1188, dtype="int32") /* ty=Tensor[(3), int32] */;
    %372 = cast(%var_1188, dtype="float32") /* ty=Tensor[(5, 14, 7), float32] */;
    %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %374 = floor_mod(%372, %373) /* ty=Tensor[(5, 14, 7), float32] */;
    %375 = cast(%var_1189, dtype="bool") /* ty=Tensor[(5, 14, 7), bool] */;
    %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
    %377 = cast(%374, dtype="bool") /* ty=Tensor[(5, 14, 7), bool] */;
    %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %379 = %369.0;
    %380 = greater_equal(%377, %378) /* ty=Tensor[(5, 14, 7), bool] */;
    (%379, %380)
  };
  %381(%var_1211, %var_1212) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(5, 14, 7), bool]) */
}

def @func_4798() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  %386 = fn () -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
    %382 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %383 = @func_4350() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %384 = %382.0;
    %385 = %383.0;
    (%384, %385)
  };
  %386() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */
}

def @func_5335(%var_5329: bool) -> (Tensor[(9, 12, 15), float64], bool, bool, Tensor[(9, 12, 15), int64]) {
  %387 = @func_1010() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
  %388 = %387.1;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %390 = cast(%var_5329, dtype="bool") /* ty=bool */;
  %391 = reshape(%390, newshape=[]) /* ty=bool */;
  %392 = @func_408(%391) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */;
  %393 = log(%389) /* ty=Tensor[(9, 12, 15), float64] */;
  %394 = %392.2;
  %395 = @func_2881() /* ty=Tensor[(9, 12, 15), int64] */;
  (%393, %394, %var_5329, %395)
}

def @func_2857(%var_2837: Tensor[(210), float32]) -> (Tensor[(9, 12, 15), uint32], Tensor[(9, 12, 15), int64], Tensor[(210), float32]) {
  %396 = @func_1533() /* ty=(Tensor[(210, 1), float32], Tensor[(9, 12, 15), uint32]) */;
  %397 = cast(%var_2837, dtype="float32") /* ty=Tensor[(210), float32] */;
  %398 = reshape(%397, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %399 = @func_1397(%398) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(70, 9), float64], Tensor[(780), uint32], Tensor[(210), float32], Tensor[(9, 12, 15), int64]) */;
  %400 = %396.1;
  %401 = %399.0;
  (%400, %401, %var_2837)
}

def @main(%var_6964: bool) -> (Tensor[(9, 12, 15), int64], Tensor[(3), uint64], bool, Tensor[(12, 2, 10), float32]) {
  %402 = @func_5022() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %403 = @func_5021() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %404 = %403.0;
  %405 = cast(%404, dtype="int64") /* ty=Tensor[(9, 12, 15), int64] */;
  %406 = reshape(%405, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), int64] */;
  %407 = @func_3411(%406) /* ty=(Tensor[(9, 12, 15), bool], Tensor[(3, 1, 1), uint64], uint64, Tensor[(3), uint64]) */;
  %408 = cast(%var_6964, dtype="bool") /* ty=bool */;
  %409 = reshape(%408, newshape=[]) /* ty=bool */;
  %410 = @func_411(%409) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */;
  %411 = %410.0;
  %412 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 2, 10), uint8] */, dtype="float32") /* ty=Tensor[(12, 2, 10), float32] */;
  %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%411, dtype="float32") /* ty=Tensor[(12, 2, 10), float32] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %416 = %402.0;
  %417 = %407.3;
  %418 = maximum(%414, %415) /* ty=Tensor[(12, 2, 10), float32] */;
  (%416, %417, %var_6964, %418)
}

def @func_2579() -> (Tensor[(9, 12, 15), float32],) {
  %419 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %420 = %419.0;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
  %422 = erf(%421) /* ty=Tensor[(9, 12, 15), float32] */;
  (%422,)
}

def @func_3833() -> (Tensor[(240), float64], Tensor[(240), float64]) {
  @func_3831() /* ty=(Tensor[(240), float64], Tensor[(240), float64]) */
}

def @func_4129() -> (Tensor[(240), float64],) {
  %425 = fn () -> (Tensor[(240), float64],) {
    %423 = @func_3831() /* ty=(Tensor[(240), float64], Tensor[(240), float64]) */;
    %424 = %423.0;
    (%424,)
  };
  %425() /* ty=(Tensor[(240), float64],) */
}

def @func_3805(%var_3803: float64, %var_3804: Tensor[(3), uint64]) -> (Tensor[(13, 13, 13), bool], float64, Tensor[(3), uint64], Tensor[(630), float64], Tensor[(9, 12, 15), float32]) {
  %447 = fn (%var_3785: float64, %var_3786: Tensor[(3), uint64]) -> (Tensor[(13, 13, 13), bool], float64, Tensor[(3), uint64], Tensor[(630), float64], Tensor[(9, 12, 15), float32]) {
    %426 = cast(%var_3785, dtype="float64") /* ty=float64 */;
    %427 = cast(%var_3786, dtype="uint64") /* ty=Tensor[(3), uint64] */;
    %428 = cast(meta[relay.Constant][16] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
    %429 = @func_3060() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %430 = %429.0;
    %431 = cast(%430, dtype="int64") /* ty=Tensor[(9, 12, 15), int64] */;
    %432 = reshape(%426, newshape=[]) /* ty=float64 */;
    %433 = reshape(%427, newshape=[3]) /* ty=Tensor[(3), uint64] */;
    %434 = reshape(%428, newshape=[630]) /* ty=Tensor[(630), float64] */;
    %435 = reshape(%431, newshape=[1620]) /* ty=Tensor[(1620), int64] */;
    %436 = @func_3495(%432, %433, %434, %435) /* ty=(Tensor[(13, 13, 13), bool], Tensor[(3, 1, 1), uint64], Tensor[(3), uint64], Tensor[(9, 12, 15), float64], Tensor[(630), float64], Tensor[(1620), int64], Tensor[(3, 1, 1), uint64], Tensor[(13, 13, 13), float64], Tensor[(210), float32], Tensor[(480), float32]) */;
    %437 = cast(%430, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
    %438 = sigmoid(%437) /* ty=Tensor[(9, 12, 15), float32] */;
    %439 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 12, 15), float32] */, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
    %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
    %441 = cast(%438, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
    %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %443 = less(%441, %442) /* ty=Tensor[(9, 12, 15), bool] */;
    %444 = cast(%443, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
    %445 = %436.0;
    %446 = rsqrt(%444) /* ty=Tensor[(9, 12, 15), float32] */;
    (%445, %var_3785, %var_3786, meta[relay.Constant][16] /* ty=Tensor[(630), float64] */, %446)
  };
  %447(%var_3803, %var_3804) /* ty=(Tensor[(13, 13, 13), bool], float64, Tensor[(3), uint64], Tensor[(630), float64], Tensor[(9, 12, 15), float32]) */
}

def @func_1631() -> (Tensor[(9, 12, 15), int64], Tensor[(240), float64]) {
  @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */
}

def @func_1656(%var_1637: int16) -> (Tensor[(5, 8, 14), uint64],) {
  %448 = cast(%var_1637, dtype="int16") /* ty=int16 */;
  %449 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 8, 14), int16] */, dtype="int16") /* ty=Tensor[(5, 8, 14), int16] */;
  %450 = bitwise_or(%448, %449) /* ty=Tensor[(5, 8, 14), int16] */;
  %451 = cast(%450, dtype="uint64") /* ty=Tensor[(5, 8, 14), uint64] */;
  %452 = cast(%var_1637, dtype="uint64") /* ty=uint64 */;
  %453 = add(%451, %452) /* ty=Tensor[(5, 8, 14), uint64] */;
  (%453,)
}

def @func_6101(%var_6100: Tensor[(210), float32]) -> (Tensor[(780), uint32], Tensor[(9, 12, 15), uint32], Tensor[(210), float32]) {
  %460 = fn (%var_6093: Tensor[(210), float32]) -> (Tensor[(780), uint32], Tensor[(9, 12, 15), uint32], Tensor[(210), float32]) {
    %454 = @func_5223() /* ty=(Tensor[(240), float64], Tensor[(6, 10, 13), uint32], Tensor[(780), uint32], Tensor[(105, 2), float32]) */;
    %455 = cast(%var_6093, dtype="float32") /* ty=Tensor[(210), float32] */;
    %456 = reshape(%455, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %457 = @func_2857(%456) /* ty=(Tensor[(9, 12, 15), uint32], Tensor[(9, 12, 15), int64], Tensor[(210), float32]) */;
    %458 = %454.2;
    %459 = %457.0;
    (%458, %459, %var_6093)
  };
  %460(%var_6100) /* ty=(Tensor[(780), uint32], Tensor[(9, 12, 15), uint32], Tensor[(210), float32]) */
}

def @func_5686(%var_5684: Tensor[(13, 13, 15), float32], %var_5685: Tensor[(13, 13, 15), float32]) -> (Tensor[(13, 13, 15), float32], Tensor[(13, 13, 15), int32]) {
  %479 = fn (%var_5663: Tensor[(13, 13, 15), float32], %var_5671: Tensor[(13, 13, 15), float32]) -> (Tensor[(13, 13, 15), float32], Tensor[(13, 13, 15), int32]) {
    %461 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 13, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 1), float32] */;
    %462 = cast(%var_5663, dtype="float32") /* ty=Tensor[(13, 13, 15), float32] */;
    %463 = divide(%461, %462) /* ty=Tensor[(13, 13, 15), float32] */;
    %464 = cast(%var_5671, dtype="float64") /* ty=Tensor[(13, 13, 15), float64] */;
    %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %466 = cast(%463, dtype="float64") /* ty=Tensor[(13, 13, 15), float64] */;
    %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %468 = floor_divide(%466, %467) /* ty=Tensor[(13, 13, 15), float64] */;
    %469 = cast(%var_5663, dtype="float32") /* ty=Tensor[(13, 13, 15), float32] */;
    %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
    %471 = cast(%468, dtype="float32") /* ty=Tensor[(13, 13, 15), float32] */;
    %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %473 = cast(%463, dtype="int32") /* ty=Tensor[(13, 13, 15), int32] */;
    %474 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(%468, dtype="int32") /* ty=Tensor[(13, 13, 15), int32] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %477 = floor_mod(%471, %472) /* ty=Tensor[(13, 13, 15), float32] */;
    %478 = bitwise_and(%475, %476) /* ty=Tensor[(13, 13, 15), int32] */;
    (%477, %478)
  };
  %479(%var_5684, %var_5685) /* ty=(Tensor[(13, 13, 15), float32], Tensor[(13, 13, 15), int32]) */
}

def @func_6296() -> (Tensor[(9, 12, 15), int64],) {
  %480 = @func_3060() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %481 = %480.0;
  (%481,)
}

def @func_4876() -> Tensor[(9, 12, 15), int64] {
  %483 = fn () -> Tensor[(9, 12, 15), int64] {
    %482 = @func_4156() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %482.0
  };
  %483() /* ty=Tensor[(9, 12, 15), int64] */
}

def @func_887(%var_806: Tensor[(9, 12, 15), int64]) -> (Tensor[(9, 12, 15), float32], Tensor[(9, 12, 15), uint16], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(858), float64]) {
  %484 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %485 = %484.0;
  %486 = cast(%var_806, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %490 = cast(%var_806, dtype="uint16") /* ty=Tensor[(9, 12, 15), uint16] */;
  %491 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%485, dtype="uint16") /* ty=Tensor[(9, 12, 15), uint16] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %494 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %495 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %496 = reshape(%495, newshape=[]) /* ty=bool */;
  %497 = @func_408(%496) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */;
  %498 = cast(meta[relay.Constant][20] /* ty=Tensor[(858), float32] */, dtype="float32") /* ty=Tensor[(858), float32] */;
  %499 = cast(meta[relay.Constant][20] /* ty=Tensor[(858), float32] */, dtype="float32") /* ty=Tensor[(858), float32] */;
  %500 = %497.5;
  %501 = cast(%500, dtype="float64") /* ty=Tensor[(12, 2, 10), float64] */;
  %502 = reshape(%498, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %503 = reshape(%499, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %504 = reshape(%501, newshape=[240, 1]) /* ty=Tensor[(240, 1), float64] */;
  %505 = @func_493(%502, %503, %504) /* ty=(Tensor[(11, 6, 13), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240, 1), float64]) */;
  %506 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %507 = cast(meta[relay.Constant][20] /* ty=Tensor[(858), float32] */, dtype="float32") /* ty=Tensor[(858), float32] */;
  %508 = cos(%507) /* ty=Tensor[(858), float32] */;
  %509 = cast(%508, dtype="float32") /* ty=Tensor[(858), float32] */;
  %510 = tan(%509) /* ty=Tensor[(858), float32] */;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(858), float64] */;
  %512 = cast(False /* ty=bool */, dtype="float64") /* ty=float64 */;
  %513 = power(%488, %489) /* ty=Tensor[(9, 12, 15), float32] */;
  %514 = add(%492, %493) /* ty=Tensor[(9, 12, 15), uint16] */;
  %515 = %494.0;
  %516 = %505.2;
  %517 = %506.0;
  %518 = floor_divide(%511, %512) /* ty=Tensor[(858), float64] */;
  (%513, %514, %515, %500, %516, %517, %518)
}

def @func_2784(%var_2782: Tensor[(1, 490), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(240), float64], Tensor[(10, 5), float64], Tensor[(1, 490), float32]) {
  @func_2781(%var_2782) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64], Tensor[(10, 5), float64], Tensor[(1, 490), float32]) */
}

def @func_3408(%var_3394: Tensor[(9, 12, 15), int64]) -> (Tensor[(9, 12, 15), bool], Tensor[(3, 1, 1), uint64], uint64, Tensor[(3), uint64]) {
  %519 = @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */;
  %520 = %519.0;
  %521 = cast(%var_3394, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%520, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %525 = cast(meta[relay.Constant][21] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %526 = cast(meta[relay.Constant][22] /* ty=Tensor[(3), uint64] */, dtype="uint64") /* ty=Tensor[(3), uint64] */;
  %527 = reshape(%525, newshape=[]) /* ty=uint64 */;
  %528 = reshape(%526, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), uint64] */;
  %529 = @func_3043(%527, %528) /* ty=(Tensor[(3, 1, 1), uint64],) */;
  %530 = logical_or(%523, %524) /* ty=Tensor[(9, 12, 15), bool] */;
  %531 = %529.0;
  (%530, %531, meta[relay.Constant][21] /* ty=uint64 */, meta[relay.Constant][22] /* ty=Tensor[(3), uint64] */)
}

def @func_4351() -> (Tensor[(9, 12, 15), int64],) {
  %534 = fn () -> (Tensor[(9, 12, 15), int64],) {
    %532 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %533 = %532.0;
    (%533,)
  };
  %534() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_4926() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  @func_4924() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */
}

def @func_5536() -> Tensor[(9, 12, 15), int64] {
  %535 = @func_4797() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
  %535.0
}

def @func_514() -> Tensor[(240), float64] {
  %536 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %536.1
}

def @func_2072(%var_2006: Tensor[(6, 220), uint8], %var_2031: Tensor[(210), float32]) -> (Tensor[(240), float64], Tensor[(9, 12, 15), int64], Tensor[(6, 220), uint8], Tensor[(240), float64], Tensor[(70, 9), float64], Tensor[(210), float32], Tensor[(15, 8, 11), float32]) {
  %537 = @func_1629() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64]) */;
  %538 = cast(%var_2031, dtype="float32") /* ty=Tensor[(210), float32] */;
  %539 = reshape(%538, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %540 = @func_1397(%539) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(70, 9), float64], Tensor[(780), uint32], Tensor[(210), float32], Tensor[(9, 12, 15), int64]) */;
  %541 = cast(%var_2006, dtype="uint8") /* ty=Tensor[(6, 220), uint8] */;
  %542 = reshape(%541, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), uint8] */;
  %543 = @func_693(%542) /* ty=(Tensor[(15, 8, 11), uint8],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(15, 8, 11), float32] */;
  %546 = @func_1840() /* ty=Tensor[(240), float64] */;
  %547 = %537.0;
  %548 = @func_514() /* ty=Tensor[(240), float64] */;
  %549 = %540.2;
  %550 = erf(%545) /* ty=Tensor[(15, 8, 11), float32] */;
  (%546, %547, %var_2006, %548, %549, %var_2031, %550)
}

def @func_725() -> (Tensor[(9, 12, 15), int64],) {
  @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_6610() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32], Tensor[(210), float32]) {
  %557 = fn () -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32], Tensor[(210), float32]) {
    %551 = @func_3060() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %552 = cast(meta[relay.Constant][23] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %553 = reshape(%552, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %554 = @func_2857(%553) /* ty=(Tensor[(9, 12, 15), uint32], Tensor[(9, 12, 15), int64], Tensor[(210), float32]) */;
    %555 = %551.0;
    %556 = %554.0;
    (%555, %556, meta[relay.Constant][23] /* ty=Tensor[(210), float32] */)
  };
  %557() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32], Tensor[(210), float32]) */
}

def @func_3061() -> (Tensor[(9, 12, 15), int64],) {
  %560 = fn () -> (Tensor[(9, 12, 15), int64],) {
    %558 = @func_2128() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %559 = %558.0;
    (%559,)
  };
  %560() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_643() -> (Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) {
  @func_641() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) */
}

def @func_4611(%var_4610: Tensor[(8, 7, 6), float64]) -> (Tensor[(8, 7, 6), float64], Tensor[(8, 7, 6), float64], Tensor[(2, 1, 11), float64], Tensor[(22, 1), float64], Tensor[(8, 7, 6), float64]) {
  %571 = fn (%var_4578: Tensor[(8, 7, 6), float64]) -> (Tensor[(8, 7, 6), float64], Tensor[(8, 7, 6), float64], Tensor[(2, 1, 11), float64], Tensor[(22, 1), float64], Tensor[(8, 7, 6), float64]) {
    %561 = cast(%var_4578, dtype="float64") /* ty=Tensor[(8, 7, 6), float64] */;
    %562 = cast(%var_4578, dtype="float64") /* ty=Tensor[(8, 7, 6), float64] */;
    %563 = cast(meta[relay.Constant][24] /* ty=Tensor[(22, 1), float64] */, dtype="float64") /* ty=Tensor[(22, 1), float64] */;
    %564 = reshape(%563, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), float64] */;
    %565 = @func_4024(%564) /* ty=(Tensor[(2, 1, 11), float64],) */;
    %566 = cast(%var_4578, dtype="float64") /* ty=Tensor[(8, 7, 6), float64] */;
    %567 = exp(%561) /* ty=Tensor[(8, 7, 6), float64] */;
    %568 = tan(%562) /* ty=Tensor[(8, 7, 6), float64] */;
    %569 = %565.0;
    %570 = sigmoid(%566) /* ty=Tensor[(8, 7, 6), float64] */;
    (%567, %568, %569, meta[relay.Constant][24] /* ty=Tensor[(22, 1), float64] */, %570)
  };
  %571(%var_4610) /* ty=(Tensor[(8, 7, 6), float64], Tensor[(8, 7, 6), float64], Tensor[(2, 1, 11), float64], Tensor[(22, 1), float64], Tensor[(8, 7, 6), float64]) */
}

def @func_2553() -> (Tensor[(9, 12, 15), int64],) {
  @func_2551() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_1178(%var_1177: Tensor[(9, 12, 15), uint16]) -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), bool], Tensor[(12, 2, 10), bool]) {
  %594 = fn (%var_1151: Tensor[(9, 12, 15), uint16]) -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), bool], Tensor[(12, 2, 10), bool]) {
    %572 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
    %573 = cast(%572, dtype="int64") /* ty=Tensor[(9, 12, 15), int64] */;
    %574 = reshape(%573, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), int64] */;
    %575 = @func_887(%574) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(9, 12, 15), uint16], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(858), float64]) */;
    %576 = %575.1;
    %577 = cast(%var_1151, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
    %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
    %579 = cast(%576, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
    %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %581 = cast(%572, dtype="int64") /* ty=Tensor[(9, 12, 15), int64] */;
    %582 = reshape(%581, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), int64] */;
    %583 = @func_887(%582) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(9, 12, 15), uint16], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(858), float64]) */;
    %584 = %583.2;
    %585 = @func_937() /* ty=(Tensor[(240), float64],) */;
    %586 = %585.0;
    %587 = cast(%586, dtype="bool") /* ty=Tensor[(240), bool] */;
    %588 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %589 = cast(%584, dtype="bool") /* ty=Tensor[(12, 2, 10), bool] */;
    %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %591 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
    %592 = less_equal(%579, %580) /* ty=Tensor[(9, 12, 15), bool] */;
    %593 = equal(%589, %590) /* ty=Tensor[(12, 2, 10), bool] */;
    (%572, %591, %592, %593)
  };
  %594(%var_1177) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), bool], Tensor[(12, 2, 10), bool]) */
}

def @func_3831() -> (Tensor[(240), float64], Tensor[(240), float64]) {
  %595 = @func_2352() /* ty=(Tensor[(240), float64],) */;
  %596 = %595.0;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(240), float64] */;
  %598 = sin(%597) /* ty=Tensor[(240), float64] */;
  %599 = @func_514() /* ty=Tensor[(240), float64] */;
  (%598, %599)
}

def @func_1629() -> (Tensor[(9, 12, 15), int64], Tensor[(240), float64]) {
  %600 = @func_1010() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
  %601 = %600.1;
  %602 = @func_514() /* ty=Tensor[(240), float64] */;
  (%601, %602)
}

def @func_2713() -> Tensor[(9, 12, 15), int64] {
  @func_2711() /* ty=Tensor[(9, 12, 15), int64] */
}

def @func_4466() -> Tensor[(9, 12, 15), int64] {
  %603 = @func_1010() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) */;
  %603.1
}

def @func_5863(%var_5843: Tensor[(6, 11, 8), int16], %var_5844: Tensor[(6, 11, 8), int16], %var_5854: Tensor[(6, 11, 8), float64]) -> Tensor[(6, 11, 8), float32] {
  %604 = cast(%var_5844, dtype="int16") /* ty=Tensor[(6, 11, 8), int16] */;
  %605 = shape_of(%var_5843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%var_5843, dtype="int16") /* ty=Tensor[(6, 11, 8), int16] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %608 = add(%606, %607) /* ty=Tensor[(6, 11, 8), int16] */;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
  %610 = erf(%609) /* ty=Tensor[(6, 11, 8), float64] */;
  %611 = cast(%var_5854, dtype="float32") /* ty=Tensor[(6, 11, 8), float32] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="float32") /* ty=Tensor[(6, 11, 8), float32] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  minimum(%613, %614) /* ty=Tensor[(6, 11, 8), float32] */
}

def @func_5080(%var_5076: uint64, %var_5077: Tensor[(6, 2, 3), uint64], %var_5078: Tensor[(1100), int16], %var_5079: Tensor[(10, 78), uint32]) -> (Tensor[(6, 2, 3), uint64], Tensor[(10, 11, 10), float32], Tensor[(1100), int16], Tensor[(10, 78), uint32]) {
  @func_5074(%var_5076, %var_5077, %var_5078, %var_5079) /* ty=(Tensor[(6, 2, 3), uint64], Tensor[(10, 11, 10), float32], Tensor[(1100), int16], Tensor[(10, 78), uint32]) */
}

def @func_890(%var_888: Tensor[(9, 12, 15), int64]) -> (Tensor[(9, 12, 15), float32], Tensor[(9, 12, 15), uint16], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(858), float64]) {
  @func_887(%var_888) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(9, 12, 15), uint16], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(12, 2, 10), uint8], Tensor[(858), float64]) */
}

def @func_3185(%var_3183: Tensor[(1, 858), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(240), float64], Tensor[(240, 1), float64], Tensor[(1, 858), float32]) {
  @func_3182(%var_3183) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(240), float64], Tensor[(240, 1), float64], Tensor[(1, 858), float32]) */
}

def @func_6234() -> Tensor[(9, 12, 15), bool] {
  @func_6232() /* ty=Tensor[(9, 12, 15), bool] */
}

def @func_1908() -> Tensor[(240), float64] {
  %615 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %615.1
}

def @func_408(%var_388: bool) -> (Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) {
  %616 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %617 = cast(%var_388, dtype="bool") /* ty=bool */;
  %618 = reshape(%617, newshape=[]) /* ty=bool */;
  %619 = @func_174(%618) /* ty=(Tensor[(7, 1, 15), bool],) */;
  %620 = cast(%var_388, dtype="bool") /* ty=bool */;
  %621 = reshape(%620, newshape=[]) /* ty=bool */;
  %622 = @func_174(%621) /* ty=(Tensor[(7, 1, 15), bool],) */;
  %623 = %616.0;
  %624 = cast(%623, dtype="float64") /* ty=Tensor[(12, 2, 10), float64] */;
  %625 = reshape(%624, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
  %626 = @func_52(%625) /* ty=(Tensor[(12, 2, 10), uint8],) */;
  %627 = %619.0;
  %628 = %622.0;
  %629 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  %630 = %626.0;
  (%623, %627, %var_388, %628, %629, %630)
}

def @func_4024(%var_4020: Tensor[(2, 1, 11), float64]) -> (Tensor[(2, 1, 11), float64],) {
  %631 = cast(%var_4020, dtype="float64") /* ty=Tensor[(2, 1, 11), float64] */;
  %632 = log(%631) /* ty=Tensor[(2, 1, 11), float64] */;
  (%632,)
}

def @func_2194(%var_2193: Tensor[(240), float64]) -> (Tensor[(9, 12, 15), uint32], Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(240), int8]) {
  %643 = fn (%var_2182: Tensor[(240), float64]) -> (Tensor[(9, 12, 15), uint32], Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(240), int8]) {
    %633 = @func_1533() /* ty=(Tensor[(210, 1), float32], Tensor[(9, 12, 15), uint32]) */;
    %634 = cast(%var_2182, dtype="float64") /* ty=Tensor[(240), float64] */;
    %635 = reshape(%634, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
    %636 = @func_52(%635) /* ty=(Tensor[(12, 2, 10), uint8],) */;
    %637 = cast(%var_2182, dtype="float64") /* ty=Tensor[(240), float64] */;
    %638 = reshape(%637, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %639 = @func_607(%638) /* ty=(Tensor[(240), int8], Tensor[(12, 2, 10), uint8]) */;
    %640 = %633.1;
    %641 = %636.0;
    %642 = %639.0;
    (%640, %641, %var_2182, %642)
  };
  %643(%var_2193) /* ty=(Tensor[(9, 12, 15), uint32], Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(240), int8]) */
}

def @func_723() -> (Tensor[(9, 12, 15), int64],) {
  %644 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  (%644,)
}

def @func_1482() -> Tensor[(240), float64] {
  %645 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
  %645.1
}

def @func_176(%var_175: bool) -> (Tensor[(7, 1, 15), bool],) {
  %649 = fn (%var_148: bool) -> (Tensor[(7, 1, 15), bool],) {
    %646 = cast(%var_148, dtype="bool") /* ty=bool */;
    %647 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 1, 15), bool] */, dtype="bool") /* ty=Tensor[(7, 1, 15), bool] */;
    %648 = logical_or(%646, %647) /* ty=Tensor[(7, 1, 15), bool] */;
    (%648,)
  };
  %649(%var_175) /* ty=(Tensor[(7, 1, 15), bool],) */
}

def @func_2207(%var_2206: Tensor[(2, 9, 12), float32]) -> (Tensor[(2, 9, 12), float32],) {
  %652 = fn (%var_2199: Tensor[(2, 9, 12), float32]) -> (Tensor[(2, 9, 12), float32],) {
    %650 = cast(%var_2199, dtype="float32") /* ty=Tensor[(2, 9, 12), float32] */;
    %651 = acos(%650) /* ty=Tensor[(2, 9, 12), float32] */;
    (%651,)
  };
  %652(%var_2206) /* ty=(Tensor[(2, 9, 12), float32],) */
}

def @func_6891() -> (Tensor[(240), float64],) {
  @func_6889() /* ty=(Tensor[(240), float64],) */
}

def @func_5868(%var_5865: Tensor[(6, 11, 8), int16], %var_5866: Tensor[(6, 11, 8), int16], %var_5867: Tensor[(6, 11, 8), float64]) -> Tensor[(6, 11, 8), float32] {
  @func_5863(%var_5865, %var_5866, %var_5867) /* ty=Tensor[(6, 11, 8), float32] */
}

def @func_6298() -> (Tensor[(9, 12, 15), int64],) {
  @func_6296() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_6405() -> (Tensor[(9, 12, 15), int64],) {
  @func_6403() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_6719(%var_6718: Tensor[(2, 15, 7), float32]) -> (Tensor[(9, 14, 4), float32], Tensor[(504), float64], Tensor[(2, 15, 7), float64], Tensor[(9, 12, 15), int64]) {
  %665 = fn (%var_6697: Tensor[(2, 15, 7), float32]) -> (Tensor[(9, 14, 4), float32], Tensor[(504), float64], Tensor[(2, 15, 7), float64], Tensor[(9, 12, 15), int64]) {
    %653 = cast(meta[relay.Constant][26] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %654 = reshape(%653, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float64] */;
    %655 = @func_6267(%654) /* ty=(Tensor[(9, 14, 4), float64], Tensor[(9, 14, 4), float32], Tensor[(12, 2, 10), uint8], bool) */;
    %656 = cast(%var_6697, dtype="float32") /* ty=Tensor[(2, 15, 7), float32] */;
    %657 = atan(%656) /* ty=Tensor[(2, 15, 7), float32] */;
    %658 = cast(%657, dtype="float32") /* ty=Tensor[(2, 15, 7), float32] */;
    %659 = sinh(%658) /* ty=Tensor[(2, 15, 7), float32] */;
    %660 = cast(%659, dtype="float64") /* ty=Tensor[(2, 15, 7), float64] */;
    %661 = @func_2551() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %662 = %655.1;
    %663 = acosh(%660) /* ty=Tensor[(2, 15, 7), float64] */;
    %664 = %661.0;
    (%662, meta[relay.Constant][26] /* ty=Tensor[(504), float64] */, %663, %664)
  };
  %665(%var_6718) /* ty=(Tensor[(9, 14, 4), float32], Tensor[(504), float64], Tensor[(2, 15, 7), float64], Tensor[(9, 12, 15), int64]) */
}

def @func_5183() -> (Tensor[(9, 12, 15), int64],) {
  %666 = @func_4156() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %667 = %666.0;
  (%667,)
}

def @func_3897(%var_3895: Tensor[(7, 5, 6), float32], %var_3896: Tensor[(7, 5, 6), float32]) -> (Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), float32], Tensor[(2, 9, 12), float32], Tensor[(216), float32]) {
  %679 = fn (%var_3854: Tensor[(7, 5, 6), float32], %var_3855: Tensor[(7, 5, 6), float32]) -> (Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), float32], Tensor[(2, 9, 12), float32], Tensor[(216), float32]) {
    %668 = cast(%var_3855, dtype="bool") /* ty=Tensor[(7, 5, 6), bool] */;
    %669 = shape_of(%var_3854, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%var_3854, dtype="bool") /* ty=Tensor[(7, 5, 6), bool] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %672 = cast(%var_3854, dtype="float32") /* ty=Tensor[(7, 5, 6), float32] */;
    %673 = cast(meta[relay.Constant][27] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
    %674 = reshape(%673, newshape=[2, 9, 12]) /* ty=Tensor[(2, 9, 12), float32] */;
    %675 = @func_2205(%674) /* ty=(Tensor[(2, 9, 12), float32],) */;
    %676 = less(%670, %671) /* ty=Tensor[(7, 5, 6), bool] */;
    %677 = asinh(%672) /* ty=Tensor[(7, 5, 6), float32] */;
    %678 = %675.0;
    (%676, %677, %678, meta[relay.Constant][27] /* ty=Tensor[(216), float32] */)
  };
  %679(%var_3895, %var_3896) /* ty=(Tensor[(7, 5, 6), bool], Tensor[(7, 5, 6), float32], Tensor[(2, 9, 12), float32], Tensor[(216), float32]) */
}

def @func_5925() -> (Tensor[(9, 12, 15), bool],) {
  %682 = fn () -> (Tensor[(9, 12, 15), bool],) {
    %680 = @func_1454() /* ty=(Tensor[(9, 12, 15), bool],) */;
    %681 = %680.0;
    (%681,)
  };
  %682() /* ty=(Tensor[(9, 12, 15), bool],) */
}

def @func_6581() -> (Tensor[(9, 12, 15), float64],) {
  @func_6579() /* ty=(Tensor[(9, 12, 15), float64],) */
}

def @func_4158() -> (Tensor[(9, 12, 15), int64],) {
  @func_4156() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_3182(%var_3172: Tensor[(1, 858), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(240), float64], Tensor[(240, 1), float64], Tensor[(1, 858), float32]) {
  %683 = @func_937() /* ty=(Tensor[(240), float64],) */;
  %684 = cast(%var_3172, dtype="float32") /* ty=Tensor[(1, 858), float32] */;
  %685 = cast(%var_3172, dtype="float32") /* ty=Tensor[(1, 858), float32] */;
  %686 = %683.0;
  %687 = cast(%686, dtype="float64") /* ty=Tensor[(240), float64] */;
  %688 = reshape(%684, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %689 = reshape(%685, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %690 = reshape(%687, newshape=[240, 1]) /* ty=Tensor[(240, 1), float64] */;
  %691 = @func_493(%688, %689, %690) /* ty=(Tensor[(11, 6, 13), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240, 1), float64]) */;
  %692 = @func_2711() /* ty=Tensor[(9, 12, 15), int64] */;
  %693 = %691.3;
  (%692, %686, %693, %var_3172)
}

def @func_4095(%var_4093: Tensor[(2, 2, 13), float64], %var_4094: Tensor[(2, 2, 13), float64]) -> (Tensor[(2, 2, 13), float64], Tensor[(240), float64], Tensor[(2, 2, 13), bool]) {
  @func_4091(%var_4093, %var_4094) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(240), float64], Tensor[(2, 2, 13), bool]) */
}

def @func_6403() -> (Tensor[(9, 12, 15), int64],) {
  %694 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %695 = %694.0;
  (%695,)
}

def @func_6511() -> (Tensor[(9, 12, 15), bool],) {
  @func_6509() /* ty=(Tensor[(9, 12, 15), bool],) */
}

def @func_3541(%var_3534: Tensor[(210, 9), float32]) -> Tensor[(210, 9), uint64] {
  %696 = @func_1533() /* ty=(Tensor[(210, 1), float32], Tensor[(9, 12, 15), uint32]) */;
  %697 = %696.0;
  %698 = cast(%697, dtype="uint64") /* ty=Tensor[(210, 1), uint64] */;
  %699 = cast(%var_3534, dtype="uint64") /* ty=Tensor[(210, 9), uint64] */;
  right_shift(%698, %699) /* ty=Tensor[(210, 9), uint64] */
}

def @func_3624(%var_3623: Tensor[(12, 14, 12), float32]) -> (Tensor[(12, 14, 12), float32], Tensor[(12, 14, 12), bool]) {
  %711 = fn (%var_3593: Tensor[(12, 14, 12), float32]) -> (Tensor[(12, 14, 12), float32], Tensor[(12, 14, 12), bool]) {
    %700 = cast(%var_3593, dtype="float32") /* ty=Tensor[(12, 14, 12), float32] */;
    %701 = log10(%700) /* ty=Tensor[(12, 14, 12), float32] */;
    %702 = cast(%701, dtype="float32") /* ty=Tensor[(12, 14, 12), float32] */;
    %703 = cast(%701, dtype="float32") /* ty=Tensor[(12, 14, 12), float32] */;
    %704 = exp(%703) /* ty=Tensor[(12, 14, 12), float32] */;
    %705 = cast(%701, dtype="bool") /* ty=Tensor[(12, 14, 12), bool] */;
    %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
    %707 = cast(%704, dtype="bool") /* ty=Tensor[(12, 14, 12), bool] */;
    %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %709 = acos(%702) /* ty=Tensor[(12, 14, 12), float32] */;
    %710 = greater_equal(%707, %708) /* ty=Tensor[(12, 14, 12), bool] */;
    (%709, %710)
  };
  %711(%var_3623) /* ty=(Tensor[(12, 14, 12), float32], Tensor[(12, 14, 12), bool]) */
}

def @func_6267(%var_6239: Tensor[(9, 14, 4), float64]) -> (Tensor[(9, 14, 4), float64], Tensor[(9, 14, 4), float32], Tensor[(12, 2, 10), uint8], bool) {
  %712 = cast(%var_6239, dtype="float64") /* ty=Tensor[(9, 14, 4), float64] */;
  %713 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(9, 14, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 14, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 14, 4), float64] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %716 = cast(%var_6239, dtype="float32") /* ty=Tensor[(9, 14, 4), float32] */;
  %717 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %718 = reshape(%717, newshape=[]) /* ty=bool */;
  %719 = @func_408(%718) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */;
  %720 = add(%714, %715) /* ty=Tensor[(9, 14, 4), float64] */;
  %721 = cosh(%716) /* ty=Tensor[(9, 14, 4), float32] */;
  %722 = %719.5;
  (%720, %721, %722, False /* ty=bool */)
}

def @func_3313(%var_3312: Tensor[(630), float64]) -> (Tensor[(9, 12, 15), int64], Tensor[(210), float32], Tensor[(630), float64], Tensor[(240), float64], Tensor[(240), float64], Tensor[(14, 15, 3), float32], Tensor[(9, 12, 15), int64]) {
  %738 = fn (%var_3260: Tensor[(630), float64]) -> (Tensor[(9, 12, 15), int64], Tensor[(210), float32], Tensor[(630), float64], Tensor[(240), float64], Tensor[(240), float64], Tensor[(14, 15, 3), float32], Tensor[(9, 12, 15), int64]) {
    %723 = @func_937() /* ty=(Tensor[(240), float64],) */;
    %724 = @func_937() /* ty=(Tensor[(240), float64],) */;
    %725 = cast(meta[relay.Constant][29] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %726 = cast(%var_3260, dtype="float64") /* ty=Tensor[(630), float64] */;
    %727 = reshape(%725, newshape=[14, 15, 1]) /* ty=Tensor[(14, 15, 1), float32] */;
    %728 = reshape(%726, newshape=[14, 15, 3]) /* ty=Tensor[(14, 15, 3), float64] */;
    %729 = @func_1087(%727, %728) /* ty=(Tensor[(240), float64], Tensor[(14, 15, ?), bool], Tensor[(14, 15, 3), bool]) */;
    %730 = %729.2;
    %731 = cast(%730, dtype="float32") /* ty=Tensor[(14, 15, 3), float32] */;
    %732 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %733 = @func_2881() /* ty=Tensor[(9, 12, 15), int64] */;
    %734 = %723.0;
    %735 = %724.0;
    %736 = erf(%731) /* ty=Tensor[(14, 15, 3), float32] */;
    %737 = %732.0;
    (%733, meta[relay.Constant][29] /* ty=Tensor[(210), float32] */, %var_3260, %734, %735, %736, %737)
  };
  %738(%var_3312) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(210), float32], Tensor[(630), float64], Tensor[(240), float64], Tensor[(240), float64], Tensor[(14, 15, 3), float32], Tensor[(9, 12, 15), int64]) */
}

def @func_4011(%var_3984: Tensor[(10, 11, 10), int16], %var_4006: Tensor[(780), uint32]) -> (Tensor[(10, 11, 10), int16], Tensor[(10, 11, 10), float32], Tensor[(12, 2, 10), uint8], Tensor[(11, 78), float32], Tensor[(240), float64], Tensor[(210), float32], Tensor[(780), uint32], Tensor[(1, 210), float32]) {
  %739 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 11, 10), int16] */, dtype="int16") /* ty=Tensor[(10, 11, 10), int16] */;
  %740 = shape_of(%var_3984, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%var_3984, dtype="int16") /* ty=Tensor[(10, 11, 10), int16] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %743 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 11, 10), int16] */, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %744 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 78), float32] */, dtype="float32") /* ty=Tensor[(11, 78), float32] */;
  %745 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 78), float32] */, dtype="float32") /* ty=Tensor[(11, 78), float32] */;
  %746 = cast(meta[relay.Constant][32] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %747 = reshape(%744, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %748 = reshape(%745, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %749 = reshape(%746, newshape=[240, 1]) /* ty=Tensor[(240, 1), float64] */;
  %750 = @func_493(%747, %748, %749) /* ty=(Tensor[(11, 6, 13), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240, 1), float64]) */;
  %751 = cast(%var_4006, dtype="uint32") /* ty=Tensor[(780), uint32] */;
  %752 = cast(%var_4006, dtype="uint32") /* ty=Tensor[(780), uint32] */;
  %753 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 210), float32] */, dtype="float32") /* ty=Tensor[(1, 210), float32] */;
  %754 = reshape(%751, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), uint32] */;
  %755 = reshape(%752, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), uint32] */;
  %756 = reshape(%753, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %757 = @func_1347(%754, %755, %756) /* ty=(Tensor[(6, 10, 13), uint32], Tensor[(14, 15, ?), bool], Tensor[(210), float32], Tensor[(70, 9), float64], Tensor[(9, 12, 15), int64]) */;
  %758 = bitwise_and(%741, %742) /* ty=Tensor[(10, 11, 10), int16] */;
  %759 = log(%743) /* ty=Tensor[(10, 11, 10), float32] */;
  %760 = %750.2;
  %761 = %757.2;
  (%758, %759, %760, meta[relay.Constant][31] /* ty=Tensor[(11, 78), float32] */, meta[relay.Constant][32] /* ty=Tensor[(240), float64] */, %761, %var_4006, meta[relay.Constant][33] /* ty=Tensor[(1, 210), float32] */)
}

def @func_6464() -> Tensor[(9, 12, 15), int64] {
  @func_6462() /* ty=Tensor[(9, 12, 15), int64] */
}

def @func_6462() -> Tensor[(9, 12, 15), int64] {
  @func_325() /* ty=Tensor[(9, 12, 15), int64] */
}

def @func_4728(%var_4725: Tensor[(1, 9, 3), int32], %var_4726: Tensor[(14, 9, 3), int32], %var_4727: Tensor[(1, 2016), float32]) -> (Tensor[(14, 9, 3), int32], Tensor[(12, 14, 12), bool], Tensor[(1, 2016), float32]) {
  %769 = fn (%var_4711: Tensor[(1, 9, 3), int32], %var_4712: Tensor[(14, 9, 3), int32], %var_4719: Tensor[(1, 2016), float32]) -> (Tensor[(14, 9, 3), int32], Tensor[(12, 14, 12), bool], Tensor[(1, 2016), float32]) {
    %762 = cast(%var_4711, dtype="int32") /* ty=Tensor[(1, 9, 3), int32] */;
    %763 = cast(%var_4712, dtype="int32") /* ty=Tensor[(14, 9, 3), int32] */;
    %764 = cast(%var_4719, dtype="float32") /* ty=Tensor[(1, 2016), float32] */;
    %765 = reshape(%764, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float32] */;
    %766 = @func_3622(%765) /* ty=(Tensor[(12, 14, 12), float32], Tensor[(12, 14, 12), bool]) */;
    %767 = maximum(%762, %763) /* ty=Tensor[(14, 9, 3), int32] */;
    %768 = %766.1;
    (%767, %768, %var_4719)
  };
  %769(%var_4725, %var_4726, %var_4727) /* ty=(Tensor[(14, 9, 3), int32], Tensor[(12, 14, 12), bool], Tensor[(1, 2016), float32]) */
}

def @func_2711() -> Tensor[(9, 12, 15), int64] {
  %770 = @func_2128() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %770.0
}

def @func_641() -> (Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) {
  %771 = cast(meta[relay.Constant][34] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %772 = reshape(%771, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
  %773 = @func_52(%772) /* ty=(Tensor[(12, 2, 10), uint8],) */;
  %774 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  %775 = %773.0;
  (%774, %775, meta[relay.Constant][34] /* ty=Tensor[(240), float64] */)
}

def @func_5126() -> (Tensor[(9, 12, 15), int64],) {
  %778 = fn () -> (Tensor[(9, 12, 15), int64],) {
    %776 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %777 = %776.0;
    (%777,)
  };
  %778() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_4468() -> Tensor[(9, 12, 15), int64] {
  @func_4466() /* ty=Tensor[(9, 12, 15), int64] */
}

def @func_6232() -> Tensor[(9, 12, 15), bool] {
  %779 = @func_3549() /* ty=(Tensor[(9, 12, 15), bool],) */;
  %779.0
}

def @func_4539(%var_4537: Tensor[(7, 3, 14), float64], %var_4538: Tensor[(7, 3, 14), float64]) -> (Tensor[(240), float64], Tensor[(7, 3, 14), bool], Tensor[(7, 3, 14), float32]) {
  %795 = fn (%var_4475: Tensor[(7, 3, 14), float64], %var_4492: Tensor[(7, 3, 14), float64]) -> (Tensor[(240), float64], Tensor[(7, 3, 14), bool], Tensor[(7, 3, 14), float32]) {
    %780 = cast(%var_4475, dtype="float64") /* ty=Tensor[(7, 3, 14), float64] */;
    %781 = acosh(%780) /* ty=Tensor[(7, 3, 14), float64] */;
    %782 = cast(%var_4492, dtype="bool") /* ty=Tensor[(7, 3, 14), bool] */;
    %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %784 = cast(%781, dtype="bool") /* ty=Tensor[(7, 3, 14), bool] */;
    %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %786 = cast(%781, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
    %787 = sigmoid(%786) /* ty=Tensor[(7, 3, 14), float32] */;
    %788 = cast(%var_4475, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
    %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
    %790 = cast(%787, dtype="float32") /* ty=Tensor[(7, 3, 14), float32] */;
    %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %792 = @func_1908() /* ty=Tensor[(240), float64] */;
    %793 = logical_or(%784, %785) /* ty=Tensor[(7, 3, 14), bool] */;
    %794 = mod(%790, %791) /* ty=Tensor[(7, 3, 14), float32] */;
    (%792, %793, %794)
  };
  %795(%var_4537, %var_4538) /* ty=(Tensor[(240), float64], Tensor[(7, 3, 14), bool], Tensor[(7, 3, 14), float32]) */
}

def @func_5338(%var_5336: bool) -> (Tensor[(9, 12, 15), float64], bool, bool, Tensor[(9, 12, 15), int64]) {
  @func_5335(%var_5336) /* ty=(Tensor[(9, 12, 15), float64], bool, bool, Tensor[(9, 12, 15), int64]) */
}

def @func_6559() -> (Tensor[(240), float64], Tensor[(9, 12, 15), int64]) {
  @func_6557() /* ty=(Tensor[(240), float64], Tensor[(9, 12, 15), int64]) */
}

def @func_4950() -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  %796 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %797 = @func_2711() /* ty=Tensor[(9, 12, 15), int64] */;
  %798 = %796.0;
  (%797, %798)
}

def @func_3550() -> (Tensor[(9, 12, 15), bool],) {
  %801 = fn () -> (Tensor[(9, 12, 15), bool],) {
    %799 = @func_1454() /* ty=(Tensor[(9, 12, 15), bool],) */;
    %800 = %799.0;
    (%800,)
  };
  %801() /* ty=(Tensor[(9, 12, 15), bool],) */
}

def @func_4091(%var_4072: Tensor[(2, 2, 13), float64], %var_4084: Tensor[(2, 2, 13), float64]) -> (Tensor[(2, 2, 13), float64], Tensor[(240), float64], Tensor[(2, 2, 13), bool]) {
  %802 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %803 = shape_of(%var_4072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(%var_4072, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %806 = cast(%var_4084, dtype="bool") /* ty=Tensor[(2, 2, 13), bool] */;
  %807 = shape_of(%var_4072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%var_4072, dtype="bool") /* ty=Tensor[(2, 2, 13), bool] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %810 = subtract(%804, %805) /* ty=Tensor[(2, 2, 13), float64] */;
  %811 = @func_2436() /* ty=Tensor[(240), float64] */;
  %812 = less(%808, %809) /* ty=Tensor[(2, 2, 13), bool] */;
  (%810, %811, %812)
}

def @func_4306(%var_4229: Tensor[(490), float32], %var_4283: Tensor[(9, 12, 15), int64]) -> (Tensor[(240), float64], Tensor[(490), float32], Tensor[(240), float64], Tensor[(9, 12, 15), uint8], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), uint32]) {
  %813 = @func_3158() /* ty=(Tensor[(240), float64], Tensor[(240), float64]) */;
  %814 = cast(%var_4229, dtype="float32") /* ty=Tensor[(490), float32] */;
  %815 = reshape(%814, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %816 = @func_1283(%815) /* ty=(Tensor[(10, 5), float64], Tensor[(9, 12, 15), int64], Tensor[(490), float32], Tensor[(240), float64]) */;
  %817 = %816.1;
  %818 = cast(%var_4283, dtype="uint8") /* ty=Tensor[(9, 12, 15), uint8] */;
  %819 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(%817, dtype="uint8") /* ty=Tensor[(9, 12, 15), uint8] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %822 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %823 = @func_1533() /* ty=(Tensor[(210, 1), float32], Tensor[(9, 12, 15), uint32]) */;
  %824 = @func_2436() /* ty=Tensor[(240), float64] */;
  %825 = %813.0;
  %826 = bitwise_xor(%820, %821) /* ty=Tensor[(9, 12, 15), uint8] */;
  %827 = %822.0;
  %828 = %823.1;
  (%824, %var_4229, %825, %826, %827, %828)
}

def @func_1347(%var_1329: Tensor[(6, 10, 13), uint32], %var_1330: Tensor[(6, 10, 13), uint32], %var_1339: Tensor[(210), float32]) -> (Tensor[(6, 10, 13), uint32], Tensor[(14, 15, ?), bool], Tensor[(210), float32], Tensor[(70, 9), float64], Tensor[(9, 12, 15), int64]) {
  %829 = cast(%var_1330, dtype="uint32") /* ty=Tensor[(6, 10, 13), uint32] */;
  %830 = shape_of(%var_1329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%var_1329, dtype="uint32") /* ty=Tensor[(6, 10, 13), uint32] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %833 = cast(%var_1339, dtype="float32") /* ty=Tensor[(210), float32] */;
  %834 = cast(meta[relay.Constant][36] /* ty=Tensor[(70, 9), float64] */, dtype="float64") /* ty=Tensor[(70, 9), float64] */;
  %835 = reshape(%833, newshape=[14, 15, 1]) /* ty=Tensor[(14, 15, 1), float32] */;
  %836 = reshape(%834, newshape=[14, 15, 3]) /* ty=Tensor[(14, 15, 3), float64] */;
  %837 = @func_1087(%835, %836) /* ty=(Tensor[(240), float64], Tensor[(14, 15, ?), bool], Tensor[(14, 15, 3), bool]) */;
  %838 = @func_641() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8], Tensor[(240), float64]) */;
  %839 = multiply(%831, %832) /* ty=Tensor[(6, 10, 13), uint32] */;
  %840 = %837.1;
  %841 = %838.0;
  (%839, %840, %var_1339, meta[relay.Constant][36] /* ty=Tensor[(70, 9), float64] */, %841)
}

def @func_1910() -> Tensor[(240), float64] {
  @func_1908() /* ty=Tensor[(240), float64] */
}

def @func_1352(%var_1349: Tensor[(6, 10, 13), uint32], %var_1350: Tensor[(6, 10, 13), uint32], %var_1351: Tensor[(210), float32]) -> (Tensor[(6, 10, 13), uint32], Tensor[(14, 15, ?), bool], Tensor[(210), float32], Tensor[(70, 9), float64], Tensor[(9, 12, 15), int64]) {
  @func_1347(%var_1349, %var_1350, %var_1351) /* ty=(Tensor[(6, 10, 13), uint32], Tensor[(14, 15, ?), bool], Tensor[(210), float32], Tensor[(70, 9), float64], Tensor[(9, 12, 15), int64]) */
}

def @func_1399(%var_1398: Tensor[(210), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(70, 9), float64], Tensor[(780), uint32], Tensor[(210), float32], Tensor[(9, 12, 15), int64]) {
  %857 = fn (%var_1385: Tensor[(210), float32]) -> (Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(70, 9), float64], Tensor[(780), uint32], Tensor[(210), float32], Tensor[(9, 12, 15), int64]) {
    %842 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %843 = cast(meta[relay.Constant][37] /* ty=Tensor[(780), uint32] */, dtype="uint32") /* ty=Tensor[(780), uint32] */;
    %844 = cast(meta[relay.Constant][37] /* ty=Tensor[(780), uint32] */, dtype="uint32") /* ty=Tensor[(780), uint32] */;
    %845 = cast(%var_1385, dtype="float32") /* ty=Tensor[(210), float32] */;
    %846 = reshape(%843, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), uint32] */;
    %847 = reshape(%844, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), uint32] */;
    %848 = reshape(%845, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %849 = @func_1347(%846, %847, %848) /* ty=(Tensor[(6, 10, 13), uint32], Tensor[(14, 15, ?), bool], Tensor[(210), float32], Tensor[(70, 9), float64], Tensor[(9, 12, 15), int64]) */;
    %850 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
    %851 = cast(%850, dtype="uint16") /* ty=Tensor[(9, 12, 15), uint16] */;
    %852 = reshape(%851, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), uint16] */;
    %853 = @func_1176(%852) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), bool], Tensor[(12, 2, 10), bool]) */;
    %854 = %842.0;
    %855 = %849.3;
    %856 = %853.0;
    (%854, %850, %855, meta[relay.Constant][37] /* ty=Tensor[(780), uint32] */, %var_1385, %856)
  };
  %857(%var_1398) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(70, 9), float64], Tensor[(780), uint32], Tensor[(210), float32], Tensor[(9, 12, 15), int64]) */
}

def @func_1533() -> (Tensor[(210, 1), float32], Tensor[(9, 12, 15), uint32]) {
  %858 = @func_325() /* ty=Tensor[(9, 12, 15), int64] */;
  %859 = cast(meta[relay.Constant][38] /* ty=Tensor[(210, 1), float32] */, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %860 = reshape(%859, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %861 = @func_1397(%860) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(70, 9), float64], Tensor[(780), uint32], Tensor[(210), float32], Tensor[(9, 12, 15), int64]) */;
  %862 = %861.5;
  %863 = cast(%862, dtype="uint32") /* ty=Tensor[(9, 12, 15), uint32] */;
  %864 = shape_of(%858, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%858, dtype="uint32") /* ty=Tensor[(9, 12, 15), uint32] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %867 = minimum(%865, %866) /* ty=Tensor[(9, 12, 15), uint32] */;
  (meta[relay.Constant][38] /* ty=Tensor[(210, 1), float32] */, %867)
}

def @func_5185() -> (Tensor[(9, 12, 15), int64],) {
  @func_5183() /* ty=(Tensor[(9, 12, 15), int64],) */
}

def @func_5508() -> (Tensor[(9, 12, 15), float32], Tensor[(105, 2), float32], Tensor[(15, 8, 11), uint8], Tensor[(1320), uint8], Tensor[(78), int64], Tensor[(6, 13, 7), bool], Tensor[(210), float32], Tensor[(2, 1, 11), float64], Tensor[(22), float64]) {
  @func_5506() /* ty=(Tensor[(9, 12, 15), float32], Tensor[(105, 2), float32], Tensor[(15, 8, 11), uint8], Tensor[(1320), uint8], Tensor[(78), int64], Tensor[(6, 13, 7), bool], Tensor[(210), float32], Tensor[(2, 1, 11), float64], Tensor[(22), float64]) */
}

def @func_2883() -> Tensor[(9, 12, 15), int64] {
  @func_2881() /* ty=Tensor[(9, 12, 15), int64] */
}

def @func_696(%var_694: Tensor[(15, 8, 11), uint8]) -> (Tensor[(15, 8, 11), uint8],) {
  @func_693(%var_694) /* ty=(Tensor[(15, 8, 11), uint8],) */
}

def @func_2551() -> (Tensor[(9, 12, 15), int64],) {
  %868 = @func_2343() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %869 = %868.0;
  (%869,)
}

def @func_6579() -> (Tensor[(9, 12, 15), float64],) {
  %870 = @func_5000() /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), float32]) */;
  %871 = %870.1;
  %872 = cast(%871, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %873 = log10(%872) /* ty=Tensor[(9, 12, 15), float64] */;
  (%873,)
}

def @func_1455() -> (Tensor[(9, 12, 15), bool],) {
  %883 = fn () -> (Tensor[(9, 12, 15), bool],) {
    %874 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %875 = %874.0;
    %876 = @func_723() /* ty=(Tensor[(9, 12, 15), int64],) */;
    %877 = %876.0;
    %878 = cast(%877, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
    %879 = shape_of(%875, dtype="int32") /* ty=Tensor[(3), int32] */;
    %880 = cast(%875, dtype="bool") /* ty=Tensor[(9, 12, 15), bool] */;
    %881 = dyn.reshape(%878, %879, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %882 = not_equal(%880, %881) /* ty=Tensor[(9, 12, 15), bool] */;
    (%882,)
  };
  %883() /* ty=(Tensor[(9, 12, 15), bool],) */
}

def @func_1715(%var_1713: Tensor[(4, 10, 12), float32], %var_1714: bool) -> (Tensor[(4, 10, 12), float32], Tensor[(70, 9), float64], Tensor[(210), float32], bool, bool) {
  %894 = fn (%var_1689: Tensor[(4, 10, 12), float32], %var_1708: bool) -> (Tensor[(4, 10, 12), float32], Tensor[(70, 9), float64], Tensor[(210), float32], bool, bool) {
    %884 = cast(%var_1689, dtype="float32") /* ty=Tensor[(4, 10, 12), float32] */;
    %885 = cast(meta[relay.Constant][39] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %886 = reshape(%885, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %887 = @func_1397(%886) /* ty=(Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64], Tensor[(70, 9), float64], Tensor[(780), uint32], Tensor[(210), float32], Tensor[(9, 12, 15), int64]) */;
    %888 = cast(%var_1708, dtype="bool") /* ty=bool */;
    %889 = reshape(%888, newshape=[]) /* ty=bool */;
    %890 = @func_408(%889) /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(7, 1, 15), bool], bool, Tensor[(7, 1, 15), bool], Tensor[(9, 12, 15), int64], Tensor[(12, 2, 10), uint8]) */;
    %891 = sigmoid(%884) /* ty=Tensor[(4, 10, 12), float32] */;
    %892 = %887.2;
    %893 = %890.2;
    (%891, %892, meta[relay.Constant][39] /* ty=Tensor[(210), float32] */, %893, %var_1708)
  };
  %894(%var_1713, %var_1714) /* ty=(Tensor[(4, 10, 12), float32], Tensor[(70, 9), float64], Tensor[(210), float32], bool, bool) */
}

def @func_4015(%var_4013: Tensor[(10, 11, 10), int16], %var_4014: Tensor[(780), uint32]) -> (Tensor[(10, 11, 10), int16], Tensor[(10, 11, 10), float32], Tensor[(12, 2, 10), uint8], Tensor[(11, 78), float32], Tensor[(240), float64], Tensor[(210), float32], Tensor[(780), uint32], Tensor[(1, 210), float32]) {
  @func_4011(%var_4013, %var_4014) /* ty=(Tensor[(10, 11, 10), int16], Tensor[(10, 11, 10), float32], Tensor[(12, 2, 10), uint8], Tensor[(11, 78), float32], Tensor[(240), float64], Tensor[(210), float32], Tensor[(780), uint32], Tensor[(1, 210), float32]) */
}

def @func_6379(%var_6340: Tensor[(15, 12), float32]) -> (Tensor[(15, 12), float32], Tensor[(9, 12, 15), int64], Tensor[(9, 12, 15), int64]) {
  %895 = cast(%var_6340, dtype="float32") /* ty=Tensor[(15, 12), float32] */;
  %896 = @func_2672() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %897 = @func_2128() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %898 = sin(%895) /* ty=Tensor[(15, 12), float32] */;
  %899 = %896.0;
  %900 = %897.0;
  (%898, %899, %900)
}

def @func_2352() -> (Tensor[(240), float64],) {
  %901 = @func_1908() /* ty=Tensor[(240), float64] */;
  (%901,)
}

def @func_6270(%var_6268: Tensor[(9, 14, 4), float64]) -> (Tensor[(9, 14, 4), float64], Tensor[(9, 14, 4), float32], Tensor[(12, 2, 10), uint8], bool) {
  @func_6267(%var_6268) /* ty=(Tensor[(9, 14, 4), float64], Tensor[(9, 14, 4), float32], Tensor[(12, 2, 10), uint8], bool) */
}

def @func_326() -> Tensor[(9, 12, 15), int64] {
  %906 = fn () -> Tensor[(9, 12, 15), int64] {
    %902 = @func_303() /* ty=(Tensor[(12, 2, 10), uint8], Tensor[(240), float64], Tensor[(9, ?, 15), bool]) */;
    %903 = %902.2;
    %904 = cast(%903, dtype="int64") /* ty=Tensor[(9, ?, 15), int64] */;
    %905 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 12, 15), bool] */, dtype="int64") /* ty=Tensor[(9, 12, 15), int64] */;
    left_shift(%904, %905) /* ty=Tensor[(9, 12, 15), int64] */
  };
  %906() /* ty=Tensor[(9, 12, 15), int64] */
}

def @func_4211() -> (Tensor[(9, 12, 15), float64],) {
  @func_4209() /* ty=(Tensor[(9, 12, 15), float64],) */
}

def @func_6509() -> (Tensor[(9, 12, 15), bool],) {
  %907 = @func_1454() /* ty=(Tensor[(9, 12, 15), bool],) */;
  %908 = %907.0;
  (%908,)
}

def @func_3386(%var_3384: float64, %var_3385: Tensor[(5, 4, 1), float64]) -> (Tensor[(5, 4, 1), float64], Tensor[(5, 4, 1), float64]) {
  %916 = fn (%var_3361: float64, %var_3362: Tensor[(5, 4, 1), float64]) -> (Tensor[(5, 4, 1), float64], Tensor[(5, 4, 1), float64]) {
    %909 = cast(%var_3361, dtype="float64") /* ty=float64 */;
    %910 = cast(%var_3362, dtype="float64") /* ty=Tensor[(5, 4, 1), float64] */;
    %911 = cast(%var_3362, dtype="float64") /* ty=Tensor[(5, 4, 1), float64] */;
    %912 = exp(%911) /* ty=Tensor[(5, 4, 1), float64] */;
    %913 = cast(%912, dtype="float64") /* ty=Tensor[(5, 4, 1), float64] */;
    %914 = power(%909, %910) /* ty=Tensor[(5, 4, 1), float64] */;
    %915 = atanh(%913) /* ty=Tensor[(5, 4, 1), float64] */;
    (%914, %915)
  };
  %916(%var_3384, %var_3385) /* ty=(Tensor[(5, 4, 1), float64], Tensor[(5, 4, 1), float64]) */
}

def @func_5772() -> (Tensor[(9, 12, 15), int64],) {
  %917 = @func_2551() /* ty=(Tensor[(9, 12, 15), int64],) */;
  %918 = %917.0;
  (%918,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen249/build/output.py", line 2484, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:00:52] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

