==========mod==========
#[version = "0.0.5"]
def @func_484() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  %0 = @func_420() /* ty=Tensor[(224, 1), float32] */;
  %1 = cast(%0, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %2 = cast(%0, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %3 = cosh(%1) /* ty=Tensor[(224, 1), float32] */;
  %4 = atan(%2) /* ty=Tensor[(224, 1), float32] */;
  (%3, %4)
}

def @func_4221(%var_4176: Tensor[(224, 9), float32]) -> (Tensor[(224, 9), float32],) {
  %5 = @func_2466() /* ty=Tensor[(224, 1), float32] */;
  %6 = cast(%5, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %7 = cast(%var_4176, dtype="bool") /* ty=Tensor[(224, 9), bool] */;
  %8 = logical_or(%6, %7) /* ty=Tensor[(224, 9), bool] */;
  %9 = cast(%8, dtype="float64") /* ty=Tensor[(224, 9), float64] */;
  %10 = erf(%9) /* ty=Tensor[(224, 9), float64] */;
  %11 = cast(%8, dtype="int32") /* ty=Tensor[(224, 9), int32] */;
  %12 = shape_of(%var_4176, dtype="int32") /* ty=Tensor[(2), int32] */;
  %13 = cast(%var_4176, dtype="int32") /* ty=Tensor[(224, 9), int32] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %15 = multiply(%13, %14) /* ty=Tensor[(224, 9), int32] */;
  %16 = cast(%15, dtype="float32") /* ty=Tensor[(224, 9), float32] */;
  %17 = shape_of(%10, dtype="int32") /* ty=Tensor[(2), int32] */;
  %18 = cast(%10, dtype="float32") /* ty=Tensor[(224, 9), float32] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %20 = mod(%18, %19) /* ty=Tensor[(224, 9), float32] */;
  %21 = cast(%8, dtype="float32") /* ty=Tensor[(224, 9), float32] */;
  %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(2), int32] */;
  %23 = cast(%20, dtype="float32") /* ty=Tensor[(224, 9), float32] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %25 = power(%23, %24) /* ty=Tensor[(224, 9), float32] */;
  %26 = cast(%25, dtype="float32") /* ty=Tensor[(224, 9), float32] */;
  %27 = atanh(%26) /* ty=Tensor[(224, 9), float32] */;
  (%27,)
}

def @func_2094() -> (Tensor[(224, 1), float32], Tensor[(224, 15), bool]) {
  %28 = @func_420() /* ty=Tensor[(224, 1), float32] */;
  %29 = cast(%28, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %30 = cast(%28, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %31 = cast(meta[relay.Constant][0] /* ty=Tensor[(224, 15), float32] */, dtype="bool") /* ty=Tensor[(224, 15), bool] */;
  %32 = asin(%29) /* ty=Tensor[(224, 1), float32] */;
  %33 = equal(%30, %31) /* ty=Tensor[(224, 15), bool] */;
  (%32, %33)
}

def @func_4246() -> (Tensor[(224, 1), float32],) {
  %34 = @func_2466() /* ty=Tensor[(224, 1), float32] */;
  (%34,)
}

def @func_2707(%var_2667: Tensor[(156), int32]) -> (Tensor[(224, 1), float32], Tensor[(2, 13, 6), int8], Tensor[(78), int32], Tensor[(156), int32], Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 5), uint32], Tensor[(56, 20), float32], Tensor[(1430), float64]) {
  %35 = @func_2578() /* ty=(Tensor[(224, 1), float32],) */;
  %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(78), int32] */, dtype="int32") /* ty=Tensor[(78), int32] */;
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(78), int32] */, dtype="int32") /* ty=Tensor[(78), int32] */;
  %38 = cast(%var_2667, dtype="int32") /* ty=Tensor[(156), int32] */;
  %39 = reshape(%36, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int32] */;
  %40 = reshape(%37, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int32] */;
  %41 = reshape(%38, newshape=[2, 13, 6]) /* ty=Tensor[(2, 13, 6), int32] */;
  %42 = @func_698(%39, %40, %41) /* ty=(Tensor[(2, 13, 6), int8], Tensor[(2, 13, 6), uint32]) */;
  %43 = @func_2606() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(224, 6), int16], Tensor[(224, 6), bool]) */;
  %44 = @func_2094() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 15), bool]) */;
  %45 = cast(meta[relay.Constant][2] /* ty=Tensor[(56, 20), float32] */, dtype="float32") /* ty=Tensor[(56, 20), float32] */;
  %46 = cast(meta[relay.Constant][3] /* ty=Tensor[(1430), float64] */, dtype="float64") /* ty=Tensor[(1430), float64] */;
  %47 = reshape(%45, newshape=[224, 5]) /* ty=Tensor[(224, 5), float32] */;
  %48 = reshape(%46, newshape=[1430, 1]) /* ty=Tensor[(1430, 1), float64] */;
  %49 = @func_1604(%47, %48) /* ty=(Tensor[(224, ?), int8], Tensor[(4, 3, 10), float32], Tensor[(120), int8], Tensor[(224, 5), uint32], Tensor[(13, 4, 11), float32], Tensor[(1430, 1), float64], Tensor[(572), float32]) */;
  %50 = %35.0;
  %51 = %42.0;
  %52 = %43.0;
  %53 = %44.0;
  %54 = %49.3;
  (%50, %51, meta[relay.Constant][1] /* ty=Tensor[(78), int32] */, %var_2667, %52, %53, %54, meta[relay.Constant][2] /* ty=Tensor[(56, 20), float32] */, meta[relay.Constant][3] /* ty=Tensor[(1430), float64] */)
}

def @func_4443() -> (Tensor[(224, 1), float32], Tensor[(30, 4), float64]) {
  %55 = @func_2416() /* ty=(Tensor[(224, 1), float32],) */;
  %56 = @func_1416() /* ty=(Tensor[(224, ?), int8], Tensor[(72, 1), float64], Tensor[(30, 4), float64]) */;
  %57 = %55.0;
  %58 = %56.2;
  (%57, %58)
}

def @func_2531() -> Tensor[(224, 1), float32] {
  %59 = @func_2334() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %59.1
}

def @func_2172() -> (Tensor[(224, 15), bool],) {
  %60 = @func_2094() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 15), bool]) */;
  %61 = %60.1;
  %62 = cast(meta[relay.Constant][4] /* ty=Tensor[(224, 15), bool] */, dtype="bool") /* ty=Tensor[(224, 15), bool] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(2), int32] */;
  %64 = cast(%61, dtype="bool") /* ty=Tensor[(224, 15), bool] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %66 = not_equal(%64, %65) /* ty=Tensor[(224, 15), bool] */;
  (%66,)
}

def @func_626() -> (Tensor[(224, 1), float32],) {
  %67 = @func_420() /* ty=Tensor[(224, 1), float32] */;
  (%67,)
}

def @func_2771() -> (Tensor[(224, 1), float32], Tensor[(1120), float32], Tensor[(1430), float64], Tensor[(224, 5), bool]) {
  %68 = @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %69 = cast(meta[relay.Constant][5] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(1430), float64] */, dtype="float64") /* ty=Tensor[(1430), float64] */;
  %71 = reshape(%69, newshape=[224, 5]) /* ty=Tensor[(224, 5), float32] */;
  %72 = reshape(%70, newshape=[1430, 1]) /* ty=Tensor[(1430, 1), float64] */;
  %73 = @func_1604(%71, %72) /* ty=(Tensor[(224, ?), int8], Tensor[(4, 3, 10), float32], Tensor[(120), int8], Tensor[(224, 5), uint32], Tensor[(13, 4, 11), float32], Tensor[(1430, 1), float64], Tensor[(572), float32]) */;
  %74 = %73.3;
  %75 = cast(%74, dtype="float64") /* ty=Tensor[(224, 5), float64] */;
  %76 = tan(%75) /* ty=Tensor[(224, 5), float64] */;
  %77 = cast(%74, dtype="bool") /* ty=Tensor[(224, 5), bool] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(2), int32] */;
  %79 = cast(%76, dtype="bool") /* ty=Tensor[(224, 5), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %81 = %68.0;
  %82 = not_equal(%79, %80) /* ty=Tensor[(224, 5), bool] */;
  (%81, meta[relay.Constant][5] /* ty=Tensor[(1120), float32] */, meta[relay.Constant][6] /* ty=Tensor[(1430), float64] */, %82)
}

def @func_3442(%var_3432: Tensor[(6, 3, 8), uint16], %var_3433: Tensor[(6, 3, 8), uint16]) -> Tensor[(6, 3, 8), uint16] {
  %83 = cast(%var_3433, dtype="uint16") /* ty=Tensor[(6, 3, 8), uint16] */;
  %84 = shape_of(%var_3432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%var_3432, dtype="uint16") /* ty=Tensor[(6, 3, 8), uint16] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%85, %86) /* ty=Tensor[(6, 3, 8), uint16] */
}

def @func_1416() -> (Tensor[(224, ?), int8], Tensor[(72, 1), float64], Tensor[(30, 4), float64]) {
  %87 = cast(meta[relay.Constant][7] /* ty=Tensor[(30, 4), int8] */, dtype="int8") /* ty=Tensor[(30, 4), int8] */;
  %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(30, 4), int8] */, dtype="int8") /* ty=Tensor[(30, 4), int8] */;
  %89 = reshape(%87, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
  %90 = reshape(%88, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
  %91 = @func_1298(%89, %90) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(224, 1), float32], Tensor[(72, 1), float64]) */;
  %92 = cast(meta[relay.Constant][7] /* ty=Tensor[(30, 4), int8] */, dtype="float64") /* ty=Tensor[(30, 4), float64] */;
  %93 = @func_745() /* ty=Tensor[(224, ?), int8] */;
  %94 = %91.2;
  %95 = sinh(%92) /* ty=Tensor[(30, 4), float64] */;
  (%93, %94, %95)
}

def @func_1740(%var_1731: Tensor[(224, 12), float32]) -> (Tensor[(224, 12), int32],) {
  %96 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %97 = %96.0;
  %98 = cast(%97, dtype="int32") /* ty=Tensor[(224, 1), int32] */;
  %99 = cast(%var_1731, dtype="int32") /* ty=Tensor[(224, 12), int32] */;
  %100 = bitwise_xor(%98, %99) /* ty=Tensor[(224, 12), int32] */;
  (%100,)
}

def @func_2979(%var_2956: Tensor[(14, 3, 16), float32], %var_2976: Tensor[(448), float32], %var_2977: Tensor[(120), int8]) -> (Tensor[(14, 3, 16), float32], Tensor[(224, 15), int8], Tensor[(3360, 1), float32], Tensor[(224, 1), float32], Tensor[(448), float32], Tensor[(120), int8]) {
  %101 = cast(%var_2956, dtype="float32") /* ty=Tensor[(14, 3, 16), float32] */;
  %102 = cast(meta[relay.Constant][8] /* ty=Tensor[(3360, 1), float32] */, dtype="float32") /* ty=Tensor[(3360, 1), float32] */;
  %103 = reshape(%102, newshape=[224, 15]) /* ty=Tensor[(224, 15), float32] */;
  %104 = cast(%var_2976, dtype="float32") /* ty=Tensor[(448), float32] */;
  %105 = cast(%var_2977, dtype="int8") /* ty=Tensor[(120), int8] */;
  %106 = reshape(%104, newshape=[224, 2]) /* ty=Tensor[(224, 2), float32] */;
  %107 = reshape(%105, newshape=[120]) /* ty=Tensor[(120), int8] */;
  %108 = @func_1888(%106, %107) /* ty=(Tensor[(224, 2), float64], Tensor[(224, 1), float32], Tensor[(120), int8], Tensor[(224, 6), bool], Tensor[(224, 6), int64], Tensor[(224, ?), int8]) */;
  %109 = acosh(%101) /* ty=Tensor[(14, 3, 16), float32] */;
  %110 = @func_2857(%103) /* ty=Tensor[(224, 15), int8] */;
  %111 = %108.1;
  (%109, %110, meta[relay.Constant][8] /* ty=Tensor[(3360, 1), float32] */, %111, %var_2976, %var_2977)
}

def @func_4507() -> Tensor[(224, 1), float32] {
  %112 = @func_2642() /* ty=(Tensor[(224, 1), float32],) */;
  %112.0
}

def @func_4090() -> (Tensor[(5, 13, 6), uint8], Tensor[(5, 13, 6), float32]) {
  %113 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 13, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 13, 6), float32] */;
  %114 = sigmoid(%113) /* ty=Tensor[(5, 13, 6), float32] */;
  %115 = cast(%114, dtype="uint8") /* ty=Tensor[(5, 13, 6), uint8] */;
  %116 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(5, 13, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 13, 6), float32] */, dtype="uint8") /* ty=Tensor[(5, 13, 6), uint8] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %119 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 13, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 13, 6), float32] */;
  %120 = bitwise_and(%117, %118) /* ty=Tensor[(5, 13, 6), uint8] */;
  %121 = exp(%119) /* ty=Tensor[(5, 13, 6), float32] */;
  (%120, %121)
}

def @func_2642() -> (Tensor[(224, 1), float32],) {
  %122 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %123 = %122.0;
  (%123,)
}

def @func_387() -> (Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) {
  %124 = @func_378() /* ty=(Tensor[(3, 11, 8), float32],) */;
  %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(4), float32] */, dtype="float32") /* ty=Tensor[(4), float32] */;
  %126 = cast(meta[relay.Constant][11] /* ty=Tensor[(224, 1), float32] */, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %127 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 52), float32] */, dtype="float32") /* ty=Tensor[(11, 52), float32] */;
  %128 = reshape(%125, newshape=[1, 4, 1]) /* ty=Tensor[(1, 4, 1), float32] */;
  %129 = reshape(%126, newshape=[14, 4, 4]) /* ty=Tensor[(14, 4, 4), float32] */;
  %130 = reshape(%127, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %131 = @func_222(%128, %129, %130) /* ty=(Tensor[(14, 4, 4), bool], Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(13, 4, 11), float32], Tensor[(14, 4, 4), float32]) */;
  %132 = %124.0;
  %133 = %131.2;
  (%132, %133, meta[relay.Constant][10] /* ty=Tensor[(4), float32] */, meta[relay.Constant][11] /* ty=Tensor[(224, 1), float32] */, meta[relay.Constant][12] /* ty=Tensor[(11, 52), float32] */)
}

def @func_3728() -> (Tensor[(224, 1), float32],) {
  %134 = @func_2416() /* ty=(Tensor[(224, 1), float32],) */;
  %135 = %134.0;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %137 = sqrt(%136) /* ty=Tensor[(224, 1), float32] */;
  (%137,)
}

def @func_2606() -> (Tensor[(3, 11, 8), float32], Tensor[(224, 6), int16], Tensor[(224, 6), bool]) {
  %138 = @func_378() /* ty=(Tensor[(3, 11, 8), float32],) */;
  %139 = @func_420() /* ty=Tensor[(224, 1), float32] */;
  %140 = cast(%139, dtype="int16") /* ty=Tensor[(224, 1), int16] */;
  %141 = cast(meta[relay.Constant][13] /* ty=Tensor[(224, 6), float32] */, dtype="int16") /* ty=Tensor[(224, 6), int16] */;
  %142 = cast(%139, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %143 = cast(meta[relay.Constant][13] /* ty=Tensor[(224, 6), float32] */, dtype="bool") /* ty=Tensor[(224, 6), bool] */;
  %144 = %138.0;
  %145 = left_shift(%140, %141) /* ty=Tensor[(224, 6), int16] */;
  %146 = greater_equal(%142, %143) /* ty=Tensor[(224, 6), bool] */;
  (%144, %145, %146)
}

def @func_745() -> Tensor[(224, ?), int8] {
  %147 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %148 = %147.0;
  %149 = @func_626() /* ty=(Tensor[(224, 1), float32],) */;
  %150 = %149.0;
  %151 = cast(%150, dtype="int8") /* ty=Tensor[(224, 1), int8] */;
  %152 = shape_of(%148, dtype="int32") /* ty=Tensor[(2), int32] */;
  %153 = cast(%148, dtype="int8") /* ty=Tensor[(224, 1), int8] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  bitwise_or(%153, %154) /* ty=Tensor[(224, ?), int8] */
}

def @func_3866(%var_3780: Tensor[(16, 3, 11), float64], %var_3812: Tensor[(572), float32], %var_3844: Tensor[(2464), float32]) -> (Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(224, 1), float32], Tensor[(224, 11), bool], Tensor[(2464), float32], Tensor[(16, 3, 11), float32]) {
  %155 = cast(%var_3812, dtype="float32") /* ty=Tensor[(572), float32] */;
  %156 = reshape(%155, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %157 = @func_2416() /* ty=(Tensor[(224, 1), float32],) */;
  %158 = cast(%var_3844, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %159 = reshape(%158, newshape=[224, 11]) /* ty=Tensor[(224, 11), float32] */;
  %160 = cast(%var_3780, dtype="float64") /* ty=Tensor[(16, 3, 11), float64] */;
  %161 = atan(%160) /* ty=Tensor[(16, 3, 11), float64] */;
  %162 = cast(%161, dtype="float32") /* ty=Tensor[(16, 3, 11), float32] */;
  %163 = sinh(%162) /* ty=Tensor[(16, 3, 11), float32] */;
  %164 = cast(%163, dtype="float32") /* ty=Tensor[(16, 3, 11), float32] */;
  %165 = @func_100(%156) /* ty=Tensor[(13, 4, 11), float32] */;
  %166 = %157.0;
  %167 = @func_3051(%159) /* ty=Tensor[(224, 11), bool] */;
  %168 = log10(%164) /* ty=Tensor[(16, 3, 11), float32] */;
  (%165, %var_3812, %166, %167, %var_3844, %168)
}

def @func_1353(%var_1329: Tensor[(13, 10, 11), float64], %var_1351: Tensor[(572), float32]) -> (Tensor[(13, 10, 11), float64], Tensor[(224, ?), int8], Tensor[(13, 4, 11), float32], Tensor[(572), float32]) {
  %169 = cast(%var_1329, dtype="float64") /* ty=Tensor[(13, 10, 11), float64] */;
  %170 = cast(%var_1351, dtype="float32") /* ty=Tensor[(572), float32] */;
  %171 = reshape(%170, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %172 = acosh(%169) /* ty=Tensor[(13, 10, 11), float64] */;
  %173 = @func_745() /* ty=Tensor[(224, ?), int8] */;
  %174 = @func_100(%171) /* ty=Tensor[(13, 4, 11), float32] */;
  (%172, %173, %174, %var_1351)
}

def @func_4122(%var_4112: Tensor[(224, 12), int8]) -> Tensor[(224, 12), bool] {
  %175 = @func_745() /* ty=Tensor[(224, ?), int8] */;
  %176 = cast(%175, dtype="bool") /* ty=Tensor[(224, ?), bool] */;
  %177 = cast(%var_4112, dtype="bool") /* ty=Tensor[(224, 12), bool] */;
  greater_equal(%176, %177) /* ty=Tensor[(224, 12), bool] */
}

def @func_2384() -> (Tensor[(224, ?), int8], Tensor[(224, 1), float32], Tensor[(2, 224), float32], Tensor[(120), int8], Tensor[(224, 1), float32], Tensor[(11, 10, 6), float32], Tensor[(660), float64], Tensor[(572), float32], Tensor[(224, 1), float32]) {
  %178 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 224), float32] */, dtype="float32") /* ty=Tensor[(2, 224), float32] */;
  %179 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %180 = reshape(%178, newshape=[224, 2]) /* ty=Tensor[(224, 2), float32] */;
  %181 = reshape(%179, newshape=[120]) /* ty=Tensor[(120), int8] */;
  %182 = @func_1888(%180, %181) /* ty=(Tensor[(224, 2), float64], Tensor[(224, 1), float32], Tensor[(120), int8], Tensor[(224, 6), bool], Tensor[(224, 6), int64], Tensor[(224, ?), int8]) */;
  %183 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %184 = cast(meta[relay.Constant][16] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %185 = cast(meta[relay.Constant][17] /* ty=Tensor[(572), float32] */, dtype="float32") /* ty=Tensor[(572), float32] */;
  %186 = reshape(%184, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), float64] */;
  %187 = reshape(%185, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %188 = @func_163(%186, %187) /* ty=(Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(11, 10, 6), float64], Tensor[(13, 4, 11), float32], Tensor[(11, 10, 6), float32]) */;
  %189 = @func_1020() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %190 = @func_745() /* ty=Tensor[(224, ?), int8] */;
  %191 = %182.1;
  %192 = %183.1;
  %193 = %188.4;
  %194 = %189.1;
  (%190, %191, meta[relay.Constant][14] /* ty=Tensor[(2, 224), float32] */, meta[relay.Constant][15] /* ty=Tensor[(120), int8] */, %192, %193, meta[relay.Constant][16] /* ty=Tensor[(660), float64] */, meta[relay.Constant][17] /* ty=Tensor[(572), float32] */, %194)
}

def @func_2219() -> (Tensor[(3, 11, 8), float32], Tensor[(224, 3), float64], Tensor[(1, 672), float32], Tensor[(224, 15), float32]) {
  %195 = @func_378() /* ty=(Tensor[(3, 11, 8), float32],) */;
  %196 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 672), float32] */, dtype="float32") /* ty=Tensor[(1, 672), float32] */;
  %197 = reshape(%196, newshape=[224, 3]) /* ty=Tensor[(224, 3), float32] */;
  %198 = @func_2119(%197) /* ty=(Tensor[(224, 3), float64],) */;
  %199 = @func_2172() /* ty=(Tensor[(224, 15), bool],) */;
  %200 = %199.0;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(224, 15), float32] */;
  %202 = atan(%201) /* ty=Tensor[(224, 15), float32] */;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(224, 15), float32] */;
  %204 = %195.0;
  %205 = %198.0;
  %206 = asinh(%203) /* ty=Tensor[(224, 15), float32] */;
  (%204, %205, meta[relay.Constant][18] /* ty=Tensor[(1, 672), float32] */, %206)
}

def @func_222(%var_182: Tensor[(1, 4, 1), float32], %var_189: Tensor[(14, 4, 4), float32], %var_198: Tensor[(572), float32]) -> (Tensor[(14, 4, 4), bool], Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(13, 4, 11), float32], Tensor[(14, 4, 4), float32]) {
  %207 = cast(%var_182, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %208 = log2(%207) /* ty=Tensor[(1, 4, 1), float32] */;
  %209 = cast(%208, dtype="bool") /* ty=Tensor[(1, 4, 1), bool] */;
  %210 = cast(%var_189, dtype="bool") /* ty=Tensor[(14, 4, 4), bool] */;
  %211 = equal(%209, %210) /* ty=Tensor[(14, 4, 4), bool] */;
  %212 = cast(%211, dtype="bool") /* ty=Tensor[(14, 4, 4), bool] */;
  %213 = cast(%208, dtype="bool") /* ty=Tensor[(1, 4, 1), bool] */;
  %214 = cast(%var_198, dtype="float32") /* ty=Tensor[(572), float32] */;
  %215 = reshape(%214, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %216 = @func_100(%215) /* ty=Tensor[(13, 4, 11), float32] */;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(13, 4, 11), float32] */;
  %218 = reshape(%217, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %219 = cast(%var_189, dtype="bool") /* ty=Tensor[(14, 4, 4), bool] */;
  %220 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%211, dtype="bool") /* ty=Tensor[(14, 4, 4), bool] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %223 = greater_equal(%221, %222) /* ty=Tensor[(14, 4, 4), bool] */;
  %224 = cast(%211, dtype="float32") /* ty=Tensor[(14, 4, 4), float32] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="float32") /* ty=Tensor[(14, 4, 4), float32] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %228 = less(%212, %213) /* ty=Tensor[(14, 4, 4), bool] */;
  %229 = @func_100(%218) /* ty=Tensor[(13, 4, 11), float32] */;
  %230 = add(%226, %227) /* ty=Tensor[(14, 4, 4), float32] */;
  (%228, %216, %var_198, %229, %230)
}

def @func_977() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  %231 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %232 = @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %233 = %231.1;
  %234 = %232.1;
  (%233, %234)
}

def @func_4282() -> (Tensor[(224, 1), float32],) {
  %235 = @func_3211() /* ty=Tensor[(224, 1), float32] */;
  (%235,)
}

def @func_2023(%var_1980: Tensor[(224, 11), float32]) -> (Tensor[(224, 1), float32], Tensor[(572), float32], Tensor[(224, 11), bool], Tensor[(13, 4, 11), float32], Tensor[(224, 11), int16]) {
  %236 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %237 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %238 = @func_1664() /* ty=Tensor[(224, 1), float32] */;
  %239 = cast(%238, dtype="uint8") /* ty=Tensor[(224, 1), uint8] */;
  %240 = cast(%var_1980, dtype="uint8") /* ty=Tensor[(224, 11), uint8] */;
  %241 = logical_xor(%239, %240) /* ty=Tensor[(224, 11), uint8] */;
  %242 = cast(%238, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %243 = sin(%242) /* ty=Tensor[(224, 1), float32] */;
  %244 = cast(%241, dtype="bool") /* ty=Tensor[(224, 11), bool] */;
  %245 = cast(%243, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %246 = %237.1;
  %247 = cast(%246, dtype="float32") /* ty=Tensor[(572), float32] */;
  %248 = reshape(%247, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %249 = cast(%243, dtype="int16") /* ty=Tensor[(224, 1), int16] */;
  %250 = cast(%var_1980, dtype="int16") /* ty=Tensor[(224, 11), int16] */;
  %251 = %236.1;
  %252 = less(%244, %245) /* ty=Tensor[(224, 11), bool] */;
  %253 = @func_100(%248) /* ty=Tensor[(13, 4, 11), float32] */;
  %254 = left_shift(%249, %250) /* ty=Tensor[(224, 11), int16] */;
  (%251, %246, %252, %253, %254)
}

def @func_3669() -> (Tensor[(224, 6), float32], Tensor[(224, 1), float32]) {
  %255 = @func_2606() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(224, 6), int16], Tensor[(224, 6), bool]) */;
  %256 = %255.1;
  %257 = cast(%256, dtype="float32") /* ty=Tensor[(224, 6), float32] */;
  %258 = @func_2642() /* ty=(Tensor[(224, 1), float32],) */;
  %259 = asin(%257) /* ty=Tensor[(224, 6), float32] */;
  %260 = %258.0;
  (%259, %260)
}

def @func_2466() -> Tensor[(224, 1), float32] {
  %261 = @func_2416() /* ty=(Tensor[(224, 1), float32],) */;
  %261.0
}

def @func_3051(%var_3043: Tensor[(224, 11), float32]) -> Tensor[(224, 11), bool] {
  %262 = @func_2334() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %263 = %262.1;
  %264 = cast(%263, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %265 = cast(%var_3043, dtype="bool") /* ty=Tensor[(224, 11), bool] */;
  logical_or(%264, %265) /* ty=Tensor[(224, 11), bool] */
}

def @func_1097(%var_1088: Tensor[(224, 5), float32]) -> (Tensor[(11, 52), float32], Tensor[(4), float32], Tensor[(224, 5), bool]) {
  %266 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %267 = %266.4;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(11, 52), float32] */;
  %269 = reshape(%268, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %270 = @func_1058(%269) /* ty=(Tensor[(224, 1), float32], Tensor[(14, 4, 4), bool], Tensor[(4), float32], Tensor[(572), float32]) */;
  %271 = @func_626() /* ty=(Tensor[(224, 1), float32],) */;
  %272 = %271.0;
  %273 = cast(%272, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %274 = cast(%var_1088, dtype="bool") /* ty=Tensor[(224, 5), bool] */;
  %275 = %270.2;
  %276 = less_equal(%273, %274) /* ty=Tensor[(224, 5), bool] */;
  (%267, %275, %276)
}

def @func_4333() -> (Tensor[(224, 1), float64],) {
  %277 = @func_2334() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %278 = %277.1;
  %279 = cast(%278, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %280 = log2(%279) /* ty=Tensor[(224, 1), float64] */;
  (%280,)
}

def @func_1604(%var_1593: Tensor[(224, 5), float32], %var_1599: Tensor[(1430, 1), float64]) -> (Tensor[(224, ?), int8], Tensor[(4, 3, 10), float32], Tensor[(120), int8], Tensor[(224, 5), uint32], Tensor[(13, 4, 11), float32], Tensor[(1430, 1), float64], Tensor[(572), float32]) {
  %281 = cast(meta[relay.Constant][19] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %282 = cast(meta[relay.Constant][19] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %283 = reshape(%281, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
  %284 = reshape(%282, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
  %285 = @func_1298(%283, %284) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(224, 1), float32], Tensor[(72, 1), float64]) */;
  %286 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %287 = %286.0;
  %288 = cast(%287, dtype="uint32") /* ty=Tensor[(224, 1), uint32] */;
  %289 = cast(%var_1593, dtype="uint32") /* ty=Tensor[(224, 5), uint32] */;
  %290 = cast(%var_1599, dtype="float64") /* ty=Tensor[(1430, 1), float64] */;
  %291 = cast(meta[relay.Constant][20] /* ty=Tensor[(572), float32] */, dtype="float32") /* ty=Tensor[(572), float32] */;
  %292 = reshape(%290, newshape=[13, 10, 11]) /* ty=Tensor[(13, 10, 11), float64] */;
  %293 = reshape(%291, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %294 = @func_1353(%292, %293) /* ty=(Tensor[(13, 10, 11), float64], Tensor[(224, ?), int8], Tensor[(13, 4, 11), float32], Tensor[(572), float32]) */;
  %295 = @func_745() /* ty=Tensor[(224, ?), int8] */;
  %296 = %285.0;
  %297 = bitwise_or(%288, %289) /* ty=Tensor[(224, 5), uint32] */;
  %298 = %294.2;
  (%295, %296, meta[relay.Constant][19] /* ty=Tensor[(120), int8] */, %297, %298, %var_1599, meta[relay.Constant][20] /* ty=Tensor[(572), float32] */)
}

def @func_582() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  %299 = @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %300 = %299.1;
  %301 = @func_420() /* ty=Tensor[(224, 1), float32] */;
  (%300, %301)
}

def @func_2334() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  %302 = @func_1664() /* ty=Tensor[(224, 1), float32] */;
  %303 = @func_1664() /* ty=Tensor[(224, 1), float32] */;
  (%302, %303)
}

def @func_4500() -> Tensor[(224, 1), float32] {
  %304 = @func_626() /* ty=(Tensor[(224, 1), float32],) */;
  %304.0
}

def @func_2305(%var_2275: Tensor[(224, 8), float64]) -> (Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 8), bool], Tensor[(224, 5), int16], Tensor[(224, 5), float32]) {
  %305 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %306 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %307 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %308 = %307.3;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %310 = acos(%309) /* ty=Tensor[(224, 1), float64] */;
  %311 = cast(%310, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %312 = cast(%var_2275, dtype="bool") /* ty=Tensor[(224, 8), bool] */;
  %313 = cast(%308, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %314 = cast(meta[relay.Constant][21] /* ty=Tensor[(224, 5), float32] */, dtype="float32") /* ty=Tensor[(224, 5), float32] */;
  %315 = power(%313, %314) /* ty=Tensor[(224, 5), float32] */;
  %316 = cast(%310, dtype="int16") /* ty=Tensor[(224, 1), int16] */;
  %317 = cast(%315, dtype="int16") /* ty=Tensor[(224, 5), int16] */;
  %318 = cast(meta[relay.Constant][21] /* ty=Tensor[(224, 5), float32] */, dtype="float32") /* ty=Tensor[(224, 5), float32] */;
  %319 = %305.0;
  %320 = %306.0;
  %321 = greater(%311, %312) /* ty=Tensor[(224, 8), bool] */;
  %322 = left_shift(%316, %317) /* ty=Tensor[(224, 5), int16] */;
  %323 = atanh(%318) /* ty=Tensor[(224, 5), float32] */;
  (%319, %320, %321, %322, %323)
}

def @func_1664() -> Tensor[(224, 1), float32] {
  %324 = @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %325 = %324.0;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  rsqrt(%326) /* ty=Tensor[(224, 1), float32] */
}

def @func_1231(%var_1198: Tensor[(8, 1, 9), float64]) -> (Tensor[(8, 1, 9), float64], Tensor[(8, 1, 9), float64], Tensor[(224, 1), float32]) {
  %327 = cast(%var_1198, dtype="float64") /* ty=Tensor[(8, 1, 9), float64] */;
  %328 = asin(%327) /* ty=Tensor[(8, 1, 9), float64] */;
  %329 = cast(%328, dtype="float64") /* ty=Tensor[(8, 1, 9), float64] */;
  %330 = cast(%328, dtype="float64") /* ty=Tensor[(8, 1, 9), float64] */;
  %331 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %332 = exp(%329) /* ty=Tensor[(8, 1, 9), float64] */;
  %333 = acosh(%330) /* ty=Tensor[(8, 1, 9), float64] */;
  %334 = %331.1;
  (%332, %333, %334)
}

def @func_1058(%var_1051: Tensor[(572), float32]) -> (Tensor[(224, 1), float32], Tensor[(14, 4, 4), bool], Tensor[(4), float32], Tensor[(572), float32]) {
  %335 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %336 = cast(meta[relay.Constant][22] /* ty=Tensor[(4), float32] */, dtype="float32") /* ty=Tensor[(4), float32] */;
  %337 = %335.0;
  %338 = cast(%337, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %339 = cast(%var_1051, dtype="float32") /* ty=Tensor[(572), float32] */;
  %340 = reshape(%336, newshape=[1, 4, 1]) /* ty=Tensor[(1, 4, 1), float32] */;
  %341 = reshape(%338, newshape=[14, 4, 4]) /* ty=Tensor[(14, 4, 4), float32] */;
  %342 = reshape(%339, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %343 = @func_222(%340, %341, %342) /* ty=(Tensor[(14, 4, 4), bool], Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(13, 4, 11), float32], Tensor[(14, 4, 4), float32]) */;
  %344 = %343.0;
  (%337, %344, meta[relay.Constant][22] /* ty=Tensor[(4), float32] */, %var_1051)
}

def @func_1477() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  %345 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %346 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %347 = @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %348 = %347.1;
  %349 = cast(%348, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %350 = sinh(%349) /* ty=Tensor[(224, 1), float32] */;
  %351 = cast(%350, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %352 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %353 = %345.1;
  %354 = %346.0;
  %355 = @func_420() /* ty=Tensor[(224, 1), float32] */;
  %356 = tan(%351) /* ty=Tensor[(224, 1), float32] */;
  %357 = %352.0;
  (%353, %354, %355, %356, %357)
}

def @func_2635(%var_2619: Tensor[(3, 11, 8), float32]) -> (Tensor[(3, 11, 8), uint32], Tensor[(13, 4, 11), float32], Tensor[(572), float32]) {
  %358 = @func_378() /* ty=(Tensor[(3, 11, 8), float32],) */;
  %359 = %358.0;
  %360 = cast(%var_2619, dtype="uint32") /* ty=Tensor[(3, 11, 8), uint32] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="uint32") /* ty=Tensor[(3, 11, 8), uint32] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %364 = cast(meta[relay.Constant][23] /* ty=Tensor[(572), float32] */, dtype="float32") /* ty=Tensor[(572), float32] */;
  %365 = reshape(%364, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %366 = logical_xor(%362, %363) /* ty=Tensor[(3, 11, 8), uint32] */;
  %367 = @func_100(%365) /* ty=Tensor[(13, 4, 11), float32] */;
  (%366, %367, meta[relay.Constant][23] /* ty=Tensor[(572), float32] */)
}

def @main(%var_4590: Tensor[(224, 11), float32], %var_4604: Tensor[(224, 11), float32]) -> (Tensor[(224, 11), bool], Tensor[(224, 11), float64]) {
  %368 = @func_1664() /* ty=Tensor[(224, 1), float32] */;
  %369 = cast(%var_4590, dtype="bool") /* ty=Tensor[(224, 11), bool] */;
  %370 = cast(%368, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %371 = cast(%368, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %372 = cast(%var_4590, dtype="float32") /* ty=Tensor[(224, 11), float32] */;
  %373 = subtract(%371, %372) /* ty=Tensor[(224, 11), float32] */;
  %374 = cast(%var_4604, dtype="float64") /* ty=Tensor[(224, 11), float64] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(2), int32] */;
  %376 = cast(%373, dtype="float64") /* ty=Tensor[(224, 11), float64] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %378 = greater_equal(%369, %370) /* ty=Tensor[(224, 11), bool] */;
  %379 = power(%376, %377) /* ty=Tensor[(224, 11), float64] */;
  (%378, %379)
}

def @func_100(%var_96: Tensor[(13, 4, 11), float32]) -> Tensor[(13, 4, 11), float32] {
  %380 = cast(%var_96, dtype="float32") /* ty=Tensor[(13, 4, 11), float32] */;
  atan(%380) /* ty=Tensor[(13, 4, 11), float32] */
}

def @func_1020() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  %381 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %382 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %383 = %381.0;
  %384 = %382.0;
  (%383, %384)
}

def @func_698(%var_671: Tensor[(1, 13, 6), int32], %var_672: Tensor[(1, 13, 6), int32], %var_685: Tensor[(2, 13, 6), int32]) -> (Tensor[(2, 13, 6), int8], Tensor[(2, 13, 6), uint32]) {
  %385 = cast(%var_672, dtype="int32") /* ty=Tensor[(1, 13, 6), int32] */;
  %386 = shape_of(%var_671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%var_671, dtype="int32") /* ty=Tensor[(1, 13, 6), int32] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %389 = right_shift(%387, %388) /* ty=Tensor[(?, 13, 6), int32] */;
  %390 = cast(%389, dtype="int8") /* ty=Tensor[(?, 13, 6), int8] */;
  %391 = cast(%var_685, dtype="int8") /* ty=Tensor[(2, 13, 6), int8] */;
  %392 = cast(%var_671, dtype="uint32") /* ty=Tensor[(1, 13, 6), uint32] */;
  %393 = cast(%var_685, dtype="uint32") /* ty=Tensor[(2, 13, 6), uint32] */;
  %394 = subtract(%390, %391) /* ty=Tensor[(2, 13, 6), int8] */;
  %395 = logical_xor(%392, %393) /* ty=Tensor[(2, 13, 6), uint32] */;
  (%394, %395)
}

def @func_4454(%var_4449: Tensor[(2, 12, 10), float64]) -> Tensor[(2, 12, 10), float64] {
  %396 = cast(%var_4449, dtype="float64") /* ty=Tensor[(2, 12, 10), float64] */;
  %397 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(2, 12, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 10), float64] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%398, %399) /* ty=Tensor[(2, 12, 10), float64] */
}

def @func_1298(%var_1242: Tensor[(4, 3, 10), int8], %var_1243: Tensor[(4, 3, 10), int8]) -> (Tensor[(4, 3, 10), float32], Tensor[(224, 1), float32], Tensor[(72, 1), float64]) {
  %400 = cast(%var_1243, dtype="int8") /* ty=Tensor[(4, 3, 10), int8] */;
  %401 = shape_of(%var_1242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%var_1242, dtype="int8") /* ty=Tensor[(4, 3, 10), int8] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %404 = bitwise_and(%402, %403) /* ty=Tensor[(4, 3, 10), int8] */;
  %405 = cast(%404, dtype="float32") /* ty=Tensor[(4, 3, 10), float32] */;
  %406 = cast(meta[relay.Constant][25] /* ty=Tensor[(72, 1), float64] */, dtype="float64") /* ty=Tensor[(72, 1), float64] */;
  %407 = reshape(%406, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float64] */;
  %408 = @func_1231(%407) /* ty=(Tensor[(8, 1, 9), float64], Tensor[(8, 1, 9), float64], Tensor[(224, 1), float32]) */;
  %409 = cosh(%405) /* ty=Tensor[(4, 3, 10), float32] */;
  %410 = %408.2;
  (%409, %410, meta[relay.Constant][25] /* ty=Tensor[(72, 1), float64] */)
}

def @func_3211() -> Tensor[(224, 1), float32] {
  %411 = @func_2334() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %411.0
}

def @func_4025(%var_4022: Tensor[(144), uint16]) -> (Tensor[(224, 15), int8], Tensor[(6, 3, 8), uint16], Tensor[(144), uint16]) {
  %412 = @func_3926() /* ty=(Tensor[(224, 15), int8], Tensor[(3360), float32], Tensor[(224, 6), float64]) */;
  %413 = cast(%var_4022, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %414 = cast(%var_4022, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %415 = reshape(%413, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), uint16] */;
  %416 = reshape(%414, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), uint16] */;
  %417 = %412.0;
  %418 = @func_3442(%415, %416) /* ty=Tensor[(6, 3, 8), uint16] */;
  (%417, %418, %var_4022)
}

def @func_3561(%var_3538: Tensor[(224, 5), float32]) -> (Tensor[(224, 5), uint16],) {
  %419 = @func_1690() /* ty=Tensor[(224, 1), float32] */;
  %420 = cast(%419, dtype="uint16") /* ty=Tensor[(224, 1), uint16] */;
  %421 = cast(%var_3538, dtype="uint16") /* ty=Tensor[(224, 5), uint16] */;
  %422 = logical_xor(%420, %421) /* ty=Tensor[(224, 5), uint16] */;
  (%422,)
}

def @func_2557() -> Tensor[(224, 1), float32] {
  %423 = @func_2094() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 15), bool]) */;
  %423.0
}

def @func_3341() -> (Tensor[(572), float32], Tensor[(224, 5), int16], Tensor[(1792), float64], Tensor[(224, 1), float32], Tensor[(224, 120), int32]) {
  %424 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %425 = cast(meta[relay.Constant][26] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %426 = reshape(%425, newshape=[224, 8]) /* ty=Tensor[(224, 8), float64] */;
  %427 = @func_2305(%426) /* ty=(Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 8), bool], Tensor[(224, 5), int16], Tensor[(224, 5), float32]) */;
  %428 = cast(meta[relay.Constant][27] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %429 = cast(meta[relay.Constant][27] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %430 = reshape(%428, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
  %431 = reshape(%429, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
  %432 = @func_1298(%430, %431) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(224, 1), float32], Tensor[(72, 1), float64]) */;
  %433 = @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %434 = %433.0;
  %435 = cast(%434, dtype="int32") /* ty=Tensor[(224, 1), int32] */;
  %436 = cast(meta[relay.Constant][27] /* ty=Tensor[(120), int8] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %437 = %424.1;
  %438 = %427.3;
  %439 = %432.1;
  %440 = right_shift(%435, %436) /* ty=Tensor[(224, 120), int32] */;
  (%437, %438, meta[relay.Constant][26] /* ty=Tensor[(1792), float64] */, %439, %440)
}

def @func_946(%var_899: Tensor[(224, 6), float64], %var_924: Tensor[(143, 4), float32]) -> (Tensor[(4), float32], Tensor[(224, ?), bool], Tensor[(224, ?), uint8], Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 6), float32], Tensor[(11, 10, 6), float64], Tensor[(660), float64], Tensor[(143, 4), float32], Tensor[(2, 13, 6), int8], Tensor[(78, 1), int32], Tensor[(156), int32], Tensor[(224, ?), uint16]) {
  %441 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %442 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %443 = %442.0;
  %444 = cast(%443, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %445 = log10(%444) /* ty=Tensor[(224, 1), float64] */;
  %446 = cast(%443, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(2), int32] */;
  %448 = cast(%445, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %450 = cast(%443, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %451 = sigmoid(%450) /* ty=Tensor[(224, 1), float32] */;
  %452 = cast(%451, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %453 = shape_of(%443, dtype="int32") /* ty=Tensor[(2), int32] */;
  %454 = cast(%443, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %456 = logical_and(%454, %455) /* ty=Tensor[(224, ?), bool] */;
  %457 = cast(%445, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(2), int32] */;
  %459 = cast(%456, dtype="float32") /* ty=Tensor[(224, ?), float32] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %461 = floor_divide(%459, %460) /* ty=Tensor[(224, ?), float32] */;
  %462 = cast(%456, dtype="uint8") /* ty=Tensor[(224, ?), uint8] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(2), int32] */;
  %464 = cast(%461, dtype="uint8") /* ty=Tensor[(224, ?), uint8] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %466 = @func_378() /* ty=(Tensor[(3, 11, 8), float32],) */;
  %467 = cast(%443, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %468 = acosh(%467) /* ty=Tensor[(224, 1), float64] */;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %470 = cos(%469) /* ty=Tensor[(224, 1), float64] */;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %472 = cast(%var_899, dtype="float32") /* ty=Tensor[(224, 6), float32] */;
  %473 = cast(meta[relay.Constant][28] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %474 = cast(%var_924, dtype="float32") /* ty=Tensor[(143, 4), float32] */;
  %475 = reshape(%473, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), float64] */;
  %476 = reshape(%474, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %477 = @func_163(%475, %476) /* ty=(Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(11, 10, 6), float64], Tensor[(13, 4, 11), float32], Tensor[(11, 10, 6), float32]) */;
  %478 = cast(meta[relay.Constant][29] /* ty=Tensor[(78, 1), int32] */, dtype="int32") /* ty=Tensor[(78, 1), int32] */;
  %479 = cast(meta[relay.Constant][29] /* ty=Tensor[(78, 1), int32] */, dtype="int32") /* ty=Tensor[(78, 1), int32] */;
  %480 = cast(meta[relay.Constant][30] /* ty=Tensor[(156), int32] */, dtype="int32") /* ty=Tensor[(156), int32] */;
  %481 = reshape(%478, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int32] */;
  %482 = reshape(%479, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int32] */;
  %483 = reshape(%480, newshape=[2, 13, 6]) /* ty=Tensor[(2, 13, 6), int32] */;
  %484 = @func_698(%481, %482, %483) /* ty=(Tensor[(2, 13, 6), int8], Tensor[(2, 13, 6), uint32]) */;
  %485 = cast(%468, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %486 = shape_of(%470, dtype="int32") /* ty=Tensor[(2), int32] */;
  %487 = cast(%470, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %489 = mod(%487, %488) /* ty=Tensor[(224, ?), float32] */;
  %490 = cast(%461, dtype="uint16") /* ty=Tensor[(224, ?), uint16] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(2), int32] */;
  %492 = cast(%489, dtype="uint16") /* ty=Tensor[(224, ?), uint16] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %494 = %441.2;
  %495 = equal(%448, %449) /* ty=Tensor[(224, ?), bool] */;
  %496 = left_shift(%464, %465) /* ty=Tensor[(224, ?), uint8] */;
  %497 = %466.0;
  %498 = @func_420() /* ty=Tensor[(224, 1), float32] */;
  %499 = subtract(%471, %472) /* ty=Tensor[(224, 6), float32] */;
  %500 = %477.2;
  %501 = %484.0;
  %502 = bitwise_xor(%492, %493) /* ty=Tensor[(224, ?), uint16] */;
  (%494, %495, %496, %497, %498, %499, %500, meta[relay.Constant][28] /* ty=Tensor[(660), float64] */, %var_924, %501, meta[relay.Constant][29] /* ty=Tensor[(78, 1), int32] */, meta[relay.Constant][30] /* ty=Tensor[(156), int32] */, %502)
}

def @func_2416() -> (Tensor[(224, 1), float32],) {
  %503 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %504 = %503.1;
  (%504,)
}

def @func_420() -> Tensor[(224, 1), float32] {
  %505 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %505.3
}

def @func_3238(%var_3223: Tensor[(224, 16), float32]) -> (Tensor[(224, 16), int16], Tensor[(224, 1), float32]) {
  %506 = @func_1020() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %507 = %506.0;
  %508 = cast(%507, dtype="int16") /* ty=Tensor[(224, 1), int16] */;
  %509 = cast(%var_3223, dtype="int16") /* ty=Tensor[(224, 16), int16] */;
  %510 = add(%508, %509) /* ty=Tensor[(224, 16), int16] */;
  %511 = @func_3211() /* ty=Tensor[(224, 1), float32] */;
  (%510, %511)
}

def @func_2119(%var_2106: Tensor[(224, 3), float32]) -> (Tensor[(224, 3), float64],) {
  %512 = @func_1477() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %513 = %512.3;
  %514 = cast(%513, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %515 = cast(%var_2106, dtype="float64") /* ty=Tensor[(224, 3), float64] */;
  %516 = floor_mod(%514, %515) /* ty=Tensor[(224, 3), float64] */;
  (%516,)
}

def @func_3627(%var_3585: Tensor[(224, 8), float32], %var_3595: Tensor[(224, 3), float32], %var_3605: Tensor[(224, 8), float64]) -> (Tensor[(224, 3), int8], Tensor[(224, 8), float64], Tensor[(224, 8), float64]) {
  %517 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %518 = %517.3;
  %519 = cast(%518, dtype="int8") /* ty=Tensor[(224, 1), int8] */;
  %520 = cast(%var_3595, dtype="int8") /* ty=Tensor[(224, 3), int8] */;
  %521 = cast(%518, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %522 = cast(%var_3585, dtype="float64") /* ty=Tensor[(224, 8), float64] */;
  %523 = minimum(%521, %522) /* ty=Tensor[(224, 8), float64] */;
  %524 = cast(%var_3605, dtype="float64") /* ty=Tensor[(224, 8), float64] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(2), int32] */;
  %526 = cast(%523, dtype="float64") /* ty=Tensor[(224, 8), float64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %528 = cast(%523, dtype="float64") /* ty=Tensor[(224, 8), float64] */;
  %529 = bitwise_xor(%519, %520) /* ty=Tensor[(224, 3), int8] */;
  %530 = divide(%526, %527) /* ty=Tensor[(224, 8), float64] */;
  %531 = asin(%528) /* ty=Tensor[(224, 8), float64] */;
  (%529, %530, %531)
}

def @func_2857(%var_2847: Tensor[(224, 15), float32]) -> Tensor[(224, 15), int8] {
  %532 = @func_2531() /* ty=Tensor[(224, 1), float32] */;
  %533 = cast(%532, dtype="int8") /* ty=Tensor[(224, 1), int8] */;
  %534 = cast(%var_2847, dtype="int8") /* ty=Tensor[(224, 15), int8] */;
  multiply(%533, %534) /* ty=Tensor[(224, 15), int8] */
}

def @func_1139(%var_1133: Tensor[(224, 8), float32]) -> Tensor[(224, 8), float32] {
  %535 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %536 = %535.1;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %538 = cast(%var_1133, dtype="float32") /* ty=Tensor[(224, 8), float32] */;
  power(%537, %538) /* ty=Tensor[(224, 8), float32] */
}

def @func_3926() -> (Tensor[(224, 15), int8], Tensor[(3360), float32], Tensor[(224, 6), float64]) {
  %539 = cast(meta[relay.Constant][31] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %540 = reshape(%539, newshape=[224, 15]) /* ty=Tensor[(224, 15), float32] */;
  %541 = @func_3669() /* ty=(Tensor[(224, 6), float32], Tensor[(224, 1), float32]) */;
  %542 = %541.0;
  %543 = cast(%542, dtype="float32") /* ty=Tensor[(224, 6), float32] */;
  %544 = log10(%543) /* ty=Tensor[(224, 6), float32] */;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(224, 6), float32] */;
  %546 = sinh(%545) /* ty=Tensor[(224, 6), float32] */;
  %547 = cast(%546, dtype="bool") /* ty=Tensor[(224, 6), bool] */;
  %548 = shape_of(%542, dtype="int32") /* ty=Tensor[(2), int32] */;
  %549 = cast(%542, dtype="bool") /* ty=Tensor[(224, 6), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %551 = equal(%549, %550) /* ty=Tensor[(224, 6), bool] */;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(224, 6), float64] */;
  %553 = @func_2857(%540) /* ty=Tensor[(224, 15), int8] */;
  %554 = cosh(%552) /* ty=Tensor[(224, 6), float64] */;
  (%553, meta[relay.Constant][31] /* ty=Tensor[(3360), float32] */, %554)
}

def @func_1888(%var_1807: Tensor[(224, 2), float32], %var_1842: Tensor[(120), int8]) -> (Tensor[(224, 2), float64], Tensor[(224, 1), float32], Tensor[(120), int8], Tensor[(224, 6), bool], Tensor[(224, 6), int64], Tensor[(224, ?), int8]) {
  %555 = @func_1477() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %556 = %555.0;
  %557 = cast(%556, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %558 = cast(%var_1807, dtype="float64") /* ty=Tensor[(224, 2), float64] */;
  %559 = cast(%var_1842, dtype="int8") /* ty=Tensor[(120), int8] */;
  %560 = cast(%var_1842, dtype="int8") /* ty=Tensor[(120), int8] */;
  %561 = reshape(%559, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
  %562 = reshape(%560, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
  %563 = @func_1298(%561, %562) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(224, 1), float32], Tensor[(72, 1), float64]) */;
  %564 = cast(%556, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %565 = cast(meta[relay.Constant][32] /* ty=Tensor[(224, 6), float32] */, dtype="float64") /* ty=Tensor[(224, 6), float64] */;
  %566 = mod(%564, %565) /* ty=Tensor[(224, 6), float64] */;
  %567 = cast(meta[relay.Constant][32] /* ty=Tensor[(224, 6), float32] */, dtype="bool") /* ty=Tensor[(224, 6), bool] */;
  %568 = shape_of(%566, dtype="int32") /* ty=Tensor[(2), int32] */;
  %569 = cast(%566, dtype="bool") /* ty=Tensor[(224, 6), bool] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %571 = @func_1690() /* ty=Tensor[(224, 1), float32] */;
  %572 = cast(meta[relay.Constant][32] /* ty=Tensor[(224, 6), float32] */, dtype="int64") /* ty=Tensor[(224, 6), int64] */;
  %573 = cast(%571, dtype="int64") /* ty=Tensor[(224, 1), int64] */;
  %574 = @func_1416() /* ty=(Tensor[(224, ?), int8], Tensor[(72, 1), float64], Tensor[(30, 4), float64]) */;
  %575 = power(%557, %558) /* ty=Tensor[(224, 2), float64] */;
  %576 = %563.1;
  %577 = not_equal(%569, %570) /* ty=Tensor[(224, 6), bool] */;
  %578 = bitwise_or(%572, %573) /* ty=Tensor[(224, 6), int64] */;
  %579 = %574.0;
  (%575, %576, %var_1842, %577, %578, %579)
}

def @func_378() -> (Tensor[(3, 11, 8), float32],) {
  %580 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
  %581 = acosh(%580) /* ty=Tensor[(3, 11, 8), float32] */;
  (%581,)
}

def @func_1690() -> Tensor[(224, 1), float32] {
  %582 = @func_1477() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %582.0
}

def @func_2578() -> (Tensor[(224, 1), float32],) {
  %583 = @func_1477() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %584 = %583.0;
  (%584,)
}

def @func_163(%var_132: Tensor[(11, 10, 6), float64], %var_137: Tensor[(572), float32]) -> (Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(11, 10, 6), float64], Tensor[(13, 4, 11), float32], Tensor[(11, 10, 6), float32]) {
  %585 = cast(%var_137, dtype="float32") /* ty=Tensor[(572), float32] */;
  %586 = reshape(%585, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %587 = cast(%var_132, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %588 = log2(%587) /* ty=Tensor[(11, 10, 6), float64] */;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %590 = cast(%var_137, dtype="float32") /* ty=Tensor[(572), float32] */;
  %591 = reshape(%590, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %592 = cast(%588, dtype="float32") /* ty=Tensor[(11, 10, 6), float32] */;
  %593 = shape_of(%var_132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%var_132, dtype="float32") /* ty=Tensor[(11, 10, 6), float32] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %596 = @func_100(%586) /* ty=Tensor[(13, 4, 11), float32] */;
  %597 = sigmoid(%589) /* ty=Tensor[(11, 10, 6), float64] */;
  %598 = @func_100(%591) /* ty=Tensor[(13, 4, 11), float32] */;
  %599 = mod(%594, %595) /* ty=Tensor[(11, 10, 6), float32] */;
  (%596, %var_137, %597, %598, %599)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2533() -> Tensor[(224, 1), float32] {
  @func_2531() /* ty=Tensor[(224, 1), float32] */
}

def @func_2418() -> (Tensor[(224, 1), float32],) {
  @func_2416() /* ty=(Tensor[(224, 1), float32],) */
}

def @func_1356(%var_1354: Tensor[(13, 10, 11), float64], %var_1355: Tensor[(572), float32]) -> (Tensor[(13, 10, 11), float64], Tensor[(224, ?), int8], Tensor[(13, 4, 11), float32], Tensor[(572), float32]) {
  %6 = fn (%var_1329: Tensor[(13, 10, 11), float64], %var_1351: Tensor[(572), float32]) -> (Tensor[(13, 10, 11), float64], Tensor[(224, ?), int8], Tensor[(13, 4, 11), float32], Tensor[(572), float32]) {
    %0 = cast(%var_1329, dtype="float64") /* ty=Tensor[(13, 10, 11), float64] */;
    %1 = cast(%var_1351, dtype="float32") /* ty=Tensor[(572), float32] */;
    %2 = reshape(%1, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
    %3 = acosh(%0) /* ty=Tensor[(13, 10, 11), float64] */;
    %4 = @func_745() /* ty=Tensor[(224, ?), int8] */;
    %5 = @func_100(%2) /* ty=Tensor[(13, 4, 11), float32] */;
    (%3, %4, %5, %var_1351)
  };
  %6(%var_1354, %var_1355) /* ty=(Tensor[(13, 10, 11), float64], Tensor[(224, ?), int8], Tensor[(13, 4, 11), float32], Tensor[(572), float32]) */
}

def @func_2580() -> (Tensor[(224, 1), float32],) {
  @func_2578() /* ty=(Tensor[(224, 1), float32],) */
}

def @func_1097(%var_1088: Tensor[(224, 5), float32]) -> (Tensor[(11, 52), float32], Tensor[(4), float32], Tensor[(224, 5), bool]) {
  %7 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %8 = %7.4;
  %9 = cast(%8, dtype="float32") /* ty=Tensor[(11, 52), float32] */;
  %10 = reshape(%9, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %11 = @func_1058(%10) /* ty=(Tensor[(224, 1), float32], Tensor[(14, 4, 4), bool], Tensor[(4), float32], Tensor[(572), float32]) */;
  %12 = @func_626() /* ty=(Tensor[(224, 1), float32],) */;
  %13 = %12.0;
  %14 = cast(%13, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %15 = cast(%var_1088, dtype="bool") /* ty=Tensor[(224, 5), bool] */;
  %16 = %11.2;
  %17 = less_equal(%14, %15) /* ty=Tensor[(224, 5), bool] */;
  (%8, %16, %17)
}

def @func_2023(%var_1980: Tensor[(224, 11), float32]) -> (Tensor[(224, 1), float32], Tensor[(572), float32], Tensor[(224, 11), bool], Tensor[(13, 4, 11), float32], Tensor[(224, 11), int16]) {
  %18 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %19 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %20 = @func_1664() /* ty=Tensor[(224, 1), float32] */;
  %21 = cast(%20, dtype="uint8") /* ty=Tensor[(224, 1), uint8] */;
  %22 = cast(%var_1980, dtype="uint8") /* ty=Tensor[(224, 11), uint8] */;
  %23 = logical_xor(%21, %22) /* ty=Tensor[(224, 11), uint8] */;
  %24 = cast(%20, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %25 = sin(%24) /* ty=Tensor[(224, 1), float32] */;
  %26 = cast(%23, dtype="bool") /* ty=Tensor[(224, 11), bool] */;
  %27 = cast(%25, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %28 = %19.1;
  %29 = cast(%28, dtype="float32") /* ty=Tensor[(572), float32] */;
  %30 = reshape(%29, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %31 = cast(%25, dtype="int16") /* ty=Tensor[(224, 1), int16] */;
  %32 = cast(%var_1980, dtype="int16") /* ty=Tensor[(224, 11), int16] */;
  %33 = %18.1;
  %34 = less(%26, %27) /* ty=Tensor[(224, 11), bool] */;
  %35 = @func_100(%30) /* ty=Tensor[(13, 4, 11), float32] */;
  %36 = left_shift(%31, %32) /* ty=Tensor[(224, 11), int16] */;
  (%33, %28, %34, %35, %36)
}

def @func_3051(%var_3043: Tensor[(224, 11), float32]) -> Tensor[(224, 11), bool] {
  %37 = @func_2334() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %38 = %37.1;
  %39 = cast(%38, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %40 = cast(%var_3043, dtype="bool") /* ty=Tensor[(224, 11), bool] */;
  logical_or(%39, %40) /* ty=Tensor[(224, 11), bool] */
}

def @func_4025(%var_4022: Tensor[(144), uint16]) -> (Tensor[(224, 15), int8], Tensor[(6, 3, 8), uint16], Tensor[(144), uint16]) {
  %41 = @func_3926() /* ty=(Tensor[(224, 15), int8], Tensor[(3360), float32], Tensor[(224, 6), float64]) */;
  %42 = cast(%var_4022, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %43 = cast(%var_4022, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %44 = reshape(%42, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), uint16] */;
  %45 = reshape(%43, newshape=[6, 3, 8]) /* ty=Tensor[(6, 3, 8), uint16] */;
  %46 = %41.0;
  %47 = @func_3442(%44, %45) /* ty=Tensor[(6, 3, 8), uint16] */;
  (%46, %47, %var_4022)
}

def @func_420() -> Tensor[(224, 1), float32] {
  %48 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %48.3
}

def @func_3670() -> (Tensor[(224, 6), float32], Tensor[(224, 1), float32]) {
  %55 = fn () -> (Tensor[(224, 6), float32], Tensor[(224, 1), float32]) {
    %49 = @func_2606() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(224, 6), int16], Tensor[(224, 6), bool]) */;
    %50 = %49.1;
    %51 = cast(%50, dtype="float32") /* ty=Tensor[(224, 6), float32] */;
    %52 = @func_2642() /* ty=(Tensor[(224, 1), float32],) */;
    %53 = asin(%51) /* ty=Tensor[(224, 6), float32] */;
    %54 = %52.0;
    (%53, %54)
  };
  %55() /* ty=(Tensor[(224, 6), float32], Tensor[(224, 1), float32]) */
}

def @func_4334() -> (Tensor[(224, 1), float64],) {
  %60 = fn () -> (Tensor[(224, 1), float64],) {
    %56 = @func_2334() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %57 = %56.1;
    %58 = cast(%57, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
    %59 = log2(%58) /* ty=Tensor[(224, 1), float64] */;
    (%59,)
  };
  %60() /* ty=(Tensor[(224, 1), float64],) */
}

def @func_3928() -> (Tensor[(224, 15), int8], Tensor[(3360), float32], Tensor[(224, 6), float64]) {
  @func_3926() /* ty=(Tensor[(224, 15), int8], Tensor[(3360), float32], Tensor[(224, 6), float64]) */
}

def @func_3442(%var_3432: Tensor[(6, 3, 8), uint16], %var_3433: Tensor[(6, 3, 8), uint16]) -> Tensor[(6, 3, 8), uint16] {
  %61 = cast(%var_3433, dtype="uint16") /* ty=Tensor[(6, 3, 8), uint16] */;
  %62 = shape_of(%var_3432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%var_3432, dtype="uint16") /* ty=Tensor[(6, 3, 8), uint16] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%63, %64) /* ty=Tensor[(6, 3, 8), uint16] */
}

def @func_1061(%var_1059: Tensor[(572), float32]) -> (Tensor[(224, 1), float32], Tensor[(14, 4, 4), bool], Tensor[(4), float32], Tensor[(572), float32]) {
  @func_1058(%var_1059) /* ty=(Tensor[(224, 1), float32], Tensor[(14, 4, 4), bool], Tensor[(4), float32], Tensor[(572), float32]) */
}

def @func_582() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  %65 = @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %66 = %65.1;
  %67 = @func_420() /* ty=Tensor[(224, 1), float32] */;
  (%66, %67)
}

def @func_1058(%var_1051: Tensor[(572), float32]) -> (Tensor[(224, 1), float32], Tensor[(14, 4, 4), bool], Tensor[(4), float32], Tensor[(572), float32]) {
  %68 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %69 = cast(meta[relay.Constant][0] /* ty=Tensor[(4), float32] */, dtype="float32") /* ty=Tensor[(4), float32] */;
  %70 = %68.0;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %72 = cast(%var_1051, dtype="float32") /* ty=Tensor[(572), float32] */;
  %73 = reshape(%69, newshape=[1, 4, 1]) /* ty=Tensor[(1, 4, 1), float32] */;
  %74 = reshape(%71, newshape=[14, 4, 4]) /* ty=Tensor[(14, 4, 4), float32] */;
  %75 = reshape(%72, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %76 = @func_222(%73, %74, %75) /* ty=(Tensor[(14, 4, 4), bool], Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(13, 4, 11), float32], Tensor[(14, 4, 4), float32]) */;
  %77 = %76.0;
  (%70, %77, meta[relay.Constant][0] /* ty=Tensor[(4), float32] */, %var_1051)
}

def @func_3240(%var_3239: Tensor[(224, 16), float32]) -> (Tensor[(224, 16), int16], Tensor[(224, 1), float32]) {
  %84 = fn (%var_3223: Tensor[(224, 16), float32]) -> (Tensor[(224, 16), int16], Tensor[(224, 1), float32]) {
    %78 = @func_1020() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %79 = %78.0;
    %80 = cast(%79, dtype="int16") /* ty=Tensor[(224, 1), int16] */;
    %81 = cast(%var_3223, dtype="int16") /* ty=Tensor[(224, 16), int16] */;
    %82 = add(%80, %81) /* ty=Tensor[(224, 16), int16] */;
    %83 = @func_3211() /* ty=Tensor[(224, 1), float32] */;
    (%82, %83)
  };
  %84(%var_3239) /* ty=(Tensor[(224, 16), int16], Tensor[(224, 1), float32]) */
}

def @func_3866(%var_3780: Tensor[(16, 3, 11), float64], %var_3812: Tensor[(572), float32], %var_3844: Tensor[(2464), float32]) -> (Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(224, 1), float32], Tensor[(224, 11), bool], Tensor[(2464), float32], Tensor[(16, 3, 11), float32]) {
  %85 = cast(%var_3812, dtype="float32") /* ty=Tensor[(572), float32] */;
  %86 = reshape(%85, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %87 = @func_2416() /* ty=(Tensor[(224, 1), float32],) */;
  %88 = cast(%var_3844, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %89 = reshape(%88, newshape=[224, 11]) /* ty=Tensor[(224, 11), float32] */;
  %90 = cast(%var_3780, dtype="float64") /* ty=Tensor[(16, 3, 11), float64] */;
  %91 = atan(%90) /* ty=Tensor[(16, 3, 11), float64] */;
  %92 = cast(%91, dtype="float32") /* ty=Tensor[(16, 3, 11), float32] */;
  %93 = sinh(%92) /* ty=Tensor[(16, 3, 11), float32] */;
  %94 = cast(%93, dtype="float32") /* ty=Tensor[(16, 3, 11), float32] */;
  %95 = @func_100(%86) /* ty=Tensor[(13, 4, 11), float32] */;
  %96 = %87.0;
  %97 = @func_3051(%89) /* ty=Tensor[(224, 11), bool] */;
  %98 = log10(%94) /* ty=Tensor[(16, 3, 11), float32] */;
  (%95, %var_3812, %96, %97, %var_3844, %98)
}

def @func_4508() -> Tensor[(224, 1), float32] {
  %100 = fn () -> Tensor[(224, 1), float32] {
    %99 = @func_2642() /* ty=(Tensor[(224, 1), float32],) */;
    %99.0
  };
  %100() /* ty=Tensor[(224, 1), float32] */
}

def @func_1418() -> (Tensor[(224, ?), int8], Tensor[(72, 1), float64], Tensor[(30, 4), float64]) {
  @func_1416() /* ty=(Tensor[(224, ?), int8], Tensor[(72, 1), float64], Tensor[(30, 4), float64]) */
}

def @func_2122(%var_2120: Tensor[(224, 3), float32]) -> (Tensor[(224, 3), float64],) {
  @func_2119(%var_2120) /* ty=(Tensor[(224, 3), float64],) */
}

def @func_1607(%var_1605: Tensor[(224, 5), float32], %var_1606: Tensor[(1430, 1), float64]) -> (Tensor[(224, ?), int8], Tensor[(4, 3, 10), float32], Tensor[(120), int8], Tensor[(224, 5), uint32], Tensor[(13, 4, 11), float32], Tensor[(1430, 1), float64], Tensor[(572), float32]) {
  %119 = fn (%var_1593: Tensor[(224, 5), float32], %var_1599: Tensor[(1430, 1), float64]) -> (Tensor[(224, ?), int8], Tensor[(4, 3, 10), float32], Tensor[(120), int8], Tensor[(224, 5), uint32], Tensor[(13, 4, 11), float32], Tensor[(1430, 1), float64], Tensor[(572), float32]) {
    %101 = cast(meta[relay.Constant][1] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
    %102 = cast(meta[relay.Constant][1] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
    %103 = reshape(%101, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
    %104 = reshape(%102, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
    %105 = @func_1298(%103, %104) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(224, 1), float32], Tensor[(72, 1), float64]) */;
    %106 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %107 = %106.0;
    %108 = cast(%107, dtype="uint32") /* ty=Tensor[(224, 1), uint32] */;
    %109 = cast(%var_1593, dtype="uint32") /* ty=Tensor[(224, 5), uint32] */;
    %110 = cast(%var_1599, dtype="float64") /* ty=Tensor[(1430, 1), float64] */;
    %111 = cast(meta[relay.Constant][2] /* ty=Tensor[(572), float32] */, dtype="float32") /* ty=Tensor[(572), float32] */;
    %112 = reshape(%110, newshape=[13, 10, 11]) /* ty=Tensor[(13, 10, 11), float64] */;
    %113 = reshape(%111, newshape=[572]) /* ty=Tensor[(572), float32] */;
    %114 = @func_1353(%112, %113) /* ty=(Tensor[(13, 10, 11), float64], Tensor[(224, ?), int8], Tensor[(13, 4, 11), float32], Tensor[(572), float32]) */;
    %115 = @func_745() /* ty=Tensor[(224, ?), int8] */;
    %116 = %105.0;
    %117 = bitwise_or(%108, %109) /* ty=Tensor[(224, 5), uint32] */;
    %118 = %114.2;
    (%115, %116, meta[relay.Constant][1] /* ty=Tensor[(120), int8] */, %117, %118, %var_1599, meta[relay.Constant][2] /* ty=Tensor[(572), float32] */)
  };
  %119(%var_1605, %var_1606) /* ty=(Tensor[(224, ?), int8], Tensor[(4, 3, 10), float32], Tensor[(120), int8], Tensor[(224, 5), uint32], Tensor[(13, 4, 11), float32], Tensor[(1430, 1), float64], Tensor[(572), float32]) */
}

def @func_1743(%var_1741: Tensor[(224, 12), float32]) -> (Tensor[(224, 12), int32],) {
  @func_1740(%var_1741) /* ty=(Tensor[(224, 12), int32],) */
}

def @func_584() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */
}

def @func_1477() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  %120 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %121 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %122 = @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %123 = %122.1;
  %124 = cast(%123, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %125 = sinh(%124) /* ty=Tensor[(224, 1), float32] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %127 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %128 = %120.1;
  %129 = %121.0;
  %130 = @func_420() /* ty=Tensor[(224, 1), float32] */;
  %131 = tan(%126) /* ty=Tensor[(224, 1), float32] */;
  %132 = %127.0;
  (%128, %129, %130, %131, %132)
}

def @func_1740(%var_1731: Tensor[(224, 12), float32]) -> (Tensor[(224, 12), int32],) {
  %133 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %134 = %133.0;
  %135 = cast(%134, dtype="int32") /* ty=Tensor[(224, 1), int32] */;
  %136 = cast(%var_1731, dtype="int32") /* ty=Tensor[(224, 12), int32] */;
  %137 = bitwise_xor(%135, %136) /* ty=Tensor[(224, 12), int32] */;
  (%137,)
}

def @func_2607() -> (Tensor[(3, 11, 8), float32], Tensor[(224, 6), int16], Tensor[(224, 6), bool]) {
  %147 = fn () -> (Tensor[(3, 11, 8), float32], Tensor[(224, 6), int16], Tensor[(224, 6), bool]) {
    %138 = @func_378() /* ty=(Tensor[(3, 11, 8), float32],) */;
    %139 = @func_420() /* ty=Tensor[(224, 1), float32] */;
    %140 = cast(%139, dtype="int16") /* ty=Tensor[(224, 1), int16] */;
    %141 = cast(meta[relay.Constant][3] /* ty=Tensor[(224, 6), float32] */, dtype="int16") /* ty=Tensor[(224, 6), int16] */;
    %142 = cast(%139, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
    %143 = cast(meta[relay.Constant][3] /* ty=Tensor[(224, 6), float32] */, dtype="bool") /* ty=Tensor[(224, 6), bool] */;
    %144 = %138.0;
    %145 = left_shift(%140, %141) /* ty=Tensor[(224, 6), int16] */;
    %146 = greater_equal(%142, %143) /* ty=Tensor[(224, 6), bool] */;
    (%144, %145, %146)
  };
  %147() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(224, 6), int16], Tensor[(224, 6), bool]) */
}

def @func_1665() -> Tensor[(224, 1), float32] {
  %151 = fn () -> Tensor[(224, 1), float32] {
    %148 = @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %149 = %148.0;
    %150 = cast(%149, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
    rsqrt(%150) /* ty=Tensor[(224, 1), float32] */
  };
  %151() /* ty=Tensor[(224, 1), float32] */
}

def @func_2305(%var_2275: Tensor[(224, 8), float64]) -> (Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 8), bool], Tensor[(224, 5), int16], Tensor[(224, 5), float32]) {
  %152 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %153 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %154 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %155 = %154.3;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %157 = acos(%156) /* ty=Tensor[(224, 1), float64] */;
  %158 = cast(%157, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %159 = cast(%var_2275, dtype="bool") /* ty=Tensor[(224, 8), bool] */;
  %160 = cast(%155, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %161 = cast(meta[relay.Constant][4] /* ty=Tensor[(224, 5), float32] */, dtype="float32") /* ty=Tensor[(224, 5), float32] */;
  %162 = power(%160, %161) /* ty=Tensor[(224, 5), float32] */;
  %163 = cast(%157, dtype="int16") /* ty=Tensor[(224, 1), int16] */;
  %164 = cast(%162, dtype="int16") /* ty=Tensor[(224, 5), int16] */;
  %165 = cast(meta[relay.Constant][4] /* ty=Tensor[(224, 5), float32] */, dtype="float32") /* ty=Tensor[(224, 5), float32] */;
  %166 = %152.0;
  %167 = %153.0;
  %168 = greater(%158, %159) /* ty=Tensor[(224, 8), bool] */;
  %169 = left_shift(%163, %164) /* ty=Tensor[(224, 5), int16] */;
  %170 = atanh(%165) /* ty=Tensor[(224, 5), float32] */;
  (%166, %167, %168, %169, %170)
}

def @func_702(%var_699: Tensor[(1, 13, 6), int32], %var_700: Tensor[(1, 13, 6), int32], %var_701: Tensor[(2, 13, 6), int32]) -> (Tensor[(2, 13, 6), int8], Tensor[(2, 13, 6), uint32]) {
  %182 = fn (%var_671: Tensor[(1, 13, 6), int32], %var_672: Tensor[(1, 13, 6), int32], %var_685: Tensor[(2, 13, 6), int32]) -> (Tensor[(2, 13, 6), int8], Tensor[(2, 13, 6), uint32]) {
    %171 = cast(%var_672, dtype="int32") /* ty=Tensor[(1, 13, 6), int32] */;
    %172 = shape_of(%var_671, dtype="int32") /* ty=Tensor[(3), int32] */;
    %173 = cast(%var_671, dtype="int32") /* ty=Tensor[(1, 13, 6), int32] */;
    %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %175 = right_shift(%173, %174) /* ty=Tensor[(?, 13, 6), int32] */;
    %176 = cast(%175, dtype="int8") /* ty=Tensor[(?, 13, 6), int8] */;
    %177 = cast(%var_685, dtype="int8") /* ty=Tensor[(2, 13, 6), int8] */;
    %178 = cast(%var_671, dtype="uint32") /* ty=Tensor[(1, 13, 6), uint32] */;
    %179 = cast(%var_685, dtype="uint32") /* ty=Tensor[(2, 13, 6), uint32] */;
    %180 = subtract(%176, %177) /* ty=Tensor[(2, 13, 6), int8] */;
    %181 = logical_xor(%178, %179) /* ty=Tensor[(2, 13, 6), uint32] */;
    (%180, %181)
  };
  %182(%var_699, %var_700, %var_701) /* ty=(Tensor[(2, 13, 6), int8], Tensor[(2, 13, 6), uint32]) */
}

def @func_747() -> Tensor[(224, ?), int8] {
  @func_745() /* ty=Tensor[(224, ?), int8] */
}

def @func_2531() -> Tensor[(224, 1), float32] {
  %183 = @func_2334() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %183.1
}

def @func_628() -> (Tensor[(224, 1), float32],) {
  @func_626() /* ty=(Tensor[(224, 1), float32],) */
}

def @func_1142(%var_1140: Tensor[(224, 8), float32]) -> Tensor[(224, 8), float32] {
  @func_1139(%var_1140) /* ty=Tensor[(224, 8), float32] */
}

def @func_1891(%var_1889: Tensor[(224, 2), float32], %var_1890: Tensor[(120), int8]) -> (Tensor[(224, 2), float64], Tensor[(224, 1), float32], Tensor[(120), int8], Tensor[(224, 6), bool], Tensor[(224, 6), int64], Tensor[(224, ?), int8]) {
  %209 = fn (%var_1807: Tensor[(224, 2), float32], %var_1842: Tensor[(120), int8]) -> (Tensor[(224, 2), float64], Tensor[(224, 1), float32], Tensor[(120), int8], Tensor[(224, 6), bool], Tensor[(224, 6), int64], Tensor[(224, ?), int8]) {
    %184 = @func_1477() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %185 = %184.0;
    %186 = cast(%185, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
    %187 = cast(%var_1807, dtype="float64") /* ty=Tensor[(224, 2), float64] */;
    %188 = cast(%var_1842, dtype="int8") /* ty=Tensor[(120), int8] */;
    %189 = cast(%var_1842, dtype="int8") /* ty=Tensor[(120), int8] */;
    %190 = reshape(%188, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
    %191 = reshape(%189, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
    %192 = @func_1298(%190, %191) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(224, 1), float32], Tensor[(72, 1), float64]) */;
    %193 = cast(%185, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
    %194 = cast(meta[relay.Constant][5] /* ty=Tensor[(224, 6), float32] */, dtype="float64") /* ty=Tensor[(224, 6), float64] */;
    %195 = mod(%193, %194) /* ty=Tensor[(224, 6), float64] */;
    %196 = cast(meta[relay.Constant][5] /* ty=Tensor[(224, 6), float32] */, dtype="bool") /* ty=Tensor[(224, 6), bool] */;
    %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(2), int32] */;
    %198 = cast(%195, dtype="bool") /* ty=Tensor[(224, 6), bool] */;
    %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %200 = @func_1690() /* ty=Tensor[(224, 1), float32] */;
    %201 = cast(meta[relay.Constant][5] /* ty=Tensor[(224, 6), float32] */, dtype="int64") /* ty=Tensor[(224, 6), int64] */;
    %202 = cast(%200, dtype="int64") /* ty=Tensor[(224, 1), int64] */;
    %203 = @func_1416() /* ty=(Tensor[(224, ?), int8], Tensor[(72, 1), float64], Tensor[(30, 4), float64]) */;
    %204 = power(%186, %187) /* ty=Tensor[(224, 2), float64] */;
    %205 = %192.1;
    %206 = not_equal(%198, %199) /* ty=Tensor[(224, 6), bool] */;
    %207 = bitwise_or(%201, %202) /* ty=Tensor[(224, 6), int64] */;
    %208 = %203.0;
    (%204, %205, %var_1842, %206, %207, %208)
  };
  %209(%var_1889, %var_1890) /* ty=(Tensor[(224, 2), float64], Tensor[(224, 1), float32], Tensor[(120), int8], Tensor[(224, 6), bool], Tensor[(224, 6), int64], Tensor[(224, ?), int8]) */
}

def @func_4223(%var_4222: Tensor[(224, 9), float32]) -> (Tensor[(224, 9), float32],) {
  %233 = fn (%var_4176: Tensor[(224, 9), float32]) -> (Tensor[(224, 9), float32],) {
    %210 = @func_2466() /* ty=Tensor[(224, 1), float32] */;
    %211 = cast(%210, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
    %212 = cast(%var_4176, dtype="bool") /* ty=Tensor[(224, 9), bool] */;
    %213 = logical_or(%211, %212) /* ty=Tensor[(224, 9), bool] */;
    %214 = cast(%213, dtype="float64") /* ty=Tensor[(224, 9), float64] */;
    %215 = erf(%214) /* ty=Tensor[(224, 9), float64] */;
    %216 = cast(%213, dtype="int32") /* ty=Tensor[(224, 9), int32] */;
    %217 = shape_of(%var_4176, dtype="int32") /* ty=Tensor[(2), int32] */;
    %218 = cast(%var_4176, dtype="int32") /* ty=Tensor[(224, 9), int32] */;
    %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %220 = multiply(%218, %219) /* ty=Tensor[(224, 9), int32] */;
    %221 = cast(%220, dtype="float32") /* ty=Tensor[(224, 9), float32] */;
    %222 = shape_of(%215, dtype="int32") /* ty=Tensor[(2), int32] */;
    %223 = cast(%215, dtype="float32") /* ty=Tensor[(224, 9), float32] */;
    %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %225 = mod(%223, %224) /* ty=Tensor[(224, 9), float32] */;
    %226 = cast(%213, dtype="float32") /* ty=Tensor[(224, 9), float32] */;
    %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(2), int32] */;
    %228 = cast(%225, dtype="float32") /* ty=Tensor[(224, 9), float32] */;
    %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %230 = power(%228, %229) /* ty=Tensor[(224, 9), float32] */;
    %231 = cast(%230, dtype="float32") /* ty=Tensor[(224, 9), float32] */;
    %232 = atanh(%231) /* ty=Tensor[(224, 9), float32] */;
    (%232,)
  };
  %233(%var_4222) /* ty=(Tensor[(224, 9), float32],) */
}

def @func_2558() -> Tensor[(224, 1), float32] {
  %235 = fn () -> Tensor[(224, 1), float32] {
    %234 = @func_2094() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 15), bool]) */;
    %234.0
  };
  %235() /* ty=Tensor[(224, 1), float32] */
}

def @func_2095() -> (Tensor[(224, 1), float32], Tensor[(224, 15), bool]) {
  %242 = fn () -> (Tensor[(224, 1), float32], Tensor[(224, 15), bool]) {
    %236 = @func_420() /* ty=Tensor[(224, 1), float32] */;
    %237 = cast(%236, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
    %238 = cast(%236, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
    %239 = cast(meta[relay.Constant][6] /* ty=Tensor[(224, 15), float32] */, dtype="bool") /* ty=Tensor[(224, 15), bool] */;
    %240 = asin(%237) /* ty=Tensor[(224, 1), float32] */;
    %241 = equal(%238, %239) /* ty=Tensor[(224, 15), bool] */;
    (%240, %241)
  };
  %242() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 15), bool]) */
}

def @func_4246() -> (Tensor[(224, 1), float32],) {
  %243 = @func_2466() /* ty=Tensor[(224, 1), float32] */;
  (%243,)
}

def @func_4092() -> (Tensor[(5, 13, 6), uint8], Tensor[(5, 13, 6), float32]) {
  @func_4090() /* ty=(Tensor[(5, 13, 6), uint8], Tensor[(5, 13, 6), float32]) */
}

def @func_4248() -> (Tensor[(224, 1), float32],) {
  @func_4246() /* ty=(Tensor[(224, 1), float32],) */
}

def @func_4444() -> (Tensor[(224, 1), float32], Tensor[(30, 4), float64]) {
  %248 = fn () -> (Tensor[(224, 1), float32], Tensor[(30, 4), float64]) {
    %244 = @func_2416() /* ty=(Tensor[(224, 1), float32],) */;
    %245 = @func_1416() /* ty=(Tensor[(224, ?), int8], Tensor[(72, 1), float64], Tensor[(30, 4), float64]) */;
    %246 = %244.0;
    %247 = %245.2;
    (%246, %247)
  };
  %248() /* ty=(Tensor[(224, 1), float32], Tensor[(30, 4), float64]) */
}

def @func_227(%var_224: Tensor[(1, 4, 1), float32], %var_225: Tensor[(14, 4, 4), float32], %var_226: Tensor[(572), float32]) -> (Tensor[(14, 4, 4), bool], Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(13, 4, 11), float32], Tensor[(14, 4, 4), float32]) {
  @func_222(%var_224, %var_225, %var_226) /* ty=(Tensor[(14, 4, 4), bool], Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(13, 4, 11), float32], Tensor[(14, 4, 4), float32]) */
}

def @func_3212() -> Tensor[(224, 1), float32] {
  %250 = fn () -> Tensor[(224, 1), float32] {
    %249 = @func_2334() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %249.0
  };
  %250() /* ty=Tensor[(224, 1), float32] */
}

def @func_978() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  %255 = fn () -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
    %251 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %252 = @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %253 = %251.1;
    %254 = %252.1;
    (%253, %254)
  };
  %255() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */
}

def @func_4500() -> Tensor[(224, 1), float32] {
  %256 = @func_626() /* ty=(Tensor[(224, 1), float32],) */;
  %256.0
}

def @func_1691() -> Tensor[(224, 1), float32] {
  %258 = fn () -> Tensor[(224, 1), float32] {
    %257 = @func_1477() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %257.0
  };
  %258() /* ty=Tensor[(224, 1), float32] */
}

def @func_4028(%var_4026: Tensor[(144), uint16]) -> (Tensor[(224, 15), int8], Tensor[(6, 3, 8), uint16], Tensor[(144), uint16]) {
  @func_4025(%var_4026) /* ty=(Tensor[(224, 15), int8], Tensor[(6, 3, 8), uint16], Tensor[(144), uint16]) */
}

def @func_2220() -> (Tensor[(3, 11, 8), float32], Tensor[(224, 3), float64], Tensor[(1, 672), float32], Tensor[(224, 15), float32]) {
  %271 = fn () -> (Tensor[(3, 11, 8), float32], Tensor[(224, 3), float64], Tensor[(1, 672), float32], Tensor[(224, 15), float32]) {
    %259 = @func_378() /* ty=(Tensor[(3, 11, 8), float32],) */;
    %260 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 672), float32] */, dtype="float32") /* ty=Tensor[(1, 672), float32] */;
    %261 = reshape(%260, newshape=[224, 3]) /* ty=Tensor[(224, 3), float32] */;
    %262 = @func_2119(%261) /* ty=(Tensor[(224, 3), float64],) */;
    %263 = @func_2172() /* ty=(Tensor[(224, 15), bool],) */;
    %264 = %263.0;
    %265 = cast(%264, dtype="float32") /* ty=Tensor[(224, 15), float32] */;
    %266 = atan(%265) /* ty=Tensor[(224, 15), float32] */;
    %267 = cast(%266, dtype="float32") /* ty=Tensor[(224, 15), float32] */;
    %268 = %259.0;
    %269 = %262.0;
    %270 = asinh(%267) /* ty=Tensor[(224, 15), float32] */;
    (%268, %269, meta[relay.Constant][7] /* ty=Tensor[(1, 672), float32] */, %270)
  };
  %271() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(224, 3), float64], Tensor[(1, 672), float32], Tensor[(224, 15), float32]) */
}

def @func_1139(%var_1133: Tensor[(224, 8), float32]) -> Tensor[(224, 8), float32] {
  %272 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %273 = %272.1;
  %274 = cast(%273, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %275 = cast(%var_1133, dtype="float32") /* ty=Tensor[(224, 8), float32] */;
  power(%274, %275) /* ty=Tensor[(224, 8), float32] */
}

def @func_3926() -> (Tensor[(224, 15), int8], Tensor[(3360), float32], Tensor[(224, 6), float64]) {
  %276 = cast(meta[relay.Constant][8] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %277 = reshape(%276, newshape=[224, 15]) /* ty=Tensor[(224, 15), float32] */;
  %278 = @func_3669() /* ty=(Tensor[(224, 6), float32], Tensor[(224, 1), float32]) */;
  %279 = %278.0;
  %280 = cast(%279, dtype="float32") /* ty=Tensor[(224, 6), float32] */;
  %281 = log10(%280) /* ty=Tensor[(224, 6), float32] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(224, 6), float32] */;
  %283 = sinh(%282) /* ty=Tensor[(224, 6), float32] */;
  %284 = cast(%283, dtype="bool") /* ty=Tensor[(224, 6), bool] */;
  %285 = shape_of(%279, dtype="int32") /* ty=Tensor[(2), int32] */;
  %286 = cast(%279, dtype="bool") /* ty=Tensor[(224, 6), bool] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %288 = equal(%286, %287) /* ty=Tensor[(224, 6), bool] */;
  %289 = cast(%288, dtype="float64") /* ty=Tensor[(224, 6), float64] */;
  %290 = @func_2857(%277) /* ty=Tensor[(224, 15), int8] */;
  %291 = cosh(%289) /* ty=Tensor[(224, 6), float64] */;
  (%290, meta[relay.Constant][8] /* ty=Tensor[(3360), float32] */, %291)
}

def @func_2637(%var_2636: Tensor[(3, 11, 8), float32]) -> (Tensor[(3, 11, 8), uint32], Tensor[(13, 4, 11), float32], Tensor[(572), float32]) {
  %302 = fn (%var_2619: Tensor[(3, 11, 8), float32]) -> (Tensor[(3, 11, 8), uint32], Tensor[(13, 4, 11), float32], Tensor[(572), float32]) {
    %292 = @func_378() /* ty=(Tensor[(3, 11, 8), float32],) */;
    %293 = %292.0;
    %294 = cast(%var_2619, dtype="uint32") /* ty=Tensor[(3, 11, 8), uint32] */;
    %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
    %296 = cast(%293, dtype="uint32") /* ty=Tensor[(3, 11, 8), uint32] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %298 = cast(meta[relay.Constant][9] /* ty=Tensor[(572), float32] */, dtype="float32") /* ty=Tensor[(572), float32] */;
    %299 = reshape(%298, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
    %300 = logical_xor(%296, %297) /* ty=Tensor[(3, 11, 8), uint32] */;
    %301 = @func_100(%299) /* ty=Tensor[(13, 4, 11), float32] */;
    (%300, %301, meta[relay.Constant][9] /* ty=Tensor[(572), float32] */)
  };
  %302(%var_2636) /* ty=(Tensor[(3, 11, 8), uint32], Tensor[(13, 4, 11), float32], Tensor[(572), float32]) */
}

def @func_2336() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  @func_2334() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */
}

def @func_4502() -> Tensor[(224, 1), float32] {
  @func_4500() /* ty=Tensor[(224, 1), float32] */
}

def @func_1234(%var_1232: Tensor[(8, 1, 9), float64]) -> (Tensor[(8, 1, 9), float64], Tensor[(8, 1, 9), float64], Tensor[(224, 1), float32]) {
  @func_1231(%var_1232) /* ty=(Tensor[(8, 1, 9), float64], Tensor[(8, 1, 9), float64], Tensor[(224, 1), float32]) */
}

def @func_2174() -> (Tensor[(224, 15), bool],) {
  @func_2172() /* ty=(Tensor[(224, 15), bool],) */
}

def @func_1479() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  @func_1477() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */
}

def @func_3343() -> (Tensor[(572), float32], Tensor[(224, 5), int16], Tensor[(1792), float64], Tensor[(224, 1), float32], Tensor[(224, 120), int32]) {
  @func_3341() /* ty=(Tensor[(572), float32], Tensor[(224, 5), int16], Tensor[(1792), float64], Tensor[(224, 1), float32], Tensor[(224, 120), int32]) */
}

def @func_2172() -> (Tensor[(224, 15), bool],) {
  %303 = @func_2094() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 15), bool]) */;
  %304 = %303.1;
  %305 = cast(meta[relay.Constant][10] /* ty=Tensor[(224, 15), bool] */, dtype="bool") /* ty=Tensor[(224, 15), bool] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(2), int32] */;
  %307 = cast(%304, dtype="bool") /* ty=Tensor[(224, 15), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %309 = not_equal(%307, %308) /* ty=Tensor[(224, 15), bool] */;
  (%309,)
}

def @func_626() -> (Tensor[(224, 1), float32],) {
  %310 = @func_420() /* ty=Tensor[(224, 1), float32] */;
  (%310,)
}

def @func_102(%var_101: Tensor[(13, 4, 11), float32]) -> Tensor[(13, 4, 11), float32] {
  %312 = fn (%var_96: Tensor[(13, 4, 11), float32]) -> Tensor[(13, 4, 11), float32] {
    %311 = cast(%var_96, dtype="float32") /* ty=Tensor[(13, 4, 11), float32] */;
    atan(%311) /* ty=Tensor[(13, 4, 11), float32] */
  };
  %312(%var_101) /* ty=Tensor[(13, 4, 11), float32] */
}

def @func_3561(%var_3538: Tensor[(224, 5), float32]) -> (Tensor[(224, 5), uint16],) {
  %313 = @func_1690() /* ty=Tensor[(224, 1), float32] */;
  %314 = cast(%313, dtype="uint16") /* ty=Tensor[(224, 1), uint16] */;
  %315 = cast(%var_3538, dtype="uint16") /* ty=Tensor[(224, 5), uint16] */;
  %316 = logical_xor(%314, %315) /* ty=Tensor[(224, 5), uint16] */;
  (%316,)
}

def @func_2710(%var_2708: Tensor[(156), int32]) -> (Tensor[(224, 1), float32], Tensor[(2, 13, 6), int8], Tensor[(78), int32], Tensor[(156), int32], Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 5), uint32], Tensor[(56, 20), float32], Tensor[(1430), float64]) {
  @func_2707(%var_2708) /* ty=(Tensor[(224, 1), float32], Tensor[(2, 13, 6), int8], Tensor[(78), int32], Tensor[(156), int32], Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 5), uint32], Tensor[(56, 20), float32], Tensor[(1430), float64]) */
}

def @func_2707(%var_2667: Tensor[(156), int32]) -> (Tensor[(224, 1), float32], Tensor[(2, 13, 6), int8], Tensor[(78), int32], Tensor[(156), int32], Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 5), uint32], Tensor[(56, 20), float32], Tensor[(1430), float64]) {
  %317 = @func_2578() /* ty=(Tensor[(224, 1), float32],) */;
  %318 = cast(meta[relay.Constant][11] /* ty=Tensor[(78), int32] */, dtype="int32") /* ty=Tensor[(78), int32] */;
  %319 = cast(meta[relay.Constant][11] /* ty=Tensor[(78), int32] */, dtype="int32") /* ty=Tensor[(78), int32] */;
  %320 = cast(%var_2667, dtype="int32") /* ty=Tensor[(156), int32] */;
  %321 = reshape(%318, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int32] */;
  %322 = reshape(%319, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int32] */;
  %323 = reshape(%320, newshape=[2, 13, 6]) /* ty=Tensor[(2, 13, 6), int32] */;
  %324 = @func_698(%321, %322, %323) /* ty=(Tensor[(2, 13, 6), int8], Tensor[(2, 13, 6), uint32]) */;
  %325 = @func_2606() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(224, 6), int16], Tensor[(224, 6), bool]) */;
  %326 = @func_2094() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 15), bool]) */;
  %327 = cast(meta[relay.Constant][12] /* ty=Tensor[(56, 20), float32] */, dtype="float32") /* ty=Tensor[(56, 20), float32] */;
  %328 = cast(meta[relay.Constant][13] /* ty=Tensor[(1430), float64] */, dtype="float64") /* ty=Tensor[(1430), float64] */;
  %329 = reshape(%327, newshape=[224, 5]) /* ty=Tensor[(224, 5), float32] */;
  %330 = reshape(%328, newshape=[1430, 1]) /* ty=Tensor[(1430, 1), float64] */;
  %331 = @func_1604(%329, %330) /* ty=(Tensor[(224, ?), int8], Tensor[(4, 3, 10), float32], Tensor[(120), int8], Tensor[(224, 5), uint32], Tensor[(13, 4, 11), float32], Tensor[(1430, 1), float64], Tensor[(572), float32]) */;
  %332 = %317.0;
  %333 = %324.0;
  %334 = %325.0;
  %335 = %326.0;
  %336 = %331.3;
  (%332, %333, meta[relay.Constant][11] /* ty=Tensor[(78), int32] */, %var_2667, %334, %335, %336, meta[relay.Constant][12] /* ty=Tensor[(56, 20), float32] */, meta[relay.Constant][13] /* ty=Tensor[(1430), float64] */)
}

def @func_2334() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  %337 = @func_1664() /* ty=Tensor[(224, 1), float32] */;
  %338 = @func_1664() /* ty=Tensor[(224, 1), float32] */;
  (%337, %338)
}

def @func_3871(%var_3868: Tensor[(16, 3, 11), float64], %var_3869: Tensor[(572), float32], %var_3870: Tensor[(2464), float32]) -> (Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(224, 1), float32], Tensor[(224, 11), bool], Tensor[(2464), float32], Tensor[(16, 3, 11), float32]) {
  @func_3866(%var_3868, %var_3869, %var_3870) /* ty=(Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(224, 1), float32], Tensor[(224, 11), bool], Tensor[(2464), float32], Tensor[(16, 3, 11), float32]) */
}

def @func_4124(%var_4123: Tensor[(224, 12), int8]) -> Tensor[(224, 12), bool] {
  %342 = fn (%var_4112: Tensor[(224, 12), int8]) -> Tensor[(224, 12), bool] {
    %339 = @func_745() /* ty=Tensor[(224, ?), int8] */;
    %340 = cast(%339, dtype="bool") /* ty=Tensor[(224, ?), bool] */;
    %341 = cast(%var_4112, dtype="bool") /* ty=Tensor[(224, 12), bool] */;
    greater_equal(%340, %341) /* ty=Tensor[(224, 12), bool] */
  };
  %342(%var_4123) /* ty=Tensor[(224, 12), bool] */
}

def @func_3341() -> (Tensor[(572), float32], Tensor[(224, 5), int16], Tensor[(1792), float64], Tensor[(224, 1), float32], Tensor[(224, 120), int32]) {
  %343 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %344 = cast(meta[relay.Constant][14] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %345 = reshape(%344, newshape=[224, 8]) /* ty=Tensor[(224, 8), float64] */;
  %346 = @func_2305(%345) /* ty=(Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 8), bool], Tensor[(224, 5), int16], Tensor[(224, 5), float32]) */;
  %347 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %348 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %349 = reshape(%347, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
  %350 = reshape(%348, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
  %351 = @func_1298(%349, %350) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(224, 1), float32], Tensor[(72, 1), float64]) */;
  %352 = @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %353 = %352.0;
  %354 = cast(%353, dtype="int32") /* ty=Tensor[(224, 1), int32] */;
  %355 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), int8] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %356 = %343.1;
  %357 = %346.3;
  %358 = %351.1;
  %359 = right_shift(%354, %355) /* ty=Tensor[(224, 120), int32] */;
  (%356, %357, meta[relay.Constant][14] /* ty=Tensor[(1792), float64] */, %358, %359)
}

def @func_950(%var_948: Tensor[(224, 6), float64], %var_949: Tensor[(143, 4), float32]) -> (Tensor[(4), float32], Tensor[(224, ?), bool], Tensor[(224, ?), uint8], Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 6), float32], Tensor[(11, 10, 6), float64], Tensor[(660), float64], Tensor[(143, 4), float32], Tensor[(2, 13, 6), int8], Tensor[(78, 1), int32], Tensor[(156), int32], Tensor[(224, ?), uint16]) {
  @func_946(%var_948, %var_949) /* ty=(Tensor[(4), float32], Tensor[(224, ?), bool], Tensor[(224, ?), uint8], Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 6), float32], Tensor[(11, 10, 6), float64], Tensor[(660), float64], Tensor[(143, 4), float32], Tensor[(2, 13, 6), int8], Tensor[(78, 1), int32], Tensor[(156), int32], Tensor[(224, ?), uint16]) */
}

def @main(%var_4590: Tensor[(224, 11), float32], %var_4604: Tensor[(224, 11), float32]) -> (Tensor[(224, 11), bool], Tensor[(224, 11), float64]) {
  %360 = @func_1664() /* ty=Tensor[(224, 1), float32] */;
  %361 = cast(%var_4590, dtype="bool") /* ty=Tensor[(224, 11), bool] */;
  %362 = cast(%360, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %363 = cast(%360, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %364 = cast(%var_4590, dtype="float32") /* ty=Tensor[(224, 11), float32] */;
  %365 = subtract(%363, %364) /* ty=Tensor[(224, 11), float32] */;
  %366 = cast(%var_4604, dtype="float64") /* ty=Tensor[(224, 11), float64] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(2), int32] */;
  %368 = cast(%365, dtype="float64") /* ty=Tensor[(224, 11), float64] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %370 = greater_equal(%361, %362) /* ty=Tensor[(224, 11), bool] */;
  %371 = power(%368, %369) /* ty=Tensor[(224, 11), float64] */;
  (%370, %371)
}

def @func_222(%var_182: Tensor[(1, 4, 1), float32], %var_189: Tensor[(14, 4, 4), float32], %var_198: Tensor[(572), float32]) -> (Tensor[(14, 4, 4), bool], Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(13, 4, 11), float32], Tensor[(14, 4, 4), float32]) {
  %372 = cast(%var_182, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %373 = log2(%372) /* ty=Tensor[(1, 4, 1), float32] */;
  %374 = cast(%373, dtype="bool") /* ty=Tensor[(1, 4, 1), bool] */;
  %375 = cast(%var_189, dtype="bool") /* ty=Tensor[(14, 4, 4), bool] */;
  %376 = equal(%374, %375) /* ty=Tensor[(14, 4, 4), bool] */;
  %377 = cast(%376, dtype="bool") /* ty=Tensor[(14, 4, 4), bool] */;
  %378 = cast(%373, dtype="bool") /* ty=Tensor[(1, 4, 1), bool] */;
  %379 = cast(%var_198, dtype="float32") /* ty=Tensor[(572), float32] */;
  %380 = reshape(%379, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %381 = @func_100(%380) /* ty=Tensor[(13, 4, 11), float32] */;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(13, 4, 11), float32] */;
  %383 = reshape(%382, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %384 = cast(%var_189, dtype="bool") /* ty=Tensor[(14, 4, 4), bool] */;
  %385 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%376, dtype="bool") /* ty=Tensor[(14, 4, 4), bool] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %388 = greater_equal(%386, %387) /* ty=Tensor[(14, 4, 4), bool] */;
  %389 = cast(%376, dtype="float32") /* ty=Tensor[(14, 4, 4), float32] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="float32") /* ty=Tensor[(14, 4, 4), float32] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %393 = less(%377, %378) /* ty=Tensor[(14, 4, 4), bool] */;
  %394 = @func_100(%383) /* ty=Tensor[(13, 4, 11), float32] */;
  %395 = add(%391, %392) /* ty=Tensor[(14, 4, 4), float32] */;
  (%393, %381, %var_198, %394, %395)
}

def @func_2385() -> (Tensor[(224, ?), int8], Tensor[(224, 1), float32], Tensor[(2, 224), float32], Tensor[(120), int8], Tensor[(224, 1), float32], Tensor[(11, 10, 6), float32], Tensor[(660), float64], Tensor[(572), float32], Tensor[(224, 1), float32]) {
  %413 = fn () -> (Tensor[(224, ?), int8], Tensor[(224, 1), float32], Tensor[(2, 224), float32], Tensor[(120), int8], Tensor[(224, 1), float32], Tensor[(11, 10, 6), float32], Tensor[(660), float64], Tensor[(572), float32], Tensor[(224, 1), float32]) {
    %396 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 224), float32] */, dtype="float32") /* ty=Tensor[(2, 224), float32] */;
    %397 = cast(meta[relay.Constant][17] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
    %398 = reshape(%396, newshape=[224, 2]) /* ty=Tensor[(224, 2), float32] */;
    %399 = reshape(%397, newshape=[120]) /* ty=Tensor[(120), int8] */;
    %400 = @func_1888(%398, %399) /* ty=(Tensor[(224, 2), float64], Tensor[(224, 1), float32], Tensor[(120), int8], Tensor[(224, 6), bool], Tensor[(224, 6), int64], Tensor[(224, ?), int8]) */;
    %401 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %402 = cast(meta[relay.Constant][18] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
    %403 = cast(meta[relay.Constant][19] /* ty=Tensor[(572), float32] */, dtype="float32") /* ty=Tensor[(572), float32] */;
    %404 = reshape(%402, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), float64] */;
    %405 = reshape(%403, newshape=[572]) /* ty=Tensor[(572), float32] */;
    %406 = @func_163(%404, %405) /* ty=(Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(11, 10, 6), float64], Tensor[(13, 4, 11), float32], Tensor[(11, 10, 6), float32]) */;
    %407 = @func_1020() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %408 = @func_745() /* ty=Tensor[(224, ?), int8] */;
    %409 = %400.1;
    %410 = %401.1;
    %411 = %406.4;
    %412 = %407.1;
    (%408, %409, meta[relay.Constant][16] /* ty=Tensor[(2, 224), float32] */, meta[relay.Constant][17] /* ty=Tensor[(120), int8] */, %410, %411, meta[relay.Constant][18] /* ty=Tensor[(660), float64] */, meta[relay.Constant][19] /* ty=Tensor[(572), float32] */, %412)
  };
  %413() /* ty=(Tensor[(224, ?), int8], Tensor[(224, 1), float32], Tensor[(2, 224), float32], Tensor[(120), int8], Tensor[(224, 1), float32], Tensor[(11, 10, 6), float32], Tensor[(660), float64], Tensor[(572), float32], Tensor[(224, 1), float32]) */
}

def @func_2026(%var_2024: Tensor[(224, 11), float32]) -> (Tensor[(224, 1), float32], Tensor[(572), float32], Tensor[(224, 11), bool], Tensor[(13, 4, 11), float32], Tensor[(224, 11), int16]) {
  @func_2023(%var_2024) /* ty=(Tensor[(224, 1), float32], Tensor[(572), float32], Tensor[(224, 11), bool], Tensor[(13, 4, 11), float32], Tensor[(224, 11), int16]) */
}

def @func_946(%var_899: Tensor[(224, 6), float64], %var_924: Tensor[(143, 4), float32]) -> (Tensor[(4), float32], Tensor[(224, ?), bool], Tensor[(224, ?), uint8], Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 6), float32], Tensor[(11, 10, 6), float64], Tensor[(660), float64], Tensor[(143, 4), float32], Tensor[(2, 13, 6), int8], Tensor[(78, 1), int32], Tensor[(156), int32], Tensor[(224, ?), uint16]) {
  %414 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
  %415 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %416 = %415.0;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %418 = log10(%417) /* ty=Tensor[(224, 1), float64] */;
  %419 = cast(%416, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(2), int32] */;
  %421 = cast(%418, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %423 = cast(%416, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %424 = sigmoid(%423) /* ty=Tensor[(224, 1), float32] */;
  %425 = cast(%424, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %426 = shape_of(%416, dtype="int32") /* ty=Tensor[(2), int32] */;
  %427 = cast(%416, dtype="bool") /* ty=Tensor[(224, 1), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %429 = logical_and(%427, %428) /* ty=Tensor[(224, ?), bool] */;
  %430 = cast(%418, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(2), int32] */;
  %432 = cast(%429, dtype="float32") /* ty=Tensor[(224, ?), float32] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %434 = floor_divide(%432, %433) /* ty=Tensor[(224, ?), float32] */;
  %435 = cast(%429, dtype="uint8") /* ty=Tensor[(224, ?), uint8] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(2), int32] */;
  %437 = cast(%434, dtype="uint8") /* ty=Tensor[(224, ?), uint8] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %439 = @func_378() /* ty=(Tensor[(3, 11, 8), float32],) */;
  %440 = cast(%416, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %441 = acosh(%440) /* ty=Tensor[(224, 1), float64] */;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %443 = cos(%442) /* ty=Tensor[(224, 1), float64] */;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %445 = cast(%var_899, dtype="float32") /* ty=Tensor[(224, 6), float32] */;
  %446 = cast(meta[relay.Constant][20] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %447 = cast(%var_924, dtype="float32") /* ty=Tensor[(143, 4), float32] */;
  %448 = reshape(%446, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), float64] */;
  %449 = reshape(%447, newshape=[572]) /* ty=Tensor[(572), float32] */;
  %450 = @func_163(%448, %449) /* ty=(Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(11, 10, 6), float64], Tensor[(13, 4, 11), float32], Tensor[(11, 10, 6), float32]) */;
  %451 = cast(meta[relay.Constant][21] /* ty=Tensor[(78, 1), int32] */, dtype="int32") /* ty=Tensor[(78, 1), int32] */;
  %452 = cast(meta[relay.Constant][21] /* ty=Tensor[(78, 1), int32] */, dtype="int32") /* ty=Tensor[(78, 1), int32] */;
  %453 = cast(meta[relay.Constant][22] /* ty=Tensor[(156), int32] */, dtype="int32") /* ty=Tensor[(156), int32] */;
  %454 = reshape(%451, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int32] */;
  %455 = reshape(%452, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int32] */;
  %456 = reshape(%453, newshape=[2, 13, 6]) /* ty=Tensor[(2, 13, 6), int32] */;
  %457 = @func_698(%454, %455, %456) /* ty=(Tensor[(2, 13, 6), int8], Tensor[(2, 13, 6), uint32]) */;
  %458 = cast(%441, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %459 = shape_of(%443, dtype="int32") /* ty=Tensor[(2), int32] */;
  %460 = cast(%443, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %462 = mod(%460, %461) /* ty=Tensor[(224, ?), float32] */;
  %463 = cast(%434, dtype="uint16") /* ty=Tensor[(224, ?), uint16] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(2), int32] */;
  %465 = cast(%462, dtype="uint16") /* ty=Tensor[(224, ?), uint16] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %467 = %414.2;
  %468 = equal(%421, %422) /* ty=Tensor[(224, ?), bool] */;
  %469 = left_shift(%437, %438) /* ty=Tensor[(224, ?), uint8] */;
  %470 = %439.0;
  %471 = @func_420() /* ty=Tensor[(224, 1), float32] */;
  %472 = subtract(%444, %445) /* ty=Tensor[(224, 6), float32] */;
  %473 = %450.2;
  %474 = %457.0;
  %475 = bitwise_xor(%465, %466) /* ty=Tensor[(224, ?), uint16] */;
  (%467, %468, %469, %470, %471, %472, %473, meta[relay.Constant][20] /* ty=Tensor[(660), float64] */, %var_924, %474, meta[relay.Constant][21] /* ty=Tensor[(78, 1), int32] */, meta[relay.Constant][22] /* ty=Tensor[(156), int32] */, %475)
}

def @func_3446(%var_3444: Tensor[(6, 3, 8), uint16], %var_3445: Tensor[(6, 3, 8), uint16]) -> Tensor[(6, 3, 8), uint16] {
  @func_3442(%var_3444, %var_3445) /* ty=Tensor[(6, 3, 8), uint16] */
}

def @func_2860(%var_2858: Tensor[(224, 15), float32]) -> Tensor[(224, 15), int8] {
  @func_2857(%var_2858) /* ty=Tensor[(224, 15), int8] */
}

def @func_486() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */
}

def @func_163(%var_132: Tensor[(11, 10, 6), float64], %var_137: Tensor[(572), float32]) -> (Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(11, 10, 6), float64], Tensor[(13, 4, 11), float32], Tensor[(11, 10, 6), float32]) {
  %476 = cast(%var_137, dtype="float32") /* ty=Tensor[(572), float32] */;
  %477 = reshape(%476, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %478 = cast(%var_132, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %479 = log2(%478) /* ty=Tensor[(11, 10, 6), float64] */;
  %480 = cast(%479, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %481 = cast(%var_137, dtype="float32") /* ty=Tensor[(572), float32] */;
  %482 = reshape(%481, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), float32] */;
  %483 = cast(%479, dtype="float32") /* ty=Tensor[(11, 10, 6), float32] */;
  %484 = shape_of(%var_132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%var_132, dtype="float32") /* ty=Tensor[(11, 10, 6), float32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %487 = @func_100(%477) /* ty=Tensor[(13, 4, 11), float32] */;
  %488 = sigmoid(%480) /* ty=Tensor[(11, 10, 6), float64] */;
  %489 = @func_100(%482) /* ty=Tensor[(13, 4, 11), float32] */;
  %490 = mod(%485, %486) /* ty=Tensor[(11, 10, 6), float32] */;
  (%487, %var_137, %488, %489, %490)
}

def @func_2772() -> (Tensor[(224, 1), float32], Tensor[(1120), float32], Tensor[(1430), float64], Tensor[(224, 5), bool]) {
  %506 = fn () -> (Tensor[(224, 1), float32], Tensor[(1120), float32], Tensor[(1430), float64], Tensor[(224, 5), bool]) {
    %491 = @func_484() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %492 = cast(meta[relay.Constant][23] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %493 = cast(meta[relay.Constant][24] /* ty=Tensor[(1430), float64] */, dtype="float64") /* ty=Tensor[(1430), float64] */;
    %494 = reshape(%492, newshape=[224, 5]) /* ty=Tensor[(224, 5), float32] */;
    %495 = reshape(%493, newshape=[1430, 1]) /* ty=Tensor[(1430, 1), float64] */;
    %496 = @func_1604(%494, %495) /* ty=(Tensor[(224, ?), int8], Tensor[(4, 3, 10), float32], Tensor[(120), int8], Tensor[(224, 5), uint32], Tensor[(13, 4, 11), float32], Tensor[(1430, 1), float64], Tensor[(572), float32]) */;
    %497 = %496.3;
    %498 = cast(%497, dtype="float64") /* ty=Tensor[(224, 5), float64] */;
    %499 = tan(%498) /* ty=Tensor[(224, 5), float64] */;
    %500 = cast(%497, dtype="bool") /* ty=Tensor[(224, 5), bool] */;
    %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(2), int32] */;
    %502 = cast(%499, dtype="bool") /* ty=Tensor[(224, 5), bool] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %504 = %491.0;
    %505 = not_equal(%502, %503) /* ty=Tensor[(224, 5), bool] */;
    (%504, meta[relay.Constant][23] /* ty=Tensor[(1120), float32] */, meta[relay.Constant][24] /* ty=Tensor[(1430), float64] */, %505)
  };
  %506() /* ty=(Tensor[(224, 1), float32], Tensor[(1120), float32], Tensor[(1430), float64], Tensor[(224, 5), bool]) */
}

def @func_2466() -> Tensor[(224, 1), float32] {
  %507 = @func_2416() /* ty=(Tensor[(224, 1), float32],) */;
  %507.0
}

def @func_745() -> Tensor[(224, ?), int8] {
  %508 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %509 = %508.0;
  %510 = @func_626() /* ty=(Tensor[(224, 1), float32],) */;
  %511 = %510.0;
  %512 = cast(%511, dtype="int8") /* ty=Tensor[(224, 1), int8] */;
  %513 = shape_of(%509, dtype="int32") /* ty=Tensor[(2), int32] */;
  %514 = cast(%509, dtype="int8") /* ty=Tensor[(224, 1), int8] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  bitwise_or(%514, %515) /* ty=Tensor[(224, ?), int8] */
}

def @func_2857(%var_2847: Tensor[(224, 15), float32]) -> Tensor[(224, 15), int8] {
  %516 = @func_2531() /* ty=Tensor[(224, 1), float32] */;
  %517 = cast(%516, dtype="int8") /* ty=Tensor[(224, 1), int8] */;
  %518 = cast(%var_2847, dtype="int8") /* ty=Tensor[(224, 15), int8] */;
  multiply(%517, %518) /* ty=Tensor[(224, 15), int8] */
}

def @func_1298(%var_1242: Tensor[(4, 3, 10), int8], %var_1243: Tensor[(4, 3, 10), int8]) -> (Tensor[(4, 3, 10), float32], Tensor[(224, 1), float32], Tensor[(72, 1), float64]) {
  %519 = cast(%var_1243, dtype="int8") /* ty=Tensor[(4, 3, 10), int8] */;
  %520 = shape_of(%var_1242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%var_1242, dtype="int8") /* ty=Tensor[(4, 3, 10), int8] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %523 = bitwise_and(%521, %522) /* ty=Tensor[(4, 3, 10), int8] */;
  %524 = cast(%523, dtype="float32") /* ty=Tensor[(4, 3, 10), float32] */;
  %525 = cast(meta[relay.Constant][25] /* ty=Tensor[(72, 1), float64] */, dtype="float64") /* ty=Tensor[(72, 1), float64] */;
  %526 = reshape(%525, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float64] */;
  %527 = @func_1231(%526) /* ty=(Tensor[(8, 1, 9), float64], Tensor[(8, 1, 9), float64], Tensor[(224, 1), float32]) */;
  %528 = cosh(%524) /* ty=Tensor[(4, 3, 10), float32] */;
  %529 = %527.2;
  (%528, %529, meta[relay.Constant][25] /* ty=Tensor[(72, 1), float64] */)
}

def @func_422() -> Tensor[(224, 1), float32] {
  @func_420() /* ty=Tensor[(224, 1), float32] */
}

def @func_1022() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  @func_1020() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */
}

def @func_1020() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  %530 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %531 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %532 = %530.0;
  %533 = %531.0;
  (%532, %533)
}

def @func_2578() -> (Tensor[(224, 1), float32],) {
  %534 = @func_1477() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %535 = %534.0;
  (%535,)
}

def @func_2119(%var_2106: Tensor[(224, 3), float32]) -> (Tensor[(224, 3), float64],) {
  %536 = @func_1477() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %537 = %536.3;
  %538 = cast(%537, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
  %539 = cast(%var_2106, dtype="float64") /* ty=Tensor[(224, 3), float64] */;
  %540 = floor_mod(%538, %539) /* ty=Tensor[(224, 3), float64] */;
  (%540,)
}

def @func_379() -> (Tensor[(3, 11, 8), float32],) {
  %543 = fn () -> (Tensor[(3, 11, 8), float32],) {
    %541 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
    %542 = acosh(%541) /* ty=Tensor[(3, 11, 8), float32] */;
    (%542,)
  };
  %543() /* ty=(Tensor[(3, 11, 8), float32],) */
}

def @func_167(%var_165: Tensor[(11, 10, 6), float64], %var_166: Tensor[(572), float32]) -> (Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(11, 10, 6), float64], Tensor[(13, 4, 11), float32], Tensor[(11, 10, 6), float32]) {
  @func_163(%var_165, %var_166) /* ty=(Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(11, 10, 6), float64], Tensor[(13, 4, 11), float32], Tensor[(11, 10, 6), float32]) */
}

def @func_2468() -> Tensor[(224, 1), float32] {
  @func_2466() /* ty=Tensor[(224, 1), float32] */
}

def @func_3054(%var_3052: Tensor[(224, 11), float32]) -> Tensor[(224, 11), bool] {
  @func_3051(%var_3052) /* ty=Tensor[(224, 11), bool] */
}

def @func_3728() -> (Tensor[(224, 1), float32],) {
  %544 = @func_2416() /* ty=(Tensor[(224, 1), float32],) */;
  %545 = %544.0;
  %546 = cast(%545, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %547 = sqrt(%546) /* ty=Tensor[(224, 1), float32] */;
  (%547,)
}

def @func_4283() -> (Tensor[(224, 1), float32],) {
  %549 = fn () -> (Tensor[(224, 1), float32],) {
    %548 = @func_3211() /* ty=Tensor[(224, 1), float32] */;
    (%548,)
  };
  %549() /* ty=(Tensor[(224, 1), float32],) */
}

def @func_1302(%var_1300: Tensor[(4, 3, 10), int8], %var_1301: Tensor[(4, 3, 10), int8]) -> (Tensor[(4, 3, 10), float32], Tensor[(224, 1), float32], Tensor[(72, 1), float64]) {
  @func_1298(%var_1300, %var_1301) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(224, 1), float32], Tensor[(72, 1), float64]) */
}

def @func_484() -> (Tensor[(224, 1), float32], Tensor[(224, 1), float32]) {
  %550 = @func_420() /* ty=Tensor[(224, 1), float32] */;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %552 = cast(%550, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
  %553 = cosh(%551) /* ty=Tensor[(224, 1), float32] */;
  %554 = atan(%552) /* ty=Tensor[(224, 1), float32] */;
  (%553, %554)
}

def @func_3730() -> (Tensor[(224, 1), float32],) {
  @func_3728() /* ty=(Tensor[(224, 1), float32],) */
}

def @func_2416() -> (Tensor[(224, 1), float32],) {
  %555 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %556 = %555.1;
  (%556,)
}

def @func_1100(%var_1098: Tensor[(224, 5), float32]) -> (Tensor[(11, 52), float32], Tensor[(4), float32], Tensor[(224, 5), bool]) {
  @func_1097(%var_1098) /* ty=(Tensor[(11, 52), float32], Tensor[(4), float32], Tensor[(224, 5), bool]) */
}

def @func_1416() -> (Tensor[(224, ?), int8], Tensor[(72, 1), float64], Tensor[(30, 4), float64]) {
  %557 = cast(meta[relay.Constant][27] /* ty=Tensor[(30, 4), int8] */, dtype="int8") /* ty=Tensor[(30, 4), int8] */;
  %558 = cast(meta[relay.Constant][27] /* ty=Tensor[(30, 4), int8] */, dtype="int8") /* ty=Tensor[(30, 4), int8] */;
  %559 = reshape(%557, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
  %560 = reshape(%558, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), int8] */;
  %561 = @func_1298(%559, %560) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(224, 1), float32], Tensor[(72, 1), float64]) */;
  %562 = cast(meta[relay.Constant][27] /* ty=Tensor[(30, 4), int8] */, dtype="float64") /* ty=Tensor[(30, 4), float64] */;
  %563 = @func_745() /* ty=Tensor[(224, ?), int8] */;
  %564 = %561.2;
  %565 = sinh(%562) /* ty=Tensor[(30, 4), float64] */;
  (%563, %564, %565)
}

def @func_4090() -> (Tensor[(5, 13, 6), uint8], Tensor[(5, 13, 6), float32]) {
  %566 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 13, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 13, 6), float32] */;
  %567 = sigmoid(%566) /* ty=Tensor[(5, 13, 6), float32] */;
  %568 = cast(%567, dtype="uint8") /* ty=Tensor[(5, 13, 6), uint8] */;
  %569 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(5, 13, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 13, 6), float32] */, dtype="uint8") /* ty=Tensor[(5, 13, 6), uint8] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %572 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 13, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 13, 6), float32] */;
  %573 = bitwise_and(%570, %571) /* ty=Tensor[(5, 13, 6), uint8] */;
  %574 = exp(%572) /* ty=Tensor[(5, 13, 6), float32] */;
  (%573, %574)
}

def @func_1231(%var_1198: Tensor[(8, 1, 9), float64]) -> (Tensor[(8, 1, 9), float64], Tensor[(8, 1, 9), float64], Tensor[(224, 1), float32]) {
  %575 = cast(%var_1198, dtype="float64") /* ty=Tensor[(8, 1, 9), float64] */;
  %576 = asin(%575) /* ty=Tensor[(8, 1, 9), float64] */;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(8, 1, 9), float64] */;
  %578 = cast(%576, dtype="float64") /* ty=Tensor[(8, 1, 9), float64] */;
  %579 = @func_977() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
  %580 = exp(%577) /* ty=Tensor[(8, 1, 9), float64] */;
  %581 = acosh(%578) /* ty=Tensor[(8, 1, 9), float64] */;
  %582 = %579.1;
  (%580, %581, %582)
}

def @func_2308(%var_2306: Tensor[(224, 8), float64]) -> (Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 8), bool], Tensor[(224, 5), int16], Tensor[(224, 5), float32]) {
  @func_2305(%var_2306) /* ty=(Tensor[(3, 11, 8), float32], Tensor[(224, 1), float32], Tensor[(224, 8), bool], Tensor[(224, 5), int16], Tensor[(224, 5), float32]) */
}

def @func_3564(%var_3562: Tensor[(224, 5), float32]) -> (Tensor[(224, 5), uint16],) {
  @func_3561(%var_3562) /* ty=(Tensor[(224, 5), uint16],) */
}

def @func_388() -> (Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) {
  %593 = fn () -> (Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) {
    %583 = @func_378() /* ty=(Tensor[(3, 11, 8), float32],) */;
    %584 = cast(meta[relay.Constant][29] /* ty=Tensor[(4), float32] */, dtype="float32") /* ty=Tensor[(4), float32] */;
    %585 = cast(meta[relay.Constant][30] /* ty=Tensor[(224, 1), float32] */, dtype="float32") /* ty=Tensor[(224, 1), float32] */;
    %586 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 52), float32] */, dtype="float32") /* ty=Tensor[(11, 52), float32] */;
    %587 = reshape(%584, newshape=[1, 4, 1]) /* ty=Tensor[(1, 4, 1), float32] */;
    %588 = reshape(%585, newshape=[14, 4, 4]) /* ty=Tensor[(14, 4, 4), float32] */;
    %589 = reshape(%586, newshape=[572]) /* ty=Tensor[(572), float32] */;
    %590 = @func_222(%587, %588, %589) /* ty=(Tensor[(14, 4, 4), bool], Tensor[(13, 4, 11), float32], Tensor[(572), float32], Tensor[(13, 4, 11), float32], Tensor[(14, 4, 4), float32]) */;
    %591 = %583.0;
    %592 = %590.2;
    (%591, %592, meta[relay.Constant][29] /* ty=Tensor[(4), float32] */, meta[relay.Constant][30] /* ty=Tensor[(224, 1), float32] */, meta[relay.Constant][31] /* ty=Tensor[(11, 52), float32] */)
  };
  %593() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */
}

def @func_2983(%var_2980: Tensor[(14, 3, 16), float32], %var_2981: Tensor[(448), float32], %var_2982: Tensor[(120), int8]) -> (Tensor[(14, 3, 16), float32], Tensor[(224, 15), int8], Tensor[(3360, 1), float32], Tensor[(224, 1), float32], Tensor[(448), float32], Tensor[(120), int8]) {
  %605 = fn (%var_2956: Tensor[(14, 3, 16), float32], %var_2976: Tensor[(448), float32], %var_2977: Tensor[(120), int8]) -> (Tensor[(14, 3, 16), float32], Tensor[(224, 15), int8], Tensor[(3360, 1), float32], Tensor[(224, 1), float32], Tensor[(448), float32], Tensor[(120), int8]) {
    %594 = cast(%var_2956, dtype="float32") /* ty=Tensor[(14, 3, 16), float32] */;
    %595 = cast(meta[relay.Constant][32] /* ty=Tensor[(3360, 1), float32] */, dtype="float32") /* ty=Tensor[(3360, 1), float32] */;
    %596 = reshape(%595, newshape=[224, 15]) /* ty=Tensor[(224, 15), float32] */;
    %597 = cast(%var_2976, dtype="float32") /* ty=Tensor[(448), float32] */;
    %598 = cast(%var_2977, dtype="int8") /* ty=Tensor[(120), int8] */;
    %599 = reshape(%597, newshape=[224, 2]) /* ty=Tensor[(224, 2), float32] */;
    %600 = reshape(%598, newshape=[120]) /* ty=Tensor[(120), int8] */;
    %601 = @func_1888(%599, %600) /* ty=(Tensor[(224, 2), float64], Tensor[(224, 1), float32], Tensor[(120), int8], Tensor[(224, 6), bool], Tensor[(224, 6), int64], Tensor[(224, ?), int8]) */;
    %602 = acosh(%594) /* ty=Tensor[(14, 3, 16), float32] */;
    %603 = @func_2857(%596) /* ty=Tensor[(224, 15), int8] */;
    %604 = %601.1;
    (%602, %603, meta[relay.Constant][32] /* ty=Tensor[(3360, 1), float32] */, %604, %var_2976, %var_2977)
  };
  %605(%var_2980, %var_2981, %var_2982) /* ty=(Tensor[(14, 3, 16), float32], Tensor[(224, 15), int8], Tensor[(3360, 1), float32], Tensor[(224, 1), float32], Tensor[(448), float32], Tensor[(120), int8]) */
}

def @func_3631(%var_3628: Tensor[(224, 8), float32], %var_3629: Tensor[(224, 3), float32], %var_3630: Tensor[(224, 8), float64]) -> (Tensor[(224, 3), int8], Tensor[(224, 8), float64], Tensor[(224, 8), float64]) {
  %621 = fn (%var_3585: Tensor[(224, 8), float32], %var_3595: Tensor[(224, 3), float32], %var_3605: Tensor[(224, 8), float64]) -> (Tensor[(224, 3), int8], Tensor[(224, 8), float64], Tensor[(224, 8), float64]) {
    %606 = @func_387() /* ty=(Tensor[(3, 11, 8), float32], Tensor[(572), float32], Tensor[(4), float32], Tensor[(224, 1), float32], Tensor[(11, 52), float32]) */;
    %607 = %606.3;
    %608 = cast(%607, dtype="int8") /* ty=Tensor[(224, 1), int8] */;
    %609 = cast(%var_3595, dtype="int8") /* ty=Tensor[(224, 3), int8] */;
    %610 = cast(%607, dtype="float64") /* ty=Tensor[(224, 1), float64] */;
    %611 = cast(%var_3585, dtype="float64") /* ty=Tensor[(224, 8), float64] */;
    %612 = minimum(%610, %611) /* ty=Tensor[(224, 8), float64] */;
    %613 = cast(%var_3605, dtype="float64") /* ty=Tensor[(224, 8), float64] */;
    %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(2), int32] */;
    %615 = cast(%612, dtype="float64") /* ty=Tensor[(224, 8), float64] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %617 = cast(%612, dtype="float64") /* ty=Tensor[(224, 8), float64] */;
    %618 = bitwise_xor(%608, %609) /* ty=Tensor[(224, 3), int8] */;
    %619 = divide(%615, %616) /* ty=Tensor[(224, 8), float64] */;
    %620 = asin(%617) /* ty=Tensor[(224, 8), float64] */;
    (%618, %619, %620)
  };
  %621(%var_3628, %var_3629, %var_3630) /* ty=(Tensor[(224, 3), int8], Tensor[(224, 8), float64], Tensor[(224, 8), float64]) */
}

def @func_4456(%var_4455: Tensor[(2, 12, 10), float64]) -> Tensor[(2, 12, 10), float64] {
  %626 = fn (%var_4449: Tensor[(2, 12, 10), float64]) -> Tensor[(2, 12, 10), float64] {
    %622 = cast(%var_4449, dtype="float64") /* ty=Tensor[(2, 12, 10), float64] */;
    %623 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(2, 12, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %624 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 10), float64] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%624, %625) /* ty=Tensor[(2, 12, 10), float64] */
  };
  %626(%var_4455) /* ty=Tensor[(2, 12, 10), float64] */
}

def @func_2643() -> (Tensor[(224, 1), float32],) {
  %629 = fn () -> (Tensor[(224, 1), float32],) {
    %627 = @func_582() /* ty=(Tensor[(224, 1), float32], Tensor[(224, 1), float32]) */;
    %628 = %627.0;
    (%628,)
  };
  %629() /* ty=(Tensor[(224, 1), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.
The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
