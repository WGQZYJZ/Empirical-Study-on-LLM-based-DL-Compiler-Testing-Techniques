==========mod==========
#[version = "0.0.5"]
def @func_4211(%var_4197: Tensor[(3, 8, 11), float32]) -> (Tensor[(3, 8, 11), float32], Tensor[(3, 8, 16), uint16]) {
  %0 = @func_2471() /* ty=(Tensor[(3, 8, ?), float32],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %3 = cast(%var_4197, dtype="float32") /* ty=Tensor[(3, 8, 11), float32] */;
  %4 = power(%2, %3) /* ty=Tensor[(3, 8, 11), float32] */;
  %5 = @func_3846() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%4, %5)
}

def @func_3660() -> (Tensor[(3, 8, 16), int32],) {
  %6 = @func_2828() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), uint16]) */;
  %7 = %6.2;
  %8 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %9 = %8.2;
  %10 = cast(%9, dtype="int32") /* ty=Tensor[(3, 8, 16), int32] */;
  %11 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%7, dtype="int32") /* ty=Tensor[(3, 8, 16), int32] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %14 = add(%12, %13) /* ty=Tensor[(3, 8, 16), int32] */;
  (%14,)
}

def @func_6002() -> (Tensor[(3, 8, 9), uint32],) {
  %15 = @func_3005() /* ty=(Tensor[(3, 8, 9), uint32],) */;
  %16 = %15.0;
  (%16,)
}

def @func_6892() -> (Tensor[(3, 8, 9), uint32], Tensor[(3, 8, ?), uint16]) {
  %17 = @func_6002() /* ty=(Tensor[(3, 8, 9), uint32],) */;
  %18 = @func_3636() /* ty=(Tensor[(3, 8, 9), uint32], Tensor[(3, 8, ?), uint16]) */;
  %19 = %17.0;
  %20 = %18.1;
  (%19, %20)
}

def @func_766(%var_743: Tensor[(3, 10, 1), float32]) -> (Tensor[(3, 10, 12), float32], Tensor[(3, 8, 16), float32]) {
  %21 = cast(%var_743, dtype="float32") /* ty=Tensor[(3, 10, 1), float32] */;
  %22 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 10, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 10, 12), float32] */;
  %23 = multiply(%21, %22) /* ty=Tensor[(3, 10, 12), float32] */;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(3, 10, 12), float32] */;
  %25 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %26 = log(%24) /* ty=Tensor[(3, 10, 12), float32] */;
  %27 = %25.1;
  (%26, %27)
}

def @func_2397() -> (Tensor[(3, 8, ?), bool],) {
  %28 = @func_2123() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %29 = %28.0;
  (%29,)
}

def @func_2873() -> Tensor[(3, 8, 16), float64] {
  %30 = @func_1940() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %30.1
}

def @func_3519() -> Tensor[(3, 8, 16), uint16] {
  @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_1058(%var_1025: Tensor[(12, 14, 8), uint16], %var_1026: Tensor[(12, 14, 8), uint16]) -> (Tensor[(12, 14, 8), uint16], Tensor[(3, 8, 16), float32], Tensor[(12, 14, 8), float64], Tensor[(3, 8, ?), bool]) {
  %31 = cast(%var_1026, dtype="uint16") /* ty=Tensor[(12, 14, 8), uint16] */;
  %32 = shape_of(%var_1025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_1025, dtype="uint16") /* ty=Tensor[(12, 14, 8), uint16] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %35 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %36 = cast(%var_1026, dtype="float64") /* ty=Tensor[(12, 14, 8), float64] */;
  %37 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
  %38 = multiply(%33, %34) /* ty=Tensor[(12, 14, 8), uint16] */;
  %39 = %35.1;
  %40 = asin(%36) /* ty=Tensor[(12, 14, 8), float64] */;
  %41 = %37.0;
  (%38, %39, %40, %41)
}

def @func_4234() -> Tensor[(3, 8, ?), bool] {
  %42 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %42.0
}

def @func_4894(%var_4888: uint8, %var_4889: Tensor[(7, 7, 15), uint8]) -> Tensor[(7, 7, 15), uint8] {
  %43 = cast(%var_4888, dtype="uint8") /* ty=uint8 */;
  %44 = cast(%var_4889, dtype="uint8") /* ty=Tensor[(7, 7, 15), uint8] */;
  right_shift(%43, %44) /* ty=Tensor[(7, 7, 15), uint8] */
}

def @func_6135() -> (Tensor[(3, 8, ?), int16], Tensor[(3, 8, ?), bool]) {
  %45 = @func_2828() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), uint16]) */;
  %46 = %45.1;
  %47 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 8, 1), bool] */, dtype="int16") /* ty=Tensor[(3, 8, 1), int16] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="int16") /* ty=Tensor[(3, 8, ?), int16] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %51 = @func_5815() /* ty=(Tensor[(3, 8, ?), int32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %52 = left_shift(%49, %50) /* ty=Tensor[(3, 8, ?), int16] */;
  %53 = %51.1;
  (%52, %53)
}

def @func_3953(%var_3889: Tensor[(8, 5, 16), float32]) -> (Tensor[(8, 5, 16), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, ?), float32]) {
  %54 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %55 = cast(%var_3889, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
  %56 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %57 = reshape(%56, newshape=[2, 8, 8]) /* ty=Tensor[(2, 8, 8), float32] */;
  %58 = @func_1264(%57) /* ty=(Tensor[(2, 8, 8), float32],) */;
  %59 = @func_1100() /* ty=Tensor[(3, 8, ?), float32] */;
  %60 = cast(%59, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %61 = log2(%60) /* ty=Tensor[(3, 8, ?), float64] */;
  %62 = cast(%59, dtype="int16") /* ty=Tensor[(3, 8, ?), int16] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%61, dtype="int16") /* ty=Tensor[(3, 8, ?), int16] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %66 = logical_xor(%64, %65) /* ty=Tensor[(3, 8, ?), int16] */;
  %67 = cast(%59, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %71 = floor_divide(%54, %55) /* ty=Tensor[(8, 5, 16), float32] */;
  %72 = %58.0;
  %73 = mod(%69, %70) /* ty=Tensor[(3, 8, ?), float32] */;
  (%71, %72, %73)
}

def @func_4363(%var_4292: Tensor[(128, 1), float32], %var_4315: Tensor[(48, 2), bool], %var_4325: Tensor[(128, 2), float32]) -> (Tensor[(30), float32], Tensor[(3, 8, 4), float32], Tensor[(48, 2), bool], Tensor[(128, 2), bool], Tensor[(3, 8, 16), uint32], Tensor[(3, 8, 6), bool], Tensor[(1, 224), int32], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float32]) {
  %74 = cast(%var_4315, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
  %75 = reshape(%74, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), bool] */;
  %76 = @func_2794(%75) /* ty=(Tensor[(3, 8, 4), float32], Tensor[(3, 8, 4), bool]) */;
  %77 = cast(%var_4292, dtype="bool") /* ty=Tensor[(128, 1), bool] */;
  %78 = cast(%var_4325, dtype="bool") /* ty=Tensor[(128, 2), bool] */;
  %79 = cast(%var_4292, dtype="float32") /* ty=Tensor[(128, 1), float32] */;
  %80 = cast(meta[relay.Constant][3] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %81 = reshape(%79, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %82 = reshape(%80, newshape=[30]) /* ty=Tensor[(30), float32] */;
  %83 = @func_1372(%81, %82) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(2, 8, 8), float32], Tensor[(128), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, 16), float32], Tensor[(30), float32]) */;
  %84 = %83.5;
  %85 = @func_3846() /* ty=Tensor[(3, 8, 16), uint16] */;
  %86 = cast(%85, dtype="uint32") /* ty=Tensor[(3, 8, 16), uint32] */;
  %87 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%84, dtype="uint32") /* ty=Tensor[(3, 8, 16), uint32] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %90 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 224), int32] */, dtype="int32") /* ty=Tensor[(1, 224), int32] */;
  %91 = reshape(%90, newshape=[224]) /* ty=Tensor[(224), int32] */;
  %92 = @func_2711(%91) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(13, 9, 14), float64], Tensor[(4, 8, 7), int32], Tensor[(224), int32], Tensor[(1638), float64], Tensor[(3, 8, 6), bool], Tensor[(144), bool]) */;
  %93 = @func_2356() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
  %94 = %76.0;
  %95 = less(%77, %78) /* ty=Tensor[(128, 2), bool] */;
  %96 = multiply(%88, %89) /* ty=Tensor[(3, 8, 16), uint32] */;
  %97 = %92.6;
  %98 = @func_3733() /* ty=Tensor[(3, 8, 16), uint16] */;
  %99 = %93.1;
  (meta[relay.Constant][3] /* ty=Tensor[(30), float32] */, %94, %var_4315, %95, %96, %97, meta[relay.Constant][4] /* ty=Tensor[(1, 224), int32] */, %98, %99)
}

def @func_820() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) {
  %100 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %101 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %102 = %100.4;
  %103 = %101.0;
  (%102, %103)
}

def @func_5247() -> Tensor[(3, 8, ?), float32] {
  %104 = @func_2123() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %105 = %104.0;
  %106 = cast(%105, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  rsqrt(%106) /* ty=Tensor[(3, 8, ?), float32] */
}

def @func_515() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) {
  %107 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %108 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %109 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %110 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %111 = %107.1;
  %112 = %108.1;
  %113 = %109.1;
  %114 = %110.1;
  %115 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  (%111, %112, %113, %114, %115)
}

def @func_1780(%var_1777: Tensor[(13, 9, 14), float64]) -> Tensor[(13, 9, 14), float64] {
  %116 = cast(%var_1777, dtype="float64") /* ty=Tensor[(13, 9, 14), float64] */;
  erf(%116) /* ty=Tensor[(13, 9, 14), float64] */
}

def @func_2031() -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) {
  %117 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %118 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %119 = %117.1;
  %120 = %118.1;
  (%119, %120)
}

def @func_2794(%var_2758: Tensor[(3, 8, 4), bool]) -> (Tensor[(3, 8, 4), float32], Tensor[(3, 8, 4), bool]) {
  %121 = @func_2397() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %122 = %121.0;
  %123 = cast(%122, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %124 = cast(%var_2758, dtype="float32") /* ty=Tensor[(3, 8, 4), float32] */;
  %125 = cast(%var_2758, dtype="bool") /* ty=Tensor[(3, 8, 4), bool] */;
  %126 = cast(%122, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %127 = mod(%123, %124) /* ty=Tensor[(3, 8, 4), float32] */;
  %128 = greater(%125, %126) /* ty=Tensor[(3, 8, 4), bool] */;
  (%127, %128)
}

def @func_4629(%var_4614: Tensor[(3, 8, 5), bool], %var_4624: Tensor[(462), float32]) -> (Tensor[(3, 8, 5), bool], Tensor[(3, 11, 14), float32], float32, Tensor[(462), float32], Tensor[(3, 8, 16), uint16]) {
  %129 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %130 = %129.0;
  %131 = cast(%130, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %132 = cast(%var_4614, dtype="bool") /* ty=Tensor[(3, 8, 5), bool] */;
  %133 = cast(-0.238527f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %134 = cast(%var_4624, dtype="float32") /* ty=Tensor[(462), float32] */;
  %135 = reshape(%133, newshape=[]) /* ty=float32 */;
  %136 = reshape(%134, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
  %137 = @func_3799(%135, %136) /* ty=(Tensor[(3, 11, 14), float32],) */;
  %138 = less_equal(%131, %132) /* ty=Tensor[(3, 8, 5), bool] */;
  %139 = %137.0;
  %140 = @func_3733() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%138, %139, -0.238527f /* ty=float32 */, %var_4624, %140)
}

def @func_2622() -> (Tensor[(3, 8, ?), bool],) {
  %141 = @func_2574() /* ty=Tensor[(3, 8, ?), bool] */;
  (%141,)
}

def @func_7346(%var_7329: Tensor[(2400), uint64]) -> (Tensor[(3, 8, 8), int8], Tensor[(2400), uint64], Tensor[(10, 15, 16), float64]) {
  %142 = @func_6445() /* ty=Tensor[(3, 8, ?), float64] */;
  %143 = cast(%142, dtype="int8") /* ty=Tensor[(3, 8, ?), int8] */;
  %144 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 8, 8), float64] */, dtype="int8") /* ty=Tensor[(3, 8, 8), int8] */;
  %145 = cast(%var_7329, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %146 = cast(%var_7329, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %147 = reshape(%145, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), uint64] */;
  %148 = reshape(%146, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), uint64] */;
  %149 = @func_3342(%147, %148) /* ty=(Tensor[(10, 15, 16), uint64], Tensor[(3, 8, 16), float32]) */;
  %150 = %149.0;
  %151 = cast(%150, dtype="float64") /* ty=Tensor[(10, 15, 16), float64] */;
  %152 = right_shift(%143, %144) /* ty=Tensor[(3, 8, 8), int8] */;
  %153 = sin(%151) /* ty=Tensor[(10, 15, 16), float64] */;
  (%152, %var_7329, %153)
}

def @func_2828() -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), uint16]) {
  %154 = @func_2356() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
  %155 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
  %156 = @func_1940() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %157 = %154.1;
  %158 = %155.0;
  %159 = @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */;
  %160 = %156.0;
  (%157, %158, %159, %160)
}

def @func_1940() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) {
  %161 = @func_1823() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %162 = @func_1127() /* ty=Tensor[(3, 8, 16), uint16] */;
  %163 = cast(%162, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
  %164 = %161.0;
  %165 = acosh(%163) /* ty=Tensor[(3, 8, 16), float64] */;
  (%164, %165)
}

def @func_5143() -> Tensor[(3, 8, 16), uint16] {
  %166 = @func_3977() /* ty=(Tensor[(3, 8, 16), uint16],) */;
  %166.0
}

def @func_2356() -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) {
  %167 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %168 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %169 = %167.1;
  %170 = %168.2;
  (%169, %170)
}

def @func_2600(%var_2591: Tensor[(3, 8, 5), float32]) -> Tensor[(3, 8, 5), int64] {
  %171 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
  %172 = %171.1;
  %173 = cast(%172, dtype="int64") /* ty=Tensor[(3, 8, ?), int64] */;
  %174 = cast(%var_2591, dtype="int64") /* ty=Tensor[(3, 8, 5), int64] */;
  bitwise_xor(%173, %174) /* ty=Tensor[(3, 8, 5), int64] */
}

def @func_3699(%var_3695: Tensor[(6, 15, 16), float32]) -> (Tensor[(6, 15, 16), float32],) {
  %175 = cast(%var_3695, dtype="float32") /* ty=Tensor[(6, 15, 16), float32] */;
  %176 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(6, 15, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 15, 16), float32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %179 = divide(%177, %178) /* ty=Tensor[(6, 15, 16), float32] */;
  (%179,)
}

def @func_2919(%var_2889: Tensor[(15, 1, 13), float64], %var_2890: Tensor[(15, 3, 13), float64]) -> (Tensor[(15, 3, 13), float64], Tensor[(3, 8, 16), float64], Tensor[(3, 8, ?), bool], Tensor[(144), bool]) {
  %180 = cast(%var_2889, dtype="float64") /* ty=Tensor[(15, 1, 13), float64] */;
  %181 = cast(%var_2890, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %182 = floor_mod(%180, %181) /* ty=Tensor[(15, 3, 13), float64] */;
  %183 = cast(%var_2889, dtype="float64") /* ty=Tensor[(15, 1, 13), float64] */;
  %184 = cast(%182, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %185 = cast(meta[relay.Constant][7] /* ty=Tensor[(144), bool] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %186 = reshape(%185, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), bool] */;
  %187 = @func_1000(%186) /* ty=(Tensor[(3, 8, 6), uint64], Tensor[(3, 8, ?), bool]) */;
  %188 = add(%183, %184) /* ty=Tensor[(15, 3, 13), float64] */;
  %189 = @func_2873() /* ty=Tensor[(3, 8, 16), float64] */;
  %190 = %187.1;
  (%188, %189, %190, meta[relay.Constant][7] /* ty=Tensor[(144), bool] */)
}

def @func_5659(%var_5656: Tensor[(144), bool], %var_5657: Tensor[(96), bool]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 6), uint64], Tensor[(144), bool], Tensor[(96), bool]) {
  %191 = @func_2622() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %192 = cast(%var_5656, dtype="bool") /* ty=Tensor[(144), bool] */;
  %193 = cast(%var_5657, dtype="bool") /* ty=Tensor[(96), bool] */;
  %194 = reshape(%192, newshape=[144]) /* ty=Tensor[(144), bool] */;
  %195 = reshape(%193, newshape=[4, 24]) /* ty=Tensor[(4, 24), bool] */;
  %196 = @func_5091(%194, %195) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 6), uint64], Tensor[(144), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 4), float32], Tensor[(128), float32], Tensor[(4, 24), bool], Tensor[(256), float32], Tensor[(3, 8, 16), bool]) */;
  %197 = %191.0;
  %198 = %196.1;
  (%197, %198, %var_5656, %var_5657)
}

def @main(%var_7523: Tensor[(15, 1, 11), float64]) -> (Tensor[(15, 12, 11), float64], Tensor[(15, 12, 11), int8]) {
  %199 = cast(%var_7523, dtype="float64") /* ty=Tensor[(15, 1, 11), float64] */;
  %200 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 12, 11), float64] */, dtype="float64") /* ty=Tensor[(15, 12, 11), float64] */;
  %201 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 12, 11), float64] */, dtype="int8") /* ty=Tensor[(15, 12, 11), int8] */;
  %202 = cast(%var_7523, dtype="int8") /* ty=Tensor[(15, 1, 11), int8] */;
  %203 = power(%199, %200) /* ty=Tensor[(15, 12, 11), float64] */;
  %204 = bitwise_xor(%201, %202) /* ty=Tensor[(15, 12, 11), int8] */;
  (%203, %204)
}

def @func_6058(%var_6041: Tensor[(3, 8, 16), float32]) -> (Tensor[(3, 8, 16), bool], Tensor[(3, 8, 4), float32], Tensor[(96), bool], Tensor[(3, 8, 16), float64]) {
  %205 = @func_2031() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
  %206 = %205.1;
  %207 = cast(%var_6041, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%206, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = cast(meta[relay.Constant][9] /* ty=Tensor[(96), bool] */, dtype="bool") /* ty=Tensor[(96), bool] */;
  %212 = reshape(%211, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), bool] */;
  %213 = @func_2794(%212) /* ty=(Tensor[(3, 8, 4), float32], Tensor[(3, 8, 4), bool]) */;
  %214 = @func_1940() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %215 = less(%209, %210) /* ty=Tensor[(3, 8, 16), bool] */;
  %216 = %213.0;
  %217 = %214.1;
  (%215, %216, meta[relay.Constant][9] /* ty=Tensor[(96), bool] */, %217)
}

def @func_4071(%var_4052: int32, %var_4053: Tensor[(9, 14, 10), int32]) -> (Tensor[(9, 14, 10), int32], Tensor[(3, 8, ?), bool]) {
  %218 = cast(%var_4052, dtype="int32") /* ty=int32 */;
  %219 = cast(%var_4053, dtype="int32") /* ty=Tensor[(9, 14, 10), int32] */;
  %220 = @func_609() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64]) */;
  %221 = minimum(%218, %219) /* ty=Tensor[(9, 14, 10), int32] */;
  %222 = %220.0;
  (%221, %222)
}

def @func_1823() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) {
  %223 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %224 = %223.1;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
  %226 = @func_1127() /* ty=Tensor[(3, 8, 16), uint16] */;
  %227 = cosh(%225) /* ty=Tensor[(3, 8, 16), float64] */;
  (%226, %227)
}

def @func_2157() -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 6), bool], Tensor[(72, 2), bool]) {
  %228 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %229 = cast(meta[relay.Constant][10] /* ty=Tensor[(72, 2), bool] */, dtype="bool") /* ty=Tensor[(72, 2), bool] */;
  %230 = reshape(%229, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), bool] */;
  %231 = %228.1;
  %232 = @func_909(%230) /* ty=Tensor[(3, 8, 6), bool] */;
  (%231, %232, meta[relay.Constant][10] /* ty=Tensor[(72, 2), bool] */)
}

def @func_6643() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16]) {
  %233 = @func_4234() /* ty=Tensor[(3, 8, ?), bool] */;
  %234 = @func_3234() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%233, %234)
}

def @func_2123() -> (Tensor[(3, 8, ?), bool],) {
  %235 = @func_1442() /* ty=Tensor[(3, 8, ?), bool] */;
  (%235,)
}

def @func_2271() -> Tensor[(3, 8, 16), uint16] {
  %236 = @func_1228() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64], Tensor[(12, 14, 8), uint16], Tensor[(1344), uint16]) */;
  %236.1
}

def @func_4032(%var_4003: Tensor[(11, 12, 3), float64], %var_4009: Tensor[(640), float32]) -> (Tensor[(11, 12, 3), float64], Tensor[(3, 8, ?), float32], Tensor[(640), float32], Tensor[(3, 8, 16), uint16]) {
  %237 = cast(%var_4003, dtype="float64") /* ty=Tensor[(11, 12, 3), float64] */;
  %238 = cast(%var_4009, dtype="float32") /* ty=Tensor[(640), float32] */;
  %239 = reshape(%238, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %240 = @func_3953(%239) /* ty=(Tensor[(8, 5, 16), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, ?), float32]) */;
  %241 = tan(%237) /* ty=Tensor[(11, 12, 3), float64] */;
  %242 = %240.2;
  %243 = @func_1127() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%241, %242, %var_4009, %243)
}

def @func_1264(%var_1260: Tensor[(2, 8, 8), float32]) -> (Tensor[(2, 8, 8), float32],) {
  %244 = cast(%var_1260, dtype="float32") /* ty=Tensor[(2, 8, 8), float32] */;
  %245 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(2, 8, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 8, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 8, 8), float32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %248 = divide(%246, %247) /* ty=Tensor[(2, 8, 8), float32] */;
  (%248,)
}

def @func_6724() -> (Tensor[(3, 8, 16), float64],) {
  %249 = @func_1823() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %250 = %249.1;
  (%250,)
}

def @func_1000(%var_978: Tensor[(3, 8, 6), bool]) -> (Tensor[(3, 8, 6), uint64], Tensor[(3, 8, ?), bool]) {
  %251 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %252 = cast(%251, dtype="uint64") /* ty=Tensor[(3, 8, ?), uint64] */;
  %253 = cast(%var_978, dtype="uint64") /* ty=Tensor[(3, 8, 6), uint64] */;
  %254 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %255 = subtract(%252, %253) /* ty=Tensor[(3, 8, 6), uint64] */;
  %256 = %254.3;
  (%255, %256)
}

def @func_3164() -> Tensor[(3, 8, ?), bool] {
  %257 = @func_2622() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %257.0
}

def @func_354() -> (Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) {
  %258 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %259 = cast(%258, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %260 = cast(%258, dtype="int64") /* ty=Tensor[(3, 8, ?), int64] */;
  %261 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 8, 16), bool] */, dtype="int64") /* ty=Tensor[(3, 8, 16), int64] */;
  %262 = minimum(%260, %261) /* ty=Tensor[(3, 8, 16), int64] */;
  %263 = cast(%262, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %264 = log(%263) /* ty=Tensor[(3, 8, 16), float32] */;
  %265 = cast(%264, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %266 = exp(%259) /* ty=Tensor[(3, 8, ?), float32] */;
  %267 = sinh(%265) /* ty=Tensor[(3, 8, 16), float32] */;
  (%266, %267)
}

def @func_6258() -> (Tensor[(3, 8, ?), float32],) {
  %268 = @func_1100() /* ty=Tensor[(3, 8, ?), float32] */;
  (%268,)
}

def @func_3846() -> Tensor[(3, 8, 16), uint16] {
  @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_6355(%var_6293: Tensor[(5, 1, 2), int64], %var_6294: Tensor[(5, 7, 2), int64]) -> (Tensor[(5, 7, 2), int64], Tensor[(5, 2, 2), int64], Tensor[(3, 8, ?), bool]) {
  %269 = cast(%var_6293, dtype="int64") /* ty=Tensor[(5, 1, 2), int64] */;
  %270 = cast(%var_6294, dtype="int64") /* ty=Tensor[(5, 7, 2), int64] */;
  %271 = cast(%var_6293, dtype="int64") /* ty=Tensor[(5, 1, 2), int64] */;
  %272 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 2, 2), int64] */, dtype="int64") /* ty=Tensor[(5, 2, 2), int64] */;
  %273 = right_shift(%269, %270) /* ty=Tensor[(5, 7, 2), int64] */;
  %274 = right_shift(%271, %272) /* ty=Tensor[(5, 2, 2), int64] */;
  %275 = @func_2292() /* ty=Tensor[(3, 8, ?), bool] */;
  (%273, %274, %275)
}

def @func_3017() -> (Tensor[(7, 3, 1), float64], Tensor[(3, 8, ?), bool]) {
  %276 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(7, 3, 1), float64] */;
  %277 = @func_2652() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %278 = cosh(%276) /* ty=Tensor[(7, 3, 1), float64] */;
  %279 = %277.0;
  (%278, %279)
}

def @func_5616() -> Tensor[(11, 5, 4), int32] {
  %280 = @func_4158() /* ty=(Tensor[(11, 5, 4), int32], Tensor[(3, 8, 16), float32]) */;
  %280.0
}

def @func_5108() -> (Tensor[(3, 8, ?), bool],) {
  %281 = @func_4042() /* ty=Tensor[(3, 8, ?), bool] */;
  (%281,)
}

def @func_6793() -> (Tensor[(3, 8, 16), uint16],) {
  %282 = @func_6766() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), float32]) */;
  %283 = %282.0;
  (%283,)
}

def @func_1100() -> Tensor[(3, 8, ?), float32] {
  %284 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  asin(%286) /* ty=Tensor[(3, 8, ?), float32] */
}

def @func_3799(%var_3793: float32, %var_3794: Tensor[(3, 11, 14), float32]) -> (Tensor[(3, 11, 14), float32],) {
  %287 = cast(%var_3793, dtype="float32") /* ty=float32 */;
  %288 = cast(%var_3794, dtype="float32") /* ty=Tensor[(3, 11, 14), float32] */;
  %289 = floor_mod(%287, %288) /* ty=Tensor[(3, 11, 14), float32] */;
  (%289,)
}

def @func_1442() -> Tensor[(3, 8, ?), bool] {
  %290 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %290.0
}

def @func_7375(%var_7356: Tensor[(14, 13, 3), uint16], %var_7357: Tensor[(14, 13, 3), uint16]) -> (Tensor[(3, 8, 16), float32], Tensor[(14, 13, 3), float64]) {
  %291 = cast(%var_7357, dtype="uint16") /* ty=Tensor[(14, 13, 3), uint16] */;
  %292 = shape_of(%var_7356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_7356, dtype="uint16") /* ty=Tensor[(14, 13, 3), uint16] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %295 = left_shift(%293, %294) /* ty=Tensor[(14, 13, 3), uint16] */;
  %296 = cast(%295, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %297 = @func_6267() /* ty=Tensor[(3, 8, 16), float32] */;
  %298 = asinh(%296) /* ty=Tensor[(14, 13, 3), float64] */;
  (%297, %298)
}

def @func_4042() -> Tensor[(3, 8, ?), bool] {
  @func_2253() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_5710() -> (Tensor[(3, 8, 16), uint16],) {
  %299 = @func_1823() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %300 = %299.0;
  (%300,)
}

def @func_1749() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) {
  %301 = @func_1435() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 10, 12), float32], Tensor[(30), float32]) */;
  %302 = @func_1127() /* ty=Tensor[(3, 8, 16), uint16] */;
  %303 = cast(%302, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %304 = %301.0;
  %305 = asinh(%303) /* ty=Tensor[(3, 8, 16), float32] */;
  (%304, %305)
}

def @func_6185() -> Tensor[(30), float32] {
  %306 = @func_1435() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 10, 12), float32], Tensor[(30), float32]) */;
  %306.2
}

def @func_6477() -> (Tensor[(3, 8, 16), float64], Tensor[(3, 8, 16), uint16]) {
  %307 = @func_2873() /* ty=Tensor[(3, 8, 16), float64] */;
  %308 = @func_3733() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%307, %308)
}

def @func_2389(%var_2376: Tensor[(3, 8, 11), float32]) -> (Tensor[(3, 8, 11), bool], Tensor[(3, 8, 16), uint16]) {
  %309 = @func_1100() /* ty=Tensor[(3, 8, ?), float32] */;
  %310 = cast(%309, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %311 = cast(%var_2376, dtype="bool") /* ty=Tensor[(3, 8, 11), bool] */;
  %312 = not_equal(%310, %311) /* ty=Tensor[(3, 8, 11), bool] */;
  %313 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%312, %313)
}

def @func_3676(%var_3672: Tensor[(1, 144), bool]) -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 6), uint64], Tensor[(1, 144), bool]) {
  %314 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %315 = cast(%var_3672, dtype="bool") /* ty=Tensor[(1, 144), bool] */;
  %316 = reshape(%315, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), bool] */;
  %317 = @func_1000(%316) /* ty=(Tensor[(3, 8, 6), uint64], Tensor[(3, 8, ?), bool]) */;
  %318 = %314.1;
  %319 = %317.0;
  (%318, %319, %var_3672)
}

def @func_6846() -> (Tensor[(3, 8, 9), uint32],) {
  %320 = @func_3005() /* ty=(Tensor[(3, 8, 9), uint32],) */;
  %321 = %320.0;
  (%321,)
}

def @func_6951() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 9), uint32], Tensor[(3, 8, 16), float32], Tensor[(3, 10, 12), float32]) {
  %322 = @func_6002() /* ty=(Tensor[(3, 8, 9), uint32],) */;
  %323 = @func_1749() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %324 = @func_1435() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 10, 12), float32], Tensor[(30), float32]) */;
  %325 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
  %326 = %322.0;
  %327 = %323.1;
  %328 = %324.1;
  (%325, %326, %327, %328)
}

def @func_2109() -> Tensor[(3, 8, 16), uint16] {
  %329 = @func_1940() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %329.0
}

def @func_5436() -> (Tensor[(3, 8, ?), float64],) {
  %330 = @func_5415() /* ty=(Tensor[(4, 36), float64], Tensor[(3, 8, ?), float64], Tensor[(3, 8, ?), float64]) */;
  %331 = %330.2;
  (%331,)
}

def @func_4158() -> (Tensor[(11, 5, 4), int32], Tensor[(3, 8, 16), float32]) {
  %332 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 5, 4), int32] */, dtype="int32") /* ty=Tensor[(1, 5, 4), int32] */;
  %333 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 5, 4), int32] */, dtype="int32") /* ty=Tensor[(11, 5, 4), int32] */;
  %334 = @func_2356() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
  %335 = left_shift(%332, %333) /* ty=Tensor[(11, 5, 4), int32] */;
  %336 = %334.1;
  (%335, %336)
}

def @func_5490() -> (Tensor[(3, 8, 16), uint8], Tensor[(3, 8, 16), uint16], Tensor[(132, 2), float32], Tensor[(3, 8, 16), float32], Tensor[(144), bool]) {
  %337 = @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */;
  %338 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 8, 16), uint16] */, dtype="uint8") /* ty=Tensor[(3, 8, 16), uint8] */;
  %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%337, dtype="uint8") /* ty=Tensor[(3, 8, 16), uint8] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %342 = cast(meta[relay.Constant][18] /* ty=Tensor[(132, 2), float32] */, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %343 = reshape(%342, newshape=[3, 8, 11]) /* ty=Tensor[(3, 8, 11), float32] */;
  %344 = @func_2389(%343) /* ty=(Tensor[(3, 8, 11), bool], Tensor[(3, 8, 16), uint16]) */;
  %345 = cast(meta[relay.Constant][19] /* ty=Tensor[(144), bool] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %346 = reshape(%345, newshape=[1, 144]) /* ty=Tensor[(1, 144), bool] */;
  %347 = @func_3676(%346) /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 6), uint64], Tensor[(1, 144), bool]) */;
  %348 = bitwise_or(%340, %341) /* ty=Tensor[(3, 8, 16), uint8] */;
  %349 = %344.1;
  %350 = %347.0;
  (%348, %349, meta[relay.Constant][18] /* ty=Tensor[(132, 2), float32] */, %350, meta[relay.Constant][19] /* ty=Tensor[(144), bool] */)
}

def @func_2532() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(4, 36), bool]) {
  %351 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 36), bool] */, dtype="bool") /* ty=Tensor[(4, 36), bool] */;
  %352 = reshape(%351, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), bool] */;
  %353 = @func_1000(%352) /* ty=(Tensor[(3, 8, 6), uint64], Tensor[(3, 8, ?), bool]) */;
  %354 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
  %355 = %353.1;
  (%354, %355, meta[relay.Constant][20] /* ty=Tensor[(4, 36), bool] */)
}

def @func_5091(%var_5058: Tensor[(144), bool], %var_5073: Tensor[(4, 24), bool]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 6), uint64], Tensor[(144), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 4), float32], Tensor[(128), float32], Tensor[(4, 24), bool], Tensor[(256), float32], Tensor[(3, 8, 16), bool]) {
  %356 = cast(%var_5058, dtype="bool") /* ty=Tensor[(144), bool] */;
  %357 = reshape(%356, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), bool] */;
  %358 = @func_1000(%357) /* ty=(Tensor[(3, 8, 6), uint64], Tensor[(3, 8, ?), bool]) */;
  %359 = cast(meta[relay.Constant][21] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %360 = cast(%var_5073, dtype="bool") /* ty=Tensor[(4, 24), bool] */;
  %361 = cast(meta[relay.Constant][22] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %362 = reshape(%359, newshape=[128, 1]) /* ty=Tensor[(128, 1), float32] */;
  %363 = reshape(%360, newshape=[48, 2]) /* ty=Tensor[(48, 2), bool] */;
  %364 = reshape(%361, newshape=[128, 2]) /* ty=Tensor[(128, 2), float32] */;
  %365 = @func_4363(%362, %363, %364) /* ty=(Tensor[(30), float32], Tensor[(3, 8, 4), float32], Tensor[(48, 2), bool], Tensor[(128, 2), bool], Tensor[(3, 8, 16), uint32], Tensor[(3, 8, 6), bool], Tensor[(1, 224), int32], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float32]) */;
  %366 = @func_3846() /* ty=Tensor[(3, 8, 16), uint16] */;
  %367 = cast(%366, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %368 = reshape(%367, newshape=[3, 8, 16]) /* ty=Tensor[(3, 8, 16), float32] */;
  %369 = @func_3485(%368) /* ty=(Tensor[(3, 8, 16), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float64], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %370 = @func_3164() /* ty=Tensor[(3, 8, ?), bool] */;
  %371 = %358.0;
  %372 = %365.1;
  %373 = %369.0;
  (%370, %371, %var_5058, %366, %372, meta[relay.Constant][21] /* ty=Tensor[(128), float32] */, %var_5073, meta[relay.Constant][22] /* ty=Tensor[(256), float32] */, %373)
}

def @func_3485(%var_3438: Tensor[(3, 8, 16), float32]) -> (Tensor[(3, 8, 16), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float64], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) {
  %374 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %375 = %374.0;
  %376 = cast(%375, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %377 = cast(%var_3438, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %378 = cast(%var_3438, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %379 = @func_1823() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %380 = @func_1823() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %381 = equal(%376, %377) /* ty=Tensor[(3, 8, 16), bool] */;
  %382 = sqrt(%378) /* ty=Tensor[(3, 8, 16), float32] */;
  %383 = %379.1;
  %384 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
  %385 = %380.1;
  (%381, %382, %383, %384, %385)
}

def @func_3744() -> (Tensor[(4, 36), bool],) {
  %386 = @func_2532() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(4, 36), bool]) */;
  %387 = %386.2;
  (%387,)
}

def @func_7292() -> Tensor[(3, 8, ?), bool] {
  %388 = @func_791() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %388.1
}

def @func_4877(%var_4860: Tensor[(3, 8, 16), float32], %var_4872: Tensor[(10, 64), float32]) -> (Tensor[(15, 7, 1), float32], Tensor[(3, 8, 16), float64], Tensor[(3, 8, 11), float32], Tensor[(1, 264), float32], Tensor[(8, 5, 16), float32], Tensor[(10, 64), float32]) {
  %389 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 7, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %390 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %391 = %390.1;
  %392 = cast(%var_4860, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%391, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %396 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 264), float32] */, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
  %397 = reshape(%396, newshape=[3, 8, 11]) /* ty=Tensor[(3, 8, 11), float32] */;
  %398 = @func_4211(%397) /* ty=(Tensor[(3, 8, 11), float32], Tensor[(3, 8, 16), uint16]) */;
  %399 = cast(%var_4872, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
  %400 = reshape(%399, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %401 = @func_3953(%400) /* ty=(Tensor[(8, 5, 16), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, ?), float32]) */;
  %402 = sqrt(%389) /* ty=Tensor[(15, 7, 1), float32] */;
  %403 = maximum(%394, %395) /* ty=Tensor[(3, 8, 16), float64] */;
  %404 = %398.0;
  %405 = %401.0;
  (%402, %403, %404, meta[relay.Constant][24] /* ty=Tensor[(1, 264), float32] */, %405, %var_4872)
}

def @func_1872(%var_1832: Tensor[(4, 8, 7), int32], %var_1860: Tensor[(384), float32]) -> (Tensor[(4, 8, 7), int32], Tensor[(13, 9, 14), int64], Tensor[(3, 8, 16), bool], Tensor[(384), float32]) {
  %406 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 8, 1), int32] */, dtype="int32") /* ty=Tensor[(4, 8, 1), int32] */;
  %407 = cast(%var_1832, dtype="int32") /* ty=Tensor[(4, 8, 7), int32] */;
  %408 = cast(meta[relay.Constant][26] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %409 = reshape(%408, newshape=[13, 9, 14]) /* ty=Tensor[(13, 9, 14), float64] */;
  %410 = @func_1780(%409) /* ty=Tensor[(13, 9, 14), float64] */;
  %411 = cast(meta[relay.Constant][26] /* ty=Tensor[(1638), float64] */, dtype="int64") /* ty=Tensor[(1638), int64] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="int64") /* ty=Tensor[(13, 9, 14), int64] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %415 = cast(%var_1860, dtype="float32") /* ty=Tensor[(384), float32] */;
  %416 = reshape(%415, newshape=[3, 8, 16]) /* ty=Tensor[(3, 8, 16), float32] */;
  %417 = @func_1254(%416) /* ty=(Tensor[(3, 8, 16), bool],) */;
  %418 = bitwise_xor(%406, %407) /* ty=Tensor[(4, 8, 7), int32] */;
  %419 = bitwise_or(%413, %414) /* ty=Tensor[(13, 9, 14), int64] */;
  %420 = %417.0;
  (%418, %419, %420, %var_1860)
}

def @func_3005() -> (Tensor[(3, 8, 9), uint32],) {
  %421 = @func_2292() /* ty=Tensor[(3, 8, ?), bool] */;
  %422 = cast(%421, dtype="uint32") /* ty=Tensor[(3, 8, ?), uint32] */;
  %423 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 8, 9), bool] */, dtype="uint32") /* ty=Tensor[(3, 8, 9), uint32] */;
  %424 = bitwise_and(%422, %423) /* ty=Tensor[(3, 8, 9), uint32] */;
  (%424,)
}

def @func_6597() -> (Tensor[(3, 8, 16), uint16],) {
  %425 = @func_3234() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%425,)
}

def @func_6384() -> (Tensor[(11, 5, 4), int32],) {
  %426 = @func_5616() /* ty=Tensor[(11, 5, 4), int32] */;
  (%426,)
}

def @func_6834() -> (Tensor[(3, 8, 16), uint16],) {
  %427 = @func_3977() /* ty=(Tensor[(3, 8, 16), uint16],) */;
  %428 = %427.0;
  (%428,)
}

def @func_4823() -> Tensor[(3, 8, 16), uint16] {
  @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_2292() -> Tensor[(3, 8, ?), bool] {
  %429 = @func_1435() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 10, 12), float32], Tensor[(30), float32]) */;
  %429.0
}

def @func_1372(%var_1343: Tensor[(128), float32], %var_1355: Tensor[(30), float32]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(2, 8, 8), float32], Tensor[(128), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, 16), float32], Tensor[(30), float32]) {
  %430 = @func_609() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64]) */;
  %431 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
  %432 = cast(%var_1343, dtype="float32") /* ty=Tensor[(128), float32] */;
  %433 = reshape(%432, newshape=[2, 8, 8]) /* ty=Tensor[(2, 8, 8), float32] */;
  %434 = @func_1264(%433) /* ty=(Tensor[(2, 8, 8), float32],) */;
  %435 = cast(%var_1343, dtype="float32") /* ty=Tensor[(128), float32] */;
  %436 = reshape(%435, newshape=[2, 8, 8]) /* ty=Tensor[(2, 8, 8), float32] */;
  %437 = @func_1264(%436) /* ty=(Tensor[(2, 8, 8), float32],) */;
  %438 = cast(%var_1355, dtype="float32") /* ty=Tensor[(30), float32] */;
  %439 = reshape(%438, newshape=[3, 10, 1]) /* ty=Tensor[(3, 10, 1), float32] */;
  %440 = @func_766(%439) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(3, 8, 16), float32]) */;
  %441 = %430.0;
  %442 = %431.0;
  %443 = %434.0;
  %444 = %437.0;
  %445 = %440.1;
  (%441, %442, %443, %var_1343, %444, %445, %var_1355)
}

def @func_3234() -> Tensor[(3, 8, 16), uint16] {
  @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_3342(%var_3325: Tensor[(10, 15, 16), uint64], %var_3326: Tensor[(10, 15, 16), uint64]) -> (Tensor[(10, 15, 16), uint64], Tensor[(3, 8, 16), float32]) {
  %446 = cast(%var_3326, dtype="uint64") /* ty=Tensor[(10, 15, 16), uint64] */;
  %447 = shape_of(%var_3325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%var_3325, dtype="uint64") /* ty=Tensor[(10, 15, 16), uint64] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %450 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %451 = right_shift(%448, %449) /* ty=Tensor[(10, 15, 16), uint64] */;
  %452 = %450.1;
  (%451, %452)
}

def @func_3285(%var_3266: Tensor[(224), int32]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), float32], Tensor[(4, 8, 7), int32], Tensor[(224), int32]) {
  %453 = @func_2031() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
  %454 = @func_2253() /* ty=Tensor[(3, 8, ?), bool] */;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %456 = acosh(%455) /* ty=Tensor[(3, 8, ?), float32] */;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %458 = sigmoid(%457) /* ty=Tensor[(3, 8, ?), float32] */;
  %459 = cast(%454, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %463 = floor_mod(%461, %462) /* ty=Tensor[(3, 8, ?), float32] */;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %465 = cast(%var_3266, dtype="int32") /* ty=Tensor[(224), int32] */;
  %466 = reshape(%465, newshape=[224]) /* ty=Tensor[(224), int32] */;
  %467 = @func_2711(%466) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(13, 9, 14), float64], Tensor[(4, 8, 7), int32], Tensor[(224), int32], Tensor[(1638), float64], Tensor[(3, 8, 6), bool], Tensor[(144), bool]) */;
  %468 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %469 = %453.0;
  %470 = tan(%464) /* ty=Tensor[(3, 8, ?), float32] */;
  %471 = %467.3;
  (%468, %469, %470, %471, %var_3266)
}

def @func_2253() -> Tensor[(3, 8, ?), bool] {
  %472 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %472.4
}

def @func_254() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) {
  %473 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 1), float32] */;
  %474 = asinh(%473) /* ty=Tensor[(3, 8, 1), float32] */;
  %475 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 8, 1), float32] */, dtype="bool") /* ty=Tensor[(3, 8, 1), bool] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%474, dtype="bool") /* ty=Tensor[(3, 8, 1), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %479 = cast(%474, dtype="bool") /* ty=Tensor[(3, 8, 1), bool] */;
  %480 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(3, 8, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 8, 1), float32] */, dtype="bool") /* ty=Tensor[(3, 8, 1), bool] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %483 = logical_and(%477, %478) /* ty=Tensor[(3, 8, ?), bool] */;
  %484 = not_equal(%481, %482) /* ty=Tensor[(3, 8, ?), bool] */;
  (%483, %484)
}

def @func_2216(%var_2174: Tensor[(6, 6, 15), float32], %var_2205: Tensor[(6, 6, 15), float32]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(6, 6, 15), bool]) {
  %485 = @func_791() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %486 = @func_2031() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
  %487 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 6, 15), float32] */, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %488 = shape_of(%var_2174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%var_2174, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %491 = subtract(%489, %490) /* ty=Tensor[(6, 6, 15), float32] */;
  %492 = cast(%var_2205, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %496 = %485.0;
  %497 = %486.1;
  %498 = not_equal(%494, %495) /* ty=Tensor[(6, 6, 15), bool] */;
  (%496, %497, %498)
}

def @func_5214(%var_5175: Tensor[(10, 4, 8), uint64]) -> (Tensor[(10, 4, 8), bool], Tensor[(3, 8, 16), float64], Tensor[(3, 8, ?), bool]) {
  %499 = cast(%var_5175, dtype="bool") /* ty=Tensor[(10, 4, 8), bool] */;
  %500 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(10, 4, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 4, 8), uint64] */, dtype="bool") /* ty=Tensor[(10, 4, 8), bool] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %503 = @func_2873() /* ty=Tensor[(3, 8, 16), float64] */;
  %504 = cast(%503, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
  %505 = greater_equal(%501, %502) /* ty=Tensor[(10, 4, 8), bool] */;
  %506 = sin(%504) /* ty=Tensor[(3, 8, 16), float64] */;
  %507 = @func_4234() /* ty=Tensor[(3, 8, ?), bool] */;
  (%505, %506, %507)
}

def @func_6664() -> (Tensor[(3, 8, ?), bool],) {
  %508 = @func_3183() /* ty=Tensor[(3, 8, ?), bool] */;
  (%508,)
}

def @func_1254(%var_1245: Tensor[(3, 8, 16), float32]) -> (Tensor[(3, 8, 16), bool],) {
  %509 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %510 = %509.1;
  %511 = cast(%var_1245, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = logical_and(%513, %514) /* ty=Tensor[(3, 8, 16), bool] */;
  (%515,)
}

def @func_7436() -> Tensor[(3, 8, ?), bool] {
  %516 = @func_2123() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %516.0
}

def @func_2471() -> (Tensor[(3, 8, ?), float32],) {
  %517 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %519 = atan(%518) /* ty=Tensor[(3, 8, ?), float32] */;
  (%519,)
}

def @func_6766() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), float32]) {
  %520 = @func_3977() /* ty=(Tensor[(3, 8, 16), uint16],) */;
  %521 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %522 = %520.0;
  %523 = %521.0;
  (%522, %523)
}

def @func_6421() -> (Tensor[(3, 8, ?), float64],) {
  %524 = @func_5436() /* ty=(Tensor[(3, 8, ?), float64],) */;
  %525 = %524.0;
  (%525,)
}

def @func_6981() -> (Tensor[(3, 8, 16), uint16], Tensor[(6, 15, 16), float32], Tensor[(1440), float32]) {
  %526 = cast(meta[relay.Constant][31] /* ty=Tensor[(1440), float32] */, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %527 = reshape(%526, newshape=[6, 15, 16]) /* ty=Tensor[(6, 15, 16), float32] */;
  %528 = @func_3699(%527) /* ty=(Tensor[(6, 15, 16), float32],) */;
  %529 = @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */;
  %530 = %528.0;
  (%529, %530, meta[relay.Constant][31] /* ty=Tensor[(1440), float32] */)
}

def @func_4537() -> Tensor[(4, 36), bool] {
  %531 = @func_3744() /* ty=(Tensor[(4, 36), bool],) */;
  %531.0
}

def @func_2711(%var_2683: Tensor[(224), int32]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(13, 9, 14), float64], Tensor[(4, 8, 7), int32], Tensor[(224), int32], Tensor[(1638), float64], Tensor[(3, 8, 6), bool], Tensor[(144), bool]) {
  %532 = @func_1749() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %533 = cast(meta[relay.Constant][32] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %534 = reshape(%533, newshape=[13, 9, 14]) /* ty=Tensor[(13, 9, 14), float64] */;
  %535 = cast(%var_2683, dtype="int32") /* ty=Tensor[(224), int32] */;
  %536 = %532.1;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %538 = reshape(%535, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), int32] */;
  %539 = reshape(%537, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %540 = @func_1872(%538, %539) /* ty=(Tensor[(4, 8, 7), int32], Tensor[(13, 9, 14), int64], Tensor[(3, 8, 16), bool], Tensor[(384), float32]) */;
  %541 = cast(meta[relay.Constant][32] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %542 = cast(meta[relay.Constant][33] /* ty=Tensor[(144), bool] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %543 = reshape(%542, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), bool] */;
  %544 = @func_2253() /* ty=Tensor[(3, 8, ?), bool] */;
  %545 = @func_1780(%534) /* ty=Tensor[(13, 9, 14), float64] */;
  %546 = %540.0;
  %547 = exp(%541) /* ty=Tensor[(1638), float64] */;
  %548 = @func_909(%543) /* ty=Tensor[(3, 8, 6), bool] */;
  (%544, %536, %545, %546, %var_2683, %547, %548, meta[relay.Constant][33] /* ty=Tensor[(144), bool] */)
}

def @func_1127() -> Tensor[(3, 8, 16), uint16] {
  %549 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %550 = %549.1;
  %551 = cast(%550, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
  %552 = sigmoid(%551) /* ty=Tensor[(3, 8, 16), float64] */;
  %553 = cast(%552, dtype="uint16") /* ty=Tensor[(3, 8, 16), uint16] */;
  %554 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%550, dtype="uint16") /* ty=Tensor[(3, 8, 16), uint16] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%555, %556) /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_3636() -> (Tensor[(3, 8, 9), uint32], Tensor[(3, 8, ?), uint16]) {
  %557 = @func_3005() /* ty=(Tensor[(3, 8, 9), uint32],) */;
  %558 = @func_1442() /* ty=Tensor[(3, 8, ?), bool] */;
  %559 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %560 = %559.1;
  %561 = cast(%560, dtype="uint16") /* ty=Tensor[(3, 8, ?), uint16] */;
  %562 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%558, dtype="uint16") /* ty=Tensor[(3, 8, ?), uint16] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %565 = %557.0;
  %566 = bitwise_and(%563, %564) /* ty=Tensor[(3, 8, ?), uint16] */;
  (%565, %566)
}

def @func_2574() -> Tensor[(3, 8, ?), bool] {
  %567 = @func_2397() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %567.0
}

def @func_909(%var_900: Tensor[(3, 8, 6), bool]) -> Tensor[(3, 8, 6), bool] {
  %568 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %569 = %568.4;
  %570 = cast(%569, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %571 = cast(%var_900, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  logical_or(%570, %571) /* ty=Tensor[(3, 8, 6), bool] */
}

def @func_4734(%var_4697: Tensor[(4, 36), bool]) -> (Tensor[(3, 8, 16), float32], Tensor[(384), float32], Tensor[(3, 8, ?), bool], Tensor[(4, 36), int32]) {
  %572 = cast(meta[relay.Constant][34] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %573 = reshape(%572, newshape=[3, 8, 16]) /* ty=Tensor[(3, 8, 16), float32] */;
  %574 = @func_3485(%573) /* ty=(Tensor[(3, 8, 16), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float64], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %575 = @func_2652() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %576 = @func_4537() /* ty=Tensor[(4, 36), bool] */;
  %577 = cast(%var_4697, dtype="bool") /* ty=Tensor[(4, 36), bool] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(2), int32] */;
  %579 = cast(%576, dtype="bool") /* ty=Tensor[(4, 36), bool] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %581 = logical_or(%579, %580) /* ty=Tensor[(4, 36), bool] */;
  %582 = cast(%var_4697, dtype="int32") /* ty=Tensor[(4, 36), int32] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %584 = cast(%581, dtype="int32") /* ty=Tensor[(4, 36), int32] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %586 = %574.1;
  %587 = %575.0;
  %588 = logical_xor(%584, %585) /* ty=Tensor[(4, 36), int32] */;
  (%586, meta[relay.Constant][34] /* ty=Tensor[(384), float32] */, %587, %588)
}

def @func_5745() -> Tensor[(3, 8, 16), uint16] {
  %589 = @func_1940() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %589.0
}

def @func_6445() -> Tensor[(3, 8, ?), float64] {
  %590 = @func_2532() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(4, 36), bool]) */;
  %591 = %590.1;
  %592 = cast(%591, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  cosh(%592) /* ty=Tensor[(3, 8, ?), float64] */
}

def @func_6267() -> Tensor[(3, 8, 16), float32] {
  %593 = @func_2356() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
  %593.1
}

def @func_2652() -> (Tensor[(3, 8, ?), bool],) {
  %594 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  (%594,)
}

def @func_4514(%var_4493: Tensor[(336), float32], %var_4494: Tensor[(1344), uint16]) -> (Tensor[(3, 8, 16), uint16], Tensor[(12, 14, 8), uint16], Tensor[(336), float32], Tensor[(1344), uint16], Tensor[(3, 8, 16), int32], Tensor[(3, 8, ?), bool]) {
  %595 = cast(%var_4493, dtype="float32") /* ty=Tensor[(336), float32] */;
  %596 = cast(%var_4494, dtype="uint16") /* ty=Tensor[(1344), uint16] */;
  %597 = reshape(%595, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), float32] */;
  %598 = reshape(%596, newshape=[1344]) /* ty=Tensor[(1344), uint16] */;
  %599 = @func_1639(%597, %598) /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 14), bool], Tensor[(12, 14, 8), uint16], Tensor[(1344), uint16]) */;
  %600 = @func_3660() /* ty=(Tensor[(3, 8, 16), int32],) */;
  %601 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
  %602 = %599.2;
  %603 = %600.0;
  %604 = @func_2292() /* ty=Tensor[(3, 8, ?), bool] */;
  (%601, %602, %var_4493, %var_4494, %603, %604)
}

def @func_6712() -> (Tensor[(11, 5, 4), int32], Tensor[(3, 8, 16), float32], Tensor[(7, 3, 1), float64], Tensor[(3, 8, ?), float64]) {
  %605 = @func_2356() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
  %606 = @func_3017() /* ty=(Tensor[(7, 3, 1), float64], Tensor[(3, 8, ?), bool]) */;
  %607 = @func_5415() /* ty=(Tensor[(4, 36), float64], Tensor[(3, 8, ?), float64], Tensor[(3, 8, ?), float64]) */;
  %608 = @func_5616() /* ty=Tensor[(11, 5, 4), int32] */;
  %609 = %605.0;
  %610 = %606.0;
  %611 = %607.2;
  (%608, %609, %610, %611)
}

def @func_7014(%var_6989: Tensor[(3, 8, 4), bool]) -> (Tensor[(3, 8, 4), bool], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16]) {
  %612 = @func_1749() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %613 = %612.0;
  %614 = cast(%613, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %615 = cast(%var_6989, dtype="bool") /* ty=Tensor[(3, 8, 4), bool] */;
  %616 = @func_2828() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), uint16]) */;
  %617 = less_equal(%614, %615) /* ty=Tensor[(3, 8, 4), bool] */;
  %618 = @func_2574() /* ty=Tensor[(3, 8, ?), bool] */;
  %619 = %616.2;
  (%617, %618, %619)
}

def @func_609() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64]) {
  %620 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %621 = %620.0;
  %622 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %623 = %622.1;
  %624 = cast(%623, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %625 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%621, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %628 = cast(%623, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %629 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%621, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %632 = equal(%626, %627) /* ty=Tensor[(3, 8, ?), bool] */;
  %633 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %634 = divide(%630, %631) /* ty=Tensor[(3, 8, ?), float64] */;
  (%632, %633, %634)
}

def @func_5892() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) {
  %635 = @func_791() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %636 = @func_1940() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %637 = %635.0;
  %638 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
  %639 = %636.1;
  (%637, %638, %639)
}

def @func_1435() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 10, 12), float32], Tensor[(30), float32]) {
  %640 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %641 = cast(meta[relay.Constant][35] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %642 = reshape(%641, newshape=[3, 10, 1]) /* ty=Tensor[(3, 10, 1), float32] */;
  %643 = @func_766(%642) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(3, 8, 16), float32]) */;
  %644 = %640.0;
  %645 = %643.0;
  (%644, %645, meta[relay.Constant][35] /* ty=Tensor[(30), float32] */)
}

def @func_3835(%var_3821: Tensor[(3, 8, 5), bool]) -> (Tensor[(3, 8, 5), uint8],) {
  %646 = @func_2292() /* ty=Tensor[(3, 8, ?), bool] */;
  %647 = cast(%646, dtype="uint8") /* ty=Tensor[(3, 8, ?), uint8] */;
  %648 = cast(%var_3821, dtype="uint8") /* ty=Tensor[(3, 8, 5), uint8] */;
  %649 = right_shift(%647, %648) /* ty=Tensor[(3, 8, 5), uint8] */;
  (%649,)
}

def @func_1639(%var_1627: Tensor[(3, 8, 14), float32], %var_1634: Tensor[(1344), uint16]) -> (Tensor[(3, 8, ?), float32], Tensor[(3, 8, 14), bool], Tensor[(12, 14, 8), uint16], Tensor[(1344), uint16]) {
  %650 = @func_1100() /* ty=Tensor[(3, 8, ?), float32] */;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %652 = log10(%651) /* ty=Tensor[(3, 8, ?), float32] */;
  %653 = cast(%650, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %657 = floor_divide(%655, %656) /* ty=Tensor[(3, 8, ?), float64] */;
  %658 = cast(%650, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%657, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %662 = cast(%650, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %663 = cast(%var_1627, dtype="bool") /* ty=Tensor[(3, 8, 14), bool] */;
  %664 = cast(%var_1634, dtype="uint16") /* ty=Tensor[(1344), uint16] */;
  %665 = cast(%var_1634, dtype="uint16") /* ty=Tensor[(1344), uint16] */;
  %666 = reshape(%664, newshape=[12, 14, 8]) /* ty=Tensor[(12, 14, 8), uint16] */;
  %667 = reshape(%665, newshape=[12, 14, 8]) /* ty=Tensor[(12, 14, 8), uint16] */;
  %668 = @func_1058(%666, %667) /* ty=(Tensor[(12, 14, 8), uint16], Tensor[(3, 8, 16), float32], Tensor[(12, 14, 8), float64], Tensor[(3, 8, ?), bool]) */;
  %669 = maximum(%660, %661) /* ty=Tensor[(3, 8, ?), float32] */;
  %670 = less(%662, %663) /* ty=Tensor[(3, 8, 14), bool] */;
  %671 = %668.0;
  (%669, %670, %671, %var_1634)
}

def @func_7170() -> Tensor[(3, 8, ?), int64] {
  %672 = @func_2471() /* ty=(Tensor[(3, 8, ?), float32],) */;
  %673 = %672.0;
  %674 = @func_6643() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16]) */;
  %675 = %674.0;
  %676 = cast(%675, dtype="int64") /* ty=Tensor[(3, 8, ?), int64] */;
  %677 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%673, dtype="int64") /* ty=Tensor[(3, 8, ?), int64] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%678, %679) /* ty=Tensor[(3, 8, ?), int64] */
}

def @func_791() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) {
  %680 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %681 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %682 = %680.3;
  %683 = %681.0;
  (%682, %683)
}

def @func_282() -> Tensor[(3, 8, ?), bool] {
  %684 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %684.1
}

def @func_3183() -> Tensor[(3, 8, ?), bool] {
  %685 = @func_2652() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %685.0
}

def @func_5960(%var_5933: uint8) -> (Tensor[(3, 8, ?), bool], Tensor[(144), bool], Tensor[(132, 2), float32], Tensor[(3, 8, ?), bool], Tensor[(7, 7, 15), uint8], uint8, Tensor[(49, 15), uint8], Tensor[(11, 5, 4), int32]) {
  %686 = @func_5490() /* ty=(Tensor[(3, 8, 16), uint8], Tensor[(3, 8, 16), uint16], Tensor[(132, 2), float32], Tensor[(3, 8, 16), float32], Tensor[(144), bool]) */;
  %687 = @func_5490() /* ty=(Tensor[(3, 8, 16), uint8], Tensor[(3, 8, 16), uint16], Tensor[(132, 2), float32], Tensor[(3, 8, 16), float32], Tensor[(144), bool]) */;
  %688 = @func_5275() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %689 = cast(%var_5933, dtype="uint8") /* ty=uint8 */;
  %690 = cast(meta[relay.Constant][36] /* ty=Tensor[(49, 15), uint8] */, dtype="uint8") /* ty=Tensor[(49, 15), uint8] */;
  %691 = reshape(%689, newshape=[]) /* ty=uint8 */;
  %692 = reshape(%690, newshape=[7, 7, 15]) /* ty=Tensor[(7, 7, 15), uint8] */;
  %693 = @func_3164() /* ty=Tensor[(3, 8, ?), bool] */;
  %694 = %686.4;
  %695 = %687.2;
  %696 = %688.0;
  %697 = @func_4894(%691, %692) /* ty=Tensor[(7, 7, 15), uint8] */;
  %698 = @func_5616() /* ty=Tensor[(11, 5, 4), int32] */;
  (%693, %694, %695, %696, %697, %var_5933, meta[relay.Constant][36] /* ty=Tensor[(49, 15), uint8] */, %698)
}

def @func_3977() -> (Tensor[(3, 8, 16), uint16],) {
  %699 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%699,)
}

def @func_5023(%var_5021: Tensor[(640), float32]) -> (Tensor[(3, 8, 16), float32], Tensor[(8, 5, 16), float32], Tensor[(640), float32]) {
  %700 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %701 = cast(%var_5021, dtype="float32") /* ty=Tensor[(640), float32] */;
  %702 = reshape(%701, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %703 = @func_3953(%702) /* ty=(Tensor[(8, 5, 16), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, ?), float32]) */;
  %704 = %700.1;
  %705 = %703.0;
  (%704, %705, %var_5021)
}

def @func_4570() -> (Tensor[(3, 8, ?), bool],) {
  %706 = @func_4042() /* ty=Tensor[(3, 8, ?), bool] */;
  (%706,)
}

def @func_7401(%var_7394: Tensor[(5, 10, 14), float32]) -> (Tensor[(5, 10, 14), float32],) {
  %707 = cast(%var_7394, dtype="float32") /* ty=Tensor[(5, 10, 14), float32] */;
  %708 = sigmoid(%707) /* ty=Tensor[(5, 10, 14), float32] */;
  (%708,)
}

def @func_627() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) {
  %709 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %710 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %711 = %709.1;
  (%710, %711)
}

def @func_5579(%var_5552: Tensor[(11, 9, 8), int32]) -> (Tensor[(11, 9, 8), int32], Tensor[(11, 9, 8), float32], Tensor[(11, 9, 8), float32], Tensor[(3, 8, 5), uint8], Tensor[(6, 20), bool], Tensor[(3, 8, ?), float32]) {
  %712 = cast(%var_5552, dtype="int32") /* ty=Tensor[(11, 9, 8), int32] */;
  %713 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(11, 9, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 9, 8), int32] */, dtype="int32") /* ty=Tensor[(11, 9, 8), int32] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %716 = cast(%var_5552, dtype="float32") /* ty=Tensor[(11, 9, 8), float32] */;
  %717 = cast(%var_5552, dtype="float32") /* ty=Tensor[(11, 9, 8), float32] */;
  %718 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 20), bool] */, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %719 = reshape(%718, newshape=[3, 8, 5]) /* ty=Tensor[(3, 8, 5), bool] */;
  %720 = @func_3835(%719) /* ty=(Tensor[(3, 8, 5), uint8],) */;
  %721 = @func_2471() /* ty=(Tensor[(3, 8, ?), float32],) */;
  %722 = minimum(%714, %715) /* ty=Tensor[(11, 9, 8), int32] */;
  %723 = log(%716) /* ty=Tensor[(11, 9, 8), float32] */;
  %724 = acosh(%717) /* ty=Tensor[(11, 9, 8), float32] */;
  %725 = %720.0;
  %726 = %721.0;
  (%722, %723, %724, %725, meta[relay.Constant][38] /* ty=Tensor[(6, 20), bool] */, %726)
}

def @func_3733() -> Tensor[(3, 8, 16), uint16] {
  %727 = @func_2828() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), uint16]) */;
  %727.3
}

def @func_5415() -> (Tensor[(4, 36), float64], Tensor[(3, 8, ?), float64], Tensor[(3, 8, ?), float64]) {
  %728 = @func_4537() /* ty=Tensor[(4, 36), bool] */;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %730 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
  %731 = %730.1;
  %732 = cast(%731, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %733 = @func_791() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %734 = %733.0;
  %735 = @func_791() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %736 = %735.0;
  %737 = cast(%736, dtype="uint16") /* ty=Tensor[(3, 8, ?), uint16] */;
  %738 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%734, dtype="uint16") /* ty=Tensor[(3, 8, ?), uint16] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %741 = right_shift(%739, %740) /* ty=Tensor[(3, 8, ?), uint16] */;
  %742 = cast(%734, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %746 = cos(%729) /* ty=Tensor[(4, 36), float64] */;
  %747 = sinh(%732) /* ty=Tensor[(3, 8, ?), float64] */;
  %748 = power(%744, %745) /* ty=Tensor[(3, 8, ?), float64] */;
  (%746, %747, %748)
}

def @func_4802(%var_4778: Tensor[(13, 16, 13), float64], %var_4799: Tensor[(144), bool]) -> (Tensor[(13, 16, 13), float64], Tensor[(1, 144), bool], Tensor[(144), bool]) {
  %749 = cast(%var_4778, dtype="float64") /* ty=Tensor[(13, 16, 13), float64] */;
  %750 = asin(%749) /* ty=Tensor[(13, 16, 13), float64] */;
  %751 = cast(%750, dtype="float64") /* ty=Tensor[(13, 16, 13), float64] */;
  %752 = cast(%var_4799, dtype="bool") /* ty=Tensor[(144), bool] */;
  %753 = reshape(%752, newshape=[1, 144]) /* ty=Tensor[(1, 144), bool] */;
  %754 = @func_3676(%753) /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 6), uint64], Tensor[(1, 144), bool]) */;
  %755 = acosh(%751) /* ty=Tensor[(13, 16, 13), float64] */;
  %756 = %754.2;
  (%755, %756, %var_4799)
}

def @func_1228() -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64], Tensor[(12, 14, 8), uint16], Tensor[(1344), uint16]) {
  %757 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %758 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
  %759 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
  %760 = %759.1;
  %761 = cast(%760, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %762 = cast(meta[relay.Constant][39] /* ty=Tensor[(1344), uint16] */, dtype="uint16") /* ty=Tensor[(1344), uint16] */;
  %763 = cast(meta[relay.Constant][39] /* ty=Tensor[(1344), uint16] */, dtype="uint16") /* ty=Tensor[(1344), uint16] */;
  %764 = reshape(%762, newshape=[12, 14, 8]) /* ty=Tensor[(12, 14, 8), uint16] */;
  %765 = reshape(%763, newshape=[12, 14, 8]) /* ty=Tensor[(12, 14, 8), uint16] */;
  %766 = @func_1058(%764, %765) /* ty=(Tensor[(12, 14, 8), uint16], Tensor[(3, 8, 16), float32], Tensor[(12, 14, 8), float64], Tensor[(3, 8, ?), bool]) */;
  %767 = %757.1;
  %768 = @func_1127() /* ty=Tensor[(3, 8, 16), uint16] */;
  %769 = %758.0;
  %770 = cos(%761) /* ty=Tensor[(3, 8, ?), float64] */;
  %771 = %766.0;
  (%767, %768, %769, %770, %771, meta[relay.Constant][39] /* ty=Tensor[(1344), uint16] */)
}

def @func_5275() -> (Tensor[(3, 8, ?), bool],) {
  %772 = @func_2397() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %773 = %772.0;
  (%773,)
}

def @func_5815() -> (Tensor[(3, 8, ?), int32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) {
  %774 = @func_2292() /* ty=Tensor[(3, 8, ?), bool] */;
  %775 = cast(%774, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %776 = erf(%775) /* ty=Tensor[(3, 8, ?), float32] */;
  %777 = cast(%776, dtype="int32") /* ty=Tensor[(3, 8, ?), int32] */;
  %778 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%774, dtype="int32") /* ty=Tensor[(3, 8, ?), int32] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %781 = @func_791() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %782 = bitwise_or(%779, %780) /* ty=Tensor[(3, 8, ?), int32] */;
  %783 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %784 = %781.0;
  (%782, %783, %784)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2124() -> (Tensor[(3, 8, ?), bool],) {
  %1 = fn () -> (Tensor[(3, 8, ?), bool],) {
    %0 = @func_1442() /* ty=Tensor[(3, 8, ?), bool] */;
    (%0,)
  };
  %1() /* ty=(Tensor[(3, 8, ?), bool],) */
}

def @func_255() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) {
  %14 = fn () -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) {
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 1), float32] */;
    %3 = asinh(%2) /* ty=Tensor[(3, 8, 1), float32] */;
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 8, 1), float32] */, dtype="bool") /* ty=Tensor[(3, 8, 1), bool] */;
    %5 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
    %6 = cast(%3, dtype="bool") /* ty=Tensor[(3, 8, 1), bool] */;
    %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %8 = cast(%3, dtype="bool") /* ty=Tensor[(3, 8, 1), bool] */;
    %9 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(3, 8, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 8, 1), float32] */, dtype="bool") /* ty=Tensor[(3, 8, 1), bool] */;
    %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %12 = logical_and(%6, %7) /* ty=Tensor[(3, 8, ?), bool] */;
    %13 = not_equal(%10, %11) /* ty=Tensor[(3, 8, ?), bool] */;
    (%12, %13)
  };
  %14() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */
}

def @func_4539() -> Tensor[(4, 36), bool] {
  @func_4537() /* ty=Tensor[(4, 36), bool] */
}

def @func_1062(%var_1060: Tensor[(12, 14, 8), uint16], %var_1061: Tensor[(12, 14, 8), uint16]) -> (Tensor[(12, 14, 8), uint16], Tensor[(3, 8, 16), float32], Tensor[(12, 14, 8), float64], Tensor[(3, 8, ?), bool]) {
  @func_1058(%var_1060, %var_1061) /* ty=(Tensor[(12, 14, 8), uint16], Tensor[(3, 8, 16), float32], Tensor[(12, 14, 8), float64], Tensor[(3, 8, ?), bool]) */
}

def @func_3342(%var_3325: Tensor[(10, 15, 16), uint64], %var_3326: Tensor[(10, 15, 16), uint64]) -> (Tensor[(10, 15, 16), uint64], Tensor[(3, 8, 16), float32]) {
  %15 = cast(%var_3326, dtype="uint64") /* ty=Tensor[(10, 15, 16), uint64] */;
  %16 = shape_of(%var_3325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%var_3325, dtype="uint64") /* ty=Tensor[(10, 15, 16), uint64] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %19 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %20 = right_shift(%17, %18) /* ty=Tensor[(10, 15, 16), uint64] */;
  %21 = %19.1;
  (%20, %21)
}

def @func_3676(%var_3672: Tensor[(1, 144), bool]) -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 6), uint64], Tensor[(1, 144), bool]) {
  %22 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %23 = cast(%var_3672, dtype="bool") /* ty=Tensor[(1, 144), bool] */;
  %24 = reshape(%23, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), bool] */;
  %25 = @func_1000(%24) /* ty=(Tensor[(3, 8, 6), uint64], Tensor[(3, 8, ?), bool]) */;
  %26 = %22.1;
  %27 = %25.0;
  (%26, %27, %var_3672)
}

def @func_3288(%var_3286: Tensor[(224), int32]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), float32], Tensor[(4, 8, 7), int32], Tensor[(224), int32]) {
  @func_3285(%var_3286) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), float32], Tensor[(4, 8, 7), int32], Tensor[(224), int32]) */
}

def @func_4570() -> (Tensor[(3, 8, ?), bool],) {
  %28 = @func_4042() /* ty=Tensor[(3, 8, ?), bool] */;
  (%28,)
}

def @func_2797(%var_2795: Tensor[(3, 8, 4), bool]) -> (Tensor[(3, 8, 4), float32], Tensor[(3, 8, 4), bool]) {
  @func_2794(%var_2795) /* ty=(Tensor[(3, 8, 4), float32], Tensor[(3, 8, 4), bool]) */
}

def @func_3701(%var_3700: Tensor[(6, 15, 16), float32]) -> (Tensor[(6, 15, 16), float32],) {
  %34 = fn (%var_3695: Tensor[(6, 15, 16), float32]) -> (Tensor[(6, 15, 16), float32],) {
    %29 = cast(%var_3695, dtype="float32") /* ty=Tensor[(6, 15, 16), float32] */;
    %30 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(6, 15, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 15, 16), float32] */;
    %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %33 = divide(%31, %32) /* ty=Tensor[(6, 15, 16), float32] */;
    (%33,)
  };
  %34(%var_3700) /* ty=(Tensor[(6, 15, 16), float32],) */
}

def @func_5109() -> (Tensor[(3, 8, ?), bool],) {
  %36 = fn () -> (Tensor[(3, 8, ?), bool],) {
    %35 = @func_4042() /* ty=Tensor[(3, 8, ?), bool] */;
    (%35,)
  };
  %36() /* ty=(Tensor[(3, 8, ?), bool],) */
}

def @func_2158() -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 6), bool], Tensor[(72, 2), bool]) {
  %42 = fn () -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 6), bool], Tensor[(72, 2), bool]) {
    %37 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
    %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(72, 2), bool] */, dtype="bool") /* ty=Tensor[(72, 2), bool] */;
    %39 = reshape(%38, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), bool] */;
    %40 = %37.1;
    %41 = @func_909(%39) /* ty=Tensor[(3, 8, 6), bool] */;
    (%40, %41, meta[relay.Constant][2] /* ty=Tensor[(72, 2), bool] */)
  };
  %42() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 6), bool], Tensor[(72, 2), bool]) */
}

def @func_2574() -> Tensor[(3, 8, ?), bool] {
  %43 = @func_2397() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %43.0
}

def @func_2919(%var_2889: Tensor[(15, 1, 13), float64], %var_2890: Tensor[(15, 3, 13), float64]) -> (Tensor[(15, 3, 13), float64], Tensor[(3, 8, 16), float64], Tensor[(3, 8, ?), bool], Tensor[(144), bool]) {
  %44 = cast(%var_2889, dtype="float64") /* ty=Tensor[(15, 1, 13), float64] */;
  %45 = cast(%var_2890, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %46 = floor_mod(%44, %45) /* ty=Tensor[(15, 3, 13), float64] */;
  %47 = cast(%var_2889, dtype="float64") /* ty=Tensor[(15, 1, 13), float64] */;
  %48 = cast(%46, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(144), bool] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %50 = reshape(%49, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), bool] */;
  %51 = @func_1000(%50) /* ty=(Tensor[(3, 8, 6), uint64], Tensor[(3, 8, ?), bool]) */;
  %52 = add(%47, %48) /* ty=Tensor[(15, 3, 13), float64] */;
  %53 = @func_2873() /* ty=Tensor[(3, 8, 16), float64] */;
  %54 = %51.1;
  (%52, %53, %54, meta[relay.Constant][3] /* ty=Tensor[(144), bool] */)
}

def @func_1376(%var_1374: Tensor[(128), float32], %var_1375: Tensor[(30), float32]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(2, 8, 8), float32], Tensor[(128), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, 16), float32], Tensor[(30), float32]) {
  @func_1372(%var_1374, %var_1375) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(2, 8, 8), float32], Tensor[(128), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, 16), float32], Tensor[(30), float32]) */
}

def @func_5416() -> (Tensor[(4, 36), float64], Tensor[(3, 8, ?), float64], Tensor[(3, 8, ?), float64]) {
  %76 = fn () -> (Tensor[(4, 36), float64], Tensor[(3, 8, ?), float64], Tensor[(3, 8, ?), float64]) {
    %55 = @func_4537() /* ty=Tensor[(4, 36), bool] */;
    %56 = cast(%55, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
    %57 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
    %58 = %57.1;
    %59 = cast(%58, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
    %60 = @func_791() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %61 = %60.0;
    %62 = @func_791() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %63 = %62.0;
    %64 = cast(%63, dtype="uint16") /* ty=Tensor[(3, 8, ?), uint16] */;
    %65 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
    %66 = cast(%61, dtype="uint16") /* ty=Tensor[(3, 8, ?), uint16] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %68 = right_shift(%66, %67) /* ty=Tensor[(3, 8, ?), uint16] */;
    %69 = cast(%61, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
    %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(%68, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %73 = cos(%56) /* ty=Tensor[(4, 36), float64] */;
    %74 = sinh(%59) /* ty=Tensor[(3, 8, ?), float64] */;
    %75 = power(%71, %72) /* ty=Tensor[(3, 8, ?), float64] */;
    (%73, %74, %75)
  };
  %76() /* ty=(Tensor[(4, 36), float64], Tensor[(3, 8, ?), float64], Tensor[(3, 8, ?), float64]) */
}

def @func_6597() -> (Tensor[(3, 8, 16), uint16],) {
  %77 = @func_3234() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%77,)
}

def @func_3165() -> Tensor[(3, 8, ?), bool] {
  %79 = fn () -> Tensor[(3, 8, ?), bool] {
    %78 = @func_2622() /* ty=(Tensor[(3, 8, ?), bool],) */;
    %78.0
  };
  %79() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_5963(%var_5961: uint8) -> (Tensor[(3, 8, ?), bool], Tensor[(144), bool], Tensor[(132, 2), float32], Tensor[(3, 8, ?), bool], Tensor[(7, 7, 15), uint8], uint8, Tensor[(49, 15), uint8], Tensor[(11, 5, 4), int32]) {
  @func_5960(%var_5961) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(144), bool], Tensor[(132, 2), float32], Tensor[(3, 8, ?), bool], Tensor[(7, 7, 15), uint8], uint8, Tensor[(49, 15), uint8], Tensor[(11, 5, 4), int32]) */
}

def @func_6268() -> Tensor[(3, 8, 16), float32] {
  %81 = fn () -> Tensor[(3, 8, 16), float32] {
    %80 = @func_2356() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
    %80.1
  };
  %81() /* ty=Tensor[(3, 8, 16), float32] */
}

def @func_6847() -> (Tensor[(3, 8, 9), uint32],) {
  %84 = fn () -> (Tensor[(3, 8, 9), uint32],) {
    %82 = @func_3005() /* ty=(Tensor[(3, 8, 9), uint32],) */;
    %83 = %82.0;
    (%83,)
  };
  %84() /* ty=(Tensor[(3, 8, 9), uint32],) */
}

def @func_1783(%var_1781: Tensor[(13, 9, 14), float64]) -> Tensor[(13, 9, 14), float64] {
  @func_1780(%var_1781) /* ty=Tensor[(13, 9, 14), float64] */
}

def @func_284() -> Tensor[(3, 8, ?), bool] {
  @func_282() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_1230() -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64], Tensor[(12, 14, 8), uint16], Tensor[(1344), uint16]) {
  @func_1228() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64], Tensor[(12, 14, 8), uint16], Tensor[(1344), uint16]) */
}

def @func_3019() -> (Tensor[(7, 3, 1), float64], Tensor[(3, 8, ?), bool]) {
  @func_3017() /* ty=(Tensor[(7, 3, 1), float64], Tensor[(3, 8, ?), bool]) */
}

def @func_766(%var_743: Tensor[(3, 10, 1), float32]) -> (Tensor[(3, 10, 12), float32], Tensor[(3, 8, 16), float32]) {
  %85 = cast(%var_743, dtype="float32") /* ty=Tensor[(3, 10, 1), float32] */;
  %86 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 10, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 10, 12), float32] */;
  %87 = multiply(%85, %86) /* ty=Tensor[(3, 10, 12), float32] */;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(3, 10, 12), float32] */;
  %89 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %90 = log(%88) /* ty=Tensor[(3, 10, 12), float32] */;
  %91 = %89.1;
  (%90, %91)
}

def @func_3660() -> (Tensor[(3, 8, 16), int32],) {
  %92 = @func_2828() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), uint16]) */;
  %93 = %92.2;
  %94 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %95 = %94.2;
  %96 = cast(%95, dtype="int32") /* ty=Tensor[(3, 8, 16), int32] */;
  %97 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%93, dtype="int32") /* ty=Tensor[(3, 8, 16), int32] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %100 = add(%98, %99) /* ty=Tensor[(3, 8, 16), int32] */;
  (%100,)
}

def @func_2293() -> Tensor[(3, 8, ?), bool] {
  %102 = fn () -> Tensor[(3, 8, ?), bool] {
    %101 = @func_1435() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 10, 12), float32], Tensor[(30), float32]) */;
    %101.0
  };
  %102() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_2216(%var_2174: Tensor[(6, 6, 15), float32], %var_2205: Tensor[(6, 6, 15), float32]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(6, 6, 15), bool]) {
  %103 = @func_791() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %104 = @func_2031() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
  %105 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 6, 15), float32] */, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %106 = shape_of(%var_2174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_2174, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %109 = subtract(%107, %108) /* ty=Tensor[(6, 6, 15), float32] */;
  %110 = cast(%var_2205, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %114 = %103.0;
  %115 = %104.1;
  %116 = not_equal(%112, %113) /* ty=Tensor[(6, 6, 15), bool] */;
  (%114, %115, %116)
}

def @func_4898(%var_4896: uint8, %var_4897: Tensor[(7, 7, 15), uint8]) -> Tensor[(7, 7, 15), uint8] {
  @func_4894(%var_4896, %var_4897) /* ty=Tensor[(7, 7, 15), uint8] */
}

def @func_2397() -> (Tensor[(3, 8, ?), bool],) {
  %117 = @func_2123() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %118 = %117.0;
  (%118,)
}

def @func_6003() -> (Tensor[(3, 8, 9), uint32],) {
  %121 = fn () -> (Tensor[(3, 8, 9), uint32],) {
    %119 = @func_3005() /* ty=(Tensor[(3, 8, 9), uint32],) */;
    %120 = %119.0;
    (%120,)
  };
  %121() /* ty=(Tensor[(3, 8, 9), uint32],) */
}

def @func_3835(%var_3821: Tensor[(3, 8, 5), bool]) -> (Tensor[(3, 8, 5), uint8],) {
  %122 = @func_2292() /* ty=Tensor[(3, 8, ?), bool] */;
  %123 = cast(%122, dtype="uint8") /* ty=Tensor[(3, 8, ?), uint8] */;
  %124 = cast(%var_3821, dtype="uint8") /* ty=Tensor[(3, 8, 5), uint8] */;
  %125 = right_shift(%123, %124) /* ty=Tensor[(3, 8, 5), uint8] */;
  (%125,)
}

def @func_6835() -> (Tensor[(3, 8, 16), uint16],) {
  %128 = fn () -> (Tensor[(3, 8, 16), uint16],) {
    %126 = @func_3977() /* ty=(Tensor[(3, 8, 16), uint16],) */;
    %127 = %126.0;
    (%127,)
  };
  %128() /* ty=(Tensor[(3, 8, 16), uint16],) */
}

def @func_611() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64]) {
  @func_609() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64]) */
}

def @func_1643(%var_1641: Tensor[(3, 8, 14), float32], %var_1642: Tensor[(1344), uint16]) -> (Tensor[(3, 8, ?), float32], Tensor[(3, 8, 14), bool], Tensor[(12, 14, 8), uint16], Tensor[(1344), uint16]) {
  @func_1639(%var_1641, %var_1642) /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 14), bool], Tensor[(12, 14, 8), uint16], Tensor[(1344), uint16]) */
}

def @func_5025(%var_5024: Tensor[(640), float32]) -> (Tensor[(3, 8, 16), float32], Tensor[(8, 5, 16), float32], Tensor[(640), float32]) {
  %135 = fn (%var_5021: Tensor[(640), float32]) -> (Tensor[(3, 8, 16), float32], Tensor[(8, 5, 16), float32], Tensor[(640), float32]) {
    %129 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
    %130 = cast(%var_5021, dtype="float32") /* ty=Tensor[(640), float32] */;
    %131 = reshape(%130, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
    %132 = @func_3953(%131) /* ty=(Tensor[(8, 5, 16), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, ?), float32]) */;
    %133 = %129.1;
    %134 = %132.0;
    (%133, %134, %var_5021)
  };
  %135(%var_5024) /* ty=(Tensor[(3, 8, 16), float32], Tensor[(8, 5, 16), float32], Tensor[(640), float32]) */
}

def @func_4805(%var_4803: Tensor[(13, 16, 13), float64], %var_4804: Tensor[(144), bool]) -> (Tensor[(13, 16, 13), float64], Tensor[(1, 144), bool], Tensor[(144), bool]) {
  %144 = fn (%var_4778: Tensor[(13, 16, 13), float64], %var_4799: Tensor[(144), bool]) -> (Tensor[(13, 16, 13), float64], Tensor[(1, 144), bool], Tensor[(144), bool]) {
    %136 = cast(%var_4778, dtype="float64") /* ty=Tensor[(13, 16, 13), float64] */;
    %137 = asin(%136) /* ty=Tensor[(13, 16, 13), float64] */;
    %138 = cast(%137, dtype="float64") /* ty=Tensor[(13, 16, 13), float64] */;
    %139 = cast(%var_4799, dtype="bool") /* ty=Tensor[(144), bool] */;
    %140 = reshape(%139, newshape=[1, 144]) /* ty=Tensor[(1, 144), bool] */;
    %141 = @func_3676(%140) /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 6), uint64], Tensor[(1, 144), bool]) */;
    %142 = acosh(%138) /* ty=Tensor[(13, 16, 13), float64] */;
    %143 = %141.2;
    (%142, %143, %var_4799)
  };
  %144(%var_4803, %var_4804) /* ty=(Tensor[(13, 16, 13), float64], Tensor[(1, 144), bool], Tensor[(144), bool]) */
}

def @func_1254(%var_1245: Tensor[(3, 8, 16), float32]) -> (Tensor[(3, 8, 16), bool],) {
  %145 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %146 = %145.1;
  %147 = cast(%var_1245, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %151 = logical_and(%149, %150) /* ty=Tensor[(3, 8, 16), bool] */;
  (%151,)
}

def @func_4517(%var_4515: Tensor[(336), float32], %var_4516: Tensor[(1344), uint16]) -> (Tensor[(3, 8, 16), uint16], Tensor[(12, 14, 8), uint16], Tensor[(336), float32], Tensor[(1344), uint16], Tensor[(3, 8, 16), int32], Tensor[(3, 8, ?), bool]) {
  %162 = fn (%var_4493: Tensor[(336), float32], %var_4494: Tensor[(1344), uint16]) -> (Tensor[(3, 8, 16), uint16], Tensor[(12, 14, 8), uint16], Tensor[(336), float32], Tensor[(1344), uint16], Tensor[(3, 8, 16), int32], Tensor[(3, 8, ?), bool]) {
    %152 = cast(%var_4493, dtype="float32") /* ty=Tensor[(336), float32] */;
    %153 = cast(%var_4494, dtype="uint16") /* ty=Tensor[(1344), uint16] */;
    %154 = reshape(%152, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), float32] */;
    %155 = reshape(%153, newshape=[1344]) /* ty=Tensor[(1344), uint16] */;
    %156 = @func_1639(%154, %155) /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 14), bool], Tensor[(12, 14, 8), uint16], Tensor[(1344), uint16]) */;
    %157 = @func_3660() /* ty=(Tensor[(3, 8, 16), int32],) */;
    %158 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
    %159 = %156.2;
    %160 = %157.0;
    %161 = @func_2292() /* ty=Tensor[(3, 8, ?), bool] */;
    (%158, %159, %var_4493, %var_4494, %160, %161)
  };
  %162(%var_4515, %var_4516) /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(12, 14, 8), uint16], Tensor[(336), float32], Tensor[(1344), uint16], Tensor[(3, 8, 16), int32], Tensor[(3, 8, ?), bool]) */
}

def @func_3956(%var_3954: Tensor[(8, 5, 16), float32]) -> (Tensor[(8, 5, 16), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, ?), float32]) {
  @func_3953(%var_3954) /* ty=(Tensor[(8, 5, 16), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, ?), float32]) */
}

def @func_4823() -> Tensor[(3, 8, 16), uint16] {
  @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_1257(%var_1255: Tensor[(3, 8, 16), float32]) -> (Tensor[(3, 8, 16), bool],) {
  @func_1254(%var_1255) /* ty=(Tensor[(3, 8, 16), bool],) */
}

def @func_3521() -> Tensor[(3, 8, 16), uint16] {
  @func_3519() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_6893() -> (Tensor[(3, 8, 9), uint32], Tensor[(3, 8, ?), uint16]) {
  %167 = fn () -> (Tensor[(3, 8, 9), uint32], Tensor[(3, 8, ?), uint16]) {
    %163 = @func_6002() /* ty=(Tensor[(3, 8, 9), uint32],) */;
    %164 = @func_3636() /* ty=(Tensor[(3, 8, 9), uint32], Tensor[(3, 8, ?), uint16]) */;
    %165 = %163.0;
    %166 = %164.1;
    (%165, %166)
  };
  %167() /* ty=(Tensor[(3, 8, 9), uint32], Tensor[(3, 8, ?), uint16]) */
}

def @func_5277() -> (Tensor[(3, 8, ?), bool],) {
  @func_5275() /* ty=(Tensor[(3, 8, ?), bool],) */
}

def @func_4235() -> Tensor[(3, 8, ?), bool] {
  %169 = fn () -> Tensor[(3, 8, ?), bool] {
    %168 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %168.0
  };
  %169() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_7436() -> Tensor[(3, 8, ?), bool] {
  %170 = @func_2123() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %170.0
}

def @func_1000(%var_978: Tensor[(3, 8, 6), bool]) -> (Tensor[(3, 8, 6), uint64], Tensor[(3, 8, ?), bool]) {
  %171 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %172 = cast(%171, dtype="uint64") /* ty=Tensor[(3, 8, ?), uint64] */;
  %173 = cast(%var_978, dtype="uint64") /* ty=Tensor[(3, 8, 6), uint64] */;
  %174 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %175 = subtract(%172, %173) /* ty=Tensor[(3, 8, 6), uint64] */;
  %176 = %174.3;
  (%175, %176)
}

def @func_4159() -> (Tensor[(11, 5, 4), int32], Tensor[(3, 8, 16), float32]) {
  %182 = fn () -> (Tensor[(11, 5, 4), int32], Tensor[(3, 8, 16), float32]) {
    %177 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 5, 4), int32] */, dtype="int32") /* ty=Tensor[(1, 5, 4), int32] */;
    %178 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 5, 4), int32] */, dtype="int32") /* ty=Tensor[(11, 5, 4), int32] */;
    %179 = @func_2356() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
    %180 = left_shift(%177, %178) /* ty=Tensor[(11, 5, 4), int32] */;
    %181 = %179.1;
    (%180, %181)
  };
  %182() /* ty=(Tensor[(11, 5, 4), int32], Tensor[(3, 8, 16), float32]) */
}

def @func_5815() -> (Tensor[(3, 8, ?), int32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) {
  %183 = @func_2292() /* ty=Tensor[(3, 8, ?), bool] */;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %185 = erf(%184) /* ty=Tensor[(3, 8, ?), float32] */;
  %186 = cast(%185, dtype="int32") /* ty=Tensor[(3, 8, ?), int32] */;
  %187 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%183, dtype="int32") /* ty=Tensor[(3, 8, ?), int32] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %190 = @func_791() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %191 = bitwise_or(%188, %189) /* ty=Tensor[(3, 8, ?), int32] */;
  %192 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %193 = %190.0;
  (%191, %192, %193)
}

def @func_6953() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 9), uint32], Tensor[(3, 8, 16), float32], Tensor[(3, 10, 12), float32]) {
  @func_6951() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 9), uint32], Tensor[(3, 8, 16), float32], Tensor[(3, 10, 12), float32]) */
}

def @func_3838(%var_3836: Tensor[(3, 8, 5), bool]) -> (Tensor[(3, 8, 5), uint8],) {
  @func_3835(%var_3836) /* ty=(Tensor[(3, 8, 5), uint8],) */
}

def @func_6447() -> Tensor[(3, 8, ?), float64] {
  @func_6445() /* ty=Tensor[(3, 8, ?), float64] */
}

def @func_282() -> Tensor[(3, 8, ?), bool] {
  %194 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %194.1
}

def @func_2220(%var_2218: Tensor[(6, 6, 15), float32], %var_2219: Tensor[(6, 6, 15), float32]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(6, 6, 15), bool]) {
  @func_2216(%var_2218, %var_2219) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(6, 6, 15), bool]) */
}

def @func_2534() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(4, 36), bool]) {
  @func_2532() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(4, 36), bool]) */
}

def @func_1003(%var_1001: Tensor[(3, 8, 6), bool]) -> (Tensor[(3, 8, 6), uint64], Tensor[(3, 8, ?), bool]) {
  @func_1000(%var_1001) /* ty=(Tensor[(3, 8, 6), uint64], Tensor[(3, 8, ?), bool]) */
}

def @func_3519() -> Tensor[(3, 8, 16), uint16] {
  @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_3735() -> Tensor[(3, 8, 16), uint16] {
  @func_3733() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_5960(%var_5933: uint8) -> (Tensor[(3, 8, ?), bool], Tensor[(144), bool], Tensor[(132, 2), float32], Tensor[(3, 8, ?), bool], Tensor[(7, 7, 15), uint8], uint8, Tensor[(49, 15), uint8], Tensor[(11, 5, 4), int32]) {
  %195 = @func_5490() /* ty=(Tensor[(3, 8, 16), uint8], Tensor[(3, 8, 16), uint16], Tensor[(132, 2), float32], Tensor[(3, 8, 16), float32], Tensor[(144), bool]) */;
  %196 = @func_5490() /* ty=(Tensor[(3, 8, 16), uint8], Tensor[(3, 8, 16), uint16], Tensor[(132, 2), float32], Tensor[(3, 8, 16), float32], Tensor[(144), bool]) */;
  %197 = @func_5275() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %198 = cast(%var_5933, dtype="uint8") /* ty=uint8 */;
  %199 = cast(meta[relay.Constant][8] /* ty=Tensor[(49, 15), uint8] */, dtype="uint8") /* ty=Tensor[(49, 15), uint8] */;
  %200 = reshape(%198, newshape=[]) /* ty=uint8 */;
  %201 = reshape(%199, newshape=[7, 7, 15]) /* ty=Tensor[(7, 7, 15), uint8] */;
  %202 = @func_3164() /* ty=Tensor[(3, 8, ?), bool] */;
  %203 = %195.4;
  %204 = %196.2;
  %205 = %197.0;
  %206 = @func_4894(%200, %201) /* ty=Tensor[(7, 7, 15), uint8] */;
  %207 = @func_5616() /* ty=Tensor[(11, 5, 4), int32] */;
  (%202, %203, %204, %205, %206, %var_5933, meta[relay.Constant][8] /* ty=Tensor[(49, 15), uint8] */, %207)
}

def @func_1639(%var_1627: Tensor[(3, 8, 14), float32], %var_1634: Tensor[(1344), uint16]) -> (Tensor[(3, 8, ?), float32], Tensor[(3, 8, 14), bool], Tensor[(12, 14, 8), uint16], Tensor[(1344), uint16]) {
  %208 = @func_1100() /* ty=Tensor[(3, 8, ?), float32] */;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %210 = log10(%209) /* ty=Tensor[(3, 8, ?), float32] */;
  %211 = cast(%208, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%210, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %215 = floor_divide(%213, %214) /* ty=Tensor[(3, 8, ?), float64] */;
  %216 = cast(%208, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%215, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %220 = cast(%208, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %221 = cast(%var_1627, dtype="bool") /* ty=Tensor[(3, 8, 14), bool] */;
  %222 = cast(%var_1634, dtype="uint16") /* ty=Tensor[(1344), uint16] */;
  %223 = cast(%var_1634, dtype="uint16") /* ty=Tensor[(1344), uint16] */;
  %224 = reshape(%222, newshape=[12, 14, 8]) /* ty=Tensor[(12, 14, 8), uint16] */;
  %225 = reshape(%223, newshape=[12, 14, 8]) /* ty=Tensor[(12, 14, 8), uint16] */;
  %226 = @func_1058(%224, %225) /* ty=(Tensor[(12, 14, 8), uint16], Tensor[(3, 8, 16), float32], Tensor[(12, 14, 8), float64], Tensor[(3, 8, ?), bool]) */;
  %227 = maximum(%218, %219) /* ty=Tensor[(3, 8, ?), float32] */;
  %228 = less(%220, %221) /* ty=Tensor[(3, 8, 14), bool] */;
  %229 = %226.0;
  (%227, %228, %229, %var_1634)
}

def @func_3977() -> (Tensor[(3, 8, 16), uint16],) {
  %230 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%230,)
}

def @func_6725() -> (Tensor[(3, 8, 16), float64],) {
  %233 = fn () -> (Tensor[(3, 8, 16), float64],) {
    %231 = @func_1823() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
    %232 = %231.1;
    (%232,)
  };
  %233() /* ty=(Tensor[(3, 8, 16), float64],) */
}

def @func_6951() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 9), uint32], Tensor[(3, 8, 16), float32], Tensor[(3, 10, 12), float32]) {
  %234 = @func_6002() /* ty=(Tensor[(3, 8, 9), uint32],) */;
  %235 = @func_1749() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %236 = @func_1435() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 10, 12), float32], Tensor[(30), float32]) */;
  %237 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
  %238 = %234.0;
  %239 = %235.1;
  %240 = %236.1;
  (%237, %238, %239, %240)
}

def @func_2624() -> (Tensor[(3, 8, ?), bool],) {
  @func_2622() /* ty=(Tensor[(3, 8, ?), bool],) */
}

def @func_5249() -> Tensor[(3, 8, ?), float32] {
  @func_5247() /* ty=Tensor[(3, 8, ?), float32] */
}

def @func_2875() -> Tensor[(3, 8, 16), float64] {
  @func_2873() /* ty=Tensor[(3, 8, 16), float64] */
}

def @func_3953(%var_3889: Tensor[(8, 5, 16), float32]) -> (Tensor[(8, 5, 16), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, ?), float32]) {
  %241 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %242 = cast(%var_3889, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
  %243 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %244 = reshape(%243, newshape=[2, 8, 8]) /* ty=Tensor[(2, 8, 8), float32] */;
  %245 = @func_1264(%244) /* ty=(Tensor[(2, 8, 8), float32],) */;
  %246 = @func_1100() /* ty=Tensor[(3, 8, ?), float32] */;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %248 = log2(%247) /* ty=Tensor[(3, 8, ?), float64] */;
  %249 = cast(%246, dtype="int16") /* ty=Tensor[(3, 8, ?), int16] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%248, dtype="int16") /* ty=Tensor[(3, 8, ?), int16] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %253 = logical_xor(%251, %252) /* ty=Tensor[(3, 8, ?), int16] */;
  %254 = cast(%246, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %255 = shape_of(%253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%253, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %258 = floor_divide(%241, %242) /* ty=Tensor[(8, 5, 16), float32] */;
  %259 = %245.0;
  %260 = mod(%256, %257) /* ty=Tensor[(3, 8, ?), float32] */;
  (%258, %259, %260)
}

def @func_3733() -> Tensor[(3, 8, 16), uint16] {
  %261 = @func_2828() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), uint16]) */;
  %261.3
}

def @func_7346(%var_7329: Tensor[(2400), uint64]) -> (Tensor[(3, 8, 8), int8], Tensor[(2400), uint64], Tensor[(10, 15, 16), float64]) {
  %262 = @func_6445() /* ty=Tensor[(3, 8, ?), float64] */;
  %263 = cast(%262, dtype="int8") /* ty=Tensor[(3, 8, ?), int8] */;
  %264 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 8, 8), float64] */, dtype="int8") /* ty=Tensor[(3, 8, 8), int8] */;
  %265 = cast(%var_7329, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %266 = cast(%var_7329, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %267 = reshape(%265, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), uint64] */;
  %268 = reshape(%266, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), uint64] */;
  %269 = @func_3342(%267, %268) /* ty=(Tensor[(10, 15, 16), uint64], Tensor[(3, 8, 16), float32]) */;
  %270 = %269.0;
  %271 = cast(%270, dtype="float64") /* ty=Tensor[(10, 15, 16), float64] */;
  %272 = right_shift(%263, %264) /* ty=Tensor[(3, 8, 8), int8] */;
  %273 = sin(%271) /* ty=Tensor[(10, 15, 16), float64] */;
  (%272, %var_7329, %273)
}

def @func_7349(%var_7347: Tensor[(2400), uint64]) -> (Tensor[(3, 8, 8), int8], Tensor[(2400), uint64], Tensor[(10, 15, 16), float64]) {
  @func_7346(%var_7347) /* ty=(Tensor[(3, 8, 8), int8], Tensor[(2400), uint64], Tensor[(10, 15, 16), float64]) */
}

def @func_5492() -> (Tensor[(3, 8, 16), uint8], Tensor[(3, 8, 16), uint16], Tensor[(132, 2), float32], Tensor[(3, 8, 16), float32], Tensor[(144), bool]) {
  @func_5490() /* ty=(Tensor[(3, 8, 16), uint8], Tensor[(3, 8, 16), uint16], Tensor[(132, 2), float32], Tensor[(3, 8, 16), float32], Tensor[(144), bool]) */
}

def @func_7404(%var_7402: Tensor[(5, 10, 14), float32]) -> (Tensor[(5, 10, 14), float32],) {
  @func_7401(%var_7402) /* ty=(Tensor[(5, 10, 14), float32],) */
}

def @func_5437() -> (Tensor[(3, 8, ?), float64],) {
  %276 = fn () -> (Tensor[(3, 8, ?), float64],) {
    %274 = @func_5415() /* ty=(Tensor[(4, 36), float64], Tensor[(3, 8, ?), float64], Tensor[(3, 8, ?), float64]) */;
    %275 = %274.2;
    (%275,)
  };
  %276() /* ty=(Tensor[(3, 8, ?), float64],) */
}

def @func_6478() -> (Tensor[(3, 8, 16), float64], Tensor[(3, 8, 16), uint16]) {
  %279 = fn () -> (Tensor[(3, 8, 16), float64], Tensor[(3, 8, 16), uint16]) {
    %277 = @func_2873() /* ty=Tensor[(3, 8, 16), float64] */;
    %278 = @func_3733() /* ty=Tensor[(3, 8, 16), uint16] */;
    (%277, %278)
  };
  %279() /* ty=(Tensor[(3, 8, 16), float64], Tensor[(3, 8, 16), uint16]) */
}

def @func_2829() -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), uint16]) {
  %287 = fn () -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), uint16]) {
    %280 = @func_2356() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
    %281 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
    %282 = @func_1940() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
    %283 = %280.1;
    %284 = %281.0;
    %285 = @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */;
    %286 = %282.0;
    (%283, %284, %285, %286)
  };
  %287() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), uint16]) */
}

def @func_2032() -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) {
  %292 = fn () -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) {
    %288 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
    %289 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %290 = %288.1;
    %291 = %289.1;
    (%290, %291)
  };
  %292() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */
}

def @func_5747() -> Tensor[(3, 8, 16), uint16] {
  @func_5745() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_4367(%var_4364: Tensor[(128, 1), float32], %var_4365: Tensor[(48, 2), bool], %var_4366: Tensor[(128, 2), float32]) -> (Tensor[(30), float32], Tensor[(3, 8, 4), float32], Tensor[(48, 2), bool], Tensor[(128, 2), bool], Tensor[(3, 8, 16), uint32], Tensor[(3, 8, 6), bool], Tensor[(1, 224), int32], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float32]) {
  %319 = fn (%var_4292: Tensor[(128, 1), float32], %var_4315: Tensor[(48, 2), bool], %var_4325: Tensor[(128, 2), float32]) -> (Tensor[(30), float32], Tensor[(3, 8, 4), float32], Tensor[(48, 2), bool], Tensor[(128, 2), bool], Tensor[(3, 8, 16), uint32], Tensor[(3, 8, 6), bool], Tensor[(1, 224), int32], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float32]) {
    %293 = cast(%var_4315, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
    %294 = reshape(%293, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), bool] */;
    %295 = @func_2794(%294) /* ty=(Tensor[(3, 8, 4), float32], Tensor[(3, 8, 4), bool]) */;
    %296 = cast(%var_4292, dtype="bool") /* ty=Tensor[(128, 1), bool] */;
    %297 = cast(%var_4325, dtype="bool") /* ty=Tensor[(128, 2), bool] */;
    %298 = cast(%var_4292, dtype="float32") /* ty=Tensor[(128, 1), float32] */;
    %299 = cast(meta[relay.Constant][11] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
    %300 = reshape(%298, newshape=[128]) /* ty=Tensor[(128), float32] */;
    %301 = reshape(%299, newshape=[30]) /* ty=Tensor[(30), float32] */;
    %302 = @func_1372(%300, %301) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(2, 8, 8), float32], Tensor[(128), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, 16), float32], Tensor[(30), float32]) */;
    %303 = %302.5;
    %304 = @func_3846() /* ty=Tensor[(3, 8, 16), uint16] */;
    %305 = cast(%304, dtype="uint32") /* ty=Tensor[(3, 8, 16), uint32] */;
    %306 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
    %307 = cast(%303, dtype="uint32") /* ty=Tensor[(3, 8, 16), uint32] */;
    %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %309 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 224), int32] */, dtype="int32") /* ty=Tensor[(1, 224), int32] */;
    %310 = reshape(%309, newshape=[224]) /* ty=Tensor[(224), int32] */;
    %311 = @func_2711(%310) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(13, 9, 14), float64], Tensor[(4, 8, 7), int32], Tensor[(224), int32], Tensor[(1638), float64], Tensor[(3, 8, 6), bool], Tensor[(144), bool]) */;
    %312 = @func_2356() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
    %313 = %295.0;
    %314 = less(%296, %297) /* ty=Tensor[(128, 2), bool] */;
    %315 = multiply(%307, %308) /* ty=Tensor[(3, 8, 16), uint32] */;
    %316 = %311.6;
    %317 = @func_3733() /* ty=Tensor[(3, 8, 16), uint16] */;
    %318 = %312.1;
    (meta[relay.Constant][11] /* ty=Tensor[(30), float32] */, %313, %var_4315, %314, %315, %316, meta[relay.Constant][12] /* ty=Tensor[(1, 224), int32] */, %317, %318)
  };
  %319(%var_4364, %var_4365, %var_4366) /* ty=(Tensor[(30), float32], Tensor[(3, 8, 4), float32], Tensor[(48, 2), bool], Tensor[(128, 2), bool], Tensor[(3, 8, 16), uint32], Tensor[(3, 8, 6), bool], Tensor[(1, 224), int32], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float32]) */
}

def @func_1825() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) {
  @func_1823() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */
}

def @func_609() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64]) {
  %320 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
  %321 = %320.0;
  %322 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %323 = %322.1;
  %324 = cast(%323, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %325 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%321, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %328 = cast(%323, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %329 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%321, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %332 = equal(%326, %327) /* ty=Tensor[(3, 8, ?), bool] */;
  %333 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %334 = divide(%330, %331) /* ty=Tensor[(3, 8, ?), float64] */;
  (%332, %333, %334)
}

def @func_7401(%var_7394: Tensor[(5, 10, 14), float32]) -> (Tensor[(5, 10, 14), float32],) {
  %335 = cast(%var_7394, dtype="float32") /* ty=Tensor[(5, 10, 14), float32] */;
  %336 = sigmoid(%335) /* ty=Tensor[(5, 10, 14), float32] */;
  (%336,)
}

def @func_4633(%var_4631: Tensor[(3, 8, 5), bool], %var_4632: Tensor[(462), float32]) -> (Tensor[(3, 8, 5), bool], Tensor[(3, 11, 14), float32], float32, Tensor[(462), float32], Tensor[(3, 8, 16), uint16]) {
  @func_4629(%var_4631, %var_4632) /* ty=(Tensor[(3, 8, 5), bool], Tensor[(3, 11, 14), float32], float32, Tensor[(462), float32], Tensor[(3, 8, 16), uint16]) */
}

def @func_3183() -> Tensor[(3, 8, ?), bool] {
  %337 = @func_2652() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %337.0
}

def @func_3637() -> (Tensor[(3, 8, 9), uint32], Tensor[(3, 8, ?), uint16]) {
  %348 = fn () -> (Tensor[(3, 8, 9), uint32], Tensor[(3, 8, ?), uint16]) {
    %338 = @func_3005() /* ty=(Tensor[(3, 8, 9), uint32],) */;
    %339 = @func_1442() /* ty=Tensor[(3, 8, ?), bool] */;
    %340 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %341 = %340.1;
    %342 = cast(%341, dtype="uint16") /* ty=Tensor[(3, 8, ?), uint16] */;
    %343 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %344 = cast(%339, dtype="uint16") /* ty=Tensor[(3, 8, ?), uint16] */;
    %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %346 = %338.0;
    %347 = bitwise_and(%344, %345) /* ty=Tensor[(3, 8, ?), uint16] */;
    (%346, %347)
  };
  %348() /* ty=(Tensor[(3, 8, 9), uint32], Tensor[(3, 8, ?), uint16]) */
}

def @func_5144() -> Tensor[(3, 8, 16), uint16] {
  %350 = fn () -> Tensor[(3, 8, 16), uint16] {
    %349 = @func_3977() /* ty=(Tensor[(3, 8, 16), uint16],) */;
    %349.0
  };
  %350() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_1435() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 10, 12), float32], Tensor[(30), float32]) {
  %351 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %352 = cast(meta[relay.Constant][13] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %353 = reshape(%352, newshape=[3, 10, 1]) /* ty=Tensor[(3, 10, 1), float32] */;
  %354 = @func_766(%353) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(3, 8, 16), float32]) */;
  %355 = %351.0;
  %356 = %354.0;
  (%355, %356, meta[relay.Constant][13] /* ty=Tensor[(30), float32] */)
}

def @func_5710() -> (Tensor[(3, 8, 16), uint16],) {
  %357 = @func_1823() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %358 = %357.0;
  (%358,)
}

def @func_4042() -> Tensor[(3, 8, ?), bool] {
  @func_2253() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_3235() -> Tensor[(3, 8, 16), uint16] {
  %359 = fn () -> Tensor[(3, 8, 16), uint16] {
    @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */
  };
  %359() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_4214(%var_4212: Tensor[(3, 8, 11), float32]) -> (Tensor[(3, 8, 11), float32], Tensor[(3, 8, 16), uint16]) {
  @func_4211(%var_4212) /* ty=(Tensor[(3, 8, 11), float32], Tensor[(3, 8, 16), uint16]) */
}

def @func_911(%var_910: Tensor[(3, 8, 6), bool]) -> Tensor[(3, 8, 6), bool] {
  %364 = fn (%var_900: Tensor[(3, 8, 6), bool]) -> Tensor[(3, 8, 6), bool] {
    %360 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %361 = %360.4;
    %362 = cast(%361, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
    %363 = cast(%var_900, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
    logical_or(%362, %363) /* ty=Tensor[(3, 8, 6), bool] */
  };
  %364(%var_910) /* ty=Tensor[(3, 8, 6), bool] */
}

def @func_4825() -> Tensor[(3, 8, 16), uint16] {
  @func_4823() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_6358(%var_6356: Tensor[(5, 1, 2), int64], %var_6357: Tensor[(5, 7, 2), int64]) -> (Tensor[(5, 7, 2), int64], Tensor[(5, 2, 2), int64], Tensor[(3, 8, ?), bool]) {
  %372 = fn (%var_6293: Tensor[(5, 1, 2), int64], %var_6294: Tensor[(5, 7, 2), int64]) -> (Tensor[(5, 7, 2), int64], Tensor[(5, 2, 2), int64], Tensor[(3, 8, ?), bool]) {
    %365 = cast(%var_6293, dtype="int64") /* ty=Tensor[(5, 1, 2), int64] */;
    %366 = cast(%var_6294, dtype="int64") /* ty=Tensor[(5, 7, 2), int64] */;
    %367 = cast(%var_6293, dtype="int64") /* ty=Tensor[(5, 1, 2), int64] */;
    %368 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 2, 2), int64] */, dtype="int64") /* ty=Tensor[(5, 2, 2), int64] */;
    %369 = right_shift(%365, %366) /* ty=Tensor[(5, 7, 2), int64] */;
    %370 = right_shift(%367, %368) /* ty=Tensor[(5, 2, 2), int64] */;
    %371 = @func_2292() /* ty=Tensor[(3, 8, ?), bool] */;
    (%369, %370, %371)
  };
  %372(%var_6356, %var_6357) /* ty=(Tensor[(5, 7, 2), int64], Tensor[(5, 2, 2), int64], Tensor[(3, 8, ?), bool]) */
}

def @func_5712() -> (Tensor[(3, 8, 16), uint16],) {
  @func_5710() /* ty=(Tensor[(3, 8, 16), uint16],) */
}

def @func_629() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) {
  @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */
}

def @func_2532() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(4, 36), bool]) {
  %373 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 36), bool] */, dtype="bool") /* ty=Tensor[(4, 36), bool] */;
  %374 = reshape(%373, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), bool] */;
  %375 = @func_1000(%374) /* ty=(Tensor[(3, 8, 6), uint64], Tensor[(3, 8, ?), bool]) */;
  %376 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
  %377 = %375.1;
  (%376, %377, meta[relay.Constant][15] /* ty=Tensor[(4, 36), bool] */)
}

def @func_3346(%var_3344: Tensor[(10, 15, 16), uint64], %var_3345: Tensor[(10, 15, 16), uint64]) -> (Tensor[(10, 15, 16), uint64], Tensor[(3, 8, 16), float32]) {
  @func_3342(%var_3344, %var_3345) /* ty=(Tensor[(10, 15, 16), uint64], Tensor[(3, 8, 16), float32]) */
}

def @func_1264(%var_1260: Tensor[(2, 8, 8), float32]) -> (Tensor[(2, 8, 8), float32],) {
  %378 = cast(%var_1260, dtype="float32") /* ty=Tensor[(2, 8, 8), float32] */;
  %379 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(2, 8, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 8, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 8, 8), float32] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %382 = divide(%380, %381) /* ty=Tensor[(2, 8, 8), float32] */;
  (%382,)
}

def @func_2471() -> (Tensor[(3, 8, ?), float32],) {
  %383 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %385 = atan(%384) /* ty=Tensor[(3, 8, ?), float32] */;
  (%385,)
}

def @func_4737(%var_4735: Tensor[(4, 36), bool]) -> (Tensor[(3, 8, 16), float32], Tensor[(384), float32], Tensor[(3, 8, ?), bool], Tensor[(4, 36), int32]) {
  @func_4734(%var_4735) /* ty=(Tensor[(3, 8, 16), float32], Tensor[(384), float32], Tensor[(3, 8, ?), bool], Tensor[(4, 36), int32]) */
}

def @func_6983() -> (Tensor[(3, 8, 16), uint16], Tensor[(6, 15, 16), float32], Tensor[(1440), float32]) {
  @func_6981() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(6, 15, 16), float32], Tensor[(1440), float32]) */
}

def @func_3007() -> (Tensor[(3, 8, 9), uint32],) {
  @func_3005() /* ty=(Tensor[(3, 8, 9), uint32],) */
}

def @func_6795() -> (Tensor[(3, 8, 16), uint16],) {
  @func_6793() /* ty=(Tensor[(3, 8, 16), uint16],) */
}

def @func_2399() -> (Tensor[(3, 8, ?), bool],) {
  @func_2397() /* ty=(Tensor[(3, 8, ?), bool],) */
}

def @func_7438() -> Tensor[(3, 8, ?), bool] {
  @func_7436() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_7172() -> Tensor[(3, 8, ?), int64] {
  @func_7170() /* ty=Tensor[(3, 8, ?), int64] */
}

def @func_6599() -> (Tensor[(3, 8, 16), uint16],) {
  @func_6597() /* ty=(Tensor[(3, 8, 16), uint16],) */
}

def @func_3746() -> (Tensor[(4, 36), bool],) {
  @func_3744() /* ty=(Tensor[(4, 36), bool],) */
}

def @func_6767() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), float32]) {
  %390 = fn () -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), float32]) {
    %386 = @func_3977() /* ty=(Tensor[(3, 8, 16), uint16],) */;
    %387 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
    %388 = %386.0;
    %389 = %387.0;
    (%388, %389)
  };
  %390() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), float32]) */
}

def @func_7375(%var_7356: Tensor[(14, 13, 3), uint16], %var_7357: Tensor[(14, 13, 3), uint16]) -> (Tensor[(3, 8, 16), float32], Tensor[(14, 13, 3), float64]) {
  %391 = cast(%var_7357, dtype="uint16") /* ty=Tensor[(14, 13, 3), uint16] */;
  %392 = shape_of(%var_7356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_7356, dtype="uint16") /* ty=Tensor[(14, 13, 3), uint16] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %395 = left_shift(%393, %394) /* ty=Tensor[(14, 13, 3), uint16] */;
  %396 = cast(%395, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %397 = @func_6267() /* ty=Tensor[(3, 8, 16), float32] */;
  %398 = asinh(%396) /* ty=Tensor[(14, 13, 3), float64] */;
  (%397, %398)
}

def @func_2654() -> (Tensor[(3, 8, ?), bool],) {
  @func_2652() /* ty=(Tensor[(3, 8, ?), bool],) */
}

def @func_769(%var_767: Tensor[(3, 10, 1), float32]) -> (Tensor[(3, 10, 12), float32], Tensor[(3, 8, 16), float32]) {
  @func_766(%var_767) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(3, 8, 16), float32]) */
}

def @func_7170() -> Tensor[(3, 8, ?), int64] {
  %399 = @func_2471() /* ty=(Tensor[(3, 8, ?), float32],) */;
  %400 = %399.0;
  %401 = @func_6643() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16]) */;
  %402 = %401.0;
  %403 = cast(%402, dtype="int64") /* ty=Tensor[(3, 8, ?), int64] */;
  %404 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%400, dtype="int64") /* ty=Tensor[(3, 8, ?), int64] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%405, %406) /* ty=Tensor[(3, 8, ?), int64] */
}

def @func_7292() -> Tensor[(3, 8, ?), bool] {
  %407 = @func_791() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %407.1
}

def @func_2576() -> Tensor[(3, 8, ?), bool] {
  @func_2574() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_1751() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) {
  @func_1749() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */
}

def @func_2389(%var_2376: Tensor[(3, 8, 11), float32]) -> (Tensor[(3, 8, 11), bool], Tensor[(3, 8, 16), uint16]) {
  %408 = @func_1100() /* ty=Tensor[(3, 8, ?), float32] */;
  %409 = cast(%408, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %410 = cast(%var_2376, dtype="bool") /* ty=Tensor[(3, 8, 11), bool] */;
  %411 = not_equal(%409, %410) /* ty=Tensor[(3, 8, 11), bool] */;
  %412 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%411, %412)
}

def @func_3285(%var_3266: Tensor[(224), int32]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), float32], Tensor[(4, 8, 7), int32], Tensor[(224), int32]) {
  %413 = @func_2031() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
  %414 = @func_2253() /* ty=Tensor[(3, 8, ?), bool] */;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %416 = acosh(%415) /* ty=Tensor[(3, 8, ?), float32] */;
  %417 = cast(%416, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %418 = sigmoid(%417) /* ty=Tensor[(3, 8, ?), float32] */;
  %419 = cast(%414, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%418, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %423 = floor_mod(%421, %422) /* ty=Tensor[(3, 8, ?), float32] */;
  %424 = cast(%423, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %425 = cast(%var_3266, dtype="int32") /* ty=Tensor[(224), int32] */;
  %426 = reshape(%425, newshape=[224]) /* ty=Tensor[(224), int32] */;
  %427 = @func_2711(%426) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(13, 9, 14), float64], Tensor[(4, 8, 7), int32], Tensor[(224), int32], Tensor[(1638), float64], Tensor[(3, 8, 6), bool], Tensor[(144), bool]) */;
  %428 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %429 = %413.0;
  %430 = tan(%424) /* ty=Tensor[(3, 8, ?), float32] */;
  %431 = %427.3;
  (%428, %429, %430, %431, %var_3266)
}

def @func_1875(%var_1873: Tensor[(4, 8, 7), int32], %var_1874: Tensor[(384), float32]) -> (Tensor[(4, 8, 7), int32], Tensor[(13, 9, 14), int64], Tensor[(3, 8, 16), bool], Tensor[(384), float32]) {
  %447 = fn (%var_1832: Tensor[(4, 8, 7), int32], %var_1860: Tensor[(384), float32]) -> (Tensor[(4, 8, 7), int32], Tensor[(13, 9, 14), int64], Tensor[(3, 8, 16), bool], Tensor[(384), float32]) {
    %432 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 8, 1), int32] */, dtype="int32") /* ty=Tensor[(4, 8, 1), int32] */;
    %433 = cast(%var_1832, dtype="int32") /* ty=Tensor[(4, 8, 7), int32] */;
    %434 = cast(meta[relay.Constant][18] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %435 = reshape(%434, newshape=[13, 9, 14]) /* ty=Tensor[(13, 9, 14), float64] */;
    %436 = @func_1780(%435) /* ty=Tensor[(13, 9, 14), float64] */;
    %437 = cast(meta[relay.Constant][18] /* ty=Tensor[(1638), float64] */, dtype="int64") /* ty=Tensor[(1638), int64] */;
    %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
    %439 = cast(%436, dtype="int64") /* ty=Tensor[(13, 9, 14), int64] */;
    %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %441 = cast(%var_1860, dtype="float32") /* ty=Tensor[(384), float32] */;
    %442 = reshape(%441, newshape=[3, 8, 16]) /* ty=Tensor[(3, 8, 16), float32] */;
    %443 = @func_1254(%442) /* ty=(Tensor[(3, 8, 16), bool],) */;
    %444 = bitwise_xor(%432, %433) /* ty=Tensor[(4, 8, 7), int32] */;
    %445 = bitwise_or(%439, %440) /* ty=Tensor[(13, 9, 14), int64] */;
    %446 = %443.0;
    (%444, %445, %446, %var_1860)
  };
  %447(%var_1873, %var_1874) /* ty=(Tensor[(4, 8, 7), int32], Tensor[(13, 9, 14), int64], Tensor[(3, 8, 16), bool], Tensor[(384), float32]) */
}

def @func_3662() -> (Tensor[(3, 8, 16), int32],) {
  @func_3660() /* ty=(Tensor[(3, 8, 16), int32],) */
}

def @func_2473() -> (Tensor[(3, 8, ?), float32],) {
  @func_2471() /* ty=(Tensor[(3, 8, ?), float32],) */
}

def @func_792() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) {
  %452 = fn () -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) {
    %448 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %449 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
    %450 = %448.3;
    %451 = %449.0;
    (%450, %451)
  };
  %452() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */
}

def @func_4572() -> (Tensor[(3, 8, ?), bool],) {
  @func_4570() /* ty=(Tensor[(3, 8, ?), bool],) */
}

def @func_1267(%var_1265: Tensor[(2, 8, 8), float32]) -> (Tensor[(2, 8, 8), float32],) {
  @func_1264(%var_1265) /* ty=(Tensor[(2, 8, 8), float32],) */
}

def @func_6061(%var_6059: Tensor[(3, 8, 16), float32]) -> (Tensor[(3, 8, 16), bool], Tensor[(3, 8, 4), float32], Tensor[(96), bool], Tensor[(3, 8, 16), float64]) {
  @func_6058(%var_6059) /* ty=(Tensor[(3, 8, 16), bool], Tensor[(3, 8, 4), float32], Tensor[(96), bool], Tensor[(3, 8, 16), float64]) */
}

def @func_6713() -> (Tensor[(11, 5, 4), int32], Tensor[(3, 8, 16), float32], Tensor[(7, 3, 1), float64], Tensor[(3, 8, ?), float64]) {
  %460 = fn () -> (Tensor[(11, 5, 4), int32], Tensor[(3, 8, 16), float32], Tensor[(7, 3, 1), float64], Tensor[(3, 8, ?), float64]) {
    %453 = @func_2356() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
    %454 = @func_3017() /* ty=(Tensor[(7, 3, 1), float64], Tensor[(3, 8, ?), bool]) */;
    %455 = @func_5415() /* ty=(Tensor[(4, 36), float64], Tensor[(3, 8, ?), float64], Tensor[(3, 8, ?), float64]) */;
    %456 = @func_5616() /* ty=Tensor[(11, 5, 4), int32] */;
    %457 = %453.0;
    %458 = %454.0;
    %459 = %455.2;
    (%456, %457, %458, %459)
  };
  %460() /* ty=(Tensor[(11, 5, 4), int32], Tensor[(3, 8, 16), float32], Tensor[(7, 3, 1), float64], Tensor[(3, 8, ?), float64]) */
}

def @func_1780(%var_1777: Tensor[(13, 9, 14), float64]) -> Tensor[(13, 9, 14), float64] {
  %461 = cast(%var_1777, dtype="float64") /* ty=Tensor[(13, 9, 14), float64] */;
  erf(%461) /* ty=Tensor[(13, 9, 14), float64] */
}

def @func_1437() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 10, 12), float32], Tensor[(30), float32]) {
  @func_1435() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 10, 12), float32], Tensor[(30), float32]) */
}

def @func_3744() -> (Tensor[(4, 36), bool],) {
  %462 = @func_2532() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(4, 36), bool]) */;
  %463 = %462.2;
  (%463,)
}

def @func_2873() -> Tensor[(3, 8, 16), float64] {
  %464 = @func_1940() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %464.1
}

def @func_6793() -> (Tensor[(3, 8, 16), uint16],) {
  %465 = @func_6766() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), float32]) */;
  %466 = %465.0;
  (%466,)
}

def @func_2794(%var_2758: Tensor[(3, 8, 4), bool]) -> (Tensor[(3, 8, 4), float32], Tensor[(3, 8, 4), bool]) {
  %467 = @func_2397() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %468 = %467.0;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %470 = cast(%var_2758, dtype="float32") /* ty=Tensor[(3, 8, 4), float32] */;
  %471 = cast(%var_2758, dtype="bool") /* ty=Tensor[(3, 8, 4), bool] */;
  %472 = cast(%468, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %473 = mod(%469, %470) /* ty=Tensor[(3, 8, 4), float32] */;
  %474 = greater(%471, %472) /* ty=Tensor[(3, 8, 4), bool] */;
  (%473, %474)
}

def @func_5216(%var_5215: Tensor[(10, 4, 8), uint64]) -> (Tensor[(10, 4, 8), bool], Tensor[(3, 8, 16), float64], Tensor[(3, 8, ?), bool]) {
  %484 = fn (%var_5175: Tensor[(10, 4, 8), uint64]) -> (Tensor[(10, 4, 8), bool], Tensor[(3, 8, 16), float64], Tensor[(3, 8, ?), bool]) {
    %475 = cast(%var_5175, dtype="bool") /* ty=Tensor[(10, 4, 8), bool] */;
    %476 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(10, 4, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 4, 8), uint64] */, dtype="bool") /* ty=Tensor[(10, 4, 8), bool] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %479 = @func_2873() /* ty=Tensor[(3, 8, 16), float64] */;
    %480 = cast(%479, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
    %481 = greater_equal(%477, %478) /* ty=Tensor[(10, 4, 8), bool] */;
    %482 = sin(%480) /* ty=Tensor[(3, 8, 16), float64] */;
    %483 = @func_4234() /* ty=Tensor[(3, 8, ?), bool] */;
    (%481, %482, %483)
  };
  %484(%var_5215) /* ty=(Tensor[(10, 4, 8), bool], Tensor[(3, 8, 16), float64], Tensor[(3, 8, ?), bool]) */
}

def @func_2273() -> Tensor[(3, 8, 16), uint16] {
  @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_4074(%var_4072: int32, %var_4073: Tensor[(9, 14, 10), int32]) -> (Tensor[(9, 14, 10), int32], Tensor[(3, 8, ?), bool]) {
  %490 = fn (%var_4052: int32, %var_4053: Tensor[(9, 14, 10), int32]) -> (Tensor[(9, 14, 10), int32], Tensor[(3, 8, ?), bool]) {
    %485 = cast(%var_4052, dtype="int32") /* ty=int32 */;
    %486 = cast(%var_4053, dtype="int32") /* ty=Tensor[(9, 14, 10), int32] */;
    %487 = @func_609() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64]) */;
    %488 = minimum(%485, %486) /* ty=Tensor[(9, 14, 10), int32] */;
    %489 = %487.0;
    (%488, %489)
  };
  %490(%var_4072, %var_4073) /* ty=(Tensor[(9, 14, 10), int32], Tensor[(3, 8, ?), bool]) */
}

def @func_7294() -> Tensor[(3, 8, ?), bool] {
  @func_7292() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_3005() -> (Tensor[(3, 8, 9), uint32],) {
  %491 = @func_2292() /* ty=Tensor[(3, 8, ?), bool] */;
  %492 = cast(%491, dtype="uint32") /* ty=Tensor[(3, 8, ?), uint32] */;
  %493 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 8, 9), bool] */, dtype="uint32") /* ty=Tensor[(3, 8, 9), uint32] */;
  %494 = bitwise_and(%492, %493) /* ty=Tensor[(3, 8, 9), uint32] */;
  (%494,)
}

def @func_1128() -> Tensor[(3, 8, 16), uint16] {
  %503 = fn () -> Tensor[(3, 8, 16), uint16] {
    %495 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
    %496 = %495.1;
    %497 = cast(%496, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
    %498 = sigmoid(%497) /* ty=Tensor[(3, 8, 16), float64] */;
    %499 = cast(%498, dtype="uint16") /* ty=Tensor[(3, 8, 16), uint16] */;
    %500 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
    %501 = cast(%496, dtype="uint16") /* ty=Tensor[(3, 8, 16), uint16] */;
    %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    left_shift(%501, %502) /* ty=Tensor[(3, 8, 16), uint16] */
  };
  %503() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_6422() -> (Tensor[(3, 8, ?), float64],) {
  %506 = fn () -> (Tensor[(3, 8, ?), float64],) {
    %504 = @func_5436() /* ty=(Tensor[(3, 8, ?), float64],) */;
    %505 = %504.0;
    (%505,)
  };
  %506() /* ty=(Tensor[(3, 8, ?), float64],) */
}

def @func_4880(%var_4878: Tensor[(3, 8, 16), float32], %var_4879: Tensor[(10, 64), float32]) -> (Tensor[(15, 7, 1), float32], Tensor[(3, 8, 16), float64], Tensor[(3, 8, 11), float32], Tensor[(1, 264), float32], Tensor[(8, 5, 16), float32], Tensor[(10, 64), float32]) {
  %524 = fn (%var_4860: Tensor[(3, 8, 16), float32], %var_4872: Tensor[(10, 64), float32]) -> (Tensor[(15, 7, 1), float32], Tensor[(3, 8, 16), float64], Tensor[(3, 8, 11), float32], Tensor[(1, 264), float32], Tensor[(8, 5, 16), float32], Tensor[(10, 64), float32]) {
    %507 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 7, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
    %508 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
    %509 = %508.1;
    %510 = cast(%var_4860, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
    %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
    %512 = cast(%509, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
    %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %514 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 264), float32] */, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
    %515 = reshape(%514, newshape=[3, 8, 11]) /* ty=Tensor[(3, 8, 11), float32] */;
    %516 = @func_4211(%515) /* ty=(Tensor[(3, 8, 11), float32], Tensor[(3, 8, 16), uint16]) */;
    %517 = cast(%var_4872, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
    %518 = reshape(%517, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
    %519 = @func_3953(%518) /* ty=(Tensor[(8, 5, 16), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, ?), float32]) */;
    %520 = sqrt(%507) /* ty=Tensor[(15, 7, 1), float32] */;
    %521 = maximum(%512, %513) /* ty=Tensor[(3, 8, 16), float64] */;
    %522 = %516.0;
    %523 = %519.0;
    (%520, %521, %522, meta[relay.Constant][22] /* ty=Tensor[(1, 264), float32] */, %523, %var_4872)
  };
  %524(%var_4878, %var_4879) /* ty=(Tensor[(15, 7, 1), float32], Tensor[(3, 8, 16), float64], Tensor[(3, 8, 11), float32], Tensor[(1, 264), float32], Tensor[(8, 5, 16), float32], Tensor[(10, 64), float32]) */
}

def @func_5581(%var_5580: Tensor[(11, 9, 8), int32]) -> (Tensor[(11, 9, 8), int32], Tensor[(11, 9, 8), float32], Tensor[(11, 9, 8), float32], Tensor[(3, 8, 5), uint8], Tensor[(6, 20), bool], Tensor[(3, 8, ?), float32]) {
  %540 = fn (%var_5552: Tensor[(11, 9, 8), int32]) -> (Tensor[(11, 9, 8), int32], Tensor[(11, 9, 8), float32], Tensor[(11, 9, 8), float32], Tensor[(3, 8, 5), uint8], Tensor[(6, 20), bool], Tensor[(3, 8, ?), float32]) {
    %525 = cast(%var_5552, dtype="int32") /* ty=Tensor[(11, 9, 8), int32] */;
    %526 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(11, 9, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %527 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 9, 8), int32] */, dtype="int32") /* ty=Tensor[(11, 9, 8), int32] */;
    %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %529 = cast(%var_5552, dtype="float32") /* ty=Tensor[(11, 9, 8), float32] */;
    %530 = cast(%var_5552, dtype="float32") /* ty=Tensor[(11, 9, 8), float32] */;
    %531 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 20), bool] */, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
    %532 = reshape(%531, newshape=[3, 8, 5]) /* ty=Tensor[(3, 8, 5), bool] */;
    %533 = @func_3835(%532) /* ty=(Tensor[(3, 8, 5), uint8],) */;
    %534 = @func_2471() /* ty=(Tensor[(3, 8, ?), float32],) */;
    %535 = minimum(%527, %528) /* ty=Tensor[(11, 9, 8), int32] */;
    %536 = log(%529) /* ty=Tensor[(11, 9, 8), float32] */;
    %537 = acosh(%530) /* ty=Tensor[(11, 9, 8), float32] */;
    %538 = %533.0;
    %539 = %534.0;
    (%535, %536, %537, %538, meta[relay.Constant][24] /* ty=Tensor[(6, 20), bool] */, %539)
  };
  %540(%var_5580) /* ty=(Tensor[(11, 9, 8), int32], Tensor[(11, 9, 8), float32], Tensor[(11, 9, 8), float32], Tensor[(3, 8, 5), uint8], Tensor[(6, 20), bool], Tensor[(3, 8, ?), float32]) */
}

def @func_6445() -> Tensor[(3, 8, ?), float64] {
  %541 = @func_2532() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(4, 36), bool]) */;
  %542 = %541.1;
  %543 = cast(%542, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  cosh(%543) /* ty=Tensor[(3, 8, ?), float64] */
}

def @func_4035(%var_4033: Tensor[(11, 12, 3), float64], %var_4034: Tensor[(640), float32]) -> (Tensor[(11, 12, 3), float64], Tensor[(3, 8, ?), float32], Tensor[(640), float32], Tensor[(3, 8, 16), uint16]) {
  %551 = fn (%var_4003: Tensor[(11, 12, 3), float64], %var_4009: Tensor[(640), float32]) -> (Tensor[(11, 12, 3), float64], Tensor[(3, 8, ?), float32], Tensor[(640), float32], Tensor[(3, 8, 16), uint16]) {
    %544 = cast(%var_4003, dtype="float64") /* ty=Tensor[(11, 12, 3), float64] */;
    %545 = cast(%var_4009, dtype="float32") /* ty=Tensor[(640), float32] */;
    %546 = reshape(%545, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
    %547 = @func_3953(%546) /* ty=(Tensor[(8, 5, 16), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, ?), float32]) */;
    %548 = tan(%544) /* ty=Tensor[(11, 12, 3), float64] */;
    %549 = %547.2;
    %550 = @func_1127() /* ty=Tensor[(3, 8, 16), uint16] */;
    (%548, %549, %var_4009, %550)
  };
  %551(%var_4033, %var_4034) /* ty=(Tensor[(11, 12, 3), float64], Tensor[(3, 8, ?), float32], Tensor[(640), float32], Tensor[(3, 8, 16), uint16]) */
}

def @func_6665() -> (Tensor[(3, 8, ?), bool],) {
  %553 = fn () -> (Tensor[(3, 8, ?), bool],) {
    %552 = @func_3183() /* ty=Tensor[(3, 8, ?), bool] */;
    (%552,)
  };
  %553() /* ty=(Tensor[(3, 8, ?), bool],) */
}

def @func_627() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) {
  %554 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %555 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %556 = %554.1;
  (%555, %556)
}

def @func_2271() -> Tensor[(3, 8, 16), uint16] {
  %557 = @func_1228() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64], Tensor[(12, 14, 8), uint16], Tensor[(1344), uint16]) */;
  %557.1
}

def @func_6186() -> Tensor[(30), float32] {
  %559 = fn () -> Tensor[(30), float32] {
    %558 = @func_1435() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 10, 12), float32], Tensor[(30), float32]) */;
    %558.2
  };
  %559() /* ty=Tensor[(30), float32] */
}

def @func_1442() -> Tensor[(3, 8, ?), bool] {
  %560 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %560.0
}

def @func_1749() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) {
  %561 = @func_1435() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 10, 12), float32], Tensor[(30), float32]) */;
  %562 = @func_1127() /* ty=Tensor[(3, 8, 16), uint16] */;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %564 = %561.0;
  %565 = asinh(%563) /* ty=Tensor[(3, 8, 16), float32] */;
  (%564, %565)
}

def @func_1941() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) {
  %571 = fn () -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) {
    %566 = @func_1823() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
    %567 = @func_1127() /* ty=Tensor[(3, 8, 16), uint16] */;
    %568 = cast(%567, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
    %569 = %566.0;
    %570 = acosh(%568) /* ty=Tensor[(3, 8, 16), float64] */;
    (%569, %570)
  };
  %571() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */
}

def @func_1823() -> (Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) {
  %572 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %573 = %572.1;
  %574 = cast(%573, dtype="float64") /* ty=Tensor[(3, 8, 16), float64] */;
  %575 = @func_1127() /* ty=Tensor[(3, 8, 16), uint16] */;
  %576 = cosh(%574) /* ty=Tensor[(3, 8, 16), float64] */;
  (%575, %576)
}

def @func_356() -> (Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) {
  @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */
}

def @func_1058(%var_1025: Tensor[(12, 14, 8), uint16], %var_1026: Tensor[(12, 14, 8), uint16]) -> (Tensor[(12, 14, 8), uint16], Tensor[(3, 8, 16), float32], Tensor[(12, 14, 8), float64], Tensor[(3, 8, ?), bool]) {
  %577 = cast(%var_1026, dtype="uint16") /* ty=Tensor[(12, 14, 8), uint16] */;
  %578 = shape_of(%var_1025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%var_1025, dtype="uint16") /* ty=Tensor[(12, 14, 8), uint16] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %581 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %582 = cast(%var_1026, dtype="float64") /* ty=Tensor[(12, 14, 8), float64] */;
  %583 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
  %584 = multiply(%579, %580) /* ty=Tensor[(12, 14, 8), uint16] */;
  %585 = %581.1;
  %586 = asin(%582) /* ty=Tensor[(12, 14, 8), float64] */;
  %587 = %583.0;
  (%584, %585, %586, %587)
}

def @func_6386() -> (Tensor[(11, 5, 4), int32],) {
  @func_6384() /* ty=(Tensor[(11, 5, 4), int32],) */
}

def @func_5247() -> Tensor[(3, 8, ?), float32] {
  %588 = @func_2123() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %589 = %588.0;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  rsqrt(%590) /* ty=Tensor[(3, 8, ?), float32] */
}

def @func_2923(%var_2921: Tensor[(15, 1, 13), float64], %var_2922: Tensor[(15, 3, 13), float64]) -> (Tensor[(15, 3, 13), float64], Tensor[(3, 8, 16), float64], Tensor[(3, 8, ?), bool], Tensor[(144), bool]) {
  @func_2919(%var_2921, %var_2922) /* ty=(Tensor[(15, 3, 13), float64], Tensor[(3, 8, 16), float64], Tensor[(3, 8, ?), bool], Tensor[(144), bool]) */
}

def @func_3679(%var_3677: Tensor[(1, 144), bool]) -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 6), uint64], Tensor[(1, 144), bool]) {
  @func_3676(%var_3677) /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 6), uint64], Tensor[(1, 144), bool]) */
}

def @func_3847() -> Tensor[(3, 8, 16), uint16] {
  %591 = fn () -> Tensor[(3, 8, 16), uint16] {
    @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */
  };
  %591() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_6259() -> (Tensor[(3, 8, ?), float32],) {
  %593 = fn () -> (Tensor[(3, 8, ?), float32],) {
    %592 = @func_1100() /* ty=Tensor[(3, 8, ?), float32] */;
    (%592,)
  };
  %593() /* ty=(Tensor[(3, 8, ?), float32],) */
}

def @func_354() -> (Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) {
  %594 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  %595 = cast(%594, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %596 = cast(%594, dtype="int64") /* ty=Tensor[(3, 8, ?), int64] */;
  %597 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 8, 16), bool] */, dtype="int64") /* ty=Tensor[(3, 8, 16), int64] */;
  %598 = minimum(%596, %597) /* ty=Tensor[(3, 8, 16), int64] */;
  %599 = cast(%598, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %600 = log(%599) /* ty=Tensor[(3, 8, 16), float32] */;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %602 = exp(%595) /* ty=Tensor[(3, 8, ?), float32] */;
  %603 = sinh(%601) /* ty=Tensor[(3, 8, 16), float32] */;
  (%602, %603)
}

def @func_1228() -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64], Tensor[(12, 14, 8), uint16], Tensor[(1344), uint16]) {
  %604 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %605 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
  %606 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
  %607 = %606.1;
  %608 = cast(%607, dtype="float64") /* ty=Tensor[(3, 8, ?), float64] */;
  %609 = cast(meta[relay.Constant][26] /* ty=Tensor[(1344), uint16] */, dtype="uint16") /* ty=Tensor[(1344), uint16] */;
  %610 = cast(meta[relay.Constant][26] /* ty=Tensor[(1344), uint16] */, dtype="uint16") /* ty=Tensor[(1344), uint16] */;
  %611 = reshape(%609, newshape=[12, 14, 8]) /* ty=Tensor[(12, 14, 8), uint16] */;
  %612 = reshape(%610, newshape=[12, 14, 8]) /* ty=Tensor[(12, 14, 8), uint16] */;
  %613 = @func_1058(%611, %612) /* ty=(Tensor[(12, 14, 8), uint16], Tensor[(3, 8, 16), float32], Tensor[(12, 14, 8), float64], Tensor[(3, 8, ?), bool]) */;
  %614 = %604.1;
  %615 = @func_1127() /* ty=Tensor[(3, 8, 16), uint16] */;
  %616 = %605.0;
  %617 = cos(%608) /* ty=Tensor[(3, 8, ?), float64] */;
  %618 = %613.0;
  (%614, %615, %616, %617, %618, meta[relay.Constant][26] /* ty=Tensor[(1344), uint16] */)
}

def @func_2110() -> Tensor[(3, 8, 16), uint16] {
  %620 = fn () -> Tensor[(3, 8, 16), uint16] {
    %619 = @func_1940() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
    %619.0
  };
  %620() /* ty=Tensor[(3, 8, 16), uint16] */
}

def @func_2622() -> (Tensor[(3, 8, ?), bool],) {
  %621 = @func_2574() /* ty=Tensor[(3, 8, ?), bool] */;
  (%621,)
}

def @func_4044() -> Tensor[(3, 8, ?), bool] {
  @func_4042() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_3979() -> (Tensor[(3, 8, 16), uint16],) {
  @func_3977() /* ty=(Tensor[(3, 8, 16), uint16],) */
}

def @func_5095(%var_5093: Tensor[(144), bool], %var_5094: Tensor[(4, 24), bool]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 6), uint64], Tensor[(144), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 4), float32], Tensor[(128), float32], Tensor[(4, 24), bool], Tensor[(256), float32], Tensor[(3, 8, 16), bool]) {
  @func_5091(%var_5093, %var_5094) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 6), uint64], Tensor[(144), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 4), float32], Tensor[(128), float32], Tensor[(4, 24), bool], Tensor[(256), float32], Tensor[(3, 8, 16), bool]) */
}

def @func_2602(%var_2601: Tensor[(3, 8, 5), float32]) -> Tensor[(3, 8, 5), int64] {
  %626 = fn (%var_2591: Tensor[(3, 8, 5), float32]) -> Tensor[(3, 8, 5), int64] {
    %622 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
    %623 = %622.1;
    %624 = cast(%623, dtype="int64") /* ty=Tensor[(3, 8, ?), int64] */;
    %625 = cast(%var_2591, dtype="int64") /* ty=Tensor[(3, 8, 5), int64] */;
    bitwise_xor(%624, %625) /* ty=Tensor[(3, 8, 5), int64] */
  };
  %626(%var_2601) /* ty=Tensor[(3, 8, 5), int64] */
}

def @func_7017(%var_7015: Tensor[(3, 8, 4), bool]) -> (Tensor[(3, 8, 4), bool], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16]) {
  @func_7014(%var_7015) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16]) */
}

def @func_5893() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) {
  %632 = fn () -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) {
    %627 = @func_791() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %628 = @func_1940() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
    %629 = %627.0;
    %630 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
    %631 = %628.1;
    (%629, %630, %631)
  };
  %632() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */
}

def @func_4537() -> Tensor[(4, 36), bool] {
  %633 = @func_3744() /* ty=(Tensor[(4, 36), bool],) */;
  %633.0
}

def @func_2358() -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) {
  @func_2356() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */
}

def @func_6644() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16]) {
  %636 = fn () -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16]) {
    %634 = @func_4234() /* ty=Tensor[(3, 8, ?), bool] */;
    %635 = @func_3234() /* ty=Tensor[(3, 8, 16), uint16] */;
    (%634, %635)
  };
  %636() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16]) */
}

def @func_516() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) {
  %646 = fn () -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) {
    %637 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %638 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
    %639 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
    %640 = @func_254() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %641 = %637.1;
    %642 = %638.1;
    %643 = %639.1;
    %644 = %640.1;
    %645 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
    (%641, %642, %643, %644, %645)
  };
  %646() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */
}

def @func_3185() -> Tensor[(3, 8, ?), bool] {
  @func_3183() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_5745() -> Tensor[(3, 8, 16), uint16] {
  %647 = @func_1940() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %647.0
}

def @func_3802(%var_3800: float32, %var_3801: Tensor[(3, 11, 14), float32]) -> (Tensor[(3, 11, 14), float32],) {
  %651 = fn (%var_3793: float32, %var_3794: Tensor[(3, 11, 14), float32]) -> (Tensor[(3, 11, 14), float32],) {
    %648 = cast(%var_3793, dtype="float32") /* ty=float32 */;
    %649 = cast(%var_3794, dtype="float32") /* ty=Tensor[(3, 11, 14), float32] */;
    %650 = floor_mod(%648, %649) /* ty=Tensor[(3, 11, 14), float32] */;
    (%650,)
  };
  %651(%var_3800, %var_3801) /* ty=(Tensor[(3, 11, 14), float32],) */
}

def @func_6981() -> (Tensor[(3, 8, 16), uint16], Tensor[(6, 15, 16), float32], Tensor[(1440), float32]) {
  %652 = cast(meta[relay.Constant][27] /* ty=Tensor[(1440), float32] */, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %653 = reshape(%652, newshape=[6, 15, 16]) /* ty=Tensor[(6, 15, 16), float32] */;
  %654 = @func_3699(%653) /* ty=(Tensor[(6, 15, 16), float32],) */;
  %655 = @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */;
  %656 = %654.0;
  (%655, %656, meta[relay.Constant][27] /* ty=Tensor[(1440), float32] */)
}

def @func_1372(%var_1343: Tensor[(128), float32], %var_1355: Tensor[(30), float32]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(2, 8, 8), float32], Tensor[(128), float32], Tensor[(2, 8, 8), float32], Tensor[(3, 8, 16), float32], Tensor[(30), float32]) {
  %657 = @func_609() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float64]) */;
  %658 = @func_820() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */;
  %659 = cast(%var_1343, dtype="float32") /* ty=Tensor[(128), float32] */;
  %660 = reshape(%659, newshape=[2, 8, 8]) /* ty=Tensor[(2, 8, 8), float32] */;
  %661 = @func_1264(%660) /* ty=(Tensor[(2, 8, 8), float32],) */;
  %662 = cast(%var_1343, dtype="float32") /* ty=Tensor[(128), float32] */;
  %663 = reshape(%662, newshape=[2, 8, 8]) /* ty=Tensor[(2, 8, 8), float32] */;
  %664 = @func_1264(%663) /* ty=(Tensor[(2, 8, 8), float32],) */;
  %665 = cast(%var_1355, dtype="float32") /* ty=Tensor[(30), float32] */;
  %666 = reshape(%665, newshape=[3, 10, 1]) /* ty=Tensor[(3, 10, 1), float32] */;
  %667 = @func_766(%666) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(3, 8, 16), float32]) */;
  %668 = %657.0;
  %669 = %658.0;
  %670 = %661.0;
  %671 = %664.0;
  %672 = %667.1;
  (%668, %669, %670, %var_1343, %671, %672, %var_1355)
}

def @func_2392(%var_2390: Tensor[(3, 8, 11), float32]) -> (Tensor[(3, 8, 11), bool], Tensor[(3, 8, 16), uint16]) {
  @func_2389(%var_2390) /* ty=(Tensor[(3, 8, 11), bool], Tensor[(3, 8, 16), uint16]) */
}

def @func_1101() -> Tensor[(3, 8, ?), float32] {
  %676 = fn () -> Tensor[(3, 8, ?), float32] {
    %673 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
    %674 = %673.0;
    %675 = cast(%674, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
    asin(%675) /* ty=Tensor[(3, 8, ?), float32] */
  };
  %676() /* ty=Tensor[(3, 8, ?), float32] */
}

def @func_6058(%var_6041: Tensor[(3, 8, 16), float32]) -> (Tensor[(3, 8, 16), bool], Tensor[(3, 8, 4), float32], Tensor[(96), bool], Tensor[(3, 8, 16), float64]) {
  %677 = @func_2031() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) */;
  %678 = %677.1;
  %679 = cast(%var_6041, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%678, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %683 = cast(meta[relay.Constant][28] /* ty=Tensor[(96), bool] */, dtype="bool") /* ty=Tensor[(96), bool] */;
  %684 = reshape(%683, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), bool] */;
  %685 = @func_2794(%684) /* ty=(Tensor[(3, 8, 4), float32], Tensor[(3, 8, 4), bool]) */;
  %686 = @func_1940() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %687 = less(%681, %682) /* ty=Tensor[(3, 8, 16), bool] */;
  %688 = %685.0;
  %689 = %686.1;
  (%687, %688, meta[relay.Constant][28] /* ty=Tensor[(96), bool] */, %689)
}

def @func_1444() -> Tensor[(3, 8, ?), bool] {
  @func_1442() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_4211(%var_4197: Tensor[(3, 8, 11), float32]) -> (Tensor[(3, 8, 11), float32], Tensor[(3, 8, 16), uint16]) {
  %690 = @func_2471() /* ty=(Tensor[(3, 8, ?), float32],) */;
  %691 = %690.0;
  %692 = cast(%691, dtype="float32") /* ty=Tensor[(3, 8, ?), float32] */;
  %693 = cast(%var_4197, dtype="float32") /* ty=Tensor[(3, 8, 11), float32] */;
  %694 = power(%692, %693) /* ty=Tensor[(3, 8, 11), float32] */;
  %695 = @func_3846() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%694, %695)
}

def @func_2652() -> (Tensor[(3, 8, ?), bool],) {
  %696 = @func_282() /* ty=Tensor[(3, 8, ?), bool] */;
  (%696,)
}

def @func_7014(%var_6989: Tensor[(3, 8, 4), bool]) -> (Tensor[(3, 8, 4), bool], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16]) {
  %697 = @func_1749() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %698 = %697.0;
  %699 = cast(%698, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %700 = cast(%var_6989, dtype="bool") /* ty=Tensor[(3, 8, 4), bool] */;
  %701 = @func_2828() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), uint16]) */;
  %702 = less_equal(%699, %700) /* ty=Tensor[(3, 8, 4), bool] */;
  %703 = @func_2574() /* ty=Tensor[(3, 8, ?), bool] */;
  %704 = %701.2;
  (%702, %703, %704)
}

def @func_821() -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) {
  %709 = fn () -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) {
    %705 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %706 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
    %707 = %705.4;
    %708 = %706.0;
    (%707, %708)
  };
  %709() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), float32]) */
}

def @func_4734(%var_4697: Tensor[(4, 36), bool]) -> (Tensor[(3, 8, 16), float32], Tensor[(384), float32], Tensor[(3, 8, ?), bool], Tensor[(4, 36), int32]) {
  %710 = cast(meta[relay.Constant][29] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %711 = reshape(%710, newshape=[3, 8, 16]) /* ty=Tensor[(3, 8, 16), float32] */;
  %712 = @func_3485(%711) /* ty=(Tensor[(3, 8, 16), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float64], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %713 = @func_2652() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %714 = @func_4537() /* ty=Tensor[(4, 36), bool] */;
  %715 = cast(%var_4697, dtype="bool") /* ty=Tensor[(4, 36), bool] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(2), int32] */;
  %717 = cast(%714, dtype="bool") /* ty=Tensor[(4, 36), bool] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %719 = logical_or(%717, %718) /* ty=Tensor[(4, 36), bool] */;
  %720 = cast(%var_4697, dtype="int32") /* ty=Tensor[(4, 36), int32] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(2), int32] */;
  %722 = cast(%719, dtype="int32") /* ty=Tensor[(4, 36), int32] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %724 = %712.1;
  %725 = %713.0;
  %726 = logical_xor(%722, %723) /* ty=Tensor[(4, 36), int32] */;
  (%724, meta[relay.Constant][29] /* ty=Tensor[(384), float32] */, %725, %726)
}

def @func_6136() -> (Tensor[(3, 8, ?), int16], Tensor[(3, 8, ?), bool]) {
  %736 = fn () -> (Tensor[(3, 8, ?), int16], Tensor[(3, 8, ?), bool]) {
    %727 = @func_2828() /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), uint16]) */;
    %728 = %727.1;
    %729 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 8, 1), bool] */, dtype="int16") /* ty=Tensor[(3, 8, 1), int16] */;
    %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
    %731 = cast(%728, dtype="int16") /* ty=Tensor[(3, 8, ?), int16] */;
    %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %733 = @func_5815() /* ty=(Tensor[(3, 8, ?), int32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %734 = left_shift(%731, %732) /* ty=Tensor[(3, 8, ?), int16] */;
    %735 = %733.1;
    (%734, %735)
  };
  %736() /* ty=(Tensor[(3, 8, ?), int16], Tensor[(3, 8, ?), bool]) */
}

def @main(%var_7523: Tensor[(15, 1, 11), float64]) -> (Tensor[(15, 12, 11), float64], Tensor[(15, 12, 11), int8]) {
  %737 = cast(%var_7523, dtype="float64") /* ty=Tensor[(15, 1, 11), float64] */;
  %738 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 12, 11), float64] */, dtype="float64") /* ty=Tensor[(15, 12, 11), float64] */;
  %739 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 12, 11), float64] */, dtype="int8") /* ty=Tensor[(15, 12, 11), int8] */;
  %740 = cast(%var_7523, dtype="int8") /* ty=Tensor[(15, 1, 11), int8] */;
  %741 = power(%737, %738) /* ty=Tensor[(15, 12, 11), float64] */;
  %742 = bitwise_xor(%739, %740) /* ty=Tensor[(15, 12, 11), int8] */;
  (%741, %742)
}

def @func_2714(%var_2712: Tensor[(224), int32]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(13, 9, 14), float64], Tensor[(4, 8, 7), int32], Tensor[(224), int32], Tensor[(1638), float64], Tensor[(3, 8, 6), bool], Tensor[(144), bool]) {
  @func_2711(%var_2712) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(13, 9, 14), float64], Tensor[(4, 8, 7), int32], Tensor[(224), int32], Tensor[(1638), float64], Tensor[(3, 8, 6), bool], Tensor[(144), bool]) */
}

def @func_2254() -> Tensor[(3, 8, ?), bool] {
  %744 = fn () -> Tensor[(3, 8, ?), bool] {
    %743 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
    %743.4
  };
  %744() /* ty=Tensor[(3, 8, ?), bool] */
}

def @func_5275() -> (Tensor[(3, 8, ?), bool],) {
  %745 = @func_2397() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %746 = %745.0;
  (%746,)
}

def @func_5091(%var_5058: Tensor[(144), bool], %var_5073: Tensor[(4, 24), bool]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 6), uint64], Tensor[(144), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 4), float32], Tensor[(128), float32], Tensor[(4, 24), bool], Tensor[(256), float32], Tensor[(3, 8, 16), bool]) {
  %747 = cast(%var_5058, dtype="bool") /* ty=Tensor[(144), bool] */;
  %748 = reshape(%747, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), bool] */;
  %749 = @func_1000(%748) /* ty=(Tensor[(3, 8, 6), uint64], Tensor[(3, 8, ?), bool]) */;
  %750 = cast(meta[relay.Constant][32] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %751 = cast(%var_5073, dtype="bool") /* ty=Tensor[(4, 24), bool] */;
  %752 = cast(meta[relay.Constant][33] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %753 = reshape(%750, newshape=[128, 1]) /* ty=Tensor[(128, 1), float32] */;
  %754 = reshape(%751, newshape=[48, 2]) /* ty=Tensor[(48, 2), bool] */;
  %755 = reshape(%752, newshape=[128, 2]) /* ty=Tensor[(128, 2), float32] */;
  %756 = @func_4363(%753, %754, %755) /* ty=(Tensor[(30), float32], Tensor[(3, 8, 4), float32], Tensor[(48, 2), bool], Tensor[(128, 2), bool], Tensor[(3, 8, 16), uint32], Tensor[(3, 8, 6), bool], Tensor[(1, 224), int32], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float32]) */;
  %757 = @func_3846() /* ty=Tensor[(3, 8, 16), uint16] */;
  %758 = cast(%757, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %759 = reshape(%758, newshape=[3, 8, 16]) /* ty=Tensor[(3, 8, 16), float32] */;
  %760 = @func_3485(%759) /* ty=(Tensor[(3, 8, 16), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float64], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
  %761 = @func_3164() /* ty=Tensor[(3, 8, ?), bool] */;
  %762 = %749.0;
  %763 = %756.1;
  %764 = %760.0;
  (%761, %762, %var_5058, %757, %763, meta[relay.Constant][32] /* ty=Tensor[(128), float32] */, %var_5073, meta[relay.Constant][33] /* ty=Tensor[(256), float32] */, %764)
}

def @func_5490() -> (Tensor[(3, 8, 16), uint8], Tensor[(3, 8, 16), uint16], Tensor[(132, 2), float32], Tensor[(3, 8, 16), float32], Tensor[(144), bool]) {
  %765 = @func_2271() /* ty=Tensor[(3, 8, 16), uint16] */;
  %766 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 8, 16), uint16] */, dtype="uint8") /* ty=Tensor[(3, 8, 16), uint8] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%765, dtype="uint8") /* ty=Tensor[(3, 8, 16), uint8] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %770 = cast(meta[relay.Constant][35] /* ty=Tensor[(132, 2), float32] */, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %771 = reshape(%770, newshape=[3, 8, 11]) /* ty=Tensor[(3, 8, 11), float32] */;
  %772 = @func_2389(%771) /* ty=(Tensor[(3, 8, 11), bool], Tensor[(3, 8, 16), uint16]) */;
  %773 = cast(meta[relay.Constant][36] /* ty=Tensor[(144), bool] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %774 = reshape(%773, newshape=[1, 144]) /* ty=Tensor[(1, 144), bool] */;
  %775 = @func_3676(%774) /* ty=(Tensor[(3, 8, 16), float32], Tensor[(3, 8, 6), uint64], Tensor[(1, 144), bool]) */;
  %776 = bitwise_or(%768, %769) /* ty=Tensor[(3, 8, 16), uint8] */;
  %777 = %772.1;
  %778 = %775.0;
  (%776, %777, meta[relay.Constant][35] /* ty=Tensor[(132, 2), float32] */, %778, meta[relay.Constant][36] /* ty=Tensor[(144), bool] */)
}

def @func_5662(%var_5660: Tensor[(144), bool], %var_5661: Tensor[(96), bool]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 6), uint64], Tensor[(144), bool], Tensor[(96), bool]) {
  %787 = fn (%var_5656: Tensor[(144), bool], %var_5657: Tensor[(96), bool]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 6), uint64], Tensor[(144), bool], Tensor[(96), bool]) {
    %779 = @func_2622() /* ty=(Tensor[(3, 8, ?), bool],) */;
    %780 = cast(%var_5656, dtype="bool") /* ty=Tensor[(144), bool] */;
    %781 = cast(%var_5657, dtype="bool") /* ty=Tensor[(96), bool] */;
    %782 = reshape(%780, newshape=[144]) /* ty=Tensor[(144), bool] */;
    %783 = reshape(%781, newshape=[4, 24]) /* ty=Tensor[(4, 24), bool] */;
    %784 = @func_5091(%782, %783) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 6), uint64], Tensor[(144), bool], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 4), float32], Tensor[(128), float32], Tensor[(4, 24), bool], Tensor[(256), float32], Tensor[(3, 8, 16), bool]) */;
    %785 = %779.0;
    %786 = %784.1;
    (%785, %786, %var_5656, %var_5657)
  };
  %787(%var_5660, %var_5661) /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 6), uint64], Tensor[(144), bool], Tensor[(96), bool]) */
}

def @func_3017() -> (Tensor[(7, 3, 1), float64], Tensor[(3, 8, ?), bool]) {
  %788 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(7, 3, 1), float64] */;
  %789 = @func_2652() /* ty=(Tensor[(3, 8, ?), bool],) */;
  %790 = cosh(%788) /* ty=Tensor[(7, 3, 1), float64] */;
  %791 = %789.0;
  (%790, %791)
}

def @func_6384() -> (Tensor[(11, 5, 4), int32],) {
  %792 = @func_5616() /* ty=Tensor[(11, 5, 4), int32] */;
  (%792,)
}

def @func_5817() -> (Tensor[(3, 8, ?), int32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) {
  @func_5815() /* ty=(Tensor[(3, 8, ?), int32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */
}

def @func_3487(%var_3486: Tensor[(3, 8, 16), float32]) -> (Tensor[(3, 8, 16), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float64], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) {
  %805 = fn (%var_3438: Tensor[(3, 8, 16), float32]) -> (Tensor[(3, 8, 16), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float64], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) {
    %793 = @func_354() /* ty=(Tensor[(3, 8, ?), float32], Tensor[(3, 8, 16), float32]) */;
    %794 = %793.0;
    %795 = cast(%794, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
    %796 = cast(%var_3438, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
    %797 = cast(%var_3438, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
    %798 = @func_1823() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
    %799 = @func_1823() /* ty=(Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */;
    %800 = equal(%795, %796) /* ty=Tensor[(3, 8, 16), bool] */;
    %801 = sqrt(%797) /* ty=Tensor[(3, 8, 16), float32] */;
    %802 = %798.1;
    %803 = @func_2109() /* ty=Tensor[(3, 8, 16), uint16] */;
    %804 = %799.1;
    (%800, %801, %802, %803, %804)
  };
  %805(%var_3486) /* ty=(Tensor[(3, 8, 16), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float64], Tensor[(3, 8, 16), uint16], Tensor[(3, 8, 16), float64]) */
}

def @func_7379(%var_7377: Tensor[(14, 13, 3), uint16], %var_7378: Tensor[(14, 13, 3), uint16]) -> (Tensor[(3, 8, 16), float32], Tensor[(14, 13, 3), float64]) {
  @func_7375(%var_7377, %var_7378) /* ty=(Tensor[(3, 8, 16), float32], Tensor[(14, 13, 3), float64]) */
}

def @func_4629(%var_4614: Tensor[(3, 8, 5), bool], %var_4624: Tensor[(462), float32]) -> (Tensor[(3, 8, 5), bool], Tensor[(3, 11, 14), float32], float32, Tensor[(462), float32], Tensor[(3, 8, 16), uint16]) {
  %806 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %807 = %806.0;
  %808 = cast(%807, dtype="bool") /* ty=Tensor[(3, 8, ?), bool] */;
  %809 = cast(%var_4614, dtype="bool") /* ty=Tensor[(3, 8, 5), bool] */;
  %810 = cast(-0.238527f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %811 = cast(%var_4624, dtype="float32") /* ty=Tensor[(462), float32] */;
  %812 = reshape(%810, newshape=[]) /* ty=float32 */;
  %813 = reshape(%811, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
  %814 = @func_3799(%812, %813) /* ty=(Tensor[(3, 11, 14), float32],) */;
  %815 = less_equal(%808, %809) /* ty=Tensor[(3, 8, 5), bool] */;
  %816 = %814.0;
  %817 = @func_3733() /* ty=Tensor[(3, 8, 16), uint16] */;
  (%815, %816, -0.238527f /* ty=float32 */, %var_4624, %817)
}

def @func_4894(%var_4888: uint8, %var_4889: Tensor[(7, 7, 15), uint8]) -> Tensor[(7, 7, 15), uint8] {
  %818 = cast(%var_4888, dtype="uint8") /* ty=uint8 */;
  %819 = cast(%var_4889, dtype="uint8") /* ty=Tensor[(7, 7, 15), uint8] */;
  right_shift(%818, %819) /* ty=Tensor[(7, 7, 15), uint8] */
}

def @func_2711(%var_2683: Tensor[(224), int32]) -> (Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(13, 9, 14), float64], Tensor[(4, 8, 7), int32], Tensor[(224), int32], Tensor[(1638), float64], Tensor[(3, 8, 6), bool], Tensor[(144), bool]) {
  %820 = @func_1749() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %821 = cast(meta[relay.Constant][38] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %822 = reshape(%821, newshape=[13, 9, 14]) /* ty=Tensor[(13, 9, 14), float64] */;
  %823 = cast(%var_2683, dtype="int32") /* ty=Tensor[(224), int32] */;
  %824 = %820.1;
  %825 = cast(%824, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %826 = reshape(%823, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), int32] */;
  %827 = reshape(%825, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %828 = @func_1872(%826, %827) /* ty=(Tensor[(4, 8, 7), int32], Tensor[(13, 9, 14), int64], Tensor[(3, 8, 16), bool], Tensor[(384), float32]) */;
  %829 = cast(meta[relay.Constant][38] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %830 = cast(meta[relay.Constant][39] /* ty=Tensor[(144), bool] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %831 = reshape(%830, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), bool] */;
  %832 = @func_2253() /* ty=Tensor[(3, 8, ?), bool] */;
  %833 = @func_1780(%822) /* ty=Tensor[(13, 9, 14), float64] */;
  %834 = %828.0;
  %835 = exp(%829) /* ty=Tensor[(1638), float64] */;
  %836 = @func_909(%831) /* ty=Tensor[(3, 8, 6), bool] */;
  (%832, %824, %833, %834, %var_2683, %835, %836, meta[relay.Constant][39] /* ty=Tensor[(144), bool] */)
}

def @func_2356() -> (Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32]) {
  %837 = @func_627() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32]) */;
  %838 = @func_515() /* ty=(Tensor[(3, 8, ?), bool], Tensor[(3, 8, 16), float32], Tensor[(3, 8, 16), float32], Tensor[(3, 8, ?), bool], Tensor[(3, 8, ?), bool]) */;
  %839 = %837.1;
  %840 = %838.2;
  (%839, %840)
}

def @func_5617() -> Tensor[(11, 5, 4), int32] {
  %842 = fn () -> Tensor[(11, 5, 4), int32] {
    %841 = @func_4158() /* ty=(Tensor[(11, 5, 4), int32], Tensor[(3, 8, 16), float32]) */;
    %841.0
  };
  %842() /* ty=Tensor[(11, 5, 4), int32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen307/build/output.py:2766: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen307/build/output.py", line 2771, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_power_kernel0(double* __restrict__ T_power, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1980) {
    T_power[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = pow(placeholder[((((((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) / 132) * 11) + (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 11)))], placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}

extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_cast_bitwise_xor_kernel0(signed char* __restrict__ T_bitwise_xor, signed char* __restrict__ placeholder, double* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1980) {
    T_bitwise_xor[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = (placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] ^ ((signed char)placeholder1[((((((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) / 132) * 11) + (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 11)))]));
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

