==========mod==========
#[version = "0.0.5"]
def @func_4153(%var_4122: Tensor[(16), float64], %var_4134: Tensor[(14, 4, 4), bool]) -> (Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(64), float64], Tensor[(14, 4, 4), uint32]) {
  %0 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
  %1 = cast(%var_4122, dtype="float64") /* ty=Tensor[(16), float64] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %3 = reshape(%1, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %4 = reshape(%2, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %5 = @func_3049(%3, %4) /* ty=(Tensor[(14, 4, 4), bool], Tensor[(4, 4, 4), int8], Tensor[(1, 4, 4), float32]) */;
  %6 = %5.0;
  %7 = cast(%var_4134, dtype="uint32") /* ty=Tensor[(14, 4, 4), uint32] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%6, dtype="uint32") /* ty=Tensor[(14, 4, 4), uint32] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %11 = %0.2;
  %12 = right_shift(%9, %10) /* ty=Tensor[(14, 4, 4), uint32] */;
  (%11, %var_4122, meta[relay.Constant][0] /* ty=Tensor[(64), float64] */, %12)
}

def @func_10790(%var_10729: Tensor[(768), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(768), float32], Tensor[(16), float64], Tensor[(7, 4, 13), uint16], Tensor[(91, 4), uint16]) {
  %13 = @func_3901() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */;
  %14 = @func_7020() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %15 = cast(%var_10729, dtype="float32") /* ty=Tensor[(768), float32] */;
  %16 = reshape(%15, newshape=[8, 12, 8]) /* ty=Tensor[(8, 12, 8), float32] */;
  %17 = @func_7815(%16) /* ty=(Tensor[(8, 12, 8), float32], Tensor[(11, 16, 16), float64]) */;
  %18 = @func_7845() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(16), float64]) */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(91, 4), uint16] */, dtype="uint16") /* ty=Tensor[(91, 4), uint16] */;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(91, 4), uint16] */, dtype="uint16") /* ty=Tensor[(91, 4), uint16] */;
  %21 = reshape(%19, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %22 = reshape(%20, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %23 = @func_2592(%21, %22) /* ty=(Tensor[(7, 4, 13), uint16],) */;
  %24 = %13.0;
  %25 = %14.1;
  %26 = %17.1;
  %27 = %18.1;
  %28 = %23.0;
  (%24, %25, %26, %var_10729, %27, %28, meta[relay.Constant][1] /* ty=Tensor[(91, 4), uint16] */)
}

def @func_4228() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %29 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  %30 = cast(%29, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %31 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
  %32 = sigmoid(%30) /* ty=Tensor[(11, 16, 16), float64] */;
  (%31, %32)
}

def @func_8684() -> Tensor[(11, 16, 16), float64] {
  %33 = @func_8496() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %33.0
}

def @func_11410(%var_11381: int32, %var_11382: Tensor[(10, 2, 11), int32]) -> Tensor[(10, 2, 11), bool] {
  %34 = cast(%var_11381, dtype="bool") /* ty=bool */;
  %35 = cast(%var_11382, dtype="bool") /* ty=Tensor[(10, 2, 11), bool] */;
  equal(%34, %35) /* ty=Tensor[(10, 2, 11), bool] */
}

def @func_6487() -> Tensor[(11, 16, 16), float64] {
  %36 = @func_4970() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %36.0
}

def @func_3913() -> (Tensor[(11, 16, 16), float64],) {
  %37 = @func_3371() /* ty=Tensor[(11, 16, 16), float64] */;
  (%37,)
}

def @func_9274(%var_9233: float32, %var_9234: Tensor[(9, 2, 7), float32]) -> (Tensor[(9, 2, 7), float32], Tensor[(7, 4, 13), uint16], Tensor[(364), uint16], Tensor[(11, 16, 16), float64], Tensor[(12, 1, 1), float32], Tensor[(6, 2), float32]) {
  %38 = cast(%var_9233, dtype="float32") /* ty=float32 */;
  %39 = cast(%var_9234, dtype="float32") /* ty=Tensor[(9, 2, 7), float32] */;
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %42 = reshape(%40, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %43 = reshape(%41, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %44 = @func_2592(%42, %43) /* ty=(Tensor[(7, 4, 13), uint16],) */;
  %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 2), float32] */;
  %46 = reshape(%45, newshape=[12, 1, 1]) /* ty=Tensor[(12, 1, 1), float32] */;
  %47 = @func_7147(%46) /* ty=(Tensor[(12, 1, 1), float32],) */;
  %48 = floor_divide(%38, %39) /* ty=Tensor[(9, 2, 7), float32] */;
  %49 = %44.0;
  %50 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  %51 = %47.0;
  (%48, %49, meta[relay.Constant][2] /* ty=Tensor[(364), uint16] */, %50, %51, meta[relay.Constant][3] /* ty=Tensor[(6, 2), float32] */)
}

def @func_883() -> Tensor[(11, 16, 16), float64] {
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 16, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  asinh(%52) /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_5932() -> Tensor[(11, 16, 16), float64] {
  @func_2862() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_2367() -> (Tensor[(11, 16, 16), float64], Tensor[(12, 6, 5), int8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, uint8) {
  %53 = @func_1694() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %54 = %53.0;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %56 = reshape(%55, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
  %57 = @func_1512(%56) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8]) */;
  %58 = cast(meta[relay.Constant][5] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %59 = reshape(%58, newshape=[]) /* ty=uint8 */;
  %60 = @func_1093(%59) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
  %61 = %57.1;
  %62 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
  %63 = @func_1425() /* ty=Tensor[(11, 16, 16), float64] */;
  %64 = %60.4;
  (%54, %61, %62, %63, %64, meta[relay.Constant][5] /* ty=uint8 */)
}

def @func_655(%var_626: float32, %var_627: Tensor[(1, 6, 9), float32]) -> (Tensor[(1, 6, 9), bool],) {
  %65 = cast(%var_626, dtype="bool") /* ty=bool */;
  %66 = cast(%var_627, dtype="bool") /* ty=Tensor[(1, 6, 9), bool] */;
  %67 = not_equal(%65, %66) /* ty=Tensor[(1, 6, 9), bool] */;
  (%67,)
}

def @func_1979(%var_1973: Tensor[(9, 11, 7), float64]) -> (Tensor[(9, 11, 7), float64], Tensor[(11, 16, 16), float64]) {
  %68 = cast(%var_1973, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %69 = asinh(%68) /* ty=Tensor[(9, 11, 7), float64] */;
  %70 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  (%69, %70)
}

def @func_8747(%var_8735: uint64) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32], uint64, Tensor[(11, 16, 16), float64]) {
  %71 = cast(%var_8735, dtype="uint64") /* ty=uint64 */;
  %72 = reshape(%71, newshape=[]) /* ty=uint64 */;
  %73 = @func_4000(%72) /* ty=(uint8, Tensor[(11, 16, 16), float32], Tensor[(7, 9, 11), uint64]) */;
  %74 = @func_2474() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %75 = @func_1425() /* ty=Tensor[(11, 16, 16), float64] */;
  %76 = %73.1;
  %77 = %74.2;
  (%75, %76, %var_8735, %77)
}

def @func_524(%var_519: Tensor[(12, 6, 5), int8]) -> (Tensor[(12, 6, 5), int8],) {
  %78 = cast(%var_519, dtype="int8") /* ty=Tensor[(12, 6, 5), int8] */;
  %79 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(12, 6, 5), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 6, 5), int8] */, dtype="int8") /* ty=Tensor[(12, 6, 5), int8] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %82 = maximum(%80, %81) /* ty=Tensor[(12, 6, 5), int8] */;
  (%82,)
}

def @func_6577() -> Tensor[(11, 16, 16), float64] {
  @func_6487() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_3049(%var_3015: Tensor[(1, 4, 4), float64], %var_3025: Tensor[(4, 4, 4), float64]) -> (Tensor[(14, 4, 4), bool], Tensor[(4, 4, 4), int8], Tensor[(1, 4, 4), float32]) {
  %83 = cast(%var_3015, dtype="bool") /* ty=Tensor[(1, 4, 4), bool] */;
  %84 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 4, 4), float64] */, dtype="bool") /* ty=Tensor[(14, 4, 4), bool] */;
  %85 = cast(%var_3015, dtype="float64") /* ty=Tensor[(1, 4, 4), float64] */;
  %86 = asin(%85) /* ty=Tensor[(1, 4, 4), float64] */;
  %87 = cast(%86, dtype="int8") /* ty=Tensor[(1, 4, 4), int8] */;
  %88 = cast(%var_3025, dtype="int8") /* ty=Tensor[(4, 4, 4), int8] */;
  %89 = cast(%var_3015, dtype="float32") /* ty=Tensor[(1, 4, 4), float32] */;
  %90 = less_equal(%83, %84) /* ty=Tensor[(14, 4, 4), bool] */;
  %91 = bitwise_and(%87, %88) /* ty=Tensor[(4, 4, 4), int8] */;
  %92 = log10(%89) /* ty=Tensor[(1, 4, 4), float32] */;
  (%90, %91, %92)
}

def @func_7117(%var_7109: Tensor[(10, 5, 2), bool], %var_7110: Tensor[(10, 5, 2), bool]) -> Tensor[(10, 5, 2), bool] {
  %93 = cast(%var_7110, dtype="bool") /* ty=Tensor[(10, 5, 2), bool] */;
  %94 = shape_of(%var_7109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%var_7109, dtype="bool") /* ty=Tensor[(10, 5, 2), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%95, %96) /* ty=Tensor[(10, 5, 2), bool] */
}

def @func_8895() -> (Tensor[(11, 16, 16), float64],) {
  %97 = @func_883() /* ty=Tensor[(11, 16, 16), float64] */;
  (%97,)
}

def @func_8604(%var_8596: Tensor[(13, 4, 5), float32]) -> Tensor[(13, 4, 5), float32] {
  %98 = cast(%var_8596, dtype="float32") /* ty=Tensor[(13, 4, 5), float32] */;
  log2(%98) /* ty=Tensor[(13, 4, 5), float32] */
}

def @func_3901() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) {
  %99 = @func_3371() /* ty=Tensor[(11, 16, 16), float64] */;
  %100 = @func_2169() /* ty=Tensor[(11, 16, 16), bool] */;
  (%99, %100)
}

def @func_9128() -> (Tensor[(54), float32], Tensor[(11, 16, 16), bool]) {
  %101 = @func_6789() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], uint64, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32], Tensor[(1470), uint8]) */;
  %102 = @func_8552() /* ty=(Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(693), float64]) */;
  %103 = %101.2;
  %104 = %102.0;
  (%103, %104)
}

def @func_11143(%var_11134: uint8) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8) {
  %105 = @func_2474() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %106 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
  %107 = cast(%var_11134, dtype="uint8") /* ty=uint8 */;
  %108 = reshape(%107, newshape=[]) /* ty=uint8 */;
  %109 = @func_6182(%108) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8) */;
  %110 = %105.0;
  %111 = %106.2;
  %112 = @func_8684() /* ty=Tensor[(11, 16, 16), float64] */;
  %113 = %109.0;
  (%110, %111, %112, %113, %var_11134)
}

def @func_10997() -> Tensor[(11, 16, 16), float64] {
  @func_1661() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_7147(%var_7141: Tensor[(12, 1, 1), float32]) -> (Tensor[(12, 1, 1), float32],) {
  %114 = cast(%var_7141, dtype="float32") /* ty=Tensor[(12, 1, 1), float32] */;
  %115 = cos(%114) /* ty=Tensor[(12, 1, 1), float32] */;
  (%115,)
}

def @func_978() -> (Tensor[(11, 16, 16), float64],) {
  %116 = @func_883() /* ty=Tensor[(11, 16, 16), float64] */;
  (%116,)
}

def @func_6443() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %117 = @func_3208() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %118 = %117.0;
  %119 = @func_2707() /* ty=Tensor[(11, 16, 16), float64] */;
  (%118, %119)
}

def @func_12003() -> (Tensor[(54), float32], Tensor[(7, 4, 13), uint16], Tensor[(364), uint16]) {
  %120 = @func_9128() /* ty=(Tensor[(54), float32], Tensor[(11, 16, 16), bool]) */;
  %121 = cast(meta[relay.Constant][8] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %123 = reshape(%121, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %124 = reshape(%122, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %125 = @func_2592(%123, %124) /* ty=(Tensor[(7, 4, 13), uint16],) */;
  %126 = %120.0;
  %127 = %125.0;
  (%126, %127, meta[relay.Constant][8] /* ty=Tensor[(364), uint16] */)
}

def @func_6420(%var_6375: Tensor[(11, 16, 16), float64], %var_6395: uint8) -> (Tensor[(11, 16, 16), float32], uint8, Tensor[(176), uint8], uint8) {
  %128 = @func_5616() /* ty=Tensor[(11, 16, 16), float64] */;
  %129 = cast(%var_6375, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%128, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %133 = cast(meta[relay.Constant][9] /* ty=Tensor[(176), uint8] */, dtype="uint8") /* ty=Tensor[(176), uint8] */;
  %134 = cast(meta[relay.Constant][9] /* ty=Tensor[(176), uint8] */, dtype="uint8") /* ty=Tensor[(176), uint8] */;
  %135 = cast(%var_6395, dtype="uint8") /* ty=uint8 */;
  %136 = cast(meta[relay.Constant][9] /* ty=Tensor[(176), uint8] */, dtype="uint8") /* ty=Tensor[(176), uint8] */;
  %137 = reshape(%133, newshape=[11, 4, 4]) /* ty=Tensor[(11, 4, 4), uint8] */;
  %138 = reshape(%134, newshape=[11, 4, 4]) /* ty=Tensor[(11, 4, 4), uint8] */;
  %139 = reshape(%135, newshape=[]) /* ty=uint8 */;
  %140 = reshape(%136, newshape=[11, 4, 4]) /* ty=Tensor[(11, 4, 4), uint8] */;
  %141 = @func_3523(%137, %138, %139, %140) /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(11, 4, 4), uint8], Tensor[(11, 4, 4), float32], Tensor[(11, 16, 16), float64]) */;
  %142 = divide(%131, %132) /* ty=Tensor[(11, 16, 16), float32] */;
  %143 = %141.2;
  (%142, %143, meta[relay.Constant][9] /* ty=Tensor[(176), uint8] */, %var_6395)
}

def @func_6016() -> (Tensor[(11, 16, 16), float64],) {
  %144 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
  (%144,)
}

def @func_9576(%var_9571: Tensor[(13, 15, 3), bool], %var_9572: Tensor[(13, 15, 3), bool]) -> (Tensor[(13, 15, 3), bool],) {
  %145 = cast(%var_9572, dtype="bool") /* ty=Tensor[(13, 15, 3), bool] */;
  %146 = shape_of(%var_9571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%var_9571, dtype="bool") /* ty=Tensor[(13, 15, 3), bool] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %149 = logical_or(%147, %148) /* ty=Tensor[(13, 15, 3), bool] */;
  (%149,)
}

def @func_8784() -> (Tensor[(11, 16, 16), float64], Tensor[(14, 4, 4), uint32], Tensor[(4, 4), float64], Tensor[(224), bool], uint8, Tensor[(30), uint8], Tensor[(11, 16, 16), float64]) {
  %150 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 4), float64] */;
  %151 = cast(meta[relay.Constant][11] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
  %152 = reshape(%150, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %153 = reshape(%151, newshape=[14, 4, 4]) /* ty=Tensor[(14, 4, 4), bool] */;
  %154 = @func_4153(%152, %153) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(64), float64], Tensor[(14, 4, 4), uint32]) */;
  %155 = cast(meta[relay.Constant][12] /* ty=Tensor[(30), uint8] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %156 = reshape(%155, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), uint8] */;
  %157 = @func_7542(%156) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(5, 1, 6), int32]) */;
  %158 = @func_2306() /* ty=Tensor[(11, 16, 16), float64] */;
  %159 = %154.3;
  %160 = %157.1;
  %161 = @func_3371() /* ty=Tensor[(11, 16, 16), float64] */;
  (%158, %159, meta[relay.Constant][10] /* ty=Tensor[(4, 4), float64] */, meta[relay.Constant][11] /* ty=Tensor[(224), bool] */, %160, meta[relay.Constant][12] /* ty=Tensor[(30), uint8] */, %161)
}

def @func_4466(%var_4444: Tensor[(6, 16, 7), float64], %var_4452: Tensor[(6, 16, 7), float64]) -> (Tensor[(6, 16, 7), bool], Tensor[(6, 16, 7), float32], Tensor[(6, 16, 7), float32]) {
  %162 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
  %163 = %162.1;
  %164 = cast(%var_4444, dtype="bool") /* ty=Tensor[(6, 16, 7), bool] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="bool") /* ty=Tensor[(6, 16, 7), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = cast(%var_4452, dtype="float32") /* ty=Tensor[(6, 16, 7), float32] */;
  %169 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%163, dtype="float32") /* ty=Tensor[(6, 16, 7), float32] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %172 = cast(%163, dtype="float32") /* ty=Tensor[(6, 16, 7), float32] */;
  %173 = less(%166, %167) /* ty=Tensor[(6, 16, 7), bool] */;
  %174 = minimum(%170, %171) /* ty=Tensor[(6, 16, 7), float32] */;
  %175 = sinh(%172) /* ty=Tensor[(6, 16, 7), float32] */;
  (%173, %174, %175)
}

def @func_4082() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32]) {
  %176 = @func_2862() /* ty=Tensor[(11, 16, 16), float64] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %178 = @func_2915() /* ty=Tensor[(11, 16, 16), float64] */;
  %179 = log2(%177) /* ty=Tensor[(11, 16, 16), float32] */;
  (%178, %179)
}

def @func_9437() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %180 = @func_3208() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %181 = @func_3668() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %182 = %180.0;
  %183 = %181.0;
  %184 = @func_5932() /* ty=Tensor[(11, 16, 16), float64] */;
  (%182, %183, %184)
}

def @func_11044() -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(351), uint8]) {
  %185 = @func_3197() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %186 = cast(meta[relay.Constant][13] /* ty=Tensor[(351), uint8] */, dtype="uint8") /* ty=Tensor[(351), uint8] */;
  %187 = reshape(%186, newshape=[39, 9]) /* ty=Tensor[(39, 9), uint8] */;
  %188 = @func_5717(%187) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(39, 9), uint8], Tensor[(11, 16, 16), float64]) */;
  %189 = %185.0;
  %190 = %188.1;
  (%189, %190, meta[relay.Constant][13] /* ty=Tensor[(351), uint8] */)
}

def @func_6235(%var_6194: Tensor[(7, 1, 6), float64]) -> (Tensor[(7, ?, 6), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %191 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 1, 6), float64] */;
  %192 = shape_of(%var_6194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%var_6194, dtype="float64") /* ty=Tensor[(7, 1, 6), float64] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %195 = @func_2474() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %196 = @func_5116() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %197 = maximum(%193, %194) /* ty=Tensor[(7, ?, 6), float64] */;
  %198 = %195.2;
  %199 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  %200 = %196.0;
  (%197, %198, %199, %200)
}

def @func_6146() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %201 = @func_4409() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %202 = %201.0;
  %203 = @func_5932() /* ty=Tensor[(11, 16, 16), float64] */;
  (%202, %203)
}

def @func_10939(%var_10914: Tensor[(1584), int32], %var_10915: Tensor[(12, 30), int8]) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(13), float32], Tensor[(13), float32], Tensor[(11, 16, 16), float64], Tensor[(16, 14), bool], Tensor[(16, 9, 11), int8], Tensor[(1584), int32], Tensor[(12, 30), int8], Tensor[(11, 16, 16), float64], Tensor[(32, 24), float32]) {
  %204 = @func_2429() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */;
  %205 = cast(meta[relay.Constant][15] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
  %206 = reshape(%205, newshape=[13]) /* ty=Tensor[(13), float32] */;
  %207 = @func_10064(%206) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(7, 210), uint8], Tensor[(1470), uint8], Tensor[(?, 13), float32], Tensor[(13), float32], Tensor[(11, 16, 16), float64]) */;
  %208 = %204.1;
  %209 = cast(%208, dtype="bool") /* ty=bool */;
  %210 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 14), bool] */, dtype="bool") /* ty=Tensor[(16, 14), bool] */;
  %211 = reshape(%209, newshape=[]) /* ty=bool */;
  %212 = reshape(%210, newshape=[1, 16, 14]) /* ty=Tensor[(1, 16, 14), bool] */;
  %213 = @func_3747(%211, %212) /* ty=(Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), float64], Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), int64]) */;
  %214 = cast(%var_10914, dtype="int32") /* ty=Tensor[(1584), int32] */;
  %215 = cast(%208, dtype="uint8") /* ty=uint8 */;
  %216 = cast(%var_10915, dtype="int8") /* ty=Tensor[(12, 30), int8] */;
  %217 = reshape(%214, newshape=[16, 9, 11]) /* ty=Tensor[(16, 9, 11), int32] */;
  %218 = reshape(%215, newshape=[]) /* ty=uint8 */;
  %219 = reshape(%216, newshape=[360]) /* ty=Tensor[(360), int8] */;
  %220 = @func_10470(%217, %218, %219) /* ty=(Tensor[(16, 9, 11), int8], Tensor[(11, 16, 16), float64], uint8, Tensor[(1, 9, 11), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) */;
  %221 = cast(meta[relay.Constant][17] /* ty=Tensor[(32, 24), float32] */, dtype="float32") /* ty=Tensor[(32, 24), float32] */;
  %222 = reshape(%221, newshape=[8, 12, 8]) /* ty=Tensor[(8, 12, 8), float32] */;
  %223 = @func_7815(%222) /* ty=(Tensor[(8, 12, 8), float32], Tensor[(11, 16, 16), float64]) */;
  %224 = @func_6465() /* ty=Tensor[(11, 16, 16), float64] */;
  %225 = %207.5;
  %226 = %213.1;
  %227 = %220.0;
  %228 = %223.1;
  (%224, %208, %225, meta[relay.Constant][15] /* ty=Tensor[(13), float32] */, %226, meta[relay.Constant][16] /* ty=Tensor[(16, 14), bool] */, %227, %var_10914, %var_10915, %228, meta[relay.Constant][17] /* ty=Tensor[(32, 24), float32] */)
}

def @func_4832(%var_4807: uint8) -> (Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(8, 28), int16]) {
  %229 = cast(%var_4807, dtype="uint8") /* ty=uint8 */;
  %230 = reshape(%229, newshape=[]) /* ty=uint8 */;
  %231 = @func_3179(%230) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %232 = @func_4228() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %233 = cast(%var_4807, dtype="int16") /* ty=int16 */;
  %234 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 28), int16] */, dtype="int16") /* ty=Tensor[(8, 28), int16] */;
  %235 = %231.3;
  %236 = cast(%235, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %237 = reshape(%233, newshape=[]) /* ty=int16 */;
  %238 = reshape(%234, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), int16] */;
  %239 = reshape(%236, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %240 = @func_3582(%237, %238, %239) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(4, 7, 8), float32], Tensor[(11, 16, 16), float64], Tensor[(1470), uint8]) */;
  %241 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  %242 = %232.1;
  %243 = %240.1;
  (%241, %235, %var_4807, %242, %243, meta[relay.Constant][18] /* ty=Tensor[(8, 28), int16] */)
}

def @func_8465() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %244 = @func_3913() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %245 = @func_2540() /* ty=Tensor[(11, 16, 16), float64] */;
  %246 = %244.0;
  (%245, %246)
}

def @func_1260(%var_1258: Tensor[(1, 1470), uint8]) -> (Tensor[(11, 16, 16), float32], Tensor[(1470), uint8], Tensor[(1, 1470), uint8]) {
  %247 = @func_883() /* ty=Tensor[(11, 16, 16), float64] */;
  %248 = cast(%247, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %249 = cast(%var_1258, dtype="uint8") /* ty=Tensor[(1, 1470), uint8] */;
  %250 = reshape(%249, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %251 = @func_1205(%250) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
  %252 = erf(%248) /* ty=Tensor[(11, 16, 16), float32] */;
  %253 = %251.3;
  (%252, %253, %var_1258)
}

def @func_6465() -> Tensor[(11, 16, 16), float64] {
  %254 = @func_5818() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %254.0
}

def @func_1882(%var_1880: Tensor[(27, 2), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(1470), float64], Tensor[(1, 6, 9), bool], Tensor[(27, 2), float32]) {
  %255 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %256 = cast(meta[relay.Constant][20] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %257 = reshape(%255, newshape=[]) /* ty=uint8 */;
  %258 = reshape(%256, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %259 = @func_1391(%257, %258) /* ty=(Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) */;
  %260 = cast(meta[relay.Constant][20] /* ty=Tensor[(1470), uint8] */, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %261 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="float32") /* ty=float32 */;
  %262 = cast(%var_1880, dtype="float32") /* ty=Tensor[(27, 2), float32] */;
  %263 = reshape(%261, newshape=[]) /* ty=float32 */;
  %264 = reshape(%262, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), float32] */;
  %265 = @func_655(%263, %264) /* ty=(Tensor[(1, 6, 9), bool],) */;
  %266 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
  %267 = %259.1;
  %268 = log(%260) /* ty=Tensor[(1470), float64] */;
  %269 = %265.0;
  (%266, %267, meta[relay.Constant][19] /* ty=uint8 */, %268, %269, %var_1880)
}

def @func_8359(%var_8347: Tensor[(30), uint8]) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(30), uint8]) {
  %270 = @func_1845() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %271 = cast(meta[relay.Constant][21] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %272 = reshape(%271, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %273 = @func_1205(%272) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
  %274 = cast(%var_8347, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %275 = reshape(%274, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), uint8] */;
  %276 = @func_7542(%275) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(5, 1, 6), int32]) */;
  %277 = %270.0;
  %278 = %273.2;
  %279 = %276.3;
  (%277, %278, meta[relay.Constant][21] /* ty=Tensor[(1470), uint8] */, %279, %var_8347)
}

def @func_8988() -> (Tensor[(11, 16, 16), float64],) {
  %280 = @func_2540() /* ty=Tensor[(11, 16, 16), float64] */;
  (%280,)
}

def @func_2540() -> Tensor[(11, 16, 16), float64] {
  @func_883() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_1493() -> (Tensor[(11, 16, 16), float64],) {
  %281 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %282 = %281.0;
  (%282,)
}

def @func_3404() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) {
  %283 = @func_883() /* ty=Tensor[(11, 16, 16), float64] */;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %285 = reshape(%284, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
  %286 = @func_2959(%285) /* ty=(Tensor[(11, 16, 16), int64],) */;
  %287 = cast(meta[relay.Constant][22] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %288 = reshape(%287, newshape=[]) /* ty=uint8 */;
  %289 = @func_1093(%288) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
  %290 = %286.0;
  %291 = %289.4;
  %292 = @func_2862() /* ty=Tensor[(11, 16, 16), float64] */;
  (%283, %290, %291, meta[relay.Constant][22] /* ty=uint8 */, %292)
}

def @func_2306() -> Tensor[(11, 16, 16), float64] {
  @func_883() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_11840() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %293 = @func_2367() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(12, 6, 5), int8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, uint8) */;
  %294 = %293.3;
  %295 = @func_6577() /* ty=Tensor[(11, 16, 16), float64] */;
  (%294, %295)
}

def @func_5116() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %296 = @func_3913() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %297 = @func_4228() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %298 = @func_2707() /* ty=Tensor[(11, 16, 16), float64] */;
  %299 = %296.0;
  %300 = %297.0;
  (%298, %299, %300)
}

def @func_3371() -> Tensor[(11, 16, 16), float64] {
  %301 = @func_2862() /* ty=Tensor[(11, 16, 16), float64] */;
  %302 = cast(%301, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  sinh(%302) /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_8071(%var_8047: Tensor[(10, 14, 7), float64], %var_8048: Tensor[(10, 14, 7), float64]) -> Tensor[(10, 14, 7), bool] {
  %303 = cast(%var_8048, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
  %304 = shape_of(%var_8047, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_8047, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %307 = subtract(%305, %306) /* ty=Tensor[(10, 14, 7), float64] */;
  %308 = cast(%var_8047, dtype="bool") /* ty=Tensor[(10, 14, 7), bool] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="bool") /* ty=Tensor[(10, 14, 7), bool] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%310, %311) /* ty=Tensor[(10, 14, 7), bool] */
}

def @func_8223() -> (Tensor[(11, 16, 16), float64],) {
  %312 = @func_5818() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %313 = %312.0;
  (%313,)
}

def @func_1093(%var_1084: uint8) -> (Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) {
  %314 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %315 = %314.0;
  %316 = cast(%315, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %317 = cast(%var_1084, dtype="uint8") /* ty=uint8 */;
  %318 = cast(meta[relay.Constant][23] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %319 = reshape(%317, newshape=[]) /* ty=uint8 */;
  %320 = reshape(%318, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint8] */;
  %321 = cos(%316) /* ty=Tensor[(11, 16, 16), float32] */;
  %322 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
  %323 = @func_883() /* ty=Tensor[(11, 16, 16), float64] */;
  %324 = @func_310(%319, %320) /* ty=Tensor[(15, 14, 7), uint8] */;
  (%321, %322, %323, %324, %var_1084, meta[relay.Constant][23] /* ty=Tensor[(1470), uint8] */)
}

def @func_2592(%var_2584: Tensor[(7, 4, 13), uint16], %var_2585: Tensor[(7, 4, 13), uint16]) -> (Tensor[(7, 4, 13), uint16],) {
  %325 = cast(%var_2585, dtype="uint16") /* ty=Tensor[(7, 4, 13), uint16] */;
  %326 = shape_of(%var_2584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%var_2584, dtype="uint16") /* ty=Tensor[(7, 4, 13), uint16] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %329 = add(%327, %328) /* ty=Tensor[(7, 4, 13), uint16] */;
  (%329,)
}

def @func_3668() -> (Tensor[(11, 16, 16), float64],) {
  %330 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  (%330,)
}

def @func_9990(%var_9950: Tensor[(360), int8]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(12, 6, 5), int8], Tensor[(360), int8], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) {
  %331 = @func_5148() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %332 = cast(%var_9950, dtype="int8") /* ty=Tensor[(360), int8] */;
  %333 = reshape(%332, newshape=[12, 6, 5]) /* ty=Tensor[(12, 6, 5), int8] */;
  %334 = @func_524(%333) /* ty=(Tensor[(12, 6, 5), int8],) */;
  %335 = @func_6577() /* ty=Tensor[(11, 16, 16), float64] */;
  %336 = cast(%335, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %337 = reshape(%336, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
  %338 = @func_1512(%337) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8]) */;
  %339 = @func_9527() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(9, 6), float32], Tensor[(11, 16, 16), float64]) */;
  %340 = %331.0;
  %341 = %334.0;
  %342 = %338.2;
  %343 = %339.0;
  (%340, %335, %341, %var_9950, %342, %343)
}

def @func_4857() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %344 = @func_3913() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %345 = @func_3777() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(90, 18), float32]) */;
  %346 = %344.0;
  %347 = %345.1;
  (%346, %347)
}

def @func_5061() -> (Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) {
  %348 = @func_1425() /* ty=Tensor[(11, 16, 16), float64] */;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %350 = reshape(%349, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
  %351 = @func_1512(%350) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8]) */;
  %352 = @func_4970() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %353 = %351.2;
  %354 = %352.0;
  (%348, %353, %354)
}

def @func_8310(%var_8297: bool) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(1, 16, 14), bool], bool, Tensor[(224), bool]) {
  %355 = @func_6146() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %356 = @func_5061() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) */;
  %357 = cast(%var_8297, dtype="bool") /* ty=bool */;
  %358 = cast(meta[relay.Constant][24] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
  %359 = reshape(%357, newshape=[]) /* ty=bool */;
  %360 = reshape(%358, newshape=[1, 16, 14]) /* ty=Tensor[(1, 16, 14), bool] */;
  %361 = @func_3747(%359, %360) /* ty=(Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), float64], Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), int64]) */;
  %362 = @func_5932() /* ty=Tensor[(11, 16, 16), float64] */;
  %363 = %355.0;
  %364 = %356.1;
  %365 = %361.0;
  (%362, %363, %364, %365, %var_8297, meta[relay.Constant][24] /* ty=Tensor[(224), bool] */)
}

def @func_6705(%var_6689: Tensor[(16), float64]) -> (Tensor[(11, 16, 16), int64], Tensor[(14, 4, 4), bool], Tensor[(16), float64], Tensor[(2, 32), float64]) {
  %366 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
  %367 = cast(%var_6689, dtype="float64") /* ty=Tensor[(16), float64] */;
  %368 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 32), float64] */, dtype="float64") /* ty=Tensor[(2, 32), float64] */;
  %369 = reshape(%367, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %370 = reshape(%368, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %371 = @func_3049(%369, %370) /* ty=(Tensor[(14, 4, 4), bool], Tensor[(4, 4, 4), int8], Tensor[(1, 4, 4), float32]) */;
  %372 = %366.1;
  %373 = %371.0;
  (%372, %373, %var_6689, meta[relay.Constant][25] /* ty=Tensor[(2, 32), float64] */)
}

def @func_10810() -> (Tensor[(11, 16, 16), float64],) {
  %374 = @func_7245() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %375 = %374.1;
  (%375,)
}

def @func_10324() -> (Tensor[(11, 16, 16), float64],) {
  %376 = @func_6146() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %377 = %376.1;
  (%377,)
}

def @func_10356() -> Tensor[(11, 16, 16), float64] {
  %378 = @func_3777() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(90, 18), float32]) */;
  %378.0
}

def @func_1512(%var_1498: Tensor[(11, 16, 16), float64]) -> (Tensor[(11, 16, 16), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8]) {
  %379 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
  %380 = cast(%var_1498, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%379, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %384 = cast(meta[relay.Constant][26] /* ty=Tensor[(360), int8] */, dtype="int8") /* ty=Tensor[(360), int8] */;
  %385 = reshape(%384, newshape=[12, 6, 5]) /* ty=Tensor[(12, 6, 5), int8] */;
  %386 = @func_524(%385) /* ty=(Tensor[(12, 6, 5), int8],) */;
  %387 = subtract(%382, %383) /* ty=Tensor[(11, 16, 16), float32] */;
  %388 = %386.0;
  (%387, %388, meta[relay.Constant][26] /* ty=Tensor[(360), int8] */)
}

def @func_9706() -> Tensor[(11, 16, 16), float64] {
  @func_1041() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_2474() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %389 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %390 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
  %391 = %389.0;
  %392 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
  (%390, %391, %392)
}

def @func_1694() -> (Tensor[(11, 16, 16), float64],) {
  %393 = @func_1635() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %394 = %393.0;
  (%394,)
}

def @func_7815(%var_7782: Tensor[(8, 12, 8), float32]) -> (Tensor[(8, 12, 8), float32], Tensor[(11, 16, 16), float64]) {
  %395 = cast(%var_7782, dtype="float32") /* ty=Tensor[(8, 12, 8), float32] */;
  %396 = atanh(%395) /* ty=Tensor[(8, 12, 8), float32] */;
  %397 = cast(%396, dtype="float32") /* ty=Tensor[(8, 12, 8), float32] */;
  %398 = shape_of(%var_7782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%var_7782, dtype="float32") /* ty=Tensor[(8, 12, 8), float32] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %401 = @func_6443() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %402 = add(%399, %400) /* ty=Tensor[(8, 12, 8), float32] */;
  %403 = %401.1;
  (%402, %403)
}

def @func_2257(%var_2231: uint8, %var_2245: Tensor[(1620), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470, 1), uint8], Tensor[(11, 16, 16), float64], Tensor[(1620), float32]) {
  %404 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %405 = cast(%var_2231, dtype="uint8") /* ty=uint8 */;
  %406 = cast(meta[relay.Constant][27] /* ty=Tensor[(1470, 1), uint8] */, dtype="uint8") /* ty=Tensor[(1470, 1), uint8] */;
  %407 = reshape(%405, newshape=[]) /* ty=uint8 */;
  %408 = reshape(%406, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint8] */;
  %409 = cast(%var_2245, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %410 = cast(%var_2231, dtype="uint8") /* ty=uint8 */;
  %411 = cast(meta[relay.Constant][27] /* ty=Tensor[(1470, 1), uint8] */, dtype="uint8") /* ty=Tensor[(1470, 1), uint8] */;
  %412 = reshape(%409, newshape=[1620]) /* ty=Tensor[(1620), float32] */;
  %413 = reshape(%410, newshape=[]) /* ty=uint8 */;
  %414 = reshape(%411, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %415 = @func_1923(%412, %413, %414) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(1620), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, Tensor[(1470), uint8]) */;
  %416 = %404.0;
  %417 = @func_310(%407, %408) /* ty=Tensor[(15, 14, 7), uint8] */;
  %418 = %415.0;
  (%416, %417, %var_2231, meta[relay.Constant][27] /* ty=Tensor[(1470, 1), uint8] */, %418, %var_2245)
}

def @func_4000(%var_3975: uint64) -> (uint8, Tensor[(11, 16, 16), float32], Tensor[(7, 9, 11), uint64]) {
  %419 = cast(%var_3975, dtype="uint8") /* ty=uint8 */;
  %420 = reshape(%419, newshape=[]) /* ty=uint8 */;
  %421 = @func_3179(%420) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %422 = %421.2;
  %423 = cast(%422, dtype="uint8") /* ty=uint8 */;
  %424 = reshape(%423, newshape=[]) /* ty=uint8 */;
  %425 = @func_1093(%424) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
  %426 = cast(%var_3975, dtype="bool") /* ty=bool */;
  %427 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 9, 11), uint64] */, dtype="bool") /* ty=Tensor[(7, 9, 11), bool] */;
  %428 = not_equal(%426, %427) /* ty=Tensor[(7, 9, 11), bool] */;
  %429 = cast(%428, dtype="uint64") /* ty=Tensor[(7, 9, 11), uint64] */;
  %430 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(7, 9, 11), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 9, 11), uint64] */, dtype="uint64") /* ty=Tensor[(7, 9, 11), uint64] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %433 = %425.0;
  %434 = subtract(%431, %432) /* ty=Tensor[(7, 9, 11), uint64] */;
  (%422, %433, %434)
}

def @func_2862() -> Tensor[(11, 16, 16), float64] {
  %435 = @func_2738() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %435.0
}

def @func_11669() -> Tensor[(14, 4, 4), float64] {
  %436 = @func_10117() /* ty=(Tensor[(14, 4, 4), uint32],) */;
  %437 = %436.0;
  %438 = cast(%437, dtype="float64") /* ty=Tensor[(14, 4, 4), float64] */;
  atanh(%438) /* ty=Tensor[(14, 4, 4), float64] */
}

def @func_6182(%var_6161: uint8) -> (Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8) {
  %439 = cast(%var_6161, dtype="uint8") /* ty=uint8 */;
  %440 = reshape(%439, newshape=[]) /* ty=uint8 */;
  %441 = @func_3179(%440) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %442 = @func_1819() /* ty=Tensor[(11, 16, 16), float64] */;
  %443 = %441.1;
  (%442, %443, %var_6161)
}

def @func_3636(%var_3628: Tensor[(11, 16, 16), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) {
  %444 = @func_2429() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */;
  %445 = @func_3208() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %446 = @func_2915() /* ty=Tensor[(11, 16, 16), float64] */;
  %447 = cast(%446, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %448 = sin(%447) /* ty=Tensor[(11, 16, 16), float32] */;
  %449 = cast(%var_3628, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%448, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %453 = %444.0;
  %454 = %445.0;
  %455 = less(%451, %452) /* ty=Tensor[(11, 16, 16), bool] */;
  (%453, %454, %455)
}

def @func_5506() -> Tensor[(11, 16, 16), float64] {
  %456 = @func_1694() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %456.0
}

def @func_3179(%var_3093: uint8) -> (Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %457 = cast(%var_3093, dtype="uint8") /* ty=uint8 */;
  %458 = cast(meta[relay.Constant][29] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %459 = reshape(%457, newshape=[]) /* ty=uint8 */;
  %460 = reshape(%458, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %461 = @func_1391(%459, %460) /* ty=(Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) */;
  %462 = cast(%var_3093, dtype="uint8") /* ty=uint8 */;
  %463 = %461.0;
  %464 = cast(%463, dtype="uint8") /* ty=Tensor[(15, 14, 7), uint8] */;
  %465 = reshape(%462, newshape=[]) /* ty=uint8 */;
  %466 = reshape(%464, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %467 = @func_1391(%465, %466) /* ty=(Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) */;
  %468 = %467.3;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %470 = reshape(%469, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
  %471 = @func_2959(%470) /* ty=(Tensor[(11, 16, 16), int64],) */;
  %472 = @func_1425() /* ty=Tensor[(11, 16, 16), float64] */;
  %473 = cast(%472, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %474 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  %475 = %471.0;
  %476 = log10(%473) /* ty=Tensor[(11, 16, 16), float64] */;
  %477 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
  (%474, %463, %var_3093, meta[relay.Constant][29] /* ty=Tensor[(1470), uint8] */, %468, %475, %476, %477)
}

def @func_6673() -> (Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %478 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
  %479 = @func_4082() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32]) */;
  %480 = %478.1;
  %481 = %479.1;
  %482 = @func_2915() /* ty=Tensor[(11, 16, 16), float64] */;
  %483 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  (%480, %481, %482, %483)
}

def @func_4342(%var_4307: uint8) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64]) {
  %484 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
  %485 = %484.0;
  %486 = cast(%485, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %487 = reshape(%486, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
  %488 = @func_2959(%487) /* ty=(Tensor[(11, 16, 16), int64],) */;
  %489 = cast(%var_4307, dtype="uint8") /* ty=uint8 */;
  %490 = reshape(%489, newshape=[]) /* ty=uint8 */;
  %491 = @func_3179(%490) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %492 = %491.0;
  %493 = cast(%492, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %494 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  %495 = %488.0;
  %496 = sqrt(%493) /* ty=Tensor[(11, 16, 16), float64] */;
  (%485, %var_4307, %494, %495, %496)
}

def @func_2915() -> Tensor[(11, 16, 16), float64] {
  %497 = @func_2474() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %497.0
}

def @func_7612() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %498 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
  %499 = @func_5506() /* ty=Tensor[(11, 16, 16), float64] */;
  %500 = %498.0;
  (%499, %500)
}

def @func_3747(%var_3718: bool, %var_3719: Tensor[(1, 16, 14), bool]) -> (Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), float64], Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), int64]) {
  %501 = cast(%var_3718, dtype="bool") /* ty=bool */;
  %502 = cast(%var_3719, dtype="bool") /* ty=Tensor[(1, 16, 14), bool] */;
  %503 = cast(%var_3718, dtype="bool") /* ty=bool */;
  %504 = cast(%var_3719, dtype="bool") /* ty=Tensor[(1, 16, 14), bool] */;
  %505 = cast(%var_3718, dtype="uint8") /* ty=uint8 */;
  %506 = reshape(%505, newshape=[]) /* ty=uint8 */;
  %507 = @func_3179(%506) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %508 = logical_or(%501, %502) /* ty=Tensor[(1, 16, 14), bool] */;
  %509 = @func_2915() /* ty=Tensor[(11, 16, 16), float64] */;
  %510 = not_equal(%503, %504) /* ty=Tensor[(1, 16, 14), bool] */;
  %511 = %507.5;
  (%508, %509, %510, %511)
}

def @func_5809() -> (Tensor[(11, 16, 16), float64],) {
  %512 = @func_4590() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %513 = %512.3;
  (%513,)
}

def @func_9317() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %514 = @func_5061() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) */;
  %515 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %516 = %514.0;
  %517 = %515.0;
  (%516, %517)
}

def @func_3777() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(90, 18), float32]) {
  %518 = @func_2429() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */;
  %519 = cast(meta[relay.Constant][30] /* ty=Tensor[(90, 18), float32] */, dtype="float32") /* ty=Tensor[(90, 18), float32] */;
  %520 = reshape(%519, newshape=[1620]) /* ty=Tensor[(1620), float32] */;
  %521 = @func_1763(%520) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], Tensor[(1620), float32], Tensor[(54), float32]) */;
  %522 = %518.0;
  %523 = %521.0;
  (%522, %523, meta[relay.Constant][30] /* ty=Tensor[(90, 18), float32] */)
}

def @func_2772() -> Tensor[(11, 16, 16), float64] {
  %524 = @func_1493() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %524.0
}

def @func_6057() -> (Tensor[(11, 16, 16), float64],) {
  %525 = @func_5809() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %526 = %525.0;
  (%526,)
}

def @func_12064() -> (Tensor[(11, 16, 16), float64],) {
  %527 = @func_10324() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %528 = %527.0;
  (%528,)
}

def @func_5979() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %529 = @func_3208() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %530 = %529.0;
  %531 = @func_2707() /* ty=Tensor[(11, 16, 16), float64] */;
  (%530, %531)
}

def @func_9332() -> Tensor[(11, 16, 16), float64] {
  @func_8684() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_9639() -> Tensor[(11, 16, 16), float64] {
  %532 = @func_4857() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %532.0
}

def @func_3208() -> (Tensor[(11, 16, 16), float64],) {
  %533 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  (%533,)
}

def @func_1425() -> Tensor[(11, 16, 16), float64] {
  @func_1041() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_1763(%var_1760: Tensor[(1620), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], Tensor[(1620), float32], Tensor[(54), float32]) {
  %534 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %535 = cast(%var_1760, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %536 = cast(%var_1760, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %537 = cast(meta[relay.Constant][31] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %538 = reshape(%535, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), float32] */;
  %539 = reshape(%536, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), float32] */;
  %540 = reshape(%537, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %541 = @func_1717(%538, %539, %540) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(1, 6, 9), bool], float32, Tensor[(54), float32]) */;
  %542 = @func_1425() /* ty=Tensor[(11, 16, 16), float64] */;
  %543 = %534.0;
  %544 = %541.3;
  (%542, %543, %544, %var_1760, meta[relay.Constant][31] /* ty=Tensor[(54), float32] */)
}

def @func_5574(%var_5512: Tensor[(9, 3, 13), uint8], %var_5513: Tensor[(9, 3, 13), uint8]) -> (Tensor[(9, 3, 13), float64], Tensor[(11, 16, 16), int64], uint8, Tensor[(7, 4, 13), uint16], Tensor[(364), uint16], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(9, 3, 13), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %545 = cast(%var_5513, dtype="uint8") /* ty=Tensor[(9, 3, 13), uint8] */;
  %546 = shape_of(%var_5512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%var_5512, dtype="uint8") /* ty=Tensor[(9, 3, 13), uint8] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %549 = bitwise_xor(%547, %548) /* ty=Tensor[(9, 3, 13), uint8] */;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %551 = shape_of(%var_5513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%var_5513, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %554 = cast(meta[relay.Constant][32] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %555 = reshape(%554, newshape=[]) /* ty=uint8 */;
  %556 = @func_4342(%555) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64]) */;
  %557 = cast(meta[relay.Constant][33] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %558 = cast(meta[relay.Constant][33] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %559 = reshape(%557, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %560 = reshape(%558, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %561 = @func_2592(%559, %560) /* ty=(Tensor[(7, 4, 13), uint16],) */;
  %562 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
  %563 = @func_3913() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %564 = cast(%var_5512, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %565 = exp(%564) /* ty=Tensor[(9, 3, 13), float64] */;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %567 = rsqrt(%566) /* ty=Tensor[(9, 3, 13), float64] */;
  %568 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
  %569 = %568.2;
  %570 = cast(%567, dtype="uint8") /* ty=Tensor[(9, 3, 13), uint8] */;
  %571 = cast(%569, dtype="uint8") /* ty=uint8 */;
  %572 = @func_5116() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %573 = floor_divide(%552, %553) /* ty=Tensor[(9, 3, 13), float64] */;
  %574 = %556.3;
  %575 = %561.0;
  %576 = %562.1;
  %577 = %563.0;
  %578 = right_shift(%570, %571) /* ty=Tensor[(9, 3, 13), uint8] */;
  %579 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
  %580 = @func_2540() /* ty=Tensor[(11, 16, 16), float64] */;
  %581 = %572.1;
  (%573, %574, meta[relay.Constant][32] /* ty=uint8 */, %575, meta[relay.Constant][33] /* ty=Tensor[(364), uint16] */, %576, %577, %578, %579, %580, %581)
}

def @func_1205(%var_1195: Tensor[(1470), uint8]) -> (Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) {
  %582 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %583 = cast(meta[relay.Constant][34] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %584 = cast(%var_1195, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %585 = reshape(%583, newshape=[]) /* ty=uint8 */;
  %586 = reshape(%584, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint8] */;
  %587 = %582.0;
  %588 = @func_310(%585, %586) /* ty=Tensor[(15, 14, 7), uint8] */;
  (%587, %588, meta[relay.Constant][34] /* ty=uint8 */, %var_1195)
}

def @func_1635() -> (Tensor[(11, 16, 16), float64],) {
  %589 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
  (%589,)
}

def @func_4970() -> (Tensor[(11, 16, 16), float64],) {
  %590 = @func_4276() /* ty=Tensor[(11, 16, 16), float64] */;
  (%590,)
}

def @func_8496() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %591 = @func_4276() /* ty=Tensor[(11, 16, 16), float64] */;
  %592 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  (%591, %592)
}

def @func_10117() -> (Tensor[(14, 4, 4), uint32],) {
  %593 = @func_8784() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(14, 4, 4), uint32], Tensor[(4, 4), float64], Tensor[(224), bool], uint8, Tensor[(30), uint8], Tensor[(11, 16, 16), float64]) */;
  %594 = %593.1;
  (%594,)
}

def @func_9227() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) {
  %595 = @func_5590() /* ty=Tensor[(11, 16, 16), float64] */;
  %596 = @func_2169() /* ty=Tensor[(11, 16, 16), bool] */;
  (%595, %596)
}

def @func_6858() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %597 = @func_1425() /* ty=Tensor[(11, 16, 16), float64] */;
  %598 = @func_3371() /* ty=Tensor[(11, 16, 16), float64] */;
  (%597, %598)
}

def @func_10701() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(11, 16, 16), float64]) {
  %599 = @func_6146() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %600 = @func_5979() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %601 = @func_4666() /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64]) */;
  %602 = cast(meta[relay.Constant][35] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %603 = reshape(%602, newshape=[]) /* ty=uint8 */;
  %604 = @func_4342(%603) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64]) */;
  %605 = @func_6016() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %606 = %599.0;
  %607 = @func_9556() /* ty=Tensor[(11, 16, 16), bool] */;
  %608 = %600.0;
  %609 = %601.1;
  %610 = %604.1;
  %611 = %605.0;
  (%606, %607, %608, %609, %610, meta[relay.Constant][35] /* ty=uint8 */, %611)
}

def @func_1391(%var_1373: uint8, %var_1374: Tensor[(1470), uint8]) -> (Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) {
  %612 = cast(%var_1373, dtype="uint8") /* ty=uint8 */;
  %613 = cast(%var_1374, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %614 = reshape(%612, newshape=[]) /* ty=uint8 */;
  %615 = reshape(%613, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint8] */;
  %616 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
  %617 = cast(%616, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %618 = acos(%617) /* ty=Tensor[(11, 16, 16), float32] */;
  %619 = cast(%618, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %620 = cast(%var_1373, dtype="bool") /* ty=bool */;
  %621 = @func_310(%614, %615) /* ty=Tensor[(15, 14, 7), uint8] */;
  %622 = equal(%619, %620) /* ty=Tensor[(11, 16, 16), bool] */;
  %623 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
  (%621, %var_1374, %622, %623)
}

def @func_2707() -> Tensor[(11, 16, 16), float64] {
  @func_883() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_7223() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %624 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  %625 = @func_6487() /* ty=Tensor[(11, 16, 16), float64] */;
  (%624, %625)
}

def @func_6789() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], uint64, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32], Tensor[(1470), uint8]) {
  %626 = cast(meta[relay.Constant][36] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %627 = @func_2707() /* ty=Tensor[(11, 16, 16), float64] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %629 = reshape(%626, newshape=[]) /* ty=uint64 */;
  %630 = reshape(%628, newshape=[2816]) /* ty=Tensor[(2816), float64] */;
  %631 = @func_4756(%629, %630) /* ty=(Tensor[(1620), float32], uint8, uint64, Tensor[(11, 16, 16), int64], Tensor[(6, 16, 7), float64], Tensor[(54), float32], Tensor[(14, 6, 9), bool], Tensor[(2816), bool]) */;
  %632 = @func_1845() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %633 = cast(meta[relay.Constant][37] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %634 = reshape(%633, newshape=[1, 1470]) /* ty=Tensor[(1, 1470), uint8] */;
  %635 = @func_1260(%634) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(1470), uint8], Tensor[(1, 1470), uint8]) */;
  %636 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  %637 = %631.5;
  %638 = %632.0;
  %639 = %635.0;
  (%627, %636, %637, meta[relay.Constant][36] /* ty=uint64 */, %638, %639, meta[relay.Constant][37] /* ty=Tensor[(1470), uint8] */)
}

def @func_7702(%var_7687: Tensor[(16, 1), float64]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(16, 1), float64]) {
  %640 = @func_7020() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %641 = cast(%var_7687, dtype="float64") /* ty=Tensor[(16, 1), float64] */;
  %642 = reshape(%641, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %643 = @func_6705(%642) /* ty=(Tensor[(11, 16, 16), int64], Tensor[(14, 4, 4), bool], Tensor[(16), float64], Tensor[(2, 32), float64]) */;
  %644 = %640.1;
  %645 = %643.0;
  (%644, %645, %var_7687)
}

def @func_8636() -> Tensor[(11, 16, 16), float64] {
  %646 = @func_7223() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %646.0
}

def @func_9527() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(9, 6), float32], Tensor[(11, 16, 16), float64]) {
  %647 = @func_1845() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %648 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 6), float32] */, dtype="float32") /* ty=Tensor[(9, 6), float32] */;
  %649 = reshape(%648, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
  %650 = @func_1882(%649) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(1470), float64], Tensor[(1, 6, 9), bool], Tensor[(27, 2), float32]) */;
  %651 = @func_7223() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %652 = %647.0;
  %653 = %650.0;
  %654 = %651.1;
  (%652, %653, meta[relay.Constant][38] /* ty=Tensor[(9, 6), float32] */, %654)
}

def @func_10238(%var_10205: Tensor[(3, 7, 14), float64], %var_10206: Tensor[(3, 7, 14), float64]) -> (Tensor[(3, 7, 14), float64], Tensor[(11, 16, 16), float64]) {
  %655 = cast(%var_10206, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %656 = shape_of(%var_10205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%var_10205, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %659 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
  %660 = subtract(%657, %658) /* ty=Tensor[(3, 7, 14), float64] */;
  %661 = %659.4;
  (%660, %661)
}

def @func_11504(%var_11500: Tensor[(768), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(768), float32]) {
  %662 = @func_8465() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %663 = cast(%var_11500, dtype="float32") /* ty=Tensor[(768), float32] */;
  %664 = reshape(%663, newshape=[8, 12, 8]) /* ty=Tensor[(8, 12, 8), float32] */;
  %665 = @func_7815(%664) /* ty=(Tensor[(8, 12, 8), float32], Tensor[(11, 16, 16), float64]) */;
  %666 = %662.0;
  %667 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  %668 = %665.1;
  (%666, %667, %668, %var_11500)
}

def @func_310(%var_270: uint8, %var_271: Tensor[(15, 14, 7), uint8]) -> Tensor[(15, 14, 7), uint8] {
  %669 = cast(%var_270, dtype="uint8") /* ty=uint8 */;
  %670 = cast(%var_271, dtype="uint8") /* ty=Tensor[(15, 14, 7), uint8] */;
  minimum(%669, %670) /* ty=Tensor[(15, 14, 7), uint8] */
}

def @func_8864() -> uint8 {
  %671 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
  %671.3
}

def @func_4276() -> Tensor[(11, 16, 16), float64] {
  %672 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %672.0
}

def @func_2169() -> Tensor[(11, 16, 16), bool] {
  %673 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %675 = asin(%674) /* ty=Tensor[(11, 16, 16), float64] */;
  %676 = cast(%673, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%678, %679) /* ty=Tensor[(11, 16, 16), bool] */
}

def @func_3523(%var_3433: Tensor[(11, 4, 4), uint8], %var_3434: Tensor[(11, 4, 4), uint8], %var_3451: uint8, %var_3457: Tensor[(11, 4, 4), uint8]) -> (Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(11, 4, 4), uint8], Tensor[(11, 4, 4), float32], Tensor[(11, 16, 16), float64]) {
  %680 = cast(%var_3451, dtype="uint8") /* ty=uint8 */;
  %681 = reshape(%680, newshape=[]) /* ty=uint8 */;
  %682 = @func_1093(%681) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
  %683 = cast(%var_3434, dtype="uint8") /* ty=Tensor[(11, 4, 4), uint8] */;
  %684 = shape_of(%var_3433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%var_3433, dtype="uint8") /* ty=Tensor[(11, 4, 4), uint8] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %687 = bitwise_and(%685, %686) /* ty=Tensor[(11, 4, 4), uint8] */;
  %688 = cast(%var_3457, dtype="uint8") /* ty=Tensor[(11, 4, 4), uint8] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%687, dtype="uint8") /* ty=Tensor[(11, 4, 4), uint8] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %692 = cast(%687, dtype="float64") /* ty=Tensor[(11, 4, 4), float64] */;
  %693 = exp(%692) /* ty=Tensor[(11, 4, 4), float64] */;
  %694 = cast(%var_3434, dtype="float32") /* ty=Tensor[(11, 4, 4), float32] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%693, dtype="float32") /* ty=Tensor[(11, 4, 4), float32] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %698 = @func_2862() /* ty=Tensor[(11, 16, 16), float64] */;
  %699 = %682.4;
  %700 = add(%690, %691) /* ty=Tensor[(11, 4, 4), uint8] */;
  %701 = floor_divide(%696, %697) /* ty=Tensor[(11, 4, 4), float32] */;
  %702 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
  (%698, %699, %var_3451, %700, %701, %702)
}

def @func_9891(%var_9750: Tensor[(5, 52), float32], %var_9764: Tensor[(5, 52), float32], %var_9834: Tensor[(5, 52), float64], %var_9840: Tensor[(5, 52), float64]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(5, 52), bool], Tensor[(5, 52), uint8], Tensor[(11, 16, 16), float64], Tensor[(5, 52), float64], Tensor[(5, 52), int32], Tensor[(5, 52), float64]) {
  %703 = @func_8895() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %704 = %703.0;
  %705 = cast(%704, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %706 = reshape(%705, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float32] */;
  %707 = @func_3636(%706) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */;
  %708 = cast(%var_9750, dtype="float32") /* ty=Tensor[(5, 52), float32] */;
  %709 = exp(%708) /* ty=Tensor[(5, 52), float32] */;
  %710 = cast(%var_9764, dtype="uint64") /* ty=Tensor[(5, 52), uint64] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(2), int32] */;
  %712 = cast(%709, dtype="uint64") /* ty=Tensor[(5, 52), uint64] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %714 = right_shift(%712, %713) /* ty=Tensor[(5, 52), uint64] */;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(5, 52), float32] */;
  %716 = tan(%715) /* ty=Tensor[(5, 52), float32] */;
  %717 = cast(%716, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
  %718 = log10(%717) /* ty=Tensor[(5, 52), float64] */;
  %719 = cast(%var_9834, dtype="bool") /* ty=Tensor[(5, 52), bool] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(2), int32] */;
  %721 = cast(%718, dtype="bool") /* ty=Tensor[(5, 52), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %723 = cast(%var_9840, dtype="uint8") /* ty=Tensor[(5, 52), uint8] */;
  %724 = shape_of(%718, dtype="int32") /* ty=Tensor[(2), int32] */;
  %725 = cast(%718, dtype="uint8") /* ty=Tensor[(5, 52), uint8] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %727 = @func_3668() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %728 = cast(%718, dtype="float32") /* ty=Tensor[(5, 52), float32] */;
  %729 = cos(%728) /* ty=Tensor[(5, 52), float32] */;
  %730 = cast(%var_9750, dtype="float32") /* ty=Tensor[(5, 52), float32] */;
  %731 = reshape(%730, newshape=[13, 4, 5]) /* ty=Tensor[(13, 4, 5), float32] */;
  %732 = @func_8604(%731) /* ty=Tensor[(13, 4, 5), float32] */;
  %733 = cast(%732, dtype="float64") /* ty=Tensor[(13, 4, 5), float64] */;
  %734 = shape_of(%729, dtype="int32") /* ty=Tensor[(2), int32] */;
  %735 = cast(%729, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %737 = cast(%var_9750, dtype="float32") /* ty=Tensor[(5, 52), float32] */;
  %738 = shape_of(%714, dtype="int32") /* ty=Tensor[(2), int32] */;
  %739 = cast(%714, dtype="float32") /* ty=Tensor[(5, 52), float32] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %741 = floor_mod(%739, %740) /* ty=Tensor[(5, 52), float32] */;
  %742 = cast(%741, dtype="int32") /* ty=Tensor[(5, 52), int32] */;
  %743 = shape_of(%716, dtype="int32") /* ty=Tensor[(2), int32] */;
  %744 = cast(%716, dtype="int32") /* ty=Tensor[(5, 52), int32] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %746 = cast(%729, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
  %747 = asin(%746) /* ty=Tensor[(5, 52), float64] */;
  %748 = cast(%747, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
  %749 = @func_6465() /* ty=Tensor[(11, 16, 16), float64] */;
  %750 = @func_2707() /* ty=Tensor[(11, 16, 16), float64] */;
  %751 = %707.1;
  %752 = less(%721, %722) /* ty=Tensor[(5, 52), bool] */;
  %753 = add(%725, %726) /* ty=Tensor[(5, 52), uint8] */;
  %754 = %727.0;
  %755 = mod(%735, %736) /* ty=Tensor[(5, 52), float64] */;
  %756 = left_shift(%744, %745) /* ty=Tensor[(5, 52), int32] */;
  %757 = sin(%748) /* ty=Tensor[(5, 52), float64] */;
  (%749, %750, %704, %751, %752, %753, %754, %755, %756, %757)
}

def @func_1717(%var_1703: Tensor[(12, 15, 9), float32], %var_1704: Tensor[(12, 15, 9), float32], %var_1713: Tensor[(54), float32]) -> (Tensor[(12, 15, 9), float32], Tensor[(1, 6, 9), bool], float32, Tensor[(54), float32]) {
  %758 = cast(%var_1704, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
  %759 = shape_of(%var_1703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%var_1703, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %762 = cast(8.52173f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %763 = cast(%var_1713, dtype="float32") /* ty=Tensor[(54), float32] */;
  %764 = reshape(%762, newshape=[]) /* ty=float32 */;
  %765 = reshape(%763, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), float32] */;
  %766 = @func_655(%764, %765) /* ty=(Tensor[(1, 6, 9), bool],) */;
  %767 = mod(%760, %761) /* ty=Tensor[(12, 15, 9), float32] */;
  %768 = %766.0;
  (%767, %768, 8.52173f /* ty=float32 */, %var_1713)
}

def @func_7659() -> Tensor[(11, 16, 16), float64] {
  %769 = @func_6332() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %769.0
}

def @func_1597(%var_1571: Tensor[(7, 210), uint8]) -> (Tensor[(11, 16, 16), bool], uint8, Tensor[(7, 210), uint8], Tensor[(11, 16, 16), uint16]) {
  %770 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %771 = %770.0;
  %772 = @func_883() /* ty=Tensor[(11, 16, 16), float64] */;
  %773 = cast(%772, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %774 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%771, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %777 = cast(%var_1571, dtype="uint8") /* ty=Tensor[(7, 210), uint8] */;
  %778 = reshape(%777, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %779 = @func_1205(%778) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
  %780 = %779.2;
  %781 = cast(%780, dtype="uint8") /* ty=uint8 */;
  %782 = reshape(%781, newshape=[]) /* ty=uint8 */;
  %783 = @func_1093(%782) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
  %784 = %783.2;
  %785 = cast(%784, dtype="uint16") /* ty=Tensor[(11, 16, 16), uint16] */;
  %786 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%772, dtype="uint16") /* ty=Tensor[(11, 16, 16), uint16] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %789 = logical_and(%775, %776) /* ty=Tensor[(11, 16, 16), bool] */;
  %790 = logical_xor(%787, %788) /* ty=Tensor[(11, 16, 16), uint16] */;
  (%789, %780, %var_1571, %790)
}

def @func_5616() -> Tensor[(11, 16, 16), float64] {
  %791 = @func_1493() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %791.0
}

def @func_6453(%var_6446: Tensor[(16, 12, 7), float32]) -> Tensor[(16, 12, 7), float32] {
  %792 = cast(%var_6446, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  log(%792) /* ty=Tensor[(16, 12, 7), float32] */
}

def @func_3197() -> (Tensor[(11, 16, 16), float64],) {
  %793 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
  (%793,)
}

def @func_1432() -> Tensor[(11, 16, 16), float64] {
  %794 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %794.0
}

def @func_1661() -> Tensor[(11, 16, 16), float64] {
  @func_1041() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_7845() -> (Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(16), float64]) {
  %795 = @func_6789() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], uint64, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32], Tensor[(1470), uint8]) */;
  %796 = cast(meta[relay.Constant][39] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %797 = reshape(%796, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %798 = @func_6705(%797) /* ty=(Tensor[(11, 16, 16), int64], Tensor[(14, 4, 4), bool], Tensor[(16), float64], Tensor[(2, 32), float64]) */;
  %799 = %795.1;
  %800 = %798.2;
  (%799, %800, meta[relay.Constant][39] /* ty=Tensor[(16), float64] */)
}

def @func_8212() -> (Tensor[(11, 16, 16), float64],) {
  %801 = @func_7245() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %802 = %801.1;
  (%802,)
}

def @func_9556() -> Tensor[(11, 16, 16), bool] {
  %803 = @func_9227() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */;
  %803.1
}

def @func_11882() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(10, 5, 2), bool], Tensor[(100), bool], Tensor[(16), float64]) {
  %804 = @func_8496() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %805 = @func_4666() /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64]) */;
  %806 = cast(meta[relay.Constant][40] /* ty=Tensor[(100), bool] */, dtype="bool") /* ty=Tensor[(100), bool] */;
  %807 = cast(meta[relay.Constant][40] /* ty=Tensor[(100), bool] */, dtype="bool") /* ty=Tensor[(100), bool] */;
  %808 = reshape(%806, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), bool] */;
  %809 = reshape(%807, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), bool] */;
  %810 = @func_7845() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(16), float64]) */;
  %811 = %804.0;
  %812 = %805.1;
  %813 = @func_7117(%808, %809) /* ty=Tensor[(10, 5, 2), bool] */;
  %814 = %810.1;
  (%811, %812, %813, meta[relay.Constant][40] /* ty=Tensor[(100), bool] */, %814)
}

def @func_7542(%var_7537: Tensor[(5, 1, 6), uint8]) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(5, 1, 6), int32]) {
  %815 = @func_1635() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %816 = @func_6057() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %817 = cast(meta[relay.Constant][41] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %818 = reshape(%817, newshape=[]) /* ty=uint8 */;
  %819 = @func_6182(%818) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8) */;
  %820 = %819.2;
  %821 = cast(%820, dtype="int32") /* ty=int32 */;
  %822 = cast(%var_7537, dtype="int32") /* ty=Tensor[(5, 1, 6), int32] */;
  %823 = %815.0;
  %824 = %816.0;
  %825 = @func_1819() /* ty=Tensor[(11, 16, 16), float64] */;
  %826 = left_shift(%821, %822) /* ty=Tensor[(5, 1, 6), int32] */;
  (%823, meta[relay.Constant][41] /* ty=uint8 */, %824, %825, %826)
}

def @func_2429() -> (Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) {
  %827 = cast(meta[relay.Constant][42] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %828 = cast(meta[relay.Constant][43] /* ty=Tensor[(1620), float32] */, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %829 = reshape(%827, newshape=[]) /* ty=uint8 */;
  %830 = reshape(%828, newshape=[1620]) /* ty=Tensor[(1620), float32] */;
  %831 = @func_2257(%829, %830) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470, 1), uint8], Tensor[(11, 16, 16), float64], Tensor[(1620), float32]) */;
  %832 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  %833 = %831.2;
  (%832, %833, meta[relay.Constant][42] /* ty=uint8 */, meta[relay.Constant][43] /* ty=Tensor[(1620), float32] */)
}

def @func_1845() -> (Tensor[(11, 16, 16), float64],) {
  %834 = @func_1819() /* ty=Tensor[(11, 16, 16), float64] */;
  (%834,)
}

def @func_7908() -> (Tensor[(11, 16, 16), float64],) {
  %835 = @func_4276() /* ty=Tensor[(11, 16, 16), float64] */;
  (%835,)
}

def @func_10559(%var_10501: Tensor[(90, 18), float32], %var_10506: Tensor[(90, 18), float32], %var_10527: uint64) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(90, 18), float64], Tensor[(11, 16, 16), float64], Tensor[(1, 13), float32], Tensor[(11, 16, 16), float32], Tensor[(?, 13), uint16], Tensor[(90, 18), float64], Tensor[(11, 16, 16), float64]) {
  %836 = @func_2474() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %837 = cast(%var_10501, dtype="float32") /* ty=Tensor[(90, 18), float32] */;
  %838 = reshape(%837, newshape=[1620]) /* ty=Tensor[(1620), float32] */;
  %839 = @func_1763(%838) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], Tensor[(1620), float32], Tensor[(54), float32]) */;
  %840 = cast(%var_10506, dtype="float64") /* ty=Tensor[(90, 18), float64] */;
  %841 = shape_of(%var_10501, dtype="int32") /* ty=Tensor[(2), int32] */;
  %842 = cast(%var_10501, dtype="float64") /* ty=Tensor[(90, 18), float64] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %844 = @func_5979() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %845 = cast(%var_10527, dtype="uint64") /* ty=uint64 */;
  %846 = reshape(%845, newshape=[]) /* ty=uint64 */;
  %847 = @func_4000(%846) /* ty=(uint8, Tensor[(11, 16, 16), float32], Tensor[(7, 9, 11), uint64]) */;
  %848 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
  %849 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
  %850 = reshape(%848, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
  %851 = reshape(%849, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
  %852 = @func_9465(%850, %851) /* ty=Tensor[(?, 13), float32] */;
  %853 = cast(%var_10527, dtype="uint16") /* ty=uint16 */;
  %854 = cast(%852, dtype="uint16") /* ty=Tensor[(?, 13), uint16] */;
  %855 = cast(%var_10506, dtype="float64") /* ty=Tensor[(90, 18), float64] */;
  %856 = sigmoid(%855) /* ty=Tensor[(90, 18), float64] */;
  %857 = cast(%856, dtype="float64") /* ty=Tensor[(90, 18), float64] */;
  %858 = %836.0;
  %859 = %839.1;
  %860 = mod(%842, %843) /* ty=Tensor[(90, 18), float64] */;
  %861 = %844.0;
  %862 = %847.1;
  %863 = minimum(%853, %854) /* ty=Tensor[(?, 13), uint16] */;
  %864 = cos(%857) /* ty=Tensor[(90, 18), float64] */;
  %865 = @func_2540() /* ty=Tensor[(11, 16, 16), float64] */;
  (%858, %859, %860, %861, meta[relay.Constant][44] /* ty=Tensor[(1, 13), float32] */, %862, %863, %864, %865)
}

def @func_3582(%var_3531: int16, %var_3532: Tensor[(4, 7, 8), int16], %var_3578: Tensor[(1470), uint8]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(4, 7, 8), float32], Tensor[(11, 16, 16), float64], Tensor[(1470), uint8]) {
  %866 = @func_1845() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %867 = @func_1694() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %868 = cast(%var_3531, dtype="int16") /* ty=int16 */;
  %869 = cast(%var_3532, dtype="int16") /* ty=Tensor[(4, 7, 8), int16] */;
  %870 = multiply(%868, %869) /* ty=Tensor[(4, 7, 8), int16] */;
  %871 = cast(%870, dtype="float32") /* ty=Tensor[(4, 7, 8), float32] */;
  %872 = cast(%var_3531, dtype="uint8") /* ty=uint8 */;
  %873 = cast(%var_3578, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %874 = reshape(%872, newshape=[]) /* ty=uint8 */;
  %875 = reshape(%873, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %876 = @func_1391(%874, %875) /* ty=(Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) */;
  %877 = %866.0;
  %878 = %867.0;
  %879 = log2(%871) /* ty=Tensor[(4, 7, 8), float32] */;
  %880 = %876.3;
  (%877, %878, %879, %880, %var_3578)
}

def @func_12246() -> (Tensor[(11, 16, 16), float64], uint8, uint8) {
  %881 = cast(meta[relay.Constant][45] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %882 = reshape(%881, newshape=[]) /* ty=uint8 */;
  %883 = @func_4832(%882) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(8, 28), int16]) */;
  %884 = @func_10356() /* ty=Tensor[(11, 16, 16), float64] */;
  %885 = %883.2;
  (%884, %885, meta[relay.Constant][45] /* ty=uint8 */)
}

def @func_4666() -> (Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64]) {
  %886 = @func_2862() /* ty=Tensor[(11, 16, 16), float64] */;
  %887 = @func_2862() /* ty=Tensor[(11, 16, 16), float64] */;
  %888 = cast(%887, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %889 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %890 = cast(%886, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %892 = @func_2474() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %893 = power(%890, %891) /* ty=Tensor[(11, 16, 16), float32] */;
  %894 = %892.0;
  (%893, %894)
}

def @func_4756(%var_4712: uint64, %var_4752: Tensor[(2816), float64]) -> (Tensor[(1620), float32], uint8, uint64, Tensor[(11, 16, 16), int64], Tensor[(6, 16, 7), float64], Tensor[(54), float32], Tensor[(14, 6, 9), bool], Tensor[(2816), bool]) {
  %895 = @func_2429() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */;
  %896 = cast(%var_4712, dtype="uint64") /* ty=uint64 */;
  %897 = reshape(%896, newshape=[]) /* ty=uint64 */;
  %898 = @func_4000(%897) /* ty=(uint8, Tensor[(11, 16, 16), float32], Tensor[(7, 9, 11), uint64]) */;
  %899 = cast(meta[relay.Constant][46] /* ty=Tensor[(2816), float64] */, dtype="float64") /* ty=Tensor[(2816), float64] */;
  %900 = reshape(%899, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
  %901 = @func_2959(%900) /* ty=(Tensor[(11, 16, 16), int64],) */;
  %902 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
  %903 = cast(%var_4712, dtype="float32") /* ty=float32 */;
  %904 = cast(meta[relay.Constant][47] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %905 = reshape(%903, newshape=[]) /* ty=float32 */;
  %906 = reshape(%904, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), float32] */;
  %907 = @func_655(%905, %906) /* ty=(Tensor[(1, 6, 9), bool],) */;
  %908 = %907.0;
  %909 = cast(%908, dtype="bool") /* ty=Tensor[(1, 6, 9), bool] */;
  %910 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 6, 9), bool] */, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
  %911 = cast(%var_4752, dtype="bool") /* ty=Tensor[(2816), bool] */;
  %912 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(2816), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %913 = cast(meta[relay.Constant][46] /* ty=Tensor[(2816), float64] */, dtype="bool") /* ty=Tensor[(2816), bool] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?), bool] */;
  %915 = %895.3;
  %916 = %898.0;
  %917 = %901.0;
  %918 = %902.1;
  %919 = logical_and(%909, %910) /* ty=Tensor[(14, 6, 9), bool] */;
  %920 = greater(%913, %914) /* ty=Tensor[(2816), bool] */;
  (%915, %916, %var_4712, %917, %918, meta[relay.Constant][47] /* ty=Tensor[(54), float32] */, %919, %920)
}

def @func_10160() -> (uint8,) {
  %921 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
  %922 = %921.3;
  (%922,)
}

def @func_9465(%var_9456: Tensor[(1, 13), float32], %var_9457: Tensor[(1, 13), float32]) -> Tensor[(?, 13), float32] {
  %923 = cast(%var_9457, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
  %924 = shape_of(%var_9456, dtype="int32") /* ty=Tensor[(2), int32] */;
  %925 = cast(%var_9456, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
  %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  divide(%925, %926) /* ty=Tensor[(?, 13), float32] */
}

def @func_1819() -> Tensor[(11, 16, 16), float64] {
  @func_1041() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_5590() -> Tensor[(11, 16, 16), float64] {
  %927 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %927.0
}

def @func_12148() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %928 = @func_7728() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %929 = @func_4082() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32]) */;
  %930 = @func_10997() /* ty=Tensor[(11, 16, 16), float64] */;
  %931 = %928.0;
  %932 = %929.0;
  (%930, %931, %932)
}

def @func_5148() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %933 = @func_2707() /* ty=Tensor[(11, 16, 16), float64] */;
  %934 = cast(%933, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %935 = rsqrt(%934) /* ty=Tensor[(11, 16, 16), float64] */;
  %936 = @func_2540() /* ty=Tensor[(11, 16, 16), float64] */;
  (%935, %936)
}

def @main(%var_12306: Tensor[(4, 12, 10), float64]) -> (Tensor[(11, 16, 16), float64], bool, bool, Tensor[(4, 12, 10), bool], Tensor[(11, 16, 16), float64], Tensor[(4, 12, 10), float64]) {
  %937 = @func_9317() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %938 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %939 = reshape(%938, newshape=[]) /* ty=bool */;
  %940 = @func_8310(%939) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(1, 16, 14), bool], bool, Tensor[(224), bool]) */;
  %941 = cast(%var_12306, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %942 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(4, 12, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(meta[relay.Constant][49] /* ty=Tensor[(4, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %945 = floor_divide(%943, %944) /* ty=Tensor[(4, 12, 10), float64] */;
  %946 = cast(%945, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %947 = rsqrt(%946) /* ty=Tensor[(4, 12, 10), float32] */;
  %948 = cast(%945, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %949 = shape_of(%947, dtype="int32") /* ty=Tensor[(3), int32] */;
  %950 = cast(%947, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %951 = dyn.reshape(%948, %949, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %952 = floor_mod(%950, %951) /* ty=Tensor[(4, 12, 10), float64] */;
  %953 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 12, 10), float64] */, dtype="bool") /* ty=Tensor[(4, 12, 10), bool] */;
  %954 = shape_of(%952, dtype="int32") /* ty=Tensor[(3), int32] */;
  %955 = cast(%952, dtype="bool") /* ty=Tensor[(4, 12, 10), bool] */;
  %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %957 = @func_5809() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %958 = cast(%var_12306, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %959 = %937.1;
  %960 = %940.4;
  %961 = greater(%955, %956) /* ty=Tensor[(4, 12, 10), bool] */;
  %962 = %957.0;
  %963 = log10(%958) /* ty=Tensor[(4, 12, 10), float64] */;
  (%959, %960, True /* ty=bool */, %961, %962, %963)
}

def @func_2410() -> (Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) {
  %964 = cast(meta[relay.Constant][51] /* ty=Tensor[(6, 16, 7), float32] */, dtype="float32") /* ty=Tensor[(6, 16, 7), float32] */;
  %965 = log10(%964) /* ty=Tensor[(6, 16, 7), float32] */;
  %966 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 16, 7), float32] */, dtype="int64") /* ty=Tensor[(6, 16, 7), int64] */;
  %967 = shape_of(%965, dtype="int32") /* ty=Tensor[(3), int32] */;
  %968 = cast(%965, dtype="int64") /* ty=Tensor[(6, 16, 7), int64] */;
  %969 = dyn.reshape(%966, %967, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %970 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 16, 7), float32] */, dtype="float64") /* ty=Tensor[(6, 16, 7), float64] */;
  %971 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(6, 16, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %972 = cast(meta[relay.Constant][51] /* ty=Tensor[(6, 16, 7), float32] */, dtype="float64") /* ty=Tensor[(6, 16, 7), float64] */;
  %973 = dyn.reshape(%970, %971, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %974 = @func_1493() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %975 = subtract(%968, %969) /* ty=Tensor[(6, 16, 7), int64] */;
  %976 = floor_mod(%972, %973) /* ty=Tensor[(6, 16, 7), float64] */;
  %977 = %974.0;
  (%975, %976, %977)
}

def @func_11760(%var_11757: Tensor[(224), bool]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], bool, Tensor[(224), bool]) {
  %978 = @func_6057() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %979 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %980 = cast(%var_11757, dtype="bool") /* ty=Tensor[(224), bool] */;
  %981 = reshape(%979, newshape=[]) /* ty=bool */;
  %982 = reshape(%980, newshape=[1, 16, 14]) /* ty=Tensor[(1, 16, 14), bool] */;
  %983 = @func_3747(%981, %982) /* ty=(Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), float64], Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), int64]) */;
  %984 = %978.0;
  %985 = %983.1;
  (%984, %985, True /* ty=bool */, %var_11757)
}

def @func_5717(%var_5710: Tensor[(39, 9), uint8]) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(39, 9), uint8], Tensor[(11, 16, 16), float64]) {
  %986 = @func_3208() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %987 = cast(%var_5710, dtype="uint8") /* ty=Tensor[(39, 9), uint8] */;
  %988 = cast(%var_5710, dtype="uint8") /* ty=Tensor[(39, 9), uint8] */;
  %989 = reshape(%987, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), uint8] */;
  %990 = reshape(%988, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), uint8] */;
  %991 = @func_5574(%989, %990) /* ty=(Tensor[(9, 3, 13), float64], Tensor[(11, 16, 16), int64], uint8, Tensor[(7, 4, 13), uint16], Tensor[(364), uint16], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(9, 3, 13), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %992 = %986.0;
  %993 = %991.2;
  %994 = @func_4276() /* ty=Tensor[(11, 16, 16), float64] */;
  (%992, %993, %var_5710, %994)
}

def @func_4409() -> (Tensor[(11, 16, 16), float64],) {
  %995 = @func_3913() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %996 = %995.0;
  (%996,)
}

def @func_1041() -> Tensor[(11, 16, 16), float64] {
  %997 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %997.0
}

def @func_1923(%var_1898: Tensor[(1620), float32], %var_1908: uint8, %var_1909: Tensor[(1470), uint8]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(1620), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, Tensor[(1470), uint8]) {
  %998 = @func_1635() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %999 = cast(%var_1898, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %1000 = reshape(%999, newshape=[1620]) /* ty=Tensor[(1620), float32] */;
  %1001 = @func_1763(%1000) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], Tensor[(1620), float32], Tensor[(54), float32]) */;
  %1002 = @func_1493() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1003 = cast(%var_1908, dtype="uint8") /* ty=uint8 */;
  %1004 = cast(%var_1909, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %1005 = reshape(%1003, newshape=[]) /* ty=uint8 */;
  %1006 = reshape(%1004, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %1007 = @func_1391(%1005, %1006) /* ty=(Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) */;
  %1008 = %998.0;
  %1009 = %1001.0;
  %1010 = %1002.0;
  %1011 = %1007.3;
  (%1008, %1009, %var_1898, %1010, %1011, %var_1908, %var_1909)
}

def @func_7728() -> (Tensor[(11, 16, 16), float64],) {
  %1012 = @func_5818() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1013 = %1012.0;
  (%1013,)
}

def @func_7924() -> (Tensor[(11, 16, 16), float64],) {
  %1014 = @func_6146() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %1015 = %1014.0;
  (%1015,)
}

def @func_11323() -> Tensor[(11, 16, 16), float64] {
  %1016 = @func_4970() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1016.0
}

def @func_4590() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %1017 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
  %1018 = cast(%1017, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %1019 = reshape(%1018, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float32] */;
  %1020 = @func_3636(%1019) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */;
  %1021 = @func_4082() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32]) */;
  %1022 = @func_2738() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %1023 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  %1024 = %1020.2;
  %1025 = %1021.0;
  %1026 = %1022.2;
  (%1017, %1023, %1024, %1025, %1026)
}

def @func_8552() -> (Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(693), float64]) {
  %1027 = cast(meta[relay.Constant][54] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %1028 = reshape(%1027, newshape=[9, 11, 7]) /* ty=Tensor[(9, 11, 7), float64] */;
  %1029 = @func_1979(%1028) /* ty=(Tensor[(9, 11, 7), float64], Tensor[(11, 16, 16), float64]) */;
  %1030 = @func_2169() /* ty=Tensor[(11, 16, 16), bool] */;
  %1031 = %1029.1;
  (%1030, %1031, meta[relay.Constant][54] /* ty=Tensor[(693), float64] */)
}

def @func_5818() -> (Tensor[(11, 16, 16), float64],) {
  %1032 = @func_4228() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %1033 = %1032.0;
  (%1033,)
}

def @func_2738() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %1034 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
  %1035 = %1034.2;
  %1036 = @func_1819() /* ty=Tensor[(11, 16, 16), float64] */;
  %1037 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  (%1035, %1036, %1037)
}

def @func_7245() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %1038 = @func_4228() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %1039 = @func_5979() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %1040 = %1038.0;
  %1041 = %1039.0;
  (%1040, %1041)
}

def @func_7424(%var_7358: Tensor[(64), float64]) -> (Tensor[(11, 16, 16), bool], Tensor[(16), float64], Tensor[(64), float64], Tensor[(1620), float32], Tensor[(14, 4, 4), float32], Tensor[(11, 16, 16), float64]) {
  %1042 = @func_3901() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */;
  %1043 = @func_2429() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */;
  %1044 = cast(meta[relay.Constant][55] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %1045 = cast(%var_7358, dtype="float64") /* ty=Tensor[(64), float64] */;
  %1046 = reshape(%1044, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %1047 = reshape(%1045, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %1048 = @func_3049(%1046, %1047) /* ty=(Tensor[(14, 4, 4), bool], Tensor[(4, 4, 4), int8], Tensor[(1, 4, 4), float32]) */;
  %1049 = %1048.0;
  %1050 = cast(%1049, dtype="float32") /* ty=Tensor[(14, 4, 4), float32] */;
  %1051 = %1042.1;
  %1052 = %1043.3;
  %1053 = atan(%1050) /* ty=Tensor[(14, 4, 4), float32] */;
  %1054 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  (%1051, meta[relay.Constant][55] /* ty=Tensor[(16), float64] */, %var_7358, %1052, %1053, %1054)
}

def @func_11963(%var_11919: Tensor[(13, 4, 8), int64], %var_11944: Tensor[(13, 4, 8), float64], %var_11956: Tensor[(54), float32]) -> (Tensor[(13, 4, 8), bool], Tensor[(11, 16, 16), float64], Tensor[(54), float32]) {
  %1055 = cast(meta[relay.Constant][56] /* ty=Tensor[(13, 4, 1), int64] */, dtype="bool") /* ty=Tensor[(13, 4, 1), bool] */;
  %1056 = cast(%var_11919, dtype="bool") /* ty=Tensor[(13, 4, 8), bool] */;
  %1057 = less(%1055, %1056) /* ty=Tensor[(13, 4, 8), bool] */;
  %1058 = cast(%1057, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
  %1059 = atanh(%1058) /* ty=Tensor[(13, 4, 8), float64] */;
  %1060 = cast(%var_11944, dtype="bool") /* ty=Tensor[(13, 4, 8), bool] */;
  %1061 = shape_of(%1059, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1062 = cast(%1059, dtype="bool") /* ty=Tensor[(13, 4, 8), bool] */;
  %1063 = dyn.reshape(%1060, %1061, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1064 = cast(%var_11956, dtype="float32") /* ty=Tensor[(54), float32] */;
  %1065 = reshape(%1064, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
  %1066 = @func_1882(%1065) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(1470), float64], Tensor[(1, 6, 9), bool], Tensor[(27, 2), float32]) */;
  %1067 = equal(%1062, %1063) /* ty=Tensor[(13, 4, 8), bool] */;
  %1068 = %1066.0;
  (%1067, %1068, %var_11956)
}

def @func_10470(%var_10411: Tensor[(16, 9, 11), int32], %var_10422: uint8, %var_10457: Tensor[(360), int8]) -> (Tensor[(16, 9, 11), int8], Tensor[(11, 16, 16), float64], uint8, Tensor[(1, 9, 11), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) {
  %1069 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 9, 11), int32] */, dtype="int32") /* ty=Tensor[(1, 9, 11), int32] */;
  %1070 = cast(%var_10411, dtype="int32") /* ty=Tensor[(16, 9, 11), int32] */;
  %1071 = bitwise_xor(%1069, %1070) /* ty=Tensor[(16, 9, 11), int32] */;
  %1072 = cast(%1071, dtype="int8") /* ty=Tensor[(16, 9, 11), int8] */;
  %1073 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 9, 11), int32] */, dtype="int8") /* ty=Tensor[(1, 9, 11), int8] */;
  %1074 = cast(%var_10422, dtype="uint8") /* ty=uint8 */;
  %1075 = reshape(%1074, newshape=[]) /* ty=uint8 */;
  %1076 = @func_3179(%1075) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %1077 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 9, 11), int32] */, dtype="float32") /* ty=Tensor[(1, 9, 11), float32] */;
  %1078 = cast(%var_10457, dtype="int8") /* ty=Tensor[(360), int8] */;
  %1079 = reshape(%1078, newshape=[12, 6, 5]) /* ty=Tensor[(12, 6, 5), int8] */;
  %1080 = @func_524(%1079) /* ty=(Tensor[(12, 6, 5), int8],) */;
  %1081 = @func_8465() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %1082 = bitwise_and(%1072, %1073) /* ty=Tensor[(16, 9, 11), int8] */;
  %1083 = %1076.0;
  %1084 = asin(%1077) /* ty=Tensor[(1, 9, 11), float32] */;
  %1085 = %1080.0;
  %1086 = %1081.1;
  (%1082, %1083, %var_10422, %1084, %1085, %var_10457, %1086)
}

def @func_11257() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8) {
  %1087 = @func_5979() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %1088 = @func_5979() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %1089 = @func_10160() /* ty=(uint8,) */;
  %1090 = %1087.1;
  %1091 = %1088.0;
  %1092 = %1089.0;
  (%1090, %1091, %1092)
}

def @func_4424() -> Tensor[(6, 16, 7), int64] {
  %1093 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
  %1093.0
}

def @func_8143() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %1094 = @func_5809() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1095 = @func_7908() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1096 = %1094.0;
  %1097 = %1095.0;
  (%1096, %1097)
}

def @func_2959(%var_2952: Tensor[(11, 16, 16), float64]) -> (Tensor[(11, 16, 16), int64],) {
  %1098 = @func_2306() /* ty=Tensor[(11, 16, 16), float64] */;
  %1099 = cast(%var_2952, dtype="int64") /* ty=Tensor[(11, 16, 16), int64] */;
  %1100 = shape_of(%1098, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1101 = cast(%1098, dtype="int64") /* ty=Tensor[(11, 16, 16), int64] */;
  %1102 = dyn.reshape(%1099, %1100, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1103 = bitwise_and(%1101, %1102) /* ty=Tensor[(11, 16, 16), int64] */;
  (%1103,)
}

def @func_7020() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %1104 = @func_3901() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */;
  %1105 = @func_2429() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */;
  %1106 = %1104.0;
  %1107 = %1105.0;
  (%1106, %1107)
}

def @func_10064(%var_10051: Tensor[(13), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(7, 210), uint8], Tensor[(1470), uint8], Tensor[(?, 13), float32], Tensor[(13), float32], Tensor[(11, 16, 16), float64]) {
  %1108 = @func_6057() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1109 = @func_5809() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1110 = cast(meta[relay.Constant][58] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %1111 = reshape(%1110, newshape=[7, 210]) /* ty=Tensor[(7, 210), uint8] */;
  %1112 = @func_1597(%1111) /* ty=(Tensor[(11, 16, 16), bool], uint8, Tensor[(7, 210), uint8], Tensor[(11, 16, 16), uint16]) */;
  %1113 = cast(%var_10051, dtype="float32") /* ty=Tensor[(13), float32] */;
  %1114 = cast(%var_10051, dtype="float32") /* ty=Tensor[(13), float32] */;
  %1115 = reshape(%1113, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
  %1116 = reshape(%1114, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
  %1117 = @func_3197() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1118 = %1108.0;
  %1119 = %1109.0;
  %1120 = %1112.2;
  %1121 = @func_9465(%1115, %1116) /* ty=Tensor[(?, 13), float32] */;
  %1122 = %1117.0;
  (%1118, %1119, %1120, meta[relay.Constant][58] /* ty=Tensor[(1470), uint8] */, %1121, %var_10051, %1122)
}

def @func_10099() -> (Tensor[(11, 16, 16), float64],) {
  %1123 = @func_4590() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %1124 = %1123.0;
  (%1124,)
}

def @func_6332() -> (Tensor[(11, 16, 16), float64],) {
  %1125 = @func_5932() /* ty=Tensor[(11, 16, 16), float64] */;
  (%1125,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10118() -> (Tensor[(14, 4, 4), uint32],) {
  %2 = fn () -> (Tensor[(14, 4, 4), uint32],) {
    %0 = @func_8784() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(14, 4, 4), uint32], Tensor[(4, 4), float64], Tensor[(224), bool], uint8, Tensor[(30), uint8], Tensor[(11, 16, 16), float64]) */;
    %1 = %0.1;
    (%1,)
  };
  %2() /* ty=(Tensor[(14, 4, 4), uint32],) */
}

def @func_10475(%var_10472: Tensor[(16, 9, 11), int32], %var_10473: uint8, %var_10474: Tensor[(360), int8]) -> (Tensor[(16, 9, 11), int8], Tensor[(11, 16, 16), float64], uint8, Tensor[(1, 9, 11), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) {
  @func_10470(%var_10472, %var_10473, %var_10474) /* ty=(Tensor[(16, 9, 11), int8], Tensor[(11, 16, 16), float64], uint8, Tensor[(1, 9, 11), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) */
}

def @func_9576(%var_9571: Tensor[(13, 15, 3), bool], %var_9572: Tensor[(13, 15, 3), bool]) -> (Tensor[(13, 15, 3), bool],) {
  %3 = cast(%var_9572, dtype="bool") /* ty=Tensor[(13, 15, 3), bool] */;
  %4 = shape_of(%var_9571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_9571, dtype="bool") /* ty=Tensor[(13, 15, 3), bool] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %7 = logical_or(%5, %6) /* ty=Tensor[(13, 15, 3), bool] */;
  (%7,)
}

def @func_2412() -> (Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) {
  @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_4425() -> Tensor[(6, 16, 7), int64] {
  %9 = fn () -> Tensor[(6, 16, 7), int64] {
    %8 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
    %8.0
  };
  %9() /* ty=Tensor[(6, 16, 7), int64] */
}

def @func_7704(%var_7703: Tensor[(16, 1), float64]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(16, 1), float64]) {
  %16 = fn (%var_7687: Tensor[(16, 1), float64]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(16, 1), float64]) {
    %10 = @func_7020() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %11 = cast(%var_7687, dtype="float64") /* ty=Tensor[(16, 1), float64] */;
    %12 = reshape(%11, newshape=[16]) /* ty=Tensor[(16), float64] */;
    %13 = @func_6705(%12) /* ty=(Tensor[(11, 16, 16), int64], Tensor[(14, 4, 4), bool], Tensor[(16), float64], Tensor[(2, 32), float64]) */;
    %14 = %10.1;
    %15 = %13.0;
    (%14, %15, %var_7687)
  };
  %16(%var_7703) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(16, 1), float64]) */
}

def @func_10999() -> Tensor[(11, 16, 16), float64] {
  @func_10997() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_11760(%var_11757: Tensor[(224), bool]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], bool, Tensor[(224), bool]) {
  %17 = @func_6057() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %18 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %19 = cast(%var_11757, dtype="bool") /* ty=Tensor[(224), bool] */;
  %20 = reshape(%18, newshape=[]) /* ty=bool */;
  %21 = reshape(%19, newshape=[1, 16, 14]) /* ty=Tensor[(1, 16, 14), bool] */;
  %22 = @func_3747(%20, %21) /* ty=(Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), float64], Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), int64]) */;
  %23 = %17.0;
  %24 = %22.1;
  (%23, %24, True /* ty=bool */, %var_11757)
}

def @func_11884() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(10, 5, 2), bool], Tensor[(100), bool], Tensor[(16), float64]) {
  @func_11882() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(10, 5, 2), bool], Tensor[(100), bool], Tensor[(16), float64]) */
}

def @func_1662() -> Tensor[(11, 16, 16), float64] {
  %25 = fn () -> Tensor[(11, 16, 16), float64] {
    @func_1041() /* ty=Tensor[(11, 16, 16), float64] */
  };
  %25() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_6578() -> Tensor[(11, 16, 16), float64] {
  %26 = fn () -> Tensor[(11, 16, 16), float64] {
    @func_6487() /* ty=Tensor[(11, 16, 16), float64] */
  };
  %26() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_6860() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  @func_6858() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_7020() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %27 = @func_3901() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */;
  %28 = @func_2429() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */;
  %29 = %27.0;
  %30 = %28.0;
  (%29, %30)
}

def @func_1205(%var_1195: Tensor[(1470), uint8]) -> (Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) {
  %31 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %32 = cast(meta[relay.Constant][0] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %33 = cast(%var_1195, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %34 = reshape(%32, newshape=[]) /* ty=uint8 */;
  %35 = reshape(%33, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint8] */;
  %36 = %31.0;
  %37 = @func_310(%34, %35) /* ty=Tensor[(15, 14, 7), uint8] */;
  (%36, %37, meta[relay.Constant][0] /* ty=uint8 */, %var_1195)
}

def @func_8498() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  @func_8496() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_2475() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %42 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %38 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %39 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
    %40 = %38.0;
    %41 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
    (%39, %40, %41)
  };
  %42() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_2169() -> Tensor[(11, 16, 16), bool] {
  %43 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %45 = asin(%44) /* ty=Tensor[(11, 16, 16), float64] */;
  %46 = cast(%43, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%48, %49) /* ty=Tensor[(11, 16, 16), bool] */
}

def @func_1927(%var_1924: Tensor[(1620), float32], %var_1925: uint8, %var_1926: Tensor[(1470), uint8]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(1620), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, Tensor[(1470), uint8]) {
  %64 = fn (%var_1898: Tensor[(1620), float32], %var_1908: uint8, %var_1909: Tensor[(1470), uint8]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(1620), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, Tensor[(1470), uint8]) {
    %50 = @func_1635() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %51 = cast(%var_1898, dtype="float32") /* ty=Tensor[(1620), float32] */;
    %52 = reshape(%51, newshape=[1620]) /* ty=Tensor[(1620), float32] */;
    %53 = @func_1763(%52) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], Tensor[(1620), float32], Tensor[(54), float32]) */;
    %54 = @func_1493() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %55 = cast(%var_1908, dtype="uint8") /* ty=uint8 */;
    %56 = cast(%var_1909, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
    %57 = reshape(%55, newshape=[]) /* ty=uint8 */;
    %58 = reshape(%56, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
    %59 = @func_1391(%57, %58) /* ty=(Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) */;
    %60 = %50.0;
    %61 = %53.0;
    %62 = %54.0;
    %63 = %59.3;
    (%60, %61, %var_1898, %62, %63, %var_1908, %var_1909)
  };
  %64(%var_1924, %var_1925, %var_1926) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(1620), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, Tensor[(1470), uint8]) */
}

def @func_8636() -> Tensor[(11, 16, 16), float64] {
  %65 = @func_7223() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %65.0
}

def @func_2595(%var_2593: Tensor[(7, 4, 13), uint16], %var_2594: Tensor[(7, 4, 13), uint16]) -> (Tensor[(7, 4, 13), uint16],) {
  %71 = fn (%var_2584: Tensor[(7, 4, 13), uint16], %var_2585: Tensor[(7, 4, 13), uint16]) -> (Tensor[(7, 4, 13), uint16],) {
    %66 = cast(%var_2585, dtype="uint16") /* ty=Tensor[(7, 4, 13), uint16] */;
    %67 = shape_of(%var_2584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %68 = cast(%var_2584, dtype="uint16") /* ty=Tensor[(7, 4, 13), uint16] */;
    %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %70 = add(%68, %69) /* ty=Tensor[(7, 4, 13), uint16] */;
    (%70,)
  };
  %71(%var_2593, %var_2594) /* ty=(Tensor[(7, 4, 13), uint16],) */
}

def @func_8685() -> Tensor[(11, 16, 16), float64] {
  %73 = fn () -> Tensor[(11, 16, 16), float64] {
    %72 = @func_8496() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %72.0
  };
  %73() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_8895() -> (Tensor[(11, 16, 16), float64],) {
  %74 = @func_883() /* ty=Tensor[(11, 16, 16), float64] */;
  (%74,)
}

def @func_4756(%var_4712: uint64, %var_4752: Tensor[(2816), float64]) -> (Tensor[(1620), float32], uint8, uint64, Tensor[(11, 16, 16), int64], Tensor[(6, 16, 7), float64], Tensor[(54), float32], Tensor[(14, 6, 9), bool], Tensor[(2816), bool]) {
  %75 = @func_2429() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */;
  %76 = cast(%var_4712, dtype="uint64") /* ty=uint64 */;
  %77 = reshape(%76, newshape=[]) /* ty=uint64 */;
  %78 = @func_4000(%77) /* ty=(uint8, Tensor[(11, 16, 16), float32], Tensor[(7, 9, 11), uint64]) */;
  %79 = cast(meta[relay.Constant][1] /* ty=Tensor[(2816), float64] */, dtype="float64") /* ty=Tensor[(2816), float64] */;
  %80 = reshape(%79, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
  %81 = @func_2959(%80) /* ty=(Tensor[(11, 16, 16), int64],) */;
  %82 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
  %83 = cast(%var_4712, dtype="float32") /* ty=float32 */;
  %84 = cast(meta[relay.Constant][2] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %85 = reshape(%83, newshape=[]) /* ty=float32 */;
  %86 = reshape(%84, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), float32] */;
  %87 = @func_655(%85, %86) /* ty=(Tensor[(1, 6, 9), bool],) */;
  %88 = %87.0;
  %89 = cast(%88, dtype="bool") /* ty=Tensor[(1, 6, 9), bool] */;
  %90 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 6, 9), bool] */, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
  %91 = cast(%var_4752, dtype="bool") /* ty=Tensor[(2816), bool] */;
  %92 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(2816), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %93 = cast(meta[relay.Constant][1] /* ty=Tensor[(2816), float64] */, dtype="bool") /* ty=Tensor[(2816), bool] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?), bool] */;
  %95 = %75.3;
  %96 = %78.0;
  %97 = %81.0;
  %98 = %82.1;
  %99 = logical_and(%89, %90) /* ty=Tensor[(14, 6, 9), bool] */;
  %100 = greater(%93, %94) /* ty=Tensor[(2816), bool] */;
  (%95, %96, %var_4712, %97, %98, meta[relay.Constant][2] /* ty=Tensor[(54), float32] */, %99, %100)
}

def @func_11413(%var_11411: int32, %var_11412: Tensor[(10, 2, 11), int32]) -> Tensor[(10, 2, 11), bool] {
  %103 = fn (%var_11381: int32, %var_11382: Tensor[(10, 2, 11), int32]) -> Tensor[(10, 2, 11), bool] {
    %101 = cast(%var_11381, dtype="bool") /* ty=bool */;
    %102 = cast(%var_11382, dtype="bool") /* ty=Tensor[(10, 2, 11), bool] */;
    equal(%101, %102) /* ty=Tensor[(10, 2, 11), bool] */
  };
  %103(%var_11411, %var_11412) /* ty=Tensor[(10, 2, 11), bool] */
}

def @func_3751(%var_3749: bool, %var_3750: Tensor[(1, 16, 14), bool]) -> (Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), float64], Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), int64]) {
  @func_3747(%var_3749, %var_3750) /* ty=(Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), float64], Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), int64]) */
}

def @func_4834(%var_4833: uint8) -> (Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(8, 28), int16]) {
  %119 = fn (%var_4807: uint8) -> (Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(8, 28), int16]) {
    %104 = cast(%var_4807, dtype="uint8") /* ty=uint8 */;
    %105 = reshape(%104, newshape=[]) /* ty=uint8 */;
    %106 = @func_3179(%105) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %107 = @func_4228() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %108 = cast(%var_4807, dtype="int16") /* ty=int16 */;
    %109 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 28), int16] */, dtype="int16") /* ty=Tensor[(8, 28), int16] */;
    %110 = %106.3;
    %111 = cast(%110, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
    %112 = reshape(%108, newshape=[]) /* ty=int16 */;
    %113 = reshape(%109, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), int16] */;
    %114 = reshape(%111, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
    %115 = @func_3582(%112, %113, %114) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(4, 7, 8), float32], Tensor[(11, 16, 16), float64], Tensor[(1470), uint8]) */;
    %116 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
    %117 = %107.1;
    %118 = %115.1;
    (%116, %110, %var_4807, %117, %118, meta[relay.Constant][4] /* ty=Tensor[(8, 28), int16] */)
  };
  %119(%var_4833) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(8, 28), int16]) */
}

def @func_4857() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %120 = @func_3913() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %121 = @func_3777() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(90, 18), float32]) */;
  %122 = %120.0;
  %123 = %121.1;
  (%122, %123)
}

def @func_4276() -> Tensor[(11, 16, 16), float64] {
  %124 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %124.0
}

def @func_7150(%var_7148: Tensor[(12, 1, 1), float32]) -> (Tensor[(12, 1, 1), float32],) {
  @func_7147(%var_7148) /* ty=(Tensor[(12, 1, 1), float32],) */
}

def @func_7926() -> (Tensor[(11, 16, 16), float64],) {
  @func_7924() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_8897() -> (Tensor[(11, 16, 16), float64],) {
  @func_8895() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_8638() -> Tensor[(11, 16, 16), float64] {
  @func_8636() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_11763(%var_11761: Tensor[(224), bool]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], bool, Tensor[(224), bool]) {
  @func_11760(%var_11761) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], bool, Tensor[(224), bool]) */
}

def @func_6237(%var_6236: Tensor[(7, 1, 6), float64]) -> (Tensor[(7, ?, 6), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %135 = fn (%var_6194: Tensor[(7, 1, 6), float64]) -> (Tensor[(7, ?, 6), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %125 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 1, 6), float64] */;
    %126 = shape_of(%var_6194, dtype="int32") /* ty=Tensor[(3), int32] */;
    %127 = cast(%var_6194, dtype="float64") /* ty=Tensor[(7, 1, 6), float64] */;
    %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %129 = @func_2474() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %130 = @func_5116() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %131 = maximum(%127, %128) /* ty=Tensor[(7, ?, 6), float64] */;
    %132 = %129.2;
    %133 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
    %134 = %130.0;
    (%131, %132, %133, %134)
  };
  %135(%var_6236) /* ty=(Tensor[(7, ?, 6), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_3669() -> (Tensor[(11, 16, 16), float64],) {
  %137 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %136 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
    (%136,)
  };
  %137() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_8606(%var_8605: Tensor[(13, 4, 5), float32]) -> Tensor[(13, 4, 5), float32] {
  %139 = fn (%var_8596: Tensor[(13, 4, 5), float32]) -> Tensor[(13, 4, 5), float32] {
    %138 = cast(%var_8596, dtype="float32") /* ty=Tensor[(13, 4, 5), float32] */;
    log2(%138) /* ty=Tensor[(13, 4, 5), float32] */
  };
  %139(%var_8605) /* ty=Tensor[(13, 4, 5), float32] */
}

def @func_7730() -> (Tensor[(11, 16, 16), float64],) {
  @func_7728() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_9439() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  @func_9437() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_5618() -> Tensor[(11, 16, 16), float64] {
  @func_5616() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_8988() -> (Tensor[(11, 16, 16), float64],) {
  %140 = @func_2540() /* ty=Tensor[(11, 16, 16), float64] */;
  (%140,)
}

def @func_4345(%var_4343: uint8) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64]) {
  @func_4342(%var_4343) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64]) */
}

def @func_3523(%var_3433: Tensor[(11, 4, 4), uint8], %var_3434: Tensor[(11, 4, 4), uint8], %var_3451: uint8, %var_3457: Tensor[(11, 4, 4), uint8]) -> (Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(11, 4, 4), uint8], Tensor[(11, 4, 4), float32], Tensor[(11, 16, 16), float64]) {
  %141 = cast(%var_3451, dtype="uint8") /* ty=uint8 */;
  %142 = reshape(%141, newshape=[]) /* ty=uint8 */;
  %143 = @func_1093(%142) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
  %144 = cast(%var_3434, dtype="uint8") /* ty=Tensor[(11, 4, 4), uint8] */;
  %145 = shape_of(%var_3433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%var_3433, dtype="uint8") /* ty=Tensor[(11, 4, 4), uint8] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %148 = bitwise_and(%146, %147) /* ty=Tensor[(11, 4, 4), uint8] */;
  %149 = cast(%var_3457, dtype="uint8") /* ty=Tensor[(11, 4, 4), uint8] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%148, dtype="uint8") /* ty=Tensor[(11, 4, 4), uint8] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %153 = cast(%148, dtype="float64") /* ty=Tensor[(11, 4, 4), float64] */;
  %154 = exp(%153) /* ty=Tensor[(11, 4, 4), float64] */;
  %155 = cast(%var_3434, dtype="float32") /* ty=Tensor[(11, 4, 4), float32] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="float32") /* ty=Tensor[(11, 4, 4), float32] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %159 = @func_2862() /* ty=Tensor[(11, 16, 16), float64] */;
  %160 = %143.4;
  %161 = add(%151, %152) /* ty=Tensor[(11, 4, 4), uint8] */;
  %162 = floor_divide(%157, %158) /* ty=Tensor[(11, 4, 4), float32] */;
  %163 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
  (%159, %160, %var_3451, %161, %162, %163)
}

def @func_4591() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %174 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %164 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
    %165 = cast(%164, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
    %166 = reshape(%165, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float32] */;
    %167 = @func_3636(%166) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */;
    %168 = @func_4082() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32]) */;
    %169 = @func_2738() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %170 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
    %171 = %167.2;
    %172 = %168.0;
    %173 = %169.2;
    (%164, %170, %171, %172, %173)
  };
  %174() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_8466() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %178 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %175 = @func_3913() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %176 = @func_2540() /* ty=Tensor[(11, 16, 16), float64] */;
    %177 = %175.0;
    (%176, %177)
  };
  %178() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_8553() -> (Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(693), float64]) {
  %184 = fn () -> (Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(693), float64]) {
    %179 = cast(meta[relay.Constant][6] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
    %180 = reshape(%179, newshape=[9, 11, 7]) /* ty=Tensor[(9, 11, 7), float64] */;
    %181 = @func_1979(%180) /* ty=(Tensor[(9, 11, 7), float64], Tensor[(11, 16, 16), float64]) */;
    %182 = @func_2169() /* ty=Tensor[(11, 16, 16), bool] */;
    %183 = %181.1;
    (%182, %183, meta[relay.Constant][6] /* ty=Tensor[(693), float64] */)
  };
  %184() /* ty=(Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(693), float64]) */
}

def @func_8786() -> (Tensor[(11, 16, 16), float64], Tensor[(14, 4, 4), uint32], Tensor[(4, 4), float64], Tensor[(224), bool], uint8, Tensor[(30), uint8], Tensor[(11, 16, 16), float64]) {
  @func_8784() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(14, 4, 4), uint32], Tensor[(4, 4), float64], Tensor[(224), bool], uint8, Tensor[(30), uint8], Tensor[(11, 16, 16), float64]) */
}

def @func_3586(%var_3583: int16, %var_3584: Tensor[(4, 7, 8), int16], %var_3585: Tensor[(1470), uint8]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(4, 7, 8), float32], Tensor[(11, 16, 16), float64], Tensor[(1470), uint8]) {
  %200 = fn (%var_3531: int16, %var_3532: Tensor[(4, 7, 8), int16], %var_3578: Tensor[(1470), uint8]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(4, 7, 8), float32], Tensor[(11, 16, 16), float64], Tensor[(1470), uint8]) {
    %185 = @func_1845() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %186 = @func_1694() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %187 = cast(%var_3531, dtype="int16") /* ty=int16 */;
    %188 = cast(%var_3532, dtype="int16") /* ty=Tensor[(4, 7, 8), int16] */;
    %189 = multiply(%187, %188) /* ty=Tensor[(4, 7, 8), int16] */;
    %190 = cast(%189, dtype="float32") /* ty=Tensor[(4, 7, 8), float32] */;
    %191 = cast(%var_3531, dtype="uint8") /* ty=uint8 */;
    %192 = cast(%var_3578, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
    %193 = reshape(%191, newshape=[]) /* ty=uint8 */;
    %194 = reshape(%192, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
    %195 = @func_1391(%193, %194) /* ty=(Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) */;
    %196 = %185.0;
    %197 = %186.0;
    %198 = log2(%190) /* ty=Tensor[(4, 7, 8), float32] */;
    %199 = %195.3;
    (%196, %197, %198, %199, %var_3578)
  };
  %200(%var_3583, %var_3584, %var_3585) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(4, 7, 8), float32], Tensor[(11, 16, 16), float64], Tensor[(1470), uint8]) */
}

def @func_9528() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(9, 6), float32], Tensor[(11, 16, 16), float64]) {
  %209 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(9, 6), float32], Tensor[(11, 16, 16), float64]) {
    %201 = @func_1845() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %202 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 6), float32] */, dtype="float32") /* ty=Tensor[(9, 6), float32] */;
    %203 = reshape(%202, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
    %204 = @func_1882(%203) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(1470), float64], Tensor[(1, 6, 9), bool], Tensor[(27, 2), float32]) */;
    %205 = @func_7223() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %206 = %201.0;
    %207 = %204.0;
    %208 = %205.1;
    (%206, %207, meta[relay.Constant][7] /* ty=Tensor[(9, 6), float32] */, %208)
  };
  %209() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(9, 6), float32], Tensor[(11, 16, 16), float64]) */
}

def @func_6707(%var_6706: Tensor[(16), float64]) -> (Tensor[(11, 16, 16), int64], Tensor[(14, 4, 4), bool], Tensor[(16), float64], Tensor[(2, 32), float64]) {
  %218 = fn (%var_6689: Tensor[(16), float64]) -> (Tensor[(11, 16, 16), int64], Tensor[(14, 4, 4), bool], Tensor[(16), float64], Tensor[(2, 32), float64]) {
    %210 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
    %211 = cast(%var_6689, dtype="float64") /* ty=Tensor[(16), float64] */;
    %212 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 32), float64] */, dtype="float64") /* ty=Tensor[(2, 32), float64] */;
    %213 = reshape(%211, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
    %214 = reshape(%212, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %215 = @func_3049(%213, %214) /* ty=(Tensor[(14, 4, 4), bool], Tensor[(4, 4, 4), int8], Tensor[(1, 4, 4), float32]) */;
    %216 = %210.1;
    %217 = %215.0;
    (%216, %217, %var_6689, meta[relay.Constant][8] /* ty=Tensor[(2, 32), float64] */)
  };
  %218(%var_6706) /* ty=(Tensor[(11, 16, 16), int64], Tensor[(14, 4, 4), bool], Tensor[(16), float64], Tensor[(2, 32), float64]) */
}

def @func_6057() -> (Tensor[(11, 16, 16), float64],) {
  %219 = @func_5809() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %220 = %219.0;
  (%220,)
}

def @func_9706() -> Tensor[(11, 16, 16), float64] {
  @func_1041() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_9129() -> (Tensor[(54), float32], Tensor[(11, 16, 16), bool]) {
  %225 = fn () -> (Tensor[(54), float32], Tensor[(11, 16, 16), bool]) {
    %221 = @func_6789() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], uint64, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32], Tensor[(1470), uint8]) */;
    %222 = @func_8552() /* ty=(Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(693), float64]) */;
    %223 = %221.2;
    %224 = %222.0;
    (%223, %224)
  };
  %225() /* ty=(Tensor[(54), float32], Tensor[(11, 16, 16), bool]) */
}

def @func_9469(%var_9467: Tensor[(1, 13), float32], %var_9468: Tensor[(1, 13), float32]) -> Tensor[(?, 13), float32] {
  @func_9465(%var_9467, %var_9468) /* ty=Tensor[(?, 13), float32] */
}

def @func_7225() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  @func_7223() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_11671() -> Tensor[(14, 4, 4), float64] {
  @func_11669() /* ty=Tensor[(14, 4, 4), float64] */
}

def @func_5592() -> Tensor[(11, 16, 16), float64] {
  @func_5590() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_4342(%var_4307: uint8) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64]) {
  %226 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
  %227 = %226.0;
  %228 = cast(%227, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %229 = reshape(%228, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
  %230 = @func_2959(%229) /* ty=(Tensor[(11, 16, 16), int64],) */;
  %231 = cast(%var_4307, dtype="uint8") /* ty=uint8 */;
  %232 = reshape(%231, newshape=[]) /* ty=uint8 */;
  %233 = @func_3179(%232) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %234 = %233.0;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %236 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  %237 = %230.0;
  %238 = sqrt(%235) /* ty=Tensor[(11, 16, 16), float64] */;
  (%227, %var_4307, %236, %237, %238)
}

def @func_5719(%var_5718: Tensor[(39, 9), uint8]) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(39, 9), uint8], Tensor[(11, 16, 16), float64]) {
  %248 = fn (%var_5710: Tensor[(39, 9), uint8]) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(39, 9), uint8], Tensor[(11, 16, 16), float64]) {
    %239 = @func_3208() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %240 = cast(%var_5710, dtype="uint8") /* ty=Tensor[(39, 9), uint8] */;
    %241 = cast(%var_5710, dtype="uint8") /* ty=Tensor[(39, 9), uint8] */;
    %242 = reshape(%240, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), uint8] */;
    %243 = reshape(%241, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), uint8] */;
    %244 = @func_5574(%242, %243) /* ty=(Tensor[(9, 3, 13), float64], Tensor[(11, 16, 16), int64], uint8, Tensor[(7, 4, 13), uint16], Tensor[(364), uint16], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(9, 3, 13), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %245 = %239.0;
    %246 = %244.2;
    %247 = @func_4276() /* ty=Tensor[(11, 16, 16), float64] */;
    (%245, %246, %var_5710, %247)
  };
  %248(%var_5718) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(39, 9), uint8], Tensor[(11, 16, 16), float64]) */
}

def @func_8749(%var_8748: uint64) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32], uint64, Tensor[(11, 16, 16), float64]) {
  %256 = fn (%var_8735: uint64) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32], uint64, Tensor[(11, 16, 16), float64]) {
    %249 = cast(%var_8735, dtype="uint64") /* ty=uint64 */;
    %250 = reshape(%249, newshape=[]) /* ty=uint64 */;
    %251 = @func_4000(%250) /* ty=(uint8, Tensor[(11, 16, 16), float32], Tensor[(7, 9, 11), uint64]) */;
    %252 = @func_2474() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %253 = @func_1425() /* ty=Tensor[(11, 16, 16), float64] */;
    %254 = %251.1;
    %255 = %252.2;
    (%253, %254, %var_8735, %255)
  };
  %256(%var_8748) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32], uint64, Tensor[(11, 16, 16), float64]) */
}

def @func_4760(%var_4758: uint64, %var_4759: Tensor[(2816), float64]) -> (Tensor[(1620), float32], uint8, uint64, Tensor[(11, 16, 16), int64], Tensor[(6, 16, 7), float64], Tensor[(54), float32], Tensor[(14, 6, 9), bool], Tensor[(2816), bool]) {
  @func_4756(%var_4758, %var_4759) /* ty=(Tensor[(1620), float32], uint8, uint64, Tensor[(11, 16, 16), int64], Tensor[(6, 16, 7), float64], Tensor[(54), float32], Tensor[(14, 6, 9), bool], Tensor[(2816), bool]) */
}

def @func_2430() -> (Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) {
  %264 = fn () -> (Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) {
    %257 = cast(meta[relay.Constant][9] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %258 = cast(meta[relay.Constant][10] /* ty=Tensor[(1620), float32] */, dtype="float32") /* ty=Tensor[(1620), float32] */;
    %259 = reshape(%257, newshape=[]) /* ty=uint8 */;
    %260 = reshape(%258, newshape=[1620]) /* ty=Tensor[(1620), float32] */;
    %261 = @func_2257(%259, %260) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470, 1), uint8], Tensor[(11, 16, 16), float64], Tensor[(1620), float32]) */;
    %262 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
    %263 = %261.2;
    (%262, %263, meta[relay.Constant][9] /* ty=uint8 */, meta[relay.Constant][10] /* ty=Tensor[(1620), float32] */)
  };
  %264() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */
}

def @func_7223() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %265 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  %266 = @func_6487() /* ty=Tensor[(11, 16, 16), float64] */;
  (%265, %266)
}

def @func_3053(%var_3051: Tensor[(1, 4, 4), float64], %var_3052: Tensor[(4, 4, 4), float64]) -> (Tensor[(14, 4, 4), bool], Tensor[(4, 4, 4), int8], Tensor[(1, 4, 4), float32]) {
  @func_3049(%var_3051, %var_3052) /* ty=(Tensor[(14, 4, 4), bool], Tensor[(4, 4, 4), int8], Tensor[(1, 4, 4), float32]) */
}

def @func_10325() -> (Tensor[(11, 16, 16), float64],) {
  %269 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %267 = @func_6146() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %268 = %267.1;
    (%268,)
  };
  %269() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_11504(%var_11500: Tensor[(768), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(768), float32]) {
  %270 = @func_8465() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %271 = cast(%var_11500, dtype="float32") /* ty=Tensor[(768), float32] */;
  %272 = reshape(%271, newshape=[8, 12, 8]) /* ty=Tensor[(8, 12, 8), float32] */;
  %273 = @func_7815(%272) /* ty=(Tensor[(8, 12, 8), float32], Tensor[(11, 16, 16), float64]) */;
  %274 = %270.0;
  %275 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  %276 = %273.1;
  (%274, %275, %276, %var_11500)
}

def @func_9465(%var_9456: Tensor[(1, 13), float32], %var_9457: Tensor[(1, 13), float32]) -> Tensor[(?, 13), float32] {
  %277 = cast(%var_9457, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
  %278 = shape_of(%var_9456, dtype="int32") /* ty=Tensor[(2), int32] */;
  %279 = cast(%var_9456, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  divide(%279, %280) /* ty=Tensor[(?, 13), float32] */
}

def @func_5810() -> (Tensor[(11, 16, 16), float64],) {
  %283 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %281 = @func_4590() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %282 = %281.3;
    (%282,)
  };
  %283() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_12065() -> (Tensor[(11, 16, 16), float64],) {
  %286 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %284 = @func_10324() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %285 = %284.0;
    (%285,)
  };
  %286() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_5980() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %290 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %287 = @func_3208() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %288 = %287.0;
    %289 = @func_2707() /* ty=Tensor[(11, 16, 16), float64] */;
    (%288, %289)
  };
  %290() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_6016() -> (Tensor[(11, 16, 16), float64],) {
  %291 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
  (%291,)
}

def @func_1260(%var_1258: Tensor[(1, 1470), uint8]) -> (Tensor[(11, 16, 16), float32], Tensor[(1470), uint8], Tensor[(1, 1470), uint8]) {
  %292 = @func_883() /* ty=Tensor[(11, 16, 16), float64] */;
  %293 = cast(%292, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %294 = cast(%var_1258, dtype="uint8") /* ty=Tensor[(1, 1470), uint8] */;
  %295 = reshape(%294, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %296 = @func_1205(%295) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
  %297 = erf(%293) /* ty=Tensor[(11, 16, 16), float32] */;
  %298 = %296.3;
  (%297, %298, %var_1258)
}

def @func_1433() -> Tensor[(11, 16, 16), float64] {
  %300 = fn () -> Tensor[(11, 16, 16), float64] {
    %299 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %299.0
  };
  %300() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_7545(%var_7543: Tensor[(5, 1, 6), uint8]) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(5, 1, 6), int32]) {
  @func_7542(%var_7543) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(5, 1, 6), int32]) */
}

def @func_8496() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %301 = @func_4276() /* ty=Tensor[(11, 16, 16), float64] */;
  %302 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  (%301, %302)
}

def @func_1721(%var_1718: Tensor[(12, 15, 9), float32], %var_1719: Tensor[(12, 15, 9), float32], %var_1720: Tensor[(54), float32]) -> (Tensor[(12, 15, 9), float32], Tensor[(1, 6, 9), bool], float32, Tensor[(54), float32]) {
  %314 = fn (%var_1703: Tensor[(12, 15, 9), float32], %var_1704: Tensor[(12, 15, 9), float32], %var_1713: Tensor[(54), float32]) -> (Tensor[(12, 15, 9), float32], Tensor[(1, 6, 9), bool], float32, Tensor[(54), float32]) {
    %303 = cast(%var_1704, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
    %304 = shape_of(%var_1703, dtype="int32") /* ty=Tensor[(3), int32] */;
    %305 = cast(%var_1703, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
    %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %307 = cast(8.52173f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %308 = cast(%var_1713, dtype="float32") /* ty=Tensor[(54), float32] */;
    %309 = reshape(%307, newshape=[]) /* ty=float32 */;
    %310 = reshape(%308, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), float32] */;
    %311 = @func_655(%309, %310) /* ty=(Tensor[(1, 6, 9), bool],) */;
    %312 = mod(%305, %306) /* ty=Tensor[(12, 15, 9), float32] */;
    %313 = %311.0;
    (%312, %313, 8.52173f /* ty=float32 */, %var_1713)
  };
  %314(%var_1718, %var_1719, %var_1720) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(1, 6, 9), bool], float32, Tensor[(54), float32]) */
}

def @func_1820() -> Tensor[(11, 16, 16), float64] {
  %315 = fn () -> Tensor[(11, 16, 16), float64] {
    @func_1041() /* ty=Tensor[(11, 16, 16), float64] */
  };
  %315() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_1493() -> (Tensor[(11, 16, 16), float64],) {
  %316 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %317 = %316.0;
  (%317,)
}

def @func_1042() -> Tensor[(11, 16, 16), float64] {
  %319 = fn () -> Tensor[(11, 16, 16), float64] {
    %318 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %318.0
  };
  %319() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_4002(%var_4001: uint64) -> (uint8, Tensor[(11, 16, 16), float32], Tensor[(7, 9, 11), uint64]) {
  %336 = fn (%var_3975: uint64) -> (uint8, Tensor[(11, 16, 16), float32], Tensor[(7, 9, 11), uint64]) {
    %320 = cast(%var_3975, dtype="uint8") /* ty=uint8 */;
    %321 = reshape(%320, newshape=[]) /* ty=uint8 */;
    %322 = @func_3179(%321) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %323 = %322.2;
    %324 = cast(%323, dtype="uint8") /* ty=uint8 */;
    %325 = reshape(%324, newshape=[]) /* ty=uint8 */;
    %326 = @func_1093(%325) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
    %327 = cast(%var_3975, dtype="bool") /* ty=bool */;
    %328 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 9, 11), uint64] */, dtype="bool") /* ty=Tensor[(7, 9, 11), bool] */;
    %329 = not_equal(%327, %328) /* ty=Tensor[(7, 9, 11), bool] */;
    %330 = cast(%329, dtype="uint64") /* ty=Tensor[(7, 9, 11), uint64] */;
    %331 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(7, 9, 11), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %332 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 9, 11), uint64] */, dtype="uint64") /* ty=Tensor[(7, 9, 11), uint64] */;
    %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %334 = %326.0;
    %335 = subtract(%332, %333) /* ty=Tensor[(7, 9, 11), uint64] */;
    (%323, %334, %335)
  };
  %336(%var_4001) /* ty=(uint8, Tensor[(11, 16, 16), float32], Tensor[(7, 9, 11), uint64]) */
}

def @func_7924() -> (Tensor[(11, 16, 16), float64],) {
  %337 = @func_6146() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %338 = %337.0;
  (%338,)
}

def @func_5577(%var_5575: Tensor[(9, 3, 13), uint8], %var_5576: Tensor[(9, 3, 13), uint8]) -> (Tensor[(9, 3, 13), float64], Tensor[(11, 16, 16), int64], uint8, Tensor[(7, 4, 13), uint16], Tensor[(364), uint16], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(9, 3, 13), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %376 = fn (%var_5512: Tensor[(9, 3, 13), uint8], %var_5513: Tensor[(9, 3, 13), uint8]) -> (Tensor[(9, 3, 13), float64], Tensor[(11, 16, 16), int64], uint8, Tensor[(7, 4, 13), uint16], Tensor[(364), uint16], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(9, 3, 13), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %339 = cast(%var_5513, dtype="uint8") /* ty=Tensor[(9, 3, 13), uint8] */;
    %340 = shape_of(%var_5512, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%var_5512, dtype="uint8") /* ty=Tensor[(9, 3, 13), uint8] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %343 = bitwise_xor(%341, %342) /* ty=Tensor[(9, 3, 13), uint8] */;
    %344 = cast(%343, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
    %345 = shape_of(%var_5513, dtype="int32") /* ty=Tensor[(3), int32] */;
    %346 = cast(%var_5513, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
    %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %348 = cast(meta[relay.Constant][12] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %349 = reshape(%348, newshape=[]) /* ty=uint8 */;
    %350 = @func_4342(%349) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64]) */;
    %351 = cast(meta[relay.Constant][13] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
    %352 = cast(meta[relay.Constant][13] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
    %353 = reshape(%351, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
    %354 = reshape(%352, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
    %355 = @func_2592(%353, %354) /* ty=(Tensor[(7, 4, 13), uint16],) */;
    %356 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
    %357 = @func_3913() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %358 = cast(%var_5512, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
    %359 = exp(%358) /* ty=Tensor[(9, 3, 13), float64] */;
    %360 = cast(%359, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
    %361 = rsqrt(%360) /* ty=Tensor[(9, 3, 13), float64] */;
    %362 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
    %363 = %362.2;
    %364 = cast(%361, dtype="uint8") /* ty=Tensor[(9, 3, 13), uint8] */;
    %365 = cast(%363, dtype="uint8") /* ty=uint8 */;
    %366 = @func_5116() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %367 = floor_divide(%346, %347) /* ty=Tensor[(9, 3, 13), float64] */;
    %368 = %350.3;
    %369 = %355.0;
    %370 = %356.1;
    %371 = %357.0;
    %372 = right_shift(%364, %365) /* ty=Tensor[(9, 3, 13), uint8] */;
    %373 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
    %374 = @func_2540() /* ty=Tensor[(11, 16, 16), float64] */;
    %375 = %366.1;
    (%367, %368, meta[relay.Constant][12] /* ty=uint8 */, %369, meta[relay.Constant][13] /* ty=Tensor[(364), uint16] */, %370, %371, %372, %373, %374, %375)
  };
  %376(%var_5575, %var_5576) /* ty=(Tensor[(9, 3, 13), float64], Tensor[(11, 16, 16), int64], uint8, Tensor[(7, 4, 13), uint16], Tensor[(364), uint16], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(9, 3, 13), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_1495() -> (Tensor[(11, 16, 16), float64],) {
  @func_1493() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_7022() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  @func_7020() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_1696() -> (Tensor[(11, 16, 16), float64],) {
  @func_1694() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_6675() -> (Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  @func_6673() /* ty=(Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_10811() -> (Tensor[(11, 16, 16), float64],) {
  %379 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %377 = @func_7245() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %378 = %377.1;
    (%378,)
  };
  %379() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_4971() -> (Tensor[(11, 16, 16), float64],) {
  %381 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %380 = @func_4276() /* ty=Tensor[(11, 16, 16), float64] */;
    (%380,)
  };
  %381() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_7910() -> (Tensor[(11, 16, 16), float64],) {
  @func_7908() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_8075(%var_8073: Tensor[(10, 14, 7), float64], %var_8074: Tensor[(10, 14, 7), float64]) -> Tensor[(10, 14, 7), bool] {
  @func_8071(%var_8073, %var_8074) /* ty=Tensor[(10, 14, 7), bool] */
}

def @func_980() -> (Tensor[(11, 16, 16), float64],) {
  @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_659(%var_657: float32, %var_658: Tensor[(1, 6, 9), float32]) -> (Tensor[(1, 6, 9), bool],) {
  @func_655(%var_657, %var_658) /* ty=(Tensor[(1, 6, 9), bool],) */
}

def @func_5149() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %386 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %382 = @func_2707() /* ty=Tensor[(11, 16, 16), float64] */;
    %383 = cast(%382, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
    %384 = rsqrt(%383) /* ty=Tensor[(11, 16, 16), float64] */;
    %385 = @func_2540() /* ty=Tensor[(11, 16, 16), float64] */;
    (%384, %385)
  };
  %386() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_11840() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %387 = @func_2367() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(12, 6, 5), int8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, uint8) */;
  %388 = %387.3;
  %389 = @func_6577() /* ty=Tensor[(11, 16, 16), float64] */;
  (%388, %389)
}

def @func_1979(%var_1973: Tensor[(9, 11, 7), float64]) -> (Tensor[(9, 11, 7), float64], Tensor[(11, 16, 16), float64]) {
  %390 = cast(%var_1973, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %391 = asinh(%390) /* ty=Tensor[(9, 11, 7), float64] */;
  %392 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  (%391, %392)
}

def @func_8144() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %397 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %393 = @func_5809() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %394 = @func_7908() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %395 = %393.0;
    %396 = %394.0;
    (%395, %396)
  };
  %397() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_6333() -> (Tensor[(11, 16, 16), float64],) {
  %399 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %398 = @func_5932() /* ty=Tensor[(11, 16, 16), float64] */;
    (%398,)
  };
  %399() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_4410() -> (Tensor[(11, 16, 16), float64],) {
  %402 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %400 = @func_3913() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %401 = %400.0;
    (%401,)
  };
  %402() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_9580(%var_9578: Tensor[(13, 15, 3), bool], %var_9579: Tensor[(13, 15, 3), bool]) -> (Tensor[(13, 15, 3), bool],) {
  @func_9576(%var_9578, %var_9579) /* ty=(Tensor[(13, 15, 3), bool],) */
}

def @func_5506() -> Tensor[(11, 16, 16), float64] {
  %403 = @func_1694() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %403.0
}

def @func_11324() -> Tensor[(11, 16, 16), float64] {
  %405 = fn () -> Tensor[(11, 16, 16), float64] {
    %404 = @func_4970() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %404.0
  };
  %405() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_5590() -> Tensor[(11, 16, 16), float64] {
  %406 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %406.0
}

def @func_10101() -> (Tensor[(11, 16, 16), float64],) {
  @func_10099() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_2308() -> Tensor[(11, 16, 16), float64] {
  @func_2306() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_8223() -> (Tensor[(11, 16, 16), float64],) {
  %407 = @func_5818() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %408 = %407.0;
  (%408,)
}

def @func_10942(%var_10940: Tensor[(1584), int32], %var_10941: Tensor[(12, 30), int8]) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(13), float32], Tensor[(13), float32], Tensor[(11, 16, 16), float64], Tensor[(16, 14), bool], Tensor[(16, 9, 11), int8], Tensor[(1584), int32], Tensor[(12, 30), int8], Tensor[(11, 16, 16), float64], Tensor[(32, 24), float32]) {
  %434 = fn (%var_10914: Tensor[(1584), int32], %var_10915: Tensor[(12, 30), int8]) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(13), float32], Tensor[(13), float32], Tensor[(11, 16, 16), float64], Tensor[(16, 14), bool], Tensor[(16, 9, 11), int8], Tensor[(1584), int32], Tensor[(12, 30), int8], Tensor[(11, 16, 16), float64], Tensor[(32, 24), float32]) {
    %409 = @func_2429() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */;
    %410 = cast(meta[relay.Constant][14] /* ty=Tensor[(13), float32] */, dtype="float32") /* ty=Tensor[(13), float32] */;
    %411 = reshape(%410, newshape=[13]) /* ty=Tensor[(13), float32] */;
    %412 = @func_10064(%411) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(7, 210), uint8], Tensor[(1470), uint8], Tensor[(?, 13), float32], Tensor[(13), float32], Tensor[(11, 16, 16), float64]) */;
    %413 = %409.1;
    %414 = cast(%413, dtype="bool") /* ty=bool */;
    %415 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 14), bool] */, dtype="bool") /* ty=Tensor[(16, 14), bool] */;
    %416 = reshape(%414, newshape=[]) /* ty=bool */;
    %417 = reshape(%415, newshape=[1, 16, 14]) /* ty=Tensor[(1, 16, 14), bool] */;
    %418 = @func_3747(%416, %417) /* ty=(Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), float64], Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), int64]) */;
    %419 = cast(%var_10914, dtype="int32") /* ty=Tensor[(1584), int32] */;
    %420 = cast(%413, dtype="uint8") /* ty=uint8 */;
    %421 = cast(%var_10915, dtype="int8") /* ty=Tensor[(12, 30), int8] */;
    %422 = reshape(%419, newshape=[16, 9, 11]) /* ty=Tensor[(16, 9, 11), int32] */;
    %423 = reshape(%420, newshape=[]) /* ty=uint8 */;
    %424 = reshape(%421, newshape=[360]) /* ty=Tensor[(360), int8] */;
    %425 = @func_10470(%422, %423, %424) /* ty=(Tensor[(16, 9, 11), int8], Tensor[(11, 16, 16), float64], uint8, Tensor[(1, 9, 11), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) */;
    %426 = cast(meta[relay.Constant][16] /* ty=Tensor[(32, 24), float32] */, dtype="float32") /* ty=Tensor[(32, 24), float32] */;
    %427 = reshape(%426, newshape=[8, 12, 8]) /* ty=Tensor[(8, 12, 8), float32] */;
    %428 = @func_7815(%427) /* ty=(Tensor[(8, 12, 8), float32], Tensor[(11, 16, 16), float64]) */;
    %429 = @func_6465() /* ty=Tensor[(11, 16, 16), float64] */;
    %430 = %412.5;
    %431 = %418.1;
    %432 = %425.0;
    %433 = %428.1;
    (%429, %413, %430, meta[relay.Constant][14] /* ty=Tensor[(13), float32] */, %431, meta[relay.Constant][15] /* ty=Tensor[(16, 14), bool] */, %432, %var_10914, %var_10915, %433, meta[relay.Constant][16] /* ty=Tensor[(32, 24), float32] */)
  };
  %434(%var_10940, %var_10941) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(13), float32], Tensor[(13), float32], Tensor[(11, 16, 16), float64], Tensor[(16, 14), bool], Tensor[(16, 9, 11), int8], Tensor[(1584), int32], Tensor[(12, 30), int8], Tensor[(11, 16, 16), float64], Tensor[(32, 24), float32]) */
}

def @func_11258() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8) {
  %441 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8) {
    %435 = @func_5979() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %436 = @func_5979() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %437 = @func_10160() /* ty=(uint8,) */;
    %438 = %435.1;
    %439 = %436.0;
    %440 = %437.0;
    (%438, %439, %440)
  };
  %441() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8) */
}

def @func_9708() -> Tensor[(11, 16, 16), float64] {
  @func_9706() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_12004() -> (Tensor[(54), float32], Tensor[(7, 4, 13), uint16], Tensor[(364), uint16]) {
  %450 = fn () -> (Tensor[(54), float32], Tensor[(7, 4, 13), uint16], Tensor[(364), uint16]) {
    %442 = @func_9128() /* ty=(Tensor[(54), float32], Tensor[(11, 16, 16), bool]) */;
    %443 = cast(meta[relay.Constant][17] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
    %444 = cast(meta[relay.Constant][17] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
    %445 = reshape(%443, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
    %446 = reshape(%444, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
    %447 = @func_2592(%445, %446) /* ty=(Tensor[(7, 4, 13), uint16],) */;
    %448 = %442.0;
    %449 = %447.0;
    (%448, %449, meta[relay.Constant][17] /* ty=Tensor[(364), uint16] */)
  };
  %450() /* ty=(Tensor[(54), float32], Tensor[(7, 4, 13), uint16], Tensor[(364), uint16]) */
}

def @func_978() -> (Tensor[(11, 16, 16), float64],) {
  %451 = @func_883() /* ty=Tensor[(11, 16, 16), float64] */;
  (%451,)
}

def @func_655(%var_626: float32, %var_627: Tensor[(1, 6, 9), float32]) -> (Tensor[(1, 6, 9), bool],) {
  %452 = cast(%var_626, dtype="bool") /* ty=bool */;
  %453 = cast(%var_627, dtype="bool") /* ty=Tensor[(1, 6, 9), bool] */;
  %454 = not_equal(%452, %453) /* ty=Tensor[(1, 6, 9), bool] */;
  (%454,)
}

def @func_8361(%var_8360: Tensor[(30), uint8]) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(30), uint8]) {
  %465 = fn (%var_8347: Tensor[(30), uint8]) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(30), uint8]) {
    %455 = @func_1845() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %456 = cast(meta[relay.Constant][18] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
    %457 = reshape(%456, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
    %458 = @func_1205(%457) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
    %459 = cast(%var_8347, dtype="uint8") /* ty=Tensor[(30), uint8] */;
    %460 = reshape(%459, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), uint8] */;
    %461 = @func_7542(%460) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(5, 1, 6), int32]) */;
    %462 = %455.0;
    %463 = %458.2;
    %464 = %461.3;
    (%462, %463, meta[relay.Constant][18] /* ty=Tensor[(1470), uint8] */, %464, %var_8347)
  };
  %465(%var_8360) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(30), uint8]) */
}

def @func_7120(%var_7118: Tensor[(10, 5, 2), bool], %var_7119: Tensor[(10, 5, 2), bool]) -> Tensor[(10, 5, 2), bool] {
  %470 = fn (%var_7109: Tensor[(10, 5, 2), bool], %var_7110: Tensor[(10, 5, 2), bool]) -> Tensor[(10, 5, 2), bool] {
    %466 = cast(%var_7110, dtype="bool") /* ty=Tensor[(10, 5, 2), bool] */;
    %467 = shape_of(%var_7109, dtype="int32") /* ty=Tensor[(3), int32] */;
    %468 = cast(%var_7109, dtype="bool") /* ty=Tensor[(10, 5, 2), bool] */;
    %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%468, %469) /* ty=Tensor[(10, 5, 2), bool] */
  };
  %470(%var_7118, %var_7119) /* ty=Tensor[(10, 5, 2), bool] */
}

def @func_1694() -> (Tensor[(11, 16, 16), float64],) {
  %471 = @func_1635() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %472 = %471.0;
  (%472,)
}

def @func_2261(%var_2259: uint8, %var_2260: Tensor[(1620), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470, 1), uint8], Tensor[(11, 16, 16), float64], Tensor[(1620), float32]) {
  @func_2257(%var_2259, %var_2260) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470, 1), uint8], Tensor[(11, 16, 16), float64], Tensor[(1620), float32]) */
}

def @func_2915() -> Tensor[(11, 16, 16), float64] {
  %473 = @func_2474() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %473.0
}

def @func_7908() -> (Tensor[(11, 16, 16), float64],) {
  %474 = @func_4276() /* ty=Tensor[(11, 16, 16), float64] */;
  (%474,)
}

def @func_1514(%var_1513: Tensor[(11, 16, 16), float64]) -> (Tensor[(11, 16, 16), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8]) {
  %485 = fn (%var_1498: Tensor[(11, 16, 16), float64]) -> (Tensor[(11, 16, 16), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8]) {
    %475 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
    %476 = cast(%var_1498, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
    %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
    %478 = cast(%475, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %480 = cast(meta[relay.Constant][19] /* ty=Tensor[(360), int8] */, dtype="int8") /* ty=Tensor[(360), int8] */;
    %481 = reshape(%480, newshape=[12, 6, 5]) /* ty=Tensor[(12, 6, 5), int8] */;
    %482 = @func_524(%481) /* ty=(Tensor[(12, 6, 5), int8],) */;
    %483 = subtract(%478, %479) /* ty=Tensor[(11, 16, 16), float32] */;
    %484 = %482.0;
    (%483, %484, meta[relay.Constant][19] /* ty=Tensor[(360), int8] */)
  };
  %485(%var_1513) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8]) */
}

def @func_8312(%var_8311: bool) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(1, 16, 14), bool], bool, Tensor[(224), bool]) {
  %497 = fn (%var_8297: bool) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(1, 16, 14), bool], bool, Tensor[(224), bool]) {
    %486 = @func_6146() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %487 = @func_5061() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) */;
    %488 = cast(%var_8297, dtype="bool") /* ty=bool */;
    %489 = cast(meta[relay.Constant][20] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
    %490 = reshape(%488, newshape=[]) /* ty=bool */;
    %491 = reshape(%489, newshape=[1, 16, 14]) /* ty=Tensor[(1, 16, 14), bool] */;
    %492 = @func_3747(%490, %491) /* ty=(Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), float64], Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), int64]) */;
    %493 = @func_5932() /* ty=Tensor[(11, 16, 16), float64] */;
    %494 = %486.0;
    %495 = %487.1;
    %496 = %492.0;
    (%493, %494, %495, %496, %var_8297, meta[relay.Constant][20] /* ty=Tensor[(224), bool] */)
  };
  %497(%var_8311) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(1, 16, 14), bool], bool, Tensor[(224), bool]) */
}

def @func_9274(%var_9233: float32, %var_9234: Tensor[(9, 2, 7), float32]) -> (Tensor[(9, 2, 7), float32], Tensor[(7, 4, 13), uint16], Tensor[(364), uint16], Tensor[(11, 16, 16), float64], Tensor[(12, 1, 1), float32], Tensor[(6, 2), float32]) {
  %498 = cast(%var_9233, dtype="float32") /* ty=float32 */;
  %499 = cast(%var_9234, dtype="float32") /* ty=Tensor[(9, 2, 7), float32] */;
  %500 = cast(meta[relay.Constant][21] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %501 = cast(meta[relay.Constant][21] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %502 = reshape(%500, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %503 = reshape(%501, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %504 = @func_2592(%502, %503) /* ty=(Tensor[(7, 4, 13), uint16],) */;
  %505 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 2), float32] */;
  %506 = reshape(%505, newshape=[12, 1, 1]) /* ty=Tensor[(12, 1, 1), float32] */;
  %507 = @func_7147(%506) /* ty=(Tensor[(12, 1, 1), float32],) */;
  %508 = floor_divide(%498, %499) /* ty=Tensor[(9, 2, 7), float32] */;
  %509 = %504.0;
  %510 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  %511 = %507.0;
  (%508, %509, meta[relay.Constant][21] /* ty=Tensor[(364), uint16] */, %510, %511, meta[relay.Constant][22] /* ty=Tensor[(6, 2), float32] */)
}

def @func_11967(%var_11964: Tensor[(13, 4, 8), int64], %var_11965: Tensor[(13, 4, 8), float64], %var_11966: Tensor[(54), float32]) -> (Tensor[(13, 4, 8), bool], Tensor[(11, 16, 16), float64], Tensor[(54), float32]) {
  %526 = fn (%var_11919: Tensor[(13, 4, 8), int64], %var_11944: Tensor[(13, 4, 8), float64], %var_11956: Tensor[(54), float32]) -> (Tensor[(13, 4, 8), bool], Tensor[(11, 16, 16), float64], Tensor[(54), float32]) {
    %512 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 4, 1), int64] */, dtype="bool") /* ty=Tensor[(13, 4, 1), bool] */;
    %513 = cast(%var_11919, dtype="bool") /* ty=Tensor[(13, 4, 8), bool] */;
    %514 = less(%512, %513) /* ty=Tensor[(13, 4, 8), bool] */;
    %515 = cast(%514, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
    %516 = atanh(%515) /* ty=Tensor[(13, 4, 8), float64] */;
    %517 = cast(%var_11944, dtype="bool") /* ty=Tensor[(13, 4, 8), bool] */;
    %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
    %519 = cast(%516, dtype="bool") /* ty=Tensor[(13, 4, 8), bool] */;
    %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %521 = cast(%var_11956, dtype="float32") /* ty=Tensor[(54), float32] */;
    %522 = reshape(%521, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
    %523 = @func_1882(%522) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(1470), float64], Tensor[(1, 6, 9), bool], Tensor[(27, 2), float32]) */;
    %524 = equal(%519, %520) /* ty=Tensor[(13, 4, 8), bool] */;
    %525 = %523.0;
    (%524, %525, %var_11956)
  };
  %526(%var_11964, %var_11965, %var_11966) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(11, 16, 16), float64], Tensor[(54), float32]) */
}

def @func_6018() -> (Tensor[(11, 16, 16), float64],) {
  @func_6016() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_6456(%var_6454: Tensor[(16, 12, 7), float32]) -> Tensor[(16, 12, 7), float32] {
  @func_6453(%var_6454) /* ty=Tensor[(16, 12, 7), float32] */
}

def @func_6423(%var_6421: Tensor[(11, 16, 16), float64], %var_6422: uint8) -> (Tensor[(11, 16, 16), float32], uint8, Tensor[(176), uint8], uint8) {
  %543 = fn (%var_6375: Tensor[(11, 16, 16), float64], %var_6395: uint8) -> (Tensor[(11, 16, 16), float32], uint8, Tensor[(176), uint8], uint8) {
    %527 = @func_5616() /* ty=Tensor[(11, 16, 16), float64] */;
    %528 = cast(%var_6375, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
    %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
    %530 = cast(%527, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
    %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %532 = cast(meta[relay.Constant][24] /* ty=Tensor[(176), uint8] */, dtype="uint8") /* ty=Tensor[(176), uint8] */;
    %533 = cast(meta[relay.Constant][24] /* ty=Tensor[(176), uint8] */, dtype="uint8") /* ty=Tensor[(176), uint8] */;
    %534 = cast(%var_6395, dtype="uint8") /* ty=uint8 */;
    %535 = cast(meta[relay.Constant][24] /* ty=Tensor[(176), uint8] */, dtype="uint8") /* ty=Tensor[(176), uint8] */;
    %536 = reshape(%532, newshape=[11, 4, 4]) /* ty=Tensor[(11, 4, 4), uint8] */;
    %537 = reshape(%533, newshape=[11, 4, 4]) /* ty=Tensor[(11, 4, 4), uint8] */;
    %538 = reshape(%534, newshape=[]) /* ty=uint8 */;
    %539 = reshape(%535, newshape=[11, 4, 4]) /* ty=Tensor[(11, 4, 4), uint8] */;
    %540 = @func_3523(%536, %537, %538, %539) /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(11, 4, 4), uint8], Tensor[(11, 4, 4), float32], Tensor[(11, 16, 16), float64]) */;
    %541 = divide(%530, %531) /* ty=Tensor[(11, 16, 16), float32] */;
    %542 = %540.2;
    (%541, %542, meta[relay.Constant][24] /* ty=Tensor[(176), uint8] */, %var_6395)
  };
  %543(%var_6421, %var_6422) /* ty=(Tensor[(11, 16, 16), float32], uint8, Tensor[(176), uint8], uint8) */
}

def @func_2410() -> (Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) {
  %544 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 16, 7), float32] */, dtype="float32") /* ty=Tensor[(6, 16, 7), float32] */;
  %545 = log10(%544) /* ty=Tensor[(6, 16, 7), float32] */;
  %546 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 16, 7), float32] */, dtype="int64") /* ty=Tensor[(6, 16, 7), int64] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="int64") /* ty=Tensor[(6, 16, 7), int64] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %550 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 16, 7), float32] */, dtype="float64") /* ty=Tensor[(6, 16, 7), float64] */;
  %551 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(6, 16, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 16, 7), float32] */, dtype="float64") /* ty=Tensor[(6, 16, 7), float64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %554 = @func_1493() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %555 = subtract(%548, %549) /* ty=Tensor[(6, 16, 7), int64] */;
  %556 = floor_mod(%552, %553) /* ty=Tensor[(6, 16, 7), float64] */;
  %557 = %554.0;
  (%555, %556, %557)
}

def @func_6146() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %558 = @func_4409() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %559 = %558.0;
  %560 = @func_5932() /* ty=Tensor[(11, 16, 16), float64] */;
  (%559, %560)
}

def @func_6789() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], uint64, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32], Tensor[(1470), uint8]) {
  %561 = cast(meta[relay.Constant][28] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %562 = @func_2707() /* ty=Tensor[(11, 16, 16), float64] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %564 = reshape(%561, newshape=[]) /* ty=uint64 */;
  %565 = reshape(%563, newshape=[2816]) /* ty=Tensor[(2816), float64] */;
  %566 = @func_4756(%564, %565) /* ty=(Tensor[(1620), float32], uint8, uint64, Tensor[(11, 16, 16), int64], Tensor[(6, 16, 7), float64], Tensor[(54), float32], Tensor[(14, 6, 9), bool], Tensor[(2816), bool]) */;
  %567 = @func_1845() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %568 = cast(meta[relay.Constant][29] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %569 = reshape(%568, newshape=[1, 1470]) /* ty=Tensor[(1, 1470), uint8] */;
  %570 = @func_1260(%569) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(1470), uint8], Tensor[(1, 1470), uint8]) */;
  %571 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  %572 = %566.5;
  %573 = %567.0;
  %574 = %570.0;
  (%562, %571, %572, meta[relay.Constant][28] /* ty=uint64 */, %573, %574, meta[relay.Constant][29] /* ty=Tensor[(1470), uint8] */)
}

def @func_10099() -> (Tensor[(11, 16, 16), float64],) {
  %575 = @func_4590() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %576 = %575.0;
  (%576,)
}

def @func_2257(%var_2231: uint8, %var_2245: Tensor[(1620), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470, 1), uint8], Tensor[(11, 16, 16), float64], Tensor[(1620), float32]) {
  %577 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %578 = cast(%var_2231, dtype="uint8") /* ty=uint8 */;
  %579 = cast(meta[relay.Constant][30] /* ty=Tensor[(1470, 1), uint8] */, dtype="uint8") /* ty=Tensor[(1470, 1), uint8] */;
  %580 = reshape(%578, newshape=[]) /* ty=uint8 */;
  %581 = reshape(%579, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint8] */;
  %582 = cast(%var_2245, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %583 = cast(%var_2231, dtype="uint8") /* ty=uint8 */;
  %584 = cast(meta[relay.Constant][30] /* ty=Tensor[(1470, 1), uint8] */, dtype="uint8") /* ty=Tensor[(1470, 1), uint8] */;
  %585 = reshape(%582, newshape=[1620]) /* ty=Tensor[(1620), float32] */;
  %586 = reshape(%583, newshape=[]) /* ty=uint8 */;
  %587 = reshape(%584, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
  %588 = @func_1923(%585, %586, %587) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(1620), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, Tensor[(1470), uint8]) */;
  %589 = %577.0;
  %590 = @func_310(%580, %581) /* ty=Tensor[(15, 14, 7), uint8] */;
  %591 = %588.0;
  (%589, %590, %var_2231, meta[relay.Constant][30] /* ty=Tensor[(1470, 1), uint8] */, %591, %var_2245)
}

def @func_9278(%var_9276: float32, %var_9277: Tensor[(9, 2, 7), float32]) -> (Tensor[(9, 2, 7), float32], Tensor[(7, 4, 13), uint16], Tensor[(364), uint16], Tensor[(11, 16, 16), float64], Tensor[(12, 1, 1), float32], Tensor[(6, 2), float32]) {
  @func_9274(%var_9276, %var_9277) /* ty=(Tensor[(9, 2, 7), float32], Tensor[(7, 4, 13), uint16], Tensor[(364), uint16], Tensor[(11, 16, 16), float64], Tensor[(12, 1, 1), float32], Tensor[(6, 2), float32]) */
}

def @func_9896(%var_9892: Tensor[(5, 52), float32], %var_9893: Tensor[(5, 52), float32], %var_9894: Tensor[(5, 52), float64], %var_9895: Tensor[(5, 52), float64]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(5, 52), bool], Tensor[(5, 52), uint8], Tensor[(11, 16, 16), float64], Tensor[(5, 52), float64], Tensor[(5, 52), int32], Tensor[(5, 52), float64]) {
  %647 = fn (%var_9750: Tensor[(5, 52), float32], %var_9764: Tensor[(5, 52), float32], %var_9834: Tensor[(5, 52), float64], %var_9840: Tensor[(5, 52), float64]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(5, 52), bool], Tensor[(5, 52), uint8], Tensor[(11, 16, 16), float64], Tensor[(5, 52), float64], Tensor[(5, 52), int32], Tensor[(5, 52), float64]) {
    %592 = @func_8895() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %593 = %592.0;
    %594 = cast(%593, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
    %595 = reshape(%594, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float32] */;
    %596 = @func_3636(%595) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */;
    %597 = cast(%var_9750, dtype="float32") /* ty=Tensor[(5, 52), float32] */;
    %598 = exp(%597) /* ty=Tensor[(5, 52), float32] */;
    %599 = cast(%var_9764, dtype="uint64") /* ty=Tensor[(5, 52), uint64] */;
    %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(2), int32] */;
    %601 = cast(%598, dtype="uint64") /* ty=Tensor[(5, 52), uint64] */;
    %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %603 = right_shift(%601, %602) /* ty=Tensor[(5, 52), uint64] */;
    %604 = cast(%603, dtype="float32") /* ty=Tensor[(5, 52), float32] */;
    %605 = tan(%604) /* ty=Tensor[(5, 52), float32] */;
    %606 = cast(%605, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
    %607 = log10(%606) /* ty=Tensor[(5, 52), float64] */;
    %608 = cast(%var_9834, dtype="bool") /* ty=Tensor[(5, 52), bool] */;
    %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(2), int32] */;
    %610 = cast(%607, dtype="bool") /* ty=Tensor[(5, 52), bool] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %612 = cast(%var_9840, dtype="uint8") /* ty=Tensor[(5, 52), uint8] */;
    %613 = shape_of(%607, dtype="int32") /* ty=Tensor[(2), int32] */;
    %614 = cast(%607, dtype="uint8") /* ty=Tensor[(5, 52), uint8] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %616 = @func_3668() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %617 = cast(%607, dtype="float32") /* ty=Tensor[(5, 52), float32] */;
    %618 = cos(%617) /* ty=Tensor[(5, 52), float32] */;
    %619 = cast(%var_9750, dtype="float32") /* ty=Tensor[(5, 52), float32] */;
    %620 = reshape(%619, newshape=[13, 4, 5]) /* ty=Tensor[(13, 4, 5), float32] */;
    %621 = @func_8604(%620) /* ty=Tensor[(13, 4, 5), float32] */;
    %622 = cast(%621, dtype="float64") /* ty=Tensor[(13, 4, 5), float64] */;
    %623 = shape_of(%618, dtype="int32") /* ty=Tensor[(2), int32] */;
    %624 = cast(%618, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %626 = cast(%var_9750, dtype="float32") /* ty=Tensor[(5, 52), float32] */;
    %627 = shape_of(%603, dtype="int32") /* ty=Tensor[(2), int32] */;
    %628 = cast(%603, dtype="float32") /* ty=Tensor[(5, 52), float32] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %630 = floor_mod(%628, %629) /* ty=Tensor[(5, 52), float32] */;
    %631 = cast(%630, dtype="int32") /* ty=Tensor[(5, 52), int32] */;
    %632 = shape_of(%605, dtype="int32") /* ty=Tensor[(2), int32] */;
    %633 = cast(%605, dtype="int32") /* ty=Tensor[(5, 52), int32] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %635 = cast(%618, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
    %636 = asin(%635) /* ty=Tensor[(5, 52), float64] */;
    %637 = cast(%636, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
    %638 = @func_6465() /* ty=Tensor[(11, 16, 16), float64] */;
    %639 = @func_2707() /* ty=Tensor[(11, 16, 16), float64] */;
    %640 = %596.1;
    %641 = less(%610, %611) /* ty=Tensor[(5, 52), bool] */;
    %642 = add(%614, %615) /* ty=Tensor[(5, 52), uint8] */;
    %643 = %616.0;
    %644 = mod(%624, %625) /* ty=Tensor[(5, 52), float64] */;
    %645 = left_shift(%633, %634) /* ty=Tensor[(5, 52), int32] */;
    %646 = sin(%637) /* ty=Tensor[(5, 52), float64] */;
    (%638, %639, %593, %640, %641, %642, %643, %644, %645, %646)
  };
  %647(%var_9892, %var_9893, %var_9894, %var_9895) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(5, 52), bool], Tensor[(5, 52), uint8], Tensor[(11, 16, 16), float64], Tensor[(5, 52), float64], Tensor[(5, 52), int32], Tensor[(5, 52), float64]) */
}

def @func_6185(%var_6183: uint8) -> (Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8) {
  @func_6182(%var_6183) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8) */
}

def @func_6791() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], uint64, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32], Tensor[(1470), uint8]) {
  @func_6789() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], uint64, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32], Tensor[(1470), uint8]) */
}

def @func_8212() -> (Tensor[(11, 16, 16), float64],) {
  %648 = @func_7245() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %649 = %648.1;
  (%649,)
}

def @func_2708() -> Tensor[(11, 16, 16), float64] {
  %650 = fn () -> Tensor[(11, 16, 16), float64] {
    @func_883() /* ty=Tensor[(11, 16, 16), float64] */
  };
  %650() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_1884(%var_1883: Tensor[(27, 2), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(1470), float64], Tensor[(1, 6, 9), bool], Tensor[(27, 2), float32]) {
  %666 = fn (%var_1880: Tensor[(27, 2), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(1470), float64], Tensor[(1, 6, 9), bool], Tensor[(27, 2), float32]) {
    %651 = cast(meta[relay.Constant][31] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %652 = cast(meta[relay.Constant][32] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
    %653 = reshape(%651, newshape=[]) /* ty=uint8 */;
    %654 = reshape(%652, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
    %655 = @func_1391(%653, %654) /* ty=(Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) */;
    %656 = cast(meta[relay.Constant][32] /* ty=Tensor[(1470), uint8] */, dtype="float64") /* ty=Tensor[(1470), float64] */;
    %657 = cast(meta[relay.Constant][31] /* ty=uint8 */, dtype="float32") /* ty=float32 */;
    %658 = cast(%var_1880, dtype="float32") /* ty=Tensor[(27, 2), float32] */;
    %659 = reshape(%657, newshape=[]) /* ty=float32 */;
    %660 = reshape(%658, newshape=[1, 6, 9]) /* ty=Tensor[(1, 6, 9), float32] */;
    %661 = @func_655(%659, %660) /* ty=(Tensor[(1, 6, 9), bool],) */;
    %662 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
    %663 = %655.1;
    %664 = log(%656) /* ty=Tensor[(1470), float64] */;
    %665 = %661.0;
    (%662, %663, meta[relay.Constant][31] /* ty=uint8 */, %664, %665, %var_1880)
  };
  %666(%var_1883) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(1470), float64], Tensor[(1, 6, 9), bool], Tensor[(27, 2), float32]) */
}

def @func_1982(%var_1980: Tensor[(9, 11, 7), float64]) -> (Tensor[(9, 11, 7), float64], Tensor[(11, 16, 16), float64]) {
  @func_1979(%var_1980) /* ty=(Tensor[(9, 11, 7), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_6466() -> Tensor[(11, 16, 16), float64] {
  %668 = fn () -> Tensor[(11, 16, 16), float64] {
    %667 = @func_5818() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %667.0
  };
  %668() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_7427(%var_7425: Tensor[(64), float64]) -> (Tensor[(11, 16, 16), bool], Tensor[(16), float64], Tensor[(64), float64], Tensor[(1620), float32], Tensor[(14, 4, 4), float32], Tensor[(11, 16, 16), float64]) {
  @func_7424(%var_7425) /* ty=(Tensor[(11, 16, 16), bool], Tensor[(16), float64], Tensor[(64), float64], Tensor[(1620), float32], Tensor[(14, 4, 4), float32], Tensor[(11, 16, 16), float64]) */
}

def @func_11842() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  @func_11840() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_2917() -> Tensor[(11, 16, 16), float64] {
  @func_2915() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_1426() -> Tensor[(11, 16, 16), float64] {
  %669 = fn () -> Tensor[(11, 16, 16), float64] {
    @func_1041() /* ty=Tensor[(11, 16, 16), float64] */
  };
  %669() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_10470(%var_10411: Tensor[(16, 9, 11), int32], %var_10422: uint8, %var_10457: Tensor[(360), int8]) -> (Tensor[(16, 9, 11), int8], Tensor[(11, 16, 16), float64], uint8, Tensor[(1, 9, 11), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) {
  %670 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 9, 11), int32] */, dtype="int32") /* ty=Tensor[(1, 9, 11), int32] */;
  %671 = cast(%var_10411, dtype="int32") /* ty=Tensor[(16, 9, 11), int32] */;
  %672 = bitwise_xor(%670, %671) /* ty=Tensor[(16, 9, 11), int32] */;
  %673 = cast(%672, dtype="int8") /* ty=Tensor[(16, 9, 11), int8] */;
  %674 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 9, 11), int32] */, dtype="int8") /* ty=Tensor[(1, 9, 11), int8] */;
  %675 = cast(%var_10422, dtype="uint8") /* ty=uint8 */;
  %676 = reshape(%675, newshape=[]) /* ty=uint8 */;
  %677 = @func_3179(%676) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %678 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 9, 11), int32] */, dtype="float32") /* ty=Tensor[(1, 9, 11), float32] */;
  %679 = cast(%var_10457, dtype="int8") /* ty=Tensor[(360), int8] */;
  %680 = reshape(%679, newshape=[12, 6, 5]) /* ty=Tensor[(12, 6, 5), int8] */;
  %681 = @func_524(%680) /* ty=(Tensor[(12, 6, 5), int8],) */;
  %682 = @func_8465() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %683 = bitwise_and(%673, %674) /* ty=Tensor[(16, 9, 11), int8] */;
  %684 = %677.0;
  %685 = asin(%678) /* ty=Tensor[(1, 9, 11), float32] */;
  %686 = %681.0;
  %687 = %682.1;
  (%683, %684, %var_10422, %685, %686, %var_10457, %687)
}

def @func_3747(%var_3718: bool, %var_3719: Tensor[(1, 16, 14), bool]) -> (Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), float64], Tensor[(1, 16, 14), bool], Tensor[(11, 16, 16), int64]) {
  %688 = cast(%var_3718, dtype="bool") /* ty=bool */;
  %689 = cast(%var_3719, dtype="bool") /* ty=Tensor[(1, 16, 14), bool] */;
  %690 = cast(%var_3718, dtype="bool") /* ty=bool */;
  %691 = cast(%var_3719, dtype="bool") /* ty=Tensor[(1, 16, 14), bool] */;
  %692 = cast(%var_3718, dtype="uint8") /* ty=uint8 */;
  %693 = reshape(%692, newshape=[]) /* ty=uint8 */;
  %694 = @func_3179(%693) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %695 = logical_or(%688, %689) /* ty=Tensor[(1, 16, 14), bool] */;
  %696 = @func_2915() /* ty=Tensor[(11, 16, 16), float64] */;
  %697 = not_equal(%690, %691) /* ty=Tensor[(1, 16, 14), bool] */;
  %698 = %694.5;
  (%695, %696, %697, %698)
}

def @func_5062() -> (Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) {
  %706 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) {
    %699 = @func_1425() /* ty=Tensor[(11, 16, 16), float64] */;
    %700 = cast(%699, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
    %701 = reshape(%700, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
    %702 = @func_1512(%701) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8]) */;
    %703 = @func_4970() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %704 = %702.2;
    %705 = %703.0;
    (%699, %704, %705)
  };
  %706() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) */
}

def @func_9992(%var_9991: Tensor[(360), int8]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(12, 6, 5), int8], Tensor[(360), int8], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) {
  %720 = fn (%var_9950: Tensor[(360), int8]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(12, 6, 5), int8], Tensor[(360), int8], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) {
    %707 = @func_5148() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %708 = cast(%var_9950, dtype="int8") /* ty=Tensor[(360), int8] */;
    %709 = reshape(%708, newshape=[12, 6, 5]) /* ty=Tensor[(12, 6, 5), int8] */;
    %710 = @func_524(%709) /* ty=(Tensor[(12, 6, 5), int8],) */;
    %711 = @func_6577() /* ty=Tensor[(11, 16, 16), float64] */;
    %712 = cast(%711, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
    %713 = reshape(%712, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
    %714 = @func_1512(%713) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8]) */;
    %715 = @func_9527() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(9, 6), float32], Tensor[(11, 16, 16), float64]) */;
    %716 = %707.0;
    %717 = %710.0;
    %718 = %714.2;
    %719 = %715.0;
    (%716, %711, %717, %var_9950, %718, %719)
  };
  %720(%var_9991) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(12, 6, 5), int8], Tensor[(360), int8], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) */
}

def @func_12248() -> (Tensor[(11, 16, 16), float64], uint8, uint8) {
  @func_12246() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8) */
}

def @func_3529(%var_3525: Tensor[(11, 4, 4), uint8], %var_3526: Tensor[(11, 4, 4), uint8], %var_3527: uint8, %var_3528: Tensor[(11, 4, 4), uint8]) -> (Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(11, 4, 4), uint8], Tensor[(11, 4, 4), float32], Tensor[(11, 16, 16), float64]) {
  @func_3523(%var_3525, %var_3526, %var_3527, %var_3528) /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(11, 4, 4), uint8], Tensor[(11, 4, 4), float32], Tensor[(11, 16, 16), float64]) */
}

def @func_885() -> Tensor[(11, 16, 16), float64] {
  @func_883() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_9557() -> Tensor[(11, 16, 16), bool] {
  %722 = fn () -> Tensor[(11, 16, 16), bool] {
    %721 = @func_9227() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */;
    %721.1
  };
  %722() /* ty=Tensor[(11, 16, 16), bool] */
}

def @func_6858() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %723 = @func_1425() /* ty=Tensor[(11, 16, 16), float64] */;
  %724 = @func_3371() /* ty=Tensor[(11, 16, 16), float64] */;
  (%723, %724)
}

def @func_3903() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) {
  @func_3901() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */
}

def @func_1263(%var_1261: Tensor[(1, 1470), uint8]) -> (Tensor[(11, 16, 16), float32], Tensor[(1470), uint8], Tensor[(1, 1470), uint8]) {
  @func_1260(%var_1261) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(1470), uint8], Tensor[(1, 1470), uint8]) */
}

def @func_1846() -> (Tensor[(11, 16, 16), float64],) {
  %726 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %725 = @func_1819() /* ty=Tensor[(11, 16, 16), float64] */;
    (%725,)
  };
  %726() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_7728() -> (Tensor[(11, 16, 16), float64],) {
  %727 = @func_5818() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %728 = %727.0;
  (%728,)
}

def @func_8865() -> uint8 {
  %730 = fn () -> uint8 {
    %729 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
    %729.3
  };
  %730() /* ty=uint8 */
}

def @func_4082() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32]) {
  %731 = @func_2862() /* ty=Tensor[(11, 16, 16), float64] */;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %733 = @func_2915() /* ty=Tensor[(11, 16, 16), float64] */;
  %734 = log2(%732) /* ty=Tensor[(11, 16, 16), float32] */;
  (%733, %734)
}

def @func_1599(%var_1598: Tensor[(7, 210), uint8]) -> (Tensor[(11, 16, 16), bool], uint8, Tensor[(7, 210), uint8], Tensor[(11, 16, 16), uint16]) {
  %756 = fn (%var_1571: Tensor[(7, 210), uint8]) -> (Tensor[(11, 16, 16), bool], uint8, Tensor[(7, 210), uint8], Tensor[(11, 16, 16), uint16]) {
    %735 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %736 = %735.0;
    %737 = @func_883() /* ty=Tensor[(11, 16, 16), float64] */;
    %738 = cast(%737, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
    %739 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
    %740 = cast(%736, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %742 = cast(%var_1571, dtype="uint8") /* ty=Tensor[(7, 210), uint8] */;
    %743 = reshape(%742, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
    %744 = @func_1205(%743) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
    %745 = %744.2;
    %746 = cast(%745, dtype="uint8") /* ty=uint8 */;
    %747 = reshape(%746, newshape=[]) /* ty=uint8 */;
    %748 = @func_1093(%747) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
    %749 = %748.2;
    %750 = cast(%749, dtype="uint16") /* ty=Tensor[(11, 16, 16), uint16] */;
    %751 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %752 = cast(%737, dtype="uint16") /* ty=Tensor[(11, 16, 16), uint16] */;
    %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %754 = logical_and(%740, %741) /* ty=Tensor[(11, 16, 16), bool] */;
    %755 = logical_xor(%752, %753) /* ty=Tensor[(11, 16, 16), uint16] */;
    (%754, %745, %var_1571, %755)
  };
  %756(%var_1598) /* ty=(Tensor[(11, 16, 16), bool], uint8, Tensor[(7, 210), uint8], Tensor[(11, 16, 16), uint16]) */
}

def @func_9641() -> Tensor[(11, 16, 16), float64] {
  @func_9639() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_9229() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) {
  @func_9227() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */
}

def @func_2171() -> Tensor[(11, 16, 16), bool] {
  @func_2169() /* ty=Tensor[(11, 16, 16), bool] */
}

def @func_4667() -> (Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64]) {
  %766 = fn () -> (Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64]) {
    %757 = @func_2862() /* ty=Tensor[(11, 16, 16), float64] */;
    %758 = @func_2862() /* ty=Tensor[(11, 16, 16), float64] */;
    %759 = cast(%758, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
    %760 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
    %761 = cast(%757, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
    %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %763 = @func_2474() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %764 = power(%761, %762) /* ty=Tensor[(11, 16, 16), float32] */;
    %765 = %763.0;
    (%764, %765)
  };
  %766() /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64]) */
}

def @func_10702() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(11, 16, 16), float64]) {
  %780 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(11, 16, 16), float64]) {
    %767 = @func_6146() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %768 = @func_5979() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %769 = @func_4666() /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64]) */;
    %770 = cast(meta[relay.Constant][34] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %771 = reshape(%770, newshape=[]) /* ty=uint8 */;
    %772 = @func_4342(%771) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64]) */;
    %773 = @func_6016() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %774 = %767.0;
    %775 = @func_9556() /* ty=Tensor[(11, 16, 16), bool] */;
    %776 = %768.0;
    %777 = %769.1;
    %778 = %772.1;
    %779 = %773.0;
    (%774, %775, %776, %777, %778, meta[relay.Constant][34] /* ty=uint8 */, %779)
  };
  %780() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(11, 16, 16), float64]) */
}

def @func_6148() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  @func_6146() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_10242(%var_10240: Tensor[(3, 7, 14), float64], %var_10241: Tensor[(3, 7, 14), float64]) -> (Tensor[(3, 7, 14), float64], Tensor[(11, 16, 16), float64]) {
  @func_10238(%var_10240, %var_10241) /* ty=(Tensor[(3, 7, 14), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_11145(%var_11144: uint8) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8) {
  %790 = fn (%var_11134: uint8) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8) {
    %781 = @func_2474() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %782 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
    %783 = cast(%var_11134, dtype="uint8") /* ty=uint8 */;
    %784 = reshape(%783, newshape=[]) /* ty=uint8 */;
    %785 = @func_6182(%784) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8) */;
    %786 = %781.0;
    %787 = %782.2;
    %788 = @func_8684() /* ty=Tensor[(11, 16, 16), float64] */;
    %789 = %785.0;
    (%786, %787, %788, %789, %var_11134)
  };
  %790(%var_11144) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8) */
}

def @func_7246() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %795 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %791 = @func_4228() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %792 = @func_5979() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %793 = %791.0;
    %794 = %792.0;
    (%793, %794)
  };
  %795() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_2542() -> Tensor[(11, 16, 16), float64] {
  @func_2540() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_3372() -> Tensor[(11, 16, 16), float64] {
  %798 = fn () -> Tensor[(11, 16, 16), float64] {
    %796 = @func_2862() /* ty=Tensor[(11, 16, 16), float64] */;
    %797 = cast(%796, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
    sinh(%797) /* ty=Tensor[(11, 16, 16), float64] */
  };
  %798() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_11507(%var_11505: Tensor[(768), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(768), float32]) {
  @func_11504(%var_11505) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(768), float32]) */
}

def @func_5508() -> Tensor[(11, 16, 16), float64] {
  @func_5506() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_6443() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %799 = @func_3208() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %800 = %799.0;
  %801 = @func_2707() /* ty=Tensor[(11, 16, 16), float64] */;
  (%800, %801)
}

def @func_6673() -> (Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %802 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
  %803 = @func_4082() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32]) */;
  %804 = %802.1;
  %805 = %803.1;
  %806 = @func_2915() /* ty=Tensor[(11, 16, 16), float64] */;
  %807 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
  (%804, %805, %806, %807)
}

def @func_3638(%var_3637: Tensor[(11, 16, 16), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) {
  %820 = fn (%var_3628: Tensor[(11, 16, 16), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) {
    %808 = @func_2429() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */;
    %809 = @func_3208() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %810 = @func_2915() /* ty=Tensor[(11, 16, 16), float64] */;
    %811 = cast(%810, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
    %812 = sin(%811) /* ty=Tensor[(11, 16, 16), float32] */;
    %813 = cast(%var_3628, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
    %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(3), int32] */;
    %815 = cast(%812, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
    %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %817 = %808.0;
    %818 = %809.0;
    %819 = less(%815, %816) /* ty=Tensor[(11, 16, 16), bool] */;
    (%817, %818, %819)
  };
  %820(%var_3637) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */
}

def @func_11045() -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(351), uint8]) {
  %827 = fn () -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(351), uint8]) {
    %821 = @func_3197() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %822 = cast(meta[relay.Constant][35] /* ty=Tensor[(351), uint8] */, dtype="uint8") /* ty=Tensor[(351), uint8] */;
    %823 = reshape(%822, newshape=[39, 9]) /* ty=Tensor[(39, 9), uint8] */;
    %824 = @func_5717(%823) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(39, 9), uint8], Tensor[(11, 16, 16), float64]) */;
    %825 = %821.0;
    %826 = %824.1;
    (%825, %826, meta[relay.Constant][35] /* ty=Tensor[(351), uint8] */)
  };
  %827() /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(351), uint8]) */
}

def @func_3901() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) {
  %828 = @func_3371() /* ty=Tensor[(11, 16, 16), float64] */;
  %829 = @func_2169() /* ty=Tensor[(11, 16, 16), bool] */;
  (%828, %829)
}

def @func_1208(%var_1206: Tensor[(1470), uint8]) -> (Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) {
  @func_1205(%var_1206) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */
}

def @func_2773() -> Tensor[(11, 16, 16), float64] {
  %831 = fn () -> Tensor[(11, 16, 16), float64] {
    %830 = @func_1493() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %830.0
  };
  %831() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_7817(%var_7816: Tensor[(8, 12, 8), float32]) -> (Tensor[(8, 12, 8), float32], Tensor[(11, 16, 16), float64]) {
  %841 = fn (%var_7782: Tensor[(8, 12, 8), float32]) -> (Tensor[(8, 12, 8), float32], Tensor[(11, 16, 16), float64]) {
    %832 = cast(%var_7782, dtype="float32") /* ty=Tensor[(8, 12, 8), float32] */;
    %833 = atanh(%832) /* ty=Tensor[(8, 12, 8), float32] */;
    %834 = cast(%833, dtype="float32") /* ty=Tensor[(8, 12, 8), float32] */;
    %835 = shape_of(%var_7782, dtype="int32") /* ty=Tensor[(3), int32] */;
    %836 = cast(%var_7782, dtype="float32") /* ty=Tensor[(8, 12, 8), float32] */;
    %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %838 = @func_6443() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %839 = add(%836, %837) /* ty=Tensor[(8, 12, 8), float32] */;
    %840 = %838.1;
    (%839, %840)
  };
  %841(%var_7816) /* ty=(Tensor[(8, 12, 8), float32], Tensor[(11, 16, 16), float64]) */
}

def @func_11669() -> Tensor[(14, 4, 4), float64] {
  %842 = @func_10117() /* ty=(Tensor[(14, 4, 4), uint32],) */;
  %843 = %842.0;
  %844 = cast(%843, dtype="float64") /* ty=Tensor[(14, 4, 4), float64] */;
  atanh(%844) /* ty=Tensor[(14, 4, 4), float64] */
}

def @func_3914() -> (Tensor[(11, 16, 16), float64],) {
  %846 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %845 = @func_3371() /* ty=Tensor[(11, 16, 16), float64] */;
    (%845,)
  };
  %846() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_7147(%var_7141: Tensor[(12, 1, 1), float32]) -> (Tensor[(12, 1, 1), float32],) {
  %847 = cast(%var_7141, dtype="float32") /* ty=Tensor[(12, 1, 1), float32] */;
  %848 = cos(%847) /* ty=Tensor[(12, 1, 1), float32] */;
  (%848,)
}

def @func_2862() -> Tensor[(11, 16, 16), float64] {
  %849 = @func_2738() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %849.0
}

def @func_4229() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %854 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %850 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
    %851 = cast(%850, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
    %852 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
    %853 = sigmoid(%851) /* ty=Tensor[(11, 16, 16), float64] */;
    (%852, %853)
  };
  %854() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_4469(%var_4467: Tensor[(6, 16, 7), float64], %var_4468: Tensor[(6, 16, 7), float64]) -> (Tensor[(6, 16, 7), bool], Tensor[(6, 16, 7), float32], Tensor[(6, 16, 7), float32]) {
  %869 = fn (%var_4444: Tensor[(6, 16, 7), float64], %var_4452: Tensor[(6, 16, 7), float64]) -> (Tensor[(6, 16, 7), bool], Tensor[(6, 16, 7), float32], Tensor[(6, 16, 7), float32]) {
    %855 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
    %856 = %855.1;
    %857 = cast(%var_4444, dtype="bool") /* ty=Tensor[(6, 16, 7), bool] */;
    %858 = shape_of(%856, dtype="int32") /* ty=Tensor[(3), int32] */;
    %859 = cast(%856, dtype="bool") /* ty=Tensor[(6, 16, 7), bool] */;
    %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %861 = cast(%var_4452, dtype="float32") /* ty=Tensor[(6, 16, 7), float32] */;
    %862 = shape_of(%856, dtype="int32") /* ty=Tensor[(3), int32] */;
    %863 = cast(%856, dtype="float32") /* ty=Tensor[(6, 16, 7), float32] */;
    %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %865 = cast(%856, dtype="float32") /* ty=Tensor[(6, 16, 7), float32] */;
    %866 = less(%859, %860) /* ty=Tensor[(6, 16, 7), bool] */;
    %867 = minimum(%863, %864) /* ty=Tensor[(6, 16, 7), float32] */;
    %868 = sinh(%865) /* ty=Tensor[(6, 16, 7), float32] */;
    (%866, %867, %868)
  };
  %869(%var_4467, %var_4468) /* ty=(Tensor[(6, 16, 7), bool], Tensor[(6, 16, 7), float32], Tensor[(6, 16, 7), float32]) */
}

def @func_11882() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(10, 5, 2), bool], Tensor[(100), bool], Tensor[(16), float64]) {
  %870 = @func_8496() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %871 = @func_4666() /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64]) */;
  %872 = cast(meta[relay.Constant][36] /* ty=Tensor[(100), bool] */, dtype="bool") /* ty=Tensor[(100), bool] */;
  %873 = cast(meta[relay.Constant][36] /* ty=Tensor[(100), bool] */, dtype="bool") /* ty=Tensor[(100), bool] */;
  %874 = reshape(%872, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), bool] */;
  %875 = reshape(%873, newshape=[10, 5, 2]) /* ty=Tensor[(10, 5, 2), bool] */;
  %876 = @func_7845() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(16), float64]) */;
  %877 = %870.0;
  %878 = %871.1;
  %879 = @func_7117(%874, %875) /* ty=Tensor[(10, 5, 2), bool] */;
  %880 = %876.1;
  (%877, %878, %879, meta[relay.Constant][36] /* ty=Tensor[(100), bool] */, %880)
}

def @func_9227() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) {
  %881 = @func_5590() /* ty=Tensor[(11, 16, 16), float64] */;
  %882 = @func_2169() /* ty=Tensor[(11, 16, 16), bool] */;
  (%881, %882)
}

def @func_4084() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32]) {
  @func_4082() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32]) */
}

def @func_6182(%var_6161: uint8) -> (Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8) {
  %883 = cast(%var_6161, dtype="uint8") /* ty=uint8 */;
  %884 = reshape(%883, newshape=[]) /* ty=uint8 */;
  %885 = @func_3179(%884) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %886 = @func_1819() /* ty=Tensor[(11, 16, 16), float64] */;
  %887 = %885.1;
  (%886, %887, %var_6161)
}

def @func_7846() -> (Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(16), float64]) {
  %894 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(16), float64]) {
    %888 = @func_6789() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], uint64, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32], Tensor[(1470), uint8]) */;
    %889 = cast(meta[relay.Constant][37] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
    %890 = reshape(%889, newshape=[16]) /* ty=Tensor[(16), float64] */;
    %891 = @func_6705(%890) /* ty=(Tensor[(11, 16, 16), int64], Tensor[(14, 4, 4), bool], Tensor[(16), float64], Tensor[(2, 32), float64]) */;
    %892 = %888.1;
    %893 = %891.2;
    (%892, %893, meta[relay.Constant][37] /* ty=Tensor[(16), float64] */)
  };
  %894() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(16), float64]) */
}

def @func_12246() -> (Tensor[(11, 16, 16), float64], uint8, uint8) {
  %895 = cast(meta[relay.Constant][38] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %896 = reshape(%895, newshape=[]) /* ty=uint8 */;
  %897 = @func_4832(%896) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(1470), uint8], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(8, 28), int16]) */;
  %898 = @func_10356() /* ty=Tensor[(11, 16, 16), float64] */;
  %899 = %897.2;
  (%898, %899, meta[relay.Constant][38] /* ty=uint8 */)
}

def @func_8214() -> (Tensor[(11, 16, 16), float64],) {
  @func_8212() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_4859() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  @func_4857() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_2306() -> Tensor[(11, 16, 16), float64] {
  @func_883() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_7661() -> Tensor[(11, 16, 16), float64] {
  @func_7659() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_10161() -> (uint8,) {
  %902 = fn () -> (uint8,) {
    %900 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
    %901 = %900.3;
    (%901,)
  };
  %902() /* ty=(uint8,) */
}

def @func_12150() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  @func_12148() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_10238(%var_10205: Tensor[(3, 7, 14), float64], %var_10206: Tensor[(3, 7, 14), float64]) -> (Tensor[(3, 7, 14), float64], Tensor[(11, 16, 16), float64]) {
  %903 = cast(%var_10206, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %904 = shape_of(%var_10205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %905 = cast(%var_10205, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %907 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
  %908 = subtract(%905, %906) /* ty=Tensor[(3, 7, 14), float64] */;
  %909 = %907.4;
  (%908, %909)
}

def @func_8225() -> (Tensor[(11, 16, 16), float64],) {
  @func_8223() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_10997() -> Tensor[(11, 16, 16), float64] {
  @func_1661() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_10066(%var_10065: Tensor[(13), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(7, 210), uint8], Tensor[(1470), uint8], Tensor[(?, 13), float32], Tensor[(13), float32], Tensor[(11, 16, 16), float64]) {
  %925 = fn (%var_10051: Tensor[(13), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(7, 210), uint8], Tensor[(1470), uint8], Tensor[(?, 13), float32], Tensor[(13), float32], Tensor[(11, 16, 16), float64]) {
    %910 = @func_6057() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %911 = @func_5809() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %912 = cast(meta[relay.Constant][39] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
    %913 = reshape(%912, newshape=[7, 210]) /* ty=Tensor[(7, 210), uint8] */;
    %914 = @func_1597(%913) /* ty=(Tensor[(11, 16, 16), bool], uint8, Tensor[(7, 210), uint8], Tensor[(11, 16, 16), uint16]) */;
    %915 = cast(%var_10051, dtype="float32") /* ty=Tensor[(13), float32] */;
    %916 = cast(%var_10051, dtype="float32") /* ty=Tensor[(13), float32] */;
    %917 = reshape(%915, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
    %918 = reshape(%916, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
    %919 = @func_3197() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %920 = %910.0;
    %921 = %911.0;
    %922 = %914.2;
    %923 = @func_9465(%917, %918) /* ty=Tensor[(?, 13), float32] */;
    %924 = %919.0;
    (%920, %921, %922, meta[relay.Constant][39] /* ty=Tensor[(1470), uint8] */, %923, %var_10051, %924)
  };
  %925(%var_10065) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(7, 210), uint8], Tensor[(1470), uint8], Tensor[(?, 13), float32], Tensor[(13), float32], Tensor[(11, 16, 16), float64]) */
}

def @func_8990() -> (Tensor[(11, 16, 16), float64],) {
  @func_8988() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_10563(%var_10560: Tensor[(90, 18), float32], %var_10561: Tensor[(90, 18), float32], %var_10562: uint64) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(90, 18), float64], Tensor[(11, 16, 16), float64], Tensor[(1, 13), float32], Tensor[(11, 16, 16), float32], Tensor[(?, 13), uint16], Tensor[(90, 18), float64], Tensor[(11, 16, 16), float64]) {
  %956 = fn (%var_10501: Tensor[(90, 18), float32], %var_10506: Tensor[(90, 18), float32], %var_10527: uint64) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(90, 18), float64], Tensor[(11, 16, 16), float64], Tensor[(1, 13), float32], Tensor[(11, 16, 16), float32], Tensor[(?, 13), uint16], Tensor[(90, 18), float64], Tensor[(11, 16, 16), float64]) {
    %926 = @func_2474() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %927 = cast(%var_10501, dtype="float32") /* ty=Tensor[(90, 18), float32] */;
    %928 = reshape(%927, newshape=[1620]) /* ty=Tensor[(1620), float32] */;
    %929 = @func_1763(%928) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], Tensor[(1620), float32], Tensor[(54), float32]) */;
    %930 = cast(%var_10506, dtype="float64") /* ty=Tensor[(90, 18), float64] */;
    %931 = shape_of(%var_10501, dtype="int32") /* ty=Tensor[(2), int32] */;
    %932 = cast(%var_10501, dtype="float64") /* ty=Tensor[(90, 18), float64] */;
    %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %934 = @func_5979() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %935 = cast(%var_10527, dtype="uint64") /* ty=uint64 */;
    %936 = reshape(%935, newshape=[]) /* ty=uint64 */;
    %937 = @func_4000(%936) /* ty=(uint8, Tensor[(11, 16, 16), float32], Tensor[(7, 9, 11), uint64]) */;
    %938 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
    %939 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 13), float32] */;
    %940 = reshape(%938, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
    %941 = reshape(%939, newshape=[1, 13]) /* ty=Tensor[(1, 13), float32] */;
    %942 = @func_9465(%940, %941) /* ty=Tensor[(?, 13), float32] */;
    %943 = cast(%var_10527, dtype="uint16") /* ty=uint16 */;
    %944 = cast(%942, dtype="uint16") /* ty=Tensor[(?, 13), uint16] */;
    %945 = cast(%var_10506, dtype="float64") /* ty=Tensor[(90, 18), float64] */;
    %946 = sigmoid(%945) /* ty=Tensor[(90, 18), float64] */;
    %947 = cast(%946, dtype="float64") /* ty=Tensor[(90, 18), float64] */;
    %948 = %926.0;
    %949 = %929.1;
    %950 = mod(%932, %933) /* ty=Tensor[(90, 18), float64] */;
    %951 = %934.0;
    %952 = %937.1;
    %953 = minimum(%943, %944) /* ty=Tensor[(?, 13), uint16] */;
    %954 = cos(%947) /* ty=Tensor[(90, 18), float64] */;
    %955 = @func_2540() /* ty=Tensor[(11, 16, 16), float64] */;
    (%948, %949, %950, %951, meta[relay.Constant][40] /* ty=Tensor[(1, 13), float32] */, %952, %953, %954, %955)
  };
  %956(%var_10560, %var_10561, %var_10562) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(90, 18), float64], Tensor[(11, 16, 16), float64], Tensor[(1, 13), float32], Tensor[(11, 16, 16), float32], Tensor[(?, 13), uint16], Tensor[(90, 18), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_1766(%var_1764: Tensor[(1620), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], Tensor[(1620), float32], Tensor[(54), float32]) {
  @func_1763(%var_1764) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], Tensor[(1620), float32], Tensor[(54), float32]) */
}

def @func_4278() -> Tensor[(11, 16, 16), float64] {
  @func_4276() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_12148() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %957 = @func_7728() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %958 = @func_4082() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float32]) */;
  %959 = @func_10997() /* ty=Tensor[(11, 16, 16), float64] */;
  %960 = %957.0;
  %961 = %958.0;
  (%959, %960, %961)
}

def @func_2961(%var_2960: Tensor[(11, 16, 16), float64]) -> (Tensor[(11, 16, 16), int64],) {
  %968 = fn (%var_2952: Tensor[(11, 16, 16), float64]) -> (Tensor[(11, 16, 16), int64],) {
    %962 = @func_2306() /* ty=Tensor[(11, 16, 16), float64] */;
    %963 = cast(%var_2952, dtype="int64") /* ty=Tensor[(11, 16, 16), int64] */;
    %964 = shape_of(%962, dtype="int32") /* ty=Tensor[(3), int32] */;
    %965 = cast(%962, dtype="int64") /* ty=Tensor[(11, 16, 16), int64] */;
    %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %967 = bitwise_and(%965, %966) /* ty=Tensor[(11, 16, 16), int64] */;
    (%967,)
  };
  %968(%var_2960) /* ty=(Tensor[(11, 16, 16), int64],) */
}

def @func_10793(%var_10791: Tensor[(768), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(768), float32], Tensor[(16), float64], Tensor[(7, 4, 13), uint16], Tensor[(91, 4), uint16]) {
  @func_10790(%var_10791) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(768), float32], Tensor[(16), float64], Tensor[(7, 4, 13), uint16], Tensor[(91, 4), uint16]) */
}

def @func_10790(%var_10729: Tensor[(768), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(768), float32], Tensor[(16), float64], Tensor[(7, 4, 13), uint16], Tensor[(91, 4), uint16]) {
  %969 = @func_3901() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */;
  %970 = @func_7020() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %971 = cast(%var_10729, dtype="float32") /* ty=Tensor[(768), float32] */;
  %972 = reshape(%971, newshape=[8, 12, 8]) /* ty=Tensor[(8, 12, 8), float32] */;
  %973 = @func_7815(%972) /* ty=(Tensor[(8, 12, 8), float32], Tensor[(11, 16, 16), float64]) */;
  %974 = @func_7845() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(16), float64]) */;
  %975 = cast(meta[relay.Constant][41] /* ty=Tensor[(91, 4), uint16] */, dtype="uint16") /* ty=Tensor[(91, 4), uint16] */;
  %976 = cast(meta[relay.Constant][41] /* ty=Tensor[(91, 4), uint16] */, dtype="uint16") /* ty=Tensor[(91, 4), uint16] */;
  %977 = reshape(%975, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %978 = reshape(%976, newshape=[7, 4, 13]) /* ty=Tensor[(7, 4, 13), uint16] */;
  %979 = @func_2592(%977, %978) /* ty=(Tensor[(7, 4, 13), uint16],) */;
  %980 = %969.0;
  %981 = %970.1;
  %982 = %973.1;
  %983 = %974.1;
  %984 = %979.0;
  (%980, %981, %982, %var_10729, %983, %984, meta[relay.Constant][41] /* ty=Tensor[(91, 4), uint16] */)
}

def @func_6453(%var_6446: Tensor[(16, 12, 7), float32]) -> Tensor[(16, 12, 7), float32] {
  %985 = cast(%var_6446, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  log(%985) /* ty=Tensor[(16, 12, 7), float32] */
}

def @func_7424(%var_7358: Tensor[(64), float64]) -> (Tensor[(11, 16, 16), bool], Tensor[(16), float64], Tensor[(64), float64], Tensor[(1620), float32], Tensor[(14, 4, 4), float32], Tensor[(11, 16, 16), float64]) {
  %986 = @func_3901() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), bool]) */;
  %987 = @func_2429() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */;
  %988 = cast(meta[relay.Constant][42] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %989 = cast(%var_7358, dtype="float64") /* ty=Tensor[(64), float64] */;
  %990 = reshape(%988, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %991 = reshape(%989, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %992 = @func_3049(%990, %991) /* ty=(Tensor[(14, 4, 4), bool], Tensor[(4, 4, 4), int8], Tensor[(1, 4, 4), float32]) */;
  %993 = %992.0;
  %994 = cast(%993, dtype="float32") /* ty=Tensor[(14, 4, 4), float32] */;
  %995 = %986.1;
  %996 = %987.3;
  %997 = atan(%994) /* ty=Tensor[(14, 4, 4), float32] */;
  %998 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
  (%995, meta[relay.Constant][42] /* ty=Tensor[(16), float64] */, %var_7358, %996, %997, %998)
}

def @func_9334() -> Tensor[(11, 16, 16), float64] {
  @func_9332() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_1763(%var_1760: Tensor[(1620), float32]) -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], Tensor[(1620), float32], Tensor[(54), float32]) {
  %999 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1000 = cast(%var_1760, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %1001 = cast(%var_1760, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %1002 = cast(meta[relay.Constant][43] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %1003 = reshape(%1000, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), float32] */;
  %1004 = reshape(%1001, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), float32] */;
  %1005 = reshape(%1002, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %1006 = @func_1717(%1003, %1004, %1005) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(1, 6, 9), bool], float32, Tensor[(54), float32]) */;
  %1007 = @func_1425() /* ty=Tensor[(11, 16, 16), float64] */;
  %1008 = %999.0;
  %1009 = %1006.3;
  (%1007, %1008, %1009, %var_1760, meta[relay.Constant][43] /* ty=Tensor[(54), float32] */)
}

def @func_3198() -> (Tensor[(11, 16, 16), float64],) {
  %1011 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %1010 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
    (%1010,)
  };
  %1011() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_5616() -> Tensor[(11, 16, 16), float64] {
  %1012 = @func_1493() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1012.0
}

def @func_3209() -> (Tensor[(11, 16, 16), float64],) {
  %1014 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %1013 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
    (%1013,)
  };
  %1014() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_2864() -> Tensor[(11, 16, 16), float64] {
  @func_2862() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_7659() -> Tensor[(11, 16, 16), float64] {
  %1015 = @func_6332() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1015.0
}

def @func_2540() -> Tensor[(11, 16, 16), float64] {
  @func_883() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_3405() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) {
  %1026 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) {
    %1016 = @func_883() /* ty=Tensor[(11, 16, 16), float64] */;
    %1017 = cast(%1016, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
    %1018 = reshape(%1017, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
    %1019 = @func_2959(%1018) /* ty=(Tensor[(11, 16, 16), int64],) */;
    %1020 = cast(meta[relay.Constant][44] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %1021 = reshape(%1020, newshape=[]) /* ty=uint8 */;
    %1022 = @func_1093(%1021) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
    %1023 = %1019.0;
    %1024 = %1022.4;
    %1025 = @func_2862() /* ty=Tensor[(11, 16, 16), float64] */;
    (%1016, %1023, %1024, meta[relay.Constant][44] /* ty=uint8 */, %1025)
  };
  %1026() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */
}

def @func_883() -> Tensor[(11, 16, 16), float64] {
  %1027 = cast(meta[relay.Constant][45] /* ty=Tensor[(11, 16, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  asinh(%1027) /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_8784() -> (Tensor[(11, 16, 16), float64], Tensor[(14, 4, 4), uint32], Tensor[(4, 4), float64], Tensor[(224), bool], uint8, Tensor[(30), uint8], Tensor[(11, 16, 16), float64]) {
  %1028 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 4), float64] */;
  %1029 = cast(meta[relay.Constant][47] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
  %1030 = reshape(%1028, newshape=[16]) /* ty=Tensor[(16), float64] */;
  %1031 = reshape(%1029, newshape=[14, 4, 4]) /* ty=Tensor[(14, 4, 4), bool] */;
  %1032 = @func_4153(%1030, %1031) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(64), float64], Tensor[(14, 4, 4), uint32]) */;
  %1033 = cast(meta[relay.Constant][48] /* ty=Tensor[(30), uint8] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %1034 = reshape(%1033, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), uint8] */;
  %1035 = @func_7542(%1034) /* ty=(Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(5, 1, 6), int32]) */;
  %1036 = @func_2306() /* ty=Tensor[(11, 16, 16), float64] */;
  %1037 = %1032.3;
  %1038 = %1035.1;
  %1039 = @func_3371() /* ty=Tensor[(11, 16, 16), float64] */;
  (%1036, %1037, meta[relay.Constant][46] /* ty=Tensor[(4, 4), float64] */, meta[relay.Constant][47] /* ty=Tensor[(224), bool] */, %1038, meta[relay.Constant][48] /* ty=Tensor[(30), uint8] */, %1039)
}

def @func_1391(%var_1373: uint8, %var_1374: Tensor[(1470), uint8]) -> (Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) {
  %1040 = cast(%var_1373, dtype="uint8") /* ty=uint8 */;
  %1041 = cast(%var_1374, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
  %1042 = reshape(%1040, newshape=[]) /* ty=uint8 */;
  %1043 = reshape(%1041, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint8] */;
  %1044 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
  %1045 = cast(%1044, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %1046 = acos(%1045) /* ty=Tensor[(11, 16, 16), float32] */;
  %1047 = cast(%1046, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %1048 = cast(%var_1373, dtype="bool") /* ty=bool */;
  %1049 = @func_310(%1042, %1043) /* ty=Tensor[(15, 14, 7), uint8] */;
  %1050 = equal(%1047, %1048) /* ty=Tensor[(11, 16, 16), bool] */;
  %1051 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
  (%1049, %var_1374, %1050, %1051)
}

def @func_1395(%var_1393: uint8, %var_1394: Tensor[(1470), uint8]) -> (Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) {
  @func_1391(%var_1393, %var_1394) /* ty=(Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) */
}

def @func_4157(%var_4155: Tensor[(16), float64], %var_4156: Tensor[(14, 4, 4), bool]) -> (Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(64), float64], Tensor[(14, 4, 4), uint32]) {
  @func_4153(%var_4155, %var_4156) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(64), float64], Tensor[(14, 4, 4), uint32]) */
}

def @func_1095(%var_1094: uint8) -> (Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) {
  %1063 = fn (%var_1084: uint8) -> (Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) {
    %1052 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %1053 = %1052.0;
    %1054 = cast(%1053, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
    %1055 = cast(%var_1084, dtype="uint8") /* ty=uint8 */;
    %1056 = cast(meta[relay.Constant][49] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
    %1057 = reshape(%1055, newshape=[]) /* ty=uint8 */;
    %1058 = reshape(%1056, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), uint8] */;
    %1059 = cos(%1054) /* ty=Tensor[(11, 16, 16), float32] */;
    %1060 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
    %1061 = @func_883() /* ty=Tensor[(11, 16, 16), float64] */;
    %1062 = @func_310(%1057, %1058) /* ty=Tensor[(15, 14, 7), uint8] */;
    (%1059, %1060, %1061, %1062, %var_1084, meta[relay.Constant][49] /* ty=Tensor[(1470), uint8] */)
  };
  %1063(%var_1094) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */
}

def @func_8071(%var_8047: Tensor[(10, 14, 7), float64], %var_8048: Tensor[(10, 14, 7), float64]) -> Tensor[(10, 14, 7), bool] {
  %1064 = cast(%var_8048, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
  %1065 = shape_of(%var_8047, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1066 = cast(%var_8047, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
  %1067 = dyn.reshape(%1064, %1065, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1068 = subtract(%1066, %1067) /* ty=Tensor[(10, 14, 7), float64] */;
  %1069 = cast(%var_8047, dtype="bool") /* ty=Tensor[(10, 14, 7), bool] */;
  %1070 = shape_of(%1068, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1071 = cast(%1068, dtype="bool") /* ty=Tensor[(10, 14, 7), bool] */;
  %1072 = dyn.reshape(%1069, %1070, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%1071, %1072) /* ty=Tensor[(10, 14, 7), bool] */
}

def @func_5117() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %1078 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %1073 = @func_3913() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %1074 = @func_4228() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %1075 = @func_2707() /* ty=Tensor[(11, 16, 16), float64] */;
    %1076 = %1073.0;
    %1077 = %1074.0;
    (%1075, %1076, %1077)
  };
  %1078() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_7613() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %1082 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %1079 = @func_3404() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], uint8, uint8, Tensor[(11, 16, 16), float64]) */;
    %1080 = @func_5506() /* ty=Tensor[(11, 16, 16), float64] */;
    %1081 = %1079.0;
    (%1080, %1081)
  };
  %1082() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_3778() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(90, 18), float32]) {
  %1089 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(90, 18), float32]) {
    %1083 = @func_2429() /* ty=(Tensor[(11, 16, 16), float64], uint8, uint8, Tensor[(1620), float32]) */;
    %1084 = cast(meta[relay.Constant][50] /* ty=Tensor[(90, 18), float32] */, dtype="float32") /* ty=Tensor[(90, 18), float32] */;
    %1085 = reshape(%1084, newshape=[1620]) /* ty=Tensor[(1620), float32] */;
    %1086 = @func_1763(%1085) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(54), float32], Tensor[(1620), float32], Tensor[(54), float32]) */;
    %1087 = %1083.0;
    %1088 = %1086.0;
    (%1087, %1088, meta[relay.Constant][50] /* ty=Tensor[(90, 18), float32] */)
  };
  %1089() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(90, 18), float32]) */
}

def @func_526(%var_525: Tensor[(12, 6, 5), int8]) -> (Tensor[(12, 6, 5), int8],) {
  %1095 = fn (%var_519: Tensor[(12, 6, 5), int8]) -> (Tensor[(12, 6, 5), int8],) {
    %1090 = cast(%var_519, dtype="int8") /* ty=Tensor[(12, 6, 5), int8] */;
    %1091 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(12, 6, 5), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1092 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 6, 5), int8] */, dtype="int8") /* ty=Tensor[(12, 6, 5), int8] */;
    %1093 = dyn.reshape(%1090, %1091, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1094 = maximum(%1092, %1093) /* ty=Tensor[(12, 6, 5), int8] */;
    (%1094,)
  };
  %1095(%var_525) /* ty=(Tensor[(12, 6, 5), int8],) */
}

def @func_1636() -> (Tensor[(11, 16, 16), float64],) {
  %1097 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %1096 = @func_1041() /* ty=Tensor[(11, 16, 16), float64] */;
    (%1096,)
  };
  %1097() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_5819() -> (Tensor[(11, 16, 16), float64],) {
  %1100 = fn () -> (Tensor[(11, 16, 16), float64],) {
    %1098 = @func_4228() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
    %1099 = %1098.0;
    (%1099,)
  };
  %1100() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_313(%var_311: uint8, %var_312: Tensor[(15, 14, 7), uint8]) -> Tensor[(15, 14, 7), uint8] {
  %1103 = fn (%var_270: uint8, %var_271: Tensor[(15, 14, 7), uint8]) -> Tensor[(15, 14, 7), uint8] {
    %1101 = cast(%var_270, dtype="uint8") /* ty=uint8 */;
    %1102 = cast(%var_271, dtype="uint8") /* ty=Tensor[(15, 14, 7), uint8] */;
    minimum(%1101, %1102) /* ty=Tensor[(15, 14, 7), uint8] */
  };
  %1103(%var_311, %var_312) /* ty=Tensor[(15, 14, 7), uint8] */
}

def @func_4153(%var_4122: Tensor[(16), float64], %var_4134: Tensor[(14, 4, 4), bool]) -> (Tensor[(11, 16, 16), float64], Tensor[(16), float64], Tensor[(64), float64], Tensor[(14, 4, 4), uint32]) {
  %1104 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
  %1105 = cast(%var_4122, dtype="float64") /* ty=Tensor[(16), float64] */;
  %1106 = cast(meta[relay.Constant][52] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %1107 = reshape(%1105, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %1108 = reshape(%1106, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %1109 = @func_3049(%1107, %1108) /* ty=(Tensor[(14, 4, 4), bool], Tensor[(4, 4, 4), int8], Tensor[(1, 4, 4), float32]) */;
  %1110 = %1109.0;
  %1111 = cast(%var_4134, dtype="uint32") /* ty=Tensor[(14, 4, 4), uint32] */;
  %1112 = shape_of(%1110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1113 = cast(%1110, dtype="uint32") /* ty=Tensor[(14, 4, 4), uint32] */;
  %1114 = dyn.reshape(%1111, %1112, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1115 = %1104.2;
  %1116 = right_shift(%1113, %1114) /* ty=Tensor[(14, 4, 4), uint32] */;
  (%1115, %var_4122, meta[relay.Constant][52] /* ty=Tensor[(64), float64] */, %1116)
}

def @func_3181(%var_3180: uint8) -> (Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %1138 = fn (%var_3093: uint8) -> (Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %1117 = cast(%var_3093, dtype="uint8") /* ty=uint8 */;
    %1118 = cast(meta[relay.Constant][53] /* ty=Tensor[(1470), uint8] */, dtype="uint8") /* ty=Tensor[(1470), uint8] */;
    %1119 = reshape(%1117, newshape=[]) /* ty=uint8 */;
    %1120 = reshape(%1118, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
    %1121 = @func_1391(%1119, %1120) /* ty=(Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) */;
    %1122 = cast(%var_3093, dtype="uint8") /* ty=uint8 */;
    %1123 = %1121.0;
    %1124 = cast(%1123, dtype="uint8") /* ty=Tensor[(15, 14, 7), uint8] */;
    %1125 = reshape(%1122, newshape=[]) /* ty=uint8 */;
    %1126 = reshape(%1124, newshape=[1470]) /* ty=Tensor[(1470), uint8] */;
    %1127 = @func_1391(%1125, %1126) /* ty=(Tensor[(15, 14, 7), uint8], Tensor[(1470), uint8], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64]) */;
    %1128 = %1127.3;
    %1129 = cast(%1128, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
    %1130 = reshape(%1129, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
    %1131 = @func_2959(%1130) /* ty=(Tensor[(11, 16, 16), int64],) */;
    %1132 = @func_1425() /* ty=Tensor[(11, 16, 16), float64] */;
    %1133 = cast(%1132, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
    %1134 = @func_2772() /* ty=Tensor[(11, 16, 16), float64] */;
    %1135 = %1131.0;
    %1136 = log10(%1133) /* ty=Tensor[(11, 16, 16), float64] */;
    %1137 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
    (%1134, %1123, %var_3093, meta[relay.Constant][53] /* ty=Tensor[(1470), uint8] */, %1128, %1135, %1136, %1137)
  };
  %1138(%var_3180) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), int64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_5933() -> Tensor[(11, 16, 16), float64] {
  %1139 = fn () -> Tensor[(11, 16, 16), float64] {
    @func_2862() /* ty=Tensor[(11, 16, 16), float64] */
  };
  %1139() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_6445() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  @func_6443() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_7542(%var_7537: Tensor[(5, 1, 6), uint8]) -> (Tensor[(11, 16, 16), float64], uint8, Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(5, 1, 6), int32]) {
  %1140 = @func_1635() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1141 = @func_6057() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1142 = cast(meta[relay.Constant][54] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1143 = reshape(%1142, newshape=[]) /* ty=uint8 */;
  %1144 = @func_6182(%1143) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8) */;
  %1145 = %1144.2;
  %1146 = cast(%1145, dtype="int32") /* ty=int32 */;
  %1147 = cast(%var_7537, dtype="int32") /* ty=Tensor[(5, 1, 6), int32] */;
  %1148 = %1140.0;
  %1149 = %1141.0;
  %1150 = @func_1819() /* ty=Tensor[(11, 16, 16), float64] */;
  %1151 = left_shift(%1146, %1147) /* ty=Tensor[(5, 1, 6), int32] */;
  (%1148, meta[relay.Constant][54] /* ty=uint8 */, %1149, %1150, %1151)
}

def @func_6059() -> (Tensor[(11, 16, 16), float64],) {
  @func_6057() /* ty=(Tensor[(11, 16, 16), float64],) */
}

def @func_2368() -> (Tensor[(11, 16, 16), float64], Tensor[(12, 6, 5), int8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, uint8) {
  %1164 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(12, 6, 5), int8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, uint8) {
    %1152 = @func_1694() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %1153 = %1152.0;
    %1154 = cast(%1153, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
    %1155 = reshape(%1154, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), float64] */;
    %1156 = @func_1512(%1155) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(12, 6, 5), int8], Tensor[(360), int8]) */;
    %1157 = cast(meta[relay.Constant][55] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %1158 = reshape(%1157, newshape=[]) /* ty=uint8 */;
    %1159 = @func_1093(%1158) /* ty=(Tensor[(11, 16, 16), float32], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(15, 14, 7), uint8], uint8, Tensor[(1470), uint8]) */;
    %1160 = %1156.1;
    %1161 = @func_1661() /* ty=Tensor[(11, 16, 16), float64] */;
    %1162 = @func_1425() /* ty=Tensor[(11, 16, 16), float64] */;
    %1163 = %1159.4;
    (%1153, %1160, %1161, %1162, %1163, meta[relay.Constant][55] /* ty=uint8 */)
  };
  %1164() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(12, 6, 5), int8], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], uint8, uint8) */
}

def @func_3049(%var_3015: Tensor[(1, 4, 4), float64], %var_3025: Tensor[(4, 4, 4), float64]) -> (Tensor[(14, 4, 4), bool], Tensor[(4, 4, 4), int8], Tensor[(1, 4, 4), float32]) {
  %1165 = cast(%var_3015, dtype="bool") /* ty=Tensor[(1, 4, 4), bool] */;
  %1166 = cast(meta[relay.Constant][56] /* ty=Tensor[(14, 4, 4), float64] */, dtype="bool") /* ty=Tensor[(14, 4, 4), bool] */;
  %1167 = cast(%var_3015, dtype="float64") /* ty=Tensor[(1, 4, 4), float64] */;
  %1168 = asin(%1167) /* ty=Tensor[(1, 4, 4), float64] */;
  %1169 = cast(%1168, dtype="int8") /* ty=Tensor[(1, 4, 4), int8] */;
  %1170 = cast(%var_3025, dtype="int8") /* ty=Tensor[(4, 4, 4), int8] */;
  %1171 = cast(%var_3015, dtype="float32") /* ty=Tensor[(1, 4, 4), float32] */;
  %1172 = less_equal(%1165, %1166) /* ty=Tensor[(14, 4, 4), bool] */;
  %1173 = bitwise_and(%1169, %1170) /* ty=Tensor[(4, 4, 4), int8] */;
  %1174 = log10(%1171) /* ty=Tensor[(1, 4, 4), float32] */;
  (%1172, %1173, %1174)
}

def @func_9332() -> Tensor[(11, 16, 16), float64] {
  @func_8684() /* ty=Tensor[(11, 16, 16), float64] */
}

def @main(%var_12306: Tensor[(4, 12, 10), float64]) -> (Tensor[(11, 16, 16), float64], bool, bool, Tensor[(4, 12, 10), bool], Tensor[(11, 16, 16), float64], Tensor[(4, 12, 10), float64]) {
  %1175 = @func_9318() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %1176 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %1177 = reshape(%1176, newshape=[]) /* ty=bool */;
  %1178 = @func_8312(%1177) /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(1, 16, 14), bool], bool, Tensor[(224), bool]) */;
  %1179 = cast(%var_12306, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %1180 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(4, 12, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1181 = cast(meta[relay.Constant][57] /* ty=Tensor[(4, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %1182 = dyn.reshape(%1179, %1180, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1183 = floor_divide(%1181, %1182) /* ty=Tensor[(4, 12, 10), float64] */;
  %1184 = cast(%1183, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %1185 = rsqrt(%1184) /* ty=Tensor[(4, 12, 10), float32] */;
  %1186 = cast(%1183, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %1187 = shape_of(%1185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1188 = cast(%1185, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %1189 = dyn.reshape(%1186, %1187, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1190 = floor_mod(%1188, %1189) /* ty=Tensor[(4, 12, 10), float64] */;
  %1191 = cast(meta[relay.Constant][58] /* ty=Tensor[(4, 12, 10), float64] */, dtype="bool") /* ty=Tensor[(4, 12, 10), bool] */;
  %1192 = shape_of(%1190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1193 = cast(%1190, dtype="bool") /* ty=Tensor[(4, 12, 10), bool] */;
  %1194 = dyn.reshape(%1191, %1192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1195 = @func_5810() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1196 = cast(%var_12306, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %1197 = %1175.1;
  %1198 = %1178.4;
  %1199 = greater(%1193, %1194) /* ty=Tensor[(4, 12, 10), bool] */;
  %1200 = %1195.0;
  %1201 = log10(%1196) /* ty=Tensor[(4, 12, 10), float64] */;
  (%1197, %1198, True /* ty=bool */, %1199, %1200, %1201)
}

def @func_9437() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %1202 = @func_3208() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1203 = @func_3668() /* ty=(Tensor[(11, 16, 16), float64],) */;
  %1204 = %1202.0;
  %1205 = %1203.0;
  %1206 = @func_5932() /* ty=Tensor[(11, 16, 16), float64] */;
  (%1204, %1205, %1206)
}

def @func_6488() -> Tensor[(11, 16, 16), float64] {
  %1208 = fn () -> Tensor[(11, 16, 16), float64] {
    %1207 = @func_4970() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %1207.0
  };
  %1208() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_2739() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %1213 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %1209 = @func_2410() /* ty=(Tensor[(6, 16, 7), int64], Tensor[(6, 16, 7), float64], Tensor[(11, 16, 16), float64]) */;
    %1210 = %1209.2;
    %1211 = @func_1819() /* ty=Tensor[(11, 16, 16), float64] */;
    %1212 = @func_1432() /* ty=Tensor[(11, 16, 16), float64] */;
    (%1210, %1211, %1212)
  };
  %1213() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_10356() -> Tensor[(11, 16, 16), float64] {
  %1214 = @func_3777() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64], Tensor[(90, 18), float32]) */;
  %1214.0
}

def @func_10358() -> Tensor[(11, 16, 16), float64] {
  @func_10356() /* ty=Tensor[(11, 16, 16), float64] */
}

def @func_9318() -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
  %1219 = fn () -> (Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) {
    %1215 = @func_5061() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(360), int8], Tensor[(11, 16, 16), float64]) */;
    %1216 = @func_978() /* ty=(Tensor[(11, 16, 16), float64],) */;
    %1217 = %1215.0;
    %1218 = %1216.0;
    (%1217, %1218)
  };
  %1219() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */
}

def @func_9639() -> Tensor[(11, 16, 16), float64] {
  %1220 = @func_4857() /* ty=(Tensor[(11, 16, 16), float64], Tensor[(11, 16, 16), float64]) */;
  %1220.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen506/build/output.py", line 3650, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:25:44] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

