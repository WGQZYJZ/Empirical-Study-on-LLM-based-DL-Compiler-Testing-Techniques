==========mod==========
#[version = "0.0.5"]
def @func_721(%var_717: uint8) -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) {
  %0 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1 = cast(%var_717, dtype="uint8") /* ty=uint8 */;
  %2 = reshape(%1, newshape=[]) /* ty=uint8 */;
  %3 = @func_434(%2) /* ty=(Tensor[(9, 2, 3), bool],) */;
  %4 = %0.0;
  %5 = %3.0;
  (%4, %5, %var_717)
}

def @func_15007() -> (Tensor[(12, 3, 14), uint16],) {
  %6 = @func_8908() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %7 = %6.0;
  (%7,)
}

def @func_8579() -> Tensor[(1000), float32] {
  %8 = @func_5648() /* ty=(Tensor[(1000), float32],) */;
  %8.0
}

def @func_2882() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) {
  %9 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %10 = %9.0;
  %11 = @func_1528() /* ty=Tensor[(12, 3, 14), float32] */;
  (%10, %11)
}

def @func_12750() -> Tensor[(12, 3, 14), uint16] {
  @func_3019() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_6338() -> (Tensor[(1, 14, 12), float32], Tensor[(12, 3, 14), uint16]) {
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 14, 12), float32] */, dtype="float32") /* ty=Tensor[(1, 14, 12), float32] */;
  %13 = @func_3504() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %14 = sqrt(%12) /* ty=Tensor[(1, 14, 12), float32] */;
  %15 = %13.1;
  (%14, %15)
}

def @func_12349() -> (Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) {
  %16 = @func_10942() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %17 = @func_8148() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) */;
  %18 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %19 = %16.0;
  %20 = %17.1;
  %21 = %18.0;
  (%19, %20, %21)
}

def @func_14075(%var_14046: float64) -> (Tensor[(12, 3, 14), uint16], float64, float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(2, 16, 14), bool], Tensor[(448), uint32]) {
  %22 = @func_10329() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float32], Tensor[(396), float32]) */;
  %23 = cast(%var_14046, dtype="float64") /* ty=float64 */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %25 = reshape(%23, newshape=[]) /* ty=float64 */;
  %26 = reshape(%24, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %27 = @func_3399(%25, %26) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(468), float64], float64, Tensor[(60), bool]) */;
  %28 = @func_5060() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %30 = reshape(%29, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), uint32] */;
  %31 = @func_10680(%30) /* ty=(Tensor[(2, 16, 14), bool], Tensor[(12, 3, 14), float32]) */;
  %32 = %22.0;
  %33 = %27.2;
  %34 = %28.0;
  %35 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %36 = %31.0;
  (%32, %33, %var_14046, meta[relay.Constant][1] /* ty=Tensor[(60), bool] */, %34, %35, %36, meta[relay.Constant][2] /* ty=Tensor[(448), uint32] */)
}

def @func_13467() -> Tensor[(12, 3, 14), uint16] {
  %37 = @func_11939() /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
  %37.1
}

def @func_3110() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %38 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %39 = @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */;
  %40 = %38.0;
  (%39, %40)
}

def @func_9619() -> (Tensor[(12, 3, 14), uint16],) {
  %41 = @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%41,)
}

def @func_14830(%var_14805: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64]) {
  %42 = cast(%var_14805, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %43 = reshape(%42, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %44 = @func_13302(%43) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(15, 4), bool], Tensor[(1000), float64]) */;
  %45 = @func_9026() /* ty=Tensor[(12, 3, 14), uint16] */;
  %46 = %44.1;
  (%45, %46, %var_14805)
}

def @func_935() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) {
  %47 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %48 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %49 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(12, 3, 14), float64] */;
  %52 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %53 = %47.0;
  %54 = %48.0;
  %55 = sigmoid(%51) /* ty=Tensor[(12, 3, 14), float64] */;
  %56 = %52.0;
  (%53, %54, %55, %56)
}

def @func_5522() -> (Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %57 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %58 = @func_5200() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %59 = @func_5060() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %60 = %57.0;
  %61 = %58.0;
  %62 = @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */;
  %63 = %59.0;
  (%60, %61, %62, %63)
}

def @func_8675(%var_8642: Tensor[(1000), float64], %var_8643: Tensor[(60), uint32], %var_8671: Tensor[(468), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(12, 3, 14), float64]) {
  %64 = @func_3110() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %65 = cast(%var_8642, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %66 = cast(%var_8643, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %67 = reshape(%65, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %68 = reshape(%66, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
  %69 = @func_8398(%67, %68) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64], Tensor[(2, 3, 10), int64]) */;
  %70 = cast(%var_8643, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %71 = cast(%var_8671, dtype="float64") /* ty=Tensor[(468), float64] */;
  %72 = reshape(%70, newshape=[60]) /* ty=Tensor[(60), uint32] */;
  %73 = reshape(%71, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %74 = @func_7283(%72, %73) /* ty=(Tensor[(1000), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], float64, Tensor[(60), uint32], Tensor[(468), float64], Tensor[(12, 3, 14), uint16]) */;
  %75 = cast(%var_8642, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %76 = reshape(%75, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %77 = @func_2172(%76) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) */;
  %78 = %64.0;
  %79 = %69.1;
  %80 = @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */;
  %81 = %74.3;
  %82 = %77.1;
  (%78, %79, %var_8642, %var_8643, %80, %81, %var_8671, %82)
}

def @func_11679() -> (Tensor[(1, 14, 12), float32], Tensor[(2, 3, 10), float32], Tensor[(12, 3, 14), uint16]) {
  %83 = @func_6338() /* ty=(Tensor[(1, 14, 12), float32], Tensor[(12, 3, 14), uint16]) */;
  %84 = @func_5522() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %85 = %84.0;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
  %87 = @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */;
  %88 = %83.0;
  %89 = rsqrt(%86) /* ty=Tensor[(2, 3, 10), float32] */;
  %90 = %87.3;
  (%88, %89, %90)
}

def @func_10098() -> Tensor[(12, 3, 14), uint16] {
  %91 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %91.0
}

def @func_3258() -> Tensor[(2, 3, 10), uint32] {
  %92 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %92.0
}

def @func_7628() -> (Tensor[(12, 3, 14), float32],) {
  %93 = @func_3920() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %94 = %93.0;
  (%94,)
}

def @func_8094() -> (Tensor[(12, 3, 14), uint16],) {
  %95 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %96 = %95.0;
  (%96,)
}

def @func_7578() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], uint8) {
  %97 = @func_2383() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
  %98 = cast(meta[relay.Constant][3] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %99 = reshape(%98, newshape=[]) /* ty=uint8 */;
  %100 = @func_2583(%99) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], uint8, Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %101 = %97.1;
  %102 = %100.1;
  (%101, %102, meta[relay.Constant][3] /* ty=uint8 */)
}

def @func_2287() -> Tensor[(12, 3, 14), uint16] {
  %103 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %103.0
}

def @func_10993() -> Tensor[(12, 3, 14), uint16] {
  @func_10798() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_12675(%var_12660: Tensor[(308), float64], %var_12664: uint8, %var_12665: Tensor[(22), uint8]) -> (Tensor[(12, 3, 14), uint16], Tensor[(14, 2, 11), float64], Tensor[(308), float64], Tensor[(2, ?, 11), uint16], uint8, Tensor[(22), uint8]) {
  %104 = @func_5386() /* ty=(Tensor[(2, 3, 10), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), bool]) */;
  %105 = cast(%var_12660, dtype="float64") /* ty=Tensor[(308), float64] */;
  %106 = reshape(%105, newshape=[14, 2, 11]) /* ty=Tensor[(14, 2, 11), float64] */;
  %107 = cast(%var_12664, dtype="uint8") /* ty=uint8 */;
  %108 = cast(%var_12665, dtype="uint8") /* ty=Tensor[(22), uint8] */;
  %109 = reshape(%107, newshape=[]) /* ty=uint8 */;
  %110 = reshape(%108, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), uint8] */;
  %111 = @func_10383(%109, %110) /* ty=(Tensor[(2, ?, 11), uint16], Tensor[(2, 3, 10), uint32]) */;
  %112 = %104.2;
  %113 = @func_10775(%106) /* ty=Tensor[(14, 2, 11), float64] */;
  %114 = %111.0;
  (%112, %113, %var_12660, %114, %var_12664, %var_12665)
}

def @func_12578(%var_12565: Tensor[(8, 8, 11), float32]) -> (Tensor[(8, 8, 11), float32], Tensor[(8, 8, 11), float32]) {
  %115 = cast(%var_12565, dtype="float32") /* ty=Tensor[(8, 8, 11), float32] */;
  %116 = cast(%var_12565, dtype="float32") /* ty=Tensor[(8, 8, 11), float32] */;
  %117 = exp(%115) /* ty=Tensor[(8, 8, 11), float32] */;
  %118 = acosh(%116) /* ty=Tensor[(8, 8, 11), float32] */;
  (%117, %118)
}

def @func_5530() -> (Tensor[(12, 3, 14), uint16],) {
  %119 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %120 = %119.0;
  (%120,)
}

def @func_5679() -> (Tensor[(12, 3, 14), float32],) {
  %121 = @func_5244() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %122 = %121.0;
  (%122,)
}

def @func_10077() -> Tensor[(12, 3, 14), uint16] {
  %123 = @func_5981() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %123.1
}

def @func_4646() -> Tensor[(12, 3, 14), uint16] {
  @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_5265(%var_5262: float64) -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint64], float64, Tensor[(78, 6), float64]) {
  %124 = cast(%var_5262, dtype="float64") /* ty=float64 */;
  %125 = cast(meta[relay.Constant][4] /* ty=Tensor[(78, 6), float64] */, dtype="float64") /* ty=Tensor[(78, 6), float64] */;
  %126 = reshape(%124, newshape=[]) /* ty=float64 */;
  %127 = reshape(%125, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %128 = @func_4279(%126, %127) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(468), float64], Tensor[(12, 3, 14), uint16], Tensor[(1000), int32], Tensor[(2, 3, 10), uint64], uint8) */;
  %129 = @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */;
  %130 = %128.5;
  (%129, %130, %var_5262, meta[relay.Constant][4] /* ty=Tensor[(78, 6), float64] */)
}

def @func_12457() -> Tensor[(1000), float32] {
  %131 = @func_11492() /* ty=(Tensor[(1000), float32],) */;
  %131.0
}

def @func_10775(%var_10771: Tensor[(14, 2, 11), float64]) -> Tensor[(14, 2, 11), float64] {
  %132 = cast(%var_10771, dtype="float64") /* ty=Tensor[(14, 2, 11), float64] */;
  rsqrt(%132) /* ty=Tensor[(14, 2, 11), float64] */
}

def @func_6879() -> Tensor[(2, 3, 10), uint32] {
  %133 = @func_4082() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) */;
  %133.0
}

def @func_9498() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32]) {
  %134 = @func_4887() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %135 = @func_4646() /* ty=Tensor[(12, 3, 14), uint16] */;
  %136 = %134.1;
  %137 = @func_7761() /* ty=Tensor[(2, 3, 10), uint32] */;
  (%135, %136, %137)
}

def @func_2480() -> (Tensor[(12, 3, 14), uint16],) {
  %138 = @func_1135() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%138,)
}

def @func_10148() -> (Tensor[(2, 3, 10), uint32],) {
  %139 = @func_6879() /* ty=Tensor[(2, 3, 10), uint32] */;
  (%139,)
}

def @func_9409() -> (Tensor[(15, 13, 5), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %140 = @func_7723() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %141 = @func_8854() /* ty=Tensor[(15, 13, 5), float64] */;
  %142 = %140.3;
  %143 = @func_1653() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%141, %142, %143)
}

def @func_5810() -> Tensor[(12, 3, 14), float32] {
  @func_1422() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_15305() -> Tensor[(12, 3, 14), uint16] {
  %144 = @func_9092() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(30, 2), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %144.2
}

def @func_12877(%var_12828: Tensor[(432), float64], %var_12852: Tensor[(468), float64]) -> (Tensor[(9, 13, 5), float32], Tensor[(16, 9, 3), float64], Tensor[(27), float64], Tensor[(432), float64], Tensor[(468), float64], Tensor[(468), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 13, 5), float64]) {
  %145 = cast(meta[relay.Constant][5] /* ty=Tensor[(27), float64] */, dtype="float64") /* ty=Tensor[(27), float64] */;
  %146 = cast(%var_12828, dtype="float64") /* ty=Tensor[(432), float64] */;
  %147 = reshape(%145, newshape=[1, 9, 3]) /* ty=Tensor[(1, 9, 3), float64] */;
  %148 = reshape(%146, newshape=[16, 9, 3]) /* ty=Tensor[(16, 9, 3), float64] */;
  %149 = @func_7877(%147, %148) /* ty=(Tensor[(16, 9, 3), float64], Tensor[(16, 9, 3), int8]) */;
  %150 = cast(%var_12852, dtype="float64") /* ty=Tensor[(468), float64] */;
  %151 = reshape(%150, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %152 = @func_1817(%151) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 13), float64], float64, Tensor[(468), float64], Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16]) */;
  %153 = @func_2882() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %154 = @func_7723() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %155 = @func_11180() /* ty=Tensor[(9, 13, 5), float32] */;
  %156 = %149.0;
  %157 = %152.3;
  %158 = %153.0;
  %159 = %154.2;
  %160 = @func_6934() /* ty=Tensor[(15, 13, 5), float64] */;
  (%155, %156, meta[relay.Constant][5] /* ty=Tensor[(27), float64] */, %var_12828, %157, %var_12852, %158, %159, %160)
}

def @func_12551(%var_12539: Tensor[(6, 6, 2), float32], %var_12540: Tensor[(6, 6, 2), float32]) -> Tensor[(6, 6, 2), float32] {
  %161 = cast(%var_12540, dtype="float32") /* ty=Tensor[(6, 6, 2), float32] */;
  %162 = shape_of(%var_12539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%var_12539, dtype="float32") /* ty=Tensor[(6, 6, 2), float32] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%163, %164) /* ty=Tensor[(6, 6, 2), float32] */
}

def @func_5115() -> (Tensor[(1000), float64], Tensor[(2, 3, 10), bool], Tensor[(1, 60), bool]) {
  %165 = @func_3557() /* ty=(Tensor[(1000), float64],) */;
  %166 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 60), bool] */, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
  %167 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 60), bool] */, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
  %168 = reshape(%166, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %169 = reshape(%167, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %170 = @func_237(%168, %169) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %171 = %165.0;
  %172 = %170.1;
  (%171, %172, meta[relay.Constant][6] /* ty=Tensor[(1, 60), bool] */)
}

def @func_13083(%var_13032: Tensor[(364), uint16]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(26, 2), uint16], Tensor[(12, 3, 14), uint16], Tensor[(4, 13, 7), int8], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) {
  %173 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %174 = @func_9619() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %175 = @func_4665() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %176 = @func_11448() /* ty=Tensor[(12, 3, 14), float32] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %178 = reshape(%177, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
  %179 = @func_3861(%178) /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %180 = @func_8148() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) */;
  %181 = cast(meta[relay.Constant][7] /* ty=Tensor[(26, 2), uint16] */, dtype="uint16") /* ty=Tensor[(26, 2), uint16] */;
  %182 = cast(%var_13032, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %183 = reshape(%181, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), uint16] */;
  %184 = reshape(%182, newshape=[4, 13, 7]) /* ty=Tensor[(4, 13, 7), uint16] */;
  %185 = @func_9609(%183, %184) /* ty=(Tensor[(4, 13, 7), bool],) */;
  %186 = %185.0;
  %187 = cast(%var_13032, dtype="int8") /* ty=Tensor[(364), int8] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="int8") /* ty=Tensor[(4, 13, 7), int8] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %191 = @func_9409() /* ty=(Tensor[(15, 13, 5), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %192 = @func_2505() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %193 = @func_5244() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %194 = %173.0;
  %195 = %174.0;
  %196 = %175.0;
  %197 = %179.0;
  %198 = %180.0;
  %199 = logical_xor(%189, %190) /* ty=Tensor[(4, 13, 7), int8] */;
  %200 = %191.2;
  %201 = %192.0;
  %202 = %193.0;
  (%194, %195, %176, %196, %197, meta[relay.Constant][7] /* ty=Tensor[(26, 2), uint16] */, %198, %199, %200, %201, %202)
}

def @func_1528() -> Tensor[(12, 3, 14), float32] {
  %203 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %204 = %203.0;
  %205 = @func_1422() /* ty=Tensor[(12, 3, 14), float32] */;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %207 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%204, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%208, %209) /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_9113() -> Tensor[(12, 3, 14), float32] {
  %210 = @func_3920() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %210.0
}

def @func_15192() -> (Tensor[(12, 3, 14), uint16],) {
  %211 = @func_2882() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %212 = %211.0;
  (%212,)
}

def @func_4082() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) {
  %213 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %214 = @func_3110() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %215 = %213.6;
  %216 = %214.1;
  (%215, %216)
}

def @func_12632() -> (Tensor[(11, 4, 9), float32],) {
  %217 = @func_10329() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float32], Tensor[(396), float32]) */;
  %218 = %217.3;
  (%218,)
}

def @func_6547() -> Tensor[(12, 3, 14), uint16] {
  @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_10942() -> (Tensor[(12, 3, 14), uint16],) {
  %219 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %220 = %219.0;
  (%220,)
}

def @func_4991(%var_4983: float64) -> (Tensor[(12, 3, 14), uint16], Tensor[(60), bool], float64, Tensor[(60), bool]) {
  %221 = @func_2383() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
  %222 = cast(%var_4983, dtype="float64") /* ty=float64 */;
  %223 = cast(meta[relay.Constant][8] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %224 = reshape(%222, newshape=[]) /* ty=float64 */;
  %225 = reshape(%223, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %226 = @func_3399(%224, %225) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(468), float64], float64, Tensor[(60), bool]) */;
  %227 = %221.0;
  %228 = %226.3;
  (%227, %228, %var_4983, meta[relay.Constant][8] /* ty=Tensor[(60), bool] */)
}

def @func_11161(%var_11119: float64) -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], float64, Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(396), float32]) {
  %229 = @func_9690() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %230 = cast(%var_11119, dtype="float64") /* ty=float64 */;
  %231 = reshape(%230, newshape=[]) /* ty=float64 */;
  %232 = @func_5265(%231) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint64], float64, Tensor[(78, 6), float64]) */;
  %233 = cast(%var_11119, dtype="uint8") /* ty=uint8 */;
  %234 = reshape(%233, newshape=[]) /* ty=uint8 */;
  %235 = @func_434(%234) /* ty=(Tensor[(9, 2, 3), bool],) */;
  %236 = cast(meta[relay.Constant][9] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %237 = reshape(%236, newshape=[66, 6]) /* ty=Tensor[(66, 6), float32] */;
  %238 = @func_5612(%237) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float64], Tensor[(66, 6), float32]) */;
  %239 = %229.1;
  %240 = %232.0;
  %241 = %235.0;
  %242 = @func_3959() /* ty=Tensor[(12, 3, 14), float32] */;
  %243 = %238.1;
  (%239, %240, %var_11119, %241, %242, %243, meta[relay.Constant][9] /* ty=Tensor[(396), float32] */)
}

def @func_13535() -> (Tensor[(12, 3, 14), uint16],) {
  %244 = @func_4887() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %245 = %244.1;
  (%245,)
}

def @func_4665() -> (Tensor[(2, 3, 10), uint32],) {
  %246 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %247 = %246.0;
  (%247,)
}

def @func_11939() -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) {
  %248 = @func_5981() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %249 = @func_9113() /* ty=Tensor[(12, 3, 14), float32] */;
  %250 = %248.0;
  (%249, %250)
}

def @func_7877(%var_7814: Tensor[(1, 9, 3), float64], %var_7815: Tensor[(16, 9, 3), float64]) -> (Tensor[(16, 9, 3), float64], Tensor[(16, 9, 3), int8]) {
  %251 = cast(%var_7814, dtype="float64") /* ty=Tensor[(1, 9, 3), float64] */;
  %252 = cast(%var_7815, dtype="float64") /* ty=Tensor[(16, 9, 3), float64] */;
  %253 = cast(%var_7815, dtype="int8") /* ty=Tensor[(16, 9, 3), int8] */;
  %254 = cast(%var_7814, dtype="int8") /* ty=Tensor[(1, 9, 3), int8] */;
  %255 = mod(%251, %252) /* ty=Tensor[(16, 9, 3), float64] */;
  %256 = bitwise_xor(%253, %254) /* ty=Tensor[(16, 9, 3), int8] */;
  (%255, %256)
}

def @func_6489() -> Tensor[(12, 3, 14), uint16] {
  %257 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %257.0
}

def @func_7946(%var_7936: Tensor[(6, 16, 7), float64]) -> Tensor[(6, 16, 7), float64] {
  %258 = cast(%var_7936, dtype="float64") /* ty=Tensor[(6, 16, 7), float64] */;
  log(%258) /* ty=Tensor[(6, 16, 7), float64] */
}

def @func_11448() -> Tensor[(12, 3, 14), float32] {
  @func_11385() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_11180() -> Tensor[(9, 13, 5), float32] {
  %259 = @func_3245() /* ty=(Tensor[(9, 13, 5), float32],) */;
  %259.0
}

def @func_12213() -> (Tensor[(2, 1, 6), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) {
  %260 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 1, 6), float32] */, dtype="float32") /* ty=Tensor[(2, 1, 6), float32] */;
  %261 = cast(meta[relay.Constant][11] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %262 = reshape(%261, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %263 = @func_7067(%262) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16]) */;
  %264 = asinh(%260) /* ty=Tensor[(2, 1, 6), float32] */;
  %265 = %263.1;
  (%264, %265, meta[relay.Constant][11] /* ty=Tensor[(1000), float64] */)
}

def @func_14721() -> Tensor[(1000), float64] {
  @func_3997() /* ty=Tensor[(1000), float64] */
}

def @func_13697() -> (Tensor[(12, 3, 14), uint16],) {
  %266 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %267 = %266.1;
  (%267,)
}

def @func_5200() -> (Tensor[(2, 3, 10), uint32],) {
  %268 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  (%268,)
}

def @func_12603() -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) {
  %269 = cast(meta[relay.Constant][12] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %270 = reshape(%269, newshape=[]) /* ty=uint8 */;
  %271 = @func_9165(%270) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16]) */;
  %272 = @func_8360() /* ty=Tensor[(12, 3, 14), uint16] */;
  %273 = %271.1;
  (%272, %273, meta[relay.Constant][12] /* ty=uint8 */)
}

def @func_8029(%var_8017: Tensor[(16, 16, 9), uint16]) -> (Tensor[(16, 16, 9), uint16], Tensor[(2, 3, 10), bool], Tensor[(60), bool]) {
  %274 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 16, 9), uint16] */, dtype="uint16") /* ty=Tensor[(16, 16, 9), uint16] */;
  %275 = shape_of(%var_8017, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%var_8017, dtype="uint16") /* ty=Tensor[(16, 16, 9), uint16] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %278 = cast(meta[relay.Constant][14] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %279 = cast(meta[relay.Constant][14] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %280 = reshape(%278, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %281 = reshape(%279, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %282 = @func_237(%280, %281) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %283 = bitwise_or(%276, %277) /* ty=Tensor[(16, 16, 9), uint16] */;
  %284 = %282.1;
  (%283, %284, meta[relay.Constant][14] /* ty=Tensor[(60), bool] */)
}

def @func_5386() -> (Tensor[(2, 3, 10), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), bool]) {
  %285 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %286 = %285.0;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
  %288 = cast(%286, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %289 = cast(%286, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %290 = reshape(%288, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %291 = reshape(%289, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %292 = @func_237(%290, %291) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %293 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %294 = cast(%286, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %295 = atanh(%287) /* ty=Tensor[(2, 3, 10), float32] */;
  %296 = cast(%295, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %297 = reshape(%294, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %298 = reshape(%296, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %299 = @func_237(%297, %298) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %300 = %292.0;
  %301 = %293.0;
  %302 = %299.1;
  (%295, %300, %301, %302)
}

def @func_10599() -> (Tensor[(12, 3, 14), uint16],) {
  %303 = @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %304 = %303.0;
  (%304,)
}

def @func_13414() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) {
  %305 = @func_5386() /* ty=(Tensor[(2, 3, 10), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), bool]) */;
  %306 = @func_9293() /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
  %307 = %305.1;
  %308 = %306.1;
  (%307, %308)
}

def @func_1135() -> Tensor[(12, 3, 14), uint16] {
  %309 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %309.0
}

def @func_8360() -> Tensor[(12, 3, 14), uint16] {
  %310 = @func_1683() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %310.0
}

def @func_12046() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %311 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %312 = %311.0;
  %313 = @func_9986() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%312, %313)
}

def @func_3796() -> (Tensor[(12, 3, 14), uint16],) {
  %314 = @func_3110() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %315 = %314.1;
  (%315,)
}

def @func_13669() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %316 = @func_12160() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %317 = @func_12349() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) */;
  %318 = @func_1377() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %319 = %316.0;
  %320 = %317.2;
  %321 = %318.0;
  (%319, %320, %321)
}

def @func_9209() -> (Tensor[(12, 3, 14), float32], uint8) {
  %322 = @func_5060() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %323 = @func_6300() /* ty=(uint8,) */;
  %324 = %322.1;
  %325 = %323.0;
  (%324, %325)
}

def @func_1104() -> (Tensor[(12, 3, 14), uint16],) {
  %326 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %327 = %326.0;
  (%327,)
}

def @func_4329() -> (Tensor[(12, 3, 14), uint16],) {
  %328 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %329 = %328.0;
  (%329,)
}

def @func_3861(%var_3853: Tensor[(12, 3, 14), float32]) -> (Tensor[(12, 3, 14), uint16],) {
  %330 = @func_1422() /* ty=Tensor[(12, 3, 14), float32] */;
  %331 = cast(%var_3853, dtype="uint16") /* ty=Tensor[(12, 3, 14), uint16] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="uint16") /* ty=Tensor[(12, 3, 14), uint16] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %335 = bitwise_xor(%333, %334) /* ty=Tensor[(12, 3, 14), uint16] */;
  (%335,)
}

def @func_10858() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(1000), float64], Tensor[(2, 3, 10), uint32]) {
  %336 = @func_1683() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %337 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %338 = cast(%337, dtype="uint32") /* ty=Tensor[(2, 3, 10), uint32] */;
  %339 = reshape(%338, newshape=[60]) /* ty=Tensor[(60), uint32] */;
  %340 = @func_10254(%339) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(60), uint32], Tensor[(12, 3, 14), float32]) */;
  %341 = @func_7723() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %342 = %336.0;
  %343 = %340.0;
  %344 = @func_3997() /* ty=Tensor[(1000), float64] */;
  %345 = %341.0;
  (%337, %342, %343, %344, %345)
}

def @func_3335(%var_3330: Tensor[(11, 4, 9), float32]) -> (Tensor[(11, 4, 9), float32],) {
  %346 = cast(%var_3330, dtype="float32") /* ty=Tensor[(11, 4, 9), float32] */;
  %347 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(11, 4, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 4, 9), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 9), float32] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %350 = power(%348, %349) /* ty=Tensor[(11, 4, 9), float32] */;
  (%350,)
}

def @func_12285() -> (Tensor[(12, 3, 14), uint16], Tensor[(15, 13, 5), float64]) {
  %351 = @func_3323() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %352 = %351.0;
  %353 = @func_8854() /* ty=Tensor[(15, 13, 5), float64] */;
  (%352, %353)
}

def @func_14318(%var_14298: Tensor[(1, 60), uint32]) -> (Tensor[(12, 3, 14), float32], Tensor[(468), float64], Tensor[(1, 60), uint32]) {
  %354 = cast(%var_14298, dtype="uint32") /* ty=Tensor[(1, 60), uint32] */;
  %355 = reshape(%354, newshape=[60]) /* ty=Tensor[(60), uint32] */;
  %356 = @func_12198(%355) /* ty=(Tensor[(12, 3, 14), uint16], float64, Tensor[(60), uint32], Tensor[(468), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), float32]) */;
  %357 = @func_4009() /* ty=Tensor[(12, 3, 14), float32] */;
  %358 = %356.3;
  (%357, %358, %var_14298)
}

def @func_8398(%var_8384: Tensor[(1000), float64], %var_8391: Tensor[(2, 3, 10), uint32]) -> (Tensor[(9, 13, 5), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64], Tensor[(2, 3, 10), int64]) {
  %359 = @func_3245() /* ty=(Tensor[(9, 13, 5), float32],) */;
  %360 = cast(%var_8384, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %361 = reshape(%360, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %362 = @func_7067(%361) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16]) */;
  %363 = @func_6978() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %364 = %363.0;
  %365 = cast(%var_8391, dtype="int64") /* ty=Tensor[(2, 3, 10), int64] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="int64") /* ty=Tensor[(2, 3, 10), int64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %369 = %359.0;
  %370 = %362.4;
  %371 = add(%367, %368) /* ty=Tensor[(2, 3, 10), int64] */;
  (%369, %370, %var_8384, %371)
}

def @func_11917(%var_11910: uint8) -> (Tensor[(12, 3, 14), uint16], uint8, uint8) {
  %372 = @func_9409() /* ty=(Tensor[(15, 13, 5), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %373 = cast(%var_11910, dtype="uint8") /* ty=uint8 */;
  %374 = reshape(%373, newshape=[]) /* ty=uint8 */;
  %375 = @func_8788(%374) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], uint8) */;
  %376 = %372.2;
  %377 = %375.4;
  (%376, %377, %var_11910)
}

def @func_3323() -> (Tensor[(12, 3, 14), uint16],) {
  %378 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %379 = %378.0;
  (%379,)
}

def @func_10899() -> (uint8, Tensor[(6, 16, 7), float64], Tensor[(168, 4), float64]) {
  %380 = @func_6300() /* ty=(uint8,) */;
  %381 = cast(meta[relay.Constant][16] /* ty=Tensor[(168, 4), float64] */, dtype="float64") /* ty=Tensor[(168, 4), float64] */;
  %382 = reshape(%381, newshape=[6, 16, 7]) /* ty=Tensor[(6, 16, 7), float64] */;
  %383 = %380.0;
  %384 = @func_7946(%382) /* ty=Tensor[(6, 16, 7), float64] */;
  (%383, %384, meta[relay.Constant][16] /* ty=Tensor[(168, 4), float64] */)
}

def @func_2032(%var_1992: Tensor[(468), float64], %var_2011: float64, %var_2012: Tensor[(60), bool]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), bool], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) {
  %385 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %386 = cast(%var_1992, dtype="float64") /* ty=Tensor[(468), float64] */;
  %387 = reshape(%386, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %388 = @func_1817(%387) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 13), float64], float64, Tensor[(468), float64], Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16]) */;
  %389 = cast(%var_2011, dtype="float64") /* ty=float64 */;
  %390 = cast(%var_1992, dtype="float64") /* ty=Tensor[(468), float64] */;
  %391 = cast(%var_2012, dtype="bool") /* ty=Tensor[(60), bool] */;
  %392 = reshape(%389, newshape=[]) /* ty=float64 */;
  %393 = reshape(%390, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float64] */;
  %394 = reshape(%391, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %395 = @func_1093(%392, %393, %394) /* ty=(Tensor[(12, 3, 13), float64], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(15, 4), bool], Tensor[(1000), float64]) */;
  %396 = %385.0;
  %397 = %388.0;
  %398 = %395.2;
  %399 = @func_1135() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%396, %397, %var_1992, %398, %var_2011, %var_2012, %399)
}

def @func_2469() -> (Tensor[(1000), float64],) {
  %400 = @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */;
  %401 = %400.2;
  (%401,)
}

def @func_13159(%var_13105: Tensor[(9, 13, 5), float32], %var_13125: float64) -> (Tensor[(9, 13, 5), float32], Tensor[(60), bool], float64, Tensor[(60), bool]) {
  %402 = @func_3245() /* ty=(Tensor[(9, 13, 5), float32],) */;
  %403 = %402.0;
  %404 = cast(%var_13105, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %408 = cast(%var_13125, dtype="float64") /* ty=float64 */;
  %409 = cast(meta[relay.Constant][17] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %410 = reshape(%408, newshape=[]) /* ty=float64 */;
  %411 = reshape(%409, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %412 = @func_2912(%410, %411) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) */;
  %413 = divide(%406, %407) /* ty=Tensor[(9, 13, 5), float32] */;
  %414 = %412.4;
  (%413, %414, %var_13125, meta[relay.Constant][17] /* ty=Tensor[(60), bool] */)
}

def @func_3467(%var_3425: Tensor[(396), float32]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float64], Tensor[(12, 3, 14), uint16]) {
  %415 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %416 = @func_2505() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %417 = cast(%var_3425, dtype="float32") /* ty=Tensor[(396), float32] */;
  %418 = reshape(%417, newshape=[11, 4, 9]) /* ty=Tensor[(11, 4, 9), float32] */;
  %419 = @func_3335(%418) /* ty=(Tensor[(11, 4, 9), float32],) */;
  %420 = %419.0;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(11, 4, 9), float32] */;
  %422 = tan(%421) /* ty=Tensor[(11, 4, 9), float32] */;
  %423 = cast(%var_3425, dtype="int64") /* ty=Tensor[(396), int64] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="int64") /* ty=Tensor[(11, 4, 9), int64] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %427 = logical_xor(%425, %426) /* ty=Tensor[(11, 4, 9), int64] */;
  %428 = cast(%427, dtype="float64") /* ty=Tensor[(11, 4, 9), float64] */;
  %429 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %430 = %415.0;
  %431 = %416.0;
  %432 = rsqrt(%428) /* ty=Tensor[(11, 4, 9), float64] */;
  %433 = %429.0;
  (%430, %431, %432, %433)
}

def @func_8514() -> Tensor[(12, 3, 14), uint16] {
  %434 = @func_6670() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(1000), bool]) */;
  %434.0
}

def @func_999() -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) {
  %435 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %436 = cast(meta[relay.Constant][18] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %437 = reshape(%436, newshape=[10, 10, 10]) /* ty=Tensor[(10, 10, 10), float64] */;
  %438 = @func_775(%437) /* ty=(Tensor[(10, 10, 10), float64], Tensor[(2, 3, 10), uint32], Tensor[(15, 4), bool]) */;
  %439 = cast(meta[relay.Constant][18] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %440 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
  %441 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %442 = %441.0;
  %443 = cast(%442, dtype="float64") /* ty=Tensor[(12, 3, 14), float64] */;
  %444 = %435.0;
  %445 = %438.1;
  %446 = exp(%439) /* ty=Tensor[(1000), float64] */;
  %447 = %440.0;
  %448 = asin(%443) /* ty=Tensor[(12, 3, 14), float64] */;
  (%444, %445, %446, %447, %448)
}

def @func_6424() -> Tensor[(12, 3, 14), float32] {
  @func_1422() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_12482() -> (Tensor[(60), bool],) {
  %449 = @func_10933() /* ty=Tensor[(60), bool] */;
  (%449,)
}

def @func_775(%var_757: Tensor[(10, 10, 10), float64]) -> (Tensor[(10, 10, 10), float64], Tensor[(2, 3, 10), uint32], Tensor[(15, 4), bool]) {
  %450 = cast(%var_757, dtype="float64") /* ty=Tensor[(10, 10, 10), float64] */;
  %451 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 4), bool] */, dtype="bool") /* ty=Tensor[(15, 4), bool] */;
  %452 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 4), bool] */, dtype="bool") /* ty=Tensor[(15, 4), bool] */;
  %453 = reshape(%451, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %454 = reshape(%452, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %455 = @func_237(%453, %454) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %456 = asinh(%450) /* ty=Tensor[(10, 10, 10), float64] */;
  %457 = %455.0;
  (%456, %457, meta[relay.Constant][19] /* ty=Tensor[(15, 4), bool] */)
}

def @func_3557() -> (Tensor[(1000), float64],) {
  %458 = @func_2469() /* ty=(Tensor[(1000), float64],) */;
  %459 = %458.0;
  (%459,)
}

def @func_3208() -> Tensor[(1000), float32] {
  %460 = @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */;
  %461 = %460.2;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(1000), float32] */;
  sin(%462) /* ty=Tensor[(1000), float32] */
}

def @func_3947() -> (Tensor[(7, 14, 15), float32], Tensor[(2, 3, 10), uint32], float64) {
  %463 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 14, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 15), float32] */;
  %464 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %465 = cast(%464, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %466 = reshape(%465, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %467 = @func_3726(%466) /* ty=(Tensor[(12, 3, 14), bool], Tensor[(12, 3, 14), float64], Tensor[(1000), float64], float64, float64, Tensor[(30, 2), bool]) */;
  %468 = acos(%463) /* ty=Tensor[(7, 14, 15), float32] */;
  %469 = %467.3;
  (%468, %464, %469)
}

def @func_5612(%var_5603: Tensor[(66, 6), float32]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float64], Tensor[(66, 6), float32]) {
  %470 = @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %471 = @func_3796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %472 = @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %473 = cast(%var_5603, dtype="float32") /* ty=Tensor[(66, 6), float32] */;
  %474 = reshape(%473, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %475 = @func_3467(%474) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float64], Tensor[(12, 3, 14), uint16]) */;
  %476 = %470.0;
  %477 = %471.0;
  %478 = @func_1422() /* ty=Tensor[(12, 3, 14), float32] */;
  %479 = %472.0;
  %480 = %475.2;
  (%476, %477, %478, %479, %480, %var_5603)
}

def @func_10139(%var_10107: Tensor[(4, 3, 9), float64]) -> (Tensor[(4, 3, 9), float64], Tensor[(12, 3, 14), uint16]) {
  %481 = cast(%var_10107, dtype="float64") /* ty=Tensor[(4, 3, 9), float64] */;
  %482 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %483 = cos(%481) /* ty=Tensor[(4, 3, 9), float64] */;
  %484 = %482.0;
  (%483, %484)
}

def @func_10483() -> (Tensor[(11, 10, 9), float64], Tensor[(2, 3, 10), bool], Tensor[(60), bool]) {
  %485 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 9), float64] */;
  %486 = cast(meta[relay.Constant][22] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %487 = cast(meta[relay.Constant][22] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %488 = reshape(%486, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %489 = reshape(%487, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %490 = @func_237(%488, %489) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %491 = log2(%485) /* ty=Tensor[(11, 10, 9), float64] */;
  %492 = %490.1;
  (%491, %492, meta[relay.Constant][22] /* ty=Tensor[(60), bool] */)
}

def @func_9026() -> Tensor[(12, 3, 14), uint16] {
  %493 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %493.1
}

def @func_2994(%var_2988: uint8) -> (Tensor[(12, 3, 14), uint16], Tensor[(3, 20), bool], uint8) {
  %494 = cast(%var_2988, dtype="uint8") /* ty=uint8 */;
  %495 = reshape(%494, newshape=[]) /* ty=uint8 */;
  %496 = @func_2583(%495) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], uint8, Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %497 = @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */;
  %498 = %496.4;
  (%497, %498, %var_2988)
}

def @func_4887() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %499 = @func_2882() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %500 = @func_1683() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %501 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %502 = %499.0;
  %503 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
  %504 = %500.0;
  %505 = %501.0;
  (%502, %503, %504, %505)
}

def @func_10254(%var_10201: Tensor[(60), uint32]) -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(60), uint32], Tensor[(12, 3, 14), float32]) {
  %506 = cast(%var_10201, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %507 = reshape(%506, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
  %508 = @func_4639(%507) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), float32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), float64], Tensor[(60), bool]) */;
  %509 = @func_5244() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %510 = @func_4009() /* ty=Tensor[(12, 3, 14), float32] */;
  %511 = @func_6424() /* ty=Tensor[(12, 3, 14), float32] */;
  %512 = %508.0;
  %513 = %509.0;
  (%510, %511, %512, %var_10201, %513)
}

def @func_15334() -> (Tensor[(2, 3, 10), uint32],) {
  %514 = @func_13414() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) */;
  %515 = %514.0;
  (%515,)
}

def @func_10680(%var_10612: Tensor[(2, 16, 14), uint32]) -> (Tensor[(2, 16, 14), bool], Tensor[(12, 3, 14), float32]) {
  %516 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 16, 14), uint32] */, dtype="uint32") /* ty=Tensor[(2, 16, 14), uint32] */;
  %517 = shape_of(%var_10612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%var_10612, dtype="uint32") /* ty=Tensor[(2, 16, 14), uint32] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %520 = maximum(%518, %519) /* ty=Tensor[(2, 16, 14), uint32] */;
  %521 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 16, 14), uint32] */, dtype="bool") /* ty=Tensor[(2, 16, 14), bool] */;
  %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%520, dtype="bool") /* ty=Tensor[(2, 16, 14), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %525 = greater(%523, %524) /* ty=Tensor[(2, 16, 14), bool] */;
  %526 = @func_4009() /* ty=Tensor[(12, 3, 14), float32] */;
  (%525, %526)
}

def @func_14987() -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), uint32]) {
  %527 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %528 = @func_5200() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %529 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %530 = %527.0;
  %531 = %528.0;
  %532 = %529.0;
  (%530, %531, %532)
}

def @func_8908() -> (Tensor[(12, 3, 14), uint16],) {
  %533 = @func_2383() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
  %534 = %533.0;
  (%534,)
}

def @func_11492() -> (Tensor[(1000), float32],) {
  %535 = @func_8579() /* ty=Tensor[(1000), float32] */;
  (%535,)
}

def @func_15074() -> Tensor[(12, 3, 14), uint16] {
  @func_12145() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_4279(%var_4213: float64, %var_4214: Tensor[(468), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(468), float64], Tensor[(12, 3, 14), uint16], Tensor[(1000), int32], Tensor[(2, 3, 10), uint64], uint8) {
  %536 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %537 = cast(%var_4213, dtype="float64") /* ty=float64 */;
  %538 = cast(%var_4214, dtype="float64") /* ty=Tensor[(468), float64] */;
  %539 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %540 = %539.7;
  %541 = cast(%540, dtype="bool") /* ty=Tensor[(60), bool] */;
  %542 = reshape(%537, newshape=[]) /* ty=float64 */;
  %543 = reshape(%538, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float64] */;
  %544 = reshape(%541, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %545 = @func_1093(%542, %543, %544) /* ty=(Tensor[(12, 3, 13), float64], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(15, 4), bool], Tensor[(1000), float64]) */;
  %546 = @func_3110() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %547 = @func_3997() /* ty=Tensor[(1000), float64] */;
  %548 = cast(%547, dtype="int32") /* ty=Tensor[(1000), int32] */;
  %549 = cast(%var_4213, dtype="int32") /* ty=int32 */;
  %550 = cast(%540, dtype="bool") /* ty=Tensor[(60), bool] */;
  %551 = cast(%540, dtype="bool") /* ty=Tensor[(60), bool] */;
  %552 = reshape(%550, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %553 = reshape(%551, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %554 = @func_237(%552, %553) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %555 = %554.1;
  %556 = cast(%540, dtype="uint64") /* ty=Tensor[(60), uint64] */;
  %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%555, dtype="uint64") /* ty=Tensor[(2, 3, 10), uint64] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %560 = cast(%var_4213, dtype="uint8") /* ty=uint8 */;
  %561 = reshape(%560, newshape=[]) /* ty=uint8 */;
  %562 = @func_2583(%561) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], uint8, Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %563 = %536.0;
  %564 = %545.1;
  %565 = %546.0;
  %566 = subtract(%548, %549) /* ty=Tensor[(1000), int32] */;
  %567 = maximum(%558, %559) /* ty=Tensor[(2, 3, 10), uint64] */;
  %568 = %562.3;
  (%563, %564, %var_4214, %565, %566, %567, %568)
}

def @func_14201() -> (Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), float32], Tensor[(364), uint16]) {
  %569 = @func_11328() /* ty=(Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16]) */;
  %570 = cast(meta[relay.Constant][25] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %571 = reshape(%570, newshape=[364]) /* ty=Tensor[(364), uint16] */;
  %572 = @func_13083(%571) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(26, 2), uint16], Tensor[(12, 3, 14), uint16], Tensor[(4, 13, 7), int8], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %573 = %569.0;
  %574 = %572.2;
  (%573, %574, meta[relay.Constant][25] /* ty=Tensor[(364), uint16] */)
}

def @func_7067(%var_7053: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16]) {
  %575 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %576 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %577 = cast(%var_7053, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %578 = reshape(%577, newshape=[10, 10, 10]) /* ty=Tensor[(10, 10, 10), float64] */;
  %579 = @func_775(%578) /* ty=(Tensor[(10, 10, 10), float64], Tensor[(2, 3, 10), uint32], Tensor[(15, 4), bool]) */;
  %580 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %581 = %575.0;
  %582 = %576.0;
  %583 = %579.2;
  %584 = %580.0;
  (%581, %582, %583, %var_7053, %584)
}

def @func_9437() -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 13, 5), float32], Tensor[(1000), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16]) {
  %585 = cast(meta[relay.Constant][26] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %586 = cast(meta[relay.Constant][27] /* ty=Tensor[(60), uint32] */, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %587 = reshape(%585, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %588 = reshape(%586, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
  %589 = @func_8398(%587, %588) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64], Tensor[(2, 3, 10), int64]) */;
  %590 = @func_4646() /* ty=Tensor[(12, 3, 14), uint16] */;
  %591 = %589.0;
  %592 = @func_8360() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%590, %591, meta[relay.Constant][26] /* ty=Tensor[(1000), float64] */, meta[relay.Constant][27] /* ty=Tensor[(60), uint32] */, %592)
}

def @func_2912(%var_2897: float64, %var_2898: Tensor[(60), bool]) -> (Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) {
  %593 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %594 = cast(meta[relay.Constant][28] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %595 = cast(%var_2897, dtype="float64") /* ty=float64 */;
  %596 = cast(%var_2898, dtype="bool") /* ty=Tensor[(60), bool] */;
  %597 = reshape(%594, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %598 = reshape(%595, newshape=[]) /* ty=float64 */;
  %599 = reshape(%596, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %600 = @func_2032(%597, %598, %599) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), bool], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) */;
  %601 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %602 = %593.0;
  %603 = %600.2;
  %604 = %601.0;
  (%602, %603, meta[relay.Constant][28] /* ty=Tensor[(468), float64] */, %var_2897, %var_2898, %604)
}

def @func_2505() -> (Tensor[(12, 3, 14), uint16],) {
  %605 = @func_2480() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %606 = %605.0;
  (%606,)
}

def @func_9735() -> Tensor[(12, 3, 14), uint16] {
  %607 = @func_3504() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %607.1
}

def @func_3019() -> Tensor[(12, 3, 14), uint16] {
  @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_7020(%var_7009: float64, %var_7010: Tensor[(16, 13, 8), float64]) -> Tensor[(16, 13, 8), bool] {
  %608 = cast(%var_7009, dtype="bool") /* ty=bool */;
  %609 = cast(%var_7010, dtype="bool") /* ty=Tensor[(16, 13, 8), bool] */;
  equal(%608, %609) /* ty=Tensor[(16, 13, 8), bool] */
}

def @func_6157() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %610 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %611 = @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */;
  %612 = %610.0;
  (%611, %612)
}

def @func_3997() -> Tensor[(1000), float64] {
  %613 = @func_3557() /* ty=(Tensor[(1000), float64],) */;
  %614 = %613.0;
  %615 = cast(meta[relay.Constant][29] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(1), int32] */;
  %617 = cast(%614, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?), float64] */;
  mod(%617, %618) /* ty=Tensor[(1000), float64] */
}

def @func_14172() -> (Tensor[(12, 3, 14), uint16], Tensor[(10, 10, 10), bool], Tensor[(1000), float64]) {
  %619 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %620 = cast(meta[relay.Constant][30] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %621 = reshape(%620, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %622 = @func_7223(%621) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(1000), float32]) */;
  %623 = %619.0;
  %624 = %622.2;
  (%623, %624, meta[relay.Constant][30] /* ty=Tensor[(1000), float64] */)
}

def @func_6300() -> (uint8,) {
  %625 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %626 = %625.2;
  (%626,)
}

def @func_1852(%var_1830: Tensor[(20, 50), float64], %var_1837: Tensor[(10, 10, 10), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(20, 50), float64], Tensor[(10, 10, 10), bool], Tensor[(12, 3, 14), uint16]) {
  %627 = @func_1377() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %628 = cast(%var_1830, dtype="float64") /* ty=Tensor[(20, 50), float64] */;
  %629 = reshape(%628, newshape=[10, 10, 10]) /* ty=Tensor[(10, 10, 10), float64] */;
  %630 = @func_775(%629) /* ty=(Tensor[(10, 10, 10), float64], Tensor[(2, 3, 10), uint32], Tensor[(15, 4), bool]) */;
  %631 = %630.0;
  %632 = cast(%var_1837, dtype="bool") /* ty=Tensor[(10, 10, 10), bool] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="bool") /* ty=Tensor[(10, 10, 10), bool] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %636 = @func_1377() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %637 = %627.0;
  %638 = @func_1653() /* ty=Tensor[(12, 3, 14), uint16] */;
  %639 = not_equal(%634, %635) /* ty=Tensor[(10, 10, 10), bool] */;
  %640 = %636.0;
  (%637, %638, %var_1830, %639, %640)
}

def @func_4490(%var_4440: Tensor[(2, 3, 10), uint32], %var_4447: float64, %var_4448: Tensor[(468), float64]) -> (Tensor[(2, 3, 10), bool], float64, Tensor[(468), float64], Tensor[(1000), float64]) {
  %641 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %642 = %641.0;
  %643 = cast(%var_4440, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%642, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %647 = cast(%var_4447, dtype="float64") /* ty=float64 */;
  %648 = cast(%var_4448, dtype="float64") /* ty=Tensor[(468), float64] */;
  %649 = less(%645, %646) /* ty=Tensor[(2, 3, 10), bool] */;
  %650 = cast(%649, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %651 = reshape(%647, newshape=[]) /* ty=float64 */;
  %652 = reshape(%648, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float64] */;
  %653 = reshape(%650, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %654 = @func_1093(%651, %652, %653) /* ty=(Tensor[(12, 3, 13), float64], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(15, 4), bool], Tensor[(1000), float64]) */;
  %655 = %654.4;
  %656 = cast(%655, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %657 = atan(%656) /* ty=Tensor[(1000), float64] */;
  (%649, %var_4447, %var_4448, %657)
}

def @func_5171() -> (Tensor[(12, 3, 14), uint16],) {
  %658 = @func_4887() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %659 = %658.2;
  (%659,)
}

def @func_14023(%var_13962: Tensor[(11, 6, 4), float32], %var_13973: Tensor[(108), float64], %var_13983: Tensor[(2, 104), float32], %var_13991: Tensor[(2, 104), float32]) -> (Tensor[(11, 6, 4), float32], Tensor[(12, 3, 14), uint16], Tensor[(108), float64], Tensor[(12, 3, 14), uint16], Tensor[(2, 104), int16]) {
  %660 = cast(%var_13962, dtype="float32") /* ty=Tensor[(11, 6, 4), float32] */;
  %661 = cast(%var_13973, dtype="float64") /* ty=Tensor[(108), float64] */;
  %662 = reshape(%661, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %663 = @func_10139(%662) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(12, 3, 14), uint16]) */;
  %664 = cast(%var_13983, dtype="float32") /* ty=Tensor[(2, 104), float32] */;
  %665 = cast(%var_13983, dtype="float32") /* ty=Tensor[(2, 104), float32] */;
  %666 = reshape(%664, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %667 = reshape(%665, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %668 = @func_12925(%666, %667) /* ty=(Tensor[(60), bool], Tensor[(12, 3, 14), uint16], Tensor[(?, 13, 16), int64]) */;
  %669 = cast(%var_13991, dtype="int16") /* ty=Tensor[(2, 104), int16] */;
  %670 = shape_of(%var_13983, dtype="int32") /* ty=Tensor[(2), int32] */;
  %671 = cast(%var_13983, dtype="int16") /* ty=Tensor[(2, 104), int16] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %673 = sigmoid(%660) /* ty=Tensor[(11, 6, 4), float32] */;
  %674 = %663.1;
  %675 = %668.1;
  %676 = add(%671, %672) /* ty=Tensor[(2, 104), int16] */;
  (%673, %674, %var_13973, %675, %676)
}

def @func_8204() -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), float32]) {
  %677 = @func_1528() /* ty=Tensor[(12, 3, 14), float32] */;
  %678 = @func_4009() /* ty=Tensor[(12, 3, 14), float32] */;
  (%677, %678)
}

def @func_8148() -> (Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) {
  %679 = @func_6670() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(1000), bool]) */;
  %680 = @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %681 = @func_6489() /* ty=Tensor[(12, 3, 14), uint16] */;
  %682 = %679.1;
  %683 = %680.0;
  (%681, %682, %683)
}

def @func_12094(%var_12086: Tensor[(14), uint64]) -> (Tensor[(12, 3, 14), float32], Tensor[(14, ?, ?), uint64], uint64, Tensor[(14), uint64]) {
  %684 = @func_9293() /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
  %685 = cast(meta[relay.Constant][31] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %686 = cast(%var_12086, dtype="uint64") /* ty=Tensor[(14), uint64] */;
  %687 = reshape(%685, newshape=[]) /* ty=uint64 */;
  %688 = reshape(%686, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), uint64] */;
  %689 = %684.0;
  %690 = @func_7432(%687, %688) /* ty=Tensor[(14, ?, ?), uint64] */;
  (%689, %690, meta[relay.Constant][31] /* ty=uint64 */, %var_12086)
}

def @func_15153() -> Tensor[(9, 2, 3), bool] {
  %691 = @func_3601() /* ty=(Tensor[(9, 2, 3), bool],) */;
  %691.0
}

def @func_13171() -> Tensor[(12, 3, 14), uint16] {
  @func_9026() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_9690() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %692 = @func_6978() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %693 = cast(meta[relay.Constant][32] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %694 = reshape(%693, newshape=[]) /* ty=uint8 */;
  %695 = @func_9165(%694) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16]) */;
  %696 = @func_8148() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) */;
  %697 = %692.0;
  %698 = %695.0;
  %699 = %696.2;
  %700 = @func_3019() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%697, %698, meta[relay.Constant][32] /* ty=uint8 */, %699, %700)
}

def @func_9165(%var_9155: uint8) -> (Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16]) {
  %701 = @func_5679() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %702 = cast(%var_9155, dtype="uint8") /* ty=uint8 */;
  %703 = reshape(%702, newshape=[]) /* ty=uint8 */;
  %704 = @func_434(%703) /* ty=(Tensor[(9, 2, 3), bool],) */;
  %705 = %701.0;
  %706 = %704.0;
  %707 = @func_7115() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%705, %706, %var_9155, %707)
}

def @func_7540(%var_7536: Tensor[(9, 2, 7), float32]) -> (Tensor[(9, 2, 7), float32],) {
  %708 = cast(%var_7536, dtype="float32") /* ty=Tensor[(9, 2, 7), float32] */;
  %709 = sinh(%708) /* ty=Tensor[(9, 2, 7), float32] */;
  (%709,)
}

def @func_1377() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %710 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %711 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %712 = %710.0;
  %713 = %711.0;
  (%712, %713)
}

def @func_8854() -> Tensor[(15, 13, 5), float64] {
  @func_6934() /* ty=Tensor[(15, 13, 5), float64] */
}

def @func_3150() -> (Tensor[(2, 3, 10), uint32],) {
  %714 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %715 = %714.6;
  (%715,)
}

def @func_4784(%var_4751: Tensor[(1000), float64]) -> (Tensor[(2, 3, 10), uint32], Tensor[(1000), bool], Tensor[(1000), float64]) {
  %716 = @func_2469() /* ty=(Tensor[(1000), float64],) */;
  %717 = %716.0;
  %718 = cast(%var_4751, dtype="bool") /* ty=Tensor[(1000), bool] */;
  %719 = shape_of(%717, dtype="int32") /* ty=Tensor[(1), int32] */;
  %720 = cast(%717, dtype="bool") /* ty=Tensor[(1000), bool] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?), bool] */;
  %722 = cast(%var_4751, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %723 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %724 = less(%720, %721) /* ty=Tensor[(1000), bool] */;
  %725 = log2(%722) /* ty=Tensor[(1000), float64] */;
  (%723, %724, %725)
}

def @func_3181(%var_3175: Tensor[(468), float64], %var_3177: Tensor[(60), bool]) -> (Tensor[(12, 3, 14), uint16], Tensor[(60), bool], Tensor[(468), float64], float64, Tensor[(60), bool]) {
  %726 = cast(%var_3175, dtype="float64") /* ty=Tensor[(468), float64] */;
  %727 = cast(5.57228f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %728 = cast(%var_3177, dtype="bool") /* ty=Tensor[(60), bool] */;
  %729 = reshape(%726, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %730 = reshape(%727, newshape=[]) /* ty=float64 */;
  %731 = reshape(%728, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %732 = @func_2032(%729, %730, %731) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), bool], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) */;
  %733 = @func_3019() /* ty=Tensor[(12, 3, 14), uint16] */;
  %734 = %732.5;
  (%733, %734, %var_3175, 5.57228f64 /* ty=float64 */, %var_3177)
}

def @func_7115() -> Tensor[(12, 3, 14), uint16] {
  @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_3920() -> (Tensor[(12, 3, 14), float32],) {
  %735 = @func_3796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %736 = %735.0;
  %737 = cast(%736, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %738 = sin(%737) /* ty=Tensor[(12, 3, 14), float32] */;
  (%738,)
}

def @func_11588() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(567), int16]) {
  %739 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %740 = @func_2480() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %741 = cast(meta[relay.Constant][33] /* ty=Tensor[(567), int16] */, dtype="int16") /* ty=Tensor[(567), int16] */;
  %742 = cast(meta[relay.Constant][33] /* ty=Tensor[(567), int16] */, dtype="int16") /* ty=Tensor[(567), int16] */;
  %743 = reshape(%741, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int16] */;
  %744 = reshape(%742, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int16] */;
  %745 = @func_5906(%743, %744) /* ty=(Tensor[(7, 9, 9), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %746 = %739.1;
  %747 = %740.0;
  %748 = %745.2;
  (%746, %747, %748, meta[relay.Constant][33] /* ty=Tensor[(567), int16] */)
}

def @func_1580() -> (Tensor[(12, 3, 14), uint16],) {
  %749 = @func_1528() /* ty=Tensor[(12, 3, 14), float32] */;
  %750 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 3, 14), float32] */, dtype="uint16") /* ty=Tensor[(12, 3, 14), uint16] */;
  %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%749, dtype="uint16") /* ty=Tensor[(12, 3, 14), uint16] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %754 = bitwise_or(%752, %753) /* ty=Tensor[(12, 3, 14), uint16] */;
  (%754,)
}

def @func_4639(%var_4600: Tensor[(2, 3, 10), uint32]) -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), float32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), float64], Tensor[(60), bool]) {
  %755 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %756 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %757 = cast(%var_4600, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %761 = @func_3796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %762 = cast(%var_4600, dtype="float64") /* ty=Tensor[(2, 3, 10), float64] */;
  %763 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %764 = %755.0;
  %765 = power(%759, %760) /* ty=Tensor[(2, 3, 10), float32] */;
  %766 = %761.0;
  %767 = sinh(%762) /* ty=Tensor[(2, 3, 10), float64] */;
  %768 = %763.7;
  (%764, %765, %766, %767, %768)
}

def @func_1093(%var_1064: float64, %var_1065: Tensor[(12, 3, 13), float64], %var_1070: Tensor[(60), bool]) -> (Tensor[(12, 3, 13), float64], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(15, 4), bool], Tensor[(1000), float64]) {
  %769 = cast(%var_1064, dtype="float64") /* ty=float64 */;
  %770 = cast(%var_1065, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %771 = cast(%var_1070, dtype="bool") /* ty=Tensor[(60), bool] */;
  %772 = cast(%var_1070, dtype="bool") /* ty=Tensor[(60), bool] */;
  %773 = reshape(%771, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %774 = reshape(%772, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %775 = @func_237(%773, %774) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %776 = cast(meta[relay.Constant][35] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %777 = reshape(%776, newshape=[10, 10, 10]) /* ty=Tensor[(10, 10, 10), float64] */;
  %778 = @func_775(%777) /* ty=(Tensor[(10, 10, 10), float64], Tensor[(2, 3, 10), uint32], Tensor[(15, 4), bool]) */;
  %779 = divide(%769, %770) /* ty=Tensor[(12, 3, 13), float64] */;
  %780 = %775.0;
  %781 = %778.2;
  (%779, %780, %var_1070, %781, meta[relay.Constant][35] /* ty=Tensor[(1000), float64] */)
}

def @func_14740() -> (Tensor[(2, 3, 10), uint32],) {
  %782 = @func_6978() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %783 = %782.0;
  (%783,)
}

def @func_2583(%var_2532: uint8) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], uint8, Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %784 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %785 = cast(%var_2532, dtype="uint8") /* ty=uint8 */;
  %786 = reshape(%785, newshape=[]) /* ty=uint8 */;
  %787 = @func_2245(%786) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], Tensor[(9, 2, 3), bool], uint8) */;
  %788 = %787.3;
  %789 = cast(%788, dtype="float64") /* ty=Tensor[(468), float64] */;
  %790 = reshape(%789, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %791 = @func_1817(%790) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 13), float64], float64, Tensor[(468), float64], Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16]) */;
  %792 = @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */;
  %793 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
  %794 = %784.0;
  %795 = @func_1135() /* ty=Tensor[(12, 3, 14), uint16] */;
  %796 = %791.4;
  %797 = %792.0;
  %798 = %793.0;
  (%794, %795, %788, %var_2532, %796, %797, %798)
}

def @func_3601() -> (Tensor[(9, 2, 3), bool],) {
  %799 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %800 = %799.8;
  (%800,)
}

def @func_10437() -> (Tensor[(12, 3, 14), float32],) {
  %801 = @func_5810() /* ty=Tensor[(12, 3, 14), float32] */;
  (%801,)
}

def @func_9293() -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) {
  %802 = @func_6914() /* ty=Tensor[(12, 3, 14), float32] */;
  %803 = @func_9026() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%802, %803)
}

def @func_15456() -> (Tensor[(12, 3, 14), float32],) {
  %804 = @func_3959() /* ty=Tensor[(12, 3, 14), float32] */;
  (%804,)
}

def @func_9875() -> Tensor[(2, 3, 10), bool] {
  %805 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %806 = cast(%805, dtype="float64") /* ty=Tensor[(2, 3, 10), float64] */;
  %807 = atan(%806) /* ty=Tensor[(2, 3, 10), float64] */;
  %808 = cast(%805, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%807, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%810, %811) /* ty=Tensor[(2, 3, 10), bool] */
}

def @func_12198(%var_12174: Tensor[(60), uint32]) -> (Tensor[(12, 3, 14), uint16], float64, Tensor[(60), uint32], Tensor[(468), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), float32]) {
  %812 = @func_11037() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %813 = cast(%var_12174, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %814 = cast(meta[relay.Constant][36] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %815 = reshape(%813, newshape=[60]) /* ty=Tensor[(60), uint32] */;
  %816 = reshape(%814, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %817 = @func_8449(%815, %816) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), uint32], float64, Tensor[(234, 2), float32]) */;
  %818 = @func_9437() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 13, 5), float32], Tensor[(1000), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16]) */;
  %819 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %820 = %812.0;
  %821 = %817.3;
  %822 = %818.3;
  %823 = %819.4;
  (%820, %821, %var_12174, meta[relay.Constant][36] /* ty=Tensor[(468), float64] */, %822, %823)
}

def @func_4959() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %824 = @func_4887() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %825 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %826 = %824.2;
  %827 = %825.0;
  (%826, %827)
}

def @func_12145() -> Tensor[(12, 3, 14), uint16] {
  %828 = @func_11037() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %828.0
}

def @func_6978() -> (Tensor[(2, 3, 10), uint32],) {
  %829 = @func_6879() /* ty=Tensor[(2, 3, 10), uint32] */;
  (%829,)
}

def @func_10383(%var_10342: uint8, %var_10343: Tensor[(2, 1, 11), uint8]) -> (Tensor[(2, ?, 11), uint16], Tensor[(2, 3, 10), uint32]) {
  %830 = cast(%var_10342, dtype="uint8") /* ty=uint8 */;
  %831 = cast(%var_10343, dtype="uint8") /* ty=Tensor[(2, 1, 11), uint8] */;
  %832 = logical_xor(%830, %831) /* ty=Tensor[(2, 1, 11), uint8] */;
  %833 = cast(%832, dtype="uint8") /* ty=Tensor[(2, 1, 11), uint8] */;
  %834 = cast(%var_10342, dtype="uint8") /* ty=uint8 */;
  %835 = multiply(%833, %834) /* ty=Tensor[(2, 1, 11), uint8] */;
  %836 = cast(%832, dtype="uint16") /* ty=Tensor[(2, 1, 11), uint16] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%835, dtype="uint16") /* ty=Tensor[(2, 1, 11), uint16] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %840 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %841 = right_shift(%838, %839) /* ty=Tensor[(2, ?, 11), uint16] */;
  %842 = %840.6;
  (%841, %842)
}

def @func_8247(%var_8240: Tensor[(2, 3, 10), uint32]) -> (Tensor[(2, 3, 10), int8],) {
  %843 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %844 = cast(%var_8240, dtype="int8") /* ty=Tensor[(2, 3, 10), int8] */;
  %845 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%843, dtype="int8") /* ty=Tensor[(2, 3, 10), int8] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %848 = bitwise_xor(%846, %847) /* ty=Tensor[(2, 3, 10), int8] */;
  (%848,)
}

def @func_10408() -> Tensor[(12, 3, 14), uint16] {
  @func_9026() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_10712() -> (Tensor[(12, 3, 14), uint16],) {
  %849 = @func_8360() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%849,)
}

def @func_12925(%var_12891: Tensor[(1, 13, 16), float32], %var_12916: Tensor[(1, 13, 16), float32]) -> (Tensor[(60), bool], Tensor[(12, 3, 14), uint16], Tensor[(?, 13, 16), int64]) {
  %850 = @func_12482() /* ty=(Tensor[(60), bool],) */;
  %851 = cast(%var_12891, dtype="float32") /* ty=Tensor[(1, 13, 16), float32] */;
  %852 = atanh(%851) /* ty=Tensor[(1, 13, 16), float32] */;
  %853 = cast(%var_12916, dtype="int64") /* ty=Tensor[(1, 13, 16), int64] */;
  %854 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%852, dtype="int64") /* ty=Tensor[(1, 13, 16), int64] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %857 = %850.0;
  %858 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
  %859 = logical_xor(%855, %856) /* ty=Tensor[(?, 13, 16), int64] */;
  (%857, %858, %859)
}

def @func_13713() -> Tensor[(2, 3, 10), uint32] {
  %860 = @func_13414() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) */;
  %860.0
}

def @func_3959() -> Tensor[(12, 3, 14), float32] {
  %861 = @func_2383() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
  %861.4
}

def @func_2172(%var_2141: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) {
  %862 = cast(meta[relay.Constant][37] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %863 = reshape(%862, newshape=[]) /* ty=uint8 */;
  %864 = @func_721(%863) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) */;
  %865 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %866 = %865.0;
  %867 = cast(meta[relay.Constant][37] /* ty=uint8 */, dtype="float64") /* ty=float64 */;
  %868 = cast(%866, dtype="float64") /* ty=Tensor[(12, 3, 14), float64] */;
  %869 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %870 = cast(%var_2141, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %871 = cast(%var_2141, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %872 = reshape(%870, newshape=[20, 50]) /* ty=Tensor[(20, 50), float64] */;
  %873 = reshape(%871, newshape=[10, 10, 10]) /* ty=Tensor[(10, 10, 10), float64] */;
  %874 = @func_1852(%872, %873) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(20, 50), float64], Tensor[(10, 10, 10), bool], Tensor[(12, 3, 14), uint16]) */;
  %875 = cast(%var_2141, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %876 = %864.0;
  %877 = power(%867, %868) /* ty=Tensor[(12, 3, 14), float64] */;
  %878 = %869.1;
  %879 = %874.0;
  %880 = rsqrt(%875) /* ty=Tensor[(1000), float64] */;
  (%876, %877, %878, %879, %880)
}

def @func_10798() -> Tensor[(12, 3, 14), uint16] {
  @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_6934() -> Tensor[(15, 13, 5), float64] {
  %881 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(15, 13, 5), float64] */;
  erf(%881) /* ty=Tensor[(15, 13, 5), float64] */
}

def @func_14361() -> (Tensor[(12, 3, 14), uint16],) {
  %882 = @func_13467() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%882,)
}

def @func_1422() -> Tensor[(12, 3, 14), float32] {
  %883 = @func_1377() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %884 = %883.1;
  %885 = cast(%884, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  log10(%885) /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_5981() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %886 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
  %887 = @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%886, %887)
}

def @func_1817(%var_1810: Tensor[(468), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 13), float64], float64, Tensor[(468), float64], Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16]) {
  %888 = @func_1683() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %889 = cast(9.45128f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %890 = cast(%var_1810, dtype="float64") /* ty=Tensor[(468), float64] */;
  %891 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 20), bool] */, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %892 = reshape(%889, newshape=[]) /* ty=float64 */;
  %893 = reshape(%890, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float64] */;
  %894 = reshape(%891, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %895 = @func_1093(%892, %893, %894) /* ty=(Tensor[(12, 3, 13), float64], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(15, 4), bool], Tensor[(1000), float64]) */;
  %896 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %897 = %888.0;
  %898 = %895.0;
  %899 = %896.0;
  (%897, %898, 9.45128f64 /* ty=float64 */, %var_1810, meta[relay.Constant][39] /* ty=Tensor[(3, 20), bool] */, %899)
}

def @func_9237() -> Tensor[(12, 3, 14), uint16] {
  @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_11043() -> Tensor[(12, 3, 14), float32] {
  @func_5810() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_6670() -> (Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(1000), bool]) {
  %900 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %901 = cast(-6.62728f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %902 = reshape(%901, newshape=[]) /* ty=float64 */;
  %903 = @func_5265(%902) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint64], float64, Tensor[(78, 6), float64]) */;
  %904 = @func_2469() /* ty=(Tensor[(1000), float64],) */;
  %905 = %904.0;
  %906 = cast(%905, dtype="bool") /* ty=Tensor[(1000), bool] */;
  %907 = cast(-6.62728f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %908 = %900.0;
  %909 = %903.3;
  %910 = equal(%906, %907) /* ty=Tensor[(1000), bool] */;
  (%908, %909, %910)
}

def @func_9092() -> (Tensor[(12, 3, 14), uint16], Tensor[(30, 2), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %911 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 60), bool] */, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
  %912 = reshape(%911, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %913 = @func_3726(%912) /* ty=(Tensor[(12, 3, 14), bool], Tensor[(12, 3, 14), float64], Tensor[(1000), float64], float64, float64, Tensor[(30, 2), bool]) */;
  %914 = %913.5;
  %915 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 60), bool] */, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
  %916 = shape_of(%914, dtype="int32") /* ty=Tensor[(2), int32] */;
  %917 = cast(%914, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %919 = @func_5522() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %920 = @func_7115() /* ty=Tensor[(12, 3, 14), uint16] */;
  %921 = logical_and(%917, %918) /* ty=Tensor[(30, 2), bool] */;
  %922 = @func_9026() /* ty=Tensor[(12, 3, 14), uint16] */;
  %923 = %919.2;
  (%920, %921, %922, %923)
}

def @func_8788(%var_8776: uint8) -> (Tensor[(12, 3, 14), float32], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], uint8) {
  %924 = @func_3920() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %925 = cast(meta[relay.Constant][41] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %926 = reshape(%925, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %927 = @func_7223(%926) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(1000), float32]) */;
  %928 = cast(%var_8776, dtype="uint8") /* ty=uint8 */;
  %929 = reshape(%928, newshape=[]) /* ty=uint8 */;
  %930 = @func_721(%929) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) */;
  %931 = %924.0;
  %932 = %927.2;
  %933 = %930.0;
  (%931, %932, meta[relay.Constant][41] /* ty=Tensor[(1000), float64] */, %933, %var_8776)
}

def @func_9817() -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32]) {
  %934 = @func_9437() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 13, 5), float32], Tensor[(1000), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16]) */;
  %935 = @func_5200() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %936 = %934.0;
  %937 = %935.0;
  (%936, %937)
}

def @func_14941() -> Tensor[(12, 3, 14), uint16] {
  %938 = @func_12213() /* ty=(Tensor[(2, 1, 6), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) */;
  %938.1
}

def @func_7723() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %939 = @func_5981() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %940 = @func_5981() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %941 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %942 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %943 = %939.0;
  %944 = %940.1;
  %945 = %941.0;
  (%942, %943, %944, %945)
}

def @func_12805(%var_12771: int32, %var_12772: Tensor[(2, 8, 1), int32], %var_12785: Tensor[(2464), float64]) -> (Tensor[(2, 8, 1), int32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 16, 14), float64], Tensor[(2464), float64]) {
  %946 = cast(%var_12771, dtype="int32") /* ty=int32 */;
  %947 = cast(%var_12772, dtype="int32") /* ty=Tensor[(2, 8, 1), int32] */;
  %948 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
  %949 = cast(%var_12785, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %950 = reshape(%949, newshape=[11, 16, 14]) /* ty=Tensor[(11, 16, 14), float64] */;
  %951 = @func_10743(%950) /* ty=(Tensor[(11, 16, 14), float64],) */;
  %952 = left_shift(%946, %947) /* ty=Tensor[(2, 8, 1), int32] */;
  %953 = @func_9237() /* ty=Tensor[(12, 3, 14), uint16] */;
  %954 = %948.3;
  %955 = %951.0;
  (%952, %953, %954, %955, %var_12785)
}

def @func_15216() -> (Tensor[(2, 3, 10), uint32],) {
  %956 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %957 = %956.6;
  (%957,)
}

def @func_11775() -> Tensor[(12, 3, 14), uint16] {
  @func_10408() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_796() -> (Tensor[(12, 3, 14), uint16],) {
  %958 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %959 = %958.0;
  (%959,)
}

def @func_14126(%var_14114: Tensor[(1000), float64]) -> (Tensor[(1000), float32], uint8) {
  %960 = @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */;
  %961 = %960.2;
  %962 = cast(%var_14114, dtype="float32") /* ty=Tensor[(1000), float32] */;
  %963 = shape_of(%961, dtype="int32") /* ty=Tensor[(1), int32] */;
  %964 = cast(%961, dtype="float32") /* ty=Tensor[(1000), float32] */;
  %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?), float32] */;
  %966 = @func_9690() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %967 = floor_divide(%964, %965) /* ty=Tensor[(1000), float32] */;
  %968 = %966.2;
  (%967, %968)
}

def @func_6017() -> Tensor[(12, 3, 14), uint16] {
  %969 = @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %969.0
}

def @main(%var_15461: float64, %var_15462: Tensor[(15, 1, 8), float64]) -> (Tensor[(15, 1, 8), float64], Tensor[(15, 1, 8), float32]) {
  %970 = cast(%var_15461, dtype="float64") /* ty=float64 */;
  %971 = cast(%var_15462, dtype="float64") /* ty=Tensor[(15, 1, 8), float64] */;
  %972 = cast(%var_15462, dtype="float32") /* ty=Tensor[(15, 1, 8), float32] */;
  %973 = divide(%970, %971) /* ty=Tensor[(15, 1, 8), float64] */;
  %974 = log(%972) /* ty=Tensor[(15, 1, 8), float32] */;
  (%973, %974)
}

def @func_10743(%var_10735: Tensor[(11, 16, 14), float64]) -> (Tensor[(11, 16, 14), float64],) {
  %975 = cast(%var_10735, dtype="float64") /* ty=Tensor[(11, 16, 14), float64] */;
  %976 = sin(%975) /* ty=Tensor[(11, 16, 14), float64] */;
  (%976,)
}

def @func_14655(%var_14653: float64) -> (Tensor[(1000), float32], Tensor[(12, 3, 14), uint16], float64) {
  %977 = cast(%var_14653, dtype="float64") /* ty=float64 */;
  %978 = reshape(%977, newshape=[]) /* ty=float64 */;
  %979 = @func_14075(%978) /* ty=(Tensor[(12, 3, 14), uint16], float64, float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(2, 16, 14), bool], Tensor[(448), uint32]) */;
  %980 = @func_3208() /* ty=Tensor[(1000), float32] */;
  %981 = %979.4;
  (%980, %981, %var_14653)
}

def @func_3399(%var_3396: float64, %var_3397: Tensor[(60), bool]) -> (Tensor[(12, 3, 14), float32], Tensor[(468), float64], float64, Tensor[(60), bool]) {
  %982 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %983 = %982.0;
  %984 = cast(%983, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %985 = cast(%var_3396, dtype="float64") /* ty=float64 */;
  %986 = cast(%var_3397, dtype="bool") /* ty=Tensor[(60), bool] */;
  %987 = reshape(%985, newshape=[]) /* ty=float64 */;
  %988 = reshape(%986, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %989 = @func_2912(%987, %988) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) */;
  %990 = sinh(%984) /* ty=Tensor[(12, 3, 14), float32] */;
  %991 = %989.2;
  (%990, %991, %var_3396, %var_3397)
}

def @func_9556(%var_9547: Tensor[(60), uint32]) -> (Tensor[(1000), float32], Tensor[(2, 3, 10), float32], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16]) {
  %992 = @func_5648() /* ty=(Tensor[(1000), float32],) */;
  %993 = cast(%var_9547, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %994 = reshape(%993, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
  %995 = @func_6181(%994) /* ty=(Tensor[(2, 3, 10), float64], Tensor[(2, 3, 10), float32]) */;
  %996 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
  %997 = %992.0;
  %998 = %995.1;
  %999 = %996.0;
  (%997, %998, %var_9547, %999)
}

def @func_7155() -> Tensor[(12, 3, 14), uint16] {
  %1000 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1000.1
}

def @func_13836(%var_13832: float64) -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 16, 14), float64], Tensor[(2464), float64], Tensor[(12, 3, 14), float32], Tensor[(10, 8, 4), float32], float64, float64) {
  %1001 = @func_10858() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(1000), float64], Tensor[(2, 3, 10), uint32]) */;
  %1002 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1003 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1004 = cast(meta[relay.Constant][42] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %1005 = reshape(%1004, newshape=[11, 16, 14]) /* ty=Tensor[(11, 16, 14), float64] */;
  %1006 = @func_10743(%1005) /* ty=(Tensor[(11, 16, 14), float64],) */;
  %1007 = @func_8204() /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), float32]) */;
  %1008 = @func_11328() /* ty=(Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16]) */;
  %1009 = cast(%var_13832, dtype="float64") /* ty=float64 */;
  %1010 = reshape(%1009, newshape=[]) /* ty=float64 */;
  %1011 = @func_5265(%1010) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint64], float64, Tensor[(78, 6), float64]) */;
  %1012 = %1001.2;
  %1013 = %1002.0;
  %1014 = %1003.0;
  %1015 = %1006.0;
  %1016 = %1007.0;
  %1017 = %1008.0;
  %1018 = %1011.2;
  (%1012, %1013, %1014, %1015, meta[relay.Constant][42] /* ty=Tensor[(2464), float64] */, %1016, %1017, %1018, %var_13832)
}

def @func_10163(%var_10158: Tensor[(4, 9, 9), float32]) -> (Tensor[(4, 9, 9), float32],) {
  %1019 = cast(%var_10158, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
  %1020 = sinh(%1019) /* ty=Tensor[(4, 9, 9), float32] */;
  (%1020,)
}

def @func_10329() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float32], Tensor[(396), float32]) {
  %1021 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1022 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1023 = cast(meta[relay.Constant][43] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %1024 = reshape(%1023, newshape=[11, 4, 9]) /* ty=Tensor[(11, 4, 9), float32] */;
  %1025 = @func_3335(%1024) /* ty=(Tensor[(11, 4, 9), float32],) */;
  %1026 = %1021.0;
  %1027 = %1022.0;
  %1028 = @func_6017() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1029 = %1025.0;
  (%1026, %1027, %1028, %1029, meta[relay.Constant][43] /* ty=Tensor[(396), float32] */)
}

def @func_805() -> (Tensor[(12, 3, 14), uint16],) {
  %1030 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1031 = %1030.0;
  (%1031,)
}

def @func_11988() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), uint32], Tensor[(468), float64]) {
  %1032 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
  %1033 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 4), uint32] */, dtype="uint32") /* ty=Tensor[(15, 4), uint32] */;
  %1034 = cast(meta[relay.Constant][45] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1035 = reshape(%1033, newshape=[60]) /* ty=Tensor[(60), uint32] */;
  %1036 = reshape(%1034, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %1037 = @func_8449(%1035, %1036) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), uint32], float64, Tensor[(234, 2), float32]) */;
  %1038 = %1032.0;
  %1039 = %1037.0;
  (%1038, %1039, meta[relay.Constant][44] /* ty=Tensor[(15, 4), uint32] */, meta[relay.Constant][45] /* ty=Tensor[(468), float64] */)
}

def @func_8449(%var_8438: Tensor[(60), uint32], %var_8440: Tensor[(234, 2), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), uint32], float64, Tensor[(234, 2), float32]) {
  %1040 = cast(%var_8438, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %1041 = cast(3.59727f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1042 = cast(%var_8440, dtype="float64") /* ty=Tensor[(234, 2), float64] */;
  %1043 = reshape(%1040, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
  %1044 = reshape(%1041, newshape=[]) /* ty=float64 */;
  %1045 = reshape(%1042, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %1046 = @func_4490(%1043, %1044, %1045) /* ty=(Tensor[(2, 3, 10), bool], float64, Tensor[(468), float64], Tensor[(1000), float64]) */;
  %1047 = cast(%var_8440, dtype="float32") /* ty=Tensor[(234, 2), float32] */;
  %1048 = @func_8296() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1049 = %1046.2;
  %1050 = acosh(%1047) /* ty=Tensor[(234, 2), float32] */;
  (%1048, %1049, %var_8438, 3.59727f64 /* ty=float64 */, %1050)
}

def @func_11037() -> (Tensor[(12, 3, 14), uint16],) {
  %1051 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1052 = %1051.0;
  (%1052,)
}

def @func_8935() -> (Tensor[(1000), float64],) {
  %1053 = @func_2469() /* ty=(Tensor[(1000), float64],) */;
  %1054 = %1053.0;
  (%1054,)
}

def @func_14921(%var_14898: Tensor[(2, 11, 8), uint8]) -> (Tensor[(2, 11, 8), bool],) {
  %1055 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 11, 8), uint8] */, dtype="bool") /* ty=Tensor[(2, 11, 8), bool] */;
  %1056 = shape_of(%var_14898, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1057 = cast(%var_14898, dtype="bool") /* ty=Tensor[(2, 11, 8), bool] */;
  %1058 = dyn.reshape(%1055, %1056, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1059 = greater_equal(%1057, %1058) /* ty=Tensor[(2, 11, 8), bool] */;
  (%1059,)
}

def @func_12298() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %1060 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1061 = @func_1135() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%1060, %1061)
}

def @func_5060() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) {
  %1062 = @func_3110() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1063 = %1062.1;
  %1064 = @func_1422() /* ty=Tensor[(12, 3, 14), float32] */;
  (%1063, %1064)
}

def @func_9986() -> Tensor[(12, 3, 14), uint16] {
  %1065 = @func_7578() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], uint8) */;
  %1065.0
}

def @func_8296() -> Tensor[(12, 3, 14), uint16] {
  %1066 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1066.0
}

def @func_3504() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %1067 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1068 = %1067.0;
  %1069 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%1068, %1069)
}

def @func_7283(%var_7267: Tensor[(60), uint32], %var_7268: Tensor[(468), float64]) -> (Tensor[(1000), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], float64, Tensor[(60), uint32], Tensor[(468), float64], Tensor[(12, 3, 14), uint16]) {
  %1070 = @func_5648() /* ty=(Tensor[(1000), float32],) */;
  %1071 = @func_6300() /* ty=(uint8,) */;
  %1072 = %1070.0;
  %1073 = cast(%1072, dtype="float32") /* ty=Tensor[(1000), float32] */;
  %1074 = reshape(%1073, newshape=[1000]) /* ty=Tensor[(1000), float32] */;
  %1075 = @func_6834(%1074) /* ty=(Tensor[(2, 3, 10), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], float64, float64, Tensor[(468, 1000), bool], Tensor[(12, 3, 14), uint16]) */;
  %1076 = cast(%var_7267, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %1077 = %1071.0;
  %1078 = cast(%1077, dtype="float64") /* ty=float64 */;
  %1079 = cast(%var_7268, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1080 = reshape(%1076, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
  %1081 = reshape(%1078, newshape=[]) /* ty=float64 */;
  %1082 = reshape(%1079, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %1083 = @func_4490(%1080, %1081, %1082) /* ty=(Tensor[(2, 3, 10), bool], float64, Tensor[(468), float64], Tensor[(1000), float64]) */;
  %1084 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1085 = @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1086 = @func_7155() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1087 = %1075.7;
  %1088 = %1083.1;
  %1089 = %1084.0;
  (%1072, %1077, %1085, %1086, %1087, %1088, %var_7267, %var_7268, %1089)
}

def @func_5751(%var_5749: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64]) {
  %1090 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1091 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %1092 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1093 = %1090.0;
  %1094 = cast(%1093, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %1095 = reshape(%1094, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
  %1096 = @func_3861(%1095) /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1097 = cast(%var_5749, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1098 = reshape(%1097, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %1099 = @func_2810(%1098) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64], Tensor[(12, 3, 14), float32]) */;
  %1100 = %1091.0;
  %1101 = %1092.0;
  %1102 = %1096.0;
  %1103 = %1099.1;
  (%1093, %1100, %1101, %1102, %1103, %var_5749)
}

def @func_14423() -> Tensor[(1000), float32] {
  %1104 = @func_3208() /* ty=Tensor[(1000), float32] */;
  %1105 = cast(%1104, dtype="float32") /* ty=Tensor[(1000), float32] */;
  %1106 = cosh(%1105) /* ty=Tensor[(1000), float32] */;
  %1107 = cast(%1106, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1108 = shape_of(%1104, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1109 = cast(%1104, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1110 = dyn.reshape(%1107, %1108, newshape=[]) /* ty=Tensor[(?), float64] */;
  %1111 = divide(%1109, %1110) /* ty=Tensor[(1000), float64] */;
  %1112 = cast(%1111, dtype="float32") /* ty=Tensor[(1000), float32] */;
  erf(%1112) /* ty=Tensor[(1000), float32] */
}

def @func_2667() -> Tensor[(12, 3, 14), uint16] {
  %1113 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
  %1113.1
}

def @func_237(%var_197: Tensor[(2, 3, 10), bool], %var_219: Tensor[(2, 3, 10), bool]) -> (Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) {
  %1114 = cast(%var_219, dtype="uint32") /* ty=Tensor[(2, 3, 10), uint32] */;
  %1115 = shape_of(%var_197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1116 = cast(%var_197, dtype="uint32") /* ty=Tensor[(2, 3, 10), uint32] */;
  %1117 = dyn.reshape(%1114, %1115, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1118 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 3, 10), bool] */, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %1119 = shape_of(%var_197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1120 = cast(%var_197, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %1121 = dyn.reshape(%1118, %1119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1122 = logical_and(%1120, %1121) /* ty=Tensor[(2, 3, 10), bool] */;
  %1123 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 3, 10), bool] */, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %1124 = shape_of(%1122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1125 = cast(%1122, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %1126 = dyn.reshape(%1123, %1124, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1127 = left_shift(%1116, %1117) /* ty=Tensor[(2, 3, 10), uint32] */;
  %1128 = logical_or(%1125, %1126) /* ty=Tensor[(2, 3, 10), bool] */;
  (%1127, %1128)
}

def @func_2950() -> Tensor[(12, 3, 14), uint16] {
  %1129 = @func_2505() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1129.0
}

def @func_6914() -> Tensor[(12, 3, 14), float32] {
  @func_6424() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_2245(%var_2243: uint8) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], Tensor[(9, 2, 3), bool], uint8) {
  %1130 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1131 = @func_1683() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1132 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1133 = cast(meta[relay.Constant][48] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1134 = reshape(%1133, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %1135 = @func_1817(%1134) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 13), float64], float64, Tensor[(468), float64], Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16]) */;
  %1136 = cast(%var_2243, dtype="uint8") /* ty=uint8 */;
  %1137 = reshape(%1136, newshape=[]) /* ty=uint8 */;
  %1138 = @func_434(%1137) /* ty=(Tensor[(9, 2, 3), bool],) */;
  %1139 = %1130.0;
  %1140 = %1131.0;
  %1141 = %1132.0;
  %1142 = %1135.3;
  %1143 = %1138.0;
  (%1139, %1140, %1141, %1142, meta[relay.Constant][48] /* ty=Tensor[(468), float64] */, %1143, %var_2243)
}

def @func_12160() -> (Tensor[(2, 3, 10), uint32],) {
  %1144 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %1145 = %1144.0;
  (%1145,)
}

def @func_6834(%var_6770: Tensor[(1000), float32]) -> (Tensor[(2, 3, 10), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], float64, float64, Tensor[(468, 1000), bool], Tensor[(12, 3, 14), uint16]) {
  %1146 = @func_5386() /* ty=(Tensor[(2, 3, 10), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), bool]) */;
  %1147 = @func_5648() /* ty=(Tensor[(1000), float32],) */;
  %1148 = %1147.0;
  %1149 = cast(%var_6770, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1150 = shape_of(%1148, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1151 = cast(%1148, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1152 = dyn.reshape(%1149, %1150, newshape=[]) /* ty=Tensor[(?), float64] */;
  %1153 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1154 = %1146.3;
  %1155 = cast(%1154, dtype="uint32") /* ty=Tensor[(2, 3, 10), uint32] */;
  %1156 = cast(-4.78871f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1157 = cast(meta[relay.Constant][49] /* ty=Tensor[(468, 1), float64] */, dtype="float64") /* ty=Tensor[(468, 1), float64] */;
  %1158 = reshape(%1155, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
  %1159 = reshape(%1156, newshape=[]) /* ty=float64 */;
  %1160 = reshape(%1157, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %1161 = @func_4490(%1158, %1159, %1160) /* ty=(Tensor[(2, 3, 10), bool], float64, Tensor[(468), float64], Tensor[(1000), float64]) */;
  %1162 = cast(%var_6770, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1163 = asin(%1162) /* ty=Tensor[(1000), float64] */;
  %1164 = cast(%1163, dtype="bool") /* ty=Tensor[(1000), bool] */;
  %1165 = cast(meta[relay.Constant][49] /* ty=Tensor[(468, 1), float64] */, dtype="bool") /* ty=Tensor[(468, 1), bool] */;
  %1166 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1167 = power(%1151, %1152) /* ty=Tensor[(1000), float64] */;
  %1168 = @func_3959() /* ty=Tensor[(12, 3, 14), float32] */;
  %1169 = %1153.0;
  %1170 = %1161.1;
  %1171 = not_equal(%1164, %1165) /* ty=Tensor[(468, 1000), bool] */;
  %1172 = %1166.0;
  (%1154, %1167, %1168, %1169, %1170, -4.78871f64 /* ty=float64 */, %1171, %1172)
}

def @func_7761() -> Tensor[(2, 3, 10), uint32] {
  %1173 = @func_4665() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %1173.0
}

def @func_9910() -> Tensor[(1, 60), bool] {
  %1174 = @func_5115() /* ty=(Tensor[(1000), float64], Tensor[(2, 3, 10), bool], Tensor[(1, 60), bool]) */;
  %1174.2
}

def @func_13511() -> Tensor[(12, 3, 14), uint16] {
  %1175 = @func_9092() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(30, 2), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1175.2
}

def @func_14636(%var_14594: Tensor[(63, 9), int16], %var_14629: float64, %var_14630: Tensor[(468), float64]) -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(2, 500), float64], Tensor[(63, 9), float32], Tensor[(468), float64], float64, Tensor[(468), float64]) {
  %1176 = cast(%var_14594, dtype="int16") /* ty=Tensor[(63, 9), int16] */;
  %1177 = cast(%var_14594, dtype="int16") /* ty=Tensor[(63, 9), int16] */;
  %1178 = reshape(%1176, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int16] */;
  %1179 = reshape(%1177, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int16] */;
  %1180 = @func_5906(%1178, %1179) /* ty=(Tensor[(7, 9, 9), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %1181 = @func_6670() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(1000), bool]) */;
  %1182 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 500), float64] */, dtype="float64") /* ty=Tensor[(2, 500), float64] */;
  %1183 = reshape(%1182, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %1184 = @func_2810(%1183) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64], Tensor[(12, 3, 14), float32]) */;
  %1185 = cast(meta[relay.Constant][51] /* ty=Tensor[(63, 9), int16] */, dtype="float32") /* ty=Tensor[(63, 9), float32] */;
  %1186 = shape_of(%var_14594, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1187 = cast(%var_14594, dtype="float32") /* ty=Tensor[(63, 9), float32] */;
  %1188 = dyn.reshape(%1185, %1186, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1189 = cast(%var_14629, dtype="float64") /* ty=float64 */;
  %1190 = cast(%var_14630, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1191 = reshape(%1189, newshape=[]) /* ty=float64 */;
  %1192 = reshape(%1190, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %1193 = @func_4852(%1191, %1192) /* ty=(Tensor[(2, 3, 10), uint32], float64, float64, Tensor[(468), float64]) */;
  %1194 = @func_11043() /* ty=Tensor[(12, 3, 14), float32] */;
  %1195 = %1180.3;
  %1196 = %1181.0;
  %1197 = %1184.1;
  %1198 = power(%1187, %1188) /* ty=Tensor[(63, 9), float32] */;
  %1199 = %1193.3;
  (%1194, %1195, %1196, %1197, meta[relay.Constant][50] /* ty=Tensor[(2, 500), float64] */, %1198, %1199, %var_14629, %var_14630)
}

def @func_15288() -> Tensor[(12, 3, 14), uint16] {
  @func_12750() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_1683() -> (Tensor[(12, 3, 14), uint16],) {
  %1200 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1201 = %1200.0;
  (%1201,)
}

def @func_10933() -> Tensor[(60), bool] {
  %1202 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %1202.7
}

def @func_13302(%var_13291: Tensor[(1000), float64]) -> (Tensor[(9, 13, 5), float32], Tensor[(15, 4), bool], Tensor[(1000), float64]) {
  %1203 = @func_11180() /* ty=Tensor[(9, 13, 5), float32] */;
  %1204 = cast(%1203, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
  %1205 = cast(%var_13291, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1206 = reshape(%1205, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %1207 = @func_7067(%1206) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16]) */;
  %1208 = atanh(%1204) /* ty=Tensor[(9, 13, 5), float32] */;
  %1209 = %1207.2;
  (%1208, %1209, %var_13291)
}

def @func_8320() -> Tensor[(1000), float64] {
  @func_3997() /* ty=Tensor[(1000), float64] */
}

def @func_13861() -> Tensor[(12, 3, 14), uint16] {
  %1210 = @func_5981() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1210.1
}

def @func_4852(%var_4829: float64, %var_4830: Tensor[(468), float64]) -> (Tensor[(2, 3, 10), uint32], float64, float64, Tensor[(468), float64]) {
  %1211 = @func_4665() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %1212 = %1211.0;
  %1213 = cast(%1212, dtype="uint32") /* ty=Tensor[(2, 3, 10), uint32] */;
  %1214 = cast(%var_4829, dtype="float64") /* ty=float64 */;
  %1215 = cast(%var_4830, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1216 = reshape(%1213, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
  %1217 = reshape(%1214, newshape=[]) /* ty=float64 */;
  %1218 = reshape(%1215, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %1219 = @func_4490(%1216, %1217, %1218) /* ty=(Tensor[(2, 3, 10), bool], float64, Tensor[(468), float64], Tensor[(1000), float64]) */;
  %1220 = %1219.1;
  (%1212, %1220, %var_4829, %var_4830)
}

def @func_11328() -> (Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16]) {
  %1221 = cast(meta[relay.Constant][52] /* ty=Tensor[(10, 8, 4), float32] */, dtype="float32") /* ty=Tensor[(10, 8, 4), float32] */;
  %1222 = sqrt(%1221) /* ty=Tensor[(10, 8, 4), float32] */;
  %1223 = @func_8514() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%1222, %1223)
}

def @func_4009() -> Tensor[(12, 3, 14), float32] {
  @func_1422() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_3245() -> (Tensor[(9, 13, 5), float32],) {
  %1224 = cast(meta[relay.Constant][54] /* ty=Tensor[(9, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
  %1225 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(9, 13, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1226 = cast(meta[relay.Constant][53] /* ty=Tensor[(9, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
  %1227 = dyn.reshape(%1224, %1225, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1228 = mod(%1226, %1227) /* ty=Tensor[(9, 13, 5), float32] */;
  (%1228,)
}

def @func_1008() -> (Tensor[(12, 3, 14), uint16],) {
  %1229 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1230 = %1229.0;
  (%1230,)
}

def @func_5244() -> (Tensor[(12, 3, 14), float32],) {
  %1231 = @func_3959() /* ty=Tensor[(12, 3, 14), float32] */;
  (%1231,)
}

def @func_6181(%var_6167: Tensor[(2, 3, 10), uint32]) -> (Tensor[(2, 3, 10), float64], Tensor[(2, 3, 10), float32]) {
  %1232 = @func_5200() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %1233 = %1232.0;
  %1234 = cast(%var_6167, dtype="float64") /* ty=Tensor[(2, 3, 10), float64] */;
  %1235 = shape_of(%1233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1236 = cast(%1233, dtype="float64") /* ty=Tensor[(2, 3, 10), float64] */;
  %1237 = dyn.reshape(%1234, %1235, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1238 = cast(%var_6167, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
  %1239 = mod(%1236, %1237) /* ty=Tensor[(2, 3, 10), float64] */;
  %1240 = acosh(%1238) /* ty=Tensor[(2, 3, 10), float32] */;
  (%1239, %1240)
}

def @func_11865(%var_11789: Tensor[(126), float32], %var_11809: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(126), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int32], Tensor[(1000), float32]) {
  %1241 = cast(%var_11789, dtype="float32") /* ty=Tensor[(126), float32] */;
  %1242 = reshape(%1241, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %1243 = @func_10551(%1242) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 7), float32], Tensor[(126), float32], Tensor[(12, 3, 14), float32]) */;
  %1244 = cast(%var_11809, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1245 = reshape(%1244, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %1246 = @func_5751(%1245) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64]) */;
  %1247 = @func_3504() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1248 = @func_11328() /* ty=(Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16]) */;
  %1249 = cast(%var_11809, dtype="float32") /* ty=Tensor[(1000), float32] */;
  %1250 = log10(%1249) /* ty=Tensor[(1000), float32] */;
  %1251 = cast(%var_11809, dtype="int32") /* ty=Tensor[(1000), int32] */;
  %1252 = shape_of(%1250, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1253 = cast(%1250, dtype="int32") /* ty=Tensor[(1000), int32] */;
  %1254 = dyn.reshape(%1251, %1252, newshape=[]) /* ty=Tensor[(?), int32] */;
  %1255 = cast(%1250, dtype="float32") /* ty=Tensor[(1000), float32] */;
  %1256 = @func_6489() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1257 = %1243.3;
  %1258 = %1246.0;
  %1259 = %1247.0;
  %1260 = %1248.0;
  %1261 = @func_8514() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1262 = @func_9986() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1263 = right_shift(%1253, %1254) /* ty=Tensor[(1000), int32] */;
  %1264 = tan(%1255) /* ty=Tensor[(1000), float32] */;
  (%1256, %1257, %var_11789, %1258, %1259, %1260, %1261, %1262, %1263, %1264)
}

def @func_2383() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) {
  %1265 = @func_1377() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1266 = @func_1683() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1267 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %1268 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1269 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1270 = %1265.1;
  %1271 = %1266.0;
  %1272 = %1267.3;
  %1273 = @func_1528() /* ty=Tensor[(12, 3, 14), float32] */;
  %1274 = %1268.0;
  (%1269, %1270, %1271, %1272, %1273, %1274)
}

def @func_671() -> (Tensor[(12, 3, 14), uint16],) {
  %1275 = cast(meta[relay.Constant][55] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1276 = cast(meta[relay.Constant][56] /* ty=Tensor[(12, 3, 14), uint16] */, dtype="uint16") /* ty=Tensor[(12, 3, 14), uint16] */;
  %1277 = right_shift(%1275, %1276) /* ty=Tensor[(12, 3, 14), uint16] */;
  (%1277,)
}

def @func_1782() -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) {
  %1278 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
  %1279 = cast(meta[relay.Constant][57] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1280 = reshape(%1279, newshape=[]) /* ty=uint8 */;
  %1281 = @func_721(%1280) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) */;
  %1282 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1283 = cast(meta[relay.Constant][57] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1284 = reshape(%1283, newshape=[]) /* ty=uint8 */;
  %1285 = @func_434(%1284) /* ty=(Tensor[(9, 2, 3), bool],) */;
  %1286 = cast(meta[relay.Constant][58] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %1287 = cast(meta[relay.Constant][58] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %1288 = reshape(%1286, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %1289 = reshape(%1287, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %1290 = @func_237(%1288, %1289) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %1291 = cast(meta[relay.Constant][57] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1292 = reshape(%1291, newshape=[]) /* ty=uint8 */;
  %1293 = @func_434(%1292) /* ty=(Tensor[(9, 2, 3), bool],) */;
  %1294 = %1278.1;
  %1295 = %1281.1;
  %1296 = %1282.0;
  %1297 = @func_1528() /* ty=Tensor[(12, 3, 14), float32] */;
  %1298 = %1285.0;
  %1299 = %1290.0;
  %1300 = %1293.0;
  (%1294, %1295, meta[relay.Constant][57] /* ty=uint8 */, %1296, %1297, %1298, %1299, meta[relay.Constant][58] /* ty=Tensor[(60), bool] */, %1300)
}

def @func_2810(%var_2776: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64], Tensor[(12, 3, 14), float32]) {
  %1301 = @func_2469() /* ty=(Tensor[(1000), float64],) */;
  %1302 = %1301.0;
  %1303 = cast(%var_2776, dtype="int64") /* ty=Tensor[(1000), int64] */;
  %1304 = shape_of(%1302, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1305 = cast(%1302, dtype="int64") /* ty=Tensor[(1000), int64] */;
  %1306 = dyn.reshape(%1303, %1304, newshape=[]) /* ty=Tensor[(?), int64] */;
  %1307 = cast(%1302, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1308 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1309 = add(%1305, %1306) /* ty=Tensor[(1000), int64] */;
  %1310 = asinh(%1307) /* ty=Tensor[(1000), float64] */;
  %1311 = @func_1422() /* ty=Tensor[(12, 3, 14), float32] */;
  (%1308, %1309, %1310, %1311)
}

def @func_10551(%var_10536: Tensor[(126), float32]) -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 7), float32], Tensor[(126), float32], Tensor[(12, 3, 14), float32]) {
  %1312 = @func_8094() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1313 = cast(%var_10536, dtype="float32") /* ty=Tensor[(126), float32] */;
  %1314 = reshape(%1313, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float32] */;
  %1315 = @func_7540(%1314) /* ty=(Tensor[(9, 2, 7), float32],) */;
  %1316 = @func_5244() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %1317 = %1312.0;
  %1318 = %1315.0;
  %1319 = %1316.0;
  (%1317, %1318, %var_10536, %1319)
}

def @func_11385() -> Tensor[(12, 3, 14), float32] {
  %1320 = @func_5679() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %1320.0
}

def @func_7432(%var_7402: uint64, %var_7403: Tensor[(14, 1, 1), uint64]) -> Tensor[(14, ?, ?), uint64] {
  %1321 = cast(%var_7402, dtype="bool") /* ty=bool */;
  %1322 = cast(%var_7403, dtype="bool") /* ty=Tensor[(14, 1, 1), bool] */;
  %1323 = greater_equal(%1321, %1322) /* ty=Tensor[(14, 1, 1), bool] */;
  %1324 = cast(%1323, dtype="bool") /* ty=Tensor[(14, 1, 1), bool] */;
  %1325 = cast(%var_7402, dtype="bool") /* ty=bool */;
  %1326 = logical_and(%1324, %1325) /* ty=Tensor[(14, 1, 1), bool] */;
  %1327 = cast(%1326, dtype="uint64") /* ty=Tensor[(14, 1, 1), uint64] */;
  %1328 = shape_of(%1323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1329 = cast(%1323, dtype="uint64") /* ty=Tensor[(14, 1, 1), uint64] */;
  %1330 = dyn.reshape(%1327, %1328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%1329, %1330) /* ty=Tensor[(14, ?, ?), uint64] */
}

def @func_7223(%var_7183: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(1000), float32]) {
  %1331 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1332 = cast(%var_7183, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1333 = cast(%var_7183, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1334 = reshape(%1332, newshape=[20, 50]) /* ty=Tensor[(20, 50), float64] */;
  %1335 = reshape(%1333, newshape=[10, 10, 10]) /* ty=Tensor[(10, 10, 10), float64] */;
  %1336 = @func_1852(%1334, %1335) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(20, 50), float64], Tensor[(10, 10, 10), bool], Tensor[(12, 3, 14), uint16]) */;
  %1337 = @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1338 = %1331.1;
  %1339 = %1336.3;
  %1340 = @func_3208() /* ty=Tensor[(1000), float32] */;
  (%1337, %1338, %1339, %var_7183, %1340)
}

def @func_13933() -> Tensor[(12, 3, 14), uint16] {
  @func_10798() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_5648() -> (Tensor[(1000), float32],) {
  %1341 = @func_3208() /* ty=Tensor[(1000), float32] */;
  (%1341,)
}

def @func_8714() -> (Tensor[(1000), float64],) {
  %1342 = @func_8320() /* ty=Tensor[(1000), float64] */;
  (%1342,)
}

def @func_15041() -> (Tensor[(9, 2, 3), bool],) {
  %1343 = @func_3601() /* ty=(Tensor[(9, 2, 3), bool],) */;
  %1344 = %1343.0;
  (%1344,)
}

def @func_5906(%var_5867: Tensor[(7, 9, 9), int16], %var_5868: Tensor[(7, 9, 9), int16]) -> (Tensor[(7, 9, 9), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) {
  %1345 = cast(%var_5868, dtype="bool") /* ty=Tensor[(7, 9, 9), bool] */;
  %1346 = shape_of(%var_5867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1347 = cast(%var_5867, dtype="bool") /* ty=Tensor[(7, 9, 9), bool] */;
  %1348 = dyn.reshape(%1345, %1346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1349 = @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1350 = @func_3920() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %1351 = @func_5530() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1352 = greater(%1347, %1348) /* ty=Tensor[(7, 9, 9), bool] */;
  %1353 = %1349.0;
  %1354 = %1350.0;
  %1355 = %1351.0;
  %1356 = @func_1528() /* ty=Tensor[(12, 3, 14), float32] */;
  (%1352, %1353, %1354, %1355, %1356)
}

def @func_14958() -> Tensor[(12, 3, 14), uint16] {
  %1357 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1357.0
}

def @func_3726(%var_3714: Tensor[(30, 2), bool]) -> (Tensor[(12, 3, 14), bool], Tensor[(12, 3, 14), float64], Tensor[(1000), float64], float64, float64, Tensor[(30, 2), bool]) {
  %1358 = @func_1422() /* ty=Tensor[(12, 3, 14), float32] */;
  %1359 = cast(meta[relay.Constant][59] /* ty=Tensor[(12, 3, 14), float32] */, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
  %1360 = shape_of(%1358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1361 = cast(%1358, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
  %1362 = dyn.reshape(%1359, %1360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1363 = cast(meta[relay.Constant][60] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1364 = reshape(%1363, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %1365 = @func_2172(%1364) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) */;
  %1366 = cast(4.8415f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1367 = cast(%var_3714, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %1368 = reshape(%1366, newshape=[]) /* ty=float64 */;
  %1369 = reshape(%1367, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %1370 = @func_3399(%1368, %1369) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(468), float64], float64, Tensor[(60), bool]) */;
  %1371 = logical_or(%1361, %1362) /* ty=Tensor[(12, 3, 14), bool] */;
  %1372 = %1365.1;
  %1373 = %1370.2;
  (%1371, %1372, meta[relay.Constant][60] /* ty=Tensor[(1000), float64] */, %1373, 4.8415f64 /* ty=float64 */, %var_3714)
}

def @func_4692(%var_4686: Tensor[(12, 3, 14), uint16]) -> (Tensor[(12, 3, 14), bool],) {
  %1374 = @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */;
  %1375 = %1374.3;
  %1376 = cast(%var_4686, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
  %1377 = shape_of(%1375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1378 = cast(%1375, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
  %1379 = dyn.reshape(%1376, %1377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1380 = greater_equal(%1378, %1379) /* ty=Tensor[(12, 3, 14), bool] */;
  (%1380,)
}

def @func_7342() -> (Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), bool]) {
  %1381 = @func_3601() /* ty=(Tensor[(9, 2, 3), bool],) */;
  %1382 = @func_3959() /* ty=Tensor[(12, 3, 14), float32] */;
  %1383 = cast(%1382, dtype="uint16") /* ty=Tensor[(12, 3, 14), uint16] */;
  %1384 = reshape(%1383, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), uint16] */;
  %1385 = @func_4692(%1384) /* ty=(Tensor[(12, 3, 14), bool],) */;
  %1386 = %1381.0;
  %1387 = %1385.0;
  (%1382, %1386, %1387)
}

def @func_434(%var_412: uint8) -> (Tensor[(9, 2, 3), bool],) {
  %1388 = cast(%var_412, dtype="bool") /* ty=bool */;
  %1389 = cast(meta[relay.Constant][61] /* ty=Tensor[(9, 2, 3), uint8] */, dtype="bool") /* ty=Tensor[(9, 2, 3), bool] */;
  %1390 = equal(%1388, %1389) /* ty=Tensor[(9, 2, 3), bool] */;
  (%1390,)
}

def @func_1653() -> Tensor[(12, 3, 14), uint16] {
  %1391 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1391.0
}

def @func_9609(%var_9589: Tensor[(4, 13, 1), uint16], %var_9590: Tensor[(4, 13, 7), uint16]) -> (Tensor[(4, 13, 7), bool],) {
  %1392 = cast(%var_9589, dtype="bool") /* ty=Tensor[(4, 13, 1), bool] */;
  %1393 = cast(%var_9590, dtype="bool") /* ty=Tensor[(4, 13, 7), bool] */;
  %1394 = less_equal(%1392, %1393) /* ty=Tensor[(4, 13, 7), bool] */;
  (%1394,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1377() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %0 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %2 = %0.0;
  %3 = %1.0;
  (%2, %3)
}

def @func_15076() -> Tensor[(12, 3, 14), uint16] {
  @func_15074() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_5982() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %6 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
    %4 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
    %5 = @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */;
    (%4, %5)
  };
  %6() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_11387() -> Tensor[(12, 3, 14), float32] {
  @func_11385() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_10683(%var_10681: Tensor[(2, 16, 14), uint32]) -> (Tensor[(2, 16, 14), bool], Tensor[(12, 3, 14), float32]) {
  @func_10680(%var_10681) /* ty=(Tensor[(2, 16, 14), bool], Tensor[(12, 3, 14), float32]) */
}

def @func_14129(%var_14127: Tensor[(1000), float64]) -> (Tensor[(1000), float32], uint8) {
  @func_14126(%var_14127) /* ty=(Tensor[(1000), float32], uint8) */
}

def @func_12483() -> (Tensor[(60), bool],) {
  %8 = fn () -> (Tensor[(60), bool],) {
    %7 = @func_10933() /* ty=Tensor[(60), bool] */;
    (%7,)
  };
  %8() /* ty=(Tensor[(60), bool],) */
}

def @func_805() -> (Tensor[(12, 3, 14), uint16],) {
  %9 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %10 = %9.0;
  (%10,)
}

def @func_12198(%var_12174: Tensor[(60), uint32]) -> (Tensor[(12, 3, 14), uint16], float64, Tensor[(60), uint32], Tensor[(468), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), float32]) {
  %11 = @func_11037() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %12 = cast(%var_12174, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %14 = reshape(%12, newshape=[60]) /* ty=Tensor[(60), uint32] */;
  %15 = reshape(%13, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %16 = @func_8449(%14, %15) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), uint32], float64, Tensor[(234, 2), float32]) */;
  %17 = @func_9437() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 13, 5), float32], Tensor[(1000), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16]) */;
  %18 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %19 = %11.0;
  %20 = %16.3;
  %21 = %17.3;
  %22 = %18.4;
  (%19, %20, %var_12174, meta[relay.Constant][0] /* ty=Tensor[(468), float64] */, %21, %22)
}

def @func_11182() -> Tensor[(9, 13, 5), float32] {
  @func_11180() /* ty=Tensor[(9, 13, 5), float32] */
}

def @func_6183(%var_6182: Tensor[(2, 3, 10), uint32]) -> (Tensor[(2, 3, 10), float64], Tensor[(2, 3, 10), float32]) {
  %32 = fn (%var_6167: Tensor[(2, 3, 10), uint32]) -> (Tensor[(2, 3, 10), float64], Tensor[(2, 3, 10), float32]) {
    %23 = @func_5200() /* ty=(Tensor[(2, 3, 10), uint32],) */;
    %24 = %23.0;
    %25 = cast(%var_6167, dtype="float64") /* ty=Tensor[(2, 3, 10), float64] */;
    %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%24, dtype="float64") /* ty=Tensor[(2, 3, 10), float64] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %29 = cast(%var_6167, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
    %30 = mod(%27, %28) /* ty=Tensor[(2, 3, 10), float64] */;
    %31 = acosh(%29) /* ty=Tensor[(2, 3, 10), float32] */;
    (%30, %31)
  };
  %32(%var_6182) /* ty=(Tensor[(2, 3, 10), float64], Tensor[(2, 3, 10), float32]) */
}

def @func_4331() -> (Tensor[(12, 3, 14), uint16],) {
  @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_9113() -> Tensor[(12, 3, 14), float32] {
  %33 = @func_3920() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %33.0
}

def @func_9690() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %34 = @func_6978() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %35 = cast(meta[relay.Constant][1] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %36 = reshape(%35, newshape=[]) /* ty=uint8 */;
  %37 = @func_9165(%36) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16]) */;
  %38 = @func_8148() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) */;
  %39 = %34.0;
  %40 = %37.0;
  %41 = %38.2;
  %42 = @func_3019() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%39, %40, meta[relay.Constant][1] /* ty=uint8 */, %41, %42)
}

def @func_15042() -> (Tensor[(9, 2, 3), bool],) {
  %45 = fn () -> (Tensor[(9, 2, 3), bool],) {
    %43 = @func_3601() /* ty=(Tensor[(9, 2, 3), bool],) */;
    %44 = %43.0;
    (%44,)
  };
  %45() /* ty=(Tensor[(9, 2, 3), bool],) */
}

def @func_12604() -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) {
  %51 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) {
    %46 = cast(meta[relay.Constant][2] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %47 = reshape(%46, newshape=[]) /* ty=uint8 */;
    %48 = @func_9165(%47) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16]) */;
    %49 = @func_8360() /* ty=Tensor[(12, 3, 14), uint16] */;
    %50 = %48.1;
    (%49, %50, meta[relay.Constant][2] /* ty=uint8 */)
  };
  %51() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) */
}

def @func_9911() -> Tensor[(1, 60), bool] {
  %53 = fn () -> Tensor[(1, 60), bool] {
    %52 = @func_5115() /* ty=(Tensor[(1000), float64], Tensor[(2, 3, 10), bool], Tensor[(1, 60), bool]) */;
    %52.2
  };
  %53() /* ty=Tensor[(1, 60), bool] */
}

def @func_11989() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), uint32], Tensor[(468), float64]) {
  %62 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), uint32], Tensor[(468), float64]) {
    %54 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
    %55 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 4), uint32] */, dtype="uint32") /* ty=Tensor[(15, 4), uint32] */;
    %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %57 = reshape(%55, newshape=[60]) /* ty=Tensor[(60), uint32] */;
    %58 = reshape(%56, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
    %59 = @func_8449(%57, %58) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), uint32], float64, Tensor[(234, 2), float32]) */;
    %60 = %54.0;
    %61 = %59.0;
    (%60, %61, meta[relay.Constant][3] /* ty=Tensor[(15, 4), uint32] */, meta[relay.Constant][4] /* ty=Tensor[(468), float64] */)
  };
  %62() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), uint32], Tensor[(468), float64]) */
}

def @func_15290() -> Tensor[(12, 3, 14), uint16] {
  @func_15288() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_5115() -> (Tensor[(1000), float64], Tensor[(2, 3, 10), bool], Tensor[(1, 60), bool]) {
  %63 = @func_3557() /* ty=(Tensor[(1000), float64],) */;
  %64 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 60), bool] */, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 60), bool] */, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
  %66 = reshape(%64, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %67 = reshape(%65, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %68 = @func_237(%66, %67) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %69 = %63.0;
  %70 = %68.1;
  (%69, %70, meta[relay.Constant][5] /* ty=Tensor[(1, 60), bool] */)
}

def @func_5062() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) {
  @func_5060() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */
}

def @func_15008() -> (Tensor[(12, 3, 14), uint16],) {
  %73 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %71 = @func_8908() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %72 = %71.0;
    (%72,)
  };
  %73() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_9237() -> Tensor[(12, 3, 14), uint16] {
  @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_1856(%var_1854: Tensor[(20, 50), float64], %var_1855: Tensor[(10, 10, 10), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(20, 50), float64], Tensor[(10, 10, 10), bool], Tensor[(12, 3, 14), uint16]) {
  @func_1852(%var_1854, %var_1855) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(20, 50), float64], Tensor[(10, 10, 10), bool], Tensor[(12, 3, 14), uint16]) */
}

def @func_2482() -> (Tensor[(12, 3, 14), uint16],) {
  @func_2480() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_7023(%var_7021: float64, %var_7022: Tensor[(16, 13, 8), float64]) -> Tensor[(16, 13, 8), bool] {
  %76 = fn (%var_7009: float64, %var_7010: Tensor[(16, 13, 8), float64]) -> Tensor[(16, 13, 8), bool] {
    %74 = cast(%var_7009, dtype="bool") /* ty=bool */;
    %75 = cast(%var_7010, dtype="bool") /* ty=Tensor[(16, 13, 8), bool] */;
    equal(%74, %75) /* ty=Tensor[(16, 13, 8), bool] */
  };
  %76(%var_7021, %var_7022) /* ty=Tensor[(16, 13, 8), bool] */
}

def @func_1093(%var_1064: float64, %var_1065: Tensor[(12, 3, 13), float64], %var_1070: Tensor[(60), bool]) -> (Tensor[(12, 3, 13), float64], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(15, 4), bool], Tensor[(1000), float64]) {
  %77 = cast(%var_1064, dtype="float64") /* ty=float64 */;
  %78 = cast(%var_1065, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %79 = cast(%var_1070, dtype="bool") /* ty=Tensor[(60), bool] */;
  %80 = cast(%var_1070, dtype="bool") /* ty=Tensor[(60), bool] */;
  %81 = reshape(%79, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %82 = reshape(%80, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %83 = @func_237(%81, %82) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %85 = reshape(%84, newshape=[10, 10, 10]) /* ty=Tensor[(10, 10, 10), float64] */;
  %86 = @func_775(%85) /* ty=(Tensor[(10, 10, 10), float64], Tensor[(2, 3, 10), uint32], Tensor[(15, 4), bool]) */;
  %87 = divide(%77, %78) /* ty=Tensor[(12, 3, 13), float64] */;
  %88 = %83.0;
  %89 = %86.2;
  (%87, %88, %var_1070, %89, meta[relay.Constant][6] /* ty=Tensor[(1000), float64] */)
}

def @func_10330() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float32], Tensor[(396), float32]) {
  %99 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float32], Tensor[(396), float32]) {
    %90 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %91 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %92 = cast(meta[relay.Constant][7] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
    %93 = reshape(%92, newshape=[11, 4, 9]) /* ty=Tensor[(11, 4, 9), float32] */;
    %94 = @func_3335(%93) /* ty=(Tensor[(11, 4, 9), float32],) */;
    %95 = %90.0;
    %96 = %91.0;
    %97 = @func_6017() /* ty=Tensor[(12, 3, 14), uint16] */;
    %98 = %94.0;
    (%95, %96, %97, %98, meta[relay.Constant][7] /* ty=Tensor[(396), float32] */)
  };
  %99() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float32], Tensor[(396), float32]) */
}

def @func_8398(%var_8384: Tensor[(1000), float64], %var_8391: Tensor[(2, 3, 10), uint32]) -> (Tensor[(9, 13, 5), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64], Tensor[(2, 3, 10), int64]) {
  %100 = @func_3245() /* ty=(Tensor[(9, 13, 5), float32],) */;
  %101 = cast(%var_8384, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %102 = reshape(%101, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %103 = @func_7067(%102) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16]) */;
  %104 = @func_6978() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %105 = %104.0;
  %106 = cast(%var_8391, dtype="int64") /* ty=Tensor[(2, 3, 10), int64] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="int64") /* ty=Tensor[(2, 3, 10), int64] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %110 = %100.0;
  %111 = %103.4;
  %112 = add(%108, %109) /* ty=Tensor[(2, 3, 10), int64] */;
  (%110, %111, %var_8384, %112)
}

def @func_8360() -> Tensor[(12, 3, 14), uint16] {
  %113 = @func_1683() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %113.0
}

def @func_7432(%var_7402: uint64, %var_7403: Tensor[(14, 1, 1), uint64]) -> Tensor[(14, ?, ?), uint64] {
  %114 = cast(%var_7402, dtype="bool") /* ty=bool */;
  %115 = cast(%var_7403, dtype="bool") /* ty=Tensor[(14, 1, 1), bool] */;
  %116 = greater_equal(%114, %115) /* ty=Tensor[(14, 1, 1), bool] */;
  %117 = cast(%116, dtype="bool") /* ty=Tensor[(14, 1, 1), bool] */;
  %118 = cast(%var_7402, dtype="bool") /* ty=bool */;
  %119 = logical_and(%117, %118) /* ty=Tensor[(14, 1, 1), bool] */;
  %120 = cast(%119, dtype="uint64") /* ty=Tensor[(14, 1, 1), uint64] */;
  %121 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%116, dtype="uint64") /* ty=Tensor[(14, 1, 1), uint64] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%122, %123) /* ty=Tensor[(14, ?, ?), uint64] */
}

def @func_12096(%var_12095: Tensor[(14), uint64]) -> (Tensor[(12, 3, 14), float32], Tensor[(14, ?, ?), uint64], uint64, Tensor[(14), uint64]) {
  %131 = fn (%var_12086: Tensor[(14), uint64]) -> (Tensor[(12, 3, 14), float32], Tensor[(14, ?, ?), uint64], uint64, Tensor[(14), uint64]) {
    %124 = @func_9293() /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
    %125 = cast(meta[relay.Constant][8] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %126 = cast(%var_12086, dtype="uint64") /* ty=Tensor[(14), uint64] */;
    %127 = reshape(%125, newshape=[]) /* ty=uint64 */;
    %128 = reshape(%126, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), uint64] */;
    %129 = %124.0;
    %130 = @func_7432(%127, %128) /* ty=Tensor[(14, ?, ?), uint64] */;
    (%129, %130, meta[relay.Constant][8] /* ty=uint64 */, %var_12086)
  };
  %131(%var_12095) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(14, ?, ?), uint64], uint64, Tensor[(14), uint64]) */
}

def @func_2383() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) {
  %132 = @func_1377() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %133 = @func_1683() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %134 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %135 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %136 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
  %137 = %132.1;
  %138 = %133.0;
  %139 = %134.3;
  %140 = @func_1528() /* ty=Tensor[(12, 3, 14), float32] */;
  %141 = %135.0;
  (%136, %137, %138, %139, %140, %141)
}

def @func_13697() -> (Tensor[(12, 3, 14), uint16],) {
  %142 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %143 = %142.1;
  (%143,)
}

def @func_10993() -> Tensor[(12, 3, 14), uint16] {
  @func_10798() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_5649() -> (Tensor[(1000), float32],) {
  %145 = fn () -> (Tensor[(1000), float32],) {
    %144 = @func_3208() /* ty=Tensor[(1000), float32] */;
    (%144,)
  };
  %145() /* ty=(Tensor[(1000), float32],) */
}

def @func_3798() -> (Tensor[(12, 3, 14), uint16],) {
  @func_3796() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_1580() -> (Tensor[(12, 3, 14), uint16],) {
  %146 = @func_1528() /* ty=Tensor[(12, 3, 14), float32] */;
  %147 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 3, 14), float32] */, dtype="uint16") /* ty=Tensor[(12, 3, 14), uint16] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="uint16") /* ty=Tensor[(12, 3, 14), uint16] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %151 = bitwise_or(%149, %150) /* ty=Tensor[(12, 3, 14), uint16] */;
  (%151,)
}

def @func_12214() -> (Tensor[(2, 1, 6), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) {
  %158 = fn () -> (Tensor[(2, 1, 6), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) {
    %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 1, 6), float32] */, dtype="float32") /* ty=Tensor[(2, 1, 6), float32] */;
    %153 = cast(meta[relay.Constant][11] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %154 = reshape(%153, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
    %155 = @func_7067(%154) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16]) */;
    %156 = asinh(%152) /* ty=Tensor[(2, 1, 6), float32] */;
    %157 = %155.1;
    (%156, %157, meta[relay.Constant][11] /* ty=Tensor[(1000), float64] */)
  };
  %158() /* ty=(Tensor[(2, 1, 6), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) */
}

def @func_6159() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_3922() -> (Tensor[(12, 3, 14), float32],) {
  @func_3920() /* ty=(Tensor[(12, 3, 14), float32],) */
}

def @func_7880(%var_7878: Tensor[(1, 9, 3), float64], %var_7879: Tensor[(16, 9, 3), float64]) -> (Tensor[(16, 9, 3), float64], Tensor[(16, 9, 3), int8]) {
  %165 = fn (%var_7814: Tensor[(1, 9, 3), float64], %var_7815: Tensor[(16, 9, 3), float64]) -> (Tensor[(16, 9, 3), float64], Tensor[(16, 9, 3), int8]) {
    %159 = cast(%var_7814, dtype="float64") /* ty=Tensor[(1, 9, 3), float64] */;
    %160 = cast(%var_7815, dtype="float64") /* ty=Tensor[(16, 9, 3), float64] */;
    %161 = cast(%var_7815, dtype="int8") /* ty=Tensor[(16, 9, 3), int8] */;
    %162 = cast(%var_7814, dtype="int8") /* ty=Tensor[(1, 9, 3), int8] */;
    %163 = mod(%159, %160) /* ty=Tensor[(16, 9, 3), float64] */;
    %164 = bitwise_xor(%161, %162) /* ty=Tensor[(16, 9, 3), int8] */;
    (%163, %164)
  };
  %165(%var_7878, %var_7879) /* ty=(Tensor[(16, 9, 3), float64], Tensor[(16, 9, 3), int8]) */
}

def @func_13513() -> Tensor[(12, 3, 14), uint16] {
  @func_13511() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_10798() -> Tensor[(12, 3, 14), uint16] {
  @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_2813(%var_2811: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64], Tensor[(12, 3, 14), float32]) {
  @func_2810(%var_2811) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64], Tensor[(12, 3, 14), float32]) */
}

def @func_4786(%var_4785: Tensor[(1000), float64]) -> (Tensor[(2, 3, 10), uint32], Tensor[(1000), bool], Tensor[(1000), float64]) {
  %176 = fn (%var_4751: Tensor[(1000), float64]) -> (Tensor[(2, 3, 10), uint32], Tensor[(1000), bool], Tensor[(1000), float64]) {
    %166 = @func_2469() /* ty=(Tensor[(1000), float64],) */;
    %167 = %166.0;
    %168 = cast(%var_4751, dtype="bool") /* ty=Tensor[(1000), bool] */;
    %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(1), int32] */;
    %170 = cast(%167, dtype="bool") /* ty=Tensor[(1000), bool] */;
    %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?), bool] */;
    %172 = cast(%var_4751, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %173 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
    %174 = less(%170, %171) /* ty=Tensor[(1000), bool] */;
    %175 = log2(%172) /* ty=Tensor[(1000), float64] */;
    (%173, %174, %175)
  };
  %176(%var_4785) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(1000), bool], Tensor[(1000), float64]) */
}

def @func_5524() -> (Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  @func_5522() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_11868(%var_11866: Tensor[(126), float32], %var_11867: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(126), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int32], Tensor[(1000), float32]) {
  %201 = fn (%var_11789: Tensor[(126), float32], %var_11809: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(126), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int32], Tensor[(1000), float32]) {
    %177 = cast(%var_11789, dtype="float32") /* ty=Tensor[(126), float32] */;
    %178 = reshape(%177, newshape=[126]) /* ty=Tensor[(126), float32] */;
    %179 = @func_10551(%178) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 7), float32], Tensor[(126), float32], Tensor[(12, 3, 14), float32]) */;
    %180 = cast(%var_11809, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %181 = reshape(%180, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
    %182 = @func_5751(%181) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64]) */;
    %183 = @func_3504() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %184 = @func_11328() /* ty=(Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16]) */;
    %185 = cast(%var_11809, dtype="float32") /* ty=Tensor[(1000), float32] */;
    %186 = log10(%185) /* ty=Tensor[(1000), float32] */;
    %187 = cast(%var_11809, dtype="int32") /* ty=Tensor[(1000), int32] */;
    %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(1), int32] */;
    %189 = cast(%186, dtype="int32") /* ty=Tensor[(1000), int32] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?), int32] */;
    %191 = cast(%186, dtype="float32") /* ty=Tensor[(1000), float32] */;
    %192 = @func_6489() /* ty=Tensor[(12, 3, 14), uint16] */;
    %193 = %179.3;
    %194 = %182.0;
    %195 = %183.0;
    %196 = %184.0;
    %197 = @func_8514() /* ty=Tensor[(12, 3, 14), uint16] */;
    %198 = @func_9986() /* ty=Tensor[(12, 3, 14), uint16] */;
    %199 = right_shift(%189, %190) /* ty=Tensor[(1000), int32] */;
    %200 = tan(%191) /* ty=Tensor[(1000), float32] */;
    (%192, %193, %var_11789, %194, %195, %196, %197, %198, %199, %200)
  };
  %201(%var_11866, %var_11867) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(126), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int32], Tensor[(1000), float32]) */
}

def @func_9692() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  @func_9690() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_12810(%var_12807: int32, %var_12808: Tensor[(2, 8, 1), int32], %var_12809: Tensor[(2464), float64]) -> (Tensor[(2, 8, 1), int32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 16, 14), float64], Tensor[(2464), float64]) {
  @func_12805(%var_12807, %var_12808, %var_12809) /* ty=(Tensor[(2, 8, 1), int32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 16, 14), float64], Tensor[(2464), float64]) */
}

def @func_7629() -> (Tensor[(12, 3, 14), float32],) {
  %204 = fn () -> (Tensor[(12, 3, 14), float32],) {
    %202 = @func_3920() /* ty=(Tensor[(12, 3, 14), float32],) */;
    %203 = %202.0;
    (%203,)
  };
  %204() /* ty=(Tensor[(12, 3, 14), float32],) */
}

def @func_6339() -> (Tensor[(1, 14, 12), float32], Tensor[(12, 3, 14), uint16]) {
  %209 = fn () -> (Tensor[(1, 14, 12), float32], Tensor[(12, 3, 14), uint16]) {
    %205 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 14, 12), float32] */, dtype="float32") /* ty=Tensor[(1, 14, 12), float32] */;
    %206 = @func_3504() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %207 = sqrt(%205) /* ty=Tensor[(1, 14, 12), float32] */;
    %208 = %206.1;
    (%207, %208)
  };
  %209() /* ty=(Tensor[(1, 14, 12), float32], Tensor[(12, 3, 14), uint16]) */
}

def @func_11180() -> Tensor[(9, 13, 5), float32] {
  %210 = @func_3245() /* ty=(Tensor[(9, 13, 5), float32],) */;
  %210.0
}

def @func_14126(%var_14114: Tensor[(1000), float64]) -> (Tensor[(1000), float32], uint8) {
  %211 = @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */;
  %212 = %211.2;
  %213 = cast(%var_14114, dtype="float32") /* ty=Tensor[(1000), float32] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(1), int32] */;
  %215 = cast(%212, dtype="float32") /* ty=Tensor[(1000), float32] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?), float32] */;
  %217 = @func_9690() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %218 = floor_divide(%215, %216) /* ty=Tensor[(1000), float32] */;
  %219 = %217.2;
  (%218, %219)
}

def @func_10150() -> (Tensor[(2, 3, 10), uint32],) {
  @func_10148() /* ty=(Tensor[(2, 3, 10), uint32],) */
}

def @func_3208() -> Tensor[(1000), float32] {
  %220 = @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */;
  %221 = %220.2;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(1000), float32] */;
  sin(%222) /* ty=Tensor[(1000), float32] */
}

def @func_13839(%var_13837: float64) -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 16, 14), float64], Tensor[(2464), float64], Tensor[(12, 3, 14), float32], Tensor[(10, 8, 4), float32], float64, float64) {
  @func_13836(%var_13837) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 16, 14), float64], Tensor[(2464), float64], Tensor[(12, 3, 14), float32], Tensor[(10, 8, 4), float32], float64, float64) */
}

def @func_8855() -> Tensor[(15, 13, 5), float64] {
  %223 = fn () -> Tensor[(15, 13, 5), float64] {
    @func_6934() /* ty=Tensor[(15, 13, 5), float64] */
  };
  %223() /* ty=Tensor[(15, 13, 5), float64] */
}

def @func_11450() -> Tensor[(12, 3, 14), float32] {
  @func_11448() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_10777(%var_10776: Tensor[(14, 2, 11), float64]) -> Tensor[(14, 2, 11), float64] {
  %225 = fn (%var_10771: Tensor[(14, 2, 11), float64]) -> Tensor[(14, 2, 11), float64] {
    %224 = cast(%var_10771, dtype="float64") /* ty=Tensor[(14, 2, 11), float64] */;
    rsqrt(%224) /* ty=Tensor[(14, 2, 11), float64] */
  };
  %225(%var_10776) /* ty=Tensor[(14, 2, 11), float64] */
}

def @func_15192() -> (Tensor[(12, 3, 14), uint16],) {
  %226 = @func_2882() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %227 = %226.0;
  (%227,)
}

def @func_13173() -> Tensor[(12, 3, 14), uint16] {
  @func_13171() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_13511() -> Tensor[(12, 3, 14), uint16] {
  %228 = @func_9092() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(30, 2), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %228.2
}

def @func_4694(%var_4693: Tensor[(12, 3, 14), uint16]) -> (Tensor[(12, 3, 14), bool],) {
  %236 = fn (%var_4686: Tensor[(12, 3, 14), uint16]) -> (Tensor[(12, 3, 14), bool],) {
    %229 = @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */;
    %230 = %229.3;
    %231 = cast(%var_4686, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
    %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
    %233 = cast(%230, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %235 = greater_equal(%233, %234) /* ty=Tensor[(12, 3, 14), bool] */;
    (%235,)
  };
  %236(%var_4693) /* ty=(Tensor[(12, 3, 14), bool],) */
}

def @func_8247(%var_8240: Tensor[(2, 3, 10), uint32]) -> (Tensor[(2, 3, 10), int8],) {
  %237 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %238 = cast(%var_8240, dtype="int8") /* ty=Tensor[(2, 3, 10), int8] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="int8") /* ty=Tensor[(2, 3, 10), int8] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %242 = bitwise_xor(%240, %241) /* ty=Tensor[(2, 3, 10), int8] */;
  (%242,)
}

def @func_11164(%var_11162: float64) -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], float64, Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(396), float32]) {
  @func_11161(%var_11162) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], float64, Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(396), float32]) */
}

def @func_6426() -> Tensor[(12, 3, 14), float32] {
  @func_6424() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_15217() -> (Tensor[(2, 3, 10), uint32],) {
  %245 = fn () -> (Tensor[(2, 3, 10), uint32],) {
    %243 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
    %244 = %243.6;
    (%244,)
  };
  %245() /* ty=(Tensor[(2, 3, 10), uint32],) */
}

def @func_1582() -> (Tensor[(12, 3, 14), uint16],) {
  @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_1784() -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) {
  @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */
}

def @func_3258() -> Tensor[(2, 3, 10), uint32] {
  %246 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %246.0
}

def @func_3949() -> (Tensor[(7, 14, 15), float32], Tensor[(2, 3, 10), uint32], float64) {
  @func_3947() /* ty=(Tensor[(7, 14, 15), float32], Tensor[(2, 3, 10), uint32], float64) */
}

def @func_2032(%var_1992: Tensor[(468), float64], %var_2011: float64, %var_2012: Tensor[(60), bool]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), bool], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) {
  %247 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %248 = cast(%var_1992, dtype="float64") /* ty=Tensor[(468), float64] */;
  %249 = reshape(%248, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %250 = @func_1817(%249) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 13), float64], float64, Tensor[(468), float64], Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16]) */;
  %251 = cast(%var_2011, dtype="float64") /* ty=float64 */;
  %252 = cast(%var_1992, dtype="float64") /* ty=Tensor[(468), float64] */;
  %253 = cast(%var_2012, dtype="bool") /* ty=Tensor[(60), bool] */;
  %254 = reshape(%251, newshape=[]) /* ty=float64 */;
  %255 = reshape(%252, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float64] */;
  %256 = reshape(%253, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %257 = @func_1093(%254, %255, %256) /* ty=(Tensor[(12, 3, 13), float64], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(15, 4), bool], Tensor[(1000), float64]) */;
  %258 = %247.0;
  %259 = %250.0;
  %260 = %257.2;
  %261 = @func_1135() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%258, %259, %var_1992, %260, %var_2011, %var_2012, %261)
}

def @func_937() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) {
  @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */
}

def @func_4991(%var_4983: float64) -> (Tensor[(12, 3, 14), uint16], Tensor[(60), bool], float64, Tensor[(60), bool]) {
  %262 = @func_2383() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
  %263 = cast(%var_4983, dtype="float64") /* ty=float64 */;
  %264 = cast(meta[relay.Constant][13] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %265 = reshape(%263, newshape=[]) /* ty=float64 */;
  %266 = reshape(%264, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %267 = @func_3399(%265, %266) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(468), float64], float64, Tensor[(60), bool]) */;
  %268 = %262.0;
  %269 = %267.3;
  (%268, %269, %var_4983, meta[relay.Constant][13] /* ty=Tensor[(60), bool] */)
}

def @func_2385() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) {
  @func_2383() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */
}

def @func_1528() -> Tensor[(12, 3, 14), float32] {
  %270 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %271 = %270.0;
  %272 = @func_1422() /* ty=Tensor[(12, 3, 14), float32] */;
  %273 = cast(%272, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %274 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(%271, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%275, %276) /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_6019() -> Tensor[(12, 3, 14), uint16] {
  @func_6017() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_10600() -> (Tensor[(12, 3, 14), uint16],) {
  %279 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %277 = @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %278 = %277.0;
    (%278,)
  };
  %279() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_9027() -> Tensor[(12, 3, 14), uint16] {
  %281 = fn () -> Tensor[(12, 3, 14), uint16] {
    %280 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %280.1
  };
  %281() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_12161() -> (Tensor[(2, 3, 10), uint32],) {
  %284 = fn () -> (Tensor[(2, 3, 10), uint32],) {
    %282 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
    %283 = %282.0;
    (%283,)
  };
  %284() /* ty=(Tensor[(2, 3, 10), uint32],) */
}

def @func_9556(%var_9547: Tensor[(60), uint32]) -> (Tensor[(1000), float32], Tensor[(2, 3, 10), float32], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16]) {
  %285 = @func_5648() /* ty=(Tensor[(1000), float32],) */;
  %286 = cast(%var_9547, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %287 = reshape(%286, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
  %288 = @func_6181(%287) /* ty=(Tensor[(2, 3, 10), float64], Tensor[(2, 3, 10), float32]) */;
  %289 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
  %290 = %285.0;
  %291 = %288.1;
  %292 = %289.0;
  (%290, %291, %var_9547, %292)
}

def @func_5811() -> Tensor[(12, 3, 14), float32] {
  %293 = fn () -> Tensor[(12, 3, 14), float32] {
    @func_1422() /* ty=Tensor[(12, 3, 14), float32] */
  };
  %293() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_9613(%var_9611: Tensor[(4, 13, 1), uint16], %var_9612: Tensor[(4, 13, 7), uint16]) -> (Tensor[(4, 13, 7), bool],) {
  @func_9609(%var_9611, %var_9612) /* ty=(Tensor[(4, 13, 7), bool],) */
}

def @func_13415() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) {
  %298 = fn () -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) {
    %294 = @func_5386() /* ty=(Tensor[(2, 3, 10), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), bool]) */;
    %295 = @func_9293() /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
    %296 = %294.1;
    %297 = %295.1;
    (%296, %297)
  };
  %298() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) */
}

def @func_14423() -> Tensor[(1000), float32] {
  %299 = @func_3208() /* ty=Tensor[(1000), float32] */;
  %300 = cast(%299, dtype="float32") /* ty=Tensor[(1000), float32] */;
  %301 = cosh(%300) /* ty=Tensor[(1000), float32] */;
  %302 = cast(%301, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %303 = shape_of(%299, dtype="int32") /* ty=Tensor[(1), int32] */;
  %304 = cast(%299, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?), float64] */;
  %306 = divide(%304, %305) /* ty=Tensor[(1000), float64] */;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(1000), float32] */;
  erf(%307) /* ty=Tensor[(1000), float32] */
}

def @func_7580() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], uint8) {
  @func_7578() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], uint8) */
}

def @func_11038() -> (Tensor[(12, 3, 14), uint16],) {
  %310 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %308 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %309 = %308.0;
    (%309,)
  };
  %310() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_14425() -> Tensor[(1000), float32] {
  @func_14423() /* ty=Tensor[(1000), float32] */
}

def @func_240(%var_238: Tensor[(2, 3, 10), bool], %var_239: Tensor[(2, 3, 10), bool]) -> (Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) {
  %326 = fn (%var_197: Tensor[(2, 3, 10), bool], %var_219: Tensor[(2, 3, 10), bool]) -> (Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) {
    %311 = cast(%var_219, dtype="uint32") /* ty=Tensor[(2, 3, 10), uint32] */;
    %312 = shape_of(%var_197, dtype="int32") /* ty=Tensor[(3), int32] */;
    %313 = cast(%var_197, dtype="uint32") /* ty=Tensor[(2, 3, 10), uint32] */;
    %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %315 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 3, 10), bool] */, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
    %316 = shape_of(%var_197, dtype="int32") /* ty=Tensor[(3), int32] */;
    %317 = cast(%var_197, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %319 = logical_and(%317, %318) /* ty=Tensor[(2, 3, 10), bool] */;
    %320 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 3, 10), bool] */, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
    %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
    %322 = cast(%319, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
    %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %324 = left_shift(%313, %314) /* ty=Tensor[(2, 3, 10), uint32] */;
    %325 = logical_or(%322, %323) /* ty=Tensor[(2, 3, 10), bool] */;
    (%324, %325)
  };
  %326(%var_238, %var_239) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */
}

def @func_4855(%var_4853: float64, %var_4854: Tensor[(468), float64]) -> (Tensor[(2, 3, 10), uint32], float64, float64, Tensor[(468), float64]) {
  %337 = fn (%var_4829: float64, %var_4830: Tensor[(468), float64]) -> (Tensor[(2, 3, 10), uint32], float64, float64, Tensor[(468), float64]) {
    %327 = @func_4665() /* ty=(Tensor[(2, 3, 10), uint32],) */;
    %328 = %327.0;
    %329 = cast(%328, dtype="uint32") /* ty=Tensor[(2, 3, 10), uint32] */;
    %330 = cast(%var_4829, dtype="float64") /* ty=float64 */;
    %331 = cast(%var_4830, dtype="float64") /* ty=Tensor[(468), float64] */;
    %332 = reshape(%329, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
    %333 = reshape(%330, newshape=[]) /* ty=float64 */;
    %334 = reshape(%331, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %335 = @func_4490(%332, %333, %334) /* ty=(Tensor[(2, 3, 10), bool], float64, Tensor[(468), float64], Tensor[(1000), float64]) */;
    %336 = %335.1;
    (%328, %336, %var_4829, %var_4830)
  };
  %337(%var_4853, %var_4854) /* ty=(Tensor[(2, 3, 10), uint32], float64, float64, Tensor[(468), float64]) */
}

def @func_13669() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %338 = @func_12160() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %339 = @func_12349() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) */;
  %340 = @func_1377() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %341 = %338.0;
  %342 = %339.2;
  %343 = %340.0;
  (%341, %342, %343)
}

def @func_14023(%var_13962: Tensor[(11, 6, 4), float32], %var_13973: Tensor[(108), float64], %var_13983: Tensor[(2, 104), float32], %var_13991: Tensor[(2, 104), float32]) -> (Tensor[(11, 6, 4), float32], Tensor[(12, 3, 14), uint16], Tensor[(108), float64], Tensor[(12, 3, 14), uint16], Tensor[(2, 104), int16]) {
  %344 = cast(%var_13962, dtype="float32") /* ty=Tensor[(11, 6, 4), float32] */;
  %345 = cast(%var_13973, dtype="float64") /* ty=Tensor[(108), float64] */;
  %346 = reshape(%345, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %347 = @func_10139(%346) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(12, 3, 14), uint16]) */;
  %348 = cast(%var_13983, dtype="float32") /* ty=Tensor[(2, 104), float32] */;
  %349 = cast(%var_13983, dtype="float32") /* ty=Tensor[(2, 104), float32] */;
  %350 = reshape(%348, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %351 = reshape(%349, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), float32] */;
  %352 = @func_12925(%350, %351) /* ty=(Tensor[(60), bool], Tensor[(12, 3, 14), uint16], Tensor[(?, 13, 16), int64]) */;
  %353 = cast(%var_13991, dtype="int16") /* ty=Tensor[(2, 104), int16] */;
  %354 = shape_of(%var_13983, dtype="int32") /* ty=Tensor[(2), int32] */;
  %355 = cast(%var_13983, dtype="int16") /* ty=Tensor[(2, 104), int16] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %357 = sigmoid(%344) /* ty=Tensor[(11, 6, 4), float32] */;
  %358 = %347.1;
  %359 = %352.1;
  %360 = add(%355, %356) /* ty=Tensor[(2, 104), int16] */;
  (%357, %358, %var_13973, %359, %360)
}

def @func_2884() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) {
  @func_2882() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */
}

def @func_3403(%var_3401: float64, %var_3402: Tensor[(60), bool]) -> (Tensor[(12, 3, 14), float32], Tensor[(468), float64], float64, Tensor[(60), bool]) {
  @func_3399(%var_3401, %var_3402) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(468), float64], float64, Tensor[(60), bool]) */
}

def @func_7762() -> Tensor[(2, 3, 10), uint32] {
  %362 = fn () -> Tensor[(2, 3, 10), uint32] {
    %361 = @func_4665() /* ty=(Tensor[(2, 3, 10), uint32],) */;
    %361.0
  };
  %362() /* ty=Tensor[(2, 3, 10), uint32] */
}

def @func_9211() -> (Tensor[(12, 3, 14), float32], uint8) {
  @func_9209() /* ty=(Tensor[(12, 3, 14), float32], uint8) */
}

def @func_15288() -> Tensor[(12, 3, 14), uint16] {
  @func_12750() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_3602() -> (Tensor[(9, 2, 3), bool],) {
  %365 = fn () -> (Tensor[(9, 2, 3), bool],) {
    %363 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
    %364 = %363.8;
    (%364,)
  };
  %365() /* ty=(Tensor[(9, 2, 3), bool],) */
}

def @func_6837(%var_6835: Tensor[(1000), float32]) -> (Tensor[(2, 3, 10), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], float64, float64, Tensor[(468, 1000), bool], Tensor[(12, 3, 14), uint16]) {
  @func_6834(%var_6835) /* ty=(Tensor[(2, 3, 10), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], float64, float64, Tensor[(468, 1000), bool], Tensor[(12, 3, 14), uint16]) */
}

def @func_11385() -> Tensor[(12, 3, 14), float32] {
  %366 = @func_5679() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %366.0
}

def @func_8402(%var_8400: Tensor[(1000), float64], %var_8401: Tensor[(2, 3, 10), uint32]) -> (Tensor[(9, 13, 5), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64], Tensor[(2, 3, 10), int64]) {
  @func_8398(%var_8400, %var_8401) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64], Tensor[(2, 3, 10), int64]) */
}

def @func_11494() -> (Tensor[(1000), float32],) {
  @func_11492() /* ty=(Tensor[(1000), float32],) */
}

def @func_2585(%var_2584: uint8) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], uint8, Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %382 = fn (%var_2532: uint8) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], uint8, Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
    %367 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %368 = cast(%var_2532, dtype="uint8") /* ty=uint8 */;
    %369 = reshape(%368, newshape=[]) /* ty=uint8 */;
    %370 = @func_2245(%369) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], Tensor[(9, 2, 3), bool], uint8) */;
    %371 = %370.3;
    %372 = cast(%371, dtype="float64") /* ty=Tensor[(468), float64] */;
    %373 = reshape(%372, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %374 = @func_1817(%373) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 13), float64], float64, Tensor[(468), float64], Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16]) */;
    %375 = @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */;
    %376 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
    %377 = %367.0;
    %378 = @func_1135() /* ty=Tensor[(12, 3, 14), uint16] */;
    %379 = %374.4;
    %380 = %375.0;
    %381 = %376.0;
    (%377, %378, %371, %var_2532, %379, %380, %381)
  };
  %382(%var_2584) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], uint8, Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_8581() -> Tensor[(1000), float32] {
  @func_8579() /* ty=Tensor[(1000), float32] */
}

def @func_6935() -> Tensor[(15, 13, 5), float64] {
  %384 = fn () -> Tensor[(15, 13, 5), float64] {
    %383 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 13, 5), float64] */, dtype="float64") /* ty=Tensor[(15, 13, 5), float64] */;
    erf(%383) /* ty=Tensor[(15, 13, 5), float64] */
  };
  %384() /* ty=Tensor[(15, 13, 5), float64] */
}

def @func_5751(%var_5749: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64]) {
  %385 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %386 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %387 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %388 = %385.0;
  %389 = cast(%388, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %390 = reshape(%389, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
  %391 = @func_3861(%390) /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %392 = cast(%var_5749, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %393 = reshape(%392, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %394 = @func_2810(%393) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64], Tensor[(12, 3, 14), float32]) */;
  %395 = %386.0;
  %396 = %387.0;
  %397 = %391.0;
  %398 = %394.1;
  (%388, %395, %396, %397, %398, %var_5749)
}

def @func_1010() -> (Tensor[(12, 3, 14), uint16],) {
  @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_12752() -> Tensor[(12, 3, 14), uint16] {
  @func_12750() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_5531() -> (Tensor[(12, 3, 14), uint16],) {
  %401 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %399 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %400 = %399.0;
    (%400,)
  };
  %401() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @main(%var_15461: float64, %var_15462: Tensor[(15, 1, 8), float64]) -> (Tensor[(15, 1, 8), float64], Tensor[(15, 1, 8), float32]) {
  %402 = cast(%var_15461, dtype="float64") /* ty=float64 */;
  %403 = cast(%var_15462, dtype="float64") /* ty=Tensor[(15, 1, 8), float64] */;
  %404 = cast(%var_15462, dtype="float32") /* ty=Tensor[(15, 1, 8), float32] */;
  %405 = divide(%402, %403) /* ty=Tensor[(15, 1, 8), float64] */;
  %406 = log(%404) /* ty=Tensor[(15, 1, 8), float32] */;
  (%405, %406)
}

def @func_12048() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  @func_12046() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_7226(%var_7224: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(1000), float32]) {
  @func_7223(%var_7224) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(1000), float32]) */
}

def @func_3796() -> (Tensor[(12, 3, 14), uint16],) {
  %407 = @func_3110() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %408 = %407.1;
  (%408,)
}

def @func_3947() -> (Tensor[(7, 14, 15), float32], Tensor[(2, 3, 10), uint32], float64) {
  %409 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 14, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 15), float32] */;
  %410 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %411 = cast(%410, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %412 = reshape(%411, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %413 = @func_3726(%412) /* ty=(Tensor[(12, 3, 14), bool], Tensor[(12, 3, 14), float64], Tensor[(1000), float64], float64, float64, Tensor[(30, 2), bool]) */;
  %414 = acos(%409) /* ty=Tensor[(7, 14, 15), float32] */;
  %415 = %413.3;
  (%414, %410, %415)
}

def @func_2248(%var_2246: uint8) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], Tensor[(9, 2, 3), bool], uint8) {
  @func_2245(%var_2246) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], Tensor[(9, 2, 3), bool], uint8) */
}

def @func_13086(%var_13084: Tensor[(364), uint16]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(26, 2), uint16], Tensor[(12, 3, 14), uint16], Tensor[(4, 13, 7), int8], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) {
  @func_13083(%var_13084) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(26, 2), uint16], Tensor[(12, 3, 14), uint16], Tensor[(4, 13, 7), int8], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */
}

def @func_9735() -> Tensor[(12, 3, 14), uint16] {
  %416 = @func_3504() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %416.1
}

def @func_11044() -> Tensor[(12, 3, 14), float32] {
  %417 = fn () -> Tensor[(12, 3, 14), float32] {
    @func_5810() /* ty=Tensor[(12, 3, 14), float32] */
  };
  %417() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_14988() -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), uint32]) {
  %424 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), uint32]) {
    %418 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %419 = @func_5200() /* ty=(Tensor[(2, 3, 10), uint32],) */;
    %420 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
    %421 = %418.0;
    %422 = %419.0;
    %423 = %420.0;
    (%421, %422, %423)
  };
  %424() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), uint32]) */
}

def @func_5522() -> (Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %425 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %426 = @func_5200() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %427 = @func_5060() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %428 = %425.0;
  %429 = %426.0;
  %430 = @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */;
  %431 = %427.0;
  (%428, %429, %430, %431)
}

def @func_14832(%var_14831: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64]) {
  %437 = fn (%var_14805: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64]) {
    %432 = cast(%var_14805, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %433 = reshape(%432, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
    %434 = @func_13302(%433) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(15, 4), bool], Tensor[(1000), float64]) */;
    %435 = @func_9026() /* ty=Tensor[(12, 3, 14), uint16] */;
    %436 = %434.1;
    (%435, %436, %var_14805)
  };
  %437(%var_14831) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64]) */
}

def @func_15335() -> (Tensor[(2, 3, 10), uint32],) {
  %440 = fn () -> (Tensor[(2, 3, 10), uint32],) {
    %438 = @func_13414() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) */;
    %439 = %438.0;
    (%439,)
  };
  %440() /* ty=(Tensor[(2, 3, 10), uint32],) */
}

def @func_13715() -> Tensor[(2, 3, 10), uint32] {
  @func_13713() /* ty=Tensor[(2, 3, 10), uint32] */
}

def @func_3470(%var_3468: Tensor[(396), float32]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float64], Tensor[(12, 3, 14), uint16]) {
  @func_3467(%var_3468) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float64], Tensor[(12, 3, 14), uint16]) */
}

def @func_8452(%var_8450: Tensor[(60), uint32], %var_8451: Tensor[(234, 2), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), uint32], float64, Tensor[(234, 2), float32]) {
  %452 = fn (%var_8438: Tensor[(60), uint32], %var_8440: Tensor[(234, 2), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), uint32], float64, Tensor[(234, 2), float32]) {
    %441 = cast(%var_8438, dtype="uint32") /* ty=Tensor[(60), uint32] */;
    %442 = cast(3.59727f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %443 = cast(%var_8440, dtype="float64") /* ty=Tensor[(234, 2), float64] */;
    %444 = reshape(%441, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
    %445 = reshape(%442, newshape=[]) /* ty=float64 */;
    %446 = reshape(%443, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %447 = @func_4490(%444, %445, %446) /* ty=(Tensor[(2, 3, 10), bool], float64, Tensor[(468), float64], Tensor[(1000), float64]) */;
    %448 = cast(%var_8440, dtype="float32") /* ty=Tensor[(234, 2), float32] */;
    %449 = @func_8296() /* ty=Tensor[(12, 3, 14), uint16] */;
    %450 = %447.2;
    %451 = acosh(%448) /* ty=Tensor[(234, 2), float32] */;
    (%449, %450, %var_8438, 3.59727f64 /* ty=float64 */, %451)
  };
  %452(%var_8450, %var_8451) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), uint32], float64, Tensor[(234, 2), float32]) */
}

def @func_12349() -> (Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) {
  %453 = @func_10942() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %454 = @func_8148() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) */;
  %455 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %456 = %453.0;
  %457 = %454.1;
  %458 = %455.0;
  (%456, %457, %458)
}

def @func_6834(%var_6770: Tensor[(1000), float32]) -> (Tensor[(2, 3, 10), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], float64, float64, Tensor[(468, 1000), bool], Tensor[(12, 3, 14), uint16]) {
  %459 = @func_5386() /* ty=(Tensor[(2, 3, 10), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), bool]) */;
  %460 = @func_5648() /* ty=(Tensor[(1000), float32],) */;
  %461 = %460.0;
  %462 = cast(%var_6770, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(1), int32] */;
  %464 = cast(%461, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?), float64] */;
  %466 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %467 = %459.3;
  %468 = cast(%467, dtype="uint32") /* ty=Tensor[(2, 3, 10), uint32] */;
  %469 = cast(-4.78871f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %470 = cast(meta[relay.Constant][17] /* ty=Tensor[(468, 1), float64] */, dtype="float64") /* ty=Tensor[(468, 1), float64] */;
  %471 = reshape(%468, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
  %472 = reshape(%469, newshape=[]) /* ty=float64 */;
  %473 = reshape(%470, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %474 = @func_4490(%471, %472, %473) /* ty=(Tensor[(2, 3, 10), bool], float64, Tensor[(468), float64], Tensor[(1000), float64]) */;
  %475 = cast(%var_6770, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %476 = asin(%475) /* ty=Tensor[(1000), float64] */;
  %477 = cast(%476, dtype="bool") /* ty=Tensor[(1000), bool] */;
  %478 = cast(meta[relay.Constant][17] /* ty=Tensor[(468, 1), float64] */, dtype="bool") /* ty=Tensor[(468, 1), bool] */;
  %479 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %480 = power(%464, %465) /* ty=Tensor[(1000), float64] */;
  %481 = @func_3959() /* ty=Tensor[(12, 3, 14), float32] */;
  %482 = %466.0;
  %483 = %474.1;
  %484 = not_equal(%477, %478) /* ty=Tensor[(468, 1000), bool] */;
  %485 = %479.0;
  (%467, %480, %481, %482, %483, -4.78871f64 /* ty=float64 */, %484, %485)
}

def @func_14078(%var_14076: float64) -> (Tensor[(12, 3, 14), uint16], float64, float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(2, 16, 14), bool], Tensor[(448), uint32]) {
  @func_14075(%var_14076) /* ty=(Tensor[(12, 3, 14), uint16], float64, float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(2, 16, 14), bool], Tensor[(448), uint32]) */
}

def @func_10141(%var_10140: Tensor[(4, 3, 9), float64]) -> (Tensor[(4, 3, 9), float64], Tensor[(12, 3, 14), uint16]) {
  %490 = fn (%var_10107: Tensor[(4, 3, 9), float64]) -> (Tensor[(4, 3, 9), float64], Tensor[(12, 3, 14), uint16]) {
    %486 = cast(%var_10107, dtype="float64") /* ty=Tensor[(4, 3, 9), float64] */;
    %487 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %488 = cos(%486) /* ty=Tensor[(4, 3, 9), float64] */;
    %489 = %487.0;
    (%488, %489)
  };
  %490(%var_10140) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(12, 3, 14), uint16]) */
}

def @func_1820(%var_1818: Tensor[(468), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 13), float64], float64, Tensor[(468), float64], Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16]) {
  @func_1817(%var_1818) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 13), float64], float64, Tensor[(468), float64], Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16]) */
}

def @func_12679(%var_12676: Tensor[(308), float64], %var_12677: uint8, %var_12678: Tensor[(22), uint8]) -> (Tensor[(12, 3, 14), uint16], Tensor[(14, 2, 11), float64], Tensor[(308), float64], Tensor[(2, ?, 11), uint16], uint8, Tensor[(22), uint8]) {
  %502 = fn (%var_12660: Tensor[(308), float64], %var_12664: uint8, %var_12665: Tensor[(22), uint8]) -> (Tensor[(12, 3, 14), uint16], Tensor[(14, 2, 11), float64], Tensor[(308), float64], Tensor[(2, ?, 11), uint16], uint8, Tensor[(22), uint8]) {
    %491 = @func_5386() /* ty=(Tensor[(2, 3, 10), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), bool]) */;
    %492 = cast(%var_12660, dtype="float64") /* ty=Tensor[(308), float64] */;
    %493 = reshape(%492, newshape=[14, 2, 11]) /* ty=Tensor[(14, 2, 11), float64] */;
    %494 = cast(%var_12664, dtype="uint8") /* ty=uint8 */;
    %495 = cast(%var_12665, dtype="uint8") /* ty=Tensor[(22), uint8] */;
    %496 = reshape(%494, newshape=[]) /* ty=uint8 */;
    %497 = reshape(%495, newshape=[2, 1, 11]) /* ty=Tensor[(2, 1, 11), uint8] */;
    %498 = @func_10383(%496, %497) /* ty=(Tensor[(2, ?, 11), uint16], Tensor[(2, 3, 10), uint32]) */;
    %499 = %491.2;
    %500 = @func_10775(%493) /* ty=Tensor[(14, 2, 11), float64] */;
    %501 = %498.0;
    (%499, %500, %var_12660, %501, %var_12664, %var_12665)
  };
  %502(%var_12676, %var_12677, %var_12678) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(14, 2, 11), float64], Tensor[(308), float64], Tensor[(2, ?, 11), uint16], uint8, Tensor[(22), uint8]) */
}

def @func_12581(%var_12579: Tensor[(8, 8, 11), float32]) -> (Tensor[(8, 8, 11), float32], Tensor[(8, 8, 11), float32]) {
  @func_12578(%var_12579) /* ty=(Tensor[(8, 8, 11), float32], Tensor[(8, 8, 11), float32]) */
}

def @func_12750() -> Tensor[(12, 3, 14), uint16] {
  @func_3019() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_13699() -> (Tensor[(12, 3, 14), uint16],) {
  @func_13697() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_673() -> (Tensor[(12, 3, 14), uint16],) {
  @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_13863() -> Tensor[(12, 3, 14), uint16] {
  @func_13861() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_8937() -> (Tensor[(1000), float64],) {
  @func_8935() /* ty=(Tensor[(1000), float64],) */
}

def @func_12286() -> (Tensor[(12, 3, 14), uint16], Tensor[(15, 13, 5), float64]) {
  %506 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(15, 13, 5), float64]) {
    %503 = @func_3323() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %504 = %503.0;
    %505 = @func_8854() /* ty=Tensor[(15, 13, 5), float64] */;
    (%504, %505)
  };
  %506() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(15, 13, 5), float64]) */
}

def @func_9410() -> (Tensor[(15, 13, 5), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %511 = fn () -> (Tensor[(15, 13, 5), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
    %507 = @func_7723() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %508 = @func_8854() /* ty=Tensor[(15, 13, 5), float64] */;
    %509 = %507.3;
    %510 = @func_1653() /* ty=Tensor[(12, 3, 14), uint16] */;
    (%508, %509, %510)
  };
  %511() /* ty=(Tensor[(15, 13, 5), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_12928(%var_12926: Tensor[(1, 13, 16), float32], %var_12927: Tensor[(1, 13, 16), float32]) -> (Tensor[(60), bool], Tensor[(12, 3, 14), uint16], Tensor[(?, 13, 16), int64]) {
  %522 = fn (%var_12891: Tensor[(1, 13, 16), float32], %var_12916: Tensor[(1, 13, 16), float32]) -> (Tensor[(60), bool], Tensor[(12, 3, 14), uint16], Tensor[(?, 13, 16), int64]) {
    %512 = @func_12482() /* ty=(Tensor[(60), bool],) */;
    %513 = cast(%var_12891, dtype="float32") /* ty=Tensor[(1, 13, 16), float32] */;
    %514 = atanh(%513) /* ty=Tensor[(1, 13, 16), float32] */;
    %515 = cast(%var_12916, dtype="int64") /* ty=Tensor[(1, 13, 16), int64] */;
    %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
    %517 = cast(%514, dtype="int64") /* ty=Tensor[(1, 13, 16), int64] */;
    %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %519 = %512.0;
    %520 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
    %521 = logical_xor(%517, %518) /* ty=Tensor[(?, 13, 16), int64] */;
    (%519, %520, %521)
  };
  %522(%var_12926, %var_12927) /* ty=(Tensor[(60), bool], Tensor[(12, 3, 14), uint16], Tensor[(?, 13, 16), int64]) */
}

def @func_13537() -> (Tensor[(12, 3, 14), uint16],) {
  @func_13535() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_8909() -> (Tensor[(12, 3, 14), uint16],) {
  %525 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %523 = @func_2383() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
    %524 = %523.0;
    (%524,)
  };
  %525() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_5172() -> (Tensor[(12, 3, 14), uint16],) {
  %528 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %526 = @func_4887() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %527 = %526.2;
    (%527,)
  };
  %528() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_11777() -> Tensor[(12, 3, 14), uint16] {
  @func_11775() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_14029(%var_14025: Tensor[(11, 6, 4), float32], %var_14026: Tensor[(108), float64], %var_14027: Tensor[(2, 104), float32], %var_14028: Tensor[(2, 104), float32]) -> (Tensor[(11, 6, 4), float32], Tensor[(12, 3, 14), uint16], Tensor[(108), float64], Tensor[(12, 3, 14), uint16], Tensor[(2, 104), int16]) {
  @func_14023(%var_14025, %var_14026, %var_14027, %var_14028) /* ty=(Tensor[(11, 6, 4), float32], Tensor[(12, 3, 14), uint16], Tensor[(108), float64], Tensor[(12, 3, 14), uint16], Tensor[(2, 104), int16]) */
}

def @func_15305() -> Tensor[(12, 3, 14), uint16] {
  %529 = @func_9092() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(30, 2), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %529.2
}

def @func_7342() -> (Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), bool]) {
  %530 = @func_3601() /* ty=(Tensor[(9, 2, 3), bool],) */;
  %531 = @func_3959() /* ty=Tensor[(12, 3, 14), float32] */;
  %532 = cast(%531, dtype="uint16") /* ty=Tensor[(12, 3, 14), uint16] */;
  %533 = reshape(%532, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), uint16] */;
  %534 = @func_4692(%533) /* ty=(Tensor[(12, 3, 14), bool],) */;
  %535 = %530.0;
  %536 = %534.0;
  (%531, %535, %536)
}

def @func_3337(%var_3336: Tensor[(11, 4, 9), float32]) -> (Tensor[(11, 4, 9), float32],) {
  %542 = fn (%var_3330: Tensor[(11, 4, 9), float32]) -> (Tensor[(11, 4, 9), float32],) {
    %537 = cast(%var_3330, dtype="float32") /* ty=Tensor[(11, 4, 9), float32] */;
    %538 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(11, 4, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %539 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 4, 9), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 9), float32] */;
    %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %541 = power(%539, %540) /* ty=Tensor[(11, 4, 9), float32] */;
    (%541,)
  };
  %542(%var_3336) /* ty=(Tensor[(11, 4, 9), float32],) */
}

def @func_2471() -> (Tensor[(1000), float64],) {
  @func_2469() /* ty=(Tensor[(1000), float64],) */
}

def @func_9818() -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32]) {
  %547 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32]) {
    %543 = @func_9437() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 13, 5), float32], Tensor[(1000), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16]) */;
    %544 = @func_5200() /* ty=(Tensor[(2, 3, 10), uint32],) */;
    %545 = %543.0;
    %546 = %544.0;
    (%545, %546)
  };
  %547() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32]) */
}

def @func_10858() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(1000), float64], Tensor[(2, 3, 10), uint32]) {
  %548 = @func_1683() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %549 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %550 = cast(%549, dtype="uint32") /* ty=Tensor[(2, 3, 10), uint32] */;
  %551 = reshape(%550, newshape=[60]) /* ty=Tensor[(60), uint32] */;
  %552 = @func_10254(%551) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(60), uint32], Tensor[(12, 3, 14), float32]) */;
  %553 = @func_7723() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %554 = %548.0;
  %555 = %552.0;
  %556 = @func_3997() /* ty=Tensor[(1000), float64] */;
  %557 = %553.0;
  (%549, %554, %555, %556, %557)
}

def @func_14636(%var_14594: Tensor[(63, 9), int16], %var_14629: float64, %var_14630: Tensor[(468), float64]) -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(2, 500), float64], Tensor[(63, 9), float32], Tensor[(468), float64], float64, Tensor[(468), float64]) {
  %558 = cast(%var_14594, dtype="int16") /* ty=Tensor[(63, 9), int16] */;
  %559 = cast(%var_14594, dtype="int16") /* ty=Tensor[(63, 9), int16] */;
  %560 = reshape(%558, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int16] */;
  %561 = reshape(%559, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int16] */;
  %562 = @func_5906(%560, %561) /* ty=(Tensor[(7, 9, 9), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %563 = @func_6670() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(1000), bool]) */;
  %564 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 500), float64] */, dtype="float64") /* ty=Tensor[(2, 500), float64] */;
  %565 = reshape(%564, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %566 = @func_2810(%565) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64], Tensor[(12, 3, 14), float32]) */;
  %567 = cast(meta[relay.Constant][20] /* ty=Tensor[(63, 9), int16] */, dtype="float32") /* ty=Tensor[(63, 9), float32] */;
  %568 = shape_of(%var_14594, dtype="int32") /* ty=Tensor[(2), int32] */;
  %569 = cast(%var_14594, dtype="float32") /* ty=Tensor[(63, 9), float32] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %571 = cast(%var_14629, dtype="float64") /* ty=float64 */;
  %572 = cast(%var_14630, dtype="float64") /* ty=Tensor[(468), float64] */;
  %573 = reshape(%571, newshape=[]) /* ty=float64 */;
  %574 = reshape(%572, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %575 = @func_4852(%573, %574) /* ty=(Tensor[(2, 3, 10), uint32], float64, float64, Tensor[(468), float64]) */;
  %576 = @func_11043() /* ty=Tensor[(12, 3, 14), float32] */;
  %577 = %562.3;
  %578 = %563.0;
  %579 = %566.1;
  %580 = power(%569, %570) /* ty=Tensor[(63, 9), float32] */;
  %581 = %575.3;
  (%576, %577, %578, %579, meta[relay.Constant][19] /* ty=Tensor[(2, 500), float64] */, %580, %581, %var_14629, %var_14630)
}

def @func_14075(%var_14046: float64) -> (Tensor[(12, 3, 14), uint16], float64, float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(2, 16, 14), bool], Tensor[(448), uint32]) {
  %582 = @func_10329() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float32], Tensor[(396), float32]) */;
  %583 = cast(%var_14046, dtype="float64") /* ty=float64 */;
  %584 = cast(meta[relay.Constant][21] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %585 = reshape(%583, newshape=[]) /* ty=float64 */;
  %586 = reshape(%584, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %587 = @func_3399(%585, %586) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(468), float64], float64, Tensor[(60), bool]) */;
  %588 = @func_5060() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %589 = cast(meta[relay.Constant][22] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %590 = reshape(%589, newshape=[2, 16, 14]) /* ty=Tensor[(2, 16, 14), uint32] */;
  %591 = @func_10680(%590) /* ty=(Tensor[(2, 16, 14), bool], Tensor[(12, 3, 14), float32]) */;
  %592 = %582.0;
  %593 = %587.2;
  %594 = %588.0;
  %595 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %596 = %591.0;
  (%592, %593, %var_14046, meta[relay.Constant][21] /* ty=Tensor[(60), bool] */, %594, %595, %596, meta[relay.Constant][22] /* ty=Tensor[(448), uint32] */)
}

def @func_5387() -> (Tensor[(2, 3, 10), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), bool]) {
  %615 = fn () -> (Tensor[(2, 3, 10), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), bool]) {
    %597 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
    %598 = %597.0;
    %599 = cast(%598, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
    %600 = cast(%598, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
    %601 = cast(%598, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
    %602 = reshape(%600, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
    %603 = reshape(%601, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
    %604 = @func_237(%602, %603) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
    %605 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %606 = cast(%598, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
    %607 = atanh(%599) /* ty=Tensor[(2, 3, 10), float32] */;
    %608 = cast(%607, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
    %609 = reshape(%606, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
    %610 = reshape(%608, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
    %611 = @func_237(%609, %610) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
    %612 = %604.0;
    %613 = %605.0;
    %614 = %611.1;
    (%607, %612, %613, %614)
  };
  %615() /* ty=(Tensor[(2, 3, 10), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), bool]) */
}

def @func_8320() -> Tensor[(1000), float64] {
  @func_3997() /* ty=Tensor[(1000), float64] */
}

def @func_12299() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %618 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
    %616 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
    %617 = @func_1135() /* ty=Tensor[(12, 3, 14), uint16] */;
    (%616, %617)
  };
  %618() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_14655(%var_14653: float64) -> (Tensor[(1000), float32], Tensor[(12, 3, 14), uint16], float64) {
  %619 = cast(%var_14653, dtype="float64") /* ty=float64 */;
  %620 = reshape(%619, newshape=[]) /* ty=float64 */;
  %621 = @func_14075(%620) /* ty=(Tensor[(12, 3, 14), uint16], float64, float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(2, 16, 14), bool], Tensor[(448), uint32]) */;
  %622 = @func_3208() /* ty=Tensor[(1000), float32] */;
  %623 = %621.4;
  (%622, %623, %var_14653)
}

def @func_8095() -> (Tensor[(12, 3, 14), uint16],) {
  %626 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %624 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %625 = %624.0;
    (%625,)
  };
  %626() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_15154() -> Tensor[(9, 2, 3), bool] {
  %628 = fn () -> Tensor[(9, 2, 3), bool] {
    %627 = @func_3601() /* ty=(Tensor[(9, 2, 3), bool],) */;
    %627.0
  };
  %628() /* ty=Tensor[(9, 2, 3), bool] */
}

def @func_1098(%var_1095: float64, %var_1096: Tensor[(12, 3, 13), float64], %var_1097: Tensor[(60), bool]) -> (Tensor[(12, 3, 13), float64], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(15, 4), bool], Tensor[(1000), float64]) {
  @func_1093(%var_1095, %var_1096, %var_1097) /* ty=(Tensor[(12, 3, 13), float64], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(15, 4), bool], Tensor[(1000), float64]) */
}

def @func_437(%var_435: uint8) -> (Tensor[(9, 2, 3), bool],) {
  @func_434(%var_435) /* ty=(Tensor[(9, 2, 3), bool],) */
}

def @func_13934() -> Tensor[(12, 3, 14), uint16] {
  %629 = fn () -> Tensor[(12, 3, 14), uint16] {
    @func_10798() /* ty=Tensor[(12, 3, 14), uint16] */
  };
  %629() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_1008() -> (Tensor[(12, 3, 14), uint16],) {
  %630 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %631 = %630.0;
  (%631,)
}

def @func_2037(%var_2034: Tensor[(468), float64], %var_2035: float64, %var_2036: Tensor[(60), bool]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), bool], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) {
  @func_2032(%var_2034, %var_2035, %var_2036) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), bool], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) */
}

def @func_10943() -> (Tensor[(12, 3, 14), uint16],) {
  %634 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %632 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %633 = %632.0;
    (%633,)
  };
  %634() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_1530() -> Tensor[(12, 3, 14), float32] {
  @func_1528() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_10860() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(1000), float64], Tensor[(2, 3, 10), uint32]) {
  @func_10858() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(1000), float64], Tensor[(2, 3, 10), uint32]) */
}

def @func_9294() -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) {
  %637 = fn () -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) {
    %635 = @func_6914() /* ty=Tensor[(12, 3, 14), float32] */;
    %636 = @func_9026() /* ty=Tensor[(12, 3, 14), uint16] */;
    (%635, %636)
  };
  %637() /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */
}

def @func_12578(%var_12565: Tensor[(8, 8, 11), float32]) -> (Tensor[(8, 8, 11), float32], Tensor[(8, 8, 11), float32]) {
  %638 = cast(%var_12565, dtype="float32") /* ty=Tensor[(8, 8, 11), float32] */;
  %639 = cast(%var_12565, dtype="float32") /* ty=Tensor[(8, 8, 11), float32] */;
  %640 = exp(%638) /* ty=Tensor[(8, 8, 11), float32] */;
  %641 = acosh(%639) /* ty=Tensor[(8, 8, 11), float32] */;
  (%640, %641)
}

def @func_2174(%var_2173: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) {
  %661 = fn (%var_2141: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) {
    %642 = cast(meta[relay.Constant][23] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %643 = reshape(%642, newshape=[]) /* ty=uint8 */;
    %644 = @func_721(%643) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) */;
    %645 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %646 = %645.0;
    %647 = cast(meta[relay.Constant][23] /* ty=uint8 */, dtype="float64") /* ty=float64 */;
    %648 = cast(%646, dtype="float64") /* ty=Tensor[(12, 3, 14), float64] */;
    %649 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
    %650 = cast(%var_2141, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %651 = cast(%var_2141, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %652 = reshape(%650, newshape=[20, 50]) /* ty=Tensor[(20, 50), float64] */;
    %653 = reshape(%651, newshape=[10, 10, 10]) /* ty=Tensor[(10, 10, 10), float64] */;
    %654 = @func_1852(%652, %653) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(20, 50), float64], Tensor[(10, 10, 10), bool], Tensor[(12, 3, 14), uint16]) */;
    %655 = cast(%var_2141, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %656 = %644.0;
    %657 = power(%647, %648) /* ty=Tensor[(12, 3, 14), float64] */;
    %658 = %649.1;
    %659 = %654.0;
    %660 = rsqrt(%655) /* ty=Tensor[(1000), float64] */;
    (%656, %657, %658, %659, %660)
  };
  %661(%var_2173) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) */
}

def @func_935() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) {
  %662 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %663 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %664 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %665 = %664.0;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(12, 3, 14), float64] */;
  %667 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %668 = %662.0;
  %669 = %663.0;
  %670 = sigmoid(%666) /* ty=Tensor[(12, 3, 14), float64] */;
  %671 = %667.0;
  (%668, %669, %670, %671)
}

def @func_1135() -> Tensor[(12, 3, 14), uint16] {
  %672 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %672.0
}

def @func_10165(%var_10164: Tensor[(4, 9, 9), float32]) -> (Tensor[(4, 9, 9), float32],) {
  %675 = fn (%var_10158: Tensor[(4, 9, 9), float32]) -> (Tensor[(4, 9, 9), float32],) {
    %673 = cast(%var_10158, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
    %674 = sinh(%673) /* ty=Tensor[(4, 9, 9), float32] */;
    (%674,)
  };
  %675(%var_10164) /* ty=(Tensor[(4, 9, 9), float32],) */
}

def @func_8250(%var_8248: Tensor[(2, 3, 10), uint32]) -> (Tensor[(2, 3, 10), int8],) {
  @func_8247(%var_8248) /* ty=(Tensor[(2, 3, 10), int8],) */
}

def @func_1684() -> (Tensor[(12, 3, 14), uint16],) {
  %678 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %676 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %677 = %676.0;
    (%677,)
  };
  %678() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_10386(%var_10384: uint8, %var_10385: Tensor[(2, 1, 11), uint8]) -> (Tensor[(2, ?, 11), uint16], Tensor[(2, 3, 10), uint32]) {
  %692 = fn (%var_10342: uint8, %var_10343: Tensor[(2, 1, 11), uint8]) -> (Tensor[(2, ?, 11), uint16], Tensor[(2, 3, 10), uint32]) {
    %679 = cast(%var_10342, dtype="uint8") /* ty=uint8 */;
    %680 = cast(%var_10343, dtype="uint8") /* ty=Tensor[(2, 1, 11), uint8] */;
    %681 = logical_xor(%679, %680) /* ty=Tensor[(2, 1, 11), uint8] */;
    %682 = cast(%681, dtype="uint8") /* ty=Tensor[(2, 1, 11), uint8] */;
    %683 = cast(%var_10342, dtype="uint8") /* ty=uint8 */;
    %684 = multiply(%682, %683) /* ty=Tensor[(2, 1, 11), uint8] */;
    %685 = cast(%681, dtype="uint16") /* ty=Tensor[(2, 1, 11), uint16] */;
    %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
    %687 = cast(%684, dtype="uint16") /* ty=Tensor[(2, 1, 11), uint16] */;
    %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %689 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
    %690 = right_shift(%687, %688) /* ty=Tensor[(2, ?, 11), uint16] */;
    %691 = %689.6;
    (%690, %691)
  };
  %692(%var_10384, %var_10385) /* ty=(Tensor[(2, ?, 11), uint16], Tensor[(2, 3, 10), uint32]) */
}

def @func_5245() -> (Tensor[(12, 3, 14), float32],) {
  %694 = fn () -> (Tensor[(12, 3, 14), float32],) {
    %693 = @func_3959() /* ty=Tensor[(12, 3, 14), float32] */;
    (%693,)
  };
  %694() /* ty=(Tensor[(12, 3, 14), float32],) */
}

def @func_15074() -> Tensor[(12, 3, 14), uint16] {
  @func_12145() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_9094() -> (Tensor[(12, 3, 14), uint16], Tensor[(30, 2), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  @func_9092() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(30, 2), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_9167(%var_9166: uint8) -> (Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16]) {
  %702 = fn (%var_9155: uint8) -> (Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16]) {
    %695 = @func_5679() /* ty=(Tensor[(12, 3, 14), float32],) */;
    %696 = cast(%var_9155, dtype="uint8") /* ty=uint8 */;
    %697 = reshape(%696, newshape=[]) /* ty=uint8 */;
    %698 = @func_434(%697) /* ty=(Tensor[(9, 2, 3), bool],) */;
    %699 = %695.0;
    %700 = %698.0;
    %701 = @func_7115() /* ty=Tensor[(12, 3, 14), uint16] */;
    (%699, %700, %var_9155, %701)
  };
  %702(%var_9166) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16]) */
}

def @func_9437() -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 13, 5), float32], Tensor[(1000), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16]) {
  %703 = cast(meta[relay.Constant][24] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %704 = cast(meta[relay.Constant][25] /* ty=Tensor[(60), uint32] */, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %705 = reshape(%703, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %706 = reshape(%704, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
  %707 = @func_8398(%705, %706) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64], Tensor[(2, 3, 10), int64]) */;
  %708 = @func_4646() /* ty=Tensor[(12, 3, 14), uint16] */;
  %709 = %707.0;
  %710 = @func_8360() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%708, %709, meta[relay.Constant][24] /* ty=Tensor[(1000), float64] */, meta[relay.Constant][25] /* ty=Tensor[(60), uint32] */, %710)
}

def @func_9620() -> (Tensor[(12, 3, 14), uint16],) {
  %712 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %711 = @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */;
    (%711,)
  };
  %712() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_13535() -> (Tensor[(12, 3, 14), uint16],) {
  %713 = @func_4887() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %714 = %713.1;
  (%714,)
}

def @func_3863(%var_3862: Tensor[(12, 3, 14), float32]) -> (Tensor[(12, 3, 14), uint16],) {
  %721 = fn (%var_3853: Tensor[(12, 3, 14), float32]) -> (Tensor[(12, 3, 14), uint16],) {
    %715 = @func_1422() /* ty=Tensor[(12, 3, 14), float32] */;
    %716 = cast(%var_3853, dtype="uint16") /* ty=Tensor[(12, 3, 14), uint16] */;
    %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
    %718 = cast(%715, dtype="uint16") /* ty=Tensor[(12, 3, 14), uint16] */;
    %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %720 = bitwise_xor(%718, %719) /* ty=Tensor[(12, 3, 14), uint16] */;
    (%720,)
  };
  %721(%var_3862) /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_2810(%var_2776: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64], Tensor[(12, 3, 14), float32]) {
  %722 = @func_2469() /* ty=(Tensor[(1000), float64],) */;
  %723 = %722.0;
  %724 = cast(%var_2776, dtype="int64") /* ty=Tensor[(1000), int64] */;
  %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(1), int32] */;
  %726 = cast(%723, dtype="int64") /* ty=Tensor[(1000), int64] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?), int64] */;
  %728 = cast(%723, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %729 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
  %730 = add(%726, %727) /* ty=Tensor[(1000), int64] */;
  %731 = asinh(%728) /* ty=Tensor[(1000), float64] */;
  %732 = @func_1422() /* ty=Tensor[(12, 3, 14), float32] */;
  (%729, %730, %731, %732)
}

def @func_1137() -> Tensor[(12, 3, 14), uint16] {
  @func_1135() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_9439() -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 13, 5), float32], Tensor[(1000), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16]) {
  @func_9437() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 13, 5), float32], Tensor[(1000), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16]) */
}

def @func_10995() -> Tensor[(12, 3, 14), uint16] {
  @func_10993() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_7155() -> Tensor[(12, 3, 14), uint16] {
  %733 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %733.1
}

def @func_3020() -> Tensor[(12, 3, 14), uint16] {
  %734 = fn () -> Tensor[(12, 3, 14), uint16] {
    @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */
  };
  %734() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_10713() -> (Tensor[(12, 3, 14), uint16],) {
  %736 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %735 = @func_8360() /* ty=Tensor[(12, 3, 14), uint16] */;
    (%735,)
  };
  %736() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_10553(%var_10552: Tensor[(126), float32]) -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 7), float32], Tensor[(126), float32], Tensor[(12, 3, 14), float32]) {
  %745 = fn (%var_10536: Tensor[(126), float32]) -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 7), float32], Tensor[(126), float32], Tensor[(12, 3, 14), float32]) {
    %737 = @func_8094() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %738 = cast(%var_10536, dtype="float32") /* ty=Tensor[(126), float32] */;
    %739 = reshape(%738, newshape=[9, 2, 7]) /* ty=Tensor[(9, 2, 7), float32] */;
    %740 = @func_7540(%739) /* ty=(Tensor[(9, 2, 7), float32],) */;
    %741 = @func_5244() /* ty=(Tensor[(12, 3, 14), float32],) */;
    %742 = %737.0;
    %743 = %740.0;
    %744 = %741.0;
    (%742, %743, %var_10536, %744)
  };
  %745(%var_10552) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 7), float32], Tensor[(126), float32], Tensor[(12, 3, 14), float32]) */
}

def @func_6881() -> Tensor[(2, 3, 10), uint32] {
  @func_6879() /* ty=Tensor[(2, 3, 10), uint32] */
}

def @func_8322() -> Tensor[(1000), float64] {
  @func_8320() /* ty=Tensor[(1000), float64] */
}

def @func_6915() -> Tensor[(12, 3, 14), float32] {
  %746 = fn () -> Tensor[(12, 3, 14), float32] {
    @func_6424() /* ty=Tensor[(12, 3, 14), float32] */
  };
  %746() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_10935() -> Tensor[(60), bool] {
  @func_10933() /* ty=Tensor[(60), bool] */
}

def @func_10098() -> Tensor[(12, 3, 14), uint16] {
  %747 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %747.0
}

def @func_10800() -> Tensor[(12, 3, 14), uint16] {
  @func_10798() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_7543(%var_7541: Tensor[(9, 2, 7), float32]) -> (Tensor[(9, 2, 7), float32],) {
  @func_7540(%var_7541) /* ty=(Tensor[(9, 2, 7), float32],) */
}

def @func_723(%var_722: uint8) -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) {
  %754 = fn (%var_717: uint8) -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) {
    %748 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %749 = cast(%var_717, dtype="uint8") /* ty=uint8 */;
    %750 = reshape(%749, newshape=[]) /* ty=uint8 */;
    %751 = @func_434(%750) /* ty=(Tensor[(9, 2, 3), bool],) */;
    %752 = %748.0;
    %753 = %751.0;
    (%752, %753, %var_717)
  };
  %754(%var_722) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) */
}

def @func_9239() -> Tensor[(12, 3, 14), uint16] {
  @func_9237() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_1852(%var_1830: Tensor[(20, 50), float64], %var_1837: Tensor[(10, 10, 10), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(20, 50), float64], Tensor[(10, 10, 10), bool], Tensor[(12, 3, 14), uint16]) {
  %755 = @func_1377() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %756 = cast(%var_1830, dtype="float64") /* ty=Tensor[(20, 50), float64] */;
  %757 = reshape(%756, newshape=[10, 10, 10]) /* ty=Tensor[(10, 10, 10), float64] */;
  %758 = @func_775(%757) /* ty=(Tensor[(10, 10, 10), float64], Tensor[(2, 3, 10), uint32], Tensor[(15, 4), bool]) */;
  %759 = %758.0;
  %760 = cast(%var_1837, dtype="bool") /* ty=Tensor[(10, 10, 10), bool] */;
  %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%759, dtype="bool") /* ty=Tensor[(10, 10, 10), bool] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %764 = @func_1377() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %765 = %755.0;
  %766 = @func_1653() /* ty=Tensor[(12, 3, 14), uint16] */;
  %767 = not_equal(%762, %763) /* ty=Tensor[(10, 10, 10), bool] */;
  %768 = %764.0;
  (%765, %766, %var_1830, %767, %768)
}

def @func_11590() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(567), int16]) {
  @func_11588() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(567), int16]) */
}

def @func_12351() -> (Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) {
  @func_12349() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) */
}

def @func_13305(%var_13303: Tensor[(1000), float64]) -> (Tensor[(9, 13, 5), float32], Tensor[(15, 4), bool], Tensor[(1000), float64]) {
  @func_13302(%var_13303) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(15, 4), bool], Tensor[(1000), float64]) */
}

def @func_5614(%var_5613: Tensor[(66, 6), float32]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float64], Tensor[(66, 6), float32]) {
  %780 = fn (%var_5603: Tensor[(66, 6), float32]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float64], Tensor[(66, 6), float32]) {
    %769 = @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %770 = @func_3796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %771 = @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %772 = cast(%var_5603, dtype="float32") /* ty=Tensor[(66, 6), float32] */;
    %773 = reshape(%772, newshape=[396]) /* ty=Tensor[(396), float32] */;
    %774 = @func_3467(%773) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float64], Tensor[(12, 3, 14), uint16]) */;
    %775 = %769.0;
    %776 = %770.0;
    %777 = @func_1422() /* ty=Tensor[(12, 3, 14), float32] */;
    %778 = %771.0;
    %779 = %774.2;
    (%775, %776, %777, %778, %779, %var_5603)
  };
  %780(%var_5613) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float64], Tensor[(66, 6), float32]) */
}

def @func_6879() -> Tensor[(2, 3, 10), uint32] {
  %781 = @func_4082() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) */;
  %781.0
}

def @func_6489() -> Tensor[(12, 3, 14), uint16] {
  %782 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %782.0
}

def @func_2506() -> (Tensor[(12, 3, 14), uint16],) {
  %785 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %783 = @func_2480() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %784 = %783.0;
    (%784,)
  };
  %785() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_4490(%var_4440: Tensor[(2, 3, 10), uint32], %var_4447: float64, %var_4448: Tensor[(468), float64]) -> (Tensor[(2, 3, 10), bool], float64, Tensor[(468), float64], Tensor[(1000), float64]) {
  %786 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %787 = %786.0;
  %788 = cast(%var_4440, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%787, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %792 = cast(%var_4447, dtype="float64") /* ty=float64 */;
  %793 = cast(%var_4448, dtype="float64") /* ty=Tensor[(468), float64] */;
  %794 = less(%790, %791) /* ty=Tensor[(2, 3, 10), bool] */;
  %795 = cast(%794, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %796 = reshape(%792, newshape=[]) /* ty=float64 */;
  %797 = reshape(%793, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float64] */;
  %798 = reshape(%795, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %799 = @func_1093(%796, %797, %798) /* ty=(Tensor[(12, 3, 13), float64], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(15, 4), bool], Tensor[(1000), float64]) */;
  %800 = %799.4;
  %801 = cast(%800, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %802 = atan(%801) /* ty=Tensor[(1000), float64] */;
  (%794, %var_4447, %var_4448, %802)
}

def @func_8029(%var_8017: Tensor[(16, 16, 9), uint16]) -> (Tensor[(16, 16, 9), uint16], Tensor[(2, 3, 10), bool], Tensor[(60), bool]) {
  %803 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 16, 9), uint16] */, dtype="uint16") /* ty=Tensor[(16, 16, 9), uint16] */;
  %804 = shape_of(%var_8017, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%var_8017, dtype="uint16") /* ty=Tensor[(16, 16, 9), uint16] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %807 = cast(meta[relay.Constant][27] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %808 = cast(meta[relay.Constant][27] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %809 = reshape(%807, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %810 = reshape(%808, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %811 = @func_237(%809, %810) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %812 = bitwise_or(%805, %806) /* ty=Tensor[(16, 16, 9), uint16] */;
  %813 = %811.1;
  (%812, %813, meta[relay.Constant][27] /* ty=Tensor[(60), bool] */)
}

def @func_4011() -> Tensor[(12, 3, 14), float32] {
  @func_4009() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_3559() -> (Tensor[(1000), float64],) {
  @func_3557() /* ty=(Tensor[(1000), float64],) */
}

def @func_12046() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %814 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %815 = %814.0;
  %816 = @func_9986() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%815, %816)
}

def @func_10746(%var_10744: Tensor[(11, 16, 14), float64]) -> (Tensor[(11, 16, 14), float64],) {
  @func_10743(%var_10744) /* ty=(Tensor[(11, 16, 14), float64],) */
}

def @func_12805(%var_12771: int32, %var_12772: Tensor[(2, 8, 1), int32], %var_12785: Tensor[(2464), float64]) -> (Tensor[(2, 8, 1), int32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 16, 14), float64], Tensor[(2464), float64]) {
  %817 = cast(%var_12771, dtype="int32") /* ty=int32 */;
  %818 = cast(%var_12772, dtype="int32") /* ty=Tensor[(2, 8, 1), int32] */;
  %819 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
  %820 = cast(%var_12785, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %821 = reshape(%820, newshape=[11, 16, 14]) /* ty=Tensor[(11, 16, 14), float64] */;
  %822 = @func_10743(%821) /* ty=(Tensor[(11, 16, 14), float64],) */;
  %823 = left_shift(%817, %818) /* ty=Tensor[(2, 8, 1), int32] */;
  %824 = @func_9237() /* ty=Tensor[(12, 3, 14), uint16] */;
  %825 = %819.3;
  %826 = %822.0;
  (%823, %824, %825, %826, %var_12785)
}

def @func_4642(%var_4640: Tensor[(2, 3, 10), uint32]) -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), float32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), float64], Tensor[(60), bool]) {
  @func_4639(%var_4640) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), float32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), float64], Tensor[(60), bool]) */
}

def @func_9876() -> Tensor[(2, 3, 10), bool] {
  %834 = fn () -> Tensor[(2, 3, 10), bool] {
    %827 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
    %828 = cast(%827, dtype="float64") /* ty=Tensor[(2, 3, 10), float64] */;
    %829 = atan(%828) /* ty=Tensor[(2, 3, 10), float64] */;
    %830 = cast(%827, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
    %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(3), int32] */;
    %832 = cast(%829, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
    %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%832, %833) /* ty=Tensor[(2, 3, 10), bool] */
  };
  %834() /* ty=Tensor[(2, 3, 10), bool] */
}

def @func_14641(%var_14638: Tensor[(63, 9), int16], %var_14639: float64, %var_14640: Tensor[(468), float64]) -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(2, 500), float64], Tensor[(63, 9), float32], Tensor[(468), float64], float64, Tensor[(468), float64]) {
  @func_14636(%var_14638, %var_14639, %var_14640) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(2, 500), float64], Tensor[(63, 9), float32], Tensor[(468), float64], float64, Tensor[(468), float64]) */
}

def @func_7223(%var_7183: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(1000), float32]) {
  %835 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %836 = cast(%var_7183, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %837 = cast(%var_7183, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %838 = reshape(%836, newshape=[20, 50]) /* ty=Tensor[(20, 50), float64] */;
  %839 = reshape(%837, newshape=[10, 10, 10]) /* ty=Tensor[(10, 10, 10), float64] */;
  %840 = @func_1852(%838, %839) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(20, 50), float64], Tensor[(10, 10, 10), bool], Tensor[(12, 3, 14), uint16]) */;
  %841 = @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */;
  %842 = %835.1;
  %843 = %840.3;
  %844 = @func_3208() /* ty=Tensor[(1000), float32] */;
  (%841, %842, %843, %var_7183, %844)
}

def @func_13162(%var_13160: Tensor[(9, 13, 5), float32], %var_13161: float64) -> (Tensor[(9, 13, 5), float32], Tensor[(60), bool], float64, Tensor[(60), bool]) {
  %858 = fn (%var_13105: Tensor[(9, 13, 5), float32], %var_13125: float64) -> (Tensor[(9, 13, 5), float32], Tensor[(60), bool], float64, Tensor[(60), bool]) {
    %845 = @func_3245() /* ty=(Tensor[(9, 13, 5), float32],) */;
    %846 = %845.0;
    %847 = cast(%var_13105, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
    %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
    %849 = cast(%846, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
    %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %851 = cast(%var_13125, dtype="float64") /* ty=float64 */;
    %852 = cast(meta[relay.Constant][28] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
    %853 = reshape(%851, newshape=[]) /* ty=float64 */;
    %854 = reshape(%852, newshape=[60]) /* ty=Tensor[(60), bool] */;
    %855 = @func_2912(%853, %854) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) */;
    %856 = divide(%849, %850) /* ty=Tensor[(9, 13, 5), float32] */;
    %857 = %855.4;
    (%856, %857, %var_13125, meta[relay.Constant][28] /* ty=Tensor[(60), bool] */)
  };
  %858(%var_13160, %var_13161) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(60), bool], float64, Tensor[(60), bool]) */
}

def @func_6491() -> Tensor[(12, 3, 14), uint16] {
  @func_6489() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_4009() -> Tensor[(12, 3, 14), float32] {
  @func_1422() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_4639(%var_4600: Tensor[(2, 3, 10), uint32]) -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), float32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), float64], Tensor[(60), bool]) {
  %859 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %860 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %861 = cast(%var_4600, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
  %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %863 = cast(%860, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %865 = @func_3796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %866 = cast(%var_4600, dtype="float64") /* ty=Tensor[(2, 3, 10), float64] */;
  %867 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %868 = %859.0;
  %869 = power(%863, %864) /* ty=Tensor[(2, 3, 10), float32] */;
  %870 = %865.0;
  %871 = sinh(%866) /* ty=Tensor[(2, 3, 10), float64] */;
  %872 = %867.7;
  (%868, %869, %870, %871, %872)
}

def @func_3247() -> (Tensor[(9, 13, 5), float32],) {
  @func_3245() /* ty=(Tensor[(9, 13, 5), float32],) */
}

def @func_10078() -> Tensor[(12, 3, 14), uint16] {
  %874 = fn () -> Tensor[(12, 3, 14), uint16] {
    %873 = @func_5981() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %873.1
  };
  %874() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_8204() -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), float32]) {
  %875 = @func_1528() /* ty=Tensor[(12, 3, 14), float32] */;
  %876 = @func_4009() /* ty=Tensor[(12, 3, 14), float32] */;
  (%875, %876)
}

def @func_8579() -> Tensor[(1000), float32] {
  %877 = @func_5648() /* ty=(Tensor[(1000), float32],) */;
  %877.0
}

def @func_14203() -> (Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), float32], Tensor[(364), uint16]) {
  @func_14201() /* ty=(Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), float32], Tensor[(364), uint16]) */
}

def @func_3920() -> (Tensor[(12, 3, 14), float32],) {
  %878 = @func_3796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %879 = %878.0;
  %880 = cast(%879, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %881 = sin(%880) /* ty=Tensor[(12, 3, 14), float32] */;
  (%881,)
}

def @func_4282(%var_4280: float64, %var_4281: Tensor[(468), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(468), float64], Tensor[(12, 3, 14), uint16], Tensor[(1000), int32], Tensor[(2, 3, 10), uint64], uint8) {
  %915 = fn (%var_4213: float64, %var_4214: Tensor[(468), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(468), float64], Tensor[(12, 3, 14), uint16], Tensor[(1000), int32], Tensor[(2, 3, 10), uint64], uint8) {
    %882 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %883 = cast(%var_4213, dtype="float64") /* ty=float64 */;
    %884 = cast(%var_4214, dtype="float64") /* ty=Tensor[(468), float64] */;
    %885 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
    %886 = %885.7;
    %887 = cast(%886, dtype="bool") /* ty=Tensor[(60), bool] */;
    %888 = reshape(%883, newshape=[]) /* ty=float64 */;
    %889 = reshape(%884, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float64] */;
    %890 = reshape(%887, newshape=[60]) /* ty=Tensor[(60), bool] */;
    %891 = @func_1093(%888, %889, %890) /* ty=(Tensor[(12, 3, 13), float64], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(15, 4), bool], Tensor[(1000), float64]) */;
    %892 = @func_3110() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %893 = @func_3997() /* ty=Tensor[(1000), float64] */;
    %894 = cast(%893, dtype="int32") /* ty=Tensor[(1000), int32] */;
    %895 = cast(%var_4213, dtype="int32") /* ty=int32 */;
    %896 = cast(%886, dtype="bool") /* ty=Tensor[(60), bool] */;
    %897 = cast(%886, dtype="bool") /* ty=Tensor[(60), bool] */;
    %898 = reshape(%896, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
    %899 = reshape(%897, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
    %900 = @func_237(%898, %899) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
    %901 = %900.1;
    %902 = cast(%886, dtype="uint64") /* ty=Tensor[(60), uint64] */;
    %903 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
    %904 = cast(%901, dtype="uint64") /* ty=Tensor[(2, 3, 10), uint64] */;
    %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %906 = cast(%var_4213, dtype="uint8") /* ty=uint8 */;
    %907 = reshape(%906, newshape=[]) /* ty=uint8 */;
    %908 = @func_2583(%907) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], uint8, Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %909 = %882.0;
    %910 = %891.1;
    %911 = %892.0;
    %912 = subtract(%894, %895) /* ty=Tensor[(1000), int32] */;
    %913 = maximum(%904, %905) /* ty=Tensor[(2, 3, 10), uint64] */;
    %914 = %908.3;
    (%909, %910, %var_4214, %911, %912, %913, %914)
  };
  %915(%var_4280, %var_4281) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(468), float64], Tensor[(12, 3, 14), uint16], Tensor[(1000), int32], Tensor[(2, 3, 10), uint64], uint8) */
}

def @func_3181(%var_3175: Tensor[(468), float64], %var_3177: Tensor[(60), bool]) -> (Tensor[(12, 3, 14), uint16], Tensor[(60), bool], Tensor[(468), float64], float64, Tensor[(60), bool]) {
  %916 = cast(%var_3175, dtype="float64") /* ty=Tensor[(468), float64] */;
  %917 = cast(5.57228f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %918 = cast(%var_3177, dtype="bool") /* ty=Tensor[(60), bool] */;
  %919 = reshape(%916, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %920 = reshape(%917, newshape=[]) /* ty=float64 */;
  %921 = reshape(%918, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %922 = @func_2032(%919, %920, %921) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), bool], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) */;
  %923 = @func_3019() /* ty=Tensor[(12, 3, 14), uint16] */;
  %924 = %922.5;
  (%923, %924, %var_3175, 5.57228f64 /* ty=float64 */, %var_3177)
}

def @func_1817(%var_1810: Tensor[(468), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 13), float64], float64, Tensor[(468), float64], Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16]) {
  %925 = @func_1683() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %926 = cast(9.45128f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %927 = cast(%var_1810, dtype="float64") /* ty=Tensor[(468), float64] */;
  %928 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 20), bool] */, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %929 = reshape(%926, newshape=[]) /* ty=float64 */;
  %930 = reshape(%927, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float64] */;
  %931 = reshape(%928, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %932 = @func_1093(%929, %930, %931) /* ty=(Tensor[(12, 3, 13), float64], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(15, 4), bool], Tensor[(1000), float64]) */;
  %933 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %934 = %925.0;
  %935 = %932.0;
  %936 = %933.0;
  (%934, %935, 9.45128f64 /* ty=float64 */, %var_1810, meta[relay.Constant][29] /* ty=Tensor[(3, 20), bool] */, %936)
}

def @func_2469() -> (Tensor[(1000), float64],) {
  %937 = @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */;
  %938 = %937.2;
  (%938,)
}

def @func_8790(%var_8789: uint8) -> (Tensor[(12, 3, 14), float32], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], uint8) {
  %949 = fn (%var_8776: uint8) -> (Tensor[(12, 3, 14), float32], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], uint8) {
    %939 = @func_3920() /* ty=(Tensor[(12, 3, 14), float32],) */;
    %940 = cast(meta[relay.Constant][30] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %941 = reshape(%940, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
    %942 = @func_7223(%941) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(1000), float32]) */;
    %943 = cast(%var_8776, dtype="uint8") /* ty=uint8 */;
    %944 = reshape(%943, newshape=[]) /* ty=uint8 */;
    %945 = @func_721(%944) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) */;
    %946 = %939.0;
    %947 = %942.2;
    %948 = %945.0;
    (%946, %947, meta[relay.Constant][30] /* ty=Tensor[(1000), float64] */, %948, %var_8776)
  };
  %949(%var_8789) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], uint8) */
}

def @func_1653() -> Tensor[(12, 3, 14), uint16] {
  %950 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %950.0
}

def @func_3467(%var_3425: Tensor[(396), float32]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float64], Tensor[(12, 3, 14), uint16]) {
  %951 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %952 = @func_2505() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %953 = cast(%var_3425, dtype="float32") /* ty=Tensor[(396), float32] */;
  %954 = reshape(%953, newshape=[11, 4, 9]) /* ty=Tensor[(11, 4, 9), float32] */;
  %955 = @func_3335(%954) /* ty=(Tensor[(11, 4, 9), float32],) */;
  %956 = %955.0;
  %957 = cast(%956, dtype="float32") /* ty=Tensor[(11, 4, 9), float32] */;
  %958 = tan(%957) /* ty=Tensor[(11, 4, 9), float32] */;
  %959 = cast(%var_3425, dtype="int64") /* ty=Tensor[(396), int64] */;
  %960 = shape_of(%958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %961 = cast(%958, dtype="int64") /* ty=Tensor[(11, 4, 9), int64] */;
  %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %963 = logical_xor(%961, %962) /* ty=Tensor[(11, 4, 9), int64] */;
  %964 = cast(%963, dtype="float64") /* ty=Tensor[(11, 4, 9), float64] */;
  %965 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %966 = %951.0;
  %967 = %952.0;
  %968 = rsqrt(%964) /* ty=Tensor[(11, 4, 9), float64] */;
  %969 = %965.0;
  (%966, %967, %968, %969)
}

def @func_2667() -> Tensor[(12, 3, 14), uint16] {
  %970 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
  %970.1
}

def @func_4888() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %978 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
    %971 = @func_2882() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
    %972 = @func_1683() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %973 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %974 = %971.0;
    %975 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
    %976 = %972.0;
    %977 = %973.0;
    (%974, %975, %976, %977)
  };
  %978() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_10438() -> (Tensor[(12, 3, 14), float32],) {
  %980 = fn () -> (Tensor[(12, 3, 14), float32],) {
    %979 = @func_5810() /* ty=Tensor[(12, 3, 14), float32] */;
    (%979,)
  };
  %980() /* ty=(Tensor[(12, 3, 14), float32],) */
}

def @func_3245() -> (Tensor[(9, 13, 5), float32],) {
  %981 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
  %982 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(9, 13, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %983 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
  %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %985 = mod(%983, %984) /* ty=Tensor[(9, 13, 5), float32] */;
  (%985,)
}

def @func_3210() -> Tensor[(1000), float32] {
  @func_3208() /* ty=Tensor[(1000), float32] */
}

def @func_13836(%var_13832: float64) -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 16, 14), float64], Tensor[(2464), float64], Tensor[(12, 3, 14), float32], Tensor[(10, 8, 4), float32], float64, float64) {
  %986 = @func_10858() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(1000), float64], Tensor[(2, 3, 10), uint32]) */;
  %987 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %988 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %989 = cast(meta[relay.Constant][33] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %990 = reshape(%989, newshape=[11, 16, 14]) /* ty=Tensor[(11, 16, 14), float64] */;
  %991 = @func_10743(%990) /* ty=(Tensor[(11, 16, 14), float64],) */;
  %992 = @func_8204() /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), float32]) */;
  %993 = @func_11328() /* ty=(Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16]) */;
  %994 = cast(%var_13832, dtype="float64") /* ty=float64 */;
  %995 = reshape(%994, newshape=[]) /* ty=float64 */;
  %996 = @func_5265(%995) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint64], float64, Tensor[(78, 6), float64]) */;
  %997 = %986.2;
  %998 = %987.0;
  %999 = %988.0;
  %1000 = %991.0;
  %1001 = %992.0;
  %1002 = %993.0;
  %1003 = %996.2;
  (%997, %998, %999, %1000, meta[relay.Constant][33] /* ty=Tensor[(2464), float64] */, %1001, %1002, %1003, %var_13832)
}

def @func_13671() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  @func_13669() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_11161(%var_11119: float64) -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], float64, Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(396), float32]) {
  %1004 = @func_9690() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1005 = cast(%var_11119, dtype="float64") /* ty=float64 */;
  %1006 = reshape(%1005, newshape=[]) /* ty=float64 */;
  %1007 = @func_5265(%1006) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint64], float64, Tensor[(78, 6), float64]) */;
  %1008 = cast(%var_11119, dtype="uint8") /* ty=uint8 */;
  %1009 = reshape(%1008, newshape=[]) /* ty=uint8 */;
  %1010 = @func_434(%1009) /* ty=(Tensor[(9, 2, 3), bool],) */;
  %1011 = cast(meta[relay.Constant][34] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %1012 = reshape(%1011, newshape=[66, 6]) /* ty=Tensor[(66, 6), float32] */;
  %1013 = @func_5612(%1012) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float64], Tensor[(66, 6), float32]) */;
  %1014 = %1004.1;
  %1015 = %1007.0;
  %1016 = %1010.0;
  %1017 = @func_3959() /* ty=Tensor[(12, 3, 14), float32] */;
  %1018 = %1013.1;
  (%1014, %1015, %var_11119, %1016, %1017, %1018, meta[relay.Constant][34] /* ty=Tensor[(396), float32] */)
}

def @func_3505() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %1022 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
    %1019 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1020 = %1019.0;
    %1021 = @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */;
    (%1020, %1021)
  };
  %1022() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_7946(%var_7936: Tensor[(6, 16, 7), float64]) -> Tensor[(6, 16, 7), float64] {
  %1023 = cast(%var_7936, dtype="float64") /* ty=Tensor[(6, 16, 7), float64] */;
  log(%1023) /* ty=Tensor[(6, 16, 7), float64] */
}

def @func_2952() -> Tensor[(12, 3, 14), uint16] {
  @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_3324() -> (Tensor[(12, 3, 14), uint16],) {
  %1026 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %1024 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1025 = %1024.0;
    (%1025,)
  };
  %1026() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_5909(%var_5907: Tensor[(7, 9, 9), int16], %var_5908: Tensor[(7, 9, 9), int16]) -> (Tensor[(7, 9, 9), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) {
  %1039 = fn (%var_5867: Tensor[(7, 9, 9), int16], %var_5868: Tensor[(7, 9, 9), int16]) -> (Tensor[(7, 9, 9), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) {
    %1027 = cast(%var_5868, dtype="bool") /* ty=Tensor[(7, 9, 9), bool] */;
    %1028 = shape_of(%var_5867, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1029 = cast(%var_5867, dtype="bool") /* ty=Tensor[(7, 9, 9), bool] */;
    %1030 = dyn.reshape(%1027, %1028, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1031 = @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1032 = @func_3920() /* ty=(Tensor[(12, 3, 14), float32],) */;
    %1033 = @func_5530() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1034 = greater(%1029, %1030) /* ty=Tensor[(7, 9, 9), bool] */;
    %1035 = %1031.0;
    %1036 = %1032.0;
    %1037 = %1033.0;
    %1038 = @func_1528() /* ty=Tensor[(12, 3, 14), float32] */;
    (%1034, %1035, %1036, %1037, %1038)
  };
  %1039(%var_5907, %var_5908) /* ty=(Tensor[(7, 9, 9), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */
}

def @func_9499() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32]) {
  %1044 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32]) {
    %1040 = @func_4887() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %1041 = @func_4646() /* ty=Tensor[(12, 3, 14), uint16] */;
    %1042 = %1040.1;
    %1043 = @func_7761() /* ty=Tensor[(2, 3, 10), uint32] */;
    (%1041, %1042, %1043)
  };
  %1044() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32]) */
}

def @func_2669() -> Tensor[(12, 3, 14), uint16] {
  @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_5117() -> (Tensor[(1000), float64], Tensor[(2, 3, 10), bool], Tensor[(1, 60), bool]) {
  @func_5115() /* ty=(Tensor[(1000), float64], Tensor[(2, 3, 10), bool], Tensor[(1, 60), bool]) */
}

def @func_14321(%var_14319: Tensor[(1, 60), uint32]) -> (Tensor[(12, 3, 14), float32], Tensor[(468), float64], Tensor[(1, 60), uint32]) {
  @func_14318(%var_14319) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(468), float64], Tensor[(1, 60), uint32]) */
}

def @func_14741() -> (Tensor[(2, 3, 10), uint32],) {
  %1047 = fn () -> (Tensor[(2, 3, 10), uint32],) {
    %1045 = @func_6978() /* ty=(Tensor[(2, 3, 10), uint32],) */;
    %1046 = %1045.0;
    (%1046,)
  };
  %1047() /* ty=(Tensor[(2, 3, 10), uint32],) */
}

def @func_8935() -> (Tensor[(1000), float64],) {
  %1048 = @func_2469() /* ty=(Tensor[(1000), float64],) */;
  %1049 = %1048.0;
  (%1049,)
}

def @func_10485() -> (Tensor[(11, 10, 9), float64], Tensor[(2, 3, 10), bool], Tensor[(60), bool]) {
  @func_10483() /* ty=(Tensor[(11, 10, 9), float64], Tensor[(2, 3, 10), bool], Tensor[(60), bool]) */
}

def @func_7540(%var_7536: Tensor[(9, 2, 7), float32]) -> (Tensor[(9, 2, 7), float32],) {
  %1050 = cast(%var_7536, dtype="float32") /* ty=Tensor[(9, 2, 7), float32] */;
  %1051 = sinh(%1050) /* ty=Tensor[(9, 2, 7), float32] */;
  (%1051,)
}

def @func_7578() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], uint8) {
  %1052 = @func_2383() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
  %1053 = cast(meta[relay.Constant][35] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1054 = reshape(%1053, newshape=[]) /* ty=uint8 */;
  %1055 = @func_2583(%1054) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], uint8, Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1056 = %1052.1;
  %1057 = %1055.1;
  (%1056, %1057, meta[relay.Constant][35] /* ty=uint8 */)
}

def @func_4329() -> (Tensor[(12, 3, 14), uint16],) {
  %1058 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1059 = %1058.0;
  (%1059,)
}

def @func_797() -> (Tensor[(12, 3, 14), uint16],) {
  %1062 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %1060 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1061 = %1060.0;
    (%1061,)
  };
  %1062() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_4665() -> (Tensor[(2, 3, 10), uint32],) {
  %1063 = @func_3150() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %1064 = %1063.0;
  (%1064,)
}

def @func_11917(%var_11910: uint8) -> (Tensor[(12, 3, 14), uint16], uint8, uint8) {
  %1065 = @func_9409() /* ty=(Tensor[(15, 13, 5), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1066 = cast(%var_11910, dtype="uint8") /* ty=uint8 */;
  %1067 = reshape(%1066, newshape=[]) /* ty=uint8 */;
  %1068 = @func_8788(%1067) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], uint8) */;
  %1069 = %1065.2;
  %1070 = %1068.4;
  (%1069, %1070, %var_11910)
}

def @func_10100() -> Tensor[(12, 3, 14), uint16] {
  @func_10098() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_8715() -> (Tensor[(1000), float64],) {
  %1072 = fn () -> (Tensor[(1000), float64],) {
    %1071 = @func_8320() /* ty=Tensor[(1000), float64] */;
    (%1071,)
  };
  %1072() /* ty=(Tensor[(1000), float64],) */
}

def @func_14658(%var_14656: float64) -> (Tensor[(1000), float32], Tensor[(12, 3, 14), uint16], float64) {
  @func_14655(%var_14656) /* ty=(Tensor[(1000), float32], Tensor[(12, 3, 14), uint16], float64) */
}

def @func_3260() -> Tensor[(2, 3, 10), uint32] {
  @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */
}

def @func_9115() -> Tensor[(12, 3, 14), float32] {
  @func_9113() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_2288() -> Tensor[(12, 3, 14), uint16] {
  %1074 = fn () -> Tensor[(12, 3, 14), uint16] {
    %1073 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1073.0
  };
  %1074() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_11330() -> (Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16]) {
  @func_11328() /* ty=(Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16]) */
}

def @func_3185(%var_3183: Tensor[(468), float64], %var_3184: Tensor[(60), bool]) -> (Tensor[(12, 3, 14), uint16], Tensor[(60), bool], Tensor[(468), float64], float64, Tensor[(60), bool]) {
  @func_3181(%var_3183, %var_3184) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(60), bool], Tensor[(468), float64], float64, Tensor[(60), bool]) */
}

def @func_4084() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) {
  @func_4082() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) */
}

def @func_14721() -> Tensor[(1000), float64] {
  @func_3997() /* ty=Tensor[(1000), float64] */
}

def @func_14921(%var_14898: Tensor[(2, 11, 8), uint8]) -> (Tensor[(2, 11, 8), bool],) {
  %1075 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 11, 8), uint8] */, dtype="bool") /* ty=Tensor[(2, 11, 8), bool] */;
  %1076 = shape_of(%var_14898, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1077 = cast(%var_14898, dtype="bool") /* ty=Tensor[(2, 11, 8), bool] */;
  %1078 = dyn.reshape(%1075, %1076, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1079 = greater_equal(%1077, %1078) /* ty=Tensor[(2, 11, 8), bool] */;
  (%1079,)
}

def @func_7116() -> Tensor[(12, 3, 14), uint16] {
  %1080 = fn () -> Tensor[(12, 3, 14), uint16] {
    @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */
  };
  %1080() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_12633() -> (Tensor[(11, 4, 9), float32],) {
  %1083 = fn () -> (Tensor[(11, 4, 9), float32],) {
    %1081 = @func_10329() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(11, 4, 9), float32], Tensor[(396), float32]) */;
    %1082 = %1081.3;
    (%1082,)
  };
  %1083() /* ty=(Tensor[(11, 4, 9), float32],) */
}

def @func_11448() -> Tensor[(12, 3, 14), float32] {
  @func_11385() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_1379() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  @func_1377() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_3399(%var_3396: float64, %var_3397: Tensor[(60), bool]) -> (Tensor[(12, 3, 14), float32], Tensor[(468), float64], float64, Tensor[(60), bool]) {
  %1084 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1085 = %1084.0;
  %1086 = cast(%1085, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %1087 = cast(%var_3396, dtype="float64") /* ty=float64 */;
  %1088 = cast(%var_3397, dtype="bool") /* ty=Tensor[(60), bool] */;
  %1089 = reshape(%1087, newshape=[]) /* ty=float64 */;
  %1090 = reshape(%1088, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %1091 = @func_2912(%1089, %1090) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) */;
  %1092 = sinh(%1086) /* ty=Tensor[(12, 3, 14), float32] */;
  %1093 = %1091.2;
  (%1092, %1093, %var_3396, %var_3397)
}

def @func_10254(%var_10201: Tensor[(60), uint32]) -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(60), uint32], Tensor[(12, 3, 14), float32]) {
  %1094 = cast(%var_10201, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %1095 = reshape(%1094, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
  %1096 = @func_4639(%1095) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), float32], Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), float64], Tensor[(60), bool]) */;
  %1097 = @func_5244() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %1098 = @func_4009() /* ty=Tensor[(12, 3, 14), float32] */;
  %1099 = @func_6424() /* ty=Tensor[(12, 3, 14), float32] */;
  %1100 = %1096.0;
  %1101 = %1097.0;
  (%1098, %1099, %1100, %var_10201, %1101)
}

def @func_12554(%var_12552: Tensor[(6, 6, 2), float32], %var_12553: Tensor[(6, 6, 2), float32]) -> Tensor[(6, 6, 2), float32] {
  %1106 = fn (%var_12539: Tensor[(6, 6, 2), float32], %var_12540: Tensor[(6, 6, 2), float32]) -> Tensor[(6, 6, 2), float32] {
    %1102 = cast(%var_12540, dtype="float32") /* ty=Tensor[(6, 6, 2), float32] */;
    %1103 = shape_of(%var_12539, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1104 = cast(%var_12539, dtype="float32") /* ty=Tensor[(6, 6, 2), float32] */;
    %1105 = dyn.reshape(%1102, %1103, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%1104, %1105) /* ty=Tensor[(6, 6, 2), float32] */
  };
  %1106(%var_12552, %var_12553) /* ty=Tensor[(6, 6, 2), float32] */
}

def @func_2996(%var_2995: uint8) -> (Tensor[(12, 3, 14), uint16], Tensor[(3, 20), bool], uint8) {
  %1112 = fn (%var_2988: uint8) -> (Tensor[(12, 3, 14), uint16], Tensor[(3, 20), bool], uint8) {
    %1107 = cast(%var_2988, dtype="uint8") /* ty=uint8 */;
    %1108 = reshape(%1107, newshape=[]) /* ty=uint8 */;
    %1109 = @func_2583(%1108) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], uint8, Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %1110 = @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */;
    %1111 = %1109.4;
    (%1110, %1111, %var_2988)
  };
  %1112(%var_2995) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(3, 20), bool], uint8) */
}

def @func_7949(%var_7947: Tensor[(6, 16, 7), float64]) -> Tensor[(6, 16, 7), float64] {
  @func_7946(%var_7947) /* ty=Tensor[(6, 16, 7), float64] */
}

def @func_777(%var_776: Tensor[(10, 10, 10), float64]) -> (Tensor[(10, 10, 10), float64], Tensor[(2, 3, 10), uint32], Tensor[(15, 4), bool]) {
  %1121 = fn (%var_757: Tensor[(10, 10, 10), float64]) -> (Tensor[(10, 10, 10), float64], Tensor[(2, 3, 10), uint32], Tensor[(15, 4), bool]) {
    %1113 = cast(%var_757, dtype="float64") /* ty=Tensor[(10, 10, 10), float64] */;
    %1114 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 4), bool] */, dtype="bool") /* ty=Tensor[(15, 4), bool] */;
    %1115 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 4), bool] */, dtype="bool") /* ty=Tensor[(15, 4), bool] */;
    %1116 = reshape(%1114, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
    %1117 = reshape(%1115, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
    %1118 = @func_237(%1116, %1117) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
    %1119 = asinh(%1113) /* ty=Tensor[(10, 10, 10), float64] */;
    %1120 = %1118.0;
    (%1119, %1120, meta[relay.Constant][37] /* ty=Tensor[(15, 4), bool] */)
  };
  %1121(%var_776) /* ty=(Tensor[(10, 10, 10), float64], Tensor[(2, 3, 10), uint32], Tensor[(15, 4), bool]) */
}

def @func_2882() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) {
  %1122 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1123 = %1122.0;
  %1124 = @func_1528() /* ty=Tensor[(12, 3, 14), float32] */;
  (%1123, %1124)
}

def @func_4495(%var_4492: Tensor[(2, 3, 10), uint32], %var_4493: float64, %var_4494: Tensor[(468), float64]) -> (Tensor[(2, 3, 10), bool], float64, Tensor[(468), float64], Tensor[(1000), float64]) {
  @func_4490(%var_4492, %var_4493, %var_4494) /* ty=(Tensor[(2, 3, 10), bool], float64, Tensor[(468), float64], Tensor[(1000), float64]) */
}

def @func_5267(%var_5266: float64) -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint64], float64, Tensor[(78, 6), float64]) {
  %1132 = fn (%var_5262: float64) -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint64], float64, Tensor[(78, 6), float64]) {
    %1125 = cast(%var_5262, dtype="float64") /* ty=float64 */;
    %1126 = cast(meta[relay.Constant][38] /* ty=Tensor[(78, 6), float64] */, dtype="float64") /* ty=Tensor[(78, 6), float64] */;
    %1127 = reshape(%1125, newshape=[]) /* ty=float64 */;
    %1128 = reshape(%1126, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %1129 = @func_4279(%1127, %1128) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(468), float64], Tensor[(12, 3, 14), uint16], Tensor[(1000), int32], Tensor[(2, 3, 10), uint64], uint8) */;
    %1130 = @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */;
    %1131 = %1129.5;
    (%1130, %1131, %var_5262, meta[relay.Constant][38] /* ty=Tensor[(78, 6), float64] */)
  };
  %1132(%var_5266) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint64], float64, Tensor[(78, 6), float64]) */
}

def @func_8679(%var_8676: Tensor[(1000), float64], %var_8677: Tensor[(60), uint32], %var_8678: Tensor[(468), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(12, 3, 14), float64]) {
  %1152 = fn (%var_8642: Tensor[(1000), float64], %var_8643: Tensor[(60), uint32], %var_8671: Tensor[(468), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(12, 3, 14), float64]) {
    %1133 = @func_3110() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %1134 = cast(%var_8642, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %1135 = cast(%var_8643, dtype="uint32") /* ty=Tensor[(60), uint32] */;
    %1136 = reshape(%1134, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
    %1137 = reshape(%1135, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
    %1138 = @func_8398(%1136, %1137) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64], Tensor[(2, 3, 10), int64]) */;
    %1139 = cast(%var_8643, dtype="uint32") /* ty=Tensor[(60), uint32] */;
    %1140 = cast(%var_8671, dtype="float64") /* ty=Tensor[(468), float64] */;
    %1141 = reshape(%1139, newshape=[60]) /* ty=Tensor[(60), uint32] */;
    %1142 = reshape(%1140, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %1143 = @func_7283(%1141, %1142) /* ty=(Tensor[(1000), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], float64, Tensor[(60), uint32], Tensor[(468), float64], Tensor[(12, 3, 14), uint16]) */;
    %1144 = cast(%var_8642, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %1145 = reshape(%1144, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
    %1146 = @func_2172(%1145) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) */;
    %1147 = %1133.0;
    %1148 = %1138.1;
    %1149 = @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */;
    %1150 = %1143.3;
    %1151 = %1146.1;
    (%1147, %1148, %var_8642, %var_8643, %1149, %1150, %var_8671, %1151)
  };
  %1152(%var_8676, %var_8677, %var_8678) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(12, 3, 14), float64]) */
}

def @func_10933() -> Tensor[(60), bool] {
  %1153 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %1153.7
}

def @func_9737() -> Tensor[(12, 3, 14), uint16] {
  @func_9735() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_11328() -> (Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16]) {
  %1154 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 8, 4), float32] */, dtype="float32") /* ty=Tensor[(10, 8, 4), float32] */;
  %1155 = sqrt(%1154) /* ty=Tensor[(10, 8, 4), float32] */;
  %1156 = @func_8514() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%1155, %1156)
}

def @func_7725() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  @func_7723() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_11588() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(567), int16]) {
  %1157 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1158 = @func_2480() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1159 = cast(meta[relay.Constant][40] /* ty=Tensor[(567), int16] */, dtype="int16") /* ty=Tensor[(567), int16] */;
  %1160 = cast(meta[relay.Constant][40] /* ty=Tensor[(567), int16] */, dtype="int16") /* ty=Tensor[(567), int16] */;
  %1161 = reshape(%1159, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int16] */;
  %1162 = reshape(%1160, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int16] */;
  %1163 = @func_5906(%1161, %1162) /* ty=(Tensor[(7, 9, 9), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %1164 = %1157.1;
  %1165 = %1158.0;
  %1166 = %1163.2;
  (%1164, %1165, %1166, meta[relay.Constant][40] /* ty=Tensor[(567), int16] */)
}

def @func_15307() -> Tensor[(12, 3, 14), uint16] {
  @func_15305() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_4960() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %1171 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
    %1167 = @func_4887() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %1168 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1169 = %1167.2;
    %1170 = %1168.0;
    (%1169, %1170)
  };
  %1171() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_6157() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %1172 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1173 = @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1174 = %1172.0;
  (%1173, %1174)
}

def @func_10257(%var_10255: Tensor[(60), uint32]) -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(60), uint32], Tensor[(12, 3, 14), float32]) {
  @func_10254(%var_10255) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], Tensor[(60), uint32], Tensor[(12, 3, 14), float32]) */
}

def @func_10410() -> Tensor[(12, 3, 14), uint16] {
  @func_10408() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_12201(%var_12199: Tensor[(60), uint32]) -> (Tensor[(12, 3, 14), uint16], float64, Tensor[(60), uint32], Tensor[(468), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), float32]) {
  @func_12198(%var_12199) /* ty=(Tensor[(12, 3, 14), uint16], float64, Tensor[(60), uint32], Tensor[(468), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), float32]) */
}

def @func_3728(%var_3727: Tensor[(30, 2), bool]) -> (Tensor[(12, 3, 14), bool], Tensor[(12, 3, 14), float64], Tensor[(1000), float64], float64, float64, Tensor[(30, 2), bool]) {
  %1191 = fn (%var_3714: Tensor[(30, 2), bool]) -> (Tensor[(12, 3, 14), bool], Tensor[(12, 3, 14), float64], Tensor[(1000), float64], float64, float64, Tensor[(30, 2), bool]) {
    %1175 = @func_1422() /* ty=Tensor[(12, 3, 14), float32] */;
    %1176 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 3, 14), float32] */, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
    %1177 = shape_of(%1175, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1178 = cast(%1175, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
    %1179 = dyn.reshape(%1176, %1177, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1180 = cast(meta[relay.Constant][42] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %1181 = reshape(%1180, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
    %1182 = @func_2172(%1181) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) */;
    %1183 = cast(4.8415f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1184 = cast(%var_3714, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %1185 = reshape(%1183, newshape=[]) /* ty=float64 */;
    %1186 = reshape(%1184, newshape=[60]) /* ty=Tensor[(60), bool] */;
    %1187 = @func_3399(%1185, %1186) /* ty=(Tensor[(12, 3, 14), float32], Tensor[(468), float64], float64, Tensor[(60), bool]) */;
    %1188 = logical_or(%1178, %1179) /* ty=Tensor[(12, 3, 14), bool] */;
    %1189 = %1182.1;
    %1190 = %1187.2;
    (%1188, %1189, meta[relay.Constant][42] /* ty=Tensor[(1000), float64] */, %1190, 4.8415f64 /* ty=float64 */, %var_3714)
  };
  %1191(%var_3727) /* ty=(Tensor[(12, 3, 14), bool], Tensor[(12, 3, 14), float64], Tensor[(1000), float64], float64, float64, Tensor[(30, 2), bool]) */
}

def @func_8149() -> (Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) {
  %1197 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) {
    %1192 = @func_6670() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(1000), bool]) */;
    %1193 = @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1194 = @func_6489() /* ty=Tensor[(12, 3, 14), uint16] */;
    %1195 = %1192.1;
    %1196 = %1193.0;
    (%1194, %1195, %1196)
  };
  %1197() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) */
}

def @func_9209() -> (Tensor[(12, 3, 14), float32], uint8) {
  %1198 = @func_5060() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %1199 = @func_6300() /* ty=(uint8,) */;
  %1200 = %1198.1;
  %1201 = %1199.0;
  (%1200, %1201)
}

def @func_9609(%var_9589: Tensor[(4, 13, 1), uint16], %var_9590: Tensor[(4, 13, 7), uint16]) -> (Tensor[(4, 13, 7), bool],) {
  %1202 = cast(%var_9589, dtype="bool") /* ty=Tensor[(4, 13, 1), bool] */;
  %1203 = cast(%var_9590, dtype="bool") /* ty=Tensor[(4, 13, 7), bool] */;
  %1204 = less_equal(%1202, %1203) /* ty=Tensor[(4, 13, 7), bool] */;
  (%1204,)
}

def @func_8206() -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), float32]) {
  @func_8204() /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), float32]) */
}

def @func_4082() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) {
  %1205 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
  %1206 = @func_3110() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1207 = %1205.6;
  %1208 = %1206.1;
  (%1207, %1208)
}

def @func_13302(%var_13291: Tensor[(1000), float64]) -> (Tensor[(9, 13, 5), float32], Tensor[(15, 4), bool], Tensor[(1000), float64]) {
  %1209 = @func_11180() /* ty=Tensor[(9, 13, 5), float32] */;
  %1210 = cast(%1209, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
  %1211 = cast(%var_13291, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1212 = reshape(%1211, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
  %1213 = @func_7067(%1212) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16]) */;
  %1214 = atanh(%1210) /* ty=Tensor[(9, 13, 5), float32] */;
  %1215 = %1213.2;
  (%1214, %1215, %var_13291)
}

def @func_14363() -> (Tensor[(12, 3, 14), uint16],) {
  @func_14361() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_8515() -> Tensor[(12, 3, 14), uint16] {
  %1217 = fn () -> Tensor[(12, 3, 14), uint16] {
    %1216 = @func_6670() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(1000), bool]) */;
    %1216.0
  };
  %1217() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_14318(%var_14298: Tensor[(1, 60), uint32]) -> (Tensor[(12, 3, 14), float32], Tensor[(468), float64], Tensor[(1, 60), uint32]) {
  %1218 = cast(%var_14298, dtype="uint32") /* ty=Tensor[(1, 60), uint32] */;
  %1219 = reshape(%1218, newshape=[60]) /* ty=Tensor[(60), uint32] */;
  %1220 = @func_12198(%1219) /* ty=(Tensor[(12, 3, 14), uint16], float64, Tensor[(60), uint32], Tensor[(468), float64], Tensor[(60), uint32], Tensor[(12, 3, 14), float32]) */;
  %1221 = @func_4009() /* ty=Tensor[(12, 3, 14), float32] */;
  %1222 = %1220.3;
  (%1221, %1222, %var_14298)
}

def @func_1423() -> Tensor[(12, 3, 14), float32] {
  %1226 = fn () -> Tensor[(12, 3, 14), float32] {
    %1223 = @func_1377() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %1224 = %1223.1;
    %1225 = cast(%1224, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
    log10(%1225) /* ty=Tensor[(12, 3, 14), float32] */
  };
  %1226() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_13468() -> Tensor[(12, 3, 14), uint16] {
  %1228 = fn () -> Tensor[(12, 3, 14), uint16] {
    %1227 = @func_11939() /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
    %1227.1
  };
  %1228() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_6980() -> (Tensor[(2, 3, 10), uint32],) {
  @func_6978() /* ty=(Tensor[(2, 3, 10), uint32],) */
}

def @func_11680() -> (Tensor[(1, 14, 12), float32], Tensor[(2, 3, 10), float32], Tensor[(12, 3, 14), uint16]) {
  %1237 = fn () -> (Tensor[(1, 14, 12), float32], Tensor[(2, 3, 10), float32], Tensor[(12, 3, 14), uint16]) {
    %1229 = @func_6338() /* ty=(Tensor[(1, 14, 12), float32], Tensor[(12, 3, 14), uint16]) */;
    %1230 = @func_5522() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %1231 = %1230.0;
    %1232 = cast(%1231, dtype="float32") /* ty=Tensor[(2, 3, 10), float32] */;
    %1233 = @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */;
    %1234 = %1229.0;
    %1235 = rsqrt(%1232) /* ty=Tensor[(2, 3, 10), float32] */;
    %1236 = %1233.3;
    (%1234, %1235, %1236)
  };
  %1237() /* ty=(Tensor[(1, 14, 12), float32], Tensor[(2, 3, 10), float32], Tensor[(12, 3, 14), uint16]) */
}

def @func_6301() -> (uint8,) {
  %1240 = fn () -> (uint8,) {
    %1238 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
    %1239 = %1238.2;
    (%1239,)
  };
  %1240() /* ty=(uint8,) */
}

def @func_11941() -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) {
  @func_11939() /* ty=(Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */
}

def @func_1105() -> (Tensor[(12, 3, 14), uint16],) {
  %1243 = fn () -> (Tensor[(12, 3, 14), uint16],) {
    %1241 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1242 = %1241.0;
    (%1242,)
  };
  %1243() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_999() -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) {
  %1244 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1245 = cast(meta[relay.Constant][43] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1246 = reshape(%1245, newshape=[10, 10, 10]) /* ty=Tensor[(10, 10, 10), float64] */;
  %1247 = @func_775(%1246) /* ty=(Tensor[(10, 10, 10), float64], Tensor[(2, 3, 10), uint32], Tensor[(15, 4), bool]) */;
  %1248 = cast(meta[relay.Constant][43] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
  %1249 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
  %1250 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1251 = %1250.0;
  %1252 = cast(%1251, dtype="float64") /* ty=Tensor[(12, 3, 14), float64] */;
  %1253 = %1244.0;
  %1254 = %1247.1;
  %1255 = exp(%1248) /* ty=Tensor[(1000), float64] */;
  %1256 = %1249.0;
  %1257 = asin(%1252) /* ty=Tensor[(12, 3, 14), float64] */;
  (%1253, %1254, %1255, %1256, %1257)
}

def @func_14173() -> (Tensor[(12, 3, 14), uint16], Tensor[(10, 10, 10), bool], Tensor[(1000), float64]) {
  %1264 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(10, 10, 10), bool], Tensor[(1000), float64]) {
    %1258 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1259 = cast(meta[relay.Constant][44] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %1260 = reshape(%1259, newshape=[1000]) /* ty=Tensor[(1000), float64] */;
    %1261 = @func_7223(%1260) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(10, 10, 10), bool], Tensor[(1000), float64], Tensor[(1000), float32]) */;
    %1262 = %1258.0;
    %1263 = %1261.2;
    (%1262, %1263, meta[relay.Constant][44] /* ty=Tensor[(1000), float64] */)
  };
  %1264() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(10, 10, 10), bool], Tensor[(1000), float64]) */
}

def @func_14959() -> Tensor[(12, 3, 14), uint16] {
  %1266 = fn () -> Tensor[(12, 3, 14), uint16] {
    %1265 = @func_796() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1265.0
  };
  %1266() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_9559(%var_9557: Tensor[(60), uint32]) -> (Tensor[(1000), float32], Tensor[(2, 3, 10), float32], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16]) {
  @func_9556(%var_9557) /* ty=(Tensor[(1000), float32], Tensor[(2, 3, 10), float32], Tensor[(60), uint32], Tensor[(12, 3, 14), uint16]) */
}

def @func_3151() -> (Tensor[(2, 3, 10), uint32],) {
  %1269 = fn () -> (Tensor[(2, 3, 10), uint32],) {
    %1267 = @func_1782() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) */;
    %1268 = %1267.6;
    (%1268,)
  };
  %1269() /* ty=(Tensor[(2, 3, 10), uint32],) */
}

def @func_12880(%var_12878: Tensor[(432), float64], %var_12879: Tensor[(468), float64]) -> (Tensor[(9, 13, 5), float32], Tensor[(16, 9, 3), float64], Tensor[(27), float64], Tensor[(432), float64], Tensor[(468), float64], Tensor[(468), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 13, 5), float64]) {
  %1286 = fn (%var_12828: Tensor[(432), float64], %var_12852: Tensor[(468), float64]) -> (Tensor[(9, 13, 5), float32], Tensor[(16, 9, 3), float64], Tensor[(27), float64], Tensor[(432), float64], Tensor[(468), float64], Tensor[(468), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 13, 5), float64]) {
    %1270 = cast(meta[relay.Constant][45] /* ty=Tensor[(27), float64] */, dtype="float64") /* ty=Tensor[(27), float64] */;
    %1271 = cast(%var_12828, dtype="float64") /* ty=Tensor[(432), float64] */;
    %1272 = reshape(%1270, newshape=[1, 9, 3]) /* ty=Tensor[(1, 9, 3), float64] */;
    %1273 = reshape(%1271, newshape=[16, 9, 3]) /* ty=Tensor[(16, 9, 3), float64] */;
    %1274 = @func_7877(%1272, %1273) /* ty=(Tensor[(16, 9, 3), float64], Tensor[(16, 9, 3), int8]) */;
    %1275 = cast(%var_12852, dtype="float64") /* ty=Tensor[(468), float64] */;
    %1276 = reshape(%1275, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %1277 = @func_1817(%1276) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 13), float64], float64, Tensor[(468), float64], Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16]) */;
    %1278 = @func_2882() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
    %1279 = @func_7723() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %1280 = @func_11180() /* ty=Tensor[(9, 13, 5), float32] */;
    %1281 = %1274.0;
    %1282 = %1277.3;
    %1283 = %1278.0;
    %1284 = %1279.2;
    %1285 = @func_6934() /* ty=Tensor[(15, 13, 5), float64] */;
    (%1280, %1281, meta[relay.Constant][45] /* ty=Tensor[(27), float64] */, %var_12828, %1282, %var_12852, %1283, %1284, %1285)
  };
  %1286(%var_12878, %var_12879) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(16, 9, 3), float64], Tensor[(27), float64], Tensor[(432), float64], Tensor[(468), float64], Tensor[(468), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 13, 5), float64]) */
}

def @func_1782() -> (Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(2, 3, 10), uint32], Tensor[(60), bool], Tensor[(9, 2, 3), bool]) {
  %1287 = @func_935() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), uint16]) */;
  %1288 = cast(meta[relay.Constant][46] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1289 = reshape(%1288, newshape=[]) /* ty=uint8 */;
  %1290 = @func_721(%1289) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(9, 2, 3), bool], uint8) */;
  %1291 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1292 = cast(meta[relay.Constant][46] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1293 = reshape(%1292, newshape=[]) /* ty=uint8 */;
  %1294 = @func_434(%1293) /* ty=(Tensor[(9, 2, 3), bool],) */;
  %1295 = cast(meta[relay.Constant][47] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %1296 = cast(meta[relay.Constant][47] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %1297 = reshape(%1295, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %1298 = reshape(%1296, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %1299 = @func_237(%1297, %1298) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %1300 = cast(meta[relay.Constant][46] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1301 = reshape(%1300, newshape=[]) /* ty=uint8 */;
  %1302 = @func_434(%1301) /* ty=(Tensor[(9, 2, 3), bool],) */;
  %1303 = %1287.1;
  %1304 = %1290.1;
  %1305 = %1291.0;
  %1306 = @func_1528() /* ty=Tensor[(12, 3, 14), float32] */;
  %1307 = %1294.0;
  %1308 = %1299.0;
  %1309 = %1302.0;
  (%1303, %1304, meta[relay.Constant][46] /* ty=uint8 */, %1305, %1306, %1307, %1308, meta[relay.Constant][47] /* ty=Tensor[(60), bool] */, %1309)
}

def @func_10483() -> (Tensor[(11, 10, 9), float64], Tensor[(2, 3, 10), bool], Tensor[(60), bool]) {
  %1310 = cast(meta[relay.Constant][48] /* ty=Tensor[(11, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 9), float64] */;
  %1311 = cast(meta[relay.Constant][49] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %1312 = cast(meta[relay.Constant][49] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %1313 = reshape(%1311, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %1314 = reshape(%1312, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), bool] */;
  %1315 = @func_237(%1313, %1314) /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), bool]) */;
  %1316 = log2(%1310) /* ty=Tensor[(11, 10, 9), float64] */;
  %1317 = %1315.1;
  (%1316, %1317, meta[relay.Constant][49] /* ty=Tensor[(60), bool] */)
}

def @func_11920(%var_11918: uint8) -> (Tensor[(12, 3, 14), uint16], uint8, uint8) {
  @func_11917(%var_11918) /* ty=(Tensor[(12, 3, 14), uint16], uint8, uint8) */
}

def @func_3960() -> Tensor[(12, 3, 14), float32] {
  %1319 = fn () -> Tensor[(12, 3, 14), float32] {
    %1318 = @func_2383() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) */;
    %1318.4
  };
  %1319() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_13083(%var_13032: Tensor[(364), uint16]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(26, 2), uint16], Tensor[(12, 3, 14), uint16], Tensor[(4, 13, 7), int8], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) {
  %1320 = @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1321 = @func_9619() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1322 = @func_4665() /* ty=(Tensor[(2, 3, 10), uint32],) */;
  %1323 = @func_11448() /* ty=Tensor[(12, 3, 14), float32] */;
  %1324 = cast(%1323, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %1325 = reshape(%1324, newshape=[12, 3, 14]) /* ty=Tensor[(12, 3, 14), float32] */;
  %1326 = @func_3861(%1325) /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1327 = @func_8148() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(12, 3, 14), uint16]) */;
  %1328 = cast(meta[relay.Constant][50] /* ty=Tensor[(26, 2), uint16] */, dtype="uint16") /* ty=Tensor[(26, 2), uint16] */;
  %1329 = cast(%var_13032, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %1330 = reshape(%1328, newshape=[4, 13, 1]) /* ty=Tensor[(4, 13, 1), uint16] */;
  %1331 = reshape(%1329, newshape=[4, 13, 7]) /* ty=Tensor[(4, 13, 7), uint16] */;
  %1332 = @func_9609(%1330, %1331) /* ty=(Tensor[(4, 13, 7), bool],) */;
  %1333 = %1332.0;
  %1334 = cast(%var_13032, dtype="int8") /* ty=Tensor[(364), int8] */;
  %1335 = shape_of(%1333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1336 = cast(%1333, dtype="int8") /* ty=Tensor[(4, 13, 7), int8] */;
  %1337 = dyn.reshape(%1334, %1335, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1338 = @func_9409() /* ty=(Tensor[(15, 13, 5), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1339 = @func_2505() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1340 = @func_5244() /* ty=(Tensor[(12, 3, 14), float32],) */;
  %1341 = %1320.0;
  %1342 = %1321.0;
  %1343 = %1322.0;
  %1344 = %1326.0;
  %1345 = %1327.0;
  %1346 = logical_xor(%1336, %1337) /* ty=Tensor[(4, 13, 7), int8] */;
  %1347 = %1338.2;
  %1348 = %1339.0;
  %1349 = %1340.0;
  (%1341, %1342, %1323, %1343, %1344, meta[relay.Constant][50] /* ty=Tensor[(26, 2), uint16] */, %1345, %1346, %1347, %1348, %1349)
}

def @func_671() -> (Tensor[(12, 3, 14), uint16],) {
  %1350 = cast(meta[relay.Constant][51] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1351 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 3, 14), uint16] */, dtype="uint16") /* ty=Tensor[(12, 3, 14), uint16] */;
  %1352 = right_shift(%1350, %1351) /* ty=Tensor[(12, 3, 14), uint16] */;
  (%1352,)
}

def @func_8032(%var_8030: Tensor[(16, 16, 9), uint16]) -> (Tensor[(16, 16, 9), uint16], Tensor[(2, 3, 10), bool], Tensor[(60), bool]) {
  @func_8029(%var_8030) /* ty=(Tensor[(16, 16, 9), uint16], Tensor[(2, 3, 10), bool], Tensor[(60), bool]) */
}

def @func_8297() -> Tensor[(12, 3, 14), uint16] {
  %1354 = fn () -> Tensor[(12, 3, 14), uint16] {
    %1353 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1353.0
  };
  %1354() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_14924(%var_14922: Tensor[(2, 11, 8), uint8]) -> (Tensor[(2, 11, 8), bool],) {
  @func_14921(%var_14922) /* ty=(Tensor[(2, 11, 8), bool],) */
}

def @func_2480() -> (Tensor[(12, 3, 14), uint16],) {
  %1355 = @func_1135() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%1355,)
}

def @func_4647() -> Tensor[(12, 3, 14), uint16] {
  %1356 = fn () -> Tensor[(12, 3, 14), uint16] {
    @func_2950() /* ty=Tensor[(12, 3, 14), uint16] */
  };
  %1356() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_7069(%var_7068: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16]) {
  %1367 = fn (%var_7053: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16]) {
    %1357 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1358 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1359 = cast(%var_7053, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %1360 = reshape(%1359, newshape=[10, 10, 10]) /* ty=Tensor[(10, 10, 10), float64] */;
    %1361 = @func_775(%1360) /* ty=(Tensor[(10, 10, 10), float64], Tensor[(2, 3, 10), uint32], Tensor[(15, 4), bool]) */;
    %1362 = @func_6157() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
    %1363 = %1357.0;
    %1364 = %1358.0;
    %1365 = %1361.2;
    %1366 = %1362.0;
    (%1363, %1364, %1365, %var_7053, %1366)
  };
  %1367(%var_7068) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(15, 4), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16]) */
}

def @func_7436(%var_7434: uint64, %var_7435: Tensor[(14, 1, 1), uint64]) -> Tensor[(14, ?, ?), uint64] {
  @func_7432(%var_7434, %var_7435) /* ty=Tensor[(14, ?, ?), uint64] */
}

def @func_9092() -> (Tensor[(12, 3, 14), uint16], Tensor[(30, 2), bool], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %1368 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 60), bool] */, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
  %1369 = reshape(%1368, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %1370 = @func_3726(%1369) /* ty=(Tensor[(12, 3, 14), bool], Tensor[(12, 3, 14), float64], Tensor[(1000), float64], float64, float64, Tensor[(30, 2), bool]) */;
  %1371 = %1370.5;
  %1372 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 60), bool] */, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
  %1373 = shape_of(%1371, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1374 = cast(%1371, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %1375 = dyn.reshape(%1372, %1373, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1376 = @func_5522() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1377 = @func_7115() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1378 = logical_and(%1374, %1375) /* ty=Tensor[(30, 2), bool] */;
  %1379 = @func_9026() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1380 = %1376.2;
  (%1377, %1378, %1379, %1380)
}

def @func_13861() -> Tensor[(12, 3, 14), uint16] {
  %1381 = @func_5981() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1381.1
}

def @func_6548() -> Tensor[(12, 3, 14), uint16] {
  %1382 = fn () -> Tensor[(12, 3, 14), uint16] {
    @func_2287() /* ty=Tensor[(12, 3, 14), uint16] */
  };
  %1382() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_6424() -> Tensor[(12, 3, 14), float32] {
  @func_1422() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_7723() -> (Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %1383 = @func_5981() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1384 = @func_5981() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1385 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1386 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
  %1387 = %1383.0;
  %1388 = %1384.1;
  %1389 = %1385.0;
  (%1386, %1387, %1388, %1389)
}

def @func_7286(%var_7284: Tensor[(60), uint32], %var_7285: Tensor[(468), float64]) -> (Tensor[(1000), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], float64, Tensor[(60), uint32], Tensor[(468), float64], Tensor[(12, 3, 14), uint16]) {
  %1410 = fn (%var_7267: Tensor[(60), uint32], %var_7268: Tensor[(468), float64]) -> (Tensor[(1000), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], float64, Tensor[(60), uint32], Tensor[(468), float64], Tensor[(12, 3, 14), uint16]) {
    %1390 = @func_5648() /* ty=(Tensor[(1000), float32],) */;
    %1391 = @func_6300() /* ty=(uint8,) */;
    %1392 = %1390.0;
    %1393 = cast(%1392, dtype="float32") /* ty=Tensor[(1000), float32] */;
    %1394 = reshape(%1393, newshape=[1000]) /* ty=Tensor[(1000), float32] */;
    %1395 = @func_6834(%1394) /* ty=(Tensor[(2, 3, 10), bool], Tensor[(1000), float64], Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16], float64, float64, Tensor[(468, 1000), bool], Tensor[(12, 3, 14), uint16]) */;
    %1396 = cast(%var_7267, dtype="uint32") /* ty=Tensor[(60), uint32] */;
    %1397 = %1391.0;
    %1398 = cast(%1397, dtype="float64") /* ty=float64 */;
    %1399 = cast(%var_7268, dtype="float64") /* ty=Tensor[(468), float64] */;
    %1400 = reshape(%1396, newshape=[2, 3, 10]) /* ty=Tensor[(2, 3, 10), uint32] */;
    %1401 = reshape(%1398, newshape=[]) /* ty=float64 */;
    %1402 = reshape(%1399, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %1403 = @func_4490(%1400, %1401, %1402) /* ty=(Tensor[(2, 3, 10), bool], float64, Tensor[(468), float64], Tensor[(1000), float64]) */;
    %1404 = @func_5171() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1405 = @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */;
    %1406 = @func_7155() /* ty=Tensor[(12, 3, 14), uint16] */;
    %1407 = %1395.7;
    %1408 = %1403.1;
    %1409 = %1404.0;
    (%1392, %1397, %1405, %1406, %1407, %1408, %var_7267, %var_7268, %1409)
  };
  %1410(%var_7284, %var_7285) /* ty=(Tensor[(1000), float32], uint8, Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], float64, Tensor[(60), uint32], Tensor[(468), float64], Tensor[(12, 3, 14), uint16]) */
}

def @func_11775() -> Tensor[(12, 3, 14), uint16] {
  @func_10408() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_2950() -> Tensor[(12, 3, 14), uint16] {
  %1411 = @func_2505() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1411.0
}

def @func_10148() -> (Tensor[(2, 3, 10), uint32],) {
  %1412 = @func_6879() /* ty=Tensor[(2, 3, 10), uint32] */;
  (%1412,)
}

def @func_2245(%var_2243: uint8) -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], Tensor[(9, 2, 3), bool], uint8) {
  %1413 = @func_1008() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1414 = @func_1683() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1415 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1416 = cast(meta[relay.Constant][54] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1417 = reshape(%1416, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %1418 = @func_1817(%1417) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 13), float64], float64, Tensor[(468), float64], Tensor[(3, 20), bool], Tensor[(12, 3, 14), uint16]) */;
  %1419 = cast(%var_2243, dtype="uint8") /* ty=uint8 */;
  %1420 = reshape(%1419, newshape=[]) /* ty=uint8 */;
  %1421 = @func_434(%1420) /* ty=(Tensor[(9, 2, 3), bool],) */;
  %1422 = %1413.0;
  %1423 = %1414.0;
  %1424 = %1415.0;
  %1425 = %1418.3;
  %1426 = %1421.0;
  (%1422, %1423, %1424, %1425, meta[relay.Constant][54] /* ty=Tensor[(468), float64] */, %1426, %var_2243)
}

def @func_1001() -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) {
  @func_999() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(1000), float64], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float64]) */
}

def @func_5201() -> (Tensor[(2, 3, 10), uint32],) {
  %1428 = fn () -> (Tensor[(2, 3, 10), uint32],) {
    %1427 = @func_3258() /* ty=Tensor[(2, 3, 10), uint32] */;
    (%1427,)
  };
  %1428() /* ty=(Tensor[(2, 3, 10), uint32],) */
}

def @func_10743(%var_10735: Tensor[(11, 16, 14), float64]) -> (Tensor[(11, 16, 14), float64],) {
  %1429 = cast(%var_10735, dtype="float64") /* ty=Tensor[(11, 16, 14), float64] */;
  %1430 = sin(%1429) /* ty=Tensor[(11, 16, 14), float64] */;
  (%1430,)
}

def @func_12146() -> Tensor[(12, 3, 14), uint16] {
  %1432 = fn () -> Tensor[(12, 3, 14), uint16] {
    %1431 = @func_11037() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1431.0
  };
  %1432() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_3557() -> (Tensor[(1000), float64],) {
  %1433 = @func_2469() /* ty=(Tensor[(1000), float64],) */;
  %1434 = %1433.0;
  (%1434,)
}

def @func_14723() -> Tensor[(1000), float64] {
  @func_14721() /* ty=Tensor[(1000), float64] */
}

def @func_10900() -> (uint8, Tensor[(6, 16, 7), float64], Tensor[(168, 4), float64]) {
  %1440 = fn () -> (uint8, Tensor[(6, 16, 7), float64], Tensor[(168, 4), float64]) {
    %1435 = @func_6300() /* ty=(uint8,) */;
    %1436 = cast(meta[relay.Constant][55] /* ty=Tensor[(168, 4), float64] */, dtype="float64") /* ty=Tensor[(168, 4), float64] */;
    %1437 = reshape(%1436, newshape=[6, 16, 7]) /* ty=Tensor[(6, 16, 7), float64] */;
    %1438 = %1435.0;
    %1439 = @func_7946(%1437) /* ty=Tensor[(6, 16, 7), float64] */;
    (%1438, %1439, meta[relay.Constant][55] /* ty=Tensor[(168, 4), float64] */)
  };
  %1440() /* ty=(uint8, Tensor[(6, 16, 7), float64], Tensor[(168, 4), float64]) */
}

def @func_13713() -> Tensor[(2, 3, 10), uint32] {
  %1441 = @func_13414() /* ty=(Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16]) */;
  %1441.0
}

def @func_6671() -> (Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(1000), bool]) {
  %1453 = fn () -> (Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(1000), bool]) {
    %1442 = @func_671() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1443 = cast(-6.62728f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1444 = reshape(%1443, newshape=[]) /* ty=float64 */;
    %1445 = @func_5265(%1444) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint64], float64, Tensor[(78, 6), float64]) */;
    %1446 = @func_2469() /* ty=(Tensor[(1000), float64],) */;
    %1447 = %1446.0;
    %1448 = cast(%1447, dtype="bool") /* ty=Tensor[(1000), bool] */;
    %1449 = cast(-6.62728f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %1450 = %1442.0;
    %1451 = %1445.3;
    %1452 = equal(%1448, %1449) /* ty=Tensor[(1000), bool] */;
    (%1450, %1451, %1452)
  };
  %1453() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(78, 6), float64], Tensor[(1000), bool]) */
}

def @func_6978() -> (Tensor[(2, 3, 10), uint32],) {
  %1454 = @func_6879() /* ty=Tensor[(2, 3, 10), uint32] */;
  (%1454,)
}

def @func_807() -> (Tensor[(12, 3, 14), uint16],) {
  @func_805() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_4667() -> (Tensor[(2, 3, 10), uint32],) {
  @func_4665() /* ty=(Tensor[(2, 3, 10), uint32],) */
}

def @func_15194() -> (Tensor[(12, 3, 14), uint16],) {
  @func_15192() /* ty=(Tensor[(12, 3, 14), uint16],) */
}

def @func_6017() -> Tensor[(12, 3, 14), uint16] {
  %1455 = @func_4329() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1455.0
}

def @func_9987() -> Tensor[(12, 3, 14), uint16] {
  %1457 = fn () -> Tensor[(12, 3, 14), uint16] {
    %1456 = @func_7578() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], uint8) */;
    %1456.0
  };
  %1457() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_5060() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) {
  %1458 = @func_3110() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1459 = %1458.1;
  %1460 = @func_1422() /* ty=Tensor[(12, 3, 14), float32] */;
  (%1459, %1460)
}

def @func_14942() -> Tensor[(12, 3, 14), uint16] {
  %1462 = fn () -> Tensor[(12, 3, 14), uint16] {
    %1461 = @func_12213() /* ty=(Tensor[(2, 1, 6), float32], Tensor[(12, 3, 14), uint16], Tensor[(1000), float64]) */;
    %1461.1
  };
  %1462() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_5680() -> (Tensor[(12, 3, 14), float32],) {
  %1465 = fn () -> (Tensor[(12, 3, 14), float32],) {
    %1463 = @func_5244() /* ty=(Tensor[(12, 3, 14), float32],) */;
    %1464 = %1463.0;
    (%1464,)
  };
  %1465() /* ty=(Tensor[(12, 3, 14), float32],) */
}

def @func_13171() -> Tensor[(12, 3, 14), uint16] {
  @func_9026() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_10680(%var_10612: Tensor[(2, 16, 14), uint32]) -> (Tensor[(2, 16, 14), bool], Tensor[(12, 3, 14), float32]) {
  %1466 = cast(meta[relay.Constant][56] /* ty=Tensor[(2, 16, 14), uint32] */, dtype="uint32") /* ty=Tensor[(2, 16, 14), uint32] */;
  %1467 = shape_of(%var_10612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1468 = cast(%var_10612, dtype="uint32") /* ty=Tensor[(2, 16, 14), uint32] */;
  %1469 = dyn.reshape(%1466, %1467, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1470 = maximum(%1468, %1469) /* ty=Tensor[(2, 16, 14), uint32] */;
  %1471 = cast(meta[relay.Constant][57] /* ty=Tensor[(2, 16, 14), uint32] */, dtype="bool") /* ty=Tensor[(2, 16, 14), bool] */;
  %1472 = shape_of(%1470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1473 = cast(%1470, dtype="bool") /* ty=Tensor[(2, 16, 14), bool] */;
  %1474 = dyn.reshape(%1471, %1472, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1475 = greater(%1473, %1474) /* ty=Tensor[(2, 16, 14), bool] */;
  %1476 = @func_4009() /* ty=Tensor[(12, 3, 14), float32] */;
  (%1475, %1476)
}

def @func_14361() -> (Tensor[(12, 3, 14), uint16],) {
  %1477 = @func_13467() /* ty=Tensor[(12, 3, 14), uint16] */;
  (%1477,)
}

def @func_2915(%var_2913: float64, %var_2914: Tensor[(60), bool]) -> (Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) {
  %1490 = fn (%var_2897: float64, %var_2898: Tensor[(60), bool]) -> (Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) {
    %1478 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1479 = cast(meta[relay.Constant][58] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %1480 = cast(%var_2897, dtype="float64") /* ty=float64 */;
    %1481 = cast(%var_2898, dtype="bool") /* ty=Tensor[(60), bool] */;
    %1482 = reshape(%1479, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %1483 = reshape(%1480, newshape=[]) /* ty=float64 */;
    %1484 = reshape(%1481, newshape=[60]) /* ty=Tensor[(60), bool] */;
    %1485 = @func_2032(%1482, %1483, %1484) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(60), bool], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) */;
    %1486 = @func_1580() /* ty=(Tensor[(12, 3, 14), uint16],) */;
    %1487 = %1478.0;
    %1488 = %1485.2;
    %1489 = %1486.0;
    (%1487, %1488, meta[relay.Constant][58] /* ty=Tensor[(468), float64] */, %var_2897, %var_2898, %1489)
  };
  %1490(%var_2913, %var_2914) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(468), float64], Tensor[(468), float64], float64, Tensor[(60), bool], Tensor[(12, 3, 14), uint16]) */
}

def @func_7157() -> Tensor[(12, 3, 14), uint16] {
  @func_7155() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_4994(%var_4992: float64) -> (Tensor[(12, 3, 14), uint16], Tensor[(60), bool], float64, Tensor[(60), bool]) {
  @func_4991(%var_4992) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(60), bool], float64, Tensor[(60), bool]) */
}

def @func_15457() -> (Tensor[(12, 3, 14), float32],) {
  %1492 = fn () -> (Tensor[(12, 3, 14), float32],) {
    %1491 = @func_3959() /* ty=Tensor[(12, 3, 14), float32] */;
    (%1491,)
  };
  %1492() /* ty=(Tensor[(12, 3, 14), float32],) */
}

def @func_3998() -> Tensor[(1000), float64] {
  %1499 = fn () -> Tensor[(1000), float64] {
    %1493 = @func_3557() /* ty=(Tensor[(1000), float64],) */;
    %1494 = %1493.0;
    %1495 = cast(meta[relay.Constant][59] /* ty=Tensor[(1000), float64] */, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %1496 = shape_of(%1494, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1497 = cast(%1494, dtype="float64") /* ty=Tensor[(1000), float64] */;
    %1498 = dyn.reshape(%1495, %1496, newshape=[]) /* ty=Tensor[(?), float64] */;
    mod(%1497, %1498) /* ty=Tensor[(1000), float64] */
  };
  %1499() /* ty=Tensor[(1000), float64] */
}

def @func_11939() -> (Tensor[(12, 3, 14), float32], Tensor[(12, 3, 14), uint16]) {
  %1500 = @func_5981() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */;
  %1501 = @func_9113() /* ty=Tensor[(12, 3, 14), float32] */;
  %1502 = %1500.0;
  (%1501, %1502)
}

def @func_11492() -> (Tensor[(1000), float32],) {
  %1503 = @func_8579() /* ty=Tensor[(1000), float32] */;
  (%1503,)
}

def @func_8362() -> Tensor[(12, 3, 14), uint16] {
  @func_8360() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_1655() -> Tensor[(12, 3, 14), uint16] {
  @func_1653() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_7344() -> (Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), bool]) {
  @func_7342() /* ty=(Tensor[(12, 3, 14), float32], Tensor[(9, 2, 3), bool], Tensor[(12, 3, 14), bool]) */
}

def @func_5754(%var_5752: Tensor[(1000), float64]) -> (Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64]) {
  @func_5751(%var_5752) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(1000), int64], Tensor[(1000), float64]) */
}

def @func_14201() -> (Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), float32], Tensor[(364), uint16]) {
  %1504 = @func_11328() /* ty=(Tensor[(10, 8, 4), float32], Tensor[(12, 3, 14), uint16]) */;
  %1505 = cast(meta[relay.Constant][60] /* ty=Tensor[(364), uint16] */, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %1506 = reshape(%1505, newshape=[364]) /* ty=Tensor[(364), uint16] */;
  %1507 = @func_13083(%1506) /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32], Tensor[(2, 3, 10), uint32], Tensor[(12, 3, 14), uint16], Tensor[(26, 2), uint16], Tensor[(12, 3, 14), uint16], Tensor[(4, 13, 7), int8], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), float32]) */;
  %1508 = %1504.0;
  %1509 = %1507.2;
  (%1508, %1509, meta[relay.Constant][60] /* ty=Tensor[(364), uint16] */)
}

def @func_10408() -> Tensor[(12, 3, 14), uint16] {
  @func_9026() /* ty=Tensor[(12, 3, 14), uint16] */
}

def @func_3112() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  @func_3110() /* ty=(Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) */
}

def @func_3110() -> (Tensor[(12, 3, 14), uint16], Tensor[(12, 3, 14), uint16]) {
  %1510 = @func_1104() /* ty=(Tensor[(12, 3, 14), uint16],) */;
  %1511 = @func_2667() /* ty=Tensor[(12, 3, 14), uint16] */;
  %1512 = %1510.0;
  (%1511, %1512)
}

def @func_434(%var_412: uint8) -> (Tensor[(9, 2, 3), bool],) {
  %1513 = cast(%var_412, dtype="bool") /* ty=bool */;
  %1514 = cast(meta[relay.Constant][61] /* ty=Tensor[(9, 2, 3), uint8] */, dtype="bool") /* ty=Tensor[(9, 2, 3), bool] */;
  %1515 = equal(%1513, %1514) /* ty=Tensor[(9, 2, 3), bool] */;
  (%1515,)
}

def @func_12458() -> Tensor[(1000), float32] {
  %1517 = fn () -> Tensor[(1000), float32] {
    %1516 = @func_11492() /* ty=(Tensor[(1000), float32],) */;
    %1516.0
  };
  %1517() /* ty=Tensor[(1000), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen680/build/output.py:5169: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen680/build/output.py", line 5174, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(120) tvmgen_default_fused_divide_kernel0(double* __restrict__ T_divide, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_divide[(((int)threadIdx.x))] = (placeholder[(0)] / placeholder1[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(120) tvmgen_default_fused_cast_log_kernel0(float* __restrict__ T_log, double* __restrict__ placeholder) {
  T_log[(((int)threadIdx.x))] = __logf(((float)placeholder[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

