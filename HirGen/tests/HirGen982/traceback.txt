==========mod==========
#[version = "0.0.5"]
def @func_10835(%var_10770: Tensor[(3375), float64]) -> (Tensor[(130), int32], Tensor[(455), uint16], Tensor[(455), uint16], Tensor[(130), int32], Tensor[(2, 5, 13), int32], Tensor[(784), float64], Tensor[(12, 5, 130), float32], Tensor[(3375), float32], Tensor[(3375), float64]) {
  %0 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(455), uint16] */, dtype="uint16") /* ty=Tensor[(455), uint16] */;
  %2 = reshape(%1, newshape=[455]) /* ty=Tensor[(455), uint16] */;
  %3 = @func_4445(%2) /* ty=(Tensor[(2, 5, 13), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) */;
  %4 = @func_5350() /* ty=(Tensor[(130), int32],) */;
  %5 = %4.0;
  %6 = cast(%5, dtype="int32") /* ty=Tensor[(130), int32] */;
  %7 = reshape(%6, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %8 = @func_3762(%7) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) */;
  %9 = @func_9533() /* ty=(Tensor[(130), int32], Tensor[(78), float32], Tensor[(784), float64], Tensor[(78), float32]) */;
  %10 = @func_8564() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(12, 5, 130), float32]) */;
  %11 = cast(%var_10770, dtype="float32") /* ty=Tensor[(3375), float32] */;
  %12 = sqrt(%11) /* ty=Tensor[(3375), float32] */;
  %13 = cast(%var_10770, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %14 = reshape(%13, newshape=[225, 15]) /* ty=Tensor[(225, 15), float64] */;
  %15 = @func_1672(%14) /* ty=(Tensor[(12, 14, 5), float64], Tensor[(3375), float64], Tensor[(8, 20), float64], Tensor[(225, 15), float64], Tensor[(130), int32]) */;
  %16 = %15.3;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(225, 15), float32] */;
  %18 = shape_of(%12, dtype="int32") /* ty=Tensor[(1), int32] */;
  %19 = cast(%12, dtype="float32") /* ty=Tensor[(3375), float32] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?), float32] */;
  %21 = cast(%12, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %22 = %0.0;
  %23 = %3.2;
  %24 = %8.1;
  %25 = %9.2;
  %26 = %10.2;
  %27 = floor_divide(%19, %20) /* ty=Tensor[(3375), float32] */;
  %28 = atanh(%21) /* ty=Tensor[(3375), float64] */;
  (%22, %23, meta[relay.Constant][0] /* ty=Tensor[(455), uint16] */, %5, %24, %25, %26, %27, %28)
}

def @func_11002(%var_10986: Tensor[(12, 1540), float32]) -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 1540), float64], Tensor[(130), int32]) {
  %29 = @func_10433() /* ty=(Tensor[(130), int32],) */;
  %30 = @func_4659() /* ty=(Tensor[(130), int32],) */;
  %31 = @func_9131() /* ty=(Tensor[(130), int32], Tensor[(1, 1540), float32]) */;
  %32 = @func_8864() /* ty=(Tensor[(784), float64], Tensor[(10, 14, 11), float32], Tensor[(1, 1540), float32]) */;
  %33 = %32.2;
  %34 = cast(%33, dtype="float64") /* ty=Tensor[(1, 1540), float64] */;
  %35 = cast(%var_10986, dtype="float64") /* ty=Tensor[(12, 1540), float64] */;
  %36 = %30.0;
  %37 = cast(%36, dtype="int32") /* ty=Tensor[(130), int32] */;
  %38 = reshape(%37, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %39 = @func_2877(%38) /* ty=(Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(16, 10, 1), float64], Tensor[(160), float64], Tensor[(2, 5, 13), int32]) */;
  %40 = %29.0;
  %41 = %31.0;
  %42 = divide(%34, %35) /* ty=Tensor[(12, 1540), float64] */;
  %43 = %39.2;
  (%40, %36, %41, %42, %43)
}

def @func_12524() -> (Tensor[(78), float32],) {
  %44 = @func_10291() /* ty=Tensor[(78), float32] */;
  (%44,)
}

def @func_12790() -> (Tensor[(78), float32],) {
  %45 = @func_11798() /* ty=(Tensor[(78), float32],) */;
  %46 = %45.0;
  (%46,)
}

def @func_3354() -> (Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) {
  %47 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  %48 = @func_2783() /* ty=Tensor[(12, 5, ?), bool] */;
  (%47, %48)
}

def @func_9229() -> (Tensor[(78), float32], Tensor[(12, 5, 130), uint8]) {
  %49 = @func_7760() /* ty=(Tensor[(130), int32], Tensor[(78), float32]) */;
  %50 = @func_5440() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */;
  %51 = %50.1;
  %52 = @func_5687() /* ty=(Tensor[(12, 5, 78), int16], Tensor[(12, 5, ?), float32], Tensor[(130), int32]) */;
  %53 = %52.2;
  %54 = cast(%51, dtype="uint8") /* ty=Tensor[(12, 5, 130), uint8] */;
  %55 = cast(%53, dtype="uint8") /* ty=Tensor[(130), uint8] */;
  %56 = %49.1;
  %57 = add(%54, %55) /* ty=Tensor[(12, 5, 130), uint8] */;
  (%56, %57)
}

def @func_4559(%var_4548: Tensor[(130), int32]) -> (Tensor[(12, 5, ?), float64], Tensor[(7, 1, 4), float64], Tensor[(14, 2), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(12, 5, ?), float64]) {
  %58 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 2), float64] */;
  %59 = reshape(%58, newshape=[7, 1, 4]) /* ty=Tensor[(7, 1, 4), float64] */;
  %60 = @func_2039(%59) /* ty=(Tensor[(7, 1, 4), float64],) */;
  %61 = cast(%var_4548, dtype="int32") /* ty=Tensor[(130), int32] */;
  %62 = reshape(%61, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %63 = @func_3283(%62) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %64 = @func_3354() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) */;
  %65 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  %66 = %60.0;
  %67 = %63.1;
  %68 = %64.0;
  (%65, %66, meta[relay.Constant][1] /* ty=Tensor[(14, 2), float64] */, %67, %var_4548, %68)
}

def @func_9907() -> (Tensor[(15, 15, 15), float64], Tensor[(12, 5, ?), bool]) {
  %69 = @func_7486() /* ty=(Tensor[(15, 15, 15), float64],) */;
  %70 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
  %71 = %69.0;
  %72 = %70.0;
  (%71, %72)
}

def @func_4983(%var_4969: Tensor[(12, 5, 11), bool]) -> (Tensor[(12, 5, 11), float64],) {
  %73 = @func_2783() /* ty=Tensor[(12, 5, ?), bool] */;
  %74 = cast(%73, dtype="float64") /* ty=Tensor[(12, 5, ?), float64] */;
  %75 = cast(%var_4969, dtype="float64") /* ty=Tensor[(12, 5, 11), float64] */;
  %76 = floor_mod(%74, %75) /* ty=Tensor[(12, 5, 11), float64] */;
  (%76,)
}

def @func_4153() -> (Tensor[(78), float32], Tensor[(15, 15, 15), float64]) {
  %77 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %78 = @func_4007() /* ty=Tensor[(78), float32] */;
  %79 = %77.0;
  (%78, %79)
}

def @func_10952(%var_10944: Tensor[(78), float32]) -> (Tensor[(78), bool], Tensor[(78), float32]) {
  %80 = @func_3697() /* ty=Tensor[(78), float32] */;
  %81 = cast(%var_10944, dtype="bool") /* ty=Tensor[(78), bool] */;
  %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(1), int32] */;
  %83 = cast(%80, dtype="bool") /* ty=Tensor[(78), bool] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?), bool] */;
  %85 = @func_5602() /* ty=(Tensor[(78), float32],) */;
  %86 = less_equal(%83, %84) /* ty=Tensor[(78), bool] */;
  %87 = %85.0;
  (%86, %87)
}

def @func_7676() -> Tensor[(130), int32] {
  %88 = @func_7064() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 5, ?), bool]) */;
  %88.0
}

def @func_507(%var_481: Tensor[(6, 8, 3), float64]) -> (Tensor[(6, 8, 3), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) {
  %89 = cast(%var_481, dtype="float64") /* ty=Tensor[(6, 8, 3), float64] */;
  %90 = cast(meta[relay.Constant][2] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %91 = reshape(%90, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %92 = @func_440(%91) /* ty=(Tensor[(15, 15, 15), float64],) */;
  %93 = sin(%89) /* ty=Tensor[(6, 8, 3), float64] */;
  %94 = %92.0;
  (%93, %94, meta[relay.Constant][2] /* ty=Tensor[(3375), float64] */)
}

def @func_4383() -> Tensor[(78), float32] {
  @func_4007() /* ty=Tensor[(78), float32] */
}

def @func_5949(%var_5941: Tensor[(130), int32]) -> (Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  %95 = cast(%var_5941, dtype="int32") /* ty=Tensor[(130), int32] */;
  %96 = reshape(%95, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %97 = @func_1068(%96) /* ty=(Tensor[(2, 5, 13), int32],) */;
  %98 = @func_4383() /* ty=Tensor[(78), float32] */;
  %99 = %97.0;
  (%98, %99, %var_5941)
}

def @func_2733(%var_2704: Tensor[(2, 5, 13), int32]) -> (Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) {
  %100 = cast(meta[relay.Constant][3] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %101 = reshape(%100, newshape=[16, 7, 7]) /* ty=Tensor[(16, 7, 7), float64] */;
  %102 = @func_1508(%101) /* ty=(Tensor[(16, 7, 7), float32],) */;
  %103 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %104 = %103.1;
  %105 = cast(%var_2704, dtype="int32") /* ty=Tensor[(2, 5, 13), int32] */;
  %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%104, dtype="int32") /* ty=Tensor[(2, 5, 13), int32] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %109 = @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */;
  %110 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %111 = %102.0;
  %112 = maximum(%107, %108) /* ty=Tensor[(2, 5, 13), int32] */;
  %113 = %109.1;
  %114 = %110.2;
  (%111, meta[relay.Constant][3] /* ty=Tensor[(784), float64] */, %112, %113, %114)
}

def @func_4638() -> (Tensor[(12, 5, ?), bool],) {
  %115 = @func_3482() /* ty=Tensor[(12, 5, ?), bool] */;
  (%115,)
}

def @func_6891(%var_6876: Tensor[(6, 4, 9), float32]) -> (Tensor[(6, 4, 9), float32], Tensor[(12, 5, ?), float32]) {
  %116 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 4, 9), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 9), float32] */;
  %117 = shape_of(%var_6876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%var_6876, dtype="float32") /* ty=Tensor[(6, 4, 9), float32] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %120 = @func_5687() /* ty=(Tensor[(12, 5, 78), int16], Tensor[(12, 5, ?), float32], Tensor[(130), int32]) */;
  %121 = floor_divide(%118, %119) /* ty=Tensor[(6, 4, 9), float32] */;
  %122 = %120.1;
  (%121, %122)
}

def @func_12458() -> (Tensor[(15, 15, 15), float64],) {
  %123 = @func_4153() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %124 = %123.1;
  (%124,)
}

def @func_9273() -> Tensor[(130), int32] {
  %125 = @func_9044() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64]) */;
  %125.0
}

def @func_5140() -> (Tensor[(130), int32],) {
  %126 = @func_3982() /* ty=(Tensor[(130), int32],) */;
  %127 = %126.0;
  (%127,)
}

def @func_8221() -> (Tensor[(12, 5, ?), bool],) {
  %128 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
  %129 = %128.1;
  (%129,)
}

def @func_8864() -> (Tensor[(784), float64], Tensor[(10, 14, 11), float32], Tensor[(1, 1540), float32]) {
  %130 = @func_6306() /* ty=(Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) */;
  %131 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 1540), float32] */, dtype="float32") /* ty=Tensor[(1, 1540), float32] */;
  %132 = reshape(%131, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %133 = %130.1;
  %134 = @func_6235(%132) /* ty=Tensor[(10, 14, 11), float32] */;
  (%133, %134, meta[relay.Constant][5] /* ty=Tensor[(1, 1540), float32] */)
}

def @func_11606() -> Tensor[(78), float32] {
  %135 = @func_8920() /* ty=(Tensor[(78), float32], Tensor[(12, 5, ?), bool]) */;
  %135.0
}

def @func_7692() -> (Tensor[(78), float32], Tensor[(130), int32]) {
  %136 = @func_6698() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */;
  %137 = @func_4007() /* ty=Tensor[(78), float32] */;
  %138 = %136.0;
  (%137, %138)
}

def @func_2877(%var_2854: Tensor[(130), int32]) -> (Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(16, 10, 1), float64], Tensor[(160), float64], Tensor[(2, 5, 13), int32]) {
  %139 = @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */;
  %140 = cast(%var_2854, dtype="int32") /* ty=Tensor[(130), int32] */;
  %141 = reshape(%140, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %142 = @func_2733(%141) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %143 = cast(%var_2854, dtype="int32") /* ty=Tensor[(130), int32] */;
  %144 = reshape(%143, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %145 = @func_2733(%144) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %146 = cast(meta[relay.Constant][6] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %147 = %145.3;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %149 = %142.4;
  %150 = cast(%149, dtype="int32") /* ty=Tensor[(130), int32] */;
  %151 = reshape(%146, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float64] */;
  %152 = reshape(%148, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %153 = reshape(%150, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %154 = @func_1132(%151, %152, %153) /* ty=(Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %155 = %154.0;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(16, 10, 1), float64] */;
  %157 = cast(%147, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %158 = cast(%var_2854, dtype="int32") /* ty=Tensor[(130), int32] */;
  %159 = reshape(%156, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float64] */;
  %160 = reshape(%157, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %161 = reshape(%158, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %162 = @func_1132(%159, %160, %161) /* ty=(Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %163 = %139.2;
  %164 = %162.3;
  (%163, %149, %var_2854, %147, %155, meta[relay.Constant][6] /* ty=Tensor[(160), float64] */, %164)
}

def @func_6098() -> Tensor[(78), float32] {
  %165 = @func_5933() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */;
  %165.1
}

def @func_5217(%var_5178: Tensor[(2, 7, 10), float32]) -> (Tensor[(2, 7, 10), float32], Tensor[(130), int32], Tensor[(78), float32]) {
  %166 = cast(%var_5178, dtype="float32") /* ty=Tensor[(2, 7, 10), float32] */;
  %167 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %168 = @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */;
  %169 = asinh(%166) /* ty=Tensor[(2, 7, 10), float32] */;
  %170 = %167.0;
  %171 = %168.3;
  (%169, %170, %171)
}

def @func_5861(%var_5857: Tensor[(144), float64]) -> (Tensor[(130), int32], Tensor[(12, 5, ?), float64], Tensor[(1, 3375), float64], Tensor[(144), float64]) {
  %172 = @func_4789() /* ty=(Tensor[(130), int32],) */;
  %173 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 3375), float64] */, dtype="float64") /* ty=Tensor[(1, 3375), float64] */;
  %174 = cast(%var_5857, dtype="float64") /* ty=Tensor[(144), float64] */;
  %175 = reshape(%173, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %176 = reshape(%174, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %177 = @func_3912(%175, %176) /* ty=(Tensor[(12, 5, ?), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(144), float64], Tensor[(2, 5, 13), int32], Tensor[(130, 1), int32], Tensor[(6, 8, 3), float32], Tensor[(7, 1, 4), float64], Tensor[(28), float64], Tensor[(130), int32]) */;
  %178 = %172.0;
  %179 = %177.0;
  (%178, %179, meta[relay.Constant][7] /* ty=Tensor[(1, 3375), float64] */, %var_5857)
}

def @func_9692(%var_9686: Tensor[(12, 5, 6), bool]) -> (Tensor[(12, 5, 6), bool],) {
  %180 = @func_3482() /* ty=Tensor[(12, 5, ?), bool] */;
  %181 = cast(%180, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
  %182 = cast(%var_9686, dtype="bool") /* ty=Tensor[(12, 5, 6), bool] */;
  %183 = logical_or(%181, %182) /* ty=Tensor[(12, 5, 6), bool] */;
  (%183,)
}

def @func_1132(%var_1096: Tensor[(16, 10, 1), float64], %var_1103: Tensor[(3375), float64], %var_1112: Tensor[(130), int32]) -> (Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  %184 = cast(%var_1096, dtype="float64") /* ty=Tensor[(16, 10, 1), float64] */;
  %185 = cast(%var_1103, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %186 = reshape(%185, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %187 = @func_440(%186) /* ty=(Tensor[(15, 15, 15), float64],) */;
  %188 = cast(%var_1112, dtype="int32") /* ty=Tensor[(130), int32] */;
  %189 = reshape(%188, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %190 = @func_1068(%189) /* ty=(Tensor[(2, 5, 13), int32],) */;
  %191 = atan(%184) /* ty=Tensor[(16, 10, 1), float64] */;
  %192 = %187.0;
  %193 = %190.0;
  (%191, %192, %var_1103, %193, %var_1112)
}

def @func_9589(%var_9580: Tensor[(6, 13, 11), float32]) -> (Tensor[(6, 13, 11), float32],) {
  %194 = cast(%var_9580, dtype="float32") /* ty=Tensor[(6, 13, 11), float32] */;
  %195 = atan(%194) /* ty=Tensor[(6, 13, 11), float32] */;
  (%195,)
}

def @func_3012() -> (Tensor[(15, 15, 15), float64], Tensor[(130), int32]) {
  %196 = @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */;
  %197 = %196.1;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %199 = reshape(%198, newshape=[225, 15]) /* ty=Tensor[(225, 15), float64] */;
  %200 = @func_1672(%199) /* ty=(Tensor[(12, 14, 5), float64], Tensor[(3375), float64], Tensor[(8, 20), float64], Tensor[(225, 15), float64], Tensor[(130), int32]) */;
  %201 = %200.4;
  (%197, %201)
}

def @func_6752() -> (Tensor[(130), int32], Tensor[(78), float32], Tensor[(12, 5, ?), bool]) {
  %202 = @func_5350() /* ty=(Tensor[(130), int32],) */;
  %203 = @func_5389() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(784), float64]) */;
  %204 = %202.0;
  %205 = @func_4623() /* ty=Tensor[(78), float32] */;
  %206 = %203.0;
  (%204, %205, %206)
}

def @func_4254() -> (Tensor[(130), int32], Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(78), float32]) {
  %207 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %208 = %207.1;
  %209 = cast(%208, dtype="int32") /* ty=Tensor[(130), int32] */;
  %210 = reshape(%209, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %211 = @func_1068(%210) /* ty=(Tensor[(2, 5, 13), int32],) */;
  %212 = @func_3697() /* ty=Tensor[(78), float32] */;
  %213 = %211.0;
  %214 = @func_3697() /* ty=Tensor[(78), float32] */;
  (%208, %212, %213, %214)
}

def @func_9044() -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64]) {
  %215 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %216 = @func_7395() /* ty=Tensor[(130), int32] */;
  %217 = %215.0;
  (%216, %217)
}

def @func_8372() -> (Tensor[(12, 5, ?), float64], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(12, 5, ?), float64], Tensor[(3375), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(130), int32]) {
  %218 = @func_3472() /* ty=(Tensor[(12, 5, ?), float64],) */;
  %219 = @func_7692() /* ty=(Tensor[(78), float32], Tensor[(130), int32]) */;
  %220 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %221 = @func_6365() /* ty=(Tensor[(3375), float64],) */;
  %222 = cast(meta[relay.Constant][8] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %223 = %220.0;
  %224 = cast(%223, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %225 = reshape(%222, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), float32] */;
  %226 = reshape(%224, newshape=[1125, 3]) /* ty=Tensor[(1125, 3), float64] */;
  %227 = @func_619(%225, %226) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(15, 15, 15), float64], Tensor[(1125, 3), float64], Tensor[(15, 15, 15), float64]) */;
  %228 = @func_4659() /* ty=(Tensor[(130), int32],) */;
  %229 = %218.0;
  %230 = %219.1;
  %231 = @func_5317() /* ty=Tensor[(12, 5, ?), float64] */;
  %232 = %221.0;
  %233 = %227.3;
  %234 = %228.0;
  (%229, %230, %223, %231, %232, %233, meta[relay.Constant][8] /* ty=Tensor[(78), float32] */, %234)
}

def @func_14195() -> (Tensor[(130), int32], Tensor[(13, 5, 11), int64], Tensor[(1, 140), float32], Tensor[(4620, 1), float64]) {
  %235 = @func_5140() /* ty=(Tensor[(130), int32],) */;
  %236 = %235.0;
  %237 = cast(%236, dtype="int32") /* ty=Tensor[(130), int32] */;
  %238 = reshape(%237, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %239 = @func_10140(%238) /* ty=(Tensor[(13, 5, 11), int64], Tensor[(15, 15, 15), bool], Tensor[(130), int32], Tensor[(784), float64], Tensor[(12, 5, 130), uint8]) */;
  %240 = cast(meta[relay.Constant][9] /* ty=Tensor[(4620, 1), float32] */, dtype="float32") /* ty=Tensor[(4620, 1), float32] */;
  %241 = reshape(%240, newshape=[3, 1540]) /* ty=Tensor[(3, 1540), float32] */;
  %242 = @func_10622(%241) /* ty=(Tensor[(3, 1540), float32], Tensor[(2, 7, 10), float32], Tensor[(1, 140), float32]) */;
  %243 = cast(meta[relay.Constant][9] /* ty=Tensor[(4620, 1), float32] */, dtype="float64") /* ty=Tensor[(4620, 1), float64] */;
  %244 = %239.0;
  %245 = %242.2;
  %246 = sqrt(%243) /* ty=Tensor[(4620, 1), float64] */;
  (%236, %244, %245, %246)
}

def @func_11381() -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 5, 130), uint8]) {
  %247 = @func_4659() /* ty=(Tensor[(130), int32],) */;
  %248 = %247.0;
  %249 = cast(%248, dtype="int32") /* ty=Tensor[(130), int32] */;
  %250 = reshape(%249, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %251 = @func_3283(%250) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %252 = @func_9229() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), uint8]) */;
  %253 = @func_7395() /* ty=Tensor[(130), int32] */;
  %254 = %251.2;
  %255 = %252.1;
  (%253, %248, %254, %255)
}

def @func_6405() -> Tensor[(130), int32] {
  %256 = @func_5350() /* ty=(Tensor[(130), int32],) */;
  %256.0
}

def @func_2039(%var_2033: Tensor[(7, 1, 4), float64]) -> (Tensor[(7, 1, 4), float64],) {
  %257 = cast(%var_2033, dtype="float64") /* ty=Tensor[(7, 1, 4), float64] */;
  %258 = sigmoid(%257) /* ty=Tensor[(7, 1, 4), float64] */;
  (%258,)
}

def @func_7486() -> (Tensor[(15, 15, 15), float64],) {
  %259 = @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */;
  %260 = %259.1;
  (%260,)
}

def @func_11441() -> (Tensor[(130), int32], Tensor[(12, 5, ?), bool]) {
  %261 = @func_8146() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(280), float64], Tensor[(4, 14, 5), float32]) */;
  %262 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
  %263 = %261.0;
  %264 = %262.1;
  (%263, %264)
}

def @func_8489() -> (Tensor[(130), int32], Tensor[(78), float32]) {
  %265 = @func_4789() /* ty=(Tensor[(130), int32],) */;
  %266 = @func_4254() /* ty=(Tensor[(130), int32], Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(78), float32]) */;
  %267 = %265.0;
  %268 = %266.3;
  (%267, %268)
}

def @func_3697() -> Tensor[(78), float32] {
  %269 = @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */;
  %269.2
}

def @func_11649() -> (Tensor[(130), int32], Tensor[(12, 5, ?), float32], Tensor[(216), float32]) {
  %270 = cast(meta[relay.Constant][10] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %271 = reshape(%270, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), float32] */;
  %272 = @func_6891(%271) /* ty=(Tensor[(6, 4, 9), float32], Tensor[(12, 5, ?), float32]) */;
  %273 = @func_8161() /* ty=Tensor[(130), int32] */;
  %274 = %272.1;
  (%273, %274, meta[relay.Constant][10] /* ty=Tensor[(216), float32] */)
}

def @func_12718() -> (Tensor[(130), int32], Tensor[(12, 5, 6), bool], Tensor[(360), bool]) {
  %275 = @func_12700() /* ty=(Tensor[(130), int32], Tensor[(78), float32]) */;
  %276 = cast(meta[relay.Constant][11] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %277 = reshape(%276, newshape=[12, 5, 6]) /* ty=Tensor[(12, 5, 6), bool] */;
  %278 = @func_9692(%277) /* ty=(Tensor[(12, 5, 6), bool],) */;
  %279 = %275.0;
  %280 = %278.0;
  (%279, %280, meta[relay.Constant][11] /* ty=Tensor[(360), bool] */)
}

def @func_3482() -> Tensor[(12, 5, ?), bool] {
  @func_2783() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_3762(%var_3710: Tensor[(130), int32]) -> (Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) {
  %281 = cast(%var_3710, dtype="int32") /* ty=Tensor[(130), int32] */;
  %282 = reshape(%281, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %283 = @func_3283(%282) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %284 = cast(meta[relay.Constant][12] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %285 = reshape(%284, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %286 = @func_440(%285) /* ty=(Tensor[(15, 15, 15), float64],) */;
  %287 = %286.0;
  %288 = cast(meta[relay.Constant][12] /* ty=Tensor[(3375), float64] */, dtype="bool") /* ty=Tensor[(3375), bool] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%287, dtype="bool") /* ty=Tensor[(15, 15, 15), bool] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %292 = @func_3697() /* ty=Tensor[(78), float32] */;
  %293 = %283.1;
  %294 = logical_or(%290, %291) /* ty=Tensor[(15, 15, 15), bool] */;
  (%292, %293, %var_3710, %294)
}

def @func_4659() -> (Tensor[(130), int32],) {
  %295 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %296 = %295.1;
  (%296,)
}

def @func_6134() -> Tensor[(12, 5, ?), bool] {
  %297 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
  %297.1
}

def @func_13264(%var_13248: Tensor[(144), float64]) -> (Tensor[(130), int32], Tensor[(3375), float64], Tensor[(144), float64]) {
  %298 = cast(%var_13248, dtype="float64") /* ty=Tensor[(144), float64] */;
  %299 = reshape(%298, newshape=[6, 8, 3]) /* ty=Tensor[(6, 8, 3), float64] */;
  %300 = @func_507(%299) /* ty=(Tensor[(6, 8, 3), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) */;
  %301 = @func_6796() /* ty=Tensor[(130), int32] */;
  %302 = %300.2;
  (%301, %302, %var_13248)
}

def @func_6118() -> (Tensor[(130), int32], Tensor[(3375), float64], Tensor[(160), float64], Tensor[(3375), float64]) {
  %303 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %304 = cast(meta[relay.Constant][13] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %305 = cast(meta[relay.Constant][14] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %306 = %303.2;
  %307 = cast(%306, dtype="int32") /* ty=Tensor[(130), int32] */;
  %308 = reshape(%304, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float64] */;
  %309 = reshape(%305, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %310 = reshape(%307, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %311 = @func_1132(%308, %309, %310) /* ty=(Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %312 = %311.2;
  (%306, %312, meta[relay.Constant][13] /* ty=Tensor[(160), float64] */, meta[relay.Constant][14] /* ty=Tensor[(3375), float64] */)
}

def @func_8409() -> (Tensor[(130), int32], Tensor[(2, 7, 10), float32], Tensor[(140), float32], Tensor[(78), float32]) {
  %313 = @func_5140() /* ty=(Tensor[(130), int32],) */;
  %314 = cast(meta[relay.Constant][15] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %315 = reshape(%314, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), float32] */;
  %316 = @func_5217(%315) /* ty=(Tensor[(2, 7, 10), float32], Tensor[(130), int32], Tensor[(78), float32]) */;
  %317 = %313.0;
  %318 = %316.0;
  %319 = @func_3697() /* ty=Tensor[(78), float32] */;
  (%317, %318, meta[relay.Constant][15] /* ty=Tensor[(140), float32] */, %319)
}

def @func_8183(%var_8172: Tensor[(6, 6, 9), float32]) -> Tensor[(6, 6, 9), float32] {
  %320 = cast(%var_8172, dtype="float32") /* ty=Tensor[(6, 6, 9), float32] */;
  asinh(%320) /* ty=Tensor[(6, 6, 9), float32] */
}

def @func_3570() -> (Tensor[(130), int32], Tensor[(784), float64]) {
  %321 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %322 = %321.2;
  %323 = cast(%322, dtype="int32") /* ty=Tensor[(130), int32] */;
  %324 = reshape(%323, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %325 = @func_2733(%324) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %326 = %325.1;
  (%322, %326)
}

def @func_6777() -> (Tensor[(130), int32], Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), float64]) {
  %327 = @func_4659() /* ty=(Tensor[(130), int32],) */;
  %328 = @func_3472() /* ty=(Tensor[(12, 5, ?), float64],) */;
  %329 = %327.0;
  %330 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  %331 = %328.0;
  (%329, %330, %331)
}

def @func_2631() -> (Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) {
  %332 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(15, 13, 7), float64] */;
  %333 = cast(meta[relay.Constant][17] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %334 = cast(meta[relay.Constant][18] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %335 = reshape(%333, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), float32] */;
  %336 = reshape(%334, newshape=[1125, 3]) /* ty=Tensor[(1125, 3), float64] */;
  %337 = @func_619(%335, %336) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(15, 15, 15), float64], Tensor[(1125, 3), float64], Tensor[(15, 15, 15), float64]) */;
  %338 = tan(%332) /* ty=Tensor[(15, 13, 7), float64] */;
  %339 = %337.3;
  (%338, %339, meta[relay.Constant][17] /* ty=Tensor[(78), float32] */, meta[relay.Constant][18] /* ty=Tensor[(3375), float64] */)
}

def @func_10905(%var_10897: Tensor[(3375), float64]) -> Tensor[(3375), int16] {
  %340 = @func_6118() /* ty=(Tensor[(130), int32], Tensor[(3375), float64], Tensor[(160), float64], Tensor[(3375), float64]) */;
  %341 = %340.1;
  %342 = cast(%var_10897, dtype="int16") /* ty=Tensor[(3375), int16] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(1), int32] */;
  %344 = cast(%341, dtype="int16") /* ty=Tensor[(3375), int16] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?), int16] */;
  logical_xor(%344, %345) /* ty=Tensor[(3375), int16] */
}

def @main() -> (Tensor[(12, 5, ?), float64], Tensor[(12, 5, 784), float64]) {
  %346 = @func_6306() /* ty=(Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) */;
  %347 = %346.1;
  %348 = @func_12263() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */;
  %349 = %348.0;
  %350 = cast(%347, dtype="float32") /* ty=Tensor[(784), float32] */;
  %351 = cast(%349, dtype="float32") /* ty=Tensor[(12, 5, ?), float32] */;
  %352 = floor_mod(%350, %351) /* ty=Tensor[(12, 5, 784), float32] */;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(12, 5, 784), float64] */;
  %354 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  %355 = exp(%353) /* ty=Tensor[(12, 5, 784), float64] */;
  (%354, %355)
}

def @func_8809() -> (Tensor[(130), int32],) {
  %356 = @func_6796() /* ty=Tensor[(130), int32] */;
  (%356,)
}

def @func_8996() -> (Tensor[(130), int32], Tensor[(10, 14, 11), float32], Tensor[(1540), float32], Tensor[(78), float32], Tensor[(130), int32]) {
  %357 = @func_6698() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */;
  %358 = cast(meta[relay.Constant][19] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %359 = reshape(%358, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %360 = @func_8694() /* ty=(Tensor[(130), int32],) */;
  %361 = %357.0;
  %362 = @func_6235(%359) /* ty=Tensor[(10, 14, 11), float32] */;
  %363 = @func_3697() /* ty=Tensor[(78), float32] */;
  %364 = %360.0;
  (%361, %362, meta[relay.Constant][19] /* ty=Tensor[(1540), float32] */, %363, %364)
}

def @func_6306() -> (Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) {
  %365 = @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */;
  %366 = cast(meta[relay.Constant][20] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %367 = reshape(%366, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %368 = @func_5819(%367) /* ty=(Tensor[(130), int32], Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(15, 15, 15), bool], Tensor[(784), float64]) */;
  %369 = %368.2;
  %370 = @func_3472() /* ty=(Tensor[(12, 5, ?), float64],) */;
  %371 = %370.0;
  %372 = cast(%369, dtype="int8") /* ty=Tensor[(784), int8] */;
  %373 = cast(%371, dtype="int8") /* ty=Tensor[(12, 5, ?), int8] */;
  %374 = %365.4;
  %375 = add(%372, %373) /* ty=Tensor[(12, 5, 784), int8] */;
  (%374, meta[relay.Constant][20] /* ty=Tensor[(784), float64] */, %375)
}

def @func_9533() -> (Tensor[(130), int32], Tensor[(78), float32], Tensor[(784), float64], Tensor[(78), float32]) {
  %376 = @func_5140() /* ty=(Tensor[(130), int32],) */;
  %377 = @func_5244() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %378 = %376.0;
  %379 = cast(%378, dtype="int32") /* ty=Tensor[(130), int32] */;
  %380 = reshape(%379, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %381 = @func_2733(%380) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %382 = %377.0;
  %383 = %381.1;
  %384 = @func_4383() /* ty=Tensor[(78), float32] */;
  (%378, %382, %383, %384)
}

def @func_14392() -> (Tensor[(78), float32], Tensor[(130), int32], Tensor[(12, 6, 13), float64]) {
  %385 = @func_12524() /* ty=(Tensor[(78), float32],) */;
  %386 = @func_13859() /* ty=(Tensor[(130), int32],) */;
  %387 = @func_8022() /* ty=(Tensor[(12, 6, 13), float64],) */;
  %388 = %385.0;
  %389 = %386.0;
  %390 = %387.0;
  (%388, %389, %390)
}

def @func_7794() -> (Tensor[(130), int32],) {
  %391 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %392 = %391.2;
  (%392,)
}

def @func_13951() -> Tensor[(130), int32] {
  @func_8290() /* ty=Tensor[(130), int32] */
}

def @func_12237() -> (Tensor[(130), int32],) {
  %393 = @func_6118() /* ty=(Tensor[(130), int32], Tensor[(3375), float64], Tensor[(160), float64], Tensor[(3375), float64]) */;
  %394 = %393.0;
  (%394,)
}

def @func_6698() -> (Tensor[(130), int32], Tensor[(12, 5, ?), float64]) {
  %395 = @func_6405() /* ty=Tensor[(130), int32] */;
  %396 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  (%395, %396)
}

def @func_11234() -> (Tensor[(78), float32],) {
  %397 = @func_9785() /* ty=Tensor[(78), float32] */;
  (%397,)
}

def @func_12578() -> (Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) {
  %398 = @func_5933() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */;
  %399 = @func_12148() /* ty=(Tensor[(78), float32], Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(15, 15, 15), float64]) */;
  %400 = %398.0;
  %401 = @func_11538() /* ty=Tensor[(12, 5, ?), bool] */;
  %402 = %399.2;
  (%400, %401, %402)
}

def @func_6235(%var_6207: Tensor[(10, 14, 11), float32]) -> Tensor[(10, 14, 11), float32] {
  %403 = cast(%var_6207, dtype="float32") /* ty=Tensor[(10, 14, 11), float32] */;
  sinh(%403) /* ty=Tensor[(10, 14, 11), float32] */
}

def @func_9785() -> Tensor[(78), float32] {
  @func_4007() /* ty=Tensor[(78), float32] */
}

def @func_3091(%var_3085: Tensor[(3375), float64]) -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) {
  %404 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %405 = cast(%var_3085, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %406 = reshape(%405, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %407 = @func_440(%406) /* ty=(Tensor[(15, 15, 15), float64],) */;
  %408 = %404.1;
  %409 = %407.0;
  (%408, %409, %var_3085)
}

def @func_619(%var_592: Tensor[(6, 1, 13), float32], %var_601: Tensor[(1125, 3), float64]) -> (Tensor[(6, 4, 13), float32], Tensor[(15, 15, 15), float64], Tensor[(1125, 3), float64], Tensor[(15, 15, 15), float64]) {
  %410 = cast(%var_592, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
  %411 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 13), float32] */;
  %412 = cast(%var_601, dtype="float64") /* ty=Tensor[(1125, 3), float64] */;
  %413 = reshape(%412, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %414 = @func_440(%413) /* ty=(Tensor[(15, 15, 15), float64],) */;
  %415 = cast(%var_601, dtype="float64") /* ty=Tensor[(1125, 3), float64] */;
  %416 = reshape(%415, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %417 = @func_440(%416) /* ty=(Tensor[(15, 15, 15), float64],) */;
  %418 = floor_divide(%410, %411) /* ty=Tensor[(6, 4, 13), float32] */;
  %419 = %414.0;
  %420 = %417.0;
  (%418, %419, %var_601, %420)
}

def @func_12863() -> Tensor[(78), float32] {
  %421 = @func_7880() /* ty=(Tensor[(78), float32],) */;
  %421.0
}

def @func_11922(%var_11892: Tensor[(12, 5, 15), bool]) -> (Tensor[(130), int32], Tensor[(12, 5, 15), int8], Tensor[(130), int32]) {
  %422 = @func_5140() /* ty=(Tensor[(130), int32],) */;
  %423 = @func_9907() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(12, 5, ?), bool]) */;
  %424 = %423.1;
  %425 = cast(%424, dtype="int8") /* ty=Tensor[(12, 5, ?), int8] */;
  %426 = cast(%var_11892, dtype="int8") /* ty=Tensor[(12, 5, 15), int8] */;
  %427 = %422.0;
  %428 = cast(%427, dtype="int32") /* ty=Tensor[(130), int32] */;
  %429 = reshape(%428, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %430 = @func_3283(%429) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %431 = add(%425, %426) /* ty=Tensor[(12, 5, 15), int8] */;
  %432 = %430.2;
  (%427, %431, %432)
}

def @func_7064() -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 5, ?), bool]) {
  %433 = @func_4659() /* ty=(Tensor[(130), int32],) */;
  %434 = @func_6118() /* ty=(Tensor[(130), int32], Tensor[(3375), float64], Tensor[(160), float64], Tensor[(3375), float64]) */;
  %435 = @func_4522() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %436 = %433.0;
  %437 = %434.0;
  %438 = %435.0;
  (%436, %437, %438)
}

def @func_11981() -> Tensor[(78), float32] {
  %439 = @func_9229() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), uint8]) */;
  %439.0
}

def @func_1068(%var_1056: Tensor[(2, 5, 13), int32]) -> (Tensor[(2, 5, 13), int32],) {
  %440 = cast(%var_1056, dtype="int32") /* ty=Tensor[(2, 5, 13), int32] */;
  %441 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(2, 5, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 5, 13), int32] */, dtype="int32") /* ty=Tensor[(2, 5, 13), int32] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %444 = subtract(%442, %443) /* ty=Tensor[(2, 5, 13), int32] */;
  (%444,)
}

def @func_5819(%var_5746: Tensor[(784), float64]) -> (Tensor[(130), int32], Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(15, 15, 15), bool], Tensor[(784), float64]) {
  %445 = @func_4789() /* ty=(Tensor[(130), int32],) */;
  %446 = cast(%var_5746, dtype="float64") /* ty=Tensor[(784), float64] */;
  %447 = reshape(%446, newshape=[16, 7, 7]) /* ty=Tensor[(16, 7, 7), float64] */;
  %448 = @func_1508(%447) /* ty=(Tensor[(16, 7, 7), float32],) */;
  %449 = %445.0;
  %450 = cast(%449, dtype="int32") /* ty=Tensor[(130), int32] */;
  %451 = reshape(%450, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %452 = @func_3762(%451) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) */;
  %453 = cast(%449, dtype="int32") /* ty=Tensor[(130), int32] */;
  %454 = reshape(%453, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %455 = @func_2733(%454) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %456 = %448.0;
  %457 = %452.3;
  %458 = %455.1;
  (%449, %456, %var_5746, %457, %458)
}

def @func_7012() -> Tensor[(78), float32] {
  @func_4007() /* ty=Tensor[(78), float32] */
}

def @func_3847() -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) {
  %459 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %460 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %461 = %460.0;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %463 = cast(%461, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %464 = %459.0;
  %465 = log10(%462) /* ty=Tensor[(15, 15, 15), float64] */;
  %466 = erf(%463) /* ty=Tensor[(15, 15, 15), float64] */;
  %467 = @func_3697() /* ty=Tensor[(78), float32] */;
  %468 = @func_3697() /* ty=Tensor[(78), float32] */;
  (%464, %465, %466, %467, %468)
}

def @func_7534() -> Tensor[(78), float32] {
  %469 = @func_5721() /* ty=(Tensor[(78), float32], Tensor[(78), float32]) */;
  %470 = %469.1;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(78), float32] */;
  sinh(%471) /* ty=Tensor[(78), float32] */
}

def @func_4789() -> (Tensor[(130), int32],) {
  %472 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %473 = %472.0;
  (%473,)
}

def @func_5602() -> (Tensor[(78), float32],) {
  %474 = @func_4153() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %475 = %474.0;
  (%475,)
}

def @func_11798() -> (Tensor[(78), float32],) {
  %476 = @func_7692() /* ty=(Tensor[(78), float32], Tensor[(130), int32]) */;
  %477 = %476.0;
  (%477,)
}

def @func_12476() -> Tensor[(130), int32] {
  %478 = @func_6698() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */;
  %478.0
}

def @func_8264() -> (Tensor[(784), float64], Tensor[(78), float32]) {
  %479 = @func_6306() /* ty=(Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) */;
  %480 = @func_7760() /* ty=(Tensor[(130), int32], Tensor[(78), float32]) */;
  %481 = %479.1;
  %482 = %480.1;
  (%481, %482)
}

def @func_10071() -> (Tensor[(784), float64],) {
  %483 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %484 = %483.1;
  (%484,)
}

def @func_8083() -> Tensor[(12, 5, ?), bool] {
  @func_3482() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_11016() -> Tensor[(130), int32] {
  @func_9273() /* ty=Tensor[(130), int32] */
}

def @func_6365() -> (Tensor[(3375), float64],) {
  %485 = @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */;
  %486 = %485.3;
  (%486,)
}

def @func_12056() -> (Tensor[(12, 5, ?), bool], Tensor[(78), float32]) {
  %487 = @func_8221() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %488 = %487.0;
  %489 = @func_11606() /* ty=Tensor[(78), float32] */;
  (%488, %489)
}

def @func_9131() -> (Tensor[(130), int32], Tensor[(1, 1540), float32]) {
  %490 = @func_4659() /* ty=(Tensor[(130), int32],) */;
  %491 = @func_8864() /* ty=(Tensor[(784), float64], Tensor[(10, 14, 11), float32], Tensor[(1, 1540), float32]) */;
  %492 = %490.0;
  %493 = %491.2;
  (%492, %493)
}

def @func_3472() -> (Tensor[(12, 5, ?), float64],) {
  %494 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  (%494,)
}

def @func_12508() -> (Tensor[(78), float32],) {
  %495 = @func_3697() /* ty=Tensor[(78), float32] */;
  (%495,)
}

def @func_12148() -> (Tensor[(78), float32], Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(15, 15, 15), float64]) {
  %496 = @func_11234() /* ty=(Tensor[(78), float32],) */;
  %497 = @func_8221() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %498 = @func_5244() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %499 = %496.0;
  %500 = @func_11606() /* ty=Tensor[(78), float32] */;
  %501 = %497.0;
  %502 = %498.1;
  (%499, %500, %501, %502)
}

def @func_8022() -> (Tensor[(12, 6, 13), float64],) {
  %503 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(12, 6, 13), float64] */;
  %504 = erf(%503) /* ty=Tensor[(12, 6, 13), float64] */;
  (%504,)
}

def @func_10622(%var_10587: Tensor[(3, 1540), float32]) -> (Tensor[(3, 1540), float32], Tensor[(2, 7, 10), float32], Tensor[(1, 140), float32]) {
  %505 = cast(%var_10587, dtype="float64") /* ty=Tensor[(3, 1540), float64] */;
  %506 = exp(%505) /* ty=Tensor[(3, 1540), float64] */;
  %507 = @func_9131() /* ty=(Tensor[(130), int32], Tensor[(1, 1540), float32]) */;
  %508 = %507.1;
  %509 = cast(%508, dtype="float32") /* ty=Tensor[(1, 1540), float32] */;
  %510 = cast(%var_10587, dtype="float32") /* ty=Tensor[(3, 1540), float32] */;
  %511 = divide(%509, %510) /* ty=Tensor[(3, 1540), float32] */;
  %512 = cast(%511, dtype="float32") /* ty=Tensor[(3, 1540), float32] */;
  %513 = shape_of(%506, dtype="int32") /* ty=Tensor[(2), int32] */;
  %514 = cast(%506, dtype="float32") /* ty=Tensor[(3, 1540), float32] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %516 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 140), float32] */, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
  %517 = reshape(%516, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), float32] */;
  %518 = @func_5217(%517) /* ty=(Tensor[(2, 7, 10), float32], Tensor[(130), int32], Tensor[(78), float32]) */;
  %519 = subtract(%514, %515) /* ty=Tensor[(3, 1540), float32] */;
  %520 = %518.0;
  (%519, %520, meta[relay.Constant][24] /* ty=Tensor[(1, 140), float32] */)
}

def @func_9708(%var_9702: Tensor[(3375), float64]) -> Tensor[(3375), int8] {
  %521 = @func_8372() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(12, 5, ?), float64], Tensor[(3375), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(130), int32]) */;
  %522 = %521.4;
  %523 = cast(%var_9702, dtype="int8") /* ty=Tensor[(3375), int8] */;
  %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(1), int32] */;
  %525 = cast(%522, dtype="int8") /* ty=Tensor[(3375), int8] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?), int8] */;
  add(%525, %526) /* ty=Tensor[(3375), int8] */
}

def @func_4445(%var_4430: Tensor[(455), uint16]) -> (Tensor[(2, 5, 13), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) {
  %527 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %528 = cast(%var_4430, dtype="uint16") /* ty=Tensor[(455), uint16] */;
  %529 = cast(%var_4430, dtype="uint16") /* ty=Tensor[(455), uint16] */;
  %530 = reshape(%528, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint16] */;
  %531 = reshape(%529, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint16] */;
  %532 = %527.1;
  %533 = @func_2151(%530, %531) /* ty=Tensor[(13, 7, 5), bool] */;
  (%532, %533, %var_4430)
}

def @func_13131() -> Tensor[(140), float32] {
  %534 = @func_8409() /* ty=(Tensor[(130), int32], Tensor[(2, 7, 10), float32], Tensor[(140), float32], Tensor[(78), float32]) */;
  %534.2
}

def @func_12263() -> (Tensor[(12, 5, ?), bool], Tensor[(78), float32]) {
  %535 = @func_7591() /* ty=(Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), bool]) */;
  %536 = @func_12056() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */;
  %537 = %535.1;
  %538 = %536.1;
  (%537, %538)
}

def @func_7760() -> (Tensor[(130), int32], Tensor[(78), float32]) {
  %539 = @func_5350() /* ty=(Tensor[(130), int32],) */;
  %540 = %539.0;
  %541 = @func_4007() /* ty=Tensor[(78), float32] */;
  (%540, %541)
}

def @func_7929(%var_7885: Tensor[(4, 14, 5), float64], %var_7886: Tensor[(4, 14, 5), float64], %var_7911: Tensor[(4, 14, 5), float64]) -> (Tensor[(4, 14, 5), float64], Tensor[(15, 15, 15), float64], Tensor[(4, 14, 5), bool], Tensor[(12, 5, ?), float64]) {
  %542 = cast(%var_7886, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
  %543 = shape_of(%var_7885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%var_7885, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %546 = @func_7486() /* ty=(Tensor[(15, 15, 15), float64],) */;
  %547 = cast(%var_7911, dtype="bool") /* ty=Tensor[(4, 14, 5), bool] */;
  %548 = shape_of(%var_7886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%var_7886, dtype="bool") /* ty=Tensor[(4, 14, 5), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = @func_6698() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */;
  %552 = power(%544, %545) /* ty=Tensor[(4, 14, 5), float64] */;
  %553 = %546.0;
  %554 = not_equal(%549, %550) /* ty=Tensor[(4, 14, 5), bool] */;
  %555 = %551.1;
  (%552, %553, %554, %555)
}

def @func_11186(%var_11168: Tensor[(3375), float64]) -> (Tensor[(130), int32], Tensor[(3375), int16], Tensor[(3375), float64]) {
  %556 = cast(%var_11168, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %557 = reshape(%556, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %558 = @func_10554() /* ty=Tensor[(130), int32] */;
  %559 = @func_10905(%557) /* ty=Tensor[(3375), int16] */;
  (%558, %559, %var_11168)
}

def @func_8564() -> (Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(12, 5, 130), float32]) {
  %560 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %561 = @func_6365() /* ty=(Tensor[(3375), float64],) */;
  %562 = @func_4254() /* ty=(Tensor[(130), int32], Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(78), float32]) */;
  %563 = %562.0;
  %564 = @func_8083() /* ty=Tensor[(12, 5, ?), bool] */;
  %565 = cast(%563, dtype="float32") /* ty=Tensor[(130), float32] */;
  %566 = cast(%564, dtype="float32") /* ty=Tensor[(12, 5, ?), float32] */;
  %567 = %560.0;
  %568 = %561.0;
  %569 = mod(%565, %566) /* ty=Tensor[(12, 5, 130), float32] */;
  (%567, %568, %569)
}

def @func_4902(%var_4858: Tensor[(14, 2), float64]) -> (Tensor[(12, 5, ?), bool], Tensor[(7, 1, 4), float64], Tensor[(14, 2), float64], Tensor[(16, 10, 1), float64], Tensor[(160), float64], Tensor[(3375), float64], Tensor[(130), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) {
  %570 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
  %571 = cast(%var_4858, dtype="float64") /* ty=Tensor[(14, 2), float64] */;
  %572 = reshape(%571, newshape=[7, 1, 4]) /* ty=Tensor[(7, 1, 4), float64] */;
  %573 = @func_2039(%572) /* ty=(Tensor[(7, 1, 4), float64],) */;
  %574 = cast(meta[relay.Constant][25] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %575 = cast(meta[relay.Constant][26] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %576 = cast(meta[relay.Constant][27] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
  %577 = reshape(%574, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float64] */;
  %578 = reshape(%575, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %579 = reshape(%576, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %580 = @func_1132(%577, %578, %579) /* ty=(Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %581 = cast(meta[relay.Constant][28] /* ty=Tensor[(455), uint16] */, dtype="uint16") /* ty=Tensor[(455), uint16] */;
  %582 = reshape(%581, newshape=[455]) /* ty=Tensor[(455), uint16] */;
  %583 = @func_4445(%582) /* ty=(Tensor[(2, 5, 13), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) */;
  %584 = %570.0;
  %585 = %573.0;
  %586 = %580.0;
  %587 = %583.1;
  (%584, %585, %var_4858, %586, meta[relay.Constant][25] /* ty=Tensor[(160), float64] */, meta[relay.Constant][26] /* ty=Tensor[(3375), float64] */, meta[relay.Constant][27] /* ty=Tensor[(130), int32] */, %587, meta[relay.Constant][28] /* ty=Tensor[(455), uint16] */)
}

def @func_5389() -> (Tensor[(12, 5, ?), bool], Tensor[(784), float64]) {
  %588 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %589 = @func_2783() /* ty=Tensor[(12, 5, ?), bool] */;
  %590 = %588.1;
  (%589, %590)
}

def @func_11498() -> (Tensor[(12, 5, 130), bool], Tensor[(130), int32], Tensor[(6, 4, 13), float32], Tensor[(78), float32], Tensor[(1125, 3), float64]) {
  %591 = @func_9345() /* ty=(Tensor[(12, 5, 130), bool], Tensor[(78), float32], Tensor[(3375), float64], Tensor[(12, 5, ?), bool]) */;
  %592 = @func_8409() /* ty=(Tensor[(130), int32], Tensor[(2, 7, 10), float32], Tensor[(140), float32], Tensor[(78), float32]) */;
  %593 = cast(meta[relay.Constant][29] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %594 = cast(meta[relay.Constant][30] /* ty=Tensor[(1125, 3), float64] */, dtype="float64") /* ty=Tensor[(1125, 3), float64] */;
  %595 = reshape(%593, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), float32] */;
  %596 = reshape(%594, newshape=[1125, 3]) /* ty=Tensor[(1125, 3), float64] */;
  %597 = @func_619(%595, %596) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(15, 15, 15), float64], Tensor[(1125, 3), float64], Tensor[(15, 15, 15), float64]) */;
  %598 = %591.0;
  %599 = %592.0;
  %600 = %597.0;
  (%598, %599, %600, meta[relay.Constant][29] /* ty=Tensor[(78), float32] */, meta[relay.Constant][30] /* ty=Tensor[(1125, 3), float64] */)
}

def @func_4007() -> Tensor[(78), float32] {
  @func_3697() /* ty=Tensor[(78), float32] */
}

def @func_12312() -> Tensor[(78), float32] {
  @func_7534() /* ty=Tensor[(78), float32] */
}

def @func_4522() -> (Tensor[(12, 5, ?), bool],) {
  %601 = @func_3354() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) */;
  %602 = %601.1;
  (%602,)
}

def @func_3912(%var_3853: Tensor[(3375), float64], %var_3856: Tensor[(144), float64]) -> (Tensor[(12, 5, ?), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(144), float64], Tensor[(2, 5, 13), int32], Tensor[(130, 1), int32], Tensor[(6, 8, 3), float32], Tensor[(7, 1, 4), float64], Tensor[(28), float64], Tensor[(130), int32]) {
  %603 = cast(%var_3853, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %604 = reshape(%603, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %605 = @func_440(%604) /* ty=(Tensor[(15, 15, 15), float64],) */;
  %606 = cast(meta[relay.Constant][31] /* ty=Tensor[(130, 1), int32] */, dtype="int32") /* ty=Tensor[(130, 1), int32] */;
  %607 = reshape(%606, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %608 = @func_1068(%607) /* ty=(Tensor[(2, 5, 13), int32],) */;
  %609 = cast(%var_3856, dtype="float64") /* ty=Tensor[(144), float64] */;
  %610 = reshape(%609, newshape=[6, 8, 3]) /* ty=Tensor[(6, 8, 3), float64] */;
  %611 = @func_507(%610) /* ty=(Tensor[(6, 8, 3), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) */;
  %612 = %611.0;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(6, 8, 3), float32] */;
  %614 = cast(meta[relay.Constant][32] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %615 = reshape(%614, newshape=[7, 1, 4]) /* ty=Tensor[(7, 1, 4), float64] */;
  %616 = @func_2039(%615) /* ty=(Tensor[(7, 1, 4), float64],) */;
  %617 = @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */;
  %618 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  %619 = %605.0;
  %620 = %608.0;
  %621 = sinh(%613) /* ty=Tensor[(6, 8, 3), float32] */;
  %622 = %616.0;
  %623 = %617.0;
  (%618, %619, %var_3853, %var_3856, %620, meta[relay.Constant][31] /* ty=Tensor[(130, 1), int32] */, %621, %622, meta[relay.Constant][32] /* ty=Tensor[(28), float64] */, %623)
}

def @func_5530(%var_5444: Tensor[(10, 6, 4), int8], %var_5445: Tensor[(10, 6, 4), int8]) -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(2, 5, 13), int32], Tensor[(10, 6, 4), uint16], Tensor[(10, 6, 4), float32]) {
  %624 = @func_5140() /* ty=(Tensor[(130), int32],) */;
  %625 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %626 = @func_4254() /* ty=(Tensor[(130), int32], Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(78), float32]) */;
  %627 = cast(%var_5445, dtype="int8") /* ty=Tensor[(10, 6, 4), int8] */;
  %628 = shape_of(%var_5444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%var_5444, dtype="int8") /* ty=Tensor[(10, 6, 4), int8] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %631 = minimum(%629, %630) /* ty=Tensor[(10, 6, 4), int8] */;
  %632 = cast(%var_5445, dtype="uint16") /* ty=Tensor[(10, 6, 4), uint16] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="uint16") /* ty=Tensor[(10, 6, 4), uint16] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %636 = cast(%var_5445, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %637 = %624.0;
  %638 = %625.1;
  %639 = %626.2;
  %640 = add(%634, %635) /* ty=Tensor[(10, 6, 4), uint16] */;
  %641 = log10(%636) /* ty=Tensor[(10, 6, 4), float32] */;
  (%637, %638, %639, %640, %641)
}

def @func_12948() -> (Tensor[(78), float32], Tensor[(78), float32]) {
  %642 = @func_12790() /* ty=(Tensor[(78), float32],) */;
  %643 = %642.0;
  %644 = @func_10392() /* ty=Tensor[(78), float32] */;
  (%643, %644)
}

def @func_14464(%var_14450: Tensor[(13, 6, 11), float32]) -> (Tensor[(13, 6, 11), float32],) {
  %645 = cast(%var_14450, dtype="float32") /* ty=Tensor[(13, 6, 11), float32] */;
  %646 = atan(%645) /* ty=Tensor[(13, 6, 11), float32] */;
  (%646,)
}

def @func_10433() -> (Tensor[(130), int32],) {
  %647 = @func_7395() /* ty=Tensor[(130), int32] */;
  (%647,)
}

def @func_11066() -> (Tensor[(10, 14, 11), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  %648 = @func_10460() /* ty=Tensor[(10, 14, 11), float32] */;
  %649 = cast(%648, dtype="float64") /* ty=Tensor[(10, 14, 11), float64] */;
  %650 = atanh(%649) /* ty=Tensor[(10, 14, 11), float64] */;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(10, 14, 11), float64] */;
  %652 = cast(meta[relay.Constant][33] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
  %653 = reshape(%652, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %654 = @func_3762(%653) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) */;
  %655 = asinh(%651) /* ty=Tensor[(10, 14, 11), float64] */;
  %656 = %654.1;
  (%655, %656, meta[relay.Constant][33] /* ty=Tensor[(130), int32] */)
}

def @func_14231() -> Tensor[(12, 5, ?), bool] {
  %657 = @func_8920() /* ty=(Tensor[(78), float32], Tensor[(12, 5, ?), bool]) */;
  %657.1
}

def @func_12215() -> Tensor[(12, 4, 7), float64] {
  %658 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 4, 7), float64] */, dtype="float64") /* ty=Tensor[(12, 4, 7), float64] */;
  sigmoid(%658) /* ty=Tensor[(12, 4, 7), float64] */
}

def @func_2684() -> (Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  %659 = @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */;
  %660 = cast(meta[relay.Constant][35] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
  %661 = reshape(%660, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %662 = @func_1068(%661) /* ty=(Tensor[(2, 5, 13), int32],) */;
  %663 = %659.1;
  %664 = %662.0;
  (%663, %664, meta[relay.Constant][35] /* ty=Tensor[(130), int32] */)
}

def @func_8920() -> (Tensor[(78), float32], Tensor[(12, 5, ?), bool]) {
  %665 = @func_4153() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %666 = %665.0;
  %667 = @func_6134() /* ty=Tensor[(12, 5, ?), bool] */;
  (%666, %667)
}

def @func_12613(%var_12581: Tensor[(8, 10, 9), float32], %var_12603: Tensor[(28), float32]) -> (Tensor[(8, 10, 9), float32], Tensor[(3375), int16], Tensor[(3375), float64], Tensor[(4, 1, 7), bool], Tensor[(28), float32]) {
  %668 = cast(%var_12581, dtype="float32") /* ty=Tensor[(8, 10, 9), float32] */;
  %669 = cast(meta[relay.Constant][36] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %670 = reshape(%669, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %671 = @func_11186(%670) /* ty=(Tensor[(130), int32], Tensor[(3375), int16], Tensor[(3375), float64]) */;
  %672 = cast(%var_12603, dtype="float32") /* ty=Tensor[(28), float32] */;
  %673 = reshape(%672, newshape=[4, 1, 7]) /* ty=Tensor[(4, 1, 7), float32] */;
  %674 = sin(%668) /* ty=Tensor[(8, 10, 9), float32] */;
  %675 = %671.1;
  %676 = @func_11332(%673) /* ty=Tensor[(4, 1, 7), bool] */;
  (%674, %675, meta[relay.Constant][36] /* ty=Tensor[(3375), float64] */, %676, %var_12603)
}

def @func_2151(%var_2142: Tensor[(13, 7, 5), uint16], %var_2143: Tensor[(13, 7, 5), uint16]) -> Tensor[(13, 7, 5), bool] {
  %677 = cast(%var_2143, dtype="bool") /* ty=Tensor[(13, 7, 5), bool] */;
  %678 = shape_of(%var_2142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_2142, dtype="bool") /* ty=Tensor[(13, 7, 5), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%679, %680) /* ty=Tensor[(13, 7, 5), bool] */
}

def @func_12497() -> (Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) {
  %681 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
  %682 = @func_8083() /* ty=Tensor[(12, 5, ?), bool] */;
  %683 = %681.1;
  (%682, %683)
}

def @func_4997() -> Tensor[(12, 5, ?), bool] {
  @func_2783() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_1672(%var_1666: Tensor[(225, 15), float64]) -> (Tensor[(12, 14, 5), float64], Tensor[(3375), float64], Tensor[(8, 20), float64], Tensor[(225, 15), float64], Tensor[(130), int32]) {
  %684 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 14, 5), float64] */, dtype="float64") /* ty=Tensor[(12, 14, 5), float64] */;
  %685 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 20), float64] */, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %686 = cast(%var_1666, dtype="float64") /* ty=Tensor[(225, 15), float64] */;
  %687 = cast(meta[relay.Constant][39] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
  %688 = reshape(%685, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float64] */;
  %689 = reshape(%686, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %690 = reshape(%687, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %691 = @func_1132(%688, %689, %690) /* ty=(Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %692 = sinh(%684) /* ty=Tensor[(12, 14, 5), float64] */;
  %693 = %691.2;
  (%692, %693, meta[relay.Constant][38] /* ty=Tensor[(8, 20), float64] */, %var_1666, meta[relay.Constant][39] /* ty=Tensor[(130), int32] */)
}

def @func_14159() -> (Tensor[(78), float32], Tensor[(2, 5, 13), int32]) {
  %694 = @func_7591() /* ty=(Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), bool]) */;
  %695 = @func_11066() /* ty=(Tensor[(10, 14, 11), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %696 = %694.0;
  %697 = %695.1;
  (%696, %697)
}

def @func_4707(%var_4681: Tensor[(78), float32], %var_4693: Tensor[(3375), float64]) -> (Tensor[(3375), float64], Tensor[(78), float64], Tensor[(3375), bool]) {
  %698 = cast(meta[relay.Constant][40] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %699 = reshape(%698, newshape=[225, 15]) /* ty=Tensor[(225, 15), float64] */;
  %700 = @func_1672(%699) /* ty=(Tensor[(12, 14, 5), float64], Tensor[(3375), float64], Tensor[(8, 20), float64], Tensor[(225, 15), float64], Tensor[(130), int32]) */;
  %701 = @func_4623() /* ty=Tensor[(78), float32] */;
  %702 = cast(%var_4681, dtype="float64") /* ty=Tensor[(78), float64] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(1), int32] */;
  %704 = cast(%701, dtype="float64") /* ty=Tensor[(78), float64] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?), float64] */;
  %706 = cast(meta[relay.Constant][40] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %707 = erf(%706) /* ty=Tensor[(3375), float64] */;
  %708 = cast(%var_4693, dtype="bool") /* ty=Tensor[(3375), bool] */;
  %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(1), int32] */;
  %710 = cast(%707, dtype="bool") /* ty=Tensor[(3375), bool] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?), bool] */;
  %712 = %700.1;
  %713 = floor_mod(%704, %705) /* ty=Tensor[(78), float64] */;
  %714 = greater_equal(%710, %711) /* ty=Tensor[(3375), bool] */;
  (%712, %713, %714)
}

def @func_10493() -> (Tensor[(784), float64], Tensor[(130), int32]) {
  %715 = @func_5389() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(784), float64]) */;
  %716 = %715.1;
  %717 = @func_7676() /* ty=Tensor[(130), int32] */;
  (%716, %717)
}

def @func_7239() -> (Tensor[(12, 5, 78), int64], Tensor[(12, 5, 78), bool]) {
  %718 = @func_5602() /* ty=(Tensor[(78), float32],) */;
  %719 = %718.0;
  %720 = cast(meta[relay.Constant][41] /* ty=Tensor[(78), float32] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(1), int32] */;
  %722 = cast(%719, dtype="float64") /* ty=Tensor[(78), float64] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?), float64] */;
  %724 = divide(%722, %723) /* ty=Tensor[(78), float64] */;
  %725 = @func_6777() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), float64]) */;
  %726 = %725.2;
  %727 = cast(%724, dtype="int64") /* ty=Tensor[(78), int64] */;
  %728 = cast(%726, dtype="int64") /* ty=Tensor[(12, 5, ?), int64] */;
  %729 = cast(%726, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
  %730 = cast(%719, dtype="bool") /* ty=Tensor[(78), bool] */;
  %731 = bitwise_or(%727, %728) /* ty=Tensor[(12, 5, 78), int64] */;
  %732 = less_equal(%729, %730) /* ty=Tensor[(12, 5, 78), bool] */;
  (%731, %732)
}

def @func_11469() -> (Tensor[(78), float32], Tensor[(78), float32]) {
  %733 = @func_8264() /* ty=(Tensor[(784), float64], Tensor[(78), float32]) */;
  %734 = @func_10392() /* ty=Tensor[(78), float32] */;
  %735 = %733.1;
  (%734, %735)
}

def @func_14122(%var_14086: Tensor[(10, 1, 14), float32], %var_14108: Tensor[(130), int32]) -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(10, 1, 14), float64]) {
  %736 = cast(%var_14108, dtype="int32") /* ty=Tensor[(130), int32] */;
  %737 = reshape(%736, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %738 = @func_3283(%737) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %739 = cast(%var_14086, dtype="float32") /* ty=Tensor[(10, 1, 14), float32] */;
  %740 = log10(%739) /* ty=Tensor[(10, 1, 14), float32] */;
  %741 = cast(%740, dtype="float32") /* ty=Tensor[(10, 1, 14), float32] */;
  %742 = acos(%741) /* ty=Tensor[(10, 1, 14), float32] */;
  %743 = cast(%742, dtype="float64") /* ty=Tensor[(10, 1, 14), float64] */;
  %744 = %738.2;
  %745 = cos(%743) /* ty=Tensor[(10, 1, 14), float64] */;
  (%744, %var_14108, %745)
}

def @func_3041() -> Tensor[(12, 5, ?), float64] {
  %746 = @func_2783() /* ty=Tensor[(12, 5, ?), bool] */;
  %747 = cast(%746, dtype="float64") /* ty=Tensor[(12, 5, ?), float64] */;
  sigmoid(%747) /* ty=Tensor[(12, 5, ?), float64] */
}

def @func_6340(%var_6337: Tensor[(225, 15), float64], %var_6338: Tensor[(144), float64]) -> (Tensor[(12, 5, ?), bool], Tensor[(28), float64], Tensor[(225, 15), float64], Tensor[(144), float64]) {
  %748 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
  %749 = cast(%var_6337, dtype="float64") /* ty=Tensor[(225, 15), float64] */;
  %750 = cast(%var_6338, dtype="float64") /* ty=Tensor[(144), float64] */;
  %751 = reshape(%749, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %752 = reshape(%750, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %753 = @func_3912(%751, %752) /* ty=(Tensor[(12, 5, ?), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(144), float64], Tensor[(2, 5, 13), int32], Tensor[(130, 1), int32], Tensor[(6, 8, 3), float32], Tensor[(7, 1, 4), float64], Tensor[(28), float64], Tensor[(130), int32]) */;
  %754 = %748.0;
  %755 = %753.8;
  (%754, %755, %var_6337, %var_6338)
}

def @func_6796() -> Tensor[(130), int32] {
  %756 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %756.0
}

def @func_8694() -> (Tensor[(130), int32],) {
  %757 = @func_7692() /* ty=(Tensor[(78), float32], Tensor[(130), int32]) */;
  %758 = %757.1;
  (%758,)
}

def @func_5687() -> (Tensor[(12, 5, 78), int16], Tensor[(12, 5, ?), float32], Tensor[(130), int32]) {
  %759 = @func_5440() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */;
  %760 = %759.0;
  %761 = @func_4522() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %762 = %761.0;
  %763 = cast(%760, dtype="int16") /* ty=Tensor[(78), int16] */;
  %764 = cast(%762, dtype="int16") /* ty=Tensor[(12, 5, ?), int16] */;
  %765 = cast(%762, dtype="float32") /* ty=Tensor[(12, 5, ?), float32] */;
  %766 = @func_4789() /* ty=(Tensor[(130), int32],) */;
  %767 = bitwise_and(%763, %764) /* ty=Tensor[(12, 5, 78), int16] */;
  %768 = log(%765) /* ty=Tensor[(12, 5, ?), float32] */;
  %769 = %766.0;
  (%767, %768, %769)
}

def @func_7298(%var_7278: Tensor[(7, 12, 16), float32]) -> (Tensor[(7, 12, 16), float32], Tensor[(12, 5, ?), bool], Tensor[(7, 1, 4), float64], Tensor[(28), float64]) {
  %770 = cast(%var_7278, dtype="float32") /* ty=Tensor[(7, 12, 16), float32] */;
  %771 = @func_7064() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 5, ?), bool]) */;
  %772 = cast(meta[relay.Constant][42] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %773 = reshape(%772, newshape=[7, 1, 4]) /* ty=Tensor[(7, 1, 4), float64] */;
  %774 = @func_2039(%773) /* ty=(Tensor[(7, 1, 4), float64],) */;
  %775 = tan(%770) /* ty=Tensor[(7, 12, 16), float32] */;
  %776 = %771.2;
  %777 = %774.0;
  (%775, %776, %777, meta[relay.Constant][42] /* ty=Tensor[(28), float64] */)
}

def @func_440(%var_394: Tensor[(15, 15, 15), float64]) -> (Tensor[(15, 15, 15), float64],) {
  %778 = cast(%var_394, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %779 = asinh(%778) /* ty=Tensor[(15, 15, 15), float64] */;
  %780 = cast(%779, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %781 = rsqrt(%780) /* ty=Tensor[(15, 15, 15), float64] */;
  (%781,)
}

def @func_10554() -> Tensor[(130), int32] {
  %782 = @func_3982() /* ty=(Tensor[(130), int32],) */;
  %782.0
}

def @func_10460() -> Tensor[(10, 14, 11), float32] {
  %783 = @func_8864() /* ty=(Tensor[(784), float64], Tensor[(10, 14, 11), float32], Tensor[(1, 1540), float32]) */;
  %783.1
}

def @func_14824(%var_14810: Tensor[(455), uint16]) -> (Tensor[(78), float32], Tensor[(130), int32], Tensor[(455), uint16], Tensor[(455), uint16], Tensor[(12, 5, 78), float32]) {
  %784 = @func_8146() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(280), float64], Tensor[(4, 14, 5), float32]) */;
  %785 = cast(%var_14810, dtype="uint16") /* ty=Tensor[(455), uint16] */;
  %786 = reshape(%785, newshape=[455]) /* ty=Tensor[(455), uint16] */;
  %787 = @func_4445(%786) /* ty=(Tensor[(2, 5, 13), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) */;
  %788 = @func_11606() /* ty=Tensor[(78), float32] */;
  %789 = @func_11538() /* ty=Tensor[(12, 5, ?), bool] */;
  %790 = cast(%788, dtype="bool") /* ty=Tensor[(78), bool] */;
  %791 = cast(%789, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
  %792 = logical_and(%790, %791) /* ty=Tensor[(12, 5, 78), bool] */;
  %793 = cast(%792, dtype="float32") /* ty=Tensor[(12, 5, 78), float32] */;
  %794 = cast(%788, dtype="float32") /* ty=Tensor[(78), float32] */;
  %795 = @func_4383() /* ty=Tensor[(78), float32] */;
  %796 = %784.1;
  %797 = %787.2;
  %798 = floor_divide(%793, %794) /* ty=Tensor[(12, 5, 78), float32] */;
  (%795, %796, %797, %var_14810, %798)
}

def @func_8661() -> (Tensor[(15, 15, 15), float64], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(78), int32]) {
  %799 = @func_5244() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %800 = @func_7486() /* ty=(Tensor[(15, 15, 15), float64],) */;
  %801 = @func_4383() /* ty=Tensor[(78), float32] */;
  %802 = @func_4623() /* ty=Tensor[(78), float32] */;
  %803 = cast(%802, dtype="int32") /* ty=Tensor[(78), int32] */;
  %804 = shape_of(%801, dtype="int32") /* ty=Tensor[(1), int32] */;
  %805 = cast(%801, dtype="int32") /* ty=Tensor[(78), int32] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?), int32] */;
  %807 = %799.1;
  %808 = @func_7395() /* ty=Tensor[(130), int32] */;
  %809 = %800.0;
  %810 = maximum(%805, %806) /* ty=Tensor[(78), int32] */;
  (%807, %808, %809, %810)
}

def @func_13859() -> (Tensor[(130), int32],) {
  %811 = @func_8161() /* ty=Tensor[(130), int32] */;
  (%811,)
}

def @func_12001() -> (Tensor[(130), int32], Tensor[(130), int32]) {
  %812 = @func_8146() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(280), float64], Tensor[(4, 14, 5), float32]) */;
  %813 = @func_4659() /* ty=(Tensor[(130), int32],) */;
  %814 = %812.0;
  %815 = %813.0;
  (%814, %815)
}

def @func_6997(%var_6980: Tensor[(2688), float64]) -> (Tensor[(130), int32], Tensor[(16, 7, 7), float32], Tensor[(2688), float64]) {
  %816 = @func_4659() /* ty=(Tensor[(130), int32],) */;
  %817 = cast(%var_6980, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %818 = reshape(%817, newshape=[12, 14, 16]) /* ty=Tensor[(12, 14, 16), float64] */;
  %819 = @func_6656(%818) /* ty=(Tensor[(12, 14, 16), float64], Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(78), float32]) */;
  %820 = %816.0;
  %821 = %819.1;
  (%820, %821, %var_6980)
}

def @func_5244() -> (Tensor[(78), float32], Tensor[(15, 15, 15), float64]) {
  %822 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %823 = @func_4007() /* ty=Tensor[(78), float32] */;
  %824 = %822.0;
  (%823, %824)
}

def @func_6433(%var_6423: Tensor[(50), int8]) -> (Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(50), int8], Tensor[(144), float64]) {
  %825 = @func_5244() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %826 = cast(%var_6423, dtype="int8") /* ty=Tensor[(50), int8] */;
  %827 = cast(meta[relay.Constant][43] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %828 = reshape(%826, newshape=[10, 5, 1]) /* ty=Tensor[(10, 5, 1), int8] */;
  %829 = reshape(%827, newshape=[1, 144]) /* ty=Tensor[(1, 144), float64] */;
  %830 = @func_6070(%828, %829) /* ty=(Tensor[(10, 5, 12), int8], Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(1, 144), float64], Tensor[(2, 5, 13), int32], Tensor[(784), float64], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), float64]) */;
  %831 = %825.1;
  %832 = %830.5;
  (%831, %832, %var_6423, meta[relay.Constant][43] /* ty=Tensor[(144), float64] */)
}

def @func_7880() -> (Tensor[(78), float32],) {
  %833 = @func_4007() /* ty=Tensor[(78), float32] */;
  (%833,)
}

def @func_8076(%var_8069: Tensor[(1, 455), uint16]) -> (Tensor[(78), float32], Tensor[(130), int32], Tensor[(1, 455), uint16]) {
  %834 = @func_5602() /* ty=(Tensor[(78), float32],) */;
  %835 = cast(%var_8069, dtype="uint16") /* ty=Tensor[(1, 455), uint16] */;
  %836 = reshape(%835, newshape=[455]) /* ty=Tensor[(455), uint16] */;
  %837 = @func_3269(%836) /* ty=(Tensor[(130), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) */;
  %838 = %834.0;
  %839 = %837.0;
  (%838, %839, %var_8069)
}

def @func_5570(%var_5558: Tensor[(8, 18), float64]) -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(8, 18), float64]) {
  %840 = @func_5350() /* ty=(Tensor[(130), int32],) */;
  %841 = cast(%var_5558, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
  %842 = reshape(%841, newshape=[6, 8, 3]) /* ty=Tensor[(6, 8, 3), float64] */;
  %843 = @func_507(%842) /* ty=(Tensor[(6, 8, 3), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) */;
  %844 = %840.0;
  %845 = %843.1;
  (%844, %845, %var_5558)
}

def @func_4623() -> Tensor[(78), float32] {
  @func_3697() /* ty=Tensor[(78), float32] */
}

def @func_2783() -> Tensor[(12, 5, ?), bool] {
  %846 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 5, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 1), float64] */;
  %847 = rsqrt(%846) /* ty=Tensor[(12, 5, 1), float64] */;
  %848 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 5, 1), float64] */, dtype="int32") /* ty=Tensor[(12, 5, 1), int32] */;
  %849 = shape_of(%847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%847, dtype="int32") /* ty=Tensor[(12, 5, 1), int32] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %852 = left_shift(%850, %851) /* ty=Tensor[(12, 5, ?), int32] */;
  %853 = cast(%847, dtype="bool") /* ty=Tensor[(12, 5, 1), bool] */;
  %854 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%852, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%855, %856) /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_11135() -> (Tensor[(15, 15, 15), float64],) {
  %857 = @func_7486() /* ty=(Tensor[(15, 15, 15), float64],) */;
  %858 = %857.0;
  (%858,)
}

def @func_5440() -> (Tensor[(78), float32], Tensor[(12, 5, 130), float64]) {
  %859 = cast(meta[relay.Constant][45] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
  %860 = reshape(%859, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %861 = @func_2877(%860) /* ty=(Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(16, 10, 1), float64], Tensor[(160), float64], Tensor[(2, 5, 13), int32]) */;
  %862 = @func_3354() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) */;
  %863 = %862.0;
  %864 = cast(meta[relay.Constant][45] /* ty=Tensor[(130), int32] */, dtype="bool") /* ty=Tensor[(130), bool] */;
  %865 = cast(%863, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
  %866 = logical_and(%864, %865) /* ty=Tensor[(12, 5, 130), bool] */;
  %867 = cast(%866, dtype="float64") /* ty=Tensor[(12, 5, 130), float64] */;
  %868 = cast(%863, dtype="float64") /* ty=Tensor[(12, 5, ?), float64] */;
  %869 = %861.0;
  %870 = divide(%867, %868) /* ty=Tensor[(12, 5, 130), float64] */;
  (%869, %870)
}

def @func_3283(%var_3281: Tensor[(130), int32]) -> (Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  %871 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %872 = cast(%var_3281, dtype="int32") /* ty=Tensor[(130), int32] */;
  %873 = reshape(%872, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %874 = @func_1068(%873) /* ty=(Tensor[(2, 5, 13), int32],) */;
  %875 = %871.0;
  %876 = %874.0;
  (%875, %876, %var_3281)
}

def @func_6615(%var_6569: Tensor[(12, 5, 4), bool]) -> (Tensor[(12, 5, 4), uint64], Tensor[(784), float64], Tensor[(50), int8], Tensor[(12, 5, 144), uint32], Tensor[(3375), float64], Tensor[(130), int32], Tensor[(130), int32]) {
  %877 = @func_3354() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) */;
  %878 = %877.1;
  %879 = cast(%878, dtype="uint64") /* ty=Tensor[(12, 5, ?), uint64] */;
  %880 = cast(%var_6569, dtype="uint64") /* ty=Tensor[(12, 5, 4), uint64] */;
  %881 = cast(meta[relay.Constant][46] /* ty=Tensor[(50), int8] */, dtype="int8") /* ty=Tensor[(50), int8] */;
  %882 = cast(meta[relay.Constant][47] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %883 = reshape(%881, newshape=[10, 5, 1]) /* ty=Tensor[(10, 5, 1), int8] */;
  %884 = reshape(%882, newshape=[1, 144]) /* ty=Tensor[(1, 144), float64] */;
  %885 = @func_6070(%883, %884) /* ty=(Tensor[(10, 5, 12), int8], Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(1, 144), float64], Tensor[(2, 5, 13), int32], Tensor[(784), float64], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), float64]) */;
  %886 = cast(meta[relay.Constant][47] /* ty=Tensor[(144), float64] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %887 = cast(%878, dtype="uint32") /* ty=Tensor[(12, 5, ?), uint32] */;
  %888 = @func_6118() /* ty=(Tensor[(130), int32], Tensor[(3375), float64], Tensor[(160), float64], Tensor[(3375), float64]) */;
  %889 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %890 = @func_5140() /* ty=(Tensor[(130), int32],) */;
  %891 = bitwise_or(%879, %880) /* ty=Tensor[(12, 5, 4), uint64] */;
  %892 = %885.6;
  %893 = add(%886, %887) /* ty=Tensor[(12, 5, 144), uint32] */;
  %894 = %888.3;
  %895 = %889.1;
  %896 = %890.0;
  (%891, %892, meta[relay.Constant][46] /* ty=Tensor[(50), int8] */, %893, %894, %895, %896)
}

def @func_10690() -> (Tensor[(12, 5, ?), bool], Tensor[(78), float32]) {
  %897 = @func_4638() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %898 = %897.0;
  %899 = @func_7534() /* ty=Tensor[(78), float32] */;
  (%898, %899)
}

def @func_5317() -> Tensor[(12, 5, ?), float64] {
  %900 = @func_3472() /* ty=(Tensor[(12, 5, ?), float64],) */;
  %900.0
}

def @func_11538() -> Tensor[(12, 5, ?), bool] {
  %901 = @func_4522() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %901.0
}

def @func_1508(%var_1499: Tensor[(16, 7, 7), float64]) -> (Tensor[(16, 7, 7), float32],) {
  %902 = cast(%var_1499, dtype="float64") /* ty=Tensor[(16, 7, 7), float64] */;
  %903 = asin(%902) /* ty=Tensor[(16, 7, 7), float64] */;
  %904 = cast(%903, dtype="float32") /* ty=Tensor[(16, 7, 7), float32] */;
  %905 = shape_of(%var_1499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %906 = cast(%var_1499, dtype="float32") /* ty=Tensor[(16, 7, 7), float32] */;
  %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %908 = floor_divide(%906, %907) /* ty=Tensor[(16, 7, 7), float32] */;
  (%908,)
}

def @func_9458() -> (Tensor[(130), int32], Tensor[(4, 14, 5), float32]) {
  %909 = @func_3982() /* ty=(Tensor[(130), int32],) */;
  %910 = @func_8146() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(280), float64], Tensor[(4, 14, 5), float32]) */;
  %911 = %909.0;
  %912 = %910.3;
  (%911, %912)
}

def @func_7181(%var_7172: Tensor[(3375), float64], %var_7173: Tensor[(8, 18), float64]) -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(8, 18), float64]) {
  %913 = cast(%var_7172, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %914 = cast(%var_7173, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
  %915 = reshape(%913, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %916 = reshape(%914, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %917 = @func_3912(%915, %916) /* ty=(Tensor[(12, 5, ?), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(144), float64], Tensor[(2, 5, 13), int32], Tensor[(130, 1), int32], Tensor[(6, 8, 3), float32], Tensor[(7, 1, 4), float64], Tensor[(28), float64], Tensor[(130), int32]) */;
  %918 = @func_4800() /* ty=Tensor[(130), int32] */;
  %919 = %917.1;
  (%918, %919, %var_7172, %var_7173)
}

def @func_9624() -> Tensor[(12, 5, ?), float64] {
  %920 = @func_6777() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), float64]) */;
  %920.2
}

def @func_5350() -> (Tensor[(130), int32],) {
  %921 = @func_5140() /* ty=(Tensor[(130), int32],) */;
  %922 = %921.0;
  (%922,)
}

def @func_11332(%var_11328: Tensor[(4, 1, 7), float32]) -> Tensor[(4, 1, 7), bool] {
  %923 = cast(2.23799f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %924 = cast(%var_11328, dtype="bool") /* ty=Tensor[(4, 1, 7), bool] */;
  greater_equal(%923, %924) /* ty=Tensor[(4, 1, 7), bool] */
}

def @func_14312() -> (Tensor[(78), float32],) {
  %925 = @func_6306() /* ty=(Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) */;
  %926 = %925.0;
  (%926,)
}

def @func_3269(%var_3250: Tensor[(455), uint16]) -> (Tensor[(130), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) {
  %927 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %928 = cast(%var_3250, dtype="uint16") /* ty=Tensor[(455), uint16] */;
  %929 = cast(%var_3250, dtype="uint16") /* ty=Tensor[(455), uint16] */;
  %930 = reshape(%928, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint16] */;
  %931 = reshape(%929, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint16] */;
  %932 = %927.2;
  %933 = @func_2151(%930, %931) /* ty=Tensor[(13, 7, 5), bool] */;
  (%932, %933, %var_3250)
}

def @func_13427() -> Tensor[(12, 5, ?), bool] {
  %934 = @func_8221() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %934.0
}

def @func_13703(%var_13626: Tensor[(144), float64], %var_13643: Tensor[(3375), float64], %var_13696: Tensor[(858), float32]) -> (Tensor[(78), float32], Tensor[(78), float32], Tensor[(12, 5, 78), uint32], Tensor[(12, 5, 130), int32], Tensor[(144), float64], Tensor[(144), float64], Tensor[(130, 1), int32], Tensor[(3375), float64], Tensor[(78), float32], Tensor[(12, 5, 130), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(6, 13, 11), float32], Tensor[(858), float32]) {
  %935 = @func_12700() /* ty=(Tensor[(130), int32], Tensor[(78), float32]) */;
  %936 = @func_9345() /* ty=(Tensor[(12, 5, 130), bool], Tensor[(78), float32], Tensor[(3375), float64], Tensor[(12, 5, ?), bool]) */;
  %937 = @func_11234() /* ty=(Tensor[(78), float32],) */;
  %938 = %937.0;
  %939 = @func_13427() /* ty=Tensor[(12, 5, ?), bool] */;
  %940 = cast(%938, dtype="uint32") /* ty=Tensor[(78), uint32] */;
  %941 = cast(%939, dtype="uint32") /* ty=Tensor[(12, 5, ?), uint32] */;
  %942 = @func_8290() /* ty=Tensor[(130), int32] */;
  %943 = cast(%942, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %944 = cast(%939, dtype="uint32") /* ty=Tensor[(12, 5, ?), uint32] */;
  %945 = logical_xor(%943, %944) /* ty=Tensor[(12, 5, 130), uint32] */;
  %946 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 5, 130), uint32] */, dtype="int32") /* ty=Tensor[(12, 5, 130), int32] */;
  %947 = shape_of(%945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %948 = cast(%945, dtype="int32") /* ty=Tensor[(12, 5, 130), int32] */;
  %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %950 = cast(%var_13626, dtype="float64") /* ty=Tensor[(144), float64] */;
  %951 = reshape(%950, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %952 = @func_13264(%951) /* ty=(Tensor[(130), int32], Tensor[(3375), float64], Tensor[(144), float64]) */;
  %953 = cast(%var_13643, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %954 = %952.2;
  %955 = cast(%954, dtype="float64") /* ty=Tensor[(144), float64] */;
  %956 = reshape(%953, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %957 = reshape(%955, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %958 = @func_3912(%956, %957) /* ty=(Tensor[(12, 5, ?), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(144), float64], Tensor[(2, 5, 13), int32], Tensor[(130, 1), int32], Tensor[(6, 8, 3), float32], Tensor[(7, 1, 4), float64], Tensor[(28), float64], Tensor[(130), int32]) */;
  %959 = @func_9345() /* ty=(Tensor[(12, 5, 130), bool], Tensor[(78), float32], Tensor[(3375), float64], Tensor[(12, 5, ?), bool]) */;
  %960 = cast(%945, dtype="float64") /* ty=Tensor[(12, 5, 130), float64] */;
  %961 = acos(%960) /* ty=Tensor[(12, 5, 130), float64] */;
  %962 = cast(%961, dtype="float32") /* ty=Tensor[(12, 5, 130), float32] */;
  %963 = @func_4789() /* ty=(Tensor[(130), int32],) */;
  %964 = cast(%var_13696, dtype="float32") /* ty=Tensor[(858), float32] */;
  %965 = reshape(%964, newshape=[6, 13, 11]) /* ty=Tensor[(6, 13, 11), float32] */;
  %966 = @func_9589(%965) /* ty=(Tensor[(6, 13, 11), float32],) */;
  %967 = %935.1;
  %968 = %936.1;
  %969 = maximum(%940, %941) /* ty=Tensor[(12, 5, 78), uint32] */;
  %970 = subtract(%948, %949) /* ty=Tensor[(12, 5, 130), int32] */;
  %971 = %958.5;
  %972 = %959.1;
  %973 = atanh(%962) /* ty=Tensor[(12, 5, 130), float32] */;
  %974 = @func_7676() /* ty=Tensor[(130), int32] */;
  %975 = %963.0;
  %976 = %966.0;
  (%967, %968, %969, %970, %954, %var_13626, %971, %var_13643, %972, %973, %974, %975, %976, %var_13696)
}

def @func_3982() -> (Tensor[(130), int32],) {
  %977 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %978 = %977.0;
  (%978,)
}

def @func_8146() -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(280), float64], Tensor[(4, 14, 5), float32]) {
  %979 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %980 = @func_6698() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */;
  %981 = cast(meta[relay.Constant][49] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %982 = cast(meta[relay.Constant][49] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %983 = cast(meta[relay.Constant][49] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %984 = reshape(%981, newshape=[4, 14, 5]) /* ty=Tensor[(4, 14, 5), float64] */;
  %985 = reshape(%982, newshape=[4, 14, 5]) /* ty=Tensor[(4, 14, 5), float64] */;
  %986 = reshape(%983, newshape=[4, 14, 5]) /* ty=Tensor[(4, 14, 5), float64] */;
  %987 = @func_7929(%984, %985, %986) /* ty=(Tensor[(4, 14, 5), float64], Tensor[(15, 15, 15), float64], Tensor[(4, 14, 5), bool], Tensor[(12, 5, ?), float64]) */;
  %988 = %987.0;
  %989 = cast(%988, dtype="float32") /* ty=Tensor[(4, 14, 5), float32] */;
  %990 = %979.0;
  %991 = %980.0;
  %992 = rsqrt(%989) /* ty=Tensor[(4, 14, 5), float32] */;
  (%990, %991, meta[relay.Constant][49] /* ty=Tensor[(280), float64] */, %992)
}

def @func_14060() -> (Tensor[(12, 5, ?), bool],) {
  %993 = @func_4522() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %994 = %993.0;
  (%994,)
}

def @func_12700() -> (Tensor[(130), int32], Tensor[(78), float32]) {
  %995 = @func_12237() /* ty=(Tensor[(130), int32],) */;
  %996 = %995.0;
  %997 = cast(%996, dtype="int32") /* ty=Tensor[(130), int32] */;
  %998 = reshape(%997, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %999 = @func_5949(%998) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %1000 = %999.0;
  (%996, %1000)
}

def @func_13393() -> (Tensor[(15, 15, 15), float32], Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32]) {
  %1001 = @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */;
  %1002 = %1001.2;
  %1003 = cast(%1002, dtype="float32") /* ty=Tensor[(15, 15, 15), float32] */;
  %1004 = @func_12237() /* ty=(Tensor[(130), int32],) */;
  %1005 = exp(%1003) /* ty=Tensor[(15, 15, 15), float32] */;
  %1006 = @func_7534() /* ty=Tensor[(78), float32] */;
  %1007 = %1004.0;
  %1008 = @func_10554() /* ty=Tensor[(130), int32] */;
  (%1005, %1006, %1007, %1008)
}

def @func_13113() -> (Tensor[(12, 5, ?), bool], Tensor[(130), int32], Tensor[(12, 5, 78), bool], Tensor[(784), float64]) {
  %1009 = @func_10690() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */;
  %1010 = @func_12718() /* ty=(Tensor[(130), int32], Tensor[(12, 5, 6), bool], Tensor[(360), bool]) */;
  %1011 = @func_7239() /* ty=(Tensor[(12, 5, 78), int64], Tensor[(12, 5, 78), bool]) */;
  %1012 = @func_8864() /* ty=(Tensor[(784), float64], Tensor[(10, 14, 11), float32], Tensor[(1, 1540), float32]) */;
  %1013 = %1009.0;
  %1014 = %1010.0;
  %1015 = %1011.1;
  %1016 = %1012.0;
  (%1013, %1014, %1015, %1016)
}

def @func_13075() -> Tensor[(130), int32] {
  @func_12476() /* ty=Tensor[(130), int32] */
}

def @func_5933() -> (Tensor[(12, 5, ?), bool], Tensor[(78), float32]) {
  %1017 = @func_5440() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */;
  %1018 = @func_2783() /* ty=Tensor[(12, 5, ?), bool] */;
  %1019 = %1017.0;
  (%1018, %1019)
}

def @func_11112() -> Tensor[(130), int32] {
  @func_7395() /* ty=Tensor[(130), int32] */
}

def @func_6656(%var_6630: Tensor[(12, 14, 16), float64]) -> (Tensor[(12, 14, 16), float64], Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(78), float32]) {
  %1020 = cast(%var_6630, dtype="float64") /* ty=Tensor[(12, 14, 16), float64] */;
  %1021 = cast(meta[relay.Constant][50] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %1022 = reshape(%1021, newshape=[16, 7, 7]) /* ty=Tensor[(16, 7, 7), float64] */;
  %1023 = @func_1508(%1022) /* ty=(Tensor[(16, 7, 7), float32],) */;
  %1024 = atanh(%1020) /* ty=Tensor[(12, 14, 16), float64] */;
  %1025 = %1023.0;
  %1026 = @func_4007() /* ty=Tensor[(78), float32] */;
  (%1024, %1025, meta[relay.Constant][50] /* ty=Tensor[(784), float64] */, %1026)
}

def @func_4348() -> (Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) {
  %1027 = @func_2783() /* ty=Tensor[(12, 5, ?), bool] */;
  %1028 = @func_3482() /* ty=Tensor[(12, 5, ?), bool] */;
  (%1027, %1028)
}

def @func_6903() -> (Tensor[(78), float32],) {
  %1029 = @func_5244() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %1030 = %1029.0;
  (%1030,)
}

def @func_7395() -> Tensor[(130), int32] {
  @func_4800() /* ty=Tensor[(130), int32] */
}

def @func_10392() -> Tensor[(78), float32] {
  %1031 = @func_5244() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %1031.0
}

def @func_11773(%var_11699: Tensor[(3375), float64], %var_11741: Tensor[(12, 5, 784), int8], %var_11751: Tensor[(324), float32]) -> (Tensor[(78), float32], Tensor[(3375), int8], Tensor[(3375), float64], Tensor[(130), int32], Tensor[(6, 6, 9), float32], Tensor[(324), float32], Tensor[(12, 5, 784), bool], Tensor[(15, 15, 15), bool], Tensor[(12, 5, 784), float32], Tensor[(3375), float64]) {
  %1032 = @func_11498() /* ty=(Tensor[(12, 5, 130), bool], Tensor[(130), int32], Tensor[(6, 4, 13), float32], Tensor[(78), float32], Tensor[(1125, 3), float64]) */;
  %1033 = cast(%var_11699, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %1034 = reshape(%1033, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %1035 = @func_6698() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */;
  %1036 = cast(%var_11751, dtype="float32") /* ty=Tensor[(324), float32] */;
  %1037 = reshape(%1036, newshape=[6, 6, 9]) /* ty=Tensor[(6, 6, 9), float32] */;
  %1038 = @func_6306() /* ty=(Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) */;
  %1039 = %1038.2;
  %1040 = cast(%var_11741, dtype="int32") /* ty=Tensor[(12, 5, 784), int32] */;
  %1041 = shape_of(%1039, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1042 = cast(%1039, dtype="int32") /* ty=Tensor[(12, 5, 784), int32] */;
  %1043 = dyn.reshape(%1040, %1041, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1044 = maximum(%1042, %1043) /* ty=Tensor[(12, 5, 784), int32] */;
  %1045 = cast(%1044, dtype="float64") /* ty=Tensor[(12, 5, 784), float64] */;
  %1046 = sin(%1045) /* ty=Tensor[(12, 5, 784), float64] */;
  %1047 = cast(%1046, dtype="float64") /* ty=Tensor[(12, 5, 784), float64] */;
  %1048 = asinh(%1047) /* ty=Tensor[(12, 5, 784), float64] */;
  %1049 = cast(%1048, dtype="bool") /* ty=Tensor[(12, 5, 784), bool] */;
  %1050 = shape_of(%1046, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1051 = cast(%1046, dtype="bool") /* ty=Tensor[(12, 5, 784), bool] */;
  %1052 = dyn.reshape(%1049, %1050, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1053 = %1035.0;
  %1054 = cast(%1053, dtype="int32") /* ty=Tensor[(130), int32] */;
  %1055 = reshape(%1054, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %1056 = @func_3762(%1055) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) */;
  %1057 = cast(%1048, dtype="float32") /* ty=Tensor[(12, 5, 784), float32] */;
  %1058 = @func_9708(%1034) /* ty=Tensor[(3375), int8] */;
  %1059 = cast(%1058, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %1060 = reshape(%1059, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %1061 = @func_3091(%1060) /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) */;
  %1062 = %1032.3;
  %1063 = @func_8183(%1037) /* ty=Tensor[(6, 6, 9), float32] */;
  %1064 = logical_or(%1051, %1052) /* ty=Tensor[(12, 5, 784), bool] */;
  %1065 = %1056.3;
  %1066 = rsqrt(%1057) /* ty=Tensor[(12, 5, 784), float32] */;
  %1067 = %1061.2;
  (%1062, %1058, %var_11699, %1053, %1063, %var_11751, %1064, %1065, %1066, %1067)
}

def @func_8161() -> Tensor[(130), int32] {
  @func_4800() /* ty=Tensor[(130), int32] */
}

def @func_5721() -> (Tensor[(78), float32], Tensor[(78), float32]) {
  %1068 = @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */;
  %1069 = @func_4623() /* ty=Tensor[(78), float32] */;
  %1070 = %1068.3;
  (%1069, %1070)
}

def @func_13811() -> (Tensor[(10, 14, 11), float64], Tensor[(130), int32], Tensor[(10, 14, 11), float32], Tensor[(12, 5, 78), int16]) {
  %1071 = @func_11066() /* ty=(Tensor[(10, 14, 11), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %1072 = @func_5687() /* ty=(Tensor[(12, 5, 78), int16], Tensor[(12, 5, ?), float32], Tensor[(130), int32]) */;
  %1073 = %1071.0;
  %1074 = @func_6796() /* ty=Tensor[(130), int32] */;
  %1075 = @func_10460() /* ty=Tensor[(10, 14, 11), float32] */;
  %1076 = %1072.0;
  (%1073, %1074, %1075, %1076)
}

def @func_7591() -> (Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), bool]) {
  %1077 = @func_5721() /* ty=(Tensor[(78), float32], Tensor[(78), float32]) */;
  %1078 = @func_3354() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) */;
  %1079 = %1078.0;
  %1080 = cast(%1079, dtype="float32") /* ty=Tensor[(12, 5, ?), float32] */;
  %1081 = sqrt(%1080) /* ty=Tensor[(12, 5, ?), float32] */;
  %1082 = @func_4789() /* ty=(Tensor[(130), int32],) */;
  %1083 = %1082.0;
  %1084 = cast(%1081, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
  %1085 = cast(%1083, dtype="bool") /* ty=Tensor[(130), bool] */;
  %1086 = %1077.1;
  %1087 = @func_3482() /* ty=Tensor[(12, 5, ?), bool] */;
  %1088 = logical_or(%1084, %1085) /* ty=Tensor[(12, 5, 130), bool] */;
  (%1086, %1087, %1088)
}

def @func_8751() -> Tensor[(130), int32] {
  @func_6405() /* ty=Tensor[(130), int32] */
}

def @func_9345() -> (Tensor[(12, 5, 130), bool], Tensor[(78), float32], Tensor[(3375), float64], Tensor[(12, 5, ?), bool]) {
  %1089 = @func_8290() /* ty=Tensor[(130), int32] */;
  %1090 = @func_3472() /* ty=(Tensor[(12, 5, ?), float64],) */;
  %1091 = %1090.0;
  %1092 = cast(%1089, dtype="bool") /* ty=Tensor[(130), bool] */;
  %1093 = cast(%1091, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
  %1094 = @func_5721() /* ty=(Tensor[(78), float32], Tensor[(78), float32]) */;
  %1095 = @func_6365() /* ty=(Tensor[(3375), float64],) */;
  %1096 = @func_5389() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(784), float64]) */;
  %1097 = equal(%1092, %1093) /* ty=Tensor[(12, 5, 130), bool] */;
  %1098 = %1094.0;
  %1099 = %1095.0;
  %1100 = %1096.0;
  (%1097, %1098, %1099, %1100)
}

def @func_4800() -> Tensor[(130), int32] {
  %1101 = @func_3982() /* ty=(Tensor[(130), int32],) */;
  %1101.0
}

def @func_10291() -> Tensor[(78), float32] {
  %1102 = @func_8264() /* ty=(Tensor[(784), float64], Tensor[(78), float32]) */;
  %1102.1
}

def @func_10140(%var_10112: Tensor[(130), int32]) -> (Tensor[(13, 5, 11), int64], Tensor[(15, 15, 15), bool], Tensor[(130), int32], Tensor[(784), float64], Tensor[(12, 5, 130), uint8]) {
  %1103 = cast(meta[relay.Constant][52] /* ty=Tensor[(13, 5, 11), int64] */, dtype="int64") /* ty=Tensor[(13, 5, 11), int64] */;
  %1104 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(13, 5, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1105 = cast(meta[relay.Constant][51] /* ty=Tensor[(13, 5, 11), int64] */, dtype="int64") /* ty=Tensor[(13, 5, 11), int64] */;
  %1106 = dyn.reshape(%1103, %1104, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1107 = cast(%var_10112, dtype="int32") /* ty=Tensor[(130), int32] */;
  %1108 = reshape(%1107, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %1109 = @func_3762(%1108) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) */;
  %1110 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %1111 = @func_9229() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), uint8]) */;
  %1112 = bitwise_or(%1105, %1106) /* ty=Tensor[(13, 5, 11), int64] */;
  %1113 = %1109.3;
  %1114 = %1110.1;
  %1115 = %1111.1;
  (%1112, %1113, %var_10112, %1114, %1115)
}

def @func_13197() -> (Tensor[(78), float64],) {
  %1116 = @func_5440() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */;
  %1117 = %1116.0;
  %1118 = cast(%1117, dtype="float64") /* ty=Tensor[(78), float64] */;
  %1119 = log(%1118) /* ty=Tensor[(78), float64] */;
  (%1119,)
}

def @func_7042(%var_7017: Tensor[(1540), float32]) -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(1540), uint16]) {
  %1120 = @func_4153() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %1121 = cast(%var_7017, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %1122 = reshape(%1121, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %1123 = @func_6235(%1122) /* ty=Tensor[(10, 14, 11), float32] */;
  %1124 = cast(%1123, dtype="uint16") /* ty=Tensor[(10, 14, 11), uint16] */;
  %1125 = shape_of(%var_7017, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1126 = cast(%var_7017, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
  %1127 = dyn.reshape(%1124, %1125, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %1128 = @func_6796() /* ty=Tensor[(130), int32] */;
  %1129 = %1120.1;
  %1130 = bitwise_xor(%1126, %1127) /* ty=Tensor[(1540), uint16] */;
  (%1128, %1129, %1130)
}

def @func_14688() -> (Tensor[(130), int32], Tensor[(12, 5, 130), bool]) {
  %1131 = @func_5440() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */;
  %1132 = %1131.1;
  %1133 = cast(%1132, dtype="float64") /* ty=Tensor[(12, 5, 130), float64] */;
  %1134 = cosh(%1133) /* ty=Tensor[(12, 5, 130), float64] */;
  %1135 = cast(%1132, dtype="float32") /* ty=Tensor[(12, 5, 130), float32] */;
  %1136 = acosh(%1135) /* ty=Tensor[(12, 5, 130), float32] */;
  %1137 = cast(%1136, dtype="bool") /* ty=Tensor[(12, 5, 130), bool] */;
  %1138 = shape_of(%1134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1139 = cast(%1134, dtype="bool") /* ty=Tensor[(12, 5, 130), bool] */;
  %1140 = dyn.reshape(%1137, %1138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1141 = @func_8290() /* ty=Tensor[(130), int32] */;
  %1142 = less_equal(%1139, %1140) /* ty=Tensor[(12, 5, 130), bool] */;
  (%1141, %1142)
}

def @func_8290() -> Tensor[(130), int32] {
  @func_7395() /* ty=Tensor[(130), int32] */
}

def @func_9754() -> (Tensor[(130), int32],) {
  %1143 = @func_8996() /* ty=(Tensor[(130), int32], Tensor[(10, 14, 11), float32], Tensor[(1540), float32], Tensor[(78), float32], Tensor[(130), int32]) */;
  %1144 = %1143.0;
  (%1144,)
}

def @func_10936() -> (Tensor[(12, 5, ?), float64],) {
  %1145 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  (%1145,)
}

def @func_6070(%var_6025: Tensor[(10, 5, 1), int8], %var_6044: Tensor[(1, 144), float64]) -> (Tensor[(10, 5, 12), int8], Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(1, 144), float64], Tensor[(2, 5, 13), int32], Tensor[(784), float64], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), float64]) {
  %1146 = cast(%var_6025, dtype="int8") /* ty=Tensor[(10, 5, 1), int8] */;
  %1147 = cast(meta[relay.Constant][53] /* ty=Tensor[(10, 5, 12), int8] */, dtype="int8") /* ty=Tensor[(10, 5, 12), int8] */;
  %1148 = cast(meta[relay.Constant][54] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
  %1149 = reshape(%1148, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %1150 = @func_5949(%1149) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %1151 = cast(%var_6044, dtype="float64") /* ty=Tensor[(1, 144), float64] */;
  %1152 = reshape(%1151, newshape=[8, 18]) /* ty=Tensor[(8, 18), float64] */;
  %1153 = @func_5570(%1152) /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(8, 18), float64]) */;
  %1154 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %1155 = cast(meta[relay.Constant][54] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
  %1156 = reshape(%1155, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %1157 = @func_2733(%1156) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %1158 = @func_4522() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %1159 = @func_5440() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */;
  %1160 = minimum(%1146, %1147) /* ty=Tensor[(10, 5, 12), int8] */;
  %1161 = %1150.0;
  %1162 = %1153.0;
  %1163 = %1154.1;
  %1164 = %1157.1;
  %1165 = %1158.0;
  %1166 = %1159.1;
  (%1160, %1161, meta[relay.Constant][54] /* ty=Tensor[(130), int32] */, %1162, %var_6044, %1163, %1164, %1165, %1166)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3983() -> (Tensor[(130), int32],) {
  %2 = fn () -> (Tensor[(130), int32],) {
    %0 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(130), int32],) */
}

def @func_8753() -> Tensor[(130), int32] {
  @func_8751() /* ty=Tensor[(130), int32] */
}

def @func_7487() -> (Tensor[(15, 15, 15), float64],) {
  %5 = fn () -> (Tensor[(15, 15, 15), float64],) {
    %3 = @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */;
    %4 = %3.1;
    (%4,)
  };
  %5() /* ty=(Tensor[(15, 15, 15), float64],) */
}

def @func_1068(%var_1056: Tensor[(2, 5, 13), int32]) -> (Tensor[(2, 5, 13), int32],) {
  %6 = cast(%var_1056, dtype="int32") /* ty=Tensor[(2, 5, 13), int32] */;
  %7 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(2, 5, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 5, 13), int32] */, dtype="int32") /* ty=Tensor[(2, 5, 13), int32] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %10 = subtract(%8, %9) /* ty=Tensor[(2, 5, 13), int32] */;
  (%10,)
}

def @func_12478() -> Tensor[(130), int32] {
  @func_12476() /* ty=Tensor[(130), int32] */
}

def @func_6098() -> Tensor[(78), float32] {
  %11 = @func_5933() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */;
  %11.1
}

def @func_11777(%var_11774: Tensor[(3375), float64], %var_11775: Tensor[(12, 5, 784), int8], %var_11776: Tensor[(324), float32]) -> (Tensor[(78), float32], Tensor[(3375), int8], Tensor[(3375), float64], Tensor[(130), int32], Tensor[(6, 6, 9), float32], Tensor[(324), float32], Tensor[(12, 5, 784), bool], Tensor[(15, 15, 15), bool], Tensor[(12, 5, 784), float32], Tensor[(3375), float64]) {
  %48 = fn (%var_11699: Tensor[(3375), float64], %var_11741: Tensor[(12, 5, 784), int8], %var_11751: Tensor[(324), float32]) -> (Tensor[(78), float32], Tensor[(3375), int8], Tensor[(3375), float64], Tensor[(130), int32], Tensor[(6, 6, 9), float32], Tensor[(324), float32], Tensor[(12, 5, 784), bool], Tensor[(15, 15, 15), bool], Tensor[(12, 5, 784), float32], Tensor[(3375), float64]) {
    %12 = @func_11498() /* ty=(Tensor[(12, 5, 130), bool], Tensor[(130), int32], Tensor[(6, 4, 13), float32], Tensor[(78), float32], Tensor[(1125, 3), float64]) */;
    %13 = cast(%var_11699, dtype="float64") /* ty=Tensor[(3375), float64] */;
    %14 = reshape(%13, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
    %15 = @func_6698() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */;
    %16 = cast(%var_11751, dtype="float32") /* ty=Tensor[(324), float32] */;
    %17 = reshape(%16, newshape=[6, 6, 9]) /* ty=Tensor[(6, 6, 9), float32] */;
    %18 = @func_6306() /* ty=(Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) */;
    %19 = %18.2;
    %20 = cast(%var_11741, dtype="int32") /* ty=Tensor[(12, 5, 784), int32] */;
    %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
    %22 = cast(%19, dtype="int32") /* ty=Tensor[(12, 5, 784), int32] */;
    %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %24 = maximum(%22, %23) /* ty=Tensor[(12, 5, 784), int32] */;
    %25 = cast(%24, dtype="float64") /* ty=Tensor[(12, 5, 784), float64] */;
    %26 = sin(%25) /* ty=Tensor[(12, 5, 784), float64] */;
    %27 = cast(%26, dtype="float64") /* ty=Tensor[(12, 5, 784), float64] */;
    %28 = asinh(%27) /* ty=Tensor[(12, 5, 784), float64] */;
    %29 = cast(%28, dtype="bool") /* ty=Tensor[(12, 5, 784), bool] */;
    %30 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
    %31 = cast(%26, dtype="bool") /* ty=Tensor[(12, 5, 784), bool] */;
    %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %33 = %15.0;
    %34 = cast(%33, dtype="int32") /* ty=Tensor[(130), int32] */;
    %35 = reshape(%34, newshape=[130]) /* ty=Tensor[(130), int32] */;
    %36 = @func_3762(%35) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) */;
    %37 = cast(%28, dtype="float32") /* ty=Tensor[(12, 5, 784), float32] */;
    %38 = @func_9708(%14) /* ty=Tensor[(3375), int8] */;
    %39 = cast(%38, dtype="float64") /* ty=Tensor[(3375), float64] */;
    %40 = reshape(%39, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
    %41 = @func_3091(%40) /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) */;
    %42 = %12.3;
    %43 = @func_8183(%17) /* ty=Tensor[(6, 6, 9), float32] */;
    %44 = logical_or(%31, %32) /* ty=Tensor[(12, 5, 784), bool] */;
    %45 = %36.3;
    %46 = rsqrt(%37) /* ty=Tensor[(12, 5, 784), float32] */;
    %47 = %41.2;
    (%42, %38, %var_11699, %33, %43, %var_11751, %44, %45, %46, %47)
  };
  %48(%var_11774, %var_11775, %var_11776) /* ty=(Tensor[(78), float32], Tensor[(3375), int8], Tensor[(3375), float64], Tensor[(130), int32], Tensor[(6, 6, 9), float32], Tensor[(324), float32], Tensor[(12, 5, 784), bool], Tensor[(15, 15, 15), bool], Tensor[(12, 5, 784), float32], Tensor[(3375), float64]) */
}

def @func_7881() -> (Tensor[(78), float32],) {
  %50 = fn () -> (Tensor[(78), float32],) {
    %49 = @func_4007() /* ty=Tensor[(78), float32] */;
    (%49,)
  };
  %50() /* ty=(Tensor[(78), float32],) */
}

def @func_10495() -> (Tensor[(784), float64], Tensor[(130), int32]) {
  @func_10493() /* ty=(Tensor[(784), float64], Tensor[(130), int32]) */
}

def @func_12700() -> (Tensor[(130), int32], Tensor[(78), float32]) {
  %51 = @func_12237() /* ty=(Tensor[(130), int32],) */;
  %52 = %51.0;
  %53 = cast(%52, dtype="int32") /* ty=Tensor[(130), int32] */;
  %54 = reshape(%53, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %55 = @func_5949(%54) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %56 = %55.0;
  (%52, %56)
}

def @func_7013() -> Tensor[(78), float32] {
  %57 = fn () -> Tensor[(78), float32] {
    @func_4007() /* ty=Tensor[(78), float32] */
  };
  %57() /* ty=Tensor[(78), float32] */
}

def @func_9785() -> Tensor[(78), float32] {
  @func_4007() /* ty=Tensor[(78), float32] */
}

def @func_5863(%var_5862: Tensor[(144), float64]) -> (Tensor[(130), int32], Tensor[(12, 5, ?), float64], Tensor[(1, 3375), float64], Tensor[(144), float64]) {
  %66 = fn (%var_5857: Tensor[(144), float64]) -> (Tensor[(130), int32], Tensor[(12, 5, ?), float64], Tensor[(1, 3375), float64], Tensor[(144), float64]) {
    %58 = @func_4789() /* ty=(Tensor[(130), int32],) */;
    %59 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 3375), float64] */, dtype="float64") /* ty=Tensor[(1, 3375), float64] */;
    %60 = cast(%var_5857, dtype="float64") /* ty=Tensor[(144), float64] */;
    %61 = reshape(%59, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
    %62 = reshape(%60, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %63 = @func_3912(%61, %62) /* ty=(Tensor[(12, 5, ?), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(144), float64], Tensor[(2, 5, 13), int32], Tensor[(130, 1), int32], Tensor[(6, 8, 3), float32], Tensor[(7, 1, 4), float64], Tensor[(28), float64], Tensor[(130), int32]) */;
    %64 = %58.0;
    %65 = %63.0;
    (%64, %65, meta[relay.Constant][1] /* ty=Tensor[(1, 3375), float64] */, %var_5857)
  };
  %66(%var_5862) /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64], Tensor[(1, 3375), float64], Tensor[(144), float64]) */
}

def @func_14467(%var_14465: Tensor[(13, 6, 11), float32]) -> (Tensor[(13, 6, 11), float32],) {
  @func_14464(%var_14465) /* ty=(Tensor[(13, 6, 11), float32],) */
}

def @func_14197() -> (Tensor[(130), int32], Tensor[(13, 5, 11), int64], Tensor[(1, 140), float32], Tensor[(4620, 1), float64]) {
  @func_14195() /* ty=(Tensor[(130), int32], Tensor[(13, 5, 11), int64], Tensor[(1, 140), float32], Tensor[(4620, 1), float64]) */
}

def @func_9459() -> (Tensor[(130), int32], Tensor[(4, 14, 5), float32]) {
  %71 = fn () -> (Tensor[(130), int32], Tensor[(4, 14, 5), float32]) {
    %67 = @func_3982() /* ty=(Tensor[(130), int32],) */;
    %68 = @func_8146() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(280), float64], Tensor[(4, 14, 5), float32]) */;
    %69 = %67.0;
    %70 = %68.3;
    (%69, %70)
  };
  %71() /* ty=(Tensor[(130), int32], Tensor[(4, 14, 5), float32]) */
}

def @func_4007() -> Tensor[(78), float32] {
  @func_3697() /* ty=Tensor[(78), float32] */
}

def @func_8161() -> Tensor[(130), int32] {
  @func_4800() /* ty=Tensor[(130), int32] */
}

def @func_11649() -> (Tensor[(130), int32], Tensor[(12, 5, ?), float32], Tensor[(216), float32]) {
  %72 = cast(meta[relay.Constant][2] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %73 = reshape(%72, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), float32] */;
  %74 = @func_6891(%73) /* ty=(Tensor[(6, 4, 9), float32], Tensor[(12, 5, ?), float32]) */;
  %75 = @func_8161() /* ty=Tensor[(130), int32] */;
  %76 = %74.1;
  (%75, %76, meta[relay.Constant][2] /* ty=Tensor[(216), float32] */)
}

def @func_8866() -> (Tensor[(784), float64], Tensor[(10, 14, 11), float32], Tensor[(1, 1540), float32]) {
  @func_8864() /* ty=(Tensor[(784), float64], Tensor[(10, 14, 11), float32], Tensor[(1, 1540), float32]) */
}

def @func_9708(%var_9702: Tensor[(3375), float64]) -> Tensor[(3375), int8] {
  %77 = @func_8372() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(12, 5, ?), float64], Tensor[(3375), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(130), int32]) */;
  %78 = %77.4;
  %79 = cast(%var_9702, dtype="int8") /* ty=Tensor[(3375), int8] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(1), int32] */;
  %81 = cast(%78, dtype="int8") /* ty=Tensor[(3375), int8] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?), int8] */;
  add(%81, %82) /* ty=Tensor[(3375), int8] */
}

def @func_4522() -> (Tensor[(12, 5, ?), bool],) {
  %83 = @func_3354() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) */;
  %84 = %83.1;
  (%84,)
}

def @func_13428() -> Tensor[(12, 5, ?), bool] {
  %86 = fn () -> Tensor[(12, 5, ?), bool] {
    %85 = @func_8221() /* ty=(Tensor[(12, 5, ?), bool],) */;
    %85.0
  };
  %86() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_12613(%var_12581: Tensor[(8, 10, 9), float32], %var_12603: Tensor[(28), float32]) -> (Tensor[(8, 10, 9), float32], Tensor[(3375), int16], Tensor[(3375), float64], Tensor[(4, 1, 7), bool], Tensor[(28), float32]) {
  %87 = cast(%var_12581, dtype="float32") /* ty=Tensor[(8, 10, 9), float32] */;
  %88 = cast(meta[relay.Constant][3] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %89 = reshape(%88, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %90 = @func_11186(%89) /* ty=(Tensor[(130), int32], Tensor[(3375), int16], Tensor[(3375), float64]) */;
  %91 = cast(%var_12603, dtype="float32") /* ty=Tensor[(28), float32] */;
  %92 = reshape(%91, newshape=[4, 1, 7]) /* ty=Tensor[(4, 1, 7), float32] */;
  %93 = sin(%87) /* ty=Tensor[(8, 10, 9), float32] */;
  %94 = %90.1;
  %95 = @func_11332(%92) /* ty=Tensor[(4, 1, 7), bool] */;
  (%93, %94, meta[relay.Constant][3] /* ty=Tensor[(3375), float64] */, %95, %var_12603)
}

def @func_4710(%var_4708: Tensor[(78), float32], %var_4709: Tensor[(3375), float64]) -> (Tensor[(3375), float64], Tensor[(78), float64], Tensor[(3375), bool]) {
  %113 = fn (%var_4681: Tensor[(78), float32], %var_4693: Tensor[(3375), float64]) -> (Tensor[(3375), float64], Tensor[(78), float64], Tensor[(3375), bool]) {
    %96 = cast(meta[relay.Constant][4] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
    %97 = reshape(%96, newshape=[225, 15]) /* ty=Tensor[(225, 15), float64] */;
    %98 = @func_1672(%97) /* ty=(Tensor[(12, 14, 5), float64], Tensor[(3375), float64], Tensor[(8, 20), float64], Tensor[(225, 15), float64], Tensor[(130), int32]) */;
    %99 = @func_4623() /* ty=Tensor[(78), float32] */;
    %100 = cast(%var_4681, dtype="float64") /* ty=Tensor[(78), float64] */;
    %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(1), int32] */;
    %102 = cast(%99, dtype="float64") /* ty=Tensor[(78), float64] */;
    %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?), float64] */;
    %104 = cast(meta[relay.Constant][4] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
    %105 = erf(%104) /* ty=Tensor[(3375), float64] */;
    %106 = cast(%var_4693, dtype="bool") /* ty=Tensor[(3375), bool] */;
    %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(1), int32] */;
    %108 = cast(%105, dtype="bool") /* ty=Tensor[(3375), bool] */;
    %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?), bool] */;
    %110 = %98.1;
    %111 = floor_mod(%102, %103) /* ty=Tensor[(78), float64] */;
    %112 = greater_equal(%108, %109) /* ty=Tensor[(3375), bool] */;
    (%110, %111, %112)
  };
  %113(%var_4708, %var_4709) /* ty=(Tensor[(3375), float64], Tensor[(78), float64], Tensor[(3375), bool]) */
}

def @func_4904(%var_4903: Tensor[(14, 2), float64]) -> (Tensor[(12, 5, ?), bool], Tensor[(7, 1, 4), float64], Tensor[(14, 2), float64], Tensor[(16, 10, 1), float64], Tensor[(160), float64], Tensor[(3375), float64], Tensor[(130), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) {
  %132 = fn (%var_4858: Tensor[(14, 2), float64]) -> (Tensor[(12, 5, ?), bool], Tensor[(7, 1, 4), float64], Tensor[(14, 2), float64], Tensor[(16, 10, 1), float64], Tensor[(160), float64], Tensor[(3375), float64], Tensor[(130), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) {
    %114 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
    %115 = cast(%var_4858, dtype="float64") /* ty=Tensor[(14, 2), float64] */;
    %116 = reshape(%115, newshape=[7, 1, 4]) /* ty=Tensor[(7, 1, 4), float64] */;
    %117 = @func_2039(%116) /* ty=(Tensor[(7, 1, 4), float64],) */;
    %118 = cast(meta[relay.Constant][5] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
    %120 = cast(meta[relay.Constant][7] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
    %121 = reshape(%118, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float64] */;
    %122 = reshape(%119, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
    %123 = reshape(%120, newshape=[130]) /* ty=Tensor[(130), int32] */;
    %124 = @func_1132(%121, %122, %123) /* ty=(Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(455), uint16] */, dtype="uint16") /* ty=Tensor[(455), uint16] */;
    %126 = reshape(%125, newshape=[455]) /* ty=Tensor[(455), uint16] */;
    %127 = @func_4445(%126) /* ty=(Tensor[(2, 5, 13), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) */;
    %128 = %114.0;
    %129 = %117.0;
    %130 = %124.0;
    %131 = %127.1;
    (%128, %129, %var_4858, %130, meta[relay.Constant][5] /* ty=Tensor[(160), float64] */, meta[relay.Constant][6] /* ty=Tensor[(3375), float64] */, meta[relay.Constant][7] /* ty=Tensor[(130), int32] */, %131, meta[relay.Constant][8] /* ty=Tensor[(455), uint16] */)
  };
  %132(%var_4903) /* ty=(Tensor[(12, 5, ?), bool], Tensor[(7, 1, 4), float64], Tensor[(14, 2), float64], Tensor[(16, 10, 1), float64], Tensor[(160), float64], Tensor[(3375), float64], Tensor[(130), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) */
}

def @func_12580() -> (Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) {
  @func_12578() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */
}

def @func_1511(%var_1509: Tensor[(16, 7, 7), float64]) -> (Tensor[(16, 7, 7), float32],) {
  @func_1508(%var_1509) /* ty=(Tensor[(16, 7, 7), float32],) */
}

def @func_8076(%var_8069: Tensor[(1, 455), uint16]) -> (Tensor[(78), float32], Tensor[(130), int32], Tensor[(1, 455), uint16]) {
  %133 = @func_5602() /* ty=(Tensor[(78), float32],) */;
  %134 = cast(%var_8069, dtype="uint16") /* ty=Tensor[(1, 455), uint16] */;
  %135 = reshape(%134, newshape=[455]) /* ty=Tensor[(455), uint16] */;
  %136 = @func_3269(%135) /* ty=(Tensor[(130), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) */;
  %137 = %133.0;
  %138 = %136.0;
  (%137, %138, %var_8069)
}

def @func_12265() -> (Tensor[(12, 5, ?), bool], Tensor[(78), float32]) {
  @func_12263() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */
}

def @func_14061() -> (Tensor[(12, 5, ?), bool],) {
  %141 = fn () -> (Tensor[(12, 5, ?), bool],) {
    %139 = @func_4522() /* ty=(Tensor[(12, 5, ?), bool],) */;
    %140 = %139.0;
    (%140,)
  };
  %141() /* ty=(Tensor[(12, 5, ?), bool],) */
}

def @func_6307() -> (Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) {
  %153 = fn () -> (Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) {
    %142 = @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */;
    %143 = cast(meta[relay.Constant][9] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %144 = reshape(%143, newshape=[784]) /* ty=Tensor[(784), float64] */;
    %145 = @func_5819(%144) /* ty=(Tensor[(130), int32], Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(15, 15, 15), bool], Tensor[(784), float64]) */;
    %146 = %145.2;
    %147 = @func_3472() /* ty=(Tensor[(12, 5, ?), float64],) */;
    %148 = %147.0;
    %149 = cast(%146, dtype="int8") /* ty=Tensor[(784), int8] */;
    %150 = cast(%148, dtype="int8") /* ty=Tensor[(12, 5, ?), int8] */;
    %151 = %142.4;
    %152 = add(%149, %150) /* ty=Tensor[(12, 5, 784), int8] */;
    (%151, meta[relay.Constant][9] /* ty=Tensor[(784), float64] */, %152)
  };
  %153() /* ty=(Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) */
}

def @func_4562(%var_4560: Tensor[(130), int32]) -> (Tensor[(12, 5, ?), float64], Tensor[(7, 1, 4), float64], Tensor[(14, 2), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(12, 5, ?), float64]) {
  @func_4559(%var_4560) /* ty=(Tensor[(12, 5, ?), float64], Tensor[(7, 1, 4), float64], Tensor[(14, 2), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */
}

def @func_8023() -> (Tensor[(12, 6, 13), float64],) {
  %156 = fn () -> (Tensor[(12, 6, 13), float64],) {
    %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(12, 6, 13), float64] */;
    %155 = erf(%154) /* ty=Tensor[(12, 6, 13), float64] */;
    (%155,)
  };
  %156() /* ty=(Tensor[(12, 6, 13), float64],) */
}

def @func_12497() -> (Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) {
  %157 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
  %158 = @func_8083() /* ty=Tensor[(12, 5, ?), bool] */;
  %159 = %157.1;
  (%158, %159)
}

def @func_6406() -> Tensor[(130), int32] {
  %161 = fn () -> Tensor[(130), int32] {
    %160 = @func_5350() /* ty=(Tensor[(130), int32],) */;
    %160.0
  };
  %161() /* ty=Tensor[(130), int32] */
}

def @func_3916(%var_3914: Tensor[(3375), float64], %var_3915: Tensor[(144), float64]) -> (Tensor[(12, 5, ?), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(144), float64], Tensor[(2, 5, 13), int32], Tensor[(130, 1), int32], Tensor[(6, 8, 3), float32], Tensor[(7, 1, 4), float64], Tensor[(28), float64], Tensor[(130), int32]) {
  @func_3912(%var_3914, %var_3915) /* ty=(Tensor[(12, 5, ?), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(144), float64], Tensor[(2, 5, 13), int32], Tensor[(130, 1), int32], Tensor[(6, 8, 3), float32], Tensor[(7, 1, 4), float64], Tensor[(28), float64], Tensor[(130), int32]) */
}

def @func_7397() -> Tensor[(130), int32] {
  @func_7395() /* ty=Tensor[(130), int32] */
}

def @func_4639() -> (Tensor[(12, 5, ?), bool],) {
  %163 = fn () -> (Tensor[(12, 5, ?), bool],) {
    %162 = @func_3482() /* ty=Tensor[(12, 5, ?), bool] */;
    (%162,)
  };
  %163() /* ty=(Tensor[(12, 5, ?), bool],) */
}

def @func_9787() -> Tensor[(78), float32] {
  @func_9785() /* ty=Tensor[(78), float32] */
}

def @func_11798() -> (Tensor[(78), float32],) {
  %164 = @func_7692() /* ty=(Tensor[(78), float32], Tensor[(130), int32]) */;
  %165 = %164.0;
  (%165,)
}

def @func_11234() -> (Tensor[(78), float32],) {
  %166 = @func_9785() /* ty=Tensor[(78), float32] */;
  (%166,)
}

def @func_6238(%var_6236: Tensor[(10, 14, 11), float32]) -> Tensor[(10, 14, 11), float32] {
  @func_6235(%var_6236) /* ty=Tensor[(10, 14, 11), float32] */
}

def @func_13198() -> (Tensor[(78), float64],) {
  %171 = fn () -> (Tensor[(78), float64],) {
    %167 = @func_5440() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */;
    %168 = %167.0;
    %169 = cast(%168, dtype="float64") /* ty=Tensor[(78), float64] */;
    %170 = log(%169) /* ty=Tensor[(78), float64] */;
    (%170,)
  };
  %171() /* ty=(Tensor[(78), float64],) */
}

def @func_6699() -> (Tensor[(130), int32], Tensor[(12, 5, ?), float64]) {
  %174 = fn () -> (Tensor[(130), int32], Tensor[(12, 5, ?), float64]) {
    %172 = @func_6405() /* ty=Tensor[(130), int32] */;
    %173 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
    (%172, %173)
  };
  %174() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */
}

def @func_3043() -> Tensor[(12, 5, ?), float64] {
  @func_3041() /* ty=Tensor[(12, 5, ?), float64] */
}

def @func_5530(%var_5444: Tensor[(10, 6, 4), int8], %var_5445: Tensor[(10, 6, 4), int8]) -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(2, 5, 13), int32], Tensor[(10, 6, 4), uint16], Tensor[(10, 6, 4), float32]) {
  %175 = @func_5140() /* ty=(Tensor[(130), int32],) */;
  %176 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %177 = @func_4254() /* ty=(Tensor[(130), int32], Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(78), float32]) */;
  %178 = cast(%var_5445, dtype="int8") /* ty=Tensor[(10, 6, 4), int8] */;
  %179 = shape_of(%var_5444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%var_5444, dtype="int8") /* ty=Tensor[(10, 6, 4), int8] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %182 = minimum(%180, %181) /* ty=Tensor[(10, 6, 4), int8] */;
  %183 = cast(%var_5445, dtype="uint16") /* ty=Tensor[(10, 6, 4), uint16] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%182, dtype="uint16") /* ty=Tensor[(10, 6, 4), uint16] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %187 = cast(%var_5445, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %188 = %175.0;
  %189 = %176.1;
  %190 = %177.2;
  %191 = add(%185, %186) /* ty=Tensor[(10, 6, 4), uint16] */;
  %192 = log10(%187) /* ty=Tensor[(10, 6, 4), float32] */;
  (%188, %189, %190, %191, %192)
}

def @func_8694() -> (Tensor[(130), int32],) {
  %193 = @func_7692() /* ty=(Tensor[(78), float32], Tensor[(130), int32]) */;
  %194 = %193.1;
  (%194,)
}

def @func_9625() -> Tensor[(12, 5, ?), float64] {
  %196 = fn () -> Tensor[(12, 5, ?), float64] {
    %195 = @func_6777() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), float64]) */;
    %195.2
  };
  %196() /* ty=Tensor[(12, 5, ?), float64] */
}

def @func_11186(%var_11168: Tensor[(3375), float64]) -> (Tensor[(130), int32], Tensor[(3375), int16], Tensor[(3375), float64]) {
  %197 = cast(%var_11168, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %198 = reshape(%197, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %199 = @func_10554() /* ty=Tensor[(130), int32] */;
  %200 = @func_10905(%198) /* ty=Tensor[(3375), int16] */;
  (%199, %200, %var_11168)
}

def @func_6753() -> (Tensor[(130), int32], Tensor[(78), float32], Tensor[(12, 5, ?), bool]) {
  %206 = fn () -> (Tensor[(130), int32], Tensor[(78), float32], Tensor[(12, 5, ?), bool]) {
    %201 = @func_5350() /* ty=(Tensor[(130), int32],) */;
    %202 = @func_5389() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(784), float64]) */;
    %203 = %201.0;
    %204 = @func_4623() /* ty=Tensor[(78), float32] */;
    %205 = %202.0;
    (%203, %204, %205)
  };
  %206() /* ty=(Tensor[(130), int32], Tensor[(78), float32], Tensor[(12, 5, ?), bool]) */
}

def @func_4802() -> Tensor[(130), int32] {
  @func_4800() /* ty=Tensor[(130), int32] */
}

def @func_10954(%var_10953: Tensor[(78), float32]) -> (Tensor[(78), bool], Tensor[(78), float32]) {
  %215 = fn (%var_10944: Tensor[(78), float32]) -> (Tensor[(78), bool], Tensor[(78), float32]) {
    %207 = @func_3697() /* ty=Tensor[(78), float32] */;
    %208 = cast(%var_10944, dtype="bool") /* ty=Tensor[(78), bool] */;
    %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(1), int32] */;
    %210 = cast(%207, dtype="bool") /* ty=Tensor[(78), bool] */;
    %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?), bool] */;
    %212 = @func_5602() /* ty=(Tensor[(78), float32],) */;
    %213 = less_equal(%210, %211) /* ty=Tensor[(78), bool] */;
    %214 = %212.0;
    (%213, %214)
  };
  %215(%var_10953) /* ty=(Tensor[(78), bool], Tensor[(78), float32]) */
}

def @func_10460() -> Tensor[(10, 14, 11), float32] {
  %216 = @func_8864() /* ty=(Tensor[(784), float64], Tensor[(10, 14, 11), float32], Tensor[(1, 1540), float32]) */;
  %216.1
}

def @func_3041() -> Tensor[(12, 5, ?), float64] {
  %217 = @func_2783() /* ty=Tensor[(12, 5, ?), bool] */;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(12, 5, ?), float64] */;
  sigmoid(%218) /* ty=Tensor[(12, 5, ?), float64] */
}

def @func_3012() -> (Tensor[(15, 15, 15), float64], Tensor[(130), int32]) {
  %219 = @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */;
  %220 = %219.1;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %222 = reshape(%221, newshape=[225, 15]) /* ty=Tensor[(225, 15), float64] */;
  %223 = @func_1672(%222) /* ty=(Tensor[(12, 14, 5), float64], Tensor[(3375), float64], Tensor[(8, 20), float64], Tensor[(225, 15), float64], Tensor[(130), int32]) */;
  %224 = %223.4;
  (%220, %224)
}

def @func_11189(%var_11187: Tensor[(3375), float64]) -> (Tensor[(130), int32], Tensor[(3375), int16], Tensor[(3375), float64]) {
  @func_11186(%var_11187) /* ty=(Tensor[(130), int32], Tensor[(3375), int16], Tensor[(3375), float64]) */
}

def @func_9346() -> (Tensor[(12, 5, 130), bool], Tensor[(78), float32], Tensor[(3375), float64], Tensor[(12, 5, ?), bool]) {
  %237 = fn () -> (Tensor[(12, 5, 130), bool], Tensor[(78), float32], Tensor[(3375), float64], Tensor[(12, 5, ?), bool]) {
    %225 = @func_8290() /* ty=Tensor[(130), int32] */;
    %226 = @func_3472() /* ty=(Tensor[(12, 5, ?), float64],) */;
    %227 = %226.0;
    %228 = cast(%225, dtype="bool") /* ty=Tensor[(130), bool] */;
    %229 = cast(%227, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
    %230 = @func_5721() /* ty=(Tensor[(78), float32], Tensor[(78), float32]) */;
    %231 = @func_6365() /* ty=(Tensor[(3375), float64],) */;
    %232 = @func_5389() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(784), float64]) */;
    %233 = equal(%228, %229) /* ty=Tensor[(12, 5, 130), bool] */;
    %234 = %230.0;
    %235 = %231.0;
    %236 = %232.0;
    (%233, %234, %235, %236)
  };
  %237() /* ty=(Tensor[(12, 5, 130), bool], Tensor[(78), float32], Tensor[(3375), float64], Tensor[(12, 5, ?), bool]) */
}

def @func_3764(%var_3763: Tensor[(130), int32]) -> (Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) {
  %252 = fn (%var_3710: Tensor[(130), int32]) -> (Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) {
    %238 = cast(%var_3710, dtype="int32") /* ty=Tensor[(130), int32] */;
    %239 = reshape(%238, newshape=[130]) /* ty=Tensor[(130), int32] */;
    %240 = @func_3283(%239) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %241 = cast(meta[relay.Constant][11] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
    %242 = reshape(%241, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
    %243 = @func_440(%242) /* ty=(Tensor[(15, 15, 15), float64],) */;
    %244 = %243.0;
    %245 = cast(meta[relay.Constant][11] /* ty=Tensor[(3375), float64] */, dtype="bool") /* ty=Tensor[(3375), bool] */;
    %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
    %247 = cast(%244, dtype="bool") /* ty=Tensor[(15, 15, 15), bool] */;
    %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %249 = @func_3697() /* ty=Tensor[(78), float32] */;
    %250 = %240.1;
    %251 = logical_or(%247, %248) /* ty=Tensor[(15, 15, 15), bool] */;
    (%249, %250, %var_3710, %251)
  };
  %252(%var_3763) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) */
}

def @func_12312() -> Tensor[(78), float32] {
  @func_7534() /* ty=Tensor[(78), float32] */
}

def @func_6658(%var_6657: Tensor[(12, 14, 16), float64]) -> (Tensor[(12, 14, 16), float64], Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(78), float32]) {
  %260 = fn (%var_6630: Tensor[(12, 14, 16), float64]) -> (Tensor[(12, 14, 16), float64], Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(78), float32]) {
    %253 = cast(%var_6630, dtype="float64") /* ty=Tensor[(12, 14, 16), float64] */;
    %254 = cast(meta[relay.Constant][12] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %255 = reshape(%254, newshape=[16, 7, 7]) /* ty=Tensor[(16, 7, 7), float64] */;
    %256 = @func_1508(%255) /* ty=(Tensor[(16, 7, 7), float32],) */;
    %257 = atanh(%253) /* ty=Tensor[(12, 14, 16), float64] */;
    %258 = %256.0;
    %259 = @func_4007() /* ty=Tensor[(78), float32] */;
    (%257, %258, meta[relay.Constant][12] /* ty=Tensor[(784), float64] */, %259)
  };
  %260(%var_6657) /* ty=(Tensor[(12, 14, 16), float64], Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(78), float32]) */
}

def @func_4624() -> Tensor[(78), float32] {
  %261 = fn () -> Tensor[(78), float32] {
    @func_3697() /* ty=Tensor[(78), float32] */
  };
  %261() /* ty=Tensor[(78), float32] */
}

def @func_9046() -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64]) {
  @func_9044() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64]) */
}

def @func_5951(%var_5950: Tensor[(130), int32]) -> (Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  %267 = fn (%var_5941: Tensor[(130), int32]) -> (Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
    %262 = cast(%var_5941, dtype="int32") /* ty=Tensor[(130), int32] */;
    %263 = reshape(%262, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
    %264 = @func_1068(%263) /* ty=(Tensor[(2, 5, 13), int32],) */;
    %265 = @func_4383() /* ty=Tensor[(78), float32] */;
    %266 = %264.0;
    (%265, %266, %var_5941)
  };
  %267(%var_5950) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */
}

def @func_9132() -> (Tensor[(130), int32], Tensor[(1, 1540), float32]) {
  %272 = fn () -> (Tensor[(130), int32], Tensor[(1, 1540), float32]) {
    %268 = @func_4659() /* ty=(Tensor[(130), int32],) */;
    %269 = @func_8864() /* ty=(Tensor[(784), float64], Tensor[(10, 14, 11), float32], Tensor[(1, 1540), float32]) */;
    %270 = %268.0;
    %271 = %269.2;
    (%270, %271)
  };
  %272() /* ty=(Tensor[(130), int32], Tensor[(1, 1540), float32]) */
}

def @func_6343(%var_6341: Tensor[(225, 15), float64], %var_6342: Tensor[(144), float64]) -> (Tensor[(12, 5, ?), bool], Tensor[(28), float64], Tensor[(225, 15), float64], Tensor[(144), float64]) {
  %281 = fn (%var_6337: Tensor[(225, 15), float64], %var_6338: Tensor[(144), float64]) -> (Tensor[(12, 5, ?), bool], Tensor[(28), float64], Tensor[(225, 15), float64], Tensor[(144), float64]) {
    %273 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
    %274 = cast(%var_6337, dtype="float64") /* ty=Tensor[(225, 15), float64] */;
    %275 = cast(%var_6338, dtype="float64") /* ty=Tensor[(144), float64] */;
    %276 = reshape(%274, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
    %277 = reshape(%275, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %278 = @func_3912(%276, %277) /* ty=(Tensor[(12, 5, ?), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(144), float64], Tensor[(2, 5, 13), int32], Tensor[(130, 1), int32], Tensor[(6, 8, 3), float32], Tensor[(7, 1, 4), float64], Tensor[(28), float64], Tensor[(130), int32]) */;
    %279 = %273.0;
    %280 = %278.8;
    (%279, %280, %var_6337, %var_6338)
  };
  %281(%var_6341, %var_6342) /* ty=(Tensor[(12, 5, ?), bool], Tensor[(28), float64], Tensor[(225, 15), float64], Tensor[(144), float64]) */
}

def @func_11381() -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 5, 130), uint8]) {
  %282 = @func_4659() /* ty=(Tensor[(130), int32],) */;
  %283 = %282.0;
  %284 = cast(%283, dtype="int32") /* ty=Tensor[(130), int32] */;
  %285 = reshape(%284, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %286 = @func_3283(%285) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %287 = @func_9229() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), uint8]) */;
  %288 = @func_7395() /* ty=Tensor[(130), int32] */;
  %289 = %286.2;
  %290 = %287.1;
  (%288, %283, %289, %290)
}

def @func_1674(%var_1673: Tensor[(225, 15), float64]) -> (Tensor[(12, 14, 5), float64], Tensor[(3375), float64], Tensor[(8, 20), float64], Tensor[(225, 15), float64], Tensor[(130), int32]) {
  %301 = fn (%var_1666: Tensor[(225, 15), float64]) -> (Tensor[(12, 14, 5), float64], Tensor[(3375), float64], Tensor[(8, 20), float64], Tensor[(225, 15), float64], Tensor[(130), int32]) {
    %291 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 14, 5), float64] */, dtype="float64") /* ty=Tensor[(12, 14, 5), float64] */;
    %292 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 20), float64] */, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
    %293 = cast(%var_1666, dtype="float64") /* ty=Tensor[(225, 15), float64] */;
    %294 = cast(meta[relay.Constant][15] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
    %295 = reshape(%292, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float64] */;
    %296 = reshape(%293, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
    %297 = reshape(%294, newshape=[130]) /* ty=Tensor[(130), int32] */;
    %298 = @func_1132(%295, %296, %297) /* ty=(Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %299 = sinh(%291) /* ty=Tensor[(12, 14, 5), float64] */;
    %300 = %298.2;
    (%299, %300, meta[relay.Constant][14] /* ty=Tensor[(8, 20), float64] */, %var_1666, meta[relay.Constant][15] /* ty=Tensor[(130), int32] */)
  };
  %301(%var_1673) /* ty=(Tensor[(12, 14, 5), float64], Tensor[(3375), float64], Tensor[(8, 20), float64], Tensor[(225, 15), float64], Tensor[(130), int32]) */
}

def @func_9535() -> (Tensor[(130), int32], Tensor[(78), float32], Tensor[(784), float64], Tensor[(78), float32]) {
  @func_9533() /* ty=(Tensor[(130), int32], Tensor[(78), float32], Tensor[(784), float64], Tensor[(78), float32]) */
}

def @func_10142(%var_10141: Tensor[(130), int32]) -> (Tensor[(13, 5, 11), int64], Tensor[(15, 15, 15), bool], Tensor[(130), int32], Tensor[(784), float64], Tensor[(12, 5, 130), uint8]) {
  %315 = fn (%var_10112: Tensor[(130), int32]) -> (Tensor[(13, 5, 11), int64], Tensor[(15, 15, 15), bool], Tensor[(130), int32], Tensor[(784), float64], Tensor[(12, 5, 130), uint8]) {
    %302 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 5, 11), int64] */, dtype="int64") /* ty=Tensor[(13, 5, 11), int64] */;
    %303 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(13, 5, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 5, 11), int64] */, dtype="int64") /* ty=Tensor[(13, 5, 11), int64] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %306 = cast(%var_10112, dtype="int32") /* ty=Tensor[(130), int32] */;
    %307 = reshape(%306, newshape=[130]) /* ty=Tensor[(130), int32] */;
    %308 = @func_3762(%307) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) */;
    %309 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
    %310 = @func_9229() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), uint8]) */;
    %311 = bitwise_or(%304, %305) /* ty=Tensor[(13, 5, 11), int64] */;
    %312 = %308.3;
    %313 = %309.1;
    %314 = %310.1;
    (%311, %312, %var_10112, %313, %314)
  };
  %315(%var_10141) /* ty=(Tensor[(13, 5, 11), int64], Tensor[(15, 15, 15), bool], Tensor[(130), int32], Tensor[(784), float64], Tensor[(12, 5, 130), uint8]) */
}

def @func_11981() -> Tensor[(78), float32] {
  %316 = @func_9229() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), uint8]) */;
  %316.0
}

def @func_4999() -> Tensor[(12, 5, ?), bool] {
  @func_4997() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_11334(%var_11333: Tensor[(4, 1, 7), float32]) -> Tensor[(4, 1, 7), bool] {
  %319 = fn (%var_11328: Tensor[(4, 1, 7), float32]) -> Tensor[(4, 1, 7), bool] {
    %317 = cast(2.23799f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %318 = cast(%var_11328, dtype="bool") /* ty=Tensor[(4, 1, 7), bool] */;
    greater_equal(%317, %318) /* ty=Tensor[(4, 1, 7), bool] */
  };
  %319(%var_11333) /* ty=Tensor[(4, 1, 7), bool] */
}

def @func_8265() -> (Tensor[(784), float64], Tensor[(78), float32]) {
  %324 = fn () -> (Tensor[(784), float64], Tensor[(78), float32]) {
    %320 = @func_6306() /* ty=(Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) */;
    %321 = @func_7760() /* ty=(Tensor[(130), int32], Tensor[(78), float32]) */;
    %322 = %320.1;
    %323 = %321.1;
    (%322, %323)
  };
  %324() /* ty=(Tensor[(784), float64], Tensor[(78), float32]) */
}

def @func_11607() -> Tensor[(78), float32] {
  %326 = fn () -> Tensor[(78), float32] {
    %325 = @func_8920() /* ty=(Tensor[(78), float32], Tensor[(12, 5, ?), bool]) */;
    %325.0
  };
  %326() /* ty=Tensor[(78), float32] */
}

def @func_8998() -> (Tensor[(130), int32], Tensor[(10, 14, 11), float32], Tensor[(1540), float32], Tensor[(78), float32], Tensor[(130), int32]) {
  @func_8996() /* ty=(Tensor[(130), int32], Tensor[(10, 14, 11), float32], Tensor[(1540), float32], Tensor[(78), float32], Tensor[(130), int32]) */
}

def @func_12720() -> (Tensor[(130), int32], Tensor[(12, 5, 6), bool], Tensor[(360), bool]) {
  @func_12718() /* ty=(Tensor[(130), int32], Tensor[(12, 5, 6), bool], Tensor[(360), bool]) */
}

def @func_9711(%var_9709: Tensor[(3375), float64]) -> Tensor[(3375), int8] {
  @func_9708(%var_9709) /* ty=Tensor[(3375), int8] */
}

def @func_10624(%var_10623: Tensor[(3, 1540), float32]) -> (Tensor[(3, 1540), float32], Tensor[(2, 7, 10), float32], Tensor[(1, 140), float32]) {
  %343 = fn (%var_10587: Tensor[(3, 1540), float32]) -> (Tensor[(3, 1540), float32], Tensor[(2, 7, 10), float32], Tensor[(1, 140), float32]) {
    %327 = cast(%var_10587, dtype="float64") /* ty=Tensor[(3, 1540), float64] */;
    %328 = exp(%327) /* ty=Tensor[(3, 1540), float64] */;
    %329 = @func_9131() /* ty=(Tensor[(130), int32], Tensor[(1, 1540), float32]) */;
    %330 = %329.1;
    %331 = cast(%330, dtype="float32") /* ty=Tensor[(1, 1540), float32] */;
    %332 = cast(%var_10587, dtype="float32") /* ty=Tensor[(3, 1540), float32] */;
    %333 = divide(%331, %332) /* ty=Tensor[(3, 1540), float32] */;
    %334 = cast(%333, dtype="float32") /* ty=Tensor[(3, 1540), float32] */;
    %335 = shape_of(%328, dtype="int32") /* ty=Tensor[(2), int32] */;
    %336 = cast(%328, dtype="float32") /* ty=Tensor[(3, 1540), float32] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %338 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 140), float32] */, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
    %339 = reshape(%338, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), float32] */;
    %340 = @func_5217(%339) /* ty=(Tensor[(2, 7, 10), float32], Tensor[(130), int32], Tensor[(78), float32]) */;
    %341 = subtract(%336, %337) /* ty=Tensor[(3, 1540), float32] */;
    %342 = %340.0;
    (%341, %342, meta[relay.Constant][18] /* ty=Tensor[(1, 140), float32] */)
  };
  %343(%var_10623) /* ty=(Tensor[(3, 1540), float32], Tensor[(2, 7, 10), float32], Tensor[(1, 140), float32]) */
}

def @func_13131() -> Tensor[(140), float32] {
  %344 = @func_8409() /* ty=(Tensor[(130), int32], Tensor[(2, 7, 10), float32], Tensor[(140), float32], Tensor[(78), float32]) */;
  %344.2
}

def @func_12949() -> (Tensor[(78), float32], Tensor[(78), float32]) {
  %348 = fn () -> (Tensor[(78), float32], Tensor[(78), float32]) {
    %345 = @func_12790() /* ty=(Tensor[(78), float32],) */;
    %346 = %345.0;
    %347 = @func_10392() /* ty=Tensor[(78), float32] */;
    (%346, %347)
  };
  %348() /* ty=(Tensor[(78), float32], Tensor[(78), float32]) */
}

def @func_12459() -> (Tensor[(15, 15, 15), float64],) {
  %351 = fn () -> (Tensor[(15, 15, 15), float64],) {
    %349 = @func_4153() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
    %350 = %349.1;
    (%350,)
  };
  %351() /* ty=(Tensor[(15, 15, 15), float64],) */
}

def @func_4448(%var_4446: Tensor[(455), uint16]) -> (Tensor[(2, 5, 13), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) {
  @func_4445(%var_4446) /* ty=(Tensor[(2, 5, 13), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) */
}

def @func_11383() -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 5, 130), uint8]) {
  @func_11381() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 5, 130), uint8]) */
}

def @func_13264(%var_13248: Tensor[(144), float64]) -> (Tensor[(130), int32], Tensor[(3375), float64], Tensor[(144), float64]) {
  %352 = cast(%var_13248, dtype="float64") /* ty=Tensor[(144), float64] */;
  %353 = reshape(%352, newshape=[6, 8, 3]) /* ty=Tensor[(6, 8, 3), float64] */;
  %354 = @func_507(%353) /* ty=(Tensor[(6, 8, 3), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) */;
  %355 = @func_6796() /* ty=Tensor[(130), int32] */;
  %356 = %354.2;
  (%355, %356, %var_13248)
}

def @func_13812() -> (Tensor[(10, 14, 11), float64], Tensor[(130), int32], Tensor[(10, 14, 11), float32], Tensor[(12, 5, 78), int16]) {
  %363 = fn () -> (Tensor[(10, 14, 11), float64], Tensor[(130), int32], Tensor[(10, 14, 11), float32], Tensor[(12, 5, 78), int16]) {
    %357 = @func_11066() /* ty=(Tensor[(10, 14, 11), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %358 = @func_5687() /* ty=(Tensor[(12, 5, 78), int16], Tensor[(12, 5, ?), float32], Tensor[(130), int32]) */;
    %359 = %357.0;
    %360 = @func_6796() /* ty=Tensor[(130), int32] */;
    %361 = @func_10460() /* ty=Tensor[(10, 14, 11), float32] */;
    %362 = %358.0;
    (%359, %360, %361, %362)
  };
  %363() /* ty=(Tensor[(10, 14, 11), float64], Tensor[(130), int32], Tensor[(10, 14, 11), float32], Tensor[(12, 5, 78), int16]) */
}

def @func_6235(%var_6207: Tensor[(10, 14, 11), float32]) -> Tensor[(10, 14, 11), float32] {
  %364 = cast(%var_6207, dtype="float32") /* ty=Tensor[(10, 14, 11), float32] */;
  sinh(%364) /* ty=Tensor[(10, 14, 11), float32] */
}

def @func_8079(%var_8077: Tensor[(1, 455), uint16]) -> (Tensor[(78), float32], Tensor[(130), int32], Tensor[(1, 455), uint16]) {
  @func_8076(%var_8077) /* ty=(Tensor[(78), float32], Tensor[(130), int32], Tensor[(1, 455), uint16]) */
}

def @func_5721() -> (Tensor[(78), float32], Tensor[(78), float32]) {
  %365 = @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */;
  %366 = @func_4623() /* ty=Tensor[(78), float32] */;
  %367 = %365.3;
  (%366, %367)
}

def @func_9756() -> (Tensor[(130), int32],) {
  @func_9754() /* ty=(Tensor[(130), int32],) */
}

def @func_8811() -> (Tensor[(130), int32],) {
  @func_8809() /* ty=(Tensor[(130), int32],) */
}

def @func_11539() -> Tensor[(12, 5, ?), bool] {
  %369 = fn () -> Tensor[(12, 5, ?), bool] {
    %368 = @func_4522() /* ty=(Tensor[(12, 5, ?), bool],) */;
    %368.0
  };
  %369() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_6070(%var_6025: Tensor[(10, 5, 1), int8], %var_6044: Tensor[(1, 144), float64]) -> (Tensor[(10, 5, 12), int8], Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(1, 144), float64], Tensor[(2, 5, 13), int32], Tensor[(784), float64], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), float64]) {
  %370 = cast(%var_6025, dtype="int8") /* ty=Tensor[(10, 5, 1), int8] */;
  %371 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 5, 12), int8] */, dtype="int8") /* ty=Tensor[(10, 5, 12), int8] */;
  %372 = cast(meta[relay.Constant][20] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
  %373 = reshape(%372, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %374 = @func_5949(%373) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %375 = cast(%var_6044, dtype="float64") /* ty=Tensor[(1, 144), float64] */;
  %376 = reshape(%375, newshape=[8, 18]) /* ty=Tensor[(8, 18), float64] */;
  %377 = @func_5570(%376) /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(8, 18), float64]) */;
  %378 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %379 = cast(meta[relay.Constant][20] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
  %380 = reshape(%379, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %381 = @func_2733(%380) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %382 = @func_4522() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %383 = @func_5440() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */;
  %384 = minimum(%370, %371) /* ty=Tensor[(10, 5, 12), int8] */;
  %385 = %374.0;
  %386 = %377.0;
  %387 = %378.1;
  %388 = %381.1;
  %389 = %382.0;
  %390 = %383.1;
  (%384, %385, meta[relay.Constant][20] /* ty=Tensor[(130), int32] */, %386, %var_6044, %387, %388, %389, %390)
}

def @func_4789() -> (Tensor[(130), int32],) {
  %391 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %392 = %391.0;
  (%392,)
}

def @func_6903() -> (Tensor[(78), float32],) {
  %393 = @func_5244() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %394 = %393.0;
  (%394,)
}

def @func_7933(%var_7930: Tensor[(4, 14, 5), float64], %var_7931: Tensor[(4, 14, 5), float64], %var_7932: Tensor[(4, 14, 5), float64]) -> (Tensor[(4, 14, 5), float64], Tensor[(15, 15, 15), float64], Tensor[(4, 14, 5), bool], Tensor[(12, 5, ?), float64]) {
  %409 = fn (%var_7885: Tensor[(4, 14, 5), float64], %var_7886: Tensor[(4, 14, 5), float64], %var_7911: Tensor[(4, 14, 5), float64]) -> (Tensor[(4, 14, 5), float64], Tensor[(15, 15, 15), float64], Tensor[(4, 14, 5), bool], Tensor[(12, 5, ?), float64]) {
    %395 = cast(%var_7886, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
    %396 = shape_of(%var_7885, dtype="int32") /* ty=Tensor[(3), int32] */;
    %397 = cast(%var_7885, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
    %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %399 = @func_7486() /* ty=(Tensor[(15, 15, 15), float64],) */;
    %400 = cast(%var_7911, dtype="bool") /* ty=Tensor[(4, 14, 5), bool] */;
    %401 = shape_of(%var_7886, dtype="int32") /* ty=Tensor[(3), int32] */;
    %402 = cast(%var_7886, dtype="bool") /* ty=Tensor[(4, 14, 5), bool] */;
    %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %404 = @func_6698() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */;
    %405 = power(%397, %398) /* ty=Tensor[(4, 14, 5), float64] */;
    %406 = %399.0;
    %407 = not_equal(%402, %403) /* ty=Tensor[(4, 14, 5), bool] */;
    %408 = %404.1;
    (%405, %406, %407, %408)
  };
  %409(%var_7930, %var_7931, %var_7932) /* ty=(Tensor[(4, 14, 5), float64], Tensor[(15, 15, 15), float64], Tensor[(4, 14, 5), bool], Tensor[(12, 5, ?), float64]) */
}

def @func_2155(%var_2153: Tensor[(13, 7, 5), uint16], %var_2154: Tensor[(13, 7, 5), uint16]) -> Tensor[(13, 7, 5), bool] {
  @func_2151(%var_2153, %var_2154) /* ty=Tensor[(13, 7, 5), bool] */
}

def @func_13077() -> Tensor[(130), int32] {
  @func_13075() /* ty=Tensor[(130), int32] */
}

def @func_6433(%var_6423: Tensor[(50), int8]) -> (Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(50), int8], Tensor[(144), float64]) {
  %410 = @func_5244() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %411 = cast(%var_6423, dtype="int8") /* ty=Tensor[(50), int8] */;
  %412 = cast(meta[relay.Constant][21] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %413 = reshape(%411, newshape=[10, 5, 1]) /* ty=Tensor[(10, 5, 1), int8] */;
  %414 = reshape(%412, newshape=[1, 144]) /* ty=Tensor[(1, 144), float64] */;
  %415 = @func_6070(%413, %414) /* ty=(Tensor[(10, 5, 12), int8], Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(1, 144), float64], Tensor[(2, 5, 13), int32], Tensor[(784), float64], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), float64]) */;
  %416 = %410.1;
  %417 = %415.5;
  (%416, %417, %var_6423, meta[relay.Constant][21] /* ty=Tensor[(144), float64] */)
}

def @func_10292() -> Tensor[(78), float32] {
  %419 = fn () -> Tensor[(78), float32] {
    %418 = @func_8264() /* ty=(Tensor[(784), float64], Tensor[(78), float32]) */;
    %418.1
  };
  %419() /* ty=Tensor[(78), float32] */
}

def @func_1508(%var_1499: Tensor[(16, 7, 7), float64]) -> (Tensor[(16, 7, 7), float32],) {
  %420 = cast(%var_1499, dtype="float64") /* ty=Tensor[(16, 7, 7), float64] */;
  %421 = asin(%420) /* ty=Tensor[(16, 7, 7), float64] */;
  %422 = cast(%421, dtype="float32") /* ty=Tensor[(16, 7, 7), float32] */;
  %423 = shape_of(%var_1499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%var_1499, dtype="float32") /* ty=Tensor[(16, 7, 7), float32] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %426 = floor_divide(%424, %425) /* ty=Tensor[(16, 7, 7), float32] */;
  (%426,)
}

def @func_6436(%var_6434: Tensor[(50), int8]) -> (Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(50), int8], Tensor[(144), float64]) {
  @func_6433(%var_6434) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(50), int8], Tensor[(144), float64]) */
}

def @func_3283(%var_3281: Tensor[(130), int32]) -> (Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  %427 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %428 = cast(%var_3281, dtype="int32") /* ty=Tensor[(130), int32] */;
  %429 = reshape(%428, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %430 = @func_1068(%429) /* ty=(Tensor[(2, 5, 13), int32],) */;
  %431 = %427.0;
  %432 = %430.0;
  (%431, %432, %var_3281)
}

def @func_12864() -> Tensor[(78), float32] {
  %434 = fn () -> Tensor[(78), float32] {
    %433 = @func_7880() /* ty=(Tensor[(78), float32],) */;
    %433.0
  };
  %434() /* ty=Tensor[(78), float32] */
}

def @func_6119() -> (Tensor[(130), int32], Tensor[(3375), float64], Tensor[(160), float64], Tensor[(3375), float64]) {
  %445 = fn () -> (Tensor[(130), int32], Tensor[(3375), float64], Tensor[(160), float64], Tensor[(3375), float64]) {
    %435 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %436 = cast(meta[relay.Constant][22] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %437 = cast(meta[relay.Constant][23] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
    %438 = %435.2;
    %439 = cast(%438, dtype="int32") /* ty=Tensor[(130), int32] */;
    %440 = reshape(%436, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float64] */;
    %441 = reshape(%437, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
    %442 = reshape(%439, newshape=[130]) /* ty=Tensor[(130), int32] */;
    %443 = @func_1132(%440, %441, %442) /* ty=(Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %444 = %443.2;
    (%438, %444, meta[relay.Constant][22] /* ty=Tensor[(160), float64] */, meta[relay.Constant][23] /* ty=Tensor[(3375), float64] */)
  };
  %445() /* ty=(Tensor[(130), int32], Tensor[(3375), float64], Tensor[(160), float64], Tensor[(3375), float64]) */
}

def @func_3355() -> (Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) {
  %448 = fn () -> (Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) {
    %446 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
    %447 = @func_2783() /* ty=Tensor[(12, 5, ?), bool] */;
    (%446, %447)
  };
  %448() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) */
}

def @func_7066() -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 5, ?), bool]) {
  @func_7064() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 5, ?), bool]) */
}

def @func_7240() -> (Tensor[(12, 5, 78), int64], Tensor[(12, 5, 78), bool]) {
  %464 = fn () -> (Tensor[(12, 5, 78), int64], Tensor[(12, 5, 78), bool]) {
    %449 = @func_5602() /* ty=(Tensor[(78), float32],) */;
    %450 = %449.0;
    %451 = cast(meta[relay.Constant][24] /* ty=Tensor[(78), float32] */, dtype="float64") /* ty=Tensor[(78), float64] */;
    %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(1), int32] */;
    %453 = cast(%450, dtype="float64") /* ty=Tensor[(78), float64] */;
    %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?), float64] */;
    %455 = divide(%453, %454) /* ty=Tensor[(78), float64] */;
    %456 = @func_6777() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), float64]) */;
    %457 = %456.2;
    %458 = cast(%455, dtype="int64") /* ty=Tensor[(78), int64] */;
    %459 = cast(%457, dtype="int64") /* ty=Tensor[(12, 5, ?), int64] */;
    %460 = cast(%457, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
    %461 = cast(%450, dtype="bool") /* ty=Tensor[(78), bool] */;
    %462 = bitwise_or(%458, %459) /* ty=Tensor[(12, 5, 78), int64] */;
    %463 = less_equal(%460, %461) /* ty=Tensor[(12, 5, 78), bool] */;
    (%462, %463)
  };
  %464() /* ty=(Tensor[(12, 5, 78), int64], Tensor[(12, 5, 78), bool]) */
}

def @func_8222() -> (Tensor[(12, 5, ?), bool],) {
  %467 = fn () -> (Tensor[(12, 5, ?), bool],) {
    %465 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
    %466 = %465.1;
    (%466,)
  };
  %467() /* ty=(Tensor[(12, 5, ?), bool],) */
}

def @func_10838(%var_10836: Tensor[(3375), float64]) -> (Tensor[(130), int32], Tensor[(455), uint16], Tensor[(455), uint16], Tensor[(130), int32], Tensor[(2, 5, 13), int32], Tensor[(784), float64], Tensor[(12, 5, 130), float32], Tensor[(3375), float32], Tensor[(3375), float64]) {
  @func_10835(%var_10836) /* ty=(Tensor[(130), int32], Tensor[(455), uint16], Tensor[(455), uint16], Tensor[(130), int32], Tensor[(2, 5, 13), int32], Tensor[(784), float64], Tensor[(12, 5, 130), float32], Tensor[(3375), float32], Tensor[(3375), float64]) */
}

def @func_10554() -> Tensor[(130), int32] {
  %468 = @func_3982() /* ty=(Tensor[(130), int32],) */;
  %468.0
}

def @func_13953() -> Tensor[(130), int32] {
  @func_13951() /* ty=Tensor[(130), int32] */
}

def @func_4384() -> Tensor[(78), float32] {
  %469 = fn () -> Tensor[(78), float32] {
    @func_4007() /* ty=Tensor[(78), float32] */
  };
  %469() /* ty=Tensor[(78), float32] */
}

def @func_2783() -> Tensor[(12, 5, ?), bool] {
  %470 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 5, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 1), float64] */;
  %471 = rsqrt(%470) /* ty=Tensor[(12, 5, 1), float64] */;
  %472 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 5, 1), float64] */, dtype="int32") /* ty=Tensor[(12, 5, 1), int32] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%471, dtype="int32") /* ty=Tensor[(12, 5, 1), int32] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %476 = left_shift(%474, %475) /* ty=Tensor[(12, 5, ?), int32] */;
  %477 = cast(%471, dtype="bool") /* ty=Tensor[(12, 5, 1), bool] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%476, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%479, %480) /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_5934() -> (Tensor[(12, 5, ?), bool], Tensor[(78), float32]) {
  %484 = fn () -> (Tensor[(12, 5, ?), bool], Tensor[(78), float32]) {
    %481 = @func_5440() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */;
    %482 = @func_2783() /* ty=Tensor[(12, 5, ?), bool] */;
    %483 = %481.0;
    (%482, %483)
  };
  %484() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */
}

def @func_8696() -> (Tensor[(130), int32],) {
  @func_8694() /* ty=(Tensor[(130), int32],) */
}

def @func_3091(%var_3085: Tensor[(3375), float64]) -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) {
  %485 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %486 = cast(%var_3085, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %487 = reshape(%486, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %488 = @func_440(%487) /* ty=(Tensor[(15, 15, 15), float64],) */;
  %489 = %485.1;
  %490 = %488.0;
  (%489, %490, %var_3085)
}

def @func_5822(%var_5820: Tensor[(784), float64]) -> (Tensor[(130), int32], Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(15, 15, 15), bool], Tensor[(784), float64]) {
  @func_5819(%var_5820) /* ty=(Tensor[(130), int32], Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(15, 15, 15), bool], Tensor[(784), float64]) */
}

def @func_13267(%var_13265: Tensor[(144), float64]) -> (Tensor[(130), int32], Tensor[(3375), float64], Tensor[(144), float64]) {
  @func_13264(%var_13265) /* ty=(Tensor[(130), int32], Tensor[(3375), float64], Tensor[(144), float64]) */
}

def @func_8084() -> Tensor[(12, 5, ?), bool] {
  %491 = fn () -> Tensor[(12, 5, ?), bool] {
    @func_3482() /* ty=Tensor[(12, 5, ?), bool] */
  };
  %491() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_11112() -> Tensor[(130), int32] {
  @func_7395() /* ty=Tensor[(130), int32] */
}

def @func_3849() -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) {
  @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */
}

def @func_8490() -> (Tensor[(130), int32], Tensor[(78), float32]) {
  %496 = fn () -> (Tensor[(130), int32], Tensor[(78), float32]) {
    %492 = @func_4789() /* ty=(Tensor[(130), int32],) */;
    %493 = @func_4254() /* ty=(Tensor[(130), int32], Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(78), float32]) */;
    %494 = %492.0;
    %495 = %493.3;
    (%494, %495)
  };
  %496() /* ty=(Tensor[(130), int32], Tensor[(78), float32]) */
}

def @func_13114() -> (Tensor[(12, 5, ?), bool], Tensor[(130), int32], Tensor[(12, 5, 78), bool], Tensor[(784), float64]) {
  %505 = fn () -> (Tensor[(12, 5, ?), bool], Tensor[(130), int32], Tensor[(12, 5, 78), bool], Tensor[(784), float64]) {
    %497 = @func_10690() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */;
    %498 = @func_12718() /* ty=(Tensor[(130), int32], Tensor[(12, 5, 6), bool], Tensor[(360), bool]) */;
    %499 = @func_7239() /* ty=(Tensor[(12, 5, 78), int64], Tensor[(12, 5, 78), bool]) */;
    %500 = @func_8864() /* ty=(Tensor[(784), float64], Tensor[(10, 14, 11), float32], Tensor[(1, 1540), float32]) */;
    %501 = %497.0;
    %502 = %498.0;
    %503 = %499.1;
    %504 = %500.0;
    (%501, %502, %503, %504)
  };
  %505() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(130), int32], Tensor[(12, 5, 78), bool], Tensor[(784), float64]) */
}

def @func_5534(%var_5532: Tensor[(10, 6, 4), int8], %var_5533: Tensor[(10, 6, 4), int8]) -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(2, 5, 13), int32], Tensor[(10, 6, 4), uint16], Tensor[(10, 6, 4), float32]) {
  @func_5530(%var_5532, %var_5533) /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(2, 5, 13), int32], Tensor[(10, 6, 4), uint16], Tensor[(10, 6, 4), float32]) */
}

def @func_12617(%var_12615: Tensor[(8, 10, 9), float32], %var_12616: Tensor[(28), float32]) -> (Tensor[(8, 10, 9), float32], Tensor[(3375), int16], Tensor[(3375), float64], Tensor[(4, 1, 7), bool], Tensor[(28), float32]) {
  @func_12613(%var_12615, %var_12616) /* ty=(Tensor[(8, 10, 9), float32], Tensor[(3375), int16], Tensor[(3375), float64], Tensor[(4, 1, 7), bool], Tensor[(28), float32]) */
}

def @func_13860() -> (Tensor[(130), int32],) {
  %507 = fn () -> (Tensor[(130), int32],) {
    %506 = @func_8161() /* ty=Tensor[(130), int32] */;
    (%506,)
  };
  %507() /* ty=(Tensor[(130), int32],) */
}

def @func_9908() -> (Tensor[(15, 15, 15), float64], Tensor[(12, 5, ?), bool]) {
  %512 = fn () -> (Tensor[(15, 15, 15), float64], Tensor[(12, 5, ?), bool]) {
    %508 = @func_7486() /* ty=(Tensor[(15, 15, 15), float64],) */;
    %509 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
    %510 = %508.0;
    %511 = %509.0;
    (%510, %511)
  };
  %512() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(12, 5, ?), bool]) */
}

def @func_8661() -> (Tensor[(15, 15, 15), float64], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(78), int32]) {
  %513 = @func_5244() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %514 = @func_7486() /* ty=(Tensor[(15, 15, 15), float64],) */;
  %515 = @func_4383() /* ty=Tensor[(78), float32] */;
  %516 = @func_4623() /* ty=Tensor[(78), float32] */;
  %517 = cast(%516, dtype="int32") /* ty=Tensor[(78), int32] */;
  %518 = shape_of(%515, dtype="int32") /* ty=Tensor[(1), int32] */;
  %519 = cast(%515, dtype="int32") /* ty=Tensor[(78), int32] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?), int32] */;
  %521 = %513.1;
  %522 = @func_7395() /* ty=Tensor[(130), int32] */;
  %523 = %514.0;
  %524 = maximum(%519, %520) /* ty=Tensor[(78), int32] */;
  (%521, %522, %523, %524)
}

def @func_4800() -> Tensor[(130), int32] {
  %525 = @func_3982() /* ty=(Tensor[(130), int32],) */;
  %525.0
}

def @func_6100() -> Tensor[(78), float32] {
  @func_6098() /* ty=Tensor[(78), float32] */
}

def @func_3286(%var_3284: Tensor[(130), int32]) -> (Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  @func_3283(%var_3284) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */
}

def @func_9274() -> Tensor[(130), int32] {
  %527 = fn () -> Tensor[(130), int32] {
    %526 = @func_9044() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64]) */;
    %526.0
  };
  %527() /* ty=Tensor[(130), int32] */
}

def @func_4791() -> (Tensor[(130), int32],) {
  @func_4789() /* ty=(Tensor[(130), int32],) */
}

def @func_12216() -> Tensor[(12, 4, 7), float64] {
  %529 = fn () -> Tensor[(12, 4, 7), float64] {
    %528 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 4, 7), float64] */, dtype="float64") /* ty=Tensor[(12, 4, 7), float64] */;
    sigmoid(%528) /* ty=Tensor[(12, 4, 7), float64] */
  };
  %529() /* ty=Tensor[(12, 4, 7), float64] */
}

def @main() -> (Tensor[(12, 5, ?), float64], Tensor[(12, 5, 784), float64]) {
  %530 = @func_6307() /* ty=(Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) */;
  %531 = %530.1;
  %532 = @func_12265() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */;
  %533 = %532.0;
  %534 = cast(%531, dtype="float32") /* ty=Tensor[(784), float32] */;
  %535 = cast(%533, dtype="float32") /* ty=Tensor[(12, 5, ?), float32] */;
  %536 = floor_mod(%534, %535) /* ty=Tensor[(12, 5, 784), float32] */;
  %537 = cast(%536, dtype="float64") /* ty=Tensor[(12, 5, 784), float64] */;
  %538 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  %539 = exp(%537) /* ty=Tensor[(12, 5, 784), float64] */;
  (%538, %539)
}

def @func_13075() -> Tensor[(130), int32] {
  @func_12476() /* ty=Tensor[(130), int32] */
}

def @func_11067() -> (Tensor[(10, 14, 11), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  %549 = fn () -> (Tensor[(10, 14, 11), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
    %540 = @func_10460() /* ty=Tensor[(10, 14, 11), float32] */;
    %541 = cast(%540, dtype="float64") /* ty=Tensor[(10, 14, 11), float64] */;
    %542 = atanh(%541) /* ty=Tensor[(10, 14, 11), float64] */;
    %543 = cast(%542, dtype="float64") /* ty=Tensor[(10, 14, 11), float64] */;
    %544 = cast(meta[relay.Constant][27] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
    %545 = reshape(%544, newshape=[130]) /* ty=Tensor[(130), int32] */;
    %546 = @func_3762(%545) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) */;
    %547 = asinh(%543) /* ty=Tensor[(10, 14, 11), float64] */;
    %548 = %546.1;
    (%547, %548, meta[relay.Constant][27] /* ty=Tensor[(130), int32] */)
  };
  %549() /* ty=(Tensor[(10, 14, 11), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */
}

def @func_5723() -> (Tensor[(78), float32], Tensor[(78), float32]) {
  @func_5721() /* ty=(Tensor[(78), float32], Tensor[(78), float32]) */
}

def @func_14314() -> (Tensor[(78), float32],) {
  @func_14312() /* ty=(Tensor[(78), float32],) */
}

def @func_10556() -> Tensor[(130), int32] {
  @func_10554() /* ty=Tensor[(130), int32] */
}

def @func_4660() -> (Tensor[(130), int32],) {
  %552 = fn () -> (Tensor[(130), int32],) {
    %550 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
    %551 = %550.1;
    (%551,)
  };
  %552() /* ty=(Tensor[(130), int32],) */
}

def @func_6777() -> (Tensor[(130), int32], Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), float64]) {
  %553 = @func_4659() /* ty=(Tensor[(130), int32],) */;
  %554 = @func_3472() /* ty=(Tensor[(12, 5, ?), float64],) */;
  %555 = %553.0;
  %556 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  %557 = %554.0;
  (%555, %556, %557)
}

def @func_6893(%var_6892: Tensor[(6, 4, 9), float32]) -> (Tensor[(6, 4, 9), float32], Tensor[(12, 5, ?), float32]) {
  %565 = fn (%var_6876: Tensor[(6, 4, 9), float32]) -> (Tensor[(6, 4, 9), float32], Tensor[(12, 5, ?), float32]) {
    %558 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 4, 9), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 9), float32] */;
    %559 = shape_of(%var_6876, dtype="int32") /* ty=Tensor[(3), int32] */;
    %560 = cast(%var_6876, dtype="float32") /* ty=Tensor[(6, 4, 9), float32] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %562 = @func_5687() /* ty=(Tensor[(12, 5, 78), int16], Tensor[(12, 5, ?), float32], Tensor[(130), int32]) */;
    %563 = floor_divide(%560, %561) /* ty=Tensor[(6, 4, 9), float32] */;
    %564 = %562.1;
    (%563, %564)
  };
  %565(%var_6892) /* ty=(Tensor[(6, 4, 9), float32], Tensor[(12, 5, ?), float32]) */
}

def @func_3912(%var_3853: Tensor[(3375), float64], %var_3856: Tensor[(144), float64]) -> (Tensor[(12, 5, ?), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(144), float64], Tensor[(2, 5, 13), int32], Tensor[(130, 1), int32], Tensor[(6, 8, 3), float32], Tensor[(7, 1, 4), float64], Tensor[(28), float64], Tensor[(130), int32]) {
  %566 = cast(%var_3853, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %567 = reshape(%566, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %568 = @func_440(%567) /* ty=(Tensor[(15, 15, 15), float64],) */;
  %569 = cast(meta[relay.Constant][29] /* ty=Tensor[(130, 1), int32] */, dtype="int32") /* ty=Tensor[(130, 1), int32] */;
  %570 = reshape(%569, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %571 = @func_1068(%570) /* ty=(Tensor[(2, 5, 13), int32],) */;
  %572 = cast(%var_3856, dtype="float64") /* ty=Tensor[(144), float64] */;
  %573 = reshape(%572, newshape=[6, 8, 3]) /* ty=Tensor[(6, 8, 3), float64] */;
  %574 = @func_507(%573) /* ty=(Tensor[(6, 8, 3), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) */;
  %575 = %574.0;
  %576 = cast(%575, dtype="float32") /* ty=Tensor[(6, 8, 3), float32] */;
  %577 = cast(meta[relay.Constant][30] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %578 = reshape(%577, newshape=[7, 1, 4]) /* ty=Tensor[(7, 1, 4), float64] */;
  %579 = @func_2039(%578) /* ty=(Tensor[(7, 1, 4), float64],) */;
  %580 = @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */;
  %581 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  %582 = %568.0;
  %583 = %571.0;
  %584 = sinh(%576) /* ty=Tensor[(6, 8, 3), float32] */;
  %585 = %579.0;
  %586 = %580.0;
  (%581, %582, %var_3853, %var_3856, %583, meta[relay.Constant][29] /* ty=Tensor[(130, 1), int32] */, %584, %585, meta[relay.Constant][30] /* ty=Tensor[(28), float64] */, %586)
}

def @func_510(%var_508: Tensor[(6, 8, 3), float64]) -> (Tensor[(6, 8, 3), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) {
  @func_507(%var_508) /* ty=(Tensor[(6, 8, 3), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) */
}

def @func_9229() -> (Tensor[(78), float32], Tensor[(12, 5, 130), uint8]) {
  %587 = @func_7760() /* ty=(Tensor[(130), int32], Tensor[(78), float32]) */;
  %588 = @func_5440() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */;
  %589 = %588.1;
  %590 = @func_5687() /* ty=(Tensor[(12, 5, 78), int16], Tensor[(12, 5, ?), float32], Tensor[(130), int32]) */;
  %591 = %590.2;
  %592 = cast(%589, dtype="uint8") /* ty=Tensor[(12, 5, 130), uint8] */;
  %593 = cast(%591, dtype="uint8") /* ty=Tensor[(130), uint8] */;
  %594 = %587.1;
  %595 = add(%592, %593) /* ty=Tensor[(12, 5, 130), uint8] */;
  (%594, %595)
}

def @func_11017() -> Tensor[(130), int32] {
  %596 = fn () -> Tensor[(130), int32] {
    @func_9273() /* ty=Tensor[(130), int32] */
  };
  %596() /* ty=Tensor[(130), int32] */
}

def @func_3484() -> Tensor[(12, 5, ?), bool] {
  @func_3482() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_3697() -> Tensor[(78), float32] {
  %597 = @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */;
  %597.2
}

def @func_8996() -> (Tensor[(130), int32], Tensor[(10, 14, 11), float32], Tensor[(1540), float32], Tensor[(78), float32], Tensor[(130), int32]) {
  %598 = @func_6698() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */;
  %599 = cast(meta[relay.Constant][31] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %600 = reshape(%599, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %601 = @func_8694() /* ty=(Tensor[(130), int32],) */;
  %602 = %598.0;
  %603 = @func_6235(%600) /* ty=Tensor[(10, 14, 11), float32] */;
  %604 = @func_3697() /* ty=Tensor[(78), float32] */;
  %605 = %601.0;
  (%602, %603, meta[relay.Constant][31] /* ty=Tensor[(1540), float32] */, %604, %605)
}

def @func_7535() -> Tensor[(78), float32] {
  %609 = fn () -> Tensor[(78), float32] {
    %606 = @func_5721() /* ty=(Tensor[(78), float32], Tensor[(78), float32]) */;
    %607 = %606.1;
    %608 = cast(%607, dtype="float32") /* ty=Tensor[(78), float32] */;
    sinh(%608) /* ty=Tensor[(78), float32] */
  };
  %609() /* ty=Tensor[(78), float32] */
}

def @func_8751() -> Tensor[(130), int32] {
  @func_6405() /* ty=Tensor[(130), int32] */
}

def @func_4559(%var_4548: Tensor[(130), int32]) -> (Tensor[(12, 5, ?), float64], Tensor[(7, 1, 4), float64], Tensor[(14, 2), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(12, 5, ?), float64]) {
  %610 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 2), float64] */;
  %611 = reshape(%610, newshape=[7, 1, 4]) /* ty=Tensor[(7, 1, 4), float64] */;
  %612 = @func_2039(%611) /* ty=(Tensor[(7, 1, 4), float64],) */;
  %613 = cast(%var_4548, dtype="int32") /* ty=Tensor[(130), int32] */;
  %614 = reshape(%613, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %615 = @func_3283(%614) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %616 = @func_3354() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) */;
  %617 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  %618 = %612.0;
  %619 = %615.1;
  %620 = %616.0;
  (%617, %618, meta[relay.Constant][32] /* ty=Tensor[(14, 2), float64] */, %619, %var_4548, %620)
}

def @func_8183(%var_8172: Tensor[(6, 6, 9), float32]) -> Tensor[(6, 6, 9), float32] {
  %621 = cast(%var_8172, dtype="float32") /* ty=Tensor[(6, 6, 9), float32] */;
  asinh(%621) /* ty=Tensor[(6, 6, 9), float32] */
}

def @func_13703(%var_13626: Tensor[(144), float64], %var_13643: Tensor[(3375), float64], %var_13696: Tensor[(858), float32]) -> (Tensor[(78), float32], Tensor[(78), float32], Tensor[(12, 5, 78), uint32], Tensor[(12, 5, 130), int32], Tensor[(144), float64], Tensor[(144), float64], Tensor[(130, 1), int32], Tensor[(3375), float64], Tensor[(78), float32], Tensor[(12, 5, 130), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(6, 13, 11), float32], Tensor[(858), float32]) {
  %622 = @func_12700() /* ty=(Tensor[(130), int32], Tensor[(78), float32]) */;
  %623 = @func_9345() /* ty=(Tensor[(12, 5, 130), bool], Tensor[(78), float32], Tensor[(3375), float64], Tensor[(12, 5, ?), bool]) */;
  %624 = @func_11234() /* ty=(Tensor[(78), float32],) */;
  %625 = %624.0;
  %626 = @func_13427() /* ty=Tensor[(12, 5, ?), bool] */;
  %627 = cast(%625, dtype="uint32") /* ty=Tensor[(78), uint32] */;
  %628 = cast(%626, dtype="uint32") /* ty=Tensor[(12, 5, ?), uint32] */;
  %629 = @func_8290() /* ty=Tensor[(130), int32] */;
  %630 = cast(%629, dtype="uint32") /* ty=Tensor[(130), uint32] */;
  %631 = cast(%626, dtype="uint32") /* ty=Tensor[(12, 5, ?), uint32] */;
  %632 = logical_xor(%630, %631) /* ty=Tensor[(12, 5, 130), uint32] */;
  %633 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 5, 130), uint32] */, dtype="int32") /* ty=Tensor[(12, 5, 130), int32] */;
  %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%632, dtype="int32") /* ty=Tensor[(12, 5, 130), int32] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %637 = cast(%var_13626, dtype="float64") /* ty=Tensor[(144), float64] */;
  %638 = reshape(%637, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %639 = @func_13264(%638) /* ty=(Tensor[(130), int32], Tensor[(3375), float64], Tensor[(144), float64]) */;
  %640 = cast(%var_13643, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %641 = %639.2;
  %642 = cast(%641, dtype="float64") /* ty=Tensor[(144), float64] */;
  %643 = reshape(%640, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %644 = reshape(%642, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %645 = @func_3912(%643, %644) /* ty=(Tensor[(12, 5, ?), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(144), float64], Tensor[(2, 5, 13), int32], Tensor[(130, 1), int32], Tensor[(6, 8, 3), float32], Tensor[(7, 1, 4), float64], Tensor[(28), float64], Tensor[(130), int32]) */;
  %646 = @func_9345() /* ty=(Tensor[(12, 5, 130), bool], Tensor[(78), float32], Tensor[(3375), float64], Tensor[(12, 5, ?), bool]) */;
  %647 = cast(%632, dtype="float64") /* ty=Tensor[(12, 5, 130), float64] */;
  %648 = acos(%647) /* ty=Tensor[(12, 5, 130), float64] */;
  %649 = cast(%648, dtype="float32") /* ty=Tensor[(12, 5, 130), float32] */;
  %650 = @func_4789() /* ty=(Tensor[(130), int32],) */;
  %651 = cast(%var_13696, dtype="float32") /* ty=Tensor[(858), float32] */;
  %652 = reshape(%651, newshape=[6, 13, 11]) /* ty=Tensor[(6, 13, 11), float32] */;
  %653 = @func_9589(%652) /* ty=(Tensor[(6, 13, 11), float32],) */;
  %654 = %622.1;
  %655 = %623.1;
  %656 = maximum(%627, %628) /* ty=Tensor[(12, 5, 78), uint32] */;
  %657 = subtract(%635, %636) /* ty=Tensor[(12, 5, 130), int32] */;
  %658 = %645.5;
  %659 = %646.1;
  %660 = atanh(%649) /* ty=Tensor[(12, 5, 130), float32] */;
  %661 = @func_7676() /* ty=Tensor[(130), int32] */;
  %662 = %650.0;
  %663 = %653.0;
  (%654, %655, %656, %657, %641, %var_13626, %658, %var_13643, %659, %660, %661, %662, %663, %var_13696)
}

def @func_12263() -> (Tensor[(12, 5, ?), bool], Tensor[(78), float32]) {
  %664 = @func_7591() /* ty=(Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), bool]) */;
  %665 = @func_12056() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */;
  %666 = %664.1;
  %667 = %665.1;
  (%666, %667)
}

def @func_2684() -> (Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  %668 = @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */;
  %669 = cast(meta[relay.Constant][34] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
  %670 = reshape(%669, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %671 = @func_1068(%670) /* ty=(Tensor[(2, 5, 13), int32],) */;
  %672 = %668.1;
  %673 = %671.0;
  (%672, %673, meta[relay.Constant][34] /* ty=Tensor[(130), int32] */)
}

def @func_13394() -> (Tensor[(15, 15, 15), float32], Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32]) {
  %682 = fn () -> (Tensor[(15, 15, 15), float32], Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32]) {
    %674 = @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */;
    %675 = %674.2;
    %676 = cast(%675, dtype="float32") /* ty=Tensor[(15, 15, 15), float32] */;
    %677 = @func_12237() /* ty=(Tensor[(130), int32],) */;
    %678 = exp(%676) /* ty=Tensor[(15, 15, 15), float32] */;
    %679 = @func_7534() /* ty=Tensor[(78), float32] */;
    %680 = %677.0;
    %681 = @func_10554() /* ty=Tensor[(130), int32] */;
    (%678, %679, %680, %681)
  };
  %682() /* ty=(Tensor[(15, 15, 15), float32], Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32]) */
}

def @func_14826(%var_14825: Tensor[(455), uint16]) -> (Tensor[(78), float32], Tensor[(130), int32], Tensor[(455), uint16], Tensor[(455), uint16], Tensor[(12, 5, 78), float32]) {
  %698 = fn (%var_14810: Tensor[(455), uint16]) -> (Tensor[(78), float32], Tensor[(130), int32], Tensor[(455), uint16], Tensor[(455), uint16], Tensor[(12, 5, 78), float32]) {
    %683 = @func_8146() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(280), float64], Tensor[(4, 14, 5), float32]) */;
    %684 = cast(%var_14810, dtype="uint16") /* ty=Tensor[(455), uint16] */;
    %685 = reshape(%684, newshape=[455]) /* ty=Tensor[(455), uint16] */;
    %686 = @func_4445(%685) /* ty=(Tensor[(2, 5, 13), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) */;
    %687 = @func_11606() /* ty=Tensor[(78), float32] */;
    %688 = @func_11538() /* ty=Tensor[(12, 5, ?), bool] */;
    %689 = cast(%687, dtype="bool") /* ty=Tensor[(78), bool] */;
    %690 = cast(%688, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
    %691 = logical_and(%689, %690) /* ty=Tensor[(12, 5, 78), bool] */;
    %692 = cast(%691, dtype="float32") /* ty=Tensor[(12, 5, 78), float32] */;
    %693 = cast(%687, dtype="float32") /* ty=Tensor[(78), float32] */;
    %694 = @func_4383() /* ty=Tensor[(78), float32] */;
    %695 = %683.1;
    %696 = %686.2;
    %697 = floor_divide(%692, %693) /* ty=Tensor[(12, 5, 78), float32] */;
    (%694, %695, %696, %var_14810, %697)
  };
  %698(%var_14825) /* ty=(Tensor[(78), float32], Tensor[(130), int32], Tensor[(455), uint16], Tensor[(455), uint16], Tensor[(12, 5, 78), float32]) */
}

def @func_6074(%var_6072: Tensor[(10, 5, 1), int8], %var_6073: Tensor[(1, 144), float64]) -> (Tensor[(10, 5, 12), int8], Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(1, 144), float64], Tensor[(2, 5, 13), int32], Tensor[(784), float64], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), float64]) {
  @func_6070(%var_6072, %var_6073) /* ty=(Tensor[(10, 5, 12), int8], Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(1, 144), float64], Tensor[(2, 5, 13), int32], Tensor[(784), float64], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), float64]) */
}

def @func_10835(%var_10770: Tensor[(3375), float64]) -> (Tensor[(130), int32], Tensor[(455), uint16], Tensor[(455), uint16], Tensor[(130), int32], Tensor[(2, 5, 13), int32], Tensor[(784), float64], Tensor[(12, 5, 130), float32], Tensor[(3375), float32], Tensor[(3375), float64]) {
  %699 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %700 = cast(meta[relay.Constant][35] /* ty=Tensor[(455), uint16] */, dtype="uint16") /* ty=Tensor[(455), uint16] */;
  %701 = reshape(%700, newshape=[455]) /* ty=Tensor[(455), uint16] */;
  %702 = @func_4445(%701) /* ty=(Tensor[(2, 5, 13), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) */;
  %703 = @func_5350() /* ty=(Tensor[(130), int32],) */;
  %704 = %703.0;
  %705 = cast(%704, dtype="int32") /* ty=Tensor[(130), int32] */;
  %706 = reshape(%705, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %707 = @func_3762(%706) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) */;
  %708 = @func_9533() /* ty=(Tensor[(130), int32], Tensor[(78), float32], Tensor[(784), float64], Tensor[(78), float32]) */;
  %709 = @func_8564() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(12, 5, 130), float32]) */;
  %710 = cast(%var_10770, dtype="float32") /* ty=Tensor[(3375), float32] */;
  %711 = sqrt(%710) /* ty=Tensor[(3375), float32] */;
  %712 = cast(%var_10770, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %713 = reshape(%712, newshape=[225, 15]) /* ty=Tensor[(225, 15), float64] */;
  %714 = @func_1672(%713) /* ty=(Tensor[(12, 14, 5), float64], Tensor[(3375), float64], Tensor[(8, 20), float64], Tensor[(225, 15), float64], Tensor[(130), int32]) */;
  %715 = %714.3;
  %716 = cast(%715, dtype="float32") /* ty=Tensor[(225, 15), float32] */;
  %717 = shape_of(%711, dtype="int32") /* ty=Tensor[(1), int32] */;
  %718 = cast(%711, dtype="float32") /* ty=Tensor[(3375), float32] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?), float32] */;
  %720 = cast(%711, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %721 = %699.0;
  %722 = %702.2;
  %723 = %707.1;
  %724 = %708.2;
  %725 = %709.2;
  %726 = floor_divide(%718, %719) /* ty=Tensor[(3375), float32] */;
  %727 = atanh(%720) /* ty=Tensor[(3375), float64] */;
  (%721, %722, meta[relay.Constant][35] /* ty=Tensor[(455), uint16] */, %704, %723, %724, %725, %726, %727)
}

def @func_8373() -> (Tensor[(12, 5, ?), float64], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(12, 5, ?), float64], Tensor[(3375), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(130), int32]) {
  %745 = fn () -> (Tensor[(12, 5, ?), float64], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(12, 5, ?), float64], Tensor[(3375), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(130), int32]) {
    %728 = @func_3472() /* ty=(Tensor[(12, 5, ?), float64],) */;
    %729 = @func_7692() /* ty=(Tensor[(78), float32], Tensor[(130), int32]) */;
    %730 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
    %731 = @func_6365() /* ty=(Tensor[(3375), float64],) */;
    %732 = cast(meta[relay.Constant][36] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
    %733 = %730.0;
    %734 = cast(%733, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
    %735 = reshape(%732, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), float32] */;
    %736 = reshape(%734, newshape=[1125, 3]) /* ty=Tensor[(1125, 3), float64] */;
    %737 = @func_619(%735, %736) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(15, 15, 15), float64], Tensor[(1125, 3), float64], Tensor[(15, 15, 15), float64]) */;
    %738 = @func_4659() /* ty=(Tensor[(130), int32],) */;
    %739 = %728.0;
    %740 = %729.1;
    %741 = @func_5317() /* ty=Tensor[(12, 5, ?), float64] */;
    %742 = %731.0;
    %743 = %737.3;
    %744 = %738.0;
    (%739, %740, %733, %741, %742, %743, meta[relay.Constant][36] /* ty=Tensor[(78), float32] */, %744)
  };
  %745() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(12, 5, ?), float64], Tensor[(3375), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(130), int32]) */
}

def @func_11500() -> (Tensor[(12, 5, 130), bool], Tensor[(130), int32], Tensor[(6, 4, 13), float32], Tensor[(78), float32], Tensor[(1125, 3), float64]) {
  @func_11498() /* ty=(Tensor[(12, 5, 130), bool], Tensor[(130), int32], Tensor[(6, 4, 13), float32], Tensor[(78), float32], Tensor[(1125, 3), float64]) */
}

def @func_5317() -> Tensor[(12, 5, ?), float64] {
  %746 = @func_3472() /* ty=(Tensor[(12, 5, ?), float64],) */;
  %746.0
}

def @func_2041(%var_2040: Tensor[(7, 1, 4), float64]) -> (Tensor[(7, 1, 4), float64],) {
  %749 = fn (%var_2033: Tensor[(7, 1, 4), float64]) -> (Tensor[(7, 1, 4), float64],) {
    %747 = cast(%var_2033, dtype="float64") /* ty=Tensor[(7, 1, 4), float64] */;
    %748 = sigmoid(%747) /* ty=Tensor[(7, 1, 4), float64] */;
    (%748,)
  };
  %749(%var_2040) /* ty=(Tensor[(7, 1, 4), float64],) */
}

def @func_8809() -> (Tensor[(130), int32],) {
  %750 = @func_6796() /* ty=Tensor[(130), int32] */;
  (%750,)
}

def @func_622(%var_620: Tensor[(6, 1, 13), float32], %var_621: Tensor[(1125, 3), float64]) -> (Tensor[(6, 4, 13), float32], Tensor[(15, 15, 15), float64], Tensor[(1125, 3), float64], Tensor[(15, 15, 15), float64]) {
  %762 = fn (%var_592: Tensor[(6, 1, 13), float32], %var_601: Tensor[(1125, 3), float64]) -> (Tensor[(6, 4, 13), float32], Tensor[(15, 15, 15), float64], Tensor[(1125, 3), float64], Tensor[(15, 15, 15), float64]) {
    %751 = cast(%var_592, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
    %752 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 13), float32] */;
    %753 = cast(%var_601, dtype="float64") /* ty=Tensor[(1125, 3), float64] */;
    %754 = reshape(%753, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
    %755 = @func_440(%754) /* ty=(Tensor[(15, 15, 15), float64],) */;
    %756 = cast(%var_601, dtype="float64") /* ty=Tensor[(1125, 3), float64] */;
    %757 = reshape(%756, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
    %758 = @func_440(%757) /* ty=(Tensor[(15, 15, 15), float64],) */;
    %759 = floor_divide(%751, %752) /* ty=Tensor[(6, 4, 13), float32] */;
    %760 = %755.0;
    %761 = %758.0;
    (%759, %760, %var_601, %761)
  };
  %762(%var_620, %var_621) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(15, 15, 15), float64], Tensor[(1125, 3), float64], Tensor[(15, 15, 15), float64]) */
}

def @func_5604() -> (Tensor[(78), float32],) {
  @func_5602() /* ty=(Tensor[(78), float32],) */
}

def @func_14690() -> (Tensor[(130), int32], Tensor[(12, 5, 130), bool]) {
  @func_14688() /* ty=(Tensor[(130), int32], Tensor[(12, 5, 130), bool]) */
}

def @func_9044() -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64]) {
  %763 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %764 = @func_7395() /* ty=Tensor[(130), int32] */;
  %765 = %763.0;
  (%764, %765)
}

def @func_4255() -> (Tensor[(130), int32], Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(78), float32]) {
  %774 = fn () -> (Tensor[(130), int32], Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(78), float32]) {
    %766 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
    %767 = %766.1;
    %768 = cast(%767, dtype="int32") /* ty=Tensor[(130), int32] */;
    %769 = reshape(%768, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
    %770 = @func_1068(%769) /* ty=(Tensor[(2, 5, 13), int32],) */;
    %771 = @func_3697() /* ty=Tensor[(78), float32] */;
    %772 = %770.0;
    %773 = @func_3697() /* ty=Tensor[(78), float32] */;
    (%767, %771, %772, %773)
  };
  %774() /* ty=(Tensor[(130), int32], Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(78), float32]) */
}

def @func_10938() -> (Tensor[(12, 5, ?), float64],) {
  @func_10936() /* ty=(Tensor[(12, 5, ?), float64],) */
}

def @func_2877(%var_2854: Tensor[(130), int32]) -> (Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(16, 10, 1), float64], Tensor[(160), float64], Tensor[(2, 5, 13), int32]) {
  %775 = @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */;
  %776 = cast(%var_2854, dtype="int32") /* ty=Tensor[(130), int32] */;
  %777 = reshape(%776, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %778 = @func_2733(%777) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %779 = cast(%var_2854, dtype="int32") /* ty=Tensor[(130), int32] */;
  %780 = reshape(%779, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %781 = @func_2733(%780) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %782 = cast(meta[relay.Constant][38] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %783 = %781.3;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %785 = %778.4;
  %786 = cast(%785, dtype="int32") /* ty=Tensor[(130), int32] */;
  %787 = reshape(%782, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float64] */;
  %788 = reshape(%784, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %789 = reshape(%786, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %790 = @func_1132(%787, %788, %789) /* ty=(Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %791 = %790.0;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(16, 10, 1), float64] */;
  %793 = cast(%783, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %794 = cast(%var_2854, dtype="int32") /* ty=Tensor[(130), int32] */;
  %795 = reshape(%792, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float64] */;
  %796 = reshape(%793, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %797 = reshape(%794, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %798 = @func_1132(%795, %796, %797) /* ty=(Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %799 = %775.2;
  %800 = %798.3;
  (%799, %785, %var_2854, %783, %791, meta[relay.Constant][38] /* ty=Tensor[(160), float64] */, %800)
}

def @func_2785() -> Tensor[(12, 5, ?), bool] {
  @func_2783() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_11800() -> (Tensor[(78), float32],) {
  @func_11798() /* ty=(Tensor[(78), float32],) */
}

def @func_6779() -> (Tensor[(130), int32], Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), float64]) {
  @func_6777() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), float64]) */
}

def @func_10393() -> Tensor[(78), float32] {
  %802 = fn () -> Tensor[(78), float32] {
    %801 = @func_5244() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
    %801.0
  };
  %802() /* ty=Tensor[(78), float32] */
}

def @func_2735(%var_2734: Tensor[(2, 5, 13), int32]) -> (Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) {
  %818 = fn (%var_2704: Tensor[(2, 5, 13), int32]) -> (Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) {
    %803 = cast(meta[relay.Constant][39] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %804 = reshape(%803, newshape=[16, 7, 7]) /* ty=Tensor[(16, 7, 7), float64] */;
    %805 = @func_1508(%804) /* ty=(Tensor[(16, 7, 7), float32],) */;
    %806 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %807 = %806.1;
    %808 = cast(%var_2704, dtype="int32") /* ty=Tensor[(2, 5, 13), int32] */;
    %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
    %810 = cast(%807, dtype="int32") /* ty=Tensor[(2, 5, 13), int32] */;
    %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %812 = @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */;
    %813 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %814 = %805.0;
    %815 = maximum(%810, %811) /* ty=Tensor[(2, 5, 13), int32] */;
    %816 = %812.1;
    %817 = %813.2;
    (%814, meta[relay.Constant][39] /* ty=Tensor[(784), float64] */, %815, %816, %817)
  };
  %818(%var_2734) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */
}

def @func_3094(%var_3092: Tensor[(3375), float64]) -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) {
  @func_3091(%var_3092) /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) */
}

def @func_6618(%var_6616: Tensor[(12, 5, 4), bool]) -> (Tensor[(12, 5, 4), uint64], Tensor[(784), float64], Tensor[(50), int8], Tensor[(12, 5, 144), uint32], Tensor[(3375), float64], Tensor[(130), int32], Tensor[(130), int32]) {
  @func_6615(%var_6616) /* ty=(Tensor[(12, 5, 4), uint64], Tensor[(784), float64], Tensor[(50), int8], Tensor[(12, 5, 144), uint32], Tensor[(3375), float64], Tensor[(130), int32], Tensor[(130), int32]) */
}

def @func_7045(%var_7043: Tensor[(1540), float32]) -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(1540), uint16]) {
  @func_7042(%var_7043) /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(1540), uint16]) */
}

def @func_4985(%var_4984: Tensor[(12, 5, 11), bool]) -> (Tensor[(12, 5, 11), float64],) {
  %823 = fn (%var_4969: Tensor[(12, 5, 11), bool]) -> (Tensor[(12, 5, 11), float64],) {
    %819 = @func_2783() /* ty=Tensor[(12, 5, ?), bool] */;
    %820 = cast(%819, dtype="float64") /* ty=Tensor[(12, 5, ?), float64] */;
    %821 = cast(%var_4969, dtype="float64") /* ty=Tensor[(12, 5, 11), float64] */;
    %822 = floor_mod(%820, %821) /* ty=Tensor[(12, 5, 11), float64] */;
    (%822,)
  };
  %823(%var_4984) /* ty=(Tensor[(12, 5, 11), float64],) */
}

def @func_3571() -> (Tensor[(130), int32], Tensor[(784), float64]) {
  %830 = fn () -> (Tensor[(130), int32], Tensor[(784), float64]) {
    %824 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %825 = %824.2;
    %826 = cast(%825, dtype="int32") /* ty=Tensor[(130), int32] */;
    %827 = reshape(%826, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
    %828 = @func_2733(%827) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
    %829 = %828.1;
    (%825, %829)
  };
  %830() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */
}

def @func_1132(%var_1096: Tensor[(16, 10, 1), float64], %var_1103: Tensor[(3375), float64], %var_1112: Tensor[(130), int32]) -> (Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  %831 = cast(%var_1096, dtype="float64") /* ty=Tensor[(16, 10, 1), float64] */;
  %832 = cast(%var_1103, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %833 = reshape(%832, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %834 = @func_440(%833) /* ty=(Tensor[(15, 15, 15), float64],) */;
  %835 = cast(%var_1112, dtype="int32") /* ty=Tensor[(130), int32] */;
  %836 = reshape(%835, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %837 = @func_1068(%836) /* ty=(Tensor[(2, 5, 13), int32],) */;
  %838 = atan(%831) /* ty=Tensor[(16, 10, 1), float64] */;
  %839 = %834.0;
  %840 = %837.0;
  (%838, %839, %var_1103, %840, %var_1112)
}

def @func_6999(%var_6998: Tensor[(2688), float64]) -> (Tensor[(130), int32], Tensor[(16, 7, 7), float32], Tensor[(2688), float64]) {
  %847 = fn (%var_6980: Tensor[(2688), float64]) -> (Tensor[(130), int32], Tensor[(16, 7, 7), float32], Tensor[(2688), float64]) {
    %841 = @func_4659() /* ty=(Tensor[(130), int32],) */;
    %842 = cast(%var_6980, dtype="float64") /* ty=Tensor[(2688), float64] */;
    %843 = reshape(%842, newshape=[12, 14, 16]) /* ty=Tensor[(12, 14, 16), float64] */;
    %844 = @func_6656(%843) /* ty=(Tensor[(12, 14, 16), float64], Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(78), float32]) */;
    %845 = %841.0;
    %846 = %844.1;
    (%845, %846, %var_6980)
  };
  %847(%var_6998) /* ty=(Tensor[(130), int32], Tensor[(16, 7, 7), float32], Tensor[(2688), float64]) */
}

def @func_13133() -> Tensor[(140), float32] {
  @func_13131() /* ty=Tensor[(140), float32] */
}

def @func_11469() -> (Tensor[(78), float32], Tensor[(78), float32]) {
  %848 = @func_8264() /* ty=(Tensor[(784), float64], Tensor[(78), float32]) */;
  %849 = @func_10392() /* ty=Tensor[(78), float32] */;
  %850 = %848.1;
  (%849, %850)
}

def @func_7395() -> Tensor[(130), int32] {
  @func_4800() /* ty=Tensor[(130), int32] */
}

def @func_12056() -> (Tensor[(12, 5, ?), bool], Tensor[(78), float32]) {
  %851 = @func_8221() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %852 = %851.0;
  %853 = @func_11606() /* ty=Tensor[(78), float32] */;
  (%852, %853)
}

def @func_7694() -> (Tensor[(78), float32], Tensor[(130), int32]) {
  @func_7692() /* ty=(Tensor[(78), float32], Tensor[(130), int32]) */
}

def @func_6905() -> (Tensor[(78), float32],) {
  @func_6903() /* ty=(Tensor[(78), float32],) */
}

def @func_14232() -> Tensor[(12, 5, ?), bool] {
  %855 = fn () -> Tensor[(12, 5, ?), bool] {
    %854 = @func_8920() /* ty=(Tensor[(78), float32], Tensor[(12, 5, ?), bool]) */;
    %854.1
  };
  %855() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_11925(%var_11923: Tensor[(12, 5, 15), bool]) -> (Tensor[(130), int32], Tensor[(12, 5, 15), int8], Tensor[(130), int32]) {
  @func_11922(%var_11923) /* ty=(Tensor[(130), int32], Tensor[(12, 5, 15), int8], Tensor[(130), int32]) */
}

def @func_10434() -> (Tensor[(130), int32],) {
  %857 = fn () -> (Tensor[(130), int32],) {
    %856 = @func_7395() /* ty=Tensor[(130), int32] */;
    (%856,)
  };
  %857() /* ty=(Tensor[(130), int32],) */
}

def @func_2151(%var_2142: Tensor[(13, 7, 5), uint16], %var_2143: Tensor[(13, 7, 5), uint16]) -> Tensor[(13, 7, 5), bool] {
  %858 = cast(%var_2143, dtype="bool") /* ty=Tensor[(13, 7, 5), bool] */;
  %859 = shape_of(%var_2142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%var_2142, dtype="bool") /* ty=Tensor[(13, 7, 5), bool] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%860, %861) /* ty=Tensor[(13, 7, 5), bool] */
}

def @func_7677() -> Tensor[(130), int32] {
  %863 = fn () -> Tensor[(130), int32] {
    %862 = @func_7064() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 5, ?), bool]) */;
    %862.0
  };
  %863() /* ty=Tensor[(130), int32] */
}

def @func_4445(%var_4430: Tensor[(455), uint16]) -> (Tensor[(2, 5, 13), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) {
  %864 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %865 = cast(%var_4430, dtype="uint16") /* ty=Tensor[(455), uint16] */;
  %866 = cast(%var_4430, dtype="uint16") /* ty=Tensor[(455), uint16] */;
  %867 = reshape(%865, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint16] */;
  %868 = reshape(%866, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint16] */;
  %869 = %864.1;
  %870 = @func_2151(%867, %868) /* ty=Tensor[(13, 7, 5), bool] */;
  (%869, %870, %var_4430)
}

def @func_12508() -> (Tensor[(78), float32],) {
  %871 = @func_3697() /* ty=Tensor[(78), float32] */;
  (%871,)
}

def @func_10936() -> (Tensor[(12, 5, ?), float64],) {
  %872 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  (%872,)
}

def @func_6366() -> (Tensor[(3375), float64],) {
  %875 = fn () -> (Tensor[(3375), float64],) {
    %873 = @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */;
    %874 = %873.3;
    (%874,)
  };
  %875() /* ty=(Tensor[(3375), float64],) */
}

def @func_11651() -> (Tensor[(130), int32], Tensor[(12, 5, ?), float32], Tensor[(216), float32]) {
  @func_11649() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float32], Tensor[(216), float32]) */
}

def @func_507(%var_481: Tensor[(6, 8, 3), float64]) -> (Tensor[(6, 8, 3), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) {
  %876 = cast(%var_481, dtype="float64") /* ty=Tensor[(6, 8, 3), float64] */;
  %877 = cast(meta[relay.Constant][40] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %878 = reshape(%877, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), float64] */;
  %879 = @func_440(%878) /* ty=(Tensor[(15, 15, 15), float64],) */;
  %880 = sin(%876) /* ty=Tensor[(6, 8, 3), float64] */;
  %881 = %879.0;
  (%880, %881, meta[relay.Constant][40] /* ty=Tensor[(3375), float64] */)
}

def @func_9694(%var_9693: Tensor[(12, 5, 6), bool]) -> (Tensor[(12, 5, 6), bool],) {
  %886 = fn (%var_9686: Tensor[(12, 5, 6), bool]) -> (Tensor[(12, 5, 6), bool],) {
    %882 = @func_3482() /* ty=Tensor[(12, 5, ?), bool] */;
    %883 = cast(%882, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
    %884 = cast(%var_9686, dtype="bool") /* ty=Tensor[(12, 5, 6), bool] */;
    %885 = logical_or(%883, %884) /* ty=Tensor[(12, 5, 6), bool] */;
    (%885,)
  };
  %886(%var_9693) /* ty=(Tensor[(12, 5, 6), bool],) */
}

def @func_12476() -> Tensor[(130), int32] {
  %887 = @func_6698() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */;
  %887.0
}

def @func_6797() -> Tensor[(130), int32] {
  %889 = fn () -> Tensor[(130), int32] {
    %888 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
    %888.0
  };
  %889() /* ty=Tensor[(130), int32] */
}

def @func_7042(%var_7017: Tensor[(1540), float32]) -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(1540), uint16]) {
  %890 = @func_4153() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %891 = cast(%var_7017, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %892 = reshape(%891, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %893 = @func_6235(%892) /* ty=Tensor[(10, 14, 11), float32] */;
  %894 = cast(%893, dtype="uint16") /* ty=Tensor[(10, 14, 11), uint16] */;
  %895 = shape_of(%var_7017, dtype="int32") /* ty=Tensor[(1), int32] */;
  %896 = cast(%var_7017, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %898 = @func_6796() /* ty=Tensor[(130), int32] */;
  %899 = %890.1;
  %900 = bitwise_xor(%896, %897) /* ty=Tensor[(1540), uint16] */;
  (%898, %899, %900)
}

def @func_1137(%var_1134: Tensor[(16, 10, 1), float64], %var_1135: Tensor[(3375), float64], %var_1136: Tensor[(130), int32]) -> (Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  @func_1132(%var_1134, %var_1135, %var_1136) /* ty=(Tensor[(16, 10, 1), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */
}

def @func_14195() -> (Tensor[(130), int32], Tensor[(13, 5, 11), int64], Tensor[(1, 140), float32], Tensor[(4620, 1), float64]) {
  %901 = @func_5140() /* ty=(Tensor[(130), int32],) */;
  %902 = %901.0;
  %903 = cast(%902, dtype="int32") /* ty=Tensor[(130), int32] */;
  %904 = reshape(%903, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %905 = @func_10140(%904) /* ty=(Tensor[(13, 5, 11), int64], Tensor[(15, 15, 15), bool], Tensor[(130), int32], Tensor[(784), float64], Tensor[(12, 5, 130), uint8]) */;
  %906 = cast(meta[relay.Constant][41] /* ty=Tensor[(4620, 1), float32] */, dtype="float32") /* ty=Tensor[(4620, 1), float32] */;
  %907 = reshape(%906, newshape=[3, 1540]) /* ty=Tensor[(3, 1540), float32] */;
  %908 = @func_10622(%907) /* ty=(Tensor[(3, 1540), float32], Tensor[(2, 7, 10), float32], Tensor[(1, 140), float32]) */;
  %909 = cast(meta[relay.Constant][41] /* ty=Tensor[(4620, 1), float32] */, dtype="float64") /* ty=Tensor[(4620, 1), float64] */;
  %910 = %905.0;
  %911 = %908.2;
  %912 = sqrt(%909) /* ty=Tensor[(4620, 1), float64] */;
  (%902, %910, %911, %912)
}

def @func_14393() -> (Tensor[(78), float32], Tensor[(130), int32], Tensor[(12, 6, 13), float64]) {
  %919 = fn () -> (Tensor[(78), float32], Tensor[(130), int32], Tensor[(12, 6, 13), float64]) {
    %913 = @func_12524() /* ty=(Tensor[(78), float32],) */;
    %914 = @func_13859() /* ty=(Tensor[(130), int32],) */;
    %915 = @func_8022() /* ty=(Tensor[(12, 6, 13), float64],) */;
    %916 = %913.0;
    %917 = %914.0;
    %918 = %915.0;
    (%916, %917, %918)
  };
  %919() /* ty=(Tensor[(78), float32], Tensor[(130), int32], Tensor[(12, 6, 13), float64]) */
}

def @func_11004(%var_11003: Tensor[(12, 1540), float32]) -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 1540), float64], Tensor[(130), int32]) {
  %935 = fn (%var_10986: Tensor[(12, 1540), float32]) -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 1540), float64], Tensor[(130), int32]) {
    %920 = @func_10433() /* ty=(Tensor[(130), int32],) */;
    %921 = @func_4659() /* ty=(Tensor[(130), int32],) */;
    %922 = @func_9131() /* ty=(Tensor[(130), int32], Tensor[(1, 1540), float32]) */;
    %923 = @func_8864() /* ty=(Tensor[(784), float64], Tensor[(10, 14, 11), float32], Tensor[(1, 1540), float32]) */;
    %924 = %923.2;
    %925 = cast(%924, dtype="float64") /* ty=Tensor[(1, 1540), float64] */;
    %926 = cast(%var_10986, dtype="float64") /* ty=Tensor[(12, 1540), float64] */;
    %927 = %921.0;
    %928 = cast(%927, dtype="int32") /* ty=Tensor[(130), int32] */;
    %929 = reshape(%928, newshape=[130]) /* ty=Tensor[(130), int32] */;
    %930 = @func_2877(%929) /* ty=(Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(16, 10, 1), float64], Tensor[(160), float64], Tensor[(2, 5, 13), int32]) */;
    %931 = %920.0;
    %932 = %922.0;
    %933 = divide(%925, %926) /* ty=Tensor[(12, 1540), float64] */;
    %934 = %930.2;
    (%931, %927, %932, %933, %934)
  };
  %935(%var_11003) /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 1540), float64], Tensor[(130), int32]) */
}

def @func_14160() -> (Tensor[(78), float32], Tensor[(2, 5, 13), int32]) {
  %940 = fn () -> (Tensor[(78), float32], Tensor[(2, 5, 13), int32]) {
    %936 = @func_7591() /* ty=(Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), bool]) */;
    %937 = @func_11066() /* ty=(Tensor[(10, 14, 11), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %938 = %936.0;
    %939 = %937.1;
    (%938, %939)
  };
  %940() /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32]) */
}

def @func_8864() -> (Tensor[(784), float64], Tensor[(10, 14, 11), float32], Tensor[(1, 1540), float32]) {
  %941 = @func_6306() /* ty=(Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) */;
  %942 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1540), float32] */, dtype="float32") /* ty=Tensor[(1, 1540), float32] */;
  %943 = reshape(%942, newshape=[10, 14, 11]) /* ty=Tensor[(10, 14, 11), float32] */;
  %944 = %941.1;
  %945 = @func_6235(%943) /* ty=Tensor[(10, 14, 11), float32] */;
  (%944, %945, meta[relay.Constant][42] /* ty=Tensor[(1, 1540), float32] */)
}

def @func_12148() -> (Tensor[(78), float32], Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(15, 15, 15), float64]) {
  %946 = @func_11234() /* ty=(Tensor[(78), float32],) */;
  %947 = @func_8221() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %948 = @func_5244() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %949 = %946.0;
  %950 = @func_11606() /* ty=Tensor[(78), float32] */;
  %951 = %947.0;
  %952 = %948.1;
  (%949, %950, %951, %952)
}

def @func_12238() -> (Tensor[(130), int32],) {
  %955 = fn () -> (Tensor[(130), int32],) {
    %953 = @func_6118() /* ty=(Tensor[(130), int32], Tensor[(3375), float64], Tensor[(160), float64], Tensor[(3375), float64]) */;
    %954 = %953.0;
    (%954,)
  };
  %955() /* ty=(Tensor[(130), int32],) */
}

def @func_11471() -> (Tensor[(78), float32], Tensor[(78), float32]) {
  @func_11469() /* ty=(Tensor[(78), float32], Tensor[(78), float32]) */
}

def @func_8410() -> (Tensor[(130), int32], Tensor[(2, 7, 10), float32], Tensor[(140), float32], Tensor[(78), float32]) {
  %963 = fn () -> (Tensor[(130), int32], Tensor[(2, 7, 10), float32], Tensor[(140), float32], Tensor[(78), float32]) {
    %956 = @func_5140() /* ty=(Tensor[(130), int32],) */;
    %957 = cast(meta[relay.Constant][43] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %958 = reshape(%957, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), float32] */;
    %959 = @func_5217(%958) /* ty=(Tensor[(2, 7, 10), float32], Tensor[(130), int32], Tensor[(78), float32]) */;
    %960 = %956.0;
    %961 = %959.0;
    %962 = @func_3697() /* ty=Tensor[(78), float32] */;
    (%960, %961, meta[relay.Constant][43] /* ty=Tensor[(140), float32] */, %962)
  };
  %963() /* ty=(Tensor[(130), int32], Tensor[(2, 7, 10), float32], Tensor[(140), float32], Tensor[(78), float32]) */
}

def @func_8565() -> (Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(12, 5, 130), float32]) {
  %974 = fn () -> (Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(12, 5, 130), float32]) {
    %964 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %965 = @func_6365() /* ty=(Tensor[(3375), float64],) */;
    %966 = @func_4254() /* ty=(Tensor[(130), int32], Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(78), float32]) */;
    %967 = %966.0;
    %968 = @func_8083() /* ty=Tensor[(12, 5, ?), bool] */;
    %969 = cast(%967, dtype="float32") /* ty=Tensor[(130), float32] */;
    %970 = cast(%968, dtype="float32") /* ty=Tensor[(12, 5, ?), float32] */;
    %971 = %964.0;
    %972 = %965.0;
    %973 = mod(%969, %970) /* ty=Tensor[(12, 5, 130), float32] */;
    (%971, %972, %973)
  };
  %974() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(12, 5, 130), float32]) */
}

def @func_3847() -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) {
  %975 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %976 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %977 = %976.0;
  %978 = cast(%977, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %979 = cast(%977, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %980 = %975.0;
  %981 = log10(%978) /* ty=Tensor[(15, 15, 15), float64] */;
  %982 = erf(%979) /* ty=Tensor[(15, 15, 15), float64] */;
  %983 = @func_3697() /* ty=Tensor[(78), float32] */;
  %984 = @func_3697() /* ty=Tensor[(78), float32] */;
  (%980, %981, %982, %983, %984)
}

def @func_3269(%var_3250: Tensor[(455), uint16]) -> (Tensor[(130), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) {
  %985 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %986 = cast(%var_3250, dtype="uint16") /* ty=Tensor[(455), uint16] */;
  %987 = cast(%var_3250, dtype="uint16") /* ty=Tensor[(455), uint16] */;
  %988 = reshape(%986, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint16] */;
  %989 = reshape(%987, newshape=[13, 7, 5]) /* ty=Tensor[(13, 7, 5), uint16] */;
  %990 = %985.2;
  %991 = @func_2151(%988, %989) /* ty=Tensor[(13, 7, 5), bool] */;
  (%990, %991, %var_3250)
}

def @func_6615(%var_6569: Tensor[(12, 5, 4), bool]) -> (Tensor[(12, 5, 4), uint64], Tensor[(784), float64], Tensor[(50), int8], Tensor[(12, 5, 144), uint32], Tensor[(3375), float64], Tensor[(130), int32], Tensor[(130), int32]) {
  %992 = @func_3354() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) */;
  %993 = %992.1;
  %994 = cast(%993, dtype="uint64") /* ty=Tensor[(12, 5, ?), uint64] */;
  %995 = cast(%var_6569, dtype="uint64") /* ty=Tensor[(12, 5, 4), uint64] */;
  %996 = cast(meta[relay.Constant][44] /* ty=Tensor[(50), int8] */, dtype="int8") /* ty=Tensor[(50), int8] */;
  %997 = cast(meta[relay.Constant][45] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %998 = reshape(%996, newshape=[10, 5, 1]) /* ty=Tensor[(10, 5, 1), int8] */;
  %999 = reshape(%997, newshape=[1, 144]) /* ty=Tensor[(1, 144), float64] */;
  %1000 = @func_6070(%998, %999) /* ty=(Tensor[(10, 5, 12), int8], Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(1, 144), float64], Tensor[(2, 5, 13), int32], Tensor[(784), float64], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), float64]) */;
  %1001 = cast(meta[relay.Constant][45] /* ty=Tensor[(144), float64] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %1002 = cast(%993, dtype="uint32") /* ty=Tensor[(12, 5, ?), uint32] */;
  %1003 = @func_6118() /* ty=(Tensor[(130), int32], Tensor[(3375), float64], Tensor[(160), float64], Tensor[(3375), float64]) */;
  %1004 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %1005 = @func_5140() /* ty=(Tensor[(130), int32],) */;
  %1006 = bitwise_or(%994, %995) /* ty=Tensor[(12, 5, 4), uint64] */;
  %1007 = %1000.6;
  %1008 = add(%1001, %1002) /* ty=Tensor[(12, 5, 144), uint32] */;
  %1009 = %1003.3;
  %1010 = %1004.1;
  %1011 = %1005.0;
  (%1006, %1007, meta[relay.Constant][44] /* ty=Tensor[(50), int8] */, %1008, %1009, %1010, %1011)
}

def @func_12510() -> (Tensor[(78), float32],) {
  @func_12508() /* ty=(Tensor[(78), float32],) */
}

def @func_443(%var_441: Tensor[(15, 15, 15), float64]) -> (Tensor[(15, 15, 15), float64],) {
  @func_440(%var_441) /* ty=(Tensor[(15, 15, 15), float64],) */
}

def @func_8921() -> (Tensor[(78), float32], Tensor[(12, 5, ?), bool]) {
  %1015 = fn () -> (Tensor[(78), float32], Tensor[(12, 5, ?), bool]) {
    %1012 = @func_4153() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
    %1013 = %1012.0;
    %1014 = @func_6134() /* ty=Tensor[(12, 5, ?), bool] */;
    (%1013, %1014)
  };
  %1015() /* ty=(Tensor[(78), float32], Tensor[(12, 5, ?), bool]) */
}

def @func_5441() -> (Tensor[(78), float32], Tensor[(12, 5, 130), float64]) {
  %1028 = fn () -> (Tensor[(78), float32], Tensor[(12, 5, 130), float64]) {
    %1016 = cast(meta[relay.Constant][46] /* ty=Tensor[(130), int32] */, dtype="int32") /* ty=Tensor[(130), int32] */;
    %1017 = reshape(%1016, newshape=[130]) /* ty=Tensor[(130), int32] */;
    %1018 = @func_2877(%1017) /* ty=(Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(16, 10, 1), float64], Tensor[(160), float64], Tensor[(2, 5, 13), int32]) */;
    %1019 = @func_3354() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) */;
    %1020 = %1019.0;
    %1021 = cast(meta[relay.Constant][46] /* ty=Tensor[(130), int32] */, dtype="bool") /* ty=Tensor[(130), bool] */;
    %1022 = cast(%1020, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
    %1023 = logical_and(%1021, %1022) /* ty=Tensor[(12, 5, 130), bool] */;
    %1024 = cast(%1023, dtype="float64") /* ty=Tensor[(12, 5, 130), float64] */;
    %1025 = cast(%1020, dtype="float64") /* ty=Tensor[(12, 5, ?), float64] */;
    %1026 = %1018.0;
    %1027 = divide(%1024, %1025) /* ty=Tensor[(12, 5, 130), float64] */;
    (%1026, %1027)
  };
  %1028() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */
}

def @func_5389() -> (Tensor[(12, 5, ?), bool], Tensor[(784), float64]) {
  %1029 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %1030 = @func_2783() /* ty=Tensor[(12, 5, ?), bool] */;
  %1031 = %1029.1;
  (%1030, %1031)
}

def @func_9231() -> (Tensor[(78), float32], Tensor[(12, 5, 130), uint8]) {
  @func_9229() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), uint8]) */
}

def @func_9533() -> (Tensor[(130), int32], Tensor[(78), float32], Tensor[(784), float64], Tensor[(78), float32]) {
  %1032 = @func_5140() /* ty=(Tensor[(130), int32],) */;
  %1033 = @func_5244() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %1034 = %1032.0;
  %1035 = cast(%1034, dtype="int32") /* ty=Tensor[(130), int32] */;
  %1036 = reshape(%1035, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %1037 = @func_2733(%1036) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %1038 = %1033.0;
  %1039 = %1037.1;
  %1040 = @func_4383() /* ty=Tensor[(78), float32] */;
  (%1034, %1038, %1039, %1040)
}

def @func_11114() -> Tensor[(130), int32] {
  @func_11112() /* ty=Tensor[(130), int32] */
}

def @func_8291() -> Tensor[(130), int32] {
  %1041 = fn () -> Tensor[(130), int32] {
    @func_7395() /* ty=Tensor[(130), int32] */
  };
  %1041() /* ty=Tensor[(130), int32] */
}

def @func_5602() -> (Tensor[(78), float32],) {
  %1042 = @func_4153() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */;
  %1043 = %1042.0;
  (%1043,)
}

def @func_2631() -> (Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) {
  %1044 = cast(meta[relay.Constant][47] /* ty=Tensor[(15, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(15, 13, 7), float64] */;
  %1045 = cast(meta[relay.Constant][48] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %1046 = cast(meta[relay.Constant][49] /* ty=Tensor[(3375), float64] */, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %1047 = reshape(%1045, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), float32] */;
  %1048 = reshape(%1046, newshape=[1125, 3]) /* ty=Tensor[(1125, 3), float64] */;
  %1049 = @func_619(%1047, %1048) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(15, 15, 15), float64], Tensor[(1125, 3), float64], Tensor[(15, 15, 15), float64]) */;
  %1050 = tan(%1044) /* ty=Tensor[(15, 13, 7), float64] */;
  %1051 = %1049.3;
  (%1050, %1051, meta[relay.Constant][48] /* ty=Tensor[(78), float32] */, meta[relay.Constant][49] /* ty=Tensor[(3375), float64] */)
}

def @func_7064() -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 5, ?), bool]) {
  %1052 = @func_4659() /* ty=(Tensor[(130), int32],) */;
  %1053 = @func_6118() /* ty=(Tensor[(130), int32], Tensor[(3375), float64], Tensor[(160), float64], Tensor[(3375), float64]) */;
  %1054 = @func_4522() /* ty=(Tensor[(12, 5, ?), bool],) */;
  %1055 = %1052.0;
  %1056 = %1053.0;
  %1057 = %1054.0;
  (%1055, %1056, %1057)
}

def @func_11236() -> (Tensor[(78), float32],) {
  @func_11234() /* ty=(Tensor[(78), float32],) */
}

def @func_7185(%var_7183: Tensor[(3375), float64], %var_7184: Tensor[(8, 18), float64]) -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(8, 18), float64]) {
  @func_7181(%var_7183, %var_7184) /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(8, 18), float64]) */
}

def @func_12499() -> (Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) {
  @func_12497() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */
}

def @func_11498() -> (Tensor[(12, 5, 130), bool], Tensor[(130), int32], Tensor[(6, 4, 13), float32], Tensor[(78), float32], Tensor[(1125, 3), float64]) {
  %1058 = @func_9345() /* ty=(Tensor[(12, 5, 130), bool], Tensor[(78), float32], Tensor[(3375), float64], Tensor[(12, 5, ?), bool]) */;
  %1059 = @func_8409() /* ty=(Tensor[(130), int32], Tensor[(2, 7, 10), float32], Tensor[(140), float32], Tensor[(78), float32]) */;
  %1060 = cast(meta[relay.Constant][50] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %1061 = cast(meta[relay.Constant][51] /* ty=Tensor[(1125, 3), float64] */, dtype="float64") /* ty=Tensor[(1125, 3), float64] */;
  %1062 = reshape(%1060, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), float32] */;
  %1063 = reshape(%1061, newshape=[1125, 3]) /* ty=Tensor[(1125, 3), float64] */;
  %1064 = @func_619(%1062, %1063) /* ty=(Tensor[(6, 4, 13), float32], Tensor[(15, 15, 15), float64], Tensor[(1125, 3), float64], Tensor[(15, 15, 15), float64]) */;
  %1065 = %1058.0;
  %1066 = %1059.0;
  %1067 = %1064.0;
  (%1065, %1066, %1067, meta[relay.Constant][50] /* ty=Tensor[(78), float32] */, meta[relay.Constant][51] /* ty=Tensor[(1125, 3), float64] */)
}

def @func_3272(%var_3270: Tensor[(455), uint16]) -> (Tensor[(130), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) {
  @func_3269(%var_3270) /* ty=(Tensor[(130), int32], Tensor[(13, 7, 5), bool], Tensor[(455), uint16]) */
}

def @func_14464(%var_14450: Tensor[(13, 6, 11), float32]) -> (Tensor[(13, 6, 11), float32],) {
  %1068 = cast(%var_14450, dtype="float32") /* ty=Tensor[(13, 6, 11), float32] */;
  %1069 = atan(%1068) /* ty=Tensor[(13, 6, 11), float32] */;
  (%1069,)
}

def @func_6135() -> Tensor[(12, 5, ?), bool] {
  %1071 = fn () -> Tensor[(12, 5, ?), bool] {
    %1070 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
    %1070.1
  };
  %1071() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_440(%var_394: Tensor[(15, 15, 15), float64]) -> (Tensor[(15, 15, 15), float64],) {
  %1072 = cast(%var_394, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %1073 = asinh(%1072) /* ty=Tensor[(15, 15, 15), float64] */;
  %1074 = cast(%1073, dtype="float64") /* ty=Tensor[(15, 15, 15), float64] */;
  %1075 = rsqrt(%1074) /* ty=Tensor[(15, 15, 15), float64] */;
  (%1075,)
}

def @func_14688() -> (Tensor[(130), int32], Tensor[(12, 5, 130), bool]) {
  %1076 = @func_5440() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */;
  %1077 = %1076.1;
  %1078 = cast(%1077, dtype="float64") /* ty=Tensor[(12, 5, 130), float64] */;
  %1079 = cosh(%1078) /* ty=Tensor[(12, 5, 130), float64] */;
  %1080 = cast(%1077, dtype="float32") /* ty=Tensor[(12, 5, 130), float32] */;
  %1081 = acosh(%1080) /* ty=Tensor[(12, 5, 130), float32] */;
  %1082 = cast(%1081, dtype="bool") /* ty=Tensor[(12, 5, 130), bool] */;
  %1083 = shape_of(%1079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1084 = cast(%1079, dtype="bool") /* ty=Tensor[(12, 5, 130), bool] */;
  %1085 = dyn.reshape(%1082, %1083, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1086 = @func_8290() /* ty=Tensor[(130), int32] */;
  %1087 = less_equal(%1084, %1085) /* ty=Tensor[(12, 5, 130), bool] */;
  (%1086, %1087)
}

def @func_8663() -> (Tensor[(15, 15, 15), float64], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(78), int32]) {
  @func_8661() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(78), int32]) */
}

def @func_3472() -> (Tensor[(12, 5, ?), float64],) {
  %1088 = @func_3041() /* ty=Tensor[(12, 5, ?), float64] */;
  (%1088,)
}

def @func_4349() -> (Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) {
  %1091 = fn () -> (Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) {
    %1089 = @func_2783() /* ty=Tensor[(12, 5, ?), bool] */;
    %1090 = @func_3482() /* ty=Tensor[(12, 5, ?), bool] */;
    (%1089, %1090)
  };
  %1091() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */
}

def @func_3482() -> Tensor[(12, 5, ?), bool] {
  @func_2783() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_5351() -> (Tensor[(130), int32],) {
  %1094 = fn () -> (Tensor[(130), int32],) {
    %1092 = @func_5140() /* ty=(Tensor[(130), int32],) */;
    %1093 = %1092.0;
    (%1093,)
  };
  %1094() /* ty=(Tensor[(130), int32],) */
}

def @func_3699() -> Tensor[(78), float32] {
  @func_3697() /* ty=Tensor[(78), float32] */
}

def @func_7300(%var_7299: Tensor[(7, 12, 16), float32]) -> (Tensor[(7, 12, 16), float32], Tensor[(12, 5, ?), bool], Tensor[(7, 1, 4), float64], Tensor[(28), float64]) {
  %1103 = fn (%var_7278: Tensor[(7, 12, 16), float32]) -> (Tensor[(7, 12, 16), float32], Tensor[(12, 5, ?), bool], Tensor[(7, 1, 4), float64], Tensor[(28), float64]) {
    %1095 = cast(%var_7278, dtype="float32") /* ty=Tensor[(7, 12, 16), float32] */;
    %1096 = @func_7064() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(12, 5, ?), bool]) */;
    %1097 = cast(meta[relay.Constant][52] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
    %1098 = reshape(%1097, newshape=[7, 1, 4]) /* ty=Tensor[(7, 1, 4), float64] */;
    %1099 = @func_2039(%1098) /* ty=(Tensor[(7, 1, 4), float64],) */;
    %1100 = tan(%1095) /* ty=Tensor[(7, 12, 16), float32] */;
    %1101 = %1096.2;
    %1102 = %1099.0;
    (%1100, %1101, %1102, meta[relay.Constant][52] /* ty=Tensor[(28), float64] */)
  };
  %1103(%var_7299) /* ty=(Tensor[(7, 12, 16), float32], Tensor[(12, 5, ?), bool], Tensor[(7, 1, 4), float64], Tensor[(28), float64]) */
}

def @func_9754() -> (Tensor[(130), int32],) {
  %1104 = @func_8996() /* ty=(Tensor[(130), int32], Tensor[(10, 14, 11), float32], Tensor[(1540), float32], Tensor[(78), float32], Tensor[(130), int32]) */;
  %1105 = %1104.0;
  (%1105,)
}

def @func_12791() -> (Tensor[(78), float32],) {
  %1108 = fn () -> (Tensor[(78), float32],) {
    %1106 = @func_11798() /* ty=(Tensor[(78), float32],) */;
    %1107 = %1106.0;
    (%1107,)
  };
  %1108() /* ty=(Tensor[(78), float32],) */
}

def @func_13951() -> Tensor[(130), int32] {
  @func_8290() /* ty=Tensor[(130), int32] */
}

def @func_4154() -> (Tensor[(78), float32], Tensor[(15, 15, 15), float64]) {
  %1112 = fn () -> (Tensor[(78), float32], Tensor[(15, 15, 15), float64]) {
    %1109 = @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
    %1110 = @func_4007() /* ty=Tensor[(78), float32] */;
    %1111 = %1109.0;
    (%1110, %1111)
  };
  %1112() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */
}

def @func_10493() -> (Tensor[(784), float64], Tensor[(130), int32]) {
  %1113 = @func_5389() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(784), float64]) */;
  %1114 = %1113.1;
  %1115 = @func_7676() /* ty=Tensor[(130), int32] */;
  (%1114, %1115)
}

def @func_5391() -> (Tensor[(12, 5, ?), bool], Tensor[(784), float64]) {
  @func_5389() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(784), float64]) */
}

def @func_5819(%var_5746: Tensor[(784), float64]) -> (Tensor[(130), int32], Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(15, 15, 15), bool], Tensor[(784), float64]) {
  %1116 = @func_4789() /* ty=(Tensor[(130), int32],) */;
  %1117 = cast(%var_5746, dtype="float64") /* ty=Tensor[(784), float64] */;
  %1118 = reshape(%1117, newshape=[16, 7, 7]) /* ty=Tensor[(16, 7, 7), float64] */;
  %1119 = @func_1508(%1118) /* ty=(Tensor[(16, 7, 7), float32],) */;
  %1120 = %1116.0;
  %1121 = cast(%1120, dtype="int32") /* ty=Tensor[(130), int32] */;
  %1122 = reshape(%1121, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %1123 = @func_3762(%1122) /* ty=(Tensor[(78), float32], Tensor[(2, 5, 13), int32], Tensor[(130), int32], Tensor[(15, 15, 15), bool]) */;
  %1124 = cast(%1120, dtype="int32") /* ty=Tensor[(130), int32] */;
  %1125 = reshape(%1124, newshape=[2, 5, 13]) /* ty=Tensor[(2, 5, 13), int32] */;
  %1126 = @func_2733(%1125) /* ty=(Tensor[(16, 7, 7), float32], Tensor[(784), float64], Tensor[(2, 5, 13), int32], Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */;
  %1127 = %1119.0;
  %1128 = %1123.3;
  %1129 = %1126.1;
  (%1120, %1127, %var_5746, %1128, %1129)
}

def @func_8147() -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(280), float64], Tensor[(4, 14, 5), float32]) {
  %1144 = fn () -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(280), float64], Tensor[(4, 14, 5), float32]) {
    %1130 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
    %1131 = @func_6698() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */;
    %1132 = cast(meta[relay.Constant][53] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %1133 = cast(meta[relay.Constant][53] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %1134 = cast(meta[relay.Constant][53] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %1135 = reshape(%1132, newshape=[4, 14, 5]) /* ty=Tensor[(4, 14, 5), float64] */;
    %1136 = reshape(%1133, newshape=[4, 14, 5]) /* ty=Tensor[(4, 14, 5), float64] */;
    %1137 = reshape(%1134, newshape=[4, 14, 5]) /* ty=Tensor[(4, 14, 5), float64] */;
    %1138 = @func_7929(%1135, %1136, %1137) /* ty=(Tensor[(4, 14, 5), float64], Tensor[(15, 15, 15), float64], Tensor[(4, 14, 5), bool], Tensor[(12, 5, ?), float64]) */;
    %1139 = %1138.0;
    %1140 = cast(%1139, dtype="float32") /* ty=Tensor[(4, 14, 5), float32] */;
    %1141 = %1130.0;
    %1142 = %1131.0;
    %1143 = rsqrt(%1140) /* ty=Tensor[(4, 14, 5), float32] */;
    (%1141, %1142, meta[relay.Constant][53] /* ty=Tensor[(280), float64] */, %1143)
  };
  %1144() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(280), float64], Tensor[(4, 14, 5), float32]) */
}

def @func_3474() -> (Tensor[(12, 5, ?), float64],) {
  @func_3472() /* ty=(Tensor[(12, 5, ?), float64],) */
}

def @func_7761() -> (Tensor[(130), int32], Tensor[(78), float32]) {
  %1148 = fn () -> (Tensor[(130), int32], Tensor[(78), float32]) {
    %1145 = @func_5350() /* ty=(Tensor[(130), int32],) */;
    %1146 = %1145.0;
    %1147 = @func_4007() /* ty=Tensor[(78), float32] */;
    (%1146, %1147)
  };
  %1148() /* ty=(Tensor[(130), int32], Tensor[(78), float32]) */
}

def @func_5688() -> (Tensor[(12, 5, 78), int16], Tensor[(12, 5, ?), float32], Tensor[(130), int32]) {
  %1160 = fn () -> (Tensor[(12, 5, 78), int16], Tensor[(12, 5, ?), float32], Tensor[(130), int32]) {
    %1149 = @func_5440() /* ty=(Tensor[(78), float32], Tensor[(12, 5, 130), float64]) */;
    %1150 = %1149.0;
    %1151 = @func_4522() /* ty=(Tensor[(12, 5, ?), bool],) */;
    %1152 = %1151.0;
    %1153 = cast(%1150, dtype="int16") /* ty=Tensor[(78), int16] */;
    %1154 = cast(%1152, dtype="int16") /* ty=Tensor[(12, 5, ?), int16] */;
    %1155 = cast(%1152, dtype="float32") /* ty=Tensor[(12, 5, ?), float32] */;
    %1156 = @func_4789() /* ty=(Tensor[(130), int32],) */;
    %1157 = bitwise_and(%1153, %1154) /* ty=Tensor[(12, 5, 78), int16] */;
    %1158 = log(%1155) /* ty=Tensor[(12, 5, ?), float32] */;
    %1159 = %1156.0;
    (%1157, %1158, %1159)
  };
  %1160() /* ty=(Tensor[(12, 5, 78), int16], Tensor[(12, 5, ?), float32], Tensor[(130), int32]) */
}

def @func_12058() -> (Tensor[(12, 5, ?), bool], Tensor[(78), float32]) {
  @func_12056() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */
}

def @func_7181(%var_7172: Tensor[(3375), float64], %var_7173: Tensor[(8, 18), float64]) -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(8, 18), float64]) {
  %1161 = cast(%var_7172, dtype="float64") /* ty=Tensor[(3375), float64] */;
  %1162 = cast(%var_7173, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
  %1163 = reshape(%1161, newshape=[3375]) /* ty=Tensor[(3375), float64] */;
  %1164 = reshape(%1162, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %1165 = @func_3912(%1163, %1164) /* ty=(Tensor[(12, 5, ?), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64], Tensor[(144), float64], Tensor[(2, 5, 13), int32], Tensor[(130, 1), int32], Tensor[(6, 8, 3), float32], Tensor[(7, 1, 4), float64], Tensor[(28), float64], Tensor[(130), int32]) */;
  %1166 = @func_4800() /* ty=Tensor[(130), int32] */;
  %1167 = %1165.1;
  (%1166, %1167, %var_7172, %var_7173)
}

def @func_4997() -> Tensor[(12, 5, ?), bool] {
  @func_2783() /* ty=Tensor[(12, 5, ?), bool] */
}

def @func_5217(%var_5178: Tensor[(2, 7, 10), float32]) -> (Tensor[(2, 7, 10), float32], Tensor[(130), int32], Tensor[(78), float32]) {
  %1168 = cast(%var_5178, dtype="float32") /* ty=Tensor[(2, 7, 10), float32] */;
  %1169 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
  %1170 = @func_3847() /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(78), float32]) */;
  %1171 = asinh(%1168) /* ty=Tensor[(2, 7, 10), float32] */;
  %1172 = %1169.0;
  %1173 = %1170.3;
  (%1171, %1172, %1173)
}

def @func_5572(%var_5571: Tensor[(8, 18), float64]) -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(8, 18), float64]) {
  %1180 = fn (%var_5558: Tensor[(8, 18), float64]) -> (Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(8, 18), float64]) {
    %1174 = @func_5350() /* ty=(Tensor[(130), int32],) */;
    %1175 = cast(%var_5558, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
    %1176 = reshape(%1175, newshape=[6, 8, 3]) /* ty=Tensor[(6, 8, 3), float64] */;
    %1177 = @func_507(%1176) /* ty=(Tensor[(6, 8, 3), float64], Tensor[(15, 15, 15), float64], Tensor[(3375), float64]) */;
    %1178 = %1174.0;
    %1179 = %1177.1;
    (%1178, %1179, %var_5558)
  };
  %1180(%var_5571) /* ty=(Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(8, 18), float64]) */
}

def @func_8163() -> Tensor[(130), int32] {
  @func_8161() /* ty=Tensor[(130), int32] */
}

def @func_14312() -> (Tensor[(78), float32],) {
  %1181 = @func_6306() /* ty=(Tensor[(78), float32], Tensor[(784), float64], Tensor[(12, 5, 784), int8]) */;
  %1182 = %1181.0;
  (%1182,)
}

def @func_11442() -> (Tensor[(130), int32], Tensor[(12, 5, ?), bool]) {
  %1187 = fn () -> (Tensor[(130), int32], Tensor[(12, 5, ?), bool]) {
    %1183 = @func_8146() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(280), float64], Tensor[(4, 14, 5), float32]) */;
    %1184 = @func_4348() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) */;
    %1185 = %1183.0;
    %1186 = %1184.1;
    (%1185, %1186)
  };
  %1187() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), bool]) */
}

def @func_12002() -> (Tensor[(130), int32], Tensor[(130), int32]) {
  %1192 = fn () -> (Tensor[(130), int32], Tensor[(130), int32]) {
    %1188 = @func_8146() /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(280), float64], Tensor[(4, 14, 5), float32]) */;
    %1189 = @func_4659() /* ty=(Tensor[(130), int32],) */;
    %1190 = %1188.0;
    %1191 = %1189.0;
    (%1190, %1191)
  };
  %1192() /* ty=(Tensor[(130), int32], Tensor[(130), int32]) */
}

def @func_1071(%var_1069: Tensor[(2, 5, 13), int32]) -> (Tensor[(2, 5, 13), int32],) {
  @func_1068(%var_1069) /* ty=(Tensor[(2, 5, 13), int32],) */
}

def @func_8186(%var_8184: Tensor[(6, 6, 9), float32]) -> Tensor[(6, 6, 9), float32] {
  @func_8183(%var_8184) /* ty=Tensor[(6, 6, 9), float32] */
}

def @func_12718() -> (Tensor[(130), int32], Tensor[(12, 5, 6), bool], Tensor[(360), bool]) {
  %1193 = @func_12700() /* ty=(Tensor[(130), int32], Tensor[(78), float32]) */;
  %1194 = cast(meta[relay.Constant][54] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %1195 = reshape(%1194, newshape=[12, 5, 6]) /* ty=Tensor[(12, 5, 6), bool] */;
  %1196 = @func_9692(%1195) /* ty=(Tensor[(12, 5, 6), bool],) */;
  %1197 = %1193.0;
  %1198 = %1196.0;
  (%1197, %1198, meta[relay.Constant][54] /* ty=Tensor[(360), bool] */)
}

def @func_10072() -> (Tensor[(784), float64],) {
  %1201 = fn () -> (Tensor[(784), float64],) {
    %1199 = @func_3570() /* ty=(Tensor[(130), int32], Tensor[(784), float64]) */;
    %1200 = %1199.1;
    (%1200,)
  };
  %1201() /* ty=(Tensor[(784), float64],) */
}

def @func_12525() -> (Tensor[(78), float32],) {
  %1203 = fn () -> (Tensor[(78), float32],) {
    %1202 = @func_10291() /* ty=Tensor[(78), float32] */;
    (%1202,)
  };
  %1203() /* ty=(Tensor[(78), float32],) */
}

def @func_5245() -> (Tensor[(78), float32], Tensor[(15, 15, 15), float64]) {
  %1207 = fn () -> (Tensor[(78), float32], Tensor[(15, 15, 15), float64]) {
    %1204 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %1205 = @func_4007() /* ty=Tensor[(78), float32] */;
    %1206 = %1204.0;
    (%1205, %1206)
  };
  %1207() /* ty=(Tensor[(78), float32], Tensor[(15, 15, 15), float64]) */
}

def @func_9592(%var_9590: Tensor[(6, 13, 11), float32]) -> (Tensor[(6, 13, 11), float32],) {
  @func_9589(%var_9590) /* ty=(Tensor[(6, 13, 11), float32],) */
}

def @func_3014() -> (Tensor[(15, 15, 15), float64], Tensor[(130), int32]) {
  @func_3012() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(130), int32]) */
}

def @func_11136() -> (Tensor[(15, 15, 15), float64],) {
  %1210 = fn () -> (Tensor[(15, 15, 15), float64],) {
    %1208 = @func_7486() /* ty=(Tensor[(15, 15, 15), float64],) */;
    %1209 = %1208.0;
    (%1209,)
  };
  %1210() /* ty=(Tensor[(15, 15, 15), float64],) */
}

def @func_7692() -> (Tensor[(78), float32], Tensor[(130), int32]) {
  %1211 = @func_6698() /* ty=(Tensor[(130), int32], Tensor[(12, 5, ?), float64]) */;
  %1212 = @func_4007() /* ty=Tensor[(78), float32] */;
  %1213 = %1211.0;
  (%1212, %1213)
}

def @func_7796() -> (Tensor[(130), int32],) {
  @func_7794() /* ty=(Tensor[(130), int32],) */
}

def @func_14125(%var_14123: Tensor[(10, 1, 14), float32], %var_14124: Tensor[(130), int32]) -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(10, 1, 14), float64]) {
  %1224 = fn (%var_14086: Tensor[(10, 1, 14), float32], %var_14108: Tensor[(130), int32]) -> (Tensor[(130), int32], Tensor[(130), int32], Tensor[(10, 1, 14), float64]) {
    %1214 = cast(%var_14108, dtype="int32") /* ty=Tensor[(130), int32] */;
    %1215 = reshape(%1214, newshape=[130]) /* ty=Tensor[(130), int32] */;
    %1216 = @func_3283(%1215) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
    %1217 = cast(%var_14086, dtype="float32") /* ty=Tensor[(10, 1, 14), float32] */;
    %1218 = log10(%1217) /* ty=Tensor[(10, 1, 14), float32] */;
    %1219 = cast(%1218, dtype="float32") /* ty=Tensor[(10, 1, 14), float32] */;
    %1220 = acos(%1219) /* ty=Tensor[(10, 1, 14), float32] */;
    %1221 = cast(%1220, dtype="float64") /* ty=Tensor[(10, 1, 14), float64] */;
    %1222 = %1216.2;
    %1223 = cos(%1221) /* ty=Tensor[(10, 1, 14), float64] */;
    (%1222, %var_14108, %1223)
  };
  %1224(%var_14123, %var_14124) /* ty=(Tensor[(130), int32], Tensor[(130), int32], Tensor[(10, 1, 14), float64]) */
}

def @func_5220(%var_5218: Tensor[(2, 7, 10), float32]) -> (Tensor[(2, 7, 10), float32], Tensor[(130), int32], Tensor[(78), float32]) {
  @func_5217(%var_5218) /* ty=(Tensor[(2, 7, 10), float32], Tensor[(130), int32], Tensor[(78), float32]) */
}

def @func_9589(%var_9580: Tensor[(6, 13, 11), float32]) -> (Tensor[(6, 13, 11), float32],) {
  %1225 = cast(%var_9580, dtype="float32") /* ty=Tensor[(6, 13, 11), float32] */;
  %1226 = atan(%1225) /* ty=Tensor[(6, 13, 11), float32] */;
  (%1226,)
}

def @func_10462() -> Tensor[(10, 14, 11), float32] {
  @func_10460() /* ty=Tensor[(10, 14, 11), float32] */
}

def @func_10905(%var_10897: Tensor[(3375), float64]) -> Tensor[(3375), int16] {
  %1227 = @func_6118() /* ty=(Tensor[(130), int32], Tensor[(3375), float64], Tensor[(160), float64], Tensor[(3375), float64]) */;
  %1228 = %1227.1;
  %1229 = cast(%var_10897, dtype="int16") /* ty=Tensor[(3375), int16] */;
  %1230 = shape_of(%1228, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1231 = cast(%1228, dtype="int16") /* ty=Tensor[(3375), int16] */;
  %1232 = dyn.reshape(%1229, %1230, newshape=[]) /* ty=Tensor[(?), int16] */;
  logical_xor(%1231, %1232) /* ty=Tensor[(3375), int16] */
}

def @func_10908(%var_10906: Tensor[(3375), float64]) -> Tensor[(3375), int16] {
  @func_10905(%var_10906) /* ty=Tensor[(3375), int16] */
}

def @func_2880(%var_2878: Tensor[(130), int32]) -> (Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(16, 10, 1), float64], Tensor[(160), float64], Tensor[(2, 5, 13), int32]) {
  @func_2877(%var_2878) /* ty=(Tensor[(78), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(15, 15, 15), float64], Tensor[(16, 10, 1), float64], Tensor[(160), float64], Tensor[(2, 5, 13), int32]) */
}

def @func_13708(%var_13705: Tensor[(144), float64], %var_13706: Tensor[(3375), float64], %var_13707: Tensor[(858), float32]) -> (Tensor[(78), float32], Tensor[(78), float32], Tensor[(12, 5, 78), uint32], Tensor[(12, 5, 130), int32], Tensor[(144), float64], Tensor[(144), float64], Tensor[(130, 1), int32], Tensor[(3375), float64], Tensor[(78), float32], Tensor[(12, 5, 130), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(6, 13, 11), float32], Tensor[(858), float32]) {
  @func_13703(%var_13705, %var_13706, %var_13707) /* ty=(Tensor[(78), float32], Tensor[(78), float32], Tensor[(12, 5, 78), uint32], Tensor[(12, 5, 130), int32], Tensor[(144), float64], Tensor[(144), float64], Tensor[(130, 1), int32], Tensor[(3375), float64], Tensor[(78), float32], Tensor[(12, 5, 130), float32], Tensor[(130), int32], Tensor[(130), int32], Tensor[(6, 13, 11), float32], Tensor[(858), float32]) */
}

def @func_5141() -> (Tensor[(130), int32],) {
  %1235 = fn () -> (Tensor[(130), int32],) {
    %1233 = @func_3982() /* ty=(Tensor[(130), int32],) */;
    %1234 = %1233.0;
    (%1234,)
  };
  %1235() /* ty=(Tensor[(130), int32],) */
}

def @func_11922(%var_11892: Tensor[(12, 5, 15), bool]) -> (Tensor[(130), int32], Tensor[(12, 5, 15), int8], Tensor[(130), int32]) {
  %1236 = @func_5140() /* ty=(Tensor[(130), int32],) */;
  %1237 = @func_9907() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(12, 5, ?), bool]) */;
  %1238 = %1237.1;
  %1239 = cast(%1238, dtype="int8") /* ty=Tensor[(12, 5, ?), int8] */;
  %1240 = cast(%var_11892, dtype="int8") /* ty=Tensor[(12, 5, 15), int8] */;
  %1241 = %1236.0;
  %1242 = cast(%1241, dtype="int32") /* ty=Tensor[(130), int32] */;
  %1243 = reshape(%1242, newshape=[130]) /* ty=Tensor[(130), int32] */;
  %1244 = @func_3283(%1243) /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %1245 = add(%1239, %1240) /* ty=Tensor[(12, 5, 15), int8] */;
  %1246 = %1244.2;
  (%1241, %1245, %1246)
}

def @func_11983() -> Tensor[(78), float32] {
  @func_11981() /* ty=Tensor[(78), float32] */
}

def @func_7794() -> (Tensor[(130), int32],) {
  %1247 = @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */;
  %1248 = %1247.2;
  (%1248,)
}

def @func_5319() -> Tensor[(12, 5, ?), float64] {
  @func_5317() /* ty=Tensor[(12, 5, ?), float64] */
}

def @func_7592() -> (Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), bool]) {
  %1261 = fn () -> (Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), bool]) {
    %1249 = @func_5721() /* ty=(Tensor[(78), float32], Tensor[(78), float32]) */;
    %1250 = @func_3354() /* ty=(Tensor[(12, 5, ?), float64], Tensor[(12, 5, ?), bool]) */;
    %1251 = %1250.0;
    %1252 = cast(%1251, dtype="float32") /* ty=Tensor[(12, 5, ?), float32] */;
    %1253 = sqrt(%1252) /* ty=Tensor[(12, 5, ?), float32] */;
    %1254 = @func_4789() /* ty=(Tensor[(130), int32],) */;
    %1255 = %1254.0;
    %1256 = cast(%1253, dtype="bool") /* ty=Tensor[(12, 5, ?), bool] */;
    %1257 = cast(%1255, dtype="bool") /* ty=Tensor[(130), bool] */;
    %1258 = %1249.1;
    %1259 = @func_3482() /* ty=Tensor[(12, 5, ?), bool] */;
    %1260 = logical_or(%1256, %1257) /* ty=Tensor[(12, 5, 130), bool] */;
    (%1258, %1259, %1260)
  };
  %1261() /* ty=(Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(12, 5, 130), bool]) */
}

def @func_4009() -> Tensor[(78), float32] {
  @func_4007() /* ty=Tensor[(78), float32] */
}

def @func_12150() -> (Tensor[(78), float32], Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(15, 15, 15), float64]) {
  @func_12148() /* ty=(Tensor[(78), float32], Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(15, 15, 15), float64]) */
}

def @func_12314() -> Tensor[(78), float32] {
  @func_12312() /* ty=Tensor[(78), float32] */
}

def @func_2633() -> (Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) {
  @func_2631() /* ty=(Tensor[(15, 13, 7), float64], Tensor[(15, 15, 15), float64], Tensor[(78), float32], Tensor[(3375), float64]) */
}

def @func_4524() -> (Tensor[(12, 5, ?), bool],) {
  @func_4522() /* ty=(Tensor[(12, 5, ?), bool],) */
}

def @func_2686() -> (Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) {
  @func_2684() /* ty=(Tensor[(15, 15, 15), float64], Tensor[(2, 5, 13), int32], Tensor[(130), int32]) */
}

def @func_10691() -> (Tensor[(12, 5, ?), bool], Tensor[(78), float32]) {
  %1265 = fn () -> (Tensor[(12, 5, ?), bool], Tensor[(78), float32]) {
    %1262 = @func_4638() /* ty=(Tensor[(12, 5, ?), bool],) */;
    %1263 = %1262.0;
    %1264 = @func_7534() /* ty=Tensor[(78), float32] */;
    (%1263, %1264)
  };
  %1265() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */
}

def @func_12578() -> (Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool], Tensor[(12, 5, ?), bool]) {
  %1266 = @func_5933() /* ty=(Tensor[(12, 5, ?), bool], Tensor[(78), float32]) */;
  %1267 = @func_12148() /* ty=(Tensor[(78), float32], Tensor[(78), float32], Tensor[(12, 5, ?), bool], Tensor[(15, 15, 15), float64]) */;
  %1268 = %1266.0;
  %1269 = @func_11538() /* ty=Tensor[(12, 5, ?), bool] */;
  %1270 = %1267.2;
  (%1268, %1269, %1270)
}

def @func_12702() -> (Tensor[(130), int32], Tensor[(78), float32]) {
  @func_12700() /* ty=(Tensor[(130), int32], Tensor[(78), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen982/build/output.py", line 4202, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [15:13:54] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

