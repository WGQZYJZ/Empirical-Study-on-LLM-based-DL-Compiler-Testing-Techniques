==========mod==========
#[version = "0.0.5"]
def @func_3852() -> (Tensor[(84), int32],) {
  %0 = @func_3381() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 7, 12), bool], Tensor[(84), int32], Tensor[(672), int32], Tensor[(4, 15, 15), float64]) */;
  %1 = %0.2;
  (%1,)
}

def @func_2376() -> (Tensor[(4, 15, 15), float64],) {
  %2 = @func_2265() /* ty=Tensor[(4, 15, 15), float64] */;
  (%2,)
}

def @func_5977() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) {
  %3 = @func_5121() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %4 = @func_2849() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %5 = %3.0;
  %6 = %4.0;
  (%5, %6)
}

def @func_7182() -> (Tensor[(4, 15, 15), float64],) {
  %7 = @func_7076() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %8 = %7.1;
  (%8,)
}

def @func_336(%var_299: Tensor[(8, 16, 11), uint32], %var_316: Tensor[(2912), bool]) -> (Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) {
  %9 = cast(%var_299, dtype="uint32") /* ty=Tensor[(8, 16, 11), uint32] */;
  %10 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(8, 16, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 16, 11), uint32] */, dtype="uint32") /* ty=Tensor[(8, 16, 11), uint32] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %13 = cast(%var_316, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %14 = reshape(%13, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), bool] */;
  %15 = cast(%var_316, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %16 = reshape(%15, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), bool] */;
  %17 = bitwise_xor(%11, %12) /* ty=Tensor[(8, 16, 11), uint32] */;
  %18 = @func_76(%14) /* ty=Tensor[(13, 16, 14), bool] */;
  %19 = @func_76(%16) /* ty=Tensor[(13, 16, 14), bool] */;
  (%17, %18, %var_316, %19)
}

def @func_3888() -> Tensor[(4, 15, 15), float32] {
  @func_2278() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_5645() -> (Tensor[(4, 15, 15), float32],) {
  %20 = @func_2849() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %21 = %20.0;
  (%21,)
}

def @func_5546() -> (Tensor[(4, 15, 15), float64], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64], Tensor[(?, 7, 12), float64], Tensor[(84), float64]) {
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(1408), uint32] */, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %24 = reshape(%22, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint32] */;
  %25 = reshape(%23, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %26 = @func_336(%24, %25) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */;
  %27 = @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %28 = cast(meta[relay.Constant][3] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %29 = reshape(%28, newshape=[84]) /* ty=Tensor[(84), float64] */;
  %30 = @func_4382(%29) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(?, 7, 12), float64], Tensor[(84), float64]) */;
  %31 = @func_5191() /* ty=Tensor[(4, 15, 15), float64] */;
  %32 = %26.3;
  %33 = %27.0;
  %34 = %30.1;
  (%31, %32, meta[relay.Constant][1] /* ty=Tensor[(1408), uint32] */, meta[relay.Constant][2] /* ty=Tensor[(2912), bool] */, %33, %34, meta[relay.Constant][3] /* ty=Tensor[(84), float64] */)
}

def @func_9147(%var_9142: Tensor[(3, 3, 15), float32]) -> Tensor[(3, 3, 15), float32] {
  %35 = cast(%var_9142, dtype="float32") /* ty=Tensor[(3, 3, 15), float32] */;
  acosh(%35) /* ty=Tensor[(3, 3, 15), float32] */
}

def @func_3480() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %36 = @func_2724() /* ty=Tensor[(4, 15, 15), float64] */;
  %37 = @func_2817() /* ty=Tensor[(4, 15, 15), float64] */;
  (%36, %37)
}

def @func_1864() -> Tensor[(4, 15, 15), float32] {
  %38 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %38.0
}

def @func_6853(%var_6815: Tensor[(1, 14, 13), uint8]) -> (Tensor[(1, 14, 13), bool], Tensor[(1, 14, 13), bool]) {
  %39 = cast(meta[relay.Constant][4] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %40 = cast(%var_6815, dtype="uint8") /* ty=Tensor[(1, 14, 13), uint8] */;
  %41 = left_shift(%39, %40) /* ty=Tensor[(1, 14, 13), uint8] */;
  %42 = cast(%41, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %43 = cast(meta[relay.Constant][4] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %44 = cast(meta[relay.Constant][4] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %45 = cast(%var_6815, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %46 = greater_equal(%42, %43) /* ty=Tensor[(1, 14, 13), bool] */;
  %47 = not_equal(%44, %45) /* ty=Tensor[(1, 14, 13), bool] */;
  (%46, %47)
}

def @func_981(%var_956: Tensor[(2, 15, 16), int8], %var_957: Tensor[(2, 15, 16), int8], %var_963: Tensor[(2912), bool]) -> (Tensor[(2, 15, 16), int8], Tensor[(8, 16, 11), uint32], Tensor[(1408), uint32], Tensor[(2912), int32]) {
  %48 = cast(%var_957, dtype="int8") /* ty=Tensor[(2, 15, 16), int8] */;
  %49 = shape_of(%var_956, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%var_956, dtype="int8") /* ty=Tensor[(2, 15, 16), int8] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %52 = cast(meta[relay.Constant][5] /* ty=Tensor[(1408), uint32] */, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
  %53 = cast(%var_963, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %54 = reshape(%52, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint32] */;
  %55 = reshape(%53, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %56 = @func_336(%54, %55) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */;
  %57 = cast(meta[relay.Constant][6] /* ty=Tensor[(2912), bool] */, dtype="int32") /* ty=Tensor[(2912), int32] */;
  %58 = shape_of(%var_963, dtype="int32") /* ty=Tensor[(1), int32] */;
  %59 = cast(%var_963, dtype="int32") /* ty=Tensor[(2912), int32] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?), int32] */;
  %61 = add(%50, %51) /* ty=Tensor[(2, 15, 16), int8] */;
  %62 = %56.0;
  %63 = bitwise_or(%59, %60) /* ty=Tensor[(2912), int32] */;
  (%61, %62, meta[relay.Constant][5] /* ty=Tensor[(1408), uint32] */, %63)
}

def @func_6568() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) {
  %64 = @func_5645() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %65 = %64.0;
  %66 = @func_1915() /* ty=Tensor[(4, 15, 15), float64] */;
  (%65, %66)
}

def @func_8287(%var_8257: Tensor[(108), float64], %var_8284: Tensor[(672), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(3, 6, 6), float64], Tensor[(108), float64], Tensor[(672), int32], Tensor[(84), int32], Tensor[(672), int32]) {
  %67 = @func_7506() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %68 = cast(%var_8257, dtype="float64") /* ty=Tensor[(108), float64] */;
  %69 = cast(%var_8257, dtype="float64") /* ty=Tensor[(108), float64] */;
  %70 = reshape(%68, newshape=[3, 6, 6]) /* ty=Tensor[(3, 6, 6), float64] */;
  %71 = reshape(%69, newshape=[3, 6, 6]) /* ty=Tensor[(3, 6, 6), float64] */;
  %72 = cast(meta[relay.Constant][7] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %73 = cast(%var_8284, dtype="int32") /* ty=Tensor[(672), int32] */;
  %74 = reshape(%72, newshape=[84]) /* ty=Tensor[(84), int32] */;
  %75 = reshape(%73, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %76 = @func_4875(%74, %75) /* ty=(Tensor[(9, 2, 12), bool], Tensor[(400), int64], Tensor[(33, 5), float64], Tensor[(84), int32], Tensor[(672), int32]) */;
  %77 = %67.0;
  %78 = @func_3561(%70, %71) /* ty=Tensor[(3, 6, 6), float64] */;
  %79 = %76.4;
  (%77, %78, %var_8257, %79, meta[relay.Constant][7] /* ty=Tensor[(84), int32] */, %var_8284)
}

def @func_3429() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %80 = @func_2300() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %81 = @func_2534() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %82 = %80.0;
  %83 = %81.2;
  (%82, %83)
}

def @func_4342(%var_4311: Tensor[(108), float64]) -> (Tensor[(4, 15, 15), float64], Tensor[(3, 6, 6), uint32], Tensor[(4, 15, 15), float64]) {
  %84 = @func_2400() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %85 = cast(%var_4311, dtype="float64") /* ty=Tensor[(108), float64] */;
  %86 = cast(%var_4311, dtype="float64") /* ty=Tensor[(108), float64] */;
  %87 = reshape(%85, newshape=[3, 6, 6]) /* ty=Tensor[(3, 6, 6), float64] */;
  %88 = reshape(%86, newshape=[3, 6, 6]) /* ty=Tensor[(3, 6, 6), float64] */;
  %89 = @func_3561(%87, %88) /* ty=Tensor[(3, 6, 6), float64] */;
  %90 = cast(%var_4311, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="uint32") /* ty=Tensor[(3, 6, 6), uint32] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %94 = @func_2534() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %95 = %84.0;
  %96 = add(%92, %93) /* ty=Tensor[(3, 6, 6), uint32] */;
  %97 = %94.0;
  (%95, %96, %97)
}

def @func_4229(%var_4182: Tensor[(8, 5, 7), uint8], %var_4204: Tensor[(1, 56), float64], %var_4206: Tensor[(2912), bool], %var_4212: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(8, 5, 7), float32], Tensor[(8, 5, 7), int8], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(1, 56), float64], Tensor[(672), int32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(1800), uint32], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32]) {
  %98 = @func_3381() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 7, 12), bool], Tensor[(84), int32], Tensor[(672), int32], Tensor[(4, 15, 15), float64]) */;
  %99 = cast(%var_4182, dtype="float32") /* ty=Tensor[(8, 5, 7), float32] */;
  %100 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(8, 5, 7), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 5, 7), uint8] */, dtype="float32") /* ty=Tensor[(8, 5, 7), float32] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %103 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 5, 7), uint8] */, dtype="uint8") /* ty=Tensor[(8, 5, 7), uint8] */;
  %104 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(8, 5, 7), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 5, 7), uint8] */, dtype="uint8") /* ty=Tensor[(8, 5, 7), uint8] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %107 = bitwise_xor(%105, %106) /* ty=Tensor[(8, 5, 7), uint8] */;
  %108 = cast(%107, dtype="int8") /* ty=Tensor[(8, 5, 7), int8] */;
  %109 = shape_of(%var_4182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%var_4182, dtype="int8") /* ty=Tensor[(8, 5, 7), int8] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %112 = cast(%var_4204, dtype="float64") /* ty=Tensor[(1, 56), float64] */;
  %113 = cast(meta[relay.Constant][10] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %114 = cast(%var_4206, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %115 = reshape(%112, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %116 = reshape(%113, newshape=[168, 4]) /* ty=Tensor[(168, 4), int32] */;
  %117 = reshape(%114, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %118 = @func_3451(%115, %116, %117) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(48), float32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(168, 4), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(6, 300), uint32]) */;
  %119 = cast(%var_4206, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %120 = cast(%var_4212, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %121 = reshape(%119, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %122 = reshape(%120, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %123 = @func_740(%121, %122) /* ty=(Tensor[(104, 28), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800), uint32], Tensor[(104, 28), bool], Tensor[(1800), uint32], Tensor[(12, ?, 8), uint64], Tensor[(12, ?, 8), float32]) */;
  %124 = cast(meta[relay.Constant][11] /* ty=Tensor[(1408), uint32] */, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
  %125 = %118.6;
  %126 = cast(%125, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %127 = reshape(%124, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint32] */;
  %128 = reshape(%126, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %129 = @func_336(%127, %128) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */;
  %130 = %98.4;
  %131 = divide(%101, %102) /* ty=Tensor[(8, 5, 7), float32] */;
  %132 = left_shift(%110, %111) /* ty=Tensor[(8, 5, 7), int8] */;
  %133 = @func_3994() /* ty=Tensor[(4, 15, 15), float64] */;
  %134 = %123.5;
  %135 = %129.3;
  (%130, %131, %132, %133, %125, %var_4204, meta[relay.Constant][10] /* ty=Tensor[(672), int32] */, %var_4206, %134, %var_4212, %135, meta[relay.Constant][11] /* ty=Tensor[(1408), uint32] */)
}

def @func_7684() -> Tensor[(4, 15, 15), float64] {
  %136 = @func_5121() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %136.0
}

def @func_7723(%var_7692: float64, %var_7693: Tensor[(8, 1, 4), float64]) -> Tensor[(8, ?, 4), float64] {
  %137 = cast(%var_7692, dtype="float64") /* ty=float64 */;
  %138 = cast(%var_7693, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %139 = floor_divide(%137, %138) /* ty=Tensor[(8, 1, 4), float64] */;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %141 = cast(%var_7692, dtype="float64") /* ty=float64 */;
  %142 = mod(%140, %141) /* ty=Tensor[(8, 1, 4), float64] */;
  %143 = cast(%142, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %144 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%139, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%145, %146) /* ty=Tensor[(8, ?, 4), float64] */
}

def @func_2986() -> Tensor[(4, 15, 15), float64] {
  @func_2265() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_1124(%var_1080: Tensor[(11, 5, 3), float64], %var_1107: Tensor[(480), int8], %var_1120: Tensor[(84, 1), int32], %var_1121: Tensor[(672), int32]) -> (Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) {
  %147 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 3), float64] */;
  %148 = shape_of(%var_1080, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%var_1080, dtype="float64") /* ty=Tensor[(11, 5, 3), float64] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %151 = floor_mod(%149, %150) /* ty=Tensor[(11, 5, 3), float64] */;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(11, 5, 3), float32] */;
  %153 = cast(%var_1107, dtype="int8") /* ty=Tensor[(480), int8] */;
  %154 = cast(%var_1107, dtype="int8") /* ty=Tensor[(480), int8] */;
  %155 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 364), bool] */, dtype="bool") /* ty=Tensor[(8, 364), bool] */;
  %156 = reshape(%153, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), int8] */;
  %157 = reshape(%154, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), int8] */;
  %158 = reshape(%155, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %159 = @func_981(%156, %157, %158) /* ty=(Tensor[(2, 15, 16), int8], Tensor[(8, 16, 11), uint32], Tensor[(1408), uint32], Tensor[(2912), int32]) */;
  %160 = cast(meta[relay.Constant][14] /* ty=Tensor[(1408), uint32] */, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
  %161 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 364), bool] */, dtype="bool") /* ty=Tensor[(8, 364), bool] */;
  %162 = reshape(%160, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint32] */;
  %163 = reshape(%161, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %164 = @func_336(%162, %163) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */;
  %165 = cast(%var_1120, dtype="int32") /* ty=Tensor[(84, 1), int32] */;
  %166 = cast(%var_1121, dtype="int32") /* ty=Tensor[(672), int32] */;
  %167 = reshape(%165, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), int32] */;
  %168 = reshape(%166, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %169 = @func_1040(%167, %168) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */;
  %170 = log(%152) /* ty=Tensor[(11, 5, 3), float32] */;
  %171 = %159.3;
  %172 = %164.3;
  %173 = %169.0;
  (%170, %171, %var_1107, meta[relay.Constant][13] /* ty=Tensor[(8, 364), bool] */, %172, meta[relay.Constant][14] /* ty=Tensor[(1408), uint32] */, %173, %var_1120, %var_1121)
}

def @func_1619(%var_1615: Tensor[(10, 10, 4), int64]) -> Tensor[(10, 10, 4), int64] {
  %174 = cast(%var_1615, dtype="int64") /* ty=Tensor[(10, 10, 4), int64] */;
  %175 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(10, 10, 4), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 10, 4), int64] */, dtype="int64") /* ty=Tensor[(10, 10, 4), int64] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  subtract(%176, %177) /* ty=Tensor[(10, 10, 4), int64] */
}

def @func_4382(%var_4371: Tensor[(84), float64]) -> (Tensor[(4, 15, 15), float32], Tensor[(?, 7, 12), float64], Tensor[(84), float64]) {
  %178 = @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %179 = cast(%var_4371, dtype="float64") /* ty=Tensor[(84), float64] */;
  %180 = reshape(%179, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), float64] */;
  %181 = %178.0;
  %182 = @func_2185(%180) /* ty=Tensor[(?, 7, 12), float64] */;
  (%181, %182, %var_4371)
}

def @func_4514(%var_4492: Tensor[(4, 15, 15), float64], %var_4507: Tensor[(4, 15, 15), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), bool]) {
  %183 = @func_1844() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %184 = %183.1;
  %185 = cast(%var_4492, dtype="int32") /* ty=Tensor[(4, 15, 15), int32] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%184, dtype="int32") /* ty=Tensor[(4, 15, 15), int32] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %189 = left_shift(%187, %188) /* ty=Tensor[(4, 15, 15), int32] */;
  %190 = cast(%var_4507, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%189, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %194 = @func_3888() /* ty=Tensor[(4, 15, 15), float32] */;
  %195 = greater_equal(%192, %193) /* ty=Tensor[(4, 15, 15), bool] */;
  (%194, %195)
}

def @func_2265() -> Tensor[(4, 15, 15), float64] {
  %196 = @func_1991() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %196.0
}

def @func_5138() -> Tensor[(4, 15, 15), float64] {
  @func_1759() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_6788() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %197 = @func_1991() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %198 = %197.0;
  %199 = @func_5138() /* ty=Tensor[(4, 15, 15), float64] */;
  (%198, %199)
}

def @func_7260(%var_7242: Tensor[(4, 12), float32], %var_7243: Tensor[(2912), bool]) -> (Tensor[(4, 15, 15), float64], Tensor[(84), int32], Tensor[(13, 16, 14), bool], Tensor[(4, 12), float32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64], Tensor[(84), int32]) {
  %200 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %201 = @func_3852() /* ty=(Tensor[(84), int32],) */;
  %202 = cast(%var_7242, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
  %203 = cast(%var_7243, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %204 = reshape(%202, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
  %205 = reshape(%203, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
  %206 = @func_471(%204, %205) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
  %207 = @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %208 = @func_3852() /* ty=(Tensor[(84), int32],) */;
  %209 = %200.0;
  %210 = %201.0;
  %211 = %206.1;
  %212 = %207.0;
  %213 = %208.0;
  (%209, %210, %211, %var_7242, %var_7243, %212, %213)
}

def @func_1739() -> (Tensor[(4, 15, 15), float32],) {
  %214 = @func_1510() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %215 = %214.0;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
  %217 = cosh(%216) /* ty=Tensor[(4, 15, 15), float32] */;
  (%217,)
}

def @func_3994() -> Tensor[(4, 15, 15), float64] {
  @func_2512() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_7269() -> (Tensor[(4, 15, 15), float32],) {
  %218 = @func_4918() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) */;
  %219 = %218.0;
  (%219,)
}

def @func_4145(%var_4118: Tensor[(3, 12, 9), int16], %var_4119: Tensor[(3, 12, 9), int16]) -> (Tensor[(3, 12, 9), int16], float32, Tensor[(3, 12, 9), float64]) {
  %220 = cast(%var_4119, dtype="int16") /* ty=Tensor[(3, 12, 9), int16] */;
  %221 = shape_of(%var_4118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%var_4118, dtype="int16") /* ty=Tensor[(3, 12, 9), int16] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %224 = @func_3042() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) */;
  %225 = cast(%var_4118, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
  %226 = rsqrt(%225) /* ty=Tensor[(3, 12, 9), float64] */;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
  %228 = left_shift(%222, %223) /* ty=Tensor[(3, 12, 9), int16] */;
  %229 = %224.2;
  %230 = asinh(%227) /* ty=Tensor[(3, 12, 9), float64] */;
  (%228, %229, %230)
}

def @func_1510() -> (Tensor[(4, 15, 15), float64],) {
  %231 = @func_1319() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %232 = %231.0;
  %233 = cast(%232, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %234 = sin(%233) /* ty=Tensor[(4, 15, 15), float64] */;
  (%234,)
}

def @func_5231() -> (Tensor[(4, 15, 15), float32],) {
  %235 = @func_2576() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %236 = %235.0;
  (%236,)
}

def @func_7560(%var_7518: Tensor[(1, 1, 9), uint64], %var_7519: Tensor[(15, 3, 9), uint64], %var_7555: Tensor[(2, 1, 9), float32]) -> (Tensor[(15, 3, 9), uint32], Tensor[(18, 100), bool], Tensor[(2, 1, 9), float32]) {
  %237 = cast(%var_7518, dtype="uint64") /* ty=Tensor[(1, 1, 9), uint64] */;
  %238 = cast(%var_7519, dtype="uint64") /* ty=Tensor[(15, 3, 9), uint64] */;
  %239 = logical_xor(%237, %238) /* ty=Tensor[(15, 3, 9), uint64] */;
  %240 = cast(%var_7519, dtype="uint32") /* ty=Tensor[(15, 3, 9), uint32] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="uint32") /* ty=Tensor[(15, 3, 9), uint32] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %244 = @func_4702() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool]) */;
  %245 = cast(%var_7518, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
  %246 = asin(%245) /* ty=Tensor[(1, 1, 9), float32] */;
  %247 = cast(%246, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
  %248 = cast(%var_7555, dtype="float32") /* ty=Tensor[(2, 1, 9), float32] */;
  %249 = bitwise_and(%242, %243) /* ty=Tensor[(15, 3, 9), uint32] */;
  %250 = %244.2;
  %251 = floor_divide(%247, %248) /* ty=Tensor[(2, 1, 9), float32] */;
  (%249, %250, %251)
}

def @func_7288() -> Tensor[(4, 15, 15), float64] {
  %252 = @func_6948() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %252.0
}

def @func_1811() -> (Tensor[(4, 15, 15), float32],) {
  %253 = @func_1319() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %254 = %253.0;
  (%254,)
}

def @func_6179() -> (float32, Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) {
  %255 = @func_3042() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) */;
  %256 = @func_4702() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool]) */;
  %257 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %258 = %255.2;
  %259 = %256.1;
  %260 = %257.0;
  (%258, %259, %260)
}

def @func_5618(%var_5586: Tensor[(280), uint8], %var_5589: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(280), uint8], Tensor[(14, 4), float64], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(1, 56), float64]) {
  %261 = cast(%var_5586, dtype="uint8") /* ty=Tensor[(280), uint8] */;
  %262 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 4), float64] */;
  %263 = cast(meta[relay.Constant][17] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %264 = cast(%var_5589, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %265 = reshape(%261, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), uint8] */;
  %266 = reshape(%262, newshape=[1, 56]) /* ty=Tensor[(1, 56), float64] */;
  %267 = reshape(%263, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %268 = reshape(%264, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %269 = @func_4229(%265, %266, %267, %268) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 5, 7), float32], Tensor[(8, 5, 7), int8], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(1, 56), float64], Tensor[(672), int32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(1800), uint32], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32]) */;
  %270 = cast(%var_5586, dtype="uint8") /* ty=Tensor[(280), uint8] */;
  %271 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 4), float64] */;
  %272 = cast(meta[relay.Constant][17] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %273 = cast(%var_5589, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %274 = reshape(%270, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), uint8] */;
  %275 = reshape(%271, newshape=[1, 56]) /* ty=Tensor[(1, 56), float64] */;
  %276 = reshape(%272, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %277 = reshape(%273, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %278 = @func_4229(%274, %275, %276, %277) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 5, 7), float32], Tensor[(8, 5, 7), int8], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(1, 56), float64], Tensor[(672), int32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(1800), uint32], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32]) */;
  %279 = @func_2265() /* ty=Tensor[(4, 15, 15), float64] */;
  %280 = %269.3;
  %281 = %278.5;
  (%279, %280, %var_5586, meta[relay.Constant][16] /* ty=Tensor[(14, 4), float64] */, meta[relay.Constant][17] /* ty=Tensor[(2912), bool] */, %var_5589, %281)
}

def @func_6099() -> Tensor[(4, 15, 15), float32] {
  %282 = @func_5924() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 5, 1), float32]) */;
  %282.1
}

def @func_3087(%var_3072: Tensor[(165), float64], %var_3074: Tensor[(84), int32], %var_3075: Tensor[(1, 672), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(8, 7, 12), int32], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(1, 672), int32], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) {
  %283 = @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %284 = cast(%var_3072, dtype="float64") /* ty=Tensor[(165), float64] */;
  %285 = cast(meta[relay.Constant][18] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %286 = cast(%var_3074, dtype="int32") /* ty=Tensor[(84), int32] */;
  %287 = cast(%var_3075, dtype="int32") /* ty=Tensor[(1, 672), int32] */;
  %288 = reshape(%284, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float64] */;
  %289 = reshape(%285, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %290 = reshape(%286, newshape=[84, 1]) /* ty=Tensor[(84, 1), int32] */;
  %291 = reshape(%287, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %292 = @func_1124(%288, %289, %290, %291) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */;
  %293 = cast(meta[relay.Constant][19] /* ty=Tensor[(400), int64] */, dtype="int64") /* ty=Tensor[(400), int64] */;
  %294 = reshape(%293, newshape=[10, 10, 4]) /* ty=Tensor[(10, 10, 4), int64] */;
  %295 = %283.0;
  %296 = %292.6;
  %297 = @func_1619(%294) /* ty=Tensor[(10, 10, 4), int64] */;
  (%295, %296, %var_3072, meta[relay.Constant][18] /* ty=Tensor[(480), int8] */, %var_3074, %var_3075, %297, meta[relay.Constant][19] /* ty=Tensor[(400), int64] */)
}

def @func_2936(%var_2929: float32) -> Tensor[(9, 2, 12), bool] {
  %298 = cast(%var_2929, dtype="bool") /* ty=bool */;
  %299 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 2, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
  greater_equal(%298, %299) /* ty=Tensor[(9, 2, 12), bool] */
}

def @func_4791(%var_4752: Tensor[(7, 2, 9), float64]) -> (Tensor[(3, 2, 10), bool], Tensor[(60), int16], Tensor[(7, 2, 9), uint16], Tensor[(7, 2, 9), float64]) {
  %300 = cast(meta[relay.Constant][21] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %301 = reshape(%300, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), int16] */;
  %302 = @func_4414(%301) /* ty=(Tensor[(3, 2, 10), bool],) */;
  %303 = cast(%var_4752, dtype="float64") /* ty=Tensor[(7, 2, 9), float64] */;
  %304 = sinh(%303) /* ty=Tensor[(7, 2, 9), float64] */;
  %305 = cast(%var_4752, dtype="bool") /* ty=Tensor[(7, 2, 9), bool] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="bool") /* ty=Tensor[(7, 2, 9), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %309 = equal(%307, %308) /* ty=Tensor[(7, 2, 9), bool] */;
  %310 = cast(%304, dtype="uint16") /* ty=Tensor[(7, 2, 9), uint16] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="uint16") /* ty=Tensor[(7, 2, 9), uint16] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %314 = cast(%304, dtype="float64") /* ty=Tensor[(7, 2, 9), float64] */;
  %315 = %302.0;
  %316 = bitwise_or(%312, %313) /* ty=Tensor[(7, 2, 9), uint16] */;
  %317 = log(%314) /* ty=Tensor[(7, 2, 9), float64] */;
  (%315, meta[relay.Constant][21] /* ty=Tensor[(60), int16] */, %316, %317)
}

def @func_2817() -> Tensor[(4, 15, 15), float64] {
  @func_1759() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_3381() -> (Tensor[(4, 15, 15), float64], Tensor[(8, 7, 12), bool], Tensor[(84), int32], Tensor[(672), int32], Tensor[(4, 15, 15), float64]) {
  %318 = @func_2400() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %319 = cast(meta[relay.Constant][22] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %320 = cast(meta[relay.Constant][23] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %321 = reshape(%319, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), int32] */;
  %322 = reshape(%320, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %323 = @func_1040(%321, %322) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */;
  %324 = @func_1844() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %325 = %318.0;
  %326 = %323.1;
  %327 = %324.1;
  (%325, %326, meta[relay.Constant][22] /* ty=Tensor[(84), int32] */, meta[relay.Constant][23] /* ty=Tensor[(672), int32] */, %327)
}

def @func_5191() -> Tensor[(4, 15, 15), float64] {
  %328 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %328.1
}

def @func_7607() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %329 = @func_7506() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %330 = cast(meta[relay.Constant][24] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %331 = reshape(%330, newshape=[1800, 1]) /* ty=Tensor[(1800, 1), uint32] */;
  %332 = @func_2020(%331) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800, 1), uint32], Tensor[(13, 16, 14), bool]) */;
  %333 = @func_4434() /* ty=(Tensor[(4, 5, 1), float32], Tensor[(4, 15, 15), float32]) */;
  %334 = @func_2534() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %335 = @func_5546() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64], Tensor[(?, 7, 12), float64], Tensor[(84), float64]) */;
  %336 = @func_6209() /* ty=Tensor[(4, 15, 15), float64] */;
  %337 = %329.0;
  %338 = %332.2;
  %339 = %333.1;
  %340 = %334.2;
  %341 = %335.4;
  (%336, %337, %338, meta[relay.Constant][24] /* ty=Tensor[(1800), uint32] */, %339, %340, %341)
}

def @func_740(%var_662: Tensor[(2912), bool], %var_674: Tensor[(1800), uint32]) -> (Tensor[(104, 28), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800), uint32], Tensor[(104, 28), bool], Tensor[(1800), uint32], Tensor[(12, ?, 8), uint64], Tensor[(12, ?, 8), float32]) {
  %342 = cast(meta[relay.Constant][25] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %343 = cast(%var_662, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %344 = reshape(%342, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
  %345 = reshape(%343, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
  %346 = @func_471(%344, %345) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
  %347 = cast(meta[relay.Constant][26] /* ty=Tensor[(352), uint8] */, dtype="uint8") /* ty=Tensor[(352), uint8] */;
  %348 = cast(%var_674, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %349 = reshape(%347, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint8] */;
  %350 = reshape(%348, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %351 = @func_593(%349, %350) /* ty=(Tensor[(4, 11, 8), int16], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(2912), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(2912), bool]) */;
  %352 = cast(meta[relay.Constant][25] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %353 = %346.2;
  %354 = cast(%353, dtype="bool") /* ty=Tensor[(104, 28), bool] */;
  %355 = reshape(%352, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
  %356 = reshape(%354, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
  %357 = @func_471(%355, %356) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
  %358 = cast(meta[relay.Constant][26] /* ty=Tensor[(352), uint8] */, dtype="uint8") /* ty=Tensor[(352), uint8] */;
  %359 = cast(%var_674, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %360 = reshape(%358, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint8] */;
  %361 = reshape(%359, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %362 = @func_593(%360, %361) /* ty=(Tensor[(4, 11, 8), int16], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(2912), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(2912), bool]) */;
  %363 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(12, 1, 8), float64] */;
  %364 = sigmoid(%363) /* ty=Tensor[(12, 1, 8), float64] */;
  %365 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 1, 8), float64] */, dtype="uint64") /* ty=Tensor[(12, 1, 8), uint64] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="uint64") /* ty=Tensor[(12, 1, 8), uint64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %369 = cast(%364, dtype="float64") /* ty=Tensor[(12, 1, 8), float64] */;
  %370 = acosh(%369) /* ty=Tensor[(12, 1, 8), float64] */;
  %371 = cast(%364, dtype="float64") /* ty=Tensor[(12, 1, 8), float64] */;
  %372 = sqrt(%371) /* ty=Tensor[(12, 1, 8), float64] */;
  %373 = cast(%372, dtype="float32") /* ty=Tensor[(12, 1, 8), float32] */;
  %374 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%370, dtype="float32") /* ty=Tensor[(12, 1, 8), float32] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %377 = %351.3;
  %378 = %357.2;
  %379 = %362.2;
  %380 = bitwise_xor(%367, %368) /* ty=Tensor[(12, ?, 8), uint64] */;
  %381 = floor_divide(%375, %376) /* ty=Tensor[(12, ?, 8), float32] */;
  (%353, meta[relay.Constant][25] /* ty=Tensor[(48), float32] */, %var_662, %377, meta[relay.Constant][26] /* ty=Tensor[(352), uint8] */, %var_674, %378, %379, %380, %381)
}

def @func_6734() -> (Tensor[(4, 15, 15), float64], Tensor[(1, 3, 16), float32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64]) {
  %382 = @func_2534() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %383 = cast(meta[relay.Constant][28] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %384 = cast(meta[relay.Constant][29] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %385 = reshape(%383, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
  %386 = reshape(%384, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
  %387 = @func_471(%385, %386) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
  %388 = %382.2;
  %389 = %387.0;
  %390 = @func_2817() /* ty=Tensor[(4, 15, 15), float64] */;
  (%388, %389, meta[relay.Constant][28] /* ty=Tensor[(48), float32] */, meta[relay.Constant][29] /* ty=Tensor[(2912), bool] */, %390)
}

def @func_8500() -> Tensor[(4, 15, 15), float32] {
  @func_2278() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_8571() -> (Tensor[(4, 15, 15), float64],) {
  %391 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %392 = %391.0;
  (%392,)
}

def @func_4036() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %393 = @func_2783() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %394 = @func_3282() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(104, 28), bool], Tensor[(2, 24), float32], Tensor[(2912), bool]) */;
  %395 = %393.0;
  %396 = %394.1;
  (%395, %396)
}

def @func_4280(%var_4269: Tensor[(56), float64], %var_4273: Tensor[(2912), bool], %var_4274: Tensor[(1800), uint32]) -> (Tensor[(8, 2), float32], Tensor[(1800), uint32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(672), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(4, 15, 15), float32]) {
  %397 = @func_2636() /* ty=(Tensor[(8, 2), float32], Tensor[(4, 15, 15), float64]) */;
  %398 = cast(%var_4269, dtype="float64") /* ty=Tensor[(56), float64] */;
  %399 = cast(meta[relay.Constant][30] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %400 = cast(meta[relay.Constant][31] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %401 = cast(meta[relay.Constant][32] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %402 = cast(%var_4273, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %403 = cast(%var_4274, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %404 = reshape(%398, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), float64] */;
  %405 = reshape(%399, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
  %406 = reshape(%400, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %407 = reshape(%401, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %408 = reshape(%402, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %409 = reshape(%403, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %410 = @func_2125(%404, %405, %406, %407, %408, %409) /* ty=(Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) */;
  %411 = @func_2849() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %412 = %397.0;
  %413 = %410.8;
  %414 = %411.0;
  (%412, %413, %var_4269, meta[relay.Constant][30] /* ty=Tensor[(448), float64] */, meta[relay.Constant][31] /* ty=Tensor[(672), int32] */, meta[relay.Constant][32] /* ty=Tensor[(48), float32] */, %var_4273, %var_4274, %414)
}

def @func_3336(%var_3327: Tensor[(4, 15, 15), float64]) -> (Tensor[(4, 15, 15), bool], Tensor[(4, 15, 15), float64]) {
  %415 = @func_2986() /* ty=Tensor[(4, 15, 15), float64] */;
  %416 = cast(%var_3327, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = @func_2680() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %421 = not_equal(%418, %419) /* ty=Tensor[(4, 15, 15), bool] */;
  %422 = %420.0;
  (%421, %422)
}

def @func_9160() -> Tensor[(4, 15, 15), float64] {
  @func_9029() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_76(%var_69: Tensor[(13, 16, 14), bool]) -> Tensor[(13, 16, 14), bool] {
  %423 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 16, 14), bool] */, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %424 = shape_of(%var_69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%var_69, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%425, %426) /* ty=Tensor[(13, 16, 14), bool] */
}

def @func_471(%var_454: Tensor[(1, 3, 16), float32], %var_461: Tensor[(104, 28), bool]) -> (Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) {
  %427 = cast(6.18425f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %428 = cast(%var_454, dtype="float32") /* ty=Tensor[(1, 3, 16), float32] */;
  %429 = cast(%var_461, dtype="bool") /* ty=Tensor[(104, 28), bool] */;
  %430 = reshape(%429, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), bool] */;
  %431 = floor_divide(%427, %428) /* ty=Tensor[(1, 3, 16), float32] */;
  %432 = @func_76(%430) /* ty=Tensor[(13, 16, 14), bool] */;
  (%431, %432, %var_461)
}

def @func_5316() -> (Tensor[(4, 15, 15), float32],) {
  %433 = @func_2576() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %434 = %433.0;
  (%434,)
}

def @func_5370(%var_5334: Tensor[(11, 5, 6), float64]) -> Tensor[(11, 5, 6), float64] {
  %435 = cast(%var_5334, dtype="float64") /* ty=Tensor[(11, 5, 6), float64] */;
  cosh(%435) /* ty=Tensor[(11, 5, 6), float64] */
}

def @func_6536(%var_6525: Tensor[(4, 8, 1), uint8]) -> (Tensor[(4, 8, 3), uint8], Tensor[(11, 5, 6), float64], Tensor[(330), float64]) {
  %436 = cast(%var_6525, dtype="uint8") /* ty=Tensor[(4, 8, 1), uint8] */;
  %437 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 8, 3), uint8] */, dtype="uint8") /* ty=Tensor[(4, 8, 3), uint8] */;
  %438 = cast(meta[relay.Constant][35] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %439 = reshape(%438, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %440 = add(%436, %437) /* ty=Tensor[(4, 8, 3), uint8] */;
  %441 = @func_5370(%439) /* ty=Tensor[(11, 5, 6), float64] */;
  (%440, %441, meta[relay.Constant][35] /* ty=Tensor[(330), float64] */)
}

def @func_4094() -> (Tensor[(4, 15, 15), float64],) {
  %442 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
  (%442,)
}

def @func_6301() -> Tensor[(4, 15, 15), float32] {
  %443 = @func_5645() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %443.0
}

def @func_2534() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %444 = @func_2512() /* ty=Tensor[(4, 15, 15), float64] */;
  %445 = @func_1915() /* ty=Tensor[(4, 15, 15), float64] */;
  %446 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
  (%444, %445, %446)
}

def @func_7413(%var_7397: Tensor[(84), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(84), int32], Tensor[(84), int32], Tensor[(672), int32], Tensor[(8, 7, 12), int32], Tensor[(1, 165), float64], Tensor[(2, 240), int8]) {
  %447 = @func_2849() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %448 = cast(%var_7397, dtype="int32") /* ty=Tensor[(84), int32] */;
  %449 = cast(meta[relay.Constant][36] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %450 = reshape(%448, newshape=[84]) /* ty=Tensor[(84), int32] */;
  %451 = reshape(%449, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %452 = @func_4875(%450, %451) /* ty=(Tensor[(9, 2, 12), bool], Tensor[(400), int64], Tensor[(33, 5), float64], Tensor[(84), int32], Tensor[(672), int32]) */;
  %453 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 165), float64] */, dtype="float64") /* ty=Tensor[(1, 165), float64] */;
  %454 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 240), int8] */, dtype="int8") /* ty=Tensor[(2, 240), int8] */;
  %455 = %452.3;
  %456 = cast(%455, dtype="int32") /* ty=Tensor[(84), int32] */;
  %457 = cast(meta[relay.Constant][36] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %458 = reshape(%453, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float64] */;
  %459 = reshape(%454, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %460 = reshape(%456, newshape=[84, 1]) /* ty=Tensor[(84, 1), int32] */;
  %461 = reshape(%457, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %462 = @func_1124(%458, %459, %460, %461) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */;
  %463 = %447.0;
  %464 = %462.6;
  (%463, %455, %var_7397, meta[relay.Constant][36] /* ty=Tensor[(672), int32] */, %464, meta[relay.Constant][37] /* ty=Tensor[(1, 165), float64] */, meta[relay.Constant][38] /* ty=Tensor[(2, 240), int8] */)
}

def @func_1844() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %465 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
  %466 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
  (%465, %466)
}

def @func_6209() -> Tensor[(4, 15, 15), float64] {
  %467 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %467.1
}

def @func_6350(%var_6336: Tensor[(11, 3, 16), uint64]) -> (Tensor[(11, 3, 16), uint64],) {
  %468 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 3, 1), uint64] */, dtype="uint64") /* ty=Tensor[(11, 3, 1), uint64] */;
  %469 = cast(%var_6336, dtype="uint64") /* ty=Tensor[(11, 3, 16), uint64] */;
  %470 = bitwise_or(%468, %469) /* ty=Tensor[(11, 3, 16), uint64] */;
  (%470,)
}

def @func_8075() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 5, 1), float64]) {
  %471 = @func_2783() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %472 = @func_5924() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 5, 1), float32]) */;
  %473 = %472.2;
  %474 = cast(%473, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
  %475 = %471.1;
  %476 = sinh(%474) /* ty=Tensor[(4, 5, 1), float64] */;
  (%475, %476)
}

def @func_8531() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) {
  %477 = cast(meta[relay.Constant][40] /* ty=Tensor[(400), int64] */, dtype="int64") /* ty=Tensor[(400), int64] */;
  %478 = reshape(%477, newshape=[10, 10, 4]) /* ty=Tensor[(10, 10, 4), int64] */;
  %479 = @func_5756() /* ty=Tensor[(4, 15, 15), float64] */;
  %480 = @func_2724() /* ty=Tensor[(4, 15, 15), float64] */;
  %481 = @func_1619(%478) /* ty=Tensor[(10, 10, 4), int64] */;
  (%479, %480, %481, meta[relay.Constant][40] /* ty=Tensor[(400), int64] */)
}

def @func_8688() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], float32, Tensor[(4, 15, 15), float64]) {
  %482 = @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %483 = @func_8571() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %484 = @func_6179() /* ty=(float32, Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
  %485 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %486 = %482.0;
  %487 = %483.0;
  %488 = %484.0;
  %489 = %485.1;
  (%486, %487, %488, %489)
}

def @func_9519() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) {
  %490 = @func_7913() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %491 = @func_6671() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %492 = @func_6976() /* ty=Tensor[(4, 15, 15), float64] */;
  %493 = @func_5191() /* ty=Tensor[(4, 15, 15), float64] */;
  %494 = %490.0;
  %495 = %491.1;
  %496 = @func_8089() /* ty=Tensor[(4, 15, 15), float32] */;
  (%492, %493, %494, %495, %496)
}

def @func_4702() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool]) {
  %497 = @func_3480() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %498 = @func_1510() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %499 = cast(meta[relay.Constant][41] /* ty=Tensor[(18, 100), uint32] */, dtype="uint32") /* ty=Tensor[(18, 100), uint32] */;
  %500 = cast(meta[relay.Constant][41] /* ty=Tensor[(18, 100), uint32] */, dtype="uint32") /* ty=Tensor[(18, 100), uint32] */;
  %501 = reshape(%499, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %502 = reshape(%500, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %503 = @func_551(%501, %502) /* ty=(Tensor[(10, 15, 12), uint32],) */;
  %504 = %503.0;
  %505 = cast(%504, dtype="bool") /* ty=Tensor[(10, 15, 12), bool] */;
  %506 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(18, 100), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %507 = cast(meta[relay.Constant][41] /* ty=Tensor[(18, 100), uint32] */, dtype="bool") /* ty=Tensor[(18, 100), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %509 = %497.1;
  %510 = %498.0;
  %511 = less(%507, %508) /* ty=Tensor[(18, 100), bool] */;
  (%509, %510, %511)
}

def @func_8880(%var_8851: Tensor[(60), int16]) -> (Tensor[(4, 15, 15), float32], Tensor[(3, 2, 10), bool], Tensor[(60), int16], Tensor[(3, 2, 10), bool]) {
  %512 = cast(%var_8851, dtype="int16") /* ty=Tensor[(60), int16] */;
  %513 = reshape(%512, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), int16] */;
  %514 = @func_4414(%513) /* ty=(Tensor[(3, 2, 10), bool],) */;
  %515 = cast(%var_8851, dtype="int16") /* ty=Tensor[(60), int16] */;
  %516 = reshape(%515, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), int16] */;
  %517 = @func_4414(%516) /* ty=(Tensor[(3, 2, 10), bool],) */;
  %518 = @func_2278() /* ty=Tensor[(4, 15, 15), float32] */;
  %519 = %514.0;
  %520 = %517.0;
  (%518, %519, %var_8851, %520)
}

def @func_3561(%var_3555: Tensor[(3, 6, 6), float64], %var_3556: Tensor[(3, 6, 6), float64]) -> Tensor[(3, 6, 6), float64] {
  %521 = cast(%var_3556, dtype="float64") /* ty=Tensor[(3, 6, 6), float64] */;
  %522 = shape_of(%var_3555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%var_3555, dtype="float64") /* ty=Tensor[(3, 6, 6), float64] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  multiply(%523, %524) /* ty=Tensor[(3, 6, 6), float64] */
}

def @func_1759() -> Tensor[(4, 15, 15), float64] {
  %525 = @func_1510() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %525.0
}

def @func_2300() -> (Tensor[(4, 15, 15), float64],) {
  %526 = @func_2265() /* ty=Tensor[(4, 15, 15), float64] */;
  (%526,)
}

def @func_3749(%var_3729: Tensor[(165), float64], %var_3730: Tensor[(8, 60), int8], %var_3740: Tensor[(48), float32], %var_3742: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(11, 5, 3), float32], Tensor[(165), float64], Tensor[(8, 60), int8], Tensor[(84), int32], Tensor[(672), int32], Tensor[(48), float32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(1800), uint32]) {
  %527 = @func_2534() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %528 = cast(%var_3729, dtype="float64") /* ty=Tensor[(165), float64] */;
  %529 = cast(%var_3730, dtype="int8") /* ty=Tensor[(8, 60), int8] */;
  %530 = cast(meta[relay.Constant][42] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %531 = cast(meta[relay.Constant][43] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %532 = reshape(%528, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float64] */;
  %533 = reshape(%529, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %534 = reshape(%530, newshape=[84, 1]) /* ty=Tensor[(84, 1), int32] */;
  %535 = reshape(%531, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %536 = @func_1124(%532, %533, %534, %535) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */;
  %537 = cast(meta[relay.Constant][44] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %538 = cast(meta[relay.Constant][45] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %539 = cast(meta[relay.Constant][43] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %540 = cast(%var_3740, dtype="float32") /* ty=Tensor[(48), float32] */;
  %541 = cast(meta[relay.Constant][46] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %542 = cast(%var_3742, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %543 = reshape(%537, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), float64] */;
  %544 = reshape(%538, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
  %545 = reshape(%539, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %546 = reshape(%540, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %547 = reshape(%541, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %548 = reshape(%542, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %549 = @func_2125(%543, %544, %545, %546, %547, %548) /* ty=(Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) */;
  %550 = %527.1;
  %551 = %536.0;
  %552 = %549.4;
  (%550, %551, %var_3729, %var_3730, meta[relay.Constant][42] /* ty=Tensor[(84), int32] */, meta[relay.Constant][43] /* ty=Tensor[(672), int32] */, %552, meta[relay.Constant][44] /* ty=Tensor[(56), float64] */, meta[relay.Constant][45] /* ty=Tensor[(448), float64] */, %var_3740, meta[relay.Constant][46] /* ty=Tensor[(2912), bool] */, %var_3742)
}

def @func_5924() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 5, 1), float32]) {
  %553 = @func_5802() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(231), float32], Tensor[(4, 15, 15), float64]) */;
  %554 = @func_4434() /* ty=(Tensor[(4, 5, 1), float32], Tensor[(4, 15, 15), float32]) */;
  %555 = %553.2;
  %556 = @func_5014() /* ty=Tensor[(4, 15, 15), float32] */;
  %557 = %554.0;
  (%555, %556, %557)
}

def @func_8777(%var_8762: Tensor[(1, 5, 5), uint16], %var_8763: Tensor[(8, 5, 5), uint16]) -> Tensor[(8, 5, 5), bool] {
  %558 = cast(%var_8762, dtype="bool") /* ty=Tensor[(1, 5, 5), bool] */;
  %559 = cast(%var_8763, dtype="bool") /* ty=Tensor[(8, 5, 5), bool] */;
  greater_equal(%558, %559) /* ty=Tensor[(8, 5, 5), bool] */
}

def @func_7314() -> (Tensor[(4, 15, 15), float64],) {
  %560 = @func_6734() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(1, 3, 16), float32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64]) */;
  %561 = %560.4;
  (%561,)
}

def @func_5014() -> Tensor[(4, 15, 15), float32] {
  %562 = @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %562.0
}

def @func_4875(%var_4864: Tensor[(84), int32], %var_4865: Tensor[(672), int32]) -> (Tensor[(9, 2, 12), bool], Tensor[(400), int64], Tensor[(33, 5), float64], Tensor[(84), int32], Tensor[(672), int32]) {
  %563 = @func_3042() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) */;
  %564 = cast(meta[relay.Constant][47] /* ty=Tensor[(33, 5), float64] */, dtype="float64") /* ty=Tensor[(33, 5), float64] */;
  %565 = cast(%var_4864, dtype="int32") /* ty=Tensor[(84), int32] */;
  %566 = cast(%var_4865, dtype="int32") /* ty=Tensor[(672), int32] */;
  %567 = reshape(%564, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %568 = reshape(%565, newshape=[84]) /* ty=Tensor[(84), int32] */;
  %569 = reshape(%566, newshape=[1, 672]) /* ty=Tensor[(1, 672), int32] */;
  %570 = @func_3087(%567, %568, %569) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(8, 7, 12), int32], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(1, 672), int32], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) */;
  %571 = %563.1;
  %572 = %570.7;
  (%571, %572, meta[relay.Constant][47] /* ty=Tensor[(33, 5), float64] */, %var_4864, %var_4865)
}

def @func_7149() -> Tensor[(4, 15, 15), float32] {
  @func_6099() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_7913() -> (Tensor[(4, 15, 15), float32],) {
  %573 = @func_6802() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %574 = %573.0;
  (%574,)
}

def @func_2446() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %575 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %576 = @func_1991() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %577 = @func_2400() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %578 = @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %579 = %575.0;
  %580 = %576.1;
  %581 = @func_2278() /* ty=Tensor[(4, 15, 15), float32] */;
  %582 = %577.0;
  %583 = %578.0;
  (%579, %580, %581, %582, %583)
}

def @func_2400() -> (Tensor[(4, 15, 15), float64],) {
  %584 = @func_1915() /* ty=Tensor[(4, 15, 15), float64] */;
  (%584,)
}

def @func_8926(%var_8906: Tensor[(2, 8, 10), float64], %var_8907: Tensor[(2, 8, 10), float64]) -> (Tensor[(2, 8, 10), float64], Tensor[(13, 16, 14), bool], Tensor[(8, 364), bool]) {
  %585 = cast(%var_8907, dtype="float64") /* ty=Tensor[(2, 8, 10), float64] */;
  %586 = shape_of(%var_8906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%var_8906, dtype="float64") /* ty=Tensor[(2, 8, 10), float64] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %589 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 364), bool] */, dtype="bool") /* ty=Tensor[(8, 364), bool] */;
  %590 = reshape(%589, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), bool] */;
  %591 = divide(%587, %588) /* ty=Tensor[(2, 8, 10), float64] */;
  %592 = @func_76(%590) /* ty=Tensor[(13, 16, 14), bool] */;
  (%591, %592, meta[relay.Constant][48] /* ty=Tensor[(8, 364), bool] */)
}

def @func_6382() -> (Tensor[(4, 15, 15), float32], Tensor[(480), int8], Tensor[(231), float32], Tensor[(480), int8], Tensor[(2912), float64]) {
  %593 = cast(meta[relay.Constant][49] /* ty=Tensor[(231), float32] */, dtype="float32") /* ty=Tensor[(231), float32] */;
  %594 = cast(meta[relay.Constant][50] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %595 = cast(meta[relay.Constant][51] /* ty=Tensor[(2912), float64] */, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %596 = reshape(%593, newshape=[231]) /* ty=Tensor[(231), float32] */;
  %597 = reshape(%594, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %598 = reshape(%595, newshape=[104, 28]) /* ty=Tensor[(104, 28), float64] */;
  %599 = @func_3706(%596, %597, %598) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 16, 11), uint32], Tensor[(231), float32], Tensor[(480), int8], Tensor[(4, 15, 15), float32], Tensor[(104, 28), uint64]) */;
  %600 = @func_1864() /* ty=Tensor[(4, 15, 15), float32] */;
  %601 = %599.3;
  (%600, %601, meta[relay.Constant][49] /* ty=Tensor[(231), float32] */, meta[relay.Constant][50] /* ty=Tensor[(480), int8] */, meta[relay.Constant][51] /* ty=Tensor[(2912), float64] */)
}

def @func_2576() -> (Tensor[(4, 15, 15), float32],) {
  %602 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %603 = %602.0;
  %604 = cast(%603, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
  %605 = asin(%604) /* ty=Tensor[(4, 15, 15), float32] */;
  (%605,)
}

def @func_2125(%var_2028: Tensor[(7, 8, 1), float64], %var_2050: Tensor[(7, 8, 8), float64], %var_2058: Tensor[(672), int32], %var_2072: Tensor[(48), float32], %var_2073: Tensor[(2912), bool], %var_2089: Tensor[(1800), uint32]) -> (Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) {
  %606 = cast(%var_2028, dtype="float64") /* ty=Tensor[(7, 8, 1), float64] */;
  %607 = atanh(%606) /* ty=Tensor[(7, 8, 1), float64] */;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(7, 8, 1), float32] */;
  %609 = cast(%var_2050, dtype="float32") /* ty=Tensor[(7, 8, 8), float32] */;
  %610 = cast(meta[relay.Constant][52] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %611 = cast(%var_2058, dtype="int32") /* ty=Tensor[(672), int32] */;
  %612 = reshape(%610, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), int32] */;
  %613 = reshape(%611, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %614 = @func_1040(%612, %613) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */;
  %615 = cast(%var_2072, dtype="float32") /* ty=Tensor[(48), float32] */;
  %616 = cast(%var_2073, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %617 = reshape(%615, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
  %618 = reshape(%616, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
  %619 = @func_471(%617, %618) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
  %620 = cast(%607, dtype="float64") /* ty=Tensor[(7, 8, 1), float64] */;
  %621 = cast(%var_2050, dtype="float64") /* ty=Tensor[(7, 8, 8), float64] */;
  %622 = cast(%var_2089, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %623 = cast(%var_2089, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %624 = reshape(%622, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %625 = reshape(%623, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %626 = @func_551(%624, %625) /* ty=(Tensor[(10, 15, 12), uint32],) */;
  %627 = cast(meta[relay.Constant][52] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %628 = cast(%var_2058, dtype="int32") /* ty=Tensor[(672), int32] */;
  %629 = reshape(%627, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), int32] */;
  %630 = reshape(%628, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %631 = @func_1040(%629, %630) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */;
  %632 = cast(%607, dtype="uint32") /* ty=Tensor[(7, 8, 1), uint32] */;
  %633 = cast(meta[relay.Constant][52] /* ty=Tensor[(84), int32] */, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %634 = cast(%var_2050, dtype="float32") /* ty=Tensor[(7, 8, 8), float32] */;
  %635 = maximum(%608, %609) /* ty=Tensor[(7, 8, 8), float32] */;
  %636 = %614.0;
  %637 = %619.1;
  %638 = divide(%620, %621) /* ty=Tensor[(7, 8, 8), float64] */;
  %639 = %626.0;
  %640 = %631.0;
  %641 = maximum(%632, %633) /* ty=Tensor[(7, 8, 84), uint32] */;
  %642 = acos(%634) /* ty=Tensor[(7, 8, 8), float32] */;
  (%635, %636, %var_2058, %637, %var_2072, %var_2073, %638, %639, %var_2089, %640, %641, %642)
}

def @func_5756() -> Tensor[(4, 15, 15), float64] {
  @func_5138() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_7008(%var_6986: Tensor[(448), float64], %var_6987: Tensor[(168, 4), int32], %var_6988: Tensor[(48), float32], %var_6989: Tensor[(2912), bool], %var_6990: Tensor[(1800), uint32], %var_6999: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(7, 8, 8), float64], Tensor[(56), float64], Tensor[(448), float64], Tensor[(168, 4), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(1800), float32]) {
  %643 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %644 = cast(meta[relay.Constant][53] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %645 = cast(%var_6986, dtype="float64") /* ty=Tensor[(448), float64] */;
  %646 = cast(%var_6987, dtype="int32") /* ty=Tensor[(168, 4), int32] */;
  %647 = cast(%var_6988, dtype="float32") /* ty=Tensor[(48), float32] */;
  %648 = cast(%var_6989, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %649 = cast(%var_6990, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %650 = reshape(%644, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), float64] */;
  %651 = reshape(%645, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
  %652 = reshape(%646, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %653 = reshape(%647, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %654 = reshape(%648, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %655 = reshape(%649, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %656 = @func_2125(%650, %651, %652, %653, %654, %655) /* ty=(Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) */;
  %657 = cast(%var_6999, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %658 = shape_of(%var_6990, dtype="int32") /* ty=Tensor[(1), int32] */;
  %659 = cast(%var_6990, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?), float32] */;
  %661 = %643.1;
  %662 = %656.6;
  %663 = mod(%659, %660) /* ty=Tensor[(1800), float32] */;
  (%661, %662, meta[relay.Constant][53] /* ty=Tensor[(56), float64] */, %var_6986, %var_6987, %var_6988, %var_6989, %663)
}

def @func_8203(%var_8188: Tensor[(405), uint64], %var_8189: Tensor[(18), float32]) -> (Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool], Tensor[(9), uint64], Tensor[(405), uint64], Tensor[(18), float32]) {
  %664 = cast(meta[relay.Constant][54] /* ty=Tensor[(9), uint64] */, dtype="uint64") /* ty=Tensor[(9), uint64] */;
  %665 = cast(%var_8188, dtype="uint64") /* ty=Tensor[(405), uint64] */;
  %666 = cast(%var_8189, dtype="float32") /* ty=Tensor[(18), float32] */;
  %667 = reshape(%664, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), uint64] */;
  %668 = reshape(%665, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), uint64] */;
  %669 = reshape(%666, newshape=[2, 1, 9]) /* ty=Tensor[(2, 1, 9), float32] */;
  %670 = @func_7560(%667, %668, %669) /* ty=(Tensor[(15, 3, 9), uint32], Tensor[(18, 100), bool], Tensor[(2, 1, 9), float32]) */;
  %671 = @func_6655() /* ty=Tensor[(4, 15, 15), float64] */;
  %672 = %670.1;
  (%671, %672, meta[relay.Constant][54] /* ty=Tensor[(9), uint64] */, %var_8188, %var_8189)
}

def @func_1991() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %673 = @func_1844() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %674 = %673.0;
  %675 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
  (%674, %675)
}

def @func_6119(%var_6113: Tensor[(16, 15, 11), float32]) -> (Tensor[(16, 15, 11), float32],) {
  %676 = cast(%var_6113, dtype="float32") /* ty=Tensor[(16, 15, 11), float32] */;
  %677 = log10(%676) /* ty=Tensor[(16, 15, 11), float32] */;
  (%677,)
}

def @func_2927() -> (Tensor[(4, 15, 15), float32], Tensor[(1, 2912), bool], Tensor[(231), float32], Tensor[(40, 12), int8], Tensor[(4, 728), bool]) {
  %678 = @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %679 = cast(meta[relay.Constant][55] /* ty=Tensor[(231), float32] */, dtype="float32") /* ty=Tensor[(231), float32] */;
  %680 = cast(meta[relay.Constant][56] /* ty=Tensor[(40, 12), int8] */, dtype="int8") /* ty=Tensor[(40, 12), int8] */;
  %681 = cast(meta[relay.Constant][57] /* ty=Tensor[(4, 728), bool] */, dtype="bool") /* ty=Tensor[(4, 728), bool] */;
  %682 = reshape(%679, newshape=[3, 11, 7]) /* ty=Tensor[(3, 11, 7), float32] */;
  %683 = reshape(%680, newshape=[8, 60]) /* ty=Tensor[(8, 60), int8] */;
  %684 = reshape(%681, newshape=[1, 2912]) /* ty=Tensor[(1, 2912), bool] */;
  %685 = @func_1684(%682, %683, %684) /* ty=(Tensor[(3, 11, 7), bool], Tensor[(8, 16, 11), uint32], Tensor[(8, 60), int8], Tensor[(1, 2912), bool]) */;
  %686 = %678.0;
  %687 = %685.3;
  (%686, %687, meta[relay.Constant][55] /* ty=Tensor[(231), float32] */, meta[relay.Constant][56] /* ty=Tensor[(40, 12), int8] */, meta[relay.Constant][57] /* ty=Tensor[(4, 728), bool] */)
}

def @func_6976() -> Tensor[(4, 15, 15), float64] {
  %688 = @func_6948() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %688.0
}

def @func_5495(%var_5477: Tensor[(11, 15), float64]) -> (Tensor[(4, 15, 15), float64], Tensor[(48), float32], Tensor[(11, 15), float64], Tensor[(8, 84), int32]) {
  %689 = @func_1510() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %690 = cast(%var_5477, dtype="float64") /* ty=Tensor[(11, 15), float64] */;
  %691 = cast(meta[relay.Constant][58] /* ty=Tensor[(8, 84), int32] */, dtype="int32") /* ty=Tensor[(8, 84), int32] */;
  %692 = reshape(%690, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %693 = reshape(%691, newshape=[336, 2]) /* ty=Tensor[(336, 2), int32] */;
  %694 = @func_4617(%692, %693) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(40, 12), int8], Tensor[(8, 364), bool], Tensor[(165), float64], Tensor[(84), int32], Tensor[(336, 2), int32], Tensor[(104, 28), bool], Tensor[(48), float32]) */;
  %695 = %689.0;
  %696 = %694.7;
  (%695, %696, %var_5477, meta[relay.Constant][58] /* ty=Tensor[(8, 84), int32] */)
}

def @func_4825(%var_4812: float32) -> (Tensor[(9, 2, 12), bool], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) {
  %697 = @func_3042() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) */;
  %698 = @func_2680() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %699 = @func_2680() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %700 = cast(%var_4812, dtype="float32") /* ty=float32 */;
  %701 = reshape(%700, newshape=[]) /* ty=float32 */;
  %702 = %697.1;
  %703 = %698.0;
  %704 = %699.0;
  %705 = @func_2936(%701) /* ty=Tensor[(9, 2, 12), bool] */;
  (%702, %703, %704, %705, %var_4812)
}

def @func_8385() -> (Tensor[(4, 15, 15), float64],) {
  %706 = @func_6788() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %707 = %706.1;
  (%707,)
}

def @func_2636() -> (Tensor[(8, 2), float32], Tensor[(4, 15, 15), float64]) {
  %708 = cast(meta[relay.Constant][59] /* ty=Tensor[(8, 2), float32] */, dtype="float32") /* ty=Tensor[(8, 2), float32] */;
  %709 = @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %710 = exp(%708) /* ty=Tensor[(8, 2), float32] */;
  %711 = %709.0;
  (%710, %711)
}

def @func_9365() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) {
  %712 = @func_9184() /* ty=Tensor[(4, 15, 15), float64] */;
  %713 = cast(%712, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
  %714 = @func_6568() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) */;
  %715 = asinh(%713) /* ty=Tensor[(4, 15, 15), float32] */;
  %716 = %714.1;
  (%715, %716)
}

def @func_7387(%var_7347: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(12, ?, 8), float32], Tensor[(1800), uint32], Tensor[(?, 2912), int32], Tensor[(?, 2912), bool], Tensor[(2, 2912), float64]) {
  %717 = @func_1991() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %718 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 2912), bool] */, dtype="bool") /* ty=Tensor[(1, 2912), bool] */;
  %719 = cast(%var_7347, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %720 = reshape(%718, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %721 = reshape(%719, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %722 = @func_740(%720, %721) /* ty=(Tensor[(104, 28), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800), uint32], Tensor[(104, 28), bool], Tensor[(1800), uint32], Tensor[(12, ?, 8), uint64], Tensor[(12, ?, 8), float32]) */;
  %723 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 2912), bool] */, dtype="float32") /* ty=Tensor[(1, 2912), float32] */;
  %724 = atan(%723) /* ty=Tensor[(1, 2912), float32] */;
  %725 = cast(%724, dtype="int32") /* ty=Tensor[(1, 2912), int32] */;
  %726 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(1, 2912), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %727 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 2912), bool] */, dtype="int32") /* ty=Tensor[(1, 2912), int32] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %729 = cast(%724, dtype="bool") /* ty=Tensor[(1, 2912), bool] */;
  %730 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(1, 2912), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %731 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 2912), bool] */, dtype="bool") /* ty=Tensor[(1, 2912), bool] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %733 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 2912), bool] */, dtype="uint32") /* ty=Tensor[(1, 2912), uint32] */;
  %734 = shape_of(%724, dtype="int32") /* ty=Tensor[(2), int32] */;
  %735 = cast(%724, dtype="uint32") /* ty=Tensor[(1, 2912), uint32] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %737 = subtract(%735, %736) /* ty=Tensor[(?, 2912), uint32] */;
  %738 = cast(%737, dtype="float64") /* ty=Tensor[(?, 2912), float64] */;
  %739 = cast(meta[relay.Constant][61] /* ty=Tensor[(2, 2912), uint32] */, dtype="float64") /* ty=Tensor[(2, 2912), float64] */;
  %740 = %717.1;
  %741 = %722.9;
  %742 = bitwise_xor(%727, %728) /* ty=Tensor[(?, 2912), int32] */;
  %743 = not_equal(%731, %732) /* ty=Tensor[(?, 2912), bool] */;
  %744 = mod(%738, %739) /* ty=Tensor[(2, 2912), float64] */;
  (%740, %741, %var_7347, %742, %743, %744)
}

def @func_4634(%var_4625: Tensor[(15, 15, 6), float32]) -> (Tensor[(15, 15, 6), float32],) {
  %745 = cast(%var_4625, dtype="float32") /* ty=Tensor[(15, 15, 6), float32] */;
  %746 = sqrt(%745) /* ty=Tensor[(15, 15, 6), float32] */;
  (%746,)
}

def @func_4399() -> Tensor[(4, 15, 15), float64] {
  %747 = @func_4036() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %747.1
}

def @func_8752(%var_8747: Tensor[(1, 1350), float32]) -> (Tensor[(10, 10, 4), float32], Tensor[(15, 15, 6), float32], Tensor[(1, 1350), float32]) {
  %748 = @func_8531() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) */;
  %749 = %748.2;
  %750 = cast(%749, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
  %751 = cast(%var_8747, dtype="float32") /* ty=Tensor[(1, 1350), float32] */;
  %752 = reshape(%751, newshape=[15, 15, 6]) /* ty=Tensor[(15, 15, 6), float32] */;
  %753 = @func_4634(%752) /* ty=(Tensor[(15, 15, 6), float32],) */;
  %754 = log10(%750) /* ty=Tensor[(10, 10, 4), float32] */;
  %755 = %753.0;
  (%754, %755, %var_8747)
}

def @func_6000() -> (Tensor[(4, 15, 15), float32], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32]) {
  %756 = @func_5645() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %757 = cast(meta[relay.Constant][62] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %758 = cast(meta[relay.Constant][62] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %759 = reshape(%757, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %760 = reshape(%758, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %761 = @func_551(%759, %760) /* ty=(Tensor[(10, 15, 12), uint32],) */;
  %762 = %756.0;
  %763 = %761.0;
  (%762, %763, meta[relay.Constant][62] /* ty=Tensor[(1800), uint32] */)
}

def @func_2278() -> Tensor[(4, 15, 15), float32] {
  @func_1864() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_1040(%var_999: Tensor[(1, 7, 12), int32], %var_1000: Tensor[(8, 7, 12), int32]) -> (Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) {
  %764 = cast(%var_999, dtype="int32") /* ty=Tensor[(1, 7, 12), int32] */;
  %765 = cast(%var_1000, dtype="int32") /* ty=Tensor[(8, 7, 12), int32] */;
  %766 = cast(%var_999, dtype="bool") /* ty=Tensor[(1, 7, 12), bool] */;
  %767 = cast(%var_1000, dtype="bool") /* ty=Tensor[(8, 7, 12), bool] */;
  %768 = multiply(%764, %765) /* ty=Tensor[(8, 7, 12), int32] */;
  %769 = greater(%766, %767) /* ty=Tensor[(8, 7, 12), bool] */;
  (%768, %769)
}

def @func_2783() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %770 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %771 = %770.0;
  %772 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
  %773 = cast(%772, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %774 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%771, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %777 = @func_2300() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %778 = floor_mod(%775, %776) /* ty=Tensor[(4, 15, 15), float64] */;
  %779 = %777.0;
  (%778, %779)
}

def @func_1319() -> (Tensor[(4, 15, 15), float32],) {
  %780 = cast(meta[relay.Constant][63] /* ty=Tensor[(4, 15, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
  %781 = acosh(%780) /* ty=Tensor[(4, 15, 15), float32] */;
  (%781,)
}

def @func_3706(%var_3666: Tensor[(231), float32], %var_3667: Tensor[(480), int8], %var_3697: Tensor[(104, 28), float64]) -> (Tensor[(4, 15, 15), float64], Tensor[(8, 16, 11), uint32], Tensor[(231), float32], Tensor[(480), int8], Tensor[(4, 15, 15), float32], Tensor[(104, 28), uint64]) {
  %782 = cast(%var_3666, dtype="float32") /* ty=Tensor[(231), float32] */;
  %783 = cast(%var_3667, dtype="int8") /* ty=Tensor[(480), int8] */;
  %784 = cast(meta[relay.Constant][64] /* ty=Tensor[(104, 28), bool] */, dtype="bool") /* ty=Tensor[(104, 28), bool] */;
  %785 = reshape(%782, newshape=[3, 11, 7]) /* ty=Tensor[(3, 11, 7), float32] */;
  %786 = reshape(%783, newshape=[8, 60]) /* ty=Tensor[(8, 60), int8] */;
  %787 = reshape(%784, newshape=[1, 2912]) /* ty=Tensor[(1, 2912), bool] */;
  %788 = @func_1684(%785, %786, %787) /* ty=(Tensor[(3, 11, 7), bool], Tensor[(8, 16, 11), uint32], Tensor[(8, 60), int8], Tensor[(1, 2912), bool]) */;
  %789 = @func_2701() /* ty=Tensor[(4, 15, 15), float64] */;
  %790 = cast(%789, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
  %791 = cast(meta[relay.Constant][64] /* ty=Tensor[(104, 28), bool] */, dtype="float32") /* ty=Tensor[(104, 28), float32] */;
  %792 = sqrt(%791) /* ty=Tensor[(104, 28), float32] */;
  %793 = cast(%792, dtype="float64") /* ty=Tensor[(104, 28), float64] */;
  %794 = rsqrt(%793) /* ty=Tensor[(104, 28), float64] */;
  %795 = cast(%var_3697, dtype="uint32") /* ty=Tensor[(104, 28), uint32] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(2), int32] */;
  %797 = cast(%794, dtype="uint32") /* ty=Tensor[(104, 28), uint32] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %799 = right_shift(%797, %798) /* ty=Tensor[(104, 28), uint32] */;
  %800 = cast(%792, dtype="uint64") /* ty=Tensor[(104, 28), uint64] */;
  %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(2), int32] */;
  %802 = cast(%799, dtype="uint64") /* ty=Tensor[(104, 28), uint64] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %804 = @func_2512() /* ty=Tensor[(4, 15, 15), float64] */;
  %805 = %788.1;
  %806 = sqrt(%790) /* ty=Tensor[(4, 15, 15), float32] */;
  %807 = bitwise_and(%802, %803) /* ty=Tensor[(104, 28), uint64] */;
  (%804, %805, %var_3666, %var_3667, %806, %807)
}

def @func_4617(%var_4575: Tensor[(165), float64], %var_4577: Tensor[(336, 2), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(40, 12), int8], Tensor[(8, 364), bool], Tensor[(165), float64], Tensor[(84), int32], Tensor[(336, 2), int32], Tensor[(104, 28), bool], Tensor[(48), float32]) {
  %808 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %809 = @func_2927() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(1, 2912), bool], Tensor[(231), float32], Tensor[(40, 12), int8], Tensor[(4, 728), bool]) */;
  %810 = cast(%var_4575, dtype="float64") /* ty=Tensor[(165), float64] */;
  %811 = %809.3;
  %812 = cast(%811, dtype="int8") /* ty=Tensor[(40, 12), int8] */;
  %813 = cast(meta[relay.Constant][65] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %814 = cast(%var_4577, dtype="int32") /* ty=Tensor[(336, 2), int32] */;
  %815 = reshape(%810, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float64] */;
  %816 = reshape(%812, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %817 = reshape(%813, newshape=[84, 1]) /* ty=Tensor[(84, 1), int32] */;
  %818 = reshape(%814, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %819 = @func_1124(%815, %816, %817, %818) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */;
  %820 = cast(meta[relay.Constant][66] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %821 = %819.3;
  %822 = cast(%821, dtype="bool") /* ty=Tensor[(8, 364), bool] */;
  %823 = reshape(%820, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
  %824 = reshape(%822, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
  %825 = @func_471(%823, %824) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
  %826 = %808.0;
  %827 = %825.2;
  (%826, %811, %821, %var_4575, meta[relay.Constant][65] /* ty=Tensor[(84), int32] */, %var_4577, %827, meta[relay.Constant][66] /* ty=Tensor[(48), float32] */)
}

def @func_4434() -> (Tensor[(4, 5, 1), float32], Tensor[(4, 15, 15), float32]) {
  %828 = cast(meta[relay.Constant][67] /* ty=Tensor[(4, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(4, 5, 1), float32] */;
  %829 = @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %830 = sqrt(%828) /* ty=Tensor[(4, 5, 1), float32] */;
  %831 = %829.0;
  (%830, %831)
}

def @func_4918() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) {
  %832 = @func_2446() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %833 = @func_1864() /* ty=Tensor[(4, 15, 15), float32] */;
  %834 = %832.1;
  (%833, %834)
}

def @func_2680() -> (Tensor[(4, 15, 15), float64],) {
  %835 = @func_1844() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %836 = %835.0;
  %837 = cast(meta[relay.Constant][68] /* ty=Tensor[(4, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%836, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %841 = maximum(%839, %840) /* ty=Tensor[(4, 15, 15), float64] */;
  (%841,)
}

def @main(%var_9721: Tensor[(11, 2, 15), int8], %var_9722: Tensor[(11, 2, 15), int8]) -> (Tensor[(11, 2, 15), bool], Tensor[(324), int16], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(11, 2, 15), uint8]) {
  %842 = cast(%var_9722, dtype="bool") /* ty=Tensor[(11, 2, 15), bool] */;
  %843 = shape_of(%var_9721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %844 = cast(%var_9721, dtype="bool") /* ty=Tensor[(11, 2, 15), bool] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %846 = @func_7314() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %847 = @func_4094() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %848 = cast(meta[relay.Constant][69] /* ty=Tensor[(324), int16] */, dtype="int16") /* ty=Tensor[(324), int16] */;
  %849 = cast(meta[relay.Constant][69] /* ty=Tensor[(324), int16] */, dtype="int16") /* ty=Tensor[(324), int16] */;
  %850 = reshape(%848, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
  %851 = reshape(%849, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
  %852 = @func_4145(%850, %851) /* ty=(Tensor[(3, 12, 9), int16], float32, Tensor[(3, 12, 9), float64]) */;
  %853 = %852.1;
  %854 = cast(%var_9722, dtype="uint8") /* ty=Tensor[(11, 2, 15), uint8] */;
  %855 = cast(%853, dtype="uint8") /* ty=uint8 */;
  %856 = greater(%844, %845) /* ty=Tensor[(11, 2, 15), bool] */;
  %857 = %846.0;
  %858 = %847.0;
  %859 = @func_8089() /* ty=Tensor[(4, 15, 15), float32] */;
  %860 = multiply(%854, %855) /* ty=Tensor[(11, 2, 15), uint8] */;
  (%856, meta[relay.Constant][69] /* ty=Tensor[(324), int16] */, %857, %858, %859, %860)
}

def @func_5802() -> (Tensor[(4, 15, 15), float32], Tensor[(231), float32], Tensor[(4, 15, 15), float64]) {
  %861 = @func_2512() /* ty=Tensor[(4, 15, 15), float64] */;
  %862 = cast(%861, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
  %863 = @func_2927() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(1, 2912), bool], Tensor[(231), float32], Tensor[(40, 12), int8], Tensor[(4, 728), bool]) */;
  %864 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %865 = log(%862) /* ty=Tensor[(4, 15, 15), float32] */;
  %866 = %863.2;
  %867 = %864.1;
  (%865, %866, %867)
}

def @func_6802() -> (Tensor[(4, 15, 15), float32],) {
  %868 = @func_2576() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %869 = %868.0;
  (%869,)
}

def @func_6261() -> (Tensor[(4, 15, 15), float64],) {
  %870 = @func_6252() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
  %871 = %870.0;
  (%871,)
}

def @func_7835() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %872 = @func_6261() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %873 = @func_5191() /* ty=Tensor[(4, 15, 15), float64] */;
  %874 = %872.0;
  (%873, %874)
}

def @func_8089() -> Tensor[(4, 15, 15), float32] {
  %875 = @func_6802() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %875.0
}

def @func_8468(%var_8449: Tensor[(165), float64]) -> (Tensor[(4, 15, 15), float32], Tensor[(8, 364), bool], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(672), int32], Tensor[(4, 15, 15), float64]) {
  %876 = @func_1319() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %877 = cast(%var_8449, dtype="float64") /* ty=Tensor[(165), float64] */;
  %878 = cast(meta[relay.Constant][70] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %879 = cast(meta[relay.Constant][71] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %880 = cast(meta[relay.Constant][72] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %881 = reshape(%877, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float64] */;
  %882 = reshape(%878, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %883 = reshape(%879, newshape=[84, 1]) /* ty=Tensor[(84, 1), int32] */;
  %884 = reshape(%880, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %885 = @func_1124(%881, %882, %883, %884) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */;
  %886 = %876.0;
  %887 = %885.3;
  %888 = @func_4101() /* ty=Tensor[(4, 15, 15), float64] */;
  (%886, %887, %var_8449, meta[relay.Constant][70] /* ty=Tensor[(480), int8] */, meta[relay.Constant][71] /* ty=Tensor[(84), int32] */, meta[relay.Constant][72] /* ty=Tensor[(672), int32] */, %888)
}

def @func_5121() -> (Tensor[(4, 15, 15), float64],) {
  %889 = @func_2701() /* ty=Tensor[(4, 15, 15), float64] */;
  (%889,)
}

def @func_551(%var_539: Tensor[(10, 15, 12), uint32], %var_540: Tensor[(10, 15, 12), uint32]) -> (Tensor[(10, 15, 12), uint32],) {
  %890 = cast(%var_540, dtype="uint32") /* ty=Tensor[(10, 15, 12), uint32] */;
  %891 = shape_of(%var_539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(%var_539, dtype="uint32") /* ty=Tensor[(10, 15, 12), uint32] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %894 = bitwise_or(%892, %893) /* ty=Tensor[(10, 15, 12), uint32] */;
  (%894,)
}

def @func_5729(%var_5697: bool, %var_5698: Tensor[(6, 3, 9), bool], %var_5705: Tensor[(84), int32], %var_5720: Tensor[(2912), bool]) -> (Tensor[(6, 3, 9), bool], Tensor[(84, 1), int32], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(336, 2), float32], Tensor[(8, 16, 11), uint32], Tensor[(2912), bool]) {
  %895 = cast(%var_5697, dtype="bool") /* ty=bool */;
  %896 = cast(%var_5698, dtype="bool") /* ty=Tensor[(6, 3, 9), bool] */;
  %897 = cast(meta[relay.Constant][73] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
  %898 = cast(meta[relay.Constant][74] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %899 = cast(%var_5705, dtype="int32") /* ty=Tensor[(84), int32] */;
  %900 = cast(meta[relay.Constant][75] /* ty=Tensor[(336, 2), int32] */, dtype="int32") /* ty=Tensor[(336, 2), int32] */;
  %901 = reshape(%897, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float64] */;
  %902 = reshape(%898, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %903 = reshape(%899, newshape=[84, 1]) /* ty=Tensor[(84, 1), int32] */;
  %904 = reshape(%900, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %905 = @func_1124(%901, %902, %903, %904) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */;
  %906 = cast(meta[relay.Constant][75] /* ty=Tensor[(336, 2), int32] */, dtype="float32") /* ty=Tensor[(336, 2), float32] */;
  %907 = cast(meta[relay.Constant][74] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %908 = cast(meta[relay.Constant][74] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %909 = cast(%var_5720, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %910 = reshape(%907, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), int8] */;
  %911 = reshape(%908, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), int8] */;
  %912 = reshape(%909, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %913 = @func_981(%910, %911, %912) /* ty=(Tensor[(2, 15, 16), int8], Tensor[(8, 16, 11), uint32], Tensor[(1408), uint32], Tensor[(2912), int32]) */;
  %914 = logical_or(%895, %896) /* ty=Tensor[(6, 3, 9), bool] */;
  %915 = %905.7;
  %916 = rsqrt(%906) /* ty=Tensor[(336, 2), float32] */;
  %917 = %913.1;
  (%914, %915, meta[relay.Constant][73] /* ty=Tensor[(165), float64] */, meta[relay.Constant][74] /* ty=Tensor[(480), int8] */, %var_5705, %916, %917, %var_5720)
}

def @func_7737() -> (Tensor[(4, 15, 15), float32],) {
  %918 = @func_3282() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(104, 28), bool], Tensor[(2, 24), float32], Tensor[(2912), bool]) */;
  %919 = %918.0;
  (%919,)
}

def @func_9695(%var_9648: Tensor[(11, 6, 12), uint8], %var_9687: Tensor[(324), int16]) -> (Tensor[(11, 6, 12), bool], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(3, 12, 9), float64], Tensor[(324), int16]) {
  %920 = cast(meta[relay.Constant][76] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %921 = cast(%var_9648, dtype="bool") /* ty=Tensor[(11, 6, 12), bool] */;
  %922 = @func_4434() /* ty=(Tensor[(4, 5, 1), float32], Tensor[(4, 15, 15), float32]) */;
  %923 = @func_2446() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %924 = cast(%var_9687, dtype="int16") /* ty=Tensor[(324), int16] */;
  %925 = cast(%var_9687, dtype="int16") /* ty=Tensor[(324), int16] */;
  %926 = reshape(%924, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
  %927 = reshape(%925, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
  %928 = @func_4145(%926, %927) /* ty=(Tensor[(3, 12, 9), int16], float32, Tensor[(3, 12, 9), float64]) */;
  %929 = greater(%920, %921) /* ty=Tensor[(11, 6, 12), bool] */;
  %930 = %922.1;
  %931 = @func_9160() /* ty=Tensor[(4, 15, 15), float64] */;
  %932 = %923.1;
  %933 = %928.2;
  (%929, %930, %931, %932, %933, %var_9687)
}

def @func_7069() -> Tensor[(4, 15, 15), float64] {
  %934 = @func_4702() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool]) */;
  %934.0
}

def @func_3451(%var_3438: Tensor[(56), float64], %var_3440: Tensor[(168, 4), int32], %var_3442: Tensor[(2912), bool]) -> (Tensor[(4, 15, 15), float64], Tensor[(48), float32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(168, 4), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(6, 300), uint32]) {
  %935 = cast(%var_3438, dtype="float64") /* ty=Tensor[(56), float64] */;
  %936 = cast(meta[relay.Constant][77] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %937 = cast(%var_3440, dtype="int32") /* ty=Tensor[(168, 4), int32] */;
  %938 = cast(meta[relay.Constant][78] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %939 = cast(%var_3442, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %940 = cast(meta[relay.Constant][79] /* ty=Tensor[(6, 300), uint32] */, dtype="uint32") /* ty=Tensor[(6, 300), uint32] */;
  %941 = reshape(%935, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), float64] */;
  %942 = reshape(%936, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
  %943 = reshape(%937, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %944 = reshape(%938, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %945 = reshape(%939, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %946 = reshape(%940, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %947 = @func_2125(%941, %942, %943, %944, %945, %946) /* ty=(Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) */;
  %948 = @func_2265() /* ty=Tensor[(4, 15, 15), float64] */;
  %949 = %947.4;
  (%948, %949, %var_3438, meta[relay.Constant][77] /* ty=Tensor[(448), float64] */, %var_3440, meta[relay.Constant][78] /* ty=Tensor[(48), float32] */, %var_3442, meta[relay.Constant][79] /* ty=Tensor[(6, 300), uint32] */)
}

def @func_9268() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float32]) {
  %950 = @func_7737() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %951 = @func_7506() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %952 = %950.0;
  %953 = %951.0;
  (%952, %953)
}

def @func_2020(%var_2016: Tensor[(1800, 1), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800, 1), uint32], Tensor[(13, 16, 14), bool]) {
  %954 = cast(meta[relay.Constant][80] /* ty=Tensor[(352), uint8] */, dtype="uint8") /* ty=Tensor[(352), uint8] */;
  %955 = cast(%var_2016, dtype="uint32") /* ty=Tensor[(1800, 1), uint32] */;
  %956 = reshape(%954, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint8] */;
  %957 = reshape(%955, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %958 = @func_593(%956, %957) /* ty=(Tensor[(4, 11, 8), int16], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(2912), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(2912), bool]) */;
  %959 = %958.3;
  %960 = cast(%959, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %961 = reshape(%960, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), bool] */;
  %962 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
  %963 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
  %964 = @func_76(%961) /* ty=Tensor[(13, 16, 14), bool] */;
  (%962, %963, %959, meta[relay.Constant][80] /* ty=Tensor[(352), uint8] */, %var_2016, %964)
}

def @func_9472() -> Tensor[(4, 15, 15), float32] {
  %965 = @func_4918() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) */;
  %965.0
}

def @func_6655() -> Tensor[(4, 15, 15), float64] {
  @func_2265() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_2701() -> Tensor[(4, 15, 15), float64] {
  @func_2512() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_4414(%var_4404: Tensor[(3, 2, 10), int16]) -> (Tensor[(3, 2, 10), bool],) {
  %966 = cast(meta[relay.Constant][81] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %967 = cast(%var_4404, dtype="bool") /* ty=Tensor[(3, 2, 10), bool] */;
  %968 = greater_equal(%966, %967) /* ty=Tensor[(3, 2, 10), bool] */;
  (%968,)
}

def @func_6252() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) {
  %969 = @func_5977() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
  %970 = @func_5977() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
  %971 = %969.0;
  %972 = %970.1;
  (%971, %972)
}

def @func_9090() -> (Tensor[(4, 15, 15), float32],) {
  %973 = @func_1319() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %974 = %973.0;
  (%974,)
}

def @func_1915() -> Tensor[(4, 15, 15), float64] {
  %975 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %976 = %975.0;
  %977 = cast(%976, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  cos(%977) /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_7420() -> Tensor[(231), float32] {
  %978 = @func_5802() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(231), float32], Tensor[(4, 15, 15), float64]) */;
  %978.1
}

def @func_7483(%var_7451: Tensor[(9, 2, 12), bool], %var_7457: Tensor[(165), float64], %var_7477: Tensor[(324), int16]) -> (Tensor[(4, 15, 15), float32], Tensor[(9, 2, 12), float32], Tensor[(48), float32], Tensor[(165), float64], Tensor[(4, 15, 15), float64], Tensor[(?, 7, 12), float64], Tensor[(84), float64], Tensor[(9, 2, 12), int64], float32, Tensor[(324), int16]) {
  %979 = @func_5977() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
  %980 = @func_3042() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) */;
  %981 = %980.1;
  %982 = cast(%var_7451, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %983 = shape_of(%981, dtype="int32") /* ty=Tensor[(3), int32] */;
  %984 = cast(%981, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %985 = dyn.reshape(%982, %983, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %986 = cast(%var_7457, dtype="float64") /* ty=Tensor[(165), float64] */;
  %987 = reshape(%986, newshape=[11, 15]) /* ty=Tensor[(11, 15), float64] */;
  %988 = @func_5495(%987) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(48), float32], Tensor[(11, 15), float64], Tensor[(8, 84), int32]) */;
  %989 = @func_5121() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %990 = cast(meta[relay.Constant][82] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %991 = reshape(%990, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), float64] */;
  %992 = cast(%981, dtype="int64") /* ty=Tensor[(9, 2, 12), int64] */;
  %993 = shape_of(%var_7451, dtype="int32") /* ty=Tensor[(3), int32] */;
  %994 = cast(%var_7451, dtype="int64") /* ty=Tensor[(9, 2, 12), int64] */;
  %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %996 = cast(%var_7477, dtype="int16") /* ty=Tensor[(324), int16] */;
  %997 = cast(%var_7477, dtype="int16") /* ty=Tensor[(324), int16] */;
  %998 = reshape(%996, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
  %999 = reshape(%997, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
  %1000 = @func_4145(%998, %999) /* ty=(Tensor[(3, 12, 9), int16], float32, Tensor[(3, 12, 9), float64]) */;
  %1001 = %979.1;
  %1002 = power(%984, %985) /* ty=Tensor[(9, 2, 12), float32] */;
  %1003 = %988.1;
  %1004 = %989.0;
  %1005 = @func_2185(%991) /* ty=Tensor[(?, 7, 12), float64] */;
  %1006 = maximum(%994, %995) /* ty=Tensor[(9, 2, 12), int64] */;
  %1007 = %1000.1;
  (%1001, %1002, %1003, %var_7457, %1004, %1005, meta[relay.Constant][82] /* ty=Tensor[(84), float64] */, %1006, %1007, %var_7477)
}

def @func_9184() -> Tensor[(4, 15, 15), float64] {
  @func_3994() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_7506() -> (Tensor[(4, 15, 15), float32],) {
  %1008 = @func_1319() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %1009 = %1008.0;
  (%1009,)
}

def @func_593(%var_569: Tensor[(4, 11, 8), uint8], %var_581: Tensor[(1800), uint32]) -> (Tensor[(4, 11, 8), int16], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(2912), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(2912), bool]) {
  %1010 = cast(%var_569, dtype="uint8") /* ty=Tensor[(4, 11, 8), uint8] */;
  %1011 = shape_of(meta[relay.Constant][83] /* ty=Tensor[(4, 11, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1012 = cast(meta[relay.Constant][83] /* ty=Tensor[(4, 11, 8), uint8] */, dtype="uint8") /* ty=Tensor[(4, 11, 8), uint8] */;
  %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1014 = minimum(%1012, %1013) /* ty=Tensor[(4, 11, 8), uint8] */;
  %1015 = cast(%1014, dtype="int16") /* ty=Tensor[(4, 11, 8), int16] */;
  %1016 = shape_of(%var_569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1017 = cast(%var_569, dtype="int16") /* ty=Tensor[(4, 11, 8), int16] */;
  %1018 = dyn.reshape(%1015, %1016, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1019 = cast(%var_581, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %1020 = cast(%var_581, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %1021 = reshape(%1019, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %1022 = reshape(%1020, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %1023 = @func_551(%1021, %1022) /* ty=(Tensor[(10, 15, 12), uint32],) */;
  %1024 = cast(meta[relay.Constant][84] /* ty=Tensor[(1408), uint32] */, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
  %1025 = cast(meta[relay.Constant][85] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %1026 = reshape(%1024, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint32] */;
  %1027 = reshape(%1025, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %1028 = @func_336(%1026, %1027) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */;
  %1029 = cast(meta[relay.Constant][84] /* ty=Tensor[(1408), uint32] */, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
  %1030 = %1028.2;
  %1031 = cast(%1030, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %1032 = reshape(%1029, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint32] */;
  %1033 = reshape(%1031, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %1034 = @func_336(%1032, %1033) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */;
  %1035 = left_shift(%1017, %1018) /* ty=Tensor[(4, 11, 8), int16] */;
  %1036 = %1023.0;
  %1037 = %1034.2;
  (%1035, %1036, %var_581, %1030, meta[relay.Constant][84] /* ty=Tensor[(1408), uint32] */, meta[relay.Constant][85] /* ty=Tensor[(2912), bool] */, %1037)
}

def @func_9642() -> Tensor[(4, 15, 15), float64] {
  @func_7069() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_7880(%var_7870: Tensor[(60), int16]) -> (Tensor[(4, 15, 15), float32], Tensor[(3, 2, 10), bool], Tensor[(60), int16], Tensor[(8, 7, 12), bool], Tensor[(84), int32], Tensor[(672), int32]) {
  %1038 = cast(%var_7870, dtype="int16") /* ty=Tensor[(60), int16] */;
  %1039 = reshape(%1038, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), int16] */;
  %1040 = @func_4414(%1039) /* ty=(Tensor[(3, 2, 10), bool],) */;
  %1041 = cast(meta[relay.Constant][86] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %1042 = cast(meta[relay.Constant][87] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %1043 = reshape(%1041, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), int32] */;
  %1044 = reshape(%1042, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %1045 = @func_1040(%1043, %1044) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */;
  %1046 = @func_1864() /* ty=Tensor[(4, 15, 15), float32] */;
  %1047 = %1040.0;
  %1048 = %1045.1;
  (%1046, %1047, %var_7870, %1048, meta[relay.Constant][86] /* ty=Tensor[(84), int32] */, meta[relay.Constant][87] /* ty=Tensor[(672), int32] */)
}

def @func_2512() -> Tensor[(4, 15, 15), float64] {
  %1049 = @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %1049.0
}

def @func_9580(%var_9530: Tensor[(324), int16]) -> (Tensor[(4, 15, 15), float32], Tensor[(3, 12, 9), float64], Tensor[(2912), float64], Tensor[(324), float32], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float32]) {
  %1050 = @func_5802() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(231), float32], Tensor[(4, 15, 15), float64]) */;
  %1051 = cast(%var_9530, dtype="int16") /* ty=Tensor[(324), int16] */;
  %1052 = cast(%var_9530, dtype="int16") /* ty=Tensor[(324), int16] */;
  %1053 = reshape(%1051, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
  %1054 = reshape(%1052, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
  %1055 = @func_4145(%1053, %1054) /* ty=(Tensor[(3, 12, 9), int16], float32, Tensor[(3, 12, 9), float64]) */;
  %1056 = @func_6382() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(480), int8], Tensor[(231), float32], Tensor[(480), int8], Tensor[(2912), float64]) */;
  %1057 = cast(%var_9530, dtype="float32") /* ty=Tensor[(324), float32] */;
  %1058 = @func_9090() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %1059 = @func_9519() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
  %1060 = %1050.0;
  %1061 = %1055.2;
  %1062 = %1056.4;
  %1063 = rsqrt(%1057) /* ty=Tensor[(324), float32] */;
  %1064 = %1058.0;
  %1065 = %1059.2;
  (%1060, %1061, %1062, %1063, %1064, %1065)
}

def @func_2724() -> Tensor[(4, 15, 15), float64] {
  @func_2512() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_2849() -> (Tensor[(4, 15, 15), float32],) {
  %1066 = @func_2446() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %1067 = %1066.3;
  %1068 = cast(%1067, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
  %1069 = atanh(%1068) /* ty=Tensor[(4, 15, 15), float32] */;
  (%1069,)
}

def @func_2346(%var_2316: Tensor[(10, 7, 5), float32], %var_2331: Tensor[(84), int32]) -> (Tensor[(10, 7, 5), float32], Tensor[(8, 7, 12), int32], Tensor[(84), int32], Tensor[(672), int32]) {
  %1070 = cast(%var_2316, dtype="float32") /* ty=Tensor[(10, 7, 5), float32] */;
  %1071 = cast(%var_2331, dtype="int32") /* ty=Tensor[(84), int32] */;
  %1072 = cast(meta[relay.Constant][88] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %1073 = reshape(%1071, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), int32] */;
  %1074 = reshape(%1072, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %1075 = @func_1040(%1073, %1074) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */;
  %1076 = erf(%1070) /* ty=Tensor[(10, 7, 5), float32] */;
  %1077 = %1075.0;
  (%1076, %1077, %var_2331, meta[relay.Constant][88] /* ty=Tensor[(672), int32] */)
}

def @func_7110() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) {
  %1078 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %1079 = %1078.0;
  %1080 = cast(%1079, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %1081 = reshape(%1080, newshape=[4, 15, 15]) /* ty=Tensor[(4, 15, 15), float64] */;
  %1082 = @func_3336(%1081) /* ty=(Tensor[(4, 15, 15), bool], Tensor[(4, 15, 15), float64]) */;
  %1083 = %1082.1;
  (%1079, %1083)
}

def @func_5848(%var_5833: Tensor[(13, 16, 11), uint32]) -> (Tensor[(13, 16, 11), bool],) {
  %1084 = cast(meta[relay.Constant][89] /* ty=Tensor[(13, 16, 11), uint32] */, dtype="bool") /* ty=Tensor[(13, 16, 11), bool] */;
  %1085 = shape_of(%var_5833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1086 = cast(%var_5833, dtype="bool") /* ty=Tensor[(13, 16, 11), bool] */;
  %1087 = dyn.reshape(%1084, %1085, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1088 = not_equal(%1086, %1087) /* ty=Tensor[(13, 16, 11), bool] */;
  (%1088,)
}

def @func_9029() -> Tensor[(4, 15, 15), float64] {
  @func_1915() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_3145(%var_3138: Tensor[(56), float64], %var_3139: Tensor[(2, 224), float64], %var_3140: Tensor[(672), int32]) -> (Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(56), float64], Tensor[(2, 224), float64], Tensor[(672), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(450, 4), uint32]) {
  %1089 = @func_2636() /* ty=(Tensor[(8, 2), float32], Tensor[(4, 15, 15), float64]) */;
  %1090 = cast(%var_3138, dtype="float64") /* ty=Tensor[(56), float64] */;
  %1091 = cast(%var_3139, dtype="float64") /* ty=Tensor[(2, 224), float64] */;
  %1092 = cast(%var_3140, dtype="int32") /* ty=Tensor[(672), int32] */;
  %1093 = cast(meta[relay.Constant][90] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1094 = cast(meta[relay.Constant][91] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %1095 = cast(meta[relay.Constant][92] /* ty=Tensor[(450, 4), uint32] */, dtype="uint32") /* ty=Tensor[(450, 4), uint32] */;
  %1096 = reshape(%1090, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), float64] */;
  %1097 = reshape(%1091, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
  %1098 = reshape(%1092, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %1099 = reshape(%1093, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %1100 = reshape(%1094, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %1101 = reshape(%1095, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %1102 = @func_2125(%1096, %1097, %1098, %1099, %1100, %1101) /* ty=(Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) */;
  %1103 = %1089.1;
  %1104 = %1102.5;
  (%1103, %1104, %var_3138, %var_3139, %var_3140, meta[relay.Constant][90] /* ty=Tensor[(48), float32] */, meta[relay.Constant][91] /* ty=Tensor[(2912), bool] */, meta[relay.Constant][92] /* ty=Tensor[(450, 4), uint32] */)
}

def @func_2185(%var_2166: Tensor[(1, 7, 12), float64]) -> Tensor[(?, 7, 12), float64] {
  %1105 = cast(%var_2166, dtype="float64") /* ty=Tensor[(1, 7, 12), float64] */;
  %1106 = tan(%1105) /* ty=Tensor[(1, 7, 12), float64] */;
  %1107 = cast(%var_2166, dtype="float64") /* ty=Tensor[(1, 7, 12), float64] */;
  %1108 = shape_of(%1106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1109 = cast(%1106, dtype="float64") /* ty=Tensor[(1, 7, 12), float64] */;
  %1110 = dyn.reshape(%1107, %1108, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%1109, %1110) /* ty=Tensor[(?, 7, 12), float64] */
}

def @func_4101() -> Tensor[(4, 15, 15), float64] {
  %1111 = @func_2724() /* ty=Tensor[(4, 15, 15), float64] */;
  %1112 = cast(%1111, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  rsqrt(%1112) /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_6671() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %1113 = @func_1991() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %1114 = @func_5924() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 5, 1), float32]) */;
  %1115 = %1113.0;
  %1116 = %1114.0;
  (%1115, %1116)
}

def @func_1684(%var_1663: Tensor[(3, 11, 7), float32], %var_1670: Tensor[(8, 60), int8], %var_1671: Tensor[(1, 2912), bool]) -> (Tensor[(3, 11, 7), bool], Tensor[(8, 16, 11), uint32], Tensor[(8, 60), int8], Tensor[(1, 2912), bool]) {
  %1117 = cast(meta[relay.Constant][93] /* ty=Tensor[(3, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 7), float64] */;
  %1118 = erf(%1117) /* ty=Tensor[(3, 11, 7), float64] */;
  %1119 = cast(%1118, dtype="float32") /* ty=Tensor[(3, 11, 7), float32] */;
  %1120 = shape_of(meta[relay.Constant][93] /* ty=Tensor[(3, 11, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1121 = cast(meta[relay.Constant][93] /* ty=Tensor[(3, 11, 7), float64] */, dtype="float32") /* ty=Tensor[(3, 11, 7), float32] */;
  %1122 = dyn.reshape(%1119, %1120, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1123 = multiply(%1121, %1122) /* ty=Tensor[(3, 11, 7), float32] */;
  %1124 = cast(%var_1663, dtype="bool") /* ty=Tensor[(3, 11, 7), bool] */;
  %1125 = shape_of(%1123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1126 = cast(%1123, dtype="bool") /* ty=Tensor[(3, 11, 7), bool] */;
  %1127 = dyn.reshape(%1124, %1125, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1128 = cast(%var_1670, dtype="int8") /* ty=Tensor[(8, 60), int8] */;
  %1129 = cast(%var_1670, dtype="int8") /* ty=Tensor[(8, 60), int8] */;
  %1130 = cast(%var_1671, dtype="bool") /* ty=Tensor[(1, 2912), bool] */;
  %1131 = reshape(%1128, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), int8] */;
  %1132 = reshape(%1129, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), int8] */;
  %1133 = reshape(%1130, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %1134 = @func_981(%1131, %1132, %1133) /* ty=(Tensor[(2, 15, 16), int8], Tensor[(8, 16, 11), uint32], Tensor[(1408), uint32], Tensor[(2912), int32]) */;
  %1135 = not_equal(%1126, %1127) /* ty=Tensor[(3, 11, 7), bool] */;
  %1136 = %1134.1;
  (%1135, %1136, %var_1670, %var_1671)
}

def @func_5438() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float32], Tensor[(165), float64], Tensor[(84), int32], Tensor[(672), int32]) {
  %1137 = @func_3282() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(104, 28), bool], Tensor[(2, 24), float32], Tensor[(2912), bool]) */;
  %1138 = cast(meta[relay.Constant][94] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
  %1139 = cast(meta[relay.Constant][95] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %1140 = cast(meta[relay.Constant][96] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %1141 = reshape(%1138, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %1142 = reshape(%1139, newshape=[84]) /* ty=Tensor[(84), int32] */;
  %1143 = reshape(%1140, newshape=[1, 672]) /* ty=Tensor[(1, 672), int32] */;
  %1144 = @func_3087(%1141, %1142, %1143) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(8, 7, 12), int32], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(1, 672), int32], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) */;
  %1145 = %1137.3;
  %1146 = %1144.0;
  (%1145, %1146, meta[relay.Constant][94] /* ty=Tensor[(165), float64] */, meta[relay.Constant][95] /* ty=Tensor[(84), int32] */, meta[relay.Constant][96] /* ty=Tensor[(672), int32] */)
}

def @func_3042() -> (Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) {
  %1147 = cast(-9.84033f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1148 = reshape(%1147, newshape=[]) /* ty=float32 */;
  %1149 = @func_1915() /* ty=Tensor[(4, 15, 15), float64] */;
  %1150 = @func_2936(%1148) /* ty=Tensor[(9, 2, 12), bool] */;
  (%1149, %1150, -9.84033f /* ty=float32 */)
}

def @func_7076() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %1151 = @func_3480() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %1152 = @func_1991() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %1153 = %1151.1;
  %1154 = %1152.1;
  (%1153, %1154)
}

def @func_6948() -> (Tensor[(4, 15, 15), float64],) {
  %1155 = @func_5977() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
  %1156 = %1155.0;
  (%1156,)
}

def @func_3282() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(104, 28), bool], Tensor[(2, 24), float32], Tensor[(2912), bool]) {
  %1157 = @func_2849() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %1158 = @func_2446() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %1159 = @func_2636() /* ty=(Tensor[(8, 2), float32], Tensor[(4, 15, 15), float64]) */;
  %1160 = @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %1161 = cast(meta[relay.Constant][97] /* ty=Tensor[(2, 24), float32] */, dtype="float32") /* ty=Tensor[(2, 24), float32] */;
  %1162 = cast(meta[relay.Constant][98] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %1163 = reshape(%1161, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
  %1164 = reshape(%1162, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
  %1165 = @func_471(%1163, %1164) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
  %1166 = %1157.0;
  %1167 = %1158.1;
  %1168 = %1159.1;
  %1169 = %1160.0;
  %1170 = %1165.2;
  (%1166, %1167, %1168, %1169, %1170, meta[relay.Constant][97] /* ty=Tensor[(2, 24), float32] */, meta[relay.Constant][98] /* ty=Tensor[(2912), bool] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6950() -> (Tensor[(4, 15, 15), float64],) {
  @func_6948() /* ty=(Tensor[(4, 15, 15), float64],) */
}

def @func_8926(%var_8906: Tensor[(2, 8, 10), float64], %var_8907: Tensor[(2, 8, 10), float64]) -> (Tensor[(2, 8, 10), float64], Tensor[(13, 16, 14), bool], Tensor[(8, 364), bool]) {
  %0 = cast(%var_8907, dtype="float64") /* ty=Tensor[(2, 8, 10), float64] */;
  %1 = shape_of(%var_8906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_8906, dtype="float64") /* ty=Tensor[(2, 8, 10), float64] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 364), bool] */, dtype="bool") /* ty=Tensor[(8, 364), bool] */;
  %5 = reshape(%4, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), bool] */;
  %6 = divide(%2, %3) /* ty=Tensor[(2, 8, 10), float64] */;
  %7 = @func_76(%5) /* ty=Tensor[(13, 16, 14), bool] */;
  (%6, %7, meta[relay.Constant][0] /* ty=Tensor[(8, 364), bool] */)
}

def @func_2850() -> (Tensor[(4, 15, 15), float32],) {
  %12 = fn () -> (Tensor[(4, 15, 15), float32],) {
    %8 = @func_2446() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %9 = %8.3;
    %10 = cast(%9, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
    %11 = atanh(%10) /* ty=Tensor[(4, 15, 15), float32] */;
    (%11,)
  };
  %12() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_2280() -> Tensor[(4, 15, 15), float32] {
  @func_2278() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_6538(%var_6537: Tensor[(4, 8, 1), uint8]) -> (Tensor[(4, 8, 3), uint8], Tensor[(11, 5, 6), float64], Tensor[(330), float64]) {
  %19 = fn (%var_6525: Tensor[(4, 8, 1), uint8]) -> (Tensor[(4, 8, 3), uint8], Tensor[(11, 5, 6), float64], Tensor[(330), float64]) {
    %13 = cast(%var_6525, dtype="uint8") /* ty=Tensor[(4, 8, 1), uint8] */;
    %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 8, 3), uint8] */, dtype="uint8") /* ty=Tensor[(4, 8, 3), uint8] */;
    %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
    %16 = reshape(%15, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
    %17 = add(%13, %14) /* ty=Tensor[(4, 8, 3), uint8] */;
    %18 = @func_5370(%16) /* ty=Tensor[(11, 5, 6), float64] */;
    (%17, %18, meta[relay.Constant][2] /* ty=Tensor[(330), float64] */)
  };
  %19(%var_6537) /* ty=(Tensor[(4, 8, 3), uint8], Tensor[(11, 5, 6), float64], Tensor[(330), float64]) */
}

def @func_1811() -> (Tensor[(4, 15, 15), float32],) {
  %20 = @func_1319() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %21 = %20.0;
  (%21,)
}

def @func_2402() -> (Tensor[(4, 15, 15), float64],) {
  @func_2400() /* ty=(Tensor[(4, 15, 15), float64],) */
}

def @func_4918() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) {
  %22 = @func_2446() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %23 = @func_1864() /* ty=Tensor[(4, 15, 15), float32] */;
  %24 = %22.1;
  (%23, %24)
}

def @func_4145(%var_4118: Tensor[(3, 12, 9), int16], %var_4119: Tensor[(3, 12, 9), int16]) -> (Tensor[(3, 12, 9), int16], float32, Tensor[(3, 12, 9), float64]) {
  %25 = cast(%var_4119, dtype="int16") /* ty=Tensor[(3, 12, 9), int16] */;
  %26 = shape_of(%var_4118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%var_4118, dtype="int16") /* ty=Tensor[(3, 12, 9), int16] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %29 = @func_3042() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) */;
  %30 = cast(%var_4118, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
  %31 = rsqrt(%30) /* ty=Tensor[(3, 12, 9), float64] */;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
  %33 = left_shift(%27, %28) /* ty=Tensor[(3, 12, 9), int16] */;
  %34 = %29.2;
  %35 = asinh(%32) /* ty=Tensor[(3, 12, 9), float64] */;
  (%33, %34, %35)
}

def @func_5014() -> Tensor[(4, 15, 15), float32] {
  %36 = @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %36.0
}

def @func_6211() -> Tensor[(4, 15, 15), float64] {
  @func_6209() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_2133(%var_2127: Tensor[(7, 8, 1), float64], %var_2128: Tensor[(7, 8, 8), float64], %var_2129: Tensor[(672), int32], %var_2130: Tensor[(48), float32], %var_2131: Tensor[(2912), bool], %var_2132: Tensor[(1800), uint32]) -> (Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) {
  @func_2125(%var_2127, %var_2128, %var_2129, %var_2130, %var_2131, %var_2132) /* ty=(Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) */
}

def @func_7835() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %37 = @func_6261() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %38 = @func_5191() /* ty=Tensor[(4, 15, 15), float64] */;
  %39 = %37.0;
  (%38, %39)
}

def @func_3451(%var_3438: Tensor[(56), float64], %var_3440: Tensor[(168, 4), int32], %var_3442: Tensor[(2912), bool]) -> (Tensor[(4, 15, 15), float64], Tensor[(48), float32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(168, 4), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(6, 300), uint32]) {
  %40 = cast(%var_3438, dtype="float64") /* ty=Tensor[(56), float64] */;
  %41 = cast(meta[relay.Constant][3] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %42 = cast(%var_3440, dtype="int32") /* ty=Tensor[(168, 4), int32] */;
  %43 = cast(meta[relay.Constant][4] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %44 = cast(%var_3442, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %45 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 300), uint32] */, dtype="uint32") /* ty=Tensor[(6, 300), uint32] */;
  %46 = reshape(%40, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), float64] */;
  %47 = reshape(%41, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
  %48 = reshape(%42, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %49 = reshape(%43, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %50 = reshape(%44, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %51 = reshape(%45, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %52 = @func_2125(%46, %47, %48, %49, %50, %51) /* ty=(Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) */;
  %53 = @func_2265() /* ty=Tensor[(4, 15, 15), float64] */;
  %54 = %52.4;
  (%53, %54, %var_3438, meta[relay.Constant][3] /* ty=Tensor[(448), float64] */, %var_3440, meta[relay.Constant][4] /* ty=Tensor[(48), float32] */, %var_3442, meta[relay.Constant][5] /* ty=Tensor[(6, 300), uint32] */)
}

def @func_9268() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float32]) {
  %55 = @func_7737() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %56 = @func_7506() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %57 = %55.0;
  %58 = %56.0;
  (%57, %58)
}

def @func_7183() -> (Tensor[(4, 15, 15), float64],) {
  %61 = fn () -> (Tensor[(4, 15, 15), float64],) {
    %59 = @func_7076() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %60 = %59.1;
    (%60,)
  };
  %61() /* ty=(Tensor[(4, 15, 15), float64],) */
}

def @func_554(%var_552: Tensor[(10, 15, 12), uint32], %var_553: Tensor[(10, 15, 12), uint32]) -> (Tensor[(10, 15, 12), uint32],) {
  %67 = fn (%var_539: Tensor[(10, 15, 12), uint32], %var_540: Tensor[(10, 15, 12), uint32]) -> (Tensor[(10, 15, 12), uint32],) {
    %62 = cast(%var_540, dtype="uint32") /* ty=Tensor[(10, 15, 12), uint32] */;
    %63 = shape_of(%var_539, dtype="int32") /* ty=Tensor[(3), int32] */;
    %64 = cast(%var_539, dtype="uint32") /* ty=Tensor[(10, 15, 12), uint32] */;
    %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %66 = bitwise_or(%64, %65) /* ty=Tensor[(10, 15, 12), uint32] */;
    (%66,)
  };
  %67(%var_552, %var_553) /* ty=(Tensor[(10, 15, 12), uint32],) */
}

def @func_5439() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float32], Tensor[(165), float64], Tensor[(84), int32], Tensor[(672), int32]) {
  %78 = fn () -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float32], Tensor[(165), float64], Tensor[(84), int32], Tensor[(672), int32]) {
    %68 = @func_3282() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(104, 28), bool], Tensor[(2, 24), float32], Tensor[(2912), bool]) */;
    %69 = cast(meta[relay.Constant][6] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
    %70 = cast(meta[relay.Constant][7] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
    %71 = cast(meta[relay.Constant][8] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
    %72 = reshape(%69, newshape=[165]) /* ty=Tensor[(165), float64] */;
    %73 = reshape(%70, newshape=[84]) /* ty=Tensor[(84), int32] */;
    %74 = reshape(%71, newshape=[1, 672]) /* ty=Tensor[(1, 672), int32] */;
    %75 = @func_3087(%72, %73, %74) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(8, 7, 12), int32], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(1, 672), int32], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) */;
    %76 = %68.3;
    %77 = %75.0;
    (%76, %77, meta[relay.Constant][6] /* ty=Tensor[(165), float64] */, meta[relay.Constant][7] /* ty=Tensor[(84), int32] */, meta[relay.Constant][8] /* ty=Tensor[(672), int32] */)
  };
  %78() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float32], Tensor[(165), float64], Tensor[(84), int32], Tensor[(672), int32]) */
}

def @func_3889() -> Tensor[(4, 15, 15), float32] {
  %79 = fn () -> Tensor[(4, 15, 15), float32] {
    @func_2278() /* ty=Tensor[(4, 15, 15), float32] */
  };
  %79() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_6302() -> Tensor[(4, 15, 15), float32] {
  %81 = fn () -> Tensor[(4, 15, 15), float32] {
    %80 = @func_5645() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %80.0
  };
  %81() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_9473() -> Tensor[(4, 15, 15), float32] {
  %83 = fn () -> Tensor[(4, 15, 15), float32] {
    %82 = @func_4918() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) */;
    %82.0
  };
  %83() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_7685() -> Tensor[(4, 15, 15), float64] {
  %85 = fn () -> Tensor[(4, 15, 15), float64] {
    %84 = @func_5121() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %84.0
  };
  %85() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_3710(%var_3707: Tensor[(231), float32], %var_3708: Tensor[(480), int8], %var_3709: Tensor[(104, 28), float64]) -> (Tensor[(4, 15, 15), float64], Tensor[(8, 16, 11), uint32], Tensor[(231), float32], Tensor[(480), int8], Tensor[(4, 15, 15), float32], Tensor[(104, 28), uint64]) {
  %112 = fn (%var_3666: Tensor[(231), float32], %var_3667: Tensor[(480), int8], %var_3697: Tensor[(104, 28), float64]) -> (Tensor[(4, 15, 15), float64], Tensor[(8, 16, 11), uint32], Tensor[(231), float32], Tensor[(480), int8], Tensor[(4, 15, 15), float32], Tensor[(104, 28), uint64]) {
    %86 = cast(%var_3666, dtype="float32") /* ty=Tensor[(231), float32] */;
    %87 = cast(%var_3667, dtype="int8") /* ty=Tensor[(480), int8] */;
    %88 = cast(meta[relay.Constant][9] /* ty=Tensor[(104, 28), bool] */, dtype="bool") /* ty=Tensor[(104, 28), bool] */;
    %89 = reshape(%86, newshape=[3, 11, 7]) /* ty=Tensor[(3, 11, 7), float32] */;
    %90 = reshape(%87, newshape=[8, 60]) /* ty=Tensor[(8, 60), int8] */;
    %91 = reshape(%88, newshape=[1, 2912]) /* ty=Tensor[(1, 2912), bool] */;
    %92 = @func_1684(%89, %90, %91) /* ty=(Tensor[(3, 11, 7), bool], Tensor[(8, 16, 11), uint32], Tensor[(8, 60), int8], Tensor[(1, 2912), bool]) */;
    %93 = @func_2701() /* ty=Tensor[(4, 15, 15), float64] */;
    %94 = cast(%93, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
    %95 = cast(meta[relay.Constant][9] /* ty=Tensor[(104, 28), bool] */, dtype="float32") /* ty=Tensor[(104, 28), float32] */;
    %96 = sqrt(%95) /* ty=Tensor[(104, 28), float32] */;
    %97 = cast(%96, dtype="float64") /* ty=Tensor[(104, 28), float64] */;
    %98 = rsqrt(%97) /* ty=Tensor[(104, 28), float64] */;
    %99 = cast(%var_3697, dtype="uint32") /* ty=Tensor[(104, 28), uint32] */;
    %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(2), int32] */;
    %101 = cast(%98, dtype="uint32") /* ty=Tensor[(104, 28), uint32] */;
    %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %103 = right_shift(%101, %102) /* ty=Tensor[(104, 28), uint32] */;
    %104 = cast(%96, dtype="uint64") /* ty=Tensor[(104, 28), uint64] */;
    %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(2), int32] */;
    %106 = cast(%103, dtype="uint64") /* ty=Tensor[(104, 28), uint64] */;
    %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %108 = @func_2512() /* ty=Tensor[(4, 15, 15), float64] */;
    %109 = %92.1;
    %110 = sqrt(%94) /* ty=Tensor[(4, 15, 15), float32] */;
    %111 = bitwise_and(%106, %107) /* ty=Tensor[(104, 28), uint64] */;
    (%108, %109, %var_3666, %var_3667, %110, %111)
  };
  %112(%var_3707, %var_3708, %var_3709) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 16, 11), uint32], Tensor[(231), float32], Tensor[(480), int8], Tensor[(4, 15, 15), float32], Tensor[(104, 28), uint64]) */
}

def @func_3150(%var_3147: Tensor[(56), float64], %var_3148: Tensor[(2, 224), float64], %var_3149: Tensor[(672), int32]) -> (Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(56), float64], Tensor[(2, 224), float64], Tensor[(672), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(450, 4), uint32]) {
  @func_3145(%var_3147, %var_3148, %var_3149) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(56), float64], Tensor[(2, 224), float64], Tensor[(672), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(450, 4), uint32]) */
}

def @func_5851(%var_5849: Tensor[(13, 16, 11), uint32]) -> (Tensor[(13, 16, 11), bool],) {
  @func_5848(%var_5849) /* ty=(Tensor[(13, 16, 11), bool],) */
}

def @func_7565(%var_7562: Tensor[(1, 1, 9), uint64], %var_7563: Tensor[(15, 3, 9), uint64], %var_7564: Tensor[(2, 1, 9), float32]) -> (Tensor[(15, 3, 9), uint32], Tensor[(18, 100), bool], Tensor[(2, 1, 9), float32]) {
  @func_7560(%var_7562, %var_7563, %var_7564) /* ty=(Tensor[(15, 3, 9), uint32], Tensor[(18, 100), bool], Tensor[(2, 1, 9), float32]) */
}

def @func_8076() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 5, 1), float64]) {
  %119 = fn () -> (Tensor[(4, 15, 15), float64], Tensor[(4, 5, 1), float64]) {
    %113 = @func_2783() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %114 = @func_5924() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 5, 1), float32]) */;
    %115 = %114.2;
    %116 = cast(%115, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
    %117 = %113.1;
    %118 = sinh(%116) /* ty=Tensor[(4, 5, 1), float64] */;
    (%117, %118)
  };
  %119() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 5, 1), float64]) */
}

def @func_5495(%var_5477: Tensor[(11, 15), float64]) -> (Tensor[(4, 15, 15), float64], Tensor[(48), float32], Tensor[(11, 15), float64], Tensor[(8, 84), int32]) {
  %120 = @func_1510() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %121 = cast(%var_5477, dtype="float64") /* ty=Tensor[(11, 15), float64] */;
  %122 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 84), int32] */, dtype="int32") /* ty=Tensor[(8, 84), int32] */;
  %123 = reshape(%121, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %124 = reshape(%122, newshape=[336, 2]) /* ty=Tensor[(336, 2), int32] */;
  %125 = @func_4617(%123, %124) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(40, 12), int8], Tensor[(8, 364), bool], Tensor[(165), float64], Tensor[(84), int32], Tensor[(336, 2), int32], Tensor[(104, 28), bool], Tensor[(48), float32]) */;
  %126 = %120.0;
  %127 = %125.7;
  (%126, %127, %var_5477, meta[relay.Constant][10] /* ty=Tensor[(8, 84), int32] */)
}

def @func_1130(%var_1126: Tensor[(11, 5, 3), float64], %var_1127: Tensor[(480), int8], %var_1128: Tensor[(84, 1), int32], %var_1129: Tensor[(672), int32]) -> (Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) {
  @func_1124(%var_1126, %var_1127, %var_1128, %var_1129) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */
}

def @func_5979() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) {
  @func_5977() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */
}

def @func_2400() -> (Tensor[(4, 15, 15), float64],) {
  %128 = @func_1915() /* ty=Tensor[(4, 15, 15), float64] */;
  (%128,)
}

def @func_7421() -> Tensor[(231), float32] {
  %130 = fn () -> Tensor[(231), float32] {
    %129 = @func_5802() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(231), float32], Tensor[(4, 15, 15), float64]) */;
    %129.1
  };
  %130() /* ty=Tensor[(231), float32] */
}

def @func_9162() -> Tensor[(4, 15, 15), float64] {
  @func_9160() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_8291(%var_8289: Tensor[(108), float64], %var_8290: Tensor[(672), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(3, 6, 6), float64], Tensor[(108), float64], Tensor[(672), int32], Tensor[(84), int32], Tensor[(672), int32]) {
  @func_8287(%var_8289, %var_8290) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(3, 6, 6), float64], Tensor[(108), float64], Tensor[(672), int32], Tensor[(84), int32], Tensor[(672), int32]) */
}

def @func_7413(%var_7397: Tensor[(84), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(84), int32], Tensor[(84), int32], Tensor[(672), int32], Tensor[(8, 7, 12), int32], Tensor[(1, 165), float64], Tensor[(2, 240), int8]) {
  %131 = @func_2849() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %132 = cast(%var_7397, dtype="int32") /* ty=Tensor[(84), int32] */;
  %133 = cast(meta[relay.Constant][11] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %134 = reshape(%132, newshape=[84]) /* ty=Tensor[(84), int32] */;
  %135 = reshape(%133, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %136 = @func_4875(%134, %135) /* ty=(Tensor[(9, 2, 12), bool], Tensor[(400), int64], Tensor[(33, 5), float64], Tensor[(84), int32], Tensor[(672), int32]) */;
  %137 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 165), float64] */, dtype="float64") /* ty=Tensor[(1, 165), float64] */;
  %138 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 240), int8] */, dtype="int8") /* ty=Tensor[(2, 240), int8] */;
  %139 = %136.3;
  %140 = cast(%139, dtype="int32") /* ty=Tensor[(84), int32] */;
  %141 = cast(meta[relay.Constant][11] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %142 = reshape(%137, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float64] */;
  %143 = reshape(%138, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %144 = reshape(%140, newshape=[84, 1]) /* ty=Tensor[(84, 1), int32] */;
  %145 = reshape(%141, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %146 = @func_1124(%142, %143, %144, %145) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */;
  %147 = %131.0;
  %148 = %146.6;
  (%147, %139, %var_7397, meta[relay.Constant][11] /* ty=Tensor[(672), int32] */, %148, meta[relay.Constant][12] /* ty=Tensor[(1, 165), float64] */, meta[relay.Constant][13] /* ty=Tensor[(2, 240), int8] */)
}

def @func_7071() -> Tensor[(4, 15, 15), float64] {
  @func_7069() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_5122() -> (Tensor[(4, 15, 15), float64],) {
  %150 = fn () -> (Tensor[(4, 15, 15), float64],) {
    %149 = @func_2701() /* ty=Tensor[(4, 15, 15), float64] */;
    (%149,)
  };
  %150() /* ty=(Tensor[(4, 15, 15), float64],) */
}

def @func_9147(%var_9142: Tensor[(3, 3, 15), float32]) -> Tensor[(3, 3, 15), float32] {
  %151 = cast(%var_9142, dtype="float32") /* ty=Tensor[(3, 3, 15), float32] */;
  acosh(%151) /* ty=Tensor[(3, 3, 15), float32] */
}

def @func_5372(%var_5371: Tensor[(11, 5, 6), float64]) -> Tensor[(11, 5, 6), float64] {
  %153 = fn (%var_5334: Tensor[(11, 5, 6), float64]) -> Tensor[(11, 5, 6), float64] {
    %152 = cast(%var_5334, dtype="float64") /* ty=Tensor[(11, 5, 6), float64] */;
    cosh(%152) /* ty=Tensor[(11, 5, 6), float64] */
  };
  %153(%var_5371) /* ty=Tensor[(11, 5, 6), float64] */
}

def @func_5803() -> (Tensor[(4, 15, 15), float32], Tensor[(231), float32], Tensor[(4, 15, 15), float64]) {
  %161 = fn () -> (Tensor[(4, 15, 15), float32], Tensor[(231), float32], Tensor[(4, 15, 15), float64]) {
    %154 = @func_2512() /* ty=Tensor[(4, 15, 15), float64] */;
    %155 = cast(%154, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
    %156 = @func_2927() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(1, 2912), bool], Tensor[(231), float32], Tensor[(40, 12), int8], Tensor[(4, 728), bool]) */;
    %157 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %158 = log(%155) /* ty=Tensor[(4, 15, 15), float32] */;
    %159 = %156.2;
    %160 = %157.1;
    (%158, %159, %160)
  };
  %161() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(231), float32], Tensor[(4, 15, 15), float64]) */
}

def @func_1741() -> (Tensor[(4, 15, 15), float32],) {
  @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_8883(%var_8881: Tensor[(60), int16]) -> (Tensor[(4, 15, 15), float32], Tensor[(3, 2, 10), bool], Tensor[(60), int16], Tensor[(3, 2, 10), bool]) {
  @func_8880(%var_8881) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(3, 2, 10), bool], Tensor[(60), int16], Tensor[(3, 2, 10), bool]) */
}

def @func_3482() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  @func_3480() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_2301() -> (Tensor[(4, 15, 15), float64],) {
  %163 = fn () -> (Tensor[(4, 15, 15), float64],) {
    %162 = @func_2265() /* ty=Tensor[(4, 15, 15), float64] */;
    (%162,)
  };
  %163() /* ty=(Tensor[(4, 15, 15), float64],) */
}

def @func_2784() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %174 = fn () -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
    %164 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %165 = %164.0;
    %166 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
    %167 = cast(%166, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
    %168 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
    %169 = cast(%165, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
    %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %171 = @func_2300() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %172 = floor_mod(%169, %170) /* ty=Tensor[(4, 15, 15), float64] */;
    %173 = %171.0;
    (%172, %173)
  };
  %174() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_3564(%var_3562: Tensor[(3, 6, 6), float64], %var_3563: Tensor[(3, 6, 6), float64]) -> Tensor[(3, 6, 6), float64] {
  %179 = fn (%var_3555: Tensor[(3, 6, 6), float64], %var_3556: Tensor[(3, 6, 6), float64]) -> Tensor[(3, 6, 6), float64] {
    %175 = cast(%var_3556, dtype="float64") /* ty=Tensor[(3, 6, 6), float64] */;
    %176 = shape_of(%var_3555, dtype="int32") /* ty=Tensor[(3), int32] */;
    %177 = cast(%var_3555, dtype="float64") /* ty=Tensor[(3, 6, 6), float64] */;
    %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    multiply(%177, %178) /* ty=Tensor[(3, 6, 6), float64] */
  };
  %179(%var_3562, %var_3563) /* ty=Tensor[(3, 6, 6), float64] */
}

def @func_2446() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %180 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %181 = @func_1991() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %182 = @func_2400() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %183 = @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %184 = %180.0;
  %185 = %181.1;
  %186 = @func_2278() /* ty=Tensor[(4, 15, 15), float32] */;
  %187 = %182.0;
  %188 = %183.0;
  (%184, %185, %186, %187, %188)
}

def @func_4400() -> Tensor[(4, 15, 15), float64] {
  %190 = fn () -> Tensor[(4, 15, 15), float64] {
    %189 = @func_4036() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %189.1
  };
  %190() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_4382(%var_4371: Tensor[(84), float64]) -> (Tensor[(4, 15, 15), float32], Tensor[(?, 7, 12), float64], Tensor[(84), float64]) {
  %191 = @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %192 = cast(%var_4371, dtype="float64") /* ty=Tensor[(84), float64] */;
  %193 = reshape(%192, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), float64] */;
  %194 = %191.0;
  %195 = @func_2185(%193) /* ty=Tensor[(?, 7, 12), float64] */;
  (%194, %195, %var_4371)
}

def @func_8500() -> Tensor[(4, 15, 15), float32] {
  @func_2278() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_1124(%var_1080: Tensor[(11, 5, 3), float64], %var_1107: Tensor[(480), int8], %var_1120: Tensor[(84, 1), int32], %var_1121: Tensor[(672), int32]) -> (Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) {
  %196 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 3), float64] */;
  %197 = shape_of(%var_1080, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%var_1080, dtype="float64") /* ty=Tensor[(11, 5, 3), float64] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %200 = floor_mod(%198, %199) /* ty=Tensor[(11, 5, 3), float64] */;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(11, 5, 3), float32] */;
  %202 = cast(%var_1107, dtype="int8") /* ty=Tensor[(480), int8] */;
  %203 = cast(%var_1107, dtype="int8") /* ty=Tensor[(480), int8] */;
  %204 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 364), bool] */, dtype="bool") /* ty=Tensor[(8, 364), bool] */;
  %205 = reshape(%202, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), int8] */;
  %206 = reshape(%203, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), int8] */;
  %207 = reshape(%204, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %208 = @func_981(%205, %206, %207) /* ty=(Tensor[(2, 15, 16), int8], Tensor[(8, 16, 11), uint32], Tensor[(1408), uint32], Tensor[(2912), int32]) */;
  %209 = cast(meta[relay.Constant][16] /* ty=Tensor[(1408), uint32] */, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
  %210 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 364), bool] */, dtype="bool") /* ty=Tensor[(8, 364), bool] */;
  %211 = reshape(%209, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint32] */;
  %212 = reshape(%210, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %213 = @func_336(%211, %212) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */;
  %214 = cast(%var_1120, dtype="int32") /* ty=Tensor[(84, 1), int32] */;
  %215 = cast(%var_1121, dtype="int32") /* ty=Tensor[(672), int32] */;
  %216 = reshape(%214, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), int32] */;
  %217 = reshape(%215, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %218 = @func_1040(%216, %217) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */;
  %219 = log(%201) /* ty=Tensor[(11, 5, 3), float32] */;
  %220 = %208.3;
  %221 = %213.3;
  %222 = %218.0;
  (%219, %220, %var_1107, meta[relay.Constant][15] /* ty=Tensor[(8, 364), bool] */, %221, meta[relay.Constant][16] /* ty=Tensor[(1408), uint32] */, %222, %var_1120, %var_1121)
}

def @func_6252() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) {
  %223 = @func_5977() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
  %224 = @func_5977() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
  %225 = %223.0;
  %226 = %224.1;
  (%225, %226)
}

def @func_4793(%var_4792: Tensor[(7, 2, 9), float64]) -> (Tensor[(3, 2, 10), bool], Tensor[(60), int16], Tensor[(7, 2, 9), uint16], Tensor[(7, 2, 9), float64]) {
  %245 = fn (%var_4752: Tensor[(7, 2, 9), float64]) -> (Tensor[(3, 2, 10), bool], Tensor[(60), int16], Tensor[(7, 2, 9), uint16], Tensor[(7, 2, 9), float64]) {
    %227 = cast(meta[relay.Constant][17] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
    %228 = reshape(%227, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), int16] */;
    %229 = @func_4414(%228) /* ty=(Tensor[(3, 2, 10), bool],) */;
    %230 = cast(%var_4752, dtype="float64") /* ty=Tensor[(7, 2, 9), float64] */;
    %231 = sinh(%230) /* ty=Tensor[(7, 2, 9), float64] */;
    %232 = cast(%var_4752, dtype="bool") /* ty=Tensor[(7, 2, 9), bool] */;
    %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
    %234 = cast(%231, dtype="bool") /* ty=Tensor[(7, 2, 9), bool] */;
    %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %236 = equal(%234, %235) /* ty=Tensor[(7, 2, 9), bool] */;
    %237 = cast(%231, dtype="uint16") /* ty=Tensor[(7, 2, 9), uint16] */;
    %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
    %239 = cast(%236, dtype="uint16") /* ty=Tensor[(7, 2, 9), uint16] */;
    %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %241 = cast(%231, dtype="float64") /* ty=Tensor[(7, 2, 9), float64] */;
    %242 = %229.0;
    %243 = bitwise_or(%239, %240) /* ty=Tensor[(7, 2, 9), uint16] */;
    %244 = log(%241) /* ty=Tensor[(7, 2, 9), float64] */;
    (%242, meta[relay.Constant][17] /* ty=Tensor[(60), int16] */, %243, %244)
  };
  %245(%var_4792) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(60), int16], Tensor[(7, 2, 9), uint16], Tensor[(7, 2, 9), float64]) */
}

def @func_3480() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %246 = @func_2724() /* ty=Tensor[(4, 15, 15), float64] */;
  %247 = @func_2817() /* ty=Tensor[(4, 15, 15), float64] */;
  (%246, %247)
}

def @func_3456(%var_3453: Tensor[(56), float64], %var_3454: Tensor[(168, 4), int32], %var_3455: Tensor[(2912), bool]) -> (Tensor[(4, 15, 15), float64], Tensor[(48), float32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(168, 4), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(6, 300), uint32]) {
  @func_3451(%var_3453, %var_3454, %var_3455) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(48), float32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(168, 4), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(6, 300), uint32]) */
}

def @func_9150(%var_9148: Tensor[(3, 3, 15), float32]) -> Tensor[(3, 3, 15), float32] {
  @func_9147(%var_9148) /* ty=Tensor[(3, 3, 15), float32] */
}

def @func_9184() -> Tensor[(4, 15, 15), float64] {
  @func_3994() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_9091() -> (Tensor[(4, 15, 15), float32],) {
  %250 = fn () -> (Tensor[(4, 15, 15), float32],) {
    %248 = @func_1319() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %249 = %248.0;
    (%249,)
  };
  %250() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_471(%var_454: Tensor[(1, 3, 16), float32], %var_461: Tensor[(104, 28), bool]) -> (Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) {
  %251 = cast(6.18425f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %252 = cast(%var_454, dtype="float32") /* ty=Tensor[(1, 3, 16), float32] */;
  %253 = cast(%var_461, dtype="bool") /* ty=Tensor[(104, 28), bool] */;
  %254 = reshape(%253, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), bool] */;
  %255 = floor_divide(%251, %252) /* ty=Tensor[(1, 3, 16), float32] */;
  %256 = @func_76(%254) /* ty=Tensor[(13, 16, 14), bool] */;
  (%255, %256, %var_461)
}

def @func_2185(%var_2166: Tensor[(1, 7, 12), float64]) -> Tensor[(?, 7, 12), float64] {
  %257 = cast(%var_2166, dtype="float64") /* ty=Tensor[(1, 7, 12), float64] */;
  %258 = tan(%257) /* ty=Tensor[(1, 7, 12), float64] */;
  %259 = cast(%var_2166, dtype="float64") /* ty=Tensor[(1, 7, 12), float64] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="float64") /* ty=Tensor[(1, 7, 12), float64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%261, %262) /* ty=Tensor[(?, 7, 12), float64] */
}

def @func_2725() -> Tensor[(4, 15, 15), float64] {
  %263 = fn () -> Tensor[(4, 15, 15), float64] {
    @func_2512() /* ty=Tensor[(4, 15, 15), float64] */
  };
  %263() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_2577() -> (Tensor[(4, 15, 15), float32],) {
  %268 = fn () -> (Tensor[(4, 15, 15), float32],) {
    %264 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %265 = %264.0;
    %266 = cast(%265, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
    %267 = asin(%266) /* ty=Tensor[(4, 15, 15), float32] */;
    (%267,)
  };
  %268() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_1916() -> Tensor[(4, 15, 15), float64] {
  %272 = fn () -> Tensor[(4, 15, 15), float64] {
    %269 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %270 = %269.0;
    %271 = cast(%270, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
    cos(%271) /* ty=Tensor[(4, 15, 15), float64] */
  };
  %272() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_2680() -> (Tensor[(4, 15, 15), float64],) {
  %273 = @func_1844() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %274 = %273.0;
  %275 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%274, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %279 = maximum(%277, %278) /* ty=Tensor[(4, 15, 15), float64] */;
  (%279,)
}

def @func_5317() -> (Tensor[(4, 15, 15), float32],) {
  %282 = fn () -> (Tensor[(4, 15, 15), float32],) {
    %280 = @func_2576() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %281 = %280.0;
    (%281,)
  };
  %282() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_3853() -> (Tensor[(84), int32],) {
  %285 = fn () -> (Tensor[(84), int32],) {
    %283 = @func_3381() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 7, 12), bool], Tensor[(84), int32], Tensor[(672), int32], Tensor[(4, 15, 15), float64]) */;
    %284 = %283.2;
    (%284,)
  };
  %285() /* ty=(Tensor[(84), int32],) */
}

def @func_6352(%var_6351: Tensor[(11, 3, 16), uint64]) -> (Tensor[(11, 3, 16), uint64],) {
  %289 = fn (%var_6336: Tensor[(11, 3, 16), uint64]) -> (Tensor[(11, 3, 16), uint64],) {
    %286 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 3, 1), uint64] */, dtype="uint64") /* ty=Tensor[(11, 3, 1), uint64] */;
    %287 = cast(%var_6336, dtype="uint64") /* ty=Tensor[(11, 3, 16), uint64] */;
    %288 = bitwise_or(%286, %287) /* ty=Tensor[(11, 3, 16), uint64] */;
    (%288,)
  };
  %289(%var_6351) /* ty=(Tensor[(11, 3, 16), uint64],) */
}

def @func_3042() -> (Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) {
  %290 = cast(-9.84033f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %291 = reshape(%290, newshape=[]) /* ty=float32 */;
  %292 = @func_1915() /* ty=Tensor[(4, 15, 15), float64] */;
  %293 = @func_2936(%291) /* ty=Tensor[(9, 2, 12), bool] */;
  (%292, %293, -9.84033f /* ty=float32 */)
}

def @func_6672() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %298 = fn () -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
    %294 = @func_1991() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %295 = @func_5924() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 5, 1), float32]) */;
    %296 = %294.0;
    %297 = %295.0;
    (%296, %297)
  };
  %298() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_8754(%var_8753: Tensor[(1, 1350), float32]) -> (Tensor[(10, 10, 4), float32], Tensor[(15, 15, 6), float32], Tensor[(1, 1350), float32]) {
  %307 = fn (%var_8747: Tensor[(1, 1350), float32]) -> (Tensor[(10, 10, 4), float32], Tensor[(15, 15, 6), float32], Tensor[(1, 1350), float32]) {
    %299 = @func_8531() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) */;
    %300 = %299.2;
    %301 = cast(%300, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
    %302 = cast(%var_8747, dtype="float32") /* ty=Tensor[(1, 1350), float32] */;
    %303 = reshape(%302, newshape=[15, 15, 6]) /* ty=Tensor[(15, 15, 6), float32] */;
    %304 = @func_4634(%303) /* ty=(Tensor[(15, 15, 6), float32],) */;
    %305 = log10(%301) /* ty=Tensor[(10, 10, 4), float32] */;
    %306 = %304.0;
    (%305, %306, %var_8747)
  };
  %307(%var_8753) /* ty=(Tensor[(10, 10, 4), float32], Tensor[(15, 15, 6), float32], Tensor[(1, 1350), float32]) */
}

def @func_1619(%var_1615: Tensor[(10, 10, 4), int64]) -> Tensor[(10, 10, 4), int64] {
  %308 = cast(%var_1615, dtype="int64") /* ty=Tensor[(10, 10, 4), int64] */;
  %309 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(10, 10, 4), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 10, 4), int64] */, dtype="int64") /* ty=Tensor[(10, 10, 4), int64] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  subtract(%310, %311) /* ty=Tensor[(10, 10, 4), int64] */
}

def @func_5926() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 5, 1), float32]) {
  @func_5924() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 5, 1), float32]) */
}

def @func_596(%var_594: Tensor[(4, 11, 8), uint8], %var_595: Tensor[(1800), uint32]) -> (Tensor[(4, 11, 8), int16], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(2912), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(2912), bool]) {
  %340 = fn (%var_569: Tensor[(4, 11, 8), uint8], %var_581: Tensor[(1800), uint32]) -> (Tensor[(4, 11, 8), int16], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(2912), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(2912), bool]) {
    %312 = cast(%var_569, dtype="uint8") /* ty=Tensor[(4, 11, 8), uint8] */;
    %313 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(4, 11, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 11, 8), uint8] */, dtype="uint8") /* ty=Tensor[(4, 11, 8), uint8] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %316 = minimum(%314, %315) /* ty=Tensor[(4, 11, 8), uint8] */;
    %317 = cast(%316, dtype="int16") /* ty=Tensor[(4, 11, 8), int16] */;
    %318 = shape_of(%var_569, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(%var_569, dtype="int16") /* ty=Tensor[(4, 11, 8), int16] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %321 = cast(%var_581, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %322 = cast(%var_581, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %323 = reshape(%321, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
    %324 = reshape(%322, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
    %325 = @func_551(%323, %324) /* ty=(Tensor[(10, 15, 12), uint32],) */;
    %326 = cast(meta[relay.Constant][22] /* ty=Tensor[(1408), uint32] */, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
    %327 = cast(meta[relay.Constant][23] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %328 = reshape(%326, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint32] */;
    %329 = reshape(%327, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
    %330 = @func_336(%328, %329) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */;
    %331 = cast(meta[relay.Constant][22] /* ty=Tensor[(1408), uint32] */, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
    %332 = %330.2;
    %333 = cast(%332, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %334 = reshape(%331, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint32] */;
    %335 = reshape(%333, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
    %336 = @func_336(%334, %335) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */;
    %337 = left_shift(%319, %320) /* ty=Tensor[(4, 11, 8), int16] */;
    %338 = %325.0;
    %339 = %336.2;
    (%337, %338, %var_581, %332, meta[relay.Constant][22] /* ty=Tensor[(1408), uint32] */, meta[relay.Constant][23] /* ty=Tensor[(2912), bool] */, %339)
  };
  %340(%var_594, %var_595) /* ty=(Tensor[(4, 11, 8), int16], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(2912), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(2912), bool]) */
}

def @func_7008(%var_6986: Tensor[(448), float64], %var_6987: Tensor[(168, 4), int32], %var_6988: Tensor[(48), float32], %var_6989: Tensor[(2912), bool], %var_6990: Tensor[(1800), uint32], %var_6999: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(7, 8, 8), float64], Tensor[(56), float64], Tensor[(448), float64], Tensor[(168, 4), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(1800), float32]) {
  %341 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %342 = cast(meta[relay.Constant][24] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %343 = cast(%var_6986, dtype="float64") /* ty=Tensor[(448), float64] */;
  %344 = cast(%var_6987, dtype="int32") /* ty=Tensor[(168, 4), int32] */;
  %345 = cast(%var_6988, dtype="float32") /* ty=Tensor[(48), float32] */;
  %346 = cast(%var_6989, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %347 = cast(%var_6990, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %348 = reshape(%342, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), float64] */;
  %349 = reshape(%343, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
  %350 = reshape(%344, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %351 = reshape(%345, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %352 = reshape(%346, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %353 = reshape(%347, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %354 = @func_2125(%348, %349, %350, %351, %352, %353) /* ty=(Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) */;
  %355 = cast(%var_6999, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %356 = shape_of(%var_6990, dtype="int32") /* ty=Tensor[(1), int32] */;
  %357 = cast(%var_6990, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?), float32] */;
  %359 = %341.1;
  %360 = %354.6;
  %361 = mod(%357, %358) /* ty=Tensor[(1800), float32] */;
  (%359, %360, meta[relay.Constant][24] /* ty=Tensor[(56), float64] */, %var_6986, %var_6987, %var_6988, %var_6989, %361)
}

def @func_1622(%var_1620: Tensor[(10, 10, 4), int64]) -> Tensor[(10, 10, 4), int64] {
  @func_1619(%var_1620) /* ty=Tensor[(10, 10, 4), int64] */
}

def @func_6803() -> (Tensor[(4, 15, 15), float32],) {
  %364 = fn () -> (Tensor[(4, 15, 15), float32],) {
    %362 = @func_2576() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %363 = %362.0;
    (%363,)
  };
  %364() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_6100() -> Tensor[(4, 15, 15), float32] {
  %366 = fn () -> Tensor[(4, 15, 15), float32] {
    %365 = @func_5924() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 5, 1), float32]) */;
    %365.1
  };
  %366() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_76(%var_69: Tensor[(13, 16, 14), bool]) -> Tensor[(13, 16, 14), bool] {
  %367 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 16, 14), bool] */, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %368 = shape_of(%var_69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%var_69, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%369, %370) /* ty=Tensor[(13, 16, 14), bool] */
}

def @func_6254() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) {
  @func_6252() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */
}

def @func_6209() -> Tensor[(4, 15, 15), float64] {
  %371 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %371.1
}

def @func_5757() -> Tensor[(4, 15, 15), float64] {
  %372 = fn () -> Tensor[(4, 15, 15), float64] {
    @func_5138() /* ty=Tensor[(4, 15, 15), float64] */
  };
  %372() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_7883(%var_7881: Tensor[(60), int16]) -> (Tensor[(4, 15, 15), float32], Tensor[(3, 2, 10), bool], Tensor[(60), int16], Tensor[(8, 7, 12), bool], Tensor[(84), int32], Tensor[(672), int32]) {
  @func_7880(%var_7881) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(3, 2, 10), bool], Tensor[(60), int16], Tensor[(8, 7, 12), bool], Tensor[(84), int32], Tensor[(672), int32]) */
}

def @func_6655() -> Tensor[(4, 15, 15), float64] {
  @func_2265() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_7560(%var_7518: Tensor[(1, 1, 9), uint64], %var_7519: Tensor[(15, 3, 9), uint64], %var_7555: Tensor[(2, 1, 9), float32]) -> (Tensor[(15, 3, 9), uint32], Tensor[(18, 100), bool], Tensor[(2, 1, 9), float32]) {
  %373 = cast(%var_7518, dtype="uint64") /* ty=Tensor[(1, 1, 9), uint64] */;
  %374 = cast(%var_7519, dtype="uint64") /* ty=Tensor[(15, 3, 9), uint64] */;
  %375 = logical_xor(%373, %374) /* ty=Tensor[(15, 3, 9), uint64] */;
  %376 = cast(%var_7519, dtype="uint32") /* ty=Tensor[(15, 3, 9), uint32] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="uint32") /* ty=Tensor[(15, 3, 9), uint32] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %380 = @func_4702() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool]) */;
  %381 = cast(%var_7518, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
  %382 = asin(%381) /* ty=Tensor[(1, 1, 9), float32] */;
  %383 = cast(%382, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
  %384 = cast(%var_7555, dtype="float32") /* ty=Tensor[(2, 1, 9), float32] */;
  %385 = bitwise_and(%378, %379) /* ty=Tensor[(15, 3, 9), uint32] */;
  %386 = %380.2;
  %387 = floor_divide(%383, %384) /* ty=Tensor[(2, 1, 9), float32] */;
  (%385, %386, %387)
}

def @func_7016(%var_7010: Tensor[(448), float64], %var_7011: Tensor[(168, 4), int32], %var_7012: Tensor[(48), float32], %var_7013: Tensor[(2912), bool], %var_7014: Tensor[(1800), uint32], %var_7015: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(7, 8, 8), float64], Tensor[(56), float64], Tensor[(448), float64], Tensor[(168, 4), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(1800), float32]) {
  @func_7008(%var_7010, %var_7011, %var_7012, %var_7013, %var_7014, %var_7015) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(7, 8, 8), float64], Tensor[(56), float64], Tensor[(448), float64], Tensor[(168, 4), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(1800), float32]) */
}

def @func_2701() -> Tensor[(4, 15, 15), float64] {
  @func_2512() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_475(%var_473: Tensor[(1, 3, 16), float32], %var_474: Tensor[(104, 28), bool]) -> (Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) {
  @func_471(%var_473, %var_474) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */
}

def @func_5498(%var_5496: Tensor[(11, 15), float64]) -> (Tensor[(4, 15, 15), float64], Tensor[(48), float32], Tensor[(11, 15), float64], Tensor[(8, 84), int32]) {
  @func_5495(%var_5496) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(48), float32], Tensor[(11, 15), float64], Tensor[(8, 84), int32]) */
}

def @func_336(%var_299: Tensor[(8, 16, 11), uint32], %var_316: Tensor[(2912), bool]) -> (Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) {
  %388 = cast(%var_299, dtype="uint32") /* ty=Tensor[(8, 16, 11), uint32] */;
  %389 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(8, 16, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 16, 11), uint32] */, dtype="uint32") /* ty=Tensor[(8, 16, 11), uint32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %392 = cast(%var_316, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %393 = reshape(%392, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), bool] */;
  %394 = cast(%var_316, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %395 = reshape(%394, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), bool] */;
  %396 = bitwise_xor(%390, %391) /* ty=Tensor[(8, 16, 11), uint32] */;
  %397 = @func_76(%393) /* ty=Tensor[(13, 16, 14), bool] */;
  %398 = @func_76(%395) /* ty=Tensor[(13, 16, 14), bool] */;
  (%396, %397, %var_316, %398)
}

def @func_2928() -> (Tensor[(4, 15, 15), float32], Tensor[(1, 2912), bool], Tensor[(231), float32], Tensor[(40, 12), int8], Tensor[(4, 728), bool]) {
  %409 = fn () -> (Tensor[(4, 15, 15), float32], Tensor[(1, 2912), bool], Tensor[(231), float32], Tensor[(40, 12), int8], Tensor[(4, 728), bool]) {
    %399 = @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %400 = cast(meta[relay.Constant][27] /* ty=Tensor[(231), float32] */, dtype="float32") /* ty=Tensor[(231), float32] */;
    %401 = cast(meta[relay.Constant][28] /* ty=Tensor[(40, 12), int8] */, dtype="int8") /* ty=Tensor[(40, 12), int8] */;
    %402 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 728), bool] */, dtype="bool") /* ty=Tensor[(4, 728), bool] */;
    %403 = reshape(%400, newshape=[3, 11, 7]) /* ty=Tensor[(3, 11, 7), float32] */;
    %404 = reshape(%401, newshape=[8, 60]) /* ty=Tensor[(8, 60), int8] */;
    %405 = reshape(%402, newshape=[1, 2912]) /* ty=Tensor[(1, 2912), bool] */;
    %406 = @func_1684(%403, %404, %405) /* ty=(Tensor[(3, 11, 7), bool], Tensor[(8, 16, 11), uint32], Tensor[(8, 60), int8], Tensor[(1, 2912), bool]) */;
    %407 = %399.0;
    %408 = %406.3;
    (%407, %408, meta[relay.Constant][27] /* ty=Tensor[(231), float32] */, meta[relay.Constant][28] /* ty=Tensor[(40, 12), int8] */, meta[relay.Constant][29] /* ty=Tensor[(4, 728), bool] */)
  };
  %409() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(1, 2912), bool], Tensor[(231), float32], Tensor[(40, 12), int8], Tensor[(4, 728), bool]) */
}

def @func_2378() -> (Tensor[(4, 15, 15), float64],) {
  @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */
}

def @func_6180() -> (float32, Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) {
  %416 = fn () -> (float32, Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) {
    %410 = @func_3042() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) */;
    %411 = @func_4702() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool]) */;
    %412 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %413 = %410.2;
    %414 = %411.1;
    %415 = %412.0;
    (%413, %414, %415)
  };
  %416() /* ty=(float32, Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */
}

def @func_8470(%var_8469: Tensor[(165), float64]) -> (Tensor[(4, 15, 15), float32], Tensor[(8, 364), bool], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(672), int32], Tensor[(4, 15, 15), float64]) {
  %430 = fn (%var_8449: Tensor[(165), float64]) -> (Tensor[(4, 15, 15), float32], Tensor[(8, 364), bool], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(672), int32], Tensor[(4, 15, 15), float64]) {
    %417 = @func_1319() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %418 = cast(%var_8449, dtype="float64") /* ty=Tensor[(165), float64] */;
    %419 = cast(meta[relay.Constant][30] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
    %420 = cast(meta[relay.Constant][31] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
    %421 = cast(meta[relay.Constant][32] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
    %422 = reshape(%418, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float64] */;
    %423 = reshape(%419, newshape=[480]) /* ty=Tensor[(480), int8] */;
    %424 = reshape(%420, newshape=[84, 1]) /* ty=Tensor[(84, 1), int32] */;
    %425 = reshape(%421, newshape=[672]) /* ty=Tensor[(672), int32] */;
    %426 = @func_1124(%422, %423, %424, %425) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */;
    %427 = %417.0;
    %428 = %426.3;
    %429 = @func_4101() /* ty=Tensor[(4, 15, 15), float64] */;
    (%427, %428, %var_8449, meta[relay.Constant][30] /* ty=Tensor[(480), int8] */, meta[relay.Constant][31] /* ty=Tensor[(84), int32] */, meta[relay.Constant][32] /* ty=Tensor[(672), int32] */, %429)
  };
  %430(%var_8469) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(8, 364), bool], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(672), int32], Tensor[(4, 15, 15), float64]) */
}

def @func_8688() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], float32, Tensor[(4, 15, 15), float64]) {
  %431 = @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %432 = @func_8571() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %433 = @func_6179() /* ty=(float32, Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
  %434 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %435 = %431.0;
  %436 = %432.0;
  %437 = %433.0;
  %438 = %434.1;
  (%435, %436, %437, %438)
}

def @func_5547() -> (Tensor[(4, 15, 15), float64], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64], Tensor[(?, 7, 12), float64], Tensor[(84), float64]) {
  %452 = fn () -> (Tensor[(4, 15, 15), float64], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64], Tensor[(?, 7, 12), float64], Tensor[(84), float64]) {
    %439 = cast(meta[relay.Constant][33] /* ty=Tensor[(1408), uint32] */, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
    %440 = cast(meta[relay.Constant][34] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %441 = reshape(%439, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint32] */;
    %442 = reshape(%440, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
    %443 = @func_336(%441, %442) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */;
    %444 = @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %445 = cast(meta[relay.Constant][35] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
    %446 = reshape(%445, newshape=[84]) /* ty=Tensor[(84), float64] */;
    %447 = @func_4382(%446) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(?, 7, 12), float64], Tensor[(84), float64]) */;
    %448 = @func_5191() /* ty=Tensor[(4, 15, 15), float64] */;
    %449 = %443.3;
    %450 = %444.0;
    %451 = %447.1;
    (%448, %449, meta[relay.Constant][33] /* ty=Tensor[(1408), uint32] */, meta[relay.Constant][34] /* ty=Tensor[(2912), bool] */, %450, %451, meta[relay.Constant][35] /* ty=Tensor[(84), float64] */)
  };
  %452() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64], Tensor[(?, 7, 12), float64], Tensor[(84), float64]) */
}

def @func_2448() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  @func_2446() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_2818() -> Tensor[(4, 15, 15), float64] {
  %453 = fn () -> Tensor[(4, 15, 15), float64] {
    @func_1759() /* ty=Tensor[(4, 15, 15), float64] */
  };
  %453() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_1992() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %457 = fn () -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
    %454 = @func_1844() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %455 = %454.0;
    %456 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
    (%455, %456)
  };
  %457() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_2986() -> Tensor[(4, 15, 15), float64] {
  @func_2265() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_3284() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(104, 28), bool], Tensor[(2, 24), float32], Tensor[(2912), bool]) {
  @func_3282() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(104, 28), bool], Tensor[(2, 24), float32], Tensor[(2912), bool]) */
}

def @func_2188(%var_2186: Tensor[(1, 7, 12), float64]) -> Tensor[(?, 7, 12), float64] {
  @func_2185(%var_2186) /* ty=Tensor[(?, 7, 12), float64] */
}

def @func_7111() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) {
  %464 = fn () -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) {
    %458 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %459 = %458.0;
    %460 = cast(%459, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
    %461 = reshape(%460, newshape=[4, 15, 15]) /* ty=Tensor[(4, 15, 15), float64] */;
    %462 = @func_3336(%461) /* ty=(Tensor[(4, 15, 15), bool], Tensor[(4, 15, 15), float64]) */;
    %463 = %462.1;
    (%459, %463)
  };
  %464() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) */
}

def @func_2535() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %468 = fn () -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
    %465 = @func_2512() /* ty=Tensor[(4, 15, 15), float64] */;
    %466 = @func_1915() /* ty=Tensor[(4, 15, 15), float64] */;
    %467 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
    (%465, %466, %467)
  };
  %468() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_4636(%var_4635: Tensor[(15, 15, 6), float32]) -> (Tensor[(15, 15, 6), float32],) {
  %471 = fn (%var_4625: Tensor[(15, 15, 6), float32]) -> (Tensor[(15, 15, 6), float32],) {
    %469 = cast(%var_4625, dtype="float32") /* ty=Tensor[(15, 15, 6), float32] */;
    %470 = sqrt(%469) /* ty=Tensor[(15, 15, 6), float32] */;
    (%470,)
  };
  %471(%var_4635) /* ty=(Tensor[(15, 15, 6), float32],) */
}

def @func_7880(%var_7870: Tensor[(60), int16]) -> (Tensor[(4, 15, 15), float32], Tensor[(3, 2, 10), bool], Tensor[(60), int16], Tensor[(8, 7, 12), bool], Tensor[(84), int32], Tensor[(672), int32]) {
  %472 = cast(%var_7870, dtype="int16") /* ty=Tensor[(60), int16] */;
  %473 = reshape(%472, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), int16] */;
  %474 = @func_4414(%473) /* ty=(Tensor[(3, 2, 10), bool],) */;
  %475 = cast(meta[relay.Constant][36] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %476 = cast(meta[relay.Constant][37] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %477 = reshape(%475, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), int32] */;
  %478 = reshape(%476, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %479 = @func_1040(%477, %478) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */;
  %480 = @func_1864() /* ty=Tensor[(4, 15, 15), float32] */;
  %481 = %474.0;
  %482 = %479.1;
  (%480, %481, %var_7870, %482, meta[relay.Constant][36] /* ty=Tensor[(84), int32] */, meta[relay.Constant][37] /* ty=Tensor[(672), int32] */)
}

def @func_4149(%var_4147: Tensor[(3, 12, 9), int16], %var_4148: Tensor[(3, 12, 9), int16]) -> (Tensor[(3, 12, 9), int16], float32, Tensor[(3, 12, 9), float64]) {
  @func_4145(%var_4147, %var_4148) /* ty=(Tensor[(3, 12, 9), int16], float32, Tensor[(3, 12, 9), float64]) */
}

def @func_8502() -> Tensor[(4, 15, 15), float32] {
  @func_8500() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_3145(%var_3138: Tensor[(56), float64], %var_3139: Tensor[(2, 224), float64], %var_3140: Tensor[(672), int32]) -> (Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(56), float64], Tensor[(2, 224), float64], Tensor[(672), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(450, 4), uint32]) {
  %483 = @func_2636() /* ty=(Tensor[(8, 2), float32], Tensor[(4, 15, 15), float64]) */;
  %484 = cast(%var_3138, dtype="float64") /* ty=Tensor[(56), float64] */;
  %485 = cast(%var_3139, dtype="float64") /* ty=Tensor[(2, 224), float64] */;
  %486 = cast(%var_3140, dtype="int32") /* ty=Tensor[(672), int32] */;
  %487 = cast(meta[relay.Constant][38] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %488 = cast(meta[relay.Constant][39] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %489 = cast(meta[relay.Constant][40] /* ty=Tensor[(450, 4), uint32] */, dtype="uint32") /* ty=Tensor[(450, 4), uint32] */;
  %490 = reshape(%484, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), float64] */;
  %491 = reshape(%485, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
  %492 = reshape(%486, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %493 = reshape(%487, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %494 = reshape(%488, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %495 = reshape(%489, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %496 = @func_2125(%490, %491, %492, %493, %494, %495) /* ty=(Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) */;
  %497 = %483.1;
  %498 = %496.5;
  (%497, %498, %var_3138, %var_3139, %var_3140, meta[relay.Constant][38] /* ty=Tensor[(48), float32] */, meta[relay.Constant][39] /* ty=Tensor[(2912), bool] */, meta[relay.Constant][40] /* ty=Tensor[(450, 4), uint32] */)
}

def @func_5621(%var_5619: Tensor[(280), uint8], %var_5620: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(280), uint8], Tensor[(14, 4), float64], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(1, 56), float64]) {
  %520 = fn (%var_5586: Tensor[(280), uint8], %var_5589: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(280), uint8], Tensor[(14, 4), float64], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(1, 56), float64]) {
    %499 = cast(%var_5586, dtype="uint8") /* ty=Tensor[(280), uint8] */;
    %500 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 4), float64] */;
    %501 = cast(meta[relay.Constant][42] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %502 = cast(%var_5589, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %503 = reshape(%499, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), uint8] */;
    %504 = reshape(%500, newshape=[1, 56]) /* ty=Tensor[(1, 56), float64] */;
    %505 = reshape(%501, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
    %506 = reshape(%502, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %507 = @func_4229(%503, %504, %505, %506) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 5, 7), float32], Tensor[(8, 5, 7), int8], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(1, 56), float64], Tensor[(672), int32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(1800), uint32], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32]) */;
    %508 = cast(%var_5586, dtype="uint8") /* ty=Tensor[(280), uint8] */;
    %509 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 4), float64] */;
    %510 = cast(meta[relay.Constant][42] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %511 = cast(%var_5589, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %512 = reshape(%508, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), uint8] */;
    %513 = reshape(%509, newshape=[1, 56]) /* ty=Tensor[(1, 56), float64] */;
    %514 = reshape(%510, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
    %515 = reshape(%511, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %516 = @func_4229(%512, %513, %514, %515) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 5, 7), float32], Tensor[(8, 5, 7), int8], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(1, 56), float64], Tensor[(672), int32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(1800), uint32], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32]) */;
    %517 = @func_2265() /* ty=Tensor[(4, 15, 15), float64] */;
    %518 = %507.3;
    %519 = %516.5;
    (%517, %518, %var_5586, meta[relay.Constant][41] /* ty=Tensor[(14, 4), float64] */, meta[relay.Constant][42] /* ty=Tensor[(2912), bool] */, %var_5589, %519)
  };
  %520(%var_5619, %var_5620) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(280), uint8], Tensor[(14, 4), float64], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(1, 56), float64]) */
}

def @func_6657() -> Tensor[(4, 15, 15), float64] {
  @func_6655() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_8533() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) {
  @func_8531() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) */
}

def @func_4617(%var_4575: Tensor[(165), float64], %var_4577: Tensor[(336, 2), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(40, 12), int8], Tensor[(8, 364), bool], Tensor[(165), float64], Tensor[(84), int32], Tensor[(336, 2), int32], Tensor[(104, 28), bool], Tensor[(48), float32]) {
  %521 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %522 = @func_2927() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(1, 2912), bool], Tensor[(231), float32], Tensor[(40, 12), int8], Tensor[(4, 728), bool]) */;
  %523 = cast(%var_4575, dtype="float64") /* ty=Tensor[(165), float64] */;
  %524 = %522.3;
  %525 = cast(%524, dtype="int8") /* ty=Tensor[(40, 12), int8] */;
  %526 = cast(meta[relay.Constant][43] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %527 = cast(%var_4577, dtype="int32") /* ty=Tensor[(336, 2), int32] */;
  %528 = reshape(%523, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float64] */;
  %529 = reshape(%525, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %530 = reshape(%526, newshape=[84, 1]) /* ty=Tensor[(84, 1), int32] */;
  %531 = reshape(%527, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %532 = @func_1124(%528, %529, %530, %531) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */;
  %533 = cast(meta[relay.Constant][44] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %534 = %532.3;
  %535 = cast(%534, dtype="bool") /* ty=Tensor[(8, 364), bool] */;
  %536 = reshape(%533, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
  %537 = reshape(%535, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
  %538 = @func_471(%536, %537) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
  %539 = %521.0;
  %540 = %538.2;
  (%539, %524, %534, %var_4575, meta[relay.Constant][43] /* ty=Tensor[(84), int32] */, %var_4577, %540, meta[relay.Constant][44] /* ty=Tensor[(48), float32] */)
}

def @func_7837() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  @func_7835() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_6735() -> (Tensor[(4, 15, 15), float64], Tensor[(1, 3, 16), float32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64]) {
  %550 = fn () -> (Tensor[(4, 15, 15), float64], Tensor[(1, 3, 16), float32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64]) {
    %541 = @func_2534() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %542 = cast(meta[relay.Constant][45] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %543 = cast(meta[relay.Constant][46] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %544 = reshape(%542, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
    %545 = reshape(%543, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
    %546 = @func_471(%544, %545) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
    %547 = %541.2;
    %548 = %546.0;
    %549 = @func_2817() /* ty=Tensor[(4, 15, 15), float64] */;
    (%547, %548, meta[relay.Constant][45] /* ty=Tensor[(48), float32] */, meta[relay.Constant][46] /* ty=Tensor[(2912), bool] */, %549)
  };
  %550() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(1, 3, 16), float32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64]) */
}

def @func_3338(%var_3337: Tensor[(4, 15, 15), float64]) -> (Tensor[(4, 15, 15), bool], Tensor[(4, 15, 15), float64]) {
  %559 = fn (%var_3327: Tensor[(4, 15, 15), float64]) -> (Tensor[(4, 15, 15), bool], Tensor[(4, 15, 15), float64]) {
    %551 = @func_2986() /* ty=Tensor[(4, 15, 15), float64] */;
    %552 = cast(%var_3327, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
    %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
    %554 = cast(%551, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
    %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %556 = @func_2680() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %557 = not_equal(%554, %555) /* ty=Tensor[(4, 15, 15), bool] */;
    %558 = %556.0;
    (%557, %558)
  };
  %559(%var_3337) /* ty=(Tensor[(4, 15, 15), bool], Tensor[(4, 15, 15), float64]) */
}

def @func_6948() -> (Tensor[(4, 15, 15), float64],) {
  %560 = @func_5977() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
  %561 = %560.0;
  (%561,)
}

def @func_4385(%var_4383: Tensor[(84), float64]) -> (Tensor[(4, 15, 15), float32], Tensor[(?, 7, 12), float64], Tensor[(84), float64]) {
  @func_4382(%var_4383) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(?, 7, 12), float64], Tensor[(84), float64]) */
}

def @func_5735(%var_5731: bool, %var_5732: Tensor[(6, 3, 9), bool], %var_5733: Tensor[(84), int32], %var_5734: Tensor[(2912), bool]) -> (Tensor[(6, 3, 9), bool], Tensor[(84, 1), int32], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(336, 2), float32], Tensor[(8, 16, 11), uint32], Tensor[(2912), bool]) {
  @func_5729(%var_5731, %var_5732, %var_5733, %var_5734) /* ty=(Tensor[(6, 3, 9), bool], Tensor[(84, 1), int32], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(336, 2), float32], Tensor[(8, 16, 11), uint32], Tensor[(2912), bool]) */
}

def @func_1865() -> Tensor[(4, 15, 15), float32] {
  %563 = fn () -> Tensor[(4, 15, 15), float32] {
    %562 = @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %562.0
  };
  %563() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_2512() -> Tensor[(4, 15, 15), float64] {
  %564 = @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %564.0
}

def @func_2022(%var_2021: Tensor[(1800, 1), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800, 1), uint32], Tensor[(13, 16, 14), bool]) {
  %576 = fn (%var_2016: Tensor[(1800, 1), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800, 1), uint32], Tensor[(13, 16, 14), bool]) {
    %565 = cast(meta[relay.Constant][47] /* ty=Tensor[(352), uint8] */, dtype="uint8") /* ty=Tensor[(352), uint8] */;
    %566 = cast(%var_2016, dtype="uint32") /* ty=Tensor[(1800, 1), uint32] */;
    %567 = reshape(%565, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint8] */;
    %568 = reshape(%566, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %569 = @func_593(%567, %568) /* ty=(Tensor[(4, 11, 8), int16], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(2912), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(2912), bool]) */;
    %570 = %569.3;
    %571 = cast(%570, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %572 = reshape(%571, newshape=[13, 16, 14]) /* ty=Tensor[(13, 16, 14), bool] */;
    %573 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
    %574 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
    %575 = @func_76(%572) /* ty=Tensor[(13, 16, 14), bool] */;
    (%573, %574, %570, meta[relay.Constant][47] /* ty=Tensor[(352), uint8] */, %var_2016, %575)
  };
  %576(%var_2021) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800, 1), uint32], Tensor[(13, 16, 14), bool]) */
}

def @func_4435() -> (Tensor[(4, 5, 1), float32], Tensor[(4, 15, 15), float32]) {
  %581 = fn () -> (Tensor[(4, 5, 1), float32], Tensor[(4, 15, 15), float32]) {
    %577 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(4, 5, 1), float32] */;
    %578 = @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %579 = sqrt(%577) /* ty=Tensor[(4, 5, 1), float32] */;
    %580 = %578.0;
    (%579, %580)
  };
  %581() /* ty=(Tensor[(4, 5, 1), float32], Tensor[(4, 15, 15), float32]) */
}

def @func_4229(%var_4182: Tensor[(8, 5, 7), uint8], %var_4204: Tensor[(1, 56), float64], %var_4206: Tensor[(2912), bool], %var_4212: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(8, 5, 7), float32], Tensor[(8, 5, 7), int8], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(1, 56), float64], Tensor[(672), int32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(1800), uint32], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32]) {
  %582 = @func_3381() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 7, 12), bool], Tensor[(84), int32], Tensor[(672), int32], Tensor[(4, 15, 15), float64]) */;
  %583 = cast(%var_4182, dtype="float32") /* ty=Tensor[(8, 5, 7), float32] */;
  %584 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(8, 5, 7), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 5, 7), uint8] */, dtype="float32") /* ty=Tensor[(8, 5, 7), float32] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %587 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 5, 7), uint8] */, dtype="uint8") /* ty=Tensor[(8, 5, 7), uint8] */;
  %588 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(8, 5, 7), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 5, 7), uint8] */, dtype="uint8") /* ty=Tensor[(8, 5, 7), uint8] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %591 = bitwise_xor(%589, %590) /* ty=Tensor[(8, 5, 7), uint8] */;
  %592 = cast(%591, dtype="int8") /* ty=Tensor[(8, 5, 7), int8] */;
  %593 = shape_of(%var_4182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%var_4182, dtype="int8") /* ty=Tensor[(8, 5, 7), int8] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %596 = cast(%var_4204, dtype="float64") /* ty=Tensor[(1, 56), float64] */;
  %597 = cast(meta[relay.Constant][51] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %598 = cast(%var_4206, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %599 = reshape(%596, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %600 = reshape(%597, newshape=[168, 4]) /* ty=Tensor[(168, 4), int32] */;
  %601 = reshape(%598, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %602 = @func_3451(%599, %600, %601) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(48), float32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(168, 4), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(6, 300), uint32]) */;
  %603 = cast(%var_4206, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %604 = cast(%var_4212, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %605 = reshape(%603, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %606 = reshape(%604, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %607 = @func_740(%605, %606) /* ty=(Tensor[(104, 28), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800), uint32], Tensor[(104, 28), bool], Tensor[(1800), uint32], Tensor[(12, ?, 8), uint64], Tensor[(12, ?, 8), float32]) */;
  %608 = cast(meta[relay.Constant][52] /* ty=Tensor[(1408), uint32] */, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
  %609 = %602.6;
  %610 = cast(%609, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %611 = reshape(%608, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint32] */;
  %612 = reshape(%610, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %613 = @func_336(%611, %612) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */;
  %614 = %582.4;
  %615 = divide(%585, %586) /* ty=Tensor[(8, 5, 7), float32] */;
  %616 = left_shift(%594, %595) /* ty=Tensor[(8, 5, 7), int8] */;
  %617 = @func_3994() /* ty=Tensor[(4, 15, 15), float64] */;
  %618 = %607.5;
  %619 = %613.3;
  (%614, %615, %616, %617, %609, %var_4204, meta[relay.Constant][51] /* ty=Tensor[(672), int32] */, %var_4206, %618, %var_4212, %619, meta[relay.Constant][52] /* ty=Tensor[(1408), uint32] */)
}

def @func_5016() -> Tensor[(4, 15, 15), float32] {
  @func_5014() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_7077() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %624 = fn () -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
    %620 = @func_3480() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %621 = @func_1991() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %622 = %620.1;
    %623 = %621.1;
    (%622, %623)
  };
  %624() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_6382() -> (Tensor[(4, 15, 15), float32], Tensor[(480), int8], Tensor[(231), float32], Tensor[(480), int8], Tensor[(2912), float64]) {
  %625 = cast(meta[relay.Constant][53] /* ty=Tensor[(231), float32] */, dtype="float32") /* ty=Tensor[(231), float32] */;
  %626 = cast(meta[relay.Constant][54] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %627 = cast(meta[relay.Constant][55] /* ty=Tensor[(2912), float64] */, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %628 = reshape(%625, newshape=[231]) /* ty=Tensor[(231), float32] */;
  %629 = reshape(%626, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %630 = reshape(%627, newshape=[104, 28]) /* ty=Tensor[(104, 28), float64] */;
  %631 = @func_3706(%628, %629, %630) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 16, 11), uint32], Tensor[(231), float32], Tensor[(480), int8], Tensor[(4, 15, 15), float32], Tensor[(104, 28), uint64]) */;
  %632 = @func_1864() /* ty=Tensor[(4, 15, 15), float32] */;
  %633 = %631.3;
  (%632, %633, meta[relay.Constant][53] /* ty=Tensor[(231), float32] */, meta[relay.Constant][54] /* ty=Tensor[(480), int8] */, meta[relay.Constant][55] /* ty=Tensor[(2912), float64] */)
}

def @func_8531() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) {
  %634 = cast(meta[relay.Constant][56] /* ty=Tensor[(400), int64] */, dtype="int64") /* ty=Tensor[(400), int64] */;
  %635 = reshape(%634, newshape=[10, 10, 4]) /* ty=Tensor[(10, 10, 4), int64] */;
  %636 = @func_5756() /* ty=Tensor[(4, 15, 15), float64] */;
  %637 = @func_2724() /* ty=Tensor[(4, 15, 15), float64] */;
  %638 = @func_1619(%635) /* ty=Tensor[(10, 10, 4), int64] */;
  (%636, %637, %638, meta[relay.Constant][56] /* ty=Tensor[(400), int64] */)
}

def @func_7416(%var_7414: Tensor[(84), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(84), int32], Tensor[(84), int32], Tensor[(672), int32], Tensor[(8, 7, 12), int32], Tensor[(1, 165), float64], Tensor[(2, 240), int8]) {
  @func_7413(%var_7414) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(84), int32], Tensor[(84), int32], Tensor[(672), int32], Tensor[(8, 7, 12), int32], Tensor[(1, 165), float64], Tensor[(2, 240), int8]) */
}

def @func_2682() -> (Tensor[(4, 15, 15), float64],) {
  @func_2680() /* ty=(Tensor[(4, 15, 15), float64],) */
}

def @func_1044(%var_1042: Tensor[(1, 7, 12), int32], %var_1043: Tensor[(8, 7, 12), int32]) -> (Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) {
  @func_1040(%var_1042, %var_1043) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */
}

def @func_2936(%var_2929: float32) -> Tensor[(9, 2, 12), bool] {
  %639 = cast(%var_2929, dtype="bool") /* ty=bool */;
  %640 = cast(meta[relay.Constant][57] /* ty=Tensor[(9, 2, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
  greater_equal(%639, %640) /* ty=Tensor[(9, 2, 12), bool] */
}

def @func_9270() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float32]) {
  @func_9268() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float32]) */
}

def @func_2266() -> Tensor[(4, 15, 15), float64] {
  %642 = fn () -> Tensor[(4, 15, 15), float64] {
    %641 = @func_1991() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %641.0
  };
  %642() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_5848(%var_5833: Tensor[(13, 16, 11), uint32]) -> (Tensor[(13, 16, 11), bool],) {
  %643 = cast(meta[relay.Constant][58] /* ty=Tensor[(13, 16, 11), uint32] */, dtype="bool") /* ty=Tensor[(13, 16, 11), bool] */;
  %644 = shape_of(%var_5833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%var_5833, dtype="bool") /* ty=Tensor[(13, 16, 11), bool] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %647 = not_equal(%645, %646) /* ty=Tensor[(13, 16, 11), bool] */;
  (%647,)
}

def @func_1320() -> (Tensor[(4, 15, 15), float32],) {
  %650 = fn () -> (Tensor[(4, 15, 15), float32],) {
    %648 = cast(meta[relay.Constant][59] /* ty=Tensor[(4, 15, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
    %649 = acosh(%648) /* ty=Tensor[(4, 15, 15), float32] */;
    (%649,)
  };
  %650() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_2988() -> Tensor[(4, 15, 15), float64] {
  @func_2986() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_9366() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) {
  %656 = fn () -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) {
    %651 = @func_9184() /* ty=Tensor[(4, 15, 15), float64] */;
    %652 = cast(%651, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
    %653 = @func_6568() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) */;
    %654 = asinh(%652) /* ty=Tensor[(4, 15, 15), float32] */;
    %655 = %653.1;
    (%654, %655)
  };
  %656() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) */
}

def @func_4827(%var_4826: float32) -> (Tensor[(9, 2, 12), bool], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) {
  %666 = fn (%var_4812: float32) -> (Tensor[(9, 2, 12), bool], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) {
    %657 = @func_3042() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) */;
    %658 = @func_2680() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %659 = @func_2680() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %660 = cast(%var_4812, dtype="float32") /* ty=float32 */;
    %661 = reshape(%660, newshape=[]) /* ty=float32 */;
    %662 = %657.1;
    %663 = %658.0;
    %664 = %659.0;
    %665 = @func_2936(%661) /* ty=Tensor[(9, 2, 12), bool] */;
    (%662, %663, %664, %665, %var_4812)
  };
  %666(%var_4826) /* ty=(Tensor[(9, 2, 12), bool], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) */
}

def @func_9160() -> Tensor[(4, 15, 15), float64] {
  @func_9029() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_4414(%var_4404: Tensor[(3, 2, 10), int16]) -> (Tensor[(3, 2, 10), bool],) {
  %667 = cast(meta[relay.Constant][60] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %668 = cast(%var_4404, dtype="bool") /* ty=Tensor[(3, 2, 10), bool] */;
  %669 = greater_equal(%667, %668) /* ty=Tensor[(3, 2, 10), bool] */;
  (%669,)
}

def @func_4704() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool]) {
  @func_4702() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool]) */
}

def @func_5646() -> (Tensor[(4, 15, 15), float32],) {
  %672 = fn () -> (Tensor[(4, 15, 15), float32],) {
    %670 = @func_2849() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %671 = %670.0;
    (%671,)
  };
  %672() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_8690() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], float32, Tensor[(4, 15, 15), float64]) {
  @func_8688() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], float32, Tensor[(4, 15, 15), float64]) */
}

def @func_7609() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  @func_7607() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_8880(%var_8851: Tensor[(60), int16]) -> (Tensor[(4, 15, 15), float32], Tensor[(3, 2, 10), bool], Tensor[(60), int16], Tensor[(3, 2, 10), bool]) {
  %673 = cast(%var_8851, dtype="int16") /* ty=Tensor[(60), int16] */;
  %674 = reshape(%673, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), int16] */;
  %675 = @func_4414(%674) /* ty=(Tensor[(3, 2, 10), bool],) */;
  %676 = cast(%var_8851, dtype="int16") /* ty=Tensor[(60), int16] */;
  %677 = reshape(%676, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), int16] */;
  %678 = @func_4414(%677) /* ty=(Tensor[(3, 2, 10), bool],) */;
  %679 = @func_2278() /* ty=Tensor[(4, 15, 15), float32] */;
  %680 = %675.0;
  %681 = %678.0;
  (%679, %680, %var_8851, %681)
}

def @func_7271() -> (Tensor[(4, 15, 15), float32],) {
  @func_7269() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_3431() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_3383() -> (Tensor[(4, 15, 15), float64], Tensor[(8, 7, 12), bool], Tensor[(84), int32], Tensor[(672), int32], Tensor[(4, 15, 15), float64]) {
  @func_3381() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 7, 12), bool], Tensor[(84), int32], Tensor[(672), int32], Tensor[(4, 15, 15), float64]) */
}

def @func_2514() -> Tensor[(4, 15, 15), float64] {
  @func_2512() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_5139() -> Tensor[(4, 15, 15), float64] {
  %682 = fn () -> Tensor[(4, 15, 15), float64] {
    @func_1759() /* ty=Tensor[(4, 15, 15), float64] */
  };
  %682() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_7149() -> Tensor[(4, 15, 15), float32] {
  @func_6099() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_3995() -> Tensor[(4, 15, 15), float64] {
  %683 = fn () -> Tensor[(4, 15, 15), float64] {
    @func_2512() /* ty=Tensor[(4, 15, 15), float64] */
  };
  %683() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_7727(%var_7725: float64, %var_7726: Tensor[(8, 1, 4), float64]) -> Tensor[(8, ?, 4), float64] {
  @func_7723(%var_7725, %var_7726) /* ty=Tensor[(8, ?, 4), float64] */
}

def @func_9029() -> Tensor[(4, 15, 15), float64] {
  @func_1915() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_7269() -> (Tensor[(4, 15, 15), float32],) {
  %684 = @func_4918() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) */;
  %685 = %684.0;
  (%685,)
}

def @func_7607() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %686 = @func_7506() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %687 = cast(meta[relay.Constant][61] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %688 = reshape(%687, newshape=[1800, 1]) /* ty=Tensor[(1800, 1), uint32] */;
  %689 = @func_2020(%688) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800, 1), uint32], Tensor[(13, 16, 14), bool]) */;
  %690 = @func_4434() /* ty=(Tensor[(4, 5, 1), float32], Tensor[(4, 15, 15), float32]) */;
  %691 = @func_2534() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %692 = @func_5546() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64], Tensor[(?, 7, 12), float64], Tensor[(84), float64]) */;
  %693 = @func_6209() /* ty=Tensor[(4, 15, 15), float64] */;
  %694 = %686.0;
  %695 = %689.2;
  %696 = %690.1;
  %697 = %691.2;
  %698 = %692.4;
  (%693, %694, %695, meta[relay.Constant][61] /* ty=Tensor[(1800), uint32] */, %696, %697, %698)
}

def @func_4878(%var_4876: Tensor[(84), int32], %var_4877: Tensor[(672), int32]) -> (Tensor[(9, 2, 12), bool], Tensor[(400), int64], Tensor[(33, 5), float64], Tensor[(84), int32], Tensor[(672), int32]) {
  %709 = fn (%var_4864: Tensor[(84), int32], %var_4865: Tensor[(672), int32]) -> (Tensor[(9, 2, 12), bool], Tensor[(400), int64], Tensor[(33, 5), float64], Tensor[(84), int32], Tensor[(672), int32]) {
    %699 = @func_3042() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) */;
    %700 = cast(meta[relay.Constant][62] /* ty=Tensor[(33, 5), float64] */, dtype="float64") /* ty=Tensor[(33, 5), float64] */;
    %701 = cast(%var_4864, dtype="int32") /* ty=Tensor[(84), int32] */;
    %702 = cast(%var_4865, dtype="int32") /* ty=Tensor[(672), int32] */;
    %703 = reshape(%700, newshape=[165]) /* ty=Tensor[(165), float64] */;
    %704 = reshape(%701, newshape=[84]) /* ty=Tensor[(84), int32] */;
    %705 = reshape(%702, newshape=[1, 672]) /* ty=Tensor[(1, 672), int32] */;
    %706 = @func_3087(%703, %704, %705) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(8, 7, 12), int32], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(1, 672), int32], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) */;
    %707 = %699.1;
    %708 = %706.7;
    (%707, %708, meta[relay.Constant][62] /* ty=Tensor[(33, 5), float64] */, %var_4864, %var_4865)
  };
  %709(%var_4876, %var_4877) /* ty=(Tensor[(9, 2, 12), bool], Tensor[(400), int64], Tensor[(33, 5), float64], Tensor[(84), int32], Tensor[(672), int32]) */
}

def @func_9520() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) {
  %717 = fn () -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) {
    %710 = @func_7913() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %711 = @func_6671() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %712 = @func_6976() /* ty=Tensor[(4, 15, 15), float64] */;
    %713 = @func_5191() /* ty=Tensor[(4, 15, 15), float64] */;
    %714 = %710.0;
    %715 = %711.1;
    %716 = @func_8089() /* ty=Tensor[(4, 15, 15), float32] */;
    (%712, %713, %714, %715, %716)
  };
  %717() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */
}

def @func_2703() -> Tensor[(4, 15, 15), float64] {
  @func_2701() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_9643() -> Tensor[(4, 15, 15), float64] {
  %718 = fn () -> Tensor[(4, 15, 15), float64] {
    @func_7069() /* ty=Tensor[(4, 15, 15), float64] */
  };
  %718() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_6002() -> (Tensor[(4, 15, 15), float32], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32]) {
  @func_6000() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32]) */
}

def @func_6121(%var_6120: Tensor[(16, 15, 11), float32]) -> (Tensor[(16, 15, 11), float32],) {
  %721 = fn (%var_6113: Tensor[(16, 15, 11), float32]) -> (Tensor[(16, 15, 11), float32],) {
    %719 = cast(%var_6113, dtype="float32") /* ty=Tensor[(16, 15, 11), float32] */;
    %720 = log10(%719) /* ty=Tensor[(16, 15, 11), float32] */;
    (%720,)
  };
  %721(%var_6120) /* ty=(Tensor[(16, 15, 11), float32],) */
}

def @func_340(%var_338: Tensor[(8, 16, 11), uint32], %var_339: Tensor[(2912), bool]) -> (Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) {
  @func_336(%var_338, %var_339) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */
}

def @func_5233() -> (Tensor[(4, 15, 15), float32],) {
  @func_5231() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_8287(%var_8257: Tensor[(108), float64], %var_8284: Tensor[(672), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(3, 6, 6), float64], Tensor[(108), float64], Tensor[(672), int32], Tensor[(84), int32], Tensor[(672), int32]) {
  %722 = @func_7506() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %723 = cast(%var_8257, dtype="float64") /* ty=Tensor[(108), float64] */;
  %724 = cast(%var_8257, dtype="float64") /* ty=Tensor[(108), float64] */;
  %725 = reshape(%723, newshape=[3, 6, 6]) /* ty=Tensor[(3, 6, 6), float64] */;
  %726 = reshape(%724, newshape=[3, 6, 6]) /* ty=Tensor[(3, 6, 6), float64] */;
  %727 = cast(meta[relay.Constant][63] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %728 = cast(%var_8284, dtype="int32") /* ty=Tensor[(672), int32] */;
  %729 = reshape(%727, newshape=[84]) /* ty=Tensor[(84), int32] */;
  %730 = reshape(%728, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %731 = @func_4875(%729, %730) /* ty=(Tensor[(9, 2, 12), bool], Tensor[(400), int64], Tensor[(33, 5), float64], Tensor[(84), int32], Tensor[(672), int32]) */;
  %732 = %722.0;
  %733 = @func_3561(%725, %726) /* ty=Tensor[(3, 6, 6), float64] */;
  %734 = %731.4;
  (%732, %733, %var_8257, %734, meta[relay.Constant][63] /* ty=Tensor[(84), int32] */, %var_8284)
}

def @func_1760() -> Tensor[(4, 15, 15), float64] {
  %736 = fn () -> Tensor[(4, 15, 15), float64] {
    %735 = @func_1510() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %735.0
  };
  %736() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_5231() -> (Tensor[(4, 15, 15), float32],) {
  %737 = @func_2576() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %738 = %737.0;
  (%738,)
}

def @func_4417(%var_4415: Tensor[(3, 2, 10), int16]) -> (Tensor[(3, 2, 10), bool],) {
  @func_4414(%var_4415) /* ty=(Tensor[(3, 2, 10), bool],) */
}

def @func_7507() -> (Tensor[(4, 15, 15), float32],) {
  %741 = fn () -> (Tensor[(4, 15, 15), float32],) {
    %739 = @func_1319() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %740 = %739.0;
    (%740,)
  };
  %741() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_8572() -> (Tensor[(4, 15, 15), float64],) {
  %744 = fn () -> (Tensor[(4, 15, 15), float64],) {
    %742 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %743 = %742.0;
    (%743,)
  };
  %744() /* ty=(Tensor[(4, 15, 15), float64],) */
}

def @func_4103() -> Tensor[(4, 15, 15), float64] {
  @func_4101() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_6977() -> Tensor[(4, 15, 15), float64] {
  %746 = fn () -> Tensor[(4, 15, 15), float64] {
    %745 = @func_6948() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %745.0
  };
  %746() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_3381() -> (Tensor[(4, 15, 15), float64], Tensor[(8, 7, 12), bool], Tensor[(84), int32], Tensor[(672), int32], Tensor[(4, 15, 15), float64]) {
  %747 = @func_2400() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %748 = cast(meta[relay.Constant][64] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %749 = cast(meta[relay.Constant][65] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %750 = reshape(%748, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), int32] */;
  %751 = reshape(%749, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %752 = @func_1040(%750, %751) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */;
  %753 = @func_1844() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %754 = %747.0;
  %755 = %752.1;
  %756 = %753.1;
  (%754, %755, meta[relay.Constant][64] /* ty=Tensor[(84), int32] */, meta[relay.Constant][65] /* ty=Tensor[(672), int32] */, %756)
}

def @func_2346(%var_2316: Tensor[(10, 7, 5), float32], %var_2331: Tensor[(84), int32]) -> (Tensor[(10, 7, 5), float32], Tensor[(8, 7, 12), int32], Tensor[(84), int32], Tensor[(672), int32]) {
  %757 = cast(%var_2316, dtype="float32") /* ty=Tensor[(10, 7, 5), float32] */;
  %758 = cast(%var_2331, dtype="int32") /* ty=Tensor[(84), int32] */;
  %759 = cast(meta[relay.Constant][66] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %760 = reshape(%758, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), int32] */;
  %761 = reshape(%759, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %762 = @func_1040(%760, %761) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */;
  %763 = erf(%757) /* ty=Tensor[(10, 7, 5), float32] */;
  %764 = %762.0;
  (%763, %764, %var_2331, meta[relay.Constant][66] /* ty=Tensor[(672), int32] */)
}

def @func_6263() -> (Tensor[(4, 15, 15), float64],) {
  @func_6261() /* ty=(Tensor[(4, 15, 15), float64],) */
}

def @func_1511() -> (Tensor[(4, 15, 15), float64],) {
  %769 = fn () -> (Tensor[(4, 15, 15), float64],) {
    %765 = @func_1319() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %766 = %765.0;
    %767 = cast(%766, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
    %768 = sin(%767) /* ty=Tensor[(4, 15, 15), float64] */;
    (%768,)
  };
  %769() /* ty=(Tensor[(4, 15, 15), float64],) */
}

def @func_7315() -> (Tensor[(4, 15, 15), float64],) {
  %772 = fn () -> (Tensor[(4, 15, 15), float64],) {
    %770 = @func_6734() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(1, 3, 16), float32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64]) */;
    %771 = %770.4;
    (%771,)
  };
  %772() /* ty=(Tensor[(4, 15, 15), float64],) */
}

def @func_2125(%var_2028: Tensor[(7, 8, 1), float64], %var_2050: Tensor[(7, 8, 8), float64], %var_2058: Tensor[(672), int32], %var_2072: Tensor[(48), float32], %var_2073: Tensor[(2912), bool], %var_2089: Tensor[(1800), uint32]) -> (Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) {
  %773 = cast(%var_2028, dtype="float64") /* ty=Tensor[(7, 8, 1), float64] */;
  %774 = atanh(%773) /* ty=Tensor[(7, 8, 1), float64] */;
  %775 = cast(%774, dtype="float32") /* ty=Tensor[(7, 8, 1), float32] */;
  %776 = cast(%var_2050, dtype="float32") /* ty=Tensor[(7, 8, 8), float32] */;
  %777 = cast(meta[relay.Constant][67] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %778 = cast(%var_2058, dtype="int32") /* ty=Tensor[(672), int32] */;
  %779 = reshape(%777, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), int32] */;
  %780 = reshape(%778, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %781 = @func_1040(%779, %780) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */;
  %782 = cast(%var_2072, dtype="float32") /* ty=Tensor[(48), float32] */;
  %783 = cast(%var_2073, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %784 = reshape(%782, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
  %785 = reshape(%783, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
  %786 = @func_471(%784, %785) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
  %787 = cast(%774, dtype="float64") /* ty=Tensor[(7, 8, 1), float64] */;
  %788 = cast(%var_2050, dtype="float64") /* ty=Tensor[(7, 8, 8), float64] */;
  %789 = cast(%var_2089, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %790 = cast(%var_2089, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %791 = reshape(%789, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %792 = reshape(%790, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %793 = @func_551(%791, %792) /* ty=(Tensor[(10, 15, 12), uint32],) */;
  %794 = cast(meta[relay.Constant][67] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %795 = cast(%var_2058, dtype="int32") /* ty=Tensor[(672), int32] */;
  %796 = reshape(%794, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), int32] */;
  %797 = reshape(%795, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %798 = @func_1040(%796, %797) /* ty=(Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) */;
  %799 = cast(%774, dtype="uint32") /* ty=Tensor[(7, 8, 1), uint32] */;
  %800 = cast(meta[relay.Constant][67] /* ty=Tensor[(84), int32] */, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %801 = cast(%var_2050, dtype="float32") /* ty=Tensor[(7, 8, 8), float32] */;
  %802 = maximum(%775, %776) /* ty=Tensor[(7, 8, 8), float32] */;
  %803 = %781.0;
  %804 = %786.1;
  %805 = divide(%787, %788) /* ty=Tensor[(7, 8, 8), float64] */;
  %806 = %793.0;
  %807 = %798.0;
  %808 = maximum(%799, %800) /* ty=Tensor[(7, 8, 84), uint32] */;
  %809 = acos(%801) /* ty=Tensor[(7, 8, 8), float32] */;
  (%802, %803, %var_2058, %804, %var_2072, %var_2073, %805, %806, %var_2089, %807, %808, %809)
}

def @func_4037() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %814 = fn () -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
    %810 = @func_2783() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %811 = @func_3282() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(104, 28), bool], Tensor[(2, 24), float32], Tensor[(2912), bool]) */;
    %812 = %810.0;
    %813 = %811.1;
    (%812, %813)
  };
  %814() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_7263(%var_7261: Tensor[(4, 12), float32], %var_7262: Tensor[(2912), bool]) -> (Tensor[(4, 15, 15), float64], Tensor[(84), int32], Tensor[(13, 16, 14), bool], Tensor[(4, 12), float32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64], Tensor[(84), int32]) {
  %829 = fn (%var_7242: Tensor[(4, 12), float32], %var_7243: Tensor[(2912), bool]) -> (Tensor[(4, 15, 15), float64], Tensor[(84), int32], Tensor[(13, 16, 14), bool], Tensor[(4, 12), float32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64], Tensor[(84), int32]) {
    %815 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %816 = @func_3852() /* ty=(Tensor[(84), int32],) */;
    %817 = cast(%var_7242, dtype="float32") /* ty=Tensor[(4, 12), float32] */;
    %818 = cast(%var_7243, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %819 = reshape(%817, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
    %820 = reshape(%818, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
    %821 = @func_471(%819, %820) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
    %822 = @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %823 = @func_3852() /* ty=(Tensor[(84), int32],) */;
    %824 = %815.0;
    %825 = %816.0;
    %826 = %821.1;
    %827 = %822.0;
    %828 = %823.0;
    (%824, %825, %826, %var_7242, %var_7243, %827, %828)
  };
  %829(%var_7261, %var_7262) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(84), int32], Tensor[(13, 16, 14), bool], Tensor[(4, 12), float32], Tensor[(2912), bool], Tensor[(4, 15, 15), float64], Tensor[(84), int32]) */
}

def @func_7738() -> (Tensor[(4, 15, 15), float32],) {
  %832 = fn () -> (Tensor[(4, 15, 15), float32],) {
    %830 = @func_3282() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(104, 28), bool], Tensor[(2, 24), float32], Tensor[(2912), bool]) */;
    %831 = %830.0;
    (%831,)
  };
  %832() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_3044() -> (Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) {
  @func_3042() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) */
}

def @func_7151() -> Tensor[(4, 15, 15), float32] {
  @func_7149() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_8091() -> Tensor[(4, 15, 15), float32] {
  @func_8089() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_4101() -> Tensor[(4, 15, 15), float64] {
  %833 = @func_2724() /* ty=Tensor[(4, 15, 15), float64] */;
  %834 = cast(%833, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  rsqrt(%834) /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_7914() -> (Tensor[(4, 15, 15), float32],) {
  %837 = fn () -> (Tensor[(4, 15, 15), float32],) {
    %835 = @func_6802() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %836 = %835.0;
    (%836,)
  };
  %837() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_8089() -> Tensor[(4, 15, 15), float32] {
  %838 = @func_6802() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %838.0
}

def @func_9698(%var_9696: Tensor[(11, 6, 12), uint8], %var_9697: Tensor[(324), int16]) -> (Tensor[(11, 6, 12), bool], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(3, 12, 9), float64], Tensor[(324), int16]) {
  %853 = fn (%var_9648: Tensor[(11, 6, 12), uint8], %var_9687: Tensor[(324), int16]) -> (Tensor[(11, 6, 12), bool], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(3, 12, 9), float64], Tensor[(324), int16]) {
    %839 = cast(meta[relay.Constant][68] /* ty=uint8 */, dtype="bool") /* ty=bool */;
    %840 = cast(%var_9648, dtype="bool") /* ty=Tensor[(11, 6, 12), bool] */;
    %841 = @func_4434() /* ty=(Tensor[(4, 5, 1), float32], Tensor[(4, 15, 15), float32]) */;
    %842 = @func_2446() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %843 = cast(%var_9687, dtype="int16") /* ty=Tensor[(324), int16] */;
    %844 = cast(%var_9687, dtype="int16") /* ty=Tensor[(324), int16] */;
    %845 = reshape(%843, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
    %846 = reshape(%844, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
    %847 = @func_4145(%845, %846) /* ty=(Tensor[(3, 12, 9), int16], float32, Tensor[(3, 12, 9), float64]) */;
    %848 = greater(%839, %840) /* ty=Tensor[(11, 6, 12), bool] */;
    %849 = %841.1;
    %850 = @func_9160() /* ty=Tensor[(4, 15, 15), float64] */;
    %851 = %842.1;
    %852 = %847.2;
    (%848, %849, %850, %851, %852, %var_9687)
  };
  %853(%var_9696, %var_9697) /* ty=(Tensor[(11, 6, 12), bool], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(3, 12, 9), float64], Tensor[(324), int16]) */
}

def @func_4702() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool]) {
  %854 = @func_3480() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %855 = @func_1510() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %856 = cast(meta[relay.Constant][69] /* ty=Tensor[(18, 100), uint32] */, dtype="uint32") /* ty=Tensor[(18, 100), uint32] */;
  %857 = cast(meta[relay.Constant][69] /* ty=Tensor[(18, 100), uint32] */, dtype="uint32") /* ty=Tensor[(18, 100), uint32] */;
  %858 = reshape(%856, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %859 = reshape(%857, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %860 = @func_551(%858, %859) /* ty=(Tensor[(10, 15, 12), uint32],) */;
  %861 = %860.0;
  %862 = cast(%861, dtype="bool") /* ty=Tensor[(10, 15, 12), bool] */;
  %863 = shape_of(meta[relay.Constant][69] /* ty=Tensor[(18, 100), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %864 = cast(meta[relay.Constant][69] /* ty=Tensor[(18, 100), uint32] */, dtype="bool") /* ty=Tensor[(18, 100), bool] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %866 = %854.1;
  %867 = %855.0;
  %868 = less(%864, %865) /* ty=Tensor[(18, 100), bool] */;
  (%866, %867, %868)
}

def @func_5977() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) {
  %869 = @func_5121() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %870 = @func_2849() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %871 = %869.0;
  %872 = %870.0;
  (%871, %872)
}

def @func_7069() -> Tensor[(4, 15, 15), float64] {
  %873 = @func_4702() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool]) */;
  %873.0
}

def @func_7389(%var_7388: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(12, ?, 8), float32], Tensor[(1800), uint32], Tensor[(?, 2912), int32], Tensor[(?, 2912), bool], Tensor[(2, 2912), float64]) {
  %902 = fn (%var_7347: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(12, ?, 8), float32], Tensor[(1800), uint32], Tensor[(?, 2912), int32], Tensor[(?, 2912), bool], Tensor[(2, 2912), float64]) {
    %874 = @func_1991() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %875 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 2912), bool] */, dtype="bool") /* ty=Tensor[(1, 2912), bool] */;
    %876 = cast(%var_7347, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %877 = reshape(%875, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
    %878 = reshape(%876, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %879 = @func_740(%877, %878) /* ty=(Tensor[(104, 28), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800), uint32], Tensor[(104, 28), bool], Tensor[(1800), uint32], Tensor[(12, ?, 8), uint64], Tensor[(12, ?, 8), float32]) */;
    %880 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 2912), bool] */, dtype="float32") /* ty=Tensor[(1, 2912), float32] */;
    %881 = atan(%880) /* ty=Tensor[(1, 2912), float32] */;
    %882 = cast(%881, dtype="int32") /* ty=Tensor[(1, 2912), int32] */;
    %883 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(1, 2912), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %884 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 2912), bool] */, dtype="int32") /* ty=Tensor[(1, 2912), int32] */;
    %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %886 = cast(%881, dtype="bool") /* ty=Tensor[(1, 2912), bool] */;
    %887 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(1, 2912), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %888 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 2912), bool] */, dtype="bool") /* ty=Tensor[(1, 2912), bool] */;
    %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %890 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 2912), bool] */, dtype="uint32") /* ty=Tensor[(1, 2912), uint32] */;
    %891 = shape_of(%881, dtype="int32") /* ty=Tensor[(2), int32] */;
    %892 = cast(%881, dtype="uint32") /* ty=Tensor[(1, 2912), uint32] */;
    %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %894 = subtract(%892, %893) /* ty=Tensor[(?, 2912), uint32] */;
    %895 = cast(%894, dtype="float64") /* ty=Tensor[(?, 2912), float64] */;
    %896 = cast(meta[relay.Constant][71] /* ty=Tensor[(2, 2912), uint32] */, dtype="float64") /* ty=Tensor[(2, 2912), float64] */;
    %897 = %874.1;
    %898 = %879.9;
    %899 = bitwise_xor(%884, %885) /* ty=Tensor[(?, 2912), int32] */;
    %900 = not_equal(%888, %889) /* ty=Tensor[(?, 2912), bool] */;
    %901 = mod(%895, %896) /* ty=Tensor[(2, 2912), float64] */;
    (%897, %898, %var_7347, %899, %900, %901)
  };
  %902(%var_7388) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(12, ?, 8), float32], Tensor[(1800), uint32], Tensor[(?, 2912), int32], Tensor[(?, 2912), bool], Tensor[(2, 2912), float64]) */
}

def @func_985(%var_982: Tensor[(2, 15, 16), int8], %var_983: Tensor[(2, 15, 16), int8], %var_984: Tensor[(2912), bool]) -> (Tensor[(2, 15, 16), int8], Tensor[(8, 16, 11), uint32], Tensor[(1408), uint32], Tensor[(2912), int32]) {
  %919 = fn (%var_956: Tensor[(2, 15, 16), int8], %var_957: Tensor[(2, 15, 16), int8], %var_963: Tensor[(2912), bool]) -> (Tensor[(2, 15, 16), int8], Tensor[(8, 16, 11), uint32], Tensor[(1408), uint32], Tensor[(2912), int32]) {
    %903 = cast(%var_957, dtype="int8") /* ty=Tensor[(2, 15, 16), int8] */;
    %904 = shape_of(%var_956, dtype="int32") /* ty=Tensor[(3), int32] */;
    %905 = cast(%var_956, dtype="int8") /* ty=Tensor[(2, 15, 16), int8] */;
    %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %907 = cast(meta[relay.Constant][72] /* ty=Tensor[(1408), uint32] */, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
    %908 = cast(%var_963, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %909 = reshape(%907, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint32] */;
    %910 = reshape(%908, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
    %911 = @func_336(%909, %910) /* ty=(Tensor[(8, 16, 11), uint32], Tensor[(13, 16, 14), bool], Tensor[(2912), bool], Tensor[(13, 16, 14), bool]) */;
    %912 = cast(meta[relay.Constant][73] /* ty=Tensor[(2912), bool] */, dtype="int32") /* ty=Tensor[(2912), int32] */;
    %913 = shape_of(%var_963, dtype="int32") /* ty=Tensor[(1), int32] */;
    %914 = cast(%var_963, dtype="int32") /* ty=Tensor[(2912), int32] */;
    %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?), int32] */;
    %916 = add(%905, %906) /* ty=Tensor[(2, 15, 16), int8] */;
    %917 = %911.0;
    %918 = bitwise_or(%914, %915) /* ty=Tensor[(2912), int32] */;
    (%916, %917, meta[relay.Constant][72] /* ty=Tensor[(1408), uint32] */, %918)
  };
  %919(%var_982, %var_983, %var_984) /* ty=(Tensor[(2, 15, 16), int8], Tensor[(8, 16, 11), uint32], Tensor[(1408), uint32], Tensor[(2912), int32]) */
}

def @func_743(%var_741: Tensor[(2912), bool], %var_742: Tensor[(1800), uint32]) -> (Tensor[(104, 28), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800), uint32], Tensor[(104, 28), bool], Tensor[(1800), uint32], Tensor[(12, ?, 8), uint64], Tensor[(12, ?, 8), float32]) {
  %960 = fn (%var_662: Tensor[(2912), bool], %var_674: Tensor[(1800), uint32]) -> (Tensor[(104, 28), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800), uint32], Tensor[(104, 28), bool], Tensor[(1800), uint32], Tensor[(12, ?, 8), uint64], Tensor[(12, ?, 8), float32]) {
    %920 = cast(meta[relay.Constant][74] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %921 = cast(%var_662, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %922 = reshape(%920, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
    %923 = reshape(%921, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
    %924 = @func_471(%922, %923) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
    %925 = cast(meta[relay.Constant][75] /* ty=Tensor[(352), uint8] */, dtype="uint8") /* ty=Tensor[(352), uint8] */;
    %926 = cast(%var_674, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %927 = reshape(%925, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint8] */;
    %928 = reshape(%926, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %929 = @func_593(%927, %928) /* ty=(Tensor[(4, 11, 8), int16], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(2912), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(2912), bool]) */;
    %930 = cast(meta[relay.Constant][74] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %931 = %924.2;
    %932 = cast(%931, dtype="bool") /* ty=Tensor[(104, 28), bool] */;
    %933 = reshape(%930, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
    %934 = reshape(%932, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
    %935 = @func_471(%933, %934) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
    %936 = cast(meta[relay.Constant][75] /* ty=Tensor[(352), uint8] */, dtype="uint8") /* ty=Tensor[(352), uint8] */;
    %937 = cast(%var_674, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %938 = reshape(%936, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint8] */;
    %939 = reshape(%937, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %940 = @func_593(%938, %939) /* ty=(Tensor[(4, 11, 8), int16], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(2912), bool], Tensor[(1408), uint32], Tensor[(2912), bool], Tensor[(2912), bool]) */;
    %941 = cast(meta[relay.Constant][76] /* ty=Tensor[(12, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(12, 1, 8), float64] */;
    %942 = sigmoid(%941) /* ty=Tensor[(12, 1, 8), float64] */;
    %943 = cast(meta[relay.Constant][76] /* ty=Tensor[(12, 1, 8), float64] */, dtype="uint64") /* ty=Tensor[(12, 1, 8), uint64] */;
    %944 = shape_of(%942, dtype="int32") /* ty=Tensor[(3), int32] */;
    %945 = cast(%942, dtype="uint64") /* ty=Tensor[(12, 1, 8), uint64] */;
    %946 = dyn.reshape(%943, %944, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %947 = cast(%942, dtype="float64") /* ty=Tensor[(12, 1, 8), float64] */;
    %948 = acosh(%947) /* ty=Tensor[(12, 1, 8), float64] */;
    %949 = cast(%942, dtype="float64") /* ty=Tensor[(12, 1, 8), float64] */;
    %950 = sqrt(%949) /* ty=Tensor[(12, 1, 8), float64] */;
    %951 = cast(%950, dtype="float32") /* ty=Tensor[(12, 1, 8), float32] */;
    %952 = shape_of(%948, dtype="int32") /* ty=Tensor[(3), int32] */;
    %953 = cast(%948, dtype="float32") /* ty=Tensor[(12, 1, 8), float32] */;
    %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %955 = %929.3;
    %956 = %935.2;
    %957 = %940.2;
    %958 = bitwise_xor(%945, %946) /* ty=Tensor[(12, ?, 8), uint64] */;
    %959 = floor_divide(%953, %954) /* ty=Tensor[(12, ?, 8), float32] */;
    (%931, meta[relay.Constant][74] /* ty=Tensor[(48), float32] */, %var_662, %955, meta[relay.Constant][75] /* ty=Tensor[(352), uint8] */, %var_674, %956, %957, %958, %959)
  };
  %960(%var_741, %var_742) /* ty=(Tensor[(104, 28), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(2912), bool], Tensor[(352), uint8], Tensor[(1800), uint32], Tensor[(104, 28), bool], Tensor[(1800), uint32], Tensor[(12, ?, 8), uint64], Tensor[(12, ?, 8), float32]) */
}

def @func_6261() -> (Tensor[(4, 15, 15), float64],) {
  %961 = @func_6252() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
  %962 = %961.0;
  (%962,)
}

def @func_8930(%var_8928: Tensor[(2, 8, 10), float64], %var_8929: Tensor[(2, 8, 10), float64]) -> (Tensor[(2, 8, 10), float64], Tensor[(13, 16, 14), bool], Tensor[(8, 364), bool]) {
  @func_8926(%var_8928, %var_8929) /* ty=(Tensor[(2, 8, 10), float64], Tensor[(13, 16, 14), bool], Tensor[(8, 364), bool]) */
}

def @func_6853(%var_6815: Tensor[(1, 14, 13), uint8]) -> (Tensor[(1, 14, 13), bool], Tensor[(1, 14, 13), bool]) {
  %963 = cast(meta[relay.Constant][77] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %964 = cast(%var_6815, dtype="uint8") /* ty=Tensor[(1, 14, 13), uint8] */;
  %965 = left_shift(%963, %964) /* ty=Tensor[(1, 14, 13), uint8] */;
  %966 = cast(%965, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %967 = cast(meta[relay.Constant][77] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %968 = cast(meta[relay.Constant][77] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %969 = cast(%var_6815, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %970 = greater_equal(%966, %967) /* ty=Tensor[(1, 14, 13), bool] */;
  %971 = not_equal(%968, %969) /* ty=Tensor[(1, 14, 13), bool] */;
  (%970, %971)
}

def @func_1688(%var_1685: Tensor[(3, 11, 7), float32], %var_1686: Tensor[(8, 60), int8], %var_1687: Tensor[(1, 2912), bool]) -> (Tensor[(3, 11, 7), bool], Tensor[(8, 16, 11), uint32], Tensor[(8, 60), int8], Tensor[(1, 2912), bool]) {
  %992 = fn (%var_1663: Tensor[(3, 11, 7), float32], %var_1670: Tensor[(8, 60), int8], %var_1671: Tensor[(1, 2912), bool]) -> (Tensor[(3, 11, 7), bool], Tensor[(8, 16, 11), uint32], Tensor[(8, 60), int8], Tensor[(1, 2912), bool]) {
    %972 = cast(meta[relay.Constant][78] /* ty=Tensor[(3, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 7), float64] */;
    %973 = erf(%972) /* ty=Tensor[(3, 11, 7), float64] */;
    %974 = cast(%973, dtype="float32") /* ty=Tensor[(3, 11, 7), float32] */;
    %975 = shape_of(meta[relay.Constant][78] /* ty=Tensor[(3, 11, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %976 = cast(meta[relay.Constant][78] /* ty=Tensor[(3, 11, 7), float64] */, dtype="float32") /* ty=Tensor[(3, 11, 7), float32] */;
    %977 = dyn.reshape(%974, %975, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %978 = multiply(%976, %977) /* ty=Tensor[(3, 11, 7), float32] */;
    %979 = cast(%var_1663, dtype="bool") /* ty=Tensor[(3, 11, 7), bool] */;
    %980 = shape_of(%978, dtype="int32") /* ty=Tensor[(3), int32] */;
    %981 = cast(%978, dtype="bool") /* ty=Tensor[(3, 11, 7), bool] */;
    %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %983 = cast(%var_1670, dtype="int8") /* ty=Tensor[(8, 60), int8] */;
    %984 = cast(%var_1670, dtype="int8") /* ty=Tensor[(8, 60), int8] */;
    %985 = cast(%var_1671, dtype="bool") /* ty=Tensor[(1, 2912), bool] */;
    %986 = reshape(%983, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), int8] */;
    %987 = reshape(%984, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), int8] */;
    %988 = reshape(%985, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
    %989 = @func_981(%986, %987, %988) /* ty=(Tensor[(2, 15, 16), int8], Tensor[(8, 16, 11), uint32], Tensor[(1408), uint32], Tensor[(2912), int32]) */;
    %990 = not_equal(%981, %982) /* ty=Tensor[(3, 11, 7), bool] */;
    %991 = %989.1;
    (%990, %991, %var_1670, %var_1671)
  };
  %992(%var_1685, %var_1686, %var_1687) /* ty=(Tensor[(3, 11, 7), bool], Tensor[(8, 16, 11), uint32], Tensor[(8, 60), int8], Tensor[(1, 2912), bool]) */
}

def @func_3092(%var_3089: Tensor[(165), float64], %var_3090: Tensor[(84), int32], %var_3091: Tensor[(1, 672), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(8, 7, 12), int32], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(1, 672), int32], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) {
  @func_3087(%var_3089, %var_3090, %var_3091) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(8, 7, 12), int32], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(1, 672), int32], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) */
}

def @func_3429() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %993 = @func_2300() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %994 = @func_2534() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %995 = %993.0;
  %996 = %994.2;
  (%995, %996)
}

def @func_4235(%var_4231: Tensor[(8, 5, 7), uint8], %var_4232: Tensor[(1, 56), float64], %var_4233: Tensor[(2912), bool], %var_4234: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(8, 5, 7), float32], Tensor[(8, 5, 7), int8], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(1, 56), float64], Tensor[(672), int32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(1800), uint32], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32]) {
  @func_4229(%var_4231, %var_4232, %var_4233, %var_4234) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(8, 5, 7), float32], Tensor[(8, 5, 7), int8], Tensor[(4, 15, 15), float64], Tensor[(2912), bool], Tensor[(1, 56), float64], Tensor[(672), int32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(1800), uint32], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32]) */
}

def @func_6000() -> (Tensor[(4, 15, 15), float32], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32]) {
  %997 = @func_5645() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %998 = cast(meta[relay.Constant][79] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %999 = cast(meta[relay.Constant][79] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %1000 = reshape(%998, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %1001 = reshape(%999, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %1002 = @func_551(%1000, %1001) /* ty=(Tensor[(10, 15, 12), uint32],) */;
  %1003 = %997.0;
  %1004 = %1002.0;
  (%1003, %1004, meta[relay.Constant][79] /* ty=Tensor[(1800), uint32] */)
}

def @func_4095() -> (Tensor[(4, 15, 15), float64],) {
  %1006 = fn () -> (Tensor[(4, 15, 15), float64],) {
    %1005 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
    (%1005,)
  };
  %1006() /* ty=(Tensor[(4, 15, 15), float64],) */
}

def @func_2278() -> Tensor[(4, 15, 15), float32] {
  @func_1864() /* ty=Tensor[(4, 15, 15), float32] */
}

def @func_6788() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %1007 = @func_1991() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %1008 = %1007.0;
  %1009 = @func_5138() /* ty=Tensor[(4, 15, 15), float64] */;
  (%1008, %1009)
}

def @func_4284(%var_4281: Tensor[(56), float64], %var_4282: Tensor[(2912), bool], %var_4283: Tensor[(1800), uint32]) -> (Tensor[(8, 2), float32], Tensor[(1800), uint32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(672), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(4, 15, 15), float32]) {
  %1028 = fn (%var_4269: Tensor[(56), float64], %var_4273: Tensor[(2912), bool], %var_4274: Tensor[(1800), uint32]) -> (Tensor[(8, 2), float32], Tensor[(1800), uint32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(672), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(4, 15, 15), float32]) {
    %1010 = @func_2636() /* ty=(Tensor[(8, 2), float32], Tensor[(4, 15, 15), float64]) */;
    %1011 = cast(%var_4269, dtype="float64") /* ty=Tensor[(56), float64] */;
    %1012 = cast(meta[relay.Constant][80] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
    %1013 = cast(meta[relay.Constant][81] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
    %1014 = cast(meta[relay.Constant][82] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %1015 = cast(%var_4273, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %1016 = cast(%var_4274, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %1017 = reshape(%1011, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), float64] */;
    %1018 = reshape(%1012, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
    %1019 = reshape(%1013, newshape=[672]) /* ty=Tensor[(672), int32] */;
    %1020 = reshape(%1014, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %1021 = reshape(%1015, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
    %1022 = reshape(%1016, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %1023 = @func_2125(%1017, %1018, %1019, %1020, %1021, %1022) /* ty=(Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) */;
    %1024 = @func_2849() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %1025 = %1010.0;
    %1026 = %1023.8;
    %1027 = %1024.0;
    (%1025, %1026, %var_4269, meta[relay.Constant][80] /* ty=Tensor[(448), float64] */, meta[relay.Constant][81] /* ty=Tensor[(672), int32] */, meta[relay.Constant][82] /* ty=Tensor[(48), float32] */, %var_4273, %var_4274, %1027)
  };
  %1028(%var_4281, %var_4282, %var_4283) /* ty=(Tensor[(8, 2), float32], Tensor[(1800), uint32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(672), int32], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(1800), uint32], Tensor[(4, 15, 15), float32]) */
}

def @func_3087(%var_3072: Tensor[(165), float64], %var_3074: Tensor[(84), int32], %var_3075: Tensor[(1, 672), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(8, 7, 12), int32], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(1, 672), int32], Tensor[(10, 10, 4), int64], Tensor[(400), int64]) {
  %1029 = @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %1030 = cast(%var_3072, dtype="float64") /* ty=Tensor[(165), float64] */;
  %1031 = cast(meta[relay.Constant][83] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %1032 = cast(%var_3074, dtype="int32") /* ty=Tensor[(84), int32] */;
  %1033 = cast(%var_3075, dtype="int32") /* ty=Tensor[(1, 672), int32] */;
  %1034 = reshape(%1030, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float64] */;
  %1035 = reshape(%1031, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %1036 = reshape(%1032, newshape=[84, 1]) /* ty=Tensor[(84, 1), int32] */;
  %1037 = reshape(%1033, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %1038 = @func_1124(%1034, %1035, %1036, %1037) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */;
  %1039 = cast(meta[relay.Constant][84] /* ty=Tensor[(400), int64] */, dtype="int64") /* ty=Tensor[(400), int64] */;
  %1040 = reshape(%1039, newshape=[10, 10, 4]) /* ty=Tensor[(10, 10, 4), int64] */;
  %1041 = %1029.0;
  %1042 = %1038.6;
  %1043 = @func_1619(%1040) /* ty=Tensor[(10, 10, 4), int64] */;
  (%1041, %1042, %var_3072, meta[relay.Constant][83] /* ty=Tensor[(480), int8] */, %var_3074, %var_3075, %1043, meta[relay.Constant][84] /* ty=Tensor[(400), int64] */)
}

def @func_4517(%var_4515: Tensor[(4, 15, 15), float64], %var_4516: Tensor[(4, 15, 15), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), bool]) {
  %1057 = fn (%var_4492: Tensor[(4, 15, 15), float64], %var_4507: Tensor[(4, 15, 15), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), bool]) {
    %1044 = @func_1844() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %1045 = %1044.1;
    %1046 = cast(%var_4492, dtype="int32") /* ty=Tensor[(4, 15, 15), int32] */;
    %1047 = shape_of(%1045, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1048 = cast(%1045, dtype="int32") /* ty=Tensor[(4, 15, 15), int32] */;
    %1049 = dyn.reshape(%1046, %1047, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1050 = left_shift(%1048, %1049) /* ty=Tensor[(4, 15, 15), int32] */;
    %1051 = cast(%var_4507, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
    %1052 = shape_of(%1050, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1053 = cast(%1050, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
    %1054 = dyn.reshape(%1051, %1052, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1055 = @func_3888() /* ty=Tensor[(4, 15, 15), float32] */;
    %1056 = greater_equal(%1053, %1054) /* ty=Tensor[(4, 15, 15), bool] */;
    (%1055, %1056)
  };
  %1057(%var_4515, %var_4516) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), bool]) */
}

def @func_1040(%var_999: Tensor[(1, 7, 12), int32], %var_1000: Tensor[(8, 7, 12), int32]) -> (Tensor[(8, 7, 12), int32], Tensor[(8, 7, 12), bool]) {
  %1058 = cast(%var_999, dtype="int32") /* ty=Tensor[(1, 7, 12), int32] */;
  %1059 = cast(%var_1000, dtype="int32") /* ty=Tensor[(8, 7, 12), int32] */;
  %1060 = cast(%var_999, dtype="bool") /* ty=Tensor[(1, 7, 12), bool] */;
  %1061 = cast(%var_1000, dtype="bool") /* ty=Tensor[(8, 7, 12), bool] */;
  %1062 = multiply(%1058, %1059) /* ty=Tensor[(8, 7, 12), int32] */;
  %1063 = greater(%1060, %1061) /* ty=Tensor[(8, 7, 12), bool] */;
  (%1062, %1063)
}

def @func_1739() -> (Tensor[(4, 15, 15), float32],) {
  %1064 = @func_1510() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %1065 = %1064.0;
  %1066 = cast(%1065, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
  %1067 = cosh(%1066) /* ty=Tensor[(4, 15, 15), float32] */;
  (%1067,)
}

def @func_1813() -> (Tensor[(4, 15, 15), float32],) {
  @func_1811() /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_3282() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(104, 28), bool], Tensor[(2, 24), float32], Tensor[(2912), bool]) {
  %1068 = @func_2849() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %1069 = @func_2446() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
  %1070 = @func_2636() /* ty=(Tensor[(8, 2), float32], Tensor[(4, 15, 15), float64]) */;
  %1071 = @func_1739() /* ty=(Tensor[(4, 15, 15), float32],) */;
  %1072 = cast(meta[relay.Constant][85] /* ty=Tensor[(2, 24), float32] */, dtype="float32") /* ty=Tensor[(2, 24), float32] */;
  %1073 = cast(meta[relay.Constant][86] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %1074 = reshape(%1072, newshape=[1, 3, 16]) /* ty=Tensor[(1, 3, 16), float32] */;
  %1075 = reshape(%1073, newshape=[104, 28]) /* ty=Tensor[(104, 28), bool] */;
  %1076 = @func_471(%1074, %1075) /* ty=(Tensor[(1, 3, 16), float32], Tensor[(13, 16, 14), bool], Tensor[(104, 28), bool]) */;
  %1077 = %1068.0;
  %1078 = %1069.1;
  %1079 = %1070.1;
  %1080 = %1071.0;
  %1081 = %1076.2;
  (%1077, %1078, %1079, %1080, %1081, meta[relay.Constant][85] /* ty=Tensor[(2, 24), float32] */, meta[relay.Constant][86] /* ty=Tensor[(2912), bool] */)
}

def @func_5729(%var_5697: bool, %var_5698: Tensor[(6, 3, 9), bool], %var_5705: Tensor[(84), int32], %var_5720: Tensor[(2912), bool]) -> (Tensor[(6, 3, 9), bool], Tensor[(84, 1), int32], Tensor[(165), float64], Tensor[(480), int8], Tensor[(84), int32], Tensor[(336, 2), float32], Tensor[(8, 16, 11), uint32], Tensor[(2912), bool]) {
  %1082 = cast(%var_5697, dtype="bool") /* ty=bool */;
  %1083 = cast(%var_5698, dtype="bool") /* ty=Tensor[(6, 3, 9), bool] */;
  %1084 = cast(meta[relay.Constant][87] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
  %1085 = cast(meta[relay.Constant][88] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %1086 = cast(%var_5705, dtype="int32") /* ty=Tensor[(84), int32] */;
  %1087 = cast(meta[relay.Constant][89] /* ty=Tensor[(336, 2), int32] */, dtype="int32") /* ty=Tensor[(336, 2), int32] */;
  %1088 = reshape(%1084, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float64] */;
  %1089 = reshape(%1085, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %1090 = reshape(%1086, newshape=[84, 1]) /* ty=Tensor[(84, 1), int32] */;
  %1091 = reshape(%1087, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %1092 = @func_1124(%1088, %1089, %1090, %1091) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */;
  %1093 = cast(meta[relay.Constant][89] /* ty=Tensor[(336, 2), int32] */, dtype="float32") /* ty=Tensor[(336, 2), float32] */;
  %1094 = cast(meta[relay.Constant][88] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %1095 = cast(meta[relay.Constant][88] /* ty=Tensor[(480), int8] */, dtype="int8") /* ty=Tensor[(480), int8] */;
  %1096 = cast(%var_5720, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %1097 = reshape(%1094, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), int8] */;
  %1098 = reshape(%1095, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), int8] */;
  %1099 = reshape(%1096, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
  %1100 = @func_981(%1097, %1098, %1099) /* ty=(Tensor[(2, 15, 16), int8], Tensor[(8, 16, 11), uint32], Tensor[(1408), uint32], Tensor[(2912), int32]) */;
  %1101 = logical_or(%1082, %1083) /* ty=Tensor[(6, 3, 9), bool] */;
  %1102 = %1092.7;
  %1103 = rsqrt(%1093) /* ty=Tensor[(336, 2), float32] */;
  %1104 = %1100.1;
  (%1101, %1102, meta[relay.Constant][87] /* ty=Tensor[(165), float64] */, meta[relay.Constant][88] /* ty=Tensor[(480), int8] */, %var_5705, %1103, %1104, %var_5720)
}

def @func_5192() -> Tensor[(4, 15, 15), float64] {
  %1106 = fn () -> Tensor[(4, 15, 15), float64] {
    %1105 = @func_3429() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %1105.1
  };
  %1106() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_6856(%var_6854: Tensor[(1, 14, 13), uint8]) -> (Tensor[(1, 14, 13), bool], Tensor[(1, 14, 13), bool]) {
  @func_6853(%var_6854) /* ty=(Tensor[(1, 14, 13), bool], Tensor[(1, 14, 13), bool]) */
}

def @func_6790() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  @func_6788() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_3754(%var_3750: Tensor[(165), float64], %var_3751: Tensor[(8, 60), int8], %var_3752: Tensor[(48), float32], %var_3753: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(11, 5, 3), float32], Tensor[(165), float64], Tensor[(8, 60), int8], Tensor[(84), int32], Tensor[(672), int32], Tensor[(48), float32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(1800), uint32]) {
  %1133 = fn (%var_3729: Tensor[(165), float64], %var_3730: Tensor[(8, 60), int8], %var_3740: Tensor[(48), float32], %var_3742: Tensor[(1800), uint32]) -> (Tensor[(4, 15, 15), float64], Tensor[(11, 5, 3), float32], Tensor[(165), float64], Tensor[(8, 60), int8], Tensor[(84), int32], Tensor[(672), int32], Tensor[(48), float32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(1800), uint32]) {
    %1107 = @func_2534() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %1108 = cast(%var_3729, dtype="float64") /* ty=Tensor[(165), float64] */;
    %1109 = cast(%var_3730, dtype="int8") /* ty=Tensor[(8, 60), int8] */;
    %1110 = cast(meta[relay.Constant][90] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
    %1111 = cast(meta[relay.Constant][91] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
    %1112 = reshape(%1108, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float64] */;
    %1113 = reshape(%1109, newshape=[480]) /* ty=Tensor[(480), int8] */;
    %1114 = reshape(%1110, newshape=[84, 1]) /* ty=Tensor[(84, 1), int32] */;
    %1115 = reshape(%1111, newshape=[672]) /* ty=Tensor[(672), int32] */;
    %1116 = @func_1124(%1112, %1113, %1114, %1115) /* ty=(Tensor[(11, 5, 3), float32], Tensor[(2912), int32], Tensor[(480), int8], Tensor[(8, 364), bool], Tensor[(13, 16, 14), bool], Tensor[(1408), uint32], Tensor[(8, 7, 12), int32], Tensor[(84, 1), int32], Tensor[(672), int32]) */;
    %1117 = cast(meta[relay.Constant][92] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %1118 = cast(meta[relay.Constant][93] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
    %1119 = cast(meta[relay.Constant][91] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
    %1120 = cast(%var_3740, dtype="float32") /* ty=Tensor[(48), float32] */;
    %1121 = cast(meta[relay.Constant][94] /* ty=Tensor[(2912), bool] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
    %1122 = cast(%var_3742, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %1123 = reshape(%1117, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), float64] */;
    %1124 = reshape(%1118, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
    %1125 = reshape(%1119, newshape=[672]) /* ty=Tensor[(672), int32] */;
    %1126 = reshape(%1120, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %1127 = reshape(%1121, newshape=[2912]) /* ty=Tensor[(2912), bool] */;
    %1128 = reshape(%1122, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
    %1129 = @func_2125(%1123, %1124, %1125, %1126, %1127, %1128) /* ty=(Tensor[(7, 8, 8), float32], Tensor[(8, 7, 12), int32], Tensor[(672), int32], Tensor[(13, 16, 14), bool], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(7, 8, 8), float64], Tensor[(10, 15, 12), uint32], Tensor[(1800), uint32], Tensor[(8, 7, 12), int32], Tensor[(7, 8, 84), uint32], Tensor[(7, 8, 8), float32]) */;
    %1130 = %1107.1;
    %1131 = %1116.0;
    %1132 = %1129.4;
    (%1130, %1131, %var_3729, %var_3730, meta[relay.Constant][90] /* ty=Tensor[(84), int32] */, meta[relay.Constant][91] /* ty=Tensor[(672), int32] */, %1132, meta[relay.Constant][92] /* ty=Tensor[(56), float64] */, meta[relay.Constant][93] /* ty=Tensor[(448), float64] */, %var_3740, meta[relay.Constant][94] /* ty=Tensor[(2912), bool] */, %var_3742)
  };
  %1133(%var_3750, %var_3751, %var_3752, %var_3753) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(11, 5, 3), float32], Tensor[(165), float64], Tensor[(8, 60), int8], Tensor[(84), int32], Tensor[(672), int32], Tensor[(48), float32], Tensor[(56), float64], Tensor[(448), float64], Tensor[(48), float32], Tensor[(2912), bool], Tensor[(1800), uint32]) */
}

def @func_6384() -> (Tensor[(4, 15, 15), float32], Tensor[(480), int8], Tensor[(231), float32], Tensor[(480), int8], Tensor[(2912), float64]) {
  @func_6382() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(480), int8], Tensor[(231), float32], Tensor[(480), int8], Tensor[(2912), float64]) */
}

def @func_79(%var_77: Tensor[(13, 16, 14), bool]) -> Tensor[(13, 16, 14), bool] {
  @func_76(%var_77) /* ty=Tensor[(13, 16, 14), bool] */
}

def @func_8780(%var_8778: Tensor[(1, 5, 5), uint16], %var_8779: Tensor[(8, 5, 5), uint16]) -> Tensor[(8, 5, 5), bool] {
  %1136 = fn (%var_8762: Tensor[(1, 5, 5), uint16], %var_8763: Tensor[(8, 5, 5), uint16]) -> Tensor[(8, 5, 5), bool] {
    %1134 = cast(%var_8762, dtype="bool") /* ty=Tensor[(1, 5, 5), bool] */;
    %1135 = cast(%var_8763, dtype="bool") /* ty=Tensor[(8, 5, 5), bool] */;
    greater_equal(%1134, %1135) /* ty=Tensor[(8, 5, 5), bool] */
  };
  %1136(%var_8778, %var_8779) /* ty=Tensor[(8, 5, 5), bool] */
}

def @func_9186() -> Tensor[(4, 15, 15), float64] {
  @func_9184() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_9582(%var_9581: Tensor[(324), int16]) -> (Tensor[(4, 15, 15), float32], Tensor[(3, 12, 9), float64], Tensor[(2912), float64], Tensor[(324), float32], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float32]) {
  %1153 = fn (%var_9530: Tensor[(324), int16]) -> (Tensor[(4, 15, 15), float32], Tensor[(3, 12, 9), float64], Tensor[(2912), float64], Tensor[(324), float32], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float32]) {
    %1137 = @func_5802() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(231), float32], Tensor[(4, 15, 15), float64]) */;
    %1138 = cast(%var_9530, dtype="int16") /* ty=Tensor[(324), int16] */;
    %1139 = cast(%var_9530, dtype="int16") /* ty=Tensor[(324), int16] */;
    %1140 = reshape(%1138, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
    %1141 = reshape(%1139, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
    %1142 = @func_4145(%1140, %1141) /* ty=(Tensor[(3, 12, 9), int16], float32, Tensor[(3, 12, 9), float64]) */;
    %1143 = @func_6382() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(480), int8], Tensor[(231), float32], Tensor[(480), int8], Tensor[(2912), float64]) */;
    %1144 = cast(%var_9530, dtype="float32") /* ty=Tensor[(324), float32] */;
    %1145 = @func_9090() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %1146 = @func_9519() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
    %1147 = %1137.0;
    %1148 = %1142.2;
    %1149 = %1143.4;
    %1150 = rsqrt(%1144) /* ty=Tensor[(324), float32] */;
    %1151 = %1145.0;
    %1152 = %1146.2;
    (%1147, %1148, %1149, %1150, %1151, %1152)
  };
  %1153(%var_9581) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(3, 12, 9), float64], Tensor[(2912), float64], Tensor[(324), float32], Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float32]) */
}

def @main(%var_9721: Tensor[(11, 2, 15), int8], %var_9722: Tensor[(11, 2, 15), int8]) -> (Tensor[(11, 2, 15), bool], Tensor[(324), int16], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(11, 2, 15), uint8]) {
  %1154 = cast(%var_9722, dtype="bool") /* ty=Tensor[(11, 2, 15), bool] */;
  %1155 = shape_of(%var_9721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1156 = cast(%var_9721, dtype="bool") /* ty=Tensor[(11, 2, 15), bool] */;
  %1157 = dyn.reshape(%1154, %1155, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1158 = @func_7315() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %1159 = @func_4095() /* ty=(Tensor[(4, 15, 15), float64],) */;
  %1160 = cast(meta[relay.Constant][95] /* ty=Tensor[(324), int16] */, dtype="int16") /* ty=Tensor[(324), int16] */;
  %1161 = cast(meta[relay.Constant][95] /* ty=Tensor[(324), int16] */, dtype="int16") /* ty=Tensor[(324), int16] */;
  %1162 = reshape(%1160, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
  %1163 = reshape(%1161, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
  %1164 = @func_4149(%1162, %1163) /* ty=(Tensor[(3, 12, 9), int16], float32, Tensor[(3, 12, 9), float64]) */;
  %1165 = %1164.1;
  %1166 = cast(%var_9722, dtype="uint8") /* ty=Tensor[(11, 2, 15), uint8] */;
  %1167 = cast(%1165, dtype="uint8") /* ty=uint8 */;
  %1168 = greater(%1156, %1157) /* ty=Tensor[(11, 2, 15), bool] */;
  %1169 = %1158.0;
  %1170 = %1159.0;
  %1171 = @func_8089() /* ty=Tensor[(4, 15, 15), float32] */;
  %1172 = multiply(%1166, %1167) /* ty=Tensor[(11, 2, 15), uint8] */;
  (%1168, meta[relay.Constant][95] /* ty=Tensor[(324), int16] */, %1169, %1170, %1171, %1172)
}

def @func_2939(%var_2937: float32) -> Tensor[(9, 2, 12), bool] {
  @func_2936(%var_2937) /* ty=Tensor[(9, 2, 12), bool] */
}

def @func_9031() -> Tensor[(4, 15, 15), float64] {
  @func_9029() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_4344(%var_4343: Tensor[(108), float64]) -> (Tensor[(4, 15, 15), float64], Tensor[(3, 6, 6), uint32], Tensor[(4, 15, 15), float64]) {
  %1187 = fn (%var_4311: Tensor[(108), float64]) -> (Tensor[(4, 15, 15), float64], Tensor[(3, 6, 6), uint32], Tensor[(4, 15, 15), float64]) {
    %1173 = @func_2400() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %1174 = cast(%var_4311, dtype="float64") /* ty=Tensor[(108), float64] */;
    %1175 = cast(%var_4311, dtype="float64") /* ty=Tensor[(108), float64] */;
    %1176 = reshape(%1174, newshape=[3, 6, 6]) /* ty=Tensor[(3, 6, 6), float64] */;
    %1177 = reshape(%1175, newshape=[3, 6, 6]) /* ty=Tensor[(3, 6, 6), float64] */;
    %1178 = @func_3561(%1176, %1177) /* ty=Tensor[(3, 6, 6), float64] */;
    %1179 = cast(%var_4311, dtype="uint32") /* ty=Tensor[(108), uint32] */;
    %1180 = shape_of(%1178, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1181 = cast(%1178, dtype="uint32") /* ty=Tensor[(3, 6, 6), uint32] */;
    %1182 = dyn.reshape(%1179, %1180, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1183 = @func_2534() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %1184 = %1173.0;
    %1185 = add(%1181, %1182) /* ty=Tensor[(3, 6, 6), uint32] */;
    %1186 = %1183.0;
    (%1184, %1185, %1186)
  };
  %1187(%var_4343) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(3, 6, 6), uint32], Tensor[(4, 15, 15), float64]) */
}

def @func_2637() -> (Tensor[(8, 2), float32], Tensor[(4, 15, 15), float64]) {
  %1192 = fn () -> (Tensor[(8, 2), float32], Tensor[(4, 15, 15), float64]) {
    %1188 = cast(meta[relay.Constant][96] /* ty=Tensor[(8, 2), float32] */, dtype="float32") /* ty=Tensor[(8, 2), float32] */;
    %1189 = @func_2376() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %1190 = exp(%1188) /* ty=Tensor[(8, 2), float32] */;
    %1191 = %1189.0;
    (%1190, %1191)
  };
  %1192() /* ty=(Tensor[(8, 2), float32], Tensor[(4, 15, 15), float64]) */
}

def @func_4621(%var_4619: Tensor[(165), float64], %var_4620: Tensor[(336, 2), int32]) -> (Tensor[(4, 15, 15), float32], Tensor[(40, 12), int8], Tensor[(8, 364), bool], Tensor[(165), float64], Tensor[(84), int32], Tensor[(336, 2), int32], Tensor[(104, 28), bool], Tensor[(48), float32]) {
  @func_4617(%var_4619, %var_4620) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(40, 12), int8], Tensor[(8, 364), bool], Tensor[(165), float64], Tensor[(84), int32], Tensor[(336, 2), int32], Tensor[(104, 28), bool], Tensor[(48), float32]) */
}

def @func_1845() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
  %1195 = fn () -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) {
    %1193 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
    %1194 = @func_1759() /* ty=Tensor[(4, 15, 15), float64] */;
    (%1193, %1194)
  };
  %1195() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */
}

def @func_4920() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) {
  @func_4918() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) */
}

def @func_7289() -> Tensor[(4, 15, 15), float64] {
  %1197 = fn () -> Tensor[(4, 15, 15), float64] {
    %1196 = @func_6948() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %1196.0
  };
  %1197() /* ty=Tensor[(4, 15, 15), float64] */
}

def @func_5924() -> (Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32], Tensor[(4, 5, 1), float32]) {
  %1198 = @func_5802() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(231), float32], Tensor[(4, 15, 15), float64]) */;
  %1199 = @func_4434() /* ty=(Tensor[(4, 5, 1), float32], Tensor[(4, 15, 15), float32]) */;
  %1200 = %1198.2;
  %1201 = @func_5014() /* ty=Tensor[(4, 15, 15), float32] */;
  %1202 = %1199.0;
  (%1200, %1201, %1202)
}

def @func_8206(%var_8204: Tensor[(405), uint64], %var_8205: Tensor[(18), float32]) -> (Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool], Tensor[(9), uint64], Tensor[(405), uint64], Tensor[(18), float32]) {
  %1212 = fn (%var_8188: Tensor[(405), uint64], %var_8189: Tensor[(18), float32]) -> (Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool], Tensor[(9), uint64], Tensor[(405), uint64], Tensor[(18), float32]) {
    %1203 = cast(meta[relay.Constant][97] /* ty=Tensor[(9), uint64] */, dtype="uint64") /* ty=Tensor[(9), uint64] */;
    %1204 = cast(%var_8188, dtype="uint64") /* ty=Tensor[(405), uint64] */;
    %1205 = cast(%var_8189, dtype="float32") /* ty=Tensor[(18), float32] */;
    %1206 = reshape(%1203, newshape=[1, 1, 9]) /* ty=Tensor[(1, 1, 9), uint64] */;
    %1207 = reshape(%1204, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), uint64] */;
    %1208 = reshape(%1205, newshape=[2, 1, 9]) /* ty=Tensor[(2, 1, 9), float32] */;
    %1209 = @func_7560(%1206, %1207, %1208) /* ty=(Tensor[(15, 3, 9), uint32], Tensor[(18, 100), bool], Tensor[(2, 1, 9), float32]) */;
    %1210 = @func_6655() /* ty=Tensor[(4, 15, 15), float64] */;
    %1211 = %1209.1;
    (%1210, %1211, meta[relay.Constant][97] /* ty=Tensor[(9), uint64] */, %var_8188, %var_8189)
  };
  %1212(%var_8204, %var_8205) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(18, 100), bool], Tensor[(9), uint64], Tensor[(405), uint64], Tensor[(18), float32]) */
}

def @func_7723(%var_7692: float64, %var_7693: Tensor[(8, 1, 4), float64]) -> Tensor[(8, ?, 4), float64] {
  %1213 = cast(%var_7692, dtype="float64") /* ty=float64 */;
  %1214 = cast(%var_7693, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %1215 = floor_divide(%1213, %1214) /* ty=Tensor[(8, 1, 4), float64] */;
  %1216 = cast(%1215, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %1217 = cast(%var_7692, dtype="float64") /* ty=float64 */;
  %1218 = mod(%1216, %1217) /* ty=Tensor[(8, 1, 4), float64] */;
  %1219 = cast(%1218, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %1220 = shape_of(%1215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1221 = cast(%1215, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %1222 = dyn.reshape(%1219, %1220, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%1221, %1222) /* ty=Tensor[(8, ?, 4), float64] */
}

def @func_7487(%var_7484: Tensor[(9, 2, 12), bool], %var_7485: Tensor[(165), float64], %var_7486: Tensor[(324), int16]) -> (Tensor[(4, 15, 15), float32], Tensor[(9, 2, 12), float32], Tensor[(48), float32], Tensor[(165), float64], Tensor[(4, 15, 15), float64], Tensor[(?, 7, 12), float64], Tensor[(84), float64], Tensor[(9, 2, 12), int64], float32, Tensor[(324), int16]) {
  %1252 = fn (%var_7451: Tensor[(9, 2, 12), bool], %var_7457: Tensor[(165), float64], %var_7477: Tensor[(324), int16]) -> (Tensor[(4, 15, 15), float32], Tensor[(9, 2, 12), float32], Tensor[(48), float32], Tensor[(165), float64], Tensor[(4, 15, 15), float64], Tensor[(?, 7, 12), float64], Tensor[(84), float64], Tensor[(9, 2, 12), int64], float32, Tensor[(324), int16]) {
    %1223 = @func_5977() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float32]) */;
    %1224 = @func_3042() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(9, 2, 12), bool], float32) */;
    %1225 = %1224.1;
    %1226 = cast(%var_7451, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
    %1227 = shape_of(%1225, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1228 = cast(%1225, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
    %1229 = dyn.reshape(%1226, %1227, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1230 = cast(%var_7457, dtype="float64") /* ty=Tensor[(165), float64] */;
    %1231 = reshape(%1230, newshape=[11, 15]) /* ty=Tensor[(11, 15), float64] */;
    %1232 = @func_5495(%1231) /* ty=(Tensor[(4, 15, 15), float64], Tensor[(48), float32], Tensor[(11, 15), float64], Tensor[(8, 84), int32]) */;
    %1233 = @func_5121() /* ty=(Tensor[(4, 15, 15), float64],) */;
    %1234 = cast(meta[relay.Constant][98] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
    %1235 = reshape(%1234, newshape=[1, 7, 12]) /* ty=Tensor[(1, 7, 12), float64] */;
    %1236 = cast(%1225, dtype="int64") /* ty=Tensor[(9, 2, 12), int64] */;
    %1237 = shape_of(%var_7451, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1238 = cast(%var_7451, dtype="int64") /* ty=Tensor[(9, 2, 12), int64] */;
    %1239 = dyn.reshape(%1236, %1237, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1240 = cast(%var_7477, dtype="int16") /* ty=Tensor[(324), int16] */;
    %1241 = cast(%var_7477, dtype="int16") /* ty=Tensor[(324), int16] */;
    %1242 = reshape(%1240, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
    %1243 = reshape(%1241, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), int16] */;
    %1244 = @func_4145(%1242, %1243) /* ty=(Tensor[(3, 12, 9), int16], float32, Tensor[(3, 12, 9), float64]) */;
    %1245 = %1223.1;
    %1246 = power(%1228, %1229) /* ty=Tensor[(9, 2, 12), float32] */;
    %1247 = %1232.1;
    %1248 = %1233.0;
    %1249 = @func_2185(%1235) /* ty=Tensor[(?, 7, 12), float64] */;
    %1250 = maximum(%1238, %1239) /* ty=Tensor[(9, 2, 12), int64] */;
    %1251 = %1244.1;
    (%1245, %1246, %1247, %var_7457, %1248, %1249, meta[relay.Constant][98] /* ty=Tensor[(84), float64] */, %1250, %1251, %var_7477)
  };
  %1252(%var_7484, %var_7485, %var_7486) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(9, 2, 12), float32], Tensor[(48), float32], Tensor[(165), float64], Tensor[(4, 15, 15), float64], Tensor[(?, 7, 12), float64], Tensor[(84), float64], Tensor[(9, 2, 12), int64], float32, Tensor[(324), int16]) */
}

def @func_2376() -> (Tensor[(4, 15, 15), float64],) {
  %1253 = @func_2265() /* ty=Tensor[(4, 15, 15), float64] */;
  (%1253,)
}

def @func_2350(%var_2348: Tensor[(10, 7, 5), float32], %var_2349: Tensor[(84), int32]) -> (Tensor[(10, 7, 5), float32], Tensor[(8, 7, 12), int32], Tensor[(84), int32], Tensor[(672), int32]) {
  @func_2346(%var_2348, %var_2349) /* ty=(Tensor[(10, 7, 5), float32], Tensor[(8, 7, 12), int32], Tensor[(84), int32], Tensor[(672), int32]) */
}

def @func_6569() -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) {
  %1257 = fn () -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) {
    %1254 = @func_5645() /* ty=(Tensor[(4, 15, 15), float32],) */;
    %1255 = %1254.0;
    %1256 = @func_1915() /* ty=Tensor[(4, 15, 15), float64] */;
    (%1255, %1256)
  };
  %1257() /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), float64]) */
}

def @func_8386() -> (Tensor[(4, 15, 15), float64],) {
  %1260 = fn () -> (Tensor[(4, 15, 15), float64],) {
    %1258 = @func_6788() /* ty=(Tensor[(4, 15, 15), float64], Tensor[(4, 15, 15), float64]) */;
    %1259 = %1258.1;
    (%1259,)
  };
  %1260() /* ty=(Tensor[(4, 15, 15), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen497/build/output.py", line 3410, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:24:16] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

