==========mod==========
#[version = "0.0.5"]
def @func_3789() -> (Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(108), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), bool]) {
  %0 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %2 = %0.1;
  %3 = cast(%2, dtype="float64") /* ty=Tensor[(140), float64] */;
  %4 = reshape(%1, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %5 = reshape(%3, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %6 = @func_212(%4, %5) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %7 = @func_1242() /* ty=Tensor[(9, 6, 2), uint32] */;
  %8 = cast(%7, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
  %9 = reshape(%8, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), int8] */;
  %10 = @func_614(%9) /* ty=(Tensor[(9, 6, 2), bool],) */;
  %11 = %6.2;
  %12 = %10.0;
  (%2, %11, meta[relay.Constant][0] /* ty=Tensor[(108), float32] */, %7, %12)
}

def @func_1684(%var_1667: Tensor[(9, 6, 2), uint32]) -> (Tensor[(9, 6, 2), uint32],) {
  %13 = @func_646() /* ty=Tensor[(9, 6, 2), uint32] */;
  %14 = cast(%var_1667, dtype="uint32") /* ty=Tensor[(9, 6, 2), uint32] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="uint32") /* ty=Tensor[(9, 6, 2), uint32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %18 = subtract(%16, %17) /* ty=Tensor[(9, 6, 2), uint32] */;
  (%18,)
}

def @func_5597() -> (Tensor[(9, 6, 2), float32],) {
  %19 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  (%19,)
}

def @func_6335(%var_6318: Tensor[(252), float32], %var_6329: Tensor[(15, 1), uint8]) -> (uint8, Tensor[(9, 6, 2), int32], Tensor[(252), float32], uint8, Tensor[(15, 1), bool]) {
  %20 = @func_5755() /* ty=(uint8, Tensor[(140), float64]) */;
  %21 = cast(%var_6318, dtype="float32") /* ty=Tensor[(252), float32] */;
  %22 = reshape(%21, newshape=[252]) /* ty=Tensor[(252), float32] */;
  %23 = @func_863(%22) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(14, 2, 5), uint64], uint8) */;
  %24 = @func_4582() /* ty=(uint8,) */;
  %25 = @func_5755() /* ty=(uint8, Tensor[(140), float64]) */;
  %26 = %25.0;
  %27 = cast(%26, dtype="bool") /* ty=bool */;
  %28 = cast(%var_6329, dtype="bool") /* ty=Tensor[(15, 1), bool] */;
  %29 = %20.0;
  %30 = %23.1;
  %31 = %24.0;
  %32 = greater(%27, %28) /* ty=Tensor[(15, 1), bool] */;
  (%29, %30, %var_6318, %31, %32)
}

def @func_7388() -> (Tensor[(9, 6, 2), int8],) {
  %33 = @func_2777() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) */;
  %34 = %33.1;
  (%34,)
}

def @func_6902() -> Tensor[(140), float64] {
  %35 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
  %36 = %35.1;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(140), float64] */;
  sinh(%37) /* ty=Tensor[(140), float64] */
}

def @func_818() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) {
  %38 = @func_694() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32]) */;
  %39 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %40 = %38.0;
  (%39, %40)
}

def @func_2204() -> Tensor[(14, 2, 5), uint64] {
  %41 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
  %41.1
}

def @func_2430(%var_2402: Tensor[(5, 28), float64]) -> (Tensor[(9, 6, 2), bool], Tensor[(5, 28), float64], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) {
  %42 = @func_2191() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), bool]) */;
  %43 = %42.1;
  %44 = cast(%43, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %45 = reshape(%44, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %46 = cast(%var_2402, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %47 = reshape(%46, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %48 = @func_1041(%47) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], Tensor[(140), float64]) */;
  %49 = %48.0;
  %50 = cast(%49, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %51 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %52 = @func_1515(%45) /* ty=Tensor[(9, 6, 2), int32] */;
  %53 = acosh(%50) /* ty=Tensor[(9, 6, 2), float32] */;
  %54 = %51.1;
  (%43, %var_2402, %52, %53, %54)
}

def @func_2299(%var_2290: float64, %var_2291: Tensor[(14, 11, 13), float64]) -> Tensor[(14, 11, 13), float64] {
  %55 = cast(%var_2290, dtype="float64") /* ty=float64 */;
  %56 = cast(%var_2291, dtype="float64") /* ty=Tensor[(14, 11, 13), float64] */;
  add(%55, %56) /* ty=Tensor[(14, 11, 13), float64] */
}

def @func_4130() -> Tensor[(9, 6, 2), uint32] {
  %57 = @func_3789() /* ty=(Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(108), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), bool]) */;
  %57.3
}

def @func_6173() -> (Tensor[(15, 4, 13), float64],) {
  %58 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 4, 13), float64] */, dtype="float64") /* ty=Tensor[(15, 4, 13), float64] */;
  %59 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(15, 4, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 4, 13), float64] */, dtype="float64") /* ty=Tensor[(15, 4, 13), float64] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %62 = power(%60, %61) /* ty=Tensor[(15, 4, 13), float64] */;
  (%62,)
}

def @func_6221() -> (Tensor[(9, 6, 2), int8],) {
  %63 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %64 = %63.0;
  (%64,)
}

def @func_6789(%var_6783: Tensor[(10, 14, 16), float64]) -> Tensor[(10, 14, 16), float64] {
  %65 = cast(%var_6783, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
  atan(%65) /* ty=Tensor[(10, 14, 16), float64] */
}

def @func_2777() -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) {
  %66 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %68 = cast(%66, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %69 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %70 = reshape(%67, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %71 = reshape(%68, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %72 = reshape(%69, newshape=[1, 252]) /* ty=Tensor[(1, 252), float32] */;
  %73 = @func_450(%70, %71, %72) /* ty=(Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(1, 252), float32], Tensor[(140), float64]) */;
  %74 = %73.1;
  (%66, %74, meta[relay.Constant][3] /* ty=Tensor[(252), float32] */)
}

def @func_6074(%var_6068: Tensor[(242), int64]) -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(11, 11, 2), int64], Tensor[(22), int64], Tensor[(242), int64], Tensor[(9, 6, 2), int16]) {
  %75 = @func_4238() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %76 = @func_4931() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */;
  %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(22), int64] */, dtype="int64") /* ty=Tensor[(22), int64] */;
  %78 = cast(%var_6068, dtype="int64") /* ty=Tensor[(242), int64] */;
  %79 = reshape(%77, newshape=[11, 1, 2]) /* ty=Tensor[(11, 1, 2), int64] */;
  %80 = reshape(%78, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), int64] */;
  %81 = @func_1781(%79, %80) /* ty=(Tensor[(11, 11, 2), int64], Tensor[(9, 6, 2), bool]) */;
  %82 = %75.0;
  %83 = %76.2;
  %84 = %81.0;
  %85 = @func_5180() /* ty=Tensor[(9, 6, 2), int16] */;
  (%82, %83, %84, meta[relay.Constant][4] /* ty=Tensor[(22), int64] */, %var_6068, %85)
}

def @func_971() -> (Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) {
  %86 = cast(meta[relay.Constant][5] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %87 = cast(meta[relay.Constant][5] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %88 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %90 = cast(meta[relay.Constant][6] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %91 = reshape(%86, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), float32] */;
  %92 = reshape(%87, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), float32] */;
  %93 = reshape(%89, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %94 = reshape(%90, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %95 = @func_349(%91, %92, %93, %94) /* ty=(Tensor[(14, 2, 9), float32], Tensor[(14, 2, 9), float64], Tensor[(9, 6, 2), float32], Tensor[(108), float32], Tensor[(140), float64], Tensor[(14, 2, 9), float64], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) */;
  %96 = %95.6;
  (%88, %96, meta[relay.Constant][5] /* ty=Tensor[(252), float32] */, meta[relay.Constant][6] /* ty=Tensor[(140), float64] */)
}

def @func_6988(%var_6959: Tensor[(242), int64]) -> (Tensor[(9, 6, 2), float64], Tensor[(242), int64], Tensor[(11, 11, 2), bool]) {
  %97 = @func_2721() /* ty=(Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64]) */;
  %98 = cast(%var_6959, dtype="int64") /* ty=Tensor[(242), int64] */;
  %99 = reshape(%98, newshape=[242]) /* ty=Tensor[(242), int64] */;
  %100 = @func_6074(%99) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(11, 11, 2), int64], Tensor[(22), int64], Tensor[(242), int64], Tensor[(9, 6, 2), int16]) */;
  %101 = %100.2;
  %102 = cast(%101, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %103 = log2(%102) /* ty=Tensor[(11, 11, 2), float64] */;
  %104 = cast(%103, dtype="bool") /* ty=Tensor[(11, 11, 2), bool] */;
  %105 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%101, dtype="bool") /* ty=Tensor[(11, 11, 2), bool] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %108 = %97.2;
  %109 = less_equal(%106, %107) /* ty=Tensor[(11, 11, 2), bool] */;
  (%108, %var_6959, %109)
}

def @func_1467() -> (Tensor[(252), float32],) {
  %110 = @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */;
  %111 = %110.2;
  (%111,)
}

def @func_3203() -> Tensor[(9, 6, 2), float64] {
  @func_1178() /* ty=Tensor[(9, 6, 2), float64] */
}

def @func_1079() -> (Tensor[(9, 6, 2), float64],) {
  %112 = @func_646() /* ty=Tensor[(9, 6, 2), uint32] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
  %114 = cosh(%113) /* ty=Tensor[(9, 6, 2), float64] */;
  (%114,)
}

def @func_9192() -> (Tensor[(252), float32], Tensor[(252), float32], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) {
  %115 = @func_1467() /* ty=(Tensor[(252), float32],) */;
  %116 = %115.0;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(252), float32] */;
  %118 = @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */;
  %119 = @func_4238() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %120 = @func_2997() /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) */;
  %121 = sigmoid(%117) /* ty=Tensor[(252), float32] */;
  %122 = %118.2;
  %123 = %119.0;
  %124 = %120.1;
  (%121, %122, %123, %124)
}

def @func_8158(%var_8138: Tensor[(585), float64]) -> (Tensor[(585), float32], Tensor[(585), uint32]) {
  %125 = @func_4526() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(585), int32]) */;
  %126 = %125.2;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(585), float32] */;
  %128 = cast(%126, dtype="float64") /* ty=Tensor[(585), float64] */;
  %129 = cosh(%128) /* ty=Tensor[(585), float64] */;
  %130 = cast(%var_8138, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(1), int32] */;
  %132 = cast(%129, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %134 = asin(%127) /* ty=Tensor[(585), float32] */;
  %135 = multiply(%132, %133) /* ty=Tensor[(585), uint32] */;
  (%134, %135)
}

def @func_863(%var_853: Tensor[(252), float32]) -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(14, 2, 5), uint64], uint8) {
  %136 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %137 = %136.1;
  %138 = cast(%137, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %139 = cast(%137, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %140 = cast(%var_853, dtype="float32") /* ty=Tensor[(252), float32] */;
  %141 = reshape(%138, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %142 = reshape(%139, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %143 = reshape(%140, newshape=[1, 252]) /* ty=Tensor[(1, 252), float32] */;
  %144 = @func_450(%141, %142, %143) /* ty=(Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(1, 252), float32], Tensor[(140), float64]) */;
  %145 = cast(meta[relay.Constant][7] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %146 = reshape(%145, newshape=[]) /* ty=uint8 */;
  %147 = @func_391(%146) /* ty=(Tensor[(3, 16, 4), uint8], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64]) */;
  %148 = %144.0;
  %149 = %147.3;
  (%137, %148, %var_853, %149, meta[relay.Constant][7] /* ty=uint8 */)
}

def @func_4931() -> (Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) {
  %150 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
  %151 = @func_4130() /* ty=Tensor[(9, 6, 2), uint32] */;
  %152 = cast(%151, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
  %153 = reshape(%152, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), int8] */;
  %154 = @func_2940(%153) /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32]) */;
  %155 = %150.1;
  %156 = %154.2;
  (%155, %151, %156)
}

def @func_1781(%var_1745: Tensor[(11, 1, 2), int64], %var_1746: Tensor[(11, 11, 2), int64]) -> (Tensor[(11, 11, 2), int64], Tensor[(9, 6, 2), bool]) {
  %157 = cast(%var_1745, dtype="int64") /* ty=Tensor[(11, 1, 2), int64] */;
  %158 = cast(%var_1746, dtype="int64") /* ty=Tensor[(11, 11, 2), int64] */;
  %159 = left_shift(%157, %158) /* ty=Tensor[(11, 11, 2), int64] */;
  %160 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
  (%159, %160)
}

def @func_7838() -> (Tensor[(9, 6, 2), float64],) {
  %161 = @func_4080() /* ty=(Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %162 = %161.2;
  (%162,)
}

def @func_937() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) {
  %163 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %164 = @func_772() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %165 = %164.1;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
  %167 = %163.1;
  %168 = log(%166) /* ty=Tensor[(9, 6, 2), float64] */;
  (%167, %168)
}

def @func_5089(%var_5016: Tensor[(7, 7, 16), int8], %var_5023: Tensor[(140), float64]) -> (Tensor[(7, 7, 16), int8], Tensor[(9, 6, 2), uint32], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], uint8, Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) {
  %169 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 7, 16), int8] */, dtype="int8") /* ty=Tensor[(7, 7, 16), int8] */;
  %170 = shape_of(%var_5016, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%var_5016, dtype="int8") /* ty=Tensor[(7, 7, 16), int8] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %173 = cast(%var_5023, dtype="float64") /* ty=Tensor[(140), float64] */;
  %174 = reshape(%173, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %175 = @func_2594(%174) /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(10, ?, 14), bool], Tensor[(140), float64], Tensor[(9, 6, 2), int32], uint8, Tensor[(5, 28), float64], Tensor[(7, 15, 5), bool], Tensor[(5, 105), bool]) */;
  %176 = @func_4526() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(585), int32]) */;
  %177 = @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */;
  %178 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
  %179 = @func_2393() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(14, 2, 5), uint64]) */;
  %180 = @func_4784() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %181 = left_shift(%171, %172) /* ty=Tensor[(7, 7, 16), int8] */;
  %182 = %175.0;
  %183 = %176.0;
  %184 = %177.1;
  %185 = %178.2;
  %186 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
  %187 = %179.3;
  %188 = %180.0;
  (%181, %182, %var_5023, %183, %184, %185, %186, %187, %188)
}

def @func_2940(%var_2892: Tensor[(9, 6, 2), int8]) -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32]) {
  %189 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
  %190 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %191 = %190.0;
  %192 = cast(%var_2892, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %196 = floor_mod(%194, %195) /* ty=Tensor[(9, 6, 2), float32] */;
  %197 = cast(%196, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %198 = reshape(%197, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %199 = %189.3;
  %200 = @func_1515(%198) /* ty=Tensor[(9, 6, 2), int32] */;
  (%199, %196, %200)
}

def @func_1976(%var_1965: Tensor[(525), bool]) -> (Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32], Tensor[(7, 15, 5), bool], Tensor[(525), bool]) {
  %201 = @func_772() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %202 = cast(%var_1965, dtype="bool") /* ty=Tensor[(525), bool] */;
  %203 = cast(%var_1965, dtype="bool") /* ty=Tensor[(525), bool] */;
  %204 = reshape(%202, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), bool] */;
  %205 = reshape(%203, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), bool] */;
  %206 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
  %207 = @func_1242() /* ty=Tensor[(9, 6, 2), uint32] */;
  %208 = %201.1;
  %209 = @func_1891(%204, %205) /* ty=Tensor[(7, 15, 5), bool] */;
  (%206, %207, %208, %209, %var_1965)
}

def @func_5632(%var_5626: Tensor[(14, 2, 5), uint64]) -> Tensor[(14, 2, 5), float64] {
  %210 = @func_2204() /* ty=Tensor[(14, 2, 5), uint64] */;
  %211 = cast(%var_5626, dtype="float64") /* ty=Tensor[(14, 2, 5), float64] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%210, dtype="float64") /* ty=Tensor[(14, 2, 5), float64] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%213, %214) /* ty=Tensor[(14, 2, 5), float64] */
}

def @func_7114() -> (Tensor[(9, 6, 2), bool],) {
  %215 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
  (%215,)
}

def @func_7692(%var_7664: Tensor[(8, 15, 5), float64], %var_7671: Tensor[(98), float32]) -> (Tensor[(9, 6, 2), uint32], float32, Tensor[(98), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(8, 15, 5), float64]) {
  %216 = cast(-8.47093f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %217 = cast(%var_7671, dtype="float32") /* ty=Tensor[(98), float32] */;
  %218 = reshape(%216, newshape=[]) /* ty=float32 */;
  %219 = reshape(%217, newshape=[14, 1, 7]) /* ty=Tensor[(14, 1, 7), float32] */;
  %220 = @func_6407(%218, %219) /* ty=(Tensor[(14, 1, 7), float32], Tensor[(9, 6, 2), uint32]) */;
  %221 = %220.1;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %223 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 28), float64] */, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %224 = reshape(%222, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %225 = reshape(%223, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %226 = @func_212(%224, %225) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %227 = cast(%var_7664, dtype="float64") /* ty=Tensor[(8, 15, 5), float64] */;
  %228 = cos(%227) /* ty=Tensor[(8, 15, 5), float64] */;
  %229 = cast(%228, dtype="float64") /* ty=Tensor[(8, 15, 5), float64] */;
  %230 = %226.2;
  %231 = acos(%229) /* ty=Tensor[(8, 15, 5), float64] */;
  (%221, -8.47093f /* ty=float32 */, %var_7671, %230, meta[relay.Constant][9] /* ty=Tensor[(5, 28), float64] */, %231)
}

def @func_5755() -> (uint8, Tensor[(140), float64]) {
  %232 = @func_4582() /* ty=(uint8,) */;
  %233 = @func_4931() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */;
  %234 = %232.0;
  %235 = %233.0;
  (%234, %235)
}

def @func_4478() -> (Tensor[(14, 2, 5), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) {
  %236 = @func_2191() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), bool]) */;
  %237 = @func_1484() /* ty=(Tensor[(9, 6, 2), float64],) */;
  %238 = %236.2;
  %239 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %240 = %237.0;
  (%238, %239, %240)
}

def @func_6585() -> (Tensor[(9, 6, 2), float32],) {
  %241 = @func_6191() /* ty=Tensor[(9, 6, 2), float32] */;
  (%241,)
}

def @func_8680(%var_8643: Tensor[(140), float64], %var_8675: Tensor[(252), float32]) -> (Tensor[(140), float32], Tensor[(12, 2, 8), int64], Tensor[(1, 192), int64], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(15), uint8]) {
  %242 = @func_5755() /* ty=(uint8, Tensor[(140), float64]) */;
  %243 = %242.1;
  %244 = cast(%var_8643, dtype="float32") /* ty=Tensor[(140), float32] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(1), int32] */;
  %246 = cast(%243, dtype="float32") /* ty=Tensor[(140), float32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?), float32] */;
  %248 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 192), int64] */, dtype="int64") /* ty=Tensor[(1, 192), int64] */;
  %249 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 192), int64] */, dtype="int64") /* ty=Tensor[(1, 192), int64] */;
  %250 = reshape(%248, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), int64] */;
  %251 = reshape(%249, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), int64] */;
  %252 = @func_8191(%250, %251) /* ty=(Tensor[(12, 2, 8), int64],) */;
  %253 = cast(%var_8675, dtype="float32") /* ty=Tensor[(252), float32] */;
  %254 = cast(meta[relay.Constant][11] /* ty=Tensor[(15), uint8] */, dtype="uint8") /* ty=Tensor[(15), uint8] */;
  %255 = reshape(%253, newshape=[252]) /* ty=Tensor[(252), float32] */;
  %256 = reshape(%254, newshape=[15, 1]) /* ty=Tensor[(15, 1), uint8] */;
  %257 = @func_6335(%255, %256) /* ty=(uint8, Tensor[(9, 6, 2), int32], Tensor[(252), float32], uint8, Tensor[(15, 1), bool]) */;
  %258 = power(%246, %247) /* ty=Tensor[(140), float32] */;
  %259 = %252.0;
  %260 = %257.1;
  (%258, %259, meta[relay.Constant][10] /* ty=Tensor[(1, 192), int64] */, %260, %var_8675, meta[relay.Constant][11] /* ty=Tensor[(15), uint8] */)
}

def @func_580() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) {
  %261 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %262 = %261.0;
  %263 = cast(%262, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %264 = cast(%262, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %265 = sigmoid(%263) /* ty=Tensor[(9, 6, 2), float32] */;
  %266 = log2(%264) /* ty=Tensor[(9, 6, 2), float32] */;
  (%265, %266)
}

def @func_3109() -> (Tensor[(9, 6, 2), uint32],) {
  %267 = @func_3059() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) */;
  %268 = %267.1;
  (%268,)
}

def @func_7658(%var_7628: Tensor[(140), float64]) -> (Tensor[(9, 6, 2), int8], Tensor[(11, 9, 16), float32], Tensor[(9, 6, 2), uint32], Tensor[(140), float64], Tensor[(11, 9, 16), float32]) {
  %269 = @func_694() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32]) */;
  %270 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 9, 16), float32] */, dtype="float32") /* ty=Tensor[(11, 9, 16), float32] */;
  %271 = sigmoid(%270) /* ty=Tensor[(11, 9, 16), float32] */;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(11, 9, 16), float32] */;
  %273 = cast(%var_7628, dtype="float64") /* ty=Tensor[(140), float64] */;
  %274 = reshape(%273, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %275 = @func_7201(%274) /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(5, 105), bool], Tensor[(140), float64], Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), uint32]) */;
  %276 = cast(%271, dtype="float64") /* ty=Tensor[(11, 9, 16), float64] */;
  %277 = sqrt(%276) /* ty=Tensor[(11, 9, 16), float64] */;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(11, 9, 16), float32] */;
  %279 = %269.0;
  %280 = sinh(%272) /* ty=Tensor[(11, 9, 16), float32] */;
  %281 = %275.0;
  %282 = cosh(%278) /* ty=Tensor[(11, 9, 16), float32] */;
  (%279, %280, %281, %var_7628, %282)
}

def @func_1484() -> (Tensor[(9, 6, 2), float64],) {
  %283 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
  (%283,)
}

def @func_753() -> Tensor[(9, 6, 2), float32] {
  %284 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %284.1
}

def @func_7054() -> (Tensor[(1, 140), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) {
  %285 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
  %286 = %285.3;
  %287 = cast(%286, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
  %288 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %289 = @func_1467() /* ty=(Tensor[(252), float32],) */;
  %290 = asin(%287) /* ty=Tensor[(1, 140), float64] */;
  %291 = %288.0;
  %292 = %289.0;
  (%290, %291, %292)
}

def @main(%var_9333: Tensor[(14, 7, 16), float32]) -> (Tensor[(14, 7, 16), float32],) {
  %293 = cast(%var_9333, dtype="float32") /* ty=Tensor[(14, 7, 16), float32] */;
  %294 = rsqrt(%293) /* ty=Tensor[(14, 7, 16), float32] */;
  (%294,)
}

def @func_4839() -> (Tensor[(140), float64],) {
  %295 = @func_3789() /* ty=(Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(108), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), bool]) */;
  %296 = %295.0;
  (%296,)
}

def @func_9302() -> (Tensor[(252), float32],) {
  %297 = @func_1467() /* ty=(Tensor[(252), float32],) */;
  %298 = %297.0;
  (%298,)
}

def @func_5540(%var_5472: Tensor[(560, 2), bool], %var_5473: float64, %var_5474: Tensor[(2002), float64]) -> (Tensor[(9, 6, 2), float32], Tensor[(140), uint64], Tensor[(560, 2), bool], float64, Tensor[(2002), float64], Tensor[(9, 6, 2), uint32], Tensor[(14, 2, 5), uint64], Tensor[(14, 11, 13), float64], Tensor[(9, 6, 2), float32]) {
  %299 = @func_3515() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %300 = %299.0;
  %301 = cast(%300, dtype="uint32") /* ty=Tensor[(9, 6, 2), uint32] */;
  %302 = reshape(%301, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), uint32] */;
  %303 = @func_1684(%302) /* ty=(Tensor[(9, 6, 2), uint32],) */;
  %304 = cast(meta[relay.Constant][13] /* ty=Tensor[(140), uint64] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %305 = reshape(%304, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), uint64] */;
  %306 = @func_3406(%305) /* ty=Tensor[(14, 2, 5), int32] */;
  %307 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 2, 5), int32] */, dtype="uint64") /* ty=Tensor[(14, 2, 5), uint64] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="uint64") /* ty=Tensor[(14, 2, 5), uint64] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %311 = cast(%var_5472, dtype="bool") /* ty=Tensor[(560, 2), bool] */;
  %312 = cast(%var_5473, dtype="float64") /* ty=float64 */;
  %313 = cast(%var_5474, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %314 = reshape(%311, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), bool] */;
  %315 = reshape(%312, newshape=[]) /* ty=float64 */;
  %316 = reshape(%313, newshape=[143, 14]) /* ty=Tensor[(143, 14), float64] */;
  %317 = @func_4739(%314, %315, %316) /* ty=(Tensor[(14, 5, 16), bool], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8], Tensor[(14, 11, 13), float64], float64, Tensor[(143, 14), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) */;
  %318 = %317.3;
  %319 = cast(%318, dtype="float64") /* ty=Tensor[(14, 11, 13), float64] */;
  %320 = @func_772() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %321 = %320.1;
  %322 = cast(%321, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %323 = %303.0;
  %324 = minimum(%309, %310) /* ty=Tensor[(14, 2, 5), uint64] */;
  %325 = log2(%319) /* ty=Tensor[(14, 11, 13), float64] */;
  %326 = asinh(%322) /* ty=Tensor[(9, 6, 2), float32] */;
  (%300, meta[relay.Constant][13] /* ty=Tensor[(140), uint64] */, %var_5472, %var_5473, %var_5474, %323, %324, %325, %326)
}

def @func_6846() -> (Tensor[(9, 6, 2), float32],) {
  %327 = @func_3059() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) */;
  %328 = %327.0;
  (%328,)
}

def @func_7295() -> (Tensor[(9, 6, 2), float32],) {
  %329 = @func_6191() /* ty=Tensor[(9, 6, 2), float32] */;
  (%329,)
}

def @func_2496(%var_2454: Tensor[(14, 5, 15), int8], %var_2455: Tensor[(14, 5, 15), int8]) -> (Tensor[(14, 5, 15), int8], Tensor[(9, 6, 2), float32]) {
  %330 = cast(%var_2455, dtype="int8") /* ty=Tensor[(14, 5, 15), int8] */;
  %331 = shape_of(%var_2454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%var_2454, dtype="int8") /* ty=Tensor[(14, 5, 15), int8] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %334 = @func_1219() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252), float32]) */;
  %335 = add(%332, %333) /* ty=Tensor[(14, 5, 15), int8] */;
  %336 = %334.0;
  (%335, %336)
}

def @func_121() -> Tensor[(9, 6, 2), float32] {
  %337 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 6, 2), float32] */, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  sin(%337) /* ty=Tensor[(9, 6, 2), float32] */
}

def @func_3515() -> (Tensor[(9, 6, 2), float32],) {
  %338 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %339 = %338.1;
  %340 = cast(%339, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %341 = sqrt(%340) /* ty=Tensor[(9, 6, 2), float32] */;
  (%341,)
}

def @func_2006() -> (Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) {
  %342 = @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */;
  %343 = cast(meta[relay.Constant][16] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %344 = reshape(%343, newshape=[]) /* ty=uint8 */;
  %345 = @func_391(%344) /* ty=(Tensor[(3, 16, 4), uint8], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64]) */;
  %346 = %342.0;
  %347 = %345.3;
  %348 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
  (%346, %347, meta[relay.Constant][16] /* ty=uint8 */, %348)
}

def @func_349(%var_297: Tensor[(14, 2, 9), float32], %var_298: Tensor[(14, 2, 9), float32], %var_321: Tensor[(108), float32], %var_322: Tensor[(140), float64]) -> (Tensor[(14, 2, 9), float32], Tensor[(14, 2, 9), float64], Tensor[(9, 6, 2), float32], Tensor[(108), float32], Tensor[(140), float64], Tensor[(14, 2, 9), float64], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) {
  %349 = cast(%var_298, dtype="float32") /* ty=Tensor[(14, 2, 9), float32] */;
  %350 = shape_of(%var_297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%var_297, dtype="float32") /* ty=Tensor[(14, 2, 9), float32] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %353 = cast(%var_298, dtype="float32") /* ty=Tensor[(14, 2, 9), float32] */;
  %354 = erf(%353) /* ty=Tensor[(14, 2, 9), float32] */;
  %355 = cast(%354, dtype="float64") /* ty=Tensor[(14, 2, 9), float64] */;
  %356 = cast(%var_321, dtype="float32") /* ty=Tensor[(108), float32] */;
  %357 = cast(%var_322, dtype="float64") /* ty=Tensor[(140), float64] */;
  %358 = reshape(%356, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %359 = reshape(%357, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %360 = @func_212(%358, %359) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %361 = cast(%354, dtype="float64") /* ty=Tensor[(14, 2, 9), float64] */;
  %362 = cast(%var_322, dtype="float64") /* ty=Tensor[(140), float64] */;
  %363 = reshape(%362, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), float64] */;
  %364 = @func_158(%363) /* ty=(Tensor[(14, 2, 5), uint64],) */;
  %365 = @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */;
  %366 = power(%351, %352) /* ty=Tensor[(14, 2, 9), float32] */;
  %367 = log(%355) /* ty=Tensor[(14, 2, 9), float64] */;
  %368 = %360.1;
  %369 = sqrt(%361) /* ty=Tensor[(14, 2, 9), float64] */;
  %370 = %364.0;
  %371 = %365.3;
  (%366, %367, %368, %var_321, %var_322, %369, %370, %371)
}

def @func_545() -> (Tensor[(9, 6, 2), int8],) {
  %372 = @func_501() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %373 = %372.0;
  (%373,)
}

def @func_3572() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) {
  %374 = @func_1219() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252), float32]) */;
  %375 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %376 = %374.0;
  %377 = %375.1;
  (%376, %377)
}

def @func_7953(%var_7940: Tensor[(140), uint64]) -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32], Tensor[(14, 2, 5), int32], Tensor[(140), uint64], Tensor[(252, 1), float32], Tensor[(9, 6, 2), float32]) {
  %378 = @func_7838() /* ty=(Tensor[(9, 6, 2), float64],) */;
  %379 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %380 = cast(%var_7940, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %381 = reshape(%380, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), uint64] */;
  %382 = @func_5781() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252, 1), float32]) */;
  %383 = @func_3572() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %384 = %378.0;
  %385 = %379.0;
  %386 = @func_4130() /* ty=Tensor[(9, 6, 2), uint32] */;
  %387 = @func_3406(%381) /* ty=Tensor[(14, 2, 5), int32] */;
  %388 = %382.2;
  %389 = %383.1;
  (%384, %385, %386, %387, %var_7940, %388, %389)
}

def @func_501() -> (Tensor[(9, 6, 2), int8],) {
  %390 = @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */;
  %391 = %390.3;
  (%391,)
}

def @func_2966() -> Tensor[(9, 6, 2), uint32] {
  @func_646() /* ty=Tensor[(9, 6, 2), uint32] */
}

def @func_8417() -> Tensor[(252, 1), float32] {
  %392 = @func_5781() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252, 1), float32]) */;
  %392.2
}

def @func_7439(%var_7436: Tensor[(2, 4, 10), float64]) -> (Tensor[(2, 4, 10), float64],) {
  %393 = cast(%var_7436, dtype="float64") /* ty=Tensor[(2, 4, 10), float64] */;
  %394 = rsqrt(%393) /* ty=Tensor[(2, 4, 10), float64] */;
  (%394,)
}

def @func_1321() -> (Tensor[(140), float64], Tensor[(140), float64]) {
  %395 = @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */;
  %396 = @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */;
  %397 = %395.3;
  %398 = %396.2;
  (%397, %398)
}

def @func_6639() -> (Tensor[(9, 6, 2), float64],) {
  %399 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
  %400 = %399.3;
  (%400,)
}

def @func_1847() -> Tensor[(9, 6, 2), int8] {
  %401 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %401.1
}

def @func_158(%var_139: Tensor[(14, 2, 5), float64]) -> (Tensor[(14, 2, 5), uint64],) {
  %402 = cast(%var_139, dtype="float64") /* ty=Tensor[(14, 2, 5), float64] */;
  %403 = atanh(%402) /* ty=Tensor[(14, 2, 5), float64] */;
  %404 = cast(%403, dtype="uint64") /* ty=Tensor[(14, 2, 5), uint64] */;
  %405 = shape_of(%var_139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_139, dtype="uint64") /* ty=Tensor[(14, 2, 5), uint64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %408 = logical_xor(%406, %407) /* ty=Tensor[(14, 2, 5), uint64] */;
  (%408,)
}

def @func_6139(%var_6131: Tensor[(14, 2, 5), uint64]) -> (Tensor[(9, 6, 2), uint32], Tensor[(14, 2, 5), bool]) {
  %409 = @func_2204() /* ty=Tensor[(14, 2, 5), uint64] */;
  %410 = cast(%var_6131, dtype="bool") /* ty=Tensor[(14, 2, 5), bool] */;
  %411 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%409, dtype="bool") /* ty=Tensor[(14, 2, 5), bool] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %414 = @func_646() /* ty=Tensor[(9, 6, 2), uint32] */;
  %415 = not_equal(%412, %413) /* ty=Tensor[(14, 2, 5), bool] */;
  (%414, %415)
}

def @func_6441() -> (Tensor[(9, 6, 2), float32],) {
  %416 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
  (%416,)
}

def @func_694() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32]) {
  %417 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %418 = %417.0;
  %419 = @func_646() /* ty=Tensor[(9, 6, 2), uint32] */;
  (%418, %419)
}

def @func_4304() -> Tensor[(9, 6, 2), int8] {
  %420 = @func_2099() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %420.0
}

def @func_2279() -> Tensor[(9, 6, 2), int8] {
  %421 = @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */;
  %421.0
}

def @func_6483() -> Tensor[(9, 6, 2), float32] {
  %422 = @func_5121() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32]) */;
  %422.2
}

def @func_7374() -> Tensor[(9, 6, 2), bool] {
  %423 = @func_2721() /* ty=(Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64]) */;
  %424 = %423.1;
  %425 = @func_5876() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(784), int8]) */;
  %426 = %425.2;
  %427 = cast(%426, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %428 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%424, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%429, %430) /* ty=Tensor[(9, 6, 2), bool] */
}

def @func_1552(%var_1528: Tensor[(10, 1, 14), float64]) -> (Tensor[(10, ?, 14), bool], Tensor[(9, 6, 2), float64], Tensor[(10, ?, 14), bool], Tensor[(9, 6, 2), float32]) {
  %431 = cast(%var_1528, dtype="float64") /* ty=Tensor[(10, 1, 14), float64] */;
  %432 = atan(%431) /* ty=Tensor[(10, 1, 14), float64] */;
  %433 = cast(%432, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
  %434 = shape_of(%var_1528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%var_1528, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %437 = @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */;
  %438 = cast(%var_1528, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
  %439 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%432, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %442 = logical_and(%440, %441) /* ty=Tensor[(10, ?, 14), bool] */;
  %443 = cast(%var_1528, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
  %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%442, dtype="bool") /* ty=Tensor[(10, ?, 14), bool] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %447 = @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */;
  %448 = equal(%435, %436) /* ty=Tensor[(10, ?, 14), bool] */;
  %449 = %437.1;
  %450 = logical_or(%445, %446) /* ty=Tensor[(10, ?, 14), bool] */;
  %451 = %447.0;
  (%448, %449, %450, %451)
}

def @func_1515(%var_1490: Tensor[(9, 6, 2), float32]) -> Tensor[(9, 6, 2), int32] {
  %452 = @func_772() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %453 = %452.0;
  %454 = cast(%var_1490, dtype="int32") /* ty=Tensor[(9, 6, 2), int32] */;
  %455 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%453, dtype="int32") /* ty=Tensor[(9, 6, 2), int32] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%456, %457) /* ty=Tensor[(9, 6, 2), int32] */
}

def @func_3443() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(14, 2, 5), uint64]) {
  %458 = cast(meta[relay.Constant][17] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %459 = reshape(%458, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %460 = @func_2430(%459) /* ty=(Tensor[(9, 6, 2), bool], Tensor[(5, 28), float64], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %461 = @func_1847() /* ty=Tensor[(9, 6, 2), int8] */;
  %462 = %460.4;
  %463 = @func_2204() /* ty=Tensor[(14, 2, 5), uint64] */;
  (%461, %462, meta[relay.Constant][17] /* ty=Tensor[(140), float64] */, %463)
}

def @func_2997() -> (Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) {
  %464 = @func_2619() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32]) */;
  %465 = %464.1;
  %466 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
  (%465, %466)
}

def @func_5781() -> (Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252, 1), float32]) {
  %467 = cast(meta[relay.Constant][18] /* ty=Tensor[(252, 1), float32] */, dtype="float32") /* ty=Tensor[(252, 1), float32] */;
  %468 = reshape(%467, newshape=[252]) /* ty=Tensor[(252), float32] */;
  %469 = @func_863(%468) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(14, 2, 5), uint64], uint8) */;
  %470 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %471 = %469.2;
  (%470, %471, meta[relay.Constant][18] /* ty=Tensor[(252, 1), float32] */)
}

def @func_7433() -> (Tensor[(9, 6, 2), float64], Tensor[(140), float64]) {
  %472 = @func_3789() /* ty=(Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(108), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), bool]) */;
  %473 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
  %474 = %472.0;
  (%473, %474)
}

def @func_7576() -> (Tensor[(9, 6, 2), float64],) {
  %475 = @func_3203() /* ty=Tensor[(9, 6, 2), float64] */;
  (%475,)
}

def @func_7755(%var_7719: Tensor[(16), float32]) -> (Tensor[(9, 6, 2), int8], Tensor[(8, 1, 2), uint8], float32, Tensor[(16), float32], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), int32], Tensor[(5, 28), uint64]) {
  %476 = cast(-0.640788f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %477 = cast(%var_7719, dtype="float32") /* ty=Tensor[(16), float32] */;
  %478 = reshape(%476, newshape=[]) /* ty=float32 */;
  %479 = reshape(%477, newshape=[8, 1, 2]) /* ty=Tensor[(8, 1, 2), float32] */;
  %480 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
  %481 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 28), uint64] */, dtype="uint64") /* ty=Tensor[(5, 28), uint64] */;
  %482 = reshape(%481, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), uint64] */;
  %483 = @func_4304() /* ty=Tensor[(9, 6, 2), int8] */;
  %484 = @func_7133(%478, %479) /* ty=Tensor[(8, 1, 2), uint8] */;
  %485 = %480.0;
  %486 = @func_3406(%482) /* ty=Tensor[(14, 2, 5), int32] */;
  (%483, %484, -0.640788f /* ty=float32 */, %var_7719, %485, %486, meta[relay.Constant][19] /* ty=Tensor[(5, 28), uint64] */)
}

def @func_8332() -> Tensor[(9, 6, 2), bool] {
  %487 = @func_1564() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) */;
  %487.1
}

def @func_9028() -> (Tensor[(9, 6, 2), float32],) {
  %488 = @func_7312() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %489 = %488.0;
  (%489,)
}

def @func_1178() -> Tensor[(9, 6, 2), float64] {
  %490 = @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */;
  %490.1
}

def @func_1564() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) {
  %491 = @func_772() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %492 = %491.0;
  %493 = cast(%492, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
  %494 = reshape(%493, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), int8] */;
  %495 = @func_614(%494) /* ty=(Tensor[(9, 6, 2), bool],) */;
  %496 = %495.0;
  (%492, %496)
}

def @func_5121() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32]) {
  %497 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
  %498 = @func_4238() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %499 = %497.0;
  %500 = @func_4304() /* ty=Tensor[(9, 6, 2), int8] */;
  %501 = %498.0;
  (%499, %500, %501)
}

def @func_4973(%var_4968: Tensor[(6, 140), float64]) -> (Tensor[(9, 6, 2), bool], Tensor[(6, 140), bool]) {
  %502 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
  %503 = %502.3;
  %504 = cast(%503, dtype="bool") /* ty=Tensor[(1, 140), bool] */;
  %505 = cast(%var_4968, dtype="bool") /* ty=Tensor[(6, 140), bool] */;
  %506 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
  %507 = not_equal(%504, %505) /* ty=Tensor[(6, 140), bool] */;
  (%506, %507)
}

def @func_2721() -> (Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64]) {
  %508 = @func_1467() /* ty=(Tensor[(252), float32],) */;
  %509 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
  %510 = cast(%509, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %511 = cast(%509, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %512 = %508.0;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(252), float32] */;
  %514 = reshape(%510, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %515 = reshape(%511, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %516 = reshape(%513, newshape=[1, 252]) /* ty=Tensor[(1, 252), float32] */;
  %517 = @func_450(%514, %515, %516) /* ty=(Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(1, 252), float32], Tensor[(140), float64]) */;
  %518 = cast(%509, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
  %519 = erf(%518) /* ty=Tensor[(9, 6, 2), float64] */;
  %520 = cast(%509, dtype="uint32") /* ty=Tensor[(9, 6, 2), uint32] */;
  %521 = reshape(%520, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), uint32] */;
  %522 = @func_1684(%521) /* ty=(Tensor[(9, 6, 2), uint32],) */;
  %523 = %522.0;
  %524 = cast(%523, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
  %525 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%519, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %528 = %517.0;
  %529 = multiply(%526, %527) /* ty=Tensor[(9, 6, 2), float64] */;
  (%512, %528, %529)
}

def @func_6774() -> Tensor[(9, 6, 2), float32] {
  %530 = @func_3515() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %530.0
}

def @func_2042(%var_2023: Tensor[(9, 6, 2), float32]) -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), uint16]) {
  %531 = @func_772() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %532 = %531.1;
  %533 = cast(%var_2023, dtype="uint16") /* ty=Tensor[(9, 6, 2), uint16] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%532, dtype="uint16") /* ty=Tensor[(9, 6, 2), uint16] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %537 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
  %538 = minimum(%535, %536) /* ty=Tensor[(9, 6, 2), uint16] */;
  (%537, %538)
}

def @func_5743(%var_5706: Tensor[(9, 6, 2), int8]) -> Tensor[(9, 6, 2), bool] {
  %539 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %540 = %539.1;
  %541 = cast(%var_5706, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %542 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%540, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%543, %544) /* ty=Tensor[(9, 6, 2), bool] */
}

def @func_6041() -> (Tensor[(9, 6, 2), float32], Tensor[(140), float32], Tensor[(140), float64], Tensor[(9, 6, 2), uint32]) {
  %545 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
  %546 = @func_4931() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */;
  %547 = %546.0;
  %548 = cast(%547, dtype="float64") /* ty=Tensor[(140), float64] */;
  %549 = sigmoid(%548) /* ty=Tensor[(140), float64] */;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(140), float32] */;
  %551 = @func_4839() /* ty=(Tensor[(140), float64],) */;
  %552 = %551.0;
  %553 = cast(%552, dtype="float64") /* ty=Tensor[(140), float64] */;
  %554 = shape_of(%547, dtype="int32") /* ty=Tensor[(1), int32] */;
  %555 = cast(%547, dtype="float64") /* ty=Tensor[(140), float64] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?), float64] */;
  %557 = @func_2619() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32]) */;
  %558 = %545.0;
  %559 = sqrt(%550) /* ty=Tensor[(140), float32] */;
  %560 = floor_divide(%555, %556) /* ty=Tensor[(140), float64] */;
  %561 = %557.1;
  (%558, %559, %560, %561)
}

def @func_1385() -> Tensor[(9, 6, 2), bool] {
  %562 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %563 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
  %564 = cast(%563, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %565 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%562, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%566, %567) /* ty=Tensor[(9, 6, 2), bool] */
}

def @func_3706(%var_3660: Tensor[(3, 9, 11), uint64], %var_3661: Tensor[(3, 9, 11), uint64], %var_3678: Tensor[(140), float64]) -> (Tensor[(3, 9, 11), uint64], Tensor[(140), float64], Tensor[(?, 140), int64], Tensor[(1, 140), float64]) {
  %568 = cast(%var_3661, dtype="uint64") /* ty=Tensor[(3, 9, 11), uint64] */;
  %569 = shape_of(%var_3660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%var_3660, dtype="uint64") /* ty=Tensor[(3, 9, 11), uint64] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %572 = cast(%var_3678, dtype="float64") /* ty=Tensor[(140), float64] */;
  %573 = reshape(%572, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %574 = @func_1041(%573) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], Tensor[(140), float64]) */;
  %575 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
  %576 = %575.3;
  %577 = cast(%var_3678, dtype="int64") /* ty=Tensor[(140), int64] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(2), int32] */;
  %579 = cast(%576, dtype="int64") /* ty=Tensor[(1, 140), int64] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %581 = cast(%576, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
  %582 = left_shift(%570, %571) /* ty=Tensor[(3, 9, 11), uint64] */;
  %583 = %574.2;
  %584 = add(%579, %580) /* ty=Tensor[(?, 140), int64] */;
  %585 = log2(%581) /* ty=Tensor[(1, 140), float64] */;
  (%582, %583, %584, %585)
}

def @func_6939() -> (Tensor[(7, 3, 11), float64],) {
  %586 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(7, 3, 11), float64] */;
  %587 = atanh(%586) /* ty=Tensor[(7, 3, 11), float64] */;
  %588 = cast(%587, dtype="float64") /* ty=Tensor[(7, 3, 11), float64] */;
  %589 = sigmoid(%588) /* ty=Tensor[(7, 3, 11), float64] */;
  (%589,)
}

def @func_4582() -> (uint8,) {
  %590 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
  %591 = %590.2;
  (%591,)
}

def @func_3094() -> Tensor[(140), float64] {
  %592 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
  %592.1
}

def @func_2451() -> Tensor[(9, 6, 2), int8] {
  %593 = @func_694() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32]) */;
  %593.0
}

def @func_7527() -> (Tensor[(9, 6, 2), float32], Tensor[(1, 140), float64], Tensor[(9, 6, 2), uint32]) {
  %594 = @func_7054() /* ty=(Tensor[(1, 140), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) */;
  %595 = @func_4931() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */;
  %596 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
  %597 = %594.0;
  %598 = %595.1;
  (%596, %597, %598)
}

def @func_8191(%var_8186: Tensor[(12, 2, 8), int64], %var_8187: Tensor[(12, 2, 8), int64]) -> (Tensor[(12, 2, 8), int64],) {
  %599 = cast(%var_8187, dtype="int64") /* ty=Tensor[(12, 2, 8), int64] */;
  %600 = shape_of(%var_8186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%var_8186, dtype="int64") /* ty=Tensor[(12, 2, 8), int64] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %603 = multiply(%601, %602) /* ty=Tensor[(12, 2, 8), int64] */;
  (%603,)
}

def @func_4238() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) {
  %604 = @func_3654() /* ty=(Tensor[(9, 6, 2), float64],) */;
  %605 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %606 = %604.0;
  (%605, %606)
}

def @func_5876() -> (Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(784), int8]) {
  %607 = @func_4839() /* ty=(Tensor[(140), float64],) */;
  %608 = @func_3315() /* ty=Tensor[(9, 6, 2), float64] */;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
  %610 = cast(meta[relay.Constant][21] /* ty=Tensor[(784), int8] */, dtype="int8") /* ty=Tensor[(784), int8] */;
  %611 = %607.0;
  %612 = cast(%611, dtype="float64") /* ty=Tensor[(140), float64] */;
  %613 = reshape(%610, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), int8] */;
  %614 = reshape(%612, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %615 = @func_5089(%613, %614) /* ty=(Tensor[(7, 7, 16), int8], Tensor[(9, 6, 2), uint32], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], uint8, Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) */;
  %616 = @func_3094() /* ty=Tensor[(140), float64] */;
  %617 = rsqrt(%609) /* ty=Tensor[(9, 6, 2), float64] */;
  %618 = %615.8;
  (%616, %611, %617, %618, meta[relay.Constant][21] /* ty=Tensor[(784), int8] */)
}

def @func_2393() -> (Tensor[(140), float64], Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(14, 2, 5), uint64]) {
  %619 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
  %620 = @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */;
  %621 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
  %622 = %619.0;
  %623 = %620.2;
  %624 = @func_2204() /* ty=Tensor[(14, 2, 5), uint64] */;
  %625 = %621.2;
  (%622, %623, %624, %625)
}

def @func_3654() -> (Tensor[(9, 6, 2), float64],) {
  %626 = @func_3203() /* ty=Tensor[(9, 6, 2), float64] */;
  (%626,)
}

def @func_6878() -> Tensor[(9, 6, 2), float32] {
  %627 = @func_3515() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %627.0
}

def @func_6927() -> (Tensor[(9, 6, 2), float32], Tensor[(140), float64], Tensor[(9, 6, 2), float64]) {
  %628 = @func_5597() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %629 = @func_6639() /* ty=(Tensor[(9, 6, 2), float64],) */;
  %630 = %628.0;
  %631 = @func_3094() /* ty=Tensor[(140), float64] */;
  %632 = %629.0;
  (%630, %631, %632)
}

def @func_1149() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) {
  %633 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %634 = %633.1;
  %635 = cast(%634, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %636 = cast(%634, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
  %637 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 140), float64] */, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
  %638 = reshape(%637, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), float64] */;
  %639 = @func_158(%638) /* ty=(Tensor[(14, 2, 5), uint64],) */;
  %640 = log10(%635) /* ty=Tensor[(9, 6, 2), float32] */;
  %641 = exp(%636) /* ty=Tensor[(9, 6, 2), float64] */;
  %642 = %639.0;
  (%640, %641, %642, meta[relay.Constant][22] /* ty=Tensor[(1, 140), float64] */)
}

def @func_8068() -> (Tensor[(9, 6, 2), float64],) {
  %643 = @func_6681() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8]) */;
  %644 = %643.2;
  (%644,)
}

def @func_3721() -> (Tensor[(9, 6, 2), uint32],) {
  %645 = @func_1242() /* ty=Tensor[(9, 6, 2), uint32] */;
  (%645,)
}

def @func_3406(%var_3401: Tensor[(14, 2, 5), uint64]) -> Tensor[(14, 2, 5), int32] {
  %646 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
  %647 = %646.2;
  %648 = cast(%var_3401, dtype="int32") /* ty=Tensor[(14, 2, 5), int32] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="int32") /* ty=Tensor[(14, 2, 5), int32] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  multiply(%650, %651) /* ty=Tensor[(14, 2, 5), int32] */
}

def @func_4784() -> (Tensor[(9, 6, 2), int8],) {
  %652 = @func_2777() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) */;
  %653 = %652.1;
  (%653,)
}

def @func_212(%var_183: Tensor[(9, 6, 2), float32], %var_197: Tensor[(5, 28), float64]) -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) {
  %654 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %655 = cast(%var_183, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
  %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%654, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %659 = cast(%var_197, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %660 = reshape(%659, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), float64] */;
  %661 = @func_158(%660) /* ty=(Tensor[(14, 2, 5), uint64],) */;
  %662 = cast(%654, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
  %663 = logical_xor(%657, %658) /* ty=Tensor[(9, 6, 2), int8] */;
  %664 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %665 = %661.0;
  %666 = tan(%662) /* ty=Tensor[(9, 6, 2), float64] */;
  (%663, %664, %665, %var_197, %666)
}

def @func_6681() -> (Tensor[(140), float64], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8]) {
  %667 = @func_4839() /* ty=(Tensor[(140), float64],) */;
  %668 = @func_3059() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) */;
  %669 = @func_1079() /* ty=(Tensor[(9, 6, 2), float64],) */;
  %670 = @func_6221() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %671 = %667.0;
  %672 = %668.0;
  %673 = %669.0;
  %674 = %670.0;
  (%671, %672, %673, %674)
}

def @func_4574(%var_4556: Tensor[(525), bool], %var_4560: Tensor[(252), float32]) -> (Tensor[(9, 6, 2), int64], Tensor[(7, 15, 5), bool], Tensor[(525), bool], Tensor[(14, 2, 9), float64], Tensor[(252), float32], Tensor[(140), float64]) {
  %675 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %676 = %675.1;
  %677 = @func_501() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %678 = %677.0;
  %679 = cast(%678, dtype="int64") /* ty=Tensor[(9, 6, 2), int64] */;
  %680 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%676, dtype="int64") /* ty=Tensor[(9, 6, 2), int64] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %683 = cast(%var_4556, dtype="bool") /* ty=Tensor[(525), bool] */;
  %684 = cast(%var_4556, dtype="bool") /* ty=Tensor[(525), bool] */;
  %685 = reshape(%683, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), bool] */;
  %686 = reshape(%684, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), bool] */;
  %687 = cast(%var_4560, dtype="float32") /* ty=Tensor[(252), float32] */;
  %688 = cast(%var_4560, dtype="float32") /* ty=Tensor[(252), float32] */;
  %689 = cast(%676, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %690 = cast(meta[relay.Constant][23] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %691 = reshape(%687, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), float32] */;
  %692 = reshape(%688, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), float32] */;
  %693 = reshape(%689, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %694 = reshape(%690, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %695 = @func_349(%691, %692, %693, %694) /* ty=(Tensor[(14, 2, 9), float32], Tensor[(14, 2, 9), float64], Tensor[(9, 6, 2), float32], Tensor[(108), float32], Tensor[(140), float64], Tensor[(14, 2, 9), float64], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) */;
  %696 = bitwise_and(%681, %682) /* ty=Tensor[(9, 6, 2), int64] */;
  %697 = @func_1891(%685, %686) /* ty=Tensor[(7, 15, 5), bool] */;
  %698 = %695.1;
  (%696, %697, %var_4556, %698, %var_4560, meta[relay.Constant][23] /* ty=Tensor[(140), float64] */)
}

def @func_4739(%var_4696: Tensor[(14, 5, 16), bool], %var_4716: float64, %var_4717: Tensor[(143, 14), float64]) -> (Tensor[(14, 5, 16), bool], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8], Tensor[(14, 11, 13), float64], float64, Tensor[(143, 14), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) {
  %699 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 5, 16), bool] */, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
  %700 = shape_of(%var_4696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%var_4696, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %703 = @func_2393() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(14, 2, 5), uint64]) */;
  %704 = cast(%var_4716, dtype="float64") /* ty=float64 */;
  %705 = cast(%var_4717, dtype="float64") /* ty=Tensor[(143, 14), float64] */;
  %706 = reshape(%704, newshape=[]) /* ty=float64 */;
  %707 = reshape(%705, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), float64] */;
  %708 = @func_4238() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %709 = @func_4080() /* ty=(Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %710 = logical_and(%701, %702) /* ty=Tensor[(14, 5, 16), bool] */;
  %711 = %703.3;
  %712 = @func_1847() /* ty=Tensor[(9, 6, 2), int8] */;
  %713 = @func_2299(%706, %707) /* ty=Tensor[(14, 11, 13), float64] */;
  %714 = %708.1;
  %715 = @func_2966() /* ty=Tensor[(9, 6, 2), uint32] */;
  %716 = %709.2;
  (%710, %711, %712, %713, %var_4716, %var_4717, %714, %715, %716)
}

def @func_6761() -> (Tensor[(9, 6, 2), float64], uint8, Tensor[(14, 2, 5), uint64]) {
  %717 = @func_5876() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(784), int8]) */;
  %718 = @func_4582() /* ty=(uint8,) */;
  %719 = %717.2;
  %720 = %718.0;
  %721 = @func_2204() /* ty=Tensor[(14, 2, 5), uint64] */;
  (%719, %720, %721)
}

def @func_614(%var_593: Tensor[(9, 6, 2), int8]) -> (Tensor[(9, 6, 2), bool],) {
  %722 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %723 = %722.0;
  %724 = cast(%var_593, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%723, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %728 = equal(%726, %727) /* ty=Tensor[(9, 6, 2), bool] */;
  (%728,)
}

def @func_450(%var_422: Tensor[(9, 6, 2), float32], %var_429: Tensor[(9, 6, 2), float32], %var_439: Tensor[(1, 252), float32]) -> (Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(1, 252), float32], Tensor[(140), float64]) {
  %729 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %730 = cast(%var_422, dtype="int32") /* ty=Tensor[(9, 6, 2), int32] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%729, dtype="int32") /* ty=Tensor[(9, 6, 2), int32] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %734 = cast(%var_429, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
  %735 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%729, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %738 = cast(%var_439, dtype="float32") /* ty=Tensor[(1, 252), float32] */;
  %739 = cast(%var_439, dtype="float32") /* ty=Tensor[(1, 252), float32] */;
  %740 = cast(%var_422, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %741 = cast(meta[relay.Constant][25] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %742 = reshape(%738, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), float32] */;
  %743 = reshape(%739, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), float32] */;
  %744 = reshape(%740, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %745 = reshape(%741, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %746 = @func_349(%742, %743, %744, %745) /* ty=(Tensor[(14, 2, 9), float32], Tensor[(14, 2, 9), float64], Tensor[(9, 6, 2), float32], Tensor[(108), float32], Tensor[(140), float64], Tensor[(14, 2, 9), float64], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) */;
  %747 = right_shift(%732, %733) /* ty=Tensor[(9, 6, 2), int32] */;
  %748 = left_shift(%736, %737) /* ty=Tensor[(9, 6, 2), int8] */;
  %749 = %746.4;
  (%747, %748, %749, %var_439, meta[relay.Constant][25] /* ty=Tensor[(140), float64] */)
}

def @func_1041(%var_1027: Tensor[(140), float64]) -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], Tensor[(140), float64]) {
  %750 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %751 = %750.0;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %753 = cast(%var_1027, dtype="float64") /* ty=Tensor[(140), float64] */;
  %754 = reshape(%752, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %755 = reshape(%753, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %756 = @func_212(%754, %755) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %757 = %756.4;
  (%751, %757, %var_1027)
}

def @func_2619() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32]) {
  %758 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
  %759 = @func_1242() /* ty=Tensor[(9, 6, 2), uint32] */;
  (%758, %759)
}

def @func_1891(%var_1874: Tensor[(7, 15, 5), bool], %var_1875: Tensor[(7, 15, 5), bool]) -> Tensor[(7, 15, 5), bool] {
  %760 = cast(%var_1875, dtype="bool") /* ty=Tensor[(7, 15, 5), bool] */;
  %761 = shape_of(%var_1874, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%var_1874, dtype="bool") /* ty=Tensor[(7, 15, 5), bool] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%762, %763) /* ty=Tensor[(7, 15, 5), bool] */
}

def @func_4323(%var_4311: Tensor[(15, 3, 13), int32]) -> (Tensor[(15, 3, 13), uint64], Tensor[(9, 6, 2), float32]) {
  %764 = cast(%var_4311, dtype="int32") /* ty=Tensor[(15, 3, 13), int32] */;
  %765 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(15, 3, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 3, 13), int32] */, dtype="int32") /* ty=Tensor[(15, 3, 13), int32] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %768 = maximum(%766, %767) /* ty=Tensor[(15, 3, 13), int32] */;
  %769 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 3, 13), int32] */, dtype="uint64") /* ty=Tensor[(15, 3, 13), uint64] */;
  %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%768, dtype="uint64") /* ty=Tensor[(15, 3, 13), uint64] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %773 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %774 = left_shift(%771, %772) /* ty=Tensor[(15, 3, 13), uint64] */;
  %775 = %773.0;
  (%774, %775)
}

def @func_3272() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), bool]) {
  %776 = @func_1564() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) */;
  %777 = @func_2451() /* ty=Tensor[(9, 6, 2), int8] */;
  %778 = %776.1;
  (%777, %778)
}

def @func_3315() -> Tensor[(9, 6, 2), float64] {
  @func_3203() /* ty=Tensor[(9, 6, 2), float64] */
}

def @func_5231() -> Tensor[(140), float64] {
  %779 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
  %779.0
}

def @func_1921(%var_1908: Tensor[(140), float64]) -> (Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8]) {
  %780 = @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */;
  %781 = %780.2;
  %782 = cast(%781, dtype="float32") /* ty=Tensor[(252), float32] */;
  %783 = reshape(%782, newshape=[252]) /* ty=Tensor[(252), float32] */;
  %784 = @func_863(%783) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(14, 2, 5), uint64], uint8) */;
  %785 = %784.1;
  %786 = cast(%785, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %787 = cast(%var_1908, dtype="float64") /* ty=Tensor[(140), float64] */;
  %788 = reshape(%786, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %789 = reshape(%787, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %790 = @func_212(%788, %789) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %791 = @func_501() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %792 = %790.4;
  %793 = %791.0;
  (%781, %785, %792, %var_1908, %793)
}

def @func_8181() -> Tensor[(9, 6, 2), float64] {
  %794 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
  %794.3
}

def @func_3992() -> (Tensor[(9, 6, 2), int8],) {
  %795 = @func_501() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %796 = %795.0;
  (%796,)
}

def @func_7133(%var_7121: float32, %var_7122: Tensor[(8, 1, 2), float32]) -> Tensor[(8, 1, 2), uint8] {
  %797 = cast(%var_7121, dtype="float32") /* ty=float32 */;
  %798 = cast(%var_7122, dtype="float32") /* ty=Tensor[(8, 1, 2), float32] */;
  %799 = multiply(%797, %798) /* ty=Tensor[(8, 1, 2), float32] */;
  %800 = cast(%var_7121, dtype="uint8") /* ty=uint8 */;
  %801 = cast(%799, dtype="uint8") /* ty=Tensor[(8, 1, 2), uint8] */;
  right_shift(%800, %801) /* ty=Tensor[(8, 1, 2), uint8] */
}

def @func_8238() -> (Tensor[(140), float64], Tensor[(9, 6, 2), float32], Tensor[(140), float64]) {
  %802 = @func_5357() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(140), float64]) */;
  %803 = @func_3515() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %804 = @func_5357() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(140), float64]) */;
  %805 = %802.0;
  %806 = %803.0;
  %807 = %804.1;
  (%805, %806, %807)
}

def @func_8591() -> (Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), float64]) {
  %808 = @func_7295() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %809 = @func_2393() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(14, 2, 5), uint64]) */;
  %810 = @func_6927() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(140), float64], Tensor[(9, 6, 2), float64]) */;
  %811 = %808.0;
  %812 = %809.2;
  %813 = %810.2;
  (%811, %812, %813)
}

def @func_5410() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32]) {
  %814 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %815 = @func_2279() /* ty=Tensor[(9, 6, 2), int8] */;
  %816 = %814.0;
  (%815, %816)
}

def @func_7201(%var_7190: Tensor[(140), float64]) -> (Tensor[(9, 6, 2), uint32], Tensor[(5, 105), bool], Tensor[(140), float64], Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), uint32]) {
  %817 = @func_4931() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */;
  %818 = cast(%var_7190, dtype="float64") /* ty=Tensor[(140), float64] */;
  %819 = reshape(%818, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %820 = @func_2594(%819) /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(10, ?, 14), bool], Tensor[(140), float64], Tensor[(9, 6, 2), int32], uint8, Tensor[(5, 28), float64], Tensor[(7, 15, 5), bool], Tensor[(5, 105), bool]) */;
  %821 = @func_1564() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) */;
  %822 = @func_2997() /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) */;
  %823 = %817.1;
  %824 = %820.7;
  %825 = %821.1;
  %826 = %822.0;
  (%823, %824, %var_7190, %825, %826)
}

def @func_3394(%var_3380: Tensor[(70, 2), float64]) -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), float32], Tensor[(70, 2), float32]) {
  %827 = @func_2777() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) */;
  %828 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %829 = cast(%var_3380, dtype="float64") /* ty=Tensor[(70, 2), float64] */;
  %830 = reshape(%829, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), float64] */;
  %831 = @func_158(%830) /* ty=(Tensor[(14, 2, 5), uint64],) */;
  %832 = %831.0;
  %833 = cast(%832, dtype="float32") /* ty=Tensor[(14, 2, 5), float32] */;
  %834 = shape_of(%var_3380, dtype="int32") /* ty=Tensor[(2), int32] */;
  %835 = cast(%var_3380, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %837 = %827.0;
  %838 = %828.0;
  %839 = maximum(%835, %836) /* ty=Tensor[(70, 2), float32] */;
  (%837, %838, %839)
}

def @func_8519(%var_8443: Tensor[(6, 10, 7), uint16], %var_8444: Tensor[(6, 10, 7), uint16], %var_8456: Tensor[(108), float32], %var_8474: Tensor[(6, 10, 7), bool], %var_8484: Tensor[(6, 10, 7), bool]) -> (Tensor[(9, 6, 2), int32], Tensor[(108), float32], Tensor[(14, 2, 5), int32], Tensor[(140), uint64], Tensor[(6, 10, 7), bool], Tensor[(6, 10, 7), bool]) {
  %840 = cast(%var_8456, dtype="float32") /* ty=Tensor[(108), float32] */;
  %841 = reshape(%840, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %842 = cast(meta[relay.Constant][27] /* ty=Tensor[(140), uint64] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %843 = reshape(%842, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), uint64] */;
  %844 = cast(%var_8444, dtype="bool") /* ty=Tensor[(6, 10, 7), bool] */;
  %845 = shape_of(%var_8443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%var_8443, dtype="bool") /* ty=Tensor[(6, 10, 7), bool] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %848 = less_equal(%846, %847) /* ty=Tensor[(6, 10, 7), bool] */;
  %849 = cast(%var_8484, dtype="int8") /* ty=Tensor[(6, 10, 7), int8] */;
  %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%848, dtype="int8") /* ty=Tensor[(6, 10, 7), int8] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %853 = bitwise_xor(%851, %852) /* ty=Tensor[(6, 10, 7), int8] */;
  %854 = cast(%853, dtype="bool") /* ty=Tensor[(6, 10, 7), bool] */;
  %855 = shape_of(%var_8484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%var_8484, dtype="bool") /* ty=Tensor[(6, 10, 7), bool] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %858 = cast(%var_8474, dtype="uint64") /* ty=Tensor[(6, 10, 7), uint64] */;
  %859 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%848, dtype="uint64") /* ty=Tensor[(6, 10, 7), uint64] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %862 = logical_xor(%860, %861) /* ty=Tensor[(6, 10, 7), uint64] */;
  %863 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 10, 7), uint16] */, dtype="float32") /* ty=Tensor[(6, 10, 7), float32] */;
  %864 = shape_of(%var_8444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%var_8444, dtype="float32") /* ty=Tensor[(6, 10, 7), float32] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %867 = mod(%865, %866) /* ty=Tensor[(6, 10, 7), float32] */;
  %868 = cast(%867, dtype="bool") /* ty=Tensor[(6, 10, 7), bool] */;
  %869 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%862, dtype="bool") /* ty=Tensor[(6, 10, 7), bool] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %872 = @func_1515(%841) /* ty=Tensor[(9, 6, 2), int32] */;
  %873 = @func_3406(%843) /* ty=Tensor[(14, 2, 5), int32] */;
  %874 = greater(%856, %857) /* ty=Tensor[(6, 10, 7), bool] */;
  %875 = equal(%870, %871) /* ty=Tensor[(6, 10, 7), bool] */;
  (%872, %var_8456, %873, meta[relay.Constant][27] /* ty=Tensor[(140), uint64] */, %874, %875)
}

def @func_8605() -> (Tensor[(9, 6, 2), uint32],) {
  %876 = @func_3109() /* ty=(Tensor[(9, 6, 2), uint32],) */;
  %877 = %876.0;
  (%877,)
}

def @func_5180() -> Tensor[(9, 6, 2), int16] {
  %878 = @func_3789() /* ty=(Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(108), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), bool]) */;
  %879 = %878.3;
  %880 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %881 = cast(%880, dtype="int16") /* ty=Tensor[(9, 6, 2), int16] */;
  %882 = shape_of(%879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%879, dtype="int16") /* ty=Tensor[(9, 6, 2), int16] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_xor(%883, %884) /* ty=Tensor[(9, 6, 2), int16] */
}

def @func_5671() -> (Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) {
  %885 = @func_3515() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %886 = @func_4130() /* ty=Tensor[(9, 6, 2), uint32] */;
  %887 = %885.0;
  (%886, %887)
}

def @func_4080() -> (Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) {
  %888 = @func_1079() /* ty=(Tensor[(9, 6, 2), float64],) */;
  %889 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
  %890 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
  %891 = %888.0;
  (%889, %890, %891)
}

def @func_2594(%var_2560: Tensor[(140), float64]) -> (Tensor[(9, 6, 2), uint32], Tensor[(10, ?, 14), bool], Tensor[(140), float64], Tensor[(9, 6, 2), int32], uint8, Tensor[(5, 28), float64], Tensor[(7, 15, 5), bool], Tensor[(5, 105), bool]) {
  %892 = cast(%var_2560, dtype="float64") /* ty=Tensor[(140), float64] */;
  %893 = reshape(%892, newshape=[10, 1, 14]) /* ty=Tensor[(10, 1, 14), float64] */;
  %894 = @func_1552(%893) /* ty=(Tensor[(10, ?, 14), bool], Tensor[(9, 6, 2), float64], Tensor[(10, ?, 14), bool], Tensor[(9, 6, 2), float32]) */;
  %895 = %894.2;
  %896 = cast(%895, dtype="float64") /* ty=Tensor[(10, ?, 14), float64] */;
  %897 = reshape(%896, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %898 = @func_2430(%897) /* ty=(Tensor[(9, 6, 2), bool], Tensor[(5, 28), float64], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %899 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
  %900 = %898.2;
  %901 = cast(%900, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %902 = cast(%895, dtype="float64") /* ty=Tensor[(10, ?, 14), float64] */;
  %903 = reshape(%901, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %904 = reshape(%902, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %905 = @func_212(%903, %904) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %906 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 105), bool] */, dtype="bool") /* ty=Tensor[(5, 105), bool] */;
  %907 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 105), bool] */, dtype="bool") /* ty=Tensor[(5, 105), bool] */;
  %908 = reshape(%906, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), bool] */;
  %909 = reshape(%907, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), bool] */;
  %910 = @func_1242() /* ty=Tensor[(9, 6, 2), uint32] */;
  %911 = %899.2;
  %912 = %905.3;
  %913 = @func_1891(%908, %909) /* ty=Tensor[(7, 15, 5), bool] */;
  (%910, %895, %var_2560, %900, %911, %912, %913, meta[relay.Constant][29] /* ty=Tensor[(5, 105), bool] */)
}

def @func_9328() -> Tensor[(9, 6, 2), uint32] {
  %914 = @func_2997() /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) */;
  %914.0
}

def @func_1219() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252), float32]) {
  %915 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %916 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %917 = cast(meta[relay.Constant][30] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %918 = reshape(%917, newshape=[252]) /* ty=Tensor[(252), float32] */;
  %919 = @func_863(%918) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(14, 2, 5), uint64], uint8) */;
  %920 = %915.0;
  %921 = %916.1;
  %922 = %919.2;
  (%920, %921, %922, meta[relay.Constant][30] /* ty=Tensor[(252), float32] */)
}

def @func_8948() -> Tensor[(9, 6, 2), int8] {
  %923 = @func_7388() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %923.0
}

def @func_8727() -> Tensor[(9, 6, 2), float32] {
  %924 = @func_2619() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32]) */;
  %924.0
}

def @func_6837() -> (Tensor[(9, 6, 2), float32], Tensor[(1, 140), float64]) {
  %925 = @func_4238() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %926 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
  %927 = %925.0;
  %928 = %926.3;
  (%927, %928)
}

def @func_6946() -> Tensor[(9, 6, 2), float32] {
  %929 = @func_4080() /* ty=(Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %929.1
}

def @func_7806() -> (Tensor[(9, 6, 2), float32],) {
  %930 = @func_6774() /* ty=Tensor[(9, 6, 2), float32] */;
  (%930,)
}

def @func_8833(%var_8810: Tensor[(2, 15, 1), float64], %var_8811: Tensor[(2, 15, 11), float64], %var_8821: Tensor[(600), float64], %var_8822: Tensor[(98), float32]) -> (Tensor[(2, 15, 11), float64], Tensor[(8, 15, 5), float64], Tensor[(600), float64], Tensor[(98), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), uint32]) {
  %931 = cast(%var_8810, dtype="float64") /* ty=Tensor[(2, 15, 1), float64] */;
  %932 = cast(%var_8811, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %933 = cast(%var_8821, dtype="float64") /* ty=Tensor[(600), float64] */;
  %934 = cast(%var_8822, dtype="float32") /* ty=Tensor[(98), float32] */;
  %935 = reshape(%933, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), float64] */;
  %936 = reshape(%934, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %937 = @func_7692(%935, %936) /* ty=(Tensor[(9, 6, 2), uint32], float32, Tensor[(98), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(8, 15, 5), float64]) */;
  %938 = @func_694() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32]) */;
  %939 = @func_2997() /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) */;
  %940 = subtract(%931, %932) /* ty=Tensor[(2, 15, 11), float64] */;
  %941 = %937.5;
  %942 = %938.1;
  %943 = %939.0;
  (%940, %941, %var_8821, %var_8822, %942, %943)
}

def @func_9116() -> (Tensor[(252, 1), float32], Tensor[(252), float32], Tensor[(252), float32]) {
  %944 = @func_1219() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252), float32]) */;
  %945 = @func_7054() /* ty=(Tensor[(1, 140), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) */;
  %946 = @func_8417() /* ty=Tensor[(252, 1), float32] */;
  %947 = %944.2;
  %948 = %945.2;
  (%946, %947, %948)
}

def @func_7210(%var_7205: Tensor[(12, 2, 15), int8]) -> (Tensor[(12, 2, 15), bool],) {
  %949 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 2, 15), int8] */, dtype="bool") /* ty=Tensor[(12, 2, 15), bool] */;
  %950 = shape_of(%var_7205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %951 = cast(%var_7205, dtype="bool") /* ty=Tensor[(12, 2, 15), bool] */;
  %952 = dyn.reshape(%949, %950, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %953 = less_equal(%951, %952) /* ty=Tensor[(12, 2, 15), bool] */;
  (%953,)
}

def @func_249() -> (Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) {
  %954 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %955 = cast(%954, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %956 = cast(meta[relay.Constant][32] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %957 = reshape(%955, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %958 = reshape(%956, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %959 = @func_212(%957, %958) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %960 = cast(%954, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %961 = %959.3;
  %962 = cast(%961, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %963 = reshape(%960, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %964 = reshape(%962, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %965 = @func_212(%963, %964) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %966 = cast(%954, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %967 = cast(meta[relay.Constant][32] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %968 = reshape(%966, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %969 = reshape(%967, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %970 = @func_212(%968, %969) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %971 = %970.3;
  %972 = cast(%971, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
  %973 = cast(%971, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
  %974 = asinh(%973) /* ty=Tensor[(5, 28), float32] */;
  %975 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 28), float32] */, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %976 = shape_of(%974, dtype="int32") /* ty=Tensor[(2), int32] */;
  %977 = cast(%974, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %978 = dyn.reshape(%975, %976, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %979 = %965.0;
  %980 = sqrt(%972) /* ty=Tensor[(5, 28), float32] */;
  %981 = floor_mod(%977, %978) /* ty=Tensor[(5, 28), float64] */;
  (%954, %961, meta[relay.Constant][32] /* ty=Tensor[(140), float64] */, %979, %980, %981)
}

def @func_6191() -> Tensor[(9, 6, 2), float32] {
  %982 = @func_4526() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(585), int32]) */;
  %982.1
}

def @func_3059() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) {
  %983 = @func_646() /* ty=Tensor[(9, 6, 2), uint32] */;
  %984 = cast(%983, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %985 = @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */;
  %986 = atanh(%984) /* ty=Tensor[(9, 6, 2), float32] */;
  %987 = @func_2966() /* ty=Tensor[(9, 6, 2), uint32] */;
  %988 = %985.0;
  (%986, %987, %988)
}

def @func_8012(%var_8005: Tensor[(5, 14, 12), int8]) -> Tensor[(5, 14, 12), int8] {
  %989 = cast(%var_8005, dtype="int8") /* ty=Tensor[(5, 14, 12), int8] */;
  %990 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(5, 14, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %991 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 14, 12), int8] */, dtype="int8") /* ty=Tensor[(5, 14, 12), int8] */;
  %992 = dyn.reshape(%989, %990, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%991, %992) /* ty=Tensor[(5, 14, 12), int8] */
}

def @func_2191() -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), bool]) {
  %993 = @func_1564() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) */;
  %994 = @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */;
  %995 = %994.2;
  %996 = cast(%995, dtype="float64") /* ty=Tensor[(140), float64] */;
  %997 = reshape(%996, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), float64] */;
  %998 = @func_158(%997) /* ty=(Tensor[(14, 2, 5), uint64],) */;
  %999 = %998.0;
  %1000 = cast(%995, dtype="bool") /* ty=Tensor[(140), bool] */;
  %1001 = shape_of(%999, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1002 = cast(%999, dtype="bool") /* ty=Tensor[(14, 2, 5), bool] */;
  %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1004 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
  %1005 = %993.1;
  %1006 = less_equal(%1002, %1003) /* ty=Tensor[(14, 2, 5), bool] */;
  (%1004, %1005, %1006)
}

def @func_7312() -> (Tensor[(9, 6, 2), float32],) {
  %1007 = @func_4526() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(585), int32]) */;
  %1008 = %1007.1;
  (%1008,)
}

def @func_7996() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) {
  %1009 = @func_3992() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %1010 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
  %1011 = %1009.0;
  (%1010, %1011)
}

def @func_391(%var_368: uint8) -> (Tensor[(3, 16, 4), uint8], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64]) {
  %1012 = cast(%var_368, dtype="uint8") /* ty=uint8 */;
  %1013 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 16, 4), uint8] */, dtype="uint8") /* ty=Tensor[(3, 16, 4), uint8] */;
  %1014 = @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */;
  %1015 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %1016 = cast(%1015, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %1017 = %1014.1;
  %1018 = cast(%1017, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %1019 = reshape(%1016, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %1020 = reshape(%1018, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %1021 = @func_212(%1019, %1020) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %1022 = bitwise_xor(%1012, %1013) /* ty=Tensor[(3, 16, 4), uint8] */;
  %1023 = %1021.2;
  (%1022, %1017, %1015, %1023)
}

def @func_772() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) {
  %1024 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %1025 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  (%1024, %1025)
}

def @func_2099() -> (Tensor[(9, 6, 2), int8],) {
  %1026 = @func_501() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %1027 = %1026.0;
  (%1027,)
}

def @func_5357() -> (Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(140), float64]) {
  %1028 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
  %1029 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
  %1030 = @func_3992() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %1031 = @func_4839() /* ty=(Tensor[(140), float64],) */;
  %1032 = %1028.1;
  %1033 = %1029.1;
  %1034 = %1030.0;
  %1035 = %1031.0;
  (%1032, %1033, %1034, %1035)
}

def @func_5221() -> (Tensor[(140), float64], Tensor[(9, 6, 2), int32]) {
  %1036 = @func_3094() /* ty=Tensor[(140), float64] */;
  %1037 = cast(%1036, dtype="float64") /* ty=Tensor[(140), float64] */;
  %1038 = reshape(%1037, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %1039 = @func_1921(%1038) /* ty=(Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8]) */;
  %1040 = %1039.1;
  (%1036, %1040)
}

def @func_4255() -> Tensor[(9, 6, 2), bool] {
  %1041 = @func_1564() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) */;
  %1041.1
}

def @func_8400() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32]) {
  %1042 = @func_6441() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %1043 = @func_4931() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */;
  %1044 = %1042.0;
  %1045 = %1043.2;
  (%1044, %1045)
}

def @func_1242() -> Tensor[(9, 6, 2), uint32] {
  @func_646() /* ty=Tensor[(9, 6, 2), uint32] */
}

def @func_4526() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(585), int32]) {
  %1046 = @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */;
  %1047 = cast(meta[relay.Constant][36] /* ty=Tensor[(585), int32] */, dtype="int32") /* ty=Tensor[(585), int32] */;
  %1048 = reshape(%1047, newshape=[15, 3, 13]) /* ty=Tensor[(15, 3, 13), int32] */;
  %1049 = @func_4323(%1048) /* ty=(Tensor[(15, 3, 13), uint64], Tensor[(9, 6, 2), float32]) */;
  %1050 = %1046.0;
  %1051 = %1049.1;
  (%1050, %1051, meta[relay.Constant][36] /* ty=Tensor[(585), int32] */)
}

def @func_646() -> Tensor[(9, 6, 2), uint32] {
  %1052 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %1053 = %1052.0;
  %1054 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %1055 = cast(%1054, dtype="uint32") /* ty=Tensor[(9, 6, 2), uint32] */;
  %1056 = shape_of(%1053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1057 = cast(%1053, dtype="uint32") /* ty=Tensor[(9, 6, 2), uint32] */;
  %1058 = dyn.reshape(%1055, %1056, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%1057, %1058) /* ty=Tensor[(9, 6, 2), uint32] */
}

def @func_6407(%var_6386: float32, %var_6387: Tensor[(14, 1, 7), float32]) -> (Tensor[(14, 1, 7), float32], Tensor[(9, 6, 2), uint32]) {
  %1059 = cast(%var_6386, dtype="float32") /* ty=float32 */;
  %1060 = cast(%var_6387, dtype="float32") /* ty=Tensor[(14, 1, 7), float32] */;
  %1061 = @func_2619() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32]) */;
  %1062 = mod(%1059, %1060) /* ty=Tensor[(14, 1, 7), float32] */;
  %1063 = %1061.1;
  (%1062, %1063)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3203() -> Tensor[(9, 6, 2), float64] {
  @func_1178() /* ty=Tensor[(9, 6, 2), float64] */
}

def @func_8838(%var_8834: Tensor[(2, 15, 1), float64], %var_8835: Tensor[(2, 15, 11), float64], %var_8836: Tensor[(600), float64], %var_8837: Tensor[(98), float32]) -> (Tensor[(2, 15, 11), float64], Tensor[(8, 15, 5), float64], Tensor[(600), float64], Tensor[(98), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), uint32]) {
  %13 = fn (%var_8810: Tensor[(2, 15, 1), float64], %var_8811: Tensor[(2, 15, 11), float64], %var_8821: Tensor[(600), float64], %var_8822: Tensor[(98), float32]) -> (Tensor[(2, 15, 11), float64], Tensor[(8, 15, 5), float64], Tensor[(600), float64], Tensor[(98), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), uint32]) {
    %0 = cast(%var_8810, dtype="float64") /* ty=Tensor[(2, 15, 1), float64] */;
    %1 = cast(%var_8811, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
    %2 = cast(%var_8821, dtype="float64") /* ty=Tensor[(600), float64] */;
    %3 = cast(%var_8822, dtype="float32") /* ty=Tensor[(98), float32] */;
    %4 = reshape(%2, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), float64] */;
    %5 = reshape(%3, newshape=[98]) /* ty=Tensor[(98), float32] */;
    %6 = @func_7692(%4, %5) /* ty=(Tensor[(9, 6, 2), uint32], float32, Tensor[(98), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(8, 15, 5), float64]) */;
    %7 = @func_694() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32]) */;
    %8 = @func_2997() /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) */;
    %9 = subtract(%0, %1) /* ty=Tensor[(2, 15, 11), float64] */;
    %10 = %6.5;
    %11 = %7.1;
    %12 = %8.0;
    (%9, %10, %var_8821, %var_8822, %11, %12)
  };
  %13(%var_8834, %var_8835, %var_8836, %var_8837) /* ty=(Tensor[(2, 15, 11), float64], Tensor[(8, 15, 5), float64], Tensor[(600), float64], Tensor[(98), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), uint32]) */
}

def @func_5092(%var_5090: Tensor[(7, 7, 16), int8], %var_5091: Tensor[(140), float64]) -> (Tensor[(7, 7, 16), int8], Tensor[(9, 6, 2), uint32], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], uint8, Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) {
  %34 = fn (%var_5016: Tensor[(7, 7, 16), int8], %var_5023: Tensor[(140), float64]) -> (Tensor[(7, 7, 16), int8], Tensor[(9, 6, 2), uint32], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], uint8, Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) {
    %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 7, 16), int8] */, dtype="int8") /* ty=Tensor[(7, 7, 16), int8] */;
    %15 = shape_of(%var_5016, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%var_5016, dtype="int8") /* ty=Tensor[(7, 7, 16), int8] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %18 = cast(%var_5023, dtype="float64") /* ty=Tensor[(140), float64] */;
    %19 = reshape(%18, newshape=[140]) /* ty=Tensor[(140), float64] */;
    %20 = @func_2594(%19) /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(10, ?, 14), bool], Tensor[(140), float64], Tensor[(9, 6, 2), int32], uint8, Tensor[(5, 28), float64], Tensor[(7, 15, 5), bool], Tensor[(5, 105), bool]) */;
    %21 = @func_4526() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(585), int32]) */;
    %22 = @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */;
    %23 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
    %24 = @func_2393() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(14, 2, 5), uint64]) */;
    %25 = @func_4784() /* ty=(Tensor[(9, 6, 2), int8],) */;
    %26 = left_shift(%16, %17) /* ty=Tensor[(7, 7, 16), int8] */;
    %27 = %20.0;
    %28 = %21.0;
    %29 = %22.1;
    %30 = %23.2;
    %31 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
    %32 = %24.3;
    %33 = %25.0;
    (%26, %27, %var_5023, %28, %29, %30, %31, %32, %33)
  };
  %34(%var_5090, %var_5091) /* ty=(Tensor[(7, 7, 16), int8], Tensor[(9, 6, 2), uint32], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], uint8, Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) */
}

def @func_1180() -> Tensor[(9, 6, 2), float64] {
  @func_1178() /* ty=Tensor[(9, 6, 2), float64] */
}

def @func_3110() -> (Tensor[(9, 6, 2), uint32],) {
  %37 = fn () -> (Tensor[(9, 6, 2), uint32],) {
    %35 = @func_3059() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) */;
    %36 = %35.1;
    (%36,)
  };
  %37() /* ty=(Tensor[(9, 6, 2), uint32],) */
}

def @func_1080() -> (Tensor[(9, 6, 2), float64],) {
  %41 = fn () -> (Tensor[(9, 6, 2), float64],) {
    %38 = @func_646() /* ty=Tensor[(9, 6, 2), uint32] */;
    %39 = cast(%38, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
    %40 = cosh(%39) /* ty=Tensor[(9, 6, 2), float64] */;
    (%40,)
  };
  %41() /* ty=(Tensor[(9, 6, 2), float64],) */
}

def @func_6442() -> (Tensor[(9, 6, 2), float32],) {
  %43 = fn () -> (Tensor[(9, 6, 2), float32],) {
    %42 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
    (%42,)
  };
  %43() /* ty=(Tensor[(9, 6, 2), float32],) */
}

def @func_4478() -> (Tensor[(14, 2, 5), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) {
  %44 = @func_2191() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), bool]) */;
  %45 = @func_1484() /* ty=(Tensor[(9, 6, 2), float64],) */;
  %46 = %44.2;
  %47 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %48 = %45.0;
  (%46, %47, %48)
}

def @func_6335(%var_6318: Tensor[(252), float32], %var_6329: Tensor[(15, 1), uint8]) -> (uint8, Tensor[(9, 6, 2), int32], Tensor[(252), float32], uint8, Tensor[(15, 1), bool]) {
  %49 = @func_5755() /* ty=(uint8, Tensor[(140), float64]) */;
  %50 = cast(%var_6318, dtype="float32") /* ty=Tensor[(252), float32] */;
  %51 = reshape(%50, newshape=[252]) /* ty=Tensor[(252), float32] */;
  %52 = @func_863(%51) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(14, 2, 5), uint64], uint8) */;
  %53 = @func_4582() /* ty=(uint8,) */;
  %54 = @func_5755() /* ty=(uint8, Tensor[(140), float64]) */;
  %55 = %54.0;
  %56 = cast(%55, dtype="bool") /* ty=bool */;
  %57 = cast(%var_6329, dtype="bool") /* ty=Tensor[(15, 1), bool] */;
  %58 = %49.0;
  %59 = %52.1;
  %60 = %53.0;
  %61 = greater(%56, %57) /* ty=Tensor[(15, 1), bool] */;
  (%58, %59, %var_6318, %60, %61)
}

def @func_2280() -> Tensor[(9, 6, 2), int8] {
  %63 = fn () -> Tensor[(9, 6, 2), int8] {
    %62 = @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */;
    %62.0
  };
  %63() /* ty=Tensor[(9, 6, 2), int8] */
}

def @func_7808() -> (Tensor[(9, 6, 2), float32],) {
  @func_7806() /* ty=(Tensor[(9, 6, 2), float32],) */
}

def @func_6903() -> Tensor[(140), float64] {
  %67 = fn () -> Tensor[(140), float64] {
    %64 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
    %65 = %64.1;
    %66 = cast(%65, dtype="float64") /* ty=Tensor[(140), float64] */;
    sinh(%66) /* ty=Tensor[(140), float64] */
  };
  %67() /* ty=Tensor[(140), float64] */
}

def @func_8332() -> Tensor[(9, 6, 2), bool] {
  %68 = @func_1564() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) */;
  %68.1
}

def @func_9304() -> (Tensor[(252), float32],) {
  @func_9302() /* ty=(Tensor[(252), float32],) */
}

def @func_6587() -> (Tensor[(9, 6, 2), float32],) {
  @func_6585() /* ty=(Tensor[(9, 6, 2), float32],) */
}

def @func_7390() -> (Tensor[(9, 6, 2), int8],) {
  @func_7388() /* ty=(Tensor[(9, 6, 2), int8],) */
}

def @func_646() -> Tensor[(9, 6, 2), uint32] {
  %69 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %70 = %69.0;
  %71 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %72 = cast(%71, dtype="uint32") /* ty=Tensor[(9, 6, 2), uint32] */;
  %73 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%70, dtype="uint32") /* ty=Tensor[(9, 6, 2), uint32] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%74, %75) /* ty=Tensor[(9, 6, 2), uint32] */
}

def @func_1244() -> Tensor[(9, 6, 2), uint32] {
  @func_1242() /* ty=Tensor[(9, 6, 2), uint32] */
}

def @func_4304() -> Tensor[(9, 6, 2), int8] {
  %76 = @func_2099() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %76.0
}

def @func_158(%var_139: Tensor[(14, 2, 5), float64]) -> (Tensor[(14, 2, 5), uint64],) {
  %77 = cast(%var_139, dtype="float64") /* ty=Tensor[(14, 2, 5), float64] */;
  %78 = atanh(%77) /* ty=Tensor[(14, 2, 5), float64] */;
  %79 = cast(%78, dtype="uint64") /* ty=Tensor[(14, 2, 5), uint64] */;
  %80 = shape_of(%var_139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%var_139, dtype="uint64") /* ty=Tensor[(14, 2, 5), uint64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %83 = logical_xor(%81, %82) /* ty=Tensor[(14, 2, 5), uint64] */;
  (%83,)
}

def @func_2943(%var_2941: Tensor[(9, 6, 2), int8]) -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32]) {
  @func_2940(%var_2941) /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32]) */
}

def @func_5598() -> (Tensor[(9, 6, 2), float32],) {
  %85 = fn () -> (Tensor[(9, 6, 2), float32],) {
    %84 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
    (%84,)
  };
  %85() /* ty=(Tensor[(9, 6, 2), float32],) */
}

def @func_6776() -> Tensor[(9, 6, 2), float32] {
  @func_6774() /* ty=Tensor[(9, 6, 2), float32] */
}

def @func_6339(%var_6337: Tensor[(252), float32], %var_6338: Tensor[(15, 1), uint8]) -> (uint8, Tensor[(9, 6, 2), int32], Tensor[(252), float32], uint8, Tensor[(15, 1), bool]) {
  @func_6335(%var_6337, %var_6338) /* ty=(uint8, Tensor[(9, 6, 2), int32], Tensor[(252), float32], uint8, Tensor[(15, 1), bool]) */
}

def @func_2433(%var_2431: Tensor[(5, 28), float64]) -> (Tensor[(9, 6, 2), bool], Tensor[(5, 28), float64], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) {
  @func_2430(%var_2431) /* ty=(Tensor[(9, 6, 2), bool], Tensor[(5, 28), float64], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */
}

def @func_5746(%var_5744: Tensor[(9, 6, 2), int8]) -> Tensor[(9, 6, 2), bool] {
  @func_5743(%var_5744) /* ty=Tensor[(9, 6, 2), bool] */
}

def @func_3096() -> Tensor[(140), float64] {
  @func_3094() /* ty=Tensor[(140), float64] */
}

def @func_5671() -> (Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) {
  %86 = @func_3515() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %87 = @func_4130() /* ty=Tensor[(9, 6, 2), uint32] */;
  %88 = %86.0;
  (%87, %88)
}

def @func_7660(%var_7659: Tensor[(140), float64]) -> (Tensor[(9, 6, 2), int8], Tensor[(11, 9, 16), float32], Tensor[(9, 6, 2), uint32], Tensor[(140), float64], Tensor[(11, 9, 16), float32]) {
  %103 = fn (%var_7628: Tensor[(140), float64]) -> (Tensor[(9, 6, 2), int8], Tensor[(11, 9, 16), float32], Tensor[(9, 6, 2), uint32], Tensor[(140), float64], Tensor[(11, 9, 16), float32]) {
    %89 = @func_694() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32]) */;
    %90 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 9, 16), float32] */, dtype="float32") /* ty=Tensor[(11, 9, 16), float32] */;
    %91 = sigmoid(%90) /* ty=Tensor[(11, 9, 16), float32] */;
    %92 = cast(%91, dtype="float32") /* ty=Tensor[(11, 9, 16), float32] */;
    %93 = cast(%var_7628, dtype="float64") /* ty=Tensor[(140), float64] */;
    %94 = reshape(%93, newshape=[140]) /* ty=Tensor[(140), float64] */;
    %95 = @func_7201(%94) /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(5, 105), bool], Tensor[(140), float64], Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), uint32]) */;
    %96 = cast(%91, dtype="float64") /* ty=Tensor[(11, 9, 16), float64] */;
    %97 = sqrt(%96) /* ty=Tensor[(11, 9, 16), float64] */;
    %98 = cast(%97, dtype="float32") /* ty=Tensor[(11, 9, 16), float32] */;
    %99 = %89.0;
    %100 = sinh(%92) /* ty=Tensor[(11, 9, 16), float32] */;
    %101 = %95.0;
    %102 = cosh(%98) /* ty=Tensor[(11, 9, 16), float32] */;
    (%99, %100, %101, %var_7628, %102)
  };
  %103(%var_7659) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(11, 9, 16), float32], Tensor[(9, 6, 2), uint32], Tensor[(140), float64], Tensor[(11, 9, 16), float32]) */
}

def @func_6191() -> Tensor[(9, 6, 2), float32] {
  %104 = @func_4526() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(585), int32]) */;
  %104.1
}

def @func_7755(%var_7719: Tensor[(16), float32]) -> (Tensor[(9, 6, 2), int8], Tensor[(8, 1, 2), uint8], float32, Tensor[(16), float32], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), int32], Tensor[(5, 28), uint64]) {
  %105 = cast(-0.640788f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %106 = cast(%var_7719, dtype="float32") /* ty=Tensor[(16), float32] */;
  %107 = reshape(%105, newshape=[]) /* ty=float32 */;
  %108 = reshape(%106, newshape=[8, 1, 2]) /* ty=Tensor[(8, 1, 2), float32] */;
  %109 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
  %110 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 28), uint64] */, dtype="uint64") /* ty=Tensor[(5, 28), uint64] */;
  %111 = reshape(%110, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), uint64] */;
  %112 = @func_4304() /* ty=Tensor[(9, 6, 2), int8] */;
  %113 = @func_7133(%107, %108) /* ty=Tensor[(8, 1, 2), uint8] */;
  %114 = %109.0;
  %115 = @func_3406(%111) /* ty=Tensor[(14, 2, 5), int32] */;
  (%112, %113, -0.640788f /* ty=float32 */, %var_7719, %114, %115, meta[relay.Constant][2] /* ty=Tensor[(5, 28), uint64] */)
}

def @func_5122() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32]) {
  %121 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32]) {
    %116 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
    %117 = @func_4238() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
    %118 = %116.0;
    %119 = @func_4304() /* ty=Tensor[(9, 6, 2), int8] */;
    %120 = %117.0;
    (%118, %119, %120)
  };
  %121() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32]) */
}

def @func_8160(%var_8159: Tensor[(585), float64]) -> (Tensor[(585), float32], Tensor[(585), uint32]) {
  %133 = fn (%var_8138: Tensor[(585), float64]) -> (Tensor[(585), float32], Tensor[(585), uint32]) {
    %122 = @func_4526() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(585), int32]) */;
    %123 = %122.2;
    %124 = cast(%123, dtype="float32") /* ty=Tensor[(585), float32] */;
    %125 = cast(%123, dtype="float64") /* ty=Tensor[(585), float64] */;
    %126 = cosh(%125) /* ty=Tensor[(585), float64] */;
    %127 = cast(%var_8138, dtype="uint32") /* ty=Tensor[(585), uint32] */;
    %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(1), int32] */;
    %129 = cast(%126, dtype="uint32") /* ty=Tensor[(585), uint32] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %131 = asin(%124) /* ty=Tensor[(585), float32] */;
    %132 = multiply(%129, %130) /* ty=Tensor[(585), uint32] */;
    (%131, %132)
  };
  %133(%var_8159) /* ty=(Tensor[(585), float32], Tensor[(585), uint32]) */
}

def @func_3722() -> (Tensor[(9, 6, 2), uint32],) {
  %135 = fn () -> (Tensor[(9, 6, 2), uint32],) {
    %134 = @func_1242() /* ty=Tensor[(9, 6, 2), uint32] */;
    (%134,)
  };
  %135() /* ty=(Tensor[(9, 6, 2), uint32],) */
}

def @func_2451() -> Tensor[(9, 6, 2), int8] {
  %136 = @func_694() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32]) */;
  %136.0
}

def @func_1891(%var_1874: Tensor[(7, 15, 5), bool], %var_1875: Tensor[(7, 15, 5), bool]) -> Tensor[(7, 15, 5), bool] {
  %137 = cast(%var_1875, dtype="bool") /* ty=Tensor[(7, 15, 5), bool] */;
  %138 = shape_of(%var_1874, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%var_1874, dtype="bool") /* ty=Tensor[(7, 15, 5), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%139, %140) /* ty=Tensor[(7, 15, 5), bool] */
}

def @func_1323() -> (Tensor[(140), float64], Tensor[(140), float64]) {
  @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */
}

def @func_1385() -> Tensor[(9, 6, 2), bool] {
  %141 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %142 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
  %143 = cast(%142, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %144 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%141, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%145, %146) /* ty=Tensor[(9, 6, 2), bool] */
}

def @func_2453() -> Tensor[(9, 6, 2), int8] {
  @func_2451() /* ty=Tensor[(9, 6, 2), int8] */
}

def @func_7297() -> (Tensor[(9, 6, 2), float32],) {
  @func_7295() /* ty=(Tensor[(9, 6, 2), float32],) */
}

def @func_4527() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(585), int32]) {
  %153 = fn () -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(585), int32]) {
    %147 = @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */;
    %148 = cast(meta[relay.Constant][3] /* ty=Tensor[(585), int32] */, dtype="int32") /* ty=Tensor[(585), int32] */;
    %149 = reshape(%148, newshape=[15, 3, 13]) /* ty=Tensor[(15, 3, 13), int32] */;
    %150 = @func_4323(%149) /* ty=(Tensor[(15, 3, 13), uint64], Tensor[(9, 6, 2), float32]) */;
    %151 = %147.0;
    %152 = %150.1;
    (%151, %152, meta[relay.Constant][3] /* ty=Tensor[(585), int32] */)
  };
  %153() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(585), int32]) */
}

def @func_582() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) {
  @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */
}

def @func_5743(%var_5706: Tensor[(9, 6, 2), int8]) -> Tensor[(9, 6, 2), bool] {
  %154 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %155 = %154.1;
  %156 = cast(%var_5706, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%155, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%158, %159) /* ty=Tensor[(9, 6, 2), bool] */
}

def @func_3791() -> (Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(108), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), bool]) {
  @func_3789() /* ty=(Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(108), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), bool]) */
}

def @func_648() -> Tensor[(9, 6, 2), uint32] {
  @func_646() /* ty=Tensor[(9, 6, 2), uint32] */
}

def @func_614(%var_593: Tensor[(9, 6, 2), int8]) -> (Tensor[(9, 6, 2), bool],) {
  %160 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %161 = %160.0;
  %162 = cast(%var_593, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = equal(%164, %165) /* ty=Tensor[(9, 6, 2), bool] */;
  (%166,)
}

def @func_1515(%var_1490: Tensor[(9, 6, 2), float32]) -> Tensor[(9, 6, 2), int32] {
  %167 = @func_772() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %168 = %167.0;
  %169 = cast(%var_1490, dtype="int32") /* ty=Tensor[(9, 6, 2), int32] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="int32") /* ty=Tensor[(9, 6, 2), int32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%171, %172) /* ty=Tensor[(9, 6, 2), int32] */
}

def @func_3205() -> Tensor[(9, 6, 2), float64] {
  @func_3203() /* ty=Tensor[(9, 6, 2), float64] */
}

def @func_2042(%var_2023: Tensor[(9, 6, 2), float32]) -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), uint16]) {
  %173 = @func_772() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %174 = %173.1;
  %175 = cast(%var_2023, dtype="uint16") /* ty=Tensor[(9, 6, 2), uint16] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="uint16") /* ty=Tensor[(9, 6, 2), uint16] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %179 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
  %180 = minimum(%177, %178) /* ty=Tensor[(9, 6, 2), uint16] */;
  (%179, %180)
}

def @func_753() -> Tensor[(9, 6, 2), float32] {
  %181 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %181.1
}

def @func_2596(%var_2595: Tensor[(140), float64]) -> (Tensor[(9, 6, 2), uint32], Tensor[(10, ?, 14), bool], Tensor[(140), float64], Tensor[(9, 6, 2), int32], uint8, Tensor[(5, 28), float64], Tensor[(7, 15, 5), bool], Tensor[(5, 105), bool]) {
  %204 = fn (%var_2560: Tensor[(140), float64]) -> (Tensor[(9, 6, 2), uint32], Tensor[(10, ?, 14), bool], Tensor[(140), float64], Tensor[(9, 6, 2), int32], uint8, Tensor[(5, 28), float64], Tensor[(7, 15, 5), bool], Tensor[(5, 105), bool]) {
    %182 = cast(%var_2560, dtype="float64") /* ty=Tensor[(140), float64] */;
    %183 = reshape(%182, newshape=[10, 1, 14]) /* ty=Tensor[(10, 1, 14), float64] */;
    %184 = @func_1552(%183) /* ty=(Tensor[(10, ?, 14), bool], Tensor[(9, 6, 2), float64], Tensor[(10, ?, 14), bool], Tensor[(9, 6, 2), float32]) */;
    %185 = %184.2;
    %186 = cast(%185, dtype="float64") /* ty=Tensor[(10, ?, 14), float64] */;
    %187 = reshape(%186, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %188 = @func_2430(%187) /* ty=(Tensor[(9, 6, 2), bool], Tensor[(5, 28), float64], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
    %189 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
    %190 = %188.2;
    %191 = cast(%190, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
    %192 = cast(%185, dtype="float64") /* ty=Tensor[(10, ?, 14), float64] */;
    %193 = reshape(%191, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
    %194 = reshape(%192, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %195 = @func_212(%193, %194) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
    %196 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 105), bool] */, dtype="bool") /* ty=Tensor[(5, 105), bool] */;
    %197 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 105), bool] */, dtype="bool") /* ty=Tensor[(5, 105), bool] */;
    %198 = reshape(%196, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), bool] */;
    %199 = reshape(%197, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), bool] */;
    %200 = @func_1242() /* ty=Tensor[(9, 6, 2), uint32] */;
    %201 = %189.2;
    %202 = %195.3;
    %203 = @func_1891(%198, %199) /* ty=Tensor[(7, 15, 5), bool] */;
    (%200, %185, %var_2560, %190, %201, %202, %203, meta[relay.Constant][4] /* ty=Tensor[(5, 105), bool] */)
  };
  %204(%var_2595) /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(10, ?, 14), bool], Tensor[(140), float64], Tensor[(9, 6, 2), int32], uint8, Tensor[(5, 28), float64], Tensor[(7, 15, 5), bool], Tensor[(5, 105), bool]) */
}

def @func_3517() -> (Tensor[(9, 6, 2), float32],) {
  @func_3515() /* ty=(Tensor[(9, 6, 2), float32],) */
}

def @func_6484() -> Tensor[(9, 6, 2), float32] {
  %206 = fn () -> Tensor[(9, 6, 2), float32] {
    %205 = @func_5121() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32]) */;
    %205.2
  };
  %206() /* ty=Tensor[(9, 6, 2), float32] */
}

def @func_617(%var_615: Tensor[(9, 6, 2), int8]) -> (Tensor[(9, 6, 2), bool],) {
  @func_614(%var_615) /* ty=(Tensor[(9, 6, 2), bool],) */
}

def @func_2499(%var_2497: Tensor[(14, 5, 15), int8], %var_2498: Tensor[(14, 5, 15), int8]) -> (Tensor[(14, 5, 15), int8], Tensor[(9, 6, 2), float32]) {
  %214 = fn (%var_2454: Tensor[(14, 5, 15), int8], %var_2455: Tensor[(14, 5, 15), int8]) -> (Tensor[(14, 5, 15), int8], Tensor[(9, 6, 2), float32]) {
    %207 = cast(%var_2455, dtype="int8") /* ty=Tensor[(14, 5, 15), int8] */;
    %208 = shape_of(%var_2454, dtype="int32") /* ty=Tensor[(3), int32] */;
    %209 = cast(%var_2454, dtype="int8") /* ty=Tensor[(14, 5, 15), int8] */;
    %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %211 = @func_1219() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252), float32]) */;
    %212 = add(%209, %210) /* ty=Tensor[(14, 5, 15), int8] */;
    %213 = %211.0;
    (%212, %213)
  };
  %214(%var_2497, %var_2498) /* ty=(Tensor[(14, 5, 15), int8], Tensor[(9, 6, 2), float32]) */
}

def @func_349(%var_297: Tensor[(14, 2, 9), float32], %var_298: Tensor[(14, 2, 9), float32], %var_321: Tensor[(108), float32], %var_322: Tensor[(140), float64]) -> (Tensor[(14, 2, 9), float32], Tensor[(14, 2, 9), float64], Tensor[(9, 6, 2), float32], Tensor[(108), float32], Tensor[(140), float64], Tensor[(14, 2, 9), float64], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) {
  %215 = cast(%var_298, dtype="float32") /* ty=Tensor[(14, 2, 9), float32] */;
  %216 = shape_of(%var_297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%var_297, dtype="float32") /* ty=Tensor[(14, 2, 9), float32] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %219 = cast(%var_298, dtype="float32") /* ty=Tensor[(14, 2, 9), float32] */;
  %220 = erf(%219) /* ty=Tensor[(14, 2, 9), float32] */;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(14, 2, 9), float64] */;
  %222 = cast(%var_321, dtype="float32") /* ty=Tensor[(108), float32] */;
  %223 = cast(%var_322, dtype="float64") /* ty=Tensor[(140), float64] */;
  %224 = reshape(%222, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %225 = reshape(%223, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %226 = @func_212(%224, %225) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %227 = cast(%220, dtype="float64") /* ty=Tensor[(14, 2, 9), float64] */;
  %228 = cast(%var_322, dtype="float64") /* ty=Tensor[(140), float64] */;
  %229 = reshape(%228, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), float64] */;
  %230 = @func_158(%229) /* ty=(Tensor[(14, 2, 5), uint64],) */;
  %231 = @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */;
  %232 = power(%217, %218) /* ty=Tensor[(14, 2, 9), float32] */;
  %233 = log(%221) /* ty=Tensor[(14, 2, 9), float64] */;
  %234 = %226.1;
  %235 = sqrt(%227) /* ty=Tensor[(14, 2, 9), float64] */;
  %236 = %230.0;
  %237 = %231.3;
  (%232, %233, %234, %var_321, %var_322, %235, %236, %237)
}

def @func_3316() -> Tensor[(9, 6, 2), float64] {
  %238 = fn () -> Tensor[(9, 6, 2), float64] {
    @func_3203() /* ty=Tensor[(9, 6, 2), float64] */
  };
  %238() /* ty=Tensor[(9, 6, 2), float64] */
}

def @func_818() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) {
  %239 = @func_694() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32]) */;
  %240 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %241 = %239.0;
  (%240, %241)
}

def @func_971() -> (Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) {
  %242 = cast(meta[relay.Constant][5] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %243 = cast(meta[relay.Constant][5] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %244 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
  %245 = cast(%244, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %246 = cast(meta[relay.Constant][6] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %247 = reshape(%242, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), float32] */;
  %248 = reshape(%243, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), float32] */;
  %249 = reshape(%245, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %250 = reshape(%246, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %251 = @func_349(%247, %248, %249, %250) /* ty=(Tensor[(14, 2, 9), float32], Tensor[(14, 2, 9), float64], Tensor[(9, 6, 2), float32], Tensor[(108), float32], Tensor[(140), float64], Tensor[(14, 2, 9), float64], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) */;
  %252 = %251.6;
  (%244, %252, meta[relay.Constant][5] /* ty=Tensor[(252), float32] */, meta[relay.Constant][6] /* ty=Tensor[(140), float64] */)
}

def @func_3272() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), bool]) {
  %253 = @func_1564() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) */;
  %254 = @func_2451() /* ty=Tensor[(9, 6, 2), int8] */;
  %255 = %253.1;
  (%254, %255)
}

def @func_4839() -> (Tensor[(140), float64],) {
  %256 = @func_3789() /* ty=(Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(108), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), bool]) */;
  %257 = %256.0;
  (%257,)
}

def @func_5223() -> (Tensor[(140), float64], Tensor[(9, 6, 2), int32]) {
  @func_5221() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), int32]) */
}

def @func_6173() -> (Tensor[(15, 4, 13), float64],) {
  %258 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 4, 13), float64] */, dtype="float64") /* ty=Tensor[(15, 4, 13), float64] */;
  %259 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(15, 4, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 4, 13), float64] */, dtype="float64") /* ty=Tensor[(15, 4, 13), float64] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %262 = power(%260, %261) /* ty=Tensor[(15, 4, 13), float64] */;
  (%262,)
}

def @func_5782() -> (Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252, 1), float32]) {
  %268 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252, 1), float32]) {
    %263 = cast(meta[relay.Constant][9] /* ty=Tensor[(252, 1), float32] */, dtype="float32") /* ty=Tensor[(252, 1), float32] */;
    %264 = reshape(%263, newshape=[252]) /* ty=Tensor[(252), float32] */;
    %265 = @func_863(%264) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(14, 2, 5), uint64], uint8) */;
    %266 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
    %267 = %265.2;
    (%266, %267, meta[relay.Constant][9] /* ty=Tensor[(252, 1), float32] */)
  };
  %268() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252, 1), float32]) */
}

def @func_580() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) {
  %269 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %270 = %269.0;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %272 = cast(%270, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %273 = sigmoid(%271) /* ty=Tensor[(9, 6, 2), float32] */;
  %274 = log2(%272) /* ty=Tensor[(9, 6, 2), float32] */;
  (%273, %274)
}

def @func_7375() -> Tensor[(9, 6, 2), bool] {
  %283 = fn () -> Tensor[(9, 6, 2), bool] {
    %275 = @func_2721() /* ty=(Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64]) */;
    %276 = %275.1;
    %277 = @func_5876() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(784), int8]) */;
    %278 = %277.2;
    %279 = cast(%278, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
    %280 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
    %281 = cast(%276, dtype="bool") /* ty=Tensor[(9, 6, 2), bool] */;
    %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%281, %282) /* ty=Tensor[(9, 6, 2), bool] */
  };
  %283() /* ty=Tensor[(9, 6, 2), bool] */
}

def @func_455(%var_452: Tensor[(9, 6, 2), float32], %var_453: Tensor[(9, 6, 2), float32], %var_454: Tensor[(1, 252), float32]) -> (Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(1, 252), float32], Tensor[(140), float64]) {
  @func_450(%var_452, %var_453, %var_454) /* ty=(Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(1, 252), float32], Tensor[(140), float64]) */
}

def @func_394(%var_392: uint8) -> (Tensor[(3, 16, 4), uint8], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64]) {
  @func_391(%var_392) /* ty=(Tensor[(3, 16, 4), uint8], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64]) */
}

def @func_5540(%var_5472: Tensor[(560, 2), bool], %var_5473: float64, %var_5474: Tensor[(2002), float64]) -> (Tensor[(9, 6, 2), float32], Tensor[(140), uint64], Tensor[(560, 2), bool], float64, Tensor[(2002), float64], Tensor[(9, 6, 2), uint32], Tensor[(14, 2, 5), uint64], Tensor[(14, 11, 13), float64], Tensor[(9, 6, 2), float32]) {
  %284 = @func_3515() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="uint32") /* ty=Tensor[(9, 6, 2), uint32] */;
  %287 = reshape(%286, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), uint32] */;
  %288 = @func_1684(%287) /* ty=(Tensor[(9, 6, 2), uint32],) */;
  %289 = cast(meta[relay.Constant][10] /* ty=Tensor[(140), uint64] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %290 = reshape(%289, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), uint64] */;
  %291 = @func_3406(%290) /* ty=Tensor[(14, 2, 5), int32] */;
  %292 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 2, 5), int32] */, dtype="uint64") /* ty=Tensor[(14, 2, 5), uint64] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="uint64") /* ty=Tensor[(14, 2, 5), uint64] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %296 = cast(%var_5472, dtype="bool") /* ty=Tensor[(560, 2), bool] */;
  %297 = cast(%var_5473, dtype="float64") /* ty=float64 */;
  %298 = cast(%var_5474, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %299 = reshape(%296, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), bool] */;
  %300 = reshape(%297, newshape=[]) /* ty=float64 */;
  %301 = reshape(%298, newshape=[143, 14]) /* ty=Tensor[(143, 14), float64] */;
  %302 = @func_4739(%299, %300, %301) /* ty=(Tensor[(14, 5, 16), bool], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8], Tensor[(14, 11, 13), float64], float64, Tensor[(143, 14), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) */;
  %303 = %302.3;
  %304 = cast(%303, dtype="float64") /* ty=Tensor[(14, 11, 13), float64] */;
  %305 = @func_772() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %306 = %305.1;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %308 = %288.0;
  %309 = minimum(%294, %295) /* ty=Tensor[(14, 2, 5), uint64] */;
  %310 = log2(%304) /* ty=Tensor[(14, 11, 13), float64] */;
  %311 = asinh(%307) /* ty=Tensor[(9, 6, 2), float32] */;
  (%285, meta[relay.Constant][10] /* ty=Tensor[(140), uint64] */, %var_5472, %var_5473, %var_5474, %308, %309, %310, %311)
}

def @func_1784(%var_1782: Tensor[(11, 1, 2), int64], %var_1783: Tensor[(11, 11, 2), int64]) -> (Tensor[(11, 11, 2), int64], Tensor[(9, 6, 2), bool]) {
  %316 = fn (%var_1745: Tensor[(11, 1, 2), int64], %var_1746: Tensor[(11, 11, 2), int64]) -> (Tensor[(11, 11, 2), int64], Tensor[(9, 6, 2), bool]) {
    %312 = cast(%var_1745, dtype="int64") /* ty=Tensor[(11, 1, 2), int64] */;
    %313 = cast(%var_1746, dtype="int64") /* ty=Tensor[(11, 11, 2), int64] */;
    %314 = left_shift(%312, %313) /* ty=Tensor[(11, 11, 2), int64] */;
    %315 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
    (%314, %315)
  };
  %316(%var_1782, %var_1783) /* ty=(Tensor[(11, 11, 2), int64], Tensor[(9, 6, 2), bool]) */
}

def @func_4786() -> (Tensor[(9, 6, 2), int8],) {
  @func_4784() /* ty=(Tensor[(9, 6, 2), int8],) */
}

def @func_1686(%var_1685: Tensor[(9, 6, 2), uint32]) -> (Tensor[(9, 6, 2), uint32],) {
  %323 = fn (%var_1667: Tensor[(9, 6, 2), uint32]) -> (Tensor[(9, 6, 2), uint32],) {
    %317 = @func_646() /* ty=Tensor[(9, 6, 2), uint32] */;
    %318 = cast(%var_1667, dtype="uint32") /* ty=Tensor[(9, 6, 2), uint32] */;
    %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
    %320 = cast(%317, dtype="uint32") /* ty=Tensor[(9, 6, 2), uint32] */;
    %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %322 = subtract(%320, %321) /* ty=Tensor[(9, 6, 2), uint32] */;
    (%322,)
  };
  %323(%var_1685) /* ty=(Tensor[(9, 6, 2), uint32],) */
}

def @func_6774() -> Tensor[(9, 6, 2), float32] {
  %324 = @func_3515() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %324.0
}

def @func_2778() -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) {
  %334 = fn () -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) {
    %325 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
    %326 = cast(%325, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
    %327 = cast(%325, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
    %328 = cast(meta[relay.Constant][12] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %329 = reshape(%326, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
    %330 = reshape(%327, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
    %331 = reshape(%328, newshape=[1, 252]) /* ty=Tensor[(1, 252), float32] */;
    %332 = @func_450(%329, %330, %331) /* ty=(Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(1, 252), float32], Tensor[(140), float64]) */;
    %333 = %332.1;
    (%325, %333, meta[relay.Constant][12] /* ty=Tensor[(252), float32] */)
  };
  %334() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) */
}

def @func_503() -> (Tensor[(9, 6, 2), int8],) {
  @func_501() /* ty=(Tensor[(9, 6, 2), int8],) */
}

def @func_1387() -> Tensor[(9, 6, 2), bool] {
  @func_1385() /* ty=Tensor[(9, 6, 2), bool] */
}

def @func_6639() -> (Tensor[(9, 6, 2), float64],) {
  %335 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
  %336 = %335.3;
  (%336,)
}

def @func_7056() -> (Tensor[(1, 140), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) {
  @func_7054() /* ty=(Tensor[(1, 140), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) */
}

def @func_3408(%var_3407: Tensor[(14, 2, 5), uint64]) -> Tensor[(14, 2, 5), int32] {
  %343 = fn (%var_3401: Tensor[(14, 2, 5), uint64]) -> Tensor[(14, 2, 5), int32] {
    %337 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
    %338 = %337.2;
    %339 = cast(%var_3401, dtype="int32") /* ty=Tensor[(14, 2, 5), int32] */;
    %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%338, dtype="int32") /* ty=Tensor[(14, 2, 5), int32] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    multiply(%341, %342) /* ty=Tensor[(14, 2, 5), int32] */
  };
  %343(%var_3407) /* ty=Tensor[(14, 2, 5), int32] */
}

def @func_7114() -> (Tensor[(9, 6, 2), bool],) {
  %344 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
  (%344,)
}

def @func_6879() -> Tensor[(9, 6, 2), float32] {
  %346 = fn () -> Tensor[(9, 6, 2), float32] {
    %345 = @func_3515() /* ty=(Tensor[(9, 6, 2), float32],) */;
    %345.0
  };
  %346() /* ty=Tensor[(9, 6, 2), float32] */
}

def @func_755() -> Tensor[(9, 6, 2), float32] {
  @func_753() /* ty=Tensor[(9, 6, 2), float32] */
}

def @func_8592() -> (Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), float64]) {
  %353 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), float64]) {
    %347 = @func_7295() /* ty=(Tensor[(9, 6, 2), float32],) */;
    %348 = @func_2393() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(14, 2, 5), uint64]) */;
    %349 = @func_6927() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(140), float64], Tensor[(9, 6, 2), float64]) */;
    %350 = %347.0;
    %351 = %348.2;
    %352 = %349.2;
    (%350, %351, %352)
  };
  %353() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), float64]) */
}

def @func_355(%var_351: Tensor[(14, 2, 9), float32], %var_352: Tensor[(14, 2, 9), float32], %var_353: Tensor[(108), float32], %var_354: Tensor[(140), float64]) -> (Tensor[(14, 2, 9), float32], Tensor[(14, 2, 9), float64], Tensor[(9, 6, 2), float32], Tensor[(108), float32], Tensor[(140), float64], Tensor[(14, 2, 9), float64], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) {
  @func_349(%var_351, %var_352, %var_353, %var_354) /* ty=(Tensor[(14, 2, 9), float32], Tensor[(14, 2, 9), float64], Tensor[(9, 6, 2), float32], Tensor[(108), float32], Tensor[(140), float64], Tensor[(14, 2, 9), float64], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) */
}

def @func_4976(%var_4974: Tensor[(6, 140), float64]) -> (Tensor[(9, 6, 2), bool], Tensor[(6, 140), bool]) {
  @func_4973(%var_4974) /* ty=(Tensor[(9, 6, 2), bool], Tensor[(6, 140), bool]) */
}

def @func_3573() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) {
  %358 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) {
    %354 = @func_1219() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252), float32]) */;
    %355 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
    %356 = %354.0;
    %357 = %355.1;
    (%356, %357)
  };
  %358() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */
}

def @func_6791(%var_6790: Tensor[(10, 14, 16), float64]) -> Tensor[(10, 14, 16), float64] {
  %360 = fn (%var_6783: Tensor[(10, 14, 16), float64]) -> Tensor[(10, 14, 16), float64] {
    %359 = cast(%var_6783, dtype="float64") /* ty=Tensor[(10, 14, 16), float64] */;
    atan(%359) /* ty=Tensor[(10, 14, 16), float64] */
  };
  %360(%var_6790) /* ty=Tensor[(10, 14, 16), float64] */
}

def @func_8950() -> Tensor[(9, 6, 2), int8] {
  @func_8948() /* ty=Tensor[(9, 6, 2), int8] */
}

def @func_7116() -> (Tensor[(9, 6, 2), bool],) {
  @func_7114() /* ty=(Tensor[(9, 6, 2), bool],) */
}

def @func_8238() -> (Tensor[(140), float64], Tensor[(9, 6, 2), float32], Tensor[(140), float64]) {
  %361 = @func_5357() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(140), float64]) */;
  %362 = @func_3515() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %363 = @func_5357() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(140), float64]) */;
  %364 = %361.0;
  %365 = %362.0;
  %366 = %363.1;
  (%364, %365, %366)
}

def @func_3710(%var_3707: Tensor[(3, 9, 11), uint64], %var_3708: Tensor[(3, 9, 11), uint64], %var_3709: Tensor[(140), float64]) -> (Tensor[(3, 9, 11), uint64], Tensor[(140), float64], Tensor[(?, 140), int64], Tensor[(1, 140), float64]) {
  %385 = fn (%var_3660: Tensor[(3, 9, 11), uint64], %var_3661: Tensor[(3, 9, 11), uint64], %var_3678: Tensor[(140), float64]) -> (Tensor[(3, 9, 11), uint64], Tensor[(140), float64], Tensor[(?, 140), int64], Tensor[(1, 140), float64]) {
    %367 = cast(%var_3661, dtype="uint64") /* ty=Tensor[(3, 9, 11), uint64] */;
    %368 = shape_of(%var_3660, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(%var_3660, dtype="uint64") /* ty=Tensor[(3, 9, 11), uint64] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %371 = cast(%var_3678, dtype="float64") /* ty=Tensor[(140), float64] */;
    %372 = reshape(%371, newshape=[140]) /* ty=Tensor[(140), float64] */;
    %373 = @func_1041(%372) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], Tensor[(140), float64]) */;
    %374 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
    %375 = %374.3;
    %376 = cast(%var_3678, dtype="int64") /* ty=Tensor[(140), int64] */;
    %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(2), int32] */;
    %378 = cast(%375, dtype="int64") /* ty=Tensor[(1, 140), int64] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %380 = cast(%375, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
    %381 = left_shift(%369, %370) /* ty=Tensor[(3, 9, 11), uint64] */;
    %382 = %373.2;
    %383 = add(%378, %379) /* ty=Tensor[(?, 140), int64] */;
    %384 = log2(%380) /* ty=Tensor[(1, 140), float64] */;
    (%381, %382, %383, %384)
  };
  %385(%var_3707, %var_3708, %var_3709) /* ty=(Tensor[(3, 9, 11), uint64], Tensor[(140), float64], Tensor[(?, 140), int64], Tensor[(1, 140), float64]) */
}

def @func_6139(%var_6131: Tensor[(14, 2, 5), uint64]) -> (Tensor[(9, 6, 2), uint32], Tensor[(14, 2, 5), bool]) {
  %386 = @func_2204() /* ty=Tensor[(14, 2, 5), uint64] */;
  %387 = cast(%var_6131, dtype="bool") /* ty=Tensor[(14, 2, 5), bool] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%386, dtype="bool") /* ty=Tensor[(14, 2, 5), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %391 = @func_646() /* ty=Tensor[(9, 6, 2), uint32] */;
  %392 = not_equal(%389, %390) /* ty=Tensor[(14, 2, 5), bool] */;
  (%391, %392)
}

def @func_1041(%var_1027: Tensor[(140), float64]) -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], Tensor[(140), float64]) {
  %393 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %394 = %393.0;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %396 = cast(%var_1027, dtype="float64") /* ty=Tensor[(140), float64] */;
  %397 = reshape(%395, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %398 = reshape(%396, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %399 = @func_212(%397, %398) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %400 = %399.4;
  (%394, %400, %var_1027)
}

def @func_4841() -> (Tensor[(140), float64],) {
  @func_4839() /* ty=(Tensor[(140), float64],) */
}

def @func_6410(%var_6408: float32, %var_6409: Tensor[(14, 1, 7), float32]) -> (Tensor[(14, 1, 7), float32], Tensor[(9, 6, 2), uint32]) {
  %406 = fn (%var_6386: float32, %var_6387: Tensor[(14, 1, 7), float32]) -> (Tensor[(14, 1, 7), float32], Tensor[(9, 6, 2), uint32]) {
    %401 = cast(%var_6386, dtype="float32") /* ty=float32 */;
    %402 = cast(%var_6387, dtype="float32") /* ty=Tensor[(14, 1, 7), float32] */;
    %403 = @func_2619() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32]) */;
    %404 = mod(%401, %402) /* ty=Tensor[(14, 1, 7), float32] */;
    %405 = %403.1;
    (%404, %405)
  };
  %406(%var_6408, %var_6409) /* ty=(Tensor[(14, 1, 7), float32], Tensor[(9, 6, 2), uint32]) */
}

def @func_6929() -> (Tensor[(9, 6, 2), float32], Tensor[(140), float64], Tensor[(9, 6, 2), float64]) {
  @func_6927() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(140), float64], Tensor[(9, 6, 2), float64]) */
}

def @func_5412() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32]) {
  @func_5410() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32]) */
}

def @func_9028() -> (Tensor[(9, 6, 2), float32],) {
  %407 = @func_7312() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %408 = %407.0;
  (%408,)
}

def @func_1220() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252), float32]) {
  %417 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252), float32]) {
    %409 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
    %410 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
    %411 = cast(meta[relay.Constant][13] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %412 = reshape(%411, newshape=[252]) /* ty=Tensor[(252), float32] */;
    %413 = @func_863(%412) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(14, 2, 5), uint64], uint8) */;
    %414 = %409.0;
    %415 = %410.1;
    %416 = %413.2;
    (%414, %415, %416, meta[relay.Constant][13] /* ty=Tensor[(252), float32] */)
  };
  %417() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252), float32]) */
}

def @func_3789() -> (Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(108), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), bool]) {
  %418 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
  %419 = cast(meta[relay.Constant][14] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %420 = %418.1;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(140), float64] */;
  %422 = reshape(%419, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %423 = reshape(%421, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %424 = @func_212(%422, %423) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %425 = @func_1242() /* ty=Tensor[(9, 6, 2), uint32] */;
  %426 = cast(%425, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
  %427 = reshape(%426, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), int8] */;
  %428 = @func_614(%427) /* ty=(Tensor[(9, 6, 2), bool],) */;
  %429 = %424.2;
  %430 = %428.0;
  (%420, %429, meta[relay.Constant][14] /* ty=Tensor[(108), float32] */, %425, %430)
}

def @func_2940(%var_2892: Tensor[(9, 6, 2), int8]) -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32]) {
  %431 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
  %432 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %433 = %432.0;
  %434 = cast(%var_2892, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %438 = floor_mod(%436, %437) /* ty=Tensor[(9, 6, 2), float32] */;
  %439 = cast(%438, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %440 = reshape(%439, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %441 = %431.3;
  %442 = @func_1515(%440) /* ty=Tensor[(9, 6, 2), int32] */;
  (%441, %438, %442)
}

def @func_4744(%var_4741: Tensor[(14, 5, 16), bool], %var_4742: float64, %var_4743: Tensor[(143, 14), float64]) -> (Tensor[(14, 5, 16), bool], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8], Tensor[(14, 11, 13), float64], float64, Tensor[(143, 14), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) {
  @func_4739(%var_4741, %var_4742, %var_4743) /* ty=(Tensor[(14, 5, 16), bool], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8], Tensor[(14, 11, 13), float64], float64, Tensor[(143, 14), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) */
}

def @func_2299(%var_2290: float64, %var_2291: Tensor[(14, 11, 13), float64]) -> Tensor[(14, 11, 13), float64] {
  %443 = cast(%var_2290, dtype="float64") /* ty=float64 */;
  %444 = cast(%var_2291, dtype="float64") /* ty=Tensor[(14, 11, 13), float64] */;
  add(%443, %444) /* ty=Tensor[(14, 11, 13), float64] */
}

def @func_937() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) {
  %445 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %446 = @func_772() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %447 = %446.1;
  %448 = cast(%447, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
  %449 = %445.1;
  %450 = log(%448) /* ty=Tensor[(9, 6, 2), float64] */;
  (%449, %450)
}

def @func_4973(%var_4968: Tensor[(6, 140), float64]) -> (Tensor[(9, 6, 2), bool], Tensor[(6, 140), bool]) {
  %451 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
  %452 = %451.3;
  %453 = cast(%452, dtype="bool") /* ty=Tensor[(1, 140), bool] */;
  %454 = cast(%var_4968, dtype="bool") /* ty=Tensor[(6, 140), bool] */;
  %455 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
  %456 = not_equal(%453, %454) /* ty=Tensor[(6, 140), bool] */;
  (%455, %456)
}

def @func_5877() -> (Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(784), int8]) {
  %469 = fn () -> (Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(784), int8]) {
    %457 = @func_4839() /* ty=(Tensor[(140), float64],) */;
    %458 = @func_3315() /* ty=Tensor[(9, 6, 2), float64] */;
    %459 = cast(%458, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
    %460 = cast(meta[relay.Constant][15] /* ty=Tensor[(784), int8] */, dtype="int8") /* ty=Tensor[(784), int8] */;
    %461 = %457.0;
    %462 = cast(%461, dtype="float64") /* ty=Tensor[(140), float64] */;
    %463 = reshape(%460, newshape=[7, 7, 16]) /* ty=Tensor[(7, 7, 16), int8] */;
    %464 = reshape(%462, newshape=[140]) /* ty=Tensor[(140), float64] */;
    %465 = @func_5089(%463, %464) /* ty=(Tensor[(7, 7, 16), int8], Tensor[(9, 6, 2), uint32], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], uint8, Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) */;
    %466 = @func_3094() /* ty=Tensor[(140), float64] */;
    %467 = rsqrt(%459) /* ty=Tensor[(9, 6, 2), float64] */;
    %468 = %465.8;
    (%466, %461, %467, %468, meta[relay.Constant][15] /* ty=Tensor[(784), int8] */)
  };
  %469() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(784), int8]) */
}

def @func_1976(%var_1965: Tensor[(525), bool]) -> (Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32], Tensor[(7, 15, 5), bool], Tensor[(525), bool]) {
  %470 = @func_772() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %471 = cast(%var_1965, dtype="bool") /* ty=Tensor[(525), bool] */;
  %472 = cast(%var_1965, dtype="bool") /* ty=Tensor[(525), bool] */;
  %473 = reshape(%471, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), bool] */;
  %474 = reshape(%472, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), bool] */;
  %475 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
  %476 = @func_1242() /* ty=Tensor[(9, 6, 2), uint32] */;
  %477 = %470.1;
  %478 = @func_1891(%473, %474) /* ty=Tensor[(7, 15, 5), bool] */;
  (%475, %476, %477, %478, %var_1965)
}

def @func_2999() -> (Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) {
  @func_2997() /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) */
}

def @func_6175() -> (Tensor[(15, 4, 13), float64],) {
  @func_6173() /* ty=(Tensor[(15, 4, 13), float64],) */
}

def @func_5181() -> Tensor[(9, 6, 2), int16] {
  %486 = fn () -> Tensor[(9, 6, 2), int16] {
    %479 = @func_3789() /* ty=(Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(108), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), bool]) */;
    %480 = %479.3;
    %481 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
    %482 = cast(%481, dtype="int16") /* ty=Tensor[(9, 6, 2), int16] */;
    %483 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
    %484 = cast(%480, dtype="int16") /* ty=Tensor[(9, 6, 2), int16] */;
    %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    bitwise_xor(%484, %485) /* ty=Tensor[(9, 6, 2), int16] */
  };
  %486() /* ty=Tensor[(9, 6, 2), int16] */
}

def @func_2968() -> Tensor[(9, 6, 2), uint32] {
  @func_2966() /* ty=Tensor[(9, 6, 2), uint32] */
}

def @func_7435() -> (Tensor[(9, 6, 2), float64], Tensor[(140), float64]) {
  @func_7433() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(140), float64]) */
}

def @func_2722() -> (Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64]) {
  %509 = fn () -> (Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64]) {
    %487 = @func_1467() /* ty=(Tensor[(252), float32],) */;
    %488 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
    %489 = cast(%488, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
    %490 = cast(%488, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
    %491 = %487.0;
    %492 = cast(%491, dtype="float32") /* ty=Tensor[(252), float32] */;
    %493 = reshape(%489, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
    %494 = reshape(%490, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
    %495 = reshape(%492, newshape=[1, 252]) /* ty=Tensor[(1, 252), float32] */;
    %496 = @func_450(%493, %494, %495) /* ty=(Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(1, 252), float32], Tensor[(140), float64]) */;
    %497 = cast(%488, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
    %498 = erf(%497) /* ty=Tensor[(9, 6, 2), float64] */;
    %499 = cast(%488, dtype="uint32") /* ty=Tensor[(9, 6, 2), uint32] */;
    %500 = reshape(%499, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), uint32] */;
    %501 = @func_1684(%500) /* ty=(Tensor[(9, 6, 2), uint32],) */;
    %502 = %501.0;
    %503 = cast(%502, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
    %504 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
    %505 = cast(%498, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
    %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %507 = %496.0;
    %508 = multiply(%505, %506) /* ty=Tensor[(9, 6, 2), float64] */;
    (%491, %507, %508)
  };
  %509() /* ty=(Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64]) */
}

def @func_121() -> Tensor[(9, 6, 2), float32] {
  %510 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 6, 2), float32] */, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  sin(%510) /* ty=Tensor[(9, 6, 2), float32] */
}

def @func_450(%var_422: Tensor[(9, 6, 2), float32], %var_429: Tensor[(9, 6, 2), float32], %var_439: Tensor[(1, 252), float32]) -> (Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(1, 252), float32], Tensor[(140), float64]) {
  %511 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %512 = cast(%var_422, dtype="int32") /* ty=Tensor[(9, 6, 2), int32] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="int32") /* ty=Tensor[(9, 6, 2), int32] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %516 = cast(%var_429, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
  %517 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%511, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %520 = cast(%var_439, dtype="float32") /* ty=Tensor[(1, 252), float32] */;
  %521 = cast(%var_439, dtype="float32") /* ty=Tensor[(1, 252), float32] */;
  %522 = cast(%var_422, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %523 = cast(meta[relay.Constant][17] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %524 = reshape(%520, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), float32] */;
  %525 = reshape(%521, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), float32] */;
  %526 = reshape(%522, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %527 = reshape(%523, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %528 = @func_349(%524, %525, %526, %527) /* ty=(Tensor[(14, 2, 9), float32], Tensor[(14, 2, 9), float64], Tensor[(9, 6, 2), float32], Tensor[(108), float32], Tensor[(140), float64], Tensor[(14, 2, 9), float64], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) */;
  %529 = right_shift(%514, %515) /* ty=Tensor[(9, 6, 2), int32] */;
  %530 = left_shift(%518, %519) /* ty=Tensor[(9, 6, 2), int8] */;
  %531 = %528.4;
  (%529, %530, %531, %var_439, meta[relay.Constant][17] /* ty=Tensor[(140), float64] */)
}

def @func_2966() -> Tensor[(9, 6, 2), uint32] {
  @func_646() /* ty=Tensor[(9, 6, 2), uint32] */
}

def @func_2619() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32]) {
  %532 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
  %533 = @func_1242() /* ty=Tensor[(9, 6, 2), uint32] */;
  (%532, %533)
}

def @func_8240() -> (Tensor[(140), float64], Tensor[(9, 6, 2), float32], Tensor[(140), float64]) {
  @func_8238() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), float32], Tensor[(140), float64]) */
}

def @func_2101() -> (Tensor[(9, 6, 2), int8],) {
  @func_2099() /* ty=(Tensor[(9, 6, 2), int8],) */
}

def @func_6193() -> Tensor[(9, 6, 2), float32] {
  @func_6191() /* ty=Tensor[(9, 6, 2), float32] */
}

def @func_8683(%var_8681: Tensor[(140), float64], %var_8682: Tensor[(252), float32]) -> (Tensor[(140), float32], Tensor[(12, 2, 8), int64], Tensor[(1, 192), int64], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(15), uint8]) {
  %553 = fn (%var_8643: Tensor[(140), float64], %var_8675: Tensor[(252), float32]) -> (Tensor[(140), float32], Tensor[(12, 2, 8), int64], Tensor[(1, 192), int64], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(15), uint8]) {
    %534 = @func_5755() /* ty=(uint8, Tensor[(140), float64]) */;
    %535 = %534.1;
    %536 = cast(%var_8643, dtype="float32") /* ty=Tensor[(140), float32] */;
    %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(1), int32] */;
    %538 = cast(%535, dtype="float32") /* ty=Tensor[(140), float32] */;
    %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?), float32] */;
    %540 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 192), int64] */, dtype="int64") /* ty=Tensor[(1, 192), int64] */;
    %541 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 192), int64] */, dtype="int64") /* ty=Tensor[(1, 192), int64] */;
    %542 = reshape(%540, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), int64] */;
    %543 = reshape(%541, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), int64] */;
    %544 = @func_8191(%542, %543) /* ty=(Tensor[(12, 2, 8), int64],) */;
    %545 = cast(%var_8675, dtype="float32") /* ty=Tensor[(252), float32] */;
    %546 = cast(meta[relay.Constant][19] /* ty=Tensor[(15), uint8] */, dtype="uint8") /* ty=Tensor[(15), uint8] */;
    %547 = reshape(%545, newshape=[252]) /* ty=Tensor[(252), float32] */;
    %548 = reshape(%546, newshape=[15, 1]) /* ty=Tensor[(15, 1), uint8] */;
    %549 = @func_6335(%547, %548) /* ty=(uint8, Tensor[(9, 6, 2), int32], Tensor[(252), float32], uint8, Tensor[(15, 1), bool]) */;
    %550 = power(%538, %539) /* ty=Tensor[(140), float32] */;
    %551 = %544.0;
    %552 = %549.1;
    (%550, %551, meta[relay.Constant][18] /* ty=Tensor[(1, 192), int64] */, %552, %var_8675, meta[relay.Constant][19] /* ty=Tensor[(15), uint8] */)
  };
  %553(%var_8681, %var_8682) /* ty=(Tensor[(140), float32], Tensor[(12, 2, 8), int64], Tensor[(1, 192), int64], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(15), uint8]) */
}

def @func_6990(%var_6989: Tensor[(242), int64]) -> (Tensor[(9, 6, 2), float64], Tensor[(242), int64], Tensor[(11, 11, 2), bool]) {
  %567 = fn (%var_6959: Tensor[(242), int64]) -> (Tensor[(9, 6, 2), float64], Tensor[(242), int64], Tensor[(11, 11, 2), bool]) {
    %554 = @func_2721() /* ty=(Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64]) */;
    %555 = cast(%var_6959, dtype="int64") /* ty=Tensor[(242), int64] */;
    %556 = reshape(%555, newshape=[242]) /* ty=Tensor[(242), int64] */;
    %557 = @func_6074(%556) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(11, 11, 2), int64], Tensor[(22), int64], Tensor[(242), int64], Tensor[(9, 6, 2), int16]) */;
    %558 = %557.2;
    %559 = cast(%558, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
    %560 = log2(%559) /* ty=Tensor[(11, 11, 2), float64] */;
    %561 = cast(%560, dtype="bool") /* ty=Tensor[(11, 11, 2), bool] */;
    %562 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
    %563 = cast(%558, dtype="bool") /* ty=Tensor[(11, 11, 2), bool] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %565 = %554.2;
    %566 = less_equal(%563, %564) /* ty=Tensor[(11, 11, 2), bool] */;
    (%565, %var_6959, %566)
  };
  %567(%var_6989) /* ty=(Tensor[(9, 6, 2), float64], Tensor[(242), int64], Tensor[(11, 11, 2), bool]) */
}

def @func_2394() -> (Tensor[(140), float64], Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(14, 2, 5), uint64]) {
  %575 = fn () -> (Tensor[(140), float64], Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(14, 2, 5), uint64]) {
    %568 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
    %569 = @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */;
    %570 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
    %571 = %568.0;
    %572 = %569.2;
    %573 = @func_2204() /* ty=Tensor[(14, 2, 5), uint64] */;
    %574 = %570.2;
    (%571, %572, %573, %574)
  };
  %575() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(14, 2, 5), uint64]) */
}

def @func_6941() -> (Tensor[(7, 3, 11), float64],) {
  @func_6939() /* ty=(Tensor[(7, 3, 11), float64],) */
}

def @func_3060() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) {
  %582 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) {
    %576 = @func_646() /* ty=Tensor[(9, 6, 2), uint32] */;
    %577 = cast(%576, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
    %578 = @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */;
    %579 = atanh(%577) /* ty=Tensor[(9, 6, 2), float32] */;
    %580 = @func_2966() /* ty=Tensor[(9, 6, 2), uint32] */;
    %581 = %578.0;
    (%579, %580, %581)
  };
  %582() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) */
}

def @func_4577(%var_4575: Tensor[(525), bool], %var_4576: Tensor[(252), float32]) -> (Tensor[(9, 6, 2), int64], Tensor[(7, 15, 5), bool], Tensor[(525), bool], Tensor[(14, 2, 9), float64], Tensor[(252), float32], Tensor[(140), float64]) {
  %607 = fn (%var_4556: Tensor[(525), bool], %var_4560: Tensor[(252), float32]) -> (Tensor[(9, 6, 2), int64], Tensor[(7, 15, 5), bool], Tensor[(525), bool], Tensor[(14, 2, 9), float64], Tensor[(252), float32], Tensor[(140), float64]) {
    %583 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
    %584 = %583.1;
    %585 = @func_501() /* ty=(Tensor[(9, 6, 2), int8],) */;
    %586 = %585.0;
    %587 = cast(%586, dtype="int64") /* ty=Tensor[(9, 6, 2), int64] */;
    %588 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %589 = cast(%584, dtype="int64") /* ty=Tensor[(9, 6, 2), int64] */;
    %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %591 = cast(%var_4556, dtype="bool") /* ty=Tensor[(525), bool] */;
    %592 = cast(%var_4556, dtype="bool") /* ty=Tensor[(525), bool] */;
    %593 = reshape(%591, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), bool] */;
    %594 = reshape(%592, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), bool] */;
    %595 = cast(%var_4560, dtype="float32") /* ty=Tensor[(252), float32] */;
    %596 = cast(%var_4560, dtype="float32") /* ty=Tensor[(252), float32] */;
    %597 = cast(%584, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
    %598 = cast(meta[relay.Constant][20] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %599 = reshape(%595, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), float32] */;
    %600 = reshape(%596, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), float32] */;
    %601 = reshape(%597, newshape=[108]) /* ty=Tensor[(108), float32] */;
    %602 = reshape(%598, newshape=[140]) /* ty=Tensor[(140), float64] */;
    %603 = @func_349(%599, %600, %601, %602) /* ty=(Tensor[(14, 2, 9), float32], Tensor[(14, 2, 9), float64], Tensor[(9, 6, 2), float32], Tensor[(108), float32], Tensor[(140), float64], Tensor[(14, 2, 9), float64], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8]) */;
    %604 = bitwise_and(%589, %590) /* ty=Tensor[(9, 6, 2), int64] */;
    %605 = @func_1891(%593, %594) /* ty=Tensor[(7, 15, 5), bool] */;
    %606 = %603.1;
    (%604, %605, %var_4556, %606, %var_4560, meta[relay.Constant][20] /* ty=Tensor[(140), float64] */)
  };
  %607(%var_4575, %var_4576) /* ty=(Tensor[(9, 6, 2), int64], Tensor[(7, 15, 5), bool], Tensor[(525), bool], Tensor[(14, 2, 9), float64], Tensor[(252), float32], Tensor[(140), float64]) */
}

def @func_3443() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(14, 2, 5), uint64]) {
  %608 = cast(meta[relay.Constant][21] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %609 = reshape(%608, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %610 = @func_2430(%609) /* ty=(Tensor[(9, 6, 2), bool], Tensor[(5, 28), float64], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %611 = @func_1847() /* ty=Tensor[(9, 6, 2), int8] */;
  %612 = %610.4;
  %613 = @func_2204() /* ty=Tensor[(14, 2, 5), uint64] */;
  (%611, %612, meta[relay.Constant][21] /* ty=Tensor[(140), float64] */, %613)
}

def @func_6641() -> (Tensor[(9, 6, 2), float64],) {
  @func_6639() /* ty=(Tensor[(9, 6, 2), float64],) */
}

def @func_7955(%var_7954: Tensor[(140), uint64]) -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32], Tensor[(14, 2, 5), int32], Tensor[(140), uint64], Tensor[(252, 1), float32], Tensor[(9, 6, 2), float32]) {
  %626 = fn (%var_7940: Tensor[(140), uint64]) -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32], Tensor[(14, 2, 5), int32], Tensor[(140), uint64], Tensor[(252, 1), float32], Tensor[(9, 6, 2), float32]) {
    %614 = @func_7838() /* ty=(Tensor[(9, 6, 2), float64],) */;
    %615 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
    %616 = cast(%var_7940, dtype="uint64") /* ty=Tensor[(140), uint64] */;
    %617 = reshape(%616, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), uint64] */;
    %618 = @func_5781() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252, 1), float32]) */;
    %619 = @func_3572() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
    %620 = %614.0;
    %621 = %615.0;
    %622 = @func_4130() /* ty=Tensor[(9, 6, 2), uint32] */;
    %623 = @func_3406(%617) /* ty=Tensor[(14, 2, 5), int32] */;
    %624 = %618.2;
    %625 = %619.1;
    (%620, %621, %622, %623, %var_7940, %624, %625)
  };
  %626(%var_7954) /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32], Tensor[(14, 2, 5), int32], Tensor[(140), uint64], Tensor[(252, 1), float32], Tensor[(9, 6, 2), float32]) */
}

def @func_161(%var_159: Tensor[(14, 2, 5), float64]) -> (Tensor[(14, 2, 5), uint64],) {
  @func_158(%var_159) /* ty=(Tensor[(14, 2, 5), uint64],) */
}

def @func_6927() -> (Tensor[(9, 6, 2), float32], Tensor[(140), float64], Tensor[(9, 6, 2), float64]) {
  %627 = @func_5597() /* ty=(Tensor[(9, 6, 2), float32],) */;
  %628 = @func_6639() /* ty=(Tensor[(9, 6, 2), float64],) */;
  %629 = %627.0;
  %630 = @func_3094() /* ty=Tensor[(140), float64] */;
  %631 = %628.0;
  (%629, %630, %631)
}

def @func_8014(%var_8013: Tensor[(5, 14, 12), int8]) -> Tensor[(5, 14, 12), int8] {
  %636 = fn (%var_8005: Tensor[(5, 14, 12), int8]) -> Tensor[(5, 14, 12), int8] {
    %632 = cast(%var_8005, dtype="int8") /* ty=Tensor[(5, 14, 12), int8] */;
    %633 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(5, 14, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %634 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 14, 12), int8] */, dtype="int8") /* ty=Tensor[(5, 14, 12), int8] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    minimum(%634, %635) /* ty=Tensor[(5, 14, 12), int8] */
  };
  %636(%var_8013) /* ty=Tensor[(5, 14, 12), int8] */
}

def @func_6585() -> (Tensor[(9, 6, 2), float32],) {
  %637 = @func_6191() /* ty=Tensor[(9, 6, 2), float32] */;
  (%637,)
}

def @func_6222() -> (Tensor[(9, 6, 2), int8],) {
  %640 = fn () -> (Tensor[(9, 6, 2), int8],) {
    %638 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
    %639 = %638.0;
    (%639,)
  };
  %640() /* ty=(Tensor[(9, 6, 2), int8],) */
}

def @func_4130() -> Tensor[(9, 6, 2), uint32] {
  %641 = @func_3789() /* ty=(Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(108), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), bool]) */;
  %641.3
}

def @func_6847() -> (Tensor[(9, 6, 2), float32],) {
  %644 = fn () -> (Tensor[(9, 6, 2), float32],) {
    %642 = @func_3059() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) */;
    %643 = %642.0;
    (%643,)
  };
  %644() /* ty=(Tensor[(9, 6, 2), float32],) */
}

def @func_249() -> (Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) {
  %645 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %646 = cast(%645, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %647 = cast(meta[relay.Constant][23] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %648 = reshape(%646, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %649 = reshape(%647, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %650 = @func_212(%648, %649) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %651 = cast(%645, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %652 = %650.3;
  %653 = cast(%652, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %654 = reshape(%651, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %655 = reshape(%653, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %656 = @func_212(%654, %655) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %657 = cast(%645, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %658 = cast(meta[relay.Constant][23] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %659 = reshape(%657, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %660 = reshape(%658, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %661 = @func_212(%659, %660) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %662 = %661.3;
  %663 = cast(%662, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
  %664 = cast(%662, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
  %665 = asinh(%664) /* ty=Tensor[(5, 28), float32] */;
  %666 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 28), float32] */, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(2), int32] */;
  %668 = cast(%665, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %670 = %656.0;
  %671 = sqrt(%663) /* ty=Tensor[(5, 28), float32] */;
  %672 = floor_mod(%668, %669) /* ty=Tensor[(5, 28), float64] */;
  (%645, %652, meta[relay.Constant][23] /* ty=Tensor[(140), float64] */, %670, %671, %672)
}

def @func_2099() -> (Tensor[(9, 6, 2), int8],) {
  %673 = @func_501() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %674 = %673.0;
  (%674,)
}

def @func_6142(%var_6140: Tensor[(14, 2, 5), uint64]) -> (Tensor[(9, 6, 2), uint32], Tensor[(14, 2, 5), bool]) {
  @func_6139(%var_6140) /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(14, 2, 5), bool]) */
}

def @func_2007() -> (Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) {
  %682 = fn () -> (Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) {
    %675 = @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */;
    %676 = cast(meta[relay.Constant][25] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %677 = reshape(%676, newshape=[]) /* ty=uint8 */;
    %678 = @func_391(%677) /* ty=(Tensor[(3, 16, 4), uint8], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64]) */;
    %679 = %675.0;
    %680 = %678.3;
    %681 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
    (%679, %680, meta[relay.Constant][25] /* ty=uint8 */, %681)
  };
  %682() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */
}

def @func_9030() -> (Tensor[(9, 6, 2), float32],) {
  @func_9028() /* ty=(Tensor[(9, 6, 2), float32],) */
}

def @func_2206() -> Tensor[(14, 2, 5), uint64] {
  @func_2204() /* ty=Tensor[(14, 2, 5), uint64] */
}

def @func_4081() -> (Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) {
  %687 = fn () -> (Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) {
    %683 = @func_1079() /* ty=(Tensor[(9, 6, 2), float64],) */;
    %684 = @func_1385() /* ty=Tensor[(9, 6, 2), bool] */;
    %685 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
    %686 = %683.0;
    (%684, %685, %686)
  };
  %687() /* ty=(Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */
}

def @func_1895(%var_1893: Tensor[(7, 15, 5), bool], %var_1894: Tensor[(7, 15, 5), bool]) -> Tensor[(7, 15, 5), bool] {
  @func_1891(%var_1893, %var_1894) /* ty=Tensor[(7, 15, 5), bool] */
}

def @func_2621() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32]) {
  @func_2619() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32]) */
}

def @func_3094() -> Tensor[(140), float64] {
  %688 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
  %688.1
}

def @func_6761() -> (Tensor[(9, 6, 2), float64], uint8, Tensor[(14, 2, 5), uint64]) {
  %689 = @func_5876() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(784), int8]) */;
  %690 = @func_4582() /* ty=(uint8,) */;
  %691 = %689.2;
  %692 = %690.0;
  %693 = @func_2204() /* ty=Tensor[(14, 2, 5), uint64] */;
  (%691, %692, %693)
}

def @func_7840() -> (Tensor[(9, 6, 2), float64],) {
  @func_7838() /* ty=(Tensor[(9, 6, 2), float64],) */
}

def @func_866(%var_864: Tensor[(252), float32]) -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(14, 2, 5), uint64], uint8) {
  @func_863(%var_864) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(14, 2, 5), uint64], uint8) */
}

def @func_7203(%var_7202: Tensor[(140), float64]) -> (Tensor[(9, 6, 2), uint32], Tensor[(5, 105), bool], Tensor[(140), float64], Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), uint32]) {
  %704 = fn (%var_7190: Tensor[(140), float64]) -> (Tensor[(9, 6, 2), uint32], Tensor[(5, 105), bool], Tensor[(140), float64], Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), uint32]) {
    %694 = @func_4931() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */;
    %695 = cast(%var_7190, dtype="float64") /* ty=Tensor[(140), float64] */;
    %696 = reshape(%695, newshape=[140]) /* ty=Tensor[(140), float64] */;
    %697 = @func_2594(%696) /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(10, ?, 14), bool], Tensor[(140), float64], Tensor[(9, 6, 2), int32], uint8, Tensor[(5, 28), float64], Tensor[(7, 15, 5), bool], Tensor[(5, 105), bool]) */;
    %698 = @func_1564() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) */;
    %699 = @func_2997() /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) */;
    %700 = %694.1;
    %701 = %697.7;
    %702 = %698.1;
    %703 = %699.0;
    (%700, %701, %var_7190, %702, %703)
  };
  %704(%var_7202) /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(5, 105), bool], Tensor[(140), float64], Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), uint32]) */
}

def @func_1150() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) {
  %715 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) {
    %705 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
    %706 = %705.1;
    %707 = cast(%706, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
    %708 = cast(%706, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
    %709 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 140), float64] */, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
    %710 = reshape(%709, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), float64] */;
    %711 = @func_158(%710) /* ty=(Tensor[(14, 2, 5), uint64],) */;
    %712 = log10(%707) /* ty=Tensor[(9, 6, 2), float32] */;
    %713 = exp(%708) /* ty=Tensor[(9, 6, 2), float64] */;
    %714 = %711.0;
    (%712, %713, %714, meta[relay.Constant][26] /* ty=Tensor[(1, 140), float64] */)
  };
  %715() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */
}

def @func_1468() -> (Tensor[(252), float32],) {
  %718 = fn () -> (Tensor[(252), float32],) {
    %716 = @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */;
    %717 = %716.2;
    (%717,)
  };
  %718() /* ty=(Tensor[(252), float32],) */
}

def @func_4132() -> Tensor[(9, 6, 2), uint32] {
  @func_4130() /* ty=Tensor[(9, 6, 2), uint32] */
}

def @func_7806() -> (Tensor[(9, 6, 2), float32],) {
  %719 = @func_6774() /* ty=Tensor[(9, 6, 2), float32] */;
  (%719,)
}

def @func_4323(%var_4311: Tensor[(15, 3, 13), int32]) -> (Tensor[(15, 3, 13), uint64], Tensor[(9, 6, 2), float32]) {
  %720 = cast(%var_4311, dtype="int32") /* ty=Tensor[(15, 3, 13), int32] */;
  %721 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(15, 3, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 3, 13), int32] */, dtype="int32") /* ty=Tensor[(15, 3, 13), int32] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %724 = maximum(%722, %723) /* ty=Tensor[(15, 3, 13), int32] */;
  %725 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 3, 13), int32] */, dtype="uint64") /* ty=Tensor[(15, 3, 13), uint64] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="uint64") /* ty=Tensor[(15, 3, 13), uint64] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %729 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %730 = left_shift(%727, %728) /* ty=Tensor[(15, 3, 13), uint64] */;
  %731 = %729.0;
  (%730, %731)
}

def @func_8418() -> Tensor[(252, 1), float32] {
  %733 = fn () -> Tensor[(252, 1), float32] {
    %732 = @func_5781() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252, 1), float32]) */;
    %732.2
  };
  %733() /* ty=Tensor[(252, 1), float32] */
}

def @func_2192() -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), bool]) {
  %748 = fn () -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), bool]) {
    %734 = @func_1564() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) */;
    %735 = @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */;
    %736 = %735.2;
    %737 = cast(%736, dtype="float64") /* ty=Tensor[(140), float64] */;
    %738 = reshape(%737, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), float64] */;
    %739 = @func_158(%738) /* ty=(Tensor[(14, 2, 5), uint64],) */;
    %740 = %739.0;
    %741 = cast(%736, dtype="bool") /* ty=Tensor[(140), bool] */;
    %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
    %743 = cast(%740, dtype="bool") /* ty=Tensor[(14, 2, 5), bool] */;
    %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %745 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
    %746 = %734.1;
    %747 = less_equal(%743, %744) /* ty=Tensor[(14, 2, 5), bool] */;
    (%745, %746, %747)
  };
  %748() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), bool]) */
}

def @func_5233() -> Tensor[(140), float64] {
  @func_5231() /* ty=Tensor[(140), float64] */
}

def @func_7578() -> (Tensor[(9, 6, 2), float64],) {
  @func_7576() /* ty=(Tensor[(9, 6, 2), float64],) */
}

def @func_939() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) {
  @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */
}

def @func_5221() -> (Tensor[(140), float64], Tensor[(9, 6, 2), int32]) {
  %749 = @func_3094() /* ty=Tensor[(140), float64] */;
  %750 = cast(%749, dtype="float64") /* ty=Tensor[(140), float64] */;
  %751 = reshape(%750, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %752 = @func_1921(%751) /* ty=(Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8]) */;
  %753 = %752.1;
  (%749, %753)
}

def @func_6939() -> (Tensor[(7, 3, 11), float64],) {
  %754 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(7, 3, 11), float64] */;
  %755 = atanh(%754) /* ty=Tensor[(7, 3, 11), float64] */;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(7, 3, 11), float64] */;
  %757 = sigmoid(%756) /* ty=Tensor[(7, 3, 11), float64] */;
  (%757,)
}

def @func_7996() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) {
  %758 = @func_3992() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %759 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
  %760 = %758.0;
  (%759, %760)
}

def @func_3445() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(14, 2, 5), uint64]) {
  @func_3443() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(14, 2, 5), uint64]) */
}

def @func_7838() -> (Tensor[(9, 6, 2), float64],) {
  %761 = @func_4080() /* ty=(Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %762 = %761.2;
  (%762,)
}

def @func_1178() -> Tensor[(9, 6, 2), float64] {
  %763 = @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */;
  %763.1
}

def @func_1923(%var_1922: Tensor[(140), float64]) -> (Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8]) {
  %778 = fn (%var_1908: Tensor[(140), float64]) -> (Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8]) {
    %764 = @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */;
    %765 = %764.2;
    %766 = cast(%765, dtype="float32") /* ty=Tensor[(252), float32] */;
    %767 = reshape(%766, newshape=[252]) /* ty=Tensor[(252), float32] */;
    %768 = @func_863(%767) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(14, 2, 5), uint64], uint8) */;
    %769 = %768.1;
    %770 = cast(%769, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
    %771 = cast(%var_1908, dtype="float64") /* ty=Tensor[(140), float64] */;
    %772 = reshape(%770, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
    %773 = reshape(%771, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %774 = @func_212(%772, %773) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
    %775 = @func_501() /* ty=(Tensor[(9, 6, 2), int8],) */;
    %776 = %774.4;
    %777 = %775.0;
    (%765, %769, %776, %var_1908, %777)
  };
  %778(%var_1922) /* ty=(Tensor[(252), float32], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8]) */
}

def @func_8401() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32]) {
  %783 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32]) {
    %779 = @func_6441() /* ty=(Tensor[(9, 6, 2), float32],) */;
    %780 = @func_4931() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */;
    %781 = %779.0;
    %782 = %780.2;
    (%781, %782)
  };
  %783() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32]) */
}

def @func_5410() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32]) {
  %784 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %785 = @func_2279() /* ty=Tensor[(9, 6, 2), int8] */;
  %786 = %784.0;
  (%785, %786)
}

def @func_6042() -> (Tensor[(9, 6, 2), float32], Tensor[(140), float32], Tensor[(140), float64], Tensor[(9, 6, 2), uint32]) {
  %804 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(140), float32], Tensor[(140), float64], Tensor[(9, 6, 2), uint32]) {
    %787 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
    %788 = @func_4931() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */;
    %789 = %788.0;
    %790 = cast(%789, dtype="float64") /* ty=Tensor[(140), float64] */;
    %791 = sigmoid(%790) /* ty=Tensor[(140), float64] */;
    %792 = cast(%791, dtype="float32") /* ty=Tensor[(140), float32] */;
    %793 = @func_4839() /* ty=(Tensor[(140), float64],) */;
    %794 = %793.0;
    %795 = cast(%794, dtype="float64") /* ty=Tensor[(140), float64] */;
    %796 = shape_of(%789, dtype="int32") /* ty=Tensor[(1), int32] */;
    %797 = cast(%789, dtype="float64") /* ty=Tensor[(140), float64] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?), float64] */;
    %799 = @func_2619() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32]) */;
    %800 = %787.0;
    %801 = sqrt(%792) /* ty=Tensor[(140), float32] */;
    %802 = floor_divide(%797, %798) /* ty=Tensor[(140), float64] */;
    %803 = %799.1;
    (%800, %801, %802, %803)
  };
  %804() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(140), float32], Tensor[(140), float64], Tensor[(9, 6, 2), uint32]) */
}

def @func_4326(%var_4324: Tensor[(15, 3, 13), int32]) -> (Tensor[(15, 3, 13), uint64], Tensor[(9, 6, 2), float32]) {
  @func_4323(%var_4324) /* ty=(Tensor[(15, 3, 13), uint64], Tensor[(9, 6, 2), float32]) */
}

def @func_6838() -> (Tensor[(9, 6, 2), float32], Tensor[(1, 140), float64]) {
  %809 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(1, 140), float64]) {
    %805 = @func_4238() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
    %806 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
    %807 = %805.0;
    %808 = %806.3;
    (%807, %808)
  };
  %809() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(1, 140), float64]) */
}

def @func_1242() -> Tensor[(9, 6, 2), uint32] {
  @func_646() /* ty=Tensor[(9, 6, 2), uint32] */
}

def @func_6074(%var_6068: Tensor[(242), int64]) -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(11, 11, 2), int64], Tensor[(22), int64], Tensor[(242), int64], Tensor[(9, 6, 2), int16]) {
  %810 = @func_4238() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %811 = @func_4931() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */;
  %812 = cast(meta[relay.Constant][29] /* ty=Tensor[(22), int64] */, dtype="int64") /* ty=Tensor[(22), int64] */;
  %813 = cast(%var_6068, dtype="int64") /* ty=Tensor[(242), int64] */;
  %814 = reshape(%812, newshape=[11, 1, 2]) /* ty=Tensor[(11, 1, 2), int64] */;
  %815 = reshape(%813, newshape=[11, 11, 2]) /* ty=Tensor[(11, 11, 2), int64] */;
  %816 = @func_1781(%814, %815) /* ty=(Tensor[(11, 11, 2), int64], Tensor[(9, 6, 2), bool]) */;
  %817 = %810.0;
  %818 = %811.2;
  %819 = %816.0;
  %820 = @func_5180() /* ty=Tensor[(9, 6, 2), int16] */;
  (%817, %818, %819, meta[relay.Constant][29] /* ty=Tensor[(22), int64] */, %var_6068, %820)
}

def @func_3515() -> (Tensor[(9, 6, 2), float32],) {
  %821 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %822 = %821.1;
  %823 = cast(%822, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %824 = sqrt(%823) /* ty=Tensor[(9, 6, 2), float32] */;
  (%824,)
}

def @func_7758(%var_7756: Tensor[(16), float32]) -> (Tensor[(9, 6, 2), int8], Tensor[(8, 1, 2), uint8], float32, Tensor[(16), float32], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), int32], Tensor[(5, 28), uint64]) {
  @func_7755(%var_7756) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(8, 1, 2), uint8], float32, Tensor[(16), float32], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), int32], Tensor[(5, 28), uint64]) */
}

def @func_501() -> (Tensor[(9, 6, 2), int8],) {
  %825 = @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */;
  %826 = %825.3;
  (%826,)
}

def @func_8334() -> Tensor[(9, 6, 2), bool] {
  @func_8332() /* ty=Tensor[(9, 6, 2), bool] */
}

def @func_1321() -> (Tensor[(140), float64], Tensor[(140), float64]) {
  %827 = @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */;
  %828 = @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */;
  %829 = %827.3;
  %830 = %828.2;
  (%829, %830)
}

def @func_215(%var_213: Tensor[(9, 6, 2), float32], %var_214: Tensor[(5, 28), float64]) -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) {
  %844 = fn (%var_183: Tensor[(9, 6, 2), float32], %var_197: Tensor[(5, 28), float64]) -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) {
    %831 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
    %832 = cast(%var_183, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
    %833 = shape_of(%831, dtype="int32") /* ty=Tensor[(3), int32] */;
    %834 = cast(%831, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
    %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %836 = cast(%var_197, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
    %837 = reshape(%836, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), float64] */;
    %838 = @func_158(%837) /* ty=(Tensor[(14, 2, 5), uint64],) */;
    %839 = cast(%831, dtype="float64") /* ty=Tensor[(9, 6, 2), float64] */;
    %840 = logical_xor(%834, %835) /* ty=Tensor[(9, 6, 2), int8] */;
    %841 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
    %842 = %838.0;
    %843 = tan(%839) /* ty=Tensor[(9, 6, 2), float64] */;
    (%840, %841, %842, %var_197, %843)
  };
  %844(%var_213, %var_214) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */
}

def @func_391(%var_368: uint8) -> (Tensor[(3, 16, 4), uint8], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64]) {
  %845 = cast(%var_368, dtype="uint8") /* ty=uint8 */;
  %846 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 16, 4), uint8] */, dtype="uint8") /* ty=Tensor[(3, 16, 4), uint8] */;
  %847 = @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */;
  %848 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
  %849 = cast(%848, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %850 = %847.1;
  %851 = cast(%850, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %852 = reshape(%849, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %853 = reshape(%851, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %854 = @func_212(%852, %853) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
  %855 = bitwise_xor(%845, %846) /* ty=Tensor[(3, 16, 4), uint8] */;
  %856 = %854.2;
  (%855, %850, %848, %856)
}

def @func_1979(%var_1977: Tensor[(525), bool]) -> (Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32], Tensor[(7, 15, 5), bool], Tensor[(525), bool]) {
  @func_1976(%var_1977) /* ty=(Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32], Tensor[(7, 15, 5), bool], Tensor[(525), bool]) */
}

def @func_8948() -> Tensor[(9, 6, 2), int8] {
  %857 = @func_7388() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %857.0
}

def @func_7054() -> (Tensor[(1, 140), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) {
  %858 = @func_1149() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(14, 2, 5), uint64], Tensor[(1, 140), float64]) */;
  %859 = %858.3;
  %860 = cast(%859, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
  %861 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
  %862 = @func_1467() /* ty=(Tensor[(252), float32],) */;
  %863 = asin(%860) /* ty=Tensor[(1, 140), float64] */;
  %864 = %861.0;
  %865 = %862.0;
  (%863, %864, %865)
}

def @func_123() -> Tensor[(9, 6, 2), float32] {
  @func_121() /* ty=Tensor[(9, 6, 2), float32] */
}

def @func_7313() -> (Tensor[(9, 6, 2), float32],) {
  %868 = fn () -> (Tensor[(9, 6, 2), float32],) {
    %866 = @func_4526() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(585), int32]) */;
    %867 = %866.1;
    (%867,)
  };
  %868() /* ty=(Tensor[(9, 6, 2), float32],) */
}

def @func_3396(%var_3395: Tensor[(70, 2), float64]) -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), float32], Tensor[(70, 2), float32]) {
  %882 = fn (%var_3380: Tensor[(70, 2), float64]) -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), float32], Tensor[(70, 2), float32]) {
    %869 = @func_2777() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) */;
    %870 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
    %871 = cast(%var_3380, dtype="float64") /* ty=Tensor[(70, 2), float64] */;
    %872 = reshape(%871, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), float64] */;
    %873 = @func_158(%872) /* ty=(Tensor[(14, 2, 5), uint64],) */;
    %874 = %873.0;
    %875 = cast(%874, dtype="float32") /* ty=Tensor[(14, 2, 5), float32] */;
    %876 = shape_of(%var_3380, dtype="int32") /* ty=Tensor[(2), int32] */;
    %877 = cast(%var_3380, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
    %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %879 = %869.0;
    %880 = %870.0;
    %881 = maximum(%877, %878) /* ty=Tensor[(70, 2), float32] */;
    (%879, %880, %881)
  };
  %882(%var_3395) /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), float32], Tensor[(70, 2), float32]) */
}

def @func_5634(%var_5633: Tensor[(14, 2, 5), uint64]) -> Tensor[(14, 2, 5), float64] {
  %888 = fn (%var_5626: Tensor[(14, 2, 5), uint64]) -> Tensor[(14, 2, 5), float64] {
    %883 = @func_2204() /* ty=Tensor[(14, 2, 5), uint64] */;
    %884 = cast(%var_5626, dtype="float64") /* ty=Tensor[(14, 2, 5), float64] */;
    %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
    %886 = cast(%883, dtype="float64") /* ty=Tensor[(14, 2, 5), float64] */;
    %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%886, %887) /* ty=Tensor[(14, 2, 5), float64] */
  };
  %888(%var_5633) /* ty=Tensor[(14, 2, 5), float64] */
}

def @func_4784() -> (Tensor[(9, 6, 2), int8],) {
  %889 = @func_2777() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) */;
  %890 = %889.1;
  (%890,)
}

def @func_6077(%var_6075: Tensor[(242), int64]) -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(11, 11, 2), int64], Tensor[(22), int64], Tensor[(242), int64], Tensor[(9, 6, 2), int16]) {
  @func_6074(%var_6075) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(11, 11, 2), int64], Tensor[(22), int64], Tensor[(242), int64], Tensor[(9, 6, 2), int16]) */
}

def @func_1044(%var_1042: Tensor[(140), float64]) -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], Tensor[(140), float64]) {
  @func_1041(%var_1042) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], Tensor[(140), float64]) */
}

def @func_3655() -> (Tensor[(9, 6, 2), float64],) {
  %892 = fn () -> (Tensor[(9, 6, 2), float64],) {
    %891 = @func_3203() /* ty=Tensor[(9, 6, 2), float64] */;
    (%891,)
  };
  %892() /* ty=(Tensor[(9, 6, 2), float64],) */
}

def @func_8069() -> (Tensor[(9, 6, 2), float64],) {
  %895 = fn () -> (Tensor[(9, 6, 2), float64],) {
    %893 = @func_6681() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8]) */;
    %894 = %893.2;
    (%894,)
  };
  %895() /* ty=(Tensor[(9, 6, 2), float64],) */
}

def @func_7441(%var_7440: Tensor[(2, 4, 10), float64]) -> (Tensor[(2, 4, 10), float64],) {
  %898 = fn (%var_7436: Tensor[(2, 4, 10), float64]) -> (Tensor[(2, 4, 10), float64],) {
    %896 = cast(%var_7436, dtype="float64") /* ty=Tensor[(2, 4, 10), float64] */;
    %897 = rsqrt(%896) /* ty=Tensor[(2, 4, 10), float64] */;
    (%897,)
  };
  %898(%var_7440) /* ty=(Tensor[(2, 4, 10), float64],) */
}

def @func_8182() -> Tensor[(9, 6, 2), float64] {
  %900 = fn () -> Tensor[(9, 6, 2), float64] {
    %899 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
    %899.3
  };
  %900() /* ty=Tensor[(9, 6, 2), float64] */
}

def @func_9192() -> (Tensor[(252), float32], Tensor[(252), float32], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) {
  %901 = @func_1467() /* ty=(Tensor[(252), float32],) */;
  %902 = %901.0;
  %903 = cast(%902, dtype="float32") /* ty=Tensor[(252), float32] */;
  %904 = @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */;
  %905 = @func_4238() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %906 = @func_2997() /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) */;
  %907 = sigmoid(%903) /* ty=Tensor[(252), float32] */;
  %908 = %904.2;
  %909 = %905.0;
  %910 = %906.1;
  (%907, %908, %909, %910)
}

def @func_1848() -> Tensor[(9, 6, 2), int8] {
  %912 = fn () -> Tensor[(9, 6, 2), int8] {
    %911 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
    %911.1
  };
  %912() /* ty=Tensor[(9, 6, 2), int8] */
}

def @func_7136(%var_7134: float32, %var_7135: Tensor[(8, 1, 2), float32]) -> Tensor[(8, 1, 2), uint8] {
  %918 = fn (%var_7121: float32, %var_7122: Tensor[(8, 1, 2), float32]) -> Tensor[(8, 1, 2), uint8] {
    %913 = cast(%var_7121, dtype="float32") /* ty=float32 */;
    %914 = cast(%var_7122, dtype="float32") /* ty=Tensor[(8, 1, 2), float32] */;
    %915 = multiply(%913, %914) /* ty=Tensor[(8, 1, 2), float32] */;
    %916 = cast(%var_7121, dtype="uint8") /* ty=uint8 */;
    %917 = cast(%915, dtype="uint8") /* ty=Tensor[(8, 1, 2), uint8] */;
    right_shift(%916, %917) /* ty=Tensor[(8, 1, 2), uint8] */
  };
  %918(%var_7134, %var_7135) /* ty=Tensor[(8, 1, 2), uint8] */
}

def @func_5545(%var_5542: Tensor[(560, 2), bool], %var_5543: float64, %var_5544: Tensor[(2002), float64]) -> (Tensor[(9, 6, 2), float32], Tensor[(140), uint64], Tensor[(560, 2), bool], float64, Tensor[(2002), float64], Tensor[(9, 6, 2), uint32], Tensor[(14, 2, 5), uint64], Tensor[(14, 11, 13), float64], Tensor[(9, 6, 2), float32]) {
  @func_5540(%var_5542, %var_5543, %var_5544) /* ty=(Tensor[(9, 6, 2), float32], Tensor[(140), uint64], Tensor[(560, 2), bool], float64, Tensor[(2002), float64], Tensor[(9, 6, 2), uint32], Tensor[(14, 2, 5), uint64], Tensor[(14, 11, 13), float64], Tensor[(9, 6, 2), float32]) */
}

def @func_7210(%var_7205: Tensor[(12, 2, 15), int8]) -> (Tensor[(12, 2, 15), bool],) {
  %919 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 2, 15), int8] */, dtype="bool") /* ty=Tensor[(12, 2, 15), bool] */;
  %920 = shape_of(%var_7205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %921 = cast(%var_7205, dtype="bool") /* ty=Tensor[(12, 2, 15), bool] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %923 = less_equal(%921, %922) /* ty=Tensor[(12, 2, 15), bool] */;
  (%923,)
}

def @func_8606() -> (Tensor[(9, 6, 2), uint32],) {
  %926 = fn () -> (Tensor[(9, 6, 2), uint32],) {
    %924 = @func_3109() /* ty=(Tensor[(9, 6, 2), uint32],) */;
    %925 = %924.0;
    (%925,)
  };
  %926() /* ty=(Tensor[(9, 6, 2), uint32],) */
}

def @func_695() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32]) {
  %930 = fn () -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32]) {
    %927 = @func_545() /* ty=(Tensor[(9, 6, 2), int8],) */;
    %928 = %927.0;
    %929 = @func_646() /* ty=Tensor[(9, 6, 2), uint32] */;
    (%928, %929)
  };
  %930() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), uint32]) */
}

def @func_9117() -> (Tensor[(252, 1), float32], Tensor[(252), float32], Tensor[(252), float32]) {
  %936 = fn () -> (Tensor[(252, 1), float32], Tensor[(252), float32], Tensor[(252), float32]) {
    %931 = @func_1219() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32], Tensor[(252), float32], Tensor[(252), float32]) */;
    %932 = @func_7054() /* ty=(Tensor[(1, 140), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) */;
    %933 = @func_8417() /* ty=Tensor[(252, 1), float32] */;
    %934 = %931.2;
    %935 = %932.2;
    (%933, %934, %935)
  };
  %936() /* ty=(Tensor[(252, 1), float32], Tensor[(252), float32], Tensor[(252), float32]) */
}

def @func_7529() -> (Tensor[(9, 6, 2), float32], Tensor[(1, 140), float64], Tensor[(9, 6, 2), uint32]) {
  @func_7527() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(1, 140), float64], Tensor[(9, 6, 2), uint32]) */
}

def @func_4306() -> Tensor[(9, 6, 2), int8] {
  @func_4304() /* ty=Tensor[(9, 6, 2), int8] */
}

def @func_4739(%var_4696: Tensor[(14, 5, 16), bool], %var_4716: float64, %var_4717: Tensor[(143, 14), float64]) -> (Tensor[(14, 5, 16), bool], Tensor[(14, 2, 5), uint64], Tensor[(9, 6, 2), int8], Tensor[(14, 11, 13), float64], float64, Tensor[(143, 14), float64], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) {
  %937 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 5, 16), bool] */, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
  %938 = shape_of(%var_4696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%var_4696, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %941 = @func_2393() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(14, 2, 5), uint64]) */;
  %942 = cast(%var_4716, dtype="float64") /* ty=float64 */;
  %943 = cast(%var_4717, dtype="float64") /* ty=Tensor[(143, 14), float64] */;
  %944 = reshape(%942, newshape=[]) /* ty=float64 */;
  %945 = reshape(%943, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), float64] */;
  %946 = @func_4238() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %947 = @func_4080() /* ty=(Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
  %948 = logical_and(%939, %940) /* ty=Tensor[(14, 5, 16), bool] */;
  %949 = %941.3;
  %950 = @func_1847() /* ty=Tensor[(9, 6, 2), int8] */;
  %951 = @func_2299(%944, %945) /* ty=Tensor[(14, 11, 13), float64] */;
  %952 = %946.1;
  %953 = @func_2966() /* ty=Tensor[(9, 6, 2), uint32] */;
  %954 = %947.2;
  (%948, %949, %950, %951, %var_4716, %var_4717, %952, %953, %954)
}

def @func_8194(%var_8192: Tensor[(12, 2, 8), int64], %var_8193: Tensor[(12, 2, 8), int64]) -> (Tensor[(12, 2, 8), int64],) {
  %960 = fn (%var_8186: Tensor[(12, 2, 8), int64], %var_8187: Tensor[(12, 2, 8), int64]) -> (Tensor[(12, 2, 8), int64],) {
    %955 = cast(%var_8187, dtype="int64") /* ty=Tensor[(12, 2, 8), int64] */;
    %956 = shape_of(%var_8186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %957 = cast(%var_8186, dtype="int64") /* ty=Tensor[(12, 2, 8), int64] */;
    %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %959 = multiply(%957, %958) /* ty=Tensor[(12, 2, 8), int64] */;
    (%959,)
  };
  %960(%var_8192, %var_8193) /* ty=(Tensor[(12, 2, 8), int64],) */
}

def @func_863(%var_853: Tensor[(252), float32]) -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32], Tensor[(252), float32], Tensor[(14, 2, 5), uint64], uint8) {
  %961 = @func_580() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
  %962 = %961.1;
  %963 = cast(%962, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %964 = cast(%962, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %965 = cast(%var_853, dtype="float32") /* ty=Tensor[(252), float32] */;
  %966 = reshape(%963, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %967 = reshape(%964, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %968 = reshape(%965, newshape=[1, 252]) /* ty=Tensor[(1, 252), float32] */;
  %969 = @func_450(%966, %967, %968) /* ty=(Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), int8], Tensor[(140), float64], Tensor[(1, 252), float32], Tensor[(140), float64]) */;
  %970 = cast(meta[relay.Constant][33] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %971 = reshape(%970, newshape=[]) /* ty=uint8 */;
  %972 = @func_391(%971) /* ty=(Tensor[(3, 16, 4), uint8], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64]) */;
  %973 = %969.0;
  %974 = %972.3;
  (%962, %973, %var_853, %974, meta[relay.Constant][33] /* ty=uint8 */)
}

def @func_2303(%var_2301: float64, %var_2302: Tensor[(14, 11, 13), float64]) -> Tensor[(14, 11, 13), float64] {
  @func_2299(%var_2301, %var_2302) /* ty=Tensor[(14, 11, 13), float64] */
}

def @main(%var_9333: Tensor[(14, 7, 16), float32]) -> (Tensor[(14, 7, 16), float32],) {
  %975 = cast(%var_9333, dtype="float32") /* ty=Tensor[(14, 7, 16), float32] */;
  %976 = rsqrt(%975) /* ty=Tensor[(14, 7, 16), float32] */;
  (%976,)
}

def @func_8525(%var_8520: Tensor[(6, 10, 7), uint16], %var_8521: Tensor[(6, 10, 7), uint16], %var_8522: Tensor[(108), float32], %var_8523: Tensor[(6, 10, 7), bool], %var_8524: Tensor[(6, 10, 7), bool]) -> (Tensor[(9, 6, 2), int32], Tensor[(108), float32], Tensor[(14, 2, 5), int32], Tensor[(140), uint64], Tensor[(6, 10, 7), bool], Tensor[(6, 10, 7), bool]) {
  %1013 = fn (%var_8443: Tensor[(6, 10, 7), uint16], %var_8444: Tensor[(6, 10, 7), uint16], %var_8456: Tensor[(108), float32], %var_8474: Tensor[(6, 10, 7), bool], %var_8484: Tensor[(6, 10, 7), bool]) -> (Tensor[(9, 6, 2), int32], Tensor[(108), float32], Tensor[(14, 2, 5), int32], Tensor[(140), uint64], Tensor[(6, 10, 7), bool], Tensor[(6, 10, 7), bool]) {
    %977 = cast(%var_8456, dtype="float32") /* ty=Tensor[(108), float32] */;
    %978 = reshape(%977, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
    %979 = cast(meta[relay.Constant][34] /* ty=Tensor[(140), uint64] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
    %980 = reshape(%979, newshape=[14, 2, 5]) /* ty=Tensor[(14, 2, 5), uint64] */;
    %981 = cast(%var_8444, dtype="bool") /* ty=Tensor[(6, 10, 7), bool] */;
    %982 = shape_of(%var_8443, dtype="int32") /* ty=Tensor[(3), int32] */;
    %983 = cast(%var_8443, dtype="bool") /* ty=Tensor[(6, 10, 7), bool] */;
    %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %985 = less_equal(%983, %984) /* ty=Tensor[(6, 10, 7), bool] */;
    %986 = cast(%var_8484, dtype="int8") /* ty=Tensor[(6, 10, 7), int8] */;
    %987 = shape_of(%985, dtype="int32") /* ty=Tensor[(3), int32] */;
    %988 = cast(%985, dtype="int8") /* ty=Tensor[(6, 10, 7), int8] */;
    %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %990 = bitwise_xor(%988, %989) /* ty=Tensor[(6, 10, 7), int8] */;
    %991 = cast(%990, dtype="bool") /* ty=Tensor[(6, 10, 7), bool] */;
    %992 = shape_of(%var_8484, dtype="int32") /* ty=Tensor[(3), int32] */;
    %993 = cast(%var_8484, dtype="bool") /* ty=Tensor[(6, 10, 7), bool] */;
    %994 = dyn.reshape(%991, %992, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %995 = cast(%var_8474, dtype="uint64") /* ty=Tensor[(6, 10, 7), uint64] */;
    %996 = shape_of(%985, dtype="int32") /* ty=Tensor[(3), int32] */;
    %997 = cast(%985, dtype="uint64") /* ty=Tensor[(6, 10, 7), uint64] */;
    %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %999 = logical_xor(%997, %998) /* ty=Tensor[(6, 10, 7), uint64] */;
    %1000 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 10, 7), uint16] */, dtype="float32") /* ty=Tensor[(6, 10, 7), float32] */;
    %1001 = shape_of(%var_8444, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1002 = cast(%var_8444, dtype="float32") /* ty=Tensor[(6, 10, 7), float32] */;
    %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1004 = mod(%1002, %1003) /* ty=Tensor[(6, 10, 7), float32] */;
    %1005 = cast(%1004, dtype="bool") /* ty=Tensor[(6, 10, 7), bool] */;
    %1006 = shape_of(%999, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1007 = cast(%999, dtype="bool") /* ty=Tensor[(6, 10, 7), bool] */;
    %1008 = dyn.reshape(%1005, %1006, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1009 = @func_1515(%978) /* ty=Tensor[(9, 6, 2), int32] */;
    %1010 = @func_3406(%980) /* ty=Tensor[(14, 2, 5), int32] */;
    %1011 = greater(%993, %994) /* ty=Tensor[(6, 10, 7), bool] */;
    %1012 = equal(%1007, %1008) /* ty=Tensor[(6, 10, 7), bool] */;
    (%1009, %var_8456, %1010, meta[relay.Constant][34] /* ty=Tensor[(140), uint64] */, %1011, %1012)
  };
  %1013(%var_8520, %var_8521, %var_8522, %var_8523, %var_8524) /* ty=(Tensor[(9, 6, 2), int32], Tensor[(108), float32], Tensor[(14, 2, 5), int32], Tensor[(140), uint64], Tensor[(6, 10, 7), bool], Tensor[(6, 10, 7), bool]) */
}

def @func_5757() -> (uint8, Tensor[(140), float64]) {
  @func_5755() /* ty=(uint8, Tensor[(140), float64]) */
}

def @func_7527() -> (Tensor[(9, 6, 2), float32], Tensor[(1, 140), float64], Tensor[(9, 6, 2), uint32]) {
  %1014 = @func_7054() /* ty=(Tensor[(1, 140), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) */;
  %1015 = @func_4931() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */;
  %1016 = @func_753() /* ty=Tensor[(9, 6, 2), float32] */;
  %1017 = %1014.0;
  %1018 = %1015.1;
  (%1016, %1017, %1018)
}

def @func_251() -> (Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) {
  @func_249() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(5, 28), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(5, 28), float32], Tensor[(5, 28), float64]) */
}

def @func_1518(%var_1516: Tensor[(9, 6, 2), float32]) -> Tensor[(9, 6, 2), int32] {
  @func_1515(%var_1516) /* ty=Tensor[(9, 6, 2), int32] */
}

def @func_7388() -> (Tensor[(9, 6, 2), int8],) {
  %1019 = @func_2777() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8], Tensor[(252), float32]) */;
  %1020 = %1019.1;
  (%1020,)
}

def @func_820() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) {
  @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */
}

def @func_7295() -> (Tensor[(9, 6, 2), float32],) {
  %1021 = @func_6191() /* ty=Tensor[(9, 6, 2), float32] */;
  (%1021,)
}

def @func_3274() -> (Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), bool]) {
  @func_3272() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), bool]) */
}

def @func_2045(%var_2043: Tensor[(9, 6, 2), float32]) -> (Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), uint16]) {
  @func_2042(%var_2043) /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), uint16]) */
}

def @func_2204() -> Tensor[(14, 2, 5), uint64] {
  %1022 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
  %1022.1
}

def @func_2997() -> (Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) {
  %1023 = @func_2619() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32]) */;
  %1024 = %1023.1;
  %1025 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
  (%1024, %1025)
}

def @func_973() -> (Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) {
  @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */
}

def @func_4583() -> (uint8,) {
  %1028 = fn () -> (uint8,) {
    %1026 = @func_2006() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(14, 2, 5), uint64], uint8, Tensor[(9, 6, 2), float64]) */;
    %1027 = %1026.2;
    (%1027,)
  };
  %1028() /* ty=(uint8,) */
}

def @func_5755() -> (uint8, Tensor[(140), float64]) {
  %1029 = @func_4582() /* ty=(uint8,) */;
  %1030 = @func_4931() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */;
  %1031 = %1029.0;
  %1032 = %1030.0;
  (%1031, %1032)
}

def @func_7433() -> (Tensor[(9, 6, 2), float64], Tensor[(140), float64]) {
  %1033 = @func_3789() /* ty=(Tensor[(140), float64], Tensor[(14, 2, 5), uint64], Tensor[(108), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), bool]) */;
  %1034 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
  %1035 = %1033.0;
  (%1034, %1035)
}

def @func_1485() -> (Tensor[(9, 6, 2), float64],) {
  %1037 = fn () -> (Tensor[(9, 6, 2), float64],) {
    %1036 = @func_1178() /* ty=Tensor[(9, 6, 2), float64] */;
    (%1036,)
  };
  %1037() /* ty=(Tensor[(9, 6, 2), float64],) */
}

def @func_1554(%var_1553: Tensor[(10, 1, 14), float64]) -> (Tensor[(10, ?, 14), bool], Tensor[(9, 6, 2), float64], Tensor[(10, ?, 14), bool], Tensor[(9, 6, 2), float32]) {
  %1059 = fn (%var_1528: Tensor[(10, 1, 14), float64]) -> (Tensor[(10, ?, 14), bool], Tensor[(9, 6, 2), float64], Tensor[(10, ?, 14), bool], Tensor[(9, 6, 2), float32]) {
    %1038 = cast(%var_1528, dtype="float64") /* ty=Tensor[(10, 1, 14), float64] */;
    %1039 = atan(%1038) /* ty=Tensor[(10, 1, 14), float64] */;
    %1040 = cast(%1039, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
    %1041 = shape_of(%var_1528, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1042 = cast(%var_1528, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
    %1043 = dyn.reshape(%1040, %1041, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1044 = @func_937() /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64]) */;
    %1045 = cast(%var_1528, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
    %1046 = shape_of(%1039, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1047 = cast(%1039, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
    %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1049 = logical_and(%1047, %1048) /* ty=Tensor[(10, ?, 14), bool] */;
    %1050 = cast(%var_1528, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
    %1051 = shape_of(%1049, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1052 = cast(%1049, dtype="bool") /* ty=Tensor[(10, ?, 14), bool] */;
    %1053 = dyn.reshape(%1050, %1051, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1054 = @func_971() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(252), float32], Tensor[(140), float64]) */;
    %1055 = equal(%1042, %1043) /* ty=Tensor[(10, ?, 14), bool] */;
    %1056 = %1044.1;
    %1057 = logical_or(%1052, %1053) /* ty=Tensor[(10, ?, 14), bool] */;
    %1058 = %1054.0;
    (%1055, %1056, %1057, %1058)
  };
  %1059(%var_1553) /* ty=(Tensor[(10, ?, 14), bool], Tensor[(9, 6, 2), float64], Tensor[(10, ?, 14), bool], Tensor[(9, 6, 2), float32]) */
}

def @func_4255() -> Tensor[(9, 6, 2), bool] {
  %1060 = @func_1564() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) */;
  %1060.1
}

def @func_5673() -> (Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) {
  @func_5671() /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) */
}

def @func_4257() -> Tensor[(9, 6, 2), bool] {
  @func_4255() /* ty=Tensor[(9, 6, 2), bool] */
}

def @func_4932() -> (Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) {
  %1068 = fn () -> (Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) {
    %1061 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
    %1062 = @func_4130() /* ty=Tensor[(9, 6, 2), uint32] */;
    %1063 = cast(%1062, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
    %1064 = reshape(%1063, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), int8] */;
    %1065 = @func_2940(%1064) /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int32]) */;
    %1066 = %1061.1;
    %1067 = %1065.2;
    (%1066, %1062, %1067)
  };
  %1068() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), int32]) */
}

def @func_773() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) {
  %1071 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) {
    %1069 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
    %1070 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
    (%1069, %1070)
  };
  %1071() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */
}

def @func_9194() -> (Tensor[(252), float32], Tensor[(252), float32], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) {
  @func_9192() /* ty=(Tensor[(252), float32], Tensor[(252), float32], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */
}

def @func_5358() -> (Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(140), float64]) {
  %1080 = fn () -> (Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(140), float64]) {
    %1072 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
    %1073 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
    %1074 = @func_3992() /* ty=(Tensor[(9, 6, 2), int8],) */;
    %1075 = @func_4839() /* ty=(Tensor[(140), float64],) */;
    %1076 = %1072.1;
    %1077 = %1073.1;
    %1078 = %1074.0;
    %1079 = %1075.0;
    (%1076, %1077, %1078, %1079)
  };
  %1080() /* ty=(Tensor[(140), float64], Tensor[(140), float64], Tensor[(9, 6, 2), int8], Tensor[(140), float64]) */
}

def @func_7576() -> (Tensor[(9, 6, 2), float64],) {
  %1081 = @func_3203() /* ty=Tensor[(9, 6, 2), float64] */;
  (%1081,)
}

def @func_7213(%var_7211: Tensor[(12, 2, 15), int8]) -> (Tensor[(12, 2, 15), bool],) {
  @func_7210(%var_7211) /* ty=(Tensor[(12, 2, 15), bool],) */
}

def @func_6682() -> (Tensor[(140), float64], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8]) {
  %1090 = fn () -> (Tensor[(140), float64], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8]) {
    %1082 = @func_4839() /* ty=(Tensor[(140), float64],) */;
    %1083 = @func_3059() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float32]) */;
    %1084 = @func_1079() /* ty=(Tensor[(9, 6, 2), float64],) */;
    %1085 = @func_6221() /* ty=(Tensor[(9, 6, 2), int8],) */;
    %1086 = %1082.0;
    %1087 = %1083.0;
    %1088 = %1084.0;
    %1089 = %1085.0;
    (%1086, %1087, %1088, %1089)
  };
  %1090() /* ty=(Tensor[(140), float64], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), int8]) */
}

def @func_2430(%var_2402: Tensor[(5, 28), float64]) -> (Tensor[(9, 6, 2), bool], Tensor[(5, 28), float64], Tensor[(9, 6, 2), int32], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) {
  %1091 = @func_2191() /* ty=(Tensor[(9, 6, 2), float64], Tensor[(9, 6, 2), bool], Tensor[(14, 2, 5), bool]) */;
  %1092 = %1091.1;
  %1093 = cast(%1092, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %1094 = reshape(%1093, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
  %1095 = cast(%var_2402, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %1096 = reshape(%1095, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %1097 = @func_1041(%1096) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float64], Tensor[(140), float64]) */;
  %1098 = %1097.0;
  %1099 = cast(%1098, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
  %1100 = @func_818() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */;
  %1101 = @func_1515(%1094) /* ty=Tensor[(9, 6, 2), int32] */;
  %1102 = acosh(%1099) /* ty=Tensor[(9, 6, 2), float32] */;
  %1103 = %1100.1;
  (%1092, %var_2402, %1101, %1102, %1103)
}

def @func_3993() -> (Tensor[(9, 6, 2), int8],) {
  %1106 = fn () -> (Tensor[(9, 6, 2), int8],) {
    %1104 = @func_501() /* ty=(Tensor[(9, 6, 2), int8],) */;
    %1105 = %1104.0;
    (%1105,)
  };
  %1106() /* ty=(Tensor[(9, 6, 2), int8],) */
}

def @func_6947() -> Tensor[(9, 6, 2), float32] {
  %1108 = fn () -> Tensor[(9, 6, 2), float32] {
    %1107 = @func_4080() /* ty=(Tensor[(9, 6, 2), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */;
    %1107.1
  };
  %1108() /* ty=Tensor[(9, 6, 2), float32] */
}

def @func_7695(%var_7693: Tensor[(8, 15, 5), float64], %var_7694: Tensor[(98), float32]) -> (Tensor[(9, 6, 2), uint32], float32, Tensor[(98), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(8, 15, 5), float64]) {
  %1125 = fn (%var_7664: Tensor[(8, 15, 5), float64], %var_7671: Tensor[(98), float32]) -> (Tensor[(9, 6, 2), uint32], float32, Tensor[(98), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(8, 15, 5), float64]) {
    %1109 = cast(-8.47093f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %1110 = cast(%var_7671, dtype="float32") /* ty=Tensor[(98), float32] */;
    %1111 = reshape(%1109, newshape=[]) /* ty=float32 */;
    %1112 = reshape(%1110, newshape=[14, 1, 7]) /* ty=Tensor[(14, 1, 7), float32] */;
    %1113 = @func_6407(%1111, %1112) /* ty=(Tensor[(14, 1, 7), float32], Tensor[(9, 6, 2), uint32]) */;
    %1114 = %1113.1;
    %1115 = cast(%1114, dtype="float32") /* ty=Tensor[(9, 6, 2), float32] */;
    %1116 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 28), float64] */, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
    %1117 = reshape(%1115, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), float32] */;
    %1118 = reshape(%1116, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %1119 = @func_212(%1117, %1118) /* ty=(Tensor[(9, 6, 2), int8], Tensor[(9, 6, 2), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(9, 6, 2), float64]) */;
    %1120 = cast(%var_7664, dtype="float64") /* ty=Tensor[(8, 15, 5), float64] */;
    %1121 = cos(%1120) /* ty=Tensor[(8, 15, 5), float64] */;
    %1122 = cast(%1121, dtype="float64") /* ty=Tensor[(8, 15, 5), float64] */;
    %1123 = %1119.2;
    %1124 = acos(%1122) /* ty=Tensor[(8, 15, 5), float64] */;
    (%1114, -8.47093f /* ty=float32 */, %var_7671, %1123, meta[relay.Constant][36] /* ty=Tensor[(5, 28), float64] */, %1124)
  };
  %1125(%var_7693, %var_7694) /* ty=(Tensor[(9, 6, 2), uint32], float32, Tensor[(98), float32], Tensor[(14, 2, 5), uint64], Tensor[(5, 28), float64], Tensor[(8, 15, 5), float64]) */
}

def @func_8728() -> Tensor[(9, 6, 2), float32] {
  %1127 = fn () -> Tensor[(9, 6, 2), float32] {
    %1126 = @func_2619() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), uint32]) */;
    %1126.0
  };
  %1127() /* ty=Tensor[(9, 6, 2), float32] */
}

def @func_5231() -> Tensor[(140), float64] {
  %1128 = @func_1321() /* ty=(Tensor[(140), float64], Tensor[(140), float64]) */;
  %1128.0
}

def @func_1565() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) {
  %1135 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) {
    %1129 = @func_772() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float32]) */;
    %1130 = %1129.0;
    %1131 = cast(%1130, dtype="int8") /* ty=Tensor[(9, 6, 2), int8] */;
    %1132 = reshape(%1131, newshape=[9, 6, 2]) /* ty=Tensor[(9, 6, 2), int8] */;
    %1133 = @func_614(%1132) /* ty=(Tensor[(9, 6, 2), bool],) */;
    %1134 = %1133.0;
    (%1130, %1134)
  };
  %1135() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), bool]) */
}

def @func_6763() -> (Tensor[(9, 6, 2), float64], uint8, Tensor[(14, 2, 5), uint64]) {
  @func_6761() /* ty=(Tensor[(9, 6, 2), float64], uint8, Tensor[(14, 2, 5), uint64]) */
}

def @func_7998() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) {
  @func_7996() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), int8]) */
}

def @func_546() -> (Tensor[(9, 6, 2), int8],) {
  %1138 = fn () -> (Tensor[(9, 6, 2), int8],) {
    %1136 = @func_501() /* ty=(Tensor[(9, 6, 2), int8],) */;
    %1137 = %1136.0;
    (%1137,)
  };
  %1138() /* ty=(Tensor[(9, 6, 2), int8],) */
}

def @func_9329() -> Tensor[(9, 6, 2), uint32] {
  %1140 = fn () -> Tensor[(9, 6, 2), uint32] {
    %1139 = @func_2997() /* ty=(Tensor[(9, 6, 2), uint32], Tensor[(9, 6, 2), float64]) */;
    %1139.0
  };
  %1140() /* ty=Tensor[(9, 6, 2), uint32] */
}

def @func_4480() -> (Tensor[(14, 2, 5), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) {
  @func_4478() /* ty=(Tensor[(14, 2, 5), bool], Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */
}

def @func_9302() -> (Tensor[(252), float32],) {
  %1141 = @func_1467() /* ty=(Tensor[(252), float32],) */;
  %1142 = %1141.0;
  (%1142,)
}

def @func_4239() -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) {
  %1146 = fn () -> (Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) {
    %1143 = @func_3654() /* ty=(Tensor[(9, 6, 2), float64],) */;
    %1144 = @func_121() /* ty=Tensor[(9, 6, 2), float32] */;
    %1145 = %1143.0;
    (%1144, %1145)
  };
  %1146() /* ty=(Tensor[(9, 6, 2), float32], Tensor[(9, 6, 2), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen370/build/output.py:3497: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen370/build/output.py", line 3502, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_rsqrt_kernel0(float* __restrict__ tensor, float* __restrict__ placeholder) {
  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 98) {
    if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1568) {
      tensor[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = (1.000000e+00f / sqrtf(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]));
    }
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

