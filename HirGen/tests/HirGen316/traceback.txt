==========mod==========
#[version = "0.0.5"]
def @func_6706() -> (Tensor[(1200), int16], float64) {
  %0 = @func_6525() /* ty=(Tensor[(1200), int16],) */;
  %1 = @func_4397() /* ty=(float64,) */;
  %2 = %0.0;
  %3 = %1.0;
  (%2, %3)
}

def @func_2420(%var_2380: Tensor[(9, 15, 10), float64], %var_2413: Tensor[(9, 15, 10), float64]) -> (Tensor[(9, 15, 10), float32], Tensor[(9, 15, 10), uint8]) {
  %4 = cast(%var_2380, dtype="float64") /* ty=Tensor[(9, 15, 10), float64] */;
  %5 = asinh(%4) /* ty=Tensor[(9, 15, 10), float64] */;
  %6 = cast(%5, dtype="float64") /* ty=Tensor[(9, 15, 10), float64] */;
  %7 = log(%6) /* ty=Tensor[(9, 15, 10), float64] */;
  %8 = cast(%7, dtype="float32") /* ty=Tensor[(9, 15, 10), float32] */;
  %9 = cast(%var_2413, dtype="uint8") /* ty=Tensor[(9, 15, 10), uint8] */;
  %10 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%7, dtype="uint8") /* ty=Tensor[(9, 15, 10), uint8] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %13 = exp(%8) /* ty=Tensor[(9, 15, 10), float32] */;
  %14 = multiply(%11, %12) /* ty=Tensor[(9, 15, 10), uint8] */;
  (%13, %14)
}

def @func_4397() -> (float64,) {
  %15 = @func_4041() /* ty=(Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) */;
  %16 = %15.1;
  (%16,)
}

def @func_5892(%var_5888: Tensor[(480), float64]) -> (Tensor[(1200), int16], Tensor[(16), int8], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32]) {
  %17 = @func_3686() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */;
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %19 = cast(%var_5888, dtype="float64") /* ty=Tensor[(480), float64] */;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %21 = cast(%var_5888, dtype="float64") /* ty=Tensor[(480), float64] */;
  %22 = reshape(%18, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %23 = reshape(%19, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %24 = reshape(%20, newshape=[3, 20]) /* ty=Tensor[(3, 20), float32] */;
  %25 = reshape(%21, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %26 = @func_3791(%22, %23, %24, %25) /* ty=(Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) */;
  %27 = %17.0;
  %28 = %26.9;
  (%27, %28, meta[relay.Constant][0] /* ty=Tensor[(260), float32] */, %var_5888, meta[relay.Constant][1] /* ty=Tensor[(60), float32] */)
}

def @func_2544(%var_2516: Tensor[(3, 10, 16), float32], %var_2517: Tensor[(3, 10, 16), float32]) -> (Tensor[(3, 10, 16), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64], float64) {
  %29 = cast(%var_2517, dtype="float32") /* ty=Tensor[(3, 10, 16), float32] */;
  %30 = shape_of(%var_2516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%var_2516, dtype="float32") /* ty=Tensor[(3, 10, 16), float32] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %33 = power(%31, %32) /* ty=Tensor[(3, 10, 16), float32] */;
  %34 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 10, 16), float32] */, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 10, 16), float32] */, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %39 = reshape(%38, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %40 = @func_636(%39) /* ty=(Tensor[(6, 16, 5), float64],) */;
  %41 = cast(-8.28653f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %42 = reshape(%41, newshape=[]) /* ty=float64 */;
  %43 = divide(%36, %37) /* ty=Tensor[(3, 10, 16), float64] */;
  %44 = %40.0;
  %45 = @func_803(%42) /* ty=Tensor[(4, 14, 15), float64] */;
  (%43, %44, %45, -8.28653f64 /* ty=float64 */)
}

def @func_4041() -> (Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) {
  %46 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 20), float32] */, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
  %48 = cast(-5.36398f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %49 = reshape(%47, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %50 = reshape(%48, newshape=[]) /* ty=float64 */;
  %51 = @func_906(%49, %50) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %52 = %46.2;
  %53 = %51.2;
  (%52, %53, meta[relay.Constant][3] /* ty=Tensor[(3, 20), float32] */, -5.36398f64 /* ty=float64 */)
}

def @func_4966(%var_4938: Tensor[(60), float32], %var_4959: Tensor[(18, 2), float64], %var_4962: Tensor[(1620), float64]) -> (Tensor[(16), int8], Tensor[(3, 20), bool], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32], Tensor[(1200), int16], Tensor[(2860, 18), float32], Tensor[(18, 2), float64], Tensor[(1620), bool]) {
  %54 = @func_4817() /* ty=(Tensor[(16), int8],) */;
  %55 = cast(meta[relay.Constant][4] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %57 = cast(%var_4938, dtype="float32") /* ty=Tensor[(60), float32] */;
  %58 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %59 = reshape(%55, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %60 = reshape(%56, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %61 = reshape(%57, newshape=[3, 20]) /* ty=Tensor[(3, 20), float32] */;
  %62 = reshape(%58, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %63 = @func_3791(%59, %60, %61, %62) /* ty=(Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) */;
  %64 = cast(meta[relay.Constant][6] /* ty=Tensor[(2860, 18), float32] */, dtype="float32") /* ty=Tensor[(2860, 18), float32] */;
  %65 = cast(%var_4938, dtype="float32") /* ty=Tensor[(60), float32] */;
  %66 = cast(%var_4959, dtype="float64") /* ty=Tensor[(18, 2), float64] */;
  %67 = cast(meta[relay.Constant][7] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %68 = reshape(%64, newshape=[51480]) /* ty=Tensor[(51480), float32] */;
  %69 = reshape(%65, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %70 = reshape(%66, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %71 = reshape(%67, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %72 = @func_3592(%68, %69, %70, %71) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(198), float64], float64, Tensor[(260), float32], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(51480), float32], Tensor[(4, 14, 15), int64], Tensor[(3, 2, 10), bool], Tensor[(60), float32], Tensor[(3, 2, 6), float64], Tensor[(36), float64], Tensor[(1620), float64]) */;
  %73 = cast(%var_4962, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %74 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(1620), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %75 = cast(meta[relay.Constant][7] /* ty=Tensor[(1620), float64] */, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?), bool] */;
  %77 = %54.0;
  %78 = %63.12;
  %79 = %72.5;
  %80 = greater_equal(%75, %76) /* ty=Tensor[(1620), bool] */;
  (%77, %78, meta[relay.Constant][4] /* ty=Tensor[(260), float32] */, meta[relay.Constant][5] /* ty=Tensor[(480), float64] */, %var_4938, %79, meta[relay.Constant][6] /* ty=Tensor[(2860, 18), float32] */, %var_4959, %80)
}

def @func_4300() -> (Tensor[(1200), int16],) {
  %81 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %82 = %81.0;
  (%82,)
}

def @func_2067(%var_2005: Tensor[(11, 9, 2), float64], %var_2039: float64, %var_2061: Tensor[(260), float32]) -> (Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) {
  %83 = cast(%var_2005, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
  %84 = cast(%var_2005, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
  %85 = tan(%84) /* ty=Tensor[(11, 9, 2), float64] */;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %87 = cast(meta[relay.Constant][8] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %88 = cast(%var_2039, dtype="float64") /* ty=float64 */;
  %89 = reshape(%87, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %90 = reshape(%88, newshape=[]) /* ty=float64 */;
  %91 = @func_906(%89, %90) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %92 = cast(meta[relay.Constant][8] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %93 = cast(%var_2039, dtype="float64") /* ty=float64 */;
  %94 = reshape(%92, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %95 = reshape(%93, newshape=[]) /* ty=float64 */;
  %96 = @func_906(%94, %95) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %97 = cast(meta[relay.Constant][9] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %98 = reshape(%97, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %99 = @func_636(%98) /* ty=(Tensor[(6, 16, 5), float64],) */;
  %100 = cast(%var_2061, dtype="float32") /* ty=Tensor[(260), float32] */;
  %101 = cast(%var_2039, dtype="float64") /* ty=float64 */;
  %102 = reshape(%100, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %103 = reshape(%101, newshape=[]) /* ty=float64 */;
  %104 = @func_1892(%102, %103) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(4, 14, 15), float64], float64, Tensor[(4, 14, 15), float64], Tensor[(60), float32]) */;
  %105 = cosh(%83) /* ty=Tensor[(11, 9, 2), float64] */;
  %106 = log2(%86) /* ty=Tensor[(11, 9, 2), float32] */;
  %107 = %91.1;
  %108 = %96.1;
  %109 = %99.0;
  %110 = %104.4;
  (%105, %106, %107, meta[relay.Constant][8] /* ty=Tensor[(60), float32] */, %var_2039, %108, %109, meta[relay.Constant][9] /* ty=Tensor[(480), float64] */, %110, %var_2061)
}

def @func_3592(%var_3556: Tensor[(51480), float32], %var_3564: Tensor[(60), float32], %var_3573: Tensor[(36), float64], %var_3574: Tensor[(1620), float64]) -> (Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(198), float64], float64, Tensor[(260), float32], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(51480), float32], Tensor[(4, 14, 15), int64], Tensor[(3, 2, 10), bool], Tensor[(60), float32], Tensor[(3, 2, 6), float64], Tensor[(36), float64], Tensor[(1620), float64]) {
  %111 = @func_3256() /* ty=(Tensor[(1200), int16],) */;
  %112 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
  %113 = @func_3256() /* ty=(Tensor[(1200), int16],) */;
  %114 = cast(meta[relay.Constant][11] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %115 = cast(%var_3556, dtype="float32") /* ty=Tensor[(51480), float32] */;
  %116 = reshape(%114, newshape=[260, 1]) /* ty=Tensor[(260, 1), float32] */;
  %117 = reshape(%115, newshape=[260, 198]) /* ty=Tensor[(260, 198), float32] */;
  %118 = @func_3071(%116, %117) /* ty=(Tensor[(1200), int16], Tensor[(480), float64], float64, Tensor[(260, 198), bool]) */;
  %119 = cast(meta[relay.Constant][10] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %120 = cast(3.90277f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %121 = cast(meta[relay.Constant][11] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %122 = reshape(%119, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %123 = reshape(%120, newshape=[]) /* ty=float64 */;
  %124 = reshape(%121, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %125 = @func_2067(%122, %123, %124) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %126 = %125.2;
  %127 = cast(3.90277f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %128 = reshape(%127, newshape=[]) /* ty=float64 */;
  %129 = @func_803(%128) /* ty=Tensor[(4, 14, 15), float64] */;
  %130 = cast(%129, dtype="int64") /* ty=Tensor[(4, 14, 15), int64] */;
  %131 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%126, dtype="int64") /* ty=Tensor[(4, 14, 15), int64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %134 = cast(%var_3564, dtype="float32") /* ty=Tensor[(60), float32] */;
  %135 = cast(3.90277f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %136 = reshape(%134, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %137 = reshape(%135, newshape=[]) /* ty=float64 */;
  %138 = @func_906(%136, %137) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %139 = cast(%var_3573, dtype="float64") /* ty=Tensor[(36), float64] */;
  %140 = cast(%var_3573, dtype="float64") /* ty=Tensor[(36), float64] */;
  %141 = cast(%var_3573, dtype="float64") /* ty=Tensor[(36), float64] */;
  %142 = %111.0;
  %143 = cast(%142, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %144 = cast(%var_3574, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %145 = reshape(%139, newshape=[3, 2, 6]) /* ty=Tensor[(3, 2, 6), float64] */;
  %146 = reshape(%140, newshape=[3, 2, 6]) /* ty=Tensor[(3, 2, 6), float64] */;
  %147 = reshape(%141, newshape=[3, 2, 6]) /* ty=Tensor[(3, 2, 6), float64] */;
  %148 = reshape(%143, newshape=[1200]) /* ty=Tensor[(1200), int16] */;
  %149 = reshape(%144, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %150 = @func_3471(%145, %146, %147, %148, %149) /* ty=(Tensor[(3, 2, 6), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(3, 2, 6), float64], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(260, 1), float32], Tensor[(980), int32]) */;
  %151 = %112.0;
  %152 = %113.0;
  %153 = %118.0;
  %154 = minimum(%132, %133) /* ty=Tensor[(4, 14, 15), int64] */;
  %155 = %138.0;
  %156 = %150.5;
  (%142, %151, meta[relay.Constant][10] /* ty=Tensor[(198), float64] */, 3.90277f64 /* ty=float64 */, meta[relay.Constant][11] /* ty=Tensor[(260), float32] */, %152, %153, %var_3556, %154, %155, %var_3564, %156, %var_3573, %var_3574)
}

def @func_5077() -> (float64,) {
  %157 = @func_4759() /* ty=(Tensor[(1200), bool], Tensor[(3, 2, 10), bool], Tensor[(60, 1), float32], float64, Tensor[(10, 10, 12), bool]) */;
  %158 = %157.3;
  (%158,)
}

def @func_2583(%var_2559: Tensor[(8, 14, 10), uint16], %var_2560: Tensor[(8, 14, 10), uint16]) -> (Tensor[(8, 14, 10), uint16], Tensor[(8, 14, 10), bool]) {
  %159 = cast(%var_2560, dtype="uint16") /* ty=Tensor[(8, 14, 10), uint16] */;
  %160 = shape_of(%var_2559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%var_2559, dtype="uint16") /* ty=Tensor[(8, 14, 10), uint16] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %163 = cast(%var_2559, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
  %164 = log(%163) /* ty=Tensor[(8, 14, 10), float32] */;
  %165 = cast(%var_2560, dtype="bool") /* ty=Tensor[(8, 14, 10), bool] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%164, dtype="bool") /* ty=Tensor[(8, 14, 10), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %169 = bitwise_or(%161, %162) /* ty=Tensor[(8, 14, 10), uint16] */;
  %170 = not_equal(%167, %168) /* ty=Tensor[(8, 14, 10), bool] */;
  (%169, %170)
}

def @func_6578(%var_6576: uint64) -> (Tensor[(1200), int16], uint64, uint64) {
  %171 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %172 = cast(%var_6576, dtype="uint64") /* ty=uint64 */;
  %173 = reshape(%172, newshape=[]) /* ty=uint64 */;
  %174 = @func_5099(%173) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(980), int32], uint64, Tensor[(264), uint64], Tensor[(2, 600), uint8]) */;
  %175 = %171.2;
  %176 = %174.2;
  (%175, %176, %var_6576)
}

def @func_6132(%var_6129: Tensor[(28, 32), float64], %var_6130: Tensor[(198), float64]) -> (Tensor[(6, 16, 5), float64], Tensor[(1200), int16], Tensor[(3, 2, 10), bool], Tensor[(28, 32), float64], Tensor[(198), float64]) {
  %177 = @func_4533() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64], Tensor[(480), float64]) */;
  %178 = cast(%var_6129, dtype="float64") /* ty=Tensor[(28, 32), float64] */;
  %179 = cast(%var_6130, dtype="float64") /* ty=Tensor[(198), float64] */;
  %180 = reshape(%178, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), float64] */;
  %181 = reshape(%179, newshape=[33, 6]) /* ty=Tensor[(33, 6), float64] */;
  %182 = @func_5294(%180, %181) /* ty=(Tensor[(14, 16, 4), float64], Tensor[(3, 2, 10), bool], float64, Tensor[(33, 6), float64]) */;
  %183 = %177.1;
  %184 = @func_4861() /* ty=Tensor[(1200), int16] */;
  %185 = %182.1;
  (%183, %184, %185, %var_6129, %var_6130)
}

def @func_4791() -> (Tensor[(9, 15, 10), uint8], Tensor[(1200), int16]) {
  %186 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %187 = @func_3686() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */;
  %188 = %186.1;
  %189 = %187.1;
  (%188, %189)
}

def @func_6864() -> (Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(9, 150), float32]) {
  %190 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %191 = %190.2;
  %192 = cast(%191, dtype="float64") /* ty=Tensor[(9, 150), float64] */;
  %193 = log2(%192) /* ty=Tensor[(9, 150), float64] */;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(9, 150), float32] */;
  %195 = @func_6658() /* ty=Tensor[(1200), int16] */;
  %196 = @func_3139() /* ty=Tensor[(1200), int16] */;
  %197 = @func_3139() /* ty=Tensor[(1200), int16] */;
  %198 = exp(%194) /* ty=Tensor[(9, 150), float32] */;
  (%195, %196, %197, %198)
}

def @func_803(%var_796: float64) -> Tensor[(4, 14, 15), float64] {
  %199 = cast(%var_796, dtype="float64") /* ty=float64 */;
  %200 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 14, 15), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 15), float64] */;
  floor_mod(%199, %200) /* ty=Tensor[(4, 14, 15), float64] */
}

def @func_3071(%var_3040: Tensor[(260, 1), float32], %var_3063: Tensor[(260, 198), float32]) -> (Tensor[(1200), int16], Tensor[(480), float64], float64, Tensor[(260, 198), bool]) {
  %201 = @func_2661() /* ty=(Tensor[(1200), int16],) */;
  %202 = cast(meta[relay.Constant][13] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %203 = cast(-2.68632f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %204 = cast(%var_3040, dtype="float32") /* ty=Tensor[(260, 1), float32] */;
  %205 = reshape(%202, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %206 = reshape(%203, newshape=[]) /* ty=float64 */;
  %207 = reshape(%204, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %208 = @func_2067(%205, %206, %207) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %209 = cast(meta[relay.Constant][13] /* ty=Tensor[(198), float64] */, dtype="uint32") /* ty=Tensor[(198), uint32] */;
  %210 = cast(%var_3040, dtype="uint32") /* ty=Tensor[(260, 1), uint32] */;
  %211 = right_shift(%209, %210) /* ty=Tensor[(260, 198), uint32] */;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(260, 198), float32] */;
  %213 = log(%212) /* ty=Tensor[(260, 198), float32] */;
  %214 = cast(%var_3063, dtype="bool") /* ty=Tensor[(260, 198), bool] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(2), int32] */;
  %216 = cast(%213, dtype="bool") /* ty=Tensor[(260, 198), bool] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %218 = %201.0;
  %219 = %208.7;
  %220 = logical_or(%216, %217) /* ty=Tensor[(260, 198), bool] */;
  (%218, %219, -2.68632f64 /* ty=float64 */, %220)
}

def @func_8883() -> (Tensor[(1200), int16],) {
  %221 = @func_7405() /* ty=Tensor[(1200), int16] */;
  (%221,)
}

def @func_7671(%var_7664: Tensor[(15, 4, 5), int64]) -> (Tensor[(15, 4, 5), bool],) {
  %222 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 4, 5), int64] */, dtype="bool") /* ty=Tensor[(15, 4, 5), bool] */;
  %223 = shape_of(%var_7664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_7664, dtype="bool") /* ty=Tensor[(15, 4, 5), bool] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %226 = greater(%224, %225) /* ty=Tensor[(15, 4, 5), bool] */;
  (%226,)
}

def @func_4450() -> (Tensor[(1200), int16], Tensor[(6, 16, 5), float64]) {
  %227 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
  %228 = %227.2;
  %229 = cast(%228, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
  %230 = erf(%229) /* ty=Tensor[(6, 16, 5), float32] */;
  %231 = cast(%230, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
  %232 = log(%231) /* ty=Tensor[(6, 16, 5), float64] */;
  %233 = cast(%232, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
  %234 = @func_3139() /* ty=Tensor[(1200), int16] */;
  %235 = cosh(%233) /* ty=Tensor[(6, 16, 5), float64] */;
  (%234, %235)
}

def @func_4759() -> (Tensor[(1200), bool], Tensor[(3, 2, 10), bool], Tensor[(60, 1), float32], float64, Tensor[(10, 10, 12), bool]) {
  %236 = @func_3139() /* ty=Tensor[(1200), int16] */;
  %237 = cast(meta[relay.Constant][15] /* ty=Tensor[(1200), int16] */, dtype="bool") /* ty=Tensor[(1200), bool] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(1), int32] */;
  %239 = cast(%236, dtype="bool") /* ty=Tensor[(1200), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?), bool] */;
  %241 = cast(meta[relay.Constant][16] /* ty=Tensor[(60, 1), float32] */, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %242 = cast(-4.7058f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %243 = reshape(%241, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %244 = reshape(%242, newshape=[]) /* ty=float64 */;
  %245 = @func_906(%243, %244) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %246 = cast(%236, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %247 = cast(meta[relay.Constant][15] /* ty=Tensor[(1200), int16] */, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %248 = reshape(%246, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %249 = reshape(%247, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %250 = @func_2215(%248, %249) /* ty=(Tensor[(10, 10, 12), bool],) */;
  %251 = logical_and(%239, %240) /* ty=Tensor[(1200), bool] */;
  %252 = %245.0;
  %253 = %250.0;
  (%251, %252, meta[relay.Constant][16] /* ty=Tensor[(60, 1), float32] */, -4.7058f64 /* ty=float64 */, %253)
}

def @func_9058() -> (Tensor[(1200), int16], Tensor[(1200), int16]) {
  %254 = @func_6706() /* ty=(Tensor[(1200), int16], float64) */;
  %255 = @func_7895() /* ty=Tensor[(1200), int16] */;
  %256 = %254.0;
  (%255, %256)
}

def @func_4278(%var_4267: Tensor[(198), float64]) -> (Tensor[(16), int8], Tensor[(15, 12, 9), float64], Tensor[(44), uint64], Tensor[(60), float32], float64, Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(260), float32], Tensor[(14, 14, 5), bool], Tensor[(980), int32]) {
  %257 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
  %258 = cast(meta[relay.Constant][17] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %259 = cast(meta[relay.Constant][18] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %260 = cast(-7.44961f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %261 = cast(meta[relay.Constant][17] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %262 = reshape(%258, newshape=[2, 11, 2]) /* ty=Tensor[(2, 11, 2), uint64] */;
  %263 = reshape(%259, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %264 = reshape(%260, newshape=[]) /* ty=float64 */;
  %265 = reshape(%261, newshape=[2, 11, 2]) /* ty=Tensor[(2, 11, 2), uint64] */;
  %266 = @func_2905(%262, %263, %264, %265) /* ty=(Tensor[(1200), int16], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(2, 11, 2), float64], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(2, 11, 2), uint64], Tensor[(2, 11, 2), float32]) */;
  %267 = cast(%var_4267, dtype="float64") /* ty=Tensor[(198), float64] */;
  %268 = cast(-7.44961f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %269 = cast(meta[relay.Constant][19] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %270 = reshape(%267, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %271 = reshape(%268, newshape=[]) /* ty=float64 */;
  %272 = reshape(%269, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %273 = @func_2067(%270, %271, %272) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %274 = cast(meta[relay.Constant][20] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %275 = reshape(%274, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %276 = %257.3;
  %277 = %266.1;
  %278 = %273.0;
  %279 = @func_1338(%275) /* ty=Tensor[(14, 14, 5), bool] */;
  (%276, %277, meta[relay.Constant][17] /* ty=Tensor[(44), uint64] */, meta[relay.Constant][18] /* ty=Tensor[(60), float32] */, -7.44961f64 /* ty=float64 */, %278, %var_4267, meta[relay.Constant][19] /* ty=Tensor[(260), float32] */, %279, meta[relay.Constant][20] /* ty=Tensor[(980), int32] */)
}

def @func_1892(%var_1880: Tensor[(13, 10, 2), float32], %var_1885: float64) -> (Tensor[(13, 10, 2), float32], Tensor[(4, 14, 15), float64], float64, Tensor[(4, 14, 15), float64], Tensor[(60), float32]) {
  %280 = cast(%var_1880, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %281 = cast(%var_1885, dtype="float64") /* ty=float64 */;
  %282 = reshape(%281, newshape=[]) /* ty=float64 */;
  %283 = cast(meta[relay.Constant][21] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %284 = cast(%var_1885, dtype="float64") /* ty=float64 */;
  %285 = reshape(%283, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %286 = reshape(%284, newshape=[]) /* ty=float64 */;
  %287 = @func_906(%285, %286) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %288 = atanh(%280) /* ty=Tensor[(13, 10, 2), float32] */;
  %289 = @func_803(%282) /* ty=Tensor[(4, 14, 15), float64] */;
  %290 = %287.1;
  (%288, %289, %var_1885, %290, meta[relay.Constant][21] /* ty=Tensor[(60), float32] */)
}

def @func_4713() -> (Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) {
  %291 = @func_4450() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64]) */;
  %292 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 150), float64] */, dtype="float64") /* ty=Tensor[(9, 150), float64] */;
  %293 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 150), float64] */, dtype="float64") /* ty=Tensor[(9, 150), float64] */;
  %294 = reshape(%292, newshape=[9, 15, 10]) /* ty=Tensor[(9, 15, 10), float64] */;
  %295 = reshape(%293, newshape=[9, 15, 10]) /* ty=Tensor[(9, 15, 10), float64] */;
  %296 = @func_2420(%294, %295) /* ty=(Tensor[(9, 15, 10), float32], Tensor[(9, 15, 10), uint8]) */;
  %297 = %291.1;
  %298 = cast(%297, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
  %299 = cast(%297, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
  %300 = reshape(%298, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
  %301 = reshape(%299, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
  %302 = @func_2544(%300, %301) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64], float64) */;
  %303 = %302.0;
  %304 = cast(%303, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %305 = %296.1;
  %306 = sin(%304) /* ty=Tensor[(3, 10, 16), float64] */;
  (%297, %305, meta[relay.Constant][22] /* ty=Tensor[(9, 150), float64] */, %306)
}

def @func_5294(%var_5250: Tensor[(14, 16, 4), float64], %var_5282: Tensor[(33, 6), float64]) -> (Tensor[(14, 16, 4), float64], Tensor[(3, 2, 10), bool], float64, Tensor[(33, 6), float64]) {
  %307 = cast(%var_5250, dtype="float64") /* ty=Tensor[(14, 16, 4), float64] */;
  %308 = @func_4759() /* ty=(Tensor[(1200), bool], Tensor[(3, 2, 10), bool], Tensor[(60, 1), float32], float64, Tensor[(10, 10, 12), bool]) */;
  %309 = cast(%var_5282, dtype="float64") /* ty=Tensor[(33, 6), float64] */;
  %310 = reshape(%309, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %311 = @func_4278(%310) /* ty=(Tensor[(16), int8], Tensor[(15, 12, 9), float64], Tensor[(44), uint64], Tensor[(60), float32], float64, Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(260), float32], Tensor[(14, 14, 5), bool], Tensor[(980), int32]) */;
  %312 = atanh(%307) /* ty=Tensor[(14, 16, 4), float64] */;
  %313 = %308.1;
  %314 = %311.4;
  (%312, %313, %314, %var_5282)
}

def @func_906(%var_874: Tensor[(3, 2, 10), float32], %var_902: float64) -> (Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) {
  %315 = cast(%var_874, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %316 = sin(%315) /* ty=Tensor[(3, 2, 10), float32] */;
  %317 = cast(%316, dtype="bool") /* ty=Tensor[(3, 2, 10), bool] */;
  %318 = shape_of(%var_874, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%var_874, dtype="bool") /* ty=Tensor[(3, 2, 10), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %321 = cast(%var_902, dtype="float64") /* ty=float64 */;
  %322 = reshape(%321, newshape=[]) /* ty=float64 */;
  %323 = greater(%319, %320) /* ty=Tensor[(3, 2, 10), bool] */;
  %324 = @func_803(%322) /* ty=Tensor[(4, 14, 15), float64] */;
  (%323, %324, %var_902)
}

def @func_2661() -> (Tensor[(1200), int16],) {
  %325 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %326 = %325.2;
  (%326,)
}

def @func_2825(%var_2812: Tensor[(15, 12, 9), float64], %var_2813: Tensor[(15, 12, 9), float64]) -> Tensor[(15, 12, 9), float64] {
  %327 = cast(%var_2813, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %328 = shape_of(%var_2812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%var_2812, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%329, %330) /* ty=Tensor[(15, 12, 9), float64] */
}

def @func_7578() -> Tensor[(15, 6, 9), bool] {
  %331 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 6, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 9), float32] */;
  %332 = log2(%331) /* ty=Tensor[(15, 6, 9), float32] */;
  %333 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 6, 9), float32] */, dtype="float64") /* ty=Tensor[(15, 6, 9), float64] */;
  %334 = log10(%333) /* ty=Tensor[(15, 6, 9), float64] */;
  %335 = cast(%334, dtype="bool") /* ty=Tensor[(15, 6, 9), bool] */;
  %336 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%332, dtype="bool") /* ty=Tensor[(15, 6, 9), bool] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%337, %338) /* ty=Tensor[(15, 6, 9), bool] */
}

def @func_3791(%var_3694: Tensor[(260), float32], %var_3718: Tensor[(480), float64], %var_3735: Tensor[(3, 20), float32], %var_3742: Tensor[(6, 16, 5), float64]) -> (Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) {
  %339 = @func_3256() /* ty=(Tensor[(1200), int16],) */;
  %340 = cast(meta[relay.Constant][24] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %341 = cast(9.82924f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %342 = cast(%var_3694, dtype="float32") /* ty=Tensor[(260), float32] */;
  %343 = reshape(%340, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %344 = reshape(%341, newshape=[]) /* ty=float64 */;
  %345 = reshape(%342, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %346 = @func_2067(%343, %344, %345) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %347 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
  %348 = cast(%var_3694, dtype="int16") /* ty=Tensor[(260), int16] */;
  %349 = cast(9.82924f64 /* ty=float64 */, dtype="int16") /* ty=int16 */;
  %350 = cast(%var_3718, dtype="float64") /* ty=Tensor[(480), float64] */;
  %351 = reshape(%350, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %352 = @func_636(%351) /* ty=(Tensor[(6, 16, 5), float64],) */;
  %353 = %352.0;
  %354 = cast(%var_3742, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %358 = cast(9.82924f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %359 = reshape(%358, newshape=[]) /* ty=float64 */;
  %360 = cast(meta[relay.Constant][25] /* ty=Tensor[(16), int8] */, dtype="int8") /* ty=Tensor[(16), int8] */;
  %361 = reshape(%360, newshape=[16, 1]) /* ty=Tensor[(16, 1), int8] */;
  %362 = @func_2960(%361) /* ty=(Tensor[(16, 1), int8], Tensor[(6, 16, 5), float64], Tensor[(480), float32]) */;
  %363 = %347.0;
  %364 = cast(%363, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %365 = cast(meta[relay.Constant][26] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %366 = reshape(%364, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), uint8] */;
  %367 = reshape(%365, newshape=[980]) /* ty=Tensor[(980), int32] */;
  %368 = @func_2777(%366, %367) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(10, 10, 12), float64], Tensor[(980), int8]) */;
  %369 = cast(%var_3735, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
  %370 = cast(9.82924f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %371 = reshape(%369, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %372 = reshape(%370, newshape=[]) /* ty=float64 */;
  %373 = @func_906(%371, %372) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %374 = %373.0;
  %375 = cast(%374, dtype="bool") /* ty=Tensor[(3, 2, 10), bool] */;
  %376 = shape_of(%var_3735, dtype="int32") /* ty=Tensor[(2), int32] */;
  %377 = cast(%var_3735, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %379 = %339.0;
  %380 = %346.0;
  %381 = bitwise_and(%348, %349) /* ty=Tensor[(260), int16] */;
  %382 = logical_and(%356, %357) /* ty=Tensor[(6, 16, 5), bool] */;
  %383 = @func_803(%359) /* ty=Tensor[(4, 14, 15), float64] */;
  %384 = %362.2;
  %385 = %368.0;
  %386 = less_equal(%377, %378) /* ty=Tensor[(3, 20), bool] */;
  (%379, %380, meta[relay.Constant][24] /* ty=Tensor[(198), float64] */, %363, %381, %var_3718, %382, %383, %384, meta[relay.Constant][25] /* ty=Tensor[(16), int8] */, %385, meta[relay.Constant][26] /* ty=Tensor[(980), int32] */, %386)
}

def @func_4885() -> (Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) {
  %387 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
  %388 = @func_2661() /* ty=(Tensor[(1200), int16],) */;
  %389 = %387.1;
  %390 = %388.0;
  (%389, %390)
}

def @func_8817() -> (Tensor[(1200), int16], Tensor[(1200), int16]) {
  %391 = @func_4861() /* ty=Tensor[(1200), int16] */;
  %392 = @func_7869() /* ty=Tensor[(1200), int16] */;
  (%391, %392)
}

def @func_6658() -> Tensor[(1200), int16] {
  @func_5447() /* ty=Tensor[(1200), int16] */
}

def @func_2215(%var_2210: Tensor[(10, 10, 12), int16], %var_2211: Tensor[(10, 10, 12), int16]) -> (Tensor[(10, 10, 12), bool],) {
  %393 = cast(%var_2211, dtype="bool") /* ty=Tensor[(10, 10, 12), bool] */;
  %394 = shape_of(%var_2210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%var_2210, dtype="bool") /* ty=Tensor[(10, 10, 12), bool] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %397 = less(%395, %396) /* ty=Tensor[(10, 10, 12), bool] */;
  (%397,)
}

def @func_3471(%var_3379: Tensor[(3, 2, 6), float64], %var_3380: Tensor[(3, 2, 6), float64], %var_3384: Tensor[(3, 2, 6), float64], %var_3399: Tensor[(1200), int16], %var_3452: Tensor[(1620), float64]) -> (Tensor[(3, 2, 6), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(3, 2, 6), float64], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(260, 1), float32], Tensor[(980), int32]) {
  %398 = cast(%var_3380, dtype="float64") /* ty=Tensor[(3, 2, 6), float64] */;
  %399 = shape_of(%var_3379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%var_3379, dtype="float64") /* ty=Tensor[(3, 2, 6), float64] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %402 = cast(%var_3399, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %403 = cast(%var_3399, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %404 = reshape(%402, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %405 = reshape(%403, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %406 = @func_2215(%404, %405) /* ty=(Tensor[(10, 10, 12), bool],) */;
  %407 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %408 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %409 = cast(%var_3384, dtype="bool") /* ty=Tensor[(3, 2, 6), bool] */;
  %410 = shape_of(%var_3379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%var_3379, dtype="bool") /* ty=Tensor[(3, 2, 6), bool] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %413 = not_equal(%411, %412) /* ty=Tensor[(3, 2, 6), bool] */;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(3, 2, 6), float32] */;
  %415 = cosh(%414) /* ty=Tensor[(3, 2, 6), float32] */;
  %416 = cast(%415, dtype="float64") /* ty=Tensor[(3, 2, 6), float64] */;
  %417 = cast(%var_3452, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %418 = cast(%var_3452, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %419 = reshape(%417, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %420 = reshape(%418, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %421 = cast(meta[relay.Constant][27] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %422 = reshape(%421, newshape=[14, 70]) /* ty=Tensor[(14, 70), int32] */;
  %423 = @func_3355(%422) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(14, 70), int32], Tensor[(4, 14, 15), float64], Tensor[(99, 2), float64], float64, Tensor[(260, 1), float32]) */;
  %424 = floor_mod(%400, %401) /* ty=Tensor[(3, 2, 6), float64] */;
  %425 = %406.0;
  %426 = %407.0;
  %427 = %408.0;
  %428 = log2(%416) /* ty=Tensor[(3, 2, 6), float64] */;
  %429 = @func_2825(%419, %420) /* ty=Tensor[(15, 12, 9), float64] */;
  %430 = %423.6;
  (%424, %425, %var_3399, %426, %427, %428, %429, %var_3452, %430, meta[relay.Constant][27] /* ty=Tensor[(980), int32] */)
}

def @func_5039() -> Tensor[(1200), int16] {
  @func_4861() /* ty=Tensor[(1200), int16] */
}

def @func_8856(%var_8840: Tensor[(10, 4, 3), int16], %var_8841: Tensor[(10, 4, 3), int16]) -> (Tensor[(10, 4, 3), int16], Tensor[(10, 10, 12), bool]) {
  %431 = cast(%var_8841, dtype="int16") /* ty=Tensor[(10, 4, 3), int16] */;
  %432 = shape_of(%var_8840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%var_8840, dtype="int16") /* ty=Tensor[(10, 4, 3), int16] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %435 = logical_xor(%433, %434) /* ty=Tensor[(10, 4, 3), int16] */;
  %436 = @func_5160() /* ty=Tensor[(10, 10, 12), bool] */;
  (%435, %436)
}

def @func_8506() -> Tensor[(6, 16, 5), bool] {
  %437 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %438 = %437.0;
  %439 = cast(%438, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
  %440 = log2(%439) /* ty=Tensor[(6, 16, 5), float32] */;
  %441 = cast(%438, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%440, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%443, %444) /* ty=Tensor[(6, 16, 5), bool] */
}

def @func_8962() -> Tensor[(6, 16, 5), float64] {
  %445 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
  %445.2
}

def @func_6970() -> (Tensor[(9, 15, 10), uint8],) {
  %446 = @func_6234() /* ty=(Tensor[(9, 15, 10), uint8], Tensor[(14, 14, 5), bool], Tensor[(980), int32], Tensor[(1200), int16]) */;
  %447 = %446.0;
  (%447,)
}

def @func_3872(%var_3808: uint64, %var_3809: Tensor[(11, 6, 4), uint64], %var_3833: Tensor[(12, 100), uint8]) -> (Tensor[(11, 6, 4), uint64], Tensor[(980), int8], Tensor[(12, 100), uint8], Tensor[(980), int32]) {
  %448 = cast(%var_3808, dtype="uint64") /* ty=uint64 */;
  %449 = cast(%var_3809, dtype="uint64") /* ty=Tensor[(11, 6, 4), uint64] */;
  %450 = cast(%var_3833, dtype="uint8") /* ty=Tensor[(12, 100), uint8] */;
  %451 = cast(meta[relay.Constant][28] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %452 = reshape(%450, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), uint8] */;
  %453 = reshape(%451, newshape=[980]) /* ty=Tensor[(980), int32] */;
  %454 = @func_2777(%452, %453) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(10, 10, 12), float64], Tensor[(980), int8]) */;
  %455 = bitwise_or(%448, %449) /* ty=Tensor[(11, 6, 4), uint64] */;
  %456 = %454.3;
  (%455, %456, %var_3833, meta[relay.Constant][28] /* ty=Tensor[(980), int32] */)
}

def @func_8363() -> (Tensor[(1200), int16],) {
  %457 = @func_4300() /* ty=(Tensor[(1200), int16],) */;
  %458 = %457.0;
  (%458,)
}

def @func_3974(%var_3940: Tensor[(260), float32], %var_3941: Tensor[(480), float64], %var_3942: Tensor[(60), float32]) -> (Tensor[(1200), int16], Tensor[(260), int16], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32], float64, Tensor[(51480), float32], Tensor[(36), float64], Tensor[(1620), float64]) {
  %459 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
  %460 = cast(%var_3940, dtype="float32") /* ty=Tensor[(260), float32] */;
  %461 = cast(%var_3941, dtype="float64") /* ty=Tensor[(480), float64] */;
  %462 = cast(%var_3942, dtype="float32") /* ty=Tensor[(60), float32] */;
  %463 = cast(%var_3941, dtype="float64") /* ty=Tensor[(480), float64] */;
  %464 = reshape(%460, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %465 = reshape(%461, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %466 = reshape(%462, newshape=[3, 20]) /* ty=Tensor[(3, 20), float32] */;
  %467 = reshape(%463, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %468 = @func_3791(%464, %465, %466, %467) /* ty=(Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) */;
  %469 = cast(meta[relay.Constant][29] /* ty=Tensor[(51480), float32] */, dtype="float32") /* ty=Tensor[(51480), float32] */;
  %470 = cast(%var_3942, dtype="float32") /* ty=Tensor[(60), float32] */;
  %471 = cast(meta[relay.Constant][30] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %472 = cast(meta[relay.Constant][31] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %473 = reshape(%469, newshape=[51480]) /* ty=Tensor[(51480), float32] */;
  %474 = reshape(%470, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %475 = reshape(%471, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %476 = reshape(%472, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %477 = @func_3592(%473, %474, %475, %476) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(198), float64], float64, Tensor[(260), float32], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(51480), float32], Tensor[(4, 14, 15), int64], Tensor[(3, 2, 10), bool], Tensor[(60), float32], Tensor[(3, 2, 6), float64], Tensor[(36), float64], Tensor[(1620), float64]) */;
  %478 = %459.0;
  %479 = %468.4;
  %480 = %477.3;
  (%478, %479, %var_3940, %var_3941, %var_3942, %480, meta[relay.Constant][29] /* ty=Tensor[(51480), float32] */, meta[relay.Constant][30] /* ty=Tensor[(36), float64] */, meta[relay.Constant][31] /* ty=Tensor[(1620), float64] */)
}

def @func_636(%var_631: Tensor[(6, 16, 5), float64]) -> (Tensor[(6, 16, 5), float64],) {
  %481 = cast(%var_631, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
  %482 = sigmoid(%481) /* ty=Tensor[(6, 16, 5), float64] */;
  (%482,)
}

def @func_4465(%var_4454: Tensor[(8, 8, 13), int64]) -> Tensor[(8, 8, 13), bool] {
  %483 = cast(-5 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %484 = cast(%var_4454, dtype="bool") /* ty=Tensor[(8, 8, 13), bool] */;
  less(%483, %484) /* ty=Tensor[(8, 8, 13), bool] */
}

def @func_6234() -> (Tensor[(9, 15, 10), uint8], Tensor[(14, 14, 5), bool], Tensor[(980), int32], Tensor[(1200), int16]) {
  %485 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %486 = cast(meta[relay.Constant][32] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %487 = reshape(%486, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %488 = @func_4041() /* ty=(Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) */;
  %489 = %485.1;
  %490 = @func_1338(%487) /* ty=Tensor[(14, 14, 5), bool] */;
  %491 = %488.0;
  (%489, %490, meta[relay.Constant][32] /* ty=Tensor[(980), int32] */, %491)
}

def @func_5703() -> (Tensor[(1200), int16],) {
  %492 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %493 = %492.0;
  (%493,)
}

def @func_9309(%var_9278: Tensor[(12, 14, 3), uint16], %var_9298: float64, %var_9299: Tensor[(130, 2), float32]) -> (Tensor[(12, 14, 3), uint16], Tensor[(10, 10, 12), bool], Tensor[(11, 9, 2), float32], Tensor[(198), float64], float64, Tensor[(130, 2), float32], Tensor[(1200), int16]) {
  %494 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 14, 3), uint16] */, dtype="uint16") /* ty=Tensor[(12, 14, 3), uint16] */;
  %495 = shape_of(%var_9278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%var_9278, dtype="uint16") /* ty=Tensor[(12, 14, 3), uint16] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %498 = @func_4885() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %499 = cast(meta[relay.Constant][34] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %500 = cast(%var_9298, dtype="float64") /* ty=float64 */;
  %501 = cast(%var_9299, dtype="float32") /* ty=Tensor[(130, 2), float32] */;
  %502 = reshape(%499, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %503 = reshape(%500, newshape=[]) /* ty=float64 */;
  %504 = reshape(%501, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %505 = @func_2067(%502, %503, %504) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %506 = @func_8817() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */;
  %507 = multiply(%496, %497) /* ty=Tensor[(12, 14, 3), uint16] */;
  %508 = %498.0;
  %509 = %505.1;
  %510 = %506.0;
  (%507, %508, %509, meta[relay.Constant][34] /* ty=Tensor[(198), float64] */, %var_9298, %var_9299, %510)
}

def @func_8173(%var_8138: Tensor[(3, 10, 16), float64]) -> Tensor[(3, 10, 16), bool] {
  %511 = cast(%var_8138, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %512 = rsqrt(%511) /* ty=Tensor[(3, 10, 16), float64] */;
  %513 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %514 = %513.3;
  %515 = cast(%var_8138, dtype="uint64") /* ty=Tensor[(3, 10, 16), uint64] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="uint64") /* ty=Tensor[(3, 10, 16), uint64] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %519 = bitwise_and(%517, %518) /* ty=Tensor[(3, 10, 16), uint64] */;
  %520 = cast(%519, dtype="bool") /* ty=Tensor[(3, 10, 16), bool] */;
  %521 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%512, dtype="bool") /* ty=Tensor[(3, 10, 16), bool] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%522, %523) /* ty=Tensor[(3, 10, 16), bool] */
}

def @func_8527() -> (Tensor[(6, 16, 5), bool],) {
  %524 = @func_8506() /* ty=Tensor[(6, 16, 5), bool] */;
  (%524,)
}

def @func_5001() -> (Tensor[(1200), int16],) {
  %525 = @func_3256() /* ty=(Tensor[(1200), int16],) */;
  %526 = %525.0;
  (%526,)
}

def @func_9023(%var_9016: Tensor[(6, 16, 5), float64]) -> Tensor[(6, 16, 5), uint64] {
  %527 = @func_8962() /* ty=Tensor[(6, 16, 5), float64] */;
  %528 = cast(%var_9016, dtype="uint64") /* ty=Tensor[(6, 16, 5), uint64] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="uint64") /* ty=Tensor[(6, 16, 5), uint64] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_xor(%530, %531) /* ty=Tensor[(6, 16, 5), uint64] */
}

def @func_5656(%var_5640: Tensor[(6, 16, 5), float64]) -> (Tensor[(6, 16, 5), bool],) {
  %532 = @func_4533() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64], Tensor[(480), float64]) */;
  %533 = %532.1;
  %534 = cast(%var_5640, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%533, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %538 = not_equal(%536, %537) /* ty=Tensor[(6, 16, 5), bool] */;
  (%538,)
}

def @func_8376(%var_8372: Tensor[(15, 14), int16]) -> Tensor[(15, 14), int16] {
  %539 = cast(%var_8372, dtype="int16") /* ty=Tensor[(15, 14), int16] */;
  %540 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(15, 14), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %541 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 14), int16] */, dtype="int16") /* ty=Tensor[(15, 14), int16] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  logical_xor(%541, %542) /* ty=Tensor[(15, 14), int16] */
}

def @func_2335() -> (Tensor[(1200), int16],) {
  %543 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %544 = %543.2;
  (%544,)
}

def @func_6005(%var_5986: Tensor[(60), float32]) -> (float64, Tensor[(4, 14, 15), float64], Tensor[(60), float32]) {
  %545 = @func_4397() /* ty=(float64,) */;
  %546 = cast(%var_5986, dtype="float32") /* ty=Tensor[(60), float32] */;
  %547 = %545.0;
  %548 = cast(%547, dtype="float64") /* ty=float64 */;
  %549 = reshape(%546, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %550 = reshape(%548, newshape=[]) /* ty=float64 */;
  %551 = @func_906(%549, %550) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %552 = %551.1;
  (%547, %552, %var_5986)
}

def @func_8056(%var_8053: Tensor[(192), int16]) -> (Tensor[(16), int8], Tensor[(16, 2, 6), bool], Tensor[(12), int16], Tensor[(192), int16]) {
  %553 = @func_4817() /* ty=(Tensor[(16), int8],) */;
  %554 = cast(meta[relay.Constant][36] /* ty=Tensor[(12), int16] */, dtype="int16") /* ty=Tensor[(12), int16] */;
  %555 = cast(%var_8053, dtype="int16") /* ty=Tensor[(192), int16] */;
  %556 = reshape(%554, newshape=[1, 2, 6]) /* ty=Tensor[(1, 2, 6), int16] */;
  %557 = reshape(%555, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), int16] */;
  %558 = @func_4613(%556, %557) /* ty=(Tensor[(16, 2, 6), int16], Tensor[(16, 2, 6), bool]) */;
  %559 = %553.0;
  %560 = %558.1;
  (%559, %560, meta[relay.Constant][36] /* ty=Tensor[(12), int16] */, %var_8053)
}

def @func_9075() -> (Tensor[(1200), int16], Tensor[(1200), int16]) {
  %561 = @func_9058() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */;
  %562 = @func_6333() /* ty=Tensor[(1200), int16] */;
  %563 = %561.1;
  (%562, %563)
}

def @func_7342() -> (Tensor[(1200), int16],) {
  %564 = @func_4300() /* ty=(Tensor[(1200), int16],) */;
  %565 = %564.0;
  (%565,)
}

def @func_2260() -> (Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) {
  %566 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 13, 13), float64] */, dtype="float64") /* ty=Tensor[(14, 13, 13), float64] */;
  %567 = cast(meta[relay.Constant][38] /* ty=Tensor[(1200), int16] */, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %568 = cast(meta[relay.Constant][38] /* ty=Tensor[(1200), int16] */, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %569 = reshape(%567, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %570 = reshape(%568, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %571 = @func_2215(%569, %570) /* ty=(Tensor[(10, 10, 12), bool],) */;
  %572 = cos(%566) /* ty=Tensor[(14, 13, 13), float64] */;
  %573 = %571.0;
  (%572, %573, meta[relay.Constant][38] /* ty=Tensor[(1200), int16] */)
}

def @func_6333() -> Tensor[(1200), int16] {
  %574 = @func_5621() /* ty=(Tensor[(1200), int16],) */;
  %574.0
}

def @func_6525() -> (Tensor[(1200), int16],) {
  %575 = @func_6401() /* ty=Tensor[(1200), int16] */;
  (%575,)
}

def @func_3139() -> Tensor[(1200), int16] {
  %576 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %576.0
}

def @main(%var_9406: Tensor[(3, 1, 14), float32]) -> (Tensor[(3, 5, 14), float32],) {
  %577 = cast(%var_9406, dtype="float32") /* ty=Tensor[(3, 1, 14), float32] */;
  %578 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(3, 5, 14), float32] */;
  %579 = floor_divide(%577, %578) /* ty=Tensor[(3, 5, 14), float32] */;
  (%579,)
}

def @func_3291() -> (Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) {
  %580 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %581 = %580.1;
  %582 = cast(%581, dtype="int16") /* ty=Tensor[(10, 10, 12), int16] */;
  %583 = cast(%581, dtype="int16") /* ty=Tensor[(10, 10, 12), int16] */;
  %584 = reshape(%582, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %585 = reshape(%583, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %586 = @func_2215(%584, %585) /* ty=(Tensor[(10, 10, 12), bool],) */;
  %587 = cast(meta[relay.Constant][40] /* ty=Tensor[(16), int8] */, dtype="int8") /* ty=Tensor[(16), int8] */;
  %588 = reshape(%587, newshape=[16, 1]) /* ty=Tensor[(16, 1), int8] */;
  %589 = @func_2960(%588) /* ty=(Tensor[(16, 1), int8], Tensor[(6, 16, 5), float64], Tensor[(480), float32]) */;
  %590 = %586.0;
  %591 = %589.1;
  (%581, %590, %591, meta[relay.Constant][40] /* ty=Tensor[(16), int8] */)
}

def @func_6055(%var_6020: Tensor[(13, 7, 4), float32], %var_6037: Tensor[(60), float32]) -> (Tensor[(13, 7, 4), float32], float64, float64, Tensor[(60), float32]) {
  %592 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 7, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 7, 4), float32] */;
  %593 = shape_of(%var_6020, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%var_6020, dtype="float32") /* ty=Tensor[(13, 7, 4), float32] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %596 = @func_4041() /* ty=(Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) */;
  %597 = cast(%var_6037, dtype="float32") /* ty=Tensor[(60), float32] */;
  %598 = reshape(%597, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %599 = @func_6005(%598) /* ty=(float64, Tensor[(4, 14, 15), float64], Tensor[(60), float32]) */;
  %600 = divide(%594, %595) /* ty=Tensor[(13, 7, 4), float32] */;
  %601 = %596.1;
  %602 = %599.0;
  (%600, %601, %602, %var_6037)
}

def @func_1338(%var_1309: Tensor[(14, 14, 5), int32]) -> Tensor[(14, 14, 5), bool] {
  %603 = cast(%var_1309, dtype="bool") /* ty=Tensor[(14, 14, 5), bool] */;
  %604 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(14, 14, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 14, 5), int32] */, dtype="bool") /* ty=Tensor[(14, 14, 5), bool] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%605, %606) /* ty=Tensor[(14, 14, 5), bool] */
}

def @func_3355(%var_3312: Tensor[(14, 70), int32]) -> (Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(14, 70), int32], Tensor[(4, 14, 15), float64], Tensor[(99, 2), float64], float64, Tensor[(260, 1), float32]) {
  %607 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %608 = @func_3256() /* ty=(Tensor[(1200), int16],) */;
  %609 = cast(%var_3312, dtype="int32") /* ty=Tensor[(14, 70), int32] */;
  %610 = reshape(%609, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %611 = @func_1338(%610) /* ty=Tensor[(14, 14, 5), bool] */;
  %612 = cast(%611, dtype="int32") /* ty=Tensor[(14, 14, 5), int32] */;
  %613 = shape_of(%var_3312, dtype="int32") /* ty=Tensor[(2), int32] */;
  %614 = cast(%var_3312, dtype="int32") /* ty=Tensor[(14, 70), int32] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %616 = cast(meta[relay.Constant][43] /* ty=Tensor[(99, 2), float64] */, dtype="float64") /* ty=Tensor[(99, 2), float64] */;
  %617 = cast(0.886336f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %618 = cast(meta[relay.Constant][44] /* ty=Tensor[(260, 1), float32] */, dtype="float32") /* ty=Tensor[(260, 1), float32] */;
  %619 = reshape(%616, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %620 = reshape(%617, newshape=[]) /* ty=float64 */;
  %621 = reshape(%618, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %622 = @func_2067(%619, %620, %621) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %623 = %607.0;
  %624 = %608.0;
  %625 = add(%614, %615) /* ty=Tensor[(14, 70), int32] */;
  %626 = %622.2;
  (%623, %624, %625, %626, meta[relay.Constant][43] /* ty=Tensor[(99, 2), float64] */, 0.886336f64 /* ty=float64 */, meta[relay.Constant][44] /* ty=Tensor[(260, 1), float32] */)
}

def @func_9372(%var_9325: Tensor[(16, 6, 5), uint8], %var_9326: Tensor[(16, 6, 5), uint8]) -> (Tensor[(16, 6, 5), uint8], Tensor[(6, 16, 5), float64]) {
  %627 = cast(%var_9326, dtype="uint8") /* ty=Tensor[(16, 6, 5), uint8] */;
  %628 = shape_of(%var_9325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%var_9325, dtype="uint8") /* ty=Tensor[(16, 6, 5), uint8] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %631 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %632 = minimum(%629, %630) /* ty=Tensor[(16, 6, 5), uint8] */;
  %633 = %631.0;
  (%632, %633)
}

def @func_5595() -> (Tensor[(11, 9, 14), uint32], Tensor[(1200), int16], Tensor[(1200), int16], float64) {
  %634 = cast(meta[relay.Constant][46] /* ty=Tensor[(11, 9, 14), uint32] */, dtype="uint32") /* ty=Tensor[(11, 9, 14), uint32] */;
  %635 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(11, 9, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(meta[relay.Constant][45] /* ty=Tensor[(11, 9, 14), uint32] */, dtype="uint32") /* ty=Tensor[(11, 9, 14), uint32] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %638 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
  %639 = @func_5077() /* ty=(float64,) */;
  %640 = add(%636, %637) /* ty=Tensor[(11, 9, 14), uint32] */;
  %641 = %638.0;
  %642 = @func_3139() /* ty=Tensor[(1200), int16] */;
  %643 = %639.0;
  (%640, %641, %642, %643)
}

def @func_7722() -> Tensor[(15, 6, 9), bool] {
  @func_7578() /* ty=Tensor[(15, 6, 9), bool] */
}

def @func_5787(%var_5762: Tensor[(1, 480), float64], %var_5773: Tensor[(51480), float32]) -> (Tensor[(1, 480), float64], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(480), float64], Tensor[(1, 260), float32], Tensor[(51480), float32], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64]) {
  %644 = @func_3686() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */;
  %645 = @func_5703() /* ty=(Tensor[(1200), int16],) */;
  %646 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 260), float32] */, dtype="float32") /* ty=Tensor[(1, 260), float32] */;
  %647 = cast(%var_5773, dtype="float32") /* ty=Tensor[(51480), float32] */;
  %648 = reshape(%646, newshape=[260, 1]) /* ty=Tensor[(260, 1), float32] */;
  %649 = reshape(%647, newshape=[260, 198]) /* ty=Tensor[(260, 198), float32] */;
  %650 = @func_3071(%648, %649) /* ty=(Tensor[(1200), int16], Tensor[(480), float64], float64, Tensor[(260, 198), bool]) */;
  %651 = cast(%var_5762, dtype="float64") /* ty=Tensor[(1, 480), float64] */;
  %652 = reshape(%651, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %653 = @func_636(%652) /* ty=(Tensor[(6, 16, 5), float64],) */;
  %654 = %653.0;
  %655 = @func_5077() /* ty=(float64,) */;
  %656 = %655.0;
  %657 = cast(%654, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
  %658 = cast(%656, dtype="float64") /* ty=float64 */;
  %659 = %650.1;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(480), float32] */;
  %661 = mod(%657, %658) /* ty=Tensor[(6, 16, 5), float64] */;
  %662 = cast(%661, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
  %663 = reshape(%660, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
  %664 = reshape(%662, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
  %665 = @func_2544(%663, %664) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64], float64) */;
  %666 = %644.0;
  %667 = %645.0;
  %668 = %665.2;
  (%var_5762, %666, %667, %659, meta[relay.Constant][47] /* ty=Tensor[(1, 260), float32] */, %var_5773, %661, %668)
}

def @func_8088() -> float64 {
  %669 = @func_5595() /* ty=(Tensor[(11, 9, 14), uint32], Tensor[(1200), int16], Tensor[(1200), int16], float64) */;
  %669.3
}

def @func_7747() -> Tensor[(10, 10, 12), bool] {
  %670 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
  %670.1
}

def @func_6401() -> Tensor[(1200), int16] {
  %671 = @func_5595() /* ty=(Tensor[(11, 9, 14), uint32], Tensor[(1200), int16], Tensor[(1200), int16], float64) */;
  %671.2
}

def @func_7006() -> (float64,) {
  %672 = @func_6706() /* ty=(Tensor[(1200), int16], float64) */;
  %673 = %672.1;
  (%673,)
}

def @func_3256() -> (Tensor[(1200), int16],) {
  %674 = @func_3139() /* ty=Tensor[(1200), int16] */;
  (%674,)
}

def @func_4861() -> Tensor[(1200), int16] {
  %675 = @func_2661() /* ty=(Tensor[(1200), int16],) */;
  %675.0
}

def @func_7405() -> Tensor[(1200), int16] {
  @func_6658() /* ty=Tensor[(1200), int16] */
}

def @func_7895() -> Tensor[(1200), int16] {
  %676 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
  %676.0
}

def @func_9226() -> (Tensor[(1200), int16], Tensor[(3, 10, 16), float64], Tensor[(1200), int16]) {
  %677 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %678 = @func_6401() /* ty=Tensor[(1200), int16] */;
  %679 = %677.3;
  %680 = @func_4861() /* ty=Tensor[(1200), int16] */;
  (%678, %679, %680)
}

def @func_8043() -> (Tensor[(1200), int16],) {
  %681 = @func_5621() /* ty=(Tensor[(1200), int16],) */;
  %682 = %681.0;
  (%682,)
}

def @func_5447() -> Tensor[(1200), int16] {
  %683 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
  %683.0
}

def @func_7072() -> (Tensor[(1200), int16],) {
  %684 = @func_6706() /* ty=(Tensor[(1200), int16], float64) */;
  %685 = %684.0;
  (%685,)
}

def @func_7504(%var_7472: Tensor[(9, 5, 16), float32], %var_7485: Tensor[(260), float32], %var_7487: Tensor[(60), float32]) -> (Tensor[(9, 5, 16), float32], Tensor[(9, 5, 16), float64], Tensor[(16), int8], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32]) {
  %686 = cast(%var_7472, dtype="float32") /* ty=Tensor[(9, 5, 16), float32] */;
  %687 = cast(%var_7472, dtype="float32") /* ty=Tensor[(9, 5, 16), float32] */;
  %688 = asin(%687) /* ty=Tensor[(9, 5, 16), float32] */;
  %689 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 5, 16), float32] */, dtype="float64") /* ty=Tensor[(9, 5, 16), float64] */;
  %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%688, dtype="float64") /* ty=Tensor[(9, 5, 16), float64] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %693 = cast(%var_7485, dtype="float32") /* ty=Tensor[(260), float32] */;
  %694 = cast(meta[relay.Constant][49] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %695 = cast(%var_7487, dtype="float32") /* ty=Tensor[(60), float32] */;
  %696 = cast(meta[relay.Constant][49] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %697 = reshape(%693, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %698 = reshape(%694, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %699 = reshape(%695, newshape=[3, 20]) /* ty=Tensor[(3, 20), float32] */;
  %700 = reshape(%696, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %701 = @func_3791(%697, %698, %699, %700) /* ty=(Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) */;
  %702 = log(%686) /* ty=Tensor[(9, 5, 16), float32] */;
  %703 = divide(%691, %692) /* ty=Tensor[(9, 5, 16), float64] */;
  %704 = %701.9;
  (%702, %703, %704, %var_7485, meta[relay.Constant][49] /* ty=Tensor[(480), float64] */, %var_7487)
}

def @func_6776(%var_6755: Tensor[(3, 15, 13), int16], %var_6756: Tensor[(3, 15, 13), int16]) -> (Tensor[(3, 15, 13), int16], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) {
  %705 = cast(%var_6756, dtype="int16") /* ty=Tensor[(3, 15, 13), int16] */;
  %706 = shape_of(%var_6755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%var_6755, dtype="int16") /* ty=Tensor[(3, 15, 13), int16] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %709 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %710 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %711 = bitwise_and(%707, %708) /* ty=Tensor[(3, 15, 13), int16] */;
  %712 = %709.1;
  %713 = %710.2;
  (%711, %712, %713)
}

def @func_8719() -> (Tensor[(1200), int16],) {
  %714 = @func_5703() /* ty=(Tensor[(1200), int16],) */;
  %715 = %714.0;
  (%715,)
}

def @func_7169() -> (Tensor[(1200), int16],) {
  %716 = @func_4533() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64], Tensor[(480), float64]) */;
  %717 = %716.0;
  (%717,)
}

def @func_9194(%var_9127: Tensor[(16, 8, 4), float64]) -> (Tensor[(16, 8, 4), float64], Tensor[(6, 16, 5), bool], Tensor[(16, 8, 4), float32], Tensor[(16, 8, 4), float64]) {
  %718 = cast(%var_9127, dtype="float64") /* ty=Tensor[(16, 8, 4), float64] */;
  %719 = sqrt(%718) /* ty=Tensor[(16, 8, 4), float64] */;
  %720 = cast(%719, dtype="float64") /* ty=Tensor[(16, 8, 4), float64] */;
  %721 = @func_8527() /* ty=(Tensor[(6, 16, 5), bool],) */;
  %722 = cast(%719, dtype="float32") /* ty=Tensor[(16, 8, 4), float32] */;
  %723 = cast(%719, dtype="float64") /* ty=Tensor[(16, 8, 4), float64] */;
  %724 = sigmoid(%720) /* ty=Tensor[(16, 8, 4), float64] */;
  %725 = %721.0;
  %726 = log10(%722) /* ty=Tensor[(16, 8, 4), float32] */;
  %727 = sin(%723) /* ty=Tensor[(16, 8, 4), float64] */;
  (%724, %725, %726, %727)
}

def @func_6802(%var_6786: Tensor[(16, 5, 16), uint8], %var_6787: Tensor[(16, 5, 16), uint8]) -> Tensor[(16, 5, 16), uint8] {
  %728 = cast(%var_6787, dtype="uint8") /* ty=Tensor[(16, 5, 16), uint8] */;
  %729 = shape_of(%var_6786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%var_6786, dtype="uint8") /* ty=Tensor[(16, 5, 16), uint8] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_and(%730, %731) /* ty=Tensor[(16, 5, 16), uint8] */
}

def @func_2506(%var_2484: Tensor[(1200), int16], %var_2504: Tensor[(480), float64]) -> (Tensor[(1200), int16], Tensor[(1200), float32], Tensor[(10, 10, 12), uint8], Tensor[(4, 14, 15), float64], float64, Tensor[(6, 16, 5), float64], Tensor[(480), float64]) {
  %732 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %733 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %734 = %733.0;
  %735 = cast(%var_2484, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(1), int32] */;
  %737 = cast(%734, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?), float32] */;
  %739 = %732.0;
  %740 = cast(%739, dtype="bool") /* ty=Tensor[(1200), bool] */;
  %741 = reshape(%740, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), bool] */;
  %742 = cast(-1.99923f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %743 = reshape(%742, newshape=[]) /* ty=float64 */;
  %744 = cast(%var_2504, dtype="float64") /* ty=Tensor[(480), float64] */;
  %745 = reshape(%744, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %746 = @func_636(%745) /* ty=(Tensor[(6, 16, 5), float64],) */;
  %747 = floor_divide(%737, %738) /* ty=Tensor[(1200), float32] */;
  %748 = @func_2445(%741) /* ty=Tensor[(10, 10, 12), uint8] */;
  %749 = @func_803(%743) /* ty=Tensor[(4, 14, 15), float64] */;
  %750 = %746.0;
  (%739, %747, %748, %749, -1.99923f64 /* ty=float64 */, %750, %var_2504)
}

def @func_8937(%var_8905: Tensor[(16, 14, 3), float32], %var_8910: Tensor[(16, 14, 3), float32]) -> (Tensor[(16, 14, 3), bool], Tensor[(1200), int16], Tensor[(6, 16, 5), bool], Tensor[(480), float64]) {
  %751 = cast(%var_8905, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
  %752 = sinh(%751) /* ty=Tensor[(16, 14, 3), float32] */;
  %753 = cast(%var_8910, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%752, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %757 = cast(meta[relay.Constant][50] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %758 = reshape(%757, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %759 = @func_5656(%758) /* ty=(Tensor[(6, 16, 5), bool],) */;
  %760 = logical_or(%755, %756) /* ty=Tensor[(16, 14, 3), bool] */;
  %761 = @func_4861() /* ty=Tensor[(1200), int16] */;
  %762 = %759.0;
  (%760, %761, %762, meta[relay.Constant][50] /* ty=Tensor[(480), float64] */)
}

def @func_5518(%var_5484: Tensor[(1200), int16], %var_5511: Tensor[(198, 1), float64]) -> (Tensor[(1200), uint16], Tensor[(9, 15, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(198, 1), float64], float64, Tensor[(260), float32]) {
  %763 = @func_4300() /* ty=(Tensor[(1200), int16],) */;
  %764 = %763.0;
  %765 = cast(%var_5484, dtype="uint16") /* ty=Tensor[(1200), uint16] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(1), int32] */;
  %767 = cast(%764, dtype="uint16") /* ty=Tensor[(1200), uint16] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %769 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %770 = cast(%var_5511, dtype="float64") /* ty=Tensor[(198, 1), float64] */;
  %771 = cast(3.31696f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %772 = cast(meta[relay.Constant][51] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %773 = reshape(%770, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %774 = reshape(%771, newshape=[]) /* ty=float64 */;
  %775 = reshape(%772, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %776 = @func_2067(%773, %774, %775) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %777 = bitwise_xor(%767, %768) /* ty=Tensor[(1200), uint16] */;
  %778 = %769.1;
  %779 = %776.6;
  (%777, %778, %779, %var_5511, 3.31696f64 /* ty=float64 */, meta[relay.Constant][51] /* ty=Tensor[(260), float32] */)
}

def @func_4533() -> (Tensor[(1200), int16], Tensor[(6, 16, 5), float64], Tensor[(480), float64]) {
  %780 = @func_4041() /* ty=(Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) */;
  %781 = cast(meta[relay.Constant][52] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %782 = reshape(%781, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %783 = @func_636(%782) /* ty=(Tensor[(6, 16, 5), float64],) */;
  %784 = %780.0;
  %785 = %783.0;
  (%784, %785, meta[relay.Constant][52] /* ty=Tensor[(480), float64] */)
}

def @func_4203(%var_4195: Tensor[(260), float32]) -> (Tensor[(1200), int16], Tensor[(480), float64], Tensor[(260), float32], Tensor[(51480, 1), float32]) {
  %786 = @func_3256() /* ty=(Tensor[(1200), int16],) */;
  %787 = cast(%var_4195, dtype="float32") /* ty=Tensor[(260), float32] */;
  %788 = cast(meta[relay.Constant][53] /* ty=Tensor[(51480, 1), float32] */, dtype="float32") /* ty=Tensor[(51480, 1), float32] */;
  %789 = reshape(%787, newshape=[260, 1]) /* ty=Tensor[(260, 1), float32] */;
  %790 = reshape(%788, newshape=[260, 198]) /* ty=Tensor[(260, 198), float32] */;
  %791 = @func_3071(%789, %790) /* ty=(Tensor[(1200), int16], Tensor[(480), float64], float64, Tensor[(260, 198), bool]) */;
  %792 = %786.0;
  %793 = %791.1;
  (%792, %793, %var_4195, meta[relay.Constant][53] /* ty=Tensor[(51480, 1), float32] */)
}

def @func_3686() -> (Tensor[(1200), int16], Tensor[(1200), int16]) {
  %794 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
  %795 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %796 = %794.0;
  %797 = %795.0;
  (%796, %797)
}

def @func_5970() -> (Tensor[(6, 16, 5), bool], float64, Tensor[(6, 16, 5), float64], Tensor[(1200), int16]) {
  %798 = @func_4041() /* ty=(Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) */;
  %799 = %798.1;
  %800 = @func_4533() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64], Tensor[(480), float64]) */;
  %801 = %800.1;
  %802 = cast(%799, dtype="bool") /* ty=bool */;
  %803 = cast(%801, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %804 = @func_4397() /* ty=(float64,) */;
  %805 = cast(%801, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
  %806 = logical_or(%802, %803) /* ty=Tensor[(6, 16, 5), bool] */;
  %807 = cast(%806, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
  %808 = reshape(%805, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
  %809 = reshape(%807, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
  %810 = @func_2544(%808, %809) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64], float64) */;
  %811 = @func_5595() /* ty=(Tensor[(11, 9, 14), uint32], Tensor[(1200), int16], Tensor[(1200), int16], float64) */;
  %812 = %804.0;
  %813 = %810.1;
  %814 = %811.2;
  (%806, %812, %813, %814)
}

def @func_5359() -> (Tensor[(1200), float64],) {
  %815 = @func_3139() /* ty=Tensor[(1200), int16] */;
  %816 = cast(%815, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %817 = sqrt(%816) /* ty=Tensor[(1200), float64] */;
  (%817,)
}

def @func_2777(%var_2751: Tensor[(10, 10, 12), uint8], %var_2762: Tensor[(980), int32]) -> (Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(10, 10, 12), float64], Tensor[(980), int8]) {
  %818 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %819 = @func_2661() /* ty=(Tensor[(1200), int16],) */;
  %820 = %818.0;
  %821 = cast(%820, dtype="bool") /* ty=Tensor[(1200), bool] */;
  %822 = reshape(%821, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), bool] */;
  %823 = @func_2445(%822) /* ty=Tensor[(10, 10, 12), uint8] */;
  %824 = cast(%var_2751, dtype="float64") /* ty=Tensor[(10, 10, 12), float64] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%823, dtype="float64") /* ty=Tensor[(10, 10, 12), float64] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %828 = cast(%var_2762, dtype="int32") /* ty=Tensor[(980), int32] */;
  %829 = reshape(%828, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %830 = @func_1338(%829) /* ty=Tensor[(14, 14, 5), bool] */;
  %831 = cast(%830, dtype="int8") /* ty=Tensor[(14, 14, 5), int8] */;
  %832 = shape_of(%var_2762, dtype="int32") /* ty=Tensor[(1), int32] */;
  %833 = cast(%var_2762, dtype="int8") /* ty=Tensor[(980), int8] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?), int8] */;
  %835 = %819.0;
  %836 = power(%826, %827) /* ty=Tensor[(10, 10, 12), float64] */;
  %837 = minimum(%833, %834) /* ty=Tensor[(980), int8] */;
  (%820, %835, %836, %837)
}

def @func_2905(%var_2840: Tensor[(2, 11, 2), uint64], %var_2891: Tensor[(60), float32], %var_2892: float64, %var_2897: Tensor[(2, 11, 2), uint64]) -> (Tensor[(1200), int16], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(2, 11, 2), float64], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(2, 11, 2), uint64], Tensor[(2, 11, 2), float32]) {
  %838 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %839 = cast(meta[relay.Constant][54] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %840 = cast(meta[relay.Constant][54] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %841 = reshape(%839, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %842 = reshape(%840, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %843 = cast(%var_2840, dtype="bool") /* ty=Tensor[(2, 11, 2), bool] */;
  %844 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(2, 11, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %845 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 11, 2), uint64] */, dtype="bool") /* ty=Tensor[(2, 11, 2), bool] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %847 = less_equal(%845, %846) /* ty=Tensor[(2, 11, 2), bool] */;
  %848 = cast(%847, dtype="float64") /* ty=Tensor[(2, 11, 2), float64] */;
  %849 = cast(%var_2891, dtype="float32") /* ty=Tensor[(60), float32] */;
  %850 = cast(%var_2892, dtype="float64") /* ty=float64 */;
  %851 = reshape(%849, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %852 = reshape(%850, newshape=[]) /* ty=float64 */;
  %853 = @func_906(%851, %852) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %854 = cast(%var_2897, dtype="uint64") /* ty=Tensor[(2, 11, 2), uint64] */;
  %855 = shape_of(%var_2840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%var_2840, dtype="uint64") /* ty=Tensor[(2, 11, 2), uint64] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %858 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 11, 2), uint64] */, dtype="float32") /* ty=Tensor[(2, 11, 2), float32] */;
  %859 = sqrt(%858) /* ty=Tensor[(2, 11, 2), float32] */;
  %860 = cast(meta[relay.Constant][56] /* ty=Tensor[(2, 11, 2), float32] */, dtype="float32") /* ty=Tensor[(2, 11, 2), float32] */;
  %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %862 = cast(%859, dtype="float32") /* ty=Tensor[(2, 11, 2), float32] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %864 = %838.0;
  %865 = @func_2825(%841, %842) /* ty=Tensor[(15, 12, 9), float64] */;
  %866 = cosh(%848) /* ty=Tensor[(2, 11, 2), float64] */;
  %867 = %853.1;
  %868 = minimum(%856, %857) /* ty=Tensor[(2, 11, 2), uint64] */;
  %869 = divide(%862, %863) /* ty=Tensor[(2, 11, 2), float32] */;
  (%864, %865, meta[relay.Constant][54] /* ty=Tensor[(1620), float64] */, %866, %867, %var_2891, %var_2892, %868, %869)
}

def @func_6461(%var_6424: Tensor[(9, 15, 10), uint8], %var_6438: Tensor[(9, 15, 10), uint64]) -> (Tensor[(9, 15, 10), int16], Tensor[(9, 15, 10), uint32], Tensor[(9, 15, 10), float32]) {
  %870 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %871 = %870.1;
  %872 = cast(%871, dtype="int16") /* ty=Tensor[(9, 15, 10), int16] */;
  %873 = shape_of(%var_6424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %874 = cast(%var_6424, dtype="int16") /* ty=Tensor[(9, 15, 10), int16] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %876 = cast(%var_6424, dtype="uint64") /* ty=Tensor[(9, 15, 10), uint64] */;
  %877 = shape_of(%871, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(%871, dtype="uint64") /* ty=Tensor[(9, 15, 10), uint64] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %880 = subtract(%878, %879) /* ty=Tensor[(9, 15, 10), uint64] */;
  %881 = cast(%var_6438, dtype="uint32") /* ty=Tensor[(9, 15, 10), uint32] */;
  %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%880, dtype="uint32") /* ty=Tensor[(9, 15, 10), uint32] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %885 = cast(%var_6424, dtype="float32") /* ty=Tensor[(9, 15, 10), float32] */;
  %886 = maximum(%874, %875) /* ty=Tensor[(9, 15, 10), int16] */;
  %887 = bitwise_and(%883, %884) /* ty=Tensor[(9, 15, 10), uint32] */;
  %888 = log10(%885) /* ty=Tensor[(9, 15, 10), float32] */;
  (%886, %887, %888)
}

def @func_8647() -> (Tensor[(6, 16, 5), bool], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) {
  %889 = @func_8527() /* ty=(Tensor[(6, 16, 5), bool],) */;
  %890 = cast(meta[relay.Constant][57] /* ty=Tensor[(1200), int16] */, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %891 = cast(meta[relay.Constant][57] /* ty=Tensor[(1200), int16] */, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %892 = reshape(%890, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %893 = reshape(%891, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %894 = @func_2215(%892, %893) /* ty=(Tensor[(10, 10, 12), bool],) */;
  %895 = %889.0;
  %896 = %894.0;
  (%895, %896, meta[relay.Constant][57] /* ty=Tensor[(1200), int16] */)
}

def @func_7949() -> (Tensor[(1200), int16],) {
  %897 = @func_5001() /* ty=(Tensor[(1200), int16],) */;
  %898 = %897.0;
  (%898,)
}

def @func_2704(%var_2699: Tensor[(14, 13, 6), uint64], %var_2700: Tensor[(14, 13, 6), uint64]) -> Tensor[(14, 13, 6), uint64] {
  %899 = cast(%var_2700, dtype="uint64") /* ty=Tensor[(14, 13, 6), uint64] */;
  %900 = shape_of(%var_2699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(%var_2699, dtype="uint64") /* ty=Tensor[(14, 13, 6), uint64] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_xor(%901, %902) /* ty=Tensor[(14, 13, 6), uint64] */
}

def @func_4650(%var_4648: Tensor[(1620), float64]) -> (Tensor[(10, 10, 12), bool], Tensor[(15, 12, 9), float64], Tensor[(1620), float64]) {
  %903 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %904 = cast(%var_4648, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %905 = cast(%var_4648, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %906 = reshape(%904, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %907 = reshape(%905, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %908 = %903.1;
  %909 = @func_2825(%906, %907) /* ty=Tensor[(15, 12, 9), float64] */;
  (%908, %909, %var_4648)
}

def @func_5203() -> Tensor[(1200), int16] {
  %910 = @func_4450() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64]) */;
  %910.0
}

def @func_2445(%var_2428: Tensor[(10, 10, 12), bool]) -> Tensor[(10, 10, 12), uint8] {
  %911 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %912 = %911.1;
  %913 = cast(%var_2428, dtype="int32") /* ty=Tensor[(10, 10, 12), int32] */;
  %914 = shape_of(%912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %915 = cast(%912, dtype="int32") /* ty=Tensor[(10, 10, 12), int32] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %917 = minimum(%915, %916) /* ty=Tensor[(10, 10, 12), int32] */;
  %918 = cast(%917, dtype="float64") /* ty=Tensor[(10, 10, 12), float64] */;
  %919 = shape_of(%var_2428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %920 = cast(%var_2428, dtype="float64") /* ty=Tensor[(10, 10, 12), float64] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %922 = mod(%920, %921) /* ty=Tensor[(10, 10, 12), float64] */;
  %923 = cast(%922, dtype="uint8") /* ty=Tensor[(10, 10, 12), uint8] */;
  %924 = shape_of(%912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %925 = cast(%912, dtype="uint8") /* ty=Tensor[(10, 10, 12), uint8] */;
  %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%925, %926) /* ty=Tensor[(10, 10, 12), uint8] */
}

def @func_8424() -> Tensor[(10, 10, 12), bool] {
  %927 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
  %927.0
}

def @func_5099(%var_5090: uint64) -> (Tensor[(6, 16, 5), float64], Tensor[(980), int32], uint64, Tensor[(264), uint64], Tensor[(2, 600), uint8]) {
  %928 = @func_4450() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64]) */;
  %929 = cast(%var_5090, dtype="uint64") /* ty=uint64 */;
  %930 = cast(meta[relay.Constant][58] /* ty=Tensor[(264), uint64] */, dtype="uint64") /* ty=Tensor[(264), uint64] */;
  %931 = cast(meta[relay.Constant][59] /* ty=Tensor[(2, 600), uint8] */, dtype="uint8") /* ty=Tensor[(2, 600), uint8] */;
  %932 = reshape(%929, newshape=[]) /* ty=uint64 */;
  %933 = reshape(%930, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), uint64] */;
  %934 = reshape(%931, newshape=[12, 100]) /* ty=Tensor[(12, 100), uint8] */;
  %935 = @func_3872(%932, %933, %934) /* ty=(Tensor[(11, 6, 4), uint64], Tensor[(980), int8], Tensor[(12, 100), uint8], Tensor[(980), int32]) */;
  %936 = %928.1;
  %937 = %935.3;
  (%936, %937, %var_5090, meta[relay.Constant][58] /* ty=Tensor[(264), uint64] */, meta[relay.Constant][59] /* ty=Tensor[(2, 600), uint8] */)
}

def @func_2960(%var_2928: Tensor[(16, 1), int8]) -> (Tensor[(16, 1), int8], Tensor[(6, 16, 5), float64], Tensor[(480), float32]) {
  %938 = cast(meta[relay.Constant][60] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %939 = cast(%var_2928, dtype="int8") /* ty=Tensor[(16, 1), int8] */;
  %940 = cast(meta[relay.Constant][61] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %941 = cast(meta[relay.Constant][61] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %942 = reshape(%940, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
  %943 = reshape(%941, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
  %944 = @func_2544(%942, %943) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64], float64) */;
  %945 = multiply(%938, %939) /* ty=Tensor[(16, 1), int8] */;
  %946 = %944.1;
  (%945, %946, meta[relay.Constant][61] /* ty=Tensor[(480), float32] */)
}

def @func_3216() -> (Tensor[(1200), int16],) {
  %947 = @func_2661() /* ty=(Tensor[(1200), int16],) */;
  %948 = %947.0;
  (%948,)
}

def @func_4817() -> (Tensor[(16), int8],) {
  %949 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
  %950 = %949.3;
  (%950,)
}

def @func_7246(%var_7228: Tensor[(980), int32]) -> (Tensor[(1200), int16], Tensor[(14, 14, 5), bool], Tensor[(980), int32], Tensor[(1200), int16]) {
  %951 = @func_3686() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */;
  %952 = cast(%var_7228, dtype="int32") /* ty=Tensor[(980), int32] */;
  %953 = reshape(%952, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %954 = @func_7169() /* ty=(Tensor[(1200), int16],) */;
  %955 = %951.0;
  %956 = @func_1338(%953) /* ty=Tensor[(14, 14, 5), bool] */;
  %957 = %954.0;
  (%955, %956, %var_7228, %957)
}

def @func_7869() -> Tensor[(1200), int16] {
  %958 = @func_5595() /* ty=(Tensor[(11, 9, 14), uint32], Tensor[(1200), int16], Tensor[(1200), int16], float64) */;
  %958.1
}

def @func_4613(%var_4567: Tensor[(1, 2, 6), int16], %var_4568: Tensor[(16, 2, 6), int16]) -> (Tensor[(16, 2, 6), int16], Tensor[(16, 2, 6), bool]) {
  %959 = cast(%var_4567, dtype="int16") /* ty=Tensor[(1, 2, 6), int16] */;
  %960 = cast(%var_4568, dtype="int16") /* ty=Tensor[(16, 2, 6), int16] */;
  %961 = cast(%var_4568, dtype="float64") /* ty=Tensor[(16, 2, 6), float64] */;
  %962 = atan(%961) /* ty=Tensor[(16, 2, 6), float64] */;
  %963 = cast(meta[relay.Constant][62] /* ty=Tensor[(16, 2, 6), float64] */, dtype="bool") /* ty=Tensor[(16, 2, 6), bool] */;
  %964 = shape_of(%962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %965 = cast(%962, dtype="bool") /* ty=Tensor[(16, 2, 6), bool] */;
  %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %967 = subtract(%959, %960) /* ty=Tensor[(16, 2, 6), int16] */;
  %968 = logical_and(%965, %966) /* ty=Tensor[(16, 2, 6), bool] */;
  (%967, %968)
}

def @func_7998() -> (Tensor[(5, 4, 16), float64], Tensor[(1200), int16]) {
  %969 = cast(meta[relay.Constant][63] /* ty=Tensor[(5, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 4, 16), float64] */;
  %970 = @func_5621() /* ty=(Tensor[(1200), int16],) */;
  %971 = sqrt(%969) /* ty=Tensor[(5, 4, 16), float64] */;
  %972 = %970.0;
  (%971, %972)
}

def @func_8293(%var_8259: Tensor[(60), float32], %var_8260: float64, %var_8263: Tensor[(260), float32], %var_8264: Tensor[(480), float64], %var_8281: Tensor[(4, 14, 15), float64]) -> (Tensor[(1200), int16], float64, Tensor[(44), uint64], Tensor[(60), float32], float64, Tensor[(260), float32], Tensor[(480), float64], Tensor[(4, 14, 15), float64], Tensor[(10, 10, 12), float64]) {
  %973 = cast(meta[relay.Constant][64] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %974 = cast(%var_8259, dtype="float32") /* ty=Tensor[(60), float32] */;
  %975 = cast(%var_8260, dtype="float64") /* ty=float64 */;
  %976 = cast(meta[relay.Constant][64] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %977 = reshape(%973, newshape=[2, 11, 2]) /* ty=Tensor[(2, 11, 2), uint64] */;
  %978 = reshape(%974, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %979 = reshape(%975, newshape=[]) /* ty=float64 */;
  %980 = reshape(%976, newshape=[2, 11, 2]) /* ty=Tensor[(2, 11, 2), uint64] */;
  %981 = @func_2905(%977, %978, %979, %980) /* ty=(Tensor[(1200), int16], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(2, 11, 2), float64], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(2, 11, 2), uint64], Tensor[(2, 11, 2), float32]) */;
  %982 = cast(%var_8263, dtype="float32") /* ty=Tensor[(260), float32] */;
  %983 = cast(%var_8264, dtype="float64") /* ty=Tensor[(480), float64] */;
  %984 = cast(%var_8259, dtype="float32") /* ty=Tensor[(60), float32] */;
  %985 = cast(%var_8264, dtype="float64") /* ty=Tensor[(480), float64] */;
  %986 = reshape(%982, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %987 = reshape(%983, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %988 = reshape(%984, newshape=[3, 20]) /* ty=Tensor[(3, 20), float32] */;
  %989 = reshape(%985, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %990 = @func_3791(%986, %987, %988, %989) /* ty=(Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) */;
  %991 = %990.7;
  %992 = cast(%var_8281, dtype="float64") /* ty=Tensor[(4, 14, 15), float64] */;
  %993 = shape_of(%991, dtype="int32") /* ty=Tensor[(3), int32] */;
  %994 = cast(%991, dtype="float64") /* ty=Tensor[(4, 14, 15), float64] */;
  %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %996 = @func_7747() /* ty=Tensor[(10, 10, 12), bool] */;
  %997 = cast(%996, dtype="float64") /* ty=Tensor[(10, 10, 12), float64] */;
  %998 = @func_5203() /* ty=Tensor[(1200), int16] */;
  %999 = %981.6;
  %1000 = floor_divide(%994, %995) /* ty=Tensor[(4, 14, 15), float64] */;
  %1001 = asinh(%997) /* ty=Tensor[(10, 10, 12), float64] */;
  (%998, %999, meta[relay.Constant][64] /* ty=Tensor[(44), uint64] */, %var_8259, %var_8260, %var_8263, %var_8264, %1000, %1001)
}

def @func_5160() -> Tensor[(10, 10, 12), bool] {
  %1002 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
  %1002.0
}

def @func_8201() -> (Tensor[(1200), int16], Tensor[(3, 10, 16), bool], Tensor[(480), float64]) {
  %1003 = cast(meta[relay.Constant][65] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %1004 = reshape(%1003, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float64] */;
  %1005 = @func_5039() /* ty=Tensor[(1200), int16] */;
  %1006 = @func_8173(%1004) /* ty=Tensor[(3, 10, 16), bool] */;
  (%1005, %1006, meta[relay.Constant][65] /* ty=Tensor[(480), float64] */)
}

def @func_5621() -> (Tensor[(1200), int16],) {
  %1007 = @func_5039() /* ty=Tensor[(1200), int16] */;
  (%1007,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2067(%var_2005: Tensor[(11, 9, 2), float64], %var_2039: float64, %var_2061: Tensor[(260), float32]) -> (Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) {
  %0 = cast(%var_2005, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
  %1 = cast(%var_2005, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
  %2 = tan(%1) /* ty=Tensor[(11, 9, 2), float64] */;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %5 = cast(%var_2039, dtype="float64") /* ty=float64 */;
  %6 = reshape(%4, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %7 = reshape(%5, newshape=[]) /* ty=float64 */;
  %8 = @func_906(%6, %7) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %10 = cast(%var_2039, dtype="float64") /* ty=float64 */;
  %11 = reshape(%9, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %12 = reshape(%10, newshape=[]) /* ty=float64 */;
  %13 = @func_906(%11, %12) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %15 = reshape(%14, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %16 = @func_636(%15) /* ty=(Tensor[(6, 16, 5), float64],) */;
  %17 = cast(%var_2061, dtype="float32") /* ty=Tensor[(260), float32] */;
  %18 = cast(%var_2039, dtype="float64") /* ty=float64 */;
  %19 = reshape(%17, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %20 = reshape(%18, newshape=[]) /* ty=float64 */;
  %21 = @func_1892(%19, %20) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(4, 14, 15), float64], float64, Tensor[(4, 14, 15), float64], Tensor[(60), float32]) */;
  %22 = cosh(%0) /* ty=Tensor[(11, 9, 2), float64] */;
  %23 = log2(%3) /* ty=Tensor[(11, 9, 2), float32] */;
  %24 = %8.1;
  %25 = %13.1;
  %26 = %16.0;
  %27 = %21.4;
  (%22, %23, %24, meta[relay.Constant][0] /* ty=Tensor[(60), float32] */, %var_2039, %25, %26, meta[relay.Constant][1] /* ty=Tensor[(480), float64] */, %27, %var_2061)
}

def @func_2219(%var_2217: Tensor[(10, 10, 12), int16], %var_2218: Tensor[(10, 10, 12), int16]) -> (Tensor[(10, 10, 12), bool],) {
  @func_2215(%var_2217, %var_2218) /* ty=(Tensor[(10, 10, 12), bool],) */
}

def @func_8883() -> (Tensor[(1200), int16],) {
  %28 = @func_7405() /* ty=Tensor[(1200), int16] */;
  (%28,)
}

def @func_4617(%var_4615: Tensor[(1, 2, 6), int16], %var_4616: Tensor[(16, 2, 6), int16]) -> (Tensor[(16, 2, 6), int16], Tensor[(16, 2, 6), bool]) {
  @func_4613(%var_4615, %var_4616) /* ty=(Tensor[(16, 2, 6), int16], Tensor[(16, 2, 6), bool]) */
}

def @func_3358(%var_3356: Tensor[(14, 70), int32]) -> (Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(14, 70), int32], Tensor[(4, 14, 15), float64], Tensor[(99, 2), float64], float64, Tensor[(260, 1), float32]) {
  @func_3355(%var_3356) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(14, 70), int32], Tensor[(4, 14, 15), float64], Tensor[(99, 2), float64], float64, Tensor[(260, 1), float32]) */
}

def @func_4397() -> (float64,) {
  %29 = @func_4041() /* ty=(Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) */;
  %30 = %29.1;
  (%30,)
}

def @func_7724() -> Tensor[(15, 6, 9), bool] {
  @func_7722() /* ty=Tensor[(15, 6, 9), bool] */
}

def @func_3877(%var_3874: uint64, %var_3875: Tensor[(11, 6, 4), uint64], %var_3876: Tensor[(12, 100), uint8]) -> (Tensor[(11, 6, 4), uint64], Tensor[(980), int8], Tensor[(12, 100), uint8], Tensor[(980), int32]) {
  @func_3872(%var_3874, %var_3875, %var_3876) /* ty=(Tensor[(11, 6, 4), uint64], Tensor[(980), int8], Tensor[(12, 100), uint8], Tensor[(980), int32]) */
}

def @func_5359() -> (Tensor[(1200), float64],) {
  %31 = @func_3139() /* ty=Tensor[(1200), int16] */;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %33 = sqrt(%32) /* ty=Tensor[(1200), float64] */;
  (%33,)
}

def @func_5003() -> (Tensor[(1200), int16],) {
  @func_5001() /* ty=(Tensor[(1200), int16],) */
}

def @func_7073() -> (Tensor[(1200), int16],) {
  %36 = fn () -> (Tensor[(1200), int16],) {
    %34 = @func_6706() /* ty=(Tensor[(1200), int16], float64) */;
    %35 = %34.0;
    (%35,)
  };
  %36() /* ty=(Tensor[(1200), int16],) */
}

def @func_5203() -> Tensor[(1200), int16] {
  %37 = @func_4450() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64]) */;
  %37.0
}

def @func_8719() -> (Tensor[(1200), int16],) {
  %38 = @func_5703() /* ty=(Tensor[(1200), int16],) */;
  %39 = %38.0;
  (%39,)
}

def @func_4450() -> (Tensor[(1200), int16], Tensor[(6, 16, 5), float64]) {
  %40 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
  %41 = %40.2;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
  %43 = erf(%42) /* ty=Tensor[(6, 16, 5), float32] */;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
  %45 = log(%44) /* ty=Tensor[(6, 16, 5), float64] */;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
  %47 = @func_3139() /* ty=Tensor[(1200), int16] */;
  %48 = cosh(%46) /* ty=Tensor[(6, 16, 5), float64] */;
  (%47, %48)
}

def @func_5040() -> Tensor[(1200), int16] {
  %49 = fn () -> Tensor[(1200), int16] {
    @func_4861() /* ty=Tensor[(1200), int16] */
  };
  %49() /* ty=Tensor[(1200), int16] */
}

def @func_8424() -> Tensor[(10, 10, 12), bool] {
  %50 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
  %50.0
}

def @func_8088() -> float64 {
  %51 = @func_5595() /* ty=(Tensor[(11, 9, 14), uint32], Tensor[(1200), int16], Tensor[(1200), int16], float64) */;
  %51.3
}

def @func_9025(%var_9024: Tensor[(6, 16, 5), float64]) -> Tensor[(6, 16, 5), uint64] {
  %57 = fn (%var_9016: Tensor[(6, 16, 5), float64]) -> Tensor[(6, 16, 5), uint64] {
    %52 = @func_8962() /* ty=Tensor[(6, 16, 5), float64] */;
    %53 = cast(%var_9016, dtype="uint64") /* ty=Tensor[(6, 16, 5), uint64] */;
    %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
    %55 = cast(%52, dtype="uint64") /* ty=Tensor[(6, 16, 5), uint64] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_xor(%55, %56) /* ty=Tensor[(6, 16, 5), uint64] */
  };
  %57(%var_9024) /* ty=Tensor[(6, 16, 5), uint64] */
}

def @func_9059() -> (Tensor[(1200), int16], Tensor[(1200), int16]) {
  %61 = fn () -> (Tensor[(1200), int16], Tensor[(1200), int16]) {
    %58 = @func_6706() /* ty=(Tensor[(1200), int16], float64) */;
    %59 = @func_7895() /* ty=Tensor[(1200), int16] */;
    %60 = %58.0;
    (%59, %60)
  };
  %61() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */
}

def @func_5101(%var_5100: uint64) -> (Tensor[(6, 16, 5), float64], Tensor[(980), int32], uint64, Tensor[(264), uint64], Tensor[(2, 600), uint8]) {
  %72 = fn (%var_5090: uint64) -> (Tensor[(6, 16, 5), float64], Tensor[(980), int32], uint64, Tensor[(264), uint64], Tensor[(2, 600), uint8]) {
    %62 = @func_4450() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64]) */;
    %63 = cast(%var_5090, dtype="uint64") /* ty=uint64 */;
    %64 = cast(meta[relay.Constant][2] /* ty=Tensor[(264), uint64] */, dtype="uint64") /* ty=Tensor[(264), uint64] */;
    %65 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 600), uint8] */, dtype="uint8") /* ty=Tensor[(2, 600), uint8] */;
    %66 = reshape(%63, newshape=[]) /* ty=uint64 */;
    %67 = reshape(%64, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), uint64] */;
    %68 = reshape(%65, newshape=[12, 100]) /* ty=Tensor[(12, 100), uint8] */;
    %69 = @func_3872(%66, %67, %68) /* ty=(Tensor[(11, 6, 4), uint64], Tensor[(980), int8], Tensor[(12, 100), uint8], Tensor[(980), int32]) */;
    %70 = %62.1;
    %71 = %69.3;
    (%70, %71, %var_5090, meta[relay.Constant][2] /* ty=Tensor[(264), uint64] */, meta[relay.Constant][3] /* ty=Tensor[(2, 600), uint8] */)
  };
  %72(%var_5100) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(980), int32], uint64, Tensor[(264), uint64], Tensor[(2, 600), uint8]) */
}

def @func_8426() -> Tensor[(10, 10, 12), bool] {
  @func_8424() /* ty=Tensor[(10, 10, 12), bool] */
}

def @func_9227() -> (Tensor[(1200), int16], Tensor[(3, 10, 16), float64], Tensor[(1200), int16]) {
  %77 = fn () -> (Tensor[(1200), int16], Tensor[(3, 10, 16), float64], Tensor[(1200), int16]) {
    %73 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
    %74 = @func_6401() /* ty=Tensor[(1200), int16] */;
    %75 = %73.3;
    %76 = @func_4861() /* ty=Tensor[(1200), int16] */;
    (%74, %75, %76)
  };
  %77() /* ty=(Tensor[(1200), int16], Tensor[(3, 10, 16), float64], Tensor[(1200), int16]) */
}

def @func_4966(%var_4938: Tensor[(60), float32], %var_4959: Tensor[(18, 2), float64], %var_4962: Tensor[(1620), float64]) -> (Tensor[(16), int8], Tensor[(3, 20), bool], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32], Tensor[(1200), int16], Tensor[(2860, 18), float32], Tensor[(18, 2), float64], Tensor[(1620), bool]) {
  %78 = @func_4817() /* ty=(Tensor[(16), int8],) */;
  %79 = cast(meta[relay.Constant][4] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %81 = cast(%var_4938, dtype="float32") /* ty=Tensor[(60), float32] */;
  %82 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %83 = reshape(%79, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %84 = reshape(%80, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %85 = reshape(%81, newshape=[3, 20]) /* ty=Tensor[(3, 20), float32] */;
  %86 = reshape(%82, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %87 = @func_3791(%83, %84, %85, %86) /* ty=(Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) */;
  %88 = cast(meta[relay.Constant][6] /* ty=Tensor[(2860, 18), float32] */, dtype="float32") /* ty=Tensor[(2860, 18), float32] */;
  %89 = cast(%var_4938, dtype="float32") /* ty=Tensor[(60), float32] */;
  %90 = cast(%var_4959, dtype="float64") /* ty=Tensor[(18, 2), float64] */;
  %91 = cast(meta[relay.Constant][7] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %92 = reshape(%88, newshape=[51480]) /* ty=Tensor[(51480), float32] */;
  %93 = reshape(%89, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %94 = reshape(%90, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %95 = reshape(%91, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %96 = @func_3592(%92, %93, %94, %95) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(198), float64], float64, Tensor[(260), float32], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(51480), float32], Tensor[(4, 14, 15), int64], Tensor[(3, 2, 10), bool], Tensor[(60), float32], Tensor[(3, 2, 6), float64], Tensor[(36), float64], Tensor[(1620), float64]) */;
  %97 = cast(%var_4962, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %98 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(1620), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %99 = cast(meta[relay.Constant][7] /* ty=Tensor[(1620), float64] */, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?), bool] */;
  %101 = %78.0;
  %102 = %87.12;
  %103 = %96.5;
  %104 = greater_equal(%99, %100) /* ty=Tensor[(1620), bool] */;
  (%101, %102, meta[relay.Constant][4] /* ty=Tensor[(260), float32] */, meta[relay.Constant][5] /* ty=Tensor[(480), float64] */, %var_4938, %103, meta[relay.Constant][6] /* ty=Tensor[(2860, 18), float32] */, %var_4959, %104)
}

def @func_2509(%var_2507: Tensor[(1200), int16], %var_2508: Tensor[(480), float64]) -> (Tensor[(1200), int16], Tensor[(1200), float32], Tensor[(10, 10, 12), uint8], Tensor[(4, 14, 15), float64], float64, Tensor[(6, 16, 5), float64], Tensor[(480), float64]) {
  %124 = fn (%var_2484: Tensor[(1200), int16], %var_2504: Tensor[(480), float64]) -> (Tensor[(1200), int16], Tensor[(1200), float32], Tensor[(10, 10, 12), uint8], Tensor[(4, 14, 15), float64], float64, Tensor[(6, 16, 5), float64], Tensor[(480), float64]) {
    %105 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
    %106 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
    %107 = %106.0;
    %108 = cast(%var_2484, dtype="float32") /* ty=Tensor[(1200), float32] */;
    %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(1), int32] */;
    %110 = cast(%107, dtype="float32") /* ty=Tensor[(1200), float32] */;
    %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?), float32] */;
    %112 = %105.0;
    %113 = cast(%112, dtype="bool") /* ty=Tensor[(1200), bool] */;
    %114 = reshape(%113, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), bool] */;
    %115 = cast(-1.99923f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %116 = reshape(%115, newshape=[]) /* ty=float64 */;
    %117 = cast(%var_2504, dtype="float64") /* ty=Tensor[(480), float64] */;
    %118 = reshape(%117, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
    %119 = @func_636(%118) /* ty=(Tensor[(6, 16, 5), float64],) */;
    %120 = floor_divide(%110, %111) /* ty=Tensor[(1200), float32] */;
    %121 = @func_2445(%114) /* ty=Tensor[(10, 10, 12), uint8] */;
    %122 = @func_803(%116) /* ty=Tensor[(4, 14, 15), float64] */;
    %123 = %119.0;
    (%112, %120, %121, %122, -1.99923f64 /* ty=float64 */, %123, %var_2504)
  };
  %124(%var_2507, %var_2508) /* ty=(Tensor[(1200), int16], Tensor[(1200), float32], Tensor[(10, 10, 12), uint8], Tensor[(4, 14, 15), float64], float64, Tensor[(6, 16, 5), float64], Tensor[(480), float64]) */
}

def @func_6527() -> (Tensor[(1200), int16],) {
  @func_6525() /* ty=(Tensor[(1200), int16],) */
}

def @func_805(%var_804: float64) -> Tensor[(4, 14, 15), float64] {
  %127 = fn (%var_796: float64) -> Tensor[(4, 14, 15), float64] {
    %125 = cast(%var_796, dtype="float64") /* ty=float64 */;
    %126 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 14, 15), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 15), float64] */;
    floor_mod(%125, %126) /* ty=Tensor[(4, 14, 15), float64] */
  };
  %127(%var_804) /* ty=Tensor[(4, 14, 15), float64] */
}

def @func_2544(%var_2516: Tensor[(3, 10, 16), float32], %var_2517: Tensor[(3, 10, 16), float32]) -> (Tensor[(3, 10, 16), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64], float64) {
  %128 = cast(%var_2517, dtype="float32") /* ty=Tensor[(3, 10, 16), float32] */;
  %129 = shape_of(%var_2516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%var_2516, dtype="float32") /* ty=Tensor[(3, 10, 16), float32] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %132 = power(%130, %131) /* ty=Tensor[(3, 10, 16), float32] */;
  %133 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 10, 16), float32] */, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%132, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 10, 16), float32] */, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %138 = reshape(%137, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %139 = @func_636(%138) /* ty=(Tensor[(6, 16, 5), float64],) */;
  %140 = cast(-8.28653f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %141 = reshape(%140, newshape=[]) /* ty=float64 */;
  %142 = divide(%135, %136) /* ty=Tensor[(3, 10, 16), float64] */;
  %143 = %139.0;
  %144 = @func_803(%141) /* ty=Tensor[(4, 14, 15), float64] */;
  (%142, %143, %144, -8.28653f64 /* ty=float64 */)
}

def @func_2261() -> (Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) {
  %153 = fn () -> (Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) {
    %145 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 13, 13), float64] */, dtype="float64") /* ty=Tensor[(14, 13, 13), float64] */;
    %146 = cast(meta[relay.Constant][11] /* ty=Tensor[(1200), int16] */, dtype="int16") /* ty=Tensor[(1200), int16] */;
    %147 = cast(meta[relay.Constant][11] /* ty=Tensor[(1200), int16] */, dtype="int16") /* ty=Tensor[(1200), int16] */;
    %148 = reshape(%146, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
    %149 = reshape(%147, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
    %150 = @func_2215(%148, %149) /* ty=(Tensor[(10, 10, 12), bool],) */;
    %151 = cos(%145) /* ty=Tensor[(14, 13, 13), float64] */;
    %152 = %150.0;
    (%151, %152, meta[relay.Constant][11] /* ty=Tensor[(1200), int16] */)
  };
  %153() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */
}

def @func_4613(%var_4567: Tensor[(1, 2, 6), int16], %var_4568: Tensor[(16, 2, 6), int16]) -> (Tensor[(16, 2, 6), int16], Tensor[(16, 2, 6), bool]) {
  %154 = cast(%var_4567, dtype="int16") /* ty=Tensor[(1, 2, 6), int16] */;
  %155 = cast(%var_4568, dtype="int16") /* ty=Tensor[(16, 2, 6), int16] */;
  %156 = cast(%var_4568, dtype="float64") /* ty=Tensor[(16, 2, 6), float64] */;
  %157 = atan(%156) /* ty=Tensor[(16, 2, 6), float64] */;
  %158 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 2, 6), float64] */, dtype="bool") /* ty=Tensor[(16, 2, 6), bool] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="bool") /* ty=Tensor[(16, 2, 6), bool] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %162 = subtract(%154, %155) /* ty=Tensor[(16, 2, 6), int16] */;
  %163 = logical_and(%160, %161) /* ty=Tensor[(16, 2, 6), bool] */;
  (%162, %163)
}

def @func_4653(%var_4651: Tensor[(1620), float64]) -> (Tensor[(10, 10, 12), bool], Tensor[(15, 12, 9), float64], Tensor[(1620), float64]) {
  @func_4650(%var_4651) /* ty=(Tensor[(10, 10, 12), bool], Tensor[(15, 12, 9), float64], Tensor[(1620), float64]) */
}

def @func_6465(%var_6463: Tensor[(9, 15, 10), uint8], %var_6464: Tensor[(9, 15, 10), uint64]) -> (Tensor[(9, 15, 10), int16], Tensor[(9, 15, 10), uint32], Tensor[(9, 15, 10), float32]) {
  @func_6461(%var_6463, %var_6464) /* ty=(Tensor[(9, 15, 10), int16], Tensor[(9, 15, 10), uint32], Tensor[(9, 15, 10), float32]) */
}

def @func_906(%var_874: Tensor[(3, 2, 10), float32], %var_902: float64) -> (Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) {
  %164 = cast(%var_874, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %165 = sin(%164) /* ty=Tensor[(3, 2, 10), float32] */;
  %166 = cast(%165, dtype="bool") /* ty=Tensor[(3, 2, 10), bool] */;
  %167 = shape_of(%var_874, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%var_874, dtype="bool") /* ty=Tensor[(3, 2, 10), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %170 = cast(%var_902, dtype="float64") /* ty=float64 */;
  %171 = reshape(%170, newshape=[]) /* ty=float64 */;
  %172 = greater(%168, %169) /* ty=Tensor[(3, 2, 10), bool] */;
  %173 = @func_803(%171) /* ty=Tensor[(4, 14, 15), float64] */;
  (%172, %173, %var_902)
}

def @func_910(%var_908: Tensor[(3, 2, 10), float32], %var_909: float64) -> (Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) {
  @func_906(%var_908, %var_909) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */
}

def @func_9372(%var_9325: Tensor[(16, 6, 5), uint8], %var_9326: Tensor[(16, 6, 5), uint8]) -> (Tensor[(16, 6, 5), uint8], Tensor[(6, 16, 5), float64]) {
  %174 = cast(%var_9326, dtype="uint8") /* ty=Tensor[(16, 6, 5), uint8] */;
  %175 = shape_of(%var_9325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%var_9325, dtype="uint8") /* ty=Tensor[(16, 6, 5), uint8] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %178 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %179 = minimum(%176, %177) /* ty=Tensor[(16, 6, 5), uint8] */;
  %180 = %178.0;
  (%179, %180)
}

def @func_3218() -> (Tensor[(1200), int16],) {
  @func_3216() /* ty=(Tensor[(1200), int16],) */
}

def @func_8363() -> (Tensor[(1200), int16],) {
  %181 = @func_4300() /* ty=(Tensor[(1200), int16],) */;
  %182 = %181.0;
  (%182,)
}

def @func_3979(%var_3976: Tensor[(260), float32], %var_3977: Tensor[(480), float64], %var_3978: Tensor[(60), float32]) -> (Tensor[(1200), int16], Tensor[(260), int16], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32], float64, Tensor[(51480), float32], Tensor[(36), float64], Tensor[(1620), float64]) {
  @func_3974(%var_3976, %var_3977, %var_3978) /* ty=(Tensor[(1200), int16], Tensor[(260), int16], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32], float64, Tensor[(51480), float32], Tensor[(36), float64], Tensor[(1620), float64]) */
}

def @func_2777(%var_2751: Tensor[(10, 10, 12), uint8], %var_2762: Tensor[(980), int32]) -> (Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(10, 10, 12), float64], Tensor[(980), int8]) {
  %183 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %184 = @func_2661() /* ty=(Tensor[(1200), int16],) */;
  %185 = %183.0;
  %186 = cast(%185, dtype="bool") /* ty=Tensor[(1200), bool] */;
  %187 = reshape(%186, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), bool] */;
  %188 = @func_2445(%187) /* ty=Tensor[(10, 10, 12), uint8] */;
  %189 = cast(%var_2751, dtype="float64") /* ty=Tensor[(10, 10, 12), float64] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%188, dtype="float64") /* ty=Tensor[(10, 10, 12), float64] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %193 = cast(%var_2762, dtype="int32") /* ty=Tensor[(980), int32] */;
  %194 = reshape(%193, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %195 = @func_1338(%194) /* ty=Tensor[(14, 14, 5), bool] */;
  %196 = cast(%195, dtype="int8") /* ty=Tensor[(14, 14, 5), int8] */;
  %197 = shape_of(%var_2762, dtype="int32") /* ty=Tensor[(1), int32] */;
  %198 = cast(%var_2762, dtype="int8") /* ty=Tensor[(980), int8] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?), int8] */;
  %200 = %184.0;
  %201 = power(%191, %192) /* ty=Tensor[(10, 10, 12), float64] */;
  %202 = minimum(%198, %199) /* ty=Tensor[(980), int8] */;
  (%185, %200, %201, %202)
}

def @func_3257() -> (Tensor[(1200), int16],) {
  %204 = fn () -> (Tensor[(1200), int16],) {
    %203 = @func_3139() /* ty=Tensor[(1200), int16] */;
    (%203,)
  };
  %204() /* ty=(Tensor[(1200), int16],) */
}

def @func_2337() -> (Tensor[(1200), int16],) {
  @func_2335() /* ty=(Tensor[(1200), int16],) */
}

def @func_5077() -> (float64,) {
  %205 = @func_4759() /* ty=(Tensor[(1200), bool], Tensor[(3, 2, 10), bool], Tensor[(60, 1), float32], float64, Tensor[(10, 10, 12), bool]) */;
  %206 = %205.3;
  (%206,)
}

def @func_8818() -> (Tensor[(1200), int16], Tensor[(1200), int16]) {
  %209 = fn () -> (Tensor[(1200), int16], Tensor[(1200), int16]) {
    %207 = @func_4861() /* ty=Tensor[(1200), int16] */;
    %208 = @func_7869() /* ty=Tensor[(1200), int16] */;
    (%207, %208)
  };
  %209() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */
}

def @func_9314(%var_9311: Tensor[(12, 14, 3), uint16], %var_9312: float64, %var_9313: Tensor[(130, 2), float32]) -> (Tensor[(12, 14, 3), uint16], Tensor[(10, 10, 12), bool], Tensor[(11, 9, 2), float32], Tensor[(198), float64], float64, Tensor[(130, 2), float32], Tensor[(1200), int16]) {
  @func_9309(%var_9311, %var_9312, %var_9313) /* ty=(Tensor[(12, 14, 3), uint16], Tensor[(10, 10, 12), bool], Tensor[(11, 9, 2), float32], Tensor[(198), float64], float64, Tensor[(130, 2), float32], Tensor[(1200), int16]) */
}

def @func_4818() -> (Tensor[(16), int8],) {
  %212 = fn () -> (Tensor[(16), int8],) {
    %210 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
    %211 = %210.3;
    (%211,)
  };
  %212() /* ty=(Tensor[(16), int8],) */
}

def @func_6865() -> (Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(9, 150), float32]) {
  %222 = fn () -> (Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(9, 150), float32]) {
    %213 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
    %214 = %213.2;
    %215 = cast(%214, dtype="float64") /* ty=Tensor[(9, 150), float64] */;
    %216 = log2(%215) /* ty=Tensor[(9, 150), float64] */;
    %217 = cast(%216, dtype="float32") /* ty=Tensor[(9, 150), float32] */;
    %218 = @func_6658() /* ty=Tensor[(1200), int16] */;
    %219 = @func_3139() /* ty=Tensor[(1200), int16] */;
    %220 = @func_3139() /* ty=Tensor[(1200), int16] */;
    %221 = exp(%217) /* ty=Tensor[(9, 150), float32] */;
    (%218, %219, %220, %221)
  };
  %222() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(9, 150), float32]) */
}

def @func_4886() -> (Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) {
  %227 = fn () -> (Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) {
    %223 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
    %224 = @func_2661() /* ty=(Tensor[(1200), int16],) */;
    %225 = %223.1;
    %226 = %224.0;
    (%225, %226)
  };
  %227() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */
}

def @func_2586(%var_2584: Tensor[(8, 14, 10), uint16], %var_2585: Tensor[(8, 14, 10), uint16]) -> (Tensor[(8, 14, 10), uint16], Tensor[(8, 14, 10), bool]) {
  %240 = fn (%var_2559: Tensor[(8, 14, 10), uint16], %var_2560: Tensor[(8, 14, 10), uint16]) -> (Tensor[(8, 14, 10), uint16], Tensor[(8, 14, 10), bool]) {
    %228 = cast(%var_2560, dtype="uint16") /* ty=Tensor[(8, 14, 10), uint16] */;
    %229 = shape_of(%var_2559, dtype="int32") /* ty=Tensor[(3), int32] */;
    %230 = cast(%var_2559, dtype="uint16") /* ty=Tensor[(8, 14, 10), uint16] */;
    %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %232 = cast(%var_2559, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
    %233 = log(%232) /* ty=Tensor[(8, 14, 10), float32] */;
    %234 = cast(%var_2560, dtype="bool") /* ty=Tensor[(8, 14, 10), bool] */;
    %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
    %236 = cast(%233, dtype="bool") /* ty=Tensor[(8, 14, 10), bool] */;
    %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %238 = bitwise_or(%230, %231) /* ty=Tensor[(8, 14, 10), uint16] */;
    %239 = not_equal(%236, %237) /* ty=Tensor[(8, 14, 10), bool] */;
    (%238, %239)
  };
  %240(%var_2584, %var_2585) /* ty=(Tensor[(8, 14, 10), uint16], Tensor[(8, 14, 10), bool]) */
}

def @func_7508(%var_7505: Tensor[(9, 5, 16), float32], %var_7506: Tensor[(260), float32], %var_7507: Tensor[(60), float32]) -> (Tensor[(9, 5, 16), float32], Tensor[(9, 5, 16), float64], Tensor[(16), int8], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32]) {
  %260 = fn (%var_7472: Tensor[(9, 5, 16), float32], %var_7485: Tensor[(260), float32], %var_7487: Tensor[(60), float32]) -> (Tensor[(9, 5, 16), float32], Tensor[(9, 5, 16), float64], Tensor[(16), int8], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32]) {
    %241 = cast(%var_7472, dtype="float32") /* ty=Tensor[(9, 5, 16), float32] */;
    %242 = cast(%var_7472, dtype="float32") /* ty=Tensor[(9, 5, 16), float32] */;
    %243 = asin(%242) /* ty=Tensor[(9, 5, 16), float32] */;
    %244 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 5, 16), float32] */, dtype="float64") /* ty=Tensor[(9, 5, 16), float64] */;
    %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
    %246 = cast(%243, dtype="float64") /* ty=Tensor[(9, 5, 16), float64] */;
    %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %248 = cast(%var_7485, dtype="float32") /* ty=Tensor[(260), float32] */;
    %249 = cast(meta[relay.Constant][14] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %250 = cast(%var_7487, dtype="float32") /* ty=Tensor[(60), float32] */;
    %251 = cast(meta[relay.Constant][14] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %252 = reshape(%248, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %253 = reshape(%249, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %254 = reshape(%250, newshape=[3, 20]) /* ty=Tensor[(3, 20), float32] */;
    %255 = reshape(%251, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
    %256 = @func_3791(%252, %253, %254, %255) /* ty=(Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) */;
    %257 = log(%241) /* ty=Tensor[(9, 5, 16), float32] */;
    %258 = divide(%246, %247) /* ty=Tensor[(9, 5, 16), float64] */;
    %259 = %256.9;
    (%257, %258, %259, %var_7485, meta[relay.Constant][14] /* ty=Tensor[(480), float64] */, %var_7487)
  };
  %260(%var_7505, %var_7506, %var_7507) /* ty=(Tensor[(9, 5, 16), float32], Tensor[(9, 5, 16), float64], Tensor[(16), int8], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32]) */
}

def @func_6971() -> (Tensor[(9, 15, 10), uint8],) {
  %263 = fn () -> (Tensor[(9, 15, 10), uint8],) {
    %261 = @func_6234() /* ty=(Tensor[(9, 15, 10), uint8], Tensor[(14, 14, 5), bool], Tensor[(980), int32], Tensor[(1200), int16]) */;
    %262 = %261.0;
    (%262,)
  };
  %263() /* ty=(Tensor[(9, 15, 10), uint8],) */
}

def @func_9376(%var_9374: Tensor[(16, 6, 5), uint8], %var_9375: Tensor[(16, 6, 5), uint8]) -> (Tensor[(16, 6, 5), uint8], Tensor[(6, 16, 5), float64]) {
  @func_9372(%var_9374, %var_9375) /* ty=(Tensor[(16, 6, 5), uint8], Tensor[(6, 16, 5), float64]) */
}

def @func_2335() -> (Tensor[(1200), int16],) {
  %264 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %265 = %264.2;
  (%265,)
}

def @func_3797(%var_3793: Tensor[(260), float32], %var_3794: Tensor[(480), float64], %var_3795: Tensor[(3, 20), float32], %var_3796: Tensor[(6, 16, 5), float64]) -> (Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) {
  @func_3791(%var_3793, %var_3794, %var_3795, %var_3796) /* ty=(Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) */
}

def @func_4971(%var_4968: Tensor[(60), float32], %var_4969: Tensor[(18, 2), float64], %var_4970: Tensor[(1620), float64]) -> (Tensor[(16), int8], Tensor[(3, 20), bool], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32], Tensor[(1200), int16], Tensor[(2860, 18), float32], Tensor[(18, 2), float64], Tensor[(1620), bool]) {
  @func_4966(%var_4968, %var_4969, %var_4970) /* ty=(Tensor[(16), int8], Tensor[(3, 20), bool], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32], Tensor[(1200), int16], Tensor[(2860, 18), float32], Tensor[(18, 2), float64], Tensor[(1620), bool]) */
}

def @func_8365() -> (Tensor[(1200), int16],) {
  @func_8363() /* ty=(Tensor[(1200), int16],) */
}

def @func_2072(%var_2069: Tensor[(11, 9, 2), float64], %var_2070: float64, %var_2071: Tensor[(260), float32]) -> (Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) {
  @func_2067(%var_2069, %var_2070, %var_2071) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */
}

def @func_7580() -> Tensor[(15, 6, 9), bool] {
  @func_7578() /* ty=Tensor[(15, 6, 9), bool] */
}

def @func_4281(%var_4279: Tensor[(198), float64]) -> (Tensor[(16), int8], Tensor[(15, 12, 9), float64], Tensor[(44), uint64], Tensor[(60), float32], float64, Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(260), float32], Tensor[(14, 14, 5), bool], Tensor[(980), int32]) {
  @func_4278(%var_4279) /* ty=(Tensor[(16), int8], Tensor[(15, 12, 9), float64], Tensor[(44), uint64], Tensor[(60), float32], float64, Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(260), float32], Tensor[(14, 14, 5), bool], Tensor[(980), int32]) */
}

def @func_2663() -> (Tensor[(1200), int16],) {
  @func_2661() /* ty=(Tensor[(1200), int16],) */
}

def @func_6402() -> Tensor[(1200), int16] {
  %267 = fn () -> Tensor[(1200), int16] {
    %266 = @func_5595() /* ty=(Tensor[(11, 9, 14), uint32], Tensor[(1200), int16], Tensor[(1200), int16], float64) */;
    %266.2
  };
  %267() /* ty=Tensor[(1200), int16] */
}

def @func_5790(%var_5788: Tensor[(1, 480), float64], %var_5789: Tensor[(51480), float32]) -> (Tensor[(1, 480), float64], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(480), float64], Tensor[(1, 260), float32], Tensor[(51480), float32], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64]) {
  %293 = fn (%var_5762: Tensor[(1, 480), float64], %var_5773: Tensor[(51480), float32]) -> (Tensor[(1, 480), float64], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(480), float64], Tensor[(1, 260), float32], Tensor[(51480), float32], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64]) {
    %268 = @func_3686() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */;
    %269 = @func_5703() /* ty=(Tensor[(1200), int16],) */;
    %270 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 260), float32] */, dtype="float32") /* ty=Tensor[(1, 260), float32] */;
    %271 = cast(%var_5773, dtype="float32") /* ty=Tensor[(51480), float32] */;
    %272 = reshape(%270, newshape=[260, 1]) /* ty=Tensor[(260, 1), float32] */;
    %273 = reshape(%271, newshape=[260, 198]) /* ty=Tensor[(260, 198), float32] */;
    %274 = @func_3071(%272, %273) /* ty=(Tensor[(1200), int16], Tensor[(480), float64], float64, Tensor[(260, 198), bool]) */;
    %275 = cast(%var_5762, dtype="float64") /* ty=Tensor[(1, 480), float64] */;
    %276 = reshape(%275, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
    %277 = @func_636(%276) /* ty=(Tensor[(6, 16, 5), float64],) */;
    %278 = %277.0;
    %279 = @func_5077() /* ty=(float64,) */;
    %280 = %279.0;
    %281 = cast(%278, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
    %282 = cast(%280, dtype="float64") /* ty=float64 */;
    %283 = %274.1;
    %284 = cast(%283, dtype="float32") /* ty=Tensor[(480), float32] */;
    %285 = mod(%281, %282) /* ty=Tensor[(6, 16, 5), float64] */;
    %286 = cast(%285, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
    %287 = reshape(%284, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
    %288 = reshape(%286, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
    %289 = @func_2544(%287, %288) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64], float64) */;
    %290 = %268.0;
    %291 = %269.0;
    %292 = %289.2;
    (%var_5762, %290, %291, %283, meta[relay.Constant][15] /* ty=Tensor[(1, 260), float32] */, %var_5773, %285, %292)
  };
  %293(%var_5788, %var_5789) /* ty=(Tensor[(1, 480), float64], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(480), float64], Tensor[(1, 260), float32], Tensor[(51480), float32], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64]) */
}

def @func_5001() -> (Tensor[(1200), int16],) {
  %294 = @func_3256() /* ty=(Tensor[(1200), int16],) */;
  %295 = %294.0;
  (%295,)
}

def @func_1338(%var_1309: Tensor[(14, 14, 5), int32]) -> Tensor[(14, 14, 5), bool] {
  %296 = cast(%var_1309, dtype="bool") /* ty=Tensor[(14, 14, 5), bool] */;
  %297 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(14, 14, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 14, 5), int32] */, dtype="bool") /* ty=Tensor[(14, 14, 5), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%298, %299) /* ty=Tensor[(14, 14, 5), bool] */
}

def @func_6334() -> Tensor[(1200), int16] {
  %301 = fn () -> Tensor[(1200), int16] {
    %300 = @func_5621() /* ty=(Tensor[(1200), int16],) */;
    %300.0
  };
  %301() /* ty=Tensor[(1200), int16] */
}

def @func_7343() -> (Tensor[(1200), int16],) {
  %304 = fn () -> (Tensor[(1200), int16],) {
    %302 = @func_4300() /* ty=(Tensor[(1200), int16],) */;
    %303 = %302.0;
    (%303,)
  };
  %304() /* ty=(Tensor[(1200), int16],) */
}

def @func_7896() -> Tensor[(1200), int16] {
  %306 = fn () -> Tensor[(1200), int16] {
    %305 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
    %305.0
  };
  %306() /* ty=Tensor[(1200), int16] */
}

def @func_3598(%var_3594: Tensor[(51480), float32], %var_3595: Tensor[(60), float32], %var_3596: Tensor[(36), float64], %var_3597: Tensor[(1620), float64]) -> (Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(198), float64], float64, Tensor[(260), float32], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(51480), float32], Tensor[(4, 14, 15), int64], Tensor[(3, 2, 10), bool], Tensor[(60), float32], Tensor[(3, 2, 6), float64], Tensor[(36), float64], Tensor[(1620), float64]) {
  @func_3592(%var_3594, %var_3595, %var_3596, %var_3597) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(198), float64], float64, Tensor[(260), float32], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(51480), float32], Tensor[(4, 14, 15), int64], Tensor[(3, 2, 10), bool], Tensor[(60), float32], Tensor[(3, 2, 6), float64], Tensor[(36), float64], Tensor[(1620), float64]) */
}

def @func_638(%var_637: Tensor[(6, 16, 5), float64]) -> (Tensor[(6, 16, 5), float64],) {
  %309 = fn (%var_631: Tensor[(6, 16, 5), float64]) -> (Tensor[(6, 16, 5), float64],) {
    %307 = cast(%var_631, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
    %308 = sigmoid(%307) /* ty=Tensor[(6, 16, 5), float64] */;
    (%308,)
  };
  %309(%var_637) /* ty=(Tensor[(6, 16, 5), float64],) */
}

def @func_6058(%var_6056: Tensor[(13, 7, 4), float32], %var_6057: Tensor[(60), float32]) -> (Tensor[(13, 7, 4), float32], float64, float64, Tensor[(60), float32]) {
  %321 = fn (%var_6020: Tensor[(13, 7, 4), float32], %var_6037: Tensor[(60), float32]) -> (Tensor[(13, 7, 4), float32], float64, float64, Tensor[(60), float32]) {
    %310 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 7, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 7, 4), float32] */;
    %311 = shape_of(%var_6020, dtype="int32") /* ty=Tensor[(3), int32] */;
    %312 = cast(%var_6020, dtype="float32") /* ty=Tensor[(13, 7, 4), float32] */;
    %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %314 = @func_4041() /* ty=(Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) */;
    %315 = cast(%var_6037, dtype="float32") /* ty=Tensor[(60), float32] */;
    %316 = reshape(%315, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %317 = @func_6005(%316) /* ty=(float64, Tensor[(4, 14, 15), float64], Tensor[(60), float32]) */;
    %318 = divide(%312, %313) /* ty=Tensor[(13, 7, 4), float32] */;
    %319 = %314.1;
    %320 = %317.0;
    (%318, %319, %320, %var_6037)
  };
  %321(%var_6056, %var_6057) /* ty=(Tensor[(13, 7, 4), float32], float64, float64, Tensor[(60), float32]) */
}

def @func_5705() -> (Tensor[(1200), int16],) {
  @func_5703() /* ty=(Tensor[(1200), int16],) */
}

def @func_4278(%var_4267: Tensor[(198), float64]) -> (Tensor[(16), int8], Tensor[(15, 12, 9), float64], Tensor[(44), uint64], Tensor[(60), float32], float64, Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(260), float32], Tensor[(14, 14, 5), bool], Tensor[(980), int32]) {
  %322 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
  %323 = cast(meta[relay.Constant][18] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %324 = cast(meta[relay.Constant][19] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %325 = cast(-7.44961f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %326 = cast(meta[relay.Constant][18] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %327 = reshape(%323, newshape=[2, 11, 2]) /* ty=Tensor[(2, 11, 2), uint64] */;
  %328 = reshape(%324, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %329 = reshape(%325, newshape=[]) /* ty=float64 */;
  %330 = reshape(%326, newshape=[2, 11, 2]) /* ty=Tensor[(2, 11, 2), uint64] */;
  %331 = @func_2905(%327, %328, %329, %330) /* ty=(Tensor[(1200), int16], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(2, 11, 2), float64], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(2, 11, 2), uint64], Tensor[(2, 11, 2), float32]) */;
  %332 = cast(%var_4267, dtype="float64") /* ty=Tensor[(198), float64] */;
  %333 = cast(-7.44961f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %334 = cast(meta[relay.Constant][20] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %335 = reshape(%332, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %336 = reshape(%333, newshape=[]) /* ty=float64 */;
  %337 = reshape(%334, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %338 = @func_2067(%335, %336, %337) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %339 = cast(meta[relay.Constant][21] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %340 = reshape(%339, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %341 = %322.3;
  %342 = %331.1;
  %343 = %338.0;
  %344 = @func_1338(%340) /* ty=Tensor[(14, 14, 5), bool] */;
  (%341, %342, meta[relay.Constant][18] /* ty=Tensor[(44), uint64] */, meta[relay.Constant][19] /* ty=Tensor[(60), float32] */, -7.44961f64 /* ty=float64 */, %343, %var_4267, meta[relay.Constant][20] /* ty=Tensor[(260), float32] */, %344, meta[relay.Constant][21] /* ty=Tensor[(980), int32] */)
}

def @func_6236() -> (Tensor[(9, 15, 10), uint8], Tensor[(14, 14, 5), bool], Tensor[(980), int32], Tensor[(1200), int16]) {
  @func_6234() /* ty=(Tensor[(9, 15, 10), uint8], Tensor[(14, 14, 5), bool], Tensor[(980), int32], Tensor[(1200), int16]) */
}

def @func_8940(%var_8938: Tensor[(16, 14, 3), float32], %var_8939: Tensor[(16, 14, 3), float32]) -> (Tensor[(16, 14, 3), bool], Tensor[(1200), int16], Tensor[(6, 16, 5), bool], Tensor[(480), float64]) {
  %357 = fn (%var_8905: Tensor[(16, 14, 3), float32], %var_8910: Tensor[(16, 14, 3), float32]) -> (Tensor[(16, 14, 3), bool], Tensor[(1200), int16], Tensor[(6, 16, 5), bool], Tensor[(480), float64]) {
    %345 = cast(%var_8905, dtype="float32") /* ty=Tensor[(16, 14, 3), float32] */;
    %346 = sinh(%345) /* ty=Tensor[(16, 14, 3), float32] */;
    %347 = cast(%var_8910, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
    %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
    %349 = cast(%346, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %351 = cast(meta[relay.Constant][22] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %352 = reshape(%351, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
    %353 = @func_5656(%352) /* ty=(Tensor[(6, 16, 5), bool],) */;
    %354 = logical_or(%349, %350) /* ty=Tensor[(16, 14, 3), bool] */;
    %355 = @func_4861() /* ty=Tensor[(1200), int16] */;
    %356 = %353.0;
    (%354, %355, %356, meta[relay.Constant][22] /* ty=Tensor[(480), float64] */)
  };
  %357(%var_8938, %var_8939) /* ty=(Tensor[(16, 14, 3), bool], Tensor[(1200), int16], Tensor[(6, 16, 5), bool], Tensor[(480), float64]) */
}

def @func_2420(%var_2380: Tensor[(9, 15, 10), float64], %var_2413: Tensor[(9, 15, 10), float64]) -> (Tensor[(9, 15, 10), float32], Tensor[(9, 15, 10), uint8]) {
  %358 = cast(%var_2380, dtype="float64") /* ty=Tensor[(9, 15, 10), float64] */;
  %359 = asinh(%358) /* ty=Tensor[(9, 15, 10), float64] */;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(9, 15, 10), float64] */;
  %361 = log(%360) /* ty=Tensor[(9, 15, 10), float64] */;
  %362 = cast(%361, dtype="float32") /* ty=Tensor[(9, 15, 10), float32] */;
  %363 = cast(%var_2413, dtype="uint8") /* ty=Tensor[(9, 15, 10), uint8] */;
  %364 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%361, dtype="uint8") /* ty=Tensor[(9, 15, 10), uint8] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %367 = exp(%362) /* ty=Tensor[(9, 15, 10), float32] */;
  %368 = multiply(%365, %366) /* ty=Tensor[(9, 15, 10), uint8] */;
  (%367, %368)
}

def @func_5161() -> Tensor[(10, 10, 12), bool] {
  %370 = fn () -> Tensor[(10, 10, 12), bool] {
    %369 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
    %369.0
  };
  %370() /* ty=Tensor[(10, 10, 12), bool] */
}

def @func_4761() -> (Tensor[(1200), bool], Tensor[(3, 2, 10), bool], Tensor[(60, 1), float32], float64, Tensor[(10, 10, 12), bool]) {
  @func_4759() /* ty=(Tensor[(1200), bool], Tensor[(3, 2, 10), bool], Tensor[(60, 1), float32], float64, Tensor[(10, 10, 12), bool]) */
}

def @func_3872(%var_3808: uint64, %var_3809: Tensor[(11, 6, 4), uint64], %var_3833: Tensor[(12, 100), uint8]) -> (Tensor[(11, 6, 4), uint64], Tensor[(980), int8], Tensor[(12, 100), uint8], Tensor[(980), int32]) {
  %371 = cast(%var_3808, dtype="uint64") /* ty=uint64 */;
  %372 = cast(%var_3809, dtype="uint64") /* ty=Tensor[(11, 6, 4), uint64] */;
  %373 = cast(%var_3833, dtype="uint8") /* ty=Tensor[(12, 100), uint8] */;
  %374 = cast(meta[relay.Constant][23] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %375 = reshape(%373, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), uint8] */;
  %376 = reshape(%374, newshape=[980]) /* ty=Tensor[(980), int32] */;
  %377 = @func_2777(%375, %376) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(10, 10, 12), float64], Tensor[(980), int8]) */;
  %378 = bitwise_or(%371, %372) /* ty=Tensor[(11, 6, 4), uint64] */;
  %379 = %377.3;
  (%378, %379, %var_3833, meta[relay.Constant][23] /* ty=Tensor[(980), int32] */)
}

def @func_5518(%var_5484: Tensor[(1200), int16], %var_5511: Tensor[(198, 1), float64]) -> (Tensor[(1200), uint16], Tensor[(9, 15, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(198, 1), float64], float64, Tensor[(260), float32]) {
  %380 = @func_4300() /* ty=(Tensor[(1200), int16],) */;
  %381 = %380.0;
  %382 = cast(%var_5484, dtype="uint16") /* ty=Tensor[(1200), uint16] */;
  %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(1), int32] */;
  %384 = cast(%381, dtype="uint16") /* ty=Tensor[(1200), uint16] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %386 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %387 = cast(%var_5511, dtype="float64") /* ty=Tensor[(198, 1), float64] */;
  %388 = cast(3.31696f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %389 = cast(meta[relay.Constant][24] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %390 = reshape(%387, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %391 = reshape(%388, newshape=[]) /* ty=float64 */;
  %392 = reshape(%389, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %393 = @func_2067(%390, %391, %392) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %394 = bitwise_xor(%384, %385) /* ty=Tensor[(1200), uint16] */;
  %395 = %386.1;
  %396 = %393.6;
  (%394, %395, %396, %var_5511, 3.31696f64 /* ty=float64 */, meta[relay.Constant][24] /* ty=Tensor[(260), float32] */)
}

def @func_5703() -> (Tensor[(1200), int16],) {
  %397 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %398 = %397.0;
  (%398,)
}

def @func_7722() -> Tensor[(15, 6, 9), bool] {
  @func_7578() /* ty=Tensor[(15, 6, 9), bool] */
}

def @func_4042() -> (Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) {
  %407 = fn () -> (Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) {
    %399 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
    %400 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 20), float32] */, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
    %401 = cast(-5.36398f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %402 = reshape(%400, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
    %403 = reshape(%401, newshape=[]) /* ty=float64 */;
    %404 = @func_906(%402, %403) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
    %405 = %399.2;
    %406 = %404.2;
    (%405, %406, meta[relay.Constant][25] /* ty=Tensor[(3, 20), float32] */, -5.36398f64 /* ty=float64 */)
  };
  %407() /* ty=(Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) */
}

def @func_2825(%var_2812: Tensor[(15, 12, 9), float64], %var_2813: Tensor[(15, 12, 9), float64]) -> Tensor[(15, 12, 9), float64] {
  %408 = cast(%var_2813, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %409 = shape_of(%var_2812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(%var_2812, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%410, %411) /* ty=Tensor[(15, 12, 9), float64] */
}

def @func_2781(%var_2779: Tensor[(10, 10, 12), uint8], %var_2780: Tensor[(980), int32]) -> (Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(10, 10, 12), float64], Tensor[(980), int8]) {
  @func_2777(%var_2779, %var_2780) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(10, 10, 12), float64], Tensor[(980), int8]) */
}

def @func_2661() -> (Tensor[(1200), int16],) {
  %412 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %413 = %412.2;
  (%413,)
}

def @main(%var_9406: Tensor[(3, 1, 14), float32]) -> (Tensor[(3, 5, 14), float32],) {
  %414 = cast(%var_9406, dtype="float32") /* ty=Tensor[(3, 1, 14), float32] */;
  %415 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(3, 5, 14), float32] */;
  %416 = floor_divide(%414, %415) /* ty=Tensor[(3, 5, 14), float32] */;
  (%416,)
}

def @func_6776(%var_6755: Tensor[(3, 15, 13), int16], %var_6756: Tensor[(3, 15, 13), int16]) -> (Tensor[(3, 15, 13), int16], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) {
  %417 = cast(%var_6756, dtype="int16") /* ty=Tensor[(3, 15, 13), int16] */;
  %418 = shape_of(%var_6755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%var_6755, dtype="int16") /* ty=Tensor[(3, 15, 13), int16] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %421 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %422 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %423 = bitwise_and(%419, %420) /* ty=Tensor[(3, 15, 13), int16] */;
  %424 = %421.1;
  %425 = %422.2;
  (%423, %424, %425)
}

def @func_5597() -> (Tensor[(11, 9, 14), uint32], Tensor[(1200), int16], Tensor[(1200), int16], float64) {
  @func_5595() /* ty=(Tensor[(11, 9, 14), uint32], Tensor[(1200), int16], Tensor[(1200), int16], float64) */
}

def @func_3141() -> Tensor[(1200), int16] {
  @func_3139() /* ty=Tensor[(1200), int16] */
}

def @func_2215(%var_2210: Tensor[(10, 10, 12), int16], %var_2211: Tensor[(10, 10, 12), int16]) -> (Tensor[(10, 10, 12), bool],) {
  %426 = cast(%var_2211, dtype="bool") /* ty=Tensor[(10, 10, 12), bool] */;
  %427 = shape_of(%var_2210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%var_2210, dtype="bool") /* ty=Tensor[(10, 10, 12), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %430 = less(%428, %429) /* ty=Tensor[(10, 10, 12), bool] */;
  (%430,)
}

def @func_6802(%var_6786: Tensor[(16, 5, 16), uint8], %var_6787: Tensor[(16, 5, 16), uint8]) -> Tensor[(16, 5, 16), uint8] {
  %431 = cast(%var_6787, dtype="uint8") /* ty=Tensor[(16, 5, 16), uint8] */;
  %432 = shape_of(%var_6786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%var_6786, dtype="uint8") /* ty=Tensor[(16, 5, 16), uint8] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_and(%433, %434) /* ty=Tensor[(16, 5, 16), uint8] */
}

def @func_7246(%var_7228: Tensor[(980), int32]) -> (Tensor[(1200), int16], Tensor[(14, 14, 5), bool], Tensor[(980), int32], Tensor[(1200), int16]) {
  %435 = @func_3686() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */;
  %436 = cast(%var_7228, dtype="int32") /* ty=Tensor[(980), int32] */;
  %437 = reshape(%436, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %438 = @func_7169() /* ty=(Tensor[(1200), int16],) */;
  %439 = %435.0;
  %440 = @func_1338(%437) /* ty=Tensor[(14, 14, 5), bool] */;
  %441 = %438.0;
  (%439, %440, %var_7228, %441)
}

def @func_4301() -> (Tensor[(1200), int16],) {
  %444 = fn () -> (Tensor[(1200), int16],) {
    %442 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
    %443 = %442.0;
    (%443,)
  };
  %444() /* ty=(Tensor[(1200), int16],) */
}

def @func_5971() -> (Tensor[(6, 16, 5), bool], float64, Tensor[(6, 16, 5), float64], Tensor[(1200), int16]) {
  %462 = fn () -> (Tensor[(6, 16, 5), bool], float64, Tensor[(6, 16, 5), float64], Tensor[(1200), int16]) {
    %445 = @func_4041() /* ty=(Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) */;
    %446 = %445.1;
    %447 = @func_4533() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64], Tensor[(480), float64]) */;
    %448 = %447.1;
    %449 = cast(%446, dtype="bool") /* ty=bool */;
    %450 = cast(%448, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
    %451 = @func_4397() /* ty=(float64,) */;
    %452 = cast(%448, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
    %453 = logical_or(%449, %450) /* ty=Tensor[(6, 16, 5), bool] */;
    %454 = cast(%453, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
    %455 = reshape(%452, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
    %456 = reshape(%454, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
    %457 = @func_2544(%455, %456) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64], float64) */;
    %458 = @func_5595() /* ty=(Tensor[(11, 9, 14), uint32], Tensor[(1200), int16], Tensor[(1200), int16], float64) */;
    %459 = %451.0;
    %460 = %457.1;
    %461 = %458.2;
    (%453, %459, %460, %461)
  };
  %462() /* ty=(Tensor[(6, 16, 5), bool], float64, Tensor[(6, 16, 5), float64], Tensor[(1200), int16]) */
}

def @func_5595() -> (Tensor[(11, 9, 14), uint32], Tensor[(1200), int16], Tensor[(1200), int16], float64) {
  %463 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 9, 14), uint32] */, dtype="uint32") /* ty=Tensor[(11, 9, 14), uint32] */;
  %464 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(11, 9, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 9, 14), uint32] */, dtype="uint32") /* ty=Tensor[(11, 9, 14), uint32] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %467 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
  %468 = @func_5077() /* ty=(float64,) */;
  %469 = add(%465, %466) /* ty=Tensor[(11, 9, 14), uint32] */;
  %470 = %467.0;
  %471 = @func_3139() /* ty=Tensor[(1200), int16] */;
  %472 = %468.0;
  (%469, %470, %471, %472)
}

def @func_1895(%var_1893: Tensor[(13, 10, 2), float32], %var_1894: float64) -> (Tensor[(13, 10, 2), float32], Tensor[(4, 14, 15), float64], float64, Tensor[(4, 14, 15), float64], Tensor[(60), float32]) {
  %484 = fn (%var_1880: Tensor[(13, 10, 2), float32], %var_1885: float64) -> (Tensor[(13, 10, 2), float32], Tensor[(4, 14, 15), float64], float64, Tensor[(4, 14, 15), float64], Tensor[(60), float32]) {
    %473 = cast(%var_1880, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
    %474 = cast(%var_1885, dtype="float64") /* ty=float64 */;
    %475 = reshape(%474, newshape=[]) /* ty=float64 */;
    %476 = cast(meta[relay.Constant][29] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %477 = cast(%var_1885, dtype="float64") /* ty=float64 */;
    %478 = reshape(%476, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
    %479 = reshape(%477, newshape=[]) /* ty=float64 */;
    %480 = @func_906(%478, %479) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
    %481 = atanh(%473) /* ty=Tensor[(13, 10, 2), float32] */;
    %482 = @func_803(%475) /* ty=Tensor[(4, 14, 15), float64] */;
    %483 = %480.1;
    (%481, %482, %var_1885, %483, meta[relay.Constant][29] /* ty=Tensor[(60), float32] */)
  };
  %484(%var_1893, %var_1894) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(4, 14, 15), float64], float64, Tensor[(4, 14, 15), float64], Tensor[(60), float32]) */
}

def @func_5522(%var_5520: Tensor[(1200), int16], %var_5521: Tensor[(198, 1), float64]) -> (Tensor[(1200), uint16], Tensor[(9, 15, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(198, 1), float64], float64, Tensor[(260), float32]) {
  @func_5518(%var_5520, %var_5521) /* ty=(Tensor[(1200), uint16], Tensor[(9, 15, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(198, 1), float64], float64, Tensor[(260), float32]) */
}

def @func_5656(%var_5640: Tensor[(6, 16, 5), float64]) -> (Tensor[(6, 16, 5), bool],) {
  %485 = @func_4533() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64], Tensor[(480), float64]) */;
  %486 = %485.1;
  %487 = cast(%var_5640, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %491 = not_equal(%489, %490) /* ty=Tensor[(6, 16, 5), bool] */;
  (%491,)
}

def @func_6580(%var_6579: uint64) -> (Tensor[(1200), int16], uint64, uint64) {
  %498 = fn (%var_6576: uint64) -> (Tensor[(1200), int16], uint64, uint64) {
    %492 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
    %493 = cast(%var_6576, dtype="uint64") /* ty=uint64 */;
    %494 = reshape(%493, newshape=[]) /* ty=uint64 */;
    %495 = @func_5099(%494) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(980), int32], uint64, Tensor[(264), uint64], Tensor[(2, 600), uint8]) */;
    %496 = %492.2;
    %497 = %495.2;
    (%496, %497, %var_6576)
  };
  %498(%var_6579) /* ty=(Tensor[(1200), int16], uint64, uint64) */
}

def @func_2910(%var_2906: Tensor[(2, 11, 2), uint64], %var_2907: Tensor[(60), float32], %var_2908: float64, %var_2909: Tensor[(2, 11, 2), uint64]) -> (Tensor[(1200), int16], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(2, 11, 2), float64], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(2, 11, 2), uint64], Tensor[(2, 11, 2), float32]) {
  %531 = fn (%var_2840: Tensor[(2, 11, 2), uint64], %var_2891: Tensor[(60), float32], %var_2892: float64, %var_2897: Tensor[(2, 11, 2), uint64]) -> (Tensor[(1200), int16], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(2, 11, 2), float64], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(2, 11, 2), uint64], Tensor[(2, 11, 2), float32]) {
    %499 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
    %500 = cast(meta[relay.Constant][30] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %501 = cast(meta[relay.Constant][30] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %502 = reshape(%500, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
    %503 = reshape(%501, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
    %504 = cast(%var_2840, dtype="bool") /* ty=Tensor[(2, 11, 2), bool] */;
    %505 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(2, 11, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %506 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 11, 2), uint64] */, dtype="bool") /* ty=Tensor[(2, 11, 2), bool] */;
    %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %508 = less_equal(%506, %507) /* ty=Tensor[(2, 11, 2), bool] */;
    %509 = cast(%508, dtype="float64") /* ty=Tensor[(2, 11, 2), float64] */;
    %510 = cast(%var_2891, dtype="float32") /* ty=Tensor[(60), float32] */;
    %511 = cast(%var_2892, dtype="float64") /* ty=float64 */;
    %512 = reshape(%510, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
    %513 = reshape(%511, newshape=[]) /* ty=float64 */;
    %514 = @func_906(%512, %513) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
    %515 = cast(%var_2897, dtype="uint64") /* ty=Tensor[(2, 11, 2), uint64] */;
    %516 = shape_of(%var_2840, dtype="int32") /* ty=Tensor[(3), int32] */;
    %517 = cast(%var_2840, dtype="uint64") /* ty=Tensor[(2, 11, 2), uint64] */;
    %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %519 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 11, 2), uint64] */, dtype="float32") /* ty=Tensor[(2, 11, 2), float32] */;
    %520 = sqrt(%519) /* ty=Tensor[(2, 11, 2), float32] */;
    %521 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 11, 2), float32] */, dtype="float32") /* ty=Tensor[(2, 11, 2), float32] */;
    %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
    %523 = cast(%520, dtype="float32") /* ty=Tensor[(2, 11, 2), float32] */;
    %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %525 = %499.0;
    %526 = @func_2825(%502, %503) /* ty=Tensor[(15, 12, 9), float64] */;
    %527 = cosh(%509) /* ty=Tensor[(2, 11, 2), float64] */;
    %528 = %514.1;
    %529 = minimum(%517, %518) /* ty=Tensor[(2, 11, 2), uint64] */;
    %530 = divide(%523, %524) /* ty=Tensor[(2, 11, 2), float32] */;
    (%525, %526, meta[relay.Constant][30] /* ty=Tensor[(1620), float64] */, %527, %528, %var_2891, %var_2892, %529, %530)
  };
  %531(%var_2906, %var_2907, %var_2908, %var_2909) /* ty=(Tensor[(1200), int16], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(2, 11, 2), float64], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(2, 11, 2), uint64], Tensor[(2, 11, 2), float32]) */
}

def @func_3974(%var_3940: Tensor[(260), float32], %var_3941: Tensor[(480), float64], %var_3942: Tensor[(60), float32]) -> (Tensor[(1200), int16], Tensor[(260), int16], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32], float64, Tensor[(51480), float32], Tensor[(36), float64], Tensor[(1620), float64]) {
  %532 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
  %533 = cast(%var_3940, dtype="float32") /* ty=Tensor[(260), float32] */;
  %534 = cast(%var_3941, dtype="float64") /* ty=Tensor[(480), float64] */;
  %535 = cast(%var_3942, dtype="float32") /* ty=Tensor[(60), float32] */;
  %536 = cast(%var_3941, dtype="float64") /* ty=Tensor[(480), float64] */;
  %537 = reshape(%533, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %538 = reshape(%534, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %539 = reshape(%535, newshape=[3, 20]) /* ty=Tensor[(3, 20), float32] */;
  %540 = reshape(%536, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %541 = @func_3791(%537, %538, %539, %540) /* ty=(Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) */;
  %542 = cast(meta[relay.Constant][33] /* ty=Tensor[(51480), float32] */, dtype="float32") /* ty=Tensor[(51480), float32] */;
  %543 = cast(%var_3942, dtype="float32") /* ty=Tensor[(60), float32] */;
  %544 = cast(meta[relay.Constant][34] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %545 = cast(meta[relay.Constant][35] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %546 = reshape(%542, newshape=[51480]) /* ty=Tensor[(51480), float32] */;
  %547 = reshape(%543, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %548 = reshape(%544, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %549 = reshape(%545, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %550 = @func_3592(%546, %547, %548, %549) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(198), float64], float64, Tensor[(260), float32], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(51480), float32], Tensor[(4, 14, 15), int64], Tensor[(3, 2, 10), bool], Tensor[(60), float32], Tensor[(3, 2, 6), float64], Tensor[(36), float64], Tensor[(1620), float64]) */;
  %551 = %532.0;
  %552 = %541.4;
  %553 = %550.3;
  (%551, %552, %var_3940, %var_3941, %var_3942, %553, meta[relay.Constant][33] /* ty=Tensor[(51480), float32] */, meta[relay.Constant][34] /* ty=Tensor[(36), float64] */, meta[relay.Constant][35] /* ty=Tensor[(1620), float64] */)
}

def @func_5361() -> (Tensor[(1200), float64],) {
  @func_5359() /* ty=(Tensor[(1200), float64],) */
}

def @func_3471(%var_3379: Tensor[(3, 2, 6), float64], %var_3380: Tensor[(3, 2, 6), float64], %var_3384: Tensor[(3, 2, 6), float64], %var_3399: Tensor[(1200), int16], %var_3452: Tensor[(1620), float64]) -> (Tensor[(3, 2, 6), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(3, 2, 6), float64], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(260, 1), float32], Tensor[(980), int32]) {
  %554 = cast(%var_3380, dtype="float64") /* ty=Tensor[(3, 2, 6), float64] */;
  %555 = shape_of(%var_3379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%var_3379, dtype="float64") /* ty=Tensor[(3, 2, 6), float64] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %558 = cast(%var_3399, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %559 = cast(%var_3399, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %560 = reshape(%558, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %561 = reshape(%559, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %562 = @func_2215(%560, %561) /* ty=(Tensor[(10, 10, 12), bool],) */;
  %563 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %564 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %565 = cast(%var_3384, dtype="bool") /* ty=Tensor[(3, 2, 6), bool] */;
  %566 = shape_of(%var_3379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%var_3379, dtype="bool") /* ty=Tensor[(3, 2, 6), bool] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %569 = not_equal(%567, %568) /* ty=Tensor[(3, 2, 6), bool] */;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(3, 2, 6), float32] */;
  %571 = cosh(%570) /* ty=Tensor[(3, 2, 6), float32] */;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(3, 2, 6), float64] */;
  %573 = cast(%var_3452, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %574 = cast(%var_3452, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %575 = reshape(%573, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %576 = reshape(%574, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %577 = cast(meta[relay.Constant][36] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %578 = reshape(%577, newshape=[14, 70]) /* ty=Tensor[(14, 70), int32] */;
  %579 = @func_3355(%578) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(14, 70), int32], Tensor[(4, 14, 15), float64], Tensor[(99, 2), float64], float64, Tensor[(260, 1), float32]) */;
  %580 = floor_mod(%556, %557) /* ty=Tensor[(3, 2, 6), float64] */;
  %581 = %562.0;
  %582 = %563.0;
  %583 = %564.0;
  %584 = log2(%572) /* ty=Tensor[(3, 2, 6), float64] */;
  %585 = @func_2825(%575, %576) /* ty=Tensor[(15, 12, 9), float64] */;
  %586 = %579.6;
  (%580, %581, %var_3399, %582, %583, %584, %585, %var_3452, %586, meta[relay.Constant][36] /* ty=Tensor[(980), int32] */)
}

def @func_6525() -> (Tensor[(1200), int16],) {
  %587 = @func_6401() /* ty=Tensor[(1200), int16] */;
  (%587,)
}

def @func_5659(%var_5657: Tensor[(6, 16, 5), float64]) -> (Tensor[(6, 16, 5), bool],) {
  @func_5656(%var_5657) /* ty=(Tensor[(6, 16, 5), bool],) */
}

def @func_4534() -> (Tensor[(1200), int16], Tensor[(6, 16, 5), float64], Tensor[(480), float64]) {
  %594 = fn () -> (Tensor[(1200), int16], Tensor[(6, 16, 5), float64], Tensor[(480), float64]) {
    %588 = @func_4041() /* ty=(Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) */;
    %589 = cast(meta[relay.Constant][37] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %590 = reshape(%589, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
    %591 = @func_636(%590) /* ty=(Tensor[(6, 16, 5), float64],) */;
    %592 = %588.0;
    %593 = %591.0;
    (%592, %593, meta[relay.Constant][37] /* ty=Tensor[(480), float64] */)
  };
  %594() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64], Tensor[(480), float64]) */
}

def @func_7249(%var_7247: Tensor[(980), int32]) -> (Tensor[(1200), int16], Tensor[(14, 14, 5), bool], Tensor[(980), int32], Tensor[(1200), int16]) {
  @func_7246(%var_7247) /* ty=(Tensor[(1200), int16], Tensor[(14, 14, 5), bool], Tensor[(980), int32], Tensor[(1200), int16]) */
}

def @func_5079() -> (float64,) {
  @func_5077() /* ty=(float64,) */
}

def @func_4452() -> (Tensor[(1200), int16], Tensor[(6, 16, 5), float64]) {
  @func_4450() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64]) */
}

def @func_6007(%var_6006: Tensor[(60), float32]) -> (float64, Tensor[(4, 14, 15), float64], Tensor[(60), float32]) {
  %603 = fn (%var_5986: Tensor[(60), float32]) -> (float64, Tensor[(4, 14, 15), float64], Tensor[(60), float32]) {
    %595 = @func_4397() /* ty=(float64,) */;
    %596 = cast(%var_5986, dtype="float32") /* ty=Tensor[(60), float32] */;
    %597 = %595.0;
    %598 = cast(%597, dtype="float64") /* ty=float64 */;
    %599 = reshape(%596, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
    %600 = reshape(%598, newshape=[]) /* ty=float64 */;
    %601 = @func_906(%599, %600) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
    %602 = %601.1;
    (%597, %602, %var_5986)
  };
  %603(%var_6006) /* ty=(float64, Tensor[(4, 14, 15), float64], Tensor[(60), float32]) */
}

def @func_7671(%var_7664: Tensor[(15, 4, 5), int64]) -> (Tensor[(15, 4, 5), bool],) {
  %604 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 4, 5), int64] */, dtype="bool") /* ty=Tensor[(15, 4, 5), bool] */;
  %605 = shape_of(%var_7664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%var_7664, dtype="bool") /* ty=Tensor[(15, 4, 5), bool] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %608 = greater(%606, %607) /* ty=Tensor[(15, 4, 5), bool] */;
  (%608,)
}

def @func_8201() -> (Tensor[(1200), int16], Tensor[(3, 10, 16), bool], Tensor[(480), float64]) {
  %609 = cast(meta[relay.Constant][39] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %610 = reshape(%609, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float64] */;
  %611 = @func_5039() /* ty=Tensor[(1200), int16] */;
  %612 = @func_8173(%610) /* ty=Tensor[(3, 10, 16), bool] */;
  (%611, %612, meta[relay.Constant][39] /* ty=Tensor[(480), float64] */)
}

def @func_8203() -> (Tensor[(1200), int16], Tensor[(3, 10, 16), bool], Tensor[(480), float64]) {
  @func_8201() /* ty=(Tensor[(1200), int16], Tensor[(3, 10, 16), bool], Tensor[(480), float64]) */
}

def @func_8527() -> (Tensor[(6, 16, 5), bool],) {
  %613 = @func_8506() /* ty=Tensor[(6, 16, 5), bool] */;
  (%613,)
}

def @func_8529() -> (Tensor[(6, 16, 5), bool],) {
  @func_8527() /* ty=(Tensor[(6, 16, 5), bool],) */
}

def @func_5294(%var_5250: Tensor[(14, 16, 4), float64], %var_5282: Tensor[(33, 6), float64]) -> (Tensor[(14, 16, 4), float64], Tensor[(3, 2, 10), bool], float64, Tensor[(33, 6), float64]) {
  %614 = cast(%var_5250, dtype="float64") /* ty=Tensor[(14, 16, 4), float64] */;
  %615 = @func_4759() /* ty=(Tensor[(1200), bool], Tensor[(3, 2, 10), bool], Tensor[(60, 1), float32], float64, Tensor[(10, 10, 12), bool]) */;
  %616 = cast(%var_5282, dtype="float64") /* ty=Tensor[(33, 6), float64] */;
  %617 = reshape(%616, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %618 = @func_4278(%617) /* ty=(Tensor[(16), int8], Tensor[(15, 12, 9), float64], Tensor[(44), uint64], Tensor[(60), float32], float64, Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(260), float32], Tensor[(14, 14, 5), bool], Tensor[(980), int32]) */;
  %619 = atanh(%614) /* ty=Tensor[(14, 16, 4), float64] */;
  %620 = %615.1;
  %621 = %618.4;
  (%619, %620, %621, %var_5282)
}

def @func_5448() -> Tensor[(1200), int16] {
  %623 = fn () -> Tensor[(1200), int16] {
    %622 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
    %622.0
  };
  %623() /* ty=Tensor[(1200), int16] */
}

def @func_1341(%var_1339: Tensor[(14, 14, 5), int32]) -> Tensor[(14, 14, 5), bool] {
  @func_1338(%var_1339) /* ty=Tensor[(14, 14, 5), bool] */
}

def @func_5298(%var_5296: Tensor[(14, 16, 4), float64], %var_5297: Tensor[(33, 6), float64]) -> (Tensor[(14, 16, 4), float64], Tensor[(3, 2, 10), bool], float64, Tensor[(33, 6), float64]) {
  @func_5294(%var_5296, %var_5297) /* ty=(Tensor[(14, 16, 4), float64], Tensor[(3, 2, 10), bool], float64, Tensor[(33, 6), float64]) */
}

def @func_7999() -> (Tensor[(5, 4, 16), float64], Tensor[(1200), int16]) {
  %628 = fn () -> (Tensor[(5, 4, 16), float64], Tensor[(1200), int16]) {
    %624 = cast(meta[relay.Constant][40] /* ty=Tensor[(5, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 4, 16), float64] */;
    %625 = @func_5621() /* ty=(Tensor[(1200), int16],) */;
    %626 = sqrt(%624) /* ty=Tensor[(5, 4, 16), float64] */;
    %627 = %625.0;
    (%626, %627)
  };
  %628() /* ty=(Tensor[(5, 4, 16), float64], Tensor[(1200), int16]) */
}

def @func_4715() -> (Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) {
  @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */
}

def @func_8176(%var_8174: Tensor[(3, 10, 16), float64]) -> Tensor[(3, 10, 16), bool] {
  @func_8173(%var_8174) /* ty=Tensor[(3, 10, 16), bool] */
}

def @func_2707(%var_2705: Tensor[(14, 13, 6), uint64], %var_2706: Tensor[(14, 13, 6), uint64]) -> Tensor[(14, 13, 6), uint64] {
  %633 = fn (%var_2699: Tensor[(14, 13, 6), uint64], %var_2700: Tensor[(14, 13, 6), uint64]) -> Tensor[(14, 13, 6), uint64] {
    %629 = cast(%var_2700, dtype="uint64") /* ty=Tensor[(14, 13, 6), uint64] */;
    %630 = shape_of(%var_2699, dtype="int32") /* ty=Tensor[(3), int32] */;
    %631 = cast(%var_2699, dtype="uint64") /* ty=Tensor[(14, 13, 6), uint64] */;
    %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_xor(%631, %632) /* ty=Tensor[(14, 13, 6), uint64] */
  };
  %633(%var_2705, %var_2706) /* ty=Tensor[(14, 13, 6), uint64] */
}

def @func_3216() -> (Tensor[(1200), int16],) {
  %634 = @func_2661() /* ty=(Tensor[(1200), int16],) */;
  %635 = %634.0;
  (%635,)
}

def @func_4205(%var_4204: Tensor[(260), float32]) -> (Tensor[(1200), int16], Tensor[(480), float64], Tensor[(260), float32], Tensor[(51480, 1), float32]) {
  %644 = fn (%var_4195: Tensor[(260), float32]) -> (Tensor[(1200), int16], Tensor[(480), float64], Tensor[(260), float32], Tensor[(51480, 1), float32]) {
    %636 = @func_3256() /* ty=(Tensor[(1200), int16],) */;
    %637 = cast(%var_4195, dtype="float32") /* ty=Tensor[(260), float32] */;
    %638 = cast(meta[relay.Constant][41] /* ty=Tensor[(51480, 1), float32] */, dtype="float32") /* ty=Tensor[(51480, 1), float32] */;
    %639 = reshape(%637, newshape=[260, 1]) /* ty=Tensor[(260, 1), float32] */;
    %640 = reshape(%638, newshape=[260, 198]) /* ty=Tensor[(260, 198), float32] */;
    %641 = @func_3071(%639, %640) /* ty=(Tensor[(1200), int16], Tensor[(480), float64], float64, Tensor[(260, 198), bool]) */;
    %642 = %636.0;
    %643 = %641.1;
    (%642, %643, %var_4195, meta[relay.Constant][41] /* ty=Tensor[(51480, 1), float32] */)
  };
  %644(%var_4204) /* ty=(Tensor[(1200), int16], Tensor[(480), float64], Tensor[(260), float32], Tensor[(51480, 1), float32]) */
}

def @func_8859(%var_8857: Tensor[(10, 4, 3), int16], %var_8858: Tensor[(10, 4, 3), int16]) -> (Tensor[(10, 4, 3), int16], Tensor[(10, 10, 12), bool]) {
  %651 = fn (%var_8840: Tensor[(10, 4, 3), int16], %var_8841: Tensor[(10, 4, 3), int16]) -> (Tensor[(10, 4, 3), int16], Tensor[(10, 10, 12), bool]) {
    %645 = cast(%var_8841, dtype="int16") /* ty=Tensor[(10, 4, 3), int16] */;
    %646 = shape_of(%var_8840, dtype="int32") /* ty=Tensor[(3), int32] */;
    %647 = cast(%var_8840, dtype="int16") /* ty=Tensor[(10, 4, 3), int16] */;
    %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %649 = logical_xor(%647, %648) /* ty=Tensor[(10, 4, 3), int16] */;
    %650 = @func_5160() /* ty=Tensor[(10, 10, 12), bool] */;
    (%649, %650)
  };
  %651(%var_8857, %var_8858) /* ty=(Tensor[(10, 4, 3), int16], Tensor[(10, 10, 12), bool]) */
}

def @func_4862() -> Tensor[(1200), int16] {
  %653 = fn () -> Tensor[(1200), int16] {
    %652 = @func_2661() /* ty=(Tensor[(1200), int16],) */;
    %652.0
  };
  %653() /* ty=Tensor[(1200), int16] */
}

def @func_7007() -> (float64,) {
  %656 = fn () -> (float64,) {
    %654 = @func_6706() /* ty=(Tensor[(1200), int16], float64) */;
    %655 = %654.1;
    (%655,)
  };
  %656() /* ty=(float64,) */
}

def @func_3686() -> (Tensor[(1200), int16], Tensor[(1200), int16]) {
  %657 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
  %658 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %659 = %657.0;
  %660 = %658.0;
  (%659, %660)
}

def @func_2829(%var_2827: Tensor[(15, 12, 9), float64], %var_2828: Tensor[(15, 12, 9), float64]) -> Tensor[(15, 12, 9), float64] {
  @func_2825(%var_2827, %var_2828) /* ty=Tensor[(15, 12, 9), float64] */
}

def @func_3074(%var_3072: Tensor[(260, 1), float32], %var_3073: Tensor[(260, 198), float32]) -> (Tensor[(1200), int16], Tensor[(480), float64], float64, Tensor[(260, 198), bool]) {
  %681 = fn (%var_3040: Tensor[(260, 1), float32], %var_3063: Tensor[(260, 198), float32]) -> (Tensor[(1200), int16], Tensor[(480), float64], float64, Tensor[(260, 198), bool]) {
    %661 = @func_2661() /* ty=(Tensor[(1200), int16],) */;
    %662 = cast(meta[relay.Constant][42] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
    %663 = cast(-2.68632f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %664 = cast(%var_3040, dtype="float32") /* ty=Tensor[(260, 1), float32] */;
    %665 = reshape(%662, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
    %666 = reshape(%663, newshape=[]) /* ty=float64 */;
    %667 = reshape(%664, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %668 = @func_2067(%665, %666, %667) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
    %669 = cast(meta[relay.Constant][42] /* ty=Tensor[(198), float64] */, dtype="uint32") /* ty=Tensor[(198), uint32] */;
    %670 = cast(%var_3040, dtype="uint32") /* ty=Tensor[(260, 1), uint32] */;
    %671 = right_shift(%669, %670) /* ty=Tensor[(260, 198), uint32] */;
    %672 = cast(%671, dtype="float32") /* ty=Tensor[(260, 198), float32] */;
    %673 = log(%672) /* ty=Tensor[(260, 198), float32] */;
    %674 = cast(%var_3063, dtype="bool") /* ty=Tensor[(260, 198), bool] */;
    %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(2), int32] */;
    %676 = cast(%673, dtype="bool") /* ty=Tensor[(260, 198), bool] */;
    %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %678 = %661.0;
    %679 = %668.7;
    %680 = logical_or(%676, %677) /* ty=Tensor[(260, 198), bool] */;
    (%678, %679, -2.68632f64 /* ty=float64 */, %680)
  };
  %681(%var_3072, %var_3073) /* ty=(Tensor[(1200), int16], Tensor[(480), float64], float64, Tensor[(260, 198), bool]) */
}

def @func_8043() -> (Tensor[(1200), int16],) {
  %682 = @func_5621() /* ty=(Tensor[(1200), int16],) */;
  %683 = %682.0;
  (%683,)
}

def @func_8647() -> (Tensor[(6, 16, 5), bool], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) {
  %684 = @func_8527() /* ty=(Tensor[(6, 16, 5), bool],) */;
  %685 = cast(meta[relay.Constant][43] /* ty=Tensor[(1200), int16] */, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %686 = cast(meta[relay.Constant][43] /* ty=Tensor[(1200), int16] */, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %687 = reshape(%685, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %688 = reshape(%686, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %689 = @func_2215(%687, %688) /* ty=(Tensor[(10, 10, 12), bool],) */;
  %690 = %684.0;
  %691 = %689.0;
  (%690, %691, meta[relay.Constant][43] /* ty=Tensor[(1200), int16] */)
}

def @func_2548(%var_2546: Tensor[(3, 10, 16), float32], %var_2547: Tensor[(3, 10, 16), float32]) -> (Tensor[(3, 10, 16), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64], float64) {
  @func_2544(%var_2546, %var_2547) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64], float64) */
}

def @func_3355(%var_3312: Tensor[(14, 70), int32]) -> (Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(14, 70), int32], Tensor[(4, 14, 15), float64], Tensor[(99, 2), float64], float64, Tensor[(260, 1), float32]) {
  %692 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %693 = @func_3256() /* ty=(Tensor[(1200), int16],) */;
  %694 = cast(%var_3312, dtype="int32") /* ty=Tensor[(14, 70), int32] */;
  %695 = reshape(%694, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %696 = @func_1338(%695) /* ty=Tensor[(14, 14, 5), bool] */;
  %697 = cast(%696, dtype="int32") /* ty=Tensor[(14, 14, 5), int32] */;
  %698 = shape_of(%var_3312, dtype="int32") /* ty=Tensor[(2), int32] */;
  %699 = cast(%var_3312, dtype="int32") /* ty=Tensor[(14, 70), int32] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %701 = cast(meta[relay.Constant][44] /* ty=Tensor[(99, 2), float64] */, dtype="float64") /* ty=Tensor[(99, 2), float64] */;
  %702 = cast(0.886336f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %703 = cast(meta[relay.Constant][45] /* ty=Tensor[(260, 1), float32] */, dtype="float32") /* ty=Tensor[(260, 1), float32] */;
  %704 = reshape(%701, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %705 = reshape(%702, newshape=[]) /* ty=float64 */;
  %706 = reshape(%703, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %707 = @func_2067(%704, %705, %706) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %708 = %692.0;
  %709 = %693.0;
  %710 = add(%699, %700) /* ty=Tensor[(14, 70), int32] */;
  %711 = %707.2;
  (%708, %709, %710, %711, meta[relay.Constant][44] /* ty=Tensor[(99, 2), float64] */, 0.886336f64 /* ty=float64 */, meta[relay.Constant][45] /* ty=Tensor[(260, 1), float32] */)
}

def @func_4713() -> (Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) {
  %712 = @func_4450() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64]) */;
  %713 = cast(meta[relay.Constant][46] /* ty=Tensor[(9, 150), float64] */, dtype="float64") /* ty=Tensor[(9, 150), float64] */;
  %714 = cast(meta[relay.Constant][46] /* ty=Tensor[(9, 150), float64] */, dtype="float64") /* ty=Tensor[(9, 150), float64] */;
  %715 = reshape(%713, newshape=[9, 15, 10]) /* ty=Tensor[(9, 15, 10), float64] */;
  %716 = reshape(%714, newshape=[9, 15, 10]) /* ty=Tensor[(9, 15, 10), float64] */;
  %717 = @func_2420(%715, %716) /* ty=(Tensor[(9, 15, 10), float32], Tensor[(9, 15, 10), uint8]) */;
  %718 = %712.1;
  %719 = cast(%718, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
  %720 = cast(%718, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
  %721 = reshape(%719, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
  %722 = reshape(%720, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
  %723 = @func_2544(%721, %722) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64], float64) */;
  %724 = %723.0;
  %725 = cast(%724, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %726 = %717.1;
  %727 = sin(%725) /* ty=Tensor[(3, 10, 16), float64] */;
  (%718, %726, meta[relay.Constant][46] /* ty=Tensor[(9, 150), float64] */, %727)
}

def @func_7406() -> Tensor[(1200), int16] {
  %728 = fn () -> Tensor[(1200), int16] {
    @func_6658() /* ty=Tensor[(1200), int16] */
  };
  %728() /* ty=Tensor[(1200), int16] */
}

def @func_8721() -> (Tensor[(1200), int16],) {
  @func_8719() /* ty=(Tensor[(1200), int16],) */
}

def @func_8173(%var_8138: Tensor[(3, 10, 16), float64]) -> Tensor[(3, 10, 16), bool] {
  %729 = cast(%var_8138, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %730 = rsqrt(%729) /* ty=Tensor[(3, 10, 16), float64] */;
  %731 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %732 = %731.3;
  %733 = cast(%var_8138, dtype="uint64") /* ty=Tensor[(3, 10, 16), uint64] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%732, dtype="uint64") /* ty=Tensor[(3, 10, 16), uint64] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %737 = bitwise_and(%735, %736) /* ty=Tensor[(3, 10, 16), uint64] */;
  %738 = cast(%737, dtype="bool") /* ty=Tensor[(3, 10, 16), bool] */;
  %739 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%730, dtype="bool") /* ty=Tensor[(3, 10, 16), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%740, %741) /* ty=Tensor[(3, 10, 16), bool] */
}

def @func_4467(%var_4466: Tensor[(8, 8, 13), int64]) -> Tensor[(8, 8, 13), bool] {
  %744 = fn (%var_4454: Tensor[(8, 8, 13), int64]) -> Tensor[(8, 8, 13), bool] {
    %742 = cast(-5 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %743 = cast(%var_4454, dtype="bool") /* ty=Tensor[(8, 8, 13), bool] */;
    less(%742, %743) /* ty=Tensor[(8, 8, 13), bool] */
  };
  %744(%var_4466) /* ty=Tensor[(8, 8, 13), bool] */
}

def @func_7950() -> (Tensor[(1200), int16],) {
  %747 = fn () -> (Tensor[(1200), int16],) {
    %745 = @func_5001() /* ty=(Tensor[(1200), int16],) */;
    %746 = %745.0;
    (%746,)
  };
  %747() /* ty=(Tensor[(1200), int16],) */
}

def @func_8056(%var_8053: Tensor[(192), int16]) -> (Tensor[(16), int8], Tensor[(16, 2, 6), bool], Tensor[(12), int16], Tensor[(192), int16]) {
  %748 = @func_4817() /* ty=(Tensor[(16), int8],) */;
  %749 = cast(meta[relay.Constant][47] /* ty=Tensor[(12), int16] */, dtype="int16") /* ty=Tensor[(12), int16] */;
  %750 = cast(%var_8053, dtype="int16") /* ty=Tensor[(192), int16] */;
  %751 = reshape(%749, newshape=[1, 2, 6]) /* ty=Tensor[(1, 2, 6), int16] */;
  %752 = reshape(%750, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), int16] */;
  %753 = @func_4613(%751, %752) /* ty=(Tensor[(16, 2, 6), int16], Tensor[(16, 2, 6), bool]) */;
  %754 = %748.0;
  %755 = %753.1;
  (%754, %755, meta[relay.Constant][47] /* ty=Tensor[(12), int16] */, %var_8053)
}

def @func_6780(%var_6778: Tensor[(3, 15, 13), int16], %var_6779: Tensor[(3, 15, 13), int16]) -> (Tensor[(3, 15, 13), int16], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) {
  @func_6776(%var_6778, %var_6779) /* ty=(Tensor[(3, 15, 13), int16], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */
}

def @func_7170() -> (Tensor[(1200), int16],) {
  %758 = fn () -> (Tensor[(1200), int16],) {
    %756 = @func_4533() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64], Tensor[(480), float64]) */;
    %757 = %756.0;
    (%757,)
  };
  %758() /* ty=(Tensor[(1200), int16],) */
}

def @func_8962() -> Tensor[(6, 16, 5), float64] {
  %759 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
  %759.2
}

def @func_3292() -> (Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) {
  %772 = fn () -> (Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) {
    %760 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
    %761 = %760.1;
    %762 = cast(%761, dtype="int16") /* ty=Tensor[(10, 10, 12), int16] */;
    %763 = cast(%761, dtype="int16") /* ty=Tensor[(10, 10, 12), int16] */;
    %764 = reshape(%762, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
    %765 = reshape(%763, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
    %766 = @func_2215(%764, %765) /* ty=(Tensor[(10, 10, 12), bool],) */;
    %767 = cast(meta[relay.Constant][48] /* ty=Tensor[(16), int8] */, dtype="int8") /* ty=Tensor[(16), int8] */;
    %768 = reshape(%767, newshape=[16, 1]) /* ty=Tensor[(16, 1), int8] */;
    %769 = @func_2960(%768) /* ty=(Tensor[(16, 1), int8], Tensor[(6, 16, 5), float64], Tensor[(480), float32]) */;
    %770 = %766.0;
    %771 = %769.1;
    (%761, %770, %771, meta[relay.Constant][48] /* ty=Tensor[(16), int8] */)
  };
  %772() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */
}

def @func_3791(%var_3694: Tensor[(260), float32], %var_3718: Tensor[(480), float64], %var_3735: Tensor[(3, 20), float32], %var_3742: Tensor[(6, 16, 5), float64]) -> (Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) {
  %773 = @func_3256() /* ty=(Tensor[(1200), int16],) */;
  %774 = cast(meta[relay.Constant][49] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %775 = cast(9.82924f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %776 = cast(%var_3694, dtype="float32") /* ty=Tensor[(260), float32] */;
  %777 = reshape(%774, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %778 = reshape(%775, newshape=[]) /* ty=float64 */;
  %779 = reshape(%776, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %780 = @func_2067(%777, %778, %779) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %781 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
  %782 = cast(%var_3694, dtype="int16") /* ty=Tensor[(260), int16] */;
  %783 = cast(9.82924f64 /* ty=float64 */, dtype="int16") /* ty=int16 */;
  %784 = cast(%var_3718, dtype="float64") /* ty=Tensor[(480), float64] */;
  %785 = reshape(%784, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %786 = @func_636(%785) /* ty=(Tensor[(6, 16, 5), float64],) */;
  %787 = %786.0;
  %788 = cast(%var_3742, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%787, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %792 = cast(9.82924f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %793 = reshape(%792, newshape=[]) /* ty=float64 */;
  %794 = cast(meta[relay.Constant][50] /* ty=Tensor[(16), int8] */, dtype="int8") /* ty=Tensor[(16), int8] */;
  %795 = reshape(%794, newshape=[16, 1]) /* ty=Tensor[(16, 1), int8] */;
  %796 = @func_2960(%795) /* ty=(Tensor[(16, 1), int8], Tensor[(6, 16, 5), float64], Tensor[(480), float32]) */;
  %797 = %781.0;
  %798 = cast(%797, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %799 = cast(meta[relay.Constant][51] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %800 = reshape(%798, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), uint8] */;
  %801 = reshape(%799, newshape=[980]) /* ty=Tensor[(980), int32] */;
  %802 = @func_2777(%800, %801) /* ty=(Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(10, 10, 12), float64], Tensor[(980), int8]) */;
  %803 = cast(%var_3735, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
  %804 = cast(9.82924f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %805 = reshape(%803, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %806 = reshape(%804, newshape=[]) /* ty=float64 */;
  %807 = @func_906(%805, %806) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %808 = %807.0;
  %809 = cast(%808, dtype="bool") /* ty=Tensor[(3, 2, 10), bool] */;
  %810 = shape_of(%var_3735, dtype="int32") /* ty=Tensor[(2), int32] */;
  %811 = cast(%var_3735, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %813 = %773.0;
  %814 = %780.0;
  %815 = bitwise_and(%782, %783) /* ty=Tensor[(260), int16] */;
  %816 = logical_and(%790, %791) /* ty=Tensor[(6, 16, 5), bool] */;
  %817 = @func_803(%793) /* ty=Tensor[(4, 14, 15), float64] */;
  %818 = %796.2;
  %819 = %802.0;
  %820 = less_equal(%811, %812) /* ty=Tensor[(3, 20), bool] */;
  (%813, %814, meta[relay.Constant][49] /* ty=Tensor[(198), float64] */, %797, %815, %var_3718, %816, %817, %818, meta[relay.Constant][50] /* ty=Tensor[(16), int8] */, %819, meta[relay.Constant][51] /* ty=Tensor[(980), int32] */, %820)
}

def @func_3688() -> (Tensor[(1200), int16], Tensor[(1200), int16]) {
  @func_3686() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */
}

def @func_5205() -> Tensor[(1200), int16] {
  @func_5203() /* ty=Tensor[(1200), int16] */
}

def @func_4399() -> (float64,) {
  @func_4397() /* ty=(float64,) */
}

def @func_7870() -> Tensor[(1200), int16] {
  %822 = fn () -> Tensor[(1200), int16] {
    %821 = @func_5595() /* ty=(Tensor[(11, 9, 14), uint32], Tensor[(1200), int16], Tensor[(1200), int16], float64) */;
    %821.1
  };
  %822() /* ty=Tensor[(1200), int16] */
}

def @func_5622() -> (Tensor[(1200), int16],) {
  %824 = fn () -> (Tensor[(1200), int16],) {
    %823 = @func_5039() /* ty=Tensor[(1200), int16] */;
    (%823,)
  };
  %824() /* ty=(Tensor[(1200), int16],) */
}

def @func_8506() -> Tensor[(6, 16, 5), bool] {
  %825 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %826 = %825.0;
  %827 = cast(%826, dtype="float32") /* ty=Tensor[(6, 16, 5), float32] */;
  %828 = log2(%827) /* ty=Tensor[(6, 16, 5), float32] */;
  %829 = cast(%826, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %830 = shape_of(%828, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%828, dtype="bool") /* ty=Tensor[(6, 16, 5), bool] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%831, %832) /* ty=Tensor[(6, 16, 5), bool] */
}

def @func_7674(%var_7672: Tensor[(15, 4, 5), int64]) -> (Tensor[(15, 4, 5), bool],) {
  @func_7671(%var_7672) /* ty=(Tensor[(15, 4, 5), bool],) */
}

def @func_8885() -> (Tensor[(1200), int16],) {
  @func_8883() /* ty=(Tensor[(1200), int16],) */
}

def @func_3592(%var_3556: Tensor[(51480), float32], %var_3564: Tensor[(60), float32], %var_3573: Tensor[(36), float64], %var_3574: Tensor[(1620), float64]) -> (Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(198), float64], float64, Tensor[(260), float32], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(51480), float32], Tensor[(4, 14, 15), int64], Tensor[(3, 2, 10), bool], Tensor[(60), float32], Tensor[(3, 2, 6), float64], Tensor[(36), float64], Tensor[(1620), float64]) {
  %833 = @func_3256() /* ty=(Tensor[(1200), int16],) */;
  %834 = @func_3216() /* ty=(Tensor[(1200), int16],) */;
  %835 = @func_3256() /* ty=(Tensor[(1200), int16],) */;
  %836 = cast(meta[relay.Constant][53] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %837 = cast(%var_3556, dtype="float32") /* ty=Tensor[(51480), float32] */;
  %838 = reshape(%836, newshape=[260, 1]) /* ty=Tensor[(260, 1), float32] */;
  %839 = reshape(%837, newshape=[260, 198]) /* ty=Tensor[(260, 198), float32] */;
  %840 = @func_3071(%838, %839) /* ty=(Tensor[(1200), int16], Tensor[(480), float64], float64, Tensor[(260, 198), bool]) */;
  %841 = cast(meta[relay.Constant][52] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %842 = cast(3.90277f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %843 = cast(meta[relay.Constant][53] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %844 = reshape(%841, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %845 = reshape(%842, newshape=[]) /* ty=float64 */;
  %846 = reshape(%843, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %847 = @func_2067(%844, %845, %846) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %848 = %847.2;
  %849 = cast(3.90277f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %850 = reshape(%849, newshape=[]) /* ty=float64 */;
  %851 = @func_803(%850) /* ty=Tensor[(4, 14, 15), float64] */;
  %852 = cast(%851, dtype="int64") /* ty=Tensor[(4, 14, 15), int64] */;
  %853 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%848, dtype="int64") /* ty=Tensor[(4, 14, 15), int64] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %856 = cast(%var_3564, dtype="float32") /* ty=Tensor[(60), float32] */;
  %857 = cast(3.90277f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %858 = reshape(%856, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %859 = reshape(%857, newshape=[]) /* ty=float64 */;
  %860 = @func_906(%858, %859) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %861 = cast(%var_3573, dtype="float64") /* ty=Tensor[(36), float64] */;
  %862 = cast(%var_3573, dtype="float64") /* ty=Tensor[(36), float64] */;
  %863 = cast(%var_3573, dtype="float64") /* ty=Tensor[(36), float64] */;
  %864 = %833.0;
  %865 = cast(%864, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %866 = cast(%var_3574, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %867 = reshape(%861, newshape=[3, 2, 6]) /* ty=Tensor[(3, 2, 6), float64] */;
  %868 = reshape(%862, newshape=[3, 2, 6]) /* ty=Tensor[(3, 2, 6), float64] */;
  %869 = reshape(%863, newshape=[3, 2, 6]) /* ty=Tensor[(3, 2, 6), float64] */;
  %870 = reshape(%865, newshape=[1200]) /* ty=Tensor[(1200), int16] */;
  %871 = reshape(%866, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %872 = @func_3471(%867, %868, %869, %870, %871) /* ty=(Tensor[(3, 2, 6), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(3, 2, 6), float64], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(260, 1), float32], Tensor[(980), int32]) */;
  %873 = %834.0;
  %874 = %835.0;
  %875 = %840.0;
  %876 = minimum(%854, %855) /* ty=Tensor[(4, 14, 15), int64] */;
  %877 = %860.0;
  %878 = %872.5;
  (%864, %873, meta[relay.Constant][52] /* ty=Tensor[(198), float64] */, 3.90277f64 /* ty=float64 */, meta[relay.Constant][53] /* ty=Tensor[(260), float32] */, %874, %875, %var_3556, %876, %877, %var_3564, %878, %var_3573, %var_3574)
}

def @func_8378(%var_8377: Tensor[(15, 14), int16]) -> Tensor[(15, 14), int16] {
  %883 = fn (%var_8372: Tensor[(15, 14), int16]) -> Tensor[(15, 14), int16] {
    %879 = cast(%var_8372, dtype="int16") /* ty=Tensor[(15, 14), int16] */;
    %880 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(15, 14), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %881 = cast(meta[relay.Constant][54] /* ty=Tensor[(15, 14), int16] */, dtype="int16") /* ty=Tensor[(15, 14), int16] */;
    %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    logical_xor(%881, %882) /* ty=Tensor[(15, 14), int16] */
  };
  %883(%var_8377) /* ty=Tensor[(15, 14), int16] */
}

def @func_3139() -> Tensor[(1200), int16] {
  %884 = @func_2335() /* ty=(Tensor[(1200), int16],) */;
  %884.0
}

def @func_3478(%var_3473: Tensor[(3, 2, 6), float64], %var_3474: Tensor[(3, 2, 6), float64], %var_3475: Tensor[(3, 2, 6), float64], %var_3476: Tensor[(1200), int16], %var_3477: Tensor[(1620), float64]) -> (Tensor[(3, 2, 6), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(3, 2, 6), float64], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(260, 1), float32], Tensor[(980), int32]) {
  @func_3471(%var_3473, %var_3474, %var_3475, %var_3476, %var_3477) /* ty=(Tensor[(3, 2, 6), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(1200), int16], Tensor[(3, 2, 6), float64], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(260, 1), float32], Tensor[(980), int32]) */
}

def @func_4650(%var_4648: Tensor[(1620), float64]) -> (Tensor[(10, 10, 12), bool], Tensor[(15, 12, 9), float64], Tensor[(1620), float64]) {
  %885 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %886 = cast(%var_4648, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %887 = cast(%var_4648, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %888 = reshape(%886, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %889 = reshape(%887, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %890 = %885.1;
  %891 = @func_2825(%888, %889) /* ty=Tensor[(15, 12, 9), float64] */;
  (%890, %891, %var_4648)
}

def @func_8059(%var_8057: Tensor[(192), int16]) -> (Tensor[(16), int8], Tensor[(16, 2, 6), bool], Tensor[(12), int16], Tensor[(192), int16]) {
  @func_8056(%var_8057) /* ty=(Tensor[(16), int8], Tensor[(16, 2, 6), bool], Tensor[(12), int16], Tensor[(192), int16]) */
}

def @func_8045() -> (Tensor[(1200), int16],) {
  @func_8043() /* ty=(Tensor[(1200), int16],) */
}

def @func_8964() -> Tensor[(6, 16, 5), float64] {
  @func_8962() /* ty=Tensor[(6, 16, 5), float64] */
}

def @func_7748() -> Tensor[(10, 10, 12), bool] {
  %893 = fn () -> Tensor[(10, 10, 12), bool] {
    %892 = @func_3291() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(10, 10, 12), bool], Tensor[(6, 16, 5), float64], Tensor[(16), int8]) */;
    %892.1
  };
  %893() /* ty=Tensor[(10, 10, 12), bool] */
}

def @func_6806(%var_6804: Tensor[(16, 5, 16), uint8], %var_6805: Tensor[(16, 5, 16), uint8]) -> Tensor[(16, 5, 16), uint8] {
  @func_6802(%var_6804, %var_6805) /* ty=Tensor[(16, 5, 16), uint8] */
}

def @func_6234() -> (Tensor[(9, 15, 10), uint8], Tensor[(14, 14, 5), bool], Tensor[(980), int32], Tensor[(1200), int16]) {
  %894 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %895 = cast(meta[relay.Constant][55] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %896 = reshape(%895, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %897 = @func_4041() /* ty=(Tensor[(1200), int16], float64, Tensor[(3, 20), float32], float64) */;
  %898 = %894.1;
  %899 = @func_1338(%896) /* ty=Tensor[(14, 14, 5), bool] */;
  %900 = %897.0;
  (%898, %899, meta[relay.Constant][55] /* ty=Tensor[(980), int32] */, %900)
}

def @func_6132(%var_6129: Tensor[(28, 32), float64], %var_6130: Tensor[(198), float64]) -> (Tensor[(6, 16, 5), float64], Tensor[(1200), int16], Tensor[(3, 2, 10), bool], Tensor[(28, 32), float64], Tensor[(198), float64]) {
  %901 = @func_4533() /* ty=(Tensor[(1200), int16], Tensor[(6, 16, 5), float64], Tensor[(480), float64]) */;
  %902 = cast(%var_6129, dtype="float64") /* ty=Tensor[(28, 32), float64] */;
  %903 = cast(%var_6130, dtype="float64") /* ty=Tensor[(198), float64] */;
  %904 = reshape(%902, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), float64] */;
  %905 = reshape(%903, newshape=[33, 6]) /* ty=Tensor[(33, 6), float64] */;
  %906 = @func_5294(%904, %905) /* ty=(Tensor[(14, 16, 4), float64], Tensor[(3, 2, 10), bool], float64, Tensor[(33, 6), float64]) */;
  %907 = %901.1;
  %908 = @func_4861() /* ty=Tensor[(1200), int16] */;
  %909 = %906.1;
  (%907, %908, %909, %var_6129, %var_6130)
}

def @func_8090() -> float64 {
  @func_8088() /* ty=float64 */
}

def @func_5894(%var_5893: Tensor[(480), float64]) -> (Tensor[(1200), int16], Tensor[(16), int8], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32]) {
  %922 = fn (%var_5888: Tensor[(480), float64]) -> (Tensor[(1200), int16], Tensor[(16), int8], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32]) {
    %910 = @func_3686() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */;
    %911 = cast(meta[relay.Constant][56] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
    %912 = cast(%var_5888, dtype="float64") /* ty=Tensor[(480), float64] */;
    %913 = cast(meta[relay.Constant][57] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %914 = cast(%var_5888, dtype="float64") /* ty=Tensor[(480), float64] */;
    %915 = reshape(%911, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %916 = reshape(%912, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %917 = reshape(%913, newshape=[3, 20]) /* ty=Tensor[(3, 20), float32] */;
    %918 = reshape(%914, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
    %919 = @func_3791(%915, %916, %917, %918) /* ty=(Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) */;
    %920 = %910.0;
    %921 = %919.9;
    (%920, %921, meta[relay.Constant][56] /* ty=Tensor[(260), float32] */, %var_5888, meta[relay.Constant][57] /* ty=Tensor[(60), float32] */)
  };
  %922(%var_5893) /* ty=(Tensor[(1200), int16], Tensor[(16), int8], Tensor[(260), float32], Tensor[(480), float64], Tensor[(60), float32]) */
}

def @func_9076() -> (Tensor[(1200), int16], Tensor[(1200), int16]) {
  %926 = fn () -> (Tensor[(1200), int16], Tensor[(1200), int16]) {
    %923 = @func_9058() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */;
    %924 = @func_6333() /* ty=Tensor[(1200), int16] */;
    %925 = %923.1;
    (%924, %925)
  };
  %926() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */
}

def @func_7578() -> Tensor[(15, 6, 9), bool] {
  %927 = cast(meta[relay.Constant][58] /* ty=Tensor[(15, 6, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 9), float32] */;
  %928 = log2(%927) /* ty=Tensor[(15, 6, 9), float32] */;
  %929 = cast(meta[relay.Constant][58] /* ty=Tensor[(15, 6, 9), float32] */, dtype="float64") /* ty=Tensor[(15, 6, 9), float64] */;
  %930 = log10(%929) /* ty=Tensor[(15, 6, 9), float64] */;
  %931 = cast(%930, dtype="bool") /* ty=Tensor[(15, 6, 9), bool] */;
  %932 = shape_of(%928, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%928, dtype="bool") /* ty=Tensor[(15, 6, 9), bool] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%933, %934) /* ty=Tensor[(15, 6, 9), bool] */
}

def @func_6461(%var_6424: Tensor[(9, 15, 10), uint8], %var_6438: Tensor[(9, 15, 10), uint64]) -> (Tensor[(9, 15, 10), int16], Tensor[(9, 15, 10), uint32], Tensor[(9, 15, 10), float32]) {
  %935 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
  %936 = %935.1;
  %937 = cast(%936, dtype="int16") /* ty=Tensor[(9, 15, 10), int16] */;
  %938 = shape_of(%var_6424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%var_6424, dtype="int16") /* ty=Tensor[(9, 15, 10), int16] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %941 = cast(%var_6424, dtype="uint64") /* ty=Tensor[(9, 15, 10), uint64] */;
  %942 = shape_of(%936, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%936, dtype="uint64") /* ty=Tensor[(9, 15, 10), uint64] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %945 = subtract(%943, %944) /* ty=Tensor[(9, 15, 10), uint64] */;
  %946 = cast(%var_6438, dtype="uint32") /* ty=Tensor[(9, 15, 10), uint32] */;
  %947 = shape_of(%945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %948 = cast(%945, dtype="uint32") /* ty=Tensor[(9, 15, 10), uint32] */;
  %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %950 = cast(%var_6424, dtype="float32") /* ty=Tensor[(9, 15, 10), float32] */;
  %951 = maximum(%939, %940) /* ty=Tensor[(9, 15, 10), int16] */;
  %952 = bitwise_and(%948, %949) /* ty=Tensor[(9, 15, 10), uint32] */;
  %953 = log10(%950) /* ty=Tensor[(9, 15, 10), float32] */;
  (%951, %952, %953)
}

def @func_4759() -> (Tensor[(1200), bool], Tensor[(3, 2, 10), bool], Tensor[(60, 1), float32], float64, Tensor[(10, 10, 12), bool]) {
  %954 = @func_3139() /* ty=Tensor[(1200), int16] */;
  %955 = cast(meta[relay.Constant][59] /* ty=Tensor[(1200), int16] */, dtype="bool") /* ty=Tensor[(1200), bool] */;
  %956 = shape_of(%954, dtype="int32") /* ty=Tensor[(1), int32] */;
  %957 = cast(%954, dtype="bool") /* ty=Tensor[(1200), bool] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?), bool] */;
  %959 = cast(meta[relay.Constant][60] /* ty=Tensor[(60, 1), float32] */, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %960 = cast(-4.7058f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %961 = reshape(%959, newshape=[3, 2, 10]) /* ty=Tensor[(3, 2, 10), float32] */;
  %962 = reshape(%960, newshape=[]) /* ty=float64 */;
  %963 = @func_906(%961, %962) /* ty=(Tensor[(3, 2, 10), bool], Tensor[(4, 14, 15), float64], float64) */;
  %964 = cast(%954, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %965 = cast(meta[relay.Constant][59] /* ty=Tensor[(1200), int16] */, dtype="int16") /* ty=Tensor[(1200), int16] */;
  %966 = reshape(%964, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %967 = reshape(%965, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int16] */;
  %968 = @func_2215(%966, %967) /* ty=(Tensor[(10, 10, 12), bool],) */;
  %969 = logical_and(%957, %958) /* ty=Tensor[(1200), bool] */;
  %970 = %963.0;
  %971 = %968.0;
  (%969, %970, meta[relay.Constant][60] /* ty=Tensor[(60, 1), float32] */, -4.7058f64 /* ty=float64 */, %971)
}

def @func_2424(%var_2422: Tensor[(9, 15, 10), float64], %var_2423: Tensor[(9, 15, 10), float64]) -> (Tensor[(9, 15, 10), float32], Tensor[(9, 15, 10), uint8]) {
  @func_2420(%var_2422, %var_2423) /* ty=(Tensor[(9, 15, 10), float32], Tensor[(9, 15, 10), uint8]) */
}

def @func_2447(%var_2446: Tensor[(10, 10, 12), bool]) -> Tensor[(10, 10, 12), uint8] {
  %988 = fn (%var_2428: Tensor[(10, 10, 12), bool]) -> Tensor[(10, 10, 12), uint8] {
    %972 = @func_2260() /* ty=(Tensor[(14, 13, 13), float64], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
    %973 = %972.1;
    %974 = cast(%var_2428, dtype="int32") /* ty=Tensor[(10, 10, 12), int32] */;
    %975 = shape_of(%973, dtype="int32") /* ty=Tensor[(3), int32] */;
    %976 = cast(%973, dtype="int32") /* ty=Tensor[(10, 10, 12), int32] */;
    %977 = dyn.reshape(%974, %975, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %978 = minimum(%976, %977) /* ty=Tensor[(10, 10, 12), int32] */;
    %979 = cast(%978, dtype="float64") /* ty=Tensor[(10, 10, 12), float64] */;
    %980 = shape_of(%var_2428, dtype="int32") /* ty=Tensor[(3), int32] */;
    %981 = cast(%var_2428, dtype="float64") /* ty=Tensor[(10, 10, 12), float64] */;
    %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %983 = mod(%981, %982) /* ty=Tensor[(10, 10, 12), float64] */;
    %984 = cast(%983, dtype="uint8") /* ty=Tensor[(10, 10, 12), uint8] */;
    %985 = shape_of(%973, dtype="int32") /* ty=Tensor[(3), int32] */;
    %986 = cast(%973, dtype="uint8") /* ty=Tensor[(10, 10, 12), uint8] */;
    %987 = dyn.reshape(%984, %985, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    logical_xor(%986, %987) /* ty=Tensor[(10, 10, 12), uint8] */
  };
  %988(%var_2446) /* ty=Tensor[(10, 10, 12), uint8] */
}

def @func_8649() -> (Tensor[(6, 16, 5), bool], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) {
  @func_8647() /* ty=(Tensor[(6, 16, 5), bool], Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */
}

def @func_8299(%var_8294: Tensor[(60), float32], %var_8295: float64, %var_8296: Tensor[(260), float32], %var_8297: Tensor[(480), float64], %var_8298: Tensor[(4, 14, 15), float64]) -> (Tensor[(1200), int16], float64, Tensor[(44), uint64], Tensor[(60), float32], float64, Tensor[(260), float32], Tensor[(480), float64], Tensor[(4, 14, 15), float64], Tensor[(10, 10, 12), float64]) {
  %1018 = fn (%var_8259: Tensor[(60), float32], %var_8260: float64, %var_8263: Tensor[(260), float32], %var_8264: Tensor[(480), float64], %var_8281: Tensor[(4, 14, 15), float64]) -> (Tensor[(1200), int16], float64, Tensor[(44), uint64], Tensor[(60), float32], float64, Tensor[(260), float32], Tensor[(480), float64], Tensor[(4, 14, 15), float64], Tensor[(10, 10, 12), float64]) {
    %989 = cast(meta[relay.Constant][61] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
    %990 = cast(%var_8259, dtype="float32") /* ty=Tensor[(60), float32] */;
    %991 = cast(%var_8260, dtype="float64") /* ty=float64 */;
    %992 = cast(meta[relay.Constant][61] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
    %993 = reshape(%989, newshape=[2, 11, 2]) /* ty=Tensor[(2, 11, 2), uint64] */;
    %994 = reshape(%990, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %995 = reshape(%991, newshape=[]) /* ty=float64 */;
    %996 = reshape(%992, newshape=[2, 11, 2]) /* ty=Tensor[(2, 11, 2), uint64] */;
    %997 = @func_2905(%993, %994, %995, %996) /* ty=(Tensor[(1200), int16], Tensor[(15, 12, 9), float64], Tensor[(1620), float64], Tensor[(2, 11, 2), float64], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(2, 11, 2), uint64], Tensor[(2, 11, 2), float32]) */;
    %998 = cast(%var_8263, dtype="float32") /* ty=Tensor[(260), float32] */;
    %999 = cast(%var_8264, dtype="float64") /* ty=Tensor[(480), float64] */;
    %1000 = cast(%var_8259, dtype="float32") /* ty=Tensor[(60), float32] */;
    %1001 = cast(%var_8264, dtype="float64") /* ty=Tensor[(480), float64] */;
    %1002 = reshape(%998, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %1003 = reshape(%999, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %1004 = reshape(%1000, newshape=[3, 20]) /* ty=Tensor[(3, 20), float32] */;
    %1005 = reshape(%1001, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
    %1006 = @func_3791(%1002, %1003, %1004, %1005) /* ty=(Tensor[(1200), int16], Tensor[(11, 9, 2), float64], Tensor[(198), float64], Tensor[(1200), int16], Tensor[(260), int16], Tensor[(480), float64], Tensor[(6, 16, 5), bool], Tensor[(4, 14, 15), float64], Tensor[(480), float32], Tensor[(16), int8], Tensor[(1200), int16], Tensor[(980), int32], Tensor[(3, 20), bool]) */;
    %1007 = %1006.7;
    %1008 = cast(%var_8281, dtype="float64") /* ty=Tensor[(4, 14, 15), float64] */;
    %1009 = shape_of(%1007, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1010 = cast(%1007, dtype="float64") /* ty=Tensor[(4, 14, 15), float64] */;
    %1011 = dyn.reshape(%1008, %1009, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1012 = @func_7747() /* ty=Tensor[(10, 10, 12), bool] */;
    %1013 = cast(%1012, dtype="float64") /* ty=Tensor[(10, 10, 12), float64] */;
    %1014 = @func_5203() /* ty=Tensor[(1200), int16] */;
    %1015 = %997.6;
    %1016 = floor_divide(%1010, %1011) /* ty=Tensor[(4, 14, 15), float64] */;
    %1017 = asinh(%1013) /* ty=Tensor[(10, 10, 12), float64] */;
    (%1014, %1015, meta[relay.Constant][61] /* ty=Tensor[(44), uint64] */, %var_8259, %var_8260, %var_8263, %var_8264, %1016, %1017)
  };
  %1018(%var_8294, %var_8295, %var_8296, %var_8297, %var_8298) /* ty=(Tensor[(1200), int16], float64, Tensor[(44), uint64], Tensor[(60), float32], float64, Tensor[(260), float32], Tensor[(480), float64], Tensor[(4, 14, 15), float64], Tensor[(10, 10, 12), float64]) */
}

def @func_9196(%var_9195: Tensor[(16, 8, 4), float64]) -> (Tensor[(16, 8, 4), float64], Tensor[(6, 16, 5), bool], Tensor[(16, 8, 4), float32], Tensor[(16, 8, 4), float64]) {
  %1029 = fn (%var_9127: Tensor[(16, 8, 4), float64]) -> (Tensor[(16, 8, 4), float64], Tensor[(6, 16, 5), bool], Tensor[(16, 8, 4), float32], Tensor[(16, 8, 4), float64]) {
    %1019 = cast(%var_9127, dtype="float64") /* ty=Tensor[(16, 8, 4), float64] */;
    %1020 = sqrt(%1019) /* ty=Tensor[(16, 8, 4), float64] */;
    %1021 = cast(%1020, dtype="float64") /* ty=Tensor[(16, 8, 4), float64] */;
    %1022 = @func_8527() /* ty=(Tensor[(6, 16, 5), bool],) */;
    %1023 = cast(%1020, dtype="float32") /* ty=Tensor[(16, 8, 4), float32] */;
    %1024 = cast(%1020, dtype="float64") /* ty=Tensor[(16, 8, 4), float64] */;
    %1025 = sigmoid(%1021) /* ty=Tensor[(16, 8, 4), float64] */;
    %1026 = %1022.0;
    %1027 = log10(%1023) /* ty=Tensor[(16, 8, 4), float32] */;
    %1028 = sin(%1024) /* ty=Tensor[(16, 8, 4), float64] */;
    (%1025, %1026, %1027, %1028)
  };
  %1029(%var_9195) /* ty=(Tensor[(16, 8, 4), float64], Tensor[(6, 16, 5), bool], Tensor[(16, 8, 4), float32], Tensor[(16, 8, 4), float64]) */
}

def @func_6659() -> Tensor[(1200), int16] {
  %1030 = fn () -> Tensor[(1200), int16] {
    @func_5447() /* ty=Tensor[(1200), int16] */
  };
  %1030() /* ty=Tensor[(1200), int16] */
}

def @func_9309(%var_9278: Tensor[(12, 14, 3), uint16], %var_9298: float64, %var_9299: Tensor[(130, 2), float32]) -> (Tensor[(12, 14, 3), uint16], Tensor[(10, 10, 12), bool], Tensor[(11, 9, 2), float32], Tensor[(198), float64], float64, Tensor[(130, 2), float32], Tensor[(1200), int16]) {
  %1031 = cast(meta[relay.Constant][62] /* ty=Tensor[(12, 14, 3), uint16] */, dtype="uint16") /* ty=Tensor[(12, 14, 3), uint16] */;
  %1032 = shape_of(%var_9278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1033 = cast(%var_9278, dtype="uint16") /* ty=Tensor[(12, 14, 3), uint16] */;
  %1034 = dyn.reshape(%1031, %1032, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1035 = @func_4885() /* ty=(Tensor[(10, 10, 12), bool], Tensor[(1200), int16]) */;
  %1036 = cast(meta[relay.Constant][63] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %1037 = cast(%var_9298, dtype="float64") /* ty=float64 */;
  %1038 = cast(%var_9299, dtype="float32") /* ty=Tensor[(130, 2), float32] */;
  %1039 = reshape(%1036, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %1040 = reshape(%1037, newshape=[]) /* ty=float64 */;
  %1041 = reshape(%1038, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %1042 = @func_2067(%1039, %1040, %1041) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float32], Tensor[(4, 14, 15), float64], Tensor[(60), float32], float64, Tensor[(4, 14, 15), float64], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(60), float32], Tensor[(260), float32]) */;
  %1043 = @func_8817() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */;
  %1044 = multiply(%1033, %1034) /* ty=Tensor[(12, 14, 3), uint16] */;
  %1045 = %1035.0;
  %1046 = %1042.1;
  %1047 = %1043.0;
  (%1044, %1045, %1046, meta[relay.Constant][63] /* ty=Tensor[(198), float64] */, %var_9298, %var_9299, %1047)
}

def @func_6136(%var_6134: Tensor[(28, 32), float64], %var_6135: Tensor[(198), float64]) -> (Tensor[(6, 16, 5), float64], Tensor[(1200), int16], Tensor[(3, 2, 10), bool], Tensor[(28, 32), float64], Tensor[(198), float64]) {
  @func_6132(%var_6134, %var_6135) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(1200), int16], Tensor[(3, 2, 10), bool], Tensor[(28, 32), float64], Tensor[(198), float64]) */
}

def @func_4792() -> (Tensor[(9, 15, 10), uint8], Tensor[(1200), int16]) {
  %1052 = fn () -> (Tensor[(9, 15, 10), uint8], Tensor[(1200), int16]) {
    %1048 = @func_4713() /* ty=(Tensor[(6, 16, 5), float64], Tensor[(9, 15, 10), uint8], Tensor[(9, 150), float64], Tensor[(3, 10, 16), float64]) */;
    %1049 = @func_3686() /* ty=(Tensor[(1200), int16], Tensor[(1200), int16]) */;
    %1050 = %1048.1;
    %1051 = %1049.1;
    (%1050, %1051)
  };
  %1052() /* ty=(Tensor[(9, 15, 10), uint8], Tensor[(1200), int16]) */
}

def @func_8508() -> Tensor[(6, 16, 5), bool] {
  @func_8506() /* ty=Tensor[(6, 16, 5), bool] */
}

def @func_6707() -> (Tensor[(1200), int16], float64) {
  %1057 = fn () -> (Tensor[(1200), int16], float64) {
    %1053 = @func_6525() /* ty=(Tensor[(1200), int16],) */;
    %1054 = @func_4397() /* ty=(float64,) */;
    %1055 = %1053.0;
    %1056 = %1054.0;
    (%1055, %1056)
  };
  %1057() /* ty=(Tensor[(1200), int16], float64) */
}

def @func_2962(%var_2961: Tensor[(16, 1), int8]) -> (Tensor[(16, 1), int8], Tensor[(6, 16, 5), float64], Tensor[(480), float32]) {
  %1067 = fn (%var_2928: Tensor[(16, 1), int8]) -> (Tensor[(16, 1), int8], Tensor[(6, 16, 5), float64], Tensor[(480), float32]) {
    %1058 = cast(meta[relay.Constant][64] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %1059 = cast(%var_2928, dtype="int8") /* ty=Tensor[(16, 1), int8] */;
    %1060 = cast(meta[relay.Constant][65] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %1061 = cast(meta[relay.Constant][65] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %1062 = reshape(%1060, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
    %1063 = reshape(%1061, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float32] */;
    %1064 = @func_2544(%1062, %1063) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 14, 15), float64], float64) */;
    %1065 = multiply(%1058, %1059) /* ty=Tensor[(16, 1), int8] */;
    %1066 = %1064.1;
    (%1065, %1066, meta[relay.Constant][65] /* ty=Tensor[(480), float32] */)
  };
  %1067(%var_2961) /* ty=(Tensor[(16, 1), int8], Tensor[(6, 16, 5), float64], Tensor[(480), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen316/build/output.py:2613: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen316/build/output.py", line 2618, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(210) tvmgen_default_fused_floor_divide_kernel0(float* __restrict__ T_floor_divide, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_floor_divide[(((int)threadIdx.x))] = floorf((placeholder[((((((int)threadIdx.x) / 70) * 14) + (((int)threadIdx.x) % 14)))] / placeholder1[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

