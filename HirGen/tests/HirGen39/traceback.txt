==========mod==========
#[version = "0.0.5"]
def @func_7495() -> (Tensor[(3, 13, 2), float64], Tensor[(6, 11, 8), bool]) {
  %0 = cast(-9.02282f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 13, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %2 = @func_2820() /* ty=(bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), float64]) */;
  %3 = subtract(%0, %1) /* ty=Tensor[(3, 13, 2), float64] */;
  %4 = %2.4;
  (%3, %4)
}

def @func_4963(%var_4933: Tensor[(8, 1), bool], %var_4956: Tensor[(588, 2), float64]) -> (bool, bool, bool, Tensor[(8, 1), bool], Tensor[(6, 2, 4), float32], Tensor[(48), float64], Tensor[(588, 2), float64]) {
  %5 = @func_3498() /* ty=(bool, bool) */;
  %6 = @func_1665() /* ty=(bool,) */;
  %7 = %6.0;
  %8 = cast(%7, dtype="bool") /* ty=bool */;
  %9 = cast(%var_4933, dtype="bool") /* ty=Tensor[(8, 1), bool] */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %11 = cast(%var_4956, dtype="float64") /* ty=Tensor[(588, 2), float64] */;
  %12 = reshape(%10, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
  %13 = reshape(%11, newshape=[1, 1176]) /* ty=Tensor[(1, 1176), float64] */;
  %14 = @func_4298(%12, %13) /* ty=(Tensor[(6, 2, 4), float32], bool, Tensor[(7, 12, 14), bool], Tensor[(1, 1176), float64], Tensor[(108), float64]) */;
  %15 = @func_2712() /* ty=bool */;
  %16 = @func_1913() /* ty=bool */;
  %17 = %5.0;
  %18 = logical_and(%8, %9) /* ty=Tensor[(8, 1), bool] */;
  %19 = %14.0;
  (%15, %16, %17, %18, %19, meta[relay.Constant][1] /* ty=Tensor[(48), float64] */, %var_4956)
}

def @func_1796(%var_1790: Tensor[(1176), float64]) -> (bool, bool, Tensor[(1176), float64]) {
  %20 = @func_1760() /* ty=(bool,) */;
  %21 = cast(%var_1790, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %22 = cast(%var_1790, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %23 = reshape(%21, newshape=[7, 12, 14]) /* ty=Tensor[(7, 12, 14), float64] */;
  %24 = reshape(%22, newshape=[7, 12, 14]) /* ty=Tensor[(7, 12, 14), float64] */;
  %25 = @func_1348(%23, %24) /* ty=(Tensor[(7, 12, 14), bool], bool) */;
  %26 = %20.0;
  %27 = %25.1;
  (%26, %27, %var_1790)
}

def @func_5042() -> (bool, bool) {
  %28 = @func_2094() /* ty=(bool, Tensor[(2, 8, 12), int32]) */;
  %29 = @func_2820() /* ty=(bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), float64]) */;
  %30 = %28.0;
  %31 = %29.5;
  (%30, %31)
}

def @func_1601(%var_1550: Tensor[(3, 14, 2), float32], %var_1551: Tensor[(3, 14, 2), float32], %var_1591: bool) -> (Tensor[(3, 14, 2), float32], Tensor[(2, 8, 12), float32], Tensor[(6, 11, 8), bool]) {
  %32 = cast(%var_1551, dtype="float32") /* ty=Tensor[(3, 14, 2), float32] */;
  %33 = shape_of(%var_1550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%var_1550, dtype="float32") /* ty=Tensor[(3, 14, 2), float32] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %36 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %37 = cast(%var_1591, dtype="bool") /* ty=bool */;
  %38 = reshape(%37, newshape=[]) /* ty=bool */;
  %39 = @func_289(%38) /* ty=Tensor[(6, 11, 8), bool] */;
  %40 = cast(%39, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
  %41 = cast(%var_1591, dtype="bool") /* ty=bool */;
  %42 = subtract(%34, %35) /* ty=Tensor[(3, 14, 2), float32] */;
  %43 = %36.1;
  %44 = logical_or(%40, %41) /* ty=Tensor[(6, 11, 8), bool] */;
  (%42, %43, %44)
}

def @func_5972() -> (Tensor[(4, 12, 10), uint32], Tensor[(4, 12, 10), float64], Tensor[(4, 12, 10), float32], Tensor[(7, 4, 15), bool], Tensor[(4, 12, 10), float64], bool) {
  %45 = @func_4349() /* ty=Tensor[(4, 12, 10), bool] */;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %47 = sqrt(%46) /* ty=Tensor[(4, 12, 10), float64] */;
  %48 = cast(%47, dtype="uint32") /* ty=Tensor[(4, 12, 10), uint32] */;
  %49 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%45, dtype="uint32") /* ty=Tensor[(4, 12, 10), uint32] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %52 = cast(%45, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %53 = cast(%45, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %54 = @func_4688() /* ty=(Tensor[(7, 4, 15), bool], Tensor[(7, 4, 15), bool]) */;
  %55 = cast(%45, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %56 = bitwise_or(%50, %51) /* ty=Tensor[(4, 12, 10), uint32] */;
  %57 = sigmoid(%52) /* ty=Tensor[(4, 12, 10), float64] */;
  %58 = atan(%53) /* ty=Tensor[(4, 12, 10), float32] */;
  %59 = %54.0;
  %60 = atanh(%55) /* ty=Tensor[(4, 12, 10), float64] */;
  %61 = @func_1636() /* ty=bool */;
  (%56, %57, %58, %59, %60, %61)
}

def @func_6084(%var_6064: Tensor[(1050), uint16]) -> (bool, Tensor[(4, 12, 10), uint32], bool, bool, Tensor[(198), int8], Tensor[(7, 1, 15), float64], Tensor[(1050), uint16]) {
  %62 = @func_2923() /* ty=(bool, bool) */;
  %63 = @func_5972() /* ty=(Tensor[(4, 12, 10), uint32], Tensor[(4, 12, 10), float64], Tensor[(4, 12, 10), float32], Tensor[(7, 4, 15), bool], Tensor[(4, 12, 10), float64], bool) */;
  %64 = @func_2406() /* ty=(bool,) */;
  %65 = cast(meta[relay.Constant][2] /* ty=Tensor[(198), int8] */, dtype="int8") /* ty=Tensor[(198), int8] */;
  %66 = cast(meta[relay.Constant][2] /* ty=Tensor[(198), int8] */, dtype="int8") /* ty=Tensor[(198), int8] */;
  %67 = reshape(%65, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), int8] */;
  %68 = reshape(%66, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), int8] */;
  %69 = @func_2320(%67, %68) /* ty=(Tensor[(11, 6, 3), int8], Tensor[(6, 11, 8), bool], bool, bool) */;
  %70 = cast(%var_6064, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %71 = reshape(%70, newshape=[7, 10, 15]) /* ty=Tensor[(7, 10, 15), uint16] */;
  %72 = @func_3577(%71) /* ty=(Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(7, 10, 15), float32], Tensor[(7, 10, 15), float32]) */;
  %73 = %62.1;
  %74 = %63.0;
  %75 = %64.0;
  %76 = %69.3;
  %77 = %72.1;
  (%73, %74, %75, %76, meta[relay.Constant][2] /* ty=Tensor[(198), int8] */, %77, %var_6064)
}

def @func_1805() -> bool {
  @func_1636() /* ty=bool */
}

def @func_7336() -> (bool, Tensor[(4, 12, 10), float64]) {
  %78 = @func_5732() /* ty=(Tensor[(4, 12, 10), float64],) */;
  %79 = @func_1957() /* ty=bool */;
  %80 = %78.0;
  (%79, %80)
}

def @func_7886(%var_7850: Tensor[(3, 90), float64], %var_7871: Tensor[(1176), float64]) -> (bool, bool, Tensor[(3, 90), float64], bool, Tensor[(1, 8), bool], Tensor[(1176), float64], bool) {
  %81 = @func_5348() /* ty=(bool,) */;
  %82 = cast(%var_7850, dtype="float64") /* ty=Tensor[(3, 90), float64] */;
  %83 = cast(%var_7850, dtype="float64") /* ty=Tensor[(3, 90), float64] */;
  %84 = reshape(%82, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float64] */;
  %85 = reshape(%83, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float64] */;
  %86 = @func_4153(%84, %85) /* ty=(Tensor[(9, 10, 3), float64], bool) */;
  %87 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 8), bool] */, dtype="bool") /* ty=Tensor[(1, 8), bool] */;
  %88 = cast(%var_7871, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %89 = cast(%var_7871, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %90 = reshape(%87, newshape=[1, 8]) /* ty=Tensor[(1, 8), bool] */;
  %91 = reshape(%88, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %92 = reshape(%89, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %93 = @func_4629(%90, %91, %92) /* ty=(bool, Tensor[(1176), float64], Tensor[(1, 8), bool], bool, Tensor[(1176), uint16], bool, Tensor[(270), float64], bool, Tensor[(7, 1, 15), float64]) */;
  %94 = @func_1665() /* ty=(bool,) */;
  %95 = %81.0;
  %96 = %86.1;
  %97 = %93.0;
  %98 = %94.0;
  (%95, %96, %var_7850, %97, meta[relay.Constant][3] /* ty=Tensor[(1, 8), bool] */, %var_7871, %98)
}

def @func_5363() -> (bool,) {
  %99 = @func_2948() /* ty=(bool,) */;
  %100 = %99.0;
  (%100,)
}

def @func_4237() -> (bool, bool) {
  %101 = @func_1913() /* ty=bool */;
  %102 = @func_1913() /* ty=bool */;
  (%101, %102)
}

def @func_7366() -> (bool,) {
  %103 = @func_2628() /* ty=(bool,) */;
  %104 = %103.0;
  (%104,)
}

def @func_3347() -> Tensor[(7, 1, 15), float64] {
  %105 = @func_3204() /* ty=(Tensor[(7, 1, 15), float64], Tensor[(6, 11, 8), bool], Tensor[(108), float64], bool, bool) */;
  %105.0
}

def @func_1636() -> bool {
  %106 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %106.0
}

def @func_2446() -> bool {
  %107 = @func_2406() /* ty=(bool,) */;
  %107.0
}

def @func_7756() -> bool {
  %108 = @func_2366() /* ty=(bool,) */;
  %108.0
}

def @func_5436(%var_5430: Tensor[(260), bool]) -> (bool, Tensor[(2, 10, 13), uint16], Tensor[(260), bool]) {
  %109 = @func_4237() /* ty=(bool, bool) */;
  %110 = cast(%var_5430, dtype="bool") /* ty=Tensor[(260), bool] */;
  %111 = reshape(%110, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), bool] */;
  %112 = @func_2675(%111) /* ty=(Tensor[(2, 10, 13), int32], Tensor[(2, 10, 13), uint16]) */;
  %113 = %109.0;
  %114 = %112.1;
  (%113, %114, %var_5430)
}

def @func_2170(%var_2158: Tensor[(9, 16, 9), float64]) -> (Tensor[(9, 16, 9), float64], bool) {
  %115 = cast(%var_2158, dtype="float64") /* ty=Tensor[(9, 16, 9), float64] */;
  %116 = log2(%115) /* ty=Tensor[(9, 16, 9), float64] */;
  %117 = @func_1957() /* ty=bool */;
  (%116, %117)
}

def @func_7006() -> (bool, bool, Tensor[(528), bool], Tensor[(108), float64], Tensor[(6, 11, 8), uint64]) {
  %118 = @func_2366() /* ty=(bool,) */;
  %119 = cast(meta[relay.Constant][4] /* ty=Tensor[(528), bool] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %120 = %118.0;
  %121 = cast(%120, dtype="bool") /* ty=bool */;
  %122 = reshape(%119, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), bool] */;
  %123 = reshape(%121, newshape=[]) /* ty=bool */;
  %124 = @func_1852(%122, %123) /* ty=(Tensor[(6, 11, 8), uint64], Tensor[(6, 11, 8), bool], Tensor[(84, 1), float32], bool) */;
  %125 = cast(meta[relay.Constant][4] /* ty=Tensor[(528), bool] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %126 = cast(%120, dtype="bool") /* ty=bool */;
  %127 = reshape(%125, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), bool] */;
  %128 = reshape(%126, newshape=[]) /* ty=bool */;
  %129 = @func_1852(%127, %128) /* ty=(Tensor[(6, 11, 8), uint64], Tensor[(6, 11, 8), bool], Tensor[(84, 1), float32], bool) */;
  %130 = %124.3;
  %131 = @func_3453() /* ty=Tensor[(108), float64] */;
  %132 = %129.0;
  (%120, %130, meta[relay.Constant][4] /* ty=Tensor[(528), bool] */, %131, %132)
}

def @func_3068() -> (Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), bool], bool, Tensor[(2, 8, 12), float64]) {
  %133 = @func_1636() /* ty=bool */;
  %134 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %135 = %134.6;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %137 = acosh(%136) /* ty=Tensor[(2, 8, 12), float32] */;
  %138 = cast(%133, dtype="bool") /* ty=bool */;
  %139 = cast(%137, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %140 = cast(%135, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %141 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%137, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %144 = @func_1776() /* ty=(Tensor[(10, 6, 12), float32], bool) */;
  %145 = cast(%137, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %146 = less(%138, %139) /* ty=Tensor[(2, 8, 12), bool] */;
  %147 = greater_equal(%142, %143) /* ty=Tensor[(2, 8, 12), bool] */;
  %148 = %144.1;
  %149 = sinh(%145) /* ty=Tensor[(2, 8, 12), float64] */;
  (%146, %147, %148, %149)
}

def @func_5821(%var_5784: Tensor[(9, 15, 16), bool]) -> (bool, Tensor[(9, 15, 16), uint32], bool, Tensor[(6, 11, 8), bool], Tensor[(198), int8]) {
  %150 = @func_3498() /* ty=(bool, bool) */;
  %151 = @func_4244() /* ty=(bool,) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="uint32") /* ty=uint32 */;
  %154 = cast(%var_5784, dtype="uint32") /* ty=Tensor[(9, 15, 16), uint32] */;
  %155 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %156 = cast(meta[relay.Constant][5] /* ty=Tensor[(198), int8] */, dtype="int8") /* ty=Tensor[(198), int8] */;
  %157 = cast(meta[relay.Constant][5] /* ty=Tensor[(198), int8] */, dtype="int8") /* ty=Tensor[(198), int8] */;
  %158 = reshape(%156, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), int8] */;
  %159 = reshape(%157, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), int8] */;
  %160 = @func_2320(%158, %159) /* ty=(Tensor[(11, 6, 3), int8], Tensor[(6, 11, 8), bool], bool, bool) */;
  %161 = %150.1;
  %162 = left_shift(%153, %154) /* ty=Tensor[(9, 15, 16), uint32] */;
  %163 = %155.0;
  %164 = %160.1;
  (%161, %162, %163, %164, meta[relay.Constant][5] /* ty=Tensor[(198), int8] */)
}

def @func_3577(%var_3562: Tensor[(7, 10, 15), uint16]) -> (Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(7, 10, 15), float32], Tensor[(7, 10, 15), float32]) {
  %165 = @func_2948() /* ty=(bool,) */;
  %166 = %165.0;
  %167 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
  %168 = cast(%166, dtype="uint16") /* ty=uint16 */;
  %169 = cast(%167, dtype="uint16") /* ty=Tensor[(7, 1, 15), uint16] */;
  %170 = right_shift(%168, %169) /* ty=Tensor[(7, 1, 15), uint16] */;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(7, 1, 15), float32] */;
  %172 = cast(%167, dtype="float64") /* ty=Tensor[(7, 1, 15), float64] */;
  %173 = cast(%170, dtype="float32") /* ty=Tensor[(7, 1, 15), float32] */;
  %174 = cast(%var_3562, dtype="float32") /* ty=Tensor[(7, 10, 15), float32] */;
  %175 = cast(%var_3562, dtype="float32") /* ty=Tensor[(7, 10, 15), float32] */;
  %176 = sinh(%171) /* ty=Tensor[(7, 1, 15), float32] */;
  %177 = log(%172) /* ty=Tensor[(7, 1, 15), float64] */;
  %178 = divide(%173, %174) /* ty=Tensor[(7, 10, 15), float32] */;
  %179 = acosh(%175) /* ty=Tensor[(7, 10, 15), float32] */;
  (%176, %177, %178, %179)
}

def @func_3667() -> (bool, bool, Tensor[(108, 1), float64]) {
  %180 = @func_2948() /* ty=(bool,) */;
  %181 = cast(meta[relay.Constant][6] /* ty=Tensor[(108, 1), float64] */, dtype="float64") /* ty=Tensor[(108, 1), float64] */;
  %182 = cast(meta[relay.Constant][6] /* ty=Tensor[(108, 1), float64] */, dtype="float64") /* ty=Tensor[(108, 1), float64] */;
  %183 = reshape(%181, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %184 = reshape(%182, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %185 = @func_696(%183, %184) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) */;
  %186 = %180.0;
  %187 = %185.2;
  (%186, %187, meta[relay.Constant][6] /* ty=Tensor[(108, 1), float64] */)
}

def @func_7554() -> (bool,) {
  %188 = @func_5468() /* ty=(bool,) */;
  %189 = %188.0;
  (%189,)
}

def @func_7046(%var_7009: Tensor[(12, 3, 15), float64]) -> (Tensor[(12, 3, 15), int32], Tensor[(2, 8, 12), bool], Tensor[(12, 3, 15), float64]) {
  %190 = cast(%var_7009, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
  %191 = log(%190) /* ty=Tensor[(12, 3, 15), float64] */;
  %192 = @func_5042() /* ty=(bool, bool) */;
  %193 = %192.1;
  %194 = cast(%191, dtype="int16") /* ty=Tensor[(12, 3, 15), int16] */;
  %195 = cast(%193, dtype="int16") /* ty=int16 */;
  %196 = logical_xor(%194, %195) /* ty=Tensor[(12, 3, 15), int16] */;
  %197 = cast(%196, dtype="int32") /* ty=Tensor[(12, 3, 15), int32] */;
  %198 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%191, dtype="int32") /* ty=Tensor[(12, 3, 15), int32] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %201 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %202 = cast(%191, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
  %203 = bitwise_xor(%199, %200) /* ty=Tensor[(12, 3, 15), int32] */;
  %204 = %201.0;
  %205 = sigmoid(%202) /* ty=Tensor[(12, 3, 15), float64] */;
  (%203, %204, %205)
}

def @func_5889(%var_5883: Tensor[(2, 588), float64]) -> (Tensor[(2, 8, 12), float32], Tensor[(8, 1), bool], Tensor[(8), bool], Tensor[(2, 588), float64]) {
  %206 = @func_2094() /* ty=(bool, Tensor[(2, 8, 12), int32]) */;
  %207 = %206.1;
  %208 = cast(%207, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %209 = cast(meta[relay.Constant][7] /* ty=Tensor[(8), bool] */, dtype="bool") /* ty=Tensor[(8), bool] */;
  %210 = cast(%var_5883, dtype="float64") /* ty=Tensor[(2, 588), float64] */;
  %211 = reshape(%209, newshape=[8, 1]) /* ty=Tensor[(8, 1), bool] */;
  %212 = reshape(%210, newshape=[588, 2]) /* ty=Tensor[(588, 2), float64] */;
  %213 = @func_4963(%211, %212) /* ty=(bool, bool, bool, Tensor[(8, 1), bool], Tensor[(6, 2, 4), float32], Tensor[(48), float64], Tensor[(588, 2), float64]) */;
  %214 = asinh(%208) /* ty=Tensor[(2, 8, 12), float32] */;
  %215 = %213.3;
  (%214, %215, meta[relay.Constant][7] /* ty=Tensor[(8), bool] */, %var_5883)
}

def @func_1776() -> (Tensor[(10, 6, 12), float32], bool) {
  %216 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(10, 6, 12), float32] */;
  %217 = @func_1760() /* ty=(bool,) */;
  %218 = cos(%216) /* ty=Tensor[(10, 6, 12), float32] */;
  %219 = %217.0;
  (%218, %219)
}

def @func_8077() -> (Tensor[(7, 1, 15), float64],) {
  %220 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
  (%220,)
}

def @func_7819() -> (bool,) {
  %221 = @func_3498() /* ty=(bool, bool) */;
  %222 = %221.0;
  (%222,)
}

def @func_4629(%var_4557: Tensor[(1, 8), bool], %var_4558: Tensor[(1176), float64], %var_4592: Tensor[(1176), float64]) -> (bool, Tensor[(1176), float64], Tensor[(1, 8), bool], bool, Tensor[(1176), uint16], bool, Tensor[(270), float64], bool, Tensor[(7, 1, 15), float64]) {
  %223 = cast(%var_4557, dtype="bool") /* ty=Tensor[(1, 8), bool] */;
  %224 = cast(%var_4558, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %225 = reshape(%223, newshape=[1, 8]) /* ty=Tensor[(1, 8), bool] */;
  %226 = reshape(%224, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %227 = @func_4041(%225, %226) /* ty=(bool, Tensor[(1, 8), float32], bool, Tensor[(1176), float64], Tensor[(1176), float64], bool, Tensor[(108), float64], bool) */;
  %228 = @func_2948() /* ty=(bool,) */;
  %229 = cast(%var_4592, dtype="uint16") /* ty=Tensor[(1176), uint16] */;
  %230 = shape_of(%var_4558, dtype="int32") /* ty=Tensor[(1), int32] */;
  %231 = cast(%var_4558, dtype="uint16") /* ty=Tensor[(1176), uint16] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %233 = cast(meta[relay.Constant][9] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %234 = cast(meta[relay.Constant][9] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %235 = reshape(%233, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float64] */;
  %236 = reshape(%234, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float64] */;
  %237 = @func_4153(%235, %236) /* ty=(Tensor[(9, 10, 3), float64], bool) */;
  %238 = @func_2820() /* ty=(bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), float64]) */;
  %239 = @func_2858() /* ty=bool */;
  %240 = %227.3;
  %241 = %228.0;
  %242 = add(%231, %232) /* ty=Tensor[(1176), uint16] */;
  %243 = %237.1;
  %244 = %238.3;
  %245 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
  (%239, %240, %var_4557, %241, %242, %243, meta[relay.Constant][9] /* ty=Tensor[(270), float64] */, %244, %245)
}

def @func_2675(%var_2664: Tensor[(2, 10, 13), bool]) -> (Tensor[(2, 10, 13), int32], Tensor[(2, 10, 13), uint16]) {
  %246 = @func_2628() /* ty=(bool,) */;
  %247 = %246.0;
  %248 = cast(%247, dtype="int32") /* ty=int32 */;
  %249 = cast(%var_2664, dtype="int32") /* ty=Tensor[(2, 10, 13), int32] */;
  %250 = cast(%247, dtype="uint16") /* ty=uint16 */;
  %251 = cast(%var_2664, dtype="uint16") /* ty=Tensor[(2, 10, 13), uint16] */;
  %252 = add(%248, %249) /* ty=Tensor[(2, 10, 13), int32] */;
  %253 = subtract(%250, %251) /* ty=Tensor[(2, 10, 13), uint16] */;
  (%252, %253)
}

def @func_8190() -> Tensor[(4, 12, 10), bool] {
  %254 = @func_6151() /* ty=Tensor[(4, 12, 10), int8] */;
  %255 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 12, 10), int8] */, dtype="bool") /* ty=Tensor[(4, 12, 10), bool] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%254, dtype="bool") /* ty=Tensor[(4, 12, 10), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%257, %258) /* ty=Tensor[(4, 12, 10), bool] */
}

def @func_7997() -> (Tensor[(10, 6, 12), float32], Tensor[(7, 1, 15), float64], Tensor[(1, 1050), float32]) {
  %259 = @func_1776() /* ty=(Tensor[(10, 6, 12), float32], bool) */;
  %260 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 1050), float32] */, dtype="float32") /* ty=Tensor[(1, 1050), float32] */;
  %261 = reshape(%260, newshape=[5, 210]) /* ty=Tensor[(5, 210), float32] */;
  %262 = @func_4861(%261) /* ty=(Tensor[(7, 1, 15), float64], Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(5, 210), uint32]) */;
  %263 = %259.0;
  %264 = %262.2;
  (%263, %264, meta[relay.Constant][11] /* ty=Tensor[(1, 1050), float32] */)
}

def @func_7729(%var_7720: Tensor[(2, 504), uint64], %var_7722: Tensor[(2, 504), uint64]) -> (bool, bool, Tensor[(770), float32], Tensor[(2, 504), uint8], bool) {
  %265 = @func_7591() /* ty=(bool, bool, Tensor[(108), float64]) */;
  %266 = cast(meta[relay.Constant][12] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %267 = cast(%var_7720, dtype="uint64") /* ty=Tensor[(2, 504), uint64] */;
  %268 = reshape(%266, newshape=[5, 14, 11]) /* ty=Tensor[(5, 14, 11), float32] */;
  %269 = reshape(%267, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %270 = @func_5282(%268, %269) /* ty=(bool, Tensor[(1008), uint64], Tensor[(5, 14, 11), uint8]) */;
  %271 = cast(%var_7722, dtype="uint8") /* ty=Tensor[(2, 504), uint8] */;
  %272 = shape_of(%var_7720, dtype="int32") /* ty=Tensor[(2), int32] */;
  %273 = cast(%var_7720, dtype="uint8") /* ty=Tensor[(2, 504), uint8] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %275 = @func_2406() /* ty=(bool,) */;
  %276 = %265.1;
  %277 = %270.0;
  %278 = right_shift(%273, %274) /* ty=Tensor[(2, 504), uint8] */;
  %279 = %275.0;
  (%276, %277, meta[relay.Constant][12] /* ty=Tensor[(770), float32] */, %278, %279)
}

def @func_4084() -> (bool,) {
  %280 = @func_1957() /* ty=bool */;
  (%280,)
}

def @func_3860(%var_3846: Tensor[(4, 12, 10), bool]) -> (Tensor[(4, 12, 10), float32],) {
  %281 = @func_3762() /* ty=Tensor[(4, 12, 10), bool] */;
  %282 = cast(%var_3846, dtype="int8") /* ty=Tensor[(4, 12, 10), int8] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="int8") /* ty=Tensor[(4, 12, 10), int8] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %286 = bitwise_and(%284, %285) /* ty=Tensor[(4, 12, 10), int8] */;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %288 = acos(%287) /* ty=Tensor[(4, 12, 10), float32] */;
  (%288,)
}

def @func_7189() -> bool {
  %289 = @func_5231() /* ty=(bool, bool) */;
  %289.1
}

def @func_6789() -> (Tensor[(10, 6, 12), float32], bool) {
  %290 = @func_3877() /* ty=Tensor[(10, 6, 12), float32] */;
  %291 = @func_2446() /* ty=bool */;
  (%290, %291)
}

def @func_2406() -> (bool,) {
  %292 = @func_1636() /* ty=bool */;
  (%292,)
}

def @func_7932(%var_7908: Tensor[(16, 2, 7), float64]) -> (Tensor[(16, 2, 7), float32],) {
  %293 = cast(%var_7908, dtype="float64") /* ty=Tensor[(16, 2, 7), float64] */;
  %294 = erf(%293) /* ty=Tensor[(16, 2, 7), float64] */;
  %295 = cast(%294, dtype="uint16") /* ty=Tensor[(16, 2, 7), uint16] */;
  %296 = shape_of(%var_7908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%var_7908, dtype="uint16") /* ty=Tensor[(16, 2, 7), uint16] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %299 = bitwise_or(%297, %298) /* ty=Tensor[(16, 2, 7), uint16] */;
  %300 = cast(%299, dtype="float32") /* ty=Tensor[(16, 2, 7), float32] */;
  %301 = sigmoid(%300) /* ty=Tensor[(16, 2, 7), float32] */;
  (%301,)
}

def @func_5628() -> (Tensor[(108), float64], bool) {
  %302 = @func_3204() /* ty=(Tensor[(7, 1, 15), float64], Tensor[(6, 11, 8), bool], Tensor[(108), float64], bool, bool) */;
  %303 = @func_1665() /* ty=(bool,) */;
  %304 = %302.2;
  %305 = %303.0;
  (%304, %305)
}

def @func_2148() -> (bool, bool, bool, Tensor[(6, 11, 8), bool], bool) {
  %306 = @func_1776() /* ty=(Tensor[(10, 6, 12), float32], bool) */;
  %307 = %306.1;
  %308 = cast(%307, dtype="bool") /* ty=bool */;
  %309 = reshape(%308, newshape=[]) /* ty=bool */;
  %310 = @func_1636() /* ty=bool */;
  %311 = @func_1805() /* ty=bool */;
  %312 = @func_289(%309) /* ty=Tensor[(6, 11, 8), bool] */;
  %313 = @func_1498() /* ty=bool */;
  (%310, %307, %311, %312, %313)
}

def @func_6565() -> (Tensor[(108), float64],) {
  %314 = @func_3453() /* ty=Tensor[(108), float64] */;
  (%314,)
}

def @func_8148() -> (Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), float32], Tensor[(1, 108), float64], Tensor[(22, 4), bool]) {
  %315 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 11, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %316 = cos(%315) /* ty=Tensor[(15, 11, 6), float64] */;
  %317 = cast(%316, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %318 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 11, 6), float64] */, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %319 = cast(meta[relay.Constant][14] /* ty=Tensor[(22, 4), bool] */, dtype="bool") /* ty=Tensor[(22, 4), bool] */;
  %320 = reshape(%319, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), bool] */;
  %321 = @func_3317(%320) /* ty=(Tensor[(11, 8, 1), bool], bool, Tensor[(6, 11, 8), bool], Tensor[(1, 108), float64]) */;
  %322 = acos(%317) /* ty=Tensor[(15, 11, 6), float64] */;
  %323 = sinh(%318) /* ty=Tensor[(15, 11, 6), float32] */;
  %324 = %321.3;
  (%322, %323, %324, meta[relay.Constant][14] /* ty=Tensor[(22, 4), bool] */)
}

def @func_1760() -> (bool,) {
  %325 = @func_1665() /* ty=(bool,) */;
  %326 = %325.0;
  (%326,)
}

def @func_5282(%var_5253: Tensor[(5, 14, 11), float32], %var_5262: Tensor[(1008), uint64]) -> (bool, Tensor[(1008), uint64], Tensor[(5, 14, 11), uint8]) {
  %327 = cast(%var_5262, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %328 = cast(%var_5262, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %329 = cast(%var_5262, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %330 = reshape(%327, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
  %331 = reshape(%328, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), bool] */;
  %332 = reshape(%329, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), bool] */;
  %333 = @func_4521(%330, %331, %332) /* ty=(Tensor[(9, 16, 7), float64], bool, Tensor[(7, 1, 15), float64], Tensor[(108), float64], Tensor[(1, 48), float64], Tensor[(1176), float64], Tensor[(9, 16, 7), int64], bool, Tensor[(9, 16, 7), bool], Tensor[(9, 16, 7), float64]) */;
  %334 = cast(%var_5253, dtype="float32") /* ty=Tensor[(5, 14, 11), float32] */;
  %335 = cos(%334) /* ty=Tensor[(5, 14, 11), float32] */;
  %336 = cast(%var_5253, dtype="uint8") /* ty=Tensor[(5, 14, 11), uint8] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="uint8") /* ty=Tensor[(5, 14, 11), uint8] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %340 = %333.1;
  %341 = logical_xor(%338, %339) /* ty=Tensor[(5, 14, 11), uint8] */;
  (%340, %var_5262, %341)
}

def @func_7655() -> bool {
  %342 = @func_5363() /* ty=(bool,) */;
  %342.0
}

def @func_4244() -> (bool,) {
  %343 = @func_2858() /* ty=bool */;
  (%343,)
}

def @func_4688() -> (Tensor[(7, 4, 15), bool], Tensor[(7, 4, 15), bool]) {
  %344 = @func_3204() /* ty=(Tensor[(7, 1, 15), float64], Tensor[(6, 11, 8), bool], Tensor[(108), float64], bool, bool) */;
  %345 = %344.0;
  %346 = cast(%345, dtype="bool") /* ty=Tensor[(7, 1, 15), bool] */;
  %347 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 4, 15), float64] */, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
  %348 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 4, 15), float64] */, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
  %349 = cast(%345, dtype="bool") /* ty=Tensor[(7, 1, 15), bool] */;
  %350 = greater(%348, %349) /* ty=Tensor[(7, 4, 15), bool] */;
  %351 = cast(%350, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
  %352 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(7, 4, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 4, 15), float64] */, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %355 = equal(%346, %347) /* ty=Tensor[(7, 4, 15), bool] */;
  %356 = logical_or(%353, %354) /* ty=Tensor[(7, 4, 15), bool] */;
  (%355, %356)
}

def @func_3204() -> (Tensor[(7, 1, 15), float64], Tensor[(6, 11, 8), bool], Tensor[(108), float64], bool, bool) {
  %357 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 1, 15), float64] */;
  %358 = cast(meta[relay.Constant][17] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %359 = cast(meta[relay.Constant][17] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %360 = reshape(%358, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %361 = reshape(%359, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %362 = @func_696(%360, %361) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) */;
  %363 = @func_2193() /* ty=(bool, bool, bool) */;
  %364 = sigmoid(%357) /* ty=Tensor[(7, 1, 15), float64] */;
  %365 = %362.1;
  %366 = @func_2446() /* ty=bool */;
  %367 = %363.1;
  (%364, %365, meta[relay.Constant][17] /* ty=Tensor[(108), float64] */, %366, %367)
}

def @func_7097() -> (Tensor[(7, 4, 15), bool], bool, Tensor[(1050), uint16], bool) {
  %368 = cast(meta[relay.Constant][18] /* ty=Tensor[(1050), uint16] */, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %369 = reshape(%368, newshape=[1050]) /* ty=Tensor[(1050), uint16] */;
  %370 = @func_6084(%369) /* ty=(bool, Tensor[(4, 12, 10), uint32], bool, bool, Tensor[(198), int8], Tensor[(7, 1, 15), float64], Tensor[(1050), uint16]) */;
  %371 = @func_5412() /* ty=Tensor[(7, 4, 15), bool] */;
  %372 = %370.0;
  %373 = @func_1805() /* ty=bool */;
  (%371, %372, meta[relay.Constant][18] /* ty=Tensor[(1050), uint16] */, %373)
}

def @func_3317(%var_3292: Tensor[(11, 8, 1), bool]) -> (Tensor[(11, 8, 1), bool], bool, Tensor[(6, 11, 8), bool], Tensor[(1, 108), float64]) {
  %374 = @func_2858() /* ty=bool */;
  %375 = cast(%374, dtype="bool") /* ty=bool */;
  %376 = cast(%var_3292, dtype="bool") /* ty=Tensor[(11, 8, 1), bool] */;
  %377 = @func_2193() /* ty=(bool, bool, bool) */;
  %378 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 108), float64] */, dtype="float64") /* ty=Tensor[(1, 108), float64] */;
  %379 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 108), float64] */, dtype="float64") /* ty=Tensor[(1, 108), float64] */;
  %380 = reshape(%378, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %381 = reshape(%379, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %382 = @func_696(%380, %381) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) */;
  %383 = greater(%375, %376) /* ty=Tensor[(11, 8, 1), bool] */;
  %384 = %377.1;
  %385 = %382.1;
  (%383, %384, %385, meta[relay.Constant][19] /* ty=Tensor[(1, 108), float64] */)
}

def @func_6193() -> (Tensor[(10, 6, 12), float32], Tensor[(2, 8, 12), int32]) {
  %386 = @func_1879() /* ty=(Tensor[(10, 6, 12), float32],) */;
  %387 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %388 = %386.0;
  %389 = %387.1;
  (%388, %389)
}

def @func_1348(%var_1339: Tensor[(7, 12, 14), float64], %var_1340: Tensor[(7, 12, 14), float64]) -> (Tensor[(7, 12, 14), bool], bool) {
  %390 = cast(%var_1340, dtype="bool") /* ty=Tensor[(7, 12, 14), bool] */;
  %391 = shape_of(%var_1339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%var_1339, dtype="bool") /* ty=Tensor[(7, 12, 14), bool] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %394 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %395 = less(%392, %393) /* ty=Tensor[(7, 12, 14), bool] */;
  %396 = %394.5;
  (%395, %396)
}

def @func_2820() -> (bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), float64]) {
  %397 = @func_2366() /* ty=(bool,) */;
  %398 = %397.0;
  %399 = cast(%398, dtype="bool") /* ty=bool */;
  %400 = reshape(%399, newshape=[]) /* ty=bool */;
  %401 = @func_1776() /* ty=(Tensor[(10, 6, 12), float32], bool) */;
  %402 = @func_1665() /* ty=(bool,) */;
  %403 = cast(%398, dtype="bool") /* ty=bool */;
  %404 = reshape(%403, newshape=[]) /* ty=bool */;
  %405 = @func_289(%404) /* ty=Tensor[(6, 11, 8), bool] */;
  %406 = cast(%405, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
  %407 = sin(%406) /* ty=Tensor[(6, 11, 8), float64] */;
  %408 = cast(%407, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
  %409 = rsqrt(%408) /* ty=Tensor[(6, 11, 8), float64] */;
  %410 = @func_1936() /* ty=bool */;
  %411 = cast(%409, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
  %412 = cast(%410, dtype="float64") /* ty=float64 */;
  %413 = mod(%411, %412) /* ty=Tensor[(6, 11, 8), float64] */;
  %414 = cast(%413, dtype="int64") /* ty=Tensor[(6, 11, 8), int64] */;
  %415 = shape_of(%407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%407, dtype="int64") /* ty=Tensor[(6, 11, 8), int64] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %418 = logical_xor(%416, %417) /* ty=Tensor[(6, 11, 8), int64] */;
  %419 = cast(%418, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
  %420 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%409, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %423 = cast(%409, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
  %424 = @func_289(%400) /* ty=Tensor[(6, 11, 8), bool] */;
  %425 = %401.1;
  %426 = %402.0;
  %427 = less_equal(%421, %422) /* ty=Tensor[(6, 11, 8), bool] */;
  %428 = @func_2446() /* ty=bool */;
  %429 = @func_1957() /* ty=bool */;
  %430 = log(%423) /* ty=Tensor[(6, 11, 8), float64] */;
  (%398, %424, %425, %426, %427, %428, %429, %430)
}

def @func_1460(%var_1409: Tensor[(108), float64], %var_1427: Tensor[(2, 8, 12), bool]) -> (Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(2, 8, 12), int16], Tensor[(2, 8, 12), float32]) {
  %431 = cast(%var_1409, dtype="float64") /* ty=Tensor[(108), float64] */;
  %432 = cast(%var_1409, dtype="float64") /* ty=Tensor[(108), float64] */;
  %433 = reshape(%431, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %434 = reshape(%432, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %435 = @func_696(%433, %434) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) */;
  %436 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %437 = %436.0;
  %438 = cast(%var_1427, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %442 = greater(%440, %441) /* ty=Tensor[(2, 8, 12), bool] */;
  %443 = cast(%437, dtype="int16") /* ty=Tensor[(2, 8, 12), int16] */;
  %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%442, dtype="int16") /* ty=Tensor[(2, 8, 12), int16] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %447 = cast(%442, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %448 = shape_of(%var_1427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%var_1427, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %451 = %435.3;
  %452 = logical_xor(%445, %446) /* ty=Tensor[(2, 8, 12), int16] */;
  %453 = divide(%449, %450) /* ty=Tensor[(2, 8, 12), float32] */;
  (%451, %var_1409, %452, %453)
}

def @func_1709(%var_1688: Tensor[(6, 9, 13), float32], %var_1689: Tensor[(6, 9, 13), float32]) -> Tensor[(6, 9, 13), float64] {
  %454 = cast(%var_1689, dtype="float32") /* ty=Tensor[(6, 9, 13), float32] */;
  %455 = shape_of(%var_1688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%var_1688, dtype="float32") /* ty=Tensor[(6, 9, 13), float32] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %458 = mod(%456, %457) /* ty=Tensor[(6, 9, 13), float32] */;
  %459 = cast(%var_1688, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %463 = logical_or(%461, %462) /* ty=Tensor[(6, 9, 13), bool] */;
  %464 = cast(%463, dtype="float64") /* ty=Tensor[(6, 9, 13), float64] */;
  asin(%464) /* ty=Tensor[(6, 9, 13), float64] */
}

def @func_1913() -> bool {
  %465 = @func_1760() /* ty=(bool,) */;
  %465.0
}

def @func_6923(%var_6921: Tensor[(260), bool]) -> (Tensor[(4, 12, 10), int8], Tensor[(2, 10, 13), int32], Tensor[(260), bool]) {
  %466 = cast(%var_6921, dtype="bool") /* ty=Tensor[(260), bool] */;
  %467 = reshape(%466, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), bool] */;
  %468 = @func_2675(%467) /* ty=(Tensor[(2, 10, 13), int32], Tensor[(2, 10, 13), uint16]) */;
  %469 = @func_6151() /* ty=Tensor[(4, 12, 10), int8] */;
  %470 = %468.0;
  (%469, %470, %var_6921)
}

def @func_1665() -> (bool,) {
  %471 = @func_1498() /* ty=bool */;
  (%471,)
}

def @func_289(%var_284: bool) -> Tensor[(6, 11, 8), bool] {
  %472 = cast(%var_284, dtype="bool") /* ty=bool */;
  %473 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 11, 8), bool] */, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
  logical_and(%472, %473) /* ty=Tensor[(6, 11, 8), bool] */
}

def @func_3625() -> (bool,) {
  %474 = @func_2193() /* ty=(bool, bool, bool) */;
  %475 = %474.0;
  (%475,)
}

def @func_4222(%var_4212: Tensor[(1176), float64]) -> (bool, bool, Tensor[(1176), float64], Tensor[(108), float64]) {
  %476 = cast(%var_4212, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %477 = reshape(%476, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %478 = @func_1796(%477) /* ty=(bool, bool, Tensor[(1176), float64]) */;
  %479 = @func_3204() /* ty=(Tensor[(7, 1, 15), float64], Tensor[(6, 11, 8), bool], Tensor[(108), float64], bool, bool) */;
  %480 = @func_1957() /* ty=bool */;
  %481 = %478.0;
  %482 = %479.2;
  (%480, %481, %var_4212, %482)
}

def @func_3453() -> Tensor[(108), float64] {
  %483 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %483.3
}

def @func_2712() -> bool {
  %484 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %484.0
}

def @func_1498() -> bool {
  %485 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %485.0
}

def @func_6151() -> Tensor[(4, 12, 10), int8] {
  %486 = @func_5732() /* ty=(Tensor[(4, 12, 10), float64],) */;
  %487 = %486.0;
  %488 = cast(%487, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %489 = asinh(%488) /* ty=Tensor[(4, 12, 10), float32] */;
  %490 = cast(%489, dtype="int8") /* ty=Tensor[(4, 12, 10), int8] */;
  %491 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%487, dtype="int8") /* ty=Tensor[(4, 12, 10), int8] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  logical_xor(%492, %493) /* ty=Tensor[(4, 12, 10), int8] */
}

def @func_5231() -> (bool, bool) {
  %494 = @func_2820() /* ty=(bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), float64]) */;
  %495 = @func_2858() /* ty=bool */;
  %496 = %494.6;
  (%495, %496)
}

def @func_4349() -> Tensor[(4, 12, 10), bool] {
  @func_3762() /* ty=Tensor[(4, 12, 10), bool] */
}

def @func_2320(%var_2278: Tensor[(11, 6, 3), int8], %var_2279: Tensor[(11, 6, 3), int8]) -> (Tensor[(11, 6, 3), int8], Tensor[(6, 11, 8), bool], bool, bool) {
  %497 = cast(%var_2279, dtype="int8") /* ty=Tensor[(11, 6, 3), int8] */;
  %498 = shape_of(%var_2278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%var_2278, dtype="int8") /* ty=Tensor[(11, 6, 3), int8] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %501 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %502 = reshape(%501, newshape=[]) /* ty=bool */;
  %503 = minimum(%499, %500) /* ty=Tensor[(11, 6, 3), int8] */;
  %504 = @func_289(%502) /* ty=Tensor[(6, 11, 8), bool] */;
  %505 = @func_1957() /* ty=bool */;
  (%503, %504, False /* ty=bool */, %505)
}

def @func_1277() -> (Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) {
  %506 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 8, 12), bool] */, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %507 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(2, 8, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 8, 12), bool] */, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %510 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 8, 12), bool] */, dtype="int32") /* ty=Tensor[(2, 8, 12), int32] */;
  %511 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(2, 8, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 8, 12), bool] */, dtype="int32") /* ty=Tensor[(2, 8, 12), int32] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %514 = cast(meta[relay.Constant][23] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %515 = cast(meta[relay.Constant][23] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %516 = reshape(%514, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %517 = reshape(%515, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %518 = @func_696(%516, %517) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) */;
  %519 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %520 = reshape(%519, newshape=[]) /* ty=bool */;
  %521 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 8, 12), bool] */, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %522 = logical_and(%508, %509) /* ty=Tensor[(2, 8, 12), bool] */;
  %523 = bitwise_and(%512, %513) /* ty=Tensor[(2, 8, 12), int32] */;
  %524 = %518.3;
  %525 = @func_289(%520) /* ty=Tensor[(6, 11, 8), bool] */;
  %526 = sqrt(%521) /* ty=Tensor[(2, 8, 12), float64] */;
  (%522, %523, %524, meta[relay.Constant][23] /* ty=Tensor[(108), float64] */, %525, False /* ty=bool */, %526)
}

def @func_3498() -> (bool, bool) {
  %527 = @func_1665() /* ty=(bool,) */;
  %528 = @func_1665() /* ty=(bool,) */;
  %529 = %527.0;
  %530 = %528.0;
  (%529, %530)
}

def @func_4731(%var_4719: Tensor[(5, 210), uint16]) -> (bool, Tensor[(1176), float64], Tensor[(1176), float64], Tensor[(7, 10, 15), float32], Tensor[(5, 210), uint16]) {
  %531 = @func_4084() /* ty=(bool,) */;
  %532 = cast(meta[relay.Constant][24] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %533 = reshape(%532, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %534 = @func_1796(%533) /* ty=(bool, bool, Tensor[(1176), float64]) */;
  %535 = cast(%var_4719, dtype="uint16") /* ty=Tensor[(5, 210), uint16] */;
  %536 = reshape(%535, newshape=[7, 10, 15]) /* ty=Tensor[(7, 10, 15), uint16] */;
  %537 = @func_3577(%536) /* ty=(Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(7, 10, 15), float32], Tensor[(7, 10, 15), float32]) */;
  %538 = %531.0;
  %539 = %534.2;
  %540 = %537.2;
  (%538, %539, meta[relay.Constant][24] /* ty=Tensor[(1176), float64] */, %540, %var_4719)
}

def @func_6268(%var_6253: Tensor[(7, 10, 4), float64]) -> (Tensor[(7, 10, 4), float64],) {
  %541 = cast(%var_6253, dtype="float64") /* ty=Tensor[(7, 10, 4), float64] */;
  %542 = acos(%541) /* ty=Tensor[(7, 10, 4), float64] */;
  (%542,)
}

def @func_2094() -> (bool, Tensor[(2, 8, 12), int32]) {
  %543 = @func_1665() /* ty=(bool,) */;
  %544 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %545 = %543.0;
  %546 = %544.1;
  (%545, %546)
}

def @func_2545(%var_2536: Tensor[(108), float64]) -> (bool, Tensor[(2, 8, 12), int16], Tensor[(108), float64], Tensor[(192), bool], bool) {
  %547 = @func_2094() /* ty=(bool, Tensor[(2, 8, 12), int32]) */;
  %548 = cast(%var_2536, dtype="float64") /* ty=Tensor[(108), float64] */;
  %549 = cast(meta[relay.Constant][25] /* ty=Tensor[(192), bool] */, dtype="bool") /* ty=Tensor[(192), bool] */;
  %550 = reshape(%548, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %551 = reshape(%549, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), bool] */;
  %552 = @func_1460(%550, %551) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(2, 8, 12), int16], Tensor[(2, 8, 12), float32]) */;
  %553 = %547.0;
  %554 = %552.2;
  %555 = @func_1498() /* ty=bool */;
  (%553, %554, %var_2536, meta[relay.Constant][25] /* ty=Tensor[(192), bool] */, %555)
}

def @func_696(%var_673: Tensor[(4, 3, 9), float64], %var_674: Tensor[(4, 3, 9), float64]) -> (Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) {
  %556 = cast(%var_674, dtype="float64") /* ty=Tensor[(4, 3, 9), float64] */;
  %557 = shape_of(%var_673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%var_673, dtype="float64") /* ty=Tensor[(4, 3, 9), float64] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %560 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %561 = reshape(%560, newshape=[]) /* ty=bool */;
  %562 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %563 = reshape(%562, newshape=[]) /* ty=bool */;
  %564 = floor_divide(%558, %559) /* ty=Tensor[(4, 3, 9), float64] */;
  %565 = @func_289(%561) /* ty=Tensor[(6, 11, 8), bool] */;
  %566 = @func_289(%563) /* ty=Tensor[(6, 11, 8), bool] */;
  (%564, %565, False /* ty=bool */, %566)
}

def @func_2858() -> bool {
  @func_1498() /* ty=bool */
}

def @main(%var_8222: Tensor[(7, 3, 15), float64]) -> (Tensor[(1176), float64], Tensor[(1050), uint16], bool, Tensor[(2160), bool], Tensor[(108), float64], Tensor[(7, 3, 15), bool], Tensor[(7, 1, 15), bool]) {
  %567 = cast(meta[relay.Constant][26] /* ty=Tensor[(1050), uint16] */, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %568 = reshape(%567, newshape=[5, 210]) /* ty=Tensor[(5, 210), uint16] */;
  %569 = @func_4731(%568) /* ty=(bool, Tensor[(1176), float64], Tensor[(1176), float64], Tensor[(7, 10, 15), float32], Tensor[(5, 210), uint16]) */;
  %570 = @func_1665() /* ty=(bool,) */;
  %571 = @func_6565() /* ty=(Tensor[(108), float64],) */;
  %572 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
  %573 = cast(%572, dtype="uint64") /* ty=Tensor[(7, 1, 15), uint64] */;
  %574 = cast(%var_8222, dtype="uint64") /* ty=Tensor[(7, 3, 15), uint64] */;
  %575 = bitwise_xor(%573, %574) /* ty=Tensor[(7, 3, 15), uint64] */;
  %576 = @func_7655() /* ty=bool */;
  %577 = cast(%575, dtype="bool") /* ty=Tensor[(7, 3, 15), bool] */;
  %578 = cast(%576, dtype="bool") /* ty=bool */;
  %579 = cast(meta[relay.Constant][27] /* ty=Tensor[(2160), bool] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %580 = reshape(%579, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), bool] */;
  %581 = @func_5821(%580) /* ty=(bool, Tensor[(9, 15, 16), uint32], bool, Tensor[(6, 11, 8), bool], Tensor[(198), int8]) */;
  %582 = %581.2;
  %583 = cast(%582, dtype="bool") /* ty=bool */;
  %584 = cast(%572, dtype="bool") /* ty=Tensor[(7, 1, 15), bool] */;
  %585 = %569.2;
  %586 = %570.0;
  %587 = %571.0;
  %588 = not_equal(%577, %578) /* ty=Tensor[(7, 3, 15), bool] */;
  %589 = less(%583, %584) /* ty=Tensor[(7, 1, 15), bool] */;
  (%585, meta[relay.Constant][26] /* ty=Tensor[(1050), uint16] */, %586, meta[relay.Constant][27] /* ty=Tensor[(2160), bool] */, %587, %588, %589)
}

def @func_8106() -> (Tensor[(108), float64],) {
  %590 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %591 = %590.3;
  (%591,)
}

def @func_4521(%var_4441: Tensor[(9, 16, 7), uint64], %var_4493: Tensor[(9, 16, 7), bool], %var_4502: Tensor[(9, 16, 7), bool]) -> (Tensor[(9, 16, 7), float64], bool, Tensor[(7, 1, 15), float64], Tensor[(108), float64], Tensor[(1, 48), float64], Tensor[(1176), float64], Tensor[(9, 16, 7), int64], bool, Tensor[(9, 16, 7), bool], Tensor[(9, 16, 7), float64]) {
  %592 = cast(%var_4441, dtype="uint64") /* ty=Tensor[(9, 16, 7), uint64] */;
  %593 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(9, 16, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 16, 7), uint64] */, dtype="uint64") /* ty=Tensor[(9, 16, 7), uint64] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %596 = subtract(%594, %595) /* ty=Tensor[(9, 16, 7), uint64] */;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %598 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(9, 16, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 16, 7), uint64] */, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %601 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 48), float64] */, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
  %602 = cast(meta[relay.Constant][30] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %603 = reshape(%601, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
  %604 = reshape(%602, newshape=[1, 1176]) /* ty=Tensor[(1, 1176), float64] */;
  %605 = @func_4298(%603, %604) /* ty=(Tensor[(6, 2, 4), float32], bool, Tensor[(7, 12, 14), bool], Tensor[(1, 1176), float64], Tensor[(108), float64]) */;
  %606 = cast(%var_4441, dtype="float32") /* ty=Tensor[(9, 16, 7), float32] */;
  %607 = sinh(%606) /* ty=Tensor[(9, 16, 7), float32] */;
  %608 = @func_4244() /* ty=(bool,) */;
  %609 = %608.0;
  %610 = cast(%607, dtype="int64") /* ty=Tensor[(9, 16, 7), int64] */;
  %611 = cast(%609, dtype="int64") /* ty=int64 */;
  %612 = cast(%596, dtype="bool") /* ty=Tensor[(9, 16, 7), bool] */;
  %613 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%607, dtype="bool") /* ty=Tensor[(9, 16, 7), bool] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %616 = logical_and(%614, %615) /* ty=Tensor[(9, 16, 7), bool] */;
  %617 = cast(%var_4502, dtype="bool") /* ty=Tensor[(9, 16, 7), bool] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%616, dtype="bool") /* ty=Tensor[(9, 16, 7), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = cast(%var_4493, dtype="float32") /* ty=Tensor[(9, 16, 7), float32] */;
  %622 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%616, dtype="float32") /* ty=Tensor[(9, 16, 7), float32] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %625 = maximum(%623, %624) /* ty=Tensor[(9, 16, 7), float32] */;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %627 = divide(%599, %600) /* ty=Tensor[(9, 16, 7), float64] */;
  %628 = @func_1936() /* ty=bool */;
  %629 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
  %630 = %605.4;
  %631 = multiply(%610, %611) /* ty=Tensor[(9, 16, 7), int64] */;
  %632 = @func_1936() /* ty=bool */;
  %633 = less_equal(%619, %620) /* ty=Tensor[(9, 16, 7), bool] */;
  %634 = cos(%626) /* ty=Tensor[(9, 16, 7), float64] */;
  (%627, %628, %629, %630, meta[relay.Constant][29] /* ty=Tensor[(1, 48), float64] */, meta[relay.Constant][30] /* ty=Tensor[(1176), float64] */, %631, %632, %633, %634)
}

def @func_4785() -> bool {
  @func_2712() /* ty=bool */
}

def @func_7144(%var_7121: Tensor[(1176), float64]) -> (Tensor[(10, 6, 12), float32], bool, Tensor[(4, 2), bool], Tensor[(1176), float64], bool) {
  %635 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 2), bool] */, dtype="bool") /* ty=Tensor[(4, 2), bool] */;
  %636 = cast(%var_7121, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %637 = reshape(%635, newshape=[1, 8]) /* ty=Tensor[(1, 8), bool] */;
  %638 = reshape(%636, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %639 = @func_4041(%637, %638) /* ty=(bool, Tensor[(1, 8), float32], bool, Tensor[(1176), float64], Tensor[(1176), float64], bool, Tensor[(108), float64], bool) */;
  %640 = cast(%var_7121, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %641 = reshape(%640, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %642 = @func_4222(%641) /* ty=(bool, bool, Tensor[(1176), float64], Tensor[(108), float64]) */;
  %643 = @func_3877() /* ty=Tensor[(10, 6, 12), float32] */;
  %644 = %639.5;
  %645 = %642.0;
  (%643, %644, meta[relay.Constant][31] /* ty=Tensor[(4, 2), bool] */, %var_7121, %645)
}

def @func_1337() -> (bool, Tensor[(2, 8, 12), float32]) {
  %646 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %647 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %648 = %647.0;
  %649 = cast(%648, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %650 = %646.5;
  %651 = sigmoid(%649) /* ty=Tensor[(2, 8, 12), float32] */;
  (%650, %651)
}

def @func_7478(%var_7457: Tensor[(15, 13, 1), int16]) -> (Tensor[(15, 13, 1), int16], Tensor[(15, 13, 1), float32]) {
  %652 = cast(meta[relay.Constant][32] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %653 = cast(%var_7457, dtype="int16") /* ty=Tensor[(15, 13, 1), int16] */;
  %654 = cast(%var_7457, dtype="float32") /* ty=Tensor[(15, 13, 1), float32] */;
  %655 = subtract(%652, %653) /* ty=Tensor[(15, 13, 1), int16] */;
  %656 = tan(%654) /* ty=Tensor[(15, 13, 1), float32] */;
  (%655, %656)
}

def @func_2628() -> (bool,) {
  %657 = @func_1957() /* ty=bool */;
  (%657,)
}

def @func_5412() -> Tensor[(7, 4, 15), bool] {
  %658 = @func_4688() /* ty=(Tensor[(7, 4, 15), bool], Tensor[(7, 4, 15), bool]) */;
  %658.1
}

def @func_5001(%var_4992: Tensor[(8), bool]) -> (bool, bool, Tensor[(8), bool], Tensor[(588, 2), float64], Tensor[(7, 4, 15), bool]) {
  %659 = cast(%var_4992, dtype="bool") /* ty=Tensor[(8), bool] */;
  %660 = cast(meta[relay.Constant][33] /* ty=Tensor[(588, 2), float64] */, dtype="float64") /* ty=Tensor[(588, 2), float64] */;
  %661 = reshape(%659, newshape=[8, 1]) /* ty=Tensor[(8, 1), bool] */;
  %662 = reshape(%660, newshape=[588, 2]) /* ty=Tensor[(588, 2), float64] */;
  %663 = @func_4963(%661, %662) /* ty=(bool, bool, bool, Tensor[(8, 1), bool], Tensor[(6, 2, 4), float32], Tensor[(48), float64], Tensor[(588, 2), float64]) */;
  %664 = @func_4688() /* ty=(Tensor[(7, 4, 15), bool], Tensor[(7, 4, 15), bool]) */;
  %665 = @func_1936() /* ty=bool */;
  %666 = %663.0;
  %667 = %664.1;
  (%665, %666, %var_4992, meta[relay.Constant][33] /* ty=Tensor[(588, 2), float64] */, %667)
}

def @func_6168(%var_6157: Tensor[(4, 12, 10), int8]) -> (Tensor[(4, 12, 10), float32], Tensor[(7, 4, 15), bool]) {
  %668 = @func_6151() /* ty=Tensor[(4, 12, 10), int8] */;
  %669 = cast(%var_6157, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%668, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %673 = @func_4688() /* ty=(Tensor[(7, 4, 15), bool], Tensor[(7, 4, 15), bool]) */;
  %674 = power(%671, %672) /* ty=Tensor[(4, 12, 10), float32] */;
  %675 = %673.1;
  (%674, %675)
}

def @func_3877() -> Tensor[(10, 6, 12), float32] {
  %676 = @func_1879() /* ty=(Tensor[(10, 6, 12), float32],) */;
  %676.0
}

def @func_1852(%var_1833: Tensor[(6, 11, 8), bool], %var_1848: bool) -> (Tensor[(6, 11, 8), uint64], Tensor[(6, 11, 8), bool], Tensor[(84, 1), float32], bool) {
  %677 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %678 = %677.2;
  %679 = cast(%var_1833, dtype="uint64") /* ty=Tensor[(6, 11, 8), uint64] */;
  %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%678, dtype="uint64") /* ty=Tensor[(6, 11, 8), uint64] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %683 = cast(meta[relay.Constant][34] /* ty=Tensor[(84, 1), float32] */, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
  %684 = cast(meta[relay.Constant][34] /* ty=Tensor[(84, 1), float32] */, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
  %685 = cast(%var_1848, dtype="bool") /* ty=bool */;
  %686 = reshape(%683, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), float32] */;
  %687 = reshape(%684, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), float32] */;
  %688 = reshape(%685, newshape=[]) /* ty=bool */;
  %689 = @func_1601(%686, %687, %688) /* ty=(Tensor[(3, 14, 2), float32], Tensor[(2, 8, 12), float32], Tensor[(6, 11, 8), bool]) */;
  %690 = right_shift(%681, %682) /* ty=Tensor[(6, 11, 8), uint64] */;
  %691 = %689.2;
  (%690, %691, meta[relay.Constant][34] /* ty=Tensor[(84, 1), float32] */, %var_1848)
}

def @func_3906() -> (bool, Tensor[(2, 8, 12), float32], bool, bool, Tensor[(108), float64]) {
  %692 = @func_2406() /* ty=(bool,) */;
  %693 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %694 = cast(meta[relay.Constant][35] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %695 = reshape(%694, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %696 = @func_2545(%695) /* ty=(bool, Tensor[(2, 8, 12), int16], Tensor[(108), float64], Tensor[(192), bool], bool) */;
  %697 = %692.0;
  %698 = %693.1;
  %699 = @func_1957() /* ty=bool */;
  %700 = %696.4;
  (%697, %698, %699, %700, meta[relay.Constant][35] /* ty=Tensor[(108), float64] */)
}

def @func_2948() -> (bool,) {
  %701 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %702 = %701.0;
  (%702,)
}

def @func_8037(%var_8022: Tensor[(48), float64], %var_8023: Tensor[(1176), float64]) -> (bool, Tensor[(108), float64], Tensor[(48), float64], Tensor[(1176), float64], bool) {
  %703 = @func_5363() /* ty=(bool,) */;
  %704 = cast(%var_8022, dtype="float64") /* ty=Tensor[(48), float64] */;
  %705 = cast(%var_8023, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %706 = reshape(%704, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
  %707 = reshape(%705, newshape=[1, 1176]) /* ty=Tensor[(1, 1176), float64] */;
  %708 = @func_4298(%706, %707) /* ty=(Tensor[(6, 2, 4), float32], bool, Tensor[(7, 12, 14), bool], Tensor[(1, 1176), float64], Tensor[(108), float64]) */;
  %709 = @func_2366() /* ty=(bool,) */;
  %710 = %703.0;
  %711 = %708.4;
  %712 = %709.0;
  (%710, %711, %var_8022, %var_8023, %712)
}

def @func_6871() -> bool {
  %713 = @func_2948() /* ty=(bool,) */;
  %713.0
}

def @func_5150(%var_5138: Tensor[(1296), float64]) -> (bool, Tensor[(2, 8, 12), float32], bool, Tensor[(1296), float64]) {
  %714 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %715 = cast(%var_5138, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %716 = reshape(%715, newshape=[9, 16, 9]) /* ty=Tensor[(9, 16, 9), float64] */;
  %717 = @func_2170(%716) /* ty=(Tensor[(9, 16, 9), float64], bool) */;
  %718 = @func_4785() /* ty=bool */;
  %719 = %714.1;
  %720 = %717.1;
  (%718, %719, %720, %var_5138)
}

def @func_5468() -> (bool,) {
  %721 = @func_5042() /* ty=(bool, bool) */;
  %722 = %721.0;
  (%722,)
}

def @func_5603() -> bool {
  @func_1498() /* ty=bool */
}

def @func_7544(%var_7519: Tensor[(1, 2), float64]) -> (Tensor[(1, 2), float64],) {
  %723 = cast(%var_7519, dtype="float64") /* ty=Tensor[(1, 2), float64] */;
  %724 = tan(%723) /* ty=Tensor[(1, 2), float64] */;
  (%724,)
}

def @func_7280(%var_7228: Tensor[(1176), float64]) -> (bool, Tensor[(2, 8, 12), float32], Tensor[(1176), float64]) {
  %725 = @func_3625() /* ty=(bool,) */;
  %726 = cast(%var_7228, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %727 = reshape(%726, newshape=[2, 588]) /* ty=Tensor[(2, 588), float64] */;
  %728 = @func_5889(%727) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(8, 1), bool], Tensor[(8), bool], Tensor[(2, 588), float64]) */;
  %729 = cast(%var_7228, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %730 = atan(%729) /* ty=Tensor[(1176), float32] */;
  %731 = cast(meta[relay.Constant][36] /* ty=Tensor[(1176), float32] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(1), int32] */;
  %733 = cast(%730, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?), float64] */;
  %735 = %725.0;
  %736 = %728.0;
  %737 = floor_mod(%733, %734) /* ty=Tensor[(1176), float64] */;
  (%735, %736, %737)
}

def @func_7063(%var_7057: Tensor[(12, 2, 12), uint16]) -> Tensor[(12, 2, 12), uint16] {
  %738 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 2, 12), uint16] */, dtype="uint16") /* ty=Tensor[(1, 2, 12), uint16] */;
  %739 = cast(%var_7057, dtype="uint16") /* ty=Tensor[(12, 2, 12), uint16] */;
  bitwise_xor(%738, %739) /* ty=Tensor[(12, 2, 12), uint16] */
}

def @func_4298(%var_4258: Tensor[(6, 2, 4), float64], %var_4283: Tensor[(1, 1176), float64]) -> (Tensor[(6, 2, 4), float32], bool, Tensor[(7, 12, 14), bool], Tensor[(1, 1176), float64], Tensor[(108), float64]) {
  %740 = cast(%var_4258, dtype="float64") /* ty=Tensor[(6, 2, 4), float64] */;
  %741 = tan(%740) /* ty=Tensor[(6, 2, 4), float64] */;
  %742 = cast(%var_4258, dtype="float32") /* ty=Tensor[(6, 2, 4), float32] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="float32") /* ty=Tensor[(6, 2, 4), float32] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %746 = cast(%var_4283, dtype="float64") /* ty=Tensor[(1, 1176), float64] */;
  %747 = cast(%var_4283, dtype="float64") /* ty=Tensor[(1, 1176), float64] */;
  %748 = reshape(%746, newshape=[7, 12, 14]) /* ty=Tensor[(7, 12, 14), float64] */;
  %749 = reshape(%747, newshape=[7, 12, 14]) /* ty=Tensor[(7, 12, 14), float64] */;
  %750 = @func_1348(%748, %749) /* ty=(Tensor[(7, 12, 14), bool], bool) */;
  %751 = mod(%744, %745) /* ty=Tensor[(6, 2, 4), float32] */;
  %752 = @func_1636() /* ty=bool */;
  %753 = %750.0;
  %754 = @func_3453() /* ty=Tensor[(108), float64] */;
  (%751, %752, %753, %var_4283, %754)
}

def @func_2366() -> (bool,) {
  %755 = @func_2054() /* ty=(bool, bool) */;
  %756 = %755.0;
  (%756,)
}

def @func_5732() -> (Tensor[(4, 12, 10), float64],) {
  %757 = @func_3762() /* ty=Tensor[(4, 12, 10), bool] */;
  %758 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 12, 10), bool] */, dtype="int64") /* ty=Tensor[(4, 12, 10), int64] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="int64") /* ty=Tensor[(4, 12, 10), int64] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %762 = left_shift(%760, %761) /* ty=Tensor[(4, 12, 10), int64] */;
  %763 = cast(%762, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %764 = cosh(%763) /* ty=Tensor[(4, 12, 10), float64] */;
  (%764,)
}

def @func_2923() -> (bool, bool) {
  %765 = @func_1498() /* ty=bool */;
  %766 = @func_1636() /* ty=bool */;
  (%765, %766)
}

def @func_4130() -> (bool, bool) {
  %767 = @func_2148() /* ty=(bool, bool, bool, Tensor[(6, 11, 8), bool], bool) */;
  %768 = @func_3667() /* ty=(bool, bool, Tensor[(108, 1), float64]) */;
  %769 = %767.4;
  %770 = %768.0;
  (%769, %770)
}

def @func_4861(%var_4857: Tensor[(5, 210), float32]) -> (Tensor[(7, 1, 15), float64], Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(5, 210), uint32]) {
  %771 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 210), uint16] */, dtype="uint16") /* ty=Tensor[(5, 210), uint16] */;
  %772 = reshape(%771, newshape=[7, 10, 15]) /* ty=Tensor[(7, 10, 15), uint16] */;
  %773 = @func_3577(%772) /* ty=(Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(7, 10, 15), float32], Tensor[(7, 10, 15), float32]) */;
  %774 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 210), uint16] */, dtype="float32") /* ty=Tensor[(5, 210), float32] */;
  %775 = asinh(%774) /* ty=Tensor[(5, 210), float32] */;
  %776 = cast(%var_4857, dtype="uint32") /* ty=Tensor[(5, 210), uint32] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(2), int32] */;
  %778 = cast(%775, dtype="uint32") /* ty=Tensor[(5, 210), uint32] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %780 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
  %781 = %773.0;
  %782 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
  %783 = bitwise_and(%778, %779) /* ty=Tensor[(5, 210), uint32] */;
  (%780, %781, %782, %783)
}

def @func_3762() -> Tensor[(4, 12, 10), bool] {
  %784 = @func_2406() /* ty=(bool,) */;
  %785 = %784.0;
  %786 = cast(%785, dtype="bool") /* ty=bool */;
  %787 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 12, 10), bool] */, dtype="bool") /* ty=Tensor[(4, 12, 10), bool] */;
  equal(%786, %787) /* ty=Tensor[(4, 12, 10), bool] */
}

def @func_1936() -> bool {
  @func_1913() /* ty=bool */
}

def @func_4153(%var_4138: Tensor[(9, 10, 3), float64], %var_4139: Tensor[(9, 10, 3), float64]) -> (Tensor[(9, 10, 3), float64], bool) {
  %788 = cast(%var_4139, dtype="float64") /* ty=Tensor[(9, 10, 3), float64] */;
  %789 = shape_of(%var_4138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%var_4138, dtype="float64") /* ty=Tensor[(9, 10, 3), float64] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %792 = @func_4084() /* ty=(bool,) */;
  %793 = floor_divide(%790, %791) /* ty=Tensor[(9, 10, 3), float64] */;
  %794 = %792.0;
  (%793, %794)
}

def @func_6216() -> (Tensor[(4, 12, 10), float64],) {
  %795 = @func_5732() /* ty=(Tensor[(4, 12, 10), float64],) */;
  %796 = %795.0;
  (%796,)
}

def @func_2521() -> (bool,) {
  %797 = @func_1936() /* ty=bool */;
  (%797,)
}

def @func_7591() -> (bool, bool, Tensor[(108), float64]) {
  %798 = @func_7097() /* ty=(Tensor[(7, 4, 15), bool], bool, Tensor[(1050), uint16], bool) */;
  %799 = @func_2858() /* ty=bool */;
  %800 = %798.3;
  %801 = @func_3453() /* ty=Tensor[(108), float64] */;
  (%799, %800, %801)
}

def @func_1879() -> (Tensor[(10, 6, 12), float32],) {
  %802 = @func_1776() /* ty=(Tensor[(10, 6, 12), float32], bool) */;
  %803 = %802.0;
  (%803,)
}

def @func_6678(%var_6673: Tensor[(108), float64]) -> (Tensor[(108), bool],) {
  %804 = @func_3906() /* ty=(bool, Tensor[(2, 8, 12), float32], bool, bool, Tensor[(108), float64]) */;
  %805 = %804.4;
  %806 = cast(%var_6673, dtype="bool") /* ty=Tensor[(108), bool] */;
  %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(1), int32] */;
  %808 = cast(%805, dtype="bool") /* ty=Tensor[(108), bool] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?), bool] */;
  %810 = not_equal(%808, %809) /* ty=Tensor[(108), bool] */;
  (%810,)
}

def @func_4041(%var_3970: Tensor[(1, 8), bool], %var_4001: Tensor[(1176), float64]) -> (bool, Tensor[(1, 8), float32], bool, Tensor[(1176), float64], Tensor[(1176), float64], bool, Tensor[(108), float64], bool) {
  %811 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %812 = @func_2521() /* ty=(bool,) */;
  %813 = %812.0;
  %814 = cast(%813, dtype="float32") /* ty=float32 */;
  %815 = cast(%var_3970, dtype="float32") /* ty=Tensor[(1, 8), float32] */;
  %816 = @func_2948() /* ty=(bool,) */;
  %817 = cast(%var_4001, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %818 = reshape(%817, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %819 = @func_1796(%818) /* ty=(bool, bool, Tensor[(1176), float64]) */;
  %820 = cast(meta[relay.Constant][41] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %821 = reshape(%820, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %822 = @func_2545(%821) /* ty=(bool, Tensor[(2, 8, 12), int16], Tensor[(108), float64], Tensor[(192), bool], bool) */;
  %823 = @func_2148() /* ty=(bool, bool, bool, Tensor[(6, 11, 8), bool], bool) */;
  %824 = %811.5;
  %825 = divide(%814, %815) /* ty=Tensor[(1, 8), float32] */;
  %826 = %816.0;
  %827 = %819.2;
  %828 = %822.0;
  %829 = %823.1;
  (%824, %825, %826, %827, %var_4001, %828, meta[relay.Constant][41] /* ty=Tensor[(108), float64] */, %829)
}

def @func_3794(%var_3778: Tensor[(8, 14, 16), float64]) -> (Tensor[(8, 14, 16), uint8],) {
  %830 = cast(%var_3778, dtype="float64") /* ty=Tensor[(8, 14, 16), float64] */;
  %831 = cos(%830) /* ty=Tensor[(8, 14, 16), float64] */;
  %832 = cast(%831, dtype="uint8") /* ty=Tensor[(8, 14, 16), uint8] */;
  %833 = shape_of(%var_3778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %834 = cast(%var_3778, dtype="uint8") /* ty=Tensor[(8, 14, 16), uint8] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %836 = logical_xor(%834, %835) /* ty=Tensor[(8, 14, 16), uint8] */;
  (%836,)
}

def @func_5348() -> (bool,) {
  %837 = @func_2193() /* ty=(bool, bool, bool) */;
  %838 = %837.2;
  (%838,)
}

def @func_2193() -> (bool, bool, bool) {
  %839 = @func_2054() /* ty=(bool, bool) */;
  %840 = %839.1;
  %841 = @func_1936() /* ty=bool */;
  %842 = @func_1913() /* ty=bool */;
  (%840, %841, %842)
}

def @func_2054() -> (bool, bool) {
  %843 = @func_1665() /* ty=(bool,) */;
  %844 = @func_1636() /* ty=bool */;
  %845 = %843.0;
  (%844, %845)
}

def @func_1957() -> bool {
  %846 = @func_1665() /* ty=(bool,) */;
  %846.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1856(%var_1854: Tensor[(6, 11, 8), bool], %var_1855: bool) -> (Tensor[(6, 11, 8), uint64], Tensor[(6, 11, 8), bool], Tensor[(84, 1), float32], bool) {
  @func_1852(%var_1854, %var_1855) /* ty=(Tensor[(6, 11, 8), uint64], Tensor[(6, 11, 8), bool], Tensor[(84, 1), float32], bool) */
}

def @func_1959() -> bool {
  @func_1957() /* ty=bool */
}

def @func_6566() -> (Tensor[(108), float64],) {
  %1 = fn () -> (Tensor[(108), float64],) {
    %0 = @func_3453() /* ty=Tensor[(108), float64] */;
    (%0,)
  };
  %1() /* ty=(Tensor[(108), float64],) */
}

def @func_2096() -> (bool, Tensor[(2, 8, 12), int32]) {
  @func_2094() /* ty=(bool, Tensor[(2, 8, 12), int32]) */
}

def @func_4224(%var_4223: Tensor[(1176), float64]) -> (bool, bool, Tensor[(1176), float64], Tensor[(108), float64]) {
  %9 = fn (%var_4212: Tensor[(1176), float64]) -> (bool, bool, Tensor[(1176), float64], Tensor[(108), float64]) {
    %2 = cast(%var_4212, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %3 = reshape(%2, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
    %4 = @func_1796(%3) /* ty=(bool, bool, Tensor[(1176), float64]) */;
    %5 = @func_3204() /* ty=(Tensor[(7, 1, 15), float64], Tensor[(6, 11, 8), bool], Tensor[(108), float64], bool, bool) */;
    %6 = @func_1957() /* ty=bool */;
    %7 = %4.0;
    %8 = %5.2;
    (%6, %7, %var_4212, %8)
  };
  %9(%var_4223) /* ty=(bool, bool, Tensor[(1176), float64], Tensor[(108), float64]) */
}

def @func_5363() -> (bool,) {
  %10 = @func_2948() /* ty=(bool,) */;
  %11 = %10.0;
  (%11,)
}

def @func_291(%var_290: bool) -> Tensor[(6, 11, 8), bool] {
  %14 = fn (%var_284: bool) -> Tensor[(6, 11, 8), bool] {
    %12 = cast(%var_284, dtype="bool") /* ty=bool */;
    %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 11, 8), bool] */, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
    logical_and(%12, %13) /* ty=Tensor[(6, 11, 8), bool] */
  };
  %14(%var_290) /* ty=Tensor[(6, 11, 8), bool] */
}

def @func_3070() -> (Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), bool], bool, Tensor[(2, 8, 12), float64]) {
  @func_3068() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), bool], bool, Tensor[(2, 8, 12), float64]) */
}

def @func_5733() -> (Tensor[(4, 12, 10), float64],) {
  %23 = fn () -> (Tensor[(4, 12, 10), float64],) {
    %15 = @func_3762() /* ty=Tensor[(4, 12, 10), bool] */;
    %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 12, 10), bool] */, dtype="int64") /* ty=Tensor[(4, 12, 10), int64] */;
    %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
    %18 = cast(%15, dtype="int64") /* ty=Tensor[(4, 12, 10), int64] */;
    %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %20 = left_shift(%18, %19) /* ty=Tensor[(4, 12, 10), int64] */;
    %21 = cast(%20, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
    %22 = cosh(%21) /* ty=Tensor[(4, 12, 10), float64] */;
    (%22,)
  };
  %23() /* ty=(Tensor[(4, 12, 10), float64],) */
}

def @func_1460(%var_1409: Tensor[(108), float64], %var_1427: Tensor[(2, 8, 12), bool]) -> (Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(2, 8, 12), int16], Tensor[(2, 8, 12), float32]) {
  %24 = cast(%var_1409, dtype="float64") /* ty=Tensor[(108), float64] */;
  %25 = cast(%var_1409, dtype="float64") /* ty=Tensor[(108), float64] */;
  %26 = reshape(%24, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %27 = reshape(%25, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %28 = @func_696(%26, %27) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) */;
  %29 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %30 = %29.0;
  %31 = cast(%var_1427, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = greater(%33, %34) /* ty=Tensor[(2, 8, 12), bool] */;
  %36 = cast(%30, dtype="int16") /* ty=Tensor[(2, 8, 12), int16] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="int16") /* ty=Tensor[(2, 8, 12), int16] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %40 = cast(%35, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %41 = shape_of(%var_1427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%var_1427, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %44 = %28.3;
  %45 = logical_xor(%38, %39) /* ty=Tensor[(2, 8, 12), int16] */;
  %46 = divide(%42, %43) /* ty=Tensor[(2, 8, 12), float32] */;
  (%44, %var_1409, %45, %46)
}

def @func_1638() -> bool {
  @func_1636() /* ty=bool */
}

def @func_6151() -> Tensor[(4, 12, 10), int8] {
  %47 = @func_5732() /* ty=(Tensor[(4, 12, 10), float64],) */;
  %48 = %47.0;
  %49 = cast(%48, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %50 = asinh(%49) /* ty=Tensor[(4, 12, 10), float32] */;
  %51 = cast(%50, dtype="int8") /* ty=Tensor[(4, 12, 10), int8] */;
  %52 = shape_of(%48, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%48, dtype="int8") /* ty=Tensor[(4, 12, 10), int8] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  logical_xor(%53, %54) /* ty=Tensor[(4, 12, 10), int8] */
}

def @func_3625() -> (bool,) {
  %55 = @func_2193() /* ty=(bool, bool, bool) */;
  %56 = %55.0;
  (%56,)
}

def @func_7554() -> (bool,) {
  %57 = @func_5468() /* ty=(bool,) */;
  %58 = %57.0;
  (%58,)
}

def @func_2149() -> (bool, bool, bool, Tensor[(6, 11, 8), bool], bool) {
  %67 = fn () -> (bool, bool, bool, Tensor[(6, 11, 8), bool], bool) {
    %59 = @func_1776() /* ty=(Tensor[(10, 6, 12), float32], bool) */;
    %60 = %59.1;
    %61 = cast(%60, dtype="bool") /* ty=bool */;
    %62 = reshape(%61, newshape=[]) /* ty=bool */;
    %63 = @func_1636() /* ty=bool */;
    %64 = @func_1805() /* ty=bool */;
    %65 = @func_289(%62) /* ty=Tensor[(6, 11, 8), bool] */;
    %66 = @func_1498() /* ty=bool */;
    (%63, %60, %64, %65, %66)
  };
  %67() /* ty=(bool, bool, bool, Tensor[(6, 11, 8), bool], bool) */
}

def @func_5350() -> (bool,) {
  @func_5348() /* ty=(bool,) */
}

def @func_7655() -> bool {
  %68 = @func_5363() /* ty=(bool,) */;
  %68.0
}

def @func_7934(%var_7933: Tensor[(16, 2, 7), float64]) -> (Tensor[(16, 2, 7), float32],) {
  %78 = fn (%var_7908: Tensor[(16, 2, 7), float64]) -> (Tensor[(16, 2, 7), float32],) {
    %69 = cast(%var_7908, dtype="float64") /* ty=Tensor[(16, 2, 7), float64] */;
    %70 = erf(%69) /* ty=Tensor[(16, 2, 7), float64] */;
    %71 = cast(%70, dtype="uint16") /* ty=Tensor[(16, 2, 7), uint16] */;
    %72 = shape_of(%var_7908, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%var_7908, dtype="uint16") /* ty=Tensor[(16, 2, 7), uint16] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %75 = bitwise_or(%73, %74) /* ty=Tensor[(16, 2, 7), uint16] */;
    %76 = cast(%75, dtype="float32") /* ty=Tensor[(16, 2, 7), float32] */;
    %77 = sigmoid(%76) /* ty=Tensor[(16, 2, 7), float32] */;
    (%77,)
  };
  %78(%var_7933) /* ty=(Tensor[(16, 2, 7), float32],) */
}

def @func_7657() -> bool {
  @func_7655() /* ty=bool */
}

def @func_5436(%var_5430: Tensor[(260), bool]) -> (bool, Tensor[(2, 10, 13), uint16], Tensor[(260), bool]) {
  %79 = @func_4237() /* ty=(bool, bool) */;
  %80 = cast(%var_5430, dtype="bool") /* ty=Tensor[(260), bool] */;
  %81 = reshape(%80, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), bool] */;
  %82 = @func_2675(%81) /* ty=(Tensor[(2, 10, 13), int32], Tensor[(2, 10, 13), uint16]) */;
  %83 = %79.0;
  %84 = %82.1;
  (%83, %84, %var_5430)
}

def @func_4525(%var_4522: Tensor[(9, 16, 7), uint64], %var_4523: Tensor[(9, 16, 7), bool], %var_4524: Tensor[(9, 16, 7), bool]) -> (Tensor[(9, 16, 7), float64], bool, Tensor[(7, 1, 15), float64], Tensor[(108), float64], Tensor[(1, 48), float64], Tensor[(1176), float64], Tensor[(9, 16, 7), int64], bool, Tensor[(9, 16, 7), bool], Tensor[(9, 16, 7), float64]) {
  %128 = fn (%var_4441: Tensor[(9, 16, 7), uint64], %var_4493: Tensor[(9, 16, 7), bool], %var_4502: Tensor[(9, 16, 7), bool]) -> (Tensor[(9, 16, 7), float64], bool, Tensor[(7, 1, 15), float64], Tensor[(108), float64], Tensor[(1, 48), float64], Tensor[(1176), float64], Tensor[(9, 16, 7), int64], bool, Tensor[(9, 16, 7), bool], Tensor[(9, 16, 7), float64]) {
    %85 = cast(%var_4441, dtype="uint64") /* ty=Tensor[(9, 16, 7), uint64] */;
    %86 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(9, 16, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %87 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 16, 7), uint64] */, dtype="uint64") /* ty=Tensor[(9, 16, 7), uint64] */;
    %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %89 = subtract(%87, %88) /* ty=Tensor[(9, 16, 7), uint64] */;
    %90 = cast(%89, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
    %91 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(9, 16, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %92 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 16, 7), uint64] */, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
    %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %94 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 48), float64] */, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
    %95 = cast(meta[relay.Constant][4] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %96 = reshape(%94, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
    %97 = reshape(%95, newshape=[1, 1176]) /* ty=Tensor[(1, 1176), float64] */;
    %98 = @func_4298(%96, %97) /* ty=(Tensor[(6, 2, 4), float32], bool, Tensor[(7, 12, 14), bool], Tensor[(1, 1176), float64], Tensor[(108), float64]) */;
    %99 = cast(%var_4441, dtype="float32") /* ty=Tensor[(9, 16, 7), float32] */;
    %100 = sinh(%99) /* ty=Tensor[(9, 16, 7), float32] */;
    %101 = @func_4244() /* ty=(bool,) */;
    %102 = %101.0;
    %103 = cast(%100, dtype="int64") /* ty=Tensor[(9, 16, 7), int64] */;
    %104 = cast(%102, dtype="int64") /* ty=int64 */;
    %105 = cast(%89, dtype="bool") /* ty=Tensor[(9, 16, 7), bool] */;
    %106 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
    %107 = cast(%100, dtype="bool") /* ty=Tensor[(9, 16, 7), bool] */;
    %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %109 = logical_and(%107, %108) /* ty=Tensor[(9, 16, 7), bool] */;
    %110 = cast(%var_4502, dtype="bool") /* ty=Tensor[(9, 16, 7), bool] */;
    %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
    %112 = cast(%109, dtype="bool") /* ty=Tensor[(9, 16, 7), bool] */;
    %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %114 = cast(%var_4493, dtype="float32") /* ty=Tensor[(9, 16, 7), float32] */;
    %115 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
    %116 = cast(%109, dtype="float32") /* ty=Tensor[(9, 16, 7), float32] */;
    %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %118 = maximum(%116, %117) /* ty=Tensor[(9, 16, 7), float32] */;
    %119 = cast(%118, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
    %120 = divide(%92, %93) /* ty=Tensor[(9, 16, 7), float64] */;
    %121 = @func_1936() /* ty=bool */;
    %122 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
    %123 = %98.4;
    %124 = multiply(%103, %104) /* ty=Tensor[(9, 16, 7), int64] */;
    %125 = @func_1936() /* ty=bool */;
    %126 = less_equal(%112, %113) /* ty=Tensor[(9, 16, 7), bool] */;
    %127 = cos(%119) /* ty=Tensor[(9, 16, 7), float64] */;
    (%120, %121, %122, %123, meta[relay.Constant][3] /* ty=Tensor[(1, 48), float64] */, meta[relay.Constant][4] /* ty=Tensor[(1176), float64] */, %124, %125, %126, %127)
  };
  %128(%var_4522, %var_4523, %var_4524) /* ty=(Tensor[(9, 16, 7), float64], bool, Tensor[(7, 1, 15), float64], Tensor[(108), float64], Tensor[(1, 48), float64], Tensor[(1176), float64], Tensor[(9, 16, 7), int64], bool, Tensor[(9, 16, 7), bool], Tensor[(9, 16, 7), float64]) */
}

def @func_1938() -> bool {
  @func_1936() /* ty=bool */
}

def @func_1936() -> bool {
  @func_1913() /* ty=bool */
}

def @func_1881() -> (Tensor[(10, 6, 12), float32],) {
  @func_1879() /* ty=(Tensor[(10, 6, 12), float32],) */
}

def @func_4733(%var_4732: Tensor[(5, 210), uint16]) -> (bool, Tensor[(1176), float64], Tensor[(1176), float64], Tensor[(7, 10, 15), float32], Tensor[(5, 210), uint16]) {
  %139 = fn (%var_4719: Tensor[(5, 210), uint16]) -> (bool, Tensor[(1176), float64], Tensor[(1176), float64], Tensor[(7, 10, 15), float32], Tensor[(5, 210), uint16]) {
    %129 = @func_4084() /* ty=(bool,) */;
    %130 = cast(meta[relay.Constant][5] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %131 = reshape(%130, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
    %132 = @func_1796(%131) /* ty=(bool, bool, Tensor[(1176), float64]) */;
    %133 = cast(%var_4719, dtype="uint16") /* ty=Tensor[(5, 210), uint16] */;
    %134 = reshape(%133, newshape=[7, 10, 15]) /* ty=Tensor[(7, 10, 15), uint16] */;
    %135 = @func_3577(%134) /* ty=(Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(7, 10, 15), float32], Tensor[(7, 10, 15), float32]) */;
    %136 = %129.0;
    %137 = %132.2;
    %138 = %135.2;
    (%136, %137, meta[relay.Constant][5] /* ty=Tensor[(1176), float64] */, %138, %var_4719)
  };
  %139(%var_4732) /* ty=(bool, Tensor[(1176), float64], Tensor[(1176), float64], Tensor[(7, 10, 15), float32], Tensor[(5, 210), uint16]) */
}

def @func_4302(%var_4300: Tensor[(6, 2, 4), float64], %var_4301: Tensor[(1, 1176), float64]) -> (Tensor[(6, 2, 4), float32], bool, Tensor[(7, 12, 14), bool], Tensor[(1, 1176), float64], Tensor[(108), float64]) {
  @func_4298(%var_4300, %var_4301) /* ty=(Tensor[(6, 2, 4), float32], bool, Tensor[(7, 12, 14), bool], Tensor[(1, 1176), float64], Tensor[(108), float64]) */
}

def @func_8037(%var_8022: Tensor[(48), float64], %var_8023: Tensor[(1176), float64]) -> (bool, Tensor[(108), float64], Tensor[(48), float64], Tensor[(1176), float64], bool) {
  %140 = @func_5363() /* ty=(bool,) */;
  %141 = cast(%var_8022, dtype="float64") /* ty=Tensor[(48), float64] */;
  %142 = cast(%var_8023, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %143 = reshape(%141, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
  %144 = reshape(%142, newshape=[1, 1176]) /* ty=Tensor[(1, 1176), float64] */;
  %145 = @func_4298(%143, %144) /* ty=(Tensor[(6, 2, 4), float32], bool, Tensor[(7, 12, 14), bool], Tensor[(1, 1176), float64], Tensor[(108), float64]) */;
  %146 = @func_2366() /* ty=(bool,) */;
  %147 = %140.0;
  %148 = %145.4;
  %149 = %146.0;
  (%147, %148, %var_8022, %var_8023, %149)
}

def @func_1338() -> (bool, Tensor[(2, 8, 12), float32]) {
  %156 = fn () -> (bool, Tensor[(2, 8, 12), float32]) {
    %150 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
    %151 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
    %152 = %151.0;
    %153 = cast(%152, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
    %154 = %150.5;
    %155 = sigmoid(%153) /* ty=Tensor[(2, 8, 12), float32] */;
    (%154, %155)
  };
  %156() /* ty=(bool, Tensor[(2, 8, 12), float32]) */
}

def @func_2447() -> bool {
  %158 = fn () -> bool {
    %157 = @func_2406() /* ty=(bool,) */;
    %157.0
  };
  %158() /* ty=bool */
}

def @func_8148() -> (Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), float32], Tensor[(1, 108), float64], Tensor[(22, 4), bool]) {
  %159 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 11, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %160 = cos(%159) /* ty=Tensor[(15, 11, 6), float64] */;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %162 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 11, 6), float64] */, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %163 = cast(meta[relay.Constant][7] /* ty=Tensor[(22, 4), bool] */, dtype="bool") /* ty=Tensor[(22, 4), bool] */;
  %164 = reshape(%163, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), bool] */;
  %165 = @func_3317(%164) /* ty=(Tensor[(11, 8, 1), bool], bool, Tensor[(6, 11, 8), bool], Tensor[(1, 108), float64]) */;
  %166 = acos(%161) /* ty=Tensor[(15, 11, 6), float64] */;
  %167 = sinh(%162) /* ty=Tensor[(15, 11, 6), float32] */;
  %168 = %165.3;
  (%166, %167, %168, meta[relay.Constant][7] /* ty=Tensor[(22, 4), bool] */)
}

def @func_1709(%var_1688: Tensor[(6, 9, 13), float32], %var_1689: Tensor[(6, 9, 13), float32]) -> Tensor[(6, 9, 13), float64] {
  %169 = cast(%var_1689, dtype="float32") /* ty=Tensor[(6, 9, 13), float32] */;
  %170 = shape_of(%var_1688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%var_1688, dtype="float32") /* ty=Tensor[(6, 9, 13), float32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %173 = mod(%171, %172) /* ty=Tensor[(6, 9, 13), float32] */;
  %174 = cast(%var_1688, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %178 = logical_or(%176, %177) /* ty=Tensor[(6, 9, 13), bool] */;
  %179 = cast(%178, dtype="float64") /* ty=Tensor[(6, 9, 13), float64] */;
  asin(%179) /* ty=Tensor[(6, 9, 13), float64] */
}

def @func_3906() -> (bool, Tensor[(2, 8, 12), float32], bool, bool, Tensor[(108), float64]) {
  %180 = @func_2406() /* ty=(bool,) */;
  %181 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %182 = cast(meta[relay.Constant][8] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %183 = reshape(%182, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %184 = @func_2545(%183) /* ty=(bool, Tensor[(2, 8, 12), int16], Tensor[(108), float64], Tensor[(192), bool], bool) */;
  %185 = %180.0;
  %186 = %181.1;
  %187 = @func_1957() /* ty=bool */;
  %188 = %184.4;
  (%185, %186, %187, %188, meta[relay.Constant][8] /* ty=Tensor[(108), float64] */)
}

def @func_2923() -> (bool, bool) {
  %189 = @func_1498() /* ty=bool */;
  %190 = @func_1636() /* ty=bool */;
  (%189, %190)
}

def @func_7733(%var_7731: Tensor[(2, 504), uint64], %var_7732: Tensor[(2, 504), uint64]) -> (bool, bool, Tensor[(770), float32], Tensor[(2, 504), uint8], bool) {
  @func_7729(%var_7731, %var_7732) /* ty=(bool, bool, Tensor[(770), float32], Tensor[(2, 504), uint8], bool) */
}

def @func_7006() -> (bool, bool, Tensor[(528), bool], Tensor[(108), float64], Tensor[(6, 11, 8), uint64]) {
  %191 = @func_2366() /* ty=(bool,) */;
  %192 = cast(meta[relay.Constant][9] /* ty=Tensor[(528), bool] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %193 = %191.0;
  %194 = cast(%193, dtype="bool") /* ty=bool */;
  %195 = reshape(%192, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), bool] */;
  %196 = reshape(%194, newshape=[]) /* ty=bool */;
  %197 = @func_1852(%195, %196) /* ty=(Tensor[(6, 11, 8), uint64], Tensor[(6, 11, 8), bool], Tensor[(84, 1), float32], bool) */;
  %198 = cast(meta[relay.Constant][9] /* ty=Tensor[(528), bool] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %199 = cast(%193, dtype="bool") /* ty=bool */;
  %200 = reshape(%198, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), bool] */;
  %201 = reshape(%199, newshape=[]) /* ty=bool */;
  %202 = @func_1852(%200, %201) /* ty=(Tensor[(6, 11, 8), uint64], Tensor[(6, 11, 8), bool], Tensor[(84, 1), float32], bool) */;
  %203 = %197.3;
  %204 = @func_3453() /* ty=Tensor[(108), float64] */;
  %205 = %202.0;
  (%193, %203, meta[relay.Constant][9] /* ty=Tensor[(528), bool] */, %204, %205)
}

def @func_8150() -> (Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), float32], Tensor[(1, 108), float64], Tensor[(22, 4), bool]) {
  @func_8148() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), float32], Tensor[(1, 108), float64], Tensor[(22, 4), bool]) */
}

def @func_2406() -> (bool,) {
  %206 = @func_1636() /* ty=bool */;
  (%206,)
}

def @func_1957() -> bool {
  %207 = @func_1665() /* ty=(bool,) */;
  %207.0
}

def @func_5153(%var_5151: Tensor[(1296), float64]) -> (bool, Tensor[(2, 8, 12), float32], bool, Tensor[(1296), float64]) {
  @func_5150(%var_5151) /* ty=(bool, Tensor[(2, 8, 12), float32], bool, Tensor[(1296), float64]) */
}

def @func_4966(%var_4964: Tensor[(8, 1), bool], %var_4965: Tensor[(588, 2), float64]) -> (bool, bool, bool, Tensor[(8, 1), bool], Tensor[(6, 2, 4), float32], Tensor[(48), float64], Tensor[(588, 2), float64]) {
  %223 = fn (%var_4933: Tensor[(8, 1), bool], %var_4956: Tensor[(588, 2), float64]) -> (bool, bool, bool, Tensor[(8, 1), bool], Tensor[(6, 2, 4), float32], Tensor[(48), float64], Tensor[(588, 2), float64]) {
    %208 = @func_3498() /* ty=(bool, bool) */;
    %209 = @func_1665() /* ty=(bool,) */;
    %210 = %209.0;
    %211 = cast(%210, dtype="bool") /* ty=bool */;
    %212 = cast(%var_4933, dtype="bool") /* ty=Tensor[(8, 1), bool] */;
    %213 = cast(meta[relay.Constant][10] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %214 = cast(%var_4956, dtype="float64") /* ty=Tensor[(588, 2), float64] */;
    %215 = reshape(%213, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float64] */;
    %216 = reshape(%214, newshape=[1, 1176]) /* ty=Tensor[(1, 1176), float64] */;
    %217 = @func_4298(%215, %216) /* ty=(Tensor[(6, 2, 4), float32], bool, Tensor[(7, 12, 14), bool], Tensor[(1, 1176), float64], Tensor[(108), float64]) */;
    %218 = @func_2712() /* ty=bool */;
    %219 = @func_1913() /* ty=bool */;
    %220 = %208.0;
    %221 = logical_and(%211, %212) /* ty=Tensor[(8, 1), bool] */;
    %222 = %217.0;
    (%218, %219, %220, %221, %222, meta[relay.Constant][10] /* ty=Tensor[(48), float64] */, %var_4956)
  };
  %223(%var_4964, %var_4965) /* ty=(bool, bool, bool, Tensor[(8, 1), bool], Tensor[(6, 2, 4), float32], Tensor[(48), float64], Tensor[(588, 2), float64]) */
}

def @func_2677(%var_2676: Tensor[(2, 10, 13), bool]) -> (Tensor[(2, 10, 13), int32], Tensor[(2, 10, 13), uint16]) {
  %232 = fn (%var_2664: Tensor[(2, 10, 13), bool]) -> (Tensor[(2, 10, 13), int32], Tensor[(2, 10, 13), uint16]) {
    %224 = @func_2628() /* ty=(bool,) */;
    %225 = %224.0;
    %226 = cast(%225, dtype="int32") /* ty=int32 */;
    %227 = cast(%var_2664, dtype="int32") /* ty=Tensor[(2, 10, 13), int32] */;
    %228 = cast(%225, dtype="uint16") /* ty=uint16 */;
    %229 = cast(%var_2664, dtype="uint16") /* ty=Tensor[(2, 10, 13), uint16] */;
    %230 = add(%226, %227) /* ty=Tensor[(2, 10, 13), int32] */;
    %231 = subtract(%228, %229) /* ty=Tensor[(2, 10, 13), uint16] */;
    (%230, %231)
  };
  %232(%var_2676) /* ty=(Tensor[(2, 10, 13), int32], Tensor[(2, 10, 13), uint16]) */
}

def @func_7190() -> bool {
  %234 = fn () -> bool {
    %233 = @func_5231() /* ty=(bool, bool) */;
    %233.1
  };
  %234() /* ty=bool */
}

def @func_2714() -> bool {
  @func_2712() /* ty=bool */
}

def @func_7147(%var_7145: Tensor[(1176), float64]) -> (Tensor[(10, 6, 12), float32], bool, Tensor[(4, 2), bool], Tensor[(1176), float64], bool) {
  @func_7144(%var_7145) /* ty=(Tensor[(10, 6, 12), float32], bool, Tensor[(4, 2), bool], Tensor[(1176), float64], bool) */
}

def @func_5439(%var_5437: Tensor[(260), bool]) -> (bool, Tensor[(2, 10, 13), uint16], Tensor[(260), bool]) {
  @func_5436(%var_5437) /* ty=(bool, Tensor[(2, 10, 13), uint16], Tensor[(260), bool]) */
}

def @func_7337() -> (bool, Tensor[(4, 12, 10), float64]) {
  %238 = fn () -> (bool, Tensor[(4, 12, 10), float64]) {
    %235 = @func_5732() /* ty=(Tensor[(4, 12, 10), float64],) */;
    %236 = @func_1957() /* ty=bool */;
    %237 = %235.0;
    (%236, %237)
  };
  %238() /* ty=(bool, Tensor[(4, 12, 10), float64]) */
}

def @func_3319(%var_3318: Tensor[(11, 8, 1), bool]) -> (Tensor[(11, 8, 1), bool], bool, Tensor[(6, 11, 8), bool], Tensor[(1, 108), float64]) {
  %251 = fn (%var_3292: Tensor[(11, 8, 1), bool]) -> (Tensor[(11, 8, 1), bool], bool, Tensor[(6, 11, 8), bool], Tensor[(1, 108), float64]) {
    %239 = @func_2858() /* ty=bool */;
    %240 = cast(%239, dtype="bool") /* ty=bool */;
    %241 = cast(%var_3292, dtype="bool") /* ty=Tensor[(11, 8, 1), bool] */;
    %242 = @func_2193() /* ty=(bool, bool, bool) */;
    %243 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 108), float64] */, dtype="float64") /* ty=Tensor[(1, 108), float64] */;
    %244 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 108), float64] */, dtype="float64") /* ty=Tensor[(1, 108), float64] */;
    %245 = reshape(%243, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
    %246 = reshape(%244, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
    %247 = @func_696(%245, %246) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) */;
    %248 = greater(%240, %241) /* ty=Tensor[(11, 8, 1), bool] */;
    %249 = %242.1;
    %250 = %247.1;
    (%248, %249, %250, meta[relay.Constant][11] /* ty=Tensor[(1, 108), float64] */)
  };
  %251(%var_3318) /* ty=(Tensor[(11, 8, 1), bool], bool, Tensor[(6, 11, 8), bool], Tensor[(1, 108), float64]) */
}

def @func_2712() -> bool {
  %252 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %252.0
}

def @func_5974() -> (Tensor[(4, 12, 10), uint32], Tensor[(4, 12, 10), float64], Tensor[(4, 12, 10), float32], Tensor[(7, 4, 15), bool], Tensor[(4, 12, 10), float64], bool) {
  @func_5972() /* ty=(Tensor[(4, 12, 10), uint32], Tensor[(4, 12, 10), float64], Tensor[(4, 12, 10), float32], Tensor[(7, 4, 15), bool], Tensor[(4, 12, 10), float64], bool) */
}

def @func_2821() -> (bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), float64]) {
  %287 = fn () -> (bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), float64]) {
    %253 = @func_2366() /* ty=(bool,) */;
    %254 = %253.0;
    %255 = cast(%254, dtype="bool") /* ty=bool */;
    %256 = reshape(%255, newshape=[]) /* ty=bool */;
    %257 = @func_1776() /* ty=(Tensor[(10, 6, 12), float32], bool) */;
    %258 = @func_1665() /* ty=(bool,) */;
    %259 = cast(%254, dtype="bool") /* ty=bool */;
    %260 = reshape(%259, newshape=[]) /* ty=bool */;
    %261 = @func_289(%260) /* ty=Tensor[(6, 11, 8), bool] */;
    %262 = cast(%261, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
    %263 = sin(%262) /* ty=Tensor[(6, 11, 8), float64] */;
    %264 = cast(%263, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
    %265 = rsqrt(%264) /* ty=Tensor[(6, 11, 8), float64] */;
    %266 = @func_1936() /* ty=bool */;
    %267 = cast(%265, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
    %268 = cast(%266, dtype="float64") /* ty=float64 */;
    %269 = mod(%267, %268) /* ty=Tensor[(6, 11, 8), float64] */;
    %270 = cast(%269, dtype="int64") /* ty=Tensor[(6, 11, 8), int64] */;
    %271 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
    %272 = cast(%263, dtype="int64") /* ty=Tensor[(6, 11, 8), int64] */;
    %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %274 = logical_xor(%272, %273) /* ty=Tensor[(6, 11, 8), int64] */;
    %275 = cast(%274, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
    %276 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
    %277 = cast(%265, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
    %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %279 = cast(%265, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
    %280 = @func_289(%256) /* ty=Tensor[(6, 11, 8), bool] */;
    %281 = %257.1;
    %282 = %258.0;
    %283 = less_equal(%277, %278) /* ty=Tensor[(6, 11, 8), bool] */;
    %284 = @func_2446() /* ty=bool */;
    %285 = @func_1957() /* ty=bool */;
    %286 = log(%279) /* ty=Tensor[(6, 11, 8), float64] */;
    (%254, %280, %281, %282, %283, %284, %285, %286)
  };
  %287() /* ty=(bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), float64]) */
}

def @func_3764() -> Tensor[(4, 12, 10), bool] {
  @func_3762() /* ty=Tensor[(4, 12, 10), bool] */
}

def @func_2548(%var_2546: Tensor[(108), float64]) -> (bool, Tensor[(2, 8, 12), int16], Tensor[(108), float64], Tensor[(192), bool], bool) {
  @func_2545(%var_2546) /* ty=(bool, Tensor[(2, 8, 12), int16], Tensor[(108), float64], Tensor[(192), bool], bool) */
}

def @func_5150(%var_5138: Tensor[(1296), float64]) -> (bool, Tensor[(2, 8, 12), float32], bool, Tensor[(1296), float64]) {
  %288 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %289 = cast(%var_5138, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %290 = reshape(%289, newshape=[9, 16, 9]) /* ty=Tensor[(9, 16, 9), float64] */;
  %291 = @func_2170(%290) /* ty=(Tensor[(9, 16, 9), float64], bool) */;
  %292 = @func_4785() /* ty=bool */;
  %293 = %288.1;
  %294 = %291.1;
  (%292, %293, %294, %var_5138)
}

def @func_7821() -> (bool,) {
  @func_7819() /* ty=(bool,) */
}

def @func_1606(%var_1603: Tensor[(3, 14, 2), float32], %var_1604: Tensor[(3, 14, 2), float32], %var_1605: bool) -> (Tensor[(3, 14, 2), float32], Tensor[(2, 8, 12), float32], Tensor[(6, 11, 8), bool]) {
  @func_1601(%var_1603, %var_1604, %var_1605) /* ty=(Tensor[(3, 14, 2), float32], Tensor[(2, 8, 12), float32], Tensor[(6, 11, 8), bool]) */
}

def @func_6680(%var_6679: Tensor[(108), float64]) -> (Tensor[(108), bool],) {
  %302 = fn (%var_6673: Tensor[(108), float64]) -> (Tensor[(108), bool],) {
    %295 = @func_3906() /* ty=(bool, Tensor[(2, 8, 12), float32], bool, bool, Tensor[(108), float64]) */;
    %296 = %295.4;
    %297 = cast(%var_6673, dtype="bool") /* ty=Tensor[(108), bool] */;
    %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(1), int32] */;
    %299 = cast(%296, dtype="bool") /* ty=Tensor[(108), bool] */;
    %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?), bool] */;
    %301 = not_equal(%299, %300) /* ty=Tensor[(108), bool] */;
    (%301,)
  };
  %302(%var_6679) /* ty=(Tensor[(108), bool],) */
}

def @func_4085() -> (bool,) {
  %304 = fn () -> (bool,) {
    %303 = @func_1957() /* ty=bool */;
    (%303,)
  };
  %304() /* ty=(bool,) */
}

def @func_1798(%var_1797: Tensor[(1176), float64]) -> (bool, bool, Tensor[(1176), float64]) {
  %313 = fn (%var_1790: Tensor[(1176), float64]) -> (bool, bool, Tensor[(1176), float64]) {
    %305 = @func_1760() /* ty=(bool,) */;
    %306 = cast(%var_1790, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %307 = cast(%var_1790, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %308 = reshape(%306, newshape=[7, 12, 14]) /* ty=Tensor[(7, 12, 14), float64] */;
    %309 = reshape(%307, newshape=[7, 12, 14]) /* ty=Tensor[(7, 12, 14), float64] */;
    %310 = @func_1348(%308, %309) /* ty=(Tensor[(7, 12, 14), bool], bool) */;
    %311 = %305.0;
    %312 = %310.1;
    (%311, %312, %var_1790)
  };
  %313(%var_1797) /* ty=(bool, bool, Tensor[(1176), float64]) */
}

def @func_8190() -> Tensor[(4, 12, 10), bool] {
  %314 = @func_6151() /* ty=Tensor[(4, 12, 10), int8] */;
  %315 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 12, 10), int8] */, dtype="bool") /* ty=Tensor[(4, 12, 10), bool] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="bool") /* ty=Tensor[(4, 12, 10), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%317, %318) /* ty=Tensor[(4, 12, 10), bool] */
}

def @func_1915() -> bool {
  @func_1913() /* ty=bool */
}

def @func_2408() -> (bool,) {
  @func_2406() /* ty=(bool,) */
}

def @func_1762() -> (bool,) {
  @func_1760() /* ty=(bool,) */
}

def @func_2173(%var_2171: Tensor[(9, 16, 9), float64]) -> (Tensor[(9, 16, 9), float64], bool) {
  @func_2170(%var_2171) /* ty=(Tensor[(9, 16, 9), float64], bool) */
}

def @func_5365() -> (bool,) {
  @func_5363() /* ty=(bool,) */
}

def @func_3453() -> Tensor[(108), float64] {
  %319 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %319.3
}

def @func_5824(%var_5822: Tensor[(9, 15, 16), bool]) -> (bool, Tensor[(9, 15, 16), uint32], bool, Tensor[(6, 11, 8), bool], Tensor[(198), int8]) {
  @func_5821(%var_5822) /* ty=(bool, Tensor[(9, 15, 16), uint32], bool, Tensor[(6, 11, 8), bool], Tensor[(198), int8]) */
}

def @func_1805() -> bool {
  @func_1636() /* ty=bool */
}

def @func_4863(%var_4862: Tensor[(5, 210), float32]) -> (Tensor[(7, 1, 15), float64], Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(5, 210), uint32]) {
  %333 = fn (%var_4857: Tensor[(5, 210), float32]) -> (Tensor[(7, 1, 15), float64], Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(5, 210), uint32]) {
    %320 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 210), uint16] */, dtype="uint16") /* ty=Tensor[(5, 210), uint16] */;
    %321 = reshape(%320, newshape=[7, 10, 15]) /* ty=Tensor[(7, 10, 15), uint16] */;
    %322 = @func_3577(%321) /* ty=(Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(7, 10, 15), float32], Tensor[(7, 10, 15), float32]) */;
    %323 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 210), uint16] */, dtype="float32") /* ty=Tensor[(5, 210), float32] */;
    %324 = asinh(%323) /* ty=Tensor[(5, 210), float32] */;
    %325 = cast(%var_4857, dtype="uint32") /* ty=Tensor[(5, 210), uint32] */;
    %326 = shape_of(%324, dtype="int32") /* ty=Tensor[(2), int32] */;
    %327 = cast(%324, dtype="uint32") /* ty=Tensor[(5, 210), uint32] */;
    %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %329 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
    %330 = %322.0;
    %331 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
    %332 = bitwise_and(%327, %328) /* ty=Tensor[(5, 210), uint32] */;
    (%329, %330, %331, %332)
  };
  %333(%var_4862) /* ty=(Tensor[(7, 1, 15), float64], Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(5, 210), uint32]) */
}

def @func_3499() -> (bool, bool) {
  %338 = fn () -> (bool, bool) {
    %334 = @func_1665() /* ty=(bool,) */;
    %335 = @func_1665() /* ty=(bool,) */;
    %336 = %334.0;
    %337 = %335.0;
    (%336, %337)
  };
  %338() /* ty=(bool, bool) */
}

def @func_3877() -> Tensor[(10, 6, 12), float32] {
  %339 = @func_1879() /* ty=(Tensor[(10, 6, 12), float32],) */;
  %339.0
}

def @func_3879() -> Tensor[(10, 6, 12), float32] {
  @func_3877() /* ty=Tensor[(10, 6, 12), float32] */
}

def @func_6170(%var_6169: Tensor[(4, 12, 10), int8]) -> (Tensor[(4, 12, 10), float32], Tensor[(7, 4, 15), bool]) {
  %348 = fn (%var_6157: Tensor[(4, 12, 10), int8]) -> (Tensor[(4, 12, 10), float32], Tensor[(7, 4, 15), bool]) {
    %340 = @func_6151() /* ty=Tensor[(4, 12, 10), int8] */;
    %341 = cast(%var_6157, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
    %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
    %343 = cast(%340, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
    %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %345 = @func_4688() /* ty=(Tensor[(7, 4, 15), bool], Tensor[(7, 4, 15), bool]) */;
    %346 = power(%343, %344) /* ty=Tensor[(4, 12, 10), float32] */;
    %347 = %345.1;
    (%346, %347)
  };
  %348(%var_6169) /* ty=(Tensor[(4, 12, 10), float32], Tensor[(7, 4, 15), bool]) */
}

def @func_7097() -> (Tensor[(7, 4, 15), bool], bool, Tensor[(1050), uint16], bool) {
  %349 = cast(meta[relay.Constant][14] /* ty=Tensor[(1050), uint16] */, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %350 = reshape(%349, newshape=[1050]) /* ty=Tensor[(1050), uint16] */;
  %351 = @func_6084(%350) /* ty=(bool, Tensor[(4, 12, 10), uint32], bool, bool, Tensor[(198), int8], Tensor[(7, 1, 15), float64], Tensor[(1050), uint16]) */;
  %352 = @func_5412() /* ty=Tensor[(7, 4, 15), bool] */;
  %353 = %351.0;
  %354 = @func_1805() /* ty=bool */;
  (%352, %353, meta[relay.Constant][14] /* ty=Tensor[(1050), uint16] */, %354)
}

def @func_1760() -> (bool,) {
  %355 = @func_1665() /* ty=(bool,) */;
  %356 = %355.0;
  (%356,)
}

def @func_5413() -> Tensor[(7, 4, 15), bool] {
  %358 = fn () -> Tensor[(7, 4, 15), bool] {
    %357 = @func_4688() /* ty=(Tensor[(7, 4, 15), bool], Tensor[(7, 4, 15), bool]) */;
    %357.1
  };
  %358() /* ty=Tensor[(7, 4, 15), bool] */
}

def @func_2094() -> (bool, Tensor[(2, 8, 12), int32]) {
  %359 = @func_1665() /* ty=(bool,) */;
  %360 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %361 = %359.0;
  %362 = %360.1;
  (%361, %362)
}

def @func_2056() -> (bool, bool) {
  @func_2054() /* ty=(bool, bool) */
}

def @func_1500() -> bool {
  @func_1498() /* ty=bool */
}

def @func_2522() -> (bool,) {
  %364 = fn () -> (bool,) {
    %363 = @func_1936() /* ty=bool */;
    (%363,)
  };
  %364() /* ty=(bool,) */
}

def @func_1879() -> (Tensor[(10, 6, 12), float32],) {
  %365 = @func_1776() /* ty=(Tensor[(10, 6, 12), float32], bool) */;
  %366 = %365.0;
  (%366,)
}

def @func_1351(%var_1349: Tensor[(7, 12, 14), float64], %var_1350: Tensor[(7, 12, 14), float64]) -> (Tensor[(7, 12, 14), bool], bool) {
  %374 = fn (%var_1339: Tensor[(7, 12, 14), float64], %var_1340: Tensor[(7, 12, 14), float64]) -> (Tensor[(7, 12, 14), bool], bool) {
    %367 = cast(%var_1340, dtype="bool") /* ty=Tensor[(7, 12, 14), bool] */;
    %368 = shape_of(%var_1339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(%var_1339, dtype="bool") /* ty=Tensor[(7, 12, 14), bool] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %371 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
    %372 = less(%369, %370) /* ty=Tensor[(7, 12, 14), bool] */;
    %373 = %371.5;
    (%372, %373)
  };
  %374(%var_1349, %var_1350) /* ty=(Tensor[(7, 12, 14), bool], bool) */
}

def @func_7497() -> (Tensor[(3, 13, 2), float64], Tensor[(6, 11, 8), bool]) {
  @func_7495() /* ty=(Tensor[(3, 13, 2), float64], Tensor[(6, 11, 8), bool]) */
}

def @func_7556() -> (bool,) {
  @func_7554() /* ty=(bool,) */
}

def @func_7889(%var_7887: Tensor[(3, 90), float64], %var_7888: Tensor[(1176), float64]) -> (bool, bool, Tensor[(3, 90), float64], bool, Tensor[(1, 8), bool], Tensor[(1176), float64], bool) {
  %393 = fn (%var_7850: Tensor[(3, 90), float64], %var_7871: Tensor[(1176), float64]) -> (bool, bool, Tensor[(3, 90), float64], bool, Tensor[(1, 8), bool], Tensor[(1176), float64], bool) {
    %375 = @func_5348() /* ty=(bool,) */;
    %376 = cast(%var_7850, dtype="float64") /* ty=Tensor[(3, 90), float64] */;
    %377 = cast(%var_7850, dtype="float64") /* ty=Tensor[(3, 90), float64] */;
    %378 = reshape(%376, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float64] */;
    %379 = reshape(%377, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float64] */;
    %380 = @func_4153(%378, %379) /* ty=(Tensor[(9, 10, 3), float64], bool) */;
    %381 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 8), bool] */, dtype="bool") /* ty=Tensor[(1, 8), bool] */;
    %382 = cast(%var_7871, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %383 = cast(%var_7871, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %384 = reshape(%381, newshape=[1, 8]) /* ty=Tensor[(1, 8), bool] */;
    %385 = reshape(%382, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
    %386 = reshape(%383, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
    %387 = @func_4629(%384, %385, %386) /* ty=(bool, Tensor[(1176), float64], Tensor[(1, 8), bool], bool, Tensor[(1176), uint16], bool, Tensor[(270), float64], bool, Tensor[(7, 1, 15), float64]) */;
    %388 = @func_1665() /* ty=(bool,) */;
    %389 = %375.0;
    %390 = %380.1;
    %391 = %387.0;
    %392 = %388.0;
    (%389, %390, %var_7850, %391, meta[relay.Constant][15] /* ty=Tensor[(1, 8), bool] */, %var_7871, %392)
  };
  %393(%var_7887, %var_7888) /* ty=(bool, bool, Tensor[(3, 90), float64], bool, Tensor[(1, 8), bool], Tensor[(1176), float64], bool) */
}

def @func_2925() -> (bool, bool) {
  @func_2923() /* ty=(bool, bool) */
}

def @func_4786() -> bool {
  %394 = fn () -> bool {
    @func_2712() /* ty=bool */
  };
  %394() /* ty=bool */
}

def @func_3068() -> (Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), bool], bool, Tensor[(2, 8, 12), float64]) {
  %395 = @func_1636() /* ty=bool */;
  %396 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %397 = %396.6;
  %398 = cast(%397, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %399 = acosh(%398) /* ty=Tensor[(2, 8, 12), float32] */;
  %400 = cast(%395, dtype="bool") /* ty=bool */;
  %401 = cast(%399, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %402 = cast(%397, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %403 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%399, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %406 = @func_1776() /* ty=(Tensor[(10, 6, 12), float32], bool) */;
  %407 = cast(%399, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %408 = less(%400, %401) /* ty=Tensor[(2, 8, 12), bool] */;
  %409 = greater_equal(%404, %405) /* ty=Tensor[(2, 8, 12), bool] */;
  %410 = %406.1;
  %411 = sinh(%407) /* ty=Tensor[(2, 8, 12), float64] */;
  (%408, %409, %410, %411)
}

def @func_2320(%var_2278: Tensor[(11, 6, 3), int8], %var_2279: Tensor[(11, 6, 3), int8]) -> (Tensor[(11, 6, 3), int8], Tensor[(6, 11, 8), bool], bool, bool) {
  %412 = cast(%var_2279, dtype="int8") /* ty=Tensor[(11, 6, 3), int8] */;
  %413 = shape_of(%var_2278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%var_2278, dtype="int8") /* ty=Tensor[(11, 6, 3), int8] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %416 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %417 = reshape(%416, newshape=[]) /* ty=bool */;
  %418 = minimum(%414, %415) /* ty=Tensor[(11, 6, 3), int8] */;
  %419 = @func_289(%417) /* ty=Tensor[(6, 11, 8), bool] */;
  %420 = @func_1957() /* ty=bool */;
  (%418, %419, False /* ty=bool */, %420)
}

def @func_7592() -> (bool, bool, Tensor[(108), float64]) {
  %425 = fn () -> (bool, bool, Tensor[(108), float64]) {
    %421 = @func_7097() /* ty=(Tensor[(7, 4, 15), bool], bool, Tensor[(1050), uint16], bool) */;
    %422 = @func_2858() /* ty=bool */;
    %423 = %421.3;
    %424 = @func_3453() /* ty=Tensor[(108), float64] */;
    (%422, %423, %424)
  };
  %425() /* ty=(bool, bool, Tensor[(108), float64]) */
}

def @func_8192() -> Tensor[(4, 12, 10), bool] {
  @func_8190() /* ty=Tensor[(4, 12, 10), bool] */
}

def @func_7481(%var_7479: Tensor[(15, 13, 1), int16]) -> (Tensor[(15, 13, 1), int16], Tensor[(15, 13, 1), float32]) {
  @func_7478(%var_7479) /* ty=(Tensor[(15, 13, 1), int16], Tensor[(15, 13, 1), float32]) */
}

def @func_7495() -> (Tensor[(3, 13, 2), float64], Tensor[(6, 11, 8), bool]) {
  %426 = cast(-9.02282f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %427 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 13, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 13, 2), float64] */;
  %428 = @func_2820() /* ty=(bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), float64]) */;
  %429 = subtract(%426, %427) /* ty=Tensor[(3, 13, 2), float64] */;
  %430 = %428.4;
  (%429, %430)
}

def @func_5630() -> (Tensor[(108), float64], bool) {
  @func_5628() /* ty=(Tensor[(108), float64], bool) */
}

def @func_1852(%var_1833: Tensor[(6, 11, 8), bool], %var_1848: bool) -> (Tensor[(6, 11, 8), uint64], Tensor[(6, 11, 8), bool], Tensor[(84, 1), float32], bool) {
  %431 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
  %432 = %431.2;
  %433 = cast(%var_1833, dtype="uint64") /* ty=Tensor[(6, 11, 8), uint64] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="uint64") /* ty=Tensor[(6, 11, 8), uint64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %437 = cast(meta[relay.Constant][17] /* ty=Tensor[(84, 1), float32] */, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
  %438 = cast(meta[relay.Constant][17] /* ty=Tensor[(84, 1), float32] */, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
  %439 = cast(%var_1848, dtype="bool") /* ty=bool */;
  %440 = reshape(%437, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), float32] */;
  %441 = reshape(%438, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), float32] */;
  %442 = reshape(%439, newshape=[]) /* ty=bool */;
  %443 = @func_1601(%440, %441, %442) /* ty=(Tensor[(3, 14, 2), float32], Tensor[(2, 8, 12), float32], Tensor[(6, 11, 8), bool]) */;
  %444 = right_shift(%435, %436) /* ty=Tensor[(6, 11, 8), uint64] */;
  %445 = %443.2;
  (%444, %445, meta[relay.Constant][17] /* ty=Tensor[(84, 1), float32] */, %var_1848)
}

def @func_2367() -> (bool,) {
  %448 = fn () -> (bool,) {
    %446 = @func_2054() /* ty=(bool, bool) */;
    %447 = %446.0;
    (%447,)
  };
  %448() /* ty=(bool,) */
}

def @func_2950() -> (bool,) {
  @func_2948() /* ty=(bool,) */
}

def @func_4044(%var_4042: Tensor[(1, 8), bool], %var_4043: Tensor[(1176), float64]) -> (bool, Tensor[(1, 8), float32], bool, Tensor[(1176), float64], Tensor[(1176), float64], bool, Tensor[(108), float64], bool) {
  %468 = fn (%var_3970: Tensor[(1, 8), bool], %var_4001: Tensor[(1176), float64]) -> (bool, Tensor[(1, 8), float32], bool, Tensor[(1176), float64], Tensor[(1176), float64], bool, Tensor[(108), float64], bool) {
    %449 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
    %450 = @func_2521() /* ty=(bool,) */;
    %451 = %450.0;
    %452 = cast(%451, dtype="float32") /* ty=float32 */;
    %453 = cast(%var_3970, dtype="float32") /* ty=Tensor[(1, 8), float32] */;
    %454 = @func_2948() /* ty=(bool,) */;
    %455 = cast(%var_4001, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %456 = reshape(%455, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
    %457 = @func_1796(%456) /* ty=(bool, bool, Tensor[(1176), float64]) */;
    %458 = cast(meta[relay.Constant][18] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
    %459 = reshape(%458, newshape=[108]) /* ty=Tensor[(108), float64] */;
    %460 = @func_2545(%459) /* ty=(bool, Tensor[(2, 8, 12), int16], Tensor[(108), float64], Tensor[(192), bool], bool) */;
    %461 = @func_2148() /* ty=(bool, bool, bool, Tensor[(6, 11, 8), bool], bool) */;
    %462 = %449.5;
    %463 = divide(%452, %453) /* ty=Tensor[(1, 8), float32] */;
    %464 = %454.0;
    %465 = %457.2;
    %466 = %460.0;
    %467 = %461.1;
    (%462, %463, %464, %465, %var_4001, %466, meta[relay.Constant][18] /* ty=Tensor[(108), float64] */, %467)
  };
  %468(%var_4042, %var_4043) /* ty=(bool, Tensor[(1, 8), float32], bool, Tensor[(1176), float64], Tensor[(1176), float64], bool, Tensor[(108), float64], bool) */
}

def @func_8079() -> (Tensor[(7, 1, 15), float64],) {
  @func_8077() /* ty=(Tensor[(7, 1, 15), float64],) */
}

def @func_1601(%var_1550: Tensor[(3, 14, 2), float32], %var_1551: Tensor[(3, 14, 2), float32], %var_1591: bool) -> (Tensor[(3, 14, 2), float32], Tensor[(2, 8, 12), float32], Tensor[(6, 11, 8), bool]) {
  %469 = cast(%var_1551, dtype="float32") /* ty=Tensor[(3, 14, 2), float32] */;
  %470 = shape_of(%var_1550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%var_1550, dtype="float32") /* ty=Tensor[(3, 14, 2), float32] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %473 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %474 = cast(%var_1591, dtype="bool") /* ty=bool */;
  %475 = reshape(%474, newshape=[]) /* ty=bool */;
  %476 = @func_289(%475) /* ty=Tensor[(6, 11, 8), bool] */;
  %477 = cast(%476, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
  %478 = cast(%var_1591, dtype="bool") /* ty=bool */;
  %479 = subtract(%471, %472) /* ty=Tensor[(3, 14, 2), float32] */;
  %480 = %473.1;
  %481 = logical_or(%477, %478) /* ty=Tensor[(6, 11, 8), bool] */;
  (%479, %480, %481)
}

def @func_1713(%var_1711: Tensor[(6, 9, 13), float32], %var_1712: Tensor[(6, 9, 13), float32]) -> Tensor[(6, 9, 13), float64] {
  @func_1709(%var_1711, %var_1712) /* ty=Tensor[(6, 9, 13), float64] */
}

def @func_7546(%var_7545: Tensor[(1, 2), float64]) -> (Tensor[(1, 2), float64],) {
  %484 = fn (%var_7519: Tensor[(1, 2), float64]) -> (Tensor[(1, 2), float64],) {
    %482 = cast(%var_7519, dtype="float64") /* ty=Tensor[(1, 2), float64] */;
    %483 = tan(%482) /* ty=Tensor[(1, 2), float64] */;
    (%483,)
  };
  %484(%var_7545) /* ty=(Tensor[(1, 2), float64],) */
}

def @func_6153() -> Tensor[(4, 12, 10), int8] {
  @func_6151() /* ty=Tensor[(4, 12, 10), int8] */
}

def @func_7729(%var_7720: Tensor[(2, 504), uint64], %var_7722: Tensor[(2, 504), uint64]) -> (bool, bool, Tensor[(770), float32], Tensor[(2, 504), uint8], bool) {
  %485 = @func_7591() /* ty=(bool, bool, Tensor[(108), float64]) */;
  %486 = cast(meta[relay.Constant][19] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %487 = cast(%var_7720, dtype="uint64") /* ty=Tensor[(2, 504), uint64] */;
  %488 = reshape(%486, newshape=[5, 14, 11]) /* ty=Tensor[(5, 14, 11), float32] */;
  %489 = reshape(%487, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %490 = @func_5282(%488, %489) /* ty=(bool, Tensor[(1008), uint64], Tensor[(5, 14, 11), uint8]) */;
  %491 = cast(%var_7722, dtype="uint8") /* ty=Tensor[(2, 504), uint8] */;
  %492 = shape_of(%var_7720, dtype="int32") /* ty=Tensor[(2), int32] */;
  %493 = cast(%var_7720, dtype="uint8") /* ty=Tensor[(2, 504), uint8] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %495 = @func_2406() /* ty=(bool,) */;
  %496 = %485.1;
  %497 = %490.0;
  %498 = right_shift(%493, %494) /* ty=Tensor[(2, 504), uint8] */;
  %499 = %495.0;
  (%496, %497, meta[relay.Constant][19] /* ty=Tensor[(770), float32] */, %498, %499)
}

def @func_699(%var_697: Tensor[(4, 3, 9), float64], %var_698: Tensor[(4, 3, 9), float64]) -> (Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) {
  %511 = fn (%var_673: Tensor[(4, 3, 9), float64], %var_674: Tensor[(4, 3, 9), float64]) -> (Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) {
    %500 = cast(%var_674, dtype="float64") /* ty=Tensor[(4, 3, 9), float64] */;
    %501 = shape_of(%var_673, dtype="int32") /* ty=Tensor[(3), int32] */;
    %502 = cast(%var_673, dtype="float64") /* ty=Tensor[(4, 3, 9), float64] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %504 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %505 = reshape(%504, newshape=[]) /* ty=bool */;
    %506 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %507 = reshape(%506, newshape=[]) /* ty=bool */;
    %508 = floor_divide(%502, %503) /* ty=Tensor[(4, 3, 9), float64] */;
    %509 = @func_289(%505) /* ty=Tensor[(6, 11, 8), bool] */;
    %510 = @func_289(%507) /* ty=Tensor[(6, 11, 8), bool] */;
    (%508, %509, False /* ty=bool */, %510)
  };
  %511(%var_697, %var_698) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) */
}

def @func_7819() -> (bool,) {
  %512 = @func_3498() /* ty=(bool, bool) */;
  %513 = %512.0;
  (%513,)
}

def @func_1667() -> (bool,) {
  @func_1665() /* ty=(bool,) */
}

def @func_8077() -> (Tensor[(7, 1, 15), float64],) {
  %514 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
  (%514,)
}

def @func_1464(%var_1462: Tensor[(108), float64], %var_1463: Tensor[(2, 8, 12), bool]) -> (Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(2, 8, 12), int16], Tensor[(2, 8, 12), float32]) {
  @func_1460(%var_1462, %var_1463) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(2, 8, 12), int16], Tensor[(2, 8, 12), float32]) */
}

def @func_6087(%var_6085: Tensor[(1050), uint16]) -> (bool, Tensor[(4, 12, 10), uint32], bool, bool, Tensor[(198), int8], Tensor[(7, 1, 15), float64], Tensor[(1050), uint16]) {
  @func_6084(%var_6085) /* ty=(bool, Tensor[(4, 12, 10), uint32], bool, bool, Tensor[(198), int8], Tensor[(7, 1, 15), float64], Tensor[(1050), uint16]) */
}

def @func_5628() -> (Tensor[(108), float64], bool) {
  %515 = @func_3204() /* ty=(Tensor[(7, 1, 15), float64], Tensor[(6, 11, 8), bool], Tensor[(108), float64], bool, bool) */;
  %516 = @func_1665() /* ty=(bool,) */;
  %517 = %515.2;
  %518 = %516.0;
  (%517, %518)
}

def @func_4349() -> Tensor[(4, 12, 10), bool] {
  @func_3762() /* ty=Tensor[(4, 12, 10), bool] */
}

def @func_1807() -> bool {
  @func_1805() /* ty=bool */
}

def @func_4238() -> (bool, bool) {
  %521 = fn () -> (bool, bool) {
    %519 = @func_1913() /* ty=bool */;
    %520 = @func_1913() /* ty=bool */;
    (%519, %520)
  };
  %521() /* ty=(bool, bool) */
}

def @func_7048(%var_7047: Tensor[(12, 3, 15), float64]) -> (Tensor[(12, 3, 15), int32], Tensor[(2, 8, 12), bool], Tensor[(12, 3, 15), float64]) {
  %538 = fn (%var_7009: Tensor[(12, 3, 15), float64]) -> (Tensor[(12, 3, 15), int32], Tensor[(2, 8, 12), bool], Tensor[(12, 3, 15), float64]) {
    %522 = cast(%var_7009, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
    %523 = log(%522) /* ty=Tensor[(12, 3, 15), float64] */;
    %524 = @func_5042() /* ty=(bool, bool) */;
    %525 = %524.1;
    %526 = cast(%523, dtype="int16") /* ty=Tensor[(12, 3, 15), int16] */;
    %527 = cast(%525, dtype="int16") /* ty=int16 */;
    %528 = logical_xor(%526, %527) /* ty=Tensor[(12, 3, 15), int16] */;
    %529 = cast(%528, dtype="int32") /* ty=Tensor[(12, 3, 15), int32] */;
    %530 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
    %531 = cast(%523, dtype="int32") /* ty=Tensor[(12, 3, 15), int32] */;
    %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %533 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
    %534 = cast(%523, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
    %535 = bitwise_xor(%531, %532) /* ty=Tensor[(12, 3, 15), int32] */;
    %536 = %533.0;
    %537 = sigmoid(%534) /* ty=Tensor[(12, 3, 15), float64] */;
    (%535, %536, %537)
  };
  %538(%var_7047) /* ty=(Tensor[(12, 3, 15), int32], Tensor[(2, 8, 12), bool], Tensor[(12, 3, 15), float64]) */
}

def @func_3908() -> (bool, Tensor[(2, 8, 12), float32], bool, bool, Tensor[(108), float64]) {
  @func_3906() /* ty=(bool, Tensor[(2, 8, 12), float32], bool, bool, Tensor[(108), float64]) */
}

def @func_2948() -> (bool,) {
  %539 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %540 = %539.0;
  (%540,)
}

def @func_5348() -> (bool,) {
  %541 = @func_2193() /* ty=(bool, bool, bool) */;
  %542 = %541.2;
  (%542,)
}

def @func_8041(%var_8039: Tensor[(48), float64], %var_8040: Tensor[(1176), float64]) -> (bool, Tensor[(108), float64], Tensor[(48), float64], Tensor[(1176), float64], bool) {
  @func_8037(%var_8039, %var_8040) /* ty=(bool, Tensor[(108), float64], Tensor[(48), float64], Tensor[(1176), float64], bool) */
}

def @func_5892(%var_5890: Tensor[(2, 588), float64]) -> (Tensor[(2, 8, 12), float32], Tensor[(8, 1), bool], Tensor[(8), bool], Tensor[(2, 588), float64]) {
  @func_5889(%var_5890) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(8, 1), bool], Tensor[(8), bool], Tensor[(2, 588), float64]) */
}

def @func_3627() -> (bool,) {
  @func_3625() /* ty=(bool,) */
}

def @func_6270(%var_6269: Tensor[(7, 10, 4), float64]) -> (Tensor[(7, 10, 4), float64],) {
  %545 = fn (%var_6253: Tensor[(7, 10, 4), float64]) -> (Tensor[(7, 10, 4), float64],) {
    %543 = cast(%var_6253, dtype="float64") /* ty=Tensor[(7, 10, 4), float64] */;
    %544 = acos(%543) /* ty=Tensor[(7, 10, 4), float64] */;
    (%544,)
  };
  %545(%var_6269) /* ty=(Tensor[(7, 10, 4), float64],) */
}

def @func_3577(%var_3562: Tensor[(7, 10, 15), uint16]) -> (Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(7, 10, 15), float32], Tensor[(7, 10, 15), float32]) {
  %546 = @func_2948() /* ty=(bool,) */;
  %547 = %546.0;
  %548 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
  %549 = cast(%547, dtype="uint16") /* ty=uint16 */;
  %550 = cast(%548, dtype="uint16") /* ty=Tensor[(7, 1, 15), uint16] */;
  %551 = right_shift(%549, %550) /* ty=Tensor[(7, 1, 15), uint16] */;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(7, 1, 15), float32] */;
  %553 = cast(%548, dtype="float64") /* ty=Tensor[(7, 1, 15), float64] */;
  %554 = cast(%551, dtype="float32") /* ty=Tensor[(7, 1, 15), float32] */;
  %555 = cast(%var_3562, dtype="float32") /* ty=Tensor[(7, 10, 15), float32] */;
  %556 = cast(%var_3562, dtype="float32") /* ty=Tensor[(7, 10, 15), float32] */;
  %557 = sinh(%552) /* ty=Tensor[(7, 1, 15), float32] */;
  %558 = log(%553) /* ty=Tensor[(7, 1, 15), float64] */;
  %559 = divide(%554, %555) /* ty=Tensor[(7, 10, 15), float32] */;
  %560 = acosh(%556) /* ty=Tensor[(7, 10, 15), float32] */;
  (%557, %558, %559, %560)
}

def @func_2859() -> bool {
  %561 = fn () -> bool {
    @func_1498() /* ty=bool */
  };
  %561() /* ty=bool */
}

def @func_1636() -> bool {
  %562 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %562.0
}

def @func_1777() -> (Tensor[(10, 6, 12), float32], bool) {
  %567 = fn () -> (Tensor[(10, 6, 12), float32], bool) {
    %563 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(10, 6, 12), float32] */;
    %564 = @func_1760() /* ty=(bool,) */;
    %565 = cos(%563) /* ty=Tensor[(10, 6, 12), float32] */;
    %566 = %564.0;
    (%565, %566)
  };
  %567() /* ty=(Tensor[(10, 6, 12), float32], bool) */
}

def @func_3862(%var_3861: Tensor[(4, 12, 10), bool]) -> (Tensor[(4, 12, 10), float32],) {
  %576 = fn (%var_3846: Tensor[(4, 12, 10), bool]) -> (Tensor[(4, 12, 10), float32],) {
    %568 = @func_3762() /* ty=Tensor[(4, 12, 10), bool] */;
    %569 = cast(%var_3846, dtype="int8") /* ty=Tensor[(4, 12, 10), int8] */;
    %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
    %571 = cast(%568, dtype="int8") /* ty=Tensor[(4, 12, 10), int8] */;
    %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %573 = bitwise_and(%571, %572) /* ty=Tensor[(4, 12, 10), int8] */;
    %574 = cast(%573, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
    %575 = acos(%574) /* ty=Tensor[(4, 12, 10), float32] */;
    (%575,)
  };
  %576(%var_3861) /* ty=(Tensor[(4, 12, 10), float32],) */
}

def @func_6084(%var_6064: Tensor[(1050), uint16]) -> (bool, Tensor[(4, 12, 10), uint32], bool, bool, Tensor[(198), int8], Tensor[(7, 1, 15), float64], Tensor[(1050), uint16]) {
  %577 = @func_2923() /* ty=(bool, bool) */;
  %578 = @func_5972() /* ty=(Tensor[(4, 12, 10), uint32], Tensor[(4, 12, 10), float64], Tensor[(4, 12, 10), float32], Tensor[(7, 4, 15), bool], Tensor[(4, 12, 10), float64], bool) */;
  %579 = @func_2406() /* ty=(bool,) */;
  %580 = cast(meta[relay.Constant][21] /* ty=Tensor[(198), int8] */, dtype="int8") /* ty=Tensor[(198), int8] */;
  %581 = cast(meta[relay.Constant][21] /* ty=Tensor[(198), int8] */, dtype="int8") /* ty=Tensor[(198), int8] */;
  %582 = reshape(%580, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), int8] */;
  %583 = reshape(%581, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), int8] */;
  %584 = @func_2320(%582, %583) /* ty=(Tensor[(11, 6, 3), int8], Tensor[(6, 11, 8), bool], bool, bool) */;
  %585 = cast(%var_6064, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %586 = reshape(%585, newshape=[7, 10, 15]) /* ty=Tensor[(7, 10, 15), uint16] */;
  %587 = @func_3577(%586) /* ty=(Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(7, 10, 15), float32], Tensor[(7, 10, 15), float32]) */;
  %588 = %577.1;
  %589 = %578.0;
  %590 = %579.0;
  %591 = %584.3;
  %592 = %587.1;
  (%588, %589, %590, %591, meta[relay.Constant][21] /* ty=Tensor[(198), int8] */, %592, %var_6064)
}

def @func_7065(%var_7064: Tensor[(12, 2, 12), uint16]) -> Tensor[(12, 2, 12), uint16] {
  %595 = fn (%var_7057: Tensor[(12, 2, 12), uint16]) -> Tensor[(12, 2, 12), uint16] {
    %593 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 2, 12), uint16] */, dtype="uint16") /* ty=Tensor[(1, 2, 12), uint16] */;
    %594 = cast(%var_7057, dtype="uint16") /* ty=Tensor[(12, 2, 12), uint16] */;
    bitwise_xor(%593, %594) /* ty=Tensor[(12, 2, 12), uint16] */
  };
  %595(%var_7064) /* ty=Tensor[(12, 2, 12), uint16] */
}

def @func_6790() -> (Tensor[(10, 6, 12), float32], bool) {
  %598 = fn () -> (Tensor[(10, 6, 12), float32], bool) {
    %596 = @func_3877() /* ty=Tensor[(10, 6, 12), float32] */;
    %597 = @func_2446() /* ty=bool */;
    (%596, %597)
  };
  %598() /* ty=(Tensor[(10, 6, 12), float32], bool) */
}

def @func_5286(%var_5284: Tensor[(5, 14, 11), float32], %var_5285: Tensor[(1008), uint64]) -> (bool, Tensor[(1008), uint64], Tensor[(5, 14, 11), uint8]) {
  @func_5282(%var_5284, %var_5285) /* ty=(bool, Tensor[(1008), uint64], Tensor[(5, 14, 11), uint8]) */
}

def @func_3347() -> Tensor[(7, 1, 15), float64] {
  %599 = @func_3204() /* ty=(Tensor[(7, 1, 15), float64], Tensor[(6, 11, 8), bool], Tensor[(108), float64], bool, bool) */;
  %599.0
}

def @func_4131() -> (bool, bool) {
  %604 = fn () -> (bool, bool) {
    %600 = @func_2148() /* ty=(bool, bool, bool, Tensor[(6, 11, 8), bool], bool) */;
    %601 = @func_3667() /* ty=(bool, bool, Tensor[(108, 1), float64]) */;
    %602 = %600.4;
    %603 = %601.0;
    (%602, %603)
  };
  %604() /* ty=(bool, bool) */
}

def @func_7099() -> (Tensor[(7, 4, 15), bool], bool, Tensor[(1050), uint16], bool) {
  @func_7097() /* ty=(Tensor[(7, 4, 15), bool], bool, Tensor[(1050), uint16], bool) */
}

def @func_6217() -> (Tensor[(4, 12, 10), float64],) {
  %607 = fn () -> (Tensor[(4, 12, 10), float64],) {
    %605 = @func_5732() /* ty=(Tensor[(4, 12, 10), float64],) */;
    %606 = %605.0;
    (%606,)
  };
  %607() /* ty=(Tensor[(4, 12, 10), float64],) */
}

def @func_4689() -> (Tensor[(7, 4, 15), bool], Tensor[(7, 4, 15), bool]) {
  %621 = fn () -> (Tensor[(7, 4, 15), bool], Tensor[(7, 4, 15), bool]) {
    %608 = @func_3204() /* ty=(Tensor[(7, 1, 15), float64], Tensor[(6, 11, 8), bool], Tensor[(108), float64], bool, bool) */;
    %609 = %608.0;
    %610 = cast(%609, dtype="bool") /* ty=Tensor[(7, 1, 15), bool] */;
    %611 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 4, 15), float64] */, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
    %612 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 4, 15), float64] */, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
    %613 = cast(%609, dtype="bool") /* ty=Tensor[(7, 1, 15), bool] */;
    %614 = greater(%612, %613) /* ty=Tensor[(7, 4, 15), bool] */;
    %615 = cast(%614, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
    %616 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(7, 4, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %617 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 4, 15), float64] */, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
    %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %619 = equal(%610, %611) /* ty=Tensor[(7, 4, 15), bool] */;
    %620 = logical_or(%617, %618) /* ty=Tensor[(7, 4, 15), bool] */;
    (%619, %620)
  };
  %621() /* ty=(Tensor[(7, 4, 15), bool], Tensor[(7, 4, 15), bool]) */
}

def @func_5469() -> (bool,) {
  %624 = fn () -> (bool,) {
    %622 = @func_5042() /* ty=(bool, bool) */;
    %623 = %622.0;
    (%623,)
  };
  %624() /* ty=(bool,) */
}

def @func_5972() -> (Tensor[(4, 12, 10), uint32], Tensor[(4, 12, 10), float64], Tensor[(4, 12, 10), float32], Tensor[(7, 4, 15), bool], Tensor[(4, 12, 10), float64], bool) {
  %625 = @func_4349() /* ty=Tensor[(4, 12, 10), bool] */;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %627 = sqrt(%626) /* ty=Tensor[(4, 12, 10), float64] */;
  %628 = cast(%627, dtype="uint32") /* ty=Tensor[(4, 12, 10), uint32] */;
  %629 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%625, dtype="uint32") /* ty=Tensor[(4, 12, 10), uint32] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %632 = cast(%625, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %633 = cast(%625, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %634 = @func_4688() /* ty=(Tensor[(7, 4, 15), bool], Tensor[(7, 4, 15), bool]) */;
  %635 = cast(%625, dtype="float64") /* ty=Tensor[(4, 12, 10), float64] */;
  %636 = bitwise_or(%630, %631) /* ty=Tensor[(4, 12, 10), uint32] */;
  %637 = sigmoid(%632) /* ty=Tensor[(4, 12, 10), float64] */;
  %638 = atan(%633) /* ty=Tensor[(4, 12, 10), float32] */;
  %639 = %634.0;
  %640 = atanh(%635) /* ty=Tensor[(4, 12, 10), float64] */;
  %641 = @func_1636() /* ty=bool */;
  (%636, %637, %638, %639, %640, %641)
}

def @func_3668() -> (bool, bool, Tensor[(108, 1), float64]) {
  %650 = fn () -> (bool, bool, Tensor[(108, 1), float64]) {
    %642 = @func_2948() /* ty=(bool,) */;
    %643 = cast(meta[relay.Constant][24] /* ty=Tensor[(108, 1), float64] */, dtype="float64") /* ty=Tensor[(108, 1), float64] */;
    %644 = cast(meta[relay.Constant][24] /* ty=Tensor[(108, 1), float64] */, dtype="float64") /* ty=Tensor[(108, 1), float64] */;
    %645 = reshape(%643, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
    %646 = reshape(%644, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
    %647 = @func_696(%645, %646) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) */;
    %648 = %642.0;
    %649 = %647.2;
    (%648, %649, meta[relay.Constant][24] /* ty=Tensor[(108, 1), float64] */)
  };
  %650() /* ty=(bool, bool, Tensor[(108, 1), float64]) */
}

def @func_2545(%var_2536: Tensor[(108), float64]) -> (bool, Tensor[(2, 8, 12), int16], Tensor[(108), float64], Tensor[(192), bool], bool) {
  %651 = @func_2094() /* ty=(bool, Tensor[(2, 8, 12), int32]) */;
  %652 = cast(%var_2536, dtype="float64") /* ty=Tensor[(108), float64] */;
  %653 = cast(meta[relay.Constant][25] /* ty=Tensor[(192), bool] */, dtype="bool") /* ty=Tensor[(192), bool] */;
  %654 = reshape(%652, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %655 = reshape(%653, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), bool] */;
  %656 = @func_1460(%654, %655) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(2, 8, 12), int16], Tensor[(2, 8, 12), float32]) */;
  %657 = %651.0;
  %658 = %656.2;
  %659 = @func_1498() /* ty=bool */;
  (%657, %658, %var_2536, meta[relay.Constant][25] /* ty=Tensor[(192), bool] */, %659)
}

def @func_5821(%var_5784: Tensor[(9, 15, 16), bool]) -> (bool, Tensor[(9, 15, 16), uint32], bool, Tensor[(6, 11, 8), bool], Tensor[(198), int8]) {
  %660 = @func_3498() /* ty=(bool, bool) */;
  %661 = @func_4244() /* ty=(bool,) */;
  %662 = %661.0;
  %663 = cast(%662, dtype="uint32") /* ty=uint32 */;
  %664 = cast(%var_5784, dtype="uint32") /* ty=Tensor[(9, 15, 16), uint32] */;
  %665 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %666 = cast(meta[relay.Constant][26] /* ty=Tensor[(198), int8] */, dtype="int8") /* ty=Tensor[(198), int8] */;
  %667 = cast(meta[relay.Constant][26] /* ty=Tensor[(198), int8] */, dtype="int8") /* ty=Tensor[(198), int8] */;
  %668 = reshape(%666, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), int8] */;
  %669 = reshape(%667, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), int8] */;
  %670 = @func_2320(%668, %669) /* ty=(Tensor[(11, 6, 3), int8], Tensor[(6, 11, 8), bool], bool, bool) */;
  %671 = %660.1;
  %672 = left_shift(%663, %664) /* ty=Tensor[(9, 15, 16), uint32] */;
  %673 = %665.0;
  %674 = %670.1;
  (%671, %672, %673, %674, meta[relay.Constant][26] /* ty=Tensor[(198), int8] */)
}

def @func_2629() -> (bool,) {
  %676 = fn () -> (bool,) {
    %675 = @func_1957() /* ty=bool */;
    (%675,)
  };
  %676() /* ty=(bool,) */
}

def @func_3794(%var_3778: Tensor[(8, 14, 16), float64]) -> (Tensor[(8, 14, 16), uint8],) {
  %677 = cast(%var_3778, dtype="float64") /* ty=Tensor[(8, 14, 16), float64] */;
  %678 = cos(%677) /* ty=Tensor[(8, 14, 16), float64] */;
  %679 = cast(%678, dtype="uint8") /* ty=Tensor[(8, 14, 16), uint8] */;
  %680 = shape_of(%var_3778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%var_3778, dtype="uint8") /* ty=Tensor[(8, 14, 16), uint8] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %683 = logical_xor(%681, %682) /* ty=Tensor[(8, 14, 16), uint8] */;
  (%683,)
}

def @func_2054() -> (bool, bool) {
  %684 = @func_1665() /* ty=(bool,) */;
  %685 = @func_1636() /* ty=bool */;
  %686 = %684.0;
  (%685, %686)
}

def @func_4351() -> Tensor[(4, 12, 10), bool] {
  @func_4349() /* ty=Tensor[(4, 12, 10), bool] */
}

def @func_7282(%var_7281: Tensor[(1176), float64]) -> (bool, Tensor[(2, 8, 12), float32], Tensor[(1176), float64]) {
  %700 = fn (%var_7228: Tensor[(1176), float64]) -> (bool, Tensor[(2, 8, 12), float32], Tensor[(1176), float64]) {
    %687 = @func_3625() /* ty=(bool,) */;
    %688 = cast(%var_7228, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %689 = reshape(%688, newshape=[2, 588]) /* ty=Tensor[(2, 588), float64] */;
    %690 = @func_5889(%689) /* ty=(Tensor[(2, 8, 12), float32], Tensor[(8, 1), bool], Tensor[(8), bool], Tensor[(2, 588), float64]) */;
    %691 = cast(%var_7228, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %692 = atan(%691) /* ty=Tensor[(1176), float32] */;
    %693 = cast(meta[relay.Constant][27] /* ty=Tensor[(1176), float32] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(1), int32] */;
    %695 = cast(%692, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?), float64] */;
    %697 = %687.0;
    %698 = %690.0;
    %699 = floor_mod(%695, %696) /* ty=Tensor[(1176), float64] */;
    (%697, %698, %699)
  };
  %700(%var_7281) /* ty=(bool, Tensor[(2, 8, 12), float32], Tensor[(1176), float64]) */
}

def @func_7008() -> (bool, bool, Tensor[(528), bool], Tensor[(108), float64], Tensor[(6, 11, 8), uint64]) {
  @func_7006() /* ty=(bool, bool, Tensor[(528), bool], Tensor[(108), float64], Tensor[(6, 11, 8), uint64]) */
}

def @func_4633(%var_4630: Tensor[(1, 8), bool], %var_4631: Tensor[(1176), float64], %var_4632: Tensor[(1176), float64]) -> (bool, Tensor[(1176), float64], Tensor[(1, 8), bool], bool, Tensor[(1176), uint16], bool, Tensor[(270), float64], bool, Tensor[(7, 1, 15), float64]) {
  %724 = fn (%var_4557: Tensor[(1, 8), bool], %var_4558: Tensor[(1176), float64], %var_4592: Tensor[(1176), float64]) -> (bool, Tensor[(1176), float64], Tensor[(1, 8), bool], bool, Tensor[(1176), uint16], bool, Tensor[(270), float64], bool, Tensor[(7, 1, 15), float64]) {
    %701 = cast(%var_4557, dtype="bool") /* ty=Tensor[(1, 8), bool] */;
    %702 = cast(%var_4558, dtype="float64") /* ty=Tensor[(1176), float64] */;
    %703 = reshape(%701, newshape=[1, 8]) /* ty=Tensor[(1, 8), bool] */;
    %704 = reshape(%702, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
    %705 = @func_4041(%703, %704) /* ty=(bool, Tensor[(1, 8), float32], bool, Tensor[(1176), float64], Tensor[(1176), float64], bool, Tensor[(108), float64], bool) */;
    %706 = @func_2948() /* ty=(bool,) */;
    %707 = cast(%var_4592, dtype="uint16") /* ty=Tensor[(1176), uint16] */;
    %708 = shape_of(%var_4558, dtype="int32") /* ty=Tensor[(1), int32] */;
    %709 = cast(%var_4558, dtype="uint16") /* ty=Tensor[(1176), uint16] */;
    %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %711 = cast(meta[relay.Constant][28] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
    %712 = cast(meta[relay.Constant][28] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
    %713 = reshape(%711, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float64] */;
    %714 = reshape(%712, newshape=[9, 10, 3]) /* ty=Tensor[(9, 10, 3), float64] */;
    %715 = @func_4153(%713, %714) /* ty=(Tensor[(9, 10, 3), float64], bool) */;
    %716 = @func_2820() /* ty=(bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), float64]) */;
    %717 = @func_2858() /* ty=bool */;
    %718 = %705.3;
    %719 = %706.0;
    %720 = add(%709, %710) /* ty=Tensor[(1176), uint16] */;
    %721 = %715.1;
    %722 = %716.3;
    %723 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
    (%717, %718, %var_4557, %719, %720, %721, meta[relay.Constant][28] /* ty=Tensor[(270), float64] */, %722, %723)
  };
  %724(%var_4630, %var_4631, %var_4632) /* ty=(bool, Tensor[(1176), float64], Tensor[(1, 8), bool], bool, Tensor[(1176), uint16], bool, Tensor[(270), float64], bool, Tensor[(7, 1, 15), float64]) */
}

def @func_5003(%var_5002: Tensor[(8), bool]) -> (bool, bool, Tensor[(8), bool], Tensor[(588, 2), float64], Tensor[(7, 4, 15), bool]) {
  %734 = fn (%var_4992: Tensor[(8), bool]) -> (bool, bool, Tensor[(8), bool], Tensor[(588, 2), float64], Tensor[(7, 4, 15), bool]) {
    %725 = cast(%var_4992, dtype="bool") /* ty=Tensor[(8), bool] */;
    %726 = cast(meta[relay.Constant][29] /* ty=Tensor[(588, 2), float64] */, dtype="float64") /* ty=Tensor[(588, 2), float64] */;
    %727 = reshape(%725, newshape=[8, 1]) /* ty=Tensor[(8, 1), bool] */;
    %728 = reshape(%726, newshape=[588, 2]) /* ty=Tensor[(588, 2), float64] */;
    %729 = @func_4963(%727, %728) /* ty=(bool, bool, bool, Tensor[(8, 1), bool], Tensor[(6, 2, 4), float32], Tensor[(48), float64], Tensor[(588, 2), float64]) */;
    %730 = @func_4688() /* ty=(Tensor[(7, 4, 15), bool], Tensor[(7, 4, 15), bool]) */;
    %731 = @func_1936() /* ty=bool */;
    %732 = %729.0;
    %733 = %730.1;
    (%731, %732, %var_4992, meta[relay.Constant][29] /* ty=Tensor[(588, 2), float64] */, %733)
  };
  %734(%var_5002) /* ty=(bool, bool, Tensor[(8), bool], Tensor[(588, 2), float64], Tensor[(7, 4, 15), bool]) */
}

def @func_3205() -> (Tensor[(7, 1, 15), float64], Tensor[(6, 11, 8), bool], Tensor[(108), float64], bool, bool) {
  %746 = fn () -> (Tensor[(7, 1, 15), float64], Tensor[(6, 11, 8), bool], Tensor[(108), float64], bool, bool) {
    %735 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 1, 15), float64] */;
    %736 = cast(meta[relay.Constant][31] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
    %737 = cast(meta[relay.Constant][31] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
    %738 = reshape(%736, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
    %739 = reshape(%737, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
    %740 = @func_696(%738, %739) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) */;
    %741 = @func_2193() /* ty=(bool, bool, bool) */;
    %742 = sigmoid(%735) /* ty=Tensor[(7, 1, 15), float64] */;
    %743 = %740.1;
    %744 = @func_2446() /* ty=bool */;
    %745 = %741.1;
    (%742, %743, meta[relay.Constant][31] /* ty=Tensor[(108), float64] */, %744, %745)
  };
  %746() /* ty=(Tensor[(7, 1, 15), float64], Tensor[(6, 11, 8), bool], Tensor[(108), float64], bool, bool) */
}

def @func_1913() -> bool {
  %747 = @func_1760() /* ty=(bool,) */;
  %747.0
}

def @func_1498() -> bool {
  %748 = @func_1337() /* ty=(bool, Tensor[(2, 8, 12), float32]) */;
  %748.0
}

def @func_5889(%var_5883: Tensor[(2, 588), float64]) -> (Tensor[(2, 8, 12), float32], Tensor[(8, 1), bool], Tensor[(8), bool], Tensor[(2, 588), float64]) {
  %749 = @func_2094() /* ty=(bool, Tensor[(2, 8, 12), int32]) */;
  %750 = %749.1;
  %751 = cast(%750, dtype="float32") /* ty=Tensor[(2, 8, 12), float32] */;
  %752 = cast(meta[relay.Constant][32] /* ty=Tensor[(8), bool] */, dtype="bool") /* ty=Tensor[(8), bool] */;
  %753 = cast(%var_5883, dtype="float64") /* ty=Tensor[(2, 588), float64] */;
  %754 = reshape(%752, newshape=[8, 1]) /* ty=Tensor[(8, 1), bool] */;
  %755 = reshape(%753, newshape=[588, 2]) /* ty=Tensor[(588, 2), float64] */;
  %756 = @func_4963(%754, %755) /* ty=(bool, bool, bool, Tensor[(8, 1), bool], Tensor[(6, 2, 4), float32], Tensor[(48), float64], Tensor[(588, 2), float64]) */;
  %757 = asinh(%751) /* ty=Tensor[(2, 8, 12), float32] */;
  %758 = %756.3;
  (%757, %758, meta[relay.Constant][32] /* ty=Tensor[(8), bool] */, %var_5883)
}

def @func_3797(%var_3795: Tensor[(8, 14, 16), float64]) -> (Tensor[(8, 14, 16), uint8],) {
  @func_3794(%var_3795) /* ty=(Tensor[(8, 14, 16), uint8],) */
}

def @func_5282(%var_5253: Tensor[(5, 14, 11), float32], %var_5262: Tensor[(1008), uint64]) -> (bool, Tensor[(1008), uint64], Tensor[(5, 14, 11), uint8]) {
  %759 = cast(%var_5262, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %760 = cast(%var_5262, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %761 = cast(%var_5262, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %762 = reshape(%759, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), uint64] */;
  %763 = reshape(%760, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), bool] */;
  %764 = reshape(%761, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), bool] */;
  %765 = @func_4521(%762, %763, %764) /* ty=(Tensor[(9, 16, 7), float64], bool, Tensor[(7, 1, 15), float64], Tensor[(108), float64], Tensor[(1, 48), float64], Tensor[(1176), float64], Tensor[(9, 16, 7), int64], bool, Tensor[(9, 16, 7), bool], Tensor[(9, 16, 7), float64]) */;
  %766 = cast(%var_5253, dtype="float32") /* ty=Tensor[(5, 14, 11), float32] */;
  %767 = cos(%766) /* ty=Tensor[(5, 14, 11), float32] */;
  %768 = cast(%var_5253, dtype="uint8") /* ty=Tensor[(5, 14, 11), uint8] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="uint8") /* ty=Tensor[(5, 14, 11), uint8] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %772 = %765.1;
  %773 = logical_xor(%770, %771) /* ty=Tensor[(5, 14, 11), uint8] */;
  (%772, %var_5262, %773)
}

def @func_5604() -> bool {
  %774 = fn () -> bool {
    @func_1498() /* ty=bool */
  };
  %774() /* ty=bool */
}

def @func_7757() -> bool {
  %776 = fn () -> bool {
    %775 = @func_2366() /* ty=(bool,) */;
    %775.0
  };
  %776() /* ty=bool */
}

def @func_2194() -> (bool, bool, bool) {
  %781 = fn () -> (bool, bool, bool) {
    %777 = @func_2054() /* ty=(bool, bool) */;
    %778 = %777.1;
    %779 = @func_1936() /* ty=bool */;
    %780 = @func_1913() /* ty=bool */;
    (%778, %779, %780)
  };
  %781() /* ty=(bool, bool, bool) */
}

def @func_5043() -> (bool, bool) {
  %786 = fn () -> (bool, bool) {
    %782 = @func_2094() /* ty=(bool, Tensor[(2, 8, 12), int32]) */;
    %783 = @func_2820() /* ty=(bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), float64]) */;
    %784 = %782.0;
    %785 = %783.5;
    (%784, %785)
  };
  %786() /* ty=(bool, bool) */
}

def @func_1279() -> (Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) {
  @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */
}

def @func_4298(%var_4258: Tensor[(6, 2, 4), float64], %var_4283: Tensor[(1, 1176), float64]) -> (Tensor[(6, 2, 4), float32], bool, Tensor[(7, 12, 14), bool], Tensor[(1, 1176), float64], Tensor[(108), float64]) {
  %787 = cast(%var_4258, dtype="float64") /* ty=Tensor[(6, 2, 4), float64] */;
  %788 = tan(%787) /* ty=Tensor[(6, 2, 4), float64] */;
  %789 = cast(%var_4258, dtype="float32") /* ty=Tensor[(6, 2, 4), float32] */;
  %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%788, dtype="float32") /* ty=Tensor[(6, 2, 4), float32] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %793 = cast(%var_4283, dtype="float64") /* ty=Tensor[(1, 1176), float64] */;
  %794 = cast(%var_4283, dtype="float64") /* ty=Tensor[(1, 1176), float64] */;
  %795 = reshape(%793, newshape=[7, 12, 14]) /* ty=Tensor[(7, 12, 14), float64] */;
  %796 = reshape(%794, newshape=[7, 12, 14]) /* ty=Tensor[(7, 12, 14), float64] */;
  %797 = @func_1348(%795, %796) /* ty=(Tensor[(7, 12, 14), bool], bool) */;
  %798 = mod(%791, %792) /* ty=Tensor[(6, 2, 4), float32] */;
  %799 = @func_1636() /* ty=bool */;
  %800 = %797.0;
  %801 = @func_3453() /* ty=Tensor[(108), float64] */;
  (%798, %799, %800, %var_4283, %801)
}

def @func_3580(%var_3578: Tensor[(7, 10, 15), uint16]) -> (Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(7, 10, 15), float32], Tensor[(7, 10, 15), float32]) {
  @func_3577(%var_3578) /* ty=(Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(7, 10, 15), float32], Tensor[(7, 10, 15), float32]) */
}

def @func_7998() -> (Tensor[(10, 6, 12), float32], Tensor[(7, 1, 15), float64], Tensor[(1, 1050), float32]) {
  %808 = fn () -> (Tensor[(10, 6, 12), float32], Tensor[(7, 1, 15), float64], Tensor[(1, 1050), float32]) {
    %802 = @func_1776() /* ty=(Tensor[(10, 6, 12), float32], bool) */;
    %803 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 1050), float32] */, dtype="float32") /* ty=Tensor[(1, 1050), float32] */;
    %804 = reshape(%803, newshape=[5, 210]) /* ty=Tensor[(5, 210), float32] */;
    %805 = @func_4861(%804) /* ty=(Tensor[(7, 1, 15), float64], Tensor[(7, 1, 15), float32], Tensor[(7, 1, 15), float64], Tensor[(5, 210), uint32]) */;
    %806 = %802.0;
    %807 = %805.2;
    (%806, %807, meta[relay.Constant][33] /* ty=Tensor[(1, 1050), float32] */)
  };
  %808() /* ty=(Tensor[(10, 6, 12), float32], Tensor[(7, 1, 15), float64], Tensor[(1, 1050), float32]) */
}

def @func_3349() -> Tensor[(7, 1, 15), float64] {
  @func_3347() /* ty=Tensor[(7, 1, 15), float64] */
}

def @func_5232() -> (bool, bool) {
  %812 = fn () -> (bool, bool) {
    %809 = @func_2820() /* ty=(bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), bool], bool, bool, Tensor[(6, 11, 8), float64]) */;
    %810 = @func_2858() /* ty=bool */;
    %811 = %809.6;
    (%810, %811)
  };
  %812() /* ty=(bool, bool) */
}

def @func_6872() -> bool {
  %814 = fn () -> bool {
    %813 = @func_2948() /* ty=(bool,) */;
    %813.0
  };
  %814() /* ty=bool */
}

def @func_7367() -> (bool,) {
  %817 = fn () -> (bool,) {
    %815 = @func_2628() /* ty=(bool,) */;
    %816 = %815.0;
    (%816,)
  };
  %817() /* ty=(bool,) */
}

def @func_6194() -> (Tensor[(10, 6, 12), float32], Tensor[(2, 8, 12), int32]) {
  %822 = fn () -> (Tensor[(10, 6, 12), float32], Tensor[(2, 8, 12), int32]) {
    %818 = @func_1879() /* ty=(Tensor[(10, 6, 12), float32],) */;
    %819 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
    %820 = %818.0;
    %821 = %819.1;
    (%820, %821)
  };
  %822() /* ty=(Tensor[(10, 6, 12), float32], Tensor[(2, 8, 12), int32]) */
}

def @func_1665() -> (bool,) {
  %823 = @func_1498() /* ty=bool */;
  (%823,)
}

def @func_3455() -> Tensor[(108), float64] {
  @func_3453() /* ty=Tensor[(108), float64] */
}

def @main(%var_8222: Tensor[(7, 3, 15), float64]) -> (Tensor[(1176), float64], Tensor[(1050), uint16], bool, Tensor[(2160), bool], Tensor[(108), float64], Tensor[(7, 3, 15), bool], Tensor[(7, 1, 15), bool]) {
  %824 = cast(meta[relay.Constant][34] /* ty=Tensor[(1050), uint16] */, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %825 = reshape(%824, newshape=[5, 210]) /* ty=Tensor[(5, 210), uint16] */;
  %826 = @func_4733(%825) /* ty=(bool, Tensor[(1176), float64], Tensor[(1176), float64], Tensor[(7, 10, 15), float32], Tensor[(5, 210), uint16]) */;
  %827 = @func_1667() /* ty=(bool,) */;
  %828 = @func_6566() /* ty=(Tensor[(108), float64],) */;
  %829 = @func_3347() /* ty=Tensor[(7, 1, 15), float64] */;
  %830 = cast(%829, dtype="uint64") /* ty=Tensor[(7, 1, 15), uint64] */;
  %831 = cast(%var_8222, dtype="uint64") /* ty=Tensor[(7, 3, 15), uint64] */;
  %832 = bitwise_xor(%830, %831) /* ty=Tensor[(7, 3, 15), uint64] */;
  %833 = @func_7655() /* ty=bool */;
  %834 = cast(%832, dtype="bool") /* ty=Tensor[(7, 3, 15), bool] */;
  %835 = cast(%833, dtype="bool") /* ty=bool */;
  %836 = cast(meta[relay.Constant][35] /* ty=Tensor[(2160), bool] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %837 = reshape(%836, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), bool] */;
  %838 = @func_5824(%837) /* ty=(bool, Tensor[(9, 15, 16), uint32], bool, Tensor[(6, 11, 8), bool], Tensor[(198), int8]) */;
  %839 = %838.2;
  %840 = cast(%839, dtype="bool") /* ty=bool */;
  %841 = cast(%829, dtype="bool") /* ty=Tensor[(7, 1, 15), bool] */;
  %842 = %826.2;
  %843 = %827.0;
  %844 = %828.0;
  %845 = not_equal(%834, %835) /* ty=Tensor[(7, 3, 15), bool] */;
  %846 = less(%840, %841) /* ty=Tensor[(7, 1, 15), bool] */;
  (%842, meta[relay.Constant][34] /* ty=Tensor[(1050), uint16] */, %843, meta[relay.Constant][35] /* ty=Tensor[(2160), bool] */, %844, %845, %846)
}

def @func_3762() -> Tensor[(4, 12, 10), bool] {
  %847 = @func_2406() /* ty=(bool,) */;
  %848 = %847.0;
  %849 = cast(%848, dtype="bool") /* ty=bool */;
  %850 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 12, 10), bool] */, dtype="bool") /* ty=Tensor[(4, 12, 10), bool] */;
  equal(%849, %850) /* ty=Tensor[(4, 12, 10), bool] */
}

def @func_1277() -> (Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) {
  %851 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 8, 12), bool] */, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %852 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(2, 8, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 8, 12), bool] */, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %855 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 8, 12), bool] */, dtype="int32") /* ty=Tensor[(2, 8, 12), int32] */;
  %856 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(2, 8, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 8, 12), bool] */, dtype="int32") /* ty=Tensor[(2, 8, 12), int32] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %859 = cast(meta[relay.Constant][39] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %860 = cast(meta[relay.Constant][39] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %861 = reshape(%859, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %862 = reshape(%860, newshape=[4, 3, 9]) /* ty=Tensor[(4, 3, 9), float64] */;
  %863 = @func_696(%861, %862) /* ty=(Tensor[(4, 3, 9), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(6, 11, 8), bool]) */;
  %864 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %865 = reshape(%864, newshape=[]) /* ty=bool */;
  %866 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 8, 12), bool] */, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %867 = logical_and(%853, %854) /* ty=Tensor[(2, 8, 12), bool] */;
  %868 = bitwise_and(%857, %858) /* ty=Tensor[(2, 8, 12), int32] */;
  %869 = %863.3;
  %870 = @func_289(%865) /* ty=Tensor[(6, 11, 8), bool] */;
  %871 = sqrt(%866) /* ty=Tensor[(2, 8, 12), float64] */;
  (%867, %868, %869, meta[relay.Constant][39] /* ty=Tensor[(108), float64] */, %870, False /* ty=bool */, %871)
}

def @func_4156(%var_4154: Tensor[(9, 10, 3), float64], %var_4155: Tensor[(9, 10, 3), float64]) -> (Tensor[(9, 10, 3), float64], bool) {
  %879 = fn (%var_4138: Tensor[(9, 10, 3), float64], %var_4139: Tensor[(9, 10, 3), float64]) -> (Tensor[(9, 10, 3), float64], bool) {
    %872 = cast(%var_4139, dtype="float64") /* ty=Tensor[(9, 10, 3), float64] */;
    %873 = shape_of(%var_4138, dtype="int32") /* ty=Tensor[(3), int32] */;
    %874 = cast(%var_4138, dtype="float64") /* ty=Tensor[(9, 10, 3), float64] */;
    %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %876 = @func_4084() /* ty=(bool,) */;
    %877 = floor_divide(%874, %875) /* ty=Tensor[(9, 10, 3), float64] */;
    %878 = %876.0;
    (%877, %878)
  };
  %879(%var_4154, %var_4155) /* ty=(Tensor[(9, 10, 3), float64], bool) */
}

def @func_7478(%var_7457: Tensor[(15, 13, 1), int16]) -> (Tensor[(15, 13, 1), int16], Tensor[(15, 13, 1), float32]) {
  %880 = cast(meta[relay.Constant][40] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %881 = cast(%var_7457, dtype="int16") /* ty=Tensor[(15, 13, 1), int16] */;
  %882 = cast(%var_7457, dtype="float32") /* ty=Tensor[(15, 13, 1), float32] */;
  %883 = subtract(%880, %881) /* ty=Tensor[(15, 13, 1), int16] */;
  %884 = tan(%882) /* ty=Tensor[(15, 13, 1), float32] */;
  (%883, %884)
}

def @func_7144(%var_7121: Tensor[(1176), float64]) -> (Tensor[(10, 6, 12), float32], bool, Tensor[(4, 2), bool], Tensor[(1176), float64], bool) {
  %885 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 2), bool] */, dtype="bool") /* ty=Tensor[(4, 2), bool] */;
  %886 = cast(%var_7121, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %887 = reshape(%885, newshape=[1, 8]) /* ty=Tensor[(1, 8), bool] */;
  %888 = reshape(%886, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %889 = @func_4041(%887, %888) /* ty=(bool, Tensor[(1, 8), float32], bool, Tensor[(1176), float64], Tensor[(1176), float64], bool, Tensor[(108), float64], bool) */;
  %890 = cast(%var_7121, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %891 = reshape(%890, newshape=[1176]) /* ty=Tensor[(1176), float64] */;
  %892 = @func_4222(%891) /* ty=(bool, bool, Tensor[(1176), float64], Tensor[(108), float64]) */;
  %893 = @func_3877() /* ty=Tensor[(10, 6, 12), float32] */;
  %894 = %889.5;
  %895 = %892.0;
  (%893, %894, meta[relay.Constant][41] /* ty=Tensor[(4, 2), bool] */, %var_7121, %895)
}

def @func_6925(%var_6924: Tensor[(260), bool]) -> (Tensor[(4, 12, 10), int8], Tensor[(2, 10, 13), int32], Tensor[(260), bool]) {
  %901 = fn (%var_6921: Tensor[(260), bool]) -> (Tensor[(4, 12, 10), int8], Tensor[(2, 10, 13), int32], Tensor[(260), bool]) {
    %896 = cast(%var_6921, dtype="bool") /* ty=Tensor[(260), bool] */;
    %897 = reshape(%896, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), bool] */;
    %898 = @func_2675(%897) /* ty=(Tensor[(2, 10, 13), int32], Tensor[(2, 10, 13), uint16]) */;
    %899 = @func_6151() /* ty=Tensor[(4, 12, 10), int8] */;
    %900 = %898.0;
    (%899, %900, %var_6921)
  };
  %901(%var_6924) /* ty=(Tensor[(4, 12, 10), int8], Tensor[(2, 10, 13), int32], Tensor[(260), bool]) */
}

def @func_8107() -> (Tensor[(108), float64],) {
  %904 = fn () -> (Tensor[(108), float64],) {
    %902 = @func_1277() /* ty=(Tensor[(2, 8, 12), bool], Tensor[(2, 8, 12), int32], Tensor[(6, 11, 8), bool], Tensor[(108), float64], Tensor[(6, 11, 8), bool], bool, Tensor[(2, 8, 12), float64]) */;
    %903 = %902.3;
    (%903,)
  };
  %904() /* ty=(Tensor[(108), float64],) */
}

def @func_2324(%var_2322: Tensor[(11, 6, 3), int8], %var_2323: Tensor[(11, 6, 3), int8]) -> (Tensor[(11, 6, 3), int8], Tensor[(6, 11, 8), bool], bool, bool) {
  @func_2320(%var_2322, %var_2323) /* ty=(Tensor[(11, 6, 3), int8], Tensor[(6, 11, 8), bool], bool, bool) */
}

def @func_4245() -> (bool,) {
  %906 = fn () -> (bool,) {
    %905 = @func_2858() /* ty=bool */;
    (%905,)
  };
  %906() /* ty=(bool,) */
}

def @func_2170(%var_2158: Tensor[(9, 16, 9), float64]) -> (Tensor[(9, 16, 9), float64], bool) {
  %907 = cast(%var_2158, dtype="float64") /* ty=Tensor[(9, 16, 9), float64] */;
  %908 = log2(%907) /* ty=Tensor[(9, 16, 9), float64] */;
  %909 = @func_1957() /* ty=bool */;
  (%908, %909)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen39/build/output.py", line 2581, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:45:42] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

