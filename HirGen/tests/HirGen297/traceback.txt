==========mod==========
#[version = "0.0.5"]
def @func_8900() -> (Tensor[(14, 7, 2), int64],) {
  %0 = @func_2135() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_1776(%var_1772: Tensor[(3, 12, 5), float64]) -> (Tensor[(3, 12, 5), float64],) {
  %2 = cast(%var_1772, dtype="float64") /* ty=Tensor[(3, 12, 5), float64] */;
  %3 = erf(%2) /* ty=Tensor[(3, 12, 5), float64] */;
  (%3,)
}

def @func_3211() -> Tensor[(14, 7, 2), float64] {
  @func_59() /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_7892() -> (Tensor[(14, 7, 2), uint16],) {
  %4 = @func_6717() /* ty=Tensor[(14, 7, 2), uint16] */;
  (%4,)
}

def @func_5582() -> (Tensor[(14, 7, 2), bool], Tensor[(13, 11, 6), float64], Tensor[(858), float64]) {
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(858), float64] */, dtype="float64") /* ty=Tensor[(858), float64] */;
  %6 = reshape(%5, newshape=[13, 11, 6]) /* ty=Tensor[(13, 11, 6), float64] */;
  %7 = @func_752(%6) /* ty=(Tensor[(13, 11, 6), float64], Tensor[(14, 7, 2), int64]) */;
  %8 = @func_1422() /* ty=Tensor[(14, 7, 2), bool] */;
  %9 = %7.0;
  (%8, %9, meta[relay.Constant][0] /* ty=Tensor[(858), float64] */)
}

def @func_9973() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %10 = @func_3904() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %11 = @func_9677() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %12 = %10.0;
  %13 = %11.0;
  (%12, %13)
}

def @func_5416(%var_5410: Tensor[(14, 2, 7), bool]) -> Tensor[(14, 2, 7), bool] {
  %14 = cast(%var_5410, dtype="bool") /* ty=Tensor[(14, 2, 7), bool] */;
  %15 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(14, 2, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 2, 7), bool] */, dtype="bool") /* ty=Tensor[(14, 2, 7), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%16, %17) /* ty=Tensor[(14, 2, 7), bool] */
}

def @func_639() -> (Tensor[(14, 7, 2), int64],) {
  %18 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %19 = %18.0;
  (%19,)
}

def @func_6182(%var_6173: Tensor[(48, 1), float64]) -> (Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48, 1), float64]) {
  %20 = cast(%var_6173, dtype="float64") /* ty=Tensor[(48, 1), float64] */;
  %21 = reshape(%20, newshape=[2, 8, 3]) /* ty=Tensor[(2, 8, 3), float64] */;
  %22 = @func_927() /* ty=Tensor[(14, 7, 2), float64] */;
  %23 = @func_186(%21) /* ty=Tensor[(2, 8, 3), float64] */;
  (%22, %23, %var_6173)
}

def @func_2755(%var_2750: Tensor[(1, 12, 11), float32]) -> Tensor[(1, 12, 11), float32] {
  %24 = cast(%var_2750, dtype="float32") /* ty=Tensor[(1, 12, 11), float32] */;
  log10(%24) /* ty=Tensor[(1, 12, 11), float32] */
}

def @func_3460() -> (Tensor[(14, 7, 2), int64],) {
  %25 = @func_2135() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %26 = %25.0;
  (%26,)
}

def @func_1974(%var_1971: Tensor[(130, 15), float32]) -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32]) {
  %27 = @func_1520() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %28 = cast(%var_1971, dtype="float32") /* ty=Tensor[(130, 15), float32] */;
  %29 = reshape(%28, newshape=[1950]) /* ty=Tensor[(1950), float32] */;
  %30 = @func_1501(%29) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) */;
  %31 = %27.0;
  %32 = %30.0;
  (%31, %32, %var_1971)
}

def @func_3652(%var_3649: Tensor[(14, 1, 7), float32]) -> (Tensor[(14, 1, 7), float32],) {
  %33 = cast(%var_3649, dtype="float32") /* ty=Tensor[(14, 1, 7), float32] */;
  %34 = acosh(%33) /* ty=Tensor[(14, 1, 7), float32] */;
  (%34,)
}

def @func_7009(%var_6935: Tensor[(585), float64], %var_6973: Tensor[(1950), float32], %var_7002: Tensor[(270), float64]) -> (Tensor[(168), int16], Tensor[(14, 7, 2), int64], Tensor[(9, 9, 4), float32], Tensor[(5, 270, 5), int16], Tensor[(25), float64], Tensor[(1950), float32], Tensor[(585), float64], Tensor[(585), float64], Tensor[(6, 3, 15), float64], Tensor[(270), float64]) {
  %35 = @func_5446() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(168), int16]) */;
  %36 = @func_3377() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */;
  %37 = @func_5502() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(25), float64] */, dtype="float64") /* ty=Tensor[(25), float64] */;
  %39 = cast(%var_6973, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %40 = reshape(%38, newshape=[5, 1, 5]) /* ty=Tensor[(5, 1, 5), float64] */;
  %41 = reshape(%39, newshape=[1950]) /* ty=Tensor[(1950), float32] */;
  %42 = @func_5343(%40, %41) /* ty=(Tensor[(5, 1, 5), float64], Tensor[(14, 7, 2), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(6, 3, 15), float64], Tensor[(5, 270, 5), int16], Tensor[(270, 1), float64]) */;
  %43 = cast(%var_6935, dtype="float64") /* ty=Tensor[(585), float64] */;
  %44 = erf(%43) /* ty=Tensor[(585), float64] */;
  %45 = cast(%var_6935, dtype="float64") /* ty=Tensor[(585), float64] */;
  %46 = reshape(%45, newshape=[15, 3, 13]) /* ty=Tensor[(15, 3, 13), float64] */;
  %47 = @func_3312(%46) /* ty=(Tensor[(15, 3, 13), float64], Tensor[(14, 7, 2), float32]) */;
  %48 = %47.0;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %50 = shape_of(%44, dtype="int32") /* ty=Tensor[(1), int32] */;
  %51 = cast(%44, dtype="float64") /* ty=Tensor[(585), float64] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?), float64] */;
  %53 = cast(%48, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %54 = shape_of(%var_6935, dtype="int32") /* ty=Tensor[(1), int32] */;
  %55 = cast(%var_6935, dtype="float64") /* ty=Tensor[(585), float64] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?), float64] */;
  %57 = floor_mod(%55, %56) /* ty=Tensor[(585), float64] */;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(585), float64] */;
  %59 = cast(%var_7002, dtype="float64") /* ty=Tensor[(270), float64] */;
  %60 = reshape(%59, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), float64] */;
  %61 = @func_3278(%60) /* ty=(Tensor[(6, 3, 15), float64],) */;
  %62 = %35.2;
  %63 = %36.0;
  %64 = %37.0;
  %65 = %42.6;
  %66 = power(%51, %52) /* ty=Tensor[(585), float64] */;
  %67 = log10(%58) /* ty=Tensor[(585), float64] */;
  %68 = %61.0;
  (%62, %63, %64, %65, meta[relay.Constant][2] /* ty=Tensor[(25), float64] */, %var_6973, %66, %67, %68, %var_7002)
}

def @func_8260() -> Tensor[(14, 7, 2), int64] {
  %69 = @func_6093() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */;
  %69.3
}

def @func_6834() -> Tensor[(14, 7, 2), bool] {
  %70 = @func_4084() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(12, 14, 5), float32], Tensor[(840), float32], Tensor[(14, 7, 2), float64]) */;
  %70.0
}

def @func_3139() -> Tensor[(14, 7, 2), int64] {
  %71 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %71.0
}

def @func_9838() -> (Tensor[(14, 7, 2), float64],) {
  %72 = @func_588() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
  %73 = %72.0;
  (%73,)
}

def @func_7745() -> (Tensor[(14, 7, 2), int64],) {
  %74 = @func_2338() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %75 = %74.3;
  (%75,)
}

def @func_5045() -> (Tensor[(14, 7, 2), int64],) {
  %76 = @func_4367() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %77 = %76.2;
  (%77,)
}

def @func_4288(%var_4242: Tensor[(624), float32], %var_4244: Tensor[(624), float32], %var_4281: float64) -> (Tensor[(14, 7, 2), float64], Tensor[(16, 3, 13), float32], Tensor[(624), int8], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], float64, Tensor[(504), float64]) {
  %78 = @func_2632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %79 = cast(%var_4242, dtype="float32") /* ty=Tensor[(624), float32] */;
  %80 = reshape(%79, newshape=[16, 3, 13]) /* ty=Tensor[(16, 3, 13), float32] */;
  %81 = @func_2775(%80) /* ty=(Tensor[(16, 3, 13), float32], Tensor[(16, 3, 13), float32]) */;
  %82 = cast(%var_4244, dtype="int8") /* ty=Tensor[(624), int8] */;
  %83 = shape_of(%var_4242, dtype="int32") /* ty=Tensor[(1), int32] */;
  %84 = cast(%var_4242, dtype="int8") /* ty=Tensor[(624), int8] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?), int8] */;
  %86 = cast(%var_4281, dtype="float64") /* ty=float64 */;
  %87 = cast(meta[relay.Constant][3] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %88 = reshape(%86, newshape=[]) /* ty=float64 */;
  %89 = reshape(%87, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float64] */;
  %90 = @func_2999(%88, %89) /* ty=(Tensor[(9, 14, 4), float64], Tensor[(14, 7, 2), float64]) */;
  %91 = %78.0;
  %92 = %81.0;
  %93 = logical_xor(%84, %85) /* ty=Tensor[(624), int8] */;
  %94 = @func_1428() /* ty=Tensor[(14, 7, 2), int64] */;
  %95 = %90.1;
  (%91, %92, %93, %94, %95, %var_4281, meta[relay.Constant][3] /* ty=Tensor[(504), float64] */)
}

def @func_10473() -> (Tensor[(14, 7, 2), int64],) {
  %96 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %97 = %96.0;
  (%97,)
}

def @func_5003() -> (Tensor[(14, 7, 2), float64], Tensor[(1056), float64], Tensor[(14, 7, 2), int64]) {
  %98 = @func_1520() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %99 = @func_4200() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(16, 11, 6), float32], Tensor[(1056), float64], Tensor[(280), float32], Tensor[(16, 3, 13), float32], Tensor[(624), float32], Tensor[(14, 7, 2), bool]) */;
  %100 = @func_3426() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %101 = %98.0;
  %102 = %99.2;
  %103 = %100.0;
  (%101, %102, %103)
}

def @func_6230() -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) {
  %104 = @func_4657() /* ty=(Tensor[(14, 7, 2), bool],) */;
  %105 = %104.0;
  %106 = @func_5470() /* ty=Tensor[(14, 7, 2), int64] */;
  (%105, %106)
}

def @func_3775(%var_3757: Tensor[(2, 8, 10), float32], %var_3770: Tensor[(132), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(2, 8, 10), float32], Tensor[(1, 12, 11), float32], Tensor[(132), float32]) {
  %107 = @func_2783() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %108 = cast(%var_3757, dtype="float32") /* ty=Tensor[(2, 8, 10), float32] */;
  %109 = sinh(%108) /* ty=Tensor[(2, 8, 10), float32] */;
  %110 = cast(%109, dtype="float32") /* ty=Tensor[(2, 8, 10), float32] */;
  %111 = cast(%var_3770, dtype="float32") /* ty=Tensor[(132), float32] */;
  %112 = reshape(%111, newshape=[1, 12, 11]) /* ty=Tensor[(1, 12, 11), float32] */;
  %113 = %107.1;
  %114 = sin(%110) /* ty=Tensor[(2, 8, 10), float32] */;
  %115 = @func_2755(%112) /* ty=Tensor[(1, 12, 11), float32] */;
  (%113, %114, %115, %var_3770)
}

def @func_6524() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %116 = @func_4084() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(12, 14, 5), float32], Tensor[(840), float32], Tensor[(14, 7, 2), float64]) */;
  %117 = %116.3;
  %118 = @func_2151() /* ty=Tensor[(14, 7, 2), int64] */;
  (%117, %118)
}

def @func_8310(%var_8300: uint16, %var_8301: Tensor[(10, 5, 11), uint16]) -> Tensor[(10, 5, 11), uint16] {
  %119 = cast(%var_8300, dtype="uint16") /* ty=uint16 */;
  %120 = cast(%var_8301, dtype="uint16") /* ty=Tensor[(10, 5, 11), uint16] */;
  subtract(%119, %120) /* ty=Tensor[(10, 5, 11), uint16] */
}

def @func_243() -> (Tensor[(14, 7, 2), int64],) {
  %121 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  %122 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %124 = log10(%123) /* ty=Tensor[(14, 7, 2), float64] */;
  %125 = cast(%124, dtype="int64") /* ty=Tensor[(14, 7, 2), int64] */;
  %126 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%121, dtype="int64") /* ty=Tensor[(14, 7, 2), int64] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %129 = right_shift(%127, %128) /* ty=Tensor[(14, 7, 2), int64] */;
  (%129,)
}

def @func_2526() -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32], Tensor[(14, 7, 2), float64]) {
  %130 = cast(meta[relay.Constant][4] /* ty=Tensor[(130, 15), float32] */, dtype="float32") /* ty=Tensor[(130, 15), float32] */;
  %131 = reshape(%130, newshape=[130, 15]) /* ty=Tensor[(130, 15), float32] */;
  %132 = @func_1974(%131) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32]) */;
  %133 = @func_588() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
  %134 = @func_872() /* ty=Tensor[(14, 7, 2), bool] */;
  %135 = %132.0;
  %136 = %133.0;
  (%134, %135, meta[relay.Constant][4] /* ty=Tensor[(130, 15), float32] */, %136)
}

def @func_588() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) {
  %137 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  %138 = cast(%137, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %139 = reshape(%138, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float64] */;
  %140 = @func_99(%139) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) */;
  %141 = %140.1;
  (%137, %141)
}

def @func_1865() -> Tensor[(14, 7, 2), float64] {
  %142 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %143 = %142.0;
  %144 = cast(%143, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  atan(%144) /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_2151() -> Tensor[(14, 7, 2), int64] {
  %145 = @func_1814() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) */;
  %145.0
}

def @func_8826() -> (Tensor[(14, 7, 2), float64],) {
  %146 = @func_8447() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %147 = %146.1;
  (%147,)
}

def @func_3344(%var_3330: Tensor[(12, 14, 5), float32]) -> (Tensor[(12, 14, 5), float32], Tensor[(14, 7, 2), float64]) {
  %148 = cast(%var_3330, dtype="float32") /* ty=Tensor[(12, 14, 5), float32] */;
  %149 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(12, 14, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 14, 5), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 5), float32] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %152 = floor_mod(%150, %151) /* ty=Tensor[(12, 14, 5), float32] */;
  %153 = @func_1865() /* ty=Tensor[(14, 7, 2), float64] */;
  (%152, %153)
}

def @func_4842(%var_4828: Tensor[(7, 4, 6), int16]) -> (Tensor[(7, 4, 6), bool], Tensor[(7, 4, 6), float64], Tensor[(14, 7, 2), int64]) {
  %154 = cast(%var_4828, dtype="bool") /* ty=Tensor[(7, 4, 6), bool] */;
  %155 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(7, 4, 6), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 4, 6), int16] */, dtype="bool") /* ty=Tensor[(7, 4, 6), bool] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %158 = cast(%var_4828, dtype="float64") /* ty=Tensor[(7, 4, 6), float64] */;
  %159 = @func_4310() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %160 = less(%156, %157) /* ty=Tensor[(7, 4, 6), bool] */;
  %161 = acosh(%158) /* ty=Tensor[(7, 4, 6), float64] */;
  %162 = %159.1;
  (%160, %161, %162)
}

def @func_1422() -> Tensor[(14, 7, 2), bool] {
  @func_872() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_3993() -> Tensor[(14, 7, 2), int64] {
  %163 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %163.0
}

def @func_8788(%var_8744: Tensor[(4, 5, 15), int16], %var_8745: Tensor[(4, 5, 15), int16]) -> (Tensor[(4, 5, 15), bool], Tensor[(4, 5, 15), float32]) {
  %164 = cast(%var_8745, dtype="bool") /* ty=Tensor[(4, 5, 15), bool] */;
  %165 = shape_of(%var_8744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%var_8744, dtype="bool") /* ty=Tensor[(4, 5, 15), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = cast(%var_8744, dtype="float32") /* ty=Tensor[(4, 5, 15), float32] */;
  %169 = greater(%166, %167) /* ty=Tensor[(4, 5, 15), bool] */;
  %170 = tan(%168) /* ty=Tensor[(4, 5, 15), float32] */;
  (%169, %170)
}

def @func_10282() -> (Tensor[(14, 7, 2), int64],) {
  %171 = @func_9398() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %172 = %171.0;
  (%172,)
}

def @func_9398() -> (Tensor[(14, 7, 2), int64],) {
  %173 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %174 = %173.0;
  (%174,)
}

def @func_10506() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %175 = @func_7385() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) */;
  %176 = @func_7906() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %177 = @func_10094() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %178 = %175.1;
  %179 = %176.0;
  %180 = %177.1;
  (%178, %179, %180)
}

def @func_2289() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %181 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %182 = @func_978() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %183 = %181.0;
  %184 = %182.0;
  (%183, %184)
}

def @func_4438() -> (Tensor[(14, 7, 2), int64],) {
  %185 = @func_3012() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %186 = %185.0;
  (%186,)
}

def @func_344(%var_320: Tensor[(2, 14, 10), float32]) -> (Tensor[(2, 14, 10), float32],) {
  %187 = cast(%var_320, dtype="float32") /* ty=Tensor[(2, 14, 10), float32] */;
  %188 = log(%187) /* ty=Tensor[(2, 14, 10), float32] */;
  (%188,)
}

def @func_927() -> Tensor[(14, 7, 2), float64] {
  %189 = @func_588() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
  %189.0
}

def @func_8870() -> (Tensor[(14, 7, 2), int64],) {
  %190 = @func_2957() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) */;
  %191 = %190.1;
  (%191,)
}

def @func_9170() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %192 = @func_8377() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 8, 3), float64], Tensor[(48), float64]) */;
  %193 = @func_3993() /* ty=Tensor[(14, 7, 2), int64] */;
  %194 = %192.0;
  (%193, %194)
}

def @func_366(%var_364: Tensor[(1, 280), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(1, 280), float32]) {
  %195 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %196 = cast(%var_364, dtype="float32") /* ty=Tensor[(1, 280), float32] */;
  %197 = reshape(%196, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float32] */;
  %198 = @func_344(%197) /* ty=(Tensor[(2, 14, 10), float32],) */;
  %199 = %195.0;
  %200 = %198.0;
  (%199, %200, %var_364)
}

def @func_5261(%var_5236: Tensor[(10, 4), uint64]) -> (Tensor[(14, 7, 2), int64], Tensor[(5, 4, 2), uint64], uint64, Tensor[(10, 4), uint64], Tensor[(14, 7, 2), int64], Tensor[(6, 3, 15), float64], Tensor[(1, 270), float64]) {
  %201 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %202 = cast(meta[relay.Constant][7] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %203 = cast(%var_5236, dtype="uint64") /* ty=Tensor[(10, 4), uint64] */;
  %204 = reshape(%202, newshape=[]) /* ty=uint64 */;
  %205 = reshape(%203, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), uint64] */;
  %206 = @func_4940(%204, %205) /* ty=(Tensor[(5, 4, 2), uint64],) */;
  %207 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 270), float64] */, dtype="float64") /* ty=Tensor[(1, 270), float64] */;
  %208 = reshape(%207, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), float64] */;
  %209 = @func_3278(%208) /* ty=(Tensor[(6, 3, 15), float64],) */;
  %210 = %201.0;
  %211 = %206.0;
  %212 = @func_2683() /* ty=Tensor[(14, 7, 2), int64] */;
  %213 = %209.0;
  (%210, %211, meta[relay.Constant][7] /* ty=uint64 */, %var_5236, %212, %213, meta[relay.Constant][8] /* ty=Tensor[(1, 270), float64] */)
}

def @func_9078(%var_9070: Tensor[(15, 13, 12), float32], %var_9071: Tensor[(15, 13, 12), float32]) -> Tensor[(15, 13, 12), float32] {
  %214 = cast(%var_9071, dtype="float32") /* ty=Tensor[(15, 13, 12), float32] */;
  %215 = shape_of(%var_9070, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%var_9070, dtype="float32") /* ty=Tensor[(15, 13, 12), float32] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%216, %217) /* ty=Tensor[(15, 13, 12), float32] */
}

def @func_8679() -> (Tensor[(14, 7, 2), float64],) {
  %218 = @func_1520() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %219 = %218.0;
  (%219,)
}

def @func_7498(%var_7487: Tensor[(270), float64]) -> (Tensor[(14, 7, 2), bool], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(6, 3, 15), float64], Tensor[(270), float64]) {
  %220 = @func_5787() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(?, 280), int64], Tensor[(280), float32]) */;
  %221 = @func_4438() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %222 = %220.2;
  %223 = cast(%222, dtype="float32") /* ty=Tensor[(280), float32] */;
  %224 = reshape(%223, newshape=[1, 280]) /* ty=Tensor[(1, 280), float32] */;
  %225 = @func_2858(%224) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64]) */;
  %226 = cast(%var_7487, dtype="float64") /* ty=Tensor[(270), float64] */;
  %227 = reshape(%226, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), float64] */;
  %228 = @func_3278(%227) /* ty=(Tensor[(6, 3, 15), float64],) */;
  %229 = @func_872() /* ty=Tensor[(14, 7, 2), bool] */;
  %230 = %221.0;
  %231 = %225.0;
  %232 = %228.0;
  (%229, %222, %230, %231, %232, %var_7487)
}

def @func_9392() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %233 = @func_6365() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %234 = @func_6000() /* ty=Tensor[(14, 7, 2), float64] */;
  %235 = %233.0;
  (%234, %235)
}

def @func_7306() -> (Tensor[(2, 14, 10), float32], Tensor[(14, 7, 2), float64]) {
  %236 = @func_5557() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(2, 14, 10), float32], Tensor[(14, 7, 2), int64]) */;
  %237 = @func_1723() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48), float64], Tensor[(14, 7, 2), float64]) */;
  %238 = %236.2;
  %239 = %237.4;
  (%238, %239)
}

def @func_2632() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %240 = @func_2526() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32], Tensor[(14, 7, 2), float64]) */;
  %241 = @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %242 = %240.1;
  %243 = %241.0;
  (%242, %243)
}

def @func_3426() -> (Tensor[(14, 7, 2), int64],) {
  %244 = @func_802() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %245 = %244.0;
  (%245,)
}

def @func_9677() -> (Tensor[(14, 7, 2), int64],) {
  %246 = @func_6124() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %247 = %246.0;
  (%247,)
}

def @func_6358() -> (Tensor[(2, 4, 16), float32],) {
  %248 = @func_5866() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %249 = %248.0;
  (%249,)
}

def @func_1787() -> (Tensor[(14, 7, 2), int64],) {
  %250 = @func_978() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %251 = %250.0;
  (%251,)
}

def @func_414(%var_374: Tensor[(14, 7, 2), float64], %var_386: Tensor[(280), float32]) -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(280), float32], Tensor[(14, 7, 2), int8]) {
  %252 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %253 = %252.0;
  %254 = cast(%var_374, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %255 = shape_of(%253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%253, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %258 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %259 = cast(%var_386, dtype="float32") /* ty=Tensor[(280), float32] */;
  %260 = reshape(%259, newshape=[1, 280]) /* ty=Tensor[(1, 280), float32] */;
  %261 = @func_366(%260) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(1, 280), float32]) */;
  %262 = %261.0;
  %263 = cast(%var_374, dtype="int8") /* ty=Tensor[(14, 7, 2), int8] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="int8") /* ty=Tensor[(14, 7, 2), int8] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %267 = less(%256, %257) /* ty=Tensor[(14, 7, 2), bool] */;
  %268 = %258.0;
  %269 = add(%265, %266) /* ty=Tensor[(14, 7, 2), int8] */;
  (%267, %268, %var_386, %269)
}

def @func_8246() -> Tensor[(14, 7, 2), bool] {
  @func_872() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_898(%var_885: Tensor[(14, 7, 2), float64]) -> (Tensor[(14, 7, 2), bool], Tensor[(2, 10, 12), float32], Tensor[(2, 120), float32]) {
  %270 = @func_588() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
  %271 = %270.1;
  %272 = cast(%var_885, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %276 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 120), float32] */, dtype="float32") /* ty=Tensor[(2, 120), float32] */;
  %277 = reshape(%276, newshape=[2, 10, 12]) /* ty=Tensor[(2, 10, 12), float32] */;
  %278 = greater_equal(%274, %275) /* ty=Tensor[(14, 7, 2), bool] */;
  %279 = @func_821(%277) /* ty=Tensor[(2, 10, 12), float32] */;
  (%278, %279, meta[relay.Constant][9] /* ty=Tensor[(2, 120), float32] */)
}

def @func_3312(%var_3295: Tensor[(15, 3, 13), float64]) -> (Tensor[(15, 3, 13), float64], Tensor[(14, 7, 2), float32]) {
  %280 = cast(-0.024808f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %281 = cast(%var_3295, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %282 = @func_2957() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) */;
  %283 = floor_divide(%280, %281) /* ty=Tensor[(15, 3, 13), float64] */;
  %284 = %282.2;
  (%283, %284)
}

def @func_8065() -> (Tensor[(14, 7, 2), float64],) {
  %285 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %286 = %285.0;
  (%286,)
}

def @func_2466(%var_2427: Tensor[(16, 11, 6), float64], %var_2455: Tensor[(280), float32]) -> (Tensor[(16, 11, 6), int32], Tensor[(16, 11, 6), float32], Tensor[(14, 7, 2), int64], Tensor[(280), float32]) {
  %287 = cast(%var_2427, dtype="float64") /* ty=Tensor[(16, 11, 6), float64] */;
  %288 = tan(%287) /* ty=Tensor[(16, 11, 6), float64] */;
  %289 = cast(%var_2427, dtype="float64") /* ty=Tensor[(16, 11, 6), float64] */;
  %290 = log2(%289) /* ty=Tensor[(16, 11, 6), float64] */;
  %291 = cast(%290, dtype="int32") /* ty=Tensor[(16, 11, 6), int32] */;
  %292 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%288, dtype="int32") /* ty=Tensor[(16, 11, 6), int32] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %295 = cast(%var_2427, dtype="float32") /* ty=Tensor[(16, 11, 6), float32] */;
  %296 = cast(%var_2455, dtype="float32") /* ty=Tensor[(280), float32] */;
  %297 = reshape(%296, newshape=[1, 280]) /* ty=Tensor[(1, 280), float32] */;
  %298 = @func_366(%297) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(1, 280), float32]) */;
  %299 = logical_xor(%293, %294) /* ty=Tensor[(16, 11, 6), int32] */;
  %300 = acos(%295) /* ty=Tensor[(16, 11, 6), float32] */;
  %301 = %298.0;
  (%299, %300, %301, %var_2455)
}

def @func_1428() -> Tensor[(14, 7, 2), int64] {
  %302 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %302.0
}

def @func_6785() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float64], Tensor[(130, 15), float64]) {
  %303 = @func_2783() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %304 = @func_1787() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %305 = @func_5045() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %306 = @func_2783() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %307 = %304.0;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %309 = reshape(%308, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float64] */;
  %310 = @func_99(%309) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) */;
  %311 = cast(meta[relay.Constant][10] /* ty=Tensor[(130, 15), float64] */, dtype="float64") /* ty=Tensor[(130, 15), float64] */;
  %312 = reshape(%311, newshape=[130, 15]) /* ty=Tensor[(130, 15), float64] */;
  %313 = @func_6554(%312) /* ty=(Tensor[(130, 15), bool],) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="float64") /* ty=Tensor[(130, 15), float64] */;
  %316 = cast(meta[relay.Constant][10] /* ty=Tensor[(130, 15), float64] */, dtype="float64") /* ty=Tensor[(130, 15), float64] */;
  %317 = %303.0;
  %318 = %305.0;
  %319 = %306.1;
  %320 = %310.1;
  %321 = log2(%315) /* ty=Tensor[(130, 15), float64] */;
  %322 = erf(%316) /* ty=Tensor[(130, 15), float64] */;
  (%317, %307, %318, %319, %320, %321, %322)
}

def @func_1520() -> (Tensor[(14, 7, 2), float64],) {
  %323 = @func_927() /* ty=Tensor[(14, 7, 2), float64] */;
  (%323,)
}

def @func_10372(%var_10365: Tensor[(858), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(13, 11, 6), float64], Tensor[(858), float64], Tensor[(14, 7, 2), int64]) {
  %324 = @func_2632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %325 = cast(%var_10365, dtype="float64") /* ty=Tensor[(858), float64] */;
  %326 = reshape(%325, newshape=[13, 11, 6]) /* ty=Tensor[(13, 11, 6), float64] */;
  %327 = @func_752(%326) /* ty=(Tensor[(13, 11, 6), float64], Tensor[(14, 7, 2), int64]) */;
  %328 = @func_6430() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %329 = %324.1;
  %330 = @func_1865() /* ty=Tensor[(14, 7, 2), float64] */;
  %331 = %327.0;
  %332 = %328.0;
  (%329, %330, %331, %var_10365, %332)
}

def @func_872() -> Tensor[(14, 7, 2), bool] {
  %333 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %334 = %333.0;
  %335 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %336 = %335.0;
  %337 = cast(%336, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %338 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%334, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%339, %340) /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_2683() -> Tensor[(14, 7, 2), int64] {
  %341 = @func_978() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %341.0
}

def @func_4310() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %342 = @func_2783() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %343 = @func_978() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %344 = %342.1;
  %345 = %343.0;
  (%344, %345)
}

def @func_6717() -> Tensor[(14, 7, 2), uint16] {
  %346 = @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %347 = %346.1;
  %348 = @func_4657() /* ty=(Tensor[(14, 7, 2), bool],) */;
  %349 = %348.0;
  %350 = cast(%349, dtype="uint16") /* ty=Tensor[(14, 7, 2), uint16] */;
  %351 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%347, dtype="uint16") /* ty=Tensor[(14, 7, 2), uint16] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%352, %353) /* ty=Tensor[(14, 7, 2), uint16] */
}

def @func_6124() -> (Tensor[(14, 7, 2), int64],) {
  %354 = @func_3684() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %355 = %354.1;
  (%355,)
}

def @func_5137() -> Tensor[(14, 7, 2), int64] {
  %356 = @func_3684() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %356.1
}

def @func_7138() -> (Tensor[(5, 3, 3), uint64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) {
  %357 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 3, 3), uint64] */, dtype="uint64") /* ty=Tensor[(5, 3, 3), uint64] */;
  %358 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(5, 3, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 3, 3), uint64] */, dtype="uint64") /* ty=Tensor[(5, 3, 3), uint64] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %361 = @func_6365() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %362 = @func_4367() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %363 = @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %364 = maximum(%359, %360) /* ty=Tensor[(5, 3, 3), uint64] */;
  %365 = %361.0;
  %366 = %362.2;
  %367 = @func_2193() /* ty=Tensor[(14, 7, 2), bool] */;
  %368 = %363.1;
  (%364, %365, %366, %367, %368)
}

def @func_3278(%var_3268: Tensor[(6, 3, 15), float64]) -> (Tensor[(6, 3, 15), float64],) {
  %369 = cast(%var_3268, dtype="float64") /* ty=Tensor[(6, 3, 15), float64] */;
  %370 = cosh(%369) /* ty=Tensor[(6, 3, 15), float64] */;
  (%370,)
}

def @func_7630() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(280), float32]) {
  %371 = @func_4422() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %372 = @func_4310() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %373 = @func_3684() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %374 = @func_5787() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(?, 280), int64], Tensor[(280), float32]) */;
  %375 = @func_2683() /* ty=Tensor[(14, 7, 2), int64] */;
  %376 = %371.0;
  %377 = %372.1;
  %378 = @func_927() /* ty=Tensor[(14, 7, 2), float64] */;
  %379 = %373.0;
  %380 = %374.2;
  (%375, %376, %377, %378, %379, %380)
}

def @func_10446(%var_10441: Tensor[(270), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(270), float64]) {
  %381 = @func_10094() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %382 = cast(%var_10441, dtype="float64") /* ty=Tensor[(270), float64] */;
  %383 = reshape(%382, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %384 = @func_7498(%383) /* ty=(Tensor[(14, 7, 2), bool], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(6, 3, 15), float64], Tensor[(270), float64]) */;
  %385 = %381.2;
  %386 = %384.0;
  (%385, %386, %var_10441)
}

def @func_9278() -> (Tensor[(14, 7, 2), float64],) {
  %387 = @func_3211() /* ty=Tensor[(14, 7, 2), float64] */;
  (%387,)
}

def @func_4471() -> Tensor[(14, 7, 2), int64] {
  %388 = @func_4422() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %388.0
}

def @func_9466() -> Tensor[(14, 7, 2), bool] {
  @func_7243() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_10136() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %389 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %390 = @func_9356() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 4, 16), float32]) */;
  %391 = %389.0;
  %392 = @func_3993() /* ty=Tensor[(14, 7, 2), int64] */;
  %393 = %390.0;
  (%391, %392, %393)
}

def @func_9656() -> (Tensor[(14, 7, 2), float64],) {
  %394 = @func_6093() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */;
  %395 = %394.4;
  (%395,)
}

def @func_2338() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %396 = @func_1195() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %397 = @func_1047() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %398 = @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %399 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  %400 = %396.0;
  %401 = %397.1;
  %402 = @func_2151() /* ty=Tensor[(14, 7, 2), int64] */;
  %403 = %398.1;
  (%399, %400, %401, %402, %403)
}

def @func_1367() -> (Tensor[(14, 7, 2), float64],) {
  %404 = @func_1309() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %405 = %404.0;
  (%405,)
}

def @func_2783() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %406 = @func_2369() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
  %407 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %408 = %406.1;
  %409 = %407.0;
  (%408, %409)
}

def @func_8447() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %410 = @func_2338() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %411 = @func_5003() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(1056), float64], Tensor[(14, 7, 2), int64]) */;
  %412 = %410.3;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %414 = reshape(%413, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float32] */;
  %415 = @func_458(%414) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
  %416 = %415.4;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %418 = @func_6430() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %419 = %411.0;
  %420 = acosh(%417) /* ty=Tensor[(14, 7, 2), float64] */;
  %421 = %418.0;
  (%412, %419, %420, %421)
}

def @func_8525(%var_8522: Tensor[(3, 8, 8), float32]) -> Tensor[(3, 8, 8), float32] {
  %422 = cast(%var_8522, dtype="float32") /* ty=Tensor[(3, 8, 8), float32] */;
  cosh(%422) /* ty=Tensor[(3, 8, 8), float32] */
}

def @func_1047() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %423 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %424 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %425 = %423.0;
  %426 = %424.0;
  (%425, %426)
}

def @func_5470() -> Tensor[(14, 7, 2), int64] {
  %427 = @func_1195() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %427.0
}

def @func_5752() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %428 = @func_3629() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %429 = %428.0;
  %430 = @func_1422() /* ty=Tensor[(14, 7, 2), bool] */;
  %431 = @func_2151() /* ty=Tensor[(14, 7, 2), int64] */;
  %432 = @func_3211() /* ty=Tensor[(14, 7, 2), float64] */;
  (%429, %430, %431, %432)
}

def @func_7385() -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) {
  %433 = @func_6093() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */;
  %434 = @func_2193() /* ty=Tensor[(14, 7, 2), bool] */;
  %435 = %433.3;
  (%434, %435)
}

def @func_5866() -> (Tensor[(2, 4, 16), float32],) {
  %436 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 4, 16), float32] */, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
  %437 = sin(%436) /* ty=Tensor[(2, 4, 16), float32] */;
  (%437,)
}

def @func_9630() -> (Tensor[(14, 7, 2), int64],) {
  %438 = @func_802() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %439 = %438.0;
  (%439,)
}

def @func_8103(%var_8075: Tensor[(6, 1, 10), float64], %var_8097: Tensor[(6, 16, 10), float32]) -> (Tensor[(6, 13, 10), uint8], Tensor[(6, 16, 10), float64]) {
  %440 = cast(%var_8075, dtype="uint8") /* ty=Tensor[(6, 1, 10), uint8] */;
  %441 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 13, 10), float64] */, dtype="uint8") /* ty=Tensor[(6, 13, 10), uint8] */;
  %442 = cast(%var_8075, dtype="float64") /* ty=Tensor[(6, 1, 10), float64] */;
  %443 = asinh(%442) /* ty=Tensor[(6, 1, 10), float64] */;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(6, 1, 10), float32] */;
  %445 = atan(%444) /* ty=Tensor[(6, 1, 10), float32] */;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(6, 1, 10), float64] */;
  %447 = cast(%var_8097, dtype="float64") /* ty=Tensor[(6, 16, 10), float64] */;
  %448 = bitwise_xor(%440, %441) /* ty=Tensor[(6, 13, 10), uint8] */;
  %449 = mod(%446, %447) /* ty=Tensor[(6, 16, 10), float64] */;
  (%448, %449)
}

def @func_9025() -> (Tensor[(14, 7, 2), float64],) {
  %450 = @func_4367() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %451 = %450.1;
  (%451,)
}

def @func_6289() -> (Tensor[(14, 7, 2), int64],) {
  %452 = @func_2683() /* ty=Tensor[(14, 7, 2), int64] */;
  (%452,)
}

def @func_6554(%var_6549: Tensor[(130, 15), float64]) -> (Tensor[(130, 15), bool],) {
  %453 = @func_2526() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32], Tensor[(14, 7, 2), float64]) */;
  %454 = %453.2;
  %455 = cast(%454, dtype="float64") /* ty=Tensor[(130, 15), float64] */;
  %456 = asin(%455) /* ty=Tensor[(130, 15), float64] */;
  %457 = cast(%var_6549, dtype="bool") /* ty=Tensor[(130, 15), bool] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(2), int32] */;
  %459 = cast(%456, dtype="bool") /* ty=Tensor[(130, 15), bool] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %461 = not_equal(%459, %460) /* ty=Tensor[(130, 15), bool] */;
  (%461,)
}

def @func_2896(%var_2878: Tensor[(14, 7, 2), bool]) -> (Tensor[(14, 7, 2), uint64], Tensor[(14, 7, 2), int64]) {
  %462 = @func_1422() /* ty=Tensor[(14, 7, 2), bool] */;
  %463 = cast(%var_2878, dtype="uint64") /* ty=Tensor[(14, 7, 2), uint64] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%462, dtype="uint64") /* ty=Tensor[(14, 7, 2), uint64] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %467 = bitwise_and(%465, %466) /* ty=Tensor[(14, 7, 2), uint64] */;
  %468 = @func_2683() /* ty=Tensor[(14, 7, 2), int64] */;
  (%467, %468)
}

def @func_2642(%var_2634: Tensor[(14, 6, 7), float64]) -> Tensor[(14, 6, 7), float64] {
  %469 = cast(%var_2634, dtype="float64") /* ty=Tensor[(14, 6, 7), float64] */;
  tan(%469) /* ty=Tensor[(14, 6, 7), float64] */
}

def @func_752(%var_737: Tensor[(13, 11, 6), float64]) -> (Tensor[(13, 11, 6), float64], Tensor[(14, 7, 2), int64]) {
  %470 = cast(%var_737, dtype="float64") /* ty=Tensor[(13, 11, 6), float64] */;
  %471 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(13, 11, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 11, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 11, 6), float64] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %474 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %475 = floor_mod(%472, %473) /* ty=Tensor[(13, 11, 6), float64] */;
  %476 = %474.0;
  (%475, %476)
}

def @func_5446() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(168), int16]) {
  %477 = cast(meta[relay.Constant][16] /* ty=Tensor[(168), int16] */, dtype="int16") /* ty=Tensor[(168), int16] */;
  %478 = reshape(%477, newshape=[7, 4, 6]) /* ty=Tensor[(7, 4, 6), int16] */;
  %479 = @func_4842(%478) /* ty=(Tensor[(7, 4, 6), bool], Tensor[(7, 4, 6), float64], Tensor[(14, 7, 2), int64]) */;
  %480 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  %481 = %479.2;
  (%480, %481, meta[relay.Constant][16] /* ty=Tensor[(168), int16] */)
}

def @func_2193() -> Tensor[(14, 7, 2), bool] {
  @func_1422() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_790() -> (Tensor[(14, 7, 2), int64],) {
  %482 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %483 = %482.0;
  (%483,)
}

def @func_1168(%var_1143: Tensor[(15, 13, 10), float32]) -> (Tensor[(15, 13, 10), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %484 = cast(%var_1143, dtype="float32") /* ty=Tensor[(15, 13, 10), float32] */;
  %485 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %486 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %487 = log10(%484) /* ty=Tensor[(15, 13, 10), float32] */;
  %488 = %485.0;
  %489 = %486.0;
  (%487, %488, %489)
}

def @func_186(%var_183: Tensor[(2, 8, 3), float64]) -> Tensor[(2, 8, 3), float64] {
  %490 = cast(%var_183, dtype="float64") /* ty=Tensor[(2, 8, 3), float64] */;
  sigmoid(%490) /* ty=Tensor[(2, 8, 3), float64] */
}

def @func_10094() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %491 = @func_1367() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %492 = @func_8044() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) */;
  %493 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  %494 = %491.0;
  %495 = %492.1;
  (%493, %494, %495)
}

def @func_6365() -> (Tensor[(14, 7, 2), int64],) {
  %496 = @func_4422() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %497 = %496.0;
  (%497,)
}

def @func_1814() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) {
  %498 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %499 = %498.0;
  %500 = @func_872() /* ty=Tensor[(14, 7, 2), bool] */;
  (%499, %500)
}

def @func_1616(%var_1597: Tensor[(14, 7, 2), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) {
  %501 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %502 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %503 = %502.0;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %505 = exp(%504) /* ty=Tensor[(14, 7, 2), float32] */;
  %506 = cast(%var_1597, dtype="int64") /* ty=Tensor[(14, 7, 2), int64] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%505, dtype="int64") /* ty=Tensor[(14, 7, 2), int64] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %510 = cast(%505, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %511 = %501.0;
  %512 = minimum(%508, %509) /* ty=Tensor[(14, 7, 2), int64] */;
  %513 = rsqrt(%510) /* ty=Tensor[(14, 7, 2), float32] */;
  (%511, %512, %513)
}

def @func_5662(%var_5637: float64) -> (Tensor[(3, 8, 14), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool]) {
  %514 = cast(%var_5637, dtype="float64") /* ty=float64 */;
  %515 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 8, 14), float64] */, dtype="float64") /* ty=Tensor[(3, 8, 14), float64] */;
  %516 = @func_1367() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %517 = @func_5582() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(13, 11, 6), float64], Tensor[(858), float64]) */;
  %518 = floor_divide(%514, %515) /* ty=Tensor[(3, 8, 14), float64] */;
  %519 = %516.0;
  %520 = %517.0;
  (%518, %519, %520)
}

def @func_802() -> (Tensor[(14, 7, 2), int64],) {
  %521 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %522 = %521.0;
  (%522,)
}

def @func_7973(%var_7928: Tensor[(14, 7, 2), bool], %var_7941: Tensor[(585), float64], %var_7942: Tensor[(1, 1950), float32], %var_7943: Tensor[(270), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(6, 3, 15), float64], Tensor[(585), float64], Tensor[(1, 1950), float32], Tensor[(270), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %523 = @func_4367() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %524 = @func_2783() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %525 = @func_5787() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(?, 280), int64], Tensor[(280), float32]) */;
  %526 = %525.0;
  %527 = cast(%var_7928, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %528 = shape_of(%526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%526, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %531 = cast(%var_7941, dtype="float64") /* ty=Tensor[(585), float64] */;
  %532 = cast(%var_7942, dtype="float32") /* ty=Tensor[(1, 1950), float32] */;
  %533 = cast(%var_7943, dtype="float64") /* ty=Tensor[(270), float64] */;
  %534 = reshape(%531, newshape=[585]) /* ty=Tensor[(585), float64] */;
  %535 = reshape(%532, newshape=[1950]) /* ty=Tensor[(1950), float32] */;
  %536 = reshape(%533, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %537 = @func_7009(%534, %535, %536) /* ty=(Tensor[(168), int16], Tensor[(14, 7, 2), int64], Tensor[(9, 9, 4), float32], Tensor[(5, 270, 5), int16], Tensor[(25), float64], Tensor[(1950), float32], Tensor[(585), float64], Tensor[(585), float64], Tensor[(6, 3, 15), float64], Tensor[(270), float64]) */;
  %538 = @func_3012() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %539 = @func_2369() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
  %540 = %523.2;
  %541 = %524.0;
  %542 = logical_and(%529, %530) /* ty=Tensor[(14, 7, 2), bool] */;
  %543 = %537.8;
  %544 = %538.0;
  %545 = %539.1;
  (%540, %541, %542, %543, %var_7941, %var_7942, %var_7943, %544, %545)
}

def @func_3904() -> (Tensor[(14, 7, 2), float64],) {
  %546 = @func_2338() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %547 = %546.0;
  (%547,)
}

def @func_8983() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(2, 8, 3), float32], Tensor[(2, 8, 3), float32]) {
  %548 = @func_978() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %549 = @func_5582() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(13, 11, 6), float64], Tensor[(858), float64]) */;
  %550 = @func_8377() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 8, 3), float64], Tensor[(48), float64]) */;
  %551 = %550.1;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(2, 8, 3), float32] */;
  %553 = cast(%551, dtype="float32") /* ty=Tensor[(2, 8, 3), float32] */;
  %554 = %548.0;
  %555 = %549.0;
  %556 = sinh(%552) /* ty=Tensor[(2, 8, 3), float32] */;
  %557 = cosh(%553) /* ty=Tensor[(2, 8, 3), float32] */;
  (%554, %555, %556, %557)
}

def @func_1723() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48), float64], Tensor[(14, 7, 2), float64]) {
  %558 = @func_1129() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(2, 14, 10), float32], Tensor[(280), float32]) */;
  %559 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %560 = %559.0;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %562 = cast(meta[relay.Constant][18] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %563 = reshape(%562, newshape=[2, 8, 3]) /* ty=Tensor[(2, 8, 3), float64] */;
  %564 = %558.1;
  %565 = sigmoid(%561) /* ty=Tensor[(14, 7, 2), float64] */;
  %566 = @func_186(%563) /* ty=Tensor[(2, 8, 3), float64] */;
  %567 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%564, %565, %566, meta[relay.Constant][18] /* ty=Tensor[(48), float64] */, %567)
}

def @func_6858() -> (Tensor[(14, 7, 2), bool],) {
  %568 = @func_1422() /* ty=Tensor[(14, 7, 2), bool] */;
  (%568,)
}

def @func_3012() -> (Tensor[(14, 7, 2), int64],) {
  %569 = @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %570 = %569.0;
  (%570,)
}

def @func_8377() -> (Tensor[(14, 7, 2), int64], Tensor[(2, 8, 3), float64], Tensor[(48), float64]) {
  %571 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %572 = cast(meta[relay.Constant][19] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %573 = reshape(%572, newshape=[2, 8, 3]) /* ty=Tensor[(2, 8, 3), float64] */;
  %574 = %571.0;
  %575 = @func_186(%573) /* ty=Tensor[(2, 8, 3), float64] */;
  (%574, %575, meta[relay.Constant][19] /* ty=Tensor[(48), float64] */)
}

def @func_1309() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %576 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %577 = %576.0;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %579 = reshape(%578, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float32] */;
  %580 = @func_458(%579) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
  %581 = %580.1;
  (%577, %581)
}

def @func_5787() -> (Tensor[(14, 7, 2), bool], Tensor[(?, 280), int64], Tensor[(280), float32]) {
  %582 = @func_5458() /* ty=(Tensor[(14, 7, 2), bool],) */;
  %583 = cast(meta[relay.Constant][20] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %584 = reshape(%583, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %585 = @func_3548(%584) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64], Tensor[(280), float32]) */;
  %586 = %582.0;
  %587 = %585.1;
  (%586, %587, meta[relay.Constant][20] /* ty=Tensor[(280), float32] */)
}

def @func_458(%var_435: Tensor[(14, 7, 2), float32]) -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) {
  %588 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %589 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %590 = %589.0;
  %591 = cast(%590, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %592 = reshape(%591, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float64] */;
  %593 = @func_99(%592) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) */;
  %594 = %593.0;
  %595 = cast(%var_435, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%594, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %599 = cast(%var_435, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %600 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %601 = %588.0;
  %602 = mod(%597, %598) /* ty=Tensor[(14, 7, 2), float32] */;
  %603 = tan(%599) /* ty=Tensor[(14, 7, 2), float64] */;
  %604 = %600.0;
  (%601, %590, %602, %603, %604)
}

def @func_2135() -> (Tensor[(14, 7, 2), int64],) {
  %605 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %606 = %605.0;
  (%606,)
}

def @func_3629() -> (Tensor[(14, 7, 2), int64],) {
  %607 = @func_2135() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %608 = %607.0;
  (%608,)
}

def @func_7906() -> (Tensor[(14, 7, 2), int64],) {
  %609 = @func_4438() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %610 = %609.0;
  (%610,)
}

def @func_4940(%var_4917: uint64, %var_4918: Tensor[(5, 4, 2), uint64]) -> (Tensor[(5, 4, 2), uint64],) {
  %611 = cast(%var_4917, dtype="uint64") /* ty=uint64 */;
  %612 = cast(%var_4918, dtype="uint64") /* ty=Tensor[(5, 4, 2), uint64] */;
  %613 = multiply(%611, %612) /* ty=Tensor[(5, 4, 2), uint64] */;
  (%613,)
}

def @func_5557() -> (Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(2, 14, 10), float32], Tensor[(14, 7, 2), int64]) {
  %614 = @func_2526() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32], Tensor[(14, 7, 2), float64]) */;
  %615 = @func_2609() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) */;
  %616 = @func_1129() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(2, 14, 10), float32], Tensor[(280), float32]) */;
  %617 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %618 = %614.1;
  %619 = %615.3;
  %620 = %616.2;
  %621 = %617.0;
  (%618, %619, %620, %621)
}

def @func_3611() -> Tensor[(14, 7, 2), int64] {
  %622 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %622.0
}

def @func_4657() -> (Tensor[(14, 7, 2), bool],) {
  %623 = @func_2193() /* ty=Tensor[(14, 7, 2), bool] */;
  (%623,)
}

def @func_6430() -> (Tensor[(14, 7, 2), int64],) {
  %624 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %625 = %624.0;
  (%625,)
}

def @func_2925(%var_2920: Tensor[(4, 16, 7), float64]) -> Tensor[(4, 16, 7), float64] {
  %626 = cast(%var_2920, dtype="float64") /* ty=Tensor[(4, 16, 7), float64] */;
  log2(%626) /* ty=Tensor[(4, 16, 7), float64] */
}

def @func_3872(%var_3837: Tensor[(14, 7, 2), int64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), uint8], Tensor[(585), bool], Tensor[(585), float32], Tensor[(14, 7, 2), bool], Tensor[(280), float32]) {
  %627 = @func_1787() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %628 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %629 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %630 = %629.0;
  %631 = cast(%var_3837, dtype="uint8") /* ty=Tensor[(14, 7, 2), uint8] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%630, dtype="uint8") /* ty=Tensor[(14, 7, 2), uint8] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %635 = cast(meta[relay.Constant][21] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
  %636 = reshape(%635, newshape=[15, 3, 13]) /* ty=Tensor[(15, 3, 13), float64] */;
  %637 = @func_3312(%636) /* ty=(Tensor[(15, 3, 13), float64], Tensor[(14, 7, 2), float32]) */;
  %638 = %637.0;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %640 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(585), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %641 = cast(meta[relay.Constant][21] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?), float64] */;
  %643 = floor_divide(%641, %642) /* ty=Tensor[(585), float64] */;
  %644 = cast(%643, dtype="bool") /* ty=Tensor[(585), bool] */;
  %645 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(585), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %646 = cast(meta[relay.Constant][21] /* ty=Tensor[(585), float64] */, dtype="bool") /* ty=Tensor[(585), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?), bool] */;
  %648 = cast(meta[relay.Constant][21] /* ty=Tensor[(585), float64] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %649 = cos(%648) /* ty=Tensor[(585), float32] */;
  %650 = cast(%638, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
  %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(1), int32] */;
  %652 = cast(%649, dtype="float32") /* ty=Tensor[(585), float32] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?), float32] */;
  %654 = %628.0;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %656 = cast(meta[relay.Constant][22] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %657 = reshape(%655, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float64] */;
  %658 = reshape(%656, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %659 = @func_414(%657, %658) /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(280), float32], Tensor[(14, 7, 2), int8]) */;
  %660 = %627.0;
  %661 = maximum(%633, %634) /* ty=Tensor[(14, 7, 2), uint8] */;
  %662 = less_equal(%646, %647) /* ty=Tensor[(585), bool] */;
  %663 = minimum(%652, %653) /* ty=Tensor[(585), float32] */;
  %664 = %659.0;
  (%660, %654, %661, %662, %663, %664, meta[relay.Constant][22] /* ty=Tensor[(280), float32] */)
}

def @func_99(%var_78: Tensor[(14, 7, 2), float64]) -> (Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) {
  %665 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  %666 = cast(%var_78, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%665, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %670 = divide(%668, %669) /* ty=Tensor[(14, 7, 2), float32] */;
  %671 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%670, %671)
}

def @func_3548(%var_3542: Tensor[(280), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64], Tensor[(280), float32]) {
  %672 = @func_3426() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %673 = cast(%var_3542, dtype="float32") /* ty=Tensor[(280), float32] */;
  %674 = reshape(%673, newshape=[1, 280]) /* ty=Tensor[(1, 280), float32] */;
  %675 = @func_2858(%674) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64]) */;
  %676 = %672.0;
  %677 = %675.1;
  (%676, %677, %var_3542)
}

def @func_7854() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %678 = @func_5632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
  %679 = @func_6000() /* ty=Tensor[(14, 7, 2), float64] */;
  %680 = %678.2;
  %681 = @func_2151() /* ty=Tensor[(14, 7, 2), int64] */;
  (%679, %680, %681)
}

def @func_9733(%var_9725: Tensor[(1, 13, 11), float64]) -> (Tensor[(1, 13, 11), float64], Tensor[(180), float64], Tensor[(180, 1), float64]) {
  %682 = cast(%var_9725, dtype="float64") /* ty=Tensor[(1, 13, 11), float64] */;
  %683 = cast(meta[relay.Constant][23] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %684 = reshape(%683, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %685 = @func_1922(%684) /* ty=(Tensor[(280), float32], Tensor[(3, 12, 5), float64], Tensor[(180), float64]) */;
  %686 = asin(%682) /* ty=Tensor[(1, 13, 11), float64] */;
  %687 = %685.2;
  (%686, %687, meta[relay.Constant][23] /* ty=Tensor[(180, 1), float64] */)
}

def @func_9921() -> Tensor[(14, 7, 2), float64] {
  %688 = @func_3469() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %688.0
}

def @main() -> (Tensor[(5, 3, 3), bool], Tensor[(5, 3, 3), float32]) {
  %689 = @func_7138() /* ty=(Tensor[(5, 3, 3), uint64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) */;
  %690 = %689.0;
  %691 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 3, 3), uint64] */, dtype="bool") /* ty=Tensor[(5, 3, 3), bool] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%690, dtype="bool") /* ty=Tensor[(5, 3, 3), bool] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %695 = cast(%690, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
  %696 = logical_and(%693, %694) /* ty=Tensor[(5, 3, 3), bool] */;
  %697 = erf(%695) /* ty=Tensor[(5, 3, 3), float32] */;
  (%696, %697)
}

def @func_1195() -> (Tensor[(14, 7, 2), int64],) {
  %698 = @func_1047() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %699 = %698.1;
  (%699,)
}

def @func_4084() -> (Tensor[(14, 7, 2), bool], Tensor[(12, 14, 5), float32], Tensor[(840), float32], Tensor[(14, 7, 2), float64]) {
  %700 = cast(meta[relay.Constant][25] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %701 = reshape(%700, newshape=[12, 14, 5]) /* ty=Tensor[(12, 14, 5), float32] */;
  %702 = @func_3344(%701) /* ty=(Tensor[(12, 14, 5), float32], Tensor[(14, 7, 2), float64]) */;
  %703 = @func_872() /* ty=Tensor[(14, 7, 2), bool] */;
  %704 = %702.0;
  %705 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%703, %704, meta[relay.Constant][25] /* ty=Tensor[(840), float32] */, %705)
}

def @func_2775(%var_2759: Tensor[(16, 3, 13), float32]) -> (Tensor[(16, 3, 13), float32], Tensor[(16, 3, 13), float32]) {
  %706 = cast(%var_2759, dtype="float32") /* ty=Tensor[(16, 3, 13), float32] */;
  %707 = cast(%var_2759, dtype="float32") /* ty=Tensor[(16, 3, 13), float32] */;
  %708 = sigmoid(%706) /* ty=Tensor[(16, 3, 13), float32] */;
  %709 = log10(%707) /* ty=Tensor[(16, 3, 13), float32] */;
  (%708, %709)
}

def @func_8207() -> Tensor[(14, 7, 2), float64] {
  @func_927() /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_978() -> (Tensor[(14, 7, 2), int64],) {
  %710 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %711 = %710.0;
  (%711,)
}

def @func_5502() -> (Tensor[(9, 9, 4), float32],) {
  %712 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 9, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %713 = atan(%712) /* ty=Tensor[(9, 9, 4), float32] */;
  (%713,)
}

def @func_5632() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) {
  %714 = @func_2957() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) */;
  %715 = @func_4657() /* ty=(Tensor[(14, 7, 2), bool],) */;
  %716 = @func_1723() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48), float64], Tensor[(14, 7, 2), float64]) */;
  %717 = %714.0;
  %718 = %715.0;
  %719 = %716.0;
  (%717, %718, %719)
}

def @func_4723() -> (Tensor[(14, 7, 2), bool],) {
  %720 = @func_1422() /* ty=Tensor[(14, 7, 2), bool] */;
  (%720,)
}

def @func_9598() -> Tensor[(14, 7, 2), float64] {
  %721 = @func_8594() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %721.0
}

def @func_4621(%var_4600: float32, %var_4601: Tensor[(1, 3, 11), float32], %var_4608: Tensor[(13, 3, 11), float32], %var_4615: Tensor[(5, 56), float32]) -> (Tensor[(1, 3, 11), bool], Tensor[(13, 3, 11), uint64], Tensor[(14, 7, 2), int64], Tensor[(5, 56), float32]) {
  %722 = cast(%var_4600, dtype="bool") /* ty=bool */;
  %723 = cast(%var_4601, dtype="bool") /* ty=Tensor[(1, 3, 11), bool] */;
  %724 = cast(%var_4601, dtype="uint64") /* ty=Tensor[(1, 3, 11), uint64] */;
  %725 = cast(%var_4608, dtype="uint64") /* ty=Tensor[(13, 3, 11), uint64] */;
  %726 = cast(%var_4615, dtype="float32") /* ty=Tensor[(5, 56), float32] */;
  %727 = reshape(%726, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %728 = @func_3548(%727) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64], Tensor[(280), float32]) */;
  %729 = greater_equal(%722, %723) /* ty=Tensor[(1, 3, 11), bool] */;
  %730 = multiply(%724, %725) /* ty=Tensor[(13, 3, 11), uint64] */;
  %731 = %728.0;
  (%729, %730, %731, %var_4615)
}

def @func_10411() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(48), float64]) {
  %732 = @func_9398() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %733 = cast(meta[relay.Constant][27] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %734 = reshape(%733, newshape=[48, 1]) /* ty=Tensor[(48, 1), float64] */;
  %735 = @func_6182(%734) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48, 1), float64]) */;
  %736 = %732.0;
  %737 = %735.0;
  (%736, %737, meta[relay.Constant][27] /* ty=Tensor[(48), float64] */)
}

def @func_4367() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %738 = @func_2338() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %739 = @func_2683() /* ty=Tensor[(14, 7, 2), int64] */;
  %740 = @func_927() /* ty=Tensor[(14, 7, 2), float64] */;
  %741 = %738.4;
  (%739, %740, %741)
}

def @func_2721() -> (Tensor[(3, 12, 5), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float32]) {
  %742 = cast(meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %743 = reshape(%742, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), float64] */;
  %744 = @func_1776(%743) /* ty=(Tensor[(3, 12, 5), float64],) */;
  %745 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %746 = %745.0;
  %747 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 7, 2), int64] */, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %751 = %744.0;
  %752 = power(%749, %750) /* ty=Tensor[(14, 7, 2), float32] */;
  (%751, meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, %752)
}

def @func_7243() -> Tensor[(14, 7, 2), bool] {
  %753 = @func_2369() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
  %753.0
}

def @func_1089(%var_1080: Tensor[(14, 7, 2), int64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), uint16], Tensor[(14, 7, 2), float64]) {
  %754 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %755 = @func_1047() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %756 = %755.1;
  %757 = cast(%var_1080, dtype="uint16") /* ty=Tensor[(14, 7, 2), uint16] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="uint16") /* ty=Tensor[(14, 7, 2), uint16] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %761 = %754.0;
  %762 = left_shift(%759, %760) /* ty=Tensor[(14, 7, 2), uint16] */;
  %763 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%761, %762, %763)
}

def @func_5458() -> (Tensor[(14, 7, 2), bool],) {
  %764 = @func_2193() /* ty=Tensor[(14, 7, 2), bool] */;
  (%764,)
}

def @func_6597(%var_6586: float64) -> (Tensor[(14, 7, 2), bool], Tensor[(48), float64], Tensor[(14, 7, 2), bool], float64) {
  %765 = @func_5458() /* ty=(Tensor[(14, 7, 2), bool],) */;
  %766 = @func_1723() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48), float64], Tensor[(14, 7, 2), float64]) */;
  %767 = cast(%var_6586, dtype="float64") /* ty=float64 */;
  %768 = reshape(%767, newshape=[]) /* ty=float64 */;
  %769 = @func_5662(%768) /* ty=(Tensor[(3, 8, 14), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool]) */;
  %770 = %765.0;
  %771 = %766.3;
  %772 = %769.2;
  (%770, %771, %772, %var_6586)
}

def @func_5850() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool]) {
  %773 = @func_4310() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %774 = @func_5632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
  %775 = @func_5632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
  %776 = %773.1;
  %777 = %774.2;
  %778 = %775.1;
  (%776, %777, %778)
}

def @func_6000() -> Tensor[(14, 7, 2), float64] {
  %779 = @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %780 = %779.1;
  %781 = cast(%780, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  asinh(%781) /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_7833() -> (Tensor[(16, 11, 6), float32], Tensor[(14, 7, 2), float64], Tensor[(130, 15), bool], Tensor[(1, 1950), float64]) {
  %782 = @func_4200() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(16, 11, 6), float32], Tensor[(1056), float64], Tensor[(280), float32], Tensor[(16, 3, 13), float32], Tensor[(624), float32], Tensor[(14, 7, 2), bool]) */;
  %783 = @func_3469() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %784 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1950), float64] */, dtype="float64") /* ty=Tensor[(1, 1950), float64] */;
  %785 = reshape(%784, newshape=[130, 15]) /* ty=Tensor[(130, 15), float64] */;
  %786 = @func_6554(%785) /* ty=(Tensor[(130, 15), bool],) */;
  %787 = %782.1;
  %788 = %783.0;
  %789 = %786.0;
  (%787, %788, %789, meta[relay.Constant][30] /* ty=Tensor[(1, 1950), float64] */)
}

def @func_3684() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %790 = @func_2369() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
  %791 = %790.1;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %793 = @func_1195() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %794 = asin(%792) /* ty=Tensor[(14, 7, 2), float64] */;
  %795 = %793.0;
  (%794, %795)
}

def @func_4422() -> (Tensor[(14, 7, 2), int64],) {
  %796 = @func_1195() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %797 = %796.0;
  (%797,)
}

def @func_6093() -> (Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %798 = @func_3460() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %799 = cast(meta[relay.Constant][31] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %800 = reshape(%799, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float32] */;
  %801 = @func_344(%800) /* ty=(Tensor[(2, 14, 10), float32],) */;
  %802 = @func_4422() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %803 = %798.0;
  %804 = %801.0;
  %805 = %802.0;
  %806 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%803, %804, meta[relay.Constant][31] /* ty=Tensor[(280), float32] */, %805, %806)
}

def @func_9553() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %807 = @func_6365() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %808 = %807.0;
  %809 = cast(%808, dtype="int64") /* ty=Tensor[(14, 7, 2), int64] */;
  %810 = reshape(%809, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), int64] */;
  %811 = @func_1089(%810) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), uint16], Tensor[(14, 7, 2), float64]) */;
  %812 = %811.0;
  %813 = @func_927() /* ty=Tensor[(14, 7, 2), float64] */;
  (%808, %812, %813)
}

def @func_59() -> Tensor[(14, 7, 2), float64] {
  %814 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  atanh(%814) /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_5961() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 2, 7), bool], Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) {
  %815 = @func_1309() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %816 = @func_5582() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(13, 11, 6), float64], Tensor[(858), float64]) */;
  %817 = %816.0;
  %818 = cast(%817, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %819 = reshape(%818, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), bool] */;
  %820 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  %821 = cast(%820, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %822 = @func_1520() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %823 = %815.0;
  %824 = @func_5416(%819) /* ty=Tensor[(14, 2, 7), bool] */;
  %825 = log(%821) /* ty=Tensor[(14, 7, 2), float32] */;
  %826 = %822.0;
  (%823, %817, %824, %825, %826)
}

def @func_8673() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(1, 12, 11), float32], Tensor[(160), float32], Tensor[(132), float32]) {
  %827 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %828 = @func_4422() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %829 = cast(meta[relay.Constant][33] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %830 = cast(meta[relay.Constant][34] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %831 = reshape(%829, newshape=[2, 8, 10]) /* ty=Tensor[(2, 8, 10), float32] */;
  %832 = reshape(%830, newshape=[132]) /* ty=Tensor[(132), float32] */;
  %833 = @func_3775(%831, %832) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 8, 10), float32], Tensor[(1, 12, 11), float32], Tensor[(132), float32]) */;
  %834 = %827.0;
  %835 = %828.0;
  %836 = %833.2;
  (%834, %835, %836, meta[relay.Constant][33] /* ty=Tensor[(160), float32] */, meta[relay.Constant][34] /* ty=Tensor[(132), float32] */)
}

def @func_10323() -> Tensor[(1056), float32] {
  %837 = @func_5003() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(1056), float64], Tensor[(14, 7, 2), int64]) */;
  %838 = %837.1;
  %839 = cast(meta[relay.Constant][35] /* ty=Tensor[(1056), float64] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %840 = shape_of(%838, dtype="int32") /* ty=Tensor[(1), int32] */;
  %841 = cast(%838, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?), float32] */;
  mod(%841, %842) /* ty=Tensor[(1056), float32] */
}

def @func_1129() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(2, 14, 10), float32], Tensor[(280), float32]) {
  %843 = @func_802() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %844 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %845 = cast(meta[relay.Constant][36] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %846 = reshape(%845, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float32] */;
  %847 = @func_344(%846) /* ty=(Tensor[(2, 14, 10), float32],) */;
  %848 = %843.0;
  %849 = %844.0;
  %850 = %847.0;
  (%848, %849, %850, meta[relay.Constant][36] /* ty=Tensor[(280), float32] */)
}

def @func_2369() -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) {
  %851 = @func_2193() /* ty=Tensor[(14, 7, 2), bool] */;
  %852 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%851, %852)
}

def @func_1922(%var_1916: Tensor[(180), float64]) -> (Tensor[(280), float32], Tensor[(3, 12, 5), float64], Tensor[(180), float64]) {
  %853 = @func_1129() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(2, 14, 10), float32], Tensor[(280), float32]) */;
  %854 = cast(%var_1916, dtype="float64") /* ty=Tensor[(180), float64] */;
  %855 = reshape(%854, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), float64] */;
  %856 = @func_1776(%855) /* ty=(Tensor[(3, 12, 5), float64],) */;
  %857 = %853.3;
  %858 = %856.0;
  (%857, %858, %var_1916)
}

def @func_1940(%var_1928: float32, %var_1929: Tensor[(11, 6, 5), float32]) -> (Tensor[(11, 6, 5), float32], Tensor[(14, 7, 2), int64]) {
  %859 = cast(%var_1928, dtype="float32") /* ty=float32 */;
  %860 = cast(%var_1929, dtype="float32") /* ty=Tensor[(11, 6, 5), float32] */;
  %861 = @func_1195() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %862 = divide(%859, %860) /* ty=Tensor[(11, 6, 5), float32] */;
  %863 = %861.0;
  (%862, %863)
}

def @func_1501(%var_1492: Tensor[(1950), float32]) -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) {
  %864 = @func_588() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
  %865 = @func_1422() /* ty=Tensor[(14, 7, 2), bool] */;
  %866 = cast(%865, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %867 = cast(%var_1492, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %868 = reshape(%867, newshape=[15, 13, 10]) /* ty=Tensor[(15, 13, 10), float32] */;
  %869 = @func_1168(%868) /* ty=(Tensor[(15, 13, 10), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %870 = %864.0;
  %871 = log2(%866) /* ty=Tensor[(14, 7, 2), float64] */;
  %872 = %869.1;
  (%870, %871, %872, %var_1492)
}

def @func_4532(%var_4503: Tensor[(1, 48), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(?, 48), bool], Tensor[(14, 7, 2), float64], Tensor[(1950), float32]) {
  %873 = cast(%var_4503, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
  %874 = reshape(%873, newshape=[2, 8, 3]) /* ty=Tensor[(2, 8, 3), float64] */;
  %875 = @func_186(%874) /* ty=Tensor[(2, 8, 3), float64] */;
  %876 = cast(%875, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %877 = shape_of(%var_4503, dtype="int32") /* ty=Tensor[(2), int32] */;
  %878 = cast(%var_4503, dtype="bool") /* ty=Tensor[(1, 48), bool] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %880 = cast(meta[relay.Constant][37] /* ty=Tensor[(1950), float32] */, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %881 = reshape(%880, newshape=[130, 15]) /* ty=Tensor[(130, 15), float32] */;
  %882 = @func_1974(%881) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32]) */;
  %883 = @func_1428() /* ty=Tensor[(14, 7, 2), int64] */;
  %884 = logical_or(%878, %879) /* ty=Tensor[(?, 48), bool] */;
  %885 = %882.1;
  (%883, %884, %885, meta[relay.Constant][37] /* ty=Tensor[(1950), float32] */)
}

def @func_3377() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %886 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %887 = %886.0;
  %888 = @func_1865() /* ty=Tensor[(14, 7, 2), float64] */;
  (%887, %888)
}

def @func_4133() -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %889 = @func_2193() /* ty=Tensor[(14, 7, 2), bool] */;
  %890 = @func_1428() /* ty=Tensor[(14, 7, 2), int64] */;
  %891 = @func_3211() /* ty=Tensor[(14, 7, 2), float64] */;
  (%889, %890, %891)
}

def @func_821(%var_816: Tensor[(2, 10, 12), float32]) -> Tensor[(2, 10, 12), float32] {
  %892 = cast(%var_816, dtype="float32") /* ty=Tensor[(2, 10, 12), float32] */;
  erf(%892) /* ty=Tensor[(2, 10, 12), float32] */
}

def @func_9356() -> (Tensor[(14, 7, 2), int64], Tensor[(2, 4, 16), float32]) {
  %893 = @func_7138() /* ty=(Tensor[(5, 3, 3), uint64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) */;
  %894 = @func_6358() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %895 = %893.1;
  %896 = %894.0;
  (%895, %896)
}

def @func_3245(%var_3233: Tensor[(14, 7, 2), float64]) -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) {
  %897 = @func_2526() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32], Tensor[(14, 7, 2), float64]) */;
  %898 = %897.3;
  %899 = cast(%var_3233, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %900 = shape_of(%898, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(%898, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %903 = not_equal(%901, %902) /* ty=Tensor[(14, 7, 2), bool] */;
  %904 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%903, %904)
}

def @func_8044() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) {
  %905 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %906 = @func_6430() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %907 = @func_5458() /* ty=(Tensor[(14, 7, 2), bool],) */;
  %908 = %905.0;
  %909 = %906.0;
  %910 = %907.0;
  (%908, %909, %910)
}

def @func_2957() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) {
  %911 = @func_2632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %912 = @func_802() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %913 = @func_2721() /* ty=(Tensor[(3, 12, 5), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float32]) */;
  %914 = %911.0;
  %915 = %912.0;
  %916 = %913.2;
  (%914, %915, %916)
}

def @func_2999(%var_2977: float64, %var_2978: Tensor[(9, 14, 4), float64]) -> (Tensor[(9, 14, 4), float64], Tensor[(14, 7, 2), float64]) {
  %917 = cast(%var_2977, dtype="float64") /* ty=float64 */;
  %918 = cast(%var_2978, dtype="float64") /* ty=Tensor[(9, 14, 4), float64] */;
  %919 = @func_1309() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %920 = power(%917, %918) /* ty=Tensor[(9, 14, 4), float64] */;
  %921 = %919.0;
  (%920, %921)
}

def @func_3469() -> (Tensor[(14, 7, 2), float64],) {
  %922 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%922,)
}

def @func_8594() -> (Tensor[(14, 7, 2), float64],) {
  %923 = @func_8065() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %924 = %923.0;
  (%924,)
}

def @func_7721(%var_7717: Tensor[(48), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(48), float64]) {
  %925 = @func_5977() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %926 = cast(%var_7717, dtype="float64") /* ty=Tensor[(48), float64] */;
  %927 = reshape(%926, newshape=[1, 48]) /* ty=Tensor[(1, 48), float64] */;
  %928 = @func_4532(%927) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 48), bool], Tensor[(14, 7, 2), float64], Tensor[(1950), float32]) */;
  %929 = %925.0;
  %930 = %928.0;
  (%929, %930, %var_7717)
}

def @func_7655(%var_7635: Tensor[(5, 9, 5), int8], %var_7636: Tensor[(5, 9, 5), int8], %var_7640: Tensor[(5, 9, 5), int8]) -> (Tensor[(5, 9, 5), int8], Tensor[(5, 9, 5), bool], Tensor[(14, 7, 2), float64]) {
  %931 = cast(%var_7636, dtype="int8") /* ty=Tensor[(5, 9, 5), int8] */;
  %932 = shape_of(%var_7635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%var_7635, dtype="int8") /* ty=Tensor[(5, 9, 5), int8] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %935 = cast(%var_7640, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
  %936 = shape_of(%var_7635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %937 = cast(%var_7635, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
  %938 = dyn.reshape(%935, %936, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %939 = @func_2338() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %940 = left_shift(%933, %934) /* ty=Tensor[(5, 9, 5), int8] */;
  %941 = greater_equal(%937, %938) /* ty=Tensor[(5, 9, 5), bool] */;
  %942 = %939.0;
  (%940, %941, %942)
}

def @func_5977() -> (Tensor[(14, 7, 2), int64],) {
  %943 = @func_5752() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */;
  %944 = %943.0;
  (%944,)
}

def @func_10037(%var_10026: Tensor[(1950), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(7, 4, 6), bool], Tensor[(1, 168), int16], Tensor[(1, 160), float32], Tensor[(132), int16], Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(270, 25), uint8]) {
  %945 = @func_1309() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %946 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 168), int16] */, dtype="int16") /* ty=Tensor[(1, 168), int16] */;
  %947 = reshape(%946, newshape=[7, 4, 6]) /* ty=Tensor[(7, 4, 6), int16] */;
  %948 = @func_4842(%947) /* ty=(Tensor[(7, 4, 6), bool], Tensor[(7, 4, 6), float64], Tensor[(14, 7, 2), int64]) */;
  %949 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 160), float32] */, dtype="float32") /* ty=Tensor[(1, 160), float32] */;
  %950 = cast(meta[relay.Constant][40] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %951 = reshape(%949, newshape=[2, 8, 10]) /* ty=Tensor[(2, 8, 10), float32] */;
  %952 = reshape(%950, newshape=[132]) /* ty=Tensor[(132), float32] */;
  %953 = @func_3775(%951, %952) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 8, 10), float32], Tensor[(1, 12, 11), float32], Tensor[(132), float32]) */;
  %954 = %953.2;
  %955 = cast(%954, dtype="int16") /* ty=Tensor[(1, 12, 11), int16] */;
  %956 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(132), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %957 = cast(meta[relay.Constant][40] /* ty=Tensor[(132), float32] */, dtype="int16") /* ty=Tensor[(132), int16] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?), int16] */;
  %959 = @func_5003() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(1056), float64], Tensor[(14, 7, 2), int64]) */;
  %960 = cast(meta[relay.Constant][41] /* ty=Tensor[(25), float64] */, dtype="float64") /* ty=Tensor[(25), float64] */;
  %961 = cast(%var_10026, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %962 = reshape(%960, newshape=[5, 1, 5]) /* ty=Tensor[(5, 1, 5), float64] */;
  %963 = reshape(%961, newshape=[1950]) /* ty=Tensor[(1950), float32] */;
  %964 = @func_5343(%962, %963) /* ty=(Tensor[(5, 1, 5), float64], Tensor[(14, 7, 2), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(6, 3, 15), float64], Tensor[(5, 270, 5), int16], Tensor[(270, 1), float64]) */;
  %965 = %964.7;
  %966 = cast(meta[relay.Constant][41] /* ty=Tensor[(25), float64] */, dtype="uint8") /* ty=Tensor[(25), uint8] */;
  %967 = cast(%965, dtype="uint8") /* ty=Tensor[(270, 1), uint8] */;
  %968 = %945.1;
  %969 = %948.0;
  %970 = right_shift(%957, %958) /* ty=Tensor[(132), int16] */;
  %971 = %959.0;
  %972 = bitwise_or(%966, %967) /* ty=Tensor[(270, 25), uint8] */;
  (%968, %969, meta[relay.Constant][38] /* ty=Tensor[(1, 168), int16] */, meta[relay.Constant][39] /* ty=Tensor[(1, 160), float32] */, %970, %971, %var_10026, %972)
}

def @func_2858(%var_2828: Tensor[(1, 280), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64]) {
  %973 = @func_978() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %974 = cast(%var_2828, dtype="float32") /* ty=Tensor[(1, 280), float32] */;
  %975 = reshape(%974, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float32] */;
  %976 = @func_344(%975) /* ty=(Tensor[(2, 14, 10), float32],) */;
  %977 = %976.0;
  %978 = cast(%977, dtype="float32") /* ty=Tensor[(2, 14, 10), float32] */;
  %979 = tan(%978) /* ty=Tensor[(2, 14, 10), float32] */;
  %980 = cast(%979, dtype="int64") /* ty=Tensor[(2, 14, 10), int64] */;
  %981 = shape_of(%var_2828, dtype="int32") /* ty=Tensor[(2), int32] */;
  %982 = cast(%var_2828, dtype="int64") /* ty=Tensor[(1, 280), int64] */;
  %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %984 = %973.0;
  %985 = left_shift(%982, %983) /* ty=Tensor[(?, 280), int64] */;
  (%984, %985)
}

def @func_10255() -> (Tensor[(14, 7, 2), float64],) {
  %986 = @func_8719() /* ty=Tensor[(14, 7, 2), float64] */;
  (%986,)
}

def @func_8475() -> (Tensor[(14, 7, 2), float64],) {
  %987 = @func_3904() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %988 = %987.0;
  (%988,)
}

def @func_4567() -> (Tensor[(14, 7, 2), int64], Tensor[(3, 12, 5), float64], Tensor[(180), float64]) {
  %989 = @func_2338() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %990 = cast(meta[relay.Constant][42] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %991 = reshape(%990, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), float64] */;
  %992 = @func_1776(%991) /* ty=(Tensor[(3, 12, 5), float64],) */;
  %993 = %989.2;
  %994 = %992.0;
  (%993, %994, meta[relay.Constant][42] /* ty=Tensor[(180), float64] */)
}

def @func_5343(%var_5287: Tensor[(5, 1, 5), float64], %var_5319: Tensor[(1950), float32]) -> (Tensor[(5, 1, 5), float64], Tensor[(14, 7, 2), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(6, 3, 15), float64], Tensor[(5, 270, 5), int16], Tensor[(270, 1), float64]) {
  %995 = cast(%var_5287, dtype="float64") /* ty=Tensor[(5, 1, 5), float64] */;
  %996 = @func_1520() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %997 = @func_2721() /* ty=(Tensor[(3, 12, 5), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float32]) */;
  %998 = cast(%var_5319, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %999 = reshape(%998, newshape=[130, 15]) /* ty=Tensor[(130, 15), float32] */;
  %1000 = @func_1974(%999) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32]) */;
  %1001 = cast(meta[relay.Constant][43] /* ty=Tensor[(270, 1), float64] */, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %1002 = reshape(%1001, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), float64] */;
  %1003 = @func_3278(%1002) /* ty=(Tensor[(6, 3, 15), float64],) */;
  %1004 = cast(meta[relay.Constant][43] /* ty=Tensor[(270, 1), float64] */, dtype="int16") /* ty=Tensor[(270, 1), int16] */;
  %1005 = cast(%var_5287, dtype="int16") /* ty=Tensor[(5, 1, 5), int16] */;
  %1006 = cast(meta[relay.Constant][43] /* ty=Tensor[(270, 1), float64] */, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %1007 = sinh(%995) /* ty=Tensor[(5, 1, 5), float64] */;
  %1008 = %996.0;
  %1009 = %997.1;
  %1010 = %1000.0;
  %1011 = %1003.0;
  %1012 = bitwise_xor(%1004, %1005) /* ty=Tensor[(5, 270, 5), int16] */;
  %1013 = atan(%1006) /* ty=Tensor[(270, 1), float64] */;
  (%1007, %1008, %1009, %1010, %var_5319, %1011, %1012, %1013)
}

def @func_271() -> (Tensor[(14, 7, 2), float64],) {
  %1014 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%1014,)
}

def @func_9780() -> Tensor[(14, 7, 2), bool] {
  %1015 = @func_8044() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) */;
  %1015.2
}

def @func_2609() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) {
  %1016 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %1017 = @func_2135() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %1018 = cast(meta[relay.Constant][44] /* ty=Tensor[(1950), float32] */, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %1019 = reshape(%1018, newshape=[15, 13, 10]) /* ty=Tensor[(15, 13, 10), float32] */;
  %1020 = @func_1168(%1019) /* ty=(Tensor[(15, 13, 10), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %1021 = %1016.0;
  %1022 = %1017.0;
  %1023 = %1020.1;
  (%1021, %1022, %1023, meta[relay.Constant][44] /* ty=Tensor[(1950), float32] */)
}

def @func_7320() -> Tensor[(14, 7, 2), float32] {
  %1024 = @func_2721() /* ty=(Tensor[(3, 12, 5), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float32]) */;
  %1024.2
}

def @func_285() -> (Tensor[(14, 7, 2), int64],) {
  %1025 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %1026 = %1025.0;
  (%1026,)
}

def @func_4200() -> (Tensor[(14, 7, 2), float64], Tensor[(16, 11, 6), float32], Tensor[(1056), float64], Tensor[(280), float32], Tensor[(16, 3, 13), float32], Tensor[(624), float32], Tensor[(14, 7, 2), bool]) {
  %1027 = @func_2957() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) */;
  %1028 = cast(meta[relay.Constant][45] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %1029 = cast(meta[relay.Constant][46] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %1030 = reshape(%1028, newshape=[16, 11, 6]) /* ty=Tensor[(16, 11, 6), float64] */;
  %1031 = reshape(%1029, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %1032 = @func_2466(%1030, %1031) /* ty=(Tensor[(16, 11, 6), int32], Tensor[(16, 11, 6), float32], Tensor[(14, 7, 2), int64], Tensor[(280), float32]) */;
  %1033 = cast(meta[relay.Constant][47] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %1034 = reshape(%1033, newshape=[16, 3, 13]) /* ty=Tensor[(16, 3, 13), float32] */;
  %1035 = @func_2775(%1034) /* ty=(Tensor[(16, 3, 13), float32], Tensor[(16, 3, 13), float32]) */;
  %1036 = %1027.0;
  %1037 = %1032.1;
  %1038 = %1035.0;
  %1039 = @func_872() /* ty=Tensor[(14, 7, 2), bool] */;
  (%1036, %1037, meta[relay.Constant][45] /* ty=Tensor[(1056), float64] */, meta[relay.Constant][46] /* ty=Tensor[(280), float32] */, %1038, meta[relay.Constant][47] /* ty=Tensor[(624), float32] */, %1039)
}

def @func_8719() -> Tensor[(14, 7, 2), float64] {
  %1040 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %1040.0
}

def @func_7171(%var_7148: Tensor[(16, 9, 7), float64], %var_7152: Tensor[(16, 9, 7), float64]) -> (Tensor[(16, 9, 7), float64], Tensor[(16, 9, 7), int16], Tensor[(14, 7, 2), float64], Tensor[(1950), float32]) {
  %1041 = cast(%var_7148, dtype="float64") /* ty=Tensor[(16, 9, 7), float64] */;
  %1042 = cast(%var_7152, dtype="int16") /* ty=Tensor[(16, 9, 7), int16] */;
  %1043 = shape_of(%var_7148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1044 = cast(%var_7148, dtype="int16") /* ty=Tensor[(16, 9, 7), int16] */;
  %1045 = dyn.reshape(%1042, %1043, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1046 = cast(meta[relay.Constant][48] /* ty=Tensor[(1950), float32] */, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %1047 = reshape(%1046, newshape=[1950]) /* ty=Tensor[(1950), float32] */;
  %1048 = @func_1501(%1047) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) */;
  %1049 = cos(%1041) /* ty=Tensor[(16, 9, 7), float64] */;
  %1050 = left_shift(%1044, %1045) /* ty=Tensor[(16, 9, 7), int16] */;
  %1051 = %1048.1;
  (%1049, %1050, %1051, meta[relay.Constant][48] /* ty=Tensor[(1950), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3471() -> (Tensor[(14, 7, 2), float64],) {
  @func_3469() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_2957() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) {
  %0 = @func_2632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %1 = @func_802() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %2 = @func_2721() /* ty=(Tensor[(3, 12, 5), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float32]) */;
  %3 = %0.0;
  %4 = %1.0;
  %5 = %2.2;
  (%3, %4, %5)
}

def @func_4844(%var_4843: Tensor[(7, 4, 6), int16]) -> (Tensor[(7, 4, 6), bool], Tensor[(7, 4, 6), float64], Tensor[(14, 7, 2), int64]) {
  %15 = fn (%var_4828: Tensor[(7, 4, 6), int16]) -> (Tensor[(7, 4, 6), bool], Tensor[(7, 4, 6), float64], Tensor[(14, 7, 2), int64]) {
    %6 = cast(%var_4828, dtype="bool") /* ty=Tensor[(7, 4, 6), bool] */;
    %7 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 4, 6), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 4, 6), int16] */, dtype="bool") /* ty=Tensor[(7, 4, 6), bool] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %10 = cast(%var_4828, dtype="float64") /* ty=Tensor[(7, 4, 6), float64] */;
    %11 = @func_4310() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
    %12 = less(%8, %9) /* ty=Tensor[(7, 4, 6), bool] */;
    %13 = acosh(%10) /* ty=Tensor[(7, 4, 6), float64] */;
    %14 = %11.1;
    (%12, %13, %14)
  };
  %15(%var_4843) /* ty=(Tensor[(7, 4, 6), bool], Tensor[(7, 4, 6), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_9357() -> (Tensor[(14, 7, 2), int64], Tensor[(2, 4, 16), float32]) {
  %20 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(2, 4, 16), float32]) {
    %16 = @func_7138() /* ty=(Tensor[(5, 3, 3), uint64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) */;
    %17 = @func_6358() /* ty=(Tensor[(2, 4, 16), float32],) */;
    %18 = %16.1;
    %19 = %17.0;
    (%18, %19)
  };
  %20() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 4, 16), float32]) */
}

def @func_272() -> (Tensor[(14, 7, 2), float64],) {
  %22 = fn () -> (Tensor[(14, 7, 2), float64],) {
    %21 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
    (%21,)
  };
  %22() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_5662(%var_5637: float64) -> (Tensor[(3, 8, 14), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool]) {
  %23 = cast(%var_5637, dtype="float64") /* ty=float64 */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 8, 14), float64] */, dtype="float64") /* ty=Tensor[(3, 8, 14), float64] */;
  %25 = @func_1367() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %26 = @func_5582() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(13, 11, 6), float64], Tensor[(858), float64]) */;
  %27 = floor_divide(%23, %24) /* ty=Tensor[(3, 8, 14), float64] */;
  %28 = %25.0;
  %29 = %26.0;
  (%27, %28, %29)
}

def @func_4369() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  @func_4367() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_3905() -> (Tensor[(14, 7, 2), float64],) {
  %32 = fn () -> (Tensor[(14, 7, 2), float64],) {
    %30 = @func_2338() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
    %31 = %30.0;
    (%31,)
  };
  %32() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_2757(%var_2756: Tensor[(1, 12, 11), float32]) -> Tensor[(1, 12, 11), float32] {
  %34 = fn (%var_2750: Tensor[(1, 12, 11), float32]) -> Tensor[(1, 12, 11), float32] {
    %33 = cast(%var_2750, dtype="float32") /* ty=Tensor[(1, 12, 11), float32] */;
    log10(%33) /* ty=Tensor[(1, 12, 11), float32] */
  };
  %34(%var_2756) /* ty=Tensor[(1, 12, 11), float32] */
}

def @func_368(%var_367: Tensor[(1, 280), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(1, 280), float32]) {
  %41 = fn (%var_364: Tensor[(1, 280), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(1, 280), float32]) {
    %35 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %36 = cast(%var_364, dtype="float32") /* ty=Tensor[(1, 280), float32] */;
    %37 = reshape(%36, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float32] */;
    %38 = @func_344(%37) /* ty=(Tensor[(2, 14, 10), float32],) */;
    %39 = %35.0;
    %40 = %38.0;
    (%39, %40, %var_364)
  };
  %41(%var_367) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(1, 280), float32]) */
}

def @func_2137() -> (Tensor[(14, 7, 2), int64],) {
  @func_2135() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_6431() -> (Tensor[(14, 7, 2), int64],) {
  %44 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %42 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %43 = %42.0;
    (%43,)
  };
  %44() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_8525(%var_8522: Tensor[(3, 8, 8), float32]) -> Tensor[(3, 8, 8), float32] {
  %45 = cast(%var_8522, dtype="float32") /* ty=Tensor[(3, 8, 8), float32] */;
  cosh(%45) /* ty=Tensor[(3, 8, 8), float32] */
}

def @func_8528(%var_8526: Tensor[(3, 8, 8), float32]) -> Tensor[(3, 8, 8), float32] {
  @func_8525(%var_8526) /* ty=Tensor[(3, 8, 8), float32] */
}

def @func_8984() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(2, 8, 3), float32], Tensor[(2, 8, 3), float32]) {
  %56 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(2, 8, 3), float32], Tensor[(2, 8, 3), float32]) {
    %46 = @func_978() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %47 = @func_5582() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(13, 11, 6), float64], Tensor[(858), float64]) */;
    %48 = @func_8377() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 8, 3), float64], Tensor[(48), float64]) */;
    %49 = %48.1;
    %50 = cast(%49, dtype="float32") /* ty=Tensor[(2, 8, 3), float32] */;
    %51 = cast(%49, dtype="float32") /* ty=Tensor[(2, 8, 3), float32] */;
    %52 = %46.0;
    %53 = %47.0;
    %54 = sinh(%50) /* ty=Tensor[(2, 8, 3), float32] */;
    %55 = cosh(%51) /* ty=Tensor[(2, 8, 3), float32] */;
    (%52, %53, %54, %55)
  };
  %56() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(2, 8, 3), float32], Tensor[(2, 8, 3), float32]) */
}

def @func_3875(%var_3873: Tensor[(14, 7, 2), int64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), uint8], Tensor[(585), bool], Tensor[(585), float32], Tensor[(14, 7, 2), bool], Tensor[(280), float32]) {
  @func_3872(%var_3873) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), uint8], Tensor[(585), bool], Tensor[(585), float32], Tensor[(14, 7, 2), bool], Tensor[(280), float32]) */
}

def @func_1367() -> (Tensor[(14, 7, 2), float64],) {
  %57 = @func_1309() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %58 = %57.0;
  (%58,)
}

def @func_3245(%var_3233: Tensor[(14, 7, 2), float64]) -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) {
  %59 = @func_2526() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32], Tensor[(14, 7, 2), float64]) */;
  %60 = %59.3;
  %61 = cast(%var_3233, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %65 = not_equal(%63, %64) /* ty=Tensor[(14, 7, 2), bool] */;
  %66 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%65, %66)
}

def @func_4621(%var_4600: float32, %var_4601: Tensor[(1, 3, 11), float32], %var_4608: Tensor[(13, 3, 11), float32], %var_4615: Tensor[(5, 56), float32]) -> (Tensor[(1, 3, 11), bool], Tensor[(13, 3, 11), uint64], Tensor[(14, 7, 2), int64], Tensor[(5, 56), float32]) {
  %67 = cast(%var_4600, dtype="bool") /* ty=bool */;
  %68 = cast(%var_4601, dtype="bool") /* ty=Tensor[(1, 3, 11), bool] */;
  %69 = cast(%var_4601, dtype="uint64") /* ty=Tensor[(1, 3, 11), uint64] */;
  %70 = cast(%var_4608, dtype="uint64") /* ty=Tensor[(13, 3, 11), uint64] */;
  %71 = cast(%var_4615, dtype="float32") /* ty=Tensor[(5, 56), float32] */;
  %72 = reshape(%71, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %73 = @func_3548(%72) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64], Tensor[(280), float32]) */;
  %74 = greater_equal(%67, %68) /* ty=Tensor[(1, 3, 11), bool] */;
  %75 = multiply(%69, %70) /* ty=Tensor[(13, 3, 11), uint64] */;
  %76 = %73.0;
  (%74, %75, %76, %var_4615)
}

def @func_6719() -> Tensor[(14, 7, 2), uint16] {
  @func_6717() /* ty=Tensor[(14, 7, 2), uint16] */
}

def @func_898(%var_885: Tensor[(14, 7, 2), float64]) -> (Tensor[(14, 7, 2), bool], Tensor[(2, 10, 12), float32], Tensor[(2, 120), float32]) {
  %77 = @func_588() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
  %78 = %77.1;
  %79 = cast(%var_885, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %83 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 120), float32] */, dtype="float32") /* ty=Tensor[(2, 120), float32] */;
  %84 = reshape(%83, newshape=[2, 10, 12]) /* ty=Tensor[(2, 10, 12), float32] */;
  %85 = greater_equal(%81, %82) /* ty=Tensor[(14, 7, 2), bool] */;
  %86 = @func_821(%84) /* ty=Tensor[(2, 10, 12), float32] */;
  (%85, %86, meta[relay.Constant][2] /* ty=Tensor[(2, 120), float32] */)
}

def @func_347(%var_345: Tensor[(2, 14, 10), float32]) -> (Tensor[(2, 14, 10), float32],) {
  @func_344(%var_345) /* ty=(Tensor[(2, 14, 10), float32],) */
}

def @func_5045() -> (Tensor[(14, 7, 2), int64],) {
  %87 = @func_4367() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %88 = %87.2;
  (%88,)
}

def @func_188(%var_187: Tensor[(2, 8, 3), float64]) -> Tensor[(2, 8, 3), float64] {
  %90 = fn (%var_183: Tensor[(2, 8, 3), float64]) -> Tensor[(2, 8, 3), float64] {
    %89 = cast(%var_183, dtype="float64") /* ty=Tensor[(2, 8, 3), float64] */;
    sigmoid(%89) /* ty=Tensor[(2, 8, 3), float64] */
  };
  %90(%var_187) /* ty=Tensor[(2, 8, 3), float64] */
}

def @func_6525() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %94 = fn () -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
    %91 = @func_4084() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(12, 14, 5), float32], Tensor[(840), float32], Tensor[(14, 7, 2), float64]) */;
    %92 = %91.3;
    %93 = @func_2151() /* ty=Tensor[(14, 7, 2), int64] */;
    (%92, %93)
  };
  %94() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_639() -> (Tensor[(14, 7, 2), int64],) {
  %95 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %96 = %95.0;
  (%96,)
}

def @func_4288(%var_4242: Tensor[(624), float32], %var_4244: Tensor[(624), float32], %var_4281: float64) -> (Tensor[(14, 7, 2), float64], Tensor[(16, 3, 13), float32], Tensor[(624), int8], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], float64, Tensor[(504), float64]) {
  %97 = @func_2632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %98 = cast(%var_4242, dtype="float32") /* ty=Tensor[(624), float32] */;
  %99 = reshape(%98, newshape=[16, 3, 13]) /* ty=Tensor[(16, 3, 13), float32] */;
  %100 = @func_2775(%99) /* ty=(Tensor[(16, 3, 13), float32], Tensor[(16, 3, 13), float32]) */;
  %101 = cast(%var_4244, dtype="int8") /* ty=Tensor[(624), int8] */;
  %102 = shape_of(%var_4242, dtype="int32") /* ty=Tensor[(1), int32] */;
  %103 = cast(%var_4242, dtype="int8") /* ty=Tensor[(624), int8] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?), int8] */;
  %105 = cast(%var_4281, dtype="float64") /* ty=float64 */;
  %106 = cast(meta[relay.Constant][3] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %107 = reshape(%105, newshape=[]) /* ty=float64 */;
  %108 = reshape(%106, newshape=[9, 14, 4]) /* ty=Tensor[(9, 14, 4), float64] */;
  %109 = @func_2999(%107, %108) /* ty=(Tensor[(9, 14, 4), float64], Tensor[(14, 7, 2), float64]) */;
  %110 = %97.0;
  %111 = %100.0;
  %112 = logical_xor(%103, %104) /* ty=Tensor[(624), int8] */;
  %113 = @func_1428() /* ty=Tensor[(14, 7, 2), int64] */;
  %114 = %109.1;
  (%110, %111, %112, %113, %114, %var_4281, meta[relay.Constant][3] /* ty=Tensor[(504), float64] */)
}

def @func_7632() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(280), float32]) {
  @func_7630() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(280), float32]) */
}

def @func_754(%var_753: Tensor[(13, 11, 6), float64]) -> (Tensor[(13, 11, 6), float64], Tensor[(14, 7, 2), int64]) {
  %122 = fn (%var_737: Tensor[(13, 11, 6), float64]) -> (Tensor[(13, 11, 6), float64], Tensor[(14, 7, 2), int64]) {
    %115 = cast(%var_737, dtype="float64") /* ty=Tensor[(13, 11, 6), float64] */;
    %116 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(13, 11, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %117 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 11, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 11, 6), float64] */;
    %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %119 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %120 = floor_mod(%117, %118) /* ty=Tensor[(13, 11, 6), float64] */;
    %121 = %119.0;
    (%120, %121)
  };
  %122(%var_753) /* ty=(Tensor[(13, 11, 6), float64], Tensor[(14, 7, 2), int64]) */
}

def @main() -> (Tensor[(5, 3, 3), bool], Tensor[(5, 3, 3), float32]) {
  %123 = @func_7140() /* ty=(Tensor[(5, 3, 3), uint64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) */;
  %124 = %123.0;
  %125 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 3, 3), uint64] */, dtype="bool") /* ty=Tensor[(5, 3, 3), bool] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%124, dtype="bool") /* ty=Tensor[(5, 3, 3), bool] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %129 = cast(%124, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
  %130 = logical_and(%127, %128) /* ty=Tensor[(5, 3, 3), bool] */;
  %131 = erf(%129) /* ty=Tensor[(5, 3, 3), float32] */;
  (%130, %131)
}

def @func_2152() -> Tensor[(14, 7, 2), int64] {
  %133 = fn () -> Tensor[(14, 7, 2), int64] {
    %132 = @func_1814() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) */;
    %132.0
  };
  %133() /* ty=Tensor[(14, 7, 2), int64] */
}

def @func_6600(%var_6598: float64) -> (Tensor[(14, 7, 2), bool], Tensor[(48), float64], Tensor[(14, 7, 2), bool], float64) {
  @func_6597(%var_6598) /* ty=(Tensor[(14, 7, 2), bool], Tensor[(48), float64], Tensor[(14, 7, 2), bool], float64) */
}

def @func_8596() -> (Tensor[(14, 7, 2), float64],) {
  @func_8594() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_5460() -> (Tensor[(14, 7, 2), bool],) {
  @func_5458() /* ty=(Tensor[(14, 7, 2), bool],) */
}

def @func_3347(%var_3345: Tensor[(12, 14, 5), float32]) -> (Tensor[(12, 14, 5), float32], Tensor[(14, 7, 2), float64]) {
  @func_3344(%var_3345) /* ty=(Tensor[(12, 14, 5), float32], Tensor[(14, 7, 2), float64]) */
}

def @func_4200() -> (Tensor[(14, 7, 2), float64], Tensor[(16, 11, 6), float32], Tensor[(1056), float64], Tensor[(280), float32], Tensor[(16, 3, 13), float32], Tensor[(624), float32], Tensor[(14, 7, 2), bool]) {
  %134 = @func_2957() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) */;
  %135 = cast(meta[relay.Constant][6] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %137 = reshape(%135, newshape=[16, 11, 6]) /* ty=Tensor[(16, 11, 6), float64] */;
  %138 = reshape(%136, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %139 = @func_2466(%137, %138) /* ty=(Tensor[(16, 11, 6), int32], Tensor[(16, 11, 6), float32], Tensor[(14, 7, 2), int64], Tensor[(280), float32]) */;
  %140 = cast(meta[relay.Constant][8] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %141 = reshape(%140, newshape=[16, 3, 13]) /* ty=Tensor[(16, 3, 13), float32] */;
  %142 = @func_2775(%141) /* ty=(Tensor[(16, 3, 13), float32], Tensor[(16, 3, 13), float32]) */;
  %143 = %134.0;
  %144 = %139.1;
  %145 = %142.0;
  %146 = @func_872() /* ty=Tensor[(14, 7, 2), bool] */;
  (%143, %144, meta[relay.Constant][6] /* ty=Tensor[(1056), float64] */, meta[relay.Constant][7] /* ty=Tensor[(280), float32] */, %145, meta[relay.Constant][8] /* ty=Tensor[(624), float32] */, %146)
}

def @func_6597(%var_6586: float64) -> (Tensor[(14, 7, 2), bool], Tensor[(48), float64], Tensor[(14, 7, 2), bool], float64) {
  %147 = @func_5458() /* ty=(Tensor[(14, 7, 2), bool],) */;
  %148 = @func_1723() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48), float64], Tensor[(14, 7, 2), float64]) */;
  %149 = cast(%var_6586, dtype="float64") /* ty=float64 */;
  %150 = reshape(%149, newshape=[]) /* ty=float64 */;
  %151 = @func_5662(%150) /* ty=(Tensor[(3, 8, 14), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool]) */;
  %152 = %147.0;
  %153 = %148.3;
  %154 = %151.2;
  (%152, %153, %154, %var_6586)
}

def @func_4657() -> (Tensor[(14, 7, 2), bool],) {
  %155 = @func_2193() /* ty=Tensor[(14, 7, 2), bool] */;
  (%155,)
}

def @func_979() -> (Tensor[(14, 7, 2), int64],) {
  %158 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %156 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %157 = %156.0;
    (%157,)
  };
  %158() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_2194() -> Tensor[(14, 7, 2), bool] {
  %159 = fn () -> Tensor[(14, 7, 2), bool] {
    @func_1422() /* ty=Tensor[(14, 7, 2), bool] */
  };
  %159() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_5850() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool]) {
  %160 = @func_4310() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %161 = @func_5632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
  %162 = @func_5632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
  %163 = %160.1;
  %164 = %161.2;
  %165 = %162.1;
  (%163, %164, %165)
}

def @func_2685() -> Tensor[(14, 7, 2), int64] {
  @func_2683() /* ty=Tensor[(14, 7, 2), int64] */
}

def @func_5264(%var_5262: Tensor[(10, 4), uint64]) -> (Tensor[(14, 7, 2), int64], Tensor[(5, 4, 2), uint64], uint64, Tensor[(10, 4), uint64], Tensor[(14, 7, 2), int64], Tensor[(6, 3, 15), float64], Tensor[(1, 270), float64]) {
  @func_5261(%var_5262) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(5, 4, 2), uint64], uint64, Tensor[(10, 4), uint64], Tensor[(14, 7, 2), int64], Tensor[(6, 3, 15), float64], Tensor[(1, 270), float64]) */
}

def @func_6000() -> Tensor[(14, 7, 2), float64] {
  %166 = @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %167 = %166.1;
  %168 = cast(%167, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  asinh(%168) /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_2527() -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32], Tensor[(14, 7, 2), float64]) {
  %176 = fn () -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32], Tensor[(14, 7, 2), float64]) {
    %169 = cast(meta[relay.Constant][9] /* ty=Tensor[(130, 15), float32] */, dtype="float32") /* ty=Tensor[(130, 15), float32] */;
    %170 = reshape(%169, newshape=[130, 15]) /* ty=Tensor[(130, 15), float32] */;
    %171 = @func_1974(%170) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32]) */;
    %172 = @func_588() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
    %173 = @func_872() /* ty=Tensor[(14, 7, 2), bool] */;
    %174 = %171.0;
    %175 = %172.0;
    (%173, %174, meta[relay.Constant][9] /* ty=Tensor[(130, 15), float32] */, %175)
  };
  %176() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32], Tensor[(14, 7, 2), float64]) */
}

def @func_3428() -> (Tensor[(14, 7, 2), int64],) {
  @func_3426() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_60() -> Tensor[(14, 7, 2), float64] {
  %178 = fn () -> Tensor[(14, 7, 2), float64] {
    %177 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
    atanh(%177) /* ty=Tensor[(14, 7, 2), float64] */
  };
  %178() /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_804() -> (Tensor[(14, 7, 2), int64],) {
  @func_802() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_588() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) {
  %179 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %181 = reshape(%180, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float64] */;
  %182 = @func_99(%181) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) */;
  %183 = %182.1;
  (%179, %183)
}

def @func_5346(%var_5344: Tensor[(5, 1, 5), float64], %var_5345: Tensor[(1950), float32]) -> (Tensor[(5, 1, 5), float64], Tensor[(14, 7, 2), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(6, 3, 15), float64], Tensor[(5, 270, 5), int16], Tensor[(270, 1), float64]) {
  %203 = fn (%var_5287: Tensor[(5, 1, 5), float64], %var_5319: Tensor[(1950), float32]) -> (Tensor[(5, 1, 5), float64], Tensor[(14, 7, 2), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(6, 3, 15), float64], Tensor[(5, 270, 5), int16], Tensor[(270, 1), float64]) {
    %184 = cast(%var_5287, dtype="float64") /* ty=Tensor[(5, 1, 5), float64] */;
    %185 = @func_1520() /* ty=(Tensor[(14, 7, 2), float64],) */;
    %186 = @func_2721() /* ty=(Tensor[(3, 12, 5), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float32]) */;
    %187 = cast(%var_5319, dtype="float32") /* ty=Tensor[(1950), float32] */;
    %188 = reshape(%187, newshape=[130, 15]) /* ty=Tensor[(130, 15), float32] */;
    %189 = @func_1974(%188) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32]) */;
    %190 = cast(meta[relay.Constant][11] /* ty=Tensor[(270, 1), float64] */, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
    %191 = reshape(%190, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), float64] */;
    %192 = @func_3278(%191) /* ty=(Tensor[(6, 3, 15), float64],) */;
    %193 = cast(meta[relay.Constant][11] /* ty=Tensor[(270, 1), float64] */, dtype="int16") /* ty=Tensor[(270, 1), int16] */;
    %194 = cast(%var_5287, dtype="int16") /* ty=Tensor[(5, 1, 5), int16] */;
    %195 = cast(meta[relay.Constant][11] /* ty=Tensor[(270, 1), float64] */, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
    %196 = sinh(%184) /* ty=Tensor[(5, 1, 5), float64] */;
    %197 = %185.0;
    %198 = %186.1;
    %199 = %189.0;
    %200 = %192.0;
    %201 = bitwise_xor(%193, %194) /* ty=Tensor[(5, 270, 5), int16] */;
    %202 = atan(%195) /* ty=Tensor[(270, 1), float64] */;
    (%196, %197, %198, %199, %var_5319, %200, %201, %202)
  };
  %203(%var_5344, %var_5345) /* ty=(Tensor[(5, 1, 5), float64], Tensor[(14, 7, 2), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(6, 3, 15), float64], Tensor[(5, 270, 5), int16], Tensor[(270, 1), float64]) */
}

def @func_9025() -> (Tensor[(14, 7, 2), float64],) {
  %204 = @func_4367() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %205 = %204.1;
  (%205,)
}

def @func_8209() -> Tensor[(14, 7, 2), float64] {
  @func_8207() /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_5752() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %206 = @func_3629() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %207 = %206.0;
  %208 = @func_1422() /* ty=Tensor[(14, 7, 2), bool] */;
  %209 = @func_2151() /* ty=Tensor[(14, 7, 2), int64] */;
  %210 = @func_3211() /* ty=Tensor[(14, 7, 2), float64] */;
  (%207, %208, %209, %210)
}

def @func_2370() -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) {
  %213 = fn () -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) {
    %211 = @func_2193() /* ty=Tensor[(14, 7, 2), bool] */;
    %212 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
    (%211, %212)
  };
  %213() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */
}

def @func_4724() -> (Tensor[(14, 7, 2), bool],) {
  %215 = fn () -> (Tensor[(14, 7, 2), bool],) {
    %214 = @func_1422() /* ty=Tensor[(14, 7, 2), bool] */;
    (%214,)
  };
  %215() /* ty=(Tensor[(14, 7, 2), bool],) */
}

def @func_4568() -> (Tensor[(14, 7, 2), int64], Tensor[(3, 12, 5), float64], Tensor[(180), float64]) {
  %222 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(3, 12, 5), float64], Tensor[(180), float64]) {
    %216 = @func_2338() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
    %217 = cast(meta[relay.Constant][12] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %218 = reshape(%217, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), float64] */;
    %219 = @func_1776(%218) /* ty=(Tensor[(3, 12, 5), float64],) */;
    %220 = %216.2;
    %221 = %219.0;
    (%220, %221, meta[relay.Constant][12] /* ty=Tensor[(180), float64] */)
  };
  %222() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(3, 12, 5), float64], Tensor[(180), float64]) */
}

def @func_8720() -> Tensor[(14, 7, 2), float64] {
  %224 = fn () -> Tensor[(14, 7, 2), float64] {
    %223 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
    %223.0
  };
  %224() /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_6290() -> (Tensor[(14, 7, 2), int64],) {
  %226 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %225 = @func_2683() /* ty=Tensor[(14, 7, 2), int64] */;
    (%225,)
  };
  %226() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_5632() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) {
  %227 = @func_2957() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) */;
  %228 = @func_4657() /* ty=(Tensor[(14, 7, 2), bool],) */;
  %229 = @func_1723() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48), float64], Tensor[(14, 7, 2), float64]) */;
  %230 = %227.0;
  %231 = %228.0;
  %232 = %229.0;
  (%230, %231, %232)
}

def @func_10323() -> Tensor[(1056), float32] {
  %233 = @func_5003() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(1056), float64], Tensor[(14, 7, 2), int64]) */;
  %234 = %233.1;
  %235 = cast(meta[relay.Constant][13] /* ty=Tensor[(1056), float64] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(1), int32] */;
  %237 = cast(%234, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?), float32] */;
  mod(%237, %238) /* ty=Tensor[(1056), float32] */
}

def @func_792() -> (Tensor[(14, 7, 2), int64],) {
  @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_10449(%var_10447: Tensor[(270), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(270), float64]) {
  @func_10446(%var_10447) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(270), float64]) */
}

def @func_5963() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 2, 7), bool], Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) {
  @func_5961() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 2, 7), bool], Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) */
}

def @func_5003() -> (Tensor[(14, 7, 2), float64], Tensor[(1056), float64], Tensor[(14, 7, 2), int64]) {
  %239 = @func_1520() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %240 = @func_4200() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(16, 11, 6), float32], Tensor[(1056), float64], Tensor[(280), float32], Tensor[(16, 3, 13), float32], Tensor[(624), float32], Tensor[(14, 7, 2), bool]) */;
  %241 = @func_3426() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %242 = %239.0;
  %243 = %240.2;
  %244 = %241.0;
  (%242, %243, %244)
}

def @func_2783() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %245 = @func_2369() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
  %246 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %247 = %245.1;
  %248 = %246.0;
  (%247, %248)
}

def @func_6717() -> Tensor[(14, 7, 2), uint16] {
  %249 = @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %250 = %249.1;
  %251 = @func_4657() /* ty=(Tensor[(14, 7, 2), bool],) */;
  %252 = %251.0;
  %253 = cast(%252, dtype="uint16") /* ty=Tensor[(14, 7, 2), uint16] */;
  %254 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%250, dtype="uint16") /* ty=Tensor[(14, 7, 2), uint16] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%255, %256) /* ty=Tensor[(14, 7, 2), uint16] */
}

def @func_9735(%var_9734: Tensor[(1, 13, 11), float64]) -> (Tensor[(1, 13, 11), float64], Tensor[(180), float64], Tensor[(180, 1), float64]) {
  %263 = fn (%var_9725: Tensor[(1, 13, 11), float64]) -> (Tensor[(1, 13, 11), float64], Tensor[(180), float64], Tensor[(180, 1), float64]) {
    %257 = cast(%var_9725, dtype="float64") /* ty=Tensor[(1, 13, 11), float64] */;
    %258 = cast(meta[relay.Constant][14] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
    %259 = reshape(%258, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %260 = @func_1922(%259) /* ty=(Tensor[(280), float32], Tensor[(3, 12, 5), float64], Tensor[(180), float64]) */;
    %261 = asin(%257) /* ty=Tensor[(1, 13, 11), float64] */;
    %262 = %260.2;
    (%261, %262, meta[relay.Constant][14] /* ty=Tensor[(180, 1), float64] */)
  };
  %263(%var_9734) /* ty=(Tensor[(1, 13, 11), float64], Tensor[(180), float64], Tensor[(180, 1), float64]) */
}

def @func_8377() -> (Tensor[(14, 7, 2), int64], Tensor[(2, 8, 3), float64], Tensor[(48), float64]) {
  %264 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %265 = cast(meta[relay.Constant][15] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %266 = reshape(%265, newshape=[2, 8, 3]) /* ty=Tensor[(2, 8, 3), float64] */;
  %267 = %264.0;
  %268 = @func_186(%266) /* ty=Tensor[(2, 8, 3), float64] */;
  (%267, %268, meta[relay.Constant][15] /* ty=Tensor[(48), float64] */)
}

def @func_3003(%var_3001: float64, %var_3002: Tensor[(9, 14, 4), float64]) -> (Tensor[(9, 14, 4), float64], Tensor[(14, 7, 2), float64]) {
  @func_2999(%var_3001, %var_3002) /* ty=(Tensor[(9, 14, 4), float64], Tensor[(14, 7, 2), float64]) */
}

def @func_641() -> (Tensor[(14, 7, 2), int64],) {
  @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_3426() -> (Tensor[(14, 7, 2), int64],) {
  %269 = @func_802() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %270 = %269.0;
  (%270,)
}

def @func_3779(%var_3777: Tensor[(2, 8, 10), float32], %var_3778: Tensor[(132), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(2, 8, 10), float32], Tensor[(1, 12, 11), float32], Tensor[(132), float32]) {
  @func_3775(%var_3777, %var_3778) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 8, 10), float32], Tensor[(1, 12, 11), float32], Tensor[(132), float32]) */
}

def @func_8314(%var_8312: uint16, %var_8313: Tensor[(10, 5, 11), uint16]) -> Tensor[(10, 5, 11), uint16] {
  @func_8310(%var_8312, %var_8313) /* ty=Tensor[(10, 5, 11), uint16] */
}

def @func_244() -> (Tensor[(14, 7, 2), int64],) {
  %280 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %271 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
    %272 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
    %273 = cast(%272, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
    %274 = log10(%273) /* ty=Tensor[(14, 7, 2), float64] */;
    %275 = cast(%274, dtype="int64") /* ty=Tensor[(14, 7, 2), int64] */;
    %276 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
    %277 = cast(%271, dtype="int64") /* ty=Tensor[(14, 7, 2), int64] */;
    %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %279 = right_shift(%277, %278) /* ty=Tensor[(14, 7, 2), int64] */;
    (%279,)
  };
  %280() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_2785() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  @func_2783() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_7501(%var_7499: Tensor[(270), float64]) -> (Tensor[(14, 7, 2), bool], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(6, 3, 15), float64], Tensor[(270), float64]) {
  @func_7498(%var_7499) /* ty=(Tensor[(14, 7, 2), bool], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(6, 3, 15), float64], Tensor[(270), float64]) */
}

def @func_5446() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(168), int16]) {
  %281 = cast(meta[relay.Constant][16] /* ty=Tensor[(168), int16] */, dtype="int16") /* ty=Tensor[(168), int16] */;
  %282 = reshape(%281, newshape=[7, 4, 6]) /* ty=Tensor[(7, 4, 6), int16] */;
  %283 = @func_4842(%282) /* ty=(Tensor[(7, 4, 6), bool], Tensor[(7, 4, 6), float64], Tensor[(14, 7, 2), int64]) */;
  %284 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  %285 = %283.2;
  (%284, %285, meta[relay.Constant][16] /* ty=Tensor[(168), int16] */)
}

def @func_1924(%var_1923: Tensor[(180), float64]) -> (Tensor[(280), float32], Tensor[(3, 12, 5), float64], Tensor[(180), float64]) {
  %292 = fn (%var_1916: Tensor[(180), float64]) -> (Tensor[(280), float32], Tensor[(3, 12, 5), float64], Tensor[(180), float64]) {
    %286 = @func_1129() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(2, 14, 10), float32], Tensor[(280), float32]) */;
    %287 = cast(%var_1916, dtype="float64") /* ty=Tensor[(180), float64] */;
    %288 = reshape(%287, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), float64] */;
    %289 = @func_1776(%288) /* ty=(Tensor[(3, 12, 5), float64],) */;
    %290 = %286.3;
    %291 = %289.0;
    (%290, %291, %var_1916)
  };
  %292(%var_1923) /* ty=(Tensor[(280), float32], Tensor[(3, 12, 5), float64], Tensor[(180), float64]) */
}

def @func_6834() -> Tensor[(14, 7, 2), bool] {
  %293 = @func_4084() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(12, 14, 5), float32], Tensor[(840), float32], Tensor[(14, 7, 2), float64]) */;
  %293.0
}

def @func_1130() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(2, 14, 10), float32], Tensor[(280), float32]) {
  %302 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(2, 14, 10), float32], Tensor[(280), float32]) {
    %294 = @func_802() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %295 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
    %296 = cast(meta[relay.Constant][17] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
    %297 = reshape(%296, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float32] */;
    %298 = @func_344(%297) /* ty=(Tensor[(2, 14, 10), float32],) */;
    %299 = %294.0;
    %300 = %295.0;
    %301 = %298.0;
    (%299, %300, %301, meta[relay.Constant][17] /* ty=Tensor[(280), float32] */)
  };
  %302() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(2, 14, 10), float32], Tensor[(280), float32]) */
}

def @func_1974(%var_1971: Tensor[(130, 15), float32]) -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32]) {
  %303 = @func_1520() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %304 = cast(%var_1971, dtype="float32") /* ty=Tensor[(130, 15), float32] */;
  %305 = reshape(%304, newshape=[1950]) /* ty=Tensor[(1950), float32] */;
  %306 = @func_1501(%305) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) */;
  %307 = %303.0;
  %308 = %306.0;
  (%307, %308, %var_1971)
}

def @func_3378() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %312 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
    %309 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %310 = %309.0;
    %311 = @func_1865() /* ty=Tensor[(14, 7, 2), float64] */;
    (%310, %311)
  };
  %312() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */
}

def @func_2135() -> (Tensor[(14, 7, 2), int64],) {
  %313 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %314 = %313.0;
  (%314,)
}

def @func_1092(%var_1090: Tensor[(14, 7, 2), int64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), uint16], Tensor[(14, 7, 2), float64]) {
  @func_1089(%var_1090) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), uint16], Tensor[(14, 7, 2), float64]) */
}

def @func_6858() -> (Tensor[(14, 7, 2), bool],) {
  %315 = @func_1422() /* ty=Tensor[(14, 7, 2), bool] */;
  (%315,)
}

def @func_2291() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */
}

def @func_4534(%var_4533: Tensor[(1, 48), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(?, 48), bool], Tensor[(14, 7, 2), float64], Tensor[(1950), float32]) {
  %329 = fn (%var_4503: Tensor[(1, 48), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(?, 48), bool], Tensor[(14, 7, 2), float64], Tensor[(1950), float32]) {
    %316 = cast(%var_4503, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
    %317 = reshape(%316, newshape=[2, 8, 3]) /* ty=Tensor[(2, 8, 3), float64] */;
    %318 = @func_186(%317) /* ty=Tensor[(2, 8, 3), float64] */;
    %319 = cast(%318, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
    %320 = shape_of(%var_4503, dtype="int32") /* ty=Tensor[(2), int32] */;
    %321 = cast(%var_4503, dtype="bool") /* ty=Tensor[(1, 48), bool] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %323 = cast(meta[relay.Constant][18] /* ty=Tensor[(1950), float32] */, dtype="float32") /* ty=Tensor[(1950), float32] */;
    %324 = reshape(%323, newshape=[130, 15]) /* ty=Tensor[(130, 15), float32] */;
    %325 = @func_1974(%324) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32]) */;
    %326 = @func_1428() /* ty=Tensor[(14, 7, 2), int64] */;
    %327 = logical_or(%321, %322) /* ty=Tensor[(?, 48), bool] */;
    %328 = %325.1;
    (%326, %327, %328, meta[relay.Constant][18] /* ty=Tensor[(1950), float32] */)
  };
  %329(%var_4533) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 48), bool], Tensor[(14, 7, 2), float64], Tensor[(1950), float32]) */
}

def @func_2861(%var_2859: Tensor[(1, 280), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64]) {
  @func_2858(%var_2859) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64]) */
}

def @func_6860() -> (Tensor[(14, 7, 2), bool],) {
  @func_6858() /* ty=(Tensor[(14, 7, 2), bool],) */
}

def @func_2611() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) {
  @func_2609() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) */
}

def @func_6230() -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) {
  %330 = @func_4657() /* ty=(Tensor[(14, 7, 2), bool],) */;
  %331 = %330.0;
  %332 = @func_5470() /* ty=Tensor[(14, 7, 2), int64] */;
  (%331, %332)
}

def @func_3280(%var_3279: Tensor[(6, 3, 15), float64]) -> (Tensor[(6, 3, 15), float64],) {
  %335 = fn (%var_3268: Tensor[(6, 3, 15), float64]) -> (Tensor[(6, 3, 15), float64],) {
    %333 = cast(%var_3268, dtype="float64") /* ty=Tensor[(6, 3, 15), float64] */;
    %334 = cosh(%333) /* ty=Tensor[(6, 3, 15), float64] */;
    (%334,)
  };
  %335(%var_3279) /* ty=(Tensor[(6, 3, 15), float64],) */
}

def @func_3141() -> Tensor[(14, 7, 2), int64] {
  @func_3139() /* ty=Tensor[(14, 7, 2), int64] */
}

def @func_4423() -> (Tensor[(14, 7, 2), int64],) {
  %338 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %336 = @func_1195() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %337 = %336.0;
    (%337,)
  };
  %338() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_4085() -> (Tensor[(14, 7, 2), bool], Tensor[(12, 14, 5), float32], Tensor[(840), float32], Tensor[(14, 7, 2), float64]) {
  %345 = fn () -> (Tensor[(14, 7, 2), bool], Tensor[(12, 14, 5), float32], Tensor[(840), float32], Tensor[(14, 7, 2), float64]) {
    %339 = cast(meta[relay.Constant][19] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %340 = reshape(%339, newshape=[12, 14, 5]) /* ty=Tensor[(12, 14, 5), float32] */;
    %341 = @func_3344(%340) /* ty=(Tensor[(12, 14, 5), float32], Tensor[(14, 7, 2), float64]) */;
    %342 = @func_872() /* ty=Tensor[(14, 7, 2), bool] */;
    %343 = %341.0;
    %344 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
    (%342, %343, meta[relay.Constant][19] /* ty=Tensor[(840), float32] */, %344)
  };
  %345() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(12, 14, 5), float32], Tensor[(840), float32], Tensor[(14, 7, 2), float64]) */
}

def @func_9027() -> (Tensor[(14, 7, 2), float64],) {
  @func_9025() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_3469() -> (Tensor[(14, 7, 2), float64],) {
  %346 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%346,)
}

def @func_1618(%var_1617: Tensor[(14, 7, 2), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) {
  %360 = fn (%var_1597: Tensor[(14, 7, 2), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) {
    %347 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %348 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %349 = %348.0;
    %350 = cast(%349, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
    %351 = exp(%350) /* ty=Tensor[(14, 7, 2), float32] */;
    %352 = cast(%var_1597, dtype="int64") /* ty=Tensor[(14, 7, 2), int64] */;
    %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(%351, dtype="int64") /* ty=Tensor[(14, 7, 2), int64] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %356 = cast(%351, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
    %357 = %347.0;
    %358 = minimum(%354, %355) /* ty=Tensor[(14, 7, 2), int64] */;
    %359 = rsqrt(%356) /* ty=Tensor[(14, 7, 2), float32] */;
    (%357, %358, %359)
  };
  %360(%var_1617) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) */
}

def @func_1723() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48), float64], Tensor[(14, 7, 2), float64]) {
  %361 = @func_1129() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(2, 14, 10), float32], Tensor[(280), float32]) */;
  %362 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %363 = %362.0;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %365 = cast(meta[relay.Constant][20] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %366 = reshape(%365, newshape=[2, 8, 3]) /* ty=Tensor[(2, 8, 3), float64] */;
  %367 = %361.1;
  %368 = sigmoid(%364) /* ty=Tensor[(14, 7, 2), float64] */;
  %369 = @func_186(%366) /* ty=Tensor[(2, 8, 3), float64] */;
  %370 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%367, %368, %369, meta[relay.Constant][20] /* ty=Tensor[(48), float64] */, %370)
}

def @func_590() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) {
  @func_588() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */
}

def @func_2609() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) {
  %371 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %372 = @func_2135() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %373 = cast(meta[relay.Constant][21] /* ty=Tensor[(1950), float32] */, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %374 = reshape(%373, newshape=[15, 13, 10]) /* ty=Tensor[(15, 13, 10), float32] */;
  %375 = @func_1168(%374) /* ty=(Tensor[(15, 13, 10), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %376 = %371.0;
  %377 = %372.0;
  %378 = %375.1;
  (%376, %377, %378, meta[relay.Constant][21] /* ty=Tensor[(1950), float32] */)
}

def @func_8207() -> Tensor[(14, 7, 2), float64] {
  @func_927() /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_9393() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %382 = fn () -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
    %379 = @func_6365() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %380 = @func_6000() /* ty=Tensor[(14, 7, 2), float64] */;
    %381 = %379.0;
    (%380, %381)
  };
  %382() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_7747() -> (Tensor[(14, 7, 2), int64],) {
  @func_7745() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_7854() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %383 = @func_5632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
  %384 = @func_6000() /* ty=Tensor[(14, 7, 2), float64] */;
  %385 = %383.2;
  %386 = @func_2151() /* ty=Tensor[(14, 7, 2), int64] */;
  (%384, %385, %386)
}

def @func_8310(%var_8300: uint16, %var_8301: Tensor[(10, 5, 11), uint16]) -> Tensor[(10, 5, 11), uint16] {
  %387 = cast(%var_8300, dtype="uint16") /* ty=uint16 */;
  %388 = cast(%var_8301, dtype="uint16") /* ty=Tensor[(10, 5, 11), uint16] */;
  subtract(%387, %388) /* ty=Tensor[(10, 5, 11), uint16] */
}

def @func_7723(%var_7722: Tensor[(48), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(48), float64]) {
  %395 = fn (%var_7717: Tensor[(48), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(48), float64]) {
    %389 = @func_5977() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %390 = cast(%var_7717, dtype="float64") /* ty=Tensor[(48), float64] */;
    %391 = reshape(%390, newshape=[1, 48]) /* ty=Tensor[(1, 48), float64] */;
    %392 = @func_4532(%391) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 48), bool], Tensor[(14, 7, 2), float64], Tensor[(1950), float32]) */;
    %393 = %389.0;
    %394 = %392.0;
    (%393, %394, %var_7717)
  };
  %395(%var_7722) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(48), float64]) */
}

def @func_2469(%var_2467: Tensor[(16, 11, 6), float64], %var_2468: Tensor[(280), float32]) -> (Tensor[(16, 11, 6), int32], Tensor[(16, 11, 6), float32], Tensor[(14, 7, 2), int64], Tensor[(280), float32]) {
  %411 = fn (%var_2427: Tensor[(16, 11, 6), float64], %var_2455: Tensor[(280), float32]) -> (Tensor[(16, 11, 6), int32], Tensor[(16, 11, 6), float32], Tensor[(14, 7, 2), int64], Tensor[(280), float32]) {
    %396 = cast(%var_2427, dtype="float64") /* ty=Tensor[(16, 11, 6), float64] */;
    %397 = tan(%396) /* ty=Tensor[(16, 11, 6), float64] */;
    %398 = cast(%var_2427, dtype="float64") /* ty=Tensor[(16, 11, 6), float64] */;
    %399 = log2(%398) /* ty=Tensor[(16, 11, 6), float64] */;
    %400 = cast(%399, dtype="int32") /* ty=Tensor[(16, 11, 6), int32] */;
    %401 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
    %402 = cast(%397, dtype="int32") /* ty=Tensor[(16, 11, 6), int32] */;
    %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %404 = cast(%var_2427, dtype="float32") /* ty=Tensor[(16, 11, 6), float32] */;
    %405 = cast(%var_2455, dtype="float32") /* ty=Tensor[(280), float32] */;
    %406 = reshape(%405, newshape=[1, 280]) /* ty=Tensor[(1, 280), float32] */;
    %407 = @func_366(%406) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(1, 280), float32]) */;
    %408 = logical_xor(%402, %403) /* ty=Tensor[(16, 11, 6), int32] */;
    %409 = acos(%404) /* ty=Tensor[(16, 11, 6), float32] */;
    %410 = %407.0;
    (%408, %409, %410, %var_2455)
  };
  %411(%var_2467, %var_2468) /* ty=(Tensor[(16, 11, 6), int32], Tensor[(16, 11, 6), float32], Tensor[(14, 7, 2), int64], Tensor[(280), float32]) */
}

def @func_9600() -> Tensor[(14, 7, 2), float64] {
  @func_9598() /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_7320() -> Tensor[(14, 7, 2), float32] {
  %412 = @func_2721() /* ty=(Tensor[(3, 12, 5), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float32]) */;
  %412.2
}

def @func_7630() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(280), float32]) {
  %413 = @func_4422() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %414 = @func_4310() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %415 = @func_3684() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %416 = @func_5787() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(?, 280), int64], Tensor[(280), float32]) */;
  %417 = @func_2683() /* ty=Tensor[(14, 7, 2), int64] */;
  %418 = %413.0;
  %419 = %414.1;
  %420 = @func_927() /* ty=Tensor[(14, 7, 2), float64] */;
  %421 = %415.0;
  %422 = %416.2;
  (%417, %418, %419, %420, %421, %422)
}

def @func_6836() -> Tensor[(14, 7, 2), bool] {
  @func_6834() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_8248() -> Tensor[(14, 7, 2), bool] {
  @func_8246() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_10283() -> (Tensor[(14, 7, 2), int64],) {
  %425 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %423 = @func_9398() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %424 = %423.0;
    (%424,)
  };
  %425() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_7308() -> (Tensor[(2, 14, 10), float32], Tensor[(14, 7, 2), float64]) {
  @func_7306() /* ty=(Tensor[(2, 14, 10), float32], Tensor[(14, 7, 2), float64]) */
}

def @func_7498(%var_7487: Tensor[(270), float64]) -> (Tensor[(14, 7, 2), bool], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(6, 3, 15), float64], Tensor[(270), float64]) {
  %426 = @func_5787() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(?, 280), int64], Tensor[(280), float32]) */;
  %427 = @func_4438() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %428 = %426.2;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(280), float32] */;
  %430 = reshape(%429, newshape=[1, 280]) /* ty=Tensor[(1, 280), float32] */;
  %431 = @func_2858(%430) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64]) */;
  %432 = cast(%var_7487, dtype="float64") /* ty=Tensor[(270), float64] */;
  %433 = reshape(%432, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), float64] */;
  %434 = @func_3278(%433) /* ty=(Tensor[(6, 3, 15), float64],) */;
  %435 = @func_872() /* ty=Tensor[(14, 7, 2), bool] */;
  %436 = %427.0;
  %437 = %431.0;
  %438 = %434.0;
  (%435, %428, %436, %437, %438, %var_7487)
}

def @func_1196() -> (Tensor[(14, 7, 2), int64],) {
  %441 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %439 = @func_1047() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
    %440 = %439.1;
    (%440,)
  };
  %441() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_9171() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %445 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
    %442 = @func_8377() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 8, 3), float64], Tensor[(48), float64]) */;
    %443 = @func_3993() /* ty=Tensor[(14, 7, 2), int64] */;
    %444 = %442.0;
    (%443, %444)
  };
  %445() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */
}

def @func_5502() -> (Tensor[(9, 9, 4), float32],) {
  %446 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 9, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %447 = atan(%446) /* ty=Tensor[(9, 9, 4), float32] */;
  (%447,)
}

def @func_8594() -> (Tensor[(14, 7, 2), float64],) {
  %448 = @func_8065() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %449 = %448.0;
  (%449,)
}

def @func_10096() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  @func_10094() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_2777(%var_2776: Tensor[(16, 3, 13), float32]) -> (Tensor[(16, 3, 13), float32], Tensor[(16, 3, 13), float32]) {
  %454 = fn (%var_2759: Tensor[(16, 3, 13), float32]) -> (Tensor[(16, 3, 13), float32], Tensor[(16, 3, 13), float32]) {
    %450 = cast(%var_2759, dtype="float32") /* ty=Tensor[(16, 3, 13), float32] */;
    %451 = cast(%var_2759, dtype="float32") /* ty=Tensor[(16, 3, 13), float32] */;
    %452 = sigmoid(%450) /* ty=Tensor[(16, 3, 13), float32] */;
    %453 = log10(%451) /* ty=Tensor[(16, 3, 13), float32] */;
    (%452, %453)
  };
  %454(%var_2776) /* ty=(Tensor[(16, 3, 13), float32], Tensor[(16, 3, 13), float32]) */
}

def @func_7745() -> (Tensor[(14, 7, 2), int64],) {
  %455 = @func_2338() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %456 = %455.3;
  (%456,)
}

def @func_8066() -> (Tensor[(14, 7, 2), float64],) {
  %459 = fn () -> (Tensor[(14, 7, 2), float64],) {
    %457 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
    %458 = %457.0;
    (%458,)
  };
  %459() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_1423() -> Tensor[(14, 7, 2), bool] {
  %460 = fn () -> Tensor[(14, 7, 2), bool] {
    @func_872() /* ty=Tensor[(14, 7, 2), bool] */
  };
  %460() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_9632() -> (Tensor[(14, 7, 2), int64],) {
  @func_9630() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_4202() -> (Tensor[(14, 7, 2), float64], Tensor[(16, 11, 6), float32], Tensor[(1056), float64], Tensor[(280), float32], Tensor[(16, 3, 13), float32], Tensor[(624), float32], Tensor[(14, 7, 2), bool]) {
  @func_4200() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(16, 11, 6), float32], Tensor[(1056), float64], Tensor[(280), float32], Tensor[(16, 3, 13), float32], Tensor[(624), float32], Tensor[(14, 7, 2), bool]) */
}

def @func_6786() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float64], Tensor[(130, 15), float64]) {
  %481 = fn () -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float64], Tensor[(130, 15), float64]) {
    %461 = @func_2783() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
    %462 = @func_1787() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %463 = @func_5045() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %464 = @func_2783() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
    %465 = %462.0;
    %466 = cast(%465, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
    %467 = reshape(%466, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float64] */;
    %468 = @func_99(%467) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) */;
    %469 = cast(meta[relay.Constant][23] /* ty=Tensor[(130, 15), float64] */, dtype="float64") /* ty=Tensor[(130, 15), float64] */;
    %470 = reshape(%469, newshape=[130, 15]) /* ty=Tensor[(130, 15), float64] */;
    %471 = @func_6554(%470) /* ty=(Tensor[(130, 15), bool],) */;
    %472 = %471.0;
    %473 = cast(%472, dtype="float64") /* ty=Tensor[(130, 15), float64] */;
    %474 = cast(meta[relay.Constant][23] /* ty=Tensor[(130, 15), float64] */, dtype="float64") /* ty=Tensor[(130, 15), float64] */;
    %475 = %461.0;
    %476 = %463.0;
    %477 = %464.1;
    %478 = %468.1;
    %479 = log2(%473) /* ty=Tensor[(130, 15), float64] */;
    %480 = erf(%474) /* ty=Tensor[(130, 15), float64] */;
    (%475, %465, %476, %477, %478, %479, %480)
  };
  %481() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float64], Tensor[(130, 15), float64]) */
}

def @func_1369() -> (Tensor[(14, 7, 2), float64],) {
  @func_1367() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_7834() -> (Tensor[(16, 11, 6), float32], Tensor[(14, 7, 2), float64], Tensor[(130, 15), bool], Tensor[(1, 1950), float64]) {
  %490 = fn () -> (Tensor[(16, 11, 6), float32], Tensor[(14, 7, 2), float64], Tensor[(130, 15), bool], Tensor[(1, 1950), float64]) {
    %482 = @func_4200() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(16, 11, 6), float32], Tensor[(1056), float64], Tensor[(280), float32], Tensor[(16, 3, 13), float32], Tensor[(624), float32], Tensor[(14, 7, 2), bool]) */;
    %483 = @func_3469() /* ty=(Tensor[(14, 7, 2), float64],) */;
    %484 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 1950), float64] */, dtype="float64") /* ty=Tensor[(1, 1950), float64] */;
    %485 = reshape(%484, newshape=[130, 15]) /* ty=Tensor[(130, 15), float64] */;
    %486 = @func_6554(%485) /* ty=(Tensor[(130, 15), bool],) */;
    %487 = %482.1;
    %488 = %483.0;
    %489 = %486.0;
    (%487, %488, %489, meta[relay.Constant][24] /* ty=Tensor[(1, 1950), float64] */)
  };
  %490() /* ty=(Tensor[(16, 11, 6), float32], Tensor[(14, 7, 2), float64], Tensor[(130, 15), bool], Tensor[(1, 1950), float64]) */
}

def @func_928() -> Tensor[(14, 7, 2), float64] {
  %492 = fn () -> Tensor[(14, 7, 2), float64] {
    %491 = @func_588() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
    %491.0
  };
  %492() /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_3312(%var_3295: Tensor[(15, 3, 13), float64]) -> (Tensor[(15, 3, 13), float64], Tensor[(14, 7, 2), float32]) {
  %493 = cast(-0.024808f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %494 = cast(%var_3295, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %495 = @func_2957() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) */;
  %496 = floor_divide(%493, %494) /* ty=Tensor[(15, 3, 13), float64] */;
  %497 = %495.2;
  (%496, %497)
}

def @func_10256() -> (Tensor[(14, 7, 2), float64],) {
  %499 = fn () -> (Tensor[(14, 7, 2), float64],) {
    %498 = @func_8719() /* ty=Tensor[(14, 7, 2), float64] */;
    (%498,)
  };
  %499() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_3344(%var_3330: Tensor[(12, 14, 5), float32]) -> (Tensor[(12, 14, 5), float32], Tensor[(14, 7, 2), float64]) {
  %500 = cast(%var_3330, dtype="float32") /* ty=Tensor[(12, 14, 5), float32] */;
  %501 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(12, 14, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 14, 5), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 5), float32] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %504 = floor_mod(%502, %503) /* ty=Tensor[(12, 14, 5), float32] */;
  %505 = @func_1865() /* ty=Tensor[(14, 7, 2), float64] */;
  (%504, %505)
}

def @func_3872(%var_3837: Tensor[(14, 7, 2), int64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), uint8], Tensor[(585), bool], Tensor[(585), float32], Tensor[(14, 7, 2), bool], Tensor[(280), float32]) {
  %506 = @func_1787() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %507 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %508 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %509 = %508.0;
  %510 = cast(%var_3837, dtype="uint8") /* ty=Tensor[(14, 7, 2), uint8] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="uint8") /* ty=Tensor[(14, 7, 2), uint8] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %514 = cast(meta[relay.Constant][26] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
  %515 = reshape(%514, newshape=[15, 3, 13]) /* ty=Tensor[(15, 3, 13), float64] */;
  %516 = @func_3312(%515) /* ty=(Tensor[(15, 3, 13), float64], Tensor[(14, 7, 2), float32]) */;
  %517 = %516.0;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %519 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(585), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %520 = cast(meta[relay.Constant][26] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?), float64] */;
  %522 = floor_divide(%520, %521) /* ty=Tensor[(585), float64] */;
  %523 = cast(%522, dtype="bool") /* ty=Tensor[(585), bool] */;
  %524 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(585), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %525 = cast(meta[relay.Constant][26] /* ty=Tensor[(585), float64] */, dtype="bool") /* ty=Tensor[(585), bool] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?), bool] */;
  %527 = cast(meta[relay.Constant][26] /* ty=Tensor[(585), float64] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %528 = cos(%527) /* ty=Tensor[(585), float32] */;
  %529 = cast(%517, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(1), int32] */;
  %531 = cast(%528, dtype="float32") /* ty=Tensor[(585), float32] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?), float32] */;
  %533 = %507.0;
  %534 = cast(%533, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %535 = cast(meta[relay.Constant][27] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %536 = reshape(%534, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float64] */;
  %537 = reshape(%535, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %538 = @func_414(%536, %537) /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(280), float32], Tensor[(14, 7, 2), int8]) */;
  %539 = %506.0;
  %540 = maximum(%512, %513) /* ty=Tensor[(14, 7, 2), uint8] */;
  %541 = less_equal(%525, %526) /* ty=Tensor[(585), bool] */;
  %542 = minimum(%531, %532) /* ty=Tensor[(585), float32] */;
  %543 = %538.0;
  (%539, %533, %540, %541, %542, %543, meta[relay.Constant][27] /* ty=Tensor[(280), float32] */)
}

def @func_101(%var_100: Tensor[(14, 7, 2), float64]) -> (Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) {
  %551 = fn (%var_78: Tensor[(14, 7, 2), float64]) -> (Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) {
    %544 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
    %545 = cast(%var_78, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
    %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%544, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %549 = divide(%547, %548) /* ty=Tensor[(14, 7, 2), float32] */;
    %550 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
    (%549, %550)
  };
  %551(%var_100) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) */
}

def @func_821(%var_816: Tensor[(2, 10, 12), float32]) -> Tensor[(2, 10, 12), float32] {
  %552 = cast(%var_816, dtype="float32") /* ty=Tensor[(2, 10, 12), float32] */;
  erf(%552) /* ty=Tensor[(2, 10, 12), float32] */
}

def @func_1725() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48), float64], Tensor[(14, 7, 2), float64]) {
  @func_1723() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48), float64], Tensor[(14, 7, 2), float64]) */
}

def @func_1048() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %557 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
    %553 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %554 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %555 = %553.0;
    %556 = %554.0;
    (%555, %556)
  };
  %557() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */
}

def @func_7856() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  @func_7854() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_5978() -> (Tensor[(14, 7, 2), int64],) {
  %560 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %558 = @func_5752() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */;
    %559 = %558.0;
    (%559,)
  };
  %560() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_10039(%var_10038: Tensor[(1950), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(7, 4, 6), bool], Tensor[(1, 168), int16], Tensor[(1, 160), float32], Tensor[(132), int16], Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(270, 25), uint8]) {
  %589 = fn (%var_10026: Tensor[(1950), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(7, 4, 6), bool], Tensor[(1, 168), int16], Tensor[(1, 160), float32], Tensor[(132), int16], Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(270, 25), uint8]) {
    %561 = @func_1309() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
    %562 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 168), int16] */, dtype="int16") /* ty=Tensor[(1, 168), int16] */;
    %563 = reshape(%562, newshape=[7, 4, 6]) /* ty=Tensor[(7, 4, 6), int16] */;
    %564 = @func_4842(%563) /* ty=(Tensor[(7, 4, 6), bool], Tensor[(7, 4, 6), float64], Tensor[(14, 7, 2), int64]) */;
    %565 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 160), float32] */, dtype="float32") /* ty=Tensor[(1, 160), float32] */;
    %566 = cast(meta[relay.Constant][30] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
    %567 = reshape(%565, newshape=[2, 8, 10]) /* ty=Tensor[(2, 8, 10), float32] */;
    %568 = reshape(%566, newshape=[132]) /* ty=Tensor[(132), float32] */;
    %569 = @func_3775(%567, %568) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 8, 10), float32], Tensor[(1, 12, 11), float32], Tensor[(132), float32]) */;
    %570 = %569.2;
    %571 = cast(%570, dtype="int16") /* ty=Tensor[(1, 12, 11), int16] */;
    %572 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(132), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %573 = cast(meta[relay.Constant][30] /* ty=Tensor[(132), float32] */, dtype="int16") /* ty=Tensor[(132), int16] */;
    %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?), int16] */;
    %575 = @func_5003() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(1056), float64], Tensor[(14, 7, 2), int64]) */;
    %576 = cast(meta[relay.Constant][31] /* ty=Tensor[(25), float64] */, dtype="float64") /* ty=Tensor[(25), float64] */;
    %577 = cast(%var_10026, dtype="float32") /* ty=Tensor[(1950), float32] */;
    %578 = reshape(%576, newshape=[5, 1, 5]) /* ty=Tensor[(5, 1, 5), float64] */;
    %579 = reshape(%577, newshape=[1950]) /* ty=Tensor[(1950), float32] */;
    %580 = @func_5343(%578, %579) /* ty=(Tensor[(5, 1, 5), float64], Tensor[(14, 7, 2), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(6, 3, 15), float64], Tensor[(5, 270, 5), int16], Tensor[(270, 1), float64]) */;
    %581 = %580.7;
    %582 = cast(meta[relay.Constant][31] /* ty=Tensor[(25), float64] */, dtype="uint8") /* ty=Tensor[(25), uint8] */;
    %583 = cast(%581, dtype="uint8") /* ty=Tensor[(270, 1), uint8] */;
    %584 = %561.1;
    %585 = %564.0;
    %586 = right_shift(%573, %574) /* ty=Tensor[(132), int16] */;
    %587 = %575.0;
    %588 = bitwise_or(%582, %583) /* ty=Tensor[(270, 25), uint8] */;
    (%584, %585, meta[relay.Constant][28] /* ty=Tensor[(1, 168), int16] */, meta[relay.Constant][29] /* ty=Tensor[(1, 160), float32] */, %586, %587, %var_10026, %588)
  };
  %589(%var_10038) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(7, 4, 6), bool], Tensor[(1, 168), int16], Tensor[(1, 160), float32], Tensor[(132), int16], Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(270, 25), uint8]) */
}

def @func_3139() -> Tensor[(14, 7, 2), int64] {
  %590 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %590.0
}

def @func_4940(%var_4917: uint64, %var_4918: Tensor[(5, 4, 2), uint64]) -> (Tensor[(5, 4, 2), uint64],) {
  %591 = cast(%var_4917, dtype="uint64") /* ty=uint64 */;
  %592 = cast(%var_4918, dtype="uint64") /* ty=Tensor[(5, 4, 2), uint64] */;
  %593 = multiply(%591, %592) /* ty=Tensor[(5, 4, 2), uint64] */;
  (%593,)
}

def @func_1977(%var_1975: Tensor[(130, 15), float32]) -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32]) {
  @func_1974(%var_1975) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32]) */
}

def @func_3248(%var_3246: Tensor[(14, 7, 2), float64]) -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) {
  @func_3245(%var_3246) /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */
}

def @func_1779(%var_1777: Tensor[(3, 12, 5), float64]) -> (Tensor[(3, 12, 5), float64],) {
  @func_1776(%var_1777) /* ty=(Tensor[(3, 12, 5), float64],) */
}

def @func_460(%var_459: Tensor[(14, 7, 2), float32]) -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) {
  %611 = fn (%var_435: Tensor[(14, 7, 2), float32]) -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) {
    %594 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
    %595 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %596 = %595.0;
    %597 = cast(%596, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
    %598 = reshape(%597, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float64] */;
    %599 = @func_99(%598) /* ty=(Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) */;
    %600 = %599.0;
    %601 = cast(%var_435, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
    %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
    %603 = cast(%600, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %605 = cast(%var_435, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
    %606 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
    %607 = %594.0;
    %608 = mod(%603, %604) /* ty=Tensor[(14, 7, 2), float32] */;
    %609 = tan(%605) /* ty=Tensor[(14, 7, 2), float64] */;
    %610 = %606.0;
    (%607, %596, %608, %609, %610)
  };
  %611(%var_459) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */
}

def @func_1170(%var_1169: Tensor[(15, 13, 10), float32]) -> (Tensor[(15, 13, 10), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %618 = fn (%var_1143: Tensor[(15, 13, 10), float32]) -> (Tensor[(15, 13, 10), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
    %612 = cast(%var_1143, dtype="float32") /* ty=Tensor[(15, 13, 10), float32] */;
    %613 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %614 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %615 = log10(%612) /* ty=Tensor[(15, 13, 10), float32] */;
    %616 = %613.0;
    %617 = %614.0;
    (%615, %616, %617)
  };
  %618(%var_1169) /* ty=(Tensor[(15, 13, 10), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */
}

def @func_8901() -> (Tensor[(14, 7, 2), int64],) {
  %621 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %619 = @func_2135() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %620 = %619.0;
    (%620,)
  };
  %621() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_6365() -> (Tensor[(14, 7, 2), int64],) {
  %622 = @func_4422() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %623 = %622.0;
  (%623,)
}

def @func_9398() -> (Tensor[(14, 7, 2), int64],) {
  %624 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %625 = %624.0;
  (%625,)
}

def @func_3612() -> Tensor[(14, 7, 2), int64] {
  %627 = fn () -> Tensor[(14, 7, 2), int64] {
    %626 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %626.0
  };
  %627() /* ty=Tensor[(14, 7, 2), int64] */
}

def @func_5754() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  @func_5752() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */
}

def @func_5416(%var_5410: Tensor[(14, 2, 7), bool]) -> Tensor[(14, 2, 7), bool] {
  %628 = cast(%var_5410, dtype="bool") /* ty=Tensor[(14, 2, 7), bool] */;
  %629 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(14, 2, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 2, 7), bool] */, dtype="bool") /* ty=Tensor[(14, 2, 7), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%630, %631) /* ty=Tensor[(14, 2, 7), bool] */
}

def @func_9630() -> (Tensor[(14, 7, 2), int64],) {
  %632 = @func_802() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %633 = %632.0;
  (%633,)
}

def @func_2723() -> (Tensor[(3, 12, 5), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float32]) {
  @func_2721() /* ty=(Tensor[(3, 12, 5), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float32]) */
}

def @func_7385() -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) {
  %634 = @func_6093() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */;
  %635 = @func_2193() /* ty=Tensor[(14, 7, 2), bool] */;
  %636 = %634.3;
  (%635, %636)
}

def @func_10372(%var_10365: Tensor[(858), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(13, 11, 6), float64], Tensor[(858), float64], Tensor[(14, 7, 2), int64]) {
  %637 = @func_2632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %638 = cast(%var_10365, dtype="float64") /* ty=Tensor[(858), float64] */;
  %639 = reshape(%638, newshape=[13, 11, 6]) /* ty=Tensor[(13, 11, 6), float64] */;
  %640 = @func_752(%639) /* ty=(Tensor[(13, 11, 6), float64], Tensor[(14, 7, 2), int64]) */;
  %641 = @func_6430() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %642 = %637.1;
  %643 = @func_1865() /* ty=Tensor[(14, 7, 2), float64] */;
  %644 = %640.0;
  %645 = %641.0;
  (%642, %643, %644, %var_10365, %645)
}

def @func_10446(%var_10441: Tensor[(270), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(270), float64]) {
  %646 = @func_10094() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %647 = cast(%var_10441, dtype="float64") /* ty=Tensor[(270), float64] */;
  %648 = reshape(%647, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %649 = @func_7498(%648) /* ty=(Tensor[(14, 7, 2), bool], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(6, 3, 15), float64], Tensor[(270), float64]) */;
  %650 = %646.2;
  %651 = %649.0;
  (%650, %651, %var_10441)
}

def @func_8261() -> Tensor[(14, 7, 2), int64] {
  %653 = fn () -> Tensor[(14, 7, 2), int64] {
    %652 = @func_6093() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */;
    %652.3
  };
  %653() /* ty=Tensor[(14, 7, 2), int64] */
}

def @func_7244() -> Tensor[(14, 7, 2), bool] {
  %655 = fn () -> Tensor[(14, 7, 2), bool] {
    %654 = @func_2369() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
    %654.0
  };
  %655() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_8680() -> (Tensor[(14, 7, 2), float64],) {
  %658 = fn () -> (Tensor[(14, 7, 2), float64],) {
    %656 = @func_1520() /* ty=(Tensor[(14, 7, 2), float64],) */;
    %657 = %656.0;
    (%657,)
  };
  %658() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_285() -> (Tensor[(14, 7, 2), int64],) {
  %659 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %660 = %659.0;
  (%660,)
}

def @func_1776(%var_1772: Tensor[(3, 12, 5), float64]) -> (Tensor[(3, 12, 5), float64],) {
  %661 = cast(%var_1772, dtype="float64") /* ty=Tensor[(3, 12, 5), float64] */;
  %662 = erf(%661) /* ty=Tensor[(3, 12, 5), float64] */;
  (%662,)
}

def @func_5005() -> (Tensor[(14, 7, 2), float64], Tensor[(1056), float64], Tensor[(14, 7, 2), int64]) {
  @func_5003() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(1056), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_790() -> (Tensor[(14, 7, 2), int64],) {
  %663 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %664 = %663.0;
  (%664,)
}

def @func_5137() -> Tensor[(14, 7, 2), int64] {
  %665 = @func_3684() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %665.1
}

def @func_8379() -> (Tensor[(14, 7, 2), int64], Tensor[(2, 8, 3), float64], Tensor[(48), float64]) {
  @func_8377() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 8, 3), float64], Tensor[(48), float64]) */
}

def @func_5419(%var_5417: Tensor[(14, 2, 7), bool]) -> Tensor[(14, 2, 7), bool] {
  @func_5416(%var_5417) /* ty=Tensor[(14, 2, 7), bool] */
}

def @func_5583() -> (Tensor[(14, 7, 2), bool], Tensor[(13, 11, 6), float64], Tensor[(858), float64]) {
  %671 = fn () -> (Tensor[(14, 7, 2), bool], Tensor[(13, 11, 6), float64], Tensor[(858), float64]) {
    %666 = cast(meta[relay.Constant][33] /* ty=Tensor[(858), float64] */, dtype="float64") /* ty=Tensor[(858), float64] */;
    %667 = reshape(%666, newshape=[13, 11, 6]) /* ty=Tensor[(13, 11, 6), float64] */;
    %668 = @func_752(%667) /* ty=(Tensor[(13, 11, 6), float64], Tensor[(14, 7, 2), int64]) */;
    %669 = @func_1422() /* ty=Tensor[(14, 7, 2), bool] */;
    %670 = %668.0;
    (%669, %670, meta[relay.Constant][33] /* ty=Tensor[(858), float64] */)
  };
  %671() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(13, 11, 6), float64], Tensor[(858), float64]) */
}

def @func_8106(%var_8104: Tensor[(6, 1, 10), float64], %var_8105: Tensor[(6, 16, 10), float32]) -> (Tensor[(6, 13, 10), uint8], Tensor[(6, 16, 10), float64]) {
  %682 = fn (%var_8075: Tensor[(6, 1, 10), float64], %var_8097: Tensor[(6, 16, 10), float32]) -> (Tensor[(6, 13, 10), uint8], Tensor[(6, 16, 10), float64]) {
    %672 = cast(%var_8075, dtype="uint8") /* ty=Tensor[(6, 1, 10), uint8] */;
    %673 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 13, 10), float64] */, dtype="uint8") /* ty=Tensor[(6, 13, 10), uint8] */;
    %674 = cast(%var_8075, dtype="float64") /* ty=Tensor[(6, 1, 10), float64] */;
    %675 = asinh(%674) /* ty=Tensor[(6, 1, 10), float64] */;
    %676 = cast(%675, dtype="float32") /* ty=Tensor[(6, 1, 10), float32] */;
    %677 = atan(%676) /* ty=Tensor[(6, 1, 10), float32] */;
    %678 = cast(%677, dtype="float64") /* ty=Tensor[(6, 1, 10), float64] */;
    %679 = cast(%var_8097, dtype="float64") /* ty=Tensor[(6, 16, 10), float64] */;
    %680 = bitwise_xor(%672, %673) /* ty=Tensor[(6, 13, 10), uint8] */;
    %681 = mod(%678, %679) /* ty=Tensor[(6, 16, 10), float64] */;
    (%680, %681)
  };
  %682(%var_8104, %var_8105) /* ty=(Tensor[(6, 13, 10), uint8], Tensor[(6, 16, 10), float64]) */
}

def @func_4627(%var_4623: float32, %var_4624: Tensor[(1, 3, 11), float32], %var_4625: Tensor[(13, 3, 11), float32], %var_4626: Tensor[(5, 56), float32]) -> (Tensor[(1, 3, 11), bool], Tensor[(13, 3, 11), uint64], Tensor[(14, 7, 2), int64], Tensor[(5, 56), float32]) {
  @func_4621(%var_4623, %var_4624, %var_4625, %var_4626) /* ty=(Tensor[(1, 3, 11), bool], Tensor[(13, 3, 11), uint64], Tensor[(14, 7, 2), int64], Tensor[(5, 56), float32]) */
}

def @func_8871() -> (Tensor[(14, 7, 2), int64],) {
  %685 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %683 = @func_2957() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) */;
    %684 = %683.1;
    (%684,)
  };
  %685() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_9838() -> (Tensor[(14, 7, 2), float64],) {
  %686 = @func_588() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
  %687 = %686.0;
  (%687,)
}

def @func_2858(%var_2828: Tensor[(1, 280), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64]) {
  %688 = @func_978() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %689 = cast(%var_2828, dtype="float32") /* ty=Tensor[(1, 280), float32] */;
  %690 = reshape(%689, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float32] */;
  %691 = @func_344(%690) /* ty=(Tensor[(2, 14, 10), float32],) */;
  %692 = %691.0;
  %693 = cast(%692, dtype="float32") /* ty=Tensor[(2, 14, 10), float32] */;
  %694 = tan(%693) /* ty=Tensor[(2, 14, 10), float32] */;
  %695 = cast(%694, dtype="int64") /* ty=Tensor[(2, 14, 10), int64] */;
  %696 = shape_of(%var_2828, dtype="int32") /* ty=Tensor[(2), int32] */;
  %697 = cast(%var_2828, dtype="int64") /* ty=Tensor[(1, 280), int64] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %699 = %688.0;
  %700 = left_shift(%697, %698) /* ty=Tensor[(?, 280), int64] */;
  (%699, %700)
}

def @func_5789() -> (Tensor[(14, 7, 2), bool], Tensor[(?, 280), int64], Tensor[(280), float32]) {
  @func_5787() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(?, 280), int64], Tensor[(280), float32]) */
}

def @func_7174(%var_7172: Tensor[(16, 9, 7), float64], %var_7173: Tensor[(16, 9, 7), float64]) -> (Tensor[(16, 9, 7), float64], Tensor[(16, 9, 7), int16], Tensor[(14, 7, 2), float64], Tensor[(1950), float32]) {
  %712 = fn (%var_7148: Tensor[(16, 9, 7), float64], %var_7152: Tensor[(16, 9, 7), float64]) -> (Tensor[(16, 9, 7), float64], Tensor[(16, 9, 7), int16], Tensor[(14, 7, 2), float64], Tensor[(1950), float32]) {
    %701 = cast(%var_7148, dtype="float64") /* ty=Tensor[(16, 9, 7), float64] */;
    %702 = cast(%var_7152, dtype="int16") /* ty=Tensor[(16, 9, 7), int16] */;
    %703 = shape_of(%var_7148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %704 = cast(%var_7148, dtype="int16") /* ty=Tensor[(16, 9, 7), int16] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %706 = cast(meta[relay.Constant][35] /* ty=Tensor[(1950), float32] */, dtype="float32") /* ty=Tensor[(1950), float32] */;
    %707 = reshape(%706, newshape=[1950]) /* ty=Tensor[(1950), float32] */;
    %708 = @func_1501(%707) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) */;
    %709 = cos(%701) /* ty=Tensor[(16, 9, 7), float64] */;
    %710 = left_shift(%704, %705) /* ty=Tensor[(16, 9, 7), int16] */;
    %711 = %708.1;
    (%709, %710, %711, meta[relay.Constant][35] /* ty=Tensor[(1950), float32] */)
  };
  %712(%var_7172, %var_7173) /* ty=(Tensor[(16, 9, 7), float64], Tensor[(16, 9, 7), int16], Tensor[(14, 7, 2), float64], Tensor[(1950), float32]) */
}

def @func_7306() -> (Tensor[(2, 14, 10), float32], Tensor[(14, 7, 2), float64]) {
  %713 = @func_5557() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(2, 14, 10), float32], Tensor[(14, 7, 2), int64]) */;
  %714 = @func_1723() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48), float64], Tensor[(14, 7, 2), float64]) */;
  %715 = %713.2;
  %716 = %714.4;
  (%715, %716)
}

def @func_802() -> (Tensor[(14, 7, 2), int64],) {
  %717 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %718 = %717.0;
  (%718,)
}

def @func_10094() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %719 = @func_1367() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %720 = @func_8044() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) */;
  %721 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  %722 = %719.0;
  %723 = %720.1;
  (%721, %722, %723)
}

def @func_10138() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  @func_10136() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */
}

def @func_901(%var_899: Tensor[(14, 7, 2), float64]) -> (Tensor[(14, 7, 2), bool], Tensor[(2, 10, 12), float32], Tensor[(2, 120), float32]) {
  @func_898(%var_899) /* ty=(Tensor[(14, 7, 2), bool], Tensor[(2, 10, 12), float32], Tensor[(2, 120), float32]) */
}

def @func_3994() -> Tensor[(14, 7, 2), int64] {
  %725 = fn () -> Tensor[(14, 7, 2), int64] {
    %724 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %724.0
  };
  %725() /* ty=Tensor[(14, 7, 2), int64] */
}

def @func_2633() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %730 = fn () -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
    %726 = @func_2526() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32], Tensor[(14, 7, 2), float64]) */;
    %727 = @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
    %728 = %726.1;
    %729 = %727.0;
    (%728, %729)
  };
  %730() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_5787() -> (Tensor[(14, 7, 2), bool], Tensor[(?, 280), int64], Tensor[(280), float32]) {
  %731 = @func_5458() /* ty=(Tensor[(14, 7, 2), bool],) */;
  %732 = cast(meta[relay.Constant][36] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %733 = reshape(%732, newshape=[280]) /* ty=Tensor[(280), float32] */;
  %734 = @func_3548(%733) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64], Tensor[(280), float32]) */;
  %735 = %731.0;
  %736 = %734.1;
  (%735, %736, meta[relay.Constant][36] /* ty=Tensor[(280), float32] */)
}

def @func_4439() -> (Tensor[(14, 7, 2), int64],) {
  %739 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %737 = @func_3012() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %738 = %737.0;
    (%738,)
  };
  %739() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_5852() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool]) {
  @func_5850() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool]) */
}

def @func_5472() -> Tensor[(14, 7, 2), int64] {
  @func_5470() /* ty=Tensor[(14, 7, 2), int64] */
}

def @func_9921() -> Tensor[(14, 7, 2), float64] {
  %740 = @func_3469() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %740.0
}

def @func_1788() -> (Tensor[(14, 7, 2), int64],) {
  %743 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %741 = @func_978() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %742 = %741.0;
    (%742,)
  };
  %743() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_9923() -> Tensor[(14, 7, 2), float64] {
  @func_9921() /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_10411() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(48), float64]) {
  %744 = @func_9398() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %745 = cast(meta[relay.Constant][37] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %746 = reshape(%745, newshape=[48, 1]) /* ty=Tensor[(48, 1), float64] */;
  %747 = @func_6182(%746) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48, 1), float64]) */;
  %748 = %744.0;
  %749 = %747.0;
  (%748, %749, meta[relay.Constant][37] /* ty=Tensor[(48), float64] */)
}

def @func_8792(%var_8790: Tensor[(4, 5, 15), int16], %var_8791: Tensor[(4, 5, 15), int16]) -> (Tensor[(4, 5, 15), bool], Tensor[(4, 5, 15), float32]) {
  @func_8788(%var_8790, %var_8791) /* ty=(Tensor[(4, 5, 15), bool], Tensor[(4, 5, 15), float32]) */
}

def @func_6184(%var_6183: Tensor[(48, 1), float64]) -> (Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48, 1), float64]) {
  %754 = fn (%var_6173: Tensor[(48, 1), float64]) -> (Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48, 1), float64]) {
    %750 = cast(%var_6173, dtype="float64") /* ty=Tensor[(48, 1), float64] */;
    %751 = reshape(%750, newshape=[2, 8, 3]) /* ty=Tensor[(2, 8, 3), float64] */;
    %752 = @func_927() /* ty=Tensor[(14, 7, 2), float64] */;
    %753 = @func_186(%751) /* ty=Tensor[(2, 8, 3), float64] */;
    (%752, %753, %var_6173)
  };
  %754(%var_6183) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(2, 8, 3), float64], Tensor[(48, 1), float64]) */
}

def @func_2898(%var_2897: Tensor[(14, 7, 2), bool]) -> (Tensor[(14, 7, 2), uint64], Tensor[(14, 7, 2), int64]) {
  %762 = fn (%var_2878: Tensor[(14, 7, 2), bool]) -> (Tensor[(14, 7, 2), uint64], Tensor[(14, 7, 2), int64]) {
    %755 = @func_1422() /* ty=Tensor[(14, 7, 2), bool] */;
    %756 = cast(%var_2878, dtype="uint64") /* ty=Tensor[(14, 7, 2), uint64] */;
    %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
    %758 = cast(%755, dtype="uint64") /* ty=Tensor[(14, 7, 2), uint64] */;
    %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %760 = bitwise_and(%758, %759) /* ty=Tensor[(14, 7, 2), uint64] */;
    %761 = @func_2683() /* ty=Tensor[(14, 7, 2), int64] */;
    (%760, %761)
  };
  %762(%var_2897) /* ty=(Tensor[(14, 7, 2), uint64], Tensor[(14, 7, 2), int64]) */
}

def @func_7013(%var_7010: Tensor[(585), float64], %var_7011: Tensor[(1950), float32], %var_7012: Tensor[(270), float64]) -> (Tensor[(168), int16], Tensor[(14, 7, 2), int64], Tensor[(9, 9, 4), float32], Tensor[(5, 270, 5), int16], Tensor[(25), float64], Tensor[(1950), float32], Tensor[(585), float64], Tensor[(585), float64], Tensor[(6, 3, 15), float64], Tensor[(270), float64]) {
  %797 = fn (%var_6935: Tensor[(585), float64], %var_6973: Tensor[(1950), float32], %var_7002: Tensor[(270), float64]) -> (Tensor[(168), int16], Tensor[(14, 7, 2), int64], Tensor[(9, 9, 4), float32], Tensor[(5, 270, 5), int16], Tensor[(25), float64], Tensor[(1950), float32], Tensor[(585), float64], Tensor[(585), float64], Tensor[(6, 3, 15), float64], Tensor[(270), float64]) {
    %763 = @func_5446() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(168), int16]) */;
    %764 = @func_3377() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */;
    %765 = @func_5502() /* ty=(Tensor[(9, 9, 4), float32],) */;
    %766 = cast(meta[relay.Constant][38] /* ty=Tensor[(25), float64] */, dtype="float64") /* ty=Tensor[(25), float64] */;
    %767 = cast(%var_6973, dtype="float32") /* ty=Tensor[(1950), float32] */;
    %768 = reshape(%766, newshape=[5, 1, 5]) /* ty=Tensor[(5, 1, 5), float64] */;
    %769 = reshape(%767, newshape=[1950]) /* ty=Tensor[(1950), float32] */;
    %770 = @func_5343(%768, %769) /* ty=(Tensor[(5, 1, 5), float64], Tensor[(14, 7, 2), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(6, 3, 15), float64], Tensor[(5, 270, 5), int16], Tensor[(270, 1), float64]) */;
    %771 = cast(%var_6935, dtype="float64") /* ty=Tensor[(585), float64] */;
    %772 = erf(%771) /* ty=Tensor[(585), float64] */;
    %773 = cast(%var_6935, dtype="float64") /* ty=Tensor[(585), float64] */;
    %774 = reshape(%773, newshape=[15, 3, 13]) /* ty=Tensor[(15, 3, 13), float64] */;
    %775 = @func_3312(%774) /* ty=(Tensor[(15, 3, 13), float64], Tensor[(14, 7, 2), float32]) */;
    %776 = %775.0;
    %777 = cast(%776, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
    %778 = shape_of(%772, dtype="int32") /* ty=Tensor[(1), int32] */;
    %779 = cast(%772, dtype="float64") /* ty=Tensor[(585), float64] */;
    %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?), float64] */;
    %781 = cast(%776, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
    %782 = shape_of(%var_6935, dtype="int32") /* ty=Tensor[(1), int32] */;
    %783 = cast(%var_6935, dtype="float64") /* ty=Tensor[(585), float64] */;
    %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?), float64] */;
    %785 = floor_mod(%783, %784) /* ty=Tensor[(585), float64] */;
    %786 = cast(%785, dtype="float64") /* ty=Tensor[(585), float64] */;
    %787 = cast(%var_7002, dtype="float64") /* ty=Tensor[(270), float64] */;
    %788 = reshape(%787, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), float64] */;
    %789 = @func_3278(%788) /* ty=(Tensor[(6, 3, 15), float64],) */;
    %790 = %763.2;
    %791 = %764.0;
    %792 = %765.0;
    %793 = %770.6;
    %794 = power(%779, %780) /* ty=Tensor[(585), float64] */;
    %795 = log10(%786) /* ty=Tensor[(585), float64] */;
    %796 = %789.0;
    (%790, %791, %792, %793, meta[relay.Constant][38] /* ty=Tensor[(25), float64] */, %var_6973, %794, %795, %796, %var_7002)
  };
  %797(%var_7010, %var_7011, %var_7012) /* ty=(Tensor[(168), int16], Tensor[(14, 7, 2), int64], Tensor[(9, 9, 4), float32], Tensor[(5, 270, 5), int16], Tensor[(25), float64], Tensor[(1950), float32], Tensor[(585), float64], Tensor[(585), float64], Tensor[(6, 3, 15), float64], Tensor[(270), float64]) */
}

def @func_9678() -> (Tensor[(14, 7, 2), int64],) {
  %800 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %798 = @func_6124() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %799 = %798.0;
    (%799,)
  };
  %800() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_3775(%var_3757: Tensor[(2, 8, 10), float32], %var_3770: Tensor[(132), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(2, 8, 10), float32], Tensor[(1, 12, 11), float32], Tensor[(132), float32]) {
  %801 = @func_2783() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %802 = cast(%var_3757, dtype="float32") /* ty=Tensor[(2, 8, 10), float32] */;
  %803 = sinh(%802) /* ty=Tensor[(2, 8, 10), float32] */;
  %804 = cast(%803, dtype="float32") /* ty=Tensor[(2, 8, 10), float32] */;
  %805 = cast(%var_3770, dtype="float32") /* ty=Tensor[(132), float32] */;
  %806 = reshape(%805, newshape=[1, 12, 11]) /* ty=Tensor[(1, 12, 11), float32] */;
  %807 = %801.1;
  %808 = sin(%804) /* ty=Tensor[(2, 8, 10), float32] */;
  %809 = @func_2755(%806) /* ty=Tensor[(1, 12, 11), float32] */;
  (%807, %808, %809, %var_3770)
}

def @func_9973() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %810 = @func_3904() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %811 = @func_9677() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %812 = %810.0;
  %813 = %811.0;
  (%812, %813)
}

def @func_2683() -> Tensor[(14, 7, 2), int64] {
  %814 = @func_978() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %814.0
}

def @func_2289() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %815 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %816 = @func_978() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %817 = %815.0;
  %818 = %816.0;
  (%817, %818)
}

def @func_5504() -> (Tensor[(9, 9, 4), float32],) {
  @func_5502() /* ty=(Tensor[(9, 9, 4), float32],) */
}

def @func_7893() -> (Tensor[(14, 7, 2), uint16],) {
  %820 = fn () -> (Tensor[(14, 7, 2), uint16],) {
    %819 = @func_6717() /* ty=Tensor[(14, 7, 2), uint16] */;
    (%819,)
  };
  %820() /* ty=(Tensor[(14, 7, 2), uint16],) */
}

def @func_9657() -> (Tensor[(14, 7, 2), float64],) {
  %823 = fn () -> (Tensor[(14, 7, 2), float64],) {
    %821 = @func_6093() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */;
    %822 = %821.4;
    (%822,)
  };
  %823() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_344(%var_320: Tensor[(2, 14, 10), float32]) -> (Tensor[(2, 14, 10), float32],) {
  %824 = cast(%var_320, dtype="float32") /* ty=Tensor[(2, 14, 10), float32] */;
  %825 = log(%824) /* ty=Tensor[(2, 14, 10), float32] */;
  (%825,)
}

def @func_4134() -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %829 = fn () -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
    %826 = @func_2193() /* ty=Tensor[(14, 7, 2), bool] */;
    %827 = @func_1428() /* ty=Tensor[(14, 7, 2), int64] */;
    %828 = @func_3211() /* ty=Tensor[(14, 7, 2), float64] */;
    (%826, %827, %828)
  };
  %829() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */
}

def @func_824(%var_822: Tensor[(2, 10, 12), float32]) -> Tensor[(2, 10, 12), float32] {
  @func_821(%var_822) /* ty=Tensor[(2, 10, 12), float32] */
}

def @func_4293(%var_4290: Tensor[(624), float32], %var_4291: Tensor[(624), float32], %var_4292: float64) -> (Tensor[(14, 7, 2), float64], Tensor[(16, 3, 13), float32], Tensor[(624), int8], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], float64, Tensor[(504), float64]) {
  @func_4288(%var_4290, %var_4291, %var_4292) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(16, 3, 13), float32], Tensor[(624), int8], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], float64, Tensor[(504), float64]) */
}

def @func_8788(%var_8744: Tensor[(4, 5, 15), int16], %var_8745: Tensor[(4, 5, 15), int16]) -> (Tensor[(4, 5, 15), bool], Tensor[(4, 5, 15), float32]) {
  %830 = cast(%var_8745, dtype="bool") /* ty=Tensor[(4, 5, 15), bool] */;
  %831 = shape_of(%var_8744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%var_8744, dtype="bool") /* ty=Tensor[(4, 5, 15), bool] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %834 = cast(%var_8744, dtype="float32") /* ty=Tensor[(4, 5, 15), float32] */;
  %835 = greater(%832, %833) /* ty=Tensor[(4, 5, 15), bool] */;
  %836 = tan(%834) /* ty=Tensor[(4, 5, 15), float32] */;
  (%835, %836)
}

def @func_1867() -> Tensor[(14, 7, 2), float64] {
  @func_1865() /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_2721() -> (Tensor[(3, 12, 5), float64], Tensor[(180), float64], Tensor[(14, 7, 2), float32]) {
  %837 = cast(meta[relay.Constant][39] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %838 = reshape(%837, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), float64] */;
  %839 = @func_1776(%838) /* ty=(Tensor[(3, 12, 5), float64],) */;
  %840 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %841 = %840.0;
  %842 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 7, 2), int64] */, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %843 = shape_of(%841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %844 = cast(%841, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %846 = %839.0;
  %847 = power(%844, %845) /* ty=Tensor[(14, 7, 2), float32] */;
  (%846, meta[relay.Constant][39] /* ty=Tensor[(180), float64] */, %847)
}

def @func_872() -> Tensor[(14, 7, 2), bool] {
  %848 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %849 = %848.0;
  %850 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %851 = %850.0;
  %852 = cast(%851, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %853 = shape_of(%849, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%849, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%854, %855) /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_2999(%var_2977: float64, %var_2978: Tensor[(9, 14, 4), float64]) -> (Tensor[(9, 14, 4), float64], Tensor[(14, 7, 2), float64]) {
  %856 = cast(%var_2977, dtype="float64") /* ty=float64 */;
  %857 = cast(%var_2978, dtype="float64") /* ty=Tensor[(9, 14, 4), float64] */;
  %858 = @func_1309() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %859 = power(%856, %857) /* ty=Tensor[(9, 14, 4), float64] */;
  %860 = %858.0;
  (%859, %860)
}

def @func_9280() -> (Tensor[(14, 7, 2), float64],) {
  @func_9278() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_3550(%var_3549: Tensor[(280), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64], Tensor[(280), float32]) {
  %867 = fn (%var_3542: Tensor[(280), float32]) -> (Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64], Tensor[(280), float32]) {
    %861 = @func_3426() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %862 = cast(%var_3542, dtype="float32") /* ty=Tensor[(280), float32] */;
    %863 = reshape(%862, newshape=[1, 280]) /* ty=Tensor[(1, 280), float32] */;
    %864 = @func_2858(%863) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64]) */;
    %865 = %861.0;
    %866 = %864.1;
    (%865, %866, %var_3542)
  };
  %867(%var_3549) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(?, 280), int64], Tensor[(280), float32]) */
}

def @func_4472() -> Tensor[(14, 7, 2), int64] {
  %869 = fn () -> Tensor[(14, 7, 2), int64] {
    %868 = @func_4422() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %868.0
  };
  %869() /* ty=Tensor[(14, 7, 2), int64] */
}

def @func_7978(%var_7974: Tensor[(14, 7, 2), bool], %var_7975: Tensor[(585), float64], %var_7976: Tensor[(1, 1950), float32], %var_7977: Tensor[(270), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(6, 3, 15), float64], Tensor[(585), float64], Tensor[(1, 1950), float32], Tensor[(270), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %893 = fn (%var_7928: Tensor[(14, 7, 2), bool], %var_7941: Tensor[(585), float64], %var_7942: Tensor[(1, 1950), float32], %var_7943: Tensor[(270), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(6, 3, 15), float64], Tensor[(585), float64], Tensor[(1, 1950), float32], Tensor[(270), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
    %870 = @func_4367() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
    %871 = @func_2783() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
    %872 = @func_5787() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(?, 280), int64], Tensor[(280), float32]) */;
    %873 = %872.0;
    %874 = cast(%var_7928, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
    %875 = shape_of(%873, dtype="int32") /* ty=Tensor[(3), int32] */;
    %876 = cast(%873, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
    %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %878 = cast(%var_7941, dtype="float64") /* ty=Tensor[(585), float64] */;
    %879 = cast(%var_7942, dtype="float32") /* ty=Tensor[(1, 1950), float32] */;
    %880 = cast(%var_7943, dtype="float64") /* ty=Tensor[(270), float64] */;
    %881 = reshape(%878, newshape=[585]) /* ty=Tensor[(585), float64] */;
    %882 = reshape(%879, newshape=[1950]) /* ty=Tensor[(1950), float32] */;
    %883 = reshape(%880, newshape=[270]) /* ty=Tensor[(270), float64] */;
    %884 = @func_7009(%881, %882, %883) /* ty=(Tensor[(168), int16], Tensor[(14, 7, 2), int64], Tensor[(9, 9, 4), float32], Tensor[(5, 270, 5), int16], Tensor[(25), float64], Tensor[(1950), float32], Tensor[(585), float64], Tensor[(585), float64], Tensor[(6, 3, 15), float64], Tensor[(270), float64]) */;
    %885 = @func_3012() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %886 = @func_2369() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
    %887 = %870.2;
    %888 = %871.0;
    %889 = logical_and(%876, %877) /* ty=Tensor[(14, 7, 2), bool] */;
    %890 = %884.8;
    %891 = %885.0;
    %892 = %886.1;
    (%887, %888, %889, %890, %var_7941, %var_7942, %var_7943, %891, %892)
  };
  %893(%var_7974, %var_7975, %var_7976, %var_7977) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(6, 3, 15), float64], Tensor[(585), float64], Tensor[(1, 1950), float32], Tensor[(270), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */
}

def @func_9278() -> (Tensor[(14, 7, 2), float64],) {
  %894 = @func_3211() /* ty=Tensor[(14, 7, 2), float64] */;
  (%894,)
}

def @func_6002() -> Tensor[(14, 7, 2), float64] {
  @func_6000() /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_2339() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %903 = fn () -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
    %895 = @func_1195() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %896 = @func_1047() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
    %897 = @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
    %898 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
    %899 = %895.0;
    %900 = %896.1;
    %901 = @func_2151() /* ty=Tensor[(14, 7, 2), int64] */;
    %902 = %897.1;
    (%898, %899, %900, %901, %902)
  };
  %903() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */
}

def @func_5047() -> (Tensor[(14, 7, 2), int64],) {
  @func_5045() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_2959() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) {
  @func_2957() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32]) */
}

def @func_3212() -> Tensor[(14, 7, 2), float64] {
  %904 = fn () -> Tensor[(14, 7, 2), float64] {
    @func_59() /* ty=Tensor[(14, 7, 2), float64] */
  };
  %904() /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_6367() -> (Tensor[(14, 7, 2), int64],) {
  @func_6365() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_3014() -> (Tensor[(14, 7, 2), int64],) {
  @func_3012() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_5139() -> Tensor[(14, 7, 2), int64] {
  @func_5137() /* ty=Tensor[(14, 7, 2), int64] */
}

def @func_7140() -> (Tensor[(5, 3, 3), uint64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) {
  @func_7138() /* ty=(Tensor[(5, 3, 3), uint64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) */
}

def @func_9467() -> Tensor[(14, 7, 2), bool] {
  %905 = fn () -> Tensor[(14, 7, 2), bool] {
    @func_7243() /* ty=Tensor[(14, 7, 2), bool] */
  };
  %905() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_7660(%var_7657: Tensor[(5, 9, 5), int8], %var_7658: Tensor[(5, 9, 5), int8], %var_7659: Tensor[(5, 9, 5), int8]) -> (Tensor[(5, 9, 5), int8], Tensor[(5, 9, 5), bool], Tensor[(14, 7, 2), float64]) {
  @func_7655(%var_7657, %var_7658, %var_7659) /* ty=(Tensor[(5, 9, 5), int8], Tensor[(5, 9, 5), bool], Tensor[(14, 7, 2), float64]) */
}

def @func_10136() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %906 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %907 = @func_9356() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 4, 16), float32]) */;
  %908 = %906.0;
  %909 = @func_3993() /* ty=Tensor[(14, 7, 2), int64] */;
  %910 = %907.0;
  (%908, %909, %910)
}

def @func_9554() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %918 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
    %911 = @func_6365() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %912 = %911.0;
    %913 = cast(%912, dtype="int64") /* ty=Tensor[(14, 7, 2), int64] */;
    %914 = reshape(%913, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), int64] */;
    %915 = @func_1089(%914) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), uint16], Tensor[(14, 7, 2), float64]) */;
    %916 = %915.0;
    %917 = @func_927() /* ty=Tensor[(14, 7, 2), float64] */;
    (%912, %916, %917)
  };
  %918() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */
}

def @func_1943(%var_1941: float32, %var_1942: Tensor[(11, 6, 5), float32]) -> (Tensor[(11, 6, 5), float32], Tensor[(14, 7, 2), int64]) {
  %924 = fn (%var_1928: float32, %var_1929: Tensor[(11, 6, 5), float32]) -> (Tensor[(11, 6, 5), float32], Tensor[(14, 7, 2), int64]) {
    %919 = cast(%var_1928, dtype="float32") /* ty=float32 */;
    %920 = cast(%var_1929, dtype="float32") /* ty=Tensor[(11, 6, 5), float32] */;
    %921 = @func_1195() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %922 = divide(%919, %920) /* ty=Tensor[(11, 6, 5), float32] */;
    %923 = %921.0;
    (%922, %923)
  };
  %924(%var_1941, %var_1942) /* ty=(Tensor[(11, 6, 5), float32], Tensor[(14, 7, 2), int64]) */
}

def @func_10375(%var_10373: Tensor[(858), float64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(13, 11, 6), float64], Tensor[(858), float64], Tensor[(14, 7, 2), int64]) {
  @func_10372(%var_10373) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(13, 11, 6), float64], Tensor[(858), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_5448() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(168), int16]) {
  @func_5446() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(168), int16]) */
}

def @func_3012() -> (Tensor[(14, 7, 2), int64],) {
  %925 = @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %926 = %925.0;
  (%926,)
}

def @func_5634() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) {
  @func_5632() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */
}

def @func_1815() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) {
  %930 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) {
    %927 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %928 = %927.0;
    %929 = @func_872() /* ty=Tensor[(14, 7, 2), bool] */;
    (%928, %929)
  };
  %930() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) */
}

def @func_9081(%var_9079: Tensor[(15, 13, 12), float32], %var_9080: Tensor[(15, 13, 12), float32]) -> Tensor[(15, 13, 12), float32] {
  %935 = fn (%var_9070: Tensor[(15, 13, 12), float32], %var_9071: Tensor[(15, 13, 12), float32]) -> Tensor[(15, 13, 12), float32] {
    %931 = cast(%var_9071, dtype="float32") /* ty=Tensor[(15, 13, 12), float32] */;
    %932 = shape_of(%var_9070, dtype="int32") /* ty=Tensor[(3), int32] */;
    %933 = cast(%var_9070, dtype="float32") /* ty=Tensor[(15, 13, 12), float32] */;
    %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%933, %934) /* ty=Tensor[(15, 13, 12), float32] */
  };
  %935(%var_9079, %var_9080) /* ty=Tensor[(15, 13, 12), float32] */
}

def @func_3461() -> (Tensor[(14, 7, 2), int64],) {
  %938 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %936 = @func_2135() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %937 = %936.0;
    (%937,)
  };
  %938() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_8448() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %951 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
    %939 = @func_2338() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
    %940 = @func_5003() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(1056), float64], Tensor[(14, 7, 2), int64]) */;
    %941 = %939.3;
    %942 = cast(%941, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
    %943 = reshape(%942, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float32] */;
    %944 = @func_458(%943) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
    %945 = %944.4;
    %946 = cast(%945, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
    %947 = @func_6430() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %948 = %940.0;
    %949 = acosh(%946) /* ty=Tensor[(14, 7, 2), float64] */;
    %950 = %947.0;
    (%941, %948, %949, %950)
  };
  %951() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_8045() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) {
  %958 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) {
    %952 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %953 = @func_6430() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %954 = @func_5458() /* ty=(Tensor[(14, 7, 2), bool],) */;
    %955 = %952.0;
    %956 = %953.0;
    %957 = %954.0;
    (%955, %956, %957)
  };
  %958() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) */
}

def @func_6232() -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) {
  @func_6230() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) */
}

def @func_1310() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %965 = fn () -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
    %959 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
    %960 = %959.0;
    %961 = cast(%960, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
    %962 = reshape(%961, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float32] */;
    %963 = @func_458(%962) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
    %964 = %963.1;
    (%960, %964)
  };
  %965() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_10413() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(48), float64]) {
  @func_10411() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(48), float64]) */
}

def @func_8827() -> (Tensor[(14, 7, 2), float64],) {
  %968 = fn () -> (Tensor[(14, 7, 2), float64],) {
    %966 = @func_8447() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
    %967 = %966.1;
    (%967,)
  };
  %968() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_6358() -> (Tensor[(2, 4, 16), float32],) {
  %969 = @func_5866() /* ty=(Tensor[(2, 4, 16), float32],) */;
  %970 = %969.0;
  (%970,)
}

def @func_7907() -> (Tensor[(14, 7, 2), int64],) {
  %973 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %971 = @func_4438() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %972 = %971.0;
    (%972,)
  };
  %973() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_5558() -> (Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(2, 14, 10), float32], Tensor[(14, 7, 2), int64]) {
  %982 = fn () -> (Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(2, 14, 10), float32], Tensor[(14, 7, 2), int64]) {
    %974 = @func_2526() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32], Tensor[(14, 7, 2), float64]) */;
    %975 = @func_2609() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) */;
    %976 = @func_1129() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(2, 14, 10), float32], Tensor[(280), float32]) */;
    %977 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %978 = %974.1;
    %979 = %975.3;
    %980 = %976.2;
    %981 = %977.0;
    (%978, %979, %980, %981)
  };
  %982() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(1950), float32], Tensor[(2, 14, 10), float32], Tensor[(14, 7, 2), int64]) */
}

def @func_5867() -> (Tensor[(2, 4, 16), float32],) {
  %985 = fn () -> (Tensor[(2, 4, 16), float32],) {
    %983 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 4, 16), float32] */, dtype="float32") /* ty=Tensor[(2, 4, 16), float32] */;
    %984 = sin(%983) /* ty=Tensor[(2, 4, 16), float32] */;
    (%984,)
  };
  %985() /* ty=(Tensor[(2, 4, 16), float32],) */
}

def @func_874() -> Tensor[(14, 7, 2), bool] {
  @func_872() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_287() -> (Tensor[(14, 7, 2), int64],) {
  @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_3684() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %986 = @func_2369() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64]) */;
  %987 = %986.1;
  %988 = cast(%987, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  %989 = @func_1195() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %990 = asin(%988) /* ty=Tensor[(14, 7, 2), float64] */;
  %991 = %989.0;
  (%990, %991)
}

def @func_4944(%var_4942: uint64, %var_4943: Tensor[(5, 4, 2), uint64]) -> (Tensor[(5, 4, 2), uint64],) {
  @func_4940(%var_4942, %var_4943) /* ty=(Tensor[(5, 4, 2), uint64],) */
}

def @func_5261(%var_5236: Tensor[(10, 4), uint64]) -> (Tensor[(14, 7, 2), int64], Tensor[(5, 4, 2), uint64], uint64, Tensor[(10, 4), uint64], Tensor[(14, 7, 2), int64], Tensor[(6, 3, 15), float64], Tensor[(1, 270), float64]) {
  %992 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %993 = cast(meta[relay.Constant][42] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %994 = cast(%var_5236, dtype="uint64") /* ty=Tensor[(10, 4), uint64] */;
  %995 = reshape(%993, newshape=[]) /* ty=uint64 */;
  %996 = reshape(%994, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), uint64] */;
  %997 = @func_4940(%995, %996) /* ty=(Tensor[(5, 4, 2), uint64],) */;
  %998 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 270), float64] */, dtype="float64") /* ty=Tensor[(1, 270), float64] */;
  %999 = reshape(%998, newshape=[6, 3, 15]) /* ty=Tensor[(6, 3, 15), float64] */;
  %1000 = @func_3278(%999) /* ty=(Tensor[(6, 3, 15), float64],) */;
  %1001 = %992.0;
  %1002 = %997.0;
  %1003 = @func_2683() /* ty=Tensor[(14, 7, 2), int64] */;
  %1004 = %1000.0;
  (%1001, %1002, meta[relay.Constant][42] /* ty=uint64 */, %var_5236, %1003, %1004, meta[relay.Constant][43] /* ty=Tensor[(1, 270), float64] */)
}

def @func_10474() -> (Tensor[(14, 7, 2), int64],) {
  %1007 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %1005 = @func_790() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %1006 = %1005.0;
    (%1006,)
  };
  %1007() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_1865() -> Tensor[(14, 7, 2), float64] {
  %1008 = @func_243() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %1009 = %1008.0;
  %1010 = cast(%1009, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
  atan(%1010) /* ty=Tensor[(14, 7, 2), float64] */
}

def @func_3630() -> (Tensor[(14, 7, 2), int64],) {
  %1013 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %1011 = @func_2135() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %1012 = %1011.0;
    (%1012,)
  };
  %1013() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_4659() -> (Tensor[(14, 7, 2), bool],) {
  @func_4657() /* ty=(Tensor[(14, 7, 2), bool],) */
}

def @func_7387() -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) {
  @func_7385() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) */
}

def @func_8246() -> Tensor[(14, 7, 2), bool] {
  @func_872() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_1428() -> Tensor[(14, 7, 2), int64] {
  %1014 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %1014.0
}

def @func_1503(%var_1502: Tensor[(1950), float32]) -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) {
  %1024 = fn (%var_1492: Tensor[(1950), float32]) -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) {
    %1015 = @func_588() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64]) */;
    %1016 = @func_1422() /* ty=Tensor[(14, 7, 2), bool] */;
    %1017 = cast(%1016, dtype="float64") /* ty=Tensor[(14, 7, 2), float64] */;
    %1018 = cast(%var_1492, dtype="float32") /* ty=Tensor[(1950), float32] */;
    %1019 = reshape(%1018, newshape=[15, 13, 10]) /* ty=Tensor[(15, 13, 10), float32] */;
    %1020 = @func_1168(%1019) /* ty=(Tensor[(15, 13, 10), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
    %1021 = %1015.0;
    %1022 = log2(%1017) /* ty=Tensor[(14, 7, 2), float64] */;
    %1023 = %1020.1;
    (%1021, %1022, %1023, %var_1492)
  };
  %1024(%var_1502) /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(1950), float32]) */
}

def @func_6094() -> (Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %1034 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
    %1025 = @func_3460() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %1026 = cast(meta[relay.Constant][44] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
    %1027 = reshape(%1026, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float32] */;
    %1028 = @func_344(%1027) /* ty=(Tensor[(2, 14, 10), float32],) */;
    %1029 = @func_4422() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %1030 = %1025.0;
    %1031 = %1028.0;
    %1032 = %1029.0;
    %1033 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
    (%1030, %1031, meta[relay.Constant][44] /* ty=Tensor[(280), float32] */, %1032, %1033)
  };
  %1034() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(280), float32], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */
}

def @func_5665(%var_5663: float64) -> (Tensor[(3, 8, 14), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool]) {
  @func_5662(%var_5663) /* ty=(Tensor[(3, 8, 14), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool]) */
}

def @func_6556(%var_6555: Tensor[(130, 15), float64]) -> (Tensor[(130, 15), bool],) {
  %1044 = fn (%var_6549: Tensor[(130, 15), float64]) -> (Tensor[(130, 15), bool],) {
    %1035 = @func_2526() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), float64], Tensor[(130, 15), float32], Tensor[(14, 7, 2), float64]) */;
    %1036 = %1035.2;
    %1037 = cast(%1036, dtype="float64") /* ty=Tensor[(130, 15), float64] */;
    %1038 = asin(%1037) /* ty=Tensor[(130, 15), float64] */;
    %1039 = cast(%var_6549, dtype="bool") /* ty=Tensor[(130, 15), bool] */;
    %1040 = shape_of(%1038, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1041 = cast(%1038, dtype="bool") /* ty=Tensor[(130, 15), bool] */;
    %1042 = dyn.reshape(%1039, %1040, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %1043 = not_equal(%1041, %1042) /* ty=Tensor[(130, 15), bool] */;
    (%1043,)
  };
  %1044(%var_6555) /* ty=(Tensor[(130, 15), bool],) */
}

def @func_9840() -> (Tensor[(14, 7, 2), float64],) {
  @func_9838() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_6125() -> (Tensor[(14, 7, 2), int64],) {
  %1047 = fn () -> (Tensor[(14, 7, 2), int64],) {
    %1045 = @func_3684() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
    %1046 = %1045.1;
    (%1046,)
  };
  %1047() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_418(%var_416: Tensor[(14, 7, 2), float64], %var_417: Tensor[(280), float32]) -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(280), float32], Tensor[(14, 7, 2), int8]) {
  @func_414(%var_416, %var_417) /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(280), float32], Tensor[(14, 7, 2), int8]) */
}

def @func_3686() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  @func_3684() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_9781() -> Tensor[(14, 7, 2), bool] {
  %1049 = fn () -> Tensor[(14, 7, 2), bool] {
    %1048 = @func_8044() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool]) */;
    %1048.2
  };
  %1049() /* ty=Tensor[(14, 7, 2), bool] */
}

def @func_4310() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  %1050 = @func_2783() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %1051 = @func_978() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %1052 = %1050.1;
  %1053 = %1051.0;
  (%1052, %1053)
}

def @func_1430() -> Tensor[(14, 7, 2), int64] {
  @func_1428() /* ty=Tensor[(14, 7, 2), int64] */
}

def @func_10507() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
  %1060 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) {
    %1054 = @func_7385() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) */;
    %1055 = @func_7906() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %1056 = @func_10094() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
    %1057 = %1054.1;
    %1058 = %1055.0;
    %1059 = %1056.1;
    (%1057, %1058, %1059)
  };
  %1060() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64]) */
}

def @func_5458() -> (Tensor[(14, 7, 2), bool],) {
  %1061 = @func_2193() /* ty=Tensor[(14, 7, 2), bool] */;
  (%1061,)
}

def @func_9400() -> (Tensor[(14, 7, 2), int64],) {
  @func_9398() /* ty=(Tensor[(14, 7, 2), int64],) */
}

def @func_5470() -> Tensor[(14, 7, 2), int64] {
  %1062 = @func_1195() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %1062.0
}

def @func_8674() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(1, 12, 11), float32], Tensor[(160), float32], Tensor[(132), float32]) {
  %1073 = fn () -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(1, 12, 11), float32], Tensor[(160), float32], Tensor[(132), float32]) {
    %1063 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %1064 = @func_4422() /* ty=(Tensor[(14, 7, 2), int64],) */;
    %1065 = cast(meta[relay.Constant][45] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
    %1066 = cast(meta[relay.Constant][46] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
    %1067 = reshape(%1065, newshape=[2, 8, 10]) /* ty=Tensor[(2, 8, 10), float32] */;
    %1068 = reshape(%1066, newshape=[132]) /* ty=Tensor[(132), float32] */;
    %1069 = @func_3775(%1067, %1068) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 8, 10), float32], Tensor[(1, 12, 11), float32], Tensor[(132), float32]) */;
    %1070 = %1063.0;
    %1071 = %1064.0;
    %1072 = %1069.2;
    (%1070, %1071, %1072, meta[relay.Constant][45] /* ty=Tensor[(160), float32] */, meta[relay.Constant][46] /* ty=Tensor[(132), float32] */)
  };
  %1073() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(1, 12, 11), float32], Tensor[(160), float32], Tensor[(132), float32]) */
}

def @func_4312() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) {
  @func_4310() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */
}

def @func_4367() -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  %1074 = @func_2338() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %1075 = @func_2683() /* ty=Tensor[(14, 7, 2), int64] */;
  %1076 = @func_927() /* ty=Tensor[(14, 7, 2), float64] */;
  %1077 = %1074.4;
  (%1075, %1076, %1077)
}

def @func_3315(%var_3313: Tensor[(15, 3, 13), float64]) -> (Tensor[(15, 3, 13), float64], Tensor[(14, 7, 2), float32]) {
  @func_3312(%var_3313) /* ty=(Tensor[(15, 3, 13), float64], Tensor[(14, 7, 2), float32]) */
}

def @func_9975() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) {
  @func_9973() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */
}

def @func_2928(%var_2926: Tensor[(4, 16, 7), float64]) -> Tensor[(4, 16, 7), float64] {
  @func_2925(%var_2926) /* ty=Tensor[(4, 16, 7), float64] */
}

def @func_8475() -> (Tensor[(14, 7, 2), float64],) {
  %1078 = @func_3904() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %1079 = %1078.0;
  (%1079,)
}

def @func_2644(%var_2643: Tensor[(14, 6, 7), float64]) -> Tensor[(14, 6, 7), float64] {
  %1081 = fn (%var_2634: Tensor[(14, 6, 7), float64]) -> Tensor[(14, 6, 7), float64] {
    %1080 = cast(%var_2634, dtype="float64") /* ty=Tensor[(14, 6, 7), float64] */;
    tan(%1080) /* ty=Tensor[(14, 6, 7), float64] */
  };
  %1081(%var_2643) /* ty=Tensor[(14, 6, 7), float64] */
}

def @func_7138() -> (Tensor[(5, 3, 3), uint64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64]) {
  %1082 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 3, 3), uint64] */, dtype="uint64") /* ty=Tensor[(5, 3, 3), uint64] */;
  %1083 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(5, 3, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1084 = cast(meta[relay.Constant][47] /* ty=Tensor[(5, 3, 3), uint64] */, dtype="uint64") /* ty=Tensor[(5, 3, 3), uint64] */;
  %1085 = dyn.reshape(%1082, %1083, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1086 = @func_6365() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %1087 = @func_4367() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %1088 = @func_2289() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %1089 = maximum(%1084, %1085) /* ty=Tensor[(5, 3, 3), uint64] */;
  %1090 = %1086.0;
  %1091 = %1087.2;
  %1092 = @func_2193() /* ty=Tensor[(14, 7, 2), bool] */;
  %1093 = %1088.1;
  (%1089, %1090, %1091, %1092, %1093)
}

def @func_7322() -> Tensor[(14, 7, 2), float32] {
  @func_7320() /* ty=Tensor[(14, 7, 2), float32] */
}

def @func_1089(%var_1080: Tensor[(14, 7, 2), int64]) -> (Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), uint16], Tensor[(14, 7, 2), float64]) {
  %1094 = @func_639() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %1095 = @func_1047() /* ty=(Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %1096 = %1095.1;
  %1097 = cast(%var_1080, dtype="uint16") /* ty=Tensor[(14, 7, 2), uint16] */;
  %1098 = shape_of(%1096, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1099 = cast(%1096, dtype="uint16") /* ty=Tensor[(14, 7, 2), uint16] */;
  %1100 = dyn.reshape(%1097, %1098, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1101 = %1094.0;
  %1102 = left_shift(%1099, %1100) /* ty=Tensor[(14, 7, 2), uint16] */;
  %1103 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  (%1101, %1102, %1103)
}

def @func_7655(%var_7635: Tensor[(5, 9, 5), int8], %var_7636: Tensor[(5, 9, 5), int8], %var_7640: Tensor[(5, 9, 5), int8]) -> (Tensor[(5, 9, 5), int8], Tensor[(5, 9, 5), bool], Tensor[(14, 7, 2), float64]) {
  %1104 = cast(%var_7636, dtype="int8") /* ty=Tensor[(5, 9, 5), int8] */;
  %1105 = shape_of(%var_7635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1106 = cast(%var_7635, dtype="int8") /* ty=Tensor[(5, 9, 5), int8] */;
  %1107 = dyn.reshape(%1104, %1105, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1108 = cast(%var_7640, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
  %1109 = shape_of(%var_7635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1110 = cast(%var_7635, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
  %1111 = dyn.reshape(%1108, %1109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1112 = @func_2338() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64], Tensor[(14, 7, 2), int64]) */;
  %1113 = left_shift(%1106, %1107) /* ty=Tensor[(5, 9, 5), int8] */;
  %1114 = greater_equal(%1110, %1111) /* ty=Tensor[(5, 9, 5), bool] */;
  %1115 = %1112.0;
  (%1113, %1114, %1115)
}

def @func_6360() -> (Tensor[(2, 4, 16), float32],) {
  @func_6358() /* ty=(Tensor[(2, 4, 16), float32],) */
}

def @func_5961() -> (Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), bool], Tensor[(14, 2, 7), bool], Tensor[(14, 7, 2), float32], Tensor[(14, 7, 2), float64]) {
  %1116 = @func_1309() /* ty=(Tensor[(14, 7, 2), float64], Tensor[(14, 7, 2), int64]) */;
  %1117 = @func_5582() /* ty=(Tensor[(14, 7, 2), bool], Tensor[(13, 11, 6), float64], Tensor[(858), float64]) */;
  %1118 = %1117.0;
  %1119 = cast(%1118, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %1120 = reshape(%1119, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), bool] */;
  %1121 = @func_59() /* ty=Tensor[(14, 7, 2), float64] */;
  %1122 = cast(%1121, dtype="float32") /* ty=Tensor[(14, 7, 2), float32] */;
  %1123 = @func_1520() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %1124 = %1116.0;
  %1125 = @func_5416(%1120) /* ty=Tensor[(14, 2, 7), bool] */;
  %1126 = log(%1122) /* ty=Tensor[(14, 7, 2), float32] */;
  %1127 = %1123.0;
  (%1124, %1118, %1125, %1126, %1127)
}

def @func_9598() -> Tensor[(14, 7, 2), float64] {
  %1128 = @func_8594() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %1128.0
}

def @func_414(%var_374: Tensor[(14, 7, 2), float64], %var_386: Tensor[(280), float32]) -> (Tensor[(14, 7, 2), bool], Tensor[(14, 7, 2), int64], Tensor[(280), float32], Tensor[(14, 7, 2), int8]) {
  %1129 = @func_271() /* ty=(Tensor[(14, 7, 2), float64],) */;
  %1130 = %1129.0;
  %1131 = cast(%var_374, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %1132 = shape_of(%1130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1133 = cast(%1130, dtype="bool") /* ty=Tensor[(14, 7, 2), bool] */;
  %1134 = dyn.reshape(%1131, %1132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1135 = @func_285() /* ty=(Tensor[(14, 7, 2), int64],) */;
  %1136 = cast(%var_386, dtype="float32") /* ty=Tensor[(280), float32] */;
  %1137 = reshape(%1136, newshape=[1, 280]) /* ty=Tensor[(1, 280), float32] */;
  %1138 = @func_366(%1137) /* ty=(Tensor[(14, 7, 2), int64], Tensor[(2, 14, 10), float32], Tensor[(1, 280), float32]) */;
  %1139 = %1138.0;
  %1140 = cast(%var_374, dtype="int8") /* ty=Tensor[(14, 7, 2), int8] */;
  %1141 = shape_of(%1139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1142 = cast(%1139, dtype="int8") /* ty=Tensor[(14, 7, 2), int8] */;
  %1143 = dyn.reshape(%1140, %1141, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1144 = less(%1133, %1134) /* ty=Tensor[(14, 7, 2), bool] */;
  %1145 = %1135.0;
  %1146 = add(%1142, %1143) /* ty=Tensor[(14, 7, 2), int8] */;
  (%1144, %1145, %var_386, %1146)
}

def @func_8477() -> (Tensor[(14, 7, 2), float64],) {
  @func_8475() /* ty=(Tensor[(14, 7, 2), float64],) */
}

def @func_2925(%var_2920: Tensor[(4, 16, 7), float64]) -> Tensor[(4, 16, 7), float64] {
  %1147 = cast(%var_2920, dtype="float64") /* ty=Tensor[(4, 16, 7), float64] */;
  log2(%1147) /* ty=Tensor[(4, 16, 7), float64] */
}

def @func_10325() -> Tensor[(1056), float32] {
  @func_10323() /* ty=Tensor[(1056), float32] */
}

def @func_3654(%var_3653: Tensor[(14, 1, 7), float32]) -> (Tensor[(14, 1, 7), float32],) {
  %1150 = fn (%var_3649: Tensor[(14, 1, 7), float32]) -> (Tensor[(14, 1, 7), float32],) {
    %1148 = cast(%var_3649, dtype="float32") /* ty=Tensor[(14, 1, 7), float32] */;
    %1149 = acosh(%1148) /* ty=Tensor[(14, 1, 7), float32] */;
    (%1149,)
  };
  %1150(%var_3653) /* ty=(Tensor[(14, 1, 7), float32],) */
}

def @func_1521() -> (Tensor[(14, 7, 2), float64],) {
  %1152 = fn () -> (Tensor[(14, 7, 2), float64],) {
    %1151 = @func_927() /* ty=Tensor[(14, 7, 2), float64] */;
    (%1151,)
  };
  %1152() /* ty=(Tensor[(14, 7, 2), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen297/build/output.py", line 3963, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:04:41] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

