==========mod==========
#[version = "0.0.5"]
def @func_1956() -> (Tensor[(3, 4, ?), int8],) {
  %0 = @func_1869() /* ty=Tensor[(3, 4, ?), int8] */;
  (%0,)
}

def @func_4799(%var_4784: Tensor[(1960), int32]) -> (Tensor[(3, 4, ?), int8], Tensor[(11, 10, 10), int8], Tensor[(1100), float64], Tensor[(504), float64], Tensor[(1960), float32], Tensor[(3, 4, ?), int8]) {
  %1 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(1100), float64] */, dtype="float64") /* ty=Tensor[(1100), float64] */;
  %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %4 = cast(%var_4784, dtype="int32") /* ty=Tensor[(1960), int32] */;
  %5 = reshape(%2, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float64] */;
  %6 = reshape(%3, newshape=[504, 1]) /* ty=Tensor[(504, 1), float64] */;
  %7 = reshape(%4, newshape=[980, 2]) /* ty=Tensor[(980, 2), int32] */;
  %8 = @func_4188(%5, %6, %7) /* ty=(Tensor[(11, 10, 10), int8], Tensor[(192), uint16], Tensor[(252, 2), bool], Tensor[(980, 2), int32], Tensor[(504, 1), float64], Tensor[(504, ?), int16]) */;
  %9 = cast(%var_4784, dtype="float32") /* ty=Tensor[(1960), float32] */;
  %10 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %11 = %1.1;
  %12 = %8.0;
  %13 = acosh(%9) /* ty=Tensor[(1960), float32] */;
  %14 = %10.3;
  (%11, %12, meta[relay.Constant][0] /* ty=Tensor[(1100), float64] */, meta[relay.Constant][1] /* ty=Tensor[(504), float64] */, %13, %14)
}

def @func_720(%var_679: uint16, %var_680: Tensor[(16, 4, 3), uint16], %var_711: Tensor[(504), float64]) -> (Tensor[(16, 4, 3), uint16], Tensor[(8, 15, 3), float64], Tensor[(9, 4, 16), float32], Tensor[(504), float64]) {
  %15 = cast(%var_679, dtype="uint16") /* ty=uint16 */;
  %16 = cast(%var_680, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
  %17 = cast(%var_679, dtype="float64") /* ty=float64 */;
  %18 = reshape(%17, newshape=[]) /* ty=float64 */;
  %19 = @func_473(%18) /* ty=(Tensor[(8, 15, 3), float64], Tensor[(8, 15, 3), uint64]) */;
  %20 = cast(%var_711, dtype="float64") /* ty=Tensor[(504), float64] */;
  %21 = reshape(%20, newshape=[12, 14, 3]) /* ty=Tensor[(12, 14, 3), float64] */;
  %22 = @func_368(%21) /* ty=(Tensor[(12, 14, 3), float64], Tensor[(12, 14, 3), int8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(12, 14, 3), float64]) */;
  %23 = add(%15, %16) /* ty=Tensor[(16, 4, 3), uint16] */;
  %24 = %19.0;
  %25 = %22.2;
  (%23, %24, %25, %var_711)
}

def @func_4728(%var_4699: Tensor[(2, 448), uint64], %var_4700: Tensor[(936), float64], %var_4710: Tensor[(84), int8]) -> (Tensor[(9, 4, 16), float32], Tensor[(2, 448), uint64], Tensor[(936), float64], Tensor[(504), float64], Tensor[(84), int8], Tensor[(252, 2), float64]) {
  %26 = cast(%var_4699, dtype="uint64") /* ty=Tensor[(2, 448), uint64] */;
  %27 = cast(%var_4699, dtype="uint64") /* ty=Tensor[(2, 448), uint64] */;
  %28 = cast(%var_4699, dtype="uint16") /* ty=Tensor[(2, 448), uint16] */;
  %29 = cast(%var_4699, dtype="int64") /* ty=Tensor[(2, 448), int64] */;
  %30 = cast(%var_4700, dtype="float64") /* ty=Tensor[(936), float64] */;
  %31 = @func_4215() /* ty=Tensor[(252, 2), float32] */;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %33 = reshape(%26, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), uint64] */;
  %34 = reshape(%27, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), uint64] */;
  %35 = reshape(%28, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), uint16] */;
  %36 = reshape(%29, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), int64] */;
  %37 = reshape(%30, newshape=[936]) /* ty=Tensor[(936), float64] */;
  %38 = reshape(%32, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %39 = @func_1825(%33, %34, %35, %36, %37, %38) /* ty=(Tensor[(3, 4, 3), float64], Tensor[(14, 8, 8), int64], Tensor[(14, 8, 8), int32], Tensor[(9, 4, 16), float32], Tensor[(936), float64], Tensor[(504), float64]) */;
  %40 = cast(%var_4710, dtype="int8") /* ty=Tensor[(84), int8] */;
  %41 = cast(%31, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %42 = reshape(%40, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), int8] */;
  %43 = reshape(%41, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %44 = @func_2976(%42, %43) /* ty=(Tensor[(3, 4, 7), bool], Tensor[(3, 4, ?), int8], Tensor[(192), uint16], Tensor[(40), float64], Tensor[(192), uint16], Tensor[(504), float64]) */;
  %45 = cast(%31, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %46 = cos(%45) /* ty=Tensor[(252, 2), float32] */;
  %47 = cast(%31, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(2), int32] */;
  %49 = cast(%46, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %51 = %39.3;
  %52 = %44.5;
  %53 = power(%49, %50) /* ty=Tensor[(252, 2), float64] */;
  (%51, %var_4699, %var_4700, %52, %var_4710, %53)
}

def @func_473(%var_441: float64) -> (Tensor[(8, 15, 3), float64], Tensor[(8, 15, 3), uint64]) {
  %54 = cast(%var_441, dtype="float64") /* ty=float64 */;
  %55 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 15, 3), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 3), float64] */;
  %56 = cast(%var_441, dtype="bool") /* ty=bool */;
  %57 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 15, 3), float64] */, dtype="bool") /* ty=Tensor[(8, 15, 3), bool] */;
  %58 = not_equal(%56, %57) /* ty=Tensor[(8, 15, 3), bool] */;
  %59 = cast(%var_441, dtype="uint64") /* ty=uint64 */;
  %60 = cast(%58, dtype="uint64") /* ty=Tensor[(8, 15, 3), uint64] */;
  %61 = divide(%54, %55) /* ty=Tensor[(8, 15, 3), float64] */;
  %62 = add(%59, %60) /* ty=Tensor[(8, 15, 3), uint64] */;
  (%61, %62)
}

def @func_1485(%var_1445: Tensor[(11, 10, 13), float32], %var_1446: Tensor[(11, 10, 13), float32], %var_1470: float64) -> (Tensor[(11, 10, 13), int16], Tensor[(8, 15, 3), uint64], Tensor[(256), float32], float64, Tensor[(11, 10, 13), float64]) {
  %63 = cast(%var_1446, dtype="float32") /* ty=Tensor[(11, 10, 13), float32] */;
  %64 = shape_of(%var_1445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%var_1445, dtype="float32") /* ty=Tensor[(11, 10, 13), float32] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %67 = floor_divide(%65, %66) /* ty=Tensor[(11, 10, 13), float32] */;
  %68 = cast(%var_1445, dtype="int16") /* ty=Tensor[(11, 10, 13), int16] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="int16") /* ty=Tensor[(11, 10, 13), int16] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %72 = cast(meta[relay.Constant][3] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %74 = cast(%var_1470, dtype="float64") /* ty=float64 */;
  %75 = reshape(%72, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float32] */;
  %76 = reshape(%73, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float32] */;
  %77 = reshape(%74, newshape=[]) /* ty=float64 */;
  %78 = @func_1282(%75, %76, %77) /* ty=(Tensor[(8, 4, 8), float32], Tensor[(8, 15, 3), uint64], float64) */;
  %79 = cast(%67, dtype="float64") /* ty=Tensor[(11, 10, 13), float64] */;
  %80 = left_shift(%70, %71) /* ty=Tensor[(11, 10, 13), int16] */;
  %81 = %78.1;
  %82 = sinh(%79) /* ty=Tensor[(11, 10, 13), float64] */;
  (%80, %81, meta[relay.Constant][3] /* ty=Tensor[(256), float32] */, %var_1470, %82)
}

def @func_3036() -> Tensor[(252, 2), float32] {
  %83 = @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */;
  %84 = %83.0;
  %85 = cast(%84, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  asinh(%85) /* ty=Tensor[(252, 2), float32] */
}

def @func_2613(%var_2596: Tensor[(180), int8]) -> (Tensor[(3, 4, 15), float64], Tensor[(180), int8], Tensor[(252, 2), int16]) {
  %86 = cast(%var_2596, dtype="int8") /* ty=Tensor[(180), int8] */;
  %87 = reshape(%86, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), int8] */;
  %88 = @func_2452(%87) /* ty=(Tensor[(3, 4, 15), bool], Tensor[(3, 4, 15), float64]) */;
  %89 = @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */;
  %90 = %89.1;
  %91 = cast(meta[relay.Constant][4] /* ty=Tensor[(252, 2), float32] */, dtype="int16") /* ty=Tensor[(252, 2), int16] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(2), int32] */;
  %93 = cast(%90, dtype="int16") /* ty=Tensor[(252, 2), int16] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %95 = %88.1;
  %96 = left_shift(%93, %94) /* ty=Tensor[(252, 2), int16] */;
  (%95, %var_2596, %96)
}

def @func_1701() -> (float64, Tensor[(2, 2, 3), float64], Tensor[(12), float64]) {
  %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %98 = reshape(%97, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %99 = @func_199(%98) /* ty=(Tensor[(2, 2, 3), float64],) */;
  %100 = @func_1598() /* ty=float64 */;
  %101 = %99.0;
  (%100, %101, meta[relay.Constant][5] /* ty=Tensor[(12), float64] */)
}

def @func_3000() -> float64 {
  %102 = @func_1900() /* ty=(float64,) */;
  %102.0
}

def @func_4048() -> (float64, float64) {
  %103 = @func_2325() /* ty=float64 */;
  %104 = @func_3348() /* ty=float64 */;
  (%103, %104)
}

def @func_5273(%var_5266: Tensor[(252, 2), float32]) -> (Tensor[(252, 2), uint32],) {
  %105 = @func_4894() /* ty=Tensor[(252, 2), float32] */;
  %106 = cast(%var_5266, dtype="uint32") /* ty=Tensor[(252, 2), uint32] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(2), int32] */;
  %108 = cast(%105, dtype="uint32") /* ty=Tensor[(252, 2), uint32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %110 = logical_xor(%108, %109) /* ty=Tensor[(252, 2), uint32] */;
  (%110,)
}

def @func_1941(%var_1927: Tensor[(7, 9, 11), uint64], %var_1928: Tensor[(7, 9, 11), uint64]) -> (Tensor[(7, 9, 11), bool], Tensor[(7, 9, 11), float32], float64) {
  %111 = cast(%var_1928, dtype="bool") /* ty=Tensor[(7, 9, 11), bool] */;
  %112 = shape_of(%var_1927, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_1927, dtype="bool") /* ty=Tensor[(7, 9, 11), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = cast(%var_1927, dtype="float32") /* ty=Tensor[(7, 9, 11), float32] */;
  %116 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %117 = greater(%113, %114) /* ty=Tensor[(7, 9, 11), bool] */;
  %118 = sin(%115) /* ty=Tensor[(7, 9, 11), float32] */;
  %119 = %116.0;
  (%117, %118, %119)
}

def @func_3162() -> (Tensor[(252, 2), float32],) {
  %120 = @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */;
  %121 = %120.1;
  %122 = cast(%121, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %123 = atan(%122) /* ty=Tensor[(252, 2), float32] */;
  (%123,)
}

def @func_3226() -> (Tensor[(252, 2), float32],) {
  %124 = @func_3014() /* ty=Tensor[(252, 2), float32] */;
  (%124,)
}

def @func_2352(%var_2340: Tensor[(2, 128), float32], %var_2341: float64) -> (Tensor[(12), float64], Tensor[(8, 4, 8), float32], Tensor[(2, 128), bool]) {
  %125 = @func_1701() /* ty=(float64, Tensor[(2, 2, 3), float64], Tensor[(12), float64]) */;
  %126 = cast(%var_2340, dtype="float32") /* ty=Tensor[(2, 128), float32] */;
  %127 = cast(%var_2340, dtype="float32") /* ty=Tensor[(2, 128), float32] */;
  %128 = cast(%var_2341, dtype="float64") /* ty=float64 */;
  %129 = reshape(%126, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float32] */;
  %130 = reshape(%127, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float32] */;
  %131 = reshape(%128, newshape=[]) /* ty=float64 */;
  %132 = @func_1282(%129, %130, %131) /* ty=(Tensor[(8, 4, 8), float32], Tensor[(8, 15, 3), uint64], float64) */;
  %133 = cast(%var_2340, dtype="bool") /* ty=Tensor[(2, 128), bool] */;
  %134 = cast(%var_2341, dtype="bool") /* ty=bool */;
  %135 = %125.2;
  %136 = %132.0;
  %137 = less_equal(%133, %134) /* ty=Tensor[(2, 128), bool] */;
  (%135, %136, %137)
}

def @func_5314() -> (Tensor[(3, 4, ?), int8],) {
  %138 = @func_4093() /* ty=(Tensor[(3, 4, ?), int8],) */;
  %139 = %138.0;
  (%139,)
}

def @func_2823(%var_2804: uint64, %var_2805: Tensor[(9, 13, 12), uint64]) -> (Tensor[(9, 13, 12), uint64], Tensor[(3, 4, ?), int8]) {
  %140 = cast(%var_2804, dtype="uint64") /* ty=uint64 */;
  %141 = cast(%var_2805, dtype="uint64") /* ty=Tensor[(9, 13, 12), uint64] */;
  %142 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
  %143 = logical_xor(%140, %141) /* ty=Tensor[(9, 13, 12), uint64] */;
  %144 = %142.1;
  (%143, %144)
}

def @func_60(%var_52: Tensor[(9, 4, 16), uint64]) -> (Tensor[(9, 4, 16), float32],) {
  %145 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 4, 16), uint64] */, dtype="uint64") /* ty=Tensor[(9, 4, 16), uint64] */;
  %146 = shape_of(%var_52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%var_52, dtype="uint64") /* ty=Tensor[(9, 4, 16), uint64] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %149 = add(%147, %148) /* ty=Tensor[(9, 4, 16), uint64] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(9, 4, 16), float32] */;
  %151 = asinh(%150) /* ty=Tensor[(9, 4, 16), float32] */;
  (%151,)
}

def @func_3188(%var_3183: uint64, %var_3184: Tensor[(1404), uint64]) -> (Tensor[(252, 2), float32], Tensor[(9, 13, 12), uint64], uint64, Tensor[(1404), uint64]) {
  %152 = cast(%var_3183, dtype="uint64") /* ty=uint64 */;
  %153 = cast(%var_3184, dtype="uint64") /* ty=Tensor[(1404), uint64] */;
  %154 = reshape(%152, newshape=[]) /* ty=uint64 */;
  %155 = reshape(%153, newshape=[9, 13, 12]) /* ty=Tensor[(9, 13, 12), uint64] */;
  %156 = @func_2823(%154, %155) /* ty=(Tensor[(9, 13, 12), uint64], Tensor[(3, 4, ?), int8]) */;
  %157 = @func_3014() /* ty=Tensor[(252, 2), float32] */;
  %158 = %156.0;
  (%157, %158, %var_3183, %var_3184)
}

def @func_4281(%var_4247: Tensor[(9, 4, 16), float32], %var_4257: Tensor[(96), int8]) -> (Tensor[(9, 4, 16), uint8], Tensor[(3, 4, 8), uint64], Tensor[(96), int8], Tensor[(9, 4, 16), float32], Tensor[(9, 4, 16), bool]) {
  %159 = @func_3619() /* ty=Tensor[(9, 4, 16), float32] */;
  %160 = cast(%var_4247, dtype="uint8") /* ty=Tensor[(9, 4, 16), uint8] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="uint8") /* ty=Tensor[(9, 4, 16), uint8] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %164 = cast(%var_4257, dtype="int8") /* ty=Tensor[(96), int8] */;
  %165 = reshape(%164, newshape=[3, 4, 8]) /* ty=Tensor[(3, 4, 8), int8] */;
  %166 = @func_3461(%165) /* ty=(Tensor[(3, 4, 8), uint64], Tensor[(3, 4, 8), bool]) */;
  %167 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 4, 16), float32] */, dtype="float32") /* ty=Tensor[(9, 4, 16), float32] */;
  %168 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%159, dtype="float32") /* ty=Tensor[(9, 4, 16), float32] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %171 = cast(%159, dtype="bool") /* ty=Tensor[(9, 4, 16), bool] */;
  %172 = shape_of(%var_4247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%var_4247, dtype="bool") /* ty=Tensor[(9, 4, 16), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %175 = right_shift(%162, %163) /* ty=Tensor[(9, 4, 16), uint8] */;
  %176 = %166.0;
  %177 = floor_divide(%169, %170) /* ty=Tensor[(9, 4, 16), float32] */;
  %178 = less_equal(%173, %174) /* ty=Tensor[(9, 4, 16), bool] */;
  (%175, %176, %var_4257, %177, %178)
}

def @func_3519(%var_3502: Tensor[(1960), int32], %var_3503: Tensor[(504), float32]) -> (float64, Tensor[(252, 2), bool], Tensor[(1960), int32], Tensor[(504), float32]) {
  %179 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
  %180 = cast(%var_3502, dtype="int32") /* ty=Tensor[(1960), int32] */;
  %181 = cast(%var_3502, dtype="int32") /* ty=Tensor[(1960), int32] */;
  %182 = cast(%var_3503, dtype="float32") /* ty=Tensor[(504), float32] */;
  %183 = reshape(%180, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), int32] */;
  %184 = reshape(%181, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), int32] */;
  %185 = reshape(%182, newshape=[504]) /* ty=Tensor[(504), float32] */;
  %186 = @func_3128(%183, %184, %185) /* ty=(Tensor[(14, 10, 14), int32], Tensor[(252, 2), bool], Tensor[(504), float32]) */;
  %187 = %179.0;
  %188 = %186.1;
  (%187, %188, %var_3502, %var_3503)
}

def @func_1825(%var_1723: Tensor[(14, 8, 8), uint64], %var_1728: Tensor[(14, 8, 8), uint64], %var_1742: Tensor[(14, 8, 8), uint16], %var_1811: Tensor[(14, 8, 8), int64], %var_1818: Tensor[(936), float64], %var_1819: Tensor[(504), float64]) -> (Tensor[(3, 4, 3), float64], Tensor[(14, 8, 8), int64], Tensor[(14, 8, 8), int32], Tensor[(9, 4, 16), float32], Tensor[(936), float64], Tensor[(504), float64]) {
  %189 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
  %190 = %189.1;
  %191 = cast(%190, dtype="float64") /* ty=Tensor[(3, 4, ?), float64] */;
  %192 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 4, 3), int8] */, dtype="float64") /* ty=Tensor[(3, 4, 3), float64] */;
  %193 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 8, 8), uint64] */, dtype="bool") /* ty=Tensor[(14, 8, 8), bool] */;
  %194 = shape_of(%var_1723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%var_1723, dtype="bool") /* ty=Tensor[(14, 8, 8), bool] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %197 = less(%195, %196) /* ty=Tensor[(14, 8, 8), bool] */;
  %198 = cast(%var_1728, dtype="uint16") /* ty=Tensor[(14, 8, 8), uint16] */;
  %199 = shape_of(%var_1723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%var_1723, dtype="uint16") /* ty=Tensor[(14, 8, 8), uint16] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %202 = maximum(%200, %201) /* ty=Tensor[(14, 8, 8), uint16] */;
  %203 = cast(%var_1742, dtype="int64") /* ty=Tensor[(14, 8, 8), int64] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%202, dtype="int64") /* ty=Tensor[(14, 8, 8), int64] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %207 = minimum(%205, %206) /* ty=Tensor[(14, 8, 8), int64] */;
  %208 = cast(%207, dtype="int64") /* ty=Tensor[(14, 8, 8), int64] */;
  %209 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%197, dtype="int64") /* ty=Tensor[(14, 8, 8), int64] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %212 = cast(%var_1811, dtype="int32") /* ty=Tensor[(14, 8, 8), int32] */;
  %213 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%207, dtype="int32") /* ty=Tensor[(14, 8, 8), int32] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %216 = cast(%var_1818, dtype="float64") /* ty=Tensor[(936), float64] */;
  %217 = cast(%var_1818, dtype="float64") /* ty=Tensor[(936), float64] */;
  %218 = cast(%var_1819, dtype="float64") /* ty=Tensor[(504), float64] */;
  %219 = reshape(%216, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
  %220 = reshape(%217, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
  %221 = reshape(%218, newshape=[6, 84]) /* ty=Tensor[(6, 84), float64] */;
  %222 = @func_1425(%219, %220, %221) /* ty=(Tensor[(13, 6, 12), float64], Tensor[(13, 6, 12), float64], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(504), float64], uint16, Tensor[(4, 48), uint16], Tensor[(6, 84), float64]) */;
  %223 = floor_divide(%191, %192) /* ty=Tensor[(3, 4, 3), float64] */;
  %224 = bitwise_and(%210, %211) /* ty=Tensor[(14, 8, 8), int64] */;
  %225 = bitwise_xor(%214, %215) /* ty=Tensor[(14, 8, 8), int32] */;
  %226 = %222.2;
  (%223, %224, %225, %226, %var_1818, %var_1819)
}

def @func_368(%var_328: Tensor[(12, 14, 3), float64]) -> (Tensor[(12, 14, 3), float64], Tensor[(12, 14, 3), int8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(12, 14, 3), float64]) {
  %227 = cast(%var_328, dtype="float64") /* ty=Tensor[(12, 14, 3), float64] */;
  %228 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(12, 14, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(12, 14, 3), float64] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %231 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 14, 3), float64] */, dtype="int8") /* ty=Tensor[(12, 14, 3), int8] */;
  %232 = shape_of(%var_328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%var_328, dtype="int8") /* ty=Tensor[(12, 14, 3), int8] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %235 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), uint64] */, dtype="uint64") /* ty=Tensor[(576), uint64] */;
  %236 = reshape(%235, newshape=[9, 4, 16]) /* ty=Tensor[(9, 4, 16), uint64] */;
  %237 = @func_60(%236) /* ty=(Tensor[(9, 4, 16), float32],) */;
  %238 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(12, 14, 3), float64] */;
  %239 = erf(%238) /* ty=Tensor[(12, 14, 3), float64] */;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(12, 14, 3), float64] */;
  %241 = mod(%229, %230) /* ty=Tensor[(12, 14, 3), float64] */;
  %242 = minimum(%233, %234) /* ty=Tensor[(12, 14, 3), int8] */;
  %243 = %237.0;
  %244 = cosh(%240) /* ty=Tensor[(12, 14, 3), float64] */;
  (%241, %242, %243, meta[relay.Constant][11] /* ty=Tensor[(576), uint64] */, %244)
}

def @func_993(%var_938: Tensor[(5, 2, 4), float64], %var_982: Tensor[(192), uint16], %var_983: Tensor[(252, 2), float64]) -> (Tensor[(8, 15, 3), float64], float64, Tensor[(5, 2, 4), float32], Tensor[(5, 2, 4), float32], Tensor[(8, 15, 3), float64], Tensor[(192), uint16], Tensor[(252, 2), float64]) {
  %245 = cast(-8.82479f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %246 = reshape(%245, newshape=[]) /* ty=float64 */;
  %247 = @func_473(%246) /* ty=(Tensor[(8, 15, 3), float64], Tensor[(8, 15, 3), uint64]) */;
  %248 = cast(%var_938, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %249 = atan(%248) /* ty=Tensor[(5, 2, 4), float64] */;
  %250 = cast(%249, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %251 = cast(%249, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %252 = cast(-8.82479f64 /* ty=float64 */, dtype="uint16") /* ty=uint16 */;
  %253 = cast(%var_982, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %254 = cast(%var_983, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %255 = reshape(%252, newshape=[]) /* ty=uint16 */;
  %256 = reshape(%253, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %257 = reshape(%254, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %258 = @func_720(%255, %256, %257) /* ty=(Tensor[(16, 4, 3), uint16], Tensor[(8, 15, 3), float64], Tensor[(9, 4, 16), float32], Tensor[(504), float64]) */;
  %259 = %247.0;
  %260 = rsqrt(%250) /* ty=Tensor[(5, 2, 4), float32] */;
  %261 = sigmoid(%251) /* ty=Tensor[(5, 2, 4), float32] */;
  %262 = %258.1;
  (%259, -8.82479f64 /* ty=float64 */, %260, %261, %262, %var_982, %var_983)
}

def @func_2739(%var_2682: Tensor[(8, 3, 5), int32], %var_2728: Tensor[(1, 936), float64], %var_2729: Tensor[(504), float64], %var_2732: Tensor[(225), float64]) -> (Tensor[(8, 3, 5), bool], Tensor[(3, 4, ?), int8], float64, Tensor[(13, 6, 12), float64], Tensor[(1, 936), float64], Tensor[(504), float64], Tensor[(1430), float32], Tensor[(225), float64], Tensor[(576), uint64]) {
  %263 = cast(%var_2682, dtype="float32") /* ty=Tensor[(8, 3, 5), float32] */;
  %264 = atan(%263) /* ty=Tensor[(8, 3, 5), float32] */;
  %265 = cast(%var_2682, dtype="int32") /* ty=Tensor[(8, 3, 5), int32] */;
  %266 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(8, 3, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 3, 5), int32] */, dtype="int32") /* ty=Tensor[(8, 3, 5), int32] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %269 = bitwise_xor(%267, %268) /* ty=Tensor[(8, 3, 5), int32] */;
  %270 = cast(%269, dtype="bool") /* ty=Tensor[(8, 3, 5), bool] */;
  %271 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%264, dtype="bool") /* ty=Tensor[(8, 3, 5), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %274 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
  %275 = cast(%var_2728, dtype="float64") /* ty=Tensor[(1, 936), float64] */;
  %276 = cast(%var_2728, dtype="float64") /* ty=Tensor[(1, 936), float64] */;
  %277 = cast(%var_2729, dtype="float64") /* ty=Tensor[(504), float64] */;
  %278 = reshape(%275, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
  %279 = reshape(%276, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
  %280 = reshape(%277, newshape=[6, 84]) /* ty=Tensor[(6, 84), float64] */;
  %281 = @func_1425(%278, %279, %280) /* ty=(Tensor[(13, 6, 12), float64], Tensor[(13, 6, 12), float64], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(504), float64], uint16, Tensor[(4, 48), uint16], Tensor[(6, 84), float64]) */;
  %282 = cast(%var_2732, dtype="float64") /* ty=Tensor[(225), float64] */;
  %283 = cast(meta[relay.Constant][13] /* ty=Tensor[(576), uint64] */, dtype="uint64") /* ty=Tensor[(576), uint64] */;
  %284 = cast(%var_2729, dtype="float64") /* ty=Tensor[(504), float64] */;
  %285 = reshape(%282, newshape=[225]) /* ty=Tensor[(225), float64] */;
  %286 = reshape(%283, newshape=[2, 288]) /* ty=Tensor[(2, 288), uint64] */;
  %287 = reshape(%284, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %288 = @func_2560(%285, %286, %287) /* ty=(Tensor[(1430), float32], Tensor[(12), float64], Tensor[(225), float64], Tensor[(2, 288), bool], Tensor[(24, 6), bool], Tensor[(24, 6), bool], Tensor[(8, 15, 3), float64], Tensor[(40), float64], Tensor[(192), uint16], Tensor[(504), float64]) */;
  %289 = less(%272, %273) /* ty=Tensor[(8, 3, 5), bool] */;
  %290 = %274.1;
  %291 = @func_2325() /* ty=float64 */;
  %292 = %281.0;
  %293 = %288.0;
  (%289, %290, %291, %292, %var_2728, %var_2729, %293, %var_2732, meta[relay.Constant][13] /* ty=Tensor[(576), uint64] */)
}

def @func_3014() -> Tensor[(252, 2), float32] {
  %294 = @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */;
  %294.1
}

def @func_4561() -> (float64,) {
  %295 = @func_3348() /* ty=float64 */;
  (%295,)
}

def @func_4603() -> Tensor[(3, 4, ?), int8] {
  @func_1869() /* ty=Tensor[(3, 4, ?), int8] */
}

def @func_1643() -> (float64, Tensor[(3, 4, ?), int8]) {
  %296 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %297 = @func_1598() /* ty=float64 */;
  %298 = %296.3;
  (%297, %298)
}

def @func_1900() -> (float64,) {
  %299 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %300 = %299.0;
  (%300,)
}

def @func_2675(%var_2648: Tensor[(252, 2), float32], %var_2670: Tensor[(252, 2), float32]) -> (Tensor[(252, 2), bool], Tensor[(252, 2), float32]) {
  %301 = @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */;
  %302 = %301.0;
  %303 = cast(%var_2648, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(2), int32] */;
  %305 = cast(%302, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %307 = cast(%var_2670, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %308 = shape_of(%302, dtype="int32") /* ty=Tensor[(2), int32] */;
  %309 = cast(%302, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %311 = less_equal(%305, %306) /* ty=Tensor[(252, 2), bool] */;
  %312 = maximum(%309, %310) /* ty=Tensor[(252, 2), float32] */;
  (%311, %312)
}

def @func_4894() -> Tensor[(252, 2), float32] {
  %313 = @func_3281() /* ty=(Tensor[(252, 2), float32], Tensor[(3, 4, ?), bool], Tensor[(3, 4, ?), float32]) */;
  %313.0
}

def @func_1282(%var_1252: Tensor[(8, 4, 8), float32], %var_1253: Tensor[(8, 4, 8), float32], %var_1278: float64) -> (Tensor[(8, 4, 8), float32], Tensor[(8, 15, 3), uint64], float64) {
  %314 = cast(%var_1253, dtype="float32") /* ty=Tensor[(8, 4, 8), float32] */;
  %315 = shape_of(%var_1252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%var_1252, dtype="float32") /* ty=Tensor[(8, 4, 8), float32] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %318 = cast(%var_1278, dtype="float64") /* ty=float64 */;
  %319 = reshape(%318, newshape=[]) /* ty=float64 */;
  %320 = @func_473(%319) /* ty=(Tensor[(8, 15, 3), float64], Tensor[(8, 15, 3), uint64]) */;
  %321 = subtract(%316, %317) /* ty=Tensor[(8, 4, 8), float32] */;
  %322 = %320.1;
  (%321, %322, %var_1278)
}

def @func_1598() -> float64 {
  %323 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %323.2
}

def @func_2976(%var_2962: Tensor[(3, 4, 7), int8], %var_2972: Tensor[(504), float64]) -> (Tensor[(3, 4, 7), bool], Tensor[(3, 4, ?), int8], Tensor[(192), uint16], Tensor[(40), float64], Tensor[(192), uint16], Tensor[(504), float64]) {
  %324 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
  %325 = %324.1;
  %326 = cast(%325, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
  %327 = cast(%var_2962, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
  %328 = cast(meta[relay.Constant][14] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %329 = cast(meta[relay.Constant][15] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %330 = cast(%var_2972, dtype="float64") /* ty=Tensor[(504), float64] */;
  %331 = reshape(%328, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %332 = reshape(%329, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %333 = reshape(%330, newshape=[252, 2]) /* ty=Tensor[(252, 2), float64] */;
  %334 = @func_993(%331, %332, %333) /* ty=(Tensor[(8, 15, 3), float64], float64, Tensor[(5, 2, 4), float32], Tensor[(5, 2, 4), float32], Tensor[(8, 15, 3), float64], Tensor[(192), uint16], Tensor[(252, 2), float64]) */;
  %335 = logical_and(%326, %327) /* ty=Tensor[(3, 4, 7), bool] */;
  %336 = @func_1869() /* ty=Tensor[(3, 4, ?), int8] */;
  %337 = %334.5;
  (%335, %336, %337, meta[relay.Constant][14] /* ty=Tensor[(40), float64] */, meta[relay.Constant][15] /* ty=Tensor[(192), uint16] */, %var_2972)
}

def @func_5426() -> Tensor[(3, 4, ?), int8] {
  @func_1869() /* ty=Tensor[(3, 4, ?), int8] */
}

def @func_4991() -> (float64,) {
  %338 = @func_3063() /* ty=float64 */;
  (%338,)
}

def @func_5057(%var_5052: Tensor[(1, 12, 10), float64], %var_5053: Tensor[(6, 12, 10), float64]) -> Tensor[(6, 12, 10), bool] {
  %339 = cast(%var_5052, dtype="bool") /* ty=Tensor[(1, 12, 10), bool] */;
  %340 = cast(%var_5053, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
  greater_equal(%339, %340) /* ty=Tensor[(6, 12, 10), bool] */
}

def @func_4956() -> (float64, float64) {
  %341 = @func_4870() /* ty=(float64,) */;
  %342 = %341.0;
  %343 = @func_3000() /* ty=float64 */;
  (%342, %343)
}

def @func_5453() -> Tensor[(3, 4, ?), int8] {
  @func_4603() /* ty=Tensor[(3, 4, ?), int8] */
}

def @func_2325() -> float64 {
  %344 = @func_1900() /* ty=(float64,) */;
  %344.0
}

def @func_4188(%var_4152: Tensor[(11, 10, 10), float64], %var_4159: Tensor[(504, 1), float64], %var_4173: Tensor[(980, 2), int32]) -> (Tensor[(11, 10, 10), int8], Tensor[(192), uint16], Tensor[(252, 2), bool], Tensor[(980, 2), int32], Tensor[(504, 1), float64], Tensor[(504, ?), int16]) {
  %345 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %346 = %345.0;
  %347 = cast(%346, dtype="int8") /* ty=int8 */;
  %348 = cast(%var_4152, dtype="int8") /* ty=Tensor[(11, 10, 10), int8] */;
  %349 = cast(%var_4173, dtype="int32") /* ty=Tensor[(980, 2), int32] */;
  %350 = cast(%var_4159, dtype="float32") /* ty=Tensor[(504, 1), float32] */;
  %351 = cos(%350) /* ty=Tensor[(504, 1), float32] */;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(504, 1), float32] */;
  %353 = reshape(%349, newshape=[1960]) /* ty=Tensor[(1960), int32] */;
  %354 = reshape(%352, newshape=[504]) /* ty=Tensor[(504), float32] */;
  %355 = @func_3519(%353, %354) /* ty=(float64, Tensor[(252, 2), bool], Tensor[(1960), int32], Tensor[(504), float32]) */;
  %356 = cast(%351, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
  %357 = cast(%346, dtype="uint16") /* ty=uint16 */;
  %358 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %359 = cast(%var_4159, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
  %360 = reshape(%357, newshape=[]) /* ty=uint16 */;
  %361 = reshape(%358, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %362 = reshape(%359, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %363 = @func_720(%360, %361, %362) /* ty=(Tensor[(16, 4, 3), uint16], Tensor[(8, 15, 3), float64], Tensor[(9, 4, 16), float32], Tensor[(504), float64]) */;
  %364 = %363.3;
  %365 = cast(%364, dtype="bool") /* ty=Tensor[(504), bool] */;
  %366 = shape_of(%351, dtype="int32") /* ty=Tensor[(2), int32] */;
  %367 = cast(%351, dtype="bool") /* ty=Tensor[(504, 1), bool] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %369 = greater(%367, %368) /* ty=Tensor[(504, ?), bool] */;
  %370 = cast(%351, dtype="int16") /* ty=Tensor[(504, 1), int16] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(2), int32] */;
  %372 = cast(%369, dtype="int16") /* ty=Tensor[(504, ?), int16] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %374 = bitwise_xor(%347, %348) /* ty=Tensor[(11, 10, 10), int8] */;
  %375 = %355.1;
  %376 = erf(%356) /* ty=Tensor[(504, 1), float64] */;
  %377 = left_shift(%372, %373) /* ty=Tensor[(504, ?), int16] */;
  (%374, meta[relay.Constant][16] /* ty=Tensor[(192), uint16] */, %375, %var_4173, %376, %377)
}

def @func_4839(%var_4827: Tensor[(30), uint8], %var_4828: Tensor[(270), uint8]) -> (Tensor[(252, 2), float32], Tensor[(576), uint64], Tensor[(30), uint8], Tensor[(270), uint8]) {
  %378 = @func_3226() /* ty=(Tensor[(252, 2), float32],) */;
  %379 = cast(%var_4827, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %380 = cast(%var_4828, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %381 = reshape(%379, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), uint8] */;
  %382 = reshape(%380, newshape=[3, 9, 10]) /* ty=Tensor[(3, 9, 10), uint8] */;
  %383 = @func_130(%381, %382) /* ty=(Tensor[(3, 9, 10), uint8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64]) */;
  %384 = %378.0;
  %385 = %383.2;
  (%384, %385, %var_4827, %var_4828)
}

def @func_5011() -> (float64,) {
  %386 = @func_4991() /* ty=(float64,) */;
  %387 = %386.0;
  (%387,)
}

def @func_2908(%var_2901: Tensor[(90, 2), int8]) -> (Tensor[(252, 2), float64], Tensor[(252, 2), bool], Tensor[(3, 4, 15), bool], Tensor[(90, 2), int8]) {
  %388 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
  %389 = %388.2;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %391 = cast(%389, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %392 = reshape(%390, newshape=[252, 2]) /* ty=Tensor[(252, 2), float32] */;
  %393 = reshape(%391, newshape=[252, 2]) /* ty=Tensor[(252, 2), float32] */;
  %394 = @func_2675(%392, %393) /* ty=(Tensor[(252, 2), bool], Tensor[(252, 2), float32]) */;
  %395 = cast(%var_2901, dtype="int8") /* ty=Tensor[(90, 2), int8] */;
  %396 = reshape(%395, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), int8] */;
  %397 = @func_2452(%396) /* ty=(Tensor[(3, 4, 15), bool], Tensor[(3, 4, 15), float64]) */;
  %398 = %394.0;
  %399 = %397.0;
  (%389, %398, %399, %var_2901)
}

def @func_1425(%var_1390: Tensor[(13, 6, 12), float64], %var_1393: Tensor[(13, 6, 12), float64], %var_1419: Tensor[(6, 84), float64]) -> (Tensor[(13, 6, 12), float64], Tensor[(13, 6, 12), float64], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(504), float64], uint16, Tensor[(4, 48), uint16], Tensor[(6, 84), float64]) {
  %400 = cast(%var_1390, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
  %401 = cast(%var_1393, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
  %402 = shape_of(%var_1390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_1390, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %405 = cast(meta[relay.Constant][17] /* ty=Tensor[(576), uint64] */, dtype="uint64") /* ty=Tensor[(576), uint64] */;
  %406 = reshape(%405, newshape=[9, 4, 16]) /* ty=Tensor[(9, 4, 16), uint64] */;
  %407 = @func_60(%406) /* ty=(Tensor[(9, 4, 16), float32],) */;
  %408 = cast(meta[relay.Constant][18] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %409 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 48), uint16] */, dtype="uint16") /* ty=Tensor[(4, 48), uint16] */;
  %410 = cast(%var_1419, dtype="float64") /* ty=Tensor[(6, 84), float64] */;
  %411 = reshape(%408, newshape=[]) /* ty=uint16 */;
  %412 = reshape(%409, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %413 = reshape(%410, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %414 = @func_720(%411, %412, %413) /* ty=(Tensor[(16, 4, 3), uint16], Tensor[(8, 15, 3), float64], Tensor[(9, 4, 16), float32], Tensor[(504), float64]) */;
  %415 = exp(%400) /* ty=Tensor[(13, 6, 12), float64] */;
  %416 = power(%403, %404) /* ty=Tensor[(13, 6, 12), float64] */;
  %417 = %407.0;
  %418 = %414.3;
  (%415, %416, %417, meta[relay.Constant][17] /* ty=Tensor[(576), uint64] */, %418, meta[relay.Constant][18] /* ty=uint16 */, meta[relay.Constant][19] /* ty=Tensor[(4, 48), uint16] */, %var_1419)
}

def @func_4140(%var_4113: Tensor[(16, 2, 11), int16], %var_4114: Tensor[(16, 2, 11), int16]) -> (Tensor[(16, 2, 11), bool], float64, float64) {
  %419 = cast(%var_4114, dtype="bool") /* ty=Tensor[(16, 2, 11), bool] */;
  %420 = shape_of(%var_4113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%var_4113, dtype="bool") /* ty=Tensor[(16, 2, 11), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %423 = not_equal(%421, %422) /* ty=Tensor[(16, 2, 11), bool] */;
  %424 = @func_3063() /* ty=float64 */;
  %425 = @func_3000() /* ty=float64 */;
  (%423, %424, %425)
}

def @func_3281() -> (Tensor[(252, 2), float32], Tensor[(3, 4, ?), bool], Tensor[(3, 4, ?), float32]) {
  %426 = @func_3162() /* ty=(Tensor[(252, 2), float32],) */;
  %427 = @func_1869() /* ty=Tensor[(3, 4, ?), int8] */;
  %428 = cast(%427, dtype="float64") /* ty=Tensor[(3, 4, ?), float64] */;
  %429 = exp(%428) /* ty=Tensor[(3, 4, ?), float64] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
  %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%429, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %434 = cast(%427, dtype="float32") /* ty=Tensor[(3, 4, ?), float32] */;
  %435 = %426.0;
  %436 = not_equal(%432, %433) /* ty=Tensor[(3, 4, ?), bool] */;
  %437 = log2(%434) /* ty=Tensor[(3, 4, ?), float32] */;
  (%435, %436, %437)
}

def @func_2250(%var_2237: Tensor[(225), float64], %var_2243: Tensor[(144), int8], %var_2248: Tensor[(1, 576), uint64]) -> (Tensor[(12), float64], Tensor[(15, 5, 3), bool], Tensor[(225), float64], Tensor[(12), float64], Tensor[(144), int8], Tensor[(9, 4, 16), float32], Tensor[(1, 576), uint64]) {
  %438 = @func_1701() /* ty=(float64, Tensor[(2, 2, 3), float64], Tensor[(12), float64]) */;
  %439 = cast(%var_2237, dtype="float64") /* ty=Tensor[(225), float64] */;
  %440 = cast(%var_2237, dtype="float64") /* ty=Tensor[(225), float64] */;
  %441 = reshape(%439, newshape=[15, 5, 3]) /* ty=Tensor[(15, 5, 3), float64] */;
  %442 = reshape(%440, newshape=[15, 5, 3]) /* ty=Tensor[(15, 5, 3), float64] */;
  %443 = cast(%var_2243, dtype="int8") /* ty=Tensor[(144), int8] */;
  %444 = cast(%var_2243, dtype="int8") /* ty=Tensor[(144), int8] */;
  %445 = %438.2;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(12), float64] */;
  %447 = reshape(%443, newshape=[6, 8, 3]) /* ty=Tensor[(6, 8, 3), int8] */;
  %448 = reshape(%444, newshape=[6, 8, 3]) /* ty=Tensor[(6, 8, 3), int8] */;
  %449 = reshape(%446, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %450 = @func_894(%447, %448, %449) /* ty=(Tensor[(6, 8, 3), int8], Tensor[(2, 2, 3), float64], Tensor[(12), float64]) */;
  %451 = cast(%var_2248, dtype="uint64") /* ty=Tensor[(1, 576), uint64] */;
  %452 = reshape(%451, newshape=[9, 4, 16]) /* ty=Tensor[(9, 4, 16), uint64] */;
  %453 = @func_60(%452) /* ty=(Tensor[(9, 4, 16), float32],) */;
  %454 = @func_2110(%441, %442) /* ty=Tensor[(15, 5, 3), bool] */;
  %455 = %450.2;
  %456 = %453.0;
  (%445, %454, %var_2237, %455, %var_2243, %456, %var_2248)
}

def @func_1999() -> (Tensor[(252, 2), float32], Tensor[(252, 2), float32]) {
  %457 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
  %458 = %457.2;
  %459 = cast(%458, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %460 = cast(%458, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %461 = cosh(%459) /* ty=Tensor[(252, 2), float32] */;
  %462 = exp(%460) /* ty=Tensor[(252, 2), float32] */;
  (%461, %462)
}

def @func_3348() -> float64 {
  %463 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
  %463.0
}

def @func_3728() -> (float64, Tensor[(9, 4, 16), float32]) {
  %464 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
  %465 = %464.0;
  %466 = @func_3619() /* ty=Tensor[(9, 4, 16), float32] */;
  (%465, %466)
}

def @func_894(%var_875: Tensor[(6, 8, 3), int8], %var_876: Tensor[(6, 8, 3), int8], %var_892: Tensor[(12), float64]) -> (Tensor[(6, 8, 3), int8], Tensor[(2, 2, 3), float64], Tensor[(12), float64]) {
  %467 = cast(%var_876, dtype="int8") /* ty=Tensor[(6, 8, 3), int8] */;
  %468 = shape_of(%var_875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%var_875, dtype="int8") /* ty=Tensor[(6, 8, 3), int8] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %471 = cast(%var_892, dtype="float64") /* ty=Tensor[(12), float64] */;
  %472 = reshape(%471, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %473 = @func_199(%472) /* ty=(Tensor[(2, 2, 3), float64],) */;
  %474 = minimum(%469, %470) /* ty=Tensor[(6, 8, 3), int8] */;
  %475 = %473.0;
  (%474, %475, %var_892)
}

def @func_2869(%var_2851: Tensor[(5, 16, 12), float32]) -> (Tensor[(5, 16, 12), float32], Tensor[(9, 4, 16), float32], Tensor[(5, 16, 12), int16]) {
  %476 = cast(%var_2851, dtype="float32") /* ty=Tensor[(5, 16, 12), float32] */;
  %477 = sqrt(%476) /* ty=Tensor[(5, 16, 12), float32] */;
  %478 = cast(%477, dtype="float32") /* ty=Tensor[(5, 16, 12), float32] */;
  %479 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
  %480 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 16, 12), float32] */, dtype="int16") /* ty=Tensor[(5, 16, 12), int16] */;
  %481 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%477, dtype="int16") /* ty=Tensor[(5, 16, 12), int16] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %484 = acos(%478) /* ty=Tensor[(5, 16, 12), float32] */;
  %485 = %479.1;
  %486 = add(%482, %483) /* ty=Tensor[(5, 16, 12), int16] */;
  (%484, %485, %486)
}

def @func_4933() -> float64 {
  %487 = @func_4048() /* ty=(float64, float64) */;
  %487.0
}

def @func_5220() -> (Tensor[(252, 2), float32],) {
  %488 = @func_4215() /* ty=Tensor[(252, 2), float32] */;
  (%488,)
}

def @func_3869() -> (float64, Tensor[(9, 4, 16), float32], Tensor[(3, 4, ?), float64]) {
  %489 = @func_3728() /* ty=(float64, Tensor[(9, 4, 16), float32]) */;
  %490 = @func_1869() /* ty=Tensor[(3, 4, ?), int8] */;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(3, 4, ?), float64] */;
  %492 = %489.0;
  %493 = @func_3619() /* ty=Tensor[(9, 4, 16), float32] */;
  %494 = tan(%491) /* ty=Tensor[(3, 4, ?), float64] */;
  (%492, %493, %494)
}

def @func_199(%var_189: Tensor[(2, 2, 3), float64]) -> (Tensor[(2, 2, 3), float64],) {
  %495 = cast(%var_189, dtype="float64") /* ty=Tensor[(2, 2, 3), float64] */;
  %496 = asinh(%495) /* ty=Tensor[(2, 2, 3), float64] */;
  (%496,)
}

def @func_3675(%var_3632: Tensor[(5, 1, 1), int32], %var_3633: Tensor[(5, 4, 11), int32]) -> (float64, Tensor[(252, 2), bool], Tensor[(1960), int32], Tensor[(504), float32], Tensor[(5, 4, 11), float64], float64, Tensor[(9, 4, 16), float32]) {
  %497 = cast(meta[relay.Constant][21] /* ty=Tensor[(1960), int32] */, dtype="int32") /* ty=Tensor[(1960), int32] */;
  %498 = cast(meta[relay.Constant][21] /* ty=Tensor[(1960), int32] */, dtype="int32") /* ty=Tensor[(1960), int32] */;
  %499 = cast(meta[relay.Constant][22] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %500 = reshape(%497, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), int32] */;
  %501 = reshape(%498, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), int32] */;
  %502 = reshape(%499, newshape=[504]) /* ty=Tensor[(504), float32] */;
  %503 = @func_3128(%500, %501, %502) /* ty=(Tensor[(14, 10, 14), int32], Tensor[(252, 2), bool], Tensor[(504), float32]) */;
  %504 = cast(%var_3632, dtype="bool") /* ty=Tensor[(5, 1, 1), bool] */;
  %505 = cast(%var_3633, dtype="bool") /* ty=Tensor[(5, 4, 11), bool] */;
  %506 = greater(%504, %505) /* ty=Tensor[(5, 4, 11), bool] */;
  %507 = cast(%506, dtype="float32") /* ty=Tensor[(5, 4, 11), float32] */;
  %508 = asinh(%507) /* ty=Tensor[(5, 4, 11), float32] */;
  %509 = cast(%508, dtype="float64") /* ty=Tensor[(5, 4, 11), float64] */;
  %510 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
  %511 = @func_3000() /* ty=float64 */;
  %512 = %503.1;
  %513 = exp(%509) /* ty=Tensor[(5, 4, 11), float64] */;
  %514 = %510.0;
  %515 = @func_3619() /* ty=Tensor[(9, 4, 16), float32] */;
  (%511, %512, meta[relay.Constant][21] /* ty=Tensor[(1960), int32] */, meta[relay.Constant][22] /* ty=Tensor[(504), float32] */, %513, %514, %515)
}

def @func_2560(%var_2487: Tensor[(225), float64], %var_2516: Tensor[(2, 288), uint64], %var_2558: Tensor[(504), float64]) -> (Tensor[(1430), float32], Tensor[(12), float64], Tensor[(225), float64], Tensor[(2, 288), bool], Tensor[(24, 6), bool], Tensor[(24, 6), bool], Tensor[(8, 15, 3), float64], Tensor[(40), float64], Tensor[(192), uint16], Tensor[(504), float64]) {
  %516 = cast(%var_2487, dtype="float64") /* ty=Tensor[(225), float64] */;
  %517 = cast(meta[relay.Constant][24] /* ty=Tensor[(24, 6), int8] */, dtype="int8") /* ty=Tensor[(24, 6), int8] */;
  %518 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 288), uint64] */, dtype="uint64") /* ty=Tensor[(2, 288), uint64] */;
  %519 = reshape(%516, newshape=[225]) /* ty=Tensor[(225), float64] */;
  %520 = reshape(%517, newshape=[144]) /* ty=Tensor[(144), int8] */;
  %521 = reshape(%518, newshape=[1, 576]) /* ty=Tensor[(1, 576), uint64] */;
  %522 = @func_2250(%519, %520, %521) /* ty=(Tensor[(12), float64], Tensor[(15, 5, 3), bool], Tensor[(225), float64], Tensor[(12), float64], Tensor[(144), int8], Tensor[(9, 4, 16), float32], Tensor[(1, 576), uint64]) */;
  %523 = cast(%var_2516, dtype="bool") /* ty=Tensor[(2, 288), bool] */;
  %524 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(2, 288), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %525 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 288), uint64] */, dtype="bool") /* ty=Tensor[(2, 288), bool] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %527 = @func_1900() /* ty=(float64,) */;
  %528 = %527.0;
  %529 = cast(meta[relay.Constant][24] /* ty=Tensor[(24, 6), int8] */, dtype="bool") /* ty=Tensor[(24, 6), bool] */;
  %530 = cast(%528, dtype="bool") /* ty=bool */;
  %531 = cast(meta[relay.Constant][24] /* ty=Tensor[(24, 6), int8] */, dtype="float64") /* ty=Tensor[(24, 6), float64] */;
  %532 = exp(%531) /* ty=Tensor[(24, 6), float64] */;
  %533 = cast(meta[relay.Constant][23] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %534 = cast(meta[relay.Constant][23] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %535 = cast(%528, dtype="float64") /* ty=float64 */;
  %536 = reshape(%533, newshape=[11, 10, 13]) /* ty=Tensor[(11, 10, 13), float32] */;
  %537 = reshape(%534, newshape=[11, 10, 13]) /* ty=Tensor[(11, 10, 13), float32] */;
  %538 = reshape(%535, newshape=[]) /* ty=float64 */;
  %539 = @func_1485(%536, %537, %538) /* ty=(Tensor[(11, 10, 13), int16], Tensor[(8, 15, 3), uint64], Tensor[(256), float32], float64, Tensor[(11, 10, 13), float64]) */;
  %540 = %539.3;
  %541 = cast(%532, dtype="bool") /* ty=Tensor[(24, 6), bool] */;
  %542 = cast(%540, dtype="bool") /* ty=bool */;
  %543 = cast(meta[relay.Constant][26] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %544 = cast(meta[relay.Constant][27] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %545 = cast(%var_2558, dtype="float64") /* ty=Tensor[(504), float64] */;
  %546 = reshape(%543, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %547 = reshape(%544, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %548 = reshape(%545, newshape=[252, 2]) /* ty=Tensor[(252, 2), float64] */;
  %549 = @func_993(%546, %547, %548) /* ty=(Tensor[(8, 15, 3), float64], float64, Tensor[(5, 2, 4), float32], Tensor[(5, 2, 4), float32], Tensor[(8, 15, 3), float64], Tensor[(192), uint16], Tensor[(252, 2), float64]) */;
  %550 = %522.0;
  %551 = not_equal(%525, %526) /* ty=Tensor[(2, 288), bool] */;
  %552 = less(%529, %530) /* ty=Tensor[(24, 6), bool] */;
  %553 = equal(%541, %542) /* ty=Tensor[(24, 6), bool] */;
  %554 = %549.4;
  (meta[relay.Constant][23] /* ty=Tensor[(1430), float32] */, %550, %var_2487, %551, %552, %553, %554, meta[relay.Constant][26] /* ty=Tensor[(40), float64] */, meta[relay.Constant][27] /* ty=Tensor[(192), uint16] */, %var_2558)
}

def @func_4398() -> (float64, float64, Tensor[(3, 4, ?), int8], Tensor[(3, 4, ?), int8]) {
  %555 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %556 = @func_4048() /* ty=(float64, float64) */;
  %557 = @func_1956() /* ty=(Tensor[(3, 4, ?), int8],) */;
  %558 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %559 = %555.2;
  %560 = %556.0;
  %561 = %557.0;
  %562 = %558.3;
  (%559, %560, %561, %562)
}

def @func_1573() -> (float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) {
  %563 = cast(meta[relay.Constant][28] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %564 = cast(meta[relay.Constant][28] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %565 = cast(9.13625f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %566 = reshape(%563, newshape=[11, 10, 13]) /* ty=Tensor[(11, 10, 13), float32] */;
  %567 = reshape(%564, newshape=[11, 10, 13]) /* ty=Tensor[(11, 10, 13), float32] */;
  %568 = reshape(%565, newshape=[]) /* ty=float64 */;
  %569 = @func_1485(%566, %567, %568) /* ty=(Tensor[(11, 10, 13), int16], Tensor[(8, 15, 3), uint64], Tensor[(256), float32], float64, Tensor[(11, 10, 13), float64]) */;
  %570 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 4, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 4, 1), float32] */;
  %571 = sinh(%570) /* ty=Tensor[(3, 4, 1), float32] */;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(3, 4, 1), float64] */;
  %573 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(3, 4, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 4, 1), float32] */, dtype="float64") /* ty=Tensor[(3, 4, 1), float64] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %576 = minimum(%574, %575) /* ty=Tensor[(3, 4, ?), float64] */;
  %577 = cast(%571, dtype="bool") /* ty=Tensor[(3, 4, 1), bool] */;
  %578 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(3, 4, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 4, 1), float32] */, dtype="bool") /* ty=Tensor[(3, 4, 1), bool] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %581 = greater_equal(%579, %580) /* ty=Tensor[(3, 4, ?), bool] */;
  %582 = cast(%581, dtype="int8") /* ty=Tensor[(3, 4, ?), int8] */;
  %583 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%576, dtype="int8") /* ty=Tensor[(3, 4, ?), int8] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %586 = %569.3;
  %587 = subtract(%584, %585) /* ty=Tensor[(3, 4, ?), int8] */;
  (%586, meta[relay.Constant][28] /* ty=Tensor[(1430), float32] */, 9.13625f64 /* ty=float64 */, %587)
}

def @func_3619() -> Tensor[(9, 4, 16), float32] {
  %588 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
  %588.1
}

def @func_3461(%var_3452: Tensor[(3, 4, 8), int8]) -> (Tensor[(3, 4, 8), uint64], Tensor[(3, 4, 8), bool]) {
  %589 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %590 = %589.3;
  %591 = cast(%590, dtype="uint64") /* ty=Tensor[(3, 4, ?), uint64] */;
  %592 = cast(%var_3452, dtype="uint64") /* ty=Tensor[(3, 4, 8), uint64] */;
  %593 = cast(%590, dtype="float32") /* ty=Tensor[(3, 4, ?), float32] */;
  %594 = acosh(%593) /* ty=Tensor[(3, 4, ?), float32] */;
  %595 = cast(%594, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
  %596 = cast(%var_3452, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
  %597 = bitwise_or(%591, %592) /* ty=Tensor[(3, 4, 8), uint64] */;
  %598 = less(%595, %596) /* ty=Tensor[(3, 4, 8), bool] */;
  (%597, %598)
}

def @func_5498(%var_5480: Tensor[(4, 4, 3), uint64], %var_5481: Tensor[(4, 4, 3), uint64]) -> (Tensor[(4, 4, 3), bool], Tensor[(252, 2), float32], Tensor[(4, 4, 3), float32]) {
  %599 = cast(%var_5481, dtype="bool") /* ty=Tensor[(4, 4, 3), bool] */;
  %600 = shape_of(%var_5480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%var_5480, dtype="bool") /* ty=Tensor[(4, 4, 3), bool] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %603 = @func_3226() /* ty=(Tensor[(252, 2), float32],) */;
  %604 = cast(%var_5480, dtype="float32") /* ty=Tensor[(4, 4, 3), float32] */;
  %605 = less(%601, %602) /* ty=Tensor[(4, 4, 3), bool] */;
  %606 = %603.0;
  %607 = cos(%604) /* ty=Tensor[(4, 4, 3), float32] */;
  (%605, %606, %607)
}

def @func_5558(%var_5530: Tensor[(9, 16, 6), float32]) -> Tensor[(9, 16, 6), float32] {
  %608 = cast(%var_5530, dtype="float32") /* ty=Tensor[(9, 16, 6), float32] */;
  atanh(%608) /* ty=Tensor[(9, 16, 6), float32] */
}

def @main(%var_5565: Tensor[(12, 1, 6), float32]) -> (Tensor[(1430), float32], Tensor[(12, ?, 6), float32]) {
  %609 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %610 = cast(%var_5565, dtype="float32") /* ty=Tensor[(12, 1, 6), float32] */;
  %611 = sqrt(%610) /* ty=Tensor[(12, 1, 6), float32] */;
  %612 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 1, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 1, 6), float32] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="float32") /* ty=Tensor[(12, 1, 6), float32] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %616 = %609.1;
  %617 = floor_divide(%614, %615) /* ty=Tensor[(12, ?, 6), float32] */;
  (%616, %617)
}

def @func_4666(%var_4646: Tensor[(28, 32), uint64], %var_4648: Tensor[(504), float64]) -> (Tensor[(504), float64], Tensor[(28, 32), uint64], Tensor[(36, 26), float64], Tensor[(3, 4, 504), float32]) {
  %618 = cast(%var_4646, dtype="uint64") /* ty=Tensor[(28, 32), uint64] */;
  %619 = cast(%var_4646, dtype="uint64") /* ty=Tensor[(28, 32), uint64] */;
  %620 = cast(%var_4646, dtype="uint16") /* ty=Tensor[(28, 32), uint16] */;
  %621 = cast(%var_4646, dtype="int64") /* ty=Tensor[(28, 32), int64] */;
  %622 = cast(meta[relay.Constant][31] /* ty=Tensor[(36, 26), float64] */, dtype="float64") /* ty=Tensor[(36, 26), float64] */;
  %623 = cast(%var_4648, dtype="float64") /* ty=Tensor[(504), float64] */;
  %624 = reshape(%618, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), uint64] */;
  %625 = reshape(%619, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), uint64] */;
  %626 = reshape(%620, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), uint16] */;
  %627 = reshape(%621, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), int64] */;
  %628 = reshape(%622, newshape=[936]) /* ty=Tensor[(936), float64] */;
  %629 = reshape(%623, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %630 = @func_1825(%624, %625, %626, %627, %628, %629) /* ty=(Tensor[(3, 4, 3), float64], Tensor[(14, 8, 8), int64], Tensor[(14, 8, 8), int32], Tensor[(9, 4, 16), float32], Tensor[(936), float64], Tensor[(504), float64]) */;
  %631 = @func_4093() /* ty=(Tensor[(3, 4, ?), int8],) */;
  %632 = %631.0;
  %633 = cast(%var_4648, dtype="bool") /* ty=Tensor[(504), bool] */;
  %634 = cast(%632, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
  %635 = logical_or(%633, %634) /* ty=Tensor[(3, 4, 504), bool] */;
  %636 = cast(%635, dtype="float32") /* ty=Tensor[(3, 4, 504), float32] */;
  %637 = %630.5;
  %638 = sqrt(%636) /* ty=Tensor[(3, 4, 504), float32] */;
  (%637, %var_4646, meta[relay.Constant][31] /* ty=Tensor[(36, 26), float64] */, %638)
}

def @func_130(%var_116: Tensor[(3, 1, 10), uint8], %var_117: Tensor[(3, 9, 10), uint8]) -> (Tensor[(3, 9, 10), uint8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64]) {
  %639 = cast(%var_116, dtype="uint8") /* ty=Tensor[(3, 1, 10), uint8] */;
  %640 = cast(%var_117, dtype="uint8") /* ty=Tensor[(3, 9, 10), uint8] */;
  %641 = cast(meta[relay.Constant][32] /* ty=Tensor[(576), uint64] */, dtype="uint64") /* ty=Tensor[(576), uint64] */;
  %642 = reshape(%641, newshape=[9, 4, 16]) /* ty=Tensor[(9, 4, 16), uint64] */;
  %643 = @func_60(%642) /* ty=(Tensor[(9, 4, 16), float32],) */;
  %644 = add(%639, %640) /* ty=Tensor[(3, 9, 10), uint8] */;
  %645 = %643.0;
  (%644, %645, meta[relay.Constant][32] /* ty=Tensor[(576), uint64] */)
}

def @func_4870() -> (float64,) {
  %646 = @func_4561() /* ty=(float64,) */;
  %647 = %646.0;
  (%647,)
}

def @func_1669() -> (float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) {
  %648 = cast(meta[relay.Constant][33] /* ty=Tensor[(252, 2), float64] */, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %649 = reshape(%648, newshape=[12, 14, 3]) /* ty=Tensor[(12, 14, 3), float64] */;
  %650 = @func_368(%649) /* ty=(Tensor[(12, 14, 3), float64], Tensor[(12, 14, 3), int8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(12, 14, 3), float64]) */;
  %651 = @func_1598() /* ty=float64 */;
  %652 = %650.2;
  (%651, %652, meta[relay.Constant][33] /* ty=Tensor[(252, 2), float64] */)
}

def @func_4093() -> (Tensor[(3, 4, ?), int8],) {
  %653 = @func_1956() /* ty=(Tensor[(3, 4, ?), int8],) */;
  %654 = %653.0;
  (%654,)
}

def @func_3128(%var_3096: Tensor[(14, 10, 14), int32], %var_3097: Tensor[(14, 10, 14), int32], %var_3124: Tensor[(504), float32]) -> (Tensor[(14, 10, 14), int32], Tensor[(252, 2), bool], Tensor[(504), float32]) {
  %655 = cast(%var_3097, dtype="int32") /* ty=Tensor[(14, 10, 14), int32] */;
  %656 = shape_of(%var_3096, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%var_3096, dtype="int32") /* ty=Tensor[(14, 10, 14), int32] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %659 = cast(%var_3124, dtype="float32") /* ty=Tensor[(504), float32] */;
  %660 = cast(%var_3124, dtype="float32") /* ty=Tensor[(504), float32] */;
  %661 = reshape(%659, newshape=[252, 2]) /* ty=Tensor[(252, 2), float32] */;
  %662 = reshape(%660, newshape=[252, 2]) /* ty=Tensor[(252, 2), float32] */;
  %663 = @func_2675(%661, %662) /* ty=(Tensor[(252, 2), bool], Tensor[(252, 2), float32]) */;
  %664 = multiply(%657, %658) /* ty=Tensor[(14, 10, 14), int32] */;
  %665 = %663.0;
  (%664, %665, %var_3124)
}

def @func_3882() -> (float64, Tensor[(252, 2), float32]) {
  %666 = @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */;
  %667 = @func_3348() /* ty=float64 */;
  %668 = %666.1;
  (%667, %668)
}

def @func_5193(%var_5135: Tensor[(252, 2), float32], %var_5141: Tensor[(180), int8], %var_5162: Tensor[(936, 1), float64]) -> (Tensor[(252, 2), uint16], Tensor[(180), int8], Tensor[(7, 9, 11), bool], Tensor[(693), uint64], Tensor[(6, 84), float64], Tensor[(936, 1), float64], Tensor[(3, 4, 15), bool]) {
  %669 = @func_3226() /* ty=(Tensor[(252, 2), float32],) */;
  %670 = %669.0;
  %671 = cast(%var_5135, dtype="uint16") /* ty=Tensor[(252, 2), uint16] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(2), int32] */;
  %673 = cast(%670, dtype="uint16") /* ty=Tensor[(252, 2), uint16] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %675 = cast(meta[relay.Constant][34] /* ty=Tensor[(693), uint64] */, dtype="uint64") /* ty=Tensor[(693), uint64] */;
  %676 = cast(meta[relay.Constant][34] /* ty=Tensor[(693), uint64] */, dtype="uint64") /* ty=Tensor[(693), uint64] */;
  %677 = reshape(%675, newshape=[7, 9, 11]) /* ty=Tensor[(7, 9, 11), uint64] */;
  %678 = reshape(%676, newshape=[7, 9, 11]) /* ty=Tensor[(7, 9, 11), uint64] */;
  %679 = @func_1941(%677, %678) /* ty=(Tensor[(7, 9, 11), bool], Tensor[(7, 9, 11), float32], float64) */;
  %680 = cast(%var_5162, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
  %681 = cast(%var_5162, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
  %682 = cast(%670, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %683 = reshape(%680, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
  %684 = reshape(%681, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
  %685 = reshape(%682, newshape=[6, 84]) /* ty=Tensor[(6, 84), float64] */;
  %686 = @func_1425(%683, %684, %685) /* ty=(Tensor[(13, 6, 12), float64], Tensor[(13, 6, 12), float64], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(504), float64], uint16, Tensor[(4, 48), uint16], Tensor[(6, 84), float64]) */;
  %687 = cast(%var_5141, dtype="int8") /* ty=Tensor[(180), int8] */;
  %688 = reshape(%687, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), int8] */;
  %689 = @func_2452(%688) /* ty=(Tensor[(3, 4, 15), bool], Tensor[(3, 4, 15), float64]) */;
  %690 = %689.0;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(3, 4, 15), float32] */;
  %692 = tan(%691) /* ty=Tensor[(3, 4, 15), float32] */;
  %693 = cast(%692, dtype="float64") /* ty=Tensor[(3, 4, 15), float64] */;
  %694 = atan(%693) /* ty=Tensor[(3, 4, 15), float64] */;
  %695 = cast(%692, dtype="bool") /* ty=Tensor[(3, 4, 15), bool] */;
  %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%694, dtype="bool") /* ty=Tensor[(3, 4, 15), bool] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %699 = multiply(%673, %674) /* ty=Tensor[(252, 2), uint16] */;
  %700 = %679.0;
  %701 = %686.7;
  %702 = not_equal(%697, %698) /* ty=Tensor[(3, 4, 15), bool] */;
  (%699, %var_5141, %700, meta[relay.Constant][34] /* ty=Tensor[(693), uint64] */, %701, %var_5162, %702)
}

def @func_4001(%var_3923: Tensor[(252, 2), float32]) -> (Tensor[(252, 2), bool], Tensor[(252, 2), bool], Tensor[(252, 2), bool], Tensor[(252, 2), float32]) {
  %703 = @func_3014() /* ty=Tensor[(252, 2), float32] */;
  %704 = cast(%var_3923, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
  %705 = shape_of(%703, dtype="int32") /* ty=Tensor[(2), int32] */;
  %706 = cast(%703, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %708 = cast(%703, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %709 = log2(%708) /* ty=Tensor[(252, 2), float32] */;
  %710 = cast(meta[relay.Constant][35] /* ty=Tensor[(252, 2), float32] */, dtype="uint32") /* ty=Tensor[(252, 2), uint32] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(2), int32] */;
  %712 = cast(%709, dtype="uint32") /* ty=Tensor[(252, 2), uint32] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %714 = bitwise_and(%712, %713) /* ty=Tensor[(252, 2), uint32] */;
  %715 = cast(%709, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(2), int32] */;
  %717 = cast(%714, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %719 = cast(%709, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
  %720 = shape_of(%714, dtype="int32") /* ty=Tensor[(2), int32] */;
  %721 = cast(%714, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %723 = cast(meta[relay.Constant][35] /* ty=Tensor[(252, 2), float32] */, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %724 = less(%706, %707) /* ty=Tensor[(252, 2), bool] */;
  %725 = logical_and(%717, %718) /* ty=Tensor[(252, 2), bool] */;
  %726 = equal(%721, %722) /* ty=Tensor[(252, 2), bool] */;
  %727 = sinh(%723) /* ty=Tensor[(252, 2), float32] */;
  (%724, %725, %726, %727)
}

def @func_2945() -> (float64, Tensor[(3, 4, 15), float64], Tensor[(180, 1), int8], Tensor[(252, 2), int16]) {
  %728 = cast(meta[relay.Constant][36] /* ty=Tensor[(180, 1), int8] */, dtype="int8") /* ty=Tensor[(180, 1), int8] */;
  %729 = reshape(%728, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %730 = @func_2613(%729) /* ty=(Tensor[(3, 4, 15), float64], Tensor[(180), int8], Tensor[(252, 2), int16]) */;
  %731 = %730.0;
  %732 = cast(%731, dtype="int8") /* ty=Tensor[(3, 4, 15), int8] */;
  %733 = reshape(%732, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %734 = @func_2613(%733) /* ty=(Tensor[(3, 4, 15), float64], Tensor[(180), int8], Tensor[(252, 2), int16]) */;
  %735 = @func_1598() /* ty=float64 */;
  %736 = %734.2;
  (%735, %731, meta[relay.Constant][36] /* ty=Tensor[(180, 1), int8] */, %736)
}

def @func_2452(%var_2404: Tensor[(3, 4, 15), int8]) -> (Tensor[(3, 4, 15), bool], Tensor[(3, 4, 15), float64]) {
  %737 = @func_1869() /* ty=Tensor[(3, 4, ?), int8] */;
  %738 = cast(%737, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
  %739 = cast(%var_2404, dtype="bool") /* ty=Tensor[(3, 4, 15), bool] */;
  %740 = cast(%var_2404, dtype="float64") /* ty=Tensor[(3, 4, 15), float64] */;
  %741 = equal(%738, %739) /* ty=Tensor[(3, 4, 15), bool] */;
  %742 = cosh(%740) /* ty=Tensor[(3, 4, 15), float64] */;
  (%741, %742)
}

def @func_4215() -> Tensor[(252, 2), float32] {
  %743 = @func_3226() /* ty=(Tensor[(252, 2), float32],) */;
  %743.0
}

def @func_3063() -> float64 {
  %744 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
  %744.0
}

def @func_2110(%var_2090: Tensor[(15, 5, 3), float64], %var_2106: Tensor[(15, 5, 3), float64]) -> Tensor[(15, 5, 3), bool] {
  %745 = cast(%var_2090, dtype="float64") /* ty=Tensor[(15, 5, 3), float64] */;
  %746 = log10(%745) /* ty=Tensor[(15, 5, 3), float64] */;
  %747 = cast(%var_2106, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%749, %750) /* ty=Tensor[(15, 5, 3), bool] */
}

def @func_1869() -> Tensor[(3, 4, ?), int8] {
  %751 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
  %751.1
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4144(%var_4142: Tensor[(16, 2, 11), int16], %var_4143: Tensor[(16, 2, 11), int16]) -> (Tensor[(16, 2, 11), bool], float64, float64) {
  @func_4140(%var_4142, %var_4143) /* ty=(Tensor[(16, 2, 11), bool], float64, float64) */
}

def @func_3884() -> (float64, Tensor[(252, 2), float32]) {
  @func_3882() /* ty=(float64, Tensor[(252, 2), float32]) */
}

def @func_3014() -> Tensor[(252, 2), float32] {
  %0 = @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */;
  %0.1
}

def @func_1286(%var_1283: Tensor[(8, 4, 8), float32], %var_1284: Tensor[(8, 4, 8), float32], %var_1285: float64) -> (Tensor[(8, 4, 8), float32], Tensor[(8, 15, 3), uint64], float64) {
  %10 = fn (%var_1252: Tensor[(8, 4, 8), float32], %var_1253: Tensor[(8, 4, 8), float32], %var_1278: float64) -> (Tensor[(8, 4, 8), float32], Tensor[(8, 15, 3), uint64], float64) {
    %1 = cast(%var_1253, dtype="float32") /* ty=Tensor[(8, 4, 8), float32] */;
    %2 = shape_of(%var_1252, dtype="int32") /* ty=Tensor[(3), int32] */;
    %3 = cast(%var_1252, dtype="float32") /* ty=Tensor[(8, 4, 8), float32] */;
    %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %5 = cast(%var_1278, dtype="float64") /* ty=float64 */;
    %6 = reshape(%5, newshape=[]) /* ty=float64 */;
    %7 = @func_473(%6) /* ty=(Tensor[(8, 15, 3), float64], Tensor[(8, 15, 3), uint64]) */;
    %8 = subtract(%3, %4) /* ty=Tensor[(8, 4, 8), float32] */;
    %9 = %7.1;
    (%8, %9, %var_1278)
  };
  %10(%var_1283, %var_1284, %var_1285) /* ty=(Tensor[(8, 4, 8), float32], Tensor[(8, 15, 3), uint64], float64) */
}

def @main(%var_5565: Tensor[(12, 1, 6), float32]) -> (Tensor[(1430), float32], Tensor[(12, ?, 6), float32]) {
  %11 = @func_1575() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %12 = cast(%var_5565, dtype="float32") /* ty=Tensor[(12, 1, 6), float32] */;
  %13 = sqrt(%12) /* ty=Tensor[(12, 1, 6), float32] */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 1, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 1, 6), float32] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="float32") /* ty=Tensor[(12, 1, 6), float32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %18 = %11.1;
  %19 = floor_divide(%16, %17) /* ty=Tensor[(12, ?, 6), float32] */;
  (%18, %19)
}

def @func_3037() -> Tensor[(252, 2), float32] {
  %23 = fn () -> Tensor[(252, 2), float32] {
    %20 = @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */;
    %21 = %20.0;
    %22 = cast(%21, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
    asinh(%22) /* ty=Tensor[(252, 2), float32] */
  };
  %23() /* ty=Tensor[(252, 2), float32] */
}

def @func_1670() -> (float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) {
  %29 = fn () -> (float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) {
    %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(252, 2), float64] */, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
    %25 = reshape(%24, newshape=[12, 14, 3]) /* ty=Tensor[(12, 14, 3), float64] */;
    %26 = @func_368(%25) /* ty=(Tensor[(12, 14, 3), float64], Tensor[(12, 14, 3), int8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(12, 14, 3), float64]) */;
    %27 = @func_1598() /* ty=float64 */;
    %28 = %26.2;
    (%27, %28, meta[relay.Constant][1] /* ty=Tensor[(252, 2), float64] */)
  };
  %29() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */
}

def @func_1958() -> (Tensor[(3, 4, ?), int8],) {
  @func_1956() /* ty=(Tensor[(3, 4, ?), int8],) */
}

def @func_4399() -> (float64, float64, Tensor[(3, 4, ?), int8], Tensor[(3, 4, ?), int8]) {
  %38 = fn () -> (float64, float64, Tensor[(3, 4, ?), int8], Tensor[(3, 4, ?), int8]) {
    %30 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
    %31 = @func_4048() /* ty=(float64, float64) */;
    %32 = @func_1956() /* ty=(Tensor[(3, 4, ?), int8],) */;
    %33 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
    %34 = %30.2;
    %35 = %31.0;
    %36 = %32.0;
    %37 = %33.3;
    (%34, %35, %36, %37)
  };
  %38() /* ty=(float64, float64, Tensor[(3, 4, ?), int8], Tensor[(3, 4, ?), int8]) */
}

def @func_4732(%var_4729: Tensor[(2, 448), uint64], %var_4730: Tensor[(936), float64], %var_4731: Tensor[(84), int8]) -> (Tensor[(9, 4, 16), float32], Tensor[(2, 448), uint64], Tensor[(936), float64], Tensor[(504), float64], Tensor[(84), int8], Tensor[(252, 2), float64]) {
  %67 = fn (%var_4699: Tensor[(2, 448), uint64], %var_4700: Tensor[(936), float64], %var_4710: Tensor[(84), int8]) -> (Tensor[(9, 4, 16), float32], Tensor[(2, 448), uint64], Tensor[(936), float64], Tensor[(504), float64], Tensor[(84), int8], Tensor[(252, 2), float64]) {
    %39 = cast(%var_4699, dtype="uint64") /* ty=Tensor[(2, 448), uint64] */;
    %40 = cast(%var_4699, dtype="uint64") /* ty=Tensor[(2, 448), uint64] */;
    %41 = cast(%var_4699, dtype="uint16") /* ty=Tensor[(2, 448), uint16] */;
    %42 = cast(%var_4699, dtype="int64") /* ty=Tensor[(2, 448), int64] */;
    %43 = cast(%var_4700, dtype="float64") /* ty=Tensor[(936), float64] */;
    %44 = @func_4215() /* ty=Tensor[(252, 2), float32] */;
    %45 = cast(%44, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
    %46 = reshape(%39, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), uint64] */;
    %47 = reshape(%40, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), uint64] */;
    %48 = reshape(%41, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), uint16] */;
    %49 = reshape(%42, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), int64] */;
    %50 = reshape(%43, newshape=[936]) /* ty=Tensor[(936), float64] */;
    %51 = reshape(%45, newshape=[504]) /* ty=Tensor[(504), float64] */;
    %52 = @func_1825(%46, %47, %48, %49, %50, %51) /* ty=(Tensor[(3, 4, 3), float64], Tensor[(14, 8, 8), int64], Tensor[(14, 8, 8), int32], Tensor[(9, 4, 16), float32], Tensor[(936), float64], Tensor[(504), float64]) */;
    %53 = cast(%var_4710, dtype="int8") /* ty=Tensor[(84), int8] */;
    %54 = cast(%44, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
    %55 = reshape(%53, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), int8] */;
    %56 = reshape(%54, newshape=[504]) /* ty=Tensor[(504), float64] */;
    %57 = @func_2976(%55, %56) /* ty=(Tensor[(3, 4, 7), bool], Tensor[(3, 4, ?), int8], Tensor[(192), uint16], Tensor[(40), float64], Tensor[(192), uint16], Tensor[(504), float64]) */;
    %58 = cast(%44, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
    %59 = cos(%58) /* ty=Tensor[(252, 2), float32] */;
    %60 = cast(%44, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
    %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(2), int32] */;
    %62 = cast(%59, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
    %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %64 = %52.3;
    %65 = %57.5;
    %66 = power(%62, %63) /* ty=Tensor[(252, 2), float64] */;
    (%64, %var_4699, %var_4700, %65, %var_4710, %66)
  };
  %67(%var_4729, %var_4730, %var_4731) /* ty=(Tensor[(9, 4, 16), float32], Tensor[(2, 448), uint64], Tensor[(936), float64], Tensor[(504), float64], Tensor[(84), int8], Tensor[(252, 2), float64]) */
}

def @func_2325() -> float64 {
  %68 = @func_1900() /* ty=(float64,) */;
  %68.0
}

def @func_1901() -> (float64,) {
  %71 = fn () -> (float64,) {
    %69 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
    %70 = %69.0;
    (%70,)
  };
  %71() /* ty=(float64,) */
}

def @func_2744(%var_2740: Tensor[(8, 3, 5), int32], %var_2741: Tensor[(1, 936), float64], %var_2742: Tensor[(504), float64], %var_2743: Tensor[(225), float64]) -> (Tensor[(8, 3, 5), bool], Tensor[(3, 4, ?), int8], float64, Tensor[(13, 6, 12), float64], Tensor[(1, 936), float64], Tensor[(504), float64], Tensor[(1430), float32], Tensor[(225), float64], Tensor[(576), uint64]) {
  %103 = fn (%var_2682: Tensor[(8, 3, 5), int32], %var_2728: Tensor[(1, 936), float64], %var_2729: Tensor[(504), float64], %var_2732: Tensor[(225), float64]) -> (Tensor[(8, 3, 5), bool], Tensor[(3, 4, ?), int8], float64, Tensor[(13, 6, 12), float64], Tensor[(1, 936), float64], Tensor[(504), float64], Tensor[(1430), float32], Tensor[(225), float64], Tensor[(576), uint64]) {
    %72 = cast(%var_2682, dtype="float32") /* ty=Tensor[(8, 3, 5), float32] */;
    %73 = atan(%72) /* ty=Tensor[(8, 3, 5), float32] */;
    %74 = cast(%var_2682, dtype="int32") /* ty=Tensor[(8, 3, 5), int32] */;
    %75 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(8, 3, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %76 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 3, 5), int32] */, dtype="int32") /* ty=Tensor[(8, 3, 5), int32] */;
    %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %78 = bitwise_xor(%76, %77) /* ty=Tensor[(8, 3, 5), int32] */;
    %79 = cast(%78, dtype="bool") /* ty=Tensor[(8, 3, 5), bool] */;
    %80 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
    %81 = cast(%73, dtype="bool") /* ty=Tensor[(8, 3, 5), bool] */;
    %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %83 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
    %84 = cast(%var_2728, dtype="float64") /* ty=Tensor[(1, 936), float64] */;
    %85 = cast(%var_2728, dtype="float64") /* ty=Tensor[(1, 936), float64] */;
    %86 = cast(%var_2729, dtype="float64") /* ty=Tensor[(504), float64] */;
    %87 = reshape(%84, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
    %88 = reshape(%85, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
    %89 = reshape(%86, newshape=[6, 84]) /* ty=Tensor[(6, 84), float64] */;
    %90 = @func_1425(%87, %88, %89) /* ty=(Tensor[(13, 6, 12), float64], Tensor[(13, 6, 12), float64], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(504), float64], uint16, Tensor[(4, 48), uint16], Tensor[(6, 84), float64]) */;
    %91 = cast(%var_2732, dtype="float64") /* ty=Tensor[(225), float64] */;
    %92 = cast(meta[relay.Constant][3] /* ty=Tensor[(576), uint64] */, dtype="uint64") /* ty=Tensor[(576), uint64] */;
    %93 = cast(%var_2729, dtype="float64") /* ty=Tensor[(504), float64] */;
    %94 = reshape(%91, newshape=[225]) /* ty=Tensor[(225), float64] */;
    %95 = reshape(%92, newshape=[2, 288]) /* ty=Tensor[(2, 288), uint64] */;
    %96 = reshape(%93, newshape=[504]) /* ty=Tensor[(504), float64] */;
    %97 = @func_2560(%94, %95, %96) /* ty=(Tensor[(1430), float32], Tensor[(12), float64], Tensor[(225), float64], Tensor[(2, 288), bool], Tensor[(24, 6), bool], Tensor[(24, 6), bool], Tensor[(8, 15, 3), float64], Tensor[(40), float64], Tensor[(192), uint16], Tensor[(504), float64]) */;
    %98 = less(%81, %82) /* ty=Tensor[(8, 3, 5), bool] */;
    %99 = %83.1;
    %100 = @func_2325() /* ty=float64 */;
    %101 = %90.0;
    %102 = %97.0;
    (%98, %99, %100, %101, %var_2728, %var_2729, %102, %var_2732, meta[relay.Constant][3] /* ty=Tensor[(576), uint64] */)
  };
  %103(%var_2740, %var_2741, %var_2742, %var_2743) /* ty=(Tensor[(8, 3, 5), bool], Tensor[(3, 4, ?), int8], float64, Tensor[(13, 6, 12), float64], Tensor[(1, 936), float64], Tensor[(504), float64], Tensor[(1430), float32], Tensor[(225), float64], Tensor[(576), uint64]) */
}

def @func_3162() -> (Tensor[(252, 2), float32],) {
  %104 = @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */;
  %105 = %104.1;
  %106 = cast(%105, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %107 = atan(%106) /* ty=Tensor[(252, 2), float32] */;
  (%107,)
}

def @func_5222() -> (Tensor[(252, 2), float32],) {
  @func_5220() /* ty=(Tensor[(252, 2), float32],) */
}

def @func_1575() -> (float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) {
  @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */
}

def @func_4192(%var_4189: Tensor[(11, 10, 10), float64], %var_4190: Tensor[(504, 1), float64], %var_4191: Tensor[(980, 2), int32]) -> (Tensor[(11, 10, 10), int8], Tensor[(192), uint16], Tensor[(252, 2), bool], Tensor[(980, 2), int32], Tensor[(504, 1), float64], Tensor[(504, ?), int16]) {
  %141 = fn (%var_4152: Tensor[(11, 10, 10), float64], %var_4159: Tensor[(504, 1), float64], %var_4173: Tensor[(980, 2), int32]) -> (Tensor[(11, 10, 10), int8], Tensor[(192), uint16], Tensor[(252, 2), bool], Tensor[(980, 2), int32], Tensor[(504, 1), float64], Tensor[(504, ?), int16]) {
    %108 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
    %109 = %108.0;
    %110 = cast(%109, dtype="int8") /* ty=int8 */;
    %111 = cast(%var_4152, dtype="int8") /* ty=Tensor[(11, 10, 10), int8] */;
    %112 = cast(%var_4173, dtype="int32") /* ty=Tensor[(980, 2), int32] */;
    %113 = cast(%var_4159, dtype="float32") /* ty=Tensor[(504, 1), float32] */;
    %114 = cos(%113) /* ty=Tensor[(504, 1), float32] */;
    %115 = cast(%114, dtype="float32") /* ty=Tensor[(504, 1), float32] */;
    %116 = reshape(%112, newshape=[1960]) /* ty=Tensor[(1960), int32] */;
    %117 = reshape(%115, newshape=[504]) /* ty=Tensor[(504), float32] */;
    %118 = @func_3519(%116, %117) /* ty=(float64, Tensor[(252, 2), bool], Tensor[(1960), int32], Tensor[(504), float32]) */;
    %119 = cast(%114, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
    %120 = cast(%109, dtype="uint16") /* ty=uint16 */;
    %121 = cast(meta[relay.Constant][4] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
    %122 = cast(%var_4159, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
    %123 = reshape(%120, newshape=[]) /* ty=uint16 */;
    %124 = reshape(%121, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
    %125 = reshape(%122, newshape=[504]) /* ty=Tensor[(504), float64] */;
    %126 = @func_720(%123, %124, %125) /* ty=(Tensor[(16, 4, 3), uint16], Tensor[(8, 15, 3), float64], Tensor[(9, 4, 16), float32], Tensor[(504), float64]) */;
    %127 = %126.3;
    %128 = cast(%127, dtype="bool") /* ty=Tensor[(504), bool] */;
    %129 = shape_of(%114, dtype="int32") /* ty=Tensor[(2), int32] */;
    %130 = cast(%114, dtype="bool") /* ty=Tensor[(504, 1), bool] */;
    %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %132 = greater(%130, %131) /* ty=Tensor[(504, ?), bool] */;
    %133 = cast(%114, dtype="int16") /* ty=Tensor[(504, 1), int16] */;
    %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(2), int32] */;
    %135 = cast(%132, dtype="int16") /* ty=Tensor[(504, ?), int16] */;
    %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %137 = bitwise_xor(%110, %111) /* ty=Tensor[(11, 10, 10), int8] */;
    %138 = %118.1;
    %139 = erf(%119) /* ty=Tensor[(504, 1), float64] */;
    %140 = left_shift(%135, %136) /* ty=Tensor[(504, ?), int16] */;
    (%137, meta[relay.Constant][4] /* ty=Tensor[(192), uint16] */, %138, %var_4173, %139, %140)
  };
  %141(%var_4189, %var_4190, %var_4191) /* ty=(Tensor[(11, 10, 10), int8], Tensor[(192), uint16], Tensor[(252, 2), bool], Tensor[(980, 2), int32], Tensor[(504, 1), float64], Tensor[(504, ?), int16]) */
}

def @func_998(%var_995: Tensor[(5, 2, 4), float64], %var_996: Tensor[(192), uint16], %var_997: Tensor[(252, 2), float64]) -> (Tensor[(8, 15, 3), float64], float64, Tensor[(5, 2, 4), float32], Tensor[(5, 2, 4), float32], Tensor[(8, 15, 3), float64], Tensor[(192), uint16], Tensor[(252, 2), float64]) {
  @func_993(%var_995, %var_996, %var_997) /* ty=(Tensor[(8, 15, 3), float64], float64, Tensor[(5, 2, 4), float32], Tensor[(5, 2, 4), float32], Tensor[(8, 15, 3), float64], Tensor[(192), uint16], Tensor[(252, 2), float64]) */
}

def @func_894(%var_875: Tensor[(6, 8, 3), int8], %var_876: Tensor[(6, 8, 3), int8], %var_892: Tensor[(12), float64]) -> (Tensor[(6, 8, 3), int8], Tensor[(2, 2, 3), float64], Tensor[(12), float64]) {
  %142 = cast(%var_876, dtype="int8") /* ty=Tensor[(6, 8, 3), int8] */;
  %143 = shape_of(%var_875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%var_875, dtype="int8") /* ty=Tensor[(6, 8, 3), int8] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %146 = cast(%var_892, dtype="float64") /* ty=Tensor[(12), float64] */;
  %147 = reshape(%146, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
  %148 = @func_199(%147) /* ty=(Tensor[(2, 2, 3), float64],) */;
  %149 = minimum(%144, %145) /* ty=Tensor[(6, 8, 3), int8] */;
  %150 = %148.0;
  (%149, %150, %var_892)
}

def @func_202(%var_200: Tensor[(2, 2, 3), float64]) -> (Tensor[(2, 2, 3), float64],) {
  @func_199(%var_200) /* ty=(Tensor[(2, 2, 3), float64],) */
}

def @func_1600() -> float64 {
  @func_1598() /* ty=float64 */
}

def @func_3871() -> (float64, Tensor[(9, 4, 16), float32], Tensor[(3, 4, ?), float64]) {
  @func_3869() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(3, 4, ?), float64]) */
}

def @func_3675(%var_3632: Tensor[(5, 1, 1), int32], %var_3633: Tensor[(5, 4, 11), int32]) -> (float64, Tensor[(252, 2), bool], Tensor[(1960), int32], Tensor[(504), float32], Tensor[(5, 4, 11), float64], float64, Tensor[(9, 4, 16), float32]) {
  %151 = cast(meta[relay.Constant][5] /* ty=Tensor[(1960), int32] */, dtype="int32") /* ty=Tensor[(1960), int32] */;
  %152 = cast(meta[relay.Constant][5] /* ty=Tensor[(1960), int32] */, dtype="int32") /* ty=Tensor[(1960), int32] */;
  %153 = cast(meta[relay.Constant][6] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %154 = reshape(%151, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), int32] */;
  %155 = reshape(%152, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), int32] */;
  %156 = reshape(%153, newshape=[504]) /* ty=Tensor[(504), float32] */;
  %157 = @func_3128(%154, %155, %156) /* ty=(Tensor[(14, 10, 14), int32], Tensor[(252, 2), bool], Tensor[(504), float32]) */;
  %158 = cast(%var_3632, dtype="bool") /* ty=Tensor[(5, 1, 1), bool] */;
  %159 = cast(%var_3633, dtype="bool") /* ty=Tensor[(5, 4, 11), bool] */;
  %160 = greater(%158, %159) /* ty=Tensor[(5, 4, 11), bool] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(5, 4, 11), float32] */;
  %162 = asinh(%161) /* ty=Tensor[(5, 4, 11), float32] */;
  %163 = cast(%162, dtype="float64") /* ty=Tensor[(5, 4, 11), float64] */;
  %164 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
  %165 = @func_3000() /* ty=float64 */;
  %166 = %157.1;
  %167 = exp(%163) /* ty=Tensor[(5, 4, 11), float64] */;
  %168 = %164.0;
  %169 = @func_3619() /* ty=Tensor[(9, 4, 16), float32] */;
  (%165, %166, meta[relay.Constant][5] /* ty=Tensor[(1960), int32] */, meta[relay.Constant][6] /* ty=Tensor[(504), float32] */, %167, %168, %169)
}

def @func_4896() -> Tensor[(252, 2), float32] {
  @func_4894() /* ty=Tensor[(252, 2), float32] */
}

def @func_5453() -> Tensor[(3, 4, ?), int8] {
  @func_4603() /* ty=Tensor[(3, 4, ?), int8] */
}

def @func_5498(%var_5480: Tensor[(4, 4, 3), uint64], %var_5481: Tensor[(4, 4, 3), uint64]) -> (Tensor[(4, 4, 3), bool], Tensor[(252, 2), float32], Tensor[(4, 4, 3), float32]) {
  %170 = cast(%var_5481, dtype="bool") /* ty=Tensor[(4, 4, 3), bool] */;
  %171 = shape_of(%var_5480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%var_5480, dtype="bool") /* ty=Tensor[(4, 4, 3), bool] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %174 = @func_3226() /* ty=(Tensor[(252, 2), float32],) */;
  %175 = cast(%var_5480, dtype="float32") /* ty=Tensor[(4, 4, 3), float32] */;
  %176 = less(%172, %173) /* ty=Tensor[(4, 4, 3), bool] */;
  %177 = %174.0;
  %178 = cos(%175) /* ty=Tensor[(4, 4, 3), float32] */;
  (%176, %177, %178)
}

def @func_993(%var_938: Tensor[(5, 2, 4), float64], %var_982: Tensor[(192), uint16], %var_983: Tensor[(252, 2), float64]) -> (Tensor[(8, 15, 3), float64], float64, Tensor[(5, 2, 4), float32], Tensor[(5, 2, 4), float32], Tensor[(8, 15, 3), float64], Tensor[(192), uint16], Tensor[(252, 2), float64]) {
  %179 = cast(-8.82479f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %180 = reshape(%179, newshape=[]) /* ty=float64 */;
  %181 = @func_473(%180) /* ty=(Tensor[(8, 15, 3), float64], Tensor[(8, 15, 3), uint64]) */;
  %182 = cast(%var_938, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %183 = atan(%182) /* ty=Tensor[(5, 2, 4), float64] */;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %185 = cast(%183, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %186 = cast(-8.82479f64 /* ty=float64 */, dtype="uint16") /* ty=uint16 */;
  %187 = cast(%var_982, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %188 = cast(%var_983, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %189 = reshape(%186, newshape=[]) /* ty=uint16 */;
  %190 = reshape(%187, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %191 = reshape(%188, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %192 = @func_720(%189, %190, %191) /* ty=(Tensor[(16, 4, 3), uint16], Tensor[(8, 15, 3), float64], Tensor[(9, 4, 16), float32], Tensor[(504), float64]) */;
  %193 = %181.0;
  %194 = rsqrt(%184) /* ty=Tensor[(5, 2, 4), float32] */;
  %195 = sigmoid(%185) /* ty=Tensor[(5, 2, 4), float32] */;
  %196 = %192.1;
  (%193, -8.82479f64 /* ty=float64 */, %194, %195, %196, %var_982, %var_983)
}

def @func_1944(%var_1942: Tensor[(7, 9, 11), uint64], %var_1943: Tensor[(7, 9, 11), uint64]) -> (Tensor[(7, 9, 11), bool], Tensor[(7, 9, 11), float32], float64) {
  %206 = fn (%var_1927: Tensor[(7, 9, 11), uint64], %var_1928: Tensor[(7, 9, 11), uint64]) -> (Tensor[(7, 9, 11), bool], Tensor[(7, 9, 11), float32], float64) {
    %197 = cast(%var_1928, dtype="bool") /* ty=Tensor[(7, 9, 11), bool] */;
    %198 = shape_of(%var_1927, dtype="int32") /* ty=Tensor[(3), int32] */;
    %199 = cast(%var_1927, dtype="bool") /* ty=Tensor[(7, 9, 11), bool] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %201 = cast(%var_1927, dtype="float32") /* ty=Tensor[(7, 9, 11), float32] */;
    %202 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
    %203 = greater(%199, %200) /* ty=Tensor[(7, 9, 11), bool] */;
    %204 = sin(%201) /* ty=Tensor[(7, 9, 11), float32] */;
    %205 = %202.0;
    (%203, %204, %205)
  };
  %206(%var_1942, %var_1943) /* ty=(Tensor[(7, 9, 11), bool], Tensor[(7, 9, 11), float32], float64) */
}

def @func_1956() -> (Tensor[(3, 4, ?), int8],) {
  %207 = @func_1869() /* ty=Tensor[(3, 4, ?), int8] */;
  (%207,)
}

def @func_1832(%var_1826: Tensor[(14, 8, 8), uint64], %var_1827: Tensor[(14, 8, 8), uint64], %var_1828: Tensor[(14, 8, 8), uint16], %var_1829: Tensor[(14, 8, 8), int64], %var_1830: Tensor[(936), float64], %var_1831: Tensor[(504), float64]) -> (Tensor[(3, 4, 3), float64], Tensor[(14, 8, 8), int64], Tensor[(14, 8, 8), int32], Tensor[(9, 4, 16), float32], Tensor[(936), float64], Tensor[(504), float64]) {
  %246 = fn (%var_1723: Tensor[(14, 8, 8), uint64], %var_1728: Tensor[(14, 8, 8), uint64], %var_1742: Tensor[(14, 8, 8), uint16], %var_1811: Tensor[(14, 8, 8), int64], %var_1818: Tensor[(936), float64], %var_1819: Tensor[(504), float64]) -> (Tensor[(3, 4, 3), float64], Tensor[(14, 8, 8), int64], Tensor[(14, 8, 8), int32], Tensor[(9, 4, 16), float32], Tensor[(936), float64], Tensor[(504), float64]) {
    %208 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
    %209 = %208.1;
    %210 = cast(%209, dtype="float64") /* ty=Tensor[(3, 4, ?), float64] */;
    %211 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 4, 3), int8] */, dtype="float64") /* ty=Tensor[(3, 4, 3), float64] */;
    %212 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 8, 8), uint64] */, dtype="bool") /* ty=Tensor[(14, 8, 8), bool] */;
    %213 = shape_of(%var_1723, dtype="int32") /* ty=Tensor[(3), int32] */;
    %214 = cast(%var_1723, dtype="bool") /* ty=Tensor[(14, 8, 8), bool] */;
    %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %216 = less(%214, %215) /* ty=Tensor[(14, 8, 8), bool] */;
    %217 = cast(%var_1728, dtype="uint16") /* ty=Tensor[(14, 8, 8), uint16] */;
    %218 = shape_of(%var_1723, dtype="int32") /* ty=Tensor[(3), int32] */;
    %219 = cast(%var_1723, dtype="uint16") /* ty=Tensor[(14, 8, 8), uint16] */;
    %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %221 = maximum(%219, %220) /* ty=Tensor[(14, 8, 8), uint16] */;
    %222 = cast(%var_1742, dtype="int64") /* ty=Tensor[(14, 8, 8), int64] */;
    %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
    %224 = cast(%221, dtype="int64") /* ty=Tensor[(14, 8, 8), int64] */;
    %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %226 = minimum(%224, %225) /* ty=Tensor[(14, 8, 8), int64] */;
    %227 = cast(%226, dtype="int64") /* ty=Tensor[(14, 8, 8), int64] */;
    %228 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
    %229 = cast(%216, dtype="int64") /* ty=Tensor[(14, 8, 8), int64] */;
    %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %231 = cast(%var_1811, dtype="int32") /* ty=Tensor[(14, 8, 8), int32] */;
    %232 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
    %233 = cast(%226, dtype="int32") /* ty=Tensor[(14, 8, 8), int32] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %235 = cast(%var_1818, dtype="float64") /* ty=Tensor[(936), float64] */;
    %236 = cast(%var_1818, dtype="float64") /* ty=Tensor[(936), float64] */;
    %237 = cast(%var_1819, dtype="float64") /* ty=Tensor[(504), float64] */;
    %238 = reshape(%235, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
    %239 = reshape(%236, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
    %240 = reshape(%237, newshape=[6, 84]) /* ty=Tensor[(6, 84), float64] */;
    %241 = @func_1425(%238, %239, %240) /* ty=(Tensor[(13, 6, 12), float64], Tensor[(13, 6, 12), float64], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(504), float64], uint16, Tensor[(4, 48), uint16], Tensor[(6, 84), float64]) */;
    %242 = floor_divide(%210, %211) /* ty=Tensor[(3, 4, 3), float64] */;
    %243 = bitwise_and(%229, %230) /* ty=Tensor[(14, 8, 8), int64] */;
    %244 = bitwise_xor(%233, %234) /* ty=Tensor[(14, 8, 8), int32] */;
    %245 = %241.2;
    (%242, %243, %244, %245, %var_1818, %var_1819)
  };
  %246(%var_1826, %var_1827, %var_1828, %var_1829, %var_1830, %var_1831) /* ty=(Tensor[(3, 4, 3), float64], Tensor[(14, 8, 8), int64], Tensor[(14, 8, 8), int32], Tensor[(9, 4, 16), float32], Tensor[(936), float64], Tensor[(504), float64]) */
}

def @func_5560(%var_5559: Tensor[(9, 16, 6), float32]) -> Tensor[(9, 16, 6), float32] {
  %248 = fn (%var_5530: Tensor[(9, 16, 6), float32]) -> Tensor[(9, 16, 6), float32] {
    %247 = cast(%var_5530, dtype="float32") /* ty=Tensor[(9, 16, 6), float32] */;
    atanh(%247) /* ty=Tensor[(9, 16, 6), float32] */
  };
  %248(%var_5559) /* ty=Tensor[(9, 16, 6), float32] */
}

def @func_62(%var_61: Tensor[(9, 4, 16), uint64]) -> (Tensor[(9, 4, 16), float32],) {
  %256 = fn (%var_52: Tensor[(9, 4, 16), uint64]) -> (Tensor[(9, 4, 16), float32],) {
    %249 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 4, 16), uint64] */, dtype="uint64") /* ty=Tensor[(9, 4, 16), uint64] */;
    %250 = shape_of(%var_52, dtype="int32") /* ty=Tensor[(3), int32] */;
    %251 = cast(%var_52, dtype="uint64") /* ty=Tensor[(9, 4, 16), uint64] */;
    %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %253 = add(%251, %252) /* ty=Tensor[(9, 4, 16), uint64] */;
    %254 = cast(%253, dtype="float32") /* ty=Tensor[(9, 4, 16), float32] */;
    %255 = asinh(%254) /* ty=Tensor[(9, 4, 16), float32] */;
    (%255,)
  };
  %256(%var_61) /* ty=(Tensor[(9, 4, 16), float32],) */
}

def @func_2911(%var_2909: Tensor[(90, 2), int8]) -> (Tensor[(252, 2), float64], Tensor[(252, 2), bool], Tensor[(3, 4, 15), bool], Tensor[(90, 2), int8]) {
  @func_2908(%var_2909) /* ty=(Tensor[(252, 2), float64], Tensor[(252, 2), bool], Tensor[(3, 4, 15), bool], Tensor[(90, 2), int8]) */
}

def @func_1573() -> (float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) {
  %257 = cast(meta[relay.Constant][10] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %258 = cast(meta[relay.Constant][10] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %259 = cast(9.13625f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %260 = reshape(%257, newshape=[11, 10, 13]) /* ty=Tensor[(11, 10, 13), float32] */;
  %261 = reshape(%258, newshape=[11, 10, 13]) /* ty=Tensor[(11, 10, 13), float32] */;
  %262 = reshape(%259, newshape=[]) /* ty=float64 */;
  %263 = @func_1485(%260, %261, %262) /* ty=(Tensor[(11, 10, 13), int16], Tensor[(8, 15, 3), uint64], Tensor[(256), float32], float64, Tensor[(11, 10, 13), float64]) */;
  %264 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 4, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 4, 1), float32] */;
  %265 = sinh(%264) /* ty=Tensor[(3, 4, 1), float32] */;
  %266 = cast(%265, dtype="float64") /* ty=Tensor[(3, 4, 1), float64] */;
  %267 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(3, 4, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 4, 1), float32] */, dtype="float64") /* ty=Tensor[(3, 4, 1), float64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %270 = minimum(%268, %269) /* ty=Tensor[(3, 4, ?), float64] */;
  %271 = cast(%265, dtype="bool") /* ty=Tensor[(3, 4, 1), bool] */;
  %272 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(3, 4, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 4, 1), float32] */, dtype="bool") /* ty=Tensor[(3, 4, 1), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %275 = greater_equal(%273, %274) /* ty=Tensor[(3, 4, ?), bool] */;
  %276 = cast(%275, dtype="int8") /* ty=Tensor[(3, 4, ?), int8] */;
  %277 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%270, dtype="int8") /* ty=Tensor[(3, 4, ?), int8] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %280 = %263.3;
  %281 = subtract(%278, %279) /* ty=Tensor[(3, 4, ?), int8] */;
  (%280, meta[relay.Constant][10] /* ty=Tensor[(1430), float32] */, 9.13625f64 /* ty=float64 */, %281)
}

def @func_899(%var_896: Tensor[(6, 8, 3), int8], %var_897: Tensor[(6, 8, 3), int8], %var_898: Tensor[(12), float64]) -> (Tensor[(6, 8, 3), int8], Tensor[(2, 2, 3), float64], Tensor[(12), float64]) {
  @func_894(%var_896, %var_897, %var_898) /* ty=(Tensor[(6, 8, 3), int8], Tensor[(2, 2, 3), float64], Tensor[(12), float64]) */
}

def @func_2113(%var_2111: Tensor[(15, 5, 3), float64], %var_2112: Tensor[(15, 5, 3), float64]) -> Tensor[(15, 5, 3), bool] {
  %288 = fn (%var_2090: Tensor[(15, 5, 3), float64], %var_2106: Tensor[(15, 5, 3), float64]) -> Tensor[(15, 5, 3), bool] {
    %282 = cast(%var_2090, dtype="float64") /* ty=Tensor[(15, 5, 3), float64] */;
    %283 = log10(%282) /* ty=Tensor[(15, 5, 3), float64] */;
    %284 = cast(%var_2106, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
    %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
    %286 = cast(%283, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
    %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%286, %287) /* ty=Tensor[(15, 5, 3), bool] */
  };
  %288(%var_2111, %var_2112) /* ty=Tensor[(15, 5, 3), bool] */
}

def @func_1485(%var_1445: Tensor[(11, 10, 13), float32], %var_1446: Tensor[(11, 10, 13), float32], %var_1470: float64) -> (Tensor[(11, 10, 13), int16], Tensor[(8, 15, 3), uint64], Tensor[(256), float32], float64, Tensor[(11, 10, 13), float64]) {
  %289 = cast(%var_1446, dtype="float32") /* ty=Tensor[(11, 10, 13), float32] */;
  %290 = shape_of(%var_1445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_1445, dtype="float32") /* ty=Tensor[(11, 10, 13), float32] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %293 = floor_divide(%291, %292) /* ty=Tensor[(11, 10, 13), float32] */;
  %294 = cast(%var_1445, dtype="int16") /* ty=Tensor[(11, 10, 13), int16] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="int16") /* ty=Tensor[(11, 10, 13), int16] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %298 = cast(meta[relay.Constant][12] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %299 = cast(meta[relay.Constant][12] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %300 = cast(%var_1470, dtype="float64") /* ty=float64 */;
  %301 = reshape(%298, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float32] */;
  %302 = reshape(%299, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float32] */;
  %303 = reshape(%300, newshape=[]) /* ty=float64 */;
  %304 = @func_1282(%301, %302, %303) /* ty=(Tensor[(8, 4, 8), float32], Tensor[(8, 15, 3), uint64], float64) */;
  %305 = cast(%293, dtype="float64") /* ty=Tensor[(11, 10, 13), float64] */;
  %306 = left_shift(%296, %297) /* ty=Tensor[(11, 10, 13), int16] */;
  %307 = %304.1;
  %308 = sinh(%305) /* ty=Tensor[(11, 10, 13), float64] */;
  (%306, %307, meta[relay.Constant][12] /* ty=Tensor[(256), float32] */, %var_1470, %308)
}

def @func_3283() -> (Tensor[(252, 2), float32], Tensor[(3, 4, ?), bool], Tensor[(3, 4, ?), float32]) {
  @func_3281() /* ty=(Tensor[(252, 2), float32], Tensor[(3, 4, ?), bool], Tensor[(3, 4, ?), float32]) */
}

def @func_3016() -> Tensor[(252, 2), float32] {
  @func_3014() /* ty=Tensor[(252, 2), float32] */
}

def @func_3522(%var_3520: Tensor[(1960), int32], %var_3521: Tensor[(504), float32]) -> (float64, Tensor[(252, 2), bool], Tensor[(1960), int32], Tensor[(504), float32]) {
  %319 = fn (%var_3502: Tensor[(1960), int32], %var_3503: Tensor[(504), float32]) -> (float64, Tensor[(252, 2), bool], Tensor[(1960), int32], Tensor[(504), float32]) {
    %309 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
    %310 = cast(%var_3502, dtype="int32") /* ty=Tensor[(1960), int32] */;
    %311 = cast(%var_3502, dtype="int32") /* ty=Tensor[(1960), int32] */;
    %312 = cast(%var_3503, dtype="float32") /* ty=Tensor[(504), float32] */;
    %313 = reshape(%310, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), int32] */;
    %314 = reshape(%311, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), int32] */;
    %315 = reshape(%312, newshape=[504]) /* ty=Tensor[(504), float32] */;
    %316 = @func_3128(%313, %314, %315) /* ty=(Tensor[(14, 10, 14), int32], Tensor[(252, 2), bool], Tensor[(504), float32]) */;
    %317 = %309.0;
    %318 = %316.1;
    (%317, %318, %var_3502, %var_3503)
  };
  %319(%var_3520, %var_3521) /* ty=(float64, Tensor[(252, 2), bool], Tensor[(1960), int32], Tensor[(504), float32]) */
}

def @func_3228() -> (Tensor[(252, 2), float32],) {
  @func_3226() /* ty=(Tensor[(252, 2), float32],) */
}

def @func_2455(%var_2453: Tensor[(3, 4, 15), int8]) -> (Tensor[(3, 4, 15), bool], Tensor[(3, 4, 15), float64]) {
  @func_2452(%var_2453) /* ty=(Tensor[(3, 4, 15), bool], Tensor[(3, 4, 15), float64]) */
}

def @func_4095() -> (Tensor[(3, 4, ?), int8],) {
  @func_4093() /* ty=(Tensor[(3, 4, ?), int8],) */
}

def @func_2976(%var_2962: Tensor[(3, 4, 7), int8], %var_2972: Tensor[(504), float64]) -> (Tensor[(3, 4, 7), bool], Tensor[(3, 4, ?), int8], Tensor[(192), uint16], Tensor[(40), float64], Tensor[(192), uint16], Tensor[(504), float64]) {
  %320 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
  %321 = %320.1;
  %322 = cast(%321, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
  %323 = cast(%var_2962, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
  %324 = cast(meta[relay.Constant][13] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %325 = cast(meta[relay.Constant][14] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %326 = cast(%var_2972, dtype="float64") /* ty=Tensor[(504), float64] */;
  %327 = reshape(%324, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %328 = reshape(%325, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %329 = reshape(%326, newshape=[252, 2]) /* ty=Tensor[(252, 2), float64] */;
  %330 = @func_993(%327, %328, %329) /* ty=(Tensor[(8, 15, 3), float64], float64, Tensor[(5, 2, 4), float32], Tensor[(5, 2, 4), float32], Tensor[(8, 15, 3), float64], Tensor[(192), uint16], Tensor[(252, 2), float64]) */;
  %331 = logical_and(%322, %323) /* ty=Tensor[(3, 4, 7), bool] */;
  %332 = @func_1869() /* ty=Tensor[(3, 4, ?), int8] */;
  %333 = %330.5;
  (%331, %332, %333, meta[relay.Constant][13] /* ty=Tensor[(40), float64] */, meta[relay.Constant][14] /* ty=Tensor[(192), uint16] */, %var_2972)
}

def @func_3348() -> float64 {
  %334 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
  %334.0
}

def @func_1870() -> Tensor[(3, 4, ?), int8] {
  %336 = fn () -> Tensor[(3, 4, ?), int8] {
    %335 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
    %335.1
  };
  %336() /* ty=Tensor[(3, 4, ?), int8] */
}

def @func_1702() -> (float64, Tensor[(2, 2, 3), float64], Tensor[(12), float64]) {
  %342 = fn () -> (float64, Tensor[(2, 2, 3), float64], Tensor[(12), float64]) {
    %337 = cast(meta[relay.Constant][15] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
    %338 = reshape(%337, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), float64] */;
    %339 = @func_199(%338) /* ty=(Tensor[(2, 2, 3), float64],) */;
    %340 = @func_1598() /* ty=float64 */;
    %341 = %339.0;
    (%340, %341, meta[relay.Constant][15] /* ty=Tensor[(12), float64] */)
  };
  %342() /* ty=(float64, Tensor[(2, 2, 3), float64], Tensor[(12), float64]) */
}

def @func_3064() -> float64 {
  %344 = fn () -> float64 {
    %343 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
    %343.0
  };
  %344() /* ty=float64 */
}

def @func_4957() -> (float64, float64) {
  %348 = fn () -> (float64, float64) {
    %345 = @func_4870() /* ty=(float64,) */;
    %346 = %345.0;
    %347 = @func_3000() /* ty=float64 */;
    (%346, %347)
  };
  %348() /* ty=(float64, float64) */
}

def @func_3882() -> (float64, Tensor[(252, 2), float32]) {
  %349 = @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */;
  %350 = @func_3348() /* ty=float64 */;
  %351 = %349.1;
  (%350, %351)
}

def @func_1425(%var_1390: Tensor[(13, 6, 12), float64], %var_1393: Tensor[(13, 6, 12), float64], %var_1419: Tensor[(6, 84), float64]) -> (Tensor[(13, 6, 12), float64], Tensor[(13, 6, 12), float64], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(504), float64], uint16, Tensor[(4, 48), uint16], Tensor[(6, 84), float64]) {
  %352 = cast(%var_1390, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
  %353 = cast(%var_1393, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
  %354 = shape_of(%var_1390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%var_1390, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %357 = cast(meta[relay.Constant][16] /* ty=Tensor[(576), uint64] */, dtype="uint64") /* ty=Tensor[(576), uint64] */;
  %358 = reshape(%357, newshape=[9, 4, 16]) /* ty=Tensor[(9, 4, 16), uint64] */;
  %359 = @func_60(%358) /* ty=(Tensor[(9, 4, 16), float32],) */;
  %360 = cast(meta[relay.Constant][17] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %361 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 48), uint16] */, dtype="uint16") /* ty=Tensor[(4, 48), uint16] */;
  %362 = cast(%var_1419, dtype="float64") /* ty=Tensor[(6, 84), float64] */;
  %363 = reshape(%360, newshape=[]) /* ty=uint16 */;
  %364 = reshape(%361, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %365 = reshape(%362, newshape=[504]) /* ty=Tensor[(504), float64] */;
  %366 = @func_720(%363, %364, %365) /* ty=(Tensor[(16, 4, 3), uint16], Tensor[(8, 15, 3), float64], Tensor[(9, 4, 16), float32], Tensor[(504), float64]) */;
  %367 = exp(%352) /* ty=Tensor[(13, 6, 12), float64] */;
  %368 = power(%355, %356) /* ty=Tensor[(13, 6, 12), float64] */;
  %369 = %359.0;
  %370 = %366.3;
  (%367, %368, %369, meta[relay.Constant][16] /* ty=Tensor[(576), uint64] */, %370, meta[relay.Constant][17] /* ty=uint16 */, meta[relay.Constant][18] /* ty=Tensor[(4, 48), uint16] */, %var_1419)
}

def @func_2679(%var_2677: Tensor[(252, 2), float32], %var_2678: Tensor[(252, 2), float32]) -> (Tensor[(252, 2), bool], Tensor[(252, 2), float32]) {
  @func_2675(%var_2677, %var_2678) /* ty=(Tensor[(252, 2), bool], Tensor[(252, 2), float32]) */
}

def @func_3000() -> float64 {
  %371 = @func_1900() /* ty=(float64,) */;
  %371.0
}

def @func_4802(%var_4800: Tensor[(1960), int32]) -> (Tensor[(3, 4, ?), int8], Tensor[(11, 10, 10), int8], Tensor[(1100), float64], Tensor[(504), float64], Tensor[(1960), float32], Tensor[(3, 4, ?), int8]) {
  @func_4799(%var_4800) /* ty=(Tensor[(3, 4, ?), int8], Tensor[(11, 10, 10), int8], Tensor[(1100), float64], Tensor[(504), float64], Tensor[(1960), float32], Tensor[(3, 4, ?), int8]) */
}

def @func_1999() -> (Tensor[(252, 2), float32], Tensor[(252, 2), float32]) {
  %372 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
  %373 = %372.2;
  %374 = cast(%373, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %375 = cast(%373, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %376 = cosh(%374) /* ty=Tensor[(252, 2), float32] */;
  %377 = exp(%375) /* ty=Tensor[(252, 2), float32] */;
  (%376, %377)
}

def @func_4992() -> (float64,) {
  %379 = fn () -> (float64,) {
    %378 = @func_3063() /* ty=float64 */;
    (%378,)
  };
  %379() /* ty=(float64,) */
}

def @func_3188(%var_3183: uint64, %var_3184: Tensor[(1404), uint64]) -> (Tensor[(252, 2), float32], Tensor[(9, 13, 12), uint64], uint64, Tensor[(1404), uint64]) {
  %380 = cast(%var_3183, dtype="uint64") /* ty=uint64 */;
  %381 = cast(%var_3184, dtype="uint64") /* ty=Tensor[(1404), uint64] */;
  %382 = reshape(%380, newshape=[]) /* ty=uint64 */;
  %383 = reshape(%381, newshape=[9, 13, 12]) /* ty=Tensor[(9, 13, 12), uint64] */;
  %384 = @func_2823(%382, %383) /* ty=(Tensor[(9, 13, 12), uint64], Tensor[(3, 4, ?), int8]) */;
  %385 = @func_3014() /* ty=Tensor[(252, 2), float32] */;
  %386 = %384.0;
  (%385, %386, %var_3183, %var_3184)
}

def @func_3281() -> (Tensor[(252, 2), float32], Tensor[(3, 4, ?), bool], Tensor[(3, 4, ?), float32]) {
  %387 = @func_3162() /* ty=(Tensor[(252, 2), float32],) */;
  %388 = @func_1869() /* ty=Tensor[(3, 4, ?), int8] */;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(3, 4, ?), float64] */;
  %390 = exp(%389) /* ty=Tensor[(3, 4, ?), float64] */;
  %391 = cast(%388, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
  %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%390, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %395 = cast(%388, dtype="float32") /* ty=Tensor[(3, 4, ?), float32] */;
  %396 = %387.0;
  %397 = not_equal(%393, %394) /* ty=Tensor[(3, 4, ?), bool] */;
  %398 = log2(%395) /* ty=Tensor[(3, 4, ?), float32] */;
  (%396, %397, %398)
}

def @func_2327() -> float64 {
  @func_2325() /* ty=float64 */
}

def @func_2980(%var_2978: Tensor[(3, 4, 7), int8], %var_2979: Tensor[(504), float64]) -> (Tensor[(3, 4, 7), bool], Tensor[(3, 4, ?), int8], Tensor[(192), uint16], Tensor[(40), float64], Tensor[(192), uint16], Tensor[(504), float64]) {
  @func_2976(%var_2978, %var_2979) /* ty=(Tensor[(3, 4, 7), bool], Tensor[(3, 4, ?), int8], Tensor[(192), uint16], Tensor[(40), float64], Tensor[(192), uint16], Tensor[(504), float64]) */
}

def @func_2001() -> (Tensor[(252, 2), float32], Tensor[(252, 2), float32]) {
  @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */
}

def @func_2871(%var_2870: Tensor[(5, 16, 12), float32]) -> (Tensor[(5, 16, 12), float32], Tensor[(9, 4, 16), float32], Tensor[(5, 16, 12), int16]) {
  %410 = fn (%var_2851: Tensor[(5, 16, 12), float32]) -> (Tensor[(5, 16, 12), float32], Tensor[(9, 4, 16), float32], Tensor[(5, 16, 12), int16]) {
    %399 = cast(%var_2851, dtype="float32") /* ty=Tensor[(5, 16, 12), float32] */;
    %400 = sqrt(%399) /* ty=Tensor[(5, 16, 12), float32] */;
    %401 = cast(%400, dtype="float32") /* ty=Tensor[(5, 16, 12), float32] */;
    %402 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
    %403 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 16, 12), float32] */, dtype="int16") /* ty=Tensor[(5, 16, 12), int16] */;
    %404 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
    %405 = cast(%400, dtype="int16") /* ty=Tensor[(5, 16, 12), int16] */;
    %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %407 = acos(%401) /* ty=Tensor[(5, 16, 12), float32] */;
    %408 = %402.1;
    %409 = add(%405, %406) /* ty=Tensor[(5, 16, 12), int16] */;
    (%407, %408, %409)
  };
  %410(%var_2870) /* ty=(Tensor[(5, 16, 12), float32], Tensor[(9, 4, 16), float32], Tensor[(5, 16, 12), int16]) */
}

def @func_4140(%var_4113: Tensor[(16, 2, 11), int16], %var_4114: Tensor[(16, 2, 11), int16]) -> (Tensor[(16, 2, 11), bool], float64, float64) {
  %411 = cast(%var_4114, dtype="bool") /* ty=Tensor[(16, 2, 11), bool] */;
  %412 = shape_of(%var_4113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_4113, dtype="bool") /* ty=Tensor[(16, 2, 11), bool] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %415 = not_equal(%413, %414) /* ty=Tensor[(16, 2, 11), bool] */;
  %416 = @func_3063() /* ty=float64 */;
  %417 = @func_3000() /* ty=float64 */;
  (%415, %416, %417)
}

def @func_2613(%var_2596: Tensor[(180), int8]) -> (Tensor[(3, 4, 15), float64], Tensor[(180), int8], Tensor[(252, 2), int16]) {
  %418 = cast(%var_2596, dtype="int8") /* ty=Tensor[(180), int8] */;
  %419 = reshape(%418, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), int8] */;
  %420 = @func_2452(%419) /* ty=(Tensor[(3, 4, 15), bool], Tensor[(3, 4, 15), float64]) */;
  %421 = @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */;
  %422 = %421.1;
  %423 = cast(meta[relay.Constant][20] /* ty=Tensor[(252, 2), float32] */, dtype="int16") /* ty=Tensor[(252, 2), int16] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(2), int32] */;
  %425 = cast(%422, dtype="int16") /* ty=Tensor[(252, 2), int16] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %427 = %420.1;
  %428 = left_shift(%425, %426) /* ty=Tensor[(252, 2), int16] */;
  (%427, %var_2596, %428)
}

def @func_4561() -> (float64,) {
  %429 = @func_3348() /* ty=float64 */;
  (%429,)
}

def @func_2452(%var_2404: Tensor[(3, 4, 15), int8]) -> (Tensor[(3, 4, 15), bool], Tensor[(3, 4, 15), float64]) {
  %430 = @func_1869() /* ty=Tensor[(3, 4, ?), int8] */;
  %431 = cast(%430, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
  %432 = cast(%var_2404, dtype="bool") /* ty=Tensor[(3, 4, 15), bool] */;
  %433 = cast(%var_2404, dtype="float64") /* ty=Tensor[(3, 4, 15), float64] */;
  %434 = equal(%431, %432) /* ty=Tensor[(3, 4, 15), bool] */;
  %435 = cosh(%433) /* ty=Tensor[(3, 4, 15), float64] */;
  (%434, %435)
}

def @func_3621() -> Tensor[(9, 4, 16), float32] {
  @func_3619() /* ty=Tensor[(9, 4, 16), float32] */
}

def @func_4049() -> (float64, float64) {
  %438 = fn () -> (float64, float64) {
    %436 = @func_2325() /* ty=float64 */;
    %437 = @func_3348() /* ty=float64 */;
    (%436, %437)
  };
  %438() /* ty=(float64, float64) */
}

def @func_4216() -> Tensor[(252, 2), float32] {
  %440 = fn () -> Tensor[(252, 2), float32] {
    %439 = @func_3226() /* ty=(Tensor[(252, 2), float32],) */;
    %439.0
  };
  %440() /* ty=Tensor[(252, 2), float32] */
}

def @func_5057(%var_5052: Tensor[(1, 12, 10), float64], %var_5053: Tensor[(6, 12, 10), float64]) -> Tensor[(6, 12, 10), bool] {
  %441 = cast(%var_5052, dtype="bool") /* ty=Tensor[(1, 12, 10), bool] */;
  %442 = cast(%var_5053, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
  greater_equal(%441, %442) /* ty=Tensor[(6, 12, 10), bool] */
}

def @func_4872() -> (float64,) {
  @func_4870() /* ty=(float64,) */
}

def @func_5197(%var_5194: Tensor[(252, 2), float32], %var_5195: Tensor[(180), int8], %var_5196: Tensor[(936, 1), float64]) -> (Tensor[(252, 2), uint16], Tensor[(180), int8], Tensor[(7, 9, 11), bool], Tensor[(693), uint64], Tensor[(6, 84), float64], Tensor[(936, 1), float64], Tensor[(3, 4, 15), bool]) {
  %477 = fn (%var_5135: Tensor[(252, 2), float32], %var_5141: Tensor[(180), int8], %var_5162: Tensor[(936, 1), float64]) -> (Tensor[(252, 2), uint16], Tensor[(180), int8], Tensor[(7, 9, 11), bool], Tensor[(693), uint64], Tensor[(6, 84), float64], Tensor[(936, 1), float64], Tensor[(3, 4, 15), bool]) {
    %443 = @func_3226() /* ty=(Tensor[(252, 2), float32],) */;
    %444 = %443.0;
    %445 = cast(%var_5135, dtype="uint16") /* ty=Tensor[(252, 2), uint16] */;
    %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(2), int32] */;
    %447 = cast(%444, dtype="uint16") /* ty=Tensor[(252, 2), uint16] */;
    %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %449 = cast(meta[relay.Constant][21] /* ty=Tensor[(693), uint64] */, dtype="uint64") /* ty=Tensor[(693), uint64] */;
    %450 = cast(meta[relay.Constant][21] /* ty=Tensor[(693), uint64] */, dtype="uint64") /* ty=Tensor[(693), uint64] */;
    %451 = reshape(%449, newshape=[7, 9, 11]) /* ty=Tensor[(7, 9, 11), uint64] */;
    %452 = reshape(%450, newshape=[7, 9, 11]) /* ty=Tensor[(7, 9, 11), uint64] */;
    %453 = @func_1941(%451, %452) /* ty=(Tensor[(7, 9, 11), bool], Tensor[(7, 9, 11), float32], float64) */;
    %454 = cast(%var_5162, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
    %455 = cast(%var_5162, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
    %456 = cast(%444, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
    %457 = reshape(%454, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
    %458 = reshape(%455, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float64] */;
    %459 = reshape(%456, newshape=[6, 84]) /* ty=Tensor[(6, 84), float64] */;
    %460 = @func_1425(%457, %458, %459) /* ty=(Tensor[(13, 6, 12), float64], Tensor[(13, 6, 12), float64], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(504), float64], uint16, Tensor[(4, 48), uint16], Tensor[(6, 84), float64]) */;
    %461 = cast(%var_5141, dtype="int8") /* ty=Tensor[(180), int8] */;
    %462 = reshape(%461, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), int8] */;
    %463 = @func_2452(%462) /* ty=(Tensor[(3, 4, 15), bool], Tensor[(3, 4, 15), float64]) */;
    %464 = %463.0;
    %465 = cast(%464, dtype="float32") /* ty=Tensor[(3, 4, 15), float32] */;
    %466 = tan(%465) /* ty=Tensor[(3, 4, 15), float32] */;
    %467 = cast(%466, dtype="float64") /* ty=Tensor[(3, 4, 15), float64] */;
    %468 = atan(%467) /* ty=Tensor[(3, 4, 15), float64] */;
    %469 = cast(%466, dtype="bool") /* ty=Tensor[(3, 4, 15), bool] */;
    %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
    %471 = cast(%468, dtype="bool") /* ty=Tensor[(3, 4, 15), bool] */;
    %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %473 = multiply(%447, %448) /* ty=Tensor[(252, 2), uint16] */;
    %474 = %453.0;
    %475 = %460.7;
    %476 = not_equal(%471, %472) /* ty=Tensor[(3, 4, 15), bool] */;
    (%473, %var_5141, %474, meta[relay.Constant][21] /* ty=Tensor[(693), uint64] */, %475, %var_5162, %476)
  };
  %477(%var_5194, %var_5195, %var_5196) /* ty=(Tensor[(252, 2), uint16], Tensor[(180), int8], Tensor[(7, 9, 11), bool], Tensor[(693), uint64], Tensor[(6, 84), float64], Tensor[(936, 1), float64], Tensor[(3, 4, 15), bool]) */
}

def @func_2908(%var_2901: Tensor[(90, 2), int8]) -> (Tensor[(252, 2), float64], Tensor[(252, 2), bool], Tensor[(3, 4, 15), bool], Tensor[(90, 2), int8]) {
  %478 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
  %479 = %478.2;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %481 = cast(%479, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %482 = reshape(%480, newshape=[252, 2]) /* ty=Tensor[(252, 2), float32] */;
  %483 = reshape(%481, newshape=[252, 2]) /* ty=Tensor[(252, 2), float32] */;
  %484 = @func_2675(%482, %483) /* ty=(Tensor[(252, 2), bool], Tensor[(252, 2), float32]) */;
  %485 = cast(%var_2901, dtype="int8") /* ty=Tensor[(90, 2), int8] */;
  %486 = reshape(%485, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), int8] */;
  %487 = @func_2452(%486) /* ty=(Tensor[(3, 4, 15), bool], Tensor[(3, 4, 15), float64]) */;
  %488 = %484.0;
  %489 = %487.0;
  (%479, %488, %489, %var_2901)
}

def @func_4563() -> (float64,) {
  @func_4561() /* ty=(float64,) */
}

def @func_199(%var_189: Tensor[(2, 2, 3), float64]) -> (Tensor[(2, 2, 3), float64],) {
  %490 = cast(%var_189, dtype="float64") /* ty=Tensor[(2, 2, 3), float64] */;
  %491 = asinh(%490) /* ty=Tensor[(2, 2, 3), float64] */;
  (%491,)
}

def @func_5061(%var_5059: Tensor[(1, 12, 10), float64], %var_5060: Tensor[(6, 12, 10), float64]) -> Tensor[(6, 12, 10), bool] {
  @func_5057(%var_5059, %var_5060) /* ty=Tensor[(6, 12, 10), bool] */
}

def @func_5220() -> (Tensor[(252, 2), float32],) {
  %492 = @func_4215() /* ty=Tensor[(252, 2), float32] */;
  (%492,)
}

def @func_5275(%var_5274: Tensor[(252, 2), float32]) -> (Tensor[(252, 2), uint32],) {
  %499 = fn (%var_5266: Tensor[(252, 2), float32]) -> (Tensor[(252, 2), uint32],) {
    %493 = @func_4894() /* ty=Tensor[(252, 2), float32] */;
    %494 = cast(%var_5266, dtype="uint32") /* ty=Tensor[(252, 2), uint32] */;
    %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(2), int32] */;
    %496 = cast(%493, dtype="uint32") /* ty=Tensor[(252, 2), uint32] */;
    %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %498 = logical_xor(%496, %497) /* ty=Tensor[(252, 2), uint32] */;
    (%498,)
  };
  %499(%var_5274) /* ty=(Tensor[(252, 2), uint32],) */
}

def @func_3350() -> float64 {
  @func_3348() /* ty=float64 */
}

def @func_4669(%var_4667: Tensor[(28, 32), uint64], %var_4668: Tensor[(504), float64]) -> (Tensor[(504), float64], Tensor[(28, 32), uint64], Tensor[(36, 26), float64], Tensor[(3, 4, 504), float32]) {
  %521 = fn (%var_4646: Tensor[(28, 32), uint64], %var_4648: Tensor[(504), float64]) -> (Tensor[(504), float64], Tensor[(28, 32), uint64], Tensor[(36, 26), float64], Tensor[(3, 4, 504), float32]) {
    %500 = cast(%var_4646, dtype="uint64") /* ty=Tensor[(28, 32), uint64] */;
    %501 = cast(%var_4646, dtype="uint64") /* ty=Tensor[(28, 32), uint64] */;
    %502 = cast(%var_4646, dtype="uint16") /* ty=Tensor[(28, 32), uint16] */;
    %503 = cast(%var_4646, dtype="int64") /* ty=Tensor[(28, 32), int64] */;
    %504 = cast(meta[relay.Constant][22] /* ty=Tensor[(36, 26), float64] */, dtype="float64") /* ty=Tensor[(36, 26), float64] */;
    %505 = cast(%var_4648, dtype="float64") /* ty=Tensor[(504), float64] */;
    %506 = reshape(%500, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), uint64] */;
    %507 = reshape(%501, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), uint64] */;
    %508 = reshape(%502, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), uint16] */;
    %509 = reshape(%503, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), int64] */;
    %510 = reshape(%504, newshape=[936]) /* ty=Tensor[(936), float64] */;
    %511 = reshape(%505, newshape=[504]) /* ty=Tensor[(504), float64] */;
    %512 = @func_1825(%506, %507, %508, %509, %510, %511) /* ty=(Tensor[(3, 4, 3), float64], Tensor[(14, 8, 8), int64], Tensor[(14, 8, 8), int32], Tensor[(9, 4, 16), float32], Tensor[(936), float64], Tensor[(504), float64]) */;
    %513 = @func_4093() /* ty=(Tensor[(3, 4, ?), int8],) */;
    %514 = %513.0;
    %515 = cast(%var_4648, dtype="bool") /* ty=Tensor[(504), bool] */;
    %516 = cast(%514, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
    %517 = logical_or(%515, %516) /* ty=Tensor[(3, 4, 504), bool] */;
    %518 = cast(%517, dtype="float32") /* ty=Tensor[(3, 4, 504), float32] */;
    %519 = %512.5;
    %520 = sqrt(%518) /* ty=Tensor[(3, 4, 504), float32] */;
    (%519, %var_4646, meta[relay.Constant][22] /* ty=Tensor[(36, 26), float64] */, %520)
  };
  %521(%var_4667, %var_4668) /* ty=(Tensor[(504), float64], Tensor[(28, 32), uint64], Tensor[(36, 26), float64], Tensor[(3, 4, 504), float32]) */
}

def @func_4894() -> Tensor[(252, 2), float32] {
  %522 = @func_3281() /* ty=(Tensor[(252, 2), float32], Tensor[(3, 4, ?), bool], Tensor[(3, 4, ?), float32]) */;
  %522.0
}

def @func_4799(%var_4784: Tensor[(1960), int32]) -> (Tensor[(3, 4, ?), int8], Tensor[(11, 10, 10), int8], Tensor[(1100), float64], Tensor[(504), float64], Tensor[(1960), float32], Tensor[(3, 4, ?), int8]) {
  %523 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
  %524 = cast(meta[relay.Constant][23] /* ty=Tensor[(1100), float64] */, dtype="float64") /* ty=Tensor[(1100), float64] */;
  %525 = cast(meta[relay.Constant][24] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %526 = cast(%var_4784, dtype="int32") /* ty=Tensor[(1960), int32] */;
  %527 = reshape(%524, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float64] */;
  %528 = reshape(%525, newshape=[504, 1]) /* ty=Tensor[(504, 1), float64] */;
  %529 = reshape(%526, newshape=[980, 2]) /* ty=Tensor[(980, 2), int32] */;
  %530 = @func_4188(%527, %528, %529) /* ty=(Tensor[(11, 10, 10), int8], Tensor[(192), uint16], Tensor[(252, 2), bool], Tensor[(980, 2), int32], Tensor[(504, 1), float64], Tensor[(504, ?), int16]) */;
  %531 = cast(%var_4784, dtype="float32") /* ty=Tensor[(1960), float32] */;
  %532 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %533 = %523.1;
  %534 = %530.0;
  %535 = acosh(%531) /* ty=Tensor[(1960), float32] */;
  %536 = %532.3;
  (%533, %534, meta[relay.Constant][23] /* ty=Tensor[(1100), float64] */, meta[relay.Constant][24] /* ty=Tensor[(504), float64] */, %535, %536)
}

def @func_2355(%var_2353: Tensor[(2, 128), float32], %var_2354: float64) -> (Tensor[(12), float64], Tensor[(8, 4, 8), float32], Tensor[(2, 128), bool]) {
  %550 = fn (%var_2340: Tensor[(2, 128), float32], %var_2341: float64) -> (Tensor[(12), float64], Tensor[(8, 4, 8), float32], Tensor[(2, 128), bool]) {
    %537 = @func_1701() /* ty=(float64, Tensor[(2, 2, 3), float64], Tensor[(12), float64]) */;
    %538 = cast(%var_2340, dtype="float32") /* ty=Tensor[(2, 128), float32] */;
    %539 = cast(%var_2340, dtype="float32") /* ty=Tensor[(2, 128), float32] */;
    %540 = cast(%var_2341, dtype="float64") /* ty=float64 */;
    %541 = reshape(%538, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float32] */;
    %542 = reshape(%539, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float32] */;
    %543 = reshape(%540, newshape=[]) /* ty=float64 */;
    %544 = @func_1282(%541, %542, %543) /* ty=(Tensor[(8, 4, 8), float32], Tensor[(8, 15, 3), uint64], float64) */;
    %545 = cast(%var_2340, dtype="bool") /* ty=Tensor[(2, 128), bool] */;
    %546 = cast(%var_2341, dtype="bool") /* ty=bool */;
    %547 = %537.2;
    %548 = %544.0;
    %549 = less_equal(%545, %546) /* ty=Tensor[(2, 128), bool] */;
    (%547, %548, %549)
  };
  %550(%var_2353, %var_2354) /* ty=(Tensor[(12), float64], Tensor[(8, 4, 8), float32], Tensor[(2, 128), bool]) */
}

def @func_5315() -> (Tensor[(3, 4, ?), int8],) {
  %553 = fn () -> (Tensor[(3, 4, ?), int8],) {
    %551 = @func_4093() /* ty=(Tensor[(3, 4, ?), int8],) */;
    %552 = %551.0;
    (%552,)
  };
  %553() /* ty=(Tensor[(3, 4, ?), int8],) */
}

def @func_3192(%var_3190: uint64, %var_3191: Tensor[(1404), uint64]) -> (Tensor[(252, 2), float32], Tensor[(9, 13, 12), uint64], uint64, Tensor[(1404), uint64]) {
  @func_3188(%var_3190, %var_3191) /* ty=(Tensor[(252, 2), float32], Tensor[(9, 13, 12), uint64], uint64, Tensor[(1404), uint64]) */
}

def @func_4935() -> float64 {
  @func_4933() /* ty=float64 */
}

def @func_3002() -> float64 {
  @func_3000() /* ty=float64 */
}

def @func_5012() -> (float64,) {
  %556 = fn () -> (float64,) {
    %554 = @func_4991() /* ty=(float64,) */;
    %555 = %554.0;
    (%555,)
  };
  %556() /* ty=(float64,) */
}

def @func_4604() -> Tensor[(3, 4, ?), int8] {
  %557 = fn () -> Tensor[(3, 4, ?), int8] {
    @func_1869() /* ty=Tensor[(3, 4, ?), int8] */
  };
  %557() /* ty=Tensor[(3, 4, ?), int8] */
}

def @func_4003(%var_4002: Tensor[(252, 2), float32]) -> (Tensor[(252, 2), bool], Tensor[(252, 2), bool], Tensor[(252, 2), bool], Tensor[(252, 2), float32]) {
  %583 = fn (%var_3923: Tensor[(252, 2), float32]) -> (Tensor[(252, 2), bool], Tensor[(252, 2), bool], Tensor[(252, 2), bool], Tensor[(252, 2), float32]) {
    %558 = @func_3014() /* ty=Tensor[(252, 2), float32] */;
    %559 = cast(%var_3923, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
    %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(2), int32] */;
    %561 = cast(%558, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
    %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %563 = cast(%558, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
    %564 = log2(%563) /* ty=Tensor[(252, 2), float32] */;
    %565 = cast(meta[relay.Constant][25] /* ty=Tensor[(252, 2), float32] */, dtype="uint32") /* ty=Tensor[(252, 2), uint32] */;
    %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(2), int32] */;
    %567 = cast(%564, dtype="uint32") /* ty=Tensor[(252, 2), uint32] */;
    %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %569 = bitwise_and(%567, %568) /* ty=Tensor[(252, 2), uint32] */;
    %570 = cast(%564, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
    %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(2), int32] */;
    %572 = cast(%569, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
    %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %574 = cast(%564, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
    %575 = shape_of(%569, dtype="int32") /* ty=Tensor[(2), int32] */;
    %576 = cast(%569, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
    %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %578 = cast(meta[relay.Constant][25] /* ty=Tensor[(252, 2), float32] */, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
    %579 = less(%561, %562) /* ty=Tensor[(252, 2), bool] */;
    %580 = logical_and(%572, %573) /* ty=Tensor[(252, 2), bool] */;
    %581 = equal(%576, %577) /* ty=Tensor[(252, 2), bool] */;
    %582 = sinh(%578) /* ty=Tensor[(252, 2), float32] */;
    (%579, %580, %581, %582)
  };
  %583(%var_4002) /* ty=(Tensor[(252, 2), bool], Tensor[(252, 2), bool], Tensor[(252, 2), bool], Tensor[(252, 2), float32]) */
}

def @func_1644() -> (float64, Tensor[(3, 4, ?), int8]) {
  %587 = fn () -> (float64, Tensor[(3, 4, ?), int8]) {
    %584 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
    %585 = @func_1598() /* ty=float64 */;
    %586 = %584.3;
    (%585, %586)
  };
  %587() /* ty=(float64, Tensor[(3, 4, ?), int8]) */
}

def @func_5455() -> Tensor[(3, 4, ?), int8] {
  @func_5453() /* ty=Tensor[(3, 4, ?), int8] */
}

def @func_130(%var_116: Tensor[(3, 1, 10), uint8], %var_117: Tensor[(3, 9, 10), uint8]) -> (Tensor[(3, 9, 10), uint8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64]) {
  %588 = cast(%var_116, dtype="uint8") /* ty=Tensor[(3, 1, 10), uint8] */;
  %589 = cast(%var_117, dtype="uint8") /* ty=Tensor[(3, 9, 10), uint8] */;
  %590 = cast(meta[relay.Constant][26] /* ty=Tensor[(576), uint64] */, dtype="uint64") /* ty=Tensor[(576), uint64] */;
  %591 = reshape(%590, newshape=[9, 4, 16]) /* ty=Tensor[(9, 4, 16), uint64] */;
  %592 = @func_60(%591) /* ty=(Tensor[(9, 4, 16), float32],) */;
  %593 = add(%588, %589) /* ty=Tensor[(3, 9, 10), uint8] */;
  %594 = %592.0;
  (%593, %594, meta[relay.Constant][26] /* ty=Tensor[(576), uint64] */)
}

def @func_3619() -> Tensor[(9, 4, 16), float32] {
  %595 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
  %595.1
}

def @func_5427() -> Tensor[(3, 4, ?), int8] {
  %596 = fn () -> Tensor[(3, 4, ?), int8] {
    @func_1869() /* ty=Tensor[(3, 4, ?), int8] */
  };
  %596() /* ty=Tensor[(3, 4, ?), int8] */
}

def @func_1598() -> float64 {
  %597 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
  %597.2
}

def @func_4933() -> float64 {
  %598 = @func_4048() /* ty=(float64, float64) */;
  %598.0
}

def @func_368(%var_328: Tensor[(12, 14, 3), float64]) -> (Tensor[(12, 14, 3), float64], Tensor[(12, 14, 3), int8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(12, 14, 3), float64]) {
  %599 = cast(%var_328, dtype="float64") /* ty=Tensor[(12, 14, 3), float64] */;
  %600 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(12, 14, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(12, 14, 3), float64] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %603 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 14, 3), float64] */, dtype="int8") /* ty=Tensor[(12, 14, 3), int8] */;
  %604 = shape_of(%var_328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%var_328, dtype="int8") /* ty=Tensor[(12, 14, 3), int8] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %607 = cast(meta[relay.Constant][28] /* ty=Tensor[(576), uint64] */, dtype="uint64") /* ty=Tensor[(576), uint64] */;
  %608 = reshape(%607, newshape=[9, 4, 16]) /* ty=Tensor[(9, 4, 16), uint64] */;
  %609 = @func_60(%608) /* ty=(Tensor[(9, 4, 16), float32],) */;
  %610 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(12, 14, 3), float64] */;
  %611 = erf(%610) /* ty=Tensor[(12, 14, 3), float64] */;
  %612 = cast(%611, dtype="float64") /* ty=Tensor[(12, 14, 3), float64] */;
  %613 = mod(%601, %602) /* ty=Tensor[(12, 14, 3), float64] */;
  %614 = minimum(%605, %606) /* ty=Tensor[(12, 14, 3), int8] */;
  %615 = %609.0;
  %616 = cosh(%612) /* ty=Tensor[(12, 14, 3), float64] */;
  (%613, %614, %615, meta[relay.Constant][28] /* ty=Tensor[(576), uint64] */, %616)
}

def @func_3164() -> (Tensor[(252, 2), float32],) {
  @func_3162() /* ty=(Tensor[(252, 2), float32],) */
}

def @func_5502(%var_5500: Tensor[(4, 4, 3), uint64], %var_5501: Tensor[(4, 4, 3), uint64]) -> (Tensor[(4, 4, 3), bool], Tensor[(252, 2), float32], Tensor[(4, 4, 3), float32]) {
  @func_5498(%var_5500, %var_5501) /* ty=(Tensor[(4, 4, 3), bool], Tensor[(252, 2), float32], Tensor[(4, 4, 3), float32]) */
}

def @func_371(%var_369: Tensor[(12, 14, 3), float64]) -> (Tensor[(12, 14, 3), float64], Tensor[(12, 14, 3), int8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(12, 14, 3), float64]) {
  @func_368(%var_369) /* ty=(Tensor[(12, 14, 3), float64], Tensor[(12, 14, 3), int8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(12, 14, 3), float64]) */
}

def @func_476(%var_474: float64) -> (Tensor[(8, 15, 3), float64], Tensor[(8, 15, 3), uint64]) {
  @func_473(%var_474) /* ty=(Tensor[(8, 15, 3), float64], Tensor[(8, 15, 3), uint64]) */
}

def @func_3869() -> (float64, Tensor[(9, 4, 16), float32], Tensor[(3, 4, ?), float64]) {
  %617 = @func_3728() /* ty=(float64, Tensor[(9, 4, 16), float32]) */;
  %618 = @func_1869() /* ty=Tensor[(3, 4, ?), int8] */;
  %619 = cast(%618, dtype="float64") /* ty=Tensor[(3, 4, ?), float64] */;
  %620 = %617.0;
  %621 = @func_3619() /* ty=Tensor[(9, 4, 16), float32] */;
  %622 = tan(%619) /* ty=Tensor[(3, 4, ?), float64] */;
  (%620, %621, %622)
}

def @func_2826(%var_2824: uint64, %var_2825: Tensor[(9, 13, 12), uint64]) -> (Tensor[(9, 13, 12), uint64], Tensor[(3, 4, ?), int8]) {
  %628 = fn (%var_2804: uint64, %var_2805: Tensor[(9, 13, 12), uint64]) -> (Tensor[(9, 13, 12), uint64], Tensor[(3, 4, ?), int8]) {
    %623 = cast(%var_2804, dtype="uint64") /* ty=uint64 */;
    %624 = cast(%var_2805, dtype="uint64") /* ty=Tensor[(9, 13, 12), uint64] */;
    %625 = @func_1643() /* ty=(float64, Tensor[(3, 4, ?), int8]) */;
    %626 = logical_xor(%623, %624) /* ty=Tensor[(9, 13, 12), uint64] */;
    %627 = %625.1;
    (%626, %627)
  };
  %628(%var_2824, %var_2825) /* ty=(Tensor[(9, 13, 12), uint64], Tensor[(3, 4, ?), int8]) */
}

def @func_3729() -> (float64, Tensor[(9, 4, 16), float32]) {
  %632 = fn () -> (float64, Tensor[(9, 4, 16), float32]) {
    %629 = @func_1669() /* ty=(float64, Tensor[(9, 4, 16), float32], Tensor[(252, 2), float64]) */;
    %630 = %629.0;
    %631 = @func_3619() /* ty=Tensor[(9, 4, 16), float32] */;
    (%630, %631)
  };
  %632() /* ty=(float64, Tensor[(9, 4, 16), float32]) */
}

def @func_4284(%var_4282: Tensor[(9, 4, 16), float32], %var_4283: Tensor[(96), int8]) -> (Tensor[(9, 4, 16), uint8], Tensor[(3, 4, 8), uint64], Tensor[(96), int8], Tensor[(9, 4, 16), float32], Tensor[(9, 4, 16), bool]) {
  %653 = fn (%var_4247: Tensor[(9, 4, 16), float32], %var_4257: Tensor[(96), int8]) -> (Tensor[(9, 4, 16), uint8], Tensor[(3, 4, 8), uint64], Tensor[(96), int8], Tensor[(9, 4, 16), float32], Tensor[(9, 4, 16), bool]) {
    %633 = @func_3619() /* ty=Tensor[(9, 4, 16), float32] */;
    %634 = cast(%var_4247, dtype="uint8") /* ty=Tensor[(9, 4, 16), uint8] */;
    %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
    %636 = cast(%633, dtype="uint8") /* ty=Tensor[(9, 4, 16), uint8] */;
    %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %638 = cast(%var_4257, dtype="int8") /* ty=Tensor[(96), int8] */;
    %639 = reshape(%638, newshape=[3, 4, 8]) /* ty=Tensor[(3, 4, 8), int8] */;
    %640 = @func_3461(%639) /* ty=(Tensor[(3, 4, 8), uint64], Tensor[(3, 4, 8), bool]) */;
    %641 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 4, 16), float32] */, dtype="float32") /* ty=Tensor[(9, 4, 16), float32] */;
    %642 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
    %643 = cast(%633, dtype="float32") /* ty=Tensor[(9, 4, 16), float32] */;
    %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %645 = cast(%633, dtype="bool") /* ty=Tensor[(9, 4, 16), bool] */;
    %646 = shape_of(%var_4247, dtype="int32") /* ty=Tensor[(3), int32] */;
    %647 = cast(%var_4247, dtype="bool") /* ty=Tensor[(9, 4, 16), bool] */;
    %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %649 = right_shift(%636, %637) /* ty=Tensor[(9, 4, 16), uint8] */;
    %650 = %640.0;
    %651 = floor_divide(%643, %644) /* ty=Tensor[(9, 4, 16), float32] */;
    %652 = less_equal(%647, %648) /* ty=Tensor[(9, 4, 16), bool] */;
    (%649, %650, %var_4257, %651, %652)
  };
  %653(%var_4282, %var_4283) /* ty=(Tensor[(9, 4, 16), uint8], Tensor[(3, 4, 8), uint64], Tensor[(96), int8], Tensor[(9, 4, 16), float32], Tensor[(9, 4, 16), bool]) */
}

def @func_3463(%var_3462: Tensor[(3, 4, 8), int8]) -> (Tensor[(3, 4, 8), uint64], Tensor[(3, 4, 8), bool]) {
  %664 = fn (%var_3452: Tensor[(3, 4, 8), int8]) -> (Tensor[(3, 4, 8), uint64], Tensor[(3, 4, 8), bool]) {
    %654 = @func_1573() /* ty=(float64, Tensor[(1430), float32], float64, Tensor[(3, 4, ?), int8]) */;
    %655 = %654.3;
    %656 = cast(%655, dtype="uint64") /* ty=Tensor[(3, 4, ?), uint64] */;
    %657 = cast(%var_3452, dtype="uint64") /* ty=Tensor[(3, 4, 8), uint64] */;
    %658 = cast(%655, dtype="float32") /* ty=Tensor[(3, 4, ?), float32] */;
    %659 = acosh(%658) /* ty=Tensor[(3, 4, ?), float32] */;
    %660 = cast(%659, dtype="bool") /* ty=Tensor[(3, 4, ?), bool] */;
    %661 = cast(%var_3452, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
    %662 = bitwise_or(%656, %657) /* ty=Tensor[(3, 4, 8), uint64] */;
    %663 = less(%660, %661) /* ty=Tensor[(3, 4, 8), bool] */;
    (%662, %663)
  };
  %664(%var_3462) /* ty=(Tensor[(3, 4, 8), uint64], Tensor[(3, 4, 8), bool]) */
}

def @func_3679(%var_3677: Tensor[(5, 1, 1), int32], %var_3678: Tensor[(5, 4, 11), int32]) -> (float64, Tensor[(252, 2), bool], Tensor[(1960), int32], Tensor[(504), float32], Tensor[(5, 4, 11), float64], float64, Tensor[(9, 4, 16), float32]) {
  @func_3675(%var_3677, %var_3678) /* ty=(float64, Tensor[(252, 2), bool], Tensor[(1960), int32], Tensor[(504), float32], Tensor[(5, 4, 11), float64], float64, Tensor[(9, 4, 16), float32]) */
}

def @func_4842(%var_4840: Tensor[(30), uint8], %var_4841: Tensor[(270), uint8]) -> (Tensor[(252, 2), float32], Tensor[(576), uint64], Tensor[(30), uint8], Tensor[(270), uint8]) {
  %673 = fn (%var_4827: Tensor[(30), uint8], %var_4828: Tensor[(270), uint8]) -> (Tensor[(252, 2), float32], Tensor[(576), uint64], Tensor[(30), uint8], Tensor[(270), uint8]) {
    %665 = @func_3226() /* ty=(Tensor[(252, 2), float32],) */;
    %666 = cast(%var_4827, dtype="uint8") /* ty=Tensor[(30), uint8] */;
    %667 = cast(%var_4828, dtype="uint8") /* ty=Tensor[(270), uint8] */;
    %668 = reshape(%666, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), uint8] */;
    %669 = reshape(%667, newshape=[3, 9, 10]) /* ty=Tensor[(3, 9, 10), uint8] */;
    %670 = @func_130(%668, %669) /* ty=(Tensor[(3, 9, 10), uint8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64]) */;
    %671 = %665.0;
    %672 = %670.2;
    (%671, %672, %var_4827, %var_4828)
  };
  %673(%var_4840, %var_4841) /* ty=(Tensor[(252, 2), float32], Tensor[(576), uint64], Tensor[(30), uint8], Tensor[(270), uint8]) */
}

def @func_4093() -> (Tensor[(3, 4, ?), int8],) {
  %674 = @func_1956() /* ty=(Tensor[(3, 4, ?), int8],) */;
  %675 = %674.0;
  (%675,)
}

def @func_2616(%var_2614: Tensor[(180), int8]) -> (Tensor[(3, 4, 15), float64], Tensor[(180), int8], Tensor[(252, 2), int16]) {
  @func_2613(%var_2614) /* ty=(Tensor[(3, 4, 15), float64], Tensor[(180), int8], Tensor[(252, 2), int16]) */
}

def @func_724(%var_721: uint16, %var_722: Tensor[(16, 4, 3), uint16], %var_723: Tensor[(504), float64]) -> (Tensor[(16, 4, 3), uint16], Tensor[(8, 15, 3), float64], Tensor[(9, 4, 16), float32], Tensor[(504), float64]) {
  %687 = fn (%var_679: uint16, %var_680: Tensor[(16, 4, 3), uint16], %var_711: Tensor[(504), float64]) -> (Tensor[(16, 4, 3), uint16], Tensor[(8, 15, 3), float64], Tensor[(9, 4, 16), float32], Tensor[(504), float64]) {
    %676 = cast(%var_679, dtype="uint16") /* ty=uint16 */;
    %677 = cast(%var_680, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
    %678 = cast(%var_679, dtype="float64") /* ty=float64 */;
    %679 = reshape(%678, newshape=[]) /* ty=float64 */;
    %680 = @func_473(%679) /* ty=(Tensor[(8, 15, 3), float64], Tensor[(8, 15, 3), uint64]) */;
    %681 = cast(%var_711, dtype="float64") /* ty=Tensor[(504), float64] */;
    %682 = reshape(%681, newshape=[12, 14, 3]) /* ty=Tensor[(12, 14, 3), float64] */;
    %683 = @func_368(%682) /* ty=(Tensor[(12, 14, 3), float64], Tensor[(12, 14, 3), int8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(12, 14, 3), float64]) */;
    %684 = add(%676, %677) /* ty=Tensor[(16, 4, 3), uint16] */;
    %685 = %680.0;
    %686 = %683.2;
    (%684, %685, %686, %var_711)
  };
  %687(%var_721, %var_722, %var_723) /* ty=(Tensor[(16, 4, 3), uint16], Tensor[(8, 15, 3), float64], Tensor[(9, 4, 16), float32], Tensor[(504), float64]) */
}

def @func_2254(%var_2251: Tensor[(225), float64], %var_2252: Tensor[(144), int8], %var_2253: Tensor[(1, 576), uint64]) -> (Tensor[(12), float64], Tensor[(15, 5, 3), bool], Tensor[(225), float64], Tensor[(12), float64], Tensor[(144), int8], Tensor[(9, 4, 16), float32], Tensor[(1, 576), uint64]) {
  %707 = fn (%var_2237: Tensor[(225), float64], %var_2243: Tensor[(144), int8], %var_2248: Tensor[(1, 576), uint64]) -> (Tensor[(12), float64], Tensor[(15, 5, 3), bool], Tensor[(225), float64], Tensor[(12), float64], Tensor[(144), int8], Tensor[(9, 4, 16), float32], Tensor[(1, 576), uint64]) {
    %688 = @func_1701() /* ty=(float64, Tensor[(2, 2, 3), float64], Tensor[(12), float64]) */;
    %689 = cast(%var_2237, dtype="float64") /* ty=Tensor[(225), float64] */;
    %690 = cast(%var_2237, dtype="float64") /* ty=Tensor[(225), float64] */;
    %691 = reshape(%689, newshape=[15, 5, 3]) /* ty=Tensor[(15, 5, 3), float64] */;
    %692 = reshape(%690, newshape=[15, 5, 3]) /* ty=Tensor[(15, 5, 3), float64] */;
    %693 = cast(%var_2243, dtype="int8") /* ty=Tensor[(144), int8] */;
    %694 = cast(%var_2243, dtype="int8") /* ty=Tensor[(144), int8] */;
    %695 = %688.2;
    %696 = cast(%695, dtype="float64") /* ty=Tensor[(12), float64] */;
    %697 = reshape(%693, newshape=[6, 8, 3]) /* ty=Tensor[(6, 8, 3), int8] */;
    %698 = reshape(%694, newshape=[6, 8, 3]) /* ty=Tensor[(6, 8, 3), int8] */;
    %699 = reshape(%696, newshape=[12]) /* ty=Tensor[(12), float64] */;
    %700 = @func_894(%697, %698, %699) /* ty=(Tensor[(6, 8, 3), int8], Tensor[(2, 2, 3), float64], Tensor[(12), float64]) */;
    %701 = cast(%var_2248, dtype="uint64") /* ty=Tensor[(1, 576), uint64] */;
    %702 = reshape(%701, newshape=[9, 4, 16]) /* ty=Tensor[(9, 4, 16), uint64] */;
    %703 = @func_60(%702) /* ty=(Tensor[(9, 4, 16), float32],) */;
    %704 = @func_2110(%691, %692) /* ty=Tensor[(15, 5, 3), bool] */;
    %705 = %700.2;
    %706 = %703.0;
    (%695, %704, %var_2237, %705, %var_2243, %706, %var_2248)
  };
  %707(%var_2251, %var_2252, %var_2253) /* ty=(Tensor[(12), float64], Tensor[(15, 5, 3), bool], Tensor[(225), float64], Tensor[(12), float64], Tensor[(144), int8], Tensor[(9, 4, 16), float32], Tensor[(1, 576), uint64]) */
}

def @func_3226() -> (Tensor[(252, 2), float32],) {
  %708 = @func_3014() /* ty=Tensor[(252, 2), float32] */;
  (%708,)
}

def @func_134(%var_132: Tensor[(3, 1, 10), uint8], %var_133: Tensor[(3, 9, 10), uint8]) -> (Tensor[(3, 9, 10), uint8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64]) {
  @func_130(%var_132, %var_133) /* ty=(Tensor[(3, 9, 10), uint8], Tensor[(9, 4, 16), float32], Tensor[(576), uint64]) */
}

def @func_3132(%var_3129: Tensor[(14, 10, 14), int32], %var_3130: Tensor[(14, 10, 14), int32], %var_3131: Tensor[(504), float32]) -> (Tensor[(14, 10, 14), int32], Tensor[(252, 2), bool], Tensor[(504), float32]) {
  %720 = fn (%var_3096: Tensor[(14, 10, 14), int32], %var_3097: Tensor[(14, 10, 14), int32], %var_3124: Tensor[(504), float32]) -> (Tensor[(14, 10, 14), int32], Tensor[(252, 2), bool], Tensor[(504), float32]) {
    %709 = cast(%var_3097, dtype="int32") /* ty=Tensor[(14, 10, 14), int32] */;
    %710 = shape_of(%var_3096, dtype="int32") /* ty=Tensor[(3), int32] */;
    %711 = cast(%var_3096, dtype="int32") /* ty=Tensor[(14, 10, 14), int32] */;
    %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %713 = cast(%var_3124, dtype="float32") /* ty=Tensor[(504), float32] */;
    %714 = cast(%var_3124, dtype="float32") /* ty=Tensor[(504), float32] */;
    %715 = reshape(%713, newshape=[252, 2]) /* ty=Tensor[(252, 2), float32] */;
    %716 = reshape(%714, newshape=[252, 2]) /* ty=Tensor[(252, 2), float32] */;
    %717 = @func_2675(%715, %716) /* ty=(Tensor[(252, 2), bool], Tensor[(252, 2), float32]) */;
    %718 = multiply(%711, %712) /* ty=Tensor[(14, 10, 14), int32] */;
    %719 = %717.0;
    (%718, %719, %var_3124)
  };
  %720(%var_3129, %var_3130, %var_3131) /* ty=(Tensor[(14, 10, 14), int32], Tensor[(252, 2), bool], Tensor[(504), float32]) */
}

def @func_2564(%var_2561: Tensor[(225), float64], %var_2562: Tensor[(2, 288), uint64], %var_2563: Tensor[(504), float64]) -> (Tensor[(1430), float32], Tensor[(12), float64], Tensor[(225), float64], Tensor[(2, 288), bool], Tensor[(24, 6), bool], Tensor[(24, 6), bool], Tensor[(8, 15, 3), float64], Tensor[(40), float64], Tensor[(192), uint16], Tensor[(504), float64]) {
  %760 = fn (%var_2487: Tensor[(225), float64], %var_2516: Tensor[(2, 288), uint64], %var_2558: Tensor[(504), float64]) -> (Tensor[(1430), float32], Tensor[(12), float64], Tensor[(225), float64], Tensor[(2, 288), bool], Tensor[(24, 6), bool], Tensor[(24, 6), bool], Tensor[(8, 15, 3), float64], Tensor[(40), float64], Tensor[(192), uint16], Tensor[(504), float64]) {
    %721 = cast(%var_2487, dtype="float64") /* ty=Tensor[(225), float64] */;
    %722 = cast(meta[relay.Constant][31] /* ty=Tensor[(24, 6), int8] */, dtype="int8") /* ty=Tensor[(24, 6), int8] */;
    %723 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 288), uint64] */, dtype="uint64") /* ty=Tensor[(2, 288), uint64] */;
    %724 = reshape(%721, newshape=[225]) /* ty=Tensor[(225), float64] */;
    %725 = reshape(%722, newshape=[144]) /* ty=Tensor[(144), int8] */;
    %726 = reshape(%723, newshape=[1, 576]) /* ty=Tensor[(1, 576), uint64] */;
    %727 = @func_2250(%724, %725, %726) /* ty=(Tensor[(12), float64], Tensor[(15, 5, 3), bool], Tensor[(225), float64], Tensor[(12), float64], Tensor[(144), int8], Tensor[(9, 4, 16), float32], Tensor[(1, 576), uint64]) */;
    %728 = cast(%var_2516, dtype="bool") /* ty=Tensor[(2, 288), bool] */;
    %729 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(2, 288), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %730 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 288), uint64] */, dtype="bool") /* ty=Tensor[(2, 288), bool] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %732 = @func_1900() /* ty=(float64,) */;
    %733 = %732.0;
    %734 = cast(meta[relay.Constant][31] /* ty=Tensor[(24, 6), int8] */, dtype="bool") /* ty=Tensor[(24, 6), bool] */;
    %735 = cast(%733, dtype="bool") /* ty=bool */;
    %736 = cast(meta[relay.Constant][31] /* ty=Tensor[(24, 6), int8] */, dtype="float64") /* ty=Tensor[(24, 6), float64] */;
    %737 = exp(%736) /* ty=Tensor[(24, 6), float64] */;
    %738 = cast(meta[relay.Constant][30] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %739 = cast(meta[relay.Constant][30] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %740 = cast(%733, dtype="float64") /* ty=float64 */;
    %741 = reshape(%738, newshape=[11, 10, 13]) /* ty=Tensor[(11, 10, 13), float32] */;
    %742 = reshape(%739, newshape=[11, 10, 13]) /* ty=Tensor[(11, 10, 13), float32] */;
    %743 = reshape(%740, newshape=[]) /* ty=float64 */;
    %744 = @func_1485(%741, %742, %743) /* ty=(Tensor[(11, 10, 13), int16], Tensor[(8, 15, 3), uint64], Tensor[(256), float32], float64, Tensor[(11, 10, 13), float64]) */;
    %745 = %744.3;
    %746 = cast(%737, dtype="bool") /* ty=Tensor[(24, 6), bool] */;
    %747 = cast(%745, dtype="bool") /* ty=bool */;
    %748 = cast(meta[relay.Constant][33] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
    %749 = cast(meta[relay.Constant][34] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
    %750 = cast(%var_2558, dtype="float64") /* ty=Tensor[(504), float64] */;
    %751 = reshape(%748, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
    %752 = reshape(%749, newshape=[192]) /* ty=Tensor[(192), uint16] */;
    %753 = reshape(%750, newshape=[252, 2]) /* ty=Tensor[(252, 2), float64] */;
    %754 = @func_993(%751, %752, %753) /* ty=(Tensor[(8, 15, 3), float64], float64, Tensor[(5, 2, 4), float32], Tensor[(5, 2, 4), float32], Tensor[(8, 15, 3), float64], Tensor[(192), uint16], Tensor[(252, 2), float64]) */;
    %755 = %727.0;
    %756 = not_equal(%730, %731) /* ty=Tensor[(2, 288), bool] */;
    %757 = less(%734, %735) /* ty=Tensor[(24, 6), bool] */;
    %758 = equal(%746, %747) /* ty=Tensor[(24, 6), bool] */;
    %759 = %754.4;
    (meta[relay.Constant][30] /* ty=Tensor[(1430), float32] */, %755, %var_2487, %756, %757, %758, %759, meta[relay.Constant][33] /* ty=Tensor[(40), float64] */, meta[relay.Constant][34] /* ty=Tensor[(192), uint16] */, %var_2558)
  };
  %760(%var_2561, %var_2562, %var_2563) /* ty=(Tensor[(1430), float32], Tensor[(12), float64], Tensor[(225), float64], Tensor[(2, 288), bool], Tensor[(24, 6), bool], Tensor[(24, 6), bool], Tensor[(8, 15, 3), float64], Tensor[(40), float64], Tensor[(192), uint16], Tensor[(504), float64]) */
}

def @func_4870() -> (float64,) {
  %761 = @func_4561() /* ty=(float64,) */;
  %762 = %761.0;
  (%762,)
}

def @func_1430(%var_1427: Tensor[(13, 6, 12), float64], %var_1428: Tensor[(13, 6, 12), float64], %var_1429: Tensor[(6, 84), float64]) -> (Tensor[(13, 6, 12), float64], Tensor[(13, 6, 12), float64], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(504), float64], uint16, Tensor[(4, 48), uint16], Tensor[(6, 84), float64]) {
  @func_1425(%var_1427, %var_1428, %var_1429) /* ty=(Tensor[(13, 6, 12), float64], Tensor[(13, 6, 12), float64], Tensor[(9, 4, 16), float32], Tensor[(576), uint64], Tensor[(504), float64], uint16, Tensor[(4, 48), uint16], Tensor[(6, 84), float64]) */
}

def @func_1490(%var_1487: Tensor[(11, 10, 13), float32], %var_1488: Tensor[(11, 10, 13), float32], %var_1489: float64) -> (Tensor[(11, 10, 13), int16], Tensor[(8, 15, 3), uint64], Tensor[(256), float32], float64, Tensor[(11, 10, 13), float64]) {
  @func_1485(%var_1487, %var_1488, %var_1489) /* ty=(Tensor[(11, 10, 13), int16], Tensor[(8, 15, 3), uint64], Tensor[(256), float32], float64, Tensor[(11, 10, 13), float64]) */
}

def @func_473(%var_441: float64) -> (Tensor[(8, 15, 3), float64], Tensor[(8, 15, 3), uint64]) {
  %763 = cast(%var_441, dtype="float64") /* ty=float64 */;
  %764 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 15, 3), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 3), float64] */;
  %765 = cast(%var_441, dtype="bool") /* ty=bool */;
  %766 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 15, 3), float64] */, dtype="bool") /* ty=Tensor[(8, 15, 3), bool] */;
  %767 = not_equal(%765, %766) /* ty=Tensor[(8, 15, 3), bool] */;
  %768 = cast(%var_441, dtype="uint64") /* ty=uint64 */;
  %769 = cast(%767, dtype="uint64") /* ty=Tensor[(8, 15, 3), uint64] */;
  %770 = divide(%763, %764) /* ty=Tensor[(8, 15, 3), float64] */;
  %771 = add(%768, %769) /* ty=Tensor[(8, 15, 3), uint64] */;
  (%770, %771)
}

def @func_2675(%var_2648: Tensor[(252, 2), float32], %var_2670: Tensor[(252, 2), float32]) -> (Tensor[(252, 2), bool], Tensor[(252, 2), float32]) {
  %772 = @func_1999() /* ty=(Tensor[(252, 2), float32], Tensor[(252, 2), float32]) */;
  %773 = %772.0;
  %774 = cast(%var_2648, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(2), int32] */;
  %776 = cast(%773, dtype="bool") /* ty=Tensor[(252, 2), bool] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %778 = cast(%var_2670, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %779 = shape_of(%773, dtype="int32") /* ty=Tensor[(2), int32] */;
  %780 = cast(%773, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %782 = less_equal(%776, %777) /* ty=Tensor[(252, 2), bool] */;
  %783 = maximum(%780, %781) /* ty=Tensor[(252, 2), float32] */;
  (%782, %783)
}

def @func_2947() -> (float64, Tensor[(3, 4, 15), float64], Tensor[(180, 1), int8], Tensor[(252, 2), int16]) {
  @func_2945() /* ty=(float64, Tensor[(3, 4, 15), float64], Tensor[(180, 1), int8], Tensor[(252, 2), int16]) */
}

def @func_2945() -> (float64, Tensor[(3, 4, 15), float64], Tensor[(180, 1), int8], Tensor[(252, 2), int16]) {
  %784 = cast(meta[relay.Constant][36] /* ty=Tensor[(180, 1), int8] */, dtype="int8") /* ty=Tensor[(180, 1), int8] */;
  %785 = reshape(%784, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %786 = @func_2613(%785) /* ty=(Tensor[(3, 4, 15), float64], Tensor[(180), int8], Tensor[(252, 2), int16]) */;
  %787 = %786.0;
  %788 = cast(%787, dtype="int8") /* ty=Tensor[(3, 4, 15), int8] */;
  %789 = reshape(%788, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %790 = @func_2613(%789) /* ty=(Tensor[(3, 4, 15), float64], Tensor[(180), int8], Tensor[(252, 2), int16]) */;
  %791 = @func_1598() /* ty=float64 */;
  %792 = %790.2;
  (%791, %787, meta[relay.Constant][36] /* ty=Tensor[(180, 1), int8] */, %792)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen345/build/output.py", line 1801, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:08:54] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

