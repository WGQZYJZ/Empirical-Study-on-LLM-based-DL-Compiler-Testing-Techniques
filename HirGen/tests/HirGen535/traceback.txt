==========mod==========
#[version = "0.0.5"]
def @func_3792(%var_3767: Tensor[(10, 10, 10), bool], %var_3768: Tensor[(10, 10, 10), bool]) -> (Tensor[(10, 10, 10), bool],) {
  %0 = cast(%var_3768, dtype="bool") /* ty=Tensor[(10, 10, 10), bool] */;
  %1 = shape_of(%var_3767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_3767, dtype="bool") /* ty=Tensor[(10, 10, 10), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = logical_and(%2, %3) /* ty=Tensor[(10, 10, 10), bool] */;
  (%4,)
}

def @func_4549(%var_4528: Tensor[(8, 2), float64]) -> (Tensor[(9450), float64], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64], Tensor[(1050, 7), float32]) {
  %5 = @func_3546() /* ty=(Tensor[(9450), float64], Tensor[(1050, 7), float32]) */;
  %6 = cast(%var_4528, dtype="float64") /* ty=Tensor[(8, 2), float64] */;
  %7 = reshape(%6, newshape=[1, 16, 1]) /* ty=Tensor[(1, 16, 1), float64] */;
  %8 = @func_107(%7) /* ty=(Tensor[(1, 16, 1), float64],) */;
  %9 = %5.0;
  %10 = %8.0;
  %11 = @func_1178() /* ty=Tensor[(1050, 7), float32] */;
  (%9, %10, %var_4528, %11)
}

def @func_3519() -> (Tensor[(1050, 7), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) {
  %12 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %13 = %12.1;
  %14 = cast(%13, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %15 = @func_1784() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) */;
  %16 = cast(%13, dtype="float32") /* ty=Tensor[(1050, 7), float32] */;
  %17 = log10(%14) /* ty=Tensor[(1050, 7), float64] */;
  %18 = %15.2;
  %19 = rsqrt(%16) /* ty=Tensor[(1050, 7), float32] */;
  (%17, %18, %19)
}

def @func_3667() -> (Tensor[(10500), uint64],) {
  %20 = @func_2655() /* ty=(Tensor[(10500), float64], Tensor[(1050, 4), bool], Tensor[(4200), float64]) */;
  %21 = %20.0;
  %22 = cast(%21, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %23 = log(%22) /* ty=Tensor[(10500), float64] */;
  %24 = cast(%21, dtype="uint64") /* ty=Tensor[(10500), uint64] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(1), int32] */;
  %26 = cast(%23, dtype="uint64") /* ty=Tensor[(10500), uint64] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %28 = bitwise_or(%26, %27) /* ty=Tensor[(10500), uint64] */;
  (%28,)
}

def @func_3870() -> (Tensor[(1050, 7), float32], Tensor[(1050, 1), float64]) {
  %29 = @func_2955() /* ty=(Tensor[(1050, 1), float64],) */;
  %30 = @func_1178() /* ty=Tensor[(1050, 7), float32] */;
  %31 = %29.0;
  (%30, %31)
}

def @func_702() -> (Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) {
  %32 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %33 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %34 = %33.1;
  %35 = cast(%34, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
  %36 = %32.2;
  %37 = cosh(%35) /* ty=Tensor[(7, 15, 10), float64] */;
  (%36, %37)
}

def @func_4033() -> (Tensor[(1050, 1), float64], Tensor[(1050, 1), float64]) {
  %38 = @func_2272() /* ty=(Tensor[(1050, 1), float64],) */;
  %39 = @func_1213() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
  %40 = %38.0;
  %41 = %39.0;
  (%40, %41)
}

def @func_71(%var_47: Tensor[(7, 15, 10), float64], %var_67: Tensor[(7, 15, 10), float64]) -> (Tensor[(7, 15, 10), bool], Tensor[(7, 15, 10), bool]) {
  %42 = cast(%var_47, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
  %43 = rsqrt(%42) /* ty=Tensor[(7, 15, 10), float64] */;
  %44 = cast(%var_47, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%43, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %48 = cast(%var_67, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
  %49 = shape_of(%var_47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%var_47, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %52 = greater(%46, %47) /* ty=Tensor[(7, 15, 10), bool] */;
  %53 = not_equal(%50, %51) /* ty=Tensor[(7, 15, 10), bool] */;
  (%52, %53)
}

def @func_1999() -> (Tensor[(1050, 7), float64], Tensor[(15, 7, 2), float64]) {
  %54 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %55 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %56 = %55.0;
  %57 = cast(%56, dtype="float64") /* ty=Tensor[(15, 7, 2), float64] */;
  %58 = %54.1;
  %59 = exp(%57) /* ty=Tensor[(15, 7, 2), float64] */;
  (%58, %59)
}

def @func_4757(%var_4745: Tensor[(4, 14, 11), bool]) -> (Tensor[(4, 14, 11), bool], Tensor[(7, 15, 10), float32]) {
  %60 = cast(%var_4745, dtype="bool") /* ty=Tensor[(4, 14, 11), bool] */;
  %61 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 14, 11), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 14, 11), bool] */, dtype="bool") /* ty=Tensor[(4, 14, 11), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %64 = @func_2454() /* ty=(Tensor[(7, 15, 10), float32],) */;
  %65 = logical_or(%62, %63) /* ty=Tensor[(4, 14, 11), bool] */;
  %66 = %64.0;
  (%65, %66)
}

def @main(%var_5097: Tensor[(1050, 16), float64]) -> (Tensor[(1050, ?), bool], Tensor[(1050, 16), bool]) {
  %67 = @func_4239() /* ty=(Tensor[(16, 3, 8), bool], Tensor[(1050, 1), float64]) */;
  %68 = %67.1;
  %69 = cast(%68, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %70 = log(%69) /* ty=Tensor[(1050, 1), float64] */;
  %71 = cast(%68, dtype="bool") /* ty=Tensor[(1050, 1), bool] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(2), int32] */;
  %73 = cast(%70, dtype="bool") /* ty=Tensor[(1050, 1), bool] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %75 = cast(%70, dtype="bool") /* ty=Tensor[(1050, 1), bool] */;
  %76 = cast(%var_5097, dtype="bool") /* ty=Tensor[(1050, 16), bool] */;
  %77 = greater(%73, %74) /* ty=Tensor[(1050, ?), bool] */;
  %78 = logical_and(%75, %76) /* ty=Tensor[(1050, 16), bool] */;
  (%77, %78)
}

def @func_107(%var_93: Tensor[(1, 16, 1), float64]) -> (Tensor[(1, 16, 1), float64],) {
  %79 = cast(%var_93, dtype="float64") /* ty=Tensor[(1, 16, 1), float64] */;
  %80 = erf(%79) /* ty=Tensor[(1, 16, 1), float64] */;
  (%80,)
}

def @func_2272() -> (Tensor[(1050, 1), float64],) {
  %81 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
  (%81,)
}

def @func_634(%var_613: Tensor[(9450), float64]) -> (Tensor[(1050, 1), float64], Tensor[(1050, 1), float32], Tensor[(1050, 1), float64], Tensor[(9450), float64], Tensor[(1, 16, 1), float64], Tensor[(10500), float64], Tensor[(1050, 6), bool]) {
  %82 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %83 = %82.2;
  %84 = cast(%83, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %85 = cast(%83, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
  %86 = cast(%var_613, dtype="float64") /* ty=Tensor[(9450), float64] */;
  %87 = reshape(%86, newshape=[1050, 9]) /* ty=Tensor[(1050, 9), float64] */;
  %88 = @func_395(%87) /* ty=(Tensor[(1050, 6), int32], Tensor[(1050, 9), uint16], Tensor[(1050, 1), float64], Tensor[(1050, 6), float32], Tensor[(1050, 1), float64], Tensor[(1050, 6), bool]) */;
  %89 = cast(meta[relay.Constant][1] /* ty=Tensor[(10500), float64] */, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %90 = reshape(%89, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %91 = @func_505(%90) /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), bool], Tensor[(15, 7, 2), uint64], Tensor[(10500), float64], Tensor[(7, 15, 10), bool], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64]) */;
  %92 = cast(%var_613, dtype="float64") /* ty=Tensor[(9450), float64] */;
  %93 = reshape(%92, newshape=[1050, 9]) /* ty=Tensor[(1050, 9), float64] */;
  %94 = @func_395(%93) /* ty=(Tensor[(1050, 6), int32], Tensor[(1050, 9), uint16], Tensor[(1050, 1), float64], Tensor[(1050, 6), float32], Tensor[(1050, 1), float64], Tensor[(1050, 6), bool]) */;
  %95 = rsqrt(%84) /* ty=Tensor[(1050, 1), float64] */;
  %96 = erf(%85) /* ty=Tensor[(1050, 1), float32] */;
  %97 = %88.4;
  %98 = %91.5;
  %99 = %94.5;
  (%95, %96, %97, %var_613, %98, meta[relay.Constant][1] /* ty=Tensor[(10500), float64] */, %99)
}

def @func_505(%var_485: Tensor[(10500), float64]) -> (Tensor[(1050, 1), float64], Tensor[(7, 15, 10), bool], Tensor[(15, 7, 2), uint64], Tensor[(10500), float64], Tensor[(7, 15, 10), bool], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64]) {
  %100 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %101 = %100.2;
  %102 = cast(%101, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %103 = cast(%101, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %104 = reshape(%102, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %105 = reshape(%103, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %106 = @func_71(%104, %105) /* ty=(Tensor[(7, 15, 10), bool], Tensor[(7, 15, 10), bool]) */;
  %107 = cast(%var_485, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %108 = reshape(%107, newshape=[1050, 10]) /* ty=Tensor[(1050, 10), float64] */;
  %109 = @func_462(%108) /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(1050, 10), uint64], Tensor[(1050, 10), uint8], Tensor[(1050, 10), int16]) */;
  %110 = %106.1;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
  %112 = cast(%110, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
  %113 = reshape(%111, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %114 = reshape(%112, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %115 = @func_71(%113, %114) /* ty=(Tensor[(7, 15, 10), bool], Tensor[(7, 15, 10), bool]) */;
  %116 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 2), float64] */;
  %117 = reshape(%116, newshape=[1, 16, 1]) /* ty=Tensor[(1, 16, 1), float64] */;
  %118 = @func_107(%117) /* ty=(Tensor[(1, 16, 1), float64],) */;
  %119 = %109.0;
  %120 = %115.0;
  %121 = %118.0;
  (%101, %110, %119, %var_485, %120, %121, meta[relay.Constant][2] /* ty=Tensor[(8, 2), float64] */)
}

def @func_1705() -> (Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) {
  %122 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %123 = cast(meta[relay.Constant][3] /* ty=Tensor[(9450), float64] */, dtype="float64") /* ty=Tensor[(9450), float64] */;
  %124 = reshape(%123, newshape=[9450]) /* ty=Tensor[(9450), float64] */;
  %125 = @func_634(%124) /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 1), float32], Tensor[(1050, 1), float64], Tensor[(9450), float64], Tensor[(1, 16, 1), float64], Tensor[(10500), float64], Tensor[(1050, 6), bool]) */;
  %126 = cast(meta[relay.Constant][4] /* ty=Tensor[(9450), float64] */, dtype="float64") /* ty=Tensor[(9450), float64] */;
  %127 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(9450), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %128 = cast(meta[relay.Constant][3] /* ty=Tensor[(9450), float64] */, dtype="float64") /* ty=Tensor[(9450), float64] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?), float64] */;
  %130 = %122.1;
  %131 = %125.3;
  %132 = subtract(%128, %129) /* ty=Tensor[(9450), float64] */;
  (%130, %131, %132)
}

def @func_3617() -> (Tensor[(1050, 7), bool],) {
  %133 = @func_2968() /* ty=Tensor[(1050, 7), bool] */;
  (%133,)
}

def @func_4884() -> (Tensor[(1050, 1), float64],) {
  %134 = @func_733() /* ty=(Tensor[(1050, 1), float64],) */;
  %135 = %134.0;
  (%135,)
}

def @func_1213() -> (Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) {
  %136 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
  %137 = %136.0;
  %138 = cast(%137, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %139 = sqrt(%138) /* ty=Tensor[(1050, 7), float64] */;
  %140 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
  %141 = %140.0;
  %142 = cast(%141, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %143 = shape_of(%139, dtype="int32") /* ty=Tensor[(2), int32] */;
  %144 = cast(%139, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %146 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
  %147 = less_equal(%144, %145) /* ty=Tensor[(1050, 7), bool] */;
  (%146, %147)
}

def @func_1763(%var_1749: Tensor[(1050, 7), float64]) -> Tensor[(1050, 7), uint32] {
  %148 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %149 = %148.1;
  %150 = cast(%var_1749, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(2), int32] */;
  %152 = cast(%149, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %154 = minimum(%152, %153) /* ty=Tensor[(1050, 7), float64] */;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(1050, 7), float32] */;
  %156 = acos(%155) /* ty=Tensor[(1050, 7), float32] */;
  %157 = cast(%149, dtype="uint32") /* ty=Tensor[(1050, 7), uint32] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(2), int32] */;
  %159 = cast(%156, dtype="uint32") /* ty=Tensor[(1050, 7), uint32] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  bitwise_and(%159, %160) /* ty=Tensor[(1050, 7), uint32] */
}

def @func_3103(%var_3086: Tensor[(9, 2, 11), float32]) -> (Tensor[(9, 2, 11), float32],) {
  %161 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 2, 11), float32] */, dtype="float32") /* ty=Tensor[(9, 2, 11), float32] */;
  %162 = shape_of(%var_3086, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%var_3086, dtype="float32") /* ty=Tensor[(9, 2, 11), float32] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %165 = power(%163, %164) /* ty=Tensor[(9, 2, 11), float32] */;
  (%165,)
}

def @func_2955() -> (Tensor[(1050, 1), float64],) {
  %166 = @func_1213() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
  %167 = %166.0;
  (%167,)
}

def @func_2692(%var_2674: float32, %var_2675: Tensor[(1, 3, 11), float32]) -> (Tensor[(1, 3, 11), float64], Tensor[(1, 3, 11), float64]) {
  %168 = cast(%var_2674, dtype="float32") /* ty=float32 */;
  %169 = cast(%var_2675, dtype="float32") /* ty=Tensor[(1, 3, 11), float32] */;
  %170 = mod(%168, %169) /* ty=Tensor[(1, 3, 11), float32] */;
  %171 = cast(%170, dtype="float64") /* ty=Tensor[(1, 3, 11), float64] */;
  %172 = cast(%var_2675, dtype="float64") /* ty=Tensor[(1, 3, 11), float64] */;
  %173 = cast(%var_2674, dtype="float64") /* ty=float64 */;
  %174 = asinh(%171) /* ty=Tensor[(1, 3, 11), float64] */;
  %175 = power(%172, %173) /* ty=Tensor[(1, 3, 11), float64] */;
  (%174, %175)
}

def @func_793() -> Tensor[(1050, 1), float64] {
  @func_302() /* ty=Tensor[(1050, 1), float64] */
}

def @func_1965(%var_1871: Tensor[(1050, 7), uint8], %var_1911: Tensor[(120), float64], %var_1912: Tensor[(10500), float64]) -> (Tensor[(1050, 7), int16], Tensor[(1050, 1), float64], Tensor[(120), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) {
  %176 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %177 = %176.1;
  %178 = cast(meta[relay.Constant][6] /* ty=Tensor[(1050, 7), float64] */, dtype="uint8") /* ty=Tensor[(1050, 7), uint8] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(2), int32] */;
  %180 = cast(%177, dtype="uint8") /* ty=Tensor[(1050, 7), uint8] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %182 = multiply(%180, %181) /* ty=Tensor[(1050, 7), uint8] */;
  %183 = cast(%182, dtype="int16") /* ty=Tensor[(1050, 7), int16] */;
  %184 = shape_of(%var_1871, dtype="int32") /* ty=Tensor[(2), int32] */;
  %185 = cast(%var_1871, dtype="int16") /* ty=Tensor[(1050, 7), int16] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %187 = cast(%var_1911, dtype="float64") /* ty=Tensor[(120), float64] */;
  %188 = cast(%var_1912, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %189 = reshape(%187, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), float64] */;
  %190 = reshape(%188, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %191 = @func_1418(%189, %190) /* ty=(Tensor[(12, 5, 2), float64], Tensor[(8, 2), float64], Tensor[(10500), float64], Tensor[(1050, 1), float64]) */;
  %192 = cast(%var_1871, dtype="int32") /* ty=Tensor[(1050, 7), int32] */;
  %193 = shape_of(%182, dtype="int32") /* ty=Tensor[(2), int32] */;
  %194 = cast(%182, dtype="int32") /* ty=Tensor[(1050, 7), int32] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %196 = left_shift(%194, %195) /* ty=Tensor[(1050, 7), int32] */;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %198 = asinh(%197) /* ty=Tensor[(1050, 7), float64] */;
  %199 = cast(meta[relay.Constant][6] /* ty=Tensor[(1050, 7), float64] */, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(2), int32] */;
  %201 = cast(%198, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %203 = less(%201, %202) /* ty=Tensor[(1050, 7), bool] */;
  %204 = cast(%203, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %205 = shape_of(%198, dtype="int32") /* ty=Tensor[(2), int32] */;
  %206 = cast(%198, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %208 = logical_or(%206, %207) /* ty=Tensor[(1050, 7), bool] */;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(1050, 7), float32] */;
  %210 = cast(%182, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %211 = shape_of(%198, dtype="int32") /* ty=Tensor[(2), int32] */;
  %212 = cast(%198, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %214 = @func_1784() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) */;
  %215 = @func_1784() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) */;
  %216 = bitwise_xor(%185, %186) /* ty=Tensor[(1050, 7), int16] */;
  %217 = %191.3;
  %218 = asin(%209) /* ty=Tensor[(1050, 7), float32] */;
  %219 = floor_mod(%212, %213) /* ty=Tensor[(1050, 7), float64] */;
  %220 = %214.1;
  %221 = %215.2;
  (%216, %217, %var_1911, %var_1912, %218, %219, %220, %221)
}

def @func_2296() -> Tensor[(10500), float64] {
  %222 = @func_1024() /* ty=(Tensor[(1050, 1), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32]) */;
  %222.1
}

def @func_395(%var_315: Tensor[(1050, 9), float64]) -> (Tensor[(1050, 6), int32], Tensor[(1050, 9), uint16], Tensor[(1050, 1), float64], Tensor[(1050, 6), float32], Tensor[(1050, 1), float64], Tensor[(1050, 6), bool]) {
  %223 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
  %224 = cast(%223, dtype="int32") /* ty=Tensor[(1050, 1), int32] */;
  %225 = cast(meta[relay.Constant][7] /* ty=Tensor[(1050, 6), float64] */, dtype="int32") /* ty=Tensor[(1050, 6), int32] */;
  %226 = cast(%223, dtype="uint16") /* ty=Tensor[(1050, 1), uint16] */;
  %227 = cast(%var_315, dtype="uint16") /* ty=Tensor[(1050, 9), uint16] */;
  %228 = cast(meta[relay.Constant][7] /* ty=Tensor[(1050, 6), float64] */, dtype="float32") /* ty=Tensor[(1050, 6), float32] */;
  %229 = cos(%228) /* ty=Tensor[(1050, 6), float32] */;
  %230 = cast(meta[relay.Constant][7] /* ty=Tensor[(1050, 6), float64] */, dtype="float32") /* ty=Tensor[(1050, 6), float32] */;
  %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(2), int32] */;
  %232 = cast(%229, dtype="float32") /* ty=Tensor[(1050, 6), float32] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %234 = cast(meta[relay.Constant][7] /* ty=Tensor[(1050, 6), float64] */, dtype="uint16") /* ty=Tensor[(1050, 6), uint16] */;
  %235 = shape_of(%229, dtype="int32") /* ty=Tensor[(2), int32] */;
  %236 = cast(%229, dtype="uint16") /* ty=Tensor[(1050, 6), uint16] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %238 = add(%236, %237) /* ty=Tensor[(1050, 6), uint16] */;
  %239 = cast(meta[relay.Constant][8] /* ty=Tensor[(1050, 6), uint16] */, dtype="bool") /* ty=Tensor[(1050, 6), bool] */;
  %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(2), int32] */;
  %241 = cast(%238, dtype="bool") /* ty=Tensor[(1050, 6), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %243 = logical_xor(%224, %225) /* ty=Tensor[(1050, 6), int32] */;
  %244 = bitwise_and(%226, %227) /* ty=Tensor[(1050, 9), uint16] */;
  %245 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
  %246 = floor_mod(%232, %233) /* ty=Tensor[(1050, 6), float32] */;
  %247 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
  %248 = less(%241, %242) /* ty=Tensor[(1050, 6), bool] */;
  (%243, %244, %245, %246, %247, %248)
}

def @func_981() -> (Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) {
  %249 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
  %250 = @func_752() /* ty=(Tensor[(1050, 7), float64],) */;
  %251 = %249.0;
  %252 = %250.0;
  (%251, %252)
}

def @func_3269() -> (Tensor[(1050, 7), bool], Tensor[(1050, 7), bool], Tensor[(1050, 7), float64]) {
  %253 = @func_2880() /* ty=(Tensor[(1050, 7), bool],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %256 = reshape(%255, newshape=[1050, 7]) /* ty=Tensor[(1050, 7), float64] */;
  %257 = @func_915(%256) /* ty=(Tensor[(1050, 7), bool],) */;
  %258 = @func_1705() /* ty=(Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) */;
  %259 = %257.0;
  %260 = %258.0;
  (%254, %259, %260)
}

def @func_302() -> Tensor[(1050, 1), float64] {
  %261 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %261.2
}

def @func_3163(%var_3153: Tensor[(240), float32]) -> (Tensor[(10500), float64], Tensor[(10, 6, 4), uint8], Tensor[(240), float32]) {
  %262 = cast(%var_3153, dtype="float32") /* ty=Tensor[(240), float32] */;
  %263 = cast(%var_3153, dtype="float32") /* ty=Tensor[(240), float32] */;
  %264 = reshape(%262, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float32] */;
  %265 = reshape(%263, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float32] */;
  %266 = @func_2422(%264, %265) /* ty=(Tensor[(10, 6, 4), uint8],) */;
  %267 = @func_2296() /* ty=Tensor[(10500), float64] */;
  %268 = %266.0;
  (%267, %268, %var_3153)
}

def @func_3376() -> (Tensor[(1050, 7), bool], Tensor[(1050, 7), bool]) {
  %269 = @func_893() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
  %270 = @func_3269() /* ty=(Tensor[(1050, 7), bool], Tensor[(1050, 7), bool], Tensor[(1050, 7), float64]) */;
  %271 = %270.1;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %273 = sin(%272) /* ty=Tensor[(1050, 7), float64] */;
  %274 = cast(%271, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(2), int32] */;
  %276 = cast(%273, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %278 = %269.1;
  %279 = not_equal(%276, %277) /* ty=Tensor[(1050, 7), bool] */;
  (%278, %279)
}

def @func_4140() -> (Tensor[(1050, 1), float64], Tensor[(10500), float64]) {
  %280 = @func_1213() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
  %281 = @func_2655() /* ty=(Tensor[(10500), float64], Tensor[(1050, 4), bool], Tensor[(4200), float64]) */;
  %282 = %280.0;
  %283 = %281.0;
  (%282, %283)
}

def @func_915(%var_910: Tensor[(1050, 7), float64]) -> (Tensor[(1050, 7), bool],) {
  %284 = @func_752() /* ty=(Tensor[(1050, 7), float64],) */;
  %285 = %284.0;
  %286 = cast(%var_910, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(2), int32] */;
  %288 = cast(%285, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %290 = logical_and(%288, %289) /* ty=Tensor[(1050, 7), bool] */;
  (%290,)
}

def @func_1784() -> (Tensor[(1050, 1), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) {
  %291 = @func_733() /* ty=(Tensor[(1050, 1), float64],) */;
  %292 = %291.0;
  %293 = @func_1178() /* ty=Tensor[(1050, 7), float32] */;
  %294 = @func_1178() /* ty=Tensor[(1050, 7), float32] */;
  (%292, %293, %294)
}

def @func_893() -> (Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) {
  %295 = @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */;
  %296 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
  %297 = %296.0;
  %298 = cast(meta[relay.Constant][9] /* ty=Tensor[(1050, 7), float64] */, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(2), int32] */;
  %300 = cast(%297, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %302 = %295.0;
  %303 = greater(%300, %301) /* ty=Tensor[(1050, 7), bool] */;
  (%302, %303)
}

def @func_5068() -> (Tensor[(9450), float64],) {
  %304 = @func_1705() /* ty=(Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) */;
  %305 = %304.1;
  (%305,)
}

def @func_288() -> (Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) {
  %306 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 7, 2), uint64] */, dtype="uint64") /* ty=Tensor[(15, 7, 2), uint64] */;
  %307 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(15, 7, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 7, 2), uint64] */, dtype="uint64") /* ty=Tensor[(15, 7, 2), uint64] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %310 = cast(meta[relay.Constant][12] /* ty=Tensor[(1050, 1), float64] */, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %311 = cast(meta[relay.Constant][12] /* ty=Tensor[(1050, 1), float64] */, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %312 = reshape(%310, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %313 = reshape(%311, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %314 = @func_71(%312, %313) /* ty=(Tensor[(7, 15, 10), bool], Tensor[(7, 15, 10), bool]) */;
  %315 = left_shift(%308, %309) /* ty=Tensor[(15, 7, 2), uint64] */;
  %316 = %314.1;
  (%315, %316, meta[relay.Constant][12] /* ty=Tensor[(1050, 1), float64] */)
}

def @func_1367(%var_1359: Tensor[(1050, 4), float64]) -> Tensor[(1050, 4), bool] {
  %317 = @func_893() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
  %318 = %317.0;
  %319 = cast(%318, dtype="bool") /* ty=Tensor[(1050, 1), bool] */;
  %320 = cast(%var_1359, dtype="bool") /* ty=Tensor[(1050, 4), bool] */;
  logical_and(%319, %320) /* ty=Tensor[(1050, 4), bool] */
}

def @func_1024() -> (Tensor[(1050, 1), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32]) {
  %321 = cast(meta[relay.Constant][13] /* ty=Tensor[(10500), float64] */, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %322 = reshape(%321, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %323 = @func_505(%322) /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), bool], Tensor[(15, 7, 2), uint64], Tensor[(10500), float64], Tensor[(7, 15, 10), bool], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64]) */;
  %324 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %325 = %324.1;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(1050, 7), float32] */;
  %327 = %323.0;
  %328 = cos(%326) /* ty=Tensor[(1050, 7), float32] */;
  (%327, meta[relay.Constant][13] /* ty=Tensor[(10500), float64] */, %328)
}

def @func_2422(%var_2405: Tensor[(10, 6, 4), float32], %var_2408: Tensor[(10, 6, 4), float32]) -> (Tensor[(10, 6, 4), uint8],) {
  %329 = cast(%var_2405, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %330 = exp(%329) /* ty=Tensor[(10, 6, 4), float32] */;
  %331 = cast(%var_2408, dtype="uint8") /* ty=Tensor[(10, 6, 4), uint8] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="uint8") /* ty=Tensor[(10, 6, 4), uint8] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %335 = maximum(%333, %334) /* ty=Tensor[(10, 6, 4), uint8] */;
  (%335,)
}

def @func_3546() -> (Tensor[(9450), float64], Tensor[(1050, 7), float32]) {
  %336 = @func_1705() /* ty=(Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) */;
  %337 = @func_1024() /* ty=(Tensor[(1050, 1), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32]) */;
  %338 = %336.2;
  %339 = %337.2;
  (%338, %339)
}

def @func_2454() -> (Tensor[(7, 15, 10), float32],) {
  %340 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %341 = %340.2;
  %342 = cast(%341, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %343 = cast(%341, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %344 = reshape(%342, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %345 = reshape(%343, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
  %346 = @func_71(%344, %345) /* ty=(Tensor[(7, 15, 10), bool], Tensor[(7, 15, 10), bool]) */;
  %347 = %346.0;
  %348 = cast(%341, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="float32") /* ty=Tensor[(7, 15, 10), float32] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %352 = power(%350, %351) /* ty=Tensor[(7, 15, 10), float32] */;
  (%352,)
}

def @func_4575() -> (Tensor[(1050, 7), bool],) {
  %353 = @func_2968() /* ty=Tensor[(1050, 7), bool] */;
  (%353,)
}

def @func_573() -> (Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) {
  %354 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %355 = %354.2;
  %356 = cast(%355, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %357 = cast(meta[relay.Constant][14] /* ty=Tensor[(1050, 7), float64] */, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %358 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %359 = power(%356, %357) /* ty=Tensor[(1050, 7), float64] */;
  %360 = %358.2;
  (%359, %360)
}

def @func_4342(%var_4323: Tensor[(4, 3, 12), float32]) -> (Tensor[(4, 3, 12), float32], Tensor[(4, 3, 12), float32]) {
  %361 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 3, 12), float32] */, dtype="float32") /* ty=Tensor[(4, 3, 12), float32] */;
  %362 = shape_of(%var_4323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%var_4323, dtype="float32") /* ty=Tensor[(4, 3, 12), float32] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %365 = cast(%var_4323, dtype="float64") /* ty=Tensor[(4, 3, 12), float64] */;
  %366 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(4, 3, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 3, 12), float32] */, dtype="float64") /* ty=Tensor[(4, 3, 12), float64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %369 = floor_divide(%367, %368) /* ty=Tensor[(4, 3, 12), float64] */;
  %370 = cast(%369, dtype="float32") /* ty=Tensor[(4, 3, 12), float32] */;
  %371 = power(%363, %364) /* ty=Tensor[(4, 3, 12), float32] */;
  %372 = atan(%370) /* ty=Tensor[(4, 3, 12), float32] */;
  (%371, %372)
}

def @func_752() -> (Tensor[(1050, 7), float64],) {
  %373 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
  %374 = %373.0;
  (%374,)
}

def @func_2655() -> (Tensor[(10500), float64], Tensor[(1050, 4), bool], Tensor[(4200), float64]) {
  %375 = cast(meta[relay.Constant][16] /* ty=Tensor[(4200), float64] */, dtype="float64") /* ty=Tensor[(4200), float64] */;
  %376 = reshape(%375, newshape=[1050, 4]) /* ty=Tensor[(1050, 4), float64] */;
  %377 = @func_2296() /* ty=Tensor[(10500), float64] */;
  %378 = @func_1367(%376) /* ty=Tensor[(1050, 4), bool] */;
  (%377, %378, meta[relay.Constant][16] /* ty=Tensor[(4200), float64] */)
}

def @func_1441() -> Tensor[(1050, 1), float64] {
  %379 = @func_733() /* ty=(Tensor[(1050, 1), float64],) */;
  %379.0
}

def @func_1178() -> Tensor[(1050, 7), float32] {
  %380 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
  %381 = %380.0;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(1050, 7), float32] */;
  exp(%382) /* ty=Tensor[(1050, 7), float32] */
}

def @func_3423(%var_3395: Tensor[(12, 16, 6), float64]) -> (Tensor[(12, 16, 6), int16], Tensor[(12, 16, 6), float64]) {
  %383 = @func_1272() /* ty=(Tensor[(10500), float64], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 7), bool]) */;
  %384 = %383.1;
  %385 = cast(%384, dtype="int16") /* ty=Tensor[(1, 16, 1), int16] */;
  %386 = cast(%var_3395, dtype="int16") /* ty=Tensor[(12, 16, 6), int16] */;
  %387 = cast(%var_3395, dtype="float64") /* ty=Tensor[(12, 16, 6), float64] */;
  %388 = asinh(%387) /* ty=Tensor[(12, 16, 6), float64] */;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(12, 16, 6), float64] */;
  %390 = subtract(%385, %386) /* ty=Tensor[(12, 16, 6), int16] */;
  %391 = rsqrt(%389) /* ty=Tensor[(12, 16, 6), float64] */;
  (%390, %391)
}

def @func_3851(%var_3812: Tensor[(3675, 2), uint8], %var_3813: Tensor[(6, 20), float64]) -> (Tensor[(15, 7, 2), float32], Tensor[(1050, 7), float32], Tensor[(3675, 2), uint8], Tensor[(6, 20), float64], Tensor[(10500), float64], Tensor[(13650), float64], Tensor[(3500, 3), float64]) {
  %392 = @func_2711() /* ty=(Tensor[(15, 7, 2), float32],) */;
  %393 = cast(%var_3812, dtype="uint8") /* ty=Tensor[(3675, 2), uint8] */;
  %394 = cast(%var_3813, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %395 = cast(meta[relay.Constant][17] /* ty=Tensor[(10500), float64] */, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %396 = reshape(%393, newshape=[1050, 7]) /* ty=Tensor[(1050, 7), uint8] */;
  %397 = reshape(%394, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %398 = reshape(%395, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %399 = @func_1965(%396, %397, %398) /* ty=(Tensor[(1050, 7), int16], Tensor[(1050, 1), float64], Tensor[(120), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) */;
  %400 = cast(meta[relay.Constant][18] /* ty=Tensor[(13650), float64] */, dtype="float64") /* ty=Tensor[(13650), float64] */;
  %401 = reshape(%400, newshape=[1050, 13]) /* ty=Tensor[(1050, 13), float64] */;
  %402 = @func_2625(%401) /* ty=(Tensor[(1050, 13), bool], Tensor[(15, 7, 2), uint64], Tensor[(3500, 3), float64]) */;
  %403 = %402.2;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(3500, 3), float64] */;
  %405 = %392.0;
  %406 = %399.6;
  %407 = acosh(%404) /* ty=Tensor[(3500, 3), float64] */;
  (%405, %406, %var_3812, %var_3813, meta[relay.Constant][17] /* ty=Tensor[(10500), float64] */, meta[relay.Constant][18] /* ty=Tensor[(13650), float64] */, %407)
}

def @func_4418() -> (Tensor[(15, 7, 2), float32],) {
  %408 = @func_2711() /* ty=(Tensor[(15, 7, 2), float32],) */;
  %409 = %408.0;
  (%409,)
}

def @func_2880() -> (Tensor[(1050, 7), bool],) {
  %410 = @func_1272() /* ty=(Tensor[(10500), float64], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 7), bool]) */;
  %411 = %410.3;
  (%411,)
}

def @func_4607(%var_4600: Tensor[(240), float32]) -> (Tensor[(1050, 1), float64], Tensor[(10, 6, 4), uint8], Tensor[(240), float32], Tensor[(9450), float64]) {
  %412 = @func_2272() /* ty=(Tensor[(1050, 1), float64],) */;
  %413 = cast(%var_4600, dtype="float32") /* ty=Tensor[(240), float32] */;
  %414 = cast(%var_4600, dtype="float32") /* ty=Tensor[(240), float32] */;
  %415 = reshape(%413, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float32] */;
  %416 = reshape(%414, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float32] */;
  %417 = @func_2422(%415, %416) /* ty=(Tensor[(10, 6, 4), uint8],) */;
  %418 = %412.0;
  %419 = %417.0;
  %420 = @func_4494() /* ty=Tensor[(9450), float64] */;
  (%418, %419, %var_4600, %420)
}

def @func_2625(%var_2613: Tensor[(1050, 13), float64]) -> (Tensor[(1050, 13), bool], Tensor[(15, 7, 2), uint64], Tensor[(3500, 3), float64]) {
  %421 = @func_893() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
  %422 = %421.0;
  %423 = cast(%422, dtype="bool") /* ty=Tensor[(1050, 1), bool] */;
  %424 = cast(%var_2613, dtype="bool") /* ty=Tensor[(1050, 13), bool] */;
  %425 = cast(meta[relay.Constant][19] /* ty=Tensor[(3500, 3), float64] */, dtype="float64") /* ty=Tensor[(3500, 3), float64] */;
  %426 = reshape(%425, newshape=[1050, 10]) /* ty=Tensor[(1050, 10), float64] */;
  %427 = @func_462(%426) /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(1050, 10), uint64], Tensor[(1050, 10), uint8], Tensor[(1050, 10), int16]) */;
  %428 = greater(%423, %424) /* ty=Tensor[(1050, 13), bool] */;
  %429 = %427.0;
  (%428, %429, meta[relay.Constant][19] /* ty=Tensor[(3500, 3), float64] */)
}

def @func_4725() -> (Tensor[(7, 15, 10), float32], Tensor[(1050, 1), float64]) {
  %430 = @func_2454() /* ty=(Tensor[(7, 15, 10), float32],) */;
  %431 = @func_4239() /* ty=(Tensor[(16, 3, 8), bool], Tensor[(1050, 1), float64]) */;
  %432 = %430.0;
  %433 = %431.1;
  (%432, %433)
}

def @func_2480(%var_2467: Tensor[(8, 16, 7), float32]) -> (Tensor[(8, 16, 7), float32], Tensor[(1050, 8), int16], Tensor[(14, 600), float64]) {
  %434 = cast(%var_2467, dtype="float32") /* ty=Tensor[(8, 16, 7), float32] */;
  %435 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 600), float64] */, dtype="float64") /* ty=Tensor[(14, 600), float64] */;
  %436 = reshape(%435, newshape=[1050, 8]) /* ty=Tensor[(1050, 8), float64] */;
  %437 = exp(%434) /* ty=Tensor[(8, 16, 7), float32] */;
  %438 = @func_1592(%436) /* ty=Tensor[(1050, 8), int16] */;
  (%437, %438, meta[relay.Constant][20] /* ty=Tensor[(14, 600), float64] */)
}

def @func_2711() -> (Tensor[(15, 7, 2), float32],) {
  %439 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %440 = %439.0;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
  %442 = atanh(%441) /* ty=Tensor[(15, 7, 2), float32] */;
  (%442,)
}

def @func_2827(%var_2820: Tensor[(7350), bool]) -> (Tensor[(10500), float64], Tensor[(7350), float64]) {
  %443 = cast(meta[relay.Constant][21] /* ty=Tensor[(7350), float64] */, dtype="float64") /* ty=Tensor[(7350), float64] */;
  %444 = reshape(%443, newshape=[1050, 7]) /* ty=Tensor[(1050, 7), float64] */;
  %445 = @func_2598(%444) /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %446 = %445.1;
  %447 = cast(%446, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %448 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(7350), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %449 = cast(meta[relay.Constant][21] /* ty=Tensor[(7350), float64] */, dtype="bool") /* ty=Tensor[(7350), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?), bool] */;
  %451 = equal(%449, %450) /* ty=Tensor[(7350), bool] */;
  %452 = cast(%var_2820, dtype="float64") /* ty=Tensor[(7350), float64] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(1), int32] */;
  %454 = cast(%451, dtype="float64") /* ty=Tensor[(7350), float64] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?), float64] */;
  %456 = @func_2296() /* ty=Tensor[(10500), float64] */;
  %457 = floor_divide(%454, %455) /* ty=Tensor[(7350), float64] */;
  (%456, %457)
}

def @func_4399(%var_4383: Tensor[(1050, 7), bool]) -> (Tensor[(1050, 7), int32],) {
  %458 = @func_3617() /* ty=(Tensor[(1050, 7), bool],) */;
  %459 = %458.0;
  %460 = cast(%var_4383, dtype="int32") /* ty=Tensor[(1050, 7), int32] */;
  %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(2), int32] */;
  %462 = cast(%459, dtype="int32") /* ty=Tensor[(1050, 7), int32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %464 = maximum(%462, %463) /* ty=Tensor[(1050, 7), int32] */;
  (%464,)
}

def @func_1272() -> (Tensor[(10500), float64], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 7), bool]) {
  %465 = @func_1024() /* ty=(Tensor[(1050, 1), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32]) */;
  %466 = cast(meta[relay.Constant][22] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %467 = reshape(%466, newshape=[1, 16, 1]) /* ty=Tensor[(1, 16, 1), float64] */;
  %468 = @func_107(%467) /* ty=(Tensor[(1, 16, 1), float64],) */;
  %469 = @func_1178() /* ty=Tensor[(1050, 7), float32] */;
  %470 = cast(%469, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %471 = reshape(%470, newshape=[1050, 7]) /* ty=Tensor[(1050, 7), float64] */;
  %472 = @func_915(%471) /* ty=(Tensor[(1050, 7), bool],) */;
  %473 = %472.0;
  %474 = cast(%473, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %475 = shape_of(%469, dtype="int32") /* ty=Tensor[(2), int32] */;
  %476 = cast(%469, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %478 = %465.1;
  %479 = %468.0;
  %480 = greater_equal(%476, %477) /* ty=Tensor[(1050, 7), bool] */;
  (%478, %479, meta[relay.Constant][22] /* ty=Tensor[(16), float64] */, %480)
}

def @func_5011() -> (Tensor[(1, 16, 1), float64],) {
  %481 = @func_1272() /* ty=(Tensor[(10500), float64], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 7), bool]) */;
  %482 = %481.1;
  (%482,)
}

def @func_2930(%var_2925: Tensor[(896), float32]) -> (Tensor[(1050, 1), float64], Tensor[(35, 6), uint64], Tensor[(10500), float64], Tensor[(1050, 10), uint8], Tensor[(15, 7, 2), float32], Tensor[(14, 600), float64], Tensor[(896), float32]) {
  %483 = @func_733() /* ty=(Tensor[(1050, 1), float64],) */;
  %484 = cast(meta[relay.Constant][24] /* ty=Tensor[(10500), float64] */, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %485 = reshape(%484, newshape=[1050, 10]) /* ty=Tensor[(1050, 10), float64] */;
  %486 = @func_462(%485) /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(1050, 10), uint64], Tensor[(1050, 10), uint8], Tensor[(1050, 10), int16]) */;
  %487 = cast(meta[relay.Constant][23] /* ty=Tensor[(35, 6), uint64] */, dtype="uint64") /* ty=Tensor[(35, 6), uint64] */;
  %488 = cast(meta[relay.Constant][24] /* ty=Tensor[(10500), float64] */, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %489 = reshape(%487, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), uint64] */;
  %490 = reshape(%488, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %491 = @func_1552(%489, %490) /* ty=(Tensor[(15, 7, 2), float32], Tensor[(10500), bool], Tensor[(15, 7, 2), uint32], Tensor[(1050, 1), float64]) */;
  %492 = %491.0;
  %493 = cast(%492, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
  %494 = cast(%var_2925, dtype="float32") /* ty=Tensor[(896), float32] */;
  %495 = reshape(%494, newshape=[8, 16, 7]) /* ty=Tensor[(8, 16, 7), float32] */;
  %496 = @func_2480(%495) /* ty=(Tensor[(8, 16, 7), float32], Tensor[(1050, 8), int16], Tensor[(14, 600), float64]) */;
  %497 = %483.0;
  %498 = %486.2;
  %499 = log10(%493) /* ty=Tensor[(15, 7, 2), float32] */;
  %500 = %496.2;
  (%497, meta[relay.Constant][23] /* ty=Tensor[(35, 6), uint64] */, meta[relay.Constant][24] /* ty=Tensor[(10500), float64] */, %498, %499, %500, %var_2925)
}

def @func_3556(%var_3551: Tensor[(11, 11, 2), float64], %var_3552: Tensor[(11, 11, 2), float64]) -> (Tensor[(11, 11, 2), float64],) {
  %501 = cast(%var_3552, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %502 = shape_of(%var_3551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_3551, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %505 = floor_mod(%503, %504) /* ty=Tensor[(11, 11, 2), float64] */;
  (%505,)
}

def @func_4239() -> (Tensor[(16, 3, 8), bool], Tensor[(1050, 1), float64]) {
  %506 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 8), float64] */;
  %507 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(16, 3, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 8), float64] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %510 = maximum(%508, %509) /* ty=Tensor[(16, 3, 8), float64] */;
  %511 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 3, 8), float64] */, dtype="bool") /* ty=Tensor[(16, 3, 8), bool] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="bool") /* ty=Tensor[(16, 3, 8), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = @func_733() /* ty=(Tensor[(1050, 1), float64],) */;
  %516 = less(%513, %514) /* ty=Tensor[(16, 3, 8), bool] */;
  %517 = %515.0;
  (%516, %517)
}

def @func_2598(%var_2571: Tensor[(1050, 7), float64]) -> (Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) {
  %518 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %519 = @func_1999() /* ty=(Tensor[(1050, 7), float64], Tensor[(15, 7, 2), float64]) */;
  %520 = %519.0;
  %521 = cast(%var_2571, dtype="uint16") /* ty=Tensor[(1050, 7), uint16] */;
  %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(2), int32] */;
  %523 = cast(%520, dtype="uint16") /* ty=Tensor[(1050, 7), uint16] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %525 = add(%523, %524) /* ty=Tensor[(1050, 7), uint16] */;
  %526 = cast(%525, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %527 = %518.0;
  %528 = atanh(%526) /* ty=Tensor[(1050, 7), float64] */;
  (%527, %528)
}

def @func_4319(%var_4312: Tensor[(7350), uint8]) -> (Tensor[(1050, 4), int16], Tensor[(6, 20), float64], Tensor[(7350), uint8], Tensor[(60, 2), float64], Tensor[(10500), uint64]) {
  %529 = @func_2655() /* ty=(Tensor[(10500), float64], Tensor[(1050, 4), bool], Tensor[(4200), float64]) */;
  %530 = %529.1;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(1050, 4), float64] */;
  %532 = acos(%531) /* ty=Tensor[(1050, 4), float64] */;
  %533 = cast(%530, dtype="int16") /* ty=Tensor[(1050, 4), int16] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(2), int32] */;
  %535 = cast(%532, dtype="int16") /* ty=Tensor[(1050, 4), int16] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %537 = cast(%var_4312, dtype="uint8") /* ty=Tensor[(7350), uint8] */;
  %538 = cast(meta[relay.Constant][28] /* ty=Tensor[(60, 2), float64] */, dtype="float64") /* ty=Tensor[(60, 2), float64] */;
  %539 = reshape(%537, newshape=[3675, 2]) /* ty=Tensor[(3675, 2), uint8] */;
  %540 = reshape(%538, newshape=[6, 20]) /* ty=Tensor[(6, 20), float64] */;
  %541 = @func_3851(%539, %540) /* ty=(Tensor[(15, 7, 2), float32], Tensor[(1050, 7), float32], Tensor[(3675, 2), uint8], Tensor[(6, 20), float64], Tensor[(10500), float64], Tensor[(13650), float64], Tensor[(3500, 3), float64]) */;
  %542 = @func_3667() /* ty=(Tensor[(10500), uint64],) */;
  %543 = minimum(%535, %536) /* ty=Tensor[(1050, 4), int16] */;
  %544 = %541.3;
  %545 = %542.0;
  (%543, %544, %var_4312, meta[relay.Constant][28] /* ty=Tensor[(60, 2), float64] */, %545)
}

def @func_733() -> (Tensor[(1050, 1), float64],) {
  %546 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
  (%546,)
}

def @func_1418(%var_1404: Tensor[(12, 5, 2), float64], %var_1409: Tensor[(10500), float64]) -> (Tensor[(12, 5, 2), float64], Tensor[(8, 2), float64], Tensor[(10500), float64], Tensor[(1050, 1), float64]) {
  %547 = cast(%var_1404, dtype="float64") /* ty=Tensor[(12, 5, 2), float64] */;
  %548 = cast(%var_1409, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %549 = reshape(%548, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %550 = @func_505(%549) /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), bool], Tensor[(15, 7, 2), uint64], Tensor[(10500), float64], Tensor[(7, 15, 10), bool], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64]) */;
  %551 = log(%547) /* ty=Tensor[(12, 5, 2), float64] */;
  %552 = %550.6;
  %553 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
  (%551, %552, %var_1409, %553)
}

def @func_1153(%var_1119: Tensor[(7350), float64]) -> (Tensor[(10500), float64], Tensor[(7350), float32], Tensor[(7350), float32]) {
  %554 = @func_1024() /* ty=(Tensor[(1050, 1), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32]) */;
  %555 = cast(%var_1119, dtype="float64") /* ty=Tensor[(7350), float64] */;
  %556 = reshape(%555, newshape=[1050, 7]) /* ty=Tensor[(1050, 7), float64] */;
  %557 = @func_915(%556) /* ty=(Tensor[(1050, 7), bool],) */;
  %558 = %557.0;
  %559 = cast(%558, dtype="float32") /* ty=Tensor[(1050, 7), float32] */;
  %560 = shape_of(%var_1119, dtype="int32") /* ty=Tensor[(1), int32] */;
  %561 = cast(%var_1119, dtype="float32") /* ty=Tensor[(7350), float32] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?), float32] */;
  %563 = cast(%var_1119, dtype="float32") /* ty=Tensor[(7350), float32] */;
  %564 = %554.1;
  %565 = mod(%561, %562) /* ty=Tensor[(7350), float32] */;
  %566 = atan(%563) /* ty=Tensor[(7350), float32] */;
  (%564, %565, %566)
}

def @func_2968() -> Tensor[(1050, 7), bool] {
  %567 = @func_2880() /* ty=(Tensor[(1050, 7), bool],) */;
  %567.0
}

def @func_1592(%var_1584: Tensor[(1050, 8), float64]) -> Tensor[(1050, 8), int16] {
  %568 = @func_1213() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
  %569 = %568.0;
  %570 = cast(%569, dtype="int16") /* ty=Tensor[(1050, 1), int16] */;
  %571 = cast(%var_1584, dtype="int16") /* ty=Tensor[(1050, 8), int16] */;
  minimum(%570, %571) /* ty=Tensor[(1050, 8), int16] */
}

def @func_3219() -> (Tensor[(1050, 1), float64], Tensor[(15, 8, 16), float32]) {
  %572 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 8, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 8, 16), float64] */;
  %573 = erf(%572) /* ty=Tensor[(15, 8, 16), float64] */;
  %574 = cast(%573, dtype="float32") /* ty=Tensor[(15, 8, 16), float32] */;
  %575 = @func_1441() /* ty=Tensor[(1050, 1), float64] */;
  %576 = cos(%574) /* ty=Tensor[(15, 8, 16), float32] */;
  (%575, %576)
}

def @func_4197(%var_4190: uint64, %var_4191: Tensor[(1, 14, 10), uint64]) -> (Tensor[(1, 14, 10), bool],) {
  %577 = cast(%var_4190, dtype="bool") /* ty=bool */;
  %578 = cast(%var_4191, dtype="bool") /* ty=Tensor[(1, 14, 10), bool] */;
  %579 = greater_equal(%577, %578) /* ty=Tensor[(1, 14, 10), bool] */;
  (%579,)
}

def @func_2750(%var_2743: Tensor[(10500), float64]) -> (Tensor[(7, 15, 10), float64], Tensor[(7, 15, 10), bool], Tensor[(10500), float64]) {
  %580 = @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */;
  %581 = cast(%var_2743, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %582 = reshape(%581, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %583 = @func_505(%582) /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), bool], Tensor[(15, 7, 2), uint64], Tensor[(10500), float64], Tensor[(7, 15, 10), bool], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64]) */;
  %584 = %580.1;
  %585 = %583.1;
  (%584, %585, %var_2743)
}

def @func_462(%var_433: Tensor[(1050, 10), float64]) -> (Tensor[(15, 7, 2), uint64], Tensor[(1050, 10), uint64], Tensor[(1050, 10), uint8], Tensor[(1050, 10), int16]) {
  %586 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %587 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
  %588 = cast(%587, dtype="uint64") /* ty=Tensor[(1050, 1), uint64] */;
  %589 = cast(%var_433, dtype="uint64") /* ty=Tensor[(1050, 10), uint64] */;
  %590 = cast(%587, dtype="uint16") /* ty=Tensor[(1050, 1), uint16] */;
  %591 = cast(%var_433, dtype="uint16") /* ty=Tensor[(1050, 10), uint16] */;
  %592 = left_shift(%590, %591) /* ty=Tensor[(1050, 10), uint16] */;
  %593 = cast(%592, dtype="uint8") /* ty=Tensor[(1050, 10), uint8] */;
  %594 = cast(%587, dtype="uint8") /* ty=Tensor[(1050, 1), uint8] */;
  %595 = cast(%587, dtype="int16") /* ty=Tensor[(1050, 1), int16] */;
  %596 = cast(%var_433, dtype="int16") /* ty=Tensor[(1050, 10), int16] */;
  %597 = %586.0;
  %598 = logical_xor(%588, %589) /* ty=Tensor[(1050, 10), uint64] */;
  %599 = right_shift(%593, %594) /* ty=Tensor[(1050, 10), uint8] */;
  %600 = add(%595, %596) /* ty=Tensor[(1050, 10), int16] */;
  (%597, %598, %599, %600)
}

def @func_1838(%var_1825: Tensor[(10500), float64]) -> (Tensor[(15, 7, 2), uint64], Tensor[(15, 7, 2), float32], Tensor[(10500), float64], Tensor[(9450), float64]) {
  %601 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %602 = %601.0;
  %603 = cast(%602, dtype="uint64") /* ty=Tensor[(15, 7, 2), uint64] */;
  %604 = cast(%var_1825, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %605 = reshape(%603, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), uint64] */;
  %606 = reshape(%604, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %607 = @func_1552(%605, %606) /* ty=(Tensor[(15, 7, 2), float32], Tensor[(10500), bool], Tensor[(15, 7, 2), uint32], Tensor[(1050, 1), float64]) */;
  %608 = @func_1705() /* ty=(Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) */;
  %609 = %607.0;
  %610 = %608.2;
  (%602, %609, %var_1825, %610)
}

def @func_2197(%var_2102: Tensor[(1050, 8), float64], %var_2161: Tensor[(1050, 3), float32]) -> (Tensor[(15, 7, 2), float64], Tensor[(1050, 8), bool], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 3), bool], Tensor[(1050, 1), float64], Tensor[(1050, 10), int16], Tensor[(10500), float64], Tensor[(1050, ?), float64]) {
  %611 = @func_1999() /* ty=(Tensor[(1050, 7), float64], Tensor[(15, 7, 2), float64]) */;
  %612 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %613 = %612.2;
  %614 = cast(%613, dtype="uint8") /* ty=Tensor[(1050, 1), uint8] */;
  %615 = cast(%var_2102, dtype="uint8") /* ty=Tensor[(1050, 8), uint8] */;
  %616 = right_shift(%614, %615) /* ty=Tensor[(1050, 8), uint8] */;
  %617 = cast(%616, dtype="bool") /* ty=Tensor[(1050, 8), bool] */;
  %618 = shape_of(%var_2102, dtype="int32") /* ty=Tensor[(2), int32] */;
  %619 = cast(%var_2102, dtype="bool") /* ty=Tensor[(1050, 8), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %621 = cast(meta[relay.Constant][30] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %622 = reshape(%621, newshape=[1, 16, 1]) /* ty=Tensor[(1, 16, 1), float64] */;
  %623 = @func_107(%622) /* ty=(Tensor[(1, 16, 1), float64],) */;
  %624 = @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */;
  %625 = %624.0;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %627 = sigmoid(%626) /* ty=Tensor[(1050, 1), float64] */;
  %628 = cast(meta[relay.Constant][31] /* ty=Tensor[(1050, 1), float64] */, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(2), int32] */;
  %630 = cast(%627, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %632 = floor_divide(%630, %631) /* ty=Tensor[(1050, ?), float32] */;
  %633 = cast(%632, dtype="bool") /* ty=Tensor[(1050, ?), bool] */;
  %634 = cast(%var_2161, dtype="bool") /* ty=Tensor[(1050, 3), bool] */;
  %635 = @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */;
  %636 = cast(meta[relay.Constant][32] /* ty=Tensor[(10500), float64] */, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %637 = reshape(%636, newshape=[1050, 10]) /* ty=Tensor[(1050, 10), float64] */;
  %638 = @func_462(%637) /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(1050, 10), uint64], Tensor[(1050, 10), uint8], Tensor[(1050, 10), int16]) */;
  %639 = cast(%632, dtype="float32") /* ty=Tensor[(1050, ?), float32] */;
  %640 = acosh(%639) /* ty=Tensor[(1050, ?), float32] */;
  %641 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %642 = %641.2;
  %643 = cast(%642, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %644 = shape_of(%640, dtype="int32") /* ty=Tensor[(2), int32] */;
  %645 = cast(%640, dtype="float64") /* ty=Tensor[(1050, ?), float64] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %647 = %611.1;
  %648 = less_equal(%619, %620) /* ty=Tensor[(1050, 8), bool] */;
  %649 = %623.0;
  %650 = less_equal(%633, %634) /* ty=Tensor[(1050, 3), bool] */;
  %651 = %635.0;
  %652 = %638.3;
  %653 = mod(%645, %646) /* ty=Tensor[(1050, ?), float64] */;
  (%647, %648, %649, meta[relay.Constant][30] /* ty=Tensor[(16), float64] */, %650, %651, %652, meta[relay.Constant][32] /* ty=Tensor[(10500), float64] */, %653)
}

def @func_4494() -> Tensor[(9450), float64] {
  %654 = @func_1705() /* ty=(Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) */;
  %654.2
}

def @func_2333() -> Tensor[(1050, 4), bool] {
  %655 = @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="bool") /* ty=Tensor[(1050, 1), bool] */;
  %658 = cast(meta[relay.Constant][33] /* ty=Tensor[(1050, 4), float64] */, dtype="bool") /* ty=Tensor[(1050, 4), bool] */;
  greater(%657, %658) /* ty=Tensor[(1050, 4), bool] */
}

def @func_1552(%var_1516: Tensor[(15, 7, 2), uint64], %var_1523: Tensor[(10500), float64]) -> (Tensor[(15, 7, 2), float32], Tensor[(10500), bool], Tensor[(15, 7, 2), uint32], Tensor[(1050, 1), float64]) {
  %659 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %660 = %659.0;
  %661 = cast(%var_1516, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %665 = @func_1272() /* ty=(Tensor[(10500), float64], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 7), bool]) */;
  %666 = %665.0;
  %667 = cast(%var_1523, dtype="bool") /* ty=Tensor[(10500), bool] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(1), int32] */;
  %669 = cast(%666, dtype="bool") /* ty=Tensor[(10500), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?), bool] */;
  %671 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %672 = %671.0;
  %673 = cast(%660, dtype="uint32") /* ty=Tensor[(15, 7, 2), uint32] */;
  %674 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%672, dtype="uint32") /* ty=Tensor[(15, 7, 2), uint32] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %677 = @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */;
  %678 = floor_divide(%663, %664) /* ty=Tensor[(15, 7, 2), float32] */;
  %679 = not_equal(%669, %670) /* ty=Tensor[(10500), bool] */;
  %680 = bitwise_or(%675, %676) /* ty=Tensor[(15, 7, 2), uint32] */;
  %681 = %677.0;
  (%678, %679, %680, %681)
}

def @func_4683(%var_4659: Tensor[(6, 20), float64]) -> (Tensor[(1050, 11), float64], Tensor[(15, 7, 2), float32], Tensor[(7350), uint8], Tensor[(6, 20), float64]) {
  %682 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
  %683 = %682.1;
  %684 = cast(%683, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %685 = cast(meta[relay.Constant][34] /* ty=Tensor[(1050, 11), float64] */, dtype="float64") /* ty=Tensor[(1050, 11), float64] */;
  %686 = cast(meta[relay.Constant][35] /* ty=Tensor[(7350), uint8] */, dtype="uint8") /* ty=Tensor[(7350), uint8] */;
  %687 = cast(%var_4659, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %688 = reshape(%686, newshape=[3675, 2]) /* ty=Tensor[(3675, 2), uint8] */;
  %689 = reshape(%687, newshape=[6, 20]) /* ty=Tensor[(6, 20), float64] */;
  %690 = @func_3851(%688, %689) /* ty=(Tensor[(15, 7, 2), float32], Tensor[(1050, 7), float32], Tensor[(3675, 2), uint8], Tensor[(6, 20), float64], Tensor[(10500), float64], Tensor[(13650), float64], Tensor[(3500, 3), float64]) */;
  %691 = multiply(%684, %685) /* ty=Tensor[(1050, 11), float64] */;
  %692 = %690.0;
  (%691, %692, meta[relay.Constant][35] /* ty=Tensor[(7350), uint8] */, %var_4659)
}

def @func_3722(%var_3707: Tensor[(3, 2, 15), int8], %var_3708: Tensor[(3, 2, 15), int8], %var_3717: Tensor[(3, 2, 15), int8]) -> Tensor[(3, 2, 15), float32] {
  %693 = cast(%var_3708, dtype="int8") /* ty=Tensor[(3, 2, 15), int8] */;
  %694 = shape_of(%var_3707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%var_3707, dtype="int8") /* ty=Tensor[(3, 2, 15), int8] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %697 = bitwise_xor(%695, %696) /* ty=Tensor[(3, 2, 15), int8] */;
  %698 = cast(%var_3717, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %699 = shape_of(%697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%697, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%700, %701) /* ty=Tensor[(3, 2, 15), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3872() -> (Tensor[(1050, 7), float32], Tensor[(1050, 1), float64]) {
  @func_3870() /* ty=(Tensor[(1050, 7), float32], Tensor[(1050, 1), float64]) */
}

def @func_895() -> (Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) {
  @func_893() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */
}

def @func_304() -> Tensor[(1050, 1), float64] {
  @func_302() /* ty=Tensor[(1050, 1), float64] */
}

def @func_2422(%var_2405: Tensor[(10, 6, 4), float32], %var_2408: Tensor[(10, 6, 4), float32]) -> (Tensor[(10, 6, 4), uint8],) {
  %0 = cast(%var_2405, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %1 = exp(%0) /* ty=Tensor[(10, 6, 4), float32] */;
  %2 = cast(%var_2408, dtype="uint8") /* ty=Tensor[(10, 6, 4), uint8] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="uint8") /* ty=Tensor[(10, 6, 4), uint8] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %6 = maximum(%4, %5) /* ty=Tensor[(10, 6, 4), uint8] */;
  (%6,)
}

def @func_754() -> (Tensor[(1050, 7), float64],) {
  @func_752() /* ty=(Tensor[(1050, 7), float64],) */
}

def @func_983() -> (Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) {
  @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */
}

def @func_1026() -> (Tensor[(1050, 1), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32]) {
  @func_1024() /* ty=(Tensor[(1050, 1), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32]) */
}

def @func_4577() -> (Tensor[(1050, 7), bool],) {
  @func_4575() /* ty=(Tensor[(1050, 7), bool],) */
}

def @func_1592(%var_1584: Tensor[(1050, 8), float64]) -> Tensor[(1050, 8), int16] {
  %7 = @func_1213() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
  %8 = %7.0;
  %9 = cast(%8, dtype="int16") /* ty=Tensor[(1050, 1), int16] */;
  %10 = cast(%var_1584, dtype="int16") /* ty=Tensor[(1050, 8), int16] */;
  minimum(%9, %10) /* ty=Tensor[(1050, 8), int16] */
}

def @func_4201(%var_4199: uint64, %var_4200: Tensor[(1, 14, 10), uint64]) -> (Tensor[(1, 14, 10), bool],) {
  @func_4197(%var_4199, %var_4200) /* ty=(Tensor[(1, 14, 10), bool],) */
}

def @func_1766(%var_1764: Tensor[(1050, 7), float64]) -> Tensor[(1050, 7), uint32] {
  @func_1763(%var_1764) /* ty=Tensor[(1050, 7), uint32] */
}

def @func_1707() -> (Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) {
  @func_1705() /* ty=(Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) */
}

def @func_1999() -> (Tensor[(1050, 7), float64], Tensor[(15, 7, 2), float64]) {
  %11 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %12 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %13 = %12.0;
  %14 = cast(%13, dtype="float64") /* ty=Tensor[(15, 7, 2), float64] */;
  %15 = %11.1;
  %16 = exp(%14) /* ty=Tensor[(15, 7, 2), float64] */;
  (%15, %16)
}

def @func_2627(%var_2626: Tensor[(1050, 13), float64]) -> (Tensor[(1050, 13), bool], Tensor[(15, 7, 2), uint64], Tensor[(3500, 3), float64]) {
  %26 = fn (%var_2613: Tensor[(1050, 13), float64]) -> (Tensor[(1050, 13), bool], Tensor[(15, 7, 2), uint64], Tensor[(3500, 3), float64]) {
    %17 = @func_893() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
    %18 = %17.0;
    %19 = cast(%18, dtype="bool") /* ty=Tensor[(1050, 1), bool] */;
    %20 = cast(%var_2613, dtype="bool") /* ty=Tensor[(1050, 13), bool] */;
    %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(3500, 3), float64] */, dtype="float64") /* ty=Tensor[(3500, 3), float64] */;
    %22 = reshape(%21, newshape=[1050, 10]) /* ty=Tensor[(1050, 10), float64] */;
    %23 = @func_462(%22) /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(1050, 10), uint64], Tensor[(1050, 10), uint8], Tensor[(1050, 10), int16]) */;
    %24 = greater(%19, %20) /* ty=Tensor[(1050, 13), bool] */;
    %25 = %23.0;
    (%24, %25, meta[relay.Constant][0] /* ty=Tensor[(3500, 3), float64] */)
  };
  %26(%var_2626) /* ty=(Tensor[(1050, 13), bool], Tensor[(15, 7, 2), uint64], Tensor[(3500, 3), float64]) */
}

def @func_4197(%var_4190: uint64, %var_4191: Tensor[(1, 14, 10), uint64]) -> (Tensor[(1, 14, 10), bool],) {
  %27 = cast(%var_4190, dtype="bool") /* ty=bool */;
  %28 = cast(%var_4191, dtype="bool") /* ty=Tensor[(1, 14, 10), bool] */;
  %29 = greater_equal(%27, %28) /* ty=Tensor[(1, 14, 10), bool] */;
  (%29,)
}

def @func_1179() -> Tensor[(1050, 7), float32] {
  %33 = fn () -> Tensor[(1050, 7), float32] {
    %30 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
    %31 = %30.0;
    %32 = cast(%31, dtype="float32") /* ty=Tensor[(1050, 7), float32] */;
    exp(%32) /* ty=Tensor[(1050, 7), float32] */
  };
  %33() /* ty=Tensor[(1050, 7), float32] */
}

def @func_1552(%var_1516: Tensor[(15, 7, 2), uint64], %var_1523: Tensor[(10500), float64]) -> (Tensor[(15, 7, 2), float32], Tensor[(10500), bool], Tensor[(15, 7, 2), uint32], Tensor[(1050, 1), float64]) {
  %34 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %35 = %34.0;
  %36 = cast(%var_1516, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %40 = @func_1272() /* ty=(Tensor[(10500), float64], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 7), bool]) */;
  %41 = %40.0;
  %42 = cast(%var_1523, dtype="bool") /* ty=Tensor[(10500), bool] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(1), int32] */;
  %44 = cast(%41, dtype="bool") /* ty=Tensor[(10500), bool] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?), bool] */;
  %46 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %47 = %46.0;
  %48 = cast(%35, dtype="uint32") /* ty=Tensor[(15, 7, 2), uint32] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="uint32") /* ty=Tensor[(15, 7, 2), uint32] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %52 = @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */;
  %53 = floor_divide(%38, %39) /* ty=Tensor[(15, 7, 2), float32] */;
  %54 = not_equal(%44, %45) /* ty=Tensor[(10500), bool] */;
  %55 = bitwise_or(%50, %51) /* ty=Tensor[(15, 7, 2), uint32] */;
  %56 = %52.0;
  (%53, %54, %55, %56)
}

def @func_4610(%var_4608: Tensor[(240), float32]) -> (Tensor[(1050, 1), float64], Tensor[(10, 6, 4), uint8], Tensor[(240), float32], Tensor[(9450), float64]) {
  @func_4607(%var_4608) /* ty=(Tensor[(1050, 1), float64], Tensor[(10, 6, 4), uint8], Tensor[(240), float32], Tensor[(9450), float64]) */
}

def @func_507(%var_506: Tensor[(10500), float64]) -> (Tensor[(1050, 1), float64], Tensor[(7, 15, 10), bool], Tensor[(15, 7, 2), uint64], Tensor[(10500), float64], Tensor[(7, 15, 10), bool], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64]) {
  %79 = fn (%var_485: Tensor[(10500), float64]) -> (Tensor[(1050, 1), float64], Tensor[(7, 15, 10), bool], Tensor[(15, 7, 2), uint64], Tensor[(10500), float64], Tensor[(7, 15, 10), bool], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64]) {
    %57 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
    %58 = %57.2;
    %59 = cast(%58, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
    %60 = cast(%58, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
    %61 = reshape(%59, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
    %62 = reshape(%60, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
    %63 = @func_71(%61, %62) /* ty=(Tensor[(7, 15, 10), bool], Tensor[(7, 15, 10), bool]) */;
    %64 = cast(%var_485, dtype="float64") /* ty=Tensor[(10500), float64] */;
    %65 = reshape(%64, newshape=[1050, 10]) /* ty=Tensor[(1050, 10), float64] */;
    %66 = @func_462(%65) /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(1050, 10), uint64], Tensor[(1050, 10), uint8], Tensor[(1050, 10), int16]) */;
    %67 = %63.1;
    %68 = cast(%67, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
    %69 = cast(%67, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
    %70 = reshape(%68, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
    %71 = reshape(%69, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
    %72 = @func_71(%70, %71) /* ty=(Tensor[(7, 15, 10), bool], Tensor[(7, 15, 10), bool]) */;
    %73 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 2), float64] */;
    %74 = reshape(%73, newshape=[1, 16, 1]) /* ty=Tensor[(1, 16, 1), float64] */;
    %75 = @func_107(%74) /* ty=(Tensor[(1, 16, 1), float64],) */;
    %76 = %66.0;
    %77 = %72.0;
    %78 = %75.0;
    (%58, %67, %76, %var_485, %77, %78, meta[relay.Constant][1] /* ty=Tensor[(8, 2), float64] */)
  };
  %79(%var_506) /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), bool], Tensor[(15, 7, 2), uint64], Tensor[(10500), float64], Tensor[(7, 15, 10), bool], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64]) */
}

def @func_302() -> Tensor[(1050, 1), float64] {
  %80 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %80.2
}

def @func_1369(%var_1368: Tensor[(1050, 4), float64]) -> Tensor[(1050, 4), bool] {
  %85 = fn (%var_1359: Tensor[(1050, 4), float64]) -> Tensor[(1050, 4), bool] {
    %81 = @func_893() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
    %82 = %81.0;
    %83 = cast(%82, dtype="bool") /* ty=Tensor[(1050, 1), bool] */;
    %84 = cast(%var_1359, dtype="bool") /* ty=Tensor[(1050, 4), bool] */;
    logical_and(%83, %84) /* ty=Tensor[(1050, 4), bool] */
  };
  %85(%var_1368) /* ty=Tensor[(1050, 4), bool] */
}

def @func_3105(%var_3104: Tensor[(9, 2, 11), float32]) -> (Tensor[(9, 2, 11), float32],) {
  %91 = fn (%var_3086: Tensor[(9, 2, 11), float32]) -> (Tensor[(9, 2, 11), float32],) {
    %86 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 2, 11), float32] */, dtype="float32") /* ty=Tensor[(9, 2, 11), float32] */;
    %87 = shape_of(%var_3086, dtype="int32") /* ty=Tensor[(3), int32] */;
    %88 = cast(%var_3086, dtype="float32") /* ty=Tensor[(9, 2, 11), float32] */;
    %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %90 = power(%88, %89) /* ty=Tensor[(9, 2, 11), float32] */;
    (%90,)
  };
  %91(%var_3104) /* ty=(Tensor[(9, 2, 11), float32],) */
}

def @func_4321(%var_4320: Tensor[(7350), uint8]) -> (Tensor[(1050, 4), int16], Tensor[(6, 20), float64], Tensor[(7350), uint8], Tensor[(60, 2), float64], Tensor[(10500), uint64]) {
  %109 = fn (%var_4312: Tensor[(7350), uint8]) -> (Tensor[(1050, 4), int16], Tensor[(6, 20), float64], Tensor[(7350), uint8], Tensor[(60, 2), float64], Tensor[(10500), uint64]) {
    %92 = @func_2655() /* ty=(Tensor[(10500), float64], Tensor[(1050, 4), bool], Tensor[(4200), float64]) */;
    %93 = %92.1;
    %94 = cast(%93, dtype="float64") /* ty=Tensor[(1050, 4), float64] */;
    %95 = acos(%94) /* ty=Tensor[(1050, 4), float64] */;
    %96 = cast(%93, dtype="int16") /* ty=Tensor[(1050, 4), int16] */;
    %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(2), int32] */;
    %98 = cast(%95, dtype="int16") /* ty=Tensor[(1050, 4), int16] */;
    %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %100 = cast(%var_4312, dtype="uint8") /* ty=Tensor[(7350), uint8] */;
    %101 = cast(meta[relay.Constant][3] /* ty=Tensor[(60, 2), float64] */, dtype="float64") /* ty=Tensor[(60, 2), float64] */;
    %102 = reshape(%100, newshape=[3675, 2]) /* ty=Tensor[(3675, 2), uint8] */;
    %103 = reshape(%101, newshape=[6, 20]) /* ty=Tensor[(6, 20), float64] */;
    %104 = @func_3851(%102, %103) /* ty=(Tensor[(15, 7, 2), float32], Tensor[(1050, 7), float32], Tensor[(3675, 2), uint8], Tensor[(6, 20), float64], Tensor[(10500), float64], Tensor[(13650), float64], Tensor[(3500, 3), float64]) */;
    %105 = @func_3667() /* ty=(Tensor[(10500), uint64],) */;
    %106 = minimum(%98, %99) /* ty=Tensor[(1050, 4), int16] */;
    %107 = %104.3;
    %108 = %105.0;
    (%106, %107, %var_4312, meta[relay.Constant][3] /* ty=Tensor[(60, 2), float64] */, %108)
  };
  %109(%var_4320) /* ty=(Tensor[(1050, 4), int16], Tensor[(6, 20), float64], Tensor[(7350), uint8], Tensor[(60, 2), float64], Tensor[(10500), uint64]) */
}

def @func_2426(%var_2424: Tensor[(10, 6, 4), float32], %var_2425: Tensor[(10, 6, 4), float32]) -> (Tensor[(10, 6, 4), uint8],) {
  @func_2422(%var_2424, %var_2425) /* ty=(Tensor[(10, 6, 4), uint8],) */
}

def @func_1421(%var_1419: Tensor[(12, 5, 2), float64], %var_1420: Tensor[(10500), float64]) -> (Tensor[(12, 5, 2), float64], Tensor[(8, 2), float64], Tensor[(10500), float64], Tensor[(1050, 1), float64]) {
  %117 = fn (%var_1404: Tensor[(12, 5, 2), float64], %var_1409: Tensor[(10500), float64]) -> (Tensor[(12, 5, 2), float64], Tensor[(8, 2), float64], Tensor[(10500), float64], Tensor[(1050, 1), float64]) {
    %110 = cast(%var_1404, dtype="float64") /* ty=Tensor[(12, 5, 2), float64] */;
    %111 = cast(%var_1409, dtype="float64") /* ty=Tensor[(10500), float64] */;
    %112 = reshape(%111, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
    %113 = @func_505(%112) /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), bool], Tensor[(15, 7, 2), uint64], Tensor[(10500), float64], Tensor[(7, 15, 10), bool], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64]) */;
    %114 = log(%110) /* ty=Tensor[(12, 5, 2), float64] */;
    %115 = %113.6;
    %116 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
    (%114, %115, %var_1409, %116)
  };
  %117(%var_1419, %var_1420) /* ty=(Tensor[(12, 5, 2), float64], Tensor[(8, 2), float64], Tensor[(10500), float64], Tensor[(1050, 1), float64]) */
}

def @func_4035() -> (Tensor[(1050, 1), float64], Tensor[(1050, 1), float64]) {
  @func_4033() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 1), float64]) */
}

def @func_3165(%var_3164: Tensor[(240), float32]) -> (Tensor[(10500), float64], Tensor[(10, 6, 4), uint8], Tensor[(240), float32]) {
  %125 = fn (%var_3153: Tensor[(240), float32]) -> (Tensor[(10500), float64], Tensor[(10, 6, 4), uint8], Tensor[(240), float32]) {
    %118 = cast(%var_3153, dtype="float32") /* ty=Tensor[(240), float32] */;
    %119 = cast(%var_3153, dtype="float32") /* ty=Tensor[(240), float32] */;
    %120 = reshape(%118, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float32] */;
    %121 = reshape(%119, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float32] */;
    %122 = @func_2422(%120, %121) /* ty=(Tensor[(10, 6, 4), uint8],) */;
    %123 = @func_2296() /* ty=Tensor[(10500), float64] */;
    %124 = %122.0;
    (%123, %124, %var_3153)
  };
  %125(%var_3164) /* ty=(Tensor[(10500), float64], Tensor[(10, 6, 4), uint8], Tensor[(240), float32]) */
}

def @func_2968() -> Tensor[(1050, 7), bool] {
  %126 = @func_2880() /* ty=(Tensor[(1050, 7), bool],) */;
  %126.0
}

def @func_1441() -> Tensor[(1050, 1), float64] {
  %127 = @func_733() /* ty=(Tensor[(1050, 1), float64],) */;
  %127.0
}

def @func_4549(%var_4528: Tensor[(8, 2), float64]) -> (Tensor[(9450), float64], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64], Tensor[(1050, 7), float32]) {
  %128 = @func_3546() /* ty=(Tensor[(9450), float64], Tensor[(1050, 7), float32]) */;
  %129 = cast(%var_4528, dtype="float64") /* ty=Tensor[(8, 2), float64] */;
  %130 = reshape(%129, newshape=[1, 16, 1]) /* ty=Tensor[(1, 16, 1), float64] */;
  %131 = @func_107(%130) /* ty=(Tensor[(1, 16, 1), float64],) */;
  %132 = %128.0;
  %133 = %131.0;
  %134 = @func_1178() /* ty=Tensor[(1050, 7), float32] */;
  (%132, %133, %var_4528, %134)
}

def @func_2712() -> (Tensor[(15, 7, 2), float32],) {
  %139 = fn () -> (Tensor[(15, 7, 2), float32],) {
    %135 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
    %136 = %135.0;
    %137 = cast(%136, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
    %138 = atanh(%137) /* ty=Tensor[(15, 7, 2), float32] */;
    (%138,)
  };
  %139() /* ty=(Tensor[(15, 7, 2), float32],) */
}

def @func_2753(%var_2751: Tensor[(10500), float64]) -> (Tensor[(7, 15, 10), float64], Tensor[(7, 15, 10), bool], Tensor[(10500), float64]) {
  @func_2750(%var_2751) /* ty=(Tensor[(7, 15, 10), float64], Tensor[(7, 15, 10), bool], Tensor[(10500), float64]) */
}

def @func_2932(%var_2931: Tensor[(896), float32]) -> (Tensor[(1050, 1), float64], Tensor[(35, 6), uint64], Tensor[(10500), float64], Tensor[(1050, 10), uint8], Tensor[(15, 7, 2), float32], Tensor[(14, 600), float64], Tensor[(896), float32]) {
  %158 = fn (%var_2925: Tensor[(896), float32]) -> (Tensor[(1050, 1), float64], Tensor[(35, 6), uint64], Tensor[(10500), float64], Tensor[(1050, 10), uint8], Tensor[(15, 7, 2), float32], Tensor[(14, 600), float64], Tensor[(896), float32]) {
    %140 = @func_733() /* ty=(Tensor[(1050, 1), float64],) */;
    %141 = cast(meta[relay.Constant][5] /* ty=Tensor[(10500), float64] */, dtype="float64") /* ty=Tensor[(10500), float64] */;
    %142 = reshape(%141, newshape=[1050, 10]) /* ty=Tensor[(1050, 10), float64] */;
    %143 = @func_462(%142) /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(1050, 10), uint64], Tensor[(1050, 10), uint8], Tensor[(1050, 10), int16]) */;
    %144 = cast(meta[relay.Constant][4] /* ty=Tensor[(35, 6), uint64] */, dtype="uint64") /* ty=Tensor[(35, 6), uint64] */;
    %145 = cast(meta[relay.Constant][5] /* ty=Tensor[(10500), float64] */, dtype="float64") /* ty=Tensor[(10500), float64] */;
    %146 = reshape(%144, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), uint64] */;
    %147 = reshape(%145, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
    %148 = @func_1552(%146, %147) /* ty=(Tensor[(15, 7, 2), float32], Tensor[(10500), bool], Tensor[(15, 7, 2), uint32], Tensor[(1050, 1), float64]) */;
    %149 = %148.0;
    %150 = cast(%149, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
    %151 = cast(%var_2925, dtype="float32") /* ty=Tensor[(896), float32] */;
    %152 = reshape(%151, newshape=[8, 16, 7]) /* ty=Tensor[(8, 16, 7), float32] */;
    %153 = @func_2480(%152) /* ty=(Tensor[(8, 16, 7), float32], Tensor[(1050, 8), int16], Tensor[(14, 600), float64]) */;
    %154 = %140.0;
    %155 = %143.2;
    %156 = log10(%150) /* ty=Tensor[(15, 7, 2), float32] */;
    %157 = %153.2;
    (%154, meta[relay.Constant][4] /* ty=Tensor[(35, 6), uint64] */, meta[relay.Constant][5] /* ty=Tensor[(10500), float64] */, %155, %156, %157, %var_2925)
  };
  %158(%var_2931) /* ty=(Tensor[(1050, 1), float64], Tensor[(35, 6), uint64], Tensor[(10500), float64], Tensor[(1050, 10), uint8], Tensor[(15, 7, 2), float32], Tensor[(14, 600), float64], Tensor[(896), float32]) */
}

def @func_1024() -> (Tensor[(1050, 1), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32]) {
  %159 = cast(meta[relay.Constant][6] /* ty=Tensor[(10500), float64] */, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %160 = reshape(%159, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %161 = @func_505(%160) /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), bool], Tensor[(15, 7, 2), uint64], Tensor[(10500), float64], Tensor[(7, 15, 10), bool], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64]) */;
  %162 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %163 = %162.1;
  %164 = cast(%163, dtype="float32") /* ty=Tensor[(1050, 7), float32] */;
  %165 = %161.0;
  %166 = cos(%164) /* ty=Tensor[(1050, 7), float32] */;
  (%165, meta[relay.Constant][6] /* ty=Tensor[(10500), float64] */, %166)
}

def @func_3727(%var_3724: Tensor[(3, 2, 15), int8], %var_3725: Tensor[(3, 2, 15), int8], %var_3726: Tensor[(3, 2, 15), int8]) -> Tensor[(3, 2, 15), float32] {
  @func_3722(%var_3724, %var_3725, %var_3726) /* ty=Tensor[(3, 2, 15), float32] */
}

def @func_4141() -> (Tensor[(1050, 1), float64], Tensor[(10500), float64]) {
  %171 = fn () -> (Tensor[(1050, 1), float64], Tensor[(10500), float64]) {
    %167 = @func_1213() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
    %168 = @func_2655() /* ty=(Tensor[(10500), float64], Tensor[(1050, 4), bool], Tensor[(4200), float64]) */;
    %169 = %167.0;
    %170 = %168.0;
    (%169, %170)
  };
  %171() /* ty=(Tensor[(1050, 1), float64], Tensor[(10500), float64]) */
}

def @func_3377() -> (Tensor[(1050, 7), bool], Tensor[(1050, 7), bool]) {
  %183 = fn () -> (Tensor[(1050, 7), bool], Tensor[(1050, 7), bool]) {
    %172 = @func_893() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
    %173 = @func_3269() /* ty=(Tensor[(1050, 7), bool], Tensor[(1050, 7), bool], Tensor[(1050, 7), float64]) */;
    %174 = %173.1;
    %175 = cast(%174, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
    %176 = sin(%175) /* ty=Tensor[(1050, 7), float64] */;
    %177 = cast(%174, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
    %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(2), int32] */;
    %179 = cast(%176, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
    %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %181 = %172.1;
    %182 = not_equal(%179, %180) /* ty=Tensor[(1050, 7), bool] */;
    (%181, %182)
  };
  %183() /* ty=(Tensor[(1050, 7), bool], Tensor[(1050, 7), bool]) */
}

def @func_2001() -> (Tensor[(1050, 7), float64], Tensor[(15, 7, 2), float64]) {
  @func_1999() /* ty=(Tensor[(1050, 7), float64], Tensor[(15, 7, 2), float64]) */
}

def @func_5068() -> (Tensor[(9450), float64],) {
  %184 = @func_1705() /* ty=(Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) */;
  %185 = %184.1;
  (%185,)
}

def @func_4033() -> (Tensor[(1050, 1), float64], Tensor[(1050, 1), float64]) {
  %186 = @func_2272() /* ty=(Tensor[(1050, 1), float64],) */;
  %187 = @func_1213() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
  %188 = %186.0;
  %189 = %187.0;
  (%188, %189)
}

def @func_1784() -> (Tensor[(1050, 1), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) {
  %190 = @func_733() /* ty=(Tensor[(1050, 1), float64],) */;
  %191 = %190.0;
  %192 = @func_1178() /* ty=Tensor[(1050, 7), float32] */;
  %193 = @func_1178() /* ty=Tensor[(1050, 7), float32] */;
  (%191, %192, %193)
}

def @func_3851(%var_3812: Tensor[(3675, 2), uint8], %var_3813: Tensor[(6, 20), float64]) -> (Tensor[(15, 7, 2), float32], Tensor[(1050, 7), float32], Tensor[(3675, 2), uint8], Tensor[(6, 20), float64], Tensor[(10500), float64], Tensor[(13650), float64], Tensor[(3500, 3), float64]) {
  %194 = @func_2711() /* ty=(Tensor[(15, 7, 2), float32],) */;
  %195 = cast(%var_3812, dtype="uint8") /* ty=Tensor[(3675, 2), uint8] */;
  %196 = cast(%var_3813, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %197 = cast(meta[relay.Constant][7] /* ty=Tensor[(10500), float64] */, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %198 = reshape(%195, newshape=[1050, 7]) /* ty=Tensor[(1050, 7), uint8] */;
  %199 = reshape(%196, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %200 = reshape(%197, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %201 = @func_1965(%198, %199, %200) /* ty=(Tensor[(1050, 7), int16], Tensor[(1050, 1), float64], Tensor[(120), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) */;
  %202 = cast(meta[relay.Constant][8] /* ty=Tensor[(13650), float64] */, dtype="float64") /* ty=Tensor[(13650), float64] */;
  %203 = reshape(%202, newshape=[1050, 13]) /* ty=Tensor[(1050, 13), float64] */;
  %204 = @func_2625(%203) /* ty=(Tensor[(1050, 13), bool], Tensor[(15, 7, 2), uint64], Tensor[(3500, 3), float64]) */;
  %205 = %204.2;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(3500, 3), float64] */;
  %207 = %194.0;
  %208 = %201.6;
  %209 = acosh(%206) /* ty=Tensor[(3500, 3), float64] */;
  (%207, %208, %var_3812, %var_3813, meta[relay.Constant][7] /* ty=Tensor[(10500), float64] */, meta[relay.Constant][8] /* ty=Tensor[(13650), float64] */, %209)
}

def @func_1838(%var_1825: Tensor[(10500), float64]) -> (Tensor[(15, 7, 2), uint64], Tensor[(15, 7, 2), float32], Tensor[(10500), float64], Tensor[(9450), float64]) {
  %210 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="uint64") /* ty=Tensor[(15, 7, 2), uint64] */;
  %213 = cast(%var_1825, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %214 = reshape(%212, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), uint64] */;
  %215 = reshape(%213, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %216 = @func_1552(%214, %215) /* ty=(Tensor[(15, 7, 2), float32], Tensor[(10500), bool], Tensor[(15, 7, 2), uint32], Tensor[(1050, 1), float64]) */;
  %217 = @func_1705() /* ty=(Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) */;
  %218 = %216.0;
  %219 = %217.2;
  (%211, %218, %var_1825, %219)
}

def @func_2657() -> (Tensor[(10500), float64], Tensor[(1050, 4), bool], Tensor[(4200), float64]) {
  @func_2655() /* ty=(Tensor[(10500), float64], Tensor[(1050, 4), bool], Tensor[(4200), float64]) */
}

def @func_3795(%var_3793: Tensor[(10, 10, 10), bool], %var_3794: Tensor[(10, 10, 10), bool]) -> (Tensor[(10, 10, 10), bool],) {
  %225 = fn (%var_3767: Tensor[(10, 10, 10), bool], %var_3768: Tensor[(10, 10, 10), bool]) -> (Tensor[(10, 10, 10), bool],) {
    %220 = cast(%var_3768, dtype="bool") /* ty=Tensor[(10, 10, 10), bool] */;
    %221 = shape_of(%var_3767, dtype="int32") /* ty=Tensor[(3), int32] */;
    %222 = cast(%var_3767, dtype="bool") /* ty=Tensor[(10, 10, 10), bool] */;
    %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %224 = logical_and(%222, %223) /* ty=Tensor[(10, 10, 10), bool] */;
    (%224,)
  };
  %225(%var_3793, %var_3794) /* ty=(Tensor[(10, 10, 10), bool],) */
}

def @func_893() -> (Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) {
  %226 = @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */;
  %227 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
  %228 = %227.0;
  %229 = cast(meta[relay.Constant][9] /* ty=Tensor[(1050, 7), float64] */, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(2), int32] */;
  %231 = cast(%228, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %233 = %226.0;
  %234 = greater(%231, %232) /* ty=Tensor[(1050, 7), bool] */;
  (%233, %234)
}

def @func_2829(%var_2828: Tensor[(7350), bool]) -> (Tensor[(10500), float64], Tensor[(7350), float64]) {
  %250 = fn (%var_2820: Tensor[(7350), bool]) -> (Tensor[(10500), float64], Tensor[(7350), float64]) {
    %235 = cast(meta[relay.Constant][10] /* ty=Tensor[(7350), float64] */, dtype="float64") /* ty=Tensor[(7350), float64] */;
    %236 = reshape(%235, newshape=[1050, 7]) /* ty=Tensor[(1050, 7), float64] */;
    %237 = @func_2598(%236) /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
    %238 = %237.1;
    %239 = cast(%238, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
    %240 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(7350), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %241 = cast(meta[relay.Constant][10] /* ty=Tensor[(7350), float64] */, dtype="bool") /* ty=Tensor[(7350), bool] */;
    %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?), bool] */;
    %243 = equal(%241, %242) /* ty=Tensor[(7350), bool] */;
    %244 = cast(%var_2820, dtype="float64") /* ty=Tensor[(7350), float64] */;
    %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(1), int32] */;
    %246 = cast(%243, dtype="float64") /* ty=Tensor[(7350), float64] */;
    %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?), float64] */;
    %248 = @func_2296() /* ty=Tensor[(10500), float64] */;
    %249 = floor_divide(%246, %247) /* ty=Tensor[(7350), float64] */;
    (%248, %249)
  };
  %250(%var_2828) /* ty=(Tensor[(10500), float64], Tensor[(7350), float64]) */
}

def @func_2273() -> (Tensor[(1050, 1), float64],) {
  %252 = fn () -> (Tensor[(1050, 1), float64],) {
    %251 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
    (%251,)
  };
  %252() /* ty=(Tensor[(1050, 1), float64],) */
}

def @func_1272() -> (Tensor[(10500), float64], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 7), bool]) {
  %253 = @func_1024() /* ty=(Tensor[(1050, 1), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32]) */;
  %254 = cast(meta[relay.Constant][11] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %255 = reshape(%254, newshape=[1, 16, 1]) /* ty=Tensor[(1, 16, 1), float64] */;
  %256 = @func_107(%255) /* ty=(Tensor[(1, 16, 1), float64],) */;
  %257 = @func_1178() /* ty=Tensor[(1050, 7), float32] */;
  %258 = cast(%257, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %259 = reshape(%258, newshape=[1050, 7]) /* ty=Tensor[(1050, 7), float64] */;
  %260 = @func_915(%259) /* ty=(Tensor[(1050, 7), bool],) */;
  %261 = %260.0;
  %262 = cast(%261, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %263 = shape_of(%257, dtype="int32") /* ty=Tensor[(2), int32] */;
  %264 = cast(%257, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %266 = %253.1;
  %267 = %256.0;
  %268 = greater_equal(%264, %265) /* ty=Tensor[(1050, 7), bool] */;
  (%266, %267, meta[relay.Constant][11] /* ty=Tensor[(16), float64] */, %268)
}

def @func_4344(%var_4343: Tensor[(4, 3, 12), float32]) -> (Tensor[(4, 3, 12), float32], Tensor[(4, 3, 12), float32]) {
  %281 = fn (%var_4323: Tensor[(4, 3, 12), float32]) -> (Tensor[(4, 3, 12), float32], Tensor[(4, 3, 12), float32]) {
    %269 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 3, 12), float32] */, dtype="float32") /* ty=Tensor[(4, 3, 12), float32] */;
    %270 = shape_of(%var_4323, dtype="int32") /* ty=Tensor[(3), int32] */;
    %271 = cast(%var_4323, dtype="float32") /* ty=Tensor[(4, 3, 12), float32] */;
    %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %273 = cast(%var_4323, dtype="float64") /* ty=Tensor[(4, 3, 12), float64] */;
    %274 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(4, 3, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %275 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 3, 12), float32] */, dtype="float64") /* ty=Tensor[(4, 3, 12), float64] */;
    %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %277 = floor_divide(%275, %276) /* ty=Tensor[(4, 3, 12), float64] */;
    %278 = cast(%277, dtype="float32") /* ty=Tensor[(4, 3, 12), float32] */;
    %279 = power(%271, %272) /* ty=Tensor[(4, 3, 12), float32] */;
    %280 = atan(%278) /* ty=Tensor[(4, 3, 12), float32] */;
    (%279, %280)
  };
  %281(%var_4343) /* ty=(Tensor[(4, 3, 12), float32], Tensor[(4, 3, 12), float32]) */
}

def @func_4884() -> (Tensor[(1050, 1), float64],) {
  %282 = @func_733() /* ty=(Tensor[(1050, 1), float64],) */;
  %283 = %282.0;
  (%283,)
}

def @func_3618() -> (Tensor[(1050, 7), bool],) {
  %285 = fn () -> (Tensor[(1050, 7), bool],) {
    %284 = @func_2968() /* ty=Tensor[(1050, 7), bool] */;
    (%284,)
  };
  %285() /* ty=(Tensor[(1050, 7), bool],) */
}

def @func_1155(%var_1154: Tensor[(7350), float64]) -> (Tensor[(10500), float64], Tensor[(7350), float32], Tensor[(7350), float32]) {
  %299 = fn (%var_1119: Tensor[(7350), float64]) -> (Tensor[(10500), float64], Tensor[(7350), float32], Tensor[(7350), float32]) {
    %286 = @func_1024() /* ty=(Tensor[(1050, 1), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32]) */;
    %287 = cast(%var_1119, dtype="float64") /* ty=Tensor[(7350), float64] */;
    %288 = reshape(%287, newshape=[1050, 7]) /* ty=Tensor[(1050, 7), float64] */;
    %289 = @func_915(%288) /* ty=(Tensor[(1050, 7), bool],) */;
    %290 = %289.0;
    %291 = cast(%290, dtype="float32") /* ty=Tensor[(1050, 7), float32] */;
    %292 = shape_of(%var_1119, dtype="int32") /* ty=Tensor[(1), int32] */;
    %293 = cast(%var_1119, dtype="float32") /* ty=Tensor[(7350), float32] */;
    %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?), float32] */;
    %295 = cast(%var_1119, dtype="float32") /* ty=Tensor[(7350), float32] */;
    %296 = %286.1;
    %297 = mod(%293, %294) /* ty=Tensor[(7350), float32] */;
    %298 = atan(%295) /* ty=Tensor[(7350), float32] */;
    (%296, %297, %298)
  };
  %299(%var_1154) /* ty=(Tensor[(10500), float64], Tensor[(7350), float32], Tensor[(7350), float32]) */
}

def @func_702() -> (Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) {
  %300 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %301 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %302 = %301.1;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
  %304 = %300.2;
  %305 = cosh(%303) /* ty=Tensor[(7, 15, 10), float64] */;
  (%304, %305)
}

def @func_4552(%var_4550: Tensor[(8, 2), float64]) -> (Tensor[(9450), float64], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64], Tensor[(1050, 7), float32]) {
  @func_4549(%var_4550) /* ty=(Tensor[(9450), float64], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64], Tensor[(1050, 7), float32]) */
}

def @func_734() -> (Tensor[(1050, 1), float64],) {
  %307 = fn () -> (Tensor[(1050, 1), float64],) {
    %306 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
    (%306,)
  };
  %307() /* ty=(Tensor[(1050, 1), float64],) */
}

def @func_1841(%var_1839: Tensor[(10500), float64]) -> (Tensor[(15, 7, 2), uint64], Tensor[(15, 7, 2), float32], Tensor[(10500), float64], Tensor[(9450), float64]) {
  @func_1838(%var_1839) /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(15, 7, 2), float32], Tensor[(10500), float64], Tensor[(9450), float64]) */
}

def @func_4726() -> (Tensor[(7, 15, 10), float32], Tensor[(1050, 1), float64]) {
  %312 = fn () -> (Tensor[(7, 15, 10), float32], Tensor[(1050, 1), float64]) {
    %308 = @func_2454() /* ty=(Tensor[(7, 15, 10), float32],) */;
    %309 = @func_4239() /* ty=(Tensor[(16, 3, 8), bool], Tensor[(1050, 1), float64]) */;
    %310 = %308.0;
    %311 = %309.1;
    (%310, %311)
  };
  %312() /* ty=(Tensor[(7, 15, 10), float32], Tensor[(1050, 1), float64]) */
}

def @func_704() -> (Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) {
  @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */
}

def @func_3855(%var_3853: Tensor[(3675, 2), uint8], %var_3854: Tensor[(6, 20), float64]) -> (Tensor[(15, 7, 2), float32], Tensor[(1050, 7), float32], Tensor[(3675, 2), uint8], Tensor[(6, 20), float64], Tensor[(10500), float64], Tensor[(13650), float64], Tensor[(3500, 3), float64]) {
  @func_3851(%var_3853, %var_3854) /* ty=(Tensor[(15, 7, 2), float32], Tensor[(1050, 7), float32], Tensor[(3675, 2), uint8], Tensor[(6, 20), float64], Tensor[(10500), float64], Tensor[(13650), float64], Tensor[(3500, 3), float64]) */
}

def @func_1595(%var_1593: Tensor[(1050, 8), float64]) -> Tensor[(1050, 8), int16] {
  @func_1592(%var_1593) /* ty=Tensor[(1050, 8), int16] */
}

def @func_110(%var_108: Tensor[(1, 16, 1), float64]) -> (Tensor[(1, 16, 1), float64],) {
  @func_107(%var_108) /* ty=(Tensor[(1, 16, 1), float64],) */
}

def @func_2482(%var_2481: Tensor[(8, 16, 7), float32]) -> (Tensor[(8, 16, 7), float32], Tensor[(1050, 8), int16], Tensor[(14, 600), float64]) {
  %318 = fn (%var_2467: Tensor[(8, 16, 7), float32]) -> (Tensor[(8, 16, 7), float32], Tensor[(1050, 8), int16], Tensor[(14, 600), float64]) {
    %313 = cast(%var_2467, dtype="float32") /* ty=Tensor[(8, 16, 7), float32] */;
    %314 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 600), float64] */, dtype="float64") /* ty=Tensor[(14, 600), float64] */;
    %315 = reshape(%314, newshape=[1050, 8]) /* ty=Tensor[(1050, 8), float64] */;
    %316 = exp(%313) /* ty=Tensor[(8, 16, 7), float32] */;
    %317 = @func_1592(%315) /* ty=Tensor[(1050, 8), int16] */;
    (%316, %317, meta[relay.Constant][13] /* ty=Tensor[(14, 600), float64] */)
  };
  %318(%var_2481) /* ty=(Tensor[(8, 16, 7), float32], Tensor[(1050, 8), int16], Tensor[(14, 600), float64]) */
}

def @func_2970() -> Tensor[(1050, 7), bool] {
  @func_2968() /* ty=Tensor[(1050, 7), bool] */
}

def @func_2200(%var_2198: Tensor[(1050, 8), float64], %var_2199: Tensor[(1050, 3), float32]) -> (Tensor[(15, 7, 2), float64], Tensor[(1050, 8), bool], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 3), bool], Tensor[(1050, 1), float64], Tensor[(1050, 10), int16], Tensor[(10500), float64], Tensor[(1050, ?), float64]) {
  %362 = fn (%var_2102: Tensor[(1050, 8), float64], %var_2161: Tensor[(1050, 3), float32]) -> (Tensor[(15, 7, 2), float64], Tensor[(1050, 8), bool], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 3), bool], Tensor[(1050, 1), float64], Tensor[(1050, 10), int16], Tensor[(10500), float64], Tensor[(1050, ?), float64]) {
    %319 = @func_1999() /* ty=(Tensor[(1050, 7), float64], Tensor[(15, 7, 2), float64]) */;
    %320 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
    %321 = %320.2;
    %322 = cast(%321, dtype="uint8") /* ty=Tensor[(1050, 1), uint8] */;
    %323 = cast(%var_2102, dtype="uint8") /* ty=Tensor[(1050, 8), uint8] */;
    %324 = right_shift(%322, %323) /* ty=Tensor[(1050, 8), uint8] */;
    %325 = cast(%324, dtype="bool") /* ty=Tensor[(1050, 8), bool] */;
    %326 = shape_of(%var_2102, dtype="int32") /* ty=Tensor[(2), int32] */;
    %327 = cast(%var_2102, dtype="bool") /* ty=Tensor[(1050, 8), bool] */;
    %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %329 = cast(meta[relay.Constant][14] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
    %330 = reshape(%329, newshape=[1, 16, 1]) /* ty=Tensor[(1, 16, 1), float64] */;
    %331 = @func_107(%330) /* ty=(Tensor[(1, 16, 1), float64],) */;
    %332 = @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */;
    %333 = %332.0;
    %334 = cast(%333, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
    %335 = sigmoid(%334) /* ty=Tensor[(1050, 1), float64] */;
    %336 = cast(meta[relay.Constant][15] /* ty=Tensor[(1050, 1), float64] */, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
    %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(2), int32] */;
    %338 = cast(%335, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
    %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %340 = floor_divide(%338, %339) /* ty=Tensor[(1050, ?), float32] */;
    %341 = cast(%340, dtype="bool") /* ty=Tensor[(1050, ?), bool] */;
    %342 = cast(%var_2161, dtype="bool") /* ty=Tensor[(1050, 3), bool] */;
    %343 = @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */;
    %344 = cast(meta[relay.Constant][16] /* ty=Tensor[(10500), float64] */, dtype="float64") /* ty=Tensor[(10500), float64] */;
    %345 = reshape(%344, newshape=[1050, 10]) /* ty=Tensor[(1050, 10), float64] */;
    %346 = @func_462(%345) /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(1050, 10), uint64], Tensor[(1050, 10), uint8], Tensor[(1050, 10), int16]) */;
    %347 = cast(%340, dtype="float32") /* ty=Tensor[(1050, ?), float32] */;
    %348 = acosh(%347) /* ty=Tensor[(1050, ?), float32] */;
    %349 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
    %350 = %349.2;
    %351 = cast(%350, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
    %352 = shape_of(%348, dtype="int32") /* ty=Tensor[(2), int32] */;
    %353 = cast(%348, dtype="float64") /* ty=Tensor[(1050, ?), float64] */;
    %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %355 = %319.1;
    %356 = less_equal(%327, %328) /* ty=Tensor[(1050, 8), bool] */;
    %357 = %331.0;
    %358 = less_equal(%341, %342) /* ty=Tensor[(1050, 3), bool] */;
    %359 = %343.0;
    %360 = %346.3;
    %361 = mod(%353, %354) /* ty=Tensor[(1050, ?), float64] */;
    (%355, %356, %357, meta[relay.Constant][14] /* ty=Tensor[(16), float64] */, %358, %359, %360, meta[relay.Constant][16] /* ty=Tensor[(10500), float64] */, %361)
  };
  %362(%var_2198, %var_2199) /* ty=(Tensor[(15, 7, 2), float64], Tensor[(1050, 8), bool], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 3), bool], Tensor[(1050, 1), float64], Tensor[(1050, 10), int16], Tensor[(10500), float64], Tensor[(1050, ?), float64]) */
}

def @func_2750(%var_2743: Tensor[(10500), float64]) -> (Tensor[(7, 15, 10), float64], Tensor[(7, 15, 10), bool], Tensor[(10500), float64]) {
  %363 = @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */;
  %364 = cast(%var_2743, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %365 = reshape(%364, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %366 = @func_505(%365) /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), bool], Tensor[(15, 7, 2), uint64], Tensor[(10500), float64], Tensor[(7, 15, 10), bool], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64]) */;
  %367 = %363.1;
  %368 = %366.1;
  (%367, %368, %var_2743)
}

def @func_3722(%var_3707: Tensor[(3, 2, 15), int8], %var_3708: Tensor[(3, 2, 15), int8], %var_3717: Tensor[(3, 2, 15), int8]) -> Tensor[(3, 2, 15), float32] {
  %369 = cast(%var_3708, dtype="int8") /* ty=Tensor[(3, 2, 15), int8] */;
  %370 = shape_of(%var_3707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%var_3707, dtype="int8") /* ty=Tensor[(3, 2, 15), int8] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %373 = bitwise_xor(%371, %372) /* ty=Tensor[(3, 2, 15), int8] */;
  %374 = cast(%var_3717, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%376, %377) /* ty=Tensor[(3, 2, 15), float32] */
}

def @func_573() -> (Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) {
  %378 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %379 = %378.2;
  %380 = cast(%379, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %381 = cast(meta[relay.Constant][17] /* ty=Tensor[(1050, 7), float64] */, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %382 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %383 = power(%380, %381) /* ty=Tensor[(1050, 7), float64] */;
  %384 = %382.2;
  (%383, %384)
}

def @func_1969(%var_1966: Tensor[(1050, 7), uint8], %var_1967: Tensor[(120), float64], %var_1968: Tensor[(10500), float64]) -> (Tensor[(1050, 7), int16], Tensor[(1050, 1), float64], Tensor[(120), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) {
  %431 = fn (%var_1871: Tensor[(1050, 7), uint8], %var_1911: Tensor[(120), float64], %var_1912: Tensor[(10500), float64]) -> (Tensor[(1050, 7), int16], Tensor[(1050, 1), float64], Tensor[(120), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) {
    %385 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
    %386 = %385.1;
    %387 = cast(meta[relay.Constant][18] /* ty=Tensor[(1050, 7), float64] */, dtype="uint8") /* ty=Tensor[(1050, 7), uint8] */;
    %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(2), int32] */;
    %389 = cast(%386, dtype="uint8") /* ty=Tensor[(1050, 7), uint8] */;
    %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %391 = multiply(%389, %390) /* ty=Tensor[(1050, 7), uint8] */;
    %392 = cast(%391, dtype="int16") /* ty=Tensor[(1050, 7), int16] */;
    %393 = shape_of(%var_1871, dtype="int32") /* ty=Tensor[(2), int32] */;
    %394 = cast(%var_1871, dtype="int16") /* ty=Tensor[(1050, 7), int16] */;
    %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %396 = cast(%var_1911, dtype="float64") /* ty=Tensor[(120), float64] */;
    %397 = cast(%var_1912, dtype="float64") /* ty=Tensor[(10500), float64] */;
    %398 = reshape(%396, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), float64] */;
    %399 = reshape(%397, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
    %400 = @func_1418(%398, %399) /* ty=(Tensor[(12, 5, 2), float64], Tensor[(8, 2), float64], Tensor[(10500), float64], Tensor[(1050, 1), float64]) */;
    %401 = cast(%var_1871, dtype="int32") /* ty=Tensor[(1050, 7), int32] */;
    %402 = shape_of(%391, dtype="int32") /* ty=Tensor[(2), int32] */;
    %403 = cast(%391, dtype="int32") /* ty=Tensor[(1050, 7), int32] */;
    %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %405 = left_shift(%403, %404) /* ty=Tensor[(1050, 7), int32] */;
    %406 = cast(%405, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
    %407 = asinh(%406) /* ty=Tensor[(1050, 7), float64] */;
    %408 = cast(meta[relay.Constant][18] /* ty=Tensor[(1050, 7), float64] */, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
    %409 = shape_of(%407, dtype="int32") /* ty=Tensor[(2), int32] */;
    %410 = cast(%407, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
    %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %412 = less(%410, %411) /* ty=Tensor[(1050, 7), bool] */;
    %413 = cast(%412, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
    %414 = shape_of(%407, dtype="int32") /* ty=Tensor[(2), int32] */;
    %415 = cast(%407, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
    %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %417 = logical_or(%415, %416) /* ty=Tensor[(1050, 7), bool] */;
    %418 = cast(%417, dtype="float32") /* ty=Tensor[(1050, 7), float32] */;
    %419 = cast(%391, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
    %420 = shape_of(%407, dtype="int32") /* ty=Tensor[(2), int32] */;
    %421 = cast(%407, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
    %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %423 = @func_1784() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) */;
    %424 = @func_1784() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) */;
    %425 = bitwise_xor(%394, %395) /* ty=Tensor[(1050, 7), int16] */;
    %426 = %400.3;
    %427 = asin(%418) /* ty=Tensor[(1050, 7), float32] */;
    %428 = floor_mod(%421, %422) /* ty=Tensor[(1050, 7), float64] */;
    %429 = %423.1;
    %430 = %424.2;
    (%425, %426, %var_1911, %var_1912, %427, %428, %429, %430)
  };
  %431(%var_1966, %var_1967, %var_1968) /* ty=(Tensor[(1050, 7), int16], Tensor[(1050, 1), float64], Tensor[(120), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) */
}

def @func_3271() -> (Tensor[(1050, 7), bool], Tensor[(1050, 7), bool], Tensor[(1050, 7), float64]) {
  @func_3269() /* ty=(Tensor[(1050, 7), bool], Tensor[(1050, 7), bool], Tensor[(1050, 7), float64]) */
}

def @func_794() -> Tensor[(1050, 1), float64] {
  %432 = fn () -> Tensor[(1050, 1), float64] {
    @func_302() /* ty=Tensor[(1050, 1), float64] */
  };
  %432() /* ty=Tensor[(1050, 1), float64] */
}

def @func_1705() -> (Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) {
  %433 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %434 = cast(meta[relay.Constant][19] /* ty=Tensor[(9450), float64] */, dtype="float64") /* ty=Tensor[(9450), float64] */;
  %435 = reshape(%434, newshape=[9450]) /* ty=Tensor[(9450), float64] */;
  %436 = @func_634(%435) /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 1), float32], Tensor[(1050, 1), float64], Tensor[(9450), float64], Tensor[(1, 16, 1), float64], Tensor[(10500), float64], Tensor[(1050, 6), bool]) */;
  %437 = cast(meta[relay.Constant][20] /* ty=Tensor[(9450), float64] */, dtype="float64") /* ty=Tensor[(9450), float64] */;
  %438 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(9450), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %439 = cast(meta[relay.Constant][19] /* ty=Tensor[(9450), float64] */, dtype="float64") /* ty=Tensor[(9450), float64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?), float64] */;
  %441 = %433.1;
  %442 = %436.3;
  %443 = subtract(%439, %440) /* ty=Tensor[(9450), float64] */;
  (%441, %442, %443)
}

def @func_981() -> (Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) {
  %444 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
  %445 = @func_752() /* ty=(Tensor[(1050, 7), float64],) */;
  %446 = %444.0;
  %447 = %445.0;
  (%446, %447)
}

def @func_2600(%var_2599: Tensor[(1050, 7), float64]) -> (Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) {
  %459 = fn (%var_2571: Tensor[(1050, 7), float64]) -> (Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) {
    %448 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
    %449 = @func_1999() /* ty=(Tensor[(1050, 7), float64], Tensor[(15, 7, 2), float64]) */;
    %450 = %449.0;
    %451 = cast(%var_2571, dtype="uint16") /* ty=Tensor[(1050, 7), uint16] */;
    %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(2), int32] */;
    %453 = cast(%450, dtype="uint16") /* ty=Tensor[(1050, 7), uint16] */;
    %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %455 = add(%453, %454) /* ty=Tensor[(1050, 7), uint16] */;
    %456 = cast(%455, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
    %457 = %448.0;
    %458 = atanh(%456) /* ty=Tensor[(1050, 7), float64] */;
    (%457, %458)
  };
  %459(%var_2599) /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */
}

def @func_3220() -> (Tensor[(1050, 1), float64], Tensor[(15, 8, 16), float32]) {
  %465 = fn () -> (Tensor[(1050, 1), float64], Tensor[(15, 8, 16), float32]) {
    %460 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 8, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 8, 16), float64] */;
    %461 = erf(%460) /* ty=Tensor[(15, 8, 16), float64] */;
    %462 = cast(%461, dtype="float32") /* ty=Tensor[(15, 8, 16), float32] */;
    %463 = @func_1441() /* ty=Tensor[(1050, 1), float64] */;
    %464 = cos(%462) /* ty=Tensor[(15, 8, 16), float32] */;
    (%463, %464)
  };
  %465() /* ty=(Tensor[(1050, 1), float64], Tensor[(15, 8, 16), float32]) */
}

def @func_3668() -> (Tensor[(10500), uint64],) {
  %475 = fn () -> (Tensor[(10500), uint64],) {
    %466 = @func_2655() /* ty=(Tensor[(10500), float64], Tensor[(1050, 4), bool], Tensor[(4200), float64]) */;
    %467 = %466.0;
    %468 = cast(%467, dtype="float64") /* ty=Tensor[(10500), float64] */;
    %469 = log(%468) /* ty=Tensor[(10500), float64] */;
    %470 = cast(%467, dtype="uint64") /* ty=Tensor[(10500), uint64] */;
    %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(1), int32] */;
    %472 = cast(%469, dtype="uint64") /* ty=Tensor[(10500), uint64] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %474 = bitwise_or(%472, %473) /* ty=Tensor[(10500), uint64] */;
    (%474,)
  };
  %475() /* ty=(Tensor[(10500), uint64],) */
}

def @func_4240() -> (Tensor[(16, 3, 8), bool], Tensor[(1050, 1), float64]) {
  %488 = fn () -> (Tensor[(16, 3, 8), bool], Tensor[(1050, 1), float64]) {
    %476 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 8), float64] */;
    %477 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(16, 3, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %478 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 8), float64] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %480 = maximum(%478, %479) /* ty=Tensor[(16, 3, 8), float64] */;
    %481 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 3, 8), float64] */, dtype="bool") /* ty=Tensor[(16, 3, 8), bool] */;
    %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
    %483 = cast(%480, dtype="bool") /* ty=Tensor[(16, 3, 8), bool] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %485 = @func_733() /* ty=(Tensor[(1050, 1), float64],) */;
    %486 = less(%483, %484) /* ty=Tensor[(16, 3, 8), bool] */;
    %487 = %485.0;
    (%486, %487)
  };
  %488() /* ty=(Tensor[(16, 3, 8), bool], Tensor[(1050, 1), float64]) */
}

def @func_2455() -> (Tensor[(7, 15, 10), float32],) {
  %502 = fn () -> (Tensor[(7, 15, 10), float32],) {
    %489 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
    %490 = %489.2;
    %491 = cast(%490, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
    %492 = cast(%490, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
    %493 = reshape(%491, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
    %494 = reshape(%492, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
    %495 = @func_71(%493, %494) /* ty=(Tensor[(7, 15, 10), bool], Tensor[(7, 15, 10), bool]) */;
    %496 = %495.0;
    %497 = cast(%490, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
    %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
    %499 = cast(%496, dtype="float32") /* ty=Tensor[(7, 15, 10), float32] */;
    %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %501 = power(%499, %500) /* ty=Tensor[(7, 15, 10), float32] */;
    (%501,)
  };
  %502() /* ty=(Tensor[(7, 15, 10), float32],) */
}

def @func_3556(%var_3551: Tensor[(11, 11, 2), float64], %var_3552: Tensor[(11, 11, 2), float64]) -> (Tensor[(11, 11, 2), float64],) {
  %503 = cast(%var_3552, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %504 = shape_of(%var_3551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%var_3551, dtype="float64") /* ty=Tensor[(11, 11, 2), float64] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %507 = floor_mod(%505, %506) /* ty=Tensor[(11, 11, 2), float64] */;
  (%507,)
}

def @func_3560(%var_3558: Tensor[(11, 11, 2), float64], %var_3559: Tensor[(11, 11, 2), float64]) -> (Tensor[(11, 11, 2), float64],) {
  @func_3556(%var_3558, %var_3559) /* ty=(Tensor[(11, 11, 2), float64],) */
}

def @func_4419() -> (Tensor[(15, 7, 2), float32],) {
  %510 = fn () -> (Tensor[(15, 7, 2), float32],) {
    %508 = @func_2711() /* ty=(Tensor[(15, 7, 2), float32],) */;
    %509 = %508.0;
    (%509,)
  };
  %510() /* ty=(Tensor[(15, 7, 2), float32],) */
}

def @func_462(%var_433: Tensor[(1050, 10), float64]) -> (Tensor[(15, 7, 2), uint64], Tensor[(1050, 10), uint64], Tensor[(1050, 10), uint8], Tensor[(1050, 10), int16]) {
  %511 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %512 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
  %513 = cast(%512, dtype="uint64") /* ty=Tensor[(1050, 1), uint64] */;
  %514 = cast(%var_433, dtype="uint64") /* ty=Tensor[(1050, 10), uint64] */;
  %515 = cast(%512, dtype="uint16") /* ty=Tensor[(1050, 1), uint16] */;
  %516 = cast(%var_433, dtype="uint16") /* ty=Tensor[(1050, 10), uint16] */;
  %517 = left_shift(%515, %516) /* ty=Tensor[(1050, 10), uint16] */;
  %518 = cast(%517, dtype="uint8") /* ty=Tensor[(1050, 10), uint8] */;
  %519 = cast(%512, dtype="uint8") /* ty=Tensor[(1050, 1), uint8] */;
  %520 = cast(%512, dtype="int16") /* ty=Tensor[(1050, 1), int16] */;
  %521 = cast(%var_433, dtype="int16") /* ty=Tensor[(1050, 10), int16] */;
  %522 = %511.0;
  %523 = logical_xor(%513, %514) /* ty=Tensor[(1050, 10), uint64] */;
  %524 = right_shift(%518, %519) /* ty=Tensor[(1050, 10), uint8] */;
  %525 = add(%520, %521) /* ty=Tensor[(1050, 10), int16] */;
  (%522, %523, %524, %525)
}

def @func_1274() -> (Tensor[(10500), float64], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 7), bool]) {
  @func_1272() /* ty=(Tensor[(10500), float64], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 7), bool]) */
}

def @func_465(%var_463: Tensor[(1050, 10), float64]) -> (Tensor[(15, 7, 2), uint64], Tensor[(1050, 10), uint64], Tensor[(1050, 10), uint8], Tensor[(1050, 10), int16]) {
  @func_462(%var_463) /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(1050, 10), uint64], Tensor[(1050, 10), uint8], Tensor[(1050, 10), int16]) */
}

def @func_2695(%var_2693: float32, %var_2694: Tensor[(1, 3, 11), float32]) -> (Tensor[(1, 3, 11), float64], Tensor[(1, 3, 11), float64]) {
  %534 = fn (%var_2674: float32, %var_2675: Tensor[(1, 3, 11), float32]) -> (Tensor[(1, 3, 11), float64], Tensor[(1, 3, 11), float64]) {
    %526 = cast(%var_2674, dtype="float32") /* ty=float32 */;
    %527 = cast(%var_2675, dtype="float32") /* ty=Tensor[(1, 3, 11), float32] */;
    %528 = mod(%526, %527) /* ty=Tensor[(1, 3, 11), float32] */;
    %529 = cast(%528, dtype="float64") /* ty=Tensor[(1, 3, 11), float64] */;
    %530 = cast(%var_2675, dtype="float64") /* ty=Tensor[(1, 3, 11), float64] */;
    %531 = cast(%var_2674, dtype="float64") /* ty=float64 */;
    %532 = asinh(%529) /* ty=Tensor[(1, 3, 11), float64] */;
    %533 = power(%530, %531) /* ty=Tensor[(1, 3, 11), float64] */;
    (%532, %533)
  };
  %534(%var_2693, %var_2694) /* ty=(Tensor[(1, 3, 11), float64], Tensor[(1, 3, 11), float64]) */
}

def @func_3548() -> (Tensor[(9450), float64], Tensor[(1050, 7), float32]) {
  @func_3546() /* ty=(Tensor[(9450), float64], Tensor[(1050, 7), float32]) */
}

def @func_4402(%var_4400: Tensor[(1050, 7), bool]) -> (Tensor[(1050, 7), int32],) {
  @func_4399(%var_4400) /* ty=(Tensor[(1050, 7), int32],) */
}

def @func_2655() -> (Tensor[(10500), float64], Tensor[(1050, 4), bool], Tensor[(4200), float64]) {
  %535 = cast(meta[relay.Constant][25] /* ty=Tensor[(4200), float64] */, dtype="float64") /* ty=Tensor[(4200), float64] */;
  %536 = reshape(%535, newshape=[1050, 4]) /* ty=Tensor[(1050, 4), float64] */;
  %537 = @func_2296() /* ty=Tensor[(10500), float64] */;
  %538 = @func_1367(%536) /* ty=Tensor[(1050, 4), bool] */;
  (%537, %538, meta[relay.Constant][25] /* ty=Tensor[(4200), float64] */)
}

def @func_2334() -> Tensor[(1050, 4), bool] {
  %543 = fn () -> Tensor[(1050, 4), bool] {
    %539 = @func_702() /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), float64]) */;
    %540 = %539.0;
    %541 = cast(%540, dtype="bool") /* ty=Tensor[(1050, 1), bool] */;
    %542 = cast(meta[relay.Constant][26] /* ty=Tensor[(1050, 4), float64] */, dtype="bool") /* ty=Tensor[(1050, 4), bool] */;
    greater(%541, %542) /* ty=Tensor[(1050, 4), bool] */
  };
  %543() /* ty=Tensor[(1050, 4), bool] */
}

def @func_1556(%var_1554: Tensor[(15, 7, 2), uint64], %var_1555: Tensor[(10500), float64]) -> (Tensor[(15, 7, 2), float32], Tensor[(10500), bool], Tensor[(15, 7, 2), uint32], Tensor[(1050, 1), float64]) {
  @func_1552(%var_1554, %var_1555) /* ty=(Tensor[(15, 7, 2), float32], Tensor[(10500), bool], Tensor[(15, 7, 2), uint32], Tensor[(1050, 1), float64]) */
}

def @func_2297() -> Tensor[(10500), float64] {
  %545 = fn () -> Tensor[(10500), float64] {
    %544 = @func_1024() /* ty=(Tensor[(1050, 1), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32]) */;
    %544.1
  };
  %545() /* ty=Tensor[(10500), float64] */
}

def @func_3423(%var_3395: Tensor[(12, 16, 6), float64]) -> (Tensor[(12, 16, 6), int16], Tensor[(12, 16, 6), float64]) {
  %546 = @func_1272() /* ty=(Tensor[(10500), float64], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 7), bool]) */;
  %547 = %546.1;
  %548 = cast(%547, dtype="int16") /* ty=Tensor[(1, 16, 1), int16] */;
  %549 = cast(%var_3395, dtype="int16") /* ty=Tensor[(12, 16, 6), int16] */;
  %550 = cast(%var_3395, dtype="float64") /* ty=Tensor[(12, 16, 6), float64] */;
  %551 = asinh(%550) /* ty=Tensor[(12, 16, 6), float64] */;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(12, 16, 6), float64] */;
  %553 = subtract(%548, %549) /* ty=Tensor[(12, 16, 6), int16] */;
  %554 = rsqrt(%552) /* ty=Tensor[(12, 16, 6), float64] */;
  (%553, %554)
}

def @func_3426(%var_3424: Tensor[(12, 16, 6), float64]) -> (Tensor[(12, 16, 6), int16], Tensor[(12, 16, 6), float64]) {
  @func_3423(%var_3424) /* ty=(Tensor[(12, 16, 6), int16], Tensor[(12, 16, 6), float64]) */
}

def @func_1214() -> (Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) {
  %567 = fn () -> (Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) {
    %555 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
    %556 = %555.0;
    %557 = cast(%556, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
    %558 = sqrt(%557) /* ty=Tensor[(1050, 7), float64] */;
    %559 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
    %560 = %559.0;
    %561 = cast(%560, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
    %562 = shape_of(%558, dtype="int32") /* ty=Tensor[(2), int32] */;
    %563 = cast(%558, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %565 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
    %566 = less_equal(%563, %564) /* ty=Tensor[(1050, 7), bool] */;
    (%565, %566)
  };
  %567() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */
}

def @func_289() -> (Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) {
  %579 = fn () -> (Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) {
    %568 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 7, 2), uint64] */, dtype="uint64") /* ty=Tensor[(15, 7, 2), uint64] */;
    %569 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(15, 7, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %570 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 7, 2), uint64] */, dtype="uint64") /* ty=Tensor[(15, 7, 2), uint64] */;
    %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %572 = cast(meta[relay.Constant][29] /* ty=Tensor[(1050, 1), float64] */, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
    %573 = cast(meta[relay.Constant][29] /* ty=Tensor[(1050, 1), float64] */, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
    %574 = reshape(%572, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
    %575 = reshape(%573, newshape=[7, 15, 10]) /* ty=Tensor[(7, 15, 10), float64] */;
    %576 = @func_71(%574, %575) /* ty=(Tensor[(7, 15, 10), bool], Tensor[(7, 15, 10), bool]) */;
    %577 = left_shift(%570, %571) /* ty=Tensor[(15, 7, 2), uint64] */;
    %578 = %576.1;
    (%577, %578, meta[relay.Constant][29] /* ty=Tensor[(1050, 1), float64] */)
  };
  %579() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */
}

def @func_917(%var_916: Tensor[(1050, 7), float64]) -> (Tensor[(1050, 7), bool],) {
  %587 = fn (%var_910: Tensor[(1050, 7), float64]) -> (Tensor[(1050, 7), bool],) {
    %580 = @func_752() /* ty=(Tensor[(1050, 7), float64],) */;
    %581 = %580.0;
    %582 = cast(%var_910, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
    %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(2), int32] */;
    %584 = cast(%581, dtype="bool") /* ty=Tensor[(1050, 7), bool] */;
    %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %586 = logical_and(%584, %585) /* ty=Tensor[(1050, 7), bool] */;
    (%586,)
  };
  %587(%var_916) /* ty=(Tensor[(1050, 7), bool],) */
}

def @func_3269() -> (Tensor[(1050, 7), bool], Tensor[(1050, 7), bool], Tensor[(1050, 7), float64]) {
  %588 = @func_2880() /* ty=(Tensor[(1050, 7), bool],) */;
  %589 = %588.0;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %591 = reshape(%590, newshape=[1050, 7]) /* ty=Tensor[(1050, 7), float64] */;
  %592 = @func_915(%591) /* ty=(Tensor[(1050, 7), bool],) */;
  %593 = @func_1705() /* ty=(Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) */;
  %594 = %592.0;
  %595 = %593.0;
  (%589, %594, %595)
}

def @func_637(%var_635: Tensor[(9450), float64]) -> (Tensor[(1050, 1), float64], Tensor[(1050, 1), float32], Tensor[(1050, 1), float64], Tensor[(9450), float64], Tensor[(1, 16, 1), float64], Tensor[(10500), float64], Tensor[(1050, 6), bool]) {
  @func_634(%var_635) /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 1), float32], Tensor[(1050, 1), float64], Tensor[(9450), float64], Tensor[(1, 16, 1), float64], Tensor[(10500), float64], Tensor[(1050, 6), bool]) */
}

def @func_4757(%var_4745: Tensor[(4, 14, 11), bool]) -> (Tensor[(4, 14, 11), bool], Tensor[(7, 15, 10), float32]) {
  %596 = cast(%var_4745, dtype="bool") /* ty=Tensor[(4, 14, 11), bool] */;
  %597 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(4, 14, 11), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 14, 11), bool] */, dtype="bool") /* ty=Tensor[(4, 14, 11), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %600 = @func_2454() /* ty=(Tensor[(7, 15, 10), float32],) */;
  %601 = logical_or(%598, %599) /* ty=Tensor[(4, 14, 11), bool] */;
  %602 = %600.0;
  (%601, %602)
}

def @func_4607(%var_4600: Tensor[(240), float32]) -> (Tensor[(1050, 1), float64], Tensor[(10, 6, 4), uint8], Tensor[(240), float32], Tensor[(9450), float64]) {
  %603 = @func_2272() /* ty=(Tensor[(1050, 1), float64],) */;
  %604 = cast(%var_4600, dtype="float32") /* ty=Tensor[(240), float32] */;
  %605 = cast(%var_4600, dtype="float32") /* ty=Tensor[(240), float32] */;
  %606 = reshape(%604, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float32] */;
  %607 = reshape(%605, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float32] */;
  %608 = @func_2422(%606, %607) /* ty=(Tensor[(10, 6, 4), uint8],) */;
  %609 = %603.0;
  %610 = %608.0;
  %611 = @func_4494() /* ty=Tensor[(9450), float64] */;
  (%609, %610, %var_4600, %611)
}

def @func_4760(%var_4758: Tensor[(4, 14, 11), bool]) -> (Tensor[(4, 14, 11), bool], Tensor[(7, 15, 10), float32]) {
  @func_4757(%var_4758) /* ty=(Tensor[(4, 14, 11), bool], Tensor[(7, 15, 10), float32]) */
}

def @func_4399(%var_4383: Tensor[(1050, 7), bool]) -> (Tensor[(1050, 7), int32],) {
  %612 = @func_3617() /* ty=(Tensor[(1050, 7), bool],) */;
  %613 = %612.0;
  %614 = cast(%var_4383, dtype="int32") /* ty=Tensor[(1050, 7), int32] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(2), int32] */;
  %616 = cast(%613, dtype="int32") /* ty=Tensor[(1050, 7), int32] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %618 = maximum(%616, %617) /* ty=Tensor[(1050, 7), int32] */;
  (%618,)
}

def @func_4683(%var_4659: Tensor[(6, 20), float64]) -> (Tensor[(1050, 11), float64], Tensor[(15, 7, 2), float32], Tensor[(7350), uint8], Tensor[(6, 20), float64]) {
  %619 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
  %620 = %619.1;
  %621 = cast(%620, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %622 = cast(meta[relay.Constant][31] /* ty=Tensor[(1050, 11), float64] */, dtype="float64") /* ty=Tensor[(1050, 11), float64] */;
  %623 = cast(meta[relay.Constant][32] /* ty=Tensor[(7350), uint8] */, dtype="uint8") /* ty=Tensor[(7350), uint8] */;
  %624 = cast(%var_4659, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %625 = reshape(%623, newshape=[3675, 2]) /* ty=Tensor[(3675, 2), uint8] */;
  %626 = reshape(%624, newshape=[6, 20]) /* ty=Tensor[(6, 20), float64] */;
  %627 = @func_3851(%625, %626) /* ty=(Tensor[(15, 7, 2), float32], Tensor[(1050, 7), float32], Tensor[(3675, 2), uint8], Tensor[(6, 20), float64], Tensor[(10500), float64], Tensor[(13650), float64], Tensor[(3500, 3), float64]) */;
  %628 = multiply(%621, %622) /* ty=Tensor[(1050, 11), float64] */;
  %629 = %627.0;
  (%628, %629, meta[relay.Constant][32] /* ty=Tensor[(7350), uint8] */, %var_4659)
}

def @func_5070() -> (Tensor[(9450), float64],) {
  @func_5068() /* ty=(Tensor[(9450), float64],) */
}

def @func_3521() -> (Tensor[(1050, 7), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) {
  @func_3519() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) */
}

def @func_5011() -> (Tensor[(1, 16, 1), float64],) {
  %630 = @func_1272() /* ty=(Tensor[(10500), float64], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 7), bool]) */;
  %631 = %630.1;
  (%631,)
}

def @func_4575() -> (Tensor[(1050, 7), bool],) {
  %632 = @func_2968() /* ty=Tensor[(1050, 7), bool] */;
  (%632,)
}

def @func_4686(%var_4684: Tensor[(6, 20), float64]) -> (Tensor[(1050, 11), float64], Tensor[(15, 7, 2), float32], Tensor[(7350), uint8], Tensor[(6, 20), float64]) {
  @func_4683(%var_4684) /* ty=(Tensor[(1050, 11), float64], Tensor[(15, 7, 2), float32], Tensor[(7350), uint8], Tensor[(6, 20), float64]) */
}

def @func_1443() -> Tensor[(1050, 1), float64] {
  @func_1441() /* ty=Tensor[(1050, 1), float64] */
}

def @func_1763(%var_1749: Tensor[(1050, 7), float64]) -> Tensor[(1050, 7), uint32] {
  %633 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %634 = %633.1;
  %635 = cast(%var_1749, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(2), int32] */;
  %637 = cast(%634, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %639 = minimum(%637, %638) /* ty=Tensor[(1050, 7), float64] */;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(1050, 7), float32] */;
  %641 = acos(%640) /* ty=Tensor[(1050, 7), float32] */;
  %642 = cast(%634, dtype="uint32") /* ty=Tensor[(1050, 7), uint32] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(2), int32] */;
  %644 = cast(%641, dtype="uint32") /* ty=Tensor[(1050, 7), uint32] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  bitwise_and(%644, %645) /* ty=Tensor[(1050, 7), uint32] */
}

def @func_3870() -> (Tensor[(1050, 7), float32], Tensor[(1050, 1), float64]) {
  %646 = @func_2955() /* ty=(Tensor[(1050, 1), float64],) */;
  %647 = @func_1178() /* ty=Tensor[(1050, 7), float32] */;
  %648 = %646.0;
  (%647, %648)
}

def @func_5013() -> (Tensor[(1, 16, 1), float64],) {
  @func_5011() /* ty=(Tensor[(1, 16, 1), float64],) */
}

def @func_3519() -> (Tensor[(1050, 7), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) {
  %649 = @func_981() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 7), float64]) */;
  %650 = %649.1;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(1050, 7), float64] */;
  %652 = @func_1784() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) */;
  %653 = cast(%650, dtype="float32") /* ty=Tensor[(1050, 7), float32] */;
  %654 = log10(%651) /* ty=Tensor[(1050, 7), float64] */;
  %655 = %652.2;
  %656 = rsqrt(%653) /* ty=Tensor[(1050, 7), float32] */;
  (%654, %655, %656)
}

def @func_1786() -> (Tensor[(1050, 1), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) {
  @func_1784() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), float32], Tensor[(1050, 7), float32]) */
}

def @func_4495() -> Tensor[(9450), float64] {
  %658 = fn () -> Tensor[(9450), float64] {
    %657 = @func_1705() /* ty=(Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) */;
    %657.2
  };
  %658() /* ty=Tensor[(9450), float64] */
}

def @main(%var_5097: Tensor[(1050, 16), float64]) -> (Tensor[(1050, ?), bool], Tensor[(1050, 16), bool]) {
  %659 = @func_4240() /* ty=(Tensor[(16, 3, 8), bool], Tensor[(1050, 1), float64]) */;
  %660 = %659.1;
  %661 = cast(%660, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %662 = log(%661) /* ty=Tensor[(1050, 1), float64] */;
  %663 = cast(%660, dtype="bool") /* ty=Tensor[(1050, 1), bool] */;
  %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(2), int32] */;
  %665 = cast(%662, dtype="bool") /* ty=Tensor[(1050, 1), bool] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %667 = cast(%662, dtype="bool") /* ty=Tensor[(1050, 1), bool] */;
  %668 = cast(%var_5097, dtype="bool") /* ty=Tensor[(1050, 16), bool] */;
  %669 = greater(%665, %666) /* ty=Tensor[(1050, ?), bool] */;
  %670 = logical_and(%667, %668) /* ty=Tensor[(1050, 16), bool] */;
  (%669, %670)
}

def @func_752() -> (Tensor[(1050, 7), float64],) {
  %671 = @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */;
  %672 = %671.0;
  (%672,)
}

def @func_4886() -> (Tensor[(1050, 1), float64],) {
  @func_4884() /* ty=(Tensor[(1050, 1), float64],) */
}

def @func_634(%var_613: Tensor[(9450), float64]) -> (Tensor[(1050, 1), float64], Tensor[(1050, 1), float32], Tensor[(1050, 1), float64], Tensor[(9450), float64], Tensor[(1, 16, 1), float64], Tensor[(10500), float64], Tensor[(1050, 6), bool]) {
  %673 = @func_288() /* ty=(Tensor[(15, 7, 2), uint64], Tensor[(7, 15, 10), bool], Tensor[(1050, 1), float64]) */;
  %674 = %673.2;
  %675 = cast(%674, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %676 = cast(%674, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
  %677 = cast(%var_613, dtype="float64") /* ty=Tensor[(9450), float64] */;
  %678 = reshape(%677, newshape=[1050, 9]) /* ty=Tensor[(1050, 9), float64] */;
  %679 = @func_395(%678) /* ty=(Tensor[(1050, 6), int32], Tensor[(1050, 9), uint16], Tensor[(1050, 1), float64], Tensor[(1050, 6), float32], Tensor[(1050, 1), float64], Tensor[(1050, 6), bool]) */;
  %680 = cast(meta[relay.Constant][33] /* ty=Tensor[(10500), float64] */, dtype="float64") /* ty=Tensor[(10500), float64] */;
  %681 = reshape(%680, newshape=[10500]) /* ty=Tensor[(10500), float64] */;
  %682 = @func_505(%681) /* ty=(Tensor[(1050, 1), float64], Tensor[(7, 15, 10), bool], Tensor[(15, 7, 2), uint64], Tensor[(10500), float64], Tensor[(7, 15, 10), bool], Tensor[(1, 16, 1), float64], Tensor[(8, 2), float64]) */;
  %683 = cast(%var_613, dtype="float64") /* ty=Tensor[(9450), float64] */;
  %684 = reshape(%683, newshape=[1050, 9]) /* ty=Tensor[(1050, 9), float64] */;
  %685 = @func_395(%684) /* ty=(Tensor[(1050, 6), int32], Tensor[(1050, 9), uint16], Tensor[(1050, 1), float64], Tensor[(1050, 6), float32], Tensor[(1050, 1), float64], Tensor[(1050, 6), bool]) */;
  %686 = rsqrt(%675) /* ty=Tensor[(1050, 1), float64] */;
  %687 = erf(%676) /* ty=Tensor[(1050, 1), float32] */;
  %688 = %679.4;
  %689 = %682.5;
  %690 = %685.5;
  (%686, %687, %688, %var_613, %689, meta[relay.Constant][33] /* ty=Tensor[(10500), float64] */, %690)
}

def @func_3546() -> (Tensor[(9450), float64], Tensor[(1050, 7), float32]) {
  %691 = @func_1705() /* ty=(Tensor[(1050, 7), float64], Tensor[(9450), float64], Tensor[(9450), float64]) */;
  %692 = @func_1024() /* ty=(Tensor[(1050, 1), float64], Tensor[(10500), float64], Tensor[(1050, 7), float32]) */;
  %693 = %691.2;
  %694 = %692.2;
  (%693, %694)
}

def @func_2956() -> (Tensor[(1050, 1), float64],) {
  %697 = fn () -> (Tensor[(1050, 1), float64],) {
    %695 = @func_1213() /* ty=(Tensor[(1050, 1), float64], Tensor[(1050, 7), bool]) */;
    %696 = %695.0;
    (%696,)
  };
  %697() /* ty=(Tensor[(1050, 1), float64],) */
}

def @func_2881() -> (Tensor[(1050, 7), bool],) {
  %700 = fn () -> (Tensor[(1050, 7), bool],) {
    %698 = @func_1272() /* ty=(Tensor[(10500), float64], Tensor[(1, 16, 1), float64], Tensor[(16), float64], Tensor[(1050, 7), bool]) */;
    %699 = %698.3;
    (%699,)
  };
  %700() /* ty=(Tensor[(1050, 7), bool],) */
}

def @func_575() -> (Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) {
  @func_573() /* ty=(Tensor[(1050, 7), float64], Tensor[(1050, 1), float64]) */
}

def @func_107(%var_93: Tensor[(1, 16, 1), float64]) -> (Tensor[(1, 16, 1), float64],) {
  %701 = cast(%var_93, dtype="float64") /* ty=Tensor[(1, 16, 1), float64] */;
  %702 = erf(%701) /* ty=Tensor[(1, 16, 1), float64] */;
  (%702,)
}

def @func_74(%var_72: Tensor[(7, 15, 10), float64], %var_73: Tensor[(7, 15, 10), float64]) -> (Tensor[(7, 15, 10), bool], Tensor[(7, 15, 10), bool]) {
  %715 = fn (%var_47: Tensor[(7, 15, 10), float64], %var_67: Tensor[(7, 15, 10), float64]) -> (Tensor[(7, 15, 10), bool], Tensor[(7, 15, 10), bool]) {
    %703 = cast(%var_47, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
    %704 = rsqrt(%703) /* ty=Tensor[(7, 15, 10), float64] */;
    %705 = cast(%var_47, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
    %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
    %707 = cast(%704, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
    %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %709 = cast(%var_67, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
    %710 = shape_of(%var_47, dtype="int32") /* ty=Tensor[(3), int32] */;
    %711 = cast(%var_47, dtype="bool") /* ty=Tensor[(7, 15, 10), bool] */;
    %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %713 = greater(%707, %708) /* ty=Tensor[(7, 15, 10), bool] */;
    %714 = not_equal(%711, %712) /* ty=Tensor[(7, 15, 10), bool] */;
    (%713, %714)
  };
  %715(%var_72, %var_73) /* ty=(Tensor[(7, 15, 10), bool], Tensor[(7, 15, 10), bool]) */
}

def @func_397(%var_396: Tensor[(1050, 9), float64]) -> (Tensor[(1050, 6), int32], Tensor[(1050, 9), uint16], Tensor[(1050, 1), float64], Tensor[(1050, 6), float32], Tensor[(1050, 1), float64], Tensor[(1050, 6), bool]) {
  %742 = fn (%var_315: Tensor[(1050, 9), float64]) -> (Tensor[(1050, 6), int32], Tensor[(1050, 9), uint16], Tensor[(1050, 1), float64], Tensor[(1050, 6), float32], Tensor[(1050, 1), float64], Tensor[(1050, 6), bool]) {
    %716 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
    %717 = cast(%716, dtype="int32") /* ty=Tensor[(1050, 1), int32] */;
    %718 = cast(meta[relay.Constant][34] /* ty=Tensor[(1050, 6), float64] */, dtype="int32") /* ty=Tensor[(1050, 6), int32] */;
    %719 = cast(%716, dtype="uint16") /* ty=Tensor[(1050, 1), uint16] */;
    %720 = cast(%var_315, dtype="uint16") /* ty=Tensor[(1050, 9), uint16] */;
    %721 = cast(meta[relay.Constant][34] /* ty=Tensor[(1050, 6), float64] */, dtype="float32") /* ty=Tensor[(1050, 6), float32] */;
    %722 = cos(%721) /* ty=Tensor[(1050, 6), float32] */;
    %723 = cast(meta[relay.Constant][34] /* ty=Tensor[(1050, 6), float64] */, dtype="float32") /* ty=Tensor[(1050, 6), float32] */;
    %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(2), int32] */;
    %725 = cast(%722, dtype="float32") /* ty=Tensor[(1050, 6), float32] */;
    %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %727 = cast(meta[relay.Constant][34] /* ty=Tensor[(1050, 6), float64] */, dtype="uint16") /* ty=Tensor[(1050, 6), uint16] */;
    %728 = shape_of(%722, dtype="int32") /* ty=Tensor[(2), int32] */;
    %729 = cast(%722, dtype="uint16") /* ty=Tensor[(1050, 6), uint16] */;
    %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %731 = add(%729, %730) /* ty=Tensor[(1050, 6), uint16] */;
    %732 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050, 6), uint16] */, dtype="bool") /* ty=Tensor[(1050, 6), bool] */;
    %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(2), int32] */;
    %734 = cast(%731, dtype="bool") /* ty=Tensor[(1050, 6), bool] */;
    %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %736 = logical_xor(%717, %718) /* ty=Tensor[(1050, 6), int32] */;
    %737 = bitwise_and(%719, %720) /* ty=Tensor[(1050, 9), uint16] */;
    %738 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
    %739 = floor_mod(%725, %726) /* ty=Tensor[(1050, 6), float32] */;
    %740 = @func_302() /* ty=Tensor[(1050, 1), float64] */;
    %741 = less(%734, %735) /* ty=Tensor[(1050, 6), bool] */;
    (%736, %737, %738, %739, %740, %741)
  };
  %742(%var_396) /* ty=(Tensor[(1050, 6), int32], Tensor[(1050, 9), uint16], Tensor[(1050, 1), float64], Tensor[(1050, 6), float32], Tensor[(1050, 1), float64], Tensor[(1050, 6), bool]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen535/build/output.py", line 1814, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:29:23] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

