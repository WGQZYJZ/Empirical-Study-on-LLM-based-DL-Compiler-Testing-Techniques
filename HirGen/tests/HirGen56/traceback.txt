==========mod==========
#[version = "0.0.5"]
def @func_3223(%var_3179: Tensor[(16, 7, 16), float64], %var_3183: Tensor[(252), int16], %var_3185: Tensor[(16, 7, 16), float64]) -> (Tensor[(15, 3, 6), float64], Tensor[(252), int16], Tensor[(16, 7, 16), uint16], Tensor[(16, 7, 16), float32], Tensor[(3, 12, 3), float32], Tensor[(90), uint8], Tensor[(504), uint16], Tensor[(90), uint8]) {
  %0 = cast(%var_3183, dtype="int16") /* ty=Tensor[(252), int16] */;
  %1 = reshape(%0, newshape=[3, 12, 7]) /* ty=Tensor[(3, 12, 7), int16] */;
  %2 = @func_1697(%1) /* ty=(Tensor[(3, 12, 7), int16], Tensor[(3, 12, 7), float32], Tensor[(15, 3, 6), float64], Tensor[(270), float64]) */;
  %3 = cast(%var_3179, dtype="float64") /* ty=Tensor[(16, 7, 16), float64] */;
  %4 = acos(%3) /* ty=Tensor[(16, 7, 16), float64] */;
  %5 = cast(%var_3185, dtype="uint16") /* ty=Tensor[(16, 7, 16), uint16] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="uint16") /* ty=Tensor[(16, 7, 16), uint16] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %9 = cast(%4, dtype="float32") /* ty=Tensor[(16, 7, 16), float32] */;
  %10 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(504), uint16] */, dtype="uint16") /* ty=Tensor[(504), uint16] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(90), uint8] */, dtype="uint8") /* ty=Tensor[(90), uint8] */;
  %13 = reshape(%11, newshape=[7, 12, 6]) /* ty=Tensor[(7, 12, 6), uint16] */;
  %14 = reshape(%12, newshape=[90]) /* ty=Tensor[(90), uint8] */;
  %15 = @func_1365(%13, %14) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(90), uint8], Tensor[(7, 12, 6), float32]) */;
  %16 = %2.2;
  %17 = left_shift(%7, %8) /* ty=Tensor[(16, 7, 16), uint16] */;
  %18 = atanh(%9) /* ty=Tensor[(16, 7, 16), float32] */;
  %19 = %10.0;
  %20 = %15.1;
  (%16, %var_3183, %17, %18, %19, %20, meta[relay.Constant][0] /* ty=Tensor[(504), uint16] */, meta[relay.Constant][1] /* ty=Tensor[(90), uint8] */)
}

def @func_3094(%var_3089: Tensor[(10, 11, 10), int64]) -> Tensor[(10, 11, 10), int64] {
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 11, 10), int64] */, dtype="int64") /* ty=Tensor[(10, 11, 10), int64] */;
  %22 = shape_of(%var_3089, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%var_3089, dtype="int64") /* ty=Tensor[(10, 11, 10), int64] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%23, %24) /* ty=Tensor[(10, 11, 10), int64] */
}

def @func_3740(%var_3726: Tensor[(378), float64]) -> (Tensor[(3, 12, 3), float32], Tensor[(6, 8, 9), float32], Tensor[(378), float64], Tensor[(432, 1), float32]) {
  %25 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %26 = cast(meta[relay.Constant][3] /* ty=Tensor[(432, 1), float32] */, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
  %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(432, 1), float32] */, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
  %28 = cast(%var_3726, dtype="float64") /* ty=Tensor[(378), float64] */;
  %29 = reshape(%26, newshape=[6, 8, 9]) /* ty=Tensor[(6, 8, 9), float32] */;
  %30 = reshape(%27, newshape=[6, 8, 9]) /* ty=Tensor[(6, 8, 9), float32] */;
  %31 = reshape(%28, newshape=[378]) /* ty=Tensor[(378), float64] */;
  %32 = @func_2427(%29, %30, %31) /* ty=(Tensor[(6, 8, 9), float32], Tensor[(3, 14, 9), float64], Tensor[(378), float64]) */;
  %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(432, 1), float32] */, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
  %34 = %25.0;
  %35 = %32.0;
  %36 = log(%33) /* ty=Tensor[(432, 1), float32] */;
  (%34, %35, %var_3726, %36)
}

def @func_5809(%var_5791: Tensor[(11, 8, 14), float64]) -> (Tensor[(11, 8, 14), bool], Tensor[(2240), float64], Tensor[(11, 8, 14), float64]) {
  %37 = @func_5191() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(11, 8, 14), float64], Tensor[(1232), float64], Tensor[(3, 12, 3), float64]) */;
  %38 = %37.1;
  %39 = cast(%var_5791, dtype="bool") /* ty=Tensor[(11, 8, 14), bool] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%38, dtype="bool") /* ty=Tensor[(11, 8, 14), bool] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %43 = cast(meta[relay.Constant][4] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %44 = cast(meta[relay.Constant][4] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
  %45 = reshape(%43, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %46 = reshape(%44, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %47 = @func_2021(%45, %46) /* ty=(Tensor[(16, 10, 14), float32],) */;
  %48 = %47.0;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(16, 10, 14), float64] */;
  %50 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2240), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %51 = cast(meta[relay.Constant][4] /* ty=Tensor[(2240), float32] */, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?), float64] */;
  %53 = cast(%38, dtype="float64") /* ty=Tensor[(11, 8, 14), float64] */;
  %54 = not_equal(%41, %42) /* ty=Tensor[(11, 8, 14), bool] */;
  %55 = power(%51, %52) /* ty=Tensor[(2240), float64] */;
  %56 = asinh(%53) /* ty=Tensor[(11, 8, 14), float64] */;
  (%54, %55, %56)
}

def @func_3508() -> (Tensor[(3, 12, 3), float64],) {
  %57 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %58 = %57.0;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %60 = asin(%59) /* ty=Tensor[(3, 12, 3), float64] */;
  (%60,)
}

def @func_5756(%var_5702: Tensor[(48), int32], %var_5704: Tensor[(6, 45), float64]) -> (Tensor[(3, 90), float64], Tensor[(336), uint8], Tensor[(6, 45), float64], Tensor[(120), uint64], Tensor[(10, 9, 48), int32], Tensor[(10, 9, 1), float64]) {
  %61 = cast(%var_5702, dtype="int32") /* ty=Tensor[(48), int32] */;
  %62 = cast(meta[relay.Constant][5] /* ty=Tensor[(336), uint8] */, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %63 = cast(%var_5704, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %64 = reshape(%61, newshape=[48]) /* ty=Tensor[(48), int32] */;
  %65 = reshape(%62, newshape=[4, 84]) /* ty=Tensor[(4, 84), uint8] */;
  %66 = reshape(%63, newshape=[3, 90]) /* ty=Tensor[(3, 90), float64] */;
  %67 = @func_5325(%64, %65, %66) /* ty=(Tensor[(10, 9, 1), float32], Tensor[(10, 4, 15), bool], Tensor[(48), int32], Tensor[(4, 84), uint8], Tensor[(3, 90), float64]) */;
  %68 = @func_3860() /* ty=(Tensor[(11, 14, 14), int32], Tensor[(52, 2), float64], Tensor[(120), uint64]) */;
  %69 = @func_4213() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %70 = %69.0;
  %71 = cast(%70, dtype="bool") /* ty=Tensor[(10, 9, 1), bool] */;
  %72 = cast(%var_5702, dtype="bool") /* ty=Tensor[(48), bool] */;
  %73 = logical_and(%71, %72) /* ty=Tensor[(10, 9, 48), bool] */;
  %74 = @func_4141() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %75 = %74.0;
  %76 = cast(%73, dtype="int32") /* ty=Tensor[(10, 9, 48), int32] */;
  %77 = cast(%75, dtype="int32") /* ty=Tensor[(10, 9, 1), int32] */;
  %78 = cast(%75, dtype="float64") /* ty=Tensor[(10, 9, 1), float64] */;
  %79 = %67.4;
  %80 = %68.2;
  %81 = multiply(%76, %77) /* ty=Tensor[(10, 9, 48), int32] */;
  %82 = atanh(%78) /* ty=Tensor[(10, 9, 1), float64] */;
  (%79, meta[relay.Constant][5] /* ty=Tensor[(336), uint8] */, %var_5704, %80, %81, %82)
}

def @func_694(%var_689: float64) -> Tensor[(14, 1, 9), bool] {
  %83 = cast(%var_689, dtype="bool") /* ty=bool */;
  %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 1, 9), float64] */, dtype="bool") /* ty=Tensor[(14, 1, 9), bool] */;
  greater_equal(%83, %84) /* ty=Tensor[(14, 1, 9), bool] */
}

def @func_5639(%var_5634: Tensor[(1, 2, 10), float32]) -> Tensor[(10, 2, 10), float32] {
  %85 = cast(%var_5634, dtype="float32") /* ty=Tensor[(1, 2, 10), float32] */;
  %86 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 10), float32] */;
  floor_divide(%85, %86) /* ty=Tensor[(10, 2, 10), float32] */
}

def @func_4111(%var_4073: int16, %var_4107: Tensor[(120), uint64]) -> (Tensor[(10, 9, 1), float64], Tensor[(3, 12, 3), float64], Tensor[(15, 3, 6), float64], int16, Tensor[(7), int16], Tensor[(3, 12, 3), float64], Tensor[(6, 12, 15), float32], Tensor[(1664), float64], Tensor[(120), uint64]) {
  %87 = @func_3771() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %88 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %89 = cast(%var_4073, dtype="int16") /* ty=int16 */;
  %90 = cast(meta[relay.Constant][8] /* ty=Tensor[(7), int16] */, dtype="int16") /* ty=Tensor[(7), int16] */;
  %91 = reshape(%89, newshape=[]) /* ty=int16 */;
  %92 = reshape(%90, newshape=[1, 7]) /* ty=Tensor[(1, 7), int16] */;
  %93 = @func_767(%91, %92) /* ty=(Tensor[(1, 7), int16], Tensor[(15, 3, 6), float64], Tensor[(3, 90), float64]) */;
  %94 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %95 = %87.0;
  %96 = cast(%95, dtype="uint8") /* ty=Tensor[(10, 9, 1), uint8] */;
  %97 = reshape(%96, newshape=[6, 1, 15]) /* ty=Tensor[(6, 1, 15), uint8] */;
  %98 = @func_406(%97) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(6, 12, 15), float32]) */;
  %99 = %98.1;
  %100 = cast(%99, dtype="float32") /* ty=Tensor[(6, 12, 15), float32] */;
  %101 = cast(%var_4107, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %102 = cast(%var_4107, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %103 = reshape(%101, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), uint64] */;
  %104 = reshape(%102, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), uint64] */;
  %105 = @func_3593(%103, %104) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(16, 8, 13), float64], Tensor[(52, 2), float64], Tensor[(1664), float64]) */;
  %106 = %88.0;
  %107 = %93.1;
  %108 = %94.0;
  %109 = atan(%100) /* ty=Tensor[(6, 12, 15), float32] */;
  %110 = %105.3;
  (%95, %106, %107, %var_4073, meta[relay.Constant][8] /* ty=Tensor[(7), int16] */, %108, %109, %110, %var_4107)
}

def @func_2147(%var_2115: Tensor[(4, 14, 6), uint8], %var_2116: Tensor[(4, 14, 6), uint8], %var_2136: Tensor[(30, 9), float64], %var_2144: float64) -> (Tensor[(4, 14, 6), bool], Tensor[(15, 3, 6), float64], Tensor[(30, 9), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 1, 9), bool], float64) {
  %111 = cast(%var_2116, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
  %112 = shape_of(%var_2115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_2115, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = cast(%var_2136, dtype="float64") /* ty=Tensor[(30, 9), float64] */;
  %116 = cast(%var_2136, dtype="float64") /* ty=Tensor[(30, 9), float64] */;
  %117 = reshape(%115, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %118 = reshape(%116, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %119 = cast(%var_2116, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %120 = log(%119) /* ty=Tensor[(4, 14, 6), float32] */;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %122 = cast(%var_2144, dtype="float64") /* ty=float64 */;
  %123 = reshape(%122, newshape=[]) /* ty=float64 */;
  %124 = greater_equal(%113, %114) /* ty=Tensor[(4, 14, 6), bool] */;
  %125 = @func_568(%117, %118) /* ty=Tensor[(15, 3, 6), float64] */;
  %126 = atan(%121) /* ty=Tensor[(4, 14, 6), float32] */;
  %127 = @func_694(%123) /* ty=Tensor[(14, 1, 9), bool] */;
  (%124, %125, %var_2136, %126, %127, %var_2144)
}

def @func_5253(%var_5227: Tensor[(3, 12, 3), float64]) -> (Tensor[(3, 12, 3), bool],) {
  %128 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %129 = %128.0;
  %130 = cast(%var_5227, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %134 = equal(%132, %133) /* ty=Tensor[(3, 12, 3), bool] */;
  (%134,)
}

def @func_5622(%var_5589: Tensor[(252), int16], %var_5613: Tensor[(7, 16, 11), float64]) -> (Tensor[(7, 16, 11), bool], Tensor[(16, 7, 16), float32], Tensor[(252), int16], Tensor[(32, 56), float64], Tensor[(7, 16, 11), int16]) {
  %135 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 16, 11), int16] */, dtype="bool") /* ty=Tensor[(7, 16, 11), bool] */;
  %136 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(7, 16, 11), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 16, 11), int16] */, dtype="bool") /* ty=Tensor[(7, 16, 11), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %139 = cast(meta[relay.Constant][11] /* ty=Tensor[(32, 56), float64] */, dtype="float64") /* ty=Tensor[(32, 56), float64] */;
  %140 = cast(%var_5589, dtype="int16") /* ty=Tensor[(252), int16] */;
  %141 = cast(meta[relay.Constant][11] /* ty=Tensor[(32, 56), float64] */, dtype="float64") /* ty=Tensor[(32, 56), float64] */;
  %142 = reshape(%139, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), float64] */;
  %143 = reshape(%140, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %144 = reshape(%141, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), float64] */;
  %145 = @func_3223(%142, %143, %144) /* ty=(Tensor[(15, 3, 6), float64], Tensor[(252), int16], Tensor[(16, 7, 16), uint16], Tensor[(16, 7, 16), float32], Tensor[(3, 12, 3), float32], Tensor[(90), uint8], Tensor[(504), uint16], Tensor[(90), uint8]) */;
  %146 = cast(meta[relay.Constant][11] /* ty=Tensor[(32, 56), float64] */, dtype="float64") /* ty=Tensor[(32, 56), float64] */;
  %147 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 16, 11), int16] */, dtype="float64") /* ty=Tensor[(7, 16, 11), float64] */;
  %148 = tan(%147) /* ty=Tensor[(7, 16, 11), float64] */;
  %149 = cast(%var_5613, dtype="int16") /* ty=Tensor[(7, 16, 11), int16] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%148, dtype="int16") /* ty=Tensor[(7, 16, 11), int16] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %153 = less(%137, %138) /* ty=Tensor[(7, 16, 11), bool] */;
  %154 = %145.3;
  %155 = asin(%146) /* ty=Tensor[(32, 56), float64] */;
  %156 = bitwise_or(%151, %152) /* ty=Tensor[(7, 16, 11), int16] */;
  (%153, %154, %var_5589, %155, %156)
}

def @func_568(%var_547: Tensor[(15, 3, 6), float64], %var_548: Tensor[(15, 3, 6), float64]) -> Tensor[(15, 3, 6), float64] {
  %157 = cast(%var_548, dtype="float64") /* ty=Tensor[(15, 3, 6), float64] */;
  %158 = shape_of(%var_547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%var_547, dtype="float64") /* ty=Tensor[(15, 3, 6), float64] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%159, %160) /* ty=Tensor[(15, 3, 6), float64] */
}

def @func_3147() -> (Tensor[(3, 12, 3), float32],) {
  %161 = @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */;
  %162 = %161.0;
  (%162,)
}

def @func_3972(%var_3957: Tensor[(630), int32]) -> (Tensor[(3, 12, 3), float64], Tensor[(9, 7, 10), int32], Tensor[(630), int32], Tensor[(3, 12, 3), float32]) {
  %163 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %164 = cast(%var_3957, dtype="int32") /* ty=Tensor[(630), int32] */;
  %165 = reshape(%164, newshape=[9, 7, 10]) /* ty=Tensor[(9, 7, 10), int32] */;
  %166 = @func_1735(%165) /* ty=(Tensor[(9, 7, 10), int32],) */;
  %167 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %168 = %163.0;
  %169 = %166.0;
  %170 = %167.0;
  (%168, %169, %var_3957, %170)
}

def @func_5075() -> Tensor[(3, 12, 3), float32] {
  %171 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %171.0
}

def @func_3664() -> (Tensor[(3, 12, 3), float64], Tensor[(15, 3, 6), float64], Tensor[(6, 45), float64], Tensor[(600), float64]) {
  %172 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 45), float64] */, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %173 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 45), float64] */, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %174 = reshape(%172, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %175 = reshape(%173, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %176 = @func_3567() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) */;
  %177 = %176.2;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(600), float64] */;
  %179 = @func_3525() /* ty=Tensor[(3, 12, 3), float64] */;
  %180 = @func_568(%174, %175) /* ty=Tensor[(15, 3, 6), float64] */;
  %181 = rsqrt(%178) /* ty=Tensor[(600), float64] */;
  (%179, %180, meta[relay.Constant][12] /* ty=Tensor[(6, 45), float64] */, %181)
}

def @func_5572() -> Tensor[(10, 9, ?), bool] {
  %182 = @func_4664() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float32], Tensor[(432), float32], Tensor[(10, 9, ?), bool]) */;
  %182.5
}

def @func_5418(%var_5412: Tensor[(10, 4, 15), bool]) -> (Tensor[(10, 4, 15), bool],) {
  %183 = @func_3567() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) */;
  %184 = %183.1;
  %185 = cast(%var_5412, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%184, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %189 = logical_or(%187, %188) /* ty=Tensor[(10, 4, 15), bool] */;
  (%189,)
}

def @func_4213() -> (Tensor[(10, 9, 1), float64],) {
  %190 = @func_4141() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %191 = %190.0;
  (%191,)
}

def @func_2021(%var_2014: Tensor[(16, 10, 14), float32], %var_2015: Tensor[(16, 10, 14), float32]) -> (Tensor[(16, 10, 14), float32],) {
  %192 = cast(%var_2015, dtype="float32") /* ty=Tensor[(16, 10, 14), float32] */;
  %193 = shape_of(%var_2014, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%var_2014, dtype="float32") /* ty=Tensor[(16, 10, 14), float32] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %196 = mod(%194, %195) /* ty=Tensor[(16, 10, 14), float32] */;
  (%196,)
}

def @func_5163(%var_5136: Tensor[(11, 11, 7), float64]) -> (Tensor[(11, 11, 7), float64], Tensor[(11, 11, 7), float64]) {
  %197 = cast(%var_5136, dtype="float64") /* ty=Tensor[(11, 11, 7), float64] */;
  %198 = cast(%var_5136, dtype="float64") /* ty=Tensor[(11, 11, 7), float64] */;
  %199 = asin(%197) /* ty=Tensor[(11, 11, 7), float64] */;
  %200 = atan(%198) /* ty=Tensor[(11, 11, 7), float64] */;
  (%199, %200)
}

def @func_2742(%var_2728: Tensor[(16, 2, 16), int32], %var_2729: Tensor[(16, 2, 16), int32]) -> (Tensor[(16, 2, 16), bool], Tensor[(16, 2, 16), float32]) {
  %201 = cast(%var_2729, dtype="bool") /* ty=Tensor[(16, 2, 16), bool] */;
  %202 = shape_of(%var_2728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%var_2728, dtype="bool") /* ty=Tensor[(16, 2, 16), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %205 = cast(%var_2728, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
  %206 = shape_of(%var_2729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%var_2729, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %209 = not_equal(%203, %204) /* ty=Tensor[(16, 2, 16), bool] */;
  %210 = floor_mod(%207, %208) /* ty=Tensor[(16, 2, 16), float32] */;
  (%209, %210)
}

def @func_4492(%var_4470: Tensor[(1792), float64]) -> (Tensor[(3, 12, 3), float32], Tensor[(504), uint16], Tensor[(1792), float64], Tensor[(252), int16]) {
  %211 = @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */;
  %212 = cast(%var_4470, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %213 = cast(meta[relay.Constant][13] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %214 = cast(%var_4470, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %215 = reshape(%212, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), float64] */;
  %216 = reshape(%213, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %217 = reshape(%214, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), float64] */;
  %218 = @func_3223(%215, %216, %217) /* ty=(Tensor[(15, 3, 6), float64], Tensor[(252), int16], Tensor[(16, 7, 16), uint16], Tensor[(16, 7, 16), float32], Tensor[(3, 12, 3), float32], Tensor[(90), uint8], Tensor[(504), uint16], Tensor[(90), uint8]) */;
  %219 = %211.0;
  %220 = %218.6;
  (%219, %220, %var_4470, meta[relay.Constant][13] /* ty=Tensor[(252), int16] */)
}

def @func_4308(%var_4281: Tensor[(3, 12, 3), float64]) -> (Tensor[(3, 12, 3), bool], Tensor[(52, 2), float64]) {
  %221 = @func_3567() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) */;
  %222 = %221.0;
  %223 = cast(%var_4281, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%222, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %227 = @func_3860() /* ty=(Tensor[(11, 14, 14), int32], Tensor[(52, 2), float64], Tensor[(120), uint64]) */;
  %228 = less_equal(%225, %226) /* ty=Tensor[(3, 12, 3), bool] */;
  %229 = %227.1;
  (%228, %229)
}

def @func_3860() -> (Tensor[(11, 14, 14), int32], Tensor[(52, 2), float64], Tensor[(120), uint64]) {
  %230 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 14, 14), int32] */, dtype="int32") /* ty=Tensor[(11, 14, 14), int32] */;
  %231 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(11, 14, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 14, 14), int32] */, dtype="int32") /* ty=Tensor[(11, 14, 14), int32] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %234 = cast(meta[relay.Constant][16] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %235 = cast(meta[relay.Constant][16] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %236 = reshape(%234, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), uint64] */;
  %237 = reshape(%235, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), uint64] */;
  %238 = @func_3593(%236, %237) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(16, 8, 13), float64], Tensor[(52, 2), float64], Tensor[(1664), float64]) */;
  %239 = logical_xor(%232, %233) /* ty=Tensor[(11, 14, 14), int32] */;
  %240 = %238.2;
  (%239, %240, meta[relay.Constant][16] /* ty=Tensor[(120), uint64] */)
}

def @func_6118(%var_6094: Tensor[(12, 6, 13), float32]) -> (Tensor[(12, 6, 13), float32], Tensor[(12, 6, 13), float32], Tensor[(10, 2, 10), float32], Tensor[(20), float32]) {
  %241 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 6, 13), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 13), float32] */;
  %242 = shape_of(%var_6094, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%var_6094, dtype="float32") /* ty=Tensor[(12, 6, 13), float32] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %245 = cast(%var_6094, dtype="float32") /* ty=Tensor[(12, 6, 13), float32] */;
  %246 = cast(meta[relay.Constant][18] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %247 = reshape(%246, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), float32] */;
  %248 = divide(%243, %244) /* ty=Tensor[(12, 6, 13), float32] */;
  %249 = cos(%245) /* ty=Tensor[(12, 6, 13), float32] */;
  %250 = @func_5639(%247) /* ty=Tensor[(10, 2, 10), float32] */;
  (%248, %249, %250, meta[relay.Constant][18] /* ty=Tensor[(20), float32] */)
}

def @func_5127(%var_5114: Tensor[(11, 8, 14), float64]) -> (Tensor[(11, 8, 14), float64],) {
  %251 = cast(%var_5114, dtype="float64") /* ty=Tensor[(11, 8, 14), float64] */;
  %252 = tan(%251) /* ty=Tensor[(11, 8, 14), float64] */;
  (%252,)
}

def @func_5023() -> Tensor[(3, 12, 3), float64] {
  %253 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  acosh(%255) /* ty=Tensor[(3, 12, 3), float64] */
}

def @func_2427(%var_2408: Tensor[(6, 8, 9), float32], %var_2409: Tensor[(6, 8, 9), float32], %var_2424: Tensor[(378), float64]) -> (Tensor[(6, 8, 9), float32], Tensor[(3, 14, 9), float64], Tensor[(378), float64]) {
  %256 = cast(%var_2409, dtype="bool") /* ty=Tensor[(6, 8, 9), bool] */;
  %257 = shape_of(%var_2408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%var_2408, dtype="bool") /* ty=Tensor[(6, 8, 9), bool] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %260 = less(%258, %259) /* ty=Tensor[(6, 8, 9), bool] */;
  %261 = cast(%260, dtype="float32") /* ty=Tensor[(6, 8, 9), float32] */;
  %262 = cast(%var_2424, dtype="float64") /* ty=Tensor[(378), float64] */;
  %263 = reshape(%262, newshape=[3, 14, 9]) /* ty=Tensor[(3, 14, 9), float64] */;
  %264 = log(%261) /* ty=Tensor[(6, 8, 9), float32] */;
  %265 = @func_1527(%263) /* ty=Tensor[(3, 14, 9), float64] */;
  (%264, %265, %var_2424)
}

def @func_3408() -> Tensor[(3, 12, 3), float32] {
  %266 = @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */;
  %266.0
}

def @func_3567() -> (Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) {
  %267 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %268 = cast(meta[relay.Constant][19] /* ty=Tensor[(600), int8] */, dtype="int8") /* ty=Tensor[(600), int8] */;
  %269 = cast(meta[relay.Constant][19] /* ty=Tensor[(600), int8] */, dtype="int8") /* ty=Tensor[(600), int8] */;
  %270 = reshape(%268, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), int8] */;
  %271 = reshape(%269, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), int8] */;
  %272 = @func_1303(%270, %271) /* ty=(Tensor[(10, 4, 15), bool],) */;
  %273 = %267.0;
  %274 = %272.0;
  (%273, %274, meta[relay.Constant][19] /* ty=Tensor[(600), int8] */)
}

def @func_5325(%var_5310: Tensor[(48), int32], %var_5311: Tensor[(4, 84), uint8], %var_5312: Tensor[(3, 90), float64]) -> (Tensor[(10, 9, 1), float32], Tensor[(10, 4, 15), bool], Tensor[(48), int32], Tensor[(4, 84), uint8], Tensor[(3, 90), float64]) {
  %275 = @func_3982() /* ty=Tensor[(10, 9, 1), float64] */;
  %276 = cast(%275, dtype="float32") /* ty=Tensor[(10, 9, 1), float32] */;
  %277 = cast(%var_5310, dtype="int32") /* ty=Tensor[(48), int32] */;
  %278 = cast(%var_5311, dtype="uint8") /* ty=Tensor[(4, 84), uint8] */;
  %279 = cast(%var_5312, dtype="float64") /* ty=Tensor[(3, 90), float64] */;
  %280 = reshape(%277, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), int32] */;
  %281 = reshape(%278, newshape=[336]) /* ty=Tensor[(336), uint8] */;
  %282 = reshape(%279, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %283 = @func_4262(%280, %281, %282) /* ty=(Tensor[(12, 4, 9), bool], Tensor[(3, 12, 3), int16], Tensor[(108), float32], Tensor[(10, 4, 15), bool], Tensor[(600), int8], float64, Tensor[(12, 72), int16], Tensor[(336), uint8], Tensor[(270), float64], Tensor[(2, 8, 9), float64]) */;
  %284 = log2(%276) /* ty=Tensor[(10, 9, 1), float32] */;
  %285 = %283.3;
  (%284, %285, %var_5310, %var_5311, %var_5312)
}

def @func_2976(%var_2969: Tensor[(1, 8, 13), float64], %var_2970: Tensor[(16, 8, 13), float64]) -> Tensor[(16, 8, 13), float64] {
  %286 = cast(%var_2969, dtype="float64") /* ty=Tensor[(1, 8, 13), float64] */;
  %287 = cast(%var_2970, dtype="float64") /* ty=Tensor[(16, 8, 13), float64] */;
  power(%286, %287) /* ty=Tensor[(16, 8, 13), float64] */
}

def @func_3525() -> Tensor[(3, 12, 3), float64] {
  %288 = @func_3408() /* ty=Tensor[(3, 12, 3), float32] */;
  %289 = cast(%288, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  log(%289) /* ty=Tensor[(3, 12, 3), float64] */
}

def @func_3911(%var_3889: Tensor[(3, 12, 3), float32]) -> (Tensor[(600), float64], Tensor[(3, 12, 3), int16]) {
  %290 = @func_3664() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(15, 3, 6), float64], Tensor[(6, 45), float64], Tensor[(600), float64]) */;
  %291 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %292 = %291.0;
  %293 = cast(%var_3889, dtype="int16") /* ty=Tensor[(3, 12, 3), int16] */;
  %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%292, dtype="int16") /* ty=Tensor[(3, 12, 3), int16] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %297 = %290.3;
  %298 = maximum(%295, %296) /* ty=Tensor[(3, 12, 3), int16] */;
  (%297, %298)
}

def @func_5431() -> (Tensor[(10, 9, 1), float64],) {
  %299 = @func_3771() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %300 = %299.0;
  (%300,)
}

def @func_406(%var_344: Tensor[(6, 1, 15), uint8]) -> (Tensor[(6, 12, 15), float64], Tensor[(6, 12, 15), float32]) {
  %301 = cast(%var_344, dtype="uint8") /* ty=Tensor[(6, 1, 15), uint8] */;
  %302 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 12, 15), uint8] */, dtype="uint8") /* ty=Tensor[(6, 12, 15), uint8] */;
  %303 = logical_xor(%301, %302) /* ty=Tensor[(6, 12, 15), uint8] */;
  %304 = cast(%303, dtype="float64") /* ty=Tensor[(6, 12, 15), float64] */;
  %305 = log(%304) /* ty=Tensor[(6, 12, 15), float64] */;
  %306 = cast(%305, dtype="float64") /* ty=Tensor[(6, 12, 15), float64] */;
  %307 = cast(%var_344, dtype="float64") /* ty=Tensor[(6, 1, 15), float64] */;
  %308 = cast(%303, dtype="float32") /* ty=Tensor[(6, 12, 15), float32] */;
  %309 = divide(%306, %307) /* ty=Tensor[(6, 12, 15), float64] */;
  %310 = rsqrt(%308) /* ty=Tensor[(6, 12, 15), float32] */;
  (%309, %310)
}

def @func_5366() -> Tensor[(3, 12, 3), float64] {
  %311 = @func_5093() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 9, 1), float64]) */;
  %311.0
}

def @func_5437() -> Tensor[(10, 9, ?), bool] {
  @func_4411() /* ty=Tensor[(10, 9, ?), bool] */
}

def @func_1527(%var_1505: Tensor[(3, 14, 9), float64]) -> Tensor[(3, 14, 9), float64] {
  %312 = cast(%var_1505, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
  %313 = log2(%312) /* ty=Tensor[(3, 14, 9), float64] */;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
  %315 = rsqrt(%314) /* ty=Tensor[(3, 14, 9), float32] */;
  %316 = cast(%313, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%318, %319) /* ty=Tensor[(3, 14, 9), float64] */
}

def @func_4886(%var_4822: Tensor[(10, 16), float64], %var_4838: Tensor[(1, 104), float64], %var_4877: int16, %var_4878: Tensor[(7), int16]) -> (Tensor[(10, 16), float64], Tensor[(1, 104), float64], Tensor[(1664), float64], Tensor[(16, 8, 13), float32], Tensor[(3, 90), float64], int16, Tensor[(7), int16]) {
  %320 = cast(%var_4822, dtype="float64") /* ty=Tensor[(10, 16), float64] */;
  %321 = cast(%var_4838, dtype="float64") /* ty=Tensor[(1, 104), float64] */;
  %322 = cast(meta[relay.Constant][21] /* ty=Tensor[(1664), float64] */, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %323 = reshape(%321, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %324 = reshape(%322, newshape=[16, 8, 13]) /* ty=Tensor[(16, 8, 13), float64] */;
  %325 = @func_2976(%323, %324) /* ty=Tensor[(16, 8, 13), float64] */;
  %326 = cast(%325, dtype="float64") /* ty=Tensor[(16, 8, 13), float64] */;
  %327 = log10(%326) /* ty=Tensor[(16, 8, 13), float64] */;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(16, 8, 13), float32] */;
  %329 = cast(%var_4877, dtype="int16") /* ty=int16 */;
  %330 = cast(%var_4878, dtype="int16") /* ty=Tensor[(7), int16] */;
  %331 = reshape(%329, newshape=[]) /* ty=int16 */;
  %332 = reshape(%330, newshape=[1, 7]) /* ty=Tensor[(1, 7), int16] */;
  %333 = @func_767(%331, %332) /* ty=(Tensor[(1, 7), int16], Tensor[(15, 3, 6), float64], Tensor[(3, 90), float64]) */;
  %334 = rsqrt(%320) /* ty=Tensor[(10, 16), float64] */;
  %335 = acosh(%328) /* ty=Tensor[(16, 8, 13), float32] */;
  %336 = %333.2;
  (%334, %var_4838, meta[relay.Constant][21] /* ty=Tensor[(1664), float64] */, %335, %336, %var_4877, %var_4878)
}

def @func_767(%var_741: int16, %var_742: Tensor[(1, 7), int16]) -> (Tensor[(1, 7), int16], Tensor[(15, 3, 6), float64], Tensor[(3, 90), float64]) {
  %337 = cast(%var_741, dtype="int16") /* ty=int16 */;
  %338 = cast(%var_742, dtype="int16") /* ty=Tensor[(1, 7), int16] */;
  %339 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 90), float64] */, dtype="float64") /* ty=Tensor[(3, 90), float64] */;
  %340 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 90), float64] */, dtype="float64") /* ty=Tensor[(3, 90), float64] */;
  %341 = reshape(%339, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %342 = reshape(%340, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %343 = right_shift(%337, %338) /* ty=Tensor[(1, 7), int16] */;
  %344 = @func_568(%341, %342) /* ty=Tensor[(15, 3, 6), float64] */;
  (%343, %344, meta[relay.Constant][22] /* ty=Tensor[(3, 90), float64] */)
}

def @func_4141() -> (Tensor[(10, 9, 1), float64],) {
  %345 = @func_3982() /* ty=Tensor[(10, 9, 1), float64] */;
  (%345,)
}

def @func_4366(%var_4346: Tensor[(10, 9, 3), float64], %var_4351: Tensor[(10, 9, 3), float64]) -> (Tensor[(1664), float64], Tensor[(120), uint64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 1), float32]) {
  %346 = cast(meta[relay.Constant][23] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %347 = cast(meta[relay.Constant][23] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %348 = reshape(%346, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), uint64] */;
  %349 = reshape(%347, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), uint64] */;
  %350 = @func_3593(%348, %349) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(16, 8, 13), float64], Tensor[(52, 2), float64], Tensor[(1664), float64]) */;
  %351 = @func_4213() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %352 = %351.0;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(10, 9, 1), float64] */;
  %354 = asin(%353) /* ty=Tensor[(10, 9, 1), float64] */;
  %355 = cast(%354, dtype="float64") /* ty=Tensor[(10, 9, 1), float64] */;
  %356 = cast(%var_4346, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  %357 = power(%355, %356) /* ty=Tensor[(10, 9, 3), float64] */;
  %358 = cast(%var_4351, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %362 = cast(%354, dtype="float64") /* ty=Tensor[(10, 9, 1), float64] */;
  %363 = sigmoid(%362) /* ty=Tensor[(10, 9, 1), float64] */;
  %364 = cast(%363, dtype="float32") /* ty=Tensor[(10, 9, 1), float32] */;
  %365 = %350.3;
  %366 = mod(%360, %361) /* ty=Tensor[(10, 9, 3), float32] */;
  %367 = cos(%364) /* ty=Tensor[(10, 9, 1), float32] */;
  (%365, meta[relay.Constant][23] /* ty=Tensor[(120), uint64] */, %366, %367)
}

def @func_924(%var_865: Tensor[(2, 9, 3), float32]) -> (Tensor[(6, 12, 15), float64], Tensor[(90), uint8], Tensor[(15, 3, 6), float64], Tensor[(7), int16], Tensor[(2, 9, 3), bool]) {
  %368 = cast(meta[relay.Constant][24] /* ty=Tensor[(90), uint8] */, dtype="uint8") /* ty=Tensor[(90), uint8] */;
  %369 = reshape(%368, newshape=[6, 1, 15]) /* ty=Tensor[(6, 1, 15), uint8] */;
  %370 = @func_406(%369) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(6, 12, 15), float32]) */;
  %371 = cast(meta[relay.Constant][25] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %372 = cast(meta[relay.Constant][26] /* ty=Tensor[(7), int16] */, dtype="int16") /* ty=Tensor[(7), int16] */;
  %373 = reshape(%371, newshape=[]) /* ty=int16 */;
  %374 = reshape(%372, newshape=[1, 7]) /* ty=Tensor[(1, 7), int16] */;
  %375 = @func_767(%373, %374) /* ty=(Tensor[(1, 7), int16], Tensor[(15, 3, 6), float64], Tensor[(3, 90), float64]) */;
  %376 = cast(%var_865, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  %377 = asinh(%376) /* ty=Tensor[(2, 9, 3), float32] */;
  %378 = cast(%377, dtype="bool") /* ty=Tensor[(2, 9, 3), bool] */;
  %379 = cast(meta[relay.Constant][25] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %380 = %370.0;
  %381 = %375.1;
  %382 = not_equal(%378, %379) /* ty=Tensor[(2, 9, 3), bool] */;
  (%380, meta[relay.Constant][24] /* ty=Tensor[(90), uint8] */, %381, meta[relay.Constant][26] /* ty=Tensor[(7), int16] */, %382)
}

def @func_3323(%var_3317: Tensor[(90), uint8]) -> (Tensor[(3, 12, 3), float32], Tensor[(6, 12, 15), float32], Tensor[(90), uint8]) {
  %383 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %384 = cast(%var_3317, dtype="uint8") /* ty=Tensor[(90), uint8] */;
  %385 = reshape(%384, newshape=[6, 1, 15]) /* ty=Tensor[(6, 1, 15), uint8] */;
  %386 = @func_406(%385) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(6, 12, 15), float32]) */;
  %387 = %383.0;
  %388 = %386.1;
  (%387, %388, %var_3317)
}

def @func_2879(%var_2861: Tensor[(5, 8, 15), float64]) -> (Tensor[(5, 8, 15), float64],) {
  %389 = cast(%var_2861, dtype="float64") /* ty=Tensor[(5, 8, 15), float64] */;
  %390 = sigmoid(%389) /* ty=Tensor[(5, 8, 15), float64] */;
  (%390,)
}

def @func_3624(%var_3618: Tensor[(270), float64]) -> (Tensor[(3, 12, 3), float32], Tensor[(1, 13, 7), float32], Tensor[(91), float64], Tensor[(270), float64], Tensor[(3, 12, 3), float64]) {
  %391 = @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */;
  %392 = cast(meta[relay.Constant][27] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %393 = cast(%var_3618, dtype="float64") /* ty=Tensor[(270), float64] */;
  %394 = reshape(%392, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
  %395 = reshape(%393, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
  %396 = @func_2361(%394, %395) /* ty=(Tensor[(1, 13, 7), float32], Tensor[(14, 1, 9), bool], Tensor[(2, 168), uint8], Tensor[(270, 1), float64], float64) */;
  %397 = @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */;
  %398 = %391.0;
  %399 = %396.0;
  %400 = %397.1;
  (%398, %399, meta[relay.Constant][27] /* ty=Tensor[(91), float64] */, %var_3618, %400)
}

def @func_1735(%var_1730: Tensor[(9, 7, 10), int32]) -> (Tensor[(9, 7, 10), int32],) {
  %401 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 7, 10), int32] */, dtype="int32") /* ty=Tensor[(9, 7, 10), int32] */;
  %402 = shape_of(%var_1730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_1730, dtype="int32") /* ty=Tensor[(9, 7, 10), int32] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %405 = bitwise_or(%403, %404) /* ty=Tensor[(9, 7, 10), int32] */;
  (%405,)
}

def @func_6143(%var_6135: Tensor[(10, 9, 12), float64]) -> Tensor[(10, 9, 12), bool] {
  %406 = @func_3771() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %407 = %406.0;
  %408 = cast(%407, dtype="bool") /* ty=Tensor[(10, 9, 1), bool] */;
  %409 = cast(%var_6135, dtype="bool") /* ty=Tensor[(10, 9, 12), bool] */;
  logical_or(%408, %409) /* ty=Tensor[(10, 9, 12), bool] */
}

def @func_4262(%var_4215: Tensor[(12, 4, 1), int32], %var_4252: Tensor[(336), uint8], %var_4253: Tensor[(270), float64]) -> (Tensor[(12, 4, 9), bool], Tensor[(3, 12, 3), int16], Tensor[(108), float32], Tensor[(10, 4, 15), bool], Tensor[(600), int8], float64, Tensor[(12, 72), int16], Tensor[(336), uint8], Tensor[(270), float64], Tensor[(2, 8, 9), float64]) {
  %410 = cast(%var_4215, dtype="int32") /* ty=Tensor[(12, 4, 1), int32] */;
  %411 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 4, 9), int32] */, dtype="int32") /* ty=Tensor[(12, 4, 9), int32] */;
  %412 = add(%410, %411) /* ty=Tensor[(12, 4, 9), int32] */;
  %413 = cast(%412, dtype="bool") /* ty=Tensor[(12, 4, 9), bool] */;
  %414 = cast(%var_4215, dtype="bool") /* ty=Tensor[(12, 4, 1), bool] */;
  %415 = cast(meta[relay.Constant][30] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %416 = reshape(%415, newshape=[3, 12, 3]) /* ty=Tensor[(3, 12, 3), float32] */;
  %417 = @func_3911(%416) /* ty=(Tensor[(600), float64], Tensor[(3, 12, 3), int16]) */;
  %418 = cast(meta[relay.Constant][31] /* ty=Tensor[(600), int8] */, dtype="int8") /* ty=Tensor[(600), int8] */;
  %419 = cast(meta[relay.Constant][31] /* ty=Tensor[(600), int8] */, dtype="int8") /* ty=Tensor[(600), int8] */;
  %420 = reshape(%418, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), int8] */;
  %421 = reshape(%419, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), int8] */;
  %422 = @func_1303(%420, %421) /* ty=(Tensor[(10, 4, 15), bool],) */;
  %423 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 72), int16] */, dtype="int16") /* ty=Tensor[(12, 72), int16] */;
  %424 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 72), int16] */, dtype="int16") /* ty=Tensor[(12, 72), int16] */;
  %425 = cast(%var_4252, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %426 = cast(%var_4253, dtype="float64") /* ty=Tensor[(270), float64] */;
  %427 = reshape(%423, newshape=[12, 8, 9]) /* ty=Tensor[(12, 8, 9), int16] */;
  %428 = reshape(%424, newshape=[12, 8, 9]) /* ty=Tensor[(12, 8, 9), int16] */;
  %429 = reshape(%425, newshape=[336]) /* ty=Tensor[(336), uint8] */;
  %430 = reshape(%426, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %431 = @func_3839(%427, %428, %429, %430) /* ty=(Tensor[(12, 8, 9), bool], Tensor[(12, 8, 9), float64], Tensor[(14, 1, 9), bool], Tensor[(336), uint8], Tensor[(270), float64], float64) */;
  %432 = @func_3994() /* ty=(Tensor[(2, 8, 9), float64],) */;
  %433 = greater_equal(%413, %414) /* ty=Tensor[(12, 4, 9), bool] */;
  %434 = %417.1;
  %435 = %422.0;
  %436 = %431.5;
  %437 = %432.0;
  (%433, %434, meta[relay.Constant][30] /* ty=Tensor[(108), float32] */, %435, meta[relay.Constant][31] /* ty=Tensor[(600), int8] */, %436, meta[relay.Constant][32] /* ty=Tensor[(12, 72), int16] */, %var_4252, %var_4253, %437)
}

def @func_4664() -> (Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float32], Tensor[(432), float32], Tensor[(10, 9, ?), bool]) {
  %438 = @func_3796() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %439 = %438.0;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
  %441 = log2(%440) /* ty=Tensor[(3, 12, 3), float32] */;
  %442 = cast(%439, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%441, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %446 = logical_and(%444, %445) /* ty=Tensor[(3, 12, 3), bool] */;
  %447 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 12, 3), bool] */, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%446, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %451 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %452 = cast(%446, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
  %453 = cos(%452) /* ty=Tensor[(3, 12, 3), float32] */;
  %454 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 12, 3), bool] */, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %455 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%453, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %458 = cast(meta[relay.Constant][34] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %459 = reshape(%458, newshape=[4, 108]) /* ty=Tensor[(4, 108), float32] */;
  %460 = @func_3463(%459) /* ty=(Tensor[(3, 12, 3), float32], Tensor[(120, 8), float32], Tensor[(4, 108), float32], Tensor[(42, 9), float64], Tensor[(6, 8, 9), int8], Tensor[(16, 10, 14), float32], Tensor[(2240, 1), float32]) */;
  %461 = power(%449, %450) /* ty=Tensor[(3, 12, 3), float64] */;
  %462 = %451.0;
  %463 = divide(%456, %457) /* ty=Tensor[(3, 12, 3), float64] */;
  %464 = %460.0;
  %465 = @func_4411() /* ty=Tensor[(10, 9, ?), bool] */;
  (%461, %462, %463, %464, meta[relay.Constant][34] /* ty=Tensor[(432), float32] */, %465)
}

def @func_4552() -> (Tensor[(10, 9, 1), float64],) {
  %466 = @func_4141() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %467 = %466.0;
  (%467,)
}

def @func_4961() -> (Tensor[(10, 9, 1), float64], Tensor[(54, 2), bool], Tensor[(3, 12, 3), float32], Tensor[(600), float32], Tensor[(10, 9, 3), float32], Tensor[(270), float64]) {
  %468 = @func_4141() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %469 = cast(meta[relay.Constant][35] /* ty=Tensor[(54, 2), float32] */, dtype="float32") /* ty=Tensor[(54, 2), float32] */;
  %470 = tan(%469) /* ty=Tensor[(54, 2), float32] */;
  %471 = cast(meta[relay.Constant][35] /* ty=Tensor[(54, 2), float32] */, dtype="bool") /* ty=Tensor[(54, 2), bool] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(2), int32] */;
  %473 = cast(%470, dtype="bool") /* ty=Tensor[(54, 2), bool] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %475 = cast(meta[relay.Constant][35] /* ty=Tensor[(54, 2), float32] */, dtype="float32") /* ty=Tensor[(54, 2), float32] */;
  %476 = reshape(%475, newshape=[3, 12, 3]) /* ty=Tensor[(3, 12, 3), float32] */;
  %477 = @func_3911(%476) /* ty=(Tensor[(600), float64], Tensor[(3, 12, 3), int16]) */;
  %478 = %477.0;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(600), float32] */;
  %480 = cast(meta[relay.Constant][36] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %481 = cast(meta[relay.Constant][36] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %482 = reshape(%480, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float64] */;
  %483 = reshape(%481, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float64] */;
  %484 = @func_4366(%482, %483) /* ty=(Tensor[(1664), float64], Tensor[(120), uint64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 1), float32]) */;
  %485 = %468.0;
  %486 = logical_and(%473, %474) /* ty=Tensor[(54, 2), bool] */;
  %487 = @func_3408() /* ty=Tensor[(3, 12, 3), float32] */;
  %488 = tan(%479) /* ty=Tensor[(600), float32] */;
  %489 = %484.2;
  (%485, %486, %487, %488, %489, meta[relay.Constant][36] /* ty=Tensor[(270), float64] */)
}

def @func_6289() -> (Tensor[(10, 9, 1), float64],) {
  %490 = @func_4552() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %491 = %490.0;
  (%491,)
}

def @func_1303(%var_1293: Tensor[(10, 4, 15), int8], %var_1294: Tensor[(10, 4, 15), int8]) -> (Tensor[(10, 4, 15), bool],) {
  %492 = cast(%var_1294, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
  %493 = shape_of(%var_1293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%var_1293, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %496 = less_equal(%494, %495) /* ty=Tensor[(10, 4, 15), bool] */;
  (%496,)
}

def @func_3463(%var_3438: Tensor[(4, 108), float32]) -> (Tensor[(3, 12, 3), float32], Tensor[(120, 8), float32], Tensor[(4, 108), float32], Tensor[(42, 9), float64], Tensor[(6, 8, 9), int8], Tensor[(16, 10, 14), float32], Tensor[(2240, 1), float32]) {
  %497 = @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */;
  %498 = cast(meta[relay.Constant][37] /* ty=Tensor[(120, 8), float32] */, dtype="float32") /* ty=Tensor[(120, 8), float32] */;
  %499 = cast(%var_3438, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %500 = cast(meta[relay.Constant][38] /* ty=Tensor[(42, 9), float64] */, dtype="float64") /* ty=Tensor[(42, 9), float64] */;
  %501 = reshape(%498, newshape=[12, 10, 8]) /* ty=Tensor[(12, 10, 8), float32] */;
  %502 = reshape(%499, newshape=[108, 4]) /* ty=Tensor[(108, 4), float32] */;
  %503 = reshape(%500, newshape=[378]) /* ty=Tensor[(378), float64] */;
  %504 = @func_3057(%501, %502, %503) /* ty=(Tensor[(12, 10, 8), float32], Tensor[(6, 8, 9), float32], Tensor[(108, 4), float32], Tensor[(378), float64]) */;
  %505 = %504.1;
  %506 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 8, 9), float32] */, dtype="int8") /* ty=Tensor[(6, 8, 9), int8] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%505, dtype="int8") /* ty=Tensor[(6, 8, 9), int8] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %510 = cast(meta[relay.Constant][40] /* ty=Tensor[(2240, 1), float32] */, dtype="float32") /* ty=Tensor[(2240, 1), float32] */;
  %511 = cast(meta[relay.Constant][40] /* ty=Tensor[(2240, 1), float32] */, dtype="float32") /* ty=Tensor[(2240, 1), float32] */;
  %512 = reshape(%510, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %513 = reshape(%511, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %514 = @func_2021(%512, %513) /* ty=(Tensor[(16, 10, 14), float32],) */;
  %515 = %497.0;
  %516 = right_shift(%508, %509) /* ty=Tensor[(6, 8, 9), int8] */;
  %517 = %514.0;
  (%515, meta[relay.Constant][37] /* ty=Tensor[(120, 8), float32] */, %var_3438, meta[relay.Constant][38] /* ty=Tensor[(42, 9), float64] */, %516, %517, meta[relay.Constant][40] /* ty=Tensor[(2240, 1), float32] */)
}

def @func_3839(%var_3799: Tensor[(12, 8, 9), int16], %var_3800: Tensor[(12, 8, 9), int16], %var_3821: Tensor[(336), uint8], %var_3822: Tensor[(270), float64]) -> (Tensor[(12, 8, 9), bool], Tensor[(12, 8, 9), float64], Tensor[(14, 1, 9), bool], Tensor[(336), uint8], Tensor[(270), float64], float64) {
  %518 = cast(%var_3800, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
  %519 = shape_of(%var_3799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_3799, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %522 = cast(%var_3799, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %523 = cast(%var_3821, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %524 = cast(%var_3821, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %525 = cast(%var_3822, dtype="float64") /* ty=Tensor[(270), float64] */;
  %526 = cast(-0.727369f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %527 = reshape(%523, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), uint8] */;
  %528 = reshape(%524, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), uint8] */;
  %529 = reshape(%525, newshape=[30, 9]) /* ty=Tensor[(30, 9), float64] */;
  %530 = reshape(%526, newshape=[]) /* ty=float64 */;
  %531 = @func_2147(%527, %528, %529, %530) /* ty=(Tensor[(4, 14, 6), bool], Tensor[(15, 3, 6), float64], Tensor[(30, 9), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 1, 9), bool], float64) */;
  %532 = greater(%520, %521) /* ty=Tensor[(12, 8, 9), bool] */;
  %533 = sigmoid(%522) /* ty=Tensor[(12, 8, 9), float64] */;
  %534 = %531.4;
  (%532, %533, %534, %var_3821, %var_3822, -0.727369f64 /* ty=float64 */)
}

def @func_2361(%var_2348: Tensor[(1, 13, 7), float64], %var_2358: Tensor[(270, 1), float64]) -> (Tensor[(1, 13, 7), float32], Tensor[(14, 1, 9), bool], Tensor[(2, 168), uint8], Tensor[(270, 1), float64], float64) {
  %535 = cast(%var_2348, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
  %536 = acosh(%535) /* ty=Tensor[(1, 13, 7), float64] */;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(1, 13, 7), float32] */;
  %538 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 168), uint8] */, dtype="uint8") /* ty=Tensor[(2, 168), uint8] */;
  %539 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 168), uint8] */, dtype="uint8") /* ty=Tensor[(2, 168), uint8] */;
  %540 = cast(%var_2358, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %541 = cast(-4.70201f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %542 = reshape(%538, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), uint8] */;
  %543 = reshape(%539, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), uint8] */;
  %544 = reshape(%540, newshape=[30, 9]) /* ty=Tensor[(30, 9), float64] */;
  %545 = reshape(%541, newshape=[]) /* ty=float64 */;
  %546 = @func_2147(%542, %543, %544, %545) /* ty=(Tensor[(4, 14, 6), bool], Tensor[(15, 3, 6), float64], Tensor[(30, 9), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 1, 9), bool], float64) */;
  %547 = cos(%537) /* ty=Tensor[(1, 13, 7), float32] */;
  %548 = %546.4;
  (%547, %548, meta[relay.Constant][41] /* ty=Tensor[(2, 168), uint8] */, %var_2358, -4.70201f64 /* ty=float64 */)
}

def @func_5191() -> (Tensor[(3, 12, 3), float64], Tensor[(11, 8, 14), float64], Tensor[(1232), float64], Tensor[(3, 12, 3), float64]) {
  %549 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %550 = cast(meta[relay.Constant][42] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %551 = reshape(%550, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), float64] */;
  %552 = @func_5127(%551) /* ty=(Tensor[(11, 8, 14), float64],) */;
  %553 = %549.0;
  %554 = %552.0;
  %555 = @func_5023() /* ty=Tensor[(3, 12, 3), float64] */;
  (%553, %554, meta[relay.Constant][42] /* ty=Tensor[(1232), float64] */, %555)
}

def @func_1697(%var_1647: Tensor[(3, 12, 7), int16]) -> (Tensor[(3, 12, 7), int16], Tensor[(3, 12, 7), float32], Tensor[(15, 3, 6), float64], Tensor[(270), float64]) {
  %556 = cast(%var_1647, dtype="int16") /* ty=Tensor[(3, 12, 7), int16] */;
  %557 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(3, 12, 7), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 12, 7), int16] */, dtype="int16") /* ty=Tensor[(3, 12, 7), int16] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %560 = cast(%var_1647, dtype="float32") /* ty=Tensor[(3, 12, 7), float32] */;
  %561 = cast(meta[relay.Constant][44] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %562 = cast(meta[relay.Constant][44] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %563 = reshape(%561, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %564 = reshape(%562, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %565 = bitwise_and(%558, %559) /* ty=Tensor[(3, 12, 7), int16] */;
  %566 = tan(%560) /* ty=Tensor[(3, 12, 7), float32] */;
  %567 = @func_568(%563, %564) /* ty=Tensor[(15, 3, 6), float64] */;
  (%565, %566, %567, meta[relay.Constant][44] /* ty=Tensor[(270), float64] */)
}

def @func_6390(%var_6388: Tensor[(432), float32]) -> (Tensor[(7, 12, 6), uint16], Tensor[(3, 12, 3), float64], Tensor[(6, 8, 9), int8], Tensor[(432), float32]) {
  %568 = @func_6343() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(7, 12, 6), float32], Tensor[(504), uint16], Tensor[(1, 90), uint8]) */;
  %569 = %568.1;
  %570 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 12, 6), float32] */, dtype="uint16") /* ty=Tensor[(7, 12, 6), uint16] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="uint16") /* ty=Tensor[(7, 12, 6), uint16] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %574 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %575 = cast(%var_6388, dtype="float32") /* ty=Tensor[(432), float32] */;
  %576 = reshape(%575, newshape=[4, 108]) /* ty=Tensor[(4, 108), float32] */;
  %577 = @func_3463(%576) /* ty=(Tensor[(3, 12, 3), float32], Tensor[(120, 8), float32], Tensor[(4, 108), float32], Tensor[(42, 9), float64], Tensor[(6, 8, 9), int8], Tensor[(16, 10, 14), float32], Tensor[(2240, 1), float32]) */;
  %578 = minimum(%572, %573) /* ty=Tensor[(7, 12, 6), uint16] */;
  %579 = %574.0;
  %580 = %577.4;
  (%578, %579, %580, %var_6388)
}

def @func_5963(%var_5884: Tensor[(616, 2), float64]) -> (Tensor[(3, 12, 7), int16], Tensor[(252), int16], Tensor[(3, 12, 3), float64], Tensor[(11, 8, 14), float64], Tensor[(616, 2), float64], Tensor[(16, 10, 14), float32], Tensor[(432, 600), bool], Tensor[(10, 9, 1), float64]) {
  %581 = cast(meta[relay.Constant][46] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %582 = reshape(%581, newshape=[3, 12, 7]) /* ty=Tensor[(3, 12, 7), int16] */;
  %583 = @func_1697(%582) /* ty=(Tensor[(3, 12, 7), int16], Tensor[(3, 12, 7), float32], Tensor[(15, 3, 6), float64], Tensor[(270), float64]) */;
  %584 = cast(%var_5884, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
  %585 = reshape(%584, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), float64] */;
  %586 = @func_5127(%585) /* ty=(Tensor[(11, 8, 14), float64],) */;
  %587 = cast(meta[relay.Constant][47] /* ty=Tensor[(432, 1), float32] */, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
  %588 = reshape(%587, newshape=[4, 108]) /* ty=Tensor[(4, 108), float32] */;
  %589 = @func_3463(%588) /* ty=(Tensor[(3, 12, 3), float32], Tensor[(120, 8), float32], Tensor[(4, 108), float32], Tensor[(42, 9), float64], Tensor[(6, 8, 9), int8], Tensor[(16, 10, 14), float32], Tensor[(2240, 1), float32]) */;
  %590 = @func_3567() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) */;
  %591 = %590.2;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(600), float32] */;
  %593 = cast(meta[relay.Constant][47] /* ty=Tensor[(432, 1), float32] */, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
  %594 = floor_divide(%592, %593) /* ty=Tensor[(432, 600), float32] */;
  %595 = cast(%594, dtype="bool") /* ty=Tensor[(432, 600), bool] */;
  %596 = cast(%591, dtype="bool") /* ty=Tensor[(600), bool] */;
  %597 = @func_4141() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %598 = %583.0;
  %599 = @func_5023() /* ty=Tensor[(3, 12, 3), float64] */;
  %600 = %586.0;
  %601 = %589.5;
  %602 = less(%595, %596) /* ty=Tensor[(432, 600), bool] */;
  %603 = %597.0;
  (%598, meta[relay.Constant][46] /* ty=Tensor[(252), int16] */, %599, %600, %var_5884, %601, %602, %603)
}

def @main() -> Tensor[(3, 12, 3), float32] {
  %604 = @func_5366() /* ty=Tensor[(3, 12, 3), float64] */;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
  atan(%605) /* ty=Tensor[(3, 12, 3), float32] */
}

def @func_3771() -> (Tensor[(10, 9, 1), float64],) {
  %606 = cast(meta[relay.Constant][48] /* ty=Tensor[(10, 9, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 9, 1), float64] */;
  %607 = sqrt(%606) /* ty=Tensor[(10, 9, 1), float64] */;
  (%607,)
}

def @func_3982() -> Tensor[(10, 9, 1), float64] {
  %608 = @func_3771() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %608.0
}

def @func_3593(%var_3573: Tensor[(10, 3, 4), uint64], %var_3574: Tensor[(10, 3, 4), uint64]) -> (Tensor[(10, 3, 4), bool], Tensor[(16, 8, 13), float64], Tensor[(52, 2), float64], Tensor[(1664), float64]) {
  %609 = cast(%var_3574, dtype="bool") /* ty=Tensor[(10, 3, 4), bool] */;
  %610 = shape_of(%var_3573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%var_3573, dtype="bool") /* ty=Tensor[(10, 3, 4), bool] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %613 = cast(meta[relay.Constant][49] /* ty=Tensor[(52, 2), float64] */, dtype="float64") /* ty=Tensor[(52, 2), float64] */;
  %614 = cast(meta[relay.Constant][50] /* ty=Tensor[(1664), float64] */, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %615 = reshape(%613, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %616 = reshape(%614, newshape=[16, 8, 13]) /* ty=Tensor[(16, 8, 13), float64] */;
  %617 = greater_equal(%611, %612) /* ty=Tensor[(10, 3, 4), bool] */;
  %618 = @func_2976(%615, %616) /* ty=Tensor[(16, 8, 13), float64] */;
  (%617, %618, meta[relay.Constant][49] /* ty=Tensor[(52, 2), float64] */, meta[relay.Constant][50] /* ty=Tensor[(1664), float64] */)
}

def @func_4527() -> Tensor[(10, 4, 15), float64] {
  %619 = @func_3567() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) */;
  %620 = %619.1;
  %621 = cast(%620, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  cos(%621) /* ty=Tensor[(10, 4, 15), float64] */
}

def @func_4698() -> Tensor[(10, 9, 1), float64] {
  @func_3982() /* ty=Tensor[(10, 9, 1), float64] */
}

def @func_5980(%var_5975: Tensor[(8, 10, 8), float64]) -> (Tensor[(8, 10, 8), float64],) {
  %622 = cast(%var_5975, dtype="float64") /* ty=Tensor[(8, 10, 8), float64] */;
  %623 = asin(%622) /* ty=Tensor[(8, 10, 8), float64] */;
  (%623,)
}

def @func_3057(%var_3042: Tensor[(12, 10, 8), float32], %var_3054: Tensor[(108, 4), float32], %var_3055: Tensor[(378), float64]) -> (Tensor[(12, 10, 8), float32], Tensor[(6, 8, 9), float32], Tensor[(108, 4), float32], Tensor[(378), float64]) {
  %624 = cast(%var_3042, dtype="float32") /* ty=Tensor[(12, 10, 8), float32] */;
  %625 = cast(%var_3054, dtype="float32") /* ty=Tensor[(108, 4), float32] */;
  %626 = cast(%var_3054, dtype="float32") /* ty=Tensor[(108, 4), float32] */;
  %627 = cast(%var_3055, dtype="float64") /* ty=Tensor[(378), float64] */;
  %628 = reshape(%625, newshape=[6, 8, 9]) /* ty=Tensor[(6, 8, 9), float32] */;
  %629 = reshape(%626, newshape=[6, 8, 9]) /* ty=Tensor[(6, 8, 9), float32] */;
  %630 = reshape(%627, newshape=[378]) /* ty=Tensor[(378), float64] */;
  %631 = @func_2427(%628, %629, %630) /* ty=(Tensor[(6, 8, 9), float32], Tensor[(3, 14, 9), float64], Tensor[(378), float64]) */;
  %632 = sinh(%624) /* ty=Tensor[(12, 10, 8), float32] */;
  %633 = %631.0;
  (%632, %633, %var_3054, %var_3055)
}

def @func_3796() -> (Tensor[(3, 12, 3), float32],) {
  %634 = @func_3408() /* ty=Tensor[(3, 12, 3), float32] */;
  (%634,)
}

def @func_3994() -> (Tensor[(2, 8, 9), float64],) {
  %635 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 9), float64] */;
  %636 = sigmoid(%635) /* ty=Tensor[(2, 8, 9), float64] */;
  (%636,)
}

def @func_5554(%var_5514: Tensor[(10, 9, 6), bool], %var_5548: Tensor[(48), int32]) -> (Tensor[(10, 9, 6), float32], Tensor[(4, 84), uint8], Tensor[(48), int32], Tensor[(336), uint8], Tensor[(270), float64]) {
  %637 = @func_5437() /* ty=Tensor[(10, 9, ?), bool] */;
  %638 = cast(%637, dtype="uint8") /* ty=Tensor[(10, 9, ?), uint8] */;
  %639 = cast(%var_5514, dtype="uint8") /* ty=Tensor[(10, 9, 6), uint8] */;
  %640 = minimum(%638, %639) /* ty=Tensor[(10, 9, 6), uint8] */;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %642 = shape_of(%var_5514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%var_5514, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %645 = cast(%var_5548, dtype="int32") /* ty=Tensor[(48), int32] */;
  %646 = cast(meta[relay.Constant][52] /* ty=Tensor[(336), uint8] */, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %647 = cast(meta[relay.Constant][53] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %648 = reshape(%645, newshape=[48]) /* ty=Tensor[(48), int32] */;
  %649 = reshape(%646, newshape=[4, 84]) /* ty=Tensor[(4, 84), uint8] */;
  %650 = reshape(%647, newshape=[3, 90]) /* ty=Tensor[(3, 90), float64] */;
  %651 = @func_5325(%648, %649, %650) /* ty=(Tensor[(10, 9, 1), float32], Tensor[(10, 4, 15), bool], Tensor[(48), int32], Tensor[(4, 84), uint8], Tensor[(3, 90), float64]) */;
  %652 = divide(%643, %644) /* ty=Tensor[(10, 9, 6), float32] */;
  %653 = %651.3;
  (%652, %653, %var_5548, meta[relay.Constant][52] /* ty=Tensor[(336), uint8] */, meta[relay.Constant][53] /* ty=Tensor[(270), float64] */)
}

def @func_5093() -> (Tensor[(3, 12, 3), float64], Tensor[(10, 9, 1), float64]) {
  %654 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %655 = @func_4213() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %656 = %654.0;
  %657 = %655.0;
  (%656, %657)
}

def @func_3129() -> (Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) {
  %658 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 12, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
  %659 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 12, 3), float32] */, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %660 = sin(%658) /* ty=Tensor[(3, 12, 3), float32] */;
  %661 = asinh(%659) /* ty=Tensor[(3, 12, 3), float64] */;
  (%660, %661)
}

def @func_6343() -> (Tensor[(3, 12, 3), float64], Tensor[(7, 12, 6), float32], Tensor[(504), uint16], Tensor[(1, 90), uint8]) {
  %662 = cast(meta[relay.Constant][55] /* ty=Tensor[(504), uint16] */, dtype="uint16") /* ty=Tensor[(504), uint16] */;
  %663 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 90), uint8] */, dtype="uint8") /* ty=Tensor[(1, 90), uint8] */;
  %664 = reshape(%662, newshape=[7, 12, 6]) /* ty=Tensor[(7, 12, 6), uint16] */;
  %665 = reshape(%663, newshape=[90]) /* ty=Tensor[(90), uint8] */;
  %666 = @func_1365(%664, %665) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(90), uint8], Tensor[(7, 12, 6), float32]) */;
  %667 = @func_3525() /* ty=Tensor[(3, 12, 3), float64] */;
  %668 = %666.2;
  (%667, %668, meta[relay.Constant][55] /* ty=Tensor[(504), uint16] */, meta[relay.Constant][56] /* ty=Tensor[(1, 90), uint8] */)
}

def @func_4411() -> Tensor[(10, 9, ?), bool] {
  %669 = @func_4213() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %670 = %669.0;
  %671 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 9, 1), float64] */, dtype="bool") /* ty=Tensor[(10, 9, 1), bool] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%670, dtype="bool") /* ty=Tensor[(10, 9, 1), bool] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%673, %674) /* ty=Tensor[(10, 9, ?), bool] */
}

def @func_1365(%var_1332: Tensor[(7, 12, 6), uint16], %var_1341: Tensor[(90), uint8]) -> (Tensor[(6, 12, 15), float64], Tensor[(90), uint8], Tensor[(7, 12, 6), float32]) {
  %675 = cast(%var_1341, dtype="uint8") /* ty=Tensor[(90), uint8] */;
  %676 = reshape(%675, newshape=[6, 1, 15]) /* ty=Tensor[(6, 1, 15), uint8] */;
  %677 = @func_406(%676) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(6, 12, 15), float32]) */;
  %678 = cast(%var_1332, dtype="bool") /* ty=Tensor[(7, 12, 6), bool] */;
  %679 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(7, 12, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(meta[relay.Constant][58] /* ty=Tensor[(7, 12, 6), uint16] */, dtype="bool") /* ty=Tensor[(7, 12, 6), bool] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %682 = greater_equal(%680, %681) /* ty=Tensor[(7, 12, 6), bool] */;
  %683 = cast(%682, dtype="float32") /* ty=Tensor[(7, 12, 6), float32] */;
  %684 = sigmoid(%683) /* ty=Tensor[(7, 12, 6), float32] */;
  %685 = cast(%684, dtype="float32") /* ty=Tensor[(7, 12, 6), float32] */;
  %686 = %677.0;
  %687 = log(%685) /* ty=Tensor[(7, 12, 6), float32] */;
  (%686, %var_1341, %687)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1700(%var_1698: Tensor[(3, 12, 7), int16]) -> (Tensor[(3, 12, 7), int16], Tensor[(3, 12, 7), float32], Tensor[(15, 3, 6), float64], Tensor[(270), float64]) {
  @func_1697(%var_1698) /* ty=(Tensor[(3, 12, 7), int16], Tensor[(3, 12, 7), float32], Tensor[(15, 3, 6), float64], Tensor[(270), float64]) */
}

def @func_2152(%var_2148: Tensor[(4, 14, 6), uint8], %var_2149: Tensor[(4, 14, 6), uint8], %var_2150: Tensor[(30, 9), float64], %var_2151: float64) -> (Tensor[(4, 14, 6), bool], Tensor[(15, 3, 6), float64], Tensor[(30, 9), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 1, 9), bool], float64) {
  %17 = fn (%var_2115: Tensor[(4, 14, 6), uint8], %var_2116: Tensor[(4, 14, 6), uint8], %var_2136: Tensor[(30, 9), float64], %var_2144: float64) -> (Tensor[(4, 14, 6), bool], Tensor[(15, 3, 6), float64], Tensor[(30, 9), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 1, 9), bool], float64) {
    %0 = cast(%var_2116, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
    %1 = shape_of(%var_2115, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_2115, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %4 = cast(%var_2136, dtype="float64") /* ty=Tensor[(30, 9), float64] */;
    %5 = cast(%var_2136, dtype="float64") /* ty=Tensor[(30, 9), float64] */;
    %6 = reshape(%4, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
    %7 = reshape(%5, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
    %8 = cast(%var_2116, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
    %9 = log(%8) /* ty=Tensor[(4, 14, 6), float32] */;
    %10 = cast(%9, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
    %11 = cast(%var_2144, dtype="float64") /* ty=float64 */;
    %12 = reshape(%11, newshape=[]) /* ty=float64 */;
    %13 = greater_equal(%2, %3) /* ty=Tensor[(4, 14, 6), bool] */;
    %14 = @func_568(%6, %7) /* ty=Tensor[(15, 3, 6), float64] */;
    %15 = atan(%10) /* ty=Tensor[(4, 14, 6), float32] */;
    %16 = @func_694(%12) /* ty=Tensor[(14, 1, 9), bool] */;
    (%13, %14, %var_2136, %15, %16, %var_2144)
  };
  %17(%var_2148, %var_2149, %var_2150, %var_2151) /* ty=(Tensor[(4, 14, 6), bool], Tensor[(15, 3, 6), float64], Tensor[(30, 9), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 1, 9), bool], float64) */
}

def @func_3129() -> (Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) {
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 12, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 12, 3), float32] */, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %20 = sin(%18) /* ty=Tensor[(3, 12, 3), float32] */;
  %21 = asinh(%19) /* ty=Tensor[(3, 12, 3), float64] */;
  (%20, %21)
}

def @func_3510() -> (Tensor[(3, 12, 3), float64],) {
  @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */
}

def @func_3465(%var_3464: Tensor[(4, 108), float32]) -> (Tensor[(3, 12, 3), float32], Tensor[(120, 8), float32], Tensor[(4, 108), float32], Tensor[(42, 9), float64], Tensor[(6, 8, 9), int8], Tensor[(16, 10, 14), float32], Tensor[(2240, 1), float32]) {
  %43 = fn (%var_3438: Tensor[(4, 108), float32]) -> (Tensor[(3, 12, 3), float32], Tensor[(120, 8), float32], Tensor[(4, 108), float32], Tensor[(42, 9), float64], Tensor[(6, 8, 9), int8], Tensor[(16, 10, 14), float32], Tensor[(2240, 1), float32]) {
    %22 = @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */;
    %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(120, 8), float32] */, dtype="float32") /* ty=Tensor[(120, 8), float32] */;
    %24 = cast(%var_3438, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
    %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(42, 9), float64] */, dtype="float64") /* ty=Tensor[(42, 9), float64] */;
    %26 = reshape(%23, newshape=[12, 10, 8]) /* ty=Tensor[(12, 10, 8), float32] */;
    %27 = reshape(%24, newshape=[108, 4]) /* ty=Tensor[(108, 4), float32] */;
    %28 = reshape(%25, newshape=[378]) /* ty=Tensor[(378), float64] */;
    %29 = @func_3057(%26, %27, %28) /* ty=(Tensor[(12, 10, 8), float32], Tensor[(6, 8, 9), float32], Tensor[(108, 4), float32], Tensor[(378), float64]) */;
    %30 = %29.1;
    %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 8, 9), float32] */, dtype="int8") /* ty=Tensor[(6, 8, 9), int8] */;
    %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
    %33 = cast(%30, dtype="int8") /* ty=Tensor[(6, 8, 9), int8] */;
    %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %35 = cast(meta[relay.Constant][4] /* ty=Tensor[(2240, 1), float32] */, dtype="float32") /* ty=Tensor[(2240, 1), float32] */;
    %36 = cast(meta[relay.Constant][4] /* ty=Tensor[(2240, 1), float32] */, dtype="float32") /* ty=Tensor[(2240, 1), float32] */;
    %37 = reshape(%35, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
    %38 = reshape(%36, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
    %39 = @func_2021(%37, %38) /* ty=(Tensor[(16, 10, 14), float32],) */;
    %40 = %22.0;
    %41 = right_shift(%33, %34) /* ty=Tensor[(6, 8, 9), int8] */;
    %42 = %39.0;
    (%40, meta[relay.Constant][1] /* ty=Tensor[(120, 8), float32] */, %var_3438, meta[relay.Constant][2] /* ty=Tensor[(42, 9), float64] */, %41, %42, meta[relay.Constant][4] /* ty=Tensor[(2240, 1), float32] */)
  };
  %43(%var_3464) /* ty=(Tensor[(3, 12, 3), float32], Tensor[(120, 8), float32], Tensor[(4, 108), float32], Tensor[(42, 9), float64], Tensor[(6, 8, 9), int8], Tensor[(16, 10, 14), float32], Tensor[(2240, 1), float32]) */
}

def @func_3527() -> Tensor[(3, 12, 3), float64] {
  @func_3525() /* ty=Tensor[(3, 12, 3), float64] */
}

def @func_4411() -> Tensor[(10, 9, ?), bool] {
  %44 = @func_4213() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %45 = %44.0;
  %46 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 9, 1), float64] */, dtype="bool") /* ty=Tensor[(10, 9, 1), bool] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="bool") /* ty=Tensor[(10, 9, 1), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%48, %49) /* ty=Tensor[(10, 9, ?), bool] */
}

def @func_4665() -> (Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float32], Tensor[(432), float32], Tensor[(10, 9, ?), bool]) {
  %78 = fn () -> (Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float32], Tensor[(432), float32], Tensor[(10, 9, ?), bool]) {
    %50 = @func_3796() /* ty=(Tensor[(3, 12, 3), float32],) */;
    %51 = %50.0;
    %52 = cast(%51, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
    %53 = log2(%52) /* ty=Tensor[(3, 12, 3), float32] */;
    %54 = cast(%51, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
    %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
    %56 = cast(%53, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
    %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %58 = logical_and(%56, %57) /* ty=Tensor[(3, 12, 3), bool] */;
    %59 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 12, 3), bool] */, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
    %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
    %61 = cast(%58, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
    %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %63 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
    %64 = cast(%58, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
    %65 = cos(%64) /* ty=Tensor[(3, 12, 3), float32] */;
    %66 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 12, 3), bool] */, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
    %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
    %68 = cast(%65, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
    %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %70 = cast(meta[relay.Constant][7] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %71 = reshape(%70, newshape=[4, 108]) /* ty=Tensor[(4, 108), float32] */;
    %72 = @func_3463(%71) /* ty=(Tensor[(3, 12, 3), float32], Tensor[(120, 8), float32], Tensor[(4, 108), float32], Tensor[(42, 9), float64], Tensor[(6, 8, 9), int8], Tensor[(16, 10, 14), float32], Tensor[(2240, 1), float32]) */;
    %73 = power(%61, %62) /* ty=Tensor[(3, 12, 3), float64] */;
    %74 = %63.0;
    %75 = divide(%68, %69) /* ty=Tensor[(3, 12, 3), float64] */;
    %76 = %72.0;
    %77 = @func_4411() /* ty=Tensor[(10, 9, ?), bool] */;
    (%73, %74, %75, %76, meta[relay.Constant][7] /* ty=Tensor[(432), float32] */, %77)
  };
  %78() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float32], Tensor[(432), float32], Tensor[(10, 9, ?), bool]) */
}

def @func_6343() -> (Tensor[(3, 12, 3), float64], Tensor[(7, 12, 6), float32], Tensor[(504), uint16], Tensor[(1, 90), uint8]) {
  %79 = cast(meta[relay.Constant][8] /* ty=Tensor[(504), uint16] */, dtype="uint16") /* ty=Tensor[(504), uint16] */;
  %80 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 90), uint8] */, dtype="uint8") /* ty=Tensor[(1, 90), uint8] */;
  %81 = reshape(%79, newshape=[7, 12, 6]) /* ty=Tensor[(7, 12, 6), uint16] */;
  %82 = reshape(%80, newshape=[90]) /* ty=Tensor[(90), uint8] */;
  %83 = @func_1365(%81, %82) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(90), uint8], Tensor[(7, 12, 6), float32]) */;
  %84 = @func_3525() /* ty=Tensor[(3, 12, 3), float64] */;
  %85 = %83.2;
  (%84, %85, meta[relay.Constant][8] /* ty=Tensor[(504), uint16] */, meta[relay.Constant][9] /* ty=Tensor[(1, 90), uint8] */)
}

def @func_767(%var_741: int16, %var_742: Tensor[(1, 7), int16]) -> (Tensor[(1, 7), int16], Tensor[(15, 3, 6), float64], Tensor[(3, 90), float64]) {
  %86 = cast(%var_741, dtype="int16") /* ty=int16 */;
  %87 = cast(%var_742, dtype="int16") /* ty=Tensor[(1, 7), int16] */;
  %88 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 90), float64] */, dtype="float64") /* ty=Tensor[(3, 90), float64] */;
  %89 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 90), float64] */, dtype="float64") /* ty=Tensor[(3, 90), float64] */;
  %90 = reshape(%88, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %91 = reshape(%89, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %92 = right_shift(%86, %87) /* ty=Tensor[(1, 7), int16] */;
  %93 = @func_568(%90, %91) /* ty=Tensor[(15, 3, 6), float64] */;
  (%92, %93, meta[relay.Constant][10] /* ty=Tensor[(3, 90), float64] */)
}

def @func_3057(%var_3042: Tensor[(12, 10, 8), float32], %var_3054: Tensor[(108, 4), float32], %var_3055: Tensor[(378), float64]) -> (Tensor[(12, 10, 8), float32], Tensor[(6, 8, 9), float32], Tensor[(108, 4), float32], Tensor[(378), float64]) {
  %94 = cast(%var_3042, dtype="float32") /* ty=Tensor[(12, 10, 8), float32] */;
  %95 = cast(%var_3054, dtype="float32") /* ty=Tensor[(108, 4), float32] */;
  %96 = cast(%var_3054, dtype="float32") /* ty=Tensor[(108, 4), float32] */;
  %97 = cast(%var_3055, dtype="float64") /* ty=Tensor[(378), float64] */;
  %98 = reshape(%95, newshape=[6, 8, 9]) /* ty=Tensor[(6, 8, 9), float32] */;
  %99 = reshape(%96, newshape=[6, 8, 9]) /* ty=Tensor[(6, 8, 9), float32] */;
  %100 = reshape(%97, newshape=[378]) /* ty=Tensor[(378), float64] */;
  %101 = @func_2427(%98, %99, %100) /* ty=(Tensor[(6, 8, 9), float32], Tensor[(3, 14, 9), float64], Tensor[(378), float64]) */;
  %102 = sinh(%94) /* ty=Tensor[(12, 10, 8), float32] */;
  %103 = %101.0;
  (%102, %103, %var_3054, %var_3055)
}

def @func_4554() -> (Tensor[(10, 9, 1), float64],) {
  @func_4552() /* ty=(Tensor[(10, 9, 1), float64],) */
}

def @func_3984() -> Tensor[(10, 9, 1), float64] {
  @func_3982() /* ty=Tensor[(10, 9, 1), float64] */
}

def @func_5076() -> Tensor[(3, 12, 3), float32] {
  %105 = fn () -> Tensor[(3, 12, 3), float32] {
    %104 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
    %104.0
  };
  %105() /* ty=Tensor[(3, 12, 3), float32] */
}

def @func_4963() -> (Tensor[(10, 9, 1), float64], Tensor[(54, 2), bool], Tensor[(3, 12, 3), float32], Tensor[(600), float32], Tensor[(10, 9, 3), float32], Tensor[(270), float64]) {
  @func_4961() /* ty=(Tensor[(10, 9, 1), float64], Tensor[(54, 2), bool], Tensor[(3, 12, 3), float32], Tensor[(600), float32], Tensor[(10, 9, 3), float32], Tensor[(270), float64]) */
}

def @func_3914(%var_3912: Tensor[(3, 12, 3), float32]) -> (Tensor[(600), float64], Tensor[(3, 12, 3), int16]) {
  @func_3911(%var_3912) /* ty=(Tensor[(600), float64], Tensor[(3, 12, 3), int16]) */
}

def @func_5558(%var_5556: Tensor[(10, 9, 6), bool], %var_5557: Tensor[(48), int32]) -> (Tensor[(10, 9, 6), float32], Tensor[(4, 84), uint8], Tensor[(48), int32], Tensor[(336), uint8], Tensor[(270), float64]) {
  @func_5554(%var_5556, %var_5557) /* ty=(Tensor[(10, 9, 6), float32], Tensor[(4, 84), uint8], Tensor[(48), int32], Tensor[(336), uint8], Tensor[(270), float64]) */
}

def @func_927(%var_925: Tensor[(2, 9, 3), float32]) -> (Tensor[(6, 12, 15), float64], Tensor[(90), uint8], Tensor[(15, 3, 6), float64], Tensor[(7), int16], Tensor[(2, 9, 3), bool]) {
  @func_924(%var_925) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(90), uint8], Tensor[(15, 3, 6), float64], Tensor[(7), int16], Tensor[(2, 9, 3), bool]) */
}

def @func_3796() -> (Tensor[(3, 12, 3), float32],) {
  %106 = @func_3408() /* ty=Tensor[(3, 12, 3), float32] */;
  (%106,)
}

def @func_4114(%var_4112: int16, %var_4113: Tensor[(120), uint64]) -> (Tensor[(10, 9, 1), float64], Tensor[(3, 12, 3), float64], Tensor[(15, 3, 6), float64], int16, Tensor[(7), int16], Tensor[(3, 12, 3), float64], Tensor[(6, 12, 15), float32], Tensor[(1664), float64], Tensor[(120), uint64]) {
  %131 = fn (%var_4073: int16, %var_4107: Tensor[(120), uint64]) -> (Tensor[(10, 9, 1), float64], Tensor[(3, 12, 3), float64], Tensor[(15, 3, 6), float64], int16, Tensor[(7), int16], Tensor[(3, 12, 3), float64], Tensor[(6, 12, 15), float32], Tensor[(1664), float64], Tensor[(120), uint64]) {
    %107 = @func_3771() /* ty=(Tensor[(10, 9, 1), float64],) */;
    %108 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
    %109 = cast(%var_4073, dtype="int16") /* ty=int16 */;
    %110 = cast(meta[relay.Constant][11] /* ty=Tensor[(7), int16] */, dtype="int16") /* ty=Tensor[(7), int16] */;
    %111 = reshape(%109, newshape=[]) /* ty=int16 */;
    %112 = reshape(%110, newshape=[1, 7]) /* ty=Tensor[(1, 7), int16] */;
    %113 = @func_767(%111, %112) /* ty=(Tensor[(1, 7), int16], Tensor[(15, 3, 6), float64], Tensor[(3, 90), float64]) */;
    %114 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
    %115 = %107.0;
    %116 = cast(%115, dtype="uint8") /* ty=Tensor[(10, 9, 1), uint8] */;
    %117 = reshape(%116, newshape=[6, 1, 15]) /* ty=Tensor[(6, 1, 15), uint8] */;
    %118 = @func_406(%117) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(6, 12, 15), float32]) */;
    %119 = %118.1;
    %120 = cast(%119, dtype="float32") /* ty=Tensor[(6, 12, 15), float32] */;
    %121 = cast(%var_4107, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %122 = cast(%var_4107, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %123 = reshape(%121, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), uint64] */;
    %124 = reshape(%122, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), uint64] */;
    %125 = @func_3593(%123, %124) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(16, 8, 13), float64], Tensor[(52, 2), float64], Tensor[(1664), float64]) */;
    %126 = %108.0;
    %127 = %113.1;
    %128 = %114.0;
    %129 = atan(%120) /* ty=Tensor[(6, 12, 15), float32] */;
    %130 = %125.3;
    (%115, %126, %127, %var_4073, meta[relay.Constant][11] /* ty=Tensor[(7), int16] */, %128, %129, %130, %var_4107)
  };
  %131(%var_4112, %var_4113) /* ty=(Tensor[(10, 9, 1), float64], Tensor[(3, 12, 3), float64], Tensor[(15, 3, 6), float64], int16, Tensor[(7), int16], Tensor[(3, 12, 3), float64], Tensor[(6, 12, 15), float32], Tensor[(1664), float64], Tensor[(120), uint64]) */
}

def @func_5756(%var_5702: Tensor[(48), int32], %var_5704: Tensor[(6, 45), float64]) -> (Tensor[(3, 90), float64], Tensor[(336), uint8], Tensor[(6, 45), float64], Tensor[(120), uint64], Tensor[(10, 9, 48), int32], Tensor[(10, 9, 1), float64]) {
  %132 = cast(%var_5702, dtype="int32") /* ty=Tensor[(48), int32] */;
  %133 = cast(meta[relay.Constant][12] /* ty=Tensor[(336), uint8] */, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %134 = cast(%var_5704, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %135 = reshape(%132, newshape=[48]) /* ty=Tensor[(48), int32] */;
  %136 = reshape(%133, newshape=[4, 84]) /* ty=Tensor[(4, 84), uint8] */;
  %137 = reshape(%134, newshape=[3, 90]) /* ty=Tensor[(3, 90), float64] */;
  %138 = @func_5325(%135, %136, %137) /* ty=(Tensor[(10, 9, 1), float32], Tensor[(10, 4, 15), bool], Tensor[(48), int32], Tensor[(4, 84), uint8], Tensor[(3, 90), float64]) */;
  %139 = @func_3860() /* ty=(Tensor[(11, 14, 14), int32], Tensor[(52, 2), float64], Tensor[(120), uint64]) */;
  %140 = @func_4213() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %141 = %140.0;
  %142 = cast(%141, dtype="bool") /* ty=Tensor[(10, 9, 1), bool] */;
  %143 = cast(%var_5702, dtype="bool") /* ty=Tensor[(48), bool] */;
  %144 = logical_and(%142, %143) /* ty=Tensor[(10, 9, 48), bool] */;
  %145 = @func_4141() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %146 = %145.0;
  %147 = cast(%144, dtype="int32") /* ty=Tensor[(10, 9, 48), int32] */;
  %148 = cast(%146, dtype="int32") /* ty=Tensor[(10, 9, 1), int32] */;
  %149 = cast(%146, dtype="float64") /* ty=Tensor[(10, 9, 1), float64] */;
  %150 = %138.4;
  %151 = %139.2;
  %152 = multiply(%147, %148) /* ty=Tensor[(10, 9, 48), int32] */;
  %153 = atanh(%149) /* ty=Tensor[(10, 9, 1), float64] */;
  (%150, meta[relay.Constant][12] /* ty=Tensor[(336), uint8] */, %var_5704, %151, %152, %153)
}

def @func_3664() -> (Tensor[(3, 12, 3), float64], Tensor[(15, 3, 6), float64], Tensor[(6, 45), float64], Tensor[(600), float64]) {
  %154 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 45), float64] */, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %155 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 45), float64] */, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %156 = reshape(%154, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %157 = reshape(%155, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %158 = @func_3567() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) */;
  %159 = %158.2;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(600), float64] */;
  %161 = @func_3525() /* ty=Tensor[(3, 12, 3), float64] */;
  %162 = @func_568(%156, %157) /* ty=Tensor[(15, 3, 6), float64] */;
  %163 = rsqrt(%160) /* ty=Tensor[(600), float64] */;
  (%161, %162, meta[relay.Constant][13] /* ty=Tensor[(6, 45), float64] */, %163)
}

def @func_3740(%var_3726: Tensor[(378), float64]) -> (Tensor[(3, 12, 3), float32], Tensor[(6, 8, 9), float32], Tensor[(378), float64], Tensor[(432, 1), float32]) {
  %164 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %165 = cast(meta[relay.Constant][14] /* ty=Tensor[(432, 1), float32] */, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
  %166 = cast(meta[relay.Constant][14] /* ty=Tensor[(432, 1), float32] */, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
  %167 = cast(%var_3726, dtype="float64") /* ty=Tensor[(378), float64] */;
  %168 = reshape(%165, newshape=[6, 8, 9]) /* ty=Tensor[(6, 8, 9), float32] */;
  %169 = reshape(%166, newshape=[6, 8, 9]) /* ty=Tensor[(6, 8, 9), float32] */;
  %170 = reshape(%167, newshape=[378]) /* ty=Tensor[(378), float64] */;
  %171 = @func_2427(%168, %169, %170) /* ty=(Tensor[(6, 8, 9), float32], Tensor[(3, 14, 9), float64], Tensor[(378), float64]) */;
  %172 = cast(meta[relay.Constant][14] /* ty=Tensor[(432, 1), float32] */, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
  %173 = %164.0;
  %174 = %171.0;
  %175 = log(%172) /* ty=Tensor[(432, 1), float32] */;
  (%173, %174, %var_3726, %175)
}

def @func_771(%var_769: int16, %var_770: Tensor[(1, 7), int16]) -> (Tensor[(1, 7), int16], Tensor[(15, 3, 6), float64], Tensor[(3, 90), float64]) {
  @func_767(%var_769, %var_770) /* ty=(Tensor[(1, 7), int16], Tensor[(15, 3, 6), float64], Tensor[(3, 90), float64]) */
}

def @func_4267(%var_4264: Tensor[(12, 4, 1), int32], %var_4265: Tensor[(336), uint8], %var_4266: Tensor[(270), float64]) -> (Tensor[(12, 4, 9), bool], Tensor[(3, 12, 3), int16], Tensor[(108), float32], Tensor[(10, 4, 15), bool], Tensor[(600), int8], float64, Tensor[(12, 72), int16], Tensor[(336), uint8], Tensor[(270), float64], Tensor[(2, 8, 9), float64]) {
  @func_4262(%var_4264, %var_4265, %var_4266) /* ty=(Tensor[(12, 4, 9), bool], Tensor[(3, 12, 3), int16], Tensor[(108), float32], Tensor[(10, 4, 15), bool], Tensor[(600), int8], float64, Tensor[(12, 72), int16], Tensor[(336), uint8], Tensor[(270), float64], Tensor[(2, 8, 9), float64]) */
}

def @func_3149() -> (Tensor[(3, 12, 3), float32],) {
  @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */
}

def @func_3995() -> (Tensor[(2, 8, 9), float64],) {
  %178 = fn () -> (Tensor[(2, 8, 9), float64],) {
    %176 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 9), float64] */;
    %177 = sigmoid(%176) /* ty=Tensor[(2, 8, 9), float64] */;
    (%177,)
  };
  %178() /* ty=(Tensor[(2, 8, 9), float64],) */
}

def @func_3227(%var_3224: Tensor[(16, 7, 16), float64], %var_3225: Tensor[(252), int16], %var_3226: Tensor[(16, 7, 16), float64]) -> (Tensor[(15, 3, 6), float64], Tensor[(252), int16], Tensor[(16, 7, 16), uint16], Tensor[(16, 7, 16), float32], Tensor[(3, 12, 3), float32], Tensor[(90), uint8], Tensor[(504), uint16], Tensor[(90), uint8]) {
  %200 = fn (%var_3179: Tensor[(16, 7, 16), float64], %var_3183: Tensor[(252), int16], %var_3185: Tensor[(16, 7, 16), float64]) -> (Tensor[(15, 3, 6), float64], Tensor[(252), int16], Tensor[(16, 7, 16), uint16], Tensor[(16, 7, 16), float32], Tensor[(3, 12, 3), float32], Tensor[(90), uint8], Tensor[(504), uint16], Tensor[(90), uint8]) {
    %179 = cast(%var_3183, dtype="int16") /* ty=Tensor[(252), int16] */;
    %180 = reshape(%179, newshape=[3, 12, 7]) /* ty=Tensor[(3, 12, 7), int16] */;
    %181 = @func_1697(%180) /* ty=(Tensor[(3, 12, 7), int16], Tensor[(3, 12, 7), float32], Tensor[(15, 3, 6), float64], Tensor[(270), float64]) */;
    %182 = cast(%var_3179, dtype="float64") /* ty=Tensor[(16, 7, 16), float64] */;
    %183 = acos(%182) /* ty=Tensor[(16, 7, 16), float64] */;
    %184 = cast(%var_3185, dtype="uint16") /* ty=Tensor[(16, 7, 16), uint16] */;
    %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
    %186 = cast(%183, dtype="uint16") /* ty=Tensor[(16, 7, 16), uint16] */;
    %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %188 = cast(%183, dtype="float32") /* ty=Tensor[(16, 7, 16), float32] */;
    %189 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
    %190 = cast(meta[relay.Constant][16] /* ty=Tensor[(504), uint16] */, dtype="uint16") /* ty=Tensor[(504), uint16] */;
    %191 = cast(meta[relay.Constant][17] /* ty=Tensor[(90), uint8] */, dtype="uint8") /* ty=Tensor[(90), uint8] */;
    %192 = reshape(%190, newshape=[7, 12, 6]) /* ty=Tensor[(7, 12, 6), uint16] */;
    %193 = reshape(%191, newshape=[90]) /* ty=Tensor[(90), uint8] */;
    %194 = @func_1365(%192, %193) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(90), uint8], Tensor[(7, 12, 6), float32]) */;
    %195 = %181.2;
    %196 = left_shift(%186, %187) /* ty=Tensor[(16, 7, 16), uint16] */;
    %197 = atanh(%188) /* ty=Tensor[(16, 7, 16), float32] */;
    %198 = %189.0;
    %199 = %194.1;
    (%195, %var_3183, %196, %197, %198, %199, meta[relay.Constant][16] /* ty=Tensor[(504), uint16] */, meta[relay.Constant][17] /* ty=Tensor[(90), uint8] */)
  };
  %200(%var_3224, %var_3225, %var_3226) /* ty=(Tensor[(15, 3, 6), float64], Tensor[(252), int16], Tensor[(16, 7, 16), uint16], Tensor[(16, 7, 16), float32], Tensor[(3, 12, 3), float32], Tensor[(90), uint8], Tensor[(504), uint16], Tensor[(90), uint8]) */
}

def @func_1303(%var_1293: Tensor[(10, 4, 15), int8], %var_1294: Tensor[(10, 4, 15), int8]) -> (Tensor[(10, 4, 15), bool],) {
  %201 = cast(%var_1294, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
  %202 = shape_of(%var_1293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%var_1293, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %205 = less_equal(%203, %204) /* ty=Tensor[(10, 4, 15), bool] */;
  (%205,)
}

def @func_3062(%var_3059: Tensor[(12, 10, 8), float32], %var_3060: Tensor[(108, 4), float32], %var_3061: Tensor[(378), float64]) -> (Tensor[(12, 10, 8), float32], Tensor[(6, 8, 9), float32], Tensor[(108, 4), float32], Tensor[(378), float64]) {
  @func_3057(%var_3059, %var_3060, %var_3061) /* ty=(Tensor[(12, 10, 8), float32], Tensor[(6, 8, 9), float32], Tensor[(108, 4), float32], Tensor[(378), float64]) */
}

def @func_1738(%var_1736: Tensor[(9, 7, 10), int32]) -> (Tensor[(9, 7, 10), int32],) {
  @func_1735(%var_1736) /* ty=(Tensor[(9, 7, 10), int32],) */
}

def @func_696(%var_695: float64) -> Tensor[(14, 1, 9), bool] {
  %208 = fn (%var_689: float64) -> Tensor[(14, 1, 9), bool] {
    %206 = cast(%var_689, dtype="bool") /* ty=bool */;
    %207 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 1, 9), float64] */, dtype="bool") /* ty=Tensor[(14, 1, 9), bool] */;
    greater_equal(%206, %207) /* ty=Tensor[(14, 1, 9), bool] */
  };
  %208(%var_695) /* ty=Tensor[(14, 1, 9), bool] */
}

def @func_3597(%var_3595: Tensor[(10, 3, 4), uint64], %var_3596: Tensor[(10, 3, 4), uint64]) -> (Tensor[(10, 3, 4), bool], Tensor[(16, 8, 13), float64], Tensor[(52, 2), float64], Tensor[(1664), float64]) {
  @func_3593(%var_3595, %var_3596) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(16, 8, 13), float64], Tensor[(52, 2), float64], Tensor[(1664), float64]) */
}

def @func_3593(%var_3573: Tensor[(10, 3, 4), uint64], %var_3574: Tensor[(10, 3, 4), uint64]) -> (Tensor[(10, 3, 4), bool], Tensor[(16, 8, 13), float64], Tensor[(52, 2), float64], Tensor[(1664), float64]) {
  %209 = cast(%var_3574, dtype="bool") /* ty=Tensor[(10, 3, 4), bool] */;
  %210 = shape_of(%var_3573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_3573, dtype="bool") /* ty=Tensor[(10, 3, 4), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %213 = cast(meta[relay.Constant][19] /* ty=Tensor[(52, 2), float64] */, dtype="float64") /* ty=Tensor[(52, 2), float64] */;
  %214 = cast(meta[relay.Constant][20] /* ty=Tensor[(1664), float64] */, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %215 = reshape(%213, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %216 = reshape(%214, newshape=[16, 8, 13]) /* ty=Tensor[(16, 8, 13), float64] */;
  %217 = greater_equal(%211, %212) /* ty=Tensor[(10, 3, 4), bool] */;
  %218 = @func_2976(%215, %216) /* ty=Tensor[(16, 8, 13), float64] */;
  (%217, %218, meta[relay.Constant][19] /* ty=Tensor[(52, 2), float64] */, meta[relay.Constant][20] /* ty=Tensor[(1664), float64] */)
}

def @func_1735(%var_1730: Tensor[(9, 7, 10), int32]) -> (Tensor[(9, 7, 10), int32],) {
  %219 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 7, 10), int32] */, dtype="int32") /* ty=Tensor[(9, 7, 10), int32] */;
  %220 = shape_of(%var_1730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%var_1730, dtype="int32") /* ty=Tensor[(9, 7, 10), int32] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %223 = bitwise_or(%221, %222) /* ty=Tensor[(9, 7, 10), int32] */;
  (%223,)
}

def @func_571(%var_569: Tensor[(15, 3, 6), float64], %var_570: Tensor[(15, 3, 6), float64]) -> Tensor[(15, 3, 6), float64] {
  %228 = fn (%var_547: Tensor[(15, 3, 6), float64], %var_548: Tensor[(15, 3, 6), float64]) -> Tensor[(15, 3, 6), float64] {
    %224 = cast(%var_548, dtype="float64") /* ty=Tensor[(15, 3, 6), float64] */;
    %225 = shape_of(%var_547, dtype="int32") /* ty=Tensor[(3), int32] */;
    %226 = cast(%var_547, dtype="float64") /* ty=Tensor[(15, 3, 6), float64] */;
    %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%226, %227) /* ty=Tensor[(15, 3, 6), float64] */
  };
  %228(%var_569, %var_570) /* ty=Tensor[(15, 3, 6), float64] */
}

def @func_4492(%var_4470: Tensor[(1792), float64]) -> (Tensor[(3, 12, 3), float32], Tensor[(504), uint16], Tensor[(1792), float64], Tensor[(252), int16]) {
  %229 = @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */;
  %230 = cast(%var_4470, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %231 = cast(meta[relay.Constant][22] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %232 = cast(%var_4470, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %233 = reshape(%230, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), float64] */;
  %234 = reshape(%231, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %235 = reshape(%232, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), float64] */;
  %236 = @func_3223(%233, %234, %235) /* ty=(Tensor[(15, 3, 6), float64], Tensor[(252), int16], Tensor[(16, 7, 16), uint16], Tensor[(16, 7, 16), float32], Tensor[(3, 12, 3), float32], Tensor[(90), uint8], Tensor[(504), uint16], Tensor[(90), uint8]) */;
  %237 = %229.0;
  %238 = %236.6;
  (%237, %238, %var_4470, meta[relay.Constant][22] /* ty=Tensor[(252), int16] */)
}

def @func_4529() -> Tensor[(10, 4, 15), float64] {
  @func_4527() /* ty=Tensor[(10, 4, 15), float64] */
}

def @func_2882(%var_2880: Tensor[(5, 8, 15), float64]) -> (Tensor[(5, 8, 15), float64],) {
  @func_2879(%var_2880) /* ty=(Tensor[(5, 8, 15), float64],) */
}

def @func_5367() -> Tensor[(3, 12, 3), float64] {
  %240 = fn () -> Tensor[(3, 12, 3), float64] {
    %239 = @func_5093() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 9, 1), float64]) */;
    %239.0
  };
  %240() /* ty=Tensor[(3, 12, 3), float64] */
}

def @func_5980(%var_5975: Tensor[(8, 10, 8), float64]) -> (Tensor[(8, 10, 8), float64],) {
  %241 = cast(%var_5975, dtype="float64") /* ty=Tensor[(8, 10, 8), float64] */;
  %242 = asin(%241) /* ty=Tensor[(8, 10, 8), float64] */;
  (%242,)
}

def @func_6345() -> (Tensor[(3, 12, 3), float64], Tensor[(7, 12, 6), float32], Tensor[(504), uint16], Tensor[(1, 90), uint8]) {
  @func_6343() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(7, 12, 6), float32], Tensor[(504), uint16], Tensor[(1, 90), uint8]) */
}

def @func_5253(%var_5227: Tensor[(3, 12, 3), float64]) -> (Tensor[(3, 12, 3), bool],) {
  %243 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %244 = %243.0;
  %245 = cast(%var_5227, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%244, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %249 = equal(%247, %248) /* ty=Tensor[(3, 12, 3), bool] */;
  (%249,)
}

def @func_2431(%var_2428: Tensor[(6, 8, 9), float32], %var_2429: Tensor[(6, 8, 9), float32], %var_2430: Tensor[(378), float64]) -> (Tensor[(6, 8, 9), float32], Tensor[(3, 14, 9), float64], Tensor[(378), float64]) {
  %260 = fn (%var_2408: Tensor[(6, 8, 9), float32], %var_2409: Tensor[(6, 8, 9), float32], %var_2424: Tensor[(378), float64]) -> (Tensor[(6, 8, 9), float32], Tensor[(3, 14, 9), float64], Tensor[(378), float64]) {
    %250 = cast(%var_2409, dtype="bool") /* ty=Tensor[(6, 8, 9), bool] */;
    %251 = shape_of(%var_2408, dtype="int32") /* ty=Tensor[(3), int32] */;
    %252 = cast(%var_2408, dtype="bool") /* ty=Tensor[(6, 8, 9), bool] */;
    %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %254 = less(%252, %253) /* ty=Tensor[(6, 8, 9), bool] */;
    %255 = cast(%254, dtype="float32") /* ty=Tensor[(6, 8, 9), float32] */;
    %256 = cast(%var_2424, dtype="float64") /* ty=Tensor[(378), float64] */;
    %257 = reshape(%256, newshape=[3, 14, 9]) /* ty=Tensor[(3, 14, 9), float64] */;
    %258 = log(%255) /* ty=Tensor[(6, 8, 9), float32] */;
    %259 = @func_1527(%257) /* ty=Tensor[(3, 14, 9), float64] */;
    (%258, %259, %var_2424)
  };
  %260(%var_2428, %var_2429, %var_2430) /* ty=(Tensor[(6, 8, 9), float32], Tensor[(3, 14, 9), float64], Tensor[(378), float64]) */
}

def @func_3325(%var_3324: Tensor[(90), uint8]) -> (Tensor[(3, 12, 3), float32], Tensor[(6, 12, 15), float32], Tensor[(90), uint8]) {
  %267 = fn (%var_3317: Tensor[(90), uint8]) -> (Tensor[(3, 12, 3), float32], Tensor[(6, 12, 15), float32], Tensor[(90), uint8]) {
    %261 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
    %262 = cast(%var_3317, dtype="uint8") /* ty=Tensor[(90), uint8] */;
    %263 = reshape(%262, newshape=[6, 1, 15]) /* ty=Tensor[(6, 1, 15), uint8] */;
    %264 = @func_406(%263) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(6, 12, 15), float32]) */;
    %265 = %261.0;
    %266 = %264.1;
    (%265, %266, %var_3317)
  };
  %267(%var_3324) /* ty=(Tensor[(3, 12, 3), float32], Tensor[(6, 12, 15), float32], Tensor[(90), uint8]) */
}

def @func_5329(%var_5326: Tensor[(48), int32], %var_5327: Tensor[(4, 84), uint8], %var_5328: Tensor[(3, 90), float64]) -> (Tensor[(10, 9, 1), float32], Tensor[(10, 4, 15), bool], Tensor[(48), int32], Tensor[(4, 84), uint8], Tensor[(3, 90), float64]) {
  %279 = fn (%var_5310: Tensor[(48), int32], %var_5311: Tensor[(4, 84), uint8], %var_5312: Tensor[(3, 90), float64]) -> (Tensor[(10, 9, 1), float32], Tensor[(10, 4, 15), bool], Tensor[(48), int32], Tensor[(4, 84), uint8], Tensor[(3, 90), float64]) {
    %268 = @func_3982() /* ty=Tensor[(10, 9, 1), float64] */;
    %269 = cast(%268, dtype="float32") /* ty=Tensor[(10, 9, 1), float32] */;
    %270 = cast(%var_5310, dtype="int32") /* ty=Tensor[(48), int32] */;
    %271 = cast(%var_5311, dtype="uint8") /* ty=Tensor[(4, 84), uint8] */;
    %272 = cast(%var_5312, dtype="float64") /* ty=Tensor[(3, 90), float64] */;
    %273 = reshape(%270, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), int32] */;
    %274 = reshape(%271, newshape=[336]) /* ty=Tensor[(336), uint8] */;
    %275 = reshape(%272, newshape=[270]) /* ty=Tensor[(270), float64] */;
    %276 = @func_4262(%273, %274, %275) /* ty=(Tensor[(12, 4, 9), bool], Tensor[(3, 12, 3), int16], Tensor[(108), float32], Tensor[(10, 4, 15), bool], Tensor[(600), int8], float64, Tensor[(12, 72), int16], Tensor[(336), uint8], Tensor[(270), float64], Tensor[(2, 8, 9), float64]) */;
    %277 = log2(%269) /* ty=Tensor[(10, 9, 1), float32] */;
    %278 = %276.3;
    (%277, %278, %var_5310, %var_5311, %var_5312)
  };
  %279(%var_5326, %var_5327, %var_5328) /* ty=(Tensor[(10, 9, 1), float32], Tensor[(10, 4, 15), bool], Tensor[(48), int32], Tensor[(4, 84), uint8], Tensor[(3, 90), float64]) */
}

def @func_5554(%var_5514: Tensor[(10, 9, 6), bool], %var_5548: Tensor[(48), int32]) -> (Tensor[(10, 9, 6), float32], Tensor[(4, 84), uint8], Tensor[(48), int32], Tensor[(336), uint8], Tensor[(270), float64]) {
  %280 = @func_5437() /* ty=Tensor[(10, 9, ?), bool] */;
  %281 = cast(%280, dtype="uint8") /* ty=Tensor[(10, 9, ?), uint8] */;
  %282 = cast(%var_5514, dtype="uint8") /* ty=Tensor[(10, 9, 6), uint8] */;
  %283 = minimum(%281, %282) /* ty=Tensor[(10, 9, 6), uint8] */;
  %284 = cast(%283, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %285 = shape_of(%var_5514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%var_5514, dtype="float32") /* ty=Tensor[(10, 9, 6), float32] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %288 = cast(%var_5548, dtype="int32") /* ty=Tensor[(48), int32] */;
  %289 = cast(meta[relay.Constant][23] /* ty=Tensor[(336), uint8] */, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %290 = cast(meta[relay.Constant][24] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %291 = reshape(%288, newshape=[48]) /* ty=Tensor[(48), int32] */;
  %292 = reshape(%289, newshape=[4, 84]) /* ty=Tensor[(4, 84), uint8] */;
  %293 = reshape(%290, newshape=[3, 90]) /* ty=Tensor[(3, 90), float64] */;
  %294 = @func_5325(%291, %292, %293) /* ty=(Tensor[(10, 9, 1), float32], Tensor[(10, 4, 15), bool], Tensor[(48), int32], Tensor[(4, 84), uint8], Tensor[(3, 90), float64]) */;
  %295 = divide(%286, %287) /* ty=Tensor[(10, 9, 6), float32] */;
  %296 = %294.3;
  (%295, %296, %var_5548, meta[relay.Constant][23] /* ty=Tensor[(336), uint8] */, meta[relay.Constant][24] /* ty=Tensor[(270), float64] */)
}

def @func_5811(%var_5810: Tensor[(11, 8, 14), float64]) -> (Tensor[(11, 8, 14), bool], Tensor[(2240), float64], Tensor[(11, 8, 14), float64]) {
  %317 = fn (%var_5791: Tensor[(11, 8, 14), float64]) -> (Tensor[(11, 8, 14), bool], Tensor[(2240), float64], Tensor[(11, 8, 14), float64]) {
    %297 = @func_5191() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(11, 8, 14), float64], Tensor[(1232), float64], Tensor[(3, 12, 3), float64]) */;
    %298 = %297.1;
    %299 = cast(%var_5791, dtype="bool") /* ty=Tensor[(11, 8, 14), bool] */;
    %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
    %301 = cast(%298, dtype="bool") /* ty=Tensor[(11, 8, 14), bool] */;
    %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %303 = cast(meta[relay.Constant][25] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %304 = cast(meta[relay.Constant][25] /* ty=Tensor[(2240), float32] */, dtype="float32") /* ty=Tensor[(2240), float32] */;
    %305 = reshape(%303, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
    %306 = reshape(%304, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
    %307 = @func_2021(%305, %306) /* ty=(Tensor[(16, 10, 14), float32],) */;
    %308 = %307.0;
    %309 = cast(%308, dtype="float64") /* ty=Tensor[(16, 10, 14), float64] */;
    %310 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(2240), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %311 = cast(meta[relay.Constant][25] /* ty=Tensor[(2240), float32] */, dtype="float64") /* ty=Tensor[(2240), float64] */;
    %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?), float64] */;
    %313 = cast(%298, dtype="float64") /* ty=Tensor[(11, 8, 14), float64] */;
    %314 = not_equal(%301, %302) /* ty=Tensor[(11, 8, 14), bool] */;
    %315 = power(%311, %312) /* ty=Tensor[(2240), float64] */;
    %316 = asinh(%313) /* ty=Tensor[(11, 8, 14), float64] */;
    (%314, %315, %316)
  };
  %317(%var_5810) /* ty=(Tensor[(11, 8, 14), bool], Tensor[(2240), float64], Tensor[(11, 8, 14), float64]) */
}

def @func_6118(%var_6094: Tensor[(12, 6, 13), float32]) -> (Tensor[(12, 6, 13), float32], Tensor[(12, 6, 13), float32], Tensor[(10, 2, 10), float32], Tensor[(20), float32]) {
  %318 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 6, 13), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 13), float32] */;
  %319 = shape_of(%var_6094, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%var_6094, dtype="float32") /* ty=Tensor[(12, 6, 13), float32] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %322 = cast(%var_6094, dtype="float32") /* ty=Tensor[(12, 6, 13), float32] */;
  %323 = cast(meta[relay.Constant][27] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %324 = reshape(%323, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), float32] */;
  %325 = divide(%320, %321) /* ty=Tensor[(12, 6, 13), float32] */;
  %326 = cos(%322) /* ty=Tensor[(12, 6, 13), float32] */;
  %327 = @func_5639(%324) /* ty=Tensor[(10, 2, 10), float32] */;
  (%325, %326, %327, meta[relay.Constant][27] /* ty=Tensor[(20), float32] */)
}

def @func_2364(%var_2362: Tensor[(1, 13, 7), float64], %var_2363: Tensor[(270, 1), float64]) -> (Tensor[(1, 13, 7), float32], Tensor[(14, 1, 9), bool], Tensor[(2, 168), uint8], Tensor[(270, 1), float64], float64) {
  %342 = fn (%var_2348: Tensor[(1, 13, 7), float64], %var_2358: Tensor[(270, 1), float64]) -> (Tensor[(1, 13, 7), float32], Tensor[(14, 1, 9), bool], Tensor[(2, 168), uint8], Tensor[(270, 1), float64], float64) {
    %328 = cast(%var_2348, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
    %329 = acosh(%328) /* ty=Tensor[(1, 13, 7), float64] */;
    %330 = cast(%329, dtype="float32") /* ty=Tensor[(1, 13, 7), float32] */;
    %331 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 168), uint8] */, dtype="uint8") /* ty=Tensor[(2, 168), uint8] */;
    %332 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 168), uint8] */, dtype="uint8") /* ty=Tensor[(2, 168), uint8] */;
    %333 = cast(%var_2358, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
    %334 = cast(-4.70201f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %335 = reshape(%331, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), uint8] */;
    %336 = reshape(%332, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), uint8] */;
    %337 = reshape(%333, newshape=[30, 9]) /* ty=Tensor[(30, 9), float64] */;
    %338 = reshape(%334, newshape=[]) /* ty=float64 */;
    %339 = @func_2147(%335, %336, %337, %338) /* ty=(Tensor[(4, 14, 6), bool], Tensor[(15, 3, 6), float64], Tensor[(30, 9), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 1, 9), bool], float64) */;
    %340 = cos(%330) /* ty=Tensor[(1, 13, 7), float32] */;
    %341 = %339.4;
    (%340, %341, meta[relay.Constant][28] /* ty=Tensor[(2, 168), uint8] */, %var_2358, -4.70201f64 /* ty=float64 */)
  };
  %342(%var_2362, %var_2363) /* ty=(Tensor[(1, 13, 7), float32], Tensor[(14, 1, 9), bool], Tensor[(2, 168), uint8], Tensor[(270, 1), float64], float64) */
}

def @func_5760(%var_5758: Tensor[(48), int32], %var_5759: Tensor[(6, 45), float64]) -> (Tensor[(3, 90), float64], Tensor[(336), uint8], Tensor[(6, 45), float64], Tensor[(120), uint64], Tensor[(10, 9, 48), int32], Tensor[(10, 9, 1), float64]) {
  @func_5756(%var_5758, %var_5759) /* ty=(Tensor[(3, 90), float64], Tensor[(336), uint8], Tensor[(6, 45), float64], Tensor[(120), uint64], Tensor[(10, 9, 48), int32], Tensor[(10, 9, 1), float64]) */
}

def @func_4369(%var_4367: Tensor[(10, 9, 3), float64], %var_4368: Tensor[(10, 9, 3), float64]) -> (Tensor[(1664), float64], Tensor[(120), uint64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 1), float32]) {
  %365 = fn (%var_4346: Tensor[(10, 9, 3), float64], %var_4351: Tensor[(10, 9, 3), float64]) -> (Tensor[(1664), float64], Tensor[(120), uint64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 1), float32]) {
    %343 = cast(meta[relay.Constant][29] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %344 = cast(meta[relay.Constant][29] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %345 = reshape(%343, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), uint64] */;
    %346 = reshape(%344, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), uint64] */;
    %347 = @func_3593(%345, %346) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(16, 8, 13), float64], Tensor[(52, 2), float64], Tensor[(1664), float64]) */;
    %348 = @func_4213() /* ty=(Tensor[(10, 9, 1), float64],) */;
    %349 = %348.0;
    %350 = cast(%349, dtype="float64") /* ty=Tensor[(10, 9, 1), float64] */;
    %351 = asin(%350) /* ty=Tensor[(10, 9, 1), float64] */;
    %352 = cast(%351, dtype="float64") /* ty=Tensor[(10, 9, 1), float64] */;
    %353 = cast(%var_4346, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
    %354 = power(%352, %353) /* ty=Tensor[(10, 9, 3), float64] */;
    %355 = cast(%var_4351, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
    %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
    %357 = cast(%354, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
    %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %359 = cast(%351, dtype="float64") /* ty=Tensor[(10, 9, 1), float64] */;
    %360 = sigmoid(%359) /* ty=Tensor[(10, 9, 1), float64] */;
    %361 = cast(%360, dtype="float32") /* ty=Tensor[(10, 9, 1), float32] */;
    %362 = %347.3;
    %363 = mod(%357, %358) /* ty=Tensor[(10, 9, 3), float32] */;
    %364 = cos(%361) /* ty=Tensor[(10, 9, 1), float32] */;
    (%362, meta[relay.Constant][29] /* ty=Tensor[(120), uint64] */, %363, %364)
  };
  %365(%var_4367, %var_4368) /* ty=(Tensor[(1664), float64], Tensor[(120), uint64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 1), float32]) */
}

def @func_5192() -> (Tensor[(3, 12, 3), float64], Tensor[(11, 8, 14), float64], Tensor[(1232), float64], Tensor[(3, 12, 3), float64]) {
  %373 = fn () -> (Tensor[(3, 12, 3), float64], Tensor[(11, 8, 14), float64], Tensor[(1232), float64], Tensor[(3, 12, 3), float64]) {
    %366 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
    %367 = cast(meta[relay.Constant][30] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
    %368 = reshape(%367, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), float64] */;
    %369 = @func_5127(%368) /* ty=(Tensor[(11, 8, 14), float64],) */;
    %370 = %366.0;
    %371 = %369.0;
    %372 = @func_5023() /* ty=Tensor[(3, 12, 3), float64] */;
    (%370, %371, meta[relay.Constant][30] /* ty=Tensor[(1232), float64] */, %372)
  };
  %373() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(11, 8, 14), float64], Tensor[(1232), float64], Tensor[(3, 12, 3), float64]) */
}

def @func_3131() -> (Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) {
  @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */
}

def @func_5129(%var_5128: Tensor[(11, 8, 14), float64]) -> (Tensor[(11, 8, 14), float64],) {
  %376 = fn (%var_5114: Tensor[(11, 8, 14), float64]) -> (Tensor[(11, 8, 14), float64],) {
    %374 = cast(%var_5114, dtype="float64") /* ty=Tensor[(11, 8, 14), float64] */;
    %375 = tan(%374) /* ty=Tensor[(11, 8, 14), float64] */;
    (%375,)
  };
  %376(%var_5128) /* ty=(Tensor[(11, 8, 14), float64],) */
}

def @func_5094() -> (Tensor[(3, 12, 3), float64], Tensor[(10, 9, 1), float64]) {
  %381 = fn () -> (Tensor[(3, 12, 3), float64], Tensor[(10, 9, 1), float64]) {
    %377 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
    %378 = @func_4213() /* ty=(Tensor[(10, 9, 1), float64],) */;
    %379 = %377.0;
    %380 = %378.0;
    (%379, %380)
  };
  %381() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 9, 1), float64]) */
}

def @func_4214() -> (Tensor[(10, 9, 1), float64],) {
  %384 = fn () -> (Tensor[(10, 9, 1), float64],) {
    %382 = @func_4141() /* ty=(Tensor[(10, 9, 1), float64],) */;
    %383 = %382.0;
    (%383,)
  };
  %384() /* ty=(Tensor[(10, 9, 1), float64],) */
}

def @func_3975(%var_3973: Tensor[(630), int32]) -> (Tensor[(3, 12, 3), float64], Tensor[(9, 7, 10), int32], Tensor[(630), int32], Tensor[(3, 12, 3), float32]) {
  @func_3972(%var_3973) /* ty=(Tensor[(3, 12, 3), float64], Tensor[(9, 7, 10), int32], Tensor[(630), int32], Tensor[(3, 12, 3), float32]) */
}

def @func_5025() -> Tensor[(3, 12, 3), float64] {
  @func_5023() /* ty=Tensor[(3, 12, 3), float64] */
}

def @func_3525() -> Tensor[(3, 12, 3), float64] {
  %385 = @func_3408() /* ty=Tensor[(3, 12, 3), float32] */;
  %386 = cast(%385, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  log(%386) /* ty=Tensor[(3, 12, 3), float64] */
}

def @func_4308(%var_4281: Tensor[(3, 12, 3), float64]) -> (Tensor[(3, 12, 3), bool], Tensor[(52, 2), float64]) {
  %387 = @func_3567() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) */;
  %388 = %387.0;
  %389 = cast(%var_4281, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %393 = @func_3860() /* ty=(Tensor[(11, 14, 14), int32], Tensor[(52, 2), float64], Tensor[(120), uint64]) */;
  %394 = less_equal(%391, %392) /* ty=Tensor[(3, 12, 3), bool] */;
  %395 = %393.1;
  (%394, %395)
}

def @func_3798() -> (Tensor[(3, 12, 3), float32],) {
  @func_3796() /* ty=(Tensor[(3, 12, 3), float32],) */
}

def @func_3771() -> (Tensor[(10, 9, 1), float64],) {
  %396 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 9, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 9, 1), float64] */;
  %397 = sqrt(%396) /* ty=Tensor[(10, 9, 1), float64] */;
  (%397,)
}

def @func_6121(%var_6119: Tensor[(12, 6, 13), float32]) -> (Tensor[(12, 6, 13), float32], Tensor[(12, 6, 13), float32], Tensor[(10, 2, 10), float32], Tensor[(20), float32]) {
  @func_6118(%var_6119) /* ty=(Tensor[(12, 6, 13), float32], Tensor[(12, 6, 13), float32], Tensor[(10, 2, 10), float32], Tensor[(20), float32]) */
}

def @func_3097(%var_3095: Tensor[(10, 11, 10), int64]) -> Tensor[(10, 11, 10), int64] {
  @func_3094(%var_3095) /* ty=Tensor[(10, 11, 10), int64] */
}

def @func_1529(%var_1528: Tensor[(3, 14, 9), float64]) -> Tensor[(3, 14, 9), float64] {
  %406 = fn (%var_1505: Tensor[(3, 14, 9), float64]) -> Tensor[(3, 14, 9), float64] {
    %398 = cast(%var_1505, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
    %399 = log2(%398) /* ty=Tensor[(3, 14, 9), float64] */;
    %400 = cast(%399, dtype="float32") /* ty=Tensor[(3, 14, 9), float32] */;
    %401 = rsqrt(%400) /* ty=Tensor[(3, 14, 9), float32] */;
    %402 = cast(%399, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
    %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
    %404 = cast(%401, dtype="float64") /* ty=Tensor[(3, 14, 9), float64] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%404, %405) /* ty=Tensor[(3, 14, 9), float64] */
  };
  %406(%var_1528) /* ty=Tensor[(3, 14, 9), float64] */
}

def @func_6291() -> (Tensor[(10, 9, 1), float64],) {
  @func_6289() /* ty=(Tensor[(10, 9, 1), float64],) */
}

def @func_3862() -> (Tensor[(11, 14, 14), int32], Tensor[(52, 2), float64], Tensor[(120), uint64]) {
  @func_3860() /* ty=(Tensor[(11, 14, 14), int32], Tensor[(52, 2), float64], Tensor[(120), uint64]) */
}

def @func_3626(%var_3625: Tensor[(270), float64]) -> (Tensor[(3, 12, 3), float32], Tensor[(1, 13, 7), float32], Tensor[(91), float64], Tensor[(270), float64], Tensor[(3, 12, 3), float64]) {
  %417 = fn (%var_3618: Tensor[(270), float64]) -> (Tensor[(3, 12, 3), float32], Tensor[(1, 13, 7), float32], Tensor[(91), float64], Tensor[(270), float64], Tensor[(3, 12, 3), float64]) {
    %407 = @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */;
    %408 = cast(meta[relay.Constant][32] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
    %409 = cast(%var_3618, dtype="float64") /* ty=Tensor[(270), float64] */;
    %410 = reshape(%408, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
    %411 = reshape(%409, newshape=[270, 1]) /* ty=Tensor[(270, 1), float64] */;
    %412 = @func_2361(%410, %411) /* ty=(Tensor[(1, 13, 7), float32], Tensor[(14, 1, 9), bool], Tensor[(2, 168), uint8], Tensor[(270, 1), float64], float64) */;
    %413 = @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */;
    %414 = %407.0;
    %415 = %412.0;
    %416 = %413.1;
    (%414, %415, meta[relay.Constant][32] /* ty=Tensor[(91), float64] */, %var_3618, %416)
  };
  %417(%var_3625) /* ty=(Tensor[(3, 12, 3), float32], Tensor[(1, 13, 7), float32], Tensor[(91), float64], Tensor[(270), float64], Tensor[(3, 12, 3), float64]) */
}

def @func_2024(%var_2022: Tensor[(16, 10, 14), float32], %var_2023: Tensor[(16, 10, 14), float32]) -> (Tensor[(16, 10, 14), float32],) {
  %423 = fn (%var_2014: Tensor[(16, 10, 14), float32], %var_2015: Tensor[(16, 10, 14), float32]) -> (Tensor[(16, 10, 14), float32],) {
    %418 = cast(%var_2015, dtype="float32") /* ty=Tensor[(16, 10, 14), float32] */;
    %419 = shape_of(%var_2014, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(%var_2014, dtype="float32") /* ty=Tensor[(16, 10, 14), float32] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %422 = mod(%420, %421) /* ty=Tensor[(16, 10, 14), float32] */;
    (%422,)
  };
  %423(%var_2022, %var_2023) /* ty=(Tensor[(16, 10, 14), float32],) */
}

def @func_5432() -> (Tensor[(10, 9, 1), float64],) {
  %426 = fn () -> (Tensor[(10, 9, 1), float64],) {
    %424 = @func_3771() /* ty=(Tensor[(10, 9, 1), float64],) */;
    %425 = %424.0;
    (%425,)
  };
  %426() /* ty=(Tensor[(10, 9, 1), float64],) */
}

def @func_3666() -> (Tensor[(3, 12, 3), float64], Tensor[(15, 3, 6), float64], Tensor[(6, 45), float64], Tensor[(600), float64]) {
  @func_3664() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(15, 3, 6), float64], Tensor[(6, 45), float64], Tensor[(600), float64]) */
}

def @func_5965(%var_5964: Tensor[(616, 2), float64]) -> (Tensor[(3, 12, 7), int16], Tensor[(252), int16], Tensor[(3, 12, 3), float64], Tensor[(11, 8, 14), float64], Tensor[(616, 2), float64], Tensor[(16, 10, 14), float32], Tensor[(432, 600), bool], Tensor[(10, 9, 1), float64]) {
  %450 = fn (%var_5884: Tensor[(616, 2), float64]) -> (Tensor[(3, 12, 7), int16], Tensor[(252), int16], Tensor[(3, 12, 3), float64], Tensor[(11, 8, 14), float64], Tensor[(616, 2), float64], Tensor[(16, 10, 14), float32], Tensor[(432, 600), bool], Tensor[(10, 9, 1), float64]) {
    %427 = cast(meta[relay.Constant][33] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
    %428 = reshape(%427, newshape=[3, 12, 7]) /* ty=Tensor[(3, 12, 7), int16] */;
    %429 = @func_1697(%428) /* ty=(Tensor[(3, 12, 7), int16], Tensor[(3, 12, 7), float32], Tensor[(15, 3, 6), float64], Tensor[(270), float64]) */;
    %430 = cast(%var_5884, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
    %431 = reshape(%430, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), float64] */;
    %432 = @func_5127(%431) /* ty=(Tensor[(11, 8, 14), float64],) */;
    %433 = cast(meta[relay.Constant][34] /* ty=Tensor[(432, 1), float32] */, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
    %434 = reshape(%433, newshape=[4, 108]) /* ty=Tensor[(4, 108), float32] */;
    %435 = @func_3463(%434) /* ty=(Tensor[(3, 12, 3), float32], Tensor[(120, 8), float32], Tensor[(4, 108), float32], Tensor[(42, 9), float64], Tensor[(6, 8, 9), int8], Tensor[(16, 10, 14), float32], Tensor[(2240, 1), float32]) */;
    %436 = @func_3567() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) */;
    %437 = %436.2;
    %438 = cast(%437, dtype="float32") /* ty=Tensor[(600), float32] */;
    %439 = cast(meta[relay.Constant][34] /* ty=Tensor[(432, 1), float32] */, dtype="float32") /* ty=Tensor[(432, 1), float32] */;
    %440 = floor_divide(%438, %439) /* ty=Tensor[(432, 600), float32] */;
    %441 = cast(%440, dtype="bool") /* ty=Tensor[(432, 600), bool] */;
    %442 = cast(%437, dtype="bool") /* ty=Tensor[(600), bool] */;
    %443 = @func_4141() /* ty=(Tensor[(10, 9, 1), float64],) */;
    %444 = %429.0;
    %445 = @func_5023() /* ty=Tensor[(3, 12, 3), float64] */;
    %446 = %432.0;
    %447 = %435.5;
    %448 = less(%441, %442) /* ty=Tensor[(432, 600), bool] */;
    %449 = %443.0;
    (%444, meta[relay.Constant][33] /* ty=Tensor[(252), int16] */, %445, %446, %var_5884, %447, %448, %449)
  };
  %450(%var_5964) /* ty=(Tensor[(3, 12, 7), int16], Tensor[(252), int16], Tensor[(3, 12, 3), float64], Tensor[(11, 8, 14), float64], Tensor[(616, 2), float64], Tensor[(16, 10, 14), float32], Tensor[(432, 600), bool], Tensor[(10, 9, 1), float64]) */
}

def @func_6145(%var_6144: Tensor[(10, 9, 12), float64]) -> Tensor[(10, 9, 12), bool] {
  %455 = fn (%var_6135: Tensor[(10, 9, 12), float64]) -> Tensor[(10, 9, 12), bool] {
    %451 = @func_3771() /* ty=(Tensor[(10, 9, 1), float64],) */;
    %452 = %451.0;
    %453 = cast(%452, dtype="bool") /* ty=Tensor[(10, 9, 1), bool] */;
    %454 = cast(%var_6135, dtype="bool") /* ty=Tensor[(10, 9, 12), bool] */;
    logical_or(%453, %454) /* ty=Tensor[(10, 9, 12), bool] */
  };
  %455(%var_6144) /* ty=Tensor[(10, 9, 12), bool] */
}

def @main() -> Tensor[(3, 12, 3), float32] {
  %456 = @func_5366() /* ty=Tensor[(3, 12, 3), float64] */;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
  atan(%457) /* ty=Tensor[(3, 12, 3), float32] */
}

def @func_2745(%var_2743: Tensor[(16, 2, 16), int32], %var_2744: Tensor[(16, 2, 16), int32]) -> (Tensor[(16, 2, 16), bool], Tensor[(16, 2, 16), float32]) {
  %468 = fn (%var_2728: Tensor[(16, 2, 16), int32], %var_2729: Tensor[(16, 2, 16), int32]) -> (Tensor[(16, 2, 16), bool], Tensor[(16, 2, 16), float32]) {
    %458 = cast(%var_2729, dtype="bool") /* ty=Tensor[(16, 2, 16), bool] */;
    %459 = shape_of(%var_2728, dtype="int32") /* ty=Tensor[(3), int32] */;
    %460 = cast(%var_2728, dtype="bool") /* ty=Tensor[(16, 2, 16), bool] */;
    %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %462 = cast(%var_2728, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
    %463 = shape_of(%var_2729, dtype="int32") /* ty=Tensor[(3), int32] */;
    %464 = cast(%var_2729, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
    %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %466 = not_equal(%460, %461) /* ty=Tensor[(16, 2, 16), bool] */;
    %467 = floor_mod(%464, %465) /* ty=Tensor[(16, 2, 16), float32] */;
    (%466, %467)
  };
  %468(%var_2743, %var_2744) /* ty=(Tensor[(16, 2, 16), bool], Tensor[(16, 2, 16), float32]) */
}

def @func_3147() -> (Tensor[(3, 12, 3), float32],) {
  %469 = @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */;
  %470 = %469.0;
  (%470,)
}

def @func_5420(%var_5419: Tensor[(10, 4, 15), bool]) -> (Tensor[(10, 4, 15), bool],) {
  %478 = fn (%var_5412: Tensor[(10, 4, 15), bool]) -> (Tensor[(10, 4, 15), bool],) {
    %471 = @func_3567() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) */;
    %472 = %471.1;
    %473 = cast(%var_5412, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
    %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(%472, dtype="bool") /* ty=Tensor[(10, 4, 15), bool] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %477 = logical_or(%475, %476) /* ty=Tensor[(10, 4, 15), bool] */;
    (%477,)
  };
  %478(%var_5419) /* ty=(Tensor[(10, 4, 15), bool],) */
}

def @func_4892(%var_4888: Tensor[(10, 16), float64], %var_4889: Tensor[(1, 104), float64], %var_4890: int16, %var_4891: Tensor[(7), int16]) -> (Tensor[(10, 16), float64], Tensor[(1, 104), float64], Tensor[(1664), float64], Tensor[(16, 8, 13), float32], Tensor[(3, 90), float64], int16, Tensor[(7), int16]) {
  @func_4886(%var_4888, %var_4889, %var_4890, %var_4891) /* ty=(Tensor[(10, 16), float64], Tensor[(1, 104), float64], Tensor[(1664), float64], Tensor[(16, 8, 13), float32], Tensor[(3, 90), float64], int16, Tensor[(7), int16]) */
}

def @func_4961() -> (Tensor[(10, 9, 1), float64], Tensor[(54, 2), bool], Tensor[(3, 12, 3), float32], Tensor[(600), float32], Tensor[(10, 9, 3), float32], Tensor[(270), float64]) {
  %479 = @func_4141() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %480 = cast(meta[relay.Constant][35] /* ty=Tensor[(54, 2), float32] */, dtype="float32") /* ty=Tensor[(54, 2), float32] */;
  %481 = tan(%480) /* ty=Tensor[(54, 2), float32] */;
  %482 = cast(meta[relay.Constant][35] /* ty=Tensor[(54, 2), float32] */, dtype="bool") /* ty=Tensor[(54, 2), bool] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(2), int32] */;
  %484 = cast(%481, dtype="bool") /* ty=Tensor[(54, 2), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %486 = cast(meta[relay.Constant][35] /* ty=Tensor[(54, 2), float32] */, dtype="float32") /* ty=Tensor[(54, 2), float32] */;
  %487 = reshape(%486, newshape=[3, 12, 3]) /* ty=Tensor[(3, 12, 3), float32] */;
  %488 = @func_3911(%487) /* ty=(Tensor[(600), float64], Tensor[(3, 12, 3), int16]) */;
  %489 = %488.0;
  %490 = cast(%489, dtype="float32") /* ty=Tensor[(600), float32] */;
  %491 = cast(meta[relay.Constant][36] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %492 = cast(meta[relay.Constant][36] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %493 = reshape(%491, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float64] */;
  %494 = reshape(%492, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float64] */;
  %495 = @func_4366(%493, %494) /* ty=(Tensor[(1664), float64], Tensor[(120), uint64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 1), float32]) */;
  %496 = %479.0;
  %497 = logical_and(%484, %485) /* ty=Tensor[(54, 2), bool] */;
  %498 = @func_3408() /* ty=Tensor[(3, 12, 3), float32] */;
  %499 = tan(%490) /* ty=Tensor[(600), float32] */;
  %500 = %495.2;
  (%496, %497, %498, %499, %500, meta[relay.Constant][36] /* ty=Tensor[(270), float64] */)
}

def @func_5023() -> Tensor[(3, 12, 3), float64] {
  %501 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %502 = %501.0;
  %503 = cast(%502, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  acosh(%503) /* ty=Tensor[(3, 12, 3), float64] */
}

def @func_5573() -> Tensor[(10, 9, ?), bool] {
  %505 = fn () -> Tensor[(10, 9, ?), bool] {
    %504 = @func_4664() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float64], Tensor[(3, 12, 3), float32], Tensor[(432), float32], Tensor[(10, 9, ?), bool]) */;
    %504.5
  };
  %505() /* ty=Tensor[(10, 9, ?), bool] */
}

def @func_3094(%var_3089: Tensor[(10, 11, 10), int64]) -> Tensor[(10, 11, 10), int64] {
  %506 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 11, 10), int64] */, dtype="int64") /* ty=Tensor[(10, 11, 10), int64] */;
  %507 = shape_of(%var_3089, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%var_3089, dtype="int64") /* ty=Tensor[(10, 11, 10), int64] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%508, %509) /* ty=Tensor[(10, 11, 10), int64] */
}

def @func_5438() -> Tensor[(10, 9, ?), bool] {
  %510 = fn () -> Tensor[(10, 9, ?), bool] {
    @func_4411() /* ty=Tensor[(10, 9, ?), bool] */
  };
  %510() /* ty=Tensor[(10, 9, ?), bool] */
}

def @func_2879(%var_2861: Tensor[(5, 8, 15), float64]) -> (Tensor[(5, 8, 15), float64],) {
  %511 = cast(%var_2861, dtype="float64") /* ty=Tensor[(5, 8, 15), float64] */;
  %512 = sigmoid(%511) /* ty=Tensor[(5, 8, 15), float64] */;
  (%512,)
}

def @func_5256(%var_5254: Tensor[(3, 12, 3), float64]) -> (Tensor[(3, 12, 3), bool],) {
  @func_5253(%var_5254) /* ty=(Tensor[(3, 12, 3), bool],) */
}

def @func_2979(%var_2977: Tensor[(1, 8, 13), float64], %var_2978: Tensor[(16, 8, 13), float64]) -> Tensor[(16, 8, 13), float64] {
  %515 = fn (%var_2969: Tensor[(1, 8, 13), float64], %var_2970: Tensor[(16, 8, 13), float64]) -> Tensor[(16, 8, 13), float64] {
    %513 = cast(%var_2969, dtype="float64") /* ty=Tensor[(1, 8, 13), float64] */;
    %514 = cast(%var_2970, dtype="float64") /* ty=Tensor[(16, 8, 13), float64] */;
    power(%513, %514) /* ty=Tensor[(16, 8, 13), float64] */
  };
  %515(%var_2977, %var_2978) /* ty=Tensor[(16, 8, 13), float64] */
}

def @func_1368(%var_1366: Tensor[(7, 12, 6), uint16], %var_1367: Tensor[(90), uint8]) -> (Tensor[(6, 12, 15), float64], Tensor[(90), uint8], Tensor[(7, 12, 6), float32]) {
  %529 = fn (%var_1332: Tensor[(7, 12, 6), uint16], %var_1341: Tensor[(90), uint8]) -> (Tensor[(6, 12, 15), float64], Tensor[(90), uint8], Tensor[(7, 12, 6), float32]) {
    %516 = cast(%var_1341, dtype="uint8") /* ty=Tensor[(90), uint8] */;
    %517 = reshape(%516, newshape=[6, 1, 15]) /* ty=Tensor[(6, 1, 15), uint8] */;
    %518 = @func_406(%517) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(6, 12, 15), float32]) */;
    %519 = cast(%var_1332, dtype="bool") /* ty=Tensor[(7, 12, 6), bool] */;
    %520 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(7, 12, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 12, 6), uint16] */, dtype="bool") /* ty=Tensor[(7, 12, 6), bool] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %523 = greater_equal(%521, %522) /* ty=Tensor[(7, 12, 6), bool] */;
    %524 = cast(%523, dtype="float32") /* ty=Tensor[(7, 12, 6), float32] */;
    %525 = sigmoid(%524) /* ty=Tensor[(7, 12, 6), float32] */;
    %526 = cast(%525, dtype="float32") /* ty=Tensor[(7, 12, 6), float32] */;
    %527 = %518.0;
    %528 = log(%526) /* ty=Tensor[(7, 12, 6), float32] */;
    (%527, %var_1341, %528)
  };
  %529(%var_1366, %var_1367) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(90), uint8], Tensor[(7, 12, 6), float32]) */
}

def @func_4495(%var_4493: Tensor[(1792), float64]) -> (Tensor[(3, 12, 3), float32], Tensor[(504), uint16], Tensor[(1792), float64], Tensor[(252), int16]) {
  @func_4492(%var_4493) /* ty=(Tensor[(3, 12, 3), float32], Tensor[(504), uint16], Tensor[(1792), float64], Tensor[(252), int16]) */
}

def @func_4311(%var_4309: Tensor[(3, 12, 3), float64]) -> (Tensor[(3, 12, 3), bool], Tensor[(52, 2), float64]) {
  @func_4308(%var_4309) /* ty=(Tensor[(3, 12, 3), bool], Tensor[(52, 2), float64]) */
}

def @func_1307(%var_1305: Tensor[(10, 4, 15), int8], %var_1306: Tensor[(10, 4, 15), int8]) -> (Tensor[(10, 4, 15), bool],) {
  @func_1303(%var_1305, %var_1306) /* ty=(Tensor[(10, 4, 15), bool],) */
}

def @func_6393(%var_6391: Tensor[(432), float32]) -> (Tensor[(7, 12, 6), uint16], Tensor[(3, 12, 3), float64], Tensor[(6, 8, 9), int8], Tensor[(432), float32]) {
  @func_6390(%var_6391) /* ty=(Tensor[(7, 12, 6), uint16], Tensor[(3, 12, 3), float64], Tensor[(6, 8, 9), int8], Tensor[(432), float32]) */
}

def @func_1697(%var_1647: Tensor[(3, 12, 7), int16]) -> (Tensor[(3, 12, 7), int16], Tensor[(3, 12, 7), float32], Tensor[(15, 3, 6), float64], Tensor[(270), float64]) {
  %530 = cast(%var_1647, dtype="int16") /* ty=Tensor[(3, 12, 7), int16] */;
  %531 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(3, 12, 7), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 12, 7), int16] */, dtype="int16") /* ty=Tensor[(3, 12, 7), int16] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %534 = cast(%var_1647, dtype="float32") /* ty=Tensor[(3, 12, 7), float32] */;
  %535 = cast(meta[relay.Constant][40] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %536 = cast(meta[relay.Constant][40] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %537 = reshape(%535, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %538 = reshape(%536, newshape=[15, 3, 6]) /* ty=Tensor[(15, 3, 6), float64] */;
  %539 = bitwise_and(%532, %533) /* ty=Tensor[(3, 12, 7), int16] */;
  %540 = tan(%534) /* ty=Tensor[(3, 12, 7), float32] */;
  %541 = @func_568(%537, %538) /* ty=Tensor[(15, 3, 6), float64] */;
  (%539, %540, %541, meta[relay.Constant][40] /* ty=Tensor[(270), float64] */)
}

def @func_6289() -> (Tensor[(10, 9, 1), float64],) {
  %542 = @func_4552() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %543 = %542.0;
  (%543,)
}

def @func_6390(%var_6388: Tensor[(432), float32]) -> (Tensor[(7, 12, 6), uint16], Tensor[(3, 12, 3), float64], Tensor[(6, 8, 9), int8], Tensor[(432), float32]) {
  %544 = @func_6343() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(7, 12, 6), float32], Tensor[(504), uint16], Tensor[(1, 90), uint8]) */;
  %545 = %544.1;
  %546 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 12, 6), float32] */, dtype="uint16") /* ty=Tensor[(7, 12, 6), uint16] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="uint16") /* ty=Tensor[(7, 12, 6), uint16] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %550 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %551 = cast(%var_6388, dtype="float32") /* ty=Tensor[(432), float32] */;
  %552 = reshape(%551, newshape=[4, 108]) /* ty=Tensor[(4, 108), float32] */;
  %553 = @func_3463(%552) /* ty=(Tensor[(3, 12, 3), float32], Tensor[(120, 8), float32], Tensor[(4, 108), float32], Tensor[(42, 9), float64], Tensor[(6, 8, 9), int8], Tensor[(16, 10, 14), float32], Tensor[(2240, 1), float32]) */;
  %554 = minimum(%548, %549) /* ty=Tensor[(7, 12, 6), uint16] */;
  %555 = %550.0;
  %556 = %553.4;
  (%554, %555, %556, %var_6388)
}

def @func_924(%var_865: Tensor[(2, 9, 3), float32]) -> (Tensor[(6, 12, 15), float64], Tensor[(90), uint8], Tensor[(15, 3, 6), float64], Tensor[(7), int16], Tensor[(2, 9, 3), bool]) {
  %557 = cast(meta[relay.Constant][42] /* ty=Tensor[(90), uint8] */, dtype="uint8") /* ty=Tensor[(90), uint8] */;
  %558 = reshape(%557, newshape=[6, 1, 15]) /* ty=Tensor[(6, 1, 15), uint8] */;
  %559 = @func_406(%558) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(6, 12, 15), float32]) */;
  %560 = cast(meta[relay.Constant][43] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %561 = cast(meta[relay.Constant][44] /* ty=Tensor[(7), int16] */, dtype="int16") /* ty=Tensor[(7), int16] */;
  %562 = reshape(%560, newshape=[]) /* ty=int16 */;
  %563 = reshape(%561, newshape=[1, 7]) /* ty=Tensor[(1, 7), int16] */;
  %564 = @func_767(%562, %563) /* ty=(Tensor[(1, 7), int16], Tensor[(15, 3, 6), float64], Tensor[(3, 90), float64]) */;
  %565 = cast(%var_865, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  %566 = asinh(%565) /* ty=Tensor[(2, 9, 3), float32] */;
  %567 = cast(%566, dtype="bool") /* ty=Tensor[(2, 9, 3), bool] */;
  %568 = cast(meta[relay.Constant][43] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %569 = %559.0;
  %570 = %564.1;
  %571 = not_equal(%567, %568) /* ty=Tensor[(2, 9, 3), bool] */;
  (%569, meta[relay.Constant][42] /* ty=Tensor[(90), uint8] */, %570, meta[relay.Constant][44] /* ty=Tensor[(7), int16] */, %571)
}

def @func_3567() -> (Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) {
  %572 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %573 = cast(meta[relay.Constant][45] /* ty=Tensor[(600), int8] */, dtype="int8") /* ty=Tensor[(600), int8] */;
  %574 = cast(meta[relay.Constant][45] /* ty=Tensor[(600), int8] */, dtype="int8") /* ty=Tensor[(600), int8] */;
  %575 = reshape(%573, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), int8] */;
  %576 = reshape(%574, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), int8] */;
  %577 = @func_1303(%575, %576) /* ty=(Tensor[(10, 4, 15), bool],) */;
  %578 = %572.0;
  %579 = %577.0;
  (%578, %579, meta[relay.Constant][45] /* ty=Tensor[(600), int8] */)
}

def @func_406(%var_344: Tensor[(6, 1, 15), uint8]) -> (Tensor[(6, 12, 15), float64], Tensor[(6, 12, 15), float32]) {
  %580 = cast(%var_344, dtype="uint8") /* ty=Tensor[(6, 1, 15), uint8] */;
  %581 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 12, 15), uint8] */, dtype="uint8") /* ty=Tensor[(6, 12, 15), uint8] */;
  %582 = logical_xor(%580, %581) /* ty=Tensor[(6, 12, 15), uint8] */;
  %583 = cast(%582, dtype="float64") /* ty=Tensor[(6, 12, 15), float64] */;
  %584 = log(%583) /* ty=Tensor[(6, 12, 15), float64] */;
  %585 = cast(%584, dtype="float64") /* ty=Tensor[(6, 12, 15), float64] */;
  %586 = cast(%var_344, dtype="float64") /* ty=Tensor[(6, 1, 15), float64] */;
  %587 = cast(%582, dtype="float32") /* ty=Tensor[(6, 12, 15), float32] */;
  %588 = divide(%585, %586) /* ty=Tensor[(6, 12, 15), float64] */;
  %589 = rsqrt(%587) /* ty=Tensor[(6, 12, 15), float32] */;
  (%588, %589)
}

def @func_5625(%var_5623: Tensor[(252), int16], %var_5624: Tensor[(7, 16, 11), float64]) -> (Tensor[(7, 16, 11), bool], Tensor[(16, 7, 16), float32], Tensor[(252), int16], Tensor[(32, 56), float64], Tensor[(7, 16, 11), int16]) {
  %612 = fn (%var_5589: Tensor[(252), int16], %var_5613: Tensor[(7, 16, 11), float64]) -> (Tensor[(7, 16, 11), bool], Tensor[(16, 7, 16), float32], Tensor[(252), int16], Tensor[(32, 56), float64], Tensor[(7, 16, 11), int16]) {
    %590 = cast(meta[relay.Constant][48] /* ty=Tensor[(7, 16, 11), int16] */, dtype="bool") /* ty=Tensor[(7, 16, 11), bool] */;
    %591 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(7, 16, 11), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %592 = cast(meta[relay.Constant][47] /* ty=Tensor[(7, 16, 11), int16] */, dtype="bool") /* ty=Tensor[(7, 16, 11), bool] */;
    %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %594 = cast(meta[relay.Constant][49] /* ty=Tensor[(32, 56), float64] */, dtype="float64") /* ty=Tensor[(32, 56), float64] */;
    %595 = cast(%var_5589, dtype="int16") /* ty=Tensor[(252), int16] */;
    %596 = cast(meta[relay.Constant][49] /* ty=Tensor[(32, 56), float64] */, dtype="float64") /* ty=Tensor[(32, 56), float64] */;
    %597 = reshape(%594, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), float64] */;
    %598 = reshape(%595, newshape=[252]) /* ty=Tensor[(252), int16] */;
    %599 = reshape(%596, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), float64] */;
    %600 = @func_3223(%597, %598, %599) /* ty=(Tensor[(15, 3, 6), float64], Tensor[(252), int16], Tensor[(16, 7, 16), uint16], Tensor[(16, 7, 16), float32], Tensor[(3, 12, 3), float32], Tensor[(90), uint8], Tensor[(504), uint16], Tensor[(90), uint8]) */;
    %601 = cast(meta[relay.Constant][49] /* ty=Tensor[(32, 56), float64] */, dtype="float64") /* ty=Tensor[(32, 56), float64] */;
    %602 = cast(meta[relay.Constant][48] /* ty=Tensor[(7, 16, 11), int16] */, dtype="float64") /* ty=Tensor[(7, 16, 11), float64] */;
    %603 = tan(%602) /* ty=Tensor[(7, 16, 11), float64] */;
    %604 = cast(%var_5613, dtype="int16") /* ty=Tensor[(7, 16, 11), int16] */;
    %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
    %606 = cast(%603, dtype="int16") /* ty=Tensor[(7, 16, 11), int16] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %608 = less(%592, %593) /* ty=Tensor[(7, 16, 11), bool] */;
    %609 = %600.3;
    %610 = asin(%601) /* ty=Tensor[(32, 56), float64] */;
    %611 = bitwise_or(%606, %607) /* ty=Tensor[(7, 16, 11), int16] */;
    (%608, %609, %var_5589, %610, %611)
  };
  %612(%var_5623, %var_5624) /* ty=(Tensor[(7, 16, 11), bool], Tensor[(16, 7, 16), float32], Tensor[(252), int16], Tensor[(32, 56), float64], Tensor[(7, 16, 11), int16]) */
}

def @func_4527() -> Tensor[(10, 4, 15), float64] {
  %613 = @func_3567() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) */;
  %614 = %613.1;
  %615 = cast(%614, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  cos(%615) /* ty=Tensor[(10, 4, 15), float64] */
}

def @func_3982() -> Tensor[(10, 9, 1), float64] {
  %616 = @func_3771() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %616.0
}

def @func_4552() -> (Tensor[(10, 9, 1), float64],) {
  %617 = @func_4141() /* ty=(Tensor[(10, 9, 1), float64],) */;
  %618 = %617.0;
  (%618,)
}

def @func_3409() -> Tensor[(3, 12, 3), float32] {
  %620 = fn () -> Tensor[(3, 12, 3), float32] {
    %619 = @func_3129() /* ty=(Tensor[(3, 12, 3), float32], Tensor[(3, 12, 3), float64]) */;
    %619.0
  };
  %620() /* ty=Tensor[(3, 12, 3), float32] */
}

def @func_3743(%var_3741: Tensor[(378), float64]) -> (Tensor[(3, 12, 3), float32], Tensor[(6, 8, 9), float32], Tensor[(378), float64], Tensor[(432, 1), float32]) {
  @func_3740(%var_3741) /* ty=(Tensor[(3, 12, 3), float32], Tensor[(6, 8, 9), float32], Tensor[(378), float64], Tensor[(432, 1), float32]) */
}

def @func_3972(%var_3957: Tensor[(630), int32]) -> (Tensor[(3, 12, 3), float64], Tensor[(9, 7, 10), int32], Tensor[(630), int32], Tensor[(3, 12, 3), float32]) {
  %621 = @func_3508() /* ty=(Tensor[(3, 12, 3), float64],) */;
  %622 = cast(%var_3957, dtype="int32") /* ty=Tensor[(630), int32] */;
  %623 = reshape(%622, newshape=[9, 7, 10]) /* ty=Tensor[(9, 7, 10), int32] */;
  %624 = @func_1735(%623) /* ty=(Tensor[(9, 7, 10), int32],) */;
  %625 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %626 = %621.0;
  %627 = %624.0;
  %628 = %625.0;
  (%626, %627, %var_3957, %628)
}

def @func_4143() -> (Tensor[(10, 9, 1), float64],) {
  @func_4141() /* ty=(Tensor[(10, 9, 1), float64],) */
}

def @func_4141() -> (Tensor[(10, 9, 1), float64],) {
  %629 = @func_3982() /* ty=Tensor[(10, 9, 1), float64] */;
  (%629,)
}

def @func_5165(%var_5164: Tensor[(11, 11, 7), float64]) -> (Tensor[(11, 11, 7), float64], Tensor[(11, 11, 7), float64]) {
  %634 = fn (%var_5136: Tensor[(11, 11, 7), float64]) -> (Tensor[(11, 11, 7), float64], Tensor[(11, 11, 7), float64]) {
    %630 = cast(%var_5136, dtype="float64") /* ty=Tensor[(11, 11, 7), float64] */;
    %631 = cast(%var_5136, dtype="float64") /* ty=Tensor[(11, 11, 7), float64] */;
    %632 = asin(%630) /* ty=Tensor[(11, 11, 7), float64] */;
    %633 = atan(%631) /* ty=Tensor[(11, 11, 7), float64] */;
    (%632, %633)
  };
  %634(%var_5164) /* ty=(Tensor[(11, 11, 7), float64], Tensor[(11, 11, 7), float64]) */
}

def @func_4413() -> Tensor[(10, 9, ?), bool] {
  @func_4411() /* ty=Tensor[(10, 9, ?), bool] */
}

def @func_4262(%var_4215: Tensor[(12, 4, 1), int32], %var_4252: Tensor[(336), uint8], %var_4253: Tensor[(270), float64]) -> (Tensor[(12, 4, 9), bool], Tensor[(3, 12, 3), int16], Tensor[(108), float32], Tensor[(10, 4, 15), bool], Tensor[(600), int8], float64, Tensor[(12, 72), int16], Tensor[(336), uint8], Tensor[(270), float64], Tensor[(2, 8, 9), float64]) {
  %635 = cast(%var_4215, dtype="int32") /* ty=Tensor[(12, 4, 1), int32] */;
  %636 = cast(meta[relay.Constant][50] /* ty=Tensor[(12, 4, 9), int32] */, dtype="int32") /* ty=Tensor[(12, 4, 9), int32] */;
  %637 = add(%635, %636) /* ty=Tensor[(12, 4, 9), int32] */;
  %638 = cast(%637, dtype="bool") /* ty=Tensor[(12, 4, 9), bool] */;
  %639 = cast(%var_4215, dtype="bool") /* ty=Tensor[(12, 4, 1), bool] */;
  %640 = cast(meta[relay.Constant][51] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %641 = reshape(%640, newshape=[3, 12, 3]) /* ty=Tensor[(3, 12, 3), float32] */;
  %642 = @func_3911(%641) /* ty=(Tensor[(600), float64], Tensor[(3, 12, 3), int16]) */;
  %643 = cast(meta[relay.Constant][52] /* ty=Tensor[(600), int8] */, dtype="int8") /* ty=Tensor[(600), int8] */;
  %644 = cast(meta[relay.Constant][52] /* ty=Tensor[(600), int8] */, dtype="int8") /* ty=Tensor[(600), int8] */;
  %645 = reshape(%643, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), int8] */;
  %646 = reshape(%644, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), int8] */;
  %647 = @func_1303(%645, %646) /* ty=(Tensor[(10, 4, 15), bool],) */;
  %648 = cast(meta[relay.Constant][53] /* ty=Tensor[(12, 72), int16] */, dtype="int16") /* ty=Tensor[(12, 72), int16] */;
  %649 = cast(meta[relay.Constant][53] /* ty=Tensor[(12, 72), int16] */, dtype="int16") /* ty=Tensor[(12, 72), int16] */;
  %650 = cast(%var_4252, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %651 = cast(%var_4253, dtype="float64") /* ty=Tensor[(270), float64] */;
  %652 = reshape(%648, newshape=[12, 8, 9]) /* ty=Tensor[(12, 8, 9), int16] */;
  %653 = reshape(%649, newshape=[12, 8, 9]) /* ty=Tensor[(12, 8, 9), int16] */;
  %654 = reshape(%650, newshape=[336]) /* ty=Tensor[(336), uint8] */;
  %655 = reshape(%651, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %656 = @func_3839(%652, %653, %654, %655) /* ty=(Tensor[(12, 8, 9), bool], Tensor[(12, 8, 9), float64], Tensor[(14, 1, 9), bool], Tensor[(336), uint8], Tensor[(270), float64], float64) */;
  %657 = @func_3994() /* ty=(Tensor[(2, 8, 9), float64],) */;
  %658 = greater_equal(%638, %639) /* ty=Tensor[(12, 4, 9), bool] */;
  %659 = %642.1;
  %660 = %647.0;
  %661 = %656.5;
  %662 = %657.0;
  (%658, %659, meta[relay.Constant][51] /* ty=Tensor[(108), float32] */, %660, meta[relay.Constant][52] /* ty=Tensor[(600), int8] */, %661, meta[relay.Constant][53] /* ty=Tensor[(12, 72), int16] */, %var_4252, %var_4253, %662)
}

def @func_3773() -> (Tensor[(10, 9, 1), float64],) {
  @func_3771() /* ty=(Tensor[(10, 9, 1), float64],) */
}

def @func_3844(%var_3840: Tensor[(12, 8, 9), int16], %var_3841: Tensor[(12, 8, 9), int16], %var_3842: Tensor[(336), uint8], %var_3843: Tensor[(270), float64]) -> (Tensor[(12, 8, 9), bool], Tensor[(12, 8, 9), float64], Tensor[(14, 1, 9), bool], Tensor[(336), uint8], Tensor[(270), float64], float64) {
  %680 = fn (%var_3799: Tensor[(12, 8, 9), int16], %var_3800: Tensor[(12, 8, 9), int16], %var_3821: Tensor[(336), uint8], %var_3822: Tensor[(270), float64]) -> (Tensor[(12, 8, 9), bool], Tensor[(12, 8, 9), float64], Tensor[(14, 1, 9), bool], Tensor[(336), uint8], Tensor[(270), float64], float64) {
    %663 = cast(%var_3800, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
    %664 = shape_of(%var_3799, dtype="int32") /* ty=Tensor[(3), int32] */;
    %665 = cast(%var_3799, dtype="bool") /* ty=Tensor[(12, 8, 9), bool] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %667 = cast(%var_3799, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
    %668 = cast(%var_3821, dtype="uint8") /* ty=Tensor[(336), uint8] */;
    %669 = cast(%var_3821, dtype="uint8") /* ty=Tensor[(336), uint8] */;
    %670 = cast(%var_3822, dtype="float64") /* ty=Tensor[(270), float64] */;
    %671 = cast(-0.727369f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %672 = reshape(%668, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), uint8] */;
    %673 = reshape(%669, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), uint8] */;
    %674 = reshape(%670, newshape=[30, 9]) /* ty=Tensor[(30, 9), float64] */;
    %675 = reshape(%671, newshape=[]) /* ty=float64 */;
    %676 = @func_2147(%672, %673, %674, %675) /* ty=(Tensor[(4, 14, 6), bool], Tensor[(15, 3, 6), float64], Tensor[(30, 9), float64], Tensor[(4, 14, 6), float32], Tensor[(14, 1, 9), bool], float64) */;
    %677 = greater(%665, %666) /* ty=Tensor[(12, 8, 9), bool] */;
    %678 = sigmoid(%667) /* ty=Tensor[(12, 8, 9), float64] */;
    %679 = %676.4;
    (%677, %678, %679, %var_3821, %var_3822, -0.727369f64 /* ty=float64 */)
  };
  %680(%var_3840, %var_3841, %var_3842, %var_3843) /* ty=(Tensor[(12, 8, 9), bool], Tensor[(12, 8, 9), float64], Tensor[(14, 1, 9), bool], Tensor[(336), uint8], Tensor[(270), float64], float64) */
}

def @func_4886(%var_4822: Tensor[(10, 16), float64], %var_4838: Tensor[(1, 104), float64], %var_4877: int16, %var_4878: Tensor[(7), int16]) -> (Tensor[(10, 16), float64], Tensor[(1, 104), float64], Tensor[(1664), float64], Tensor[(16, 8, 13), float32], Tensor[(3, 90), float64], int16, Tensor[(7), int16]) {
  %681 = cast(%var_4822, dtype="float64") /* ty=Tensor[(10, 16), float64] */;
  %682 = cast(%var_4838, dtype="float64") /* ty=Tensor[(1, 104), float64] */;
  %683 = cast(meta[relay.Constant][54] /* ty=Tensor[(1664), float64] */, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %684 = reshape(%682, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %685 = reshape(%683, newshape=[16, 8, 13]) /* ty=Tensor[(16, 8, 13), float64] */;
  %686 = @func_2976(%684, %685) /* ty=Tensor[(16, 8, 13), float64] */;
  %687 = cast(%686, dtype="float64") /* ty=Tensor[(16, 8, 13), float64] */;
  %688 = log10(%687) /* ty=Tensor[(16, 8, 13), float64] */;
  %689 = cast(%688, dtype="float32") /* ty=Tensor[(16, 8, 13), float32] */;
  %690 = cast(%var_4877, dtype="int16") /* ty=int16 */;
  %691 = cast(%var_4878, dtype="int16") /* ty=Tensor[(7), int16] */;
  %692 = reshape(%690, newshape=[]) /* ty=int16 */;
  %693 = reshape(%691, newshape=[1, 7]) /* ty=Tensor[(1, 7), int16] */;
  %694 = @func_767(%692, %693) /* ty=(Tensor[(1, 7), int16], Tensor[(15, 3, 6), float64], Tensor[(3, 90), float64]) */;
  %695 = rsqrt(%681) /* ty=Tensor[(10, 16), float64] */;
  %696 = acosh(%689) /* ty=Tensor[(16, 8, 13), float32] */;
  %697 = %694.2;
  (%695, %var_4838, meta[relay.Constant][54] /* ty=Tensor[(1664), float64] */, %696, %697, %var_4877, %var_4878)
}

def @func_5983(%var_5981: Tensor[(8, 10, 8), float64]) -> (Tensor[(8, 10, 8), float64],) {
  @func_5980(%var_5981) /* ty=(Tensor[(8, 10, 8), float64],) */
}

def @func_3860() -> (Tensor[(11, 14, 14), int32], Tensor[(52, 2), float64], Tensor[(120), uint64]) {
  %698 = cast(meta[relay.Constant][56] /* ty=Tensor[(11, 14, 14), int32] */, dtype="int32") /* ty=Tensor[(11, 14, 14), int32] */;
  %699 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(11, 14, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(meta[relay.Constant][55] /* ty=Tensor[(11, 14, 14), int32] */, dtype="int32") /* ty=Tensor[(11, 14, 14), int32] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %702 = cast(meta[relay.Constant][57] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %703 = cast(meta[relay.Constant][57] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %704 = reshape(%702, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), uint64] */;
  %705 = reshape(%703, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), uint64] */;
  %706 = @func_3593(%704, %705) /* ty=(Tensor[(10, 3, 4), bool], Tensor[(16, 8, 13), float64], Tensor[(52, 2), float64], Tensor[(1664), float64]) */;
  %707 = logical_xor(%700, %701) /* ty=Tensor[(11, 14, 14), int32] */;
  %708 = %706.2;
  (%707, %708, meta[relay.Constant][57] /* ty=Tensor[(120), uint64] */)
}

def @func_3508() -> (Tensor[(3, 12, 3), float64],) {
  %709 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %710 = %709.0;
  %711 = cast(%710, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %712 = asin(%711) /* ty=Tensor[(3, 12, 3), float64] */;
  (%712,)
}

def @func_3569() -> (Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) {
  @func_3567() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(10, 4, 15), bool], Tensor[(600), int8]) */
}

def @func_4699() -> Tensor[(10, 9, 1), float64] {
  %713 = fn () -> Tensor[(10, 9, 1), float64] {
    @func_3982() /* ty=Tensor[(10, 9, 1), float64] */
  };
  %713() /* ty=Tensor[(10, 9, 1), float64] */
}

def @func_409(%var_407: Tensor[(6, 1, 15), uint8]) -> (Tensor[(6, 12, 15), float64], Tensor[(6, 12, 15), float32]) {
  @func_406(%var_407) /* ty=(Tensor[(6, 12, 15), float64], Tensor[(6, 12, 15), float32]) */
}

def @func_3911(%var_3889: Tensor[(3, 12, 3), float32]) -> (Tensor[(600), float64], Tensor[(3, 12, 3), int16]) {
  %714 = @func_3664() /* ty=(Tensor[(3, 12, 3), float64], Tensor[(15, 3, 6), float64], Tensor[(6, 45), float64], Tensor[(600), float64]) */;
  %715 = @func_3147() /* ty=(Tensor[(3, 12, 3), float32],) */;
  %716 = %715.0;
  %717 = cast(%var_3889, dtype="int16") /* ty=Tensor[(3, 12, 3), int16] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="int16") /* ty=Tensor[(3, 12, 3), int16] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %721 = %714.3;
  %722 = maximum(%719, %720) /* ty=Tensor[(3, 12, 3), int16] */;
  (%721, %722)
}

def @func_5641(%var_5640: Tensor[(1, 2, 10), float32]) -> Tensor[(10, 2, 10), float32] {
  %725 = fn (%var_5634: Tensor[(1, 2, 10), float32]) -> Tensor[(10, 2, 10), float32] {
    %723 = cast(%var_5634, dtype="float32") /* ty=Tensor[(1, 2, 10), float32] */;
    %724 = cast(meta[relay.Constant][58] /* ty=Tensor[(10, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 10), float32] */;
    floor_divide(%723, %724) /* ty=Tensor[(10, 2, 10), float32] */
  };
  %725(%var_5640) /* ty=Tensor[(10, 2, 10), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
