==========mod==========
#[version = "0.0.5"]
def @func_660() -> (Tensor[(12, 7), float64],) {
  %0 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %1 = %0.1;
  (%1,)
}

def @func_1578() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(88), float32], Tensor[(12, 7), float64]) {
  %2 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %3 = @func_779() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(325, 3), float32] */, dtype="float32") /* ty=Tensor[(325, 3), float32] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(325, 3), float32] */, dtype="float32") /* ty=Tensor[(325, 3), float32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(325, 3), float32] */, dtype="float64") /* ty=Tensor[(325, 3), float64] */;
  %7 = reshape(%4, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %8 = reshape(%5, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %9 = reshape(%6, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float64] */;
  %10 = @func_487(%7, %8, %9) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */;
  %11 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %13 = reshape(%12, newshape=[88]) /* ty=Tensor[(88), float32] */;
  %14 = @func_823(%13) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(88), float32]) */;
  %15 = @func_779() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %16 = %2.0;
  %17 = %3.1;
  %18 = %10.1;
  %19 = %11.0;
  %20 = %14.2;
  %21 = %15.0;
  (%16, %17, %18, meta[relay.Constant][0] /* ty=Tensor[(325, 3), float32] */, %19, %20, meta[relay.Constant][1] /* ty=Tensor[(88), float32] */, %21)
}

def @func_796() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) {
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(1, 12, 15), float32] */;
  %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %24 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %25 = floor_divide(%22, %23) /* ty=Tensor[(12, 12, 15), float32] */;
  %26 = cos(%24) /* ty=Tensor[(12, 12, 15), float32] */;
  (%25, %26)
}

def @func_2716() -> Tensor[(12, 7), float64] {
  %27 = @func_2677() /* ty=(Tensor[(12, 7), float64],) */;
  %27.0
}

def @func_3237() -> (Tensor[(12, 7), float64], Tensor[(1, 2028), float64], Tensor[(15, 16, 16), float32], Tensor[(15, 16, 16), float64], Tensor[(12, 7), float64], Tensor[(4, 13, 5), float32]) {
  %28 = @func_2896() /* ty=(Tensor[(12, 12, 15), bool], Tensor[(924), uint8], Tensor[(1, 2028), float64], Tensor[(7, 132), uint8], Tensor[(15, 16, 16), float32]) */;
  %29 = @func_2289() /* ty=(Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) */;
  %30 = @func_660() /* ty=(Tensor[(12, 7), float64],) */;
  %31 = cast(meta[relay.Constant][4] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %32 = reshape(%31, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float64] */;
  %33 = @func_2804(%32) /* ty=Tensor[(4, 13, 5), float64] */;
  %34 = cast(meta[relay.Constant][4] /* ty=Tensor[(260), float64] */, dtype="bool") /* ty=Tensor[(260), bool] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="bool") /* ty=Tensor[(4, 13, 5), bool] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %38 = equal(%36, %37) /* ty=Tensor[(4, 13, 5), bool] */;
  %39 = cast(%38, dtype="float32") /* ty=Tensor[(4, 13, 5), float32] */;
  %40 = @func_1177() /* ty=Tensor[(12, 7), float64] */;
  %41 = %28.2;
  %42 = @func_2525() /* ty=Tensor[(15, 16, 16), float32] */;
  %43 = %29.0;
  %44 = %30.0;
  %45 = cos(%39) /* ty=Tensor[(4, 13, 5), float32] */;
  (%40, %41, %42, %43, %44, %45)
}

def @func_1192() -> (Tensor[(12, 12, 15), float32],) {
  %46 = @func_796() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */;
  %47 = %46.1;
  (%47,)
}

def @func_884(%var_870: int8, %var_871: Tensor[(15, 1, 12), int8]) -> Tensor[(15, 1, 12), bool] {
  %48 = cast(%var_870, dtype="bool") /* ty=bool */;
  %49 = cast(%var_871, dtype="bool") /* ty=Tensor[(15, 1, 12), bool] */;
  not_equal(%48, %49) /* ty=Tensor[(15, 1, 12), bool] */
}

def @func_2505() -> (Tensor[(12, 12, 15), float32],) {
  %50 = @func_2409() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) */;
  %51 = %50.0;
  (%51,)
}

def @func_4325() -> (Tensor[(12, 12, 15), float32],) {
  %52 = @func_3355() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) */;
  %53 = %52.0;
  (%53,)
}

def @func_4149() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(5, 315), int16], Tensor[(7, 2), bool], Tensor[(14), int16], Tensor[(12, 12, 15), float64]) {
  %54 = @func_2591() /* ty=(Tensor[(12, 7), float64],) */;
  %55 = @func_3736() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %56 = cast(meta[relay.Constant][6] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
  %57 = cast(meta[relay.Constant][6] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
  %58 = reshape(%56, newshape=[7, 2]) /* ty=Tensor[(7, 2), int16] */;
  %59 = reshape(%57, newshape=[7, 2]) /* ty=Tensor[(7, 2), int16] */;
  %60 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 315), int16] */, dtype="int16") /* ty=Tensor[(5, 315), int16] */;
  %61 = reshape(%60, newshape=[15, 15, 7]) /* ty=Tensor[(15, 15, 7), int16] */;
  %62 = @func_2315(%61) /* ty=(Tensor[(12, 12, 15), int16], Tensor[(1, 2160), float32], Tensor[(15, 15, 7), float64]) */;
  %63 = %62.0;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(12, 12, 15), float64] */;
  %65 = %54.0;
  %66 = %55.1;
  %67 = @func_3981(%58, %59) /* ty=Tensor[(7, 2), bool] */;
  %68 = atan(%64) /* ty=Tensor[(12, 12, 15), float64] */;
  (%65, %66, meta[relay.Constant][5] /* ty=Tensor[(5, 315), int16] */, %67, meta[relay.Constant][6] /* ty=Tensor[(14), int16] */, %68)
}

def @func_1026() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %69 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %70 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %71 = %69.0;
  %72 = %70.0;
  (%71, %72)
}

def @func_2841() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) {
  %73 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %74 = @func_1725() /* ty=(Tensor[(12, 7), float64],) */;
  %75 = @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %76 = %73.0;
  %77 = %74.0;
  %78 = @func_1699() /* ty=Tensor[(12, 12, 15), float32] */;
  %79 = %75.0;
  (%76, %77, %78, %79)
}

def @func_4624() -> (Tensor[(12, 12, 15), float32],) {
  %80 = @func_1699() /* ty=Tensor[(12, 12, 15), float32] */;
  (%80,)
}

def @func_2919() -> (Tensor[(12, 12, 15), float32],) {
  %81 = @func_2505() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %82 = %81.0;
  (%82,)
}

def @func_1699() -> Tensor[(12, 12, 15), float32] {
  %83 = @func_1192() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %83.0
}

def @func_2956() -> Tensor[(12, 7), float64] {
  @func_1894() /* ty=Tensor[(12, 7), float64] */
}

def @func_5921() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(10, 3, 13), float64]) {
  %84 = @func_3355() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) */;
  %85 = @func_5004() /* ty=(Tensor[(12, 7), float64],) */;
  %86 = @func_4821() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(10, 3, 13), uint16], Tensor[(1, 390), float32], Tensor[(12, 12, 15), int16]) */;
  %87 = %86.1;
  %88 = cast(%87, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
  %89 = %84.0;
  %90 = %85.0;
  %91 = log(%88) /* ty=Tensor[(10, 3, 13), float64] */;
  (%89, %90, %91)
}

def @func_4797(%var_4764: Tensor[(30), float32]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(975), float32], Tensor[(12, 7), float64], Tensor[(10, 3), float32], Tensor[(30), float32], Tensor[(12, 12, 15), float32], Tensor[(1620), uint16], Tensor[(15, 16, 16), float32]) {
  %92 = @func_1979() /* ty=Tensor[(12, 12, 15), float32] */;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(12, 12, 15), float64] */;
  %94 = log(%93) /* ty=Tensor[(12, 12, 15), float64] */;
  %95 = cast(%94, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %96 = reshape(%95, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %97 = @func_3480(%96) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620, 1), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(2160), float32], Tensor[(15, 16, 16), float32]) */;
  %98 = @func_1026() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %99 = @func_3237() /* ty=(Tensor[(12, 7), float64], Tensor[(1, 2028), float64], Tensor[(15, 16, 16), float32], Tensor[(15, 16, 16), float64], Tensor[(12, 7), float64], Tensor[(4, 13, 5), float32]) */;
  %100 = @func_4375() /* ty=(Tensor[(12, 7), float64], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) */;
  %101 = @func_2841() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */;
  %102 = cast(%var_4764, dtype="float32") /* ty=Tensor[(30), float32] */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %104 = reshape(%102, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
  %105 = reshape(%103, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %106 = @func_3025(%104, %105) /* ty=(Tensor[(12, 7), float64], float32, Tensor[(10, 3), float32], Tensor[(1620), float64], Tensor[(1620), float64], Tensor[(12, 12, 15), float32], Tensor[(180), int8], Tensor[(924), uint8], Tensor[(12, 7), float64]) */;
  %107 = cast(%94, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %108 = cast(meta[relay.Constant][8] /* ty=Tensor[(1620), float64] */, dtype="uint16") /* ty=Tensor[(1620), uint16] */;
  %109 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(1620), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %110 = cast(meta[relay.Constant][7] /* ty=Tensor[(1620), float64] */, dtype="uint16") /* ty=Tensor[(1620), uint16] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %112 = %97.1;
  %113 = %98.0;
  %114 = %99.4;
  %115 = %100.2;
  %116 = %101.1;
  %117 = %106.2;
  %118 = sinh(%107) /* ty=Tensor[(12, 12, 15), float32] */;
  %119 = bitwise_or(%110, %111) /* ty=Tensor[(1620), uint16] */;
  %120 = @func_2525() /* ty=Tensor[(15, 16, 16), float32] */;
  (%112, %113, %114, %115, %116, %117, %var_4764, %118, %119, %120)
}

def @func_5664() -> (Tensor[(1352), float64],) {
  %121 = @func_4189() /* ty=(Tensor[(12, 7), float64], Tensor[(13, 8, 13), float32], Tensor[(1352), float32], Tensor[(1620, 1), float64], Tensor[(2160), float32]) */;
  %122 = %121.2;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %124 = rsqrt(%123) /* ty=Tensor[(1352), float64] */;
  %125 = cast(%124, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %126 = asinh(%125) /* ty=Tensor[(1352), float32] */;
  %127 = cast(%126, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %128 = acosh(%127) /* ty=Tensor[(1352), float64] */;
  (%128,)
}

def @func_6043() -> Tensor[(12, 7), float64] {
  %129 = @func_2000() /* ty=(Tensor[(12, 7), float64],) */;
  %129.0
}

def @func_1418(%var_1388: uint8, %var_1389: Tensor[(462, 2), uint8], %var_1405: Tensor[(12, 12, 15), bool]) -> (Tensor[(180), int8], uint8, Tensor[(462, 2), uint8], Tensor[(180), int8], Tensor[(12, 7), float64], Tensor[(12, 12, 15), uint32], Tensor[(12, 7), float64]) {
  %130 = cast(%var_1388, dtype="uint8") /* ty=uint8 */;
  %131 = cast(%var_1389, dtype="uint8") /* ty=Tensor[(462, 2), uint8] */;
  %132 = cast(%var_1389, dtype="uint8") /* ty=Tensor[(462, 2), uint8] */;
  %133 = cast(meta[relay.Constant][9] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %134 = reshape(%130, newshape=[]) /* ty=uint8 */;
  %135 = reshape(%131, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint8] */;
  %136 = reshape(%132, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint8] */;
  %137 = reshape(%133, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %138 = @func_1122(%134, %135, %136, %137) /* ty=(Tensor[(7, 11, 12), bool], Tensor[(12, 7), float64], Tensor[(7, 11, 12), uint32], Tensor[(15, 1, 12), bool], Tensor[(180), int8], Tensor[(7, 11, 12), float32]) */;
  %139 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %140 = @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %141 = %140.0;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %143 = acosh(%142) /* ty=Tensor[(12, 12, 15), float32] */;
  %144 = cast(%141, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%143, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %148 = less(%146, %147) /* ty=Tensor[(12, 12, 15), bool] */;
  %149 = cast(%141, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%148, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %153 = logical_and(%151, %152) /* ty=Tensor[(12, 12, 15), bool] */;
  %154 = cast(%var_1405, dtype="uint32") /* ty=Tensor[(12, 12, 15), uint32] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="uint32") /* ty=Tensor[(12, 12, 15), uint32] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %158 = @func_1026() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %159 = %138.4;
  %160 = %139.0;
  %161 = bitwise_or(%156, %157) /* ty=Tensor[(12, 12, 15), uint32] */;
  %162 = %158.0;
  (%159, %var_1388, %var_1389, meta[relay.Constant][9] /* ty=Tensor[(180), int8] */, %160, %161, %162)
}

def @func_298() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %163 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 7), float64] */, dtype="float64") /* ty=Tensor[(12, 7), float64] */;
  %164 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 7), float64] */, dtype="float64") /* ty=Tensor[(12, 7), float64] */;
  %165 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(12, 7), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %166 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 7), float64] */, dtype="float64") /* ty=Tensor[(12, 7), float64] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %168 = sinh(%163) /* ty=Tensor[(12, 7), float64] */;
  %169 = maximum(%166, %167) /* ty=Tensor[(12, 7), float64] */;
  (%168, %169)
}

def @func_1666(%var_1628: int8) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(15, 1, 12), bool], int8, Tensor[(180, 1), int8]) {
  %170 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %171 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %172 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %173 = cast(%var_1628, dtype="int8") /* ty=int8 */;
  %174 = cast(meta[relay.Constant][12] /* ty=Tensor[(180, 1), int8] */, dtype="int8") /* ty=Tensor[(180, 1), int8] */;
  %175 = reshape(%173, newshape=[]) /* ty=int8 */;
  %176 = reshape(%174, newshape=[15, 1, 12]) /* ty=Tensor[(15, 1, 12), int8] */;
  %177 = %170.0;
  %178 = %171.0;
  %179 = %172.0;
  %180 = @func_884(%175, %176) /* ty=Tensor[(15, 1, 12), bool] */;
  (%177, %178, %179, %180, %var_1628, meta[relay.Constant][12] /* ty=Tensor[(180, 1), int8] */)
}

def @func_4375() -> (Tensor[(12, 7), float64], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) {
  %181 = @func_3796() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %182 = cast(meta[relay.Constant][13] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %183 = cast(meta[relay.Constant][13] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %184 = cast(meta[relay.Constant][13] /* ty=Tensor[(975), float32] */, dtype="float64") /* ty=Tensor[(975), float64] */;
  %185 = reshape(%182, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %186 = reshape(%183, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %187 = reshape(%184, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float64] */;
  %188 = @func_487(%185, %186, %187) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */;
  %189 = %181.0;
  %190 = %188.0;
  (%189, %190, meta[relay.Constant][13] /* ty=Tensor[(975), float32] */)
}

def @func_487(%var_428: Tensor[(5, 13, 15), float32], %var_437: Tensor[(5, 13, 15), float32], %var_474: Tensor[(5, 13, 15), float64]) -> (Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) {
  %191 = cast(%var_437, dtype="int32") /* ty=Tensor[(5, 13, 15), int32] */;
  %192 = shape_of(%var_428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%var_428, dtype="int32") /* ty=Tensor[(5, 13, 15), int32] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %195 = @func_406() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %196 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 1620), float64] */, dtype="float64") /* ty=Tensor[(1, 1620), float64] */;
  %197 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 1620), float64] */, dtype="float64") /* ty=Tensor[(1, 1620), float64] */;
  %198 = reshape(%196, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %199 = reshape(%197, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %200 = @func_122(%198, %199) /* ty=(Tensor[(15, 12, 9), float32], Tensor[(15, 12, 9), float64], Tensor[(15, 12, 9), float64]) */;
  %201 = %200.0;
  %202 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 1620), float64] */, dtype="bool") /* ty=Tensor[(1, 1620), bool] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="bool") /* ty=Tensor[(15, 12, 9), bool] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %206 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 13, 15), float32] */, dtype="bool") /* ty=Tensor[(5, 13, 15), bool] */;
  %207 = shape_of(%var_428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%var_428, dtype="bool") /* ty=Tensor[(5, 13, 15), bool] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %210 = less_equal(%208, %209) /* ty=Tensor[(5, 13, 15), bool] */;
  %211 = cast(%210, dtype="float64") /* ty=Tensor[(5, 13, 15), float64] */;
  %212 = shape_of(%var_428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%var_428, dtype="float64") /* ty=Tensor[(5, 13, 15), float64] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %215 = mod(%213, %214) /* ty=Tensor[(5, 13, 15), float64] */;
  %216 = cast(%var_474, dtype="bool") /* ty=Tensor[(5, 13, 15), bool] */;
  %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%215, dtype="bool") /* ty=Tensor[(5, 13, 15), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = cast(%var_474, dtype="float64") /* ty=Tensor[(5, 13, 15), float64] */;
  %221 = logical_xor(%193, %194) /* ty=Tensor[(5, 13, 15), int32] */;
  %222 = %195.0;
  %223 = logical_and(%204, %205) /* ty=Tensor[(15, 12, 9), bool] */;
  %224 = greater_equal(%218, %219) /* ty=Tensor[(5, 13, 15), bool] */;
  %225 = log2(%220) /* ty=Tensor[(5, 13, 15), float64] */;
  (%221, %222, %223, %224, %225)
}

def @func_3796() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %226 = @func_2591() /* ty=(Tensor[(12, 7), float64],) */;
  %227 = %226.0;
  %228 = @func_2956() /* ty=Tensor[(12, 7), float64] */;
  (%227, %228)
}

def @func_1894() -> Tensor[(12, 7), float64] {
  %229 = @func_1578() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(88), float32], Tensor[(12, 7), float64]) */;
  %229.2
}

def @func_711() -> (Tensor[(12, 7), float64],) {
  %230 = @func_660() /* ty=(Tensor[(12, 7), float64],) */;
  %231 = %230.0;
  (%231,)
}

def @func_3337(%var_3277: Tensor[(12, 12, 15), float32], %var_3290: Tensor[(30, 1), float32], %var_3291: Tensor[(1620), float64]) -> (Tensor[(12, 12, 15), uint16], Tensor[(1620), float64], Tensor[(12, 12, 15), bool], Tensor[(1620), float64], Tensor[(30, 1), float32], Tensor[(12, 12, 15), float32], Tensor[(30, ?), bool]) {
  %232 = @func_2919() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %233 = %232.0;
  %234 = cast(%var_3277, dtype="uint16") /* ty=Tensor[(12, 12, 15), uint16] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%233, dtype="uint16") /* ty=Tensor[(12, 12, 15), uint16] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %238 = cast(%233, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %239 = cast(3.73497f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %240 = cast(3.73497f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %241 = cast(%var_3290, dtype="float32") /* ty=Tensor[(30, 1), float32] */;
  %242 = cast(%var_3291, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %243 = reshape(%240, newshape=[]) /* ty=float32 */;
  %244 = reshape(%241, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), float32] */;
  %245 = reshape(%242, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %246 = @func_851(%243, %244, %245) /* ty=(Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) */;
  %247 = %246.2;
  %248 = cast(%247, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %249 = cast(%var_3290, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %250 = log10(%249) /* ty=Tensor[(30, 1), float64] */;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(30, 1), float32] */;
  %252 = @func_2505() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %253 = cast(%250, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %254 = erf(%253) /* ty=Tensor[(30, 1), float64] */;
  %255 = cast(%254, dtype="bool") /* ty=Tensor[(30, 1), bool] */;
  %256 = shape_of(%250, dtype="int32") /* ty=Tensor[(2), int32] */;
  %257 = cast(%250, dtype="bool") /* ty=Tensor[(30, 1), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %259 = left_shift(%236, %237) /* ty=Tensor[(12, 12, 15), uint16] */;
  %260 = not_equal(%238, %239) /* ty=Tensor[(12, 12, 15), bool] */;
  %261 = log(%248) /* ty=Tensor[(1620), float64] */;
  %262 = sqrt(%251) /* ty=Tensor[(30, 1), float32] */;
  %263 = %252.0;
  %264 = less_equal(%257, %258) /* ty=Tensor[(30, ?), bool] */;
  (%259, %var_3291, %260, %261, %262, %263, %264)
}

def @func_680(%var_666: Tensor[(8, 11, 1), float32]) -> (Tensor[(8, 11, 1), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32]) {
  %265 = cast(%var_666, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %266 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %267 = cast(meta[relay.Constant][16] /* ty=Tensor[(325, 3), float32] */, dtype="float32") /* ty=Tensor[(325, 3), float32] */;
  %268 = cast(meta[relay.Constant][16] /* ty=Tensor[(325, 3), float32] */, dtype="float32") /* ty=Tensor[(325, 3), float32] */;
  %269 = cast(meta[relay.Constant][16] /* ty=Tensor[(325, 3), float32] */, dtype="float64") /* ty=Tensor[(325, 3), float64] */;
  %270 = reshape(%267, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %271 = reshape(%268, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %272 = reshape(%269, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float64] */;
  %273 = @func_487(%270, %271, %272) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */;
  %274 = log10(%265) /* ty=Tensor[(8, 11, 1), float32] */;
  %275 = %266.1;
  %276 = %273.1;
  (%274, %275, %276, meta[relay.Constant][16] /* ty=Tensor[(325, 3), float32] */)
}

def @func_4669(%var_4653: Tensor[(15, 16, 16), float64]) -> Tensor[(15, 16, 16), uint64] {
  %277 = @func_2289() /* ty=(Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) */;
  %278 = %277.1;
  %279 = cast(%278, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
  %280 = log2(%279) /* ty=Tensor[(15, 16, 16), float64] */;
  %281 = cast(%var_4653, dtype="bool") /* ty=Tensor[(15, 16, 16), bool] */;
  %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%280, dtype="bool") /* ty=Tensor[(15, 16, 16), bool] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %285 = greater(%283, %284) /* ty=Tensor[(15, 16, 16), bool] */;
  %286 = cast(%var_4653, dtype="uint64") /* ty=Tensor[(15, 16, 16), uint64] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%285, dtype="uint64") /* ty=Tensor[(15, 16, 16), uint64] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%288, %289) /* ty=Tensor[(15, 16, 16), uint64] */
}

def @func_4950(%var_4908: Tensor[(15, 16, 16), float32], %var_4943: Tensor[(12, 12, 15), float32]) -> (Tensor[(15, 16, 16), bool], Tensor[(15, 12, 9), float32], Tensor[(6, 270), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32]) {
  %290 = @func_3237() /* ty=(Tensor[(12, 7), float64], Tensor[(1, 2028), float64], Tensor[(15, 16, 16), float32], Tensor[(15, 16, 16), float64], Tensor[(12, 7), float64], Tensor[(4, 13, 5), float32]) */;
  %291 = %290.2;
  %292 = cast(%var_4908, dtype="bool") /* ty=Tensor[(15, 16, 16), bool] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="bool") /* ty=Tensor[(15, 16, 16), bool] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %296 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 270), float64] */, dtype="float64") /* ty=Tensor[(6, 270), float64] */;
  %297 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 270), float64] */, dtype="float64") /* ty=Tensor[(6, 270), float64] */;
  %298 = reshape(%296, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %299 = reshape(%297, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %300 = @func_122(%298, %299) /* ty=(Tensor[(15, 12, 9), float32], Tensor[(15, 12, 9), float64], Tensor[(15, 12, 9), float64]) */;
  %301 = @func_1699() /* ty=Tensor[(12, 12, 15), float32] */;
  %302 = cast(%var_4943, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%301, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %306 = equal(%294, %295) /* ty=Tensor[(15, 16, 16), bool] */;
  %307 = %300.0;
  %308 = @func_4400() /* ty=Tensor[(12, 7), float64] */;
  %309 = power(%304, %305) /* ty=Tensor[(12, 12, 15), float32] */;
  (%306, %307, meta[relay.Constant][17] /* ty=Tensor[(6, 270), float64] */, %308, %309)
}

def @func_4400() -> Tensor[(12, 7), float64] {
  %310 = @func_1578() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(88), float32], Tensor[(12, 7), float64]) */;
  %310.1
}

def @func_2315(%var_2292: Tensor[(15, 15, 7), int16]) -> (Tensor[(12, 12, 15), int16], Tensor[(1, 2160), float32], Tensor[(15, 15, 7), float64]) {
  %311 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 2160), float32] */, dtype="float32") /* ty=Tensor[(1, 2160), float32] */;
  %312 = reshape(%311, newshape=[12, 12, 15]) /* ty=Tensor[(12, 12, 15), float32] */;
  %313 = cast(%var_2292, dtype="int16") /* ty=Tensor[(15, 15, 7), int16] */;
  %314 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(15, 15, 7), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 15, 7), int16] */, dtype="int16") /* ty=Tensor[(15, 15, 7), int16] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %317 = left_shift(%315, %316) /* ty=Tensor[(15, 15, 7), int16] */;
  %318 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 15, 7), int16] */, dtype="float64") /* ty=Tensor[(15, 15, 7), float64] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="float64") /* ty=Tensor[(15, 15, 7), float64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %322 = @func_2021(%312) /* ty=Tensor[(12, 12, 15), int16] */;
  %323 = subtract(%320, %321) /* ty=Tensor[(15, 15, 7), float64] */;
  (%322, meta[relay.Constant][18] /* ty=Tensor[(1, 2160), float32] */, %323)
}

def @func_3025(%var_2971: Tensor[(10, 3), float32], %var_2984: Tensor[(1620), float64]) -> (Tensor[(12, 7), float64], float32, Tensor[(10, 3), float32], Tensor[(1620), float64], Tensor[(1620), float64], Tensor[(12, 12, 15), float32], Tensor[(180), int8], Tensor[(924), uint8], Tensor[(12, 7), float64]) {
  %324 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %325 = cast(-2.35218f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %326 = cast(%var_2971, dtype="float32") /* ty=Tensor[(10, 3), float32] */;
  %327 = cast(meta[relay.Constant][20] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %328 = reshape(%325, newshape=[]) /* ty=float32 */;
  %329 = reshape(%326, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), float32] */;
  %330 = reshape(%327, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %331 = @func_851(%328, %329, %330) /* ty=(Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) */;
  %332 = %331.2;
  %333 = cast(%var_2984, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(1), int32] */;
  %335 = cast(%332, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?), float64] */;
  %337 = @func_2919() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %338 = cast(-2.35218f /* ty=float32 */, dtype="uint8") /* ty=uint8 */;
  %339 = cast(meta[relay.Constant][21] /* ty=Tensor[(924), uint8] */, dtype="uint8") /* ty=Tensor[(924), uint8] */;
  %340 = %337.0;
  %341 = cast(%340, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %342 = reshape(%338, newshape=[]) /* ty=uint8 */;
  %343 = reshape(%339, newshape=[462, 2]) /* ty=Tensor[(462, 2), uint8] */;
  %344 = reshape(%341, newshape=[12, 12, 15]) /* ty=Tensor[(12, 12, 15), bool] */;
  %345 = @func_1418(%342, %343, %344) /* ty=(Tensor[(180), int8], uint8, Tensor[(462, 2), uint8], Tensor[(180), int8], Tensor[(12, 7), float64], Tensor[(12, 12, 15), uint32], Tensor[(12, 7), float64]) */;
  %346 = @func_2409() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) */;
  %347 = %324.0;
  %348 = mod(%335, %336) /* ty=Tensor[(1620), float64] */;
  %349 = %345.0;
  %350 = %346.1;
  (%347, -2.35218f /* ty=float32 */, %var_2971, meta[relay.Constant][20] /* ty=Tensor[(1620), float64] */, %348, %340, %349, meta[relay.Constant][21] /* ty=Tensor[(924), uint8] */, %350)
}

def @func_2289() -> (Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) {
  %351 = cast(8.94436f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %352 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 16, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
  %353 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 16, 16), float64] */, dtype="float32") /* ty=Tensor[(15, 16, 16), float32] */;
  %354 = floor_mod(%351, %352) /* ty=Tensor[(15, 16, 16), float64] */;
  %355 = cos(%353) /* ty=Tensor[(15, 16, 16), float32] */;
  (%354, %355)
}

def @func_5519() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32]) {
  %356 = @func_3355() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) */;
  %357 = @func_3355() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) */;
  %358 = @func_1578() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(88), float32], Tensor[(12, 7), float64]) */;
  %359 = %356.0;
  %360 = %357.1;
  %361 = %358.5;
  (%359, %360, %361)
}

def @func_122(%var_58: Tensor[(15, 12, 9), float64], %var_63: Tensor[(15, 12, 9), float64]) -> (Tensor[(15, 12, 9), float32], Tensor[(15, 12, 9), float64], Tensor[(15, 12, 9), float64]) {
  %362 = cast(%var_63, dtype="float32") /* ty=Tensor[(15, 12, 9), float32] */;
  %363 = shape_of(%var_58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%var_58, dtype="float32") /* ty=Tensor[(15, 12, 9), float32] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %366 = cast(%var_58, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %367 = cast(%var_58, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %368 = sinh(%367) /* ty=Tensor[(15, 12, 9), float64] */;
  %369 = cast(%368, dtype="float32") /* ty=Tensor[(15, 12, 9), float32] */;
  %370 = asinh(%369) /* ty=Tensor[(15, 12, 9), float32] */;
  %371 = cast(%370, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %372 = cosh(%371) /* ty=Tensor[(15, 12, 9), float64] */;
  %373 = cast(%372, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %374 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%370, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %377 = power(%364, %365) /* ty=Tensor[(15, 12, 9), float32] */;
  %378 = sin(%366) /* ty=Tensor[(15, 12, 9), float64] */;
  %379 = mod(%375, %376) /* ty=Tensor[(15, 12, 9), float64] */;
  (%377, %378, %379)
}

def @func_1925() -> (Tensor[(12, 7), float64],) {
  %380 = @func_1578() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(88), float32], Tensor[(12, 7), float64]) */;
  %381 = %380.1;
  (%381,)
}

def @func_5004() -> (Tensor[(12, 7), float64],) {
  %382 = @func_2591() /* ty=(Tensor[(12, 7), float64],) */;
  %383 = %382.0;
  (%383,)
}

def @func_5786() -> Tensor[(12, 12, 15), float32] {
  %384 = @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %384.0
}

def @func_4850() -> (Tensor[(15, 16, 16), float32], Tensor[(12, 12, 15), float32]) {
  %385 = @func_3525() /* ty=(Tensor[(15, 16, 16), float64],) */;
  %386 = %385.0;
  %387 = cast(%386, dtype="float32") /* ty=Tensor[(15, 16, 16), float32] */;
  %388 = acosh(%387) /* ty=Tensor[(15, 16, 16), float32] */;
  %389 = @func_4571() /* ty=Tensor[(12, 12, 15), float32] */;
  (%388, %389)
}

def @func_5873(%var_5868: Tensor[(16, 2, 5), int8]) -> Tensor[(16, 2, 5), int8] {
  %390 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 2, 5), int8] */, dtype="int8") /* ty=Tensor[(1, 2, 5), int8] */;
  %391 = cast(%var_5868, dtype="int8") /* ty=Tensor[(16, 2, 5), int8] */;
  multiply(%390, %391) /* ty=Tensor[(16, 2, 5), int8] */
}

def @func_3922() -> Tensor[(1, 14, 8), float32] {
  %392 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(1, 14, 8), float32] */;
  atanh(%392) /* ty=Tensor[(1, 14, 8), float32] */
}

def @func_1352() -> (Tensor[(12, 12, 15), float32],) {
  %393 = @func_796() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */;
  %394 = %393.1;
  (%394,)
}

def @func_526() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %395 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %396 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %397 = %395.0;
  %398 = %396.1;
  (%397, %398)
}

def @func_3607(%var_3559: Tensor[(16, 14), uint32]) -> (Tensor[(16, 14), uint32],) {
  %399 = cast(%var_3559, dtype="uint32") /* ty=Tensor[(16, 14), uint32] */;
  %400 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(16, 14), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %401 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 14), uint32] */, dtype="uint32") /* ty=Tensor[(16, 14), uint32] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %403 = multiply(%401, %402) /* ty=Tensor[(16, 14), uint32] */;
  (%403,)
}

def @func_3981(%var_3968: Tensor[(7, 2), int16], %var_3969: Tensor[(7, 2), int16]) -> Tensor[(7, 2), bool] {
  %404 = cast(%var_3969, dtype="bool") /* ty=Tensor[(7, 2), bool] */;
  %405 = shape_of(%var_3968, dtype="int32") /* ty=Tensor[(2), int32] */;
  %406 = cast(%var_3968, dtype="bool") /* ty=Tensor[(7, 2), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  greater(%406, %407) /* ty=Tensor[(7, 2), bool] */
}

def @func_2591() -> (Tensor[(12, 7), float64],) {
  %408 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %409 = %408.0;
  (%409,)
}

def @func_2409() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) {
  %410 = cast(meta[relay.Constant][26] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %411 = reshape(%410, newshape=[8, 11, 1]) /* ty=Tensor[(8, 11, 1), float32] */;
  %412 = @func_680(%411) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32]) */;
  %413 = cast(meta[relay.Constant][27] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %414 = cast(meta[relay.Constant][27] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %415 = cast(meta[relay.Constant][27] /* ty=Tensor[(975), float32] */, dtype="float64") /* ty=Tensor[(975), float64] */;
  %416 = reshape(%413, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %417 = reshape(%414, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %418 = reshape(%415, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float64] */;
  %419 = @func_487(%416, %417, %418) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */;
  %420 = cast(meta[relay.Constant][27] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %421 = @func_1979() /* ty=Tensor[(12, 12, 15), float32] */;
  %422 = %412.1;
  %423 = %419.0;
  %424 = sinh(%420) /* ty=Tensor[(975), float32] */;
  (%421, %422, meta[relay.Constant][26] /* ty=Tensor[(88), float32] */, %423, %424)
}

def @func_4237() -> (Tensor[(7, 2), bool], Tensor[(12, 12, 15), float32]) {
  %425 = @func_4149() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(5, 315), int16], Tensor[(7, 2), bool], Tensor[(14), int16], Tensor[(12, 12, 15), float64]) */;
  %426 = @func_2505() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %427 = %425.3;
  %428 = %426.0;
  (%427, %428)
}

def @func_2633() -> (Tensor[(12, 7), float64],) {
  %429 = @func_660() /* ty=(Tensor[(12, 7), float64],) */;
  %430 = %429.0;
  (%430,)
}

def @func_4508(%var_4493: Tensor[(10, 3, 13), float32]) -> (Tensor[(10, 3, 13), uint16], Tensor[(10, 3, 13), float64]) {
  %431 = cast(%var_4493, dtype="float32") /* ty=Tensor[(10, 3, 13), float32] */;
  %432 = sin(%431) /* ty=Tensor[(10, 3, 13), float32] */;
  %433 = cast(%var_4493, dtype="uint16") /* ty=Tensor[(10, 3, 13), uint16] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="uint16") /* ty=Tensor[(10, 3, 13), uint16] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %437 = cast(%432, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
  %438 = right_shift(%435, %436) /* ty=Tensor[(10, 3, 13), uint16] */;
  %439 = cos(%437) /* ty=Tensor[(10, 3, 13), float64] */;
  (%438, %439)
}

def @func_1979() -> Tensor[(12, 12, 15), float32] {
  %440 = @func_1192() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %440.0
}

def @func_823(%var_809: Tensor[(88), float32]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(88), float32]) {
  %441 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %442 = cast(%var_809, dtype="float32") /* ty=Tensor[(88), float32] */;
  %443 = reshape(%442, newshape=[8, 11, 1]) /* ty=Tensor[(8, 11, 1), float32] */;
  %444 = @func_680(%443) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32]) */;
  %445 = %441.1;
  %446 = %444.1;
  (%445, %446, %var_809)
}

def @func_2677() -> (Tensor[(12, 7), float64],) {
  %447 = @func_660() /* ty=(Tensor[(12, 7), float64],) */;
  %448 = %447.0;
  (%448,)
}

def @func_3259() -> (Tensor[(12, 12, 15), float32],) {
  %449 = @func_2726() /* ty=Tensor[(12, 12, 15), float32] */;
  (%449,)
}

def @func_779() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %450 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %451 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %452 = %450.0;
  %453 = %451.1;
  (%452, %453)
}

def @func_5050() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %454 = @func_5004() /* ty=(Tensor[(12, 7), float64],) */;
  %455 = @func_2716() /* ty=Tensor[(12, 7), float64] */;
  %456 = %454.0;
  (%455, %456)
}

def @func_5590() -> (Tensor[(12, 7), float64],) {
  %457 = @func_406() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %458 = %457.0;
  (%458,)
}

def @func_5600() -> Tensor[(12, 7), float64] {
  %459 = @func_5590() /* ty=(Tensor[(12, 7), float64],) */;
  %459.0
}

def @func_3546(%var_3538: Tensor[(30), float32]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], Tensor[(30), float32], Tensor[(1620), float64]) {
  %460 = @func_2067() /* ty=(Tensor[(12, 7), float64],) */;
  %461 = cast(%var_3538, dtype="float32") /* ty=Tensor[(30), float32] */;
  %462 = cast(meta[relay.Constant][28] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %463 = reshape(%461, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
  %464 = reshape(%462, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %465 = @func_3025(%463, %464) /* ty=(Tensor[(12, 7), float64], float32, Tensor[(10, 3), float32], Tensor[(1620), float64], Tensor[(1620), float64], Tensor[(12, 12, 15), float32], Tensor[(180), int8], Tensor[(924), uint8], Tensor[(12, 7), float64]) */;
  %466 = @func_1177() /* ty=Tensor[(12, 7), float64] */;
  %467 = %460.0;
  %468 = %465.3;
  (%466, %467, %468, %var_3538, meta[relay.Constant][28] /* ty=Tensor[(1620), float64] */)
}

def @func_3872() -> (Tensor[(15, 16, 16), float64], Tensor[(12, 12, 15), float32]) {
  %469 = @func_2896() /* ty=(Tensor[(12, 12, 15), bool], Tensor[(924), uint8], Tensor[(1, 2028), float64], Tensor[(7, 132), uint8], Tensor[(15, 16, 16), float32]) */;
  %470 = %469.4;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
  %472 = asinh(%471) /* ty=Tensor[(15, 16, 16), float64] */;
  %473 = cast(%470, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%472, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %477 = @func_2457() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %478 = floor_divide(%475, %476) /* ty=Tensor[(15, 16, 16), float64] */;
  %479 = %477.0;
  (%478, %479)
}

def @func_2525() -> Tensor[(15, 16, 16), float32] {
  %480 = @func_2289() /* ty=(Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) */;
  %480.1
}

def @func_3105(%var_3078: Tensor[(154, 6), uint8]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1, 88), float32], Tensor[(180, 1), int8], int8, Tensor[(7, 11, 12), float32], Tensor[(154, 6), uint8], Tensor[(4, 13, 5), float64], Tensor[(260, 1), float64], Tensor[(15, 1, 12), bool], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32]) {
  %481 = @func_2841() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */;
  %482 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 88), float32] */, dtype="float32") /* ty=Tensor[(1, 88), float32] */;
  %483 = reshape(%482, newshape=[88]) /* ty=Tensor[(88), float32] */;
  %484 = @func_823(%483) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(88), float32]) */;
  %485 = cast(meta[relay.Constant][30] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %486 = reshape(%485, newshape=[]) /* ty=int8 */;
  %487 = @func_1666(%486) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(15, 1, 12), bool], int8, Tensor[(180, 1), int8]) */;
  %488 = cast(meta[relay.Constant][30] /* ty=int8 */, dtype="uint8") /* ty=uint8 */;
  %489 = cast(%var_3078, dtype="uint8") /* ty=Tensor[(154, 6), uint8] */;
  %490 = cast(%var_3078, dtype="uint8") /* ty=Tensor[(154, 6), uint8] */;
  %491 = %487.5;
  %492 = cast(%491, dtype="int8") /* ty=Tensor[(180, 1), int8] */;
  %493 = reshape(%488, newshape=[]) /* ty=uint8 */;
  %494 = reshape(%489, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint8] */;
  %495 = reshape(%490, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint8] */;
  %496 = reshape(%492, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %497 = @func_1122(%493, %494, %495, %496) /* ty=(Tensor[(7, 11, 12), bool], Tensor[(12, 7), float64], Tensor[(7, 11, 12), uint32], Tensor[(15, 1, 12), bool], Tensor[(180), int8], Tensor[(7, 11, 12), float32]) */;
  %498 = cast(meta[relay.Constant][31] /* ty=Tensor[(260, 1), float64] */, dtype="float64") /* ty=Tensor[(260, 1), float64] */;
  %499 = reshape(%498, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float64] */;
  %500 = cast(meta[relay.Constant][30] /* ty=int8 */, dtype="uint8") /* ty=uint8 */;
  %501 = %497.5;
  %502 = cast(%501, dtype="uint8") /* ty=Tensor[(7, 11, 12), uint8] */;
  %503 = cast(%501, dtype="uint8") /* ty=Tensor[(7, 11, 12), uint8] */;
  %504 = cast(%491, dtype="int8") /* ty=Tensor[(180, 1), int8] */;
  %505 = reshape(%500, newshape=[]) /* ty=uint8 */;
  %506 = reshape(%502, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint8] */;
  %507 = reshape(%503, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint8] */;
  %508 = reshape(%504, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %509 = @func_1122(%505, %506, %507, %508) /* ty=(Tensor[(7, 11, 12), bool], Tensor[(12, 7), float64], Tensor[(7, 11, 12), uint32], Tensor[(15, 1, 12), bool], Tensor[(180), int8], Tensor[(7, 11, 12), float32]) */;
  %510 = @func_406() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %511 = @func_751() /* ty=(Tensor[(12, 7), float64],) */;
  %512 = @func_2505() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %513 = %481.1;
  %514 = %484.1;
  %515 = @func_2804(%499) /* ty=Tensor[(4, 13, 5), float64] */;
  %516 = %509.3;
  %517 = %510.1;
  %518 = %511.0;
  %519 = %512.0;
  (%513, %514, meta[relay.Constant][29] /* ty=Tensor[(1, 88), float32] */, %491, meta[relay.Constant][30] /* ty=int8 */, %501, %var_3078, %515, meta[relay.Constant][31] /* ty=Tensor[(260, 1), float64] */, %516, %517, %518, %519)
}

def @func_1857(%var_1830: Tensor[(30), float32]) -> (Tensor[(12, 12, 15), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(18, 90), float64], Tensor[(12, 7), float64]) {
  %520 = cast(meta[relay.Constant][32] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %521 = cast(meta[relay.Constant][32] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %522 = cast(meta[relay.Constant][32] /* ty=Tensor[(975), float32] */, dtype="float64") /* ty=Tensor[(975), float64] */;
  %523 = reshape(%520, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %524 = reshape(%521, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %525 = reshape(%522, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float64] */;
  %526 = @func_487(%523, %524, %525) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */;
  %527 = cast(-9.54485f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %528 = cast(%var_1830, dtype="float32") /* ty=Tensor[(30), float32] */;
  %529 = cast(meta[relay.Constant][33] /* ty=Tensor[(18, 90), float64] */, dtype="float64") /* ty=Tensor[(18, 90), float64] */;
  %530 = reshape(%527, newshape=[]) /* ty=float32 */;
  %531 = reshape(%528, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), float32] */;
  %532 = reshape(%529, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %533 = @func_851(%530, %531, %532) /* ty=(Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) */;
  %534 = @func_779() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %535 = @func_1699() /* ty=Tensor[(12, 12, 15), float32] */;
  %536 = %526.0;
  %537 = %533.2;
  %538 = %534.0;
  (%535, %536, meta[relay.Constant][32] /* ty=Tensor[(975), float32] */, %537, -9.54485f /* ty=float32 */, %var_1830, meta[relay.Constant][33] /* ty=Tensor[(18, 90), float64] */, %538)
}

def @func_1122(%var_1045: uint8, %var_1046: Tensor[(7, 11, 12), uint8], %var_1102: Tensor[(7, 11, 12), uint8], %var_1108: Tensor[(180), int8]) -> (Tensor[(7, 11, 12), bool], Tensor[(12, 7), float64], Tensor[(7, 11, 12), uint32], Tensor[(15, 1, 12), bool], Tensor[(180), int8], Tensor[(7, 11, 12), float32]) {
  %539 = cast(%var_1045, dtype="bool") /* ty=bool */;
  %540 = cast(%var_1046, dtype="bool") /* ty=Tensor[(7, 11, 12), bool] */;
  %541 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %542 = cast(%var_1102, dtype="uint32") /* ty=Tensor[(7, 11, 12), uint32] */;
  %543 = shape_of(%var_1046, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%var_1046, dtype="uint32") /* ty=Tensor[(7, 11, 12), uint32] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %546 = cast(%var_1045, dtype="int8") /* ty=int8 */;
  %547 = cast(%var_1108, dtype="int8") /* ty=Tensor[(180), int8] */;
  %548 = reshape(%546, newshape=[]) /* ty=int8 */;
  %549 = reshape(%547, newshape=[15, 1, 12]) /* ty=Tensor[(15, 1, 12), int8] */;
  %550 = cast(%var_1046, dtype="float32") /* ty=Tensor[(7, 11, 12), float32] */;
  %551 = less(%539, %540) /* ty=Tensor[(7, 11, 12), bool] */;
  %552 = %541.0;
  %553 = maximum(%544, %545) /* ty=Tensor[(7, 11, 12), uint32] */;
  %554 = @func_884(%548, %549) /* ty=Tensor[(15, 1, 12), bool] */;
  %555 = atanh(%550) /* ty=Tensor[(7, 11, 12), float32] */;
  (%551, %552, %553, %554, %var_1108, %555)
}

def @func_851(%var_838: float32, %var_839: Tensor[(2, 1, 15), float32], %var_844: Tensor[(1620), float64]) -> (Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) {
  %556 = cast(%var_838, dtype="float32") /* ty=float32 */;
  %557 = cast(%var_839, dtype="float32") /* ty=Tensor[(2, 1, 15), float32] */;
  %558 = cast(%var_844, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %559 = cast(%var_844, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %560 = reshape(%558, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %561 = reshape(%559, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %562 = @func_122(%560, %561) /* ty=(Tensor[(15, 12, 9), float32], Tensor[(15, 12, 9), float64], Tensor[(15, 12, 9), float64]) */;
  %563 = maximum(%556, %557) /* ty=Tensor[(2, 1, 15), float32] */;
  %564 = %562.0;
  (%563, %564, %var_844)
}

def @func_2804(%var_2798: Tensor[(4, 13, 5), float64]) -> Tensor[(4, 13, 5), float64] {
  %565 = cast(%var_2798, dtype="float64") /* ty=Tensor[(4, 13, 5), float64] */;
  sigmoid(%565) /* ty=Tensor[(4, 13, 5), float64] */
}

def @func_2896() -> (Tensor[(12, 12, 15), bool], Tensor[(924), uint8], Tensor[(1, 2028), float64], Tensor[(7, 132), uint8], Tensor[(15, 16, 16), float32]) {
  %566 = @func_1699() /* ty=Tensor[(12, 12, 15), float32] */;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %568 = acos(%567) /* ty=Tensor[(12, 12, 15), float32] */;
  %569 = cast(%566, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 2028), float64] */, dtype="float64") /* ty=Tensor[(1, 2028), float64] */;
  %574 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 132), uint8] */, dtype="uint8") /* ty=Tensor[(7, 132), uint8] */;
  %575 = reshape(%573, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), float64] */;
  %576 = reshape(%574, newshape=[924]) /* ty=Tensor[(924), uint8] */;
  %577 = @func_1761(%575, %576) /* ty=(Tensor[(13, 12, 13), uint8], Tensor[(12, 7), float64], uint8, Tensor[(924), uint8], Tensor[(2160), bool]) */;
  %578 = greater_equal(%571, %572) /* ty=Tensor[(12, 12, 15), bool] */;
  %579 = %577.3;
  %580 = @func_2525() /* ty=Tensor[(15, 16, 16), float32] */;
  (%578, %579, meta[relay.Constant][34] /* ty=Tensor[(1, 2028), float64] */, meta[relay.Constant][35] /* ty=Tensor[(7, 132), uint8] */, %580)
}

def @func_3525() -> (Tensor[(15, 16, 16), float64],) {
  %581 = @func_2289() /* ty=(Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) */;
  %582 = %581.0;
  (%582,)
}

def @func_4189() -> (Tensor[(12, 7), float64], Tensor[(13, 8, 13), float32], Tensor[(1352), float32], Tensor[(1620, 1), float64], Tensor[(2160), float32]) {
  %583 = cast(meta[relay.Constant][36] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %584 = cast(meta[relay.Constant][36] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %585 = reshape(%583, newshape=[13, 8, 13]) /* ty=Tensor[(13, 8, 13), float32] */;
  %586 = reshape(%584, newshape=[13, 8, 13]) /* ty=Tensor[(13, 8, 13), float32] */;
  %587 = @func_3398(%585, %586) /* ty=(Tensor[(13, 8, 13), float32],) */;
  %588 = cast(meta[relay.Constant][37] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %589 = reshape(%588, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %590 = @func_3480(%589) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620, 1), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(2160), float32], Tensor[(15, 16, 16), float32]) */;
  %591 = @func_2493() /* ty=Tensor[(12, 7), float64] */;
  %592 = %587.0;
  %593 = %590.6;
  (%591, %592, meta[relay.Constant][36] /* ty=Tensor[(1352), float32] */, %593, meta[relay.Constant][37] /* ty=Tensor[(2160), float32] */)
}

def @func_5152(%var_5130: Tensor[(12, 12, 15), float32]) -> Tensor[(12, 12, 15), float64] {
  %594 = @func_2457() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %595 = %594.0;
  %596 = cast(%var_5130, dtype="float64") /* ty=Tensor[(12, 12, 15), float64] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%595, dtype="float64") /* ty=Tensor[(12, 12, 15), float64] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%598, %599) /* ty=Tensor[(12, 12, 15), float64] */
}

def @func_5352(%var_5345: Tensor[(7, 8, 8), uint32]) -> (Tensor[(7, 8, 8), bool],) {
  %600 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 8, 8), uint32] */, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
  %601 = shape_of(%var_5345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%var_5345, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %604 = less(%602, %603) /* ty=Tensor[(7, 8, 8), bool] */;
  (%604,)
}

def @func_4613() -> (Tensor[(12, 7), float64],) {
  %605 = @func_3796() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %606 = %605.1;
  (%606,)
}

def @func_6091(%var_6059: Tensor[(6, 390), float32], %var_6085: Tensor[(6, 390), bool]) -> (Tensor[(16, 6, 13), float64], Tensor[(1248), bool], Tensor[(6, 390), float64]) {
  %607 = cast(meta[relay.Constant][39] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %608 = reshape(%607, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), bool] */;
  %609 = @func_4821() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(10, 3, 13), uint16], Tensor[(1, 390), float32], Tensor[(12, 12, 15), int16]) */;
  %610 = %609.2;
  %611 = cast(%610, dtype="float64") /* ty=Tensor[(1, 390), float64] */;
  %612 = cast(%var_6059, dtype="float64") /* ty=Tensor[(6, 390), float64] */;
  %613 = power(%611, %612) /* ty=Tensor[(6, 390), float64] */;
  %614 = cast(%613, dtype="bool") /* ty=Tensor[(6, 390), bool] */;
  %615 = cast(%610, dtype="bool") /* ty=Tensor[(1, 390), bool] */;
  %616 = equal(%614, %615) /* ty=Tensor[(6, 390), bool] */;
  %617 = cast(%var_6085, dtype="float64") /* ty=Tensor[(6, 390), float64] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(2), int32] */;
  %619 = cast(%616, dtype="float64") /* ty=Tensor[(6, 390), float64] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %621 = @func_5838(%608) /* ty=Tensor[(16, 6, 13), float64] */;
  %622 = divide(%619, %620) /* ty=Tensor[(6, 390), float64] */;
  (%621, meta[relay.Constant][39] /* ty=Tensor[(1248), bool] */, %622)
}

def @func_2493() -> Tensor[(12, 7), float64] {
  @func_1177() /* ty=Tensor[(12, 7), float64] */
}

def @func_2726() -> Tensor[(12, 12, 15), float32] {
  %623 = @func_2457() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %623.0
}

def @func_2584() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %624 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %625 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %626 = %624.0;
  %627 = %625.0;
  (%626, %627)
}

def @func_4060(%var_4056: float32, %var_4057: Tensor[(30), float32], %var_4058: Tensor[(1620), float64]) -> (Tensor[(12, 7), float64], Tensor[(15, 12, 9), float32], float32, Tensor[(30), float32], Tensor[(1620), float64]) {
  %628 = @func_2633() /* ty=(Tensor[(12, 7), float64],) */;
  %629 = cast(%var_4056, dtype="float32") /* ty=float32 */;
  %630 = cast(%var_4057, dtype="float32") /* ty=Tensor[(30), float32] */;
  %631 = cast(%var_4058, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %632 = reshape(%629, newshape=[]) /* ty=float32 */;
  %633 = reshape(%630, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), float32] */;
  %634 = reshape(%631, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %635 = @func_851(%632, %633, %634) /* ty=(Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) */;
  %636 = %628.0;
  %637 = %635.1;
  (%636, %637, %var_4056, %var_4057, %var_4058)
}

def @func_1725() -> (Tensor[(12, 7), float64],) {
  %638 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %639 = %638.0;
  (%639,)
}

def @func_1761(%var_1734: Tensor[(13, 12, 13), float64], %var_1755: Tensor[(924), uint8]) -> (Tensor[(13, 12, 13), uint8], Tensor[(12, 7), float64], uint8, Tensor[(924), uint8], Tensor[(2160), bool]) {
  %640 = cast(%var_1734, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %641 = atan(%640) /* ty=Tensor[(13, 12, 13), float64] */;
  %642 = cast(%641, dtype="uint8") /* ty=Tensor[(13, 12, 13), uint8] */;
  %643 = shape_of(%var_1734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%var_1734, dtype="uint8") /* ty=Tensor[(13, 12, 13), uint8] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %646 = cast(meta[relay.Constant][40] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %647 = cast(%var_1755, dtype="uint8") /* ty=Tensor[(924), uint8] */;
  %648 = cast(meta[relay.Constant][41] /* ty=Tensor[(2160), bool] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %649 = reshape(%646, newshape=[]) /* ty=uint8 */;
  %650 = reshape(%647, newshape=[462, 2]) /* ty=Tensor[(462, 2), uint8] */;
  %651 = reshape(%648, newshape=[12, 12, 15]) /* ty=Tensor[(12, 12, 15), bool] */;
  %652 = @func_1418(%649, %650, %651) /* ty=(Tensor[(180), int8], uint8, Tensor[(462, 2), uint8], Tensor[(180), int8], Tensor[(12, 7), float64], Tensor[(12, 12, 15), uint32], Tensor[(12, 7), float64]) */;
  %653 = logical_xor(%644, %645) /* ty=Tensor[(13, 12, 13), uint8] */;
  %654 = %652.6;
  (%653, %654, meta[relay.Constant][40] /* ty=uint8 */, %var_1755, meta[relay.Constant][41] /* ty=Tensor[(2160), bool] */)
}

def @func_3480(%var_3473: Tensor[(2160), float32]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620, 1), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(2160), float32], Tensor[(15, 16, 16), float32]) {
  %655 = @func_779() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %656 = cast(-6.28884f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %657 = cast(meta[relay.Constant][42] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %658 = cast(meta[relay.Constant][43] /* ty=Tensor[(1620, 1), float64] */, dtype="float64") /* ty=Tensor[(1620, 1), float64] */;
  %659 = reshape(%656, newshape=[]) /* ty=float32 */;
  %660 = reshape(%657, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), float32] */;
  %661 = reshape(%658, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %662 = @func_851(%659, %660, %661) /* ty=(Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) */;
  %663 = @func_1026() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %664 = cast(%var_3473, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %665 = reshape(%664, newshape=[12, 12, 15]) /* ty=Tensor[(12, 12, 15), float32] */;
  %666 = @func_2289() /* ty=(Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) */;
  %667 = %655.0;
  %668 = @func_2217() /* ty=Tensor[(12, 7), float64] */;
  %669 = @func_2956() /* ty=Tensor[(12, 7), float64] */;
  %670 = %662.2;
  %671 = %663.0;
  %672 = @func_2021(%665) /* ty=Tensor[(12, 12, 15), int16] */;
  %673 = %666.1;
  (%667, %668, %669, %670, -6.28884f /* ty=float32 */, meta[relay.Constant][42] /* ty=Tensor[(30), float32] */, meta[relay.Constant][43] /* ty=Tensor[(1620, 1), float64] */, %671, %672, %var_3473, %673)
}

def @func_4679() -> Tensor[(12, 12, 15), float32] {
  %674 = @func_2841() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */;
  %674.3
}

def @func_5719() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) {
  %675 = @func_4624() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %676 = @func_5004() /* ty=(Tensor[(12, 7), float64],) */;
  %677 = %675.0;
  %678 = %676.0;
  (%677, %678)
}

def @func_5758() -> (Tensor[(12, 7), float64],) {
  %679 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %680 = %679.1;
  (%680,)
}

def @func_2000() -> (Tensor[(12, 7), float64],) {
  %681 = @func_779() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %682 = %681.0;
  (%682,)
}

def @func_6017(%var_5925: Tensor[(14, 10, 8), uint64], %var_5926: Tensor[(14, 10, 8), uint64], %var_5935: Tensor[(14, 10, 8), bool]) -> (Tensor[(14, 10, 8), int32], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32], Tensor[(975), float32], Tensor[(14, 10, 8), float32], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(12, 12, 15), float32], Tensor[(14, 10, 8), int16], Tensor[(12, 7), float64]) {
  %683 = cast(%var_5926, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %684 = shape_of(%var_5925, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%var_5925, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %687 = not_equal(%685, %686) /* ty=Tensor[(14, 10, 8), bool] */;
  %688 = cast(%var_5935, dtype="int32") /* ty=Tensor[(14, 10, 8), int32] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%687, dtype="int32") /* ty=Tensor[(14, 10, 8), int32] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %692 = @func_4850() /* ty=(Tensor[(15, 16, 16), float32], Tensor[(12, 12, 15), float32]) */;
  %693 = @func_4821() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(10, 3, 13), uint16], Tensor[(1, 390), float32], Tensor[(12, 12, 15), int16]) */;
  %694 = @func_2409() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) */;
  %695 = cast(%var_5925, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
  %696 = sqrt(%695) /* ty=Tensor[(14, 10, 8), float32] */;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %698 = log2(%697) /* ty=Tensor[(14, 10, 8), float64] */;
  %699 = cast(%696, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
  %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%698, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %703 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %704 = %693.0;
  %705 = cast(%704, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %706 = reshape(%705, newshape=[12, 12, 15]) /* ty=Tensor[(12, 12, 15), float32] */;
  %707 = @func_4624() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %708 = cast(%698, dtype="int16") /* ty=Tensor[(14, 10, 8), int16] */;
  %709 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%696, dtype="int16") /* ty=Tensor[(14, 10, 8), int16] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %712 = @func_2067() /* ty=(Tensor[(12, 7), float64],) */;
  %713 = minimum(%690, %691) /* ty=Tensor[(14, 10, 8), int32] */;
  %714 = %692.1;
  %715 = %694.4;
  %716 = power(%701, %702) /* ty=Tensor[(14, 10, 8), float32] */;
  %717 = %703.1;
  %718 = @func_2021(%706) /* ty=Tensor[(12, 12, 15), int16] */;
  %719 = %707.0;
  %720 = maximum(%710, %711) /* ty=Tensor[(14, 10, 8), int16] */;
  %721 = %712.0;
  (%713, %714, %704, %715, %716, %717, %718, %719, %720, %721)
}

def @func_1177() -> Tensor[(12, 7), float64] {
  %722 = @func_779() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %722.1
}

def @func_3736() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %723 = @func_2409() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) */;
  %724 = %723.0;
  %725 = cast(%724, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %726 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %727 = @func_2633() /* ty=(Tensor[(12, 7), float64],) */;
  %728 = log2(%725) /* ty=Tensor[(12, 12, 15), float32] */;
  %729 = %726.0;
  %730 = %727.0;
  (%728, %729, %730)
}

def @func_4821() -> (Tensor[(12, 12, 15), float32], Tensor[(10, 3, 13), uint16], Tensor[(1, 390), float32], Tensor[(12, 12, 15), int16]) {
  %731 = @func_4325() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %732 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 390), float32] */, dtype="float32") /* ty=Tensor[(1, 390), float32] */;
  %733 = reshape(%732, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), float32] */;
  %734 = @func_4508(%733) /* ty=(Tensor[(10, 3, 13), uint16], Tensor[(10, 3, 13), float64]) */;
  %735 = %731.0;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %737 = reshape(%736, newshape=[12, 12, 15]) /* ty=Tensor[(12, 12, 15), float32] */;
  %738 = %734.0;
  %739 = @func_2021(%737) /* ty=Tensor[(12, 12, 15), int16] */;
  (%735, %738, meta[relay.Constant][44] /* ty=Tensor[(1, 390), float32] */, %739)
}

def @func_5469(%var_5442: Tensor[(12, 12, 15), float32]) -> (Tensor[(12, 12, 15), uint32], Tensor[(12, 7), float64]) {
  %740 = @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %741 = %740.0;
  %742 = cast(%var_5442, dtype="uint32") /* ty=Tensor[(12, 12, 15), uint32] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="uint32") /* ty=Tensor[(12, 12, 15), uint32] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %746 = @func_4189() /* ty=(Tensor[(12, 7), float64], Tensor[(13, 8, 13), float32], Tensor[(1352), float32], Tensor[(1620, 1), float64], Tensor[(2160), float32]) */;
  %747 = bitwise_xor(%744, %745) /* ty=Tensor[(12, 12, 15), uint32] */;
  %748 = %746.0;
  (%747, %748)
}

def @func_3355() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) {
  %749 = @func_2919() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %750 = @func_2082() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %751 = %749.0;
  %752 = %750.0;
  (%751, %752)
}

def @func_2217() -> Tensor[(12, 7), float64] {
  %753 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %753.0
}

def @func_3398(%var_3386: Tensor[(13, 8, 13), float32], %var_3387: Tensor[(13, 8, 13), float32]) -> (Tensor[(13, 8, 13), float32],) {
  %754 = cast(%var_3387, dtype="float32") /* ty=Tensor[(13, 8, 13), float32] */;
  %755 = shape_of(%var_3386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%var_3386, dtype="float32") /* ty=Tensor[(13, 8, 13), float32] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %758 = mod(%756, %757) /* ty=Tensor[(13, 8, 13), float32] */;
  (%758,)
}

def @func_406() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %759 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %760 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %761 = %759.0;
  %762 = %760.1;
  (%761, %762)
}

def @func_4486(%var_4434: Tensor[(13, 16, 15), uint32]) -> (Tensor[(13, 16, 15), bool], Tensor[(13, 16, 15), float32], Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float64], Tensor[(12, 12, 15), float32]) {
  %763 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 16, 15), uint32] */, dtype="bool") /* ty=Tensor[(13, 16, 15), bool] */;
  %764 = shape_of(%var_4434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%var_4434, dtype="bool") /* ty=Tensor[(13, 16, 15), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %767 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 16, 15), uint32] */, dtype="float32") /* ty=Tensor[(13, 16, 15), float32] */;
  %768 = @func_3525() /* ty=(Tensor[(15, 16, 16), float64],) */;
  %769 = @func_3525() /* ty=(Tensor[(15, 16, 16), float64],) */;
  %770 = @func_796() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */;
  %771 = less(%765, %766) /* ty=Tensor[(13, 16, 15), bool] */;
  %772 = acosh(%767) /* ty=Tensor[(13, 16, 15), float32] */;
  %773 = %768.0;
  %774 = %769.0;
  %775 = %770.1;
  (%771, %772, %773, %774, %775)
}

def @func_5296(%var_5187: Tensor[(13, 5, 9), int32], %var_5231: Tensor[(975), float32], %var_5251: Tensor[(260), float64]) -> (Tensor[(13, 5, 9), int32], int8, Tensor[(5, 13, 15), int32], Tensor[(360, 6), float32], Tensor[(975), bool], Tensor[(12, 7), float64], Tensor[(7, 2), bool], Tensor[(14), int16], Tensor[(4, 13, 5), float64], Tensor[(260), float64], Tensor[(15, 12, 9), float64], Tensor[(1620, 1), float32], Tensor[(13, 5, 9), float32]) {
  %776 = cast(%var_5187, dtype="int32") /* ty=Tensor[(13, 5, 9), int32] */;
  %777 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(13, 5, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 5, 9), int32] */, dtype="int32") /* ty=Tensor[(13, 5, 9), int32] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %780 = cast(meta[relay.Constant][48] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %781 = cast(meta[relay.Constant][48] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %782 = cast(meta[relay.Constant][48] /* ty=Tensor[(975), float32] */, dtype="float64") /* ty=Tensor[(975), float64] */;
  %783 = reshape(%780, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %784 = reshape(%781, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %785 = reshape(%782, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float64] */;
  %786 = @func_487(%783, %784, %785) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */;
  %787 = cast(%var_5231, dtype="bool") /* ty=Tensor[(975), bool] */;
  %788 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(975), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %789 = cast(meta[relay.Constant][48] /* ty=Tensor[(975), float32] */, dtype="bool") /* ty=Tensor[(975), bool] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?), bool] */;
  %791 = @func_1026() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %792 = cast(meta[relay.Constant][50] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
  %793 = cast(meta[relay.Constant][50] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
  %794 = reshape(%792, newshape=[7, 2]) /* ty=Tensor[(7, 2), int16] */;
  %795 = reshape(%793, newshape=[7, 2]) /* ty=Tensor[(7, 2), int16] */;
  %796 = cast(%var_5251, dtype="float64") /* ty=Tensor[(260), float64] */;
  %797 = reshape(%796, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float64] */;
  %798 = cast(meta[relay.Constant][49] /* ty=Tensor[(360, 6), float32] */, dtype="float32") /* ty=Tensor[(360, 6), float32] */;
  %799 = reshape(%798, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %800 = @func_3480(%799) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620, 1), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(2160), float32], Tensor[(15, 16, 16), float32]) */;
  %801 = %800.6;
  %802 = cast(%801, dtype="float64") /* ty=Tensor[(1620, 1), float64] */;
  %803 = cast(%801, dtype="float64") /* ty=Tensor[(1620, 1), float64] */;
  %804 = reshape(%802, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %805 = reshape(%803, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %806 = @func_122(%804, %805) /* ty=(Tensor[(15, 12, 9), float32], Tensor[(15, 12, 9), float64], Tensor[(15, 12, 9), float64]) */;
  %807 = cast(%801, dtype="float32") /* ty=Tensor[(1620, 1), float32] */;
  %808 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 5, 9), int32] */, dtype="float64") /* ty=Tensor[(13, 5, 9), float64] */;
  %809 = exp(%808) /* ty=Tensor[(13, 5, 9), float64] */;
  %810 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %811 = reshape(%810, newshape=[]) /* ty=int8 */;
  %812 = @func_1666(%811) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(15, 1, 12), bool], int8, Tensor[(180, 1), int8]) */;
  %813 = %812.4;
  %814 = cast(%809, dtype="bool") /* ty=Tensor[(13, 5, 9), bool] */;
  %815 = cast(%813, dtype="bool") /* ty=bool */;
  %816 = greater_equal(%814, %815) /* ty=Tensor[(13, 5, 9), bool] */;
  %817 = cast(%809, dtype="float32") /* ty=Tensor[(13, 5, 9), float32] */;
  %818 = cast(%813, dtype="float32") /* ty=float32 */;
  %819 = floor_mod(%817, %818) /* ty=Tensor[(13, 5, 9), float32] */;
  %820 = cast(%819, dtype="float32") /* ty=Tensor[(13, 5, 9), float32] */;
  %821 = shape_of(%816, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%816, dtype="float32") /* ty=Tensor[(13, 5, 9), float32] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %824 = multiply(%778, %779) /* ty=Tensor[(13, 5, 9), int32] */;
  %825 = %786.0;
  %826 = logical_and(%789, %790) /* ty=Tensor[(975), bool] */;
  %827 = %791.1;
  %828 = @func_3981(%794, %795) /* ty=Tensor[(7, 2), bool] */;
  %829 = @func_2804(%797) /* ty=Tensor[(4, 13, 5), float64] */;
  %830 = %806.1;
  %831 = sigmoid(%807) /* ty=Tensor[(1620, 1), float32] */;
  %832 = mod(%822, %823) /* ty=Tensor[(13, 5, 9), float32] */;
  (%824, meta[relay.Constant][47] /* ty=int8 */, %825, meta[relay.Constant][49] /* ty=Tensor[(360, 6), float32] */, %826, %827, %828, meta[relay.Constant][50] /* ty=Tensor[(14), int16] */, %829, %var_5251, %830, %831, %832)
}

def @func_4283(%var_4258: Tensor[(11, 15, 4), float32], %var_4259: Tensor[(11, 15, 4), float32]) -> (Tensor[(11, 15, 4), float32], Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) {
  %833 = cast(%var_4259, dtype="float32") /* ty=Tensor[(11, 15, 4), float32] */;
  %834 = shape_of(%var_4258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%var_4258, dtype="float32") /* ty=Tensor[(11, 15, 4), float32] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %837 = @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %838 = @func_660() /* ty=(Tensor[(12, 7), float64],) */;
  %839 = mod(%835, %836) /* ty=Tensor[(11, 15, 4), float32] */;
  %840 = %837.0;
  %841 = %838.0;
  (%839, %840, %841)
}

def @func_2067() -> (Tensor[(12, 7), float64],) {
  %842 = @func_406() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %843 = %842.0;
  (%843,)
}

def @func_5838(%var_5816: Tensor[(16, 6, 13), bool]) -> Tensor[(16, 6, 13), float64] {
  %844 = cast(%var_5816, dtype="bool") /* ty=Tensor[(16, 6, 13), bool] */;
  %845 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(16, 6, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(meta[relay.Constant][51] /* ty=Tensor[(16, 6, 13), bool] */, dtype="bool") /* ty=Tensor[(16, 6, 13), bool] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %848 = logical_or(%846, %847) /* ty=Tensor[(16, 6, 13), bool] */;
  %849 = cast(%848, dtype="float32") /* ty=Tensor[(16, 6, 13), float32] */;
  %850 = rsqrt(%849) /* ty=Tensor[(16, 6, 13), float32] */;
  %851 = cast(%850, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
  sigmoid(%851) /* ty=Tensor[(16, 6, 13), float64] */
}

def @func_4571() -> Tensor[(12, 12, 15), float32] {
  @func_2726() /* ty=Tensor[(12, 12, 15), float32] */
}

def @func_4706() -> Tensor[(12, 7), float64] {
  @func_1177() /* ty=Tensor[(12, 7), float64] */
}

def @func_2457() -> (Tensor[(12, 12, 15), float32],) {
  %852 = @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %853 = %852.0;
  (%853,)
}

def @func_751() -> (Tensor[(12, 7), float64],) {
  %854 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %855 = %854.0;
  (%855,)
}

def @func_5119() -> (Tensor[(12, 7), float64],) {
  %856 = @func_2633() /* ty=(Tensor[(12, 7), float64],) */;
  %857 = %856.0;
  (%857,)
}

def @main(%var_6181: int8, %var_6182: Tensor[(5, 1, 2), int8]) -> (Tensor[(5, 1, 2), int8],) {
  %858 = cast(%var_6181, dtype="int8") /* ty=int8 */;
  %859 = cast(%var_6182, dtype="int8") /* ty=Tensor[(5, 1, 2), int8] */;
  %860 = right_shift(%858, %859) /* ty=Tensor[(5, 1, 2), int8] */;
  (%860,)
}

def @func_2082() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %861 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %862 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %863 = %861.0;
  %864 = %862.0;
  (%863, %864)
}

def @func_5326(%var_5305: Tensor[(3, 8, 10), float32], %var_5315: float32, %var_5316: Tensor[(30), float32], %var_5317: Tensor[(1620), float64]) -> (Tensor[(3, 8, 10), int8], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620), float64]) {
  %865 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 8, 10), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 10), float32] */;
  %866 = sin(%865) /* ty=Tensor[(3, 8, 10), float32] */;
  %867 = cast(%var_5305, dtype="int8") /* ty=Tensor[(3, 8, 10), int8] */;
  %868 = shape_of(%866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %869 = cast(%866, dtype="int8") /* ty=Tensor[(3, 8, 10), int8] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %871 = cast(%var_5315, dtype="float32") /* ty=float32 */;
  %872 = cast(%var_5316, dtype="float32") /* ty=Tensor[(30), float32] */;
  %873 = cast(%var_5317, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %874 = reshape(%871, newshape=[]) /* ty=float32 */;
  %875 = reshape(%872, newshape=[30]) /* ty=Tensor[(30), float32] */;
  %876 = reshape(%873, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %877 = @func_4060(%874, %875, %876) /* ty=(Tensor[(12, 7), float64], Tensor[(15, 12, 9), float32], float32, Tensor[(30), float32], Tensor[(1620), float64]) */;
  %878 = maximum(%869, %870) /* ty=Tensor[(3, 8, 10), int8] */;
  %879 = %877.4;
  (%878, %879, %var_5315, %var_5316, %var_5317)
}

def @func_2477() -> (Tensor[(12, 7), float64],) {
  %880 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %881 = %880.0;
  (%881,)
}

def @func_2021(%var_2016: Tensor[(12, 12, 15), float32]) -> Tensor[(12, 12, 15), int16] {
  %882 = @func_1979() /* ty=Tensor[(12, 12, 15), float32] */;
  %883 = cast(%var_2016, dtype="int16") /* ty=Tensor[(12, 12, 15), int16] */;
  %884 = shape_of(%882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(%882, dtype="int16") /* ty=Tensor[(12, 12, 15), int16] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%885, %886) /* ty=Tensor[(12, 12, 15), int16] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5154(%var_5153: Tensor[(12, 12, 15), float32]) -> Tensor[(12, 12, 15), float64] {
  %6 = fn (%var_5130: Tensor[(12, 12, 15), float32]) -> Tensor[(12, 12, 15), float64] {
    %0 = @func_2457() /* ty=(Tensor[(12, 12, 15), float32],) */;
    %1 = %0.0;
    %2 = cast(%var_5130, dtype="float64") /* ty=Tensor[(12, 12, 15), float64] */;
    %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
    %4 = cast(%1, dtype="float64") /* ty=Tensor[(12, 12, 15), float64] */;
    %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%4, %5) /* ty=Tensor[(12, 12, 15), float64] */
  };
  %6(%var_5153) /* ty=Tensor[(12, 12, 15), float64] */
}

def @func_4799(%var_4798: Tensor[(30), float32]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(975), float32], Tensor[(12, 7), float64], Tensor[(10, 3), float32], Tensor[(30), float32], Tensor[(12, 12, 15), float32], Tensor[(1620), uint16], Tensor[(15, 16, 16), float32]) {
  %36 = fn (%var_4764: Tensor[(30), float32]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(975), float32], Tensor[(12, 7), float64], Tensor[(10, 3), float32], Tensor[(30), float32], Tensor[(12, 12, 15), float32], Tensor[(1620), uint16], Tensor[(15, 16, 16), float32]) {
    %7 = @func_1979() /* ty=Tensor[(12, 12, 15), float32] */;
    %8 = cast(%7, dtype="float64") /* ty=Tensor[(12, 12, 15), float64] */;
    %9 = log(%8) /* ty=Tensor[(12, 12, 15), float64] */;
    %10 = cast(%9, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
    %11 = reshape(%10, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %12 = @func_3480(%11) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620, 1), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(2160), float32], Tensor[(15, 16, 16), float32]) */;
    %13 = @func_1026() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %14 = @func_3237() /* ty=(Tensor[(12, 7), float64], Tensor[(1, 2028), float64], Tensor[(15, 16, 16), float32], Tensor[(15, 16, 16), float64], Tensor[(12, 7), float64], Tensor[(4, 13, 5), float32]) */;
    %15 = @func_4375() /* ty=(Tensor[(12, 7), float64], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) */;
    %16 = @func_2841() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */;
    %17 = cast(%var_4764, dtype="float32") /* ty=Tensor[(30), float32] */;
    %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %19 = reshape(%17, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
    %20 = reshape(%18, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
    %21 = @func_3025(%19, %20) /* ty=(Tensor[(12, 7), float64], float32, Tensor[(10, 3), float32], Tensor[(1620), float64], Tensor[(1620), float64], Tensor[(12, 12, 15), float32], Tensor[(180), int8], Tensor[(924), uint8], Tensor[(12, 7), float64]) */;
    %22 = cast(%9, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
    %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(1620), float64] */, dtype="uint16") /* ty=Tensor[(1620), uint16] */;
    %24 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(1620), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(1620), float64] */, dtype="uint16") /* ty=Tensor[(1620), uint16] */;
    %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %27 = %12.1;
    %28 = %13.0;
    %29 = %14.4;
    %30 = %15.2;
    %31 = %16.1;
    %32 = %21.2;
    %33 = sinh(%22) /* ty=Tensor[(12, 12, 15), float32] */;
    %34 = bitwise_or(%25, %26) /* ty=Tensor[(1620), uint16] */;
    %35 = @func_2525() /* ty=Tensor[(15, 16, 16), float32] */;
    (%27, %28, %29, %30, %31, %32, %var_4764, %33, %34, %35)
  };
  %36(%var_4798) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(975), float32], Tensor[(12, 7), float64], Tensor[(10, 3), float32], Tensor[(30), float32], Tensor[(12, 12, 15), float32], Tensor[(1620), uint16], Tensor[(15, 16, 16), float32]) */
}

def @func_4511(%var_4509: Tensor[(10, 3, 13), float32]) -> (Tensor[(10, 3, 13), uint16], Tensor[(10, 3, 13), float64]) {
  @func_4508(%var_4509) /* ty=(Tensor[(10, 3, 13), uint16], Tensor[(10, 3, 13), float64]) */
}

def @func_2843() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) {
  @func_2841() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */
}

def @func_3401(%var_3399: Tensor[(13, 8, 13), float32], %var_3400: Tensor[(13, 8, 13), float32]) -> (Tensor[(13, 8, 13), float32],) {
  %42 = fn (%var_3386: Tensor[(13, 8, 13), float32], %var_3387: Tensor[(13, 8, 13), float32]) -> (Tensor[(13, 8, 13), float32],) {
    %37 = cast(%var_3387, dtype="float32") /* ty=Tensor[(13, 8, 13), float32] */;
    %38 = shape_of(%var_3386, dtype="int32") /* ty=Tensor[(3), int32] */;
    %39 = cast(%var_3386, dtype="float32") /* ty=Tensor[(13, 8, 13), float32] */;
    %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %41 = mod(%39, %40) /* ty=Tensor[(13, 8, 13), float32] */;
    (%41,)
  };
  %42(%var_3399, %var_3400) /* ty=(Tensor[(13, 8, 13), float32],) */
}

def @func_1580() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(88), float32], Tensor[(12, 7), float64]) {
  @func_1578() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(88), float32], Tensor[(12, 7), float64]) */
}

def @func_126(%var_124: Tensor[(15, 12, 9), float64], %var_125: Tensor[(15, 12, 9), float64]) -> (Tensor[(15, 12, 9), float32], Tensor[(15, 12, 9), float64], Tensor[(15, 12, 9), float64]) {
  @func_122(%var_124, %var_125) /* ty=(Tensor[(15, 12, 9), float32], Tensor[(15, 12, 9), float64], Tensor[(15, 12, 9), float64]) */
}

def @func_3736() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %43 = @func_2409() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) */;
  %44 = %43.0;
  %45 = cast(%44, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %46 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %47 = @func_2633() /* ty=(Tensor[(12, 7), float64],) */;
  %48 = log2(%45) /* ty=Tensor[(12, 12, 15), float32] */;
  %49 = %46.0;
  %50 = %47.0;
  (%48, %49, %50)
}

def @func_4376() -> (Tensor[(12, 7), float64], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) {
  %61 = fn () -> (Tensor[(12, 7), float64], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) {
    %51 = @func_3796() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %52 = cast(meta[relay.Constant][2] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %54 = cast(meta[relay.Constant][2] /* ty=Tensor[(975), float32] */, dtype="float64") /* ty=Tensor[(975), float64] */;
    %55 = reshape(%52, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
    %56 = reshape(%53, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
    %57 = reshape(%54, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float64] */;
    %58 = @func_487(%55, %56, %57) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */;
    %59 = %51.0;
    %60 = %58.0;
    (%59, %60, meta[relay.Constant][2] /* ty=Tensor[(975), float32] */)
  };
  %61() /* ty=(Tensor[(12, 7), float64], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) */
}

def @func_4954(%var_4952: Tensor[(15, 16, 16), float32], %var_4953: Tensor[(12, 12, 15), float32]) -> (Tensor[(15, 16, 16), bool], Tensor[(15, 12, 9), float32], Tensor[(6, 270), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32]) {
  @func_4950(%var_4952, %var_4953) /* ty=(Tensor[(15, 16, 16), bool], Tensor[(15, 12, 9), float32], Tensor[(6, 270), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32]) */
}

def @func_2506() -> (Tensor[(12, 12, 15), float32],) {
  %64 = fn () -> (Tensor[(12, 12, 15), float32],) {
    %62 = @func_2409() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) */;
    %63 = %62.0;
    (%63,)
  };
  %64() /* ty=(Tensor[(12, 12, 15), float32],) */
}

def @func_825(%var_824: Tensor[(88), float32]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(88), float32]) {
  %71 = fn (%var_809: Tensor[(88), float32]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(88), float32]) {
    %65 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %66 = cast(%var_809, dtype="float32") /* ty=Tensor[(88), float32] */;
    %67 = reshape(%66, newshape=[8, 11, 1]) /* ty=Tensor[(8, 11, 1), float32] */;
    %68 = @func_680(%67) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32]) */;
    %69 = %65.1;
    %70 = %68.1;
    (%69, %70, %var_809)
  };
  %71(%var_824) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(88), float32]) */
}

def @func_4626() -> (Tensor[(12, 12, 15), float32],) {
  @func_4624() /* ty=(Tensor[(12, 12, 15), float32],) */
}

def @func_1352() -> (Tensor[(12, 12, 15), float32],) {
  %72 = @func_796() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */;
  %73 = %72.1;
  (%73,)
}

def @func_5052() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  @func_5050() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */
}

def @func_4671(%var_4670: Tensor[(15, 16, 16), float64]) -> Tensor[(15, 16, 16), uint64] {
  %87 = fn (%var_4653: Tensor[(15, 16, 16), float64]) -> Tensor[(15, 16, 16), uint64] {
    %74 = @func_2289() /* ty=(Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) */;
    %75 = %74.1;
    %76 = cast(%75, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
    %77 = log2(%76) /* ty=Tensor[(15, 16, 16), float64] */;
    %78 = cast(%var_4653, dtype="bool") /* ty=Tensor[(15, 16, 16), bool] */;
    %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
    %80 = cast(%77, dtype="bool") /* ty=Tensor[(15, 16, 16), bool] */;
    %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %82 = greater(%80, %81) /* ty=Tensor[(15, 16, 16), bool] */;
    %83 = cast(%var_4653, dtype="uint64") /* ty=Tensor[(15, 16, 16), uint64] */;
    %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
    %85 = cast(%82, dtype="uint64") /* ty=Tensor[(15, 16, 16), uint64] */;
    %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    multiply(%85, %86) /* ty=Tensor[(15, 16, 16), uint64] */
  };
  %87(%var_4670) /* ty=Tensor[(15, 16, 16), uint64] */
}

def @func_5840(%var_5839: Tensor[(16, 6, 13), bool]) -> Tensor[(16, 6, 13), float64] {
  %96 = fn (%var_5816: Tensor[(16, 6, 13), bool]) -> Tensor[(16, 6, 13), float64] {
    %88 = cast(%var_5816, dtype="bool") /* ty=Tensor[(16, 6, 13), bool] */;
    %89 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(16, 6, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %90 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 6, 13), bool] */, dtype="bool") /* ty=Tensor[(16, 6, 13), bool] */;
    %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %92 = logical_or(%90, %91) /* ty=Tensor[(16, 6, 13), bool] */;
    %93 = cast(%92, dtype="float32") /* ty=Tensor[(16, 6, 13), float32] */;
    %94 = rsqrt(%93) /* ty=Tensor[(16, 6, 13), float32] */;
    %95 = cast(%94, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
    sigmoid(%95) /* ty=Tensor[(16, 6, 13), float64] */
  };
  %96(%var_5839) /* ty=Tensor[(16, 6, 13), float64] */
}

def @func_2807(%var_2805: Tensor[(4, 13, 5), float64]) -> Tensor[(4, 13, 5), float64] {
  @func_2804(%var_2805) /* ty=Tensor[(4, 13, 5), float64] */
}

def @func_5721() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) {
  @func_5719() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) */
}

def @func_1122(%var_1045: uint8, %var_1046: Tensor[(7, 11, 12), uint8], %var_1102: Tensor[(7, 11, 12), uint8], %var_1108: Tensor[(180), int8]) -> (Tensor[(7, 11, 12), bool], Tensor[(12, 7), float64], Tensor[(7, 11, 12), uint32], Tensor[(15, 1, 12), bool], Tensor[(180), int8], Tensor[(7, 11, 12), float32]) {
  %97 = cast(%var_1045, dtype="bool") /* ty=bool */;
  %98 = cast(%var_1046, dtype="bool") /* ty=Tensor[(7, 11, 12), bool] */;
  %99 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %100 = cast(%var_1102, dtype="uint32") /* ty=Tensor[(7, 11, 12), uint32] */;
  %101 = shape_of(%var_1046, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%var_1046, dtype="uint32") /* ty=Tensor[(7, 11, 12), uint32] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %104 = cast(%var_1045, dtype="int8") /* ty=int8 */;
  %105 = cast(%var_1108, dtype="int8") /* ty=Tensor[(180), int8] */;
  %106 = reshape(%104, newshape=[]) /* ty=int8 */;
  %107 = reshape(%105, newshape=[15, 1, 12]) /* ty=Tensor[(15, 1, 12), int8] */;
  %108 = cast(%var_1046, dtype="float32") /* ty=Tensor[(7, 11, 12), float32] */;
  %109 = less(%97, %98) /* ty=Tensor[(7, 11, 12), bool] */;
  %110 = %99.0;
  %111 = maximum(%102, %103) /* ty=Tensor[(7, 11, 12), uint32] */;
  %112 = @func_884(%106, %107) /* ty=Tensor[(15, 1, 12), bool] */;
  %113 = atanh(%108) /* ty=Tensor[(7, 11, 12), float32] */;
  (%109, %110, %111, %112, %var_1108, %113)
}

def @func_4851() -> (Tensor[(15, 16, 16), float32], Tensor[(12, 12, 15), float32]) {
  %119 = fn () -> (Tensor[(15, 16, 16), float32], Tensor[(12, 12, 15), float32]) {
    %114 = @func_3525() /* ty=(Tensor[(15, 16, 16), float64],) */;
    %115 = %114.0;
    %116 = cast(%115, dtype="float32") /* ty=Tensor[(15, 16, 16), float32] */;
    %117 = acosh(%116) /* ty=Tensor[(15, 16, 16), float32] */;
    %118 = @func_4571() /* ty=Tensor[(12, 12, 15), float32] */;
    (%117, %118)
  };
  %119() /* ty=(Tensor[(15, 16, 16), float32], Tensor[(12, 12, 15), float32]) */
}

def @func_6094(%var_6092: Tensor[(6, 390), float32], %var_6093: Tensor[(6, 390), bool]) -> (Tensor[(16, 6, 13), float64], Tensor[(1248), bool], Tensor[(6, 390), float64]) {
  %136 = fn (%var_6059: Tensor[(6, 390), float32], %var_6085: Tensor[(6, 390), bool]) -> (Tensor[(16, 6, 13), float64], Tensor[(1248), bool], Tensor[(6, 390), float64]) {
    %120 = cast(meta[relay.Constant][4] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %121 = reshape(%120, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), bool] */;
    %122 = @func_4821() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(10, 3, 13), uint16], Tensor[(1, 390), float32], Tensor[(12, 12, 15), int16]) */;
    %123 = %122.2;
    %124 = cast(%123, dtype="float64") /* ty=Tensor[(1, 390), float64] */;
    %125 = cast(%var_6059, dtype="float64") /* ty=Tensor[(6, 390), float64] */;
    %126 = power(%124, %125) /* ty=Tensor[(6, 390), float64] */;
    %127 = cast(%126, dtype="bool") /* ty=Tensor[(6, 390), bool] */;
    %128 = cast(%123, dtype="bool") /* ty=Tensor[(1, 390), bool] */;
    %129 = equal(%127, %128) /* ty=Tensor[(6, 390), bool] */;
    %130 = cast(%var_6085, dtype="float64") /* ty=Tensor[(6, 390), float64] */;
    %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(2), int32] */;
    %132 = cast(%129, dtype="float64") /* ty=Tensor[(6, 390), float64] */;
    %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %134 = @func_5838(%121) /* ty=Tensor[(16, 6, 13), float64] */;
    %135 = divide(%132, %133) /* ty=Tensor[(6, 390), float64] */;
    (%134, meta[relay.Constant][4] /* ty=Tensor[(1248), bool] */, %135)
  };
  %136(%var_6092, %var_6093) /* ty=(Tensor[(16, 6, 13), float64], Tensor[(1248), bool], Tensor[(6, 390), float64]) */
}

def @func_122(%var_58: Tensor[(15, 12, 9), float64], %var_63: Tensor[(15, 12, 9), float64]) -> (Tensor[(15, 12, 9), float32], Tensor[(15, 12, 9), float64], Tensor[(15, 12, 9), float64]) {
  %137 = cast(%var_63, dtype="float32") /* ty=Tensor[(15, 12, 9), float32] */;
  %138 = shape_of(%var_58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%var_58, dtype="float32") /* ty=Tensor[(15, 12, 9), float32] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %141 = cast(%var_58, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %142 = cast(%var_58, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %143 = sinh(%142) /* ty=Tensor[(15, 12, 9), float64] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(15, 12, 9), float32] */;
  %145 = asinh(%144) /* ty=Tensor[(15, 12, 9), float32] */;
  %146 = cast(%145, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %147 = cosh(%146) /* ty=Tensor[(15, 12, 9), float64] */;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %149 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%145, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %152 = power(%139, %140) /* ty=Tensor[(15, 12, 9), float32] */;
  %153 = sin(%141) /* ty=Tensor[(15, 12, 9), float64] */;
  %154 = mod(%150, %151) /* ty=Tensor[(15, 12, 9), float64] */;
  (%152, %153, %154)
}

def @func_4325() -> (Tensor[(12, 12, 15), float32],) {
  %155 = @func_3355() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) */;
  %156 = %155.0;
  (%156,)
}

def @func_4064(%var_4061: float32, %var_4062: Tensor[(30), float32], %var_4063: Tensor[(1620), float64]) -> (Tensor[(12, 7), float64], Tensor[(15, 12, 9), float32], float32, Tensor[(30), float32], Tensor[(1620), float64]) {
  %167 = fn (%var_4056: float32, %var_4057: Tensor[(30), float32], %var_4058: Tensor[(1620), float64]) -> (Tensor[(12, 7), float64], Tensor[(15, 12, 9), float32], float32, Tensor[(30), float32], Tensor[(1620), float64]) {
    %157 = @func_2633() /* ty=(Tensor[(12, 7), float64],) */;
    %158 = cast(%var_4056, dtype="float32") /* ty=float32 */;
    %159 = cast(%var_4057, dtype="float32") /* ty=Tensor[(30), float32] */;
    %160 = cast(%var_4058, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %161 = reshape(%158, newshape=[]) /* ty=float32 */;
    %162 = reshape(%159, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), float32] */;
    %163 = reshape(%160, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
    %164 = @func_851(%161, %162, %163) /* ty=(Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) */;
    %165 = %157.0;
    %166 = %164.1;
    (%165, %166, %var_4056, %var_4057, %var_4058)
  };
  %167(%var_4061, %var_4062, %var_4063) /* ty=(Tensor[(12, 7), float64], Tensor[(15, 12, 9), float32], float32, Tensor[(30), float32], Tensor[(1620), float64]) */
}

def @func_1979() -> Tensor[(12, 12, 15), float32] {
  %168 = @func_1192() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %168.0
}

def @func_780() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %173 = fn () -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
    %169 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
    %170 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %171 = %169.0;
    %172 = %170.1;
    (%171, %172)
  };
  %173() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */
}

def @func_2410() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) {
  %189 = fn () -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) {
    %174 = cast(meta[relay.Constant][5] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
    %175 = reshape(%174, newshape=[8, 11, 1]) /* ty=Tensor[(8, 11, 1), float32] */;
    %176 = @func_680(%175) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32]) */;
    %177 = cast(meta[relay.Constant][6] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %178 = cast(meta[relay.Constant][6] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %179 = cast(meta[relay.Constant][6] /* ty=Tensor[(975), float32] */, dtype="float64") /* ty=Tensor[(975), float64] */;
    %180 = reshape(%177, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
    %181 = reshape(%178, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
    %182 = reshape(%179, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float64] */;
    %183 = @func_487(%180, %181, %182) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */;
    %184 = cast(meta[relay.Constant][6] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %185 = @func_1979() /* ty=Tensor[(12, 12, 15), float32] */;
    %186 = %176.1;
    %187 = %183.0;
    %188 = sinh(%184) /* ty=Tensor[(975), float32] */;
    (%185, %186, meta[relay.Constant][5] /* ty=Tensor[(88), float32] */, %187, %188)
  };
  %189() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) */
}

def @func_527() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %194 = fn () -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
    %190 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %191 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %192 = %190.0;
    %193 = %191.1;
    (%192, %193)
  };
  %194() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */
}

def @func_1701() -> Tensor[(12, 12, 15), float32] {
  @func_1699() /* ty=Tensor[(12, 12, 15), float32] */
}

def @func_6017(%var_5925: Tensor[(14, 10, 8), uint64], %var_5926: Tensor[(14, 10, 8), uint64], %var_5935: Tensor[(14, 10, 8), bool]) -> (Tensor[(14, 10, 8), int32], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32], Tensor[(975), float32], Tensor[(14, 10, 8), float32], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(12, 12, 15), float32], Tensor[(14, 10, 8), int16], Tensor[(12, 7), float64]) {
  %195 = cast(%var_5926, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %196 = shape_of(%var_5925, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%var_5925, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %199 = not_equal(%197, %198) /* ty=Tensor[(14, 10, 8), bool] */;
  %200 = cast(%var_5935, dtype="int32") /* ty=Tensor[(14, 10, 8), int32] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="int32") /* ty=Tensor[(14, 10, 8), int32] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %204 = @func_4850() /* ty=(Tensor[(15, 16, 16), float32], Tensor[(12, 12, 15), float32]) */;
  %205 = @func_4821() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(10, 3, 13), uint16], Tensor[(1, 390), float32], Tensor[(12, 12, 15), int16]) */;
  %206 = @func_2409() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) */;
  %207 = cast(%var_5925, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
  %208 = sqrt(%207) /* ty=Tensor[(14, 10, 8), float32] */;
  %209 = cast(%208, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %210 = log2(%209) /* ty=Tensor[(14, 10, 8), float64] */;
  %211 = cast(%208, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%210, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %215 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %216 = %205.0;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %218 = reshape(%217, newshape=[12, 12, 15]) /* ty=Tensor[(12, 12, 15), float32] */;
  %219 = @func_4624() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %220 = cast(%210, dtype="int16") /* ty=Tensor[(14, 10, 8), int16] */;
  %221 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%208, dtype="int16") /* ty=Tensor[(14, 10, 8), int16] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %224 = @func_2067() /* ty=(Tensor[(12, 7), float64],) */;
  %225 = minimum(%202, %203) /* ty=Tensor[(14, 10, 8), int32] */;
  %226 = %204.1;
  %227 = %206.4;
  %228 = power(%213, %214) /* ty=Tensor[(14, 10, 8), float32] */;
  %229 = %215.1;
  %230 = @func_2021(%218) /* ty=Tensor[(12, 12, 15), int16] */;
  %231 = %219.0;
  %232 = maximum(%222, %223) /* ty=Tensor[(14, 10, 8), int16] */;
  %233 = %224.0;
  (%225, %226, %216, %227, %228, %229, %230, %231, %232, %233)
}

def @func_2634() -> (Tensor[(12, 7), float64],) {
  %236 = fn () -> (Tensor[(12, 7), float64],) {
    %234 = @func_660() /* ty=(Tensor[(12, 7), float64],) */;
    %235 = %234.0;
    (%235,)
  };
  %236() /* ty=(Tensor[(12, 7), float64],) */
}

def @main(%var_6181: int8, %var_6182: Tensor[(5, 1, 2), int8]) -> (Tensor[(5, 1, 2), int8],) {
  %237 = cast(%var_6181, dtype="int8") /* ty=int8 */;
  %238 = cast(%var_6182, dtype="int8") /* ty=Tensor[(5, 1, 2), int8] */;
  %239 = right_shift(%237, %238) /* ty=Tensor[(5, 1, 2), int8] */;
  (%239,)
}

def @func_713() -> (Tensor[(12, 7), float64],) {
  @func_711() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_798() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) {
  @func_796() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */
}

def @func_2069() -> (Tensor[(12, 7), float64],) {
  @func_2067() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_2958() -> Tensor[(12, 7), float64] {
  @func_2956() /* ty=Tensor[(12, 7), float64] */
}

def @func_4823() -> (Tensor[(12, 12, 15), float32], Tensor[(10, 3, 13), uint16], Tensor[(1, 390), float32], Tensor[(12, 12, 15), int16]) {
  @func_4821() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(10, 3, 13), uint16], Tensor[(1, 390), float32], Tensor[(12, 12, 15), int16]) */
}

def @func_4571() -> Tensor[(12, 12, 15), float32] {
  @func_2726() /* ty=Tensor[(12, 12, 15), float32] */
}

def @func_1699() -> Tensor[(12, 12, 15), float32] {
  %240 = @func_1192() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %240.0
}

def @func_4286(%var_4284: Tensor[(11, 15, 4), float32], %var_4285: Tensor[(11, 15, 4), float32]) -> (Tensor[(11, 15, 4), float32], Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) {
  %250 = fn (%var_4258: Tensor[(11, 15, 4), float32], %var_4259: Tensor[(11, 15, 4), float32]) -> (Tensor[(11, 15, 4), float32], Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) {
    %241 = cast(%var_4259, dtype="float32") /* ty=Tensor[(11, 15, 4), float32] */;
    %242 = shape_of(%var_4258, dtype="int32") /* ty=Tensor[(3), int32] */;
    %243 = cast(%var_4258, dtype="float32") /* ty=Tensor[(11, 15, 4), float32] */;
    %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %245 = @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */;
    %246 = @func_660() /* ty=(Tensor[(12, 7), float64],) */;
    %247 = mod(%243, %244) /* ty=Tensor[(11, 15, 4), float32] */;
    %248 = %245.0;
    %249 = %246.0;
    (%247, %248, %249)
  };
  %250(%var_4284, %var_4285) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) */
}

def @func_3355() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) {
  %251 = @func_2919() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %252 = @func_2082() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %253 = %251.0;
  %254 = %252.0;
  (%253, %254)
}

def @func_3342(%var_3339: Tensor[(12, 12, 15), float32], %var_3340: Tensor[(30, 1), float32], %var_3341: Tensor[(1620), float64]) -> (Tensor[(12, 12, 15), uint16], Tensor[(1620), float64], Tensor[(12, 12, 15), bool], Tensor[(1620), float64], Tensor[(30, 1), float32], Tensor[(12, 12, 15), float32], Tensor[(30, ?), bool]) {
  @func_3337(%var_3339, %var_3340, %var_3341) /* ty=(Tensor[(12, 12, 15), uint16], Tensor[(1620), float64], Tensor[(12, 12, 15), bool], Tensor[(1620), float64], Tensor[(30, 1), float32], Tensor[(12, 12, 15), float32], Tensor[(30, ?), bool]) */
}

def @func_3738() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  @func_3736() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */
}

def @func_753() -> (Tensor[(12, 7), float64],) {
  @func_751() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_1981() -> Tensor[(12, 12, 15), float32] {
  @func_1979() /* ty=Tensor[(12, 12, 15), float32] */
}

def @func_2494() -> Tensor[(12, 7), float64] {
  %255 = fn () -> Tensor[(12, 7), float64] {
    @func_1177() /* ty=Tensor[(12, 7), float64] */
  };
  %255() /* ty=Tensor[(12, 7), float64] */
}

def @func_5300(%var_5297: Tensor[(13, 5, 9), int32], %var_5298: Tensor[(975), float32], %var_5299: Tensor[(260), float64]) -> (Tensor[(13, 5, 9), int32], int8, Tensor[(5, 13, 15), int32], Tensor[(360, 6), float32], Tensor[(975), bool], Tensor[(12, 7), float64], Tensor[(7, 2), bool], Tensor[(14), int16], Tensor[(4, 13, 5), float64], Tensor[(260), float64], Tensor[(15, 12, 9), float64], Tensor[(1620, 1), float32], Tensor[(13, 5, 9), float32]) {
  %313 = fn (%var_5187: Tensor[(13, 5, 9), int32], %var_5231: Tensor[(975), float32], %var_5251: Tensor[(260), float64]) -> (Tensor[(13, 5, 9), int32], int8, Tensor[(5, 13, 15), int32], Tensor[(360, 6), float32], Tensor[(975), bool], Tensor[(12, 7), float64], Tensor[(7, 2), bool], Tensor[(14), int16], Tensor[(4, 13, 5), float64], Tensor[(260), float64], Tensor[(15, 12, 9), float64], Tensor[(1620, 1), float32], Tensor[(13, 5, 9), float32]) {
    %256 = cast(%var_5187, dtype="int32") /* ty=Tensor[(13, 5, 9), int32] */;
    %257 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(13, 5, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %258 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 5, 9), int32] */, dtype="int32") /* ty=Tensor[(13, 5, 9), int32] */;
    %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %260 = cast(meta[relay.Constant][9] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %261 = cast(meta[relay.Constant][9] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %262 = cast(meta[relay.Constant][9] /* ty=Tensor[(975), float32] */, dtype="float64") /* ty=Tensor[(975), float64] */;
    %263 = reshape(%260, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
    %264 = reshape(%261, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
    %265 = reshape(%262, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float64] */;
    %266 = @func_487(%263, %264, %265) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */;
    %267 = cast(%var_5231, dtype="bool") /* ty=Tensor[(975), bool] */;
    %268 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(975), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %269 = cast(meta[relay.Constant][9] /* ty=Tensor[(975), float32] */, dtype="bool") /* ty=Tensor[(975), bool] */;
    %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?), bool] */;
    %271 = @func_1026() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %272 = cast(meta[relay.Constant][11] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
    %273 = cast(meta[relay.Constant][11] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
    %274 = reshape(%272, newshape=[7, 2]) /* ty=Tensor[(7, 2), int16] */;
    %275 = reshape(%273, newshape=[7, 2]) /* ty=Tensor[(7, 2), int16] */;
    %276 = cast(%var_5251, dtype="float64") /* ty=Tensor[(260), float64] */;
    %277 = reshape(%276, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float64] */;
    %278 = cast(meta[relay.Constant][10] /* ty=Tensor[(360, 6), float32] */, dtype="float32") /* ty=Tensor[(360, 6), float32] */;
    %279 = reshape(%278, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %280 = @func_3480(%279) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620, 1), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(2160), float32], Tensor[(15, 16, 16), float32]) */;
    %281 = %280.6;
    %282 = cast(%281, dtype="float64") /* ty=Tensor[(1620, 1), float64] */;
    %283 = cast(%281, dtype="float64") /* ty=Tensor[(1620, 1), float64] */;
    %284 = reshape(%282, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
    %285 = reshape(%283, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
    %286 = @func_122(%284, %285) /* ty=(Tensor[(15, 12, 9), float32], Tensor[(15, 12, 9), float64], Tensor[(15, 12, 9), float64]) */;
    %287 = cast(%281, dtype="float32") /* ty=Tensor[(1620, 1), float32] */;
    %288 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 5, 9), int32] */, dtype="float64") /* ty=Tensor[(13, 5, 9), float64] */;
    %289 = exp(%288) /* ty=Tensor[(13, 5, 9), float64] */;
    %290 = cast(meta[relay.Constant][8] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %291 = reshape(%290, newshape=[]) /* ty=int8 */;
    %292 = @func_1666(%291) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(15, 1, 12), bool], int8, Tensor[(180, 1), int8]) */;
    %293 = %292.4;
    %294 = cast(%289, dtype="bool") /* ty=Tensor[(13, 5, 9), bool] */;
    %295 = cast(%293, dtype="bool") /* ty=bool */;
    %296 = greater_equal(%294, %295) /* ty=Tensor[(13, 5, 9), bool] */;
    %297 = cast(%289, dtype="float32") /* ty=Tensor[(13, 5, 9), float32] */;
    %298 = cast(%293, dtype="float32") /* ty=float32 */;
    %299 = floor_mod(%297, %298) /* ty=Tensor[(13, 5, 9), float32] */;
    %300 = cast(%299, dtype="float32") /* ty=Tensor[(13, 5, 9), float32] */;
    %301 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%296, dtype="float32") /* ty=Tensor[(13, 5, 9), float32] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %304 = multiply(%258, %259) /* ty=Tensor[(13, 5, 9), int32] */;
    %305 = %266.0;
    %306 = logical_and(%269, %270) /* ty=Tensor[(975), bool] */;
    %307 = %271.1;
    %308 = @func_3981(%274, %275) /* ty=Tensor[(7, 2), bool] */;
    %309 = @func_2804(%277) /* ty=Tensor[(4, 13, 5), float64] */;
    %310 = %286.1;
    %311 = sigmoid(%287) /* ty=Tensor[(1620, 1), float32] */;
    %312 = mod(%302, %303) /* ty=Tensor[(13, 5, 9), float32] */;
    (%304, meta[relay.Constant][8] /* ty=int8 */, %305, meta[relay.Constant][10] /* ty=Tensor[(360, 6), float32] */, %306, %307, %308, meta[relay.Constant][11] /* ty=Tensor[(14), int16] */, %309, %var_5251, %310, %311, %312)
  };
  %313(%var_5297, %var_5298, %var_5299) /* ty=(Tensor[(13, 5, 9), int32], int8, Tensor[(5, 13, 15), int32], Tensor[(360, 6), float32], Tensor[(975), bool], Tensor[(12, 7), float64], Tensor[(7, 2), bool], Tensor[(14), int16], Tensor[(4, 13, 5), float64], Tensor[(260), float64], Tensor[(15, 12, 9), float64], Tensor[(1620, 1), float32], Tensor[(13, 5, 9), float32]) */
}

def @func_1896() -> Tensor[(12, 7), float64] {
  @func_1894() /* ty=Tensor[(12, 7), float64] */
}

def @func_2479() -> (Tensor[(12, 7), float64],) {
  @func_2477() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_5664() -> (Tensor[(1352), float64],) {
  %314 = @func_4189() /* ty=(Tensor[(12, 7), float64], Tensor[(13, 8, 13), float32], Tensor[(1352), float32], Tensor[(1620, 1), float64], Tensor[(2160), float32]) */;
  %315 = %314.2;
  %316 = cast(%315, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %317 = rsqrt(%316) /* ty=Tensor[(1352), float64] */;
  %318 = cast(%317, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %319 = asinh(%318) /* ty=Tensor[(1352), float32] */;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %321 = acosh(%320) /* ty=Tensor[(1352), float64] */;
  (%321,)
}

def @func_3797() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %325 = fn () -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
    %322 = @func_2591() /* ty=(Tensor[(12, 7), float64],) */;
    %323 = %322.0;
    %324 = @func_2956() /* ty=Tensor[(12, 7), float64] */;
    (%323, %324)
  };
  %325() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */
}

def @func_4401() -> Tensor[(12, 7), float64] {
  %327 = fn () -> Tensor[(12, 7), float64] {
    %326 = @func_1578() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(88), float32], Tensor[(12, 7), float64]) */;
    %326.1
  };
  %327() /* ty=Tensor[(12, 7), float64] */
}

def @func_6043() -> Tensor[(12, 7), float64] {
  %328 = @func_2000() /* ty=(Tensor[(12, 7), float64],) */;
  %328.0
}

def @func_887(%var_885: int8, %var_886: Tensor[(15, 1, 12), int8]) -> Tensor[(15, 1, 12), bool] {
  %331 = fn (%var_870: int8, %var_871: Tensor[(15, 1, 12), int8]) -> Tensor[(15, 1, 12), bool] {
    %329 = cast(%var_870, dtype="bool") /* ty=bool */;
    %330 = cast(%var_871, dtype="bool") /* ty=Tensor[(15, 1, 12), bool] */;
    not_equal(%329, %330) /* ty=Tensor[(15, 1, 12), bool] */
  };
  %331(%var_885, %var_886) /* ty=Tensor[(15, 1, 12), bool] */
}

def @func_3261() -> (Tensor[(12, 12, 15), float32],) {
  @func_3259() /* ty=(Tensor[(12, 12, 15), float32],) */
}

def @func_1354() -> (Tensor[(12, 12, 15), float32],) {
  @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */
}

def @func_3357() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) {
  @func_3355() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) */
}

def @func_5050() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %332 = @func_5004() /* ty=(Tensor[(12, 7), float64],) */;
  %333 = @func_2716() /* ty=Tensor[(12, 7), float64] */;
  %334 = %332.0;
  (%333, %334)
}

def @func_2841() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) {
  %335 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %336 = @func_1725() /* ty=(Tensor[(12, 7), float64],) */;
  %337 = @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %338 = %335.0;
  %339 = %336.0;
  %340 = @func_1699() /* ty=Tensor[(12, 12, 15), float32] */;
  %341 = %337.0;
  (%338, %339, %340, %341)
}

def @func_4680() -> Tensor[(12, 12, 15), float32] {
  %343 = fn () -> Tensor[(12, 12, 15), float32] {
    %342 = @func_2841() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */;
    %342.3
  };
  %343() /* ty=Tensor[(12, 12, 15), float32] */
}

def @func_487(%var_428: Tensor[(5, 13, 15), float32], %var_437: Tensor[(5, 13, 15), float32], %var_474: Tensor[(5, 13, 15), float64]) -> (Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) {
  %344 = cast(%var_437, dtype="int32") /* ty=Tensor[(5, 13, 15), int32] */;
  %345 = shape_of(%var_428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%var_428, dtype="int32") /* ty=Tensor[(5, 13, 15), int32] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %348 = @func_406() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %349 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 1620), float64] */, dtype="float64") /* ty=Tensor[(1, 1620), float64] */;
  %350 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 1620), float64] */, dtype="float64") /* ty=Tensor[(1, 1620), float64] */;
  %351 = reshape(%349, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %352 = reshape(%350, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %353 = @func_122(%351, %352) /* ty=(Tensor[(15, 12, 9), float32], Tensor[(15, 12, 9), float64], Tensor[(15, 12, 9), float64]) */;
  %354 = %353.0;
  %355 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 1620), float64] */, dtype="bool") /* ty=Tensor[(1, 1620), bool] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%354, dtype="bool") /* ty=Tensor[(15, 12, 9), bool] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %359 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 13, 15), float32] */, dtype="bool") /* ty=Tensor[(5, 13, 15), bool] */;
  %360 = shape_of(%var_428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%var_428, dtype="bool") /* ty=Tensor[(5, 13, 15), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %363 = less_equal(%361, %362) /* ty=Tensor[(5, 13, 15), bool] */;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(5, 13, 15), float64] */;
  %365 = shape_of(%var_428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%var_428, dtype="float64") /* ty=Tensor[(5, 13, 15), float64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %368 = mod(%366, %367) /* ty=Tensor[(5, 13, 15), float64] */;
  %369 = cast(%var_474, dtype="bool") /* ty=Tensor[(5, 13, 15), bool] */;
  %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%368, dtype="bool") /* ty=Tensor[(5, 13, 15), bool] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %373 = cast(%var_474, dtype="float64") /* ty=Tensor[(5, 13, 15), float64] */;
  %374 = logical_xor(%346, %347) /* ty=Tensor[(5, 13, 15), int32] */;
  %375 = %348.0;
  %376 = logical_and(%357, %358) /* ty=Tensor[(15, 12, 9), bool] */;
  %377 = greater_equal(%371, %372) /* ty=Tensor[(5, 13, 15), bool] */;
  %378 = log2(%373) /* ty=Tensor[(5, 13, 15), float64] */;
  (%374, %375, %376, %377, %378)
}

def @func_492(%var_489: Tensor[(5, 13, 15), float32], %var_490: Tensor[(5, 13, 15), float32], %var_491: Tensor[(5, 13, 15), float64]) -> (Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) {
  @func_487(%var_489, %var_490, %var_491) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */
}

def @func_407() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %383 = fn () -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
    %379 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %380 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %381 = %379.0;
    %382 = %380.1;
    (%381, %382)
  };
  %383() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */
}

def @func_1578() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(88), float32], Tensor[(12, 7), float64]) {
  %384 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %385 = @func_779() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %386 = cast(meta[relay.Constant][14] /* ty=Tensor[(325, 3), float32] */, dtype="float32") /* ty=Tensor[(325, 3), float32] */;
  %387 = cast(meta[relay.Constant][14] /* ty=Tensor[(325, 3), float32] */, dtype="float32") /* ty=Tensor[(325, 3), float32] */;
  %388 = cast(meta[relay.Constant][14] /* ty=Tensor[(325, 3), float32] */, dtype="float64") /* ty=Tensor[(325, 3), float64] */;
  %389 = reshape(%386, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %390 = reshape(%387, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %391 = reshape(%388, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float64] */;
  %392 = @func_487(%389, %390, %391) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */;
  %393 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %394 = cast(meta[relay.Constant][15] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %395 = reshape(%394, newshape=[88]) /* ty=Tensor[(88), float32] */;
  %396 = @func_823(%395) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(88), float32]) */;
  %397 = @func_779() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %398 = %384.0;
  %399 = %385.1;
  %400 = %392.1;
  %401 = %393.0;
  %402 = %396.2;
  %403 = %397.0;
  (%398, %399, %400, meta[relay.Constant][14] /* ty=Tensor[(325, 3), float32] */, %401, %402, meta[relay.Constant][15] /* ty=Tensor[(88), float32] */, %403)
}

def @func_1894() -> Tensor[(12, 7), float64] {
  %404 = @func_1578() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(88), float32], Tensor[(12, 7), float64]) */;
  %404.2
}

def @func_3337(%var_3277: Tensor[(12, 12, 15), float32], %var_3290: Tensor[(30, 1), float32], %var_3291: Tensor[(1620), float64]) -> (Tensor[(12, 12, 15), uint16], Tensor[(1620), float64], Tensor[(12, 12, 15), bool], Tensor[(1620), float64], Tensor[(30, 1), float32], Tensor[(12, 12, 15), float32], Tensor[(30, ?), bool]) {
  %405 = @func_2919() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %406 = %405.0;
  %407 = cast(%var_3277, dtype="uint16") /* ty=Tensor[(12, 12, 15), uint16] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="uint16") /* ty=Tensor[(12, 12, 15), uint16] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %411 = cast(%406, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %412 = cast(3.73497f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %413 = cast(3.73497f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %414 = cast(%var_3290, dtype="float32") /* ty=Tensor[(30, 1), float32] */;
  %415 = cast(%var_3291, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %416 = reshape(%413, newshape=[]) /* ty=float32 */;
  %417 = reshape(%414, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), float32] */;
  %418 = reshape(%415, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %419 = @func_851(%416, %417, %418) /* ty=(Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) */;
  %420 = %419.2;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %422 = cast(%var_3290, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %423 = log10(%422) /* ty=Tensor[(30, 1), float64] */;
  %424 = cast(%423, dtype="float32") /* ty=Tensor[(30, 1), float32] */;
  %425 = @func_2505() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %426 = cast(%423, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %427 = erf(%426) /* ty=Tensor[(30, 1), float64] */;
  %428 = cast(%427, dtype="bool") /* ty=Tensor[(30, 1), bool] */;
  %429 = shape_of(%423, dtype="int32") /* ty=Tensor[(2), int32] */;
  %430 = cast(%423, dtype="bool") /* ty=Tensor[(30, 1), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %432 = left_shift(%409, %410) /* ty=Tensor[(12, 12, 15), uint16] */;
  %433 = not_equal(%411, %412) /* ty=Tensor[(12, 12, 15), bool] */;
  %434 = log(%421) /* ty=Tensor[(1620), float64] */;
  %435 = sqrt(%424) /* ty=Tensor[(30, 1), float32] */;
  %436 = %425.0;
  %437 = less_equal(%430, %431) /* ty=Tensor[(30, ?), bool] */;
  (%432, %var_3291, %433, %434, %435, %436, %437)
}

def @func_2727() -> Tensor[(12, 12, 15), float32] {
  %439 = fn () -> Tensor[(12, 12, 15), float32] {
    %438 = @func_2457() /* ty=(Tensor[(12, 12, 15), float32],) */;
    %438.0
  };
  %439() /* ty=Tensor[(12, 12, 15), float32] */
}

def @func_2527() -> Tensor[(15, 16, 16), float32] {
  @func_2525() /* ty=Tensor[(15, 16, 16), float32] */
}

def @func_4238() -> (Tensor[(7, 2), bool], Tensor[(12, 12, 15), float32]) {
  %444 = fn () -> (Tensor[(7, 2), bool], Tensor[(12, 12, 15), float32]) {
    %440 = @func_4149() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(5, 315), int16], Tensor[(7, 2), bool], Tensor[(14), int16], Tensor[(12, 12, 15), float64]) */;
    %441 = @func_2505() /* ty=(Tensor[(12, 12, 15), float32],) */;
    %442 = %440.3;
    %443 = %441.0;
    (%442, %443)
  };
  %444() /* ty=(Tensor[(7, 2), bool], Tensor[(12, 12, 15), float32]) */
}

def @func_1726() -> (Tensor[(12, 7), float64],) {
  %447 = fn () -> (Tensor[(12, 7), float64],) {
    %445 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %446 = %445.0;
    (%446,)
  };
  %447() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_3985(%var_3983: Tensor[(7, 2), int16], %var_3984: Tensor[(7, 2), int16]) -> Tensor[(7, 2), bool] {
  @func_3981(%var_3983, %var_3984) /* ty=Tensor[(7, 2), bool] */
}

def @func_2000() -> (Tensor[(12, 7), float64],) {
  %448 = @func_779() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %449 = %448.0;
  (%449,)
}

def @func_751() -> (Tensor[(12, 7), float64],) {
  %450 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %451 = %450.0;
  (%451,)
}

def @func_2591() -> (Tensor[(12, 7), float64],) {
  %452 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %453 = %452.0;
  (%453,)
}

def @func_2593() -> (Tensor[(12, 7), float64],) {
  @func_2591() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_2083() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %458 = fn () -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
    %454 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
    %455 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
    %456 = %454.0;
    %457 = %455.0;
    (%456, %457)
  };
  %458() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */
}

def @func_683(%var_681: Tensor[(8, 11, 1), float32]) -> (Tensor[(8, 11, 1), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32]) {
  @func_680(%var_681) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32]) */
}

def @func_5666() -> (Tensor[(1352), float64],) {
  @func_5664() /* ty=(Tensor[(1352), float64],) */
}

def @func_1859(%var_1858: Tensor[(30), float32]) -> (Tensor[(12, 12, 15), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(18, 90), float64], Tensor[(12, 7), float64]) {
  %478 = fn (%var_1830: Tensor[(30), float32]) -> (Tensor[(12, 12, 15), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(18, 90), float64], Tensor[(12, 7), float64]) {
    %459 = cast(meta[relay.Constant][16] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %460 = cast(meta[relay.Constant][16] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %461 = cast(meta[relay.Constant][16] /* ty=Tensor[(975), float32] */, dtype="float64") /* ty=Tensor[(975), float64] */;
    %462 = reshape(%459, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
    %463 = reshape(%460, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
    %464 = reshape(%461, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float64] */;
    %465 = @func_487(%462, %463, %464) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */;
    %466 = cast(-9.54485f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %467 = cast(%var_1830, dtype="float32") /* ty=Tensor[(30), float32] */;
    %468 = cast(meta[relay.Constant][17] /* ty=Tensor[(18, 90), float64] */, dtype="float64") /* ty=Tensor[(18, 90), float64] */;
    %469 = reshape(%466, newshape=[]) /* ty=float32 */;
    %470 = reshape(%467, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), float32] */;
    %471 = reshape(%468, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
    %472 = @func_851(%469, %470, %471) /* ty=(Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) */;
    %473 = @func_779() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %474 = @func_1699() /* ty=Tensor[(12, 12, 15), float32] */;
    %475 = %465.0;
    %476 = %472.2;
    %477 = %473.0;
    (%474, %475, meta[relay.Constant][16] /* ty=Tensor[(975), float32] */, %476, -9.54485f /* ty=float32 */, %var_1830, meta[relay.Constant][17] /* ty=Tensor[(18, 90), float64] */, %477)
  };
  %478(%var_1858) /* ty=(Tensor[(12, 12, 15), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(18, 90), float64], Tensor[(12, 7), float64]) */
}

def @func_2525() -> Tensor[(15, 16, 16), float32] {
  %479 = @func_2289() /* ty=(Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) */;
  %479.1
}

def @func_1761(%var_1734: Tensor[(13, 12, 13), float64], %var_1755: Tensor[(924), uint8]) -> (Tensor[(13, 12, 13), uint8], Tensor[(12, 7), float64], uint8, Tensor[(924), uint8], Tensor[(2160), bool]) {
  %480 = cast(%var_1734, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %481 = atan(%480) /* ty=Tensor[(13, 12, 13), float64] */;
  %482 = cast(%481, dtype="uint8") /* ty=Tensor[(13, 12, 13), uint8] */;
  %483 = shape_of(%var_1734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_1734, dtype="uint8") /* ty=Tensor[(13, 12, 13), uint8] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %486 = cast(meta[relay.Constant][18] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %487 = cast(%var_1755, dtype="uint8") /* ty=Tensor[(924), uint8] */;
  %488 = cast(meta[relay.Constant][19] /* ty=Tensor[(2160), bool] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %489 = reshape(%486, newshape=[]) /* ty=uint8 */;
  %490 = reshape(%487, newshape=[462, 2]) /* ty=Tensor[(462, 2), uint8] */;
  %491 = reshape(%488, newshape=[12, 12, 15]) /* ty=Tensor[(12, 12, 15), bool] */;
  %492 = @func_1418(%489, %490, %491) /* ty=(Tensor[(180), int8], uint8, Tensor[(462, 2), uint8], Tensor[(180), int8], Tensor[(12, 7), float64], Tensor[(12, 12, 15), uint32], Tensor[(12, 7), float64]) */;
  %493 = logical_xor(%484, %485) /* ty=Tensor[(13, 12, 13), uint8] */;
  %494 = %492.6;
  (%493, %494, meta[relay.Constant][18] /* ty=uint8 */, %var_1755, meta[relay.Constant][19] /* ty=Tensor[(2160), bool] */)
}

def @func_2218() -> Tensor[(12, 7), float64] {
  %496 = fn () -> Tensor[(12, 7), float64] {
    %495 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %495.0
  };
  %496() /* ty=Tensor[(12, 7), float64] */
}

def @func_5005() -> (Tensor[(12, 7), float64],) {
  %499 = fn () -> (Tensor[(12, 7), float64],) {
    %497 = @func_2591() /* ty=(Tensor[(12, 7), float64],) */;
    %498 = %497.0;
    (%498,)
  };
  %499() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_1194() -> (Tensor[(12, 12, 15), float32],) {
  @func_1192() /* ty=(Tensor[(12, 12, 15), float32],) */
}

def @func_1128(%var_1124: uint8, %var_1125: Tensor[(7, 11, 12), uint8], %var_1126: Tensor[(7, 11, 12), uint8], %var_1127: Tensor[(180), int8]) -> (Tensor[(7, 11, 12), bool], Tensor[(12, 7), float64], Tensor[(7, 11, 12), uint32], Tensor[(15, 1, 12), bool], Tensor[(180), int8], Tensor[(7, 11, 12), float32]) {
  @func_1122(%var_1124, %var_1125, %var_1126, %var_1127) /* ty=(Tensor[(7, 11, 12), bool], Tensor[(12, 7), float64], Tensor[(7, 11, 12), uint32], Tensor[(15, 1, 12), bool], Tensor[(180), int8], Tensor[(7, 11, 12), float32]) */
}

def @func_3480(%var_3473: Tensor[(2160), float32]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620, 1), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(2160), float32], Tensor[(15, 16, 16), float32]) {
  %500 = @func_779() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %501 = cast(-6.28884f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %502 = cast(meta[relay.Constant][20] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %503 = cast(meta[relay.Constant][21] /* ty=Tensor[(1620, 1), float64] */, dtype="float64") /* ty=Tensor[(1620, 1), float64] */;
  %504 = reshape(%501, newshape=[]) /* ty=float32 */;
  %505 = reshape(%502, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), float32] */;
  %506 = reshape(%503, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %507 = @func_851(%504, %505, %506) /* ty=(Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) */;
  %508 = @func_1026() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %509 = cast(%var_3473, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %510 = reshape(%509, newshape=[12, 12, 15]) /* ty=Tensor[(12, 12, 15), float32] */;
  %511 = @func_2289() /* ty=(Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) */;
  %512 = %500.0;
  %513 = @func_2217() /* ty=Tensor[(12, 7), float64] */;
  %514 = @func_2956() /* ty=Tensor[(12, 7), float64] */;
  %515 = %507.2;
  %516 = %508.0;
  %517 = @func_2021(%510) /* ty=Tensor[(12, 12, 15), int16] */;
  %518 = %511.1;
  (%512, %513, %514, %515, -6.28884f /* ty=float32 */, meta[relay.Constant][20] /* ty=Tensor[(30), float32] */, meta[relay.Constant][21] /* ty=Tensor[(1620, 1), float64] */, %516, %517, %var_3473, %518)
}

def @func_4189() -> (Tensor[(12, 7), float64], Tensor[(13, 8, 13), float32], Tensor[(1352), float32], Tensor[(1620, 1), float64], Tensor[(2160), float32]) {
  %519 = cast(meta[relay.Constant][22] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %520 = cast(meta[relay.Constant][22] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %521 = reshape(%519, newshape=[13, 8, 13]) /* ty=Tensor[(13, 8, 13), float32] */;
  %522 = reshape(%520, newshape=[13, 8, 13]) /* ty=Tensor[(13, 8, 13), float32] */;
  %523 = @func_3398(%521, %522) /* ty=(Tensor[(13, 8, 13), float32],) */;
  %524 = cast(meta[relay.Constant][23] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %525 = reshape(%524, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %526 = @func_3480(%525) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620, 1), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(2160), float32], Tensor[(15, 16, 16), float32]) */;
  %527 = @func_2493() /* ty=Tensor[(12, 7), float64] */;
  %528 = %523.0;
  %529 = %526.6;
  (%527, %528, meta[relay.Constant][22] /* ty=Tensor[(1352), float32] */, %529, meta[relay.Constant][23] /* ty=Tensor[(2160), float32] */)
}

def @func_4327() -> (Tensor[(12, 12, 15), float32],) {
  @func_4325() /* ty=(Tensor[(12, 12, 15), float32],) */
}

def @func_3259() -> (Tensor[(12, 12, 15), float32],) {
  %530 = @func_2726() /* ty=Tensor[(12, 12, 15), float32] */;
  (%530,)
}

def @func_1926() -> (Tensor[(12, 7), float64],) {
  %533 = fn () -> (Tensor[(12, 7), float64],) {
    %531 = @func_1578() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(88), float32], Tensor[(12, 7), float64]) */;
    %532 = %531.1;
    (%532,)
  };
  %533() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_5719() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) {
  %534 = @func_4624() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %535 = @func_5004() /* ty=(Tensor[(12, 7), float64],) */;
  %536 = %534.0;
  %537 = %535.0;
  (%536, %537)
}

def @func_300() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */
}

def @func_4488(%var_4487: Tensor[(13, 16, 15), uint32]) -> (Tensor[(13, 16, 15), bool], Tensor[(13, 16, 15), float32], Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float64], Tensor[(12, 12, 15), float32]) {
  %551 = fn (%var_4434: Tensor[(13, 16, 15), uint32]) -> (Tensor[(13, 16, 15), bool], Tensor[(13, 16, 15), float32], Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float64], Tensor[(12, 12, 15), float32]) {
    %538 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 16, 15), uint32] */, dtype="bool") /* ty=Tensor[(13, 16, 15), bool] */;
    %539 = shape_of(%var_4434, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%var_4434, dtype="bool") /* ty=Tensor[(13, 16, 15), bool] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %542 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 16, 15), uint32] */, dtype="float32") /* ty=Tensor[(13, 16, 15), float32] */;
    %543 = @func_3525() /* ty=(Tensor[(15, 16, 16), float64],) */;
    %544 = @func_3525() /* ty=(Tensor[(15, 16, 16), float64],) */;
    %545 = @func_796() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */;
    %546 = less(%540, %541) /* ty=Tensor[(13, 16, 15), bool] */;
    %547 = acosh(%542) /* ty=Tensor[(13, 16, 15), float32] */;
    %548 = %543.0;
    %549 = %544.0;
    %550 = %545.1;
    (%546, %547, %548, %549, %550)
  };
  %551(%var_4487) /* ty=(Tensor[(13, 16, 15), bool], Tensor[(13, 16, 15), float32], Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float64], Tensor[(12, 12, 15), float32]) */
}

def @func_1669(%var_1667: int8) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(15, 1, 12), bool], int8, Tensor[(180, 1), int8]) {
  @func_1666(%var_1667) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(15, 1, 12), bool], int8, Tensor[(180, 1), int8]) */
}

def @func_5331(%var_5327: Tensor[(3, 8, 10), float32], %var_5328: float32, %var_5329: Tensor[(30), float32], %var_5330: Tensor[(1620), float64]) -> (Tensor[(3, 8, 10), int8], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620), float64]) {
  %567 = fn (%var_5305: Tensor[(3, 8, 10), float32], %var_5315: float32, %var_5316: Tensor[(30), float32], %var_5317: Tensor[(1620), float64]) -> (Tensor[(3, 8, 10), int8], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620), float64]) {
    %552 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 8, 10), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 10), float32] */;
    %553 = sin(%552) /* ty=Tensor[(3, 8, 10), float32] */;
    %554 = cast(%var_5305, dtype="int8") /* ty=Tensor[(3, 8, 10), int8] */;
    %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
    %556 = cast(%553, dtype="int8") /* ty=Tensor[(3, 8, 10), int8] */;
    %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %558 = cast(%var_5315, dtype="float32") /* ty=float32 */;
    %559 = cast(%var_5316, dtype="float32") /* ty=Tensor[(30), float32] */;
    %560 = cast(%var_5317, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %561 = reshape(%558, newshape=[]) /* ty=float32 */;
    %562 = reshape(%559, newshape=[30]) /* ty=Tensor[(30), float32] */;
    %563 = reshape(%560, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
    %564 = @func_4060(%561, %562, %563) /* ty=(Tensor[(12, 7), float64], Tensor[(15, 12, 9), float32], float32, Tensor[(30), float32], Tensor[(1620), float64]) */;
    %565 = maximum(%556, %557) /* ty=Tensor[(3, 8, 10), int8] */;
    %566 = %564.4;
    (%565, %566, %var_5315, %var_5316, %var_5317)
  };
  %567(%var_5327, %var_5328, %var_5329, %var_5330) /* ty=(Tensor[(3, 8, 10), int8], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620), float64]) */
}

def @func_1027() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %572 = fn () -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
    %568 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %569 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %570 = %568.0;
    %571 = %569.0;
    (%570, %571)
  };
  %572() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */
}

def @func_4821() -> (Tensor[(12, 12, 15), float32], Tensor[(10, 3, 13), uint16], Tensor[(1, 390), float32], Tensor[(12, 12, 15), int16]) {
  %573 = @func_4325() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %574 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 390), float32] */, dtype="float32") /* ty=Tensor[(1, 390), float32] */;
  %575 = reshape(%574, newshape=[10, 3, 13]) /* ty=Tensor[(10, 3, 13), float32] */;
  %576 = @func_4508(%575) /* ty=(Tensor[(10, 3, 13), uint16], Tensor[(10, 3, 13), float64]) */;
  %577 = %573.0;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %579 = reshape(%578, newshape=[12, 12, 15]) /* ty=Tensor[(12, 12, 15), float32] */;
  %580 = %576.0;
  %581 = @func_2021(%579) /* ty=Tensor[(12, 12, 15), int16] */;
  (%577, %580, meta[relay.Constant][26] /* ty=Tensor[(1, 390), float32] */, %581)
}

def @func_5875(%var_5874: Tensor[(16, 2, 5), int8]) -> Tensor[(16, 2, 5), int8] {
  %584 = fn (%var_5868: Tensor[(16, 2, 5), int8]) -> Tensor[(16, 2, 5), int8] {
    %582 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 2, 5), int8] */, dtype="int8") /* ty=Tensor[(1, 2, 5), int8] */;
    %583 = cast(%var_5868, dtype="int8") /* ty=Tensor[(16, 2, 5), int8] */;
    multiply(%582, %583) /* ty=Tensor[(16, 2, 5), int8] */
  };
  %584(%var_5874) /* ty=Tensor[(16, 2, 5), int8] */
}

def @func_2804(%var_2798: Tensor[(4, 13, 5), float64]) -> Tensor[(4, 13, 5), float64] {
  %585 = cast(%var_2798, dtype="float64") /* ty=Tensor[(4, 13, 5), float64] */;
  sigmoid(%585) /* ty=Tensor[(4, 13, 5), float64] */
}

def @func_2717() -> Tensor[(12, 7), float64] {
  %587 = fn () -> Tensor[(12, 7), float64] {
    %586 = @func_2677() /* ty=(Tensor[(12, 7), float64],) */;
    %586.0
  };
  %587() /* ty=Tensor[(12, 7), float64] */
}

def @func_4950(%var_4908: Tensor[(15, 16, 16), float32], %var_4943: Tensor[(12, 12, 15), float32]) -> (Tensor[(15, 16, 16), bool], Tensor[(15, 12, 9), float32], Tensor[(6, 270), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32]) {
  %588 = @func_3237() /* ty=(Tensor[(12, 7), float64], Tensor[(1, 2028), float64], Tensor[(15, 16, 16), float32], Tensor[(15, 16, 16), float64], Tensor[(12, 7), float64], Tensor[(4, 13, 5), float32]) */;
  %589 = %588.2;
  %590 = cast(%var_4908, dtype="bool") /* ty=Tensor[(15, 16, 16), bool] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%589, dtype="bool") /* ty=Tensor[(15, 16, 16), bool] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %594 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 270), float64] */, dtype="float64") /* ty=Tensor[(6, 270), float64] */;
  %595 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 270), float64] */, dtype="float64") /* ty=Tensor[(6, 270), float64] */;
  %596 = reshape(%594, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %597 = reshape(%595, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %598 = @func_122(%596, %597) /* ty=(Tensor[(15, 12, 9), float32], Tensor[(15, 12, 9), float64], Tensor[(15, 12, 9), float64]) */;
  %599 = @func_1699() /* ty=Tensor[(12, 12, 15), float32] */;
  %600 = cast(%var_4943, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%599, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %604 = equal(%592, %593) /* ty=Tensor[(15, 16, 16), bool] */;
  %605 = %598.0;
  %606 = @func_4400() /* ty=Tensor[(12, 7), float64] */;
  %607 = power(%602, %603) /* ty=Tensor[(12, 12, 15), float32] */;
  (%604, %605, meta[relay.Constant][28] /* ty=Tensor[(6, 270), float64] */, %606, %607)
}

def @func_5758() -> (Tensor[(12, 7), float64],) {
  %608 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %609 = %608.1;
  (%609,)
}

def @func_1666(%var_1628: int8) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(15, 1, 12), bool], int8, Tensor[(180, 1), int8]) {
  %610 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %611 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %612 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %613 = cast(%var_1628, dtype="int8") /* ty=int8 */;
  %614 = cast(meta[relay.Constant][29] /* ty=Tensor[(180, 1), int8] */, dtype="int8") /* ty=Tensor[(180, 1), int8] */;
  %615 = reshape(%613, newshape=[]) /* ty=int8 */;
  %616 = reshape(%614, newshape=[15, 1, 12]) /* ty=Tensor[(15, 1, 12), int8] */;
  %617 = %610.0;
  %618 = %611.0;
  %619 = %612.0;
  %620 = @func_884(%615, %616) /* ty=Tensor[(15, 1, 12), bool] */;
  (%617, %618, %619, %620, %var_1628, meta[relay.Constant][29] /* ty=Tensor[(180, 1), int8] */)
}

def @func_2458() -> (Tensor[(12, 12, 15), float32],) {
  %623 = fn () -> (Tensor[(12, 12, 15), float32],) {
    %621 = @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */;
    %622 = %621.0;
    (%622,)
  };
  %623() /* ty=(Tensor[(12, 12, 15), float32],) */
}

def @func_5120() -> (Tensor[(12, 7), float64],) {
  %626 = fn () -> (Tensor[(12, 7), float64],) {
    %624 = @func_2633() /* ty=(Tensor[(12, 7), float64],) */;
    %625 = %624.0;
    (%625,)
  };
  %626() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_1765(%var_1763: Tensor[(13, 12, 13), float64], %var_1764: Tensor[(924), uint8]) -> (Tensor[(13, 12, 13), uint8], Tensor[(12, 7), float64], uint8, Tensor[(924), uint8], Tensor[(2160), bool]) {
  @func_1761(%var_1763, %var_1764) /* ty=(Tensor[(13, 12, 13), uint8], Tensor[(12, 7), float64], uint8, Tensor[(924), uint8], Tensor[(2160), bool]) */
}

def @func_1192() -> (Tensor[(12, 12, 15), float32],) {
  %627 = @func_796() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */;
  %628 = %627.1;
  (%628,)
}

def @func_2002() -> (Tensor[(12, 7), float64],) {
  @func_2000() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_2896() -> (Tensor[(12, 12, 15), bool], Tensor[(924), uint8], Tensor[(1, 2028), float64], Tensor[(7, 132), uint8], Tensor[(15, 16, 16), float32]) {
  %629 = @func_1699() /* ty=Tensor[(12, 12, 15), float32] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %631 = acos(%630) /* ty=Tensor[(12, 12, 15), float32] */;
  %632 = cast(%629, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %636 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 2028), float64] */, dtype="float64") /* ty=Tensor[(1, 2028), float64] */;
  %637 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 132), uint8] */, dtype="uint8") /* ty=Tensor[(7, 132), uint8] */;
  %638 = reshape(%636, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), float64] */;
  %639 = reshape(%637, newshape=[924]) /* ty=Tensor[(924), uint8] */;
  %640 = @func_1761(%638, %639) /* ty=(Tensor[(13, 12, 13), uint8], Tensor[(12, 7), float64], uint8, Tensor[(924), uint8], Tensor[(2160), bool]) */;
  %641 = greater_equal(%634, %635) /* ty=Tensor[(12, 12, 15), bool] */;
  %642 = %640.3;
  %643 = @func_2525() /* ty=Tensor[(15, 16, 16), float32] */;
  (%641, %642, meta[relay.Constant][30] /* ty=Tensor[(1, 2028), float64] */, meta[relay.Constant][31] /* ty=Tensor[(7, 132), uint8] */, %643)
}

def @func_5922() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(10, 3, 13), float64]) {
  %652 = fn () -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(10, 3, 13), float64]) {
    %644 = @func_3355() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) */;
    %645 = @func_5004() /* ty=(Tensor[(12, 7), float64],) */;
    %646 = @func_4821() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(10, 3, 13), uint16], Tensor[(1, 390), float32], Tensor[(12, 12, 15), int16]) */;
    %647 = %646.1;
    %648 = cast(%647, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
    %649 = %644.0;
    %650 = %645.0;
    %651 = log(%648) /* ty=Tensor[(10, 3, 13), float64] */;
    (%649, %650, %651)
  };
  %652() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(10, 3, 13), float64]) */
}

def @func_4573() -> Tensor[(12, 12, 15), float32] {
  @func_4571() /* ty=Tensor[(12, 12, 15), float32] */
}

def @func_4614() -> (Tensor[(12, 7), float64],) {
  %655 = fn () -> (Tensor[(12, 7), float64],) {
    %653 = @func_3796() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %654 = %653.1;
    (%654,)
  };
  %655() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_3483(%var_3481: Tensor[(2160), float32]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620, 1), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(2160), float32], Tensor[(15, 16, 16), float32]) {
  @func_3480(%var_3481) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], float32, Tensor[(30), float32], Tensor[(1620, 1), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(2160), float32], Tensor[(15, 16, 16), float32]) */
}

def @func_3527() -> (Tensor[(15, 16, 16), float64],) {
  @func_3525() /* ty=(Tensor[(15, 16, 16), float64],) */
}

def @func_5591() -> (Tensor[(12, 7), float64],) {
  %658 = fn () -> (Tensor[(12, 7), float64],) {
    %656 = @func_406() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %657 = %656.0;
    (%657,)
  };
  %658() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_711() -> (Tensor[(12, 7), float64],) {
  %659 = @func_660() /* ty=(Tensor[(12, 7), float64],) */;
  %660 = %659.0;
  (%660,)
}

def @func_3609(%var_3608: Tensor[(16, 14), uint32]) -> (Tensor[(16, 14), uint32],) {
  %666 = fn (%var_3559: Tensor[(16, 14), uint32]) -> (Tensor[(16, 14), uint32],) {
    %661 = cast(%var_3559, dtype="uint32") /* ty=Tensor[(16, 14), uint32] */;
    %662 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(16, 14), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %663 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 14), uint32] */, dtype="uint32") /* ty=Tensor[(16, 14), uint32] */;
    %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %665 = multiply(%663, %664) /* ty=Tensor[(16, 14), uint32] */;
    (%665,)
  };
  %666(%var_3608) /* ty=(Tensor[(16, 14), uint32],) */
}

def @func_4508(%var_4493: Tensor[(10, 3, 13), float32]) -> (Tensor[(10, 3, 13), uint16], Tensor[(10, 3, 13), float64]) {
  %667 = cast(%var_4493, dtype="float32") /* ty=Tensor[(10, 3, 13), float32] */;
  %668 = sin(%667) /* ty=Tensor[(10, 3, 13), float32] */;
  %669 = cast(%var_4493, dtype="uint16") /* ty=Tensor[(10, 3, 13), uint16] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%668, dtype="uint16") /* ty=Tensor[(10, 3, 13), uint16] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %673 = cast(%668, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
  %674 = right_shift(%671, %672) /* ty=Tensor[(10, 3, 13), uint16] */;
  %675 = cos(%673) /* ty=Tensor[(10, 3, 13), float64] */;
  (%674, %675)
}

def @func_5471(%var_5470: Tensor[(12, 12, 15), float32]) -> (Tensor[(12, 12, 15), uint32], Tensor[(12, 7), float64]) {
  %685 = fn (%var_5442: Tensor[(12, 12, 15), float32]) -> (Tensor[(12, 12, 15), uint32], Tensor[(12, 7), float64]) {
    %676 = @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */;
    %677 = %676.0;
    %678 = cast(%var_5442, dtype="uint32") /* ty=Tensor[(12, 12, 15), uint32] */;
    %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
    %680 = cast(%677, dtype="uint32") /* ty=Tensor[(12, 12, 15), uint32] */;
    %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %682 = @func_4189() /* ty=(Tensor[(12, 7), float64], Tensor[(13, 8, 13), float32], Tensor[(1352), float32], Tensor[(1620, 1), float64], Tensor[(2160), float32]) */;
    %683 = bitwise_xor(%680, %681) /* ty=Tensor[(12, 12, 15), uint32] */;
    %684 = %682.0;
    (%683, %684)
  };
  %685(%var_5470) /* ty=(Tensor[(12, 12, 15), uint32], Tensor[(12, 7), float64]) */
}

def @func_3923() -> Tensor[(1, 14, 8), float32] {
  %687 = fn () -> Tensor[(1, 14, 8), float32] {
    %686 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(1, 14, 8), float32] */;
    atanh(%686) /* ty=Tensor[(1, 14, 8), float32] */
  };
  %687() /* ty=Tensor[(1, 14, 8), float32] */
}

def @func_1178() -> Tensor[(12, 7), float64] {
  %689 = fn () -> Tensor[(12, 7), float64] {
    %688 = @func_779() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %688.1
  };
  %689() /* ty=Tensor[(12, 7), float64] */
}

def @func_2317(%var_2316: Tensor[(15, 15, 7), int16]) -> (Tensor[(12, 12, 15), int16], Tensor[(1, 2160), float32], Tensor[(15, 15, 7), float64]) {
  %703 = fn (%var_2292: Tensor[(15, 15, 7), int16]) -> (Tensor[(12, 12, 15), int16], Tensor[(1, 2160), float32], Tensor[(15, 15, 7), float64]) {
    %690 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 2160), float32] */, dtype="float32") /* ty=Tensor[(1, 2160), float32] */;
    %691 = reshape(%690, newshape=[12, 12, 15]) /* ty=Tensor[(12, 12, 15), float32] */;
    %692 = cast(%var_2292, dtype="int16") /* ty=Tensor[(15, 15, 7), int16] */;
    %693 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(15, 15, 7), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %694 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 15, 7), int16] */, dtype="int16") /* ty=Tensor[(15, 15, 7), int16] */;
    %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %696 = left_shift(%694, %695) /* ty=Tensor[(15, 15, 7), int16] */;
    %697 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 15, 7), int16] */, dtype="float64") /* ty=Tensor[(15, 15, 7), float64] */;
    %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
    %699 = cast(%696, dtype="float64") /* ty=Tensor[(15, 15, 7), float64] */;
    %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %701 = @func_2021(%691) /* ty=Tensor[(12, 12, 15), int16] */;
    %702 = subtract(%699, %700) /* ty=Tensor[(15, 15, 7), float64] */;
    (%701, meta[relay.Constant][34] /* ty=Tensor[(1, 2160), float32] */, %702)
  };
  %703(%var_2316) /* ty=(Tensor[(12, 12, 15), int16], Tensor[(1, 2160), float32], Tensor[(15, 15, 7), float64]) */
}

def @func_4150() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(5, 315), int16], Tensor[(7, 2), bool], Tensor[(14), int16], Tensor[(12, 12, 15), float64]) {
  %719 = fn () -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(5, 315), int16], Tensor[(7, 2), bool], Tensor[(14), int16], Tensor[(12, 12, 15), float64]) {
    %704 = @func_2591() /* ty=(Tensor[(12, 7), float64],) */;
    %705 = @func_3736() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %706 = cast(meta[relay.Constant][37] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
    %707 = cast(meta[relay.Constant][37] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
    %708 = reshape(%706, newshape=[7, 2]) /* ty=Tensor[(7, 2), int16] */;
    %709 = reshape(%707, newshape=[7, 2]) /* ty=Tensor[(7, 2), int16] */;
    %710 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 315), int16] */, dtype="int16") /* ty=Tensor[(5, 315), int16] */;
    %711 = reshape(%710, newshape=[15, 15, 7]) /* ty=Tensor[(15, 15, 7), int16] */;
    %712 = @func_2315(%711) /* ty=(Tensor[(12, 12, 15), int16], Tensor[(1, 2160), float32], Tensor[(15, 15, 7), float64]) */;
    %713 = %712.0;
    %714 = cast(%713, dtype="float64") /* ty=Tensor[(12, 12, 15), float64] */;
    %715 = %704.0;
    %716 = %705.1;
    %717 = @func_3981(%708, %709) /* ty=Tensor[(7, 2), bool] */;
    %718 = atan(%714) /* ty=Tensor[(12, 12, 15), float64] */;
    (%715, %716, meta[relay.Constant][36] /* ty=Tensor[(5, 315), int16] */, %717, meta[relay.Constant][37] /* ty=Tensor[(14), int16] */, %718)
  };
  %719() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(5, 315), int16], Tensor[(7, 2), bool], Tensor[(14), int16], Tensor[(12, 12, 15), float64]) */
}

def @func_4624() -> (Tensor[(12, 12, 15), float32],) {
  %720 = @func_1699() /* ty=Tensor[(12, 12, 15), float32] */;
  (%720,)
}

def @func_2898() -> (Tensor[(12, 12, 15), bool], Tensor[(924), uint8], Tensor[(1, 2028), float64], Tensor[(7, 132), uint8], Tensor[(15, 16, 16), float32]) {
  @func_2896() /* ty=(Tensor[(12, 12, 15), bool], Tensor[(924), uint8], Tensor[(1, 2028), float64], Tensor[(7, 132), uint8], Tensor[(15, 16, 16), float32]) */
}

def @func_2678() -> (Tensor[(12, 7), float64],) {
  %723 = fn () -> (Tensor[(12, 7), float64],) {
    %721 = @func_660() /* ty=(Tensor[(12, 7), float64],) */;
    %722 = %721.0;
    (%722,)
  };
  %723() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_298() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %724 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 7), float64] */, dtype="float64") /* ty=Tensor[(12, 7), float64] */;
  %725 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 7), float64] */, dtype="float64") /* ty=Tensor[(12, 7), float64] */;
  %726 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(12, 7), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %727 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 7), float64] */, dtype="float64") /* ty=Tensor[(12, 7), float64] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %729 = sinh(%724) /* ty=Tensor[(12, 7), float64] */;
  %730 = maximum(%727, %728) /* ty=Tensor[(12, 7), float64] */;
  (%729, %730)
}

def @func_2290() -> (Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) {
  %736 = fn () -> (Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) {
    %731 = cast(8.94436f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %732 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 16, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
    %733 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 16, 16), float64] */, dtype="float32") /* ty=Tensor[(15, 16, 16), float32] */;
    %734 = floor_mod(%731, %732) /* ty=Tensor[(15, 16, 16), float64] */;
    %735 = cos(%733) /* ty=Tensor[(15, 16, 16), float32] */;
    (%734, %735)
  };
  %736() /* ty=(Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) */
}

def @func_5601() -> Tensor[(12, 7), float64] {
  %738 = fn () -> Tensor[(12, 7), float64] {
    %737 = @func_5590() /* ty=(Tensor[(12, 7), float64],) */;
    %737.0
  };
  %738() /* ty=Tensor[(12, 7), float64] */
}

def @func_5354(%var_5353: Tensor[(7, 8, 8), uint32]) -> (Tensor[(7, 8, 8), bool],) {
  %744 = fn (%var_5345: Tensor[(7, 8, 8), uint32]) -> (Tensor[(7, 8, 8), bool],) {
    %739 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 8, 8), uint32] */, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
    %740 = shape_of(%var_5345, dtype="int32") /* ty=Tensor[(3), int32] */;
    %741 = cast(%var_5345, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
    %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %743 = less(%741, %742) /* ty=Tensor[(7, 8, 8), bool] */;
    (%743,)
  };
  %744(%var_5353) /* ty=(Tensor[(7, 8, 8), bool],) */
}

def @func_3981(%var_3968: Tensor[(7, 2), int16], %var_3969: Tensor[(7, 2), int16]) -> Tensor[(7, 2), bool] {
  %745 = cast(%var_3969, dtype="bool") /* ty=Tensor[(7, 2), bool] */;
  %746 = shape_of(%var_3968, dtype="int32") /* ty=Tensor[(2), int32] */;
  %747 = cast(%var_3968, dtype="bool") /* ty=Tensor[(7, 2), bool] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  greater(%747, %748) /* ty=Tensor[(7, 2), bool] */
}

def @func_5521() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32]) {
  @func_5519() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32]) */
}

def @func_796() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) {
  %749 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(1, 12, 15), float32] */;
  %750 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %751 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %752 = floor_divide(%749, %750) /* ty=Tensor[(12, 12, 15), float32] */;
  %753 = cos(%751) /* ty=Tensor[(12, 12, 15), float32] */;
  (%752, %753)
}

def @func_3107(%var_3106: Tensor[(154, 6), uint8]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1, 88), float32], Tensor[(180, 1), int8], int8, Tensor[(7, 11, 12), float32], Tensor[(154, 6), uint8], Tensor[(4, 13, 5), float64], Tensor[(260, 1), float64], Tensor[(15, 1, 12), bool], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32]) {
  %793 = fn (%var_3078: Tensor[(154, 6), uint8]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1, 88), float32], Tensor[(180, 1), int8], int8, Tensor[(7, 11, 12), float32], Tensor[(154, 6), uint8], Tensor[(4, 13, 5), float64], Tensor[(260, 1), float64], Tensor[(15, 1, 12), bool], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32]) {
    %754 = @func_2841() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32]) */;
    %755 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 88), float32] */, dtype="float32") /* ty=Tensor[(1, 88), float32] */;
    %756 = reshape(%755, newshape=[88]) /* ty=Tensor[(88), float32] */;
    %757 = @func_823(%756) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(88), float32]) */;
    %758 = cast(meta[relay.Constant][45] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %759 = reshape(%758, newshape=[]) /* ty=int8 */;
    %760 = @func_1666(%759) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(15, 1, 12), bool], int8, Tensor[(180, 1), int8]) */;
    %761 = cast(meta[relay.Constant][45] /* ty=int8 */, dtype="uint8") /* ty=uint8 */;
    %762 = cast(%var_3078, dtype="uint8") /* ty=Tensor[(154, 6), uint8] */;
    %763 = cast(%var_3078, dtype="uint8") /* ty=Tensor[(154, 6), uint8] */;
    %764 = %760.5;
    %765 = cast(%764, dtype="int8") /* ty=Tensor[(180, 1), int8] */;
    %766 = reshape(%761, newshape=[]) /* ty=uint8 */;
    %767 = reshape(%762, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint8] */;
    %768 = reshape(%763, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint8] */;
    %769 = reshape(%765, newshape=[180]) /* ty=Tensor[(180), int8] */;
    %770 = @func_1122(%766, %767, %768, %769) /* ty=(Tensor[(7, 11, 12), bool], Tensor[(12, 7), float64], Tensor[(7, 11, 12), uint32], Tensor[(15, 1, 12), bool], Tensor[(180), int8], Tensor[(7, 11, 12), float32]) */;
    %771 = cast(meta[relay.Constant][46] /* ty=Tensor[(260, 1), float64] */, dtype="float64") /* ty=Tensor[(260, 1), float64] */;
    %772 = reshape(%771, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float64] */;
    %773 = cast(meta[relay.Constant][45] /* ty=int8 */, dtype="uint8") /* ty=uint8 */;
    %774 = %770.5;
    %775 = cast(%774, dtype="uint8") /* ty=Tensor[(7, 11, 12), uint8] */;
    %776 = cast(%774, dtype="uint8") /* ty=Tensor[(7, 11, 12), uint8] */;
    %777 = cast(%764, dtype="int8") /* ty=Tensor[(180, 1), int8] */;
    %778 = reshape(%773, newshape=[]) /* ty=uint8 */;
    %779 = reshape(%775, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint8] */;
    %780 = reshape(%776, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint8] */;
    %781 = reshape(%777, newshape=[180]) /* ty=Tensor[(180), int8] */;
    %782 = @func_1122(%778, %779, %780, %781) /* ty=(Tensor[(7, 11, 12), bool], Tensor[(12, 7), float64], Tensor[(7, 11, 12), uint32], Tensor[(15, 1, 12), bool], Tensor[(180), int8], Tensor[(7, 11, 12), float32]) */;
    %783 = @func_406() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %784 = @func_751() /* ty=(Tensor[(12, 7), float64],) */;
    %785 = @func_2505() /* ty=(Tensor[(12, 12, 15), float32],) */;
    %786 = %754.1;
    %787 = %757.1;
    %788 = @func_2804(%772) /* ty=Tensor[(4, 13, 5), float64] */;
    %789 = %782.3;
    %790 = %783.1;
    %791 = %784.0;
    %792 = %785.0;
    (%786, %787, meta[relay.Constant][44] /* ty=Tensor[(1, 88), float32] */, %764, meta[relay.Constant][45] /* ty=int8 */, %774, %var_3078, %788, meta[relay.Constant][46] /* ty=Tensor[(260, 1), float64] */, %789, %790, %791, %792)
  };
  %793(%var_3106) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1, 88), float32], Tensor[(180, 1), int8], int8, Tensor[(7, 11, 12), float32], Tensor[(154, 6), uint8], Tensor[(4, 13, 5), float64], Tensor[(260, 1), float64], Tensor[(15, 1, 12), bool], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 12, 15), float32]) */
}

def @func_3238() -> (Tensor[(12, 7), float64], Tensor[(1, 2028), float64], Tensor[(15, 16, 16), float32], Tensor[(15, 16, 16), float64], Tensor[(12, 7), float64], Tensor[(4, 13, 5), float32]) {
  %812 = fn () -> (Tensor[(12, 7), float64], Tensor[(1, 2028), float64], Tensor[(15, 16, 16), float32], Tensor[(15, 16, 16), float64], Tensor[(12, 7), float64], Tensor[(4, 13, 5), float32]) {
    %794 = @func_2896() /* ty=(Tensor[(12, 12, 15), bool], Tensor[(924), uint8], Tensor[(1, 2028), float64], Tensor[(7, 132), uint8], Tensor[(15, 16, 16), float32]) */;
    %795 = @func_2289() /* ty=(Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) */;
    %796 = @func_660() /* ty=(Tensor[(12, 7), float64],) */;
    %797 = cast(meta[relay.Constant][47] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
    %798 = reshape(%797, newshape=[4, 13, 5]) /* ty=Tensor[(4, 13, 5), float64] */;
    %799 = @func_2804(%798) /* ty=Tensor[(4, 13, 5), float64] */;
    %800 = cast(meta[relay.Constant][47] /* ty=Tensor[(260), float64] */, dtype="bool") /* ty=Tensor[(260), bool] */;
    %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
    %802 = cast(%799, dtype="bool") /* ty=Tensor[(4, 13, 5), bool] */;
    %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %804 = equal(%802, %803) /* ty=Tensor[(4, 13, 5), bool] */;
    %805 = cast(%804, dtype="float32") /* ty=Tensor[(4, 13, 5), float32] */;
    %806 = @func_1177() /* ty=Tensor[(12, 7), float64] */;
    %807 = %794.2;
    %808 = @func_2525() /* ty=Tensor[(15, 16, 16), float32] */;
    %809 = %795.0;
    %810 = %796.0;
    %811 = cos(%805) /* ty=Tensor[(4, 13, 5), float32] */;
    (%806, %807, %808, %809, %810, %811)
  };
  %812() /* ty=(Tensor[(12, 7), float64], Tensor[(1, 2028), float64], Tensor[(15, 16, 16), float32], Tensor[(15, 16, 16), float64], Tensor[(12, 7), float64], Tensor[(4, 13, 5), float32]) */
}

def @func_1423(%var_1420: uint8, %var_1421: Tensor[(462, 2), uint8], %var_1422: Tensor[(12, 12, 15), bool]) -> (Tensor[(180), int8], uint8, Tensor[(462, 2), uint8], Tensor[(180), int8], Tensor[(12, 7), float64], Tensor[(12, 12, 15), uint32], Tensor[(12, 7), float64]) {
  @func_1418(%var_1420, %var_1421, %var_1422) /* ty=(Tensor[(180), int8], uint8, Tensor[(462, 2), uint8], Tensor[(180), int8], Tensor[(12, 7), float64], Tensor[(12, 12, 15), uint32], Tensor[(12, 7), float64]) */
}

def @func_2023(%var_2022: Tensor[(12, 12, 15), float32]) -> Tensor[(12, 12, 15), int16] {
  %818 = fn (%var_2016: Tensor[(12, 12, 15), float32]) -> Tensor[(12, 12, 15), int16] {
    %813 = @func_1979() /* ty=Tensor[(12, 12, 15), float32] */;
    %814 = cast(%var_2016, dtype="int16") /* ty=Tensor[(12, 12, 15), int16] */;
    %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
    %816 = cast(%813, dtype="int16") /* ty=Tensor[(12, 12, 15), int16] */;
    %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    logical_xor(%816, %817) /* ty=Tensor[(12, 12, 15), int16] */
  };
  %818(%var_2022) /* ty=Tensor[(12, 12, 15), int16] */
}

def @func_3028(%var_3026: Tensor[(10, 3), float32], %var_3027: Tensor[(1620), float64]) -> (Tensor[(12, 7), float64], float32, Tensor[(10, 3), float32], Tensor[(1620), float64], Tensor[(1620), float64], Tensor[(12, 12, 15), float32], Tensor[(180), int8], Tensor[(924), uint8], Tensor[(12, 7), float64]) {
  %846 = fn (%var_2971: Tensor[(10, 3), float32], %var_2984: Tensor[(1620), float64]) -> (Tensor[(12, 7), float64], float32, Tensor[(10, 3), float32], Tensor[(1620), float64], Tensor[(1620), float64], Tensor[(12, 12, 15), float32], Tensor[(180), int8], Tensor[(924), uint8], Tensor[(12, 7), float64]) {
    %819 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
    %820 = cast(-2.35218f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %821 = cast(%var_2971, dtype="float32") /* ty=Tensor[(10, 3), float32] */;
    %822 = cast(meta[relay.Constant][48] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %823 = reshape(%820, newshape=[]) /* ty=float32 */;
    %824 = reshape(%821, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), float32] */;
    %825 = reshape(%822, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
    %826 = @func_851(%823, %824, %825) /* ty=(Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) */;
    %827 = %826.2;
    %828 = cast(%var_2984, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %829 = shape_of(%827, dtype="int32") /* ty=Tensor[(1), int32] */;
    %830 = cast(%827, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?), float64] */;
    %832 = @func_2919() /* ty=(Tensor[(12, 12, 15), float32],) */;
    %833 = cast(-2.35218f /* ty=float32 */, dtype="uint8") /* ty=uint8 */;
    %834 = cast(meta[relay.Constant][49] /* ty=Tensor[(924), uint8] */, dtype="uint8") /* ty=Tensor[(924), uint8] */;
    %835 = %832.0;
    %836 = cast(%835, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
    %837 = reshape(%833, newshape=[]) /* ty=uint8 */;
    %838 = reshape(%834, newshape=[462, 2]) /* ty=Tensor[(462, 2), uint8] */;
    %839 = reshape(%836, newshape=[12, 12, 15]) /* ty=Tensor[(12, 12, 15), bool] */;
    %840 = @func_1418(%837, %838, %839) /* ty=(Tensor[(180), int8], uint8, Tensor[(462, 2), uint8], Tensor[(180), int8], Tensor[(12, 7), float64], Tensor[(12, 12, 15), uint32], Tensor[(12, 7), float64]) */;
    %841 = @func_2409() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(5, 13, 15), int32], Tensor[(975), float32]) */;
    %842 = %819.0;
    %843 = mod(%830, %831) /* ty=Tensor[(1620), float64] */;
    %844 = %840.0;
    %845 = %841.1;
    (%842, -2.35218f /* ty=float32 */, %var_2971, meta[relay.Constant][48] /* ty=Tensor[(1620), float64] */, %843, %835, %844, meta[relay.Constant][49] /* ty=Tensor[(924), uint8] */, %845)
  };
  %846(%var_3026, %var_3027) /* ty=(Tensor[(12, 7), float64], float32, Tensor[(10, 3), float32], Tensor[(1620), float64], Tensor[(1620), float64], Tensor[(12, 12, 15), float32], Tensor[(180), int8], Tensor[(924), uint8], Tensor[(12, 7), float64]) */
}

def @func_3873() -> (Tensor[(15, 16, 16), float64], Tensor[(12, 12, 15), float32]) {
  %858 = fn () -> (Tensor[(15, 16, 16), float64], Tensor[(12, 12, 15), float32]) {
    %847 = @func_2896() /* ty=(Tensor[(12, 12, 15), bool], Tensor[(924), uint8], Tensor[(1, 2028), float64], Tensor[(7, 132), uint8], Tensor[(15, 16, 16), float32]) */;
    %848 = %847.4;
    %849 = cast(%848, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
    %850 = asinh(%849) /* ty=Tensor[(15, 16, 16), float64] */;
    %851 = cast(%848, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
    %852 = shape_of(%850, dtype="int32") /* ty=Tensor[(3), int32] */;
    %853 = cast(%850, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
    %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %855 = @func_2457() /* ty=(Tensor[(12, 12, 15), float32],) */;
    %856 = floor_divide(%853, %854) /* ty=Tensor[(15, 16, 16), float64] */;
    %857 = %855.0;
    (%856, %857)
  };
  %858() /* ty=(Tensor[(15, 16, 16), float64], Tensor[(12, 12, 15), float32]) */
}

def @func_2477() -> (Tensor[(12, 7), float64],) {
  %859 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %860 = %859.0;
  (%860,)
}

def @func_2920() -> (Tensor[(12, 12, 15), float32],) {
  %863 = fn () -> (Tensor[(12, 12, 15), float32],) {
    %861 = @func_2505() /* ty=(Tensor[(12, 12, 15), float32],) */;
    %862 = %861.0;
    (%862,)
  };
  %863() /* ty=(Tensor[(12, 12, 15), float32],) */
}

def @func_661() -> (Tensor[(12, 7), float64],) {
  %866 = fn () -> (Tensor[(12, 7), float64],) {
    %864 = @func_298() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
    %865 = %864.1;
    (%865,)
  };
  %866() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_855(%var_852: float32, %var_853: Tensor[(2, 1, 15), float32], %var_854: Tensor[(1620), float64]) -> (Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) {
  %876 = fn (%var_838: float32, %var_839: Tensor[(2, 1, 15), float32], %var_844: Tensor[(1620), float64]) -> (Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) {
    %867 = cast(%var_838, dtype="float32") /* ty=float32 */;
    %868 = cast(%var_839, dtype="float32") /* ty=Tensor[(2, 1, 15), float32] */;
    %869 = cast(%var_844, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %870 = cast(%var_844, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %871 = reshape(%869, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
    %872 = reshape(%870, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
    %873 = @func_122(%871, %872) /* ty=(Tensor[(15, 12, 9), float32], Tensor[(15, 12, 9), float64], Tensor[(15, 12, 9), float64]) */;
    %874 = maximum(%867, %868) /* ty=Tensor[(2, 1, 15), float32] */;
    %875 = %873.0;
    (%874, %875, %var_844)
  };
  %876(%var_852, %var_853, %var_854) /* ty=(Tensor[(2, 1, 15), float32], Tensor[(15, 12, 9), float32], Tensor[(1620), float64]) */
}

def @func_1418(%var_1388: uint8, %var_1389: Tensor[(462, 2), uint8], %var_1405: Tensor[(12, 12, 15), bool]) -> (Tensor[(180), int8], uint8, Tensor[(462, 2), uint8], Tensor[(180), int8], Tensor[(12, 7), float64], Tensor[(12, 12, 15), uint32], Tensor[(12, 7), float64]) {
  %877 = cast(%var_1388, dtype="uint8") /* ty=uint8 */;
  %878 = cast(%var_1389, dtype="uint8") /* ty=Tensor[(462, 2), uint8] */;
  %879 = cast(%var_1389, dtype="uint8") /* ty=Tensor[(462, 2), uint8] */;
  %880 = cast(meta[relay.Constant][50] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %881 = reshape(%877, newshape=[]) /* ty=uint8 */;
  %882 = reshape(%878, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint8] */;
  %883 = reshape(%879, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint8] */;
  %884 = reshape(%880, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %885 = @func_1122(%881, %882, %883, %884) /* ty=(Tensor[(7, 11, 12), bool], Tensor[(12, 7), float64], Tensor[(7, 11, 12), uint32], Tensor[(15, 1, 12), bool], Tensor[(180), int8], Tensor[(7, 11, 12), float32]) */;
  %886 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
  %887 = @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */;
  %888 = %887.0;
  %889 = cast(%888, dtype="float32") /* ty=Tensor[(12, 12, 15), float32] */;
  %890 = acosh(%889) /* ty=Tensor[(12, 12, 15), float32] */;
  %891 = cast(%888, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %892 = shape_of(%890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %893 = cast(%890, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %895 = less(%893, %894) /* ty=Tensor[(12, 12, 15), bool] */;
  %896 = cast(%888, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %897 = shape_of(%895, dtype="int32") /* ty=Tensor[(3), int32] */;
  %898 = cast(%895, dtype="bool") /* ty=Tensor[(12, 12, 15), bool] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %900 = logical_and(%898, %899) /* ty=Tensor[(12, 12, 15), bool] */;
  %901 = cast(%var_1405, dtype="uint32") /* ty=Tensor[(12, 12, 15), uint32] */;
  %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %903 = cast(%900, dtype="uint32") /* ty=Tensor[(12, 12, 15), uint32] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %905 = @func_1026() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %906 = %885.4;
  %907 = %886.0;
  %908 = bitwise_or(%903, %904) /* ty=Tensor[(12, 12, 15), uint32] */;
  %909 = %905.0;
  (%906, %var_1388, %var_1389, meta[relay.Constant][50] /* ty=Tensor[(180), int8] */, %907, %908, %909)
}

def @func_6022(%var_6019: Tensor[(14, 10, 8), uint64], %var_6020: Tensor[(14, 10, 8), uint64], %var_6021: Tensor[(14, 10, 8), bool]) -> (Tensor[(14, 10, 8), int32], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32], Tensor[(975), float32], Tensor[(14, 10, 8), float32], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(12, 12, 15), float32], Tensor[(14, 10, 8), int16], Tensor[(12, 7), float64]) {
  @func_6017(%var_6019, %var_6020, %var_6021) /* ty=(Tensor[(14, 10, 8), int32], Tensor[(12, 12, 15), float32], Tensor[(12, 12, 15), float32], Tensor[(975), float32], Tensor[(14, 10, 8), float32], Tensor[(12, 7), float64], Tensor[(12, 12, 15), int16], Tensor[(12, 12, 15), float32], Tensor[(14, 10, 8), int16], Tensor[(12, 7), float64]) */
}

def @func_3525() -> (Tensor[(15, 16, 16), float64],) {
  %910 = @func_2289() /* ty=(Tensor[(15, 16, 16), float64], Tensor[(15, 16, 16), float32]) */;
  %911 = %910.0;
  (%911,)
}

def @func_680(%var_666: Tensor[(8, 11, 1), float32]) -> (Tensor[(8, 11, 1), float32], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32]) {
  %912 = cast(%var_666, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %913 = @func_526() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %914 = cast(meta[relay.Constant][51] /* ty=Tensor[(325, 3), float32] */, dtype="float32") /* ty=Tensor[(325, 3), float32] */;
  %915 = cast(meta[relay.Constant][51] /* ty=Tensor[(325, 3), float32] */, dtype="float32") /* ty=Tensor[(325, 3), float32] */;
  %916 = cast(meta[relay.Constant][51] /* ty=Tensor[(325, 3), float32] */, dtype="float64") /* ty=Tensor[(325, 3), float64] */;
  %917 = reshape(%914, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %918 = reshape(%915, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float32] */;
  %919 = reshape(%916, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), float64] */;
  %920 = @func_487(%917, %918, %919) /* ty=(Tensor[(5, 13, 15), int32], Tensor[(12, 7), float64], Tensor[(15, 12, 9), bool], Tensor[(5, 13, 15), bool], Tensor[(5, 13, 15), float64]) */;
  %921 = log10(%912) /* ty=Tensor[(8, 11, 1), float32] */;
  %922 = %913.1;
  %923 = %920.1;
  (%921, %922, %923, meta[relay.Constant][51] /* ty=Tensor[(325, 3), float32] */)
}

def @func_5760() -> (Tensor[(12, 7), float64],) {
  @func_5758() /* ty=(Tensor[(12, 7), float64],) */
}

def @func_3548(%var_3547: Tensor[(30), float32]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], Tensor[(30), float32], Tensor[(1620), float64]) {
  %933 = fn (%var_3538: Tensor[(30), float32]) -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], Tensor[(30), float32], Tensor[(1620), float64]) {
    %924 = @func_2067() /* ty=(Tensor[(12, 7), float64],) */;
    %925 = cast(%var_3538, dtype="float32") /* ty=Tensor[(30), float32] */;
    %926 = cast(meta[relay.Constant][52] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %927 = reshape(%925, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
    %928 = reshape(%926, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
    %929 = @func_3025(%927, %928) /* ty=(Tensor[(12, 7), float64], float32, Tensor[(10, 3), float32], Tensor[(1620), float64], Tensor[(1620), float64], Tensor[(12, 12, 15), float32], Tensor[(180), int8], Tensor[(924), uint8], Tensor[(12, 7), float64]) */;
    %930 = @func_1177() /* ty=Tensor[(12, 7), float64] */;
    %931 = %924.0;
    %932 = %929.3;
    (%930, %931, %932, %var_3538, meta[relay.Constant][52] /* ty=Tensor[(1620), float64] */)
  };
  %933(%var_3547) /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(1620), float64], Tensor[(30), float32], Tensor[(1620), float64]) */
}

def @func_2067() -> (Tensor[(12, 7), float64],) {
  %934 = @func_406() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */;
  %935 = %934.0;
  (%935,)
}

def @func_4191() -> (Tensor[(12, 7), float64], Tensor[(13, 8, 13), float32], Tensor[(1352), float32], Tensor[(1620, 1), float64], Tensor[(2160), float32]) {
  @func_4189() /* ty=(Tensor[(12, 7), float64], Tensor[(13, 8, 13), float32], Tensor[(1352), float32], Tensor[(1620, 1), float64], Tensor[(2160), float32]) */
}

def @func_5519() -> (Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64], Tensor[(88), float32]) {
  %936 = @func_3355() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) */;
  %937 = @func_3355() /* ty=(Tensor[(12, 12, 15), float32], Tensor[(12, 7), float64]) */;
  %938 = @func_1578() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(12, 7), float64], Tensor[(325, 3), float32], Tensor[(12, 7), float64], Tensor[(88), float32], Tensor[(88), float32], Tensor[(12, 7), float64]) */;
  %939 = %936.0;
  %940 = %937.1;
  %941 = %938.5;
  (%939, %940, %941)
}

def @func_6045() -> Tensor[(12, 7), float64] {
  @func_6043() /* ty=Tensor[(12, 7), float64] */
}

def @func_2956() -> Tensor[(12, 7), float64] {
  @func_1894() /* ty=Tensor[(12, 7), float64] */
}

def @func_2585() -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
  %946 = fn () -> (Tensor[(12, 7), float64], Tensor[(12, 7), float64]) {
    %942 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
    %943 = @func_711() /* ty=(Tensor[(12, 7), float64],) */;
    %944 = %942.0;
    %945 = %943.0;
    (%944, %945)
  };
  %946() /* ty=(Tensor[(12, 7), float64], Tensor[(12, 7), float64]) */
}

def @func_5787() -> Tensor[(12, 12, 15), float32] {
  %948 = fn () -> Tensor[(12, 12, 15), float32] {
    %947 = @func_1352() /* ty=(Tensor[(12, 12, 15), float32],) */;
    %947.0
  };
  %948() /* ty=Tensor[(12, 12, 15), float32] */
}

def @func_4707() -> Tensor[(12, 7), float64] {
  %949 = fn () -> Tensor[(12, 7), float64] {
    @func_1177() /* ty=Tensor[(12, 7), float64] */
  };
  %949() /* ty=Tensor[(12, 7), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen4/build/output.py:2345: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen4/build/output.py", line 2350, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(10) tvmgen_default_fused_right_shift_kernel0(signed char* __restrict__ T_right_shift, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_right_shift[(((int)threadIdx.x))] = (placeholder[(0)] >> placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

