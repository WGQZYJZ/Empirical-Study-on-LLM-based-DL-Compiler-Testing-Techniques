==========mod==========
#[version = "0.0.5"]
def @func_6344() -> Tensor[(14, 9, 14), float64] {
  %0 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
  %1 = cast(%0, dtype="float64") /* ty=Tensor[(14, 9, 14), float64] */;
  sqrt(%1) /* ty=Tensor[(14, 9, 14), float64] */
}

def @func_856(%var_840: Tensor[(1, 8, 5), float64], %var_852: int32, %var_853: Tensor[(13), int32]) -> (Tensor[(1, 8, 5), float64], Tensor[(13, 1), int32], int32, Tensor[(13), int32]) {
  %2 = cast(%var_840, dtype="float64") /* ty=Tensor[(1, 8, 5), float64] */;
  %3 = atanh(%2) /* ty=Tensor[(1, 8, 5), float64] */;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(1, 8, 5), float64] */;
  %5 = cast(%var_852, dtype="int32") /* ty=int32 */;
  %6 = cast(%var_853, dtype="int32") /* ty=Tensor[(13), int32] */;
  %7 = reshape(%5, newshape=[]) /* ty=int32 */;
  %8 = reshape(%6, newshape=[13, 1]) /* ty=Tensor[(13, 1), int32] */;
  %9 = @func_119(%7, %8) /* ty=(Tensor[(13, 1), int32],) */;
  %10 = cosh(%4) /* ty=Tensor[(1, 8, 5), float64] */;
  %11 = %9.0;
  (%10, %11, %var_852, %var_853)
}

def @func_7965() -> (Tensor[(4, 11, 15), bool],) {
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 11, 15), bool] */, dtype="bool") /* ty=Tensor[(4, 11, 15), bool] */;
  %13 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 11, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 11, 15), bool] */, dtype="bool") /* ty=Tensor[(4, 11, 15), bool] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %16 = logical_and(%14, %15) /* ty=Tensor[(4, 11, 15), bool] */;
  (%16,)
}

def @func_7032(%var_7029: Tensor[(6, 13, 6), float32]) -> (Tensor[(6, 13, 6), float32],) {
  %17 = cast(%var_7029, dtype="float32") /* ty=Tensor[(6, 13, 6), float32] */;
  %18 = tan(%17) /* ty=Tensor[(6, 13, 6), float32] */;
  (%18,)
}

def @func_8237() -> Tensor[(4, 11, 15), bool] {
  %19 = @func_7965() /* ty=(Tensor[(4, 11, 15), bool],) */;
  %19.0
}

def @func_6722() -> (Tensor[(14, 9, 14), bool],) {
  %20 = @func_6207() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %21 = %20.0;
  (%21,)
}

def @func_4531(%var_4523: int64) -> (Tensor[(1, 4, 2), int64],) {
  %22 = cast(%var_4523, dtype="int64") /* ty=int64 */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 4, 2), int64] */, dtype="int64") /* ty=Tensor[(1, 4, 2), int64] */;
  %24 = right_shift(%22, %23) /* ty=Tensor[(1, 4, 2), int64] */;
  (%24,)
}

def @func_5512(%var_5507: Tensor[(33), float32], %var_5509: Tensor[(13, 1), int32]) -> (Tensor[(14, 9, 14), bool], Tensor[(11, 3, 1), float32], float32, Tensor[(33), float32], Tensor[(40), float64], Tensor[(13, 1), int32]) {
  %25 = cast(6.67475f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %26 = cast(%var_5507, dtype="float32") /* ty=Tensor[(33), float32] */;
  %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %28 = cast(%var_5509, dtype="int32") /* ty=Tensor[(13, 1), int32] */;
  %29 = reshape(%25, newshape=[]) /* ty=float32 */;
  %30 = reshape(%26, newshape=[11, 3, 1]) /* ty=Tensor[(11, 3, 1), float32] */;
  %31 = reshape(%27, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %32 = reshape(%28, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %33 = @func_1735(%29, %30, %31, %32) /* ty=(Tensor[(11, 3, 1), float32], Tensor[(1, 8, 5), float64], Tensor[(40), float64], Tensor[(13), int32]) */;
  %34 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
  %35 = %33.0;
  (%34, %35, 6.67475f /* ty=float32 */, %var_5507, meta[relay.Constant][3] /* ty=Tensor[(40), float64] */, %var_5509)
}

def @func_6680() -> (Tensor[(1890), int16],) {
  %36 = @func_6596() /* ty=(Tensor[(1890), int16],) */;
  %37 = %36.0;
  (%37,)
}

def @func_3076(%var_3071: Tensor[(9, 6, 4), float64]) -> Tensor[(9, 6, 4), float64] {
  %38 = cast(%var_3071, dtype="float64") /* ty=Tensor[(9, 6, 4), float64] */;
  acosh(%38) /* ty=Tensor[(9, 6, 4), float64] */
}

def @func_2652(%var_2570: Tensor[(7, 2, 10), float32], %var_2581: Tensor[(40), float64], %var_2582: int32, %var_2583: Tensor[(13), int32], %var_2614: Tensor[(594), uint16]) -> (Tensor[(7, 2, 10), float32], int32, Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) {
  %39 = cast(%var_2570, dtype="float32") /* ty=Tensor[(7, 2, 10), float32] */;
  %40 = cast(%var_2581, dtype="float64") /* ty=Tensor[(40), float64] */;
  %41 = cast(%var_2582, dtype="int32") /* ty=int32 */;
  %42 = cast(%var_2583, dtype="int32") /* ty=Tensor[(13), int32] */;
  %43 = reshape(%40, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), float64] */;
  %44 = reshape(%41, newshape=[]) /* ty=int32 */;
  %45 = reshape(%42, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %46 = @func_856(%43, %44, %45) /* ty=(Tensor[(1, 8, 5), float64], Tensor[(13, 1), int32], int32, Tensor[(13), int32]) */;
  %47 = cast(%var_2614, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %48 = reshape(%47, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), uint16] */;
  %49 = @func_41(%48) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */;
  %50 = log2(%39) /* ty=Tensor[(7, 2, 10), float32] */;
  %51 = %46.2;
  %52 = %49.0;
  (%50, %51, %var_2581, %var_2582, %var_2583, %52, %var_2614)
}

def @func_7951(%var_7922: Tensor[(6, 10, 16), float32]) -> (Tensor[(6, 10, 16), float32], Tensor[(14, 9, 14), int64], Tensor[(1764), bool]) {
  %53 = cast(%var_7922, dtype="float32") /* ty=Tensor[(6, 10, 16), float32] */;
  %54 = asin(%53) /* ty=Tensor[(6, 10, 16), float32] */;
  %55 = cast(%54, dtype="float32") /* ty=Tensor[(6, 10, 16), float32] */;
  %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(1764), bool] */, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %57 = reshape(%56, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), bool] */;
  %58 = log2(%55) /* ty=Tensor[(6, 10, 16), float32] */;
  %59 = @func_5833(%57) /* ty=Tensor[(14, 9, 14), int64] */;
  (%58, %59, meta[relay.Constant][4] /* ty=Tensor[(1764), bool] */)
}

def @func_8367(%var_8329: Tensor[(50, 6), float32], %var_8331: Tensor[(40), float64]) -> (Tensor[(14, 9, 14), uint16], Tensor[(594), bool], Tensor[(5, 28), float32], Tensor[(40), float64], Tensor[(6, 99), uint16], Tensor[(140), float32], Tensor[(50, 6), bool]) {
  %60 = @func_6184() /* ty=(Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) */;
  %61 = cast(%var_8329, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
  %62 = cast(%var_8329, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
  %63 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 28), float32] */, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
  %64 = cast(%var_8331, dtype="float64") /* ty=Tensor[(40), float64] */;
  %65 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 99), uint16] */, dtype="uint16") /* ty=Tensor[(6, 99), uint16] */;
  %66 = reshape(%61, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %67 = reshape(%62, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %68 = reshape(%63, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %69 = reshape(%64, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %70 = reshape(%65, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %71 = @func_3848(%66, %67, %68, %69, %70) /* ty=(Tensor[(5, 4, 15), float32], Tensor[(7, 2, 10), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(13), int32], Tensor[(594), bool]) */;
  %72 = @func_6184() /* ty=(Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) */;
  %73 = cast(%var_8329, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
  %74 = exp(%73) /* ty=Tensor[(50, 6), float32] */;
  %75 = cast(%var_8329, dtype="bool") /* ty=Tensor[(50, 6), bool] */;
  %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(2), int32] */;
  %77 = cast(%74, dtype="bool") /* ty=Tensor[(50, 6), bool] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %79 = %60.0;
  %80 = %71.5;
  %81 = %72.3;
  %82 = less_equal(%77, %78) /* ty=Tensor[(50, 6), bool] */;
  (%79, %80, meta[relay.Constant][5] /* ty=Tensor[(5, 28), float32] */, %var_8331, meta[relay.Constant][6] /* ty=Tensor[(6, 99), uint16] */, %81, %82)
}

def @func_785(%var_711: int64, %var_712: Tensor[(1, 14, 10), int64], %var_754: Tensor[(13), int32]) -> (Tensor[(1, 14, 10), bool], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32], Tensor[(13), int32], Tensor[(1, 594), float64], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32]) {
  %83 = cast(%var_711, dtype="bool") /* ty=bool */;
  %84 = cast(%var_712, dtype="bool") /* ty=Tensor[(1, 14, 10), bool] */;
  %85 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 594), uint16] */, dtype="uint16") /* ty=Tensor[(1, 594), uint16] */;
  %86 = reshape(%85, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), uint16] */;
  %87 = @func_41(%86) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */;
  %88 = cast(%var_711, dtype="int32") /* ty=int32 */;
  %89 = cast(%var_754, dtype="int32") /* ty=Tensor[(13), int32] */;
  %90 = reshape(%88, newshape=[]) /* ty=int32 */;
  %91 = reshape(%89, newshape=[13, 1]) /* ty=Tensor[(13, 1), int32] */;
  %92 = @func_119(%90, %91) /* ty=(Tensor[(13, 1), int32],) */;
  %93 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 594), uint16] */, dtype="float64") /* ty=Tensor[(1, 594), float64] */;
  %94 = log2(%93) /* ty=Tensor[(1, 594), float64] */;
  %95 = cast(%94, dtype="float32") /* ty=Tensor[(1, 594), float32] */;
  %96 = sqrt(%95) /* ty=Tensor[(1, 594), float32] */;
  %97 = cast(%96, dtype="float64") /* ty=Tensor[(1, 594), float64] */;
  %98 = atan(%97) /* ty=Tensor[(1, 594), float64] */;
  %99 = cast(%98, dtype="uint16") /* ty=Tensor[(1, 594), uint16] */;
  %100 = reshape(%99, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %101 = @func_329(%100) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(594), uint16], Tensor[(6, 11, 9), uint16], Tensor[(3, 16, 10), float32], Tensor[(6, 11, 9), uint16]) */;
  %102 = cast(%var_711, dtype="int32") /* ty=int32 */;
  %103 = cast(%var_754, dtype="int32") /* ty=Tensor[(13), int32] */;
  %104 = reshape(%102, newshape=[]) /* ty=int32 */;
  %105 = reshape(%103, newshape=[13, 1]) /* ty=Tensor[(13, 1), int32] */;
  %106 = @func_119(%104, %105) /* ty=(Tensor[(13, 1), int32],) */;
  %107 = equal(%83, %84) /* ty=Tensor[(1, 14, 10), bool] */;
  %108 = %87.0;
  %109 = %92.0;
  %110 = %101.2;
  %111 = %106.0;
  (%107, %108, %109, %var_754, %98, %110, %111)
}

def @func_7178(%var_7158: Tensor[(1890), int16]) -> (Tensor[(14, 9, 14), bool], Tensor[(1890), bool]) {
  %112 = @func_5722() /* ty=(Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) */;
  %113 = %112.1;
  %114 = cast(%var_7158, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(1), int32] */;
  %116 = cast(%113, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?), bool] */;
  %118 = @func_6498() /* ty=Tensor[(14, 9, 14), bool] */;
  %119 = equal(%116, %117) /* ty=Tensor[(1890), bool] */;
  (%118, %119)
}

def @func_5415() -> Tensor[(14, 9, 14), bool] {
  %120 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 9, 14), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %121 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(14, 9, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 9, 14), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%122, %123) /* ty=Tensor[(14, 9, 14), bool] */
}

def @func_7502() -> Tensor[(13), int32] {
  @func_7131() /* ty=Tensor[(13), int32] */
}

def @func_5833(%var_5826: Tensor[(14, 9, 14), bool]) -> Tensor[(14, 9, 14), int64] {
  %124 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %125 = %124.0;
  %126 = cast(%var_5826, dtype="int64") /* ty=Tensor[(14, 9, 14), int64] */;
  %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%125, dtype="int64") /* ty=Tensor[(14, 9, 14), int64] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%128, %129) /* ty=Tensor[(14, 9, 14), int64] */
}

def @func_6263(%var_6236: Tensor[(11, 2, 9), float32], %var_6244: Tensor[(140), int64], %var_6245: Tensor[(13), int32]) -> (Tensor[(6, 11, 9), uint16], int64, Tensor[(140), int64], Tensor[(13), int32], Tensor[(11, 7, 14), uint32], Tensor[(77), uint32], Tensor[(7, 154), uint32], Tensor[(11, 2, 9), int64]) {
  %130 = cast(1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %131 = cast(%var_6244, dtype="int64") /* ty=Tensor[(140), int64] */;
  %132 = cast(%var_6245, dtype="int32") /* ty=Tensor[(13), int32] */;
  %133 = reshape(%130, newshape=[]) /* ty=int64 */;
  %134 = reshape(%131, newshape=[1, 14, 10]) /* ty=Tensor[(1, 14, 10), int64] */;
  %135 = reshape(%132, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %136 = @func_785(%133, %134, %135) /* ty=(Tensor[(1, 14, 10), bool], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32], Tensor[(13), int32], Tensor[(1, 594), float64], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32]) */;
  %137 = cast(meta[relay.Constant][10] /* ty=Tensor[(77), uint32] */, dtype="uint32") /* ty=Tensor[(77), uint32] */;
  %138 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 154), uint32] */, dtype="uint32") /* ty=Tensor[(7, 154), uint32] */;
  %139 = reshape(%137, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), uint32] */;
  %140 = reshape(%138, newshape=[11, 7, 14]) /* ty=Tensor[(11, 7, 14), uint32] */;
  %141 = @func_4395(%139, %140) /* ty=(Tensor[(11, 7, 14), uint32], Tensor[(13, 16, 16), bool], Tensor[(208), uint64], Tensor[(8, 416), uint64]) */;
  %142 = cast(%var_6236, dtype="float32") /* ty=Tensor[(11, 2, 9), float32] */;
  %143 = asinh(%142) /* ty=Tensor[(11, 2, 9), float32] */;
  %144 = cast(%143, dtype="bool") /* ty=Tensor[(11, 2, 9), bool] */;
  %145 = shape_of(%var_6236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%var_6236, dtype="bool") /* ty=Tensor[(11, 2, 9), bool] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %148 = greater_equal(%146, %147) /* ty=Tensor[(11, 2, 9), bool] */;
  %149 = cast(%148, dtype="int64") /* ty=Tensor[(11, 2, 9), int64] */;
  %150 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%143, dtype="int64") /* ty=Tensor[(11, 2, 9), int64] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %153 = %136.5;
  %154 = %141.0;
  %155 = add(%151, %152) /* ty=Tensor[(11, 2, 9), int64] */;
  (%153, 1 /* ty=int64 */, %var_6244, %var_6245, %154, meta[relay.Constant][10] /* ty=Tensor[(77), uint32] */, meta[relay.Constant][11] /* ty=Tensor[(7, 154), uint32] */, %155)
}

def @func_7789(%var_7775: Tensor[(3, 7, 10), int8]) -> (Tensor[(3, 7, 10), bool], Tensor[(14, 9, 14), float64]) {
  %156 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 7, 10), int8] */, dtype="bool") /* ty=Tensor[(3, 7, 10), bool] */;
  %157 = shape_of(%var_7775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%var_7775, dtype="bool") /* ty=Tensor[(3, 7, 10), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %160 = greater(%158, %159) /* ty=Tensor[(3, 7, 10), bool] */;
  %161 = @func_6344() /* ty=Tensor[(14, 9, 14), float64] */;
  (%160, %161)
}

def @func_5722() -> (Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) {
  %162 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %163 = %162.0;
  %164 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 9, 14), bool] */, dtype="float64") /* ty=Tensor[(14, 9, 14), float64] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="float64") /* ty=Tensor[(14, 9, 14), float64] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %168 = cast(meta[relay.Constant][14] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %169 = cast(meta[relay.Constant][15] /* ty=Tensor[(594), uint16] */, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %170 = reshape(%168, newshape=[9, 2, 16]) /* ty=Tensor[(9, 2, 16), float32] */;
  %171 = reshape(%169, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %172 = @func_3294(%170, %171) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(1890), int16], Tensor[(594), uint16], Tensor[(4, 12, 12), float32], Tensor[(576), int8], Tensor[(9, 2, 16), float32]) */;
  %173 = power(%166, %167) /* ty=Tensor[(14, 9, 14), float64] */;
  %174 = %172.1;
  (%173, %174, meta[relay.Constant][14] /* ty=Tensor[(288), float32] */, meta[relay.Constant][15] /* ty=Tensor[(594), uint16] */)
}

def @func_7614() -> (Tensor[(594), float32], Tensor[(1890), int16]) {
  %175 = @func_6576() /* ty=(Tensor[(14, 9, 14), bool], Tensor[(594, ?), int16], Tensor[(594), float32]) */;
  %176 = @func_6680() /* ty=(Tensor[(1890), int16],) */;
  %177 = %176.0;
  %178 = cast(meta[relay.Constant][16] /* ty=Tensor[(1890), int16] */, dtype="int16") /* ty=Tensor[(1890), int16] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(1), int32] */;
  %180 = cast(%177, dtype="int16") /* ty=Tensor[(1890), int16] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?), int16] */;
  %182 = %175.2;
  %183 = bitwise_xor(%180, %181) /* ty=Tensor[(1890), int16] */;
  (%182, %183)
}

def @func_119(%var_109: int32, %var_110: Tensor[(13, 1), int32]) -> (Tensor[(13, 1), int32],) {
  %184 = cast(%var_109, dtype="int32") /* ty=int32 */;
  %185 = cast(%var_110, dtype="int32") /* ty=Tensor[(13, 1), int32] */;
  %186 = bitwise_and(%184, %185) /* ty=Tensor[(13, 1), int32] */;
  (%186,)
}

def @func_3848(%var_3823: Tensor[(5, 4, 15), float32], %var_3824: Tensor[(5, 4, 15), float32], %var_3830: Tensor[(140), float32], %var_3831: Tensor[(40), float64], %var_3834: Tensor[(594), uint16]) -> (Tensor[(5, 4, 15), float32], Tensor[(7, 2, 10), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(13), int32], Tensor[(594), bool]) {
  %187 = cast(%var_3824, dtype="float32") /* ty=Tensor[(5, 4, 15), float32] */;
  %188 = shape_of(%var_3823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%var_3823, dtype="float32") /* ty=Tensor[(5, 4, 15), float32] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %191 = cast(%var_3830, dtype="float32") /* ty=Tensor[(140), float32] */;
  %192 = cast(%var_3831, dtype="float64") /* ty=Tensor[(40), float64] */;
  %193 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %194 = cast(meta[relay.Constant][17] /* ty=Tensor[(13), int32] */, dtype="int32") /* ty=Tensor[(13), int32] */;
  %195 = cast(%var_3834, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %196 = reshape(%191, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float32] */;
  %197 = reshape(%192, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %198 = reshape(%193, newshape=[]) /* ty=int32 */;
  %199 = reshape(%194, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %200 = reshape(%195, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %201 = @func_2652(%196, %197, %198, %199, %200) /* ty=(Tensor[(7, 2, 10), float32], int32, Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */;
  %202 = cast(%var_3834, dtype="bool") /* ty=Tensor[(594), bool] */;
  %203 = cast(4 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %204 = floor_divide(%189, %190) /* ty=Tensor[(5, 4, 15), float32] */;
  %205 = %201.0;
  %206 = not_equal(%202, %203) /* ty=Tensor[(594), bool] */;
  (%204, %205, %var_3830, %var_3831, meta[relay.Constant][17] /* ty=Tensor[(13), int32] */, %206)
}

def @func_7764(%var_7758: Tensor[(9, 2, 1), float32], %var_7759: Tensor[(9, 2, 1), float32]) -> Tensor[(9, 2, ?), float32] {
  %207 = cast(%var_7759, dtype="float32") /* ty=Tensor[(9, 2, 1), float32] */;
  %208 = shape_of(%var_7758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_7758, dtype="float32") /* ty=Tensor[(9, 2, 1), float32] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%209, %210) /* ty=Tensor[(9, 2, ?), float32] */
}

def @func_1735(%var_1720: float32, %var_1721: Tensor[(11, 3, 1), float32], %var_1728: Tensor[(40), float64], %var_1729: Tensor[(13), int32]) -> (Tensor[(11, 3, 1), float32], Tensor[(1, 8, 5), float64], Tensor[(40), float64], Tensor[(13), int32]) {
  %211 = cast(%var_1720, dtype="float32") /* ty=float32 */;
  %212 = cast(%var_1721, dtype="float32") /* ty=Tensor[(11, 3, 1), float32] */;
  %213 = cast(%var_1728, dtype="float64") /* ty=Tensor[(40), float64] */;
  %214 = cast(%var_1720, dtype="int32") /* ty=int32 */;
  %215 = cast(%var_1729, dtype="int32") /* ty=Tensor[(13), int32] */;
  %216 = reshape(%213, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), float64] */;
  %217 = reshape(%214, newshape=[]) /* ty=int32 */;
  %218 = reshape(%215, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %219 = @func_856(%216, %217, %218) /* ty=(Tensor[(1, 8, 5), float64], Tensor[(13, 1), int32], int32, Tensor[(13), int32]) */;
  %220 = maximum(%211, %212) /* ty=Tensor[(11, 3, 1), float32] */;
  %221 = %219.0;
  (%220, %221, %var_1728, %var_1729)
}

def @func_2038(%var_2018: float64, %var_2025: Tensor[(13, 4, 13), float64]) -> (Tensor[(13, 4, 13), float64], Tensor[(13, 4, 1), float32], Tensor[(13, 4, 1), float64]) {
  %222 = cast(%var_2018, dtype="float64") /* ty=float64 */;
  %223 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(13, 4, 1), float64] */;
  %224 = divide(%222, %223) /* ty=Tensor[(13, 4, 1), float64] */;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(13, 4, 1), float64] */;
  %226 = cast(%var_2025, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  %227 = cast(%224, dtype="float32") /* ty=Tensor[(13, 4, 1), float32] */;
  %228 = cast(%224, dtype="float64") /* ty=Tensor[(13, 4, 1), float64] */;
  %229 = add(%225, %226) /* ty=Tensor[(13, 4, 13), float64] */;
  %230 = sinh(%227) /* ty=Tensor[(13, 4, 1), float32] */;
  %231 = erf(%228) /* ty=Tensor[(13, 4, 1), float64] */;
  (%229, %230, %231)
}

def @func_329(%var_297: Tensor[(594), uint16]) -> (Tensor[(6, 11, 9), uint16], Tensor[(594), uint16], Tensor[(6, 11, 9), uint16], Tensor[(3, 16, 10), float32], Tensor[(6, 11, 9), uint16]) {
  %232 = cast(%var_297, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %233 = reshape(%232, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), uint16] */;
  %234 = @func_41(%233) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */;
  %235 = cast(%var_297, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %236 = reshape(%235, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), uint16] */;
  %237 = @func_41(%236) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */;
  %238 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 16, 10), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 10), float64] */;
  %239 = exp(%238) /* ty=Tensor[(3, 16, 10), float64] */;
  %240 = cast(%239, dtype="float32") /* ty=Tensor[(3, 16, 10), float32] */;
  %241 = %234.0;
  %242 = cast(%241, dtype="uint16") /* ty=Tensor[(6, 11, 9), uint16] */;
  %243 = reshape(%242, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), uint16] */;
  %244 = @func_41(%243) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */;
  %245 = %237.0;
  %246 = atan(%240) /* ty=Tensor[(3, 16, 10), float32] */;
  %247 = %244.0;
  (%241, %var_297, %245, %246, %247)
}

def @func_3875(%var_3867: Tensor[(10, 11, 6), float64]) -> (Tensor[(10, 11, 6), float64],) {
  %248 = cast(%var_3867, dtype="float64") /* ty=Tensor[(10, 11, 6), float64] */;
  %249 = asinh(%248) /* ty=Tensor[(10, 11, 6), float64] */;
  (%249,)
}

def @func_1593(%var_1566: int64) -> (Tensor[(16, 13, 13), uint64], Tensor[(140), int64], Tensor[(13, 1), int32], Tensor[(6, 11, 9), int32], Tensor[(16, 13, 13), float32], Tensor[(5, 16, 6), uint32], Tensor[(1, 480), uint32]) {
  %250 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
  %251 = exp(%250) /* ty=Tensor[(16, 13, 13), float32] */;
  %252 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 13, 13), float32] */, dtype="uint64") /* ty=Tensor[(16, 13, 13), uint64] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="uint64") /* ty=Tensor[(16, 13, 13), uint64] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %256 = cast(%var_1566, dtype="int64") /* ty=int64 */;
  %257 = cast(meta[relay.Constant][21] /* ty=Tensor[(140), int64] */, dtype="int64") /* ty=Tensor[(140), int64] */;
  %258 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 1), int32] */, dtype="int32") /* ty=Tensor[(13, 1), int32] */;
  %259 = reshape(%256, newshape=[]) /* ty=int64 */;
  %260 = reshape(%257, newshape=[1, 14, 10]) /* ty=Tensor[(1, 14, 10), int64] */;
  %261 = reshape(%258, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %262 = @func_785(%259, %260, %261) /* ty=(Tensor[(1, 14, 10), bool], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32], Tensor[(13), int32], Tensor[(1, 594), float64], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32]) */;
  %263 = %262.1;
  %264 = cast(%263, dtype="int32") /* ty=Tensor[(6, 11, 9), int32] */;
  %265 = cast(%var_1566, dtype="int32") /* ty=int32 */;
  %266 = cast(%251, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
  %267 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 480), uint32] */, dtype="uint32") /* ty=Tensor[(1, 480), uint32] */;
  %268 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 480), uint32] */, dtype="uint32") /* ty=Tensor[(1, 480), uint32] */;
  %269 = reshape(%267, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint32] */;
  %270 = reshape(%268, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint32] */;
  %271 = @func_1085(%269, %270) /* ty=(Tensor[(5, 16, 6), uint32],) */;
  %272 = left_shift(%254, %255) /* ty=Tensor[(16, 13, 13), uint64] */;
  %273 = right_shift(%264, %265) /* ty=Tensor[(6, 11, 9), int32] */;
  %274 = tan(%266) /* ty=Tensor[(16, 13, 13), float32] */;
  %275 = %271.0;
  (%272, meta[relay.Constant][21] /* ty=Tensor[(140), int64] */, meta[relay.Constant][22] /* ty=Tensor[(13, 1), int32] */, %273, %274, %275, meta[relay.Constant][23] /* ty=Tensor[(1, 480), uint32] */)
}

def @func_5689() -> Tensor[(14, 9, 14), bool] {
  @func_5415() /* ty=Tensor[(14, 9, 14), bool] */
}

def @func_477(%var_426: Tensor[(1, 14, 14), float32], %var_447: Tensor[(3, 14, 14), float32]) -> (Tensor[(3, 14, 14), int32], Tensor[(?, 14, 14), bool]) {
  %276 = cast(%var_426, dtype="float32") /* ty=Tensor[(1, 14, 14), float32] */;
  %277 = sigmoid(%276) /* ty=Tensor[(1, 14, 14), float32] */;
  %278 = cast(%277, dtype="int32") /* ty=Tensor[(1, 14, 14), int32] */;
  %279 = cast(%var_447, dtype="int32") /* ty=Tensor[(3, 14, 14), int32] */;
  %280 = cast(%var_426, dtype="float32") /* ty=Tensor[(1, 14, 14), float32] */;
  %281 = log10(%280) /* ty=Tensor[(1, 14, 14), float32] */;
  %282 = cast(%277, dtype="bool") /* ty=Tensor[(1, 14, 14), bool] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="bool") /* ty=Tensor[(1, 14, 14), bool] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %286 = add(%278, %279) /* ty=Tensor[(3, 14, 14), int32] */;
  %287 = less(%284, %285) /* ty=Tensor[(?, 14, 14), bool] */;
  (%286, %287)
}

def @func_1047(%var_1033: Tensor[(7, 10, 11), int32], %var_1034: Tensor[(7, 10, 11), int32]) -> (Tensor[(7, 10, 11), int32],) {
  %288 = cast(%var_1034, dtype="int32") /* ty=Tensor[(7, 10, 11), int32] */;
  %289 = shape_of(%var_1033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%var_1033, dtype="int32") /* ty=Tensor[(7, 10, 11), int32] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %292 = subtract(%290, %291) /* ty=Tensor[(7, 10, 11), int32] */;
  (%292,)
}

def @func_1793(%var_1787: Tensor[(10, 8, 13), float64]) -> (Tensor[(10, 8, 13), float64],) {
  %293 = cast(%var_1787, dtype="float64") /* ty=Tensor[(10, 8, 13), float64] */;
  %294 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(10, 8, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 13), float64] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %297 = power(%295, %296) /* ty=Tensor[(10, 8, 13), float64] */;
  (%297,)
}

def @func_8216() -> Tensor[(14, 9, 14), uint32] {
  %298 = @func_6498() /* ty=Tensor[(14, 9, 14), bool] */;
  %299 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 9, 14), bool] */, dtype="uint32") /* ty=Tensor[(14, 9, 14), uint32] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%298, dtype="uint32") /* ty=Tensor[(14, 9, 14), uint32] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%301, %302) /* ty=Tensor[(14, 9, 14), uint32] */
}

def @func_7342(%var_7245: Tensor[(9, 8, 12), bool], %var_7250: Tensor[(9, 8, 12), bool], %var_7330: Tensor[(40), float64]) -> (Tensor[(13), int32], Tensor[(1764), bool], Tensor[(6, 36), float64], Tensor[(9, 8, 12), uint32], Tensor[(9, 8, 12), int8], Tensor[(9, 8, 12), float64], Tensor[(1, 594), uint16], Tensor[(13), int32], Tensor[(40), float64], int32) {
  %303 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 36), float64] */, dtype="float64") /* ty=Tensor[(6, 36), float64] */;
  %304 = reshape(%303, newshape=[9, 6, 4]) /* ty=Tensor[(9, 6, 4), float64] */;
  %305 = @func_3076(%304) /* ty=Tensor[(9, 6, 4), float64] */;
  %306 = cast(%305, dtype="float64") /* ty=Tensor[(9, 6, 4), float64] */;
  %307 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(6, 36), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %308 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 36), float64] */, dtype="float64") /* ty=Tensor[(6, 36), float64] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %310 = cast(meta[relay.Constant][26] /* ty=Tensor[(1764), bool] */, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %311 = reshape(%310, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), bool] */;
  %312 = @func_5979(%311) /* ty=(Tensor[(14, 9, 14), int64], Tensor[(9, 8, 12), bool], Tensor[(864), float32], Tensor[(14, 9, 14), float32]) */;
  %313 = %312.1;
  %314 = cast(%var_7245, dtype="uint32") /* ty=Tensor[(9, 8, 12), uint32] */;
  %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%313, dtype="uint32") /* ty=Tensor[(9, 8, 12), uint32] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %318 = cast(%var_7250, dtype="int8") /* ty=Tensor[(9, 8, 12), int8] */;
  %319 = shape_of(%var_7245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%var_7245, dtype="int8") /* ty=Tensor[(9, 8, 12), int8] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %322 = cast(%313, dtype="float32") /* ty=Tensor[(9, 8, 12), float32] */;
  %323 = log10(%322) /* ty=Tensor[(9, 8, 12), float32] */;
  %324 = cast(%323, dtype="float64") /* ty=Tensor[(9, 8, 12), float64] */;
  %325 = @func_6184() /* ty=(Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) */;
  %326 = cast(%var_7330, dtype="float64") /* ty=Tensor[(40), float64] */;
  %327 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %328 = @func_7071() /* ty=Tensor[(13), int32] */;
  %329 = cast(%328, dtype="int32") /* ty=Tensor[(13), int32] */;
  %330 = reshape(%326, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), float64] */;
  %331 = reshape(%327, newshape=[]) /* ty=int32 */;
  %332 = reshape(%329, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %333 = @func_856(%330, %331, %332) /* ty=(Tensor[(1, 8, 5), float64], Tensor[(13, 1), int32], int32, Tensor[(13), int32]) */;
  %334 = mod(%308, %309) /* ty=Tensor[(6, 36), float64] */;
  %335 = bitwise_or(%316, %317) /* ty=Tensor[(9, 8, 12), uint32] */;
  %336 = bitwise_xor(%320, %321) /* ty=Tensor[(9, 8, 12), int8] */;
  %337 = asinh(%324) /* ty=Tensor[(9, 8, 12), float64] */;
  %338 = %325.5;
  %339 = %333.3;
  (%328, meta[relay.Constant][26] /* ty=Tensor[(1764), bool] */, %334, %335, %336, %337, %338, %339, %var_7330, -7 /* ty=int32 */)
}

def @func_5778() -> (Tensor[(14, 9, 14), bool],) {
  %340 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %341 = %340.0;
  (%341,)
}

def @func_8675(%var_8651: float32, %var_8652: Tensor[(6, 16, 1), float32]) -> (Tensor[(6, 16, 1), float32], Tensor[(6, 16, 1), float64], Tensor[(13), int32]) {
  %342 = cast(%var_8651, dtype="float32") /* ty=float32 */;
  %343 = cast(%var_8652, dtype="float32") /* ty=Tensor[(6, 16, 1), float32] */;
  %344 = cast(%var_8652, dtype="float64") /* ty=Tensor[(6, 16, 1), float64] */;
  %345 = divide(%342, %343) /* ty=Tensor[(6, 16, 1), float32] */;
  %346 = log2(%344) /* ty=Tensor[(6, 16, 1), float64] */;
  %347 = @func_7131() /* ty=Tensor[(13), int32] */;
  (%345, %346, %347)
}

def @func_4804(%var_4793: Tensor[(9, 8, 12), float32]) -> (Tensor[(9, 8, 12), bool],) {
  %348 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 8, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 8, 12), bool] */;
  %349 = shape_of(%var_4793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%var_4793, dtype="bool") /* ty=Tensor[(9, 8, 12), bool] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %352 = not_equal(%350, %351) /* ty=Tensor[(9, 8, 12), bool] */;
  (%352,)
}

def @func_6184() -> (Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) {
  %353 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
  %354 = cast(%353, dtype="float32") /* ty=Tensor[(14, 9, 14), float32] */;
  %355 = asinh(%354) /* ty=Tensor[(14, 9, 14), float32] */;
  %356 = cast(%355, dtype="uint16") /* ty=Tensor[(14, 9, 14), uint16] */;
  %357 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%353, dtype="uint16") /* ty=Tensor[(14, 9, 14), uint16] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %360 = cast(meta[relay.Constant][29] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %361 = cast(meta[relay.Constant][29] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %362 = cast(meta[relay.Constant][30] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %363 = cast(meta[relay.Constant][31] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %364 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 594), uint16] */, dtype="uint16") /* ty=Tensor[(1, 594), uint16] */;
  %365 = reshape(%360, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %366 = reshape(%361, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %367 = reshape(%362, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %368 = reshape(%363, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %369 = reshape(%364, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %370 = @func_3848(%365, %366, %367, %368, %369) /* ty=(Tensor[(5, 4, 15), float32], Tensor[(7, 2, 10), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(13), int32], Tensor[(594), bool]) */;
  %371 = left_shift(%358, %359) /* ty=Tensor[(14, 9, 14), uint16] */;
  %372 = %370.4;
  (%371, %372, meta[relay.Constant][29] /* ty=Tensor[(300), float32] */, meta[relay.Constant][30] /* ty=Tensor[(140), float32] */, meta[relay.Constant][31] /* ty=Tensor[(40), float64] */, meta[relay.Constant][32] /* ty=Tensor[(1, 594), uint16] */)
}

def @func_7531() -> Tensor[(14, 9, 14), float32] {
  %373 = @func_6722() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %374 = %373.0;
  %375 = cast(%374, dtype="float32") /* ty=Tensor[(14, 9, 14), float32] */;
  log2(%375) /* ty=Tensor[(14, 9, 14), float32] */
}

def @func_8107() -> (Tensor[(14, 9, 14), bool], Tensor[(1890), bool]) {
  %376 = @func_7576() /* ty=(Tensor[(14, 9, 14), bool], Tensor[(14, 9, 14), bool]) */;
  %377 = @func_6596() /* ty=(Tensor[(1890), int16],) */;
  %378 = %377.0;
  %379 = cast(%378, dtype="float32") /* ty=Tensor[(1890), float32] */;
  %380 = rsqrt(%379) /* ty=Tensor[(1890), float32] */;
  %381 = cast(%378, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(1), int32] */;
  %383 = cast(%380, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?), bool] */;
  %385 = %376.0;
  %386 = less_equal(%383, %384) /* ty=Tensor[(1890), bool] */;
  (%385, %386)
}

def @func_3294(%var_3248: Tensor[(9, 2, 16), float32], %var_3255: Tensor[(594), uint16]) -> (Tensor[(6, 11, 9), uint16], Tensor[(1890), int16], Tensor[(594), uint16], Tensor[(4, 12, 12), float32], Tensor[(576), int8], Tensor[(9, 2, 16), float32]) {
  %387 = cast(meta[relay.Constant][33] /* ty=Tensor[(1890), int16] */, dtype="int16") /* ty=Tensor[(1890), int16] */;
  %388 = cast(%var_3255, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %389 = reshape(%387, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), int16] */;
  %390 = reshape(%388, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %391 = @func_1761(%389, %390) /* ty=(Tensor[(9, 14, 15), int16], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */;
  %392 = cast(meta[relay.Constant][34] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %393 = cast(%var_3255, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %394 = reshape(%392, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), int8] */;
  %395 = reshape(%393, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %396 = @func_3184(%394, %395) /* ty=(Tensor[(4, 12, 12), float32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */;
  %397 = cast(%var_3248, dtype="float32") /* ty=Tensor[(9, 2, 16), float32] */;
  %398 = atanh(%397) /* ty=Tensor[(9, 2, 16), float32] */;
  %399 = cast(%var_3248, dtype="bool") /* ty=Tensor[(9, 2, 16), bool] */;
  %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%398, dtype="bool") /* ty=Tensor[(9, 2, 16), bool] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %403 = equal(%401, %402) /* ty=Tensor[(9, 2, 16), bool] */;
  %404 = cast(%398, dtype="float32") /* ty=Tensor[(9, 2, 16), float32] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="float32") /* ty=Tensor[(9, 2, 16), float32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %408 = %391.1;
  %409 = %396.0;
  %410 = minimum(%406, %407) /* ty=Tensor[(9, 2, 16), float32] */;
  (%408, meta[relay.Constant][33] /* ty=Tensor[(1890), int16] */, %var_3255, %409, meta[relay.Constant][34] /* ty=Tensor[(576), int8] */, %410)
}

def @func_8247() -> Tensor[(14, 9, 14), bool] {
  %411 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %411.0
}

def @func_5979(%var_5933: Tensor[(14, 9, 14), bool]) -> (Tensor[(14, 9, 14), int64], Tensor[(9, 8, 12), bool], Tensor[(864), float32], Tensor[(14, 9, 14), float32]) {
  %412 = @func_5778() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %413 = %412.0;
  %414 = cast(%var_5933, dtype="int64") /* ty=Tensor[(14, 9, 14), int64] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="int64") /* ty=Tensor[(14, 9, 14), int64] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %418 = cast(meta[relay.Constant][35] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %419 = reshape(%418, newshape=[9, 8, 12]) /* ty=Tensor[(9, 8, 12), float32] */;
  %420 = @func_4804(%419) /* ty=(Tensor[(9, 8, 12), bool],) */;
  %421 = @func_5722() /* ty=(Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) */;
  %422 = %421.0;
  %423 = cast(%422, dtype="float32") /* ty=Tensor[(14, 9, 14), float32] */;
  %424 = bitwise_and(%416, %417) /* ty=Tensor[(14, 9, 14), int64] */;
  %425 = %420.0;
  %426 = cos(%423) /* ty=Tensor[(14, 9, 14), float32] */;
  (%424, %425, meta[relay.Constant][35] /* ty=Tensor[(864), float32] */, %426)
}

def @func_8458() -> (Tensor[(4, 11, 15), bool], Tensor[(14, 9, 14), float64]) {
  %427 = @func_7877() /* ty=(Tensor[(13), int32], Tensor[(14, 9, 14), float64]) */;
  %428 = @func_8237() /* ty=Tensor[(4, 11, 15), bool] */;
  %429 = %427.1;
  (%428, %429)
}

def @func_2967(%var_2958: Tensor[(13, 1, 16), uint64], %var_2959: Tensor[(13, 16, 16), uint64]) -> Tensor[(13, 16, 16), bool] {
  %430 = cast(%var_2958, dtype="bool") /* ty=Tensor[(13, 1, 16), bool] */;
  %431 = cast(%var_2959, dtype="bool") /* ty=Tensor[(13, 16, 16), bool] */;
  less(%430, %431) /* ty=Tensor[(13, 16, 16), bool] */
}

def @func_7382(%var_7348: Tensor[(8, 2, 8), float32], %var_7358: Tensor[(140, 1), float32]) -> (Tensor[(8, 2, 8), float32], Tensor[(6, 11, 9), uint16], Tensor[(140, 1), float32], Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(594), uint16]) {
  %432 = cast(%var_7348, dtype="float32") /* ty=Tensor[(8, 2, 8), float32] */;
  %433 = cast(%var_7358, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
  %434 = cast(meta[relay.Constant][36] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %435 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %436 = cast(meta[relay.Constant][37] /* ty=Tensor[(13), int32] */, dtype="int32") /* ty=Tensor[(13), int32] */;
  %437 = cast(meta[relay.Constant][38] /* ty=Tensor[(594), uint16] */, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %438 = reshape(%433, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float32] */;
  %439 = reshape(%434, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %440 = reshape(%435, newshape=[]) /* ty=int32 */;
  %441 = reshape(%436, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %442 = reshape(%437, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %443 = @func_2652(%438, %439, %440, %441, %442) /* ty=(Tensor[(7, 2, 10), float32], int32, Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */;
  %444 = cos(%432) /* ty=Tensor[(8, 2, 8), float32] */;
  %445 = %443.5;
  (%444, %445, %var_7358, meta[relay.Constant][36] /* ty=Tensor[(40), float64] */, -1 /* ty=int32 */, meta[relay.Constant][37] /* ty=Tensor[(13), int32] */, meta[relay.Constant][38] /* ty=Tensor[(594), uint16] */)
}

def @func_7071() -> Tensor[(13), int32] {
  %446 = @func_6184() /* ty=(Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) */;
  %446.1
}

def @func_7979() -> (Tensor[(14, 9, 14), bool],) {
  %447 = @func_6722() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %448 = %447.0;
  (%448,)
}

def @func_1085(%var_1078: Tensor[(5, 16, 6), uint32], %var_1079: Tensor[(5, 16, 6), uint32]) -> (Tensor[(5, 16, 6), uint32],) {
  %449 = cast(%var_1079, dtype="uint32") /* ty=Tensor[(5, 16, 6), uint32] */;
  %450 = shape_of(%var_1078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%var_1078, dtype="uint32") /* ty=Tensor[(5, 16, 6), uint32] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %453 = bitwise_xor(%451, %452) /* ty=Tensor[(5, 16, 6), uint32] */;
  (%453,)
}

def @func_3448(%var_3412: Tensor[(9, 1, 4), float32]) -> (Tensor[(9, 1, 4), float32], Tensor[(5, 16, 6), uint32], Tensor[(480), uint32], Tensor[(594), uint16], Tensor[(288), float32], Tensor[(594), uint16]) {
  %454 = cast(%var_3412, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %455 = cast(meta[relay.Constant][39] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %456 = cast(meta[relay.Constant][39] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %457 = reshape(%455, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint32] */;
  %458 = reshape(%456, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint32] */;
  %459 = @func_1085(%457, %458) /* ty=(Tensor[(5, 16, 6), uint32],) */;
  %460 = cast(meta[relay.Constant][40] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %461 = cast(meta[relay.Constant][41] /* ty=Tensor[(594), uint16] */, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %462 = reshape(%460, newshape=[9, 2, 16]) /* ty=Tensor[(9, 2, 16), float32] */;
  %463 = reshape(%461, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %464 = @func_3294(%462, %463) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(1890), int16], Tensor[(594), uint16], Tensor[(4, 12, 12), float32], Tensor[(576), int8], Tensor[(9, 2, 16), float32]) */;
  %465 = tan(%454) /* ty=Tensor[(9, 1, 4), float32] */;
  %466 = %459.0;
  %467 = %464.2;
  (%465, %466, meta[relay.Constant][39] /* ty=Tensor[(480), uint32] */, %467, meta[relay.Constant][40] /* ty=Tensor[(288), float32] */, meta[relay.Constant][41] /* ty=Tensor[(594), uint16] */)
}

def @func_6042(%var_6037: int8) -> Tensor[(11, 14, 10), int8] {
  %468 = cast(%var_6037, dtype="int8") /* ty=int8 */;
  %469 = cast(meta[relay.Constant][42] /* ty=Tensor[(11, 14, 10), int8] */, dtype="int8") /* ty=Tensor[(11, 14, 10), int8] */;
  bitwise_xor(%468, %469) /* ty=Tensor[(11, 14, 10), int8] */
}

def @func_7576() -> (Tensor[(14, 9, 14), bool], Tensor[(14, 9, 14), bool]) {
  %470 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %471 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %472 = %470.0;
  %473 = %471.0;
  (%472, %473)
}

def @func_5490(%var_5471: Tensor[(1, 40), float64], %var_5472: int32, %var_5473: Tensor[(13), int32], %var_5476: Tensor[(14, 9, 14), float32]) -> (Tensor[(13), int32], Tensor[(1, 40), float64], int32, Tensor[(13), int32], Tensor[(14, 9, 14), int32], Tensor[(14, 9, 14), float64], Tensor[(14, 9, 14), bool]) {
  %474 = cast(%var_5471, dtype="float64") /* ty=Tensor[(1, 40), float64] */;
  %475 = cast(%var_5472, dtype="int32") /* ty=int32 */;
  %476 = cast(%var_5473, dtype="int32") /* ty=Tensor[(13), int32] */;
  %477 = reshape(%474, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), float64] */;
  %478 = reshape(%475, newshape=[]) /* ty=int32 */;
  %479 = reshape(%476, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %480 = @func_856(%477, %478, %479) /* ty=(Tensor[(1, 8, 5), float64], Tensor[(13, 1), int32], int32, Tensor[(13), int32]) */;
  %481 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(14, 9, 14), float32] */;
  %483 = exp(%482) /* ty=Tensor[(14, 9, 14), float32] */;
  %484 = cast(%var_5476, dtype="int32") /* ty=Tensor[(14, 9, 14), int32] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="int32") /* ty=Tensor[(14, 9, 14), int32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %488 = cast(%483, dtype="float64") /* ty=Tensor[(14, 9, 14), float64] */;
  %489 = %480.3;
  %490 = bitwise_xor(%486, %487) /* ty=Tensor[(14, 9, 14), int32] */;
  %491 = atanh(%488) /* ty=Tensor[(14, 9, 14), float64] */;
  %492 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
  (%489, %var_5471, %var_5472, %var_5473, %490, %491, %492)
}

def @func_6498() -> Tensor[(14, 9, 14), bool] {
  @func_5689() /* ty=Tensor[(14, 9, 14), bool] */
}

def @func_6839(%var_6821: Tensor[(1890), int16]) -> (Tensor[(1890), float64], Tensor[(1890), int16]) {
  %493 = @func_6680() /* ty=(Tensor[(1890), int16],) */;
  %494 = %493.0;
  %495 = cast(%var_6821, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(1), int32] */;
  %497 = cast(%494, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?), float64] */;
  %499 = @func_6596() /* ty=(Tensor[(1890), int16],) */;
  %500 = floor_divide(%497, %498) /* ty=Tensor[(1890), float64] */;
  %501 = %499.0;
  (%500, %501)
}

def @func_7818() -> (Tensor[(13), int32], Tensor[(14, 9, 14), bool]) {
  %502 = @func_7071() /* ty=Tensor[(13), int32] */;
  %503 = @func_6498() /* ty=Tensor[(14, 9, 14), bool] */;
  (%502, %503)
}

def @func_4395(%var_4380: Tensor[(11, 7, 1), uint32], %var_4381: Tensor[(11, 7, 14), uint32]) -> (Tensor[(11, 7, 14), uint32], Tensor[(13, 16, 16), bool], Tensor[(208), uint64], Tensor[(8, 416), uint64]) {
  %504 = cast(%var_4380, dtype="uint32") /* ty=Tensor[(11, 7, 1), uint32] */;
  %505 = cast(%var_4381, dtype="uint32") /* ty=Tensor[(11, 7, 14), uint32] */;
  %506 = cast(meta[relay.Constant][43] /* ty=Tensor[(208), uint64] */, dtype="uint64") /* ty=Tensor[(208), uint64] */;
  %507 = cast(meta[relay.Constant][44] /* ty=Tensor[(8, 416), uint64] */, dtype="uint64") /* ty=Tensor[(8, 416), uint64] */;
  %508 = reshape(%506, newshape=[13, 1, 16]) /* ty=Tensor[(13, 1, 16), uint64] */;
  %509 = reshape(%507, newshape=[13, 16, 16]) /* ty=Tensor[(13, 16, 16), uint64] */;
  %510 = bitwise_xor(%504, %505) /* ty=Tensor[(11, 7, 14), uint32] */;
  %511 = @func_2967(%508, %509) /* ty=Tensor[(13, 16, 16), bool] */;
  (%510, %511, meta[relay.Constant][43] /* ty=Tensor[(208), uint64] */, meta[relay.Constant][44] /* ty=Tensor[(8, 416), uint64] */)
}

def @func_5593() -> (Tensor[(14, 9, 14), bool],) {
  %512 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
  (%512,)
}

def @func_6137(%var_6134: Tensor[(1040), float64]) -> (Tensor[(14, 9, 14), bool], Tensor[(10, 8, 13), float64], Tensor[(1040), float64]) {
  %513 = cast(%var_6134, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %514 = reshape(%513, newshape=[10, 8, 13]) /* ty=Tensor[(10, 8, 13), float64] */;
  %515 = @func_1793(%514) /* ty=(Tensor[(10, 8, 13), float64],) */;
  %516 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
  %517 = %515.0;
  (%516, %517, %var_6134)
}

def @func_8690() -> (Tensor[(288), float32],) {
  %518 = @func_5722() /* ty=(Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) */;
  %519 = %518.2;
  (%519,)
}

def @func_7900() -> (Tensor[(3, 15, 3), bool],) {
  %520 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 15, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
  %521 = atanh(%520) /* ty=Tensor[(3, 15, 3), float64] */;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
  %523 = cos(%522) /* ty=Tensor[(3, 15, 3), float64] */;
  %524 = cast(%521, dtype="bool") /* ty=Tensor[(3, 15, 3), bool] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="bool") /* ty=Tensor[(3, 15, 3), bool] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %528 = less(%526, %527) /* ty=Tensor[(3, 15, 3), bool] */;
  (%528,)
}

def @func_7709(%var_7629: Tensor[(36, 16), int8], %var_7640: Tensor[(36, 16), int8], %var_7701: Tensor[(1, 13), int32]) -> (Tensor[(14, 9, 14), float32], Tensor[(36, 16), float32], Tensor[(1890), int16], Tensor[(5, 16, 6), uint32], Tensor[(480), uint32], Tensor[(594), uint64], Tensor[(14, 9, 14), bool], Tensor[(13, 1), int32], int32, Tensor[(1, 13), int32], Tensor[(14, 9, 14), bool], Tensor[(36, 16), float64]) {
  %529 = cast(%var_7640, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
  %530 = shape_of(%var_7629, dtype="int32") /* ty=Tensor[(2), int32] */;
  %531 = cast(%var_7629, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %533 = @func_6680() /* ty=(Tensor[(1890), int16],) */;
  %534 = cast(meta[relay.Constant][46] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %535 = cast(meta[relay.Constant][46] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %536 = reshape(%534, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint32] */;
  %537 = reshape(%535, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint32] */;
  %538 = @func_1085(%536, %537) /* ty=(Tensor[(5, 16, 6), uint32],) */;
  %539 = cast(%var_7629, dtype="int8") /* ty=Tensor[(36, 16), int8] */;
  %540 = cast(meta[relay.Constant][47] /* ty=Tensor[(594), uint16] */, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %541 = reshape(%539, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), int8] */;
  %542 = reshape(%540, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %543 = @func_3184(%541, %542) /* ty=(Tensor[(4, 12, 12), float32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */;
  %544 = %543.1;
  %545 = cast(%544, dtype="uint64") /* ty=Tensor[(6, 11, 9), uint64] */;
  %546 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(594), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %547 = cast(meta[relay.Constant][47] /* ty=Tensor[(594), uint16] */, dtype="uint64") /* ty=Tensor[(594), uint64] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %549 = @func_6576() /* ty=(Tensor[(14, 9, 14), bool], Tensor[(594, ?), int16], Tensor[(594), float32]) */;
  %550 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %551 = cast(%var_7701, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
  %552 = reshape(%550, newshape=[]) /* ty=int32 */;
  %553 = reshape(%551, newshape=[13, 1]) /* ty=Tensor[(13, 1), int32] */;
  %554 = @func_119(%552, %553) /* ty=(Tensor[(13, 1), int32],) */;
  %555 = @func_6722() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %556 = cast(%var_7640, dtype="float64") /* ty=Tensor[(36, 16), float64] */;
  %557 = @func_7531() /* ty=Tensor[(14, 9, 14), float32] */;
  %558 = floor_divide(%531, %532) /* ty=Tensor[(36, 16), float32] */;
  %559 = %533.0;
  %560 = %538.0;
  %561 = multiply(%547, %548) /* ty=Tensor[(594), uint64] */;
  %562 = %549.0;
  %563 = %554.0;
  %564 = %555.0;
  %565 = erf(%556) /* ty=Tensor[(36, 16), float64] */;
  (%557, %558, %559, %560, meta[relay.Constant][46] /* ty=Tensor[(480), uint32] */, %561, %562, %563, -10 /* ty=int32 */, %var_7701, %564, %565)
}

def @func_8034(%var_8017: Tensor[(140), float32]) -> (Tensor[(13), int32], Tensor[(7, 2, 10), float32], Tensor[(140), float32], int32, Tensor[(198, 3), uint16], Tensor[(40, 1), float64]) {
  %566 = cast(%var_8017, dtype="float32") /* ty=Tensor[(140), float32] */;
  %567 = cast(meta[relay.Constant][48] /* ty=Tensor[(40, 1), float64] */, dtype="float64") /* ty=Tensor[(40, 1), float64] */;
  %568 = cast(-3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %569 = @func_7502() /* ty=Tensor[(13), int32] */;
  %570 = cast(%569, dtype="int32") /* ty=Tensor[(13), int32] */;
  %571 = cast(meta[relay.Constant][49] /* ty=Tensor[(198, 3), uint16] */, dtype="uint16") /* ty=Tensor[(198, 3), uint16] */;
  %572 = reshape(%566, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float32] */;
  %573 = reshape(%567, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %574 = reshape(%568, newshape=[]) /* ty=int32 */;
  %575 = reshape(%570, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %576 = reshape(%571, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %577 = @func_2652(%572, %573, %574, %575, %576) /* ty=(Tensor[(7, 2, 10), float32], int32, Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */;
  %578 = cast(meta[relay.Constant][48] /* ty=Tensor[(40, 1), float64] */, dtype="float64") /* ty=Tensor[(40, 1), float64] */;
  %579 = %577.0;
  %580 = rsqrt(%578) /* ty=Tensor[(40, 1), float64] */;
  (%569, %579, %var_8017, -3 /* ty=int32 */, meta[relay.Constant][49] /* ty=Tensor[(198, 3), uint16] */, %580)
}

def @func_6576() -> (Tensor[(14, 9, 14), bool], Tensor[(594, ?), int16], Tensor[(594), float32]) {
  %581 = @func_5778() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %582 = cast(meta[relay.Constant][50] /* ty=Tensor[(594, 1), uint16] */, dtype="uint16") /* ty=Tensor[(594, 1), uint16] */;
  %583 = reshape(%582, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %584 = @func_329(%583) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(594), uint16], Tensor[(6, 11, 9), uint16], Tensor[(3, 16, 10), float32], Tensor[(6, 11, 9), uint16]) */;
  %585 = %584.1;
  %586 = cast(%585, dtype="int16") /* ty=Tensor[(594), int16] */;
  %587 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(594, 1), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %588 = cast(meta[relay.Constant][50] /* ty=Tensor[(594, 1), uint16] */, dtype="int16") /* ty=Tensor[(594, 1), int16] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %590 = cast(meta[relay.Constant][50] /* ty=Tensor[(594, 1), uint16] */, dtype="float32") /* ty=Tensor[(594, 1), float32] */;
  %591 = shape_of(%585, dtype="int32") /* ty=Tensor[(1), int32] */;
  %592 = cast(%585, dtype="float32") /* ty=Tensor[(594), float32] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?), float32] */;
  %594 = %581.0;
  %595 = subtract(%588, %589) /* ty=Tensor[(594, ?), int16] */;
  %596 = mod(%592, %593) /* ty=Tensor[(594), float32] */;
  (%594, %595, %596)
}

def @main() -> Tensor[(14, 6, 7), float32] {
  %597 = cast(meta[relay.Constant][51] /* ty=Tensor[(14, 6, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 6, 7), float32] */;
  asinh(%597) /* ty=Tensor[(14, 6, 7), float32] */
}

def @func_3184(%var_3111: Tensor[(4, 12, 12), int8], %var_3153: Tensor[(594), uint16]) -> (Tensor[(4, 12, 12), float32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) {
  %598 = cast(meta[relay.Constant][52] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %599 = cast(%var_3111, dtype="int8") /* ty=Tensor[(4, 12, 12), int8] */;
  %600 = bitwise_xor(%598, %599) /* ty=Tensor[(4, 12, 12), int8] */;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(4, 12, 12), float32] */;
  %602 = cast(%var_3153, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %603 = reshape(%602, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), uint16] */;
  %604 = @func_41(%603) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */;
  %605 = exp(%601) /* ty=Tensor[(4, 12, 12), float32] */;
  %606 = %604.0;
  (%605, %606, %var_3153)
}

def @func_1761(%var_1745: Tensor[(9, 14, 15), int16], %var_1755: Tensor[(594), uint16]) -> (Tensor[(9, 14, 15), int16], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) {
  %607 = cast(%var_1745, dtype="int16") /* ty=Tensor[(9, 14, 15), int16] */;
  %608 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(9, 14, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(meta[relay.Constant][53] /* ty=Tensor[(9, 14, 15), int16] */, dtype="int16") /* ty=Tensor[(9, 14, 15), int16] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %611 = cast(%var_1755, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %612 = reshape(%611, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %613 = @func_329(%612) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(594), uint16], Tensor[(6, 11, 9), uint16], Tensor[(3, 16, 10), float32], Tensor[(6, 11, 9), uint16]) */;
  %614 = subtract(%609, %610) /* ty=Tensor[(9, 14, 15), int16] */;
  %615 = %613.4;
  (%614, %615, %var_1755)
}

def @func_7877() -> (Tensor[(13), int32], Tensor[(14, 9, 14), float64]) {
  %616 = @func_6184() /* ty=(Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) */;
  %617 = @func_7818() /* ty=(Tensor[(13), int32], Tensor[(14, 9, 14), bool]) */;
  %618 = %617.1;
  %619 = cast(%618, dtype="float64") /* ty=Tensor[(14, 9, 14), float64] */;
  %620 = %616.1;
  %621 = asin(%619) /* ty=Tensor[(14, 9, 14), float64] */;
  (%620, %621)
}

def @func_6770(%var_6728: Tensor[(16, 4, 10), int8], %var_6761: Tensor[(1, 77), uint32]) -> (Tensor[(16, 4, 10), uint16], Tensor[(14, 9, 14), int64], Tensor[(1764), bool], Tensor[(16, 4, 10), float32], Tensor[(11, 7, 14), uint32], Tensor[(1, 77), uint32], Tensor[(1078), uint32]) {
  %622 = cast(%var_6728, dtype="int8") /* ty=Tensor[(16, 4, 10), int8] */;
  %623 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(16, 4, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(meta[relay.Constant][54] /* ty=Tensor[(16, 4, 10), int8] */, dtype="int8") /* ty=Tensor[(16, 4, 10), int8] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %626 = multiply(%624, %625) /* ty=Tensor[(16, 4, 10), int8] */;
  %627 = cast(%626, dtype="uint16") /* ty=Tensor[(16, 4, 10), uint16] */;
  %628 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(16, 4, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(meta[relay.Constant][54] /* ty=Tensor[(16, 4, 10), int8] */, dtype="uint16") /* ty=Tensor[(16, 4, 10), uint16] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %631 = cast(meta[relay.Constant][55] /* ty=Tensor[(1764), bool] */, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %632 = reshape(%631, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), bool] */;
  %633 = cast(%var_6728, dtype="float32") /* ty=Tensor[(16, 4, 10), float32] */;
  %634 = cast(%var_6761, dtype="uint32") /* ty=Tensor[(1, 77), uint32] */;
  %635 = cast(meta[relay.Constant][56] /* ty=Tensor[(1078), uint32] */, dtype="uint32") /* ty=Tensor[(1078), uint32] */;
  %636 = reshape(%634, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), uint32] */;
  %637 = reshape(%635, newshape=[11, 7, 14]) /* ty=Tensor[(11, 7, 14), uint32] */;
  %638 = @func_4395(%636, %637) /* ty=(Tensor[(11, 7, 14), uint32], Tensor[(13, 16, 16), bool], Tensor[(208), uint64], Tensor[(8, 416), uint64]) */;
  %639 = bitwise_or(%629, %630) /* ty=Tensor[(16, 4, 10), uint16] */;
  %640 = @func_5833(%632) /* ty=Tensor[(14, 9, 14), int64] */;
  %641 = rsqrt(%633) /* ty=Tensor[(16, 4, 10), float32] */;
  %642 = %638.0;
  (%639, %640, meta[relay.Constant][55] /* ty=Tensor[(1764), bool] */, %641, %642, %var_6761, meta[relay.Constant][56] /* ty=Tensor[(1078), uint32] */)
}

def @func_8431() -> Tensor[(14, 9, 14), bool] {
  @func_6498() /* ty=Tensor[(14, 9, 14), bool] */
}

def @func_8491() -> (Tensor[(14, 9, 14), float64],) {
  %643 = @func_5722() /* ty=(Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) */;
  %644 = %643.0;
  (%644,)
}

def @func_6207() -> (Tensor[(14, 9, 14), bool],) {
  %645 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %646 = %645.0;
  (%646,)
}

def @func_6866(%var_6853: int64) -> (Tensor[(14, 4, 13), int64], Tensor[(14, 9, 14), bool]) {
  %647 = cast(%var_6853, dtype="int64") /* ty=int64 */;
  %648 = cast(meta[relay.Constant][57] /* ty=Tensor[(14, 4, 13), int64] */, dtype="int64") /* ty=Tensor[(14, 4, 13), int64] */;
  %649 = @func_5778() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %650 = multiply(%647, %648) /* ty=Tensor[(14, 4, 13), int64] */;
  %651 = %649.0;
  (%650, %651)
}

def @func_41(%var_23: Tensor[(6, 11, 9), uint16]) -> (Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) {
  %652 = cast(meta[relay.Constant][59] /* ty=Tensor[(6, 11, 9), uint16] */, dtype="uint16") /* ty=Tensor[(6, 11, 9), uint16] */;
  %653 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(6, 11, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(meta[relay.Constant][58] /* ty=Tensor[(6, 11, 9), uint16] */, dtype="uint16") /* ty=Tensor[(6, 11, 9), uint16] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %656 = cast(%var_23, dtype="int8") /* ty=Tensor[(6, 11, 9), int8] */;
  %657 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(6, 11, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(meta[relay.Constant][58] /* ty=Tensor[(6, 11, 9), uint16] */, dtype="int8") /* ty=Tensor[(6, 11, 9), int8] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %660 = bitwise_and(%654, %655) /* ty=Tensor[(6, 11, 9), uint16] */;
  %661 = multiply(%658, %659) /* ty=Tensor[(6, 11, 9), int8] */;
  (%660, %661)
}

def @func_8156() -> (Tensor[(14, 9, 14), bool],) {
  %662 = @func_8107() /* ty=(Tensor[(14, 9, 14), bool], Tensor[(1890), bool]) */;
  %663 = %662.0;
  (%663,)
}

def @func_6640(%var_6622: Tensor[(10, 4, 1), bool], %var_6623: Tensor[(10, 4, 1), bool]) -> (Tensor[(10, 4, ?), bool], Tensor[(10, 4, 1), float64]) {
  %664 = cast(%var_6623, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
  %665 = shape_of(%var_6622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%var_6622, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %668 = cast(%var_6623, dtype="float64") /* ty=Tensor[(10, 4, 1), float64] */;
  %669 = logical_and(%666, %667) /* ty=Tensor[(10, 4, ?), bool] */;
  %670 = acosh(%668) /* ty=Tensor[(10, 4, 1), float64] */;
  (%669, %670)
}

def @func_8195(%var_8172: Tensor[(15, 9, 9), int32], %var_8173: Tensor[(15, 9, 9), int32]) -> (Tensor[(15, 9, 9), int16], Tensor[(14, 9, 14), bool]) {
  %671 = cast(%var_8173, dtype="int32") /* ty=Tensor[(15, 9, 9), int32] */;
  %672 = shape_of(%var_8172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%var_8172, dtype="int32") /* ty=Tensor[(15, 9, 9), int32] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %675 = bitwise_xor(%673, %674) /* ty=Tensor[(15, 9, 9), int32] */;
  %676 = cast(%675, dtype="int16") /* ty=Tensor[(15, 9, 9), int16] */;
  %677 = shape_of(%var_8173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_8173, dtype="int16") /* ty=Tensor[(15, 9, 9), int16] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %680 = @func_7979() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %681 = bitwise_and(%678, %679) /* ty=Tensor[(15, 9, 9), int16] */;
  %682 = %680.0;
  (%681, %682)
}

def @func_7131() -> Tensor[(13), int32] {
  @func_7071() /* ty=Tensor[(13), int32] */
}

def @func_6596() -> (Tensor[(1890), int16],) {
  %683 = @func_5722() /* ty=(Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) */;
  %684 = %683.1;
  (%684,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2971(%var_2969: Tensor[(13, 1, 16), uint64], %var_2970: Tensor[(13, 16, 16), uint64]) -> Tensor[(13, 16, 16), bool] {
  @func_2967(%var_2969, %var_2970) /* ty=Tensor[(13, 16, 16), bool] */
}

def @func_7385(%var_7383: Tensor[(8, 2, 8), float32], %var_7384: Tensor[(140, 1), float32]) -> (Tensor[(8, 2, 8), float32], Tensor[(6, 11, 9), uint16], Tensor[(140, 1), float32], Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(594), uint16]) {
  %14 = fn (%var_7348: Tensor[(8, 2, 8), float32], %var_7358: Tensor[(140, 1), float32]) -> (Tensor[(8, 2, 8), float32], Tensor[(6, 11, 9), uint16], Tensor[(140, 1), float32], Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(594), uint16]) {
    %0 = cast(%var_7348, dtype="float32") /* ty=Tensor[(8, 2, 8), float32] */;
    %1 = cast(%var_7358, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
    %3 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(13), int32] */, dtype="int32") /* ty=Tensor[(13), int32] */;
    %5 = cast(meta[relay.Constant][2] /* ty=Tensor[(594), uint16] */, dtype="uint16") /* ty=Tensor[(594), uint16] */;
    %6 = reshape(%1, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float32] */;
    %7 = reshape(%2, newshape=[40]) /* ty=Tensor[(40), float64] */;
    %8 = reshape(%3, newshape=[]) /* ty=int32 */;
    %9 = reshape(%4, newshape=[13]) /* ty=Tensor[(13), int32] */;
    %10 = reshape(%5, newshape=[594]) /* ty=Tensor[(594), uint16] */;
    %11 = @func_2652(%6, %7, %8, %9, %10) /* ty=(Tensor[(7, 2, 10), float32], int32, Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */;
    %12 = cos(%0) /* ty=Tensor[(8, 2, 8), float32] */;
    %13 = %11.5;
    (%12, %13, %var_7358, meta[relay.Constant][0] /* ty=Tensor[(40), float64] */, -1 /* ty=int32 */, meta[relay.Constant][1] /* ty=Tensor[(13), int32] */, meta[relay.Constant][2] /* ty=Tensor[(594), uint16] */)
  };
  %14(%var_7383, %var_7384) /* ty=(Tensor[(8, 2, 8), float32], Tensor[(6, 11, 9), uint16], Tensor[(140, 1), float32], Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(594), uint16]) */
}

def @func_8216() -> Tensor[(14, 9, 14), uint32] {
  %15 = @func_6498() /* ty=Tensor[(14, 9, 14), bool] */;
  %16 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 9, 14), bool] */, dtype="uint32") /* ty=Tensor[(14, 9, 14), uint32] */;
  %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%15, dtype="uint32") /* ty=Tensor[(14, 9, 14), uint32] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%18, %19) /* ty=Tensor[(14, 9, 14), uint32] */
}

def @func_43(%var_42: Tensor[(6, 11, 9), uint16]) -> (Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) {
  %30 = fn (%var_23: Tensor[(6, 11, 9), uint16]) -> (Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) {
    %20 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 11, 9), uint16] */, dtype="uint16") /* ty=Tensor[(6, 11, 9), uint16] */;
    %21 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(6, 11, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %22 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 11, 9), uint16] */, dtype="uint16") /* ty=Tensor[(6, 11, 9), uint16] */;
    %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %24 = cast(%var_23, dtype="int8") /* ty=Tensor[(6, 11, 9), int8] */;
    %25 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(6, 11, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %26 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 11, 9), uint16] */, dtype="int8") /* ty=Tensor[(6, 11, 9), int8] */;
    %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %28 = bitwise_and(%22, %23) /* ty=Tensor[(6, 11, 9), uint16] */;
    %29 = multiply(%26, %27) /* ty=Tensor[(6, 11, 9), int8] */;
    (%28, %29)
  };
  %30(%var_42) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */
}

def @func_3076(%var_3071: Tensor[(9, 6, 4), float64]) -> Tensor[(9, 6, 4), float64] {
  %31 = cast(%var_3071, dtype="float64") /* ty=Tensor[(9, 6, 4), float64] */;
  acosh(%31) /* ty=Tensor[(9, 6, 4), float64] */
}

def @func_6500() -> Tensor[(14, 9, 14), bool] {
  @func_6498() /* ty=Tensor[(14, 9, 14), bool] */
}

def @func_3448(%var_3412: Tensor[(9, 1, 4), float32]) -> (Tensor[(9, 1, 4), float32], Tensor[(5, 16, 6), uint32], Tensor[(480), uint32], Tensor[(594), uint16], Tensor[(288), float32], Tensor[(594), uint16]) {
  %32 = cast(%var_3412, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %33 = cast(meta[relay.Constant][6] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %34 = cast(meta[relay.Constant][6] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %35 = reshape(%33, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint32] */;
  %36 = reshape(%34, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint32] */;
  %37 = @func_1085(%35, %36) /* ty=(Tensor[(5, 16, 6), uint32],) */;
  %38 = cast(meta[relay.Constant][7] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %39 = cast(meta[relay.Constant][8] /* ty=Tensor[(594), uint16] */, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %40 = reshape(%38, newshape=[9, 2, 16]) /* ty=Tensor[(9, 2, 16), float32] */;
  %41 = reshape(%39, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %42 = @func_3294(%40, %41) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(1890), int16], Tensor[(594), uint16], Tensor[(4, 12, 12), float32], Tensor[(576), int8], Tensor[(9, 2, 16), float32]) */;
  %43 = tan(%32) /* ty=Tensor[(9, 1, 4), float32] */;
  %44 = %37.0;
  %45 = %42.2;
  (%43, %44, meta[relay.Constant][6] /* ty=Tensor[(480), uint32] */, %45, meta[relay.Constant][7] /* ty=Tensor[(288), float32] */, meta[relay.Constant][8] /* ty=Tensor[(594), uint16] */)
}

def @func_8493() -> (Tensor[(14, 9, 14), float64],) {
  @func_8491() /* ty=(Tensor[(14, 9, 14), float64],) */
}

def @func_7954(%var_7952: Tensor[(6, 10, 16), float32]) -> (Tensor[(6, 10, 16), float32], Tensor[(14, 9, 14), int64], Tensor[(1764), bool]) {
  @func_7951(%var_7952) /* ty=(Tensor[(6, 10, 16), float32], Tensor[(14, 9, 14), int64], Tensor[(1764), bool]) */
}

def @func_1089(%var_1087: Tensor[(5, 16, 6), uint32], %var_1088: Tensor[(5, 16, 6), uint32]) -> (Tensor[(5, 16, 6), uint32],) {
  @func_1085(%var_1087, %var_1088) /* ty=(Tensor[(5, 16, 6), uint32],) */
}

def @func_5515(%var_5513: Tensor[(33), float32], %var_5514: Tensor[(13, 1), int32]) -> (Tensor[(14, 9, 14), bool], Tensor[(11, 3, 1), float32], float32, Tensor[(33), float32], Tensor[(40), float64], Tensor[(13, 1), int32]) {
  %57 = fn (%var_5507: Tensor[(33), float32], %var_5509: Tensor[(13, 1), int32]) -> (Tensor[(14, 9, 14), bool], Tensor[(11, 3, 1), float32], float32, Tensor[(33), float32], Tensor[(40), float64], Tensor[(13, 1), int32]) {
    %46 = cast(6.67475f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %47 = cast(%var_5507, dtype="float32") /* ty=Tensor[(33), float32] */;
    %48 = cast(meta[relay.Constant][9] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
    %49 = cast(%var_5509, dtype="int32") /* ty=Tensor[(13, 1), int32] */;
    %50 = reshape(%46, newshape=[]) /* ty=float32 */;
    %51 = reshape(%47, newshape=[11, 3, 1]) /* ty=Tensor[(11, 3, 1), float32] */;
    %52 = reshape(%48, newshape=[40]) /* ty=Tensor[(40), float64] */;
    %53 = reshape(%49, newshape=[13]) /* ty=Tensor[(13), int32] */;
    %54 = @func_1735(%50, %51, %52, %53) /* ty=(Tensor[(11, 3, 1), float32], Tensor[(1, 8, 5), float64], Tensor[(40), float64], Tensor[(13), int32]) */;
    %55 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
    %56 = %54.0;
    (%55, %56, 6.67475f /* ty=float32 */, %var_5507, meta[relay.Constant][9] /* ty=Tensor[(40), float64] */, %var_5509)
  };
  %57(%var_5513, %var_5514) /* ty=(Tensor[(14, 9, 14), bool], Tensor[(11, 3, 1), float32], float32, Tensor[(33), float32], Tensor[(40), float64], Tensor[(13, 1), int32]) */
}

def @func_7035(%var_7033: Tensor[(6, 13, 6), float32]) -> (Tensor[(6, 13, 6), float32],) {
  @func_7032(%var_7033) /* ty=(Tensor[(6, 13, 6), float32],) */
}

def @func_6267(%var_6264: Tensor[(11, 2, 9), float32], %var_6265: Tensor[(140), int64], %var_6266: Tensor[(13), int32]) -> (Tensor[(6, 11, 9), uint16], int64, Tensor[(140), int64], Tensor[(13), int32], Tensor[(11, 7, 14), uint32], Tensor[(77), uint32], Tensor[(7, 154), uint32], Tensor[(11, 2, 9), int64]) {
  %84 = fn (%var_6236: Tensor[(11, 2, 9), float32], %var_6244: Tensor[(140), int64], %var_6245: Tensor[(13), int32]) -> (Tensor[(6, 11, 9), uint16], int64, Tensor[(140), int64], Tensor[(13), int32], Tensor[(11, 7, 14), uint32], Tensor[(77), uint32], Tensor[(7, 154), uint32], Tensor[(11, 2, 9), int64]) {
    %58 = cast(1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %59 = cast(%var_6244, dtype="int64") /* ty=Tensor[(140), int64] */;
    %60 = cast(%var_6245, dtype="int32") /* ty=Tensor[(13), int32] */;
    %61 = reshape(%58, newshape=[]) /* ty=int64 */;
    %62 = reshape(%59, newshape=[1, 14, 10]) /* ty=Tensor[(1, 14, 10), int64] */;
    %63 = reshape(%60, newshape=[13]) /* ty=Tensor[(13), int32] */;
    %64 = @func_785(%61, %62, %63) /* ty=(Tensor[(1, 14, 10), bool], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32], Tensor[(13), int32], Tensor[(1, 594), float64], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32]) */;
    %65 = cast(meta[relay.Constant][10] /* ty=Tensor[(77), uint32] */, dtype="uint32") /* ty=Tensor[(77), uint32] */;
    %66 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 154), uint32] */, dtype="uint32") /* ty=Tensor[(7, 154), uint32] */;
    %67 = reshape(%65, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), uint32] */;
    %68 = reshape(%66, newshape=[11, 7, 14]) /* ty=Tensor[(11, 7, 14), uint32] */;
    %69 = @func_4395(%67, %68) /* ty=(Tensor[(11, 7, 14), uint32], Tensor[(13, 16, 16), bool], Tensor[(208), uint64], Tensor[(8, 416), uint64]) */;
    %70 = cast(%var_6236, dtype="float32") /* ty=Tensor[(11, 2, 9), float32] */;
    %71 = asinh(%70) /* ty=Tensor[(11, 2, 9), float32] */;
    %72 = cast(%71, dtype="bool") /* ty=Tensor[(11, 2, 9), bool] */;
    %73 = shape_of(%var_6236, dtype="int32") /* ty=Tensor[(3), int32] */;
    %74 = cast(%var_6236, dtype="bool") /* ty=Tensor[(11, 2, 9), bool] */;
    %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %76 = greater_equal(%74, %75) /* ty=Tensor[(11, 2, 9), bool] */;
    %77 = cast(%76, dtype="int64") /* ty=Tensor[(11, 2, 9), int64] */;
    %78 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
    %79 = cast(%71, dtype="int64") /* ty=Tensor[(11, 2, 9), int64] */;
    %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %81 = %64.5;
    %82 = %69.0;
    %83 = add(%79, %80) /* ty=Tensor[(11, 2, 9), int64] */;
    (%81, 1 /* ty=int64 */, %var_6244, %var_6245, %82, meta[relay.Constant][10] /* ty=Tensor[(77), uint32] */, meta[relay.Constant][11] /* ty=Tensor[(7, 154), uint32] */, %83)
  };
  %84(%var_6264, %var_6265, %var_6266) /* ty=(Tensor[(6, 11, 9), uint16], int64, Tensor[(140), int64], Tensor[(13), int32], Tensor[(11, 7, 14), uint32], Tensor[(77), uint32], Tensor[(7, 154), uint32], Tensor[(11, 2, 9), int64]) */
}

def @func_5722() -> (Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) {
  %85 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %86 = %85.0;
  %87 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 9, 14), bool] */, dtype="float64") /* ty=Tensor[(14, 9, 14), float64] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="float64") /* ty=Tensor[(14, 9, 14), float64] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %91 = cast(meta[relay.Constant][13] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %92 = cast(meta[relay.Constant][14] /* ty=Tensor[(594), uint16] */, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %93 = reshape(%91, newshape=[9, 2, 16]) /* ty=Tensor[(9, 2, 16), float32] */;
  %94 = reshape(%92, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %95 = @func_3294(%93, %94) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(1890), int16], Tensor[(594), uint16], Tensor[(4, 12, 12), float32], Tensor[(576), int8], Tensor[(9, 2, 16), float32]) */;
  %96 = power(%89, %90) /* ty=Tensor[(14, 9, 14), float64] */;
  %97 = %95.1;
  (%96, %97, meta[relay.Constant][13] /* ty=Tensor[(288), float32] */, meta[relay.Constant][14] /* ty=Tensor[(594), uint16] */)
}

def @func_7900() -> (Tensor[(3, 15, 3), bool],) {
  %98 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 15, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
  %99 = atanh(%98) /* ty=Tensor[(3, 15, 3), float64] */;
  %100 = cast(%99, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
  %101 = cos(%100) /* ty=Tensor[(3, 15, 3), float64] */;
  %102 = cast(%99, dtype="bool") /* ty=Tensor[(3, 15, 3), bool] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="bool") /* ty=Tensor[(3, 15, 3), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %106 = less(%104, %105) /* ty=Tensor[(3, 15, 3), bool] */;
  (%106,)
}

def @func_123(%var_121: int32, %var_122: Tensor[(13, 1), int32]) -> (Tensor[(13, 1), int32],) {
  @func_119(%var_121, %var_122) /* ty=(Tensor[(13, 1), int32],) */
}

def @func_5594() -> (Tensor[(14, 9, 14), bool],) {
  %108 = fn () -> (Tensor[(14, 9, 14), bool],) {
    %107 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
    (%107,)
  };
  %108() /* ty=(Tensor[(14, 9, 14), bool],) */
}

def @func_3079(%var_3077: Tensor[(9, 6, 4), float64]) -> Tensor[(9, 6, 4), float64] {
  @func_3076(%var_3077) /* ty=Tensor[(9, 6, 4), float64] */
}

def @func_7877() -> (Tensor[(13), int32], Tensor[(14, 9, 14), float64]) {
  %109 = @func_6184() /* ty=(Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) */;
  %110 = @func_7818() /* ty=(Tensor[(13), int32], Tensor[(14, 9, 14), bool]) */;
  %111 = %110.1;
  %112 = cast(%111, dtype="float64") /* ty=Tensor[(14, 9, 14), float64] */;
  %113 = %109.1;
  %114 = asin(%112) /* ty=Tensor[(14, 9, 14), float64] */;
  (%113, %114)
}

def @func_1047(%var_1033: Tensor[(7, 10, 11), int32], %var_1034: Tensor[(7, 10, 11), int32]) -> (Tensor[(7, 10, 11), int32],) {
  %115 = cast(%var_1034, dtype="int32") /* ty=Tensor[(7, 10, 11), int32] */;
  %116 = shape_of(%var_1033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%var_1033, dtype="int32") /* ty=Tensor[(7, 10, 11), int32] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %119 = subtract(%117, %118) /* ty=Tensor[(7, 10, 11), int32] */;
  (%119,)
}

def @func_5691() -> Tensor[(14, 9, 14), bool] {
  @func_5689() /* ty=Tensor[(14, 9, 14), bool] */
}

def @func_7791(%var_7790: Tensor[(3, 7, 10), int8]) -> (Tensor[(3, 7, 10), bool], Tensor[(14, 9, 14), float64]) {
  %126 = fn (%var_7775: Tensor[(3, 7, 10), int8]) -> (Tensor[(3, 7, 10), bool], Tensor[(14, 9, 14), float64]) {
    %120 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 7, 10), int8] */, dtype="bool") /* ty=Tensor[(3, 7, 10), bool] */;
    %121 = shape_of(%var_7775, dtype="int32") /* ty=Tensor[(3), int32] */;
    %122 = cast(%var_7775, dtype="bool") /* ty=Tensor[(3, 7, 10), bool] */;
    %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %124 = greater(%122, %123) /* ty=Tensor[(3, 7, 10), bool] */;
    %125 = @func_6344() /* ty=Tensor[(14, 9, 14), float64] */;
    (%124, %125)
  };
  %126(%var_7790) /* ty=(Tensor[(3, 7, 10), bool], Tensor[(14, 9, 14), float64]) */
}

def @func_7577() -> (Tensor[(14, 9, 14), bool], Tensor[(14, 9, 14), bool]) {
  %131 = fn () -> (Tensor[(14, 9, 14), bool], Tensor[(14, 9, 14), bool]) {
    %127 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
    %128 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
    %129 = %127.0;
    %130 = %128.0;
    (%129, %130)
  };
  %131() /* ty=(Tensor[(14, 9, 14), bool], Tensor[(14, 9, 14), bool]) */
}

def @func_7967() -> (Tensor[(4, 11, 15), bool],) {
  @func_7965() /* ty=(Tensor[(4, 11, 15), bool],) */
}

def @func_7951(%var_7922: Tensor[(6, 10, 16), float32]) -> (Tensor[(6, 10, 16), float32], Tensor[(14, 9, 14), int64], Tensor[(1764), bool]) {
  %132 = cast(%var_7922, dtype="float32") /* ty=Tensor[(6, 10, 16), float32] */;
  %133 = asin(%132) /* ty=Tensor[(6, 10, 16), float32] */;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(6, 10, 16), float32] */;
  %135 = cast(meta[relay.Constant][17] /* ty=Tensor[(1764), bool] */, dtype="bool") /* ty=Tensor[(1764), bool] */;
  %136 = reshape(%135, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), bool] */;
  %137 = log2(%134) /* ty=Tensor[(6, 10, 16), float32] */;
  %138 = @func_5833(%136) /* ty=Tensor[(14, 9, 14), int64] */;
  (%137, %138, meta[relay.Constant][17] /* ty=Tensor[(1764), bool] */)
}

def @func_119(%var_109: int32, %var_110: Tensor[(13, 1), int32]) -> (Tensor[(13, 1), int32],) {
  %139 = cast(%var_109, dtype="int32") /* ty=int32 */;
  %140 = cast(%var_110, dtype="int32") /* ty=Tensor[(13, 1), int32] */;
  %141 = bitwise_and(%139, %140) /* ty=Tensor[(13, 1), int32] */;
  (%141,)
}

def @func_6723() -> (Tensor[(14, 9, 14), bool],) {
  %144 = fn () -> (Tensor[(14, 9, 14), bool],) {
    %142 = @func_6207() /* ty=(Tensor[(14, 9, 14), bool],) */;
    %143 = %142.0;
    (%143,)
  };
  %144() /* ty=(Tensor[(14, 9, 14), bool],) */
}

def @func_7902() -> (Tensor[(3, 15, 3), bool],) {
  @func_7900() /* ty=(Tensor[(3, 15, 3), bool],) */
}

def @func_8248() -> Tensor[(14, 9, 14), bool] {
  %146 = fn () -> Tensor[(14, 9, 14), bool] {
    %145 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
    %145.0
  };
  %146() /* ty=Tensor[(14, 9, 14), bool] */
}

def @func_1085(%var_1078: Tensor[(5, 16, 6), uint32], %var_1079: Tensor[(5, 16, 6), uint32]) -> (Tensor[(5, 16, 6), uint32],) {
  %147 = cast(%var_1079, dtype="uint32") /* ty=Tensor[(5, 16, 6), uint32] */;
  %148 = shape_of(%var_1078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%var_1078, dtype="uint32") /* ty=Tensor[(5, 16, 6), uint32] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %151 = bitwise_xor(%149, %150) /* ty=Tensor[(5, 16, 6), uint32] */;
  (%151,)
}

def @func_7879() -> (Tensor[(13), int32], Tensor[(14, 9, 14), float64]) {
  @func_7877() /* ty=(Tensor[(13), int32], Tensor[(14, 9, 14), float64]) */
}

def @func_7132() -> Tensor[(13), int32] {
  %152 = fn () -> Tensor[(13), int32] {
    @func_7071() /* ty=Tensor[(13), int32] */
  };
  %152() /* ty=Tensor[(13), int32] */
}

def @func_8036(%var_8035: Tensor[(140), float32]) -> (Tensor[(13), int32], Tensor[(7, 2, 10), float32], Tensor[(140), float32], int32, Tensor[(198, 3), uint16], Tensor[(40, 1), float64]) {
  %168 = fn (%var_8017: Tensor[(140), float32]) -> (Tensor[(13), int32], Tensor[(7, 2, 10), float32], Tensor[(140), float32], int32, Tensor[(198, 3), uint16], Tensor[(40, 1), float64]) {
    %153 = cast(%var_8017, dtype="float32") /* ty=Tensor[(140), float32] */;
    %154 = cast(meta[relay.Constant][18] /* ty=Tensor[(40, 1), float64] */, dtype="float64") /* ty=Tensor[(40, 1), float64] */;
    %155 = cast(-3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %156 = @func_7502() /* ty=Tensor[(13), int32] */;
    %157 = cast(%156, dtype="int32") /* ty=Tensor[(13), int32] */;
    %158 = cast(meta[relay.Constant][19] /* ty=Tensor[(198, 3), uint16] */, dtype="uint16") /* ty=Tensor[(198, 3), uint16] */;
    %159 = reshape(%153, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float32] */;
    %160 = reshape(%154, newshape=[40]) /* ty=Tensor[(40), float64] */;
    %161 = reshape(%155, newshape=[]) /* ty=int32 */;
    %162 = reshape(%157, newshape=[13]) /* ty=Tensor[(13), int32] */;
    %163 = reshape(%158, newshape=[594]) /* ty=Tensor[(594), uint16] */;
    %164 = @func_2652(%159, %160, %161, %162, %163) /* ty=(Tensor[(7, 2, 10), float32], int32, Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */;
    %165 = cast(meta[relay.Constant][18] /* ty=Tensor[(40, 1), float64] */, dtype="float64") /* ty=Tensor[(40, 1), float64] */;
    %166 = %164.0;
    %167 = rsqrt(%165) /* ty=Tensor[(40, 1), float64] */;
    (%156, %166, %var_8017, -3 /* ty=int32 */, meta[relay.Constant][19] /* ty=Tensor[(198, 3), uint16] */, %167)
  };
  %168(%var_8035) /* ty=(Tensor[(13), int32], Tensor[(7, 2, 10), float32], Tensor[(140), float32], int32, Tensor[(198, 3), uint16], Tensor[(40, 1), float64]) */
}

def @func_2967(%var_2958: Tensor[(13, 1, 16), uint64], %var_2959: Tensor[(13, 16, 16), uint64]) -> Tensor[(13, 16, 16), bool] {
  %169 = cast(%var_2958, dtype="bool") /* ty=Tensor[(13, 1, 16), bool] */;
  %170 = cast(%var_2959, dtype="bool") /* ty=Tensor[(13, 16, 16), bool] */;
  less(%169, %170) /* ty=Tensor[(13, 16, 16), bool] */
}

def @func_4807(%var_4805: Tensor[(9, 8, 12), float32]) -> (Tensor[(9, 8, 12), bool],) {
  @func_4804(%var_4805) /* ty=(Tensor[(9, 8, 12), bool],) */
}

def @func_4534(%var_4532: int64) -> (Tensor[(1, 4, 2), int64],) {
  @func_4531(%var_4532) /* ty=(Tensor[(1, 4, 2), int64],) */
}

def @func_5982(%var_5980: Tensor[(14, 9, 14), bool]) -> (Tensor[(14, 9, 14), int64], Tensor[(9, 8, 12), bool], Tensor[(864), float32], Tensor[(14, 9, 14), float32]) {
  @func_5979(%var_5980) /* ty=(Tensor[(14, 9, 14), int64], Tensor[(9, 8, 12), bool], Tensor[(864), float32], Tensor[(14, 9, 14), float32]) */
}

def @func_1761(%var_1745: Tensor[(9, 14, 15), int16], %var_1755: Tensor[(594), uint16]) -> (Tensor[(9, 14, 15), int16], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) {
  %171 = cast(%var_1745, dtype="int16") /* ty=Tensor[(9, 14, 15), int16] */;
  %172 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(9, 14, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 14, 15), int16] */, dtype="int16") /* ty=Tensor[(9, 14, 15), int16] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %175 = cast(%var_1755, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %176 = reshape(%175, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %177 = @func_329(%176) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(594), uint16], Tensor[(6, 11, 9), uint16], Tensor[(3, 16, 10), float32], Tensor[(6, 11, 9), uint16]) */;
  %178 = subtract(%173, %174) /* ty=Tensor[(9, 14, 15), int16] */;
  %179 = %177.4;
  (%178, %179, %var_1755)
}

def @func_6596() -> (Tensor[(1890), int16],) {
  %180 = @func_5722() /* ty=(Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) */;
  %181 = %180.1;
  (%181,)
}

def @func_8198(%var_8196: Tensor[(15, 9, 9), int32], %var_8197: Tensor[(15, 9, 9), int32]) -> (Tensor[(15, 9, 9), int16], Tensor[(14, 9, 14), bool]) {
  %194 = fn (%var_8172: Tensor[(15, 9, 9), int32], %var_8173: Tensor[(15, 9, 9), int32]) -> (Tensor[(15, 9, 9), int16], Tensor[(14, 9, 14), bool]) {
    %182 = cast(%var_8173, dtype="int32") /* ty=Tensor[(15, 9, 9), int32] */;
    %183 = shape_of(%var_8172, dtype="int32") /* ty=Tensor[(3), int32] */;
    %184 = cast(%var_8172, dtype="int32") /* ty=Tensor[(15, 9, 9), int32] */;
    %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %186 = bitwise_xor(%184, %185) /* ty=Tensor[(15, 9, 9), int32] */;
    %187 = cast(%186, dtype="int16") /* ty=Tensor[(15, 9, 9), int16] */;
    %188 = shape_of(%var_8173, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(%var_8173, dtype="int16") /* ty=Tensor[(15, 9, 9), int16] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %191 = @func_7979() /* ty=(Tensor[(14, 9, 14), bool],) */;
    %192 = bitwise_and(%189, %190) /* ty=Tensor[(15, 9, 9), int16] */;
    %193 = %191.0;
    (%192, %193)
  };
  %194(%var_8196, %var_8197) /* ty=(Tensor[(15, 9, 9), int16], Tensor[(14, 9, 14), bool]) */
}

def @func_3451(%var_3449: Tensor[(9, 1, 4), float32]) -> (Tensor[(9, 1, 4), float32], Tensor[(5, 16, 6), uint32], Tensor[(480), uint32], Tensor[(594), uint16], Tensor[(288), float32], Tensor[(594), uint16]) {
  @func_3448(%var_3449) /* ty=(Tensor[(9, 1, 4), float32], Tensor[(5, 16, 6), uint32], Tensor[(480), uint32], Tensor[(594), uint16], Tensor[(288), float32], Tensor[(594), uint16]) */
}

def @func_8431() -> Tensor[(14, 9, 14), bool] {
  @func_6498() /* ty=Tensor[(14, 9, 14), bool] */
}

def @func_5833(%var_5826: Tensor[(14, 9, 14), bool]) -> Tensor[(14, 9, 14), int64] {
  %195 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %196 = %195.0;
  %197 = cast(%var_5826, dtype="int64") /* ty=Tensor[(14, 9, 14), int64] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="int64") /* ty=Tensor[(14, 9, 14), int64] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%199, %200) /* ty=Tensor[(14, 9, 14), int64] */
}

def @func_7072() -> Tensor[(13), int32] {
  %202 = fn () -> Tensor[(13), int32] {
    %201 = @func_6184() /* ty=(Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) */;
    %201.1
  };
  %202() /* ty=Tensor[(13), int32] */
}

def @func_2659(%var_2654: Tensor[(7, 2, 10), float32], %var_2655: Tensor[(40), float64], %var_2656: int32, %var_2657: Tensor[(13), int32], %var_2658: Tensor[(594), uint16]) -> (Tensor[(7, 2, 10), float32], int32, Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) {
  @func_2652(%var_2654, %var_2655, %var_2656, %var_2657, %var_2658) /* ty=(Tensor[(7, 2, 10), float32], int32, Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */
}

def @func_8156() -> (Tensor[(14, 9, 14), bool],) {
  %203 = @func_8107() /* ty=(Tensor[(14, 9, 14), bool], Tensor[(1890), bool]) */;
  %204 = %203.0;
  (%204,)
}

def @func_2652(%var_2570: Tensor[(7, 2, 10), float32], %var_2581: Tensor[(40), float64], %var_2582: int32, %var_2583: Tensor[(13), int32], %var_2614: Tensor[(594), uint16]) -> (Tensor[(7, 2, 10), float32], int32, Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) {
  %205 = cast(%var_2570, dtype="float32") /* ty=Tensor[(7, 2, 10), float32] */;
  %206 = cast(%var_2581, dtype="float64") /* ty=Tensor[(40), float64] */;
  %207 = cast(%var_2582, dtype="int32") /* ty=int32 */;
  %208 = cast(%var_2583, dtype="int32") /* ty=Tensor[(13), int32] */;
  %209 = reshape(%206, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), float64] */;
  %210 = reshape(%207, newshape=[]) /* ty=int32 */;
  %211 = reshape(%208, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %212 = @func_856(%209, %210, %211) /* ty=(Tensor[(1, 8, 5), float64], Tensor[(13, 1), int32], int32, Tensor[(13), int32]) */;
  %213 = cast(%var_2614, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %214 = reshape(%213, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), uint16] */;
  %215 = @func_41(%214) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */;
  %216 = log2(%205) /* ty=Tensor[(7, 2, 10), float32] */;
  %217 = %212.2;
  %218 = %215.0;
  (%216, %217, %var_2581, %var_2582, %var_2583, %218, %var_2614)
}

def @func_3848(%var_3823: Tensor[(5, 4, 15), float32], %var_3824: Tensor[(5, 4, 15), float32], %var_3830: Tensor[(140), float32], %var_3831: Tensor[(40), float64], %var_3834: Tensor[(594), uint16]) -> (Tensor[(5, 4, 15), float32], Tensor[(7, 2, 10), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(13), int32], Tensor[(594), bool]) {
  %219 = cast(%var_3824, dtype="float32") /* ty=Tensor[(5, 4, 15), float32] */;
  %220 = shape_of(%var_3823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%var_3823, dtype="float32") /* ty=Tensor[(5, 4, 15), float32] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %223 = cast(%var_3830, dtype="float32") /* ty=Tensor[(140), float32] */;
  %224 = cast(%var_3831, dtype="float64") /* ty=Tensor[(40), float64] */;
  %225 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %226 = cast(meta[relay.Constant][21] /* ty=Tensor[(13), int32] */, dtype="int32") /* ty=Tensor[(13), int32] */;
  %227 = cast(%var_3834, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %228 = reshape(%223, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), float32] */;
  %229 = reshape(%224, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %230 = reshape(%225, newshape=[]) /* ty=int32 */;
  %231 = reshape(%226, newshape=[13]) /* ty=Tensor[(13), int32] */;
  %232 = reshape(%227, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %233 = @func_2652(%228, %229, %230, %231, %232) /* ty=(Tensor[(7, 2, 10), float32], int32, Tensor[(40), float64], int32, Tensor[(13), int32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */;
  %234 = cast(%var_3834, dtype="bool") /* ty=Tensor[(594), bool] */;
  %235 = cast(4 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %236 = floor_divide(%221, %222) /* ty=Tensor[(5, 4, 15), float32] */;
  %237 = %233.0;
  %238 = not_equal(%234, %235) /* ty=Tensor[(594), bool] */;
  (%236, %237, %var_3830, %var_3831, meta[relay.Constant][21] /* ty=Tensor[(13), int32] */, %238)
}

def @func_7614() -> (Tensor[(594), float32], Tensor[(1890), int16]) {
  %239 = @func_6576() /* ty=(Tensor[(14, 9, 14), bool], Tensor[(594, ?), int16], Tensor[(594), float32]) */;
  %240 = @func_6680() /* ty=(Tensor[(1890), int16],) */;
  %241 = %240.0;
  %242 = cast(meta[relay.Constant][22] /* ty=Tensor[(1890), int16] */, dtype="int16") /* ty=Tensor[(1890), int16] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(1), int32] */;
  %244 = cast(%241, dtype="int16") /* ty=Tensor[(1890), int16] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?), int16] */;
  %246 = %239.2;
  %247 = bitwise_xor(%244, %245) /* ty=Tensor[(1890), int16] */;
  (%246, %247)
}

def @func_3878(%var_3876: Tensor[(10, 11, 6), float64]) -> (Tensor[(10, 11, 6), float64],) {
  @func_3875(%var_3876) /* ty=(Tensor[(10, 11, 6), float64],) */
}

def @func_5779() -> (Tensor[(14, 9, 14), bool],) {
  %250 = fn () -> (Tensor[(14, 9, 14), bool],) {
    %248 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
    %249 = %248.0;
    (%249,)
  };
  %250() /* ty=(Tensor[(14, 9, 14), bool],) */
}

def @func_1051(%var_1049: Tensor[(7, 10, 11), int32], %var_1050: Tensor[(7, 10, 11), int32]) -> (Tensor[(7, 10, 11), int32],) {
  @func_1047(%var_1049, %var_1050) /* ty=(Tensor[(7, 10, 11), int32],) */
}

def @func_8690() -> (Tensor[(288), float32],) {
  %251 = @func_5722() /* ty=(Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) */;
  %252 = %251.2;
  (%252,)
}

def @func_3187(%var_3185: Tensor[(4, 12, 12), int8], %var_3186: Tensor[(594), uint16]) -> (Tensor[(4, 12, 12), float32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) {
  %262 = fn (%var_3111: Tensor[(4, 12, 12), int8], %var_3153: Tensor[(594), uint16]) -> (Tensor[(4, 12, 12), float32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) {
    %253 = cast(meta[relay.Constant][23] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %254 = cast(%var_3111, dtype="int8") /* ty=Tensor[(4, 12, 12), int8] */;
    %255 = bitwise_xor(%253, %254) /* ty=Tensor[(4, 12, 12), int8] */;
    %256 = cast(%255, dtype="float32") /* ty=Tensor[(4, 12, 12), float32] */;
    %257 = cast(%var_3153, dtype="uint16") /* ty=Tensor[(594), uint16] */;
    %258 = reshape(%257, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), uint16] */;
    %259 = @func_41(%258) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */;
    %260 = exp(%256) /* ty=Tensor[(4, 12, 12), float32] */;
    %261 = %259.0;
    (%260, %261, %var_3153)
  };
  %262(%var_3185, %var_3186) /* ty=(Tensor[(4, 12, 12), float32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */
}

def @func_6578() -> (Tensor[(14, 9, 14), bool], Tensor[(594, ?), int16], Tensor[(594), float32]) {
  @func_6576() /* ty=(Tensor[(14, 9, 14), bool], Tensor[(594, ?), int16], Tensor[(594), float32]) */
}

def @func_6869(%var_6867: int64) -> (Tensor[(14, 4, 13), int64], Tensor[(14, 9, 14), bool]) {
  @func_6866(%var_6867) /* ty=(Tensor[(14, 4, 13), int64], Tensor[(14, 9, 14), bool]) */
}

def @func_8458() -> (Tensor[(4, 11, 15), bool], Tensor[(14, 9, 14), float64]) {
  %263 = @func_7877() /* ty=(Tensor[(13), int32], Tensor[(14, 9, 14), float64]) */;
  %264 = @func_8237() /* ty=Tensor[(4, 11, 15), bool] */;
  %265 = %263.1;
  (%264, %265)
}

def @func_7980() -> (Tensor[(14, 9, 14), bool],) {
  %268 = fn () -> (Tensor[(14, 9, 14), bool],) {
    %266 = @func_6722() /* ty=(Tensor[(14, 9, 14), bool],) */;
    %267 = %266.0;
    (%267,)
  };
  %268() /* ty=(Tensor[(14, 9, 14), bool],) */
}

def @func_1765(%var_1763: Tensor[(9, 14, 15), int16], %var_1764: Tensor[(594), uint16]) -> (Tensor[(9, 14, 15), int16], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) {
  @func_1761(%var_1763, %var_1764) /* ty=(Tensor[(9, 14, 15), int16], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */
}

def @func_1595(%var_1594: int64) -> (Tensor[(16, 13, 13), uint64], Tensor[(140), int64], Tensor[(13, 1), int32], Tensor[(6, 11, 9), int32], Tensor[(16, 13, 13), float32], Tensor[(5, 16, 6), uint32], Tensor[(1, 480), uint32]) {
  %295 = fn (%var_1566: int64) -> (Tensor[(16, 13, 13), uint64], Tensor[(140), int64], Tensor[(13, 1), int32], Tensor[(6, 11, 9), int32], Tensor[(16, 13, 13), float32], Tensor[(5, 16, 6), uint32], Tensor[(1, 480), uint32]) {
    %269 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
    %270 = exp(%269) /* ty=Tensor[(16, 13, 13), float32] */;
    %271 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 13, 13), float32] */, dtype="uint64") /* ty=Tensor[(16, 13, 13), uint64] */;
    %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
    %273 = cast(%270, dtype="uint64") /* ty=Tensor[(16, 13, 13), uint64] */;
    %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %275 = cast(%var_1566, dtype="int64") /* ty=int64 */;
    %276 = cast(meta[relay.Constant][25] /* ty=Tensor[(140), int64] */, dtype="int64") /* ty=Tensor[(140), int64] */;
    %277 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 1), int32] */, dtype="int32") /* ty=Tensor[(13, 1), int32] */;
    %278 = reshape(%275, newshape=[]) /* ty=int64 */;
    %279 = reshape(%276, newshape=[1, 14, 10]) /* ty=Tensor[(1, 14, 10), int64] */;
    %280 = reshape(%277, newshape=[13]) /* ty=Tensor[(13), int32] */;
    %281 = @func_785(%278, %279, %280) /* ty=(Tensor[(1, 14, 10), bool], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32], Tensor[(13), int32], Tensor[(1, 594), float64], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32]) */;
    %282 = %281.1;
    %283 = cast(%282, dtype="int32") /* ty=Tensor[(6, 11, 9), int32] */;
    %284 = cast(%var_1566, dtype="int32") /* ty=int32 */;
    %285 = cast(%270, dtype="float32") /* ty=Tensor[(16, 13, 13), float32] */;
    %286 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 480), uint32] */, dtype="uint32") /* ty=Tensor[(1, 480), uint32] */;
    %287 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 480), uint32] */, dtype="uint32") /* ty=Tensor[(1, 480), uint32] */;
    %288 = reshape(%286, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint32] */;
    %289 = reshape(%287, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint32] */;
    %290 = @func_1085(%288, %289) /* ty=(Tensor[(5, 16, 6), uint32],) */;
    %291 = left_shift(%273, %274) /* ty=Tensor[(16, 13, 13), uint64] */;
    %292 = right_shift(%283, %284) /* ty=Tensor[(6, 11, 9), int32] */;
    %293 = tan(%285) /* ty=Tensor[(16, 13, 13), float32] */;
    %294 = %290.0;
    (%291, meta[relay.Constant][25] /* ty=Tensor[(140), int64] */, meta[relay.Constant][26] /* ty=Tensor[(13, 1), int32] */, %292, %293, %294, meta[relay.Constant][27] /* ty=Tensor[(1, 480), uint32] */)
  };
  %295(%var_1594) /* ty=(Tensor[(16, 13, 13), uint64], Tensor[(140), int64], Tensor[(13, 1), int32], Tensor[(6, 11, 9), int32], Tensor[(16, 13, 13), float32], Tensor[(5, 16, 6), uint32], Tensor[(1, 480), uint32]) */
}

def @func_3855(%var_3850: Tensor[(5, 4, 15), float32], %var_3851: Tensor[(5, 4, 15), float32], %var_3852: Tensor[(140), float32], %var_3853: Tensor[(40), float64], %var_3854: Tensor[(594), uint16]) -> (Tensor[(5, 4, 15), float32], Tensor[(7, 2, 10), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(13), int32], Tensor[(594), bool]) {
  @func_3848(%var_3850, %var_3851, %var_3852, %var_3853, %var_3854) /* ty=(Tensor[(5, 4, 15), float32], Tensor[(7, 2, 10), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(13), int32], Tensor[(594), bool]) */
}

def @func_4399(%var_4397: Tensor[(11, 7, 1), uint32], %var_4398: Tensor[(11, 7, 14), uint32]) -> (Tensor[(11, 7, 14), uint32], Tensor[(13, 16, 16), bool], Tensor[(208), uint64], Tensor[(8, 416), uint64]) {
  @func_4395(%var_4397, %var_4398) /* ty=(Tensor[(11, 7, 14), uint32], Tensor[(13, 16, 16), bool], Tensor[(208), uint64], Tensor[(8, 416), uint64]) */
}

def @func_6842(%var_6840: Tensor[(1890), int16]) -> (Tensor[(1890), float64], Tensor[(1890), int16]) {
  @func_6839(%var_6840) /* ty=(Tensor[(1890), float64], Tensor[(1890), int16]) */
}

def @func_7768(%var_7766: Tensor[(9, 2, 1), float32], %var_7767: Tensor[(9, 2, 1), float32]) -> Tensor[(9, 2, ?), float32] {
  @func_7764(%var_7766, %var_7767) /* ty=Tensor[(9, 2, ?), float32] */
}

def @func_6044(%var_6043: int8) -> Tensor[(11, 14, 10), int8] {
  %298 = fn (%var_6037: int8) -> Tensor[(11, 14, 10), int8] {
    %296 = cast(%var_6037, dtype="int8") /* ty=int8 */;
    %297 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 14, 10), int8] */, dtype="int8") /* ty=Tensor[(11, 14, 10), int8] */;
    bitwise_xor(%296, %297) /* ty=Tensor[(11, 14, 10), int8] */
  };
  %298(%var_6043) /* ty=Tensor[(11, 14, 10), int8] */
}

def @func_5979(%var_5933: Tensor[(14, 9, 14), bool]) -> (Tensor[(14, 9, 14), int64], Tensor[(9, 8, 12), bool], Tensor[(864), float32], Tensor[(14, 9, 14), float32]) {
  %299 = @func_5778() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %300 = %299.0;
  %301 = cast(%var_5933, dtype="int64") /* ty=Tensor[(14, 9, 14), int64] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%300, dtype="int64") /* ty=Tensor[(14, 9, 14), int64] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %305 = cast(meta[relay.Constant][29] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %306 = reshape(%305, newshape=[9, 8, 12]) /* ty=Tensor[(9, 8, 12), float32] */;
  %307 = @func_4804(%306) /* ty=(Tensor[(9, 8, 12), bool],) */;
  %308 = @func_5722() /* ty=(Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) */;
  %309 = %308.0;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(14, 9, 14), float32] */;
  %311 = bitwise_and(%303, %304) /* ty=Tensor[(14, 9, 14), int64] */;
  %312 = %307.0;
  %313 = cos(%310) /* ty=Tensor[(14, 9, 14), float32] */;
  (%311, %312, meta[relay.Constant][29] /* ty=Tensor[(864), float32] */, %313)
}

def @func_7532() -> Tensor[(14, 9, 14), float32] {
  %317 = fn () -> Tensor[(14, 9, 14), float32] {
    %314 = @func_6722() /* ty=(Tensor[(14, 9, 14), bool],) */;
    %315 = %314.0;
    %316 = cast(%315, dtype="float32") /* ty=Tensor[(14, 9, 14), float32] */;
    log2(%316) /* ty=Tensor[(14, 9, 14), float32] */
  };
  %317() /* ty=Tensor[(14, 9, 14), float32] */
}

def @func_6139(%var_6138: Tensor[(1040), float64]) -> (Tensor[(14, 9, 14), bool], Tensor[(10, 8, 13), float64], Tensor[(1040), float64]) {
  %323 = fn (%var_6134: Tensor[(1040), float64]) -> (Tensor[(14, 9, 14), bool], Tensor[(10, 8, 13), float64], Tensor[(1040), float64]) {
    %318 = cast(%var_6134, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %319 = reshape(%318, newshape=[10, 8, 13]) /* ty=Tensor[(10, 8, 13), float64] */;
    %320 = @func_1793(%319) /* ty=(Tensor[(10, 8, 13), float64],) */;
    %321 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
    %322 = %320.0;
    (%321, %322, %var_6134)
  };
  %323(%var_6138) /* ty=(Tensor[(14, 9, 14), bool], Tensor[(10, 8, 13), float64], Tensor[(1040), float64]) */
}

def @main() -> Tensor[(14, 6, 7), float32] {
  %324 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 6, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 6, 7), float32] */;
  asinh(%324) /* ty=Tensor[(14, 6, 7), float32] */
}

def @func_3297(%var_3295: Tensor[(9, 2, 16), float32], %var_3296: Tensor[(594), uint16]) -> (Tensor[(6, 11, 9), uint16], Tensor[(1890), int16], Tensor[(594), uint16], Tensor[(4, 12, 12), float32], Tensor[(576), int8], Tensor[(9, 2, 16), float32]) {
  %349 = fn (%var_3248: Tensor[(9, 2, 16), float32], %var_3255: Tensor[(594), uint16]) -> (Tensor[(6, 11, 9), uint16], Tensor[(1890), int16], Tensor[(594), uint16], Tensor[(4, 12, 12), float32], Tensor[(576), int8], Tensor[(9, 2, 16), float32]) {
    %325 = cast(meta[relay.Constant][31] /* ty=Tensor[(1890), int16] */, dtype="int16") /* ty=Tensor[(1890), int16] */;
    %326 = cast(%var_3255, dtype="uint16") /* ty=Tensor[(594), uint16] */;
    %327 = reshape(%325, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), int16] */;
    %328 = reshape(%326, newshape=[594]) /* ty=Tensor[(594), uint16] */;
    %329 = @func_1761(%327, %328) /* ty=(Tensor[(9, 14, 15), int16], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */;
    %330 = cast(meta[relay.Constant][32] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
    %331 = cast(%var_3255, dtype="uint16") /* ty=Tensor[(594), uint16] */;
    %332 = reshape(%330, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), int8] */;
    %333 = reshape(%331, newshape=[594]) /* ty=Tensor[(594), uint16] */;
    %334 = @func_3184(%332, %333) /* ty=(Tensor[(4, 12, 12), float32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */;
    %335 = cast(%var_3248, dtype="float32") /* ty=Tensor[(9, 2, 16), float32] */;
    %336 = atanh(%335) /* ty=Tensor[(9, 2, 16), float32] */;
    %337 = cast(%var_3248, dtype="bool") /* ty=Tensor[(9, 2, 16), bool] */;
    %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
    %339 = cast(%336, dtype="bool") /* ty=Tensor[(9, 2, 16), bool] */;
    %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %341 = equal(%339, %340) /* ty=Tensor[(9, 2, 16), bool] */;
    %342 = cast(%336, dtype="float32") /* ty=Tensor[(9, 2, 16), float32] */;
    %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
    %344 = cast(%341, dtype="float32") /* ty=Tensor[(9, 2, 16), float32] */;
    %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %346 = %329.1;
    %347 = %334.0;
    %348 = minimum(%344, %345) /* ty=Tensor[(9, 2, 16), float32] */;
    (%346, meta[relay.Constant][31] /* ty=Tensor[(1890), int16] */, %var_3255, %347, meta[relay.Constant][32] /* ty=Tensor[(576), int8] */, %348)
  };
  %349(%var_3295, %var_3296) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(1890), int16], Tensor[(594), uint16], Tensor[(4, 12, 12), float32], Tensor[(576), int8], Tensor[(9, 2, 16), float32]) */
}

def @func_7616() -> (Tensor[(594), float32], Tensor[(1890), int16]) {
  @func_7614() /* ty=(Tensor[(594), float32], Tensor[(1890), int16]) */
}

def @func_8433() -> Tensor[(14, 9, 14), bool] {
  @func_8431() /* ty=Tensor[(14, 9, 14), bool] */
}

def @func_2038(%var_2018: float64, %var_2025: Tensor[(13, 4, 13), float64]) -> (Tensor[(13, 4, 13), float64], Tensor[(13, 4, 1), float32], Tensor[(13, 4, 1), float64]) {
  %350 = cast(%var_2018, dtype="float64") /* ty=float64 */;
  %351 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(13, 4, 1), float64] */;
  %352 = divide(%350, %351) /* ty=Tensor[(13, 4, 1), float64] */;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(13, 4, 1), float64] */;
  %354 = cast(%var_2025, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  %355 = cast(%352, dtype="float32") /* ty=Tensor[(13, 4, 1), float32] */;
  %356 = cast(%352, dtype="float64") /* ty=Tensor[(13, 4, 1), float64] */;
  %357 = add(%353, %354) /* ty=Tensor[(13, 4, 13), float64] */;
  %358 = sinh(%355) /* ty=Tensor[(13, 4, 1), float32] */;
  %359 = erf(%356) /* ty=Tensor[(13, 4, 1), float64] */;
  (%357, %358, %359)
}

def @func_6186() -> (Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) {
  @func_6184() /* ty=(Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) */
}

def @func_5416() -> Tensor[(14, 9, 14), bool] {
  %364 = fn () -> Tensor[(14, 9, 14), bool] {
    %360 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 9, 14), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
    %361 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(14, 9, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %362 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 9, 14), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
    %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%362, %363) /* ty=Tensor[(14, 9, 14), bool] */
  };
  %364() /* ty=Tensor[(14, 9, 14), bool] */
}

def @func_331(%var_330: Tensor[(594), uint16]) -> (Tensor[(6, 11, 9), uint16], Tensor[(594), uint16], Tensor[(6, 11, 9), uint16], Tensor[(3, 16, 10), float32], Tensor[(6, 11, 9), uint16]) {
  %381 = fn (%var_297: Tensor[(594), uint16]) -> (Tensor[(6, 11, 9), uint16], Tensor[(594), uint16], Tensor[(6, 11, 9), uint16], Tensor[(3, 16, 10), float32], Tensor[(6, 11, 9), uint16]) {
    %365 = cast(%var_297, dtype="uint16") /* ty=Tensor[(594), uint16] */;
    %366 = reshape(%365, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), uint16] */;
    %367 = @func_41(%366) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */;
    %368 = cast(%var_297, dtype="uint16") /* ty=Tensor[(594), uint16] */;
    %369 = reshape(%368, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), uint16] */;
    %370 = @func_41(%369) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */;
    %371 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 16, 10), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 10), float64] */;
    %372 = exp(%371) /* ty=Tensor[(3, 16, 10), float64] */;
    %373 = cast(%372, dtype="float32") /* ty=Tensor[(3, 16, 10), float32] */;
    %374 = %367.0;
    %375 = cast(%374, dtype="uint16") /* ty=Tensor[(6, 11, 9), uint16] */;
    %376 = reshape(%375, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), uint16] */;
    %377 = @func_41(%376) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */;
    %378 = %370.0;
    %379 = atan(%373) /* ty=Tensor[(3, 16, 10), float32] */;
    %380 = %377.0;
    (%374, %var_297, %378, %379, %380)
  };
  %381(%var_330) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(594), uint16], Tensor[(6, 11, 9), uint16], Tensor[(3, 16, 10), float32], Tensor[(6, 11, 9), uint16]) */
}

def @func_7346(%var_7343: Tensor[(9, 8, 12), bool], %var_7344: Tensor[(9, 8, 12), bool], %var_7345: Tensor[(40), float64]) -> (Tensor[(13), int32], Tensor[(1764), bool], Tensor[(6, 36), float64], Tensor[(9, 8, 12), uint32], Tensor[(9, 8, 12), int8], Tensor[(9, 8, 12), float64], Tensor[(1, 594), uint16], Tensor[(13), int32], Tensor[(40), float64], int32) {
  %419 = fn (%var_7245: Tensor[(9, 8, 12), bool], %var_7250: Tensor[(9, 8, 12), bool], %var_7330: Tensor[(40), float64]) -> (Tensor[(13), int32], Tensor[(1764), bool], Tensor[(6, 36), float64], Tensor[(9, 8, 12), uint32], Tensor[(9, 8, 12), int8], Tensor[(9, 8, 12), float64], Tensor[(1, 594), uint16], Tensor[(13), int32], Tensor[(40), float64], int32) {
    %382 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 36), float64] */, dtype="float64") /* ty=Tensor[(6, 36), float64] */;
    %383 = reshape(%382, newshape=[9, 6, 4]) /* ty=Tensor[(9, 6, 4), float64] */;
    %384 = @func_3076(%383) /* ty=Tensor[(9, 6, 4), float64] */;
    %385 = cast(%384, dtype="float64") /* ty=Tensor[(9, 6, 4), float64] */;
    %386 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(6, 36), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %387 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 36), float64] */, dtype="float64") /* ty=Tensor[(6, 36), float64] */;
    %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %389 = cast(meta[relay.Constant][37] /* ty=Tensor[(1764), bool] */, dtype="bool") /* ty=Tensor[(1764), bool] */;
    %390 = reshape(%389, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), bool] */;
    %391 = @func_5979(%390) /* ty=(Tensor[(14, 9, 14), int64], Tensor[(9, 8, 12), bool], Tensor[(864), float32], Tensor[(14, 9, 14), float32]) */;
    %392 = %391.1;
    %393 = cast(%var_7245, dtype="uint32") /* ty=Tensor[(9, 8, 12), uint32] */;
    %394 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
    %395 = cast(%392, dtype="uint32") /* ty=Tensor[(9, 8, 12), uint32] */;
    %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %397 = cast(%var_7250, dtype="int8") /* ty=Tensor[(9, 8, 12), int8] */;
    %398 = shape_of(%var_7245, dtype="int32") /* ty=Tensor[(3), int32] */;
    %399 = cast(%var_7245, dtype="int8") /* ty=Tensor[(9, 8, 12), int8] */;
    %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %401 = cast(%392, dtype="float32") /* ty=Tensor[(9, 8, 12), float32] */;
    %402 = log10(%401) /* ty=Tensor[(9, 8, 12), float32] */;
    %403 = cast(%402, dtype="float64") /* ty=Tensor[(9, 8, 12), float64] */;
    %404 = @func_6184() /* ty=(Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) */;
    %405 = cast(%var_7330, dtype="float64") /* ty=Tensor[(40), float64] */;
    %406 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %407 = @func_7071() /* ty=Tensor[(13), int32] */;
    %408 = cast(%407, dtype="int32") /* ty=Tensor[(13), int32] */;
    %409 = reshape(%405, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), float64] */;
    %410 = reshape(%406, newshape=[]) /* ty=int32 */;
    %411 = reshape(%408, newshape=[13]) /* ty=Tensor[(13), int32] */;
    %412 = @func_856(%409, %410, %411) /* ty=(Tensor[(1, 8, 5), float64], Tensor[(13, 1), int32], int32, Tensor[(13), int32]) */;
    %413 = mod(%387, %388) /* ty=Tensor[(6, 36), float64] */;
    %414 = bitwise_or(%395, %396) /* ty=Tensor[(9, 8, 12), uint32] */;
    %415 = bitwise_xor(%399, %400) /* ty=Tensor[(9, 8, 12), int8] */;
    %416 = asinh(%403) /* ty=Tensor[(9, 8, 12), float64] */;
    %417 = %404.5;
    %418 = %412.3;
    (%407, meta[relay.Constant][37] /* ty=Tensor[(1764), bool] */, %413, %414, %415, %416, %417, %418, %var_7330, -7 /* ty=int32 */)
  };
  %419(%var_7343, %var_7344, %var_7345) /* ty=(Tensor[(13), int32], Tensor[(1764), bool], Tensor[(6, 36), float64], Tensor[(9, 8, 12), uint32], Tensor[(9, 8, 12), int8], Tensor[(9, 8, 12), float64], Tensor[(1, 594), uint16], Tensor[(13), int32], Tensor[(40), float64], int32) */
}

def @func_5836(%var_5834: Tensor[(14, 9, 14), bool]) -> Tensor[(14, 9, 14), int64] {
  @func_5833(%var_5834) /* ty=Tensor[(14, 9, 14), int64] */
}

def @func_7764(%var_7758: Tensor[(9, 2, 1), float32], %var_7759: Tensor[(9, 2, 1), float32]) -> Tensor[(9, 2, ?), float32] {
  %420 = cast(%var_7759, dtype="float32") /* ty=Tensor[(9, 2, 1), float32] */;
  %421 = shape_of(%var_7758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_7758, dtype="float32") /* ty=Tensor[(9, 2, 1), float32] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%422, %423) /* ty=Tensor[(9, 2, ?), float32] */
}

def @func_7965() -> (Tensor[(4, 11, 15), bool],) {
  %424 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 11, 15), bool] */, dtype="bool") /* ty=Tensor[(4, 11, 15), bool] */;
  %425 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(4, 11, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 11, 15), bool] */, dtype="bool") /* ty=Tensor[(4, 11, 15), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %428 = logical_and(%426, %427) /* ty=Tensor[(4, 11, 15), bool] */;
  (%428,)
}

def @func_6773(%var_6771: Tensor[(16, 4, 10), int8], %var_6772: Tensor[(1, 77), uint32]) -> (Tensor[(16, 4, 10), uint16], Tensor[(14, 9, 14), int64], Tensor[(1764), bool], Tensor[(16, 4, 10), float32], Tensor[(11, 7, 14), uint32], Tensor[(1, 77), uint32], Tensor[(1078), uint32]) {
  %450 = fn (%var_6728: Tensor[(16, 4, 10), int8], %var_6761: Tensor[(1, 77), uint32]) -> (Tensor[(16, 4, 10), uint16], Tensor[(14, 9, 14), int64], Tensor[(1764), bool], Tensor[(16, 4, 10), float32], Tensor[(11, 7, 14), uint32], Tensor[(1, 77), uint32], Tensor[(1078), uint32]) {
    %429 = cast(%var_6728, dtype="int8") /* ty=Tensor[(16, 4, 10), int8] */;
    %430 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(16, 4, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %431 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 4, 10), int8] */, dtype="int8") /* ty=Tensor[(16, 4, 10), int8] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %433 = multiply(%431, %432) /* ty=Tensor[(16, 4, 10), int8] */;
    %434 = cast(%433, dtype="uint16") /* ty=Tensor[(16, 4, 10), uint16] */;
    %435 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(16, 4, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %436 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 4, 10), int8] */, dtype="uint16") /* ty=Tensor[(16, 4, 10), uint16] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %438 = cast(meta[relay.Constant][42] /* ty=Tensor[(1764), bool] */, dtype="bool") /* ty=Tensor[(1764), bool] */;
    %439 = reshape(%438, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), bool] */;
    %440 = cast(%var_6728, dtype="float32") /* ty=Tensor[(16, 4, 10), float32] */;
    %441 = cast(%var_6761, dtype="uint32") /* ty=Tensor[(1, 77), uint32] */;
    %442 = cast(meta[relay.Constant][43] /* ty=Tensor[(1078), uint32] */, dtype="uint32") /* ty=Tensor[(1078), uint32] */;
    %443 = reshape(%441, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), uint32] */;
    %444 = reshape(%442, newshape=[11, 7, 14]) /* ty=Tensor[(11, 7, 14), uint32] */;
    %445 = @func_4395(%443, %444) /* ty=(Tensor[(11, 7, 14), uint32], Tensor[(13, 16, 16), bool], Tensor[(208), uint64], Tensor[(8, 416), uint64]) */;
    %446 = bitwise_or(%436, %437) /* ty=Tensor[(16, 4, 10), uint16] */;
    %447 = @func_5833(%439) /* ty=Tensor[(14, 9, 14), int64] */;
    %448 = rsqrt(%440) /* ty=Tensor[(16, 4, 10), float32] */;
    %449 = %445.0;
    (%446, %447, meta[relay.Constant][42] /* ty=Tensor[(1764), bool] */, %448, %449, %var_6761, meta[relay.Constant][43] /* ty=Tensor[(1078), uint32] */)
  };
  %450(%var_6771, %var_6772) /* ty=(Tensor[(16, 4, 10), uint16], Tensor[(14, 9, 14), int64], Tensor[(1764), bool], Tensor[(16, 4, 10), float32], Tensor[(11, 7, 14), uint32], Tensor[(1, 77), uint32], Tensor[(1078), uint32]) */
}

def @func_7180(%var_7179: Tensor[(1890), int16]) -> (Tensor[(14, 9, 14), bool], Tensor[(1890), bool]) {
  %459 = fn (%var_7158: Tensor[(1890), int16]) -> (Tensor[(14, 9, 14), bool], Tensor[(1890), bool]) {
    %451 = @func_5722() /* ty=(Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) */;
    %452 = %451.1;
    %453 = cast(%var_7158, dtype="bool") /* ty=Tensor[(1890), bool] */;
    %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(1), int32] */;
    %455 = cast(%452, dtype="bool") /* ty=Tensor[(1890), bool] */;
    %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?), bool] */;
    %457 = @func_6498() /* ty=Tensor[(14, 9, 14), bool] */;
    %458 = equal(%455, %456) /* ty=Tensor[(1890), bool] */;
    (%457, %458)
  };
  %459(%var_7179) /* ty=(Tensor[(14, 9, 14), bool], Tensor[(1890), bool]) */
}

def @func_8679(%var_8677: float32, %var_8678: Tensor[(6, 16, 1), float32]) -> (Tensor[(6, 16, 1), float32], Tensor[(6, 16, 1), float64], Tensor[(13), int32]) {
  @func_8675(%var_8677, %var_8678) /* ty=(Tensor[(6, 16, 1), float32], Tensor[(6, 16, 1), float64], Tensor[(13), int32]) */
}

def @func_8158() -> (Tensor[(14, 9, 14), bool],) {
  @func_8156() /* ty=(Tensor[(14, 9, 14), bool],) */
}

def @func_7032(%var_7029: Tensor[(6, 13, 6), float32]) -> (Tensor[(6, 13, 6), float32],) {
  %460 = cast(%var_7029, dtype="float32") /* ty=Tensor[(6, 13, 6), float32] */;
  %461 = tan(%460) /* ty=Tensor[(6, 13, 6), float32] */;
  (%461,)
}

def @func_8692() -> (Tensor[(288), float32],) {
  @func_8690() /* ty=(Tensor[(288), float32],) */
}

def @func_6576() -> (Tensor[(14, 9, 14), bool], Tensor[(594, ?), int16], Tensor[(594), float32]) {
  %462 = @func_5778() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %463 = cast(meta[relay.Constant][44] /* ty=Tensor[(594, 1), uint16] */, dtype="uint16") /* ty=Tensor[(594, 1), uint16] */;
  %464 = reshape(%463, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %465 = @func_329(%464) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(594), uint16], Tensor[(6, 11, 9), uint16], Tensor[(3, 16, 10), float32], Tensor[(6, 11, 9), uint16]) */;
  %466 = %465.1;
  %467 = cast(%466, dtype="int16") /* ty=Tensor[(594), int16] */;
  %468 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(594, 1), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %469 = cast(meta[relay.Constant][44] /* ty=Tensor[(594, 1), uint16] */, dtype="int16") /* ty=Tensor[(594, 1), int16] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %471 = cast(meta[relay.Constant][44] /* ty=Tensor[(594, 1), uint16] */, dtype="float32") /* ty=Tensor[(594, 1), float32] */;
  %472 = shape_of(%466, dtype="int32") /* ty=Tensor[(1), int32] */;
  %473 = cast(%466, dtype="float32") /* ty=Tensor[(594), float32] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?), float32] */;
  %475 = %462.0;
  %476 = subtract(%469, %470) /* ty=Tensor[(594, ?), int16] */;
  %477 = mod(%473, %474) /* ty=Tensor[(594), float32] */;
  (%475, %476, %477)
}

def @func_8491() -> (Tensor[(14, 9, 14), float64],) {
  %478 = @func_5722() /* ty=(Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) */;
  %479 = %478.0;
  (%479,)
}

def @func_860(%var_857: Tensor[(1, 8, 5), float64], %var_858: int32, %var_859: Tensor[(13), int32]) -> (Tensor[(1, 8, 5), float64], Tensor[(13, 1), int32], int32, Tensor[(13), int32]) {
  %490 = fn (%var_840: Tensor[(1, 8, 5), float64], %var_852: int32, %var_853: Tensor[(13), int32]) -> (Tensor[(1, 8, 5), float64], Tensor[(13, 1), int32], int32, Tensor[(13), int32]) {
    %480 = cast(%var_840, dtype="float64") /* ty=Tensor[(1, 8, 5), float64] */;
    %481 = atanh(%480) /* ty=Tensor[(1, 8, 5), float64] */;
    %482 = cast(%481, dtype="float64") /* ty=Tensor[(1, 8, 5), float64] */;
    %483 = cast(%var_852, dtype="int32") /* ty=int32 */;
    %484 = cast(%var_853, dtype="int32") /* ty=Tensor[(13), int32] */;
    %485 = reshape(%483, newshape=[]) /* ty=int32 */;
    %486 = reshape(%484, newshape=[13, 1]) /* ty=Tensor[(13, 1), int32] */;
    %487 = @func_119(%485, %486) /* ty=(Tensor[(13, 1), int32],) */;
    %488 = cosh(%482) /* ty=Tensor[(1, 8, 5), float64] */;
    %489 = %487.0;
    (%488, %489, %var_852, %var_853)
  };
  %490(%var_857, %var_858, %var_859) /* ty=(Tensor[(1, 8, 5), float64], Tensor[(13, 1), int32], int32, Tensor[(13), int32]) */
}

def @func_8460() -> (Tensor[(4, 11, 15), bool], Tensor[(14, 9, 14), float64]) {
  @func_8458() /* ty=(Tensor[(4, 11, 15), bool], Tensor[(14, 9, 14), float64]) */
}

def @func_7709(%var_7629: Tensor[(36, 16), int8], %var_7640: Tensor[(36, 16), int8], %var_7701: Tensor[(1, 13), int32]) -> (Tensor[(14, 9, 14), float32], Tensor[(36, 16), float32], Tensor[(1890), int16], Tensor[(5, 16, 6), uint32], Tensor[(480), uint32], Tensor[(594), uint64], Tensor[(14, 9, 14), bool], Tensor[(13, 1), int32], int32, Tensor[(1, 13), int32], Tensor[(14, 9, 14), bool], Tensor[(36, 16), float64]) {
  %491 = cast(%var_7640, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
  %492 = shape_of(%var_7629, dtype="int32") /* ty=Tensor[(2), int32] */;
  %493 = cast(%var_7629, dtype="float32") /* ty=Tensor[(36, 16), float32] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %495 = @func_6680() /* ty=(Tensor[(1890), int16],) */;
  %496 = cast(meta[relay.Constant][45] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %497 = cast(meta[relay.Constant][45] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %498 = reshape(%496, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint32] */;
  %499 = reshape(%497, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint32] */;
  %500 = @func_1085(%498, %499) /* ty=(Tensor[(5, 16, 6), uint32],) */;
  %501 = cast(%var_7629, dtype="int8") /* ty=Tensor[(36, 16), int8] */;
  %502 = cast(meta[relay.Constant][46] /* ty=Tensor[(594), uint16] */, dtype="uint16") /* ty=Tensor[(594), uint16] */;
  %503 = reshape(%501, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), int8] */;
  %504 = reshape(%502, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %505 = @func_3184(%503, %504) /* ty=(Tensor[(4, 12, 12), float32], Tensor[(6, 11, 9), uint16], Tensor[(594), uint16]) */;
  %506 = %505.1;
  %507 = cast(%506, dtype="uint64") /* ty=Tensor[(6, 11, 9), uint64] */;
  %508 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(594), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %509 = cast(meta[relay.Constant][46] /* ty=Tensor[(594), uint16] */, dtype="uint64") /* ty=Tensor[(594), uint64] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %511 = @func_6576() /* ty=(Tensor[(14, 9, 14), bool], Tensor[(594, ?), int16], Tensor[(594), float32]) */;
  %512 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %513 = cast(%var_7701, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
  %514 = reshape(%512, newshape=[]) /* ty=int32 */;
  %515 = reshape(%513, newshape=[13, 1]) /* ty=Tensor[(13, 1), int32] */;
  %516 = @func_119(%514, %515) /* ty=(Tensor[(13, 1), int32],) */;
  %517 = @func_6722() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %518 = cast(%var_7640, dtype="float64") /* ty=Tensor[(36, 16), float64] */;
  %519 = @func_7531() /* ty=Tensor[(14, 9, 14), float32] */;
  %520 = floor_divide(%493, %494) /* ty=Tensor[(36, 16), float32] */;
  %521 = %495.0;
  %522 = %500.0;
  %523 = multiply(%509, %510) /* ty=Tensor[(594), uint64] */;
  %524 = %511.0;
  %525 = %516.0;
  %526 = %517.0;
  %527 = erf(%518) /* ty=Tensor[(36, 16), float64] */;
  (%519, %520, %521, %522, meta[relay.Constant][45] /* ty=Tensor[(480), uint32] */, %523, %524, %525, -10 /* ty=int32 */, %var_7701, %526, %527)
}

def @func_6598() -> (Tensor[(1890), int16],) {
  @func_6596() /* ty=(Tensor[(1890), int16],) */
}

def @func_7819() -> (Tensor[(13), int32], Tensor[(14, 9, 14), bool]) {
  %530 = fn () -> (Tensor[(13), int32], Tensor[(14, 9, 14), bool]) {
    %528 = @func_7071() /* ty=Tensor[(13), int32] */;
    %529 = @func_6498() /* ty=Tensor[(14, 9, 14), bool] */;
    (%528, %529)
  };
  %530() /* ty=(Tensor[(13), int32], Tensor[(14, 9, 14), bool]) */
}

def @func_8370(%var_8368: Tensor[(50, 6), float32], %var_8369: Tensor[(40), float64]) -> (Tensor[(14, 9, 14), uint16], Tensor[(594), bool], Tensor[(5, 28), float32], Tensor[(40), float64], Tensor[(6, 99), uint16], Tensor[(140), float32], Tensor[(50, 6), bool]) {
  %554 = fn (%var_8329: Tensor[(50, 6), float32], %var_8331: Tensor[(40), float64]) -> (Tensor[(14, 9, 14), uint16], Tensor[(594), bool], Tensor[(5, 28), float32], Tensor[(40), float64], Tensor[(6, 99), uint16], Tensor[(140), float32], Tensor[(50, 6), bool]) {
    %531 = @func_6184() /* ty=(Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) */;
    %532 = cast(%var_8329, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
    %533 = cast(%var_8329, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
    %534 = cast(meta[relay.Constant][47] /* ty=Tensor[(5, 28), float32] */, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
    %535 = cast(%var_8331, dtype="float64") /* ty=Tensor[(40), float64] */;
    %536 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 99), uint16] */, dtype="uint16") /* ty=Tensor[(6, 99), uint16] */;
    %537 = reshape(%532, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
    %538 = reshape(%533, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
    %539 = reshape(%534, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %540 = reshape(%535, newshape=[40]) /* ty=Tensor[(40), float64] */;
    %541 = reshape(%536, newshape=[594]) /* ty=Tensor[(594), uint16] */;
    %542 = @func_3848(%537, %538, %539, %540, %541) /* ty=(Tensor[(5, 4, 15), float32], Tensor[(7, 2, 10), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(13), int32], Tensor[(594), bool]) */;
    %543 = @func_6184() /* ty=(Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) */;
    %544 = cast(%var_8329, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
    %545 = exp(%544) /* ty=Tensor[(50, 6), float32] */;
    %546 = cast(%var_8329, dtype="bool") /* ty=Tensor[(50, 6), bool] */;
    %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(2), int32] */;
    %548 = cast(%545, dtype="bool") /* ty=Tensor[(50, 6), bool] */;
    %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %550 = %531.0;
    %551 = %542.5;
    %552 = %543.3;
    %553 = less_equal(%548, %549) /* ty=Tensor[(50, 6), bool] */;
    (%550, %551, meta[relay.Constant][47] /* ty=Tensor[(5, 28), float32] */, %var_8331, meta[relay.Constant][48] /* ty=Tensor[(6, 99), uint16] */, %552, %553)
  };
  %554(%var_8368, %var_8369) /* ty=(Tensor[(14, 9, 14), uint16], Tensor[(594), bool], Tensor[(5, 28), float32], Tensor[(40), float64], Tensor[(6, 99), uint16], Tensor[(140), float32], Tensor[(50, 6), bool]) */
}

def @func_6643(%var_6641: Tensor[(10, 4, 1), bool], %var_6642: Tensor[(10, 4, 1), bool]) -> (Tensor[(10, 4, ?), bool], Tensor[(10, 4, 1), float64]) {
  %562 = fn (%var_6622: Tensor[(10, 4, 1), bool], %var_6623: Tensor[(10, 4, 1), bool]) -> (Tensor[(10, 4, ?), bool], Tensor[(10, 4, 1), float64]) {
    %555 = cast(%var_6623, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
    %556 = shape_of(%var_6622, dtype="int32") /* ty=Tensor[(3), int32] */;
    %557 = cast(%var_6622, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
    %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %559 = cast(%var_6623, dtype="float64") /* ty=Tensor[(10, 4, 1), float64] */;
    %560 = logical_and(%557, %558) /* ty=Tensor[(10, 4, ?), bool] */;
    %561 = acosh(%559) /* ty=Tensor[(10, 4, 1), float64] */;
    (%560, %561)
  };
  %562(%var_6641, %var_6642) /* ty=(Tensor[(10, 4, ?), bool], Tensor[(10, 4, 1), float64]) */
}

def @func_6184() -> (Tensor[(14, 9, 14), uint16], Tensor[(13), int32], Tensor[(300), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(1, 594), uint16]) {
  %563 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(14, 9, 14), float32] */;
  %565 = asinh(%564) /* ty=Tensor[(14, 9, 14), float32] */;
  %566 = cast(%565, dtype="uint16") /* ty=Tensor[(14, 9, 14), uint16] */;
  %567 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%563, dtype="uint16") /* ty=Tensor[(14, 9, 14), uint16] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %570 = cast(meta[relay.Constant][49] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %571 = cast(meta[relay.Constant][49] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %572 = cast(meta[relay.Constant][50] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %573 = cast(meta[relay.Constant][51] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %574 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 594), uint16] */, dtype="uint16") /* ty=Tensor[(1, 594), uint16] */;
  %575 = reshape(%570, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %576 = reshape(%571, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %577 = reshape(%572, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %578 = reshape(%573, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %579 = reshape(%574, newshape=[594]) /* ty=Tensor[(594), uint16] */;
  %580 = @func_3848(%575, %576, %577, %578, %579) /* ty=(Tensor[(5, 4, 15), float32], Tensor[(7, 2, 10), float32], Tensor[(140), float32], Tensor[(40), float64], Tensor[(13), int32], Tensor[(594), bool]) */;
  %581 = left_shift(%568, %569) /* ty=Tensor[(14, 9, 14), uint16] */;
  %582 = %580.4;
  (%581, %582, meta[relay.Constant][49] /* ty=Tensor[(300), float32] */, meta[relay.Constant][50] /* ty=Tensor[(140), float32] */, meta[relay.Constant][51] /* ty=Tensor[(40), float64] */, meta[relay.Constant][52] /* ty=Tensor[(1, 594), uint16] */)
}

def @func_7714(%var_7711: Tensor[(36, 16), int8], %var_7712: Tensor[(36, 16), int8], %var_7713: Tensor[(1, 13), int32]) -> (Tensor[(14, 9, 14), float32], Tensor[(36, 16), float32], Tensor[(1890), int16], Tensor[(5, 16, 6), uint32], Tensor[(480), uint32], Tensor[(594), uint64], Tensor[(14, 9, 14), bool], Tensor[(13, 1), int32], int32, Tensor[(1, 13), int32], Tensor[(14, 9, 14), bool], Tensor[(36, 16), float64]) {
  @func_7709(%var_7711, %var_7712, %var_7713) /* ty=(Tensor[(14, 9, 14), float32], Tensor[(36, 16), float32], Tensor[(1890), int16], Tensor[(5, 16, 6), uint32], Tensor[(480), uint32], Tensor[(594), uint64], Tensor[(14, 9, 14), bool], Tensor[(13, 1), int32], int32, Tensor[(1, 13), int32], Tensor[(14, 9, 14), bool], Tensor[(36, 16), float64]) */
}

def @func_8675(%var_8651: float32, %var_8652: Tensor[(6, 16, 1), float32]) -> (Tensor[(6, 16, 1), float32], Tensor[(6, 16, 1), float64], Tensor[(13), int32]) {
  %583 = cast(%var_8651, dtype="float32") /* ty=float32 */;
  %584 = cast(%var_8652, dtype="float32") /* ty=Tensor[(6, 16, 1), float32] */;
  %585 = cast(%var_8652, dtype="float64") /* ty=Tensor[(6, 16, 1), float64] */;
  %586 = divide(%583, %584) /* ty=Tensor[(6, 16, 1), float32] */;
  %587 = log2(%585) /* ty=Tensor[(6, 16, 1), float64] */;
  %588 = @func_7131() /* ty=Tensor[(13), int32] */;
  (%586, %587, %588)
}

def @func_7503() -> Tensor[(13), int32] {
  %589 = fn () -> Tensor[(13), int32] {
    @func_7131() /* ty=Tensor[(13), int32] */
  };
  %589() /* ty=Tensor[(13), int32] */
}

def @func_6839(%var_6821: Tensor[(1890), int16]) -> (Tensor[(1890), float64], Tensor[(1890), int16]) {
  %590 = @func_6680() /* ty=(Tensor[(1890), int16],) */;
  %591 = %590.0;
  %592 = cast(%var_6821, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(1), int32] */;
  %594 = cast(%591, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?), float64] */;
  %596 = @func_6596() /* ty=(Tensor[(1890), int16],) */;
  %597 = floor_divide(%594, %595) /* ty=Tensor[(1890), float64] */;
  %598 = %596.0;
  (%597, %598)
}

def @func_4804(%var_4793: Tensor[(9, 8, 12), float32]) -> (Tensor[(9, 8, 12), bool],) {
  %599 = cast(meta[relay.Constant][53] /* ty=Tensor[(9, 8, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 8, 12), bool] */;
  %600 = shape_of(%var_4793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%var_4793, dtype="bool") /* ty=Tensor[(9, 8, 12), bool] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %603 = not_equal(%601, %602) /* ty=Tensor[(9, 8, 12), bool] */;
  (%603,)
}

def @func_6498() -> Tensor[(14, 9, 14), bool] {
  @func_5689() /* ty=Tensor[(14, 9, 14), bool] */
}

def @func_6345() -> Tensor[(14, 9, 14), float64] {
  %606 = fn () -> Tensor[(14, 9, 14), float64] {
    %604 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
    %605 = cast(%604, dtype="float64") /* ty=Tensor[(14, 9, 14), float64] */;
    sqrt(%605) /* ty=Tensor[(14, 9, 14), float64] */
  };
  %606() /* ty=Tensor[(14, 9, 14), float64] */
}

def @func_3875(%var_3867: Tensor[(10, 11, 6), float64]) -> (Tensor[(10, 11, 6), float64],) {
  %607 = cast(%var_3867, dtype="float64") /* ty=Tensor[(10, 11, 6), float64] */;
  %608 = asinh(%607) /* ty=Tensor[(10, 11, 6), float64] */;
  (%608,)
}

def @func_5724() -> (Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) {
  @func_5722() /* ty=(Tensor[(14, 9, 14), float64], Tensor[(1890), int16], Tensor[(288), float32], Tensor[(594), uint16]) */
}

def @func_6208() -> (Tensor[(14, 9, 14), bool],) {
  %611 = fn () -> (Tensor[(14, 9, 14), bool],) {
    %609 = @func_5593() /* ty=(Tensor[(14, 9, 14), bool],) */;
    %610 = %609.0;
    (%610,)
  };
  %611() /* ty=(Tensor[(14, 9, 14), bool],) */
}

def @func_1796(%var_1794: Tensor[(10, 8, 13), float64]) -> (Tensor[(10, 8, 13), float64],) {
  @func_1793(%var_1794) /* ty=(Tensor[(10, 8, 13), float64],) */
}

def @func_8107() -> (Tensor[(14, 9, 14), bool], Tensor[(1890), bool]) {
  %612 = @func_7576() /* ty=(Tensor[(14, 9, 14), bool], Tensor[(14, 9, 14), bool]) */;
  %613 = @func_6596() /* ty=(Tensor[(1890), int16],) */;
  %614 = %613.0;
  %615 = cast(%614, dtype="float32") /* ty=Tensor[(1890), float32] */;
  %616 = rsqrt(%615) /* ty=Tensor[(1890), float32] */;
  %617 = cast(%614, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(1), int32] */;
  %619 = cast(%616, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?), bool] */;
  %621 = %612.0;
  %622 = less_equal(%619, %620) /* ty=Tensor[(1890), bool] */;
  (%621, %622)
}

def @func_2042(%var_2040: float64, %var_2041: Tensor[(13, 4, 13), float64]) -> (Tensor[(13, 4, 13), float64], Tensor[(13, 4, 1), float32], Tensor[(13, 4, 1), float64]) {
  @func_2038(%var_2040, %var_2041) /* ty=(Tensor[(13, 4, 13), float64], Tensor[(13, 4, 1), float32], Tensor[(13, 4, 1), float64]) */
}

def @func_5495(%var_5491: Tensor[(1, 40), float64], %var_5492: int32, %var_5493: Tensor[(13), int32], %var_5494: Tensor[(14, 9, 14), float32]) -> (Tensor[(13), int32], Tensor[(1, 40), float64], int32, Tensor[(13), int32], Tensor[(14, 9, 14), int32], Tensor[(14, 9, 14), float64], Tensor[(14, 9, 14), bool]) {
  %642 = fn (%var_5471: Tensor[(1, 40), float64], %var_5472: int32, %var_5473: Tensor[(13), int32], %var_5476: Tensor[(14, 9, 14), float32]) -> (Tensor[(13), int32], Tensor[(1, 40), float64], int32, Tensor[(13), int32], Tensor[(14, 9, 14), int32], Tensor[(14, 9, 14), float64], Tensor[(14, 9, 14), bool]) {
    %623 = cast(%var_5471, dtype="float64") /* ty=Tensor[(1, 40), float64] */;
    %624 = cast(%var_5472, dtype="int32") /* ty=int32 */;
    %625 = cast(%var_5473, dtype="int32") /* ty=Tensor[(13), int32] */;
    %626 = reshape(%623, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), float64] */;
    %627 = reshape(%624, newshape=[]) /* ty=int32 */;
    %628 = reshape(%625, newshape=[13]) /* ty=Tensor[(13), int32] */;
    %629 = @func_856(%626, %627, %628) /* ty=(Tensor[(1, 8, 5), float64], Tensor[(13, 1), int32], int32, Tensor[(13), int32]) */;
    %630 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
    %631 = cast(%630, dtype="float32") /* ty=Tensor[(14, 9, 14), float32] */;
    %632 = exp(%631) /* ty=Tensor[(14, 9, 14), float32] */;
    %633 = cast(%var_5476, dtype="int32") /* ty=Tensor[(14, 9, 14), int32] */;
    %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
    %635 = cast(%632, dtype="int32") /* ty=Tensor[(14, 9, 14), int32] */;
    %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %637 = cast(%632, dtype="float64") /* ty=Tensor[(14, 9, 14), float64] */;
    %638 = %629.3;
    %639 = bitwise_xor(%635, %636) /* ty=Tensor[(14, 9, 14), int32] */;
    %640 = atanh(%637) /* ty=Tensor[(14, 9, 14), float64] */;
    %641 = @func_5415() /* ty=Tensor[(14, 9, 14), bool] */;
    (%638, %var_5471, %var_5472, %var_5473, %639, %640, %641)
  };
  %642(%var_5491, %var_5492, %var_5493, %var_5494) /* ty=(Tensor[(13), int32], Tensor[(1, 40), float64], int32, Tensor[(13), int32], Tensor[(14, 9, 14), int32], Tensor[(14, 9, 14), float64], Tensor[(14, 9, 14), bool]) */
}

def @func_789(%var_786: int64, %var_787: Tensor[(1, 14, 10), int64], %var_788: Tensor[(13), int32]) -> (Tensor[(1, 14, 10), bool], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32], Tensor[(13), int32], Tensor[(1, 594), float64], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32]) {
  %672 = fn (%var_711: int64, %var_712: Tensor[(1, 14, 10), int64], %var_754: Tensor[(13), int32]) -> (Tensor[(1, 14, 10), bool], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32], Tensor[(13), int32], Tensor[(1, 594), float64], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32]) {
    %643 = cast(%var_711, dtype="bool") /* ty=bool */;
    %644 = cast(%var_712, dtype="bool") /* ty=Tensor[(1, 14, 10), bool] */;
    %645 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 594), uint16] */, dtype="uint16") /* ty=Tensor[(1, 594), uint16] */;
    %646 = reshape(%645, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), uint16] */;
    %647 = @func_41(%646) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(6, 11, 9), int8]) */;
    %648 = cast(%var_711, dtype="int32") /* ty=int32 */;
    %649 = cast(%var_754, dtype="int32") /* ty=Tensor[(13), int32] */;
    %650 = reshape(%648, newshape=[]) /* ty=int32 */;
    %651 = reshape(%649, newshape=[13, 1]) /* ty=Tensor[(13, 1), int32] */;
    %652 = @func_119(%650, %651) /* ty=(Tensor[(13, 1), int32],) */;
    %653 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 594), uint16] */, dtype="float64") /* ty=Tensor[(1, 594), float64] */;
    %654 = log2(%653) /* ty=Tensor[(1, 594), float64] */;
    %655 = cast(%654, dtype="float32") /* ty=Tensor[(1, 594), float32] */;
    %656 = sqrt(%655) /* ty=Tensor[(1, 594), float32] */;
    %657 = cast(%656, dtype="float64") /* ty=Tensor[(1, 594), float64] */;
    %658 = atan(%657) /* ty=Tensor[(1, 594), float64] */;
    %659 = cast(%658, dtype="uint16") /* ty=Tensor[(1, 594), uint16] */;
    %660 = reshape(%659, newshape=[594]) /* ty=Tensor[(594), uint16] */;
    %661 = @func_329(%660) /* ty=(Tensor[(6, 11, 9), uint16], Tensor[(594), uint16], Tensor[(6, 11, 9), uint16], Tensor[(3, 16, 10), float32], Tensor[(6, 11, 9), uint16]) */;
    %662 = cast(%var_711, dtype="int32") /* ty=int32 */;
    %663 = cast(%var_754, dtype="int32") /* ty=Tensor[(13), int32] */;
    %664 = reshape(%662, newshape=[]) /* ty=int32 */;
    %665 = reshape(%663, newshape=[13, 1]) /* ty=Tensor[(13, 1), int32] */;
    %666 = @func_119(%664, %665) /* ty=(Tensor[(13, 1), int32],) */;
    %667 = equal(%643, %644) /* ty=Tensor[(1, 14, 10), bool] */;
    %668 = %647.0;
    %669 = %652.0;
    %670 = %661.2;
    %671 = %666.0;
    (%667, %668, %669, %var_754, %658, %670, %671)
  };
  %672(%var_786, %var_787, %var_788) /* ty=(Tensor[(1, 14, 10), bool], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32], Tensor[(13), int32], Tensor[(1, 594), float64], Tensor[(6, 11, 9), uint16], Tensor[(13, 1), int32]) */
}

def @func_8218() -> Tensor[(14, 9, 14), uint32] {
  @func_8216() /* ty=Tensor[(14, 9, 14), uint32] */
}

def @func_8238() -> Tensor[(4, 11, 15), bool] {
  %674 = fn () -> Tensor[(4, 11, 15), bool] {
    %673 = @func_7965() /* ty=(Tensor[(4, 11, 15), bool],) */;
    %673.0
  };
  %674() /* ty=Tensor[(4, 11, 15), bool] */
}

def @func_1793(%var_1787: Tensor[(10, 8, 13), float64]) -> (Tensor[(10, 8, 13), float64],) {
  %675 = cast(%var_1787, dtype="float64") /* ty=Tensor[(10, 8, 13), float64] */;
  %676 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(10, 8, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(meta[relay.Constant][55] /* ty=Tensor[(10, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 13), float64] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %679 = power(%677, %678) /* ty=Tensor[(10, 8, 13), float64] */;
  (%679,)
}

def @func_6681() -> (Tensor[(1890), int16],) {
  %682 = fn () -> (Tensor[(1890), int16],) {
    %680 = @func_6596() /* ty=(Tensor[(1890), int16],) */;
    %681 = %680.0;
    (%681,)
  };
  %682() /* ty=(Tensor[(1890), int16],) */
}

def @func_5689() -> Tensor[(14, 9, 14), bool] {
  @func_5415() /* ty=Tensor[(14, 9, 14), bool] */
}

def @func_480(%var_478: Tensor[(1, 14, 14), float32], %var_479: Tensor[(3, 14, 14), float32]) -> (Tensor[(3, 14, 14), int32], Tensor[(?, 14, 14), bool]) {
  %695 = fn (%var_426: Tensor[(1, 14, 14), float32], %var_447: Tensor[(3, 14, 14), float32]) -> (Tensor[(3, 14, 14), int32], Tensor[(?, 14, 14), bool]) {
    %683 = cast(%var_426, dtype="float32") /* ty=Tensor[(1, 14, 14), float32] */;
    %684 = sigmoid(%683) /* ty=Tensor[(1, 14, 14), float32] */;
    %685 = cast(%684, dtype="int32") /* ty=Tensor[(1, 14, 14), int32] */;
    %686 = cast(%var_447, dtype="int32") /* ty=Tensor[(3, 14, 14), int32] */;
    %687 = cast(%var_426, dtype="float32") /* ty=Tensor[(1, 14, 14), float32] */;
    %688 = log10(%687) /* ty=Tensor[(1, 14, 14), float32] */;
    %689 = cast(%684, dtype="bool") /* ty=Tensor[(1, 14, 14), bool] */;
    %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
    %691 = cast(%688, dtype="bool") /* ty=Tensor[(1, 14, 14), bool] */;
    %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %693 = add(%685, %686) /* ty=Tensor[(3, 14, 14), int32] */;
    %694 = less(%691, %692) /* ty=Tensor[(?, 14, 14), bool] */;
    (%693, %694)
  };
  %695(%var_478, %var_479) /* ty=(Tensor[(3, 14, 14), int32], Tensor[(?, 14, 14), bool]) */
}

def @func_4531(%var_4523: int64) -> (Tensor[(1, 4, 2), int64],) {
  %696 = cast(%var_4523, dtype="int64") /* ty=int64 */;
  %697 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 4, 2), int64] */, dtype="int64") /* ty=Tensor[(1, 4, 2), int64] */;
  %698 = right_shift(%696, %697) /* ty=Tensor[(1, 4, 2), int64] */;
  (%698,)
}

def @func_1740(%var_1736: float32, %var_1737: Tensor[(11, 3, 1), float32], %var_1738: Tensor[(40), float64], %var_1739: Tensor[(13), int32]) -> (Tensor[(11, 3, 1), float32], Tensor[(1, 8, 5), float64], Tensor[(40), float64], Tensor[(13), int32]) {
  %710 = fn (%var_1720: float32, %var_1721: Tensor[(11, 3, 1), float32], %var_1728: Tensor[(40), float64], %var_1729: Tensor[(13), int32]) -> (Tensor[(11, 3, 1), float32], Tensor[(1, 8, 5), float64], Tensor[(40), float64], Tensor[(13), int32]) {
    %699 = cast(%var_1720, dtype="float32") /* ty=float32 */;
    %700 = cast(%var_1721, dtype="float32") /* ty=Tensor[(11, 3, 1), float32] */;
    %701 = cast(%var_1728, dtype="float64") /* ty=Tensor[(40), float64] */;
    %702 = cast(%var_1720, dtype="int32") /* ty=int32 */;
    %703 = cast(%var_1729, dtype="int32") /* ty=Tensor[(13), int32] */;
    %704 = reshape(%701, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), float64] */;
    %705 = reshape(%702, newshape=[]) /* ty=int32 */;
    %706 = reshape(%703, newshape=[13]) /* ty=Tensor[(13), int32] */;
    %707 = @func_856(%704, %705, %706) /* ty=(Tensor[(1, 8, 5), float64], Tensor[(13, 1), int32], int32, Tensor[(13), int32]) */;
    %708 = maximum(%699, %700) /* ty=Tensor[(11, 3, 1), float32] */;
    %709 = %707.0;
    (%708, %709, %var_1728, %var_1729)
  };
  %710(%var_1736, %var_1737, %var_1738, %var_1739) /* ty=(Tensor[(11, 3, 1), float32], Tensor[(1, 8, 5), float64], Tensor[(40), float64], Tensor[(13), int32]) */
}

def @func_4395(%var_4380: Tensor[(11, 7, 1), uint32], %var_4381: Tensor[(11, 7, 14), uint32]) -> (Tensor[(11, 7, 14), uint32], Tensor[(13, 16, 16), bool], Tensor[(208), uint64], Tensor[(8, 416), uint64]) {
  %711 = cast(%var_4380, dtype="uint32") /* ty=Tensor[(11, 7, 1), uint32] */;
  %712 = cast(%var_4381, dtype="uint32") /* ty=Tensor[(11, 7, 14), uint32] */;
  %713 = cast(meta[relay.Constant][57] /* ty=Tensor[(208), uint64] */, dtype="uint64") /* ty=Tensor[(208), uint64] */;
  %714 = cast(meta[relay.Constant][58] /* ty=Tensor[(8, 416), uint64] */, dtype="uint64") /* ty=Tensor[(8, 416), uint64] */;
  %715 = reshape(%713, newshape=[13, 1, 16]) /* ty=Tensor[(13, 1, 16), uint64] */;
  %716 = reshape(%714, newshape=[13, 16, 16]) /* ty=Tensor[(13, 16, 16), uint64] */;
  %717 = bitwise_xor(%711, %712) /* ty=Tensor[(11, 7, 14), uint32] */;
  %718 = @func_2967(%715, %716) /* ty=Tensor[(13, 16, 16), bool] */;
  (%717, %718, meta[relay.Constant][57] /* ty=Tensor[(208), uint64] */, meta[relay.Constant][58] /* ty=Tensor[(8, 416), uint64] */)
}

def @func_8109() -> (Tensor[(14, 9, 14), bool], Tensor[(1890), bool]) {
  @func_8107() /* ty=(Tensor[(14, 9, 14), bool], Tensor[(1890), bool]) */
}

def @func_6866(%var_6853: int64) -> (Tensor[(14, 4, 13), int64], Tensor[(14, 9, 14), bool]) {
  %719 = cast(%var_6853, dtype="int64") /* ty=int64 */;
  %720 = cast(meta[relay.Constant][59] /* ty=Tensor[(14, 4, 13), int64] */, dtype="int64") /* ty=Tensor[(14, 4, 13), int64] */;
  %721 = @func_5778() /* ty=(Tensor[(14, 9, 14), bool],) */;
  %722 = multiply(%719, %720) /* ty=Tensor[(14, 4, 13), int64] */;
  %723 = %721.0;
  (%722, %723)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen472/build/output.py:1685: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen472/build/output.py:1690: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen472/build/output.py:1707: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen472/build/output.py:1712: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen472/build/output.py:1717: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen472/build/output.py:1722: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
def @main() -> Tensor[(14, 6, 7), float32] {
  meta[relay.Constant][0] /* ty=Tensor[(14, 6, 7), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
