import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_16 = relay.const([[[-8,2,5,6,-3,-10,1,-8,-5],[-2,-3,3,-3,2,-10,-5,-9,6],[4,2,3,6,7,10,10,3,7],[5,-5,-7,7,-5,-1,-2,1,4],[5,-1,5,8,-5,1,7,10,-2],[-6,1,7,4,-6,-1,-2,2,3],[-7,5,10,-2,1,-8,10,-3,-9],[2,-8,-8,-1,-7,4,-2,-1,-10],[2,-9,-3,5,-4,4,-7,-7,-5],[3,-5,-10,-2,-1,9,7,3,-4],[4,-4,6,-4,-4,-7,5,-6,-2]],[[-3,-1,9,-6,-3,2,-7,-5,-7],[-9,-5,1,4,3,8,8,-2,-6],[1,7,10,9,8,-10,-8,-7,4],[6,3,9,5,-5,-8,-9,-2,1],[8,9,6,4,-10,7,-6,-3,-10],[-2,-2,5,-7,-7,3,-1,9,-8],[1,7,10,7,-6,-6,-3,-5,-7],[-4,-5,5,10,6,6,-2,-5,-10],[4,-2,8,-9,8,3,-2,-2,-10],[4,3,-7,5,7,2,-6,5,-9],[8,3,9,3,-4,10,-2,-4,-4]],[[3,2,-1,7,1,5,-6,-7,1],[6,-9,9,-4,2,3,9,-7,-5],[-5,6,-8,-7,6,-5,10,-10,-4],[8,9,6,-8,-7,-7,-3,-5,-2],[10,7,-3,-4,6,2,3,7,-2],[4,-1,-4,3,3,-6,1,2,3],[-4,10,1,7,-2,5,-9,-3,-10],[-9,4,-3,6,-8,3,6,10,-7],[-10,4,1,7,10,10,-6,-3,2],[-3,-9,9,-4,-1,-2,5,3,5],[9,-3,9,9,4,-6,-7,7,9]],[[9,-2,8,-9,8,-2,-5,3,2],[-1,9,-4,-4,-5,-10,-6,10,1],[3,-2,-1,4,-9,-4,-8,3,-2],[4,9,-6,6,8,-1,-5,-9,5],[-1,-6,5,3,-4,-3,-3,-2,-8],[3,-10,9,10,-4,-9,8,10,-4],[1,8,-4,-2,10,1,-2,-10,-5],[-2,3,5,8,3,7,-1,-5,-6],[2,5,-3,7,-3,8,6,-5,7],[-10,-5,-1,2,-3,-2,5,-8,-5],[-9,6,1,-9,3,7,-4,-5,2]],[[1,9,-5,4,7,2,-5,-4,4],[7,2,9,-10,-6,2,-2,-6,-9],[-3,2,-7,10,7,4,-1,7,1],[-5,-9,-7,-1,-7,1,9,-1,2],[7,-9,-7,-8,-4,-4,-10,-5,9],[3,-10,-8,-8,-4,10,-6,-9,-3],[-8,7,-7,4,-7,10,10,6,4],[2,5,-1,-4,-1,-2,1,7,-3],[-8,-2,7,-1,-5,-8,2,-1,9],[-1,-10,8,-9,3,9,-10,2,-4],[-6,-7,-3,-10,-8,4,-6,10,9]],[[8,-9,6,9,-6,2,2,-6,-8],[4,6,2,9,4,4,7,3,-4],[-5,9,-4,3,8,4,8,6,10],[-5,6,8,5,1,-3,-1,6,10],[-10,5,-2,-1,-7,-6,5,-5,3],[8,-9,7,3,-10,7,-8,-5,-2],[2,-9,2,-5,9,7,-5,9,5],[-8,4,-5,10,-8,6,3,-5,6],[-8,-4,3,8,-8,2,4,10,-7],[-1,-10,-3,-8,6,-7,-1,-5,3],[-8,-6,9,-10,7,3,6,-3,10]]], dtype = "uint16")#candidate|16|(6, 11, 9)|const|uint16
const_17 = relay.const([[[-9,2,10,3,10,-9,-8,3,10],[-2,-7,-6,-10,4,-9,3,-2,2],[-9,-8,-6,-9,-8,6,-4,10,1],[-6,6,-8,-2,3,-4,-6,1,5],[2,2,8,-8,8,6,6,2,-3],[-7,1,-9,-4,-9,10,2,10,2],[4,10,7,-3,9,7,8,-9,1],[-6,-4,1,1,-5,-1,-6,-8,7],[4,10,-7,-9,8,-6,5,-7,-6],[-4,6,-9,8,-2,-4,4,10,5],[-1,-4,2,2,-1,8,-9,-6,4]],[[4,1,-8,4,4,6,-1,4,7],[-5,-5,8,-8,8,4,1,1,1],[-8,-3,-8,4,5,-7,5,-1,-10],[6,8,2,-3,9,5,-7,-6,7],[-9,-3,8,7,4,6,9,-2,5],[8,-6,-5,-10,6,-3,9,-4,6],[-4,9,-1,2,6,-6,7,-2,2],[8,10,-7,8,4,-10,-6,-3,2],[10,3,-7,9,-2,1,-8,5,2],[2,-8,4,9,2,-6,8,-10,4],[-10,3,3,6,-4,1,3,-8,2]],[[-6,-3,-4,5,-5,-3,-4,1,2],[3,7,-1,3,-4,2,4,-8,8],[-4,-4,-8,7,7,-9,-3,-9,2],[-1,-1,-8,10,2,-9,-9,-3,-3],[9,3,9,7,8,4,-5,5,-9],[-10,6,-6,2,7,2,6,-3,7],[5,-6,9,1,5,1,-10,3,-3],[-9,8,-10,-8,-2,-7,5,-3,3],[10,-8,-1,-9,8,-4,-4,-5,1],[-3,-2,-9,1,1,4,-8,9,1],[4,8,3,4,5,10,-5,-4,-5]],[[5,9,-4,1,9,-7,-7,-10,5],[-7,1,-10,-9,-3,3,-9,5,-6],[3,10,-5,-2,-10,-9,8,-7,9],[1,4,10,1,8,9,5,-3,-6],[2,3,2,10,-8,-2,-4,-3,-8],[-6,4,9,9,-5,-8,1,9,-3],[-3,-5,-10,8,-2,2,3,3,3],[-1,3,-3,5,3,7,6,-1,-3],[-8,6,-1,1,8,3,3,4,-8],[-9,2,-8,9,2,-3,-4,-5,2],[-1,-2,-5,10,9,-6,-2,1,-8]],[[-4,-10,-9,-1,-5,-3,4,10,-3],[-1,4,9,-8,-6,7,-5,-3,7],[-2,-4,7,-6,1,7,10,9,1],[-4,10,-5,6,-8,-8,10,5,7],[-3,-3,8,10,-1,3,-6,-8,-9],[-3,-6,3,-6,-4,-8,3,5,-8],[9,2,-7,-1,-2,-1,-3,-5,5],[-2,2,4,-8,-3,-4,-7,-9,2],[-4,10,1,8,-6,-4,2,4,6],[5,-4,7,9,10,5,-7,4,-6],[9,-10,6,7,-3,-1,8,3,4]],[[1,-5,5,-4,10,10,-4,7,-5],[9,-10,-5,-3,7,-5,7,-6,7],[-2,-2,9,-8,2,-7,10,-2,-10],[1,10,-9,-7,-8,-9,-4,8,-5],[9,-9,1,-1,4,1,-10,9,-10],[-2,-7,2,7,-8,4,-1,-9,8],[-8,2,2,-8,-8,10,-7,7,-5],[1,6,9,3,5,-10,-3,-1,10],[10,6,7,8,-10,-10,-5,-1,10],[-3,1,6,-2,-10,4,8,10,-2],[2,2,6,-1,5,-3,3,8,5]]], dtype = "uint16")#candidate|17|(6, 11, 9)|const|uint16
bop_18 = relay.bitwise_and(const_16.astype('uint16'), relay.reshape(const_17.astype('uint16'), relay.shape_of(const_16))) # shape=(6, 11, 9)
var_23 = relay.var("var_23", dtype = "uint16", shape = (6, 11, 9))#candidate|23|(6, 11, 9)|var|uint16
bop_24 = relay.multiply(const_16.astype('int8'), relay.reshape(var_23.astype('int8'), relay.shape_of(const_16))) # shape=(6, 11, 9)
output = relay.Tuple([bop_18,bop_24,])
output2 = relay.Tuple([bop_18,bop_24,])
func_41 = relay.Function([var_23,], output)
mod['func_41'] = func_41
mod = relay.transform.InferType()(mod)
var_42 = relay.var("var_42", dtype = "uint16", shape = (6, 11, 9))#candidate|42|(6, 11, 9)|var|uint16
output = func_41(var_42)
func_43 = relay.Function([var_42], output)
mutated_mod['func_43'] = func_43
mutated_mod = relay.transform.InferType()(mutated_mod)
var_109 = relay.var("var_109", dtype = "int32", shape = ())#candidate|109|()|var|int32
var_110 = relay.var("var_110", dtype = "int32", shape = (13, 1))#candidate|110|(13, 1)|var|int32
bop_111 = relay.bitwise_and(var_109.astype('int32'), var_110.astype('int32')) # shape=(13, 1)
output = relay.Tuple([bop_111,])
output2 = relay.Tuple([bop_111,])
func_119 = relay.Function([var_109,var_110,], output)
mod['func_119'] = func_119
mod = relay.transform.InferType()(mod)
mutated_mod['func_119'] = func_119
mutated_mod = relay.transform.InferType()(mutated_mod)
func_119_call = mutated_mod.get_global_var('func_119')
var_121 = relay.var("var_121", dtype = "int32", shape = ())#candidate|121|()|var|int32
var_122 = relay.var("var_122", dtype = "int32", shape = (13, 1))#candidate|122|(13, 1)|var|int32
call_120 = func_119_call(var_121,var_122,)
output = call_120
func_123 = relay.Function([var_121,var_122,], output)
mutated_mod['func_123'] = func_123
mutated_mod = relay.transform.InferType()(mutated_mod)
const_283 = relay.const([[[1.543275,9.756398,-6.945893,4.663314,-9.412907,-3.545730,-6.793583,-3.337274,0.479520,-8.167003],[-1.912131,1.129011,-8.849786,2.951055,-0.271794,2.482538,7.669765,8.097140,-1.613291,-2.620034],[7.380007,3.331592,-4.101424,8.112600,2.653104,5.756754,-7.293011,-4.067126,-0.007833,-2.059775],[-1.373412,-5.689903,-2.854903,1.541661,6.150312,3.856193,-3.862181,-1.546948,-6.104129,-2.153699],[5.022532,-5.675679,9.751065,-4.204098,-9.839949,-4.429569,-1.567954,-2.679699,-0.760243,-7.083349],[5.569352,1.380990,-2.845173,-4.557545,2.047405,-3.564624,-0.705470,-2.624814,7.908092,-3.513499],[9.168745,-4.234730,0.535287,-1.395446,5.772270,2.468945,-4.864881,-7.318525,-3.787172,-6.765515],[-5.278428,2.481105,9.496867,-4.313197,-9.622521,-7.426266,9.451056,-7.905003,0.545802,9.907410],[1.436585,2.160942,8.841995,-6.886307,-6.667014,2.237475,0.964072,-9.223473,-9.914816,-5.516262],[6.496258,6.966726,1.704416,1.016933,-6.649855,4.686788,-1.536558,-9.665096,0.481318,9.581528],[3.841753,-8.193865,7.333260,7.917277,4.877554,7.314572,-2.559328,7.646537,-7.322413,-5.204664],[8.913944,-6.632107,-2.511224,9.317892,2.802979,7.113343,5.285470,6.710759,-1.664100,2.569082],[-7.337283,-9.641317,3.839965,7.651757,7.911847,-3.121263,4.190938,-3.935630,8.580098,8.913241],[-8.168538,0.718568,-1.449856,2.753009,3.151210,-7.837201,3.859750,-3.425695,3.913686,-4.879993],[4.492790,7.253327,9.322463,-3.682867,-7.908772,8.810291,9.585078,-1.132190,9.451710,-8.692771],[-6.941690,0.624336,-0.526661,-6.798397,3.369585,-8.623406,-7.962227,8.522452,6.295117,-2.285632]],[[-1.093636,-7.601670,9.911960,5.382996,-0.264241,1.536865,6.069188,-8.492776,4.473762,4.508542],[4.377419,5.761720,1.468207,2.296460,3.027369,-9.215459,2.900580,5.593649,-1.913419,-6.630526],[-3.125498,9.714152,-4.572988,1.258021,9.029322,-7.156929,-3.068359,-7.486230,-4.161456,-5.611927],[3.897896,3.102519,-1.026592,2.338324,-6.781796,1.019467,-4.941847,-6.342150,2.136824,-2.656534],[-4.463705,1.777568,-4.015230,-9.463051,-8.922214,-2.897167,-8.587062,-8.620075,-9.827931,9.531149],[9.413479,-3.498051,1.800426,-0.388621,-6.083800,0.483810,3.702309,-5.544655,-3.804891,3.074038],[7.063120,6.657571,0.507191,-6.043493,2.085045,-7.496523,5.760984,-9.228682,6.547077,1.834424],[1.509982,-9.266160,6.550001,8.901985,-4.608297,-2.667972,-0.884755,5.759338,-9.546950,-5.131337],[4.199504,-7.886836,7.388682,3.704173,-3.236699,-1.234469,-8.732761,-7.074353,7.769228,1.363785],[-5.279271,-7.254498,1.302903,3.473026,1.357543,-4.922782,-6.576598,2.565482,2.622361,7.188427],[4.374019,-0.604052,-1.420784,-3.442666,-3.072993,5.715358,4.566373,7.066211,5.502148,-7.012111],[-7.993673,5.775561,-0.821337,-3.417396,-5.669287,8.442506,-8.212922,6.963246,-3.179596,-1.693026],[7.259364,-9.692749,8.378379,-7.959230,-8.261029,-1.984485,2.462715,5.490209,-9.364380,1.462453],[8.999048,3.855034,-0.558199,0.700831,-6.565535,2.645179,1.687161,-3.955531,-2.340099,-4.038138],[-2.855927,0.627531,-8.606197,9.902778,6.727497,4.630815,9.246150,-1.919802,2.721104,-0.529559],[9.872600,-2.585666,0.105018,-2.139067,1.731364,-9.341410,4.586046,0.715306,5.058404,-8.319331]],[[6.245881,0.084967,-8.779711,6.572673,1.979302,0.296803,1.955218,-8.816791,3.481061,-9.335464],[8.192054,-4.070940,2.963608,-3.302634,-0.538847,8.124268,4.818845,-0.941611,-1.331163,5.552265],[3.203248,-2.432988,-8.575892,-2.455301,3.533363,-7.495491,2.812912,4.768843,-5.434548,3.424095],[5.553342,3.734175,-5.756245,-0.569486,1.730928,-9.865892,6.604979,0.688424,6.395705,2.094130],[8.738121,3.148415,-5.299292,4.077020,9.112666,5.310634,8.711053,5.169540,-9.721326,-0.656122],[1.254042,-0.964713,3.026961,5.519722,4.642333,-3.434438,-9.827978,-6.640838,-1.648288,-5.960676],[-9.365160,-2.422297,-3.781057,6.501214,-9.133858,-7.128022,4.000879,-5.926212,-8.635043,6.889947],[-2.792182,-9.099578,-2.627602,5.039639,-7.971765,-5.590273,1.886975,-8.331790,-8.948562,-9.412099],[3.259907,-3.070772,1.089906,-6.923051,-3.560701,-3.235220,7.215268,-7.629865,2.079311,-9.393726],[6.561939,-1.159970,-2.400961,-9.425093,0.031120,1.192255,3.167031,2.359740,-3.668577,-6.838686],[0.893388,6.010086,-4.274550,-2.000040,1.268431,0.041301,2.169075,5.361644,8.613973,-0.083593],[-8.317218,8.587561,-4.721026,-4.713109,-1.046998,2.529879,9.231199,-7.644775,-7.216633,9.590149],[-3.847058,-9.618013,9.379827,8.022745,4.510440,9.116692,9.544147,7.676450,8.742265,-0.858779],[2.992047,1.235730,-5.242743,-2.871188,4.212948,-5.594733,-9.279042,5.616930,-4.968448,-2.548289],[4.193142,2.438253,3.361512,-7.606453,-0.358450,-7.225265,-4.282875,7.840690,-8.326156,-9.842712],[5.991630,9.504420,8.232757,9.960200,5.675876,-2.737904,4.329506,8.163737,-3.331850,2.499647]]], dtype = "float64")#candidate|283|(3, 16, 10)|const|float64
uop_284 = relay.exp(const_283.astype('float64')) # shape=(3, 16, 10)
func_41_call = mod.get_global_var('func_41')
func_43_call = mutated_mod.get_global_var('func_43')
var_297 = relay.var("var_297", dtype = "uint16", shape = (594,))#candidate|297|(594,)|var|uint16
call_296 = relay.TupleGetItem(func_41_call(relay.reshape(var_297.astype('uint16'), [6, 11, 9])), 0)
call_298 = relay.TupleGetItem(func_43_call(relay.reshape(var_297.astype('uint16'), [6, 11, 9])), 0)
func_41_call = mod.get_global_var('func_41')
func_43_call = mutated_mod.get_global_var('func_43')
call_303 = relay.TupleGetItem(func_41_call(relay.reshape(var_297.astype('uint16'), [6, 11, 9])), 0)
call_304 = relay.TupleGetItem(func_43_call(relay.reshape(var_297.astype('uint16'), [6, 11, 9])), 0)
uop_306 = relay.atan(uop_284.astype('float32')) # shape=(3, 16, 10)
func_41_call = mod.get_global_var('func_41')
func_43_call = mutated_mod.get_global_var('func_43')
call_312 = relay.TupleGetItem(func_41_call(relay.reshape(call_296.astype('uint16'), [6, 11, 9])), 0)
call_313 = relay.TupleGetItem(func_43_call(relay.reshape(call_296.astype('uint16'), [6, 11, 9])), 0)
output = relay.Tuple([call_296,var_297,call_303,uop_306,call_312,])
output2 = relay.Tuple([call_298,var_297,call_304,uop_306,call_313,])
func_329 = relay.Function([var_297,], output)
mod['func_329'] = func_329
mod = relay.transform.InferType()(mod)
var_330 = relay.var("var_330", dtype = "uint16", shape = (594,))#candidate|330|(594,)|var|uint16
output = func_329(var_330)
func_331 = relay.Function([var_330], output)
mutated_mod['func_331'] = func_331
mutated_mod = relay.transform.InferType()(mutated_mod)
var_426 = relay.var("var_426", dtype = "float32", shape = (1, 14, 14))#candidate|426|(1, 14, 14)|var|float32
uop_427 = relay.log10(var_426.astype('float32')) # shape=(1, 14, 14)
uop_445 = relay.sigmoid(var_426.astype('float32')) # shape=(1, 14, 14)
var_447 = relay.var("var_447", dtype = "float32", shape = (3, 14, 14))#candidate|447|(3, 14, 14)|var|float32
bop_448 = relay.add(uop_445.astype('int32'), var_447.astype('int32')) # shape=(3, 14, 14)
bop_461 = relay.less(uop_427.astype('bool'), relay.reshape(uop_445.astype('bool'), relay.shape_of(uop_427))) # shape=(1, 14, 14)
output = relay.Tuple([bop_448,bop_461,])
output2 = relay.Tuple([bop_448,bop_461,])
func_477 = relay.Function([var_426,var_447,], output)
mod['func_477'] = func_477
mod = relay.transform.InferType()(mod)
var_478 = relay.var("var_478", dtype = "float32", shape = (1, 14, 14))#candidate|478|(1, 14, 14)|var|float32
var_479 = relay.var("var_479", dtype = "float32", shape = (3, 14, 14))#candidate|479|(3, 14, 14)|var|float32
output = func_477(var_478,var_479,)
func_480 = relay.Function([var_478,var_479,], output)
mutated_mod['func_480'] = func_480
mutated_mod = relay.transform.InferType()(mutated_mod)
var_711 = relay.var("var_711", dtype = "int64", shape = ())#candidate|711|()|var|int64
var_712 = relay.var("var_712", dtype = "int64", shape = (1, 14, 10))#candidate|712|(1, 14, 10)|var|int64
bop_713 = relay.equal(var_711.astype('bool'), var_712.astype('bool')) # shape=(1, 14, 10)
func_41_call = mod.get_global_var('func_41')
func_43_call = mutated_mod.get_global_var('func_43')
const_730 = relay.const([[5,5,10,9,-3,4,8,-2,-4,-4,3,-5,-3,3,-8,4,-6,7,8,2,10,1,-5,7,-3,6,-2,-9,5,-1,-8,4,-7,-9,-1,-8,-8,9,3,-3,-8,10,-1,7,4,10,-4,-5,-9,5,7,1,2,9,7,-10,4,-4,-3,-2,8,9,6,2,10,5,1,-5,7,10,7,-6,-2,-5,-1,3,8,-9,6,2,-9,5,3,4,-3,4,4,10,-10,2,1,1,5,-4,1,1,2,-1,6,-7,-10,9,-8,-2,4,-10,-7,-2,10,7,3,3,-4,2,-2,10,-7,7,-8,6,5,4,-8,6,6,3,-3,-5,-5,-8,-8,-10,-7,-2,8,-6,-7,-4,-1,-5,8,-4,-6,-10,10,7,-4,2,-6,8,-4,6,5,6,-4,2,-1,-3,-7,-10,-10,-4,-8,8,1,-9,-8,-4,-6,-10,-3,2,-1,3,-9,5,-3,-4,5,4,-7,9,-9,2,-5,-8,7,2,-7,5,1,-5,-1,5,2,2,-4,7,-5,-1,-3,9,-10,-7,-8,-5,2,-3,-3,-7,-10,6,-1,9,4,-6,-8,-7,4,5,4,-10,2,-9,2,9,6,-5,-10,3,-4,-3,4,1,3,9,-6,6,-2,10,-3,-5,-4,-8,-5,-10,-9,-3,10,10,-2,3,-10,5,-5,6,-7,9,-1,8,9,9,9,-1,-8,4,-2,9,7,-5,-10,-4,-4,-8,1,3,4,-6,-5,-1,7,-2,-4,10,4,6,8,3,-3,7,9,-4,3,3,6,-9,-1,4,2,7,-1,2,-2,-1,7,1,-7,6,-4,6,-5,4,7,-9,4,-7,-10,-4,3,1,1,-4,6,10,1,9,2,9,-3,-8,-8,-10,3,5,9,-6,8,1,-1,4,-7,-5,-10,8,-7,-8,3,-5,4,-2,6,5,7,-7,-9,10,6,6,-4,-7,3,7,-5,-2,-2,4,-2,1,-7,10,9,-1,-9,-1,1,5,-5,-10,7,-1,-4,-9,4,-10,8,4,-1,-4,-3,-3,-3,8,1,10,10,6,-6,2,5,-8,1,-2,-10,3,9,8,2,-4,6,8,-5,1,9,1,5,-9,-3,1,5,-5,-9,10,2,4,-8,-5,-9,6,2,-4,-7,7,1,-1,1,-3,-2,-2,7,-6,8,-9,10,5,-3,10,9,9,-5,-8,-10,-9,-4,-9,-6,-7,6,1,1,9,4,-3,-7,7,-5,-10,-6,7,9,2,-1,-2,-4,3,1,-1,-3,2,-9,4,3,-8,7,8,1,3,-8,-9,10,-2,-5,-9,-9,10,9,-3,2,-1,1,4,1,6,-4,4,8,-6,6,3,6,7,-9,-2,-6,-9,4,8,1,-5,-8,9,-2,9,8,-7,-7,-4,5,-7,-8,-5,-8,-8,-7,-3,1,-1,5,-2,5,-1,-2,-9,8,-7,10,9,-6,-8,9,10,-3,10,4,-5,9,-9,9,-9,4,3,9,4,8,-10,5,-4,2,10,-8,-5,9,10,-2,6,5,9,-3,9,7,6,-1,2,-8,1,7,3,-10,5,9,9,1,8,-3,5]], dtype = "uint16")#candidate|730|(1, 594)|const|uint16
call_729 = relay.TupleGetItem(func_41_call(relay.reshape(const_730.astype('uint16'), [6, 11, 9])), 0)
call_731 = relay.TupleGetItem(func_43_call(relay.reshape(const_730.astype('uint16'), [6, 11, 9])), 0)
uop_735 = relay.log2(const_730.astype('float64')) # shape=(1, 594)
uop_745 = relay.sqrt(uop_735.astype('float32')) # shape=(1, 594)
func_119_call = mod.get_global_var('func_119')
func_123_call = mutated_mod.get_global_var('func_123')
var_754 = relay.var("var_754", dtype = "int32", shape = (13,))#candidate|754|(13,)|var|int32
call_753 = relay.TupleGetItem(func_119_call(relay.reshape(var_711.astype('int32'), []), relay.reshape(var_754.astype('int32'), [13, 1]), ), 0)
call_755 = relay.TupleGetItem(func_123_call(relay.reshape(var_711.astype('int32'), []), relay.reshape(var_754.astype('int32'), [13, 1]), ), 0)
uop_760 = relay.atan(uop_745.astype('float64')) # shape=(1, 594)
func_329_call = mod.get_global_var('func_329')
func_331_call = mutated_mod.get_global_var('func_331')
call_769 = relay.TupleGetItem(func_329_call(relay.reshape(uop_760.astype('uint16'), [594,])), 2)
call_770 = relay.TupleGetItem(func_331_call(relay.reshape(uop_760.astype('uint16'), [594,])), 2)
func_119_call = mod.get_global_var('func_119')
func_123_call = mutated_mod.get_global_var('func_123')
call_776 = relay.TupleGetItem(func_119_call(relay.reshape(var_711.astype('int32'), []), relay.reshape(var_754.astype('int32'), [13, 1]), ), 0)
call_777 = relay.TupleGetItem(func_123_call(relay.reshape(var_711.astype('int32'), []), relay.reshape(var_754.astype('int32'), [13, 1]), ), 0)
output = relay.Tuple([bop_713,call_729,call_753,var_754,uop_760,call_769,call_776,])
output2 = relay.Tuple([bop_713,call_731,call_755,var_754,uop_760,call_770,call_777,])
func_785 = relay.Function([var_711,var_712,var_754,], output)
mod['func_785'] = func_785
mod = relay.transform.InferType()(mod)
var_786 = relay.var("var_786", dtype = "int64", shape = ())#candidate|786|()|var|int64
var_787 = relay.var("var_787", dtype = "int64", shape = (1, 14, 10))#candidate|787|(1, 14, 10)|var|int64
var_788 = relay.var("var_788", dtype = "int32", shape = (13,))#candidate|788|(13,)|var|int32
output = func_785(var_786,var_787,var_788,)
func_789 = relay.Function([var_786,var_787,var_788,], output)
mutated_mod['func_789'] = func_789
mutated_mod = relay.transform.InferType()(mutated_mod)
var_840 = relay.var("var_840", dtype = "float64", shape = (1, 8, 5))#candidate|840|(1, 8, 5)|var|float64
uop_841 = relay.atanh(var_840.astype('float64')) # shape=(1, 8, 5)
uop_848 = relay.cosh(uop_841.astype('float64')) # shape=(1, 8, 5)
func_119_call = mod.get_global_var('func_119')
func_123_call = mutated_mod.get_global_var('func_123')
var_852 = relay.var("var_852", dtype = "int32", shape = ())#candidate|852|()|var|int32
var_853 = relay.var("var_853", dtype = "int32", shape = (13,))#candidate|853|(13,)|var|int32
call_851 = relay.TupleGetItem(func_119_call(relay.reshape(var_852.astype('int32'), []), relay.reshape(var_853.astype('int32'), [13, 1]), ), 0)
call_854 = relay.TupleGetItem(func_123_call(relay.reshape(var_852.astype('int32'), []), relay.reshape(var_853.astype('int32'), [13, 1]), ), 0)
output = relay.Tuple([uop_848,call_851,var_852,var_853,])
output2 = relay.Tuple([uop_848,call_854,var_852,var_853,])
func_856 = relay.Function([var_840,var_852,var_853,], output)
mod['func_856'] = func_856
mod = relay.transform.InferType()(mod)
var_857 = relay.var("var_857", dtype = "float64", shape = (1, 8, 5))#candidate|857|(1, 8, 5)|var|float64
var_858 = relay.var("var_858", dtype = "int32", shape = ())#candidate|858|()|var|int32
var_859 = relay.var("var_859", dtype = "int32", shape = (13,))#candidate|859|(13,)|var|int32
output = func_856(var_857,var_858,var_859,)
func_860 = relay.Function([var_857,var_858,var_859,], output)
mutated_mod['func_860'] = func_860
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1033 = relay.var("var_1033", dtype = "int32", shape = (7, 10, 11))#candidate|1033|(7, 10, 11)|var|int32
var_1034 = relay.var("var_1034", dtype = "int32", shape = (7, 10, 11))#candidate|1034|(7, 10, 11)|var|int32
bop_1035 = relay.subtract(var_1033.astype('int32'), relay.reshape(var_1034.astype('int32'), relay.shape_of(var_1033))) # shape=(7, 10, 11)
output = relay.Tuple([bop_1035,])
output2 = relay.Tuple([bop_1035,])
func_1047 = relay.Function([var_1033,var_1034,], output)
mod['func_1047'] = func_1047
mod = relay.transform.InferType()(mod)
mutated_mod['func_1047'] = func_1047
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1047_call = mutated_mod.get_global_var('func_1047')
var_1049 = relay.var("var_1049", dtype = "int32", shape = (7, 10, 11))#candidate|1049|(7, 10, 11)|var|int32
var_1050 = relay.var("var_1050", dtype = "int32", shape = (7, 10, 11))#candidate|1050|(7, 10, 11)|var|int32
call_1048 = func_1047_call(var_1049,var_1050,)
output = call_1048
func_1051 = relay.Function([var_1049,var_1050,], output)
mutated_mod['func_1051'] = func_1051
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1078 = relay.var("var_1078", dtype = "uint32", shape = (5, 16, 6))#candidate|1078|(5, 16, 6)|var|uint32
var_1079 = relay.var("var_1079", dtype = "uint32", shape = (5, 16, 6))#candidate|1079|(5, 16, 6)|var|uint32
bop_1080 = relay.bitwise_xor(var_1078.astype('uint32'), relay.reshape(var_1079.astype('uint32'), relay.shape_of(var_1078))) # shape=(5, 16, 6)
output = relay.Tuple([bop_1080,])
output2 = relay.Tuple([bop_1080,])
func_1085 = relay.Function([var_1078,var_1079,], output)
mod['func_1085'] = func_1085
mod = relay.transform.InferType()(mod)
mutated_mod['func_1085'] = func_1085
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1085_call = mutated_mod.get_global_var('func_1085')
var_1087 = relay.var("var_1087", dtype = "uint32", shape = (5, 16, 6))#candidate|1087|(5, 16, 6)|var|uint32
var_1088 = relay.var("var_1088", dtype = "uint32", shape = (5, 16, 6))#candidate|1088|(5, 16, 6)|var|uint32
call_1086 = func_1085_call(var_1087,var_1088,)
output = call_1086
func_1089 = relay.Function([var_1087,var_1088,], output)
mutated_mod['func_1089'] = func_1089
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1520 = relay.const([[[-7.876484,2.348664,4.813021,4.415167,-6.881916,-4.006686,-3.606434,9.562540,-8.627756,-6.448591,8.015465,-0.862281,9.209889],[-7.259679,-8.920945,-5.245358,-1.543180,-9.040513,7.150138,7.388058,-9.782999,-4.872044,5.586286,0.002629,2.484922,-9.395694],[-0.736367,-8.229381,1.788558,-9.464678,3.708677,-9.978375,-8.421529,2.960278,-3.861881,5.720807,-6.835526,-6.850353,6.666941],[1.772918,2.894399,0.042155,4.046098,2.375456,-0.163186,-6.231913,-5.909084,-3.256704,-0.843714,-9.374122,-3.508755,3.762281],[-5.843859,-5.954717,4.241937,-3.168759,-5.838211,-0.739738,-5.763490,-8.074097,2.666325,-0.639357,9.161651,-3.282713,-4.118653],[-9.374964,-7.584984,4.987239,8.294049,-8.444786,7.915621,3.738328,-5.441701,8.975077,4.824345,-6.736970,7.209951,-8.229959],[9.577815,-2.840232,-3.012014,-2.184512,-2.220528,4.751487,8.834525,-1.637037,-6.655331,-0.666252,2.530095,2.818572,0.486139],[4.220079,-1.803083,7.450623,-2.683852,8.809437,0.123272,1.498253,9.302030,0.749875,-1.470149,-3.058034,-8.527962,3.416242],[-6.734304,-6.412719,-3.180881,-7.574178,-3.170617,-6.125852,5.215796,9.523613,1.507424,-6.847223,9.007181,-0.693330,6.896170],[-7.257890,7.749324,0.262410,3.014207,-9.978482,4.148308,-8.354545,-7.688098,-3.781061,5.841190,-6.067621,-5.455639,8.953627],[9.814405,5.738646,-4.269210,-6.420964,-0.924266,-2.214683,6.435812,3.210296,3.868650,-0.016761,1.087273,-1.617360,-6.173372],[3.598632,6.623336,-3.430100,-8.009974,-9.133407,-9.419246,3.960483,-1.404680,-2.866951,-0.209549,3.724176,4.934026,8.668290],[-3.803625,5.250293,6.927237,-7.887733,-1.448553,6.634246,-0.329115,2.855074,-8.038001,3.038030,-4.003607,-1.458511,-7.338838]],[[9.819866,-2.996552,-4.625449,-4.801772,9.434535,-2.372148,-3.177751,3.862144,-5.316799,1.394943,-3.657424,-4.566950,8.742091],[0.622612,6.771085,5.818648,7.541379,1.607640,-6.208127,-8.184531,9.920010,0.353965,2.577199,9.063946,9.696173,4.046279],[-2.669608,9.053653,1.923827,-5.102963,-9.361353,8.288091,8.484306,1.156728,-0.543691,4.195913,7.827509,5.840962,3.232508],[-6.309497,-7.553584,-0.876606,5.515095,-5.264044,-5.715668,4.899464,-9.484226,5.819295,2.864391,7.417916,-8.719394,-7.278471],[-1.882021,-5.617940,-0.763814,-9.157408,-4.760002,-1.557354,-7.411525,-9.715554,6.279074,-9.911457,-8.477102,9.149128,-1.022841],[2.451844,3.241478,-5.760600,-7.487321,-7.794374,1.317616,4.371026,1.930989,7.865048,-3.045503,1.440787,6.298579,0.808944],[3.094039,-7.283303,6.878802,-3.325544,0.798105,-5.313819,5.662935,-9.630695,2.108061,-2.553939,3.066213,9.808119,-1.533753],[4.088408,-5.605076,9.692682,6.640729,8.620266,-4.685234,-3.983565,7.948731,5.085470,3.848032,9.843694,9.215754,9.912056],[-7.639650,-8.158343,8.406682,-1.008271,-2.846827,6.908011,6.071295,-5.192692,-4.945005,1.761638,-8.062671,-1.318803,3.092354],[-6.725727,-4.132217,5.000576,-8.282112,3.479442,-4.583281,4.400795,6.873520,-9.277785,-7.032988,-9.180806,3.103310,-5.141288],[-8.732273,6.302384,-1.648860,-1.371517,-5.223360,7.230230,3.037104,-2.429260,3.323087,-2.104453,8.400363,5.239282,-8.895835],[-1.018738,-5.359237,7.659089,-2.215428,-5.776228,-5.007454,0.599367,-9.190487,-0.743758,4.615256,4.283741,-9.189751,5.081227],[3.655025,9.202951,5.417147,3.834415,-6.075405,-6.370925,-3.837376,-7.305671,-4.592193,0.122837,-2.880959,-9.103861,-1.572441]],[[-1.627390,-8.497102,-4.948199,8.371472,2.795372,-1.930980,-6.999998,1.392602,5.271696,3.190977,-1.424557,0.882518,-1.983540],[7.325099,0.922600,2.715928,2.706940,8.079964,6.599358,2.271028,2.327031,5.219625,9.199537,8.578506,-4.125929,-3.832450],[-3.550904,-5.074467,0.911662,9.980632,-9.863616,9.749931,-7.585604,6.386939,3.818189,-8.474424,-6.115748,-4.597675,-3.544394],[-7.716798,-6.660485,-6.481122,-5.717435,0.502226,-5.113693,-0.141549,1.181566,-5.603861,3.715664,0.137588,2.326547,1.596453],[-8.071390,7.069459,3.135544,3.309256,-2.055369,-8.772877,6.023005,-7.667418,1.704535,-3.746353,-7.561000,-6.439686,-1.690579],[-7.981091,-5.593016,-4.118458,9.411083,3.889814,0.610683,-8.634877,-1.310559,5.071042,7.431776,-5.776123,-1.132414,2.313445],[8.114214,-0.306886,-2.476285,6.507719,0.523205,6.607159,4.938658,0.091605,7.872209,-2.775221,0.245447,7.252902,-4.099658],[0.103316,-4.095454,0.648818,-7.202145,-3.768613,8.642926,6.492100,1.718939,1.206458,-0.580736,5.288008,1.773111,1.972300],[8.131604,2.899600,-6.620802,5.034086,8.718543,4.653603,-6.380543,-3.879106,6.345526,-3.017279,-9.195696,-9.842953,3.704006],[7.997618,7.410123,1.163826,5.476157,-0.905984,4.575385,0.574842,7.420910,-0.099320,-0.156079,1.580652,9.029004,-9.248775],[1.430165,-6.564684,-4.401228,6.370725,-5.864903,3.110866,9.061243,-6.081270,1.315222,-6.459950,-8.363180,-7.115511,7.252597],[-6.796021,-7.327223,7.870912,7.024605,-7.040348,0.108956,-2.806511,-1.519745,6.073888,7.352939,-0.258125,2.793384,2.795918],[1.738192,-9.083849,4.108161,0.488465,5.924996,-2.610548,-1.759365,1.678271,-2.385404,-7.219617,3.014768,9.802901,9.653199]],[[9.705945,-8.496890,-7.485210,-0.288541,-3.210778,7.676078,0.798657,-8.950313,-0.134976,-8.488256,-4.844022,1.058610,3.905708],[7.452932,9.435453,-6.429204,4.623071,-7.268197,8.730598,6.812180,-2.589660,3.845113,9.779933,1.081646,8.446324,2.558685],[7.250508,-8.098912,8.081798,5.656403,-7.028079,2.403863,-8.650273,3.740175,8.250305,4.499307,0.435868,8.925963,7.067723],[-2.017003,6.285997,-0.622972,-2.831463,5.160802,-9.740853,1.526680,3.543329,9.483260,-0.648550,9.748114,6.255404,3.338694],[1.324184,9.952686,-3.878997,4.182183,-3.188124,-4.037001,-9.131366,-3.110816,-3.263959,1.406940,0.592890,2.064692,8.727273],[5.919077,0.648368,-7.673503,9.833559,3.487576,1.922338,2.922490,5.536930,4.218772,-3.079628,-1.415447,8.949294,-6.100686],[-5.379396,-7.334168,-8.579256,-0.529377,-5.159810,-0.728262,6.401509,2.598688,5.346993,-6.600439,-9.451082,-0.681288,4.796175],[7.011361,2.499972,4.358963,5.198766,7.767826,8.036841,-7.701752,-1.477521,-4.865506,-8.413841,2.189402,-5.231030,-3.632923],[7.792417,1.838116,-4.190170,0.342454,-7.195995,2.532642,-9.114250,5.468233,8.137359,6.492824,5.671358,9.450105,-2.418378],[3.604348,-1.832245,9.531126,-6.311747,-2.041560,-0.100669,-3.174065,8.267621,-7.804969,6.295423,7.570926,6.966675,-1.314858],[-2.025631,0.091836,-1.292289,-1.735028,-3.645815,-1.340422,-8.387707,5.392680,-5.812489,-7.199896,-2.225473,3.577554,-8.588232],[-4.093408,-1.702186,-4.220706,-8.352630,1.553774,-5.273644,4.025488,2.484597,-6.820509,-0.578563,-1.516725,1.611378,-6.170662],[-4.908051,4.994061,2.481813,-1.319322,7.315665,-5.947301,-9.629309,-1.062520,0.741968,-4.348999,-1.116671,6.480274,-6.385836]],[[5.434296,-2.223495,6.534024,-2.994173,6.168577,-3.977292,4.523579,2.135655,3.615351,6.445426,-2.878566,3.601685,3.242536],[1.284574,3.803042,5.661665,-0.248054,-6.370974,-2.612783,-9.538246,-6.223822,2.867723,-7.500043,-4.692792,6.732894,-5.699221],[-6.079056,-0.617919,9.075376,-7.478998,8.854888,7.611418,2.877814,-5.600947,-6.422124,-6.672558,9.275746,-2.335462,-5.114702],[-1.813053,-8.145565,3.824131,-6.292210,6.027554,-9.073782,-3.526579,4.307359,5.370607,-4.036019,-2.057983,-1.064899,3.116548],[-4.130914,-6.999602,-4.463490,-5.939737,2.196720,-2.020826,3.708988,7.255431,5.956268,-6.129323,7.701221,-8.424457,2.137836],[4.548088,3.455558,0.652184,-1.465029,-5.300857,-6.966170,-3.166599,-2.193342,-2.267963,-0.677618,3.339482,5.172264,-2.350335],[9.377289,-4.862632,1.062699,3.575094,7.444143,-4.652921,-9.856287,-2.510744,-2.141242,-8.343351,9.302535,-5.202066,-9.138701],[-6.516768,4.736520,-3.341259,5.522953,2.724641,-1.493204,4.168741,-3.121912,-0.200547,-7.495264,5.974483,1.514811,2.016936],[-4.028217,-6.465761,-5.744982,9.902058,3.680378,-0.647286,-9.402186,2.333279,-8.670961,-3.584731,-8.368894,8.488274,-8.946080],[1.450265,-6.518095,-4.950565,1.886621,4.418091,0.711300,7.550541,3.886840,6.217992,-4.060416,-3.301749,4.714835,0.149834],[0.340080,-4.970315,5.409368,5.952246,1.579319,9.298371,-8.950422,-2.695328,0.418537,-2.722073,5.643983,-7.543194,-6.095378],[9.592136,-7.891952,-0.323050,8.127783,5.917915,-4.370121,8.435402,-3.878735,-4.064677,7.138602,5.879614,3.019799,2.805416],[3.808413,-8.086014,3.641524,-5.693720,-2.887911,5.457367,5.381614,-7.251480,-1.643818,4.356295,-7.209064,5.454561,-2.083804]],[[-2.047289,6.396573,4.024768,-8.779239,-0.618304,7.927992,5.857766,2.651335,1.479108,0.290197,5.422199,1.662607,-6.499977],[-5.055269,-4.336863,-1.778535,-2.249136,-5.515590,4.610269,0.128650,-4.127877,-1.620358,-1.149081,9.915515,-9.691523,-4.671409],[-3.405215,3.943281,2.353465,-5.495346,-4.314180,8.751303,-1.503472,-6.321060,-3.281308,-2.133235,-4.310499,-5.505756,-4.063730],[3.360036,-5.412359,-1.137411,6.607442,7.342095,-5.691493,-9.264791,1.933262,1.372735,-6.764460,0.257708,-7.587997,7.867740],[-8.467761,7.048839,2.642612,5.190082,-6.423872,-2.372185,3.651818,2.398445,-0.146766,7.323437,0.296774,8.740563,-0.262845],[-7.695442,-3.857642,-5.197716,1.233816,-7.895062,-8.735737,-8.815679,7.738351,-3.834024,-4.145760,-6.548099,-9.976993,-8.908270],[8.038235,4.444476,-1.116027,-6.436443,1.237810,6.527070,-3.980398,-8.179224,-0.640259,-1.942739,3.090392,-9.908892,-0.388536],[-2.043958,-8.786850,-9.665766,4.125864,-6.910021,2.783255,-8.545170,9.837982,0.706247,4.372574,-3.266451,-3.207794,-2.337273],[6.550322,6.087269,4.881982,-6.441594,7.738584,9.138399,-4.286540,-8.712686,-2.637204,0.524879,2.770809,-8.509554,-0.732311],[-8.781946,1.266189,-9.342437,1.243713,-6.330958,-9.167990,0.989326,3.076364,-5.622067,-0.486472,3.037190,9.206676,-3.516066],[2.352151,-6.595945,9.331850,-6.016649,9.744671,2.529838,-4.228385,8.401654,4.843738,-4.610142,-6.493923,-0.052760,-3.619490],[1.584278,-6.758158,-7.692568,-4.055456,6.596750,7.061279,-2.280941,2.862999,8.573614,5.794449,-6.734650,7.933804,3.681907],[8.865357,-2.222264,2.409062,1.921963,1.566858,1.168232,-3.863662,9.615590,-5.186592,-6.645280,-1.091804,-5.766795,4.921186]],[[-1.854543,8.104024,-0.080939,6.628124,-3.940266,-6.534472,6.133748,4.558479,-6.397386,7.061940,8.955224,3.250126,5.555762],[-9.783766,-2.257843,-8.660932,-8.984737,-8.230382,-6.453461,-5.785167,9.674878,1.767088,-0.454978,8.554837,-4.969427,3.589663],[5.005346,-9.794794,-7.646652,-1.396080,-3.865404,7.503449,-4.534938,1.613140,2.713453,-0.953678,-4.491294,5.054525,-1.540462],[0.357347,-4.018929,4.036198,-6.982179,-2.498703,-5.819085,6.952891,-6.330420,4.489683,-1.488946,6.295503,-3.709673,-3.988138],[0.699875,-4.003370,5.445427,7.356429,-5.685292,6.153419,-2.176738,9.872758,-1.199057,6.816693,9.260928,6.409638,4.904564],[1.992805,-5.829150,-6.151547,-6.946728,-0.999750,1.828198,6.644118,-1.287863,-1.406829,-3.248192,0.326087,-9.048301,8.125276],[5.707583,1.286934,-9.504036,8.074766,3.663599,-1.780907,-7.259295,2.319492,-0.874456,0.486597,3.251084,6.125488,3.977881],[-2.647898,1.926548,9.878712,-2.629508,7.742236,2.378695,-7.227420,5.908578,-7.756666,5.568715,8.591584,-5.970645,-6.664291],[-8.840816,-2.551554,-7.163105,7.718163,-9.507152,-2.795211,7.598365,2.382265,-4.331078,3.936704,0.179007,8.460145,9.326258],[-9.848389,6.868195,4.986577,2.109859,3.608173,-0.766300,8.831982,6.799554,-4.935963,-2.943862,-0.927212,1.015187,-0.827414],[7.994440,5.157137,-7.788992,5.486871,-3.170969,5.857464,-7.048985,0.678051,0.517466,9.191981,-7.492475,4.990568,-4.728800],[-8.473650,-1.057389,-7.035781,-5.208671,-6.395173,0.139962,2.946852,9.702392,1.414042,8.724414,-6.746601,-0.724874,-6.538523],[5.316179,8.528037,8.583127,6.730126,-5.032804,9.680176,1.741134,2.794422,0.630255,-4.230960,3.777016,-7.612994,-8.221586]],[[5.748512,5.778100,-6.704540,6.048995,-7.840700,9.724537,-0.968824,3.766729,-0.859557,-0.184209,0.702908,-8.812920,-7.129603],[-1.482758,1.371304,0.065981,3.250466,-7.543823,-0.044654,2.075193,-1.849378,-7.084652,-0.479073,-4.321209,7.005282,-6.082765],[7.664866,-3.923829,-1.649718,-8.279049,-3.871025,-2.104537,-6.430250,0.315059,-5.524930,9.032394,8.469487,-6.641673,9.184756],[-2.700229,6.222767,-3.901804,-2.976920,-0.585733,8.547262,-2.610185,-5.066443,5.794040,8.874709,7.155332,5.640413,-8.277274],[9.189774,-7.326411,3.340982,0.905690,9.829754,9.796758,-7.677716,-1.334324,1.687758,0.168694,9.331017,-0.434717,8.773313],[-5.974202,6.585395,8.387375,9.081525,5.075521,0.885668,0.932211,-0.799311,-2.555356,-3.031506,-1.059945,8.112951,-8.463642],[-2.076037,8.382181,-3.697484,-9.004549,-1.428542,-9.075714,2.944831,-9.949227,-9.149445,7.001851,2.876067,-3.877018,-7.080535],[9.757980,-3.391288,-0.212715,-0.031800,4.576552,-1.399406,-2.453910,7.944636,-5.131899,1.813778,4.878746,1.056325,-1.119684],[-4.640737,-1.587620,-8.353095,-9.619249,7.766474,5.655533,-4.934130,3.726957,5.360756,6.238747,-0.646476,0.330879,6.179730],[-1.296889,-5.402771,8.227282,7.666669,7.123015,9.983754,-9.856199,6.721098,-8.270705,-8.819623,-0.139300,-0.329382,8.946895],[0.488853,-2.906340,3.244830,2.590442,3.429032,9.640479,3.959477,-4.849683,-5.920830,1.532212,8.888294,-6.086743,3.335195],[7.125290,-3.148361,9.796081,0.314941,-5.454223,-7.183584,-5.981920,-5.951071,-8.712075,8.082034,-4.404674,0.804678,0.349398],[-5.939216,9.674012,-8.993247,6.247532,6.808389,-5.982280,-3.812150,7.090648,6.561323,-7.326724,6.429295,6.575378,-2.775590]],[[9.392529,8.530001,-1.063897,-6.447910,-2.983390,-2.513755,9.999982,-8.455586,-7.146563,6.791878,1.667303,-4.317522,-8.225694],[-2.646668,-3.422634,-6.795556,-2.926466,-2.380453,0.191350,-9.023090,6.361768,8.736568,-5.103132,-5.863836,-3.854610,2.988384],[-7.227516,2.316979,8.333345,-0.112474,-2.129653,3.117453,7.395554,9.490917,-2.942436,-8.307625,-7.863660,7.523691,4.735353],[-8.383684,8.861080,4.509659,2.188141,-2.081059,-2.877519,-6.058495,8.337097,6.709622,4.741225,9.712943,0.793209,2.390426],[4.806248,-8.736165,-7.620667,-2.905820,-7.138040,-6.505830,6.434873,5.572438,5.588936,-1.012367,9.947655,1.770029,1.948338],[9.091732,-8.363767,-7.218431,4.408114,-1.442128,4.742787,6.643082,-8.253372,8.630316,-8.370577,5.716815,-6.460261,9.324358],[-8.216232,-7.351786,5.296846,-6.009922,-6.440734,-0.904028,5.820011,-8.640131,3.093701,5.740794,4.801881,2.792578,2.265181],[2.385490,3.399728,7.120439,-6.431494,8.103719,2.428492,7.740649,-4.642490,3.595866,7.239429,9.308773,9.298321,-6.286832],[9.396155,9.223674,6.840933,2.932351,5.808919,-8.731892,-7.912496,1.239008,7.320803,-5.548888,-8.614189,7.174482,7.431745],[1.059762,9.232796,6.934706,4.183962,9.062238,1.874167,9.952979,-8.427409,-3.112802,4.653149,-4.437096,1.701253,0.268261],[9.602503,3.846561,0.417270,9.168320,-1.663103,5.886522,7.897671,-2.583691,2.139980,9.146092,3.756705,9.755627,-7.740676],[2.122753,-0.445639,0.807830,-0.835204,-9.858215,2.815642,-1.695950,-5.689896,-3.109444,7.682330,-0.989701,-9.332376,-3.000090],[-6.964118,8.564276,7.469271,-4.219366,5.426877,4.835060,-6.598878,2.488323,-5.391028,4.322933,9.350291,-1.136531,6.238763]],[[-7.239661,8.821870,1.019265,-1.341073,-1.262066,-6.632690,6.533243,-8.349613,3.080165,-5.032770,2.041415,-1.798571,3.275716],[-5.506064,-8.930934,-1.353895,6.098504,3.717329,2.736060,5.501229,-9.985194,-1.416198,5.797584,-1.333697,8.801877,0.960896],[7.291397,-0.680551,-1.289541,8.819092,-1.533046,8.900465,9.400847,-5.113620,-6.832443,-4.274990,9.732783,-6.728407,9.900328],[0.503524,7.803969,1.054526,6.499133,9.236430,-1.271301,-2.595361,-4.390892,4.375862,3.291181,4.984748,4.389375,-0.745773],[-0.754660,-5.362564,4.250212,8.457128,-2.588996,-2.954287,-6.072517,9.922352,-9.692337,1.830038,2.792282,-9.032206,-0.724806],[-6.801934,7.505605,3.941940,0.073919,0.542440,6.021065,2.725144,-9.691646,2.459265,7.458624,5.723791,5.276961,3.231314],[8.391953,2.412333,2.343143,-2.909893,-7.594757,-3.619361,3.940890,-2.060170,-3.885554,-2.946484,1.400913,9.526923,4.915043],[-2.269393,7.731123,5.623205,3.230537,5.598846,7.143896,9.975106,5.717295,3.016812,-4.941826,3.266923,-0.336293,7.772491],[-4.222201,-2.325244,4.226394,-7.992394,-7.522187,-5.934916,-7.994362,-2.481330,7.837739,7.827097,-2.549180,6.826829,-0.738240],[3.026810,-2.966819,1.041623,-3.455633,-1.134021,-6.967373,-9.409846,0.003673,6.736269,-1.607586,2.825747,5.350823,-9.428367],[3.566283,-3.147501,4.769750,-8.983465,-3.469347,-8.453024,-0.958191,0.990072,3.809825,3.780220,-4.313242,-9.960571,6.708476],[-0.472821,-9.500309,-0.250099,-7.314374,4.055189,-8.222336,1.907715,3.286450,5.641030,0.636221,1.938614,8.029810,2.573205],[4.642966,-8.287714,9.499187,4.073827,-4.925351,1.236601,3.745369,-7.446027,8.312421,-5.445246,0.046293,-2.271763,-1.211981]],[[7.560694,-7.079626,0.960547,-0.337837,-7.580413,-9.200145,4.263729,4.673685,8.051554,8.534062,4.165426,-5.937803,-7.553529],[7.438581,-6.024228,-0.240854,3.349244,-0.852581,-2.090857,3.269597,-8.074883,-2.585683,-3.560895,-0.799716,-1.479480,5.098656],[-1.539358,-6.776387,8.668292,8.507335,9.665354,6.784019,8.911109,-4.184832,-7.382302,-0.740951,6.158018,-5.825036,9.589865],[-0.964458,-6.944596,1.555078,5.329926,0.891111,7.416251,-3.059144,-1.158772,-2.937321,1.635058,0.578469,-8.466881,-6.788120],[2.588711,9.054981,2.332582,-1.677863,3.199821,8.588878,4.911529,8.930669,5.253003,-0.374775,9.214125,8.295946,6.623739],[-1.791095,6.263133,1.364699,8.614242,7.051734,-6.807283,-0.517081,0.150731,-8.406719,9.871894,3.375730,3.373309,-9.805836],[-8.512405,0.270906,6.497634,5.604873,-2.919685,1.358918,7.353655,9.761761,-4.006301,3.469428,6.766610,8.342934,9.010446],[9.218335,-8.246098,0.916550,-5.595367,-4.313825,-8.217655,-3.979363,-1.651986,-0.452774,-1.663333,-9.234741,-8.561455,-1.265493],[0.500530,-4.083149,-9.466564,-5.165827,1.622282,-8.809693,-3.000156,4.268395,-8.677769,-5.690945,8.855905,4.682045,-6.768956],[2.030052,7.767129,-7.205830,0.512937,-5.794049,-4.813022,-8.196520,-7.726171,0.104476,3.828120,-6.737068,-2.934260,-9.346222],[6.503188,5.365591,4.737799,-9.358152,-9.359825,-2.339479,0.093783,-4.340473,9.337121,-1.997907,8.883469,-3.793072,-9.088488],[-9.430121,0.929710,5.840238,-2.819392,-6.266322,2.292615,7.423900,9.197588,4.275953,-1.718007,3.266380,-1.230096,9.704066],[0.048017,-1.052460,-9.834667,1.996941,9.733161,4.017454,0.073632,-1.182470,-7.814951,7.964327,3.675798,4.522335,-0.077928]],[[4.094671,-5.562344,-8.580613,-9.257821,2.096655,9.755458,7.890362,7.290485,3.379805,-7.372755,8.339355,8.823193,7.148112],[6.398808,-3.835396,0.219901,-4.242568,-6.215921,9.741494,9.338682,-0.003569,8.772952,-1.410937,-3.599476,-1.646717,2.934128],[9.690417,-8.551226,6.973235,9.478110,8.618085,7.839021,-1.523594,-3.845337,-3.067626,9.532560,-7.138808,-3.704773,9.996497],[-9.714724,-3.256731,-4.568554,-3.151151,-7.444914,-1.804945,9.074502,-5.065308,-8.957832,6.834388,-8.982988,-9.959268,-2.246732],[2.126254,8.289690,7.248281,-2.784508,4.587040,6.226524,3.438925,6.224308,-4.390306,0.844147,7.909362,5.474998,-8.575273],[9.671305,9.586474,7.331060,-8.984001,-5.656852,0.571121,3.445289,2.521358,-5.235875,-1.127323,-8.606460,8.417516,7.566273],[0.443955,9.279994,5.605936,7.471692,-6.323582,2.639380,0.048194,-3.455723,-0.078209,-2.110584,-6.933545,-0.455546,-8.670162],[4.339590,-0.143522,8.498673,-1.130439,3.110825,4.247075,-3.196797,3.530441,-2.712271,9.519264,0.367436,9.874936,5.878589],[9.900621,-6.891552,3.237945,4.434343,6.872411,9.311530,8.423095,4.062494,7.779519,-3.687615,8.108123,-4.879135,2.337842],[-5.850617,3.353742,-9.721401,4.927161,-9.649779,6.754628,-0.743367,-7.692199,-6.363170,-9.988664,-3.869936,5.076166,-8.375208],[-4.947511,-0.010286,1.719223,-8.026205,-2.094314,6.130812,0.618138,-3.003525,6.899130,7.085497,2.212329,6.184687,5.926899],[1.953399,-6.861871,9.363914,-9.945521,-2.582656,-6.027813,-4.759662,1.743443,-5.868194,-9.719649,1.096369,9.865794,8.945092],[-6.604900,-3.703739,6.396552,7.684653,-7.515329,-6.100067,-8.359925,-7.738857,7.538511,1.744380,-1.684174,9.729570,0.773360]],[[-1.174954,-0.101405,4.236726,-1.313586,-4.567304,3.541465,8.518466,9.574870,4.290097,-1.319519,-5.539723,-3.840344,-0.145609],[-5.455857,2.913902,9.253391,-9.226962,-5.855706,-2.224296,-4.517325,-4.066970,-8.323029,5.594478,8.027009,8.801930,-1.669477],[5.687908,-8.172484,3.665491,7.954224,-9.625201,-9.178493,-2.835162,-8.313178,0.492177,-6.729178,-8.335577,3.891155,-9.186291],[-9.397712,-5.616160,1.746111,-3.518541,3.669796,-2.540580,-8.576224,6.788350,-5.434307,0.059883,6.753688,6.566241,-0.960250],[-1.509001,0.045769,-4.983525,4.992547,-2.047126,-8.290813,-3.968268,-1.603170,6.163058,7.900337,1.922028,-9.456864,-7.015759],[2.388859,3.564952,5.559308,5.076659,-6.234355,2.745465,-3.886223,2.549779,-9.558195,-4.131331,-6.692978,1.511189,3.947944],[7.540854,-1.303469,3.302680,3.723703,8.371244,-0.495280,9.159398,2.157186,-9.412567,-1.154735,-7.115368,7.019516,0.208573],[-7.145211,5.136444,9.064778,-3.453315,-8.409253,9.421331,-2.667513,3.705740,7.875019,-5.032231,4.884662,-0.887147,-7.101926],[-6.917815,-6.783713,6.577962,-0.207818,-6.559652,-7.873821,9.020131,-4.679243,-5.587558,-6.558054,5.588288,6.272757,-2.476994],[4.641131,-3.413899,0.723019,3.123165,9.173762,6.791921,-9.315567,9.766206,-0.292460,3.520332,-9.318887,4.888509,8.789366],[-9.433836,-5.130600,1.696601,-3.488633,9.705989,-8.213849,8.450765,-4.748684,-7.736220,-2.095981,9.117825,-6.751118,2.853724],[-7.666402,7.900768,7.102516,-0.260685,-8.435997,1.561978,-0.193003,6.720210,-5.135838,-7.481839,7.344667,8.246198,-9.056835],[-7.062651,5.731437,8.383002,-4.375538,-6.414896,2.490758,-0.665606,-0.280899,-2.708159,-2.957850,-0.698813,-1.200765,0.230660]],[[4.431884,0.801367,1.944096,-9.862053,1.330630,5.104873,0.756782,5.981971,-9.095173,-7.831194,-9.883178,1.242132,-4.185278],[5.763576,-9.963676,-5.096192,8.198371,-4.034892,7.475121,0.979719,-8.676088,1.705847,-2.497642,-6.251859,-9.329179,-8.528537],[1.864893,6.154617,3.961194,-4.919494,-2.928622,1.136374,-5.004520,-4.848947,-8.334349,-0.517289,-0.566717,-6.178992,0.542982],[-3.516306,-5.262771,-6.625289,-2.336803,6.987729,-3.917358,-1.140208,6.152156,-3.241391,1.382389,9.333615,-6.551031,-0.260294],[1.740664,-6.974677,-7.708967,-8.870361,8.191038,-6.956428,0.628855,1.760136,-7.521390,-3.629345,0.665605,4.717469,8.766975],[-8.461537,3.887481,1.716207,-5.516817,5.438209,-1.799166,9.718350,-6.309258,1.093771,8.599330,7.813391,-0.122898,0.639033],[-8.921062,-3.421262,-5.980538,3.285230,-2.069523,-8.292976,-0.492024,0.034404,-6.115169,-4.861041,-7.204243,-2.404667,-6.318865],[2.302146,3.928141,-7.725545,-2.760312,0.902201,-1.715291,-2.853300,3.910849,2.147108,-7.255936,-7.532035,5.005716,0.685659],[5.393845,6.560525,2.704519,-1.401872,-7.481567,-6.064085,-2.719548,7.252550,-8.140489,5.420796,-8.637222,-9.252212,4.054187],[2.495269,9.419185,-0.660764,-5.000927,5.921220,4.854486,-1.799385,-4.894297,-2.992619,5.114800,9.781415,1.471312,0.945494],[9.223178,-9.214917,1.975513,2.559138,-9.650586,1.786130,-1.848457,-0.483238,-5.322330,9.808235,6.661293,9.698076,2.047674],[-8.462998,0.177202,-0.036201,0.885553,7.843509,6.457689,-2.612873,5.711085,-6.183891,-5.103558,4.610024,-5.517471,3.046106],[-5.732717,-9.096766,-9.617594,-7.623335,-1.917263,-2.281050,4.972347,-6.995345,3.447868,-5.988323,-1.194809,-4.738243,5.613561]],[[-1.025768,-2.526465,2.152465,-9.299193,-4.632553,-3.868094,2.850180,7.189967,3.789176,7.939678,7.192511,-2.215690,2.064315],[2.060888,3.320953,1.860428,-7.824417,0.890539,-4.579028,6.290083,-2.926417,4.036180,-0.997741,-7.688840,7.033508,-3.820984],[-9.189776,-2.152468,6.800100,3.929027,-8.073507,-3.752120,-3.144422,-4.208938,-5.002702,2.818901,-0.512563,-5.531455,6.171648],[-8.778204,-7.934273,-1.793093,8.653633,4.667514,-6.340258,5.302845,6.221857,5.956991,2.827246,9.398169,2.381681,6.552334],[2.326473,-3.522061,-5.836557,-4.740662,2.219591,7.488081,6.505911,-1.260314,9.621696,9.788528,0.682958,-9.406956,-6.263657],[-8.078907,-9.161028,7.596739,5.855553,-7.572779,-7.311910,3.714141,7.817457,-9.244271,2.367674,-3.883126,-3.550597,8.643999],[-8.174791,0.237984,4.324520,-0.761500,0.884695,-9.125637,-4.799996,-8.075280,6.750601,-9.596157,-5.578736,3.161348,2.250360],[-6.000649,0.918222,-7.748920,5.416841,7.976905,7.381761,-2.325721,5.232663,-3.111248,2.288870,6.931587,-3.387088,-3.756437],[-4.670476,-8.959086,9.590084,-3.450646,-9.598225,5.970203,-4.644422,3.462419,-8.057568,-7.390202,-1.969312,3.118577,8.553175],[-1.715385,1.878331,-7.778884,-8.352321,9.122980,3.747476,8.875958,-6.873784,3.367431,7.415509,7.097074,-2.249944,3.710624],[-6.302963,-7.342197,5.632648,4.331247,2.719634,4.822664,-5.503704,-1.698653,-7.908552,6.930379,-5.352880,4.136715,1.265508],[1.546111,-0.268233,-1.297232,-8.165797,-4.284287,8.507574,-7.727262,5.711200,6.903939,-8.746558,6.342754,2.192845,-9.609114],[4.570182,9.547650,-6.513785,-3.999115,0.394996,6.793163,8.250112,-1.734953,2.978246,-4.033431,-7.005513,-6.058383,0.056601]],[[3.755462,-6.611860,-6.793229,0.059598,1.344380,-4.606164,-1.046960,-7.157907,5.402858,8.130287,5.228645,-1.766749,4.162718],[2.032778,-9.872754,6.187502,4.122897,8.567156,8.849508,0.628526,-7.318044,-0.949403,3.579856,-1.712518,-0.519760,-3.029522],[-3.226498,9.580276,0.390562,4.209683,4.991164,8.178014,-5.944871,-1.942898,8.503034,-4.682005,-8.210267,-9.882542,-0.307710],[-6.580403,-0.254858,-8.553045,-7.061049,-0.926128,-7.290950,7.515773,-6.840338,-2.006719,5.595881,-5.068258,-2.681203,-4.620764],[7.643085,-7.270668,0.852807,2.004241,-0.178595,-3.375591,3.849574,-9.149187,-6.562576,-7.327920,9.627115,4.864587,8.658194],[4.211406,6.476279,-1.217974,8.456659,-6.802490,-9.701341,-1.556208,7.831431,7.617605,-4.634412,-4.357921,2.435483,4.273069],[0.048885,0.079627,6.507872,-3.309334,-1.395207,0.957482,1.816645,-5.834122,1.102918,-1.785292,1.787802,-6.608593,-4.519090],[-0.087855,1.315642,-3.422481,-4.787402,5.793619,-7.975323,-7.157549,0.636283,-6.733586,6.029600,-5.167318,-0.768345,6.798558],[-6.404541,0.042223,-3.436879,-1.852984,7.844203,-5.504274,-4.886115,3.727445,8.033613,6.380359,-5.334931,-8.316243,-7.178585],[-3.151728,3.501790,-5.893089,5.078972,-6.731525,7.960857,0.252118,6.952263,-9.329864,-8.829745,1.080391,-2.728177,-3.864526],[-1.854761,-5.816217,7.221670,4.590708,3.843839,-1.575578,2.215183,-0.543057,5.161777,-8.122764,-3.380077,-5.538357,-5.058991],[-7.825487,-3.935986,6.861208,6.174898,1.239955,6.692565,-9.792931,-2.948810,8.940327,0.031646,-3.975291,-1.450985,-7.470492],[2.667325,3.701467,-5.798418,-7.531640,-2.112521,3.409206,-3.659146,-1.317292,-4.047570,-7.499655,4.814733,-8.341714,4.365897]]], dtype = "float32")#candidate|1520|(16, 13, 13)|const|float32
uop_1521 = relay.exp(const_1520.astype('float32')) # shape=(16, 13, 13)
bop_1557 = relay.left_shift(uop_1521.astype('uint64'), relay.reshape(const_1520.astype('uint64'), relay.shape_of(uop_1521))) # shape=(16, 13, 13)
func_785_call = mod.get_global_var('func_785')
func_789_call = mutated_mod.get_global_var('func_789')
var_1566 = relay.var("var_1566", dtype = "int64", shape = ())#candidate|1566|()|var|int64
const_1567 = relay.const([3,-10,8,3,5,-1,-5,-1,10,-5,7,5,-5,7,2,-8,5,-8,-9,-5,9,7,-8,-7,6,1,-1,7,3,-5,2,-4,1,-2,-2,-5,4,7,2,-2,9,10,-2,-8,-10,2,6,1,-7,-8,-9,-4,-6,-6,-6,-7,-2,4,5,-10,5,-1,9,8,4,-7,-10,-7,-1,-3,1,-3,-8,-10,-1,9,4,4,-1,-1,8,-9,8,-3,1,7,9,-9,-9,9,9,3,-10,-9,9,6,-10,6,-3,7,8,-7,6,-3,5,2,-1,-9,1,-2,10,10,6,-7,8,4,10,2,-7,8,8,-6,-4,-2,5,-7,-3,-4,-6,8,7,-1,-3,-2,9,-2,1,-8,5,9], dtype = "int64")#candidate|1567|(140,)|const|int64
const_1568 = relay.const([[5],[-9],[-3],[1],[-8],[8],[6],[8],[-2],[1],[8],[8],[-5]], dtype = "int32")#candidate|1568|(13, 1)|const|int32
call_1565 = relay.TupleGetItem(func_785_call(relay.reshape(var_1566.astype('int64'), []), relay.reshape(const_1567.astype('int64'), [1, 14, 10]), relay.reshape(const_1568.astype('int32'), [13,]), ), 1)
call_1569 = relay.TupleGetItem(func_789_call(relay.reshape(var_1566.astype('int64'), []), relay.reshape(const_1567.astype('int64'), [1, 14, 10]), relay.reshape(const_1568.astype('int32'), [13,]), ), 1)
bop_1574 = relay.right_shift(call_1565.astype('int32'), var_1566.astype('int32')) # shape=(6, 11, 9)
bop_1577 = relay.right_shift(call_1569.astype('int32'), var_1566.astype('int32')) # shape=(6, 11, 9)
uop_1582 = relay.tan(uop_1521.astype('float32')) # shape=(16, 13, 13)
func_1085_call = mod.get_global_var('func_1085')
func_1089_call = mutated_mod.get_global_var('func_1089')
const_1585 = relay.const([[4,9,4,-1,-6,-4,4,4,-8,4,-2,-8,2,9,8,5,-1,1,8,8,2,-10,9,-6,-2,8,-1,-10,8,2,-7,8,-1,-3,-5,-4,6,-1,8,3,8,-4,8,3,-3,4,3,-8,-4,-7,6,4,-5,-5,6,3,-9,-4,-10,7,-5,-3,-6,5,4,7,-3,-9,7,1,4,-9,2,-4,-2,4,-3,-6,-8,6,-2,1,5,-4,-8,8,-3,-6,10,-7,-10,-8,8,1,4,9,2,1,-1,-10,2,-10,-4,-9,-8,-7,-7,-1,-10,2,-4,9,-2,3,-5,-4,-2,-3,-3,-3,9,9,-6,3,-7,-9,8,4,8,5,2,-2,6,-3,10,-9,-7,-6,-1,8,-4,6,6,-1,-7,10,8,6,-9,-2,-4,-7,9,3,-4,7,-1,-9,-3,1,-9,-1,-3,10,5,-1,2,1,5,3,-8,-7,-5,6,-1,10,-10,-6,8,-6,-7,-6,-7,2,3,-1,-10,-10,7,1,-6,7,-1,-10,-8,-6,3,3,8,-2,-5,-2,3,9,9,-7,2,1,-4,6,5,-6,3,10,7,4,7,6,-7,10,-7,-1,9,-2,-2,7,-10,8,4,-7,-2,-2,7,10,5,2,-7,10,-4,2,-3,-5,-2,8,-3,-7,-8,-3,-9,8,3,7,-2,7,-1,4,-8,9,-4,-7,4,1,5,6,8,-9,6,2,-4,4,10,3,10,9,1,-10,-2,-8,6,-10,-9,-9,6,3,-2,9,-6,1,4,-10,8,9,-3,-4,2,5,-4,8,-8,1,-9,-4,-1,-3,-5,-10,-2,-2,8,6,-1,-5,7,-6,-6,7,-7,10,-5,5,-5,2,5,-4,1,5,1,8,3,5,1,3,-10,-10,-8,-7,-3,2,-5,1,6,-8,5,-5,10,-8,-1,-10,5,-7,8,-8,5,9,6,-3,-7,9,5,-2,5,7,-2,6,9,-2,7,8,-2,1,-8,-10,5,10,-5,-6,-2,-6,-10,-2,8,-7,-4,7,5,-3,2,9,5,7,2,2,-6,8,3,-6,4,5,2,5,10,10,1,9,-9,-8,2,4,-8,-4,2,1,-7,5,8,9,-8,-2,-10,-7,-9,-1,4,-9,-10,5,-6,10,-3,-5,7,-9,-2,-3,1,-3,-6,-3,10,7,6,-1,-8,-6,-8,-2,-4,9,1,8,4,4,6,2,-9,5,3,-6,9,-2,2,1,6,-1,3,-10,-3,-9,-4,-4,-2,-8,4,-5,-5,-9,2,2,9,-6]], dtype = "uint32")#candidate|1585|(1, 480)|const|uint32
call_1584 = relay.TupleGetItem(func_1085_call(relay.reshape(const_1585.astype('uint32'), [5, 16, 6]), relay.reshape(const_1585.astype('uint32'), [5, 16, 6]), ), 0)
call_1586 = relay.TupleGetItem(func_1089_call(relay.reshape(const_1585.astype('uint32'), [5, 16, 6]), relay.reshape(const_1585.astype('uint32'), [5, 16, 6]), ), 0)
output = relay.Tuple([bop_1557,const_1567,const_1568,bop_1574,uop_1582,call_1584,const_1585,])
output2 = relay.Tuple([bop_1557,const_1567,const_1568,bop_1577,uop_1582,call_1586,const_1585,])
func_1593 = relay.Function([var_1566,], output)
mod['func_1593'] = func_1593
mod = relay.transform.InferType()(mod)
var_1594 = relay.var("var_1594", dtype = "int64", shape = ())#candidate|1594|()|var|int64
output = func_1593(var_1594)
func_1595 = relay.Function([var_1594], output)
mutated_mod['func_1595'] = func_1595
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1720 = relay.var("var_1720", dtype = "float32", shape = ())#candidate|1720|()|var|float32
var_1721 = relay.var("var_1721", dtype = "float32", shape = (11, 3, 1))#candidate|1721|(11, 3, 1)|var|float32
bop_1722 = relay.maximum(var_1720.astype('float32'), var_1721.astype('float32')) # shape=(11, 3, 1)
func_856_call = mod.get_global_var('func_856')
func_860_call = mutated_mod.get_global_var('func_860')
var_1728 = relay.var("var_1728", dtype = "float64", shape = (40,))#candidate|1728|(40,)|var|float64
var_1729 = relay.var("var_1729", dtype = "int32", shape = (13,))#candidate|1729|(13,)|var|int32
call_1727 = relay.TupleGetItem(func_856_call(relay.reshape(var_1728.astype('float64'), [1, 8, 5]), relay.reshape(var_1720.astype('int32'), []), relay.reshape(var_1729.astype('int32'), [13,]), ), 0)
call_1730 = relay.TupleGetItem(func_860_call(relay.reshape(var_1728.astype('float64'), [1, 8, 5]), relay.reshape(var_1720.astype('int32'), []), relay.reshape(var_1729.astype('int32'), [13,]), ), 0)
output = relay.Tuple([bop_1722,call_1727,var_1728,var_1729,])
output2 = relay.Tuple([bop_1722,call_1730,var_1728,var_1729,])
func_1735 = relay.Function([var_1720,var_1721,var_1728,var_1729,], output)
mod['func_1735'] = func_1735
mod = relay.transform.InferType()(mod)
var_1736 = relay.var("var_1736", dtype = "float32", shape = ())#candidate|1736|()|var|float32
var_1737 = relay.var("var_1737", dtype = "float32", shape = (11, 3, 1))#candidate|1737|(11, 3, 1)|var|float32
var_1738 = relay.var("var_1738", dtype = "float64", shape = (40,))#candidate|1738|(40,)|var|float64
var_1739 = relay.var("var_1739", dtype = "int32", shape = (13,))#candidate|1739|(13,)|var|int32
output = func_1735(var_1736,var_1737,var_1738,var_1739,)
func_1740 = relay.Function([var_1736,var_1737,var_1738,var_1739,], output)
mutated_mod['func_1740'] = func_1740
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1744 = relay.const([[[10,10,8,-8,4,10,-7,-2,-10,7,-3,-7,-7,9,-9],[-9,-10,5,-1,-1,-2,-2,7,-3,9,10,1,8,10,-8],[-6,10,-6,-6,-9,-3,-9,1,1,2,5,9,-9,-4,2],[10,10,6,6,-2,-10,-7,10,-4,3,8,-9,-6,3,9],[-1,-5,-8,7,-4,8,-4,2,2,-4,3,-3,-10,-3,8],[-8,1,-7,4,-3,-3,-2,-6,10,2,3,7,-10,-6,9],[6,-10,-3,-8,-3,7,1,-4,4,7,9,3,-7,-2,-9],[4,8,-4,2,-10,-2,2,6,4,-1,8,-10,-7,-4,-1],[-2,8,-10,-3,-6,-9,9,4,9,-5,-9,-2,2,10,-10],[8,-4,2,-1,-8,7,5,-1,1,-9,2,-9,-8,6,8],[-9,-10,5,8,-8,-4,4,-2,2,-6,-10,-10,-5,-10,6],[-10,6,-9,1,-10,-2,5,6,10,3,-9,-4,-1,-7,1],[3,-10,1,-2,5,-1,-6,2,6,-10,-9,1,9,-4,7],[2,9,8,1,2,10,4,2,8,1,-8,-8,-4,4,-5]],[[-5,2,-9,4,10,8,1,-8,10,-2,7,-9,-10,-3,-3],[7,3,2,10,4,3,-2,3,-9,9,2,-3,10,-6,-10],[-9,-6,8,6,5,-10,1,-5,3,7,-7,-5,-10,6,7],[-4,6,-1,-10,-2,9,3,3,4,2,-9,10,1,-10,7],[-4,-4,-3,-3,-5,7,-7,4,10,8,-1,3,3,-1,-1],[-8,1,5,10,8,3,9,-10,1,-3,6,-10,-3,-2,-3],[5,10,-5,4,1,1,9,-7,3,1,-1,-7,-7,-1,7],[4,7,-1,-6,-8,-7,4,-8,-7,9,6,6,-8,-8,-1],[-4,8,-8,-2,4,-3,10,8,-8,-9,-4,6,10,2,4],[-2,10,-8,1,-3,3,-5,-3,10,-8,8,-6,4,10,-6],[1,3,-10,-10,-4,-7,8,9,-4,1,-10,4,3,3,-3],[-8,-7,-6,3,-9,10,3,7,-9,10,3,-1,7,-4,-7],[-7,3,-7,2,-6,8,-8,-4,-4,-6,-5,6,5,-9,-4],[-7,-5,-7,-1,4,-2,3,-7,5,-2,-8,1,2,-7,-6]],[[-1,-2,-5,-9,-9,-4,-7,-3,6,6,10,-6,7,-6,10],[5,-6,8,-5,-8,1,-7,8,3,-9,-3,-2,-9,-6,-1],[-8,-10,3,-8,6,-7,5,-5,6,-9,8,4,-3,-7,10],[7,-6,6,6,2,-7,9,2,7,6,1,-9,2,-9,-1],[10,-1,-7,-8,9,7,6,10,-1,-6,-2,-9,-3,5,3],[-5,7,1,-2,-7,8,9,-9,2,3,-7,4,-9,10,-10],[-1,-5,-10,-10,-5,3,2,-7,-8,-1,6,7,-7,-8,-10],[1,3,10,4,6,-1,-3,3,-2,-9,-4,-4,-7,-7,7],[5,-1,-5,4,4,-7,2,-6,9,6,2,5,2,6,-10],[9,4,-8,4,6,-3,-1,-4,10,6,5,7,-5,-5,8],[-5,-3,-10,7,2,-10,-8,-1,-9,-8,-8,-2,-5,4,7],[5,3,-2,-6,5,-2,-2,9,3,-6,-2,5,1,-10,-10],[-9,2,1,-4,-2,-5,-7,7,2,-3,-4,-3,8,1,-9],[8,5,1,-3,5,8,-4,-8,-9,2,9,7,-4,-5,5]],[[-5,-5,3,8,-3,-3,-4,-3,7,-5,6,-4,-7,5,3],[-8,-3,9,-1,1,-2,4,-1,-2,-1,-9,2,-9,2,-3],[-6,-3,5,4,-1,-9,-9,-10,-10,-3,1,9,5,-6,-1],[-2,-1,-5,-7,2,4,-2,4,5,6,6,-8,-5,-10,10],[10,-8,8,-9,2,2,3,-9,8,3,-2,3,2,2,7],[-5,7,9,-7,-8,-10,-7,6,1,1,-8,-1,-2,-9,6],[8,4,-5,1,-1,-4,-1,3,-8,3,-8,-2,-4,-3,9],[-8,3,4,-2,3,-4,-4,8,6,4,5,10,3,2,-6],[9,9,5,1,8,3,-9,-9,-4,4,4,-4,-9,-10,-4],[3,10,7,-3,3,2,-3,2,-9,9,-6,7,7,6,-8],[-4,8,-10,1,3,7,9,8,6,-10,3,5,-8,5,-2],[6,3,-1,-9,8,-6,7,9,-7,-3,7,2,5,4,4],[2,-3,-6,-9,7,-4,4,-8,-7,5,1,5,4,5,-1],[-6,-1,-9,3,1,-5,3,-8,-10,6,-6,-7,-2,4,-1]],[[-8,-9,5,-7,6,-8,-5,-10,-10,2,8,-2,-1,-6,-4],[8,-1,3,5,-4,-10,-3,3,-9,-4,8,-9,6,7,-2],[6,-10,-9,5,-3,-6,-3,-7,2,9,7,9,8,-3,-7],[5,-7,2,-8,-1,-6,-5,7,5,-7,7,-2,9,2,-4],[-7,10,-3,-9,9,-5,6,-6,-3,-2,5,-6,6,6,7],[4,-10,7,1,6,5,-7,-3,-4,5,-7,-5,-7,6,8],[-5,7,-1,9,-10,1,8,8,2,8,-8,-10,-5,4,10],[5,8,-3,8,-10,8,-4,1,10,4,3,-10,-4,9,8],[-4,9,7,-1,-3,-3,-4,9,-1,-1,4,6,6,-9,-10],[8,-2,-5,6,-1,-9,-2,-3,8,-8,6,4,8,-4,7],[-5,-9,2,3,-2,-7,-1,3,9,-8,2,-1,-8,8,-7],[7,2,7,1,-1,8,-5,-6,3,-2,4,-4,2,-5,3],[7,-2,-7,-2,2,-3,-1,9,9,-5,-10,-6,-6,-8,9],[1,-3,-7,-3,-1,2,5,-4,-3,4,-3,8,1,-8,-3]],[[2,6,-6,-8,-2,5,-4,-9,5,-1,-9,7,4,9,9],[-2,5,-6,1,-3,-4,-6,1,7,7,-8,2,6,-5,1],[-9,7,-1,9,7,-4,10,-9,7,-10,-4,5,-6,-6,-5],[5,10,-10,-4,-4,8,-4,-1,-3,9,-7,2,8,10,-8],[-1,-1,-6,-5,-7,-3,-10,-7,-10,-1,4,1,-7,-5,-5],[4,-10,8,-3,8,3,-6,10,3,-4,8,-10,5,10,-6],[4,10,4,-10,2,-8,-9,9,8,9,4,-9,8,4,5],[-2,2,3,-9,-3,-2,9,3,-1,8,2,-1,10,6,-9],[6,2,-1,-1,9,-5,-3,2,-2,9,-5,4,4,5,-10],[3,-4,-3,9,9,-10,-8,-1,-2,-3,3,-4,4,-2,9],[5,-9,4,-8,-8,2,-3,2,3,5,5,-6,6,8,-2],[10,-9,-6,3,-8,1,10,2,-6,-7,5,-10,10,2,1],[-5,1,4,-6,1,9,-6,6,2,-5,4,9,-2,9,9],[9,-3,-7,-8,-3,9,-1,-10,2,-8,8,-8,5,10,-3]],[[-3,4,-3,-2,-5,9,6,6,-4,5,5,3,4,3,-1],[-4,9,10,-8,2,-7,7,1,-7,-2,-9,10,2,2,-10],[2,-7,4,2,10,-5,-4,-10,6,10,-4,6,-2,9,-6],[7,5,-8,1,-10,5,-8,10,4,7,-3,-4,4,9,-10],[-4,-2,2,5,1,4,3,-3,-2,-8,-10,10,1,-1,-9],[5,9,2,9,-7,-3,6,-7,-8,5,-9,-6,-2,3,7],[-4,5,2,-9,5,1,8,-5,-6,3,-8,8,-1,8,4],[8,-2,3,2,-4,7,6,-5,-10,5,-2,-6,-4,-3,-3],[-2,6,3,7,-3,-2,-8,-8,1,-4,3,-7,10,-6,-6],[9,9,1,5,9,8,-8,2,-9,-6,-9,-9,-8,10,2],[-4,-5,8,-6,3,-1,-7,-7,-7,-9,-9,9,-5,-9,-2],[2,-3,8,-2,-2,-10,-5,-6,-3,1,5,2,-10,-3,-3],[-9,1,-1,-1,5,-9,-8,3,9,6,-10,9,-5,9,5],[2,-7,6,-4,-5,10,-6,-2,-4,-5,-10,1,6,-10,3]],[[7,1,-8,3,2,3,-4,4,-7,7,-1,6,-10,-10,-7],[6,-8,-9,-2,8,-2,9,9,-2,-4,-10,-7,6,1,6],[9,-4,-8,3,5,5,-4,3,-10,10,3,-8,8,-8,2],[-9,-7,-9,-5,-7,6,6,-8,3,-4,-1,-5,-7,-3,-4],[-10,-5,5,4,-8,10,2,-4,-7,-10,10,-7,-8,-9,-1],[3,7,10,2,4,4,-4,2,-9,-4,7,10,-10,10,7],[-4,3,-10,3,-9,-4,9,-9,7,-9,9,-7,-1,7,-8],[-3,7,-4,-10,-3,-2,-2,-6,-1,1,5,5,10,3,-7],[2,-5,-5,9,4,4,10,6,-9,8,8,-1,-7,10,6],[1,7,-8,5,-10,1,4,10,-5,8,8,-9,8,9,8],[-5,-3,6,-7,-3,7,-10,3,-2,10,6,-5,-6,2,3],[1,10,-2,-9,5,-5,6,-5,5,9,-7,-3,1,7,7],[3,10,3,-8,-3,4,5,-1,-1,8,-2,-5,9,-8,-9],[-8,2,6,2,-10,6,2,6,-6,10,6,-10,10,-9,6]],[[1,2,2,3,-3,10,10,3,-3,-2,-2,8,-3,1,-5],[2,1,-3,4,-8,8,-6,-7,-4,-9,-7,9,5,2,-6],[3,4,3,-8,3,2,3,10,9,2,2,-1,3,-5,-3],[3,-8,-1,-4,8,4,-9,-1,9,-2,-10,-10,-7,8,-9],[2,7,9,-3,-7,-8,-4,-8,-5,5,-7,6,-5,-10,5],[-3,9,9,6,-1,-4,3,-8,-10,-9,-2,1,4,3,8],[1,-6,-1,-10,-6,1,-2,7,9,-4,-4,5,-6,-1,10],[6,-3,4,7,5,5,-3,-4,6,8,10,-8,-7,-3,-3],[2,-6,2,-10,-2,-2,3,-3,-6,8,10,-5,-6,-5,5],[-2,9,-1,-8,10,6,-6,-7,-5,1,-4,5,1,6,-8],[8,-5,10,10,6,5,-1,-2,3,9,3,4,5,-7,3],[-1,9,-10,3,-4,-7,3,-3,6,2,-7,1,1,9,8],[-7,-5,-6,-5,2,-9,10,8,-5,-9,-2,-2,-10,-8,4],[2,-6,10,-3,-2,-4,-7,3,10,-2,6,7,-6,2,-9]]], dtype = "int16")#candidate|1744|(9, 14, 15)|const|int16
var_1745 = relay.var("var_1745", dtype = "int16", shape = (9, 14, 15))#candidate|1745|(9, 14, 15)|var|int16
bop_1746 = relay.subtract(const_1744.astype('int16'), relay.reshape(var_1745.astype('int16'), relay.shape_of(const_1744))) # shape=(9, 14, 15)
func_329_call = mod.get_global_var('func_329')
func_331_call = mutated_mod.get_global_var('func_331')
var_1755 = relay.var("var_1755", dtype = "uint16", shape = (594,))#candidate|1755|(594,)|var|uint16
call_1754 = relay.TupleGetItem(func_329_call(relay.reshape(var_1755.astype('uint16'), [594,])), 4)
call_1756 = relay.TupleGetItem(func_331_call(relay.reshape(var_1755.astype('uint16'), [594,])), 4)
output = relay.Tuple([bop_1746,call_1754,var_1755,])
output2 = relay.Tuple([bop_1746,call_1756,var_1755,])
func_1761 = relay.Function([var_1745,var_1755,], output)
mod['func_1761'] = func_1761
mod = relay.transform.InferType()(mod)
mutated_mod['func_1761'] = func_1761
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1761_call = mutated_mod.get_global_var('func_1761')
var_1763 = relay.var("var_1763", dtype = "int16", shape = (9, 14, 15))#candidate|1763|(9, 14, 15)|var|int16
var_1764 = relay.var("var_1764", dtype = "uint16", shape = (594,))#candidate|1764|(594,)|var|uint16
call_1762 = func_1761_call(var_1763,var_1764,)
output = call_1762
func_1765 = relay.Function([var_1763,var_1764,], output)
mutated_mod['func_1765'] = func_1765
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1786 = relay.const([[[-8.413704,8.897820,-4.601108,7.449834,-4.686854,-9.957274,1.831636,-4.555589,-1.975727,-1.204790,-1.292479,7.338799,8.648688],[5.285011,0.670956,6.426816,-1.950944,-5.635948,-3.941780,2.905355,-2.124931,4.514950,6.650452,0.954489,-1.853490,5.637069],[-9.922337,-7.695013,8.148349,-9.243596,-8.494086,-4.866691,1.093079,-8.462709,-5.663604,-6.142018,3.923308,9.349743,3.554173],[-1.683613,-4.595172,-3.931786,-9.676198,0.628174,-8.299751,2.875377,4.785185,2.404424,-0.124168,-2.145949,0.822800,2.951496],[4.104646,-2.561642,1.360807,-9.112099,-3.737592,6.626859,9.336312,-6.998280,-9.726127,2.843712,1.218898,-7.453441,-6.985049],[3.494716,2.714313,-7.573182,3.181198,3.839855,9.483401,-0.184326,-5.837592,6.464294,-4.744312,3.305277,4.420042,-2.201854],[-8.699303,-4.506608,-8.648934,-3.280878,-0.116408,-4.636287,4.944894,-9.332335,1.163487,1.627974,-6.667129,-4.480332,-9.022949],[-2.189126,-5.753370,1.375070,6.839754,7.564475,6.384129,-1.821983,-2.596483,3.570144,-2.273938,-5.230818,-5.956024,-1.264888]],[[-2.772562,-8.115317,-8.101749,-2.282004,7.049387,4.444589,6.443457,-1.810159,0.112033,-6.152347,1.902624,9.612179,-6.351845],[-2.686196,2.810296,8.878199,6.901970,9.861360,-5.589795,-6.145864,5.402624,5.888724,-7.237509,0.450421,-6.802457,0.603735],[4.259976,8.613758,-1.579838,-8.748449,-7.833653,-3.083833,2.321421,-0.848774,6.684006,-8.573809,-0.238561,-6.732107,6.248186],[-2.915831,4.584803,-4.802272,4.681351,-7.025130,9.429760,1.508187,9.991210,2.127241,7.090679,-4.645521,-4.795128,8.956822],[-3.477260,3.341646,4.253342,0.027659,7.540278,6.031359,-9.159738,-1.130796,9.224228,5.079031,8.971101,3.862212,-5.691333],[-7.468696,-9.118060,-4.630340,5.611568,2.127526,6.580536,8.516454,-4.050690,4.387950,6.572556,-2.642808,-5.248177,0.505445],[-7.483736,-5.812989,-0.299902,8.605805,3.889547,-2.934632,2.023340,1.779463,-1.763253,7.895573,-4.039815,6.365211,-3.574101],[-8.571240,-9.057171,3.782578,-5.478937,7.021095,-8.063993,-4.454598,-5.319521,-3.915640,-5.613433,6.346671,-1.709189,1.446523]],[[0.315775,-2.087664,-7.236649,-8.136067,-3.631409,0.965478,-2.416608,-0.211634,7.507595,-6.189407,5.035755,6.795657,-1.884519],[-0.749315,8.441892,0.186032,3.861384,-1.635679,-5.465659,-7.601352,-8.706857,-5.305042,-6.167218,0.271751,9.180419,-0.916597],[-9.903385,-7.001707,-8.139956,-6.324186,-3.486852,-5.909208,2.220803,1.538075,-6.846281,9.057396,9.379556,7.224343,-6.241909],[2.154798,-8.038528,-3.775084,2.845928,6.730200,0.161363,6.240348,-7.819300,9.535759,-9.448201,0.507414,-1.124814,-9.022779],[-3.640526,-7.906205,-1.705054,-3.869596,7.130216,-2.089167,4.579571,-0.532057,4.418779,-7.172471,3.704432,1.091754,-5.658804],[-9.227102,9.981723,-1.475866,-8.584869,-8.784057,-4.640266,1.530887,5.469708,-9.213490,-2.812249,-8.729427,-5.032123,3.777486],[-8.635882,-0.883241,9.792287,-1.470439,8.359656,5.443611,9.225189,-4.210601,-3.052744,0.157779,5.970788,8.383923,-6.926528],[7.649394,-0.250780,-9.606613,-0.125265,-2.050602,-6.471166,-1.086244,5.751509,8.884770,-2.339387,1.099707,-4.657958,-4.057479]],[[-6.414602,3.359620,5.662400,-8.731887,4.982712,2.920056,3.476689,5.903753,-7.996902,5.263341,5.675706,-5.543840,-9.156215],[2.470811,-9.822514,1.007610,6.752487,3.042826,5.731249,-5.621507,-7.381698,-0.338376,6.279517,9.825886,-9.224694,-1.433160],[-2.384169,5.468103,-6.756930,5.861878,-0.431393,6.465876,8.192159,0.670331,-7.812785,7.475006,7.921338,-8.556495,3.667005],[-4.499983,-8.570223,-8.008191,8.829509,-8.773655,-2.038980,-0.818743,-8.959961,-0.984633,-5.365125,-0.037339,3.508747,2.135333],[-3.487261,-7.725014,-9.859791,4.114660,3.821163,7.538183,6.652084,-9.448411,0.701907,-3.865231,-3.490797,0.438452,-9.338375],[-4.427164,3.509418,-9.733769,2.555460,6.415576,4.393513,0.853892,-2.674174,2.104109,-4.556064,7.956459,-4.131055,9.530747],[-3.115726,8.600006,-6.867697,7.872877,-8.192266,9.602708,-2.209008,9.717111,2.518525,-1.235741,2.914581,8.448715,4.763199],[5.069158,6.972461,-4.673568,4.540080,-2.945805,8.579510,9.581552,-1.979519,-7.805828,7.090185,-9.792072,-1.653667,8.389481]],[[3.033788,9.031548,9.178049,-0.235544,4.401914,7.066284,4.989231,-6.862193,0.194389,-6.876176,1.973718,-5.523326,-4.910628],[7.672778,5.427684,-3.805910,-6.846795,7.119972,-4.700019,-5.994075,-1.119506,-0.981495,7.738334,5.777308,-3.133761,-7.351980],[-5.279341,-7.380752,-3.914220,1.749399,-9.564246,-5.295737,4.115184,1.645780,1.387927,3.162364,5.639491,0.600101,-2.474641],[9.732178,-6.005749,-2.268100,-5.496896,7.423807,3.607549,-6.398299,-6.169894,-2.913152,-8.966904,2.173809,2.293560,3.753382],[-7.893500,2.658426,7.963670,1.251982,6.536626,-2.387748,8.171744,-1.100281,-4.988768,-4.476455,1.596201,-0.680118,-2.378098],[5.112598,-9.399112,-1.473946,-0.006036,-8.011179,-0.509865,1.678112,2.636231,3.604290,-6.508563,7.540767,-9.873290,7.926288],[-8.301967,7.167433,-1.015315,-0.529322,-5.260835,3.240929,0.143399,-9.869496,-8.249584,7.511262,-4.596028,-6.548617,-3.970021],[0.056235,4.134512,-2.692161,7.816426,6.041029,-4.770797,-3.736517,-4.855031,3.081869,6.746969,-3.022643,-8.711145,-2.008363]],[[-3.239150,2.952228,-4.549260,-8.858772,5.381842,-0.019092,-2.047553,-4.028628,2.272187,9.990096,5.835083,3.094491,2.260316],[-4.675679,7.468414,-9.958715,2.476679,-0.911821,-6.838309,9.722513,6.189295,-3.510390,4.555405,5.842236,-6.315917,2.970535],[1.480294,-4.033532,-9.622965,-3.710719,8.163423,1.940284,-6.261216,8.459014,-3.234282,3.630255,-4.408754,-2.114030,-5.857009],[-7.854417,-9.834431,-0.449362,2.954212,-5.839975,5.541088,6.423680,2.294339,3.384321,1.777450,2.766911,-0.071885,5.722750],[-6.731845,-2.660225,0.099753,9.597581,-4.788166,-9.163900,5.036350,9.949645,4.833896,2.130027,-9.878701,2.008974,2.644197],[9.998862,0.102620,-6.899848,-1.706117,-6.487129,-3.716940,-6.487862,-4.350088,-2.840653,4.668581,-5.123679,-8.757425,-3.607507],[1.110764,-2.973449,-7.584046,-2.991036,4.778084,5.972581,5.229924,0.145372,-8.810085,7.167634,-4.892848,-8.235713,6.873378],[9.525182,-2.958829,-9.898802,4.750681,2.908047,4.498344,8.282863,-2.410606,-5.316567,-8.002434,1.047273,0.154022,2.408783]],[[-5.211410,-9.578796,0.041943,-5.367502,0.867245,5.570818,6.111686,-8.264174,-1.000770,9.944695,-2.553919,-9.013589,-5.108016],[6.706772,-8.646406,5.710587,-4.443122,2.666948,2.784949,-2.684757,-5.446850,4.251697,-8.508251,-1.678658,9.264264,1.185166],[-5.756526,5.984098,-6.978493,-0.690614,6.871765,5.459913,9.897748,1.734941,-4.111117,0.129795,8.366468,3.605287,-9.233242],[-2.737200,3.106220,-8.673926,-7.523909,-3.698485,-9.258513,7.422727,6.696604,-9.200380,9.677036,0.877208,5.461152,7.906384],[-6.168629,-6.055920,-2.986491,-4.678112,-1.271375,4.024939,-3.846114,8.253440,1.696788,2.389261,-7.685330,1.547335,4.842358],[7.696279,-1.506799,-7.002479,5.028440,7.550147,7.527896,-1.587076,-8.575610,-7.486215,8.553276,-1.964829,1.638381,5.745098],[2.361806,0.776368,-7.638509,1.776636,8.932225,4.477500,-5.159964,2.778660,-4.612551,2.934208,9.606468,-8.527152,-9.876268],[9.978366,-0.788602,2.111649,-0.099180,-3.946473,4.970153,7.468163,1.987687,-4.666049,8.401871,-6.379341,5.780424,7.843489]],[[4.446504,2.407949,-6.821685,1.709744,-5.816611,-3.455455,-4.766784,3.058548,-1.710605,-0.592220,2.530991,4.913607,-9.404567],[-8.410815,9.772312,2.626993,2.756210,-7.165390,9.291309,-7.131861,-2.562022,-8.867607,-3.957914,6.161210,-5.836490,-5.857694],[-5.505749,8.564320,8.644892,-4.259410,5.192078,-3.012996,-9.562099,-9.687050,-3.580620,1.171760,0.124777,8.227631,0.328455],[-6.668023,1.809421,0.922699,-3.676422,-1.342427,9.508244,-5.609622,-7.430037,8.715700,-7.878641,9.212769,8.910343,3.534429],[-6.912162,-0.567568,9.592023,-9.184594,7.475353,-8.167556,-5.982640,-5.657944,7.877818,-3.009328,1.070268,3.959314,2.900642],[-2.308295,8.521737,5.835459,0.885132,-7.960155,-2.200672,7.406516,-8.129096,1.620775,-4.525329,-7.878367,-5.123092,-0.255505],[2.227577,4.032812,-6.812025,3.417815,-2.134514,8.606241,-3.917097,-4.053450,-8.183861,-8.833656,-6.105390,7.182162,1.123166],[-9.001701,-2.315473,2.046359,-5.216401,-0.587948,7.789696,4.967882,-8.004532,2.725711,-1.061139,9.271988,1.840449,5.278291]],[[3.961235,-7.694696,0.071507,0.044388,5.819026,1.401742,9.883988,-7.550014,8.701906,-5.958198,2.973274,-3.853499,-0.868786],[-7.854879,6.408451,2.845046,7.592311,-1.600756,-7.829819,-8.907855,-1.691995,-3.032099,-9.804013,-9.321406,-3.759737,5.214577],[-9.418363,5.784206,-7.135376,-3.489933,4.254062,-8.791645,-6.339186,8.952412,-5.233375,-2.704475,5.794278,2.250116,-2.922426],[6.604949,-0.897420,-3.071226,-6.643672,9.811216,4.575580,5.947213,0.691400,6.659584,-9.695872,4.023510,3.046947,9.076795],[-2.223510,-9.977142,0.820612,6.457415,-3.428947,-7.326925,0.981013,2.838848,-3.074878,7.822694,0.980687,8.513545,-0.312489],[-6.119565,-9.838886,-7.530008,-8.330506,9.113062,5.097669,-4.474972,-7.838901,-0.188252,-6.996378,0.519598,-4.960690,3.971374],[1.934561,1.663928,3.811039,0.309404,-9.451429,-3.778133,-1.418415,-8.211139,-7.304835,-3.235084,4.780478,-9.139014,-0.067048],[-1.152993,-8.137756,-3.423017,-3.514471,0.398077,-3.031927,-0.437660,1.935222,3.388669,-9.065363,6.855464,-5.170440,-6.973314]],[[-2.160590,-9.881162,-9.819843,-8.718706,-8.402453,-3.918768,-4.650123,-7.262677,1.812434,6.282336,9.816699,-9.158688,-6.161782],[-5.461051,1.831050,5.919445,0.103038,9.742588,-8.636966,-0.011519,-8.287431,-5.116464,0.951603,1.159095,0.610449,5.231812],[-3.468742,-4.684253,5.405823,7.406207,6.052311,-7.333121,-9.162664,-2.315922,0.151324,0.257921,-1.233546,0.842325,-0.232116],[-2.442522,3.815547,-8.659522,6.947853,0.093193,9.686562,-1.732741,8.560283,1.029508,-0.522165,-9.600790,9.541126,1.469305],[1.221320,8.921215,-1.700756,0.596257,0.121584,4.794654,4.629269,3.929344,3.006763,4.600675,-3.820444,3.174281,0.053448],[3.446269,1.704538,-7.988762,1.537400,6.361459,2.875523,4.168848,-5.856021,6.074640,8.745188,8.811587,-9.223822,8.068825],[2.547883,3.444709,8.799725,7.216191,-5.235121,3.033776,6.327968,5.419953,-8.987747,2.230614,2.854215,-2.984199,5.567723],[2.697829,-4.973776,2.269082,5.501937,-9.789045,0.403696,-4.658674,7.292306,4.552830,-5.142273,2.065523,8.203782,7.126672]]], dtype = "float64")#candidate|1786|(10, 8, 13)|const|float64
var_1787 = relay.var("var_1787", dtype = "float64", shape = (10, 8, 13))#candidate|1787|(10, 8, 13)|var|float64
bop_1788 = relay.power(const_1786.astype('float64'), relay.reshape(var_1787.astype('float64'), relay.shape_of(const_1786))) # shape=(10, 8, 13)
output = relay.Tuple([bop_1788,])
output2 = relay.Tuple([bop_1788,])
func_1793 = relay.Function([var_1787,], output)
mod['func_1793'] = func_1793
mod = relay.transform.InferType()(mod)
mutated_mod['func_1793'] = func_1793
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1794 = relay.var("var_1794", dtype = "float64", shape = (10, 8, 13))#candidate|1794|(10, 8, 13)|var|float64
func_1793_call = mutated_mod.get_global_var('func_1793')
call_1795 = func_1793_call(var_1794)
output = call_1795
func_1796 = relay.Function([var_1794], output)
mutated_mod['func_1796'] = func_1796
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2018 = relay.var("var_2018", dtype = "float64", shape = ())#candidate|2018|()|var|float64
const_2019 = relay.const([[[-0.151993],[-6.587735],[7.455849],[4.278072]],[[3.268200],[-8.371799],[-0.804268],[0.918788]],[[3.119180],[6.512537],[-5.241940],[7.739931]],[[3.348509],[6.504234],[-3.059047],[-5.465991]],[[-7.721738],[8.019353],[4.624307],[-2.650506]],[[-2.922409],[9.975962],[3.511964],[-8.267012]],[[-4.903584],[1.467249],[9.881486],[-6.150464]],[[-0.639135],[3.003752],[-8.289245],[-4.923925]],[[-9.422713],[-9.956231],[-0.019631],[-4.803432]],[[0.760921],[3.181805],[-5.955499],[8.246298]],[[8.260921],[4.220982],[-0.761688],[2.843352]],[[9.680827],[4.170495],[-3.298715],[2.340505]],[[4.413943],[-3.154623],[-7.371929],[-7.507257]]], dtype = "float64")#candidate|2019|(13, 4, 1)|const|float64
bop_2020 = relay.divide(var_2018.astype('float64'), const_2019.astype('float64')) # shape=(13, 4, 1)
var_2025 = relay.var("var_2025", dtype = "float64", shape = (13, 4, 13))#candidate|2025|(13, 4, 13)|var|float64
bop_2026 = relay.add(bop_2020.astype('float64'), var_2025.astype('float64')) # shape=(13, 4, 13)
uop_2031 = relay.sinh(bop_2020.astype('float32')) # shape=(13, 4, 1)
uop_2036 = relay.erf(bop_2020.astype('float64')) # shape=(13, 4, 1)
output = relay.Tuple([bop_2026,uop_2031,uop_2036,])
output2 = relay.Tuple([bop_2026,uop_2031,uop_2036,])
func_2038 = relay.Function([var_2018,var_2025,], output)
mod['func_2038'] = func_2038
mod = relay.transform.InferType()(mod)
mutated_mod['func_2038'] = func_2038
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2038_call = mutated_mod.get_global_var('func_2038')
var_2040 = relay.var("var_2040", dtype = "float64", shape = ())#candidate|2040|()|var|float64
var_2041 = relay.var("var_2041", dtype = "float64", shape = (13, 4, 13))#candidate|2041|(13, 4, 13)|var|float64
call_2039 = func_2038_call(var_2040,var_2041,)
output = call_2039
func_2042 = relay.Function([var_2040,var_2041,], output)
mutated_mod['func_2042'] = func_2042
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2570 = relay.var("var_2570", dtype = "float32", shape = (7, 2, 10))#candidate|2570|(7, 2, 10)|var|float32
uop_2571 = relay.log2(var_2570.astype('float32')) # shape=(7, 2, 10)
func_856_call = mod.get_global_var('func_856')
func_860_call = mutated_mod.get_global_var('func_860')
var_2581 = relay.var("var_2581", dtype = "float64", shape = (40,))#candidate|2581|(40,)|var|float64
var_2582 = relay.var("var_2582", dtype = "int32", shape = ())#candidate|2582|()|var|int32
var_2583 = relay.var("var_2583", dtype = "int32", shape = (13,))#candidate|2583|(13,)|var|int32
call_2580 = relay.TupleGetItem(func_856_call(relay.reshape(var_2581.astype('float64'), [1, 8, 5]), relay.reshape(var_2582.astype('int32'), []), relay.reshape(var_2583.astype('int32'), [13,]), ), 2)
call_2584 = relay.TupleGetItem(func_860_call(relay.reshape(var_2581.astype('float64'), [1, 8, 5]), relay.reshape(var_2582.astype('int32'), []), relay.reshape(var_2583.astype('int32'), [13,]), ), 2)
func_41_call = mod.get_global_var('func_41')
func_43_call = mutated_mod.get_global_var('func_43')
var_2614 = relay.var("var_2614", dtype = "uint16", shape = (594,))#candidate|2614|(594,)|var|uint16
call_2613 = relay.TupleGetItem(func_41_call(relay.reshape(var_2614.astype('uint16'), [6, 11, 9])), 0)
call_2615 = relay.TupleGetItem(func_43_call(relay.reshape(var_2614.astype('uint16'), [6, 11, 9])), 0)
output = relay.Tuple([uop_2571,call_2580,var_2581,var_2582,var_2583,call_2613,var_2614,])
output2 = relay.Tuple([uop_2571,call_2584,var_2581,var_2582,var_2583,call_2615,var_2614,])
func_2652 = relay.Function([var_2570,var_2581,var_2582,var_2583,var_2614,], output)
mod['func_2652'] = func_2652
mod = relay.transform.InferType()(mod)
mutated_mod['func_2652'] = func_2652
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2652_call = mutated_mod.get_global_var('func_2652')
var_2654 = relay.var("var_2654", dtype = "float32", shape = (7, 2, 10))#candidate|2654|(7, 2, 10)|var|float32
var_2655 = relay.var("var_2655", dtype = "float64", shape = (40,))#candidate|2655|(40,)|var|float64
var_2656 = relay.var("var_2656", dtype = "int32", shape = ())#candidate|2656|()|var|int32
var_2657 = relay.var("var_2657", dtype = "int32", shape = (13,))#candidate|2657|(13,)|var|int32
var_2658 = relay.var("var_2658", dtype = "uint16", shape = (594,))#candidate|2658|(594,)|var|uint16
call_2653 = func_2652_call(var_2654,var_2655,var_2656,var_2657,var_2658,)
output = call_2653
func_2659 = relay.Function([var_2654,var_2655,var_2656,var_2657,var_2658,], output)
mutated_mod['func_2659'] = func_2659
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2958 = relay.var("var_2958", dtype = "uint64", shape = (13, 1, 16))#candidate|2958|(13, 1, 16)|var|uint64
var_2959 = relay.var("var_2959", dtype = "uint64", shape = (13, 16, 16))#candidate|2959|(13, 16, 16)|var|uint64
bop_2960 = relay.less(var_2958.astype('bool'), var_2959.astype('bool')) # shape=(13, 16, 16)
output = bop_2960
output2 = bop_2960
func_2967 = relay.Function([var_2958,var_2959,], output)
mod['func_2967'] = func_2967
mod = relay.transform.InferType()(mod)
mutated_mod['func_2967'] = func_2967
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2967_call = mutated_mod.get_global_var('func_2967')
var_2969 = relay.var("var_2969", dtype = "uint64", shape = (13, 1, 16))#candidate|2969|(13, 1, 16)|var|uint64
var_2970 = relay.var("var_2970", dtype = "uint64", shape = (13, 16, 16))#candidate|2970|(13, 16, 16)|var|uint64
call_2968 = func_2967_call(var_2969,var_2970,)
output = call_2968
func_2971 = relay.Function([var_2969,var_2970,], output)
mutated_mod['func_2971'] = func_2971
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3071 = relay.var("var_3071", dtype = "float64", shape = (9, 6, 4))#candidate|3071|(9, 6, 4)|var|float64
uop_3072 = relay.acosh(var_3071.astype('float64')) # shape=(9, 6, 4)
output = uop_3072
output2 = uop_3072
func_3076 = relay.Function([var_3071,], output)
mod['func_3076'] = func_3076
mod = relay.transform.InferType()(mod)
mutated_mod['func_3076'] = func_3076
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3077 = relay.var("var_3077", dtype = "float64", shape = (9, 6, 4))#candidate|3077|(9, 6, 4)|var|float64
func_3076_call = mutated_mod.get_global_var('func_3076')
call_3078 = func_3076_call(var_3077)
output = call_3078
func_3079 = relay.Function([var_3077], output)
mutated_mod['func_3079'] = func_3079
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3110 = relay.const(-8, dtype = "int8")#candidate|3110|()|const|int8
var_3111 = relay.var("var_3111", dtype = "int8", shape = (4, 12, 12))#candidate|3111|(4, 12, 12)|var|int8
bop_3112 = relay.bitwise_xor(const_3110.astype('int8'), var_3111.astype('int8')) # shape=(4, 12, 12)
uop_3129 = relay.exp(bop_3112.astype('float32')) # shape=(4, 12, 12)
func_41_call = mod.get_global_var('func_41')
func_43_call = mutated_mod.get_global_var('func_43')
var_3153 = relay.var("var_3153", dtype = "uint16", shape = (594,))#candidate|3153|(594,)|var|uint16
call_3152 = relay.TupleGetItem(func_41_call(relay.reshape(var_3153.astype('uint16'), [6, 11, 9])), 0)
call_3154 = relay.TupleGetItem(func_43_call(relay.reshape(var_3153.astype('uint16'), [6, 11, 9])), 0)
output = relay.Tuple([uop_3129,call_3152,var_3153,])
output2 = relay.Tuple([uop_3129,call_3154,var_3153,])
func_3184 = relay.Function([var_3111,var_3153,], output)
mod['func_3184'] = func_3184
mod = relay.transform.InferType()(mod)
var_3185 = relay.var("var_3185", dtype = "int8", shape = (4, 12, 12))#candidate|3185|(4, 12, 12)|var|int8
var_3186 = relay.var("var_3186", dtype = "uint16", shape = (594,))#candidate|3186|(594,)|var|uint16
output = func_3184(var_3185,var_3186,)
func_3187 = relay.Function([var_3185,var_3186,], output)
mutated_mod['func_3187'] = func_3187
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3248 = relay.var("var_3248", dtype = "float32", shape = (9, 2, 16))#candidate|3248|(9, 2, 16)|var|float32
uop_3249 = relay.atanh(var_3248.astype('float32')) # shape=(9, 2, 16)
func_1761_call = mod.get_global_var('func_1761')
func_1765_call = mutated_mod.get_global_var('func_1765')
const_3254 = relay.const([-4,1,-1,1,4,-2,-10,4,-10,7,2,6,5,1,-9,-9,5,-10,4,6,-3,-9,-5,-6,6,8,9,-7,-3,6,-9,5,-6,10,-6,-2,-7,2,3,-4,3,-7,6,-9,-2,-9,2,5,-8,-10,3,5,-10,-9,-7,6,-5,-2,-6,-9,10,9,1,9,-1,4,-10,2,-8,-7,-4,-4,-5,-1,9,-1,-6,-10,4,-6,10,-9,-1,-10,-1,-3,-9,7,3,-5,6,1,6,-10,-3,-7,10,-3,6,9,2,6,7,5,1,-2,6,10,-7,2,9,-4,7,10,-5,-3,-3,10,2,9,5,-10,-9,3,-1,7,-6,10,2,-7,1,6,10,-3,1,-6,7,9,4,-1,9,-8,-1,-10,-8,-10,8,-4,-9,-9,-3,9,10,-4,-2,-1,5,5,8,8,4,-7,-1,-9,2,-3,4,2,1,-10,3,3,-1,-3,-6,4,-9,10,-6,10,-10,10,6,10,10,-10,1,10,-4,10,-3,9,9,-2,2,-2,7,-8,6,10,-8,-8,8,1,-2,-3,9,-7,-3,3,10,-8,9,-10,4,2,4,10,-9,-3,4,-6,-10,-1,-3,-10,4,-2,6,10,3,1,-6,-9,-4,6,10,10,6,-5,-10,3,-3,-6,8,8,-2,1,9,-2,2,-10,-1,-4,-4,9,-2,-7,-7,3,-1,-7,9,8,7,1,-10,-4,3,-10,-7,-10,-1,-3,2,-6,-8,-5,-10,-6,-4,8,8,-5,-2,-8,5,-5,7,-7,-7,-9,5,-3,-8,3,6,6,-5,-4,7,3,2,-10,-9,7,1,2,-1,-2,4,10,9,3,-8,-3,3,-1,-6,-3,10,-3,-5,7,-10,4,6,-3,2,3,6,-9,1,-1,10,4,-3,3,3,-3,-10,-8,-3,-3,8,-8,-9,-1,-4,-7,-8,6,-9,-9,-8,-5,1,5,4,-10,-4,-7,5,3,-10,-6,5,-10,-1,-7,3,-7,7,10,-10,4,-1,6,8,-5,-2,-9,-5,1,9,-4,2,-9,-5,-10,9,8,-4,-6,-6,1,2,-6,8,-2,7,-9,9,-8,7,9,2,8,4,6,-4,9,-4,4,4,9,4,-10,8,-9,-4,2,8,1,3,1,4,-5,6,-10,-5,-2,9,-4,-8,3,-1,-9,5,10,-5,7,-4,-8,2,-3,-9,6,6,4,-2,7,1,2,-6,-6,-7,2,5,-2,-10,-4,7,-4,9,-7,2,-4,-2,9,-3,8,-9,-9,-10,1,-5,6,4,-5,9,-6,9,-4,-8,-6,-9,9,5,-2,9,3,-8,-8,-1,5,-6,-1,-1,-6,1,10,-6,-7,8,-6,-5,-3,-1,5,-3,-4,-3,5,-1,5,-5,-3,5,-4,1,4,-10,-9,7,5,-6,10,-3,5,8,-7,6,-5,-9,-8,10,6,-8,-3,9,-6,4,-6,2,2,-3,4,6,-2,10,-5,1,-10,-6,-5,-10,10,8,-2,9,-2,-2,2,8,5,6,-10,-9,8,-5,10,4,9,10,-10,-7,1,-1,-7,9,-8,-2,-1,-1,8,-2,1,-10,5,4,-7,10,-8,3,1,-9,-8,-9,2,10,6,-8,-5,5,-8,-7,-10,5,1,5,-9,-3,5,-5,-2,7,-6,-4,3,3,10,6,-1,8,-10,-4,-9,-7,-10,9,9,1,1,8,-5,-5,3,5,-4,-5,-9,-3,-7,1,3,1,-10,-7,10,-6,6,-1,5,-6,2,3,-2,8,-9,9,2,5,-4,2,-10,8,10,-9,-5,3,-6,-9,-7,10,-7,-9,10,-3,-10,8,-3,-6,-6,-9,-9,10,-1,4,7,5,2,5,1,6,-2,9,-3,-10,1,-1,2,-6,2,2,-3,-3,2,-6,-7,2,9,7,-10,10,-6,4,6,-2,9,8,-2,6,3,7,-4,-1,2,-4,5,-6,7,-3,-9,1,-1,-7,-4,-7,4,-6,2,-1,5,9,-7,5,4,-7,2,-10,-7,-6,-9,-5,-6,9,-8,4,-6,-5,7,-9,5,5,-1,2,1,8,-2,1,8,8,2,1,-5,1,4,5,5,9,-7,6,1,-8,-1,-1,-10,-4,10,-8,-10,7,10,-5,5,1,-7,2,4,-2,-10,3,3,10,-3,-8,-9,10,8,4,-1,5,-3,7,6,2,4,4,5,1,-4,2,4,3,-7,-3,-4,-8,5,6,-7,-5,-8,-10,-5,-10,2,2,-5,-7,-4,3,-9,8,-8,-5,-5,-10,9,5,-3,-3,-6,-10,-2,3,7,7,-9,-10,-9,6,5,-6,-5,10,-5,-2,10,4,-9,1,5,2,10,2,8,3,1,-10,2,6,-5,-10,2,-8,-3,9,-4,3,-4,3,-3,7,-8,2,-7,7,7,-6,1,2,-10,3,1,-9,-1,8,1,-9,2,-8,10,-10,5,7,-9,-2,-7,2,1,4,-4,-5,8,3,-7,-7,-8,-5,-5,3,-3,-3,-9,10,-6,1,7,-6,-2,-4,-2,8,-10,-5,7,-6,-2,-3,-4,1,9,4,2,2,-9,-2,7,-10,-5,1,2,4,-8,7,4,-4,1,-1,-7,6,-9,-6,-10,-3,-3,9,-4,1,4,6,5,-2,-9,9,6,-2,6,3,-6,1,3,-5,4,10,6,-5,5,9,-10,10,4,3,9,5,4,-5,5,3,7,-5,-9,-6,-8,10,1,-4,-1,-4,2,-6,-5,-3,-2,-10,-2,-4,5,-7,2,1,-5,-2,-9,-9,-6,-7,-7,-1,-7,-9,-6,-1,-2,-6,-6,-10,9,9,8,10,2,-7,8,-9,-9,-5,1,9,-6,8,1,3,1,9,10,7,7,-5,2,-3,4,9,5,9,-3,3,8,-4,-10,10,4,-5,3,-9,4,7,9,-3,4,-8,-10,10,7,-7,-9,-10,-6,6,-5,-6,5,8,1,-10,3,1,9,1,7,4,7,-1,-8,-4,-1,1,4,-10,3,2,-10,-1,-6,4,2,-1,3,-6,10,2,-10,7,-4,-1,-9,-5,5,5,-8,-7,8,-3,-4,9,-9,-3,-8,5,9,1,8,-6,-9,6,-1,-10,-5,-9,-2,-2,3,-9,8,-3,1,-3,-7,4,2,-5,-5,4,-10,8,5,-4,-5,-9,9,10,-7,7,-3,-2,-10,-10,6,6,8,9,-4,-2,-7,4,5,4,-6,-6,3,-4,8,10,7,-1,10,6,4,4,9,5,-1,-3,-1,6,10,-9,-3,2,6,4,-3,1,8,-9,3,-10,5,9,-4,-2,-4,-3,-1,-8,-8,3,5,-1,7,-10,3,5,5,4,9,-4,-6,-2,3,1,4,-3,8,-2,3,5,5,-4,4,-10,3,-7,-2,-7,3,-6,-4,6,4,-6,3,5,-3,-8,8,-9,-3,-1,7,2,5,-9,-9,-8,-4,-10,-8,-4,-3,-8,-10,1,5,-10,9,4,-10,-3,-9,-1,-9,-1,5,8,8,10,-2,3,4,-2,5,-9,1,5,-6,3,7,-10,9,-4,-3,7,5,5,-3,-4,-6,-3,-4,-9,5,6,5,-6,-6,-3,5,6,-10,-1,9,1,-6,-4,-3,3,-4,1,6,6,-10,-1,-1,-4,8,-5,-1,-4,-3,9,1,5,2,-5,-3,-10,-1,5,8,2,7,4,-6,-4,9,4,-5,5,4,6,2,8,7,-5,7,10,7,-1,-4,-9,-10,5,3,-5,-2,4,-6,-7,-8,-7,-2,-8,-3,-1,5,2,-6,-1,6,5,6,2,-2,3,3,-2,7,5,8,-8,9,-8,-8,-1,-4,10,6,2,-3,7,-4,-5,8,4,-8,-10,-4,-2,-9,7,-1,-3,-1,6,-9,1,1,-8,-8,6,-5,-2,9,3,7,1,-7,7,-1,-1,6,-6,10,6,8,-3,-2,-4,-9,9,7,7,6,1,7,-10,5,-1,-1,10,-1,-4,8,-2,-7,4,-2,-7,5,8,9,8,-5,9,-6,-7,4,7,-1,8,1,3,4,-2,7,2,7,2,-7,-9,-1,-7,8,-6,7,9,7,1,-2,-10,-2,-5,-10,-2,9,9,10,3,-2,-8,-5,6,9,-3,10,-9,4,5,2,-1,1,-9,8,8,2,-10,3,9,3,2,-5,-10,-7,-5,2,-8,-7,-3,-8,4,7,9,2,-3,-1,-10,7,7,5,-1,-9,-2,-5,-1,4,-4,-3,-2,-2,10,9,2,-2,-8,-1,5,-9,8,2,8,9,8,7,-5,-2,-2,8,6,3,8,6,-5,2,8,5,9,-8,-3,6,5,4,-10,-1,4,-2,-9,-8,3,10,-6,-7,-6,-4,9,-9,-10,2,-7,4,-9,4,5,4,5,-9,-6,8,1,-3,1,-7,-4,9,-3,3,-3,2,2,-8,-8,8,3,-8,-5,7,2,7,2,-9,2,9,-10,3,-6,9,-8,-10,2,-7,10,4,-7,-7,-10,-6,-10,-6,-5,-2,-2,7,-9,-2,6,7,3,-5,4,-9,-10,-7,-9,3,-3,-5,8,-4,-8,8,-6,-9,8,-7,-7,7,3,-10,-6,-8,-9,-4,6,4,6,9,8,-9,3,-9,4,10,9,-2,4,-3,-5,-10,7,-5,7,-3,2,-1,9,5,-7,5,-6,10,8,-5,-2,-4,-8,-2,-4,9,-8,-1,2,2,-3,-3,3,3,9,-4,10,10,6,-4,-8,8,-5,2,-7,7,3,-2,-5,8,10,3,-10,9,-6,10,-8,-9,-5,10,-7,-3,7,5,-8,-4,-6,10,1,-6,4,10,-2,5,-9,-1,-4,-5,10,2,6,8,-4,-10,10,3,-9,8,-9,-1,9,-5,8,3,3,-6,1,10,4,10,3,-8,6,6,-8,-6,-10,-10,-4,-6,6,5,-8,3,-3,6,8,-10,7,-2,4,-3,-10,3,-4,10,-5,-7,7,6,3,-8,3,5,-4,6,4,2,-10,9,-8,-6,-3,-7,-5,2,3,8,8,8,2,-9,3,4,10,1,-2,10,-2,-6,10,-4,6,8,9,5], dtype = "int16")#candidate|3254|(1890,)|const|int16
var_3255 = relay.var("var_3255", dtype = "uint16", shape = (594,))#candidate|3255|(594,)|var|uint16
call_3253 = relay.TupleGetItem(func_1761_call(relay.reshape(const_3254.astype('int16'), [9, 14, 15]), relay.reshape(var_3255.astype('uint16'), [594,]), ), 1)
call_3256 = relay.TupleGetItem(func_1765_call(relay.reshape(const_3254.astype('int16'), [9, 14, 15]), relay.reshape(var_3255.astype('uint16'), [594,]), ), 1)
bop_3258 = relay.equal(uop_3249.astype('bool'), relay.reshape(var_3248.astype('bool'), relay.shape_of(uop_3249))) # shape=(9, 2, 16)
func_3184_call = mod.get_global_var('func_3184')
func_3187_call = mutated_mod.get_global_var('func_3187')
const_3270 = relay.const([1,-8,-9,-2,-7,5,10,-3,-5,10,10,-2,-2,-7,-5,5,-4,-1,-7,3,5,10,-10,-8,5,-4,7,3,-4,-10,-1,-5,6,-9,2,5,-10,7,-9,6,1,8,7,-1,4,-1,6,9,5,5,9,-9,8,-10,8,-2,9,9,3,-8,1,1,7,-9,5,-2,-5,-5,6,1,-1,-5,5,6,-5,-5,6,-2,-4,-7,-7,5,-1,-9,4,-5,3,7,5,5,10,6,6,10,1,10,8,1,6,8,-10,-6,4,-10,-1,-9,-7,-8,3,4,5,3,1,-1,-6,8,-4,8,2,-7,6,-1,-10,-7,-6,6,-7,3,5,-7,-4,4,1,-6,-3,-3,8,10,-4,-1,-8,-4,-6,-4,-10,9,-8,-4,8,-4,-4,7,-5,-9,6,1,-7,-10,1,-3,7,-7,-6,5,-4,2,-8,-9,8,1,-8,-7,-7,-7,2,-1,1,-5,-10,10,3,-3,10,3,-2,3,9,4,-8,-4,10,-3,-3,9,-1,9,-10,5,6,10,-2,-7,-5,-7,-3,-5,-8,5,7,7,2,3,10,-2,8,6,6,-1,6,6,-10,-4,1,10,-5,7,-4,-9,-2,1,-6,-10,-10,-5,-10,8,4,-10,5,-3,8,-10,-4,-7,4,4,6,-2,6,5,-8,10,8,7,2,6,1,2,-6,10,8,-8,10,3,9,2,4,1,3,-7,-9,-5,-10,-6,10,6,9,-4,-6,-5,-6,4,10,-4,-5,-8,-4,3,-3,-10,-4,-1,-10,2,-2,3,-5,-10,2,7,-4,2,-7,-2,5,-3,8,-1,-9,-4,-1,10,4,10,3,3,-2,5,-1,10,-9,-4,7,5,2,8,6,9,10,-6,-7,-2,6,-10,6,-3,-5,2,-4,-9,-6,-10,-8,10,10,-3,-7,-8,6,-9,8,-7,-9,-4,-8,7,-1,-4,-6,7,4,-5,-8,-1,-8,7,10,-8,5,-2,-8,-6,-6,10,-9,-9,8,2,-4,-10,-3,10,-3,4,4,-10,5,-1,-6,-4,-7,-8,7,-3,-2,5,10,-1,-8,10,3,4,7,10,6,10,6,-10,-5,4,-6,3,8,10,10,-8,1,10,7,1,3,7,-7,-4,10,2,-9,-1,-10,1,-10,-3,-10,8,3,1,1,7,4,2,7,9,10,3,2,2,-2,4,-7,9,2,-4,-5,10,-2,5,-8,-7,4,-10,1,-10,-6,5,5,-1,-4,-1,-8,10,5,9,-8,2,6,10,-6,2,-5,3,-3,-8,-1,-5,9,-9,9,-8,6,-2,-5,-10,5,1,9,1,-10,6,-9,2,-6,-4,3,-1,5,-9,-6,-9,9,10,-6,9,-1,1,7,9,6,-6,7,-6,-3,-1,4,-1,-2,2,-3,3,-9,5,8,7,9,-3,-5,9,5,-8,-1,-5,-1,8,9,9,8,4,-9,-9,6,-3,4,8,3,10,4,-5,-2,8,-6,1,-10,7,-8,6,-2,-5,-2,-4,9,-6,-9,8,4,5,3,-4], dtype = "int8")#candidate|3270|(576,)|const|int8
call_3269 = relay.TupleGetItem(func_3184_call(relay.reshape(const_3270.astype('int8'), [4, 12, 12]), relay.reshape(var_3255.astype('uint16'), [594,]), ), 0)
call_3271 = relay.TupleGetItem(func_3187_call(relay.reshape(const_3270.astype('int8'), [4, 12, 12]), relay.reshape(var_3255.astype('uint16'), [594,]), ), 0)
bop_3275 = relay.minimum(bop_3258.astype('float32'), relay.reshape(uop_3249.astype('float32'), relay.shape_of(bop_3258))) # shape=(9, 2, 16)
output = relay.Tuple([call_3253,const_3254,var_3255,call_3269,const_3270,bop_3275,])
output2 = relay.Tuple([call_3256,const_3254,var_3255,call_3271,const_3270,bop_3275,])
func_3294 = relay.Function([var_3248,var_3255,], output)
mod['func_3294'] = func_3294
mod = relay.transform.InferType()(mod)
var_3295 = relay.var("var_3295", dtype = "float32", shape = (9, 2, 16))#candidate|3295|(9, 2, 16)|var|float32
var_3296 = relay.var("var_3296", dtype = "uint16", shape = (594,))#candidate|3296|(594,)|var|uint16
output = func_3294(var_3295,var_3296,)
func_3297 = relay.Function([var_3295,var_3296,], output)
mutated_mod['func_3297'] = func_3297
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3412 = relay.var("var_3412", dtype = "float32", shape = (9, 1, 4))#candidate|3412|(9, 1, 4)|var|float32
uop_3413 = relay.tan(var_3412.astype('float32')) # shape=(9, 1, 4)
func_1085_call = mod.get_global_var('func_1085')
func_1089_call = mutated_mod.get_global_var('func_1089')
const_3423 = relay.const([-2,1,5,10,-9,4,5,-5,-10,-3,-9,9,5,1,6,6,-8,-9,-10,3,-9,5,-6,-2,-3,1,2,-3,10,2,-9,-3,5,9,4,7,10,-7,4,-5,6,10,-3,-9,-6,-10,-9,-1,-6,-2,-6,-6,-2,-3,4,-5,3,2,-8,-1,-2,-9,-6,5,-5,-4,5,5,3,-4,-5,9,2,-4,-2,7,7,-5,6,-5,-9,2,-7,1,-5,6,4,10,7,-8,-10,-3,1,-10,-9,10,3,4,-8,-9,2,5,-3,3,8,10,-8,-4,2,8,8,3,-7,-1,-4,8,-8,-1,7,-2,9,4,7,-6,4,2,1,5,-2,3,-9,-1,7,9,-8,-10,4,-4,-3,-10,4,1,7,5,2,-7,-10,-9,10,2,10,-7,-5,-5,-3,7,7,5,2,5,-8,7,1,-7,-6,1,1,10,8,6,10,-9,9,-5,3,-7,4,-1,9,-6,-6,-1,-4,5,-8,-3,2,7,7,-6,-4,1,8,3,-9,4,-7,-2,-6,10,8,4,7,-5,5,-3,4,-9,8,-2,2,-2,-9,-7,-3,-10,-4,3,8,-4,-9,4,-4,6,4,7,-3,4,-5,-8,-1,9,7,-7,-10,-7,-9,-2,1,-3,5,-2,10,2,-10,4,-3,9,5,-2,-4,-1,10,-5,1,-8,7,7,-8,3,-9,1,9,9,-3,-6,10,1,-1,10,2,10,-10,9,8,-9,-8,-9,10,1,-3,-2,4,-4,8,9,-4,3,10,5,3,-4,-2,-8,-5,6,5,10,9,-8,-7,-1,8,6,-6,-5,-3,-10,2,-9,-8,-2,3,6,-5,3,1,-5,-5,-8,-2,-10,2,1,-1,-10,5,3,5,2,-2,-3,8,-4,9,-4,5,-5,5,10,6,4,-3,1,-6,1,7,-1,-4,-8,4,-5,7,5,-7,5,-4,-5,5,6,-9,9,3,-1,-4,-9,10,-9,-5,8,-7,5,3,8,-6,-9,-3,10,-8,-10,-9,-1,4,-5,-4,1,7,5,-6,8,-9,-8,5,6,-1,6,-7,1,8,-2,-1,6,-1,-8,3,-2,2,3,-7,3,-7,-10,-9,-8,6,-1,-5,5,-5,-6,8,9,7,9,2,4,2,-2,2,8,-9,5,4,-3,-4,7,6,-3,-9,7,-4,-1,-4,7,-4,-5,4,9,1,-8,1,-6,3,-10,-2,6,-7,-2,9,-6,-4,7,3,7,8,-9,-3,7,-6,8,1,6,10,-10,7,3,-7,3,-6,3], dtype = "uint32")#candidate|3423|(480,)|const|uint32
call_3422 = relay.TupleGetItem(func_1085_call(relay.reshape(const_3423.astype('uint32'), [5, 16, 6]), relay.reshape(const_3423.astype('uint32'), [5, 16, 6]), ), 0)
call_3424 = relay.TupleGetItem(func_1089_call(relay.reshape(const_3423.astype('uint32'), [5, 16, 6]), relay.reshape(const_3423.astype('uint32'), [5, 16, 6]), ), 0)
func_3294_call = mod.get_global_var('func_3294')
func_3297_call = mutated_mod.get_global_var('func_3297')
const_3429 = relay.const([0.804658,-6.929700,0.483010,5.349692,4.251258,0.985458,4.637925,-2.745801,-7.036136,-4.638596,9.779689,4.840544,-0.248828,-8.859545,-2.075592,-3.820537,-5.824123,-6.509754,-5.365965,-3.649987,5.228783,-5.823441,-8.933179,-6.593302,7.652992,-9.349553,9.106824,-3.789616,-0.426788,-9.063465,-2.173735,5.532166,0.465388,-3.451182,1.184349,4.621955,7.312328,-3.131575,-3.417169,-3.128636,5.129639,-3.017740,6.350826,-6.533296,-0.770275,-2.583767,-4.890073,5.630805,2.628514,4.229723,-0.269116,1.740929,-3.156247,2.353711,0.507860,-0.365215,0.405908,9.393133,8.425876,-5.273711,-7.650706,0.128935,-7.284092,-8.133352,-3.023881,6.269540,-7.208900,-8.788447,-2.063862,-7.537153,-9.183100,-0.910273,3.242032,-4.195577,1.115642,-4.494303,1.657089,-3.303731,8.834212,-6.951783,-4.515036,-2.057444,-0.371346,7.177844,3.053983,-9.735051,-6.016637,2.461112,2.307652,3.371031,-0.999627,-4.177197,7.338459,-2.326185,-6.173030,-5.122968,-3.242682,9.745598,-8.018749,0.575181,-8.227113,3.399811,-4.239849,8.448126,-1.647658,-0.837730,-0.856111,-9.399301,-7.763128,-4.373673,3.624786,0.603029,-9.839631,0.101675,-3.192451,-3.922884,-5.276660,1.776265,-7.244865,-1.094309,7.045887,9.059786,-9.490431,6.540717,-1.836801,6.256561,7.992453,6.756462,2.600154,-8.851621,2.125054,9.000465,-6.419567,-6.819457,9.717663,1.128385,-0.124762,-9.405588,-3.792591,3.463740,-2.121015,9.655731,2.797537,4.990429,9.084103,-8.749610,-3.690557,-0.230507,1.637486,0.977966,-2.379434,4.971453,6.557794,8.353559,-9.989780,0.919378,1.897774,-0.520010,5.557178,4.160921,0.970058,-5.861091,3.591585,-2.269930,4.623883,2.925449,-9.980375,-6.855353,3.671714,7.113221,-7.806298,-2.158677,8.790278,2.262203,-5.624351,1.543939,-8.193571,0.743478,5.000376,-1.704406,3.150965,-9.115616,6.946781,8.751131,-1.203117,-1.282916,1.562543,-7.823596,5.592452,-7.755399,-0.586635,3.926926,8.851262,1.949823,-1.417139,4.555958,5.465628,1.793242,5.632649,7.078136,4.854043,-2.318182,-4.716274,-3.324188,-2.535340,9.242779,-3.324113,-4.135168,3.044313,-4.925893,0.164363,8.231726,6.457453,8.753037,-0.329099,-4.089597,-9.082982,-4.208844,0.608008,-4.355143,1.494255,0.881773,-9.338461,6.732552,9.731539,5.902318,-6.867822,6.868321,3.508922,-3.683184,-9.658001,-2.777088,8.531317,3.516716,6.267887,9.193592,-1.573378,-6.467254,-1.757524,-0.317711,-2.527821,-2.819658,3.471477,-3.384265,8.132856,-8.447545,-4.371524,-4.734219,4.457007,-9.503703,-5.678869,-0.305502,-9.738024,0.864974,-5.119489,-5.374067,-7.612195,2.696306,7.281914,-4.557631,-0.056946,-4.431744,0.061464,0.613982,-5.525788,8.508444,8.375388,4.945043,4.785455,-5.905097,4.099127,-6.885705,5.107137,1.992990,1.696704,5.052105,-4.802721,-6.296104,7.664027,-3.516062,-4.582176,-5.835223,0.898364,3.489964,-8.393772,2.843031,8.993145,5.148936], dtype = "float32")#candidate|3429|(288,)|const|float32
const_3430 = relay.const([7,6,5,4,-10,-8,-1,4,9,5,-4,10,10,-1,2,-4,3,10,4,9,-2,-4,6,-9,1,-4,6,10,-5,-9,-3,5,5,-6,-3,4,2,10,-7,2,4,2,-1,6,-5,3,9,6,5,-4,8,4,5,7,-5,-1,6,-9,-6,-3,9,1,-5,-2,10,9,-4,-10,-8,-3,8,2,-7,-5,5,6,-3,1,-3,-8,-9,-2,3,1,9,-6,8,-4,-10,-2,6,-8,4,-9,-2,-9,-6,-3,-3,4,-8,10,8,-5,-3,-3,2,8,-1,-2,-3,-4,-1,2,1,5,-6,-9,1,5,8,2,9,5,-8,3,-9,-2,3,-4,10,8,-8,-10,-1,-2,-3,9,6,-10,-3,8,9,2,-4,10,10,9,5,7,-4,-4,-5,9,-9,8,3,5,3,-7,6,10,5,3,9,-5,9,2,-4,-7,-9,6,8,5,1,-2,-7,-4,-4,-2,7,7,-9,-1,-9,6,1,9,3,5,-4,-2,9,-5,3,7,-7,7,3,-10,4,10,8,-9,3,-7,-10,10,-5,2,4,-9,4,-8,-3,1,4,5,3,5,7,-5,-2,-6,-1,6,-10,6,-2,2,1,-3,7,7,1,7,5,-4,-8,8,9,-5,-1,-2,5,8,-9,3,2,-5,-3,2,-4,-8,5,2,-2,-2,7,-5,7,-2,-8,-4,6,-3,2,10,-2,-8,4,10,6,8,5,8,1,-10,-7,-9,-4,4,10,1,2,-8,7,4,-1,7,-8,-9,6,-7,-6,6,3,-5,3,6,5,-6,1,8,-2,7,1,-10,5,-10,6,-10,-5,3,-3,7,-10,-2,3,-4,-4,-7,-8,2,4,4,-7,10,-3,3,-9,-4,1,3,-8,1,9,9,-4,-1,-4,-10,-3,-6,-5,-2,7,-5,-4,4,-7,-5,2,-4,-6,7,-3,-2,9,-3,-5,9,1,-2,-4,8,-1,8,9,-2,-8,-5,-7,-7,5,1,3,1,5,10,10,-9,-2,-6,8,6,-6,6,7,10,-1,1,-2,-9,-8,6,-8,-2,-1,-1,-6,-6,-7,-4,6,-6,6,5,2,4,-5,-1,-5,-3,-9,9,1,-8,8,5,-7,-4,-10,10,3,3,4,10,5,6,-8,-1,-10,9,2,-3,5,-1,-6,-7,7,-4,-2,-8,8,2,1,-8,2,-1,1,3,-3,1,9,8,-7,-5,-9,-9,1,4,5,-4,-1,-3,-3,10,-5,5,10,10,-8,-10,9,5,-1,1,10,4,2,-4,4,-1,7,-2,1,-4,-6,5,4,-5,-8,-10,4,2,1,-1,9,5,9,-3,-9,9,-3,-1,4,-1,-2,3,-5,4,-8,-3,8,-5,7,-7,-6,2,-3,-6,8,-1,8,-6,6,3,4,5,5,-1,7,-9,-6,-2,-5,-6,-6,5,1,-1,3,3,9,1,5,8,-10,6,-9,5,-7,-9,9,10,-5,-7,2,-6,-5,7,-9,-3,-2,-4,-7,7,1,-6,-9,-8,-7,5,-4,-4,-9,10,-6,6,-10,-2,-1,-1,-4,1,-5,-8,-8,4,3,1,-9,-10], dtype = "uint16")#candidate|3430|(594,)|const|uint16
call_3428 = relay.TupleGetItem(func_3294_call(relay.reshape(const_3429.astype('float32'), [9, 2, 16]), relay.reshape(const_3430.astype('uint16'), [594,]), ), 2)
call_3431 = relay.TupleGetItem(func_3297_call(relay.reshape(const_3429.astype('float32'), [9, 2, 16]), relay.reshape(const_3430.astype('uint16'), [594,]), ), 2)
output = relay.Tuple([uop_3413,call_3422,const_3423,call_3428,const_3429,const_3430,])
output2 = relay.Tuple([uop_3413,call_3424,const_3423,call_3431,const_3429,const_3430,])
func_3448 = relay.Function([var_3412,], output)
mod['func_3448'] = func_3448
mod = relay.transform.InferType()(mod)
mutated_mod['func_3448'] = func_3448
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3449 = relay.var("var_3449", dtype = "float32", shape = (9, 1, 4))#candidate|3449|(9, 1, 4)|var|float32
func_3448_call = mutated_mod.get_global_var('func_3448')
call_3450 = func_3448_call(var_3449)
output = call_3450
func_3451 = relay.Function([var_3449], output)
mutated_mod['func_3451'] = func_3451
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3823 = relay.var("var_3823", dtype = "float32", shape = (5, 4, 15))#candidate|3823|(5, 4, 15)|var|float32
var_3824 = relay.var("var_3824", dtype = "float32", shape = (5, 4, 15))#candidate|3824|(5, 4, 15)|var|float32
bop_3825 = relay.floor_divide(var_3823.astype('float32'), relay.reshape(var_3824.astype('float32'), relay.shape_of(var_3823))) # shape=(5, 4, 15)
func_2652_call = mod.get_global_var('func_2652')
func_2659_call = mutated_mod.get_global_var('func_2659')
var_3830 = relay.var("var_3830", dtype = "float32", shape = (140,))#candidate|3830|(140,)|var|float32
var_3831 = relay.var("var_3831", dtype = "float64", shape = (40,))#candidate|3831|(40,)|var|float64
const_3832 = relay.const(4, dtype = "int32")#candidate|3832|()|const|int32
const_3833 = relay.const([-4,-3,-3,-5,2,8,10,4,-9,8,-1,-6,-4], dtype = "int32")#candidate|3833|(13,)|const|int32
var_3834 = relay.var("var_3834", dtype = "uint16", shape = (594,))#candidate|3834|(594,)|var|uint16
call_3829 = relay.TupleGetItem(func_2652_call(relay.reshape(var_3830.astype('float32'), [7, 2, 10]), relay.reshape(var_3831.astype('float64'), [40,]), relay.reshape(const_3832.astype('int32'), []), relay.reshape(const_3833.astype('int32'), [13,]), relay.reshape(var_3834.astype('uint16'), [594,]), ), 0)
call_3835 = relay.TupleGetItem(func_2659_call(relay.reshape(var_3830.astype('float32'), [7, 2, 10]), relay.reshape(var_3831.astype('float64'), [40,]), relay.reshape(const_3832.astype('int32'), []), relay.reshape(const_3833.astype('int32'), [13,]), relay.reshape(var_3834.astype('uint16'), [594,]), ), 0)
bop_3838 = relay.not_equal(var_3834.astype('bool'), const_3832.astype('bool')) # shape=(594,)
output = relay.Tuple([bop_3825,call_3829,var_3830,var_3831,const_3833,bop_3838,])
output2 = relay.Tuple([bop_3825,call_3835,var_3830,var_3831,const_3833,bop_3838,])
func_3848 = relay.Function([var_3823,var_3824,var_3830,var_3831,var_3834,], output)
mod['func_3848'] = func_3848
mod = relay.transform.InferType()(mod)
mutated_mod['func_3848'] = func_3848
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3848_call = mutated_mod.get_global_var('func_3848')
var_3850 = relay.var("var_3850", dtype = "float32", shape = (5, 4, 15))#candidate|3850|(5, 4, 15)|var|float32
var_3851 = relay.var("var_3851", dtype = "float32", shape = (5, 4, 15))#candidate|3851|(5, 4, 15)|var|float32
var_3852 = relay.var("var_3852", dtype = "float32", shape = (140,))#candidate|3852|(140,)|var|float32
var_3853 = relay.var("var_3853", dtype = "float64", shape = (40,))#candidate|3853|(40,)|var|float64
var_3854 = relay.var("var_3854", dtype = "uint16", shape = (594,))#candidate|3854|(594,)|var|uint16
call_3849 = func_3848_call(var_3850,var_3851,var_3852,var_3853,var_3854,)
output = call_3849
func_3855 = relay.Function([var_3850,var_3851,var_3852,var_3853,var_3854,], output)
mutated_mod['func_3855'] = func_3855
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3867 = relay.var("var_3867", dtype = "float64", shape = (10, 11, 6))#candidate|3867|(10, 11, 6)|var|float64
uop_3868 = relay.asinh(var_3867.astype('float64')) # shape=(10, 11, 6)
output = relay.Tuple([uop_3868,])
output2 = relay.Tuple([uop_3868,])
func_3875 = relay.Function([var_3867,], output)
mod['func_3875'] = func_3875
mod = relay.transform.InferType()(mod)
mutated_mod['func_3875'] = func_3875
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3876 = relay.var("var_3876", dtype = "float64", shape = (10, 11, 6))#candidate|3876|(10, 11, 6)|var|float64
func_3875_call = mutated_mod.get_global_var('func_3875')
call_3877 = func_3875_call(var_3876)
output = call_3877
func_3878 = relay.Function([var_3876], output)
mutated_mod['func_3878'] = func_3878
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4380 = relay.var("var_4380", dtype = "uint32", shape = (11, 7, 1))#candidate|4380|(11, 7, 1)|var|uint32
var_4381 = relay.var("var_4381", dtype = "uint32", shape = (11, 7, 14))#candidate|4381|(11, 7, 14)|var|uint32
bop_4382 = relay.bitwise_xor(var_4380.astype('uint32'), var_4381.astype('uint32')) # shape=(11, 7, 14)
func_2967_call = mod.get_global_var('func_2967')
func_2971_call = mutated_mod.get_global_var('func_2971')
const_4389 = relay.const([-1,1,3,-2,-6,-1,-3,5,-2,4,10,-7,4,6,4,-1,-10,-7,-8,10,-1,1,8,10,8,5,-4,5,-4,6,-8,6,-9,-1,-3,9,3,-8,9,-10,9,-6,-8,3,-2,1,-5,-8,-2,-9,9,9,-9,3,-2,-4,-8,6,-1,-7,9,3,-7,-8,9,3,5,-9,8,2,-5,-5,-9,9,1,5,8,-3,8,-3,9,4,-10,10,-5,2,-1,4,-7,9,1,-7,3,-3,3,9,-3,-8,6,-3,-2,-2,1,4,1,3,9,-2,-1,-3,-2,-8,5,-10,-6,5,-7,5,-5,5,4,7,-1,6,-3,-6,-3,-1,-2,1,-3,8,-5,9,1,3,5,7,-8,-10,3,-7,-2,-7,1,-2,6,6,4,9,-3,-9,4,-6,2,-7,-2,1,5,8,-6,10,-2,-1,-2,-2,-5,-5,8,1,-5,-4,3,1,-3,-3,1,1,10,2,2,-8,6,6,-5,3,-5,9,2,7,-10,6,-4,7,-9,-5,-4,10,6,-3,2,3,4,-9,-3,-4,7,-4], dtype = "uint64")#candidate|4389|(208,)|const|uint64
const_4390 = relay.const([[5,-10,6,-5,1,-8,-3,6,-10,1,-2,-2,-6,9,6,-2,3,6,-8,-6,-3,3,1,-9,8,-6,1,-5,9,-5,-5,-6,9,-10,4,-5,10,4,-7,10,-5,8,-6,-2,-6,2,4,-2,1,-9,7,4,3,-7,-3,8,7,5,-10,2,4,7,-1,10,-2,1,-6,-5,4,-1,-2,4,-6,5,-8,2,-1,9,-10,8,-1,-1,3,-7,-9,2,7,3,9,-1,-8,-10,-2,3,-9,5,-9,8,-4,6,1,-7,8,-6,-1,-3,-10,8,-1,7,1,1,-10,-1,-3,-8,-9,-7,-6,-3,9,-7,-10,-2,-7,2,-1,-9,5,3,-9,4,-7,-6,-5,-3,-6,5,7,-8,6,-2,6,-10,-3,8,-6,-1,-5,-8,-7,-7,1,-10,9,3,-9,-4,8,7,7,-5,-10,-7,-5,-5,8,-5,2,-9,5,-8,-7,-1,-6,-6,4,7,-10,-8,9,-7,-5,-8,-10,-10,7,1,-10,-10,-3,-1,-10,2,3,6,3,-1,-8,5,-3,2,3,-5,8,-1,-4,7,-1,5,-8,7,4,10,-6,9,10,-3,-5,-7,-6,3,1,5,8,9,10,-7,-6,8,2,3,-9,6,-7,-8,-1,2,-10,5,8,3,-10,4,-5,-9,-2,-8,9,6,7,8,6,10,-8,3,9,-3,6,4,-4,10,-5,6,4,-1,-7,-7,-8,10,-3,1,-10,-10,4,10,7,3,-10,-8,-10,-5,6,1,-10,10,-5,-5,5,-3,-9,8,-3,-8,9,-7,-2,7,4,-2,8,-8,-2,8,-8,8,-4,-1,-9,-1,-4,-7,-1,-4,2,-1,-9,5,-4,1,-6,9,-7,-8,-9,5,7,10,6,-7,2,-3,9,-4,-3,-6,4,-8,6,-9,6,10,6,3,6,4,-10,-10,-5,3,-7,-6,4,4,-1,-7,-9,-10,9,-8,-5,-4,1,3,8,3,-5,-8,6,-9,7,4,2,-10,1,-5,-4,1,-5,-1,-10,-8,-5,2,-10,-8,6,4,10,-7,4,7,-3,3,-3,-10,-9,8,7,-7,2,6,9,-5,4,2,-6,-5,-7,8,3,7,-6,-7,-6,4],[10,-5,9,-10,2,2,10,8,6,-1,3,10,-2,4,1,-7,7,-4,4,3,7,-5,-3,-6,10,-9,-7,4,-5,-9,-8,1,-10,4,-8,-1,4,-2,10,7,9,-3,-4,6,-7,10,-9,1,-4,3,-3,7,-10,-4,10,2,-7,6,2,-5,-4,4,-5,-5,1,-3,2,-10,2,5,-5,-1,-2,8,-8,-4,-9,8,-5,-7,2,-9,-1,-9,4,6,2,6,4,-1,8,-5,-6,-4,-7,-7,10,-5,8,-5,1,4,9,-9,-3,-7,6,1,-6,-2,6,2,-9,9,3,10,5,7,-3,9,5,-10,-8,2,5,-7,-5,-1,7,2,5,-2,-5,6,-5,5,-1,-10,5,2,-8,-5,9,-9,-7,4,4,-4,-7,8,-7,2,9,8,-6,6,-3,-6,6,-7,-6,-4,-1,1,1,1,-2,8,7,-5,-10,4,1,-4,-7,1,3,6,-6,-3,-6,-4,7,10,-10,6,6,-1,-2,-6,-7,-4,2,6,7,-4,-4,-1,-2,7,-6,2,-5,-2,10,-7,7,-9,3,7,-7,-5,1,3,7,-5,-5,8,10,8,-8,-8,8,3,5,3,5,6,-4,-7,-1,5,-9,-5,-10,10,-7,4,8,-9,1,8,10,10,-2,-4,-1,-8,-1,-1,7,-1,-2,2,-4,4,4,9,-3,-9,-10,-10,3,1,-3,5,4,6,2,-5,-10,-2,-10,-8,4,9,-2,2,7,9,6,1,9,7,7,8,4,4,4,8,-1,9,6,-9,7,-6,-2,-6,-6,2,6,5,-1,3,-10,3,-9,-5,4,-9,-1,-5,-4,4,3,-7,8,-10,-8,-6,5,10,-2,1,10,-10,-7,-4,5,2,5,-8,9,6,2,-6,3,-2,-2,4,3,2,8,-2,7,-2,1,-7,-1,-8,9,1,3,-9,-4,-6,9,-10,6,-2,4,-5,-8,-7,-7,2,-2,-8,-4,-7,-3,9,1,-9,-9,-9,-6,10,-9,3,-4,2,5,9,10,-10,-9,3,8,8,-4,2,1,6,-9,-6,3,8,-1,-7,-3,3,6,3,-9,-1,9,-7,-3,2,1,6,-7,9,-9,8],[3,-5,7,-3,2,3,5,-2,10,-2,-4,-4,3,9,-2,-6,-8,6,-1,-4,-10,4,7,-6,2,10,8,-6,-9,-3,-2,8,1,7,-2,7,-10,-1,-9,-3,-5,-6,7,4,-7,-9,-7,10,2,2,-8,7,-1,2,5,2,8,-5,-2,-3,7,9,-10,1,-4,-5,1,-10,-2,2,-8,1,2,1,6,-2,-5,-4,10,6,-10,6,-6,-6,9,-8,-2,-2,-5,-10,-8,-2,5,-7,-5,7,-5,9,-9,10,2,-6,-8,-3,-3,4,5,-4,3,-5,6,6,-7,3,-7,-6,2,5,10,3,-1,7,-2,-8,4,-5,-5,2,-3,10,9,-3,5,10,-8,-1,7,-6,-10,-4,-8,-3,-10,-7,-1,7,2,-8,9,-4,-1,5,4,-7,-6,9,1,-8,-8,-8,-3,-8,6,-2,5,2,-5,-4,-8,5,3,7,5,-7,-10,3,-1,-8,6,9,-6,-5,-8,9,-9,8,-8,8,-10,-10,9,4,4,-4,-2,2,-6,10,-8,-7,-5,1,-10,9,-1,2,10,-1,-8,5,-9,-9,-5,-8,9,-10,-10,8,-7,2,5,1,10,2,-6,-9,5,10,6,-1,-3,1,-1,5,-5,-9,1,-10,9,-10,-8,-9,-6,2,-9,8,3,7,-8,5,3,6,1,6,7,-4,2,7,-4,-1,2,-7,7,-3,10,10,10,-7,1,3,-9,2,-2,-1,-10,1,10,-10,-4,3,9,-9,-9,-1,2,-10,-1,-2,3,-9,-4,6,-8,2,-9,10,-10,8,5,-2,5,8,4,1,1,-10,-10,-10,3,4,1,-10,3,10,9,-5,-4,4,-2,5,5,-2,-2,-7,6,-6,5,8,6,-8,-2,1,7,-3,-8,-4,-4,10,-1,-10,8,4,2,1,-1,-4,1,8,1,-9,-10,4,1,1,-10,-9,-8,4,-4,-9,4,-6,9,7,5,-8,8,10,-5,1,3,6,10,3,-4,9,-6,-7,10,2,9,-2,-2,-6,3,-6,5,8,-1,1,3,-5,6,-1,-7,2,5,-3,-4,5,6,6,3,-7,4,2,-8,6,1,10,2,-4,-4,3,-5,9],[-10,-3,8,-7,-9,-2,6,-1,-7,4,3,-6,6,6,6,1,10,-8,5,3,-4,1,4,8,-4,-1,-2,-3,6,8,-5,-9,4,-3,5,-2,-10,-1,-6,-8,-3,7,-7,4,4,-5,-2,3,-4,-6,2,-1,1,-9,-3,7,-5,1,-9,-5,-6,1,7,-5,-10,-1,9,9,6,-6,4,-4,10,-10,10,-1,6,-6,5,3,4,-10,-7,-4,-6,3,6,8,3,-6,-3,-9,8,-1,7,-8,1,-6,8,3,-10,3,-4,-3,-9,9,-5,-3,2,-6,10,-1,-4,1,-5,-6,-3,-3,10,-3,7,2,-10,7,-9,-2,8,1,-10,-6,7,4,-2,8,-4,-10,-4,-3,7,8,-4,6,6,6,10,-5,-5,-8,5,-7,-6,10,-9,-6,-4,4,-7,-9,-8,10,-6,-6,1,6,-9,-7,-1,-6,-1,-9,-7,2,-5,-8,6,2,3,1,-3,2,-1,8,-5,4,-9,10,8,-1,-2,6,6,-10,-6,-5,-9,1,-7,3,7,7,-10,3,8,1,-4,-8,4,1,10,-7,2,-10,-10,10,-8,-3,-1,-8,-2,-9,-5,9,6,9,4,6,7,5,-8,-5,2,-7,-6,-4,-6,-7,1,-2,3,-4,9,-5,5,-4,-6,9,6,-3,-3,-3,7,1,5,6,7,7,9,4,3,-6,8,-9,3,9,6,-4,1,2,9,3,7,3,3,1,-5,7,2,8,-7,-9,8,-7,-1,4,-8,-7,9,2,-7,-8,-9,8,10,-5,4,9,9,10,4,1,2,-8,8,-3,-4,-7,-5,-2,-2,1,3,7,-3,-4,-2,-10,1,-5,9,-3,-8,-3,7,7,4,-5,-5,1,-3,6,7,10,-5,6,3,-6,10,-4,-5,-6,1,8,-8,-6,1,6,8,-8,1,7,-5,-6,2,-4,5,8,3,-1,-4,-10,7,-4,2,-9,10,-8,1,-2,8,-10,7,-6,-3,-3,-2,-1,-9,-7,9,-7,-4,-5,-10,5,-4,8,4,-4,-1,-3,2,-3,1,3,7,-10,-4,5,-4,4,7,1,-8,-10,4,3,1,6,-7,3,-8,7,10,7,-2,1],[-5,-5,-9,-3,10,6,3,5,-10,5,3,-1,-2,6,1,7,2,-10,-7,-2,6,-10,2,8,2,-2,-5,-10,3,-3,3,-2,-10,-6,5,5,5,-10,-9,-9,-4,-7,-3,-6,-3,1,-8,3,-7,-6,4,-4,5,8,-6,6,-7,1,-10,-6,-7,-10,-4,-3,-9,-3,-10,-6,3,-2,10,-1,1,-8,-10,-5,-3,-1,8,-8,-5,-2,8,-4,1,-1,4,-9,-5,-9,1,-1,-8,1,-10,-3,-10,4,2,-8,-3,-5,3,5,2,3,7,10,-8,-1,10,5,-10,7,-6,8,-7,8,8,-8,-9,-8,6,-2,-8,5,1,-9,9,-5,-4,4,-6,1,-6,-8,1,1,-1,4,-10,-1,-10,-1,8,-4,9,-6,-10,10,-6,-3,4,6,9,-7,2,-1,10,-3,-8,-3,-3,-3,-5,-1,3,8,7,3,6,6,-9,10,9,-10,-10,-7,3,8,-4,9,-2,-7,2,7,-1,6,10,-1,-1,7,5,4,3,-4,-8,6,-9,-9,2,-9,-8,5,2,6,-7,5,-6,-10,9,-8,6,-9,7,-7,3,-4,-2,-9,-4,-8,-8,5,-9,3,-8,7,6,-10,-3,4,3,-6,-8,9,-8,5,7,-1,6,6,-4,-9,-10,-3,-5,8,-6,3,9,-8,-7,4,6,2,-9,3,3,6,-10,-6,-8,3,9,10,7,5,-4,10,4,9,2,9,-7,-9,-5,-1,1,7,-1,-8,-8,2,5,3,2,5,5,1,10,-8,-5,6,-7,8,3,-4,-10,-4,-8,4,-8,-6,-4,6,7,7,-4,-9,-7,7,-2,2,9,7,-4,9,-2,6,10,-8,-5,-8,-9,10,-4,7,-1,-8,-6,10,-7,-1,-4,5,-10,-2,9,5,-8,5,5,-8,2,9,-2,-9,9,-10,-8,8,1,2,-9,9,2,-9,-5,-5,4,4,-4,7,-2,6,-3,7,-4,3,5,-3,5,6,-9,-6,5,-9,2,2,-4,-5,5,-2,-8,-4,-8,-10,9,2,6,-2,-5,-8,8,2,-10,-10,8,8,6,10,9,6,5,7,-3,2,10,8,2,10,8,1,-2,1],[10,-4,3,-10,-8,-2,8,3,-6,5,-1,-3,7,-5,2,-6,9,-5,10,3,-2,10,-8,7,-4,-1,-1,5,10,-6,-8,-7,4,9,7,1,6,-1,-4,8,5,2,6,6,7,-8,-6,-2,-7,4,5,-7,-7,-5,9,7,-3,-1,-6,4,-9,-10,7,5,7,10,-5,4,5,2,-3,9,-10,6,7,3,10,1,5,1,-5,3,8,-3,7,9,8,7,-10,6,-2,-5,10,10,-4,-7,-4,3,8,-4,-3,6,-5,-9,-5,-4,4,9,-9,-1,-2,6,-1,-7,-4,5,-8,-9,3,7,3,-2,5,10,2,9,-2,-1,3,-5,1,-6,-10,-9,1,8,9,10,5,8,-5,-3,-1,1,2,-2,-5,-9,1,7,-6,-7,-9,1,-1,1,-5,3,9,-3,-2,-2,-3,-4,-3,-8,8,-5,4,-8,6,-1,6,-10,-9,-3,-6,-10,8,-3,4,1,9,-6,-4,10,-8,3,-6,-6,-4,8,6,10,1,-6,-7,5,-4,8,7,-2,-10,6,7,-3,-1,-2,-10,-10,6,-5,4,8,3,10,6,5,-6,-4,-5,4,1,-4,8,3,3,-8,8,-4,2,10,-5,-5,-10,-4,7,4,3,8,-3,7,9,-2,1,-7,-2,-2,4,10,6,10,9,1,1,5,-10,-1,-10,-5,10,6,9,-3,-7,8,4,-7,1,6,9,9,6,10,4,8,7,10,-4,-10,5,-4,-7,1,-1,1,8,1,9,-9,9,9,-3,-2,1,10,2,-4,-7,7,3,9,-8,-7,-4,-2,-8,-8,1,10,4,7,-3,2,-9,7,-7,-5,-9,-1,-3,-5,-3,1,-3,-5,10,2,4,-3,-5,5,7,6,-6,-8,-8,-1,-7,5,5,8,2,9,6,-1,2,-4,7,6,4,4,8,5,8,-7,9,-8,-5,-9,1,-5,-7,4,6,-7,4,6,-7,-7,-10,5,8,-2,-10,-8,-2,-4,2,3,7,-10,-3,3,7,2,2,7,-3,-7,-2,4,9,-5,7,9,-9,-7,5,-2,-9,8,-4,-5,3,-9,-6,1,2,-6,-3,5,4,-4,-1,9],[-5,-1,-3,-7,8,-3,1,-2,9,4,-3,-4,10,-5,-6,-10,5,-1,8,7,4,-2,6,-9,-2,-7,-1,-1,8,-9,2,7,-1,-6,-6,6,-4,6,4,5,8,2,-2,10,1,-6,9,10,2,10,8,-10,8,-2,-3,2,-8,3,-9,10,2,-5,-7,-10,1,-9,-10,9,6,10,-8,-5,7,6,10,-8,-4,-3,7,2,-5,-5,9,-1,-7,8,-5,2,10,-10,8,3,10,-2,9,-3,4,-9,3,-10,3,8,1,-10,9,-1,7,-8,-10,-1,4,-5,-3,-1,-4,-9,-9,5,-6,-10,4,-4,7,-7,2,-8,-2,-3,7,3,5,8,-10,5,-9,-3,-10,5,8,-6,10,7,9,8,3,7,5,5,10,1,7,-6,10,-4,-3,-9,6,-2,-5,1,4,-8,-5,4,5,9,-9,8,-6,8,-5,-10,-2,-8,-5,-6,8,7,9,1,7,5,-4,-5,-7,8,1,-5,-10,-1,3,-3,-1,6,-2,-3,6,-6,1,9,-6,10,-4,-2,9,9,-1,4,-5,-4,-7,5,-5,6,-4,-1,-3,-10,7,3,-5,1,7,10,8,-8,-2,-10,5,2,2,-10,6,2,-1,-3,-7,4,2,5,-1,6,-7,-10,-4,-10,6,1,-1,7,-8,-10,-7,-1,2,8,1,7,-2,-8,7,-5,9,7,9,-2,6,-3,8,-1,-2,-2,-3,-8,-5,-3,6,7,4,-7,-10,1,3,-1,8,9,-1,2,9,-2,6,-9,5,-10,-2,3,8,-9,6,9,-2,-3,-1,-8,4,-5,7,-5,-9,-1,-1,-4,6,7,-3,-7,7,1,-6,-8,-1,3,8,8,2,-10,-4,2,-8,-6,-7,10,-5,-2,10,-3,5,-6,-3,-2,-6,8,7,-3,-8,7,-10,-1,-6,7,-5,6,6,2,-8,4,5,5,-1,6,-5,-9,10,3,-3,1,-3,-7,-8,-8,-1,2,6,9,-4,-9,10,8,-7,5,1,9,4,1,-3,10,-5,4,-10,9,10,4,5,9,3,2,-1,-6,-7,10,-7,-7,-3,-4,-4,8,10,-1,6,-6,5,10,1,2,2,1],[2,-4,9,-9,-10,4,-1,-6,6,-3,-4,-8,9,-4,-3,10,2,-4,1,-3,-10,-4,3,-7,4,1,-3,2,2,2,-2,3,-8,7,10,-4,-7,1,-10,9,8,-1,-3,-4,-2,10,-1,-10,-2,10,-4,-2,3,-1,4,7,1,5,-3,-7,-5,9,-2,5,-3,-5,9,10,-3,-5,2,-8,-9,5,10,-9,10,1,6,-7,-10,7,-2,-1,9,-9,-7,-2,-10,2,-10,4,-8,6,-10,-2,7,-10,-6,1,7,6,9,-4,-6,6,5,8,7,-7,6,7,-7,-10,8,-10,-5,10,-8,-10,9,10,8,-9,-3,1,-6,-3,-3,-7,6,7,8,5,2,-8,-1,-6,8,5,-4,1,3,2,-8,-9,8,8,-1,-2,8,3,10,-10,9,-2,-2,-4,8,10,-6,-10,5,2,9,-9,6,6,-5,6,4,8,2,8,9,4,9,2,2,-9,10,9,2,-1,4,3,-5,3,-3,5,-10,-9,-3,-2,7,-7,9,-2,-3,-10,-8,6,-3,1,1,10,-5,4,-10,-4,-8,-3,-8,10,7,10,-10,-1,7,-9,-7,2,5,-1,-2,3,7,7,-2,9,-6,7,5,-8,-9,1,-5,-8,-10,-7,-4,-2,-6,-8,-7,-8,-6,-10,-2,-3,5,-4,8,-1,3,-1,-10,-9,6,-7,-4,8,9,-1,4,1,-8,10,-9,4,-10,-8,-10,7,6,-8,8,-2,-2,9,7,-5,-6,-10,-7,8,9,-10,-5,-2,-10,1,6,6,-6,-4,-4,9,8,-7,-6,-4,3,2,10,6,6,-7,-1,-10,7,-4,-7,-3,4,1,6,-5,-9,6,-2,-9,-10,-3,-1,-9,-9,1,6,10,-7,10,-6,4,-1,-5,3,-3,10,3,9,2,-7,-3,-9,2,3,9,6,-7,4,-10,-3,9,9,7,-5,3,1,6,-10,-6,-2,-4,-8,3,-10,8,-8,-1,8,2,-8,-9,2,9,-4,4,-9,2,9,9,2,7,6,-4,7,-10,-2,3,4,5,6,4,8,-3,5,10,-3,7,4,-4,9,7,-4,-5,-4,-8,8,8,-2,-4,-6,6,1,9]], dtype = "uint64")#candidate|4390|(8, 416)|const|uint64
call_4388 = func_2967_call(relay.reshape(const_4389.astype('uint64'), [13, 1, 16]), relay.reshape(const_4390.astype('uint64'), [13, 16, 16]), )
call_4391 = func_2967_call(relay.reshape(const_4389.astype('uint64'), [13, 1, 16]), relay.reshape(const_4390.astype('uint64'), [13, 16, 16]), )
output = relay.Tuple([bop_4382,call_4388,const_4389,const_4390,])
output2 = relay.Tuple([bop_4382,call_4391,const_4389,const_4390,])
func_4395 = relay.Function([var_4380,var_4381,], output)
mod['func_4395'] = func_4395
mod = relay.transform.InferType()(mod)
mutated_mod['func_4395'] = func_4395
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4395_call = mutated_mod.get_global_var('func_4395')
var_4397 = relay.var("var_4397", dtype = "uint32", shape = (11, 7, 1))#candidate|4397|(11, 7, 1)|var|uint32
var_4398 = relay.var("var_4398", dtype = "uint32", shape = (11, 7, 14))#candidate|4398|(11, 7, 14)|var|uint32
call_4396 = func_4395_call(var_4397,var_4398,)
output = call_4396
func_4399 = relay.Function([var_4397,var_4398,], output)
mutated_mod['func_4399'] = func_4399
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4523 = relay.var("var_4523", dtype = "int64", shape = ())#candidate|4523|()|var|int64
const_4524 = relay.const([[[4,-10],[-9,3],[10,5],[8,-9]]], dtype = "int64")#candidate|4524|(1, 4, 2)|const|int64
bop_4525 = relay.right_shift(var_4523.astype('int64'), const_4524.astype('int64')) # shape=(1, 4, 2)
output = relay.Tuple([bop_4525,])
output2 = relay.Tuple([bop_4525,])
func_4531 = relay.Function([var_4523,], output)
mod['func_4531'] = func_4531
mod = relay.transform.InferType()(mod)
mutated_mod['func_4531'] = func_4531
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4532 = relay.var("var_4532", dtype = "int64", shape = ())#candidate|4532|()|var|int64
func_4531_call = mutated_mod.get_global_var('func_4531')
call_4533 = func_4531_call(var_4532)
output = call_4533
func_4534 = relay.Function([var_4532], output)
mutated_mod['func_4534'] = func_4534
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4793 = relay.var("var_4793", dtype = "float32", shape = (9, 8, 12))#candidate|4793|(9, 8, 12)|var|float32
const_4794 = relay.const([[[5.586489,-6.199093,8.171462,9.374308,7.581610,-3.365003,-6.285909,0.845342,9.879304,7.267804,-0.303943,4.962068],[4.749042,1.314304,7.543394,9.777280,6.140502,8.227200,4.841236,-6.276930,7.782428,9.197690,-4.087893,-2.307545],[-6.033687,0.216780,-7.786216,2.003116,-6.928709,0.413299,8.011649,0.346623,-4.837437,-3.183501,8.468081,-0.268826],[0.320234,-4.221924,8.448181,8.164364,-1.609075,-0.132676,7.246274,-0.546690,3.193712,-0.155869,7.329425,8.118629],[-0.245518,3.375454,8.577292,1.070555,6.836359,-6.173524,-2.350034,0.492524,-3.493174,1.914583,7.347043,-7.723906],[7.326951,-8.855090,-4.903572,-7.592503,6.918520,-4.887554,-8.012481,8.506161,5.787663,-7.276997,-8.670906,-4.484026],[4.783707,-9.509790,4.591114,1.977888,2.387283,7.050301,-9.906662,0.720162,-5.050762,-2.312961,1.380324,-6.185778],[4.032038,-3.455239,-7.103129,-0.438643,-4.327618,4.918900,4.025094,-3.213007,-1.975079,-6.847880,8.822326,-2.572580]],[[7.571807,-5.511761,-8.384701,9.580206,0.331262,7.997670,-4.814574,-9.837033,2.979821,6.419359,-4.853046,5.585622],[3.933039,0.209955,0.405061,-8.837949,-5.596347,8.432279,-6.359364,-3.502345,-6.259325,1.915762,-3.625372,3.179148],[7.977810,-9.690569,-2.443736,-2.010494,-9.870641,6.231538,5.680606,-1.217530,-9.401133,7.374900,7.072789,5.235872],[6.700236,-1.729559,-9.665391,4.698844,-8.364357,2.961560,-3.242334,8.705487,-8.089053,-1.582321,-7.816285,4.331037],[1.508675,9.630619,2.007438,-6.724861,-0.031037,-4.824345,5.092636,-1.431362,4.184087,-1.216857,-4.574633,-6.603082],[-6.163758,-5.210785,-0.134624,-4.002234,-8.154609,-0.206637,-0.675041,4.255865,6.442434,4.540348,8.339667,6.692044],[0.066436,-9.844916,6.335595,-0.272009,-6.349279,-4.983505,2.630792,-3.223171,7.492188,7.274478,6.849309,-6.544814],[-5.518477,0.047583,7.250529,-9.147646,5.267637,-1.795513,-2.559986,-8.685182,-6.426044,1.150965,7.142434,8.173054]],[[-0.855425,-9.961954,1.544764,-9.228684,-1.928239,-5.824036,-8.453443,8.734135,9.161832,-0.733914,-3.567118,-9.493642],[-7.473984,-6.525221,9.228410,-0.149324,-7.048710,-0.629853,7.231874,8.435805,-8.952222,7.535851,5.870188,-6.605350],[6.455235,-9.983841,-4.457514,-5.584342,-4.274457,-7.201941,-3.759835,3.104393,-8.541890,8.674161,-7.721366,7.769970],[-7.711533,-0.526667,1.875699,-0.542668,8.053417,7.618554,-3.453202,-5.946212,-0.723251,-5.041319,7.797071,-0.685017],[3.790293,1.679012,-3.139699,5.953543,-9.168422,-9.182777,-0.035114,-9.367983,9.636729,4.150809,8.784644,-3.480512],[5.929686,-3.078915,-0.673982,-6.851267,-1.330088,-2.164662,-7.632022,3.336656,5.286682,3.910942,8.889878,9.946614],[9.884970,-3.456601,5.951800,-9.319831,4.379806,1.670699,3.764265,-5.497551,-4.426265,1.385486,-3.052065,3.504124],[-6.387672,8.454302,-8.585410,5.154566,-3.317346,-0.478963,-9.990636,-3.531888,8.379722,-0.110473,0.600137,5.478965]],[[8.441617,-9.044424,3.979923,6.710624,-2.413111,4.836363,8.045796,-5.180019,-8.078964,4.917110,-1.687122,1.593321],[-6.713506,-6.833122,-2.717892,4.807181,-8.514665,3.777909,1.036039,-9.740778,9.841343,-4.867794,-6.477722,-9.648957],[1.859431,9.463704,1.431129,2.202579,-8.892851,3.617033,8.961051,-1.372330,9.895333,-5.643184,-5.500678,-0.078546],[-6.235912,0.039571,-7.320134,-6.201613,4.907565,5.411807,-6.637261,-0.970960,-9.773716,6.663632,-5.314599,-4.847662],[4.069878,-9.932015,6.785445,6.284132,8.845982,-3.506776,6.984705,2.323477,-3.473595,9.669697,-9.393698,-6.510097],[-4.929015,-7.321844,5.160202,-1.828291,4.578442,2.444945,1.939659,1.826552,5.795771,-9.985236,-1.737888,2.219897],[-5.336253,2.287422,4.146868,-9.693146,4.113123,-9.946509,8.693848,3.675471,-0.912027,2.037005,4.399826,-0.699800],[-0.773004,5.778518,9.415114,4.881570,-1.304949,-2.397571,-1.066539,3.648118,4.925937,5.579390,-1.382373,-1.862415]],[[4.358023,-7.965421,-3.362710,4.754120,-7.387827,7.509602,3.248654,6.214345,3.858935,8.893992,-0.590383,3.760949],[6.379320,-7.815819,7.282626,-7.855626,-6.013971,0.407708,5.179844,7.555678,-2.259167,1.483342,-7.458207,7.250084],[-7.759965,8.524729,0.742263,5.750564,8.490331,-6.759919,-6.989104,0.465853,2.308728,1.815824,9.666984,-0.758595],[9.711635,-3.413994,5.148911,1.217256,-1.870908,-8.154816,5.093638,-1.580560,-6.510625,1.311818,1.686633,5.949430],[1.469121,-6.143721,-2.544522,-4.156190,-2.693390,1.059710,-7.277010,-0.529431,2.673426,-4.925191,-4.609519,-8.088927],[7.785531,1.614816,-6.486960,-0.208485,6.725751,6.153128,9.590375,9.702007,-7.636049,3.036391,5.554805,5.120699],[7.686599,4.035563,5.310194,-8.902146,5.459940,8.987062,-3.852235,1.293406,-2.402101,9.472898,4.083864,-0.557005],[0.401925,-8.087503,2.939830,-7.199782,-7.295960,-1.913250,4.872379,-4.830574,-8.850504,-1.766075,6.648128,-0.281126]],[[-3.283437,-5.801969,-3.503357,7.126744,-2.871171,-3.337411,-1.637333,-8.460573,-5.947920,-8.309856,2.472367,-3.231451],[-4.084766,7.621049,-5.194103,-2.673579,5.627716,-8.609472,4.211808,-8.136454,-1.028426,3.365352,4.314616,5.087995],[-7.323441,2.342851,-7.579502,1.218568,-1.931550,9.782162,-6.647635,-5.195179,-9.454124,7.862269,-6.365921,1.014190],[-1.145183,1.177505,5.999522,7.625634,-8.346888,6.774299,-2.895487,-1.884732,7.694452,0.978533,3.422755,-0.784857],[5.368232,2.267057,1.938130,-3.430574,1.064123,0.883677,-1.023360,-8.597147,6.091761,1.713780,-1.112940,-8.266268],[5.814562,5.581006,3.683149,-7.492775,8.697699,0.806370,8.645830,-1.247113,5.455251,6.798130,-5.385084,6.121972],[1.853112,9.527339,-8.988777,-5.400925,6.294651,-1.626843,7.572751,1.200971,-9.008029,4.466190,-3.795705,-0.640937],[4.526762,9.979975,8.470865,9.563867,-8.521250,-2.044643,-1.240790,-0.981936,-9.084441,1.302119,-2.919499,-2.858068]],[[4.067686,-9.576710,4.223953,9.646094,-2.074612,-8.626984,6.353236,-4.726611,-5.870899,-2.233709,8.579032,-6.771237],[8.389003,9.333759,1.187596,-7.754665,2.418384,-9.208593,2.399925,2.238576,7.428655,2.456853,3.204762,-6.796686],[-9.476936,4.250634,5.032050,3.084440,9.705012,-1.702120,-8.719766,8.723420,0.617445,-7.277258,3.780916,-6.366294],[2.179044,-5.077923,-1.348885,-7.577407,1.234614,-0.913077,-8.865473,-7.720063,1.506582,-8.724365,3.772880,9.660434],[5.186630,-7.997804,-0.240252,4.372125,-5.968406,-4.321509,-3.394469,-9.465399,-6.758135,1.329575,-7.908275,-3.435093],[-7.258235,-9.091116,-3.504945,5.803977,7.976357,4.210671,-5.509533,-4.507190,-8.976441,4.713702,7.561026,-1.089480],[4.306638,-6.062542,9.740476,4.094577,9.381197,-2.489984,6.482511,-8.747119,2.033020,-8.839813,-6.329681,-5.080057],[-6.029272,-1.993677,0.458505,1.774363,-1.144912,9.100859,3.427815,5.658892,-9.154291,-7.150913,4.803231,-4.589897]],[[-5.092094,3.383900,0.982046,7.753083,5.668183,-0.941964,8.387247,4.381239,0.931767,4.878724,2.276792,-0.570653],[-3.779959,-3.008269,9.663568,-5.821793,0.568483,-9.647883,-6.478911,-2.543750,5.067831,-8.491075,2.925635,-7.265443],[-3.687973,9.733624,6.933599,2.795846,-9.691162,4.063197,5.153795,-1.063882,8.661745,3.690151,-6.171583,-9.155363],[-7.134729,-6.270943,-4.669597,2.403330,7.379376,8.384346,-8.427579,-7.079828,-0.879075,-7.071819,-1.638759,-4.674542],[3.593099,7.535991,-9.681293,-9.178138,-1.151203,-3.227735,7.406376,-2.951260,-3.988354,3.694762,-5.244184,1.854348],[-7.872204,-1.628143,-3.813879,-8.717852,0.613163,-8.874846,9.504826,-3.967974,0.602582,5.072590,-0.164386,5.159432],[1.920450,1.397667,9.039592,-0.372637,-5.623535,-1.072895,7.608680,4.139968,-3.400599,-8.771119,-3.760634,2.974942],[4.235482,-5.662265,-0.989219,-8.766685,7.971143,-4.831016,5.844703,-0.760730,6.972888,-4.120407,6.953561,6.356483]],[[3.641956,-8.606698,8.406686,-7.474909,-2.082347,-9.509161,-3.190742,-4.343654,6.171198,-5.584185,4.636952,-6.803857],[0.540602,0.113914,-1.453583,-7.267812,4.709046,3.792079,2.127320,8.178167,1.285530,-1.792000,3.118917,6.274541],[5.194357,0.707644,-1.276542,-9.069923,-9.995659,-4.070915,-4.821166,5.270793,4.446287,-9.108058,-6.532285,-6.160821],[-9.396984,4.579067,5.994583,-3.393087,1.952400,4.110952,9.915668,7.973469,-8.738442,4.608605,2.881107,-0.380139],[1.888891,0.236375,-9.073967,5.918592,-9.486475,-3.384067,4.347306,2.235958,-1.429640,-9.616550,-2.092085,-3.813023],[-1.848558,2.825905,-9.132275,-8.925613,2.499153,0.910318,-8.416210,-0.860084,0.483640,-7.628459,8.477477,0.216025],[6.895806,8.145067,-2.553867,-0.547773,4.920773,-5.328676,6.458885,-6.961900,-9.043664,-1.976113,-7.614870,6.699212],[-8.956464,2.091895,5.992435,8.103606,-6.429358,-8.507520,-8.876552,9.883297,0.652036,4.223849,6.061798,8.921469]]], dtype = "float32")#candidate|4794|(9, 8, 12)|const|float32
bop_4795 = relay.not_equal(var_4793.astype('bool'), relay.reshape(const_4794.astype('bool'), relay.shape_of(var_4793))) # shape=(9, 8, 12)
output = relay.Tuple([bop_4795,])
output2 = relay.Tuple([bop_4795,])
func_4804 = relay.Function([var_4793,], output)
mod['func_4804'] = func_4804
mod = relay.transform.InferType()(mod)
mutated_mod['func_4804'] = func_4804
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4805 = relay.var("var_4805", dtype = "float32", shape = (9, 8, 12))#candidate|4805|(9, 8, 12)|var|float32
func_4804_call = mutated_mod.get_global_var('func_4804')
call_4806 = func_4804_call(var_4805)
output = call_4806
func_4807 = relay.Function([var_4805], output)
mutated_mod['func_4807'] = func_4807
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5400 = relay.const([[[False,False,False,False,False,False,False,False,True,True,False,True,False,True],[True,True,True,True,True,True,True,False,False,False,False,False,True,False],[False,False,False,False,False,False,False,False,False,False,False,True,True,False],[False,True,False,True,False,True,False,True,True,False,True,True,False,False],[True,True,False,True,True,False,True,False,False,True,False,True,True,True],[False,False,True,True,False,True,False,False,True,True,False,False,True,True],[True,True,True,True,False,True,False,True,True,False,True,False,True,False],[True,True,True,True,True,False,False,True,False,True,False,True,False,False],[True,True,True,False,False,True,True,False,False,False,True,False,False,True]],[[False,True,True,True,False,False,False,False,False,True,True,False,False,True],[True,False,True,False,True,True,True,True,False,False,True,False,False,False],[False,False,True,False,False,False,True,False,False,False,False,True,True,False],[True,True,True,True,True,True,True,False,False,False,True,False,True,False],[False,True,False,True,False,False,True,False,False,True,False,True,True,True],[False,False,True,True,True,False,False,False,True,False,False,True,False,True],[True,True,True,False,True,True,True,True,True,False,True,False,True,True],[True,False,False,True,False,True,False,True,False,True,True,True,True,True],[True,True,False,False,True,True,False,False,True,True,True,False,False,False]],[[False,True,True,True,False,False,False,False,True,True,False,True,False,True],[True,True,True,False,False,True,False,True,True,True,True,False,False,False],[False,False,False,True,False,False,False,False,False,True,False,True,False,False],[True,False,False,False,True,True,False,True,False,False,True,True,True,False],[True,False,True,False,False,True,True,False,True,True,False,True,False,True],[True,False,True,False,False,True,False,True,False,False,True,True,False,False],[False,False,False,False,False,True,False,False,True,True,True,False,False,True],[False,True,False,True,True,False,True,False,True,True,True,False,True,False],[True,True,False,True,True,True,True,True,False,True,False,True,False,True]],[[False,True,False,False,False,True,True,True,True,False,True,False,True,True],[False,False,True,True,True,False,True,True,True,False,False,True,False,False],[True,False,True,True,True,False,True,True,True,False,True,False,False,False],[False,True,True,True,True,True,False,False,True,True,True,False,False,False],[True,False,False,False,False,False,True,False,False,False,True,True,False,False],[True,False,True,True,True,False,False,False,True,True,True,False,False,False],[False,False,False,False,False,True,False,True,True,False,True,True,False,False],[False,True,True,True,True,False,False,True,False,True,True,False,False,False],[False,False,True,True,True,True,True,True,False,True,False,True,True,True]],[[False,False,False,False,True,True,True,False,True,False,True,True,True,True],[True,True,True,False,True,False,True,False,False,False,False,False,True,False],[False,True,False,False,True,False,True,False,True,False,False,False,False,False],[True,True,True,True,False,False,True,False,True,False,False,True,False,False],[True,True,True,True,False,True,False,True,True,True,True,False,True,False],[False,False,False,True,True,True,False,False,True,True,False,False,True,False],[True,True,True,True,True,False,False,True,True,False,True,False,True,False],[False,True,False,False,True,False,True,False,True,False,False,True,True,False],[True,True,True,True,False,False,False,True,False,False,True,True,True,False]],[[True,False,False,True,True,True,True,False,True,False,True,True,False,True],[False,False,False,True,True,True,False,True,True,False,True,True,True,False],[False,False,False,True,False,False,False,False,True,True,False,True,True,True],[False,False,True,False,False,True,True,True,False,False,False,True,False,True],[False,True,True,False,True,True,True,False,False,True,False,True,False,False],[False,True,False,False,True,True,False,True,False,False,False,False,False,True],[True,False,False,True,False,False,True,True,True,False,True,True,True,True],[True,True,False,True,False,False,False,False,True,False,True,True,False,False],[True,False,True,False,True,True,True,True,True,False,False,True,False,False]],[[False,True,True,True,False,True,True,False,True,True,False,False,True,False],[True,False,False,False,False,True,False,True,False,True,False,False,True,True],[True,True,True,True,False,False,True,False,False,False,True,True,True,True],[False,False,True,True,False,True,False,True,False,False,False,True,False,True],[True,True,False,False,True,True,True,True,True,False,False,True,False,True],[True,True,False,True,False,False,False,False,True,False,True,False,True,False],[True,True,True,False,False,True,False,True,False,True,True,True,False,True],[True,False,False,False,False,False,True,False,False,True,False,False,False,False],[False,True,False,True,False,True,True,False,False,True,False,False,False,True]],[[True,False,False,False,True,False,False,True,False,True,True,True,True,True],[True,True,True,True,False,True,False,False,False,True,False,False,False,False],[False,False,True,False,True,True,False,False,True,True,True,False,False,False],[True,True,True,False,False,True,True,False,False,True,False,True,False,True],[True,False,True,False,False,True,False,True,False,False,True,False,True,False],[False,False,False,True,True,False,True,False,True,False,False,True,True,True],[False,True,False,False,True,True,False,True,False,False,True,True,False,False],[True,False,True,True,False,True,False,True,True,True,True,False,True,False],[False,False,True,False,True,True,False,False,False,False,True,True,False,False]],[[False,True,True,True,True,False,False,True,True,False,False,True,True,False],[True,False,False,True,False,True,False,True,False,False,True,False,True,False],[True,True,True,True,False,False,False,True,False,False,False,True,False,True],[False,True,True,False,True,True,True,True,False,True,False,False,False,True],[False,True,False,False,False,True,True,True,True,False,False,True,False,True],[False,True,False,True,False,True,True,False,False,False,True,False,False,False],[False,False,True,False,True,True,False,True,False,False,False,True,False,True],[False,False,False,True,True,False,False,False,True,True,False,True,True,True],[True,True,True,True,True,True,True,False,False,False,False,True,False,False]],[[False,False,True,True,False,True,False,False,True,False,False,False,True,False],[True,False,True,False,False,True,True,True,False,True,False,False,True,False],[True,True,False,False,True,False,True,True,True,True,True,True,True,True],[True,False,True,True,False,True,True,False,False,True,False,False,False,False],[False,True,False,False,False,False,False,True,False,True,False,False,False,False],[True,True,True,False,True,True,True,True,False,True,False,False,False,False],[False,False,False,False,True,False,False,True,False,False,False,True,True,False],[True,True,False,False,False,False,False,True,True,False,True,True,True,True],[True,True,True,True,True,True,True,False,True,False,True,True,False,True]],[[False,False,True,True,True,False,True,False,False,False,True,True,False,False],[False,True,True,True,False,False,False,True,True,True,True,False,True,False],[False,False,True,False,False,False,False,True,False,True,True,False,True,True],[True,True,True,True,False,True,False,False,True,False,True,True,False,False],[True,True,False,True,True,True,False,True,False,False,True,False,True,False],[True,True,True,False,False,True,False,True,False,False,True,True,True,True],[False,True,True,False,False,False,True,False,True,True,True,True,True,False],[False,True,True,True,False,False,True,False,True,True,True,True,False,True],[True,True,False,True,False,True,True,False,True,True,False,True,False,False]],[[False,False,False,False,True,True,True,True,False,True,True,True,False,True],[True,False,False,False,True,False,True,True,True,True,False,True,False,False],[False,False,False,False,False,True,True,True,False,False,False,False,True,False],[False,False,True,True,False,True,True,False,True,False,True,False,True,True],[True,True,False,True,False,False,False,False,True,True,False,False,True,False],[False,True,False,False,True,True,True,True,False,False,True,True,True,True],[False,False,False,True,False,False,True,False,True,True,False,False,False,False],[False,True,True,True,False,True,True,True,True,True,True,True,True,False],[True,False,True,True,True,False,False,True,False,True,True,True,False,True]],[[False,False,False,False,False,True,True,False,False,True,False,True,False,True],[True,True,True,False,False,True,True,True,True,True,False,True,True,True],[True,True,False,True,False,False,True,False,True,True,False,False,False,False],[True,False,True,False,True,True,False,True,False,True,False,True,True,False],[False,False,True,True,True,False,False,True,False,False,True,False,True,False],[False,True,False,True,True,False,False,False,True,False,False,True,False,False],[False,True,True,False,True,False,False,False,False,False,False,True,False,True],[True,True,True,True,False,False,False,True,False,False,False,True,True,False],[False,True,False,False,False,True,False,True,False,False,True,False,True,True]],[[True,True,True,False,True,False,True,True,False,False,True,False,False,True],[True,True,True,True,False,True,True,False,True,False,True,True,False,True],[True,True,False,True,True,True,True,False,False,True,True,False,True,False],[True,True,True,False,True,False,False,True,False,True,False,True,True,True],[False,False,False,True,True,True,False,False,False,False,False,False,True,False],[True,False,False,False,True,False,False,False,False,False,False,False,False,False],[True,True,True,True,True,False,True,True,True,True,True,True,True,False],[False,False,False,True,False,False,True,False,False,True,False,True,False,False],[True,False,False,True,True,False,False,True,False,True,False,True,True,True]]], dtype = "bool")#candidate|5400|(14, 9, 14)|const|bool
const_5401 = relay.const([[[False,True,False,True,True,True,True,False,False,True,False,False,False,True],[False,False,True,False,True,False,True,True,False,False,True,False,False,False],[True,False,False,True,True,True,False,True,False,False,True,True,True,True],[True,True,True,True,False,False,True,True,False,False,False,False,True,True],[False,True,True,True,True,True,True,True,False,True,False,True,True,True],[False,True,False,True,False,True,False,False,True,True,True,True,True,True],[False,False,False,False,False,True,False,True,True,True,False,True,False,False],[False,False,True,False,True,False,True,True,True,True,False,True,False,True],[False,False,True,False,False,True,True,False,True,True,False,False,False,False]],[[True,False,True,False,False,False,False,True,False,False,True,False,True,True],[True,False,False,True,False,True,False,False,True,True,True,False,False,True],[False,False,True,True,False,False,True,True,True,False,False,True,False,True],[True,True,False,False,True,True,False,True,False,False,False,True,True,True],[True,True,False,True,True,True,True,True,False,False,False,True,False,True],[False,False,False,False,False,True,False,True,False,False,True,False,False,True],[False,True,False,True,False,False,True,True,True,False,True,True,False,True],[False,True,False,True,True,True,True,True,False,True,True,False,False,False],[False,False,True,False,False,True,False,False,True,True,False,False,True,True]],[[False,True,False,False,False,True,True,False,False,False,True,False,False,False],[False,False,False,False,False,True,True,False,False,True,True,True,False,True],[False,True,False,False,False,False,False,True,True,False,True,True,False,False],[True,False,True,True,False,True,False,True,True,True,True,True,False,False],[True,False,True,True,True,True,True,True,False,True,False,True,True,True],[True,False,False,False,False,True,False,True,False,False,False,True,True,True],[True,True,False,False,True,True,True,False,True,False,True,True,True,False],[False,True,True,True,True,True,False,True,False,False,False,True,False,False],[False,True,False,True,False,False,True,True,True,False,True,False,False,False]],[[True,False,False,False,True,False,True,False,True,True,True,False,True,False],[True,True,False,True,False,False,True,False,False,False,True,False,True,False],[False,True,True,False,True,True,False,False,True,True,False,True,True,False],[True,False,False,False,False,False,True,False,True,False,True,True,True,False],[True,False,True,False,True,False,False,True,True,False,True,True,True,False],[False,False,False,True,True,False,True,True,False,False,True,True,True,False],[True,False,True,False,False,False,False,True,False,False,False,True,False,False],[False,False,False,False,False,False,True,True,False,False,False,False,True,False],[False,False,False,True,False,True,True,False,True,False,True,True,False,False]],[[True,True,False,True,True,False,False,True,False,True,True,False,False,True],[False,True,True,False,True,False,True,True,True,True,True,True,True,False],[False,True,False,True,False,False,True,True,False,True,True,False,False,False],[False,False,True,True,True,True,True,False,True,True,True,False,False,False],[True,True,True,False,False,True,True,True,False,False,False,False,True,True],[True,False,True,True,False,True,False,False,False,False,False,True,True,False],[True,True,False,True,False,True,True,False,True,False,True,True,True,False],[True,False,True,False,False,True,False,True,False,False,True,False,False,True],[True,True,True,False,False,False,True,False,True,False,True,False,True,False]],[[True,False,False,True,False,False,True,True,True,True,False,True,False,True],[True,False,False,False,False,False,False,False,False,False,True,True,False,False],[False,True,False,True,True,True,False,False,True,False,True,False,True,True],[True,True,False,False,False,False,False,False,False,False,False,False,False,True],[False,True,True,False,False,False,True,False,True,False,False,False,False,True],[False,True,False,True,True,False,True,True,False,True,True,True,True,True],[True,False,True,True,True,False,True,True,False,True,True,True,True,True],[True,True,False,True,False,False,False,True,False,True,False,True,False,True],[False,False,True,True,False,False,True,True,False,False,False,True,True,False]],[[False,False,True,False,True,False,True,False,False,False,True,True,True,False],[False,False,True,False,False,False,True,False,False,False,True,True,True,True],[False,False,True,False,True,True,False,False,True,False,False,True,False,False],[False,True,False,False,True,True,False,True,False,False,True,False,False,False],[True,True,False,True,False,True,False,True,False,False,True,True,False,False],[True,False,False,True,False,False,False,True,True,False,True,True,False,False],[False,True,True,True,False,True,True,False,False,True,True,True,True,True],[False,False,True,True,False,True,True,False,True,True,False,False,True,True],[False,False,True,False,True,False,True,True,True,False,False,False,True,True]],[[True,True,False,True,True,True,True,True,False,False,False,True,True,False],[False,False,True,False,False,False,False,True,True,True,True,False,False,True],[False,True,False,True,False,True,True,True,False,False,True,True,False,True],[False,True,True,False,True,False,False,False,False,False,True,True,False,False],[False,False,True,False,True,False,False,False,True,True,True,True,True,False],[False,True,True,True,False,False,True,True,False,False,True,True,False,True],[False,False,True,False,False,True,True,False,True,True,False,False,False,True],[True,True,False,False,False,True,True,False,False,False,True,False,False,True],[True,True,False,False,True,True,False,False,False,True,False,True,False,False]],[[True,False,True,True,True,True,True,True,True,False,True,True,False,True],[True,True,False,True,False,False,True,True,True,True,True,False,True,True],[True,True,True,True,False,True,False,True,False,True,True,True,True,False],[False,True,True,False,False,True,True,False,True,False,False,True,True,True],[True,False,True,False,False,False,True,False,True,True,True,False,False,False],[True,True,True,False,True,False,False,True,False,True,False,True,True,False],[False,False,True,True,True,False,False,True,True,True,True,False,True,False],[False,True,True,False,True,False,False,False,False,False,True,False,True,True],[False,False,True,False,False,True,False,True,True,False,False,False,True,True]],[[True,False,False,True,False,True,True,True,True,True,True,True,True,False],[False,False,False,False,False,True,False,True,False,False,False,False,False,True],[False,False,False,True,False,False,True,False,True,False,True,False,False,False],[False,True,True,False,False,True,False,False,False,False,True,True,True,False],[True,True,True,True,True,True,True,False,False,False,False,True,False,False],[False,False,False,False,False,True,False,False,False,False,False,True,False,False],[False,True,False,True,True,True,False,False,False,True,False,False,True,True],[False,False,True,False,False,True,False,False,True,False,False,True,False,True],[False,False,True,False,False,True,True,True,False,False,True,False,True,False]],[[True,True,True,True,True,False,True,True,True,True,False,False,True,False],[False,True,True,False,True,False,True,True,True,False,False,True,False,False],[False,False,False,True,True,True,False,False,True,True,True,False,False,True],[True,True,False,True,False,True,True,True,False,False,True,True,True,True],[True,True,True,True,True,True,False,False,False,False,False,True,True,False],[False,True,True,True,False,True,False,False,True,True,True,True,False,False],[False,True,False,True,False,True,False,False,True,False,False,True,False,True],[True,True,True,True,False,False,False,False,False,False,False,True,True,False],[False,True,False,False,False,False,False,True,False,False,True,True,True,True]],[[False,True,False,True,True,True,False,True,False,False,False,False,False,False],[True,False,False,True,True,True,True,False,True,True,True,True,False,False],[False,True,True,True,False,False,False,True,True,True,True,True,True,True],[True,False,True,False,False,False,True,True,True,True,True,False,False,False],[False,False,False,False,True,False,True,False,False,False,True,True,True,False],[True,False,True,False,False,True,True,False,True,False,False,False,True,True],[False,False,False,False,False,False,True,False,False,False,False,False,False,True],[False,True,False,True,False,True,True,False,False,False,True,True,True,True],[True,False,False,False,False,False,False,True,True,True,True,True,False,True]],[[False,False,False,False,False,False,True,False,False,False,False,False,True,True],[False,False,False,True,False,True,True,True,True,False,False,False,True,True],[False,True,False,False,False,False,False,False,True,True,False,True,True,False],[True,False,False,True,False,False,True,True,True,False,False,True,False,False],[True,False,True,True,True,True,True,True,True,True,True,False,False,True],[True,False,False,True,False,False,False,True,False,True,False,False,False,False],[True,False,False,False,False,True,False,False,False,True,True,True,True,True],[False,True,False,True,True,False,False,False,False,True,True,True,False,True],[True,False,True,False,True,True,False,True,False,False,True,False,False,True]],[[True,True,False,True,False,False,True,False,True,True,False,True,False,True],[False,True,False,True,True,True,True,False,False,False,False,False,False,True],[False,False,False,True,True,False,True,False,True,False,False,False,True,False],[True,False,True,False,True,True,True,False,False,True,True,False,True,True],[False,True,False,False,False,True,True,True,True,False,True,False,False,True],[False,False,True,False,False,False,False,True,True,True,True,True,False,False],[True,True,True,True,True,False,True,True,True,True,False,False,True,False],[True,False,True,True,False,True,True,False,True,True,True,True,True,False],[False,True,True,False,True,False,True,False,False,True,True,True,False,True]]], dtype = "bool")#candidate|5401|(14, 9, 14)|const|bool
bop_5402 = relay.logical_or(const_5400.astype('bool'), relay.reshape(const_5401.astype('bool'), relay.shape_of(const_5400))) # shape=(14, 9, 14)
output = bop_5402
output2 = bop_5402
func_5415 = relay.Function([], output)
mod['func_5415'] = func_5415
mod = relay.transform.InferType()(mod)
output = func_5415()
func_5416 = relay.Function([], output)
mutated_mod['func_5416'] = func_5416
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5415_call = mod.get_global_var('func_5415')
func_5416_call = mutated_mod.get_global_var('func_5416')
call_5440 = func_5415_call()
call_5441 = func_5415_call()
uop_5452 = relay.exp(call_5440.astype('float32')) # shape=(14, 9, 14)
uop_5454 = relay.exp(call_5441.astype('float32')) # shape=(14, 9, 14)
func_856_call = mod.get_global_var('func_856')
func_860_call = mutated_mod.get_global_var('func_860')
var_5471 = relay.var("var_5471", dtype = "float64", shape = (1, 40))#candidate|5471|(1, 40)|var|float64
var_5472 = relay.var("var_5472", dtype = "int32", shape = ())#candidate|5472|()|var|int32
var_5473 = relay.var("var_5473", dtype = "int32", shape = (13,))#candidate|5473|(13,)|var|int32
call_5470 = relay.TupleGetItem(func_856_call(relay.reshape(var_5471.astype('float64'), [1, 8, 5]), relay.reshape(var_5472.astype('int32'), []), relay.reshape(var_5473.astype('int32'), [13,]), ), 3)
call_5474 = relay.TupleGetItem(func_860_call(relay.reshape(var_5471.astype('float64'), [1, 8, 5]), relay.reshape(var_5472.astype('int32'), []), relay.reshape(var_5473.astype('int32'), [13,]), ), 3)
var_5476 = relay.var("var_5476", dtype = "float32", shape = (14, 9, 14))#candidate|5476|(14, 9, 14)|var|float32
bop_5477 = relay.bitwise_xor(uop_5452.astype('int32'), relay.reshape(var_5476.astype('int32'), relay.shape_of(uop_5452))) # shape=(14, 9, 14)
bop_5480 = relay.bitwise_xor(uop_5454.astype('int32'), relay.reshape(var_5476.astype('int32'), relay.shape_of(uop_5454))) # shape=(14, 9, 14)
uop_5481 = relay.atanh(uop_5452.astype('float64')) # shape=(14, 9, 14)
uop_5483 = relay.atanh(uop_5454.astype('float64')) # shape=(14, 9, 14)
func_5415_call = mod.get_global_var('func_5415')
func_5416_call = mutated_mod.get_global_var('func_5416')
call_5487 = func_5415_call()
call_5488 = func_5415_call()
output = relay.Tuple([call_5470,var_5471,var_5472,var_5473,bop_5477,uop_5481,call_5487,])
output2 = relay.Tuple([call_5474,var_5471,var_5472,var_5473,bop_5480,uop_5483,call_5488,])
func_5490 = relay.Function([var_5471,var_5472,var_5473,var_5476,], output)
mod['func_5490'] = func_5490
mod = relay.transform.InferType()(mod)
var_5491 = relay.var("var_5491", dtype = "float64", shape = (1, 40))#candidate|5491|(1, 40)|var|float64
var_5492 = relay.var("var_5492", dtype = "int32", shape = ())#candidate|5492|()|var|int32
var_5493 = relay.var("var_5493", dtype = "int32", shape = (13,))#candidate|5493|(13,)|var|int32
var_5494 = relay.var("var_5494", dtype = "float32", shape = (14, 9, 14))#candidate|5494|(14, 9, 14)|var|float32
output = func_5490(var_5491,var_5492,var_5493,var_5494,)
func_5495 = relay.Function([var_5491,var_5492,var_5493,var_5494,], output)
mutated_mod['func_5495'] = func_5495
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5415_call = mod.get_global_var('func_5415')
func_5416_call = mutated_mod.get_global_var('func_5416')
call_5503 = func_5415_call()
call_5504 = func_5415_call()
func_1735_call = mod.get_global_var('func_1735')
func_1740_call = mutated_mod.get_global_var('func_1740')
const_5506 = relay.const(6.674745, dtype = "float32")#candidate|5506|()|const|float32
var_5507 = relay.var("var_5507", dtype = "float32", shape = (33,))#candidate|5507|(33,)|var|float32
const_5508 = relay.const([6.071883,-9.268598,-0.396471,-7.144584,-3.785437,-3.154985,4.216127,9.880285,-1.108207,5.329795,-3.681171,7.232350,9.860231,4.162679,-5.211914,6.338956,-4.422424,0.207067,-9.865237,-8.663091,6.561087,-6.338535,3.256720,9.563708,-2.900417,-3.000892,7.186015,-4.930651,-6.444363,2.519236,-9.760978,-1.738231,-3.298664,-9.815226,-7.284579,5.519331,4.473347,-0.114615,1.267775,-1.789537], dtype = "float64")#candidate|5508|(40,)|const|float64
var_5509 = relay.var("var_5509", dtype = "int32", shape = (13, 1))#candidate|5509|(13, 1)|var|int32
call_5505 = relay.TupleGetItem(func_1735_call(relay.reshape(const_5506.astype('float32'), []), relay.reshape(var_5507.astype('float32'), [11, 3, 1]), relay.reshape(const_5508.astype('float64'), [40,]), relay.reshape(var_5509.astype('int32'), [13,]), ), 0)
call_5510 = relay.TupleGetItem(func_1740_call(relay.reshape(const_5506.astype('float32'), []), relay.reshape(var_5507.astype('float32'), [11, 3, 1]), relay.reshape(const_5508.astype('float64'), [40,]), relay.reshape(var_5509.astype('int32'), [13,]), ), 0)
output = relay.Tuple([call_5503,call_5505,const_5506,var_5507,const_5508,var_5509,])
output2 = relay.Tuple([call_5504,call_5510,const_5506,var_5507,const_5508,var_5509,])
func_5512 = relay.Function([var_5507,var_5509,], output)
mod['func_5512'] = func_5512
mod = relay.transform.InferType()(mod)
var_5513 = relay.var("var_5513", dtype = "float32", shape = (33,))#candidate|5513|(33,)|var|float32
var_5514 = relay.var("var_5514", dtype = "int32", shape = (13, 1))#candidate|5514|(13, 1)|var|int32
output = func_5512(var_5513,var_5514,)
func_5515 = relay.Function([var_5513,var_5514,], output)
mutated_mod['func_5515'] = func_5515
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5415_call = mod.get_global_var('func_5415')
func_5416_call = mutated_mod.get_global_var('func_5416')
call_5581 = func_5415_call()
call_5582 = func_5415_call()
output = relay.Tuple([call_5581,])
output2 = relay.Tuple([call_5582,])
func_5593 = relay.Function([], output)
mod['func_5593'] = func_5593
mod = relay.transform.InferType()(mod)
output = func_5593()
func_5594 = relay.Function([], output)
mutated_mod['func_5594'] = func_5594
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5415_call = mod.get_global_var('func_5415')
func_5416_call = mutated_mod.get_global_var('func_5416')
call_5681 = func_5415_call()
call_5682 = func_5415_call()
output = call_5681
output2 = call_5682
func_5689 = relay.Function([], output)
mod['func_5689'] = func_5689
mod = relay.transform.InferType()(mod)
mutated_mod['func_5689'] = func_5689
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5689_call = mutated_mod.get_global_var('func_5689')
call_5690 = func_5689_call()
output = call_5690
func_5691 = relay.Function([], output)
mutated_mod['func_5691'] = func_5691
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5593_call = mod.get_global_var('func_5593')
func_5594_call = mutated_mod.get_global_var('func_5594')
call_5695 = relay.TupleGetItem(func_5593_call(), 0)
call_5696 = relay.TupleGetItem(func_5594_call(), 0)
const_5699 = relay.const([[[False,False,False,False,True,False,False,False,True,True,True,True,True,True],[True,True,True,True,False,True,False,False,True,False,True,True,False,True],[False,False,True,False,False,True,False,True,False,True,True,True,False,False],[False,True,False,True,False,True,True,False,False,True,True,True,True,False],[True,False,True,True,False,False,True,False,False,False,True,False,True,False],[True,True,False,True,True,False,False,True,True,True,False,True,True,True],[True,False,True,False,False,True,True,False,True,False,False,True,False,True],[True,True,True,False,True,False,True,False,False,False,True,False,True,True],[True,False,False,False,True,False,False,True,True,True,False,False,False,False]],[[False,False,False,True,False,True,False,True,True,True,True,False,True,False],[False,True,False,True,True,False,False,False,False,False,False,True,False,False],[False,False,False,False,False,False,True,False,False,True,True,True,True,False],[True,False,True,True,True,True,True,True,True,True,True,False,True,True],[True,True,True,True,True,False,True,False,False,True,False,False,False,False],[False,True,False,True,False,True,True,True,False,False,False,False,True,False],[False,False,True,True,False,True,True,True,True,False,True,True,True,False],[False,False,False,False,True,False,True,True,False,False,True,False,False,True],[False,True,True,False,False,True,False,False,False,True,True,True,True,True]],[[False,True,True,False,True,True,False,False,True,False,False,True,False,True],[False,True,False,False,False,False,True,False,True,True,False,True,False,False],[False,True,True,False,False,False,True,True,True,True,False,False,True,False],[False,False,True,False,True,True,False,True,True,True,False,False,False,False],[True,False,False,True,False,True,False,False,True,True,False,False,False,False],[True,False,False,True,False,True,True,True,False,True,False,False,True,False],[False,True,True,False,False,True,True,False,True,True,False,False,False,False],[True,True,False,False,True,False,True,True,True,False,False,False,True,False],[False,False,True,False,False,False,False,False,True,False,False,False,True,False]],[[True,False,True,False,True,True,False,False,False,True,True,True,True,True],[True,False,True,True,True,False,False,True,False,False,True,False,False,True],[False,False,True,True,False,False,True,True,False,True,True,False,False,False],[True,True,True,True,False,False,False,True,True,False,False,True,True,True],[True,True,False,False,True,True,True,True,False,True,False,False,False,True],[False,True,True,True,False,False,False,False,True,True,True,False,True,True],[True,False,False,True,False,False,True,True,False,False,True,False,True,True],[False,False,True,False,True,False,True,True,True,False,False,False,True,True],[False,False,True,True,True,True,False,True,False,True,False,False,False,True]],[[False,True,True,False,True,False,False,False,False,True,False,True,True,False],[True,False,True,True,True,False,True,False,False,True,True,False,True,True],[False,True,True,False,False,False,False,False,False,False,False,False,True,False],[False,True,False,True,True,False,True,False,False,False,False,False,True,True],[False,False,True,False,True,False,False,False,False,False,False,False,False,False],[False,False,True,False,True,True,False,False,True,True,True,False,True,True],[False,False,True,True,True,False,True,False,False,False,False,False,False,False],[False,True,True,False,True,False,True,False,True,True,False,True,False,True],[True,True,True,True,True,False,False,False,False,False,True,False,False,True]],[[False,False,False,False,True,True,False,False,True,True,False,False,False,True],[True,False,False,False,True,True,False,True,True,False,True,True,False,False],[True,False,False,True,True,False,True,False,True,False,True,False,True,True],[False,False,False,False,False,True,False,False,False,False,True,False,True,False],[True,True,True,True,False,True,False,True,True,False,True,False,False,False],[False,True,False,False,True,False,False,False,True,True,False,False,True,True],[False,False,True,True,False,False,False,False,True,True,True,False,True,False],[False,True,True,False,False,True,True,False,True,True,False,True,False,False],[True,False,True,True,False,False,False,False,True,True,False,False,False,True]],[[True,True,False,True,False,True,False,False,False,True,False,True,False,False],[False,True,False,True,True,True,False,True,False,True,False,True,False,False],[True,False,False,False,True,False,False,True,True,False,True,True,True,False],[False,True,False,True,False,True,False,True,False,True,True,False,False,True],[True,False,True,True,False,True,True,True,True,True,False,False,True,True],[True,False,True,False,False,False,True,False,True,True,False,True,False,True],[False,False,False,True,False,True,False,False,True,False,True,False,True,True],[True,True,True,False,True,False,False,True,False,True,False,True,True,False],[True,True,True,True,False,True,False,False,False,True,True,True,True,False]],[[False,False,False,True,True,True,True,True,True,False,False,False,True,False],[True,False,False,False,False,True,True,False,False,False,False,True,True,True],[False,False,False,False,False,False,True,False,True,True,True,False,True,True],[False,False,False,False,True,False,False,True,False,False,True,False,False,True],[True,True,True,False,True,True,False,True,True,False,True,False,True,False],[False,False,False,True,False,False,True,True,False,True,False,False,True,True],[True,True,True,False,False,False,False,True,True,True,True,False,True,False],[False,False,True,False,False,True,True,False,True,False,False,True,False,False],[False,True,False,True,True,True,True,True,True,False,True,False,True,False]],[[False,False,False,False,False,True,False,False,False,False,False,True,False,False],[True,False,True,True,False,True,False,True,False,True,False,True,True,True],[True,False,True,True,False,False,True,False,True,True,False,False,True,True],[True,False,True,False,False,False,True,False,True,True,True,True,True,False],[False,False,True,True,True,True,False,True,True,True,False,False,True,False],[False,False,True,False,False,True,False,True,True,False,True,True,True,True],[False,False,True,True,True,False,False,False,True,True,True,False,False,True],[True,True,False,True,False,True,True,False,False,False,True,False,False,True],[True,True,False,True,False,True,False,True,True,True,True,True,False,False]],[[True,False,False,False,False,False,False,False,True,True,False,False,True,False],[False,True,True,True,True,True,False,True,False,True,False,True,False,True],[False,False,True,False,False,True,False,False,True,False,False,True,False,True],[True,True,True,True,True,False,False,False,True,False,True,True,True,True],[False,True,False,True,True,True,True,False,True,True,False,False,False,True],[True,False,False,False,True,True,True,False,True,True,False,False,False,True],[True,True,False,True,True,False,False,False,False,True,False,True,True,True],[True,True,False,True,True,False,True,False,True,True,True,False,False,True],[False,False,True,True,False,True,False,True,False,True,True,False,False,False]],[[True,True,True,False,False,True,True,True,True,True,False,False,False,True],[False,False,False,False,True,True,True,True,True,True,False,True,False,True],[True,True,True,False,False,False,False,True,True,False,False,False,True,False],[False,True,True,False,True,False,False,False,True,True,True,False,True,True],[True,True,True,False,False,False,False,True,True,True,False,False,True,False],[True,False,True,True,True,False,False,False,False,False,True,False,False,False],[False,True,False,False,False,True,False,True,True,True,False,False,False,False],[True,True,False,False,True,True,True,False,False,True,False,False,False,True],[False,False,False,True,True,False,True,True,True,True,False,False,False,False]],[[True,False,False,False,True,True,False,False,False,True,False,False,True,True],[True,True,False,True,True,False,False,False,False,True,True,True,True,False],[False,True,False,True,False,True,True,True,False,True,False,False,False,False],[True,True,True,False,False,False,True,True,False,False,True,True,True,True],[False,False,True,False,False,True,True,False,False,False,True,False,True,True],[True,False,False,False,True,True,False,False,True,True,True,False,True,True],[True,True,False,True,True,True,False,True,False,True,True,True,False,True],[True,True,False,False,True,False,False,True,False,False,True,True,False,False],[True,True,True,False,False,True,False,False,False,False,True,True,True,True]],[[False,True,False,True,True,False,False,False,True,False,True,True,True,False],[False,True,True,False,False,False,False,True,False,False,True,False,False,False],[True,False,True,True,True,True,True,False,False,True,True,True,True,False],[False,False,True,False,True,False,False,False,False,True,True,False,True,False],[True,False,False,False,False,False,False,True,True,True,False,True,False,True],[False,True,True,False,False,False,True,True,False,True,True,True,False,False],[True,False,False,False,False,True,True,False,True,True,True,False,False,True],[False,False,False,False,True,False,True,True,False,False,True,True,True,False],[False,False,True,True,False,True,False,False,False,True,False,True,False,True]],[[False,False,True,False,False,True,False,True,True,True,True,False,True,False],[True,True,False,True,True,True,False,True,True,False,True,True,True,True],[True,True,False,True,True,True,True,True,True,True,True,False,True,False],[False,False,False,True,True,False,False,False,False,True,True,True,True,False],[False,True,True,True,False,False,False,False,True,True,True,False,True,False],[True,False,False,True,False,False,True,False,True,True,False,True,False,False],[False,False,False,False,True,False,False,True,False,False,True,True,False,True],[False,True,True,True,True,False,False,True,False,True,True,True,True,False],[False,True,False,False,True,False,True,False,False,True,False,False,True,True]]], dtype = "bool")#candidate|5699|(14, 9, 14)|const|bool
bop_5700 = relay.power(call_5695.astype('float64'), relay.reshape(const_5699.astype('float64'), relay.shape_of(call_5695))) # shape=(14, 9, 14)
bop_5703 = relay.power(call_5696.astype('float64'), relay.reshape(const_5699.astype('float64'), relay.shape_of(call_5696))) # shape=(14, 9, 14)
func_3294_call = mod.get_global_var('func_3294')
func_3297_call = mutated_mod.get_global_var('func_3297')
const_5715 = relay.const([3.655760,-7.041876,-0.718076,-3.780512,-5.381140,5.864640,-0.134293,-5.353344,-8.502328,4.058399,-8.905593,-8.707466,-7.633993,-1.971845,-7.740414,-2.952426,2.748430,-9.312946,3.753906,3.622168,1.317357,6.159192,8.335783,6.327068,9.023530,-8.313322,5.011404,-1.051473,7.933406,9.133397,5.009925,9.003338,1.160732,3.052448,7.600780,-8.013017,7.601073,-3.814735,7.911488,-8.036466,-1.558540,-6.354149,4.033479,5.675516,2.803830,7.488982,-2.933610,5.421132,-4.608354,3.409715,7.786198,4.147361,8.835719,9.605959,3.445441,-9.819201,0.188195,7.441477,6.024206,0.625446,7.316367,1.751962,-1.388795,6.979654,3.857965,-1.469647,-2.314796,-6.935664,0.029941,-9.059908,8.799863,-0.798853,9.911072,-5.223056,-9.514866,8.693411,-9.415393,-8.969844,9.244676,4.027612,-2.386204,-1.741363,1.164661,-9.843657,-3.664810,0.045549,9.100090,-0.852337,4.519622,1.903687,6.672318,-4.920171,-0.459215,-9.955426,-3.139520,-4.872485,7.917438,-4.486344,1.330357,3.120043,4.664811,-9.509142,-2.149099,-7.349454,0.305036,5.474799,-6.235169,-9.198296,-6.543209,6.702271,-3.656176,3.586840,-9.626877,4.311652,7.645554,8.290055,9.497463,1.670722,5.196297,-6.025709,-9.256950,8.025188,6.491045,4.571427,-3.498660,-8.596899,-2.346963,-9.731371,2.212817,5.872442,-6.864446,-6.152038,-7.413045,6.900560,0.740982,-9.162705,1.522306,-6.214827,3.881520,0.533503,-4.072336,-0.442366,7.155079,0.853285,-6.885206,6.237600,-6.729741,1.831062,-3.102760,-5.392404,-8.346222,0.865663,-4.775361,-9.582967,2.326078,4.044093,2.274320,-9.175716,-3.608381,-0.078505,-4.065640,2.696961,8.322119,1.346415,0.704987,7.668060,-1.279223,5.266939,-4.085992,-4.574812,7.392846,-8.625814,-6.036555,-0.372252,-3.143454,0.239166,-4.032349,1.079980,2.837590,9.914041,-3.099094,-8.699813,6.865099,0.456192,3.520442,0.190783,3.115619,-1.283905,5.194116,-1.738934,6.794324,-0.958847,-3.264087,0.830758,0.442895,-2.070089,4.814410,-3.005331,0.511727,-2.994950,-2.444611,8.476758,6.359727,1.891941,-6.308882,7.779606,9.740944,-6.827851,1.826595,-6.690074,-4.724740,9.776600,0.394166,3.236437,8.496003,-7.522521,2.104763,-6.567470,8.903714,6.798377,3.677215,9.134218,6.036286,7.776665,8.643034,5.770137,-0.032523,1.183819,-8.408677,-0.500596,-8.063481,0.485943,6.055933,1.034732,5.364772,-7.234875,2.871237,-4.004082,0.938412,6.733758,2.791202,5.496821,4.005195,6.968206,3.636968,-8.173816,-7.119619,9.894788,5.458392,-7.760244,-6.978899,4.682240,-3.577558,-8.895606,7.707016,-0.673186,-0.373344,9.943240,-0.172893,3.727729,-8.556885,-9.302820,-2.338416,-3.929795,-6.012733,-1.773827,-2.013183,-8.981736,3.559562,-3.092608,-1.712401,1.526781,-3.284872,3.980354,-6.980974,-6.098506,-7.440272,0.613947,8.162689,-9.314360,9.923224,-2.883736,-3.384938,-9.898757,6.806221,3.049811,-0.062635,-5.044927], dtype = "float32")#candidate|5715|(288,)|const|float32
const_5716 = relay.const([-8,2,10,7,10,-2,-8,4,3,5,8,4,-9,-9,3,10,-3,-9,4,-2,2,7,-6,5,6,3,6,-1,-2,3,-10,-9,5,5,-4,8,-3,-9,5,-8,3,-6,-3,-5,9,8,-3,2,5,-1,-6,-8,-1,10,8,-8,1,2,-3,7,-5,1,4,-5,-3,-1,-3,-10,5,-4,-9,-5,-8,-6,-2,-1,2,4,-7,6,-7,-1,-7,7,-10,-6,-5,1,8,2,-2,8,9,9,-2,6,-3,10,-7,-1,-9,-7,-8,8,8,5,-7,4,-6,9,-10,-7,-3,3,5,-8,3,-1,-8,6,-10,-5,-5,-10,4,8,8,6,-4,3,5,6,-9,-10,7,-4,-6,-2,10,9,-5,7,-2,-5,2,-8,9,8,2,-8,1,-5,-1,-9,1,6,-4,-9,5,-5,-2,-5,-6,1,-10,-6,-1,1,8,-6,7,6,4,-10,-9,-6,-7,-2,-6,2,3,9,8,9,-8,-6,-6,6,8,-9,-2,-8,7,-3,-4,-9,2,-3,7,-6,-5,-2,7,-1,6,9,-4,-7,6,4,-7,-9,2,-9,3,6,2,-9,3,-1,1,-7,9,-5,-5,5,1,-3,5,10,1,-6,-3,9,8,-5,2,-1,7,5,3,6,-5,7,-10,8,2,-2,10,10,-3,-4,-8,-7,-2,-9,-2,9,1,-7,-2,2,-10,10,10,-9,-9,-10,-9,2,-7,8,-3,9,2,6,-5,-1,-7,-7,5,9,-9,8,6,-1,2,-4,-6,-10,-3,6,9,2,-10,-2,-5,8,-2,3,-8,-10,-6,7,9,2,-8,-9,8,2,10,-5,-6,10,9,3,10,10,-10,-7,6,1,8,10,3,3,7,10,-9,1,-6,7,-8,1,6,6,-5,-8,9,6,10,-7,7,2,10,4,-6,1,10,1,-7,-9,-6,-7,5,-8,5,3,5,-8,7,-10,-4,8,-10,-1,-7,-3,-9,7,6,-10,3,2,1,4,1,2,2,1,-10,-2,5,2,-6,8,6,-2,3,8,4,-1,-3,-2,4,8,-6,-3,-6,6,3,5,-4,-10,-2,9,8,3,-5,-8,-8,5,7,-8,-2,-6,-8,6,-7,-7,5,-7,7,6,-6,-3,1,2,-5,-4,3,-3,10,-3,8,-7,7,5,5,10,-6,-10,8,-8,2,-1,9,-8,-3,-5,2,-3,-8,-6,10,6,6,6,8,10,-3,9,-5,2,-9,-9,10,1,-2,3,-3,-9,-5,-7,-8,-6,-6,-4,1,8,-2,-10,-1,-2,-10,-5,4,-3,9,-3,-7,-8,2,-3,-8,3,-10,-4,-6,5,3,-8,-4,-5,1,1,-7,-10,-3,-1,5,-10,-9,-9,-3,10,4,3,10,-4,6,-8,6,-9,2,9,6,-6,8,-9,-8,8,-6,2,9,-7,-1,5,5,-8,7,-4,-9,-7,6,7,-2,7,-6,-6,-3,9,7,3,9,7,-9,9,3,-4,-10,4,7,-4,10,-9,10,-9,1,9,3,8,-10,9,-10,2,-5,-6,10,7,-9,-5,4,7,7,-7,-3,2,1,7,-6,3,-7,-6], dtype = "uint16")#candidate|5716|(594,)|const|uint16
call_5714 = relay.TupleGetItem(func_3294_call(relay.reshape(const_5715.astype('float32'), [9, 2, 16]), relay.reshape(const_5716.astype('uint16'), [594,]), ), 1)
call_5717 = relay.TupleGetItem(func_3297_call(relay.reshape(const_5715.astype('float32'), [9, 2, 16]), relay.reshape(const_5716.astype('uint16'), [594,]), ), 1)
output = relay.Tuple([bop_5700,call_5714,const_5715,const_5716,])
output2 = relay.Tuple([bop_5703,call_5717,const_5715,const_5716,])
func_5722 = relay.Function([], output)
mod['func_5722'] = func_5722
mod = relay.transform.InferType()(mod)
mutated_mod['func_5722'] = func_5722
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5722_call = mutated_mod.get_global_var('func_5722')
call_5723 = func_5722_call()
output = call_5723
func_5724 = relay.Function([], output)
mutated_mod['func_5724'] = func_5724
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5593_call = mod.get_global_var('func_5593')
func_5594_call = mutated_mod.get_global_var('func_5594')
call_5769 = relay.TupleGetItem(func_5593_call(), 0)
call_5770 = relay.TupleGetItem(func_5594_call(), 0)
output = relay.Tuple([call_5769,])
output2 = relay.Tuple([call_5770,])
func_5778 = relay.Function([], output)
mod['func_5778'] = func_5778
mod = relay.transform.InferType()(mod)
output = func_5778()
func_5779 = relay.Function([], output)
mutated_mod['func_5779'] = func_5779
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5593_call = mod.get_global_var('func_5593')
func_5594_call = mutated_mod.get_global_var('func_5594')
call_5815 = relay.TupleGetItem(func_5593_call(), 0)
call_5816 = relay.TupleGetItem(func_5594_call(), 0)
var_5826 = relay.var("var_5826", dtype = "bool", shape = (14, 9, 14))#candidate|5826|(14, 9, 14)|var|bool
bop_5827 = relay.bitwise_or(call_5815.astype('int64'), relay.reshape(var_5826.astype('int64'), relay.shape_of(call_5815))) # shape=(14, 9, 14)
bop_5830 = relay.bitwise_or(call_5816.astype('int64'), relay.reshape(var_5826.astype('int64'), relay.shape_of(call_5816))) # shape=(14, 9, 14)
output = bop_5827
output2 = bop_5830
func_5833 = relay.Function([var_5826,], output)
mod['func_5833'] = func_5833
mod = relay.transform.InferType()(mod)
mutated_mod['func_5833'] = func_5833
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5834 = relay.var("var_5834", dtype = "bool", shape = (14, 9, 14))#candidate|5834|(14, 9, 14)|var|bool
func_5833_call = mutated_mod.get_global_var('func_5833')
call_5835 = func_5833_call(var_5834)
output = call_5835
func_5836 = relay.Function([var_5834], output)
mutated_mod['func_5836'] = func_5836
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5778_call = mod.get_global_var('func_5778')
func_5779_call = mutated_mod.get_global_var('func_5779')
call_5921 = relay.TupleGetItem(func_5778_call(), 0)
call_5922 = relay.TupleGetItem(func_5779_call(), 0)
var_5933 = relay.var("var_5933", dtype = "bool", shape = (14, 9, 14))#candidate|5933|(14, 9, 14)|var|bool
bop_5934 = relay.bitwise_and(call_5921.astype('int64'), relay.reshape(var_5933.astype('int64'), relay.shape_of(call_5921))) # shape=(14, 9, 14)
bop_5937 = relay.bitwise_and(call_5922.astype('int64'), relay.reshape(var_5933.astype('int64'), relay.shape_of(call_5922))) # shape=(14, 9, 14)
func_4804_call = mod.get_global_var('func_4804')
func_4807_call = mutated_mod.get_global_var('func_4807')
const_5950 = relay.const([6.914581,6.013879,-0.507582,3.574680,4.608837,0.590263,6.758699,-4.912748,-5.609581,-7.879201,-6.085993,7.598524,-7.188074,6.877941,-2.855403,7.208090,-5.379075,8.469136,5.895620,3.219343,-7.099416,8.822658,8.991059,4.118418,-0.769731,-8.737547,-4.884371,9.967039,-8.552993,-7.106470,0.732812,0.126777,0.801414,-3.934177,0.767750,7.637526,6.392265,3.674922,-8.022128,-7.245302,-9.675394,6.129215,-8.694250,-8.142117,3.515294,8.060020,-8.897824,-5.305336,1.604282,-8.911668,-5.092060,-6.617958,3.752967,5.629267,-8.212301,-1.228072,-9.054620,2.111877,-9.190980,-7.815927,-7.666788,-0.697849,-8.473453,-1.134662,6.870792,-9.511456,4.879264,0.618954,1.090179,-0.128142,-1.275004,-9.751554,7.048663,6.601635,0.350669,8.693906,3.940060,-4.465343,7.583203,6.649972,-1.641981,-0.555881,-1.899312,-3.184657,-6.373242,4.436399,3.266067,-6.434407,3.307485,-8.409424,7.409635,2.848083,1.870801,-3.009760,-2.397015,5.858442,4.877087,-7.740192,-7.543125,0.615580,-9.540751,2.212183,5.293914,-4.517396,-5.240378,8.474752,-4.530141,-4.999593,3.717936,-7.343489,2.474751,-2.200899,-6.492413,-8.294637,2.303813,3.426417,5.333966,0.826320,-4.747478,0.264513,-2.793979,-2.489259,9.906514,-2.003513,0.475151,7.554041,-0.685200,-4.007215,-1.580049,1.281577,-0.131601,2.797805,-2.765977,-9.278150,-5.957264,2.525165,9.454519,-7.702814,-7.125530,2.504401,8.402565,-6.634489,-9.404616,-2.519397,-5.561460,-6.152729,6.438396,-5.057345,-9.062922,-1.848557,-7.895996,3.734452,-3.471497,2.791390,-1.701444,-4.262205,0.379267,5.273798,1.671169,-3.818999,-0.215976,8.547740,2.841084,2.545891,-9.952515,-7.252875,1.288804,-1.774825,7.732218,-7.478181,-5.689927,-4.336983,-3.439869,6.827750,5.345242,2.250115,-9.916918,5.348256,-4.095169,9.693064,2.904964,0.698550,6.937780,-2.438673,8.822111,-2.595340,0.097453,8.097227,8.251252,-1.714497,6.996000,-9.956580,-9.184287,6.431728,-0.414355,9.500331,-6.213350,-7.968293,2.513561,7.238909,8.255174,-6.450397,-3.863194,-2.866747,7.931040,-2.271682,-6.915879,-0.831340,3.987933,9.756846,8.268627,2.900271,-5.983907,8.346444,-6.494400,-7.186961,1.823897,-5.465905,8.609337,6.329447,7.804354,3.553770,-2.688436,-5.857771,5.279602,4.643435,2.896638,-1.376965,-9.808373,0.801707,-2.243310,-9.956125,-3.751811,2.106147,-8.928988,-9.856897,6.259169,8.441238,-4.041575,2.048590,-4.695791,-2.999800,9.555995,4.239116,-8.291858,-5.398190,-4.333309,-5.321222,0.177892,-7.430337,-7.298545,-4.337810,-4.488625,5.260444,4.220916,-8.571073,0.035731,6.353181,-3.216563,-0.080616,8.065111,2.195925,-4.783531,0.713978,-2.692840,7.600589,-3.194305,-2.388833,1.896630,0.071675,-4.817434,-3.500568,-3.109036,-9.034940,-1.340144,-4.800860,9.143145,-6.037034,1.497698,6.097820,5.477370,6.797099,-3.159685,5.709815,5.296518,5.648565,-6.907589,-8.713495,3.503382,2.526177,8.712174,-6.403059,-4.290924,-4.090871,-8.695833,9.064789,-1.048907,3.386294,-5.999614,8.313362,-1.606509,4.037364,-8.379732,1.634240,-0.161017,-7.628786,-4.242641,-5.065426,8.757093,2.318278,-9.007266,8.273036,2.408270,-0.851730,3.434589,6.500998,-8.151579,3.466073,-2.064801,-0.629760,2.602901,8.928635,7.968249,-5.343335,-8.690140,-2.951621,-6.693923,-6.726916,0.686795,5.433203,-2.561717,-1.255947,7.554622,4.779516,-7.720404,-5.946706,-6.424078,-7.109212,5.868957,-9.149266,-3.870405,7.735482,2.575484,-2.082338,-9.554187,5.533724,-5.755998,4.827005,1.612829,-6.950919,-0.254234,-0.114539,-9.419875,9.581913,8.128216,1.769987,-7.485687,6.982854,-7.461506,-1.307097,3.461607,5.066862,7.755244,-6.708939,-9.245557,9.919577,8.311480,0.826839,-2.118767,-4.064245,8.720432,8.125215,-1.733397,1.642291,-1.147982,3.399522,7.344654,7.669428,9.708300,-5.244061,-3.278609,-6.484377,0.470936,5.119190,-9.869092,6.201796,-0.103898,-4.364651,4.757963,9.397985,2.362436,-2.902021,-6.350362,-5.645745,0.594121,7.135495,-2.741459,7.299641,1.117304,3.819665,-5.786710,6.258430,4.104971,3.756108,1.605734,-2.798354,9.501965,-9.901455,-7.011192,3.846133,5.126019,-0.036153,7.940979,9.699915,-6.370673,-2.232310,3.359317,8.221619,4.382119,-9.213944,-9.962450,-8.966732,9.595074,7.246917,2.151846,9.415125,3.318639,-2.151489,5.519106,6.336324,-3.883371,5.020809,-0.188809,-2.915531,5.618357,-9.093488,2.595598,-0.222922,1.948289,-3.606160,-2.698776,7.114491,2.468986,-2.735136,3.687752,0.008774,-7.214038,-8.130727,7.997443,-2.131289,4.321564,-5.476342,8.819151,8.752941,-2.801115,9.288056,1.214753,-5.286593,-4.813027,5.171244,0.238840,5.886185,0.994629,-9.543181,-8.377326,-7.604511,4.033856,-0.534987,3.573134,-3.296453,-9.752440,-1.116392,-7.393018,-6.871546,-7.592657,3.179229,-7.228599,8.515791,-8.540675,2.928595,-3.109270,-6.883560,-7.895350,7.456225,-2.275643,-1.684497,4.854084,-2.696518,0.460120,0.559931,-7.959959,0.404915,4.586123,1.253299,-3.837576,9.051345,-0.244322,5.290661,-6.628801,-1.366796,-8.051007,6.925452,2.912445,9.348243,5.354134,-5.281263,6.316553,-3.578044,-1.104981,-5.449632,-7.530931,-5.055727,9.217553,-6.045661,-3.046026,-5.273489,4.337943,-4.005207,1.064341,5.908963,-7.705478,3.198062,-5.967600,3.872432,8.658052,3.153831,5.386552,-5.710977,5.786569,-0.578885,3.368250,-2.363484,7.516618,3.547657,3.800566,5.023791,5.919375,3.209669,-6.850357,-3.437829,9.590805,-2.075519,1.885270,7.375162,4.743832,-6.693623,5.081076,4.771601,-0.402672,7.092479,4.680929,3.604306,2.108086,-3.496981,1.069413,0.551123,9.401791,0.173541,-4.829080,9.505103,2.287656,-4.953586,9.892869,3.099354,1.398085,5.957756,7.270289,4.802452,3.808686,-0.551955,-4.124915,9.677161,7.895659,3.475425,-3.812500,6.189750,-4.418820,-9.670450,9.880467,6.040158,-9.248993,-9.744052,-9.248729,8.154445,7.618221,-7.692380,7.852416,6.451954,6.877909,8.418349,-4.102579,2.226347,-8.242154,-7.626337,1.671091,-7.193691,-4.734498,1.979593,-3.823281,-0.616413,-6.717905,-6.130817,8.852681,6.183134,-6.782802,-4.617266,5.779112,7.531981,7.132601,-0.647518,-1.723335,-2.808867,8.475926,5.916673,-0.400205,9.233415,-7.877855,5.491931,-8.963791,-3.440561,8.384257,4.423318,-6.159251,-7.756731,-7.124239,-6.561204,-6.662027,7.567385,-6.915601,6.123666,-8.110445,-8.597967,-1.673965,-8.141288,-9.167421,5.351825,3.379260,-6.736421,-2.995615,6.152407,2.971762,9.610102,4.012366,3.708160,9.052674,-9.541080,-5.467128,-8.238376,-5.959430,8.857940,-6.177305,-4.418601,4.217016,1.200706,-6.151385,-3.694816,6.455576,9.025018,-7.089749,-5.528740,3.548268,9.855590,3.497738,4.821785,2.417686,-3.081418,0.765997,4.514266,-0.095922,-7.580458,-7.058605,-9.135173,-0.756632,-2.440897,6.516806,-8.589596,1.575642,-0.481805,-9.637477,1.568858,-6.264822,6.831130,-0.790356,-0.088477,7.309005,3.543185,8.342481,7.739399,0.844344,-2.283898,3.336912,-2.075731,-9.155813,5.810176,-0.402486,-1.624124,8.712569,-0.427616,0.408448,-4.534378,-9.520864,-8.007689,1.242277,0.274295,6.303326,6.754062,5.918982,4.914534,-1.561810,-2.687587,0.642882,2.637504,-3.610734,6.266573,-4.620803,-1.101646,3.017658,-3.308831,5.929000,-8.827639,2.827255,1.571465,1.767319,3.141205,2.873729,-9.339249,-4.254753,9.967824,1.658167,-3.045491,-3.174930,-3.450119,6.655300,9.433232,5.447309,7.536363,8.120700,3.611938,-5.046766,6.843312,-2.461435,-7.638512,3.780774,6.405721,-0.602412,2.170228,-7.835096,0.933040,-8.837456,-7.504812,-0.931717,0.086598,-4.070951,-4.249253,0.103659,3.816263,4.649502,-5.382155,6.045902,3.400392,-7.097530,8.957715,0.028056,-7.697829,5.388955,8.815486,6.905776,8.383045,7.909207,-2.106500,8.953036,-9.568995,5.806330,-3.766204,-1.230337,5.756970,-6.952900,4.224693,5.523061,2.047446,4.011760,-7.218332,2.674396,-9.314958,0.294290,8.107014,-7.261579,4.168066,3.333569,2.038084,6.262430,-0.526972,4.839147,9.396903,2.404779,1.258263,0.212367,4.384055,0.495343,1.918757,-6.776969,-7.252257,-2.445310,8.726653,1.468890,1.017537,2.915963,-7.995462,-8.583398,6.118578,-9.433618,-2.242049,-7.286746,0.631682,2.729036,-7.374253,3.750702,4.390649,-4.981445,2.791801,1.988661,-0.421390,-7.644329,9.605954,2.265653,0.154768,9.075433,8.120547,4.594876,8.313845,-5.638240,4.089797,-5.944864,7.094744,4.714899,-0.936954,-0.252202,7.353382,4.492541,8.791613,9.407610,5.945155,-2.230096,-7.920636,9.124209,-1.217481,8.792115,6.662872,-0.049327,-7.935803,-3.271656,-5.821602,2.625383,2.205178,-3.880285,5.862619,4.163332,-0.384033,-8.529859,-0.045134,9.267067,2.516543,-7.609324,-4.070918], dtype = "float32")#candidate|5950|(864,)|const|float32
call_5949 = relay.TupleGetItem(func_4804_call(relay.reshape(const_5950.astype('float32'), [9, 8, 12])), 0)
call_5951 = relay.TupleGetItem(func_4807_call(relay.reshape(const_5950.astype('float32'), [9, 8, 12])), 0)
func_5722_call = mod.get_global_var('func_5722')
func_5724_call = mutated_mod.get_global_var('func_5724')
call_5966 = relay.TupleGetItem(func_5722_call(), 0)
call_5967 = relay.TupleGetItem(func_5724_call(), 0)
uop_5976 = relay.cos(call_5966.astype('float32')) # shape=(14, 9, 14)
uop_5978 = relay.cos(call_5967.astype('float32')) # shape=(14, 9, 14)
output = relay.Tuple([bop_5934,call_5949,const_5950,uop_5976,])
output2 = relay.Tuple([bop_5937,call_5951,const_5950,uop_5978,])
func_5979 = relay.Function([var_5933,], output)
mod['func_5979'] = func_5979
mod = relay.transform.InferType()(mod)
mutated_mod['func_5979'] = func_5979
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5980 = relay.var("var_5980", dtype = "bool", shape = (14, 9, 14))#candidate|5980|(14, 9, 14)|var|bool
func_5979_call = mutated_mod.get_global_var('func_5979')
call_5981 = func_5979_call(var_5980)
output = call_5981
func_5982 = relay.Function([var_5980], output)
mutated_mod['func_5982'] = func_5982
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6037 = relay.var("var_6037", dtype = "int8", shape = ())#candidate|6037|()|var|int8
const_6038 = relay.const([[[8,-8,-2,-8,-4,10,-3,-9,2,-1],[-10,-6,2,9,-2,-9,-4,1,-3,-10],[5,7,6,-6,-5,-5,-4,2,-9,-7],[-8,3,-5,-10,5,-9,10,10,-1,8],[-3,-3,-6,-7,7,-5,-10,9,-3,8],[-8,8,-3,6,7,10,-9,-1,9,9],[1,3,2,-9,-10,5,-5,8,3,2],[9,2,-6,-2,-10,-4,-5,-2,-10,4],[-1,-2,1,-2,5,6,7,-4,2,9],[7,3,-2,-10,10,-2,2,5,3,8],[3,-6,4,5,-7,8,-10,7,7,-2],[-3,8,-10,7,-4,5,-10,10,-2,10],[1,-5,-10,-3,-2,-6,1,8,-10,-7],[3,2,3,-7,-10,4,6,4,-4,5]],[[-10,-10,-8,2,-7,-2,1,2,-9,6],[-8,1,-10,2,-10,9,-9,-2,-9,-4],[-5,7,-2,9,9,-9,6,3,-6,9],[1,7,6,8,8,-2,-8,-9,7,2],[-3,-3,4,4,-10,-6,-10,-2,6,2],[1,7,4,-2,3,-8,-8,7,8,1],[-4,-8,2,3,-9,-2,-10,10,4,-6],[7,-5,-5,-8,-4,9,-8,4,-9,9],[-1,-6,7,-6,9,8,-4,-4,5,-1],[3,-7,-1,2,-8,-5,2,-10,1,-2],[8,10,-4,2,-8,-8,-5,3,-8,3],[6,4,3,-8,2,7,-9,1,-1,3],[-5,10,10,5,8,5,-8,-3,5,-5],[1,-6,-7,4,-1,7,1,-8,-9,-10]],[[-3,-1,6,-3,-7,-9,-10,-9,-5,7],[3,3,-1,7,-6,-9,4,1,5,-2],[-2,-1,9,9,6,-9,10,-4,-5,-3],[8,1,3,3,-5,2,-9,8,-4,9],[3,-2,-1,5,7,-6,-1,8,-10,4],[7,3,-9,-1,9,7,-1,-6,3,-8],[-1,-7,3,8,6,9,6,-7,-2,-9],[2,5,-5,6,4,10,8,10,1,-5],[8,10,5,-10,-10,7,7,5,-5,-9],[5,-6,5,6,-4,4,-4,-7,-4,5],[-7,5,-6,-3,-3,2,2,-3,-4,6],[2,1,6,5,4,-3,-4,-5,1,3],[-2,4,-5,-4,7,-8,-4,5,6,2],[-1,2,-5,10,-7,-2,10,-5,-4,-3]],[[-3,-10,-9,-6,8,-4,3,8,1,6],[1,-8,-3,-3,4,-7,-8,-3,-5,-9],[-7,4,8,-7,-8,-8,-10,-9,9,-1],[-9,-1,7,-3,5,5,-4,1,1,-3],[-3,-7,7,-8,-7,1,-7,-2,-10,-9],[6,6,-3,3,5,2,-9,10,2,-2],[7,6,10,10,-2,7,-3,1,10,-1],[-2,-4,1,-6,-4,-3,-6,6,-6,7],[7,9,5,-7,5,-1,-10,-9,10,3],[6,4,-4,7,9,7,6,-6,-7,-7],[1,-1,-6,10,-6,10,9,-3,4,-3],[3,-9,-8,-1,5,7,-9,-5,-7,-9],[-9,6,-2,-1,8,-1,5,-2,-4,10],[-3,5,3,7,6,6,6,5,10,8]],[[1,-1,-1,1,-7,5,8,-4,-10,3],[-8,3,-1,-3,6,9,3,6,-4,-7],[8,3,-2,6,-5,-9,-8,-8,-1,-9],[2,-4,9,-9,9,-4,-10,2,3,3],[9,-2,4,-5,10,-4,4,-9,10,-6],[6,5,-8,-7,6,-8,1,1,9,-2],[2,1,-6,8,8,6,-5,-9,9,-3],[-5,-10,-10,-4,9,-8,-2,6,9,5],[-6,-1,-1,4,-4,4,8,8,5,9],[-5,-4,5,-6,-1,-2,-3,10,1,3],[10,9,-1,8,-6,-9,-3,2,10,4],[1,2,9,8,-5,9,8,3,-4,7],[-7,3,-9,10,2,-5,-2,-9,-7,2],[7,7,-9,7,3,-3,2,2,2,-3]],[[8,9,4,-2,4,3,5,-7,4,10],[-1,10,3,-7,6,9,-7,-3,-8,-2],[-8,2,-8,-2,6,-10,6,-10,-1,-4],[-6,-10,-3,6,7,2,4,1,-4,4],[6,6,-5,-1,-1,5,7,-10,10,10],[5,-5,7,-1,-8,10,3,5,2,8],[10,3,-1,-8,9,8,-9,3,8,6],[2,-9,-3,5,-2,-1,8,-10,4,-10],[5,9,1,-1,-9,-5,4,-8,-10,-2],[-7,3,-4,-6,2,-5,4,-2,-9,3],[9,-1,-2,9,1,4,-6,-5,1,-3],[7,-9,-6,-5,-1,5,4,2,2,-10],[5,-2,3,5,9,5,8,5,5,8],[-6,-6,6,10,1,2,-6,-9,2,-10]],[[-2,4,-1,1,-1,-3,-4,1,7,10],[3,-6,-6,7,8,8,-6,-9,5,4],[1,-3,4,-6,5,-1,-10,7,-1,-6],[2,9,10,7,-10,-9,6,-7,-6,-5],[9,-1,-2,-6,3,-2,-8,4,-10,1],[-2,2,-4,10,2,-3,3,1,-2,-8],[9,-3,10,-2,8,10,-6,8,1,-2],[-5,-3,10,-4,1,1,-10,4,2,2],[-1,-10,7,7,-7,-1,3,-3,-10,-9],[-6,2,3,-10,3,-4,8,-1,3,-5],[6,-7,3,-4,-6,5,-1,10,2,10],[-3,10,-10,6,-9,-4,-6,4,10,2],[2,7,-4,-9,10,4,4,5,-6,-7],[-2,2,1,-9,5,-8,1,-10,4,-5]],[[-1,-8,-6,-8,3,-9,-8,5,6,-2],[-7,8,6,7,9,4,3,-6,-4,1],[-2,4,-1,9,5,10,4,4,-8,-9],[4,-1,-7,6,-1,-3,-7,-3,8,-8],[5,-6,8,8,10,-6,-3,1,-2,-5],[4,-8,-5,-1,-2,5,-7,-6,-1,-2],[4,-7,-5,-10,5,-1,-5,2,-7,4],[-2,-9,-2,-5,-1,-5,-6,-3,1,5],[-1,7,-5,-6,3,-4,-9,-5,1,-3],[10,-9,-2,-5,-8,-1,9,4,8,-8],[10,-6,-8,1,3,-2,-3,9,-5,-10],[-5,3,10,7,9,-7,-9,9,5,7],[-5,-3,1,-6,6,-1,-7,-4,4,-5],[1,4,-6,-9,3,1,4,8,7,4]],[[-8,-4,-1,-3,4,-8,9,-4,4,-6],[-9,7,-2,-9,-7,-2,-7,-1,5,-3],[-10,-3,-4,-4,10,7,8,3,9,8],[-4,-2,-7,1,-6,10,-9,7,-9,4],[-2,9,7,1,-3,-1,-9,1,-5,-9],[-9,9,1,-1,-8,2,-8,-1,10,-2],[-10,3,5,7,-4,-2,-5,-1,6,9],[-7,-5,1,-1,-7,5,7,9,9,3],[-4,8,-6,8,-9,8,-9,4,-9,2],[-9,5,6,-7,4,10,-4,7,-5,4],[5,3,-6,-5,-1,3,5,-5,4,6],[3,5,-4,9,-9,-7,-6,-10,5,-1],[4,6,4,8,5,-5,10,6,-2,5],[-8,8,3,10,5,6,-7,-9,-6,-8]],[[-3,-9,-5,-6,10,10,4,-3,10,-6],[-5,6,-5,-3,-2,-1,-6,-7,-5,-7],[6,2,7,-8,-9,2,7,5,3,-2],[-9,-1,5,-5,2,-7,9,-8,-5,3],[-3,7,5,1,-10,-2,-9,-3,10,7],[9,-10,-5,7,7,3,7,9,2,9],[-4,-10,-5,-9,10,-6,-2,-7,7,7],[4,-5,10,2,-5,-3,-1,3,-5,-10],[10,1,-2,-1,2,2,-7,-6,10,-10],[-8,-5,-7,2,9,-6,8,3,8,1],[-9,6,10,7,-2,7,2,-9,-8,-1],[-5,-8,-4,4,-4,-2,8,10,-1,-1],[4,3,10,4,-2,-9,-4,9,9,-10],[8,5,-1,5,-2,5,2,1,-9,-2]],[[-2,10,-7,3,-2,-6,-6,-6,5,-9],[6,4,-3,2,2,4,2,-1,5,-2],[9,-7,8,-4,-7,-4,8,-10,5,-4],[5,-2,-6,-5,-6,-7,-6,2,2,-1],[-8,9,-10,-10,3,3,-5,-5,7,1],[-9,-10,5,-1,7,-3,6,4,2,-3],[9,-5,1,5,-1,3,5,9,3,-4],[-3,-7,10,4,-3,-9,3,7,5,1],[-6,-8,-8,-10,8,-3,-2,7,-10,-4],[-10,-7,6,-6,-6,6,3,-3,-2,4],[-7,-8,-7,-1,-8,4,-9,-10,5,-5],[-2,2,-9,-6,10,-1,-7,5,6,3],[-2,-1,-5,5,6,10,-3,5,9,-2],[-3,5,-4,4,-8,-5,3,9,-8,10]]], dtype = "int8")#candidate|6038|(11, 14, 10)|const|int8
bop_6039 = relay.bitwise_xor(var_6037.astype('int8'), const_6038.astype('int8')) # shape=(11, 14, 10)
output = bop_6039
output2 = bop_6039
func_6042 = relay.Function([var_6037,], output)
mod['func_6042'] = func_6042
mod = relay.transform.InferType()(mod)
var_6043 = relay.var("var_6043", dtype = "int8", shape = ())#candidate|6043|()|var|int8
output = func_6042(var_6043)
func_6044 = relay.Function([var_6043], output)
mutated_mod['func_6044'] = func_6044
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5415_call = mod.get_global_var('func_5415')
func_5416_call = mutated_mod.get_global_var('func_5416')
call_6121 = func_5415_call()
call_6122 = func_5415_call()
func_1793_call = mod.get_global_var('func_1793')
func_1796_call = mutated_mod.get_global_var('func_1796')
var_6134 = relay.var("var_6134", dtype = "float64", shape = (1040,))#candidate|6134|(1040,)|var|float64
call_6133 = relay.TupleGetItem(func_1793_call(relay.reshape(var_6134.astype('float64'), [10, 8, 13])), 0)
call_6135 = relay.TupleGetItem(func_1796_call(relay.reshape(var_6134.astype('float64'), [10, 8, 13])), 0)
output = relay.Tuple([call_6121,call_6133,var_6134,])
output2 = relay.Tuple([call_6122,call_6135,var_6134,])
func_6137 = relay.Function([var_6134,], output)
mod['func_6137'] = func_6137
mod = relay.transform.InferType()(mod)
var_6138 = relay.var("var_6138", dtype = "float64", shape = (1040,))#candidate|6138|(1040,)|var|float64
output = func_6137(var_6138)
func_6139 = relay.Function([var_6138], output)
mutated_mod['func_6139'] = func_6139
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5415_call = mod.get_global_var('func_5415')
func_5416_call = mutated_mod.get_global_var('func_5416')
call_6141 = func_5415_call()
call_6142 = func_5415_call()
uop_6168 = relay.asinh(call_6141.astype('float32')) # shape=(14, 9, 14)
uop_6170 = relay.asinh(call_6142.astype('float32')) # shape=(14, 9, 14)
bop_6173 = relay.left_shift(call_6141.astype('uint16'), relay.reshape(uop_6168.astype('uint16'), relay.shape_of(call_6141))) # shape=(14, 9, 14)
bop_6176 = relay.left_shift(call_6142.astype('uint16'), relay.reshape(uop_6170.astype('uint16'), relay.shape_of(call_6142))) # shape=(14, 9, 14)
func_3848_call = mod.get_global_var('func_3848')
func_3855_call = mutated_mod.get_global_var('func_3855')
const_6179 = relay.const([3.724704,-0.785187,2.736800,-6.386522,-7.246270,7.000232,8.839314,0.246187,6.357157,-5.944414,-5.268924,-6.813784,9.295767,8.737863,-3.723638,9.684530,-7.603792,-9.812454,4.405102,-8.126664,7.684270,-6.852506,-8.683328,2.145308,1.710515,7.368212,0.688968,-6.023750,-4.696363,7.453033,-7.024235,-1.363718,2.749689,-4.812849,-5.463579,-8.232750,4.761997,-0.313127,-8.532950,7.633249,3.970759,1.056597,-3.458705,5.516220,4.036010,-6.982951,1.281770,7.704535,8.294933,-7.767393,-6.181060,4.560885,9.363014,-9.240049,-2.741225,6.070501,-7.336975,-8.648508,-3.814005,1.966422,-3.306176,-4.556164,8.244578,-2.198647,7.404795,-6.252069,7.874053,6.293887,1.531376,-1.214950,-7.265930,1.096671,-2.771485,6.462591,0.356121,8.564792,-8.746445,-1.330338,5.073444,2.693067,9.938000,-2.861196,5.884822,0.118060,1.336150,-9.679399,5.748108,5.610692,9.309672,3.646013,9.965119,4.452105,-2.235303,0.873124,-6.168181,-2.107137,-3.503316,2.407486,4.139255,-9.596367,-3.915755,-4.099773,-0.507420,-6.143215,-5.451485,7.512078,-9.916891,-4.207471,-9.336134,-1.275662,-0.382987,-7.406775,3.506361,-5.580986,-0.108475,-1.073347,-1.561849,-3.895142,-5.707724,-3.286027,-8.131676,-5.385557,-4.031340,4.190091,8.737533,-4.421841,6.440611,-6.493564,-5.607577,0.033847,-2.892944,9.923289,-2.326915,7.741602,-6.486998,8.594743,6.147540,5.279765,-3.725967,-0.321647,-0.450401,9.962197,4.494521,8.134027,9.568591,-9.732280,-4.962618,-2.433889,-7.410968,5.625466,8.102934,4.780910,-6.253328,2.812910,-6.441458,-2.749512,-8.036181,-1.664999,-5.509779,8.912278,-1.336900,9.422840,6.210839,5.457247,4.147193,2.089160,4.118596,-9.915259,5.097920,4.919688,5.935987,3.008579,2.502594,-5.038333,4.585610,3.650175,1.300793,-2.382796,-3.827856,-7.971844,-3.276957,1.818364,3.054178,4.062156,5.748445,-4.834996,1.376954,-3.455239,2.793880,-6.859231,-5.743883,-5.636151,-2.702888,-5.946339,-3.000409,-0.308807,-9.413876,-0.856167,0.822357,3.862099,-3.926999,-8.586506,5.723256,4.970144,6.491238,5.240761,8.912212,5.608523,-4.103841,0.001879,1.894811,9.001945,0.847232,1.533415,5.647765,0.437480,-8.834474,6.341685,-5.889527,-5.865448,-8.318552,4.569234,5.579664,2.113721,-2.084757,-4.259068,6.981481,-5.122095,7.666225,8.104849,-8.255562,4.724895,-9.271684,-1.354353,1.179811,-4.227333,-3.896917,0.567708,8.144864,5.072903,0.206964,8.907163,3.609846,8.248201,7.517458,0.940949,0.848401,-9.875867,-0.040321,-1.330153,0.100670,7.129923,-1.536776,8.334949,-0.836262,-9.525518,-0.432184,-6.993059,4.019102,-6.630270,-5.631735,-7.700424,-9.099746,-7.931217,7.960212,-4.074049,0.045652,-7.690630,1.607796,8.308850,-5.753518,9.600662,8.920663,-7.495450,-1.887501,1.404564,-1.376780,-9.320072,-8.453428,7.556066,-5.875953,-8.243027,-0.688115,7.582907,-4.856593,2.026341,-2.559943,5.868465,-7.304322,-8.161985,7.604315,2.583738,0.954907,-7.819027,-1.154551,4.044668,-5.926717,2.855710,-9.465117,-0.125529], dtype = "float32")#candidate|6179|(300,)|const|float32
const_6180 = relay.const([-9.860390,-3.361908,8.537124,-8.112054,-7.981257,3.008738,-1.234762,-2.725872,-0.167311,8.098504,6.737326,-8.287408,6.332658,5.747960,-0.499496,8.835248,-9.669109,1.081752,7.211251,3.278146,-1.158997,9.120259,-9.114258,-0.838910,-6.635173,-9.568281,-5.737317,0.466894,2.038950,-7.710464,-6.374769,-6.056407,-5.280668,0.675462,1.992409,8.507941,7.727221,-9.426087,-5.484569,-5.297389,3.016993,2.354373,2.304363,6.784319,3.967145,-6.374059,3.341217,9.107981,5.655136,-2.886031,2.861500,-9.452199,-5.242432,-2.719393,5.266286,2.880990,-4.142950,-2.424688,7.091808,-4.163634,-2.474003,-8.917703,3.886855,8.754357,-1.528917,7.206603,2.935361,-8.674078,3.985643,-5.005517,8.774560,9.196302,-4.138824,-9.349447,5.670311,9.314761,6.613446,7.628269,7.344200,5.953445,-0.873711,9.574470,-4.290729,0.502304,-2.955026,1.247057,2.291197,9.770011,-7.542883,8.903999,-5.276224,4.556130,4.666184,-0.969204,9.191374,-4.474539,9.317872,6.766201,-5.916770,0.880175,0.191959,-6.396836,2.123582,-1.897007,8.560160,5.030413,-2.692321,-5.243376,6.875796,-6.337240,-3.754727,6.142196,-2.718572,-7.077618,8.208779,-9.753067,-4.715292,-7.213664,-6.548981,3.254565,-7.390042,-0.470297,-9.215019,-4.091012,4.881304,-5.195199,-8.659628,1.020367,6.854706,9.012835,4.551060,2.075235,-6.011136,4.720526,-3.597363,4.863245,7.491316,-7.666547,-0.495931,-4.278894], dtype = "float32")#candidate|6180|(140,)|const|float32
const_6181 = relay.const([-5.008559,3.436528,-4.651402,-6.842630,-0.139670,3.647314,1.176112,7.684662,-8.420975,5.160783,-8.643641,9.219538,-0.934120,2.285747,-9.818688,5.810330,4.377072,-5.971727,2.683338,-9.641164,-9.099672,3.485935,-6.902510,-6.385630,6.745085,2.727846,0.309980,-7.339224,-7.214644,4.530703,-0.660058,8.589977,7.411985,-4.360642,-8.785937,-9.418828,-9.939870,2.624304,9.848259,8.623324], dtype = "float64")#candidate|6181|(40,)|const|float64
const_6182 = relay.const([[-8,5,-3,-1,10,3,3,-9,6,-4,10,4,-10,5,2,3,8,-9,-1,-5,-4,6,-6,-10,6,3,-7,10,-3,-7,4,-5,10,-7,-4,-3,-3,-6,3,-3,-10,-7,-3,-4,-1,1,5,-2,-10,7,3,2,10,-5,4,1,4,2,-4,4,-9,3,-1,-8,-3,-4,-6,2,-6,6,7,-5,7,8,4,-9,7,7,-8,-8,2,7,2,-4,8,-10,1,-6,3,-2,-6,-1,4,10,5,-2,3,6,1,-4,4,-6,1,3,-7,-2,5,-7,-1,10,-8,4,-2,-7,-2,3,-6,1,4,1,9,6,7,5,-2,-6,7,-10,-2,-3,-9,-2,-7,2,7,3,-9,1,4,-3,-1,7,-3,-7,5,1,8,10,-8,-7,8,-2,10,-2,-1,1,8,-10,-4,-5,-6,-4,4,10,-8,7,-6,4,6,2,-3,-9,-10,1,5,6,4,8,6,10,-4,2,7,7,4,-1,2,-5,1,8,-1,1,-4,3,-4,6,1,-7,-5,-2,-4,3,6,-8,-5,-7,9,-2,-5,-5,-10,-7,8,-9,-10,2,-5,10,5,10,-4,-4,5,8,-3,-8,-3,-3,-9,-3,-5,-3,-10,-4,10,-2,-3,7,-4,-7,-9,1,-10,-2,9,9,10,6,4,-4,-6,-7,3,-6,-1,6,-7,-2,3,5,-9,8,6,-9,4,3,8,-8,7,9,-8,-10,4,-2,-5,-1,-3,4,-2,8,-6,7,-4,-8,2,1,-4,5,-4,-5,5,-5,-6,8,4,8,-10,6,10,4,-3,2,-7,-5,7,10,-9,-10,6,5,-5,-9,-7,-8,-3,1,-7,-3,-3,5,-10,1,2,4,-1,-7,3,-1,5,9,2,-3,-4,-7,-7,-4,9,-6,-9,10,-3,-6,5,7,9,-9,8,3,-10,-9,-3,4,10,-5,-4,9,-10,-4,-4,-6,-8,5,-6,-10,-9,3,-3,3,1,-2,-3,-2,8,9,-8,-5,9,-4,10,-1,-2,2,3,1,-3,7,-6,10,-7,-3,3,5,10,7,5,1,-4,5,8,9,8,9,9,5,-6,2,8,1,9,10,-10,1,1,1,-1,1,10,-5,-9,4,-1,-7,6,-9,-8,8,9,1,-7,-9,3,-2,-2,-10,9,8,-2,1,3,-4,-8,-8,-4,-6,9,1,-7,-5,-10,-10,10,-9,3,2,-9,-6,9,-3,-2,3,-6,5,7,-2,6,-6,-2,-3,-4,-10,1,9,9,-2,2,-6,8,-2,3,2,8,10,-2,4,7,-8,-9,8,-8,2,-4,8,10,-6,6,6,3,-1,-8,10,8,-2,4,6,8,4,6,3,4,1,-7,-3,3,-9,10,4,7,6,8,3,-9,10,-1,-1,4,4,-9,6,-10,4,-2,9,-6,3,6,-10,5,8,2,-2,1,10,4,5,8,-5,8,4,-6,8,2,-6,-7,-4,6,-7,-1,-1,2,-8,-3,-5,-6,7,-5,-5,2,-4,8,9,-2,-4,-5,10,9,10,-3,-5,5,3,6,4,9,-8,-6,4,-3,-2,1,6,2,-6,-2,-3]], dtype = "uint16")#candidate|6182|(1, 594)|const|uint16
call_6178 = relay.TupleGetItem(func_3848_call(relay.reshape(const_6179.astype('float32'), [5, 4, 15]), relay.reshape(const_6179.astype('float32'), [5, 4, 15]), relay.reshape(const_6180.astype('float32'), [140,]), relay.reshape(const_6181.astype('float64'), [40,]), relay.reshape(const_6182.astype('uint16'), [594,]), ), 4)
call_6183 = relay.TupleGetItem(func_3855_call(relay.reshape(const_6179.astype('float32'), [5, 4, 15]), relay.reshape(const_6179.astype('float32'), [5, 4, 15]), relay.reshape(const_6180.astype('float32'), [140,]), relay.reshape(const_6181.astype('float64'), [40,]), relay.reshape(const_6182.astype('uint16'), [594,]), ), 4)
output = relay.Tuple([bop_6173,call_6178,const_6179,const_6180,const_6181,const_6182,])
output2 = relay.Tuple([bop_6176,call_6183,const_6179,const_6180,const_6181,const_6182,])
func_6184 = relay.Function([], output)
mod['func_6184'] = func_6184
mod = relay.transform.InferType()(mod)
mutated_mod['func_6184'] = func_6184
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6184_call = mutated_mod.get_global_var('func_6184')
call_6185 = func_6184_call()
output = call_6185
func_6186 = relay.Function([], output)
mutated_mod['func_6186'] = func_6186
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5593_call = mod.get_global_var('func_5593')
func_5594_call = mutated_mod.get_global_var('func_5594')
call_6189 = relay.TupleGetItem(func_5593_call(), 0)
call_6190 = relay.TupleGetItem(func_5594_call(), 0)
output = relay.Tuple([call_6189,])
output2 = relay.Tuple([call_6190,])
func_6207 = relay.Function([], output)
mod['func_6207'] = func_6207
mod = relay.transform.InferType()(mod)
output = func_6207()
func_6208 = relay.Function([], output)
mutated_mod['func_6208'] = func_6208
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6236 = relay.var("var_6236", dtype = "float32", shape = (11, 2, 9))#candidate|6236|(11, 2, 9)|var|float32
uop_6237 = relay.asinh(var_6236.astype('float32')) # shape=(11, 2, 9)
bop_6239 = relay.greater_equal(var_6236.astype('bool'), relay.reshape(uop_6237.astype('bool'), relay.shape_of(var_6236))) # shape=(11, 2, 9)
func_785_call = mod.get_global_var('func_785')
func_789_call = mutated_mod.get_global_var('func_789')
const_6243 = relay.const(1, dtype = "int64")#candidate|6243|()|const|int64
var_6244 = relay.var("var_6244", dtype = "int64", shape = (140,))#candidate|6244|(140,)|var|int64
var_6245 = relay.var("var_6245", dtype = "int32", shape = (13,))#candidate|6245|(13,)|var|int32
call_6242 = relay.TupleGetItem(func_785_call(relay.reshape(const_6243.astype('int64'), []), relay.reshape(var_6244.astype('int64'), [1, 14, 10]), relay.reshape(var_6245.astype('int32'), [13,]), ), 5)
call_6246 = relay.TupleGetItem(func_789_call(relay.reshape(const_6243.astype('int64'), []), relay.reshape(var_6244.astype('int64'), [1, 14, 10]), relay.reshape(var_6245.astype('int32'), [13,]), ), 5)
func_4395_call = mod.get_global_var('func_4395')
func_4399_call = mutated_mod.get_global_var('func_4399')
const_6252 = relay.const([-9,-1,-5,7,6,-8,10,8,2,9,-5,-1,5,-1,-5,7,3,8,-2,-3,10,3,-7,-9,9,4,-3,4,2,-6,-8,-10,9,-2,-6,-9,-8,-8,3,2,7,3,5,-8,5,-4,5,7,-4,4,1,6,-6,-4,2,-1,4,-9,-3,5,-8,-4,-3,-8,-7,-6,-8,10,7,-4,-10,7,9,4,-2,-2,8], dtype = "uint32")#candidate|6252|(77,)|const|uint32
const_6253 = relay.const([[5,-3,-4,5,3,-1,-4,-7,9,8,-4,7,-3,-2,6,-6,-1,7,2,-1,-3,9,3,6,7,-8,-2,5,-5,-6,3,10,-10,9,-3,7,5,5,-4,-2,2,-2,-4,-2,7,7,-9,-2,-8,-3,3,8,7,-6,2,-2,7,-1,-4,-9,10,-9,-5,-9,3,-5,-1,-4,8,-9,-9,7,4,8,-10,9,3,2,-10,-2,-5,1,1,6,9,-10,-6,-6,-4,10,-9,7,-6,1,-1,3,1,-2,1,-2,1,9,-10,8,9,-9,7,-2,6,-1,6,1,-7,-10,10,1,7,-1,-4,10,-8,-4,6,8,-1,8,-4,-7,-1,1,10,-5,3,3,-6,3,-3,-9,-4,10,7,-5,7,1,-8,3,6,6,-3,-5,1,1,6,2],[6,-5,1,3,9,-10,-6,-6,9,10,-10,-3,4,4,3,-9,-7,-3,4,10,9,2,-1,8,2,-5,2,3,1,7,3,-6,-2,-1,-4,2,1,9,-4,-5,4,9,6,-3,9,-3,-7,3,8,4,6,-5,1,10,-10,2,-3,-1,4,7,3,-8,-1,-10,6,2,1,9,-3,7,-4,-9,-1,7,4,1,-8,-10,9,-7,-3,6,-8,5,-6,7,3,-6,-4,-10,-8,6,9,6,-5,2,4,1,5,-3,10,10,4,8,8,8,10,-6,9,6,5,-3,5,8,2,10,9,-7,-5,-3,-4,1,-5,4,8,-10,-7,-9,7,-4,-9,2,4,1,4,-2,-4,-4,-9,5,-10,10,7,2,5,4,-10,-1,6,2,7,10,-7,2],[-5,-5,1,-4,3,4,-2,3,5,-8,6,-2,-4,-6,-9,10,3,-10,-1,5,-2,5,9,8,1,-6,-6,2,3,2,4,7,-9,6,-5,7,1,-3,-9,-8,-7,-1,-5,6,3,-1,1,-6,8,2,2,1,1,-8,5,5,2,-8,1,6,-1,10,-6,-2,-10,-10,-4,-8,4,-7,3,2,8,-4,-1,2,9,6,8,-2,2,1,-2,3,8,-5,-4,6,-5,2,3,10,5,7,-5,2,-2,5,5,-2,-10,1,1,9,-10,-4,4,-2,1,4,2,-3,-10,-10,8,5,-8,3,8,5,-2,8,6,-7,-3,3,7,-2,6,-2,-6,4,7,-1,-1,10,9,1,2,-10,-9,2,1,-2,8,1,3,5,-3,5,-5,9,-7,-7],[10,-3,4,-4,-9,-2,-2,-8,8,-7,2,-7,8,-10,6,-3,-9,-5,2,-6,8,10,10,-9,3,-9,9,-1,2,2,-1,6,1,-10,3,-6,5,2,-3,-4,-6,-3,-1,-2,6,-10,-6,6,8,-2,4,-3,-3,-6,6,5,7,9,-2,8,4,4,6,9,8,6,-9,-2,-4,9,2,-3,3,4,2,3,2,8,-7,-2,8,6,-7,-10,-9,-2,-4,-8,7,-2,4,7,-3,3,-3,5,-3,1,-3,2,3,-3,-8,-5,4,8,-1,3,-1,5,1,7,3,7,-10,-8,-4,-9,-3,-9,-2,-5,1,6,-4,6,-1,3,-1,-1,-1,6,-1,8,-9,-1,6,-3,-5,1,-2,-7,1,10,-2,7,-2,-7,-7,-9,3,-9,-5,8],[-3,-9,9,1,-8,4,-4,3,1,10,-4,4,8,-8,8,-3,8,-8,-2,7,-2,9,-1,3,-2,-1,2,6,1,-5,4,9,-3,-1,8,4,10,-7,6,4,-4,6,2,-8,-10,9,-2,-9,7,-10,9,-8,-7,-1,-6,-1,-2,8,1,-5,10,6,-2,7,-5,6,-10,3,9,10,-9,-8,10,-4,-2,3,-3,-2,-3,6,-9,-10,-9,6,-6,-7,-9,-5,9,-3,8,-10,2,8,4,-3,-8,-2,3,9,6,4,9,8,1,-8,5,2,2,5,5,9,-9,2,-10,-3,7,4,1,5,-3,-4,10,8,-5,-10,-10,-6,1,-5,1,9,-9,5,5,3,10,8,1,-6,10,-9,-6,-3,4,-9,-6,-4,-1,5,8,6,3,-10],[10,3,3,-2,8,9,3,-1,-6,6,-4,5,-8,2,5,-8,-9,8,-4,4,-6,-5,10,-8,1,-4,-4,10,2,-5,-5,3,-3,-7,-1,-10,1,6,3,8,9,-10,-2,6,2,2,-4,1,-6,-6,-9,-6,4,-4,5,3,-5,-6,3,1,-3,5,8,7,-4,4,1,-4,9,2,-9,7,-7,-10,-7,10,-6,7,8,-1,-9,6,3,5,-9,8,-1,1,-10,-2,4,6,4,-3,9,7,-8,-8,-4,-5,-9,10,-7,-9,1,-3,3,4,-5,2,-10,-4,1,-9,4,-7,-4,4,-9,10,4,5,-5,5,-6,5,-5,4,10,10,-7,6,5,5,-3,-3,10,-6,-9,-6,7,2,-10,-5,-10,-2,-3,8,-8,-1,-10,10,6,-9],[-7,1,6,-6,-2,5,-8,-10,-7,1,3,-8,10,-7,4,-3,-10,-4,10,5,5,-5,-8,5,3,-3,-8,9,9,-4,1,5,-4,10,-1,7,4,8,-4,9,9,-4,-3,4,-1,6,-8,5,-1,7,1,-7,-3,-1,8,-4,2,-5,-1,10,9,-3,-8,-10,-7,-1,10,-5,3,-2,6,1,4,-4,4,8,-1,-2,-1,-5,1,7,4,-4,6,9,4,9,-5,-2,8,-10,-10,5,5,10,-6,7,8,6,-9,-7,4,-10,2,7,1,8,-2,-5,-3,-2,5,-8,3,9,8,5,-6,2,-7,8,6,3,9,4,-4,-2,8,-2,-1,-4,-10,10,4,-4,10,-2,9,4,-3,1,-7,-6,4,-5,-10,-3,-8,6,6,-6,1,-3]], dtype = "uint32")#candidate|6253|(7, 154)|const|uint32
call_6251 = relay.TupleGetItem(func_4395_call(relay.reshape(const_6252.astype('uint32'), [11, 7, 1]), relay.reshape(const_6253.astype('uint32'), [11, 7, 14]), ), 0)
call_6254 = relay.TupleGetItem(func_4399_call(relay.reshape(const_6252.astype('uint32'), [11, 7, 1]), relay.reshape(const_6253.astype('uint32'), [11, 7, 14]), ), 0)
bop_6256 = relay.add(uop_6237.astype('int64'), relay.reshape(bop_6239.astype('int64'), relay.shape_of(uop_6237))) # shape=(11, 2, 9)
output = relay.Tuple([call_6242,const_6243,var_6244,var_6245,call_6251,const_6252,const_6253,bop_6256,])
output2 = relay.Tuple([call_6246,const_6243,var_6244,var_6245,call_6254,const_6252,const_6253,bop_6256,])
func_6263 = relay.Function([var_6236,var_6244,var_6245,], output)
mod['func_6263'] = func_6263
mod = relay.transform.InferType()(mod)
var_6264 = relay.var("var_6264", dtype = "float32", shape = (11, 2, 9))#candidate|6264|(11, 2, 9)|var|float32
var_6265 = relay.var("var_6265", dtype = "int64", shape = (140,))#candidate|6265|(140,)|var|int64
var_6266 = relay.var("var_6266", dtype = "int32", shape = (13,))#candidate|6266|(13,)|var|int32
output = func_6263(var_6264,var_6265,var_6266,)
func_6267 = relay.Function([var_6264,var_6265,var_6266,], output)
mutated_mod['func_6267'] = func_6267
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5415_call = mod.get_global_var('func_5415')
func_5416_call = mutated_mod.get_global_var('func_5416')
call_6329 = func_5415_call()
call_6330 = func_5415_call()
uop_6340 = relay.sqrt(call_6329.astype('float64')) # shape=(14, 9, 14)
uop_6342 = relay.sqrt(call_6330.astype('float64')) # shape=(14, 9, 14)
output = uop_6340
output2 = uop_6342
func_6344 = relay.Function([], output)
mod['func_6344'] = func_6344
mod = relay.transform.InferType()(mod)
output = func_6344()
func_6345 = relay.Function([], output)
mutated_mod['func_6345'] = func_6345
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5689_call = mod.get_global_var('func_5689')
func_5691_call = mutated_mod.get_global_var('func_5691')
call_6485 = func_5689_call()
call_6486 = func_5689_call()
output = call_6485
output2 = call_6486
func_6498 = relay.Function([], output)
mod['func_6498'] = func_6498
mod = relay.transform.InferType()(mod)
mutated_mod['func_6498'] = func_6498
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6498_call = mutated_mod.get_global_var('func_6498')
call_6499 = func_6498_call()
output = call_6499
func_6500 = relay.Function([], output)
mutated_mod['func_6500'] = func_6500
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5778_call = mod.get_global_var('func_5778')
func_5779_call = mutated_mod.get_global_var('func_5779')
call_6521 = relay.TupleGetItem(func_5778_call(), 0)
call_6522 = relay.TupleGetItem(func_5779_call(), 0)
func_329_call = mod.get_global_var('func_329')
func_331_call = mutated_mod.get_global_var('func_331')
const_6540 = relay.const([[-4],[-1],[-3],[4],[-7],[5],[8],[-3],[2],[-5],[-8],[3],[-6],[-9],[-5],[-10],[-4],[-8],[4],[-6],[-2],[-10],[-5],[-1],[9],[-9],[1],[-4],[-3],[1],[-7],[-8],[4],[8],[7],[10],[-7],[10],[-5],[10],[-7],[4],[2],[-6],[-2],[2],[-2],[8],[6],[3],[-2],[-5],[-3],[-10],[5],[4],[-10],[1],[-6],[-9],[-6],[10],[3],[3],[6],[5],[8],[4],[6],[-2],[5],[-5],[4],[-8],[-3],[-3],[-10],[-8],[-10],[2],[-6],[3],[-8],[5],[-2],[-5],[3],[-1],[3],[9],[8],[8],[4],[-9],[-6],[2],[10],[6],[-2],[-10],[-8],[-3],[-2],[-7],[-6],[3],[-10],[-10],[-7],[-1],[-1],[-5],[-8],[-7],[-1],[-7],[1],[-1],[-4],[7],[7],[-2],[3],[3],[2],[-4],[-7],[-2],[-9],[-5],[7],[1],[-2],[8],[-1],[6],[9],[6],[1],[-3],[-5],[5],[-4],[-5],[7],[5],[-4],[9],[-9],[3],[-6],[-9],[-8],[-6],[-6],[3],[-5],[-3],[7],[-4],[-10],[8],[7],[3],[6],[9],[7],[-6],[5],[-6],[-2],[4],[7],[-8],[7],[-9],[-3],[4],[-4],[-10],[-1],[2],[-7],[4],[2],[-6],[-9],[10],[8],[-10],[-10],[-6],[6],[4],[5],[2],[-3],[5],[-5],[-3],[-9],[9],[-9],[-3],[9],[-4],[2],[5],[-9],[8],[3],[1],[4],[-7],[5],[6],[-10],[9],[8],[-8],[7],[9],[3],[-7],[-10],[-6],[5],[-10],[-3],[10],[8],[-1],[2],[8],[4],[-8],[-10],[-8],[8],[-5],[2],[-5],[9],[8],[4],[-10],[-5],[-3],[-1],[-9],[-8],[3],[4],[1],[9],[-2],[7],[8],[3],[-8],[5],[1],[8],[-8],[-6],[-3],[-6],[4],[-10],[-1],[3],[9],[-3],[6],[4],[-4],[1],[-8],[-1],[8],[-5],[-6],[9],[-8],[7],[9],[-5],[9],[-7],[3],[-10],[-2],[-4],[10],[9],[5],[-10],[3],[-10],[-8],[2],[-6],[8],[-6],[-4],[-8],[-8],[5],[-1],[7],[2],[-3],[2],[-2],[9],[-9],[9],[-2],[3],[-4],[9],[-1],[-4],[-8],[1],[6],[9],[6],[7],[6],[-7],[-9],[-2],[-3],[-8],[-4],[-9],[-3],[3],[-10],[7],[8],[5],[-1],[-1],[8],[-4],[4],[7],[5],[-4],[-10],[5],[-6],[5],[3],[-1],[-1],[-4],[-7],[-9],[-4],[-10],[-1],[4],[2],[-4],[-3],[-8],[-7],[6],[-6],[-10],[1],[7],[-10],[-3],[-3],[1],[-1],[9],[-6],[-8],[2],[-7],[-8],[1],[-8],[-8],[7],[-9],[6],[-1],[8],[-1],[8],[-2],[5],[-3],[-5],[-7],[3],[-4],[-1],[2],[-10],[4],[6],[2],[-7],[2],[-5],[2],[-4],[8],[-5],[-2],[-5],[1],[-1],[-3],[-7],[-6],[2],[4],[-5],[7],[-1],[-9],[-5],[-8],[-3],[3],[9],[3],[9],[4],[1],[-9],[-9],[4],[-1],[3],[1],[-9],[-10],[9],[9],[9],[-5],[1],[-8],[-10],[-4],[4],[3],[-7],[-9],[6],[-2],[-8],[-4],[-6],[-10],[3],[7],[9],[-7],[-4],[9],[-4],[6],[-5],[-2],[4],[-6],[8],[9],[2],[-9],[5],[9],[1],[5],[8],[-5],[-6],[-6],[3],[2],[3],[2],[-9],[-5],[10],[-8],[-2],[-1],[4],[10],[1],[8],[6],[8],[3],[-9],[-9],[10],[-1],[9],[-9],[-8],[-3],[-5],[6],[10],[-1],[-3],[-2],[8],[-3],[4],[7],[-10],[-8],[-4],[7],[9],[-1],[-8],[10],[-4],[-6],[-9],[10],[-6],[6],[4],[3],[-4],[4],[-2],[-9],[10],[7],[-9],[-6],[9],[-2],[2],[8],[6],[5],[7],[-4],[3],[-8],[7],[-7],[-9],[5],[-3],[-1],[-2],[-3],[-6],[2],[2],[1],[-7],[10],[-3],[6],[8],[-8],[-10],[-5],[5],[5],[2],[4],[8],[-9],[3],[-10],[5],[2],[-10],[1],[-4],[5],[4],[-6],[9]], dtype = "uint16")#candidate|6540|(594, 1)|const|uint16
call_6539 = relay.TupleGetItem(func_329_call(relay.reshape(const_6540.astype('uint16'), [594,])), 1)
call_6541 = relay.TupleGetItem(func_331_call(relay.reshape(const_6540.astype('uint16'), [594,])), 1)
bop_6544 = relay.subtract(const_6540.astype('int16'), relay.reshape(call_6539.astype('int16'), relay.shape_of(const_6540))) # shape=(594, 1)
bop_6547 = relay.subtract(const_6540.astype('int16'), relay.reshape(call_6541.astype('int16'), relay.shape_of(const_6540))) # shape=(594, 1)
bop_6568 = relay.mod(call_6539.astype('float32'), relay.reshape(const_6540.astype('float32'), relay.shape_of(call_6539))) # shape=(594,)
bop_6571 = relay.mod(call_6541.astype('float32'), relay.reshape(const_6540.astype('float32'), relay.shape_of(call_6541))) # shape=(594,)
output = relay.Tuple([call_6521,bop_6544,bop_6568,])
output2 = relay.Tuple([call_6522,bop_6547,bop_6571,])
func_6576 = relay.Function([], output)
mod['func_6576'] = func_6576
mod = relay.transform.InferType()(mod)
mutated_mod['func_6576'] = func_6576
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6576_call = mutated_mod.get_global_var('func_6576')
call_6577 = func_6576_call()
output = call_6577
func_6578 = relay.Function([], output)
mutated_mod['func_6578'] = func_6578
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5722_call = mod.get_global_var('func_5722')
func_5724_call = mutated_mod.get_global_var('func_5724')
call_6588 = relay.TupleGetItem(func_5722_call(), 1)
call_6589 = relay.TupleGetItem(func_5724_call(), 1)
output = relay.Tuple([call_6588,])
output2 = relay.Tuple([call_6589,])
func_6596 = relay.Function([], output)
mod['func_6596'] = func_6596
mod = relay.transform.InferType()(mod)
mutated_mod['func_6596'] = func_6596
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6596_call = mutated_mod.get_global_var('func_6596')
call_6597 = func_6596_call()
output = call_6597
func_6598 = relay.Function([], output)
mutated_mod['func_6598'] = func_6598
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6622 = relay.var("var_6622", dtype = "bool", shape = (10, 4, 1))#candidate|6622|(10, 4, 1)|var|bool
var_6623 = relay.var("var_6623", dtype = "bool", shape = (10, 4, 1))#candidate|6623|(10, 4, 1)|var|bool
bop_6624 = relay.logical_and(var_6622.astype('bool'), relay.reshape(var_6623.astype('bool'), relay.shape_of(var_6622))) # shape=(10, 4, 1)
uop_6637 = relay.acosh(var_6623.astype('float64')) # shape=(10, 4, 1)
output = relay.Tuple([bop_6624,uop_6637,])
output2 = relay.Tuple([bop_6624,uop_6637,])
func_6640 = relay.Function([var_6622,var_6623,], output)
mod['func_6640'] = func_6640
mod = relay.transform.InferType()(mod)
var_6641 = relay.var("var_6641", dtype = "bool", shape = (10, 4, 1))#candidate|6641|(10, 4, 1)|var|bool
var_6642 = relay.var("var_6642", dtype = "bool", shape = (10, 4, 1))#candidate|6642|(10, 4, 1)|var|bool
output = func_6640(var_6641,var_6642,)
func_6643 = relay.Function([var_6641,var_6642,], output)
mutated_mod['func_6643'] = func_6643
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6596_call = mod.get_global_var('func_6596')
func_6598_call = mutated_mod.get_global_var('func_6598')
call_6675 = relay.TupleGetItem(func_6596_call(), 0)
call_6676 = relay.TupleGetItem(func_6598_call(), 0)
output = relay.Tuple([call_6675,])
output2 = relay.Tuple([call_6676,])
func_6680 = relay.Function([], output)
mod['func_6680'] = func_6680
mod = relay.transform.InferType()(mod)
output = func_6680()
func_6681 = relay.Function([], output)
mutated_mod['func_6681'] = func_6681
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6207_call = mod.get_global_var('func_6207')
func_6208_call = mutated_mod.get_global_var('func_6208')
call_6701 = relay.TupleGetItem(func_6207_call(), 0)
call_6702 = relay.TupleGetItem(func_6208_call(), 0)
output = relay.Tuple([call_6701,])
output2 = relay.Tuple([call_6702,])
func_6722 = relay.Function([], output)
mod['func_6722'] = func_6722
mod = relay.transform.InferType()(mod)
output = func_6722()
func_6723 = relay.Function([], output)
mutated_mod['func_6723'] = func_6723
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6727 = relay.const([[[-5,-2,3,5,-8,-8,-8,-8,5,-10],[3,-4,-8,6,6,-1,-8,7,6,-7],[6,5,-8,-9,-3,5,-8,-3,-1,-10],[6,-7,6,-6,-7,7,10,9,6,-2]],[[-8,-5,7,-3,-8,5,-4,-8,10,3],[7,-1,3,-7,-10,8,-6,-6,-2,3],[-2,5,3,-8,-9,10,-2,-5,3,-6],[10,2,-8,1,7,-1,2,-9,-9,-10]],[[10,6,-3,9,-4,-10,8,4,-2,7],[9,-10,-3,-8,6,5,-7,7,4,7],[-10,4,-9,-5,3,2,-9,-3,-1,-9],[8,-4,4,5,7,6,9,7,-8,8]],[[-4,3,3,8,-4,5,-10,7,2,2],[3,9,9,9,6,-9,8,-4,6,8],[-10,4,-4,5,-2,-7,6,5,4,3],[1,-2,3,-3,9,-1,-6,10,5,-6]],[[-4,-9,1,-6,-8,-6,-10,-10,-4,4],[-4,-4,-9,10,2,10,-1,6,3,-8],[2,1,-10,-7,-4,10,5,8,-10,9],[-6,-8,7,8,8,2,10,2,-4,6]],[[9,8,2,1,4,-4,10,-7,5,-1],[-3,-5,-8,-5,-7,2,9,-3,4,2],[5,-10,5,-3,3,7,9,-9,10,-9],[4,-4,-9,-3,10,-3,-1,-9,-10,-1]],[[8,-1,10,2,-5,-7,-2,4,-8,6],[-4,3,4,2,-6,-1,10,1,-3,2],[-6,8,9,-1,1,-3,6,10,9,6],[-6,-10,-8,-8,4,10,6,9,-2,-2]],[[-6,9,2,4,3,5,-8,8,5,-8],[4,10,7,-7,8,1,-4,-7,-2,-8],[-2,4,7,5,-8,5,-10,3,-4,4],[10,9,-8,2,9,4,-2,-9,-2,3]],[[7,1,-4,-5,-5,-2,8,2,-8,-7],[4,-8,2,5,4,-2,-7,10,-9,10],[8,10,-3,-4,-7,-10,2,7,-5,-6],[4,2,4,5,-1,-7,6,6,2,-4]],[[1,-1,-10,-7,-5,-6,2,2,-3,7],[-9,2,-6,9,-10,-8,-5,-4,-9,1],[-3,-3,-8,10,10,-3,4,8,-6,7],[-8,-9,-3,-9,5,6,-1,-2,4,8]],[[1,-6,-1,-4,-1,-4,-7,-3,7,5],[-4,-9,-10,3,5,9,-5,1,-1,-4],[8,-1,-3,7,10,10,-1,-10,10,-6],[-5,8,-1,-9,-6,5,10,-8,2,-3]],[[-5,8,-1,-8,10,-5,2,8,-4,6],[-9,-1,8,-2,-5,5,-7,8,9,-9],[2,7,-7,7,-1,1,-5,9,-4,-6],[-5,10,3,-9,4,3,-2,-9,-7,-2]],[[1,-6,-10,2,7,4,8,-5,-10,3],[-2,9,9,7,-6,2,-4,6,5,-7],[-3,-4,5,-1,-4,8,-1,4,-8,-5],[9,2,8,-7,-5,5,5,10,-1,-4]],[[5,4,2,-5,-6,5,-10,9,4,-2],[2,6,9,7,6,6,7,7,-8,10],[-5,-1,9,-4,8,3,-3,7,-6,3],[-10,-3,-1,-6,5,4,8,-6,7,-3]],[[3,-7,4,10,10,4,-4,-7,-7,5],[7,-3,-7,4,-8,1,3,-10,3,9],[-5,5,7,-6,3,10,3,8,4,-3],[9,6,1,-10,-7,-10,-9,-2,5,5]],[[-3,1,-8,-7,-1,5,-4,3,-8,-2],[2,-5,-6,-1,9,2,-1,-10,-2,-3],[7,2,-10,9,-9,-3,4,6,-7,3],[-5,1,-6,6,8,-10,9,6,-8,-9]]], dtype = "int8")#candidate|6727|(16, 4, 10)|const|int8
var_6728 = relay.var("var_6728", dtype = "int8", shape = (16, 4, 10))#candidate|6728|(16, 4, 10)|var|int8
bop_6729 = relay.multiply(const_6727.astype('int8'), relay.reshape(var_6728.astype('int8'), relay.shape_of(const_6727))) # shape=(16, 4, 10)
bop_6741 = relay.bitwise_or(const_6727.astype('uint16'), relay.reshape(bop_6729.astype('uint16'), relay.shape_of(const_6727))) # shape=(16, 4, 10)
func_5833_call = mod.get_global_var('func_5833')
func_5836_call = mutated_mod.get_global_var('func_5836')
const_6747 = relay.const([False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False], dtype = "bool")#candidate|6747|(1764,)|const|bool
call_6746 = func_5833_call(relay.reshape(const_6747.astype('bool'), [14, 9, 14]))
call_6748 = func_5833_call(relay.reshape(const_6747.astype('bool'), [14, 9, 14]))
uop_6756 = relay.rsqrt(var_6728.astype('float32')) # shape=(16, 4, 10)
func_4395_call = mod.get_global_var('func_4395')
func_4399_call = mutated_mod.get_global_var('func_4399')
var_6761 = relay.var("var_6761", dtype = "uint32", shape = (1, 77))#candidate|6761|(1, 77)|var|uint32
const_6762 = relay.const([-10,2,-7,1,1,9,-9,7,-5,1,-4,8,10,2,1,-7,-10,8,-7,-5,6,10,-8,-9,7,7,-3,-5,8,-7,9,-7,-5,8,-8,2,6,-1,8,7,10,-9,9,-7,3,8,-10,-3,-4,6,-4,5,-10,-4,6,6,-7,8,10,5,-7,-5,9,-1,9,-4,6,2,-6,4,10,-8,4,-3,9,-10,-2,-5,-3,2,6,4,5,-7,6,3,-1,3,4,2,5,-2,-6,-7,-5,-10,5,2,4,1,1,8,-4,9,-8,-1,-10,-9,2,-7,5,8,3,-9,9,9,-5,-2,-7,-7,2,7,3,-10,9,3,-5,3,-9,7,4,10,4,-6,-4,5,3,8,7,2,-5,2,-6,-10,-9,4,6,1,-5,10,-4,-5,-6,-4,3,8,10,2,7,2,-10,7,10,3,-9,-5,7,-9,-3,5,-8,7,-5,6,8,7,-4,-3,4,-10,-8,-5,4,-9,6,4,9,4,10,-5,7,8,6,-6,7,3,-10,4,10,-3,-7,10,10,-9,3,-9,-6,2,8,2,5,-5,-4,10,-10,10,-4,3,-4,4,-6,8,2,6,1,7,3,-2,9,-3,-9,-8,5,6,-4,7,-3,-4,8,-5,7,-6,2,-9,3,1,7,2,-1,-9,9,6,2,7,9,-10,1,-1,3,-5,-4,-8,-6,-10,9,5,-7,9,3,1,7,-10,-7,-1,-3,-9,-5,-7,-7,9,6,5,-6,-5,2,1,-7,-8,-4,-7,7,3,10,2,-6,-5,-4,-6,-7,-9,6,6,1,-10,-5,1,2,2,1,-1,-5,-9,-9,1,-7,4,-8,-9,-6,-3,5,-1,-5,8,6,-5,6,-2,-3,10,3,3,4,-10,2,-9,7,-3,4,-10,-3,-3,-1,5,-10,-3,-6,-4,-10,-1,8,-1,-2,7,10,-8,4,-3,8,8,10,1,-10,10,-9,-4,3,-2,-2,4,-6,-4,-4,7,2,2,-9,-1,7,-8,-4,-3,-10,3,4,1,-10,10,9,-7,-5,6,-3,-2,8,-9,4,9,-5,-3,2,8,-8,-7,8,-1,-7,4,4,10,-7,6,1,5,-10,6,2,-7,4,1,-9,4,9,-6,5,-5,-7,4,-8,3,-7,1,4,-2,-1,-10,-5,-6,2,9,8,-10,7,-10,-2,3,3,-1,-2,-5,7,-3,8,9,9,-7,-2,-1,-2,-1,5,6,-8,7,9,2,7,-8,-3,7,5,-1,3,-5,3,1,-10,8,-3,7,-6,8,2,-10,-3,1,1,4,-3,2,4,6,2,1,8,9,-7,-9,5,8,-6,-7,-10,-4,-9,-1,-10,7,10,9,-8,-5,-7,5,-6,1,1,-3,-8,-4,-3,-10,-1,-7,8,10,-6,2,1,-7,-10,9,6,-2,8,3,-10,-8,-1,3,-3,-7,8,-4,7,-6,-10,8,-8,10,6,-1,6,7,-4,-9,3,-6,7,2,1,-1,-6,7,-1,1,-10,-4,-10,8,-1,-1,-4,9,-8,5,10,2,-7,9,-8,5,-5,-8,10,-10,-2,-9,-9,8,-9,9,-1,5,-10,5,-9,7,7,-10,9,2,-1,10,7,-7,2,-6,-7,-10,9,6,-6,-1,-8,2,1,1,-2,1,-10,8,6,-5,-6,9,-10,3,-10,9,-3,5,4,5,-8,7,-7,-2,-8,-4,-3,2,-10,1,7,-7,-2,4,10,-2,-6,-10,4,5,-10,8,4,1,5,5,4,4,-6,-2,8,7,-4,8,-1,-4,2,6,-4,-1,1,-10,-9,10,3,-2,-7,8,7,3,-8,9,-9,-5,4,-3,-3,-1,-7,8,5,2,8,-5,-5,3,5,5,-8,8,-8,8,-4,-6,2,-1,-3,-10,5,7,4,-5,-1,5,-1,-1,4,2,10,8,-1,8,-6,-6,4,10,3,-8,-8,-4,-8,9,6,-1,-3,-6,-2,8,-5,-6,10,-8,5,-9,-1,-3,-10,2,-8,-2,-3,-5,5,10,10,6,6,-4,9,4,-8,8,1,-4,2,8,-4,-10,-6,6,10,7,7,-9,-5,-6,-1,-3,-4,-9,-2,-4,2,5,6,-6,-7,-2,-2,-1,-3,-2,-3,7,1,-6,5,-9,-3,4,10,-6,3,-1,9,4,1,8,-8,-1,-1,1,-4,4,9,-9,-10,-7,-2,-7,-2,-5,-6,5,6,-4,1,-6,10,-6,-1,-9,9,3,-4,-2,-1,9,10,1,10,-4,3,-9,1,1,10,3,5,1,-4,6,-2,3,1,-7,-9,3,2,-2,-7,4,-2,7,3,-7,-2,4,-9,3,1,10,-2,2,7,6,-9,-1,7,10,-5,9,-1,-1,-8,-2,-8,-8,7,2,-8,-8,-1,9,9,8,-6,3,-9,-10,3,-5,6,9,5,-9,-2,-9,-8,-10,6,10,6,9,-10,-2,3,-3,-3,4,6,3,2,2,2,8,-2,2,-4,3,10,-6,-5,3,1,-7,3,-6,4,7,-10,4,3,-9,-6,10,8,-2,7,10,-3,7,-9,-2,-3,-10,4,-4,-1,4,7,-7,2,-9,-3,8,-8,-3,-10,-1,-4,7,-7,2,7,-5,-10,9,-2,-10,9,-10,-3,-3,7,-7,5,6,-8,-9,-4,7,-9,-5,-9,3,-3,3,7,10,-2,-7,-4,10,-1,4,5,3,-2,-4,-5,6,-1,5,-9,-6,-5,-9,-5,-10,-9,-4,-10,10,-7,-2,1,-2,1,2,4,10,-10,10,-1,2,7,-6,-6,8,1,6,9,4,-5,1,-6,-1,-1,4,1,2,3,-4,4,-2,3,-7,-8,-4,9,4,-6,4,6,-1,-3,7,-3,-8,-7,4,-8,4], dtype = "uint32")#candidate|6762|(1078,)|const|uint32
call_6760 = relay.TupleGetItem(func_4395_call(relay.reshape(var_6761.astype('uint32'), [11, 7, 1]), relay.reshape(const_6762.astype('uint32'), [11, 7, 14]), ), 0)
call_6763 = relay.TupleGetItem(func_4399_call(relay.reshape(var_6761.astype('uint32'), [11, 7, 1]), relay.reshape(const_6762.astype('uint32'), [11, 7, 14]), ), 0)
output = relay.Tuple([bop_6741,call_6746,const_6747,uop_6756,call_6760,var_6761,const_6762,])
output2 = relay.Tuple([bop_6741,call_6748,const_6747,uop_6756,call_6763,var_6761,const_6762,])
func_6770 = relay.Function([var_6728,var_6761,], output)
mod['func_6770'] = func_6770
mod = relay.transform.InferType()(mod)
var_6771 = relay.var("var_6771", dtype = "int8", shape = (16, 4, 10))#candidate|6771|(16, 4, 10)|var|int8
var_6772 = relay.var("var_6772", dtype = "uint32", shape = (1, 77))#candidate|6772|(1, 77)|var|uint32
output = func_6770(var_6771,var_6772,)
func_6773 = relay.Function([var_6771,var_6772,], output)
mutated_mod['func_6773'] = func_6773
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6680_call = mod.get_global_var('func_6680')
func_6681_call = mutated_mod.get_global_var('func_6681')
call_6807 = relay.TupleGetItem(func_6680_call(), 0)
call_6808 = relay.TupleGetItem(func_6681_call(), 0)
var_6821 = relay.var("var_6821", dtype = "int16", shape = (1890,))#candidate|6821|(1890,)|var|int16
bop_6822 = relay.floor_divide(call_6807.astype('float64'), relay.reshape(var_6821.astype('float64'), relay.shape_of(call_6807))) # shape=(1890,)
bop_6825 = relay.floor_divide(call_6808.astype('float64'), relay.reshape(var_6821.astype('float64'), relay.shape_of(call_6808))) # shape=(1890,)
func_6596_call = mod.get_global_var('func_6596')
func_6598_call = mutated_mod.get_global_var('func_6598')
call_6834 = relay.TupleGetItem(func_6596_call(), 0)
call_6835 = relay.TupleGetItem(func_6598_call(), 0)
output = relay.Tuple([bop_6822,call_6834,])
output2 = relay.Tuple([bop_6825,call_6835,])
func_6839 = relay.Function([var_6821,], output)
mod['func_6839'] = func_6839
mod = relay.transform.InferType()(mod)
mutated_mod['func_6839'] = func_6839
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6840 = relay.var("var_6840", dtype = "int16", shape = (1890,))#candidate|6840|(1890,)|var|int16
func_6839_call = mutated_mod.get_global_var('func_6839')
call_6841 = func_6839_call(var_6840)
output = call_6841
func_6842 = relay.Function([var_6840], output)
mutated_mod['func_6842'] = func_6842
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6853 = relay.var("var_6853", dtype = "int64", shape = ())#candidate|6853|()|var|int64
const_6854 = relay.const([[[5,1,-6,10,-2,-8,-9,9,-8,1,4,9,-2],[8,-7,9,-4,9,-5,-5,-9,-9,-2,2,5,6],[-3,-5,-5,3,1,6,-2,5,-4,-4,5,-1,6],[-7,-7,10,-9,7,9,-5,-1,6,-6,3,-5,-4]],[[2,7,1,9,-8,-7,6,-2,5,-5,-10,2,-6],[-7,1,1,-7,3,4,-5,3,-1,6,-3,-1,-7],[-1,-7,3,-10,-5,10,-1,9,7,10,-6,8,-6],[-2,9,-8,-10,9,-10,8,10,-7,-2,-8,2,6]],[[1,-1,5,4,5,-6,8,8,4,3,-5,5,-1],[-4,-3,3,6,-10,9,7,-7,-9,-6,-5,3,4],[-2,-5,4,-6,-4,10,4,3,4,-9,10,-10,-5],[9,-4,-7,-4,7,-4,4,3,7,1,-3,7,10]],[[8,-6,-4,2,-7,-2,3,-10,4,2,5,-7,7],[-3,-9,-4,2,1,-6,-4,4,-6,7,2,8,-1],[5,-9,-5,9,-7,3,4,5,-1,-4,7,1,-6],[5,9,8,5,6,-2,-6,-1,-8,4,-4,-2,-9]],[[-8,3,5,9,6,-10,5,-1,-5,5,7,-9,-7],[-8,-5,10,-9,-9,-2,10,6,-9,8,-1,8,-6],[-1,7,-2,-9,-2,-10,3,-5,8,3,7,-8,-3],[-7,4,7,10,3,1,-9,-2,-5,-8,8,-8,-1]],[[-2,-10,-5,7,2,-5,9,4,-10,2,4,7,-10],[8,-7,-4,8,-5,3,-4,-7,7,7,-6,6,10],[-7,-2,3,6,-10,8,-6,-3,-6,-6,-6,-9,-6],[-9,-4,2,6,-2,-5,9,-1,-5,2,8,5,-3]],[[8,-5,8,7,-2,7,5,7,8,-5,-4,7,-6],[-4,-10,-5,10,5,3,3,-2,-5,8,5,9,6],[-8,-9,-8,9,-1,-8,-6,10,4,-7,2,3,6],[-9,-8,8,5,-4,2,3,-10,6,-4,7,10,4]],[[6,5,5,-6,-6,-1,-2,6,-10,9,1,-8,-10],[5,-7,-3,8,4,9,-8,-6,9,-6,4,-5,-8],[6,5,10,-7,1,-1,-9,4,-7,-4,3,-3,-8],[7,-7,4,-2,1,-1,3,2,2,-1,9,1,2]],[[-9,-5,9,-4,8,2,-7,3,5,1,-10,-9,1],[2,3,8,-9,1,-4,6,1,3,5,7,2,9],[10,4,10,-3,-9,5,3,-8,10,-10,-6,-2,-9],[-2,6,-4,3,-8,-5,6,-2,-4,10,2,7,-1]],[[-7,3,2,8,1,4,1,9,-5,-1,-9,-1,-6],[6,-7,4,2,9,-7,1,8,-3,9,4,-6,-10],[8,3,6,-7,8,6,-3,5,-9,-7,6,-5,-4],[1,-4,7,4,-7,-9,3,10,-1,-2,2,-5,-10]],[[10,5,6,4,-7,-5,-10,3,-9,-1,4,9,-6],[-1,1,-1,-9,-5,-2,-7,1,-2,-4,-4,-1,-1],[7,-3,2,-4,-5,4,-3,9,9,6,7,4,-5],[4,3,1,7,3,-9,-2,3,-10,-6,-2,4,8]],[[-6,-3,-3,6,-4,6,-2,1,-9,8,1,-8,7],[-6,10,4,-8,-6,6,7,-9,-1,3,2,5,3],[10,-6,5,-9,8,10,2,7,8,-8,-8,-9,1],[4,-3,-5,-10,9,-3,-10,-4,6,-6,8,8,2]],[[6,-6,7,4,-7,-5,10,-4,-4,5,-3,-8,6],[3,-1,-8,8,-4,4,-5,5,-9,3,9,6,-7],[-4,7,8,-2,5,-4,5,-6,-5,9,-10,-6,-2],[10,6,-6,-10,-10,1,7,-5,-8,10,9,-6,5]],[[9,-1,-4,-8,6,-3,-6,-5,9,4,-5,-4,10],[-10,2,-4,-9,-3,-4,5,4,8,-5,9,-7,5],[7,8,-3,-6,8,-7,3,-1,-10,10,-6,-5,1],[4,1,3,1,5,-2,10,-1,8,-8,4,5,3]]], dtype = "int64")#candidate|6854|(14, 4, 13)|const|int64
bop_6855 = relay.multiply(var_6853.astype('int64'), const_6854.astype('int64')) # shape=(14, 4, 13)
func_5778_call = mod.get_global_var('func_5778')
func_5779_call = mutated_mod.get_global_var('func_5779')
call_6859 = relay.TupleGetItem(func_5778_call(), 0)
call_6860 = relay.TupleGetItem(func_5779_call(), 0)
output = relay.Tuple([bop_6855,call_6859,])
output2 = relay.Tuple([bop_6855,call_6860,])
func_6866 = relay.Function([var_6853,], output)
mod['func_6866'] = func_6866
mod = relay.transform.InferType()(mod)
mutated_mod['func_6866'] = func_6866
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6867 = relay.var("var_6867", dtype = "int64", shape = ())#candidate|6867|()|var|int64
func_6866_call = mutated_mod.get_global_var('func_6866')
call_6868 = func_6866_call(var_6867)
output = call_6868
func_6869 = relay.Function([var_6867], output)
mutated_mod['func_6869'] = func_6869
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7029 = relay.var("var_7029", dtype = "float32", shape = (6, 13, 6))#candidate|7029|(6, 13, 6)|var|float32
uop_7030 = relay.tan(var_7029.astype('float32')) # shape=(6, 13, 6)
output = relay.Tuple([uop_7030,])
output2 = relay.Tuple([uop_7030,])
func_7032 = relay.Function([var_7029,], output)
mod['func_7032'] = func_7032
mod = relay.transform.InferType()(mod)
mutated_mod['func_7032'] = func_7032
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7033 = relay.var("var_7033", dtype = "float32", shape = (6, 13, 6))#candidate|7033|(6, 13, 6)|var|float32
func_7032_call = mutated_mod.get_global_var('func_7032')
call_7034 = func_7032_call(var_7033)
output = call_7034
func_7035 = relay.Function([var_7033], output)
mutated_mod['func_7035'] = func_7035
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6184_call = mod.get_global_var('func_6184')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_7064 = relay.TupleGetItem(func_6184_call(), 1)
call_7065 = relay.TupleGetItem(func_6186_call(), 1)
output = call_7064
output2 = call_7065
func_7071 = relay.Function([], output)
mod['func_7071'] = func_7071
mod = relay.transform.InferType()(mod)
output = func_7071()
func_7072 = relay.Function([], output)
mutated_mod['func_7072'] = func_7072
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7071_call = mod.get_global_var('func_7071')
func_7072_call = mutated_mod.get_global_var('func_7072')
call_7095 = func_7071_call()
call_7096 = func_7071_call()
output = call_7095
output2 = call_7096
func_7131 = relay.Function([], output)
mod['func_7131'] = func_7131
mod = relay.transform.InferType()(mod)
output = func_7131()
func_7132 = relay.Function([], output)
mutated_mod['func_7132'] = func_7132
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5722_call = mod.get_global_var('func_5722')
func_5724_call = mutated_mod.get_global_var('func_5724')
call_7135 = relay.TupleGetItem(func_5722_call(), 1)
call_7136 = relay.TupleGetItem(func_5724_call(), 1)
func_6498_call = mod.get_global_var('func_6498')
func_6500_call = mutated_mod.get_global_var('func_6500')
call_7147 = func_6498_call()
call_7148 = func_6498_call()
var_7158 = relay.var("var_7158", dtype = "int16", shape = (1890,))#candidate|7158|(1890,)|var|int16
bop_7159 = relay.equal(call_7135.astype('bool'), relay.reshape(var_7158.astype('bool'), relay.shape_of(call_7135))) # shape=(1890,)
bop_7162 = relay.equal(call_7136.astype('bool'), relay.reshape(var_7158.astype('bool'), relay.shape_of(call_7136))) # shape=(1890,)
output = relay.Tuple([call_7147,bop_7159,])
output2 = relay.Tuple([call_7148,bop_7162,])
func_7178 = relay.Function([var_7158,], output)
mod['func_7178'] = func_7178
mod = relay.transform.InferType()(mod)
var_7179 = relay.var("var_7179", dtype = "int16", shape = (1890,))#candidate|7179|(1890,)|var|int16
output = func_7178(var_7179)
func_7180 = relay.Function([var_7179], output)
mutated_mod['func_7180'] = func_7180
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7071_call = mod.get_global_var('func_7071')
func_7072_call = mutated_mod.get_global_var('func_7072')
call_7211 = func_7071_call()
call_7212 = func_7071_call()
func_3076_call = mod.get_global_var('func_3076')
func_3079_call = mutated_mod.get_global_var('func_3079')
const_7214 = relay.const([[-6.796130,3.396938,-6.103360,-7.243079,-8.030539,-2.624994,0.310874,5.007746,6.561271,-5.548827,-7.732108,-5.623569,5.392718,-1.256972,-8.085981,7.904412,2.269876,-8.347297,-5.007368,-0.154219,-0.630931,-5.510937,-8.342393,8.572358,-0.565167,4.791100,-4.040974,0.076869,9.596365,3.333754,2.019545,-6.768664,6.226516,-0.922725,5.066371,-1.980985],[5.867447,-9.217352,-0.328781,5.671498,3.873022,-9.935954,-4.150002,-9.035744,8.534310,-0.447241,-3.917886,2.950339,2.941954,8.836610,-6.145319,-4.458745,3.660513,3.479516,9.870589,-4.133357,-7.296723,-4.021164,7.997713,-6.525400,-4.331247,2.213044,-5.057523,-0.207635,-7.495242,-1.359647,7.126942,1.072468,5.276404,-5.640787,8.633896,-1.686374],[7.177622,3.326247,1.129895,6.949475,-8.771000,-0.256620,-4.946085,-3.091292,5.581987,3.665258,6.846695,1.089201,-8.394271,3.736259,-8.844093,3.498488,-6.536432,-6.535622,-4.922861,8.322388,-4.143375,6.731906,-9.706559,-8.985139,2.481372,-3.315354,-2.663825,5.107692,-3.126152,-4.472610,-7.262901,-5.060791,-6.865519,-5.329832,9.801006,9.063629],[-6.820412,-7.461675,-0.210744,-7.858320,-6.248999,7.468686,-5.439248,5.810308,4.933998,4.799652,9.277811,7.600031,1.037441,8.192728,0.340032,-3.065895,2.726468,0.959547,8.129600,3.283317,-5.454598,-7.161973,-7.632202,5.308972,-7.713287,6.842653,2.108629,3.939338,8.810637,3.590923,-5.807693,-2.277468,-1.114757,5.416025,7.110128,7.851185],[2.154342,-6.689932,-7.541965,-7.626464,-6.747738,-0.603897,-3.875983,-7.838519,-8.871414,-1.857863,-4.576192,5.403440,-8.766236,-1.872044,0.756474,-8.532601,-5.495412,-9.634715,-8.863565,8.126567,4.087304,-3.641546,6.234220,0.497439,-8.529306,-3.068364,-8.852953,2.561785,1.203472,-0.068639,-7.519274,6.606421,8.734852,2.564485,-8.490690,-1.964722],[-4.233082,6.984171,-6.083628,-3.557796,2.470458,7.463289,-3.666171,-4.974665,-8.202881,-4.481727,8.237025,7.401995,-4.558839,6.338639,9.459492,-7.273671,-0.123407,-1.304192,-8.676192,-6.871492,2.091567,0.523489,-1.494265,3.666971,-2.385259,0.285508,-5.252487,-6.797294,1.565431,4.800442,2.819548,7.225866,-3.182649,-8.694925,-1.600770,-5.035028]], dtype = "float64")#candidate|7214|(6, 36)|const|float64
call_7213 = func_3076_call(relay.reshape(const_7214.astype('float64'), [9, 6, 4]))
call_7215 = func_3076_call(relay.reshape(const_7214.astype('float64'), [9, 6, 4]))
func_5979_call = mod.get_global_var('func_5979')
func_5982_call = mutated_mod.get_global_var('func_5982')
const_7228 = relay.const([False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,True,True,False,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,True,True,False,True,False,False,True,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,True,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True], dtype = "bool")#candidate|7228|(1764,)|const|bool
call_7227 = relay.TupleGetItem(func_5979_call(relay.reshape(const_7228.astype('bool'), [14, 9, 14])), 1)
call_7229 = relay.TupleGetItem(func_5982_call(relay.reshape(const_7228.astype('bool'), [14, 9, 14])), 1)
bop_7241 = relay.mod(const_7214.astype('float64'), relay.reshape(call_7213.astype('float64'), relay.shape_of(const_7214))) # shape=(6, 36)
bop_7244 = relay.mod(const_7214.astype('float64'), relay.reshape(call_7215.astype('float64'), relay.shape_of(const_7214))) # shape=(6, 36)
var_7245 = relay.var("var_7245", dtype = "bool", shape = (9, 8, 12))#candidate|7245|(9, 8, 12)|var|bool
bop_7246 = relay.bitwise_or(call_7227.astype('uint32'), relay.reshape(var_7245.astype('uint32'), relay.shape_of(call_7227))) # shape=(9, 8, 12)
bop_7249 = relay.bitwise_or(call_7229.astype('uint32'), relay.reshape(var_7245.astype('uint32'), relay.shape_of(call_7229))) # shape=(9, 8, 12)
var_7250 = relay.var("var_7250", dtype = "bool", shape = (9, 8, 12))#candidate|7250|(9, 8, 12)|var|bool
bop_7251 = relay.bitwise_xor(var_7245.astype('int8'), relay.reshape(var_7250.astype('int8'), relay.shape_of(var_7245))) # shape=(9, 8, 12)
uop_7257 = relay.log10(call_7227.astype('float32')) # shape=(9, 8, 12)
uop_7259 = relay.log10(call_7229.astype('float32')) # shape=(9, 8, 12)
uop_7277 = relay.asinh(uop_7257.astype('float64')) # shape=(9, 8, 12)
uop_7279 = relay.asinh(uop_7259.astype('float64')) # shape=(9, 8, 12)
func_6184_call = mod.get_global_var('func_6184')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_7293 = relay.TupleGetItem(func_6184_call(), 5)
call_7294 = relay.TupleGetItem(func_6186_call(), 5)
func_856_call = mod.get_global_var('func_856')
func_860_call = mutated_mod.get_global_var('func_860')
var_7330 = relay.var("var_7330", dtype = "float64", shape = (40,))#candidate|7330|(40,)|var|float64
const_7331 = relay.const(-7, dtype = "int32")#candidate|7331|()|const|int32
call_7329 = relay.TupleGetItem(func_856_call(relay.reshape(var_7330.astype('float64'), [1, 8, 5]), relay.reshape(const_7331.astype('int32'), []), relay.reshape(call_7211.astype('int32'), [13,]), ), 3)
call_7332 = relay.TupleGetItem(func_860_call(relay.reshape(var_7330.astype('float64'), [1, 8, 5]), relay.reshape(const_7331.astype('int32'), []), relay.reshape(call_7211.astype('int32'), [13,]), ), 3)
output = relay.Tuple([call_7211,const_7228,bop_7241,bop_7246,bop_7251,uop_7277,call_7293,call_7329,var_7330,const_7331,])
output2 = relay.Tuple([call_7212,const_7228,bop_7244,bop_7249,bop_7251,uop_7279,call_7294,call_7332,var_7330,const_7331,])
func_7342 = relay.Function([var_7245,var_7250,var_7330,], output)
mod['func_7342'] = func_7342
mod = relay.transform.InferType()(mod)
var_7343 = relay.var("var_7343", dtype = "bool", shape = (9, 8, 12))#candidate|7343|(9, 8, 12)|var|bool
var_7344 = relay.var("var_7344", dtype = "bool", shape = (9, 8, 12))#candidate|7344|(9, 8, 12)|var|bool
var_7345 = relay.var("var_7345", dtype = "float64", shape = (40,))#candidate|7345|(40,)|var|float64
output = func_7342(var_7343,var_7344,var_7345,)
func_7346 = relay.Function([var_7343,var_7344,var_7345,], output)
mutated_mod['func_7346'] = func_7346
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7348 = relay.var("var_7348", dtype = "float32", shape = (8, 2, 8))#candidate|7348|(8, 2, 8)|var|float32
uop_7349 = relay.cos(var_7348.astype('float32')) # shape=(8, 2, 8)
func_2652_call = mod.get_global_var('func_2652')
func_2659_call = mutated_mod.get_global_var('func_2659')
var_7358 = relay.var("var_7358", dtype = "float32", shape = (140, 1))#candidate|7358|(140, 1)|var|float32
const_7359 = relay.const([7.146777,-5.087696,5.291864,1.368263,8.247183,7.319959,-7.590499,-9.581421,3.618724,-9.750675,5.370375,-8.028632,3.331443,-0.506884,3.330568,5.873394,4.921462,2.198346,-3.290534,9.722821,9.612226,2.308697,8.325217,2.285771,-7.021924,6.942712,-0.830597,3.177543,1.327313,4.159120,3.607668,4.817803,-4.801804,-5.989417,2.751569,-4.902217,-0.158641,-4.138539,6.119664,-7.462884], dtype = "float64")#candidate|7359|(40,)|const|float64
const_7360 = relay.const(-1, dtype = "int32")#candidate|7360|()|const|int32
const_7361 = relay.const([10,-1,-3,3,10,-2,-8,-2,9,-3,-5,5,5], dtype = "int32")#candidate|7361|(13,)|const|int32
const_7362 = relay.const([-2,5,-8,-7,5,-10,7,-5,5,8,-3,10,-4,-3,-2,4,3,-8,-8,-2,4,-7,6,-5,-9,6,6,10,-10,-10,5,8,5,-9,-10,7,4,4,6,-2,4,7,-3,1,-1,-8,5,4,-2,7,3,6,6,9,1,6,-9,-7,-1,-8,9,7,-3,-8,-4,-9,-6,6,6,3,7,3,2,10,10,6,-5,-5,-3,-5,7,6,10,-5,-7,2,-10,2,8,-7,-4,-8,-7,-9,-8,-9,-10,-8,5,7,-4,6,5,-9,-3,-1,-1,-4,-4,1,9,6,-3,2,-10,1,-7,9,8,4,6,6,4,8,-5,1,6,-5,-4,10,3,7,10,-3,5,10,5,-3,-6,-9,7,-4,9,-6,6,8,-7,9,-2,8,2,-3,1,-5,4,-9,6,-5,-3,-10,5,8,3,-3,-4,6,-8,10,-4,8,9,-10,1,9,-6,-4,-7,5,4,6,-1,-1,-1,10,-5,5,6,-10,1,-10,8,-8,-8,4,-2,-9,3,2,10,1,-10,3,2,-2,3,-7,-8,4,9,10,-8,-6,7,-5,2,6,2,8,1,4,4,2,10,9,-6,3,-6,-5,1,-1,7,4,7,3,4,1,-3,-9,1,-2,-5,-2,-8,-3,10,9,-3,9,7,-5,3,8,-1,9,-4,-10,8,9,9,-4,-10,-6,-7,1,9,6,6,-8,-2,-8,9,-5,-7,4,8,5,-2,9,8,-7,9,-10,9,1,-6,6,-6,4,-5,1,8,-9,1,-2,-1,-7,-2,7,-7,-3,-9,10,-9,-9,3,-8,-8,-3,-7,7,4,2,2,-9,10,-2,10,2,-6,-6,3,-2,-2,-7,10,1,-9,-1,-2,2,10,-9,-7,4,4,-4,5,-5,3,-8,-9,8,-9,10,7,3,5,-10,3,-8,5,3,10,-4,3,7,-10,9,-1,-1,1,8,6,-10,3,7,10,7,-9,2,-5,-3,3,4,-2,-4,9,-3,-3,3,1,-5,9,10,3,9,10,-2,-7,-8,-1,4,-6,6,-9,7,-10,-10,4,-8,-9,-4,-10,-1,3,6,2,6,8,-9,-1,-7,-9,-10,5,8,7,-5,8,-6,5,-5,-3,-7,10,-5,10,-4,9,2,3,9,3,7,-10,-2,-4,-2,-7,7,4,-10,4,-5,-7,-6,-8,10,-9,-1,-1,-3,-10,-1,5,6,-10,6,-10,8,10,10,10,-9,9,9,-3,-5,9,-1,6,6,4,1,-6,3,-6,6,-3,7,5,1,8,2,-4,4,2,7,5,-2,-8,9,-6,-9,7,2,-4,1,-1,-1,-8,6,-8,-6,8,4,-2,9,7,8,8,8,-3,5,-2,10,3,9,-6,4,4,-3,2,-4,-1,-7,-4,-2,3,-2,4,-6,7,-10,-2,-8,-4,-3,-2,9,1,4,-10,2,-2,10,-6,4,-4,6,-9,-2,-7,3,-4,-5,-8,-2,-5,-6,9,-6,-4,8,-5,2,9,8,1,-5,6,1,9,4,8,-5,-6,1,1,6,4,-7,3,8,9,-10,5,8,-7,-10,-2,1,5,-8], dtype = "uint16")#candidate|7362|(594,)|const|uint16
call_7357 = relay.TupleGetItem(func_2652_call(relay.reshape(var_7358.astype('float32'), [7, 2, 10]), relay.reshape(const_7359.astype('float64'), [40,]), relay.reshape(const_7360.astype('int32'), []), relay.reshape(const_7361.astype('int32'), [13,]), relay.reshape(const_7362.astype('uint16'), [594,]), ), 5)
call_7363 = relay.TupleGetItem(func_2659_call(relay.reshape(var_7358.astype('float32'), [7, 2, 10]), relay.reshape(const_7359.astype('float64'), [40,]), relay.reshape(const_7360.astype('int32'), []), relay.reshape(const_7361.astype('int32'), [13,]), relay.reshape(const_7362.astype('uint16'), [594,]), ), 5)
output = relay.Tuple([uop_7349,call_7357,var_7358,const_7359,const_7360,const_7361,const_7362,])
output2 = relay.Tuple([uop_7349,call_7363,var_7358,const_7359,const_7360,const_7361,const_7362,])
func_7382 = relay.Function([var_7348,var_7358,], output)
mod['func_7382'] = func_7382
mod = relay.transform.InferType()(mod)
var_7383 = relay.var("var_7383", dtype = "float32", shape = (8, 2, 8))#candidate|7383|(8, 2, 8)|var|float32
var_7384 = relay.var("var_7384", dtype = "float32", shape = (140, 1))#candidate|7384|(140, 1)|var|float32
output = func_7382(var_7383,var_7384,)
func_7385 = relay.Function([var_7383,var_7384,], output)
mutated_mod['func_7385'] = func_7385
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7131_call = mod.get_global_var('func_7131')
func_7132_call = mutated_mod.get_global_var('func_7132')
call_7498 = func_7131_call()
call_7499 = func_7131_call()
output = call_7498
output2 = call_7499
func_7502 = relay.Function([], output)
mod['func_7502'] = func_7502
mod = relay.transform.InferType()(mod)
output = func_7502()
func_7503 = relay.Function([], output)
mutated_mod['func_7503'] = func_7503
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6722_call = mod.get_global_var('func_6722')
func_6723_call = mutated_mod.get_global_var('func_6723')
call_7510 = relay.TupleGetItem(func_6722_call(), 0)
call_7511 = relay.TupleGetItem(func_6723_call(), 0)
uop_7515 = relay.log2(call_7510.astype('float32')) # shape=(14, 9, 14)
uop_7517 = relay.log2(call_7511.astype('float32')) # shape=(14, 9, 14)
output = uop_7515
output2 = uop_7517
func_7531 = relay.Function([], output)
mod['func_7531'] = func_7531
mod = relay.transform.InferType()(mod)
output = func_7531()
func_7532 = relay.Function([], output)
mutated_mod['func_7532'] = func_7532
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5593_call = mod.get_global_var('func_5593')
func_5594_call = mutated_mod.get_global_var('func_5594')
call_7560 = relay.TupleGetItem(func_5593_call(), 0)
call_7561 = relay.TupleGetItem(func_5594_call(), 0)
func_5593_call = mod.get_global_var('func_5593')
func_5594_call = mutated_mod.get_global_var('func_5594')
call_7571 = relay.TupleGetItem(func_5593_call(), 0)
call_7572 = relay.TupleGetItem(func_5594_call(), 0)
output = relay.Tuple([call_7560,call_7571,])
output2 = relay.Tuple([call_7561,call_7572,])
func_7576 = relay.Function([], output)
mod['func_7576'] = func_7576
mod = relay.transform.InferType()(mod)
output = func_7576()
func_7577 = relay.Function([], output)
mutated_mod['func_7577'] = func_7577
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6576_call = mod.get_global_var('func_6576')
func_6578_call = mutated_mod.get_global_var('func_6578')
call_7585 = relay.TupleGetItem(func_6576_call(), 2)
call_7586 = relay.TupleGetItem(func_6578_call(), 2)
func_6680_call = mod.get_global_var('func_6680')
func_6681_call = mutated_mod.get_global_var('func_6681')
call_7587 = relay.TupleGetItem(func_6680_call(), 0)
call_7588 = relay.TupleGetItem(func_6681_call(), 0)
const_7597 = relay.const([1,4,-9,2,-9,-1,4,1,3,-3,-2,-2,-8,8,3,8,4,-3,-4,-10,-2,8,-8,-1,-8,4,9,-2,-6,-8,4,2,-9,3,-1,-6,6,10,4,7,-8,-4,6,5,-6,-8,1,2,-4,-5,10,10,7,3,1,-5,-10,5,5,-7,-3,3,4,5,-10,5,-2,-9,-2,10,2,-2,4,-10,7,2,-10,-5,-2,-4,-9,-6,3,9,8,9,-5,-4,-10,10,10,9,-8,-6,-3,5,-1,-2,-6,8,-2,-4,1,8,2,1,9,-4,4,-9,2,10,5,-8,5,-3,-4,-4,6,-8,-7,2,9,-6,8,2,9,5,-4,-5,10,5,-6,1,-8,-2,-8,-4,-2,3,-6,-2,-7,-1,10,1,5,-4,-3,-4,-3,-10,1,-9,-2,3,-7,5,1,-6,-1,3,-3,8,1,8,8,-7,2,2,-8,4,-1,9,6,-5,2,-4,4,-10,-3,10,-8,10,3,-4,8,-6,8,3,1,-2,5,-6,7,5,-6,-1,2,-2,5,7,5,-4,-9,8,2,-2,5,5,4,4,-5,-4,-6,3,4,5,-3,4,-6,1,4,5,1,-3,-2,-7,-2,5,9,7,9,-5,-3,-4,3,6,-1,7,3,-9,7,-1,8,6,5,3,9,6,-6,8,-8,-7,5,10,-3,2,-8,-10,-10,-6,-4,-9,-6,3,-5,-3,5,-9,3,-6,-2,-10,-3,7,-9,-8,-1,-3,2,-2,9,8,-5,-2,-10,-9,-9,3,9,7,2,-10,2,3,-1,1,-10,2,7,8,-4,-10,-3,-9,2,10,-1,8,-4,-9,7,5,-8,5,-2,-5,-9,1,7,-6,-4,-2,7,-10,2,-5,9,6,-6,-5,3,5,4,-6,6,7,-6,-6,-8,5,-6,-8,-2,-2,-5,-7,6,10,1,-10,-6,8,-5,-7,1,-4,-2,-1,5,3,2,-8,-5,10,-2,3,-7,-4,-5,7,2,-4,2,-1,9,-8,-5,9,3,-7,10,-7,-1,1,-1,-4,10,9,1,10,3,3,2,-9,-3,-4,-6,-2,-1,3,-1,-4,2,2,3,-5,10,4,10,-9,-10,6,3,3,2,5,-10,4,-2,7,-8,2,2,2,-1,-5,-3,9,2,9,7,-5,4,-10,8,2,2,6,9,-6,-8,-1,5,-6,-9,8,10,2,-5,-10,2,10,5,-7,-3,-5,5,1,-4,-6,-1,-9,-8,-7,-7,-5,-9,2,1,10,-6,5,9,-1,1,7,2,5,9,2,-8,-5,-1,3,-8,-4,-6,-6,-4,-7,6,9,2,-7,-5,-6,-5,-2,-10,8,7,-2,2,-9,9,-1,10,5,3,4,3,5,-3,-6,-1,10,-8,-3,2,-7,8,8,-8,-1,-4,-3,4,-5,-4,-7,5,4,-2,4,-9,-5,-10,6,-5,-3,1,-4,-3,-2,-7,-5,-6,6,8,-2,-2,5,-1,2,-9,2,10,-4,4,1,7,-4,6,3,-1,-2,-3,6,9,7,-4,7,5,-8,-9,10,6,-9,5,6,-6,-10,-5,-2,-6,-10,7,4,-1,9,-1,6,-3,2,8,6,6,4,2,-4,4,-9,-5,1,5,-8,8,-6,10,1,-5,3,-2,-1,-2,3,2,4,-4,3,-6,-8,4,7,1,3,4,-7,4,1,4,-1,7,-6,-2,-2,2,3,3,2,-6,10,-1,-8,-5,-1,4,-7,-7,4,2,8,-6,-9,-8,3,-6,-6,9,1,5,-5,4,-2,5,-10,3,-10,-6,-6,-10,10,3,2,-2,-8,-5,-7,-6,-9,6,7,-7,8,8,10,6,-7,-6,1,-3,4,-3,-8,2,8,-7,9,4,9,-5,3,7,-10,-8,-2,1,1,-8,1,-4,-10,-5,-7,10,4,-3,9,-6,2,2,-7,1,-7,4,-9,-8,-1,9,6,2,-7,9,-4,6,1,1,3,5,-10,-7,-7,-7,-1,-6,8,-7,10,2,2,-1,8,-2,-3,10,-6,-2,5,1,8,3,5,4,7,-9,-5,-4,2,7,-1,-7,-5,9,-8,8,-10,-5,-2,-10,4,9,-2,6,9,7,10,8,-3,-7,-1,-9,7,-6,3,-7,-7,-8,-1,3,8,1,-6,-3,-6,-9,7,-8,4,-3,-1,-3,9,9,6,2,-4,1,-10,8,-7,4,7,-8,5,-7,2,-7,1,-2,10,10,7,-3,-6,-4,7,6,-8,-6,-8,1,1,2,6,9,-10,-1,8,3,-6,-8,-4,9,-1,-7,8,-8,8,10,-3,-1,8,9,9,-2,8,-9,4,-4,-3,-3,-9,-9,-8,10,-8,6,6,-3,-9,7,5,-10,4,-4,-7,7,6,2,6,9,6,1,-3,4,-9,1,-6,1,-7,8,-1,-9,-2,-5,4,4,1,1,-8,-8,-7,-9,10,-7,-6,-10,-2,8,-9,-4,-6,4,-2,3,-1,8,-10,4,-10,6,6,5,-2,-1,5,-5,-4,10,5,7,-4,5,-4,3,-8,10,-4,1,1,8,-9,-8,-1,8,-4,1,2,4,-5,-1,-8,8,-9,10,10,5,1,2,-4,8,-7,-7,-3,6,10,2,10,1,-6,7,-9,7,6,1,-10,-9,8,-8,9,-10,1,8,-9,-9,8,-2,8,8,-9,-5,8,7,-2,-6,9,9,-5,1,5,-10,10,1,-3,4,-6,2,5,-9,-4,-7,2,-5,4,-2,10,2,-5,-7,-10,10,-2,-1,4,3,8,3,9,-8,5,-1,-3,2,8,6,-2,5,9,-10,-9,-10,-6,-8,10,9,-9,10,-5,-9,4,2,-2,-10,6,-5,-7,-3,-10,8,-8,-7,7,-8,10,7,5,-9,-8,-9,9,9,-10,8,5,2,-3,10,-6,6,6,-9,-5,-9,7,9,-1,-3,3,3,-7,1,3,4,10,7,-3,8,-5,3,4,-10,-10,-9,4,1,6,5,-1,-3,7,6,6,-8,-10,5,-2,-10,7,5,1,5,8,-9,9,10,1,5,-10,8,-5,6,5,-2,-7,-6,-5,-8,-2,-9,-10,-4,5,-6,-4,8,7,-1,-2,-9,-9,9,-7,-6,3,-8,6,-4,5,7,6,1,9,-10,-4,-2,-1,9,-8,-6,10,-6,8,-9,-1,4,-2,-3,-6,6,1,5,8,9,-8,-1,-9,-7,6,-1,4,6,-2,-9,-3,10,-2,5,8,-10,-9,7,7,-8,-1,1,6,-1,8,7,-4,3,-2,8,4,-8,-8,-4,8,7,3,-5,5,7,4,5,3,-6,8,-6,-3,-5,7,5,1,7,9,-3,7,-8,-6,-1,-10,-5,-2,-9,3,-3,5,-10,-9,10,-10,-2,5,-8,-10,-1,5,-9,6,9,3,-2,1,3,-8,5,8,-4,5,5,10,-6,-1,-1,2,-6,3,3,9,-1,-3,-6,-6,-3,2,-8,3,7,-10,2,-8,9,6,5,-2,-4,-7,-3,1,-3,5,5,-7,3,-9,-9,5,10,2,9,-4,-8,-3,1,8,-9,5,-10,-4,-10,-9,-2,9,-6,-9,-6,7,-3,6,8,-10,-6,9,-9,-10,-8,10,-5,-1,-1,-7,-3,-4,7,-4,3,-2,-1,4,7,-1,-6,4,1,4,6,-2,8,-9,5,1,-7,4,7,-10,-3,-7,3,2,-7,-9,-10,5,-6,-4,-6,-6,10,-1,-1,9,-3,4,-10,-1,3,-3,10,10,2,6,10,1,3,9,2,-9,-6,2,-7,4,-4,2,5,-9,-5,5,8,-7,9,-6,-6,7,-5,-10,3,-4,-1,10,-8,4,-5,-1,6,-5,-6,5,5,3,-2,-4,-7,9,-5,-5,-9,8,-10,6,-9,-1,1,4,-10,6,10,-7,8,-6,-7,6,1,-10,1,9,7,4,7,-4,6,9,7,4,3,8,10,6,6,-4,-1,8,4,8,1,-10,-9,3,-6,1,7,-7,-3,-8,-8,7,-7,9,-6,-5,-8,-4,-4,3,5,7,-5,-7,-9,9,-1,-1,9,10,-9,-2,9,-4,-4,1,2,9,4,10,-3,3,3,-2,3,8,8,7,-8,8,-9,-1,-9,-10,6,-6,-9,5,-2,4,1,-7,4,6,-4,-3,-5,4,5,-7,-6,-2,-2,6,-5,9,-4,5,-10,-9,-5,-9,-9,4,-1,-4,4,3,-4,9,-9,5,7,-1,-3,3,-7,10,-7,1,-3,-6,-3,-2,8,-8,4,-2,5,7,-8,-6,5,2,-10,2,9,2,-7,-1,-8,3,2,2,-1,-3,-9,5,-7,-8,9,2,-9,10,-9,-2,9,8,3,7,6,2,-1,3,-3,4,-2,9,-1,7,9,-6,7,10,-1,-3,-6,-6,3,4,-10,-7,7,4,-3,7,-2,-2,6,-8,-6,-5,7,1,1,-5,6,-5,-8,-2,-2,4,-1,-5,-8,-3,6,-9,9,5,7,-5,2,7,-9,-10,5,6,-10,-2,-6,3,1,6,-3,-4,-3,-3,-6,-4,9,-5,7,2,-2,8,-7,1,6,-2,10,-9,-4,5,-5,7,2,10,-3,1,-7,5,-1,-4,4,5,-1,-7,7,6,-1,-7,7,6,-10,-7,-5,2,1,-2,1,8,-2,-8,-7,2,-9,2,-8,8,-5,-6,-9,8,-2,4,-10,7,7,4,2,-3,6,-7,-6,-2,-1,-3,7,-10,-4,4,9,7,-9,-2,-6,1,2,6,-4,3,9,4,9,-4,-10,-8,-4,-5,-7,-3,1,7,-2,3,3,1,-2,-7,1,-6,4,10,-9,8,-3,1,4,9,-2,4,-10,9,-2,-5,-10,5,-2,-1,-1,9,1,-8,-9,-3,-9,8,5,-1,4,9,-4,-7,1,-9,8,-8,1,3,3,3,-6,1,-8,6,8,-5,2,-1,1,-7,2,-7,-1,3,6,-6,-8,-4,9,8,7,-10,-9,-4,-2,9,-6,5,7,-1,-7,-7,-4,-9,1,10,3,7,-10,-2,9,6,-10,-5,2,-1,-3,-2,-7,7,2,-4], dtype = "int16")#candidate|7597|(1890,)|const|int16
bop_7598 = relay.bitwise_xor(call_7587.astype('int16'), relay.reshape(const_7597.astype('int16'), relay.shape_of(call_7587))) # shape=(1890,)
bop_7601 = relay.bitwise_xor(call_7588.astype('int16'), relay.reshape(const_7597.astype('int16'), relay.shape_of(call_7588))) # shape=(1890,)
output = relay.Tuple([call_7585,bop_7598,])
output2 = relay.Tuple([call_7586,bop_7601,])
func_7614 = relay.Function([], output)
mod['func_7614'] = func_7614
mod = relay.transform.InferType()(mod)
mutated_mod['func_7614'] = func_7614
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7614_call = mutated_mod.get_global_var('func_7614')
call_7615 = func_7614_call()
output = call_7615
func_7616 = relay.Function([], output)
mutated_mod['func_7616'] = func_7616
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7531_call = mod.get_global_var('func_7531')
func_7532_call = mutated_mod.get_global_var('func_7532')
call_7626 = func_7531_call()
call_7627 = func_7531_call()
func_3184_call = mod.get_global_var('func_3184')
func_3187_call = mutated_mod.get_global_var('func_3187')
var_7629 = relay.var("var_7629", dtype = "int8", shape = (36, 16))#candidate|7629|(36, 16)|var|int8
const_7630 = relay.const([1,8,10,1,7,6,10,1,7,-6,-10,8,2,6,7,9,-3,3,5,1,-5,-6,-8,-6,-2,-8,7,-2,-10,-4,-6,-4,-4,-2,-2,-10,2,2,2,-7,-10,-7,-4,7,-7,-8,6,4,10,8,1,-1,-4,2,-2,-10,-5,1,-8,-3,3,-10,7,8,9,1,4,2,-4,-1,5,-1,10,2,-2,3,-8,4,-4,-3,10,3,-6,1,-1,-8,-6,7,-1,-2,-3,10,-5,-5,1,-3,1,-5,3,7,-8,10,-4,-8,5,-1,4,-2,-8,-9,4,-9,10,-4,-8,6,-5,-10,5,-7,-7,-1,-10,1,1,-8,-3,-1,-1,-7,5,-4,2,-1,-1,9,7,-8,-4,-8,10,9,-2,-6,3,-1,7,-1,9,-5,-2,-8,-4,-9,-7,3,-2,-1,-1,9,-10,-4,-8,-5,-9,-9,5,-2,-8,-9,-8,10,-3,8,8,1,10,5,10,-8,2,-10,9,-8,-4,9,9,6,2,7,-3,-10,-4,2,-6,-5,-2,-3,-8,7,8,-6,7,1,3,-3,-6,1,7,6,-6,2,-7,-8,-8,6,2,2,-3,-1,1,-3,9,9,-7,-1,-7,2,8,8,6,-9,-8,-8,-6,-7,6,-7,4,-1,2,-6,3,-2,10,4,-6,4,7,-2,4,-1,-9,-3,4,-8,6,-5,3,-1,-7,-1,-9,6,-1,-1,8,-5,-10,-4,4,3,5,10,-5,-3,5,5,8,-2,-10,4,-6,-8,9,3,1,5,3,-6,-8,1,10,9,-7,-9,-5,8,-3,-8,-6,8,-6,-7,-8,-5,9,-10,-2,-9,2,-8,2,-8,10,-9,-4,8,-8,9,6,-2,10,6,-3,-2,4,1,6,4,3,4,10,9,9,-6,10,1,-2,-3,-3,-7,5,-6,-5,-6,-4,8,-4,-4,3,-7,-9,-6,-7,-5,3,9,10,-8,-6,7,-7,-3,-2,-6,-8,9,-3,-8,3,3,5,-4,9,-4,-8,-6,4,8,8,-2,-8,4,7,4,-5,-5,-2,7,-3,-10,-10,6,8,1,-7,-4,5,6,2,-1,10,-7,-7,6,5,-10,10,10,-7,6,3,1,-10,9,9,-8,6,-1,-2,-2,1,-4,6,-1,-5,9,10,8,-6,-1,5,-6,-7,-3,-4,-7,-4,7,3,5,6,-7,-3,-6,2,-8,9,7,10,6,-4,8,2,-8,-3,6,-6,-6,8,1,-9,8,-2,-3,-4,6,-2,3,-8,-10,3,-10,8,9,-6,-7,-7,3,7,-2,5,-8,2,10,4,1,-5,-8,7,-1,8,-1,1,4,2,-3,-4,5,-4,-8,-6,-8,1,5,3,-2,4,-6,7,-4,-8,5,8,1,-4,2,7,-2,8,-6,-3,-4,4,-1,3,-10,-4,6,7,-6,4,3,-10,10,4,10,8,4,7,-3,-5,-1,1,3,-5,-1,8,2,10,-7,10,2,5,-2,-3,1,1,7,1,10,-10,5,-6,8,-1,-10,6,10,8,-2,-6,-7,8,9,-3,-3,9,-10,7,2,-5,-8,4,2,10,3,10,-3,3,6,-10,-6], dtype = "uint16")#candidate|7630|(594,)|const|uint16
call_7628 = relay.TupleGetItem(func_3184_call(relay.reshape(var_7629.astype('int8'), [4, 12, 12]), relay.reshape(const_7630.astype('uint16'), [594,]), ), 1)
call_7631 = relay.TupleGetItem(func_3187_call(relay.reshape(var_7629.astype('int8'), [4, 12, 12]), relay.reshape(const_7630.astype('uint16'), [594,]), ), 1)
var_7640 = relay.var("var_7640", dtype = "int8", shape = (36, 16))#candidate|7640|(36, 16)|var|int8
bop_7641 = relay.floor_divide(var_7629.astype('float32'), relay.reshape(var_7640.astype('float32'), relay.shape_of(var_7629))) # shape=(36, 16)
func_6680_call = mod.get_global_var('func_6680')
func_6681_call = mutated_mod.get_global_var('func_6681')
call_7652 = relay.TupleGetItem(func_6680_call(), 0)
call_7653 = relay.TupleGetItem(func_6681_call(), 0)
func_1085_call = mod.get_global_var('func_1085')
func_1089_call = mutated_mod.get_global_var('func_1089')
const_7673 = relay.const([-10,8,3,-7,6,-10,-3,4,-9,-2,5,-3,-3,-3,-7,-7,-9,8,2,9,-1,2,5,5,3,1,5,5,2,-4,-10,-4,5,-1,7,4,-10,-4,-4,-1,6,-7,7,8,-9,8,5,-8,-6,-7,10,5,-10,5,7,3,9,4,-3,5,9,3,9,-6,2,-2,-7,-2,-5,2,-4,-7,8,-9,8,-3,9,-2,-7,5,-4,-4,3,1,-7,-4,-10,2,-4,7,4,8,-5,-4,-3,-4,8,-9,5,1,-2,3,-5,8,-7,-3,6,-6,4,-3,-1,-3,4,9,3,-1,4,7,-10,-1,1,-8,5,-5,-6,-7,5,7,3,9,8,9,6,3,10,-1,-8,-7,4,4,-2,8,-1,7,1,-8,-5,-10,4,5,7,-6,-6,10,4,-10,4,-4,-1,9,-6,-10,5,-2,-3,-2,6,7,-8,9,-10,-10,7,7,4,1,-2,-1,-2,5,-1,-8,-4,8,-2,6,6,-4,2,10,-9,4,-3,-10,9,2,2,-8,5,-8,2,6,-2,10,4,-9,-2,-6,-7,10,2,5,-2,-10,-8,-3,-4,8,-1,-9,-2,-2,1,-9,-6,6,1,-4,4,-9,4,-3,-2,4,3,2,4,-10,-2,5,6,-10,3,-9,9,1,7,-2,7,4,-1,-5,-8,10,-2,2,6,-6,-5,6,-2,-7,-1,9,9,9,-10,5,-9,-10,9,2,3,4,4,1,-7,6,1,9,1,-10,-2,8,9,6,-9,5,6,-9,-1,8,-1,7,2,-10,4,3,-4,-1,9,2,4,10,-9,4,-9,8,-9,-10,1,-5,9,-4,10,-7,-1,-7,-8,-8,-5,-7,-5,2,9,6,-3,6,-2,6,-6,-9,2,1,-2,-9,1,1,10,-1,-5,-9,-1,-2,-5,-3,1,-7,9,-5,9,7,-9,-8,-2,-7,10,-5,1,4,-6,-9,10,-2,-6,-9,10,-8,4,9,7,-3,2,-9,-7,-2,-1,-10,9,-9,8,3,-6,8,-5,8,-2,10,-10,6,-2,-10,9,4,-9,-4,-3,-4,6,-2,10,-6,10,-6,-4,8,1,9,-8,-8,7,4,9,-2,-4,7,-4,-6,-8,7,-5,8,-2,5,-1,9,-5,10,2,10,-4,-2,1,-3,10,-10,4,8,8,-10,-6,-7,-1,-8,10,-1,-6,-5,10,-3,9,-5,3,10,9,-10,-8,-10,7,4,-6,2,-9,-7,4,-9,-5,-5,-2,-2,7,-7,-1,4,5,-5,-4,-2,-3,-1], dtype = "uint32")#candidate|7673|(480,)|const|uint32
call_7672 = relay.TupleGetItem(func_1085_call(relay.reshape(const_7673.astype('uint32'), [5, 16, 6]), relay.reshape(const_7673.astype('uint32'), [5, 16, 6]), ), 0)
call_7674 = relay.TupleGetItem(func_1089_call(relay.reshape(const_7673.astype('uint32'), [5, 16, 6]), relay.reshape(const_7673.astype('uint32'), [5, 16, 6]), ), 0)
bop_7692 = relay.multiply(const_7630.astype('uint64'), relay.reshape(call_7628.astype('uint64'), relay.shape_of(const_7630))) # shape=(594,)
bop_7695 = relay.multiply(const_7630.astype('uint64'), relay.reshape(call_7631.astype('uint64'), relay.shape_of(const_7630))) # shape=(594,)
func_6576_call = mod.get_global_var('func_6576')
func_6578_call = mutated_mod.get_global_var('func_6578')
call_7696 = relay.TupleGetItem(func_6576_call(), 0)
call_7697 = relay.TupleGetItem(func_6578_call(), 0)
func_119_call = mod.get_global_var('func_119')
func_123_call = mutated_mod.get_global_var('func_123')
const_7700 = relay.const(-10, dtype = "int32")#candidate|7700|()|const|int32
var_7701 = relay.var("var_7701", dtype = "int32", shape = (1, 13))#candidate|7701|(1, 13)|var|int32
call_7699 = relay.TupleGetItem(func_119_call(relay.reshape(const_7700.astype('int32'), []), relay.reshape(var_7701.astype('int32'), [13, 1]), ), 0)
call_7702 = relay.TupleGetItem(func_123_call(relay.reshape(const_7700.astype('int32'), []), relay.reshape(var_7701.astype('int32'), [13, 1]), ), 0)
func_6722_call = mod.get_global_var('func_6722')
func_6723_call = mutated_mod.get_global_var('func_6723')
call_7703 = relay.TupleGetItem(func_6722_call(), 0)
call_7704 = relay.TupleGetItem(func_6723_call(), 0)
uop_7706 = relay.erf(var_7640.astype('float64')) # shape=(36, 16)
output = relay.Tuple([call_7626,bop_7641,call_7652,call_7672,const_7673,bop_7692,call_7696,call_7699,const_7700,var_7701,call_7703,uop_7706,])
output2 = relay.Tuple([call_7627,bop_7641,call_7653,call_7674,const_7673,bop_7695,call_7697,call_7702,const_7700,var_7701,call_7704,uop_7706,])
func_7709 = relay.Function([var_7629,var_7640,var_7701,], output)
mod['func_7709'] = func_7709
mod = relay.transform.InferType()(mod)
mutated_mod['func_7709'] = func_7709
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7709_call = mutated_mod.get_global_var('func_7709')
var_7711 = relay.var("var_7711", dtype = "int8", shape = (36, 16))#candidate|7711|(36, 16)|var|int8
var_7712 = relay.var("var_7712", dtype = "int8", shape = (36, 16))#candidate|7712|(36, 16)|var|int8
var_7713 = relay.var("var_7713", dtype = "int32", shape = (1, 13))#candidate|7713|(1, 13)|var|int32
call_7710 = func_7709_call(var_7711,var_7712,var_7713,)
output = call_7710
func_7714 = relay.Function([var_7711,var_7712,var_7713,], output)
mutated_mod['func_7714'] = func_7714
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7758 = relay.var("var_7758", dtype = "float32", shape = (9, 2, 1))#candidate|7758|(9, 2, 1)|var|float32
var_7759 = relay.var("var_7759", dtype = "float32", shape = (9, 2, 1))#candidate|7759|(9, 2, 1)|var|float32
bop_7760 = relay.floor_divide(var_7758.astype('float32'), relay.reshape(var_7759.astype('float32'), relay.shape_of(var_7758))) # shape=(9, 2, 1)
output = bop_7760
output2 = bop_7760
func_7764 = relay.Function([var_7758,var_7759,], output)
mod['func_7764'] = func_7764
mod = relay.transform.InferType()(mod)
mutated_mod['func_7764'] = func_7764
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7764_call = mutated_mod.get_global_var('func_7764')
var_7766 = relay.var("var_7766", dtype = "float32", shape = (9, 2, 1))#candidate|7766|(9, 2, 1)|var|float32
var_7767 = relay.var("var_7767", dtype = "float32", shape = (9, 2, 1))#candidate|7767|(9, 2, 1)|var|float32
call_7765 = func_7764_call(var_7766,var_7767,)
output = call_7765
func_7768 = relay.Function([var_7766,var_7767,], output)
mutated_mod['func_7768'] = func_7768
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7775 = relay.var("var_7775", dtype = "int8", shape = (3, 7, 10))#candidate|7775|(3, 7, 10)|var|int8
const_7776 = relay.const([[[6,-8,-1,2,-3,-4,-7,-6,-7,-1],[7,-10,3,4,2,-9,-1,5,-1,5],[-10,-7,-6,-5,7,1,9,8,7,7],[7,8,-2,1,2,9,5,-8,-10,3],[-1,9,8,-2,-9,-2,5,-4,5,-2],[1,8,9,4,10,-5,4,1,-1,-6],[-3,5,-2,-7,-6,5,-2,1,10,-1]],[[5,-3,9,-2,8,9,8,-9,6,-9],[-7,-8,-7,10,-6,-2,-6,1,-7,-4],[-3,-6,10,3,-1,8,5,7,-5,-3],[-8,4,-8,-7,-10,-1,7,-7,-5,3],[-1,4,-5,1,-7,-2,9,-7,3,-3],[-7,9,4,-1,4,-4,4,-2,10,2],[-8,-4,-10,-6,-7,7,5,-7,2,7]],[[3,1,-1,10,-6,1,-5,-3,-6,-10],[-7,-6,-5,-5,-5,10,-6,-7,4,10],[-8,-6,-6,1,-5,4,2,-8,4,-3],[-6,7,6,10,-1,-1,-1,-3,-5,8],[7,-4,1,5,5,-4,-3,-4,-5,10],[-5,5,10,-3,-6,7,-3,4,4,7],[9,2,-2,-10,1,3,5,-9,9,1]]], dtype = "int8")#candidate|7776|(3, 7, 10)|const|int8
bop_7777 = relay.greater(var_7775.astype('bool'), relay.reshape(const_7776.astype('bool'), relay.shape_of(var_7775))) # shape=(3, 7, 10)
func_6344_call = mod.get_global_var('func_6344')
func_6345_call = mutated_mod.get_global_var('func_6345')
call_7780 = func_6344_call()
call_7781 = func_6344_call()
output = relay.Tuple([bop_7777,call_7780,])
output2 = relay.Tuple([bop_7777,call_7781,])
func_7789 = relay.Function([var_7775,], output)
mod['func_7789'] = func_7789
mod = relay.transform.InferType()(mod)
var_7790 = relay.var("var_7790", dtype = "int8", shape = (3, 7, 10))#candidate|7790|(3, 7, 10)|var|int8
output = func_7789(var_7790)
func_7791 = relay.Function([var_7790], output)
mutated_mod['func_7791'] = func_7791
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7071_call = mod.get_global_var('func_7071')
func_7072_call = mutated_mod.get_global_var('func_7072')
call_7803 = func_7071_call()
call_7804 = func_7071_call()
func_6498_call = mod.get_global_var('func_6498')
func_6500_call = mutated_mod.get_global_var('func_6500')
call_7811 = func_6498_call()
call_7812 = func_6498_call()
output = relay.Tuple([call_7803,call_7811,])
output2 = relay.Tuple([call_7804,call_7812,])
func_7818 = relay.Function([], output)
mod['func_7818'] = func_7818
mod = relay.transform.InferType()(mod)
output = func_7818()
func_7819 = relay.Function([], output)
mutated_mod['func_7819'] = func_7819
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6184_call = mod.get_global_var('func_6184')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_7854 = relay.TupleGetItem(func_6184_call(), 1)
call_7855 = relay.TupleGetItem(func_6186_call(), 1)
func_7818_call = mod.get_global_var('func_7818')
func_7819_call = mutated_mod.get_global_var('func_7819')
call_7863 = relay.TupleGetItem(func_7818_call(), 1)
call_7864 = relay.TupleGetItem(func_7819_call(), 1)
uop_7872 = relay.asin(call_7863.astype('float64')) # shape=(14, 9, 14)
uop_7874 = relay.asin(call_7864.astype('float64')) # shape=(14, 9, 14)
output = relay.Tuple([call_7854,uop_7872,])
output2 = relay.Tuple([call_7855,uop_7874,])
func_7877 = relay.Function([], output)
mod['func_7877'] = func_7877
mod = relay.transform.InferType()(mod)
mutated_mod['func_7877'] = func_7877
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7877_call = mutated_mod.get_global_var('func_7877')
call_7878 = func_7877_call()
output = call_7878
func_7879 = relay.Function([], output)
mutated_mod['func_7879'] = func_7879
mutated_mod = relay.transform.InferType()(mutated_mod)
const_7884 = relay.const([[[-1.649293,-0.547588,4.277052],[-4.121957,3.365777,8.307042],[-9.658322,-7.811182,0.771107],[-9.830295,7.557220,-7.424365],[-1.612235,3.668918,6.378570],[1.302713,-6.750419,8.569814],[-5.205693,3.997299,3.947114],[-7.336282,-5.855600,-0.350184],[6.103622,-9.954001,1.877642],[-2.756419,9.301523,4.704879],[-1.957040,-6.873871,5.372720],[1.562137,-2.497922,4.554476],[6.420632,6.593939,-8.302437],[5.098049,3.729961,-8.629040],[-8.450950,-2.078112,-5.949694]],[[-2.727389,-8.534765,6.450628],[-2.249287,3.768791,-6.569746],[-6.488865,-9.606809,4.401179],[3.367555,0.346516,5.965763],[3.330726,-7.544315,7.615191],[-7.170775,1.072498,-0.648787],[-8.532882,7.969658,4.594687],[-6.814810,7.509932,-5.148870],[4.967585,1.269322,-5.243384],[-3.668618,-6.016647,1.812381],[7.797484,3.706263,1.969858],[5.846609,-1.801178,9.378756],[-2.609906,-1.962774,7.080314],[8.891243,-4.148783,9.497538],[9.092651,0.159242,-7.141809]],[[6.589445,-1.372149,-0.624771],[-1.222860,2.623887,3.514230],[9.732348,-6.513357,7.615468],[-2.783331,-2.228614,-3.739659],[3.978980,0.129091,0.368551],[3.080440,2.942662,-6.906657],[1.515922,7.529808,8.491230],[-7.815248,6.137498,-1.258322],[-4.471457,5.080307,-9.228919],[-8.567937,4.152324,-3.200354],[6.967616,8.564224,4.894255],[-3.425365,-8.949508,9.036123],[-0.480475,-6.764241,-0.649065],[5.232007,9.432347,4.489171],[-5.334719,0.340058,6.489244]]], dtype = "float64")#candidate|7884|(3, 15, 3)|const|float64
uop_7885 = relay.atanh(const_7884.astype('float64')) # shape=(3, 15, 3)
uop_7890 = relay.cos(uop_7885.astype('float64')) # shape=(3, 15, 3)
bop_7897 = relay.less(uop_7890.astype('bool'), relay.reshape(uop_7885.astype('bool'), relay.shape_of(uop_7890))) # shape=(3, 15, 3)
output = relay.Tuple([bop_7897,])
output2 = relay.Tuple([bop_7897,])
func_7900 = relay.Function([], output)
mod['func_7900'] = func_7900
mod = relay.transform.InferType()(mod)
mutated_mod['func_7900'] = func_7900
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7900_call = mutated_mod.get_global_var('func_7900')
call_7901 = func_7900_call()
output = call_7901
func_7902 = relay.Function([], output)
mutated_mod['func_7902'] = func_7902
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7922 = relay.var("var_7922", dtype = "float32", shape = (6, 10, 16))#candidate|7922|(6, 10, 16)|var|float32
uop_7923 = relay.asin(var_7922.astype('float32')) # shape=(6, 10, 16)
uop_7943 = relay.log2(uop_7923.astype('float32')) # shape=(6, 10, 16)
func_5833_call = mod.get_global_var('func_5833')
func_5836_call = mutated_mod.get_global_var('func_5836')
const_7947 = relay.const([False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,False,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,True,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False], dtype = "bool")#candidate|7947|(1764,)|const|bool
call_7946 = func_5833_call(relay.reshape(const_7947.astype('bool'), [14, 9, 14]))
call_7948 = func_5833_call(relay.reshape(const_7947.astype('bool'), [14, 9, 14]))
output = relay.Tuple([uop_7943,call_7946,const_7947,])
output2 = relay.Tuple([uop_7943,call_7948,const_7947,])
func_7951 = relay.Function([var_7922,], output)
mod['func_7951'] = func_7951
mod = relay.transform.InferType()(mod)
mutated_mod['func_7951'] = func_7951
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7952 = relay.var("var_7952", dtype = "float32", shape = (6, 10, 16))#candidate|7952|(6, 10, 16)|var|float32
func_7951_call = mutated_mod.get_global_var('func_7951')
call_7953 = func_7951_call(var_7952)
output = call_7953
func_7954 = relay.Function([var_7952], output)
mutated_mod['func_7954'] = func_7954
mutated_mod = relay.transform.InferType()(mutated_mod)
const_7960 = relay.const([[[False,False,False,True,False,True,True,True,True,True,True,False,True,True,True],[False,False,False,False,False,True,True,False,True,False,True,True,True,True,True],[False,True,False,False,False,False,True,True,True,True,False,False,True,True,True],[True,False,True,True,False,True,False,True,True,True,True,False,False,True,True],[False,True,False,False,True,True,False,True,False,True,False,True,True,True,False],[False,False,False,True,True,True,False,True,False,True,True,False,True,True,True],[False,True,False,False,True,True,True,True,False,False,False,False,True,True,False],[True,True,False,False,False,False,True,False,True,True,True,False,True,False,False],[False,False,True,False,True,True,False,False,False,False,False,True,True,True,False],[True,True,False,True,True,False,True,False,True,True,True,False,True,True,True],[True,True,True,True,False,False,False,False,True,False,False,True,True,True,True]],[[False,False,False,False,False,True,False,True,True,True,False,False,False,False,True],[True,True,True,False,False,True,True,False,True,False,True,True,True,False,True],[False,False,True,False,False,True,True,True,True,False,False,True,True,False,True],[False,True,True,True,False,True,False,True,False,True,True,True,True,False,True],[False,True,False,True,True,False,True,True,True,False,True,False,True,False,False],[True,True,False,False,False,False,True,True,True,True,False,False,False,True,False],[False,True,True,False,True,True,False,False,False,False,False,True,False,True,False],[False,False,True,False,False,True,False,False,False,True,True,True,True,False,False],[False,False,False,True,False,True,False,False,True,False,False,True,False,False,False],[False,True,True,True,True,True,False,False,True,True,True,True,False,True,True],[False,True,True,False,False,True,True,True,True,False,True,False,True,True,False]],[[False,True,True,True,False,True,False,True,True,False,False,False,True,False,True],[False,False,False,True,True,True,False,False,False,True,True,True,True,False,True],[False,False,False,True,True,True,False,False,False,True,False,False,False,True,False],[True,True,False,False,False,True,True,False,False,True,True,True,False,True,True],[True,True,False,False,False,True,True,True,True,True,False,True,True,False,False],[True,False,True,True,False,True,True,True,True,True,False,True,False,False,False],[True,False,True,True,False,True,True,True,False,False,False,True,False,True,True],[False,False,True,False,True,True,True,False,False,True,True,False,False,True,True],[False,True,True,True,False,True,False,True,False,True,False,False,False,False,True],[True,False,True,True,False,False,False,False,True,True,True,False,True,True,False],[False,True,True,True,False,True,False,False,True,False,True,True,False,True,True]],[[True,True,True,False,False,False,True,False,False,False,True,True,False,True,False],[False,True,True,True,True,True,True,True,True,False,False,True,True,False,False],[False,False,True,True,False,True,True,True,False,True,True,True,False,False,False],[False,False,False,True,False,True,False,True,False,False,True,False,True,False,True],[True,False,True,True,True,True,False,True,True,False,False,False,False,True,False],[False,True,True,False,True,True,True,True,False,False,True,True,False,False,True],[True,False,True,False,True,False,False,True,True,True,False,False,True,False,True],[False,False,False,True,True,True,False,False,True,False,False,False,True,True,True],[False,False,True,True,True,False,True,True,True,True,False,True,True,True,True],[False,True,False,False,False,True,False,False,True,True,False,False,True,True,True],[False,True,True,True,False,False,True,False,True,True,True,True,False,False,True]]], dtype = "bool")#candidate|7960|(4, 11, 15)|const|bool
const_7961 = relay.const([[[False,False,False,False,True,True,False,True,False,True,False,False,True,True,True],[True,True,True,True,True,True,False,True,True,True,False,False,False,False,True],[False,False,False,False,True,True,True,True,False,True,True,False,False,False,False],[True,True,True,False,False,False,False,True,False,True,False,False,True,False,True],[True,False,True,True,False,False,False,True,False,False,True,True,True,True,True],[True,False,False,False,True,True,False,True,False,False,False,False,True,True,True],[False,False,True,True,True,False,False,True,True,False,False,False,True,True,True],[False,False,False,False,False,True,True,False,False,True,True,False,False,False,True],[True,False,False,False,True,True,False,True,True,False,True,True,False,False,False],[False,False,False,False,True,False,True,False,False,True,False,True,True,False,True],[False,True,True,False,True,True,False,False,False,True,False,False,False,False,False]],[[False,False,True,False,False,False,False,True,False,False,False,False,False,True,False],[True,False,True,True,False,True,False,False,True,False,True,True,False,True,True],[True,True,False,False,True,False,False,True,False,False,False,False,True,False,False],[True,True,False,True,False,False,False,False,True,True,True,False,False,True,False],[True,False,True,True,False,True,False,False,False,False,True,False,False,False,False],[False,True,False,False,False,False,True,False,True,False,True,False,False,True,True],[False,True,False,False,False,False,True,False,True,True,False,False,False,True,False],[False,True,True,False,False,False,True,True,False,False,True,False,False,True,True],[True,False,False,True,False,True,False,True,True,True,False,False,True,False,True],[True,True,False,False,True,False,False,False,True,True,False,False,True,False,False],[False,False,False,True,True,False,False,True,True,True,False,True,True,True,False]],[[False,False,True,True,True,False,True,True,True,True,False,True,True,True,False],[True,False,False,True,True,True,True,True,True,False,False,True,False,False,True],[False,False,True,True,True,False,True,True,False,False,False,False,False,True,False],[False,True,False,False,False,True,True,False,False,False,False,False,False,False,False],[True,False,True,False,True,False,True,True,True,True,True,True,True,True,True],[True,True,False,True,True,False,False,True,False,False,True,True,True,True,True],[True,False,False,False,True,True,True,False,False,False,True,False,False,False,True],[True,False,True,True,True,False,True,False,True,False,False,True,True,True,False],[False,True,True,False,True,False,False,False,False,False,True,True,False,True,True],[False,False,True,True,True,True,True,False,True,True,False,True,False,True,True],[False,False,False,True,False,True,True,False,False,True,True,True,False,True,False]],[[False,True,False,True,False,True,False,False,True,True,True,False,True,True,True],[False,True,True,False,True,False,True,False,False,True,False,True,False,False,True],[False,False,False,False,False,True,True,False,True,True,False,False,True,True,True],[False,True,False,False,True,True,False,False,False,False,False,False,False,False,False],[True,True,True,True,True,True,False,True,True,True,False,True,True,True,False],[False,True,True,True,True,False,False,True,True,False,False,True,False,False,True],[True,True,False,False,False,False,True,True,True,False,False,True,False,False,False],[False,False,True,False,True,True,False,False,False,True,False,False,False,True,False],[False,False,True,False,False,False,False,True,True,True,True,True,False,True,True],[False,False,False,False,False,True,True,False,True,True,False,False,False,False,True],[False,False,True,False,True,True,False,True,False,True,True,True,False,True,True]]], dtype = "bool")#candidate|7961|(4, 11, 15)|const|bool
bop_7962 = relay.logical_and(const_7960.astype('bool'), relay.reshape(const_7961.astype('bool'), relay.shape_of(const_7960))) # shape=(4, 11, 15)
output = relay.Tuple([bop_7962,])
output2 = relay.Tuple([bop_7962,])
func_7965 = relay.Function([], output)
mod['func_7965'] = func_7965
mod = relay.transform.InferType()(mod)
mutated_mod['func_7965'] = func_7965
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7965_call = mutated_mod.get_global_var('func_7965')
call_7966 = func_7965_call()
output = call_7966
func_7967 = relay.Function([], output)
mutated_mod['func_7967'] = func_7967
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6722_call = mod.get_global_var('func_6722')
func_6723_call = mutated_mod.get_global_var('func_6723')
call_7972 = relay.TupleGetItem(func_6722_call(), 0)
call_7973 = relay.TupleGetItem(func_6723_call(), 0)
output = relay.Tuple([call_7972,])
output2 = relay.Tuple([call_7973,])
func_7979 = relay.Function([], output)
mod['func_7979'] = func_7979
mod = relay.transform.InferType()(mod)
output = func_7979()
func_7980 = relay.Function([], output)
mutated_mod['func_7980'] = func_7980
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7502_call = mod.get_global_var('func_7502')
func_7503_call = mutated_mod.get_global_var('func_7503')
call_8000 = func_7502_call()
call_8001 = func_7502_call()
func_2652_call = mod.get_global_var('func_2652')
func_2659_call = mutated_mod.get_global_var('func_2659')
var_8017 = relay.var("var_8017", dtype = "float32", shape = (140,))#candidate|8017|(140,)|var|float32
const_8018 = relay.const([[9.635704],[6.785674],[1.415358],[-0.239710],[-5.434975],[2.081134],[2.727733],[3.044234],[4.364357],[-1.027571],[5.945206],[-2.595939],[9.439492],[0.080614],[5.940710],[2.826255],[2.388337],[6.569774],[5.393222],[-1.011672],[5.454466],[4.413662],[9.490454],[7.831285],[3.962890],[3.417859],[-6.160541],[3.827126],[-0.734808],[0.055738],[-2.353727],[-4.884985],[0.214701],[-2.415836],[2.688180],[7.264101],[-6.558351],[0.712521],[0.352481],[5.813312]], dtype = "float64")#candidate|8018|(40, 1)|const|float64
const_8019 = relay.const(-3, dtype = "int32")#candidate|8019|()|const|int32
const_8020 = relay.const([[2,7,-1],[-4,-10,-9],[-9,-5,-2],[-3,2,-4],[-7,5,-9],[-10,-4,10],[1,10,-9],[2,5,9],[4,10,-3],[-10,-1,4],[4,10,-1],[1,-6,-5],[2,-3,5],[-6,-5,5],[-9,2,-2],[2,10,-1],[-4,-3,7],[-7,5,8],[3,1,10],[-8,10,1],[-6,-7,-6],[-7,5,3],[10,-1,-10],[-7,2,-3],[-3,-3,2],[-7,8,-7],[4,-5,4],[1,5,-10],[-2,2,-4],[-6,9,-2],[-3,9,2],[-4,-10,7],[6,-9,-1],[-10,6,5],[-6,-9,-10],[5,-1,-5],[-2,1,-9],[-7,6,7],[-3,-8,-6],[10,-6,8],[1,9,10],[7,2,-6],[-6,-5,-7],[2,9,2],[5,-1,3],[6,5,-8],[-1,8,4],[-6,7,5],[-6,-7,-8],[-2,2,-3],[3,1,-7],[4,5,-1],[8,-1,9],[-10,-4,-9],[7,-5,-5],[4,-8,-7],[-5,2,2],[10,1,4],[1,4,-2],[-8,-4,-8],[1,-8,-6],[-5,5,2],[1,9,5],[-1,-9,4],[9,2,4],[4,-3,-6],[7,-1,-9],[2,-7,1],[4,8,6],[-7,-3,10],[-1,5,-9],[3,4,-10],[5,2,-3],[-3,4,10],[-5,-7,-6],[-8,-3,8],[-5,8,5],[2,-2,-1],[7,1,9],[-3,8,5],[-7,10,-7],[2,1,3],[9,-7,2],[-3,-4,-10],[6,7,3],[8,6,-2],[10,9,3],[1,-9,-1],[4,10,10],[1,3,-10],[2,8,9],[3,3,5],[3,-8,-2],[-3,-6,-6],[-5,2,7],[-6,-1,-8],[-4,2,-10],[3,-10,-8],[-1,1,-6],[-4,6,-10],[-8,-3,-1],[-1,-2,4],[9,7,-10],[4,-6,1],[-1,-2,10],[1,8,-9],[5,-6,3],[10,1,3],[-2,5,1],[-7,-10,1],[-1,-8,-6],[-8,6,-9],[5,-1,7],[-8,-1,5],[10,6,3],[9,-8,10],[3,7,3],[-10,-5,5],[-7,3,7],[-1,1,6],[-3,-7,2],[-6,-7,-6],[-1,9,7],[10,-8,-3],[-2,-3,-10],[-9,3,-5],[-5,-2,6],[-1,2,2],[3,-7,-6],[7,3,-5],[10,-7,1],[-10,4,9],[7,6,-9],[3,2,-4],[-8,-10,-10],[7,8,4],[7,6,-5],[-3,4,-4],[-2,6,6],[-4,-2,7],[-9,3,-8],[9,-1,9],[1,-8,5],[-9,-8,-1],[-8,1,1],[-9,2,-2],[-8,-8,-5],[3,-10,2],[-5,-2,-7],[-7,10,-2],[-6,3,-4],[8,5,3],[2,-7,-8],[-8,9,6],[-3,-2,1],[-3,-6,6],[-3,-6,-10],[-10,4,7],[-6,3,-6],[-3,3,1],[-9,2,-3],[9,-3,-8],[-1,-7,6],[7,8,-9],[-10,-3,-8],[-7,-9,4],[7,1,6],[3,8,4],[-4,7,-2],[6,9,-5],[4,-5,2],[8,-3,-1],[8,8,-6],[9,-3,3],[3,9,1],[-10,-7,1],[-4,-3,7],[6,2,9],[-6,9,7],[7,3,3],[-2,-10,-7],[10,-7,-8],[9,-10,-8],[10,-1,7],[10,7,2],[5,10,2],[-6,9,-7],[10,3,-8],[2,6,6],[-9,-9,-10],[-4,-4,-10],[-4,-1,2],[1,8,1],[-4,-6,6],[6,-10,2],[4,5,-2],[6,-3,-10],[7,-6,-7]], dtype = "uint16")#candidate|8020|(198, 3)|const|uint16
call_8016 = relay.TupleGetItem(func_2652_call(relay.reshape(var_8017.astype('float32'), [7, 2, 10]), relay.reshape(const_8018.astype('float64'), [40,]), relay.reshape(const_8019.astype('int32'), []), relay.reshape(call_8000.astype('int32'), [13,]), relay.reshape(const_8020.astype('uint16'), [594,]), ), 0)
call_8021 = relay.TupleGetItem(func_2659_call(relay.reshape(var_8017.astype('float32'), [7, 2, 10]), relay.reshape(const_8018.astype('float64'), [40,]), relay.reshape(const_8019.astype('int32'), []), relay.reshape(call_8000.astype('int32'), [13,]), relay.reshape(const_8020.astype('uint16'), [594,]), ), 0)
uop_8022 = relay.rsqrt(const_8018.astype('float64')) # shape=(40, 1)
output = relay.Tuple([call_8000,call_8016,var_8017,const_8019,const_8020,uop_8022,])
output2 = relay.Tuple([call_8001,call_8021,var_8017,const_8019,const_8020,uop_8022,])
func_8034 = relay.Function([var_8017,], output)
mod['func_8034'] = func_8034
mod = relay.transform.InferType()(mod)
var_8035 = relay.var("var_8035", dtype = "float32", shape = (140,))#candidate|8035|(140,)|var|float32
output = func_8034(var_8035)
func_8036 = relay.Function([var_8035], output)
mutated_mod['func_8036'] = func_8036
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7576_call = mod.get_global_var('func_7576')
func_7577_call = mutated_mod.get_global_var('func_7577')
call_8073 = relay.TupleGetItem(func_7576_call(), 0)
call_8074 = relay.TupleGetItem(func_7577_call(), 0)
func_6596_call = mod.get_global_var('func_6596')
func_6598_call = mutated_mod.get_global_var('func_6598')
call_8091 = relay.TupleGetItem(func_6596_call(), 0)
call_8092 = relay.TupleGetItem(func_6598_call(), 0)
uop_8093 = relay.rsqrt(call_8091.astype('float32')) # shape=(1890,)
uop_8095 = relay.rsqrt(call_8092.astype('float32')) # shape=(1890,)
bop_8102 = relay.less_equal(uop_8093.astype('bool'), relay.reshape(call_8091.astype('bool'), relay.shape_of(uop_8093))) # shape=(1890,)
bop_8105 = relay.less_equal(uop_8095.astype('bool'), relay.reshape(call_8092.astype('bool'), relay.shape_of(uop_8095))) # shape=(1890,)
output = relay.Tuple([call_8073,bop_8102,])
output2 = relay.Tuple([call_8074,bop_8105,])
func_8107 = relay.Function([], output)
mod['func_8107'] = func_8107
mod = relay.transform.InferType()(mod)
mutated_mod['func_8107'] = func_8107
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8107_call = mutated_mod.get_global_var('func_8107')
call_8108 = func_8107_call()
output = call_8108
func_8109 = relay.Function([], output)
mutated_mod['func_8109'] = func_8109
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8107_call = mod.get_global_var('func_8107')
func_8109_call = mutated_mod.get_global_var('func_8109')
call_8142 = relay.TupleGetItem(func_8107_call(), 0)
call_8143 = relay.TupleGetItem(func_8109_call(), 0)
output = relay.Tuple([call_8142,])
output2 = relay.Tuple([call_8143,])
func_8156 = relay.Function([], output)
mod['func_8156'] = func_8156
mod = relay.transform.InferType()(mod)
mutated_mod['func_8156'] = func_8156
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8156_call = mutated_mod.get_global_var('func_8156')
call_8157 = func_8156_call()
output = call_8157
func_8158 = relay.Function([], output)
mutated_mod['func_8158'] = func_8158
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8172 = relay.var("var_8172", dtype = "int32", shape = (15, 9, 9))#candidate|8172|(15, 9, 9)|var|int32
var_8173 = relay.var("var_8173", dtype = "int32", shape = (15, 9, 9))#candidate|8173|(15, 9, 9)|var|int32
bop_8174 = relay.bitwise_xor(var_8172.astype('int32'), relay.reshape(var_8173.astype('int32'), relay.shape_of(var_8172))) # shape=(15, 9, 9)
bop_8180 = relay.bitwise_and(var_8173.astype('int16'), relay.reshape(bop_8174.astype('int16'), relay.shape_of(var_8173))) # shape=(15, 9, 9)
func_7979_call = mod.get_global_var('func_7979')
func_7980_call = mutated_mod.get_global_var('func_7980')
call_8191 = relay.TupleGetItem(func_7979_call(), 0)
call_8192 = relay.TupleGetItem(func_7980_call(), 0)
output = relay.Tuple([bop_8180,call_8191,])
output2 = relay.Tuple([bop_8180,call_8192,])
func_8195 = relay.Function([var_8172,var_8173,], output)
mod['func_8195'] = func_8195
mod = relay.transform.InferType()(mod)
var_8196 = relay.var("var_8196", dtype = "int32", shape = (15, 9, 9))#candidate|8196|(15, 9, 9)|var|int32
var_8197 = relay.var("var_8197", dtype = "int32", shape = (15, 9, 9))#candidate|8197|(15, 9, 9)|var|int32
output = func_8195(var_8196,var_8197,)
func_8198 = relay.Function([var_8196,var_8197,], output)
mutated_mod['func_8198'] = func_8198
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6498_call = mod.get_global_var('func_6498')
func_6500_call = mutated_mod.get_global_var('func_6500')
call_8200 = func_6498_call()
call_8201 = func_6498_call()
const_8206 = relay.const([[[True,False,True,True,True,True,False,True,True,False,False,False,False,True],[True,False,False,False,True,True,False,True,False,True,False,False,True,False],[True,False,False,False,True,True,True,False,False,False,True,False,False,False],[False,False,True,True,True,False,False,False,True,False,True,False,False,True],[False,True,False,True,True,False,True,False,False,True,False,False,True,False],[False,True,False,True,True,True,False,False,True,False,False,True,True,False],[True,True,True,True,False,True,True,True,False,False,False,False,True,False],[False,False,False,True,True,False,False,True,False,False,True,True,True,False],[False,False,False,True,True,True,True,True,True,False,False,True,False,False]],[[True,False,True,True,False,True,False,False,False,False,True,False,True,False],[True,False,False,False,False,False,True,True,False,False,False,True,False,False],[False,True,True,True,True,False,False,True,True,True,True,True,True,False],[True,False,True,True,False,True,True,False,False,False,True,False,True,True],[True,True,False,True,False,True,False,True,True,False,True,False,True,False],[False,True,True,True,True,False,False,False,True,True,False,True,False,False],[True,True,True,False,False,True,True,True,False,True,False,True,False,True],[False,True,False,False,False,True,True,False,True,False,False,False,True,False],[False,True,False,True,False,False,False,True,True,True,False,False,True,False]],[[True,True,False,True,False,False,True,True,True,True,True,False,True,True],[False,False,True,False,False,False,False,False,False,False,True,True,True,True],[True,False,False,True,True,False,False,False,False,False,True,True,True,False],[True,False,True,True,False,False,False,False,False,False,True,False,False,False],[False,True,False,True,False,False,False,True,False,True,True,False,True,False],[True,False,False,False,False,True,True,False,False,True,True,False,True,False],[True,True,False,True,True,False,False,True,False,True,False,False,False,False],[False,True,False,True,True,True,True,True,False,True,True,False,False,False],[True,False,False,False,True,True,True,False,True,True,True,False,False,False]],[[False,False,False,True,True,False,False,False,True,False,True,False,True,True],[False,True,True,True,True,False,True,True,True,False,True,False,False,True],[False,False,True,True,True,True,False,False,True,False,True,True,False,False],[True,True,True,True,True,True,True,False,True,False,True,False,True,True],[False,True,False,True,True,True,False,False,False,False,True,True,False,False],[False,True,False,True,False,False,True,True,True,False,False,False,False,True],[False,True,False,False,False,False,True,False,True,True,False,True,True,True],[True,False,True,True,True,False,True,True,False,False,True,True,False,True],[True,False,False,True,False,True,True,False,True,True,False,True,False,True]],[[False,False,False,True,False,False,True,True,False,False,False,False,False,True],[True,False,False,False,False,True,True,False,False,False,True,True,True,True],[False,False,False,True,False,True,False,False,True,True,True,True,True,True],[True,True,True,False,True,True,False,False,False,True,False,False,True,True],[False,True,True,False,True,True,True,True,False,False,True,True,True,False],[False,True,True,True,False,False,True,False,False,True,False,False,False,False],[True,False,False,True,True,True,True,False,False,True,True,True,True,False],[False,False,False,True,True,True,False,False,False,False,False,False,True,False],[False,False,False,True,False,False,False,True,True,False,True,False,True,False]],[[True,False,False,True,False,False,False,False,True,True,False,True,True,False],[True,False,False,False,False,False,True,False,True,False,True,False,False,False],[False,True,False,True,True,False,True,True,False,True,True,False,False,True],[True,True,True,True,False,True,True,False,False,False,True,True,False,False],[True,False,True,False,True,True,True,False,False,False,False,False,False,True],[False,False,True,False,False,False,True,False,False,False,False,False,False,True],[True,True,False,False,True,True,False,True,False,False,True,False,False,True],[True,False,True,True,True,False,True,True,False,False,True,False,False,True],[False,True,True,True,False,True,False,True,False,False,False,False,False,False]],[[True,True,True,False,True,False,True,False,False,True,True,True,True,False],[True,False,False,False,True,True,True,True,False,True,False,False,False,True],[False,False,True,True,True,False,True,True,True,True,True,True,False,True],[False,True,True,False,True,True,False,False,False,True,True,False,True,False],[False,True,True,True,True,False,False,True,False,False,False,True,True,True],[True,True,False,True,False,False,True,False,True,True,False,False,True,False],[False,False,False,True,True,True,False,False,True,False,True,True,False,True],[True,True,True,False,False,True,True,True,True,True,True,True,False,True],[True,True,True,True,True,True,False,False,False,False,True,True,True,False]],[[True,True,False,False,True,True,False,True,False,True,False,False,False,True],[True,True,True,False,False,False,True,False,False,False,False,False,False,True],[False,True,False,True,True,False,True,False,True,True,True,True,False,False],[True,True,True,False,False,False,False,False,True,False,False,True,False,True],[True,False,False,True,False,False,False,True,False,True,True,True,False,False],[True,True,False,False,False,False,True,False,False,True,False,True,True,True],[False,True,False,False,False,False,True,False,True,False,True,True,True,False],[True,False,False,False,True,True,False,True,True,True,True,True,True,True],[True,False,False,True,False,False,True,False,True,True,False,False,True,True]],[[True,False,True,False,False,True,False,True,False,True,False,True,False,True],[True,True,True,False,False,True,True,False,False,True,False,True,False,False],[True,True,True,False,True,False,True,False,True,True,True,False,False,False],[True,True,True,False,False,False,False,False,False,False,False,False,True,False],[True,True,False,False,False,True,False,True,True,True,True,True,True,True],[True,True,True,False,False,False,True,True,True,True,True,True,True,False],[True,False,False,False,True,True,False,True,False,False,True,False,False,False],[True,True,True,False,False,False,False,True,True,True,False,False,True,True],[True,False,True,False,True,False,False,False,True,False,False,True,False,True]],[[True,False,True,False,True,True,False,False,True,True,True,False,False,True],[False,True,False,True,False,False,True,True,False,True,True,True,True,True],[False,False,False,False,False,False,False,False,True,True,False,False,False,True],[True,False,False,True,False,False,True,False,False,False,True,False,False,False],[True,True,False,False,True,False,False,False,False,False,False,True,True,False],[False,True,True,True,False,True,False,False,True,True,False,False,False,True],[False,False,True,False,True,True,False,True,False,False,True,False,False,True],[False,False,True,False,True,False,True,True,True,True,True,False,True,True],[False,True,False,True,True,False,True,False,True,True,True,True,True,False]],[[False,True,True,False,True,False,False,True,False,True,False,True,False,False],[False,True,True,False,False,False,True,True,False,False,False,True,True,True],[True,False,False,True,False,True,True,True,False,True,False,False,False,True],[False,False,True,False,False,False,False,False,False,False,False,False,False,False],[False,False,True,True,False,True,False,False,True,True,False,True,False,False],[True,False,True,True,False,False,True,False,True,False,True,True,False,True],[False,False,True,False,False,False,True,True,False,True,True,True,False,True],[False,False,False,True,False,True,True,False,False,False,True,True,False,False],[False,False,True,False,True,False,False,True,False,True,False,False,False,False]],[[True,False,True,True,False,True,True,False,True,False,True,True,False,False],[False,True,False,False,True,True,True,False,True,True,False,True,True,False],[False,True,False,True,False,False,True,False,True,False,True,False,False,False],[True,False,False,True,True,False,False,True,True,True,True,False,False,True],[True,True,False,True,True,False,True,True,False,False,True,False,False,False],[False,False,False,False,False,False,True,False,False,True,True,True,False,False],[True,True,False,True,False,False,False,True,False,True,False,True,True,False],[True,True,False,True,True,True,True,False,True,True,False,False,False,True],[True,True,True,True,False,True,False,False,True,False,False,False,False,False]],[[True,True,False,False,True,True,True,False,False,True,False,True,False,False],[True,False,True,True,True,True,False,True,False,False,False,False,False,False],[False,False,False,True,False,True,True,True,False,False,True,False,True,False],[True,True,False,True,False,False,False,True,True,False,True,True,False,True],[True,False,True,True,True,True,False,True,False,True,False,False,False,True],[False,True,True,False,True,False,True,True,False,True,False,True,True,True],[False,True,False,False,True,True,True,False,True,False,True,True,True,True],[False,True,True,False,True,False,False,False,False,True,True,False,False,True],[True,True,True,False,False,True,False,False,True,True,False,False,True,False]],[[True,True,True,True,False,False,False,True,True,False,True,True,False,False],[False,False,False,True,False,True,True,False,False,True,False,True,True,True],[True,False,True,True,True,False,False,False,True,False,True,False,True,True],[True,True,True,True,True,True,True,True,False,False,False,True,False,False],[False,True,True,False,True,False,True,True,True,True,True,False,False,False],[False,True,True,True,False,True,True,True,False,False,True,True,False,True],[False,False,True,False,True,True,False,True,True,True,False,False,True,True],[False,True,True,False,False,True,False,False,False,True,True,False,True,False],[True,True,True,True,False,True,False,True,False,False,False,True,False,False]]], dtype = "bool")#candidate|8206|(14, 9, 14)|const|bool
bop_8207 = relay.logical_xor(call_8200.astype('uint32'), relay.reshape(const_8206.astype('uint32'), relay.shape_of(call_8200))) # shape=(14, 9, 14)
bop_8210 = relay.logical_xor(call_8201.astype('uint32'), relay.reshape(const_8206.astype('uint32'), relay.shape_of(call_8201))) # shape=(14, 9, 14)
output = bop_8207
output2 = bop_8210
func_8216 = relay.Function([], output)
mod['func_8216'] = func_8216
mod = relay.transform.InferType()(mod)
mutated_mod['func_8216'] = func_8216
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8216_call = mutated_mod.get_global_var('func_8216')
call_8217 = func_8216_call()
output = call_8217
func_8218 = relay.Function([], output)
mutated_mod['func_8218'] = func_8218
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7965_call = mod.get_global_var('func_7965')
func_7967_call = mutated_mod.get_global_var('func_7967')
call_8232 = relay.TupleGetItem(func_7965_call(), 0)
call_8233 = relay.TupleGetItem(func_7967_call(), 0)
output = call_8232
output2 = call_8233
func_8237 = relay.Function([], output)
mod['func_8237'] = func_8237
mod = relay.transform.InferType()(mod)
output = func_8237()
func_8238 = relay.Function([], output)
mutated_mod['func_8238'] = func_8238
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5593_call = mod.get_global_var('func_5593')
func_5594_call = mutated_mod.get_global_var('func_5594')
call_8239 = relay.TupleGetItem(func_5593_call(), 0)
call_8240 = relay.TupleGetItem(func_5594_call(), 0)
output = call_8239
output2 = call_8240
func_8247 = relay.Function([], output)
mod['func_8247'] = func_8247
mod = relay.transform.InferType()(mod)
output = func_8247()
func_8248 = relay.Function([], output)
mutated_mod['func_8248'] = func_8248
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6184_call = mod.get_global_var('func_6184')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_8322 = relay.TupleGetItem(func_6184_call(), 0)
call_8323 = relay.TupleGetItem(func_6186_call(), 0)
func_3848_call = mod.get_global_var('func_3848')
func_3855_call = mutated_mod.get_global_var('func_3855')
var_8329 = relay.var("var_8329", dtype = "float32", shape = (50, 6))#candidate|8329|(50, 6)|var|float32
const_8330 = relay.const([[-9.903715,3.212033,1.615938,-2.681739,1.699797,8.704255,-8.785120,-0.931687,4.840017,-7.449294,-8.716059,-6.619337,-6.596098,-8.051552,7.483298,4.550965,-8.370257,-7.234676,-1.144061,3.827809,4.818792,3.478522,-9.697193,-1.673901,-1.373322,1.627163,-3.730646,6.977651],[-7.902338,6.637238,9.316156,4.128424,-7.609850,1.810956,-2.617843,-2.480218,4.700318,-1.486334,-8.294776,1.139397,2.022586,1.064806,-4.558088,1.262460,-3.392676,7.447465,9.310423,6.638344,-0.502751,-7.843786,1.069439,-2.523809,-4.862161,5.406625,-1.208374,0.312613],[2.628183,6.960132,-2.619185,-8.373753,0.774575,-2.219016,-0.278081,-6.895565,-2.739738,-7.515820,-9.505764,-6.113072,1.722211,6.528491,-6.072539,9.242994,8.919204,-2.840070,9.102283,-6.298814,-2.158926,8.520912,-9.768758,2.190536,1.267805,-6.235612,1.450772,-2.414095],[-6.780492,-3.045568,0.191276,0.925186,-0.268688,-2.632515,-8.411019,-9.823725,9.864733,-1.101848,-3.141887,-8.635574,1.837568,0.434046,8.132359,2.970926,1.210828,-5.511868,2.251349,1.479661,7.642626,-2.368191,-1.800114,-9.404994,-0.773161,7.917515,9.873938,-7.740969],[-3.778773,5.531482,-8.662000,-3.600314,-4.569505,-4.554367,-9.173708,2.734169,6.509796,6.434999,-9.444655,3.883011,-2.291078,7.484789,-1.906585,-1.285107,1.805799,-2.739903,-0.820257,8.935813,8.912487,1.311257,9.140646,-7.234923,-9.620872,-3.277307,4.896150,8.385912]], dtype = "float32")#candidate|8330|(5, 28)|const|float32
var_8331 = relay.var("var_8331", dtype = "float64", shape = (40,))#candidate|8331|(40,)|var|float64
const_8332 = relay.const([[2,4,-10,-1,6,-8,8,3,5,1,-6,6,-1,7,-2,4,4,5,7,-10,5,-9,2,-4,2,8,8,-3,6,-1,-2,2,4,-9,3,-5,-7,-3,4,5,-3,-7,-4,-10,-10,-1,-5,-6,2,2,-5,4,-9,3,4,-3,-1,-8,9,-7,10,-3,5,-5,-7,2,4,-5,5,-8,6,-8,2,-3,-5,-1,-2,-1,4,-4,3,-2,-4,-9,5,-9,-1,-7,4,-3,2,-5,8,9,-2,-4,1,-1,3],[3,7,10,-3,-10,-8,-6,-7,-5,7,-9,-7,5,9,2,-5,-1,-8,-2,-9,-8,5,9,6,-9,6,-3,10,-2,3,-10,-10,1,-3,1,-5,-1,4,4,-2,5,8,-4,6,-7,1,-7,10,10,-3,9,1,-10,-10,5,5,3,-9,-2,-4,-6,-6,-7,-3,4,-2,-3,3,-8,-6,-8,-4,-4,7,-8,7,-7,6,-3,-4,4,8,-7,-1,-5,-9,-7,3,5,-1,2,-4,-1,4,9,1,-4,-1,1],[7,8,-8,-8,-10,2,6,7,4,2,4,-7,-7,3,3,1,-9,-7,-5,9,-8,5,4,5,4,7,9,2,-5,5,8,-8,-4,-7,10,6,-6,3,5,-7,3,6,7,9,2,10,9,-8,-4,4,10,3,3,7,2,-8,9,9,1,-10,4,-4,9,-6,8,7,1,5,6,1,-7,4,-2,-3,-3,-5,-4,-9,-10,6,-6,7,2,9,-5,5,1,9,-4,-4,7,3,-8,-4,7,8,2,-1,7],[-2,2,4,9,-5,-10,-10,-10,-8,-5,-9,-4,-6,-10,3,-6,-8,4,-4,-7,-6,9,4,8,2,-8,-6,7,1,8,5,-10,-4,6,9,-8,2,2,-9,-10,2,1,10,-9,-5,4,-2,-4,-9,6,-6,5,-4,-4,5,-3,1,6,-1,-2,-3,6,-1,6,1,-9,6,6,9,2,-5,-3,-10,8,6,-8,6,-8,2,-8,6,3,9,4,9,-4,-3,-1,-7,-4,10,-6,4,5,8,3,1,7,-5],[-10,7,1,2,-4,-2,6,2,10,5,-4,-1,8,2,1,-6,-4,-4,4,-6,7,-9,-9,4,-9,-5,4,1,-5,7,2,7,-6,-10,9,1,1,-8,2,-10,-2,3,8,-10,-7,-10,-8,-5,-10,-7,9,2,9,-2,1,-4,-4,1,-1,6,-7,8,-3,-2,-10,-1,-6,-10,-4,-7,-4,-10,-8,-2,-1,8,7,3,-1,-3,3,-1,-9,-5,-5,8,3,-10,6,-9,-10,-4,5,7,2,8,-5,4,1],[-7,-4,-6,10,8,-7,6,4,-6,-5,6,6,3,-2,-5,8,9,-6,9,-10,5,-3,-9,-9,7,-10,5,6,7,-7,-3,6,-9,7,-2,6,-8,-8,-6,-2,5,4,7,-8,-10,-9,-1,6,-9,9,-2,7,-2,9,-4,-10,2,-6,6,3,8,10,7,9,-9,-7,3,-2,-1,-2,-1,-1,-8,4,-1,-1,-9,8,7,3,-8,-8,4,-6,3,9,2,-9,-9,4,9,10,-6,-5,-10,10,1,-6,10]], dtype = "uint16")#candidate|8332|(6, 99)|const|uint16
call_8328 = relay.TupleGetItem(func_3848_call(relay.reshape(var_8329.astype('float32'), [5, 4, 15]), relay.reshape(var_8329.astype('float32'), [5, 4, 15]), relay.reshape(const_8330.astype('float32'), [140,]), relay.reshape(var_8331.astype('float64'), [40,]), relay.reshape(const_8332.astype('uint16'), [594,]), ), 5)
call_8333 = relay.TupleGetItem(func_3855_call(relay.reshape(var_8329.astype('float32'), [5, 4, 15]), relay.reshape(var_8329.astype('float32'), [5, 4, 15]), relay.reshape(const_8330.astype('float32'), [140,]), relay.reshape(var_8331.astype('float64'), [40,]), relay.reshape(const_8332.astype('uint16'), [594,]), ), 5)
uop_8342 = relay.exp(var_8329.astype('float32')) # shape=(50, 6)
func_6184_call = mod.get_global_var('func_6184')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_8344 = relay.TupleGetItem(func_6184_call(), 3)
call_8345 = relay.TupleGetItem(func_6186_call(), 3)
bop_8354 = relay.less_equal(uop_8342.astype('bool'), relay.reshape(var_8329.astype('bool'), relay.shape_of(uop_8342))) # shape=(50, 6)
output = relay.Tuple([call_8322,call_8328,const_8330,var_8331,const_8332,call_8344,bop_8354,])
output2 = relay.Tuple([call_8323,call_8333,const_8330,var_8331,const_8332,call_8345,bop_8354,])
func_8367 = relay.Function([var_8329,var_8331,], output)
mod['func_8367'] = func_8367
mod = relay.transform.InferType()(mod)
var_8368 = relay.var("var_8368", dtype = "float32", shape = (50, 6))#candidate|8368|(50, 6)|var|float32
var_8369 = relay.var("var_8369", dtype = "float64", shape = (40,))#candidate|8369|(40,)|var|float64
output = func_8367(var_8368,var_8369,)
func_8370 = relay.Function([var_8368,var_8369,], output)
mutated_mod['func_8370'] = func_8370
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6498_call = mod.get_global_var('func_6498')
func_6500_call = mutated_mod.get_global_var('func_6500')
call_8399 = func_6498_call()
call_8400 = func_6498_call()
output = call_8399
output2 = call_8400
func_8431 = relay.Function([], output)
mod['func_8431'] = func_8431
mod = relay.transform.InferType()(mod)
mutated_mod['func_8431'] = func_8431
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8431_call = mutated_mod.get_global_var('func_8431')
call_8432 = func_8431_call()
output = call_8432
func_8433 = relay.Function([], output)
mutated_mod['func_8433'] = func_8433
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8237_call = mod.get_global_var('func_8237')
func_8238_call = mutated_mod.get_global_var('func_8238')
call_8443 = func_8237_call()
call_8444 = func_8237_call()
func_7877_call = mod.get_global_var('func_7877')
func_7879_call = mutated_mod.get_global_var('func_7879')
call_8455 = relay.TupleGetItem(func_7877_call(), 1)
call_8456 = relay.TupleGetItem(func_7879_call(), 1)
output = relay.Tuple([call_8443,call_8455,])
output2 = relay.Tuple([call_8444,call_8456,])
func_8458 = relay.Function([], output)
mod['func_8458'] = func_8458
mod = relay.transform.InferType()(mod)
mutated_mod['func_8458'] = func_8458
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8458_call = mutated_mod.get_global_var('func_8458')
call_8459 = func_8458_call()
output = call_8459
func_8460 = relay.Function([], output)
mutated_mod['func_8460'] = func_8460
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5722_call = mod.get_global_var('func_5722')
func_5724_call = mutated_mod.get_global_var('func_5724')
call_8489 = relay.TupleGetItem(func_5722_call(), 0)
call_8490 = relay.TupleGetItem(func_5724_call(), 0)
output = relay.Tuple([call_8489,])
output2 = relay.Tuple([call_8490,])
func_8491 = relay.Function([], output)
mod['func_8491'] = func_8491
mod = relay.transform.InferType()(mod)
mutated_mod['func_8491'] = func_8491
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8491_call = mutated_mod.get_global_var('func_8491')
call_8492 = func_8491_call()
output = call_8492
func_8493 = relay.Function([], output)
mutated_mod['func_8493'] = func_8493
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8651 = relay.var("var_8651", dtype = "float32", shape = ())#candidate|8651|()|var|float32
var_8652 = relay.var("var_8652", dtype = "float32", shape = (6, 16, 1))#candidate|8652|(6, 16, 1)|var|float32
bop_8653 = relay.divide(var_8651.astype('float32'), var_8652.astype('float32')) # shape=(6, 16, 1)
uop_8656 = relay.log2(var_8652.astype('float64')) # shape=(6, 16, 1)
func_7131_call = mod.get_global_var('func_7131')
func_7132_call = mutated_mod.get_global_var('func_7132')
call_8661 = func_7131_call()
call_8662 = func_7131_call()
output = relay.Tuple([bop_8653,uop_8656,call_8661,])
output2 = relay.Tuple([bop_8653,uop_8656,call_8662,])
func_8675 = relay.Function([var_8651,var_8652,], output)
mod['func_8675'] = func_8675
mod = relay.transform.InferType()(mod)
mutated_mod['func_8675'] = func_8675
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8675_call = mutated_mod.get_global_var('func_8675')
var_8677 = relay.var("var_8677", dtype = "float32", shape = ())#candidate|8677|()|var|float32
var_8678 = relay.var("var_8678", dtype = "float32", shape = (6, 16, 1))#candidate|8678|(6, 16, 1)|var|float32
call_8676 = func_8675_call(var_8677,var_8678,)
output = call_8676
func_8679 = relay.Function([var_8677,var_8678,], output)
mutated_mod['func_8679'] = func_8679
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5722_call = mod.get_global_var('func_5722')
func_5724_call = mutated_mod.get_global_var('func_5724')
call_8681 = relay.TupleGetItem(func_5722_call(), 2)
call_8682 = relay.TupleGetItem(func_5724_call(), 2)
output = relay.Tuple([call_8681,])
output2 = relay.Tuple([call_8682,])
func_8690 = relay.Function([], output)
mod['func_8690'] = func_8690
mod = relay.transform.InferType()(mod)
mutated_mod['func_8690'] = func_8690
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8690_call = mutated_mod.get_global_var('func_8690')
call_8691 = func_8690_call()
output = call_8691
func_8692 = relay.Function([], output)
mutated_mod['func_8692'] = func_8692
mutated_mod = relay.transform.InferType()(mutated_mod)
const_8752 = relay.const([[[-2.441923,-5.086807,8.239967,4.236928,-7.623559,3.497129,-2.036018],[8.731583,9.888996,7.694723,5.134527,7.995726,4.842500,4.388769],[9.124330,7.716008,3.485777,-6.730169,0.913032,8.415714,2.399137],[0.781171,2.199125,0.008651,-1.325942,-2.294814,-6.598063,-6.414666],[4.167568,9.367927,-9.217056,-9.292323,-8.439436,3.887031,7.181782],[4.783303,9.120874,-3.408195,8.134358,7.614886,4.784063,-3.583528]],[[4.009827,4.443723,-6.496545,8.873957,0.660129,-5.784359,8.304887],[7.626196,-7.001753,7.457156,6.409100,-2.257152,9.181907,7.193439],[-4.682912,-6.111125,-3.511652,-7.505629,-0.914571,7.740867,-3.271142],[4.971598,9.175356,-1.025701,-0.035180,8.991827,1.512007,-5.175342],[1.037049,3.047508,7.876870,-5.383378,-3.883052,-1.100919,-1.993805],[-5.753272,0.912038,-2.839242,6.141170,-3.548853,-1.252600,4.741006]],[[-0.024200,-3.478680,4.126955,2.594883,-0.887588,-8.070956,-2.228800],[9.342928,9.567334,8.437625,-6.426035,7.564655,-3.383880,1.950734],[-9.988849,9.284245,-4.856531,-0.421903,7.699827,9.620906,5.785930],[-8.056461,-6.627978,8.576526,-9.047601,4.647641,-8.564656,-6.214813],[-8.056250,-4.950460,-7.728604,6.162824,4.545315,7.798200,7.719109],[-1.485347,-7.990974,2.210946,3.811786,-8.313596,0.753245,-9.616379]],[[3.681960,7.180788,-6.529318,-7.836925,1.822911,5.349403,4.006651],[0.659713,9.182013,-4.733908,5.409542,1.470491,-7.504892,-4.220854],[0.945608,8.907374,0.031467,-9.030459,-8.883470,-0.140217,7.219247],[6.339673,-4.671434,2.032554,-4.376053,-8.681417,8.162621,-8.704824],[7.433919,-7.359172,9.481331,4.163419,-7.682412,-7.501102,-0.633012],[-1.529545,9.210939,4.935386,-6.547361,0.005551,-5.889216,-4.787165]],[[6.099664,9.838307,0.036792,6.077754,7.126121,7.894154,7.360077],[3.379577,6.273131,6.589931,2.301566,-1.207428,6.794416,-3.494093],[0.588263,-1.736265,-0.149596,-3.374166,5.478108,-8.705558,-1.958523],[-0.495125,-5.082106,-7.359214,6.642950,-9.431644,-9.171203,-0.026696],[-3.052205,2.017630,-6.877998,4.104016,0.669036,-2.125564,3.987848],[5.436610,2.882084,7.226371,6.691454,7.766460,7.922638,5.087330]],[[-8.732648,-9.965165,6.951171,8.736325,8.768857,-2.011611,-2.512437],[1.092885,2.628457,6.631252,-0.450489,-5.090999,-8.545321,-6.396463],[5.998070,3.009871,2.542399,5.729097,7.817757,-8.375093,2.052659],[1.310982,-8.750539,1.358361,-5.589795,-9.205716,-7.475048,-7.457880],[-7.838454,-8.850964,1.275325,0.929482,9.855719,4.825407,9.109810],[1.990648,-2.772838,-9.860380,8.873915,-0.840709,5.243306,-8.130241]],[[-7.467659,-2.823110,1.425982,-4.193970,6.358278,-1.740725,-7.622710],[5.548391,9.903518,-6.188274,-1.673272,-8.489450,3.055026,6.602036],[3.689835,-7.578411,-3.235387,-7.945672,9.519067,-8.773199,4.329620],[-1.251193,-3.833893,4.267130,-2.553646,0.376885,0.968758,0.250840],[3.047772,0.174152,-3.929344,-0.596302,-8.050521,5.554719,3.143150],[-9.034019,-3.329846,8.532495,9.576186,-9.861012,-1.785871,-6.360262]],[[-3.027953,-6.943028,-1.671566,-8.543095,6.045062,6.268970,-0.197662],[-5.414342,2.372537,-7.693269,7.930464,-1.572229,-3.146790,-3.333461],[4.539532,-9.856657,-9.771857,0.391554,-2.766048,-5.502052,-5.374731],[-9.653702,-2.959584,-7.519644,6.585748,4.255872,-4.517728,5.811516],[-6.808364,-9.256403,-7.170526,6.157662,1.135206,4.851000,3.891590],[-8.186473,-3.988212,-5.251902,6.777584,-2.166664,9.052876,0.110193]],[[8.526296,-0.349144,-0.941745,2.763999,-3.137824,-3.894508,2.525722],[9.165905,3.495649,-8.312307,-0.195267,-1.247745,-0.504635,2.949630],[-4.389624,7.830589,2.150772,7.161554,-3.620401,5.117135,-3.798480],[5.839926,0.425913,-0.452790,-9.577794,-0.333949,9.095884,-5.892359],[4.199384,2.615541,-7.535043,-9.546848,-0.423941,7.337305,-3.660460],[7.642629,-7.975440,9.197082,-3.816223,-4.024795,-7.608879,0.405358]],[[9.311531,6.668448,9.027553,-9.110027,-0.322012,-8.349754,4.749275],[0.695472,-5.148694,-5.160933,6.656947,-3.248513,3.028436,-0.186535],[-2.752845,3.062600,7.111246,-0.419660,4.265974,-9.539082,5.684932],[-8.796994,9.757320,8.777453,9.377858,-2.198459,2.485119,-2.533071],[-8.803079,-8.119870,-0.607977,-0.475507,5.063258,7.601339,-8.850483],[-3.143340,-3.973483,-3.352551,-4.312365,3.849320,0.758468,1.133848]],[[-2.246906,4.870580,-1.682677,9.877885,2.754048,7.086907,6.112816],[8.260575,-0.019359,6.620044,-8.057399,-5.795593,9.030265,-2.930416],[-2.016617,1.491156,6.223764,2.930155,8.311970,0.962529,-8.894311],[4.498286,8.546911,6.663016,-7.937695,-8.680407,-4.175138,7.854937],[-6.064607,-2.451406,5.461118,7.606072,-2.912973,0.108284,-9.245502],[-7.148911,4.381611,-4.242297,-4.553398,-3.008235,-2.032179,-5.470057]],[[-8.176518,4.383806,1.461861,3.367260,2.677894,-8.669086,1.752552],[2.182799,-6.083707,-7.785230,6.808656,-2.938369,8.885843,-5.232261],[7.334874,-2.485694,8.240165,-6.003668,-8.900288,6.961197,-4.408595],[0.662199,5.393485,1.176086,9.655959,2.033588,-3.983397,-5.976971],[3.909180,-2.984059,0.153396,-9.151155,-7.929692,-8.407032,-4.871179],[-5.179140,7.627028,-1.548648,1.868596,-6.134993,0.668973,9.048355]],[[0.170563,1.931990,8.948825,6.729486,4.129465,1.841100,-7.020869],[-5.648767,7.110937,4.996754,-5.414707,-0.853965,-4.247248,-4.727012],[-8.436045,6.282319,-1.874950,-2.467460,-2.960443,-4.629447,4.756233],[8.602993,8.510300,-1.159408,6.484218,5.695108,1.201607,2.095235],[-1.881355,-4.660080,1.889236,-6.952084,-9.617361,6.794778,-6.657203],[-2.215731,7.518305,1.989209,7.986380,-2.044937,-9.440245,4.945436]],[[0.036983,7.576548,-1.422874,-4.075462,7.339442,4.598982,-2.916215],[3.621692,7.234985,-6.218263,9.386854,3.361264,-8.937772,4.161174],[-6.700348,-9.870094,5.956345,7.281325,3.274742,-6.522475,0.210993],[1.729138,-8.402737,-1.184372,-3.256410,5.307486,1.461903,3.256401],[-0.839207,-8.332581,4.900140,-2.448838,-8.018039,-1.661847,0.003531],[-3.540253,1.861116,-4.023390,-7.292971,6.692253,-0.786057,7.353930]]], dtype = "float32")#candidate|8752|(14, 6, 7)|const|float32
uop_8753 = relay.asinh(const_8752.astype('float32')) # shape=(14, 6, 7)
output = uop_8753
output2 = uop_8753
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
