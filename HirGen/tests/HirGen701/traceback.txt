==========mod==========
#[version = "0.0.5"]
def @func_7083() -> (Tensor[(4, ?, 3), uint32],) {
  %0 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1 = %0.0;
  (%1,)
}

def @func_3213(%var_3160: Tensor[(8, 12), uint32], %var_3197: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 8, 3), bool], Tensor[(8, 12), uint32], Tensor[(4, 1040, 3), int16], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(4, 13, 16), float32]) {
  %2 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %3 = cast(%var_3160, dtype="uint32") /* ty=Tensor[(8, 12), uint32] */;
  %4 = reshape(%3, newshape=[4, 8, 3]) /* ty=Tensor[(4, 8, 3), uint32] */;
  %5 = @func_2821(%4) /* ty=(Tensor[(4, 8, 3), bool],) */;
  %6 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  %7 = cast(%6, dtype="int16") /* ty=Tensor[(4, ?, 3), int16] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(1040, 1), float64] */, dtype="int16") /* ty=Tensor[(1040, 1), int16] */;
  %9 = cast(%var_3197, dtype="bool") /* ty=Tensor[(520), bool] */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(1040, 1), float64] */, dtype="float64") /* ty=Tensor[(1040, 1), float64] */;
  %11 = reshape(%10, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %12 = @func_2792(%11) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %13 = %12.8;
  %14 = cast(%13, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %15 = reshape(%9, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %16 = reshape(%14, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %17 = @func_215(%15, %16) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %18 = cast(%13, dtype="float32") /* ty=Tensor[(4, 13, 16), float32] */;
  %19 = %2.0;
  %20 = %5.0;
  %21 = left_shift(%7, %8) /* ty=Tensor[(4, 1040, 3), int16] */;
  %22 = %17.0;
  %23 = exp(%18) /* ty=Tensor[(4, 13, 16), float32] */;
  (%19, %20, %var_3160, %21, %22, %var_3197, %23)
}

def @func_8509(%var_8478: Tensor[(15, 3, 2), uint16], %var_8479: Tensor[(15, 3, 2), uint16]) -> (Tensor[(15, 3, 2), uint16], Tensor[(15, 3, 2), float64], Tensor[(4, ?, 3), uint32]) {
  %24 = cast(%var_8479, dtype="uint16") /* ty=Tensor[(15, 3, 2), uint16] */;
  %25 = shape_of(%var_8478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%var_8478, dtype="uint16") /* ty=Tensor[(15, 3, 2), uint16] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %28 = cast(%var_8479, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %29 = right_shift(%26, %27) /* ty=Tensor[(15, 3, 2), uint16] */;
  %30 = cos(%28) /* ty=Tensor[(15, 3, 2), float64] */;
  %31 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%29, %30, %31)
}

def @func_11603(%var_11563: Tensor[(520, 2), float64]) -> (Tensor[(520, 2), bool], Tensor[(520, 2), bool], Tensor[(520, 2), float32]) {
  %32 = @func_4920() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(520, 2), float64]) */;
  %33 = %32.2;
  %34 = cast(%var_11563, dtype="bool") /* ty=Tensor[(520, 2), bool] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(2), int32] */;
  %36 = cast(%33, dtype="bool") /* ty=Tensor[(520, 2), bool] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %38 = cast(%33, dtype="bool") /* ty=Tensor[(520, 2), bool] */;
  %39 = shape_of(%var_11563, dtype="int32") /* ty=Tensor[(2), int32] */;
  %40 = cast(%var_11563, dtype="bool") /* ty=Tensor[(520, 2), bool] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %42 = cast(%33, dtype="float32") /* ty=Tensor[(520, 2), float32] */;
  %43 = not_equal(%36, %37) /* ty=Tensor[(520, 2), bool] */;
  %44 = logical_or(%40, %41) /* ty=Tensor[(520, 2), bool] */;
  %45 = atanh(%42) /* ty=Tensor[(520, 2), float32] */;
  (%43, %44, %45)
}

def @func_3284(%var_3270: Tensor[(12, 11, 1), float32]) -> Tensor[(12, 11, 7), float32] {
  %46 = cast(%var_3270, dtype="float32") /* ty=Tensor[(12, 11, 1), float32] */;
  %47 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 11, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 7), float32] */;
  divide(%46, %47) /* ty=Tensor[(12, 11, 7), float32] */
}

def @func_3662(%var_3659: Tensor[(104, 8), uint64]) -> (Tensor[(4, ?, 3), float64], Tensor[(4, 13, 16), uint64], Tensor[(104, 8), uint64]) {
  %48 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %49 = %48.0;
  %50 = cast(%49, dtype="float64") /* ty=Tensor[(4, ?, 3), float64] */;
  %51 = cast(%var_3659, dtype="uint64") /* ty=Tensor[(104, 8), uint64] */;
  %52 = reshape(%51, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %53 = @func_33(%52) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %54 = acos(%50) /* ty=Tensor[(4, ?, 3), float64] */;
  %55 = %53.0;
  (%54, %55, %var_3659)
}

def @func_6143() -> Tensor[(4, ?, 3), uint32] {
  @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_33(%var_28: Tensor[(4, 13, 16), uint64]) -> (Tensor[(4, 13, 16), uint64],) {
  %56 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 13, 16), uint64] */, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %57 = shape_of(%var_28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%var_28, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %60 = right_shift(%58, %59) /* ty=Tensor[(4, 13, 16), uint64] */;
  (%60,)
}

def @func_4458(%var_4441: Tensor[(1, 520), bool], %var_4445: Tensor[(3, 96), uint32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(1, 520), bool], Tensor[(3, 96), float64], Tensor[(4, ?, 3), float32]) {
  %61 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 96), uint32] */, dtype="uint32") /* ty=Tensor[(1, 96), uint32] */;
  %62 = cast(%var_4441, dtype="bool") /* ty=Tensor[(1, 520), bool] */;
  %63 = reshape(%61, newshape=[8, 12]) /* ty=Tensor[(8, 12), uint32] */;
  %64 = reshape(%62, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %65 = @func_3213(%63, %64) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 8, 3), bool], Tensor[(8, 12), uint32], Tensor[(4, 1040, 3), int16], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(4, 13, 16), float32]) */;
  %66 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 96), uint32] */, dtype="float64") /* ty=Tensor[(1, 96), float64] */;
  %67 = cast(%var_4445, dtype="float64") /* ty=Tensor[(3, 96), float64] */;
  %68 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %69 = %68.0;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %71 = %65.0;
  %72 = floor_mod(%66, %67) /* ty=Tensor[(3, 96), float64] */;
  %73 = asin(%70) /* ty=Tensor[(4, ?, 3), float32] */;
  (%71, %var_4441, %72, %73)
}

def @func_215(%var_179: Tensor[(4, 13, 10), bool], %var_190: Tensor[(1, 832), uint64]) -> (Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) {
  %74 = cast(%var_179, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
  %75 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(4, 13, 10), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 13, 10), bool] */, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %78 = cast(%var_190, dtype="uint64") /* ty=Tensor[(1, 832), uint64] */;
  %79 = reshape(%78, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %80 = @func_33(%79) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %81 = cast(%var_190, dtype="float64") /* ty=Tensor[(1, 832), float64] */;
  %82 = logical_and(%76, %77) /* ty=Tensor[(4, 13, 10), bool] */;
  %83 = %80.0;
  %84 = rsqrt(%81) /* ty=Tensor[(1, 832), float64] */;
  (%82, %83, %84)
}

def @func_4369() -> (Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(600), uint64], Tensor[(832), uint64]) {
  %85 = cast(meta[relay.Constant][5] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %86 = cast(meta[relay.Constant][5] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %87 = cast(meta[relay.Constant][6] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %88 = reshape(%85, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
  %89 = reshape(%86, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
  %90 = reshape(%87, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %91 = @func_3444(%88, %89, %90) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), float64], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
  %92 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  %93 = %91.5;
  (%92, %93, meta[relay.Constant][5] /* ty=Tensor[(600), uint64] */, meta[relay.Constant][6] /* ty=Tensor[(832), uint64] */)
}

def @func_14359(%var_14319: Tensor[(4, 11, 3), uint32]) -> (Tensor[(4, 11, 3), bool], Tensor[(4, ?, 3), uint32]) {
  %94 = @func_12708() /* ty=Tensor[(4, ?, 3), uint32] */;
  %95 = cast(%94, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %96 = cast(%var_14319, dtype="bool") /* ty=Tensor[(4, 11, 3), bool] */;
  %97 = not_equal(%95, %96) /* ty=Tensor[(4, 11, 3), bool] */;
  %98 = @func_7855() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%97, %98)
}

def @func_12596() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 9, 3), float32], Tensor[(108), uint32], Tensor[(4, ?, 3), uint32]) {
  %99 = @func_9091() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %100 = @func_9199() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %101 = cast(meta[relay.Constant][7] /* ty=Tensor[(108), uint32] */, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %102 = reshape(%101, newshape=[4, 9, 3]) /* ty=Tensor[(4, 9, 3), uint32] */;
  %103 = @func_4814(%102) /* ty=(Tensor[(4, 9, 3), bool], Tensor[(4, 9, 3), float32]) */;
  %104 = @func_8376() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %105 = %99.0;
  %106 = %100.1;
  %107 = %103.1;
  %108 = %104.0;
  (%105, %106, %107, meta[relay.Constant][7] /* ty=Tensor[(108), uint32] */, %108)
}

def @func_2900() -> Tensor[(4, ?, 3), uint32] {
  %109 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %109.0
}

def @func_3482() -> (Tensor[(4, ?, 3), uint32],) {
  %110 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %111 = %110.0;
  (%111,)
}

def @func_12698() -> (Tensor[(416, 2), uint64], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) {
  %112 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
  %113 = @func_5033() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %114 = %113.2;
  %115 = cast(%114, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %116 = reshape(%115, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %117 = @func_2792(%116) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %118 = %112.1;
  %119 = %117.0;
  (%118, %114, %119)
}

def @func_7641() -> (Tensor[(4, ?, 3), uint32],) {
  %120 = @func_4920() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(520, 2), float64]) */;
  %121 = %120.0;
  (%121,)
}

def @func_13564() -> Tensor[(416, 2), uint64] {
  %122 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
  %122.1
}

def @func_4934() -> Tensor[(4, ?, 3), uint32] {
  %123 = @func_4026() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) */;
  %123.0
}

def @func_10673(%var_10652: Tensor[(10, 16, 4), int8]) -> Tensor[(10, 16, 4), int8] {
  %124 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 16, 4), int8] */, dtype="int8") /* ty=Tensor[(10, 16, 4), int8] */;
  %125 = shape_of(%var_10652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%var_10652, dtype="int8") /* ty=Tensor[(10, 16, 4), int8] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%126, %127) /* ty=Tensor[(10, 16, 4), int8] */
}

def @func_6120() -> Tensor[(4, ?, 3), uint32] {
  @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_12208(%var_12194: Tensor[(640), int8]) -> (Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(10, 16, 4), int8], Tensor[(640), int8], Tensor[(4, 13, 16), uint64]) {
  %128 = @func_9172() /* ty=(Tensor[(4, ?, 3), float32],) */;
  %129 = cast(%var_12194, dtype="int8") /* ty=Tensor[(640), int8] */;
  %130 = reshape(%129, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), int8] */;
  %131 = %128.0;
  %132 = @func_8709() /* ty=Tensor[(4, ?, 3), uint32] */;
  %133 = @func_5095() /* ty=Tensor[(4, ?, 3), uint32] */;
  %134 = @func_10673(%130) /* ty=Tensor[(10, 16, 4), int8] */;
  %135 = @func_6358() /* ty=Tensor[(4, 13, 16), uint64] */;
  (%131, %132, %133, %134, %var_12194, %135)
}

def @func_11169(%var_11137: Tensor[(1144, 2), int8]) -> (Tensor[(4, 13, 16), uint64], Tensor[(143), int8], Tensor[(143), int8], Tensor[(1144, 2), int8], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %136 = cast(meta[relay.Constant][9] /* ty=Tensor[(143), int8] */, dtype="int8") /* ty=Tensor[(143), int8] */;
  %137 = cast(%var_11137, dtype="int8") /* ty=Tensor[(1144, 2), int8] */;
  %138 = reshape(%136, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %139 = reshape(%137, newshape=[1144, 2]) /* ty=Tensor[(1144, 2), int8] */;
  %140 = @func_10615(%138, %139) /* ty=(Tensor[(1040), float64], Tensor[(4, ?, 3), bool], Tensor[(13, 16, 11), int8], Tensor[(143), int8], Tensor[(1144, 2), float64]) */;
  %141 = @func_6254() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %142 = @func_6358() /* ty=Tensor[(4, 13, 16), uint64] */;
  %143 = %140.3;
  %144 = %141.0;
  %145 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%142, %143, meta[relay.Constant][9] /* ty=Tensor[(143), int8] */, %var_11137, %144, %145)
}

def @func_13268() -> (Tensor[(1040), float64],) {
  %146 = @func_11865() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %147 = %146.3;
  (%147,)
}

def @func_4661(%var_4649: Tensor[(660), float32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), float32], Tensor[(832), uint64], Tensor[(660), float32]) {
  %148 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %149 = %148.0;
  %150 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %151 = %150.0;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %153 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%149, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %156 = cast(%149, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %157 = cast(%var_4649, dtype="float32") /* ty=Tensor[(660), float32] */;
  %158 = reshape(%157, newshape=[110, 6]) /* ty=Tensor[(110, 6), float32] */;
  %159 = @func_3999(%158) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(110, 6), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */;
  %160 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  %161 = power(%154, %155) /* ty=Tensor[(4, ?, 3), float32] */;
  %162 = sinh(%156) /* ty=Tensor[(4, ?, 3), float32] */;
  %163 = %159.5;
  (%160, %161, %162, %163, %var_4649)
}

def @func_12753() -> Tensor[(4, ?, 3), uint32] {
  %164 = @func_11061() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %164.0
}

def @func_8320() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float64]) {
  %165 = @func_8224() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %166 = @func_5485() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %167 = cast(meta[relay.Constant][10] /* ty=Tensor[(520, 2), float64] */, dtype="float64") /* ty=Tensor[(520, 2), float64] */;
  %168 = reshape(%167, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %169 = @func_2792(%168) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %170 = %165.0;
  %171 = %166.0;
  %172 = %169.9;
  (%170, %171, %172, meta[relay.Constant][10] /* ty=Tensor[(520, 2), float64] */)
}

def @func_4599(%var_4495: Tensor[(4, 1, 3), uint32], %var_4503: Tensor[(4, 252), uint64], %var_4504: Tensor[(520), bool], %var_4507: Tensor[(660), float32], %var_4539: Tensor[(1540), float64], %var_4560: Tensor[(48, 1), uint32]) -> (Tensor[(4, ?, 3), bool], Tensor[(1008), uint64], Tensor[(4, 252), uint64], Tensor[(520), bool], Tensor[(4, 13, 16), uint64], Tensor[(660), float32], Tensor[(4, 13, 10), bool], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 4, 3), float32], Tensor[(48, 1), uint32], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(3, 96), float64], Tensor[(288), uint32]) {
  %173 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %174 = %173.0;
  %175 = cast(%var_4495, dtype="bool") /* ty=Tensor[(4, 1, 3), bool] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %179 = cast(%var_4503, dtype="uint64") /* ty=Tensor[(4, 252), uint64] */;
  %180 = cast(%var_4504, dtype="bool") /* ty=Tensor[(520), bool] */;
  %181 = reshape(%179, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %182 = reshape(%180, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %183 = @func_2941(%181, %182) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */;
  %184 = cast(%var_4507, dtype="float32") /* ty=Tensor[(660), float32] */;
  %185 = reshape(%184, newshape=[110, 6]) /* ty=Tensor[(110, 6), float32] */;
  %186 = @func_3999(%185) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(110, 6), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */;
  %187 = cast(%var_4504, dtype="bool") /* ty=Tensor[(520), bool] */;
  %188 = %186.1;
  %189 = cast(%188, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %190 = reshape(%187, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %191 = reshape(%189, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %192 = @func_215(%190, %191) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %193 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %194 = cast(%var_4539, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %195 = reshape(%194, newshape=[14, 11, 10]) /* ty=Tensor[(14, 11, 10), float64] */;
  %196 = @func_2441(%195) /* ty=(Tensor[(14, 11, 10), float64],) */;
  %197 = cast(%var_4560, dtype="uint32") /* ty=Tensor[(48, 1), uint32] */;
  %198 = reshape(%197, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), uint32] */;
  %199 = @func_3506(%198) /* ty=(Tensor[(4, 4, 3), float32],) */;
  %200 = %193.0;
  %201 = cast(%200, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
  %202 = cast(%188, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %203 = reshape(%201, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
  %204 = reshape(%202, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %205 = @func_3017(%203, %204) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), float32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64]) */;
  %206 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %207 = cast(%var_4504, dtype="bool") /* ty=Tensor[(520), bool] */;
  %208 = cast(meta[relay.Constant][11] /* ty=Tensor[(288), uint32] */, dtype="uint32") /* ty=Tensor[(288), uint32] */;
  %209 = reshape(%207, newshape=[1, 520]) /* ty=Tensor[(1, 520), bool] */;
  %210 = reshape(%208, newshape=[3, 96]) /* ty=Tensor[(3, 96), uint32] */;
  %211 = @func_4458(%209, %210) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1, 520), bool], Tensor[(3, 96), float64], Tensor[(4, ?, 3), float32]) */;
  %212 = not_equal(%177, %178) /* ty=Tensor[(4, ?, 3), bool] */;
  %213 = %183.3;
  %214 = %192.0;
  %215 = %196.0;
  %216 = %199.0;
  %217 = %205.0;
  %218 = %206.0;
  %219 = %211.2;
  (%212, %213, %var_4503, %var_4504, %188, %var_4507, %214, %200, %215, %var_4539, %216, %var_4560, %217, %218, %219, meta[relay.Constant][11] /* ty=Tensor[(288), uint32] */)
}

def @func_10518() -> Tensor[(1040), float64] {
  @func_9066() /* ty=Tensor[(1040), float64] */
}

def @func_11086() -> (Tensor[(4, ?, 3), uint32],) {
  %220 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %221 = %220.0;
  (%221,)
}

def @func_12546() -> (Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(520), bool], Tensor[(330, 2), float32]) {
  %222 = @func_7641() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %223 = cast(meta[relay.Constant][12] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %224 = cast(meta[relay.Constant][13] /* ty=Tensor[(330, 2), float32] */, dtype="float32") /* ty=Tensor[(330, 2), float32] */;
  %225 = reshape(%223, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %226 = reshape(%224, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %227 = @func_9562(%225, %226) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(330, 2), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(660), float32], Tensor[(15, 3, 2), uint16], Tensor[(90), uint16], Tensor[(4, ?, 3), float32]) */;
  %228 = %222.0;
  %229 = %227.3;
  (%228, %229, meta[relay.Constant][12] /* ty=Tensor[(520), bool] */, meta[relay.Constant][13] /* ty=Tensor[(330, 2), float32] */)
}

def @func_5508(%var_5488: Tensor[(4, 12, 12), float64], %var_5501: Tensor[(416, 2), uint64]) -> (Tensor[(4, 12, 12), float64], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64]) {
  %230 = cast(%var_5488, dtype="float64") /* ty=Tensor[(4, 12, 12), float64] */;
  %231 = cast(meta[relay.Constant][14] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %232 = reshape(%231, newshape=[14, 11, 10]) /* ty=Tensor[(14, 11, 10), float64] */;
  %233 = @func_2441(%232) /* ty=(Tensor[(14, 11, 10), float64],) */;
  %234 = cast(%var_5501, dtype="uint64") /* ty=Tensor[(416, 2), uint64] */;
  %235 = reshape(%234, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %236 = @func_33(%235) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %237 = acos(%230) /* ty=Tensor[(4, 12, 12), float64] */;
  %238 = %233.0;
  %239 = %236.0;
  (%237, %238, meta[relay.Constant][14] /* ty=Tensor[(1540), float64] */, %239, %var_5501)
}

def @func_7038(%var_7011: Tensor[(416, 2), uint64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(416, 2), bool], Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint32]) {
  %240 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %241 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
  %242 = %241.1;
  %243 = cast(%var_7011, dtype="bool") /* ty=Tensor[(416, 2), bool] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(2), int32] */;
  %245 = cast(%242, dtype="bool") /* ty=Tensor[(416, 2), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %247 = cast(%242, dtype="uint32") /* ty=Tensor[(416, 2), uint32] */;
  %248 = shape_of(%var_7011, dtype="int32") /* ty=Tensor[(2), int32] */;
  %249 = cast(%var_7011, dtype="uint32") /* ty=Tensor[(416, 2), uint32] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %251 = %240.0;
  %252 = less(%245, %246) /* ty=Tensor[(416, 2), bool] */;
  %253 = @func_4991() /* ty=Tensor[(4, ?, 3), uint32] */;
  %254 = subtract(%249, %250) /* ty=Tensor[(416, 2), uint32] */;
  (%251, %252, %253, %254)
}

def @func_4026() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) {
  %255 = cast(meta[relay.Constant][15] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %256 = reshape(%255, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), uint32] */;
  %257 = @func_3506(%256) /* ty=(Tensor[(4, 4, 3), float32],) */;
  %258 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  %259 = %257.0;
  (%258, %259, meta[relay.Constant][15] /* ty=Tensor[(48), uint32] */)
}

def @func_14166() -> (Tensor[(4, ?, 3), uint32],) {
  %260 = @func_5670() /* ty=(Tensor[(4, ?, 3), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %261 = %260.2;
  (%261,)
}

def @func_8106() -> Tensor[(4, ?, 3), uint32] {
  %262 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %262.0
}

def @func_5164(%var_5132: Tensor[(1040), float64], %var_5150: Tensor[(660), float32]) -> (Tensor[(1040), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32]) {
  %263 = @func_4332() /* ty=Tensor[(1040), float64] */;
  %264 = cast(%var_5132, dtype="bool") /* ty=Tensor[(1040), bool] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(1), int32] */;
  %266 = cast(%263, dtype="bool") /* ty=Tensor[(1040), bool] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?), bool] */;
  %268 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %269 = cast(%var_5150, dtype="float32") /* ty=Tensor[(660), float32] */;
  %270 = reshape(%269, newshape=[110, 6]) /* ty=Tensor[(110, 6), float32] */;
  %271 = @func_3999(%270) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(110, 6), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */;
  %272 = greater(%266, %267) /* ty=Tensor[(1040), bool] */;
  %273 = %268.0;
  %274 = %271.5;
  (%272, %273, %274, %var_5150)
}

def @func_3999(%var_3985: Tensor[(110, 6), float32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(110, 6), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
  %275 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %276 = cast(%var_3985, dtype="float32") /* ty=Tensor[(110, 6), float32] */;
  %277 = cast(%var_3985, dtype="float32") /* ty=Tensor[(110, 6), float32] */;
  %278 = cast(meta[relay.Constant][16] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %279 = cast(meta[relay.Constant][17] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %280 = cast(meta[relay.Constant][18] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %281 = reshape(%276, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %282 = reshape(%277, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %283 = reshape(%278, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %284 = reshape(%279, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %285 = reshape(%280, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %286 = @func_1020(%281, %282, %283, %284, %285) /* ty=(Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) */;
  %287 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %288 = %286.7;
  %289 = cast(%288, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %290 = reshape(%289, newshape=[104, 8]) /* ty=Tensor[(104, 8), uint64] */;
  %291 = @func_3662(%290) /* ty=(Tensor[(4, ?, 3), float64], Tensor[(4, 13, 16), uint64], Tensor[(104, 8), uint64]) */;
  %292 = %275.0;
  %293 = %287.0;
  %294 = %291.1;
  (%292, %288, %var_3985, meta[relay.Constant][16] /* ty=Tensor[(1008), uint64] */, meta[relay.Constant][17] /* ty=Tensor[(520), bool] */, meta[relay.Constant][18] /* ty=Tensor[(832), uint64] */, %293, %294)
}

def @func_6860() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %295 = @func_6677() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %296 = @func_4844() /* ty=Tensor[(4, ?, 3), uint32] */;
  %297 = %295.0;
  (%296, %297)
}

def @func_8180() -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64]) {
  %298 = @func_5033() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %299 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  %300 = %298.2;
  (%299, %300)
}

def @func_11933() -> (Tensor[(4, 4, 3), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
  %301 = @func_4026() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) */;
  %302 = %301.1;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(4, 4, 3), float64] */;
  %304 = @func_6627() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) */;
  %305 = log(%303) /* ty=Tensor[(4, 4, 3), float64] */;
  %306 = @func_8709() /* ty=Tensor[(4, ?, 3), uint32] */;
  %307 = %304.1;
  (%305, %306, %307)
}

def @func_2713() -> (Tensor[(4, ?, 3), uint32],) {
  %308 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 1, 3), float64] */, dtype="float64") /* ty=Tensor[(4, 1, 3), float64] */;
  %309 = tan(%308) /* ty=Tensor[(4, 1, 3), float64] */;
  %310 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 1, 3), float64] */, dtype="uint32") /* ty=Tensor[(4, 1, 3), uint32] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="uint32") /* ty=Tensor[(4, 1, 3), uint32] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %314 = bitwise_xor(%312, %313) /* ty=Tensor[(4, ?, 3), uint32] */;
  (%314,)
}

def @func_4332() -> Tensor[(1040), float64] {
  %315 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %315.2
}

def @func_8294(%var_8287: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1, 1540), float64], Tensor[(520), bool]) {
  %316 = @func_6860() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %317 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 1540), float64] */, dtype="float64") /* ty=Tensor[(1, 1540), float64] */;
  %318 = cast(%var_8287, dtype="bool") /* ty=Tensor[(520), bool] */;
  %319 = reshape(%317, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
  %320 = reshape(%318, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %321 = @func_3958(%319, %320) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
  %322 = @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */;
  %323 = %316.1;
  %324 = @func_4934() /* ty=Tensor[(4, ?, 3), uint32] */;
  %325 = %321.6;
  (%322, %323, %324, %325, meta[relay.Constant][20] /* ty=Tensor[(1, 1540), float64] */, %var_8287)
}

def @func_9199() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %326 = @func_6794() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), int8]) */;
  %327 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %328 = %326.0;
  %329 = %327.0;
  %330 = @func_3845() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%328, %329, %330)
}

def @func_9805() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
  %331 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %332 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  %333 = %331.1;
  (%332, %333)
}

def @func_12374() -> Tensor[(4, 13, 16), uint64] {
  %334 = @func_9805() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */;
  %334.1
}

def @func_13527() -> (Tensor[(416, 2), uint64], Tensor[(4, 13, 16), uint64]) {
  %335 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
  %336 = @func_7686() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */;
  %337 = %335.1;
  %338 = %336.1;
  (%337, %338)
}

def @func_5721() -> (Tensor[(4, ?, 3), uint32],) {
  %339 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%339,)
}

def @func_10997() -> Tensor[(4, ?, 3), float64] {
  @func_6521() /* ty=Tensor[(4, ?, 3), float64] */
}

def @func_5456() -> (Tensor[(832), uint64],) {
  %340 = @func_4369() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(600), uint64], Tensor[(832), uint64]) */;
  %341 = %340.3;
  (%341,)
}

def @func_5033() -> (Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) {
  %342 = cast(meta[relay.Constant][21] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %343 = reshape(%342, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %344 = @func_2792(%343) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %345 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %346 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  %347 = %344.2;
  %348 = %345.0;
  (%346, %347, meta[relay.Constant][21] /* ty=Tensor[(1040), float64] */, %348)
}

def @func_5883() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 24), uint32], Tensor[(4, 8, 3), float32]) {
  %349 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 24), uint32] */, dtype="uint32") /* ty=Tensor[(4, 24), uint32] */;
  %350 = reshape(%349, newshape=[4, 8, 3]) /* ty=Tensor[(4, 8, 3), uint32] */;
  %351 = @func_2821(%350) /* ty=(Tensor[(4, 8, 3), bool],) */;
  %352 = %351.0;
  %353 = cast(%352, dtype="float32") /* ty=Tensor[(4, 8, 3), float32] */;
  %354 = @func_4844() /* ty=Tensor[(4, ?, 3), uint32] */;
  %355 = exp(%353) /* ty=Tensor[(4, 8, 3), float32] */;
  (%354, meta[relay.Constant][22] /* ty=Tensor[(4, 24), uint32] */, %355)
}

def @func_13214(%var_13204: Tensor[(108), uint32]) -> (Tensor[(1008), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(108), uint32]) {
  %356 = @func_9657() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1540), float64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), int8]) */;
  %357 = @func_9339() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %358 = cast(%var_13204, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %359 = reshape(%358, newshape=[3, 36]) /* ty=Tensor[(3, 36), uint32] */;
  %360 = @func_8884(%359) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, 9, 3), bool], Tensor[(3, 36), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %361 = %356.2;
  %362 = %357.1;
  %363 = %360.4;
  (%361, %362, %363, %var_13204)
}

def @func_6794() -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), int8]) {
  %364 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %365 = %364.0;
  %366 = cast(%365, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
  %367 = reshape(%366, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
  %368 = @func_5788(%367) /* ty=(Tensor[(4, ?, 3), bool], Tensor[(4, ?, 3), uint32]) */;
  %369 = %368.0;
  %370 = @func_6143() /* ty=Tensor[(4, ?, 3), uint32] */;
  %371 = cast(%370, dtype="int8") /* ty=Tensor[(4, ?, 3), int8] */;
  %372 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%369, dtype="int8") /* ty=Tensor[(4, ?, 3), int8] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %375 = @func_4332() /* ty=Tensor[(1040), float64] */;
  %376 = multiply(%373, %374) /* ty=Tensor[(4, ?, 3), int8] */;
  (%365, %375, %376)
}

def @func_4974(%var_4945: float64) -> (Tensor[(1, 11, 4), float64], Tensor[(1, 11, 4), bool], Tensor[(4, ?, 3), uint32], Tensor[(1, 11, 4), bool]) {
  %377 = cast(%var_4945, dtype="float64") /* ty=float64 */;
  %378 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 11, 4), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 4), float64] */;
  %379 = cast(%var_4945, dtype="bool") /* ty=bool */;
  %380 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 11, 4), float64] */, dtype="bool") /* ty=Tensor[(1, 11, 4), bool] */;
  %381 = @func_4026() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) */;
  %382 = cast(%var_4945, dtype="bool") /* ty=bool */;
  %383 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 11, 4), float64] */, dtype="bool") /* ty=Tensor[(1, 11, 4), bool] */;
  %384 = power(%377, %378) /* ty=Tensor[(1, 11, 4), float64] */;
  %385 = greater(%379, %380) /* ty=Tensor[(1, 11, 4), bool] */;
  %386 = %381.0;
  %387 = greater_equal(%382, %383) /* ty=Tensor[(1, 11, 4), bool] */;
  (%384, %385, %386, %387)
}

def @func_11787() -> (Tensor[(11, 10, 7), bool], Tensor[(4, ?, 3), uint32], Tensor[(11, 10, 7), float64], Tensor[(4, ?, 3), uint32], Tensor[(1540), float64], Tensor[(576), float64], Tensor[(832), uint64]) {
  %388 = cast(meta[relay.Constant][24] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %389 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 10, 7), uint64] */, dtype="bool") /* ty=Tensor[(11, 10, 7), bool] */;
  %390 = @func_6066() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %391 = cast(meta[relay.Constant][24] /* ty=uint64 */, dtype="int8") /* ty=int8 */;
  %392 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 10, 7), uint64] */, dtype="int8") /* ty=Tensor[(11, 10, 7), int8] */;
  %393 = maximum(%391, %392) /* ty=Tensor[(11, 10, 7), int8] */;
  %394 = cast(%393, dtype="float64") /* ty=Tensor[(11, 10, 7), float64] */;
  %395 = @func_10949() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %396 = cast(meta[relay.Constant][26] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %397 = cast(meta[relay.Constant][27] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %398 = reshape(%396, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), float64] */;
  %399 = reshape(%397, newshape=[416, 2]) /* ty=Tensor[(416, 2), uint64] */;
  %400 = @func_5508(%398, %399) /* ty=(Tensor[(4, 12, 12), float64], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64]) */;
  %401 = less_equal(%388, %389) /* ty=Tensor[(11, 10, 7), bool] */;
  %402 = %390.0;
  %403 = asin(%394) /* ty=Tensor[(11, 10, 7), float64] */;
  %404 = %395.0;
  %405 = %400.2;
  (%401, %402, %403, %404, %405, meta[relay.Constant][26] /* ty=Tensor[(576), float64] */, meta[relay.Constant][27] /* ty=Tensor[(832), uint64] */)
}

def @func_9562(%var_9528: Tensor[(520), bool], %var_9529: Tensor[(660), float32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(330, 2), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(660), float32], Tensor[(15, 3, 2), uint16], Tensor[(90), uint16], Tensor[(4, ?, 3), float32]) {
  %406 = @func_8320() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float64]) */;
  %407 = cast(meta[relay.Constant][28] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %408 = cast(%var_9528, dtype="bool") /* ty=Tensor[(520), bool] */;
  %409 = cast(%var_9529, dtype="float32") /* ty=Tensor[(660), float32] */;
  %410 = reshape(%407, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %411 = reshape(%408, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %412 = reshape(%409, newshape=[330, 2]) /* ty=Tensor[(330, 2), float32] */;
  %413 = @func_7465(%410, %411, %412) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(288), uint32], Tensor[(12), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(330, 2), float32], Tensor[(1540), float64], Tensor[(2, 24), uint32]) */;
  %414 = cast(meta[relay.Constant][29] /* ty=Tensor[(90), uint16] */, dtype="uint16") /* ty=Tensor[(90), uint16] */;
  %415 = cast(meta[relay.Constant][29] /* ty=Tensor[(90), uint16] */, dtype="uint16") /* ty=Tensor[(90), uint16] */;
  %416 = reshape(%414, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint16] */;
  %417 = reshape(%415, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint16] */;
  %418 = @func_8509(%416, %417) /* ty=(Tensor[(15, 3, 2), uint16], Tensor[(15, 3, 2), float64], Tensor[(4, ?, 3), uint32]) */;
  %419 = @func_8180() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1040), float64]) */;
  %420 = %419.0;
  %421 = @func_5670() /* ty=(Tensor[(4, ?, 3), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %422 = %421.2;
  %423 = cast(%422, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %424 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%420, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %427 = %406.1;
  %428 = %413.5;
  %429 = %418.0;
  %430 = maximum(%425, %426) /* ty=Tensor[(4, ?, 3), float32] */;
  (%427, %428, meta[relay.Constant][28] /* ty=Tensor[(1008), uint64] */, %var_9528, %var_9529, %429, meta[relay.Constant][29] /* ty=Tensor[(90), uint16] */, %430)
}

def @func_5995() -> Tensor[(4, ?, 3), uint32] {
  @func_4844() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_4304() -> (Tensor[(4, ?, 3), uint32],) {
  %431 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %432 = %431.0;
  (%432,)
}

def @func_13876(%var_13846: Tensor[(520), bool], %var_13848: Tensor[(48), uint32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(660), float32], Tensor[(48), uint32]) {
  %433 = @func_7560() /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %434 = @func_8376() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %435 = cast(%var_13846, dtype="bool") /* ty=Tensor[(520), bool] */;
  %436 = cast(meta[relay.Constant][30] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %437 = cast(%var_13848, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %438 = reshape(%435, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %439 = reshape(%436, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %440 = reshape(%437, newshape=[48]) /* ty=Tensor[(48), uint32] */;
  %441 = @func_5307(%438, %439, %440) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(660), float32], Tensor[(1540), float64], Tensor[(48), uint32], Tensor[(520), bool], Tensor[(660), float32], Tensor[(4, ?, 3), uint32]) */;
  %442 = @func_7564() /* ty=Tensor[(4, ?, 3), uint32] */;
  %443 = @func_4332() /* ty=Tensor[(1040), float64] */;
  %444 = %433.0;
  %445 = %434.0;
  %446 = %441.9;
  (%442, %443, %444, %445, %446, %var_13846, meta[relay.Constant][30] /* ty=Tensor[(660), float32] */, %var_13848)
}

def @func_1020(%var_978: Tensor[(4, 11, 15), float32], %var_979: Tensor[(4, 11, 15), float32], %var_1000: Tensor[(1008), uint64], %var_1001: Tensor[(520), bool], %var_1002: Tensor[(832), uint64]) -> (Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) {
  %447 = cast(%var_979, dtype="float64") /* ty=Tensor[(4, 11, 15), float64] */;
  %448 = shape_of(%var_978, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%var_978, dtype="float64") /* ty=Tensor[(4, 11, 15), float64] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %451 = cast(%var_1000, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %452 = cast(%var_1000, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %453 = cast(%var_1001, dtype="bool") /* ty=Tensor[(520), bool] */;
  %454 = cast(%var_1002, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %455 = reshape(%451, newshape=[8, 9, 14]) /* ty=Tensor[(8, 9, 14), uint64] */;
  %456 = reshape(%452, newshape=[8, 9, 14]) /* ty=Tensor[(8, 9, 14), uint64] */;
  %457 = reshape(%453, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %458 = reshape(%454, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %459 = @func_402(%455, %456, %457, %458) /* ty=(Tensor[(8, 9, 14), uint64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 10), bool]) */;
  %460 = cast(%var_979, dtype="float32") /* ty=Tensor[(4, 11, 15), float32] */;
  %461 = shape_of(%var_978, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_978, dtype="float32") /* ty=Tensor[(4, 11, 15), float32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %464 = divide(%462, %463) /* ty=Tensor[(4, 11, 15), float32] */;
  %465 = cast(%464, dtype="int64") /* ty=Tensor[(4, 11, 15), int64] */;
  %466 = shape_of(%var_978, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%var_978, dtype="int64") /* ty=Tensor[(4, 11, 15), int64] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %469 = %459.1;
  %470 = cast(%469, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
  %471 = cast(%var_1002, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %472 = reshape(%470, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %473 = reshape(%471, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %474 = @func_215(%472, %473) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %475 = %474.2;
  %476 = cast(%475, dtype="uint64") /* ty=Tensor[(1, 832), uint64] */;
  %477 = reshape(%476, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %478 = @func_33(%477) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %479 = mod(%449, %450) /* ty=Tensor[(4, 11, 15), float64] */;
  %480 = bitwise_xor(%467, %468) /* ty=Tensor[(4, 11, 15), int64] */;
  %481 = %478.0;
  (%479, %469, %var_1000, %var_1001, %var_1002, %480, %475, %481)
}

def @func_10356(%var_10353: Tensor[(600), uint64]) -> (Tensor[(1040), float64], Tensor[(8, 15, 5), uint64], Tensor[(600), uint64], Tensor[(104, 8), uint64]) {
  %482 = cast(%var_10353, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %483 = cast(%var_10353, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %484 = cast(meta[relay.Constant][31] /* ty=Tensor[(104, 8), uint64] */, dtype="uint64") /* ty=Tensor[(104, 8), uint64] */;
  %485 = reshape(%482, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
  %486 = reshape(%483, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
  %487 = reshape(%484, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %488 = @func_3444(%485, %486, %487) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), float64], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
  %489 = @func_4332() /* ty=Tensor[(1040), float64] */;
  %490 = %488.0;
  (%489, %490, %var_10353, meta[relay.Constant][31] /* ty=Tensor[(104, 8), uint64] */)
}

def @func_8838() -> (Tensor[(600), uint64], Tensor[(4, ?, 3), uint32]) {
  %491 = @func_4369() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(600), uint64], Tensor[(832), uint64]) */;
  %492 = @func_7962() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %493 = %491.2;
  %494 = %492.0;
  (%493, %494)
}

def @func_5307(%var_5266: Tensor[(520), bool], %var_5267: Tensor[(660), float32], %var_5269: Tensor[(48), uint32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(660), float32], Tensor[(1540), float64], Tensor[(48), uint32], Tensor[(520), bool], Tensor[(660), float32], Tensor[(4, ?, 3), uint32]) {
  %495 = @func_3845() /* ty=Tensor[(4, ?, 3), uint32] */;
  %496 = cast(%495, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
  %497 = cast(meta[relay.Constant][32] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %498 = cast(%var_5266, dtype="bool") /* ty=Tensor[(520), bool] */;
  %499 = cast(%var_5267, dtype="float32") /* ty=Tensor[(660), float32] */;
  %500 = cast(meta[relay.Constant][33] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %501 = cast(%var_5269, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %502 = reshape(%496, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
  %503 = reshape(%497, newshape=[4, 252]) /* ty=Tensor[(4, 252), uint64] */;
  %504 = reshape(%498, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %505 = reshape(%499, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %506 = reshape(%500, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
  %507 = reshape(%501, newshape=[48, 1]) /* ty=Tensor[(48, 1), uint32] */;
  %508 = @func_4599(%502, %503, %504, %505, %506, %507) /* ty=(Tensor[(4, ?, 3), bool], Tensor[(1008), uint64], Tensor[(4, 252), uint64], Tensor[(520), bool], Tensor[(4, 13, 16), uint64], Tensor[(660), float32], Tensor[(4, 13, 10), bool], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 4, 3), float32], Tensor[(48, 1), uint32], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(3, 96), float64], Tensor[(288), uint32]) */;
  %509 = cast(meta[relay.Constant][32] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %510 = cast(%var_5266, dtype="bool") /* ty=Tensor[(520), bool] */;
  %511 = reshape(%509, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %512 = reshape(%510, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %513 = @func_2941(%511, %512) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */;
  %514 = cast(meta[relay.Constant][33] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %515 = %513.4;
  %516 = cast(%515, dtype="bool") /* ty=Tensor[(520), bool] */;
  %517 = reshape(%514, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
  %518 = reshape(%516, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %519 = @func_3958(%517, %518) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
  %520 = cast(meta[relay.Constant][33] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %521 = cast(%515, dtype="bool") /* ty=Tensor[(520), bool] */;
  %522 = reshape(%520, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
  %523 = reshape(%521, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %524 = @func_3958(%522, %523) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
  %525 = %508.7;
  %526 = %519.5;
  %527 = %524.0;
  (%495, %525, meta[relay.Constant][32] /* ty=Tensor[(1008), uint64] */, %var_5266, %var_5267, meta[relay.Constant][33] /* ty=Tensor[(1540), float64] */, %var_5269, %515, %526, %527)
}

def @func_13013(%var_13001: Tensor[(4, 9, 13), float64]) -> (Tensor[(4, 9, 13), float64],) {
  %528 = cast(%var_13001, dtype="float64") /* ty=Tensor[(4, 9, 13), float64] */;
  %529 = acos(%528) /* ty=Tensor[(4, 9, 13), float64] */;
  (%529,)
}

def @func_3267() -> Tensor[(4, ?, 3), uint32] {
  %530 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %530.0
}

def @func_13969() -> Tensor[(4, ?, 3), uint32] {
  %531 = @func_12453() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %531.0
}

def @func_13930(%var_13923: Tensor[(1008), uint64]) -> (Tensor[(4, ?, 3), float64], Tensor[(520), bool], Tensor[(1008), uint64], Tensor[(520), bool]) {
  %532 = cast(%var_13923, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %533 = cast(meta[relay.Constant][34] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %534 = reshape(%532, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %535 = reshape(%533, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %536 = @func_10807(%534, %535) /* ty=(Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, 13, 10), bool], Tensor[(832), uint64]) */;
  %537 = @func_6521() /* ty=Tensor[(4, ?, 3), float64] */;
  %538 = %536.3;
  (%537, %538, %var_13923, meta[relay.Constant][34] /* ty=Tensor[(520), bool] */)
}

def @func_13379() -> Tensor[(4, ?, 3), uint32] {
  %539 = @func_11933() /* ty=(Tensor[(4, 4, 3), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */;
  %539.1
}

def @func_3506(%var_3501: Tensor[(4, 4, 3), uint32]) -> (Tensor[(4, 4, 3), float32],) {
  %540 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %541 = %540.0;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %543 = cast(%var_3501, dtype="float32") /* ty=Tensor[(4, 4, 3), float32] */;
  %544 = divide(%542, %543) /* ty=Tensor[(4, 4, 3), float32] */;
  (%544,)
}

def @func_14085(%var_14076: Tensor[(132), uint32]) -> (Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 3), int32], Tensor[(132), uint32]) {
  %545 = cast(%var_14076, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %546 = reshape(%545, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), uint32] */;
  %547 = @func_10518() /* ty=Tensor[(1040), float64] */;
  %548 = @func_5995() /* ty=Tensor[(4, ?, 3), uint32] */;
  %549 = @func_12490(%546) /* ty=Tensor[(4, 11, 3), int32] */;
  (%547, %548, %549, %var_14076)
}

def @func_9485() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
  %550 = @func_6908() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %551 = @func_8838() /* ty=(Tensor[(600), uint64], Tensor[(4, ?, 3), uint32]) */;
  %552 = @func_7560() /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %553 = %550.0;
  %554 = %551.1;
  %555 = %552.0;
  (%553, %554, %555)
}

def @func_5239(%var_5214: Tensor[(520), bool]) -> (Tensor[(1008), uint64], Tensor[(1040), float64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(660), float32], Tensor[(4, ?, 3), uint32]) {
  %556 = @func_4369() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(600), uint64], Tensor[(832), uint64]) */;
  %557 = cast(%var_5214, dtype="bool") /* ty=Tensor[(520), bool] */;
  %558 = cast(meta[relay.Constant][35] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %559 = reshape(%557, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %560 = reshape(%558, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %561 = @func_215(%559, %560) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %562 = @func_4332() /* ty=Tensor[(1040), float64] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %564 = cast(meta[relay.Constant][36] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %565 = reshape(%563, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %566 = reshape(%564, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %567 = @func_5164(%565, %566) /* ty=(Tensor[(1040), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32]) */;
  %568 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %569 = %556.1;
  %570 = %561.0;
  %571 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  %572 = %567.3;
  %573 = %568.0;
  (%569, %562, %570, %var_5214, meta[relay.Constant][35] /* ty=Tensor[(832), uint64] */, %571, %572, meta[relay.Constant][36] /* ty=Tensor[(660), float32] */, %573)
}

def @func_9450(%var_9409: Tensor[(4, 14, 3), uint32]) -> (Tensor[(4, 14, 3), bool], Tensor[(4, ?, 3), uint32]) {
  %574 = @func_6677() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %575 = %574.0;
  %576 = cast(%575, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %577 = cast(%var_9409, dtype="bool") /* ty=Tensor[(4, 14, 3), bool] */;
  %578 = @func_4775() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %579 = logical_or(%576, %577) /* ty=Tensor[(4, 14, 3), bool] */;
  %580 = %578.0;
  (%579, %580)
}

def @func_7465(%var_7458: Tensor[(1008), uint64], %var_7459: Tensor[(520), bool], %var_7460: Tensor[(330, 2), float32]) -> (Tensor[(4, 13, 16), uint64], Tensor[(288), uint32], Tensor[(12), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(330, 2), float32], Tensor[(1540), float64], Tensor[(2, 24), uint32]) {
  %581 = @func_4277() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %582 = cast(meta[relay.Constant][37] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %583 = cast(%var_7458, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %584 = cast(%var_7459, dtype="bool") /* ty=Tensor[(520), bool] */;
  %585 = cast(%var_7460, dtype="float32") /* ty=Tensor[(330, 2), float32] */;
  %586 = cast(meta[relay.Constant][38] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %587 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 24), uint32] */, dtype="uint32") /* ty=Tensor[(2, 24), uint32] */;
  %588 = reshape(%582, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
  %589 = reshape(%583, newshape=[4, 252]) /* ty=Tensor[(4, 252), uint64] */;
  %590 = reshape(%584, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %591 = reshape(%585, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %592 = reshape(%586, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
  %593 = reshape(%587, newshape=[48, 1]) /* ty=Tensor[(48, 1), uint32] */;
  %594 = @func_4599(%588, %589, %590, %591, %592, %593) /* ty=(Tensor[(4, ?, 3), bool], Tensor[(1008), uint64], Tensor[(4, 252), uint64], Tensor[(520), bool], Tensor[(4, 13, 16), uint64], Tensor[(660), float32], Tensor[(4, 13, 10), bool], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 4, 3), float32], Tensor[(48, 1), uint32], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(3, 96), float64], Tensor[(288), uint32]) */;
  %595 = %581.0;
  %596 = %594.15;
  (%595, %596, meta[relay.Constant][37] /* ty=Tensor[(12), uint32] */, %var_7458, %var_7459, %var_7460, meta[relay.Constant][38] /* ty=Tensor[(1540), float64] */, meta[relay.Constant][39] /* ty=Tensor[(2, 24), uint32] */)
}

def @func_3444(%var_3376: Tensor[(8, 15, 5), uint64], %var_3377: Tensor[(8, 15, 5), uint64], %var_3416: Tensor[(832), uint64]) -> (Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), float64], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool]) {
  %597 = cast(%var_3377, dtype="uint64") /* ty=Tensor[(8, 15, 5), uint64] */;
  %598 = shape_of(%var_3376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%var_3376, dtype="uint64") /* ty=Tensor[(8, 15, 5), uint64] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %601 = cast(%var_3377, dtype="float64") /* ty=Tensor[(8, 15, 5), float64] */;
  %602 = cast(%var_3416, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %603 = reshape(%602, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %604 = @func_33(%603) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %605 = cast(meta[relay.Constant][40] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %606 = cast(meta[relay.Constant][41] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %607 = reshape(%605, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %608 = reshape(%606, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %609 = @func_2941(%607, %608) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */;
  %610 = add(%599, %600) /* ty=Tensor[(8, 15, 5), uint64] */;
  %611 = atan(%601) /* ty=Tensor[(8, 15, 5), float64] */;
  %612 = %604.0;
  %613 = %609.0;
  (%610, %611, %612, %var_3416, %613, meta[relay.Constant][40] /* ty=Tensor[(1008), uint64] */, meta[relay.Constant][41] /* ty=Tensor[(520), bool] */)
}

def @func_8087(%var_8081: Tensor[(14), float32], %var_8082: Tensor[(154), float32]) -> (Tensor[(4, ?, 3), float64], Tensor[(11, 2, 7), float64], Tensor[(14), float32], Tensor[(154), float32]) {
  %614 = @func_7342() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(4, ?, 3), uint32]) */;
  %615 = cast(%var_8081, dtype="float32") /* ty=Tensor[(14), float32] */;
  %616 = cast(%var_8082, dtype="float32") /* ty=Tensor[(154), float32] */;
  %617 = reshape(%615, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), float32] */;
  %618 = reshape(%616, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float32] */;
  %619 = @func_6658(%617, %618) /* ty=(Tensor[(11, 2, 7), float64],) */;
  %620 = %614.0;
  %621 = %619.0;
  (%620, %621, %var_8081, %var_8082)
}

def @func_10742() -> Tensor[(4, ?, 3), uint32] {
  @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_10807(%var_10795: Tensor[(1008), uint64], %var_10796: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, 13, 10), bool], Tensor[(832), uint64]) {
  %622 = @func_10636() /* ty=(Tensor[(4, ?, 3), float32],) */;
  %623 = cast(%var_10795, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %624 = cast(%var_10796, dtype="bool") /* ty=Tensor[(520), bool] */;
  %625 = reshape(%623, newshape=[1008, 1]) /* ty=Tensor[(1008, 1), uint64] */;
  %626 = reshape(%624, newshape=[1, 520]) /* ty=Tensor[(1, 520), bool] */;
  %627 = @func_8133(%625, %626) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(1008, 1), uint64], Tensor[(1, 520), bool]) */;
  %628 = cast(meta[relay.Constant][42] /* ty=Tensor[(143), int8] */, dtype="int8") /* ty=Tensor[(143), int8] */;
  %629 = cast(meta[relay.Constant][43] /* ty=Tensor[(2288), int8] */, dtype="int8") /* ty=Tensor[(2288), int8] */;
  %630 = reshape(%628, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), int8] */;
  %631 = reshape(%629, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), int8] */;
  %632 = @func_10266(%630, %631) /* ty=(Tensor[(13, 16, 11), int8], Tensor[(1040), float64], Tensor[(13, 16, 11), uint16], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %633 = cast(%var_10796, dtype="bool") /* ty=Tensor[(520), bool] */;
  %634 = cast(meta[relay.Constant][44] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %635 = reshape(%633, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %636 = reshape(%634, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %637 = @func_215(%635, %636) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %638 = %622.0;
  %639 = %627.1;
  %640 = %632.4;
  %641 = %637.0;
  (%638, %639, %var_10795, %var_10796, %640, meta[relay.Constant][42] /* ty=Tensor[(143), int8] */, meta[relay.Constant][43] /* ty=Tensor[(2288), int8] */, %641, meta[relay.Constant][44] /* ty=Tensor[(832), uint64] */)
}

def @func_5095() -> Tensor[(4, ?, 3), uint32] {
  %642 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %642.0
}

def @func_12782() -> Tensor[(1040), float64] {
  @func_12651() /* ty=Tensor[(1040), float64] */
}

def @func_6723() -> (Tensor[(1040), float64],) {
  %643 = @func_4332() /* ty=Tensor[(1040), float64] */;
  (%643,)
}

def @func_9226(%var_9213: Tensor[(4, 14, 3), uint32]) -> (Tensor[(4, 14, 3), float32],) {
  %644 = @func_7897() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint64], Tensor[(14, 11, 10), float64]) */;
  %645 = %644.0;
  %646 = cast(%645, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %647 = cast(%var_9213, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
  %648 = power(%646, %647) /* ty=Tensor[(4, 14, 3), float32] */;
  (%648,)
}

def @func_6521() -> Tensor[(4, ?, 3), float64] {
  %649 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
  %649.0
}

def @func_7982() -> Tensor[(4, ?, 3), float32] {
  %650 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  atan(%651) /* ty=Tensor[(4, ?, 3), float32] */
}

def @func_11546(%var_11542: Tensor[(660), float32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(14, 11, 10), float64], Tensor[(1, 1540), float64], Tensor[(660), float32], Tensor[(660), float32]) {
  %652 = @func_10293() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %653 = cast(meta[relay.Constant][45] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %654 = cast(meta[relay.Constant][46] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %655 = reshape(%653, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %656 = reshape(%654, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %657 = @func_2941(%655, %656) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */;
  %658 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 1540), float64] */, dtype="float64") /* ty=Tensor[(1, 1540), float64] */;
  %659 = reshape(%658, newshape=[14, 11, 10]) /* ty=Tensor[(14, 11, 10), float64] */;
  %660 = @func_2441(%659) /* ty=(Tensor[(14, 11, 10), float64],) */;
  %661 = @func_10518() /* ty=Tensor[(1040), float64] */;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %663 = cast(%var_11542, dtype="float32") /* ty=Tensor[(660), float32] */;
  %664 = reshape(%662, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %665 = reshape(%663, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %666 = @func_5164(%664, %665) /* ty=(Tensor[(1040), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32]) */;
  %667 = %652.0;
  %668 = %657.0;
  %669 = %660.0;
  %670 = %666.3;
  (%667, %661, %668, meta[relay.Constant][45] /* ty=Tensor[(1008), uint64] */, meta[relay.Constant][46] /* ty=Tensor[(520), bool] */, %669, meta[relay.Constant][47] /* ty=Tensor[(1, 1540), float64] */, %670, %var_11542)
}

def @func_11435(%var_11415: Tensor[(66, 2), float32], %var_11424: Tensor[(143), int8], %var_11425: Tensor[(2288), int8]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(12, 11, 7), float32], Tensor[(66, 2), float32], Tensor[(143), int8], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, ?, 3), uint32]) {
  %671 = @func_6860() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %672 = @func_9119() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %673 = cast(%var_11415, dtype="float32") /* ty=Tensor[(66, 2), float32] */;
  %674 = reshape(%673, newshape=[12, 11, 1]) /* ty=Tensor[(12, 11, 1), float32] */;
  %675 = cast(%var_11424, dtype="int8") /* ty=Tensor[(143), int8] */;
  %676 = cast(%var_11425, dtype="int8") /* ty=Tensor[(2288), int8] */;
  %677 = reshape(%675, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %678 = reshape(%676, newshape=[1144, 2]) /* ty=Tensor[(1144, 2), int8] */;
  %679 = @func_10615(%677, %678) /* ty=(Tensor[(1040), float64], Tensor[(4, ?, 3), bool], Tensor[(13, 16, 11), int8], Tensor[(143), int8], Tensor[(1144, 2), float64]) */;
  %680 = %671.0;
  %681 = %672.0;
  %682 = @func_3284(%674) /* ty=Tensor[(12, 11, 7), float32] */;
  %683 = %679.3;
  %684 = @func_7564() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%680, %681, %682, %var_11415, %683, %var_11424, %var_11425, %684)
}

def @func_6627() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) {
  %685 = @func_6358() /* ty=Tensor[(4, 13, 16), uint64] */;
  %686 = cast(%685, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %687 = reshape(%686, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %688 = @func_33(%687) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %689 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %690 = %688.0;
  %691 = %689.1;
  (%685, %690, %691)
}

def @func_12490(%var_12475: Tensor[(4, 11, 3), uint32]) -> Tensor[(4, 11, 3), int32] {
  %692 = @func_11692() /* ty=Tensor[(4, ?, 3), uint32] */;
  %693 = cast(%692, dtype="int32") /* ty=Tensor[(4, ?, 3), int32] */;
  %694 = cast(%var_12475, dtype="int32") /* ty=Tensor[(4, 11, 3), int32] */;
  right_shift(%693, %694) /* ty=Tensor[(4, 11, 3), int32] */
}

def @func_9172() -> (Tensor[(4, ?, 3), float32],) {
  %695 = @func_7982() /* ty=Tensor[(4, ?, 3), float32] */;
  (%695,)
}

def @func_9911() -> (Tensor[(660), float32], Tensor[(4, ?, 3), uint32], Tensor[(8, 12), uint32], Tensor[(96), uint32], Tensor[(520), bool], Tensor[(832), uint64]) {
  %696 = @func_5033() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %697 = @func_6009() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %698 = cast(meta[relay.Constant][48] /* ty=Tensor[(96), uint32] */, dtype="uint32") /* ty=Tensor[(96), uint32] */;
  %699 = cast(meta[relay.Constant][49] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %700 = reshape(%698, newshape=[8, 12]) /* ty=Tensor[(8, 12), uint32] */;
  %701 = reshape(%699, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %702 = @func_3213(%700, %701) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 8, 3), bool], Tensor[(8, 12), uint32], Tensor[(4, 1040, 3), int16], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(4, 13, 16), float32]) */;
  %703 = @func_6985() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64]) */;
  %704 = %696.1;
  %705 = %697.0;
  %706 = %702.2;
  %707 = %703.2;
  (%704, %705, %706, meta[relay.Constant][48] /* ty=Tensor[(96), uint32] */, meta[relay.Constant][49] /* ty=Tensor[(520), bool] */, %707)
}

def @func_2792(%var_2776: Tensor[(520, 2), float64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) {
  %708 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %709 = cast(meta[relay.Constant][50] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %710 = cast(meta[relay.Constant][50] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %711 = cast(meta[relay.Constant][51] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %712 = cast(meta[relay.Constant][52] /* ty=Tensor[(520, 1), bool] */, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
  %713 = cast(meta[relay.Constant][53] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %714 = reshape(%709, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %715 = reshape(%710, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %716 = reshape(%711, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %717 = reshape(%712, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %718 = reshape(%713, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %719 = @func_1020(%714, %715, %716, %717, %718) /* ty=(Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) */;
  %720 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %721 = cast(meta[relay.Constant][50] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %722 = cast(meta[relay.Constant][50] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %723 = cast(meta[relay.Constant][51] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %724 = cast(meta[relay.Constant][52] /* ty=Tensor[(520, 1), bool] */, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %725 = acos(%724) /* ty=Tensor[(520, 1), float64] */;
  %726 = cast(%725, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
  %727 = %719.4;
  %728 = cast(%727, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %729 = reshape(%721, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %730 = reshape(%722, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %731 = reshape(%723, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %732 = reshape(%726, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %733 = reshape(%728, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %734 = @func_1020(%729, %730, %731, %732, %733) /* ty=(Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) */;
  %735 = cast(%725, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %736 = rsqrt(%735) /* ty=Tensor[(520, 1), float64] */;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %738 = acosh(%737) /* ty=Tensor[(520, 1), float64] */;
  %739 = cast(%738, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
  %740 = cast(meta[relay.Constant][53] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %741 = reshape(%739, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %742 = reshape(%740, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %743 = @func_215(%741, %742) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %744 = cast(meta[relay.Constant][50] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %745 = cast(meta[relay.Constant][50] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %746 = cast(meta[relay.Constant][51] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %747 = cast(%736, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
  %748 = %743.1;
  %749 = cast(%748, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %750 = reshape(%744, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %751 = reshape(%745, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %752 = reshape(%746, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %753 = reshape(%747, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %754 = reshape(%749, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %755 = @func_1020(%750, %751, %752, %753, %754) /* ty=(Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) */;
  %756 = cast(%736, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
  %757 = cast(%var_2776, dtype="bool") /* ty=Tensor[(520, 2), bool] */;
  %758 = less(%756, %757) /* ty=Tensor[(520, 2), bool] */;
  %759 = cast(%758, dtype="float32") /* ty=Tensor[(520, 2), float32] */;
  %760 = %708.0;
  %761 = %720.0;
  %762 = %734.6;
  %763 = %755.7;
  %764 = sqrt(%759) /* ty=Tensor[(520, 2), float32] */;
  (%760, %727, meta[relay.Constant][50] /* ty=Tensor[(660), float32] */, meta[relay.Constant][51] /* ty=Tensor[(1008), uint64] */, meta[relay.Constant][53] /* ty=Tensor[(832), uint64] */, %761, %762, %738, %748, %763, %764)
}

def @func_4277() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) {
  %765 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %766 = @func_4026() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) */;
  %767 = %765.1;
  %768 = %766.0;
  (%767, %768)
}

def @func_10949() -> (Tensor[(4, ?, 3), uint32],) {
  %769 = @func_9756() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%769,)
}

def @func_13156() -> Tensor[(4, ?, 3), uint32] {
  %770 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %770.0
}

def @func_3568(%var_3525: Tensor[(4, 1, 3), uint32]) -> (Tensor[(4, ?, 3), uint16],) {
  %771 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  %772 = cast(%var_3525, dtype="int64") /* ty=Tensor[(4, 1, 3), int64] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%771, dtype="int64") /* ty=Tensor[(4, ?, 3), int64] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %776 = right_shift(%774, %775) /* ty=Tensor[(4, ?, 3), int64] */;
  %777 = cast(%771, dtype="uint16") /* ty=Tensor[(4, ?, 3), uint16] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%776, dtype="uint16") /* ty=Tensor[(4, ?, 3), uint16] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %781 = logical_xor(%779, %780) /* ty=Tensor[(4, ?, 3), uint16] */;
  (%781,)
}

def @func_13644() -> (Tensor[(4, ?, 3), uint32],) {
  %782 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %783 = %782.0;
  (%783,)
}

def @func_7137(%var_7130: Tensor[(8, 832), float64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(8, 832), bool]) {
  %784 = cast(meta[relay.Constant][54] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %785 = cast(meta[relay.Constant][55] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %786 = reshape(%784, newshape=[10, 52]) /* ty=Tensor[(10, 52), bool] */;
  %787 = reshape(%785, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %788 = @func_4137(%786, %787) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(10, 52), bool], Tensor[(832), uint64], Tensor[(104, 8), float64]) */;
  %789 = %788.1;
  %790 = cast(%789, dtype="bool") /* ty=Tensor[(1, 832), bool] */;
  %791 = cast(%var_7130, dtype="bool") /* ty=Tensor[(8, 832), bool] */;
  %792 = @func_6143() /* ty=Tensor[(4, ?, 3), uint32] */;
  %793 = less(%790, %791) /* ty=Tensor[(8, 832), bool] */;
  (%792, meta[relay.Constant][54] /* ty=Tensor[(520), bool] */, meta[relay.Constant][55] /* ty=Tensor[(832), uint64] */, %793)
}

def @main(%var_14416: Tensor[(1540), float64], %var_14417: Tensor[(520), bool]) -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1540), float64], Tensor[(520), bool], Tensor[(15, 168), uint64]) {
  %794 = @func_11397() /* ty=(Tensor[(4, ?, 3), int8], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) */;
  %795 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 168), uint32] */, dtype="uint32") /* ty=Tensor[(1, 168), uint32] */;
  %796 = reshape(%795, newshape=[4, 14, 3]) /* ty=Tensor[(4, 14, 3), uint32] */;
  %797 = @func_9450(%796) /* ty=(Tensor[(4, 14, 3), bool], Tensor[(4, ?, 3), uint32]) */;
  %798 = cast(%var_14416, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %799 = cast(%var_14417, dtype="bool") /* ty=Tensor[(520), bool] */;
  %800 = reshape(%798, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
  %801 = reshape(%799, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %802 = @func_3958(%800, %801) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
  %803 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 168), uint32] */, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %804 = asin(%803) /* ty=Tensor[(1, 168), float32] */;
  %805 = cast(%804, dtype="uint64") /* ty=Tensor[(1, 168), uint64] */;
  %806 = cast(meta[relay.Constant][57] /* ty=Tensor[(15, 168), float32] */, dtype="uint64") /* ty=Tensor[(15, 168), uint64] */;
  %807 = %794.2;
  %808 = %797.1;
  %809 = %802.5;
  %810 = bitwise_or(%805, %806) /* ty=Tensor[(15, 168), uint64] */;
  (%807, %808, %809, %var_14416, %var_14417, %810)
}

def @func_5599(%var_5591: Tensor[(1040), float64]) -> (Tensor[(4, ?, 3), float32], Tensor[(4, 9, 3), float64], Tensor[(1008), uint64], Tensor[(1040), float64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(2, 416), uint64]) {
  %811 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %812 = %811.0;
  %813 = cast(%812, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %814 = cast(%812, dtype="uint16") /* ty=Tensor[(4, ?, 3), uint16] */;
  %815 = cast(meta[relay.Constant][58] /* ty=Tensor[(4, 9, 3), uint32] */, dtype="uint16") /* ty=Tensor[(4, 9, 3), uint16] */;
  %816 = right_shift(%814, %815) /* ty=Tensor[(4, 9, 3), uint16] */;
  %817 = cast(%816, dtype="float64") /* ty=Tensor[(4, 9, 3), float64] */;
  %818 = cast(%var_5591, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %819 = reshape(%818, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %820 = @func_2792(%819) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %821 = cast(meta[relay.Constant][59] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %822 = cast(meta[relay.Constant][60] /* ty=Tensor[(2, 416), uint64] */, dtype="uint64") /* ty=Tensor[(2, 416), uint64] */;
  %823 = reshape(%821, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %824 = reshape(%822, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %825 = @func_215(%823, %824) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %826 = acosh(%813) /* ty=Tensor[(4, ?, 3), float32] */;
  %827 = rsqrt(%817) /* ty=Tensor[(4, 9, 3), float64] */;
  %828 = %820.3;
  %829 = %825.0;
  (%826, %827, %828, %var_5591, %829, meta[relay.Constant][59] /* ty=Tensor[(520), bool] */, meta[relay.Constant][60] /* ty=Tensor[(2, 416), uint64] */)
}

def @func_6927() -> (Tensor[(4, ?, 3), uint32],) {
  %830 = @func_4920() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(520, 2), float64]) */;
  %831 = %830.0;
  (%831,)
}

def @func_6938() -> Tensor[(4, ?, 3), uint32] {
  %832 = @func_4304() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %832.0
}

def @func_7962() -> (Tensor[(4, ?, 3), uint32],) {
  %833 = @func_7641() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %834 = %833.0;
  (%834,)
}

def @func_11298() -> Tensor[(4, ?, 3), uint32] {
  @func_6120() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_6358() -> Tensor[(4, 13, 16), uint64] {
  %835 = @func_4277() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %835.0
}

def @func_9756() -> Tensor[(4, ?, 3), uint32] {
  %836 = @func_4304() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %836.0
}

def @func_10266(%var_10226: Tensor[(13, 1, 11), int8], %var_10227: Tensor[(13, 16, 11), int8]) -> (Tensor[(13, 16, 11), int8], Tensor[(1040), float64], Tensor[(13, 16, 11), uint16], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %837 = cast(%var_10226, dtype="int8") /* ty=Tensor[(13, 1, 11), int8] */;
  %838 = cast(%var_10227, dtype="int8") /* ty=Tensor[(13, 16, 11), int8] */;
  %839 = @func_6723() /* ty=(Tensor[(1040), float64],) */;
  %840 = cast(meta[relay.Constant][61] /* ty=Tensor[(13, 16, 11), int8] */, dtype="uint16") /* ty=Tensor[(13, 16, 11), uint16] */;
  %841 = shape_of(%var_10227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%var_10227, dtype="uint16") /* ty=Tensor[(13, 16, 11), uint16] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %844 = @func_5033() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %845 = @func_6677() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %846 = subtract(%837, %838) /* ty=Tensor[(13, 16, 11), int8] */;
  %847 = %839.0;
  %848 = add(%842, %843) /* ty=Tensor[(13, 16, 11), uint16] */;
  %849 = %844.0;
  %850 = %845.0;
  (%846, %847, %848, %849, %850)
}

def @func_8133(%var_8121: Tensor[(1008, 1), uint64], %var_8122: Tensor[(1, 520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(1008, 1), uint64], Tensor[(1, 520), bool]) {
  %851 = @func_6677() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %852 = cast(%var_8121, dtype="uint64") /* ty=Tensor[(1008, 1), uint64] */;
  %853 = cast(%var_8122, dtype="bool") /* ty=Tensor[(1, 520), bool] */;
  %854 = reshape(%852, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %855 = reshape(%853, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %856 = @func_2941(%854, %855) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */;
  %857 = %851.0;
  %858 = @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */;
  %859 = %856.4;
  (%857, %858, %859, %var_8121, %var_8122)
}

def @func_3958(%var_3939: Tensor[(1540), float64], %var_3949: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) {
  %860 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %861 = cast(meta[relay.Constant][62] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %862 = reshape(%861, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), uint32] */;
  %863 = @func_3506(%862) /* ty=(Tensor[(4, 4, 3), float32],) */;
  %864 = %863.0;
  %865 = cast(%864, dtype="float64") /* ty=Tensor[(4, 4, 3), float64] */;
  %866 = cosh(%865) /* ty=Tensor[(4, 4, 3), float64] */;
  %867 = cast(%864, dtype="bool") /* ty=Tensor[(4, 4, 3), bool] */;
  %868 = shape_of(%866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %869 = cast(%866, dtype="bool") /* ty=Tensor[(4, 4, 3), bool] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %871 = cast(%var_3939, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %872 = reshape(%871, newshape=[14, 11, 10]) /* ty=Tensor[(14, 11, 10), float64] */;
  %873 = @func_2441(%872) /* ty=(Tensor[(14, 11, 10), float64],) */;
  %874 = cast(meta[relay.Constant][63] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %875 = cast(%var_3949, dtype="bool") /* ty=Tensor[(520), bool] */;
  %876 = reshape(%874, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %877 = reshape(%875, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %878 = @func_2941(%876, %877) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */;
  %879 = %860.0;
  %880 = greater(%869, %870) /* ty=Tensor[(4, 4, 3), bool] */;
  %881 = %873.0;
  %882 = %878.2;
  (%879, meta[relay.Constant][62] /* ty=Tensor[(48), uint32] */, %880, %881, %var_3939, %882, meta[relay.Constant][63] /* ty=Tensor[(1008), uint64] */, %var_3949)
}

def @func_3094() -> (Tensor[(4, ?, 3), uint32],) {
  %883 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %884 = %883.0;
  (%884,)
}

def @func_7686() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
  %885 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %886 = @func_4277() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %887 = %885.0;
  %888 = %886.0;
  (%887, %888)
}

def @func_4137(%var_4110: Tensor[(10, 52), bool], %var_4111: Tensor[(832), uint64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(10, 52), bool], Tensor[(832), uint64], Tensor[(104, 8), float64]) {
  %889 = cast(%var_4110, dtype="bool") /* ty=Tensor[(10, 52), bool] */;
  %890 = cast(%var_4111, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %891 = reshape(%889, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %892 = reshape(%890, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %893 = @func_215(%891, %892) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %894 = %893.2;
  %895 = cast(%894, dtype="uint64") /* ty=Tensor[(1, 832), uint64] */;
  %896 = reshape(%895, newshape=[104, 8]) /* ty=Tensor[(104, 8), uint64] */;
  %897 = @func_3662(%896) /* ty=(Tensor[(4, ?, 3), float64], Tensor[(4, 13, 16), uint64], Tensor[(104, 8), uint64]) */;
  %898 = %897.2;
  %899 = cast(%898, dtype="float64") /* ty=Tensor[(104, 8), float64] */;
  %900 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  %901 = asinh(%899) /* ty=Tensor[(104, 8), float64] */;
  (%900, %894, %var_4110, %var_4111, %901)
}

def @func_402(%var_365: Tensor[(8, 9, 14), uint64], %var_366: Tensor[(8, 9, 14), uint64], %var_376: Tensor[(520), bool], %var_377: Tensor[(832), uint64]) -> (Tensor[(8, 9, 14), uint64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 10), bool]) {
  %902 = cast(%var_366, dtype="uint64") /* ty=Tensor[(8, 9, 14), uint64] */;
  %903 = shape_of(%var_365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(%var_365, dtype="uint64") /* ty=Tensor[(8, 9, 14), uint64] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %906 = cast(%var_376, dtype="bool") /* ty=Tensor[(520), bool] */;
  %907 = cast(%var_377, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %908 = reshape(%906, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %909 = reshape(%907, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %910 = @func_215(%908, %909) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %911 = cast(%var_377, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %912 = reshape(%911, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %913 = @func_33(%912) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %914 = %910.0;
  %915 = cast(%914, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
  %916 = %913.0;
  %917 = cast(%916, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %918 = reshape(%915, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %919 = reshape(%917, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %920 = @func_215(%918, %919) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %921 = cast(%914, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
  %922 = cast(%916, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %923 = reshape(%921, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %924 = reshape(%922, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %925 = @func_215(%923, %924) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %926 = subtract(%904, %905) /* ty=Tensor[(8, 9, 14), uint64] */;
  %927 = %920.1;
  %928 = %925.0;
  (%926, %914, %var_376, %var_377, %916, %927, %928)
}

def @func_5364() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %929 = @func_4775() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %930 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %931 = %929.0;
  %932 = %930.0;
  (%931, %932)
}

def @func_7391(%var_7375: Tensor[(520, 2), float64]) -> (Tensor[(4, 4, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(520, 2), int16], Tensor[(1040), float64]) {
  %933 = @func_4026() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) */;
  %934 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %935 = @func_4920() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(520, 2), float64]) */;
  %936 = %935.2;
  %937 = cast(%936, dtype="float64") /* ty=Tensor[(520, 2), float64] */;
  %938 = acosh(%937) /* ty=Tensor[(520, 2), float64] */;
  %939 = cast(%var_7375, dtype="int16") /* ty=Tensor[(520, 2), int16] */;
  %940 = shape_of(%938, dtype="int32") /* ty=Tensor[(2), int32] */;
  %941 = cast(%938, dtype="int16") /* ty=Tensor[(520, 2), int16] */;
  %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %943 = @func_6723() /* ty=(Tensor[(1040), float64],) */;
  %944 = %933.1;
  %945 = %934.0;
  %946 = bitwise_xor(%941, %942) /* ty=Tensor[(520, 2), int16] */;
  %947 = %943.0;
  (%944, %945, %946, %947)
}

def @func_2441(%var_2437: Tensor[(14, 11, 10), float64]) -> (Tensor[(14, 11, 10), float64],) {
  %948 = cast(%var_2437, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
  %949 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(14, 11, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %950 = cast(meta[relay.Constant][64] /* ty=Tensor[(14, 11, 10), float64] */, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
  %951 = dyn.reshape(%948, %949, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %952 = floor_divide(%950, %951) /* ty=Tensor[(14, 11, 10), float64] */;
  (%952,)
}

def @func_10636() -> (Tensor[(4, ?, 3), float32],) {
  %953 = @func_7982() /* ty=Tensor[(4, ?, 3), float32] */;
  (%953,)
}

def @func_10279() -> (Tensor[(4, ?, 3), uint32],) {
  %954 = @func_7564() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%954,)
}

def @func_12660() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) {
  %955 = @func_6627() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) */;
  %956 = @func_9199() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %957 = %955.0;
  %958 = %956.0;
  (%957, %958)
}

def @func_6066() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %959 = @func_4019() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64], Tensor[(4, ?, 3), float64]) */;
  %960 = @func_4019() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64], Tensor[(4, ?, 3), float64]) */;
  %961 = %959.0;
  %962 = %960.0;
  (%961, %962)
}

def @func_10457() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(4, ?, 3), uint32]) {
  %963 = @func_6590() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %964 = @func_6009() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %965 = @func_9657() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1540), float64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), int8]) */;
  %966 = @func_9346() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %967 = %963.0;
  %968 = %964.0;
  %969 = %965.4;
  %970 = %966.0;
  (%967, %968, %969, %970)
}

def @func_6590() -> (Tensor[(4, ?, 3), uint32],) {
  %971 = @func_5995() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%971,)
}

def @func_4991() -> Tensor[(4, ?, 3), uint32] {
  %972 = @func_4775() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %972.0
}

def @func_8376() -> (Tensor[(4, ?, 3), uint32],) {
  %973 = @func_4844() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%973,)
}

def @func_12032(%var_12024: Tensor[(5, 104), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(143), int8], Tensor[(504, 2), uint64], Tensor[(5, 104), bool]) {
  %974 = @func_9346() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %975 = @func_5033() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %976 = cast(meta[relay.Constant][65] /* ty=Tensor[(504, 2), uint64] */, dtype="uint64") /* ty=Tensor[(504, 2), uint64] */;
  %977 = cast(%var_12024, dtype="bool") /* ty=Tensor[(5, 104), bool] */;
  %978 = reshape(%976, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %979 = reshape(%977, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %980 = @func_10807(%978, %979) /* ty=(Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, 13, 10), bool], Tensor[(832), uint64]) */;
  %981 = %974.0;
  %982 = @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */;
  %983 = %975.3;
  %984 = %980.5;
  (%981, %982, %983, %984, meta[relay.Constant][65] /* ty=Tensor[(504, 2), uint64] */, %var_12024)
}

def @func_10776() -> Tensor[(4, ?, 3), uint32] {
  @func_5095() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_10909() -> (Tensor[(4, ?, 3), uint32],) {
  %985 = @func_6938() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%985,)
}

def @func_12310() -> Tensor[(4, ?, 3), uint32] {
  %986 = @func_7196() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %986.0
}

def @func_13474() -> (Tensor[(4, ?, 3), uint32],) {
  %987 = @func_12453() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %988 = %987.0;
  (%988,)
}

def @func_5417(%var_5408: uint16, %var_5409: Tensor[(2, 1, 6), uint16]) -> (Tensor[(2, 1, 6), uint16],) {
  %989 = cast(%var_5408, dtype="uint16") /* ty=uint16 */;
  %990 = cast(%var_5409, dtype="uint16") /* ty=Tensor[(2, 1, 6), uint16] */;
  %991 = bitwise_and(%989, %990) /* ty=Tensor[(2, 1, 6), uint16] */;
  (%991,)
}

def @func_7761(%var_7735: Tensor[(7, 2, 4), float64]) -> (Tensor[(7, 2, 4), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %992 = cast(%var_7735, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
  %993 = @func_7641() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %994 = @func_5485() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %995 = log10(%992) /* ty=Tensor[(7, 2, 4), float64] */;
  %996 = %993.0;
  %997 = %994.0;
  (%995, %996, %997)
}

def @func_6908() -> (Tensor[(4, ?, 3), uint32],) {
  %998 = @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%998,)
}

def @func_3017(%var_2957: Tensor[(4, 1, 3), uint32], %var_2986: Tensor[(832), uint64]) -> (Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), float32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64]) {
  %999 = cast(%var_2986, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %1000 = reshape(%999, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %1001 = @func_33(%1000) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %1002 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1003 = cast(%var_2957, dtype="int64") /* ty=Tensor[(4, 1, 3), int64] */;
  %1004 = shape_of(%1002, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1005 = cast(%1002, dtype="int64") /* ty=Tensor[(4, ?, 3), int64] */;
  %1006 = dyn.reshape(%1003, %1004, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1007 = subtract(%1005, %1006) /* ty=Tensor[(4, ?, 3), int64] */;
  %1008 = cast(%1007, dtype="float64") /* ty=Tensor[(4, ?, 3), float64] */;
  %1009 = rsqrt(%1008) /* ty=Tensor[(4, ?, 3), float64] */;
  %1010 = cast(%var_2957, dtype="float32") /* ty=Tensor[(4, 1, 3), float32] */;
  %1011 = shape_of(%1009, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1012 = cast(%1009, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1014 = cast(meta[relay.Constant][66] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %1015 = reshape(%1014, newshape=[14, 11, 10]) /* ty=Tensor[(14, 11, 10), float64] */;
  %1016 = @func_2441(%1015) /* ty=(Tensor[(14, 11, 10), float64],) */;
  %1017 = %1001.0;
  %1018 = floor_mod(%1012, %1013) /* ty=Tensor[(4, ?, 3), float32] */;
  %1019 = %1016.0;
  (%1017, %var_2986, %1018, %1019, meta[relay.Constant][66] /* ty=Tensor[(1540), float64] */)
}

def @func_13086() -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64]) {
  %1020 = @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1021 = @func_10518() /* ty=Tensor[(1040), float64] */;
  (%1020, %1021)
}

def @func_7855() -> Tensor[(4, ?, 3), uint32] {
  %1022 = @func_4277() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %1022.1
}

def @func_2941(%var_2918: Tensor[(1008), uint64], %var_2919: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) {
  %1023 = cast(meta[relay.Constant][67] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %1024 = cast(meta[relay.Constant][67] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %1025 = cast(%var_2918, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %1026 = cast(%var_2919, dtype="bool") /* ty=Tensor[(520), bool] */;
  %1027 = cast(meta[relay.Constant][68] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %1028 = reshape(%1023, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %1029 = reshape(%1024, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %1030 = reshape(%1025, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %1031 = reshape(%1026, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %1032 = reshape(%1027, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %1033 = @func_1020(%1028, %1029, %1030, %1031, %1032) /* ty=(Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) */;
  %1034 = cast(meta[relay.Constant][69] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %1035 = shape_of(meta[relay.Constant][68] /* ty=Tensor[(832), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1036 = cast(meta[relay.Constant][68] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %1037 = dyn.reshape(%1034, %1035, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %1038 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1039 = %1033.0;
  %1040 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1041 = bitwise_and(%1036, %1037) /* ty=Tensor[(832), uint64] */;
  (%1038, %1039, meta[relay.Constant][67] /* ty=Tensor[(660), float32] */, %var_2918, %var_2919, %1040, %1041)
}

def @func_8778(%var_8747: Tensor[(12, 12, 16), float32], %var_8775: Tensor[(832, 1), uint64]) -> (Tensor[(12, 12, 16), float32], Tensor[(4, 13, 16), uint64], Tensor[(832, 1), uint64]) {
  %1042 = cast(%var_8747, dtype="float32") /* ty=Tensor[(12, 12, 16), float32] */;
  %1043 = cast(%var_8775, dtype="uint64") /* ty=Tensor[(832, 1), uint64] */;
  %1044 = reshape(%1043, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %1045 = @func_33(%1044) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %1046 = sigmoid(%1042) /* ty=Tensor[(12, 12, 16), float32] */;
  %1047 = %1045.0;
  (%1046, %1047, %var_8775)
}

def @func_9346() -> (Tensor[(4, ?, 3), uint32],) {
  %1048 = @func_6860() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %1049 = %1048.1;
  (%1049,)
}

def @func_3845() -> Tensor[(4, ?, 3), uint32] {
  %1050 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %1050.0
}

def @func_5788(%var_5773: Tensor[(4, 1, 3), uint32]) -> (Tensor[(4, ?, 3), bool], Tensor[(4, ?, 3), uint32]) {
  %1051 = @func_3845() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1052 = cast(%var_5773, dtype="bool") /* ty=Tensor[(4, 1, 3), bool] */;
  %1053 = shape_of(%1051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1054 = cast(%1051, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %1055 = dyn.reshape(%1052, %1053, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1056 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %1057 = equal(%1054, %1055) /* ty=Tensor[(4, ?, 3), bool] */;
  %1058 = %1056.0;
  (%1057, %1058)
}

def @func_9966() -> (Tensor[(4, 13, 16), uint64],) {
  %1059 = @func_7560() /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %1060 = %1059.0;
  (%1060,)
}

def @func_6825(%var_6805: Tensor[(832), uint64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(832), uint64]) {
  %1061 = @func_5721() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1062 = %1061.0;
  %1063 = cast(%1062, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
  %1064 = cast(%var_6805, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %1065 = reshape(%1063, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
  %1066 = reshape(%1064, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %1067 = @func_3017(%1065, %1066) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), float32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64]) */;
  %1068 = %1067.3;
  (%1062, %1068, %var_6805)
}

def @func_13744() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(13, 16, 11), int8], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), bool], Tensor[(4, ?, 3), uint32]) {
  %1069 = @func_10279() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1070 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1071 = cast(meta[relay.Constant][70] /* ty=Tensor[(143), int8] */, dtype="int8") /* ty=Tensor[(143), int8] */;
  %1072 = cast(meta[relay.Constant][71] /* ty=Tensor[(2288), int8] */, dtype="int8") /* ty=Tensor[(2288), int8] */;
  %1073 = reshape(%1071, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), int8] */;
  %1074 = reshape(%1072, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), int8] */;
  %1075 = @func_10266(%1073, %1074) /* ty=(Tensor[(13, 16, 11), int8], Tensor[(1040), float64], Tensor[(13, 16, 11), uint16], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %1076 = @func_6009() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1077 = %1076.0;
  %1078 = cast(%1077, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %1079 = log(%1078) /* ty=Tensor[(4, ?, 3), float32] */;
  %1080 = @func_6938() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1081 = cast(%1080, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %1082 = shape_of(%1079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1083 = cast(%1079, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %1084 = dyn.reshape(%1081, %1082, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1085 = @func_13474() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1086 = %1069.0;
  %1087 = %1070.0;
  %1088 = %1075.0;
  %1089 = @func_3845() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1090 = less(%1083, %1084) /* ty=Tensor[(4, ?, 3), bool] */;
  %1091 = %1085.0;
  (%1086, %1087, %1088, meta[relay.Constant][70] /* ty=Tensor[(143), int8] */, meta[relay.Constant][71] /* ty=Tensor[(2288), int8] */, %1089, %1090, %1091)
}

def @func_12651() -> Tensor[(1040), float64] {
  @func_4332() /* ty=Tensor[(1040), float64] */
}

def @func_6658(%var_6636: Tensor[(1, 2, 7), float32], %var_6642: Tensor[(11, 2, 7), float32]) -> (Tensor[(11, 2, 7), float64],) {
  %1092 = cast(%var_6636, dtype="float32") /* ty=Tensor[(1, 2, 7), float32] */;
  %1093 = cos(%1092) /* ty=Tensor[(1, 2, 7), float32] */;
  %1094 = cast(%1093, dtype="float64") /* ty=Tensor[(1, 2, 7), float64] */;
  %1095 = cast(%var_6642, dtype="float64") /* ty=Tensor[(11, 2, 7), float64] */;
  %1096 = power(%1094, %1095) /* ty=Tensor[(11, 2, 7), float64] */;
  (%1096,)
}

def @func_10615(%var_10598: Tensor[(143), int8], %var_10599: Tensor[(1144, 2), int8]) -> (Tensor[(1040), float64], Tensor[(4, ?, 3), bool], Tensor[(13, 16, 11), int8], Tensor[(143), int8], Tensor[(1144, 2), float64]) {
  %1097 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %1098 = @func_7564() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1099 = @func_6860() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %1100 = %1099.1;
  %1101 = cast(%1100, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %1102 = shape_of(%1098, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1103 = cast(%1098, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %1104 = dyn.reshape(%1101, %1102, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1105 = cast(%var_10598, dtype="int8") /* ty=Tensor[(143), int8] */;
  %1106 = cast(%var_10599, dtype="int8") /* ty=Tensor[(1144, 2), int8] */;
  %1107 = reshape(%1105, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), int8] */;
  %1108 = reshape(%1106, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), int8] */;
  %1109 = @func_10266(%1107, %1108) /* ty=(Tensor[(13, 16, 11), int8], Tensor[(1040), float64], Tensor[(13, 16, 11), uint16], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %1110 = cast(%var_10599, dtype="float64") /* ty=Tensor[(1144, 2), float64] */;
  %1111 = %1097.2;
  %1112 = greater(%1103, %1104) /* ty=Tensor[(4, ?, 3), bool] */;
  %1113 = %1109.0;
  %1114 = asinh(%1110) /* ty=Tensor[(1144, 2), float64] */;
  (%1111, %1112, %1113, %var_10598, %1114)
}

def @func_6985() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64]) {
  %1115 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1116 = cast(meta[relay.Constant][72] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %1117 = reshape(%1116, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %1118 = @func_33(%1117) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %1119 = %1115.0;
  %1120 = %1118.0;
  (%1119, %1120, meta[relay.Constant][72] /* ty=Tensor[(832), uint64] */)
}

def @func_9657() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1540), float64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), int8]) {
  %1121 = @func_8320() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float64]) */;
  %1122 = @func_8224() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %1123 = cast(meta[relay.Constant][73] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %1124 = cast(meta[relay.Constant][74] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %1125 = reshape(%1123, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
  %1126 = reshape(%1124, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %1127 = @func_3958(%1125, %1126) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
  %1128 = cast(meta[relay.Constant][74] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %1129 = reshape(%1128, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %1130 = @func_8294(%1129) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1, 1540), float64], Tensor[(520), bool]) */;
  %1131 = %1122.1;
  %1132 = cast(%1131, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
  %1133 = reshape(%1132, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
  %1134 = @func_5788(%1133) /* ty=(Tensor[(4, ?, 3), bool], Tensor[(4, ?, 3), uint32]) */;
  %1135 = %1134.0;
  %1136 = @func_6419() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1137 = %1136.0;
  %1138 = cast(%1137, dtype="int8") /* ty=Tensor[(4, ?, 3), int8] */;
  %1139 = shape_of(%1135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1140 = cast(%1135, dtype="int8") /* ty=Tensor[(4, ?, 3), int8] */;
  %1141 = dyn.reshape(%1138, %1139, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1142 = %1121.0;
  %1143 = %1127.6;
  %1144 = %1130.2;
  %1145 = bitwise_or(%1140, %1141) /* ty=Tensor[(4, ?, 3), int8] */;
  (%1142, %1131, %1143, meta[relay.Constant][73] /* ty=Tensor[(1540), float64] */, meta[relay.Constant][74] /* ty=Tensor[(520), bool] */, %1144, %1145)
}

def @func_5485() -> (Tensor[(4, ?, 3), uint32],) {
  %1146 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %1147 = %1146.0;
  (%1147,)
}

def @func_4019() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64], Tensor[(4, ?, 3), float64]) {
  %1148 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %1149 = cast(meta[relay.Constant][75] /* ty=Tensor[(416, 2), uint64] */, dtype="uint64") /* ty=Tensor[(416, 2), uint64] */;
  %1150 = reshape(%1149, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %1151 = @func_33(%1150) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %1152 = cast(meta[relay.Constant][75] /* ty=Tensor[(416, 2), uint64] */, dtype="uint64") /* ty=Tensor[(416, 2), uint64] */;
  %1153 = reshape(%1152, newshape=[104, 8]) /* ty=Tensor[(104, 8), uint64] */;
  %1154 = @func_3662(%1153) /* ty=(Tensor[(4, ?, 3), float64], Tensor[(4, 13, 16), uint64], Tensor[(104, 8), uint64]) */;
  %1155 = %1148.0;
  %1156 = %1151.0;
  %1157 = %1154.0;
  (%1155, %1156, meta[relay.Constant][75] /* ty=Tensor[(416, 2), uint64] */, %1157)
}

def @func_7564() -> Tensor[(4, ?, 3), uint32] {
  %1158 = @func_7083() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1158.0
}

def @func_11061() -> (Tensor[(4, ?, 3), uint32],) {
  %1159 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%1159,)
}

def @func_4240() -> (Tensor[(4, ?, 3), uint32],) {
  %1160 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1161 = %1160.0;
  (%1161,)
}

def @func_9091() -> (Tensor[(4, ?, 3), uint32],) {
  %1162 = @func_7196() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1163 = %1162.0;
  (%1163,)
}

def @func_10102() -> (Tensor[(1040), float64], Tensor[(4, 4, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(108), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 9, 3), float32], Tensor[(4, ?, 3), uint32]) {
  %1164 = @func_6723() /* ty=(Tensor[(1040), float64],) */;
  %1165 = %1164.0;
  %1166 = cast(%1165, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %1167 = reshape(%1166, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %1168 = @func_7391(%1167) /* ty=(Tensor[(4, 4, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(520, 2), int16], Tensor[(1040), float64]) */;
  %1169 = @func_5670() /* ty=(Tensor[(4, ?, 3), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %1170 = @func_6927() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1171 = cast(meta[relay.Constant][76] /* ty=Tensor[(108), uint32] */, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %1172 = reshape(%1171, newshape=[3, 36]) /* ty=Tensor[(3, 36), uint32] */;
  %1173 = @func_8884(%1172) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, 9, 3), bool], Tensor[(3, 36), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %1174 = @func_6066() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %1175 = cast(meta[relay.Constant][76] /* ty=Tensor[(108), uint32] */, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %1176 = reshape(%1175, newshape=[4, 9, 3]) /* ty=Tensor[(4, 9, 3), uint32] */;
  %1177 = @func_4814(%1176) /* ty=(Tensor[(4, 9, 3), bool], Tensor[(4, 9, 3), float32]) */;
  %1178 = @func_6908() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1179 = %1168.0;
  %1180 = %1169.2;
  %1181 = %1170.0;
  %1182 = %1173.4;
  %1183 = %1174.0;
  %1184 = %1177.1;
  %1185 = %1178.0;
  (%1165, %1179, %1180, %1181, %1182, meta[relay.Constant][76] /* ty=Tensor[(108), uint32] */, %1183, %1184, %1185)
}

def @func_8675(%var_8582: Tensor[(832), uint64], %var_8666: Tensor[(48), uint32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 11, 4), bool], Tensor[(4, ?, 3), float64], Tensor[(832), float64], Tensor[(4, ?, 3), float64], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) {
  %1186 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1187 = cast(%var_8582, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %1188 = reshape(%1187, newshape=[104, 8]) /* ty=Tensor[(104, 8), uint64] */;
  %1189 = @func_3662(%1188) /* ty=(Tensor[(4, ?, 3), float64], Tensor[(4, 13, 16), uint64], Tensor[(104, 8), uint64]) */;
  %1190 = cast(-9.26326f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1191 = reshape(%1190, newshape=[]) /* ty=float64 */;
  %1192 = @func_4974(%1191) /* ty=(Tensor[(1, 11, 4), float64], Tensor[(1, 11, 4), bool], Tensor[(4, ?, 3), uint32], Tensor[(1, 11, 4), bool]) */;
  %1193 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
  %1194 = cast(-9.26326f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1195 = cast(%var_8582, dtype="float64") /* ty=Tensor[(832), float64] */;
  %1196 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
  %1197 = cast(%var_8666, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %1198 = reshape(%1197, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), uint32] */;
  %1199 = @func_3506(%1198) /* ty=(Tensor[(4, 4, 3), float32],) */;
  %1200 = %1186.0;
  %1201 = %1189.1;
  %1202 = @func_7564() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1203 = %1192.1;
  %1204 = %1193.0;
  %1205 = mod(%1194, %1195) /* ty=Tensor[(832), float64] */;
  %1206 = %1196.0;
  %1207 = %1199.0;
  (%1200, %1201, %1202, %1203, %1204, %1205, %1206, %1207, %var_8666)
}

def @func_6009() -> (Tensor[(4, ?, 3), uint32],) {
  %1208 = @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%1208,)
}

def @func_5670() -> (Tensor[(4, ?, 3), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) {
  %1209 = @func_4934() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1210 = cast(%1209, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %1211 = @func_4775() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1212 = erf(%1210) /* ty=Tensor[(4, ?, 3), float32] */;
  %1213 = @func_4332() /* ty=Tensor[(1040), float64] */;
  %1214 = %1211.0;
  (%1212, %1213, %1214)
}

def @func_3073() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) {
  %1215 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1216 = cast(meta[relay.Constant][77] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %1217 = reshape(%1216, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %1218 = @func_2792(%1217) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %1219 = %1215.0;
  %1220 = %1218.8;
  (%1219, %1220, meta[relay.Constant][77] /* ty=Tensor[(1040), float64] */)
}

def @func_6419() -> (Tensor[(4, ?, 3), uint32],) {
  %1221 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%1221,)
}

def @func_11397() -> (Tensor[(4, ?, 3), int8], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) {
  %1222 = @func_9657() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1540), float64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), int8]) */;
  %1223 = @func_7560() /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %1224 = @func_9966() /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %1225 = %1222.6;
  %1226 = %1223.0;
  %1227 = %1224.0;
  (%1225, %1226, %1227)
}

def @func_7729(%var_7726: Tensor[(7, 10, 11), float64]) -> Tensor[(7, 10, 11), float64] {
  %1228 = cast(%var_7726, dtype="float64") /* ty=Tensor[(7, 10, 11), float64] */;
  sqrt(%1228) /* ty=Tensor[(7, 10, 11), float64] */
}

def @func_12416() -> (Tensor[(4, ?, 3), uint32],) {
  %1229 = @func_6254() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1230 = %1229.0;
  (%1230,)
}

def @func_4814(%var_4788: Tensor[(4, 9, 3), uint32]) -> (Tensor[(4, 9, 3), bool], Tensor[(4, 9, 3), float32]) {
  %1231 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1232 = cast(%1231, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %1233 = cast(%var_4788, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %1234 = cast(%var_4788, dtype="float32") /* ty=Tensor[(4, 9, 3), float32] */;
  %1235 = cast(%1231, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %1236 = less(%1232, %1233) /* ty=Tensor[(4, 9, 3), bool] */;
  %1237 = power(%1234, %1235) /* ty=Tensor[(4, 9, 3), float32] */;
  (%1236, %1237)
}

def @func_13050() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %1238 = @func_6009() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1239 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1240 = %1238.0;
  %1241 = %1239.0;
  (%1240, %1241)
}

def @func_9119() -> (Tensor[(4, ?, 3), uint32],) {
  %1242 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1243 = %1242.0;
  (%1243,)
}

def @func_13757() -> (Tensor[(4, ?, 3), uint32],) {
  %1244 = @func_7196() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1245 = %1244.0;
  (%1245,)
}

def @func_9339() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %1246 = @func_4277() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %1247 = @func_4934() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1248 = %1246.1;
  (%1247, %1248)
}

def @func_12291() -> Tensor[(4, ?, 3), uint32] {
  %1249 = @func_10909() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1249.0
}

def @func_12453() -> (Tensor[(4, ?, 3), uint32],) {
  %1250 = @func_11061() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1251 = %1250.0;
  (%1251,)
}

def @func_9066() -> Tensor[(1040), float64] {
  %1252 = @func_6794() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), int8]) */;
  %1252.1
}

def @func_13481(%var_13477: Tensor[(12, 15, 8), float32]) -> (Tensor[(12, 15, 8), float32],) {
  %1253 = cast(%var_13477, dtype="float32") /* ty=Tensor[(12, 15, 8), float32] */;
  %1254 = acosh(%1253) /* ty=Tensor[(12, 15, 8), float32] */;
  (%1254,)
}

def @func_8884(%var_8876: Tensor[(3, 36), uint32]) -> (Tensor[(4, 13, 16), uint64], Tensor[(4, 9, 3), bool], Tensor[(3, 36), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) {
  %1255 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %1256 = cast(%var_8876, dtype="uint32") /* ty=Tensor[(3, 36), uint32] */;
  %1257 = reshape(%1256, newshape=[4, 9, 3]) /* ty=Tensor[(4, 9, 3), uint32] */;
  %1258 = @func_4814(%1257) /* ty=(Tensor[(4, 9, 3), bool], Tensor[(4, 9, 3), float32]) */;
  %1259 = @func_5670() /* ty=(Tensor[(4, ?, 3), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %1260 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1261 = %1255.1;
  %1262 = %1258.0;
  %1263 = %1259.1;
  %1264 = %1260.0;
  (%1261, %1262, %var_8876, %1263, %1264)
}

def @func_4920() -> (Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(520, 2), float64]) {
  %1265 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1266 = cast(meta[relay.Constant][78] /* ty=Tensor[(520, 2), float64] */, dtype="float64") /* ty=Tensor[(520, 2), float64] */;
  %1267 = reshape(%1266, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %1268 = @func_2792(%1267) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %1269 = %1265.0;
  %1270 = %1268.1;
  (%1269, %1270, meta[relay.Constant][78] /* ty=Tensor[(520, 2), float64] */)
}

def @func_6254() -> (Tensor[(4, ?, 3), uint32],) {
  %1271 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1272 = %1271.0;
  (%1272,)
}

def @func_11375() -> Tensor[(4, ?, 3), uint32] {
  %1273 = @func_10102() /* ty=(Tensor[(1040), float64], Tensor[(4, 4, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(108), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 9, 3), float32], Tensor[(4, ?, 3), uint32]) */;
  %1273.4
}

def @func_4406() -> Tensor[(4, ?, 3), uint32] {
  @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_5085() -> (Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) {
  %1274 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1275 = %1274.0;
  %1276 = cast(%1275, dtype="float64") /* ty=Tensor[(4, ?, 3), float64] */;
  %1277 = @func_4019() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64], Tensor[(4, ?, 3), float64]) */;
  %1278 = cosh(%1276) /* ty=Tensor[(4, ?, 3), float64] */;
  %1279 = %1277.2;
  (%1278, %1279)
}

def @func_4844() -> Tensor[(4, ?, 3), uint32] {
  %1280 = @func_4277() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %1280.1
}

def @func_13514() -> (Tensor[(416, 2), float32],) {
  %1281 = @func_7897() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint64], Tensor[(14, 11, 10), float64]) */;
  %1282 = %1281.1;
  %1283 = cast(%1282, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
  %1284 = asinh(%1283) /* ty=Tensor[(416, 2), float32] */;
  (%1284,)
}

def @func_11865() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %1285 = @func_9966() /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %1286 = @func_11375() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1287 = cast(%1286, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
  %1288 = %1285.0;
  %1289 = cast(%1288, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %1290 = reshape(%1287, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
  %1291 = reshape(%1289, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %1292 = @func_3017(%1290, %1291) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), float32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64]) */;
  %1293 = @func_6419() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1294 = cast(%1288, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %1295 = reshape(%1294, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %1296 = @func_6825(%1295) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(832), uint64]) */;
  %1297 = %1292.3;
  %1298 = @func_11657() /* ty=Tensor[(1040), float64] */;
  %1299 = %1293.0;
  %1300 = %1296.0;
  (%1288, %1286, %1297, %1298, %1299, %1300)
}

def @func_12708() -> Tensor[(4, ?, 3), uint32] {
  %1301 = @func_6590() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1301.0
}

def @func_3879() -> (Tensor[(4, ?, 3), uint32],) {
  %1302 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1303 = %1302.0;
  (%1303,)
}

def @func_4775() -> (Tensor[(4, ?, 3), uint32],) {
  %1304 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1305 = %1304.0;
  (%1305,)
}

def @func_12055() -> (Tensor[(4, ?, 3), uint32],) {
  %1306 = @func_10909() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1307 = %1306.0;
  (%1307,)
}

def @func_6677() -> (Tensor[(4, ?, 3), uint32],) {
  %1308 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1309 = %1308.0;
  (%1309,)
}

def @func_10293() -> (Tensor[(4, ?, 3), uint32],) {
  %1310 = @func_7083() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1311 = %1310.0;
  (%1311,)
}

def @func_4225(%var_4212: Tensor[(4, 5, 3), uint32]) -> Tensor[(4, 5, 3), uint32] {
  %1312 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1313 = %1312.0;
  %1314 = cast(%1313, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
  %1315 = cast(%var_4212, dtype="uint32") /* ty=Tensor[(4, 5, 3), uint32] */;
  bitwise_or(%1314, %1315) /* ty=Tensor[(4, 5, 3), uint32] */
}

def @func_11657() -> Tensor[(1040), float64] {
  @func_9066() /* ty=Tensor[(1040), float64] */
}

def @func_2821(%var_2814: Tensor[(4, 8, 3), uint32]) -> (Tensor[(4, 8, 3), bool],) {
  %1316 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1317 = %1316.0;
  %1318 = cast(%1317, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %1319 = cast(%var_2814, dtype="bool") /* ty=Tensor[(4, 8, 3), bool] */;
  %1320 = greater_equal(%1318, %1319) /* ty=Tensor[(4, 8, 3), bool] */;
  (%1320,)
}

def @func_11276(%var_11199: Tensor[(4, 10, 3), uint32], %var_11228: Tensor[(4, 10, 3), uint32], %var_11249: Tensor[(132), float32]) -> (Tensor[(4, 10, 3), int64], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 10, 3), int32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(12, 11, 7), float32], Tensor[(132), float32], Tensor[(4, ?, 3), uint32]) {
  %1321 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1322 = cast(%1321, dtype="int64") /* ty=Tensor[(4, ?, 3), int64] */;
  %1323 = cast(%var_11199, dtype="int64") /* ty=Tensor[(4, 10, 3), int64] */;
  %1324 = @func_4019() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64], Tensor[(4, ?, 3), float64]) */;
  %1325 = cast(%var_11228, dtype="int32") /* ty=Tensor[(4, 10, 3), int32] */;
  %1326 = shape_of(%var_11199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1327 = cast(%var_11199, dtype="int32") /* ty=Tensor[(4, 10, 3), int32] */;
  %1328 = dyn.reshape(%1325, %1326, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1329 = @func_7962() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1330 = @func_10855() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1331 = cast(%var_11249, dtype="float32") /* ty=Tensor[(132), float32] */;
  %1332 = reshape(%1331, newshape=[12, 11, 1]) /* ty=Tensor[(12, 11, 1), float32] */;
  %1333 = @func_10855() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1334 = add(%1322, %1323) /* ty=Tensor[(4, 10, 3), int64] */;
  %1335 = %1324.1;
  %1336 = @func_5995() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1337 = bitwise_xor(%1327, %1328) /* ty=Tensor[(4, 10, 3), int32] */;
  %1338 = %1329.0;
  %1339 = %1330.0;
  %1340 = @func_3284(%1332) /* ty=Tensor[(12, 11, 7), float32] */;
  %1341 = %1333.0;
  (%1334, %1335, %1336, %1337, %1338, %1339, %1340, %var_11249, %1341)
}

def @func_8709() -> Tensor[(4, ?, 3), uint32] {
  @func_7855() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_13173() -> Tensor[(4, 11, 11), float32] {
  %1342 = cast(meta[relay.Constant][79] /* ty=Tensor[(4, 11, 11), float32] */, dtype="float32") /* ty=Tensor[(4, 11, 11), float32] */;
  log2(%1342) /* ty=Tensor[(4, 11, 11), float32] */
}

def @func_7196() -> (Tensor[(4, ?, 3), uint32],) {
  %1343 = @func_6927() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1344 = %1343.0;
  (%1344,)
}

def @func_7560() -> (Tensor[(4, 13, 16), uint64],) {
  %1345 = @func_6627() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) */;
  %1346 = %1345.2;
  (%1346,)
}

def @func_7897() -> (Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint64], Tensor[(14, 11, 10), float64]) {
  %1347 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
  %1348 = %1347.1;
  %1349 = cast(%1348, dtype="uint64") /* ty=Tensor[(416, 2), uint64] */;
  %1350 = reshape(%1349, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %1351 = @func_6825(%1350) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(832), uint64]) */;
  %1352 = @func_5995() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1353 = %1351.1;
  (%1352, %1348, %1353)
}

def @func_10855() -> (Tensor[(4, ?, 3), uint32],) {
  %1354 = @func_6143() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%1354,)
}

def @func_8905(%var_8888: Tensor[(5, 9, 6), float64], %var_8903: Tensor[(1040), float64]) -> (Tensor[(5, 9, 6), float64], Tensor[(1040), float64], Tensor[(1040), float64]) {
  %1355 = cast(%var_8888, dtype="float64") /* ty=Tensor[(5, 9, 6), float64] */;
  %1356 = cast(%var_8903, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %1357 = reshape(%1356, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %1358 = @func_5599(%1357) /* ty=(Tensor[(4, ?, 3), float32], Tensor[(4, 9, 3), float64], Tensor[(1008), uint64], Tensor[(1040), float64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(2, 416), uint64]) */;
  %1359 = acos(%1355) /* ty=Tensor[(5, 9, 6), float64] */;
  %1360 = %1358.3;
  (%1359, %1360, %var_8903)
}

def @func_8224() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) {
  %1361 = @func_7560() /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %1362 = @func_5721() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1363 = %1361.0;
  %1364 = %1362.0;
  (%1363, %1364)
}

def @func_11692() -> Tensor[(4, ?, 3), uint32] {
  %1365 = @func_6590() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1365.0
}

def @func_14123(%var_14116: Tensor[(1, 143), int8]) -> (Tensor[(4, 9, 3), bool], Tensor[(4, ?, 3), uint32], Tensor[(13, 16, 11), int8], Tensor[(1, 143), int8], Tensor[(88, 26), int8]) {
  %1366 = @func_9091() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1367 = %1366.0;
  %1368 = cast(%1367, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %1369 = cast(meta[relay.Constant][80] /* ty=Tensor[(4, 9, 3), uint32] */, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %1370 = cast(%var_14116, dtype="int8") /* ty=Tensor[(1, 143), int8] */;
  %1371 = cast(meta[relay.Constant][81] /* ty=Tensor[(88, 26), int8] */, dtype="int8") /* ty=Tensor[(88, 26), int8] */;
  %1372 = reshape(%1370, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), int8] */;
  %1373 = reshape(%1371, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), int8] */;
  %1374 = @func_10266(%1372, %1373) /* ty=(Tensor[(13, 16, 11), int8], Tensor[(1040), float64], Tensor[(13, 16, 11), uint16], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %1375 = less_equal(%1368, %1369) /* ty=Tensor[(4, 9, 3), bool] */;
  %1376 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1377 = %1374.0;
  (%1375, %1376, %1377, %var_14116, meta[relay.Constant][81] /* ty=Tensor[(88, 26), int8] */)
}

def @func_7342() -> (Tensor[(4, ?, 3), float64], Tensor[(4, ?, 3), uint32]) {
  %1378 = @func_7083() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1379 = @func_6521() /* ty=Tensor[(4, ?, 3), float64] */;
  %1380 = %1378.0;
  (%1379, %1380)
}

def @func_14271(%var_14238: Tensor[(416, 2), uint64]) -> (Tensor[(416, 2), float32], Tensor[(4, ?, 3), uint32]) {
  %1381 = @func_7897() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint64], Tensor[(14, 11, 10), float64]) */;
  %1382 = %1381.1;
  %1383 = cast(%var_14238, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
  %1384 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1385 = cast(%1382, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
  %1386 = dyn.reshape(%1383, %1384, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1387 = divide(%1385, %1386) /* ty=Tensor[(416, 2), float32] */;
  %1388 = cast(%1387, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
  %1389 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1390 = cast(%1382, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
  %1391 = dyn.reshape(%1388, %1389, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1392 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1393 = power(%1390, %1391) /* ty=Tensor[(416, 2), float32] */;
  %1394 = %1392.0;
  (%1393, %1394)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10778() -> Tensor[(4, ?, 3), uint32] {
  @func_10776() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_10857() -> (Tensor[(4, ?, 3), uint32],) {
  @func_10855() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_11933() -> (Tensor[(4, 4, 3), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
  %0 = @func_4026() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(4, 4, 3), float64] */;
  %3 = @func_6627() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) */;
  %4 = log(%2) /* ty=Tensor[(4, 4, 3), float64] */;
  %5 = @func_8709() /* ty=Tensor[(4, ?, 3), uint32] */;
  %6 = %3.1;
  (%4, %5, %6)
}

def @func_13746() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(13, 16, 11), int8], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), bool], Tensor[(4, ?, 3), uint32]) {
  @func_13744() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(13, 16, 11), int8], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), bool], Tensor[(4, ?, 3), uint32]) */
}

def @func_4817(%var_4815: Tensor[(4, 9, 3), uint32]) -> (Tensor[(4, 9, 3), bool], Tensor[(4, 9, 3), float32]) {
  @func_4814(%var_4815) /* ty=(Tensor[(4, 9, 3), bool], Tensor[(4, 9, 3), float32]) */
}

def @func_2944(%var_2942: Tensor[(1008), uint64], %var_2943: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) {
  %26 = fn (%var_2918: Tensor[(1008), uint64], %var_2919: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) {
    %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %9 = cast(%var_2918, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
    %10 = cast(%var_2919, dtype="bool") /* ty=Tensor[(520), bool] */;
    %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %12 = reshape(%7, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
    %13 = reshape(%8, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
    %14 = reshape(%9, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
    %15 = reshape(%10, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %16 = reshape(%11, newshape=[832]) /* ty=Tensor[(832), uint64] */;
    %17 = @func_1020(%12, %13, %14, %15, %16) /* ty=(Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) */;
    %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %19 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(832), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %22 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
    %23 = %17.0;
    %24 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
    %25 = bitwise_and(%20, %21) /* ty=Tensor[(832), uint64] */;
    (%22, %23, meta[relay.Constant][0] /* ty=Tensor[(660), float32] */, %var_2918, %var_2919, %24, %25)
  };
  %26(%var_2942, %var_2943) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */
}

def @func_8838() -> (Tensor[(600), uint64], Tensor[(4, ?, 3), uint32]) {
  %27 = @func_4369() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(600), uint64], Tensor[(832), uint64]) */;
  %28 = @func_7962() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %29 = %27.2;
  %30 = %28.0;
  (%29, %30)
}

def @func_3094() -> (Tensor[(4, ?, 3), uint32],) {
  %31 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %32 = %31.0;
  (%32,)
}

def @func_9806() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
  %36 = fn () -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
    %33 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
    %34 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
    %35 = %33.1;
    (%34, %35)
  };
  %36() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */
}

def @func_13528() -> (Tensor[(416, 2), uint64], Tensor[(4, 13, 16), uint64]) {
  %41 = fn () -> (Tensor[(416, 2), uint64], Tensor[(4, 13, 16), uint64]) {
    %37 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
    %38 = @func_7686() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */;
    %39 = %37.1;
    %40 = %38.1;
    (%39, %40)
  };
  %41() /* ty=(Tensor[(416, 2), uint64], Tensor[(4, 13, 16), uint64]) */
}

def @func_7566() -> Tensor[(4, ?, 3), uint32] {
  @func_7564() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_6360() -> Tensor[(4, 13, 16), uint64] {
  @func_6358() /* ty=Tensor[(4, 13, 16), uint64] */
}

def @func_5997() -> Tensor[(4, ?, 3), uint32] {
  @func_5995() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_13879(%var_13877: Tensor[(520), bool], %var_13878: Tensor[(48), uint32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(660), float32], Tensor[(48), uint32]) {
  %56 = fn (%var_13846: Tensor[(520), bool], %var_13848: Tensor[(48), uint32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(660), float32], Tensor[(48), uint32]) {
    %42 = @func_7560() /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %43 = @func_8376() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %44 = cast(%var_13846, dtype="bool") /* ty=Tensor[(520), bool] */;
    %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %46 = cast(%var_13848, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %47 = reshape(%44, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %48 = reshape(%45, newshape=[660]) /* ty=Tensor[(660), float32] */;
    %49 = reshape(%46, newshape=[48]) /* ty=Tensor[(48), uint32] */;
    %50 = @func_5307(%47, %48, %49) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(660), float32], Tensor[(1540), float64], Tensor[(48), uint32], Tensor[(520), bool], Tensor[(660), float32], Tensor[(4, ?, 3), uint32]) */;
    %51 = @func_7564() /* ty=Tensor[(4, ?, 3), uint32] */;
    %52 = @func_4332() /* ty=Tensor[(1040), float64] */;
    %53 = %42.0;
    %54 = %43.0;
    %55 = %50.9;
    (%51, %52, %53, %54, %55, %var_13846, meta[relay.Constant][3] /* ty=Tensor[(660), float32] */, %var_13848)
  };
  %56(%var_13877, %var_13878) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(660), float32], Tensor[(48), uint32]) */
}

def @func_3484() -> (Tensor[(4, ?, 3), uint32],) {
  @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_5995() -> Tensor[(4, ?, 3), uint32] {
  @func_4844() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_8509(%var_8478: Tensor[(15, 3, 2), uint16], %var_8479: Tensor[(15, 3, 2), uint16]) -> (Tensor[(15, 3, 2), uint16], Tensor[(15, 3, 2), float64], Tensor[(4, ?, 3), uint32]) {
  %57 = cast(%var_8479, dtype="uint16") /* ty=Tensor[(15, 3, 2), uint16] */;
  %58 = shape_of(%var_8478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%var_8478, dtype="uint16") /* ty=Tensor[(15, 3, 2), uint16] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %61 = cast(%var_8479, dtype="float64") /* ty=Tensor[(15, 3, 2), float64] */;
  %62 = right_shift(%59, %60) /* ty=Tensor[(15, 3, 2), uint16] */;
  %63 = cos(%61) /* ty=Tensor[(15, 3, 2), float64] */;
  %64 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%62, %63, %64)
}

def @func_4278() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) {
  %69 = fn () -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) {
    %65 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
    %66 = @func_4026() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) */;
    %67 = %65.1;
    %68 = %66.0;
    (%67, %68)
  };
  %69() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */
}

def @func_10676(%var_10674: Tensor[(10, 16, 4), int8]) -> Tensor[(10, 16, 4), int8] {
  @func_10673(%var_10674) /* ty=Tensor[(10, 16, 4), int8] */
}

def @func_4334() -> Tensor[(1040), float64] {
  @func_4332() /* ty=Tensor[(1040), float64] */
}

def @func_6929() -> (Tensor[(4, ?, 3), uint32],) {
  @func_6927() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_12661() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) {
  %74 = fn () -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) {
    %70 = @func_6627() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) */;
    %71 = @func_9199() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
    %72 = %70.0;
    %73 = %71.0;
    (%72, %73)
  };
  %74() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */
}

def @func_11172(%var_11170: Tensor[(1144, 2), int8]) -> (Tensor[(4, 13, 16), uint64], Tensor[(143), int8], Tensor[(143), int8], Tensor[(1144, 2), int8], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  @func_11169(%var_11170) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(143), int8], Tensor[(143), int8], Tensor[(1144, 2), int8], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */
}

def @func_7962() -> (Tensor[(4, ?, 3), uint32],) {
  %75 = @func_7641() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %76 = %75.0;
  (%76,)
}

def @func_7085() -> (Tensor[(4, ?, 3), uint32],) {
  @func_7083() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_13483(%var_13482: Tensor[(12, 15, 8), float32]) -> (Tensor[(12, 15, 8), float32],) {
  %79 = fn (%var_13477: Tensor[(12, 15, 8), float32]) -> (Tensor[(12, 15, 8), float32],) {
    %77 = cast(%var_13477, dtype="float32") /* ty=Tensor[(12, 15, 8), float32] */;
    %78 = acosh(%77) /* ty=Tensor[(12, 15, 8), float32] */;
    (%78,)
  };
  %79(%var_13482) /* ty=(Tensor[(12, 15, 8), float32],) */
}

def @func_6358() -> Tensor[(4, 13, 16), uint64] {
  %80 = @func_4277() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %80.0
}

def @func_13474() -> (Tensor[(4, ?, 3), uint32],) {
  %81 = @func_12453() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %82 = %81.0;
  (%82,)
}

def @func_4137(%var_4110: Tensor[(10, 52), bool], %var_4111: Tensor[(832), uint64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(10, 52), bool], Tensor[(832), uint64], Tensor[(104, 8), float64]) {
  %83 = cast(%var_4110, dtype="bool") /* ty=Tensor[(10, 52), bool] */;
  %84 = cast(%var_4111, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %85 = reshape(%83, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %86 = reshape(%84, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %87 = @func_215(%85, %86) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %88 = %87.2;
  %89 = cast(%88, dtype="uint64") /* ty=Tensor[(1, 832), uint64] */;
  %90 = reshape(%89, newshape=[104, 8]) /* ty=Tensor[(104, 8), uint64] */;
  %91 = @func_3662(%90) /* ty=(Tensor[(4, ?, 3), float64], Tensor[(4, 13, 16), uint64], Tensor[(104, 8), uint64]) */;
  %92 = %91.2;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(104, 8), float64] */;
  %94 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  %95 = asinh(%93) /* ty=Tensor[(104, 8), float64] */;
  (%94, %88, %var_4110, %var_4111, %95)
}

def @func_4027() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) {
  %101 = fn () -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) {
    %96 = cast(meta[relay.Constant][4] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %97 = reshape(%96, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), uint32] */;
    %98 = @func_3506(%97) /* ty=(Tensor[(4, 4, 3), float32],) */;
    %99 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
    %100 = %98.0;
    (%99, %100, meta[relay.Constant][4] /* ty=Tensor[(48), uint32] */)
  };
  %101() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) */
}

def @func_10295() -> (Tensor[(4, ?, 3), uint32],) {
  @func_10293() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_8781(%var_8779: Tensor[(12, 12, 16), float32], %var_8780: Tensor[(832, 1), uint64]) -> (Tensor[(12, 12, 16), float32], Tensor[(4, 13, 16), uint64], Tensor[(832, 1), uint64]) {
  %108 = fn (%var_8747: Tensor[(12, 12, 16), float32], %var_8775: Tensor[(832, 1), uint64]) -> (Tensor[(12, 12, 16), float32], Tensor[(4, 13, 16), uint64], Tensor[(832, 1), uint64]) {
    %102 = cast(%var_8747, dtype="float32") /* ty=Tensor[(12, 12, 16), float32] */;
    %103 = cast(%var_8775, dtype="uint64") /* ty=Tensor[(832, 1), uint64] */;
    %104 = reshape(%103, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
    %105 = @func_33(%104) /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %106 = sigmoid(%102) /* ty=Tensor[(12, 12, 16), float32] */;
    %107 = %105.0;
    (%106, %107, %var_8775)
  };
  %108(%var_8779, %var_8780) /* ty=(Tensor[(12, 12, 16), float32], Tensor[(4, 13, 16), uint64], Tensor[(832, 1), uint64]) */
}

def @func_8136(%var_8134: Tensor[(1008, 1), uint64], %var_8135: Tensor[(1, 520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(1008, 1), uint64], Tensor[(1, 520), bool]) {
  %118 = fn (%var_8121: Tensor[(1008, 1), uint64], %var_8122: Tensor[(1, 520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(1008, 1), uint64], Tensor[(1, 520), bool]) {
    %109 = @func_6677() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %110 = cast(%var_8121, dtype="uint64") /* ty=Tensor[(1008, 1), uint64] */;
    %111 = cast(%var_8122, dtype="bool") /* ty=Tensor[(1, 520), bool] */;
    %112 = reshape(%110, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
    %113 = reshape(%111, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %114 = @func_2941(%112, %113) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */;
    %115 = %109.0;
    %116 = @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */;
    %117 = %114.4;
    (%115, %116, %117, %var_8121, %var_8122)
  };
  %118(%var_8134, %var_8135) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(1008, 1), uint64], Tensor[(1, 520), bool]) */
}

def @func_4141(%var_4139: Tensor[(10, 52), bool], %var_4140: Tensor[(832), uint64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(10, 52), bool], Tensor[(832), uint64], Tensor[(104, 8), float64]) {
  @func_4137(%var_4139, %var_4140) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(10, 52), bool], Tensor[(832), uint64], Tensor[(104, 8), float64]) */
}

def @func_13744() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(13, 16, 11), int8], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), bool], Tensor[(4, ?, 3), uint32]) {
  %119 = @func_10279() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %120 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %121 = cast(meta[relay.Constant][5] /* ty=Tensor[(143), int8] */, dtype="int8") /* ty=Tensor[(143), int8] */;
  %122 = cast(meta[relay.Constant][6] /* ty=Tensor[(2288), int8] */, dtype="int8") /* ty=Tensor[(2288), int8] */;
  %123 = reshape(%121, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), int8] */;
  %124 = reshape(%122, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), int8] */;
  %125 = @func_10266(%123, %124) /* ty=(Tensor[(13, 16, 11), int8], Tensor[(1040), float64], Tensor[(13, 16, 11), uint16], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %126 = @func_6009() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %127 = %126.0;
  %128 = cast(%127, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %129 = log(%128) /* ty=Tensor[(4, ?, 3), float32] */;
  %130 = @func_6938() /* ty=Tensor[(4, ?, 3), uint32] */;
  %131 = cast(%130, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %132 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%129, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %135 = @func_13474() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %136 = %119.0;
  %137 = %120.0;
  %138 = %125.0;
  %139 = @func_3845() /* ty=Tensor[(4, ?, 3), uint32] */;
  %140 = less(%133, %134) /* ty=Tensor[(4, ?, 3), bool] */;
  %141 = %135.0;
  (%136, %137, %138, meta[relay.Constant][5] /* ty=Tensor[(143), int8] */, meta[relay.Constant][6] /* ty=Tensor[(2288), int8] */, %139, %140, %141)
}

def @func_10618(%var_10616: Tensor[(143), int8], %var_10617: Tensor[(1144, 2), int8]) -> (Tensor[(1040), float64], Tensor[(4, ?, 3), bool], Tensor[(13, 16, 11), int8], Tensor[(143), int8], Tensor[(1144, 2), float64]) {
  %160 = fn (%var_10598: Tensor[(143), int8], %var_10599: Tensor[(1144, 2), int8]) -> (Tensor[(1040), float64], Tensor[(4, ?, 3), bool], Tensor[(13, 16, 11), int8], Tensor[(143), int8], Tensor[(1144, 2), float64]) {
    %142 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
    %143 = @func_7564() /* ty=Tensor[(4, ?, 3), uint32] */;
    %144 = @func_6860() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
    %145 = %144.1;
    %146 = cast(%145, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
    %147 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
    %148 = cast(%143, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %150 = cast(%var_10598, dtype="int8") /* ty=Tensor[(143), int8] */;
    %151 = cast(%var_10599, dtype="int8") /* ty=Tensor[(1144, 2), int8] */;
    %152 = reshape(%150, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), int8] */;
    %153 = reshape(%151, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), int8] */;
    %154 = @func_10266(%152, %153) /* ty=(Tensor[(13, 16, 11), int8], Tensor[(1040), float64], Tensor[(13, 16, 11), uint16], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
    %155 = cast(%var_10599, dtype="float64") /* ty=Tensor[(1144, 2), float64] */;
    %156 = %142.2;
    %157 = greater(%148, %149) /* ty=Tensor[(4, ?, 3), bool] */;
    %158 = %154.0;
    %159 = asinh(%155) /* ty=Tensor[(1144, 2), float64] */;
    (%156, %157, %158, %var_10598, %159)
  };
  %160(%var_10616, %var_10617) /* ty=(Tensor[(1040), float64], Tensor[(4, ?, 3), bool], Tensor[(13, 16, 11), int8], Tensor[(143), int8], Tensor[(1144, 2), float64]) */
}

def @func_3286(%var_3285: Tensor[(12, 11, 1), float32]) -> Tensor[(12, 11, 7), float32] {
  %163 = fn (%var_3270: Tensor[(12, 11, 1), float32]) -> Tensor[(12, 11, 7), float32] {
    %161 = cast(%var_3270, dtype="float32") /* ty=Tensor[(12, 11, 1), float32] */;
    %162 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 11, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 7), float32] */;
    divide(%161, %162) /* ty=Tensor[(12, 11, 7), float32] */
  };
  %163(%var_3285) /* ty=Tensor[(12, 11, 7), float32] */
}

def @func_7964() -> (Tensor[(4, ?, 3), uint32],) {
  @func_7962() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_10519() -> Tensor[(1040), float64] {
  %164 = fn () -> Tensor[(1040), float64] {
    @func_9066() /* ty=Tensor[(1040), float64] */
  };
  %164() /* ty=Tensor[(1040), float64] */
}

def @func_6927() -> (Tensor[(4, ?, 3), uint32],) {
  %165 = @func_4920() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(520, 2), float64]) */;
  %166 = %165.0;
  (%166,)
}

def @func_5033() -> (Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) {
  %167 = cast(meta[relay.Constant][8] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %168 = reshape(%167, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %169 = @func_2792(%168) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %170 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %171 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  %172 = %169.2;
  %173 = %170.0;
  (%171, %172, meta[relay.Constant][8] /* ty=Tensor[(1040), float64] */, %173)
}

def @func_13087() -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64]) {
  %176 = fn () -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64]) {
    %174 = @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */;
    %175 = @func_10518() /* ty=Tensor[(1040), float64] */;
    (%174, %175)
  };
  %176() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1040), float64]) */
}

def @func_9452(%var_9451: Tensor[(4, 14, 3), uint32]) -> (Tensor[(4, 14, 3), bool], Tensor[(4, ?, 3), uint32]) {
  %184 = fn (%var_9409: Tensor[(4, 14, 3), uint32]) -> (Tensor[(4, 14, 3), bool], Tensor[(4, ?, 3), uint32]) {
    %177 = @func_6677() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %178 = %177.0;
    %179 = cast(%178, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
    %180 = cast(%var_9409, dtype="bool") /* ty=Tensor[(4, 14, 3), bool] */;
    %181 = @func_4775() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %182 = logical_or(%179, %180) /* ty=Tensor[(4, 14, 3), bool] */;
    %183 = %181.0;
    (%182, %183)
  };
  %184(%var_9451) /* ty=(Tensor[(4, 14, 3), bool], Tensor[(4, ?, 3), uint32]) */
}

def @func_12782() -> Tensor[(1040), float64] {
  @func_12651() /* ty=Tensor[(1040), float64] */
}

def @func_7763(%var_7762: Tensor[(7, 2, 4), float64]) -> (Tensor[(7, 2, 4), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %191 = fn (%var_7735: Tensor[(7, 2, 4), float64]) -> (Tensor[(7, 2, 4), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
    %185 = cast(%var_7735, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
    %186 = @func_7641() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %187 = @func_5485() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %188 = log10(%185) /* ty=Tensor[(7, 2, 4), float64] */;
    %189 = %186.0;
    %190 = %187.0;
    (%188, %189, %190)
  };
  %191(%var_7762) /* ty=(Tensor[(7, 2, 4), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */
}

def @func_8840() -> (Tensor[(600), uint64], Tensor[(4, ?, 3), uint32]) {
  @func_8838() /* ty=(Tensor[(600), uint64], Tensor[(4, ?, 3), uint32]) */
}

def @func_6909() -> (Tensor[(4, ?, 3), uint32],) {
  %193 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %192 = @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */;
    (%192,)
  };
  %193() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_10457() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(4, ?, 3), uint32]) {
  %194 = @func_6590() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %195 = @func_6009() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %196 = @func_9657() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1540), float64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), int8]) */;
  %197 = @func_9346() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %198 = %194.0;
  %199 = %195.0;
  %200 = %196.4;
  %201 = %197.0;
  (%198, %199, %200, %201)
}

def @func_6255() -> (Tensor[(4, ?, 3), uint32],) {
  %204 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %202 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %203 = %202.0;
    (%203,)
  };
  %204() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_8513(%var_8511: Tensor[(15, 3, 2), uint16], %var_8512: Tensor[(15, 3, 2), uint16]) -> (Tensor[(15, 3, 2), uint16], Tensor[(15, 3, 2), float64], Tensor[(4, ?, 3), uint32]) {
  @func_8509(%var_8511, %var_8512) /* ty=(Tensor[(15, 3, 2), uint16], Tensor[(15, 3, 2), float64], Tensor[(4, ?, 3), uint32]) */
}

def @func_11169(%var_11137: Tensor[(1144, 2), int8]) -> (Tensor[(4, 13, 16), uint64], Tensor[(143), int8], Tensor[(143), int8], Tensor[(1144, 2), int8], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %205 = cast(meta[relay.Constant][9] /* ty=Tensor[(143), int8] */, dtype="int8") /* ty=Tensor[(143), int8] */;
  %206 = cast(%var_11137, dtype="int8") /* ty=Tensor[(1144, 2), int8] */;
  %207 = reshape(%205, newshape=[143]) /* ty=Tensor[(143), int8] */;
  %208 = reshape(%206, newshape=[1144, 2]) /* ty=Tensor[(1144, 2), int8] */;
  %209 = @func_10615(%207, %208) /* ty=(Tensor[(1040), float64], Tensor[(4, ?, 3), bool], Tensor[(13, 16, 11), int8], Tensor[(143), int8], Tensor[(1144, 2), float64]) */;
  %210 = @func_6254() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %211 = @func_6358() /* ty=Tensor[(4, 13, 16), uint64] */;
  %212 = %209.3;
  %213 = %210.0;
  %214 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%211, %212, meta[relay.Constant][9] /* ty=Tensor[(143), int8] */, %var_11137, %213, %214)
}

def @func_8181() -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64]) {
  %218 = fn () -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64]) {
    %215 = @func_5033() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
    %216 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
    %217 = %215.2;
    (%216, %217)
  };
  %218() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1040), float64]) */
}

def @func_3217(%var_3215: Tensor[(8, 12), uint32], %var_3216: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 8, 3), bool], Tensor[(8, 12), uint32], Tensor[(4, 1040, 3), int16], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(4, 13, 16), float32]) {
  @func_3213(%var_3215, %var_3216) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 8, 3), bool], Tensor[(8, 12), uint32], Tensor[(4, 1040, 3), int16], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(4, 13, 16), float32]) */
}

def @func_6939() -> Tensor[(4, ?, 3), uint32] {
  %220 = fn () -> Tensor[(4, ?, 3), uint32] {
    %219 = @func_4304() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %219.0
  };
  %220() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_11281(%var_11278: Tensor[(4, 10, 3), uint32], %var_11279: Tensor[(4, 10, 3), uint32], %var_11280: Tensor[(132), float32]) -> (Tensor[(4, 10, 3), int64], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 10, 3), int32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(12, 11, 7), float32], Tensor[(132), float32], Tensor[(4, ?, 3), uint32]) {
  @func_11276(%var_11278, %var_11279, %var_11280) /* ty=(Tensor[(4, 10, 3), int64], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 10, 3), int32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(12, 11, 7), float32], Tensor[(132), float32], Tensor[(4, ?, 3), uint32]) */
}

def @func_4408() -> Tensor[(4, ?, 3), uint32] {
  @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_3506(%var_3501: Tensor[(4, 4, 3), uint32]) -> (Tensor[(4, 4, 3), float32],) {
  %221 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %222 = %221.0;
  %223 = cast(%222, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %224 = cast(%var_3501, dtype="float32") /* ty=Tensor[(4, 4, 3), float32] */;
  %225 = divide(%223, %224) /* ty=Tensor[(4, 4, 3), float32] */;
  (%225,)
}

def @func_4406() -> Tensor[(4, ?, 3), uint32] {
  @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_9341() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  @func_9339() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */
}

def @func_9913() -> (Tensor[(660), float32], Tensor[(4, ?, 3), uint32], Tensor[(8, 12), uint32], Tensor[(96), uint32], Tensor[(520), bool], Tensor[(832), uint64]) {
  @func_9911() /* ty=(Tensor[(660), float32], Tensor[(4, ?, 3), uint32], Tensor[(8, 12), uint32], Tensor[(96), uint32], Tensor[(520), bool], Tensor[(832), uint64]) */
}

def @func_4002(%var_4000: Tensor[(110, 6), float32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(110, 6), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
  @func_3999(%var_4000) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(110, 6), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */
}

def @func_5487() -> (Tensor[(4, ?, 3), uint32],) {
  @func_5485() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_10855() -> (Tensor[(4, ?, 3), uint32],) {
  %226 = @func_6143() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%226,)
}

def @func_7344() -> (Tensor[(4, ?, 3), float64], Tensor[(4, ?, 3), uint32]) {
  @func_7342() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(4, ?, 3), uint32]) */
}

def @func_3213(%var_3160: Tensor[(8, 12), uint32], %var_3197: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 8, 3), bool], Tensor[(8, 12), uint32], Tensor[(4, 1040, 3), int16], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(4, 13, 16), float32]) {
  %227 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %228 = cast(%var_3160, dtype="uint32") /* ty=Tensor[(8, 12), uint32] */;
  %229 = reshape(%228, newshape=[4, 8, 3]) /* ty=Tensor[(4, 8, 3), uint32] */;
  %230 = @func_2821(%229) /* ty=(Tensor[(4, 8, 3), bool],) */;
  %231 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  %232 = cast(%231, dtype="int16") /* ty=Tensor[(4, ?, 3), int16] */;
  %233 = cast(meta[relay.Constant][10] /* ty=Tensor[(1040, 1), float64] */, dtype="int16") /* ty=Tensor[(1040, 1), int16] */;
  %234 = cast(%var_3197, dtype="bool") /* ty=Tensor[(520), bool] */;
  %235 = cast(meta[relay.Constant][10] /* ty=Tensor[(1040, 1), float64] */, dtype="float64") /* ty=Tensor[(1040, 1), float64] */;
  %236 = reshape(%235, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %237 = @func_2792(%236) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %238 = %237.8;
  %239 = cast(%238, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %240 = reshape(%234, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %241 = reshape(%239, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %242 = @func_215(%240, %241) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %243 = cast(%238, dtype="float32") /* ty=Tensor[(4, 13, 16), float32] */;
  %244 = %227.0;
  %245 = %230.0;
  %246 = left_shift(%232, %233) /* ty=Tensor[(4, 1040, 3), int16] */;
  %247 = %242.0;
  %248 = exp(%243) /* ty=Tensor[(4, 13, 16), float32] */;
  (%244, %245, %var_3160, %246, %247, %var_3197, %248)
}

def @func_12548() -> (Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(520), bool], Tensor[(330, 2), float32]) {
  @func_12546() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(520), bool], Tensor[(330, 2), float32]) */
}

def @func_7857() -> Tensor[(4, ?, 3), uint32] {
  @func_7855() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_6629() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) {
  @func_6627() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) */
}

def @func_10638() -> (Tensor[(4, ?, 3), float32],) {
  @func_10636() /* ty=(Tensor[(4, ?, 3), float32],) */
}

def @func_12699() -> (Tensor[(416, 2), uint64], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) {
  %257 = fn () -> (Tensor[(416, 2), uint64], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) {
    %249 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
    %250 = @func_5033() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
    %251 = %250.2;
    %252 = cast(%251, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %253 = reshape(%252, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
    %254 = @func_2792(%253) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
    %255 = %249.1;
    %256 = %254.0;
    (%255, %251, %256)
  };
  %257() /* ty=(Tensor[(416, 2), uint64], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */
}

def @func_13158() -> Tensor[(4, ?, 3), uint32] {
  @func_13156() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_8678(%var_8676: Tensor[(832), uint64], %var_8677: Tensor[(48), uint32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 11, 4), bool], Tensor[(4, ?, 3), float64], Tensor[(832), float64], Tensor[(4, ?, 3), float64], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) {
  %280 = fn (%var_8582: Tensor[(832), uint64], %var_8666: Tensor[(48), uint32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 11, 4), bool], Tensor[(4, ?, 3), float64], Tensor[(832), float64], Tensor[(4, ?, 3), float64], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) {
    %258 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %259 = cast(%var_8582, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %260 = reshape(%259, newshape=[104, 8]) /* ty=Tensor[(104, 8), uint64] */;
    %261 = @func_3662(%260) /* ty=(Tensor[(4, ?, 3), float64], Tensor[(4, 13, 16), uint64], Tensor[(104, 8), uint64]) */;
    %262 = cast(-9.26326f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %263 = reshape(%262, newshape=[]) /* ty=float64 */;
    %264 = @func_4974(%263) /* ty=(Tensor[(1, 11, 4), float64], Tensor[(1, 11, 4), bool], Tensor[(4, ?, 3), uint32], Tensor[(1, 11, 4), bool]) */;
    %265 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
    %266 = cast(-9.26326f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %267 = cast(%var_8582, dtype="float64") /* ty=Tensor[(832), float64] */;
    %268 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
    %269 = cast(%var_8666, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %270 = reshape(%269, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), uint32] */;
    %271 = @func_3506(%270) /* ty=(Tensor[(4, 4, 3), float32],) */;
    %272 = %258.0;
    %273 = %261.1;
    %274 = @func_7564() /* ty=Tensor[(4, ?, 3), uint32] */;
    %275 = %264.1;
    %276 = %265.0;
    %277 = mod(%266, %267) /* ty=Tensor[(832), float64] */;
    %278 = %268.0;
    %279 = %271.0;
    (%272, %273, %274, %275, %276, %277, %278, %279, %var_8666)
  };
  %280(%var_8676, %var_8677) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 11, 4), bool], Tensor[(4, ?, 3), float64], Tensor[(832), float64], Tensor[(4, ?, 3), float64], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) */
}

def @func_11086() -> (Tensor[(4, ?, 3), uint32],) {
  %281 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %282 = %281.0;
  (%282,)
}

def @func_4976(%var_4975: float64) -> (Tensor[(1, 11, 4), float64], Tensor[(1, 11, 4), bool], Tensor[(4, ?, 3), uint32], Tensor[(1, 11, 4), bool]) {
  %294 = fn (%var_4945: float64) -> (Tensor[(1, 11, 4), float64], Tensor[(1, 11, 4), bool], Tensor[(4, ?, 3), uint32], Tensor[(1, 11, 4), bool]) {
    %283 = cast(%var_4945, dtype="float64") /* ty=float64 */;
    %284 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 11, 4), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 4), float64] */;
    %285 = cast(%var_4945, dtype="bool") /* ty=bool */;
    %286 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 11, 4), float64] */, dtype="bool") /* ty=Tensor[(1, 11, 4), bool] */;
    %287 = @func_4026() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) */;
    %288 = cast(%var_4945, dtype="bool") /* ty=bool */;
    %289 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 11, 4), float64] */, dtype="bool") /* ty=Tensor[(1, 11, 4), bool] */;
    %290 = power(%283, %284) /* ty=Tensor[(1, 11, 4), float64] */;
    %291 = greater(%285, %286) /* ty=Tensor[(1, 11, 4), bool] */;
    %292 = %287.0;
    %293 = greater_equal(%288, %289) /* ty=Tensor[(1, 11, 4), bool] */;
    (%290, %291, %292, %293)
  };
  %294(%var_4975) /* ty=(Tensor[(1, 11, 4), float64], Tensor[(1, 11, 4), bool], Tensor[(4, ?, 3), uint32], Tensor[(1, 11, 4), bool]) */
}

def @func_11376() -> Tensor[(4, ?, 3), uint32] {
  %296 = fn () -> Tensor[(4, ?, 3), uint32] {
    %295 = @func_10102() /* ty=(Tensor[(1040), float64], Tensor[(4, 4, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(108), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 9, 3), float32], Tensor[(4, ?, 3), uint32]) */;
    %295.4
  };
  %296() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_6591() -> (Tensor[(4, ?, 3), uint32],) {
  %298 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %297 = @func_5995() /* ty=Tensor[(4, ?, 3), uint32] */;
    (%297,)
  };
  %298() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_5485() -> (Tensor[(4, ?, 3), uint32],) {
  %299 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %300 = %299.0;
  (%300,)
}

def @func_4370() -> (Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(600), uint64], Tensor[(832), uint64]) {
  %310 = fn () -> (Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(600), uint64], Tensor[(832), uint64]) {
    %301 = cast(meta[relay.Constant][12] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
    %302 = cast(meta[relay.Constant][12] /* ty=Tensor[(600), uint64] */, dtype="uint64") /* ty=Tensor[(600), uint64] */;
    %303 = cast(meta[relay.Constant][13] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %304 = reshape(%301, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
    %305 = reshape(%302, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
    %306 = reshape(%303, newshape=[832]) /* ty=Tensor[(832), uint64] */;
    %307 = @func_3444(%304, %305, %306) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), float64], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
    %308 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
    %309 = %307.5;
    (%308, %309, meta[relay.Constant][12] /* ty=Tensor[(600), uint64] */, meta[relay.Constant][13] /* ty=Tensor[(832), uint64] */)
  };
  %310() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(600), uint64], Tensor[(832), uint64]) */
}

def @func_4461(%var_4459: Tensor[(1, 520), bool], %var_4460: Tensor[(3, 96), uint32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(1, 520), bool], Tensor[(3, 96), float64], Tensor[(4, ?, 3), float32]) {
  %324 = fn (%var_4441: Tensor[(1, 520), bool], %var_4445: Tensor[(3, 96), uint32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(1, 520), bool], Tensor[(3, 96), float64], Tensor[(4, ?, 3), float32]) {
    %311 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 96), uint32] */, dtype="uint32") /* ty=Tensor[(1, 96), uint32] */;
    %312 = cast(%var_4441, dtype="bool") /* ty=Tensor[(1, 520), bool] */;
    %313 = reshape(%311, newshape=[8, 12]) /* ty=Tensor[(8, 12), uint32] */;
    %314 = reshape(%312, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %315 = @func_3213(%313, %314) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 8, 3), bool], Tensor[(8, 12), uint32], Tensor[(4, 1040, 3), int16], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(4, 13, 16), float32]) */;
    %316 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 96), uint32] */, dtype="float64") /* ty=Tensor[(1, 96), float64] */;
    %317 = cast(%var_4445, dtype="float64") /* ty=Tensor[(3, 96), float64] */;
    %318 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %319 = %318.0;
    %320 = cast(%319, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
    %321 = %315.0;
    %322 = floor_mod(%316, %317) /* ty=Tensor[(3, 96), float64] */;
    %323 = asin(%320) /* ty=Tensor[(4, ?, 3), float32] */;
    (%321, %var_4441, %322, %323)
  };
  %324(%var_4459, %var_4460) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1, 520), bool], Tensor[(3, 96), float64], Tensor[(4, ?, 3), float32]) */
}

def @func_11606(%var_11604: Tensor[(520, 2), float64]) -> (Tensor[(520, 2), bool], Tensor[(520, 2), bool], Tensor[(520, 2), float32]) {
  @func_11603(%var_11604) /* ty=(Tensor[(520, 2), bool], Tensor[(520, 2), bool], Tensor[(520, 2), float32]) */
}

def @func_35(%var_34: Tensor[(4, 13, 16), uint64]) -> (Tensor[(4, 13, 16), uint64],) {
  %330 = fn (%var_28: Tensor[(4, 13, 16), uint64]) -> (Tensor[(4, 13, 16), uint64],) {
    %325 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 13, 16), uint64] */, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
    %326 = shape_of(%var_28, dtype="int32") /* ty=Tensor[(3), int32] */;
    %327 = cast(%var_28, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
    %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %329 = right_shift(%327, %328) /* ty=Tensor[(4, 13, 16), uint64] */;
    (%329,)
  };
  %330(%var_34) /* ty=(Tensor[(4, 13, 16), uint64],) */
}

def @func_5096() -> Tensor[(4, ?, 3), uint32] {
  %332 = fn () -> Tensor[(4, ?, 3), uint32] {
    %331 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %331.0
  };
  %332() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_11549(%var_11547: Tensor[(660), float32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(14, 11, 10), float64], Tensor[(1, 1540), float64], Tensor[(660), float32], Tensor[(660), float32]) {
  @func_11546(%var_11547) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(14, 11, 10), float64], Tensor[(1, 1540), float64], Tensor[(660), float32], Tensor[(660), float32]) */
}

def @func_4814(%var_4788: Tensor[(4, 9, 3), uint32]) -> (Tensor[(4, 9, 3), bool], Tensor[(4, 9, 3), float32]) {
  %333 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  %334 = cast(%333, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %335 = cast(%var_4788, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %336 = cast(%var_4788, dtype="float32") /* ty=Tensor[(4, 9, 3), float32] */;
  %337 = cast(%333, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %338 = less(%334, %335) /* ty=Tensor[(4, 9, 3), bool] */;
  %339 = power(%336, %337) /* ty=Tensor[(4, 9, 3), float32] */;
  (%338, %339)
}

def @func_10636() -> (Tensor[(4, ?, 3), float32],) {
  %340 = @func_7982() /* ty=Tensor[(4, ?, 3), float32] */;
  (%340,)
}

def @func_6678() -> (Tensor[(4, ?, 3), uint32],) {
  %343 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %341 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %342 = %341.0;
    (%342,)
  };
  %343() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_7897() -> (Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint64], Tensor[(14, 11, 10), float64]) {
  %344 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
  %345 = %344.1;
  %346 = cast(%345, dtype="uint64") /* ty=Tensor[(416, 2), uint64] */;
  %347 = reshape(%346, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %348 = @func_6825(%347) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(832), uint64]) */;
  %349 = @func_5995() /* ty=Tensor[(4, ?, 3), uint32] */;
  %350 = %348.1;
  (%349, %345, %350)
}

def @func_13379() -> Tensor[(4, ?, 3), uint32] {
  %351 = @func_11933() /* ty=(Tensor[(4, 4, 3), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */;
  %351.1
}

def @func_9173() -> (Tensor[(4, ?, 3), float32],) {
  %353 = fn () -> (Tensor[(4, ?, 3), float32],) {
    %352 = @func_7982() /* ty=Tensor[(4, ?, 3), float32] */;
    (%352,)
  };
  %353() /* ty=(Tensor[(4, ?, 3), float32],) */
}

def @func_5241(%var_5240: Tensor[(520), bool]) -> (Tensor[(1008), uint64], Tensor[(1040), float64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(660), float32], Tensor[(4, ?, 3), uint32]) {
  %372 = fn (%var_5214: Tensor[(520), bool]) -> (Tensor[(1008), uint64], Tensor[(1040), float64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(660), float32], Tensor[(4, ?, 3), uint32]) {
    %354 = @func_4369() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(600), uint64], Tensor[(832), uint64]) */;
    %355 = cast(%var_5214, dtype="bool") /* ty=Tensor[(520), bool] */;
    %356 = cast(meta[relay.Constant][16] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %357 = reshape(%355, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
    %358 = reshape(%356, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
    %359 = @func_215(%357, %358) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
    %360 = @func_4332() /* ty=Tensor[(1040), float64] */;
    %361 = cast(%360, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %362 = cast(meta[relay.Constant][17] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %363 = reshape(%361, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
    %364 = reshape(%362, newshape=[660]) /* ty=Tensor[(660), float32] */;
    %365 = @func_5164(%363, %364) /* ty=(Tensor[(1040), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32]) */;
    %366 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %367 = %354.1;
    %368 = %359.0;
    %369 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
    %370 = %365.3;
    %371 = %366.0;
    (%367, %360, %368, %var_5214, meta[relay.Constant][16] /* ty=Tensor[(832), uint64] */, %369, %370, meta[relay.Constant][17] /* ty=Tensor[(660), float32] */, %371)
  };
  %372(%var_5240) /* ty=(Tensor[(1008), uint64], Tensor[(1040), float64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(660), float32], Tensor[(4, ?, 3), uint32]) */
}

def @func_3269() -> Tensor[(4, ?, 3), uint32] {
  @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_6860() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %373 = @func_6677() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %374 = @func_4844() /* ty=Tensor[(4, ?, 3), uint32] */;
  %375 = %373.0;
  (%374, %375)
}

def @func_10102() -> (Tensor[(1040), float64], Tensor[(4, 4, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(108), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 9, 3), float32], Tensor[(4, ?, 3), uint32]) {
  %376 = @func_6723() /* ty=(Tensor[(1040), float64],) */;
  %377 = %376.0;
  %378 = cast(%377, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %379 = reshape(%378, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %380 = @func_7391(%379) /* ty=(Tensor[(4, 4, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(520, 2), int16], Tensor[(1040), float64]) */;
  %381 = @func_5670() /* ty=(Tensor[(4, ?, 3), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %382 = @func_6927() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %383 = cast(meta[relay.Constant][18] /* ty=Tensor[(108), uint32] */, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %384 = reshape(%383, newshape=[3, 36]) /* ty=Tensor[(3, 36), uint32] */;
  %385 = @func_8884(%384) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, 9, 3), bool], Tensor[(3, 36), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %386 = @func_6066() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %387 = cast(meta[relay.Constant][18] /* ty=Tensor[(108), uint32] */, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %388 = reshape(%387, newshape=[4, 9, 3]) /* ty=Tensor[(4, 9, 3), uint32] */;
  %389 = @func_4814(%388) /* ty=(Tensor[(4, 9, 3), bool], Tensor[(4, 9, 3), float32]) */;
  %390 = @func_6908() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %391 = %380.0;
  %392 = %381.2;
  %393 = %382.0;
  %394 = %385.4;
  %395 = %386.0;
  %396 = %389.1;
  %397 = %390.0;
  (%377, %391, %392, %393, %394, meta[relay.Constant][18] /* ty=Tensor[(108), uint32] */, %395, %396, %397)
}

def @func_7855() -> Tensor[(4, ?, 3), uint32] {
  %398 = @func_4277() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %398.1
}

def @func_8709() -> Tensor[(4, ?, 3), uint32] {
  @func_7855() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_13175() -> Tensor[(4, 11, 11), float32] {
  @func_13173() /* ty=Tensor[(4, 11, 11), float32] */
}

def @func_8107() -> Tensor[(4, ?, 3), uint32] {
  %400 = fn () -> Tensor[(4, ?, 3), uint32] {
    %399 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %399.0
  };
  %400() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_3846() -> Tensor[(4, ?, 3), uint32] {
  %402 = fn () -> Tensor[(4, ?, 3), uint32] {
    %401 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
    %401.0
  };
  %402() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_11787() -> (Tensor[(11, 10, 7), bool], Tensor[(4, ?, 3), uint32], Tensor[(11, 10, 7), float64], Tensor[(4, ?, 3), uint32], Tensor[(1540), float64], Tensor[(576), float64], Tensor[(832), uint64]) {
  %403 = cast(meta[relay.Constant][19] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %404 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 10, 7), uint64] */, dtype="bool") /* ty=Tensor[(11, 10, 7), bool] */;
  %405 = @func_6066() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %406 = cast(meta[relay.Constant][19] /* ty=uint64 */, dtype="int8") /* ty=int8 */;
  %407 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 10, 7), uint64] */, dtype="int8") /* ty=Tensor[(11, 10, 7), int8] */;
  %408 = maximum(%406, %407) /* ty=Tensor[(11, 10, 7), int8] */;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(11, 10, 7), float64] */;
  %410 = @func_10949() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %411 = cast(meta[relay.Constant][21] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %412 = cast(meta[relay.Constant][22] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %413 = reshape(%411, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), float64] */;
  %414 = reshape(%412, newshape=[416, 2]) /* ty=Tensor[(416, 2), uint64] */;
  %415 = @func_5508(%413, %414) /* ty=(Tensor[(4, 12, 12), float64], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64]) */;
  %416 = less_equal(%403, %404) /* ty=Tensor[(11, 10, 7), bool] */;
  %417 = %405.0;
  %418 = asin(%409) /* ty=Tensor[(11, 10, 7), float64] */;
  %419 = %410.0;
  %420 = %415.2;
  (%416, %417, %418, %419, %420, meta[relay.Constant][21] /* ty=Tensor[(576), float64] */, meta[relay.Constant][22] /* ty=Tensor[(832), uint64] */)
}

def @func_3664(%var_3663: Tensor[(104, 8), uint64]) -> (Tensor[(4, ?, 3), float64], Tensor[(4, 13, 16), uint64], Tensor[(104, 8), uint64]) {
  %429 = fn (%var_3659: Tensor[(104, 8), uint64]) -> (Tensor[(4, ?, 3), float64], Tensor[(4, 13, 16), uint64], Tensor[(104, 8), uint64]) {
    %421 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %422 = %421.0;
    %423 = cast(%422, dtype="float64") /* ty=Tensor[(4, ?, 3), float64] */;
    %424 = cast(%var_3659, dtype="uint64") /* ty=Tensor[(104, 8), uint64] */;
    %425 = reshape(%424, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
    %426 = @func_33(%425) /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %427 = acos(%423) /* ty=Tensor[(4, ?, 3), float64] */;
    %428 = %426.0;
    (%427, %428, %var_3659)
  };
  %429(%var_3663) /* ty=(Tensor[(4, ?, 3), float64], Tensor[(4, 13, 16), uint64], Tensor[(104, 8), uint64]) */
}

def @func_7469(%var_7466: Tensor[(1008), uint64], %var_7467: Tensor[(520), bool], %var_7468: Tensor[(330, 2), float32]) -> (Tensor[(4, 13, 16), uint64], Tensor[(288), uint32], Tensor[(12), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(330, 2), float32], Tensor[(1540), float64], Tensor[(2, 24), uint32]) {
  %446 = fn (%var_7458: Tensor[(1008), uint64], %var_7459: Tensor[(520), bool], %var_7460: Tensor[(330, 2), float32]) -> (Tensor[(4, 13, 16), uint64], Tensor[(288), uint32], Tensor[(12), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(330, 2), float32], Tensor[(1540), float64], Tensor[(2, 24), uint32]) {
    %430 = @func_4277() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
    %431 = cast(meta[relay.Constant][23] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
    %432 = cast(%var_7458, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
    %433 = cast(%var_7459, dtype="bool") /* ty=Tensor[(520), bool] */;
    %434 = cast(%var_7460, dtype="float32") /* ty=Tensor[(330, 2), float32] */;
    %435 = cast(meta[relay.Constant][24] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
    %436 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 24), uint32] */, dtype="uint32") /* ty=Tensor[(2, 24), uint32] */;
    %437 = reshape(%431, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
    %438 = reshape(%432, newshape=[4, 252]) /* ty=Tensor[(4, 252), uint64] */;
    %439 = reshape(%433, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %440 = reshape(%434, newshape=[660]) /* ty=Tensor[(660), float32] */;
    %441 = reshape(%435, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
    %442 = reshape(%436, newshape=[48, 1]) /* ty=Tensor[(48, 1), uint32] */;
    %443 = @func_4599(%437, %438, %439, %440, %441, %442) /* ty=(Tensor[(4, ?, 3), bool], Tensor[(1008), uint64], Tensor[(4, 252), uint64], Tensor[(520), bool], Tensor[(4, 13, 16), uint64], Tensor[(660), float32], Tensor[(4, 13, 10), bool], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 4, 3), float32], Tensor[(48, 1), uint32], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(3, 96), float64], Tensor[(288), uint32]) */;
    %444 = %430.0;
    %445 = %443.15;
    (%444, %445, meta[relay.Constant][23] /* ty=Tensor[(12), uint32] */, %var_7458, %var_7459, %var_7460, meta[relay.Constant][24] /* ty=Tensor[(1540), float64] */, meta[relay.Constant][25] /* ty=Tensor[(2, 24), uint32] */)
  };
  %446(%var_7466, %var_7467, %var_7468) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(288), uint32], Tensor[(12), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(330, 2), float32], Tensor[(1540), float64], Tensor[(2, 24), uint32]) */
}

def @func_10281() -> (Tensor[(4, ?, 3), uint32],) {
  @func_10279() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_9966() -> (Tensor[(4, 13, 16), uint64],) {
  %447 = @func_7560() /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %448 = %447.0;
  (%448,)
}

def @func_10358(%var_10357: Tensor[(600), uint64]) -> (Tensor[(1040), float64], Tensor[(8, 15, 5), uint64], Tensor[(600), uint64], Tensor[(104, 8), uint64]) {
  %458 = fn (%var_10353: Tensor[(600), uint64]) -> (Tensor[(1040), float64], Tensor[(8, 15, 5), uint64], Tensor[(600), uint64], Tensor[(104, 8), uint64]) {
    %449 = cast(%var_10353, dtype="uint64") /* ty=Tensor[(600), uint64] */;
    %450 = cast(%var_10353, dtype="uint64") /* ty=Tensor[(600), uint64] */;
    %451 = cast(meta[relay.Constant][26] /* ty=Tensor[(104, 8), uint64] */, dtype="uint64") /* ty=Tensor[(104, 8), uint64] */;
    %452 = reshape(%449, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
    %453 = reshape(%450, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), uint64] */;
    %454 = reshape(%451, newshape=[832]) /* ty=Tensor[(832), uint64] */;
    %455 = @func_3444(%452, %453, %454) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), float64], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
    %456 = @func_4332() /* ty=Tensor[(1040), float64] */;
    %457 = %455.0;
    (%456, %457, %var_10353, meta[relay.Constant][26] /* ty=Tensor[(104, 8), uint64] */)
  };
  %458(%var_10357) /* ty=(Tensor[(1040), float64], Tensor[(8, 15, 5), uint64], Tensor[(600), uint64], Tensor[(104, 8), uint64]) */
}

def @func_7983() -> Tensor[(4, ?, 3), float32] {
  %461 = fn () -> Tensor[(4, ?, 3), float32] {
    %459 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
    %460 = cast(%459, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
    atan(%460) /* ty=Tensor[(4, ?, 3), float32] */
  };
  %461() /* ty=Tensor[(4, ?, 3), float32] */
}

def @func_14359(%var_14319: Tensor[(4, 11, 3), uint32]) -> (Tensor[(4, 11, 3), bool], Tensor[(4, ?, 3), uint32]) {
  %462 = @func_12708() /* ty=Tensor[(4, ?, 3), uint32] */;
  %463 = cast(%462, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %464 = cast(%var_14319, dtype="bool") /* ty=Tensor[(4, 11, 3), bool] */;
  %465 = not_equal(%463, %464) /* ty=Tensor[(4, 11, 3), bool] */;
  %466 = @func_7855() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%465, %466)
}

def @func_8905(%var_8888: Tensor[(5, 9, 6), float64], %var_8903: Tensor[(1040), float64]) -> (Tensor[(5, 9, 6), float64], Tensor[(1040), float64], Tensor[(1040), float64]) {
  %467 = cast(%var_8888, dtype="float64") /* ty=Tensor[(5, 9, 6), float64] */;
  %468 = cast(%var_8903, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %469 = reshape(%468, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %470 = @func_5599(%469) /* ty=(Tensor[(4, ?, 3), float32], Tensor[(4, 9, 3), float64], Tensor[(1008), uint64], Tensor[(1040), float64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(2, 416), uint64]) */;
  %471 = acos(%467) /* ty=Tensor[(5, 9, 6), float64] */;
  %472 = %470.3;
  (%471, %472, %var_8903)
}

def @func_11546(%var_11542: Tensor[(660), float32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(14, 11, 10), float64], Tensor[(1, 1540), float64], Tensor[(660), float32], Tensor[(660), float32]) {
  %473 = @func_10293() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %474 = cast(meta[relay.Constant][27] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %475 = cast(meta[relay.Constant][28] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %476 = reshape(%474, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %477 = reshape(%475, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %478 = @func_2941(%476, %477) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */;
  %479 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 1540), float64] */, dtype="float64") /* ty=Tensor[(1, 1540), float64] */;
  %480 = reshape(%479, newshape=[14, 11, 10]) /* ty=Tensor[(14, 11, 10), float64] */;
  %481 = @func_2441(%480) /* ty=(Tensor[(14, 11, 10), float64],) */;
  %482 = @func_10518() /* ty=Tensor[(1040), float64] */;
  %483 = cast(%482, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %484 = cast(%var_11542, dtype="float32") /* ty=Tensor[(660), float32] */;
  %485 = reshape(%483, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %486 = reshape(%484, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %487 = @func_5164(%485, %486) /* ty=(Tensor[(1040), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32]) */;
  %488 = %473.0;
  %489 = %478.0;
  %490 = %481.0;
  %491 = %487.3;
  (%488, %482, %489, meta[relay.Constant][27] /* ty=Tensor[(1008), uint64] */, meta[relay.Constant][28] /* ty=Tensor[(520), bool] */, %490, meta[relay.Constant][29] /* ty=Tensor[(1, 1540), float64] */, %491, %var_11542)
}

def @func_5670() -> (Tensor[(4, ?, 3), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) {
  %492 = @func_4934() /* ty=Tensor[(4, ?, 3), uint32] */;
  %493 = cast(%492, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %494 = @func_4775() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %495 = erf(%493) /* ty=Tensor[(4, ?, 3), float32] */;
  %496 = @func_4332() /* ty=Tensor[(1040), float64] */;
  %497 = %494.0;
  (%495, %496, %497)
}

def @func_10909() -> (Tensor[(4, ?, 3), uint32],) {
  %498 = @func_6938() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%498,)
}

def @func_4306() -> (Tensor[(4, ?, 3), uint32],) {
  @func_4304() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_11658() -> Tensor[(1040), float64] {
  %499 = fn () -> Tensor[(1040), float64] {
    @func_9066() /* ty=Tensor[(1040), float64] */
  };
  %499() /* ty=Tensor[(1040), float64] */
}

def @func_6068() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  @func_6066() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */
}

def @func_7731(%var_7730: Tensor[(7, 10, 11), float64]) -> Tensor[(7, 10, 11), float64] {
  %501 = fn (%var_7726: Tensor[(7, 10, 11), float64]) -> Tensor[(7, 10, 11), float64] {
    %500 = cast(%var_7726, dtype="float64") /* ty=Tensor[(7, 10, 11), float64] */;
    sqrt(%500) /* ty=Tensor[(7, 10, 11), float64] */
  };
  %501(%var_7730) /* ty=Tensor[(7, 10, 11), float64] */
}

def @func_3073() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) {
  %502 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %503 = cast(meta[relay.Constant][30] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %504 = reshape(%503, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %505 = @func_2792(%504) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %506 = %502.0;
  %507 = %505.8;
  (%506, %507, meta[relay.Constant][30] /* ty=Tensor[(1040), float64] */)
}

def @func_3020(%var_3018: Tensor[(4, 1, 3), uint32], %var_3019: Tensor[(832), uint64]) -> (Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), float32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64]) {
  %529 = fn (%var_2957: Tensor[(4, 1, 3), uint32], %var_2986: Tensor[(832), uint64]) -> (Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), float32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64]) {
    %508 = cast(%var_2986, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %509 = reshape(%508, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
    %510 = @func_33(%509) /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %511 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
    %512 = cast(%var_2957, dtype="int64") /* ty=Tensor[(4, 1, 3), int64] */;
    %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
    %514 = cast(%511, dtype="int64") /* ty=Tensor[(4, ?, 3), int64] */;
    %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %516 = subtract(%514, %515) /* ty=Tensor[(4, ?, 3), int64] */;
    %517 = cast(%516, dtype="float64") /* ty=Tensor[(4, ?, 3), float64] */;
    %518 = rsqrt(%517) /* ty=Tensor[(4, ?, 3), float64] */;
    %519 = cast(%var_2957, dtype="float32") /* ty=Tensor[(4, 1, 3), float32] */;
    %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(%518, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %523 = cast(meta[relay.Constant][31] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
    %524 = reshape(%523, newshape=[14, 11, 10]) /* ty=Tensor[(14, 11, 10), float64] */;
    %525 = @func_2441(%524) /* ty=(Tensor[(14, 11, 10), float64],) */;
    %526 = %510.0;
    %527 = floor_mod(%521, %522) /* ty=Tensor[(4, ?, 3), float32] */;
    %528 = %525.0;
    (%526, %var_2986, %527, %528, meta[relay.Constant][31] /* ty=Tensor[(1540), float64] */)
  };
  %529(%var_3018, %var_3019) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), float32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64]) */
}

def @func_8711() -> Tensor[(4, ?, 3), uint32] {
  @func_8709() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_12208(%var_12194: Tensor[(640), int8]) -> (Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(10, 16, 4), int8], Tensor[(640), int8], Tensor[(4, 13, 16), uint64]) {
  %530 = @func_9172() /* ty=(Tensor[(4, ?, 3), float32],) */;
  %531 = cast(%var_12194, dtype="int8") /* ty=Tensor[(640), int8] */;
  %532 = reshape(%531, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), int8] */;
  %533 = %530.0;
  %534 = @func_8709() /* ty=Tensor[(4, ?, 3), uint32] */;
  %535 = @func_5095() /* ty=Tensor[(4, ?, 3), uint32] */;
  %536 = @func_10673(%532) /* ty=Tensor[(10, 16, 4), int8] */;
  %537 = @func_6358() /* ty=Tensor[(4, 13, 16), uint64] */;
  (%533, %534, %535, %536, %var_12194, %537)
}

def @main(%var_14416: Tensor[(1540), float64], %var_14417: Tensor[(520), bool]) -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1540), float64], Tensor[(520), bool], Tensor[(15, 168), uint64]) {
  %538 = @func_11398() /* ty=(Tensor[(4, ?, 3), int8], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) */;
  %539 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 168), uint32] */, dtype="uint32") /* ty=Tensor[(1, 168), uint32] */;
  %540 = reshape(%539, newshape=[4, 14, 3]) /* ty=Tensor[(4, 14, 3), uint32] */;
  %541 = @func_9452(%540) /* ty=(Tensor[(4, 14, 3), bool], Tensor[(4, ?, 3), uint32]) */;
  %542 = cast(%var_14416, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %543 = cast(%var_14417, dtype="bool") /* ty=Tensor[(520), bool] */;
  %544 = reshape(%542, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
  %545 = reshape(%543, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %546 = @func_3962(%544, %545) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
  %547 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 168), uint32] */, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %548 = asin(%547) /* ty=Tensor[(1, 168), float32] */;
  %549 = cast(%548, dtype="uint64") /* ty=Tensor[(1, 168), uint64] */;
  %550 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 168), float32] */, dtype="uint64") /* ty=Tensor[(15, 168), uint64] */;
  %551 = %538.2;
  %552 = %541.1;
  %553 = %546.5;
  %554 = bitwise_or(%549, %550) /* ty=Tensor[(15, 168), uint64] */;
  (%551, %552, %553, %var_14416, %var_14417, %554)
}

def @func_9093() -> (Tensor[(4, ?, 3), uint32],) {
  @func_9091() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_12597() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 9, 3), float32], Tensor[(108), uint32], Tensor[(4, ?, 3), uint32]) {
  %565 = fn () -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 9, 3), float32], Tensor[(108), uint32], Tensor[(4, ?, 3), uint32]) {
    %555 = @func_9091() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %556 = @func_9199() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
    %557 = cast(meta[relay.Constant][34] /* ty=Tensor[(108), uint32] */, dtype="uint32") /* ty=Tensor[(108), uint32] */;
    %558 = reshape(%557, newshape=[4, 9, 3]) /* ty=Tensor[(4, 9, 3), uint32] */;
    %559 = @func_4814(%558) /* ty=(Tensor[(4, 9, 3), bool], Tensor[(4, 9, 3), float32]) */;
    %560 = @func_8376() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %561 = %555.0;
    %562 = %556.1;
    %563 = %559.1;
    %564 = %560.0;
    (%561, %562, %563, meta[relay.Constant][34] /* ty=Tensor[(108), uint32] */, %564)
  };
  %565() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 9, 3), float32], Tensor[(108), uint32], Tensor[(4, ?, 3), uint32]) */
}

def @func_7899() -> (Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint64], Tensor[(14, 11, 10), float64]) {
  @func_7897() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint64], Tensor[(14, 11, 10), float64]) */
}

def @func_2902() -> Tensor[(4, ?, 3), uint32] {
  @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_5599(%var_5591: Tensor[(1040), float64]) -> (Tensor[(4, ?, 3), float32], Tensor[(4, 9, 3), float64], Tensor[(1008), uint64], Tensor[(1040), float64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(2, 416), uint64]) {
  %566 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %567 = %566.0;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %569 = cast(%567, dtype="uint16") /* ty=Tensor[(4, ?, 3), uint16] */;
  %570 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 9, 3), uint32] */, dtype="uint16") /* ty=Tensor[(4, 9, 3), uint16] */;
  %571 = right_shift(%569, %570) /* ty=Tensor[(4, 9, 3), uint16] */;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(4, 9, 3), float64] */;
  %573 = cast(%var_5591, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %574 = reshape(%573, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %575 = @func_2792(%574) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %576 = cast(meta[relay.Constant][36] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %577 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 416), uint64] */, dtype="uint64") /* ty=Tensor[(2, 416), uint64] */;
  %578 = reshape(%576, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %579 = reshape(%577, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %580 = @func_215(%578, %579) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %581 = acosh(%568) /* ty=Tensor[(4, ?, 3), float32] */;
  %582 = rsqrt(%572) /* ty=Tensor[(4, 9, 3), float64] */;
  %583 = %575.3;
  %584 = %580.0;
  (%581, %582, %583, %var_5591, %584, meta[relay.Constant][36] /* ty=Tensor[(520), bool] */, meta[relay.Constant][37] /* ty=Tensor[(2, 416), uint64] */)
}

def @func_10744() -> Tensor[(4, ?, 3), uint32] {
  @func_10742() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_3962(%var_3960: Tensor[(1540), float64], %var_3961: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) {
  @func_3958(%var_3960, %var_3961) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) */
}

def @func_6521() -> Tensor[(4, ?, 3), float64] {
  %585 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
  %585.0
}

def @func_7139(%var_7138: Tensor[(8, 832), float64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(8, 832), bool]) {
  %596 = fn (%var_7130: Tensor[(8, 832), float64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(8, 832), bool]) {
    %586 = cast(meta[relay.Constant][38] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
    %587 = cast(meta[relay.Constant][39] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %588 = reshape(%586, newshape=[10, 52]) /* ty=Tensor[(10, 52), bool] */;
    %589 = reshape(%587, newshape=[832]) /* ty=Tensor[(832), uint64] */;
    %590 = @func_4137(%588, %589) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(10, 52), bool], Tensor[(832), uint64], Tensor[(104, 8), float64]) */;
    %591 = %590.1;
    %592 = cast(%591, dtype="bool") /* ty=Tensor[(1, 832), bool] */;
    %593 = cast(%var_7130, dtype="bool") /* ty=Tensor[(8, 832), bool] */;
    %594 = @func_6143() /* ty=Tensor[(4, ?, 3), uint32] */;
    %595 = less(%592, %593) /* ty=Tensor[(8, 832), bool] */;
    (%594, meta[relay.Constant][38] /* ty=Tensor[(520), bool] */, meta[relay.Constant][39] /* ty=Tensor[(832), uint64] */, %595)
  };
  %596(%var_7138) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(8, 832), bool]) */
}

def @func_2824(%var_2822: Tensor[(4, 8, 3), uint32]) -> (Tensor[(4, 8, 3), bool],) {
  @func_2821(%var_2822) /* ty=(Tensor[(4, 8, 3), bool],) */
}

def @func_4661(%var_4649: Tensor[(660), float32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), float32], Tensor[(832), uint64], Tensor[(660), float32]) {
  %597 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %598 = %597.0;
  %599 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %600 = %599.0;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %602 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%598, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %605 = cast(%598, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %606 = cast(%var_4649, dtype="float32") /* ty=Tensor[(660), float32] */;
  %607 = reshape(%606, newshape=[110, 6]) /* ty=Tensor[(110, 6), float32] */;
  %608 = @func_3999(%607) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(110, 6), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */;
  %609 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  %610 = power(%603, %604) /* ty=Tensor[(4, ?, 3), float32] */;
  %611 = sinh(%605) /* ty=Tensor[(4, ?, 3), float32] */;
  %612 = %608.5;
  (%609, %610, %611, %612, %var_4649)
}

def @func_14362(%var_14360: Tensor[(4, 11, 3), uint32]) -> (Tensor[(4, 11, 3), bool], Tensor[(4, ?, 3), uint32]) {
  @func_14359(%var_14360) /* ty=(Tensor[(4, 11, 3), bool], Tensor[(4, ?, 3), uint32]) */
}

def @func_2441(%var_2437: Tensor[(14, 11, 10), float64]) -> (Tensor[(14, 11, 10), float64],) {
  %613 = cast(%var_2437, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
  %614 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(14, 11, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 11, 10), float64] */, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %617 = floor_divide(%615, %616) /* ty=Tensor[(14, 11, 10), float64] */;
  (%617,)
}

def @func_5602(%var_5600: Tensor[(1040), float64]) -> (Tensor[(4, ?, 3), float32], Tensor[(4, 9, 3), float64], Tensor[(1008), uint64], Tensor[(1040), float64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(2, 416), uint64]) {
  @func_5599(%var_5600) /* ty=(Tensor[(4, ?, 3), float32], Tensor[(4, 9, 3), float64], Tensor[(1008), uint64], Tensor[(1040), float64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(2, 416), uint64]) */
}

def @func_6066() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %618 = @func_4019() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64], Tensor[(4, ?, 3), float64]) */;
  %619 = @func_4019() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64], Tensor[(4, ?, 3), float64]) */;
  %620 = %618.0;
  %621 = %619.0;
  (%620, %621)
}

def @func_7083() -> (Tensor[(4, ?, 3), uint32],) {
  %622 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %623 = %622.0;
  (%623,)
}

def @func_2900() -> Tensor[(4, ?, 3), uint32] {
  %624 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %624.0
}

def @func_6009() -> (Tensor[(4, ?, 3), uint32],) {
  %625 = @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%625,)
}

def @func_8320() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float64]) {
  %626 = @func_8224() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %627 = @func_5485() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %628 = cast(meta[relay.Constant][41] /* ty=Tensor[(520, 2), float64] */, dtype="float64") /* ty=Tensor[(520, 2), float64] */;
  %629 = reshape(%628, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %630 = @func_2792(%629) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %631 = %626.0;
  %632 = %627.0;
  %633 = %630.9;
  (%631, %632, %633, meta[relay.Constant][41] /* ty=Tensor[(520, 2), float64] */)
}

def @func_9226(%var_9213: Tensor[(4, 14, 3), uint32]) -> (Tensor[(4, 14, 3), float32],) {
  %634 = @func_7897() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint64], Tensor[(14, 11, 10), float64]) */;
  %635 = %634.0;
  %636 = cast(%635, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
  %637 = cast(%var_9213, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
  %638 = power(%636, %637) /* ty=Tensor[(4, 14, 3), float32] */;
  (%638,)
}

def @func_12546() -> (Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(520), bool], Tensor[(330, 2), float32]) {
  %639 = @func_7641() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %640 = cast(meta[relay.Constant][42] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %641 = cast(meta[relay.Constant][43] /* ty=Tensor[(330, 2), float32] */, dtype="float32") /* ty=Tensor[(330, 2), float32] */;
  %642 = reshape(%640, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %643 = reshape(%641, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %644 = @func_9562(%642, %643) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(330, 2), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(660), float32], Tensor[(15, 3, 2), uint16], Tensor[(90), uint16], Tensor[(4, ?, 3), float32]) */;
  %645 = %639.0;
  %646 = %644.3;
  (%645, %646, meta[relay.Constant][42] /* ty=Tensor[(520), bool] */, meta[relay.Constant][43] /* ty=Tensor[(330, 2), float32] */)
}

def @func_9229(%var_9227: Tensor[(4, 14, 3), uint32]) -> (Tensor[(4, 14, 3), float32],) {
  @func_9226(%var_9227) /* ty=(Tensor[(4, 14, 3), float32],) */
}

def @func_7391(%var_7375: Tensor[(520, 2), float64]) -> (Tensor[(4, 4, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(520, 2), int16], Tensor[(1040), float64]) {
  %647 = @func_4026() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) */;
  %648 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %649 = @func_4920() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(520, 2), float64]) */;
  %650 = %649.2;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(520, 2), float64] */;
  %652 = acosh(%651) /* ty=Tensor[(520, 2), float64] */;
  %653 = cast(%var_7375, dtype="int16") /* ty=Tensor[(520, 2), int16] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(2), int32] */;
  %655 = cast(%652, dtype="int16") /* ty=Tensor[(520, 2), int16] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %657 = @func_6723() /* ty=(Tensor[(1040), float64],) */;
  %658 = %647.1;
  %659 = %648.0;
  %660 = bitwise_xor(%655, %656) /* ty=Tensor[(520, 2), int16] */;
  %661 = %657.0;
  (%658, %659, %660, %661)
}

def @func_13381() -> Tensor[(4, ?, 3), uint32] {
  @func_13379() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_8909(%var_8907: Tensor[(5, 9, 6), float64], %var_8908: Tensor[(1040), float64]) -> (Tensor[(5, 9, 6), float64], Tensor[(1040), float64], Tensor[(1040), float64]) {
  @func_8905(%var_8907, %var_8908) /* ty=(Tensor[(5, 9, 6), float64], Tensor[(1040), float64], Tensor[(1040), float64]) */
}

def @func_13173() -> Tensor[(4, 11, 11), float32] {
  %662 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 11, 11), float32] */, dtype="float32") /* ty=Tensor[(4, 11, 11), float32] */;
  log2(%662) /* ty=Tensor[(4, 11, 11), float32] */
}

def @func_4241() -> (Tensor[(4, ?, 3), uint32],) {
  %665 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %663 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %664 = %663.0;
    (%664,)
  };
  %665() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_12310() -> Tensor[(4, ?, 3), uint32] {
  %666 = @func_7196() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %666.0
}

def @func_6419() -> (Tensor[(4, ?, 3), uint32],) {
  %667 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%667,)
}

def @func_5721() -> (Tensor[(4, ?, 3), uint32],) {
  %668 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%668,)
}

def @func_12056() -> (Tensor[(4, ?, 3), uint32],) {
  %671 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %669 = @func_10909() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %670 = %669.0;
    (%670,)
  };
  %671() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_13269() -> (Tensor[(1040), float64],) {
  %674 = fn () -> (Tensor[(1040), float64],) {
    %672 = @func_11865() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
    %673 = %672.3;
    (%673,)
  };
  %674() /* ty=(Tensor[(1040), float64],) */
}

def @func_5366() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  @func_5364() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */
}

def @func_4664(%var_4662: Tensor[(660), float32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), float32], Tensor[(832), uint64], Tensor[(660), float32]) {
  @func_4661(%var_4662) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), float32], Tensor[(832), uint64], Tensor[(660), float32]) */
}

def @func_5417(%var_5408: uint16, %var_5409: Tensor[(2, 1, 6), uint16]) -> (Tensor[(2, 1, 6), uint16],) {
  %675 = cast(%var_5408, dtype="uint16") /* ty=uint16 */;
  %676 = cast(%var_5409, dtype="uint16") /* ty=Tensor[(2, 1, 6), uint16] */;
  %677 = bitwise_and(%675, %676) /* ty=Tensor[(2, 1, 6), uint16] */;
  (%677,)
}

def @func_9658() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1540), float64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), int8]) {
  %703 = fn () -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1540), float64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), int8]) {
    %678 = @func_8320() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float64]) */;
    %679 = @func_8224() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
    %680 = cast(meta[relay.Constant][45] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
    %681 = cast(meta[relay.Constant][46] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
    %682 = reshape(%680, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
    %683 = reshape(%681, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %684 = @func_3958(%682, %683) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
    %685 = cast(meta[relay.Constant][46] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
    %686 = reshape(%685, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %687 = @func_8294(%686) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1, 1540), float64], Tensor[(520), bool]) */;
    %688 = %679.1;
    %689 = cast(%688, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
    %690 = reshape(%689, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
    %691 = @func_5788(%690) /* ty=(Tensor[(4, ?, 3), bool], Tensor[(4, ?, 3), uint32]) */;
    %692 = %691.0;
    %693 = @func_6419() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %694 = %693.0;
    %695 = cast(%694, dtype="int8") /* ty=Tensor[(4, ?, 3), int8] */;
    %696 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
    %697 = cast(%692, dtype="int8") /* ty=Tensor[(4, ?, 3), int8] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %699 = %678.0;
    %700 = %684.6;
    %701 = %687.2;
    %702 = bitwise_or(%697, %698) /* ty=Tensor[(4, ?, 3), int8] */;
    (%699, %688, %700, meta[relay.Constant][45] /* ty=Tensor[(1540), float64] */, meta[relay.Constant][46] /* ty=Tensor[(520), bool] */, %701, %702)
  };
  %703() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1540), float64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), int8]) */
}

def @func_12374() -> Tensor[(4, 13, 16), uint64] {
  %704 = @func_9805() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */;
  %704.1
}

def @func_7342() -> (Tensor[(4, ?, 3), float64], Tensor[(4, ?, 3), uint32]) {
  %705 = @func_7083() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %706 = @func_6521() /* ty=Tensor[(4, ?, 3), float64] */;
  %707 = %705.0;
  (%706, %707)
}

def @func_10673(%var_10652: Tensor[(10, 16, 4), int8]) -> Tensor[(10, 16, 4), int8] {
  %708 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 16, 4), int8] */, dtype="int8") /* ty=Tensor[(10, 16, 4), int8] */;
  %709 = shape_of(%var_10652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%var_10652, dtype="int8") /* ty=Tensor[(10, 16, 4), int8] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%710, %711) /* ty=Tensor[(10, 16, 4), int8] */
}

def @func_5885() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 24), uint32], Tensor[(4, 8, 3), float32]) {
  @func_5883() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 24), uint32], Tensor[(4, 8, 3), float32]) */
}

def @func_3482() -> (Tensor[(4, ?, 3), uint32],) {
  %712 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %713 = %712.0;
  (%713,)
}

def @func_13051() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %718 = fn () -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
    %714 = @func_6009() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %715 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %716 = %714.0;
    %717 = %715.0;
    (%716, %717)
  };
  %718() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */
}

def @func_7394(%var_7392: Tensor[(520, 2), float64]) -> (Tensor[(4, 4, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(520, 2), int16], Tensor[(1040), float64]) {
  @func_7391(%var_7392) /* ty=(Tensor[(4, 4, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(520, 2), int16], Tensor[(1040), float64]) */
}

def @func_12376() -> Tensor[(4, 13, 16), uint64] {
  @func_12374() /* ty=Tensor[(4, 13, 16), uint64] */
}

def @func_4934() -> Tensor[(4, ?, 3), uint32] {
  %719 = @func_4026() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 4, 3), float32], Tensor[(48), uint32]) */;
  %719.0
}

def @func_407(%var_403: Tensor[(8, 9, 14), uint64], %var_404: Tensor[(8, 9, 14), uint64], %var_405: Tensor[(520), bool], %var_406: Tensor[(832), uint64]) -> (Tensor[(8, 9, 14), uint64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 10), bool]) {
  %747 = fn (%var_365: Tensor[(8, 9, 14), uint64], %var_366: Tensor[(8, 9, 14), uint64], %var_376: Tensor[(520), bool], %var_377: Tensor[(832), uint64]) -> (Tensor[(8, 9, 14), uint64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 10), bool]) {
    %720 = cast(%var_366, dtype="uint64") /* ty=Tensor[(8, 9, 14), uint64] */;
    %721 = shape_of(%var_365, dtype="int32") /* ty=Tensor[(3), int32] */;
    %722 = cast(%var_365, dtype="uint64") /* ty=Tensor[(8, 9, 14), uint64] */;
    %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %724 = cast(%var_376, dtype="bool") /* ty=Tensor[(520), bool] */;
    %725 = cast(%var_377, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %726 = reshape(%724, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
    %727 = reshape(%725, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
    %728 = @func_215(%726, %727) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
    %729 = cast(%var_377, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %730 = reshape(%729, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
    %731 = @func_33(%730) /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %732 = %728.0;
    %733 = cast(%732, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
    %734 = %731.0;
    %735 = cast(%734, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
    %736 = reshape(%733, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
    %737 = reshape(%735, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
    %738 = @func_215(%736, %737) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
    %739 = cast(%732, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
    %740 = cast(%734, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
    %741 = reshape(%739, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
    %742 = reshape(%740, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
    %743 = @func_215(%741, %742) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
    %744 = subtract(%722, %723) /* ty=Tensor[(8, 9, 14), uint64] */;
    %745 = %738.1;
    %746 = %743.0;
    (%744, %732, %var_376, %var_377, %734, %745, %746)
  };
  %747(%var_403, %var_404, %var_405, %var_406) /* ty=(Tensor[(8, 9, 14), uint64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 10), bool]) */
}

def @func_10269(%var_10267: Tensor[(13, 1, 11), int8], %var_10268: Tensor[(13, 16, 11), int8]) -> (Tensor[(13, 16, 11), int8], Tensor[(1040), float64], Tensor[(13, 16, 11), uint16], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %762 = fn (%var_10226: Tensor[(13, 1, 11), int8], %var_10227: Tensor[(13, 16, 11), int8]) -> (Tensor[(13, 16, 11), int8], Tensor[(1040), float64], Tensor[(13, 16, 11), uint16], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
    %748 = cast(%var_10226, dtype="int8") /* ty=Tensor[(13, 1, 11), int8] */;
    %749 = cast(%var_10227, dtype="int8") /* ty=Tensor[(13, 16, 11), int8] */;
    %750 = @func_6723() /* ty=(Tensor[(1040), float64],) */;
    %751 = cast(meta[relay.Constant][48] /* ty=Tensor[(13, 16, 11), int8] */, dtype="uint16") /* ty=Tensor[(13, 16, 11), uint16] */;
    %752 = shape_of(%var_10227, dtype="int32") /* ty=Tensor[(3), int32] */;
    %753 = cast(%var_10227, dtype="uint16") /* ty=Tensor[(13, 16, 11), uint16] */;
    %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %755 = @func_5033() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
    %756 = @func_6677() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %757 = subtract(%748, %749) /* ty=Tensor[(13, 16, 11), int8] */;
    %758 = %750.0;
    %759 = add(%753, %754) /* ty=Tensor[(13, 16, 11), uint16] */;
    %760 = %755.0;
    %761 = %756.0;
    (%757, %758, %759, %760, %761)
  };
  %762(%var_10267, %var_10268) /* ty=(Tensor[(13, 16, 11), int8], Tensor[(1040), float64], Tensor[(13, 16, 11), uint16], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */
}

def @func_9565(%var_9563: Tensor[(520), bool], %var_9564: Tensor[(660), float32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(330, 2), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(660), float32], Tensor[(15, 3, 2), uint16], Tensor[(90), uint16], Tensor[(4, ?, 3), float32]) {
  %788 = fn (%var_9528: Tensor[(520), bool], %var_9529: Tensor[(660), float32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(330, 2), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(660), float32], Tensor[(15, 3, 2), uint16], Tensor[(90), uint16], Tensor[(4, ?, 3), float32]) {
    %763 = @func_8320() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float64]) */;
    %764 = cast(meta[relay.Constant][49] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
    %765 = cast(%var_9528, dtype="bool") /* ty=Tensor[(520), bool] */;
    %766 = cast(%var_9529, dtype="float32") /* ty=Tensor[(660), float32] */;
    %767 = reshape(%764, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
    %768 = reshape(%765, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %769 = reshape(%766, newshape=[330, 2]) /* ty=Tensor[(330, 2), float32] */;
    %770 = @func_7465(%767, %768, %769) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(288), uint32], Tensor[(12), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(330, 2), float32], Tensor[(1540), float64], Tensor[(2, 24), uint32]) */;
    %771 = cast(meta[relay.Constant][50] /* ty=Tensor[(90), uint16] */, dtype="uint16") /* ty=Tensor[(90), uint16] */;
    %772 = cast(meta[relay.Constant][50] /* ty=Tensor[(90), uint16] */, dtype="uint16") /* ty=Tensor[(90), uint16] */;
    %773 = reshape(%771, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint16] */;
    %774 = reshape(%772, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint16] */;
    %775 = @func_8509(%773, %774) /* ty=(Tensor[(15, 3, 2), uint16], Tensor[(15, 3, 2), float64], Tensor[(4, ?, 3), uint32]) */;
    %776 = @func_8180() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1040), float64]) */;
    %777 = %776.0;
    %778 = @func_5670() /* ty=(Tensor[(4, ?, 3), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
    %779 = %778.2;
    %780 = cast(%779, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
    %781 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
    %782 = cast(%777, dtype="float32") /* ty=Tensor[(4, ?, 3), float32] */;
    %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %784 = %763.1;
    %785 = %770.5;
    %786 = %775.0;
    %787 = maximum(%782, %783) /* ty=Tensor[(4, ?, 3), float32] */;
    (%784, %785, meta[relay.Constant][49] /* ty=Tensor[(1008), uint64] */, %var_9528, %var_9529, %786, meta[relay.Constant][50] /* ty=Tensor[(90), uint16] */, %787)
  };
  %788(%var_9563, %var_9564) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(330, 2), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(660), float32], Tensor[(15, 3, 2), uint16], Tensor[(90), uint16], Tensor[(4, ?, 3), float32]) */
}

def @func_13013(%var_13001: Tensor[(4, 9, 13), float64]) -> (Tensor[(4, 9, 13), float64],) {
  %789 = cast(%var_13001, dtype="float64") /* ty=Tensor[(4, 9, 13), float64] */;
  %790 = acos(%789) /* ty=Tensor[(4, 9, 13), float64] */;
  (%790,)
}

def @func_6011() -> (Tensor[(4, ?, 3), uint32],) {
  @func_6009() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_11300() -> Tensor[(4, ?, 3), uint32] {
  @func_11298() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_12710() -> Tensor[(4, ?, 3), uint32] {
  @func_12708() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_8377() -> (Tensor[(4, ?, 3), uint32],) {
  %792 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %791 = @func_4844() /* ty=Tensor[(4, ?, 3), uint32] */;
    (%791,)
  };
  %792() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_6627() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) {
  %793 = @func_6358() /* ty=Tensor[(4, 13, 16), uint64] */;
  %794 = cast(%793, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %795 = reshape(%794, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %796 = @func_33(%795) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %797 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %798 = %796.0;
  %799 = %797.1;
  (%793, %798, %799)
}

def @func_13758() -> (Tensor[(4, ?, 3), uint32],) {
  %802 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %800 = @func_7196() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %801 = %800.0;
    (%801,)
  };
  %802() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_3880() -> (Tensor[(4, ?, 3), uint32],) {
  %805 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %803 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %804 = %803.0;
    (%804,)
  };
  %805() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_6121() -> Tensor[(4, ?, 3), uint32] {
  %806 = fn () -> Tensor[(4, ?, 3), uint32] {
    @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */
  };
  %806() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_9911() -> (Tensor[(660), float32], Tensor[(4, ?, 3), uint32], Tensor[(8, 12), uint32], Tensor[(96), uint32], Tensor[(520), bool], Tensor[(832), uint64]) {
  %807 = @func_5033() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %808 = @func_6009() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %809 = cast(meta[relay.Constant][51] /* ty=Tensor[(96), uint32] */, dtype="uint32") /* ty=Tensor[(96), uint32] */;
  %810 = cast(meta[relay.Constant][52] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %811 = reshape(%809, newshape=[8, 12]) /* ty=Tensor[(8, 12), uint32] */;
  %812 = reshape(%810, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %813 = @func_3213(%811, %812) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 8, 3), bool], Tensor[(8, 12), uint32], Tensor[(4, 1040, 3), int16], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(4, 13, 16), float32]) */;
  %814 = @func_6985() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64]) */;
  %815 = %807.1;
  %816 = %808.0;
  %817 = %813.2;
  %818 = %814.2;
  (%815, %816, %817, meta[relay.Constant][51] /* ty=Tensor[(96), uint32] */, meta[relay.Constant][52] /* ty=Tensor[(520), bool] */, %818)
}

def @func_3958(%var_3939: Tensor[(1540), float64], %var_3949: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) {
  %819 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %820 = cast(meta[relay.Constant][53] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %821 = reshape(%820, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), uint32] */;
  %822 = @func_3506(%821) /* ty=(Tensor[(4, 4, 3), float32],) */;
  %823 = %822.0;
  %824 = cast(%823, dtype="float64") /* ty=Tensor[(4, 4, 3), float64] */;
  %825 = cosh(%824) /* ty=Tensor[(4, 4, 3), float64] */;
  %826 = cast(%823, dtype="bool") /* ty=Tensor[(4, 4, 3), bool] */;
  %827 = shape_of(%825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%825, dtype="bool") /* ty=Tensor[(4, 4, 3), bool] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %830 = cast(%var_3939, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %831 = reshape(%830, newshape=[14, 11, 10]) /* ty=Tensor[(14, 11, 10), float64] */;
  %832 = @func_2441(%831) /* ty=(Tensor[(14, 11, 10), float64],) */;
  %833 = cast(meta[relay.Constant][54] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %834 = cast(%var_3949, dtype="bool") /* ty=Tensor[(520), bool] */;
  %835 = reshape(%833, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %836 = reshape(%834, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %837 = @func_2941(%835, %836) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */;
  %838 = %819.0;
  %839 = greater(%828, %829) /* ty=Tensor[(4, 4, 3), bool] */;
  %840 = %832.0;
  %841 = %837.2;
  (%838, meta[relay.Constant][53] /* ty=Tensor[(48), uint32] */, %839, %840, %var_3939, %841, meta[relay.Constant][54] /* ty=Tensor[(1008), uint64] */, %var_3949)
}

def @func_10811(%var_10809: Tensor[(1008), uint64], %var_10810: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, 13, 10), bool], Tensor[(832), uint64]) {
  @func_10807(%var_10809, %var_10810) /* ty=(Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, 13, 10), bool], Tensor[(832), uint64]) */
}

def @func_9339() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %842 = @func_4277() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %843 = @func_4934() /* ty=Tensor[(4, ?, 3), uint32] */;
  %844 = %842.1;
  (%843, %844)
}

def @func_9068() -> Tensor[(1040), float64] {
  @func_9066() /* ty=Tensor[(1040), float64] */
}

def @func_12454() -> (Tensor[(4, ?, 3), uint32],) {
  %847 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %845 = @func_11061() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %846 = %845.0;
    (%846,)
  };
  %847() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_13476() -> (Tensor[(4, ?, 3), uint32],) {
  @func_13474() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_7687() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
  %852 = fn () -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
    %848 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %849 = @func_4277() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
    %850 = %848.0;
    %851 = %849.0;
    (%850, %851)
  };
  %852() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */
}

def @func_9200() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %858 = fn () -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
    %853 = @func_6794() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), int8]) */;
    %854 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %855 = %853.0;
    %856 = %854.0;
    %857 = @func_3845() /* ty=Tensor[(4, ?, 3), uint32] */;
    (%855, %856, %857)
  };
  %858() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */
}

def @func_4936() -> Tensor[(4, ?, 3), uint32] {
  @func_4934() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_5883() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 24), uint32], Tensor[(4, 8, 3), float32]) {
  %859 = cast(meta[relay.Constant][55] /* ty=Tensor[(4, 24), uint32] */, dtype="uint32") /* ty=Tensor[(4, 24), uint32] */;
  %860 = reshape(%859, newshape=[4, 8, 3]) /* ty=Tensor[(4, 8, 3), uint32] */;
  %861 = @func_2821(%860) /* ty=(Tensor[(4, 8, 3), bool],) */;
  %862 = %861.0;
  %863 = cast(%862, dtype="float32") /* ty=Tensor[(4, 8, 3), float32] */;
  %864 = @func_4844() /* ty=Tensor[(4, ?, 3), uint32] */;
  %865 = exp(%863) /* ty=Tensor[(4, 8, 3), float32] */;
  (%864, meta[relay.Constant][55] /* ty=Tensor[(4, 24), uint32] */, %865)
}

def @func_4922() -> (Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(520, 2), float64]) {
  @func_4920() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(520, 2), float64]) */
}

def @func_6662(%var_6660: Tensor[(1, 2, 7), float32], %var_6661: Tensor[(11, 2, 7), float32]) -> (Tensor[(11, 2, 7), float64],) {
  @func_6658(%var_6660, %var_6661) /* ty=(Tensor[(11, 2, 7), float64],) */
}

def @func_5458() -> (Tensor[(832), uint64],) {
  @func_5456() /* ty=(Tensor[(832), uint64],) */
}

def @func_12754() -> Tensor[(4, ?, 3), uint32] {
  %867 = fn () -> Tensor[(4, ?, 3), uint32] {
    %866 = @func_11061() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %866.0
  };
  %867() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_10911() -> (Tensor[(4, ?, 3), uint32],) {
  @func_10909() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_11439(%var_11436: Tensor[(66, 2), float32], %var_11437: Tensor[(143), int8], %var_11438: Tensor[(2288), int8]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(12, 11, 7), float32], Tensor[(66, 2), float32], Tensor[(143), int8], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, ?, 3), uint32]) {
  %882 = fn (%var_11415: Tensor[(66, 2), float32], %var_11424: Tensor[(143), int8], %var_11425: Tensor[(2288), int8]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(12, 11, 7), float32], Tensor[(66, 2), float32], Tensor[(143), int8], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, ?, 3), uint32]) {
    %868 = @func_6860() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
    %869 = @func_9119() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %870 = cast(%var_11415, dtype="float32") /* ty=Tensor[(66, 2), float32] */;
    %871 = reshape(%870, newshape=[12, 11, 1]) /* ty=Tensor[(12, 11, 1), float32] */;
    %872 = cast(%var_11424, dtype="int8") /* ty=Tensor[(143), int8] */;
    %873 = cast(%var_11425, dtype="int8") /* ty=Tensor[(2288), int8] */;
    %874 = reshape(%872, newshape=[143]) /* ty=Tensor[(143), int8] */;
    %875 = reshape(%873, newshape=[1144, 2]) /* ty=Tensor[(1144, 2), int8] */;
    %876 = @func_10615(%874, %875) /* ty=(Tensor[(1040), float64], Tensor[(4, ?, 3), bool], Tensor[(13, 16, 11), int8], Tensor[(143), int8], Tensor[(1144, 2), float64]) */;
    %877 = %868.0;
    %878 = %869.0;
    %879 = @func_3284(%871) /* ty=Tensor[(12, 11, 7), float32] */;
    %880 = %876.3;
    %881 = @func_7564() /* ty=Tensor[(4, ?, 3), uint32] */;
    (%877, %878, %879, %var_11415, %880, %var_11424, %var_11425, %881)
  };
  %882(%var_11436, %var_11437, %var_11438) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(12, 11, 7), float32], Tensor[(66, 2), float32], Tensor[(143), int8], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, ?, 3), uint32]) */
}

def @func_11298() -> Tensor[(4, ?, 3), uint32] {
  @func_6120() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_4227(%var_4226: Tensor[(4, 5, 3), uint32]) -> Tensor[(4, 5, 3), uint32] {
  %887 = fn (%var_4212: Tensor[(4, 5, 3), uint32]) -> Tensor[(4, 5, 3), uint32] {
    %883 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %884 = %883.0;
    %885 = cast(%884, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
    %886 = cast(%var_4212, dtype="uint32") /* ty=Tensor[(4, 5, 3), uint32] */;
    bitwise_or(%885, %886) /* ty=Tensor[(4, 5, 3), uint32] */
  };
  %887(%var_4226) /* ty=Tensor[(4, 5, 3), uint32] */
}

def @func_6985() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64]) {
  %888 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %889 = cast(meta[relay.Constant][56] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %890 = reshape(%889, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %891 = @func_33(%890) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %892 = %888.0;
  %893 = %891.0;
  (%892, %893, meta[relay.Constant][56] /* ty=Tensor[(832), uint64] */)
}

def @func_7040(%var_7039: Tensor[(416, 2), uint64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(416, 2), bool], Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint32]) {
  %909 = fn (%var_7011: Tensor[(416, 2), uint64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(416, 2), bool], Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint32]) {
    %894 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %895 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
    %896 = %895.1;
    %897 = cast(%var_7011, dtype="bool") /* ty=Tensor[(416, 2), bool] */;
    %898 = shape_of(%896, dtype="int32") /* ty=Tensor[(2), int32] */;
    %899 = cast(%896, dtype="bool") /* ty=Tensor[(416, 2), bool] */;
    %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %901 = cast(%896, dtype="uint32") /* ty=Tensor[(416, 2), uint32] */;
    %902 = shape_of(%var_7011, dtype="int32") /* ty=Tensor[(2), int32] */;
    %903 = cast(%var_7011, dtype="uint32") /* ty=Tensor[(416, 2), uint32] */;
    %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %905 = %894.0;
    %906 = less(%899, %900) /* ty=Tensor[(416, 2), bool] */;
    %907 = @func_4991() /* ty=Tensor[(4, ?, 3), uint32] */;
    %908 = subtract(%903, %904) /* ty=Tensor[(416, 2), uint32] */;
    (%905, %906, %907, %908)
  };
  %909(%var_7039) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(416, 2), bool], Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint32]) */
}

def @func_2713() -> (Tensor[(4, ?, 3), uint32],) {
  %910 = cast(meta[relay.Constant][57] /* ty=Tensor[(4, 1, 3), float64] */, dtype="float64") /* ty=Tensor[(4, 1, 3), float64] */;
  %911 = tan(%910) /* ty=Tensor[(4, 1, 3), float64] */;
  %912 = cast(meta[relay.Constant][57] /* ty=Tensor[(4, 1, 3), float64] */, dtype="uint32") /* ty=Tensor[(4, 1, 3), uint32] */;
  %913 = shape_of(%911, dtype="int32") /* ty=Tensor[(3), int32] */;
  %914 = cast(%911, dtype="uint32") /* ty=Tensor[(4, 1, 3), uint32] */;
  %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %916 = bitwise_xor(%914, %915) /* ty=Tensor[(4, ?, 3), uint32] */;
  (%916,)
}

def @func_13214(%var_13204: Tensor[(108), uint32]) -> (Tensor[(1008), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(108), uint32]) {
  %917 = @func_9657() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1540), float64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), int8]) */;
  %918 = @func_9339() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %919 = cast(%var_13204, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %920 = reshape(%919, newshape=[3, 36]) /* ty=Tensor[(3, 36), uint32] */;
  %921 = @func_8884(%920) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, 9, 3), bool], Tensor[(3, 36), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %922 = %917.2;
  %923 = %918.1;
  %924 = %921.4;
  (%922, %923, %924, %var_13204)
}

def @func_2444(%var_2442: Tensor[(14, 11, 10), float64]) -> (Tensor[(14, 11, 10), float64],) {
  @func_2441(%var_2442) /* ty=(Tensor[(14, 11, 10), float64],) */
}

def @func_6795() -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), int8]) {
  %938 = fn () -> (Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), int8]) {
    %925 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %926 = %925.0;
    %927 = cast(%926, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
    %928 = reshape(%927, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
    %929 = @func_5788(%928) /* ty=(Tensor[(4, ?, 3), bool], Tensor[(4, ?, 3), uint32]) */;
    %930 = %929.0;
    %931 = @func_6143() /* ty=Tensor[(4, ?, 3), uint32] */;
    %932 = cast(%931, dtype="int8") /* ty=Tensor[(4, ?, 3), int8] */;
    %933 = shape_of(%930, dtype="int32") /* ty=Tensor[(3), int32] */;
    %934 = cast(%930, dtype="int8") /* ty=Tensor[(4, ?, 3), int8] */;
    %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %936 = @func_4332() /* ty=Tensor[(1040), float64] */;
    %937 = multiply(%934, %935) /* ty=Tensor[(4, ?, 3), int8] */;
    (%926, %936, %937)
  };
  %938() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), int8]) */
}

def @func_13970() -> Tensor[(4, ?, 3), uint32] {
  %940 = fn () -> Tensor[(4, ?, 3), uint32] {
    %939 = @func_12453() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %939.0
  };
  %940() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_11789() -> (Tensor[(11, 10, 7), bool], Tensor[(4, ?, 3), uint32], Tensor[(11, 10, 7), float64], Tensor[(4, ?, 3), uint32], Tensor[(1540), float64], Tensor[(576), float64], Tensor[(832), uint64]) {
  @func_11787() /* ty=(Tensor[(11, 10, 7), bool], Tensor[(4, ?, 3), uint32], Tensor[(11, 10, 7), float64], Tensor[(4, ?, 3), uint32], Tensor[(1540), float64], Tensor[(576), float64], Tensor[(832), uint64]) */
}

def @func_4846() -> Tensor[(4, ?, 3), uint32] {
  @func_4844() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_3999(%var_3985: Tensor[(110, 6), float32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(110, 6), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
  %941 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %942 = cast(%var_3985, dtype="float32") /* ty=Tensor[(110, 6), float32] */;
  %943 = cast(%var_3985, dtype="float32") /* ty=Tensor[(110, 6), float32] */;
  %944 = cast(meta[relay.Constant][58] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %945 = cast(meta[relay.Constant][59] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %946 = cast(meta[relay.Constant][60] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %947 = reshape(%942, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %948 = reshape(%943, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
  %949 = reshape(%944, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %950 = reshape(%945, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %951 = reshape(%946, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %952 = @func_1020(%947, %948, %949, %950, %951) /* ty=(Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) */;
  %953 = @func_3482() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %954 = %952.7;
  %955 = cast(%954, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
  %956 = reshape(%955, newshape=[104, 8]) /* ty=Tensor[(104, 8), uint64] */;
  %957 = @func_3662(%956) /* ty=(Tensor[(4, ?, 3), float64], Tensor[(4, 13, 16), uint64], Tensor[(104, 8), uint64]) */;
  %958 = %941.0;
  %959 = %953.0;
  %960 = %957.1;
  (%958, %954, %var_3985, meta[relay.Constant][58] /* ty=Tensor[(1008), uint64] */, meta[relay.Constant][59] /* ty=Tensor[(520), bool] */, meta[relay.Constant][60] /* ty=Tensor[(832), uint64] */, %959, %960)
}

def @func_4991() -> Tensor[(4, ?, 3), uint32] {
  %961 = @func_4775() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %961.0
}

def @func_6724() -> (Tensor[(1040), float64],) {
  %963 = fn () -> (Tensor[(1040), float64],) {
    %962 = @func_4332() /* ty=Tensor[(1040), float64] */;
    (%962,)
  };
  %963() /* ty=(Tensor[(1040), float64],) */
}

def @func_5086() -> (Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) {
  %970 = fn () -> (Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) {
    %964 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %965 = %964.0;
    %966 = cast(%965, dtype="float64") /* ty=Tensor[(4, ?, 3), float64] */;
    %967 = @func_4019() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64], Tensor[(4, ?, 3), float64]) */;
    %968 = cosh(%966) /* ty=Tensor[(4, ?, 3), float64] */;
    %969 = %967.2;
    (%968, %969)
  };
  %970() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */
}

def @func_8090(%var_8088: Tensor[(14), float32], %var_8089: Tensor[(154), float32]) -> (Tensor[(4, ?, 3), float64], Tensor[(11, 2, 7), float64], Tensor[(14), float32], Tensor[(154), float32]) {
  %979 = fn (%var_8081: Tensor[(14), float32], %var_8082: Tensor[(154), float32]) -> (Tensor[(4, ?, 3), float64], Tensor[(11, 2, 7), float64], Tensor[(14), float32], Tensor[(154), float32]) {
    %971 = @func_7342() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(4, ?, 3), uint32]) */;
    %972 = cast(%var_8081, dtype="float32") /* ty=Tensor[(14), float32] */;
    %973 = cast(%var_8082, dtype="float32") /* ty=Tensor[(154), float32] */;
    %974 = reshape(%972, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), float32] */;
    %975 = reshape(%973, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float32] */;
    %976 = @func_6658(%974, %975) /* ty=(Tensor[(11, 2, 7), float64],) */;
    %977 = %971.0;
    %978 = %976.0;
    (%977, %978, %var_8081, %var_8082)
  };
  %979(%var_8088, %var_8089) /* ty=(Tensor[(4, ?, 3), float64], Tensor[(11, 2, 7), float64], Tensor[(14), float32], Tensor[(154), float32]) */
}

def @func_12312() -> Tensor[(4, ?, 3), uint32] {
  @func_12310() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_13933(%var_13931: Tensor[(1008), uint64]) -> (Tensor[(4, ?, 3), float64], Tensor[(520), bool], Tensor[(1008), uint64], Tensor[(520), bool]) {
  @func_13930(%var_13931) /* ty=(Tensor[(4, ?, 3), float64], Tensor[(520), bool], Tensor[(1008), uint64], Tensor[(520), bool]) */
}

def @func_8225() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) {
  %984 = fn () -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) {
    %980 = @func_7560() /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %981 = @func_5721() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %982 = %980.0;
    %983 = %981.0;
    (%982, %983)
  };
  %984() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */
}

def @func_4776() -> (Tensor[(4, ?, 3), uint32],) {
  %987 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %985 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %986 = %985.0;
    (%986,)
  };
  %987() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_12708() -> Tensor[(4, ?, 3), uint32] {
  %988 = @func_6590() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %988.0
}

def @func_10742() -> Tensor[(4, ?, 3), uint32] {
  @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_10293() -> (Tensor[(4, ?, 3), uint32],) {
  %989 = @func_7083() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %990 = %989.0;
  (%990,)
}

def @func_13645() -> (Tensor[(4, ?, 3), uint32],) {
  %993 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %991 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %992 = %991.0;
    (%992,)
  };
  %993() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_11398() -> (Tensor[(4, ?, 3), int8], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) {
  %1000 = fn () -> (Tensor[(4, ?, 3), int8], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) {
    %994 = @func_9657() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1540), float64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), int8]) */;
    %995 = @func_7560() /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %996 = @func_9966() /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %997 = %994.6;
    %998 = %995.0;
    %999 = %996.0;
    (%997, %998, %999)
  };
  %1000() /* ty=(Tensor[(4, ?, 3), int8], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) */
}

def @func_5456() -> (Tensor[(832), uint64],) {
  %1001 = @func_4369() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(600), uint64], Tensor[(832), uint64]) */;
  %1002 = %1001.3;
  (%1002,)
}

def @func_13930(%var_13923: Tensor[(1008), uint64]) -> (Tensor[(4, ?, 3), float64], Tensor[(520), bool], Tensor[(1008), uint64], Tensor[(520), bool]) {
  %1003 = cast(%var_13923, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %1004 = cast(meta[relay.Constant][61] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %1005 = reshape(%1003, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %1006 = reshape(%1004, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %1007 = @func_10807(%1005, %1006) /* ty=(Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, 13, 10), bool], Tensor[(832), uint64]) */;
  %1008 = @func_6521() /* ty=Tensor[(4, ?, 3), float64] */;
  %1009 = %1007.3;
  (%1008, %1009, %var_13923, meta[relay.Constant][61] /* ty=Tensor[(520), bool] */)
}

def @func_12653() -> Tensor[(1040), float64] {
  @func_12651() /* ty=Tensor[(1040), float64] */
}

def @func_6825(%var_6805: Tensor[(832), uint64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(832), uint64]) {
  %1010 = @func_5721() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1011 = %1010.0;
  %1012 = cast(%1011, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
  %1013 = cast(%var_6805, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %1014 = reshape(%1012, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
  %1015 = reshape(%1013, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %1016 = @func_3017(%1014, %1015) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), float32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64]) */;
  %1017 = %1016.3;
  (%1011, %1017, %var_6805)
}

def @func_4606(%var_4600: Tensor[(4, 1, 3), uint32], %var_4601: Tensor[(4, 252), uint64], %var_4602: Tensor[(520), bool], %var_4603: Tensor[(660), float32], %var_4604: Tensor[(1540), float64], %var_4605: Tensor[(48, 1), uint32]) -> (Tensor[(4, ?, 3), bool], Tensor[(1008), uint64], Tensor[(4, 252), uint64], Tensor[(520), bool], Tensor[(4, 13, 16), uint64], Tensor[(660), float32], Tensor[(4, 13, 10), bool], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 4, 3), float32], Tensor[(48, 1), uint32], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(3, 96), float64], Tensor[(288), uint32]) {
  %1065 = fn (%var_4495: Tensor[(4, 1, 3), uint32], %var_4503: Tensor[(4, 252), uint64], %var_4504: Tensor[(520), bool], %var_4507: Tensor[(660), float32], %var_4539: Tensor[(1540), float64], %var_4560: Tensor[(48, 1), uint32]) -> (Tensor[(4, ?, 3), bool], Tensor[(1008), uint64], Tensor[(4, 252), uint64], Tensor[(520), bool], Tensor[(4, 13, 16), uint64], Tensor[(660), float32], Tensor[(4, 13, 10), bool], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 4, 3), float32], Tensor[(48, 1), uint32], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(3, 96), float64], Tensor[(288), uint32]) {
    %1018 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1019 = %1018.0;
    %1020 = cast(%var_4495, dtype="bool") /* ty=Tensor[(4, 1, 3), bool] */;
    %1021 = shape_of(%1019, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1022 = cast(%1019, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
    %1023 = dyn.reshape(%1020, %1021, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1024 = cast(%var_4503, dtype="uint64") /* ty=Tensor[(4, 252), uint64] */;
    %1025 = cast(%var_4504, dtype="bool") /* ty=Tensor[(520), bool] */;
    %1026 = reshape(%1024, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
    %1027 = reshape(%1025, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %1028 = @func_2941(%1026, %1027) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */;
    %1029 = cast(%var_4507, dtype="float32") /* ty=Tensor[(660), float32] */;
    %1030 = reshape(%1029, newshape=[110, 6]) /* ty=Tensor[(110, 6), float32] */;
    %1031 = @func_3999(%1030) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(110, 6), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */;
    %1032 = cast(%var_4504, dtype="bool") /* ty=Tensor[(520), bool] */;
    %1033 = %1031.1;
    %1034 = cast(%1033, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
    %1035 = reshape(%1032, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
    %1036 = reshape(%1034, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
    %1037 = @func_215(%1035, %1036) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
    %1038 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1039 = cast(%var_4539, dtype="float64") /* ty=Tensor[(1540), float64] */;
    %1040 = reshape(%1039, newshape=[14, 11, 10]) /* ty=Tensor[(14, 11, 10), float64] */;
    %1041 = @func_2441(%1040) /* ty=(Tensor[(14, 11, 10), float64],) */;
    %1042 = cast(%var_4560, dtype="uint32") /* ty=Tensor[(48, 1), uint32] */;
    %1043 = reshape(%1042, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), uint32] */;
    %1044 = @func_3506(%1043) /* ty=(Tensor[(4, 4, 3), float32],) */;
    %1045 = %1038.0;
    %1046 = cast(%1045, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
    %1047 = cast(%1033, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
    %1048 = reshape(%1046, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
    %1049 = reshape(%1047, newshape=[832]) /* ty=Tensor[(832), uint64] */;
    %1050 = @func_3017(%1048, %1049) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), float32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64]) */;
    %1051 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1052 = cast(%var_4504, dtype="bool") /* ty=Tensor[(520), bool] */;
    %1053 = cast(meta[relay.Constant][62] /* ty=Tensor[(288), uint32] */, dtype="uint32") /* ty=Tensor[(288), uint32] */;
    %1054 = reshape(%1052, newshape=[1, 520]) /* ty=Tensor[(1, 520), bool] */;
    %1055 = reshape(%1053, newshape=[3, 96]) /* ty=Tensor[(3, 96), uint32] */;
    %1056 = @func_4458(%1054, %1055) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1, 520), bool], Tensor[(3, 96), float64], Tensor[(4, ?, 3), float32]) */;
    %1057 = not_equal(%1022, %1023) /* ty=Tensor[(4, ?, 3), bool] */;
    %1058 = %1028.3;
    %1059 = %1037.0;
    %1060 = %1041.0;
    %1061 = %1044.0;
    %1062 = %1050.0;
    %1063 = %1051.0;
    %1064 = %1056.2;
    (%1057, %1058, %var_4503, %var_4504, %1033, %var_4507, %1059, %1045, %1060, %var_4539, %1061, %var_4560, %1062, %1063, %1064, meta[relay.Constant][62] /* ty=Tensor[(288), uint32] */)
  };
  %1065(%var_4600, %var_4601, %var_4602, %var_4603, %var_4604, %var_4605) /* ty=(Tensor[(4, ?, 3), bool], Tensor[(1008), uint64], Tensor[(4, 252), uint64], Tensor[(520), bool], Tensor[(4, 13, 16), uint64], Tensor[(660), float32], Tensor[(4, 13, 10), bool], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 4, 3), float32], Tensor[(48, 1), uint32], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(3, 96), float64], Tensor[(288), uint32]) */
}

def @func_14125(%var_14124: Tensor[(1, 143), int8]) -> (Tensor[(4, 9, 3), bool], Tensor[(4, ?, 3), uint32], Tensor[(13, 16, 11), int8], Tensor[(1, 143), int8], Tensor[(88, 26), int8]) {
  %1078 = fn (%var_14116: Tensor[(1, 143), int8]) -> (Tensor[(4, 9, 3), bool], Tensor[(4, ?, 3), uint32], Tensor[(13, 16, 11), int8], Tensor[(1, 143), int8], Tensor[(88, 26), int8]) {
    %1066 = @func_9091() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1067 = %1066.0;
    %1068 = cast(%1067, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
    %1069 = cast(meta[relay.Constant][63] /* ty=Tensor[(4, 9, 3), uint32] */, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
    %1070 = cast(%var_14116, dtype="int8") /* ty=Tensor[(1, 143), int8] */;
    %1071 = cast(meta[relay.Constant][64] /* ty=Tensor[(88, 26), int8] */, dtype="int8") /* ty=Tensor[(88, 26), int8] */;
    %1072 = reshape(%1070, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), int8] */;
    %1073 = reshape(%1071, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), int8] */;
    %1074 = @func_10266(%1072, %1073) /* ty=(Tensor[(13, 16, 11), int8], Tensor[(1040), float64], Tensor[(13, 16, 11), uint16], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
    %1075 = less_equal(%1068, %1069) /* ty=Tensor[(4, 9, 3), bool] */;
    %1076 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
    %1077 = %1074.0;
    (%1075, %1076, %1077, %var_14116, meta[relay.Constant][64] /* ty=Tensor[(88, 26), int8] */)
  };
  %1078(%var_14124) /* ty=(Tensor[(4, 9, 3), bool], Tensor[(4, ?, 3), uint32], Tensor[(13, 16, 11), int8], Tensor[(1, 143), int8], Tensor[(88, 26), int8]) */
}

def @func_13565() -> Tensor[(416, 2), uint64] {
  %1080 = fn () -> Tensor[(416, 2), uint64] {
    %1079 = @func_5085() /* ty=(Tensor[(4, ?, 3), float64], Tensor[(416, 2), uint64]) */;
    %1079.1
  };
  %1080() /* ty=Tensor[(416, 2), uint64] */
}

def @func_14087(%var_14086: Tensor[(132), uint32]) -> (Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 3), int32], Tensor[(132), uint32]) {
  %1086 = fn (%var_14076: Tensor[(132), uint32]) -> (Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 3), int32], Tensor[(132), uint32]) {
    %1081 = cast(%var_14076, dtype="uint32") /* ty=Tensor[(132), uint32] */;
    %1082 = reshape(%1081, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), uint32] */;
    %1083 = @func_10518() /* ty=Tensor[(1040), float64] */;
    %1084 = @func_5995() /* ty=Tensor[(4, ?, 3), uint32] */;
    %1085 = @func_12490(%1082) /* ty=Tensor[(4, 11, 3), int32] */;
    (%1083, %1084, %1085, %var_14076)
  };
  %1086(%var_14086) /* ty=(Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 3), int32], Tensor[(132), uint32]) */
}

def @func_7564() -> Tensor[(4, ?, 3), uint32] {
  %1087 = @func_7083() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1087.0
}

def @func_8294(%var_8287: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1, 1540), float64], Tensor[(520), bool]) {
  %1088 = @func_6860() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %1089 = cast(meta[relay.Constant][65] /* ty=Tensor[(1, 1540), float64] */, dtype="float64") /* ty=Tensor[(1, 1540), float64] */;
  %1090 = cast(%var_8287, dtype="bool") /* ty=Tensor[(520), bool] */;
  %1091 = reshape(%1089, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
  %1092 = reshape(%1090, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %1093 = @func_3958(%1091, %1092) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
  %1094 = @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1095 = %1088.1;
  %1096 = @func_4934() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1097 = %1093.6;
  (%1094, %1095, %1096, %1097, meta[relay.Constant][65] /* ty=Tensor[(1, 1540), float64] */, %var_8287)
}

def @func_5364() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %1098 = @func_4775() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1099 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1100 = %1098.0;
  %1101 = %1099.0;
  (%1100, %1101)
}

def @func_3509(%var_3507: Tensor[(4, 4, 3), uint32]) -> (Tensor[(4, 4, 3), float32],) {
  @func_3506(%var_3507) /* ty=(Tensor[(4, 4, 3), float32],) */
}

def @func_14167() -> (Tensor[(4, ?, 3), uint32],) {
  %1104 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %1102 = @func_5670() /* ty=(Tensor[(4, ?, 3), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
    %1103 = %1102.2;
    (%1103,)
  };
  %1104() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_8297(%var_8295: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1, 1540), float64], Tensor[(520), bool]) {
  @func_8294(%var_8295) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(1, 1540), float64], Tensor[(520), bool]) */
}

def @func_218(%var_216: Tensor[(4, 13, 10), bool], %var_217: Tensor[(1, 832), uint64]) -> (Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) {
  %1116 = fn (%var_179: Tensor[(4, 13, 10), bool], %var_190: Tensor[(1, 832), uint64]) -> (Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) {
    %1105 = cast(%var_179, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
    %1106 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(4, 13, 10), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1107 = cast(meta[relay.Constant][66] /* ty=Tensor[(4, 13, 10), bool] */, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
    %1108 = dyn.reshape(%1105, %1106, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1109 = cast(%var_190, dtype="uint64") /* ty=Tensor[(1, 832), uint64] */;
    %1110 = reshape(%1109, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
    %1111 = @func_33(%1110) /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %1112 = cast(%var_190, dtype="float64") /* ty=Tensor[(1, 832), float64] */;
    %1113 = logical_and(%1107, %1108) /* ty=Tensor[(4, 13, 10), bool] */;
    %1114 = %1111.0;
    %1115 = rsqrt(%1112) /* ty=Tensor[(1, 832), float64] */;
    (%1113, %1114, %1115)
  };
  %1116(%var_216, %var_217) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */
}

def @func_9120() -> (Tensor[(4, ?, 3), uint32],) {
  %1119 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %1117 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1118 = %1117.0;
    (%1118,)
  };
  %1119() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_3096() -> (Tensor[(4, ?, 3), uint32],) {
  @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_10104() -> (Tensor[(1040), float64], Tensor[(4, 4, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(108), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 9, 3), float32], Tensor[(4, ?, 3), uint32]) {
  @func_10102() /* ty=(Tensor[(1040), float64], Tensor[(4, 4, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(108), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 9, 3), float32], Tensor[(4, ?, 3), uint32]) */
}

def @func_2794(%var_2793: Tensor[(520, 2), float64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) {
  %1177 = fn (%var_2776: Tensor[(520, 2), float64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) {
    %1120 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1121 = cast(meta[relay.Constant][67] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %1122 = cast(meta[relay.Constant][67] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %1123 = cast(meta[relay.Constant][68] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
    %1124 = cast(meta[relay.Constant][69] /* ty=Tensor[(520, 1), bool] */, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
    %1125 = cast(meta[relay.Constant][70] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %1126 = reshape(%1121, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
    %1127 = reshape(%1122, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
    %1128 = reshape(%1123, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
    %1129 = reshape(%1124, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %1130 = reshape(%1125, newshape=[832]) /* ty=Tensor[(832), uint64] */;
    %1131 = @func_1020(%1126, %1127, %1128, %1129, %1130) /* ty=(Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) */;
    %1132 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1133 = cast(meta[relay.Constant][67] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %1134 = cast(meta[relay.Constant][67] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %1135 = cast(meta[relay.Constant][68] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
    %1136 = cast(meta[relay.Constant][69] /* ty=Tensor[(520, 1), bool] */, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
    %1137 = acos(%1136) /* ty=Tensor[(520, 1), float64] */;
    %1138 = cast(%1137, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
    %1139 = %1131.4;
    %1140 = cast(%1139, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %1141 = reshape(%1133, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
    %1142 = reshape(%1134, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
    %1143 = reshape(%1135, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
    %1144 = reshape(%1138, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %1145 = reshape(%1140, newshape=[832]) /* ty=Tensor[(832), uint64] */;
    %1146 = @func_1020(%1141, %1142, %1143, %1144, %1145) /* ty=(Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) */;
    %1147 = cast(%1137, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
    %1148 = rsqrt(%1147) /* ty=Tensor[(520, 1), float64] */;
    %1149 = cast(%1148, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
    %1150 = acosh(%1149) /* ty=Tensor[(520, 1), float64] */;
    %1151 = cast(%1150, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
    %1152 = cast(meta[relay.Constant][70] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %1153 = reshape(%1151, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
    %1154 = reshape(%1152, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
    %1155 = @func_215(%1153, %1154) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
    %1156 = cast(meta[relay.Constant][67] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %1157 = cast(meta[relay.Constant][67] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %1158 = cast(meta[relay.Constant][68] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
    %1159 = cast(%1148, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
    %1160 = %1155.1;
    %1161 = cast(%1160, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
    %1162 = reshape(%1156, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
    %1163 = reshape(%1157, newshape=[4, 11, 15]) /* ty=Tensor[(4, 11, 15), float32] */;
    %1164 = reshape(%1158, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
    %1165 = reshape(%1159, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %1166 = reshape(%1161, newshape=[832]) /* ty=Tensor[(832), uint64] */;
    %1167 = @func_1020(%1162, %1163, %1164, %1165, %1166) /* ty=(Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) */;
    %1168 = cast(%1148, dtype="bool") /* ty=Tensor[(520, 1), bool] */;
    %1169 = cast(%var_2776, dtype="bool") /* ty=Tensor[(520, 2), bool] */;
    %1170 = less(%1168, %1169) /* ty=Tensor[(520, 2), bool] */;
    %1171 = cast(%1170, dtype="float32") /* ty=Tensor[(520, 2), float32] */;
    %1172 = %1120.0;
    %1173 = %1132.0;
    %1174 = %1146.6;
    %1175 = %1167.7;
    %1176 = sqrt(%1171) /* ty=Tensor[(520, 2), float32] */;
    (%1172, %1139, meta[relay.Constant][67] /* ty=Tensor[(660), float32] */, meta[relay.Constant][68] /* ty=Tensor[(1008), uint64] */, meta[relay.Constant][70] /* ty=Tensor[(832), uint64] */, %1173, %1174, %1150, %1160, %1175, %1176)
  };
  %1177(%var_2793) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */
}

def @func_11935() -> (Tensor[(4, 4, 3), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
  @func_11933() /* ty=(Tensor[(4, 4, 3), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */
}

def @func_8886(%var_8885: Tensor[(3, 36), uint32]) -> (Tensor[(4, 13, 16), uint64], Tensor[(4, 9, 3), bool], Tensor[(3, 36), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) {
  %1188 = fn (%var_8876: Tensor[(3, 36), uint32]) -> (Tensor[(4, 13, 16), uint64], Tensor[(4, 9, 3), bool], Tensor[(3, 36), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) {
    %1178 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
    %1179 = cast(%var_8876, dtype="uint32") /* ty=Tensor[(3, 36), uint32] */;
    %1180 = reshape(%1179, newshape=[4, 9, 3]) /* ty=Tensor[(4, 9, 3), uint32] */;
    %1181 = @func_4814(%1180) /* ty=(Tensor[(4, 9, 3), bool], Tensor[(4, 9, 3), float32]) */;
    %1182 = @func_5670() /* ty=(Tensor[(4, ?, 3), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
    %1183 = @func_4240() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1184 = %1178.1;
    %1185 = %1181.0;
    %1186 = %1182.1;
    %1187 = %1183.0;
    (%1184, %1185, %var_8876, %1186, %1187)
  };
  %1188(%var_8885) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, 9, 3), bool], Tensor[(3, 36), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */
}

def @func_9757() -> Tensor[(4, ?, 3), uint32] {
  %1190 = fn () -> Tensor[(4, ?, 3), uint32] {
    %1189 = @func_4304() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1189.0
  };
  %1190() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_4304() -> (Tensor[(4, ?, 3), uint32],) {
  %1191 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1192 = %1191.0;
  (%1192,)
}

def @func_9066() -> Tensor[(1040), float64] {
  %1193 = @func_6794() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(1040), float64], Tensor[(4, ?, 3), int8]) */;
  %1193.1
}

def @func_12211(%var_12209: Tensor[(640), int8]) -> (Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(10, 16, 4), int8], Tensor[(640), int8], Tensor[(4, 13, 16), uint64]) {
  @func_12208(%var_12209) /* ty=(Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(10, 16, 4), int8], Tensor[(640), int8], Tensor[(4, 13, 16), uint64]) */
}

def @func_5790(%var_5789: Tensor[(4, 1, 3), uint32]) -> (Tensor[(4, ?, 3), bool], Tensor[(4, ?, 3), uint32]) {
  %1202 = fn (%var_5773: Tensor[(4, 1, 3), uint32]) -> (Tensor[(4, ?, 3), bool], Tensor[(4, ?, 3), uint32]) {
    %1194 = @func_3845() /* ty=Tensor[(4, ?, 3), uint32] */;
    %1195 = cast(%var_5773, dtype="bool") /* ty=Tensor[(4, 1, 3), bool] */;
    %1196 = shape_of(%1194, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1197 = cast(%1194, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
    %1198 = dyn.reshape(%1195, %1196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1199 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
    %1200 = equal(%1197, %1198) /* ty=Tensor[(4, ?, 3), bool] */;
    %1201 = %1199.0;
    (%1200, %1201)
  };
  %1202(%var_5789) /* ty=(Tensor[(4, ?, 3), bool], Tensor[(4, ?, 3), uint32]) */
}

def @func_12651() -> Tensor[(1040), float64] {
  @func_4332() /* ty=Tensor[(1040), float64] */
}

def @func_13016(%var_13014: Tensor[(4, 9, 13), float64]) -> (Tensor[(4, 9, 13), float64],) {
  @func_13013(%var_13014) /* ty=(Tensor[(4, 9, 13), float64],) */
}

def @func_7561() -> (Tensor[(4, 13, 16), uint64],) {
  %1205 = fn () -> (Tensor[(4, 13, 16), uint64],) {
    %1203 = @func_6627() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64]) */;
    %1204 = %1203.2;
    (%1204,)
  };
  %1205() /* ty=(Tensor[(4, 13, 16), uint64],) */
}

def @func_14273(%var_14272: Tensor[(416, 2), uint64]) -> (Tensor[(416, 2), float32], Tensor[(4, ?, 3), uint32]) {
  %1220 = fn (%var_14238: Tensor[(416, 2), uint64]) -> (Tensor[(416, 2), float32], Tensor[(4, ?, 3), uint32]) {
    %1206 = @func_7897() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint64], Tensor[(14, 11, 10), float64]) */;
    %1207 = %1206.1;
    %1208 = cast(%var_14238, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
    %1209 = shape_of(%1207, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1210 = cast(%1207, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
    %1211 = dyn.reshape(%1208, %1209, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1212 = divide(%1210, %1211) /* ty=Tensor[(416, 2), float32] */;
    %1213 = cast(%1212, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
    %1214 = shape_of(%1207, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1215 = cast(%1207, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
    %1216 = dyn.reshape(%1213, %1214, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1217 = @func_3094() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1218 = power(%1215, %1216) /* ty=Tensor[(416, 2), float32] */;
    %1219 = %1217.0;
    (%1218, %1219)
  };
  %1220(%var_14272) /* ty=(Tensor[(416, 2), float32], Tensor[(4, ?, 3), uint32]) */
}

def @func_11693() -> Tensor[(4, ?, 3), uint32] {
  %1222 = fn () -> Tensor[(4, ?, 3), uint32] {
    %1221 = @func_6590() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1221.0
  };
  %1222() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_6658(%var_6636: Tensor[(1, 2, 7), float32], %var_6642: Tensor[(11, 2, 7), float32]) -> (Tensor[(11, 2, 7), float64],) {
  %1223 = cast(%var_6636, dtype="float32") /* ty=Tensor[(1, 2, 7), float32] */;
  %1224 = cos(%1223) /* ty=Tensor[(1, 2, 7), float32] */;
  %1225 = cast(%1224, dtype="float64") /* ty=Tensor[(1, 2, 7), float64] */;
  %1226 = cast(%var_6642, dtype="float64") /* ty=Tensor[(11, 2, 7), float64] */;
  %1227 = power(%1225, %1226) /* ty=Tensor[(11, 2, 7), float64] */;
  (%1227,)
}

def @func_4920() -> (Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(520, 2), float64]) {
  %1228 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1229 = cast(meta[relay.Constant][71] /* ty=Tensor[(520, 2), float64] */, dtype="float64") /* ty=Tensor[(520, 2), float64] */;
  %1230 = reshape(%1229, newshape=[520, 2]) /* ty=Tensor[(520, 2), float64] */;
  %1231 = @func_2792(%1230) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1, 832), float64], Tensor[(520, 1), float64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float32]) */;
  %1232 = %1228.0;
  %1233 = %1231.1;
  (%1232, %1233, meta[relay.Constant][71] /* ty=Tensor[(520, 2), float64] */)
}

def @func_12292() -> Tensor[(4, ?, 3), uint32] {
  %1235 = fn () -> Tensor[(4, ?, 3), uint32] {
    %1234 = @func_10909() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1234.0
  };
  %1235() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_10279() -> (Tensor[(4, ?, 3), uint32],) {
  %1236 = @func_7564() /* ty=Tensor[(4, ?, 3), uint32] */;
  (%1236,)
}

def @func_8322() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float64]) {
  @func_8320() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(520, 2), float64]) */
}

def @func_4020() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64], Tensor[(4, ?, 3), float64]) {
  %1247 = fn () -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64], Tensor[(4, ?, 3), float64]) {
    %1237 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
    %1238 = cast(meta[relay.Constant][72] /* ty=Tensor[(416, 2), uint64] */, dtype="uint64") /* ty=Tensor[(416, 2), uint64] */;
    %1239 = reshape(%1238, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
    %1240 = @func_33(%1239) /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %1241 = cast(meta[relay.Constant][72] /* ty=Tensor[(416, 2), uint64] */, dtype="uint64") /* ty=Tensor[(416, 2), uint64] */;
    %1242 = reshape(%1241, newshape=[104, 8]) /* ty=Tensor[(104, 8), uint64] */;
    %1243 = @func_3662(%1242) /* ty=(Tensor[(4, ?, 3), float64], Tensor[(4, 13, 16), uint64], Tensor[(104, 8), uint64]) */;
    %1244 = %1237.0;
    %1245 = %1240.0;
    %1246 = %1243.0;
    (%1244, %1245, meta[relay.Constant][72] /* ty=Tensor[(416, 2), uint64] */, %1246)
  };
  %1247() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64], Tensor[(4, ?, 3), float64]) */
}

def @func_9968() -> (Tensor[(4, 13, 16), uint64],) {
  @func_9966() /* ty=(Tensor[(4, 13, 16), uint64],) */
}

def @func_11062() -> (Tensor[(4, ?, 3), uint32],) {
  %1249 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %1248 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
    (%1248,)
  };
  %1249() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_11866() -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  %1266 = fn () -> (Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
    %1250 = @func_9966() /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %1251 = @func_11375() /* ty=Tensor[(4, ?, 3), uint32] */;
    %1252 = cast(%1251, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
    %1253 = %1250.0;
    %1254 = cast(%1253, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
    %1255 = reshape(%1252, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
    %1256 = reshape(%1254, newshape=[832]) /* ty=Tensor[(832), uint64] */;
    %1257 = @func_3017(%1255, %1256) /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), float32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64]) */;
    %1258 = @func_6419() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1259 = cast(%1253, dtype="uint64") /* ty=Tensor[(4, 13, 16), uint64] */;
    %1260 = reshape(%1259, newshape=[832]) /* ty=Tensor[(832), uint64] */;
    %1261 = @func_6825(%1260) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(832), uint64]) */;
    %1262 = %1257.3;
    %1263 = @func_11657() /* ty=Tensor[(1040), float64] */;
    %1264 = %1258.0;
    %1265 = %1261.0;
    (%1253, %1251, %1262, %1263, %1264, %1265)
  };
  %1266() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */
}

def @func_12035(%var_12033: Tensor[(5, 104), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(143), int8], Tensor[(504, 2), uint64], Tensor[(5, 104), bool]) {
  @func_12032(%var_12033) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(143), int8], Tensor[(504, 2), uint64], Tensor[(5, 104), bool]) */
}

def @func_6421() -> (Tensor[(4, ?, 3), uint32],) {
  @func_6419() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_10950() -> (Tensor[(4, ?, 3), uint32],) {
  %1268 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %1267 = @func_9756() /* ty=Tensor[(4, ?, 3), uint32] */;
    (%1267,)
  };
  %1268() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_13516() -> (Tensor[(416, 2), float32],) {
  @func_13514() /* ty=(Tensor[(416, 2), float32],) */
}

def @func_5311(%var_5308: Tensor[(520), bool], %var_5309: Tensor[(660), float32], %var_5310: Tensor[(48), uint32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(660), float32], Tensor[(1540), float64], Tensor[(48), uint32], Tensor[(520), bool], Tensor[(660), float32], Tensor[(4, ?, 3), uint32]) {
  %1302 = fn (%var_5266: Tensor[(520), bool], %var_5267: Tensor[(660), float32], %var_5269: Tensor[(48), uint32]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(660), float32], Tensor[(1540), float64], Tensor[(48), uint32], Tensor[(520), bool], Tensor[(660), float32], Tensor[(4, ?, 3), uint32]) {
    %1269 = @func_3845() /* ty=Tensor[(4, ?, 3), uint32] */;
    %1270 = cast(%1269, dtype="uint32") /* ty=Tensor[(4, ?, 3), uint32] */;
    %1271 = cast(meta[relay.Constant][73] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
    %1272 = cast(%var_5266, dtype="bool") /* ty=Tensor[(520), bool] */;
    %1273 = cast(%var_5267, dtype="float32") /* ty=Tensor[(660), float32] */;
    %1274 = cast(meta[relay.Constant][74] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
    %1275 = cast(%var_5269, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %1276 = reshape(%1270, newshape=[4, 1, 3]) /* ty=Tensor[(4, 1, 3), uint32] */;
    %1277 = reshape(%1271, newshape=[4, 252]) /* ty=Tensor[(4, 252), uint64] */;
    %1278 = reshape(%1272, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %1279 = reshape(%1273, newshape=[660]) /* ty=Tensor[(660), float32] */;
    %1280 = reshape(%1274, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
    %1281 = reshape(%1275, newshape=[48, 1]) /* ty=Tensor[(48, 1), uint32] */;
    %1282 = @func_4599(%1276, %1277, %1278, %1279, %1280, %1281) /* ty=(Tensor[(4, ?, 3), bool], Tensor[(1008), uint64], Tensor[(4, 252), uint64], Tensor[(520), bool], Tensor[(4, 13, 16), uint64], Tensor[(660), float32], Tensor[(4, 13, 10), bool], Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 4, 3), float32], Tensor[(48, 1), uint32], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(3, 96), float64], Tensor[(288), uint32]) */;
    %1283 = cast(meta[relay.Constant][73] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
    %1284 = cast(%var_5266, dtype="bool") /* ty=Tensor[(520), bool] */;
    %1285 = reshape(%1283, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
    %1286 = reshape(%1284, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %1287 = @func_2941(%1285, %1286) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */;
    %1288 = cast(meta[relay.Constant][74] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
    %1289 = %1287.4;
    %1290 = cast(%1289, dtype="bool") /* ty=Tensor[(520), bool] */;
    %1291 = reshape(%1288, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
    %1292 = reshape(%1290, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %1293 = @func_3958(%1291, %1292) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
    %1294 = cast(meta[relay.Constant][74] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
    %1295 = cast(%1289, dtype="bool") /* ty=Tensor[(520), bool] */;
    %1296 = reshape(%1294, newshape=[1540]) /* ty=Tensor[(1540), float64] */;
    %1297 = reshape(%1295, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %1298 = @func_3958(%1296, %1297) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(48), uint32], Tensor[(4, 4, 3), bool], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool]) */;
    %1299 = %1282.7;
    %1300 = %1293.5;
    %1301 = %1298.0;
    (%1269, %1299, meta[relay.Constant][73] /* ty=Tensor[(1008), uint64] */, %var_5266, %var_5267, meta[relay.Constant][74] /* ty=Tensor[(1540), float64] */, %var_5269, %1289, %1300, %1301)
  };
  %1302(%var_5308, %var_5309, %var_5310) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(660), float32], Tensor[(1540), float64], Tensor[(48), uint32], Tensor[(520), bool], Tensor[(660), float32], Tensor[(4, ?, 3), uint32]) */
}

def @func_11276(%var_11199: Tensor[(4, 10, 3), uint32], %var_11228: Tensor[(4, 10, 3), uint32], %var_11249: Tensor[(132), float32]) -> (Tensor[(4, 10, 3), int64], Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 10, 3), int32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(12, 11, 7), float32], Tensor[(132), float32], Tensor[(4, ?, 3), uint32]) {
  %1303 = @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1304 = cast(%1303, dtype="int64") /* ty=Tensor[(4, ?, 3), int64] */;
  %1305 = cast(%var_11199, dtype="int64") /* ty=Tensor[(4, 10, 3), int64] */;
  %1306 = @func_4019() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64], Tensor[(4, ?, 3), float64]) */;
  %1307 = cast(%var_11228, dtype="int32") /* ty=Tensor[(4, 10, 3), int32] */;
  %1308 = shape_of(%var_11199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1309 = cast(%var_11199, dtype="int32") /* ty=Tensor[(4, 10, 3), int32] */;
  %1310 = dyn.reshape(%1307, %1308, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1311 = @func_7962() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1312 = @func_10855() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1313 = cast(%var_11249, dtype="float32") /* ty=Tensor[(132), float32] */;
  %1314 = reshape(%1313, newshape=[12, 11, 1]) /* ty=Tensor[(12, 11, 1), float32] */;
  %1315 = @func_10855() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1316 = add(%1304, %1305) /* ty=Tensor[(4, 10, 3), int64] */;
  %1317 = %1306.1;
  %1318 = @func_5995() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1319 = bitwise_xor(%1309, %1310) /* ty=Tensor[(4, 10, 3), int32] */;
  %1320 = %1311.0;
  %1321 = %1312.0;
  %1322 = @func_3284(%1314) /* ty=Tensor[(12, 11, 7), float32] */;
  %1323 = %1315.0;
  (%1316, %1317, %1318, %1319, %1320, %1321, %1322, %var_11249, %1323)
}

def @func_12417() -> (Tensor[(4, ?, 3), uint32],) {
  %1326 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %1324 = @func_6254() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1325 = %1324.0;
    (%1325,)
  };
  %1326() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_4844() -> Tensor[(4, ?, 3), uint32] {
  %1327 = @func_4277() /* ty=(Tensor[(4, 13, 16), uint64], Tensor[(4, ?, 3), uint32]) */;
  %1327.1
}

def @func_6828(%var_6826: Tensor[(832), uint64]) -> (Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(832), uint64]) {
  @func_6825(%var_6826) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(14, 11, 10), float64], Tensor[(832), uint64]) */
}

def @func_3267() -> Tensor[(4, ?, 3), uint32] {
  %1328 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1328.0
}

def @func_3448(%var_3445: Tensor[(8, 15, 5), uint64], %var_3446: Tensor[(8, 15, 5), uint64], %var_3447: Tensor[(832), uint64]) -> (Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), float64], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool]) {
  %1346 = fn (%var_3376: Tensor[(8, 15, 5), uint64], %var_3377: Tensor[(8, 15, 5), uint64], %var_3416: Tensor[(832), uint64]) -> (Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), float64], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool]) {
    %1329 = cast(%var_3377, dtype="uint64") /* ty=Tensor[(8, 15, 5), uint64] */;
    %1330 = shape_of(%var_3376, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1331 = cast(%var_3376, dtype="uint64") /* ty=Tensor[(8, 15, 5), uint64] */;
    %1332 = dyn.reshape(%1329, %1330, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1333 = cast(%var_3377, dtype="float64") /* ty=Tensor[(8, 15, 5), float64] */;
    %1334 = cast(%var_3416, dtype="uint64") /* ty=Tensor[(832), uint64] */;
    %1335 = reshape(%1334, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
    %1336 = @func_33(%1335) /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %1337 = cast(meta[relay.Constant][75] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
    %1338 = cast(meta[relay.Constant][76] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
    %1339 = reshape(%1337, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
    %1340 = reshape(%1338, newshape=[520]) /* ty=Tensor[(520), bool] */;
    %1341 = @func_2941(%1339, %1340) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 11, 15), float64], Tensor[(660), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64]) */;
    %1342 = add(%1331, %1332) /* ty=Tensor[(8, 15, 5), uint64] */;
    %1343 = atan(%1333) /* ty=Tensor[(8, 15, 5), float64] */;
    %1344 = %1336.0;
    %1345 = %1341.0;
    (%1342, %1343, %1344, %var_3416, %1345, meta[relay.Constant][75] /* ty=Tensor[(1008), uint64] */, meta[relay.Constant][76] /* ty=Tensor[(520), bool] */)
  };
  %1346(%var_3445, %var_3446, %var_3447) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), float64], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool]) */
}

def @func_5672() -> (Tensor[(4, ?, 3), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) {
  @func_5670() /* ty=(Tensor[(4, ?, 3), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */
}

def @func_6523() -> Tensor[(4, ?, 3), float64] {
  @func_6521() /* ty=Tensor[(4, ?, 3), float64] */
}

def @func_10776() -> Tensor[(4, ?, 3), uint32] {
  @func_5095() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_7643() -> (Tensor[(4, ?, 3), uint32],) {
  @func_7641() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_2821(%var_2814: Tensor[(4, 8, 3), uint32]) -> (Tensor[(4, 8, 3), bool],) {
  %1347 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1348 = %1347.0;
  %1349 = cast(%1348, dtype="bool") /* ty=Tensor[(4, ?, 3), bool] */;
  %1350 = cast(%var_2814, dtype="bool") /* ty=Tensor[(4, 8, 3), bool] */;
  %1351 = greater_equal(%1349, %1350) /* ty=Tensor[(4, 8, 3), bool] */;
  (%1351,)
}

def @func_3075() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) {
  @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */
}

def @func_5421(%var_5419: uint16, %var_5420: Tensor[(2, 1, 6), uint16]) -> (Tensor[(2, 1, 6), uint16],) {
  @func_5417(%var_5419, %var_5420) /* ty=(Tensor[(2, 1, 6), uint16],) */
}

def @func_5508(%var_5488: Tensor[(4, 12, 12), float64], %var_5501: Tensor[(416, 2), uint64]) -> (Tensor[(4, 12, 12), float64], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64]) {
  %1352 = cast(%var_5488, dtype="float64") /* ty=Tensor[(4, 12, 12), float64] */;
  %1353 = cast(meta[relay.Constant][77] /* ty=Tensor[(1540), float64] */, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %1354 = reshape(%1353, newshape=[14, 11, 10]) /* ty=Tensor[(14, 11, 10), float64] */;
  %1355 = @func_2441(%1354) /* ty=(Tensor[(14, 11, 10), float64],) */;
  %1356 = cast(%var_5501, dtype="uint64") /* ty=Tensor[(416, 2), uint64] */;
  %1357 = reshape(%1356, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %1358 = @func_33(%1357) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %1359 = acos(%1352) /* ty=Tensor[(4, 12, 12), float64] */;
  %1360 = %1355.0;
  %1361 = %1358.0;
  (%1359, %1360, meta[relay.Constant][77] /* ty=Tensor[(1540), float64] */, %1361, %var_5501)
}

def @func_13217(%var_13215: Tensor[(108), uint32]) -> (Tensor[(1008), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(108), uint32]) {
  @func_13214(%var_13215) /* ty=(Tensor[(1008), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(108), uint32]) */
}

def @func_11603(%var_11563: Tensor[(520, 2), float64]) -> (Tensor[(520, 2), bool], Tensor[(520, 2), bool], Tensor[(520, 2), float32]) {
  %1362 = @func_4920() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(520, 2), float64]) */;
  %1363 = %1362.2;
  %1364 = cast(%var_11563, dtype="bool") /* ty=Tensor[(520, 2), bool] */;
  %1365 = shape_of(%1363, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1366 = cast(%1363, dtype="bool") /* ty=Tensor[(520, 2), bool] */;
  %1367 = dyn.reshape(%1364, %1365, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1368 = cast(%1363, dtype="bool") /* ty=Tensor[(520, 2), bool] */;
  %1369 = shape_of(%var_11563, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1370 = cast(%var_11563, dtype="bool") /* ty=Tensor[(520, 2), bool] */;
  %1371 = dyn.reshape(%1368, %1369, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1372 = cast(%1363, dtype="float32") /* ty=Tensor[(520, 2), float32] */;
  %1373 = not_equal(%1366, %1367) /* ty=Tensor[(520, 2), bool] */;
  %1374 = logical_or(%1370, %1371) /* ty=Tensor[(520, 2), bool] */;
  %1375 = atanh(%1372) /* ty=Tensor[(520, 2), float32] */;
  (%1373, %1374, %1375)
}

def @func_1020(%var_978: Tensor[(4, 11, 15), float32], %var_979: Tensor[(4, 11, 15), float32], %var_1000: Tensor[(1008), uint64], %var_1001: Tensor[(520), bool], %var_1002: Tensor[(832), uint64]) -> (Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) {
  %1376 = cast(%var_979, dtype="float64") /* ty=Tensor[(4, 11, 15), float64] */;
  %1377 = shape_of(%var_978, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1378 = cast(%var_978, dtype="float64") /* ty=Tensor[(4, 11, 15), float64] */;
  %1379 = dyn.reshape(%1376, %1377, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1380 = cast(%var_1000, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %1381 = cast(%var_1000, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %1382 = cast(%var_1001, dtype="bool") /* ty=Tensor[(520), bool] */;
  %1383 = cast(%var_1002, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %1384 = reshape(%1380, newshape=[8, 9, 14]) /* ty=Tensor[(8, 9, 14), uint64] */;
  %1385 = reshape(%1381, newshape=[8, 9, 14]) /* ty=Tensor[(8, 9, 14), uint64] */;
  %1386 = reshape(%1382, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %1387 = reshape(%1383, newshape=[832]) /* ty=Tensor[(832), uint64] */;
  %1388 = @func_402(%1384, %1385, %1386, %1387) /* ty=(Tensor[(8, 9, 14), uint64], Tensor[(4, 13, 10), bool], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 16), uint64], Tensor[(4, 13, 10), bool]) */;
  %1389 = cast(%var_979, dtype="float32") /* ty=Tensor[(4, 11, 15), float32] */;
  %1390 = shape_of(%var_978, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1391 = cast(%var_978, dtype="float32") /* ty=Tensor[(4, 11, 15), float32] */;
  %1392 = dyn.reshape(%1389, %1390, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1393 = divide(%1391, %1392) /* ty=Tensor[(4, 11, 15), float32] */;
  %1394 = cast(%1393, dtype="int64") /* ty=Tensor[(4, 11, 15), int64] */;
  %1395 = shape_of(%var_978, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1396 = cast(%var_978, dtype="int64") /* ty=Tensor[(4, 11, 15), int64] */;
  %1397 = dyn.reshape(%1394, %1395, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1398 = %1388.1;
  %1399 = cast(%1398, dtype="bool") /* ty=Tensor[(4, 13, 10), bool] */;
  %1400 = cast(%var_1002, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %1401 = reshape(%1399, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %1402 = reshape(%1400, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %1403 = @func_215(%1401, %1402) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %1404 = %1403.2;
  %1405 = cast(%1404, dtype="uint64") /* ty=Tensor[(1, 832), uint64] */;
  %1406 = reshape(%1405, newshape=[4, 13, 16]) /* ty=Tensor[(4, 13, 16), uint64] */;
  %1407 = @func_33(%1406) /* ty=(Tensor[(4, 13, 16), uint64],) */;
  %1408 = mod(%1378, %1379) /* ty=Tensor[(4, 11, 15), float64] */;
  %1409 = bitwise_xor(%1396, %1397) /* ty=Tensor[(4, 11, 15), int64] */;
  %1410 = %1407.0;
  (%1408, %1398, %var_1000, %var_1001, %var_1002, %1409, %1404, %1410)
}

def @func_13156() -> Tensor[(4, ?, 3), uint32] {
  %1411 = @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1411.0
}

def @func_6987() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64]) {
  @func_6985() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(832), uint64]) */
}

def @func_4332() -> Tensor[(1040), float64] {
  %1412 = @func_3073() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(1040), float64]) */;
  %1412.2
}

def @func_13514() -> (Tensor[(416, 2), float32],) {
  %1413 = @func_7897() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(416, 2), uint64], Tensor[(14, 11, 10), float64]) */;
  %1414 = %1413.1;
  %1415 = cast(%1414, dtype="float32") /* ty=Tensor[(416, 2), float32] */;
  %1416 = asinh(%1415) /* ty=Tensor[(416, 2), float32] */;
  (%1416,)
}

def @func_4993() -> Tensor[(4, ?, 3), uint32] {
  @func_4991() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_6862() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) {
  @func_6860() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */
}

def @func_1027(%var_1022: Tensor[(4, 11, 15), float32], %var_1023: Tensor[(4, 11, 15), float32], %var_1024: Tensor[(1008), uint64], %var_1025: Tensor[(520), bool], %var_1026: Tensor[(832), uint64]) -> (Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) {
  @func_1020(%var_1022, %var_1023, %var_1024, %var_1025, %var_1026) /* ty=(Tensor[(4, 11, 15), float64], Tensor[(4, 13, 10), bool], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, 11, 15), int64], Tensor[(1, 832), float64], Tensor[(4, 13, 16), uint64]) */
}

def @func_7641() -> (Tensor[(4, ?, 3), uint32],) {
  %1417 = @func_4920() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(520, 2), float64]) */;
  %1418 = %1417.0;
  (%1418,)
}

def @func_5167(%var_5165: Tensor[(1040), float64], %var_5166: Tensor[(660), float32]) -> (Tensor[(1040), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32]) {
  %1431 = fn (%var_5132: Tensor[(1040), float64], %var_5150: Tensor[(660), float32]) -> (Tensor[(1040), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32]) {
    %1419 = @func_4332() /* ty=Tensor[(1040), float64] */;
    %1420 = cast(%var_5132, dtype="bool") /* ty=Tensor[(1040), bool] */;
    %1421 = shape_of(%1419, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1422 = cast(%1419, dtype="bool") /* ty=Tensor[(1040), bool] */;
    %1423 = dyn.reshape(%1420, %1421, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1424 = @func_3879() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1425 = cast(%var_5150, dtype="float32") /* ty=Tensor[(660), float32] */;
    %1426 = reshape(%1425, newshape=[110, 6]) /* ty=Tensor[(110, 6), float32] */;
    %1427 = @func_3999(%1426) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64], Tensor[(110, 6), float32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(832), uint64], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */;
    %1428 = greater(%1422, %1423) /* ty=Tensor[(1040), bool] */;
    %1429 = %1424.0;
    %1430 = %1427.5;
    (%1428, %1429, %1430, %var_5150)
  };
  %1431(%var_5165, %var_5166) /* ty=(Tensor[(1040), bool], Tensor[(4, ?, 3), uint32], Tensor[(832), uint64], Tensor[(660), float32]) */
}

def @func_5723() -> (Tensor[(4, ?, 3), uint32],) {
  @func_5721() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_2715() -> (Tensor[(4, ?, 3), uint32],) {
  @func_2713() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_11088() -> (Tensor[(4, ?, 3), uint32],) {
  @func_11086() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_9091() -> (Tensor[(4, ?, 3), uint32],) {
  %1432 = @func_7196() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1433 = %1432.0;
  (%1433,)
}

def @func_10459() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(4, ?, 3), uint32]) {
  @func_10457() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(4, ?, 3), uint32]) */
}

def @func_10998() -> Tensor[(4, ?, 3), float64] {
  %1434 = fn () -> Tensor[(4, ?, 3), float64] {
    @func_6521() /* ty=Tensor[(4, ?, 3), float64] */
  };
  %1434() /* ty=Tensor[(4, ?, 3), float64] */
}

def @func_7197() -> (Tensor[(4, ?, 3), uint32],) {
  %1437 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %1435 = @func_6927() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1436 = %1435.0;
    (%1436,)
  };
  %1437() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_3570(%var_3569: Tensor[(4, 1, 3), uint32]) -> (Tensor[(4, ?, 3), uint16],) {
  %1449 = fn (%var_3525: Tensor[(4, 1, 3), uint32]) -> (Tensor[(4, ?, 3), uint16],) {
    %1438 = @func_3267() /* ty=Tensor[(4, ?, 3), uint32] */;
    %1439 = cast(%var_3525, dtype="int64") /* ty=Tensor[(4, 1, 3), int64] */;
    %1440 = shape_of(%1438, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1441 = cast(%1438, dtype="int64") /* ty=Tensor[(4, ?, 3), int64] */;
    %1442 = dyn.reshape(%1439, %1440, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1443 = right_shift(%1441, %1442) /* ty=Tensor[(4, ?, 3), int64] */;
    %1444 = cast(%1438, dtype="uint16") /* ty=Tensor[(4, ?, 3), uint16] */;
    %1445 = shape_of(%1443, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1446 = cast(%1443, dtype="uint16") /* ty=Tensor[(4, ?, 3), uint16] */;
    %1447 = dyn.reshape(%1444, %1445, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1448 = logical_xor(%1446, %1447) /* ty=Tensor[(4, ?, 3), uint16] */;
    (%1448,)
  };
  %1449(%var_3569) /* ty=(Tensor[(4, ?, 3), uint16],) */
}

def @func_12492(%var_12491: Tensor[(4, 11, 3), uint32]) -> Tensor[(4, 11, 3), int32] {
  %1453 = fn (%var_12475: Tensor[(4, 11, 3), uint32]) -> Tensor[(4, 11, 3), int32] {
    %1450 = @func_11692() /* ty=Tensor[(4, ?, 3), uint32] */;
    %1451 = cast(%1450, dtype="int32") /* ty=Tensor[(4, ?, 3), int32] */;
    %1452 = cast(%var_12475, dtype="int32") /* ty=Tensor[(4, 11, 3), int32] */;
    right_shift(%1451, %1452) /* ty=Tensor[(4, 11, 3), int32] */
  };
  %1453(%var_12491) /* ty=Tensor[(4, 11, 3), int32] */
}

def @func_10807(%var_10795: Tensor[(1008), uint64], %var_10796: Tensor[(520), bool]) -> (Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, 13, 10), bool], Tensor[(832), uint64]) {
  %1454 = @func_10636() /* ty=(Tensor[(4, ?, 3), float32],) */;
  %1455 = cast(%var_10795, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %1456 = cast(%var_10796, dtype="bool") /* ty=Tensor[(520), bool] */;
  %1457 = reshape(%1455, newshape=[1008, 1]) /* ty=Tensor[(1008, 1), uint64] */;
  %1458 = reshape(%1456, newshape=[1, 520]) /* ty=Tensor[(1, 520), bool] */;
  %1459 = @func_8133(%1457, %1458) /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(520), bool], Tensor[(1008, 1), uint64], Tensor[(1, 520), bool]) */;
  %1460 = cast(meta[relay.Constant][78] /* ty=Tensor[(143), int8] */, dtype="int8") /* ty=Tensor[(143), int8] */;
  %1461 = cast(meta[relay.Constant][79] /* ty=Tensor[(2288), int8] */, dtype="int8") /* ty=Tensor[(2288), int8] */;
  %1462 = reshape(%1460, newshape=[13, 1, 11]) /* ty=Tensor[(13, 1, 11), int8] */;
  %1463 = reshape(%1461, newshape=[13, 16, 11]) /* ty=Tensor[(13, 16, 11), int8] */;
  %1464 = @func_10266(%1462, %1463) /* ty=(Tensor[(13, 16, 11), int8], Tensor[(1040), float64], Tensor[(13, 16, 11), uint16], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
  %1465 = cast(%var_10796, dtype="bool") /* ty=Tensor[(520), bool] */;
  %1466 = cast(meta[relay.Constant][80] /* ty=Tensor[(832), uint64] */, dtype="uint64") /* ty=Tensor[(832), uint64] */;
  %1467 = reshape(%1465, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), bool] */;
  %1468 = reshape(%1466, newshape=[1, 832]) /* ty=Tensor[(1, 832), uint64] */;
  %1469 = @func_215(%1467, %1468) /* ty=(Tensor[(4, 13, 10), bool], Tensor[(4, 13, 16), uint64], Tensor[(1, 832), float64]) */;
  %1470 = %1454.0;
  %1471 = %1459.1;
  %1472 = %1464.4;
  %1473 = %1469.0;
  (%1470, %1471, %var_10795, %var_10796, %1472, meta[relay.Constant][78] /* ty=Tensor[(143), int8] */, meta[relay.Constant][79] /* ty=Tensor[(2288), int8] */, %1473, meta[relay.Constant][80] /* ty=Tensor[(832), uint64] */)
}

def @func_6144() -> Tensor[(4, ?, 3), uint32] {
  %1474 = fn () -> Tensor[(4, ?, 3), uint32] {
    @func_2900() /* ty=Tensor[(4, ?, 3), uint32] */
  };
  %1474() /* ty=Tensor[(4, ?, 3), uint32] */
}

def @func_9486() -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
  %1481 = fn () -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) {
    %1475 = @func_6908() /* ty=(Tensor[(4, ?, 3), uint32],) */;
    %1476 = @func_8838() /* ty=(Tensor[(600), uint64], Tensor[(4, ?, 3), uint32]) */;
    %1477 = @func_7560() /* ty=(Tensor[(4, 13, 16), uint64],) */;
    %1478 = %1475.0;
    %1479 = %1476.1;
    %1480 = %1477.0;
    (%1478, %1479, %1480)
  };
  %1481() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, 13, 16), uint64]) */
}

def @func_12032(%var_12024: Tensor[(5, 104), bool]) -> (Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32], Tensor[(143), int8], Tensor[(504, 2), uint64], Tensor[(5, 104), bool]) {
  %1482 = @func_9346() /* ty=(Tensor[(4, ?, 3), uint32],) */;
  %1483 = @func_5033() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */;
  %1484 = cast(meta[relay.Constant][81] /* ty=Tensor[(504, 2), uint64] */, dtype="uint64") /* ty=Tensor[(504, 2), uint64] */;
  %1485 = cast(%var_12024, dtype="bool") /* ty=Tensor[(5, 104), bool] */;
  %1486 = reshape(%1484, newshape=[1008]) /* ty=Tensor[(1008), uint64] */;
  %1487 = reshape(%1485, newshape=[520]) /* ty=Tensor[(520), bool] */;
  %1488 = @func_10807(%1486, %1487) /* ty=(Tensor[(4, ?, 3), float32], Tensor[(4, ?, 3), uint32], Tensor[(1008), uint64], Tensor[(520), bool], Tensor[(4, ?, 3), uint32], Tensor[(143), int8], Tensor[(2288), int8], Tensor[(4, 13, 10), bool], Tensor[(832), uint64]) */;
  %1489 = %1482.0;
  %1490 = @func_4406() /* ty=Tensor[(4, ?, 3), uint32] */;
  %1491 = %1483.3;
  %1492 = %1488.5;
  (%1489, %1490, %1491, %1492, meta[relay.Constant][81] /* ty=Tensor[(504, 2), uint64] */, %var_12024)
}

def @func_5512(%var_5510: Tensor[(4, 12, 12), float64], %var_5511: Tensor[(416, 2), uint64]) -> (Tensor[(4, 12, 12), float64], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64]) {
  @func_5508(%var_5510, %var_5511) /* ty=(Tensor[(4, 12, 12), float64], Tensor[(14, 11, 10), float64], Tensor[(1540), float64], Tensor[(4, 13, 16), uint64], Tensor[(416, 2), uint64]) */
}

def @func_9347() -> (Tensor[(4, ?, 3), uint32],) {
  %1495 = fn () -> (Tensor[(4, ?, 3), uint32],) {
    %1493 = @func_6860() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(4, ?, 3), uint32]) */;
    %1494 = %1493.1;
    (%1494,)
  };
  %1495() /* ty=(Tensor[(4, ?, 3), uint32],) */
}

def @func_5035() -> (Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) {
  @func_5033() /* ty=(Tensor[(4, ?, 3), uint32], Tensor[(660), float32], Tensor[(1040), float64], Tensor[(4, ?, 3), uint32]) */
}

def @func_12784() -> Tensor[(1040), float64] {
  @func_12782() /* ty=Tensor[(1040), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen701/build/output.py", line 4359, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:55:11] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

