import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_75 = relay.const([[[-1.092116,-1.814585],[-0.681383,4.513262],[0.077477,6.919449],[-5.208305,-9.744798],[-7.937201,9.104969],[-4.132181,9.412002],[-4.596999,-5.063590],[-3.415179,-6.139166],[0.100704,9.922941],[7.900495,3.090545]],[[8.131371,4.398238],[-6.204125,-4.668500],[8.154528,3.906535],[2.629778,7.417928],[-4.501958,-6.140524],[-5.075372,1.884426],[8.060252,8.904010],[3.180443,-7.044060],[-3.153726,-1.745874],[2.746312,1.076868]],[[-1.717779,-7.040743],[1.092318,6.078625],[5.321044,-1.023339],[-3.347405,3.949427],[-2.279498,-9.949179],[3.671647,-9.299002],[9.980365,1.526924],[4.437347,7.657345],[4.547183,-1.618318],[-8.619023,-2.614060]]], dtype = "float64")#candidate|75|(3, 10, 2)|const|float64
var_76 = relay.var("var_76", dtype = "float64", shape = (3, 10, 2))#candidate|76|(3, 10, 2)|var|float64
bop_77 = relay.divide(const_75.astype('float64'), relay.reshape(var_76.astype('float64'), relay.shape_of(const_75))) # shape=(3, 10, 2)
output = relay.Tuple([bop_77,])
output2 = relay.Tuple([bop_77,])
func_84 = relay.Function([var_76,], output)
mod['func_84'] = func_84
mod = relay.transform.InferType()(mod)
mutated_mod['func_84'] = func_84
mutated_mod = relay.transform.InferType()(mutated_mod)
var_85 = relay.var("var_85", dtype = "float64", shape = (3, 10, 2))#candidate|85|(3, 10, 2)|var|float64
func_84_call = mutated_mod.get_global_var('func_84')
call_86 = func_84_call(var_85)
output = call_86
func_87 = relay.Function([var_85], output)
mutated_mod['func_87'] = func_87
mutated_mod = relay.transform.InferType()(mutated_mod)
const_417 = relay.const([[[-5.599208,7.408546,9.330246,-8.373880]],[[9.398745,-4.999717,9.086883,0.040731]],[[6.035811,-8.447878,4.398945,1.922515]],[[5.028111,-0.547469,0.137497,9.372110]],[[-3.258841,6.941379,-4.353868,-9.239520]],[[-7.673352,5.854889,-6.696198,1.453164]],[[-5.546972,6.208104,-2.999363,0.798841]],[[8.253009,7.374120,2.215467,-8.682486]],[[1.547396,2.962095,7.403868,0.853948]],[[8.485632,3.247826,0.021247,6.129871]],[[1.136127,5.159367,9.954198,0.799315]],[[0.916625,0.127125,-0.393710,-5.604535]],[[0.043134,8.947885,-2.469742,-2.235208]]], dtype = "float64")#candidate|417|(13, 1, 4)|const|float64
var_418 = relay.var("var_418", dtype = "float64", shape = (13, 5, 4))#candidate|418|(13, 5, 4)|var|float64
bop_419 = relay.not_equal(const_417.astype('bool'), var_418.astype('bool')) # shape=(13, 5, 4)
uop_426 = relay.asin(const_417.astype('float32')) # shape=(13, 1, 4)
output = relay.Tuple([bop_419,uop_426,])
output2 = relay.Tuple([bop_419,uop_426,])
func_443 = relay.Function([var_418,], output)
mod['func_443'] = func_443
mod = relay.transform.InferType()(mod)
var_444 = relay.var("var_444", dtype = "float64", shape = (13, 5, 4))#candidate|444|(13, 5, 4)|var|float64
output = func_443(var_444)
func_445 = relay.Function([var_444], output)
mutated_mod['func_445'] = func_445
mutated_mod = relay.transform.InferType()(mutated_mod)
var_656 = relay.var("var_656", dtype = "float32", shape = (1, 8, 8))#candidate|656|(1, 8, 8)|var|float32
uop_657 = relay.tan(var_656.astype('float32')) # shape=(1, 8, 8)
output = relay.Tuple([uop_657,])
output2 = relay.Tuple([uop_657,])
func_661 = relay.Function([var_656,], output)
mod['func_661'] = func_661
mod = relay.transform.InferType()(mod)
var_662 = relay.var("var_662", dtype = "float32", shape = (1, 8, 8))#candidate|662|(1, 8, 8)|var|float32
output = func_661(var_662)
func_663 = relay.Function([var_662], output)
mutated_mod['func_663'] = func_663
mutated_mod = relay.transform.InferType()(mutated_mod)
var_766 = relay.var("var_766", dtype = "bool", shape = (14, 13, 15))#candidate|766|(14, 13, 15)|var|bool
var_767 = relay.var("var_767", dtype = "bool", shape = (14, 13, 15))#candidate|767|(14, 13, 15)|var|bool
bop_768 = relay.logical_and(var_766.astype('bool'), relay.reshape(var_767.astype('bool'), relay.shape_of(var_766))) # shape=(14, 13, 15)
bop_772 = relay.logical_xor(bop_768.astype('int32'), relay.reshape(var_766.astype('int32'), relay.shape_of(bop_768))) # shape=(14, 13, 15)
uop_775 = relay.exp(bop_768.astype('float64')) # shape=(14, 13, 15)
func_84_call = mod.get_global_var('func_84')
func_87_call = mutated_mod.get_global_var('func_87')
var_780 = relay.var("var_780", dtype = "float64", shape = (60,))#candidate|780|(60,)|var|float64
call_779 = relay.TupleGetItem(func_84_call(relay.reshape(var_780.astype('float64'), [3, 10, 2])), 0)
call_781 = relay.TupleGetItem(func_87_call(relay.reshape(var_780.astype('float64'), [3, 10, 2])), 0)
output = relay.Tuple([bop_772,uop_775,call_779,var_780,])
output2 = relay.Tuple([bop_772,uop_775,call_781,var_780,])
func_790 = relay.Function([var_766,var_767,var_780,], output)
mod['func_790'] = func_790
mod = relay.transform.InferType()(mod)
var_791 = relay.var("var_791", dtype = "bool", shape = (14, 13, 15))#candidate|791|(14, 13, 15)|var|bool
var_792 = relay.var("var_792", dtype = "bool", shape = (14, 13, 15))#candidate|792|(14, 13, 15)|var|bool
var_793 = relay.var("var_793", dtype = "float64", shape = (60,))#candidate|793|(60,)|var|float64
output = func_790(var_791,var_792,var_793,)
func_794 = relay.Function([var_791,var_792,var_793,], output)
mutated_mod['func_794'] = func_794
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1064 = relay.var("var_1064", dtype = "float32", shape = (7, 6, 6))#candidate|1064|(7, 6, 6)|var|float32
uop_1065 = relay.atan(var_1064.astype('float32')) # shape=(7, 6, 6)
func_790_call = mod.get_global_var('func_790')
func_794_call = mutated_mod.get_global_var('func_794')
var_1082 = relay.var("var_1082", dtype = "bool", shape = (2730,))#candidate|1082|(2730,)|var|bool
var_1083 = relay.var("var_1083", dtype = "float64", shape = (60,))#candidate|1083|(60,)|var|float64
call_1081 = relay.TupleGetItem(func_790_call(relay.reshape(var_1082.astype('bool'), [14, 13, 15]), relay.reshape(var_1082.astype('bool'), [14, 13, 15]), relay.reshape(var_1083.astype('float64'), [60,]), ), 1)
call_1084 = relay.TupleGetItem(func_794_call(relay.reshape(var_1082.astype('bool'), [14, 13, 15]), relay.reshape(var_1082.astype('bool'), [14, 13, 15]), relay.reshape(var_1083.astype('float64'), [60,]), ), 1)
uop_1088 = relay.sqrt(uop_1065.astype('float32')) # shape=(7, 6, 6)
output = relay.Tuple([call_1081,var_1082,var_1083,uop_1088,])
output2 = relay.Tuple([call_1084,var_1082,var_1083,uop_1088,])
func_1095 = relay.Function([var_1064,var_1082,var_1083,], output)
mod['func_1095'] = func_1095
mod = relay.transform.InferType()(mod)
mutated_mod['func_1095'] = func_1095
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1095_call = mutated_mod.get_global_var('func_1095')
var_1097 = relay.var("var_1097", dtype = "float32", shape = (7, 6, 6))#candidate|1097|(7, 6, 6)|var|float32
var_1098 = relay.var("var_1098", dtype = "bool", shape = (2730,))#candidate|1098|(2730,)|var|bool
var_1099 = relay.var("var_1099", dtype = "float64", shape = (60,))#candidate|1099|(60,)|var|float64
call_1096 = func_1095_call(var_1097,var_1098,var_1099,)
output = call_1096
func_1100 = relay.Function([var_1097,var_1098,var_1099,], output)
mutated_mod['func_1100'] = func_1100
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1147 = relay.var("var_1147", dtype = "uint16", shape = (16, 12, 9))#candidate|1147|(16, 12, 9)|var|uint16
var_1148 = relay.var("var_1148", dtype = "uint16", shape = (16, 12, 9))#candidate|1148|(16, 12, 9)|var|uint16
bop_1149 = relay.left_shift(var_1147.astype('uint16'), relay.reshape(var_1148.astype('uint16'), relay.shape_of(var_1147))) # shape=(16, 12, 9)
uop_1163 = relay.erf(bop_1149.astype('float64')) # shape=(16, 12, 9)
func_84_call = mod.get_global_var('func_84')
func_87_call = mutated_mod.get_global_var('func_87')
const_1167 = relay.const([0.994172,7.150077,6.373659,-5.323671,-2.631745,-4.578895,-0.434267,1.400527,9.180220,-1.991069,-0.837888,8.836136,0.005803,1.108210,-2.365748,-5.740225,3.495174,-1.348775,2.705202,9.192001,6.206895,5.234396,-3.121683,-5.645259,2.376562,-4.853742,3.519342,1.227397,0.761721,4.243764,0.846493,1.326807,-9.820521,9.998211,-2.760664,5.963693,-2.102235,3.943289,1.471530,-1.849720,-2.845372,4.014323,-8.070846,-0.831515,0.758602,7.020325,5.151976,9.606878,-4.488708,9.863656,-4.206633,-5.001103,3.887941,9.156654,9.589970,4.901939,-3.150058,-2.357256,-3.903880,-6.757755], dtype = "float64")#candidate|1167|(60,)|const|float64
call_1166 = relay.TupleGetItem(func_84_call(relay.reshape(const_1167.astype('float64'), [3, 10, 2])), 0)
call_1168 = relay.TupleGetItem(func_87_call(relay.reshape(const_1167.astype('float64'), [3, 10, 2])), 0)
output = relay.Tuple([uop_1163,call_1166,const_1167,])
output2 = relay.Tuple([uop_1163,call_1168,const_1167,])
func_1170 = relay.Function([var_1147,var_1148,], output)
mod['func_1170'] = func_1170
mod = relay.transform.InferType()(mod)
mutated_mod['func_1170'] = func_1170
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1170_call = mutated_mod.get_global_var('func_1170')
var_1172 = relay.var("var_1172", dtype = "uint16", shape = (16, 12, 9))#candidate|1172|(16, 12, 9)|var|uint16
var_1173 = relay.var("var_1173", dtype = "uint16", shape = (16, 12, 9))#candidate|1173|(16, 12, 9)|var|uint16
call_1171 = func_1170_call(var_1172,var_1173,)
output = call_1171
func_1174 = relay.Function([var_1172,var_1173,], output)
mutated_mod['func_1174'] = func_1174
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1419 = relay.var("var_1419", dtype = "float32", shape = (16, 7, 7))#candidate|1419|(16, 7, 7)|var|float32
uop_1420 = relay.log10(var_1419.astype('float32')) # shape=(16, 7, 7)
func_443_call = mod.get_global_var('func_443')
func_445_call = mutated_mod.get_global_var('func_445')
var_1430 = relay.var("var_1430", dtype = "float64", shape = (260,))#candidate|1430|(260,)|var|float64
call_1429 = relay.TupleGetItem(func_443_call(relay.reshape(var_1430.astype('float64'), [13, 5, 4])), 0)
call_1431 = relay.TupleGetItem(func_445_call(relay.reshape(var_1430.astype('float64'), [13, 5, 4])), 0)
func_661_call = mod.get_global_var('func_661')
func_663_call = mutated_mod.get_global_var('func_663')
var_1437 = relay.var("var_1437", dtype = "float32", shape = (64,))#candidate|1437|(64,)|var|float32
call_1436 = relay.TupleGetItem(func_661_call(relay.reshape(var_1437.astype('float32'), [1, 8, 8])), 0)
call_1438 = relay.TupleGetItem(func_663_call(relay.reshape(var_1437.astype('float32'), [1, 8, 8])), 0)
func_661_call = mod.get_global_var('func_661')
func_663_call = mutated_mod.get_global_var('func_663')
call_1449 = relay.TupleGetItem(func_661_call(relay.reshape(var_1437.astype('float32'), [1, 8, 8])), 0)
call_1450 = relay.TupleGetItem(func_663_call(relay.reshape(var_1437.astype('float32'), [1, 8, 8])), 0)
func_443_call = mod.get_global_var('func_443')
func_445_call = mutated_mod.get_global_var('func_445')
call_1460 = relay.TupleGetItem(func_443_call(relay.reshape(call_1429.astype('float64'), [13, 5, 4])), 0)
call_1461 = relay.TupleGetItem(func_445_call(relay.reshape(call_1429.astype('float64'), [13, 5, 4])), 0)
const_1464 = relay.const([[[4.049356,-4.173685,-5.268725,7.454621,1.059289,-5.719567,9.548755],[6.593688,5.390444,9.578637,-5.688629,-7.513909,-9.295237,-4.170152],[-6.076895,-9.700362,-4.874839,1.102194,-7.003010,-0.217906,-1.233705],[8.332050,-0.535210,6.717057,-0.158701,-7.098874,1.676316,-4.714094],[-7.318263,-2.618617,-6.492623,-5.691117,-8.764658,4.652388,-8.423917],[-1.393780,3.604469,5.667638,-6.476631,3.869746,4.818655,-2.693735],[-3.107226,-8.641896,4.497145,9.566822,-4.333137,-1.410995,9.721366]],[[7.325316,0.752092,-2.957154,-7.052359,-5.602322,-2.588907,0.925140],[-5.412545,6.528419,-3.421052,8.607152,-8.708655,8.659999,-0.113071],[1.833367,-3.285200,3.940237,5.674635,-7.503288,1.530084,-5.587327],[-4.707797,-9.883693,9.041583,4.902466,0.288178,4.002046,1.549477],[-7.803515,-2.902202,-3.106277,2.348353,-7.310494,0.211990,-1.115709],[-9.833093,8.784251,-4.688486,0.760969,5.321167,-6.979655,8.749071],[-2.558373,-1.403910,-1.886003,7.022120,2.226508,-6.498096,0.714348]],[[-7.795662,6.576971,-1.115199,8.386620,-3.481470,3.888939,6.368438],[-5.719405,5.192894,-8.296187,-9.261119,2.337622,6.733285,-1.489031],[-5.318812,1.551323,0.587822,8.742356,1.604893,-5.874211,4.685620],[5.418798,3.822187,6.470535,2.264290,6.101003,-8.058824,5.059470],[7.894350,-0.852671,2.762815,4.571884,-3.748759,-9.357928,2.118134],[4.227071,-4.817464,-3.251865,-6.268122,8.125158,1.508944,1.345695],[9.962440,0.059370,-5.466269,-7.125176,4.308789,-7.563155,4.405158]],[[-7.284733,-1.998957,2.176102,-0.566575,-3.920422,-0.345563,-8.076462],[-6.335885,5.292460,-4.650137,1.825219,-7.234753,-8.400668,0.616781],[4.246559,-9.093913,2.073075,7.327411,1.880691,-5.218374,7.068952],[6.652448,-2.747303,4.540378,5.555271,-7.094627,7.333035,1.712518],[1.998157,-5.209434,3.068352,-9.135054,2.464864,5.870916,8.651907],[6.762808,-4.200058,4.701090,-7.173091,0.573743,-9.968088,-3.941104],[-4.366958,-0.715605,-1.491411,7.214256,2.027118,0.551876,6.884432]],[[9.636278,-5.557609,6.160692,-0.652410,-2.841643,-1.510213,-4.139931],[5.360003,-9.927749,-5.409904,1.230511,5.139836,-6.353657,-0.500194],[-1.085011,9.459092,0.362783,-0.410089,-7.041350,8.583200,5.169335],[-2.621136,-0.747125,6.941216,-3.983867,3.829785,-1.823308,-3.249444],[1.029520,-3.324278,-3.112052,-8.360993,-1.942896,3.663335,6.863993],[9.740249,-8.335547,-9.021874,4.155134,1.216679,-3.839162,-4.692118],[6.254426,3.005265,7.377765,-3.123377,5.030281,8.332952,1.008146]],[[0.293730,3.812479,-5.965731,-8.942885,3.393788,-9.335871,3.021074],[2.435875,7.835741,-9.654406,-8.370139,2.408651,-5.094728,8.090587],[-1.868906,-5.152441,0.934447,-9.186491,9.761986,-1.893772,-2.333754],[1.798548,1.189958,1.634070,7.403868,-7.237866,-2.757103,7.206725],[-5.278181,-9.338394,0.563673,-8.839933,8.391840,-9.902097,-0.594887],[0.032306,2.512443,-1.094429,4.541901,-0.001357,-3.653860,-1.549360],[-2.544803,2.685997,-5.171338,7.969268,-9.560543,-4.855802,-3.386530]],[[-7.285210,-1.648215,9.967205,-5.652108,-5.209223,-8.601835,-7.970683],[9.518371,2.468883,-7.602186,0.172012,-3.821781,5.696547,-2.079494],[-5.795125,-2.800821,0.746845,-1.657597,8.820051,7.725765,6.073470],[-0.297124,-2.622104,-2.169194,6.304550,-5.102049,-2.498952,2.664900],[9.664859,3.372547,-6.018877,-3.924140,-5.334621,-9.885175,9.829737],[-1.197012,4.272603,-3.360261,-8.097193,8.614867,-8.995705,-6.290754],[4.674662,-2.610200,-8.027812,-8.769895,8.962487,-7.103736,-3.757007]],[[8.402726,-0.897488,-4.662545,-9.846146,7.880043,1.557715,-2.879276],[-4.781797,-5.446749,-5.080869,-9.173708,1.734900,4.856333,4.056507],[-2.065325,8.867410,4.839502,8.744240,7.835695,4.104741,2.943808],[-6.496316,-4.511702,-3.445079,-4.275854,5.662460,5.488022,3.931549],[2.729274,6.402025,-7.537254,-2.029064,-8.238697,8.431206,7.545380],[6.794040,-2.003710,6.874509,-6.586378,6.455216,-6.528633,-2.645298],[0.510204,6.692505,-9.718880,1.920717,7.711828,6.214915,6.896938]],[[5.744414,2.163588,4.636594,-4.844749,-9.570790,0.497608,0.332194],[-7.315087,1.597209,-5.862211,-1.708029,4.097008,3.487759,3.198038],[3.839779,-3.198208,-9.043296,7.315174,7.512194,-7.563115,-3.405889],[8.012021,9.722630,0.188269,-2.301556,0.884804,8.140485,-2.452705],[9.937736,8.473970,-5.255031,-8.763124,8.992402,4.372980,4.351360],[-5.605001,8.914258,-7.780567,9.448986,7.913568,8.482547,-6.735727],[-4.870989,3.737595,3.429474,-2.316753,-8.737948,-0.827134,-0.570723]],[[-6.438965,0.585310,4.377730,0.223666,6.781576,-3.140406,-5.219183],[-7.871368,-3.115287,0.032253,-3.472842,-3.699271,-6.126266,9.726743],[-3.832777,-7.990127,-0.123927,9.436140,-2.126678,4.564242,9.416276],[8.467250,0.785045,-6.288449,-1.104593,9.828928,-1.988373,8.089568],[0.091124,5.310149,-0.840063,-6.853892,5.615981,-0.614796,-1.485353],[-2.276383,2.089241,2.069162,5.422615,-0.301736,0.096637,-4.999005],[3.599319,8.268480,0.336676,-4.484687,-5.343677,-8.700305,-7.265871]],[[-9.154814,-9.899836,-9.662660,-8.541945,-6.729065,-0.492988,0.450132],[-6.144951,4.151103,9.430260,-0.961727,-5.379033,-1.302103,-0.692687],[-9.649891,0.767152,5.439481,0.887576,-1.449323,-6.423758,1.898248],[7.971642,-1.319901,1.811493,-7.888097,-2.774556,0.498294,1.392858],[-3.443727,-1.595515,5.996866,7.106646,4.720722,-3.527184,-3.658227],[-1.618562,8.456421,-8.506603,3.548702,-3.847354,-0.762913,3.800089],[0.643507,6.518323,-0.282999,-2.431336,6.494429,-4.249754,3.277002]],[[-9.375223,6.431332,5.167951,1.540206,4.967944,3.620599,-8.433704],[-3.849614,2.491607,-4.798871,5.793667,-2.481425,-1.491011,6.045983],[-2.328499,-0.538235,-7.432259,0.452998,-9.792832,9.476107,-7.254943],[0.465280,-7.810382,-1.954664,4.490181,-9.273143,2.670229,2.932903],[1.430635,-6.610383,6.298208,-7.534728,9.442639,4.832964,-6.147736],[1.647487,-6.624948,4.693595,-4.072839,-0.630441,8.269501,0.303488],[-7.936068,-4.252312,2.819546,1.235461,1.364093,1.524795,-7.216138]],[[5.797222,6.290266,3.097190,2.067183,9.444433,-8.527041,-2.060730],[-4.022138,-3.523883,-0.832753,-0.776718,2.515841,-8.991140,-1.042983],[4.163898,-2.344435,8.744977,4.660405,4.693729,-2.774342,3.544688],[0.900280,-8.416673,9.524761,-4.950726,1.463854,2.329334,-1.046558],[-2.772047,1.922948,6.798551,-5.626538,-3.736412,6.240354,-7.397868],[-6.319486,-1.956928,1.427128,1.126345,7.297945,-2.354159,9.073844],[-5.528587,4.942641,-4.455971,-2.797922,0.855818,-3.928477,7.262374]],[[8.759341,8.850593,7.841770,7.859595,-8.449867,8.889875,-3.501780],[3.980053,4.207559,-6.785262,-8.024689,-9.965899,-1.709263,1.761074],[4.295419,4.957792,-7.865536,-8.783038,-4.148480,6.709903,-7.487607],[7.915800,-4.013498,-7.816167,-3.824035,8.983832,7.713040,3.810122],[0.546351,3.673979,1.527224,3.840017,9.973605,7.183877,-1.979148],[4.289997,8.798982,4.821436,1.743304,-7.325854,-8.501377,-1.393027],[4.864781,-7.658545,-7.842933,3.876057,-6.868920,1.622661,-5.503774]],[[0.111943,2.224653,2.063315,2.595395,1.612480,9.865085,-1.316713],[7.299018,9.012961,3.619880,2.225069,6.994817,9.076879,9.046184],[-7.401489,-0.930894,-6.215212,-2.337357,-3.450671,7.399285,-9.690641],[1.424283,-1.256279,3.437230,6.422401,6.339023,-1.732234,5.360042],[-2.113601,-9.936127,-7.629433,7.600993,7.691774,8.012292,4.807526],[2.539653,1.403709,7.079522,1.924204,9.111136,0.301597,5.462712],[-3.530722,2.656757,8.243975,5.807046,-5.867258,0.038854,-7.327250]],[[-3.421973,6.152592,9.902225,-3.888947,-2.168435,1.615508,1.146274],[2.793213,-9.711973,5.860328,-3.912486,8.882076,9.480845,-3.400174],[5.643855,0.839264,7.484819,4.956292,9.747760,3.876794,5.771451],[2.633529,2.599687,7.060415,-8.358928,9.304694,-8.110734,-7.109645],[9.810937,-9.619417,7.003258,-0.261297,-0.078723,3.364184,8.726374],[4.845117,5.349298,0.769856,2.009097,-9.713553,-2.653254,5.766679],[2.426672,-0.836644,-6.317595,1.432799,-2.463072,-6.347654,-3.894817]]], dtype = "float32")#candidate|1464|(16, 7, 7)|const|float32
bop_1465 = relay.logical_and(uop_1420.astype('bool'), relay.reshape(const_1464.astype('bool'), relay.shape_of(uop_1420))) # shape=(16, 7, 7)
output = relay.Tuple([call_1429,var_1430,call_1436,var_1437,call_1449,call_1460,bop_1465,])
output2 = relay.Tuple([call_1431,var_1430,call_1438,var_1437,call_1450,call_1461,bop_1465,])
func_1473 = relay.Function([var_1419,var_1430,var_1437,], output)
mod['func_1473'] = func_1473
mod = relay.transform.InferType()(mod)
var_1474 = relay.var("var_1474", dtype = "float32", shape = (16, 7, 7))#candidate|1474|(16, 7, 7)|var|float32
var_1475 = relay.var("var_1475", dtype = "float64", shape = (260,))#candidate|1475|(260,)|var|float64
var_1476 = relay.var("var_1476", dtype = "float32", shape = (64,))#candidate|1476|(64,)|var|float32
output = func_1473(var_1474,var_1475,var_1476,)
func_1477 = relay.Function([var_1474,var_1475,var_1476,], output)
mutated_mod['func_1477'] = func_1477
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1548 = relay.var("var_1548", dtype = "float32", shape = (6, 7, 11))#candidate|1548|(6, 7, 11)|var|float32
var_1549 = relay.var("var_1549", dtype = "float32", shape = (6, 7, 11))#candidate|1549|(6, 7, 11)|var|float32
bop_1550 = relay.floor_mod(var_1548.astype('float32'), relay.reshape(var_1549.astype('float32'), relay.shape_of(var_1548))) # shape=(6, 7, 11)
func_84_call = mod.get_global_var('func_84')
func_87_call = mutated_mod.get_global_var('func_87')
const_1571 = relay.const([-0.876590,3.704070,-9.531710,6.278212,7.190778,-3.604766,3.583576,3.402382,7.330254,-7.219421,6.553068,-0.281717,-4.906819,0.841270,-3.350675,1.809728,-9.294870,1.773047,-8.727166,0.686036,-9.082095,7.612802,-6.512667,-0.819776,7.187317,2.717695,-1.346340,-2.157579,-9.432685,-3.514010,4.426921,0.119437,-0.607228,-5.950194,-8.001537,-5.881015,7.771199,-5.811226,-9.453516,4.268415,-5.682805,-2.514108,-9.665954,5.989319,4.991978,-6.465414,2.184403,-9.253686,-6.354104,5.288262,-2.480009,9.942113,8.203021,4.491505,-5.305766,1.088321,7.824962,-3.560556,-5.538367,-0.263216], dtype = "float64")#candidate|1571|(60,)|const|float64
call_1570 = relay.TupleGetItem(func_84_call(relay.reshape(const_1571.astype('float64'), [3, 10, 2])), 0)
call_1572 = relay.TupleGetItem(func_87_call(relay.reshape(const_1571.astype('float64'), [3, 10, 2])), 0)
output = relay.Tuple([bop_1550,call_1570,const_1571,])
output2 = relay.Tuple([bop_1550,call_1572,const_1571,])
func_1573 = relay.Function([var_1548,var_1549,], output)
mod['func_1573'] = func_1573
mod = relay.transform.InferType()(mod)
var_1574 = relay.var("var_1574", dtype = "float32", shape = (6, 7, 11))#candidate|1574|(6, 7, 11)|var|float32
var_1575 = relay.var("var_1575", dtype = "float32", shape = (6, 7, 11))#candidate|1575|(6, 7, 11)|var|float32
output = func_1573(var_1574,var_1575,)
func_1576 = relay.Function([var_1574,var_1575,], output)
mutated_mod['func_1576'] = func_1576
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1733 = relay.const([[[-4.765462,-2.809023,-9.558396,7.281534,8.906776,4.658355,9.930550],[2.788550,-0.055539,-3.366770,4.119098,0.349606,-6.156422,0.564480],[8.502038,-0.989785,4.495578,-5.943550,-9.327494,-9.156629,-7.480712],[-6.862733,5.267568,-3.012480,5.075155,-9.347701,-1.399604,9.094147],[5.334746,-4.569537,3.421443,9.104169,4.193121,-2.472497,9.741029],[5.745114,4.458623,-8.848974,1.410498,-5.304620,4.357057,4.737995],[-6.732902,-0.491396,8.383524,-1.080126,4.282987,7.740501,8.721087],[-2.597131,-7.098569,0.288331,3.291771,0.501209,-3.812225,-4.760368],[-5.002541,7.002737,-6.234280,-7.934493,-2.173599,-1.471673,-1.233558],[-5.672740,8.930130,1.336975,-4.856054,0.129713,-0.571788,8.911866],[-1.938588,-3.842125,4.117070,-7.304466,3.131243,-4.319447,0.969645],[8.437767,-4.858795,-9.366348,-7.393098,-6.154744,-5.639097,1.976804],[-8.220752,6.223757,-4.262533,0.688889,-3.396829,2.996100,-9.201357],[0.328226,-0.713967,-8.618032,6.079172,-2.781820,-5.132131,-4.634702],[0.856711,0.956073,-7.300970,-0.470809,-4.953468,2.960346,3.280972],[-7.533666,-2.805174,-0.984106,-8.447091,1.170394,8.567539,0.128744]],[[-4.592096,-2.813940,7.891438,3.813587,-1.694421,-3.008318,9.714915],[3.132954,-7.212818,6.823316,-0.175122,9.839674,-6.687741,-2.163468],[3.354288,4.813789,2.831647,3.967118,3.662592,8.464416,-6.235664],[-6.611426,5.994905,9.905550,8.377421,-6.895249,-0.520522,-2.085360],[-7.359532,-3.712783,-2.952966,-8.939943,9.871304,3.656190,-7.228305],[-0.225534,-8.024357,2.740084,1.796219,-3.779967,5.706191,-3.777214],[-8.924967,-9.310328,2.911530,-8.307221,-4.045337,0.041364,-9.153474],[-9.186325,8.294313,-6.034826,7.076082,1.143015,-9.754813,0.710224],[-6.112443,5.450329,-8.212261,-8.962476,-5.366826,1.797156,2.808038],[-3.118776,6.324733,-2.458334,5.932883,1.179706,-0.293779,4.380205],[-2.956388,-3.346397,-0.985457,9.648837,9.245058,-2.153570,1.887790],[-4.489549,4.648307,-6.032715,9.283083,3.115275,7.655044,3.450042],[-8.857074,-9.769692,7.126484,7.542549,-6.543587,-0.926041,-8.843726],[4.221354,3.726923,-7.221616,-4.969180,7.639700,-2.120930,0.978948],[3.678089,7.118430,7.586376,-3.488463,5.560267,1.226103,9.713008],[1.859704,-3.042139,5.246758,3.740632,-8.188882,-4.292209,1.147897]],[[4.133621,9.504231,-3.826092,-6.350269,-5.781167,-4.234932,-4.657760],[-9.504819,-8.143419,-7.607131,-7.018842,-0.557284,0.928898,-9.092140],[-4.334057,-1.742048,-3.808085,0.147763,6.134369,-6.919781,-7.553295],[3.100138,-8.415777,-6.154645,0.167782,-5.302441,-1.369842,4.108367],[6.520213,-3.062107,-1.250993,0.576927,-5.731890,3.813947,-3.987577],[4.177501,-0.461742,-0.889458,-0.481941,6.195300,5.083457,-9.978799],[-7.849486,0.540634,8.446520,-5.038272,3.635781,-6.281874,-9.541789],[0.770240,7.860546,5.510973,0.823289,5.903417,3.332083,9.415120],[-9.515162,-4.563804,-0.787687,-8.617491,6.869662,1.138070,3.334336],[-6.174949,7.943139,-6.062431,8.075763,-7.720285,5.660804,-1.220444],[1.423084,8.545903,8.866386,-9.668908,-9.283966,7.219754,2.864936],[-4.702743,-2.007229,-5.257017,-7.097231,2.867719,6.080165,-6.217661],[6.307695,6.990289,-9.942213,-9.708873,-7.238081,4.863855,4.162574],[6.505024,3.441725,3.546353,-1.554306,4.684929,8.921444,-1.520824],[2.363159,5.039900,-4.716154,3.191500,-5.918858,-6.862629,-2.082274],[4.436993,1.532060,5.194245,-5.648442,-3.724775,-7.471729,4.275901]],[[-9.835062,-7.312017,-9.318748,-4.405221,-7.629496,7.841939,8.515952],[-1.085602,-6.948931,-0.040791,-0.316266,-0.831669,-9.379341,9.450127],[1.883528,-8.661382,7.882562,0.375364,8.832545,-6.277756,1.874820],[-9.085593,3.867137,-6.056341,-2.518860,9.814573,-3.988257,5.598135],[5.215749,-9.815817,0.862684,-2.198377,1.738618,-1.263864,-0.939545],[5.441104,-2.536614,-4.105348,-0.422844,1.221238,2.822491,4.618008],[6.250522,6.343801,5.173213,9.692222,-3.136287,6.372158,9.547574],[-2.775799,-2.062212,6.040502,3.250817,2.869215,-5.546642,-3.153083],[0.771331,-0.867990,-9.394916,8.350947,6.686143,-6.607280,1.829815],[6.060848,1.275070,-4.404942,0.192578,6.194755,3.529256,-9.695866],[9.038533,-2.231145,-8.103735,9.631843,-3.919589,5.720848,1.784686],[2.245007,9.558313,5.707522,0.259035,4.527101,0.821712,7.766098],[7.228208,6.014287,7.456124,6.104305,-6.907051,-0.626242,-8.175022],[-4.567124,-4.160098,-8.524921,-3.222056,-3.356485,8.164786,0.029772],[-6.106422,3.652406,-5.074446,7.107685,-9.046746,-7.786923,9.775092],[4.123984,-8.343534,-6.284003,-3.084815,-7.791628,-9.867477,-1.607060]],[[-9.366809,7.257652,-0.660000,-2.759722,6.100081,-9.201473,7.661340],[-6.218081,-0.784231,-2.619135,4.158433,8.199338,3.882005,-7.121533],[-1.536589,7.972036,-0.227444,-8.819858,9.201866,-9.563901,-3.557318],[7.564730,0.587402,-0.645768,3.319953,-7.735753,0.547619,-0.578684],[4.269220,9.066898,6.231900,9.330710,0.359723,6.612237,-1.857564],[1.077936,-9.047349,-6.512103,-2.942938,4.542832,3.018455,-6.782968],[2.372811,9.472103,7.360243,1.318937,2.560627,1.941374,-5.688633],[-0.454872,-8.624662,1.480420,-2.560392,-5.495491,-1.823843,-0.174572],[1.511624,8.549394,-5.602525,4.316596,1.847650,-7.800063,9.989392],[8.148050,-8.522152,9.552502,0.960705,-2.660837,-3.417612,-7.827279],[-0.701788,0.269023,6.155277,8.412414,4.035789,4.767660,4.241741],[-4.875809,1.062650,-0.119910,0.226587,-9.548607,-6.534350,-1.689460],[7.316161,4.582569,4.391002,5.213658,6.757564,-9.821842,-0.014249],[2.537716,-5.981273,-3.931880,6.873740,6.285474,-6.148663,1.639467],[-1.377782,-1.141736,-1.410435,-1.757724,-3.826960,-5.135694,-2.938259],[-7.662481,2.537352,-2.194671,2.731454,4.937956,2.058464,0.348175]],[[0.312955,-9.217137,-8.760631,8.867063,-1.533301,1.767392,-8.531718],[9.883398,-5.214979,2.516189,8.766269,7.450243,-5.727759,-1.351426],[-4.523804,-2.752186,-7.254344,0.929793,9.807291,-4.080634,-5.673390],[-3.958415,2.432642,5.352395,8.439712,9.908475,-1.817890,-2.642391],[-7.200442,-5.107958,-2.309020,-6.435666,8.129250,-1.378120,-9.064611],[4.454110,-6.817935,9.058338,0.353846,6.735875,8.562627,0.466094],[-5.729724,9.742884,-3.880701,6.737489,-8.086521,-9.592551,5.099860],[-2.484186,1.395549,5.902612,1.584890,5.656107,2.438762,4.743970],[-6.755717,9.180536,-3.222566,6.599545,-1.279008,-1.827941,-9.266819],[7.249829,4.988941,5.461010,5.498281,-7.914119,-1.282957,8.817145],[-8.393815,-4.085313,1.741355,7.249782,-2.006323,3.409989,1.098524],[6.560891,-7.511098,-7.806256,-2.092527,-3.065425,-8.782439,-8.001201],[-7.426388,-6.900124,7.066964,8.204242,-6.269090,-1.904333,2.749242],[-4.936488,7.044553,-7.574782,-4.027490,2.329318,5.496755,-9.374526],[-0.783034,-2.861416,-0.118740,-1.970971,2.196976,-8.377295,-7.835836],[0.091218,-1.264046,6.078377,5.377784,3.544255,-7.810509,2.922264]]], dtype = "float64")#candidate|1733|(6, 16, 7)|const|float64
var_1734 = relay.var("var_1734", dtype = "float64", shape = (6, 16, 7))#candidate|1734|(6, 16, 7)|var|float64
bop_1735 = relay.power(const_1733.astype('float64'), relay.reshape(var_1734.astype('float64'), relay.shape_of(const_1733))) # shape=(6, 16, 7)
output = relay.Tuple([bop_1735,])
output2 = relay.Tuple([bop_1735,])
func_1745 = relay.Function([var_1734,], output)
mod['func_1745'] = func_1745
mod = relay.transform.InferType()(mod)
mutated_mod['func_1745'] = func_1745
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1746 = relay.var("var_1746", dtype = "float64", shape = (6, 16, 7))#candidate|1746|(6, 16, 7)|var|float64
func_1745_call = mutated_mod.get_global_var('func_1745')
call_1747 = func_1745_call(var_1746)
output = call_1747
func_1748 = relay.Function([var_1746], output)
mutated_mod['func_1748'] = func_1748
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1787 = relay.var("var_1787", dtype = "float64", shape = (16, 9, 15))#candidate|1787|(16, 9, 15)|var|float64
var_1788 = relay.var("var_1788", dtype = "float64", shape = (16, 9, 15))#candidate|1788|(16, 9, 15)|var|float64
bop_1789 = relay.subtract(var_1787.astype('float64'), relay.reshape(var_1788.astype('float64'), relay.shape_of(var_1787))) # shape=(16, 9, 15)
output = relay.Tuple([bop_1789,])
output2 = relay.Tuple([bop_1789,])
func_1801 = relay.Function([var_1787,var_1788,], output)
mod['func_1801'] = func_1801
mod = relay.transform.InferType()(mod)
var_1802 = relay.var("var_1802", dtype = "float64", shape = (16, 9, 15))#candidate|1802|(16, 9, 15)|var|float64
var_1803 = relay.var("var_1803", dtype = "float64", shape = (16, 9, 15))#candidate|1803|(16, 9, 15)|var|float64
output = func_1801(var_1802,var_1803,)
func_1804 = relay.Function([var_1802,var_1803,], output)
mutated_mod['func_1804'] = func_1804
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2503 = relay.var("var_2503", dtype = "float32", shape = (7, 2, 5))#candidate|2503|(7, 2, 5)|var|float32
uop_2504 = relay.asin(var_2503.astype('float32')) # shape=(7, 2, 5)
output = relay.Tuple([uop_2504,])
output2 = relay.Tuple([uop_2504,])
func_2506 = relay.Function([var_2503,], output)
mod['func_2506'] = func_2506
mod = relay.transform.InferType()(mod)
mutated_mod['func_2506'] = func_2506
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2507 = relay.var("var_2507", dtype = "float32", shape = (7, 2, 5))#candidate|2507|(7, 2, 5)|var|float32
func_2506_call = mutated_mod.get_global_var('func_2506')
call_2508 = func_2506_call(var_2507)
output = call_2508
func_2509 = relay.Function([var_2507], output)
mutated_mod['func_2509'] = func_2509
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2832 = relay.var("var_2832", dtype = "float32", shape = (16, 5, 11))#candidate|2832|(16, 5, 11)|var|float32
var_2833 = relay.var("var_2833", dtype = "float32", shape = (16, 5, 11))#candidate|2833|(16, 5, 11)|var|float32
bop_2834 = relay.floor_divide(var_2832.astype('float32'), relay.reshape(var_2833.astype('float32'), relay.shape_of(var_2832))) # shape=(16, 5, 11)
func_1801_call = mod.get_global_var('func_1801')
func_1804_call = mutated_mod.get_global_var('func_1804')
var_2841 = relay.var("var_2841", dtype = "float64", shape = (2160,))#candidate|2841|(2160,)|var|float64
call_2840 = relay.TupleGetItem(func_1801_call(relay.reshape(var_2841.astype('float64'), [16, 9, 15]), relay.reshape(var_2841.astype('float64'), [16, 9, 15]), ), 0)
call_2842 = relay.TupleGetItem(func_1804_call(relay.reshape(var_2841.astype('float64'), [16, 9, 15]), relay.reshape(var_2841.astype('float64'), [16, 9, 15]), ), 0)
func_1095_call = mod.get_global_var('func_1095')
func_1100_call = mutated_mod.get_global_var('func_1100')
const_2844 = relay.const([4.725446,7.718605,3.644442,-5.522482,-1.976044,8.496637,-1.468236,-0.866883,5.398101,-0.944851,-6.331582,-6.803883,-1.571192,1.770300,-9.454798,-8.908088,-2.936268,-4.172126,5.054742,-6.520300,2.228904,2.296134,-5.418733,9.960192,-7.591711,-8.486281,-0.791668,-5.353503,-1.262167,-5.108504,-5.473562,-5.725905,0.929642,-6.970419,1.015251,-9.070944,-6.657023,-0.320319,7.956970,5.993471,-7.122053,-6.882833,-1.269364,2.852161,2.997901,9.683983,-2.310189,-7.175543,-0.145595,-3.338958,7.861763,9.752038,9.666097,-6.345804,0.431251,-9.046887,-8.217821,-1.521262,6.300407,6.838464,4.414922,-5.025128,-3.454458,7.397811,9.674656,-7.572428,-5.535853,-2.279977,5.141556,4.674585,-3.898319,-6.207206,-9.649217,4.758041,-8.612280,-2.997611,4.134636,-1.335418,7.119145,5.464279,6.829010,0.671932,5.279613,5.859344,6.255560,8.257040,-5.609146,-0.525248,-8.322418,-8.738211,-0.990006,-1.544400,0.350287,9.663913,2.006574,6.013671,-0.479620,-4.204455,9.971557,-5.111087,-5.302572,-0.405014,-2.372305,-1.710617,6.716175,6.767980,5.680859,9.348625,-3.569217,-0.857490,7.959935,8.885978,-6.151269,3.362189,9.376435,-7.182912,7.264159,8.469224,7.006527,-0.404780,-5.083069,-6.026621,-0.024528,6.771539,-9.527499,-6.605646,7.805263,1.560986,5.380484,7.998782,5.427079,4.448268,1.057933,-1.152158,-5.806323,2.720590,-3.138498,-1.916336,0.834287,-7.031549,9.557263,-2.402518,-2.164069,7.255946,-6.200035,-5.284092,-2.357531,7.301547,-9.580516,9.424638,-3.203664,-9.178090,-6.806514,5.040525,-2.798325,-3.888161,-5.852637,-1.586176,-6.665423,2.432464,3.470802,-7.302671,8.182682,5.214742,7.627347,-1.685770,5.001723,8.359627,1.942426,1.372214,-6.682086,-5.509710,-3.583933,4.149551,-6.366237,-7.034507,-5.906820,5.721290,-7.878278,-7.754348,2.203693,7.733934,4.048250,5.379453,-7.681702,-5.326235,-2.484403,3.592972,0.639411,8.318129,3.120616,6.015317,3.873870,8.012646,1.898647,6.598816,-8.971667,5.835097,3.485760,2.915135,-0.832646,-9.860238,-2.161497,6.570984,-4.037689,3.851077,-6.380383,-9.775332,7.947698,0.460961,0.153777,-0.547370,-4.303700,6.636807,-0.821478,4.778772,-6.056005,2.465717,8.961515,-7.801005,4.430105,-2.408072,8.366797,9.687089,-2.913529,7.388095,-7.893797,-1.013906,-1.733360,-0.338169,-6.593015,8.053299,-4.937738,0.935232,9.250402,0.312207,5.405550,1.633523,-8.315168,6.083242,6.338683,-2.872685,-3.198525,-1.593064,-4.646209,6.465371,-2.485949,0.091035,9.526071,9.768514,3.786558,-6.788229], dtype = "float32")#candidate|2844|(252,)|const|float32
var_2845 = relay.var("var_2845", dtype = "bool", shape = (2730,))#candidate|2845|(2730,)|var|bool
var_2846 = relay.var("var_2846", dtype = "float64", shape = (60,))#candidate|2846|(60,)|var|float64
call_2843 = relay.TupleGetItem(func_1095_call(relay.reshape(const_2844.astype('float32'), [7, 6, 6]), relay.reshape(var_2845.astype('bool'), [2730,]), relay.reshape(var_2846.astype('float64'), [60,]), ), 3)
call_2847 = relay.TupleGetItem(func_1100_call(relay.reshape(const_2844.astype('float32'), [7, 6, 6]), relay.reshape(var_2845.astype('bool'), [2730,]), relay.reshape(var_2846.astype('float64'), [60,]), ), 3)
uop_2849 = relay.sigmoid(var_2833.astype('float64')) # shape=(16, 5, 11)
output = relay.Tuple([bop_2834,call_2840,var_2841,call_2843,const_2844,var_2845,var_2846,uop_2849,])
output2 = relay.Tuple([bop_2834,call_2842,var_2841,call_2847,const_2844,var_2845,var_2846,uop_2849,])
func_2853 = relay.Function([var_2832,var_2833,var_2841,var_2845,var_2846,], output)
mod['func_2853'] = func_2853
mod = relay.transform.InferType()(mod)
var_2854 = relay.var("var_2854", dtype = "float32", shape = (16, 5, 11))#candidate|2854|(16, 5, 11)|var|float32
var_2855 = relay.var("var_2855", dtype = "float32", shape = (16, 5, 11))#candidate|2855|(16, 5, 11)|var|float32
var_2856 = relay.var("var_2856", dtype = "float64", shape = (2160,))#candidate|2856|(2160,)|var|float64
var_2857 = relay.var("var_2857", dtype = "bool", shape = (2730,))#candidate|2857|(2730,)|var|bool
var_2858 = relay.var("var_2858", dtype = "float64", shape = (60,))#candidate|2858|(60,)|var|float64
output = func_2853(var_2854,var_2855,var_2856,var_2857,var_2858,)
func_2859 = relay.Function([var_2854,var_2855,var_2856,var_2857,var_2858,], output)
mutated_mod['func_2859'] = func_2859
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2861 = relay.var("var_2861", dtype = "float32", shape = (7, 7, 7))#candidate|2861|(7, 7, 7)|var|float32
var_2862 = relay.var("var_2862", dtype = "float32", shape = (7, 7, 7))#candidate|2862|(7, 7, 7)|var|float32
bop_2863 = relay.subtract(var_2861.astype('float32'), relay.reshape(var_2862.astype('float32'), relay.shape_of(var_2861))) # shape=(7, 7, 7)
func_661_call = mod.get_global_var('func_661')
func_663_call = mutated_mod.get_global_var('func_663')
const_2870 = relay.const([-7.559750,0.208326,0.577288,0.336501,3.184449,-0.320441,9.742895,-4.826024,-9.537132,3.674726,9.921501,7.709656,5.724481,-7.392393,-7.427634,-4.812399,-6.326685,-3.595742,-4.737626,9.923878,-1.744319,-5.846249,3.784287,-0.229724,3.826899,5.574330,-9.699087,8.107971,-7.738748,4.637131,4.907184,1.470025,5.885906,-5.586852,-2.544169,9.846655,7.420235,-7.843502,3.946615,-2.129937,-0.486498,0.963487,-1.683209,2.322087,-2.483674,8.851572,-2.760379,3.782298,0.832194,7.151969,-9.704581,-1.183394,-5.469254,-8.159271,-8.824135,-6.808177,-1.523264,8.604486,-8.947528,1.376534,2.990974,6.164902,1.523528,-1.497050], dtype = "float32")#candidate|2870|(64,)|const|float32
call_2869 = relay.TupleGetItem(func_661_call(relay.reshape(const_2870.astype('float32'), [1, 8, 8])), 0)
call_2871 = relay.TupleGetItem(func_663_call(relay.reshape(const_2870.astype('float32'), [1, 8, 8])), 0)
output = relay.Tuple([bop_2863,call_2869,const_2870,])
output2 = relay.Tuple([bop_2863,call_2871,const_2870,])
func_2888 = relay.Function([var_2861,var_2862,], output)
mod['func_2888'] = func_2888
mod = relay.transform.InferType()(mod)
var_2889 = relay.var("var_2889", dtype = "float32", shape = (7, 7, 7))#candidate|2889|(7, 7, 7)|var|float32
var_2890 = relay.var("var_2890", dtype = "float32", shape = (7, 7, 7))#candidate|2890|(7, 7, 7)|var|float32
output = func_2888(var_2889,var_2890,)
func_2891 = relay.Function([var_2889,var_2890,], output)
mutated_mod['func_2891'] = func_2891
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3230 = relay.var("var_3230", dtype = "int8", shape = (8, 13, 6))#candidate|3230|(8, 13, 6)|var|int8
const_3231 = relay.const([[[-6,-3,10,-2,-7,-7],[3,6,9,-1,-10,9],[-6,4,-5,9,3,6],[5,6,-2,7,-6,-9],[4,-7,1,-10,5,4],[-4,1,-7,3,-2,-6],[-1,-4,-5,-4,-3,3],[-1,2,-5,-5,-9,8],[-1,2,9,10,10,-9],[-6,-1,-5,4,-7,1],[-3,1,-1,2,8,-7],[-1,-7,2,-3,8,-7],[10,9,8,-7,6,-4]],[[9,-1,9,3,7,-8],[-7,-7,-7,-10,-8,4],[10,-8,3,5,8,-8],[6,-7,-3,-3,-6,-7],[-7,-1,7,10,9,6],[-9,-2,7,-6,-1,-9],[7,-7,2,-7,-1,3],[-4,-5,-2,4,2,-10],[6,-5,8,3,5,8],[4,-6,6,2,2,-2],[8,6,2,10,-4,6],[8,7,9,-1,-3,-5],[6,-10,7,-5,-9,-5]],[[-8,8,-10,2,-4,-3],[6,-6,-1,-9,-10,-9],[10,2,-4,-2,-3,-4],[7,-3,9,-3,-10,-4],[-2,9,-2,7,-2,-3],[7,1,-8,-3,5,3],[1,-8,7,-1,-7,-8],[-1,-2,5,9,5,-2],[-9,5,2,-5,-5,4],[-7,10,-9,2,7,-3],[3,4,4,-8,-2,6],[-10,7,-5,9,7,-3],[-8,-6,-1,9,1,-10]],[[1,9,-1,-5,5,8],[4,10,-7,-10,10,-9],[-7,4,2,-4,-4,-6],[7,7,5,1,-3,1],[-8,4,-8,-6,3,-2],[4,10,10,-2,-7,-8],[4,-2,-2,8,5,-7],[-7,8,5,-5,-8,6],[10,5,-8,-10,4,-1],[6,-8,1,3,-8,-6],[-3,-1,-5,-8,-6,-2],[8,9,5,-10,-9,-9],[-4,8,5,5,6,-8]],[[-5,-8,1,-7,4,-1],[-6,-8,-9,-7,3,-5],[9,6,-5,8,3,1],[6,3,4,8,6,6],[5,8,-7,6,-2,3],[9,7,7,-7,8,4],[-5,1,-8,-7,-10,-3],[-8,5,3,7,-9,-5],[-2,3,4,1,2,1],[1,-5,4,8,-8,4],[-2,3,-5,10,-3,-9],[-2,4,-4,-6,-4,-6],[10,4,10,9,-9,3]],[[-1,5,-8,10,-5,-6],[1,6,4,8,9,-1],[-10,-8,3,4,6,7],[-4,-8,1,-9,-5,-10],[8,-2,-9,-5,3,7],[7,-1,1,-1,-5,5],[2,-2,9,-7,-9,-6],[-3,-7,-4,-4,8,-8],[-3,5,7,-8,5,7],[2,-3,-6,-1,-9,7],[7,-6,9,5,2,-2],[1,7,9,-10,-9,-6],[-3,4,-7,5,4,-8]],[[-3,5,-2,-4,8,-9],[-7,-2,3,1,-4,5],[-6,9,10,-3,10,-10],[-8,5,8,-4,2,-1],[-3,8,7,-3,4,5],[9,10,-7,-4,-9,-10],[5,-1,-2,-2,5,6],[-5,-5,3,6,-7,3],[-7,8,6,-2,-3,-7],[-7,10,1,4,-7,7],[-10,-1,-9,10,9,-3],[-7,7,-10,-5,-3,7],[-10,-4,-1,-6,5,-7]],[[-2,-10,8,-10,-10,4],[-1,-5,3,10,4,-2],[-6,7,8,4,4,4],[1,6,1,9,1,8],[-7,-9,4,-7,2,10],[9,-3,-1,-4,1,4],[-2,-5,9,8,2,9],[9,-6,10,-4,-3,-2],[3,7,-6,7,-7,4],[6,4,-9,5,10,10],[7,-9,-10,5,8,1],[-6,-3,-3,-9,-9,8],[-7,-6,2,9,10,10]]], dtype = "int8")#candidate|3231|(8, 13, 6)|const|int8
bop_3232 = relay.left_shift(var_3230.astype('int8'), relay.reshape(const_3231.astype('int8'), relay.shape_of(var_3230))) # shape=(8, 13, 6)
func_1170_call = mod.get_global_var('func_1170')
func_1174_call = mutated_mod.get_global_var('func_1174')
var_3236 = relay.var("var_3236", dtype = "uint16", shape = (2, 864))#candidate|3236|(2, 864)|var|uint16
call_3235 = relay.TupleGetItem(func_1170_call(relay.reshape(var_3236.astype('uint16'), [16, 12, 9]), relay.reshape(var_3236.astype('uint16'), [16, 12, 9]), ), 0)
call_3237 = relay.TupleGetItem(func_1174_call(relay.reshape(var_3236.astype('uint16'), [16, 12, 9]), relay.reshape(var_3236.astype('uint16'), [16, 12, 9]), ), 0)
var_3238 = relay.var("var_3238", dtype = "uint16", shape = (2, 864))#candidate|3238|(2, 864)|var|uint16
bop_3239 = relay.bitwise_and(var_3236.astype('uint64'), relay.reshape(var_3238.astype('uint64'), relay.shape_of(var_3236))) # shape=(2, 864)
output = relay.Tuple([bop_3232,call_3235,bop_3239,])
output2 = relay.Tuple([bop_3232,call_3237,bop_3239,])
func_3253 = relay.Function([var_3230,var_3236,var_3238,], output)
mod['func_3253'] = func_3253
mod = relay.transform.InferType()(mod)
var_3254 = relay.var("var_3254", dtype = "int8", shape = (8, 13, 6))#candidate|3254|(8, 13, 6)|var|int8
var_3255 = relay.var("var_3255", dtype = "uint16", shape = (2, 864))#candidate|3255|(2, 864)|var|uint16
var_3256 = relay.var("var_3256", dtype = "uint16", shape = (2, 864))#candidate|3256|(2, 864)|var|uint16
output = func_3253(var_3254,var_3255,var_3256,)
func_3257 = relay.Function([var_3254,var_3255,var_3256,], output)
mutated_mod['func_3257'] = func_3257
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3301 = relay.var("var_3301", dtype = "int64", shape = (15, 15, 12))#candidate|3301|(15, 15, 12)|var|int64
var_3302 = relay.var("var_3302", dtype = "int64", shape = (15, 15, 12))#candidate|3302|(15, 15, 12)|var|int64
bop_3303 = relay.equal(var_3301.astype('bool'), relay.reshape(var_3302.astype('bool'), relay.shape_of(var_3301))) # shape=(15, 15, 12)
bop_3306 = relay.left_shift(var_3302.astype('int8'), relay.reshape(var_3301.astype('int8'), relay.shape_of(var_3302))) # shape=(15, 15, 12)
uop_3310 = relay.acos(bop_3306.astype('float64')) # shape=(15, 15, 12)
func_443_call = mod.get_global_var('func_443')
func_445_call = mutated_mod.get_global_var('func_445')
const_3314 = relay.const([-9.570400,-5.920940,-8.786678,-3.685629,-6.006406,9.131755,2.415050,9.937235,5.637992,-5.129597,-3.669495,-4.645170,1.966021,-7.320965,3.395983,6.193073,-8.401522,-6.135294,-6.685307,-0.577347,5.309441,-8.416159,-3.320150,-0.296957,8.261069,-2.545682,8.268945,-6.878244,-9.339969,5.751354,3.179309,0.057386,-3.568515,4.738951,6.182121,4.991770,1.761248,8.427796,-7.967220,3.997446,-6.505503,6.856279,6.964884,-0.701561,0.909238,1.478092,-1.191869,-6.232694,-4.706452,5.373736,0.321927,9.793208,1.072776,2.941535,-6.574396,8.415913,-6.455567,7.551725,-7.967186,1.923114,2.622931,-4.247259,-8.725711,4.562456,-7.109459,-3.786250,4.320343,6.035496,-9.077980,-0.532452,1.076119,7.012992,0.042420,0.864898,-9.276492,7.353519,-6.944141,2.575193,-9.541068,9.917203,9.279085,5.741790,1.784649,5.120033,6.159170,0.917283,4.994023,-1.158240,6.612503,-7.602307,-7.289916,7.452185,-6.123297,9.069981,6.384023,0.125290,-5.969408,-7.452831,4.577167,6.551944,6.880248,-2.893316,6.662062,5.740919,-1.727771,-9.646166,0.707156,9.526375,-9.714617,0.541577,-4.746230,5.682807,1.271201,-7.781279,5.297496,6.899425,-1.033304,-3.286612,-1.970103,-8.511323,2.357759,0.854483,3.451610,-7.517472,-2.779856,3.243978,7.227537,0.802097,-4.403019,2.490648,-4.034382,5.141121,-6.693082,-2.036231,4.236013,-2.060872,-5.983113,-0.693686,-6.538225,7.919000,-9.437307,0.425266,0.663640,-6.979082,9.159596,-8.710327,-1.143288,-1.604463,1.596991,4.513561,-1.012843,4.313034,7.174387,-2.233052,8.062602,-4.293014,-3.297183,8.076714,2.438133,-8.629058,5.113456,-1.122168,-6.057433,2.562148,3.030861,-0.063620,-7.598506,-9.379792,0.056467,5.936638,1.263147,-7.282559,-7.273930,0.202402,9.385662,-2.089802,-8.061144,-1.175485,2.267319,-9.568730,-1.910435,-1.694113,3.954451,5.050407,5.951584,2.043765,-0.055202,8.687848,9.848629,-9.443324,-6.013786,2.872197,2.919323,6.275955,4.936064,-3.948987,-7.981148,-4.839162,6.659544,6.489811,0.652550,3.452214,-7.259334,-2.582943,-6.954418,9.753299,4.574289,4.807320,-1.075073,1.132395,8.492125,-2.012638,4.140765,9.265298,-1.377773,6.686745,0.270990,5.410652,7.403871,0.614727,1.986993,-5.735271,5.443739,3.082808,-0.635232,-7.126927,-3.723530,-9.011071,8.302785,6.179639,-3.527251,9.594571,0.320421,0.396114,-4.160793,-0.169106,2.099746,-6.657355,4.990909,4.217076,4.276395,6.025278,-1.051375,2.747756,1.498063,7.409725,5.969699,1.489786,3.112484,-4.324732,6.050463,3.713913,3.269219,5.603367,-0.467959,3.206287,-5.714583,3.202525,-9.609994,0.413773], dtype = "float64")#candidate|3314|(260,)|const|float64
call_3313 = relay.TupleGetItem(func_443_call(relay.reshape(const_3314.astype('float64'), [13, 5, 4])), 0)
call_3315 = relay.TupleGetItem(func_445_call(relay.reshape(const_3314.astype('float64'), [13, 5, 4])), 0)
var_3317 = relay.var("var_3317", dtype = "int8", shape = (15, 15, 12))#candidate|3317|(15, 15, 12)|var|int8
bop_3318 = relay.maximum(bop_3306.astype('int8'), relay.reshape(var_3317.astype('int8'), relay.shape_of(bop_3306))) # shape=(15, 15, 12)
uop_3322 = relay.erf(bop_3303.astype('float64')) # shape=(15, 15, 12)
func_84_call = mod.get_global_var('func_84')
func_87_call = mutated_mod.get_global_var('func_87')
const_3338 = relay.const([1.924236,-7.459842,3.663523,6.951721,4.461098,8.422814,0.692898,8.335804,-5.819843,3.304376,-2.838321,2.317892,0.176273,-9.102218,-6.491128,1.036287,3.902786,8.222570,-1.469514,-0.990579,6.039086,9.579891,9.270058,-2.399271,3.747848,3.297447,-3.117960,9.804468,-2.953415,-5.287561,5.719140,3.206918,7.700733,4.676644,4.769665,-9.914954,5.739494,4.147286,-5.737167,-5.663410,8.524426,1.353796,-5.580382,-1.738150,-4.302917,-6.150444,-4.921374,1.963936,-2.184388,1.314292,-9.916477,-2.271750,7.925657,-0.919278,-2.944775,9.442146,2.340210,0.330699,9.323775,-4.390682], dtype = "float64")#candidate|3338|(60,)|const|float64
call_3337 = relay.TupleGetItem(func_84_call(relay.reshape(const_3338.astype('float64'), [3, 10, 2])), 0)
call_3339 = relay.TupleGetItem(func_87_call(relay.reshape(const_3338.astype('float64'), [3, 10, 2])), 0)
output = relay.Tuple([uop_3310,call_3313,const_3314,bop_3318,uop_3322,call_3337,const_3338,])
output2 = relay.Tuple([uop_3310,call_3315,const_3314,bop_3318,uop_3322,call_3339,const_3338,])
func_3341 = relay.Function([var_3301,var_3302,var_3317,], output)
mod['func_3341'] = func_3341
mod = relay.transform.InferType()(mod)
var_3342 = relay.var("var_3342", dtype = "int64", shape = (15, 15, 12))#candidate|3342|(15, 15, 12)|var|int64
var_3343 = relay.var("var_3343", dtype = "int64", shape = (15, 15, 12))#candidate|3343|(15, 15, 12)|var|int64
var_3344 = relay.var("var_3344", dtype = "int8", shape = (15, 15, 12))#candidate|3344|(15, 15, 12)|var|int8
output = func_3341(var_3342,var_3343,var_3344,)
func_3345 = relay.Function([var_3342,var_3343,var_3344,], output)
mutated_mod['func_3345'] = func_3345
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3542 = relay.var("var_3542", dtype = "int32", shape = (8, 8, 1))#candidate|3542|(8, 8, 1)|var|int32
const_3543 = relay.const([[[10,-1],[-10,7],[-8,10],[9,-6],[10,8],[-7,8],[10,-2],[10,8]],[[-1,2],[5,-1],[-10,-10],[3,-1],[-8,-10],[8,1],[-6,8],[5,8]],[[4,-9],[-9,-1],[-3,9],[8,2],[-1,-1],[10,6],[4,-4],[1,-5]],[[3,-1],[6,3],[-6,7],[4,-10],[-2,5],[-4,2],[6,-7],[9,1]],[[7,6],[7,-5],[4,7],[-3,-3],[9,-9],[-1,-10],[-8,-6],[-8,10]],[[-1,9],[8,1],[5,-9],[6,-3],[2,-7],[-4,1],[-4,10],[-4,-9]],[[9,-2],[-3,-6],[-10,9],[9,-10],[-6,3],[6,4],[1,-5],[-4,-1]],[[-4,9],[-6,8],[-10,-10],[10,1],[9,-8],[9,6],[-5,6],[-5,4]]], dtype = "int32")#candidate|3543|(8, 8, 2)|const|int32
bop_3544 = relay.bitwise_xor(var_3542.astype('int32'), const_3543.astype('int32')) # shape=(8, 8, 2)
func_1745_call = mod.get_global_var('func_1745')
func_1748_call = mutated_mod.get_global_var('func_1748')
var_3550 = relay.var("var_3550", dtype = "float64", shape = (672,))#candidate|3550|(672,)|var|float64
call_3549 = relay.TupleGetItem(func_1745_call(relay.reshape(var_3550.astype('float64'), [6, 16, 7])), 0)
call_3551 = relay.TupleGetItem(func_1748_call(relay.reshape(var_3550.astype('float64'), [6, 16, 7])), 0)
bop_3557 = relay.mod(const_3543.astype('float32'), relay.reshape(bop_3544.astype('float32'), relay.shape_of(const_3543))) # shape=(8, 8, 2)
output = relay.Tuple([call_3549,var_3550,bop_3557,])
output2 = relay.Tuple([call_3551,var_3550,bop_3557,])
func_3566 = relay.Function([var_3542,var_3550,], output)
mod['func_3566'] = func_3566
mod = relay.transform.InferType()(mod)
var_3567 = relay.var("var_3567", dtype = "int32", shape = (8, 8, 1))#candidate|3567|(8, 8, 1)|var|int32
var_3568 = relay.var("var_3568", dtype = "float64", shape = (672,))#candidate|3568|(672,)|var|float64
output = func_3566(var_3567,var_3568,)
func_3569 = relay.Function([var_3567,var_3568,], output)
mutated_mod['func_3569'] = func_3569
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3618 = relay.const([[[8.740030,-8.198853,-3.848599,-4.606847,-1.790157,8.733570,-8.949907,5.550491,4.226322,1.926498,5.084671],[-7.137202,-8.116831,5.333959,-0.454993,-9.760396,-2.750879,6.907226,-2.178780,7.517912,-0.304910,4.993226],[8.553862,3.684210,2.220902,3.545479,-8.570809,6.848791,-3.426169,-3.873828,1.539909,-6.627148,9.486722],[-5.947319,9.847062,-8.415273,5.082762,-1.179360,-3.101202,4.013678,7.773120,-1.189480,8.988940,-8.214432],[6.535627,-3.334629,8.605989,-0.388632,-2.902978,-1.596055,7.395833,0.943731,-7.186835,3.481017,4.693718],[-5.706351,2.283254,-8.574560,-4.033806,-2.158560,5.987680,-2.855365,1.347470,2.713397,-8.386622,-5.423177]],[[1.490952,-9.087514,4.949436,-9.402159,-3.334138,2.675031,-0.550790,-1.624307,-0.255178,-7.879630,0.619756],[-9.698361,3.222294,-4.380029,3.255591,6.676477,3.068460,-7.968110,-6.421991,8.469942,-8.976681,-5.732118],[8.496373,9.641359,-6.239896,6.973414,1.510966,-0.602949,-6.900934,-8.468181,7.644207,-4.495421,1.467830],[-7.403702,3.033139,-0.460652,-6.704313,-3.832842,-0.994680,-6.283991,9.013547,-6.463116,4.446476,-4.841781],[-1.917506,-3.397018,-8.296956,-1.951529,5.609922,8.027773,-8.183718,-4.449698,4.314931,-4.321136,8.663744],[-9.672199,3.617427,2.978929,9.029801,-7.861728,-7.592941,-6.665972,0.183103,-1.667394,3.825087,2.867286]],[[5.421689,-1.787405,9.483276,-5.908792,8.257248,9.853707,-2.349992,-7.395161,-1.125110,0.136169,2.671216],[-9.974065,-3.150766,2.585996,-6.198075,4.260337,7.997951,-2.344052,3.618254,2.767826,5.103638,2.534027],[4.731185,-9.147351,-8.592441,-9.305457,1.951569,-2.662811,5.292625,6.207711,-8.809874,7.716493,-0.284476],[-8.105199,0.712780,1.227546,5.723178,-7.000982,-2.258584,-5.800359,-0.953050,-0.854063,5.779060,5.086542],[-1.504528,7.887055,3.802898,-2.119852,-2.993779,5.828546,-1.433572,1.261101,6.989841,-7.390661,-8.662490],[-8.424398,7.258393,-9.713591,7.791398,5.075597,-1.679054,1.006391,-3.663426,0.491146,-7.772558,-2.487567]],[[0.501648,-5.253440,9.486222,-6.218539,-5.299771,-0.976624,2.445836,-7.855323,-8.844003,5.977483,-2.315087],[-3.982216,-0.276524,-7.790999,4.729725,-9.075716,-3.311671,6.682971,7.453700,7.533811,8.224407,-9.943518],[-2.983594,8.023226,-6.229259,1.780347,4.490038,1.748337,0.778594,3.801292,-4.253102,-4.516853,-6.747028],[-7.018726,1.360867,7.195189,7.132391,-4.021742,8.216598,-4.814934,-6.623767,-9.275025,-2.530191,6.352206],[6.860891,-7.044541,-5.698881,-9.914018,-8.859146,0.715590,-8.771351,-1.409602,-6.547798,8.211350,6.681858],[4.731519,4.292058,6.484835,-1.778696,-9.196150,3.463623,5.737409,9.188157,7.149948,5.857491,8.658244]],[[0.129248,3.183820,-9.573238,1.235937,8.944730,8.877340,3.634168,-3.320337,-7.857867,2.110732,6.397900],[7.276167,3.210500,-4.003504,2.843096,-8.815516,-8.466747,-6.308138,5.735760,-7.845170,0.817345,5.455552],[-7.037226,-4.844347,-3.216787,2.364084,-4.740680,-6.489012,8.117114,-9.870418,5.543260,7.370989,9.854904],[-4.321056,-7.579727,7.049286,4.465034,-9.067162,-1.190054,-1.843787,-7.757842,-8.178693,-3.124430,-9.943330],[9.815456,7.416953,-8.266870,-3.137348,-2.794023,-3.400441,4.682803,-1.988314,-4.708961,7.796281,9.638635],[-0.475611,7.599134,3.774911,2.481848,0.418490,-1.603463,1.704815,0.326989,-7.639310,5.314199,-6.835961]],[[-9.213418,7.868307,7.093949,9.533945,-8.887517,6.542575,-0.463385,2.087588,-3.720381,5.715149,3.386877],[3.375524,-2.371306,3.764007,-2.362580,5.153512,-0.056394,-6.263750,5.261581,0.432387,5.487549,0.470982],[0.085455,8.319508,7.465111,-0.052305,-8.582490,0.174930,-4.046506,-2.707946,5.883923,0.364356,-6.614536],[6.638097,-8.235181,5.636877,3.104430,1.774144,8.847580,4.338893,3.266143,-7.807814,0.389233,6.808603],[-9.325176,8.059117,6.046507,9.353036,-9.826945,8.752408,1.902344,-7.756952,5.531864,1.367533,-9.733593],[5.499711,2.542712,0.670104,6.009339,-1.362837,-6.074480,6.037170,-2.026226,5.723281,-2.799433,5.029106]],[[8.310992,-6.812870,-4.684768,-0.334930,-1.697737,-4.516086,3.375687,1.331674,-2.704347,-5.833081,8.017479],[-4.031799,-7.218032,-0.856478,-7.300808,1.816358,2.987531,-5.458676,1.544866,-7.072844,-6.612470,5.521515],[8.534403,7.311279,-1.379132,-5.007071,7.994630,-2.539121,6.882716,-5.046496,-3.752100,2.656774,-5.570481],[5.038808,-8.173678,9.594187,0.691133,-9.564714,3.530985,-2.147381,3.383605,0.520683,-5.908663,5.931961],[-5.939222,0.389569,6.732993,-2.393692,3.888310,7.059423,-0.792516,-9.916134,-1.318179,-2.386708,-4.686436],[0.581472,8.876086,0.304536,-5.686211,1.435249,-9.784971,-9.383560,-4.411961,6.137639,-0.983092,4.366486]],[[-6.713987,-0.858623,1.908343,-6.657658,-0.851120,0.179303,1.392239,3.082148,7.319806,-6.157111,5.231956],[5.783508,-6.664252,1.611299,-1.279123,1.164051,1.227525,4.576140,-3.789298,-5.863643,8.183996,-7.138861],[-5.712574,3.693646,8.205146,-6.776805,-2.308976,-7.711176,-1.646868,0.655459,-4.564424,1.068398,8.914297],[-6.248150,1.520094,-5.127095,0.864650,6.564257,-1.384651,5.883602,-8.099130,-9.192549,-1.123199,1.210988],[0.958885,4.156694,0.305565,3.292661,2.875163,-0.195991,-6.390092,8.329650,-9.285951,-9.155771,8.737979],[-4.270905,5.608819,-2.107938,7.028518,-7.086926,2.157576,-2.724928,3.142701,8.618956,-8.824312,8.893739]],[[-6.390594,-6.809922,1.425610,6.127278,-5.677297,-7.031317,-9.693950,6.758325,9.043532,-4.826423,0.446361],[5.280753,-1.004549,1.286775,0.500801,-3.261660,-8.175811,-8.820663,5.994035,-1.336375,8.689975,1.417509],[-7.259920,9.647254,-3.253148,-8.648242,-3.482577,-2.594444,-8.934168,9.698955,-0.366990,3.834453,-7.501279],[-8.922743,9.664551,-0.214595,-8.845512,-9.712576,-8.201211,-1.323913,-8.323529,0.124066,-9.881416,2.373068],[1.800402,-5.300329,-1.682580,-5.756079,9.415509,-4.115523,-2.407757,8.761633,-9.066009,5.820108,2.781312],[-4.034617,-3.908335,4.355868,9.019183,2.607797,9.854406,7.258421,8.369473,1.470993,-4.139395,4.350199]],[[-4.529077,5.902988,-0.501594,1.181703,-4.985067,8.636023,5.183169,-6.293048,-9.934969,-6.053063,0.557201],[1.684431,7.876878,-7.444168,5.103178,-3.615460,-4.017773,-8.239722,-7.529236,9.113986,7.815554,6.511795],[5.914555,-9.962979,3.258247,1.992559,-2.393529,9.896720,4.203569,7.999653,7.829459,-1.521331,-7.026368],[6.769594,5.546272,1.246773,7.681588,2.950777,-0.247238,-8.093889,-2.101219,6.273892,1.003911,0.490609],[-6.582505,5.763563,-5.875370,1.964379,-9.798177,-5.458809,2.064460,3.993722,-7.898038,4.851063,-1.757068],[8.164776,-8.073374,7.584283,3.007180,-2.856975,9.167867,-3.094655,-1.047611,-9.383423,-9.514956,-8.845281]]], dtype = "float32")#candidate|3618|(10, 6, 11)|const|float32
uop_3619 = relay.exp(const_3618.astype('float32')) # shape=(10, 6, 11)
func_3253_call = mod.get_global_var('func_3253')
func_3257_call = mutated_mod.get_global_var('func_3257')
var_3626 = relay.var("var_3626", dtype = "int8", shape = (312, 2))#candidate|3626|(312, 2)|var|int8
const_3627 = relay.const([-3,-4,-3,10,6,10,10,8,9,7,-6,-4,5,1,-8,9,-9,-2,2,8,7,-1,-5,2,8,-5,-10,-5,-2,-2,-7,2,4,8,10,-5,5,6,7,-2,-7,-9,-8,6,3,2,9,-5,2,10,-1,-8,2,-4,2,-4,-7,-10,9,4,-3,9,-10,4,10,-1,10,-5,3,-1,-9,8,8,-8,-3,9,9,-8,4,1,8,5,3,-8,1,-5,-4,6,-10,-1,7,9,-9,4,-8,7,9,2,2,-2,1,3,8,-1,4,-1,1,-8,6,-4,-7,8,3,-1,2,-7,-9,-10,10,7,-3,-6,8,-7,-5,9,-1,9,-7,-8,4,-1,8,1,-5,3,-9,-4,-2,-1,9,-1,7,6,-2,2,-2,8,8,-9,10,-1,-2,5,-6,-2,-8,-7,5,-10,8,3,-9,-9,2,10,-1,-8,7,-8,2,2,-5,5,-2,6,-7,1,2,2,9,6,4,2,9,-6,2,-9,7,-8,10,-1,5,-2,-2,-8,6,-1,-10,-2,5,-8,-4,-5,-2,9,8,-9,-4,7,7,8,-1,-6,2,-10,5,-5,6,9,-4,1,10,5,5,1,1,-5,-8,5,-8,6,-2,2,2,7,-10,8,-10,-6,-8,7,4,-2,-5,-2,-2,6,-1,4,-8,9,-9,1,-1,4,-2,9,-3,10,-9,-10,-3,7,-5,-7,-1,-4,-3,-2,10,4,-9,1,5,1,-4,-7,9,10,6,-6,4,-9,-5,-1,-9,8,-9,1,8,2,-2,10,-4,5,8,6,1,10,8,-10,8,4,-7,-5,-6,-9,-5,-2,-9,-8,-8,10,-10,7,2,5,-7,1,-6,1,3,-2,6,7,9,-2,-10,8,3,-7,5,6,3,-8,-6,-2,-6,7,-6,-9,2,4,6,-1,9,5,-2,-8,2,5,-4,7,1,5,-10,2,8,3,8,-4,-2,1,-1,10,-6,9,3,-1,2,2,10,6,-2,1,-3,-8,-3,-10,7,-8,-8,-2,-5,-5,-9,-2,3,-7,9,4,3,8,1,2,9,-3,-9,7,-8,-4,1,5,6,-8,10,-6,4,-10,-1,4,-2,-8,-4,4,9,-10,-4,4,-9,-4,4,3,-3,6,-7,5,-9,-10,-9,-6,4,9,-3,7,-3,10,-10,-9,7,-8,-6,-4,7,-8,8,-5,2,-10,4,6,8,-9,8,-1,1,-9,-4,2,7,-10,-7,-7,6,3,-5,-1,4,1,-6,-9,4,6,3,1,-9,4,5,-5,1,3,7,-10,4,5,8,8,5,1,-1,7,5,-8,-5,3,4,-3,-2,4,-4,5,-4,-5,-7,7,1,10,7,6,4,7,7,-9,-3,-4,-3,-1,4,-7,2,-8,8,-7,-9,-7,4,1,6,-10,-4,-7,7,-3,2,1,4,5,9,-8,-6,-1,1,-4,3,-5,10,3,10,8,6,5,9,5,-5,6,10,-4,1,-9,1,9,-5,-1,-8,6,8,-7,5,-5,-5,-4,10,5,5,6,-7,1,7,9,-3,-1,-8,8,-8,-4,7,7,5,1,-7,7,-1,-8,-10,-6,-3,4,5,5,-6,-8,6,-2,-1,-2,-9,-4,7,1,-8,10,5,-3,7,-6,8,8,1,-6,1,1,-6,2,-7,-3,-1,-8,-9,7,-10,1,-6,3,-6,-2,-6,-1,-7,8,-6,-3,-3,3,4,8,-10,-2,-7,-6,4,4,-10,-6,5,-3,4,10,-8,1,-3,-8,9,1,-6,9,-2,4,7,9,4,5,-9,-7,-7,1,-7,-3,10,10,-1,-8,3,5,1,-2,-9,5,3,6,-10,10,-7,-2,8,-5,-5,10,-6,-8,10,-4,-8,-8,2,-2,3,8,6,-9,5,1,-8,8,7,-2,7,-7,-6,-7,-1,1,-1,-3,10,-1,-7,-3,-3,-8,-6,-9,-8,-7,3,5,10,-7,-4,8,-4,8,-9,-4,-1,-5,5,-9,4,1,9,3,-9,-10,3,-8,-5,6,-7,-10,-7,7,-1,-6,4,6,3,-1,-2,-7,9,1,2,-9,10,-9,-4,-10,3,-2,3,-10,-9,-1,2,-5,-3,-4,-4,4,-10,-2,1,1,-7,-3,-1,7,2,1,5,-4,2,5,-10,-1,-4,-5,6,9,9,4,-2,1,10,-9,-8,7,-10,-8,-3,-1,4,2,-3,3,-4,3,-9,-2,-8,8,-6,8,7,-6,-6,7,-6,10,-3,-1,-2,-5,-1,-4,9,-7,-4,3,-10,2,-8,8,10,-3,-2,10,-9,9,-3,10,-4,9,1,-9,-2,9,-2,6,-4,4,3,2,-10,-5,5,-7,2,6,9,-8,-8,3,-3,-3,7,-5,-3,6,1,8,-7,-2,4,-6,-5,4,-3,-7,-5,5,8,-6,-10,-6,-6,-4,3,3,6,-8,6,-8,10,-5,-4,1,-2,-2,-1,-1,5,9,-3,-3,6,2,5,10,3,-10,-6,8,-8,-8,9,6,-7,1,-1,-9,-8,-8,-10,8,-2,10,-1,-5,9,10,5,1,2,9,8,2,-10,-9,-7,-4,9,-8,-2,-1,-6,-8,-8,-2,3,-6,1,7,8,-2,6,5,-7,8,-8,2,-10,7,-3,10,2,9,4,5,-3,-9,2,-6,9,-10,-1,-4,-5,10,-10,4,-8,5,8,-6,-10,3,8,-3,-1,5,7,6,-10,10,9,-4,-6,1,-3,-8,-3,-3,10,10,-8,5,6,-7,-10,-8,2,7,3,5,-6,-6,-6,8,4,-7,-4,-10,-4,7,-8,2,-7,8,-7,-3,-8,10,10,9,-9,-8,9,-3,9,-8,5,4,8,-1,9,-8,2,10,-9,8,5,8,6,-8,1,1,-5,7,9,10,1,4,7,7,-10,3,1,-9,3,1,3,-10,-6,-4,5,2,2,-1,-9,7,5,7,1,2,-5,-10,6,-9,-6,-1,6,9,1,-1,10,2,-7,-1,6,2,10,-10,-1,3,1,-8,-9,-7,9,-1,-5,6,3,-8,-5,-10,2,3,8,-1,-10,-8,-10,-9,2,-9,4,-6,-5,6,7,-2,4,4,-3,-3,-6,4,-5,-4,-5,-1,-8,-6,3,10,-7,-1,-10,-5,10,8,10,-1,-6,-1,7,2,10,8,-1,5,3,-1,9,-7,-5,-4,-8,-9,9,5,-1,-3,6,-6,10,-5,7,7,3,4,1,-2,-2,-3,-2,-9,7,5,1,-10,-5,7,2,-6,10,-2,8,9,-6,3,1,2,1,-9,1,7,-8,-5,-10,5,3,-8,5,2,-10,-1,6,6,1,4,-7,-5,7,5,-3,5,2,-6,3,-10,5,-1,-5,10,4,-9,7,6,-5,1,-3,-3,-2,-2,9,7,5,4,-6,-7,10,-1,-9,-3,10,-2,10,10,4,-6,-5,-6,-2,-10,9,-1,5,-8,-3,-9,-4,-5,-4,-6,-8,3,7,4,2,-2,-3,-9,-6,-3,9,1,-2,-8,3,7,10,3,-9,-1,-2,3,-5,-6,-1,-10,-2,4,9,-10,-9,2,-9,9,3,-1,2,-4,8,7,-2,2,10,-8,1,1,-7,9,9,3,7,-1,-10,5,-7,-7,-3,-3,-6,-4,-10,-7,8,-10,6,-1,9,-2,-8,-5,1,-6,-3,-7,-1,-8,-4,8,10,10,-3,-9,-4,-1,9,-9,-10,-3,7,3,-9,-9,-5,6,6,3,7,-6,-4,5,-3,-4,-1,-9,6,-6,-3,9,-3,5,-1,3,-2,-10,5,2,2,-2,-4,3,3,7,6,5,-5,1,1,-5,-2,-9,-2,7,-8,9,10,-2,-1,10,-8,-7,7,8,-3,-3,2,3,5,-10,-9,-3,-2,1,-7,-1,7,-10,7,4,-3,-8,-9,10,1,6,-10,-8,-5,6,-1,9,-8,-4,-6,-8,7,5,4,-9,5,6,6,8,2,-5,4,3,-2,-8,7,-9,-9,-10,10,-2,7,-10,10,4,3,-7,5,8,4,8,-1,6,3,-5,-5,10,4,5,-10,-6,-8,10,2,1,-4,-9,-5,-5,1,3,-8,8,-5,-4,1,7,-6,3,5,-3,-10,-5,9,5,-1,-6,3,9,-6,-2,4,6,-8,-7,10,3,-4,7,8,3,-10,6,-10,1,7,-3,-5,-2,-6,6,-1,-8,-5,8,8,-1,-8,-4,-2,-6,-8,-2,10,6,3,3,-10,8,-7,1,8,6,10,6,-6,-1,-3,-9,-6,-8,6,-2,-4,2,-7,-9,-4,8,-4,6,-9,4,3,-5,-8,-10,4,-9,-2,-10,-3,-3,3,-2,8,-8,-8,-8,-8,10,8,10,-3,10,1,6,10,-4,-1,-3,6,-7,-6,5,-10,1,6,9,4,5,-1,1,10,-8,2,1,3,-4,3,-6,-6,-2,-10,-2,-10,10,-9,7,-6,10,6,-10,9,9,-3,6,2,4,9,-8,6,-2,-1,-4,-4,7,-6,-9,10,9,-3,-7,-3,8,-8,10,-6,-10,-1,-4,-9,-7,9,-1,3,4,-3,2,-3,-7,-9,-6,-9,-2,9,7,10,-4,-9,-9,3,10,-4,3,5,8,-6,10,9,6,-9,-7,-7,7,-5,8], dtype = "uint16")#candidate|3627|(1728,)|const|uint16
call_3625 = relay.TupleGetItem(func_3253_call(relay.reshape(var_3626.astype('int8'), [8, 13, 6]), relay.reshape(const_3627.astype('uint16'), [2, 864]), relay.reshape(const_3627.astype('uint16'), [2, 864]), ), 1)
call_3628 = relay.TupleGetItem(func_3257_call(relay.reshape(var_3626.astype('int8'), [8, 13, 6]), relay.reshape(const_3627.astype('uint16'), [2, 864]), relay.reshape(const_3627.astype('uint16'), [2, 864]), ), 1)
output = relay.Tuple([uop_3619,call_3625,var_3626,const_3627,])
output2 = relay.Tuple([uop_3619,call_3628,var_3626,const_3627,])
func_3632 = relay.Function([var_3626,], output)
mod['func_3632'] = func_3632
mod = relay.transform.InferType()(mod)
var_3633 = relay.var("var_3633", dtype = "int8", shape = (312, 2))#candidate|3633|(312, 2)|var|int8
output = func_3632(var_3633)
func_3634 = relay.Function([var_3633], output)
mutated_mod['func_3634'] = func_3634
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3835 = relay.var("var_3835", dtype = "int64", shape = (9, 7, 3))#candidate|3835|(9, 7, 3)|var|int64
const_3836 = relay.const([[[7,6,2],[3,-3,-2],[10,4,3],[-3,1,-7],[-7,1,9],[2,8,9],[-9,10,9]],[[-2,-3,-2],[4,5,-3],[2,-9,1],[-7,-3,-2],[-8,3,5],[-10,-4,5],[9,-3,7]],[[-1,5,-4],[-8,-1,9],[-3,4,-5],[-9,-6,-9],[-1,2,-5],[2,-8,5],[-3,-6,-2]],[[-8,9,3],[1,-10,5],[9,8,-1],[-8,8,-10],[-9,-6,9],[-7,-4,-9],[2,-9,8]],[[-2,1,6],[-10,3,-10],[10,9,-4],[3,5,10],[4,-5,-4],[6,-10,5],[-7,2,-4]],[[-4,-4,10],[1,-9,-3],[-2,1,-8],[2,1,1],[8,3,-9],[-4,1,5],[-6,-9,5]],[[-6,-8,4],[-3,2,-8],[2,-10,-8],[1,-1,2],[8,-6,-6],[8,8,10],[4,8,-9]],[[-10,4,7],[-10,-6,5],[-8,-7,-9],[-5,-5,-4],[7,-10,5],[-1,2,8],[9,-10,-8]],[[-4,-7,1],[4,-4,1],[3,8,-2],[3,-10,3],[6,4,9],[-10,-10,-4],[4,9,8]]], dtype = "int64")#candidate|3836|(9, 7, 3)|const|int64
bop_3837 = relay.add(var_3835.astype('int64'), relay.reshape(const_3836.astype('int64'), relay.shape_of(var_3835))) # shape=(9, 7, 3)
output = bop_3837
output2 = bop_3837
func_3845 = relay.Function([var_3835,], output)
mod['func_3845'] = func_3845
mod = relay.transform.InferType()(mod)
var_3846 = relay.var("var_3846", dtype = "int64", shape = (9, 7, 3))#candidate|3846|(9, 7, 3)|var|int64
output = func_3845(var_3846)
func_3847 = relay.Function([var_3846], output)
mutated_mod['func_3847'] = func_3847
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4120 = relay.var("var_4120", dtype = "float64", shape = ())#candidate|4120|()|var|float64
var_4121 = relay.var("var_4121", dtype = "float64", shape = (1, 5))#candidate|4121|(1, 5)|var|float64
bop_4122 = relay.divide(var_4120.astype('float64'), var_4121.astype('float64')) # shape=(1, 5)
func_3566_call = mod.get_global_var('func_3566')
func_3569_call = mutated_mod.get_global_var('func_3569')
var_4126 = relay.var("var_4126", dtype = "int32", shape = (64,))#candidate|4126|(64,)|var|int32
var_4127 = relay.var("var_4127", dtype = "float64", shape = (672,))#candidate|4127|(672,)|var|float64
call_4125 = relay.TupleGetItem(func_3566_call(relay.reshape(var_4126.astype('int32'), [8, 8, 1]), relay.reshape(var_4127.astype('float64'), [672,]), ), 1)
call_4128 = relay.TupleGetItem(func_3569_call(relay.reshape(var_4126.astype('int32'), [8, 8, 1]), relay.reshape(var_4127.astype('float64'), [672,]), ), 1)
func_790_call = mod.get_global_var('func_790')
func_794_call = mutated_mod.get_global_var('func_794')
var_4132 = relay.var("var_4132", dtype = "bool", shape = (2730,))#candidate|4132|(2730,)|var|bool
var_4133 = relay.var("var_4133", dtype = "float64", shape = (15, 4))#candidate|4133|(15, 4)|var|float64
call_4131 = relay.TupleGetItem(func_790_call(relay.reshape(var_4132.astype('bool'), [14, 13, 15]), relay.reshape(var_4132.astype('bool'), [14, 13, 15]), relay.reshape(var_4133.astype('float64'), [60,]), ), 0)
call_4134 = relay.TupleGetItem(func_794_call(relay.reshape(var_4132.astype('bool'), [14, 13, 15]), relay.reshape(var_4132.astype('bool'), [14, 13, 15]), relay.reshape(var_4133.astype('float64'), [60,]), ), 0)
bop_4144 = relay.bitwise_or(call_4131.astype('int16'), var_4120.astype('int16')) # shape=(14, 13, 15)
bop_4147 = relay.bitwise_or(call_4134.astype('int16'), var_4120.astype('int16')) # shape=(14, 13, 15)
func_3253_call = mod.get_global_var('func_3253')
func_3257_call = mutated_mod.get_global_var('func_3257')
const_4163 = relay.const([10,4,7,-7,-3,-9,4,-1,7,-9,8,7,5,3,1,-7,-1,2,-2,-1,7,-8,-2,-1,4,-2,-1,-2,-2,-6,-6,-5,-3,7,3,-2,5,-3,-10,-6,4,7,-4,-2,4,1,-2,-9,1,-10,-3,7,4,-5,-6,-9,8,8,4,10,9,-10,-8,-5,4,-7,2,6,-6,2,-1,-4,8,-3,-1,2,6,2,2,7,5,-4,-10,4,-1,-7,9,3,1,-2,1,-2,-10,1,2,-10,1,-5,-6,6,7,-2,-7,6,1,2,-5,-8,-1,-7,-8,1,4,-2,-6,10,6,-10,6,-10,-5,10,-9,5,9,2,-10,9,-2,6,1,-3,-5,9,10,-2,-4,-5,3,4,9,-9,10,4,-1,1,-4,3,7,5,-3,-2,-9,1,-4,-4,-10,5,3,3,-10,9,1,5,2,-7,7,2,-6,-8,8,5,-4,-8,-10,10,7,3,-1,-8,-10,-10,2,-3,-4,1,10,10,8,1,-2,9,-2,9,-3,-6,10,8,-7,2,-1,-7,-9,-6,-6,-7,10,8,-10,-5,4,4,9,-7,4,-2,-2,-9,-6,2,-4,10,4,-9,-7,-5,-8,-6,-4,5,-4,-6,-6,9,-2,3,9,1,1,8,-4,10,6,1,1,-10,3,-3,-3,-10,-5,-10,-6,8,10,-7,10,6,-7,8,5,5,5,8,2,2,10,-4,10,-4,-9,-5,-2,7,-10,-7,4,-2,2,7,-7,-3,-1,-5,-8,-1,2,8,-7,-3,-9,-1,-6,1,4,-4,-7,9,-4,8,3,-9,-7,1,1,2,-8,-2,-7,-2,1,3,-3,-7,-7,8,-6,9,5,7,5,5,-2,6,10,-10,4,-2,-8,-5,-5,6,-2,-5,4,1,3,3,-5,-5,-8,7,-10,10,-7,2,-8,5,3,6,-4,-9,3,10,-10,2,-4,10,9,4,7,-7,-6,6,2,1,9,3,-1,-1,-10,10,3,9,-2,-7,1,-5,-8,-10,-10,-6,-10,-10,-2,3,3,7,5,-7,1,7,8,10,-2,-6,-1,1,1,-2,2,6,-9,1,-1,3,2,5,-4,6,5,-8,4,6,1,-10,-5,10,3,8,-2,5,4,4,5,4,1,6,1,1,-2,-9,-1,-1,-2,8,1,-10,3,3,-5,8,6,9,6,3,5,4,-1,-10,-3,9,-10,-1,4,-1,-10,4,2,5,-5,7,10,-6,6,4,-4,7,3,-9,3,-7,-8,9,6,10,-4,-5,-8,-3,-7,-8,-1,7,5,2,-3,-1,2,2,5,1,-9,-2,-7,3,-4,-9,10,-7,-9,2,-10,4,2,9,-8,-5,-9,3,-3,-4,-1,-10,-8,-5,7,-8,2,-8,7,-2,-10,-1,-5,8,3,5,-4,3,5,8,7,1,-7,-4,6,1,-2,-8,-7,6,-8,-1,9,4,-4,-6,-8,10,3,2,-9,-7,5,1,2,9,-10,2,-6,1,-9,-5,-3,-4,9,8,-1,1,2,6,-9,4,7,9,2,-5,7,2,5,8,4,-3,5,-8,8,-1,-1,6,-2,-1,-5,7,-8,-3,5,-8,9,1,-9,-1,5,2,8,1,-3,4,1,-9,2,-4,3,-5,5,-6,-9,1,-10,7,3,6,4,-5], dtype = "int8")#candidate|4163|(624,)|const|int8
const_4164 = relay.const([6,7,-2,3,-5,-7,5,10,9,9,8,6,9,5,-7,-9,4,2,-8,-5,-3,4,8,2,-5,-3,-6,-6,1,10,-2,10,6,-3,-4,5,-1,-5,-4,6,9,-2,-2,-1,-2,10,1,9,9,10,-10,-1,6,2,3,1,1,9,2,6,-3,9,8,9,-1,3,6,4,1,3,-8,-8,-10,2,-8,-7,7,-5,5,4,-3,-9,4,10,-1,-1,-9,-8,7,10,-8,-8,-4,-2,5,5,7,-6,9,-6,8,1,-6,4,-7,-1,-1,2,2,-4,-3,4,7,1,-5,-8,6,-10,-8,-6,-1,2,7,-9,1,5,-4,-4,-8,-7,-5,8,4,-2,2,-7,-6,-5,4,-2,-7,1,-4,4,-1,7,-6,7,-2,-4,8,9,2,-9,-8,-3,5,-8,-8,-3,3,-7,6,3,-3,-4,8,-7,9,-7,4,-4,4,10,-6,3,6,2,-1,1,10,7,1,10,-9,-7,-9,-3,-6,-4,-5,-4,4,2,9,-3,1,10,-5,3,7,8,2,-8,-2,1,-9,8,-8,-1,4,-9,6,-10,-10,-5,-3,-3,-4,-3,3,-4,8,-6,-2,5,-4,2,4,1,5,10,-10,-2,4,-1,-9,9,-6,-4,-3,4,-5,-9,10,-10,-7,10,-3,-4,-10,-4,-9,-6,8,-3,1,10,6,3,-9,-1,-5,-6,5,-5,-4,-4,2,5,-2,-2,-8,8,-2,-9,8,-9,-3,1,-4,3,-7,-10,6,8,-6,10,-5,-7,1,-9,-8,-2,-5,8,-1,-7,7,7,5,-1,8,-4,-2,-1,8,2,10,4,-6,5,1,-6,-3,2,-10,6,6,10,-2,-1,-1,-4,-4,8,-1,7,-9,2,6,8,7,-6,6,1,7,6,-4,2,-1,9,-3,3,9,-2,9,3,-5,-1,4,-1,-5,-10,-9,8,-3,1,-3,-8,10,-7,3,7,8,-1,1,3,10,6,8,-9,-2,8,5,-8,-7,5,7,-10,-9,7,-2,5,-6,3,-6,-4,3,4,8,-4,-6,-7,-9,8,-9,-8,-5,-4,4,6,8,-8,2,10,3,8,-10,-4,3,1,-9,2,-1,-7,-2,7,-3,-2,9,8,5,-3,3,8,-1,8,7,4,-6,5,5,1,-10,-4,4,-1,10,-6,3,-8,10,-4,8,6,-10,4,-4,-3,8,3,3,-1,-10,-5,10,9,3,-8,1,5,-5,-7,5,-5,-9,-5,4,5,-4,9,6,-5,-1,-10,-6,-4,-5,4,-2,5,7,6,-9,-7,1,-8,-6,-8,5,-9,-4,-4,5,10,-6,1,-4,-7,7,-5,-4,7,-5,6,4,3,-10,6,-6,5,1,7,4,-8,10,9,-6,1,-1,3,4,-3,2,2,-6,-10,-6,10,-1,-8,4,4,-2,-3,-3,10,2,-4,3,-2,4,3,1,9,-6,4,2,1,-4,-1,-3,-6,6,-9,7,-7,-5,2,-8,9,-8,3,2,6,-2,-5,-9,10,-3,6,2,3,-8,5,-6,9,1,3,-9,9,7,-6,7,2,7,-9,3,-6,9,-6,-10,-10,-6,4,4,-7,-9,7,-1,5,-9,4,-8,-3,-6,3,-4,6,-6,7,8,-2,9,5,10,-5,-6,-3,3,-3,-4,4,-9,-10,-5,-6,-1,1,8,9,6,7,4,10,5,-6,-10,-7,-3,4,3,10,-8,3,5,-6,-5,6,-4,-7,-10,7,3,8,10,3,-4,7,-4,-10,2,3,-10,7,5,-2,-6,2,-3,-5,-2,8,3,-8,8,7,5,-9,9,8,1,7,-6,-9,1,6,6,1,-1,-6,8,-3,3,9,-10,-4,-4,-10,-3,-3,-5,-10,-5,10,-10,7,10,-3,1,-3,-9,-2,1,5,-3,8,7,10,-9,-8,-7,-6,-6,-9,3,8,10,-2,3,5,-8,-5,1,7,-8,-8,1,-5,7,3,-8,9,-2,1,10,3,-10,-3,6,10,6,-2,-6,-7,10,10,-3,-6,-9,10,4,9,4,5,-3,-5,-5,-9,1,-3,-6,-9,-1,3,1,-1,-9,-8,-4,2,-10,-8,3,7,3,-4,-2,-7,-7,2,4,-6,-6,5,-9,-7,3,5,5,1,-3,-7,10,-7,4,9,-5,-10,-9,-10,1,7,-7,1,8,1,9,-8,4,5,7,6,9,2,3,6,3,10,-8,1,-3,9,2,8,-3,2,9,3,-5,7,8,4,7,-3,-4,-10,9,-6,7,5,-1,3,6,-9,10,1,-7,1,-8,10,-9,7,-2,-6,-1,10,-7,-3,8,6,-7,-5,-3,-10,-9,10,-1,-3,-2,-1,-10,-4,-5,-4,8,-10,-8,-9,1,1,-8,-7,8,1,1,-4,6,-1,-4,3,-4,4,7,-2,-3,-8,4,3,7,3,-7,-10,4,5,4,-1,-10,-2,-10,-5,7,-7,1,4,-3,8,5,-6,-9,8,-6,4,4,5,10,9,7,10,-6,-6,3,-1,-1,-9,8,4,8,2,-5,8,-10,3,-2,3,-9,-7,2,1,6,2,9,8,5,9,-8,5,3,3,-3,3,5,4,-1,1,-7,1,-10,-1,-8,6,7,-4,-1,4,-5,-8,9,10,-9,7,-3,-1,-7,9,-5,3,-8,10,6,-3,-5,5,-3,3,-7,9,9,4,-4,-1,-10,1,-1,-5,-7,2,-1,5,2,-7,10,-9,-8,3,6,1,8,3,-2,-8,9,2,-5,-6,-7,-5,9,-4,-9,-8,-10,-2,-8,-8,3,1,4,-2,10,-9,10,-2,8,-7,2,1,-4,-10,7,-5,4,2,7,8,-1,4,10,4,1,-6,-7,-7,-9,-7,5,-7,-8,-6,3,2,-2,7,2,2,3,10,-5,4,4,-2,-1,-7,-8,-4,8,8,4,-1,-9,2,9,3,-9,-7,6,3,8,8,2,10,-8,9,6,-10,3,6,-6,-5,5,9,3,1,-1,-9,1,-4,-10,2,-4,-8,6,6,-2,-6,-3,8,-6,-9,-8,-1,-10,9,-9,5,-3,8,-8,1,5,4,-10,-6,-1,-3,-3,-7,9,-4,-7,10,3,-1,-4,10,-8,9,-7,4,2,-5,2,-10,8,-9,-7,6,9,-1,-8,10,5,5,6,8,-9,-3,-6,1,-8,-10,-1,5,4,1,-8,9,2,-3,-3,6,-5,4,3,9,8,-8,-8,9,10,-5,10,-2,-5,-3,-8,-4,-8,-8,4,4,-7,-2,-5,8,-10,-4,4,-3,2,1,4,7,-2,5,-2,-9,-1,-7,-2,10,5,-2,-1,-10,-2,-7,6,2,-10,-5,6,-5,-7,-3,-5,-10,-10,-1,-9,6,-4,10,8,10,-9,-2,1,3,-10,-8,1,7,-2,2,9,-3,-2,5,-4,-10,9,7,-1,-9,-9,8,-5,-1,3,-10,-3,7,7,7,-6,2,3,7,-2,-7,-1,10,9,-5,-5,5,10,-3,-6,6,-9,7,-2,8,-1,6,9,10,-5,10,-1,-8,-9,-6,1,-6,4,2,10,-1,-4,-2,1,1,-6,6,6,-8,4,7,-8,4,8,8,-8,6,-4,-5,10,-2,6,4,1,6,-6,1,-8,7,-2,4,4,10,-8,-4,10,5,-4,-10,10,2,-1,-1,-7,4,3,-7,-8,6,3,-2,-4,1,-5,4,-4,-3,-9,-3,5,4,-7,-5,-10,-1,-1,-6,-10,-4,5,-4,4,6,-4,-10,8,6,-4,10,-2,-7,-4,7,-9,2,-8,-4,4,8,9,-6,1,-4,-3,-1,5,-7,2,-6,-4,4,5,-6,8,-6,3,7,5,1,8,-2,-1,-4,10,3,-8,-6,6,1,-8,-4,10,7,3,-1,3,3,-2,-8,-7,-6,9,-8,-6,1,-6,8,-6,-1,-4,-9,-8,2,1,2,-2,-3,-2,6,-9,-3,3,1,6,-10,6,9,4,-2,3,3,2,-6,6,-2,2,10,-9,-5,-2,-9,-4,2,2,-3,8,10,-1,-6,-10,-3,-8,-8,-5,3,-9,6,1,-3,2,9,1,1,8,10,10,10,8,4,-10,1,-9,3,4,2,2,-7,-1,-7,-8,6,-4,-7,-4,-6,-7,-6,-5,-6,-4,5,2,-1,2,1,-6,-9,7,3,-6,8,5,2,2,8,-8,4,-5,-2,-2,7,4,-8,-2,2,9,3,-3,-3,3,-3,-4,-1,-1,-6,-8,2,-10,2,-1,-10,-4,4,6,-4,-7,-1,5,10,5,-10,-10,6,5,2,2,-6,-4,8,8,-10,1,7,-3,4,2,2,6,-2,6,7,-3,-8,7,-7,-10,-1,-8,6,5,1,4,1,-3,-3,4,-1,-4,6,-5,-6,1,5,-6,-5,1,-10,1,-6,-2,-5,8,-5,-5,4,5,-2,-9,-8,-7,8,8,4,-9,4,-7,8,-5,8,6,-7,-3,-7,-7,7,-7,4,3,5,-10,3,-7,5,-6,1,6,-2,8,-1,-4,1,-5,7,4,-8,-10,-4,-2,9,1,-1,-8,7,-2,-3,9,8,-10,2,4,10,10,10,-2,-3,9,-1,-7,-4,-9,7,-10,3,-9,-6,4,-6], dtype = "uint16")#candidate|4164|(1728,)|const|uint16
call_4162 = relay.TupleGetItem(func_3253_call(relay.reshape(const_4163.astype('int8'), [8, 13, 6]), relay.reshape(const_4164.astype('uint16'), [2, 864]), relay.reshape(const_4164.astype('uint16'), [2, 864]), ), 2)
call_4165 = relay.TupleGetItem(func_3257_call(relay.reshape(const_4163.astype('int8'), [8, 13, 6]), relay.reshape(const_4164.astype('uint16'), [2, 864]), relay.reshape(const_4164.astype('uint16'), [2, 864]), ), 2)
func_1573_call = mod.get_global_var('func_1573')
func_1576_call = mutated_mod.get_global_var('func_1576')
const_4167 = relay.const([6.897367,5.791462,8.709011,5.985018,-5.529451,7.912335,-4.490266,-7.980569,8.955891,-3.776697,3.537082,5.675770,-5.869541,7.950910,1.956750,5.310006,7.081000,4.973852,-7.362858,-0.732233,8.323785,-5.352604,7.410618,-1.598012,0.302228,-2.596556,4.465031,-2.469684,-3.601232,-9.336263,-9.587500,-6.250834,-5.652141,5.242657,0.353908,-7.247029,5.221208,-4.063573,5.891425,1.185377,-3.055814,6.740381,-0.751463,5.099035,9.544523,-2.018928,8.585567,-3.818144,-5.246552,8.529333,5.513242,-1.212865,-2.445965,0.399850,-2.054804,-8.232744,-4.674815,-5.760172,7.789397,-4.035328,0.769781,5.672284,8.332147,7.577294,3.910661,9.704770,-3.022646,7.131577,0.374749,-9.546067,-0.839136,-3.507448,-3.028088,4.229728,-5.879169,6.685895,-2.591168,7.173885,-6.049601,9.510238,4.986852,-8.249150,2.927084,-5.836495,7.005466,-0.464802,6.805245,-2.525102,6.486605,7.774617,9.677014,-0.551047,6.466049,-9.740077,-2.504944,0.975685,-1.836881,0.637029,-2.401426,-7.029870,-7.523232,1.726062,3.707894,8.266893,3.030203,8.049291,7.590393,-4.526709,9.883345,-6.040682,-1.402365,9.532355,-5.580460,-4.360000,-8.941348,-0.266446,3.438049,-5.979709,2.069634,-8.335793,-8.674541,-4.026703,9.880501,6.570507,6.022408,-7.890893,3.400925,-3.638427,-4.181327,-0.265627,-5.014682,4.569441,-3.284948,-5.295757,5.231350,-9.319821,-0.282047,-5.072775,1.327359,-0.587001,9.600181,7.944698,-4.103373,-1.934991,-0.412165,4.939422,6.573957,1.800221,-4.421729,-6.373032,-3.640075,-2.869260,8.267070,-9.197311,-0.895339,4.302155,8.542562,-4.526455,-5.593435,-8.438439,-3.666581,1.886192,-3.254464,7.151023,3.344693,-8.059351,0.576620,-1.537958,0.741661,1.592570,-2.611596,-5.810413,9.123289,9.540778,6.195502,3.027407,-7.349673,-1.199836,6.112978,8.088841,3.957858,-1.116113,-2.721976,5.467799,8.143772,1.551685,0.875601,3.533966,4.800073,-9.262670,-2.965717,-1.627630,9.936132,4.559709,-7.765201,1.720245,-3.680430,-2.215508,-8.160745,0.630614,5.364552,8.183357,-8.320682,6.322192,-6.649151,-5.850890,2.060262,7.034932,3.453192,4.658609,5.958496,5.499472,-0.531238,0.768869,1.144186,-5.827337,1.533335,9.250278,-5.562006,8.366992,3.989178,9.804930,-2.527743,4.317459,3.335365,-6.735635,6.391037,0.956352,0.704326,-0.525034,5.190075,7.266204,5.506437,-4.277082,-4.033437,-7.830383,5.632914,-3.326714,-2.929797,-2.997417,4.764495,-7.376565,-4.410979,-5.130405,-9.085789,7.537885,-8.856953,4.857735,9.276693,4.286889,0.916293,3.299299,-4.305805,1.404912,8.121378,-9.501929,-6.719389,7.765282,-2.262231,-1.190428,7.380178,-3.712935,4.935491,6.120029,0.158433,-7.067990,-6.124838,-5.302165,3.018048,8.096941,9.034425,1.661131,-9.236804,-4.111652,1.041901,-2.296019,-3.828651,-2.519433,-8.114990,7.361261,-6.047583,-9.407466,0.004716,4.367842,-9.837176,-3.873952,4.712345,0.922294,-1.614444,-7.394932,1.850742,-5.802838,-0.619946,2.321462,-3.932494,-4.920185,-1.050727,1.337069,7.880988,-3.184335,6.526256,7.933255,9.672949,4.292713,1.630460,0.836189,-5.965522,-8.359895,-5.221346,5.802391,-3.249527,0.489207,-9.592846,1.778076,-3.300131,-8.314034,-9.884218,-0.326343,-4.003966,1.786189,1.345476,-0.785632,0.493443,-9.979086,-0.209713,-5.028775,-0.411917,3.576128,4.041921,-6.337147,4.203872,3.219205,4.030529,9.200349,6.195403,1.630005,4.234099,-4.989929,-6.937455,-6.751236,-9.025086,-8.596155,-8.628923,-4.695145,-2.581218,9.785792,8.502626,0.759245,-2.919529,-3.008630,0.312281,9.724424,-7.719322,4.266909,-5.616225,2.543002,6.998573,3.170680,-5.479002,5.691712,0.162305,-0.653874,0.728877,0.176628,-9.844041,-9.491557,5.075360,-1.863411,1.801500,-2.522959,0.736549,4.779837,3.141575,-0.413783,-7.135500,-4.665771,7.668353,-2.560832,-1.237507,-9.633349,9.155757,4.077920,-0.384459,-0.680728,0.202126,-0.379794,2.054499,9.297730,-9.024097,-0.322675,0.597281,-4.598921,2.990975,-5.181125,-5.065589,-6.840000,9.917205,-4.134130,8.653416,7.319755,-4.897452,5.267571,8.815605,-5.802374,-1.171156,-1.658243,-0.423815,-2.646390,8.083483,4.623815,-1.672660,-5.075292,7.924408,2.275298,6.525526,-3.352841,-0.780031,3.531537,-2.173661,-8.647251,-4.132435,5.239743,2.961761,-5.980032,-2.865759,3.035621,0.822869,-3.318259,-5.586714,2.593145,-9.871921,1.413756,1.842229,3.155021,7.217004,2.456952,-8.163212,-4.122601,-9.481988,8.527741,-7.756367,3.038229,-2.012940,9.792199,-5.833035,-3.493462,-0.532986,9.843763,8.779202,1.943399,-8.781525,-8.246876,2.563786,4.671095,-9.877152,-1.128303,0.747478,-2.894107,6.696229,-9.827226,1.367520,1.975984], dtype = "float32")#candidate|4167|(462,)|const|float32
call_4166 = relay.TupleGetItem(func_1573_call(relay.reshape(const_4167.astype('float32'), [6, 7, 11]), relay.reshape(const_4167.astype('float32'), [6, 7, 11]), ), 2)
call_4168 = relay.TupleGetItem(func_1576_call(relay.reshape(const_4167.astype('float32'), [6, 7, 11]), relay.reshape(const_4167.astype('float32'), [6, 7, 11]), ), 2)
func_661_call = mod.get_global_var('func_661')
func_663_call = mutated_mod.get_global_var('func_663')
call_4169 = relay.TupleGetItem(func_661_call(relay.reshape(var_4126.astype('float32'), [1, 8, 8])), 0)
call_4170 = relay.TupleGetItem(func_663_call(relay.reshape(var_4126.astype('float32'), [1, 8, 8])), 0)
output = relay.Tuple([bop_4122,call_4125,var_4126,var_4127,var_4132,var_4133,bop_4144,call_4162,const_4163,const_4164,call_4166,const_4167,call_4169,])
output2 = relay.Tuple([bop_4122,call_4128,var_4126,var_4127,var_4132,var_4133,bop_4147,call_4165,const_4163,const_4164,call_4168,const_4167,call_4170,])
func_4174 = relay.Function([var_4120,var_4121,var_4126,var_4127,var_4132,var_4133,], output)
mod['func_4174'] = func_4174
mod = relay.transform.InferType()(mod)
mutated_mod['func_4174'] = func_4174
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4174_call = mutated_mod.get_global_var('func_4174')
var_4176 = relay.var("var_4176", dtype = "float64", shape = ())#candidate|4176|()|var|float64
var_4177 = relay.var("var_4177", dtype = "float64", shape = (1, 5))#candidate|4177|(1, 5)|var|float64
var_4178 = relay.var("var_4178", dtype = "int32", shape = (64,))#candidate|4178|(64,)|var|int32
var_4179 = relay.var("var_4179", dtype = "float64", shape = (672,))#candidate|4179|(672,)|var|float64
var_4180 = relay.var("var_4180", dtype = "bool", shape = (2730,))#candidate|4180|(2730,)|var|bool
var_4181 = relay.var("var_4181", dtype = "float64", shape = (15, 4))#candidate|4181|(15, 4)|var|float64
call_4175 = func_4174_call(var_4176,var_4177,var_4178,var_4179,var_4180,var_4181,)
output = call_4175
func_4182 = relay.Function([var_4176,var_4177,var_4178,var_4179,var_4180,var_4181,], output)
mutated_mod['func_4182'] = func_4182
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4186 = relay.var("var_4186", dtype = "int64", shape = (15, 5, 7))#candidate|4186|(15, 5, 7)|var|int64
const_4187 = relay.const([[[9,10,1,-5,5,-3,1],[5,2,8,-3,4,2,-3],[1,-7,-5,-4,-9,9,8],[-8,-7,-4,-4,6,7,9],[2,-2,-7,-5,4,-9,2]],[[-8,7,7,6,5,-4,-7],[3,-10,-8,-9,-1,-5,8],[7,-1,8,10,4,-7,-4],[-1,1,7,-8,4,-9,-4],[10,-10,1,4,9,-5,8]],[[3,-4,-4,-8,-6,7,-6],[7,-3,-3,3,-2,3,1],[-4,1,-2,2,10,7,8],[10,-10,-5,1,4,2,-3],[9,3,2,1,-1,-9,4]],[[-10,10,6,4,-5,-9,-1],[6,6,-9,-1,4,-4,-6],[7,1,-4,-5,2,-2,-4],[-7,2,2,-9,6,3,-3],[-5,2,-10,-9,-3,-5,-6]],[[2,-7,-9,-2,-4,2,-2],[-2,-6,5,10,10,-10,-6],[9,-1,3,2,9,-3,-7],[-5,-1,-6,-3,-4,6,4],[8,10,-3,-8,3,8,-6]],[[-4,-5,-3,-3,5,10,9],[-5,2,3,9,-5,2,-9],[-9,-1,-7,10,-5,1,-1],[9,-6,2,-8,-2,-1,-5],[6,-5,-8,-7,-3,5,2]],[[-7,-6,2,3,-4,9,7],[4,4,6,4,-6,-9,8],[8,-1,-2,3,2,9,6],[-1,-9,5,-2,3,-2,-7],[-7,-6,-4,1,-5,3,2]],[[-3,-8,-1,7,10,-4,-7],[1,9,10,2,6,3,8],[9,6,8,6,10,-5,5],[3,-8,-8,2,-6,-4,-10],[4,-1,-9,6,-2,9,8]],[[-4,5,-6,2,4,2,2],[2,2,-9,-8,-1,-10,-9],[-5,-4,9,-6,4,7,-4],[8,6,8,-4,5,7,-10],[-9,5,5,2,-9,-7,6]],[[1,-4,8,6,1,2,6],[2,-8,5,6,3,2,-6],[-4,-2,6,1,7,7,9],[-4,1,-3,6,10,-5,-9],[4,-7,-10,3,-6,-8,-4]],[[-3,-6,-10,-4,4,8,-3],[9,-2,-7,-3,-10,5,-1],[-3,9,7,-4,2,7,-7],[2,-10,1,-5,-2,9,5],[10,-8,10,-8,3,-4,-9]],[[3,-6,5,7,9,-6,2],[-5,-7,2,7,-3,9,-6],[-4,-3,-10,-1,6,-2,-2],[8,-2,-1,-7,6,-7,10],[6,-8,-8,7,-10,4,10]],[[1,-2,8,-1,7,-1,5],[-2,3,-8,10,2,7,-8],[5,6,-2,4,-4,-6,-6],[-2,7,5,-5,3,-10,-5],[-4,-7,2,7,-2,3,-8]],[[7,-8,-7,4,-8,-5,-4],[-3,-4,-3,8,-2,9,-5],[-10,-1,-9,5,-5,9,9],[4,1,-2,6,3,1,6],[1,-2,6,-7,4,2,10]],[[5,-5,3,-4,-10,2,-4],[-1,5,-4,3,4,-7,-2],[8,-10,1,1,3,1,-8],[1,8,-2,5,1,8,-8],[4,3,1,-6,-1,6,-2]]], dtype = "int64")#candidate|4187|(15, 5, 7)|const|int64
bop_4188 = relay.logical_xor(var_4186.astype('int64'), relay.reshape(const_4187.astype('int64'), relay.shape_of(var_4186))) # shape=(15, 5, 7)
func_3632_call = mod.get_global_var('func_3632')
func_3634_call = mutated_mod.get_global_var('func_3634')
const_4197 = relay.const([1,2,8,6,-7,3,9,4,6,6,-1,-10,4,-7,10,-1,3,-6,-5,9,9,-2,5,-2,5,5,-6,8,6,5,9,-8,-9,-3,7,6,3,-4,5,7,6,5,1,-4,-1,3,-4,4,5,8,7,-10,2,-7,2,7,8,-1,-7,5,3,10,1,1,-9,-2,2,7,7,-1,9,-10,1,-5,-8,6,2,-1,10,-1,-2,7,6,-8,-7,-4,6,-3,-3,5,1,-3,9,-8,-7,-10,-3,-10,1,1,-6,2,7,1,6,-3,1,-1,-1,1,-9,4,-10,-2,2,-8,-8,-2,-8,7,1,2,-8,-4,2,-5,-8,7,-3,8,-2,-6,7,-7,3,8,4,7,10,10,-7,-7,4,-3,-2,-4,5,5,10,-4,6,6,-1,3,-4,-7,6,4,-7,6,-5,-4,-10,2,-10,2,10,5,3,-5,9,-6,6,-6,6,-10,4,-3,2,-6,-4,8,8,-7,1,10,4,6,7,-10,-6,5,-6,-4,-6,1,-9,-5,-4,10,6,5,5,9,5,-6,-2,9,-3,-8,-1,10,10,9,-10,9,-10,-6,-10,-8,4,6,-6,6,7,-8,-5,-2,-6,8,1,-3,-4,5,-6,8,8,-6,8,4,7,8,2,4,-1,5,-2,1,7,-9,-1,-3,-9,-3,-2,-4,1,-1,-2,-1,9,-2,-4,6,-3,6,-2,-4,9,-9,6,-2,-5,-10,-9,-7,8,-1,4,-6,4,2,-3,6,4,7,-9,7,-1,9,1,-10,7,1,-9,-2,-3,7,-9,-7,8,-2,-2,-9,7,5,-7,-7,6,-10,9,8,-4,-5,9,5,8,4,-8,7,4,5,8,-8,2,-9,-9,2,-5,-6,2,4,1,-2,-5,-6,10,10,7,-2,5,-1,-10,8,1,2,7,3,-3,7,-3,-7,-8,1,-7,4,6,-8,10,4,10,-5,1,5,5,2,-6,-3,7,2,6,-8,3,1,-2,3,8,-8,-7,4,4,-10,-6,7,-6,9,-4,6,-3,-9,9,-6,1,7,7,-10,7,9,2,9,4,-1,7,6,-2,6,8,-10,5,8,9,3,7,-3,10,6,2,-2,5,-8,4,8,-5,4,-8,-4,-10,6,8,8,-1,-2,4,-9,-6,5,10,-4,4,9,-2,-10,9,-2,3,-7,-6,5,-6,6,3,2,5,-10,-7,10,1,2,5,-1,3,5,8,9,6,6,9,3,-7,4,2,-1,-3,5,6,8,-3,-1,5,-4,9,10,-9,1,-8,8,-8,-2,-4,1,-4,-1,4,-7,6,-1,1,-1,4,6,9,-1,5,-10,-2,-8,1,-3,-5,-5,-2,-4,-6,5,10,-4,-7,6,10,-10,-6,-3,10,-4,-6,6,3,-3,6,1,-1,-5,-3,8,-8,8,-9,-2,6,-5,-5,2,-2,7,5,6,-6,-2,-3,-2,1,4,2,-10,-2,-3,-8,2,-2,-10,10,10,-6,-5,-5,7,-7,-7,-6,9,5,-4,-7,-3,-7,5,-8,3,7,2,-5,9,1,-4,4,7,-5,2,-9,-2,-9,-6,-2,-2,1,1,4,-9,-6,6,-6,9,5,-3,6,5,-2,4,-1,3,2,-7,5,-5,-9,-3,5,-6,3,7,7,-9,-2,-3], dtype = "int8")#candidate|4197|(624,)|const|int8
call_4196 = relay.TupleGetItem(func_3632_call(relay.reshape(const_4197.astype('int8'), [312, 2])), 1)
call_4198 = relay.TupleGetItem(func_3634_call(relay.reshape(const_4197.astype('int8'), [312, 2])), 1)
output = relay.Tuple([bop_4188,call_4196,const_4197,])
output2 = relay.Tuple([bop_4188,call_4198,const_4197,])
func_4200 = relay.Function([var_4186,], output)
mod['func_4200'] = func_4200
mod = relay.transform.InferType()(mod)
mutated_mod['func_4200'] = func_4200
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4201 = relay.var("var_4201", dtype = "int64", shape = (15, 5, 7))#candidate|4201|(15, 5, 7)|var|int64
func_4200_call = mutated_mod.get_global_var('func_4200')
call_4202 = func_4200_call(var_4201)
output = call_4202
func_4203 = relay.Function([var_4201], output)
mutated_mod['func_4203'] = func_4203
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4208 = relay.const([[[8,8,3],[7,1,6],[10,-7,-4],[4,2,6],[2,7,3],[-10,5,7],[3,5,5]],[[-1,7,6],[7,-7,-3],[-6,-10,-8],[6,-5,6],[-10,7,-5],[7,7,-6],[-7,2,-1]],[[-4,1,4],[8,9,-3],[-7,-6,-8],[-7,8,1],[9,-8,-4],[8,-8,4],[10,1,5]],[[-4,7,-7],[4,-2,-1],[10,-2,9],[-7,-6,5],[6,1,-5],[-3,1,3],[-7,-3,1]],[[3,-4,-8],[-3,-1,10],[8,-1,5],[-7,7,10],[-5,6,7],[4,9,-7],[2,-3,-8]],[[10,3,2],[9,8,-7],[-5,7,-2],[1,4,-5],[-8,-10,1],[8,-1,3],[8,-5,10]],[[-5,4,-8],[-8,-6,8],[3,10,9],[-1,-5,7],[-8,-1,-1],[4,-6,2],[7,-1,-2]],[[4,-7,1],[6,-4,-6],[8,-7,-4],[-10,8,7],[7,10,6],[-9,7,5],[-3,-10,3]],[[-1,10,1],[-8,-4,-4],[6,6,-9],[8,-1,5],[5,-8,-4],[-2,1,3],[-8,1,-9]],[[5,-6,3],[-1,5,-8],[-9,-8,-9],[-5,7,3],[-6,-3,2],[-3,9,-8],[-7,5,-3]],[[2,-5,9],[3,5,10],[2,-8,4],[-8,7,-6],[-4,-3,7],[-2,-8,-9],[1,2,2]],[[3,-9,-2],[2,-2,1],[-5,-3,2],[6,8,10],[-2,-9,-6],[-6,6,1],[10,10,-4]],[[10,-4,8],[4,9,-10],[7,-10,6],[-9,7,10],[5,-1,10],[6,5,-6],[7,8,9]],[[-4,10,5],[2,-10,1],[-4,10,1],[-1,1,-8],[-10,4,-2],[-6,1,2],[3,10,-10]],[[-5,-7,-10],[-2,-9,8],[9,-4,-5],[-8,-5,-6],[7,-9,-3],[9,-3,-3],[-7,5,-10]],[[-5,10,4],[8,-4,-2],[-7,10,-5],[-5,2,-1],[3,2,5],[-3,-10,2],[8,-7,10]]], dtype = "int32")#candidate|4208|(16, 7, 3)|const|int32
var_4209 = relay.var("var_4209", dtype = "int32", shape = (16, 7, 3))#candidate|4209|(16, 7, 3)|var|int32
bop_4210 = relay.subtract(const_4208.astype('int32'), relay.reshape(var_4209.astype('int32'), relay.shape_of(const_4208))) # shape=(16, 7, 3)
uop_4227 = relay.log(bop_4210.astype('float32')) # shape=(16, 7, 3)
output = uop_4227
output2 = uop_4227
func_4229 = relay.Function([var_4209,], output)
mod['func_4229'] = func_4229
mod = relay.transform.InferType()(mod)
var_4230 = relay.var("var_4230", dtype = "int32", shape = (16, 7, 3))#candidate|4230|(16, 7, 3)|var|int32
output = func_4229(var_4230)
func_4231 = relay.Function([var_4230], output)
mutated_mod['func_4231'] = func_4231
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4255 = relay.const([[[3.399279,-5.686112,2.652619,0.203433,-3.586610,-9.685569,-6.841012,-2.867464,5.035496,4.510888,-5.972626,-5.554806,6.400685,-6.011224,-2.662804],[-1.556616,5.614110,-5.354526,0.848930,6.071025,3.519661,-0.768025,9.448087,-8.423913,-2.985583,2.218985,6.304169,3.172659,9.272617,3.333106],[6.336403,0.944462,2.220541,-1.835594,0.818663,-7.882941,4.537810,-8.218714,4.289081,6.595304,9.940608,-8.241235,3.265359,3.529706,-2.737900],[-0.650417,-1.280799,-4.501718,-9.644948,-4.537348,-8.872214,-1.005644,-9.276337,-2.021458,6.881955,7.982956,-0.078037,8.201928,-1.469208,-4.111765],[-2.327735,-4.547914,-2.048612,-3.353929,6.464131,-5.628030,6.504588,-7.605156,-4.858281,6.169625,-0.349073,-5.055633,3.899048,-1.845253,-5.947257],[-3.365200,-7.750282,3.776598,8.525258,0.796609,-3.072913,5.144341,-5.168706,1.608671,-6.226673,-0.572320,-9.201254,-0.438448,-7.708628,9.714421],[4.807275,3.677933,-2.045694,4.604539,-4.946302,0.372164,-0.971533,-5.875282,-8.929074,2.096128,7.669372,5.352047,-6.714627,2.171548,4.565880],[7.534810,-2.524727,-0.066281,4.291270,-4.375414,-1.152968,2.403299,-7.799162,4.428466,5.654068,-8.763284,-2.072245,-1.553514,4.263800,6.095984],[-3.697695,6.036190,-5.658442,-6.656238,5.767323,5.338817,-4.149240,2.650376,7.826039,1.110463,9.415455,2.155703,6.378184,7.973206,0.099831],[8.841862,0.015617,-3.360244,-3.418575,-2.647070,1.681463,4.602500,-2.069966,0.417413,1.295572,-2.550869,-2.534024,-0.924731,-2.800010,-2.411964],[1.319741,9.822132,-3.925014,-7.027355,-9.777403,8.976295,-5.397311,2.830540,5.710837,-5.174647,0.374088,5.163151,-6.616302,-9.720270,6.628867]],[[-6.811348,-3.000517,-5.860301,4.680473,-8.462126,1.814740,-6.165548,-5.304943,-5.204110,-9.092575,9.832289,1.892595,3.411653,-1.742670,-0.838284],[-4.383928,-7.683572,2.104454,7.785279,7.268149,-0.564485,0.077903,6.929686,1.778521,1.127001,-5.145240,4.832719,-6.595364,-6.707121,-7.476649],[-9.008588,4.463478,-4.981494,4.695638,-5.730225,9.474636,9.876881,0.058119,-9.217886,-9.969524,-5.453823,-7.634610,3.027986,-3.947858,-7.330659],[-9.629857,0.744025,2.959226,-9.363301,1.177222,-8.386482,-8.175795,-4.280474,-1.676125,-6.340335,-5.052070,6.116484,-1.910036,0.549864,-6.399527],[-2.747849,9.691161,6.904591,9.150788,1.568485,-4.799607,1.740755,-2.406973,-7.269660,-8.076185,4.530543,3.238572,-4.923072,8.203981,-1.342879],[7.219059,0.347564,-5.492717,9.702428,-5.031221,-6.553823,-8.194837,7.895580,4.936505,0.189275,-2.301416,0.536480,-4.319890,-6.206738,8.199377],[9.555306,8.671250,5.265393,7.607209,9.412193,-2.063444,-1.363263,8.231188,2.200745,6.201998,-6.746484,2.610194,3.684239,6.721264,-3.895406],[-9.030603,3.084223,-7.579096,6.370611,-9.992812,6.743040,5.386717,0.874514,-2.238594,7.131020,-8.568485,3.381465,3.832971,6.286428,-8.433871],[-0.030269,0.774218,-1.322911,-3.250750,-9.116307,-9.381103,6.183346,7.603505,-8.813250,9.895641,-5.630910,-7.276716,-5.949903,-5.359384,-6.344379],[6.064294,-6.246880,3.917307,-1.521240,-2.012216,-0.123521,-5.039582,-4.113387,-9.111790,7.550277,2.086304,7.053896,-7.318350,8.652541,1.710886],[2.928690,-1.963401,-2.049856,9.660043,-6.025855,1.419965,-1.378677,-4.755747,3.197178,-1.877587,0.533509,-3.655828,1.147723,-5.404357,-0.828895]],[[-0.497531,-5.884215,4.327605,-9.604269,9.962020,-7.550440,6.645963,-4.569693,-1.787412,0.696095,0.125629,-6.373063,1.852365,-1.823125,-4.124811],[-0.510367,-8.998873,-0.285347,8.872717,-6.495960,2.277100,3.755739,-0.180941,-0.500229,9.066159,1.149305,-3.055750,1.420875,4.067826,2.978529],[-3.861940,-0.516150,-8.698026,-6.733769,-4.965103,-0.399223,9.451066,-0.888787,-0.321938,-4.141057,-9.807891,-0.342682,4.069674,2.354825,0.094420],[9.358804,-0.844980,-7.513474,-8.844559,-5.289278,-5.900005,-1.108259,-7.156783,4.601988,3.246869,-2.867093,7.775252,0.729397,-4.398814,7.196098],[8.056948,5.473209,-4.192797,9.398996,-8.816629,1.317216,-6.532331,0.969751,4.209649,3.665332,-3.575660,-8.990934,-1.595330,5.349654,-5.335141],[-2.415723,3.112335,8.251202,-4.348740,-6.844236,-3.843347,7.708018,4.321621,1.383189,9.855671,0.500111,4.323188,1.597145,8.985888,-7.602784],[8.064904,-9.686182,6.420961,-6.871244,-4.851818,-2.456014,0.482713,8.591552,-4.512585,9.574217,-9.339212,-3.559561,-5.689837,4.761564,-3.361919],[-6.638770,9.438159,-1.502005,-0.885519,-6.770571,8.378781,-9.092723,-0.160440,0.692400,-7.093691,-4.128839,0.997683,-0.078483,-2.940945,-7.599506],[-2.732270,-1.486953,5.113081,-0.278370,0.653824,-6.792018,3.811566,6.069848,-8.663858,2.072719,2.344731,7.086783,-3.559658,5.769799,-2.163381],[7.917100,-6.391980,-8.138405,-1.080185,8.929071,4.537677,-0.236989,-9.578803,-2.712938,-2.533571,-5.771514,5.630315,-1.246666,4.802110,-2.965807],[1.795295,-4.212545,4.711969,3.089438,0.952882,1.880891,-1.584790,-0.546514,-6.273735,-5.115401,-8.844893,-6.979888,-6.090812,9.931777,-4.662400]],[[9.486742,9.163925,2.594605,-8.199447,-3.967018,-5.436853,-9.746036,7.976460,3.959915,8.427788,-0.994323,-9.426564,4.333907,0.128281,3.342667],[-8.056197,-8.477210,-1.917691,-1.253277,-2.572842,9.164924,1.757473,-7.634427,-2.477480,-6.267284,5.730271,2.283248,8.854947,-4.669345,1.474363],[9.456724,4.011196,6.265708,3.732297,-7.408798,-6.984509,-4.005713,-5.029856,-6.931269,9.118710,-8.802739,3.818406,-1.116105,8.346675,9.075638],[-7.427793,-6.022788,-3.488433,-8.683276,-2.277559,-2.702521,-1.489730,-4.219986,9.367390,7.766083,3.130928,1.751424,1.754092,3.737888,-5.274192],[3.162896,4.564736,-8.447852,4.393067,-8.018333,-6.588501,-4.176403,7.642627,7.054787,7.004519,9.540160,-6.608156,2.559474,3.860918,-4.129001],[6.030189,-6.235804,-0.501604,5.639831,6.314518,3.368702,-9.401160,-5.853642,-6.445824,-1.068741,-1.919224,-8.193357,-9.364582,-8.405195,-6.533403],[5.506471,-6.746817,3.936689,0.142977,-3.986931,-4.441524,-4.677477,0.660397,-2.107820,-9.286142,8.613000,7.816831,5.959991,5.743350,0.803496],[7.893756,-5.756379,-8.567774,-8.292864,-2.410331,7.823690,-0.359077,2.997050,-3.209143,5.042675,-0.566868,-9.634529,-5.825454,1.870042,1.757425],[3.439563,8.006838,0.745680,9.775298,6.899358,-4.626221,-6.665812,-3.848854,1.971491,-9.017930,6.146882,0.399324,-0.619489,-6.559467,-2.727691],[-4.093547,-7.185276,1.296889,0.424430,5.670728,-1.644995,2.339546,-5.408246,-5.848398,0.749220,-4.388333,8.042146,-2.148834,5.923195,2.068361],[-7.696787,1.198343,3.849126,-4.852052,-9.897432,-7.456584,-3.771465,7.894467,9.450512,-3.105427,-4.778502,-6.502388,-3.829227,9.203946,5.484016]],[[5.794409,-1.163912,-4.367757,4.692093,4.826739,-1.715933,-2.702041,8.657536,8.201386,9.085698,7.743338,-2.801161,5.075364,-7.765604,-7.192722],[2.951551,-0.645057,-6.432309,-2.014128,0.201887,6.470591,1.041518,-5.544472,-6.306617,7.736838,5.280853,8.612378,-1.506558,5.858243,-9.295845],[-7.288924,8.938017,2.122772,4.045577,-0.698020,6.534659,-3.099546,3.734068,-8.889121,-7.984025,-3.804639,-8.255231,3.378721,-2.029776,-3.297506],[-3.277273,6.540344,6.147318,-9.545449,-2.643177,8.224249,-8.422515,-0.272757,4.738226,7.403381,-9.860693,4.970244,-9.888399,-3.563415,0.857506],[5.693936,7.858294,-4.520868,3.549844,-3.361423,2.341508,-0.436552,5.639752,9.235872,6.332145,9.751799,-2.616571,-0.792493,5.204035,-0.006463],[1.866339,1.255968,-5.849612,4.672895,-1.537311,1.473192,-9.495986,6.001906,-0.770156,-3.723105,-3.123023,8.109966,-2.658961,4.792222,-9.745883],[8.374647,9.458352,7.559571,-1.294830,1.601207,-4.259321,-4.531616,-1.644488,-8.478523,-2.825018,-8.799218,-6.183151,-7.870443,-9.389851,8.453185],[5.513105,-8.943282,6.468496,-0.995415,6.362086,-1.770295,-8.606106,-3.223799,-9.758536,0.510249,2.411737,3.244829,2.719562,-2.751796,6.549027],[3.561956,-0.107918,0.466417,8.105570,6.432119,-9.938604,-9.211655,-3.399187,6.570807,3.691895,-5.733070,5.181881,8.166083,6.623883,-3.666815],[0.273501,9.294415,3.020562,5.855681,-4.748168,5.058615,-8.414425,0.747748,-9.661937,2.382598,5.870675,-4.842664,-3.590788,5.158945,-7.315869],[-2.846530,7.516257,1.095142,8.797965,1.274456,-0.639142,-5.725799,-2.153538,7.582435,-5.215087,4.142834,-4.825816,-3.767211,0.935848,-0.846008]],[[0.775128,2.469466,-6.179428,-7.043525,8.462866,2.170577,-1.185079,-9.453520,8.175168,-3.988639,-1.203449,6.933927,8.812963,5.739076,-9.605508],[-0.325325,2.548636,-6.020307,8.458572,0.760589,7.595516,-4.181994,-4.589461,-1.357004,-7.844723,6.873498,-2.350767,-3.041530,6.410687,-7.876202],[2.954800,1.969600,-8.356927,0.183595,-5.070029,-8.363072,6.270192,-0.628746,0.746904,-6.773621,9.801383,1.723663,-4.351441,7.031187,5.975728],[7.940345,9.473446,5.474650,4.641064,0.395493,6.844728,6.869782,-0.021874,-9.313601,-7.367346,3.327089,5.260576,-8.657658,-6.872366,8.830985],[5.337319,1.135698,3.926396,2.200345,5.251161,0.531575,-4.314753,3.344767,-8.605525,0.875985,-7.085238,-3.820147,9.180515,-2.651050,-7.543672],[3.064860,-2.442123,-8.081788,-3.509096,-2.855427,-3.888087,-3.716964,-8.452899,8.625095,-2.972197,-8.928518,-8.796786,-8.310405,7.039865,5.881576],[-8.443052,8.486456,3.326710,-6.772587,6.763945,9.624020,-8.010367,0.399407,-3.809616,3.406613,1.749237,3.635629,-8.371582,0.389169,-8.732005],[-7.348190,3.700906,-6.986339,9.771043,-3.099863,4.313572,1.947856,-7.402899,8.019807,8.231428,8.155834,-3.538741,-0.200026,-5.040042,-0.687531],[8.824978,7.914051,-3.643847,8.336954,-8.709601,1.961924,-0.778756,-4.412990,6.303209,0.978552,-1.514287,7.830001,2.611438,-6.496650,1.671646],[7.025379,0.952343,2.462229,-4.479443,3.047507,7.647533,-4.607110,4.916247,-8.777619,-0.930982,-9.525269,-8.679323,4.145874,8.968055,9.481861],[-7.984403,7.362372,7.653708,-6.983717,-0.219884,-1.152242,-3.548146,0.425181,4.669075,-5.767519,0.298729,9.864018,-9.391625,0.962129,-9.621612]],[[-0.698687,5.553814,-7.606846,-6.625529,-8.379846,-2.862452,-7.931105,-0.622770,4.149996,3.695507,3.876373,-6.740041,-4.060570,-8.935336,-2.386125],[-8.507707,4.460685,1.476511,-1.762848,-7.725117,-6.982228,-2.514878,1.488641,-1.126669,-2.144700,-2.054504,-0.957697,-9.701708,8.595861,-8.322734],[1.081358,-0.563565,3.513832,-8.814924,-5.685309,-9.834187,-1.235491,5.578443,2.383015,-2.211469,-6.107428,-2.142526,4.211267,2.435086,7.846919],[-8.218079,5.155015,8.992894,-1.368258,-4.371339,8.639170,0.827458,4.879037,2.431691,-2.593821,7.633661,1.060769,3.092416,-0.298155,7.601243],[0.765811,6.799377,6.736256,2.703075,-1.145357,-8.663492,-9.669471,2.457086,-8.694663,1.317048,-4.022512,5.998147,-4.665906,-4.207095,-8.612767],[-7.181812,-3.292133,-5.387426,-6.883572,8.505395,1.393880,-8.437984,-4.452188,-2.454884,9.004500,8.103795,-7.098341,6.257841,-6.695033,8.598138],[3.816440,-2.959869,2.698848,0.667634,-4.975826,4.644541,-2.128158,9.369384,3.431160,-5.409522,3.299640,7.821651,-0.625560,-9.298433,-0.511218],[4.208817,6.712572,4.385241,-1.355907,1.025893,-4.045052,6.375725,-3.277565,6.239915,-0.396475,-4.252939,8.152944,3.150792,-3.608829,-1.314118],[8.622474,7.128378,1.974687,-8.774315,5.951827,-5.891954,-8.179711,3.313722,5.890828,-9.961638,-1.589338,0.668219,-2.790715,1.878210,8.957523],[-1.883158,-4.633735,4.076108,-9.687978,8.824067,5.542681,9.558126,2.103450,9.213210,2.178384,-5.774744,-9.828060,-8.136147,-9.696167,-5.383741],[4.940973,7.978034,-8.200606,-7.968556,-9.204990,-5.069539,3.653236,8.320613,-3.674284,3.084748,-1.858759,2.704655,-8.315257,-5.450713,-3.181462]],[[-3.665053,6.642480,3.064793,-7.940275,-0.149764,4.392264,4.677079,6.568522,-1.306131,2.655249,5.727033,8.569851,-7.388746,-2.116299,3.102698],[8.352424,2.140811,5.056477,-2.924960,-3.428137,-3.876742,-5.247845,-3.407375,-9.054897,6.239968,8.373862,2.993668,-3.580070,-5.294702,-5.767361],[9.439387,1.616787,-5.343350,0.959802,-5.913289,-5.555190,5.905760,-7.861276,-6.423364,-6.361288,-6.577387,-6.051497,4.538743,-4.888485,-9.779560],[0.818547,-3.557454,-4.719143,8.991332,-8.666442,9.742049,-4.492258,5.638038,-7.060379,0.001382,8.129119,-7.922367,4.015458,-1.237853,6.565460],[0.595429,-0.126441,0.782910,-3.646606,-6.499203,3.744626,8.406581,5.279561,-0.988087,-0.432109,-1.428323,-2.696197,-5.394306,-8.749587,2.805323],[8.356854,-3.623022,-3.521735,-4.003879,-0.803137,2.924773,-5.778351,3.184021,8.751289,0.562428,5.895118,-7.941750,5.940713,-4.826227,0.496360],[6.301811,-7.233082,1.765603,-4.189156,3.700550,-4.511901,-6.367133,-6.500960,-8.906710,4.062260,2.337962,-6.362492,-0.485111,-9.615595,3.105410],[-9.386078,-6.139563,7.508115,-5.950315,3.496445,-1.475389,-2.965461,-2.168851,3.991485,3.791732,4.815644,4.571273,-2.384998,8.232036,-7.846726],[-2.067224,3.311112,1.737588,-3.424423,-6.303555,-5.559840,-1.971336,7.097236,7.042004,3.049898,-7.652512,3.711080,-1.385442,3.566683,7.830013],[5.064565,3.367390,-9.153379,6.263974,-2.656260,3.477727,-1.607866,5.836779,-6.542105,-2.907656,7.635663,-6.425380,1.840481,-1.543535,-1.911678],[-3.989477,-4.442133,8.694510,5.790251,2.293874,-0.421611,-0.878273,-8.038036,3.915328,-8.242701,9.497938,-2.053121,-1.271869,-8.885969,-5.656956]],[[-2.537596,-9.741506,-4.540848,-2.840497,-7.835886,0.681355,-1.454517,-2.056885,-5.384751,7.096245,5.161734,-9.710531,7.024815,1.854005,-8.222677],[-7.722344,1.813728,8.066505,-1.420395,9.189664,8.931364,-4.443127,-4.122024,5.447479,-7.514636,4.670659,5.642463,2.331380,-6.662938,-7.509450],[-7.683890,-8.490982,-9.349713,-1.081024,7.646008,7.084144,-9.679833,-5.011355,-1.443129,3.579163,-9.568638,4.970551,0.269905,-0.080678,4.431304],[-5.055896,-0.649329,3.747094,-6.429871,7.794270,2.086825,-1.922090,-7.271415,-1.548791,-6.105196,0.348841,-9.419944,-7.967895,9.606459,-9.271504],[-6.575144,7.099913,7.857957,1.362370,-6.167094,6.689446,0.186071,3.063129,-5.273377,6.671167,-0.827226,6.863451,0.602767,-9.001996,2.922452],[4.783556,0.693765,-8.582304,-2.882607,-6.385204,-5.938558,-9.266413,8.910293,-5.767121,-5.353730,4.960589,-1.297426,4.683738,-8.159346,3.331417],[-5.399856,8.196757,0.896729,-9.709816,7.619007,-7.683013,-8.092163,-3.602316,-3.961548,0.172660,-0.278385,8.897872,-5.943673,-8.249649,-3.219447],[-5.098554,-4.502585,-5.945319,8.314959,6.584914,0.094016,-0.993944,0.688832,-6.843907,3.598019,-4.647909,-7.458387,9.992457,-4.408930,7.470229],[2.741952,-0.453062,-3.468419,2.628276,5.179276,-5.194552,-6.947106,3.447171,2.735108,2.372235,3.529561,-8.196199,-3.672208,-6.367265,8.778849],[7.734371,8.378230,6.826506,2.065160,6.361050,4.508937,3.917025,5.403283,4.263680,-4.620897,2.313060,-7.406423,0.417085,4.726443,-5.230753],[-1.794683,2.017631,6.301109,1.911188,3.498892,8.433773,-5.224439,-5.750069,1.240131,1.626710,5.291563,-1.188446,-0.538761,-4.834571,9.156890]],[[2.091346,-6.621994,-6.293301,4.652887,-6.509363,-8.593779,0.718343,0.737698,-0.523005,-8.227996,-1.150063,2.511307,6.980468,0.502014,3.211086],[-6.711217,-3.402854,-3.552905,-2.185240,-6.662461,-6.498823,0.817789,4.225089,-0.205693,5.468270,3.681103,-6.808788,-1.955980,0.242711,8.117013],[2.026941,9.606835,-2.779773,-8.128131,2.112350,-7.743840,3.845525,5.154695,-6.078829,9.091730,-3.067407,0.452405,7.068324,3.355383,4.875638],[0.215220,-6.895845,-0.610465,-9.485401,-1.326972,4.716640,-9.565114,-5.822855,-7.577015,2.737918,-3.380522,-4.911180,-7.590953,-8.712500,-1.215392],[-0.728302,-8.417962,-6.948951,4.767431,3.612326,-8.336762,-4.358154,2.185307,6.944181,5.607289,2.359714,-9.337438,-5.593476,4.080166,-2.630474],[-7.983296,-2.638184,-1.325714,-2.818398,0.342477,5.545279,-6.350423,-9.407064,-5.574448,2.601936,-2.508960,3.673858,0.308233,9.339811,-0.873335],[-7.129966,-3.141717,2.465029,-4.194861,3.226702,0.078852,6.562553,-3.272448,-2.128607,7.187118,1.961392,-0.793572,2.702974,-5.462451,9.430254],[-7.454610,5.743389,-2.683831,7.504821,-4.660391,-0.776682,6.223621,-4.401709,-3.530532,-6.629658,-7.030148,6.779357,5.707545,-0.181746,-3.696553],[-1.819101,-0.159414,0.059903,0.595192,3.869244,2.247378,1.162328,9.091810,6.168543,-3.057756,-0.308606,9.616872,-2.689258,-4.450286,-2.701556],[-2.457475,3.978053,-3.570098,3.384908,-6.078853,-6.423647,-3.679795,-7.564103,2.941958,6.628171,-9.360596,-2.253247,-9.359538,-3.679938,-5.597071],[5.730696,5.135227,5.877654,1.332004,2.544962,2.213006,-3.099182,-5.604204,5.163688,-4.911814,2.211786,-9.518992,-1.149675,-6.664247,4.135603]],[[9.935900,4.504075,-2.583630,-4.864209,2.971174,9.168728,9.239833,8.376964,-2.504036,9.783880,3.173144,2.182585,7.140021,-9.242727,-1.180771],[-0.641536,-6.960506,2.044874,-5.689397,9.844408,6.984379,-2.721963,-6.829445,-1.725609,-7.791264,2.101401,5.752445,-4.046235,-9.648117,-4.901600],[-7.897882,-5.535207,7.299933,5.764762,7.036611,6.812721,0.411524,-8.042338,5.658183,4.885216,-0.918698,-0.083494,5.856645,-8.736410,2.502316],[3.782408,8.480659,0.203978,6.058726,-5.740048,3.966547,3.949914,2.760988,-7.378162,3.868380,2.835285,-7.791828,0.739321,-1.596055,3.307356],[-6.573265,5.433999,-7.573479,-0.329150,-5.648925,-2.094977,5.589202,-4.678327,4.035584,0.562457,-6.908993,4.802769,-9.184868,0.689232,-7.522964],[4.416386,8.268342,7.929376,7.258697,6.492981,-7.076495,0.928290,4.678612,9.758494,-3.025093,6.072671,6.623216,3.781818,8.245626,-8.168207],[0.187379,6.065087,-5.852448,-5.234514,-1.066946,6.900340,5.942096,-8.628934,5.473375,-2.797050,3.365654,-1.330289,-0.438434,-0.139265,-6.803382],[8.208752,-9.968283,-0.116814,2.510770,-7.814037,-4.063876,0.566996,-5.668417,6.622223,7.908342,6.986619,6.528656,3.647910,6.486174,-4.575198],[-9.745222,5.943016,-9.091137,5.793241,-3.034280,5.214833,-9.675535,8.491816,1.775811,-9.082066,-1.153567,4.814243,6.980192,8.807100,-0.342761],[1.809787,9.586529,-6.559529,-6.095307,-8.900328,0.998107,-7.530472,-2.608907,0.695961,-9.791725,-4.535825,7.635147,-4.206747,-8.479109,-8.970703],[6.178916,2.662585,-5.967228,-2.054258,9.519654,-6.782821,5.801270,-6.332464,-2.925476,3.866693,1.599392,7.622485,7.466556,-5.487736,9.914956]],[[-5.346617,-7.824557,2.909007,0.137874,3.154913,-6.101463,-9.502417,-7.934796,6.647081,-2.983287,1.031346,-2.781465,-1.766597,8.876243,7.781918],[7.026783,6.381065,2.657363,5.635653,3.660011,-9.925364,-8.787381,7.829707,1.034099,0.911083,3.704258,-1.626895,3.834735,5.003181,5.728706],[6.557238,-1.321879,-5.203520,9.973304,8.445608,-7.082369,3.848958,-3.819567,-7.844005,7.838333,8.172114,-0.238239,9.326158,-3.729482,-4.886815],[0.870609,9.234785,0.184765,-3.211423,2.305565,9.546996,0.152959,-3.538493,8.878715,3.727951,-8.796886,3.332402,-2.179824,-4.190019,0.207026],[-6.145174,-4.628187,-9.021709,8.869960,-6.907097,-5.276736,4.186944,-4.486292,3.539570,-9.570842,5.081685,0.205398,7.950861,1.181498,3.684748],[6.483596,8.732671,7.481354,4.097354,-8.854899,7.020797,5.239413,-6.159674,-1.001185,2.583184,5.022170,8.010259,3.448999,-7.308971,-6.908249],[0.481208,-0.659510,9.063041,-1.665953,-7.480199,-9.370962,-3.098107,-1.263449,-3.193879,-9.695191,6.941353,-1.460184,0.024616,-5.890740,-1.947545],[6.197351,-7.675907,-8.773373,6.315484,-9.324557,-8.997529,2.972145,-6.856705,4.426491,-7.980071,-3.314530,1.215983,-9.722528,-4.692288,0.378888],[0.110164,-0.425715,-3.643833,8.899008,0.189252,6.607047,-8.766310,-5.145547,8.849073,1.993421,-1.574345,7.175303,-2.602651,-4.645028,-5.441012],[1.875245,-2.922404,1.203808,8.922125,-8.214390,-7.022182,-7.970563,-9.536779,4.560961,-7.625684,5.841363,-4.933126,5.878236,-1.149460,5.553316],[4.389805,-8.163156,-3.622499,-6.401924,-0.530364,7.624038,-8.336364,4.685820,-8.984258,-7.897822,-9.277022,9.952625,7.401813,1.914915,-8.209013]],[[-1.858555,-8.744401,4.603258,6.566861,-5.055881,-7.287771,-3.942523,9.754053,3.695943,6.078297,-9.682074,8.757006,-2.450873,-1.232754,-6.748132],[1.069212,-5.570843,2.602353,-6.999344,8.637228,-2.279311,-5.739300,2.319906,5.109677,-6.628254,-7.247400,-9.232502,-3.935290,-3.705603,-9.720534],[-2.768362,-1.476487,0.963482,-3.980471,-4.219635,-9.445842,-7.981760,5.443420,-3.205886,-9.098806,9.617227,-7.911483,3.872936,4.351116,4.666306],[-4.242200,6.292235,6.646539,0.489060,-8.375957,2.180720,-1.395921,-7.829800,2.320003,-8.936596,9.560848,0.846493,4.258663,-0.372805,-7.440362],[4.986424,1.574632,7.557089,4.999716,1.725296,-4.596708,7.550086,-8.801564,5.574100,-6.860888,8.695262,4.116732,2.852624,4.191627,4.918203],[-6.299790,0.685837,7.707716,-3.359296,4.024900,7.437182,-6.785361,-6.970365,-7.791015,7.651604,-1.553121,-9.266502,4.999098,-8.345682,1.237752],[-3.461941,-5.201924,-1.025541,1.788555,7.208158,-7.078303,-8.623816,9.032761,8.635622,-2.195355,-6.698490,7.686792,7.440372,1.793192,-9.017740],[5.451446,-5.577026,-1.719040,-6.835040,5.700174,-2.120284,-3.980299,-8.985277,5.558891,8.745096,-6.591389,-0.433404,-8.148431,-6.624025,-7.032265],[-5.702918,-0.107871,9.250868,8.603848,-3.643430,9.184839,-6.644123,8.738558,3.759682,-4.986877,0.940452,5.875639,5.250302,9.030077,9.625084],[-0.861988,7.055754,-1.632204,5.386981,-0.967106,-8.895984,-1.610540,0.214089,2.369092,-8.545433,5.491820,3.953451,-9.789550,-9.666510,-2.038315],[5.938296,-9.705649,2.818565,4.568756,-2.725144,-9.079964,-7.419918,-2.684955,6.147604,-2.550965,4.853062,6.703613,-1.131484,6.550368,0.542361]],[[-6.779876,-4.787060,3.391044,2.408584,-3.287810,1.054338,-1.851607,5.211976,0.497373,6.410202,5.984873,-0.776763,0.749442,-9.567861,0.385726],[-1.396454,-3.578945,-5.697718,1.971179,-3.219377,-6.453086,-4.076679,1.775314,9.779564,-3.284481,9.684597,0.769428,-5.913892,-2.242397,-2.588102],[-7.114496,-3.919540,1.681925,8.045587,-0.171084,7.309267,4.152539,-1.197762,0.328519,4.528005,-9.599715,5.600335,-5.489226,-6.972585,-5.713600],[8.430740,3.996498,0.482591,-7.433570,0.879126,9.454835,7.439316,4.362650,5.140504,6.158334,-9.953922,3.220032,-4.313461,-7.486891,5.751039],[2.367904,1.808376,-1.057275,0.090829,4.911563,9.273788,5.741658,2.805161,-5.673334,-1.251791,-8.437392,9.037428,-4.810308,6.532163,-6.348391],[-5.419253,2.357646,2.181595,-1.504242,7.132511,2.365502,-3.238779,5.709596,6.693188,0.250208,-2.254682,4.739679,4.464444,2.387137,-3.196053],[8.249139,3.395166,-0.642958,-5.827292,0.154575,9.702007,1.682279,-4.832897,3.384189,-6.280258,6.230613,-1.501152,6.883918,-3.239827,7.731320],[-3.178826,4.019691,5.736540,-6.006862,6.535238,4.966577,7.323847,-3.092605,-7.381393,3.440742,-3.964204,9.658961,8.973619,8.971109,3.389958],[-8.196995,7.002225,4.264382,-1.491848,1.548133,6.880512,-8.612109,5.227680,-0.706574,-9.289207,-0.522246,-9.715040,-5.503564,-6.175531,-4.394388],[-6.892846,-8.633648,-0.891475,-4.967446,8.737277,-8.674647,0.293829,9.271222,-3.247166,-0.349067,-3.324691,6.394937,-9.742561,-6.905483,8.544373],[-3.997730,-5.783893,-8.029382,-6.925621,1.754385,-7.792962,-1.976951,-3.132369,-8.499345,-4.970862,7.527724,0.339376,9.577115,-5.241534,0.061253]],[[-5.369120,0.439918,-6.904416,-8.090750,6.273718,-3.338350,8.097597,3.285858,2.320178,-3.299489,-6.040743,-6.466233,4.146582,8.231458,7.415333],[2.774060,-7.965151,-6.795165,-0.216170,4.307832,-5.254232,6.833594,-6.960038,7.244417,-9.680013,0.308166,-7.444922,5.719585,-0.369333,5.432019],[2.480943,7.813674,-6.495933,-1.218525,-9.074199,-3.607833,1.559763,3.985943,-0.175419,3.915694,-3.732772,8.076716,-7.982281,-0.948396,9.530154],[6.912557,1.788506,-0.136770,-8.856487,-4.949362,-3.912230,-1.375880,2.057057,4.008840,-7.350951,-2.509124,-4.882873,1.990356,-9.458727,1.106818],[-6.008088,-4.700263,5.311784,6.047476,0.472388,3.553071,-8.127163,-5.516775,0.731195,0.827003,-7.620976,-7.972595,0.750666,-8.940171,-6.002241],[5.258833,-9.792802,-3.136104,-2.945637,2.689365,7.188956,2.609348,-1.901886,4.230267,7.206992,-9.440865,4.038815,-8.211853,-2.973113,-6.660094],[-8.111700,8.754810,-8.417459,4.249105,6.303851,-2.079435,1.917906,-1.460996,1.280134,3.180679,-1.966992,3.197147,-0.535903,-7.744517,-1.365054],[2.655147,-0.220482,5.869711,-7.957793,1.167846,0.429562,2.916260,3.824372,7.235699,6.590827,-0.766149,-6.790020,4.877659,0.546411,8.669917],[5.595640,9.776240,-8.531152,-8.013541,0.717565,-1.478296,9.158132,3.933009,-3.905139,-1.177030,7.680199,8.232608,-6.475093,-7.234675,0.754872],[6.651270,3.453618,-3.949812,6.958571,-9.975601,9.741410,0.413091,-4.829852,9.800025,4.230440,5.974435,-1.555332,-6.744305,4.360099,7.124971],[4.676647,6.006194,2.811875,-9.586205,-1.094056,6.476261,2.451747,1.101652,2.066324,-7.288364,-9.417893,4.597460,8.260909,9.381882,-5.847959]],[[3.073690,3.400560,-5.597508,-4.141532,5.707578,-2.004518,-8.955686,4.283549,4.666859,8.409843,-0.526388,7.284429,-2.698257,5.278650,-9.721378],[-5.246580,5.049505,-8.675792,-8.962303,-9.135104,-0.426037,-0.363126,9.803486,-8.124236,-8.912949,-7.274357,1.494752,-8.419062,-8.088771,3.967372],[-1.885149,-0.124700,4.187204,6.339048,-6.137838,5.235581,-2.238729,2.187532,7.571353,8.230350,7.107110,-2.755064,4.547554,3.651754,4.741121],[-5.614421,-4.053787,4.296860,-3.179299,-7.903060,2.782781,4.645485,1.343374,2.067734,-9.688843,0.096202,-6.462465,-1.111118,-3.279416,-3.495034],[-2.411566,6.177891,6.736650,-9.939066,-2.419856,-8.964141,-2.554902,4.242079,3.494777,-6.908201,4.372940,5.683326,-6.165412,-8.143190,6.490426],[-2.540128,8.372623,4.963293,-8.769311,-7.144254,-5.222888,-5.529349,-0.374404,-8.703446,-4.499625,9.584258,-8.768422,-7.643703,-1.922964,-3.669090],[5.344826,1.454553,-5.180966,1.485117,-8.070727,0.518710,5.719695,6.685760,-0.631974,0.675552,3.282461,-3.502576,0.220586,-0.572441,4.470767],[-5.745827,6.268144,-5.123231,-8.810612,-4.622517,8.499856,6.381016,-4.148305,7.642397,-5.259466,3.349391,1.524748,-0.918300,-4.281665,0.685067],[5.612323,-2.386357,6.853284,-7.464029,2.957858,6.485394,3.559898,1.203341,4.462486,-1.663797,0.989967,9.887839,3.633556,3.459149,-2.196210],[-3.887948,-4.370199,-6.055161,5.797849,0.712711,-7.033446,5.999841,1.992282,4.979836,9.410961,5.757638,5.271808,-8.530024,-0.096417,8.985602],[-2.942556,-9.796787,-4.352015,-0.890673,1.870049,-2.741761,-9.496482,8.613643,-5.728986,5.435244,-5.959477,-1.296125,5.148260,2.814147,4.019233]]], dtype = "float64")#candidate|4255|(16, 11, 15)|const|float64
uop_4256 = relay.erf(const_4255.astype('float64')) # shape=(16, 11, 15)
output = relay.Tuple([uop_4256,])
output2 = relay.Tuple([uop_4256,])
func_4266 = relay.Function([], output)
mod['func_4266'] = func_4266
mod = relay.transform.InferType()(mod)
mutated_mod['func_4266'] = func_4266
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4266_call = mutated_mod.get_global_var('func_4266')
call_4267 = func_4266_call()
output = call_4267
func_4268 = relay.Function([], output)
mutated_mod['func_4268'] = func_4268
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4266_call = mod.get_global_var('func_4266')
func_4268_call = mutated_mod.get_global_var('func_4268')
call_4292 = relay.TupleGetItem(func_4266_call(), 0)
call_4293 = relay.TupleGetItem(func_4268_call(), 0)
output = call_4292
output2 = call_4293
func_4308 = relay.Function([], output)
mod['func_4308'] = func_4308
mod = relay.transform.InferType()(mod)
mutated_mod['func_4308'] = func_4308
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4308_call = mutated_mod.get_global_var('func_4308')
call_4309 = func_4308_call()
output = call_4309
func_4310 = relay.Function([], output)
mutated_mod['func_4310'] = func_4310
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4395 = relay.var("var_4395", dtype = "uint16", shape = (4, 1, 13))#candidate|4395|(4, 1, 13)|var|uint16
var_4396 = relay.var("var_4396", dtype = "uint16", shape = (4, 15, 13))#candidate|4396|(4, 15, 13)|var|uint16
bop_4397 = relay.add(var_4395.astype('uint16'), var_4396.astype('uint16')) # shape=(4, 15, 13)
var_4413 = relay.var("var_4413", dtype = "uint16", shape = (4, 15, 13))#candidate|4413|(4, 15, 13)|var|uint16
bop_4414 = relay.subtract(var_4396.astype('int64'), relay.reshape(var_4413.astype('int64'), relay.shape_of(var_4396))) # shape=(4, 15, 13)
var_4426 = relay.var("var_4426", dtype = "uint16", shape = (4, 15, 13))#candidate|4426|(4, 15, 13)|var|uint16
bop_4427 = relay.mod(bop_4397.astype('float64'), relay.reshape(var_4426.astype('float64'), relay.shape_of(bop_4397))) # shape=(4, 15, 13)
output = relay.Tuple([bop_4414,bop_4427,])
output2 = relay.Tuple([bop_4414,bop_4427,])
func_4434 = relay.Function([var_4395,var_4396,var_4413,var_4426,], output)
mod['func_4434'] = func_4434
mod = relay.transform.InferType()(mod)
mutated_mod['func_4434'] = func_4434
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4434_call = mutated_mod.get_global_var('func_4434')
var_4436 = relay.var("var_4436", dtype = "uint16", shape = (4, 1, 13))#candidate|4436|(4, 1, 13)|var|uint16
var_4437 = relay.var("var_4437", dtype = "uint16", shape = (4, 15, 13))#candidate|4437|(4, 15, 13)|var|uint16
var_4438 = relay.var("var_4438", dtype = "uint16", shape = (4, 15, 13))#candidate|4438|(4, 15, 13)|var|uint16
var_4439 = relay.var("var_4439", dtype = "uint16", shape = (4, 15, 13))#candidate|4439|(4, 15, 13)|var|uint16
call_4435 = func_4434_call(var_4436,var_4437,var_4438,var_4439,)
output = call_4435
func_4440 = relay.Function([var_4436,var_4437,var_4438,var_4439,], output)
mutated_mod['func_4440'] = func_4440
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4469 = relay.var("var_4469", dtype = "float64", shape = ())#candidate|4469|()|var|float64
var_4470 = relay.var("var_4470", dtype = "float64", shape = (7, 5, 7))#candidate|4470|(7, 5, 7)|var|float64
bop_4471 = relay.power(var_4469.astype('float64'), var_4470.astype('float64')) # shape=(7, 5, 7)
bop_4484 = relay.floor_mod(bop_4471.astype('float64'), relay.reshape(var_4470.astype('float64'), relay.shape_of(bop_4471))) # shape=(7, 5, 7)
func_3341_call = mod.get_global_var('func_3341')
func_3345_call = mutated_mod.get_global_var('func_3345')
const_4492 = relay.const([[-10],[-4],[-9],[9],[7],[-5],[-9],[-3],[2],[-3],[7],[-5],[2],[6],[3],[-5],[-9],[10],[-1],[1],[6],[-3],[8],[-3],[-10],[-1],[6],[10],[5],[3],[10],[-2],[6],[8],[2],[7],[3],[2],[6],[4],[-4],[4],[10],[-9],[10],[4],[10],[2],[10],[5],[-7],[-10],[2],[2],[9],[-7],[10],[4],[-7],[-6],[5],[-10],[5],[-2],[10],[-9],[-2],[7],[-10],[6],[-6],[4],[-6],[7],[-1],[10],[-2],[2],[-2],[4],[-6],[9],[1],[3],[-7],[-3],[-4],[1],[5],[-1],[3],[-2],[-4],[6],[-3],[-10],[-3],[-6],[-6],[-6],[-2],[8],[-7],[-3],[-8],[-9],[-10],[8],[7],[1],[-4],[8],[9],[2],[7],[-10],[8],[-2],[-8],[-7],[3],[-9],[-7],[8],[1],[-6],[10],[2],[10],[-9],[-3],[-5],[-9],[-8],[-3],[-5],[-1],[9],[1],[5],[-9],[-7],[-7],[-2],[-5],[5],[10],[-1],[-6],[-7],[-5],[7],[-9],[7],[-6],[-2],[-3],[5],[9],[8],[-6],[4],[-4],[6],[5],[1],[8],[-8],[-4],[8],[5],[-6],[10],[10],[-9],[-5],[-3],[3],[-5],[7],[4],[10],[6],[10],[-2],[2],[8],[-8],[9],[10],[-6],[3],[6],[-5],[4],[-1],[-10],[10],[-10],[7],[-9],[-9],[-9],[7],[-7],[-6],[-4],[2],[-6],[4],[-1],[-8],[-7],[-10],[-9],[9],[8],[-6],[7],[4],[2],[4],[-10],[9],[7],[6],[8],[10],[2],[-2],[-7],[-10],[-9],[1],[-10],[7],[-7],[-8],[-9],[-5],[-8],[-4],[-4],[-2],[4],[-7],[3],[3],[2],[5],[9],[3],[-4],[4],[-8],[10],[9],[4],[8],[-10],[-8],[-3],[-4],[4],[-10],[-9],[-10],[6],[-5],[-7],[-9],[-1],[-1],[-4],[9],[-1],[-10],[-9],[-1],[-2],[1],[-2],[6],[-4],[2],[6],[-8],[-2],[9],[8],[-9],[-6],[-3],[5],[9],[5],[-1],[-2],[-8],[-9],[-8],[2],[1],[-5],[-9],[10],[-1],[-6],[3],[-8],[-9],[4],[-3],[8],[-3],[-2],[4],[-6],[-9],[5],[5],[-5],[-2],[-1],[-2],[-9],[4],[-2],[10],[-10],[9],[-3],[-7],[5],[-2],[-3],[4],[3],[9],[-10],[7],[-2],[3],[-9],[6],[-5],[3],[-5],[6],[4],[8],[7],[5],[9],[6],[-5],[-1],[5],[2],[6],[-3],[-10],[-8],[7],[-5],[-6],[-10],[7],[2],[9],[5],[2],[-4],[-9],[-1],[6],[-7],[-2],[-1],[3],[-2],[1],[9],[-7],[-1],[-1],[-4],[-2],[10],[-5],[-8],[6],[-7],[-4],[-9],[-6],[-5],[3],[2],[7],[8],[-2],[2],[1],[5],[2],[-6],[1],[-1],[4],[4],[-1],[7],[-5],[3],[6],[1],[-4],[-10],[-3],[-10],[10],[-7],[1],[-8],[10],[-7],[10],[-4],[-4],[-8],[-10],[8],[2],[-8],[3],[-1],[-6],[-4],[8],[2],[-3],[-8],[2],[8],[1],[-8],[-5],[-5],[-4],[-1],[5],[-10],[4],[-7],[-5],[2],[-7],[-10],[2],[-7],[-6],[-4],[-3],[9],[5],[4],[3],[10],[9],[2],[6],[3],[4],[-2],[-3],[-1],[-6],[-1],[7],[-6],[-1],[-2],[-6],[4],[8],[1],[-1],[7],[10],[-4],[-10],[4],[-2],[-5],[-7],[9],[1],[4],[4],[5],[3],[-5],[-10],[10],[6],[5],[-8],[2],[-5],[9],[9],[-2],[1],[-8],[-2],[-6],[8],[-1],[-8],[10],[-4],[-7],[-3],[-6],[-9],[-2],[5],[9],[-10],[1],[-9],[-8],[8],[7],[2],[-7],[-2],[1],[-7],[-8],[2],[-5],[4],[2],[-2],[-5],[-8],[9],[-4],[-4],[-4],[3],[9],[-5],[-2],[3],[1],[-10],[-3],[-8],[-5],[-7],[7],[3],[-2],[8],[-7],[-4],[-6],[3],[2],[-2],[7],[9],[-6],[6],[-1],[8],[-8],[-1],[-5],[-10],[9],[-1],[5],[-3],[-9],[9],[8],[-5],[-4],[-8],[5],[-2],[5],[5],[2],[6],[-1],[6],[-8],[-10],[-3],[4],[-6],[6],[1],[2],[-1],[1],[10],[10],[1],[-1],[1],[-8],[-6],[8],[7],[1],[-1],[3],[4],[-10],[-2],[1],[-6],[3],[-6],[-2],[2],[6],[8],[7],[3],[9],[6],[10],[9],[-3],[10],[2],[6],[3],[-10],[7],[-5],[-1],[-6],[-8],[-8],[-5],[-1],[4],[-4],[1],[-2],[9],[-10],[2],[-9],[3],[-1],[-9],[-5],[-7],[6],[-7],[8],[8],[-10],[-7],[-6],[4],[3],[6],[-4],[-8],[-3],[3],[-3],[-3],[2],[-9],[3],[2],[10],[8],[8],[-10],[6],[2],[6],[5],[6],[9],[8],[-2],[2],[-9],[-1],[-8],[2],[5],[-8],[10],[-2],[5],[4],[-7],[-8],[2],[8],[6],[-5],[7],[-8],[7],[3],[-2],[8],[6],[-4],[-7],[-1],[-9],[-3],[-6],[-6],[1],[7],[-9],[4],[-9],[-7],[-7],[-2],[-6],[4],[-5],[10],[-3],[-6],[3],[1],[-5],[-3],[5],[10],[4],[4],[-4],[-4],[3],[6],[2],[-3],[-8],[-4],[-10],[7],[3],[-2],[9],[6],[-1],[3],[-7],[6],[5],[-9],[7],[-2],[10],[7],[10],[7],[-6],[-6],[1],[6],[-2],[-7],[-8],[-10],[-6],[-9],[-10],[7],[-8],[-2],[-10],[4],[10],[-1],[-1],[2],[8],[2],[-2],[-10],[-1],[1],[-2],[5],[-5],[-8],[8],[9],[3],[-8],[8],[8],[9],[3],[-2],[2],[-4],[9],[3],[5],[1],[-3],[7],[-8],[3],[-5],[-5],[-7],[2],[-10],[3],[-2],[-8],[2],[-6],[-1],[2],[7],[-5],[2],[-8],[9],[9],[-2],[5],[9],[-5],[-4],[3],[4],[3],[-6],[9],[-6],[6],[-4],[-6],[-10],[8],[8],[-5],[1],[10],[-2],[-1],[10],[-2],[-1],[-10],[7],[7],[-10],[4],[-10],[3],[8],[-6],[5],[4],[7],[-6],[1],[5],[-8],[1],[1],[-7],[-2],[3],[5],[-9],[2],[-4],[1],[8],[5],[-9],[1],[6],[-9],[7],[4],[-2],[-4],[8],[9],[-4],[7],[1],[8],[-8],[-1],[-9],[8],[-4],[-2],[-8],[-4],[5],[-3],[9],[2],[-6],[5],[-7],[-7],[6],[-1],[-2],[10],[-8],[6],[1],[6],[8],[-10],[-3],[4],[3],[9],[2],[6],[-5],[3],[-8],[5],[7],[3],[1],[-5],[9],[10],[10],[-5],[1],[5],[-9],[-1],[10],[4],[-7],[5],[2],[4],[-7],[6],[4],[2],[-8],[-1],[9],[4],[8],[2],[1],[7],[7],[-4],[10],[-4],[-6],[-5],[-4],[6],[-1],[5],[-2],[-8],[4],[10],[8],[-5],[-9],[-5],[4],[-6],[-10],[1],[-7],[10],[-4],[8],[3],[8],[-9],[-5],[8],[-3],[-7],[-6],[10],[1],[4],[-5],[-9],[-10],[7],[-10],[-5],[-8],[-9],[-3],[-10],[-3],[-9],[-10],[-2],[8],[-3],[8],[-8],[-6],[6],[7],[-4],[-8],[-9],[9],[-9],[8],[1],[4],[9],[1],[7],[-3],[-8],[3],[-4],[-5],[-7],[-3],[-4],[-8],[5],[1],[-4],[-9],[-1],[6],[-10],[4],[-9],[-1],[-9],[-5],[-1],[-3],[-1],[10],[-8],[9],[-7],[6],[9],[-5],[-2],[-8],[-8],[-6],[-7],[-3],[7],[5],[-10],[-3],[-7],[-2],[-3],[2],[2],[-2],[8],[5],[-6],[5],[10],[-2],[-6],[7],[2],[-4],[-2],[-3],[5],[-6],[3],[-1],[-7],[9],[5],[-9],[-1],[-4],[-7],[-5],[-10],[-8],[-3],[9],[6],[-5],[5],[-2],[-2],[8],[-6],[-4],[7],[8],[-8],[-5],[-9],[-3],[1],[2],[-9],[-6],[5],[-9],[-2],[4],[-3],[7],[-6],[-7],[7],[3],[2],[8],[-7],[-3],[-9],[3],[9],[-9],[-8],[-1],[3],[4],[-4],[-4],[-1],[-4],[-2],[-8],[-5],[7],[10],[-6],[-9],[-9],[1],[-9],[-9],[-4],[2],[-1],[4],[5],[10],[-6],[4],[6],[1],[-10],[10],[7],[-1],[-4],[9],[-3],[-5],[-3],[-10],[4],[4],[2],[3],[-10],[4],[5],[3],[-3],[-10],[7],[4],[-2],[4],[9],[-6],[3],[-5],[7],[-7],[-10],[-9],[2],[1],[-8],[-2],[-2],[-5],[-7],[-10],[5],[9],[5],[5],[2],[1],[10],[9],[3],[7],[10],[-8],[-6],[-7],[-2],[-1],[-2],[-4],[-6],[10],[-10],[2],[-2],[2],[-10],[7],[-8],[4],[-8],[9],[5],[-8],[10],[-3],[3],[-4],[4],[-5],[-6],[2],[-7],[10],[3],[-1],[5],[2],[10],[9],[4],[-8],[-7],[1],[8],[-8],[4],[2],[10],[-9],[6],[-6],[2],[10],[-10],[3],[3],[4],[-4],[1],[-3],[-6],[-10],[8],[-10],[3],[-7],[-6],[-8],[10],[-7],[3],[-6],[10],[-4],[-4],[10],[3],[10],[-8],[-10],[-6],[-1],[-7],[-9],[7],[4],[8],[9],[-2],[8],[9],[7],[8],[5],[10],[8],[-6],[8],[-7],[2],[5],[-4],[-6],[10],[5],[3],[6],[7],[-7],[-1],[-2],[3],[-9],[3],[10],[-10],[1],[-9],[-8],[-6],[-6],[8],[-1],[5],[1],[-5],[6],[-1],[2],[3],[-9],[-8],[-6],[9],[7],[8],[6],[-5],[-2],[5],[10],[-6],[-9],[-3],[3],[5],[-6],[4],[2],[-7],[-1],[-4],[10],[-2],[-2],[6],[6],[-8],[1],[7],[7],[5],[5],[-9],[-3],[7],[1],[10],[1],[-6],[8],[6],[-3],[10],[10],[-7],[-1],[2],[4],[-2],[10],[-2],[1],[4],[4],[8],[1],[-8],[10],[10],[7],[-7],[-4],[2],[-2],[4],[8],[-3],[-7],[-2],[5],[3],[-5],[2],[-10],[7],[4],[4],[5],[-5],[-4],[9],[4],[-10],[8],[-4],[-5],[-1],[-9],[-8],[-9],[-4],[9],[10],[-6],[2],[-5],[-2],[2],[-2],[8],[-3],[4],[-1],[-7],[1],[4],[-9],[-5],[-8],[6],[-5],[-1],[-10],[10],[1],[-7],[-1],[8],[-5],[3],[-3],[1],[-9],[-10],[1],[8],[-7],[-2],[-10],[-8],[-2],[-5],[7],[5],[10],[-7],[-4],[-2],[-7],[3],[-10],[-4],[8],[3],[-10],[-10],[9],[3],[1],[-9],[-7],[-2],[5],[5],[8],[-3],[-9],[-7],[-3],[-6],[5],[-3],[-1],[10],[6],[3],[-6],[-4],[8],[-6],[-9],[7],[6],[-6],[6],[3],[-8],[-4],[5],[-3],[5],[-4],[-10],[5],[-2],[-8],[-10],[9],[-9],[-4],[-7],[-6],[3],[5],[8],[-1],[-5],[-6],[-5],[-5],[-2],[8],[-8],[-7],[-3],[3],[7],[-6],[3],[-2],[-1],[-6],[8],[-1],[4],[10],[9],[-9],[6],[-5],[6],[3],[-9],[-8],[2],[5],[-3],[-2],[-4],[-5],[-1],[6],[6],[8],[-1],[3],[2],[3],[-4],[-8],[-10],[-2],[6],[5],[-8],[-10],[-9],[2],[2],[-5],[4],[-10],[-3],[2],[5],[6],[2],[10],[1],[-8],[8],[-2],[6],[10],[4],[1],[-7],[-8],[6],[-8],[9],[6],[-1],[1],[-4],[2],[9],[-10],[-8],[3],[10],[-1],[6],[5],[-9],[-3],[-6],[-4],[-9],[-10],[-6],[-6],[-6],[1],[9],[-5],[-9],[3],[-8],[-9],[3],[7],[-3],[8],[-6],[5],[-1],[-8],[-7],[3],[5],[2],[6],[3],[-4],[-1],[4],[-6],[-9],[-9],[3],[6],[4],[4],[-4],[-7],[5],[-7],[5],[-7],[10],[-7],[7],[3],[10],[-10],[3],[8],[1],[9],[7],[8],[-7],[6],[-5],[-4],[2],[1],[-5],[-5],[4],[7],[-3],[-7],[6],[-2],[3],[-8],[-5],[6],[-9],[4],[10],[-1],[10],[1],[1],[-3],[4],[1],[-9],[-5],[-4],[-5],[-7],[-8],[-9],[-8],[-10],[5],[4],[3],[-3],[-2],[-10],[7],[5],[-2],[-4],[8],[7],[-10],[8],[7],[-10],[7],[-10],[1],[-9],[-10],[-5],[8],[8],[-9],[-6],[8],[2],[-2],[-7],[-10],[3],[10],[8],[-7],[-6],[7],[4],[3],[5],[6],[10],[-5],[-3],[5],[-7],[-8],[-10],[4],[-2],[6],[7],[-1],[-7],[5],[-8],[-3],[7],[1],[6],[2],[10],[-6],[8],[10],[-10],[-10],[-8],[-8],[-7],[6],[5],[2],[-9],[2],[10],[1],[-3],[2],[-8],[5],[-9],[-4],[8],[-3],[-8],[8],[10],[5],[-4],[7],[2],[4],[6],[9],[8],[-1],[-9],[-3],[1],[-1],[5],[-10],[9],[6],[-6],[-7],[-10],[6],[-7],[-9],[8],[-10],[-5],[5],[-9],[4],[-6],[-10],[-2],[10],[9],[8],[10],[-5],[-8],[-2],[4],[-5],[-6],[-4],[-9],[-10],[-5],[-1],[5],[6],[-1],[-3],[-6],[-8],[5],[-3],[5],[-8],[10],[-6],[2],[-3],[-6],[-3],[8],[-7],[2],[9],[-10],[-2],[-10],[-2],[3],[-6],[1],[2],[-9],[10],[9],[-6],[-1],[-5],[-3],[-10],[-3],[6],[9],[6],[9],[7],[-3],[-3],[3],[-8],[7],[9],[-9],[10],[1],[6],[6],[7],[1],[9],[7],[-10],[-2],[5],[-8],[-8],[-8],[-2],[3],[10],[-4],[6],[-10],[5],[-8],[3],[-8],[-6],[-10],[8],[3],[-3],[-4],[10],[9],[-9],[-10],[-2],[2],[4],[-2],[5],[-2],[2],[3],[1],[9],[1],[-1],[1],[2],[-2],[9],[-5],[-1],[-10],[7],[-3],[-8],[2],[9],[9],[9],[3],[10],[-1],[-6],[-7],[9],[5],[-10],[-3],[2],[-10],[4],[-2],[-5],[-1],[1],[-6],[10],[5],[10],[-10],[-3],[-9],[1],[2],[9],[-4],[3],[-6],[-6],[-5],[-2],[8],[-6],[-7],[-3],[5],[3],[-1],[-5],[8],[6],[-9],[-7],[-9],[1],[-10],[5],[-5],[10],[-9],[-9],[1],[8],[8],[6],[9],[9],[8],[2],[-9],[-1],[8],[-6],[9],[4],[-9],[2],[-7],[-3],[-4],[-3],[8],[3],[-8],[-5],[-8],[5],[-6],[-8],[6],[-3],[-5],[6],[-5],[-8],[-7],[-4],[-5],[-3],[1],[-9],[8],[-4],[6],[7],[4],[-9],[-5],[2],[6],[-9],[-3],[8],[-1],[10],[-10],[-3],[-6],[1],[9],[-3],[10],[-1],[-7],[-2],[-2],[-5],[-5],[4],[3],[10],[-4],[2],[-9],[1],[-2],[8],[-6],[-4],[-1],[5],[-1],[-10],[-3],[-4],[8],[-10],[6],[2],[4],[1],[8],[6],[10],[7],[8],[7],[-4],[6],[9],[4],[4],[10],[7],[-3],[-5],[-6],[8],[7],[4],[9],[5],[3],[-3],[7],[-1],[-9],[-6],[-6],[1],[5],[-6],[9],[5],[-1],[-7],[4],[8],[-3],[8],[-5],[2],[7],[3],[2],[-3],[-9],[8],[-4],[-3],[3],[-9],[6],[-6],[-10],[-9],[-5],[-9],[1],[-6],[-5],[2],[7],[-4],[-4],[-7],[-9],[-3],[4],[3],[4],[-9],[7],[3],[-9],[2],[7],[9],[-3],[-6],[2],[-3],[-10],[7],[8],[7],[6],[-2],[5],[10],[4],[1],[-6],[-5],[5],[-8],[-7],[-9],[9],[-10],[-10],[8],[-7],[8],[6],[8],[-9],[-1],[-9],[-8],[2],[-3],[-6],[5],[-2],[10],[-3],[7],[-9],[-2],[2],[6],[8],[8],[8],[4],[-9],[6],[-1],[1],[-5],[5],[-1],[10],[5],[8],[-1],[-9],[-4],[8],[3],[9],[-9],[9],[7],[5],[-3],[1],[-3],[6],[2],[-7],[8],[4],[5],[3],[4],[-9],[-8],[-6],[10],[-6],[2],[-7],[-10],[-4],[8],[-7],[-7],[10],[3],[-9],[-5],[1],[-9],[-6],[-8],[2],[-4],[4],[-5],[-6],[10],[-1],[2],[-9],[3],[3],[6],[-9],[1],[-6],[2],[9],[-8],[-9],[1],[-5],[-9],[-8],[-8],[-8],[-4],[-10],[5],[9],[-7],[-6],[-2],[6],[-10],[-2],[10],[-2],[6],[2],[8],[6],[10],[-4],[7],[10],[-6],[-4],[1],[-8],[-7],[-2],[2],[8],[5],[-3],[-9],[-6],[-6],[2],[4],[9],[8],[10],[-5],[10],[1],[-9],[-7],[2],[-4],[-6],[-5],[-1],[-3],[-6],[5],[-6],[-1],[4],[-5],[8],[-6],[10],[3],[-9],[6],[-1],[10],[-5],[3],[9],[-9],[2],[-1],[7],[-1],[-3],[-1],[2],[4],[10],[-7],[-4],[3],[9],[3],[5],[-2],[3],[1],[9],[-5],[9],[-5],[8],[4],[-1],[1],[9],[5],[9],[5],[1],[8],[3],[3],[3],[4],[4],[5],[-1],[3],[4],[-9],[7],[1],[1],[7],[7],[7],[-7],[2],[8],[4],[-7],[7],[-9],[-10],[-2],[6],[-3],[5],[-4],[8],[-10],[-1],[-5],[8],[9],[9],[-10],[4],[5],[-4],[2],[-8],[8],[-3],[-6],[4],[-5],[-2],[8],[-6],[-2],[2],[9],[3],[9],[3],[-9],[10],[-4],[10],[3],[-5],[-10],[9],[-9],[-6],[-1],[-4],[4],[6],[-7],[9],[-10],[3],[-10],[-6],[-8],[-1],[10],[-8],[-8],[1],[-5],[-10],[2],[-4],[-5],[-7],[10],[10],[3],[-4],[9],[-9],[9],[9],[4],[-5],[-2],[-9],[10],[-5],[4],[3],[2],[-7],[9],[5],[-9],[6],[-4],[3],[4],[-10],[-2],[-3],[10],[-9],[-2],[10],[6],[-8],[-9],[5],[-9],[-5],[-8],[4],[6],[-8],[-1],[-3],[3],[-7],[4],[10],[7],[7],[2],[3],[4],[6],[-6],[-2],[4],[-1],[5],[8],[-5],[4],[4],[-1],[3],[-6],[-1],[8],[-7],[-5],[-7],[-5],[1],[8],[9],[-5],[-2],[-4],[-2],[-7],[3],[9],[4],[-9],[-2],[-6],[-5],[9],[-9],[1],[2],[-2],[4],[1],[3],[10],[3],[1],[-7],[-2],[5],[9],[1],[6],[-3],[-7],[5],[-9],[5],[5],[-8],[-3],[-4],[-10],[-5],[1],[10],[-1],[-8],[-10],[6],[-5],[-7],[9],[2],[10],[-9],[-1],[-9],[6],[-3],[5],[-9],[-6],[-3],[-7],[4],[-9],[-8],[-2],[2],[-2],[-7],[4],[6],[-2],[-8],[-4],[-1],[-3],[7],[-5],[-4],[1],[-5],[-2],[-7],[8],[7],[-1],[-3],[-2],[8],[-8],[-6],[-7],[-3],[-3],[7],[6],[-1],[8],[3],[3],[9],[3],[-7],[-3],[-2],[-5]], dtype = "int64")#candidate|4492|(2700, 1)|const|int64
call_4491 = relay.TupleGetItem(func_3341_call(relay.reshape(const_4492.astype('int64'), [15, 15, 12]), relay.reshape(const_4492.astype('int64'), [15, 15, 12]), relay.reshape(const_4492.astype('int8'), [15, 15, 12]), ), 2)
call_4493 = relay.TupleGetItem(func_3345_call(relay.reshape(const_4492.astype('int64'), [15, 15, 12]), relay.reshape(const_4492.astype('int64'), [15, 15, 12]), relay.reshape(const_4492.astype('int8'), [15, 15, 12]), ), 2)
output = relay.Tuple([bop_4484,call_4491,const_4492,])
output2 = relay.Tuple([bop_4484,call_4493,const_4492,])
func_4499 = relay.Function([var_4469,var_4470,], output)
mod['func_4499'] = func_4499
mod = relay.transform.InferType()(mod)
var_4500 = relay.var("var_4500", dtype = "float64", shape = ())#candidate|4500|()|var|float64
var_4501 = relay.var("var_4501", dtype = "float64", shape = (7, 5, 7))#candidate|4501|(7, 5, 7)|var|float64
output = func_4499(var_4500,var_4501,)
func_4502 = relay.Function([var_4500,var_4501,], output)
mutated_mod['func_4502'] = func_4502
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4266_call = mod.get_global_var('func_4266')
func_4268_call = mutated_mod.get_global_var('func_4268')
call_4540 = relay.TupleGetItem(func_4266_call(), 0)
call_4541 = relay.TupleGetItem(func_4268_call(), 0)
output = relay.Tuple([call_4540,])
output2 = relay.Tuple([call_4541,])
func_4556 = relay.Function([], output)
mod['func_4556'] = func_4556
mod = relay.transform.InferType()(mod)
output = func_4556()
func_4557 = relay.Function([], output)
mutated_mod['func_4557'] = func_4557
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4308_call = mod.get_global_var('func_4308')
func_4310_call = mutated_mod.get_global_var('func_4310')
call_4561 = func_4308_call()
call_4562 = func_4308_call()
func_84_call = mod.get_global_var('func_84')
func_87_call = mutated_mod.get_global_var('func_87')
const_4564 = relay.const([0.732923,3.617472,0.443912,3.828318,-4.446317,-0.280402,5.695530,-2.795585,3.143116,-1.697019,6.721350,6.980207,-7.232411,3.855189,8.062570,-0.841451,8.276095,-9.415015,7.959327,9.282550,-0.947712,6.698250,-5.067531,9.266714,9.509495,-5.311199,4.191284,8.401313,7.545010,8.728021,0.917007,1.502330,8.717662,5.193504,1.234097,-2.197125,-8.386526,3.723678,1.128609,-6.887900,6.473736,-3.512577,7.248538,-9.313796,-1.904945,5.387857,0.060492,-4.194890,-4.650435,2.698811,-4.330206,2.243544,7.406782,4.508619,8.625747,-8.643441,5.392181,3.068425,-5.403354,1.788979], dtype = "float64")#candidate|4564|(60,)|const|float64
call_4563 = relay.TupleGetItem(func_84_call(relay.reshape(const_4564.astype('float64'), [3, 10, 2])), 0)
call_4565 = relay.TupleGetItem(func_87_call(relay.reshape(const_4564.astype('float64'), [3, 10, 2])), 0)
output = relay.Tuple([call_4561,call_4563,const_4564,])
output2 = relay.Tuple([call_4562,call_4565,const_4564,])
func_4566 = relay.Function([], output)
mod['func_4566'] = func_4566
mod = relay.transform.InferType()(mod)
mutated_mod['func_4566'] = func_4566
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4566_call = mutated_mod.get_global_var('func_4566')
call_4567 = func_4566_call()
output = call_4567
func_4568 = relay.Function([], output)
mutated_mod['func_4568'] = func_4568
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4556_call = mod.get_global_var('func_4556')
func_4557_call = mutated_mod.get_global_var('func_4557')
call_4571 = relay.TupleGetItem(func_4556_call(), 0)
call_4572 = relay.TupleGetItem(func_4557_call(), 0)
func_3341_call = mod.get_global_var('func_3341')
func_3345_call = mutated_mod.get_global_var('func_3345')
const_4576 = relay.const([-5,7,6,6,-3,7,8,10,-7,-5,-4,1,7,-9,2,-7,8,-6,-5,10,-1,3,10,-5,10,4,-6,-7,10,8,-2,8,-10,-4,-9,2,-1,7,10,8,5,3,-7,-4,6,9,-6,8,3,2,8,10,-9,-3,-3,9,3,7,10,-8,-3,4,6,-9,4,9,-5,1,7,3,5,6,-3,1,-4,2,6,1,8,10,-1,-5,-7,-2,-2,-2,6,8,-3,-5,-8,6,-2,7,-9,3,-4,-6,-7,-5,3,8,5,1,3,-5,-2,6,-2,-4,-9,-10,-5,4,-5,1,-6,9,2,-1,5,-7,-1,-1,-5,-1,-1,-7,-7,10,-2,2,-7,9,-1,6,8,-5,8,9,2,-10,-1,3,10,10,2,9,-4,-1,-1,-3,2,-6,-5,-6,7,3,-2,5,-8,5,-8,-9,5,7,7,-4,9,9,-7,2,10,-1,10,6,3,-5,-8,-3,-6,-6,10,4,-2,-3,10,4,-9,-2,-10,-6,-2,4,-7,2,7,6,9,-9,5,-1,-7,4,-7,6,7,-10,3,8,1,3,9,7,1,9,6,-2,-3,1,-3,9,9,10,5,1,-9,4,-6,-5,7,-7,-4,-7,5,8,5,9,-7,5,6,-8,2,2,4,-7,1,-5,-2,1,10,-5,-5,8,-1,3,-1,-2,-4,-1,2,-1,-1,-8,-7,-10,8,-4,8,-4,7,6,-10,-10,-7,-5,8,-3,-2,-2,10,8,7,-1,-5,4,4,-9,2,-3,8,-7,-3,7,-1,-4,3,9,3,-5,-4,-10,8,-5,7,-9,-5,3,-9,3,1,1,1,-4,-9,-3,-5,-3,2,-7,-7,6,-5,2,-9,-3,4,6,5,2,-6,-9,7,8,-2,-8,1,3,-3,9,-1,6,-6,3,-10,-5,9,9,-8,7,4,-10,-1,3,9,-8,6,-6,-6,-4,-3,3,5,-7,-3,-4,10,-3,9,5,-10,8,8,-8,2,-1,5,6,9,4,8,8,1,8,-7,-8,9,5,-10,4,-7,9,-10,-3,-8,9,-4,-5,10,7,-10,6,-2,9,-4,-6,-9,-6,-9,7,7,-5,-5,-7,8,4,-10,-9,1,-4,2,-9,-2,9,-3,1,4,-2,10,4,3,6,-8,4,3,-8,8,8,-2,1,5,7,10,8,9,8,2,5,-6,-3,9,-6,7,-4,2,6,9,-7,-3,9,-9,-1,-10,2,7,7,-7,10,-8,4,-2,-7,4,-2,-9,8,-9,-10,7,-4,-9,8,-5,-9,3,-5,4,7,-8,-4,9,6,10,6,-9,-10,1,-4,6,-1,9,-5,-10,10,1,-6,5,-8,-7,2,3,4,-2,2,4,-9,1,-5,-6,10,6,-8,5,7,10,-10,1,-1,-4,3,6,10,-5,10,-7,-9,-4,5,-4,-3,-2,-9,7,-8,-3,-9,-2,-8,-2,-10,-9,-6,-7,4,3,-8,-2,-8,7,2,-6,10,-9,-6,-7,4,9,-10,-8,10,4,8,4,-5,-1,-2,-9,4,-1,1,-9,5,-2,6,9,-5,3,9,7,-10,-2,-7,5,6,-4,-3,1,-2,-2,7,4,4,-3,-7,-6,1,9,6,-9,-9,3,-7,9,9,10,3,-8,-3,10,3,7,6,2,-8,-6,8,-9,6,-6,1,1,-2,-5,-1,-5,2,6,5,-10,3,-10,-7,-5,8,10,-7,-7,1,4,-6,-4,-10,-6,2,-10,4,-3,-10,6,8,-9,-6,-6,8,-8,-10,3,-5,-6,5,-10,-5,-9,-9,-5,10,6,2,-4,-3,-5,3,4,6,-2,6,-7,-5,6,-5,3,-6,-3,2,-1,8,-9,-5,-10,2,10,-6,-9,-5,-4,-7,-8,-9,-3,8,7,1,8,8,-5,-10,8,-3,-6,3,1,-1,1,9,1,8,-5,2,5,1,-2,-6,-8,9,-9,4,-2,-10,4,-9,-9,1,-5,5,-4,-1,-9,1,8,-9,-4,-7,-9,9,6,-8,-4,7,3,3,-2,6,-3,-7,8,-8,-3,1,1,5,8,4,-2,5,-7,-5,-3,8,-9,-7,-5,1,1,9,-4,1,10,5,-8,-9,9,4,2,-9,9,10,-10,-1,5,-3,6,10,-1,8,-7,6,9,-9,-2,-6,4,-6,-6,-7,8,-9,-6,-10,6,-10,-5,9,6,8,6,-2,9,7,4,-8,4,7,-6,8,-5,5,5,-7,-3,1,-9,2,-9,-5,2,7,1,-7,1,1,6,-7,1,1,10,-3,-5,9,1,8,7,1,-1,5,6,9,9,2,-1,3,-5,10,-1,-5,-3,8,-10,6,-7,-5,-4,-2,2,4,-9,5,-3,-5,4,-7,-2,-6,3,-4,-2,3,3,10,1,1,1,5,10,8,-9,2,-1,-6,10,-7,10,8,-7,-1,4,-10,5,-1,-7,-1,-6,-8,1,1,3,-4,8,-8,-2,-5,10,-1,3,2,-1,-6,5,-5,-7,8,6,5,-5,1,2,4,-5,7,-7,10,1,8,-10,-2,9,9,3,-9,6,6,10,-10,-2,-3,-3,10,8,1,9,7,5,-3,-1,-7,-6,5,-2,9,1,5,-6,9,1,4,-3,-9,-8,-9,9,-5,10,9,6,-5,1,-10,-5,10,7,7,4,10,-10,-8,4,4,-7,5,-10,-10,-2,-7,-9,4,-3,-6,9,-9,-5,-10,2,5,4,3,-10,-6,-3,-9,1,8,6,-1,2,-6,8,-5,9,-2,-8,8,7,-2,8,-3,-7,-5,5,-8,7,-3,1,7,-6,2,3,-5,7,-3,1,5,6,-10,7,9,3,1,10,3,-9,1,6,-4,-5,9,-2,-5,6,1,-5,-9,4,2,10,-9,10,-2,-8,-1,-5,1,3,-8,-3,-2,1,7,-5,-9,-6,-5,10,5,6,-3,4,-10,1,-8,9,3,5,-7,-10,-5,-7,-3,8,7,1,6,-5,6,6,-10,-6,-7,2,-9,-4,-9,5,-10,-9,8,10,-9,2,-2,-9,-5,5,4,-8,2,-7,5,-4,-4,3,-6,8,9,-1,8,3,-5,-7,-10,1,-9,4,8,-8,-4,4,3,7,2,2,10,-7,-8,3,9,1,-2,-1,-4,5,-1,9,-3,-7,8,6,9,-10,-8,-6,-7,-7,1,-9,9,4,-3,6,-1,2,4,-7,3,-9,-2,-10,-1,8,-6,-6,1,7,-5,1,-5,5,-2,2,10,6,8,1,-4,-1,7,7,9,5,6,10,-10,-1,-9,-8,4,-3,2,2,-6,-6,2,3,7,7,-4,3,4,-6,6,-4,-8,3,-2,5,9,10,-5,7,9,-5,1,-8,-3,1,-8,2,-3,-5,-1,2,-2,-5,5,10,6,-10,-5,-5,1,-10,9,7,8,-9,-4,2,5,-4,-9,-6,-2,-1,3,7,-2,-6,-10,4,-5,-8,-4,-5,-8,-9,3,-2,-2,-4,-9,-2,2,3,-1,2,8,6,-2,8,10,-7,-3,-2,1,1,-8,2,-10,-2,10,8,-5,9,-5,-5,6,-2,10,5,9,-3,8,-5,-10,1,10,-9,6,-2,9,-8,1,4,-3,3,5,-8,-1,3,-9,-3,-8,6,4,-4,7,-8,1,10,-10,-7,8,10,-8,5,1,-8,2,-10,-2,-9,-6,7,-8,-3,-9,5,-6,1,2,-1,3,2,3,-2,-8,-6,-8,4,-2,-6,9,-2,-8,1,8,3,-1,-7,-6,-1,-1,-1,-4,5,-3,-8,-4,-1,3,2,-4,-3,9,9,-10,-10,-9,-10,-5,8,-7,2,9,4,3,-5,3,2,-9,-9,-3,-10,1,5,4,-6,2,-2,1,-2,4,-3,-5,-10,8,-3,-8,5,-10,5,-6,5,-9,8,5,-6,7,-7,-6,7,6,-7,3,-6,-4,9,4,-9,-2,-4,-7,5,10,6,-1,-2,-3,3,-10,-10,-2,4,2,-8,10,-1,-4,1,-8,-2,8,-6,-10,8,8,4,-7,-5,-4,3,-8,-9,1,-6,6,10,9,-6,4,9,-2,-3,3,-9,-4,-1,7,5,-1,-8,7,1,-3,7,3,-1,-10,5,6,-2,-8,-5,4,-4,-10,-2,-8,3,3,9,5,-2,-8,-2,-3,-5,9,6,9,-10,10,-6,-6,2,-8,-5,2,-1,4,-5,8,-8,1,10,-1,8,10,-2,4,6,-4,8,8,-6,-1,-1,-10,-3,10,2,-4,3,-6,-2,6,4,-1,-7,10,-3,-4,-9,3,7,7,-5,10,5,-2,6,-7,9,3,-8,9,5,10,-10,-7,-6,-6,5,8,2,7,9,10,-3,-4,-5,6,8,1,-9,-9,-3,6,1,-8,-6,-2,-10,-1,-5,-5,9,8,7,7,10,-1,-1,10,2,8,2,1,4,4,8,-8,1,6,7,-4,-9,1,3,-3,-9,3,1,-3,9,-2,5,5,8,-5,-5,6,-5,4,-8,3,8,-9,1,3,7,8,-7,-9,-4,-2,5,-3,-4,-10,-5,-10,-10,-3,-10,2,2,-1,-1,-4,9,4,-5,-6,-7,3,-1,7,1,4,-4,9,6,-5,-4,-4,8,-7,-8,-3,-9,-6,-9,-2,3,-4,-4,-5,4,-9,-2,1,2,4,-9,2,-5,-8,3,7,-8,7,5,-2,3,-7,-4,-6,6,-4,-8,5,-9,10,-3,-10,-9,2,-8,-2,6,7,-10,4,-2,1,7,5,-8,-9,-3,1,5,-7,10,7,1,-5,8,6,-10,-2,-2,-4,-2,-1,-2,-9,8,2,-5,3,3,-6,-7,-1,-9,3,-9,-2,-10,8,-7,-8,2,2,-9,5,3,4,-4,-7,9,-6,7,-3,-3,10,7,5,-8,-1,4,-2,7,-8,-3,8,7,2,2,-2,6,4,-7,-5,8,5,-1,-10,3,1,-5,7,3,-5,-7,-1,-8,-6,-6,2,-8,7,-4,-10,-6,-2,-4,-2,-10,-3,3,-10,8,8,9,-9,8,8,2,-10,3,-1,3,-3,10,10,9,-6,5,3,5,3,-8,7,3,8,9,4,-5,-3,-2,-10,-4,-9,4,5,6,3,2,-3,7,-2,3,6,-2,2,-5,-6,3,-10,-1,-6,-4,10,1,3,-5,4,-3,-5,-1,-1,-1,5,-6,3,-1,-4,-10,-3,6,-10,-2,-8,-5,8,-1,-4,7,8,-6,1,-10,4,-9,-10,2,-5,-4,-9,-7,-7,-7,-3,-4,-8,-2,8,3,-1,-9,-7,-10,-7,-9,-3,3,-7,3,-7,-10,9,-5,3,1,10,4,-2,10,-9,8,-5,6,-3,1,7,-6,-3,-3,7,-10,-3,4,3,7,-5,5,-5,-4,-9,-8,-8,3,5,8,10,-1,-6,-8,-3,10,1,-9,-8,5,-2,6,-9,-1,-4,8,-9,-7,-6,-4,4,-6,-1,9,2,7,-1,3,-1,-4,-3,1,1,-7,-4,5,-6,1,8,5,8,-3,6,-8,-8,3,5,3,1,5,2,-5,1,-6,-8,8,-4,4,4,-6,-4,-4,-3,7,9,-1,-9,1,-4,8,7,-9,-4,-10,5,-1,-7,8,-3,5,-4,-5,3,-5,-3,1,7,-5,-3,1,3,6,8,9,8,3,10,-7,6,-2,-4,-10,-10,-4,-10,-10,-9,-10,-2,-6,2,-2,-7,-5,-2,-1,9,7,-8,4,-8,-10,3,-3,10,-5,9,5,8,-1,7,7,5,5,9,-1,6,-3,5,5,-5,8,-8,2,-2,-6,-2,5,9,3,1,-6,-7,-7,-6,10,1,-5,-10,6,-7,1,7,9,7,-5,-7,-5,-1,9,-3,7,6,4,9,1,2,7,9,-5,-9,-3,3,-3,8,-10,-10,6,10,-5,8,7,8,-7,-2,-1,5,9,2,2,5,-1,-8,-2,-5,-7,3,-2,8,7,-6,-2,4,8,-5,-6,-2,-5,3,9,6,-4,-8,9,-8,7,-7,-4,4,7,-4,-10,-9,5,4,-2,9,-9,-2,6,-9,3,-4,8,-9,-7,-5,7,4,8,7,-8,5,7,8,-9,-4,2,7,4,-5,9,8,6,10,-9,3,7,-7,-7,-6,1,-9,10,4,-2,-4,9,-6,5,-8,-5,4,-10,6,3,6,-2,8,10,5,-9,2,-5,4,6,-6,2,5,-10,-3,-3,-8,5,8,-8,-7,5,6,2,2,3,-1,8,8,10,-1,-10,9,-5,-1,3,-1,-9,-8,8,-9,8,5,-9,-1,6,-2,-1,2,-2,-10,-2,3,9,-4,-1,-9,4,-2,8,-2,7,1,-6,3,-9,-1,5,4,-5,-10,-3,5,4,-10,3,7,7,8,-4,-1,6,-3,8,-5,-8,-9,-6,8,-4,-2,-2,6,8,5,7,-4,10,5,9,-2,5,-7,8,8,-4,10,9,7,2,-9,10,5,3,1,-8,-8,-6,3,-8,7,-1,-10,-5,-8,-3,-7,2,-4,-1,-6,7,1,9,-7,-5,1,-3,6,1,4,-3,-6,4,10,4,6,10,-5,3,7,6,4,10,7,4,-5,4,-1,-1,6,7,-7,9,-7,3,10,2,9,4,3,-7,6,-10,-2,10,-6,-9,-7,4,3,-7,-7,7,-1,3,-10,4,4,2,5,-3,10,-4,2,-10,5,8,-6,-9,-5,-5,-5,-10,3,6,-6,8,2,-5,-10,-1,-2,-7,5,7,8,-6,1,3,-8,1,-7,3,3,-6,-3,-5,6,-3,-8,3,-4,-1,3,-10,-3,8,-2,-1,-7,5,4,4,4,2,-2,9,4,-3,-4,-1,-4,4,7,10,-2,5,6,7,9,-3,-6,6,-2,10,-4,10,-7,-5,-2,2,1,-4,-7,9,2,-6,6,-2,-3,-4,-1,-4,-3,-5,-3,2,4,-10,-7,-6,3,-9,6,-5,2,-5,-8,-3,9,5,-5,-7,-1,10,6,-6,8,5,-7,-4,-4,3,-1,2,-4,-3,3,8,6,3,3,-2,5,8,2,4,-2,-7,-5,4,-5,10,6,-2,-5,-4,-4,-3,6,2,3,3,5,8,-6,-1,9,8,9,-6,5,-5,8,10,9,-1,10,-8,3,-4,8,9,7,3,-7,10,-10,-3,-5,6,4,6,1,-8,-10,3,-8,-7,2,-8,-8,-5,7,9,-8,8,2,4,10,8,-4,9,-7,-6,-4,-2,-5], dtype = "int64")#candidate|4576|(2700,)|const|int64
call_4575 = relay.TupleGetItem(func_3341_call(relay.reshape(const_4576.astype('int64'), [15, 15, 12]), relay.reshape(const_4576.astype('int64'), [15, 15, 12]), relay.reshape(const_4576.astype('int8'), [15, 15, 12]), ), 3)
call_4577 = relay.TupleGetItem(func_3345_call(relay.reshape(const_4576.astype('int64'), [15, 15, 12]), relay.reshape(const_4576.astype('int64'), [15, 15, 12]), relay.reshape(const_4576.astype('int8'), [15, 15, 12]), ), 3)
func_4174_call = mod.get_global_var('func_4174')
func_4182_call = mutated_mod.get_global_var('func_4182')
const_4580 = relay.const(-5.349174, dtype = "float64")#candidate|4580|()|const|float64
var_4581 = relay.var("var_4581", dtype = "float64", shape = (1, 5))#candidate|4581|(1, 5)|var|float64
const_4582 = relay.const([-4,9,-5,-2,9,-5,-3,-6,-3,1,6,4,3,2,-9,10,-3,1,-3,-1,1,7,9,8,-2,4,4,5,-9,-9,-3,-4,-8,-2,-7,5,-1,10,6,1,-9,-6,-4,8,-8,-4,8,5,4,-8,2,-9,-6,4,10,-7,-10,-10,4,10,7,-10,5,-2], dtype = "int32")#candidate|4582|(64,)|const|int32
const_4583 = relay.const([9.077647,-7.240672,3.306509,8.605585,-7.172417,-9.292509,-3.229140,9.797074,-9.675073,-1.829319,1.320178,3.187567,4.042837,2.448700,-1.534932,-6.668485,-8.176766,9.604014,4.696900,9.617195,7.927270,3.435353,6.923340,7.574951,-8.459104,0.711743,3.377834,3.942590,-0.772451,7.905109,1.020153,-7.897791,-7.162581,-8.645721,2.692087,5.558638,3.753178,-3.674470,-4.249348,3.907279,8.012183,-2.068829,6.834111,-1.814935,-3.633685,-1.345190,6.269399,0.747470,1.189414,3.065555,1.865445,5.256215,6.657308,4.196317,0.192547,-9.661245,8.116713,4.656900,-9.871108,-4.982994,5.990274,7.049768,-8.646475,6.857027,-3.795094,-2.783253,1.032356,-1.705023,1.921563,-9.124510,-6.953581,-9.853930,-0.646529,-0.981341,4.007685,8.786583,-6.027676,3.040379,-4.215832,-9.868946,-7.586695,-8.265581,-5.050709,-1.791197,7.491391,3.171487,-2.721999,4.696303,9.999695,4.560282,8.102297,-6.207864,0.443365,-3.119156,-5.627499,-2.264640,8.485747,-8.820347,-7.450717,2.465333,-1.182668,2.476063,-8.061614,4.977241,1.997002,-1.208744,1.755176,-8.080870,7.456428,-8.496141,8.692571,-0.964057,-9.615808,-8.005893,7.601177,-5.906276,-8.765279,-7.205667,-7.808903,2.015691,0.054319,-0.659545,-5.013910,0.566652,9.228315,1.288132,1.677540,3.572069,-1.712197,-5.113156,-8.663580,5.079061,-2.460813,6.927256,4.859456,-0.521992,4.802235,-9.571367,4.732670,8.732077,3.864670,7.498841,-1.658479,-5.647525,0.177441,-0.176017,4.042784,-3.542835,-0.917596,5.668777,-7.533497,-9.439383,-3.888751,4.678172,-3.034514,5.831018,3.830106,-1.558391,4.333249,2.497401,7.756108,-2.179905,2.423045,7.486661,3.033036,-3.088890,-1.542647,5.885886,9.069918,4.811141,9.058600,2.626139,2.207544,-1.755367,4.211230,3.909928,3.547841,1.448348,8.658440,-2.065194,8.482744,-9.474872,7.744380,7.979456,3.763774,2.532071,7.835998,8.801376,-2.197244,6.842053,3.878726,5.145810,9.775267,-7.877304,7.262747,6.284841,9.567724,-6.988003,9.365162,4.270931,-7.486833,3.676464,5.411544,1.440674,-3.584565,0.207384,3.116395,-3.239581,-8.353297,3.126484,-7.807639,-8.999297,2.370069,-0.179022,-4.221613,3.119983,-3.544055,-0.481411,6.188114,-6.635232,5.956958,-9.935054,-1.421555,7.758899,4.209536,-1.588542,7.013261,8.215666,5.713654,5.260378,5.701127,8.041521,3.390136,1.377281,9.555786,-2.717954,-8.558142,1.654465,2.503557,8.973295,-6.129309,-8.164982,-6.599252,-0.768351,-4.501116,-5.426418,-8.400628,6.094226,9.405700,-4.699384,-9.678573,0.710444,7.757352,0.143556,1.203006,6.472328,-1.547303,8.833728,3.186963,9.620001,5.467535,0.201685,9.144009,1.744848,-6.847378,8.825716,-0.853029,7.093001,4.018379,8.835774,7.048480,-8.016277,-0.151711,-9.458717,0.948953,7.362468,5.768946,-8.662249,-4.145594,-9.150580,-1.629459,7.096661,-8.639628,-0.273706,-3.505171,6.378434,2.670974,3.399688,2.537189,5.370047,2.932708,-4.874013,-2.649049,9.232570,-2.156124,7.977362,3.482204,-8.141984,9.269722,-6.516838,-7.760958,2.399300,6.514129,1.385031,-7.428251,-7.475402,-3.883833,3.121430,8.928919,4.122961,-1.209319,-4.197521,2.804959,0.317243,-0.244244,-9.009661,9.230067,-1.292831,5.004063,-8.860934,-1.683391,7.271849,9.144617,9.147678,-0.311683,-5.801852,7.137272,-0.655699,5.707392,5.703815,6.816901,-3.526439,0.660523,-3.154683,8.817626,5.674624,2.213369,-0.454235,3.135926,6.236290,-0.350477,-6.624200,1.637170,-4.042228,-8.071721,-5.352281,-5.137907,5.808058,6.050002,-6.360319,-9.867400,-0.541427,-0.589624,-0.016625,4.252738,1.485248,5.716235,5.669837,3.736518,-9.724695,-7.608283,7.665043,2.405431,-3.879642,-8.887247,1.966464,-0.871364,-2.008091,-0.630116,-0.588479,3.653436,7.616287,0.852555,3.900363,7.082333,4.862554,-2.903483,-9.499767,8.116542,-3.764114,7.847395,-8.047064,7.827177,-3.791567,3.247831,8.547845,8.807819,2.371282,-8.305514,2.047714,-0.764868,5.709725,2.118719,3.122156,-4.322553,8.228006,0.621224,-4.895053,-9.717841,1.276759,2.747005,-0.669539,9.091069,-2.353798,-4.286652,4.864951,-4.439377,6.220091,-1.154818,-0.913997,-0.633119,-9.593987,3.091484,8.607153,-8.320921,6.815911,7.344504,-7.398142,5.552861,-4.962741,-5.528169,1.812664,-5.085786,-6.480989,5.779926,-1.880339,-7.421271,4.870713,9.616720,-0.322200,4.315083,4.312874,9.349296,-2.897672,-2.404928,8.335515,-3.890419,3.937585,1.077716,-2.257151,-1.436850,6.272675,7.773486,-0.666232,9.561259,-3.989048,-8.385880,9.758830,5.762328,8.980259,6.356441,-9.842632,8.620711,-5.625087,-0.732053,5.022126,5.459414,2.351300,1.418821,1.509841,-3.866269,-7.721009,-3.899451,2.248882,9.121501,0.890360,4.412133,-5.948749,-5.792391,8.016297,5.873282,7.535097,2.276670,-2.703291,4.606046,0.874656,9.945712,-6.918988,-5.392085,-3.029408,-8.118276,-7.150447,4.232062,-7.433365,1.184994,-8.384150,-5.255476,-7.822303,9.323198,8.220824,-7.709819,-4.786785,-8.366252,3.849379,-4.852058,-3.758737,-7.955540,-2.314222,6.290932,4.731447,0.789055,-2.919749,2.508504,9.266169,5.560929,5.227406,-4.592683,3.443145,4.584009,6.018876,-3.847665,-1.173854,-0.755776,5.979224,-3.546982,-3.374034,-6.637213,2.477401,4.099209,-6.724358,7.465549,0.897839,-2.910064,-3.984363,2.470908,6.355696,9.796652,-0.590826,1.620719,-5.498030,-4.543437,8.240360,0.926502,1.749249,9.739893,3.578489,4.298551,-9.857498,2.745789,9.423833,-1.549263,9.401144,6.681963,8.268834,4.534448,-9.707990,1.248117,-9.095235,-6.755977,9.411997,-2.251247,6.197664,9.464335,6.214390,-7.641556,-3.213805,0.792003,2.464262,8.002357,5.667849,-1.523122,5.526386,0.032447,-7.279966,9.542174,-6.646391,-8.931613,5.729945,4.922382,-6.407605,-5.198425,1.061276,-8.141010,-0.709213,0.870673,-3.837915,0.777824,1.354657,-9.974849,-0.457628,-8.695889,4.666135,-9.051439,-3.143715,5.620105,-0.845275,3.694375,9.780309,-8.478367,-5.400777,-5.384615,9.463094,-6.601036,-0.026847,-2.308836,-5.476003,9.934986,3.884261,-2.738799,-6.853558,-0.679618,5.500447,-0.471178,-8.716366,-7.231971,-7.371432,8.453334,-9.549951,7.048139,-2.295561,-7.062494,-0.048058,-0.885080,3.624584,4.163770,-8.582473,-5.907961,-3.492406,9.278167,7.283754,7.949214,-1.968907,7.768531,-7.882426,1.666596,-2.201261,9.600549,-8.060046,-1.327356,-8.263967,1.286839,-2.706601,1.508369,-4.574770,2.395833,-9.720330,9.709243,6.779873,-4.540138,0.370814,5.125747,6.256996,-0.686359,-1.610649,0.895168,5.372786,-8.393108,3.066188,-8.492069,-4.979777,6.165353,-8.316208,5.126656,-8.446809,2.362531,1.410258,3.760656,9.394518,-8.268080,7.161315,-7.676269,-1.878079,-5.421761,-0.746405,6.737999,-8.153259,-2.728576,-9.314389,-5.458841,1.841331,-1.572329,-8.665819], dtype = "float64")#candidate|4583|(672,)|const|float64
const_4584 = relay.const([[False],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[True],[True],[True],[True],[False],[False],[False],[False],[False],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[False],[False],[False],[True],[False],[False],[True],[False],[False],[False],[False],[False],[False],[False],[False],[False],[False],[True],[False],[True],[True],[True],[True],[True],[False],[False],[False],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[False],[False],[True],[False],[True],[False],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[True],[False],[True],[True],[True],[False],[False],[False],[False],[False],[True],[False],[True],[True],[True],[True],[True],[False],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[False],[True],[False],[True],[True],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[False],[False],[False],[False],[True],[True],[False],[True],[True],[True],[True],[False],[False],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[True],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[False],[False],[True],[False],[True],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[True],[True],[False],[True],[True],[True],[False],[False],[False],[False],[False],[False],[False],[False],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[False],[True],[True],[False],[True],[True],[True],[False],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[False],[True],[True],[True],[True],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[True],[True],[False],[True],[False],[False],[False],[True],[True],[False],[False],[True],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[True],[True],[False],[True],[True],[False],[False],[True],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[True],[False],[True],[False],[False],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[True],[True],[False],[True],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[True],[True],[False],[False],[True],[True],[False],[False],[False],[True],[False],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[True],[False],[False],[False],[False],[False],[False],[True],[False],[True],[True],[False],[False],[False],[True],[False],[False],[False],[False],[False],[True],[False],[False],[False],[False],[True],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[True],[False],[False],[False],[False],[False],[False],[False],[True],[True],[False],[True],[False],[True],[True],[True],[True],[False],[False],[False],[True],[False],[False],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[True],[False],[True],[True],[False],[True],[False],[True],[True],[False],[True],[True],[True],[False],[False],[True],[False],[False],[False],[True],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[True],[True],[True],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[True],[False],[False],[True],[False],[False],[True],[True],[True],[True],[True],[False],[False],[False],[True],[True],[True],[False],[True],[False],[True],[True],[False],[True],[True],[False],[True],[False],[True],[True],[True],[False],[True],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[True],[True],[True],[True],[False],[False],[False],[True],[False],[True],[True],[False],[False],[True],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[False],[False],[False],[False],[True],[False],[True],[False],[False],[False],[False],[False],[False],[False],[False],[False],[True],[False],[False],[False],[True],[False],[False],[False],[False],[True],[False],[True],[True],[False],[True],[True],[False],[True],[True],[False],[True],[False],[False],[True],[False],[True],[True],[True],[True],[True],[True],[False],[True],[True],[False],[False],[False],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[False],[True],[False],[False],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[False],[True],[False],[True],[True],[True],[False],[True],[True],[False],[True],[False],[False],[True],[False],[False],[False],[False],[True],[False],[True],[False],[False],[True],[False],[False],[True],[False],[True],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False],[False],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[True],[False],[True],[False],[True],[True],[False],[True],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[False],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[False],[True],[False],[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[False],[False],[False],[False],[True],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[True],[False],[False],[True],[False],[True],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[True],[True],[False],[True],[False],[False],[True],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[True],[True],[False],[True],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[False],[True],[False],[True],[False],[True],[False],[True],[True],[True],[False],[True],[False],[True],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[True],[False],[False],[False],[True],[True],[False],[False],[True],[False],[True],[False],[False],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[False],[False],[False],[True],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[True],[True],[False],[True],[False],[True],[False],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[False],[False],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[False],[False],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[True],[True],[False],[False],[True],[False],[False],[True],[False],[True],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[False],[True],[False],[False],[False],[True],[True],[True],[False],[False],[False],[False],[False],[True],[False],[False],[False],[False],[True],[True],[True],[True],[True],[False],[True],[False],[False],[False],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[True],[True],[True],[False],[False],[True],[False],[True],[True],[False],[False],[True],[False],[False],[False],[False],[False],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[False],[True],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[True],[False],[False],[True],[False],[True],[False],[True],[True],[False],[False],[True],[True],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[False],[False],[False],[False],[True],[True],[True],[True],[True],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[False],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[True],[True],[False],[False],[True],[True],[True],[True],[True],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[False],[True],[False],[True],[False],[True],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[True],[True],[True],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[True],[False],[False],[False],[False],[False],[False],[True],[True],[True],[True],[True],[True],[False],[True],[False],[False],[True],[True],[False],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[False],[True],[False],[False],[False],[True],[True],[True],[False],[False],[True],[False],[False],[False],[True],[False],[True],[False],[False],[False],[False],[True],[True],[False],[True],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[True],[False],[False],[False],[False],[False],[True],[False],[False],[False],[False],[False],[True],[False],[False],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[True],[False],[False],[False],[True],[True],[False],[True],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[True],[True],[False],[False],[True],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[True],[False],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[True],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[True],[True],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[False],[True],[False],[False],[True],[True],[True],[True],[True],[True],[False],[True],[True],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[True],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[False],[True],[False],[True],[True],[True],[True],[True],[True],[False],[False],[False],[True],[False],[False],[False],[True],[True],[False],[True],[True],[True],[True],[False],[True],[False],[False],[True],[False],[True],[False],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[False],[True],[False],[True],[True],[False],[False],[False],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[True],[True],[False],[True],[True],[True],[True],[True],[False],[True],[False],[True],[True],[True],[True],[True],[True],[False],[True],[False],[False],[True],[False],[True],[False],[True],[False],[True],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[True],[False],[True],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[False],[True],[True],[False],[False],[True],[True],[True],[False],[False],[False],[True],[True],[True],[False],[False],[False],[False],[True],[True],[True],[True],[False],[False],[True],[False],[True],[False],[True],[True],[True],[True],[True],[True],[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[False],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[True],[True],[False],[True],[False],[False],[False],[True],[True],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[True],[True],[False],[True],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[False],[True],[False],[False],[True],[True],[False],[False],[True],[True],[True],[False],[True],[False],[True],[False],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[True],[True],[True],[True],[True],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[False],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[False],[True],[False],[False],[False],[False],[True],[False],[True],[True],[True],[True],[True],[True],[True],[True],[True],[True],[False],[False],[False],[False],[False],[False],[True],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[False],[True],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[False],[False],[False],[False],[False],[True],[False],[False],[False],[False],[False],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[True],[True],[True],[True],[False],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[False],[False],[True],[False],[True],[True],[False],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[False],[False],[True],[False],[True],[True],[True],[True],[False],[True],[True],[False],[False],[True],[True],[True],[True],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[False],[True],[False],[False],[True],[True],[True],[False],[False],[True],[False],[True],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[True],[True],[True],[False],[True],[True],[True],[False],[True],[True],[False],[False],[True],[True],[False],[False],[True],[False],[True],[False],[False],[False],[False],[False],[False],[True],[True],[False],[True],[False],[False],[False],[True],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[True],[True],[True],[False],[True],[False],[True],[False],[False],[True],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[True],[False],[True],[False],[True],[False],[True],[False],[True],[False],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[True],[True],[False],[False],[False],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[True],[False],[True],[False],[False],[False],[False],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[True],[True],[True],[False],[False],[True],[True],[True],[True],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[True],[False],[False],[True],[False],[False],[False],[True],[False],[True],[True],[False],[False],[False],[False],[False],[False],[False],[True],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[False],[True],[False],[True],[False],[False],[False],[False],[False],[False],[False],[True],[False],[True],[False],[True],[True],[False],[False],[True],[False],[False],[True],[False],[True],[True],[True]], dtype = "bool")#candidate|4584|(2730, 1)|const|bool
const_4585 = relay.const([-6.655712,9.925636,-6.986372,-8.989259,0.822255,-9.119710,-1.438859,2.686713,-0.318555,0.940005,-7.639021,-1.112353,3.910283,6.214998,-0.898865,-9.041407,4.889324,-7.529191,-9.519280,6.323088,-7.034557,1.182878,1.902801,-3.129976,-2.540073,-9.154402,2.589104,-2.104166,7.236192,6.335958,9.332638,-7.292667,-5.605064,6.466028,6.190817,-2.935078,-6.986443,5.386812,0.207056,7.317804,4.254828,-2.625392,-8.025161,8.461637,-6.026693,-9.999786,2.953889,-3.537269,7.093924,-9.186698,-2.284441,-8.299017,-7.901399,0.893919,9.071644,-8.884574,-7.325675,3.582274,4.298019,-7.900110], dtype = "float64")#candidate|4585|(60,)|const|float64
call_4579 = relay.TupleGetItem(func_4174_call(relay.reshape(const_4580.astype('float64'), []), relay.reshape(var_4581.astype('float64'), [1, 5]), relay.reshape(const_4582.astype('int32'), [64,]), relay.reshape(const_4583.astype('float64'), [672,]), relay.reshape(const_4584.astype('bool'), [2730,]), relay.reshape(const_4585.astype('float64'), [15, 4]), ), 0)
call_4586 = relay.TupleGetItem(func_4182_call(relay.reshape(const_4580.astype('float64'), []), relay.reshape(var_4581.astype('float64'), [1, 5]), relay.reshape(const_4582.astype('int32'), [64,]), relay.reshape(const_4583.astype('float64'), [672,]), relay.reshape(const_4584.astype('bool'), [2730,]), relay.reshape(const_4585.astype('float64'), [15, 4]), ), 0)
var_4590 = relay.var("var_4590", dtype = "bool", shape = (2730, 5))#candidate|4590|(2730, 5)|var|bool
bop_4591 = relay.greater(const_4584.astype('bool'), var_4590.astype('bool')) # shape=(2730, 5)
func_3845_call = mod.get_global_var('func_3845')
func_3847_call = mutated_mod.get_global_var('func_3847')
const_4596 = relay.const([[4,-7,-3,-4,-10,7,-8,-4,7,-8,-8,-3,-1,10,6,6,-1,6,-7,6,-3,-5,-10,-8,6,-7,-1,3,-5,1,-4,-3,9,10,10,-5,1,-5,-8,-9,7,9,10,9,5,-9,8,-6,9,-6,4,-3,-9,5,1,2,-3,7,2,-9,7,-6,9,-3,9,-9,-1,7,1,7,-9,-10,-9,4,-3,10,2,-5,7,-9,-9,9,-1,8,-10,3,-6,-2,2,-8,-10,4,-4,10,1,10,-10,-8,9,2,-2,9,-10,3,-6,6,9,5,-1,7,-6,1,-7,-6,6,-6,-5,-6,-5,-6,2,-6,-3,4,-9,7,-7,-1,7,1,-5,2,1,6,9,-8,5,-1,8,-4,4,10,2,-6,-1,2,3,6,4,-1,-4,-3,4,7,9,8,-5,-5,-2,-5,7,8,3,-3,8,1,4,10,10,-1,-3,10,-7,-6,-5,1,10,1,3,-4,9,-2,-1,-2,-4,-8,10,-6,5]], dtype = "int64")#candidate|4596|(1, 189)|const|int64
call_4595 = func_3845_call(relay.reshape(const_4596.astype('int64'), [9, 7, 3]))
call_4597 = func_3845_call(relay.reshape(const_4596.astype('int64'), [9, 7, 3]))
output = relay.Tuple([call_4571,call_4575,const_4576,call_4579,const_4580,var_4581,const_4582,const_4583,const_4585,bop_4591,call_4595,const_4596,])
output2 = relay.Tuple([call_4572,call_4577,const_4576,call_4586,const_4580,var_4581,const_4582,const_4583,const_4585,bop_4591,call_4597,const_4596,])
func_4598 = relay.Function([var_4581,var_4590,], output)
mod['func_4598'] = func_4598
mod = relay.transform.InferType()(mod)
mutated_mod['func_4598'] = func_4598
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4598_call = mutated_mod.get_global_var('func_4598')
var_4600 = relay.var("var_4600", dtype = "float64", shape = (1, 5))#candidate|4600|(1, 5)|var|float64
var_4601 = relay.var("var_4601", dtype = "bool", shape = (2730, 5))#candidate|4601|(2730, 5)|var|bool
call_4599 = func_4598_call(var_4600,var_4601,)
output = call_4599
func_4602 = relay.Function([var_4600,var_4601,], output)
mutated_mod['func_4602'] = func_4602
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4610 = relay.var("var_4610", dtype = "float64", shape = ())#candidate|4610|()|var|float64
const_4611 = relay.const([[[9.065967,5.393025,-0.974213],[-6.617397,4.777581,-8.099635],[7.077523,4.345294,-3.557091],[1.819798,8.334652,-8.841292],[0.919897,2.666284,8.212162],[0.143062,0.899277,-7.337393],[-1.977526,-3.920821,-7.107918],[-5.644764,-7.805881,1.624033],[-9.703214,-8.372971,-1.164284],[5.256114,-1.698614,-7.493172],[-1.402896,-0.499651,-5.751498],[5.008375,-9.926279,-7.085335],[-3.819670,-2.732142,4.574179],[-7.331855,1.938839,1.330792],[2.161727,3.642418,8.577833]],[[2.229635,-1.864521,-8.500517],[9.003374,3.820201,9.500055],[-9.671374,7.228185,-5.503544],[-4.770225,-5.264807,-3.584240],[1.640917,6.522387,4.722659],[-8.520957,-3.405739,6.114005],[-6.556388,-0.792335,-1.751454],[3.535837,-2.744086,3.452532],[0.929958,8.944463,6.118427],[-6.544542,1.564806,-8.260755],[-3.617207,-1.382066,6.253900],[6.056915,-1.352302,5.111646],[4.289362,2.205918,5.591629],[4.052798,2.966871,2.542952],[-7.567566,9.763094,1.327632]],[[-8.932293,8.226730,-5.232364],[-9.969907,-7.675626,5.503726],[7.971478,-9.665187,-0.062633],[-6.506642,6.130494,-3.222327],[-2.952662,-0.126721,1.784723],[9.280849,9.474654,-0.022606],[9.006804,-0.413913,2.193685],[-9.273389,-3.360608,2.388382],[-5.395084,-9.136373,6.470096],[-9.358095,3.276486,-1.556362],[-7.185754,5.662840,-6.068142],[5.685877,-2.326084,7.908267],[-3.344115,1.970062,-4.494095],[8.194718,-9.564854,-3.285259],[0.681897,2.095056,2.841481]],[[8.474520,-3.041963,-3.841954],[-1.613131,-7.383953,5.064918],[-8.424575,2.826150,-7.574789],[-4.485084,9.756541,-8.738396],[0.175020,-5.432171,-7.767944],[-9.586924,-6.717279,-9.843216],[0.826440,-4.608094,-2.270785],[5.864435,4.982693,-0.325403],[-3.001441,-3.516081,1.714105],[-3.587021,-0.870117,0.699457],[-5.270233,-1.718522,-1.718174],[5.655931,4.289926,-1.282643],[1.878979,-8.154683,-2.370593],[7.432062,8.562440,-7.468605],[-6.688459,9.991475,-9.856616]],[[0.530423,-0.926069,9.225857],[7.769827,-6.364826,-5.216727],[-7.705929,-2.141408,3.845663],[0.476513,-8.946376,-6.943525],[5.778453,9.237108,7.432982],[6.627467,-4.103372,-4.933963],[1.365107,5.125641,-8.871868],[-5.448153,2.697529,2.187529],[5.728016,4.115296,2.274646],[8.455793,-6.529974,-9.193773],[-3.621441,0.011152,3.393763],[-9.724665,2.829600,1.835946],[8.581759,-0.546798,-2.039151],[8.060479,-2.522994,1.367254],[-0.431084,-5.267647,5.515791]],[[-2.617593,-0.498686,3.737381],[4.382205,-7.364421,2.067774],[-9.972672,7.949451,6.295902],[-2.692065,-9.845247,-2.879093],[3.059981,-5.527138,4.363780],[-0.188229,4.973995,2.871374],[-1.180640,-8.317993,6.003643],[-5.637997,-3.766656,-8.405567],[-8.934244,5.924534,5.796013],[-7.680249,-7.457922,-6.854116],[2.353354,-6.002737,-8.447578],[6.521454,-8.914405,0.233820],[4.411155,-4.624717,-7.896833],[3.555157,3.807098,9.590938],[-9.992632,6.452387,-7.768787]],[[2.884714,-3.033567,-9.239252],[2.950248,-2.139742,6.266621],[-4.241251,2.732293,-3.582255],[2.668640,-9.402907,-7.573947],[-9.131507,-9.387928,-5.443564],[6.355040,-8.323628,7.115628],[-8.641509,-7.187707,-3.920005],[1.617197,-4.322542,3.790049],[-9.172430,-7.911610,-1.642358],[-4.952662,-6.985820,-9.303602],[2.069876,-9.520628,-7.582321],[-9.112749,-1.277652,0.745046],[-0.689929,2.664468,8.728078],[0.065058,-4.240747,6.207344],[4.326197,5.263041,-2.478216]],[[-3.787897,9.382313,4.791957],[-1.578127,8.563477,-8.571065],[0.232666,5.557711,0.728843],[-2.719296,-8.719013,-1.798308],[9.141011,3.195972,9.732881],[-1.160009,2.282547,-7.645922],[8.813081,-5.270576,-4.382738],[5.832668,0.721680,-2.531305],[-6.922533,2.569054,9.536672],[-9.756681,0.455623,1.940462],[9.117094,-9.471064,-7.685754],[8.503145,9.141888,-7.398259],[-7.052919,-8.175144,-5.758090],[-2.013415,7.669168,5.216329],[9.879667,7.537179,6.222171]],[[-1.327132,-9.777414,9.569594],[5.704236,2.522875,-4.718474],[-5.847238,6.118216,-8.098373],[-9.682621,-3.291228,-8.055337],[-7.391713,7.692926,4.546249],[2.402292,6.918985,-5.629959],[-3.529531,8.476966,6.386494],[5.783466,-2.975697,-7.197567],[-3.013113,9.516742,-9.644559],[-3.607006,-5.238877,-0.377674],[-9.498094,2.133327,2.273460],[-4.455166,9.581803,1.262332],[2.537461,1.092121,-7.092260],[-0.570467,-4.291707,8.654484],[0.727778,5.643593,-3.396882]],[[3.659578,2.198004,-8.439140],[5.114024,-6.712958,9.852540],[8.890582,-2.298866,-7.888547],[-3.472390,9.656424,9.184348],[2.576681,-1.109526,-8.680946],[-2.326656,0.810078,-3.343176],[-8.045046,-0.411866,-0.849670],[6.839616,-9.667261,-7.164343],[-2.929848,2.647342,2.192551],[-1.935041,-3.587760,-1.615677],[9.031069,-8.422258,-7.110028],[6.546464,-4.355133,-4.161902],[9.127156,-3.034353,4.786609],[-7.348916,5.342403,-1.789079],[-3.275391,7.544316,1.008738]]], dtype = "float64")#candidate|4611|(10, 15, 3)|const|float64
bop_4612 = relay.floor_mod(var_4610.astype('float64'), const_4611.astype('float64')) # shape=(10, 15, 3)
uop_4616 = relay.atanh(bop_4612.astype('float32')) # shape=(10, 15, 3)
output = relay.Tuple([uop_4616,])
output2 = relay.Tuple([uop_4616,])
func_4622 = relay.Function([var_4610,], output)
mod['func_4622'] = func_4622
mod = relay.transform.InferType()(mod)
mutated_mod['func_4622'] = func_4622
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4623 = relay.var("var_4623", dtype = "float64", shape = ())#candidate|4623|()|var|float64
func_4622_call = mutated_mod.get_global_var('func_4622')
call_4624 = func_4622_call(var_4623)
output = call_4624
func_4625 = relay.Function([var_4623], output)
mutated_mod['func_4625'] = func_4625
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4308_call = mod.get_global_var('func_4308')
func_4310_call = mutated_mod.get_global_var('func_4310')
call_4638 = func_4308_call()
call_4639 = func_4308_call()
func_443_call = mod.get_global_var('func_443')
func_445_call = mutated_mod.get_global_var('func_445')
const_4673 = relay.const([9.344555,9.363413,-3.692301,5.963838,8.270897,1.919151,-7.813725,4.471504,-1.205613,0.141830,-4.358856,6.494052,3.784104,-4.995101,-8.281237,4.827317,6.348042,3.083424,4.832045,-0.260033,-6.764979,-2.547329,3.562083,-1.097580,6.819457,-7.838504,-4.690009,-1.106466,6.020843,-9.138422,4.757063,-2.292331,-8.423589,-3.746662,-4.688732,-2.206097,-5.704240,5.186891,9.865237,3.577926,6.632536,-9.044378,-8.487328,2.338056,7.624667,4.494710,6.118854,4.788932,3.402799,5.088980,-3.843495,-3.674548,-0.169857,-2.067368,-9.548528,-8.274166,1.466676,9.496429,-4.262647,-0.383613,3.143266,-2.098617,1.895037,-9.169017,4.990108,-8.913556,-4.798764,-9.169233,-9.199918,-9.106963,-3.384576,-9.511977,1.262519,2.282610,-5.920248,8.627560,-5.622540,-0.358900,1.602728,-4.885828,-4.703830,-7.527031,-9.802266,8.124484,1.496401,5.222634,-1.082399,-1.851317,7.392980,9.340515,9.532419,5.143008,-0.299873,2.045601,4.800432,-8.957171,-6.804223,-8.723734,3.054758,4.296909,4.186583,2.475236,-9.305489,8.477351,6.694352,0.288346,6.116464,-9.614371,-2.216473,5.384761,-9.781564,3.985965,-1.237147,7.676537,0.939244,-5.389762,7.120792,-9.358423,1.488492,8.419774,9.344266,8.708279,-6.711044,-9.213572,4.999187,-6.110667,-1.029458,-7.075402,8.705144,-9.769680,-4.680083,9.051649,-1.639991,6.735904,4.369146,3.069253,7.833374,4.523102,-5.902741,-6.660757,7.750196,2.557138,-3.534281,-8.306018,1.553491,-7.970934,1.025761,0.243373,-9.829717,-6.354930,-2.021014,-5.286771,-6.432496,9.863809,5.003836,4.050940,-7.016746,-3.772640,-7.550857,-5.463050,-6.893244,-0.844621,-8.978194,2.132442,-0.009557,-0.390467,4.431977,8.567819,-9.963167,8.383741,-2.137321,-7.329312,4.630259,-3.302243,7.511997,-6.737639,6.102198,4.043054,-5.308258,-6.311997,-9.794586,0.793310,9.274491,-3.043984,4.231284,-7.718817,-3.596589,-7.912072,5.070969,8.371102,1.599034,-0.393225,-0.384395,-6.148931,8.077221,-2.329092,0.358843,9.133816,-9.000873,-2.622741,8.927218,7.738257,4.222220,-7.111734,-5.160409,6.281557,7.244284,3.436824,-6.406942,-1.692080,-7.424996,2.154256,7.267000,7.983146,-7.144319,3.861476,-3.003447,9.326262,3.771859,-9.809679,-9.918251,2.932690,-1.497490,7.527693,2.825150,-6.695769,-5.421946,8.471364,-0.105200,1.239795,3.147826,1.800640,-6.425118,7.081463,-9.703254,3.895100,-2.811790,-8.593498,4.424604,7.014318,7.996464,5.143353,4.624270,2.920068,7.824365,7.750823,-3.107031,-9.282723,2.192212,-3.338262,7.921411,-6.747214,-0.638018,-3.198051,9.056543,-7.338060,0.273335,-6.796022,1.099719,4.162033], dtype = "float64")#candidate|4673|(260,)|const|float64
call_4672 = relay.TupleGetItem(func_443_call(relay.reshape(const_4673.astype('float64'), [13, 5, 4])), 1)
call_4674 = relay.TupleGetItem(func_445_call(relay.reshape(const_4673.astype('float64'), [13, 5, 4])), 1)
output = relay.Tuple([call_4638,call_4672,const_4673,])
output2 = relay.Tuple([call_4639,call_4674,const_4673,])
func_4677 = relay.Function([], output)
mod['func_4677'] = func_4677
mod = relay.transform.InferType()(mod)
output = func_4677()
func_4678 = relay.Function([], output)
mutated_mod['func_4678'] = func_4678
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4566_call = mod.get_global_var('func_4566')
func_4568_call = mutated_mod.get_global_var('func_4568')
call_4731 = relay.TupleGetItem(func_4566_call(), 2)
call_4732 = relay.TupleGetItem(func_4568_call(), 2)
output = call_4731
output2 = call_4732
func_4743 = relay.Function([], output)
mod['func_4743'] = func_4743
mod = relay.transform.InferType()(mod)
mutated_mod['func_4743'] = func_4743
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4743_call = mutated_mod.get_global_var('func_4743')
call_4744 = func_4743_call()
output = call_4744
func_4745 = relay.Function([], output)
mutated_mod['func_4745'] = func_4745
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4743_call = mod.get_global_var('func_4743')
func_4745_call = mutated_mod.get_global_var('func_4745')
call_4785 = func_4743_call()
call_4786 = func_4743_call()
output = relay.Tuple([call_4785,])
output2 = relay.Tuple([call_4786,])
func_4790 = relay.Function([], output)
mod['func_4790'] = func_4790
mod = relay.transform.InferType()(mod)
mutated_mod['func_4790'] = func_4790
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4790_call = mutated_mod.get_global_var('func_4790')
call_4791 = func_4790_call()
output = call_4791
func_4792 = relay.Function([], output)
mutated_mod['func_4792'] = func_4792
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4556_call = mod.get_global_var('func_4556')
func_4557_call = mutated_mod.get_global_var('func_4557')
call_4793 = relay.TupleGetItem(func_4556_call(), 0)
call_4794 = relay.TupleGetItem(func_4557_call(), 0)
output = relay.Tuple([call_4793,])
output2 = relay.Tuple([call_4794,])
func_4795 = relay.Function([], output)
mod['func_4795'] = func_4795
mod = relay.transform.InferType()(mod)
output = func_4795()
func_4796 = relay.Function([], output)
mutated_mod['func_4796'] = func_4796
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4308_call = mod.get_global_var('func_4308')
func_4310_call = mutated_mod.get_global_var('func_4310')
call_4853 = func_4308_call()
call_4854 = func_4308_call()
func_4795_call = mod.get_global_var('func_4795')
func_4796_call = mutated_mod.get_global_var('func_4796')
call_4856 = relay.TupleGetItem(func_4795_call(), 0)
call_4857 = relay.TupleGetItem(func_4796_call(), 0)
output = relay.Tuple([call_4853,call_4856,])
output2 = relay.Tuple([call_4854,call_4857,])
func_4858 = relay.Function([], output)
mod['func_4858'] = func_4858
mod = relay.transform.InferType()(mod)
mutated_mod['func_4858'] = func_4858
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4858_call = mutated_mod.get_global_var('func_4858')
call_4859 = func_4858_call()
output = call_4859
func_4860 = relay.Function([], output)
mutated_mod['func_4860'] = func_4860
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4876 = relay.var("var_4876", dtype = "bool", shape = (14, 3, 8))#candidate|4876|(14, 3, 8)|var|bool
const_4877 = relay.const([[[True,True,False,False,True,True,False,False],[False,True,True,False,True,True,True,False],[True,True,True,False,True,False,False,False]],[[True,False,True,True,True,False,True,False],[True,True,False,False,False,False,False,True],[True,True,True,False,True,False,False,False]],[[True,False,False,True,False,True,True,True],[True,True,False,False,True,True,False,True],[False,False,True,False,False,False,True,True]],[[True,False,False,False,True,False,False,False],[False,True,True,False,False,True,True,True],[False,True,True,True,False,True,False,False]],[[True,False,True,True,False,False,False,True],[True,False,False,False,True,False,False,True],[True,False,False,True,True,True,False,True]],[[True,True,False,True,False,True,False,True],[True,True,False,True,True,True,False,False],[True,False,False,False,True,True,False,False]],[[True,False,False,False,True,False,True,False],[False,True,False,False,False,False,False,True],[True,False,False,False,True,True,True,True]],[[True,True,True,False,False,True,True,True],[True,True,True,True,True,False,True,True],[False,True,False,False,True,False,False,False]],[[False,False,True,False,True,False,True,True],[True,False,True,False,False,False,True,True],[True,True,False,True,True,False,False,True]],[[True,False,False,True,False,False,True,True],[False,False,True,False,False,False,True,False],[False,False,False,False,True,True,False,False]],[[False,False,True,False,False,False,True,False],[False,True,True,True,True,False,False,False],[True,True,False,True,True,True,True,True]],[[True,True,False,False,True,False,True,True],[False,False,True,True,False,True,True,True],[False,False,False,False,False,False,False,True]],[[True,False,True,False,True,False,True,False],[False,True,True,True,True,False,False,False],[False,False,True,True,True,False,False,True]],[[False,False,True,False,False,True,False,True],[True,True,True,False,True,False,True,True],[False,False,False,True,False,True,True,False]]], dtype = "bool")#candidate|4877|(14, 3, 8)|const|bool
bop_4878 = relay.logical_and(var_4876.astype('bool'), relay.reshape(const_4877.astype('bool'), relay.shape_of(var_4876))) # shape=(14, 3, 8)
func_3632_call = mod.get_global_var('func_3632')
func_3634_call = mutated_mod.get_global_var('func_3634')
var_4889 = relay.var("var_4889", dtype = "int8", shape = (624,))#candidate|4889|(624,)|var|int8
call_4888 = relay.TupleGetItem(func_3632_call(relay.reshape(var_4889.astype('int8'), [312, 2])), 3)
call_4890 = relay.TupleGetItem(func_3634_call(relay.reshape(var_4889.astype('int8'), [312, 2])), 3)
func_4622_call = mod.get_global_var('func_4622')
func_4625_call = mutated_mod.get_global_var('func_4625')
var_4893 = relay.var("var_4893", dtype = "float64", shape = ())#candidate|4893|()|var|float64
call_4892 = relay.TupleGetItem(func_4622_call(relay.reshape(var_4893.astype('float64'), [])), 0)
call_4894 = relay.TupleGetItem(func_4625_call(relay.reshape(var_4893.astype('float64'), [])), 0)
func_4622_call = mod.get_global_var('func_4622')
func_4625_call = mutated_mod.get_global_var('func_4625')
call_4933 = relay.TupleGetItem(func_4622_call(relay.reshape(var_4893.astype('float64'), [])), 0)
call_4934 = relay.TupleGetItem(func_4625_call(relay.reshape(var_4893.astype('float64'), [])), 0)
func_4743_call = mod.get_global_var('func_4743')
func_4745_call = mutated_mod.get_global_var('func_4745')
call_4936 = func_4743_call()
call_4937 = func_4743_call()
func_3341_call = mod.get_global_var('func_3341')
func_3345_call = mutated_mod.get_global_var('func_3345')
const_4942 = relay.const([-3,3,6,-2,-5,-1,5,6,1,6,-3,-9,4,-4,6,-7,2,6,5,1,4,8,7,3,-6,-8,-9,-7,-4,2,-2,9,-10,-4,-3,-4,10,-6,-8,4,7,-4,-1,-1,-1,3,3,-9,-8,-7,-9,-10,5,-5,5,10,3,10,6,-7,6,10,3,-2,4,2,2,-4,7,1,-9,6,6,6,-9,1,-4,-7,-2,-9,-6,-2,4,5,-3,5,-9,6,9,9,4,7,1,-6,-1,-1,-8,7,-7,3,-1,6,1,9,-1,-2,-10,-2,1,6,-4,10,10,-4,-10,-10,9,-4,5,2,2,10,3,5,-1,7,-7,-9,-4,5,2,-6,-9,-3,2,8,-9,7,2,5,2,1,9,-6,3,-5,-5,9,-1,-8,-6,-8,5,-7,7,2,-6,-7,-3,5,4,-4,-5,3,-3,-9,-7,6,-2,1,-8,7,6,-8,8,-6,7,1,2,6,-7,6,1,10,-8,-3,5,-2,-3,-1,-6,-3,-8,-5,-2,-8,7,5,-8,5,7,4,-7,5,7,-1,5,-5,10,-3,-4,-1,5,-1,2,-10,-4,-3,1,1,3,10,-7,1,7,-10,-5,2,-9,-4,10,2,-10,-5,10,-10,9,3,7,3,-5,4,4,-9,-10,-3,-1,-6,-9,-4,10,-4,-4,-5,8,-4,1,-5,6,7,9,8,-7,2,9,5,-10,8,-5,-6,1,7,9,-6,-8,-1,-4,-8,7,-5,6,6,8,-1,-7,7,8,-9,-8,2,-7,-6,3,-10,-3,-9,-4,6,-8,-6,-5,-4,-6,10,7,3,-4,-3,-2,9,9,-6,-2,-4,9,-7,2,7,-2,6,-8,1,6,1,10,-3,8,1,-2,-10,6,7,-7,-8,3,8,10,3,7,6,-4,6,10,1,6,-5,9,10,10,6,-1,5,6,-9,-4,10,-6,1,6,10,-5,4,-8,-1,2,4,-4,5,8,2,-9,-9,3,-10,2,-10,-6,-3,9,-5,-3,-4,-5,-8,-3,5,5,8,4,6,10,2,-2,-10,-9,4,3,9,-9,1,9,7,-9,-1,-4,6,-5,-2,3,10,9,4,-3,10,-1,-7,6,-6,8,-8,4,-10,4,8,6,-1,-1,4,1,-8,-4,5,-9,-7,-8,-1,2,-3,-3,-6,-8,-3,4,-5,-3,9,7,1,5,-3,4,-5,-7,-5,-9,1,-7,-8,-4,-8,-5,-4,1,8,-5,6,5,6,-10,-4,1,6,-10,1,-5,-10,-5,3,-2,-1,2,-6,1,-10,-4,-9,10,5,10,-3,-4,-7,9,-7,1,-6,7,1,-6,8,7,-7,3,-8,-7,-9,-6,-1,6,-4,8,-1,3,-3,-5,1,8,-1,-9,1,-10,8,-7,-8,9,-2,-3,-3,9,7,9,-7,7,6,-5,-3,-9,10,2,-9,-10,-1,7,1,-4,-1,-10,9,-6,-5,-4,-5,-3,-1,3,-7,2,-5,-4,7,7,-10,-6,-4,6,3,-2,-4,-1,10,-4,6,7,-7,10,-10,3,1,8,2,-7,-5,1,-3,-4,-8,-10,-6,-8,1,-8,2,-8,1,-10,-2,-5,-5,-6,-1,-1,-7,-5,-9,8,8,10,9,5,-6,2,2,-4,-6,-5,-9,7,-9,-2,7,8,-6,-7,6,7,-7,-1,8,7,-6,-2,1,4,6,-8,-6,8,7,-8,-7,7,4,4,5,-6,8,-9,-1,-8,-9,-8,5,6,9,-4,-9,-2,-1,4,8,9,10,-4,1,8,10,-4,1,-6,-5,9,-3,6,-7,-10,-10,2,6,-1,-10,8,6,-5,-5,-9,3,-4,-9,8,9,-5,-6,-9,3,-1,10,4,-3,-10,2,-9,-7,1,1,6,-1,9,7,2,-7,-4,-4,10,9,-6,-1,-8,-5,-8,2,8,-4,1,-4,-1,7,9,-6,-7,-1,10,7,2,-8,-2,-4,-6,-7,10,-9,4,8,7,4,-3,-8,-7,-10,9,-9,10,1,-2,2,-2,2,-9,1,8,-10,10,-3,-5,8,-3,-6,2,9,-8,5,4,-7,-2,10,2,1,10,-1,-7,8,7,2,-1,-3,-2,10,10,10,4,9,10,9,4,-2,10,10,5,-7,1,-7,10,10,5,-9,-1,-6,-8,10,7,-4,3,-4,-4,-7,9,-1,-3,7,2,-4,6,-4,7,8,-6,-2,-4,9,5,6,-2,-5,7,-1,-9,2,7,10,9,-9,-10,-6,-7,-4,-9,-8,-5,-5,8,3,-1,5,-2,3,4,-6,2,9,-7,2,5,-8,-7,-5,7,4,-5,-7,3,8,-9,-2,-8,-10,7,-10,4,-3,1,5,5,7,8,7,-1,9,-1,2,-3,2,-6,10,-2,-2,10,10,-7,-7,8,-6,-9,10,-5,9,9,-8,6,7,-3,-1,-8,-2,8,2,3,7,-3,4,-1,8,4,5,7,10,-10,-5,-3,-3,-6,7,3,3,-2,7,-10,3,4,8,9,9,10,-8,-1,-4,-8,-6,6,8,-8,9,-2,4,10,5,-9,-9,-10,-1,-9,-10,5,-7,-7,7,2,5,-10,-9,-10,-10,-1,-7,-5,4,1,-1,1,-7,5,-4,-2,2,-8,10,7,7,8,-1,-4,9,10,-4,-7,9,-5,-10,2,8,-3,9,8,-8,-2,1,5,-1,-9,-3,-8,-10,-5,-9,-2,-8,5,7,-5,-2,-3,5,3,10,-3,-8,-7,-3,9,-3,10,10,-9,1,-9,3,5,9,-3,10,5,-6,-6,-7,10,-8,1,8,-4,-6,-1,6,-6,-6,7,5,-3,4,-10,4,3,2,1,-6,8,-9,-10,9,-1,4,-10,-10,10,10,-9,1,6,7,-3,2,6,10,-6,1,3,-5,-6,4,1,7,-8,-1,2,-4,1,-6,-7,3,7,-5,1,3,-7,5,-3,-5,3,-7,-1,1,7,9,6,-1,5,-5,-6,-4,-7,10,-5,3,10,-6,3,5,7,-5,-5,7,-2,6,1,2,3,8,-6,8,2,-9,1,4,9,2,8,3,10,-2,1,8,6,4,8,-10,-5,-5,4,-6,-1,-8,-6,10,2,6,6,9,-2,3,-4,10,1,-8,5,9,-2,4,8,3,-6,7,-7,-3,1,8,-7,7,-2,-5,8,-2,1,-8,9,-10,2,-8,-6,-7,5,2,-2,1,3,2,2,-2,9,3,-1,7,-2,2,4,-5,-5,-2,-6,-2,1,-10,7,5,2,-7,2,-6,-7,-2,-8,-9,-4,9,-3,8,-4,-6,-2,8,-10,-7,-7,7,-1,-4,-6,9,3,9,-10,10,7,4,1,-3,7,3,3,7,-9,-1,3,4,-2,1,-9,-4,1,8,-2,-2,3,2,-5,9,3,10,2,1,4,5,-5,2,9,-5,-2,-9,-2,8,1,5,9,-9,9,4,3,9,-8,-1,10,7,5,-7,-6,-8,4,2,-9,4,-2,1,10,3,-10,5,4,-4,-6,6,7,1,-7,3,-6,4,-7,-5,-7,-5,7,-9,-1,-10,5,1,1,-1,6,6,3,4,-7,7,9,2,-9,7,-5,9,4,-2,-3,-5,9,3,-5,3,5,-7,9,2,-10,10,-7,-5,-10,-8,-8,-1,4,10,-2,1,-1,4,8,2,7,1,-2,7,-3,-2,-7,9,-1,-3,10,-2,4,2,4,-10,-5,-8,-7,-8,9,-1,-7,10,-9,-10,-8,-3,10,4,9,-8,-5,3,1,-2,3,9,-6,-5,1,-8,-2,9,6,8,7,4,-2,4,8,6,-3,-1,-3,6,6,2,2,-9,-7,6,5,-4,6,-10,5,-8,-10,-7,-5,-6,-6,-8,10,-9,-4,-10,4,6,3,-4,4,7,1,7,-7,-9,-1,-3,2,-9,6,5,-3,-10,9,-7,8,-4,-7,4,-4,-9,10,6,-6,10,4,4,8,-6,-9,-9,6,-5,4,1,4,5,-3,-8,5,3,-5,7,-2,-10,7,-8,-3,-9,2,-7,1,-10,4,-5,6,-8,-6,2,-1,1,-2,-2,9,5,9,-8,5,-7,6,8,2,10,-3,10,-7,-2,7,7,3,-7,-4,-7,5,-6,5,-2,9,9,-6,-8,7,3,3,-1,-10,3,5,10,1,2,1,-5,6,4,2,-5,1,-2,-8,1,3,-3,-3,10,-1,9,4,2,-9,-4,-8,9,-8,4,-6,-7,10,-7,3,6,-10,7,3,6,8,1,10,7,-3,-6,-9,-7,-1,1,-2,9,4,-7,-7,-8,-4,3,1,2,3,2,-10,-1,3,-6,-1,-8,3,3,-10,-7,2,-10,1,8,9,6,-8,10,-8,-8,-1,5,4,4,-9,-10,-10,-7,-4,5,-4,5,-7,-5,1,-4,-10,8,7,7,2,10,-10,5,9,-7,10,-6,7,1,-5,-2,-4,-8,-2,-8,2,8,-2,-6,-2,5,-5,8,2,-9,2,3,-2,6,6,8,-1,-10,9,3,8,-3,9,-4,1,-10,-5,-1,-4,8,-3,7,-3,7,4,-3,-10,-7,10,-1,-5,5,6,4,5,9,8,-3,7,-3,2,3,-2,2,-2,-2,6,4,3,5,1,7,-1,10,-10,9,1,-5,-4,7,-2,2,6,3,5,-7,-1,6,5,-10,-1,9,10,-6,-3,-2,-2,4,-10,7,-4,-2,1,6,5,10,-6,-9,3,3,-10,2,9,10,-4,5,-3,2,6,-9,6,9,8,-10,-5,8,8,-7,-7,-6,-6,-8,1,-5,8,8,-3,7,6,4,-10,9,4,5,-5,-2,-4,-3,10,2,4,-3,-8,10,-10,9,7,-10,-6,-2,-7,-5,7,-6,6,5,1,-8,-2,6,3,2,3,-10,-6,-9,9,4,2,2,-1,9,-9,-10,5,3,-1,-5,6,3,-2,-6,6,6,1,7,7,3,-3,6,-1,4,-3,-6,8,4,-2,10,10,8,-6,-5,-9,10,5,9,-5,10,4,1,-7,-10,5,9,-8,9,9,8,6,1,-5,9,-1,-2,-7,7,-7,-3,8,10,-6,-9,-4,-5,6,2,-6,3,-2,-2,-7,-4,-7,9,-8,1,-7,-3,9,1,-3,9,6,7,-9,10,2,-10,-1,-4,5,7,6,-3,7,2,-9,-1,5,6,1,-9,7,1,8,1,9,-7,7,9,6,-7,-4,-3,-10,-2,2,-3,-1,-1,10,-4,9,3,5,-9,5,7,6,-6,-8,7,-10,-3,5,-9,3,3,9,7,9,-5,3,4,4,6,-10,4,-3,10,8,-2,-5,4,-2,5,8,-8,4,10,1,9,-9,1,9,-10,1,9,-1,-7,3,-4,4,2,3,-7,8,-8,-9,8,2,-5,2,-8,-7,5,9,-3,-3,-4,-6,3,-6,-10,-1,1,6,4,-9,10,7,8,-9,2,5,-8,-4,-5,-1,-5,1,4,3,-5,2,8,3,9,6,-3,5,2,-10,2,-9,-4,5,8,-7,10,-10,-1,6,-6,1,-3,-1,-8,1,-4,8,-3,-7,-1,-7,6,-1,2,-6,8,-8,-4,6,-1,5,-1,3,-8,-6,7,-1,-1,-9,-8,1,-4,8,9,-3,3,6,-3,-8,1,1,9,2,-2,3,8,7,5,2,-1,4,3,8,1,6,-3,-2,6,-4,-5,-2,3,4,5,9,3,10,3,1,-7,6,3,-2,-9,9,3,6,-1,3,-10,-3,-6,-6,-2,-3,-3,9,-6,-7,9,-9,-7,8,9,5,-4,10,-1,8,-5,-2,-9,-6,-4,-10,-9,5,7,-8,-7,-6,1,-2,4,8,1,8,1,-5,-7,7,-3,1,-8,-6,2,-7,-8,7,-8,-9,-5,9,3,2,-8,-3,3,-2,-5,-9,10,1,-2,-10,-5,1,8,-9,-5,-10,-2,-5,8,-10,-8,1,-3,-6,5,9,-4,2,-10,4,2,10,6,-10,7,-9,-9,10,7,10,9,1,-8,7,4,5,5,1,-5,10,-3,4,1,5,-10,-9,-4,6,3,-2,-7,2,-4,-5,-4,-10,6,-10,-8,5,9,10,-4,5,-10,-2,-4,8,5,-9,-10,7,-3,-3,1,-2,3,4,-6,3,-6,2,-9,-7,8,5,-5,6,-9,-10,8,-1,-3,6,-3,-5,4,-6,8,7,-1,5,-7,5,-9,-6,-8,8,1,-9,5,-1,1,-1,-3,6,3,2,-2,7,4,8,2,3,2,-8,-8,-5,8,-8,6,-7,-7,10,5,-1,-3,-1,9,-8,8,7,5,-2,7,4,-8,-4,-7,4,-4,-3,8,-1,9,-5,3,10,-3,1,-6,3,3,9,-2,3,10,4,-9,-2,-4,5,10,-5,2,2,10,-2,-3,-4,5,-4,3,-2,2,-3,2,4,-5,-4,-7,-5,-4,-10,9,3,-1,-1,-6,1,1,-4,3,-5,-9,5,7,-2,8,-7,8,-5,8,5,10,-2,9,-4,-4,-1,9,-10,8,7,-6,7,4,-4,7,-8,5,-6,6,9,8,-4,5,-3,-7,-3,5,-8,-1,5,4,-4,3,-5,1,-10,3,-8,-9,-5,3,1,9,7,2,9,5,-6,3,-9,7,-5,-5,-1,4,-3,4,-5,3,-5,3,-2,-5,-9,2,-5,9,-9,3,-1,6,3,9,-4,-9,-9,1,5,2,6,-1,-4,3,7,3,-4,-3,2,-7,6,5,10,-9,-2,8,6,3,2,-5,-3,-6,-9,5,10,-8,-8,4,-7,-5,-5,-10,-4,2,10,-6,6,-1,-10,-8,8,9,-7,6,-5,6,5,2,1,-7,1,-6,-5,4,5,6,-8,-9,-5,2,5,-9,-5,2,-4,9,-2,4,3,-1,-10,2,-1,4,8,-5,3,5,-4,4,-6,3,7,3,5,-8,10,-4,3,-6,-5,5,-4,6,7,-8,-4,-9,10,2,-6,2,-10,-7,-8,3,-4,1,-9,6,10,9,6,-4,-9,-2,7,-3,10,-2,-2,2,-5,4,2,2,-5,-6,8,-5,-6,-4,-1,-10,4,1,-6,2,6,7,-5,1,-9,-8,5,-4,2,-4,2,6,-5,-3,-8,4,10,-5,8,4,-1,4,10,6,5,-5,-1,4,5,-9,-2,-10,-2,-9,9,10,10,5,-2,-1,9,4,6,8,-5,8,-7,2,-3,2], dtype = "int64")#candidate|4942|(2700,)|const|int64
call_4941 = relay.TupleGetItem(func_3341_call(relay.reshape(const_4942.astype('int64'), [15, 15, 12]), relay.reshape(const_4942.astype('int64'), [15, 15, 12]), relay.reshape(const_4942.astype('int8'), [15, 15, 12]), ), 6)
call_4943 = relay.TupleGetItem(func_3345_call(relay.reshape(const_4942.astype('int64'), [15, 15, 12]), relay.reshape(const_4942.astype('int64'), [15, 15, 12]), relay.reshape(const_4942.astype('int8'), [15, 15, 12]), ), 6)
var_4957 = relay.var("var_4957", dtype = "bool", shape = (14, 3, 8))#candidate|4957|(14, 3, 8)|var|bool
bop_4958 = relay.floor_mod(const_4877.astype('float64'), relay.reshape(var_4957.astype('float64'), relay.shape_of(const_4877))) # shape=(14, 3, 8)
output = relay.Tuple([bop_4878,call_4888,var_4889,call_4892,var_4893,call_4933,call_4936,call_4941,const_4942,bop_4958,])
output2 = relay.Tuple([bop_4878,call_4890,var_4889,call_4894,var_4893,call_4934,call_4937,call_4943,const_4942,bop_4958,])
func_4993 = relay.Function([var_4876,var_4889,var_4893,var_4957,], output)
mod['func_4993'] = func_4993
mod = relay.transform.InferType()(mod)
var_4994 = relay.var("var_4994", dtype = "bool", shape = (14, 3, 8))#candidate|4994|(14, 3, 8)|var|bool
var_4995 = relay.var("var_4995", dtype = "int8", shape = (624,))#candidate|4995|(624,)|var|int8
var_4996 = relay.var("var_4996", dtype = "float64", shape = ())#candidate|4996|()|var|float64
var_4997 = relay.var("var_4997", dtype = "bool", shape = (14, 3, 8))#candidate|4997|(14, 3, 8)|var|bool
output = func_4993(var_4994,var_4995,var_4996,var_4997,)
func_4998 = relay.Function([var_4994,var_4995,var_4996,var_4997,], output)
mutated_mod['func_4998'] = func_4998
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4556_call = mod.get_global_var('func_4556')
func_4557_call = mutated_mod.get_global_var('func_4557')
call_5010 = relay.TupleGetItem(func_4556_call(), 0)
call_5011 = relay.TupleGetItem(func_4557_call(), 0)
output = relay.Tuple([call_5010,])
output2 = relay.Tuple([call_5011,])
func_5014 = relay.Function([], output)
mod['func_5014'] = func_5014
mod = relay.transform.InferType()(mod)
output = func_5014()
func_5015 = relay.Function([], output)
mutated_mod['func_5015'] = func_5015
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5019 = relay.var("var_5019", dtype = "float32", shape = (1, 5, 7))#candidate|5019|(1, 5, 7)|var|float32
uop_5020 = relay.tan(var_5019.astype('float32')) # shape=(1, 5, 7)
uop_5025 = relay.asin(uop_5020.astype('float32')) # shape=(1, 5, 7)
func_1573_call = mod.get_global_var('func_1573')
func_1576_call = mutated_mod.get_global_var('func_1576')
var_5031 = relay.var("var_5031", dtype = "float32", shape = (462,))#candidate|5031|(462,)|var|float32
call_5030 = relay.TupleGetItem(func_1573_call(relay.reshape(var_5031.astype('float32'), [6, 7, 11]), relay.reshape(var_5031.astype('float32'), [6, 7, 11]), ), 0)
call_5032 = relay.TupleGetItem(func_1576_call(relay.reshape(var_5031.astype('float32'), [6, 7, 11]), relay.reshape(var_5031.astype('float32'), [6, 7, 11]), ), 0)
bop_5033 = relay.bitwise_xor(uop_5025.astype('uint8'), relay.reshape(uop_5020.astype('uint8'), relay.shape_of(uop_5025))) # shape=(1, 5, 7)
uop_5049 = relay.asinh(bop_5033.astype('float32')) # shape=(1, 5, 7)
output = relay.Tuple([call_5030,var_5031,uop_5049,])
output2 = relay.Tuple([call_5032,var_5031,uop_5049,])
func_5058 = relay.Function([var_5019,var_5031,], output)
mod['func_5058'] = func_5058
mod = relay.transform.InferType()(mod)
mutated_mod['func_5058'] = func_5058
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5058_call = mutated_mod.get_global_var('func_5058')
var_5060 = relay.var("var_5060", dtype = "float32", shape = (1, 5, 7))#candidate|5060|(1, 5, 7)|var|float32
var_5061 = relay.var("var_5061", dtype = "float32", shape = (462,))#candidate|5061|(462,)|var|float32
call_5059 = func_5058_call(var_5060,var_5061,)
output = call_5059
func_5062 = relay.Function([var_5060,var_5061,], output)
mutated_mod['func_5062'] = func_5062
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5067 = relay.var("var_5067", dtype = "uint64", shape = (14, 4, 9))#candidate|5067|(14, 4, 9)|var|uint64
var_5068 = relay.var("var_5068", dtype = "uint64", shape = (14, 4, 9))#candidate|5068|(14, 4, 9)|var|uint64
bop_5069 = relay.right_shift(var_5067.astype('uint64'), relay.reshape(var_5068.astype('uint64'), relay.shape_of(var_5067))) # shape=(14, 4, 9)
output = bop_5069
output2 = bop_5069
func_5073 = relay.Function([var_5067,var_5068,], output)
mod['func_5073'] = func_5073
mod = relay.transform.InferType()(mod)
mutated_mod['func_5073'] = func_5073
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5073_call = mutated_mod.get_global_var('func_5073')
var_5075 = relay.var("var_5075", dtype = "uint64", shape = (14, 4, 9))#candidate|5075|(14, 4, 9)|var|uint64
var_5076 = relay.var("var_5076", dtype = "uint64", shape = (14, 4, 9))#candidate|5076|(14, 4, 9)|var|uint64
call_5074 = func_5073_call(var_5075,var_5076,)
output = call_5074
func_5077 = relay.Function([var_5075,var_5076,], output)
mutated_mod['func_5077'] = func_5077
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4790_call = mod.get_global_var('func_4790')
func_4792_call = mutated_mod.get_global_var('func_4792')
call_5095 = relay.TupleGetItem(func_4790_call(), 0)
call_5096 = relay.TupleGetItem(func_4792_call(), 0)
func_790_call = mod.get_global_var('func_790')
func_794_call = mutated_mod.get_global_var('func_794')
const_5113 = relay.const([True,False,True,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,True,False,False,True,False,False,True,False,True,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,False,True,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False], dtype = "bool")#candidate|5113|(2730,)|const|bool
call_5112 = relay.TupleGetItem(func_790_call(relay.reshape(const_5113.astype('bool'), [14, 13, 15]), relay.reshape(const_5113.astype('bool'), [14, 13, 15]), relay.reshape(call_5095.astype('float64'), [60,]), ), 1)
call_5114 = relay.TupleGetItem(func_794_call(relay.reshape(const_5113.astype('bool'), [14, 13, 15]), relay.reshape(const_5113.astype('bool'), [14, 13, 15]), relay.reshape(call_5095.astype('float64'), [60,]), ), 1)
func_4858_call = mod.get_global_var('func_4858')
func_4860_call = mutated_mod.get_global_var('func_4860')
call_5115 = relay.TupleGetItem(func_4858_call(), 0)
call_5116 = relay.TupleGetItem(func_4860_call(), 0)
func_1745_call = mod.get_global_var('func_1745')
func_1748_call = mutated_mod.get_global_var('func_1748')
var_5120 = relay.var("var_5120", dtype = "float64", shape = (672,))#candidate|5120|(672,)|var|float64
call_5119 = relay.TupleGetItem(func_1745_call(relay.reshape(var_5120.astype('float64'), [6, 16, 7])), 0)
call_5121 = relay.TupleGetItem(func_1748_call(relay.reshape(var_5120.astype('float64'), [6, 16, 7])), 0)
func_4174_call = mod.get_global_var('func_4174')
func_4182_call = mutated_mod.get_global_var('func_4182')
const_5125 = relay.const(-2.283240, dtype = "float64")#candidate|5125|()|const|float64
const_5126 = relay.const([[1.511880],[0.358481],[5.782501],[-9.780697],[7.664501]], dtype = "float64")#candidate|5126|(5, 1)|const|float64
const_5127 = relay.const([-2,-4,-3,-3,2,-8,-10,-2,-3,9,9,8,-5,-9,10,-1,-2,-9,7,-2,9,9,-6,10,-2,-3,5,10,-8,-5,6,3,1,3,-5,9,4,-5,-9,-2,-2,-3,6,-8,-10,-5,1,4,-9,3,9,7,-10,-6,7,-9,10,-7,5,3,10,-2,5,4], dtype = "int32")#candidate|5127|(64,)|const|int32
call_5124 = relay.TupleGetItem(func_4174_call(relay.reshape(const_5125.astype('float64'), []), relay.reshape(const_5126.astype('float64'), [1, 5]), relay.reshape(const_5127.astype('int32'), [64,]), relay.reshape(var_5120.astype('float64'), [672,]), relay.reshape(const_5113.astype('bool'), [2730,]), relay.reshape(call_5095.astype('float64'), [15, 4]), ), 12)
call_5128 = relay.TupleGetItem(func_4182_call(relay.reshape(const_5125.astype('float64'), []), relay.reshape(const_5126.astype('float64'), [1, 5]), relay.reshape(const_5127.astype('int32'), [64,]), relay.reshape(var_5120.astype('float64'), [672,]), relay.reshape(const_5113.astype('bool'), [2730,]), relay.reshape(call_5095.astype('float64'), [15, 4]), ), 12)
output = relay.Tuple([call_5095,call_5112,const_5113,call_5115,call_5119,var_5120,call_5124,const_5125,const_5126,const_5127,])
output2 = relay.Tuple([call_5096,call_5114,const_5113,call_5116,call_5121,var_5120,call_5128,const_5125,const_5126,const_5127,])
func_5137 = relay.Function([var_5120,], output)
mod['func_5137'] = func_5137
mod = relay.transform.InferType()(mod)
mutated_mod['func_5137'] = func_5137
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5138 = relay.var("var_5138", dtype = "float64", shape = (672,))#candidate|5138|(672,)|var|float64
func_5137_call = mutated_mod.get_global_var('func_5137')
call_5139 = func_5137_call(var_5138)
output = call_5139
func_5140 = relay.Function([var_5138], output)
mutated_mod['func_5140'] = func_5140
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4858_call = mod.get_global_var('func_4858')
func_4860_call = mutated_mod.get_global_var('func_4860')
call_5166 = relay.TupleGetItem(func_4858_call(), 1)
call_5167 = relay.TupleGetItem(func_4860_call(), 1)
var_5168 = relay.var("var_5168", dtype = "float64", shape = (16, 11, 15))#candidate|5168|(16, 11, 15)|var|float64
bop_5169 = relay.floor_mod(call_5166.astype('float32'), relay.reshape(var_5168.astype('float32'), relay.shape_of(call_5166))) # shape=(16, 11, 15)
bop_5172 = relay.floor_mod(call_5167.astype('float32'), relay.reshape(var_5168.astype('float32'), relay.shape_of(call_5167))) # shape=(16, 11, 15)
var_5181 = relay.var("var_5181", dtype = "float64", shape = (16, 11, 15))#candidate|5181|(16, 11, 15)|var|float64
bop_5182 = relay.left_shift(call_5166.astype('int32'), relay.reshape(var_5181.astype('int32'), relay.shape_of(call_5166))) # shape=(16, 11, 15)
bop_5185 = relay.left_shift(call_5167.astype('int32'), relay.reshape(var_5181.astype('int32'), relay.shape_of(call_5167))) # shape=(16, 11, 15)
output = relay.Tuple([bop_5169,bop_5182,])
output2 = relay.Tuple([bop_5172,bop_5185,])
func_5192 = relay.Function([var_5168,var_5181,], output)
mod['func_5192'] = func_5192
mod = relay.transform.InferType()(mod)
var_5193 = relay.var("var_5193", dtype = "float64", shape = (16, 11, 15))#candidate|5193|(16, 11, 15)|var|float64
var_5194 = relay.var("var_5194", dtype = "float64", shape = (16, 11, 15))#candidate|5194|(16, 11, 15)|var|float64
output = func_5192(var_5193,var_5194,)
func_5195 = relay.Function([var_5193,var_5194,], output)
mutated_mod['func_5195'] = func_5195
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4566_call = mod.get_global_var('func_4566')
func_4568_call = mutated_mod.get_global_var('func_4568')
call_5233 = relay.TupleGetItem(func_4566_call(), 0)
call_5234 = relay.TupleGetItem(func_4568_call(), 0)
func_2506_call = mod.get_global_var('func_2506')
func_2509_call = mutated_mod.get_global_var('func_2509')
var_5236 = relay.var("var_5236", dtype = "float32", shape = (70,))#candidate|5236|(70,)|var|float32
call_5235 = relay.TupleGetItem(func_2506_call(relay.reshape(var_5236.astype('float32'), [7, 2, 5])), 0)
call_5237 = relay.TupleGetItem(func_2509_call(relay.reshape(var_5236.astype('float32'), [7, 2, 5])), 0)
func_4743_call = mod.get_global_var('func_4743')
func_4745_call = mutated_mod.get_global_var('func_4745')
call_5248 = func_4743_call()
call_5249 = func_4743_call()
output = relay.Tuple([call_5233,call_5235,var_5236,call_5248,])
output2 = relay.Tuple([call_5234,call_5237,var_5236,call_5249,])
func_5255 = relay.Function([var_5236,], output)
mod['func_5255'] = func_5255
mod = relay.transform.InferType()(mod)
var_5256 = relay.var("var_5256", dtype = "float32", shape = (70,))#candidate|5256|(70,)|var|float32
output = func_5255(var_5256)
func_5257 = relay.Function([var_5256], output)
mutated_mod['func_5257'] = func_5257
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4566_call = mod.get_global_var('func_4566')
func_4568_call = mutated_mod.get_global_var('func_4568')
call_5301 = relay.TupleGetItem(func_4566_call(), 2)
call_5302 = relay.TupleGetItem(func_4568_call(), 2)
func_5058_call = mod.get_global_var('func_5058')
func_5062_call = mutated_mod.get_global_var('func_5062')
var_5317 = relay.var("var_5317", dtype = "float32", shape = (35,))#candidate|5317|(35,)|var|float32
const_5318 = relay.const([1.299041,9.248732,-1.188437,-5.062805,7.682597,6.504348,7.652066,7.249738,5.480047,6.592519,-9.699382,1.438804,9.122430,-4.014758,-3.384632,-3.826171,0.275801,-6.637954,3.719002,1.609425,5.956434,-6.596008,5.719679,-7.036556,-1.436824,-4.765176,4.496202,-7.215653,6.052172,4.679066,-9.574442,5.371645,2.748661,1.130375,0.620265,-9.419700,8.857203,6.144314,-1.390269,2.848476,-6.977446,-9.922572,6.669354,-4.484403,0.567671,3.873392,4.944667,7.232926,-9.134725,5.205594,-2.212953,-8.602701,-7.795322,-8.775849,4.906035,-8.585610,1.726978,2.845279,8.102715,5.082463,1.701356,-8.591249,-1.253187,-4.854648,-2.513678,-3.973319,4.400115,1.727475,-0.667007,-6.845012,5.389852,6.159955,8.754377,-9.362259,-6.412560,-7.646369,-0.832530,3.342986,-2.345997,8.615890,2.198894,9.862787,-4.708581,7.160170,2.639438,-4.017379,-5.620558,3.001761,2.570920,-9.907913,-8.386426,0.736635,9.438038,9.820194,-1.410522,-8.164102,-1.153793,-3.077719,-7.588098,0.189759,-1.682661,4.416196,-0.007582,-4.505553,-1.452678,7.372786,4.370479,3.556756,8.897750,5.662710,7.292015,-3.365227,7.977740,-9.675921,-1.223881,0.927353,5.299382,8.699286,-5.948849,5.756792,-4.654618,5.273322,-7.221011,-6.810502,8.908119,8.148094,0.840755,-7.674553,1.389683,8.404359,-7.142128,-5.171837,0.224330,8.505363,5.928438,-3.248794,-6.837599,-7.821597,-7.898879,-0.384339,-6.883364,-2.562992,6.756452,-1.934336,5.581577,-5.363222,6.898839,5.114118,-0.733646,-0.002195,-6.380602,1.937481,-9.301469,3.659196,-1.563649,-3.039705,0.769245,0.815848,7.588545,9.411140,5.103818,-4.018369,-9.983435,6.819100,2.611405,9.074985,-5.807835,-5.158976,-4.376803,4.754758,5.737675,8.201083,-6.382187,-5.014798,-2.886218,-8.717969,9.766810,-7.794712,-9.010018,9.081790,1.328810,8.117535,9.007102,-5.850013,5.739573,1.789828,0.980113,-9.231932,1.821635,0.501589,-4.340537,5.989466,1.847215,-3.586882,3.058471,4.792483,-9.365699,-0.684102,-4.335541,2.084448,-3.601398,-0.200207,2.547267,9.099577,6.529663,-0.262383,-9.682274,-9.059067,-7.703280,4.993177,-8.176997,-9.300323,-2.857708,-4.942525,-0.245678,-8.999265,-2.440821,-7.956426,9.857151,-2.884887,4.868673,8.192482,-4.260378,0.350202,-6.638505,-4.504143,3.649599,9.007171,0.547696,-9.608009,0.159913,-9.729866,4.329581,0.438255,-8.823800,-0.158753,-0.098663,1.277619,9.601980,2.024530,-6.176503,-7.862636,8.036082,7.222143,6.725834,-8.981460,-3.829317,2.356478,3.580864,4.047721,-3.027975,7.473796,9.235808,-6.646975,6.196408,-1.539653,6.711942,9.275020,-7.065488,-6.989186,-9.472598,-1.999260,7.613061,9.541526,-4.137586,5.284708,-5.649170,2.997397,7.286297,-0.785492,-2.378648,-2.308226,9.850334,-8.646358,-3.699754,8.830031,6.199086,-3.937721,0.899930,3.564242,-2.253367,5.050960,-8.238804,-4.260493,-2.274004,-0.930617,8.397772,-3.695254,5.937397,-4.186858,9.370241,-8.206669,5.174667,-3.884478,-8.224572,-5.653621,-9.166119,9.921359,-2.021165,-2.980450,-4.073461,9.315601,-8.607643,-1.476059,-0.841195,3.925213,0.025495,-4.997029,-8.239883,5.716309,7.950338,4.462023,3.299232,-6.768709,-1.777308,-0.773345,9.299925,-0.477047,-5.707148,4.866724,2.161824,-1.313981,6.870099,2.000916,0.722517,-0.721004,-2.092777,-4.635603,1.611899,-3.219182,-6.888281,-2.268631,-0.419576,9.639468,-7.634983,-6.008261,8.755902,-8.498670,8.997228,8.981452,-7.926139,6.301426,6.123649,2.820421,-2.028987,0.322188,-8.507737,3.085703,-1.600712,3.926350,4.000176,8.306016,7.996262,1.018504,5.378992,3.584148,3.534131,5.899579,2.727607,1.359446,-0.825885,-1.918161,-7.188256,0.178941,-4.624397,2.241128,-0.546818,-9.515541,-3.961806,6.097703,-4.834987,-4.478729,2.533971,5.682521,-9.662322,8.887070,9.767874,9.532110,8.291129,-7.658788,-0.105239,1.650242,-0.170265,-0.693091,-5.124587,2.244457,-1.042998,-7.803957,3.188205,-1.396530,-0.726095,-2.104347,7.246114,7.400600,-5.030396,-6.159832,-6.123475,-0.218133,-8.069827,9.650982,-1.766840,7.009235,-1.477784,-1.633415,9.538599,4.331099,-8.494204,7.738864,-2.402821,-9.341325,4.444780,2.903594,0.291344,-6.153796,-2.185595,-5.366087,-3.118335,9.106784,4.465754,-5.166228,1.772474,-8.852900,6.911315,8.187352,-6.395489,6.181829,8.931590,3.075423,-3.006162,-9.903154,-9.666690,7.016560,-2.662599,1.193756,-6.993926,5.487774,-0.496671,-0.673479,1.320927,5.293828,8.522038,6.989158,5.038590,9.824930,2.084625,-1.573763,-0.149223,-6.191154,-4.657929,-4.494903,-5.582858,-2.990196,5.944774,-5.734094,3.389193,0.736338,-3.007746,3.097344,6.114530,5.431785,-4.044986,-4.058702], dtype = "float32")#candidate|5318|(462,)|const|float32
call_5316 = relay.TupleGetItem(func_5058_call(relay.reshape(var_5317.astype('float32'), [1, 5, 7]), relay.reshape(const_5318.astype('float32'), [462,]), ), 0)
call_5319 = relay.TupleGetItem(func_5062_call(relay.reshape(var_5317.astype('float32'), [1, 5, 7]), relay.reshape(const_5318.astype('float32'), [462,]), ), 0)
uop_5324 = relay.atanh(var_5317.astype('float32')) # shape=(35,)
func_1801_call = mod.get_global_var('func_1801')
func_1804_call = mutated_mod.get_global_var('func_1804')
var_5337 = relay.var("var_5337", dtype = "float64", shape = (2160,))#candidate|5337|(2160,)|var|float64
call_5336 = relay.TupleGetItem(func_1801_call(relay.reshape(var_5337.astype('float64'), [16, 9, 15]), relay.reshape(var_5337.astype('float64'), [16, 9, 15]), ), 0)
call_5338 = relay.TupleGetItem(func_1804_call(relay.reshape(var_5337.astype('float64'), [16, 9, 15]), relay.reshape(var_5337.astype('float64'), [16, 9, 15]), ), 0)
output = relay.Tuple([call_5301,call_5316,const_5318,uop_5324,call_5336,var_5337,])
output2 = relay.Tuple([call_5302,call_5319,const_5318,uop_5324,call_5338,var_5337,])
func_5354 = relay.Function([var_5317,var_5337,], output)
mod['func_5354'] = func_5354
mod = relay.transform.InferType()(mod)
var_5355 = relay.var("var_5355", dtype = "float32", shape = (35,))#candidate|5355|(35,)|var|float32
var_5356 = relay.var("var_5356", dtype = "float64", shape = (2160,))#candidate|5356|(2160,)|var|float64
output = func_5354(var_5355,var_5356,)
func_5357 = relay.Function([var_5355,var_5356,], output)
mutated_mod['func_5357'] = func_5357
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4556_call = mod.get_global_var('func_4556')
func_4557_call = mutated_mod.get_global_var('func_4557')
call_5412 = relay.TupleGetItem(func_4556_call(), 0)
call_5413 = relay.TupleGetItem(func_4557_call(), 0)
output = call_5412
output2 = call_5413
func_5416 = relay.Function([], output)
mod['func_5416'] = func_5416
mod = relay.transform.InferType()(mod)
output = func_5416()
func_5417 = relay.Function([], output)
mutated_mod['func_5417'] = func_5417
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4266_call = mod.get_global_var('func_4266')
func_4268_call = mutated_mod.get_global_var('func_4268')
call_5448 = relay.TupleGetItem(func_4266_call(), 0)
call_5449 = relay.TupleGetItem(func_4268_call(), 0)
output = call_5448
output2 = call_5449
func_5450 = relay.Function([], output)
mod['func_5450'] = func_5450
mod = relay.transform.InferType()(mod)
output = func_5450()
func_5451 = relay.Function([], output)
mutated_mod['func_5451'] = func_5451
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5014_call = mod.get_global_var('func_5014')
func_5015_call = mutated_mod.get_global_var('func_5015')
call_5496 = relay.TupleGetItem(func_5014_call(), 0)
call_5497 = relay.TupleGetItem(func_5015_call(), 0)
func_4566_call = mod.get_global_var('func_4566')
func_4568_call = mutated_mod.get_global_var('func_4568')
call_5500 = relay.TupleGetItem(func_4566_call(), 2)
call_5501 = relay.TupleGetItem(func_4568_call(), 2)
output = relay.Tuple([call_5496,call_5500,])
output2 = relay.Tuple([call_5497,call_5501,])
func_5502 = relay.Function([], output)
mod['func_5502'] = func_5502
mod = relay.transform.InferType()(mod)
output = func_5502()
func_5503 = relay.Function([], output)
mutated_mod['func_5503'] = func_5503
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5416_call = mod.get_global_var('func_5416')
func_5417_call = mutated_mod.get_global_var('func_5417')
call_5517 = func_5416_call()
call_5518 = func_5416_call()
output = call_5517
output2 = call_5518
func_5522 = relay.Function([], output)
mod['func_5522'] = func_5522
mod = relay.transform.InferType()(mod)
output = func_5522()
func_5523 = relay.Function([], output)
mutated_mod['func_5523'] = func_5523
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4566_call = mod.get_global_var('func_4566')
func_4568_call = mutated_mod.get_global_var('func_4568')
call_5545 = relay.TupleGetItem(func_4566_call(), 0)
call_5546 = relay.TupleGetItem(func_4568_call(), 0)
func_3845_call = mod.get_global_var('func_3845')
func_3847_call = mutated_mod.get_global_var('func_3847')
const_5558 = relay.const([-2,4,-8,-5,2,-5,6,2,2,-4,9,-7,4,-2,8,-2,2,6,-8,3,4,-2,-5,-6,2,-10,-5,-7,7,-4,5,-7,-2,9,3,8,9,-8,4,3,-5,7,2,-10,3,5,-2,5,3,-1,-5,6,3,-8,7,3,8,3,-3,-10,1,-6,-8,-4,-6,-9,-8,-5,-8,-7,8,-8,-1,-6,-6,-3,-2,7,-2,2,9,-9,8,-5,-8,-1,4,1,-2,10,-3,-4,-3,-6,-5,-3,2,9,-5,-8,9,-7,1,-8,5,1,-2,5,-8,-2,-9,-5,-6,-3,-1,2,-10,-4,-7,4,-10,-9,9,-10,5,8,-7,-7,7,4,2,-9,4,-5,-6,4,3,-10,9,7,-4,-10,-8,-5,-10,7,4,-6,1,-3,10,5,-5,8,-7,-10,2,5,8,8,-9,-7,1,5,-7,-9,8,-2,8,-6,7,-9,3,-10,4,-6,1,7,-1,5,1,-4,-9,1,-6,-4,1,1,-7], dtype = "int64")#candidate|5558|(189,)|const|int64
call_5557 = func_3845_call(relay.reshape(const_5558.astype('int64'), [9, 7, 3]))
call_5559 = func_3845_call(relay.reshape(const_5558.astype('int64'), [9, 7, 3]))
bop_5560 = relay.bitwise_and(const_5558.astype('uint64'), relay.reshape(call_5557.astype('uint64'), relay.shape_of(const_5558))) # shape=(189,)
bop_5563 = relay.bitwise_and(const_5558.astype('uint64'), relay.reshape(call_5559.astype('uint64'), relay.shape_of(const_5558))) # shape=(189,)
output = relay.Tuple([call_5545,bop_5560,])
output2 = relay.Tuple([call_5546,bop_5563,])
func_5564 = relay.Function([], output)
mod['func_5564'] = func_5564
mod = relay.transform.InferType()(mod)
mutated_mod['func_5564'] = func_5564
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5564_call = mutated_mod.get_global_var('func_5564')
call_5565 = func_5564_call()
output = call_5565
func_5566 = relay.Function([], output)
mutated_mod['func_5566'] = func_5566
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4790_call = mod.get_global_var('func_4790')
func_4792_call = mutated_mod.get_global_var('func_4792')
call_5587 = relay.TupleGetItem(func_4790_call(), 0)
call_5588 = relay.TupleGetItem(func_4792_call(), 0)
output = relay.Tuple([call_5587,])
output2 = relay.Tuple([call_5588,])
func_5596 = relay.Function([], output)
mod['func_5596'] = func_5596
mod = relay.transform.InferType()(mod)
output = func_5596()
func_5597 = relay.Function([], output)
mutated_mod['func_5597'] = func_5597
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5564_call = mod.get_global_var('func_5564')
func_5566_call = mutated_mod.get_global_var('func_5566')
call_5606 = relay.TupleGetItem(func_5564_call(), 1)
call_5607 = relay.TupleGetItem(func_5566_call(), 1)
func_1170_call = mod.get_global_var('func_1170')
func_1174_call = mutated_mod.get_global_var('func_1174')
var_5628 = relay.var("var_5628", dtype = "uint16", shape = (1728,))#candidate|5628|(1728,)|var|uint16
call_5627 = relay.TupleGetItem(func_1170_call(relay.reshape(var_5628.astype('uint16'), [16, 12, 9]), relay.reshape(var_5628.astype('uint16'), [16, 12, 9]), ), 2)
call_5629 = relay.TupleGetItem(func_1174_call(relay.reshape(var_5628.astype('uint16'), [16, 12, 9]), relay.reshape(var_5628.astype('uint16'), [16, 12, 9]), ), 2)
func_5416_call = mod.get_global_var('func_5416')
func_5417_call = mutated_mod.get_global_var('func_5417')
call_5645 = func_5416_call()
call_5646 = func_5416_call()
uop_5656 = relay.log2(call_5645.astype('float64')) # shape=(16, 11, 15)
uop_5658 = relay.log2(call_5646.astype('float64')) # shape=(16, 11, 15)
output = relay.Tuple([call_5606,call_5627,var_5628,uop_5656,])
output2 = relay.Tuple([call_5607,call_5629,var_5628,uop_5658,])
func_5692 = relay.Function([var_5628,], output)
mod['func_5692'] = func_5692
mod = relay.transform.InferType()(mod)
mutated_mod['func_5692'] = func_5692
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5693 = relay.var("var_5693", dtype = "uint16", shape = (1728,))#candidate|5693|(1728,)|var|uint16
func_5692_call = mutated_mod.get_global_var('func_5692')
call_5694 = func_5692_call(var_5693)
output = call_5694
func_5695 = relay.Function([var_5693], output)
mutated_mod['func_5695'] = func_5695
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5522_call = mod.get_global_var('func_5522')
func_5523_call = mutated_mod.get_global_var('func_5523')
call_5712 = func_5522_call()
call_5713 = func_5522_call()
output = call_5712
output2 = call_5713
func_5722 = relay.Function([], output)
mod['func_5722'] = func_5722
mod = relay.transform.InferType()(mod)
mutated_mod['func_5722'] = func_5722
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5722_call = mutated_mod.get_global_var('func_5722')
call_5723 = func_5722_call()
output = call_5723
func_5724 = relay.Function([], output)
mutated_mod['func_5724'] = func_5724
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4743_call = mod.get_global_var('func_4743')
func_4745_call = mutated_mod.get_global_var('func_4745')
call_5751 = func_4743_call()
call_5752 = func_4743_call()
func_3845_call = mod.get_global_var('func_3845')
func_3847_call = mutated_mod.get_global_var('func_3847')
const_5756 = relay.const([-10,4,7,-2,2,6,-4,-2,-4,1,5,-8,5,7,8,10,8,-6,10,6,6,1,-1,-8,8,-2,9,-3,9,6,3,-5,-10,8,1,-3,5,4,7,-8,1,-7,-10,-5,-4,8,7,-8,6,-8,-7,-1,-6,-6,-9,7,-8,2,-9,-9,-8,-8,-10,-3,-2,1,-3,-2,9,2,-6,-10,5,2,-9,-5,-8,3,9,2,8,-3,-8,-1,-4,-7,-2,-7,-8,-1,10,5,10,5,7,-3,5,-7,-10,1,1,-6,-4,-4,-2,1,-2,1,6,1,7,8,7,-4,4,-3,-3,2,2,2,-10,9,9,1,-7,-9,-6,4,-2,10,-4,-5,-2,6,2,9,1,1,7,5,6,-8,-9,-6,1,-1,1,-3,10,8,-5,3,6,-6,-7,6,-5,6,7,6,-1,6,-10,6,6,3,2,9,-1,-10,-6,-4,3,6,3,9,-9,-6,3,3,6,5,4,-6,1,-3,-4,-9,-6], dtype = "int64")#candidate|5756|(189,)|const|int64
call_5755 = func_3845_call(relay.reshape(const_5756.astype('int64'), [9, 7, 3]))
call_5757 = func_3845_call(relay.reshape(const_5756.astype('int64'), [9, 7, 3]))
uop_5766 = relay.log2(const_5756.astype('float32')) # shape=(189,)
bop_5790 = relay.logical_or(uop_5766.astype('bool'), relay.reshape(const_5756.astype('bool'), relay.shape_of(uop_5766))) # shape=(189,)
output = relay.Tuple([call_5751,call_5755,bop_5790,])
output2 = relay.Tuple([call_5752,call_5757,bop_5790,])
func_5798 = relay.Function([], output)
mod['func_5798'] = func_5798
mod = relay.transform.InferType()(mod)
mutated_mod['func_5798'] = func_5798
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5798_call = mutated_mod.get_global_var('func_5798')
call_5799 = func_5798_call()
output = call_5799
func_5800 = relay.Function([], output)
mutated_mod['func_5800'] = func_5800
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4556_call = mod.get_global_var('func_4556')
func_4557_call = mutated_mod.get_global_var('func_4557')
call_5801 = relay.TupleGetItem(func_4556_call(), 0)
call_5802 = relay.TupleGetItem(func_4557_call(), 0)
const_5805 = relay.const([[[8.858650,-7.907308,5.875021,9.023496,5.123594,-4.340683,-7.249721,-6.564399,2.485540,8.936873,5.491064,-5.631609,-3.306237,2.207222,-2.899367],[5.436518,5.782632,-5.423347,1.398671,6.284215,7.144460,-7.693150,-5.720718,-1.992575,6.010188,-7.263973,2.104389,-6.704631,2.809547,3.336682],[1.064960,-4.075626,2.841583,1.518547,-0.259428,4.559008,4.801642,7.322195,4.128572,3.580325,0.533140,4.381772,-6.132711,-5.649852,-5.569237],[7.805807,-2.025008,-1.465752,2.817865,-0.699764,-1.530156,3.970496,3.793255,-2.602115,-7.756038,8.288317,4.238195,-1.907929,5.507037,0.881102],[7.841592,0.678485,-8.896239,2.406159,1.869507,2.882105,6.419705,3.044706,3.736358,1.640810,-2.865881,2.776123,-3.777749,9.515766,-8.450498],[0.520746,-6.412928,5.607186,-4.945249,-7.068786,-1.791296,-0.559397,-4.686644,-7.808237,8.184930,-9.396543,4.818736,9.815016,6.995237,9.549543],[2.392321,1.711642,2.922149,2.636356,2.172450,1.228565,7.789181,-9.305781,-5.193212,-7.044666,-5.815317,9.710119,-9.177822,8.536280,8.105375],[-7.334681,8.781992,-1.809034,-0.465782,0.226463,9.954359,-0.732657,-4.031521,9.588448,4.390985,-7.979344,-2.946340,4.686883,-0.455781,-3.288884],[9.705534,-6.247448,0.984180,5.185375,-0.924874,7.090924,-3.614303,9.469962,-9.172068,1.791282,-7.282162,-9.958472,2.016765,5.934321,-9.742815],[8.851663,-7.071746,9.275114,4.774655,-4.900038,3.701177,4.773869,6.606896,-5.541308,0.150825,7.720739,7.912432,-0.524503,-6.701377,-3.084953],[-4.971148,-8.895643,8.310045,-0.309955,1.305874,8.851879,-0.470657,-4.216899,5.088431,-2.785917,-0.386080,-6.578723,5.106725,-6.327687,-6.396111]],[[-8.790025,-4.695131,-1.948228,-7.832233,-2.811800,4.667747,-8.046787,1.109977,7.393395,2.961393,2.079926,6.157620,6.323626,9.079325,-7.428620],[-0.862973,-0.388717,-4.274120,2.218202,7.088543,-7.067392,7.858862,-3.641902,5.259899,7.094507,7.134377,-8.341687,-0.637813,7.896913,0.819636],[5.099618,5.780234,-5.022917,-7.101955,-2.169411,-6.179079,-0.378071,-6.933390,-2.835757,-2.636030,-5.869971,-2.581851,9.937396,7.771979,-0.866796],[-0.932255,-4.050488,1.448742,0.658098,-0.092767,3.731344,-7.144578,-4.004002,6.965953,-6.845283,-8.743796,6.506394,3.735232,5.342532,-3.814787],[2.411042,-4.736809,-9.326565,2.667530,2.330411,3.169934,-6.202384,9.541361,-3.100649,1.266146,-1.853324,-5.651772,-8.966245,-5.742397,-2.666278],[-0.970179,-3.030927,5.123553,-2.912189,-0.970349,0.890337,5.784079,-2.617861,-1.563495,7.982189,4.770068,-7.122215,4.610762,-5.901069,-0.731467],[-3.569356,-2.829312,5.705284,2.764879,-1.886940,-1.335707,-2.102980,6.453580,-4.333162,8.260727,0.958172,5.098057,-6.343879,8.766300,7.304936],[1.448287,-5.698140,-0.404936,-0.696613,2.117830,4.917961,-6.876343,2.094390,-4.252303,2.112934,1.919676,9.117225,-5.688889,-1.945376,-1.793128],[-0.025371,8.521220,4.280000,-8.972757,-7.054265,0.185976,1.124562,4.537497,6.372639,-6.611840,2.113686,-6.639419,1.809346,4.093776,-1.797861],[0.254017,4.867074,7.904597,-3.049636,-5.344031,9.658227,-1.654842,1.174575,-9.181617,-2.807208,-0.958819,-5.935328,-1.210970,4.524589,2.845104],[7.443914,-5.964794,-3.689938,4.452464,-6.767147,0.173594,5.424849,-1.437568,5.344091,-9.771294,-5.496754,9.633126,6.927180,-1.958411,4.525188]],[[-1.270696,-5.730663,-5.289051,-8.156472,3.065830,2.046548,-1.167688,-7.409879,-9.773138,9.667041,0.660138,3.994923,3.260019,-4.869258,5.125576],[3.751241,-6.782206,3.133553,-6.166112,4.809128,-2.666187,-3.676133,8.930851,6.662208,-8.762022,-6.344804,-9.749098,2.709285,-2.384793,9.450344],[6.213378,7.644863,-6.761462,-6.067692,-9.063311,-7.657905,4.294832,-9.365842,-8.838340,-0.362981,-2.735748,-6.970827,-2.696257,-6.578826,-6.136099],[-4.769477,8.616184,9.341988,-8.430159,-9.173153,3.774988,5.513224,-6.752040,-2.889482,-3.082814,2.212789,6.236627,6.771600,8.190029,0.823665],[-1.004788,-3.645043,4.786308,9.388621,0.612538,7.891267,7.467839,9.860188,-4.573448,-0.239762,-1.984839,3.341145,3.885962,5.614816,7.019455],[-3.311942,2.439245,8.252679,7.653596,-7.629235,-4.980970,8.538980,3.490512,6.390159,-7.476366,-8.112558,-4.468565,5.068345,-0.881204,-1.376088],[2.729936,6.410787,3.065823,7.934916,-3.811822,-2.085994,8.094711,-3.817625,-9.285321,-8.419255,3.940762,-9.711220,9.458820,6.266187,-8.437486],[9.922550,4.436463,-7.724088,5.996335,7.696618,-6.416825,-9.202474,2.743480,-8.592465,8.697219,4.272142,9.501643,-6.362595,8.141034,-7.783642],[9.424698,9.515562,7.123843,-0.257797,6.600230,-4.457917,1.351444,-9.380008,9.199785,-5.699450,0.028722,2.282156,0.336443,4.912383,8.168044],[3.654910,8.572559,8.659248,-2.900718,5.993924,5.962164,0.928244,5.234524,-7.757601,-2.470956,5.063873,-2.358514,-4.680674,-7.033197,-1.711508],[-3.559526,-2.461756,-5.650799,-6.398898,8.190309,-3.795269,5.895287,5.999713,2.881724,6.593740,6.969542,-6.972394,6.727197,2.746680,-2.822779]],[[3.228540,9.903834,0.963321,-2.269470,0.055758,7.290276,-7.311114,9.670672,0.296822,9.039620,7.803274,8.434459,-1.336725,-8.007803,-7.065586],[9.944445,9.340215,-6.965682,-3.761213,-5.552967,-8.610775,-2.666345,-0.599013,4.880205,-5.540781,-8.403901,2.691691,1.421049,-8.612853,3.050752],[1.683779,3.245423,-8.033249,5.051150,-4.796699,-9.595335,4.071398,9.036353,-7.515677,-3.358104,-7.147865,-3.689957,-2.444092,0.183592,-7.887304],[-6.439802,-2.214750,-0.740292,7.215380,6.958614,-7.139310,-8.590158,-6.651640,4.024435,-4.304392,-2.104714,7.809681,-3.747289,-8.750812,-0.711014],[1.591599,-3.262391,-4.610385,-3.316099,-6.920614,5.407831,8.002798,7.866105,-2.496170,-8.498427,-8.614087,6.517702,-7.449690,4.598293,5.311013],[3.214174,-7.986488,-3.666748,-6.780482,-1.697804,9.630723,9.037972,-1.734531,-8.524775,-5.791184,9.096388,4.958945,-6.049887,9.947831,3.386285],[4.219695,1.058638,-6.391242,1.654244,-1.888384,-1.962214,4.408680,-5.258512,-0.693829,-4.154453,6.803910,7.563503,-5.942374,-6.680327,9.250588],[2.204946,-7.626980,9.720737,-8.164804,-7.079820,-3.868492,-1.331408,-0.139318,0.533990,-2.310262,6.329824,-3.286089,-1.243313,-5.837479,-2.638536],[-1.796320,9.748499,-3.438013,-4.750129,9.712276,2.823393,2.058570,8.020868,-7.570220,-5.199355,3.255700,-5.371956,-1.323863,-8.116364,-1.377042],[-0.537527,-1.160675,6.018269,-1.818957,-6.296862,-7.185421,-5.349237,8.234699,-7.321386,-1.047721,-7.976861,-2.745613,7.624875,-7.323994,-5.586108],[-6.157409,8.807212,-2.637404,9.239610,-0.836042,-0.097766,2.559438,-3.036735,-2.662473,-7.071006,6.652557,-0.917635,-7.616127,-8.971204,-5.492410]],[[6.358263,-6.075997,0.412177,2.407903,3.865016,-8.309696,7.461767,-8.779242,9.413898,-8.212852,-4.978901,-7.733481,6.614924,-4.030196,0.175342],[-4.204453,-3.419419,-3.201892,5.442601,-4.875920,9.901580,-7.569042,1.253758,9.430627,-1.951176,-0.115124,9.497283,4.329786,1.330674,7.265335],[-5.904039,1.248392,-9.752092,7.950030,-2.890499,-0.396041,-8.349771,-7.759909,-1.722839,-8.309305,8.165791,6.435095,-3.975512,0.929442,-7.827916],[-8.927743,9.452751,1.964937,8.149256,3.052796,6.441674,-9.616501,7.222952,4.596063,-9.458244,-1.383156,-9.696628,-3.437589,-2.915911,2.414681],[-3.613997,-3.254759,1.890958,8.985922,-3.573139,-2.846460,9.500359,4.291538,1.634281,-2.253038,2.134072,2.788371,-9.615873,-7.673613,-9.600729],[2.476680,2.806595,-0.382858,-6.648131,-2.495232,-0.412241,-3.187235,7.589434,-6.505687,-8.697545,-1.214474,6.787223,9.776400,1.044176,1.881818],[6.909560,3.540177,-2.761073,-6.056624,3.379181,9.072562,1.213484,3.584238,0.715594,-0.884147,-6.526309,0.958319,-9.969723,2.536440,-0.643385],[5.535979,-3.539344,9.745917,-4.472022,6.206114,-3.029104,-4.998354,-7.879887,-0.655286,0.321252,8.377407,4.492941,-7.438146,1.905979,8.252212],[-5.368795,-9.379231,5.528805,3.263661,2.822231,-2.161157,2.217264,8.332189,-6.649696,8.083410,-3.811302,-6.012504,-2.657472,-3.303155,-7.539354],[1.236864,-8.064600,4.026740,6.334328,-1.113376,1.360098,-0.145737,0.781908,-1.946103,5.715100,4.811312,-6.907952,6.115390,-2.698119,9.290545],[-5.223115,0.557130,-7.577745,-6.818142,2.563451,-0.939671,3.619093,0.675955,-5.503618,1.075130,-1.510234,-6.701279,-3.392875,1.336603,6.738016]],[[9.652985,1.361270,-4.702038,-0.524541,-7.934297,4.719851,-4.547769,0.817024,0.470892,-6.329574,-6.777292,-5.114891,4.262129,-9.403184,3.051611],[7.195022,8.790337,-5.874182,-5.494205,2.030195,-8.149661,1.634112,6.739166,2.865791,0.326001,1.383133,-4.830504,-3.994453,-4.115620,-8.824743],[-9.824894,4.705410,-3.957598,2.629820,-4.342167,3.843695,-6.658276,0.556120,-2.345070,-8.658448,-0.067984,7.508317,5.231189,9.813163,-6.932595],[-0.148037,6.476736,8.346037,6.510863,6.135443,0.409286,-5.614862,4.397770,1.446557,-1.588014,7.938269,-4.612348,4.478941,-5.382507,3.983711],[-5.616413,3.442486,6.995559,-6.164044,-9.378810,-2.497280,-9.289303,4.929086,3.461230,8.208059,-1.554946,-3.925843,5.990093,3.999534,-4.106809],[2.502313,-5.522193,3.412214,1.891041,-1.056400,9.209741,0.388618,3.103617,7.577075,0.125354,3.258557,-4.316603,-3.846670,6.725927,1.318971],[2.508437,3.934080,-3.510256,9.487508,-4.826351,6.620037,8.350740,5.150699,4.756227,3.756945,-3.353790,-2.752996,-8.544862,-1.793000,-3.279649],[-9.823034,-3.926875,0.362669,-2.148994,-8.224656,-8.789450,-6.980431,-0.539643,6.941602,-1.580127,5.246126,2.232433,5.268246,-9.485499,8.556542],[-0.139915,-5.653792,0.778772,0.585423,3.089026,-2.526144,9.375619,7.037501,0.270515,1.479274,6.878606,-5.778469,-8.117180,-7.413295,3.225354],[-5.798737,3.297183,9.694785,-0.657790,-5.577243,-0.619487,-1.406206,1.685121,-2.225117,-0.551482,1.805314,-4.980980,-6.143993,7.096220,7.350138],[-6.777554,-3.539467,6.565235,5.969052,-5.326028,3.802152,-1.096689,-3.036251,6.807551,-5.217870,-8.788007,3.086352,9.240637,-6.199569,-2.378060]],[[-2.512819,7.859897,6.890703,-0.652191,-1.046920,-6.504814,5.454063,9.466096,3.038055,-4.040683,-4.873338,3.515983,3.109635,6.554480,8.794385],[-4.018045,3.615723,2.093580,-9.309061,8.582853,-7.331209,-2.233082,-1.381816,-0.549584,-5.257212,-1.990452,8.105126,-4.032182,-4.992334,-8.350361],[0.289949,9.844519,-0.269551,6.465727,-7.244838,-5.732029,4.560287,9.249253,-7.042385,1.498072,-2.242936,-7.429743,1.019704,3.757699,-6.992374],[6.457395,-5.409837,-8.340208,3.082969,6.264959,-4.953384,8.756514,-1.886703,-0.405677,-4.063248,1.364303,4.256740,-7.045495,-1.651187,-2.369418],[-3.276038,-5.124679,9.489475,4.416422,7.125616,-5.892777,-1.385315,9.921210,-2.161992,-0.698112,0.520229,-6.004072,5.911738,3.886387,-8.235946],[-2.428141,2.457695,6.368647,-7.141843,-3.051110,4.581913,9.326855,-6.636494,-9.996941,-3.756438,3.635297,-5.806389,-1.904857,-7.683632,8.625907],[-1.589119,6.164498,-1.585065,-3.735368,-8.294186,-5.814617,4.199388,3.875371,-1.500825,7.708026,-9.526360,-3.067660,-6.736502,-4.135450,-2.296951],[5.474680,-9.632856,3.285576,5.636539,2.344923,-0.998960,4.554602,7.483277,7.030206,-0.886428,3.346842,1.237097,0.017344,-7.961382,-7.805298],[1.811521,6.788487,0.810905,-3.774836,-8.990613,-5.857576,-1.888685,1.553617,-5.321108,4.173774,8.253820,-8.128335,2.272300,-0.220679,3.058349],[-1.587537,-3.574207,-1.958119,-3.790407,-9.280081,-6.159800,9.942522,-2.178043,4.276816,6.318823,0.862732,5.660530,4.238990,9.927104,-9.221128],[6.032261,6.930171,1.701902,2.148084,-1.706375,-6.594109,-7.950250,3.113418,-5.442688,9.895051,-7.023222,-8.078146,-9.073830,-1.026905,5.463436]],[[8.583594,6.862594,-7.988850,-1.886695,0.841358,3.649505,-3.122137,9.347373,-1.180779,-6.110258,-2.874761,-9.584319,-2.707573,-7.550644,-6.578554],[1.929147,-9.692682,-3.057752,4.627143,-8.778982,-2.698784,7.945789,2.733216,-4.806897,-2.515550,-6.749433,3.069519,-9.034367,3.498260,-8.217224],[-8.472485,1.505843,8.923519,-0.957955,0.418919,3.366740,-7.895712,-8.336116,9.889665,-7.562077,8.516617,-9.006012,6.961171,-3.819121,-2.784106],[3.533065,-0.910540,3.390613,-3.322950,3.877194,8.375289,2.743861,2.212328,5.008198,3.222386,-8.646429,-9.552414,8.060917,6.286654,9.674950],[6.126815,1.969816,2.667025,5.486918,-5.128325,9.436935,3.702789,7.356231,-9.616853,5.523260,-3.960314,-3.093156,3.167433,6.312329,4.224085],[-8.061101,4.584039,3.463276,-6.828511,-2.256566,2.298433,-9.145591,3.080365,2.157631,6.108786,3.416736,-1.928758,-3.822778,2.544410,9.896772],[-6.611382,1.291214,6.961744,0.037418,3.781184,-3.369384,0.303592,6.536516,-4.333013,1.672148,-0.189951,-5.009996,-4.548930,-3.888505,-7.181541],[2.101470,6.019888,-8.726635,6.078140,-1.789051,0.675121,8.123523,-0.394933,6.674893,2.732227,-0.878807,5.624188,-5.885826,2.773149,-2.237742],[-7.059214,7.991409,-6.527877,-5.541635,8.942852,8.733771,7.820152,1.913584,1.512145,9.177685,7.694432,-6.793508,-1.041191,2.281873,3.789340],[5.989641,1.319266,4.866388,-9.329669,3.349561,5.083370,-6.455958,9.163499,-3.319428,0.676293,9.654667,7.540836,3.493263,-1.585497,1.300036],[-8.791663,-5.569287,7.059534,-6.957244,3.617164,6.805600,-5.563708,-2.788854,-9.196844,-1.169912,-8.010127,-7.682213,-9.578746,8.164674,-2.989604]],[[-0.803292,1.880740,-7.485370,8.773158,-1.147676,-6.421037,8.996915,5.355863,-3.512988,-9.249342,2.659295,-8.118032,-2.629830,-6.899394,-4.399018],[-0.127987,1.550973,9.296053,2.711141,-0.074754,8.945220,6.304323,2.729440,-9.135976,-6.776490,9.135888,5.698286,-7.475386,-8.571967,0.197430],[2.508551,2.328336,5.291193,6.042079,8.478457,-2.180950,-5.947280,4.164394,4.679695,-0.473312,-5.507725,0.287717,3.854164,3.537292,-3.786843],[-5.146043,6.171871,4.651811,-8.299560,5.831700,-1.725525,1.892147,1.095742,1.720535,-9.928109,5.927977,8.574382,2.363714,-1.395042,-0.884939],[7.884278,-1.345798,-3.220133,-0.690077,-6.133562,6.778624,4.853690,-5.006272,5.697866,9.519614,0.718132,6.946012,-7.590143,5.490927,2.234725],[9.723591,5.276459,1.987743,6.646235,-5.105335,4.207334,5.696355,-0.561576,-6.083988,9.201837,-2.381681,-3.023660,6.265451,-5.581225,6.535029],[-6.956381,-1.835454,-0.714673,0.928895,6.909135,-0.785656,8.289489,-5.254622,3.059284,-6.022109,-7.807205,4.410745,-6.472640,3.483117,5.094373],[-4.342551,-3.486953,1.402157,2.333276,-4.933688,2.595728,8.015873,-8.251063,-5.539764,-6.107964,-3.906411,4.199644,9.149399,-2.705811,-5.474414],[4.739590,2.966983,-7.331989,9.358627,-0.864641,-2.682116,-8.198240,-1.167237,7.503682,-1.964876,6.238001,1.291482,-2.142814,-5.473773,7.759625],[-9.128008,-7.729530,-6.183798,0.230749,-2.274949,-9.656274,0.172311,-2.405964,1.813519,-4.601804,-9.956797,8.388431,7.378714,-7.895773,-6.053276],[-5.250055,5.713886,8.284207,1.547007,6.057877,-3.721066,7.513699,-3.496067,5.174260,5.364028,2.774550,-6.766368,1.987525,-5.623787,1.654665]],[[-2.378325,8.486823,-5.078910,0.873312,0.220654,1.162665,-4.209734,5.671618,8.217611,7.488382,3.352989,-6.055095,1.898560,4.754008,5.966354],[-2.396765,-0.401678,0.442302,-8.192238,0.295707,3.411516,8.630917,4.384766,-9.279980,-9.605105,5.698927,-8.851313,7.083798,-5.230008,5.193617],[2.768202,4.883690,-5.264893,9.914876,0.090425,-7.932247,2.359382,7.796217,8.795331,0.372452,0.027737,1.575748,-8.742008,0.949114,4.075981],[2.223166,-6.211137,-8.209388,6.802573,-0.721008,-1.381250,-2.332728,-4.804090,-5.984307,2.202762,6.808249,1.690409,0.479919,9.304505,-5.291757],[8.701738,-8.730345,-8.755831,-4.176230,-2.997442,-1.742692,-7.329594,-4.311733,-3.405597,-1.891624,8.286431,-1.691330,-2.674278,-0.056044,-1.892638],[-9.759788,-8.935069,-5.621980,6.869338,9.622762,0.301371,8.291767,-8.008633,-8.302236,-4.520032,-7.076041,4.444460,-3.711217,-6.335607,1.197677],[0.247611,5.626436,-5.543208,-5.516605,-7.509411,7.441929,-0.476632,0.795295,3.278330,5.015301,-6.498954,3.179325,2.676839,3.553131,-3.969107],[-0.988400,-5.477862,-5.427130,2.663270,5.938485,-2.342271,6.717658,8.563673,0.338253,0.686138,-3.186738,-6.335145,0.417606,-9.865267,-0.626693],[2.488449,-3.337680,-7.645000,9.287789,-5.765006,3.625484,8.762923,6.495311,-3.703235,3.918120,6.623137,0.989712,8.689406,2.765166,-6.208273],[0.903286,0.132543,8.174985,-7.932983,9.752384,2.730140,0.129958,-7.022921,1.982582,5.284228,-7.056422,4.030950,-2.561733,-2.446771,-6.571581],[1.834320,-1.531829,9.273167,-2.329713,-0.513781,-9.991637,7.697815,2.610322,-1.911329,-7.215556,5.197342,0.610211,-3.562292,-5.801651,5.384341]],[[4.949326,-5.096291,9.533413,-1.246103,8.237396,-0.023233,-8.640243,5.185342,0.813326,1.166438,9.340478,-0.400847,4.723866,-9.586896,9.766829],[-0.042229,6.366866,-0.075622,-7.222331,-2.301008,-8.119303,-3.557400,-8.098471,-8.688843,8.495422,5.627990,-0.281758,9.889878,9.501980,7.091630],[-8.570318,7.967525,-5.070413,-9.085440,-6.346328,-5.505179,5.042615,-5.229953,-9.767119,7.843329,-9.974320,-4.334022,-3.746794,-8.402399,-0.259318],[-7.817595,3.224473,-1.200879,-3.296958,-3.818752,8.486544,8.087189,5.992239,0.559283,-7.384298,-6.988835,5.734609,7.989474,-5.541975,2.177352],[-1.621138,5.205564,-0.767259,7.760070,5.996843,6.938543,8.732108,6.207936,-5.280944,-3.670970,-2.447064,7.158797,-5.650128,7.439288,-9.054105],[9.601587,5.108828,-4.447091,-1.464834,-2.584897,-5.229190,-1.018012,-8.634971,-4.814669,-8.819768,9.797574,0.046092,3.826136,6.304610,8.000454],[3.664017,-0.019942,2.344646,-8.043614,2.444259,9.705931,6.474613,8.516656,-5.085756,-8.012448,-5.042837,1.845022,7.033227,2.173843,6.424217],[-6.322908,1.471976,2.927344,-4.427302,-3.634965,-9.346943,0.989889,-3.800401,2.884719,-3.875184,6.821587,6.820320,5.190898,1.827646,-4.060138],[1.478209,-8.735771,4.748547,9.558498,0.181271,4.497054,-5.162627,1.567945,5.578071,7.193949,9.114187,9.827970,0.979995,8.894471,2.123776],[0.384844,-2.346326,-9.147065,-7.331287,9.949537,5.040786,9.002966,2.253763,-3.825092,-7.338603,5.896266,1.510499,-9.349171,8.769492,0.600090],[5.550081,3.574559,-1.721086,-1.842515,4.235344,9.719663,-7.927311,-9.914120,4.752136,7.495809,-1.662388,3.714202,0.456063,-5.520451,9.702996]],[[3.102473,2.034380,7.384760,-0.131105,-7.239844,3.528541,5.485349,-2.850355,-3.784633,-9.671108,8.753279,-9.971094,-2.206978,0.371634,-5.955627],[4.732098,1.852625,-2.568214,-0.654163,-8.859428,-9.291758,-8.012893,-1.809878,-7.660515,1.880259,-2.553198,7.154324,1.137241,-3.061534,8.519917],[-1.288068,-8.215735,0.335527,-4.051886,-2.862069,-7.871441,-9.822881,-3.987195,3.592916,6.490754,0.852679,-2.545667,-4.002798,6.607568,-0.864194],[3.386489,8.697238,-5.953645,-8.900865,-0.664280,-4.347829,-2.829649,-7.262544,0.348248,8.273220,-8.512801,-9.161648,9.578129,-2.869273,5.772763],[6.736050,5.201368,-3.287838,7.743341,-2.403613,1.848695,-1.980256,-5.905403,-9.396215,5.920691,-3.220483,8.784421,-8.705635,-0.508683,7.735612],[0.687724,-8.961948,3.758767,-9.787483,-2.477776,-6.053853,8.020389,6.602882,8.146521,0.109559,1.584884,-1.222767,-7.602092,3.093187,-6.452764],[-2.772158,-5.791753,-3.006971,-2.492420,-6.639892,-0.249421,-1.384590,-4.729287,3.526078,-4.159850,-0.137503,-6.647962,-7.276984,4.529483,6.096515],[-3.892875,7.628643,6.749551,-0.062506,-0.177806,-9.069300,3.645832,4.121850,-2.235060,-8.215174,2.512782,-2.603939,2.079206,5.305504,-8.927011],[-6.458379,-5.091789,4.932918,-8.345930,7.777186,0.874276,6.002322,4.062519,-3.166609,2.747873,-9.421211,2.442368,-0.778658,8.142910,8.086153],[8.363246,-0.623877,8.031599,6.801126,5.539315,-0.895506,-8.983602,8.271104,-4.909695,3.514197,-9.277516,6.540509,-0.434094,9.455498,2.082826],[8.888061,-7.099940,-7.171277,-9.353257,7.370311,9.570741,-2.056109,9.243782,1.140264,3.590826,5.452347,-1.687728,3.353546,0.924763,-9.005065]],[[7.340727,5.931392,6.748040,9.478311,9.749309,8.342567,-6.139447,-6.616216,7.773694,-5.422354,-1.413466,9.622661,-7.667648,2.027799,6.358394],[-8.911700,9.835218,-9.483585,9.705603,-4.468511,5.037452,2.624634,9.119453,1.846142,0.554259,5.489006,-3.237522,-1.255713,4.003423,-2.696053],[3.368984,6.931699,-1.428203,4.062128,7.983672,-4.251641,3.706558,8.012949,6.462411,-3.022735,-9.294650,-2.472213,-8.508763,0.175167,-2.232402],[-8.695558,-5.408912,-1.567457,6.946317,-4.707435,-9.124707,4.992144,1.041274,-3.834929,-3.317095,8.875941,7.728970,0.501792,6.215644,9.526963],[-1.403114,9.891487,-6.756773,7.906158,-0.480332,-3.517596,-1.318567,-2.644939,-0.252321,-9.948696,8.485136,6.940571,5.521282,-8.645079,7.712275],[-2.426496,8.006396,-8.248225,1.463696,-9.715392,-2.058177,-9.230412,-1.425455,-7.857065,-2.543131,8.617883,-7.475022,-2.999067,3.564274,-7.278047],[-9.002465,-5.000513,5.314820,9.092763,-2.653619,-4.745523,0.267536,7.227689,8.593267,-2.570072,-3.900773,-7.596846,8.052678,-2.177544,2.768842],[8.133662,1.142681,-8.778827,5.261057,-7.350833,7.734558,-4.137222,2.412201,-1.581451,4.327590,-7.327979,3.692871,-9.884428,0.680792,9.084887],[-9.395828,5.371760,3.741732,-7.827467,3.902453,-0.551654,0.005587,5.194906,2.530323,4.330658,9.257094,-2.105270,-9.272630,6.768567,-5.431265],[0.632196,5.436897,-9.552700,-6.210440,0.051882,2.270815,-3.640178,-3.287740,-6.677478,9.712248,-2.872454,6.201279,7.703882,-7.156385,-6.721132],[-7.868429,5.582806,-2.002952,-2.582080,-4.503821,-3.504605,4.705099,-2.515854,8.500759,4.639968,-3.939714,7.282119,9.795545,-0.441276,2.423027]],[[-8.792260,-9.902936,9.655863,5.540430,9.559514,-6.649587,-1.814198,-8.718960,2.759510,4.208509,-1.952183,4.096655,6.093440,0.745582,-2.127066],[-4.504136,-8.639550,-0.253930,5.484349,0.845401,6.919349,3.408351,6.859286,-4.927111,8.456199,-7.254406,0.044306,7.836308,-0.230470,-3.363999],[5.609791,0.694159,7.366318,4.617358,4.171842,7.764675,-6.448378,-1.524007,-2.457097,9.880171,-2.428116,-2.799324,6.076387,2.676716,-8.250293],[-5.261137,-3.917737,3.394414,4.049229,2.578103,9.350621,6.719610,8.122782,0.451840,-4.664639,5.937021,-8.150447,-3.155285,2.345537,7.851250],[-2.437409,1.344529,1.740473,-4.747596,0.181860,-0.502587,8.806007,2.971398,7.002666,-0.250684,3.578895,0.922989,4.722931,8.191890,1.947559],[-2.839121,-4.165755,-1.111506,-2.332931,-4.594659,-9.081508,-3.738709,-8.552192,-8.658389,4.311133,1.020682,-0.843138,-9.525382,-7.730490,-3.855614],[2.663846,5.820512,-5.784681,8.631994,5.742069,8.201780,-8.372578,7.643165,3.364164,1.845820,-7.136058,8.389439,9.304357,4.789703,6.355138],[8.469325,-8.994555,-7.476441,-5.791708,-4.721547,6.384984,-0.903041,4.177232,-4.820588,5.107271,6.025525,-8.436019,3.437172,9.148132,6.497610],[-0.294194,7.333803,-2.641765,-2.302388,5.311633,-6.339916,-3.299737,3.078300,-1.085406,-1.611614,3.009927,2.445844,-1.693800,8.201466,5.310863],[-8.127697,4.964957,6.476937,5.471575,-0.018585,-5.738868,9.713645,8.627105,-4.578689,-4.596181,-4.604405,2.195795,7.428705,-2.312893,2.166478],[3.094619,9.045800,1.691782,-7.111946,-5.457906,8.180309,0.649484,5.171908,3.237815,-7.825005,-5.786202,2.710573,1.835889,9.408645,2.611144]],[[4.457359,-8.142942,4.524227,6.226356,-0.503267,6.101627,-8.269181,-1.482535,9.637270,-5.044552,5.544501,-8.452790,-6.046746,4.942986,7.562544],[-8.990053,-7.740063,-2.686861,-5.126239,3.840406,9.819532,-0.670107,-9.533136,-8.554435,7.102068,4.174187,7.027416,5.057604,8.772901,-1.197121],[-1.473680,-4.667882,1.879596,-7.112135,-2.149601,6.871765,-6.618394,-3.173626,-6.490049,1.300687,7.966915,1.787606,-0.687287,-4.892494,6.384650],[0.090068,9.882975,-8.950494,-0.667506,-5.886360,7.809325,-4.582215,6.520553,-5.463253,4.802515,7.177889,-4.174456,-7.925478,-5.495341,0.367542],[7.940408,9.831517,-5.596511,4.379482,-0.387888,5.770516,8.514638,-1.594647,-9.744646,1.216835,-3.619776,-4.398168,3.126786,1.772845,4.957723],[0.360980,1.169364,8.763531,6.671747,-1.979557,-7.620581,0.469034,-7.768015,3.130170,-2.581715,-8.718764,1.646911,6.073956,3.506616,-3.536533],[4.487541,2.157064,-2.631402,-5.045736,-3.383726,-9.100880,2.749231,-0.505558,1.899598,-0.780333,-9.978811,-0.699474,-0.518588,-8.170367,-6.435830],[-0.017747,2.774578,5.513518,0.686885,4.981760,-9.296137,-6.540074,0.166513,3.053287,-5.964056,-6.241162,6.245129,9.057155,-4.645597,7.089823],[-8.182907,3.010964,-3.743619,-3.975336,-7.788117,4.423072,4.493182,-0.468867,-8.857943,5.229855,-9.814167,-8.513314,-0.822105,0.371884,9.938173],[2.357248,-8.324319,9.521974,3.148767,-9.707438,6.227911,9.552276,-1.386603,0.817841,6.890926,1.128313,-5.871005,0.614140,7.162446,-7.902522],[-9.119780,8.945237,-3.960234,4.528096,-1.094528,1.046179,2.287667,-5.911187,0.449159,-7.686877,-1.077233,-5.744148,8.269199,2.664589,-7.881000]],[[-7.644938,8.806978,1.427860,-2.190245,-1.658820,0.479938,2.973007,-5.375561,-7.772114,7.347090,-6.703396,-7.411733,5.022967,3.495035,7.074626],[-9.309891,-2.912506,9.261047,5.287979,-7.024529,-1.080941,7.819248,-9.287488,8.159138,7.144049,6.783317,-7.527144,-9.949099,-6.453815,-5.907749],[0.224224,2.992217,-8.302269,-0.617671,-3.504088,6.795359,-8.359545,-6.288339,-0.246436,0.032930,5.567079,-1.654588,-1.400000,7.693118,-2.862204],[-5.280433,-4.039885,3.881237,-6.724558,-6.704857,-3.678343,1.111661,-0.740143,0.878983,4.968789,5.227479,0.301144,-3.670184,-2.981174,-7.228597],[8.319172,0.012553,-0.128511,2.710255,-1.452185,-7.015608,4.315872,5.751401,1.311465,9.733807,4.236620,6.903975,-1.143995,-9.811225,2.392255],[3.623438,-2.824826,-0.105760,8.128217,7.255593,9.775918,-3.902872,-2.828791,5.589343,-6.297953,-4.981710,2.109768,-4.496639,-2.467227,-3.688996],[-6.362227,-8.644192,-9.990119,2.374302,-0.383991,4.829141,-8.039840,4.413562,9.857564,8.884160,2.726768,7.611706,1.992380,-9.754050,7.930015],[-4.049929,-8.833639,-5.626846,2.320756,-1.671243,-6.533604,-4.482076,9.200035,4.583375,-2.690053,-4.405031,8.822315,-5.401028,0.885553,-9.608674],[4.238812,-6.795147,1.272070,6.401775,7.468660,9.314906,0.470834,-8.331833,1.871434,-0.699266,-1.924771,5.547339,-8.301729,3.917463,-9.105696],[-1.379579,-2.742454,4.067155,7.758077,-2.401776,-1.347431,5.578117,9.524098,-6.641754,6.270387,-5.314056,1.536384,5.700570,4.428617,9.222949],[-7.340753,-0.284712,0.832006,7.627798,-0.802429,9.426651,8.452253,-4.425985,-9.692479,8.457984,4.758934,-9.626512,9.083359,3.888752,-5.487457]]], dtype = "float64")#candidate|5805|(16, 11, 15)|const|float64
bop_5806 = relay.minimum(call_5801.astype('uint8'), relay.reshape(const_5805.astype('uint8'), relay.shape_of(call_5801))) # shape=(16, 11, 15)
bop_5809 = relay.minimum(call_5802.astype('uint8'), relay.reshape(const_5805.astype('uint8'), relay.shape_of(call_5802))) # shape=(16, 11, 15)
func_5798_call = mod.get_global_var('func_5798')
func_5800_call = mutated_mod.get_global_var('func_5800')
call_5812 = relay.TupleGetItem(func_5798_call(), 1)
call_5813 = relay.TupleGetItem(func_5800_call(), 1)
func_1095_call = mod.get_global_var('func_1095')
func_1100_call = mutated_mod.get_global_var('func_1100')
const_5815 = relay.const([-0.194544,-9.165511,-0.309644,7.734478,9.197078,5.319334,5.382963,-9.662567,7.857541,4.770609,3.361157,-8.314554,-3.324975,-2.292170,8.602586,-1.254668,-9.802933,-4.515826,-2.733542,-0.433714,-2.345306,-4.607521,-7.670608,8.896776,6.197866,-6.272886,-2.042746,-9.080953,-0.080994,9.476806,-8.978748,8.837831,-3.383501,0.482421,6.993656,-3.829026,6.864905,2.531064,-4.326579,2.681513,4.984207,-6.827227,7.687904,5.229452,4.079081,0.529272,-2.576135,-1.216749,-5.666148,4.318071,8.612695,-7.869651,2.738790,-1.620369,-0.869654,6.395428,8.718209,-1.911651,-7.821375,-1.812560,-3.266044,7.325031,-7.955748,6.561308,6.646009,-5.509764,-3.036608,0.694407,5.108233,5.844197,-8.470894,7.047381,7.441354,-7.851126,9.378292,4.930892,-4.947051,-2.895519,1.387997,8.714266,4.829586,4.566156,-3.051628,1.915913,7.307942,-0.020687,9.149189,9.423783,2.221809,-7.155643,0.591066,-8.792155,0.049250,-8.784480,-1.285777,8.960590,-9.540481,1.788043,-7.891375,-4.991264,-5.677954,2.444270,-9.638087,-0.008228,-8.298794,6.145663,-3.682044,0.545399,-1.564187,-7.970040,5.543755,-1.760652,4.347083,4.553990,-4.230719,1.166905,-9.861275,-6.986540,5.910826,-1.909208,-1.183875,1.722020,3.046597,-0.720562,3.106471,-1.945592,-3.384669,-0.088609,-3.872762,1.925595,3.891457,1.659703,9.575702,-1.266394,-4.723137,-8.742521,-6.185011,-8.011875,-5.518886,-3.944963,4.693311,1.454581,9.123038,8.469241,0.049461,7.844379,1.825925,-5.886955,-0.219173,-9.369885,5.262648,4.297655,-7.024145,6.226120,-8.999265,-7.847814,-5.029728,-3.124637,1.532877,1.327470,-7.737569,0.068803,-1.887954,9.733748,9.581179,2.863045,-0.579430,-1.124051,-7.250154,-9.798293,4.783727,4.683656,-2.858921,-8.525324,9.221429,-3.949003,-1.119366,-3.004043,2.418385,1.951957,8.770881,4.794257,-0.104898,-9.436550,5.453923,2.521410,-5.615799,-1.327261,-7.490379,-5.215211,-5.512665,-0.042433,8.322302,0.537900,-3.115509,1.966853,-0.786094,4.723244,-1.053825,2.511306,-0.579634,1.043986,8.054166,1.070207,-7.889641,-3.816779,-0.238638,5.428347,7.227980,-0.585026,9.744835,4.143025,-3.217350,-9.021768,-9.173693,-7.582379,7.288769,9.533062,2.458885,-6.338668,4.803396,2.656381,0.195250,5.058545,6.363115,-6.297479,2.358271,-7.266683,0.718403,-7.977872,3.945425,-0.062044,-5.068227,2.253248,7.336693,5.167116,-2.559089,-4.385696,7.644452,-0.169308,-9.054513,-3.253283,-5.116513,9.626310,2.292043,-2.471193,9.654324,8.162842,-9.507135,0.701885,5.261084,-4.306270], dtype = "float32")#candidate|5815|(252,)|const|float32
const_5816 = relay.const([True,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,False,False,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,False,False,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,False,True,False,True,True,True,False,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,True,False,False,False,False], dtype = "bool")#candidate|5816|(2730,)|const|bool
var_5817 = relay.var("var_5817", dtype = "float64", shape = (60,))#candidate|5817|(60,)|var|float64
call_5814 = relay.TupleGetItem(func_1095_call(relay.reshape(const_5815.astype('float32'), [7, 6, 6]), relay.reshape(const_5816.astype('bool'), [2730,]), relay.reshape(var_5817.astype('float64'), [60,]), ), 2)
call_5818 = relay.TupleGetItem(func_1100_call(relay.reshape(const_5815.astype('float32'), [7, 6, 6]), relay.reshape(const_5816.astype('bool'), [2730,]), relay.reshape(var_5817.astype('float64'), [60,]), ), 2)
output = relay.Tuple([bop_5806,call_5812,call_5814,const_5815,const_5816,var_5817,])
output2 = relay.Tuple([bop_5809,call_5813,call_5818,const_5815,const_5816,var_5817,])
func_5822 = relay.Function([var_5817,], output)
mod['func_5822'] = func_5822
mod = relay.transform.InferType()(mod)
mutated_mod['func_5822'] = func_5822
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5823 = relay.var("var_5823", dtype = "float64", shape = (60,))#candidate|5823|(60,)|var|float64
func_5822_call = mutated_mod.get_global_var('func_5822')
call_5824 = func_5822_call(var_5823)
output = call_5824
func_5825 = relay.Function([var_5823], output)
mutated_mod['func_5825'] = func_5825
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4795_call = mod.get_global_var('func_4795')
func_4796_call = mutated_mod.get_global_var('func_4796')
call_5843 = relay.TupleGetItem(func_4795_call(), 0)
call_5844 = relay.TupleGetItem(func_4796_call(), 0)
uop_5846 = relay.asinh(call_5843.astype('float64')) # shape=(16, 11, 15)
uop_5848 = relay.asinh(call_5844.astype('float64')) # shape=(16, 11, 15)
func_5798_call = mod.get_global_var('func_5798')
func_5800_call = mutated_mod.get_global_var('func_5800')
call_5854 = relay.TupleGetItem(func_5798_call(), 1)
call_5855 = relay.TupleGetItem(func_5800_call(), 1)
uop_5865 = relay.sinh(uop_5846.astype('float64')) # shape=(16, 11, 15)
uop_5867 = relay.sinh(uop_5848.astype('float64')) # shape=(16, 11, 15)
func_5822_call = mod.get_global_var('func_5822')
func_5825_call = mutated_mod.get_global_var('func_5825')
var_5877 = relay.var("var_5877", dtype = "float64", shape = (1, 60))#candidate|5877|(1, 60)|var|float64
call_5876 = relay.TupleGetItem(func_5822_call(relay.reshape(var_5877.astype('float64'), [60,])), 1)
call_5878 = relay.TupleGetItem(func_5825_call(relay.reshape(var_5877.astype('float64'), [60,])), 1)
output = relay.Tuple([call_5854,uop_5865,call_5876,var_5877,])
output2 = relay.Tuple([call_5855,uop_5867,call_5878,var_5877,])
func_5882 = relay.Function([var_5877,], output)
mod['func_5882'] = func_5882
mod = relay.transform.InferType()(mod)
mutated_mod['func_5882'] = func_5882
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5883 = relay.var("var_5883", dtype = "float64", shape = (1, 60))#candidate|5883|(1, 60)|var|float64
func_5882_call = mutated_mod.get_global_var('func_5882')
call_5884 = func_5882_call(var_5883)
output = call_5884
func_5885 = relay.Function([var_5883], output)
mutated_mod['func_5885'] = func_5885
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5887 = relay.var("var_5887", dtype = "bool", shape = ())#candidate|5887|()|var|bool
var_5888 = relay.var("var_5888", dtype = "bool", shape = (13, 2, 13))#candidate|5888|(13, 2, 13)|var|bool
bop_5889 = relay.logical_or(var_5887.astype('bool'), var_5888.astype('bool')) # shape=(13, 2, 13)
func_5822_call = mod.get_global_var('func_5822')
func_5825_call = mutated_mod.get_global_var('func_5825')
var_5900 = relay.var("var_5900", dtype = "float64", shape = (60, 1))#candidate|5900|(60, 1)|var|float64
call_5899 = relay.TupleGetItem(func_5822_call(relay.reshape(var_5900.astype('float64'), [60,])), 2)
call_5901 = relay.TupleGetItem(func_5825_call(relay.reshape(var_5900.astype('float64'), [60,])), 2)
output = relay.Tuple([bop_5889,call_5899,var_5900,])
output2 = relay.Tuple([bop_5889,call_5901,var_5900,])
func_5911 = relay.Function([var_5887,var_5888,var_5900,], output)
mod['func_5911'] = func_5911
mod = relay.transform.InferType()(mod)
mutated_mod['func_5911'] = func_5911
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5911_call = mutated_mod.get_global_var('func_5911')
var_5913 = relay.var("var_5913", dtype = "bool", shape = ())#candidate|5913|()|var|bool
var_5914 = relay.var("var_5914", dtype = "bool", shape = (13, 2, 13))#candidate|5914|(13, 2, 13)|var|bool
var_5915 = relay.var("var_5915", dtype = "float64", shape = (60, 1))#candidate|5915|(60, 1)|var|float64
call_5912 = func_5911_call(var_5913,var_5914,var_5915,)
output = call_5912
func_5916 = relay.Function([var_5913,var_5914,var_5915,], output)
mutated_mod['func_5916'] = func_5916
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5923 = relay.var("var_5923", dtype = "int8", shape = (12, 8, 15))#candidate|5923|(12, 8, 15)|var|int8
var_5924 = relay.var("var_5924", dtype = "int8", shape = (12, 8, 15))#candidate|5924|(12, 8, 15)|var|int8
bop_5925 = relay.equal(var_5923.astype('bool'), relay.reshape(var_5924.astype('bool'), relay.shape_of(var_5923))) # shape=(12, 8, 15)
output = bop_5925
output2 = bop_5925
func_5935 = relay.Function([var_5923,var_5924,], output)
mod['func_5935'] = func_5935
mod = relay.transform.InferType()(mod)
mutated_mod['func_5935'] = func_5935
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5935_call = mutated_mod.get_global_var('func_5935')
var_5937 = relay.var("var_5937", dtype = "int8", shape = (12, 8, 15))#candidate|5937|(12, 8, 15)|var|int8
var_5938 = relay.var("var_5938", dtype = "int8", shape = (12, 8, 15))#candidate|5938|(12, 8, 15)|var|int8
call_5936 = func_5935_call(var_5937,var_5938,)
output = call_5936
func_5939 = relay.Function([var_5937,var_5938,], output)
mutated_mod['func_5939'] = func_5939
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5596_call = mod.get_global_var('func_5596')
func_5597_call = mutated_mod.get_global_var('func_5597')
call_5979 = relay.TupleGetItem(func_5596_call(), 0)
call_5980 = relay.TupleGetItem(func_5597_call(), 0)
output = relay.Tuple([call_5979,])
output2 = relay.Tuple([call_5980,])
func_5987 = relay.Function([], output)
mod['func_5987'] = func_5987
mod = relay.transform.InferType()(mod)
mutated_mod['func_5987'] = func_5987
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5987_call = mutated_mod.get_global_var('func_5987')
call_5988 = func_5987_call()
output = call_5988
func_5989 = relay.Function([], output)
mutated_mod['func_5989'] = func_5989
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4795_call = mod.get_global_var('func_4795')
func_4796_call = mutated_mod.get_global_var('func_4796')
call_6055 = relay.TupleGetItem(func_4795_call(), 0)
call_6056 = relay.TupleGetItem(func_4796_call(), 0)
func_661_call = mod.get_global_var('func_661')
func_663_call = mutated_mod.get_global_var('func_663')
const_6061 = relay.const([-2.114198,-2.237192,-7.867990,-4.686819,0.361897,-2.142064,-5.752171,-4.561376,6.084541,-9.996939,8.465727,7.155212,-2.172307,-6.546441,-6.950486,3.769062,-0.370691,3.162177,-2.144555,6.294702,2.659827,-1.126890,2.755997,3.287085,-9.721922,3.761996,-1.187195,-0.960863,-9.072342,4.743421,-8.622825,3.684914,-9.307135,1.980302,0.824070,-4.731433,-3.210166,-2.237908,-7.230630,1.517102,8.764462,-0.474646,0.722759,9.859675,2.932114,-2.856574,9.812034,-2.083440,8.657280,-5.407277,8.704153,9.956196,0.661316,5.362427,6.140063,-3.587160,9.167398,8.655190,-0.890269,-6.274931,3.991459,0.418933,1.854616,-8.033675], dtype = "float32")#candidate|6061|(64,)|const|float32
call_6060 = relay.TupleGetItem(func_661_call(relay.reshape(const_6061.astype('float32'), [1, 8, 8])), 0)
call_6062 = relay.TupleGetItem(func_663_call(relay.reshape(const_6061.astype('float32'), [1, 8, 8])), 0)
func_3341_call = mod.get_global_var('func_3341')
func_3345_call = mutated_mod.get_global_var('func_3345')
var_6071 = relay.var("var_6071", dtype = "int64", shape = (2700,))#candidate|6071|(2700,)|var|int64
call_6070 = relay.TupleGetItem(func_3341_call(relay.reshape(var_6071.astype('int64'), [15, 15, 12]), relay.reshape(var_6071.astype('int64'), [15, 15, 12]), relay.reshape(var_6071.astype('int8'), [15, 15, 12]), ), 5)
call_6072 = relay.TupleGetItem(func_3345_call(relay.reshape(var_6071.astype('int64'), [15, 15, 12]), relay.reshape(var_6071.astype('int64'), [15, 15, 12]), relay.reshape(var_6071.astype('int8'), [15, 15, 12]), ), 5)
func_5798_call = mod.get_global_var('func_5798')
func_5800_call = mutated_mod.get_global_var('func_5800')
call_6083 = relay.TupleGetItem(func_5798_call(), 2)
call_6084 = relay.TupleGetItem(func_5800_call(), 2)
func_661_call = mod.get_global_var('func_661')
func_663_call = mutated_mod.get_global_var('func_663')
call_6091 = relay.TupleGetItem(func_661_call(relay.reshape(call_6060.astype('float32'), [1, 8, 8])), 0)
call_6092 = relay.TupleGetItem(func_663_call(relay.reshape(call_6060.astype('float32'), [1, 8, 8])), 0)
uop_6112 = relay.asin(call_6083.astype('float32')) # shape=(189,)
uop_6114 = relay.asin(call_6084.astype('float32')) # shape=(189,)
var_6115 = relay.var("var_6115", dtype = "float32", shape = (189,))#candidate|6115|(189,)|var|float32
bop_6116 = relay.not_equal(uop_6112.astype('bool'), relay.reshape(var_6115.astype('bool'), relay.shape_of(uop_6112))) # shape=(189,)
bop_6119 = relay.not_equal(uop_6114.astype('bool'), relay.reshape(var_6115.astype('bool'), relay.shape_of(uop_6114))) # shape=(189,)
var_6121 = relay.var("var_6121", dtype = "float64", shape = (3, 10, 2))#candidate|6121|(3, 10, 2)|var|float64
bop_6122 = relay.logical_or(call_6070.astype('bool'), relay.reshape(var_6121.astype('bool'), relay.shape_of(call_6070))) # shape=(3, 10, 2)
bop_6125 = relay.logical_or(call_6072.astype('bool'), relay.reshape(var_6121.astype('bool'), relay.shape_of(call_6072))) # shape=(3, 10, 2)
bop_6162 = relay.multiply(var_6115.astype('int64'), relay.reshape(bop_6116.astype('int64'), relay.shape_of(var_6115))) # shape=(189,)
bop_6165 = relay.multiply(var_6115.astype('int64'), relay.reshape(bop_6119.astype('int64'), relay.shape_of(var_6115))) # shape=(189,)
bop_6167 = relay.bitwise_xor(call_6060.astype('uint16'), relay.reshape(call_6091.astype('uint16'), relay.shape_of(call_6060))) # shape=(1, 8, 8)
bop_6170 = relay.bitwise_xor(call_6062.astype('uint16'), relay.reshape(call_6092.astype('uint16'), relay.shape_of(call_6062))) # shape=(1, 8, 8)
func_1801_call = mod.get_global_var('func_1801')
func_1804_call = mutated_mod.get_global_var('func_1804')
const_6180 = relay.const([[-2.147474,4.679297,4.353242,3.283247,-9.417913,2.038137,3.149003,1.202476,8.254243,5.353230,6.133057,-0.428835],[9.600880,2.220275,0.113565,-9.795401,-9.146085,-5.180576,2.111479,6.954700,1.025931,-8.705126,2.486080,-3.275651],[3.730173,1.482318,9.190283,4.574633,-0.062468,-0.686498,-3.180960,1.710707,-3.164453,-4.778467,1.600287,5.972022],[-9.680922,-5.866389,6.240385,2.836415,-6.687426,-6.592673,-7.602200,2.910482,-8.172838,-9.805608,-0.685781,9.019697],[-5.233570,-7.368591,-2.728273,-6.415885,3.731386,-3.137434,0.739782,3.571057,-0.692694,2.198346,1.411569,9.770925],[-1.090301,-1.578973,-6.746546,9.898700,-5.619526,-4.579169,-7.764190,3.758246,2.960058,-6.015048,2.658811,0.200370],[3.960274,5.635888,3.894380,-7.729245,-8.827140,-7.940605,1.363607,4.859031,2.147015,-1.020679,1.763965,7.350147],[2.609178,3.471707,3.877258,-0.746476,-0.934353,6.015524,6.515944,1.565297,-9.650112,-8.325420,-3.858328,1.718310],[1.934687,0.951607,-5.379592,-1.762552,-2.992854,-4.788838,-0.007579,6.481951,-7.999002,-8.967090,-9.872438,-9.031070],[3.572293,-8.024079,-3.098340,6.985578,6.339821,-2.902003,8.125780,5.335763,6.693983,6.688693,7.466123,-2.453998],[4.628690,3.714283,-1.378523,-9.859742,-8.127277,3.217108,6.543767,-3.759129,2.458106,-5.003149,9.215401,3.467899],[2.387344,-7.477917,4.305267,7.003124,6.409743,-8.770866,-4.215680,4.142338,-9.911014,7.354062,4.276454,-9.696297],[5.968349,1.636188,2.086984,4.917184,7.874797,6.938633,-0.001570,3.692406,4.778765,7.131463,8.238029,-9.652187],[-4.776651,1.146847,2.843298,-9.268834,-9.347418,-6.479362,-7.089080,-3.136170,1.715927,-4.591582,-8.418735,-6.574570],[-8.260712,9.246475,-1.597561,0.221251,-5.932309,7.534388,-1.508134,-8.877334,5.701543,-3.072544,-6.167403,-0.351006],[-2.700353,4.029461,-9.264851,-4.961263,3.780409,-6.598670,6.072954,-5.837750,-2.338191,-2.654702,-3.360374,1.168787],[0.302317,6.108427,7.295683,0.975909,2.781534,-6.107841,-7.750454,-1.275849,2.406713,-4.676898,-8.436847,-8.654397],[-4.954931,1.757563,8.008140,-4.099597,4.580595,-8.784056,4.269751,-8.736786,-5.040667,1.709224,-3.459625,-3.038328],[-7.819486,-0.835476,-8.072193,-0.996836,7.355509,0.398590,-7.477907,9.811671,0.501986,-4.180228,-9.099800,4.580198],[-4.026492,9.443185,-6.795701,-6.346188,-4.265455,7.182076,6.228908,9.457424,-9.832997,3.575565,2.332458,-1.610856],[-7.926389,5.121611,2.117349,5.843985,5.039007,-7.612008,-4.066432,9.750545,-4.789563,0.809149,-2.602987,-6.900082],[2.094670,8.073603,1.564823,-7.259543,1.560579,-0.849850,-6.590105,-8.067508,-8.226610,-5.275254,9.312148,-4.329634],[-8.899893,4.018404,-5.834971,7.124215,7.409103,-9.283441,-1.472584,-3.432865,5.992844,9.749055,-6.927595,9.168788],[-1.517111,0.102977,1.874646,4.004804,-5.657771,-4.287900,9.148475,-4.210232,3.298172,9.200032,2.004941,7.591802],[-6.291943,5.152738,-9.864879,7.340095,-4.483351,-3.387033,-2.138273,3.303554,-3.188056,-7.990697,-9.098583,-6.325643],[4.984104,2.484325,6.595027,9.430336,7.765340,-8.911601,-7.833405,3.460599,-4.775284,-6.773097,6.746107,4.786306],[-7.400942,3.966094,6.959256,-3.248079,6.337033,0.458560,-1.575613,-5.818747,1.634572,1.778258,5.423314,-4.565428],[-0.652836,-1.714744,3.739698,4.666198,2.448050,-4.689367,-2.029966,-9.815043,-7.030594,-0.342613,-6.519277,0.591898],[2.258386,3.110077,0.604417,-3.631799,0.380094,7.575844,2.099552,-1.987765,-4.463211,8.831720,4.767084,-5.376103],[5.441494,-7.202860,-8.793871,-7.209295,-1.612371,-9.949138,6.284640,8.713288,9.182816,1.188785,4.599173,-7.248033],[-4.619926,-4.929477,0.950614,-3.337369,3.618333,-6.560391,-0.978333,0.987285,0.618111,-5.253514,-4.242999,7.976472],[-9.032521,-2.425261,-5.573902,7.468327,-1.182153,-9.753091,9.458007,4.089981,9.475076,-4.440921,-9.086776,-6.322253],[3.817991,-9.066712,-2.739824,9.761988,3.778819,-3.721249,-4.060169,-0.121107,6.922525,-3.478589,0.351629,4.677988],[-8.747385,-0.131609,3.094309,-6.854689,0.614200,-7.689799,-3.370413,8.032095,-9.139520,4.897040,8.175738,7.174007],[-4.862407,5.329735,5.344967,-6.155794,-4.112582,-5.510581,1.472257,-0.808222,-1.094804,-6.927889,1.065752,-5.452778],[7.205402,-2.723403,4.641376,4.157474,-8.213176,-9.457572,8.827955,6.037725,8.792142,3.200825,-8.115762,-7.166525],[-9.885137,8.075629,-3.193804,8.310316,9.746505,-3.984184,-4.094268,-9.282367,7.100036,-9.847516,9.120674,-4.840135],[-1.509085,6.888872,-7.328962,5.679325,-6.187185,-8.291498,-1.935768,-3.649665,2.434767,-0.284874,-1.370899,-2.138909],[7.188035,-4.094984,-1.729308,-7.299424,-5.960931,6.678007,9.185946,3.284461,7.419821,-6.932036,-9.169675,6.211774],[2.740830,3.238475,-7.286181,3.009471,-6.428446,-1.046049,2.067352,7.090628,-5.347529,-8.848448,8.465447,1.763571],[2.898451,-3.447257,-3.137810,1.690067,-3.088982,8.009099,3.191483,-4.668489,-2.732423,-6.512240,5.314144,6.650971],[1.463016,0.954489,-5.282177,3.218627,-8.811811,5.226699,-6.952535,4.629658,5.012685,4.333753,6.204801,-0.445272],[9.298771,8.108899,3.661054,-3.495348,-3.872679,4.757990,7.207850,-7.235635,3.887431,-2.944254,8.723290,-9.393391],[0.625346,4.230414,6.489359,-9.349666,-2.812069,-0.762112,3.227734,-9.888425,-9.364937,-2.795305,7.610937,-8.269372],[-6.828373,-2.423048,-8.723212,-2.583958,-9.292644,-9.256809,5.778809,-7.139382,8.717591,6.895498,-1.087158,-9.273415],[-2.103818,-0.758845,-1.484336,-7.598688,8.463448,-2.005251,7.667156,1.658878,-4.422954,4.477235,8.449577,7.837018],[-5.915114,6.173075,5.394370,-9.771922,-2.276698,7.807889,8.444072,4.341218,-9.548468,-1.398809,-2.733396,4.398001],[2.839738,-7.000984,0.130431,7.717322,7.338817,-3.853130,6.577152,-7.458158,8.999087,-4.813360,2.473650,5.520944],[2.499587,3.689835,-8.457958,-9.025657,7.256971,-7.051120,-8.308979,3.433857,-2.846461,-4.308728,-7.474213,3.156032],[-5.733526,-7.896595,1.283030,4.376100,3.070480,-4.422222,-7.791117,2.633172,7.995165,-9.611816,-1.878065,3.105152],[2.686504,-3.200079,-9.823183,6.038120,4.889538,-8.462039,8.613283,8.294600,-0.780073,-4.835624,-5.500780,8.176054],[3.947545,4.095244,0.827090,-4.799566,7.706635,-8.324066,-2.209367,-7.113990,8.386772,-9.239222,9.851886,6.319917],[4.240768,-1.018639,9.196153,-7.704107,0.862760,-2.166586,-7.265394,0.819592,0.406086,-5.843531,1.070002,5.864553],[4.246091,4.114178,9.059767,7.496655,0.008840,-5.762027,6.330058,6.413823,9.465506,4.024042,5.858969,6.153760],[-9.896255,-7.266936,-1.911816,-4.186405,-8.113937,-5.550379,-6.753494,-1.388248,6.378394,-3.484898,5.979930,8.888186],[-8.582456,4.042655,5.849159,-9.684181,-4.581040,4.078479,4.327881,-9.549160,-3.236846,0.156146,-2.767801,-3.294451],[4.839981,-2.502456,-7.174412,9.412080,-7.632931,-4.452044,7.215246,8.059421,-3.383360,-2.127487,-9.380150,0.266054],[-4.032652,0.937374,-7.913565,-7.647111,0.234907,2.683017,4.311264,-4.226254,6.083980,2.025572,5.486145,-4.971207],[-1.668420,8.589678,2.565818,6.365962,-9.130897,2.645237,-2.417754,-2.053858,-1.754708,6.660313,-3.524837,-5.566467],[3.704338,-4.761985,-4.826681,-6.142359,4.368572,-4.473895,-9.367378,-8.251015,-4.516281,8.610939,-4.384938,-2.240518],[7.189676,-4.912013,2.884577,5.929683,-1.215988,-0.407744,-0.920260,6.694420,-4.414748,7.160168,1.039668,7.327862],[7.721934,-9.462056,-7.941677,-8.494812,4.280048,7.334786,4.955678,6.792263,-6.711783,2.010345,-8.247062,2.555940],[-2.774798,7.397646,-4.106144,3.164360,8.494419,1.136180,2.818639,-1.981044,-7.587711,4.429784,-4.975309,-3.204016],[-8.936428,-3.339403,-9.337946,-1.424128,-1.072030,7.832004,-8.535548,-1.925727,-3.974095,-4.209135,9.893165,-7.695436],[-1.145221,-6.557938,-4.145201,-0.240241,-5.601609,5.994325,-5.380630,5.619692,5.763702,2.406330,9.521994,-3.686437],[-9.646764,7.086519,3.700622,6.560761,-0.707976,-3.921976,-1.366306,8.996361,1.340911,-9.124715,-5.726859,-9.627605],[-0.053356,-1.677681,4.794890,2.439827,7.933270,-8.673565,4.565470,-1.876756,9.977901,-7.920978,3.701692,-3.527668],[6.794137,-1.054165,-1.415749,3.654415,3.328037,-7.808905,-3.533896,-7.734924,7.919725,-3.933633,-6.010863,-5.475150],[-5.126743,-0.367938,-1.931601,-5.067294,9.861065,-5.573224,-4.635937,-9.968872,7.848410,-0.970336,-7.711690,2.232535],[2.356152,-2.173419,-4.415165,6.702566,-0.377102,0.276838,-8.421843,-9.926884,-9.207601,5.165580,-4.784215,-0.695947],[5.775974,-0.839381,3.343929,2.693200,7.348522,6.977420,-0.536195,-8.996182,-5.918365,6.129377,-8.938451,-7.993979],[-8.768145,4.334745,6.958997,-3.218126,-8.490028,-1.059338,-5.339058,9.339688,-0.352433,-4.174226,2.039247,1.215231],[-6.256549,7.528330,-4.914590,7.009340,3.531656,3.797819,1.378062,8.913981,-3.813594,3.133839,7.214651,0.867065],[3.805814,-6.885734,-5.812744,-8.114675,0.190591,0.143661,2.640114,-8.094004,4.338596,9.628274,-1.944332,8.638699],[7.983506,5.215582,5.537475,-4.355297,-5.426002,7.347847,-2.988641,2.978139,7.483000,3.433661,-9.499130,-8.708427],[7.506568,-4.526248,-3.519323,8.652232,-1.981000,4.780367,5.265089,0.197875,-0.133201,-8.354534,-4.108738,-4.701858],[2.814414,6.266268,-2.526605,3.669616,6.850538,8.200792,0.779875,9.364700,3.185828,8.239686,-2.115757,6.757806],[-4.259331,9.799800,2.849401,-3.987750,8.311023,-5.711920,7.060778,-7.198850,8.226684,3.359849,-8.051919,3.706880],[4.795695,-1.147369,6.850713,-3.497233,2.878086,-6.887506,-5.559607,1.276521,-1.378061,5.863723,-8.915022,3.220737],[6.239387,-9.490022,4.291794,1.563298,1.977828,5.016897,5.113918,-7.790548,5.801287,-2.063804,7.828413,-5.369139],[9.159583,-4.900753,9.355066,-8.350204,-9.048620,-7.320402,-6.033421,-8.472840,2.547497,-2.347509,5.845127,4.847094],[3.119355,-1.895397,-7.834796,3.706812,-1.050139,0.645336,1.869735,-6.207365,-8.456754,9.017977,3.228234,-3.903333],[4.718892,8.647834,8.297804,-1.071890,-3.501368,-4.690539,9.763341,2.055994,3.430943,4.653753,-3.560839,-3.785478],[-5.086460,3.632197,0.242676,-6.803562,-6.514956,2.165898,-5.010473,-8.462480,1.649624,1.878220,-8.585539,-8.412177],[7.063423,-1.897785,-7.275622,9.843499,9.265012,-3.631708,-2.907172,1.011333,-2.246927,1.332457,-0.346703,-0.717935],[-7.381475,-3.540841,-0.652120,-5.138162,-1.625905,6.693912,6.021856,8.747619,2.591572,8.576313,-3.668160,-6.572862],[6.119360,-1.324249,2.804315,3.631106,-6.340207,3.939298,1.664936,4.033759,-9.400422,-6.096740,8.688836,-6.699051],[9.556282,-0.619660,0.171937,-9.748954,-5.490784,-7.911646,9.549486,7.258188,-3.766279,-4.082243,-5.313616,0.599637],[-7.833908,-2.267471,-0.009875,-1.987560,-0.189378,0.983750,7.605892,2.750245,-0.138893,-5.210116,7.565634,-3.415086],[-8.583380,2.805340,-7.608836,9.365208,-0.702865,-6.833520,6.587082,-8.913264,9.721366,8.494213,-2.147244,2.008733],[-3.427900,-2.077410,7.907287,5.241371,-6.240348,6.750141,-2.453548,1.232187,-6.402085,0.041673,6.113241,-6.922822],[8.676980,2.598473,-9.209651,9.940536,-0.280165,-8.628125,-7.732138,5.182617,8.539065,5.655598,-4.889476,-0.566212],[-7.647653,-8.033068,-0.876914,-1.410771,-9.463250,9.093056,-9.273310,9.416255,-1.203366,9.060626,-1.071764,0.836111],[9.371328,8.399799,-3.581119,-9.872965,2.923663,-7.254948,1.660853,6.490791,-6.500915,-4.670419,1.189343,-7.379213],[-7.098387,-2.318766,-5.677293,-1.224882,-6.885695,8.381953,1.225582,4.283164,-4.026827,-4.592580,1.748070,6.839757],[-5.259787,-4.489046,-2.893591,-7.855403,-8.286445,1.607316,-9.371473,-3.894803,6.448620,8.404148,-7.321773,4.006779],[-3.033559,-8.770481,3.251564,-4.393023,-0.479420,-8.554691,6.567806,1.822145,4.369002,-8.359795,-7.021059,5.274325],[6.013420,-9.436727,6.772139,-1.909996,-4.978583,3.985656,5.912838,6.790097,7.477535,-0.035980,-8.556651,-8.225397],[-9.342776,-3.463861,-0.035073,-5.767721,-2.378499,6.448528,-3.190438,-7.970585,-4.928475,-4.209887,2.077140,3.714649],[4.559892,8.798954,1.426597,-0.506052,-3.177786,-7.602068,-9.345724,-5.084484,-2.167250,-4.697031,-4.715195,3.613403],[9.445726,-0.247083,6.289483,5.355625,6.383430,0.649157,-1.091907,-5.153641,-9.776664,2.585028,4.753822,8.668170],[9.264509,-9.262001,-8.982188,2.727358,8.516961,-4.917845,2.794748,-3.948799,-4.095146,-5.379192,5.042038,-8.678938],[2.914317,-4.853498,8.087302,-7.057351,7.797074,-4.726477,-6.423736,3.302244,7.391567,9.514495,3.152578,0.009028],[6.763557,5.894173,-8.453876,-9.993294,4.334193,-7.033618,-8.386218,-8.308613,2.999314,-5.550880,-4.639463,-5.475731],[6.551729,-4.014636,1.444073,4.439871,7.242707,1.428608,-4.218403,-5.906685,-4.498143,-8.770543,4.507547,-7.652236],[-9.807638,9.834018,8.098807,-1.619292,1.140279,3.534403,7.669959,8.433120,6.999458,-5.074841,-4.365030,-9.637990],[-7.475304,8.984697,2.964634,-8.529291,-7.154562,-3.506932,4.447927,7.761259,6.129859,1.763696,2.142439,-0.375426],[3.984656,-4.617615,8.217592,-3.697348,3.805219,0.693096,-5.330443,-0.855838,6.166189,-5.976925,-6.200437,4.870097],[-9.646379,-1.907238,1.863127,9.769826,3.205559,-3.899676,-4.847651,-1.283945,5.002791,-5.299910,-8.414843,-4.780223],[6.334518,-3.252515,-6.766622,5.568938,1.122017,-2.756394,-3.683713,2.765214,9.829597,-5.311409,8.615275,-7.512652],[7.673026,-0.677102,5.961621,7.890205,8.689519,-1.258379,-4.309312,-1.733834,9.885768,-7.128778,-8.473022,-0.913041],[-1.346631,5.768270,9.863344,-8.609813,-7.982986,-6.096396,3.821066,-1.758236,-1.108849,9.823824,2.078241,-7.549837],[-8.459811,-4.376337,-7.331112,8.268430,-5.072034,-8.810829,-2.748110,-1.915710,5.664573,-2.036317,-0.887173,0.909595],[-9.784460,0.948608,1.936415,-4.596582,2.509110,-1.474593,5.899260,-4.371862,9.326648,-3.574580,7.649502,-5.899652],[6.658829,8.607148,-7.837577,-1.002689,0.613268,-5.895310,8.941275,3.056036,8.950507,4.776404,5.291272,-4.160158],[-3.877230,-9.008967,0.722592,5.928595,4.711654,0.058212,6.954452,-8.612578,7.289885,0.414174,-8.272325,0.399487],[7.602067,-2.306269,-1.961234,5.655082,1.798455,-2.463398,-6.488914,-2.723789,6.212394,0.273734,3.338680,4.259356],[-3.503821,-3.069280,5.325698,5.835033,-4.554240,1.606951,-9.368820,3.569525,-9.286646,1.225303,4.173409,2.313859],[3.319314,-2.359949,-9.946304,7.810312,-0.236063,3.455003,-7.247221,-6.865388,7.021972,6.798763,-1.895570,1.041146],[2.719781,-7.507028,-0.534865,3.439244,-6.240545,6.815942,7.703694,-9.479269,-9.916202,-8.453904,-0.819479,6.371870],[-2.410071,2.643354,2.992555,-4.594753,3.599082,-2.839820,-2.757864,2.571589,4.964349,6.014233,-2.003182,-0.472486],[-8.903949,7.395872,-6.750998,-4.535587,9.391797,3.742032,-4.655280,8.604281,-1.226326,-0.830190,2.215820,-5.847571],[-6.618573,-7.312839,0.134256,2.591192,5.189443,-2.127841,2.069251,-5.852283,-1.268845,7.119450,4.439366,4.582261],[-5.788094,-2.864874,7.894038,-3.162236,9.120238,-9.261761,-7.978138,-6.715827,-5.021523,3.894291,7.343160,0.399394],[8.016678,-7.720275,2.970266,5.750469,5.709672,-9.037964,-1.931675,-6.914123,5.632345,-0.656424,-1.679784,9.049334],[3.817690,-6.789991,-2.037745,-2.296561,7.689309,5.714270,-8.596573,-8.328834,-6.436514,1.294984,-5.682693,-6.096760],[-7.587102,1.392832,0.467706,-6.380701,3.885256,8.344454,-0.421672,3.911363,4.022087,-3.696466,8.623990,2.903775],[2.960977,-8.340367,3.769105,2.397933,8.698635,-0.318644,0.414052,1.866999,-8.381784,8.439547,3.678706,-6.453325],[5.010119,-6.833469,4.865468,-5.318384,-1.052670,-9.028802,-4.803159,-7.846487,-5.320177,-4.984361,8.961160,-7.044176],[7.340545,-5.830677,4.522561,5.720365,9.894896,2.484550,3.278624,-0.212730,2.632322,5.296021,-3.595673,3.839745],[9.954562,4.188246,-8.473387,-4.135337,7.500377,-6.087763,8.682680,0.339853,4.966335,3.439263,-3.579487,2.113143],[1.839295,1.360541,-8.092425,-3.187407,3.399738,-0.055708,-0.165722,4.960297,4.986935,-9.372293,4.666582,2.011502],[-6.332027,6.637595,-2.163609,-2.679208,-9.257388,-0.545336,5.243479,-9.721202,-8.507627,-6.789716,3.548783,-2.397102],[6.971970,1.004759,-0.897178,8.273511,2.485682,7.695426,8.743358,4.878130,-1.638401,-1.190445,1.451584,-9.933864],[9.294430,-8.684051,-2.098816,4.372956,4.628344,-2.702132,-9.143582,-6.469195,-1.553567,1.200187,-9.117292,2.109723],[-2.347997,-5.887666,-1.531622,3.843005,7.467062,-3.604049,-0.320828,4.374865,-6.022756,3.688608,7.101262,4.458830],[-5.005926,-6.353087,6.544547,9.629020,7.797123,0.643973,-0.350975,-2.978228,-0.501666,4.929366,-0.992100,-9.884197],[-5.383698,1.096395,-0.485802,8.123543,-3.459953,8.922107,-0.109521,3.188408,-2.575177,3.380850,-2.847403,-2.678486],[3.185423,2.564238,-8.991383,-3.439136,-3.103222,-9.143243,-2.962814,6.403947,9.143344,5.093478,2.759796,-4.651091],[3.288847,-2.105926,0.166337,2.844778,-3.238603,-5.243590,-9.995858,1.186589,9.558921,3.154914,4.957043,-8.008385],[6.602662,-1.697208,-6.673489,-0.733530,5.669840,6.372745,4.361155,3.983058,-9.142298,-9.105960,-9.418554,2.766521],[-9.928032,-8.401440,5.937615,-5.478550,-8.062374,1.211867,0.414695,-7.472681,-3.526243,9.389588,-3.781693,2.713130],[5.761270,-0.191187,1.916860,5.879558,-9.784011,4.621422,-6.521910,4.453370,9.429053,5.879355,-5.069382,9.560832],[-1.145586,5.547483,7.156242,4.684233,-9.316805,-5.606586,8.631914,3.988494,8.401610,5.899943,2.127555,-9.856553],[7.252763,6.826786,-6.699531,-0.408843,-9.227525,0.201122,-0.964750,-1.629800,-8.886755,-6.858264,-4.345104,-8.703140],[-0.990031,8.274751,-8.093044,-0.018817,2.999966,8.900724,-5.677194,-6.257967,0.643136,-7.591334,-9.721426,4.211845],[-7.414494,-9.220838,5.923091,-7.447126,-2.051756,7.036416,-4.602327,-4.789520,-1.317694,2.266267,9.645332,4.938843],[9.672010,-2.759313,-8.015516,3.761740,1.102777,8.830282,-0.256005,0.633811,1.134234,6.857672,-6.867302,1.532978],[8.501818,-2.267735,6.159554,-9.658331,3.089650,-9.112363,-1.786608,-5.311045,-6.273484,-1.658254,-3.121679,5.286144],[1.221891,3.485622,9.739520,-3.447277,1.813111,8.771227,-7.165191,6.497635,6.056210,2.115742,9.504444,2.581306],[8.332399,-3.934966,1.796917,5.386875,-6.683260,2.946365,8.211311,0.074558,-4.934890,6.349889,-6.397366,-0.458335],[9.187090,9.644730,-4.717577,-2.986523,-8.705841,6.840497,-2.340038,-4.451847,4.093680,-5.898014,5.923688,5.700065],[1.890032,-0.729238,1.204809,1.602793,-1.976767,-0.117673,8.714597,-4.545402,6.258528,-4.436240,-7.981168,2.929926],[-7.353307,2.736288,9.072470,8.781692,1.350235,-1.509682,-5.721844,3.060546,-0.086834,3.755744,-2.430036,5.695069],[6.050435,-9.245590,2.516593,3.518206,3.247672,3.854170,2.468971,8.297412,9.170619,-0.594058,6.682135,-2.053244],[5.560889,-0.760807,-4.746524,3.502562,0.301740,3.960181,9.973415,-3.470336,5.220963,9.926082,-2.528809,-7.739797],[-2.167408,4.549623,-6.258643,5.705724,-0.251090,-7.175284,-8.850957,-1.873556,5.126071,-3.069900,9.532077,5.036514],[-2.475392,8.259517,-7.348706,-9.598816,-6.184502,-5.981184,-7.179223,-7.406993,9.930182,8.067845,8.145985,0.412909],[6.000904,9.128480,-0.192067,-8.503628,-3.051438,9.174077,8.080925,5.098548,-1.801117,-5.729357,-4.358670,5.943186],[2.297173,9.402524,-2.532092,5.830334,-9.568157,-7.782675,-1.050526,0.923744,8.701678,1.441470,0.907858,-6.891123],[-6.695616,-2.980860,-8.230059,4.797786,-0.830067,-8.887252,0.273377,-4.375120,-7.889240,0.679339,3.947167,2.958453],[3.891750,5.241985,-7.268338,-3.700781,7.148684,8.027134,-3.316821,6.452070,8.100000,-3.034001,-2.045549,-6.153433],[0.759277,8.417071,-8.248976,3.461329,3.627484,-5.956183,7.532453,-4.468462,1.216505,-4.580399,-1.959676,-0.428157],[9.915796,0.950166,-9.560369,-6.910982,1.989636,-8.731694,4.028185,6.468006,8.988610,-3.688179,8.013122,2.091078],[-8.989552,-7.030773,9.987651,-8.043387,8.228018,-4.559498,7.669042,-9.413167,-4.546714,-0.814214,-9.155284,-4.313233],[-6.552043,-8.924782,-8.953556,-2.631180,6.426162,5.381147,-6.138678,0.790152,3.483778,7.006814,3.589024,9.818060],[-4.540864,9.260854,-8.211227,-8.713727,-5.156672,-5.690165,-5.108101,1.647944,0.739047,2.354744,-9.516417,-7.764423],[-0.993034,-6.600607,7.740548,-4.585493,4.950405,-4.089491,8.530038,-5.693189,-3.001635,-0.867394,-6.351906,-1.967464],[7.786120,2.913064,4.128276,0.430377,7.780772,8.831785,-6.026330,-8.422528,3.515894,0.343422,-8.474967,-7.229389],[-5.218673,3.007379,-1.780956,-5.503245,2.971680,8.001450,2.607837,3.731762,-5.103814,5.363470,-5.080618,-4.778698],[8.301916,-4.863763,-5.936880,-2.237876,-2.474141,5.958179,3.217866,-5.248469,2.104126,9.884559,-8.289829,8.000409],[0.828026,5.015553,-0.825475,2.381358,3.016792,0.327483,-0.971863,-1.423590,-7.736627,3.948388,-2.898758,-5.179698],[9.441666,-1.270330,-4.922006,-6.322817,0.498483,5.903149,-2.152133,6.478986,9.440658,4.418177,-2.569921,-2.100653],[0.917441,-9.996737,7.196361,5.999407,8.865442,-8.457643,7.536883,7.114170,3.078855,-9.398809,-7.010566,4.720145],[6.080431,8.718844,0.437104,-9.966421,-7.794541,-8.847646,9.841974,-4.107799,5.533989,1.007483,-7.814037,9.055777],[0.817347,4.238269,4.689483,3.457109,4.657362,-6.766950,-4.320578,8.413380,-3.201163,-6.999784,2.725268,-1.383589],[-4.768926,9.123297,-9.924695,-7.042820,-6.776755,1.611861,-9.637249,-9.759645,-5.834248,-3.559656,7.136876,6.305493],[6.062445,-9.107447,-7.587528,-3.074163,-3.873870,8.717223,-1.937509,-2.052173,5.108535,1.122220,8.431755,9.848228],[-6.704957,-2.094858,3.056981,5.929231,-9.174460,1.958565,-5.901196,8.864613,9.414416,-4.097202,-0.646505,0.085306],[-5.439823,6.588024,-4.350356,6.231023,7.625263,6.175340,7.070193,3.410068,-9.248162,3.653333,-1.635009,4.840187]], dtype = "float64")#candidate|6180|(180, 12)|const|float64
call_6179 = relay.TupleGetItem(func_1801_call(relay.reshape(const_6180.astype('float64'), [16, 9, 15]), relay.reshape(const_6180.astype('float64'), [16, 9, 15]), ), 0)
call_6181 = relay.TupleGetItem(func_1804_call(relay.reshape(const_6180.astype('float64'), [16, 9, 15]), relay.reshape(const_6180.astype('float64'), [16, 9, 15]), ), 0)
func_5822_call = mod.get_global_var('func_5822')
func_5825_call = mutated_mod.get_global_var('func_5825')
call_6182 = relay.TupleGetItem(func_5822_call(relay.reshape(var_6121.astype('float64'), [60,])), 1)
call_6183 = relay.TupleGetItem(func_5825_call(relay.reshape(var_6121.astype('float64'), [60,])), 1)
bop_6192 = relay.mod(call_6091.astype('float64'), relay.reshape(call_6060.astype('float64'), relay.shape_of(call_6091))) # shape=(1, 8, 8)
bop_6195 = relay.mod(call_6092.astype('float64'), relay.reshape(call_6062.astype('float64'), relay.shape_of(call_6092))) # shape=(1, 8, 8)
uop_6200 = relay.cos(bop_6162.astype('float32')) # shape=(189,)
uop_6202 = relay.cos(bop_6165.astype('float32')) # shape=(189,)
bop_6203 = relay.equal(uop_6200.astype('bool'), relay.reshape(uop_6112.astype('bool'), relay.shape_of(uop_6200))) # shape=(189,)
bop_6206 = relay.equal(uop_6202.astype('bool'), relay.reshape(uop_6114.astype('bool'), relay.shape_of(uop_6202))) # shape=(189,)
func_3632_call = mod.get_global_var('func_3632')
func_3634_call = mutated_mod.get_global_var('func_3634')
var_6214 = relay.var("var_6214", dtype = "int8", shape = (624,))#candidate|6214|(624,)|var|int8
call_6213 = relay.TupleGetItem(func_3632_call(relay.reshape(var_6214.astype('int8'), [312, 2])), 2)
call_6215 = relay.TupleGetItem(func_3634_call(relay.reshape(var_6214.astype('int8'), [312, 2])), 2)
bop_6216 = relay.minimum(bop_6203.astype('float64'), relay.reshape(call_6182.astype('float64'), relay.shape_of(bop_6203))) # shape=(189,)
bop_6219 = relay.minimum(bop_6206.astype('float64'), relay.reshape(call_6183.astype('float64'), relay.shape_of(bop_6206))) # shape=(189,)
output = relay.Tuple([call_6055,const_6061,var_6071,bop_6122,bop_6167,call_6179,const_6180,bop_6192,call_6213,var_6214,bop_6216,])
output2 = relay.Tuple([call_6056,const_6061,var_6071,bop_6125,bop_6170,call_6181,const_6180,bop_6195,call_6215,var_6214,bop_6219,])
func_6244 = relay.Function([var_6071,var_6115,var_6121,var_6214,], output)
mod['func_6244'] = func_6244
mod = relay.transform.InferType()(mod)
mutated_mod['func_6244'] = func_6244
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6244_call = mutated_mod.get_global_var('func_6244')
var_6246 = relay.var("var_6246", dtype = "int64", shape = (2700,))#candidate|6246|(2700,)|var|int64
var_6247 = relay.var("var_6247", dtype = "float32", shape = (189,))#candidate|6247|(189,)|var|float32
var_6248 = relay.var("var_6248", dtype = "float64", shape = (3, 10, 2))#candidate|6248|(3, 10, 2)|var|float64
var_6249 = relay.var("var_6249", dtype = "int8", shape = (624,))#candidate|6249|(624,)|var|int8
call_6245 = func_6244_call(var_6246,var_6247,var_6248,var_6249,)
output = call_6245
func_6250 = relay.Function([var_6246,var_6247,var_6248,var_6249,], output)
mutated_mod['func_6250'] = func_6250
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4566_call = mod.get_global_var('func_4566')
func_4568_call = mutated_mod.get_global_var('func_4568')
call_6278 = relay.TupleGetItem(func_4566_call(), 1)
call_6279 = relay.TupleGetItem(func_4568_call(), 1)
func_5722_call = mod.get_global_var('func_5722')
func_5724_call = mutated_mod.get_global_var('func_5724')
call_6284 = func_5722_call()
call_6285 = func_5722_call()
func_4499_call = mod.get_global_var('func_4499')
func_4502_call = mutated_mod.get_global_var('func_4502')
var_6289 = relay.var("var_6289", dtype = "float64", shape = ())#candidate|6289|()|var|float64
const_6290 = relay.const([-5.150353,-1.074034,-9.168292,-4.157312,-6.772477,2.695162,8.826264,9.240849,3.224231,-7.551069,-8.813592,-7.819520,-9.021680,-7.718466,1.626271,8.676424,-3.487291,6.277802,8.264295,1.927070,-5.386016,6.946098,-6.605869,-7.677946,4.273161,9.932732,2.518115,-5.568963,6.554634,7.153335,9.179728,-9.759797,-6.344458,-4.605246,-5.145921,4.810535,1.750313,-6.012781,5.469579,3.918956,1.185773,5.184241,-4.700250,2.556696,-1.957221,6.743151,6.743833,-7.673714,6.236156,4.028955,-2.367368,-9.478709,8.060592,0.754477,2.181613,-4.355248,-7.287204,4.893812,9.354880,-4.591341,9.883746,7.481281,2.640545,-7.891097,0.302504,-6.984190,1.772718,8.443536,-1.286642,7.611857,5.957607,-2.624756,3.913413,-9.013226,-1.334180,2.291432,-2.124396,3.599624,-6.996315,-0.587086,2.095371,4.116711,-7.462982,-6.064513,-5.697139,-9.884909,6.723974,8.767024,6.106364,2.217476,-7.923468,1.517165,-1.475036,-0.305201,4.503392,-9.057179,-8.716903,5.613423,-6.863536,1.125919,3.219534,-3.572893,-6.803461,-5.838249,1.434932,-8.633445,-4.776757,8.802420,-1.285406,0.727220,-4.576031,-1.441800,3.659030,2.299961,6.016100,-6.375580,0.359132,9.954748,-7.887549,0.555949,-3.877984,3.026368,4.799752,1.737977,1.765633,8.570628,-7.526695,-0.189346,1.021600,4.356471,-8.779321,-7.130274,-0.564821,9.822366,8.056142,-0.201921,-7.688214,-3.305065,-4.334981,8.595517,-9.170698,-2.971264,6.725120,-1.214011,-7.578270,3.481158,-6.743939,-5.244108,-1.928586,5.393865,-1.558423,6.741724,-8.040006,9.674961,7.429404,-3.937211,4.551767,-8.497053,3.255683,-4.961624,-2.084193,-9.529639,3.175130,7.807618,-2.189399,6.361646,-8.735916,-8.140742,-5.763487,-7.416415,-2.989496,6.544957,4.854096,-2.517896,-3.157447,-1.581095,6.753713,7.438545,-5.035684,-3.257855,-8.572740,1.643908,-8.053449,1.397455,7.893663,-1.982147,-5.333638,-9.382931,1.862738,-7.317927,1.036192,-4.035701,9.135284,1.713947,-8.370464,-5.343867,5.289736,1.621238,7.705252,-7.398975,-4.680064,5.139801,-9.358818,-4.364710,-5.886012,7.742167,-4.228654,-0.082048,-1.711770,8.919864,1.065196,2.007390,5.151339,-4.430326,4.743484,-5.726113,8.288141,-3.283563,3.945528,9.064221,3.538858,7.171493,-1.087648,3.259023,7.474083,7.150544,-9.400184,0.143679,-9.995208,1.557161,-6.578017,7.767165,6.759175,9.122202,3.190203,-0.891019,7.402230,-5.825195,-1.022894,-4.710318,-9.639667,-9.965908,-7.181317,-8.872121,-5.687805], dtype = "float64")#candidate|6290|(245,)|const|float64
call_6288 = relay.TupleGetItem(func_4499_call(relay.reshape(var_6289.astype('float64'), []), relay.reshape(const_6290.astype('float64'), [7, 5, 7]), ), 0)
call_6291 = relay.TupleGetItem(func_4502_call(relay.reshape(var_6289.astype('float64'), []), relay.reshape(const_6290.astype('float64'), [7, 5, 7]), ), 0)
output = relay.Tuple([call_6278,call_6284,call_6288,var_6289,const_6290,])
output2 = relay.Tuple([call_6279,call_6285,call_6291,var_6289,const_6290,])
func_6292 = relay.Function([var_6289,], output)
mod['func_6292'] = func_6292
mod = relay.transform.InferType()(mod)
mutated_mod['func_6292'] = func_6292
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6293 = relay.var("var_6293", dtype = "float64", shape = ())#candidate|6293|()|var|float64
func_6292_call = mutated_mod.get_global_var('func_6292')
call_6294 = func_6292_call(var_6293)
output = call_6294
func_6295 = relay.Function([var_6293], output)
mutated_mod['func_6295'] = func_6295
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5416_call = mod.get_global_var('func_5416')
func_5417_call = mutated_mod.get_global_var('func_5417')
call_6335 = func_5416_call()
call_6336 = func_5416_call()
func_5798_call = mod.get_global_var('func_5798')
func_5800_call = mutated_mod.get_global_var('func_5800')
call_6348 = relay.TupleGetItem(func_5798_call(), 0)
call_6349 = relay.TupleGetItem(func_5800_call(), 0)
uop_6373 = relay.asin(call_6335.astype('float32')) # shape=(16, 11, 15)
uop_6375 = relay.asin(call_6336.astype('float32')) # shape=(16, 11, 15)
output = relay.Tuple([call_6348,uop_6373,])
output2 = relay.Tuple([call_6349,uop_6375,])
func_6387 = relay.Function([], output)
mod['func_6387'] = func_6387
mod = relay.transform.InferType()(mod)
mutated_mod['func_6387'] = func_6387
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6387_call = mutated_mod.get_global_var('func_6387')
call_6388 = func_6387_call()
output = call_6388
func_6389 = relay.Function([], output)
mutated_mod['func_6389'] = func_6389
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6387_call = mod.get_global_var('func_6387')
func_6389_call = mutated_mod.get_global_var('func_6389')
call_6409 = relay.TupleGetItem(func_6387_call(), 0)
call_6410 = relay.TupleGetItem(func_6389_call(), 0)
func_5014_call = mod.get_global_var('func_5014')
func_5015_call = mutated_mod.get_global_var('func_5015')
call_6433 = relay.TupleGetItem(func_5014_call(), 0)
call_6434 = relay.TupleGetItem(func_5015_call(), 0)
func_1801_call = mod.get_global_var('func_1801')
func_1804_call = mutated_mod.get_global_var('func_1804')
const_6446 = relay.const([0.111069,-4.218298,-7.317951,-1.646695,9.920557,-7.563790,1.095317,4.843082,-6.745034,1.351174,-8.048837,0.740532,-6.750402,1.014233,3.094030,8.166076,9.971029,0.496791,-5.115926,9.282354,3.915320,4.924273,-3.995427,-0.626831,-8.196863,-3.759319,2.661388,-3.152946,5.148200,-0.764162,3.056452,-5.074756,6.531961,-6.625407,4.377746,0.677319,2.478654,7.882041,9.377433,6.769678,-9.568755,-6.362590,2.217548,0.198667,5.702308,-0.123016,7.992699,9.010114,-2.025652,5.576442,-0.162614,2.187118,4.807443,5.910132,-6.243908,-8.160730,-1.636860,9.678467,1.466491,4.469891,-0.676226,9.868505,-4.236223,-5.743892,-0.732855,-9.783031,-6.887942,3.088355,-8.343178,-2.214424,4.613826,7.346106,-9.072273,4.368958,-8.216959,-8.563511,-3.868043,-2.657911,-6.931546,-2.355517,-8.810080,1.184124,-5.980813,-4.290999,-9.755415,7.455378,2.463621,4.341290,0.160466,7.359188,5.353734,-1.489723,1.837858,-5.880908,8.591756,3.367094,3.893247,-1.911991,8.442697,9.354475,-0.659897,5.136709,4.614505,4.842619,5.911003,-1.179518,-8.808087,6.022316,-4.300644,0.025224,-4.808518,7.139969,-2.348948,2.624978,6.809044,9.065598,9.253824,9.390844,7.004149,-6.048501,-1.567616,-7.766299,3.733972,-3.097985,7.741070,-3.254181,-3.783166,-0.240997,9.588766,-8.942260,-0.398497,-7.598404,-4.875364,-6.538190,-4.148685,7.463300,-7.106683,0.414531,8.383140,6.112623,-4.850175,-2.980229,9.785754,8.390293,-1.721937,0.301893,0.861117,-0.105220,-0.145493,6.120734,4.238862,9.434890,-5.036146,-2.306991,-4.280135,8.901089,9.110240,-7.030014,-7.028245,7.175708,2.343474,5.461634,3.138396,3.107485,-9.174507,-3.740012,5.154579,3.610144,2.112077,3.640928,5.796885,-6.028204,-9.158242,-8.006737,-7.303842,4.153537,-6.328260,-0.010887,-0.291120,2.726851,-3.581609,6.172764,1.814458,-8.299519,-2.153988,2.437682,-4.889378,-5.240331,-3.323953,2.577195,-9.302301,-0.169643,8.544190,-0.997652,-2.629817,-6.420609,-6.551703,-8.096681,8.720571,-0.126507,-1.698560,9.923771,6.642694,2.745654,-5.837240,-2.617021,0.431547,-7.490937,6.497539,0.458261,-6.233629,-4.299603,4.519137,4.892720,8.474095,-6.170249,5.028933,-9.132082,9.672607,-0.991784,-3.960157,-6.512979,3.608679,-1.295921,-4.119334,7.707526,-4.957989,6.745882,-4.701249,-1.263999,-5.202668,-9.390357,-2.283440,-0.883267,-6.407835,-6.756615,7.683020,1.483034,7.279819,8.841766,6.049531,-6.033466,-0.251599,2.507494,-4.426846,5.713499,-6.702638,-9.713351,-9.577541,-3.712713,3.541886,-5.506622,1.114033,-1.529482,1.858576,-2.478775,-5.285996,-8.903828,-7.268568,1.115399,0.428361,4.241874,-6.735192,9.173103,-2.592595,-3.588429,-9.056999,-3.637314,-0.017490,-2.349626,-5.052770,-7.684680,9.928129,-6.080848,-4.515145,6.177503,-1.661311,7.833261,-1.135426,9.300947,-4.545532,0.182053,-3.983996,-6.850886,-7.742663,9.462565,-9.004696,3.500527,-9.045363,1.002057,1.316147,0.697458,-5.071977,2.613513,7.953722,5.946597,-2.969722,-3.862990,8.082793,4.008891,8.850301,-0.100881,-6.508824,5.037786,6.211927,6.522070,6.712818,-0.312553,8.746223,5.003420,8.890140,-0.077095,7.416984,-5.468291,0.629156,-2.143637,-3.837891,-6.656568,-5.622418,-6.367936,2.658735,-7.658281,-0.119110,-2.197856,-6.550947,-2.473089,-0.358216,6.185891,0.485657,-2.221408,7.205023,0.021588,-3.312035,-6.122257,8.567792,-8.966908,-9.920232,-1.581672,-5.718063,-9.123007,-3.580963,-4.192797,1.095371,-7.661830,5.843477,-4.074967,2.168477,8.066764,2.706381,-2.898242,-1.836247,3.555142,0.767801,2.486683,-2.940574,7.612671,-2.069448,-7.478897,9.717657,-0.827805,2.769752,-0.574277,-3.931006,-1.262045,8.088573,-4.406108,-8.406297,5.013102,4.232696,8.883268,-0.349548,-3.867184,-2.829913,2.566310,6.683721,-0.784511,-9.775099,2.533241,-7.385948,-9.197160,-1.880973,9.218968,9.844935,4.628674,1.377061,-7.967825,5.265081,-3.935613,3.388903,2.437729,3.919673,-8.095398,-5.302431,-4.849987,9.060315,4.549390,-1.843314,-3.427905,5.027120,-5.974066,-5.014224,-3.355300,-1.995443,5.703281,-7.878551,-9.013063,4.640452,1.349028,5.588664,-6.850281,3.657537,-9.060094,5.667925,2.919691,-8.455070,2.174383,-1.954670,-6.918185,5.739327,7.556025,9.030638,2.509195,-5.758124,-7.391364,2.055475,-1.698317,-4.863274,-3.647333,-4.497401,-3.209656,0.091684,7.476236,-3.124588,-9.155600,-4.324094,4.754185,-5.759098,-9.609793,-3.746461,-5.946693,5.348825,-2.760497,3.250521,3.298235,-3.685404,3.266401,-5.429641,0.931772,-4.585700,-6.796420,3.806519,-7.524599,-8.404834,-5.500032,-7.771409,-5.924398,-0.911157,9.542603,1.782909,3.256255,5.574870,-4.005259,4.226589,-4.845383,8.593059,-0.468299,-5.871602,-3.276213,4.781029,3.312528,5.845787,-1.323295,-8.600996,-0.595480,-6.105296,0.884815,-1.436809,2.296050,-3.650772,6.528258,-7.731081,-3.390979,4.219715,-8.034224,-1.782091,-1.353025,9.687916,4.136916,-0.141641,-5.527985,2.919815,-2.687985,2.599474,9.963226,4.972373,9.182104,2.947764,7.497731,0.271628,8.963069,0.013399,8.058914,-5.875110,0.646767,-7.927472,-3.331259,6.470197,8.177291,-2.721649,-0.061834,-3.223083,-2.964224,-2.189963,-6.364607,5.056980,2.262305,6.499778,8.782427,7.113750,-8.248753,-4.140689,6.546579,-5.745160,-2.702978,1.797256,-8.907950,7.763163,5.994826,-3.937688,0.779501,-6.399427,2.025129,1.063558,4.650524,5.120660,5.008568,-0.534587,8.926889,4.887597,-9.378049,4.761366,-0.063956,0.809310,-9.864901,0.141056,2.148260,-9.664627,4.912608,7.458064,-9.207563,5.638739,0.049621,-4.039641,-7.532812,-6.125225,-0.048360,1.687956,-6.936077,3.236314,4.616310,-5.367615,-2.925447,4.862494,6.411776,-8.277451,2.925973,0.948419,-3.050435,9.368652,1.076333,1.222615,0.414684,7.923670,4.613752,-8.492366,8.497953,1.302345,8.884551,-6.611156,2.265124,-3.236420,-5.355373,6.202171,7.814553,3.872868,3.362169,8.386744,1.644688,-9.532055,6.485544,1.590231,-9.216975,-7.891978,8.279636,-7.329231,1.605645,0.114420,-1.697125,-3.937144,-9.215881,-7.622500,-7.509943,-0.387693,-0.915791,-4.847826,-7.755764,2.876524,-6.687464,-6.953114,-7.424942,3.630476,-5.682502,4.856490,4.017847,-5.245078,7.893505,5.228326,-9.848714,8.015784,8.589842,-5.703046,-8.674079,-9.141690,6.688020,-1.460869,8.135373,-7.318662,9.956310,-4.320264,5.088682,-3.437692,6.679610,9.066862,1.155361,2.519894,-3.424043,-4.940837,0.229216,-7.685821,-9.246474,-0.895491,-9.913974,3.241798,-2.141207,-4.200322,-2.214786,-8.710904,0.171802,-5.942900,-0.414003,5.324213,3.413095,7.884057,-1.839552,-2.642899,0.595893,-4.770961,6.742455,6.570763,9.630662,9.494845,-6.383458,2.448193,3.474741,-1.124284,1.378392,2.123204,-1.351491,5.990689,-6.830858,6.485376,-1.314698,0.971031,9.597303,3.373054,-3.674290,-0.209564,-9.391287,-1.856245,6.645615,-2.331141,-8.559552,-9.353834,-5.603038,7.808203,3.888410,-5.580320,-2.316759,8.345987,-2.833088,-1.981652,7.254268,8.276346,6.264979,-1.820023,5.257996,0.530727,-4.934620,-0.730225,-8.661083,4.171141,-3.084778,5.472741,9.051558,-0.590580,-0.102221,-6.573285,2.410572,4.747471,-7.778754,-7.852694,-3.211457,3.450219,2.987872,-9.981052,-8.839452,1.275655,5.382150,3.574268,1.224916,4.045673,0.403248,0.365817,8.287184,3.774595,-5.755538,1.772115,2.017508,8.888213,-5.266056,-0.771283,2.501831,6.668321,6.848535,1.149423,-4.595499,-4.365505,7.208518,3.231824,-2.810897,-1.295278,-7.291914,-8.960889,-3.919283,-8.141755,2.408193,9.748226,-4.700839,5.316224,-5.166727,-5.835920,8.778775,-3.609282,-9.619869,-6.842849,-2.831417,-8.638260,-8.659061,-8.872430,-5.808557,-7.545734,-2.619451,0.306596,-5.351777,-4.988768,5.214495,-3.462238,1.423720,3.751397,-8.825762,-8.908026,-1.967057,9.529584,5.951486,-4.686993,-0.685302,3.063702,-7.345685,2.624332,-2.882188,7.607915,-4.494813,-9.885829,-6.025580,8.982390,3.080532,5.406582,-2.664729,8.958883,1.155704,-3.723456,-1.122912,-1.105728,-6.894870,0.851620,2.971258,-1.441836,-4.712074,8.718797,4.150086,2.305852,-3.762473,-4.160906,5.910206,3.792926,5.694745,-2.306357,6.981233,7.458179,-7.625616,-3.565698,0.207913,9.659201,-1.979107,6.598235,-9.205381,-1.910541,7.593244,8.779536,-7.650408,0.510151,-9.146548,3.742381,-2.918950,1.019800,-5.484185,-7.481112,0.091938,3.870595,-4.271715,1.960855,-4.375683,-0.659131,-7.712811,-7.888904,-0.862812,6.276938,-8.065532,-9.512207,3.077263,2.833023,-5.989721,7.464935,-4.890870,2.422946,5.784107,7.195898,-6.441382,-4.848315,5.543554,-8.184580,-3.981579,2.117838,-7.318561,-6.663188,2.206982,3.455162,2.960936,7.230242,-7.753486,5.729799,4.140917,5.161811,-1.418260,2.699194,-2.816378,5.765516,4.871830,8.125684,-6.306366,5.271803,-1.496308,7.705371,7.283105,0.079278,1.416132,-8.727365,9.283016,5.482391,8.721418,1.150284,-6.255337,-0.173546,0.950283,7.550599,5.181729,-9.374868,-6.524546,-4.620986,-8.891935,3.156299,-5.949963,4.288560,7.830339,4.901427,4.714224,-4.206118,0.811419,4.246940,9.922818,-9.661307,6.375908,-6.967084,3.017842,9.664605,-7.630923,2.800056,-5.118571,-2.894121,9.448514,-2.024624,-6.620856,-5.547114,-5.372896,3.951536,2.826184,-9.650241,-9.382807,-9.938707,1.748045,3.439131,-2.344472,-3.027926,5.031368,-6.164515,-5.738122,3.827151,9.747482,-6.774336,5.698863,4.859989,-7.994068,0.532368,-2.785611,-1.762746,-1.469937,4.962380,-1.189706,2.686932,-5.440079,6.870651,2.408238,-5.621241,-2.193326,-1.169654,-2.875558,-5.410859,1.130565,7.752278,2.886898,-6.658962,1.077835,-4.349907,9.854476,-2.116516,5.452941,2.073574,-7.630961,-6.603609,-1.811766,9.857650,-9.879659,2.647403,6.752521,-4.577856,-1.988674,-8.631971,-5.652120,-0.009591,4.446287,-9.369374,-2.036671,3.463685,5.869539,2.319516,-2.290547,-6.488604,9.981489,-0.390839,-6.895324,9.305756,9.023823,-7.618501,4.260957,-7.466878,4.573921,0.571203,-6.256836,2.099145,-4.225534,6.408898,0.885361,-0.098826,-5.485946,9.480883,4.504531,7.139568,5.582913,-1.332279,-5.591987,7.361017,1.025007,7.492859,4.064738,4.826014,-5.033494,-6.470665,-4.619202,-3.799381,2.737009,3.068267,-8.828714,-3.713321,6.583717,-6.820397,5.064863,4.741504,1.446335,-7.502845,5.948535,-4.545558,-4.642178,9.332116,4.470235,5.257855,-6.780257,1.707244,-0.461552,-1.671078,0.263102,4.992575,-8.151811,6.277218,-7.075218,-8.749440,-3.822194,6.575585,2.969975,2.913230,-3.729794,2.593193,-2.546495,5.922401,-6.199598,-8.731801,7.465832,-6.997728,-5.895083,9.272347,2.376483,2.300275,-1.876453,5.860331,6.919910,9.667013,7.291112,-7.118733,2.628708,-5.797217,3.814821,6.153376,4.698197,-0.369649,-5.398261,-3.703246,7.566408,6.971947,-9.531314,6.955820,6.462477,0.570388,-6.781653,-4.910452,2.998907,7.556219,4.821766,9.191565,0.414278,8.782114,5.388370,4.902362,3.215391,3.853699,4.160945,7.972015,7.623545,-4.517745,1.015285,0.824846,7.719269,3.848847,-6.164989,8.459951,0.008564,9.498460,-6.679480,5.792627,1.307185,7.739834,-0.150602,9.216726,1.264036,1.532256,6.947985,-7.971666,4.979743,5.064535,-3.311425,0.316663,2.945451,7.542580,-1.044496,7.116008,7.017128,-5.510054,-9.000901,4.607658,0.507796,-5.910011,2.503018,-3.903128,-8.278978,-3.021884,-4.744646,-2.902104,-4.397083,-3.949967,4.103675,-6.350376,-9.984453,-5.884670,4.384417,2.734689,-3.676865,6.648494,-6.149515,-7.091949,0.161603,1.403773,3.720443,-8.896975,1.042318,-0.346908,-2.659786,9.429684,0.318594,8.876466,3.466186,-1.428085,-4.258234,-0.766072,9.406632,-3.182159,3.249851,-6.397245,0.774036,7.720263,6.550733,1.144659,-7.222509,6.085292,-3.747613,-2.170794,8.154969,0.566689,-1.234766,-3.201293,0.134041,6.378720,-2.283755,5.525549,-4.286863,6.259356,-6.712779,8.165436,4.277035,-6.616441,-2.218740,-6.663966,7.046239,9.441920,3.170131,0.750399,-0.298565,6.699037,5.995257,2.859488,7.904810,5.487958,9.771650,7.714293,6.333420,3.908792,-5.379886,4.440875,2.722214,-9.692836,-9.749864,1.319675,-8.286226,-1.998817,0.578363,5.480730,-1.263637,-9.231610,6.515158,-1.075712,-5.112560,-5.263364,9.731118,-1.870794,8.253601,7.461554,5.537779,-8.823497,-1.060350,9.894318,-7.637675,-1.279320,7.606257,6.256114,-1.837795,-1.961791,8.639876,-9.479673,-4.703728,9.662528,1.323655,-4.747929,-7.754943,-4.285955,9.849434,-6.083659,-4.634074,-9.525294,-4.766238,-9.123778,3.147448,6.725172,-1.644052,-4.986735,-6.940735,-0.098767,-5.308797,-0.288760,3.546474,1.125935,-4.708846,9.648147,9.563074,8.707524,2.445461,-9.218833,-1.204101,5.408582,4.666639,3.752442,9.304577,3.775928,-5.946368,-6.768240,-0.530563,-0.663716,-4.409696,1.409136,2.717501,0.128343,4.277602,-2.002055,1.450008,-3.880785,4.585181,-7.961433,6.450489,-9.563181,-8.740843,7.681141,4.837395,6.594550,5.754111,8.394840,4.068212,9.746952,-5.666809,-8.940864,5.276541,3.308385,7.107679,-5.143063,7.630719,-2.701084,1.579084,4.718594,-3.317786,-7.855802,8.178537,-0.670369,-7.548910,2.635251,4.524764,-9.516473,-9.177384,8.014599,-8.469232,-1.283974,2.070797,4.256329,8.708992,9.779383,1.632635,2.830953,7.869771,-1.537076,-4.258283,-6.898701,5.263046,-4.226118,-2.469387,7.251203,2.406073,5.864109,8.484641,-0.432462,6.700662,-8.424953,9.384717,8.119752,7.376593,1.644702,-1.940281,-8.242154,-5.158930,9.787049,-4.545018,6.747100,2.669864,-8.588049,6.351607,1.886521,-5.756854,-8.235693,6.938029,-7.576135,9.055595,-5.584862,-8.219223,1.934953,-0.362940,4.158990,-3.821719,-6.703816,0.126106,-3.564869,2.622934,9.373449,0.819480,-6.161452,-4.109992,7.563315,-7.084533,5.774859,-5.577713,0.002731,8.125742,-6.114855,-5.947683,3.651479,8.288339,-4.494525,5.166094,5.885988,6.393545,-5.923090,-7.381465,2.783091,7.250000,0.006895,-8.841827,-7.504020,-3.083636,9.790393,-6.159112,-9.621926,-6.375010,-4.604422,2.740140,-4.997020,5.868480,-9.249868,-1.623463,-9.341800,-7.643613,-5.415765,7.590444,-0.014934,7.230420,-2.199290,2.890680,0.932970,9.948871,8.691532,9.457549,-5.677432,-5.407774,4.239494,-1.262200,2.279639,7.200299,8.586583,-9.450665,-8.057503,3.559447,7.068857,-5.781712,-6.731511,6.759710,-8.102397,6.968047,0.316382,7.023068,9.676704,9.715575,-7.238823,-5.784294,2.277051,1.364462,-3.600588,-6.069429,3.607996,-5.566514,-7.358847,-9.103660,6.749596,4.392277,5.753723,3.025663,3.581821,6.133530,2.928472,9.836133,4.904018,6.225506,-3.280065,6.569901,-7.824151,4.198076,9.793894,4.103622,-0.641085,-4.525986,1.617436,-4.671171,-4.182421,-3.986476,5.669454,-3.555438,-9.858131,-1.656541,5.821638,8.260367,4.198828,-4.470088,-0.351832,1.368876,0.379992,-2.212192,5.758693,0.173470,9.594214,-0.848874,2.434477,3.683655,-4.617385,-8.128743,6.764677,8.911619,3.907331,-4.521828,0.207024,-9.549306,6.478096,9.304056,8.033537,-4.401927,-4.872705,3.765058,3.242026,8.272806,-6.976101,4.265645,1.749153,-1.992144,-0.178018,-3.327450,6.929235,-0.386904,-3.918027,1.970281,-0.026355,-3.745590,-0.309034,0.674633,-4.876511,8.038696,-4.993754,-6.663788,6.084261,-9.297468,6.294884,6.160109,9.857451,9.119032,8.519665,1.770463,-1.701908,-1.335041,2.782554,-2.856129,9.196113,-2.855383,-8.095990,9.282016,-5.978268,-0.449314,1.741717,-2.340142,2.099060,-7.345812,-6.175627,2.261502,3.688881,-0.741578,8.513077,-9.064940,-0.586548,-4.657002,7.677850,3.039045,-7.386738,-9.976988,1.293570,-2.393404,-2.867703,-1.200819,2.897301,-9.012153,6.929507,7.659853,5.770681,6.350348,1.349759,5.524049,-9.044495,-9.708961,-1.529282,-1.074021,3.303058,-7.235067,7.979088,-5.412068,-6.727040,0.644680,4.007712,-5.054681,-5.068586,4.953075,-5.330328,-4.603996,3.607599,7.418173,6.366106,9.689891,-6.899756,1.453148,-9.014829,-9.915695,-8.271335,4.488686,2.410350,-0.416266,6.977698,7.700306,-3.084539,-1.441576,-4.142077,8.683586,6.387350,-4.810971,9.723766,9.478960,1.434970,-1.278936,4.269626,-2.611865,-5.640223,-6.908553,-8.909415,8.771674,-2.749441,-8.285399,3.312961,-7.583137,-5.410672,-2.638279,-4.604855,-1.406023,-1.165777,9.314548,-0.094778,-6.491574,4.824322,-2.378435,-4.178882,-9.186452,-8.531808,9.747278,2.256312,-5.427317,-9.999528,9.920985,9.883860,-2.764134,-1.514184,7.190634,7.398586,8.767107,9.531839,-8.924237,7.205833,-8.776613,4.704892,6.531195,4.919097,9.411296,4.236956,6.459085,-3.326051,-2.565017,8.017417,5.026878,3.366828,7.161047,-6.648462,-7.180637,1.862526,7.093520,-8.800382,4.230532,2.605910,8.789257,3.019984,7.709186,-0.113288,-2.595987,9.812909,1.815815,0.142046,8.730924,-0.420543,0.061488,-5.584227,7.810097,-1.858207,8.682815,9.625720,-0.583614,7.298586,-8.949211,4.645071,1.527165,-3.571152,5.412200,-0.972666,5.844925,-8.993340,-9.548530,-5.373000,1.637852,-4.557231,-0.290814,4.133480,-1.514267,-2.670375,-3.197726,6.605722,-8.557342,-4.327254,5.623828,2.684846,-7.576068,-7.534408,-8.419468,-9.921180,9.074789,-1.490306,-4.113071,-8.426686,-2.163489,5.426829,-1.795169,4.968324,-4.085192,-3.675392,-8.892110,-9.410120,3.572966,9.820600,4.546735,6.331972,-6.709776,-7.200366,8.409920,6.100556,2.766427,-3.364944,6.201666,7.374708,-5.734967,-8.249331,1.711559,0.424442,4.220634,-1.497889,-6.884699,2.351001,-2.635888,4.759641,-5.788229,1.345819,1.269651,5.419088,6.672244,-2.241610,-8.624301,-4.459437,6.393987,-7.257358,-5.058241,-7.743290,-8.349134,7.372151,5.309902,-7.598256,8.934327,-8.289278,0.702227,-2.239480,-5.814547,-8.897488,3.914515,-4.799337,-7.286055,5.610143,6.085888,3.648173,2.296254,-4.393340,4.502437,-4.699781,2.651545,6.573329,-8.522779,6.679390,-4.778277,4.519106,4.232060,0.257630,-2.592540,-8.265010,-0.937714,5.027013,5.499937,-8.530759,-1.073689,6.613216,3.008140,-8.590681,-9.176821,-8.198580,-2.362982,-3.813413,7.173380,7.472495,-8.952353,-4.845552,-7.027593,-6.628133,7.688201,-5.771898,5.036604,3.881173,2.696853,-7.202562,-5.711197,-4.117551,-7.344003,-8.190322,-0.707299,6.959661,7.641502,9.415240,3.541561,8.533542,1.696835,-8.703846,-6.485593,4.194503,-1.619746,0.022392,9.470926,4.535463,2.405142,6.782450,8.972748,-1.677666,-8.622577,-2.849957,-9.514538,5.947299,-3.153882,-8.655664,3.405316,-5.400275,-2.301455,-5.456715,8.311116,6.779862,4.466105,5.647962,-5.071573,-8.685710,9.957972,-3.492809,-1.634604,5.726657,-7.367104,8.203405,-0.661348,6.831893,-8.297818,-9.503120,4.613211,-6.045063,-9.980650,7.161891,2.128819,-0.016993,5.779320,-0.508422,-4.024141,-4.678297,-5.549907,-6.061288,9.548142,9.929285,-8.474769,9.964842,4.332682,-0.644072,3.916194,-6.341992,2.145842,-1.082934,-0.751723,7.605438,-0.916294,3.695981,2.671701,8.430444,5.121740,-6.113653,-5.126733,9.101316,1.133849,-3.399607,9.988778,-5.837384,4.295529,5.745047,8.021385,-2.446349,-4.748865,-3.671715,3.089920,-1.991403,-4.756624,-9.993155,7.923133,7.767441,-0.977614,6.479394,-0.959097,-7.257767,-4.770019,1.245007,-8.432676,-2.553124,3.354751,8.947933,-4.102516,4.272426,-0.012540,-8.998906,7.501060,1.474839,3.134887,-9.368454,-0.474398,1.880164,-6.721199,-9.619825,-2.619444,-2.510640,-5.622256,-2.461232,6.993192,1.822858,-6.275446,4.660564,9.137853,2.055327,-9.077597,6.425790,-1.637105,4.830743,2.102522,-6.921774,-0.596921,-9.286313,-2.553912,-7.208617,-3.841243,3.792647,8.650385,1.248718,7.048874,9.428001,-9.973702,-0.665447,6.258778,6.013053,-0.348968,-5.572859,-5.880393,7.412075,8.842884,0.129063,6.773286,-6.673619,6.226838,-9.938234,-5.032426,-7.510282,-5.785038,-0.204609,9.019794,-3.022782,6.089776,-1.924866,0.291362,-7.398836,1.948311,2.598003,-4.533070,2.588329,4.090456,3.345428,2.133838,-6.806946,-7.632934,4.352256,-3.775244,9.843807,-3.719745,-7.780287,1.192593,4.765100,-8.062026,-8.034177,-2.022134,-4.357096,7.708235,-5.731229,-1.637112,-8.518873,4.334009,-5.988582,8.111548,9.220241,4.168905,-0.489232,-0.377582,-1.892748,-4.970761,2.872945,-0.773408,-4.949667,7.275492,3.461455,8.766203,1.121058,0.816271,-3.892462,1.011639,4.609029,2.537583,-8.168914,5.076492,-3.904492,2.479586,-7.678535,-2.993549,5.633627,0.039416,9.290267,-3.059272,3.092922,-3.698196,-0.281786,3.818144,-6.778411,4.533372,-0.723060,0.627049,-2.088374,8.424597,0.213002,0.848936,0.454011,2.175438,2.050631,2.396259,9.995389,0.584613,-6.980177,5.444064,5.336716,2.708044,1.767605,1.386501,5.561892,4.096436,-7.556185,5.596955,0.941600,-0.931575,-4.599002,-7.109128,8.201061,8.916014,-8.951618,-1.960207,-6.008614,-3.089948,2.613691,9.973884,-4.951289,7.604147,-0.485170,-4.419409,7.923971,-5.317100,4.101359,3.894700,-8.424630,-3.566629,-8.120454,7.044879,-6.846632,-2.344880,9.005159,-2.820506,-6.636840,-1.806760,-2.508147,6.616685,2.030597,3.582348,-7.203888,2.497354,1.016898,2.852008,-0.863348,-9.479161,-8.564092,-7.092576,1.497354,5.365868,-0.361303,-8.089063,4.179775,-9.452823,9.487569,5.524178,8.052174,3.150265,-8.671427,-4.183926,1.680153,0.344166,1.092915,0.154391,-2.178225,4.862787,-4.041941,1.068039,7.974619,-1.325264,1.140023,-7.336390,-0.372204,1.068238,-6.216892,1.061962,4.591516,-3.220005,6.949030,4.441507,-5.529669,-7.725773,-5.742101,-2.069395,-6.687258,-5.357459,-9.999163,-5.749606,-1.403319,2.049664,2.154699,-3.585403,2.526747,4.786647,-3.602967,-7.827899,7.261789,5.649351,-3.098649,5.460039,-4.352073,-2.402143,-8.225419,1.625613,7.802441,-8.482019,-9.493972,7.010777,9.668161,-5.862812,1.264677,-6.686887,7.622630,-2.152468,-7.536217,-2.320404,2.751792,9.055272,2.897867,5.489567,-7.321268,9.299612], dtype = "float64")#candidate|6446|(2160,)|const|float64
call_6445 = relay.TupleGetItem(func_1801_call(relay.reshape(const_6446.astype('float64'), [16, 9, 15]), relay.reshape(const_6446.astype('float64'), [16, 9, 15]), ), 0)
call_6447 = relay.TupleGetItem(func_1804_call(relay.reshape(const_6446.astype('float64'), [16, 9, 15]), relay.reshape(const_6446.astype('float64'), [16, 9, 15]), ), 0)
func_1745_call = mod.get_global_var('func_1745')
func_1748_call = mutated_mod.get_global_var('func_1748')
var_6449 = relay.var("var_6449", dtype = "float64", shape = (672,))#candidate|6449|(672,)|var|float64
call_6448 = relay.TupleGetItem(func_1745_call(relay.reshape(var_6449.astype('float64'), [6, 16, 7])), 0)
call_6450 = relay.TupleGetItem(func_1748_call(relay.reshape(var_6449.astype('float64'), [6, 16, 7])), 0)
output = relay.Tuple([call_6409,call_6433,call_6445,const_6446,call_6448,var_6449,])
output2 = relay.Tuple([call_6410,call_6434,call_6447,const_6446,call_6450,var_6449,])
func_6455 = relay.Function([var_6449,], output)
mod['func_6455'] = func_6455
mod = relay.transform.InferType()(mod)
var_6456 = relay.var("var_6456", dtype = "float64", shape = (672,))#candidate|6456|(672,)|var|float64
output = func_6455(var_6456)
func_6457 = relay.Function([var_6456], output)
mutated_mod['func_6457'] = func_6457
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5522_call = mod.get_global_var('func_5522')
func_5523_call = mutated_mod.get_global_var('func_5523')
call_6577 = func_5522_call()
call_6578 = func_5522_call()
uop_6591 = relay.log10(call_6577.astype('float64')) # shape=(16, 11, 15)
uop_6593 = relay.log10(call_6578.astype('float64')) # shape=(16, 11, 15)
output = uop_6591
output2 = uop_6593
func_6606 = relay.Function([], output)
mod['func_6606'] = func_6606
mod = relay.transform.InferType()(mod)
mutated_mod['func_6606'] = func_6606
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6606_call = mutated_mod.get_global_var('func_6606')
call_6607 = func_6606_call()
output = call_6607
func_6608 = relay.Function([], output)
mutated_mod['func_6608'] = func_6608
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5450_call = mod.get_global_var('func_5450')
func_5451_call = mutated_mod.get_global_var('func_5451')
call_6656 = func_5450_call()
call_6657 = func_5450_call()
output = call_6656
output2 = call_6657
func_6666 = relay.Function([], output)
mod['func_6666'] = func_6666
mod = relay.transform.InferType()(mod)
output = func_6666()
func_6667 = relay.Function([], output)
mutated_mod['func_6667'] = func_6667
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5450_call = mod.get_global_var('func_5450')
func_5451_call = mutated_mod.get_global_var('func_5451')
call_6668 = func_5450_call()
call_6669 = func_5450_call()
output = relay.Tuple([call_6668,])
output2 = relay.Tuple([call_6669,])
func_6670 = relay.Function([], output)
mod['func_6670'] = func_6670
mod = relay.transform.InferType()(mod)
mutated_mod['func_6670'] = func_6670
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6670_call = mutated_mod.get_global_var('func_6670')
call_6671 = func_6670_call()
output = call_6671
func_6672 = relay.Function([], output)
mutated_mod['func_6672'] = func_6672
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6737 = relay.const([[[-9.833126,5.936062,1.183254,8.078156,-0.717330],[-1.047944,2.328110,-9.469035,-6.999128,-1.272729],[4.566225,-1.819790,1.835785,-7.887976,-3.226628],[-7.516669,0.268768,9.815933,4.039739,3.925869],[0.061993,-5.762209,5.544816,-6.122431,6.243953],[5.046481,6.138443,-3.715709,4.174654,2.263084],[-3.252740,0.282778,-9.375681,-1.633944,3.822886],[0.244720,-6.542049,3.501954,-4.520372,2.757967],[-9.096664,-3.491486,-5.745419,-4.271422,9.913191],[1.831834,6.338735,9.070359,2.588225,2.685615],[8.431484,2.409743,-7.517696,1.922430,9.002603],[3.999680,2.783742,4.382166,-6.749898,-7.100351],[-8.681305,-7.064932,-2.655661,1.822363,7.926277]],[[-2.304107,2.977575,-9.007351,-5.857243,-8.516827],[2.114621,9.085086,2.886593,-0.041932,-9.439034],[9.265889,0.644150,-3.907459,-5.607196,9.090335],[4.201026,-7.980402,-6.123453,-8.846309,2.436316],[-0.552464,-9.280626,7.818189,-1.756176,-9.804786],[-6.873292,2.791298,9.965342,6.117865,0.130944],[1.584547,-0.067008,9.300705,8.513397,8.796179],[-0.189968,6.893406,2.612770,-0.707925,-5.236802],[-6.791799,9.604891,-6.920448,-8.034558,-5.168718],[4.945837,-6.092037,3.786371,-7.270958,7.723044],[2.212721,6.184877,5.597497,-5.543655,-1.544896],[-6.249157,6.927218,1.697694,-7.545660,-5.554804],[2.310422,-9.692741,1.199331,-1.772236,-6.291787]],[[-8.737369,3.237537,-6.421418,-7.895360,0.578598],[-3.456663,-7.926569,6.236154,2.143124,5.966437],[-7.013399,0.425518,-1.990776,-4.033496,-7.573102],[-7.591099,2.098093,-2.495099,-5.158702,-9.149789],[-2.630472,5.842797,-6.586008,-4.990684,-0.989430],[4.440859,-0.946944,-4.045208,-6.357655,3.606918],[2.592214,1.144533,-4.468816,9.412011,-1.522437],[-4.850514,-7.335968,9.565803,-9.504910,-8.602500],[5.990868,4.897750,5.460038,-2.966120,-8.378408],[-2.737618,-8.924977,-5.799497,-6.738078,8.330860],[1.894214,5.799876,-4.162991,9.912283,-3.430722],[7.760941,6.050272,4.894170,-9.378573,-8.027108],[-4.563972,1.681537,-0.022082,6.488473,9.933048]],[[-6.389300,-3.837974,-6.879280,-4.415851,6.777930],[0.990771,0.703347,1.800137,3.970976,-4.862824],[-8.692671,9.425884,5.472378,-2.455635,-9.945383],[-3.423848,-3.959885,-2.095944,4.923618,-1.553416],[6.490528,4.586421,5.143690,3.068019,3.666675],[-8.090913,-6.995154,1.184201,-7.263731,-8.897511],[8.061319,0.397395,4.217461,-2.056730,-4.104891],[1.807248,-5.886080,-8.550332,6.937205,7.773990],[-8.518034,9.537211,3.366114,-6.870670,-4.154206],[-2.046444,4.955611,7.417476,2.752285,4.351872],[2.625710,1.282599,-6.154610,2.283298,8.692544],[-0.801609,-3.092905,9.110884,-4.636338,7.997207],[-8.471639,-6.460296,9.154620,9.169280,9.140542]],[[0.451089,8.182580,-0.008404,-1.504277,-2.884566],[-9.818113,6.295447,-7.120024,-1.655736,2.369982],[2.256868,3.191337,1.857952,8.038751,2.366929],[-1.328755,2.761357,8.343023,8.316671,0.866794],[-6.316399,-6.492488,5.578244,-3.351448,8.731119],[5.060588,3.951742,-9.801536,-2.606327,4.454663],[-8.413175,-5.403233,-8.575672,3.667773,6.734403],[5.798433,1.017137,-5.342384,-6.685547,-8.662676],[-0.410657,-9.198508,0.416713,-6.603669,-7.669992],[4.826453,7.614598,1.264516,-5.690623,4.685984],[9.076337,2.711022,-9.954405,3.677973,-3.003972],[-1.743357,-5.907797,-0.415364,9.125192,2.122962],[5.905157,-8.251718,-7.541154,-0.464469,9.128262]],[[-1.234926,-1.082651,9.035926,4.706366,6.958812],[-5.019949,-6.913989,-3.324946,-4.391458,-9.722022],[9.870206,2.418889,-8.409209,7.417809,-8.327478],[4.723804,-6.498564,-7.008006,-4.412093,-8.137158],[5.856207,-9.007247,8.298942,-7.595291,-7.811529],[5.043339,-5.494683,-3.411144,-3.828100,0.619556],[-1.296329,-6.161911,-3.418635,-8.234196,-8.045549],[-9.772374,6.122617,-3.403841,8.951415,2.717921],[2.300619,-7.822273,3.843722,-7.358178,-8.172975],[-6.130055,-4.153227,2.612861,7.820801,-4.785416],[1.017344,8.338211,8.537550,7.548910,-4.574046],[-1.542951,-8.492871,-6.611193,9.689937,9.478836],[-1.931226,-8.908999,-3.097131,-4.145682,1.799663]]], dtype = "float64")#candidate|6737|(6, 13, 5)|const|float64
var_6738 = relay.var("var_6738", dtype = "float64", shape = (6, 13, 5))#candidate|6738|(6, 13, 5)|var|float64
bop_6739 = relay.add(const_6737.astype('float64'), relay.reshape(var_6738.astype('float64'), relay.shape_of(const_6737))) # shape=(6, 13, 5)
output = relay.Tuple([bop_6739,])
output2 = relay.Tuple([bop_6739,])
func_6743 = relay.Function([var_6738,], output)
mod['func_6743'] = func_6743
mod = relay.transform.InferType()(mod)
var_6744 = relay.var("var_6744", dtype = "float64", shape = (6, 13, 5))#candidate|6744|(6, 13, 5)|var|float64
output = func_6743(var_6744)
func_6745 = relay.Function([var_6744], output)
mutated_mod['func_6745'] = func_6745
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5450_call = mod.get_global_var('func_5450')
func_5451_call = mutated_mod.get_global_var('func_5451')
call_6795 = func_5450_call()
call_6796 = func_5450_call()
func_2853_call = mod.get_global_var('func_2853')
func_2859_call = mutated_mod.get_global_var('func_2859')
var_6802 = relay.var("var_6802", dtype = "float32", shape = (880,))#candidate|6802|(880,)|var|float32
const_6803 = relay.const([[8.703854,-1.546390],[-8.719188,8.653516],[-2.022254,-9.582544],[-7.941983,-3.619654],[4.234213,3.444618],[-7.630247,-4.699526],[3.509535,7.337000],[-2.612781,4.472936],[7.878021,-3.092321],[0.024976,6.885239],[4.898374,4.017054],[-9.992992,1.015739],[3.020085,0.941087],[-2.846392,-1.289947],[-8.421202,2.535832],[-0.310241,-2.119407],[-5.850637,9.031723],[7.313405,1.508017],[7.440221,-5.999945],[-3.782584,9.893387],[1.542882,3.118841],[-0.888121,6.479717],[-0.318970,-4.287137],[7.759568,-9.061724],[7.830718,9.470060],[-4.393013,5.654301],[-4.421810,8.576063],[8.227845,-0.835690],[5.345695,-0.998273],[-4.519051,-7.107768],[-1.175705,2.117009],[-5.777611,5.410239],[7.964791,-5.163323],[-7.084174,0.662955],[0.088275,1.159521],[-3.510825,7.498246],[-9.705386,4.995198],[-7.617516,1.666497],[-5.095491,-0.270610],[-8.735683,-6.242356],[6.192111,3.845002],[0.410589,-1.241844],[7.860197,7.160498],[5.144394,4.201880],[1.551142,-2.840532],[8.500827,-8.399516],[-6.972252,-0.028256],[2.482403,2.633299],[4.208324,-9.321119],[5.256671,1.841501],[-2.744920,-0.193622],[-2.692278,3.076152],[0.092368,0.552229],[1.332769,-0.088034],[-8.330204,-4.451518],[-3.485731,-6.385015],[-6.209831,-7.794323],[1.743651,-1.353609],[-6.263385,-3.222802],[6.063787,-2.452957],[5.724379,0.588055],[-6.419940,9.288676],[-4.120864,-4.053822],[2.637410,-2.605342],[4.297240,8.489946],[-7.308922,-8.200201],[3.276752,9.939423],[0.967241,8.916522],[0.666356,3.808397],[-5.488442,1.310859],[0.304165,7.883297],[-1.458901,-8.192073],[-0.934354,9.843871],[-1.506377,-6.907189],[-3.877900,-8.513121],[2.700003,-9.134371],[-7.820127,-9.531061],[-0.037796,1.201197],[2.349958,-6.069957],[-5.603900,6.521147],[4.480201,2.654909],[2.388594,1.285852],[-2.175320,8.649455],[4.175972,-7.499777],[5.072260,-1.916962],[-3.583500,8.863323],[8.825320,-8.470486],[1.086308,-2.047407],[-0.656607,-7.040677],[3.801483,2.838083],[4.088910,-3.360927],[-2.987437,-9.308427],[0.311878,-1.034827],[-4.553576,-6.179797],[2.489666,1.201483],[-2.691558,8.910527],[4.887598,-8.754810],[7.907462,-2.217358],[-5.693704,3.499292],[-9.824553,5.972935],[1.324612,6.524561],[2.216826,7.561256],[-8.071027,3.553071],[-3.979350,9.479711],[-0.296463,6.552183],[9.527659,-7.903508],[-0.280949,6.783265],[7.163957,-5.529455],[-5.791643,-2.396739],[6.361409,-5.020565],[-3.475477,4.179466],[3.357579,7.187021],[-1.545972,6.860271],[-1.561766,-4.250725],[-3.306716,6.389980],[-1.498297,-6.686578],[-6.507007,-3.965008],[-2.274010,7.814751],[2.058072,0.860882],[-3.139456,-9.866226],[8.451172,-1.501033],[-6.058203,-9.494883],[-7.574268,-0.038563],[-4.581539,3.662076],[-4.473271,-9.300864],[7.684197,4.372605],[-3.047898,7.762174],[9.024475,-9.868349],[5.190759,4.145537],[0.159242,-7.571385],[5.340845,-5.049220],[6.913433,-1.588230],[0.529492,-9.355723],[3.111665,1.427097],[0.444921,-2.607790],[3.270992,3.808630],[6.564364,-0.986123],[6.399580,5.900242],[1.106569,-0.327028],[4.316962,-9.976644],[7.535953,7.154162],[2.418391,6.871338],[0.844251,7.548814],[-7.365817,-1.230805],[2.909952,-7.825634],[7.913591,-4.577586],[6.606386,-3.102034],[7.641225,8.345935],[8.344010,7.618791],[-1.757251,7.055335],[-5.715804,-5.754609],[-3.845121,6.839956],[9.016369,-4.500708],[8.245243,4.531341],[1.183414,7.290716],[6.519525,8.323988],[-3.818356,6.738998],[6.220562,-0.289587],[6.001850,-6.470087],[6.445472,-1.534515],[2.915528,-4.549999],[7.394960,2.777367],[3.841876,9.034791],[-3.396101,5.704705],[-0.772061,3.723398],[-0.601285,5.900301],[-5.416238,1.920292],[6.723529,-7.006351],[-1.296479,5.058775],[-6.049644,-9.835420],[-6.191277,-1.884269],[-3.660700,3.125444],[-0.335534,8.025039],[-8.475540,8.294280],[-1.615110,7.369128],[-4.510674,7.579468],[-8.389086,-8.064699],[0.351640,-5.748945],[-7.682696,-9.630695],[-4.362882,8.775860],[-0.819436,3.581278],[-0.023876,1.058242],[7.758562,-3.172904],[-6.623379,-9.792943],[7.599679,-4.107133],[6.769930,-0.140067],[5.396390,3.436056],[-0.736178,5.452338],[6.248842,5.326782],[0.823677,-7.123020],[1.443015,-6.986369],[-8.535626,-0.696930],[8.001371,4.808508],[0.194663,-0.390272],[-5.458471,9.946151],[1.217142,-0.339532],[9.986961,-4.053222],[-0.485579,-0.013081],[2.648037,-0.278957],[5.394626,0.259343],[9.410210,-9.058716],[-9.789671,5.654091],[-3.321929,8.259156],[1.282891,-2.588184],[-2.526540,4.928222],[8.785258,-6.800356],[-2.179842,7.650779],[-9.443539,-2.203353],[2.876307,-2.904838],[-9.456806,-7.221867],[-6.753233,-7.584289],[9.506658,6.213175],[2.799076,7.175398],[-8.956106,6.102387],[-4.222112,-6.166887],[-9.800128,-3.753745],[0.588861,6.662357],[-1.727444,-5.230172],[-8.377165,8.545126],[0.876346,2.634684],[0.721506,-0.703918],[-3.746226,9.406418],[-2.847026,2.504367],[-3.711540,-6.073994],[0.097845,5.966781],[4.339628,-6.536883],[-8.870564,-7.653618],[-8.219127,-4.765671],[-5.756528,8.732994],[3.170909,2.817978],[8.851025,-5.113493],[-3.328947,1.191685],[-9.779322,4.266686],[6.226802,8.020877],[5.787202,6.288108],[4.719374,-4.569893],[-3.624419,6.676201],[-7.661047,0.973846],[6.038635,7.876434],[-2.225340,0.189768],[-6.527889,7.882214],[6.228236,4.388930],[-1.885114,-0.593227],[9.445228,7.716278],[6.283124,3.970310],[0.349299,9.128817],[-5.726741,-1.101581],[4.276261,6.218027],[-3.113089,4.623985],[-2.745359,6.240040],[-6.146476,-7.201925],[-8.445636,8.583590],[-3.400906,5.036441],[-2.691440,5.167743],[5.035077,1.904569],[0.886307,-7.862430],[1.784311,6.635741],[5.918391,-0.317383],[6.857181,3.939454],[-0.864530,6.612781],[4.847421,-6.407868],[3.912204,-0.208827],[3.006338,3.080087],[-4.664270,5.925044],[-8.498131,0.039156],[2.867715,0.872530],[3.408594,-4.553996],[0.887927,-6.221531],[-3.990781,-7.050992],[-0.466402,-9.910579],[2.175389,2.148445],[-3.569236,3.257427],[6.398733,-1.458551],[1.377877,3.215294],[-6.101118,-0.182651],[2.056499,-9.226144],[-0.285341,9.858639],[5.304803,-6.056737],[-4.725358,-2.011550],[-9.084764,9.306208],[7.803258,-6.358785],[7.536113,8.072696],[7.762980,2.154460],[-0.418638,-5.355385],[7.584007,-3.871272],[-4.651644,7.498187],[-8.461608,4.239250],[6.675608,-5.297218],[-1.975618,1.085450],[0.464704,3.809106],[8.772133,1.383542],[-2.032743,-7.982786],[-6.196481,-5.326174],[6.559655,7.670460],[4.436969,4.794386],[3.347042,5.144398],[-3.589044,3.068623],[9.554207,8.682983],[6.084567,6.605149],[-3.157005,9.148530],[-5.958886,8.377025],[2.465790,9.020647],[9.195474,-0.620105],[-9.666712,-7.940420],[-6.241766,-2.389802],[-1.199613,-5.609411],[5.238019,3.474509],[0.266044,-8.667334],[-5.988572,-7.480265],[-7.114894,8.582835],[-6.464723,-8.989074],[2.423570,0.233131],[-2.203497,-1.525521],[6.688071,-2.954365],[-2.570326,3.450541],[4.599533,4.169524],[1.630897,0.731066],[1.907571,-4.614058],[-6.278316,-4.315866],[1.701779,-1.311086],[-0.879325,7.045969],[3.997655,-2.202744],[6.260200,-1.622424],[6.452452,6.798980],[4.339035,-1.183724],[7.576753,-3.398406],[1.773342,6.695203],[-1.611292,-7.740139],[-1.881156,0.835290],[7.740099,6.694419],[3.022149,4.964253],[8.110055,3.171281],[-7.731356,3.441661],[-9.814894,2.918757],[6.529490,2.045011],[-7.203584,-7.585161],[8.907675,6.278187],[1.692853,6.493090],[-6.897109,0.374327],[4.429541,-5.925427],[-1.457854,1.066156],[7.511729,-0.117822],[-6.872365,-9.682388],[3.639753,1.102650],[-9.131570,3.798499],[-6.322219,-4.360453],[-1.590189,-0.401483],[7.276065,3.690350],[7.054637,-8.564188],[3.266734,2.904508],[-1.969014,6.181573],[-1.007186,-8.112241],[2.726360,-9.055131],[8.654672,-0.523513],[-4.449089,0.672549],[8.946260,3.001284],[-4.185318,5.135683],[-1.920420,0.125408],[-3.206567,-7.048915],[2.582771,-1.085210],[-7.538544,-7.558053],[2.157952,0.925951],[-3.725990,8.414885],[6.662422,-5.934809],[1.656975,-9.974749],[-0.162682,-8.195971],[-4.639809,3.077271],[-8.502869,-2.488158],[-5.708242,-2.122647],[4.274003,7.716133],[-9.798157,6.049643],[7.894715,5.411948],[9.462151,-7.895113],[7.426014,-5.384777],[9.412164,-7.029590],[2.493727,-9.291810],[2.066586,-9.331322],[8.401975,-7.520895],[-9.486430,7.466221],[6.756567,-0.983832],[-8.999300,-5.675145],[-0.637444,1.218251],[-3.758789,0.762074],[-4.150504,6.815381],[-5.274512,-2.736911],[4.867416,9.794186],[-9.002695,2.488697],[-1.690189,-6.121508],[-3.782309,-3.300167],[-7.277600,-3.587163],[9.477431,-2.740745],[-1.966717,-9.662688],[8.437447,-6.997539],[0.502887,3.454405],[-0.919167,-3.344837],[-6.712103,-6.588246],[1.763188,5.774113],[-5.310110,3.698777],[0.374841,-8.583831],[7.376565,-3.555614],[0.399662,-6.409775],[9.106025,6.230950],[-1.674730,-6.345790],[-5.973226,-2.645789],[4.821691,4.618187],[8.690749,-2.263960],[0.437814,-2.674576],[3.823815,5.258018],[4.988099,7.546282],[2.139237,8.716190],[-9.846058,6.144654],[-5.688339,9.371382],[7.866230,5.736311],[8.998727,-0.037335],[-8.675622,3.751960],[7.742819,3.579431],[-6.626785,4.915265],[2.878746,-9.477053],[-3.357392,-7.686427],[7.235326,2.108500],[1.430927,5.607697],[-9.413003,6.025423],[9.698689,-8.772544],[5.957817,2.731231],[-2.189567,-2.563353],[4.266388,-6.602883],[-2.605882,-8.442890],[-0.459730,-6.950292],[0.703203,-5.718300],[9.942219,-9.920656],[-4.691935,-6.325845],[-3.296928,-6.634137],[-0.217642,-1.379778],[8.346308,-2.296718],[-4.805470,9.418230],[-7.329773,-9.724454],[1.229672,1.262923],[-9.647394,9.953460],[-2.337047,-8.305744],[-9.751164,1.586338],[0.954653,-3.852063],[-4.279268,-6.009858],[-2.996021,5.873480],[-5.566498,-5.429337],[-7.536063,-5.860568],[9.190127,-0.065035],[5.032374,0.024903],[1.914497,4.569742],[-3.477745,6.896085],[-7.061583,6.144974],[2.381202,3.400440],[-2.134781,5.798458],[5.999898,3.603454],[-3.814520,-3.424046],[2.069805,5.634506],[-7.632381,1.914373],[-7.797314,-7.553871],[7.731992,3.597376],[-1.510628,-4.720810],[-5.567209,-2.385495],[3.067802,0.865311],[5.428130,-0.075028],[1.495837,7.829662],[-6.785825,-9.723915],[3.608313,2.658431],[7.453840,0.039837],[9.017779,-1.725116],[9.410063,0.543895],[2.835291,-6.251742],[-8.652609,6.959654],[-4.142597,0.882892],[6.838937,-8.729773],[-5.740407,8.507315],[-7.538460,-8.364425],[-9.962761,-9.915554],[5.225182,3.105782],[-9.271571,5.228960],[-6.668182,-2.538316],[6.041648,2.541529],[0.338493,5.865295],[1.788211,9.442917],[6.799384,1.373198],[1.775506,2.883735],[5.756360,0.705458],[0.295670,-8.988853],[1.075764,-4.662901],[-6.130106,0.148058],[8.442215,-2.735368],[-3.928944,2.072054],[8.400803,7.945760],[-4.235265,7.449235],[5.466250,9.915491],[6.089730,-9.718906],[-2.647379,1.673190],[-4.472722,-1.046208],[5.970916,-1.943481],[2.846463,1.478361],[-4.117195,9.509296],[0.855004,-2.189817],[8.487231,1.268427],[7.634777,2.177228],[9.101231,9.852983],[2.240155,7.275499],[-8.718957,-0.551722],[2.275118,-2.728495],[1.816137,-8.729057],[-5.162120,5.202760],[-1.416888,-7.486308],[3.365043,0.197364],[-3.259912,-6.452091],[5.544128,-6.189120],[-2.358294,1.396349],[-1.323460,0.242615],[0.098739,-6.172948],[3.324293,3.248439],[1.737578,1.354524],[6.393418,3.404096],[4.011819,4.970768],[9.201890,-5.009530],[4.472795,-1.663383],[2.865982,8.493418],[5.677616,-8.302412],[1.712795,6.544757],[2.533674,8.810672],[8.548926,-2.535543],[4.441942,6.905107],[9.844269,-8.458238],[2.969847,-1.134905],[-9.630097,9.152086],[-1.910104,-3.945858],[7.227801,-4.351099],[7.102991,4.959557],[-4.452348,2.297534],[-9.031856,-8.209646],[0.371050,-6.909484],[9.810234,3.445207],[-5.579570,-0.013365],[6.907519,-2.068059],[-1.378522,0.683349],[6.090741,-5.658012],[1.484145,4.338288],[8.483673,4.435866],[-3.564390,6.490624],[4.844065,9.241333],[-2.226970,-6.980078],[9.580609,-3.897755],[7.755612,1.848392],[5.913588,-0.418213],[0.371721,-6.002059],[4.585237,1.476605],[5.876728,-7.170970],[-6.207169,-5.061165],[2.817204,-7.661168],[7.160425,-0.881253],[-2.714790,7.852961],[9.930295,-4.013075],[0.954704,8.493286],[7.130581,-7.033724],[-6.730382,2.140692],[5.114778,6.397355],[-8.751673,4.105565],[-2.077901,-4.796523],[8.860394,-8.546130],[1.062104,1.061462],[2.747314,6.709681],[-8.799176,8.322448],[-8.494164,3.109136],[-8.073779,-1.832563],[-0.787958,2.062922],[6.187473,7.345279],[4.643546,-1.190301],[8.951516,-3.266290],[-0.930594,2.070785],[6.536153,2.020225],[8.787398,4.751852],[1.456035,-1.354283],[6.706096,1.101749],[1.211742,4.133190],[-8.178594,1.787006],[-4.759772,0.288791],[2.364655,7.320813],[7.835946,7.644255],[3.457162,3.130954],[-4.306926,-2.290846],[7.080287,4.399138],[-4.221509,9.392277],[-6.831356,-8.179321],[-4.415163,5.880797],[-2.538488,0.054051],[-4.979775,-2.615397],[4.685844,-0.032020],[7.081966,-9.496043],[-4.855838,0.454801],[-3.000232,-7.446589],[0.307561,4.518101],[-1.991209,-8.608155],[3.455574,-0.982680],[-2.151279,9.250957],[-9.365407,2.551369],[-5.288394,-4.994520],[7.980262,-4.135940],[2.319811,-1.091120],[8.582693,-3.180919],[6.231717,9.201908],[-8.433712,-1.832102],[-9.559511,5.272688],[1.057940,2.674217],[-8.569178,6.369653],[9.054868,2.002910],[-0.745322,-2.626062],[-1.994774,9.192361],[7.142311,-0.287163],[-8.951677,-7.271595],[0.310317,-1.519305],[-5.624953,-2.388259],[4.924355,9.442319],[5.060535,3.742962],[-1.018385,-4.661284],[8.389547,-2.962114],[-9.193902,-9.922283],[7.763596,0.836293],[-8.499414,-8.432089],[2.750295,0.819058],[-5.304258,-1.200314],[-0.725585,0.048798],[4.823938,9.302658],[8.778123,9.993824],[-5.563797,-6.197011],[-8.003227,-4.034641],[8.523343,4.177195],[-3.467661,-0.150966],[9.649962,-5.939468],[-0.146089,7.242322],[2.042411,-1.193960],[-8.713137,-1.770450],[-2.502820,1.973501],[5.576297,1.950152],[-2.196989,3.951549],[-3.028366,0.542315],[-2.608600,5.717641],[4.778573,-4.161308],[4.995466,0.012347],[-4.259569,-3.866260],[-0.154124,6.392417],[-7.374429,7.008919],[-3.012309,0.366485],[-6.975309,-9.707904],[-4.810214,9.929875],[-7.051129,1.186838],[9.445911,-3.554455],[-6.813788,-0.436966],[-4.506836,-6.368366],[-6.674634,4.548023],[5.964575,6.626643],[9.951391,-8.186974],[6.299754,0.780160],[-8.410773,9.413655],[2.696706,3.170039],[2.127945,-4.734158],[-8.293355,-1.024144],[-5.852909,9.785822],[-8.685313,7.438045],[-4.999318,1.916062],[-3.186617,-3.450235],[2.107844,-7.497206],[8.031350,1.005098],[7.073048,-7.778545],[-8.111625,-1.986363],[-5.601022,-1.400851],[3.147164,-5.617325],[-6.885277,7.315350],[-6.219402,0.357072],[-0.002284,-4.117538],[8.471813,-7.107500],[5.100645,-9.583703],[3.529713,3.572939],[-2.157151,-0.542026],[5.799129,-2.676490],[-2.032110,-2.476596],[0.080155,5.191381],[8.839483,3.780008],[1.583179,5.925424],[-5.468026,-4.438497],[9.630768,4.090273],[-7.674086,4.294188],[-7.967209,9.555804],[5.597739,0.544397],[0.054801,-7.916667],[-7.034870,2.451268],[6.642266,-4.209284],[5.878145,5.677316],[-4.723334,-5.762597],[-7.749499,5.850266],[5.686620,-3.468930],[-3.024422,5.069328],[-0.460047,7.241534],[7.691646,-9.244604],[5.158753,-7.536251],[6.614118,1.866585],[-9.595711,-9.497708],[1.333817,8.303004],[-8.276069,-4.632405],[6.543694,-7.593391],[1.844750,-9.847469],[1.408814,-6.432232],[-1.787042,6.435578],[-2.517061,7.566703],[-6.670841,-5.699699],[3.756370,9.140803],[2.289861,2.535142],[9.180420,-0.777751],[5.734020,-7.350964],[0.489269,2.300827],[4.438340,2.567641],[-6.601345,0.403163],[3.883881,-2.261639],[4.939259,-7.410723],[7.248328,-2.690098],[-7.535770,-8.274888],[7.412908,-7.874866],[8.254524,-0.344222],[-5.118462,-6.473058],[9.483995,3.718743],[4.718405,0.237873],[3.197495,0.308049],[5.490008,-9.448396],[-8.906821,4.223489],[6.065014,-7.673673],[-4.742745,3.097830],[7.554269,7.386180],[8.243260,4.461050],[-2.892782,-1.827351],[-6.699360,2.267625],[6.962805,7.520352],[-1.336842,7.770244],[-3.499110,-1.773180],[3.324255,1.064527],[2.423415,1.664653],[-1.841821,-2.901791],[7.581662,-4.654448],[-0.489702,-4.663015],[3.887801,-2.861737],[-5.029734,1.296319],[3.758518,8.122365],[-7.552917,9.698187],[3.523552,-9.850086],[1.823400,8.292735],[8.944315,6.278324],[9.535383,1.989206],[2.002026,-1.610654],[-2.677539,5.723012],[2.665833,-2.155078],[8.126576,0.652653],[-3.718902,-7.240028],[-7.601778,-7.462444],[-7.038320,-1.950108],[4.423291,-7.217668],[0.383403,5.189100],[9.201237,1.126630],[0.360655,-0.111425],[-3.512337,-1.581887],[3.700999,-7.224710],[-8.971350,-1.664975],[-7.903690,-5.937848],[-2.902818,8.169832],[3.682894,6.134661],[5.376167,5.691766],[-5.023225,8.058611],[5.533508,8.522720],[9.260956,5.683938],[9.411980,-1.119604],[-9.320476,9.578907],[9.457064,-3.744250],[6.701367,0.990323],[-9.835502,-5.043354],[-2.937225,0.779258],[0.299789,5.352710],[8.093102,-0.649436],[-8.170446,-2.297741],[5.881622,3.843527],[-4.008359,5.634944],[-1.805327,-4.535689],[2.211967,6.484528],[9.770966,1.278276],[-0.500876,5.758081],[9.798024,-3.744019],[-7.955049,-3.647701],[-6.921166,-9.552944],[4.315555,1.299424],[2.654932,7.468539],[-6.199016,-2.154829],[0.767168,-3.253852],[-0.544473,8.140533],[0.996370,4.911655],[5.231814,7.245935],[-0.153883,-5.354374],[9.239169,5.420020],[-8.801839,6.706919],[5.599426,-2.472025],[7.082229,-6.006505],[-0.236387,-5.788894],[3.523836,8.675831],[4.231963,0.414082],[-3.556301,-5.166120],[2.418060,-2.822133],[-8.879331,-9.541412],[-5.100825,-7.043793],[2.628446,9.007508],[2.577927,9.325599],[-0.740402,1.397822],[0.275101,0.045220],[-8.613367,7.060903],[6.350335,3.687624],[7.513874,4.281461],[-6.055492,1.874762],[9.883301,5.162107],[-5.848948,2.582660],[0.802913,6.152318],[1.702068,6.503066],[-0.164701,9.965790],[-1.661724,2.468986],[-9.578692,4.193750],[-3.327451,-9.847512],[-6.825675,-8.382717],[-2.279429,2.817001],[-3.208352,-8.147606],[3.196828,-3.205329],[-5.312330,5.792719],[-1.154565,-3.198686],[2.298647,-3.314910],[5.346289,2.073616],[-9.945995,-0.957900],[-9.993334,5.899985],[-6.630838,-1.591073],[0.971818,6.827711],[8.420146,-6.446378],[5.436543,-4.628171],[2.476890,1.407674],[-6.940125,-7.903034],[-9.043433,7.098272],[-3.044599,-2.404057],[1.881677,-4.876546],[3.087525,-6.407644],[-5.500761,-1.227637],[-7.593795,-9.275316],[1.428142,-4.106398],[8.795031,6.662573],[8.201470,-9.594913],[8.035464,0.964529],[1.654675,9.132337],[9.364063,6.444813],[-6.720930,-4.907633],[4.868179,-1.764070],[-8.101302,-1.184468],[3.103618,1.037554],[-1.302328,-6.018942],[-7.366727,-7.932945],[2.986552,-6.125678],[-3.508813,-8.329640],[-4.890165,2.499254],[-6.927531,-8.755236],[-6.708235,-0.113944],[-2.521519,-8.005486],[7.029935,-0.516063],[-1.885976,8.231098],[-4.896540,1.412501],[-2.644066,-0.451067],[-2.411915,-4.858754],[9.965728,4.360201],[2.594179,-4.774505],[1.620802,-5.951428],[1.804618,4.940683],[-4.319018,-2.432989],[-6.250152,1.634467],[0.239611,5.348448],[5.446177,-7.341079],[2.225311,-5.903569],[8.250736,-8.667726],[9.765418,1.503057],[-4.135525,2.061885],[-2.377127,0.852598],[5.004123,5.470037],[-3.206179,-5.100951],[-3.821678,3.438220],[-6.284828,-7.772159],[-4.921499,-6.467766],[3.373400,-1.076608],[-7.653019,-8.196378],[9.892335,-6.753321],[-7.915757,-7.885941],[-3.511604,-3.404647],[8.188150,-8.949909],[8.489949,-2.806173],[-5.052935,-5.423822],[-2.522313,8.019896],[-6.821997,4.208916],[2.962310,-1.306436],[9.807889,1.443373],[5.252665,-1.470104],[4.897180,-1.372377],[2.388083,-8.140553],[3.138702,-7.704498],[2.939938,3.628785],[6.021417,-3.716474],[-0.334169,8.284532],[7.668545,9.097690],[-0.515640,8.294622],[7.135189,2.546706],[-1.478748,-5.481082],[-9.736182,-9.070476],[-8.273331,8.414992],[-9.811661,-3.259073],[-4.707831,6.880505],[-2.723494,-2.880267],[-2.723523,-8.823841],[8.350800,6.746315],[1.804988,7.452612],[-7.615488,-9.315000],[3.804276,-4.723581],[0.320987,-5.792228],[-6.683430,1.097569],[0.998399,-1.931008],[9.949127,2.323590],[-9.186005,8.243052],[-9.501070,5.249560],[-2.839501,9.579364],[2.713075,8.761874],[-1.967692,-5.969250],[5.522734,-5.824406],[5.951765,3.785249],[6.770575,2.506607],[6.948232,-6.514396],[5.510490,-0.984716],[9.712557,-8.725814],[0.951085,6.643523],[7.705308,0.518619],[1.444650,9.580847],[-7.006245,1.627427],[1.007895,8.550921],[3.600389,-4.142494],[5.878210,-0.842412],[-6.107117,7.252325],[8.395429,-5.836571],[-0.880314,1.534495],[0.183583,-8.861157],[7.796505,5.100207],[-5.751476,5.343294],[-6.904971,-2.023420],[-0.668010,-0.345913],[3.098779,2.209047],[-7.238654,-2.998231],[6.481510,-6.704508],[-4.458712,-0.609045],[7.211252,7.100030],[-6.736369,0.172715],[-5.121295,-3.016749],[0.705308,-2.442960],[-8.303937,2.695726],[8.026240,9.630273],[7.612755,2.021435],[-1.208296,-8.947123],[9.701214,3.753259],[-7.836212,2.095677],[-8.382480,-3.402642],[-9.764677,2.052180],[-2.131938,-5.103554],[-0.025412,-9.363265],[5.329864,7.340684],[9.817025,3.043302],[2.139471,-7.177727],[-1.108974,0.772619],[8.408915,-5.477216],[-6.420105,-8.525656],[-0.724948,-1.462415],[-5.959991,-8.324762],[-9.581894,7.483371],[7.149244,-4.132925],[4.726533,8.341131],[-3.484967,-0.252919],[-2.843075,-6.585782],[-4.668722,8.893496],[8.337293,2.313245],[-1.473437,8.560080],[-7.384015,-0.287847],[-1.070426,-5.211683],[5.120888,7.365270],[-0.517782,2.973552],[-0.237262,1.559970],[-3.098166,6.327823],[-2.705317,2.761090],[-5.017836,3.165088],[3.299212,4.241930],[2.111073,6.688792],[3.535745,-1.638152],[-4.478443,-9.451901],[8.009148,-2.631708],[-9.962245,5.323717],[-0.171496,6.380119],[-4.920797,6.955438],[-0.891304,4.750431],[0.111178,-5.979823],[8.525271,-0.595954],[-8.487206,-3.418140],[8.621222,8.207972],[-9.105497,-0.850908],[8.313752,6.685859],[2.728867,9.588309],[3.858701,8.455277],[5.408873,8.462790],[-0.475086,-9.907000],[-2.666697,6.109629],[9.665004,0.760461],[3.625042,4.587540],[6.442019,-7.501977],[8.164239,-1.696690],[-3.204882,0.664236],[8.917413,-7.412157],[9.703282,-9.920110],[8.552400,5.275503],[-2.311479,-3.398877],[-5.868797,-8.185854],[7.788256,-3.037549],[-5.328682,6.144160],[-0.640781,-4.643424],[-3.520360,-4.698553],[-7.138582,9.116941],[-0.816035,-6.416379],[-4.213517,-7.891051],[-8.377284,-3.394814],[-3.813809,4.529504],[-3.961820,5.676414],[1.536565,-4.879249],[2.915011,8.982839],[-8.075793,8.786108],[9.696265,1.285442],[8.698898,5.255856],[7.530380,0.976859],[-2.149951,-3.616280],[5.890822,-7.673337],[-5.795601,-6.048371],[4.721086,0.700421],[9.864275,-0.604178],[-2.428430,-9.697604],[7.041939,-3.286773],[1.525917,-1.414372],[-6.604585,-9.708322],[4.746805,-4.592332],[-4.257510,1.356698],[3.144304,5.375870],[9.519759,2.719947],[0.059988,0.482757],[4.925023,8.785717],[9.368209,5.381464],[3.157675,-1.223148],[-8.268633,-8.181279],[0.065162,-2.346468],[-8.836867,9.139204],[6.049508,7.512808],[-7.029605,0.768652],[-0.537729,2.899826],[8.334188,3.440531],[-0.359974,7.475587],[7.412691,1.398333],[1.577640,3.503564],[5.139497,4.049075],[9.094531,-7.498111],[-5.569755,-9.215518],[-3.322448,-1.287556],[-6.075734,-1.836620],[4.301865,9.838227],[9.654515,-5.842625],[-5.552952,-0.354547],[-2.107949,-7.349973],[5.391054,-8.120028],[-3.713135,-3.840980],[-3.550818,-9.506987],[2.258316,1.196712],[-3.827381,7.357518],[-4.064633,-7.147589],[9.508583,-5.336934]], dtype = "float64")#candidate|6803|(1080, 2)|const|float64
const_6804 = relay.const([False,True,True,False,False,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,True,False,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,False,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,False,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,False,False,False,True,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True], dtype = "bool")#candidate|6804|(2730,)|const|bool
const_6805 = relay.const([-1.912901,-7.683504,3.032609,-9.496378,-6.023961,9.161648,-0.405526,4.577132,-1.428767,6.682833,-0.954129,4.855514,-4.015200,1.838537,-4.313820,-6.377102,8.332495,-0.076043,8.442225,8.387511,6.853270,-4.034065,-2.543781,0.539444,2.035833,-3.005340,-9.535009,4.660887,7.009943,-8.672534,0.328302,-9.573366,-4.780713,-4.093473,3.684163,1.375032,-6.346285,-3.324274,3.430197,6.128325,1.373836,-6.562295,7.572141,-6.742810,3.292413,-1.832725,7.135118,2.206964,9.498763,5.362516,-4.112676,-3.985924,-2.022112,7.989036,-9.302075,3.815868,-0.880664,9.844631,9.308288,-8.850169], dtype = "float64")#candidate|6805|(60,)|const|float64
call_6801 = relay.TupleGetItem(func_2853_call(relay.reshape(var_6802.astype('float32'), [16, 5, 11]), relay.reshape(var_6802.astype('float32'), [16, 5, 11]), relay.reshape(const_6803.astype('float64'), [2160,]), relay.reshape(const_6804.astype('bool'), [2730,]), relay.reshape(const_6805.astype('float64'), [60,]), ), 0)
call_6806 = relay.TupleGetItem(func_2859_call(relay.reshape(var_6802.astype('float32'), [16, 5, 11]), relay.reshape(var_6802.astype('float32'), [16, 5, 11]), relay.reshape(const_6803.astype('float64'), [2160,]), relay.reshape(const_6804.astype('bool'), [2730,]), relay.reshape(const_6805.astype('float64'), [60,]), ), 0)
func_5722_call = mod.get_global_var('func_5722')
func_5724_call = mutated_mod.get_global_var('func_5724')
call_6819 = func_5722_call()
call_6820 = func_5722_call()
output = relay.Tuple([call_6795,call_6801,var_6802,const_6803,const_6804,const_6805,call_6819,])
output2 = relay.Tuple([call_6796,call_6806,var_6802,const_6803,const_6804,const_6805,call_6820,])
func_6824 = relay.Function([var_6802,], output)
mod['func_6824'] = func_6824
mod = relay.transform.InferType()(mod)
var_6825 = relay.var("var_6825", dtype = "float32", shape = (880,))#candidate|6825|(880,)|var|float32
output = func_6824(var_6825)
func_6826 = relay.Function([var_6825], output)
mutated_mod['func_6826'] = func_6826
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5416_call = mod.get_global_var('func_5416')
func_5417_call = mutated_mod.get_global_var('func_5417')
call_6837 = func_5416_call()
call_6838 = func_5416_call()
output = call_6837
output2 = call_6838
func_6854 = relay.Function([], output)
mod['func_6854'] = func_6854
mod = relay.transform.InferType()(mod)
mutated_mod['func_6854'] = func_6854
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6854_call = mutated_mod.get_global_var('func_6854')
call_6855 = func_6854_call()
output = call_6855
func_6856 = relay.Function([], output)
mutated_mod['func_6856'] = func_6856
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6670_call = mod.get_global_var('func_6670')
func_6672_call = mutated_mod.get_global_var('func_6672')
call_6906 = relay.TupleGetItem(func_6670_call(), 0)
call_6907 = relay.TupleGetItem(func_6672_call(), 0)
output = call_6906
output2 = call_6907
func_6912 = relay.Function([], output)
mod['func_6912'] = func_6912
mod = relay.transform.InferType()(mod)
mutated_mod['func_6912'] = func_6912
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6912_call = mutated_mod.get_global_var('func_6912')
call_6913 = func_6912_call()
output = call_6913
func_6914 = relay.Function([], output)
mutated_mod['func_6914'] = func_6914
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4790_call = mod.get_global_var('func_4790')
func_4792_call = mutated_mod.get_global_var('func_4792')
call_6972 = relay.TupleGetItem(func_4790_call(), 0)
call_6973 = relay.TupleGetItem(func_4792_call(), 0)
output = call_6972
output2 = call_6973
func_7003 = relay.Function([], output)
mod['func_7003'] = func_7003
mod = relay.transform.InferType()(mod)
output = func_7003()
func_7004 = relay.Function([], output)
mutated_mod['func_7004'] = func_7004
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6387_call = mod.get_global_var('func_6387')
func_6389_call = mutated_mod.get_global_var('func_6389')
call_7028 = relay.TupleGetItem(func_6387_call(), 0)
call_7029 = relay.TupleGetItem(func_6389_call(), 0)
output = relay.Tuple([call_7028,])
output2 = relay.Tuple([call_7029,])
func_7046 = relay.Function([], output)
mod['func_7046'] = func_7046
mod = relay.transform.InferType()(mod)
output = func_7046()
func_7047 = relay.Function([], output)
mutated_mod['func_7047'] = func_7047
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5502_call = mod.get_global_var('func_5502')
func_5503_call = mutated_mod.get_global_var('func_5503')
call_7097 = relay.TupleGetItem(func_5502_call(), 1)
call_7098 = relay.TupleGetItem(func_5503_call(), 1)
output = relay.Tuple([call_7097,])
output2 = relay.Tuple([call_7098,])
func_7104 = relay.Function([], output)
mod['func_7104'] = func_7104
mod = relay.transform.InferType()(mod)
output = func_7104()
func_7105 = relay.Function([], output)
mutated_mod['func_7105'] = func_7105
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5522_call = mod.get_global_var('func_5522')
func_5523_call = mutated_mod.get_global_var('func_5523')
call_7106 = func_5522_call()
call_7107 = func_5522_call()
func_5073_call = mod.get_global_var('func_5073')
func_5077_call = mutated_mod.get_global_var('func_5077')
var_7111 = relay.var("var_7111", dtype = "uint64", shape = (504,))#candidate|7111|(504,)|var|uint64
call_7110 = func_5073_call(relay.reshape(var_7111.astype('uint64'), [14, 4, 9]), relay.reshape(var_7111.astype('uint64'), [14, 4, 9]), )
call_7112 = func_5073_call(relay.reshape(var_7111.astype('uint64'), [14, 4, 9]), relay.reshape(var_7111.astype('uint64'), [14, 4, 9]), )
func_7104_call = mod.get_global_var('func_7104')
func_7105_call = mutated_mod.get_global_var('func_7105')
call_7122 = relay.TupleGetItem(func_7104_call(), 0)
call_7123 = relay.TupleGetItem(func_7105_call(), 0)
output = relay.Tuple([call_7106,call_7110,var_7111,call_7122,])
output2 = relay.Tuple([call_7107,call_7112,var_7111,call_7123,])
func_7142 = relay.Function([var_7111,], output)
mod['func_7142'] = func_7142
mod = relay.transform.InferType()(mod)
var_7143 = relay.var("var_7143", dtype = "uint64", shape = (504,))#candidate|7143|(504,)|var|uint64
output = func_7142(var_7143)
func_7144 = relay.Function([var_7143], output)
mutated_mod['func_7144'] = func_7144
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5564_call = mod.get_global_var('func_5564')
func_5566_call = mutated_mod.get_global_var('func_5566')
call_7211 = relay.TupleGetItem(func_5564_call(), 0)
call_7212 = relay.TupleGetItem(func_5566_call(), 0)
output = relay.Tuple([call_7211,])
output2 = relay.Tuple([call_7212,])
func_7231 = relay.Function([], output)
mod['func_7231'] = func_7231
mod = relay.transform.InferType()(mod)
output = func_7231()
func_7232 = relay.Function([], output)
mutated_mod['func_7232'] = func_7232
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5722_call = mod.get_global_var('func_5722')
func_5724_call = mutated_mod.get_global_var('func_5724')
call_7297 = func_5722_call()
call_7298 = func_5722_call()
uop_7308 = relay.rsqrt(call_7297.astype('float32')) # shape=(16, 11, 15)
uop_7310 = relay.rsqrt(call_7298.astype('float32')) # shape=(16, 11, 15)
func_5416_call = mod.get_global_var('func_5416')
func_5417_call = mutated_mod.get_global_var('func_5417')
call_7314 = func_5416_call()
call_7315 = func_5416_call()
output = relay.Tuple([uop_7308,call_7314,])
output2 = relay.Tuple([uop_7310,call_7315,])
func_7325 = relay.Function([], output)
mod['func_7325'] = func_7325
mod = relay.transform.InferType()(mod)
output = func_7325()
func_7326 = relay.Function([], output)
mutated_mod['func_7326'] = func_7326
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5416_call = mod.get_global_var('func_5416')
func_5417_call = mutated_mod.get_global_var('func_5417')
call_7348 = func_5416_call()
call_7349 = func_5416_call()
output = relay.Tuple([call_7348,])
output2 = relay.Tuple([call_7349,])
func_7372 = relay.Function([], output)
mod['func_7372'] = func_7372
mod = relay.transform.InferType()(mod)
output = func_7372()
func_7373 = relay.Function([], output)
mutated_mod['func_7373'] = func_7373
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7046_call = mod.get_global_var('func_7046')
func_7047_call = mutated_mod.get_global_var('func_7047')
call_7392 = relay.TupleGetItem(func_7046_call(), 0)
call_7393 = relay.TupleGetItem(func_7047_call(), 0)
output = call_7392
output2 = call_7393
func_7406 = relay.Function([], output)
mod['func_7406'] = func_7406
mod = relay.transform.InferType()(mod)
output = func_7406()
func_7407 = relay.Function([], output)
mutated_mod['func_7407'] = func_7407
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5502_call = mod.get_global_var('func_5502')
func_5503_call = mutated_mod.get_global_var('func_5503')
call_7433 = relay.TupleGetItem(func_5502_call(), 1)
call_7434 = relay.TupleGetItem(func_5503_call(), 1)
func_1095_call = mod.get_global_var('func_1095')
func_1100_call = mutated_mod.get_global_var('func_1100')
const_7442 = relay.const([-5.801074,3.628656,4.987784,-3.295922,8.719945,-9.259706,-3.239842,-4.904515,7.850790,4.700440,7.623487,-4.705430,5.688128,-9.563524,5.875767,-1.840140,-5.430208,2.883909,1.214643,-8.066852,0.987252,6.274854,6.079636,-1.914917,8.101123,0.497209,-3.648562,7.915725,-8.747964,-5.377275,5.299507,7.119358,2.814454,9.255614,-6.742108,6.138961,-0.792935,7.037736,-0.547974,-0.360942,-5.397483,-9.208268,-6.743370,-6.385539,7.170254,-5.277773,9.915313,-9.697050,-6.969607,5.362379,5.443180,-4.186246,2.896304,3.077581,5.435621,4.558355,2.557177,3.707370,-9.874330,-5.301685,-6.416260,-6.991474,1.999907,-3.117489,-3.831448,-8.319855,6.059127,5.482183,1.377207,-0.299309,4.849773,-4.093606,-7.919385,-2.812437,1.635524,-5.953130,9.320323,2.767807,-5.543120,-5.403806,2.096925,-4.059584,8.876607,-2.640569,6.368844,-6.338468,-9.619086,5.049687,-1.328087,6.557545,8.273409,4.498593,-2.284189,6.624989,6.436049,1.456824,-3.382430,6.550175,-5.087852,-9.954059,-9.230675,-3.126838,5.417351,4.299343,7.115457,8.575764,2.055765,1.300983,0.087856,-1.162444,-8.674848,-5.829932,4.568621,-8.236213,4.503519,6.683469,0.612900,-3.369414,-3.535333,-6.343531,1.100776,-5.514116,0.081683,-3.944295,-5.743187,4.435606,0.187404,3.173152,4.870158,-0.172267,0.040216,-3.294214,8.820915,0.817637,4.936375,9.251266,-2.783058,7.857115,8.764115,-5.069488,-2.645061,-7.152252,7.831192,-9.113301,5.342736,3.531534,7.623740,-6.604287,7.094592,-0.501745,8.952601,6.910632,7.250287,9.132362,-3.762656,-7.417083,0.444000,-2.098140,-3.005800,0.745574,5.070923,-9.600849,0.888279,8.571501,1.086507,9.340501,8.101724,-8.154520,5.696767,4.493648,1.062322,-5.447077,-0.965746,-2.880772,5.083133,4.519657,-0.972815,1.115071,-2.450029,-6.133212,-0.607243,-2.692477,-1.186241,-3.425074,1.441862,-5.407866,0.627593,5.353154,6.502313,4.973669,-2.891424,-3.847543,-0.950001,-4.226767,-5.511587,-5.960432,-7.466585,9.885222,0.838721,-2.188129,5.734231,-5.277634,8.073865,9.484898,4.530764,7.371002,6.876376,-9.688165,-9.479345,-9.746221,-5.974970,1.778607,4.513759,2.082225,1.885109,7.746947,-8.395220,3.091462,-7.663676,3.041401,5.176075,4.432553,-7.133311,4.908826,-1.290963,5.440990,-1.077873,7.596163,7.475420,0.746848,-9.843939,-5.347927,-9.069774,-1.026628,-5.232903,-7.835103,-8.168851,-7.075079,9.413993,7.118866,4.676360,-7.993220,-7.540516,2.174602,3.583072,-3.221282,-6.704982,-1.957056,-7.866974,3.186384,-4.240422,8.395462], dtype = "float32")#candidate|7442|(252,)|const|float32
const_7443 = relay.const([False,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,False,False,True,True,True,True,False,True,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,True,False,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,False,False,True,False,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,True,False,True,False], dtype = "bool")#candidate|7443|(2730,)|const|bool
call_7441 = relay.TupleGetItem(func_1095_call(relay.reshape(const_7442.astype('float32'), [7, 6, 6]), relay.reshape(const_7443.astype('bool'), [2730,]), relay.reshape(call_7433.astype('float64'), [60,]), ), 3)
call_7444 = relay.TupleGetItem(func_1100_call(relay.reshape(const_7442.astype('float32'), [7, 6, 6]), relay.reshape(const_7443.astype('bool'), [2730,]), relay.reshape(call_7433.astype('float64'), [60,]), ), 3)
func_5137_call = mod.get_global_var('func_5137')
func_5140_call = mutated_mod.get_global_var('func_5140')
const_7458 = relay.const([[-0.572583,4.355691,-1.447136,9.122263,7.312135,5.680438,-4.106695,-3.828926,7.242826,0.114873,-4.590833,-8.386490],[-6.565079,-2.546880,9.340334,9.583542,9.600506,-3.698106,-9.694575,-5.889163,-2.047386,-0.180383,5.901341,-0.035533],[-7.119566,8.059909,-9.489418,-5.451271,-8.969812,1.117699,-9.998986,5.305941,9.320966,3.155806,6.862869,4.211166],[5.144514,8.508274,-1.326282,9.243963,6.320395,7.332241,8.671823,-8.443247,-4.728377,1.706542,-3.527845,-6.856562],[-4.746475,1.439236,8.475535,8.590539,2.279551,2.557374,-4.500777,-1.312363,-0.123314,3.746530,0.431977,7.098573],[-4.348829,-7.683890,9.462408,-6.104152,-5.549551,8.896642,4.448995,2.228688,3.828251,-4.001479,6.252277,-3.334274],[6.219892,7.176387,2.604903,-5.073364,0.964345,7.220536,-9.154101,-6.411489,4.615418,-3.700162,7.940124,9.260016],[2.843414,-4.830370,0.826822,-5.805452,2.254806,6.726066,-1.246827,-7.154979,6.610501,-4.570883,4.182807,-3.197221],[-5.591110,4.521026,-8.133491,1.463408,9.238331,0.257763,-8.251542,7.105288,7.541691,-6.520260,-1.011709,-6.419611],[-8.963245,4.354891,3.253073,2.066010,7.944871,6.566341,2.030856,8.210722,9.669357,2.403968,-6.992949,5.384552],[-9.547913,5.710054,-2.351016,-7.333410,-8.854184,-6.554202,0.395753,2.795049,4.237456,0.741966,5.192164,7.768584],[7.108220,-0.151223,3.878626,3.828570,-9.102592,-2.501314,-8.717828,4.325171,0.255540,5.488544,0.828091,4.917160],[3.988712,-7.466268,1.680615,4.833112,-3.216058,-9.534475,4.572994,8.951284,-5.158488,-9.350473,-2.917582,1.915627],[-2.305488,3.236685,7.476922,-9.289332,4.651332,-7.739854,-0.860740,8.916078,3.581416,-7.866146,7.126443,-3.152124],[3.162486,0.896105,0.701009,8.380546,6.833427,7.870056,2.153905,1.276045,-6.663974,8.438979,-8.953011,-6.238039],[-3.986809,-5.021903,-9.522513,9.786455,-7.297834,-0.857717,7.814127,7.503971,-5.249293,-7.241180,-2.182459,-8.059682],[9.853638,7.902923,-9.093160,8.042052,-0.223624,-9.089147,1.278239,-0.191019,-6.793487,1.218449,0.414411,-7.095072],[4.490503,4.341035,0.174841,8.838001,-5.155550,-9.517983,-8.436008,0.157893,0.927203,3.374803,-7.623279,-5.880429],[-4.109030,-2.064202,-9.226505,7.640311,4.671359,3.985254,-2.542579,5.667884,4.187494,5.492210,-0.346459,-5.275060],[6.657543,-8.758186,-0.477444,-7.741436,-0.824401,-7.045516,-3.935379,-3.157817,-5.403648,-4.325470,-4.400508,6.193395],[1.189039,1.768053,-8.732724,0.614081,-2.246444,1.469565,7.620975,0.616853,-7.425139,-0.490212,-8.262682,6.243479],[6.587740,1.374268,4.459049,1.975575,-9.543086,-4.811376,1.983396,-2.324501,5.157786,-4.576001,3.976108,-6.721039],[9.721758,-3.347373,-6.239678,-9.005695,3.241129,5.575296,1.480395,2.108256,-7.960636,-9.762499,-2.683951,7.915037],[-7.485860,-6.269384,0.467383,4.685151,6.650813,-5.646054,0.063792,3.614430,3.553652,-4.956167,-7.881126,-5.158992],[8.097910,-3.840805,6.185070,-9.923622,3.186009,8.793885,3.627412,0.749010,3.154356,-4.360526,-4.112511,6.264141],[2.286792,-2.129299,-5.042992,-3.685965,5.863159,4.556950,-9.113795,-1.331438,-3.247416,-1.411542,1.159454,-8.124373],[-1.560948,5.278562,5.393089,-4.100950,-8.505138,-3.930919,0.687755,4.314174,8.418210,1.139190,-6.702589,9.066544],[8.927282,-9.189653,4.423529,2.787148,-8.525115,-0.997945,-7.142457,-9.758206,-2.140680,1.864779,1.965282,-1.740523],[1.220178,-8.724310,-8.090418,-4.707107,0.995241,-9.215016,9.085873,-2.791468,-0.069992,7.072012,3.644020,-7.700008],[-1.061219,8.175417,-5.509430,-4.855295,3.638063,3.649669,-9.458836,-7.113871,-5.600851,-3.910203,-1.138811,7.710253],[-4.966679,4.695903,-0.722889,7.212216,3.791627,-8.107902,-6.351937,0.679684,8.460081,4.893068,-8.605019,-3.665649],[-8.643337,0.327619,8.353697,-2.715163,9.565931,-3.039766,0.020014,2.390574,-9.492480,-5.939069,-6.634728,7.827716],[-8.958682,-4.267676,-0.849203,6.277402,8.362661,2.330308,-9.524809,-8.441770,-9.942613,5.609439,-4.301346,-3.793851],[0.019113,-2.080614,5.767073,4.225109,-5.867618,-2.105604,-7.817752,-6.496219,-7.320901,6.678986,5.893592,1.385339],[-1.515516,2.693418,1.356178,2.436940,-0.917040,-5.443290,8.575153,2.829592,3.996397,-1.859028,0.889969,-8.858469],[0.732006,-0.332211,0.370013,-4.267200,8.948881,6.908425,6.071447,9.272267,-8.515591,1.716622,7.402688,7.958144],[6.542989,2.329379,-0.338996,-2.421018,9.291917,-4.183629,-6.726243,-9.162549,-7.769489,-6.087357,-2.526659,4.148537],[-1.876784,9.262857,5.849307,-7.458260,-8.663297,-3.872788,5.476528,-8.809230,5.179196,-6.949469,3.670928,2.251260],[-4.977910,-2.543726,7.742327,0.010656,-4.273570,-3.797845,5.596818,-5.658378,-5.014711,7.672480,-9.485854,-9.689207],[-6.522511,1.822508,2.680875,-9.338207,1.302051,-9.049474,-0.405225,-8.386188,-7.073868,2.491496,0.172091,-6.014756],[-0.867130,-9.832407,3.201778,-2.274872,6.720984,-6.059637,8.507136,-1.782063,1.760011,9.494879,-6.509480,-4.798150],[-6.358893,-6.284374,-5.488163,7.506499,-8.152920,3.134053,-2.715855,-6.957521,2.749118,-1.075375,0.446381,2.985234],[-2.698996,-3.996670,-7.160221,6.900033,-3.882558,9.680632,-7.121283,6.010913,-2.516150,4.777446,7.541682,-0.480172],[-0.895434,2.576001,9.339026,-9.563695,6.895903,-5.379844,9.815014,7.621273,7.340135,-1.304341,7.337988,5.911360],[-8.765949,3.094448,-2.351572,8.166300,-6.160046,-2.049359,3.646492,2.107367,6.437226,8.266979,-2.257852,9.978865],[3.779312,4.322765,6.121011,-1.276541,6.437903,4.861709,2.210194,-7.359083,3.694599,2.853567,9.509418,-9.020026],[-9.768062,-4.573143,-0.064501,-1.237426,5.684607,-1.808167,-2.411760,7.753380,-3.970785,4.788280,0.401390,-9.591772],[-5.451665,2.924503,-0.753634,5.779510,4.227132,0.773334,8.399634,5.801538,-9.827612,6.853089,-8.569759,-0.806314],[-9.828952,-7.299102,-2.420453,-9.664798,-5.239426,-2.062867,9.887024,8.930609,4.689137,-2.979939,6.417867,-9.097473],[-2.967758,-1.335868,-5.491146,3.143891,2.952856,-6.232370,-6.701856,-6.502250,-7.742319,-5.058852,-2.060841,2.352308],[-6.906651,-0.001527,0.072955,4.707248,6.530786,6.097365,5.909493,-6.054266,-1.227038,-1.016949,1.267712,-3.110758],[2.528247,-2.783198,-2.359843,-4.243175,9.577988,-6.232848,8.646281,-8.700417,-3.577229,-8.325698,6.121752,-6.335848],[5.229100,-0.864373,2.051647,-7.476989,0.587214,5.441279,-1.497399,6.196986,-1.046887,2.406461,7.637092,-0.770543],[3.695648,4.537377,6.307297,-7.257608,-2.069043,-0.163265,2.469761,0.320506,8.024664,0.312355,-9.662042,1.656917],[-2.585295,-2.097245,0.623150,6.147148,6.317256,5.800195,-3.707304,0.267686,-2.867291,8.602998,-5.869314,4.015280],[1.096862,-9.474623,6.112402,-6.049979,-8.626126,5.350843,-2.601539,-3.320524,-6.398218,-5.295381,0.174075,2.391162]], dtype = "float64")#candidate|7458|(56, 12)|const|float64
call_7457 = relay.TupleGetItem(func_5137_call(relay.reshape(const_7458.astype('float64'), [672,])), 1)
call_7459 = relay.TupleGetItem(func_5140_call(relay.reshape(const_7458.astype('float64'), [672,])), 1)
func_4743_call = mod.get_global_var('func_4743')
func_4745_call = mutated_mod.get_global_var('func_4745')
call_7466 = func_4743_call()
call_7467 = func_4743_call()
func_1170_call = mod.get_global_var('func_1170')
func_1174_call = mutated_mod.get_global_var('func_1174')
const_7482 = relay.const([-8,5,-4,6,-5,10,-6,-10,2,9,6,-1,9,1,4,-1,-9,-8,-5,7,-5,-2,9,9,-3,-7,-4,-4,-4,1,9,10,-10,-10,-7,7,-4,-1,4,4,10,6,10,5,7,3,9,3,-6,-6,-10,2,-3,6,-3,-5,-4,7,3,9,7,7,9,-7,4,5,8,7,2,-9,8,8,-6,-7,6,-10,-9,-2,6,-3,-3,-4,6,2,-9,-3,-4,-8,-7,-1,10,-9,-8,-7,-8,-5,-9,-2,4,-2,-3,-9,-9,9,-9,-10,-2,8,-10,4,-7,9,-2,10,-4,-9,9,-8,-3,6,-9,-3,-7,-1,-7,-5,8,10,-6,5,5,9,-10,-4,-3,-8,-7,3,3,-1,9,-7,-9,-6,-7,4,-5,-8,9,-1,-2,-7,10,-5,4,-3,1,1,-7,4,9,8,1,10,-7,4,-8,10,-1,-10,2,-9,5,10,8,-10,2,-1,-5,2,-2,3,7,9,-10,-4,-4,5,2,3,-9,-7,10,-3,10,7,2,-3,5,9,-1,-8,-4,6,8,8,-2,-8,4,7,9,-4,-4,-1,9,4,3,-8,-5,-4,4,2,-6,10,2,-2,1,-1,4,-6,2,-4,-4,-1,-5,-3,7,-6,-4,5,-4,-8,-4,2,10,1,-7,-6,-7,9,-2,-2,-6,3,7,-7,-4,5,-5,-6,-4,9,-3,-2,4,2,-4,8,-5,1,9,-4,-4,-3,-8,5,7,5,3,-10,-1,-6,7,6,-4,-5,-4,10,-7,-10,-3,7,1,9,1,2,10,-6,1,-10,-8,10,1,3,-2,-3,8,-4,-1,-4,2,6,-5,10,4,-2,4,-6,3,-3,2,1,-5,8,8,10,-9,6,9,-3,8,7,9,-7,5,-9,-5,9,-5,-7,1,7,-4,-6,-8,7,-4,10,-2,-8,-8,-5,9,-4,-1,9,10,1,-8,-8,8,4,2,7,-10,10,-6,-10,7,9,-7,-9,6,-1,-9,-5,-4,10,3,-9,-4,1,-2,-5,7,8,-4,-10,-6,-9,10,1,2,-2,-1,-10,-8,5,3,2,3,5,4,2,-4,7,4,10,1,1,-2,7,1,3,-9,6,-2,1,-6,-8,-3,-4,4,3,7,9,6,-1,-5,2,9,8,-1,-7,-4,-7,3,6,-9,-5,6,6,-10,-8,3,-1,-10,-4,-1,-9,-8,-4,10,-8,-2,5,-7,-7,-2,-1,4,7,-4,8,2,10,6,2,-5,-4,5,4,-4,10,5,9,5,7,7,-5,-3,-8,9,4,2,3,-1,1,8,-9,5,2,6,-1,7,9,-1,8,8,-5,3,-10,-3,-8,-4,-3,7,-1,7,3,10,-3,-2,10,-4,-2,1,1,-3,-4,-8,-6,-2,-7,10,2,-5,-8,5,-6,-3,6,-10,-7,-6,10,7,8,-4,10,-4,-2,7,-5,-10,-1,-1,6,-4,4,5,5,-1,-5,7,-7,-8,-1,10,7,-8,2,5,-9,-2,-10,-9,3,9,5,3,-10,-2,6,-8,-4,1,-4,-6,5,7,7,4,8,-7,-1,6,1,-2,-1,-10,-5,-1,-7,-3,6,-10,8,4,7,-10,4,-10,3,2,4,-7,4,9,6,6,4,7,-1,-7,-2,9,-2,-1,-2,-8,-8,7,-4,5,-10,4,-6,5,9,6,-10,9,5,-6,-4,5,-1,4,-1,-7,-10,5,9,-3,-4,4,-5,8,5,-7,10,1,-4,-9,5,-6,-5,1,2,4,5,2,3,10,-7,6,-8,-1,3,-5,-3,3,1,6,10,-9,-10,-4,2,8,10,-9,3,1,7,6,9,2,5,-3,-7,-1,5,7,-9,9,1,10,-5,1,8,-5,-1,5,4,3,2,6,9,-7,10,-10,5,6,2,3,7,7,7,-3,1,10,-10,-1,4,9,-7,7,-10,1,10,-4,-5,4,2,-1,-3,-6,-9,-4,-8,-7,2,4,-8,-6,2,7,8,7,9,2,-9,7,-5,3,3,-8,-5,-7,-1,1,-10,1,10,-7,-6,-2,-7,-6,-9,-8,10,-7,10,8,-4,3,7,-3,1,-5,1,5,6,2,2,-10,-6,7,-1,-5,4,-9,3,-10,-4,-5,-2,-4,-4,8,6,8,6,-10,-10,2,-5,7,-4,4,1,4,-10,4,3,-1,9,-5,-5,-2,9,9,4,4,2,-8,7,-8,8,-2,3,4,-3,7,-1,2,-2,6,8,7,-5,-5,-7,-3,5,10,1,10,-10,-3,-7,-2,8,6,-5,-8,-8,-7,7,1,-5,10,4,9,8,-8,-9,-5,-8,2,3,-6,-4,7,-2,5,-1,3,-6,1,6,-2,-10,9,5,-3,-5,9,-3,3,5,3,3,-3,-8,-7,-6,7,-6,-5,-2,-9,-9,-6,-5,8,-7,7,-6,-2,-7,-9,8,10,-4,4,5,-5,-4,-7,-10,-2,-7,-8,1,7,1,-2,2,4,9,6,-1,-10,-1,-5,-3,9,-6,-3,1,5,-6,10,9,7,-1,-5,1,-9,-4,5,-9,-9,3,2,-10,5,-3,5,8,1,-3,2,-2,8,5,-5,-8,-1,-4,7,9,-1,7,-6,8,-6,4,6,-1,3,-6,10,3,-6,-4,3,5,8,2,8,-1,-2,2,-10,2,9,-2,-3,2,-3,2,-10,2,8,-1,-5,-1,-5,6,-8,-3,-10,7,1,5,-4,8,4,3,3,10,-4,6,8,9,2,-2,-6,-8,-6,8,9,-7,7,7,-2,9,-2,7,9,-5,-7,-5,-5,9,5,-3,-3,-9,10,10,7,-10,-6,-8,-5,6,-9,5,4,-5,-9,-5,-1,-5,-4,-5,-6,-9,-5,7,-9,2,-4,10,-8,8,7,2,-10,1,3,5,4,-4,-1,7,-4,6,5,-5,-2,10,8,9,10,2,-7,-5,-10,-10,-9,-9,-5,10,-2,2,-8,5,-4,-6,6,8,-6,6,1,7,2,-3,-2,8,-8,9,-1,-1,-1,-9,-6,2,-1,8,-4,-4,-2,5,9,-9,2,-2,6,-1,-2,-6,9,-10,6,-2,4,7,2,1,5,-10,-2,3,-8,5,-5,10,-6,-6,-10,-5,6,-10,5,-10,3,-9,-2,1,7,4,6,9,6,-6,-4,1,-4,8,2,10,-10,8,-3,6,6,5,-3,4,10,8,-1,-3,7,4,3,-3,-5,7,-4,2,-2,-2,3,-6,7,6,10,3,-5,7,3,9,4,9,-8,10,10,-4,-9,4,4,-4,-1,2,-5,4,-10,7,-10,2,9,-5,-3,10,1,7,-7,-8,1,-6,8,6,2,1,-2,-9,2,-8,5,6,5,9,-8,2,-8,6,8,-5,-7,-4,7,10,7,4,-7,6,-8,5,4,3,-8,10,-5,8,-9,-3,-6,-6,10,-3,-4,2,-7,-6,-6,3,-2,-2,7,-10,-4,3,-5,-3,10,-3,-8,-4,4,6,-1,-6,3,9,-1,4,-10,-7,5,10,-7,-10,10,10,4,-5,-6,-5,10,6,-2,7,9,-7,-4,-2,1,-8,5,-8,3,-1,4,-7,-3,4,-5,-7,6,1,-10,3,-4,-6,-8,-6,-8,9,7,4,8,3,-10,-10,-4,-6,-3,-10,9,-5,-2,7,10,-10,1,8,2,3,-4,8,-3,4,3,-4,-2,9,-10,2,4,8,7,-7,7,-3,-2,-9,-3,-4,9,-1,6,4,8,-7,-7,-10,-1,5,6,1,7,6,4,-10,-7,-3,1,-9,3,-3,-1,7,9,-1,10,-4,3,8,-9,2,9,9,3,7,1,8,-3,3,-7,-7,-10,3,-3,3,-1,-8,-2,-8,-2,-1,-7,5,4,-3,4,-7,3,8,-2,7,-7,4,9,-6,-1,4,-6,9,8,-2,-2,-9,-10,10,-9,7,-10,-7,7,10,10,5,2,9,-3,-4,-9,-9,-1,3,4,8,-3,2,10,-7,5,-8,5,9,-10,3,6,-10,-1,-7,-5,10,1,9,6,-4,7,2,-1,9,3,-1,-4,-6,-4,-1,-9,8,-4,1,-2,-5,-9,10,-5,1,1,-7,-5,-9,5,9,-10,3,-5,-8,-3,5,-7,4,-5,1,9,2,-10,-4,-2,10,1,8,2,-2,-8,-7,-5,6,-5,8,5,-9,-3,-2,7,7,-7,-5,-2,2,-5,2,9,10,6,-10,-9,6,2,-7,9,-9,2,5,-1,1,-7,8,2,10,7,9,-8,10,-2,-9,2,9,-3,7,3,-2,10,6,7,9,7,9,-4,5,7,-9,3,-4,-6,10,8,10,1,9,-4,-1,-8,-8,1,-10,-9,-7,9,-1,-2,-4,5,8,2,6,-8,8,-1,-10,-4,-1,1,7,1,7,-1,2,5,-3,-9,-4,8,-7,-10,1,9,-7,10,-10,-4,-4,8,-10,-8,-1,-4,6,-6,-10,9,-10,-5,-1,-5,-8,8,3,-8,2,-7,-4,7,-4,-2,1,8,-2,-10,-10,3,-3,9,-10,10,4,-4,-10,-10,-4,-1,-4,6,-3,-10,-1,-10,6,4,-8,-8,4,3,-1,-2,-3,-9,1,-6,4,-9,9,-1,9,-10,10], dtype = "uint16")#candidate|7482|(1728,)|const|uint16
call_7481 = relay.TupleGetItem(func_1170_call(relay.reshape(const_7482.astype('uint16'), [16, 12, 9]), relay.reshape(const_7482.astype('uint16'), [16, 12, 9]), ), 0)
call_7483 = relay.TupleGetItem(func_1174_call(relay.reshape(const_7482.astype('uint16'), [16, 12, 9]), relay.reshape(const_7482.astype('uint16'), [16, 12, 9]), ), 0)
output = relay.Tuple([call_7433,call_7441,const_7442,const_7443,call_7457,const_7458,call_7466,call_7481,const_7482,])
output2 = relay.Tuple([call_7434,call_7444,const_7442,const_7443,call_7459,const_7458,call_7467,call_7483,const_7482,])
func_7488 = relay.Function([], output)
mod['func_7488'] = func_7488
mod = relay.transform.InferType()(mod)
output = func_7488()
func_7489 = relay.Function([], output)
mutated_mod['func_7489'] = func_7489
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4266_call = mod.get_global_var('func_4266')
func_4268_call = mutated_mod.get_global_var('func_4268')
call_7495 = relay.TupleGetItem(func_4266_call(), 0)
call_7496 = relay.TupleGetItem(func_4268_call(), 0)
func_7325_call = mod.get_global_var('func_7325')
func_7326_call = mutated_mod.get_global_var('func_7326')
call_7499 = relay.TupleGetItem(func_7325_call(), 1)
call_7500 = relay.TupleGetItem(func_7326_call(), 1)
uop_7503 = relay.exp(call_7499.astype('float32')) # shape=(16, 11, 15)
uop_7505 = relay.exp(call_7500.astype('float32')) # shape=(16, 11, 15)
func_6292_call = mod.get_global_var('func_6292')
func_6295_call = mutated_mod.get_global_var('func_6295')
const_7509 = relay.const(6.647452, dtype = "float64")#candidate|7509|()|const|float64
call_7508 = relay.TupleGetItem(func_6292_call(relay.reshape(const_7509.astype('float64'), [])), 4)
call_7510 = relay.TupleGetItem(func_6295_call(relay.reshape(const_7509.astype('float64'), [])), 4)
func_4858_call = mod.get_global_var('func_4858')
func_4860_call = mutated_mod.get_global_var('func_4860')
call_7517 = relay.TupleGetItem(func_4858_call(), 1)
call_7518 = relay.TupleGetItem(func_4860_call(), 1)
func_6387_call = mod.get_global_var('func_6387')
func_6389_call = mutated_mod.get_global_var('func_6389')
call_7522 = relay.TupleGetItem(func_6387_call(), 0)
call_7523 = relay.TupleGetItem(func_6389_call(), 0)
output = relay.Tuple([call_7495,uop_7503,call_7508,const_7509,call_7517,call_7522,])
output2 = relay.Tuple([call_7496,uop_7505,call_7510,const_7509,call_7518,call_7523,])
func_7526 = relay.Function([], output)
mod['func_7526'] = func_7526
mod = relay.transform.InferType()(mod)
mutated_mod['func_7526'] = func_7526
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7526_call = mutated_mod.get_global_var('func_7526')
call_7527 = func_7526_call()
output = call_7527
func_7528 = relay.Function([], output)
mutated_mod['func_7528'] = func_7528
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7597 = relay.var("var_7597", dtype = "uint32", shape = (4, 7, 8))#candidate|7597|(4, 7, 8)|var|uint32
const_7598 = relay.const([[[-10,1,7,-7,2,6,10,-2],[-10,-9,-7,2,2,-4,8,4],[1,3,1,-4,-2,3,-2,10],[-8,-2,2,4,-9,8,-8,-3],[-10,-9,-6,3,3,9,-1,-9],[2,5,5,-9,-6,10,-9,-7],[1,7,-6,7,-8,-7,7,-7]],[[-7,-4,-2,7,-8,-3,3,-6],[-5,6,-5,3,1,-2,7,-9],[2,1,4,3,6,-1,-6,-5],[-1,-2,-4,-10,6,3,-3,-10],[-4,10,-10,2,-9,-6,9,5],[2,6,4,-3,10,-4,8,10],[6,10,5,1,-4,-8,-10,-10]],[[-2,-10,-4,5,-9,-9,-4,9],[-10,-7,10,8,4,-6,1,-9],[-4,-1,2,-4,-6,7,3,3],[2,10,-7,7,-6,-8,-9,-2],[-3,-3,9,-5,-10,7,8,-7],[-10,-4,5,8,4,-8,2,8],[-3,2,8,-6,-10,2,-5,-8]],[[-5,-9,4,2,5,3,-10,-3],[-1,2,2,8,3,10,6,-2],[-10,3,-10,4,-3,-3,7,5],[-8,-5,-6,-2,2,8,10,1],[3,-6,7,8,-6,-4,-6,-8],[7,-5,-8,-4,9,-8,-4,-8],[3,9,1,-3,-8,-9,7,1]]], dtype = "uint32")#candidate|7598|(4, 7, 8)|const|uint32
bop_7599 = relay.right_shift(var_7597.astype('uint32'), relay.reshape(const_7598.astype('uint32'), relay.shape_of(var_7597))) # shape=(4, 7, 8)
output = bop_7599
output2 = bop_7599
func_7617 = relay.Function([var_7597,], output)
mod['func_7617'] = func_7617
mod = relay.transform.InferType()(mod)
mutated_mod['func_7617'] = func_7617
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7618 = relay.var("var_7618", dtype = "uint32", shape = (4, 7, 8))#candidate|7618|(4, 7, 8)|var|uint32
func_7617_call = mutated_mod.get_global_var('func_7617')
call_7619 = func_7617_call(var_7618)
output = call_7619
func_7620 = relay.Function([var_7618], output)
mutated_mod['func_7620'] = func_7620
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5798_call = mod.get_global_var('func_5798')
func_5800_call = mutated_mod.get_global_var('func_5800')
call_7640 = relay.TupleGetItem(func_5798_call(), 1)
call_7641 = relay.TupleGetItem(func_5800_call(), 1)
uop_7642 = relay.atan(call_7640.astype('float64')) # shape=(9, 7, 3)
uop_7644 = relay.atan(call_7641.astype('float64')) # shape=(9, 7, 3)
output = relay.Tuple([uop_7642,])
output2 = relay.Tuple([uop_7644,])
func_7651 = relay.Function([], output)
mod['func_7651'] = func_7651
mod = relay.transform.InferType()(mod)
mutated_mod['func_7651'] = func_7651
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7651_call = mutated_mod.get_global_var('func_7651')
call_7652 = func_7651_call()
output = call_7652
func_7653 = relay.Function([], output)
mutated_mod['func_7653'] = func_7653
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7003_call = mod.get_global_var('func_7003')
func_7004_call = mutated_mod.get_global_var('func_7004')
call_7716 = func_7003_call()
call_7717 = func_7003_call()
func_1170_call = mod.get_global_var('func_1170')
func_1174_call = mutated_mod.get_global_var('func_1174')
const_7734 = relay.const([3,-1,-4,-8,-10,1,-1,-7,1,-6,-2,1,7,-6,9,-7,1,7,-2,-2,-5,-2,-9,1,-8,8,-5,-7,-2,5,6,6,-4,3,-7,6,7,-10,6,8,-8,5,5,6,-5,-3,-5,-2,-3,2,-9,-3,8,-5,-3,-2,9,-4,9,4,-3,9,-7,6,6,-9,8,-5,3,3,-3,9,-2,6,5,9,10,-7,-9,-6,-2,-1,-7,9,6,-6,-8,-1,-9,4,-1,-3,1,8,4,-6,-7,7,5,3,-7,-10,-5,-5,-2,-10,4,-1,-5,6,3,6,-10,5,10,-9,-7,1,-2,8,-7,-6,-2,-7,-6,-8,6,-10,-8,4,-2,-4,3,-3,-4,-10,9,-4,-3,-10,4,9,-2,6,3,-10,6,4,-1,-4,-7,-6,10,-9,-8,3,7,-2,10,-10,2,8,6,-7,8,-10,6,3,-5,-9,9,7,-4,4,-10,7,-6,10,-8,9,-8,10,6,-10,-4,-7,2,9,-6,-10,-1,8,5,-9,3,-6,8,7,-9,-6,7,-8,-9,7,-3,-10,7,2,-6,-2,9,-1,5,-1,-4,-1,-2,2,-9,-7,-7,7,-6,3,-7,2,4,-3,3,7,-2,-10,7,-6,-2,-9,1,-10,-4,-9,-1,-9,8,6,-7,-1,-1,-3,-5,-7,3,6,1,-1,3,7,2,-9,-7,4,-9,-5,7,1,9,1,-5,6,-4,-2,-6,1,3,2,4,-6,-10,5,10,-1,3,3,-8,-5,-5,-9,4,-10,-9,-8,8,-8,-6,-8,-9,9,1,-2,-10,-9,-2,7,10,2,2,4,6,2,7,10,1,9,-1,8,6,8,8,5,-7,-7,8,10,-7,4,4,-9,-3,-4,-9,-8,2,6,-3,7,-7,8,-8,-7,-1,-9,9,10,10,6,8,6,-10,-7,-3,-3,-9,-8,-1,3,10,-9,-4,10,-4,-3,10,10,4,-5,4,-9,-10,1,2,5,10,8,4,-7,-4,-1,-10,6,-2,10,8,-8,-6,2,-5,-9,-3,-8,-7,-5,5,-7,9,-10,-6,-7,-2,5,-6,-8,-3,7,-6,-5,1,-7,-8,-3,10,7,6,10,-1,-7,-1,-7,2,2,-10,-2,-7,-9,-3,-1,8,9,-4,-3,4,-1,5,-1,1,-4,10,-1,-4,1,3,-2,-2,6,-2,10,-10,-2,8,-1,-7,-1,10,-4,-4,-4,7,-9,-9,-4,7,8,4,2,3,10,-8,-7,-4,-5,-7,5,-6,-4,1,-7,-3,-6,7,10,3,10,-2,-2,-9,5,5,-2,6,6,-6,-8,10,-8,3,-6,10,10,2,-10,-10,-7,-7,-7,-4,10,8,9,-1,-4,6,3,-6,10,8,7,7,2,-2,8,-2,6,-6,9,-1,-6,-2,5,-3,-6,-8,-8,8,10,-8,5,-7,-9,5,4,10,-5,10,-2,6,5,-10,9,-2,-9,-7,10,5,-1,-9,8,-5,-4,4,8,-4,4,-6,4,-3,-8,-7,-6,-10,-5,-2,-10,10,1,-2,4,4,1,-2,-9,8,-7,6,7,10,4,-9,-8,10,2,10,9,-5,-5,-5,-2,-2,8,-2,-3,-1,6,-1,8,6,3,-8,-2,-3,2,3,-3,-2,-2,-7,1,-2,-9,-1,-6,1,-5,-2,-3,-7,-4,-8,-5,7,-9,10,6,4,7,-4,-4,-4,3,-9,-2,-1,9,3,-2,-1,7,-10,5,8,-1,7,-9,-6,7,-1,6,-5,-3,-8,9,7,-3,8,-1,2,-3,7,9,4,-3,-5,7,3,-6,-7,2,-10,-1,3,-9,3,-5,1,6,-2,-10,-7,6,-9,10,-9,9,7,10,-3,-6,-8,-9,-9,-4,-5,7,-1,1,-9,-5,-5,-8,6,2,-6,8,-1,2,-5,10,-3,1,4,-4,-4,1,-5,2,6,3,-4,7,9,7,8,-3,8,4,7,-5,7,2,5,-3,2,5,8,-3,-3,-2,-2,1,10,-2,-5,10,4,-6,-10,2,-5,-5,-8,2,1,-2,9,-2,1,6,4,-10,9,-7,-4,-8,5,2,4,-7,-7,9,-6,-5,-9,-5,-8,-1,-10,6,7,-3,-9,-8,-10,-9,5,5,3,8,-2,6,7,-6,8,-1,6,-9,-2,10,-1,-10,-9,8,4,5,-1,7,10,7,5,-3,3,-8,1,6,6,-10,1,-8,-6,-5,8,8,-5,-6,-4,-1,-2,-3,-6,-5,-7,1,5,-4,-4,9,-1,10,2,4,4,5,8,-9,9,9,8,-3,-9,3,6,-5,-1,-2,-10,10,-4,2,-7,8,-6,1,7,7,2,1,-4,-6,-3,9,-5,-9,-8,-10,-3,-10,-5,3,4,10,-3,-6,7,-3,8,-4,-3,-3,6,-5,-4,-8,-5,-3,-2,-6,1,-4,-2,1,-9,5,7,-6,-3,-2,5,6,-2,10,9,8,8,10,-9,1,5,-3,-4,-7,-9,4,10,5,-6,-5,10,6,-7,7,-9,-5,4,1,8,-7,-9,-10,-10,9,9,2,9,-7,-6,2,3,-4,-9,9,2,-4,-8,10,-9,-3,-4,8,-4,-10,9,8,3,-9,6,10,5,-1,-8,10,-3,-6,9,-2,6,3,-8,-7,4,5,-5,10,-1,-2,3,6,4,-2,-5,6,-8,9,2,7,2,-6,9,9,-8,-8,-3,-6,8,2,4,-7,6,10,-9,-6,9,2,-9,-9,-1,9,-3,3,-4,-7,2,1,-9,10,8,-1,-9,8,-3,6,-1,-8,-9,-8,-7,-9,8,-8,3,-6,-3,1,-1,1,-3,8,1,10,10,-1,4,5,-4,-10,-1,9,3,-8,-6,-8,4,-4,-3,-5,4,-9,7,-10,-7,5,5,3,-3,-2,-10,9,8,8,-10,6,8,2,-9,4,3,7,-7,-7,1,-1,-2,4,-6,3,7,7,5,3,-2,-2,-10,4,-9,-8,-2,3,9,-6,-2,-10,8,-6,-7,-7,-8,3,-7,-5,-1,9,2,-9,-9,-8,6,2,5,7,9,-10,-4,-4,1,-9,4,6,-10,-9,-2,2,4,1,1,9,3,-8,-4,10,-4,8,9,-4,-10,9,-1,-1,-6,4,2,9,5,-4,10,4,5,3,-5,4,-1,9,-8,9,-3,-1,-6,-2,-8,10,4,-5,6,-4,5,6,5,-10,-6,-6,1,5,10,8,8,7,2,1,-9,8,-5,2,10,4,10,-6,-7,-8,-10,4,-6,10,-4,5,9,7,-10,5,-10,7,-9,1,-5,3,-5,5,-2,1,-7,-7,-2,10,3,3,4,-5,4,-1,7,4,2,5,-6,10,-3,-10,3,-8,-9,4,-10,6,-7,2,-10,-5,-6,8,5,5,-7,4,9,8,4,1,1,7,-6,-1,5,-1,-6,-5,9,10,7,5,7,-3,-7,4,-4,7,2,-8,-4,2,-10,-1,-6,-4,-7,10,4,7,-10,1,-6,3,8,6,2,2,-4,-2,5,3,7,-10,-9,-4,9,-2,-6,2,-8,-8,6,-4,-4,-1,2,-3,-9,10,1,4,1,-7,-1,-3,-7,1,10,6,-10,2,-10,1,-1,7,6,4,-5,6,-9,-7,9,-2,3,-4,-4,7,5,-5,-8,8,2,-1,2,5,8,10,1,-8,-9,-7,1,8,3,-2,-4,5,2,-2,-5,8,2,1,-9,6,-3,2,9,10,1,-3,2,-10,-7,-9,-3,6,-4,-7,-7,-10,9,4,9,-2,-4,7,4,-10,-2,-5,-7,-8,-9,-3,-1,-7,-4,8,5,-6,-4,6,-10,1,7,-7,-9,5,-2,-4,-3,1,2,-3,-9,7,-3,3,7,-7,2,-9,9,-8,-4,3,-3,-5,8,-3,8,-10,1,4,9,-4,-5,1,9,-6,2,-8,-8,2,-10,2,-5,9,-8,-7,6,8,-4,-7,8,6,5,-7,-9,-8,5,7,2,7,-8,-7,-6,6,-3,5,-6,-3,4,-3,-10,2,-3,-3,-6,5,5,-8,8,-2,-7,-4,5,6,-9,4,2,-3,6,9,10,-6,7,-7,10,-8,4,1,-1,-1,-6,2,-3,-2,-4,-3,-7,9,-4,9,-4,10,10,7,8,6,5,5,-2,8,-10,-10,1,10,-6,9,7,9,-3,-1,-8,-9,4,10,-1,-3,9,-5,-5,-6,-6,-4,-6,-10,-1,2,-9,-2,-4,-8,1,3,7,2,3,-4,5,-1,10,2,6,3,-4,8,-5,1,2,-6,4,-10,8,-7,3,-7,-3,6,-2,5,-2,-6,-1,-3,-2,1,-8,4,-6,-2,9,2,8,-1,7,-8,1,5,10,-7,8,-10,-1,-6,-3,8,8,6,-9,8,-5,4,10,-1,9,5,-8,-6,9,-5,-10,6,4,6,9,7,2,-3,1,5,2,9,-6,8,-7,-8,8,7,-6,-3,-8,-10,-4,-5,4,6,1,-7,-10,-4,8,4,-8,7,-7,-8,3,-7,10,1,-1,2,-2,-3,-2,9,-1,-7,5,2,4,-9,9,-3,8,-4,1,-5,5,-7,-4,-8,-9,-1,-8,-6,-6,-9,-1,-7,6,-1,7,4,-1,10,5,-10,4,-9,-6,-7,10,-1], dtype = "uint16")#candidate|7734|(1728,)|const|uint16
call_7733 = relay.TupleGetItem(func_1170_call(relay.reshape(const_7734.astype('uint16'), [16, 12, 9]), relay.reshape(const_7734.astype('uint16'), [16, 12, 9]), ), 0)
call_7735 = relay.TupleGetItem(func_1174_call(relay.reshape(const_7734.astype('uint16'), [16, 12, 9]), relay.reshape(const_7734.astype('uint16'), [16, 12, 9]), ), 0)
output = relay.Tuple([call_7716,call_7733,const_7734,])
output2 = relay.Tuple([call_7717,call_7735,const_7734,])
func_7740 = relay.Function([], output)
mod['func_7740'] = func_7740
mod = relay.transform.InferType()(mod)
output = func_7740()
func_7741 = relay.Function([], output)
mutated_mod['func_7741'] = func_7741
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4743_call = mod.get_global_var('func_4743')
func_4745_call = mutated_mod.get_global_var('func_4745')
call_7788 = func_4743_call()
call_7789 = func_4743_call()
output = call_7788
output2 = call_7789
func_7794 = relay.Function([], output)
mod['func_7794'] = func_7794
mod = relay.transform.InferType()(mod)
output = func_7794()
func_7795 = relay.Function([], output)
mutated_mod['func_7795'] = func_7795
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6606_call = mod.get_global_var('func_6606')
func_6608_call = mutated_mod.get_global_var('func_6608')
call_7819 = func_6606_call()
call_7820 = func_6606_call()
output = call_7819
output2 = call_7820
func_7822 = relay.Function([], output)
mod['func_7822'] = func_7822
mod = relay.transform.InferType()(mod)
output = func_7822()
func_7823 = relay.Function([], output)
mutated_mod['func_7823'] = func_7823
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7651_call = mod.get_global_var('func_7651')
func_7653_call = mutated_mod.get_global_var('func_7653')
call_7849 = relay.TupleGetItem(func_7651_call(), 0)
call_7850 = relay.TupleGetItem(func_7653_call(), 0)
output = relay.Tuple([call_7849,])
output2 = relay.Tuple([call_7850,])
func_7869 = relay.Function([], output)
mod['func_7869'] = func_7869
mod = relay.transform.InferType()(mod)
output = func_7869()
func_7870 = relay.Function([], output)
mutated_mod['func_7870'] = func_7870
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4308_call = mod.get_global_var('func_4308')
func_4310_call = mutated_mod.get_global_var('func_4310')
call_7881 = func_4308_call()
call_7882 = func_4308_call()
output = call_7881
output2 = call_7882
func_7890 = relay.Function([], output)
mod['func_7890'] = func_7890
mod = relay.transform.InferType()(mod)
mutated_mod['func_7890'] = func_7890
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7890_call = mutated_mod.get_global_var('func_7890')
call_7891 = func_7890_call()
output = call_7891
func_7892 = relay.Function([], output)
mutated_mod['func_7892'] = func_7892
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7973 = relay.var("var_7973", dtype = "float64", shape = (5, 14, 13))#candidate|7973|(5, 14, 13)|var|float64
uop_7974 = relay.rsqrt(var_7973.astype('float64')) # shape=(5, 14, 13)
bop_7996 = relay.logical_or(uop_7974.astype('bool'), relay.reshape(var_7973.astype('bool'), relay.shape_of(uop_7974))) # shape=(5, 14, 13)
output = bop_7996
output2 = bop_7996
func_8000 = relay.Function([var_7973,], output)
mod['func_8000'] = func_8000
mod = relay.transform.InferType()(mod)
mutated_mod['func_8000'] = func_8000
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8001 = relay.var("var_8001", dtype = "float64", shape = (5, 14, 13))#candidate|8001|(5, 14, 13)|var|float64
func_8000_call = mutated_mod.get_global_var('func_8000')
call_8002 = func_8000_call(var_8001)
output = call_8002
func_8003 = relay.Function([var_8001], output)
mutated_mod['func_8003'] = func_8003
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7325_call = mod.get_global_var('func_7325')
func_7326_call = mutated_mod.get_global_var('func_7326')
call_8019 = relay.TupleGetItem(func_7325_call(), 0)
call_8020 = relay.TupleGetItem(func_7326_call(), 0)
output = call_8019
output2 = call_8020
func_8021 = relay.Function([], output)
mod['func_8021'] = func_8021
mod = relay.transform.InferType()(mod)
mutated_mod['func_8021'] = func_8021
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8021_call = mutated_mod.get_global_var('func_8021')
call_8022 = func_8021_call()
output = call_8022
func_8023 = relay.Function([], output)
mutated_mod['func_8023'] = func_8023
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7231_call = mod.get_global_var('func_7231')
func_7232_call = mutated_mod.get_global_var('func_7232')
call_8065 = relay.TupleGetItem(func_7231_call(), 0)
call_8066 = relay.TupleGetItem(func_7232_call(), 0)
func_7406_call = mod.get_global_var('func_7406')
func_7407_call = mutated_mod.get_global_var('func_7407')
call_8074 = func_7406_call()
call_8075 = func_7406_call()
output = relay.Tuple([call_8065,call_8074,])
output2 = relay.Tuple([call_8066,call_8075,])
func_8078 = relay.Function([], output)
mod['func_8078'] = func_8078
mod = relay.transform.InferType()(mod)
output = func_8078()
func_8079 = relay.Function([], output)
mutated_mod['func_8079'] = func_8079
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8191 = relay.var("var_8191", dtype = "uint64", shape = (5, 3, 8))#candidate|8191|(5, 3, 8)|var|uint64
var_8192 = relay.var("var_8192", dtype = "uint64", shape = (5, 3, 8))#candidate|8192|(5, 3, 8)|var|uint64
bop_8193 = relay.greater_equal(var_8191.astype('bool'), relay.reshape(var_8192.astype('bool'), relay.shape_of(var_8191))) # shape=(5, 3, 8)
output = bop_8193
output2 = bop_8193
func_8207 = relay.Function([var_8191,var_8192,], output)
mod['func_8207'] = func_8207
mod = relay.transform.InferType()(mod)
mutated_mod['func_8207'] = func_8207
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8207_call = mutated_mod.get_global_var('func_8207')
var_8209 = relay.var("var_8209", dtype = "uint64", shape = (5, 3, 8))#candidate|8209|(5, 3, 8)|var|uint64
var_8210 = relay.var("var_8210", dtype = "uint64", shape = (5, 3, 8))#candidate|8210|(5, 3, 8)|var|uint64
call_8208 = func_8207_call(var_8209,var_8210,)
output = call_8208
func_8211 = relay.Function([var_8209,var_8210,], output)
mutated_mod['func_8211'] = func_8211
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7794_call = mod.get_global_var('func_7794')
func_7795_call = mutated_mod.get_global_var('func_7795')
call_8221 = func_7794_call()
call_8222 = func_7794_call()
func_1170_call = mod.get_global_var('func_1170')
func_1174_call = mutated_mod.get_global_var('func_1174')
const_8230 = relay.const([6,7,7,-9,1,2,-2,-9,9,5,3,8,-1,-8,-6,-5,10,-10,-9,9,6,8,-6,-4,-8,-9,-4,2,9,4,10,6,3,-6,8,2,1,-3,-6,-4,-6,7,7,-7,1,2,3,1,7,-6,-7,8,-10,-4,9,-1,10,5,7,-6,3,10,-9,2,10,-10,10,-4,-2,-5,8,-4,-3,-8,2,9,-3,3,-7,7,-5,-4,-6,3,7,-8,5,-3,-10,-7,4,-10,-2,-6,-8,-8,-1,-7,-1,6,-10,2,4,-2,-6,-1,-4,7,3,-8,-8,3,-1,8,-1,-9,-7,-4,8,-9,6,9,10,9,1,2,4,-1,-6,-6,-1,7,9,3,9,6,-4,7,-10,7,2,1,7,-2,8,9,6,-1,7,-2,10,4,-2,-7,-7,-2,-4,-8,4,3,9,-5,-7,-8,2,5,-10,5,-9,-4,7,-7,8,3,5,-6,-9,9,-7,2,-9,-1,-5,-2,-9,3,2,-6,-5,-2,6,-5,9,10,-1,3,-7,-10,1,7,8,-3,-9,-1,-9,-5,3,9,-3,7,-1,-5,-5,3,9,-3,9,9,6,-2,-7,3,8,1,10,7,-8,-2,-9,8,-2,-7,8,10,-10,-2,-1,6,-6,-1,6,-10,10,9,4,7,10,-10,4,6,-2,2,3,1,6,10,1,6,1,-1,3,-2,4,3,1,3,-8,-5,2,4,1,1,1,1,5,6,2,2,9,-3,5,-4,-10,7,6,-9,5,-6,7,8,-1,-9,4,8,-7,6,8,6,-8,9,4,10,10,-6,5,-1,2,-1,3,2,4,-3,-7,-4,4,8,3,-9,-5,-2,-3,-9,4,1,-3,9,-8,-2,1,-9,-9,-5,4,7,-3,10,-5,8,10,9,2,-3,-8,7,-2,6,-3,6,-9,7,-6,-7,-7,-2,-4,-10,-7,-9,9,8,-10,3,-7,3,5,-7,6,-4,9,-9,5,3,6,10,-6,5,3,3,10,-8,-5,-8,1,3,-5,6,6,5,9,-7,2,-5,1,-6,4,-8,1,10,-5,3,-9,-4,-8,7,4,6,-6,-2,-1,-10,2,-3,-3,6,-8,-9,-10,2,-4,9,2,4,8,-7,-4,-5,-6,-3,1,-8,-10,8,2,2,-10,3,-6,-2,-3,-3,-9,-5,-7,5,-8,9,-1,-2,8,8,2,-9,-8,-3,3,10,-4,-8,-5,-1,5,-3,-8,9,8,5,1,-8,-7,2,9,-2,8,6,-3,6,-10,2,5,-5,1,1,-3,10,2,-2,3,7,-3,5,-1,-4,2,-10,-9,8,-4,1,9,-9,-1,-5,-4,6,-5,-3,-1,-9,5,10,4,-4,-6,-8,-6,10,-8,4,7,-1,-10,-9,3,6,9,2,1,-4,10,-5,-2,4,10,-4,-7,-9,9,-9,-8,-10,10,-2,7,9,-1,6,9,-3,-7,6,-2,-10,-5,-3,6,1,5,-7,1,-2,2,4,-7,2,4,7,-5,6,7,-6,-3,9,10,10,5,2,1,1,-4,1,3,3,6,9,-1,8,-1,1,4,3,-7,-7,2,6,10,-6,-7,10,-10,-1,-3,-6,8,6,-1,3,3,-6,-7,2,4,-10,-9,-6,-1,-2,6,9,-5,7,-1,4,10,2,6,7,-4,-1,-9,-1,-6,5,9,7,8,-10,4,-4,7,4,-1,-1,9,-5,-1,-1,9,8,-9,-4,10,-5,-1,9,-6,-9,-5,2,-4,-4,-5,-1,-10,-6,5,7,5,8,-4,2,-3,7,-3,1,7,-2,8,-9,-4,9,-5,3,-10,-6,1,4,-10,9,1,-3,-5,1,10,-4,-6,-2,-1,3,-7,8,8,9,5,3,7,-4,-1,-6,6,-5,-4,5,3,9,-8,7,10,-6,-3,-1,-7,5,-10,10,2,10,2,1,3,7,-8,-9,-10,5,4,-8,-3,-8,3,-10,-3,10,6,-5,3,10,4,-2,-4,2,5,10,2,-10,6,-1,-2,8,-4,7,-3,-1,-8,-5,-1,2,-4,3,-2,10,-5,-9,-2,5,10,-3,10,-3,-6,3,-3,1,-9,3,7,1,6,9,7,-4,-5,-1,1,-5,2,4,5,5,10,-7,-3,1,8,-7,-1,3,10,-10,10,9,5,7,9,-8,-10,-9,3,4,9,6,4,7,7,-6,5,7,9,2,6,10,-2,8,-9,7,-4,8,-6,4,4,-8,-7,9,-1,-5,-8,2,6,-7,10,2,9,-4,7,-8,-7,-8,-5,2,9,-2,4,8,4,4,-1,2,8,-7,-3,4,3,-4,-10,-4,-6,5,-2,10,2,2,2,-5,9,3,-7,1,10,6,-4,10,-9,-1,-2,7,-7,-7,-4,-7,-4,-2,-9,1,-10,3,9,3,-10,9,7,4,-6,3,3,2,2,6,-8,-3,6,-2,9,3,2,-1,-1,-1,6,-8,5,6,-5,-3,1,-3,1,-2,-1,-10,-10,-1,6,7,-7,-2,-4,-2,-3,5,-10,-3,-4,-3,-1,-9,4,1,4,-3,-4,3,-3,10,-1,-2,-3,-4,-9,5,10,4,-4,5,4,8,2,7,-8,5,-9,-2,1,1,-3,-1,-10,6,-9,-3,8,2,-3,-9,-3,-2,-1,-7,10,-2,6,-5,-10,10,3,-4,-5,3,5,-2,-8,5,1,-2,1,6,-1,2,4,-1,-7,10,-3,-1,6,-9,8,-4,5,9,-3,-3,-8,6,-9,8,3,-10,-2,-7,6,3,-9,4,6,-1,-10,3,-9,9,5,-8,7,7,2,-8,-9,4,-1,-3,2,5,-8,10,-9,-9,-6,5,6,-1,-7,7,-1,5,7,-8,-3,3,-3,-3,9,9,1,-9,7,5,10,-9,3,4,3,1,6,9,6,-6,-4,-4,-8,-1,-4,8,-8,-6,2,-3,3,2,1,-3,-3,-3,1,-3,-10,-3,-1,-8,-7,-4,-4,3,-2,-9,8,1,8,-10,1,9,8,-6,4,-1,-10,-1,1,-4,-8,-7,4,8,2,-2,-3,-8,4,3,-10,10,-9,-6,4,7,-2,8,2,7,-8,-1,-9,-2,-3,-2,9,-4,-10,1,10,-6,2,-8,4,10,-4,2,2,-8,-1,9,-10,-8,-5,6,5,-10,8,1,3,3,-6,1,-1,2,-9,1,6,-2,8,-6,10,10,-4,-1,4,-6,-10,-8,-8,-2,3,-6,3,-10,6,4,4,7,6,-6,-5,-3,-1,-8,3,-6,5,5,-10,9,-3,-3,8,4,1,6,-4,10,2,-4,10,-9,-10,1,9,7,4,8,1,7,2,7,-4,1,5,-9,3,-9,4,4,-1,-7,10,-8,5,-4,-9,-5,8,-9,9,-7,7,7,6,-7,2,-4,9,-5,5,3,2,9,4,-2,-5,7,-7,-5,6,1,-8,-10,7,1,-9,-10,-2,1,-6,-9,4,-6,10,5,5,-4,3,10,-3,3,-5,5,1,-5,8,9,2,4,-7,10,9,5,-1,-1,3,-8,-9,8,-8,-9,9,-10,-1,2,5,8,-7,-5,5,3,-4,-10,4,4,-3,8,-9,2,5,8,8,-6,-8,-3,9,-4,-7,-7,-2,-10,-4,-6,9,4,4,5,-7,-6,4,-1,5,7,10,10,-6,9,-3,6,-5,-5,2,10,3,-8,5,-9,7,-2,-1,-2,-5,1,-8,-9,7,3,-3,3,-10,2,-10,-6,8,-5,2,-10,-6,4,-7,-8,-8,8,-3,7,9,9,-10,-6,2,-9,-7,-1,9,-1,-10,-3,-8,-10,-9,4,-8,-9,7,9,9,4,-7,10,-2,-2,-10,1,-5,10,-9,2,-7,-6,-8,-6,4,-2,-6,-7,-3,-1,4,-4,-2,-3,-1,6,7,4,10,-10,-9,5,5,4,-3,-3,-6,7,3,8,-8,2,8,-1,-8,-3,3,2,2,-8,-10,3,9,-3,2,6,6,7,6,4,-9,10,-7,-2,10,-5,4,-10,9,-5,5,-3,1,-8,-6,-10,-9,8,5,-6,-1,-9,8,8,-3,8,-6,2,1,-4,-2,5,-5,9,5,8,4,-1,-7,10,3,9,-1,5,-10,-10,-3,4,-9,9,6,-10,-5,3,-1,3,10,-1,4,4,7,6,10,10,-3,-1,-6,-9,3,2,-6,-6,-8,9,7,6,9,5,-2,-7,4,3,-3,9,-6,-8,10,1,2,-2,3,-4,1,-2,-4,7,-10,-8,-5,-7,-1,-3,10,1,-6,-3,-2,-3,-8,-6,-3,2,5,6,-8,1,7,-10,-10,1,3,-6,2,-6,4,5,-6,3,-9,-1,2,-6,-8,8,-7,-5,-4,5,-10,-6,-6,-2,-10,-6,-1,-7,1,-2,2,-10,-10,1,-5,7,9,8,8,8,2,-8,10,-6,9,-1,-9,-9,-5,-10,-9,4,4,-1,-1,-10,-2,-5,-4,-5,-10,-3,9,-7,-4,-3,-6,1,10,-2,-3,-3,1,-9,-9,-7,3,10,-3,6,-6,10,-7,-3,3,9,8,-2,8,-3,8,-7,-9,4,-6,9,1,-5,2,-7,-3,-2,-8,1,8,4,3,8,10,4,-4,7,4,-6], dtype = "uint16")#candidate|8230|(1728,)|const|uint16
call_8229 = relay.TupleGetItem(func_1170_call(relay.reshape(const_8230.astype('uint16'), [16, 12, 9]), relay.reshape(const_8230.astype('uint16'), [16, 12, 9]), ), 2)
call_8231 = relay.TupleGetItem(func_1174_call(relay.reshape(const_8230.astype('uint16'), [16, 12, 9]), relay.reshape(const_8230.astype('uint16'), [16, 12, 9]), ), 2)
func_1170_call = mod.get_global_var('func_1170')
func_1174_call = mutated_mod.get_global_var('func_1174')
call_8233 = relay.TupleGetItem(func_1170_call(relay.reshape(const_8230.astype('uint16'), [16, 12, 9]), relay.reshape(const_8230.astype('uint16'), [16, 12, 9]), ), 1)
call_8234 = relay.TupleGetItem(func_1174_call(relay.reshape(const_8230.astype('uint16'), [16, 12, 9]), relay.reshape(const_8230.astype('uint16'), [16, 12, 9]), ), 1)
output = relay.Tuple([call_8221,call_8229,const_8230,call_8233,])
output2 = relay.Tuple([call_8222,call_8231,const_8230,call_8234,])
func_8258 = relay.Function([], output)
mod['func_8258'] = func_8258
mod = relay.transform.InferType()(mod)
output = func_8258()
func_8259 = relay.Function([], output)
mutated_mod['func_8259'] = func_8259
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7822_call = mod.get_global_var('func_7822')
func_7823_call = mutated_mod.get_global_var('func_7823')
call_8268 = func_7822_call()
call_8269 = func_7822_call()
output = call_8268
output2 = call_8269
func_8270 = relay.Function([], output)
mod['func_8270'] = func_8270
mod = relay.transform.InferType()(mod)
mutated_mod['func_8270'] = func_8270
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8270_call = mutated_mod.get_global_var('func_8270')
call_8271 = func_8270_call()
output = call_8271
func_8272 = relay.Function([], output)
mutated_mod['func_8272'] = func_8272
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7651_call = mod.get_global_var('func_7651')
func_7653_call = mutated_mod.get_global_var('func_7653')
call_8283 = relay.TupleGetItem(func_7651_call(), 0)
call_8284 = relay.TupleGetItem(func_7653_call(), 0)
func_6824_call = mod.get_global_var('func_6824')
func_6826_call = mutated_mod.get_global_var('func_6826')
var_8287 = relay.var("var_8287", dtype = "float32", shape = (8, 110))#candidate|8287|(8, 110)|var|float32
call_8286 = relay.TupleGetItem(func_6824_call(relay.reshape(var_8287.astype('float32'), [880,])), 5)
call_8288 = relay.TupleGetItem(func_6826_call(relay.reshape(var_8287.astype('float32'), [880,])), 5)
var_8294 = relay.var("var_8294", dtype = "float64", shape = (9, 7, 3))#candidate|8294|(9, 7, 3)|var|float64
bop_8295 = relay.less_equal(call_8283.astype('bool'), relay.reshape(var_8294.astype('bool'), relay.shape_of(call_8283))) # shape=(9, 7, 3)
bop_8298 = relay.less_equal(call_8284.astype('bool'), relay.reshape(var_8294.astype('bool'), relay.shape_of(call_8284))) # shape=(9, 7, 3)
output = relay.Tuple([call_8286,var_8287,bop_8295,])
output2 = relay.Tuple([call_8288,var_8287,bop_8298,])
func_8311 = relay.Function([var_8287,var_8294,], output)
mod['func_8311'] = func_8311
mod = relay.transform.InferType()(mod)
mutated_mod['func_8311'] = func_8311
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8311_call = mutated_mod.get_global_var('func_8311')
var_8313 = relay.var("var_8313", dtype = "float32", shape = (8, 110))#candidate|8313|(8, 110)|var|float32
var_8314 = relay.var("var_8314", dtype = "float64", shape = (9, 7, 3))#candidate|8314|(9, 7, 3)|var|float64
call_8312 = func_8311_call(var_8313,var_8314,)
output = call_8312
func_8315 = relay.Function([var_8313,var_8314,], output)
mutated_mod['func_8315'] = func_8315
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6666_call = mod.get_global_var('func_6666')
func_6667_call = mutated_mod.get_global_var('func_6667')
call_8359 = func_6666_call()
call_8360 = func_6666_call()
func_4622_call = mod.get_global_var('func_4622')
func_4625_call = mutated_mod.get_global_var('func_4625')
const_8370 = relay.const(-7.118543, dtype = "float64")#candidate|8370|()|const|float64
call_8369 = relay.TupleGetItem(func_4622_call(relay.reshape(const_8370.astype('float64'), [])), 0)
call_8371 = relay.TupleGetItem(func_4625_call(relay.reshape(const_8370.astype('float64'), [])), 0)
func_6824_call = mod.get_global_var('func_6824')
func_6826_call = mutated_mod.get_global_var('func_6826')
var_8374 = relay.var("var_8374", dtype = "float32", shape = (1, 880))#candidate|8374|(1, 880)|var|float32
call_8373 = relay.TupleGetItem(func_6824_call(relay.reshape(var_8374.astype('float32'), [880,])), 6)
call_8375 = relay.TupleGetItem(func_6826_call(relay.reshape(var_8374.astype('float32'), [880,])), 6)
uop_8376 = relay.atan(var_8374.astype('float64')) # shape=(1, 880)
output = relay.Tuple([call_8359,call_8369,const_8370,call_8373,uop_8376,])
output2 = relay.Tuple([call_8360,call_8371,const_8370,call_8375,uop_8376,])
func_8380 = relay.Function([var_8374,], output)
mod['func_8380'] = func_8380
mod = relay.transform.InferType()(mod)
mutated_mod['func_8380'] = func_8380
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8381 = relay.var("var_8381", dtype = "float32", shape = (1, 880))#candidate|8381|(1, 880)|var|float32
func_8380_call = mutated_mod.get_global_var('func_8380')
call_8382 = func_8380_call(var_8381)
output = call_8382
func_8383 = relay.Function([var_8381], output)
mutated_mod['func_8383'] = func_8383
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5987_call = mod.get_global_var('func_5987')
func_5989_call = mutated_mod.get_global_var('func_5989')
call_8420 = relay.TupleGetItem(func_5987_call(), 0)
call_8421 = relay.TupleGetItem(func_5989_call(), 0)
output = relay.Tuple([call_8420,])
output2 = relay.Tuple([call_8421,])
func_8434 = relay.Function([], output)
mod['func_8434'] = func_8434
mod = relay.transform.InferType()(mod)
output = func_8434()
func_8435 = relay.Function([], output)
mutated_mod['func_8435'] = func_8435
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7890_call = mod.get_global_var('func_7890')
func_7892_call = mutated_mod.get_global_var('func_7892')
call_8436 = func_7890_call()
call_8437 = func_7890_call()
func_7869_call = mod.get_global_var('func_7869')
func_7870_call = mutated_mod.get_global_var('func_7870')
call_8451 = relay.TupleGetItem(func_7869_call(), 0)
call_8452 = relay.TupleGetItem(func_7870_call(), 0)
output = relay.Tuple([call_8436,call_8451,])
output2 = relay.Tuple([call_8437,call_8452,])
func_8470 = relay.Function([], output)
mod['func_8470'] = func_8470
mod = relay.transform.InferType()(mod)
mutated_mod['func_8470'] = func_8470
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8470_call = mutated_mod.get_global_var('func_8470')
call_8471 = func_8470_call()
output = call_8471
func_8472 = relay.Function([], output)
mutated_mod['func_8472'] = func_8472
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8507 = relay.var("var_8507", dtype = "float64", shape = (16, 1, 5))#candidate|8507|(16, 1, 5)|var|float64
uop_8508 = relay.sin(var_8507.astype('float64')) # shape=(16, 1, 5)
bop_8520 = relay.add(uop_8508.astype('float64'), relay.reshape(var_8507.astype('float64'), relay.shape_of(uop_8508))) # shape=(16, 1, 5)
output = relay.Tuple([bop_8520,])
output2 = relay.Tuple([bop_8520,])
func_8524 = relay.Function([var_8507,], output)
mod['func_8524'] = func_8524
mod = relay.transform.InferType()(mod)
mutated_mod['func_8524'] = func_8524
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8525 = relay.var("var_8525", dtype = "float64", shape = (16, 1, 5))#candidate|8525|(16, 1, 5)|var|float64
func_8524_call = mutated_mod.get_global_var('func_8524')
call_8526 = func_8524_call(var_8525)
output = call_8526
func_8527 = relay.Function([var_8525], output)
mutated_mod['func_8527'] = func_8527
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5564_call = mod.get_global_var('func_5564')
func_5566_call = mutated_mod.get_global_var('func_5566')
call_8601 = relay.TupleGetItem(func_5564_call(), 1)
call_8602 = relay.TupleGetItem(func_5566_call(), 1)
output = call_8601
output2 = call_8602
func_8631 = relay.Function([], output)
mod['func_8631'] = func_8631
mod = relay.transform.InferType()(mod)
mutated_mod['func_8631'] = func_8631
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8631_call = mutated_mod.get_global_var('func_8631')
call_8632 = func_8631_call()
output = call_8632
func_8633 = relay.Function([], output)
mutated_mod['func_8633'] = func_8633
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7822_call = mod.get_global_var('func_7822')
func_7823_call = mutated_mod.get_global_var('func_7823')
call_8670 = func_7822_call()
call_8671 = func_7822_call()
func_4266_call = mod.get_global_var('func_4266')
func_4268_call = mutated_mod.get_global_var('func_4268')
call_8677 = relay.TupleGetItem(func_4266_call(), 0)
call_8678 = relay.TupleGetItem(func_4268_call(), 0)
output = relay.Tuple([call_8670,call_8677,])
output2 = relay.Tuple([call_8671,call_8678,])
func_8700 = relay.Function([], output)
mod['func_8700'] = func_8700
mod = relay.transform.InferType()(mod)
output = func_8700()
func_8701 = relay.Function([], output)
mutated_mod['func_8701'] = func_8701
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5014_call = mod.get_global_var('func_5014')
func_5015_call = mutated_mod.get_global_var('func_5015')
call_8704 = relay.TupleGetItem(func_5014_call(), 0)
call_8705 = relay.TupleGetItem(func_5015_call(), 0)
output = call_8704
output2 = call_8705
func_8721 = relay.Function([], output)
mod['func_8721'] = func_8721
mod = relay.transform.InferType()(mod)
output = func_8721()
func_8722 = relay.Function([], output)
mutated_mod['func_8722'] = func_8722
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8747 = relay.var("var_8747", dtype = "float32", shape = (14, 12, 16))#candidate|8747|(14, 12, 16)|var|float32
uop_8748 = relay.cos(var_8747.astype('float32')) # shape=(14, 12, 16)
output = relay.Tuple([uop_8748,])
output2 = relay.Tuple([uop_8748,])
func_8750 = relay.Function([var_8747,], output)
mod['func_8750'] = func_8750
mod = relay.transform.InferType()(mod)
mutated_mod['func_8750'] = func_8750
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8751 = relay.var("var_8751", dtype = "float32", shape = (14, 12, 16))#candidate|8751|(14, 12, 16)|var|float32
func_8750_call = mutated_mod.get_global_var('func_8750')
call_8752 = func_8750_call(var_8751)
output = call_8752
func_8753 = relay.Function([var_8751], output)
mutated_mod['func_8753'] = func_8753
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8856 = relay.var("var_8856", dtype = "uint64", shape = (8, 3, 15))#candidate|8856|(8, 3, 15)|var|uint64
const_8857 = relay.const([[[-6,-6,-7,-9,-8,9,-10,-3,3,-9,-8,3,-7,9,-2],[10,7,10,2,2,-8,3,8,-6,-4,3,7,-5,10,-2],[10,-2,-7,-2,-2,6,5,-1,-9,-5,1,-4,3,5,-3]],[[8,9,2,-2,3,-1,5,2,1,2,4,-4,-4,-8,-4],[5,6,-2,10,-3,10,-3,9,1,-7,-6,6,9,-10,-8],[10,6,9,-6,-2,1,-4,6,-2,-3,-2,1,-10,-10,9]],[[-3,-3,-9,-9,-1,-4,4,1,-1,-9,-3,3,10,6,4],[-10,-6,-9,5,-8,8,3,9,-2,-8,-5,3,-6,-3,-5],[-8,7,-7,-7,-4,-1,8,-4,7,-9,8,-5,-6,-8,-3]],[[-8,-7,5,3,4,-8,8,8,-6,8,1,1,-1,-9,6],[9,5,10,7,1,-1,-8,-8,10,5,-9,-8,-4,-5,-5],[9,6,-1,3,2,-1,6,1,-10,-5,-1,-3,5,5,2]],[[-3,-5,4,-7,-3,-2,1,6,1,-1,10,1,10,-3,-9],[6,-8,3,6,-1,-1,3,-1,2,-4,-8,-6,10,-8,2],[9,-9,8,1,4,-10,6,-4,2,-1,-10,3,-2,1,-7]],[[7,-8,5,8,9,9,-4,-3,-4,-6,-1,5,-10,10,-7],[4,-5,10,-10,7,10,-7,2,5,-4,10,5,1,4,-9],[-8,-5,-7,2,-5,7,6,-2,-3,-4,-7,-4,2,2,-5]],[[-7,3,-6,8,6,-9,-9,-6,-3,9,7,4,2,5,3],[4,4,3,6,8,-7,6,3,-8,-2,-8,4,-10,-9,10],[-8,-4,-2,2,8,-1,-8,10,8,10,6,-10,-9,7,-7]],[[1,-3,-8,10,2,-10,5,-7,-1,-3,-4,-10,-9,7,8],[7,1,-2,5,-9,-2,-8,-10,1,2,4,-3,2,-5,10],[-5,3,-6,-5,7,-8,6,5,4,7,2,-4,6,-8,7]]], dtype = "uint64")#candidate|8857|(8, 3, 15)|const|uint64
bop_8858 = relay.bitwise_or(var_8856.astype('uint64'), relay.reshape(const_8857.astype('uint64'), relay.shape_of(var_8856))) # shape=(8, 3, 15)
output = relay.Tuple([bop_8858,])
output2 = relay.Tuple([bop_8858,])
func_8883 = relay.Function([var_8856,], output)
mod['func_8883'] = func_8883
mod = relay.transform.InferType()(mod)
var_8884 = relay.var("var_8884", dtype = "uint64", shape = (8, 3, 15))#candidate|8884|(8, 3, 15)|var|uint64
output = func_8883(var_8884)
func_8885 = relay.Function([var_8884], output)
mutated_mod['func_8885'] = func_8885
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7046_call = mod.get_global_var('func_7046')
func_7047_call = mutated_mod.get_global_var('func_7047')
call_8980 = relay.TupleGetItem(func_7046_call(), 0)
call_8981 = relay.TupleGetItem(func_7047_call(), 0)
func_661_call = mod.get_global_var('func_661')
func_663_call = mutated_mod.get_global_var('func_663')
var_9010 = relay.var("var_9010", dtype = "float32", shape = (64,))#candidate|9010|(64,)|var|float32
call_9009 = relay.TupleGetItem(func_661_call(relay.reshape(var_9010.astype('float32'), [1, 8, 8])), 0)
call_9011 = relay.TupleGetItem(func_663_call(relay.reshape(var_9010.astype('float32'), [1, 8, 8])), 0)
output = relay.Tuple([call_8980,call_9009,var_9010,])
output2 = relay.Tuple([call_8981,call_9011,var_9010,])
func_9036 = relay.Function([var_9010,], output)
mod['func_9036'] = func_9036
mod = relay.transform.InferType()(mod)
mutated_mod['func_9036'] = func_9036
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9037 = relay.var("var_9037", dtype = "float32", shape = (64,))#candidate|9037|(64,)|var|float32
func_9036_call = mutated_mod.get_global_var('func_9036')
call_9038 = func_9036_call(var_9037)
output = call_9038
func_9039 = relay.Function([var_9037], output)
mutated_mod['func_9039'] = func_9039
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7372_call = mod.get_global_var('func_7372')
func_7373_call = mutated_mod.get_global_var('func_7373')
call_9094 = relay.TupleGetItem(func_7372_call(), 0)
call_9095 = relay.TupleGetItem(func_7373_call(), 0)
output = relay.Tuple([call_9094,])
output2 = relay.Tuple([call_9095,])
func_9102 = relay.Function([], output)
mod['func_9102'] = func_9102
mod = relay.transform.InferType()(mod)
output = func_9102()
func_9103 = relay.Function([], output)
mutated_mod['func_9103'] = func_9103
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7488_call = mod.get_global_var('func_7488')
func_7489_call = mutated_mod.get_global_var('func_7489')
call_9167 = relay.TupleGetItem(func_7488_call(), 6)
call_9168 = relay.TupleGetItem(func_7489_call(), 6)
output = call_9167
output2 = call_9168
func_9178 = relay.Function([], output)
mod['func_9178'] = func_9178
mod = relay.transform.InferType()(mod)
mutated_mod['func_9178'] = func_9178
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9178_call = mutated_mod.get_global_var('func_9178')
call_9179 = func_9178_call()
output = call_9179
func_9180 = relay.Function([], output)
mutated_mod['func_9180'] = func_9180
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7325_call = mod.get_global_var('func_7325')
func_7326_call = mutated_mod.get_global_var('func_7326')
call_9181 = relay.TupleGetItem(func_7325_call(), 0)
call_9182 = relay.TupleGetItem(func_7326_call(), 0)
output = relay.Tuple([call_9181,])
output2 = relay.Tuple([call_9182,])
func_9187 = relay.Function([], output)
mod['func_9187'] = func_9187
mod = relay.transform.InferType()(mod)
output = func_9187()
func_9188 = relay.Function([], output)
mutated_mod['func_9188'] = func_9188
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9201 = relay.var("var_9201", dtype = "float64", shape = (7, 11, 3))#candidate|9201|(7, 11, 3)|var|float64
uop_9202 = relay.sinh(var_9201.astype('float64')) # shape=(7, 11, 3)
output = relay.Tuple([uop_9202,])
output2 = relay.Tuple([uop_9202,])
func_9205 = relay.Function([var_9201,], output)
mod['func_9205'] = func_9205
mod = relay.transform.InferType()(mod)
var_9206 = relay.var("var_9206", dtype = "float64", shape = (7, 11, 3))#candidate|9206|(7, 11, 3)|var|float64
output = func_9205(var_9206)
func_9207 = relay.Function([var_9206], output)
mutated_mod['func_9207'] = func_9207
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5522_call = mod.get_global_var('func_5522')
func_5523_call = mutated_mod.get_global_var('func_5523')
call_9214 = func_5522_call()
call_9215 = func_5522_call()
var_9218 = relay.var("var_9218", dtype = "float64", shape = (16, 11, 15))#candidate|9218|(16, 11, 15)|var|float64
bop_9219 = relay.add(call_9214.astype('int16'), relay.reshape(var_9218.astype('int16'), relay.shape_of(call_9214))) # shape=(16, 11, 15)
bop_9222 = relay.add(call_9215.astype('int16'), relay.reshape(var_9218.astype('int16'), relay.shape_of(call_9215))) # shape=(16, 11, 15)
func_5354_call = mod.get_global_var('func_5354')
func_5357_call = mutated_mod.get_global_var('func_5357')
var_9232 = relay.var("var_9232", dtype = "float32", shape = (35,))#candidate|9232|(35,)|var|float32
const_9233 = relay.const([-7.979029,2.480481,-2.638134,-9.945749,-8.525792,-6.693523,-1.963207,-5.798287,-6.629940,-2.198562,4.706778,9.404816,8.673715,3.591938,-4.920837,-3.046795,-3.281687,6.993357,-4.916095,3.407871,1.346413,7.699466,-6.935082,0.799549,7.050149,6.015403,9.732008,-6.425910,9.982899,8.318051,-4.471278,5.024021,8.316496,-4.946579,-0.993149,-7.229245,8.574628,3.286855,3.499758,-0.854508,-3.472643,6.450655,-1.826570,-3.831121,-1.239614,-7.542936,4.066577,5.624790,-3.280763,-9.057430,-4.912208,4.270535,-3.058883,5.229699,1.009443,-5.706025,7.174561,6.319631,1.928090,-6.367843,4.548340,0.624676,-7.440336,1.340107,-5.457561,6.839406,0.572785,-8.825902,0.433495,5.223257,-0.488443,-0.065653,-7.495308,6.432490,5.181052,8.183911,-1.866416,0.756335,3.145295,-3.962113,9.998604,-4.978974,-1.087842,-1.440049,4.229917,-1.356758,-5.833293,0.775659,5.777705,-8.084554,-6.210594,9.121278,-4.452111,0.760398,-0.338935,7.846257,7.655553,-9.990713,5.570471,9.302187,-0.867748,-5.591723,-0.566938,5.540942,-8.911853,-3.432216,0.912696,-7.477485,7.300972,-1.226449,9.179196,3.087225,7.765512,-7.432201,-5.028236,4.826378,9.692332,7.533742,-3.636710,7.929302,1.732002,4.384147,-5.433367,-0.913865,-8.792311,6.280817,1.383692,-2.064152,-5.886811,8.332384,1.762520,0.379337,-9.030477,-3.842941,-6.000606,8.410565,-4.138508,-2.024216,-5.170280,-3.239495,8.650232,-8.943348,-7.842568,-7.123312,0.046339,4.520661,-9.766215,-2.840940,-6.820171,3.784576,-3.091866,-2.299022,-6.787612,5.214035,5.194918,0.293403,9.879857,9.463696,-8.891632,-9.965697,6.061283,-7.343072,7.472910,-2.442656,-7.724163,-4.002423,4.856085,4.704565,2.316069,-5.486010,-3.183652,-1.897657,-7.934963,1.057267,0.386103,-1.870485,5.677060,-7.184992,3.275339,-2.320125,9.265590,9.734231,4.064372,-6.008584,8.516103,-1.109243,-5.605855,-8.182420,-8.310871,5.050681,7.076444,3.889932,0.316734,5.573360,-8.382398,-8.748101,-5.752828,-3.304185,-7.358846,1.920657,-1.697536,7.940982,-4.293082,6.478008,0.452806,-2.021453,-5.399349,0.672983,3.234536,7.096938,4.524682,4.906062,8.172535,4.734759,-8.269876,0.084379,-4.254464,4.871486,-5.743037,-8.787058,-2.897373,5.093587,-3.392455,-4.720183,5.836449,9.634120,5.661853,9.113674,3.685040,-5.385472,2.830442,-6.902069,-0.722400,-3.757829,-8.812816,-0.509959,9.921942,1.905183,-7.963972,4.241088,7.029060,-3.583233,-1.801824,6.171915,5.428080,8.398818,-9.992206,-6.455187,-3.140493,8.691555,2.293019,8.818972,5.523982,-3.688470,-8.680082,-8.218631,0.859940,-9.657924,-5.429218,1.063238,9.621287,-0.593034,-9.365827,-1.232828,0.691870,0.818533,4.990130,7.873945,0.228992,-5.329200,0.696257,-0.360706,-6.251574,-8.065725,-5.642384,-8.939674,8.828949,4.874761,0.231260,-3.919130,-0.245794,-8.464451,-5.109431,-1.680606,1.638795,2.267540,2.838469,2.585431,-4.694019,-6.221358,7.679714,-7.082966,2.668122,-3.790957,8.837546,3.110777,-2.733290,7.284831,4.992826,9.587489,-1.130716,-8.886533,-0.677856,2.187552,9.826849,1.218646,-1.431600,9.926388,-7.641885,8.701312,-1.740566,1.774788,-5.097290,4.585045,-7.750700,-2.541448,8.280560,1.357483,7.771419,-5.228194,-7.747250,4.063167,3.238367,5.109474,2.625761,7.205492,0.097677,-8.509489,7.998931,-0.771057,-2.509232,9.413468,3.654848,7.846482,6.908081,4.595402,-1.568199,8.869404,-9.439127,2.500645,3.957539,4.835660,9.593362,-4.701654,-9.131434,-4.111664,5.282642,-3.295177,-3.631311,9.179402,-8.945987,-3.509342,-2.414583,-6.278349,-8.999520,-6.164276,4.465378,-6.102640,0.467644,6.921900,0.358913,8.297554,3.471888,6.598189,6.966865,-1.525275,-7.673746,-6.463314,-0.955343,9.250318,-8.614574,-0.278293,8.866570,-1.049582,5.112827,-1.496955,-6.366000,6.820584,-3.551851,2.396516,-7.315645,5.239184,-6.328605,2.857325,-2.772172,8.934834,-7.147890,-9.359148,9.822374,-3.801800,0.783527,1.441629,-6.619087,5.242052,-6.099992,9.064836,-1.897903,8.062293,-2.736983,2.296893,8.705832,-3.297214,-7.232853,5.842807,3.790017,-1.514077,0.471826,-9.785176,5.073370,-6.774161,8.603665,-9.848919,-7.708586,-8.010839,-0.302951,6.425549,6.547004,6.099653,3.733901,8.008788,-6.545046,2.321117,1.197540,-6.877879,7.267076,-0.367303,-4.389538,6.718008,-7.036583,8.132140,5.049783,-8.958912,-5.350036,3.996838,3.964476,5.538245,-4.294505,4.949064,-2.040199,-1.920516,-5.206842,-7.377682,4.429489,7.798955,-8.853694,-0.175270,6.370092,-1.201563,-5.912845,8.021417,-4.326170,-2.017501,3.250506,-2.575099,3.580977,-8.506841,-8.574852,-3.936424,-6.681947,9.361780,-9.429377,-0.366396,9.646398,-7.098470,-5.116057,1.508036,-3.410379,-9.978457,5.918683,5.410042,0.335250,-7.477057,1.651664,-7.961415,-5.481403,-3.607510,5.520142,-5.352496,7.008716,3.432472,6.042488,-7.891835,-8.812556,1.674351,2.648854,-2.059838,-7.628326,-3.735916,7.975364,2.207302,9.898509,-9.347449,6.616998,8.397261,0.872929,-5.114517,8.576135,-4.226237,8.332368,8.164053,6.710817,-7.871330,-3.330242,6.271962,2.319134,6.776606,-6.013332,1.780231,-7.088430,-6.610622,0.099337,-6.871727,3.594939,-4.315753,6.695472,6.940540,0.811242,-0.348929,5.869160,6.683431,9.394974,2.762771,8.133932,5.035470,5.433825,4.102118,-4.482407,5.863963,9.405494,5.252708,7.245720,9.226282,-8.584693,-9.354871,6.523317,-4.303143,-8.804843,-1.789037,-1.709762,7.658226,0.936160,4.914413,6.934192,7.705138,-9.776465,5.741133,3.895339,4.665869,-1.140624,3.822340,2.282897,-7.660369,8.631406,9.431551,-0.295343,1.189746,-3.720895,-2.417343,1.590360,-2.576384,-8.462780,0.881977,-4.974459,7.579827,-2.747283,-1.517650,-1.219126,0.369956,7.429866,0.861972,-9.510775,0.261093,4.346346,-3.663887,3.648511,2.558053,-4.075365,9.424902,1.731307,4.629555,-2.315777,6.250986,4.578090,-7.615313,-6.998133,-0.337977,9.730402,7.847878,2.896919,6.518563,-4.251757,-6.285190,-1.272551,7.104279,-9.828193,0.022022,-8.367593,5.992290,-1.010791,-0.732438,-5.957488,8.212521,-5.851363,-9.610212,-9.804892,-5.172563,-1.792322,2.618695,-2.601512,-2.540214,9.197243,9.001358,0.406449,6.529981,6.270737,-5.107555,5.406975,0.403527,-8.326265,2.725205,3.382130,7.088398,5.966672,-3.944195,9.955831,-7.823002,1.446161,-5.754006,6.434140,-7.050464,7.474655,-8.480646,-2.750546,-4.774939,6.746932,1.375715,6.313629,8.255666,5.322328,-1.090372,-5.218530,4.721091,1.651722,-1.244540,-8.322371,8.240402,6.565898,-0.222572,8.841277,-1.478961,-8.928636,3.641058,-9.598225,-4.913762,5.471098,-5.565215,-4.214806,3.599383,7.259443,-9.058161,-9.868992,3.170018,9.941454,9.948672,-3.253770,8.533162,9.011056,-2.545901,6.553844,9.736675,-9.224525,1.592716,2.643058,-7.039419,-0.108747,-8.728155,-7.542763,1.924814,5.358937,-9.872977,-7.004486,1.505436,-6.602455,-7.603318,-3.118004,-1.091317,9.084660,5.396813,-4.702839,-2.694490,-2.803692,0.306464,-7.893714,-3.281469,7.297146,-8.956526,7.159722,5.291007,0.550000,3.146594,4.541604,-2.606108,3.539412,-5.657085,7.528917,3.731241,0.175227,-5.173305,5.901817,-4.302609,9.194234,-3.135714,-6.492993,5.160889,9.468908,0.442814,-8.204100,-3.799882,-4.889558,-5.221397,7.354377,3.730393,-6.599339,-1.683684,9.132790,1.440796,5.716815,0.020011,8.801864,-8.929486,4.890515,-5.950324,1.998860,-7.280861,1.302311,-8.016163,-6.581234,6.386578,1.904612,-8.389417,-7.377272,-4.544634,2.559107,7.264511,-8.318063,-3.446643,-0.303286,5.535476,2.205765,1.957988,-7.023854,4.360882,4.656129,-8.790671,-5.582745,7.111407,-7.321790,4.222345,2.483963,-3.421395,-9.169390,-7.825165,0.417920,-8.890582,2.389332,6.465215,3.569437,-6.348068,-8.259428,-2.989542,3.639569,8.146816,8.051948,3.869451,-5.907700,-4.305299,-3.902884,7.540507,-0.170987,-2.534083,5.606893,-1.931790,-6.755018,4.322628,3.848027,-3.662693,-9.000755,-7.002402,-2.845376,-7.642595,8.813971,2.704735,5.313295,-3.965640,-7.861827,6.730060,-7.634387,1.393201,-1.847236,7.700756,-1.230789,-8.703792,-6.660195,-4.228938,4.367942,1.213282,1.762095,-7.270766,3.002814,-3.756820,-9.865747,6.934641,3.597079,4.706562,9.046957,5.030421,-9.387294,-8.614958,-3.597436,3.555030,-2.757858,6.971871,8.472932,-8.140916,-8.765912,0.209904,2.237467,0.606093,7.824393,-7.701895,-1.438120,-4.356611,-8.988115,6.474638,9.785747,-1.751547,4.686083,6.071152,2.191735,6.117004,-3.128565,-4.116811,1.612934,6.692791,6.721304,6.499826,4.362045,-9.868284,5.957797,3.778367,7.541569,-5.095512,7.888293,3.393399,7.538514,-9.222735,8.816036,4.087127,-3.165635,5.245346,8.694641,9.946936,-7.419366,-7.025678,2.525756,-4.577310,8.649086,0.183949,-7.232850,8.652952,5.684331,-6.167022,5.683669,8.496312,-1.456982,2.291930,-1.349852,-3.096815,-4.077285,-3.301339,-6.333003,-4.591986,4.118675,-3.022363,1.297044,3.092799,6.073518,2.108159,-3.661092,0.406822,-6.790147,-4.291643,8.256214,8.418237,6.192087,-3.505689,9.605549,3.172350,-7.355534,-9.083298,8.149048,2.066598,5.589271,0.051078,1.197091,-5.722867,9.016334,-3.811139,-2.751746,8.603788,0.692143,7.155673,-7.306560,3.075312,1.163903,-9.296972,-3.221267,0.201356,3.404350,5.149065,0.788935,-2.657294,-6.681981,-4.849248,-4.527208,-4.705656,6.602259,-4.907684,-8.281589,-8.546173,-3.541328,-2.361456,-6.203245,-0.247710,6.251491,2.060740,-4.273911,0.077581,-2.736892,8.634636,9.345679,6.067203,6.618302,1.652043,0.337086,2.096065,-4.693075,-8.009349,-3.532582,-3.302042,-4.379723,-0.783108,5.919865,7.569775,0.727807,1.264747,-8.791833,1.353723,-6.798847,5.377720,2.826797,5.402386,9.559452,-4.576213,8.548242,4.608998,-4.582448,-4.707036,9.812269,-5.914955,-1.668925,-7.435960,-8.074217,-7.958963,-4.298218,-1.120543,6.809956,5.227538,-2.850122,-6.452942,3.824088,9.511590,6.410936,1.693793,-4.236398,-9.581420,2.089099,4.428729,-1.867290,3.959942,-5.354943,-3.179180,3.341078,-3.594106,-8.207519,3.582090,-6.065627,7.837237,-0.695719,-0.596396,-0.363914,3.828492,9.289246,8.317902,4.765747,-9.097592,9.480706,2.596050,2.032194,-4.500115,-5.666682,7.600317,-5.092017,-4.489456,2.207682,6.625684,0.776474,-7.641376,-3.130018,7.751147,-7.606717,8.841094,-3.485655,-1.287025,-6.791634,4.467001,9.343925,3.677097,-5.699949,-1.390157,-9.614853,0.825482,3.159828,0.125370,-1.385467,4.571477,-2.674696,-0.799807,0.742541,-7.677200,4.993710,-9.697754,-0.899863,-9.550190,0.802988,1.382360,9.480799,-1.096569,-9.629508,-2.265892,-6.506019,4.731780,-4.094159,7.225920,-2.320593,5.170253,-9.719165,-9.589046,0.261631,5.118368,-6.127135,-1.704725,3.766791,-9.587334,-2.068987,-4.816240,-9.190592,-3.364352,2.356088,-0.500839,8.445329,4.710631,3.579645,1.754738,4.225813,9.099160,0.206548,1.303126,-5.947319,-7.656994,-8.529522,1.378238,-9.109134,8.947022,-0.670563,4.379729,3.895665,9.879259,9.048448,3.146123,4.062003,-4.449547,-7.953394,0.772822,8.641069,-2.468645,0.998564,-0.895914,4.834077,1.632404,0.612486,3.714628,-6.149349,5.240451,2.776066,-7.028670,3.036753,5.392173,-2.854746,6.014246,-3.555862,5.062420,8.792109,7.288042,6.926685,-9.578413,-2.158877,6.257873,-1.420068,-3.504653,1.456457,-5.376285,8.496778,-9.377793,7.297149,2.712990,6.807106,8.176865,-1.016780,6.290111,2.360664,-1.153953,-3.505799,-5.270895,-0.653804,-5.762844,2.232850,-9.263241,2.902554,-3.319007,-9.265710,-7.348761,-0.523981,3.785978,0.945363,-5.763662,-7.478427,-9.321730,-9.515189,-4.526333,1.270531,-0.780709,2.006081,0.006851,-2.991945,3.401879,5.049810,-4.229015,8.976095,-8.705709,2.484648,-7.014137,7.897124,-1.043849,3.295301,-1.855519,8.734198,-3.198436,5.903635,0.812486,1.009028,4.506088,3.934775,7.986409,9.567889,2.407503,-8.942657,-1.388377,-0.777612,-6.578690,7.024580,-2.537712,5.904359,-0.504303,-9.897357,-2.101890,-2.450720,-7.284944,-6.531920,7.051711,5.581597,-7.275946,-8.634662,7.134290,9.677700,-5.931482,-7.770434,4.813249,0.426171,-7.346355,-6.282530,-7.502459,-7.123329,-8.716714,-6.673244,-9.400976,-9.310676,6.261911,-6.807896,7.974002,-3.898842,-6.208357,-8.013112,3.228357,1.264616,4.703636,-7.259080,6.217919,-8.557637,2.391865,9.335428,-5.842592,-0.266314,-2.537261,-7.767966,-6.175784,2.574248,2.570821,0.854112,-2.898647,-3.700288,-8.539962,7.139837,-9.553448,1.586309,-5.391096,4.246987,-6.530983,-1.447135,-6.341228,-5.169439,-6.279454,-6.792444,5.596927,-2.168746,-7.974429,3.086529,1.396299,-0.653871,-2.027574,-6.675518,-4.409942,9.766429,3.320199,8.461841,-7.528354,9.326698,-8.085814,-0.447141,4.272319,3.913505,2.074041,-5.861642,1.244411,-5.128512,-7.627321,-1.392134,2.432735,3.906770,8.500132,-0.733468,-3.210861,-6.201212,3.636518,-7.940906,8.387407,6.059865,-0.701798,-4.569720,-1.544654,2.564436,6.265834,-0.797462,1.603406,9.098571,-5.105389,-7.079995,1.059538,1.164961,6.737353,1.398472,5.188582,2.235722,-3.715581,1.219263,6.770653,6.619298,-9.461601,8.671620,7.093753,5.888905,-5.003951,-5.449732,-2.056898,2.774577,0.061450,8.764108,8.946615,-3.944118,-2.828714,-4.333325,-3.114631,-9.472426,2.991379,-7.673290,-8.052890,8.697815,9.532363,3.717834,5.284675,2.359553,7.387836,-7.772644,-3.506212,9.116712,-4.693025,-1.557513,7.576863,-1.081672,-8.966113,-0.254295,-0.473854,9.147915,5.551117,0.638279,9.160853,-6.574543,1.786094,0.173984,0.543102,-3.870697,2.311902,5.200883,9.331510,0.987533,-4.883522,7.116149,0.288312,5.560206,2.849435,-0.418101,4.347273,4.948912,0.705532,-1.340343,1.781693,-3.212486,6.093527,-0.589601,5.832537,-8.947948,9.912363,-0.039434,6.781445,1.727379,1.092114,3.600257,-4.886171,3.339898,-5.456099,5.340248,4.961563,-9.110223,0.308045,8.528180,-2.516577,-4.944505,1.795662,4.553010,-9.699754,9.624681,-0.175018,6.109416,-6.665004,-8.925396,-0.594039,-1.383663,5.786037,3.066689,0.171357,-7.276399,-1.148366,0.377058,1.832685,-7.700360,-3.670770,8.275191,6.801711,3.283347,-8.985691,-8.151566,5.213742,-3.288155,9.924854,9.229655,-4.173081,-9.245301,7.066701,2.377284,-0.059828,-0.169151,2.130709,4.939982,-1.844842,-5.360533,-9.058330,-9.330155,-5.272919,4.126227,-4.723500,-7.662261,-9.342724,3.424265,5.349055,-7.694213,5.174627,-2.623734,8.242556,5.565371,-9.011745,-9.064866,-6.497090,1.104773,1.063682,-1.870865,8.481217,-6.953474,1.087437,7.756648,-0.578710,6.890854,8.336595,9.644082,1.441840,-7.029491,-9.507631,6.110492,2.299350,3.598570,9.258946,-0.475475,2.040514,-7.698818,0.572645,3.776306,6.873511,9.528476,-8.778668,8.240517,1.166941,7.476672,-7.271925,-5.468639,5.605746,-4.980840,8.375734,-8.921545,-8.340651,2.935089,-8.131333,1.075585,8.207774,-6.289862,8.061278,-8.433908,-2.671839,3.126965,-7.667848,-8.986621,1.111462,-3.806953,-2.249265,3.538416,6.021302,-3.337082,6.924980,4.958372,-6.161761,-0.437649,-5.442698,-1.300130,3.711422,1.072888,9.853727,8.479426,6.127111,6.772881,-3.939108,-0.143386,3.353655,-3.712476,-2.081189,-8.793988,6.027297,7.721680,3.488703,-5.355461,8.249127,-4.570205,-4.943100,6.643790,0.623373,1.848909,-3.460960,8.942039,-6.170969,-2.172889,0.164981,8.224896,-0.190499,-0.560687,-5.788648,-7.667595,6.053331,-9.128935,-8.323169,4.339336,-9.153754,-8.589453,-3.552854,-4.298306,3.489580,6.798315,0.406028,1.023124,1.106413,3.259793,0.022906,1.580075,-6.032160,-0.918014,-3.211526,-0.257693,-8.120330,6.904288,-4.317387,6.842803,-4.693754,6.907836,0.122316,8.639665,-8.308581,-8.557265,-4.742399,-4.522325,8.988717,-8.977103,-3.525153,-3.490849,9.589278,6.027829,4.039503,7.599644,-0.389621,-7.535165,8.588348,-1.369652,-5.872011,2.789988,7.863021,-9.631047,-7.565424,-2.540696,5.870115,6.536215,-6.113317,6.839887,9.114912,8.280366,7.116778,6.430736,-8.654068,-0.863000,-7.935568,9.407452,-1.413622,-6.753915,-9.983050,9.719218,3.608217,-2.878221,-9.756894,-9.298584,-9.321605,0.638712,8.444088,8.125268,-8.368254,-1.228593,1.017405,-5.663790,9.026784,3.167915,0.531079,-9.355485,4.374836,-6.026537,-3.093846,-8.693579,5.297628,-3.500181,-8.415817,-0.225488,9.200665,-3.329791,-4.462563,-5.860838,0.409291,-3.946267,1.416288,-6.257119,1.724894,-9.869899,3.780307,9.603684,-4.158526,5.132890,9.547412,2.720634,-7.828402,0.091608,3.561289,4.048744,1.643842,9.590538,-3.604647,-1.761473,2.020506,7.256015,4.469407,7.084953,-5.124209,-2.027478,-3.287609,-1.025797,7.219769,9.732489,-2.764934,-9.837025,-2.687817,-6.381008,2.640577,6.282830,1.048620,6.781803,2.138502,-1.230127,8.169611,5.730244,-5.318986,-0.729649,6.192914,-1.084066,-4.886247,-3.182049,0.969217,0.625041,0.504730,6.278384,0.310399,8.211002,9.977434,-0.005979,-6.074021,-6.415394,-4.956221,2.089789,-8.283156,1.430577,-2.985586,-2.001105,-3.737267,-8.117183,-9.685028,-5.827879,-7.586204,-4.496759,4.685010,-7.368099,-2.805717,-0.408146,3.982451,-8.206630,-7.982490,7.034225,9.522124,-9.408499,5.335751,0.761733,-5.688880,-0.178992,3.223279,-4.309750,4.202304,3.504414,5.774900,-8.283970,0.013007,-5.400180,-9.778761,-0.738459,3.462596,4.381856,2.848937,-1.691022,-2.406875,-8.847066,7.129704,-2.638127,5.127732,-0.653177,-3.673439,7.750337,-3.678279,6.368281,6.291037,-4.415452,-4.090295,-7.073999,8.474213,5.952818,6.384100,3.039234,-5.295685,2.080136,7.846278,-2.287024,4.994361,2.210869,2.092300,-6.197667,-9.781640,-8.223751,6.153870,-8.615728,7.873402,-2.330702,7.943331,-4.708622,-6.556952,3.478209,6.658131,3.070227,-7.279358,-0.900503,8.465597,-7.696608,-5.998809,-1.710285,0.737608,-5.979214,-7.454611,5.635860,-1.623573,8.668393,-9.304894,5.333904,-4.119011,-6.028078,9.949073,-4.568273,7.716656,4.145421,3.837874,7.678841,-2.573261,-6.324116,1.312955,5.984514,3.696618,-9.870297,6.074512,1.670129,-2.170284,-1.302986,4.333287,-4.402391,-9.225928,-4.467040,2.563466,-1.303859,5.212372,-2.802031,0.961561,-9.371874,-9.247293,-4.682181,-1.223037,4.208445,8.802086,0.861732,-4.994520,1.664703,3.144788,8.576756,-1.306530,-3.074801,-7.922099,-5.846152,-3.192236,-1.780834,9.880642,5.029402,-0.322011,-7.791177,-3.960844,-9.661327,7.655402,0.622908,0.483758,6.300161,8.541305,5.445361,-9.806840,8.627909,4.190195,5.350520,-8.957172,-9.391347,8.877131,-6.112980,-2.433698,-5.756190,-1.068259,-2.757495,-9.941865,6.497005,-9.023890,5.798691,-5.095534,3.323793,-2.623031,-8.248531,1.574692,-3.757104,5.502127,7.836477,6.811147,7.972814,7.213941,-2.858452,0.185316,5.099520,-1.158739,-0.222173,1.826613,-6.475645,-3.943981,-5.010513,-8.968727,-4.153695,7.182943,0.998822,-1.242472,4.904781,3.354289,4.601881,3.375053,-0.978955,-7.819203,2.261382,-3.594119,0.925490,-4.761235,5.010669,-1.186676,0.561272,7.002214,9.723807,4.977534,7.769532,-4.930135,-9.365385,-6.312697,1.437601,0.647422,-4.132356,5.168088,1.860903,-3.881581,-0.522313,-9.266179,-0.368635,-5.562833,4.512908,-5.226170,-7.428739,-5.825717,8.205293,6.405719,5.805046,1.679420,4.334824,2.237607,-0.087724,0.813702,0.554585,-4.775346,1.660806,7.729167,4.330208,4.624628,-4.815182,-9.394557,-8.916514,-6.330761,-7.594755,-6.825348,-7.143419,-8.033692,5.905494,4.418324,-4.960299,-7.149654,7.344707,-1.426698,-7.383505,-6.542144,2.821281,-7.156643,5.423317,5.389907,-9.181103,7.784429,-6.052226,1.934349,7.045365,-3.393687,4.751752,3.044766,-0.023001,3.317663,1.305398,7.316580,-8.173444,4.639670,-8.005764,5.922304,-6.620700,-5.396683,8.322181,-1.840293,-1.481179,-5.412669,1.911808,-9.604150,5.180405,-2.223219,-3.519644,-4.442148,5.315809,-2.141409,-1.858542,-2.209500,-0.115906,9.866741,2.139892,-6.515349,-3.144351,5.371644,-7.897253,4.031439,0.765433,-8.260394,9.463249,-8.302843,-7.878993,1.014119,-5.215191,2.746313,-4.015955,-3.928633,-0.346812,2.547526,6.071325,6.182752,4.656281,-0.408550,-8.504726,-4.324315,0.394991,9.180370,7.020538,-0.641859,-6.866036,-8.007848,0.052571,-7.587792,5.220679,-9.765630,-3.832966,-1.512412,2.413555,-7.699197,7.465086,5.406584,5.233390,5.546734,1.697931,3.271177,7.596520,-6.991888,-8.135290,4.469175,6.941721,0.441793,0.282987,2.410264,-1.657421,-4.436640,-0.223589,-1.385884,-6.131377,-7.650336,5.502107,-4.487662,3.146105,1.036191,5.083945,8.491753,2.948304,7.133261,-1.136802,8.172727,-5.614139,-8.400064,7.675044,9.452101,-9.069504,-9.284411,9.098867,8.203266,7.985140,-1.825495,3.196900,8.721456,-3.548521,9.566738,3.770710,4.604308,-9.301409,-0.049974,-4.863153,-1.841293,9.234578,9.699029,7.075131,1.519804,1.338574,9.533928,6.238586,4.694938,0.847933,-1.885716,6.711428,8.415672,-9.067275,-3.445573,6.777711,5.383194,0.275407,1.482653,5.538212,8.441438,-7.245158,7.645602,-0.267979,-6.786733,2.013662,-4.635914,-3.612079,9.925096,-8.602621,-2.329331,-0.909630,-5.912817,-7.670215,-1.961670,7.555820,-8.278234,-3.081607,6.245818,3.851383,5.270455,5.534339,3.224005,9.016068,-3.443503,-8.145986,5.562944,-5.738983,-0.095620,0.140073,1.338915,9.758743,-1.383631,2.700742,-1.482120,1.868530,-6.430972,9.770538,5.288756,-8.639120,-2.547184,-3.821472,9.062294,-4.808983,8.294309,-2.373058,-1.466574,-2.525690,0.957589,-5.044441,-8.219059,1.470545,-8.214185,2.570308,6.484185,1.826231,-6.126535,7.900458,6.269073,-8.600164,1.260095,9.625528,-4.002466,1.858061,1.827861,8.898104,7.610060,-9.707718,9.444000,9.240314,1.412470,9.253491,-8.198970,8.940959,-8.799922,-8.832088,-0.723977,7.724381,-3.081930,5.775374,-2.884195,3.484915,1.441723,-7.238378,8.139603,-3.940680,-6.755655], dtype = "float64")#candidate|9233|(2160,)|const|float64
call_9231 = relay.TupleGetItem(func_5354_call(relay.reshape(var_9232.astype('float32'), [35,]), relay.reshape(const_9233.astype('float64'), [2160,]), ), 1)
call_9234 = relay.TupleGetItem(func_5357_call(relay.reshape(var_9232.astype('float32'), [35,]), relay.reshape(const_9233.astype('float64'), [2160,]), ), 1)
output = relay.Tuple([bop_9219,call_9231,var_9232,const_9233,])
output2 = relay.Tuple([bop_9222,call_9234,var_9232,const_9233,])
func_9242 = relay.Function([var_9218,var_9232,], output)
mod['func_9242'] = func_9242
mod = relay.transform.InferType()(mod)
mutated_mod['func_9242'] = func_9242
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9242_call = mutated_mod.get_global_var('func_9242')
var_9244 = relay.var("var_9244", dtype = "float64", shape = (16, 11, 15))#candidate|9244|(16, 11, 15)|var|float64
var_9245 = relay.var("var_9245", dtype = "float32", shape = (35,))#candidate|9245|(35,)|var|float32
call_9243 = func_9242_call(var_9244,var_9245,)
output = call_9243
func_9246 = relay.Function([var_9244,var_9245,], output)
mutated_mod['func_9246'] = func_9246
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5450_call = mod.get_global_var('func_5450')
func_5451_call = mutated_mod.get_global_var('func_5451')
call_9253 = func_5450_call()
call_9254 = func_5450_call()
func_4598_call = mod.get_global_var('func_4598')
func_4602_call = mutated_mod.get_global_var('func_4602')
var_9258 = relay.var("var_9258", dtype = "float64", shape = (5,))#candidate|9258|(5,)|var|float64
var_9259 = relay.var("var_9259", dtype = "bool", shape = (13650,))#candidate|9259|(13650,)|var|bool
call_9257 = relay.TupleGetItem(func_4598_call(relay.reshape(var_9258.astype('float64'), [1, 5]), relay.reshape(var_9259.astype('bool'), [2730, 5]), ), 4)
call_9260 = relay.TupleGetItem(func_4602_call(relay.reshape(var_9258.astype('float64'), [1, 5]), relay.reshape(var_9259.astype('bool'), [2730, 5]), ), 4)
func_5822_call = mod.get_global_var('func_5822')
func_5825_call = mutated_mod.get_global_var('func_5825')
const_9266 = relay.const([[-5.325039],[-3.009858],[-3.187133],[6.471083],[5.675867],[9.376726],[-8.624613],[7.966241],[-1.980885],[-0.997134],[-8.078465],[-3.293301],[5.000608],[-3.639369],[-9.542282],[0.620076],[1.506719],[1.580790],[8.835771],[-7.763876],[4.031081],[4.528033],[-9.816021],[5.404286],[8.046099],[7.478049],[-4.412888],[-4.802519],[1.023795],[-1.350132],[8.827400],[6.773572],[4.749030],[-8.350971],[5.320338],[-8.421931],[6.838559],[-5.677748],[-7.721211],[-3.438759],[4.134694],[-8.925107],[7.751183],[1.871822],[8.695409],[-9.650886],[-9.244235],[2.254472],[4.278881],[-6.121290],[1.395410],[2.432501],[3.737861],[-3.866431],[0.007240],[2.383518],[-5.256152],[7.788303],[-5.018618],[1.004992]], dtype = "float64")#candidate|9266|(60, 1)|const|float64
call_9265 = relay.TupleGetItem(func_5822_call(relay.reshape(const_9266.astype('float64'), [60,])), 3)
call_9267 = relay.TupleGetItem(func_5825_call(relay.reshape(const_9266.astype('float64'), [60,])), 3)
output = relay.Tuple([call_9253,call_9257,var_9258,var_9259,call_9265,const_9266,])
output2 = relay.Tuple([call_9254,call_9260,var_9258,var_9259,call_9267,const_9266,])
func_9269 = relay.Function([var_9258,var_9259,], output)
mod['func_9269'] = func_9269
mod = relay.transform.InferType()(mod)
var_9270 = relay.var("var_9270", dtype = "float64", shape = (5,))#candidate|9270|(5,)|var|float64
var_9271 = relay.var("var_9271", dtype = "bool", shape = (13650,))#candidate|9271|(13650,)|var|bool
output = func_9269(var_9270,var_9271,)
func_9272 = relay.Function([var_9270,var_9271,], output)
mutated_mod['func_9272'] = func_9272
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5502_call = mod.get_global_var('func_5502')
func_5503_call = mutated_mod.get_global_var('func_5503')
call_9298 = relay.TupleGetItem(func_5502_call(), 0)
call_9299 = relay.TupleGetItem(func_5503_call(), 0)
output = call_9298
output2 = call_9299
func_9306 = relay.Function([], output)
mod['func_9306'] = func_9306
mod = relay.transform.InferType()(mod)
output = func_9306()
func_9307 = relay.Function([], output)
mutated_mod['func_9307'] = func_9307
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6387_call = mod.get_global_var('func_6387')
func_6389_call = mutated_mod.get_global_var('func_6389')
call_9318 = relay.TupleGetItem(func_6387_call(), 1)
call_9319 = relay.TupleGetItem(func_6389_call(), 1)
func_8434_call = mod.get_global_var('func_8434')
func_8435_call = mutated_mod.get_global_var('func_8435')
call_9331 = relay.TupleGetItem(func_8434_call(), 0)
call_9332 = relay.TupleGetItem(func_8435_call(), 0)
output = relay.Tuple([call_9318,call_9331,])
output2 = relay.Tuple([call_9319,call_9332,])
func_9333 = relay.Function([], output)
mod['func_9333'] = func_9333
mod = relay.transform.InferType()(mod)
mutated_mod['func_9333'] = func_9333
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9333_call = mutated_mod.get_global_var('func_9333')
call_9334 = func_9333_call()
output = call_9334
func_9335 = relay.Function([], output)
mutated_mod['func_9335'] = func_9335
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7740_call = mod.get_global_var('func_7740')
func_7741_call = mutated_mod.get_global_var('func_7741')
call_9490 = relay.TupleGetItem(func_7740_call(), 1)
call_9491 = relay.TupleGetItem(func_7741_call(), 1)
output = relay.Tuple([call_9490,])
output2 = relay.Tuple([call_9491,])
func_9500 = relay.Function([], output)
mod['func_9500'] = func_9500
mod = relay.transform.InferType()(mod)
mutated_mod['func_9500'] = func_9500
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9500_call = mutated_mod.get_global_var('func_9500')
call_9501 = func_9500_call()
output = call_9501
func_9502 = relay.Function([], output)
mutated_mod['func_9502'] = func_9502
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9518 = relay.var("var_9518", dtype = "float64", shape = (14, 12, 2))#candidate|9518|(14, 12, 2)|var|float64
uop_9519 = relay.sin(var_9518.astype('float64')) # shape=(14, 12, 2)
func_5692_call = mod.get_global_var('func_5692')
func_5695_call = mutated_mod.get_global_var('func_5695')
var_9538 = relay.var("var_9538", dtype = "uint16", shape = (1728,))#candidate|9538|(1728,)|var|uint16
call_9537 = relay.TupleGetItem(func_5692_call(relay.reshape(var_9538.astype('uint16'), [1728,])), 2)
call_9539 = relay.TupleGetItem(func_5695_call(relay.reshape(var_9538.astype('uint16'), [1728,])), 2)
output = relay.Tuple([uop_9519,call_9537,var_9538,])
output2 = relay.Tuple([uop_9519,call_9539,var_9538,])
func_9573 = relay.Function([var_9518,var_9538,], output)
mod['func_9573'] = func_9573
mod = relay.transform.InferType()(mod)
var_9574 = relay.var("var_9574", dtype = "float64", shape = (14, 12, 2))#candidate|9574|(14, 12, 2)|var|float64
var_9575 = relay.var("var_9575", dtype = "uint16", shape = (1728,))#candidate|9575|(1728,)|var|uint16
output = func_9573(var_9574,var_9575,)
func_9576 = relay.Function([var_9574,var_9575,], output)
mutated_mod['func_9576'] = func_9576
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5416_call = mod.get_global_var('func_5416')
func_5417_call = mutated_mod.get_global_var('func_5417')
call_9605 = func_5416_call()
call_9606 = func_5416_call()
output = call_9605
output2 = call_9606
func_9609 = relay.Function([], output)
mod['func_9609'] = func_9609
mod = relay.transform.InferType()(mod)
mutated_mod['func_9609'] = func_9609
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9609_call = mutated_mod.get_global_var('func_9609')
call_9610 = func_9609_call()
output = call_9610
func_9611 = relay.Function([], output)
mutated_mod['func_9611'] = func_9611
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6666_call = mod.get_global_var('func_6666')
func_6667_call = mutated_mod.get_global_var('func_6667')
call_9663 = func_6666_call()
call_9664 = func_6666_call()
output = relay.Tuple([call_9663,])
output2 = relay.Tuple([call_9664,])
func_9667 = relay.Function([], output)
mod['func_9667'] = func_9667
mod = relay.transform.InferType()(mod)
output = func_9667()
func_9668 = relay.Function([], output)
mutated_mod['func_9668'] = func_9668
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6912_call = mod.get_global_var('func_6912')
func_6914_call = mutated_mod.get_global_var('func_6914')
call_9706 = func_6912_call()
call_9707 = func_6912_call()
func_4677_call = mod.get_global_var('func_4677')
func_4678_call = mutated_mod.get_global_var('func_4678')
call_9717 = relay.TupleGetItem(func_4677_call(), 1)
call_9718 = relay.TupleGetItem(func_4678_call(), 1)
uop_9719 = relay.sqrt(call_9717.astype('float64')) # shape=(13, 1, 4)
uop_9721 = relay.sqrt(call_9718.astype('float64')) # shape=(13, 1, 4)
func_7372_call = mod.get_global_var('func_7372')
func_7373_call = mutated_mod.get_global_var('func_7373')
call_9722 = relay.TupleGetItem(func_7372_call(), 0)
call_9723 = relay.TupleGetItem(func_7373_call(), 0)
output = relay.Tuple([call_9706,uop_9719,call_9722,])
output2 = relay.Tuple([call_9707,uop_9721,call_9723,])
func_9724 = relay.Function([], output)
mod['func_9724'] = func_9724
mod = relay.transform.InferType()(mod)
mutated_mod['func_9724'] = func_9724
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9724_call = mutated_mod.get_global_var('func_9724')
call_9725 = func_9724_call()
output = call_9725
func_9726 = relay.Function([], output)
mutated_mod['func_9726'] = func_9726
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9730 = relay.var("var_9730", dtype = "int64", shape = (16, 8, 13))#candidate|9730|(16, 8, 13)|var|int64
const_9731 = relay.const([[[5,10,-10,8,4,-4,5,-2,9,3,3,9,-7],[-2,-7,4,10,2,2,-9,3,9,-9,-3,4,6],[-3,5,-2,-6,3,-2,5,3,4,-8,-5,-7,6],[7,-9,1,10,1,-7,2,10,-3,10,4,7,-2],[-9,-9,2,-6,8,10,-7,1,-9,-4,-7,-4,2],[-10,2,-1,3,-5,-5,6,10,3,-9,1,-7,9],[-9,-2,2,10,-6,-2,-1,3,-8,1,-5,5,-9],[3,9,-2,4,-1,-8,8,-4,-2,-7,-2,6,-5]],[[10,-6,-6,6,1,-8,-2,9,2,3,-10,-10,1],[-4,-7,-9,-8,-5,4,-2,9,-7,-10,2,-8,7],[-3,-4,1,3,-6,-5,7,-1,-1,-3,-2,3,1],[-6,-2,6,2,-2,-8,2,-5,-10,-9,3,-3,-2],[9,9,-3,-8,7,-10,3,-1,5,7,-10,-6,8],[-1,-6,-6,-10,-6,1,6,5,5,8,-9,9,6],[-2,10,-2,1,-6,2,3,7,-1,1,2,3,2],[-6,-9,10,-5,-3,5,-4,10,-7,5,8,10,3]],[[5,-2,10,-6,10,-2,10,3,-9,6,-6,-4,-8],[8,-10,-10,7,-2,1,7,7,8,5,3,-2,-3],[2,9,8,10,8,-4,3,1,-3,-5,8,-8,-9],[-8,9,-9,-7,-3,-8,6,4,-1,6,-10,10,1],[-1,4,-1,-8,4,-3,8,7,-10,9,4,8,-4],[1,6,-4,3,4,10,4,1,-4,-3,4,5,5],[5,-9,4,3,-4,-6,4,-2,-5,-10,-6,-5,5],[-2,3,10,-5,-7,3,-10,6,5,-7,6,-5,-8]],[[1,2,5,8,1,5,9,6,1,-8,-1,9,-3],[-10,1,1,-3,10,5,5,-6,-4,4,8,6,-2],[-2,-5,-6,-3,-4,1,-5,5,-8,10,1,-10,5],[-10,-7,-8,-3,-2,-9,-8,-9,-8,9,-8,4,-1],[-3,-1,1,1,-6,-7,-3,2,5,-5,-10,-3,-8],[5,1,8,9,4,5,-9,4,3,-8,9,4,10],[-7,-4,3,9,-9,6,10,-9,-5,7,-8,-9,3],[10,2,-5,10,-5,1,5,-3,-10,-2,6,-9,9]],[[3,-4,3,-8,-1,-5,-2,-5,4,-5,-2,-10,3],[-4,-10,2,8,-10,9,10,-10,-2,-7,7,7,-10],[8,5,-5,6,9,-9,-3,2,6,3,-6,10,3],[7,-1,1,5,1,-3,7,4,-3,-6,10,-6,2],[1,7,9,-4,-1,8,-8,-9,-5,-5,4,-9,-2],[6,3,1,-8,-7,-2,-5,-5,8,1,6,-4,6],[-8,10,-5,7,-2,1,-7,-7,1,-2,7,2,9],[-6,1,-3,-9,7,9,10,-2,-5,1,-8,6,-1]],[[-9,-10,2,-1,10,-2,-7,10,4,-1,-5,7,-6],[10,-2,4,-5,2,-2,2,9,10,-4,-3,-2,-9],[9,-3,-9,-9,-4,-6,1,8,-3,7,6,-9,8],[3,6,-7,5,4,-2,7,-9,-9,-3,4,-9,7],[8,8,-9,6,-2,-4,4,3,2,4,-2,-2,9],[-10,-6,-4,4,10,2,1,-10,10,-3,-10,2,-6],[8,-9,3,5,-8,-4,2,8,-10,7,5,4,10],[-5,-9,-9,9,3,-9,1,-9,4,9,-5,-2,-8]],[[2,7,5,6,-2,-10,5,1,4,-3,-7,4,8],[4,4,9,4,-1,7,-5,-2,-10,-8,1,4,-5],[-9,-6,2,1,4,3,-7,6,-2,2,6,1,2],[-6,-3,7,3,3,5,-1,-3,4,-9,-3,-1,-6],[-7,-3,-8,5,-1,5,6,-9,-3,10,7,5,6],[8,3,8,-1,-8,9,10,6,6,-5,-4,5,4],[10,9,-5,7,3,5,4,10,-7,-3,-6,-6,2],[-9,4,3,3,1,-1,6,-2,5,-6,-9,-5,-7]],[[-9,-4,-3,-2,-8,-2,-6,-9,-1,-10,-5,9,10],[-6,10,6,6,-2,2,-5,-8,-9,10,-3,2,4],[-6,3,-2,-1,-2,-4,6,7,-2,8,9,-6,7],[10,1,-1,8,5,2,-2,2,3,2,7,2,5],[7,8,1,7,1,-10,-9,9,-2,6,-9,-3,-8],[-6,-10,-2,2,-10,8,-4,-5,-8,-1,6,9,9],[-2,8,5,-2,5,-1,-4,10,10,10,10,10,6],[5,9,-3,8,-10,-9,7,4,1,-9,-1,4,-4]],[[1,6,-9,5,6,-8,-3,-5,-1,-6,-2,-7,9],[10,9,-8,8,-2,-6,9,-6,4,7,2,6,7],[7,9,-1,-9,-2,3,-2,1,1,-10,8,6,7],[-5,8,-9,5,-10,6,7,6,-2,-4,-6,4,1],[2,-7,-9,-2,-6,1,10,6,-1,-7,-2,7,3],[-10,-1,-9,10,4,10,-6,8,8,1,5,8,2],[1,7,-5,1,9,1,-7,1,-10,4,6,-7,7],[-2,-3,4,-2,-10,-9,4,-2,-9,9,-8,9,-8]],[[-3,4,8,4,8,9,-10,-8,-9,-7,7,-10,8],[-5,10,-1,-10,-5,-1,-4,-9,-3,-10,-8,-5,-10],[2,9,7,-4,1,10,-10,-2,5,4,-6,1,-7],[-7,-3,-5,6,-3,-9,-8,4,-4,6,-7,-1,-3],[5,-5,4,-7,8,3,7,4,5,-8,3,-3,-5],[10,-1,-5,10,3,3,-2,-1,4,3,5,4,-6],[3,-8,2,-8,-2,1,4,-5,-5,7,-1,5,-3],[-3,4,-5,-1,-7,10,7,-8,-1,4,1,-4,5]],[[-1,1,-1,-2,4,-3,-8,-9,6,8,6,-10,9],[2,-10,-9,9,7,-4,6,4,-4,-2,1,-1,-5],[10,9,-5,-3,10,-7,3,1,-3,-7,8,9,6],[-9,-1,-4,-8,-10,-6,9,4,4,-10,-7,6,9],[-5,6,-10,-8,9,-2,7,-1,5,-8,8,8,-1],[-10,-9,10,9,7,3,10,9,1,6,-10,4,3],[2,-9,-6,-9,-7,-1,7,6,3,-1,2,2,-6],[2,-2,3,8,-8,-10,-9,8,-5,-8,-4,-9,-7]],[[9,-10,4,8,-8,-10,2,9,5,-10,10,7,-6],[-10,7,9,-9,-2,2,-6,10,5,6,-7,3,-5],[3,-2,-4,-8,-2,-7,-8,1,-9,-8,-5,-3,8],[1,7,8,-9,-1,-5,-1,7,-5,9,3,-4,-8],[-8,9,1,9,7,10,-8,-6,3,7,7,3,1],[-5,10,4,-4,-4,-5,7,-10,6,9,8,-1,-9],[8,-6,9,4,5,-7,-2,-8,-4,9,-9,10,8],[9,3,-2,4,-2,9,2,7,-7,-10,8,-7,6]],[[5,-5,3,4,5,-1,-4,-2,2,-1,3,9,-10],[-7,-5,4,-8,3,-6,-9,3,-10,2,1,5,-2],[7,-4,-8,7,-4,5,1,-3,-5,10,10,-6,-1],[6,-7,6,2,5,1,-5,-3,6,8,-1,-2,10],[10,-6,-3,8,-5,-5,6,-6,10,-1,2,6,-9],[-3,-9,-4,-1,1,7,3,4,8,10,7,5,-2],[7,5,7,6,-2,-5,5,6,-5,-3,-9,-9,2],[8,5,-4,-1,10,-8,-4,-9,3,4,5,10,-8]],[[-6,7,-4,7,8,6,10,-5,-2,-9,9,6,-3],[5,-8,2,2,6,-6,-9,-2,-4,-9,-1,10,-4],[3,-4,-1,-2,2,5,-5,1,-1,8,3,8,-10],[3,-10,-1,-6,-3,-6,8,-7,3,3,5,-4,9],[-4,-1,7,-6,-2,-2,-6,7,-10,-9,9,10,5],[8,-8,-7,6,-9,-2,2,6,4,10,1,6,6],[-1,7,-2,5,4,6,-2,2,4,9,7,1,5],[-5,3,8,8,1,-2,3,2,5,4,9,-1,-7]],[[4,-8,-1,1,6,7,-7,-5,-7,-5,8,3,9],[-2,-2,1,-9,6,3,2,-9,3,-1,6,-9,-7],[3,2,3,4,-3,3,5,-1,-9,8,-6,-7,-1],[3,6,-10,-1,2,-6,-1,-3,-2,6,-7,-6,4],[-7,-7,5,-2,-3,1,5,-7,-2,-2,3,-5,7],[3,-8,5,9,6,5,5,10,-1,-9,-8,9,8],[-3,-2,-7,-4,-3,2,3,5,6,8,-6,-1,-9],[6,8,-9,-6,-1,-5,10,6,-1,-10,8,8,1]],[[5,9,-10,2,-8,9,4,-9,-7,-9,2,3,-10],[-7,-7,2,-10,-5,-5,-6,-10,5,7,4,-4,6],[-7,-6,-9,5,3,7,-8,4,1,-4,-5,6,-4],[5,-5,2,7,7,2,2,-9,9,-1,-9,-2,-5],[4,10,-2,-6,3,7,7,-6,7,-6,-6,4,-7],[10,-7,-8,-6,9,-1,-3,4,-6,7,9,1,10],[2,5,-8,9,-9,4,-5,-1,9,-3,-5,3,-3],[6,10,1,2,1,10,5,9,5,4,10,-2,-8]]], dtype = "int64")#candidate|9731|(16, 8, 13)|const|int64
bop_9732 = relay.multiply(var_9730.astype('int64'), relay.reshape(const_9731.astype('int64'), relay.shape_of(var_9730))) # shape=(16, 8, 13)
output = bop_9732
output2 = bop_9732
func_9739 = relay.Function([var_9730,], output)
mod['func_9739'] = func_9739
mod = relay.transform.InferType()(mod)
mutated_mod['func_9739'] = func_9739
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9740 = relay.var("var_9740", dtype = "int64", shape = (16, 8, 13))#candidate|9740|(16, 8, 13)|var|int64
func_9739_call = mutated_mod.get_global_var('func_9739')
call_9741 = func_9739_call(var_9740)
output = call_9741
func_9742 = relay.Function([var_9740], output)
mutated_mod['func_9742'] = func_9742
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4790_call = mod.get_global_var('func_4790')
func_4792_call = mutated_mod.get_global_var('func_4792')
call_9784 = relay.TupleGetItem(func_4790_call(), 0)
call_9785 = relay.TupleGetItem(func_4792_call(), 0)
func_6912_call = mod.get_global_var('func_6912')
func_6914_call = mutated_mod.get_global_var('func_6914')
call_9792 = func_6912_call()
call_9793 = func_6912_call()
func_661_call = mod.get_global_var('func_661')
func_663_call = mutated_mod.get_global_var('func_663')
const_9800 = relay.const([-0.629588,-0.336954,3.372745,-6.228982,8.855266,-2.864519,-7.616607,4.304509,3.147747,-6.827930,7.217182,-2.943719,-9.273163,6.876254,6.447941,9.914692,5.876796,-9.628699,-0.115260,3.479670,7.735180,-2.044330,8.222942,-6.465871,6.199285,9.673865,-9.783225,4.549366,-0.498789,-8.671518,7.320246,7.082342,8.353487,-8.553637,-5.979680,2.929893,8.178684,4.737646,-4.195541,9.638347,6.698151,-2.341468,-2.551088,-6.287018,-7.916481,-1.129790,-0.061987,3.298133,-9.550318,1.940431,2.985341,-3.194665,-1.479413,7.688903,4.710023,-4.688329,-3.173693,0.529204,-8.290446,3.237535,-3.737339,4.413194,3.594410,2.010745], dtype = "float32")#candidate|9800|(64,)|const|float32
call_9799 = relay.TupleGetItem(func_661_call(relay.reshape(const_9800.astype('float32'), [1, 8, 8])), 0)
call_9801 = relay.TupleGetItem(func_663_call(relay.reshape(const_9800.astype('float32'), [1, 8, 8])), 0)
func_3253_call = mod.get_global_var('func_3253')
func_3257_call = mutated_mod.get_global_var('func_3257')
var_9804 = relay.var("var_9804", dtype = "int8", shape = (24, 26))#candidate|9804|(24, 26)|var|int8
const_9805 = relay.const([-9,-1,-4,-8,-4,9,4,-9,1,-8,-10,-9,-10,7,-5,-1,-1,3,-3,-4,-4,7,8,-8,6,7,3,-2,3,8,-8,-2,3,4,8,5,9,-10,5,-8,-8,-7,-1,5,-8,1,3,-5,-1,-2,-7,1,-6,4,8,4,-7,6,-10,1,5,-6,-9,3,-9,9,2,1,8,1,7,4,8,3,3,6,8,-6,-2,-7,6,7,5,-5,-5,-2,4,8,8,-10,7,-8,-7,-4,-5,-9,8,-6,8,-7,-2,5,5,-9,-7,3,-4,-1,-7,-9,-5,-1,8,5,3,-9,10,-2,-9,9,10,2,-5,7,7,4,6,-6,-7,10,-4,6,5,1,10,2,2,-8,-8,-8,-10,-6,10,-5,-2,8,6,-9,5,-6,10,7,-3,-8,9,-5,-10,9,4,8,9,-1,-1,5,-2,1,9,7,-2,-5,1,-1,-3,-3,-4,-3,9,9,8,-6,-5,4,4,7,6,-8,-2,-2,-3,1,5,2,10,2,3,10,-4,1,-6,5,-10,3,-5,-6,7,6,3,-6,9,-1,-7,-2,5,-10,-4,7,1,6,4,-4,9,-4,8,-5,7,1,7,6,9,-7,4,-6,3,-1,-2,-7,-5,-5,-1,1,-8,-4,8,-9,8,9,-7,7,5,-6,-2,-1,-3,1,-7,-2,7,-10,-7,-1,4,-9,2,-2,5,-7,-10,-6,-3,5,-1,4,2,-2,-4,4,-2,-8,8,-5,-7,-9,-9,10,-4,-3,-1,-5,-3,-3,-10,3,-9,-10,3,9,-6,-9,-7,-6,-3,8,-7,8,-9,-7,8,-3,-2,-4,-8,7,5,-6,2,-3,-2,10,3,-9,10,3,5,7,-1,-4,-7,-1,-6,5,3,-4,3,4,5,8,1,-5,9,8,4,9,3,-4,-10,-7,-10,-10,7,9,-9,-9,-10,9,-8,-3,8,-6,5,10,-2,10,9,5,4,-10,-2,-3,7,6,-8,-10,1,7,-7,-1,3,-10,-1,-10,8,-8,-3,3,-5,-5,-7,1,-10,-6,-5,-5,10,5,-10,-4,7,9,5,9,-10,-4,9,7,-4,-8,9,1,9,-1,-1,7,9,7,7,-5,-10,6,-4,9,-7,9,10,-7,6,-10,-5,6,-5,9,10,-1,-10,-10,-1,4,-7,5,-5,-10,10,-9,-9,8,-1,-5,10,-3,-2,-7,-3,-2,6,-8,10,1,8,-7,-6,-10,-4,7,-9,-6,-3,-6,6,7,-7,-2,-4,1,2,8,2,4,-1,2,3,-2,5,-5,8,-2,8,4,-6,2,2,5,-10,-2,1,-2,3,3,4,8,1,-6,5,-10,6,6,-4,4,1,-4,3,7,1,-6,9,6,-6,-8,4,-10,10,2,9,9,-5,2,-10,-4,10,-4,3,-10,4,-10,8,1,-9,3,1,8,4,2,1,-4,7,10,10,1,-10,2,-4,-5,8,-1,-9,-4,10,-8,3,10,10,2,-3,-1,5,-10,-8,1,6,-6,-10,-9,-6,1,-9,-9,-4,6,-3,10,-4,-6,7,8,-9,8,5,-2,-6,-8,6,1,-8,7,8,9,8,-4,-3,8,-9,1,-6,2,-6,5,10,1,-7,-9,-6,6,-4,-10,-3,8,7,-5,-2,6,-7,-9,-9,5,1,-10,10,2,4,-10,-10,-10,-8,1,10,-8,-10,-6,-1,4,4,-10,10,8,-4,3,-7,-3,6,4,1,6,1,10,-2,-4,10,1,-6,6,-9,3,1,-2,-10,-4,-10,-4,-10,-3,-1,-1,10,1,-2,3,-5,9,2,3,-10,3,-5,3,1,2,-2,3,4,6,-10,-7,-7,10,-10,9,10,-1,9,2,7,-4,-4,1,-10,4,-7,-6,5,-4,-1,-6,9,5,1,-9,-1,7,9,-3,-6,2,8,-10,6,-10,10,-5,1,-6,7,-1,10,4,-8,10,-6,9,-10,6,2,-10,-10,-1,5,5,3,-10,8,2,-3,-1,-5,-2,9,9,-4,6,-6,-8,4,-2,-3,-10,4,-8,6,-7,-10,-4,-7,-10,3,-8,3,-9,1,-6,2,5,9,5,3,-4,9,9,2,10,7,6,1,-9,-5,-9,10,-2,-7,4,-9,2,6,-5,-5,6,2,-4,-5,7,7,-6,-10,-5,5,9,-8,1,4,-4,2,3,-4,-7,9,1,-10,4,-7,-8,-10,6,8,4,7,3,10,3,2,-4,-6,10,4,-7,-4,-1,4,2,7,5,4,5,-5,-7,-10,1,-8,3,6,-10,7,-5,-1,2,-5,-3,-7,4,-7,-3,3,-3,5,-2,-6,-1,4,-3,-5,4,-3,2,5,4,-8,-7,10,-4,5,-6,-6,5,3,6,4,1,-7,9,-8,4,-1,6,10,-6,6,6,-9,4,1,-1,2,-4,4,10,8,7,-2,1,-3,-7,-9,10,3,9,6,1,-1,-6,10,-8,-10,8,-7,4,-5,8,-3,1,4,2,-9,7,-7,6,7,-8,6,8,6,-5,6,-7,4,7,-8,-8,-1,9,-8,-7,-9,-3,-2,10,5,-1,9,-2,-5,-10,7,2,-5,-9,-5,9,3,9,-2,-1,4,-10,9,-7,8,-9,-7,6,-1,-6,-1,-8,-6,-10,-8,7,-5,7,6,10,1,-2,10,4,-1,6,7,8,3,-4,-1,4,-8,9,5,2,9,-8,-10,-8,3,6,-10,-5,-4,-5,-10,2,10,-3,-3,4,-9,-10,-5,3,-4,9,-7,6,-3,-8,-8,2,6,-4,2,-2,10,-3,2,-2,7,10,-6,-5,7,-4,6,4,3,10,8,8,5,3,-9,4,4,10,-10,9,-10,4,-8,7,-8,9,-10,6,-10,3,-1,5,-10,-7,2,10,10,-8,-2,-2,-4,10,9,9,4,9,10,-3,1,-3,-10,2,6,-10,5,-3,-4,2,9,-5,5,10,-9,8,-7,-2,-5,-6,-6,-1,10,-9,9,10,-5,2,-8,-7,-5,7,-5,8,-3,3,1,-10,10,-7,-1,6,1,-7,-10,8,-9,-9,3,-6,-2,-8,3,-5,-9,9,-9,-5,-4,-3,-7,2,-5,-10,-8,9,-5,2,6,10,-10,-5,-5,3,-5,4,7,-5,6,-3,4,-4,-10,9,-6,1,-10,-6,7,6,6,-3,7,5,7,-8,3,-2,-10,9,1,-1,8,-6,7,-8,-2,-5,-9,2,10,7,-4,6,-1,10,-7,-3,-8,-10,10,9,-9,1,-5,-3,5,-10,-10,-4,1,3,5,-5,-2,10,-4,-4,-3,10,9,5,-3,6,-1,-4,-4,-2,-10,4,3,6,10,8,-6,-1,2,-3,-1,10,-9,6,-1,2,5,-5,-9,4,2,5,2,5,4,-3,-6,8,-9,-9,-3,4,-9,6,10,9,4,2,-10,4,-6,10,1,-7,4,-1,-9,5,-3,-7,-3,-7,-8,6,7,-5,-8,8,5,-10,-3,8,-7,1,-5,7,3,-6,-4,-3,2,-5,-3,10,10,8,2,-5,-8,10,-3,3,10,10,-2,4,-1,4,4,3,-3,-7,-7,-3,9,10,8,-9,-3,-2,-2,-10,-9,-6,-8,7,7,4,6,-1,-1,-6,-6,-9,6,5,10,-8,10,2,-2,-9,4,-5,3,5,8,-4,10,3,-5,-3,-6,3,-4,5,-3,7,2,-8,-7,-8,8,-7,-5,4,9,-4,8,-2,-2,10,-1,-5,-6,-7,-9,6,-9,6,5,6,7,10,9,8,7,7,3,-3,6,-2,7,2,2,1,-8,-1,7,10,1,5,6,-10,-7,-7,-4,-10,8,-8,10,10,-4,-4,-2,5,4,5,-6,-8,9,6,6,-6,-7,-9,-4,8,-7,9,9,-7,7,-3,-7,6,8,-9,9,3,10,5,-8,-1,7,6,-7,-1,5,7,-6,-7,-6,-1,4,1,5,-9,10,7,4,-3,8,-5,-9,6,5,2,-4,8,-6,-3,4,-3,5,-2,-7,10,-3,8,-7,-9,-10,6,3,-1,3,-1,7,5,-6,-3,-4,-8,-7,-10,3,-9,-8,6,-10,-2,2,-4,-9,-4,-6,6,7,-8,2,-9,5,7,-2,7,-3,-7,-2,7,9,-6,6,6,8,8,-10,-5,4,10,-9,1,6,7,8,9,5,4,-9,-5,-4,9,1,-1,-5,2,-8,6,-1,-1,-8,8,-8,-5,3,-6,-2,-1,8,-9,-2,9,-3,1,-7,-5,-3,-8,-5,9,-10,5,1,-6,-7,-4,-5,-7,5,4,-10,-6,-2,-3,-7,5,9,-1,5,9,-4,10,-3,10,5,-3,3,-6,-6,-3,3,-10,7,1,1,-5,3,6,10,-6,-2,-10,8,1,6,7,-10,-2,-8,-3,2,-6,1,3,-10,8,7,6,-5,1,10,1,-5,-9,7,-4,9,-4,-3,-6,5,2,2,-1,-6,-10,-2,-6,-5,2,8,1,-7,10,3,1,-9,-1,-5,-10,5,-5,1,4,8,-8,-1,4,5,5,7,5,3,7,-10,-6,6,-2,5,-3,-1,7,-1,9,4,-5,4,-7,7,2,10,2,1,3,9,9,8,-1,9,-6,-6,2,-10,-6], dtype = "uint16")#candidate|9805|(1728,)|const|uint16
call_9803 = relay.TupleGetItem(func_3253_call(relay.reshape(var_9804.astype('int8'), [8, 13, 6]), relay.reshape(const_9805.astype('uint16'), [2, 864]), relay.reshape(const_9805.astype('uint16'), [2, 864]), ), 0)
call_9806 = relay.TupleGetItem(func_3257_call(relay.reshape(var_9804.astype('int8'), [8, 13, 6]), relay.reshape(const_9805.astype('uint16'), [2, 864]), relay.reshape(const_9805.astype('uint16'), [2, 864]), ), 0)
func_6666_call = mod.get_global_var('func_6666')
func_6667_call = mutated_mod.get_global_var('func_6667')
call_9826 = func_6666_call()
call_9827 = func_6666_call()
func_7231_call = mod.get_global_var('func_7231')
func_7232_call = mutated_mod.get_global_var('func_7232')
call_9849 = relay.TupleGetItem(func_7231_call(), 0)
call_9850 = relay.TupleGetItem(func_7232_call(), 0)
const_9854 = relay.const([2,10,5,-5,1,5,-8,-3,-1,-5,1,5,7,-6,1,-4,-5,8,-2,-7,8,-4,4,5,-10,-2,-8,4,-2,-2,6,-5,2,3,6,-6,-3,3,8,1,-8,-10,9,-2,6,5,1,5,3,7,9,6,-2,9,8,-1,-4,-5,-4,-3,2,-6,-8,-6,10,-4,7,-3,10,-10,-2,5,1,-9,8,9,2,6,-8,-4,-8,-9,8,-3,-4,7,5,3,3,-4,6,4,1,-9,-2,5,-3,2,-8,10,-9,9,-10,-3,4,5,-1,7,8,-8,3,8,-10,5,-7,-2,-3,-2,3,7,1,7,-2,-3,-4,-9,-6,1,9,-8,5,3,-10,3,10,-3,6,4,-6,-6,-10,7,4,-6,6,-9,3,-10,-9,-8,-5,-2,1,-6,-5,-9,-1,-4,6,10,-3,4,-3,3,-7,2,2,-10,-10,-1,-3,1,-9,-9,-5,9,-7,8,-7,-1,1,-6,-7,-7,-7,3,1,1,1,6,-8,5,-8,-7,-1,-9,2,-7,-4,-8,-7,10,-9,9,-3,-5,10,8,1,2,4,8,1,-8,2,-7,-9,4,-9,5,7,-5,-9,4,-10,4,2,-1,7,-7,5,5,-10,-1,3,-3,5,-7,2,-4,10,6,10,-4,-9,6,-4,8,-4,-2,-5,7,-2,-4,-10,7,-8,3,-2,-7,-7,-7,-7,-4,5,8,-3,-2,1,-1,6,-2,-1,-4,-1,6,-7,-8,9,3,-2,-6,6,-1,-5,2,10,-8,1,6,5,10,8,-6,2,10,2,8,-5,-9,-1,2,4,-2,1,7,-3,-10,6,7,9,1,-5,-1,8,-1,-2,-10,-2,-3,2,9,-6,-8,8,10,5,9,10,2,-4,9,-5,-2,1,10,-5,1,-9,-6,6,-4,-7,3,-5,-9,10,-4,-5,4,4,-1,2,-2,3,-9,4,-10,-6,-2,9,-1,7,6,4,2,-3,-6,-7,7,8,10,9,5,-4,8,8,4,5,-9,-1,6,6,-10,-4,-4,5,4,-8,3,8,7,3,1,-5,-8,3,-10,-7,3,-9,6,5,-8,-1,-4,2,-2,5,4,8,-6,-5,-2,-7,6,4,-10,1,9,-10,-8,-6,-9,8,1,-3,-8,3,1,-7,-6,8,-9,3,-1,-2,-5,-3,-9,8,-6,-7,7,6,-10,8,3,1,7,1,6,8,4,-8,10,-5,4,3,-1,-3,10,-8,-7,7,4,-3,1,-6,3,-8,-9,-1,4,-8,3,-8,5,7,9,-8,-10,-5,-10,-8,6,-6,-8,2,1,6,3,6,-2,-10,7,-5,-8,-9,-3,1,-2,6,6,-1,10,-2,3,-1,-2,-7,-10,7,-3,6,3,7,6,7,-3,-10,6,-6,-1,8,-9,-4,7,6,-8,-8,-8,8,10,8,4,6,10,-10,8,-6,-3,5,10,4,2,10,-8,-5,-4,2,1,-7,-8,3,5,5,8,9,-1,-7,-6,-4,3,-3,-4,-4,-2,7,-10,-8,-8,4,-10,3,8,4,-6,6,-10,8,-3,1,5,-5,-6,9,-3,9,6,7,-3,5,1,-9,-2,7,1,-1,3,9,-9,3,-9,-7,6,8,5,7,7,-7,4,6,-1,2,-5,5,-9,-7,-3,-5,10,-6,-9,1,10,-6,-3,10,9,9,-2,9,-3,2,-3,-4,-2,-8,-3,8,-6,-8,7,2,-9,-2,-5,4,7,5,5,-3,-10,-8,7,-8,10,-3,-5,3,-7,-9,-5,-10,9,4,-7,-10,5,1,4,6,-9,-1,5,-10,-10,-5,-2,-1,2,-6,10,7,-2,9,10,-9,8,3,5,-6,-4,4,-5,8,8,-8,8,8,-4,7,6,-2,10,-8,9,-2,4,-9,-10,-10,-1,-1,-4,10,-5,3,-6,4,2,-1,-5,-4,-10,9,1,10,-10,10,7,-3,6,-4,2,-8,-1,5,-3,-8,-3,-5,-8,6,-6,-1,4,-7,-9,5,-10,-6,-4,-10,10,-2,-5,-9,9,-1,2,8,-6,-10,-6,8,8,9,-5,-8,5,1,-4,6,-8,10,1,-7,5,-3,2,6,-7,3,4,-10,1,10,6,3,-3,5,3,10,-1,8,8,5,-9,-9,2,-3,-3,-10,-10,-2,-10,-6,10,10,3,-5,3,6,10,6,-7,5,-3,10,2,6,-8,4,2,-9,3,4,8,10,5,10,-7,1,-3,-3,2,6,4,10,-3,1,-5,-4,4,10,1,1,-6,10,-3,4,-4,9,-10,6,-10,-3,-9,-7,-2,2,9,-1,-6,-6,-4,6,3,-6,4,10,8,-8,-10,-9,4,-4,-5,-9,8,1,6,-9,-5,-3,8,3,-5,-2,8,7,-5,6,-8,2,-10,7,2,-6,1,-6,-1,5,-1,-10,10,-10,8,8,1,-3,5,-9,-6,-6,4,-7,2,-2,-1,-2,10,10,8,-8,-8,-1,1,-9,-9,-3,8,10,4,-3,-4,7,-8,4,5,-6,2,-5,9,7,1,-3,-2,9,4,-4,-8,4,8,-2,9,5,5,-4,3,4,-3,-1,1,2,3,-4,7,-8,6,-9,8,-8,-3,9,4,-10,-2,4,2,-7,-2,-9,-8,7,5,-1,-9,5,-3,-9,-8,4,9,-1,3,-7,10,-7,3,4,-9,2,-6,-3,-1,-6,9,-9,7,1,-10,9,6,-8,-10,-8,9,-1,7,4,4,9,9,6,-9,-7,7,9,-2,4,-1,-2,-2,-5,-5,-9,8,-6,5,4,9,1,9,-1,10,4,-10,2,-7,3,6,5,-9,3,-3,5,10,9,-9,2,-8,1,-1,9,3,-2,-3,5,7,5,-4,-3,-6,6,3,-5,4,-6,-2,-5,-9,4,-3,6,-4,2,-1,4,7,5,8,8,7,-7,1,1,-8,-3,-1,-4,10,-7,-1,8,-1,-6,2,-2,-10,-5,-2,2,-1,-2,-6,9,2,-6,-7,1,-9,10,2,10,3,-4,2,-5,-3,-5,-5,6,10,-2,-8,6,3,9,-6,-9,2,3,1,9,9,4,8,-1,2,5,8,7,5,-9,5,-1,-1,-3,4,-8,-5,7,2,10,-3,4,-6,5,9,4,1,-10,-2,7,-4,1,7,1,-7,-3,-7,4,-10,-7,-4,-10,8,9,3,-8,-3,4,-6,-9,-9,-5,-1,-2,-9,-9,-3,10,-7,3,-7,6,-3,-9,-7,-4,-3,3,-8,-5,7,2,3,3,-2,-1,-9,-6,7,-1,-6,-3,4,2,-2,-10,1,6,3,3,6,-4,-10,9,-8,4,-7,-2,2,2,-3,2,4,7,9,-5,-5,-2,-9,-4,3,-10,6,3,6,-3,-10,2,-3,3,10,-7,-7,1,1,-5,-7,9,7,-3,-7,-9,-9,1,1,-4,-4,-7,1,10,-5,-10,-10,-8,-1,9,5,-7,10,-6,3,-9,2,-1,5,-9,-8,5,-8,-4,-3,-8,-10,3,-2,10,-3,-4,6,10,-7,-4,-7,-3,-1,3,2,2,-6,-4,6,-4,3,-3,-3,10,9,-5,2,-1,-6,5,-8,2,2,10,7,4,-2,-9,-10,-7,3,-5,-1,-8,-3,-7,-9,-4,-4,-8,10,3,1,-9,2,-1,-7,10,5,6,-10,-10,3,-2,8,-10,-6,-2,-6,9,6,-5,-6,-4,-2,10,5,-2,4,9,-6,2,-3,-10,-7,7,6,-10,-8,5,5,3,-5,-2,1,-1,-10,2,9,-2,-8,4,2,8,8,-9,9,7,-9,1,10,-10,6,4,1,-2,7,-2,-9,1,4,-2,-2,-6,-8,2,10,-10,1,2,2,-2,9,9,6,7,10,4,-8,4,9,8,7,8,2,1,-5,4,-6,-3,-3,-2,-2,6,7,8,5,9,-3,-9,8,-10,2,8,7,10,-4,6,1,5,-1,5,-10,7,1,10,-7,-2,-4,-6,-2,2,1,1,9,1,1,-7,10,6,-3,3,-5,-6,-5,-10,1,4,-10,-5,9,1,1,2,-6,-3,3,7,-10,8,7,4,-2,3,3,2,-3,-3,3,-6,-2,-7,4,4,9,9,2,6,-2,-5,-9,7,2,-8,5,-5,4,1,-8,-2,-7,-4,4,2,-1,3,5,-3,1,-1,7,5,-10,9,-1,4,2,6,10,-6,-4,10,-10,-4,6,9,-3,-7,1,10,9,-2,4,10,6,4,4,9,8,-9,3,2,-4,-9,-6,-9,-5,-7,10,2,1,8,-9,-3,2,-3,-10,1,3,1,2,-2,2,5,-7,10,2,-5,-6,-8,-10,5,4,-6,-9,6,-8,8,8,-1,-2,-2,10,-3,-8,9,2,10,10,-4,-4,10,-9,-1,4,3,-5,-10,4,3,6,4,6,5,1,-6,-10,-8,-5,-9,10,-6,-8,-2,-2,6,7,-6,-3,8,2,2,10,-2,-6,-5,2,-3,-10,3,-8,-9,-9,7,-6,10,10,-10,10,5,-3,-4,4,3,10,3,5,4,-7,-9,-9,2,9,-8,-4,-6,-7,-1,-8,4,-2,-8,1,2,7,2,10,-3,-6,9,8,-8,-6,4,7,3,-7,6,-5], dtype = "uint16")#candidate|9854|(1728,)|const|uint16
bop_9855 = relay.left_shift(const_9805.astype('uint16'), relay.reshape(const_9854.astype('uint16'), relay.shape_of(const_9805))) # shape=(1728,)
output = relay.Tuple([call_9784,call_9792,call_9799,const_9800,call_9803,var_9804,call_9826,call_9849,bop_9855,])
output2 = relay.Tuple([call_9785,call_9793,call_9801,const_9800,call_9806,var_9804,call_9827,call_9850,bop_9855,])
func_9882 = relay.Function([var_9804,], output)
mod['func_9882'] = func_9882
mod = relay.transform.InferType()(mod)
mutated_mod['func_9882'] = func_9882
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9883 = relay.var("var_9883", dtype = "int8", shape = (24, 26))#candidate|9883|(24, 26)|var|int8
func_9882_call = mutated_mod.get_global_var('func_9882')
call_9884 = func_9882_call(var_9883)
output = call_9884
func_9885 = relay.Function([var_9883], output)
mutated_mod['func_9885'] = func_9885
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7003_call = mod.get_global_var('func_7003')
func_7004_call = mutated_mod.get_global_var('func_7004')
call_9894 = func_7003_call()
call_9895 = func_7003_call()
output = call_9894
output2 = call_9895
func_9916 = relay.Function([], output)
mod['func_9916'] = func_9916
mod = relay.transform.InferType()(mod)
mutated_mod['func_9916'] = func_9916
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9916_call = mutated_mod.get_global_var('func_9916')
call_9917 = func_9916_call()
output = call_9917
func_9918 = relay.Function([], output)
mutated_mod['func_9918'] = func_9918
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9306_call = mod.get_global_var('func_9306')
func_9307_call = mutated_mod.get_global_var('func_9307')
call_9937 = func_9306_call()
call_9938 = func_9306_call()
func_8750_call = mod.get_global_var('func_8750')
func_8753_call = mutated_mod.get_global_var('func_8753')
var_9947 = relay.var("var_9947", dtype = "float32", shape = (2688,))#candidate|9947|(2688,)|var|float32
call_9946 = relay.TupleGetItem(func_8750_call(relay.reshape(var_9947.astype('float32'), [14, 12, 16])), 0)
call_9948 = relay.TupleGetItem(func_8753_call(relay.reshape(var_9947.astype('float32'), [14, 12, 16])), 0)
output = relay.Tuple([call_9937,call_9946,var_9947,])
output2 = relay.Tuple([call_9938,call_9948,var_9947,])
func_9961 = relay.Function([var_9947,], output)
mod['func_9961'] = func_9961
mod = relay.transform.InferType()(mod)
mutated_mod['func_9961'] = func_9961
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9962 = relay.var("var_9962", dtype = "float32", shape = (2688,))#candidate|9962|(2688,)|var|float32
func_9961_call = mutated_mod.get_global_var('func_9961')
call_9963 = func_9961_call(var_9962)
output = call_9963
func_9964 = relay.Function([var_9962], output)
mutated_mod['func_9964'] = func_9964
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4677_call = mod.get_global_var('func_4677')
func_4678_call = mutated_mod.get_global_var('func_4678')
call_9982 = relay.TupleGetItem(func_4677_call(), 0)
call_9983 = relay.TupleGetItem(func_4678_call(), 0)
output = call_9982
output2 = call_9983
func_9992 = relay.Function([], output)
mod['func_9992'] = func_9992
mod = relay.transform.InferType()(mod)
output = func_9992()
func_9993 = relay.Function([], output)
mutated_mod['func_9993'] = func_9993
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5987_call = mod.get_global_var('func_5987')
func_5989_call = mutated_mod.get_global_var('func_5989')
call_10005 = relay.TupleGetItem(func_5987_call(), 0)
call_10006 = relay.TupleGetItem(func_5989_call(), 0)
func_6455_call = mod.get_global_var('func_6455')
func_6457_call = mutated_mod.get_global_var('func_6457')
const_10008 = relay.const([5.308585,3.592922,0.959717,-4.017327,-6.108717,2.096089,-2.555808,5.907930,-0.203866,-2.912177,3.985877,4.592005,-7.879860,-2.971446,4.364845,-1.679034,8.839490,6.812402,1.128888,-9.114027,-1.145994,-1.529964,-3.914114,-1.524306,-5.594544,-5.920979,8.965956,-7.596315,-4.948031,-4.430644,1.522546,-0.634708,-5.241235,3.882584,-9.528234,7.509065,5.915308,6.344559,-6.365445,-4.788970,-4.104722,-5.851653,-8.317053,2.517145,9.356833,-2.106121,-1.980742,7.120508,-9.030843,5.772077,3.624502,6.541173,-3.409259,-8.371184,2.560101,2.411397,5.703922,3.533483,-2.457071,1.787018,-4.981926,-2.597585,-2.038418,9.300249,-8.904070,3.211434,-0.271984,-7.075190,-0.816736,5.881560,-1.833518,5.567503,-9.305468,5.643383,-9.370666,-8.292759,9.314513,3.710944,2.277021,-1.501589,6.059798,6.298191,3.140924,-4.535939,-6.606835,5.365458,-4.692090,5.780761,6.596025,-1.044257,5.106367,7.850919,5.703729,-3.634314,8.759288,1.404837,5.301429,-7.959759,-5.841946,-5.773741,-2.885659,9.833996,-2.998465,7.389834,-9.250600,1.729079,9.852291,-0.684800,-1.804925,4.994719,0.636425,-5.530729,6.233679,0.003035,-1.672529,-6.633769,8.483926,8.825808,-1.829068,-2.112293,-0.796307,-7.356260,-8.663611,3.203307,-1.430981,-9.045389,7.955096,-3.094615,-0.443695,-4.380479,4.890598,1.828031,6.654505,-0.608962,-4.018754,-4.598891,0.935518,-0.433786,3.114181,-0.531938,-6.009233,5.491781,5.882680,-3.502940,-6.086064,-0.807906,6.000199,-8.365143,5.967799,3.100031,7.818172,-4.270271,-8.569941,-4.404864,-6.617390,2.634348,-1.385687,-6.829890,-6.815520,1.297039,-2.368262,-1.885444,2.933842,-8.747149,-4.037471,-0.463974,6.724259,-5.358096,7.058440,6.493036,5.801606,-7.477417,9.413317,9.722132,9.690058,-2.474423,0.902042,-0.379314,-6.538815,1.560596,-7.648122,-8.011665,-8.262105,3.390959,-1.027460,-3.951674,-1.203332,7.143160,5.161201,8.965864,0.836612,-7.100869,1.150024,0.301714,8.776263,-8.603970,9.350482,9.491292,4.603940,1.510377,3.554298,7.143878,7.473271,-8.281332,4.743744,4.993280,6.730709,7.096456,-7.544835,-2.584301,8.423611,9.585273,-1.352084,4.663557,-0.656558,9.579583,-3.991071,0.309644,0.885826,-7.183076,4.230866,6.107752,-8.614180,2.288214,2.484285,-5.751745,-6.327240,7.456480,8.532366,-6.965929,-1.651253,3.983923,-8.636121,-6.396194,-5.346489,8.123331,-3.003187,9.593434,5.980193,-7.011836,-8.899985,-0.500583,-9.101243,5.107431,-0.988273,7.749620,3.870720,1.583440,7.207615,2.356726,-7.885729,-3.322415,6.294653,9.720633,-9.938893,-5.147036,5.686511,-4.891807,-8.452050,6.883849,1.962476,1.616361,1.804859,3.466480,-2.603029,7.634504,7.777291,-5.467681,3.168498,9.756444,4.242868,-1.819852,-3.979375,-1.219983,4.012190,8.558818,5.583739,6.999418,1.196468,1.226924,-7.745420,0.351041,-0.877825,-7.447198,4.416370,-6.215900,8.622536,5.982491,1.669629,8.925173,8.106646,4.616174,0.435141,-9.312292,0.236156,9.972910,-2.415439,4.292787,-4.079566,-0.520405,-7.908448,-1.202927,2.942761,5.275381,0.356927,0.507079,-9.867381,7.797077,-0.177830,-9.648829,-0.438315,7.318920,-5.438480,9.209609,-4.618172,6.894391,-3.906963,2.746526,5.979215,-3.297204,5.396811,-1.578045,4.173707,2.473865,9.558002,3.343573,2.576914,-6.479143,-7.215623,-8.758574,7.217645,5.646414,4.216933,0.452185,1.985283,-5.432002,-1.491657,-9.566388,-6.367252,9.745767,-9.767498,4.111251,9.451868,3.384880,-9.994650,-2.740109,9.731439,4.980103,-1.332362,-8.077124,8.826563,-4.284792,9.153063,3.706730,1.885273,1.975652,5.372153,6.181553,-0.707475,-0.122043,5.685171,-0.568334,-0.182987,8.166598,-8.150568,0.012490,-0.774706,2.388246,-9.427660,-8.601995,0.550034,5.567131,-2.525453,9.403633,-0.356981,4.240515,3.259781,-4.169332,-2.749366,-7.583518,1.497368,-0.056003,-0.781449,2.688688,-8.833906,-4.321014,3.719730,-4.899143,-5.003226,-7.950449,-9.744445,-3.097621,1.088734,3.887686,6.673447,7.243663,5.373725,-9.209842,0.939069,3.641626,2.194482,-2.651890,3.527688,2.602862,-8.492152,-2.330123,5.852867,-1.452471,-1.436306,-8.948426,-2.318536,-1.602621,8.141317,4.709154,8.502978,-1.754359,-0.037503,5.406550,-1.626432,4.793658,0.549228,6.093060,8.844810,2.685911,2.675851,5.776100,1.331650,-7.427644,-9.438942,-1.791470,-0.322115,3.349773,5.559185,-2.634254,2.336574,-1.888452,-9.869874,4.981733,-5.488136,6.526549,2.894716,8.099918,-0.224621,3.702275,5.538808,-2.691800,6.941470,-7.453714,0.995902,-5.331944,-5.180599,1.391863,-3.635704,-6.038565,3.208747,-4.741987,-4.231428,-7.958551,1.359000,-8.395176,9.315885,-3.872493,-5.160683,8.345839,-0.581343,-2.529007,-2.326874,7.528299,-5.651515,8.491630,4.007462,-3.495948,9.691188,-2.485437,7.214109,6.574955,-5.791158,6.024297,-2.078234,-7.777947,-2.857502,-1.490355,-2.308637,8.681567,0.350652,-1.910665,-8.351256,7.206813,0.637591,5.896736,-8.070897,3.211116,-1.131338,7.424058,1.677177,4.457171,-2.098980,4.967477,9.898133,0.896594,9.828668,0.786803,7.792982,-4.294145,6.343988,4.115284,-4.023717,-6.924341,8.438566,-9.814948,5.944691,-3.246420,2.673074,-7.685985,-8.592090,6.234513,0.748428,4.247713,4.796850,-7.968919,6.619471,-7.898181,-2.560820,0.554428,-8.942751,4.452391,7.403200,3.220967,1.585774,-8.311001,-5.906651,8.673706,-5.494261,-2.927768,-4.672300,-9.330445,-8.087407,-5.967321,6.581204,-8.181554,3.063605,7.109027,9.558669,3.613231,-8.542987,-4.679613,9.513896,0.178513,-6.148040,-5.333832,-2.213171,7.395518,3.410153,0.755242,4.184987,9.630705,7.143439,5.595793,1.653335,1.897693,-9.446629,-3.152505,-7.125890,-0.438706,8.265196,4.399850,0.885773,-3.299545,-7.615573,-7.058978,2.795466,-1.848106,-7.820911,7.467906,-2.095172,-8.862856,-8.806322,2.114713,-4.643703,-2.105469,-9.809262,5.327181,-6.075001,-6.387389,6.851324,-8.417148,-7.883170,-3.297103,-3.914710,4.460832,-3.625965,-4.237401,-3.619945,8.264341,4.402672,7.660328,-4.706349,7.025512,-1.292906,8.703189,-1.877731,0.780398,3.484423,-8.391331,9.906670,-4.459699,0.263496,8.723296,-1.227804,-6.943478,-7.638225,4.325954,-3.986300,6.511704,7.514532,-5.746702,-5.252287,-8.180720,1.935316,6.861642,-4.607688,4.934308,-4.797640,-4.566708,9.800031,-4.116034,-4.478152,-4.153306,9.816696,9.912633,2.487030,-6.698981,9.980005,2.671379,8.219805,-1.709071,-2.050143,7.849420,-2.431238,-2.299377,-9.372133,2.347233,-3.728845,3.423989,2.611043,-4.681359,8.021676,-1.092187,-5.900320,2.331945,-6.413645,7.581776,5.540501,-9.385950,-5.753414,-4.246846,9.410015,7.915087,0.065005,8.818602,-6.975303,3.189651,5.788776,-5.601714,0.459098,9.736919,6.503573,1.604953,-8.180913,-8.586971,-7.678652,4.514532], dtype = "float64")#candidate|10008|(672,)|const|float64
call_10007 = relay.TupleGetItem(func_6455_call(relay.reshape(const_10008.astype('float64'), [672,])), 4)
call_10009 = relay.TupleGetItem(func_6457_call(relay.reshape(const_10008.astype('float64'), [672,])), 4)
output = relay.Tuple([call_10005,call_10007,const_10008,])
output2 = relay.Tuple([call_10006,call_10009,const_10008,])
func_10028 = relay.Function([], output)
mod['func_10028'] = func_10028
mod = relay.transform.InferType()(mod)
mutated_mod['func_10028'] = func_10028
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10028_call = mutated_mod.get_global_var('func_10028')
call_10029 = func_10028_call()
output = call_10029
func_10030 = relay.Function([], output)
mutated_mod['func_10030'] = func_10030
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9667_call = mod.get_global_var('func_9667')
func_9668_call = mutated_mod.get_global_var('func_9668')
call_10065 = relay.TupleGetItem(func_9667_call(), 0)
call_10066 = relay.TupleGetItem(func_9668_call(), 0)
func_2853_call = mod.get_global_var('func_2853')
func_2859_call = mutated_mod.get_global_var('func_2859')
var_10072 = relay.var("var_10072", dtype = "float32", shape = (880,))#candidate|10072|(880,)|var|float32
var_10073 = relay.var("var_10073", dtype = "float64", shape = (2160,))#candidate|10073|(2160,)|var|float64
const_10074 = relay.const([[False,False,False],[False,False,True],[False,False,False],[False,False,False],[False,False,False],[True,False,True],[False,True,True],[True,False,False],[False,True,False],[True,True,True],[True,True,True],[True,True,True],[False,True,True],[False,False,True],[True,False,True],[True,False,True],[False,False,True],[True,True,True],[False,True,False],[False,False,True],[True,True,False],[False,False,False],[True,False,True],[True,True,True],[False,False,False],[False,True,False],[True,False,False],[False,True,True],[True,True,False],[True,True,False],[False,False,True],[True,False,True],[True,False,True],[False,True,False],[False,True,False],[False,True,False],[False,True,False],[False,True,True],[True,True,True],[True,False,False],[True,True,True],[False,False,True],[True,True,True],[False,True,False],[True,True,False],[True,True,True],[True,True,False],[True,True,False],[True,False,True],[False,True,True],[False,False,False],[True,False,False],[True,True,True],[False,False,True],[True,True,False],[True,False,False],[False,False,True],[True,True,True],[True,False,True],[False,False,True],[True,True,True],[False,False,False],[False,True,True],[False,False,True],[True,True,False],[True,False,True],[True,False,True],[True,True,False],[False,False,True],[True,False,True],[False,False,False],[False,False,True],[False,False,False],[True,False,False],[True,True,True],[True,True,True],[False,False,False],[True,True,True],[False,True,False],[True,True,False],[False,True,False],[True,True,False],[False,True,True],[False,True,True],[True,False,True],[False,True,False],[False,False,False],[False,True,False],[True,True,True],[True,False,False],[False,True,False],[False,False,True],[True,False,True],[False,False,False],[True,True,False],[False,False,True],[False,False,True],[True,False,True],[True,True,False],[False,True,True],[True,True,False],[True,True,False],[False,False,False],[True,False,False],[True,False,False],[True,False,False],[True,True,False],[False,False,False],[True,True,True],[False,True,False],[True,False,True],[True,True,True],[True,False,True],[True,True,False],[True,True,False],[True,False,False],[True,True,True],[True,False,True],[True,True,False],[True,True,False],[True,False,False],[True,True,False],[False,False,False],[True,True,True],[True,True,False],[True,False,True],[False,False,False],[True,True,False],[True,True,False],[True,False,True],[True,True,False],[False,False,True],[False,False,False],[False,False,True],[True,True,False],[False,True,True],[True,True,True],[True,False,False],[False,True,True],[False,True,True],[True,False,True],[True,False,True],[True,False,False],[True,False,False],[False,False,True],[True,False,False],[False,True,True],[True,False,False],[True,False,True],[True,False,False],[False,False,True],[True,True,True],[True,False,False],[True,True,False],[True,False,False],[False,True,False],[True,True,True],[False,False,False],[False,True,False],[False,False,True],[False,True,True],[True,False,False],[True,True,True],[True,False,False],[True,True,False],[False,False,True],[False,True,False],[False,True,False],[False,False,False],[False,False,False],[True,False,True],[False,False,False],[True,True,True],[False,False,False],[False,True,True],[True,True,True],[False,False,False],[True,False,False],[True,False,False],[True,False,False],[False,False,False],[True,False,False],[True,True,True],[True,True,True],[True,False,True],[False,True,False],[False,True,False],[False,False,False],[False,False,False],[False,True,True],[False,True,True],[True,True,True],[True,False,True],[True,True,False],[False,False,False],[True,True,True],[False,True,True],[False,True,True],[True,False,True],[True,False,True],[False,True,False],[True,False,True],[True,True,False],[False,False,True],[False,True,False],[True,False,True],[False,False,False],[True,True,True],[True,False,True],[False,True,False],[True,False,True],[False,True,True],[True,False,False],[True,False,True],[True,True,False],[True,False,False],[False,False,True],[False,False,False],[True,True,False],[True,True,True],[True,True,True],[False,True,True],[True,False,True],[True,False,False],[False,True,True],[False,False,True],[True,False,True],[False,False,True],[False,True,False],[False,False,False],[True,True,True],[True,True,False],[False,False,False],[True,False,False],[True,False,True],[False,True,True],[True,False,True],[True,False,True],[False,False,True],[True,False,True],[True,True,True],[False,False,False],[False,False,True],[False,False,True],[True,True,True],[False,False,False],[False,True,False],[True,False,False],[True,True,False],[False,False,False],[True,True,False],[False,True,False],[True,True,True],[False,True,True],[True,False,False],[False,True,False],[True,True,False],[True,False,False],[False,True,True],[False,True,True],[True,True,False],[True,True,True],[True,False,False],[False,False,False],[True,True,False],[False,False,True],[False,True,False],[False,False,True],[True,False,False],[False,True,False],[False,False,True],[False,True,False],[False,False,True],[False,True,True],[False,False,True],[True,False,True],[False,True,False],[True,True,False],[False,False,True],[False,True,False],[False,True,False],[True,True,True],[False,True,True],[True,False,False],[False,False,True],[True,True,True],[False,False,False],[False,True,False],[True,True,False],[False,True,True],[False,False,False],[False,True,False],[True,True,True],[False,False,True],[True,True,False],[False,False,True],[True,True,True],[False,True,False],[False,False,True],[False,False,True],[False,False,True],[False,False,False],[False,True,False],[False,False,False],[True,True,True],[True,True,False],[True,False,True],[False,False,False],[True,False,True],[False,True,True],[True,True,False],[False,True,False],[True,False,False],[True,False,False],[True,True,True],[True,True,False],[True,False,False],[False,False,True],[False,True,True],[True,False,False],[True,True,True],[True,False,True],[True,True,True],[True,False,True],[True,True,False],[False,False,True],[False,True,True],[True,True,False],[False,False,True],[True,True,True],[False,False,True],[True,True,True],[False,True,False],[True,False,False],[False,False,True],[True,False,False],[False,True,True],[False,False,True],[False,False,True],[True,True,False],[True,True,True],[False,True,False],[True,True,True],[True,True,False],[True,True,False],[False,False,False],[False,True,True],[False,True,True],[True,True,True],[False,False,True],[False,True,False],[True,True,True],[False,False,True],[True,True,False],[True,False,True],[True,True,False],[False,True,True],[True,True,False],[True,False,True],[False,False,True],[True,True,True],[False,False,False],[True,False,True],[False,False,False],[False,True,True],[False,True,False],[False,True,True],[True,False,True],[True,True,True],[False,False,False],[True,True,True],[False,True,True],[True,True,False],[False,True,False],[False,False,True],[True,False,False],[True,False,True],[True,True,False],[False,False,True],[True,False,True],[True,True,True],[False,False,False],[False,True,True],[False,True,True],[False,True,True],[True,True,True],[False,False,True],[True,True,False],[True,True,False],[True,True,False],[False,False,True],[True,True,True],[False,True,False],[True,True,True],[False,True,True],[True,False,False],[False,False,False],[True,False,False],[True,True,True],[True,False,False],[True,True,True],[True,False,False],[False,False,True],[True,False,False],[False,False,True],[True,False,True],[True,False,False],[False,False,False],[False,True,True],[True,True,False],[False,False,True],[True,True,True],[True,False,False],[False,True,False],[False,True,False],[True,True,False],[False,False,True],[False,False,True],[False,False,False],[False,False,True],[False,False,False],[True,True,True],[False,False,True],[False,False,False],[False,False,False],[True,True,True],[True,True,True],[False,False,False],[True,False,False],[False,False,False],[True,False,False],[True,True,True],[True,False,True],[False,False,True],[True,True,True],[True,False,False],[False,True,False],[True,False,False],[True,True,False],[False,True,True],[False,True,True],[True,False,True],[False,True,True],[False,False,True],[True,True,False],[True,False,False],[True,False,False],[True,True,False],[True,True,True],[False,True,True],[True,True,False],[False,False,False],[True,True,False],[False,True,False],[False,False,True],[False,True,True],[True,True,True],[True,False,False],[True,False,True],[False,False,False],[True,True,False],[True,True,False],[False,True,True],[False,True,False],[False,True,True],[True,False,False],[False,True,True],[True,False,False],[True,True,False],[True,True,False],[True,True,True],[True,False,False],[False,False,True],[True,False,True],[False,False,False],[True,True,False],[True,True,True],[True,False,True],[True,False,False],[True,True,False],[True,False,True],[False,False,True],[False,False,False],[False,True,False],[True,True,True],[True,False,False],[False,False,False],[True,True,False],[True,False,False],[True,True,True],[True,False,False],[False,False,False],[False,False,False],[False,False,True],[False,True,True],[True,True,True],[False,True,True],[False,False,False],[False,True,False],[True,True,True],[False,False,True],[False,True,True],[False,True,False],[False,True,False],[False,True,False],[True,True,True],[False,True,False],[False,True,False],[False,True,False],[True,False,True],[False,True,True],[False,True,False],[True,False,True],[True,False,False],[False,False,False],[False,True,True],[True,False,False],[True,False,True],[True,False,False],[True,True,True],[False,False,False],[False,False,True],[False,True,True],[False,True,False],[False,True,False],[False,True,False],[True,False,False],[True,True,False],[False,False,False],[True,False,False],[False,False,False],[False,False,False],[True,True,True],[True,True,False],[True,True,True],[True,False,False],[True,True,False],[True,True,True],[True,True,False],[False,False,False],[False,False,False],[False,False,True],[False,False,False],[True,True,True],[False,False,False],[True,True,False],[False,True,False],[False,False,True],[False,False,False],[False,False,True],[False,False,True],[False,False,False],[True,False,False],[True,True,True],[False,True,True],[True,True,False],[True,True,True],[True,True,False],[False,True,False],[True,True,False],[False,True,False],[True,False,False],[True,True,False],[True,True,True],[False,True,True],[True,False,False],[False,False,True],[True,True,False],[True,False,False],[True,True,True],[True,True,True],[True,False,True],[True,False,False],[True,True,True],[True,False,True],[False,True,True],[False,True,True],[True,True,True],[True,False,True],[True,False,False],[True,True,True],[False,True,True],[True,False,True],[True,False,True],[True,True,True],[False,True,False],[True,True,False],[True,False,True],[False,True,True],[True,True,True],[True,False,True],[False,False,False],[True,True,False],[True,False,False],[False,True,True],[True,True,False],[True,True,True],[True,False,True],[False,False,True],[False,True,False],[True,False,False],[False,False,False],[False,True,True],[True,False,True],[True,False,True],[True,True,False],[True,True,True],[True,False,True],[False,True,True],[True,True,False],[True,False,False],[True,True,False],[True,True,False],[False,False,False],[False,False,True],[True,True,False],[True,False,True],[True,True,False],[False,False,True],[False,True,False],[False,True,False],[True,False,True],[True,False,True],[True,False,True],[False,False,True],[True,True,False],[True,True,True],[True,False,False],[True,False,False],[False,False,False],[False,True,True],[False,False,True],[False,True,True],[True,True,False],[False,True,False],[False,False,False],[False,True,True],[True,False,True],[False,True,True],[False,True,False],[False,True,True],[True,False,True],[True,False,False],[False,True,True],[False,True,False],[True,True,False],[True,False,False],[False,True,False],[True,True,False],[False,False,True],[False,False,True],[True,False,True],[False,True,True],[True,True,False],[False,False,True],[True,True,True],[True,False,True],[True,False,False],[False,True,False],[False,True,False],[True,False,False],[False,True,False],[True,False,True],[False,True,True],[False,True,True],[False,False,False],[True,False,False],[False,True,False],[False,True,True],[False,True,False],[False,True,False],[True,True,False],[True,True,False],[True,True,True],[False,False,False],[True,False,True],[True,True,True],[True,True,False],[True,True,False],[False,False,True],[False,False,False],[True,True,False],[True,True,True],[True,False,False],[False,False,False],[False,True,False],[True,False,True],[False,True,False],[True,False,False],[True,False,False],[False,False,False],[True,True,False],[True,False,True],[False,True,True],[False,True,True],[True,False,False],[True,True,False],[True,False,True],[True,True,True],[True,False,True],[True,False,True],[False,True,True],[False,False,True],[True,False,True],[False,True,False],[True,False,False],[True,True,False],[True,False,False],[False,False,True],[True,True,True],[False,True,True],[True,True,True],[False,True,True],[False,False,False],[True,False,True],[True,True,True],[False,False,False],[False,True,True],[False,True,True],[True,False,False],[False,False,True],[True,True,False],[False,False,True],[False,False,True],[False,True,True],[True,False,False],[False,False,False],[False,False,True],[True,False,False],[False,True,False],[True,True,False],[False,True,False],[True,True,False],[False,True,False],[False,True,True],[True,False,True],[False,False,False],[False,True,False],[False,False,True],[False,True,False],[True,False,False],[True,False,True],[True,True,False],[True,False,False],[True,False,True],[False,True,False],[False,True,False],[False,False,True],[False,False,False],[True,False,True],[False,True,True],[False,True,True],[True,False,True],[True,False,True],[True,True,True],[True,False,False],[True,False,False],[True,False,False],[True,False,False],[True,False,False],[False,False,False],[True,False,True],[False,True,True],[True,False,True],[False,False,True],[True,True,True],[False,False,True],[False,True,True],[False,False,True],[False,True,True],[False,True,True],[False,False,True],[True,True,False],[True,False,True],[False,True,True],[True,False,False],[False,False,False],[True,False,True],[False,False,False],[False,False,True],[True,True,True],[True,True,True],[False,True,False],[True,False,True],[False,False,False],[True,False,False],[True,False,True],[True,False,True],[False,False,False],[False,False,False],[False,False,True],[True,True,True],[False,True,False],[True,False,False],[False,False,False],[False,True,False],[False,False,True],[True,True,True],[True,False,True],[True,False,False],[True,False,False],[True,True,True],[False,False,False],[False,True,True],[False,True,True],[False,True,True],[True,True,True],[False,True,True],[True,False,True],[False,True,True],[False,False,False],[False,True,True],[True,True,True],[False,True,False],[True,True,True],[False,False,False],[True,True,False],[True,True,True],[False,False,True],[True,False,False],[False,True,False],[False,True,False],[False,True,True],[True,True,True],[False,False,False],[True,False,False],[False,False,True],[False,True,False],[True,True,False],[False,False,True],[False,False,False],[False,True,True],[False,True,False],[False,False,True],[True,False,True],[True,False,False],[False,False,False],[True,False,True],[False,True,False],[False,True,False],[True,True,False],[True,True,True],[True,False,False],[True,False,True],[True,True,True],[False,False,True],[False,False,True],[False,False,True],[True,False,False],[True,False,True],[True,False,False],[False,True,False],[True,False,False],[False,False,False],[True,True,True],[False,True,True],[False,False,False],[True,False,False],[True,False,False],[True,True,False],[True,True,False],[True,True,False],[True,False,False],[True,False,False],[True,True,True],[False,False,True],[False,False,True],[False,True,True],[False,False,True],[False,False,True],[False,True,False],[True,False,True],[True,False,True],[True,True,False],[False,True,True],[True,True,True],[False,True,True],[True,True,True],[True,True,True],[False,True,True],[True,False,False],[True,True,True],[False,False,True],[False,True,False],[False,True,True],[True,True,True],[True,True,False],[False,True,False],[True,False,True],[True,False,True],[False,False,True],[True,True,False],[False,False,False],[True,False,True],[True,False,True],[True,True,False],[False,False,True],[False,True,False],[False,False,False],[False,True,True],[True,False,True],[False,True,False],[False,True,False],[False,False,False],[True,True,False],[False,False,False],[False,False,False],[False,True,True],[False,True,False],[True,True,True]], dtype = "bool")#candidate|10074|(910, 3)|const|bool
const_10075 = relay.const([-2.099544,-8.752339,2.273462,3.002127,-7.271788,2.683587,-5.438444,2.181811,5.212774,-4.889339,7.253938,7.832393,-5.076081,-9.041507,9.792751,-7.134192,-7.221032,-2.414374,7.119262,-8.133253,-3.905619,-8.205510,-2.987689,-6.106146,9.473917,-5.723061,6.176421,6.921945,7.216680,9.010663,5.530803,4.167382,-7.415948,-7.707836,3.841015,-4.544805,-5.962673,3.195384,-8.071548,7.316402,-9.449756,-9.535657,5.424480,7.905933,0.955591,8.897743,7.085745,-1.163996,-0.338060,5.856206,-8.931793,6.297666,-2.133886,5.105648,9.709116,-1.463722,-7.204687,8.832094,-4.071463,-8.117505], dtype = "float64")#candidate|10075|(60,)|const|float64
call_10071 = relay.TupleGetItem(func_2853_call(relay.reshape(var_10072.astype('float32'), [16, 5, 11]), relay.reshape(var_10072.astype('float32'), [16, 5, 11]), relay.reshape(var_10073.astype('float64'), [2160,]), relay.reshape(const_10074.astype('bool'), [2730,]), relay.reshape(const_10075.astype('float64'), [60,]), ), 2)
call_10076 = relay.TupleGetItem(func_2859_call(relay.reshape(var_10072.astype('float32'), [16, 5, 11]), relay.reshape(var_10072.astype('float32'), [16, 5, 11]), relay.reshape(var_10073.astype('float64'), [2160,]), relay.reshape(const_10074.astype('bool'), [2730,]), relay.reshape(const_10075.astype('float64'), [60,]), ), 2)
output = relay.Tuple([call_10065,call_10071,var_10072,var_10073,const_10074,const_10075,])
output2 = relay.Tuple([call_10066,call_10076,var_10072,var_10073,const_10074,const_10075,])
func_10092 = relay.Function([var_10072,var_10073,], output)
mod['func_10092'] = func_10092
mod = relay.transform.InferType()(mod)
var_10093 = relay.var("var_10093", dtype = "float32", shape = (880,))#candidate|10093|(880,)|var|float32
var_10094 = relay.var("var_10094", dtype = "float64", shape = (2160,))#candidate|10094|(2160,)|var|float64
output = func_10092(var_10093,var_10094,)
func_10095 = relay.Function([var_10093,var_10094,], output)
mutated_mod['func_10095'] = func_10095
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7488_call = mod.get_global_var('func_7488')
func_7489_call = mutated_mod.get_global_var('func_7489')
call_10137 = relay.TupleGetItem(func_7488_call(), 5)
call_10138 = relay.TupleGetItem(func_7489_call(), 5)
output = call_10137
output2 = call_10138
func_10142 = relay.Function([], output)
mod['func_10142'] = func_10142
mod = relay.transform.InferType()(mod)
mutated_mod['func_10142'] = func_10142
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10142_call = mutated_mod.get_global_var('func_10142')
call_10143 = func_10142_call()
output = call_10143
func_10144 = relay.Function([], output)
mutated_mod['func_10144'] = func_10144
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6854_call = mod.get_global_var('func_6854')
func_6856_call = mutated_mod.get_global_var('func_6856')
call_10171 = func_6854_call()
call_10172 = func_6854_call()
output = relay.Tuple([call_10171,])
output2 = relay.Tuple([call_10172,])
func_10174 = relay.Function([], output)
mod['func_10174'] = func_10174
mod = relay.transform.InferType()(mod)
output = func_10174()
func_10175 = relay.Function([], output)
mutated_mod['func_10175'] = func_10175
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9333_call = mod.get_global_var('func_9333')
func_9335_call = mutated_mod.get_global_var('func_9335')
call_10209 = relay.TupleGetItem(func_9333_call(), 0)
call_10210 = relay.TupleGetItem(func_9335_call(), 0)
func_6292_call = mod.get_global_var('func_6292')
func_6295_call = mutated_mod.get_global_var('func_6295')
var_10219 = relay.var("var_10219", dtype = "float64", shape = ())#candidate|10219|()|var|float64
call_10218 = relay.TupleGetItem(func_6292_call(relay.reshape(var_10219.astype('float64'), [])), 2)
call_10220 = relay.TupleGetItem(func_6295_call(relay.reshape(var_10219.astype('float64'), [])), 2)
output = relay.Tuple([call_10209,call_10218,var_10219,])
output2 = relay.Tuple([call_10210,call_10220,var_10219,])
func_10255 = relay.Function([var_10219,], output)
mod['func_10255'] = func_10255
mod = relay.transform.InferType()(mod)
var_10256 = relay.var("var_10256", dtype = "float64", shape = ())#candidate|10256|()|var|float64
output = func_10255(var_10256)
func_10257 = relay.Function([var_10256], output)
mutated_mod['func_10257'] = func_10257
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9916_call = mod.get_global_var('func_9916')
func_9918_call = mutated_mod.get_global_var('func_9918')
call_10324 = func_9916_call()
call_10325 = func_9916_call()
func_6912_call = mod.get_global_var('func_6912')
func_6914_call = mutated_mod.get_global_var('func_6914')
call_10345 = func_6912_call()
call_10346 = func_6912_call()
output = relay.Tuple([call_10324,call_10345,])
output2 = relay.Tuple([call_10325,call_10346,])
func_10354 = relay.Function([], output)
mod['func_10354'] = func_10354
mod = relay.transform.InferType()(mod)
output = func_10354()
func_10355 = relay.Function([], output)
mutated_mod['func_10355'] = func_10355
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10028_call = mod.get_global_var('func_10028')
func_10030_call = mutated_mod.get_global_var('func_10030')
call_10392 = relay.TupleGetItem(func_10028_call(), 0)
call_10393 = relay.TupleGetItem(func_10030_call(), 0)
func_6455_call = mod.get_global_var('func_6455')
func_6457_call = mutated_mod.get_global_var('func_6457')
var_10395 = relay.var("var_10395", dtype = "float64", shape = (672,))#candidate|10395|(672,)|var|float64
call_10394 = relay.TupleGetItem(func_6455_call(relay.reshape(var_10395.astype('float64'), [672,])), 1)
call_10396 = relay.TupleGetItem(func_6457_call(relay.reshape(var_10395.astype('float64'), [672,])), 1)
func_7372_call = mod.get_global_var('func_7372')
func_7373_call = mutated_mod.get_global_var('func_7373')
call_10402 = relay.TupleGetItem(func_7372_call(), 0)
call_10403 = relay.TupleGetItem(func_7373_call(), 0)
output = relay.Tuple([call_10392,call_10394,var_10395,call_10402,])
output2 = relay.Tuple([call_10393,call_10396,var_10395,call_10403,])
func_10406 = relay.Function([var_10395,], output)
mod['func_10406'] = func_10406
mod = relay.transform.InferType()(mod)
mutated_mod['func_10406'] = func_10406
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10407 = relay.var("var_10407", dtype = "float64", shape = (672,))#candidate|10407|(672,)|var|float64
func_10406_call = mutated_mod.get_global_var('func_10406')
call_10408 = func_10406_call(var_10407)
output = call_10408
func_10409 = relay.Function([var_10407], output)
mutated_mod['func_10409'] = func_10409
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7003_call = mod.get_global_var('func_7003')
func_7004_call = mutated_mod.get_global_var('func_7004')
call_10617 = func_7003_call()
call_10618 = func_7003_call()
func_9724_call = mod.get_global_var('func_9724')
func_9726_call = mutated_mod.get_global_var('func_9726')
call_10623 = relay.TupleGetItem(func_9724_call(), 1)
call_10624 = relay.TupleGetItem(func_9726_call(), 1)
func_8380_call = mod.get_global_var('func_8380')
func_8383_call = mutated_mod.get_global_var('func_8383')
var_10630 = relay.var("var_10630", dtype = "float32", shape = (880,))#candidate|10630|(880,)|var|float32
call_10629 = relay.TupleGetItem(func_8380_call(relay.reshape(var_10630.astype('float32'), [1, 880])), 4)
call_10631 = relay.TupleGetItem(func_8383_call(relay.reshape(var_10630.astype('float32'), [1, 880])), 4)
bop_10636 = relay.not_equal(call_10629.astype('bool'), relay.reshape(var_10630.astype('bool'), relay.shape_of(call_10629))) # shape=(1, 880)
bop_10639 = relay.not_equal(call_10631.astype('bool'), relay.reshape(var_10630.astype('bool'), relay.shape_of(call_10631))) # shape=(1, 880)
func_7822_call = mod.get_global_var('func_7822')
func_7823_call = mutated_mod.get_global_var('func_7823')
call_10645 = func_7822_call()
call_10646 = func_7822_call()
output = relay.Tuple([call_10617,call_10623,bop_10636,call_10645,])
output2 = relay.Tuple([call_10618,call_10624,bop_10639,call_10646,])
func_10647 = relay.Function([var_10630,], output)
mod['func_10647'] = func_10647
mod = relay.transform.InferType()(mod)
mutated_mod['func_10647'] = func_10647
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10648 = relay.var("var_10648", dtype = "float32", shape = (880,))#candidate|10648|(880,)|var|float32
func_10647_call = mutated_mod.get_global_var('func_10647')
call_10649 = func_10647_call(var_10648)
output = call_10649
func_10650 = relay.Function([var_10648], output)
mutated_mod['func_10650'] = func_10650
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10354_call = mod.get_global_var('func_10354')
func_10355_call = mutated_mod.get_global_var('func_10355')
call_10663 = relay.TupleGetItem(func_10354_call(), 1)
call_10664 = relay.TupleGetItem(func_10355_call(), 1)
func_4229_call = mod.get_global_var('func_4229')
func_4231_call = mutated_mod.get_global_var('func_4231')
const_10667 = relay.const([3,-2,3,-10,-5,-2,10,-7,-2,10,6,6,-1,-4,-2,-10,10,-1,6,-8,2,6,-4,4,1,-9,-2,-8,10,9,-8,-6,-10,1,-8,-5,-1,-4,-5,2,-4,2,-9,-10,-2,-10,7,9,5,-3,9,5,10,-6,10,2,-10,-2,7,-8,3,9,6,-9,-8,-1,-10,-6,6,9,1,-9,-8,-1,-5,3,-7,-7,-2,1,9,-4,10,1,-5,3,-2,8,3,4,-8,-5,-1,9,1,1,4,8,9,-4,-10,10,-9,-9,-8,2,9,-3,2,-6,-2,10,4,3,-7,-6,4,-6,-4,7,9,-10,-9,-1,-6,3,-3,5,-10,1,-7,-4,-4,-6,-7,-2,4,-5,4,-5,2,-8,10,-2,-6,-2,1,4,8,4,4,-4,-6,3,-6,2,-6,-2,-8,1,-9,-6,8,-4,9,4,3,-4,-6,3,-5,9,-7,-10,-7,-10,-1,-7,-6,7,-10,-1,-10,4,-3,-7,1,-10,9,5,10,-4,-10,1,-3,-3,1,6,10,7,-6,-2,2,-5,-3,-9,-6,5,4,-3,-6,10,2,-9,7,-8,10,-9,-1,5,5,-8,-9,-8,-10,-9,-7,6,-8,-6,10,-9,-1,7,3,7,-8,-10,9,-7,6,9,-7,-7,-1,2,-6,-4,-9,10,-2,1,-5,6,-6,-4,1,10,-10,6,1,-5,-9,3,-1,-2,-3,5,-4,3,-6,-4,2,-8,4,-6,-2,-1,1,8,10,-6,-3,-2,-2,6,-2,4,8,-8,5,-5,-6,-5,2,-10,-5,5,5,-6,-10,4,7,-8,1,-5,-10,1,-9,-5,-4,-3,-1,-9,-4,5,7,8,9,-9,1,-7,8,-9,6,8,-8,9,7,-8,-10,7,-2,3,10,-2], dtype = "int32")#candidate|10667|(336,)|const|int32
call_10666 = func_4229_call(relay.reshape(const_10667.astype('int32'), [16, 7, 3]))
call_10668 = func_4229_call(relay.reshape(const_10667.astype('int32'), [16, 7, 3]))
uop_10686 = relay.acosh(call_10663.astype('float32')) # shape=(16, 11, 15)
uop_10688 = relay.acosh(call_10664.astype('float32')) # shape=(16, 11, 15)
func_5564_call = mod.get_global_var('func_5564')
func_5566_call = mutated_mod.get_global_var('func_5566')
call_10695 = relay.TupleGetItem(func_5564_call(), 1)
call_10696 = relay.TupleGetItem(func_5566_call(), 1)
func_4598_call = mod.get_global_var('func_4598')
func_4602_call = mutated_mod.get_global_var('func_4602')
var_10711 = relay.var("var_10711", dtype = "float64", shape = (5,))#candidate|10711|(5,)|var|float64
const_10712 = relay.const([True,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,True,False,False,True,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,False,False,False,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,True,True,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,False,False,True,True,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,True,False,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,True,True,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,True,True,True,False,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,False,True,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,True,True,False,False,False,True,True,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,False,True,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,True,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,True,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,False,True,False,True,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,False,True,False,False,False,True,False,True,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True], dtype = "bool")#candidate|10712|(13650,)|const|bool
call_10710 = relay.TupleGetItem(func_4598_call(relay.reshape(var_10711.astype('float64'), [1, 5]), relay.reshape(const_10712.astype('bool'), [2730, 5]), ), 8)
call_10713 = relay.TupleGetItem(func_4602_call(relay.reshape(var_10711.astype('float64'), [1, 5]), relay.reshape(const_10712.astype('bool'), [2730, 5]), ), 8)
output = relay.Tuple([call_10666,const_10667,uop_10686,call_10695,call_10710,var_10711,const_10712,])
output2 = relay.Tuple([call_10668,const_10667,uop_10688,call_10696,call_10713,var_10711,const_10712,])
func_10724 = relay.Function([var_10711,], output)
mod['func_10724'] = func_10724
mod = relay.transform.InferType()(mod)
var_10725 = relay.var("var_10725", dtype = "float64", shape = (5,))#candidate|10725|(5,)|var|float64
output = func_10724(var_10725)
func_10726 = relay.Function([var_10725], output)
mutated_mod['func_10726'] = func_10726
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7104_call = mod.get_global_var('func_7104')
func_7105_call = mutated_mod.get_global_var('func_7105')
call_10730 = relay.TupleGetItem(func_7104_call(), 0)
call_10731 = relay.TupleGetItem(func_7105_call(), 0)
output = relay.Tuple([call_10730,])
output2 = relay.Tuple([call_10731,])
func_10738 = relay.Function([], output)
mod['func_10738'] = func_10738
mod = relay.transform.InferType()(mod)
mutated_mod['func_10738'] = func_10738
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10738_call = mutated_mod.get_global_var('func_10738')
call_10739 = func_10738_call()
output = call_10739
func_10740 = relay.Function([], output)
mutated_mod['func_10740'] = func_10740
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5014_call = mod.get_global_var('func_5014')
func_5015_call = mutated_mod.get_global_var('func_5015')
call_10744 = relay.TupleGetItem(func_5014_call(), 0)
call_10745 = relay.TupleGetItem(func_5015_call(), 0)
output = relay.Tuple([call_10744,])
output2 = relay.Tuple([call_10745,])
func_10754 = relay.Function([], output)
mod['func_10754'] = func_10754
mod = relay.transform.InferType()(mod)
mutated_mod['func_10754'] = func_10754
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10754_call = mutated_mod.get_global_var('func_10754')
call_10755 = func_10754_call()
output = call_10755
func_10756 = relay.Function([], output)
mutated_mod['func_10756'] = func_10756
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9724_call = mod.get_global_var('func_9724')
func_9726_call = mutated_mod.get_global_var('func_9726')
call_10775 = relay.TupleGetItem(func_9724_call(), 2)
call_10776 = relay.TupleGetItem(func_9726_call(), 2)
output = relay.Tuple([call_10775,])
output2 = relay.Tuple([call_10776,])
func_10810 = relay.Function([], output)
mod['func_10810'] = func_10810
mod = relay.transform.InferType()(mod)
mutated_mod['func_10810'] = func_10810
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10810_call = mutated_mod.get_global_var('func_10810')
call_10811 = func_10810_call()
output = call_10811
func_10812 = relay.Function([], output)
mutated_mod['func_10812'] = func_10812
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4266_call = mod.get_global_var('func_4266')
func_4268_call = mutated_mod.get_global_var('func_4268')
call_10816 = relay.TupleGetItem(func_4266_call(), 0)
call_10817 = relay.TupleGetItem(func_4268_call(), 0)
uop_10819 = relay.acos(call_10816.astype('float64')) # shape=(16, 11, 15)
uop_10821 = relay.acos(call_10817.astype('float64')) # shape=(16, 11, 15)
output = uop_10819
output2 = uop_10821
func_10824 = relay.Function([], output)
mod['func_10824'] = func_10824
mod = relay.transform.InferType()(mod)
output = func_10824()
func_10825 = relay.Function([], output)
mutated_mod['func_10825'] = func_10825
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6854_call = mod.get_global_var('func_6854')
func_6856_call = mutated_mod.get_global_var('func_6856')
call_10841 = func_6854_call()
call_10842 = func_6854_call()
func_6743_call = mod.get_global_var('func_6743')
func_6745_call = mutated_mod.get_global_var('func_6745')
const_10845 = relay.const([2.552210,7.354548,0.894085,9.500823,9.181553,-2.789796,8.999739,4.460155,4.599500,-0.539638,-6.033687,1.692510,9.390264,2.407118,7.513307,4.372937,-0.796537,0.851829,0.195125,-3.948978,-6.574358,-1.663896,-0.546253,-5.203502,-3.242569,7.999269,6.127794,5.943410,1.674163,2.511782,9.025593,-0.490265,4.526183,3.942362,-7.103687,1.998759,-1.115401,-7.140686,3.880839,3.412734,1.765763,-9.038737,8.072836,2.466670,-0.572080,-6.627300,3.889115,-9.141965,-3.257346,-1.266902,8.022943,6.838221,6.017588,-1.819344,-4.612492,-3.809280,-9.989924,-3.542991,7.289175,-4.301662,-9.972157,2.805326,7.007170,-1.435809,-2.223039,-7.982149,-4.169142,8.052096,8.627595,-8.600731,9.310199,5.458644,6.903872,-3.766715,2.133232,3.302317,8.958332,-9.735101,-2.701839,-8.839988,6.396181,-0.026204,-7.457054,9.448116,1.670038,0.526742,2.390256,-9.738729,0.966159,4.469610,9.187538,-1.720608,3.307557,-9.329692,-1.209776,-9.290145,9.642220,7.267783,9.056632,-0.552884,0.916683,8.444409,-2.299370,9.687065,-5.161476,8.407654,1.560117,-1.188797,-2.041665,-6.887803,8.785331,-4.603864,9.404901,-0.796865,-8.473426,0.520292,5.973138,-5.939435,-6.245763,8.966404,-4.698839,1.515061,-6.747551,5.455160,-1.474131,7.637927,-1.552050,-2.834150,-6.695489,-7.514247,6.820584,-4.444851,4.548883,7.727633,-1.281722,-3.903300,8.395534,6.481836,-0.803920,-1.407048,-4.096649,-1.651064,7.854522,0.310712,-6.953797,-3.988376,2.730542,-4.158287,-5.628209,6.525348,-9.264749,9.169165,8.130344,9.507694,6.618920,-1.341698,-3.600529,0.891146,8.038822,7.594815,-7.980966,-9.856998,-3.524001,-5.279136,-0.959024,3.238006,-7.391135,-4.103591,6.951211,1.262500,7.949213,9.946594,-9.135722,5.795086,0.651861,3.683020,-5.007763,1.506144,-4.981277,8.782153,6.352279,1.070854,-2.631447,2.592087,-8.634370,-7.463752,-7.292995,1.701987,-8.939031,3.027350,1.870825,-2.911454,-5.362980,-6.088948,0.069035,2.151592,-4.864718,-6.424715,-2.913444,5.545455,-9.368409,-6.835402,1.660440,-0.261963,-6.086923,2.567626,-3.241280,3.274974,9.193068,-8.947415,-4.982186,-9.006222,-1.429893,1.253287,-6.200623,0.247836,-7.140386,-2.067658,7.945307,-6.756767,-5.038191,2.013607,9.890766,9.161064,-6.137715,7.485238,3.050415,-9.757694,8.009919,-1.698090,-6.304104,-0.491008,4.896818,-2.275140,4.072340,-4.659387,-4.704466,1.321604,-4.254616,-3.530071,-8.038665,4.538177,0.038208,2.986825,0.730296,7.564111,-9.069044,6.131865,-0.723466,-7.102446,-3.893460,0.620708,4.695109,-4.862840,1.370815,-9.010860,-3.389508,8.991908,4.788563,-8.551964,-6.899840,-3.837715,-2.274799,-1.994366,8.262117,-4.690011,9.154116,-7.378519,-3.460123,-0.605917,-4.970078,0.238627,0.065691,-5.072446,-7.546817,9.545865,-2.800673,4.240959,8.053452,5.695598,-5.690359,-4.999555,9.949548,-5.905061,1.703444,5.145916,-5.813427,7.781968,5.294596,-2.504159,-2.651548,-3.091199,-3.752431,0.216465,7.026466,-2.949925,7.334245,0.491073,-2.269360,-8.441977,1.724718,0.983909,9.345857,2.887952,-0.573730,-9.254204,2.026665,-3.264182,-6.981984,-6.311239,-4.902492,1.571549,4.005081,1.514856,2.508708,-4.193657,9.440040,-9.982164,-6.571758,-4.011255,2.749639,9.722303,7.494278,-5.563444,-9.139499,-6.457225,-2.587530,-7.001149,-2.630419,0.240602,3.298646,-9.404745,9.707692,9.543458,-4.277109,-6.562048,-9.042919,1.771825,7.807083,7.724491,-6.554974,8.686960,-5.208418,-6.245427,4.093418,-4.435903,6.335617,8.309887,2.835089,-5.949909,-5.602378,7.939797,3.862371,2.420149,4.944274,-3.451027,-3.487140,-3.625810,8.480074,9.814244,-7.567554,6.385034,2.567333,-3.606947,-8.231989,-7.845983,3.933237,7.799167,-1.949838,-0.074755,-2.545807,5.786599,-2.407523,5.353125,6.959210,-3.753924,-2.466551,2.751361,-3.727821,-0.232452,1.614461,-8.533916,-6.420103,3.008545,-1.856746,-6.707601,-3.994676,4.097545,2.026486,-4.450533], dtype = "float64")#candidate|10845|(390,)|const|float64
call_10844 = relay.TupleGetItem(func_6743_call(relay.reshape(const_10845.astype('float64'), [6, 13, 5])), 0)
call_10846 = relay.TupleGetItem(func_6745_call(relay.reshape(const_10845.astype('float64'), [6, 13, 5])), 0)
output = relay.Tuple([call_10841,call_10844,const_10845,])
output2 = relay.Tuple([call_10842,call_10846,const_10845,])
func_10855 = relay.Function([], output)
mod['func_10855'] = func_10855
mod = relay.transform.InferType()(mod)
output = func_10855()
func_10856 = relay.Function([], output)
mutated_mod['func_10856'] = func_10856
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5722_call = mod.get_global_var('func_5722')
func_5724_call = mutated_mod.get_global_var('func_5724')
call_10860 = func_5722_call()
call_10861 = func_5722_call()
output = relay.Tuple([call_10860,])
output2 = relay.Tuple([call_10861,])
func_10874 = relay.Function([], output)
mod['func_10874'] = func_10874
mod = relay.transform.InferType()(mod)
mutated_mod['func_10874'] = func_10874
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10874_call = mutated_mod.get_global_var('func_10874')
call_10875 = func_10874_call()
output = call_10875
func_10876 = relay.Function([], output)
mutated_mod['func_10876'] = func_10876
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9667_call = mod.get_global_var('func_9667')
func_9668_call = mutated_mod.get_global_var('func_9668')
call_10880 = relay.TupleGetItem(func_9667_call(), 0)
call_10881 = relay.TupleGetItem(func_9668_call(), 0)
func_7104_call = mod.get_global_var('func_7104')
func_7105_call = mutated_mod.get_global_var('func_7105')
call_10899 = relay.TupleGetItem(func_7104_call(), 0)
call_10900 = relay.TupleGetItem(func_7105_call(), 0)
func_8434_call = mod.get_global_var('func_8434')
func_8435_call = mutated_mod.get_global_var('func_8435')
call_10914 = relay.TupleGetItem(func_8434_call(), 0)
call_10915 = relay.TupleGetItem(func_8435_call(), 0)
func_7617_call = mod.get_global_var('func_7617')
func_7620_call = mutated_mod.get_global_var('func_7620')
var_10917 = relay.var("var_10917", dtype = "uint32", shape = (224,))#candidate|10917|(224,)|var|uint32
call_10916 = func_7617_call(relay.reshape(var_10917.astype('uint32'), [4, 7, 8]))
call_10918 = func_7617_call(relay.reshape(var_10917.astype('uint32'), [4, 7, 8]))
output = relay.Tuple([call_10880,call_10899,call_10914,call_10916,var_10917,])
output2 = relay.Tuple([call_10881,call_10900,call_10915,call_10918,var_10917,])
func_10967 = relay.Function([var_10917,], output)
mod['func_10967'] = func_10967
mod = relay.transform.InferType()(mod)
mutated_mod['func_10967'] = func_10967
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10968 = relay.var("var_10968", dtype = "uint32", shape = (224,))#candidate|10968|(224,)|var|uint32
func_10967_call = mutated_mod.get_global_var('func_10967')
call_10969 = func_10967_call(var_10968)
output = call_10969
func_10970 = relay.Function([var_10968], output)
mutated_mod['func_10970'] = func_10970
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4795_call = mod.get_global_var('func_4795')
func_4796_call = mutated_mod.get_global_var('func_4796')
call_10993 = relay.TupleGetItem(func_4795_call(), 0)
call_10994 = relay.TupleGetItem(func_4796_call(), 0)
func_6455_call = mod.get_global_var('func_6455')
func_6457_call = mutated_mod.get_global_var('func_6457')
const_10996 = relay.const([-8.883125,-2.762695,-5.769529,-9.634952,-7.485332,0.161941,-1.380763,-0.256096,-3.025847,0.175294,-3.944479,7.716083,-3.775280,7.943124,6.373405,-2.402614,-6.410492,8.848115,-0.490113,5.087716,4.458599,0.697257,-1.234858,-8.619982,8.390885,7.947915,4.391106,-2.039386,5.736457,8.312848,-2.678879,-8.925120,-6.964321,-1.002142,1.580939,-4.362192,-8.335623,-4.474419,9.832296,2.265127,-0.222619,-2.626699,5.750078,-5.994580,-0.303882,-7.058341,8.959015,-1.199848,-9.592590,0.949074,-3.297963,-5.736536,2.711416,8.150629,-1.453111,3.321052,3.977159,-7.927352,-3.476280,5.603805,-5.508301,-8.557695,-3.417584,6.052712,6.445913,-9.947387,-3.942918,-8.955569,3.657803,-6.338394,8.367497,-5.108931,-0.902288,2.659296,7.533013,6.401407,-6.559789,-9.294474,-6.674520,-8.944669,-0.394854,3.409664,8.680620,-4.890776,7.323730,-9.483284,1.275423,8.651048,2.346997,-1.130729,9.084221,-5.024070,2.388661,-4.472835,6.513071,5.270742,3.528105,-7.483929,5.761803,8.713169,-2.219093,2.572213,6.416372,8.082503,3.288335,4.552993,6.831786,8.640403,-7.753092,3.509739,-4.861888,2.645782,3.020025,-4.986192,6.945903,-8.300906,-0.757834,8.556060,-6.502100,-0.450151,-0.925717,7.254540,-7.766908,0.809512,-3.223085,-5.612173,7.991299,3.342668,5.769894,3.771707,6.159734,-3.174066,0.993516,8.210940,-3.297939,-3.185434,-4.984437,1.189691,-5.896614,3.169881,5.499874,5.581341,-7.689002,7.083164,-0.750894,-8.371264,-8.163447,3.953404,-6.343577,-3.591007,1.066140,9.209581,-7.193282,-4.112728,6.874973,0.807741,4.062042,-0.536946,2.044960,8.978934,-4.379590,-6.020127,5.553221,6.570731,-0.417762,-0.219462,-0.306247,5.803518,-8.686929,0.702365,-1.688962,-4.628321,4.591958,1.802399,5.015181,-3.873416,-8.623749,-3.141286,0.849331,1.887139,4.095457,5.466775,2.978181,-7.932373,-7.996686,-8.884500,4.711726,-5.053810,6.296147,0.403802,-9.763464,-7.223757,-8.575554,-1.334911,-0.393726,-3.616265,-4.217163,9.344356,-4.334106,2.006146,2.558164,3.468471,0.833146,6.576831,4.174454,5.395083,3.015622,-6.422340,-7.965403,9.269637,-5.371679,7.133147,1.770109,8.162142,-5.998183,-1.604001,-4.695713,-5.606382,5.087562,-5.506410,0.236179,-4.338491,6.882760,-8.836675,-4.993532,3.276059,0.367795,2.425719,5.492065,0.620011,5.574624,-0.900749,7.521954,5.505774,-6.258550,-3.152918,9.353018,-5.925341,5.964688,0.730926,-4.072375,8.197088,3.913723,-0.046764,4.880543,-2.756815,7.299235,-4.230230,-4.678606,5.215559,8.095732,-0.761280,5.471528,2.356030,6.201828,-1.271374,3.228156,-9.875834,-4.385768,-7.100338,-0.542523,-6.320127,4.134289,-1.583058,6.965694,-4.844674,2.491094,6.365442,-7.292416,-4.635027,3.451859,7.088315,-7.040717,8.552396,6.407768,-5.515130,7.242374,3.197510,5.773856,-2.700577,-8.731388,5.485324,6.299535,-6.125779,8.011074,1.117595,4.781390,-1.128592,-0.376309,-3.333918,9.434479,8.065095,9.701746,4.153375,2.552632,7.756211,-4.996021,3.899490,-4.792667,1.430469,-9.796664,-7.572552,-1.272337,1.596410,3.546898,-1.866951,-0.644638,4.640452,-8.210426,-9.038298,-9.302608,5.784675,-0.843511,-5.379698,-1.849311,1.831281,-8.635823,-5.616177,-9.190042,-2.449043,7.121987,-1.120068,-8.175470,-9.757998,-2.695089,-1.250930,-4.722959,2.131511,2.251007,4.331340,-5.331727,-4.802637,9.422152,0.409904,3.876379,8.636606,-3.098779,-7.896597,2.768077,4.492149,-2.206021,-3.364422,-9.895048,1.251755,3.152005,0.721547,4.493305,-2.077557,6.235694,-1.712559,7.655672,6.948194,4.624418,9.335234,-2.460695,-4.634353,-4.924570,-2.441853,4.088035,-2.884682,-5.795134,-7.701299,-1.550879,-2.739897,-3.185404,-4.484616,-0.789691,8.623423,3.484368,-0.132576,2.268822,-2.888351,3.569949,-3.863386,3.983853,2.177740,5.405699,6.609122,3.368599,0.432673,2.484407,4.799548,4.840898,1.525841,6.077009,3.707412,3.597628,1.670570,-8.480925,0.391076,-1.723875,0.648020,-6.355536,7.675430,0.106649,0.562240,-0.050603,-2.165990,9.442942,4.229486,-8.514566,9.460125,-7.960868,-3.087564,4.079910,-3.995931,8.961635,0.601310,6.090290,7.366031,9.218166,2.673711,6.425570,4.707859,2.804005,-8.159349,1.458225,7.274710,-6.870704,-8.324320,1.717877,6.326699,9.076466,-4.902473,-1.023950,6.659802,-0.134028,6.867090,-7.232820,-7.910096,1.477200,1.053327,4.530188,1.906664,4.506127,1.975790,-4.794695,1.836789,4.911926,-3.890409,3.630154,6.826706,-5.669775,3.107149,9.103389,6.982405,-6.314090,-1.052562,8.497137,4.187856,7.857241,-1.314752,-4.247356,2.220585,8.376005,7.920857,2.418250,1.419887,9.454528,5.899420,-8.205632,-1.962077,6.009531,-7.836055,-2.761829,7.760460,-4.243896,3.236992,1.205819,-8.775852,4.144842,1.064518,-9.920894,-0.673971,-0.672046,9.971698,-9.155458,4.602574,-0.240080,6.678436,-0.121839,-6.370806,-8.278316,8.971638,9.068106,-3.820202,8.532915,5.440248,-1.661155,6.149008,4.690530,-8.592544,-4.994236,-0.248097,1.544591,0.788535,-4.767577,7.504727,-7.787601,7.633334,-5.619063,-4.661006,6.475966,-1.061185,7.437723,-6.848338,-6.715037,4.747891,8.545249,5.563390,4.330884,-4.117703,-2.719958,-3.217848,-0.121951,-3.091423,9.072390,-4.256336,4.032483,4.540960,-7.289291,5.443416,-4.077408,-5.309645,-5.602781,-8.896511,-9.351995,-6.815847,-0.359885,4.134625,-0.352364,-5.986708,-5.494378,-1.443832,5.120637,6.513317,-9.484945,-3.946043,1.602122,-3.315267,-4.044048,7.238073,7.602532,0.040276,-9.608058,-0.984339,7.060919,-1.989811,5.942266,7.573936,-7.962381,-7.791386,9.321505,8.673656,0.030528,9.239625,6.118758,7.042130,-4.081897,-5.041371,9.077700,3.276576,4.891636,8.232901,-6.167488,0.499991,2.821333,3.974416,-0.194496,5.479934,-2.137110,5.198645,8.532848,-4.223523,-4.507789,-8.686800,5.462084,-6.598680,4.125736,0.303013,-9.104784,1.798295,5.591535,-7.535010,5.335744,0.654797,-3.716956,1.571643,4.358820,3.330525,0.223769,-9.593384,5.876686,1.308311,-5.595014,0.913314,-3.269896,-8.225469,1.809488,0.454768,-3.005286,7.379679,-4.697416,-8.453935,-5.427701,7.911546,2.721967,7.484662,-5.863652,5.551616,6.519101,0.908478,8.895621,3.786389,-7.901262,-9.610170,-2.323176,-0.058938,-8.439876,-9.168467,-9.939094,-2.497490,4.095290,8.495444,8.669300,-3.141355,1.025976,-3.202718,2.910377,5.484525,-0.901292,-4.562229,0.775810,2.229369,3.230477,6.799690,2.540891,0.588495,0.980232,-3.781941,-5.340855,7.509062,-4.557931,-9.405254,-7.003275,-8.197118,0.631683,5.710237,6.859215,1.196362,-8.257233,-7.934461,-5.775695,9.116505,-2.589220,-1.290361,-2.171526,-6.165015,0.409062,2.048892,5.016241,7.861037,-6.378201,9.346510,4.837757,7.014448,8.210014,-8.035275,1.372571,8.883369,7.558503,-7.689851], dtype = "float64")#candidate|10996|(672,)|const|float64
call_10995 = relay.TupleGetItem(func_6455_call(relay.reshape(const_10996.astype('float64'), [672,])), 2)
call_10997 = relay.TupleGetItem(func_6457_call(relay.reshape(const_10996.astype('float64'), [672,])), 2)
output = relay.Tuple([call_10993,call_10995,const_10996,])
output2 = relay.Tuple([call_10994,call_10997,const_10996,])
func_11000 = relay.Function([], output)
mod['func_11000'] = func_11000
mod = relay.transform.InferType()(mod)
output = func_11000()
func_11001 = relay.Function([], output)
mutated_mod['func_11001'] = func_11001
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11093 = relay.var("var_11093", dtype = "int64", shape = ())#candidate|11093|()|var|int64
const_11094 = relay.const([[[10,3,5,-10,5,-8,5,8,-6],[5,-1,9,8,-2,-7,-10,-2,10],[9,4,1,6,2,2,-10,-9,-1],[-10,10,-2,4,-7,-7,6,7,1]],[[-3,-4,10,2,4,10,2,6,1],[-1,2,-1,-5,6,-10,1,-3,-8],[-10,-4,6,10,3,9,6,8,8],[-8,10,-4,-10,-4,10,9,-4,4]],[[6,-5,-10,4,4,5,-5,4,6],[4,5,-10,-9,6,-9,-3,-4,7],[-5,-9,6,3,-6,7,-7,7,-10],[-8,3,4,4,-10,-8,-10,9,3]],[[5,7,3,1,-4,1,-3,-2,-2],[-10,-6,3,-7,-8,-6,2,-7,3],[2,9,2,1,-10,6,1,-10,-6],[2,10,2,1,5,2,7,2,1]],[[9,-3,-4,2,-5,-4,-7,-4,4],[-3,9,-4,-8,6,-8,-7,-10,-5],[9,2,2,-5,-2,-6,-3,3,8],[5,-8,-5,-10,5,-3,6,8,6]],[[-4,10,7,2,4,-4,-3,-8,9],[-1,-8,-9,-7,-2,3,-6,6,2],[-2,5,-2,-2,-7,-9,-6,5,7],[2,9,10,2,8,3,-3,-4,5]],[[-7,-2,7,-1,10,-4,10,-2,2],[10,9,1,-7,9,3,9,8,4],[-1,-8,-1,-9,-10,1,-4,-5,-10],[-4,-1,10,4,-3,1,10,2,-4]],[[-2,-5,7,-6,6,1,-10,-5,-8],[4,-4,-6,4,-6,8,9,-6,-4],[-10,-1,4,4,-9,-4,2,8,-4],[-1,-4,5,9,-2,8,-8,-6,5]],[[-1,1,-8,6,4,-5,2,-9,7],[6,9,10,4,6,-7,8,-1,-1],[-6,8,2,-10,-3,9,-2,5,5],[-9,-5,6,9,3,3,-9,-8,-10]],[[-4,5,7,7,-10,-1,8,-1,6],[-7,1,2,-2,4,-2,2,-3,3],[-2,-1,3,-7,-3,-3,8,-1,10],[3,-8,5,1,6,-6,-8,-9,1]],[[3,10,8,3,5,-5,9,10,6],[7,-5,-3,-10,-1,10,-1,-2,6],[-6,6,-5,10,-6,1,-6,-1,-1],[-1,-5,-2,-6,7,3,6,2,-3]],[[-2,1,3,-1,-2,1,-5,4,7],[-5,8,1,-5,1,8,6,-8,9],[3,-2,10,-8,-10,-7,8,-9,5],[-8,-6,10,4,5,7,5,2,4]],[[-3,-9,5,-9,9,1,-8,4,1],[-10,-4,-9,9,-2,1,4,-8,-8],[-8,-8,-7,-9,-10,-10,1,-6,-7],[7,-6,8,2,-5,5,-3,-2,-10]]], dtype = "int64")#candidate|11094|(13, 4, 9)|const|int64
bop_11095 = relay.right_shift(var_11093.astype('int64'), const_11094.astype('int64')) # shape=(13, 4, 9)
output = relay.Tuple([bop_11095,])
output2 = relay.Tuple([bop_11095,])
func_11103 = relay.Function([var_11093,], output)
mod['func_11103'] = func_11103
mod = relay.transform.InferType()(mod)
var_11104 = relay.var("var_11104", dtype = "int64", shape = ())#candidate|11104|()|var|int64
output = func_11103(var_11104)
func_11105 = relay.Function([var_11104], output)
mutated_mod['func_11105'] = func_11105
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5522_call = mod.get_global_var('func_5522')
func_5523_call = mutated_mod.get_global_var('func_5523')
call_11117 = func_5522_call()
call_11118 = func_5522_call()
func_5450_call = mod.get_global_var('func_5450')
func_5451_call = mutated_mod.get_global_var('func_5451')
call_11129 = func_5450_call()
call_11130 = func_5450_call()
func_6606_call = mod.get_global_var('func_6606')
func_6608_call = mutated_mod.get_global_var('func_6608')
call_11136 = func_6606_call()
call_11137 = func_6606_call()
output = relay.Tuple([call_11117,call_11129,call_11136,])
output2 = relay.Tuple([call_11118,call_11130,call_11137,])
func_11142 = relay.Function([], output)
mod['func_11142'] = func_11142
mod = relay.transform.InferType()(mod)
output = func_11142()
func_11143 = relay.Function([], output)
mutated_mod['func_11143'] = func_11143
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10824_call = mod.get_global_var('func_10824')
func_10825_call = mutated_mod.get_global_var('func_10825')
call_11157 = func_10824_call()
call_11158 = func_10824_call()
func_9573_call = mod.get_global_var('func_9573')
func_9576_call = mutated_mod.get_global_var('func_9576')
const_11168 = relay.const([5.813372,-6.313885,-2.343820,9.009348,-6.592273,3.704646,7.876382,-3.660919,1.159582,-4.650062,-9.659415,-8.967152,-8.943229,-2.300270,-6.529456,3.477890,1.303842,-4.466267,-1.276511,-2.837374,1.696561,-6.172410,-2.688780,5.816627,-7.468998,-1.509451,-6.617072,-4.417033,6.257348,-8.467156,-1.758260,6.995212,2.150985,-6.166264,-4.716140,-5.129870,-1.453395,-4.120014,-3.470038,1.723491,2.309802,0.247791,-6.982596,-6.855383,3.513218,5.936411,-8.134612,1.180526,-5.669360,4.156170,-3.724105,3.005358,-6.536042,-4.470522,6.844263,3.933300,5.079516,-3.710929,8.904160,3.378964,4.644714,-0.905248,5.393665,-6.065263,7.187796,-2.701898,6.504685,5.038771,8.459377,-8.972855,6.759311,5.175788,4.483100,-1.869964,-6.281082,0.658087,-5.667758,6.012756,1.716450,7.344601,2.325824,0.082128,3.436445,9.220533,-3.107815,8.339788,4.456292,-0.218058,-0.388402,7.299520,-9.013257,4.160830,8.586538,-9.341183,-2.350712,5.120976,-1.276139,-8.375242,3.842463,-7.189482,-0.844424,9.021963,6.574032,-9.957564,-0.271600,-2.528614,-8.152687,5.834681,4.168319,-6.722525,-8.171667,6.054099,-0.136119,-6.769203,0.197943,6.518150,7.670655,-3.376201,-7.545751,-9.340851,-4.871343,7.705880,-5.114338,-0.226224,6.585926,4.075285,3.867528,-3.494532,3.156972,0.668666,1.025472,-8.461677,-0.692739,6.464301,9.471928,5.558642,1.228826,-6.972026,-5.866468,6.770858,4.975047,4.723939,0.329931,1.827006,-2.643540,-8.409066,5.209047,-6.694419,8.714143,9.105709,-1.370127,-6.530287,2.823962,3.853618,-5.487674,8.725319,-8.205397,-7.202009,-0.728374,-8.770200,-4.459952,1.443944,9.030320,6.693026,4.018735,8.256194,-0.421371,5.347521,-8.350926,8.316974,9.588333,-0.632674,1.506214,-6.833780,-3.152992,-2.431274,3.430004,6.143648,-5.632845,0.712490,0.654968,6.809748,-5.670194,2.940810,5.893819,6.407242,-7.997937,-8.950038,-2.072467,8.219897,6.477628,-0.806727,4.785755,1.188042,-7.688005,-4.478930,8.529786,6.722342,-1.098498,-1.036811,8.507958,0.532343,-2.132005,1.847158,-1.205204,3.270829,5.677462,-8.885709,5.663522,-8.029062,-9.046763,8.134415,-9.848796,5.398196,-1.366710,-8.571712,-7.742023,0.019988,-9.665922,9.964845,3.291403,-6.275335,-4.834247,-8.872702,1.523163,-0.482384,4.185382,3.326707,-1.027350,-2.895327,6.940158,3.675246,-1.389519,-6.600432,8.684208,6.918482,-9.628021,9.713050,-2.817325,9.959456,-3.927218,6.230102,1.439739,9.543502,-5.077918,-5.656988,1.387607,1.271025,-2.394312,-6.499767,6.669288,0.606340,0.258928,3.716431,-1.637877,4.826043,-5.556882,-4.456816,-0.653201,4.513070,0.489441,-9.004061,9.164622,8.017679,0.226534,-3.792298,8.113719,-2.270222,-9.056696,2.170698,-0.456433,-2.533365,7.692269,8.344952,-8.156440,-4.360039,-0.077488,-2.555071,-7.273204,-8.304882,1.752776,0.089996,-4.132270,-8.411544,5.481281,4.913933,-4.895424,-5.708485,-5.285999,8.552963,-4.838302,-4.825377,-7.587477,0.586396,-1.430217,-2.895707,-0.007859,0.227037,-0.508465,4.782470,7.616989,5.418140,-2.973356,9.685919,2.216853,-0.827062,8.569326,6.138928,7.367910,-5.582771,-8.329522,-1.505434,-2.018028,4.501024,3.289561,-8.162420,7.771329,-8.994708,3.775949,-0.352217,9.655632,1.604906,7.029135,-8.834788,5.264177,0.927882,-9.368687,-7.755439,0.219433,1.301426,-0.727222,2.623050,1.226227,-7.700781,7.464252,-2.745069], dtype = "float64")#candidate|11168|(336,)|const|float64
const_11169 = relay.const([8,9,-10,-7,4,-6,-8,-10,-3,-10,-5,2,4,8,-10,1,8,-5,3,-7,-9,-7,9,-3,10,3,2,-9,-9,-2,-7,-8,-3,5,-4,-4,-7,-1,10,-9,7,8,-9,6,1,8,10,-6,10,10,6,-8,-7,-9,3,9,-2,-7,-5,3,-10,-5,9,-5,3,-5,-1,1,-2,-5,8,2,5,5,2,-8,-8,-5,4,-8,-5,-7,-5,-4,-1,-1,7,1,7,-1,-3,-3,2,8,6,-5,8,-9,4,-10,-4,-4,-8,-2,10,-4,-2,3,-3,-10,-8,3,-10,-9,-6,7,-3,3,-7,-4,10,-7,-7,6,3,10,-2,-9,5,-7,8,3,7,3,-2,-1,9,5,-10,5,-9,-7,7,-5,4,3,8,-5,1,10,-7,6,-9,-1,3,4,-10,-7,5,-1,-4,10,2,8,5,9,-9,7,7,6,-3,-6,-9,10,-2,4,-7,1,-2,-5,9,9,8,-5,-6,-6,1,-2,2,-8,-4,4,7,-1,6,-7,7,-2,-4,1,-10,-10,9,-3,3,9,4,-9,1,-3,5,2,6,6,-3,-3,-5,3,-5,5,10,5,9,8,-5,7,-10,1,-4,-7,5,-9,-3,2,-3,-5,-3,8,6,2,-4,1,-7,-2,-9,-8,-9,5,-3,1,6,-8,8,-2,1,-8,-10,-1,-9,-8,1,5,4,3,4,3,2,10,-7,-6,6,-3,3,3,-6,2,-6,-9,-6,-8,-8,2,-2,2,7,-6,-4,-1,-5,-10,-7,10,1,6,2,8,4,-2,4,-4,3,-6,-10,-3,5,-8,8,-8,7,-6,7,-1,-6,7,-8,-3,-4,-6,-7,-1,-4,5,-7,3,-4,-5,5,-3,-8,8,-3,4,9,-2,-3,-9,4,-1,6,6,-2,-2,-4,5,7,-7,6,8,3,4,-4,3,8,10,-7,-5,-5,6,-3,-3,-6,-1,-4,-6,2,5,2,6,3,5,4,8,8,-1,5,-1,6,1,-4,7,8,4,9,1,7,1,-5,-1,3,4,-5,8,9,-9,10,-9,-9,10,2,-1,9,-10,-1,9,-10,3,-10,-9,4,-3,6,-5,-6,3,10,7,-6,-6,-8,4,-2,5,9,2,-4,10,-9,-4,-1,3,3,-1,-6,9,-5,-4,-9,8,5,-5,-7,8,9,-10,-3,10,-10,-6,-9,2,9,9,-5,9,-9,8,7,-1,-9,7,-4,7,-7,2,-9,9,10,-9,-9,4,1,5,7,-6,-6,6,1,4,8,5,-2,-9,-4,-9,5,10,-5,-5,10,-9,-6,8,10,-5,-10,8,-5,-4,5,10,7,7,-5,-4,-6,3,10,1,-1,-10,7,3,-7,10,10,-2,-2,-9,-3,-1,-8,3,4,-1,10,-8,-1,8,-9,2,8,8,-4,6,2,8,-2,9,5,-4,3,-4,4,4,2,-5,-1,2,-10,5,-6,1,4,-7,-1,-5,-5,-1,-3,-4,-1,5,4,9,6,5,5,-3,9,7,10,-6,-1,4,2,-6,1,-4,1,-8,-7,2,-10,-2,-4,10,-1,1,-3,-5,-6,-7,6,-9,-7,5,-9,-8,3,-9,1,3,8,-5,10,8,-2,-1,8,-3,-9,1,-7,-9,8,-7,9,-10,-5,-2,4,-1,6,-3,3,1,8,10,-10,-6,-8,9,7,6,6,-7,9,9,1,2,-1,6,7,-5,-6,9,-5,3,10,4,-9,-10,-10,-6,10,6,2,-1,9,-8,-6,-1,5,-5,-5,-3,-1,-5,-2,3,-8,5,1,9,-1,-7,3,-2,-1,-3,7,3,9,-10,-10,4,1,9,5,-4,-6,5,-8,-6,-3,9,5,7,-1,-4,9,-8,7,-6,5,9,10,9,-9,1,5,10,-2,-5,-4,-2,7,5,7,-6,-1,4,-7,3,1,7,-4,8,-6,8,2,-2,2,-4,-9,1,-5,3,-9,7,-10,6,3,-1,6,8,-1,-6,-10,-4,-1,10,2,-8,-10,1,-1,-4,-10,3,6,4,4,2,2,-2,5,-1,-5,-9,3,-5,-8,1,5,6,5,-9,-9,2,1,6,-8,-2,-5,-10,-3,-5,5,1,-9,-9,4,-3,3,6,-1,-7,-9,-2,1,3,6,-5,3,10,10,8,9,8,-7,5,9,7,-2,2,-2,9,4,-10,9,-1,-1,-6,-10,-4,1,7,1,7,4,9,6,-5,-2,-1,6,2,1,-8,2,-10,-1,-4,2,8,-3,-5,4,3,-6,9,-6,-7,-8,-10,9,5,8,2,1,9,6,-4,3,-8,-10,10,7,5,-4,-10,-6,3,-4,-7,5,-10,-9,3,10,2,10,7,9,5,-6,6,-9,7,4,-10,-9,3,-3,-1,-10,4,-5,7,5,-9,8,5,6,3,-8,-10,5,7,2,2,9,1,-1,9,-2,-6,-4,2,-5,-2,9,-1,5,-4,-6,-8,4,-10,-10,10,-7,-4,9,1,-10,8,4,6,7,-8,-4,-9,-8,5,6,-1,2,-4,-1,5,-9,-3,-6,4,-8,-8,9,-3,4,6,-3,-5,-10,4,-5,5,5,6,-8,5,-3,8,-10,-10,1,4,-10,-7,-9,4,-3,7,10,9,4,-3,9,-10,4,-1,3,-9,6,5,-8,-9,-1,-8,2,8,5,4,5,-1,1,6,-1,10,2,5,6,10,2,6,-7,-1,-8,-6,-8,-3,-1,6,-7,-1,2,6,2,3,6,-10,-8,7,8,10,-10,-9,-4,-5,3,-10,2,3,4,7,-9,-4,8,2,5,-5,5,-6,-1,9,-6,9,7,-9,-7,-2,3,-1,7,8,5,7,-9,8,5,-4,-8,-7,2,-5,-2,5,-3,6,-2,-4,-10,-7,-5,9,-6,-10,-5,-9,-7,-7,-3,6,-1,-6,9,-1,2,-9,5,-8,2,-5,-9,3,-3,4,-3,10,3,8,-7,-2,-9,5,-1,-6,2,-8,-10,-6,-1,6,1,5,-3,7,-4,-10,-3,8,9,7,-7,-2,-7,-7,9,2,9,-5,2,4,-4,-8,9,-1,10,-2,4,-2,-2,-9,10,10,-1,-4,8,7,-2,9,1,-2,7,-5,-5,3,-6,8,-6,-7,-3,9,9,-3,1,2,1,2,-5,-10,4,10,8,5,-6,10,-1,1,5,1,-8,-9,-5,1,-7,-2,4,10,8,7,-8,-3,6,-1,2,10,-2,-2,-1,9,-2,1,-3,-2,-8,6,8,9,7,-6,9,-10,-4,-10,-5,-4,-9,7,-8,4,-7,-4,-4,-8,10,-2,9,-1,-4,9,9,-6,-8,2,-1,-4,9,-3,10,3,-5,-10,-7,-1,-4,-10,-6,1,1,-10,2,-1,1,-3,5,-2,1,9,6,10,-2,3,9,4,7,-4,-9,9,1,2,10,-10,-9,-8,1,-3,8,-3,-9,-9,-10,-5,-10,-10,8,8,-5,8,9,8,-4,5,8,1,4,4,-4,4,7,4,-3,3,3,5,-7,-4,-6,3,6,1,-3,-5,-8,-1,-10,-10,1,4,-5,8,1,-3,8,1,9,3,7,-8,-6,7,6,-10,1,1,-4,-7,8,2,-7,9,4,-7,9,-5,-4,10,2,-7,7,-2,-4,5,-1,7,1,4,-9,8,6,-4,8,2,-7,6,4,4,-6,-1,10,-5,-5,8,-7,5,-10,6,6,-9,-7,-6,2,9,9,-5,10,-9,8,-3,4,10,9,-3,4,-8,8,1,4,-7,2,3,3,-8,-1,-6,7,10,-4,2,6,8,-2,5,-1,-10,-6,6,4,10,3,10,-4,7,-3,5,-7,-7,-1,8,7,-6,8,2,-4,-7,10,8,-8,-1,3,2,8,2,4,-3,7,-3,1,-9,10,3,-1,-6,-7,-10,3,-2,-5,-10,4,9,-5,8,-10,3,1,9,-9,1,-2,-8,-6,3,7,-8,9,2,-2,1,7,1,2,-10,-5,-8,-3,-9,7,8,-9,4,-6,1,-9,9,6,2,9,10,-4,-10,-7,3,5,7,-10,2,-9,5,7,4,3,3,9,-6,4,-9,7,4,-3,-5,-1,-2,-10,-10,10,-10,9,7,-9,-2,-2,-1,-1,10,5,1,-2,6,-10,9,-10,5,6,-9,8,5,2,-9,-10,-9,4,-1,-2,8,-5,4,-10,7,2,9,9,9,2,4,-7,-9,4,-7,8,10,6,9,2,2,-1,-5,-6,2,4,-4,-9,-2,-6,9,8,-9,3,8,3,-1,-2,-7,-5,-8,4,-10,8,6,-4,-8,-4,5,-5,5,5,-6,-4,-7,3,8,9,10,1,-9,-3,-5,4,-6,-7,8,-7,-8,7,-10,1,8,5,7,-6,-8,5,-5,5,7,4,-3,8,-2,9,5,-9,1,-1,-9,-7,5,2,1,5,9,-1,-10,6,-6,-3,6,-6,-7,7,5,3,-8,-1,-2,6,6,6,8,8,-8,7,-5,4,9,10,-7,-5,9,5,4,3,-9,-6,2,3,6,-5,-4,-7,-2,8,-1,6,10,-9,3,6,2,10,-9,3,4,8,-9,-10,1,2,-2,-10,-2,-9,-3,-6,9,9,3], dtype = "uint16")#candidate|11169|(1728,)|const|uint16
call_11167 = relay.TupleGetItem(func_9573_call(relay.reshape(const_11168.astype('float64'), [14, 12, 2]), relay.reshape(const_11169.astype('uint16'), [1728,]), ), 0)
call_11170 = relay.TupleGetItem(func_9576_call(relay.reshape(const_11168.astype('float64'), [14, 12, 2]), relay.reshape(const_11169.astype('uint16'), [1728,]), ), 0)
func_9609_call = mod.get_global_var('func_9609')
func_9611_call = mutated_mod.get_global_var('func_9611')
call_11171 = func_9609_call()
call_11172 = func_9609_call()
output = relay.Tuple([call_11157,call_11167,const_11168,const_11169,call_11171,])
output2 = relay.Tuple([call_11158,call_11170,const_11168,const_11169,call_11172,])
func_11187 = relay.Function([], output)
mod['func_11187'] = func_11187
mod = relay.transform.InferType()(mod)
mutated_mod['func_11187'] = func_11187
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11187_call = mutated_mod.get_global_var('func_11187')
call_11188 = func_11187_call()
output = call_11188
func_11189 = relay.Function([], output)
mutated_mod['func_11189'] = func_11189
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7794_call = mod.get_global_var('func_7794')
func_7795_call = mutated_mod.get_global_var('func_7795')
call_11190 = func_7794_call()
call_11191 = func_7794_call()
func_2506_call = mod.get_global_var('func_2506')
func_2509_call = mutated_mod.get_global_var('func_2509')
const_11206 = relay.const([1.907144,-4.266310,-7.858476,-7.683664,0.151726,-2.038137,-5.146274,-2.888835,1.456338,5.271181,8.224909,9.883266,7.683015,6.680818,-5.063526,7.061125,3.113141,8.515678,-7.979606,-7.566560,-8.014813,6.753654,1.663597,-3.444276,8.057513,4.049116,-6.478708,9.442679,-7.021685,-1.298731,-2.105468,-5.262402,0.087504,9.007925,-1.154635,-8.914676,-5.227898,1.409187,7.934912,6.680878,-1.833271,-8.604372,8.280981,-8.765784,-4.977058,3.059829,-6.492281,1.511241,0.753492,7.540930,-7.605182,-8.915474,-0.378365,-9.944537,-2.676258,-8.989461,1.943545,8.106159,9.744186,-1.611400,6.251431,-7.135720,-0.366630,9.089027,-0.231880,6.286779,-0.102194,-3.520975,5.645256,0.299401], dtype = "float32")#candidate|11206|(70,)|const|float32
call_11205 = relay.TupleGetItem(func_2506_call(relay.reshape(const_11206.astype('float32'), [7, 2, 5])), 0)
call_11207 = relay.TupleGetItem(func_2509_call(relay.reshape(const_11206.astype('float32'), [7, 2, 5])), 0)
output = relay.Tuple([call_11190,call_11205,const_11206,])
output2 = relay.Tuple([call_11191,call_11207,const_11206,])
func_11213 = relay.Function([], output)
mod['func_11213'] = func_11213
mod = relay.transform.InferType()(mod)
mutated_mod['func_11213'] = func_11213
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11213_call = mutated_mod.get_global_var('func_11213')
call_11214 = func_11213_call()
output = call_11214
func_11215 = relay.Function([], output)
mutated_mod['func_11215'] = func_11215
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4266_call = mod.get_global_var('func_4266')
func_4268_call = mutated_mod.get_global_var('func_4268')
call_11318 = relay.TupleGetItem(func_4266_call(), 0)
call_11319 = relay.TupleGetItem(func_4268_call(), 0)
output = call_11318
output2 = call_11319
func_11326 = relay.Function([], output)
mod['func_11326'] = func_11326
mod = relay.transform.InferType()(mod)
mutated_mod['func_11326'] = func_11326
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11326_call = mutated_mod.get_global_var('func_11326')
call_11327 = func_11326_call()
output = call_11327
func_11328 = relay.Function([], output)
mutated_mod['func_11328'] = func_11328
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9178_call = mod.get_global_var('func_9178')
func_9180_call = mutated_mod.get_global_var('func_9180')
call_11337 = func_9178_call()
call_11338 = func_9178_call()
func_11000_call = mod.get_global_var('func_11000')
func_11001_call = mutated_mod.get_global_var('func_11001')
call_11364 = relay.TupleGetItem(func_11000_call(), 0)
call_11365 = relay.TupleGetItem(func_11001_call(), 0)
output = relay.Tuple([call_11337,call_11364,])
output2 = relay.Tuple([call_11338,call_11365,])
func_11380 = relay.Function([], output)
mod['func_11380'] = func_11380
mod = relay.transform.InferType()(mod)
mutated_mod['func_11380'] = func_11380
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11380_call = mutated_mod.get_global_var('func_11380')
call_11381 = func_11380_call()
output = call_11381
func_11382 = relay.Function([], output)
mutated_mod['func_11382'] = func_11382
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9102_call = mod.get_global_var('func_9102')
func_9103_call = mutated_mod.get_global_var('func_9103')
call_11403 = relay.TupleGetItem(func_9102_call(), 0)
call_11404 = relay.TupleGetItem(func_9103_call(), 0)
uop_11409 = relay.atanh(call_11403.astype('float32')) # shape=(16, 11, 15)
uop_11411 = relay.atanh(call_11404.astype('float32')) # shape=(16, 11, 15)
output = uop_11409
output2 = uop_11411
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
