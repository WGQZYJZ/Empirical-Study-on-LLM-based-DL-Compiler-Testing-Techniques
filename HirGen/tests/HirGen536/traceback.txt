==========mod==========
#[version = "0.0.5"]
def @func_506() -> (Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) {
  %0 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
  %1 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
  %2 = %0.0;
  %3 = %1.0;
  (%2, %3)
}

def @func_1227(%var_1214: Tensor[(16, 3, 1), float32]) -> (Tensor[(16, 3, ?), int32], Tensor[(1, 3, 1), float64]) {
  %4 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
  %5 = cast(%4, dtype="int32") /* ty=Tensor[(?, 3, ?), int32] */;
  %6 = cast(%var_1214, dtype="int32") /* ty=Tensor[(16, 3, 1), int32] */;
  %7 = @func_917() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %8 = bitwise_xor(%5, %6) /* ty=Tensor[(16, 3, ?), int32] */;
  %9 = %7.0;
  (%8, %9)
}

def @func_7117(%var_7082: Tensor[(1296), int64]) -> (Tensor[(?, 3, ?), float32], Tensor[(9, 12, 12), int64], Tensor[(1296), int64], Tensor[(1, 3, 1), float64], Tensor[(18), float32], Tensor[(7, 9, 9), uint8], Tensor[(1404, ?), uint16]) {
  %10 = cast(%var_7082, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %11 = reshape(%10, newshape=[9, 12, 12]) /* ty=Tensor[(9, 12, 12), int64] */;
  %12 = @func_4478(%11) /* ty=(Tensor[(9, 12, 12), int64],) */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %14 = reshape(%13, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float32] */;
  %15 = @func_2054(%14) /* ty=(Tensor[(3, 3, 2), float32], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(1404, 1), float64] */, dtype="float64") /* ty=Tensor[(1404, 1), float64] */;
  %17 = reshape(%16, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %18 = @func_6403(%17) /* ty=(Tensor[(12, 13, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %19 = %18.0;
  %20 = cast(%19, dtype="uint16") /* ty=Tensor[(12, 13, 9), uint16] */;
  %21 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(1404, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(1404, 1), float64] */, dtype="uint16") /* ty=Tensor[(1404, 1), uint16] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %24 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
  %25 = %12.0;
  %26 = %15.2;
  %27 = @func_4335() /* ty=Tensor[(7, 9, 9), uint8] */;
  %28 = maximum(%22, %23) /* ty=Tensor[(1404, ?), uint16] */;
  (%24, %25, %var_7082, %26, meta[relay.Constant][0] /* ty=Tensor[(18), float32] */, %27, %28)
}

def @func_4709() -> (Tensor[(1, 3, 1), float64],) {
  %29 = @func_1980() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %30 = %29.0;
  (%30,)
}

def @func_2813() -> (Tensor[(?, 3, ?), float32],) {
  %31 = @func_1061() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32]) */;
  %32 = %31.2;
  (%32,)
}

def @func_2746() -> Tensor[(?, 3, ?), float32] {
  @func_2124() /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_6907() -> Tensor[(1, 3, 1), float64] {
  %33 = @func_840() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %33.0
}

def @func_4255() -> (Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) {
  %34 = @func_2142() /* ty=(Tensor[(?, 3, ?), float32],) */;
  %35 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
  %36 = %34.0;
  (%35, %36)
}

def @func_3473() -> (Tensor[(1, 3, 1), float64],) {
  %37 = @func_1867() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %38 = %37.0;
  (%38,)
}

def @func_3550(%var_3532: Tensor[(16, 11, 8), float64]) -> (Tensor[(16, 11, 8), float64], Tensor[(16, 11, 8), float32]) {
  %39 = cast(%var_3532, dtype="float64") /* ty=Tensor[(16, 11, 8), float64] */;
  %40 = cast(%var_3532, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
  %41 = atanh(%39) /* ty=Tensor[(16, 11, 8), float64] */;
  %42 = sinh(%40) /* ty=Tensor[(16, 11, 8), float32] */;
  (%41, %42)
}

def @func_5580(%var_5537: Tensor[(16, 3, 12), float32], %var_5570: Tensor[(378), int32]) -> (Tensor[(16, 3, 12), int64], Tensor[(3, 14, 9), bool], Tensor[(378), int32]) {
  %43 = @func_2813() /* ty=(Tensor[(?, 3, ?), float32],) */;
  %44 = %43.0;
  %45 = cast(%44, dtype="int64") /* ty=Tensor[(?, 3, ?), int64] */;
  %46 = cast(%var_5537, dtype="int64") /* ty=Tensor[(16, 3, 12), int64] */;
  %47 = cast(%var_5570, dtype="int32") /* ty=Tensor[(378), int32] */;
  %48 = reshape(%47, newshape=[3, 14, 9]) /* ty=Tensor[(3, 14, 9), int32] */;
  %49 = bitwise_xor(%45, %46) /* ty=Tensor[(16, 3, 12), int64] */;
  %50 = @func_1080(%48) /* ty=Tensor[(3, 14, 9), bool] */;
  (%49, %50, %var_5570)
}

def @func_4417() -> Tensor[(1, 3, 1), float64] {
  %51 = @func_2218() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %51.0
}

def @func_6210() -> (Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) {
  %52 = @func_1940() /* ty=Tensor[(?, 3, ?), float32] */;
  %53 = @func_4417() /* ty=Tensor[(1, 3, 1), float64] */;
  (%52, %53)
}

def @func_4539() -> (Tensor[(?, 3, ?), float32], Tensor[(?, 3, ?), float32]) {
  %54 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
  %55 = @func_2746() /* ty=Tensor[(?, 3, ?), float32] */;
  (%54, %55)
}

def @func_6464() -> Tensor[(?, 3, ?), uint64] {
  %56 = @func_1483() /* ty=(Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64]) */;
  %56.3
}

def @func_4204() -> Tensor[(1, 3, 1), float64] {
  %57 = @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */;
  %57.1
}

def @func_1170() -> Tensor[(1, 3, 1), float64] {
  %58 = @func_890() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %58.3
}

def @func_344() -> (Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) {
  %59 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %60 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %61 = %59.1;
  %62 = %60.0;
  (%61, %62)
}

def @func_6684(%var_6679: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), float64],) {
  %63 = @func_2359() /* ty=(Tensor[(?, 3, ?), float32],) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(?, 3, ?), float64] */;
  %66 = cast(%var_6679, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
  %67 = power(%65, %66) /* ty=Tensor[(6, 3, 8), float64] */;
  (%67,)
}

def @func_6426() -> (Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %68 = @func_3814() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %69 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %70 = %69.0;
  %71 = cast(%70, dtype="float64") /* ty=Tensor[(1, 3, 1), float64] */;
  %72 = @func_2124() /* ty=Tensor[(?, 3, ?), float32] */;
  %73 = %68.1;
  %74 = erf(%71) /* ty=Tensor[(1, 3, 1), float64] */;
  (%72, %73, %74)
}

def @func_4450(%var_4443: Tensor[(12, 7, 11), int64]) -> (Tensor[(12, 7, 11), int64],) {
  %75 = cast(%var_4443, dtype="int64") /* ty=Tensor[(12, 7, 11), int64] */;
  %76 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(12, 7, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 7, 11), int64] */, dtype="int64") /* ty=Tensor[(12, 7, 11), int64] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %79 = multiply(%77, %78) /* ty=Tensor[(12, 7, 11), int64] */;
  (%79,)
}

def @func_6127() -> Tensor[(7, 9, 16), int64] {
  %80 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 9, 16), int64] */, dtype="int64") /* ty=Tensor[(7, 9, 16), int64] */;
  %81 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(7, 9, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 9, 16), int64] */, dtype="int64") /* ty=Tensor[(7, 9, 16), int64] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  add(%82, %83) /* ty=Tensor[(7, 9, 16), int64] */
}

def @func_2395() -> Tensor[(?, 3, ?), float32] {
  @func_1940() /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_2920(%var_2879: Tensor[(10, 3, 12), float64], %var_2899: Tensor[(10, 3, 12), uint32], %var_2910: Tensor[(10, 3, 12), uint32]) -> (Tensor[(10, 3, 12), bool], Tensor[(10, 3, 12), int32], Tensor[(1, 3, 1), float64]) {
  %84 = @func_2776() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %85 = %84.1;
  %86 = cast(%85, dtype="uint32") /* ty=Tensor[(1, 3, 1), uint32] */;
  %87 = cast(%var_2879, dtype="uint32") /* ty=Tensor[(10, 3, 12), uint32] */;
  %88 = add(%86, %87) /* ty=Tensor[(10, 3, 12), uint32] */;
  %89 = cast(%var_2899, dtype="bool") /* ty=Tensor[(10, 3, 12), bool] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%88, dtype="bool") /* ty=Tensor[(10, 3, 12), bool] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %93 = cast(%var_2910, dtype="int32") /* ty=Tensor[(10, 3, 12), int32] */;
  %94 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%88, dtype="int32") /* ty=Tensor[(10, 3, 12), int32] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %97 = @func_2218() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %98 = logical_and(%91, %92) /* ty=Tensor[(10, 3, 12), bool] */;
  %99 = maximum(%95, %96) /* ty=Tensor[(10, 3, 12), int32] */;
  %100 = %97.0;
  (%98, %99, %100)
}

def @func_604() -> (Tensor[(1, 3, 1), float64],) {
  %101 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %102 = %101.0;
  (%102,)
}

def @func_6719() -> Tensor[(?, 3, ?), float64] {
  %103 = @func_4918() /* ty=(Tensor[(?, 3, ?), float64],) */;
  %103.0
}

def @func_2054(%var_2019: Tensor[(3, 3, 2), float32]) -> (Tensor[(3, 3, 2), float32], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) {
  %104 = @func_1061() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32]) */;
  %105 = %104.2;
  %106 = cast(%105, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %107 = cast(%var_2019, dtype="bool") /* ty=Tensor[(3, 3, 2), bool] */;
  %108 = greater(%106, %107) /* ty=Tensor[(3, 3, 2), bool] */;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(3, 3, 2), float32] */;
  %110 = @func_890() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %111 = @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */;
  %112 = atanh(%109) /* ty=Tensor[(3, 3, 2), float32] */;
  %113 = %110.2;
  %114 = %111.1;
  (%112, %113, %114)
}

def @func_5631() -> Tensor[(1, 3, 1), float64] {
  @func_1404() /* ty=Tensor[(1, 3, 1), float64] */
}

def @func_3570() -> Tensor[(?, 3, ?), float32] {
  %115 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %115.1
}

def @func_3814() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %116 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %117 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %118 = %116.0;
  %119 = %117.0;
  (%118, %119)
}

def @func_4284() -> (Tensor[(10, 6, 11), float64], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) {
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 6, 11), uint16] */, dtype="bool") /* ty=Tensor[(10, 6, 11), bool] */;
  %121 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(10, 6, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 6, 11), uint16] */, dtype="bool") /* ty=Tensor[(10, 6, 11), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %124 = greater(%122, %123) /* ty=Tensor[(10, 6, 11), bool] */;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(10, 6, 11), float64] */;
  %126 = log10(%125) /* ty=Tensor[(10, 6, 11), float64] */;
  %127 = @func_2395() /* ty=Tensor[(?, 3, ?), float32] */;
  %128 = @func_2603() /* ty=Tensor[(1, 3, 1), float64] */;
  (%126, %127, %128)
}

def @func_7657() -> Tensor[(?, 3, ?), uint64] {
  %129 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %129.1
}

def @func_7297(%var_7261: Tensor[(16, 3, 9), uint64]) -> (Tensor[(?, 3, ?), uint64], Tensor[(16, 3, 9), int16], Tensor[(?, 3, ?), bool], Tensor[(1, 8, 15), float64], Tensor[(3, 40), float64]) {
  %130 = @func_6388() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) */;
  %131 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %132 = %131.0;
  %133 = cast(%132, dtype="int16") /* ty=Tensor[(?, 3, ?), int16] */;
  %134 = cast(%var_7261, dtype="int16") /* ty=Tensor[(16, 3, 9), int16] */;
  %135 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
  %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 40), float64] */, dtype="float64") /* ty=Tensor[(3, 40), float64] */;
  %137 = reshape(%136, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float64] */;
  %138 = @func_5434(%137) /* ty=(Tensor[(?, 8, 15), uint8], Tensor[(1, 8, 15), float64], Tensor[(1, 3, 1), float64]) */;
  %139 = %130.1;
  %140 = bitwise_and(%133, %134) /* ty=Tensor[(16, 3, 9), int16] */;
  %141 = %135.2;
  %142 = %138.1;
  (%139, %140, %141, %142, meta[relay.Constant][7] /* ty=Tensor[(3, 40), float64] */)
}

def @func_7592() -> Tensor[(1, 3, 1), float64] {
  %143 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %143.0
}

def @func_6552(%var_6504: Tensor[(5, 9, 1), float64]) -> (Tensor[(5, 9, 1), float64], Tensor[(?, 3, ?), float32], Tensor[(?, 3, ?), uint8]) {
  %144 = cast(%var_6504, dtype="float64") /* ty=Tensor[(5, 9, 1), float64] */;
  %145 = @func_4502() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %146 = log(%144) /* ty=Tensor[(5, 9, 1), float64] */;
  %147 = %145.1;
  %148 = @func_3053() /* ty=Tensor[(?, 3, ?), uint8] */;
  (%146, %147, %148)
}

def @func_585() -> (Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) {
  %149 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %150 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %151 = %149.1;
  %152 = %150.0;
  (%151, %152)
}

def @func_3684(%var_3663: Tensor[(8, 3, 8), uint64], %var_3678: Tensor[(1408), float64]) -> (Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(8, 3, 8), float32], Tensor[(16, 11, 8), float64], Tensor[(1408), float64]) {
  %153 = @func_1867() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %154 = %153.1;
  %155 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
  %156 = cast(%155, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %157 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%154, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %160 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %161 = cast(%155, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %162 = cast(%var_3663, dtype="float32") /* ty=Tensor[(8, 3, 8), float32] */;
  %163 = cast(%var_3678, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %164 = reshape(%163, newshape=[16, 11, 8]) /* ty=Tensor[(16, 11, 8), float64] */;
  %165 = @func_3550(%164) /* ty=(Tensor[(16, 11, 8), float64], Tensor[(16, 11, 8), float32]) */;
  %166 = logical_and(%158, %159) /* ty=Tensor[(?, 3, ?), bool] */;
  %167 = @func_2395() /* ty=Tensor[(?, 3, ?), float32] */;
  %168 = %160.0;
  %169 = floor_divide(%161, %162) /* ty=Tensor[(8, 3, 8), float32] */;
  %170 = %165.0;
  (%166, %167, %168, %169, %170, %var_3678)
}

def @func_6403(%var_6391: Tensor[(12, 13, 9), float64]) -> (Tensor[(12, 13, 9), float64], Tensor[(1, 3, 1), float64]) {
  %171 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 13, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 1), float64] */;
  %172 = cast(%var_6391, dtype="float64") /* ty=Tensor[(12, 13, 9), float64] */;
  %173 = @func_2776() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %174 = mod(%171, %172) /* ty=Tensor[(12, 13, 9), float64] */;
  %175 = %173.1;
  (%174, %175)
}

def @func_5974(%var_5970: Tensor[(14, 2, 10), float64]) -> Tensor[(14, 2, 10), float64] {
  %176 = cast(%var_5970, dtype="float64") /* ty=Tensor[(14, 2, 10), float64] */;
  erf(%176) /* ty=Tensor[(14, 2, 10), float64] */
}

def @func_2161() -> Tensor[(1, 3, 1), float64] {
  %177 = @func_2077() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %177.1
}

def @func_1544(%var_1526: Tensor[(1, 3, 12), uint64]) -> (Tensor[(?, 3, 12), uint16], Tensor[(1, 3, 1), float64]) {
  %178 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %179 = %178.0;
  %180 = cast(%179, dtype="uint16") /* ty=Tensor[(?, 3, ?), uint16] */;
  %181 = cast(%var_1526, dtype="uint16") /* ty=Tensor[(1, 3, 12), uint16] */;
  %182 = @func_917() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %183 = minimum(%180, %181) /* ty=Tensor[(?, 3, 12), uint16] */;
  %184 = %182.0;
  (%183, %184)
}

def @func_2472(%var_2416: Tensor[(11, 7, 6), float32]) -> (Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(11, 7, 6), bool], Tensor[(?, 3, ?), float32]) {
  %185 = @func_1762() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64]) */;
  %186 = @func_1061() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32]) */;
  %187 = cast(%var_2416, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %188 = atanh(%187) /* ty=Tensor[(11, 7, 6), float32] */;
  %189 = cast(%var_2416, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%188, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %193 = @func_2359() /* ty=(Tensor[(?, 3, ?), float32],) */;
  %194 = %185.0;
  %195 = %186.0;
  %196 = greater(%191, %192) /* ty=Tensor[(11, 7, 6), bool] */;
  %197 = %193.0;
  (%194, %195, %196, %197)
}

def @func_1762() -> (Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64]) {
  %198 = @func_890() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %199 = %198.0;
  %200 = @func_1404() /* ty=Tensor[(1, 3, 1), float64] */;
  (%199, %200)
}

def @func_3053() -> Tensor[(?, 3, ?), uint8] {
  %201 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %202 = %201.0;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %204 = sqrt(%203) /* ty=Tensor[(1, 3, 1), float32] */;
  %205 = cast(%204, dtype="int16") /* ty=Tensor[(1, 3, 1), int16] */;
  %206 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%202, dtype="int16") /* ty=Tensor[(1, 3, 1), int16] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %209 = left_shift(%207, %208) /* ty=Tensor[(?, 3, ?), int16] */;
  %210 = cast(%202, dtype="uint8") /* ty=Tensor[(1, 3, 1), uint8] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="uint8") /* ty=Tensor[(?, 3, ?), uint8] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%212, %213) /* ty=Tensor[(?, 3, ?), uint8] */
}

def @func_1321(%var_1239: Tensor[(10, 8, 13), float32], %var_1253: Tensor[(9, 3, 13), uint64], %var_1261: Tensor[(9, 3, 13), float32]) -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(10, 8, 13), bool], Tensor[(9, 3, 13), float32], Tensor[(?, 3, ?), float32], Tensor[(16, 3, ?), int32], Tensor[(48), float32], Tensor[(?, 3, ?), uint64]) {
  %214 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %215 = @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */;
  %216 = cast(%var_1239, dtype="float32") /* ty=Tensor[(10, 8, 13), float32] */;
  %217 = asin(%216) /* ty=Tensor[(10, 8, 13), float32] */;
  %218 = cast(%var_1239, dtype="bool") /* ty=Tensor[(10, 8, 13), bool] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="bool") /* ty=Tensor[(10, 8, 13), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
  %223 = cast(%222, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %224 = cast(%var_1253, dtype="float32") /* ty=Tensor[(9, 3, 13), float32] */;
  %225 = minimum(%223, %224) /* ty=Tensor[(9, 3, 13), float32] */;
  %226 = cast(%var_1261, dtype="uint8") /* ty=Tensor[(9, 3, 13), uint8] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%225, dtype="uint8") /* ty=Tensor[(9, 3, 13), uint8] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %230 = bitwise_or(%228, %229) /* ty=Tensor[(9, 3, 13), uint8] */;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(9, 3, 13), float32] */;
  %232 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %233 = cast(meta[relay.Constant][9] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %234 = reshape(%233, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %235 = @func_1227(%234) /* ty=(Tensor[(16, 3, ?), int32], Tensor[(1, 3, 1), float64]) */;
  %236 = @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */;
  %237 = %214.0;
  %238 = %215.1;
  %239 = equal(%220, %221) /* ty=Tensor[(10, 8, 13), bool] */;
  %240 = sin(%231) /* ty=Tensor[(9, 3, 13), float32] */;
  %241 = %232.1;
  %242 = %235.0;
  %243 = %236.0;
  (%237, %238, %239, %240, %241, %242, meta[relay.Constant][9] /* ty=Tensor[(48), float32] */, %243)
}

def @func_2515() -> (Tensor[(?, 3, ?), bool],) {
  %244 = @func_2218() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %245 = %244.0;
  %246 = @func_2395() /* ty=Tensor[(?, 3, ?), float32] */;
  %247 = cast(%246, dtype="uint8") /* ty=Tensor[(?, 3, ?), uint8] */;
  %248 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%245, dtype="uint8") /* ty=Tensor[(1, 3, 1), uint8] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %251 = subtract(%249, %250) /* ty=Tensor[(?, 3, ?), uint8] */;
  %252 = cast(%245, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %256 = less_equal(%254, %255) /* ty=Tensor[(?, 3, ?), bool] */;
  (%256,)
}

def @func_5244() -> (Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32], Tensor[(7, 9, 9), float32], Tensor[(1, 3, 1), float64]) {
  %257 = @func_2726() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) */;
  %258 = @func_2142() /* ty=(Tensor[(?, 3, ?), float32],) */;
  %259 = %258.0;
  %260 = cast(%259, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %261 = @func_4335() /* ty=Tensor[(7, 9, 9), uint8] */;
  %262 = cast(%261, dtype="float32") /* ty=Tensor[(7, 9, 9), float32] */;
  %263 = exp(%262) /* ty=Tensor[(7, 9, 9), float32] */;
  %264 = cast(%263, dtype="float32") /* ty=Tensor[(7, 9, 9), float32] */;
  %265 = @func_4284() /* ty=(Tensor[(10, 6, 11), float64], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */;
  %266 = %257.0;
  %267 = sinh(%260) /* ty=Tensor[(?, 3, ?), float32] */;
  %268 = tan(%264) /* ty=Tensor[(7, 9, 9), float32] */;
  %269 = %265.2;
  (%266, %267, %268, %269)
}

def @func_3223(%var_3213: float64) -> (Tensor[(10, 10, 14), float64], Tensor[(?, 3, ?), float32]) {
  %270 = cast(%var_3213, dtype="float64") /* ty=float64 */;
  %271 = reshape(%270, newshape=[]) /* ty=float64 */;
  %272 = @func_1779(%271) /* ty=(Tensor[(10, 10, 14), float64],) */;
  %273 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
  %274 = cast(%var_3213, dtype="float32") /* ty=float32 */;
  %275 = cast(%273, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %276 = %272.0;
  %277 = power(%274, %275) /* ty=Tensor[(?, 3, ?), float32] */;
  (%276, %277)
}

def @func_3300(%var_3293: Tensor[(18), float32]) -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(18), float32], Tensor[(1, 3, 1), float64]) {
  %278 = cast(%var_3293, dtype="float32") /* ty=Tensor[(18), float32] */;
  %279 = reshape(%278, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float32] */;
  %280 = @func_2054(%279) /* ty=(Tensor[(3, 3, 2), float32], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %281 = @func_541() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %282 = @func_1170() /* ty=Tensor[(1, 3, 1), float64] */;
  %283 = %280.2;
  %284 = %281.0;
  (%282, %283, %var_3293, %284)
}

def @func_5888(%var_5877: Tensor[(1, 14, 1), float64], %var_5878: Tensor[(12, 14, 11), float64]) -> (Tensor[(12, 14, 11), float64], Tensor[(?, 3, ?), uint64]) {
  %285 = cast(%var_5877, dtype="float64") /* ty=Tensor[(1, 14, 1), float64] */;
  %286 = cast(%var_5878, dtype="float64") /* ty=Tensor[(12, 14, 11), float64] */;
  %287 = add(%285, %286) /* ty=Tensor[(12, 14, 11), float64] */;
  %288 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
  (%287, %288)
}

def @func_6091(%var_6009: Tensor[(16, 3, 6), float64], %var_6042: Tensor[(16, 3, 6), int8], %var_6055: Tensor[(16, 3, 15), float64]) -> (Tensor[(?, 3, ?), uint64], Tensor[(9, 12, 12), int64], Tensor[(16, 3, 6), float32], Tensor[(16, 3, 15), float32], Tensor[(?, 3, 1296), float64]) {
  %289 = @func_5244() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32], Tensor[(7, 9, 9), float32], Tensor[(1, 3, 1), float64]) */;
  %290 = cast(meta[relay.Constant][10] /* ty=Tensor[(1296), int64] */, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %291 = reshape(%290, newshape=[9, 12, 12]) /* ty=Tensor[(9, 12, 12), int64] */;
  %292 = @func_4478(%291) /* ty=(Tensor[(9, 12, 12), int64],) */;
  %293 = @func_4539() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(?, 3, ?), float32]) */;
  %294 = %293.1;
  %295 = @func_1170() /* ty=Tensor[(1, 3, 1), float64] */;
  %296 = cast(%295, dtype="uint8") /* ty=Tensor[(1, 3, 1), uint8] */;
  %297 = cast(%var_6009, dtype="uint8") /* ty=Tensor[(16, 3, 6), uint8] */;
  %298 = bitwise_xor(%296, %297) /* ty=Tensor[(16, 3, 6), uint8] */;
  %299 = cast(%298, dtype="int32") /* ty=Tensor[(16, 3, 6), int32] */;
  %300 = cast(%295, dtype="int32") /* ty=Tensor[(1, 3, 1), int32] */;
  %301 = minimum(%299, %300) /* ty=Tensor[(16, 3, 6), int32] */;
  %302 = cast(%294, dtype="int8") /* ty=Tensor[(?, 3, ?), int8] */;
  %303 = cast(%301, dtype="int8") /* ty=Tensor[(16, 3, 6), int8] */;
  %304 = right_shift(%302, %303) /* ty=Tensor[(16, 3, 6), int8] */;
  %305 = cast(%var_6042, dtype="float32") /* ty=Tensor[(16, 3, 6), float32] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="float32") /* ty=Tensor[(16, 3, 6), float32] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %309 = @func_3473() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %310 = %309.0;
  %311 = cast(%310, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %312 = cast(%var_6055, dtype="float32") /* ty=Tensor[(16, 3, 15), float32] */;
  %313 = @func_2515() /* ty=(Tensor[(?, 3, ?), bool],) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="uint32") /* ty=Tensor[(?, 3, ?), uint32] */;
  %316 = cast(meta[relay.Constant][10] /* ty=Tensor[(1296), int64] */, dtype="uint32") /* ty=Tensor[(1296), uint32] */;
  %317 = minimum(%315, %316) /* ty=Tensor[(?, 3, 1296), uint32] */;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(?, 3, 1296), float64] */;
  %319 = %289.0;
  %320 = %292.0;
  %321 = floor_mod(%307, %308) /* ty=Tensor[(16, 3, 6), float32] */;
  %322 = power(%311, %312) /* ty=Tensor[(16, 3, 15), float32] */;
  %323 = log10(%318) /* ty=Tensor[(?, 3, 1296), float64] */;
  (%319, %320, %321, %322, %323)
}

def @func_6162(%var_6160: Tensor[(1040), float32]) -> (Tensor[(?, 3, ?), uint64], Tensor[(12, 7, 11), int64], Tensor[(1040), float32]) {
  %324 = @func_5244() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32], Tensor[(7, 9, 9), float32], Tensor[(1, 3, 1), float64]) */;
  %325 = cast(%var_6160, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %326 = reshape(%325, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
  %327 = @func_5093(%326) /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(?, 3, ?), float64], Tensor[(9, 12, 12), int64], Tensor[(1296), int64], Tensor[(?, 3, ?), float64], Tensor[(10, 10, 14), float64], float64, Tensor[(351), uint64], Tensor[(1040), float32], Tensor[(351), uint64], Tensor[(12, 7, 11), int64], Tensor[(924), int64], Tensor[(1, 3, 1), float64]) */;
  %328 = %324.0;
  %329 = %327.10;
  (%328, %329, %var_6160)
}

def @func_725(%var_689: Tensor[(15, 9, 10), float64]) -> (Tensor[(15, 9, 10), float64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) {
  %330 = cast(%var_689, dtype="float64") /* ty=Tensor[(15, 9, 10), float64] */;
  %331 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(15, 9, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 10), float64] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %334 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %335 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %336 = mod(%332, %333) /* ty=Tensor[(15, 9, 10), float64] */;
  %337 = %334.0;
  %338 = %335.1;
  (%336, %337, %338)
}

def @func_6841(%var_6820: Tensor[(15, 3, 3), float32]) -> Tensor[(15, 3, 3), bool] {
  %339 = @func_3570() /* ty=Tensor[(?, 3, ?), float32] */;
  %340 = cast(%339, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %341 = cast(%var_6820, dtype="bool") /* ty=Tensor[(15, 3, 3), bool] */;
  %342 = not_equal(%340, %341) /* ty=Tensor[(15, 3, 3), bool] */;
  %343 = cast(%342, dtype="bool") /* ty=Tensor[(15, 3, 3), bool] */;
  %344 = cast(%339, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  greater_equal(%343, %344) /* ty=Tensor[(15, 3, 3), bool] */
}

def @func_4478(%var_4466: Tensor[(9, 12, 12), int64]) -> (Tensor[(9, 12, 12), int64],) {
  %345 = cast(%var_4466, dtype="int64") /* ty=Tensor[(9, 12, 12), int64] */;
  %346 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 12, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 12, 12), int64] */, dtype="int64") /* ty=Tensor[(9, 12, 12), int64] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %349 = bitwise_or(%347, %348) /* ty=Tensor[(9, 12, 12), int64] */;
  (%349,)
}

def @func_6765() -> (Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) {
  %350 = @func_1061() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32]) */;
  %351 = @func_4523() /* ty=(Tensor[(?, 3, ?), uint64],) */;
  %352 = @func_2813() /* ty=(Tensor[(?, 3, ?), float32],) */;
  %353 = @func_3570() /* ty=Tensor[(?, 3, ?), float32] */;
  %354 = @func_5631() /* ty=Tensor[(1, 3, 1), float64] */;
  %355 = %350.1;
  %356 = @func_6377() /* ty=Tensor[(1, 3, 1), float64] */;
  %357 = %351.0;
  %358 = %352.0;
  (%353, %354, %355, %356, %357, %358)
}

def @func_984() -> Tensor[(?, 3, ?), uint64] {
  %359 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %359.0
}

def @func_1080(%var_1074: Tensor[(3, 14, 9), int32]) -> Tensor[(3, 14, 9), bool] {
  %360 = cast(%var_1074, dtype="bool") /* ty=Tensor[(3, 14, 9), bool] */;
  %361 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(3, 14, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 14, 9), int32] */, dtype="bool") /* ty=Tensor[(3, 14, 9), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%362, %363) /* ty=Tensor[(3, 14, 9), bool] */
}

def @func_5320(%var_5315: Tensor[(16, 3, 7), float64]) -> (Tensor[(1, 3, 1), float32], Tensor[(16, 3, 7), int16]) {
  %364 = @func_4709() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %365 = %364.0;
  %366 = cast(%365, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %367 = @func_4842() /* ty=(Tensor[(?, 3, ?), float64], Tensor[(?, 3, ?), float64]) */;
  %368 = %367.0;
  %369 = cast(%368, dtype="int16") /* ty=Tensor[(?, 3, ?), int16] */;
  %370 = cast(%var_5315, dtype="int16") /* ty=Tensor[(16, 3, 7), int16] */;
  %371 = atan(%366) /* ty=Tensor[(1, 3, 1), float32] */;
  %372 = bitwise_or(%369, %370) /* ty=Tensor[(16, 3, 7), int16] */;
  (%371, %372)
}

def @func_4049() -> (Tensor[(?, 3, ?), uint64],) {
  %373 = @func_2726() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) */;
  %374 = %373.0;
  (%374,)
}

def @func_7011(%var_7007: Tensor[(42), float64], %var_7008: Tensor[(1350), float64]) -> (Tensor[(1, 3, 1), float64], Tensor[(924), int64], Tensor[(42), float64], Tensor[(1350), float64]) {
  %375 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %376 = cast(%var_7007, dtype="float64") /* ty=Tensor[(42), float64] */;
  %377 = cast(%var_7008, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %378 = reshape(%376, newshape=[2, 3, 7]) /* ty=Tensor[(2, 3, 7), float64] */;
  %379 = reshape(%377, newshape=[1350]) /* ty=Tensor[(1350), float64] */;
  %380 = @func_4635(%378, %379) /* ty=(Tensor[(2, 3, 7), int64], Tensor[(?, 3, ?), float32], Tensor[(1350), float32], Tensor[(?, 3, ?), float32], Tensor[(12, 7, 11), int64], Tensor[(924), int64]) */;
  %381 = %375.0;
  %382 = %380.5;
  (%381, %382, %var_7007, %var_7008)
}

def @func_7513() -> (Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) {
  %383 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
  %384 = %383.0;
  %385 = @func_4417() /* ty=Tensor[(1, 3, 1), float64] */;
  (%384, %385)
}

def @func_2776() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %386 = @func_917() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %387 = @func_1762() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64]) */;
  %388 = %386.0;
  %389 = %387.1;
  (%388, %389)
}

def @func_2359() -> (Tensor[(?, 3, ?), float32],) {
  %390 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
  (%390,)
}

def @func_7612() -> (Tensor[(?, 3, ?), uint64],) {
  %391 = @func_1483() /* ty=(Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64]) */;
  %392 = %391.3;
  (%392,)
}

def @func_2124() -> Tensor[(?, 3, ?), float32] {
  %393 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %393.1
}

def @func_2274(%var_2249: Tensor[(9, 12, 12), bool], %var_2258: Tensor[(9, 12, 12), bool]) -> (Tensor[(9, 12, 12), uint32], Tensor[(9, 12, 12), bool], Tensor[(9, 12, 12), float64]) {
  %394 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 12, 12), bool] */, dtype="bool") /* ty=Tensor[(9, 12, 12), bool] */;
  %395 = shape_of(%var_2249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%var_2249, dtype="bool") /* ty=Tensor[(9, 12, 12), bool] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %398 = logical_or(%396, %397) /* ty=Tensor[(9, 12, 12), bool] */;
  %399 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 12, 12), bool] */, dtype="uint32") /* ty=Tensor[(9, 12, 12), uint32] */;
  %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%398, dtype="uint32") /* ty=Tensor[(9, 12, 12), uint32] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %403 = cast(%var_2258, dtype="bool") /* ty=Tensor[(9, 12, 12), bool] */;
  %404 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%398, dtype="bool") /* ty=Tensor[(9, 12, 12), bool] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %407 = cast(%var_2249, dtype="float64") /* ty=Tensor[(9, 12, 12), float64] */;
  %408 = add(%401, %402) /* ty=Tensor[(9, 12, 12), uint32] */;
  %409 = equal(%405, %406) /* ty=Tensor[(9, 12, 12), bool] */;
  %410 = cosh(%407) /* ty=Tensor[(9, 12, 12), float64] */;
  (%408, %409, %410)
}

def @func_840() -> (Tensor[(1, 3, 1), float64],) {
  %411 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %412 = %411.0;
  (%412,)
}

def @func_541() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %413 = @func_344() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */;
  %414 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %415 = %413.1;
  %416 = %414.0;
  (%415, %416)
}

def @func_2077() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %417 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %418 = @func_1762() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64]) */;
  %419 = %417.1;
  %420 = %418.1;
  (%419, %420)
}

def @func_6388() -> (Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) {
  %421 = @func_4523() /* ty=(Tensor[(?, 3, ?), uint64],) */;
  %422 = @func_1404() /* ty=Tensor[(1, 3, 1), float64] */;
  %423 = %421.0;
  (%422, %423)
}

def @func_1404() -> Tensor[(1, 3, 1), float64] {
  %424 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %424.0
}

def @func_7162() -> (Tensor[(1, 3, 1), float64],) {
  %425 = @func_3384() /* ty=(Tensor[(?, 3, ?), float32], float64, Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) */;
  %426 = %425.4;
  (%426,)
}

def @func_1483() -> (Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64]) {
  %427 = @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */;
  %428 = %427.0;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %430 = acos(%429) /* ty=Tensor[(?, 3, ?), float32] */;
  %431 = cast(%430, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %432 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%428, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %435 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
  %436 = cast(%428, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %437 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%430, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %440 = logical_or(%438, %439) /* ty=Tensor[(?, 3, ?), bool] */;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %442 = log(%441) /* ty=Tensor[(?, 3, ?), float32] */;
  %443 = cast(%428, dtype="int8") /* ty=Tensor[(?, 3, ?), int8] */;
  %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%442, dtype="int8") /* ty=Tensor[(?, 3, ?), int8] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %447 = multiply(%445, %446) /* ty=Tensor[(?, 3, ?), int8] */;
  %448 = cast(%442, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %452 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %453 = greater_equal(%433, %434) /* ty=Tensor[(?, 3, ?), bool] */;
  %454 = %435.0;
  %455 = less(%450, %451) /* ty=Tensor[(?, 3, ?), bool] */;
  %456 = %452.1;
  (%453, %454, %455, %456)
}

def @func_6337(%var_6294: Tensor[(3, 1, 13), float64], %var_6315: Tensor[(288), float64]) -> (Tensor[(3, ?, 13), float64], Tensor[(1, 3, 1), float64], Tensor[(16, 3, 6), float32], Tensor[(288), float64], Tensor[(720), float64]) {
  %457 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 1, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 13), float64] */;
  %458 = shape_of(%var_6294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%var_6294, dtype="float64") /* ty=Tensor[(3, 1, 13), float64] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %461 = @func_4709() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %462 = cast(%var_6315, dtype="float64") /* ty=Tensor[(288), float64] */;
  %463 = cast(%var_6315, dtype="int8") /* ty=Tensor[(288), int8] */;
  %464 = cast(meta[relay.Constant][16] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %465 = reshape(%462, newshape=[16, 3, 6]) /* ty=Tensor[(16, 3, 6), float64] */;
  %466 = reshape(%463, newshape=[16, 3, 6]) /* ty=Tensor[(16, 3, 6), int8] */;
  %467 = reshape(%464, newshape=[16, 3, 15]) /* ty=Tensor[(16, 3, 15), float64] */;
  %468 = @func_6091(%465, %466, %467) /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(9, 12, 12), int64], Tensor[(16, 3, 6), float32], Tensor[(16, 3, 15), float32], Tensor[(?, 3, 1296), float64]) */;
  %469 = maximum(%459, %460) /* ty=Tensor[(3, ?, 13), float64] */;
  %470 = %461.0;
  %471 = %468.2;
  (%469, %470, %471, %var_6315, meta[relay.Constant][16] /* ty=Tensor[(720), float64] */)
}

def @main() -> (Tensor[(7, 9, 9), bool], Tensor[(7, 9, 9), float64]) {
  %472 = @func_1762() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64]) */;
  %473 = %472.0;
  %474 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 9, 9), uint8] */, dtype="bool") /* ty=Tensor[(7, 9, 9), bool] */;
  %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%473, dtype="bool") /* ty=Tensor[(7, 9, 9), bool] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %478 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 9, 9), uint8] */, dtype="float32") /* ty=Tensor[(7, 9, 9), float32] */;
  %479 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%473, dtype="float32") /* ty=Tensor[(7, 9, 9), float32] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %482 = maximum(%480, %481) /* ty=Tensor[(7, 9, 9), float32] */;
  %483 = cast(%482, dtype="bool") /* ty=Tensor[(7, 9, 9), bool] */;
  %484 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%473, dtype="bool") /* ty=Tensor[(7, 9, 9), bool] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %487 = not_equal(%485, %486) /* ty=Tensor[(7, 9, 9), bool] */;
  %488 = cast(%487, dtype="float64") /* ty=Tensor[(7, 9, 9), float64] */;
  %489 = logical_or(%476, %477) /* ty=Tensor[(7, 9, 9), bool] */;
  %490 = log(%488) /* ty=Tensor[(7, 9, 9), float64] */;
  (%489, %490)
}

def @func_2726() -> (Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) {
  %491 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %492 = %491.0;
  %493 = @func_1940() /* ty=Tensor[(?, 3, ?), float32] */;
  (%492, %493)
}

def @func_6377() -> Tensor[(1, 3, 1), float64] {
  %494 = @func_2218() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %494.0
}

def @func_4918() -> (Tensor[(?, 3, ?), float64],) {
  %495 = @func_4842() /* ty=(Tensor[(?, 3, ?), float64], Tensor[(?, 3, ?), float64]) */;
  %496 = %495.0;
  (%496,)
}

def @func_5348() -> (Tensor[(1, 3, 1), float64],) {
  %497 = @func_2218() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %498 = %497.0;
  (%498,)
}

def @func_1940() -> Tensor[(?, 3, ?), float32] {
  %499 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %499.1
}

def @func_468() -> (Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) {
  %500 = @func_344() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */;
  %501 = %500.1;
  %502 = cast(%501, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %503 = asinh(%502) /* ty=Tensor[(1, 3, 1), float32] */;
  %504 = cast(%501, dtype="uint64") /* ty=Tensor[(1, 3, 1), uint64] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%503, dtype="uint64") /* ty=Tensor[(1, 3, 1), uint64] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %508 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %509 = cast(%501, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %510 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%503, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %513 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %514 = %513.1;
  %515 = cast(%514, dtype="float64") /* ty=Tensor[(?, 3, ?), float64] */;
  %516 = add(%506, %507) /* ty=Tensor[(?, 3, ?), uint64] */;
  %517 = %508.1;
  %518 = not_equal(%511, %512) /* ty=Tensor[(?, 3, ?), bool] */;
  %519 = sigmoid(%515) /* ty=Tensor[(?, 3, ?), float64] */;
  (%516, %517, %518, %519)
}

def @func_1779(%var_1767: float64) -> (Tensor[(10, 10, 14), float64],) {
  %520 = cast(%var_1767, dtype="float64") /* ty=float64 */;
  %521 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
  %522 = mod(%520, %521) /* ty=Tensor[(10, 10, 14), float64] */;
  (%522,)
}

def @func_3384() -> (Tensor[(?, 3, ?), float32], float64, Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) {
  %523 = cast(-7.98523f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %524 = reshape(%523, newshape=[]) /* ty=float64 */;
  %525 = @func_3223(%524) /* ty=(Tensor[(10, 10, 14), float64], Tensor[(?, 3, ?), float32]) */;
  %526 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %527 = %526.0;
  %528 = @func_2077() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %529 = %528.1;
  %530 = cast(%529, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %531 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%527, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %534 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %535 = @func_780() /* ty=(Tensor[(?, 3, ?), uint64],) */;
  %536 = %525.1;
  %537 = greater(%532, %533) /* ty=Tensor[(?, 3, ?), bool] */;
  %538 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
  %539 = %534.0;
  %540 = %535.0;
  (%536, -7.98523f64 /* ty=float64 */, %537, %538, %539, %540)
}

def @func_4663() -> (Tensor[(1, 3, 1), float64],) {
  %541 = @func_2161() /* ty=Tensor[(1, 3, 1), float64] */;
  (%541,)
}

def @func_4523() -> (Tensor[(?, 3, ?), uint64],) {
  %542 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %543 = %542.0;
  (%543,)
}

def @func_780() -> (Tensor[(?, 3, ?), uint64],) {
  %544 = @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */;
  %545 = %544.0;
  (%545,)
}

def @func_393() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %546 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %547 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %548 = %546.0;
  %549 = %547.0;
  (%548, %549)
}

def @func_1014() -> Tensor[(?, 3, ?), float32] {
  %550 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %552 = exp(%551) /* ty=Tensor[(?, 3, ?), float32] */;
  %553 = cast(%550, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %554 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%552, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%555, %556) /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_1867() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %557 = @func_541() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %558 = @func_917() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %559 = %557.0;
  %560 = %558.0;
  (%559, %560)
}

def @func_4635(%var_4586: Tensor[(2, 3, 7), float64], %var_4604: Tensor[(1350), float64]) -> (Tensor[(2, 3, 7), int64], Tensor[(?, 3, ?), float32], Tensor[(1350), float32], Tensor[(?, 3, ?), float32], Tensor[(12, 7, 11), int64], Tensor[(924), int64]) {
  %561 = @func_1980() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %562 = %561.0;
  %563 = cast(%562, dtype="int64") /* ty=Tensor[(1, 3, 1), int64] */;
  %564 = cast(%var_4586, dtype="int64") /* ty=Tensor[(2, 3, 7), int64] */;
  %565 = cast(%var_4604, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %566 = reshape(%565, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float64] */;
  %567 = @func_725(%566) /* ty=(Tensor[(15, 9, 10), float64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %568 = cast(%var_4604, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %569 = cast(%var_4604, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %570 = reshape(%569, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float64] */;
  %571 = @func_725(%570) /* ty=(Tensor[(15, 9, 10), float64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %572 = cast(meta[relay.Constant][19] /* ty=Tensor[(924), int64] */, dtype="int64") /* ty=Tensor[(924), int64] */;
  %573 = reshape(%572, newshape=[12, 7, 11]) /* ty=Tensor[(12, 7, 11), int64] */;
  %574 = @func_4450(%573) /* ty=(Tensor[(12, 7, 11), int64],) */;
  %575 = left_shift(%563, %564) /* ty=Tensor[(2, 3, 7), int64] */;
  %576 = %567.2;
  %577 = sin(%568) /* ty=Tensor[(1350), float32] */;
  %578 = %571.2;
  %579 = %574.0;
  (%575, %576, %577, %578, %579, meta[relay.Constant][19] /* ty=Tensor[(924), int64] */)
}

def @func_3509(%var_3484: Tensor[(6, 2, 3), float32], %var_3505: Tensor[(1, 18), float32]) -> (Tensor[(6, 2, 3), float32], Tensor[(?, 3, ?), bool], Tensor[(1, 3, 1), float64], Tensor[(1, 18), float32]) {
  %580 = cast(%var_3484, dtype="float32") /* ty=Tensor[(6, 2, 3), float32] */;
  %581 = @func_2515() /* ty=(Tensor[(?, 3, ?), bool],) */;
  %582 = cast(%var_3505, dtype="float32") /* ty=Tensor[(1, 18), float32] */;
  %583 = reshape(%582, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %584 = @func_3300(%583) /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(18), float32], Tensor[(1, 3, 1), float64]) */;
  %585 = cosh(%580) /* ty=Tensor[(6, 2, 3), float32] */;
  %586 = %581.0;
  %587 = %584.1;
  (%585, %586, %587, %var_3505)
}

def @func_3887(%var_3869: Tensor[(1040), float32], %var_3870: Tensor[(351), uint64]) -> (Tensor[(?, 3, ?), float32], Tensor[(10, 10, 14), float64], float64, Tensor[(1040), float32], Tensor[(351), uint64], Tensor[(9, 3, 13), bool], Tensor[(1, 3, 1), float64]) {
  %588 = cast(1.48002f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %589 = reshape(%588, newshape=[]) /* ty=float64 */;
  %590 = @func_3223(%589) /* ty=(Tensor[(10, 10, 14), float64], Tensor[(?, 3, ?), float32]) */;
  %591 = @func_2603() /* ty=Tensor[(1, 3, 1), float64] */;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %593 = log10(%592) /* ty=Tensor[(1, 3, 1), float32] */;
  %594 = cast(%var_3869, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %595 = cast(%var_3870, dtype="uint64") /* ty=Tensor[(351), uint64] */;
  %596 = cast(%var_3870, dtype="float32") /* ty=Tensor[(351), float32] */;
  %597 = reshape(%594, newshape=[10, 8, 13]) /* ty=Tensor[(10, 8, 13), float32] */;
  %598 = reshape(%595, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), uint64] */;
  %599 = reshape(%596, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), float32] */;
  %600 = @func_1321(%597, %598, %599) /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(10, 8, 13), bool], Tensor[(9, 3, 13), float32], Tensor[(?, 3, ?), float32], Tensor[(16, 3, ?), int32], Tensor[(48), float32], Tensor[(?, 3, ?), uint64]) */;
  %601 = %600.3;
  %602 = cast(%593, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %603 = cast(%601, dtype="bool") /* ty=Tensor[(9, 3, 13), bool] */;
  %604 = @func_3473() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %605 = @func_2395() /* ty=Tensor[(?, 3, ?), float32] */;
  %606 = %590.0;
  %607 = greater(%602, %603) /* ty=Tensor[(9, 3, 13), bool] */;
  %608 = %604.0;
  (%605, %606, 1.48002f64 /* ty=float64 */, %var_3869, %var_3870, %607, %608)
}

def @func_4197() -> (Tensor[(7, 9, 9), uint8],) {
  %609 = @func_890() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %610 = %609.0;
  (%610,)
}

def @func_3903(%var_3893: Tensor[(14, 11, 1), uint8]) -> (Tensor[(14, 11, ?), bool], Tensor[(14, 11, 1), float64]) {
  %611 = cast(%var_3893, dtype="bool") /* ty=Tensor[(14, 11, 1), bool] */;
  %612 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(14, 11, 1), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 11, 1), uint8] */, dtype="bool") /* ty=Tensor[(14, 11, 1), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 11, 1), uint8] */, dtype="float64") /* ty=Tensor[(14, 11, 1), float64] */;
  %616 = greater_equal(%613, %614) /* ty=Tensor[(14, 11, ?), bool] */;
  %617 = erf(%615) /* ty=Tensor[(14, 11, 1), float64] */;
  (%616, %617)
}

def @func_917() -> (Tensor[(1, 3, 1), float64],) {
  %618 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %619 = %618.1;
  (%619,)
}

def @func_6265() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %620 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %621 = %620.1;
  %622 = @func_2161() /* ty=Tensor[(1, 3, 1), float64] */;
  (%621, %622)
}

def @func_296() -> (Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) {
  %623 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 1), float64] */;
  %624 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 1), float64] */;
  %625 = acosh(%624) /* ty=Tensor[(1, 3, 1), float64] */;
  %626 = cast(%625, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %627 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(1, 3, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 3, 1), float64] */, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %630 = sin(%623) /* ty=Tensor[(1, 3, 1), float64] */;
  %631 = mod(%628, %629) /* ty=Tensor[(?, 3, ?), float32] */;
  (%630, %631)
}

def @func_2603() -> Tensor[(1, 3, 1), float64] {
  %632 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %632.0
}

def @func_4893(%var_4886: Tensor[(14, 3, 16), float32]) -> (Tensor[(14, 3, 16), int32], Tensor[(1, 3, 1), float64]) {
  %633 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
  %634 = cast(%633, dtype="int32") /* ty=Tensor[(?, 3, ?), int32] */;
  %635 = cast(%var_4886, dtype="int32") /* ty=Tensor[(14, 3, 16), int32] */;
  %636 = @func_4709() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %637 = right_shift(%634, %635) /* ty=Tensor[(14, 3, 16), int32] */;
  %638 = %636.0;
  (%637, %638)
}

def @func_5403() -> (Tensor[(1, 3, 1), float64],) {
  %639 = @func_890() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %640 = %639.3;
  (%640,)
}

def @func_6616() -> float64 {
  %641 = @func_3384() /* ty=(Tensor[(?, 3, ?), float32], float64, Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) */;
  %641.1
}

def @func_2218() -> (Tensor[(1, 3, 1), float64],) {
  %642 = @func_840() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %643 = %642.0;
  (%643,)
}

def @func_2142() -> (Tensor[(?, 3, ?), float32],) {
  %644 = @func_344() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */;
  %645 = %644.0;
  (%645,)
}

def @func_5383(%var_5374: Tensor[(18), float32]) -> (Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(18), float32]) {
  %646 = cast(%var_5374, dtype="float32") /* ty=Tensor[(18), float32] */;
  %647 = reshape(%646, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %648 = @func_3300(%647) /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(18), float32], Tensor[(1, 3, 1), float64]) */;
  %649 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
  %650 = %648.3;
  (%649, %650, %var_5374)
}

def @func_5874() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], float64, Tensor[(?, 3, ?), int64], Tensor[(10, 10, 14), float64]) {
  %651 = @func_541() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %652 = cast(8.40428f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %653 = reshape(%652, newshape=[]) /* ty=float64 */;
  %654 = @func_3223(%653) /* ty=(Tensor[(10, 10, 14), float64], Tensor[(?, 3, ?), float32]) */;
  %655 = %654.1;
  %656 = @func_5631() /* ty=Tensor[(1, 3, 1), float64] */;
  %657 = cast(%656, dtype="int64") /* ty=Tensor[(1, 3, 1), int64] */;
  %658 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%655, dtype="int64") /* ty=Tensor[(?, 3, ?), int64] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %661 = cast(8.40428f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %662 = reshape(%661, newshape=[]) /* ty=float64 */;
  %663 = @func_1779(%662) /* ty=(Tensor[(10, 10, 14), float64],) */;
  %664 = @func_2161() /* ty=Tensor[(1, 3, 1), float64] */;
  %665 = %651.0;
  %666 = @func_5631() /* ty=Tensor[(1, 3, 1), float64] */;
  %667 = logical_xor(%659, %660) /* ty=Tensor[(?, 3, ?), int64] */;
  %668 = %663.0;
  (%664, %665, %666, 8.40428f64 /* ty=float64 */, %667, %668)
}

def @func_4335() -> Tensor[(7, 9, 9), uint8] {
  %669 = @func_4197() /* ty=(Tensor[(7, 9, 9), uint8],) */;
  %669.0
}

def @func_2663(%var_2651: Tensor[(15, 3, 10), float64]) -> (Tensor[(15, 3, 10), bool],) {
  %670 = @func_890() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %671 = %670.1;
  %672 = cast(%671, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %673 = cast(%var_2651, dtype="bool") /* ty=Tensor[(15, 3, 10), bool] */;
  %674 = not_equal(%672, %673) /* ty=Tensor[(15, 3, 10), bool] */;
  (%674,)
}

def @func_3975() -> Tensor[(?, 3, ?), float32] {
  @func_2746() /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_1980() -> (Tensor[(1, 3, 1), float64],) {
  %675 = @func_344() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */;
  %676 = %675.1;
  (%676,)
}

def @func_890() -> (Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) {
  %677 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 9, 9), uint8] */, dtype="uint8") /* ty=Tensor[(7, 9, 9), uint8] */;
  %678 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(7, 9, 9), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 9, 9), uint8] */, dtype="uint8") /* ty=Tensor[(7, 9, 9), uint8] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %681 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %682 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 9, 9), uint8] */, dtype="float64") /* ty=Tensor[(7, 9, 9), float64] */;
  %683 = @func_541() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %684 = right_shift(%679, %680) /* ty=Tensor[(7, 9, 9), uint8] */;
  %685 = %681.0;
  %686 = sqrt(%682) /* ty=Tensor[(7, 9, 9), float64] */;
  %687 = %683.0;
  (%684, %685, %686, %687)
}

def @func_4502() -> (Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) {
  %688 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %689 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %690 = %688.1;
  %691 = %689.1;
  (%690, %691)
}

def @func_5093(%var_5058: Tensor[(1040), float32]) -> (Tensor[(7, 9, 9), uint8], Tensor[(?, 3, ?), float64], Tensor[(9, 12, 12), int64], Tensor[(1296), int64], Tensor[(?, 3, ?), float64], Tensor[(10, 10, 14), float64], float64, Tensor[(351), uint64], Tensor[(1040), float32], Tensor[(351), uint64], Tensor[(12, 7, 11), int64], Tensor[(924), int64], Tensor[(1, 3, 1), float64]) {
  %692 = @func_4197() /* ty=(Tensor[(7, 9, 9), uint8],) */;
  %693 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
  %694 = cast(meta[relay.Constant][24] /* ty=Tensor[(1296), int64] */, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %695 = reshape(%694, newshape=[9, 12, 12]) /* ty=Tensor[(9, 12, 12), int64] */;
  %696 = @func_4478(%695) /* ty=(Tensor[(9, 12, 12), int64],) */;
  %697 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
  %698 = cast(%697, dtype="float64") /* ty=Tensor[(?, 3, ?), float64] */;
  %699 = cast(-9.64765f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %700 = reshape(%699, newshape=[]) /* ty=float64 */;
  %701 = @func_1779(%700) /* ty=(Tensor[(10, 10, 14), float64],) */;
  %702 = cast(%var_5058, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %703 = cast(meta[relay.Constant][25] /* ty=Tensor[(351), uint64] */, dtype="uint64") /* ty=Tensor[(351), uint64] */;
  %704 = reshape(%702, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
  %705 = reshape(%703, newshape=[351]) /* ty=Tensor[(351), uint64] */;
  %706 = @func_3887(%704, %705) /* ty=(Tensor[(?, 3, ?), float32], Tensor[(10, 10, 14), float64], float64, Tensor[(1040), float32], Tensor[(351), uint64], Tensor[(9, 3, 13), bool], Tensor[(1, 3, 1), float64]) */;
  %707 = cast(meta[relay.Constant][26] /* ty=Tensor[(924), int64] */, dtype="int64") /* ty=Tensor[(924), int64] */;
  %708 = reshape(%707, newshape=[12, 7, 11]) /* ty=Tensor[(12, 7, 11), int64] */;
  %709 = @func_4450(%708) /* ty=(Tensor[(12, 7, 11), int64],) */;
  %710 = @func_917() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %711 = %692.0;
  %712 = %693.3;
  %713 = %696.0;
  %714 = cos(%698) /* ty=Tensor[(?, 3, ?), float64] */;
  %715 = %701.0;
  %716 = %706.4;
  %717 = %709.0;
  %718 = %710.0;
  (%711, %712, %713, meta[relay.Constant][24] /* ty=Tensor[(1296), int64] */, %714, %715, -9.64765f64 /* ty=float64 */, %716, %var_5058, meta[relay.Constant][25] /* ty=Tensor[(351), uint64] */, %717, meta[relay.Constant][26] /* ty=Tensor[(924), int64] */, %718)
}

def @func_1061() -> (Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32]) {
  %719 = @func_541() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %720 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
  %721 = %719.0;
  %722 = %720.2;
  %723 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
  (%721, %722, %723)
}

def @func_5434(%var_5408: Tensor[(1, 8, 15), float64]) -> (Tensor[(?, 8, 15), uint8], Tensor[(1, 8, 15), float64], Tensor[(1, 3, 1), float64]) {
  %724 = cast(%var_5408, dtype="float64") /* ty=Tensor[(1, 8, 15), float64] */;
  %725 = cosh(%724) /* ty=Tensor[(1, 8, 15), float64] */;
  %726 = cast(%725, dtype="uint8") /* ty=Tensor[(1, 8, 15), uint8] */;
  %727 = shape_of(%var_5408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%var_5408, dtype="uint8") /* ty=Tensor[(1, 8, 15), uint8] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %730 = cast(%var_5408, dtype="float64") /* ty=Tensor[(1, 8, 15), float64] */;
  %731 = @func_1867() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %732 = bitwise_or(%728, %729) /* ty=Tensor[(?, 8, 15), uint8] */;
  %733 = sqrt(%730) /* ty=Tensor[(1, 8, 15), float64] */;
  %734 = %731.1;
  (%732, %733, %734)
}

def @func_4842() -> (Tensor[(?, 3, ?), float64], Tensor[(?, 3, ?), float64]) {
  %735 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %736 = %735.0;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(?, 3, ?), float64] */;
  %738 = cast(%736, dtype="float64") /* ty=Tensor[(?, 3, ?), float64] */;
  %739 = asin(%737) /* ty=Tensor[(?, 3, ?), float64] */;
  %740 = atanh(%738) /* ty=Tensor[(?, 3, ?), float64] */;
  (%739, %740)
}

def @func_3247(%var_3234: Tensor[(14, 3, 8), float64]) -> (Tensor[(14, 3, 8), bool], Tensor[(14, 3, 8), bool]) {
  %741 = @func_2077() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %742 = %741.0;
  %743 = cast(%742, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %744 = cast(%var_3234, dtype="bool") /* ty=Tensor[(14, 3, 8), bool] */;
  %745 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 3, 8), float64] */, dtype="bool") /* ty=Tensor[(14, 3, 8), bool] */;
  %746 = shape_of(%var_3234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%var_3234, dtype="bool") /* ty=Tensor[(14, 3, 8), bool] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %749 = greater(%743, %744) /* ty=Tensor[(14, 3, 8), bool] */;
  %750 = not_equal(%747, %748) /* ty=Tensor[(14, 3, 8), bool] */;
  (%749, %750)
}

def @func_7345() -> (Tensor[(?, 3, ?), uint64],) {
  %751 = @func_4523() /* ty=(Tensor[(?, 3, ?), uint64],) */;
  %752 = %751.0;
  (%752,)
}

def @func_7466() -> (Tensor[(1, 3, 1), float64],) {
  %753 = @func_1404() /* ty=Tensor[(1, 3, 1), float64] */;
  (%753,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1062() -> (Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32]) {
  %5 = fn () -> (Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32]) {
    %0 = @func_541() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
    %1 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
    %2 = %0.0;
    %3 = %1.2;
    %4 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
    (%2, %3, %4)
  };
  %5() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32]) */
}

def @func_1229(%var_1228: Tensor[(16, 3, 1), float32]) -> (Tensor[(16, 3, ?), int32], Tensor[(1, 3, 1), float64]) {
  %12 = fn (%var_1214: Tensor[(16, 3, 1), float32]) -> (Tensor[(16, 3, ?), int32], Tensor[(1, 3, 1), float64]) {
    %6 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
    %7 = cast(%6, dtype="int32") /* ty=Tensor[(?, 3, ?), int32] */;
    %8 = cast(%var_1214, dtype="int32") /* ty=Tensor[(16, 3, 1), int32] */;
    %9 = @func_917() /* ty=(Tensor[(1, 3, 1), float64],) */;
    %10 = bitwise_xor(%7, %8) /* ty=Tensor[(16, 3, ?), int32] */;
    %11 = %9.0;
    (%10, %11)
  };
  %12(%var_1228) /* ty=(Tensor[(16, 3, ?), int32], Tensor[(1, 3, 1), float64]) */
}

def @func_345() -> (Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) {
  %17 = fn () -> (Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) {
    %13 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
    %14 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
    %15 = %13.1;
    %16 = %14.0;
    (%15, %16)
  };
  %17() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */
}

def @func_3890(%var_3888: Tensor[(1040), float32], %var_3889: Tensor[(351), uint64]) -> (Tensor[(?, 3, ?), float32], Tensor[(10, 10, 14), float64], float64, Tensor[(1040), float32], Tensor[(351), uint64], Tensor[(9, 3, 13), bool], Tensor[(1, 3, 1), float64]) {
  %39 = fn (%var_3869: Tensor[(1040), float32], %var_3870: Tensor[(351), uint64]) -> (Tensor[(?, 3, ?), float32], Tensor[(10, 10, 14), float64], float64, Tensor[(1040), float32], Tensor[(351), uint64], Tensor[(9, 3, 13), bool], Tensor[(1, 3, 1), float64]) {
    %18 = cast(1.48002f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %19 = reshape(%18, newshape=[]) /* ty=float64 */;
    %20 = @func_3223(%19) /* ty=(Tensor[(10, 10, 14), float64], Tensor[(?, 3, ?), float32]) */;
    %21 = @func_2603() /* ty=Tensor[(1, 3, 1), float64] */;
    %22 = cast(%21, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
    %23 = log10(%22) /* ty=Tensor[(1, 3, 1), float32] */;
    %24 = cast(%var_3869, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %25 = cast(%var_3870, dtype="uint64") /* ty=Tensor[(351), uint64] */;
    %26 = cast(%var_3870, dtype="float32") /* ty=Tensor[(351), float32] */;
    %27 = reshape(%24, newshape=[10, 8, 13]) /* ty=Tensor[(10, 8, 13), float32] */;
    %28 = reshape(%25, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), uint64] */;
    %29 = reshape(%26, newshape=[9, 3, 13]) /* ty=Tensor[(9, 3, 13), float32] */;
    %30 = @func_1321(%27, %28, %29) /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(10, 8, 13), bool], Tensor[(9, 3, 13), float32], Tensor[(?, 3, ?), float32], Tensor[(16, 3, ?), int32], Tensor[(48), float32], Tensor[(?, 3, ?), uint64]) */;
    %31 = %30.3;
    %32 = cast(%23, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
    %33 = cast(%31, dtype="bool") /* ty=Tensor[(9, 3, 13), bool] */;
    %34 = @func_3473() /* ty=(Tensor[(1, 3, 1), float64],) */;
    %35 = @func_2395() /* ty=Tensor[(?, 3, ?), float32] */;
    %36 = %20.0;
    %37 = greater(%32, %33) /* ty=Tensor[(9, 3, 13), bool] */;
    %38 = %34.0;
    (%35, %36, 1.48002f64 /* ty=float64 */, %var_3869, %var_3870, %37, %38)
  };
  %39(%var_3888, %var_3889) /* ty=(Tensor[(?, 3, ?), float32], Tensor[(10, 10, 14), float64], float64, Tensor[(1040), float32], Tensor[(351), uint64], Tensor[(9, 3, 13), bool], Tensor[(1, 3, 1), float64]) */
}

def @func_3976() -> Tensor[(?, 3, ?), float32] {
  %40 = fn () -> Tensor[(?, 3, ?), float32] {
    @func_2746() /* ty=Tensor[(?, 3, ?), float32] */
  };
  %40() /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_2360() -> (Tensor[(?, 3, ?), float32],) {
  %42 = fn () -> (Tensor[(?, 3, ?), float32],) {
    %41 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
    (%41,)
  };
  %42() /* ty=(Tensor[(?, 3, ?), float32],) */
}

def @func_1485() -> (Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64]) {
  @func_1483() /* ty=(Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64]) */
}

def @func_2665(%var_2664: Tensor[(15, 3, 10), float64]) -> (Tensor[(15, 3, 10), bool],) {
  %48 = fn (%var_2651: Tensor[(15, 3, 10), float64]) -> (Tensor[(15, 3, 10), bool],) {
    %43 = @func_890() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
    %44 = %43.1;
    %45 = cast(%44, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
    %46 = cast(%var_2651, dtype="bool") /* ty=Tensor[(15, 3, 10), bool] */;
    %47 = not_equal(%45, %46) /* ty=Tensor[(15, 3, 10), bool] */;
    (%47,)
  };
  %48(%var_2664) /* ty=(Tensor[(15, 3, 10), bool],) */
}

def @func_587() -> (Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) {
  @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */
}

def @func_3247(%var_3234: Tensor[(14, 3, 8), float64]) -> (Tensor[(14, 3, 8), bool], Tensor[(14, 3, 8), bool]) {
  %49 = @func_2077() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %52 = cast(%var_3234, dtype="bool") /* ty=Tensor[(14, 3, 8), bool] */;
  %53 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 3, 8), float64] */, dtype="bool") /* ty=Tensor[(14, 3, 8), bool] */;
  %54 = shape_of(%var_3234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%var_3234, dtype="bool") /* ty=Tensor[(14, 3, 8), bool] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %57 = greater(%51, %52) /* ty=Tensor[(14, 3, 8), bool] */;
  %58 = not_equal(%55, %56) /* ty=Tensor[(14, 3, 8), bool] */;
  (%57, %58)
}

def @func_3905(%var_3904: Tensor[(14, 11, 1), uint8]) -> (Tensor[(14, 11, ?), bool], Tensor[(14, 11, 1), float64]) {
  %66 = fn (%var_3893: Tensor[(14, 11, 1), uint8]) -> (Tensor[(14, 11, ?), bool], Tensor[(14, 11, 1), float64]) {
    %59 = cast(%var_3893, dtype="bool") /* ty=Tensor[(14, 11, 1), bool] */;
    %60 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(14, 11, 1), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %61 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 11, 1), uint8] */, dtype="bool") /* ty=Tensor[(14, 11, 1), bool] */;
    %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %63 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 11, 1), uint8] */, dtype="float64") /* ty=Tensor[(14, 11, 1), float64] */;
    %64 = greater_equal(%61, %62) /* ty=Tensor[(14, 11, ?), bool] */;
    %65 = erf(%63) /* ty=Tensor[(14, 11, 1), float64] */;
    (%64, %65)
  };
  %66(%var_3904) /* ty=(Tensor[(14, 11, ?), bool], Tensor[(14, 11, 1), float64]) */
}

def @func_4711() -> (Tensor[(1, 3, 1), float64],) {
  @func_4709() /* ty=(Tensor[(1, 3, 1), float64],) */
}

def @func_4284() -> (Tensor[(10, 6, 11), float64], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) {
  %67 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 6, 11), uint16] */, dtype="bool") /* ty=Tensor[(10, 6, 11), bool] */;
  %68 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(10, 6, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 6, 11), uint16] */, dtype="bool") /* ty=Tensor[(10, 6, 11), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %71 = greater(%69, %70) /* ty=Tensor[(10, 6, 11), bool] */;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(10, 6, 11), float64] */;
  %73 = log10(%72) /* ty=Tensor[(10, 6, 11), float64] */;
  %74 = @func_2395() /* ty=Tensor[(?, 3, ?), float32] */;
  %75 = @func_2603() /* ty=Tensor[(1, 3, 1), float64] */;
  (%73, %74, %75)
}

def @func_6908() -> Tensor[(1, 3, 1), float64] {
  %77 = fn () -> Tensor[(1, 3, 1), float64] {
    %76 = @func_840() /* ty=(Tensor[(1, 3, 1), float64],) */;
    %76.0
  };
  %77() /* ty=Tensor[(1, 3, 1), float64] */
}

def @func_2748() -> Tensor[(?, 3, ?), float32] {
  @func_2746() /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_3475() -> (Tensor[(1, 3, 1), float64],) {
  @func_3473() /* ty=(Tensor[(1, 3, 1), float64],) */
}

def @func_986() -> Tensor[(?, 3, ?), uint64] {
  @func_984() /* ty=Tensor[(?, 3, ?), uint64] */
}

def @func_5095(%var_5094: Tensor[(1040), float32]) -> (Tensor[(7, 9, 9), uint8], Tensor[(?, 3, ?), float64], Tensor[(9, 12, 12), int64], Tensor[(1296), int64], Tensor[(?, 3, ?), float64], Tensor[(10, 10, 14), float64], float64, Tensor[(351), uint64], Tensor[(1040), float32], Tensor[(351), uint64], Tensor[(12, 7, 11), int64], Tensor[(924), int64], Tensor[(1, 3, 1), float64]) {
  %105 = fn (%var_5058: Tensor[(1040), float32]) -> (Tensor[(7, 9, 9), uint8], Tensor[(?, 3, ?), float64], Tensor[(9, 12, 12), int64], Tensor[(1296), int64], Tensor[(?, 3, ?), float64], Tensor[(10, 10, 14), float64], float64, Tensor[(351), uint64], Tensor[(1040), float32], Tensor[(351), uint64], Tensor[(12, 7, 11), int64], Tensor[(924), int64], Tensor[(1, 3, 1), float64]) {
    %78 = @func_4197() /* ty=(Tensor[(7, 9, 9), uint8],) */;
    %79 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
    %80 = cast(meta[relay.Constant][4] /* ty=Tensor[(1296), int64] */, dtype="int64") /* ty=Tensor[(1296), int64] */;
    %81 = reshape(%80, newshape=[9, 12, 12]) /* ty=Tensor[(9, 12, 12), int64] */;
    %82 = @func_4478(%81) /* ty=(Tensor[(9, 12, 12), int64],) */;
    %83 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
    %84 = cast(%83, dtype="float64") /* ty=Tensor[(?, 3, ?), float64] */;
    %85 = cast(-9.64765f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %86 = reshape(%85, newshape=[]) /* ty=float64 */;
    %87 = @func_1779(%86) /* ty=(Tensor[(10, 10, 14), float64],) */;
    %88 = cast(%var_5058, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %89 = cast(meta[relay.Constant][5] /* ty=Tensor[(351), uint64] */, dtype="uint64") /* ty=Tensor[(351), uint64] */;
    %90 = reshape(%88, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
    %91 = reshape(%89, newshape=[351]) /* ty=Tensor[(351), uint64] */;
    %92 = @func_3887(%90, %91) /* ty=(Tensor[(?, 3, ?), float32], Tensor[(10, 10, 14), float64], float64, Tensor[(1040), float32], Tensor[(351), uint64], Tensor[(9, 3, 13), bool], Tensor[(1, 3, 1), float64]) */;
    %93 = cast(meta[relay.Constant][6] /* ty=Tensor[(924), int64] */, dtype="int64") /* ty=Tensor[(924), int64] */;
    %94 = reshape(%93, newshape=[12, 7, 11]) /* ty=Tensor[(12, 7, 11), int64] */;
    %95 = @func_4450(%94) /* ty=(Tensor[(12, 7, 11), int64],) */;
    %96 = @func_917() /* ty=(Tensor[(1, 3, 1), float64],) */;
    %97 = %78.0;
    %98 = %79.3;
    %99 = %82.0;
    %100 = cos(%84) /* ty=Tensor[(?, 3, ?), float64] */;
    %101 = %87.0;
    %102 = %92.4;
    %103 = %95.0;
    %104 = %96.0;
    (%97, %98, %99, meta[relay.Constant][4] /* ty=Tensor[(1296), int64] */, %100, %101, -9.64765f64 /* ty=float64 */, %102, %var_5058, meta[relay.Constant][5] /* ty=Tensor[(351), uint64] */, %103, meta[relay.Constant][6] /* ty=Tensor[(924), int64] */, %104)
  };
  %105(%var_5094) /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(?, 3, ?), float64], Tensor[(9, 12, 12), int64], Tensor[(1296), int64], Tensor[(?, 3, ?), float64], Tensor[(10, 10, 14), float64], float64, Tensor[(351), uint64], Tensor[(1040), float32], Tensor[(351), uint64], Tensor[(12, 7, 11), int64], Tensor[(924), int64], Tensor[(1, 3, 1), float64]) */
}

def @func_7467() -> (Tensor[(1, 3, 1), float64],) {
  %107 = fn () -> (Tensor[(1, 3, 1), float64],) {
    %106 = @func_1404() /* ty=Tensor[(1, 3, 1), float64] */;
    (%106,)
  };
  %107() /* ty=(Tensor[(1, 3, 1), float64],) */
}

def @func_1546(%var_1545: Tensor[(1, 3, 12), uint64]) -> (Tensor[(?, 3, 12), uint16], Tensor[(1, 3, 1), float64]) {
  %115 = fn (%var_1526: Tensor[(1, 3, 12), uint64]) -> (Tensor[(?, 3, 12), uint16], Tensor[(1, 3, 1), float64]) {
    %108 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
    %109 = %108.0;
    %110 = cast(%109, dtype="uint16") /* ty=Tensor[(?, 3, ?), uint16] */;
    %111 = cast(%var_1526, dtype="uint16") /* ty=Tensor[(1, 3, 12), uint16] */;
    %112 = @func_917() /* ty=(Tensor[(1, 3, 1), float64],) */;
    %113 = minimum(%110, %111) /* ty=Tensor[(?, 3, 12), uint16] */;
    %114 = %112.0;
    (%113, %114)
  };
  %115(%var_1545) /* ty=(Tensor[(?, 3, 12), uint16], Tensor[(1, 3, 1), float64]) */
}

def @func_3684(%var_3663: Tensor[(8, 3, 8), uint64], %var_3678: Tensor[(1408), float64]) -> (Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(8, 3, 8), float32], Tensor[(16, 11, 8), float64], Tensor[(1408), float64]) {
  %116 = @func_1867() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %117 = %116.1;
  %118 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
  %119 = cast(%118, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %120 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%117, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %123 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %124 = cast(%118, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %125 = cast(%var_3663, dtype="float32") /* ty=Tensor[(8, 3, 8), float32] */;
  %126 = cast(%var_3678, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %127 = reshape(%126, newshape=[16, 11, 8]) /* ty=Tensor[(16, 11, 8), float64] */;
  %128 = @func_3550(%127) /* ty=(Tensor[(16, 11, 8), float64], Tensor[(16, 11, 8), float32]) */;
  %129 = logical_and(%121, %122) /* ty=Tensor[(?, 3, ?), bool] */;
  %130 = @func_2395() /* ty=Tensor[(?, 3, ?), float32] */;
  %131 = %123.0;
  %132 = floor_divide(%124, %125) /* ty=Tensor[(8, 3, 8), float32] */;
  %133 = %128.0;
  (%129, %130, %131, %132, %133, %var_3678)
}

def @func_6096(%var_6093: Tensor[(16, 3, 6), float64], %var_6094: Tensor[(16, 3, 6), int8], %var_6095: Tensor[(16, 3, 15), float64]) -> (Tensor[(?, 3, ?), uint64], Tensor[(9, 12, 12), int64], Tensor[(16, 3, 6), float32], Tensor[(16, 3, 15), float32], Tensor[(?, 3, 1296), float64]) {
  @func_6091(%var_6093, %var_6094, %var_6095) /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(9, 12, 12), int64], Tensor[(16, 3, 6), float32], Tensor[(16, 3, 15), float32], Tensor[(?, 3, 1296), float64]) */
}

def @func_6721() -> Tensor[(?, 3, ?), float64] {
  @func_6719() /* ty=Tensor[(?, 3, ?), float64] */
}

def @func_6377() -> Tensor[(1, 3, 1), float64] {
  %134 = @func_2218() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %134.0
}

def @func_3550(%var_3532: Tensor[(16, 11, 8), float64]) -> (Tensor[(16, 11, 8), float64], Tensor[(16, 11, 8), float32]) {
  %135 = cast(%var_3532, dtype="float64") /* ty=Tensor[(16, 11, 8), float64] */;
  %136 = cast(%var_3532, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
  %137 = atanh(%135) /* ty=Tensor[(16, 11, 8), float64] */;
  %138 = sinh(%136) /* ty=Tensor[(16, 11, 8), float32] */;
  (%137, %138)
}

def @func_585() -> (Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) {
  %139 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %140 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %141 = %139.1;
  %142 = %140.0;
  (%141, %142)
}

def @func_4197() -> (Tensor[(7, 9, 9), uint8],) {
  %143 = @func_890() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %144 = %143.0;
  (%144,)
}

def @func_4895(%var_4894: Tensor[(14, 3, 16), float32]) -> (Tensor[(14, 3, 16), int32], Tensor[(1, 3, 1), float64]) {
  %151 = fn (%var_4886: Tensor[(14, 3, 16), float32]) -> (Tensor[(14, 3, 16), int32], Tensor[(1, 3, 1), float64]) {
    %145 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
    %146 = cast(%145, dtype="int32") /* ty=Tensor[(?, 3, ?), int32] */;
    %147 = cast(%var_4886, dtype="int32") /* ty=Tensor[(14, 3, 16), int32] */;
    %148 = @func_4709() /* ty=(Tensor[(1, 3, 1), float64],) */;
    %149 = right_shift(%146, %147) /* ty=Tensor[(14, 3, 16), int32] */;
    %150 = %148.0;
    (%149, %150)
  };
  %151(%var_4894) /* ty=(Tensor[(14, 3, 16), int32], Tensor[(1, 3, 1), float64]) */
}

def @func_7120(%var_7118: Tensor[(1296), int64]) -> (Tensor[(?, 3, ?), float32], Tensor[(9, 12, 12), int64], Tensor[(1296), int64], Tensor[(1, 3, 1), float64], Tensor[(18), float32], Tensor[(7, 9, 9), uint8], Tensor[(1404, ?), uint16]) {
  @func_7117(%var_7118) /* ty=(Tensor[(?, 3, ?), float32], Tensor[(9, 12, 12), int64], Tensor[(1296), int64], Tensor[(1, 3, 1), float64], Tensor[(18), float32], Tensor[(7, 9, 9), uint8], Tensor[(1404, ?), uint16]) */
}

def @func_781() -> (Tensor[(?, 3, ?), uint64],) {
  %154 = fn () -> (Tensor[(?, 3, ?), uint64],) {
    %152 = @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */;
    %153 = %152.0;
    (%153,)
  };
  %154() /* ty=(Tensor[(?, 3, ?), uint64],) */
}

def @func_5385(%var_5384: Tensor[(18), float32]) -> (Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(18), float32]) {
  %160 = fn (%var_5374: Tensor[(18), float32]) -> (Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(18), float32]) {
    %155 = cast(%var_5374, dtype="float32") /* ty=Tensor[(18), float32] */;
    %156 = reshape(%155, newshape=[18]) /* ty=Tensor[(18), float32] */;
    %157 = @func_3300(%156) /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(18), float32], Tensor[(1, 3, 1), float64]) */;
    %158 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
    %159 = %157.3;
    (%158, %159, %var_5374)
  };
  %160(%var_5384) /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(18), float32]) */
}

def @func_2078() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %165 = fn () -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
    %161 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
    %162 = @func_1762() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64]) */;
    %163 = %161.1;
    %164 = %162.1;
    (%163, %164)
  };
  %165() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */
}

def @func_2515() -> (Tensor[(?, 3, ?), bool],) {
  %166 = @func_2218() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %167 = %166.0;
  %168 = @func_2395() /* ty=Tensor[(?, 3, ?), float32] */;
  %169 = cast(%168, dtype="uint8") /* ty=Tensor[(?, 3, ?), uint8] */;
  %170 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%167, dtype="uint8") /* ty=Tensor[(1, 3, 1), uint8] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %173 = subtract(%171, %172) /* ty=Tensor[(?, 3, ?), uint8] */;
  %174 = cast(%167, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %178 = less_equal(%176, %177) /* ty=Tensor[(?, 3, ?), bool] */;
  (%178,)
}

def @func_1406() -> Tensor[(1, 3, 1), float64] {
  @func_1404() /* ty=Tensor[(1, 3, 1), float64] */
}

def @func_2517() -> (Tensor[(?, 3, ?), bool],) {
  @func_2515() /* ty=(Tensor[(?, 3, ?), bool],) */
}

def @func_507() -> (Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) {
  %183 = fn () -> (Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) {
    %179 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
    %180 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
    %181 = %179.0;
    %182 = %180.0;
    (%181, %182)
  };
  %183() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */
}

def @func_842() -> (Tensor[(1, 3, 1), float64],) {
  @func_840() /* ty=(Tensor[(1, 3, 1), float64],) */
}

def @func_4503() -> (Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) {
  %188 = fn () -> (Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) {
    %184 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
    %185 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
    %186 = %184.1;
    %187 = %185.1;
    (%186, %187)
  };
  %188() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */
}

def @func_919() -> (Tensor[(1, 3, 1), float64],) {
  @func_917() /* ty=(Tensor[(1, 3, 1), float64],) */
}

def @func_1326(%var_1323: Tensor[(10, 8, 13), float32], %var_1324: Tensor[(9, 3, 13), uint64], %var_1325: Tensor[(9, 3, 13), float32]) -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(10, 8, 13), bool], Tensor[(9, 3, 13), float32], Tensor[(?, 3, ?), float32], Tensor[(16, 3, ?), int32], Tensor[(48), float32], Tensor[(?, 3, ?), uint64]) {
  @func_1321(%var_1323, %var_1324, %var_1325) /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(10, 8, 13), bool], Tensor[(9, 3, 13), float32], Tensor[(?, 3, ?), float32], Tensor[(16, 3, ?), int32], Tensor[(48), float32], Tensor[(?, 3, ?), uint64]) */
}

def @func_3570() -> Tensor[(?, 3, ?), float32] {
  %189 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %189.1
}

def @func_5888(%var_5877: Tensor[(1, 14, 1), float64], %var_5878: Tensor[(12, 14, 11), float64]) -> (Tensor[(12, 14, 11), float64], Tensor[(?, 3, ?), uint64]) {
  %190 = cast(%var_5877, dtype="float64") /* ty=Tensor[(1, 14, 1), float64] */;
  %191 = cast(%var_5878, dtype="float64") /* ty=Tensor[(12, 14, 11), float64] */;
  %192 = add(%190, %191) /* ty=Tensor[(12, 14, 11), float64] */;
  %193 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
  (%192, %193)
}

def @func_4524() -> (Tensor[(?, 3, ?), uint64],) {
  %196 = fn () -> (Tensor[(?, 3, ?), uint64],) {
    %194 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
    %195 = %194.0;
    (%195,)
  };
  %196() /* ty=(Tensor[(?, 3, ?), uint64],) */
}

def @func_6341(%var_6339: Tensor[(3, 1, 13), float64], %var_6340: Tensor[(288), float64]) -> (Tensor[(3, ?, 13), float64], Tensor[(1, 3, 1), float64], Tensor[(16, 3, 6), float32], Tensor[(288), float64], Tensor[(720), float64]) {
  @func_6337(%var_6339, %var_6340) /* ty=(Tensor[(3, ?, 13), float64], Tensor[(1, 3, 1), float64], Tensor[(16, 3, 6), float32], Tensor[(288), float64], Tensor[(720), float64]) */
}

def @func_4453(%var_4451: Tensor[(12, 7, 11), int64]) -> (Tensor[(12, 7, 11), int64],) {
  @func_4450(%var_4451) /* ty=(Tensor[(12, 7, 11), int64],) */
}

def @func_1082(%var_1081: Tensor[(3, 14, 9), int32]) -> Tensor[(3, 14, 9), bool] {
  %201 = fn (%var_1074: Tensor[(3, 14, 9), int32]) -> Tensor[(3, 14, 9), bool] {
    %197 = cast(%var_1074, dtype="bool") /* ty=Tensor[(3, 14, 9), bool] */;
    %198 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(3, 14, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %199 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 14, 9), int32] */, dtype="bool") /* ty=Tensor[(3, 14, 9), bool] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%199, %200) /* ty=Tensor[(3, 14, 9), bool] */
  };
  %201(%var_1081) /* ty=Tensor[(3, 14, 9), bool] */
}

def @func_5405() -> (Tensor[(1, 3, 1), float64],) {
  @func_5403() /* ty=(Tensor[(1, 3, 1), float64],) */
}

def @func_7117(%var_7082: Tensor[(1296), int64]) -> (Tensor[(?, 3, ?), float32], Tensor[(9, 12, 12), int64], Tensor[(1296), int64], Tensor[(1, 3, 1), float64], Tensor[(18), float32], Tensor[(7, 9, 9), uint8], Tensor[(1404, ?), uint16]) {
  %202 = cast(%var_7082, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %203 = reshape(%202, newshape=[9, 12, 12]) /* ty=Tensor[(9, 12, 12), int64] */;
  %204 = @func_4478(%203) /* ty=(Tensor[(9, 12, 12), int64],) */;
  %205 = cast(meta[relay.Constant][8] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %206 = reshape(%205, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float32] */;
  %207 = @func_2054(%206) /* ty=(Tensor[(3, 3, 2), float32], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %208 = cast(meta[relay.Constant][9] /* ty=Tensor[(1404, 1), float64] */, dtype="float64") /* ty=Tensor[(1404, 1), float64] */;
  %209 = reshape(%208, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %210 = @func_6403(%209) /* ty=(Tensor[(12, 13, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="uint16") /* ty=Tensor[(12, 13, 9), uint16] */;
  %213 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(1404, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %214 = cast(meta[relay.Constant][9] /* ty=Tensor[(1404, 1), float64] */, dtype="uint16") /* ty=Tensor[(1404, 1), uint16] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %216 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
  %217 = %204.0;
  %218 = %207.2;
  %219 = @func_4335() /* ty=Tensor[(7, 9, 9), uint8] */;
  %220 = maximum(%214, %215) /* ty=Tensor[(1404, ?), uint16] */;
  (%216, %217, %var_7082, %218, meta[relay.Constant][8] /* ty=Tensor[(18), float32] */, %219, %220)
}

def @func_4050() -> (Tensor[(?, 3, ?), uint64],) {
  %223 = fn () -> (Tensor[(?, 3, ?), uint64],) {
    %221 = @func_2726() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) */;
    %222 = %221.0;
    (%222,)
  };
  %223() /* ty=(Tensor[(?, 3, ?), uint64],) */
}

def @func_6337(%var_6294: Tensor[(3, 1, 13), float64], %var_6315: Tensor[(288), float64]) -> (Tensor[(3, ?, 13), float64], Tensor[(1, 3, 1), float64], Tensor[(16, 3, 6), float32], Tensor[(288), float64], Tensor[(720), float64]) {
  %224 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 1, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 13), float64] */;
  %225 = shape_of(%var_6294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%var_6294, dtype="float64") /* ty=Tensor[(3, 1, 13), float64] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %228 = @func_4709() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %229 = cast(%var_6315, dtype="float64") /* ty=Tensor[(288), float64] */;
  %230 = cast(%var_6315, dtype="int8") /* ty=Tensor[(288), int8] */;
  %231 = cast(meta[relay.Constant][11] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %232 = reshape(%229, newshape=[16, 3, 6]) /* ty=Tensor[(16, 3, 6), float64] */;
  %233 = reshape(%230, newshape=[16, 3, 6]) /* ty=Tensor[(16, 3, 6), int8] */;
  %234 = reshape(%231, newshape=[16, 3, 15]) /* ty=Tensor[(16, 3, 15), float64] */;
  %235 = @func_6091(%232, %233, %234) /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(9, 12, 12), int64], Tensor[(16, 3, 6), float32], Tensor[(16, 3, 15), float32], Tensor[(?, 3, 1296), float64]) */;
  %236 = maximum(%226, %227) /* ty=Tensor[(3, ?, 13), float64] */;
  %237 = %228.0;
  %238 = %235.2;
  (%236, %237, %238, %var_6315, meta[relay.Constant][11] /* ty=Tensor[(720), float64] */)
}

def @func_542() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %243 = fn () -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
    %239 = @func_344() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */;
    %240 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
    %241 = %239.1;
    %242 = %240.0;
    (%241, %242)
  };
  %243() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */
}

def @func_984() -> Tensor[(?, 3, ?), uint64] {
  %244 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %244.0
}

def @func_2056(%var_2055: Tensor[(3, 3, 2), float32]) -> (Tensor[(3, 3, 2), float32], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) {
  %256 = fn (%var_2019: Tensor[(3, 3, 2), float32]) -> (Tensor[(3, 3, 2), float32], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) {
    %245 = @func_1061() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32]) */;
    %246 = %245.2;
    %247 = cast(%246, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
    %248 = cast(%var_2019, dtype="bool") /* ty=Tensor[(3, 3, 2), bool] */;
    %249 = greater(%247, %248) /* ty=Tensor[(3, 3, 2), bool] */;
    %250 = cast(%249, dtype="float32") /* ty=Tensor[(3, 3, 2), float32] */;
    %251 = @func_890() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
    %252 = @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */;
    %253 = atanh(%250) /* ty=Tensor[(3, 3, 2), float32] */;
    %254 = %251.2;
    %255 = %252.1;
    (%253, %254, %255)
  };
  %256(%var_2055) /* ty=(Tensor[(3, 3, 2), float32], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */
}

def @func_4417() -> Tensor[(1, 3, 1), float64] {
  %257 = @func_2218() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %257.0
}

def @func_2727() -> (Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) {
  %261 = fn () -> (Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) {
    %258 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
    %259 = %258.0;
    %260 = @func_1940() /* ty=Tensor[(?, 3, ?), float32] */;
    (%259, %260)
  };
  %261() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) */
}

def @func_3553(%var_3551: Tensor[(16, 11, 8), float64]) -> (Tensor[(16, 11, 8), float64], Tensor[(16, 11, 8), float32]) {
  @func_3550(%var_3551) /* ty=(Tensor[(16, 11, 8), float64], Tensor[(16, 11, 8), float32]) */
}

def @func_6210() -> (Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) {
  %262 = @func_1940() /* ty=Tensor[(?, 3, ?), float32] */;
  %263 = @func_4417() /* ty=Tensor[(1, 3, 1), float64] */;
  (%262, %263)
}

def @func_2126() -> Tensor[(?, 3, ?), float32] {
  @func_2124() /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_4199() -> (Tensor[(7, 9, 9), uint8],) {
  @func_4197() /* ty=(Tensor[(7, 9, 9), uint8],) */
}

def @func_2218() -> (Tensor[(1, 3, 1), float64],) {
  %264 = @func_840() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %265 = %264.0;
  (%265,)
}

def @func_5323(%var_5321: Tensor[(16, 3, 7), float64]) -> (Tensor[(1, 3, 1), float32], Tensor[(16, 3, 7), int16]) {
  @func_5320(%var_5321) /* ty=(Tensor[(1, 3, 1), float32], Tensor[(16, 3, 7), int16]) */
}

def @func_3250(%var_3248: Tensor[(14, 3, 8), float64]) -> (Tensor[(14, 3, 8), bool], Tensor[(14, 3, 8), bool]) {
  @func_3247(%var_3248) /* ty=(Tensor[(14, 3, 8), bool], Tensor[(14, 3, 8), bool]) */
}

def @func_5583(%var_5581: Tensor[(16, 3, 12), float32], %var_5582: Tensor[(378), int32]) -> (Tensor[(16, 3, 12), int64], Tensor[(3, 14, 9), bool], Tensor[(378), int32]) {
  %274 = fn (%var_5537: Tensor[(16, 3, 12), float32], %var_5570: Tensor[(378), int32]) -> (Tensor[(16, 3, 12), int64], Tensor[(3, 14, 9), bool], Tensor[(378), int32]) {
    %266 = @func_2813() /* ty=(Tensor[(?, 3, ?), float32],) */;
    %267 = %266.0;
    %268 = cast(%267, dtype="int64") /* ty=Tensor[(?, 3, ?), int64] */;
    %269 = cast(%var_5537, dtype="int64") /* ty=Tensor[(16, 3, 12), int64] */;
    %270 = cast(%var_5570, dtype="int32") /* ty=Tensor[(378), int32] */;
    %271 = reshape(%270, newshape=[3, 14, 9]) /* ty=Tensor[(3, 14, 9), int32] */;
    %272 = bitwise_xor(%268, %269) /* ty=Tensor[(16, 3, 12), int64] */;
    %273 = @func_1080(%271) /* ty=Tensor[(3, 14, 9), bool] */;
    (%272, %273, %var_5570)
  };
  %274(%var_5581, %var_5582) /* ty=(Tensor[(16, 3, 12), int64], Tensor[(3, 14, 9), bool], Tensor[(378), int32]) */
}

def @func_3473() -> (Tensor[(1, 3, 1), float64],) {
  %275 = @func_1867() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %276 = %275.0;
  (%276,)
}

def @func_4639(%var_4637: Tensor[(2, 3, 7), float64], %var_4638: Tensor[(1350), float64]) -> (Tensor[(2, 3, 7), int64], Tensor[(?, 3, ?), float32], Tensor[(1350), float32], Tensor[(?, 3, ?), float32], Tensor[(12, 7, 11), int64], Tensor[(924), int64]) {
  @func_4635(%var_4637, %var_4638) /* ty=(Tensor[(2, 3, 7), int64], Tensor[(?, 3, ?), float32], Tensor[(1350), float32], Tensor[(?, 3, ?), float32], Tensor[(12, 7, 11), int64], Tensor[(924), int64]) */
}

def @func_6719() -> Tensor[(?, 3, ?), float64] {
  %277 = @func_4918() /* ty=(Tensor[(?, 3, ?), float64],) */;
  %277.0
}

def @func_5633() -> Tensor[(1, 3, 1), float64] {
  @func_5631() /* ty=Tensor[(1, 3, 1), float64] */
}

def @func_3509(%var_3484: Tensor[(6, 2, 3), float32], %var_3505: Tensor[(1, 18), float32]) -> (Tensor[(6, 2, 3), float32], Tensor[(?, 3, ?), bool], Tensor[(1, 3, 1), float64], Tensor[(1, 18), float32]) {
  %278 = cast(%var_3484, dtype="float32") /* ty=Tensor[(6, 2, 3), float32] */;
  %279 = @func_2515() /* ty=(Tensor[(?, 3, ?), bool],) */;
  %280 = cast(%var_3505, dtype="float32") /* ty=Tensor[(1, 18), float32] */;
  %281 = reshape(%280, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %282 = @func_3300(%281) /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(18), float32], Tensor[(1, 3, 1), float64]) */;
  %283 = cosh(%278) /* ty=Tensor[(6, 2, 3), float32] */;
  %284 = %279.0;
  %285 = %282.1;
  (%283, %284, %285, %var_3505)
}

def @func_1404() -> Tensor[(1, 3, 1), float64] {
  %286 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %286.0
}

def @func_3386() -> (Tensor[(?, 3, ?), float32], float64, Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) {
  @func_3384() /* ty=(Tensor[(?, 3, ?), float32], float64, Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) */
}

def @func_1171() -> Tensor[(1, 3, 1), float64] {
  %288 = fn () -> Tensor[(1, 3, 1), float64] {
    %287 = @func_890() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
    %287.3
  };
  %288() /* ty=Tensor[(1, 3, 1), float64] */
}

def @func_6618() -> float64 {
  @func_6616() /* ty=float64 */
}

def @func_1762() -> (Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64]) {
  %289 = @func_890() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %290 = %289.0;
  %291 = @func_1404() /* ty=Tensor[(1, 3, 1), float64] */;
  (%290, %291)
}

def @func_1982() -> (Tensor[(1, 3, 1), float64],) {
  @func_1980() /* ty=(Tensor[(1, 3, 1), float64],) */
}

def @func_2278(%var_2276: Tensor[(9, 12, 12), bool], %var_2277: Tensor[(9, 12, 12), bool]) -> (Tensor[(9, 12, 12), uint32], Tensor[(9, 12, 12), bool], Tensor[(9, 12, 12), float64]) {
  @func_2274(%var_2276, %var_2277) /* ty=(Tensor[(9, 12, 12), uint32], Tensor[(9, 12, 12), bool], Tensor[(9, 12, 12), float64]) */
}

def @func_6128() -> Tensor[(7, 9, 16), int64] {
  %296 = fn () -> Tensor[(7, 9, 16), int64] {
    %292 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 9, 16), int64] */, dtype="int64") /* ty=Tensor[(7, 9, 16), int64] */;
    %293 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(7, 9, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %294 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 9, 16), int64] */, dtype="int64") /* ty=Tensor[(7, 9, 16), int64] */;
    %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    add(%294, %295) /* ty=Tensor[(7, 9, 16), int64] */
  };
  %296() /* ty=Tensor[(7, 9, 16), int64] */
}

def @func_2161() -> Tensor[(1, 3, 1), float64] {
  %297 = @func_2077() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %297.1
}

def @func_3053() -> Tensor[(?, 3, ?), uint8] {
  %298 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %299 = %298.0;
  %300 = cast(%299, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %301 = sqrt(%300) /* ty=Tensor[(1, 3, 1), float32] */;
  %302 = cast(%301, dtype="int16") /* ty=Tensor[(1, 3, 1), int16] */;
  %303 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%299, dtype="int16") /* ty=Tensor[(1, 3, 1), int16] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %306 = left_shift(%304, %305) /* ty=Tensor[(?, 3, ?), int16] */;
  %307 = cast(%299, dtype="uint8") /* ty=Tensor[(1, 3, 1), uint8] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="uint8") /* ty=Tensor[(?, 3, ?), uint8] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%309, %310) /* ty=Tensor[(?, 3, ?), uint8] */
}

def @func_394() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %315 = fn () -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
    %311 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
    %312 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
    %313 = %311.0;
    %314 = %312.0;
    (%313, %314)
  };
  %315() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */
}

def @func_6267() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  @func_6265() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */
}

def @func_7015(%var_7013: Tensor[(42), float64], %var_7014: Tensor[(1350), float64]) -> (Tensor[(1, 3, 1), float64], Tensor[(924), int64], Tensor[(42), float64], Tensor[(1350), float64]) {
  @func_7011(%var_7013, %var_7014) /* ty=(Tensor[(1, 3, 1), float64], Tensor[(924), int64], Tensor[(42), float64], Tensor[(1350), float64]) */
}

def @func_4540() -> (Tensor[(?, 3, ?), float32], Tensor[(?, 3, ?), float32]) {
  %318 = fn () -> (Tensor[(?, 3, ?), float32], Tensor[(?, 3, ?), float32]) {
    %316 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
    %317 = @func_2746() /* ty=Tensor[(?, 3, ?), float32] */;
    (%316, %317)
  };
  %318() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(?, 3, ?), float32]) */
}

def @func_6555(%var_6553: Tensor[(5, 9, 1), float64]) -> (Tensor[(5, 9, 1), float64], Tensor[(?, 3, ?), float32], Tensor[(?, 3, ?), uint8]) {
  @func_6552(%var_6553) /* ty=(Tensor[(5, 9, 1), float64], Tensor[(?, 3, ?), float32], Tensor[(?, 3, ?), uint8]) */
}

def @func_3688(%var_3686: Tensor[(8, 3, 8), uint64], %var_3687: Tensor[(1408), float64]) -> (Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(8, 3, 8), float32], Tensor[(16, 11, 8), float64], Tensor[(1408), float64]) {
  @func_3684(%var_3686, %var_3687) /* ty=(Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(8, 3, 8), float32], Tensor[(16, 11, 8), float64], Tensor[(1408), float64]) */
}

def @func_1867() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %319 = @func_541() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %320 = @func_917() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %321 = %319.0;
  %322 = %320.0;
  (%321, %322)
}

def @func_2220() -> (Tensor[(1, 3, 1), float64],) {
  @func_2218() /* ty=(Tensor[(1, 3, 1), float64],) */
}

def @func_2920(%var_2879: Tensor[(10, 3, 12), float64], %var_2899: Tensor[(10, 3, 12), uint32], %var_2910: Tensor[(10, 3, 12), uint32]) -> (Tensor[(10, 3, 12), bool], Tensor[(10, 3, 12), int32], Tensor[(1, 3, 1), float64]) {
  %323 = @func_2776() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %324 = %323.1;
  %325 = cast(%324, dtype="uint32") /* ty=Tensor[(1, 3, 1), uint32] */;
  %326 = cast(%var_2879, dtype="uint32") /* ty=Tensor[(10, 3, 12), uint32] */;
  %327 = add(%325, %326) /* ty=Tensor[(10, 3, 12), uint32] */;
  %328 = cast(%var_2899, dtype="bool") /* ty=Tensor[(10, 3, 12), bool] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="bool") /* ty=Tensor[(10, 3, 12), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %332 = cast(%var_2910, dtype="int32") /* ty=Tensor[(10, 3, 12), int32] */;
  %333 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%327, dtype="int32") /* ty=Tensor[(10, 3, 12), int32] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %336 = @func_2218() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %337 = logical_and(%330, %331) /* ty=Tensor[(10, 3, 12), bool] */;
  %338 = maximum(%334, %335) /* ty=Tensor[(10, 3, 12), int32] */;
  %339 = %336.0;
  (%337, %338, %339)
}

def @func_4843() -> (Tensor[(?, 3, ?), float64], Tensor[(?, 3, ?), float64]) {
  %346 = fn () -> (Tensor[(?, 3, ?), float64], Tensor[(?, 3, ?), float64]) {
    %340 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
    %341 = %340.0;
    %342 = cast(%341, dtype="float64") /* ty=Tensor[(?, 3, ?), float64] */;
    %343 = cast(%341, dtype="float64") /* ty=Tensor[(?, 3, ?), float64] */;
    %344 = asin(%342) /* ty=Tensor[(?, 3, ?), float64] */;
    %345 = atanh(%343) /* ty=Tensor[(?, 3, ?), float64] */;
    (%344, %345)
  };
  %346() /* ty=(Tensor[(?, 3, ?), float64], Tensor[(?, 3, ?), float64]) */
}

def @func_2475(%var_2473: Tensor[(11, 7, 6), float32]) -> (Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(11, 7, 6), bool], Tensor[(?, 3, ?), float32]) {
  @func_2472(%var_2473) /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(11, 7, 6), bool], Tensor[(?, 3, ?), float32]) */
}

def @func_4255() -> (Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) {
  %347 = @func_2142() /* ty=(Tensor[(?, 3, ?), float32],) */;
  %348 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
  %349 = %347.0;
  (%348, %349)
}

def @func_7592() -> Tensor[(1, 3, 1), float64] {
  %350 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %350.0
}

def @func_470() -> (Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) {
  @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */
}

def @func_6552(%var_6504: Tensor[(5, 9, 1), float64]) -> (Tensor[(5, 9, 1), float64], Tensor[(?, 3, ?), float32], Tensor[(?, 3, ?), uint8]) {
  %351 = cast(%var_6504, dtype="float64") /* ty=Tensor[(5, 9, 1), float64] */;
  %352 = @func_4502() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %353 = log(%351) /* ty=Tensor[(5, 9, 1), float64] */;
  %354 = %352.1;
  %355 = @func_3053() /* ty=Tensor[(?, 3, ?), uint8] */;
  (%353, %354, %355)
}

def @func_5403() -> (Tensor[(1, 3, 1), float64],) {
  %356 = @func_890() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
  %357 = %356.3;
  (%357,)
}

def @func_4257() -> (Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) {
  @func_4255() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) */
}

def @func_6091(%var_6009: Tensor[(16, 3, 6), float64], %var_6042: Tensor[(16, 3, 6), int8], %var_6055: Tensor[(16, 3, 15), float64]) -> (Tensor[(?, 3, ?), uint64], Tensor[(9, 12, 12), int64], Tensor[(16, 3, 6), float32], Tensor[(16, 3, 15), float32], Tensor[(?, 3, 1296), float64]) {
  %358 = @func_5244() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32], Tensor[(7, 9, 9), float32], Tensor[(1, 3, 1), float64]) */;
  %359 = cast(meta[relay.Constant][14] /* ty=Tensor[(1296), int64] */, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %360 = reshape(%359, newshape=[9, 12, 12]) /* ty=Tensor[(9, 12, 12), int64] */;
  %361 = @func_4478(%360) /* ty=(Tensor[(9, 12, 12), int64],) */;
  %362 = @func_4539() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(?, 3, ?), float32]) */;
  %363 = %362.1;
  %364 = @func_1170() /* ty=Tensor[(1, 3, 1), float64] */;
  %365 = cast(%364, dtype="uint8") /* ty=Tensor[(1, 3, 1), uint8] */;
  %366 = cast(%var_6009, dtype="uint8") /* ty=Tensor[(16, 3, 6), uint8] */;
  %367 = bitwise_xor(%365, %366) /* ty=Tensor[(16, 3, 6), uint8] */;
  %368 = cast(%367, dtype="int32") /* ty=Tensor[(16, 3, 6), int32] */;
  %369 = cast(%364, dtype="int32") /* ty=Tensor[(1, 3, 1), int32] */;
  %370 = minimum(%368, %369) /* ty=Tensor[(16, 3, 6), int32] */;
  %371 = cast(%363, dtype="int8") /* ty=Tensor[(?, 3, ?), int8] */;
  %372 = cast(%370, dtype="int8") /* ty=Tensor[(16, 3, 6), int8] */;
  %373 = right_shift(%371, %372) /* ty=Tensor[(16, 3, 6), int8] */;
  %374 = cast(%var_6042, dtype="float32") /* ty=Tensor[(16, 3, 6), float32] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="float32") /* ty=Tensor[(16, 3, 6), float32] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %378 = @func_3473() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %379 = %378.0;
  %380 = cast(%379, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %381 = cast(%var_6055, dtype="float32") /* ty=Tensor[(16, 3, 15), float32] */;
  %382 = @func_2515() /* ty=(Tensor[(?, 3, ?), bool],) */;
  %383 = %382.0;
  %384 = cast(%383, dtype="uint32") /* ty=Tensor[(?, 3, ?), uint32] */;
  %385 = cast(meta[relay.Constant][14] /* ty=Tensor[(1296), int64] */, dtype="uint32") /* ty=Tensor[(1296), uint32] */;
  %386 = minimum(%384, %385) /* ty=Tensor[(?, 3, 1296), uint32] */;
  %387 = cast(%386, dtype="float64") /* ty=Tensor[(?, 3, 1296), float64] */;
  %388 = %358.0;
  %389 = %361.0;
  %390 = floor_mod(%376, %377) /* ty=Tensor[(16, 3, 6), float32] */;
  %391 = power(%380, %381) /* ty=Tensor[(16, 3, 15), float32] */;
  %392 = log10(%387) /* ty=Tensor[(?, 3, 1296), float64] */;
  (%388, %389, %390, %391, %392)
}

def @func_6766() -> (Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) {
  %402 = fn () -> (Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) {
    %393 = @func_1061() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32]) */;
    %394 = @func_4523() /* ty=(Tensor[(?, 3, ?), uint64],) */;
    %395 = @func_2813() /* ty=(Tensor[(?, 3, ?), float32],) */;
    %396 = @func_3570() /* ty=Tensor[(?, 3, ?), float32] */;
    %397 = @func_5631() /* ty=Tensor[(1, 3, 1), float64] */;
    %398 = %393.1;
    %399 = @func_6377() /* ty=Tensor[(1, 3, 1), float64] */;
    %400 = %394.0;
    %401 = %395.0;
    (%396, %397, %398, %399, %400, %401)
  };
  %402() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) */
}

def @func_5244() -> (Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32], Tensor[(7, 9, 9), float32], Tensor[(1, 3, 1), float64]) {
  %403 = @func_2726() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32]) */;
  %404 = @func_2142() /* ty=(Tensor[(?, 3, ?), float32],) */;
  %405 = %404.0;
  %406 = cast(%405, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %407 = @func_4335() /* ty=Tensor[(7, 9, 9), uint8] */;
  %408 = cast(%407, dtype="float32") /* ty=Tensor[(7, 9, 9), float32] */;
  %409 = exp(%408) /* ty=Tensor[(7, 9, 9), float32] */;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(7, 9, 9), float32] */;
  %411 = @func_4284() /* ty=(Tensor[(10, 6, 11), float64], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */;
  %412 = %403.0;
  %413 = sinh(%406) /* ty=Tensor[(?, 3, ?), float32] */;
  %414 = tan(%410) /* ty=Tensor[(7, 9, 9), float32] */;
  %415 = %411.2;
  (%412, %413, %414, %415)
}

def @func_6389() -> (Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) {
  %419 = fn () -> (Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) {
    %416 = @func_4523() /* ty=(Tensor[(?, 3, ?), uint64],) */;
    %417 = @func_1404() /* ty=Tensor[(1, 3, 1), float64] */;
    %418 = %416.0;
    (%417, %418)
  };
  %419() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) */
}

def @func_1321(%var_1239: Tensor[(10, 8, 13), float32], %var_1253: Tensor[(9, 3, 13), uint64], %var_1261: Tensor[(9, 3, 13), float32]) -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(10, 8, 13), bool], Tensor[(9, 3, 13), float32], Tensor[(?, 3, ?), float32], Tensor[(16, 3, ?), int32], Tensor[(48), float32], Tensor[(?, 3, ?), uint64]) {
  %420 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %421 = @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */;
  %422 = cast(%var_1239, dtype="float32") /* ty=Tensor[(10, 8, 13), float32] */;
  %423 = asin(%422) /* ty=Tensor[(10, 8, 13), float32] */;
  %424 = cast(%var_1239, dtype="bool") /* ty=Tensor[(10, 8, 13), bool] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="bool") /* ty=Tensor[(10, 8, 13), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %428 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %430 = cast(%var_1253, dtype="float32") /* ty=Tensor[(9, 3, 13), float32] */;
  %431 = minimum(%429, %430) /* ty=Tensor[(9, 3, 13), float32] */;
  %432 = cast(%var_1261, dtype="uint8") /* ty=Tensor[(9, 3, 13), uint8] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%431, dtype="uint8") /* ty=Tensor[(9, 3, 13), uint8] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %436 = bitwise_or(%434, %435) /* ty=Tensor[(9, 3, 13), uint8] */;
  %437 = cast(%436, dtype="float32") /* ty=Tensor[(9, 3, 13), float32] */;
  %438 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %439 = cast(meta[relay.Constant][15] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %440 = reshape(%439, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %441 = @func_1227(%440) /* ty=(Tensor[(16, 3, ?), int32], Tensor[(1, 3, 1), float64]) */;
  %442 = @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */;
  %443 = %420.0;
  %444 = %421.1;
  %445 = equal(%426, %427) /* ty=Tensor[(10, 8, 13), bool] */;
  %446 = sin(%437) /* ty=Tensor[(9, 3, 13), float32] */;
  %447 = %438.1;
  %448 = %441.0;
  %449 = %442.0;
  (%443, %444, %445, %446, %447, %448, meta[relay.Constant][15] /* ty=Tensor[(48), float32] */, %449)
}

def @func_3223(%var_3213: float64) -> (Tensor[(10, 10, 14), float64], Tensor[(?, 3, ?), float32]) {
  %450 = cast(%var_3213, dtype="float64") /* ty=float64 */;
  %451 = reshape(%450, newshape=[]) /* ty=float64 */;
  %452 = @func_1779(%451) /* ty=(Tensor[(10, 10, 14), float64],) */;
  %453 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
  %454 = cast(%var_3213, dtype="float32") /* ty=float32 */;
  %455 = cast(%453, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %456 = %452.0;
  %457 = power(%454, %455) /* ty=Tensor[(?, 3, ?), float32] */;
  (%456, %457)
}

def @func_3055() -> Tensor[(?, 3, ?), uint8] {
  @func_3053() /* ty=Tensor[(?, 3, ?), uint8] */
}

def @func_4336() -> Tensor[(7, 9, 9), uint8] {
  %459 = fn () -> Tensor[(7, 9, 9), uint8] {
    %458 = @func_4197() /* ty=(Tensor[(7, 9, 9), uint8],) */;
    %458.0
  };
  %459() /* ty=Tensor[(7, 9, 9), uint8] */
}

def @func_6466() -> Tensor[(?, 3, ?), uint64] {
  @func_6464() /* ty=Tensor[(?, 3, ?), uint64] */
}

def @func_6379() -> Tensor[(1, 3, 1), float64] {
  @func_6377() /* ty=Tensor[(1, 3, 1), float64] */
}

def @func_3513(%var_3511: Tensor[(6, 2, 3), float32], %var_3512: Tensor[(1, 18), float32]) -> (Tensor[(6, 2, 3), float32], Tensor[(?, 3, ?), bool], Tensor[(1, 3, 1), float64], Tensor[(1, 18), float32]) {
  @func_3509(%var_3511, %var_3512) /* ty=(Tensor[(6, 2, 3), float32], Tensor[(?, 3, ?), bool], Tensor[(1, 3, 1), float64], Tensor[(1, 18), float32]) */
}

def @func_7659() -> Tensor[(?, 3, ?), uint64] {
  @func_7657() /* ty=Tensor[(?, 3, ?), uint64] */
}

def @func_4664() -> (Tensor[(1, 3, 1), float64],) {
  %461 = fn () -> (Tensor[(1, 3, 1), float64],) {
    %460 = @func_2161() /* ty=Tensor[(1, 3, 1), float64] */;
    (%460,)
  };
  %461() /* ty=(Tensor[(1, 3, 1), float64],) */
}

def @func_725(%var_689: Tensor[(15, 9, 10), float64]) -> (Tensor[(15, 9, 10), float64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) {
  %462 = cast(%var_689, dtype="float64") /* ty=Tensor[(15, 9, 10), float64] */;
  %463 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(15, 9, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 10), float64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %466 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %467 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %468 = mod(%464, %465) /* ty=Tensor[(15, 9, 10), float64] */;
  %469 = %466.0;
  %470 = %467.1;
  (%468, %469, %470)
}

def @func_605() -> (Tensor[(1, 3, 1), float64],) {
  %473 = fn () -> (Tensor[(1, 3, 1), float64],) {
    %471 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
    %472 = %471.0;
    (%472,)
  };
  %473() /* ty=(Tensor[(1, 3, 1), float64],) */
}

def @func_3572() -> Tensor[(?, 3, ?), float32] {
  @func_3570() /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_6686(%var_6685: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), float64],) {
  %479 = fn (%var_6679: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), float64],) {
    %474 = @func_2359() /* ty=(Tensor[(?, 3, ?), float32],) */;
    %475 = %474.0;
    %476 = cast(%475, dtype="float64") /* ty=Tensor[(?, 3, ?), float64] */;
    %477 = cast(%var_6679, dtype="float64") /* ty=Tensor[(6, 3, 8), float64] */;
    %478 = power(%476, %477) /* ty=Tensor[(6, 3, 8), float64] */;
    (%478,)
  };
  %479(%var_6685) /* ty=(Tensor[(6, 3, 8), float64],) */
}

def @func_2472(%var_2416: Tensor[(11, 7, 6), float32]) -> (Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(11, 7, 6), bool], Tensor[(?, 3, ?), float32]) {
  %480 = @func_1762() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64]) */;
  %481 = @func_1061() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32]) */;
  %482 = cast(%var_2416, dtype="float32") /* ty=Tensor[(11, 7, 6), float32] */;
  %483 = atanh(%482) /* ty=Tensor[(11, 7, 6), float32] */;
  %484 = cast(%var_2416, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="bool") /* ty=Tensor[(11, 7, 6), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %488 = @func_2359() /* ty=(Tensor[(?, 3, ?), float32],) */;
  %489 = %480.0;
  %490 = %481.0;
  %491 = greater(%486, %487) /* ty=Tensor[(11, 7, 6), bool] */;
  %492 = %488.0;
  (%489, %490, %491, %492)
}

def @func_6464() -> Tensor[(?, 3, ?), uint64] {
  %493 = @func_1483() /* ty=(Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64]) */;
  %493.3
}

def @func_2274(%var_2249: Tensor[(9, 12, 12), bool], %var_2258: Tensor[(9, 12, 12), bool]) -> (Tensor[(9, 12, 12), uint32], Tensor[(9, 12, 12), bool], Tensor[(9, 12, 12), float64]) {
  %494 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 12, 12), bool] */, dtype="bool") /* ty=Tensor[(9, 12, 12), bool] */;
  %495 = shape_of(%var_2249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%var_2249, dtype="bool") /* ty=Tensor[(9, 12, 12), bool] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %498 = logical_or(%496, %497) /* ty=Tensor[(9, 12, 12), bool] */;
  %499 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 12, 12), bool] */, dtype="uint32") /* ty=Tensor[(9, 12, 12), uint32] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%498, dtype="uint32") /* ty=Tensor[(9, 12, 12), uint32] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %503 = cast(%var_2258, dtype="bool") /* ty=Tensor[(9, 12, 12), bool] */;
  %504 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%498, dtype="bool") /* ty=Tensor[(9, 12, 12), bool] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %507 = cast(%var_2249, dtype="float64") /* ty=Tensor[(9, 12, 12), float64] */;
  %508 = add(%501, %502) /* ty=Tensor[(9, 12, 12), uint32] */;
  %509 = equal(%505, %506) /* ty=Tensor[(9, 12, 12), bool] */;
  %510 = cosh(%507) /* ty=Tensor[(9, 12, 12), float64] */;
  (%508, %509, %510)
}

def @func_4635(%var_4586: Tensor[(2, 3, 7), float64], %var_4604: Tensor[(1350), float64]) -> (Tensor[(2, 3, 7), int64], Tensor[(?, 3, ?), float32], Tensor[(1350), float32], Tensor[(?, 3, ?), float32], Tensor[(12, 7, 11), int64], Tensor[(924), int64]) {
  %511 = @func_1980() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %512 = %511.0;
  %513 = cast(%512, dtype="int64") /* ty=Tensor[(1, 3, 1), int64] */;
  %514 = cast(%var_4586, dtype="int64") /* ty=Tensor[(2, 3, 7), int64] */;
  %515 = cast(%var_4604, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %516 = reshape(%515, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float64] */;
  %517 = @func_725(%516) /* ty=(Tensor[(15, 9, 10), float64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %518 = cast(%var_4604, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %519 = cast(%var_4604, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %520 = reshape(%519, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float64] */;
  %521 = @func_725(%520) /* ty=(Tensor[(15, 9, 10), float64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %522 = cast(meta[relay.Constant][18] /* ty=Tensor[(924), int64] */, dtype="int64") /* ty=Tensor[(924), int64] */;
  %523 = reshape(%522, newshape=[12, 7, 11]) /* ty=Tensor[(12, 7, 11), int64] */;
  %524 = @func_4450(%523) /* ty=(Tensor[(12, 7, 11), int64],) */;
  %525 = left_shift(%513, %514) /* ty=Tensor[(2, 3, 7), int64] */;
  %526 = %517.2;
  %527 = sin(%518) /* ty=Tensor[(1350), float32] */;
  %528 = %521.2;
  %529 = %524.0;
  (%525, %526, %527, %528, %529, meta[relay.Constant][18] /* ty=Tensor[(924), int64] */)
}

def @func_7614() -> (Tensor[(?, 3, ?), uint64],) {
  @func_7612() /* ty=(Tensor[(?, 3, ?), uint64],) */
}

def @func_7011(%var_7007: Tensor[(42), float64], %var_7008: Tensor[(1350), float64]) -> (Tensor[(1, 3, 1), float64], Tensor[(924), int64], Tensor[(42), float64], Tensor[(1350), float64]) {
  %530 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %531 = cast(%var_7007, dtype="float64") /* ty=Tensor[(42), float64] */;
  %532 = cast(%var_7008, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %533 = reshape(%531, newshape=[2, 3, 7]) /* ty=Tensor[(2, 3, 7), float64] */;
  %534 = reshape(%532, newshape=[1350]) /* ty=Tensor[(1350), float64] */;
  %535 = @func_4635(%533, %534) /* ty=(Tensor[(2, 3, 7), int64], Tensor[(?, 3, ?), float32], Tensor[(1350), float32], Tensor[(?, 3, ?), float32], Tensor[(12, 7, 11), int64], Tensor[(924), int64]) */;
  %536 = %530.0;
  %537 = %535.5;
  (%536, %537, %var_7007, %var_7008)
}

def @func_2814() -> (Tensor[(?, 3, ?), float32],) {
  %540 = fn () -> (Tensor[(?, 3, ?), float32],) {
    %538 = @func_1061() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32]) */;
    %539 = %538.2;
    (%539,)
  };
  %540() /* ty=(Tensor[(?, 3, ?), float32],) */
}

def @func_2925(%var_2922: Tensor[(10, 3, 12), float64], %var_2923: Tensor[(10, 3, 12), uint32], %var_2924: Tensor[(10, 3, 12), uint32]) -> (Tensor[(10, 3, 12), bool], Tensor[(10, 3, 12), int32], Tensor[(1, 3, 1), float64]) {
  @func_2920(%var_2922, %var_2923, %var_2924) /* ty=(Tensor[(10, 3, 12), bool], Tensor[(10, 3, 12), int32], Tensor[(1, 3, 1), float64]) */
}

def @func_4286() -> (Tensor[(10, 6, 11), float64], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) {
  @func_4284() /* ty=(Tensor[(10, 6, 11), float64], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */
}

def @func_3226(%var_3224: float64) -> (Tensor[(10, 10, 14), float64], Tensor[(?, 3, ?), float32]) {
  @func_3223(%var_3224) /* ty=(Tensor[(10, 10, 14), float64], Tensor[(?, 3, ?), float32]) */
}

def @func_4419() -> Tensor[(1, 3, 1), float64] {
  @func_4417() /* ty=Tensor[(1, 3, 1), float64] */
}

def @func_7346() -> (Tensor[(?, 3, ?), uint64],) {
  %543 = fn () -> (Tensor[(?, 3, ?), uint64],) {
    %541 = @func_4523() /* ty=(Tensor[(?, 3, ?), uint64],) */;
    %542 = %541.0;
    (%542,)
  };
  %543() /* ty=(Tensor[(?, 3, ?), uint64],) */
}

def @func_6616() -> float64 {
  %544 = @func_3384() /* ty=(Tensor[(?, 3, ?), float32], float64, Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) */;
  %544.1
}

def @func_728(%var_726: Tensor[(15, 9, 10), float64]) -> (Tensor[(15, 9, 10), float64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) {
  @func_725(%var_726) /* ty=(Tensor[(15, 9, 10), float64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */
}

def @main() -> (Tensor[(7, 9, 9), bool], Tensor[(7, 9, 9), float64]) {
  %545 = @func_1764() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64]) */;
  %546 = %545.0;
  %547 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 9, 9), uint8] */, dtype="bool") /* ty=Tensor[(7, 9, 9), bool] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="bool") /* ty=Tensor[(7, 9, 9), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 9, 9), uint8] */, dtype="float32") /* ty=Tensor[(7, 9, 9), float32] */;
  %552 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%546, dtype="float32") /* ty=Tensor[(7, 9, 9), float32] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %555 = maximum(%553, %554) /* ty=Tensor[(7, 9, 9), float32] */;
  %556 = cast(%555, dtype="bool") /* ty=Tensor[(7, 9, 9), bool] */;
  %557 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%546, dtype="bool") /* ty=Tensor[(7, 9, 9), bool] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %560 = not_equal(%558, %559) /* ty=Tensor[(7, 9, 9), bool] */;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(7, 9, 9), float64] */;
  %562 = logical_or(%549, %550) /* ty=Tensor[(7, 9, 9), bool] */;
  %563 = log(%561) /* ty=Tensor[(7, 9, 9), float64] */;
  (%562, %563)
}

def @func_4709() -> (Tensor[(1, 3, 1), float64],) {
  %564 = @func_1980() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %565 = %564.0;
  (%565,)
}

def @func_1940() -> Tensor[(?, 3, ?), float32] {
  %566 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %566.1
}

def @func_6427() -> (Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %574 = fn () -> (Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
    %567 = @func_3814() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
    %568 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
    %569 = %568.0;
    %570 = cast(%569, dtype="float64") /* ty=Tensor[(1, 3, 1), float64] */;
    %571 = @func_2124() /* ty=Tensor[(?, 3, ?), float32] */;
    %572 = %567.1;
    %573 = erf(%570) /* ty=Tensor[(1, 3, 1), float64] */;
    (%571, %572, %573)
  };
  %574() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */
}

def @func_6212() -> (Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) {
  @func_6210() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */
}

def @func_5874() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], float64, Tensor[(?, 3, ?), int64], Tensor[(10, 10, 14), float64]) {
  %575 = @func_541() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %576 = cast(8.40428f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %577 = reshape(%576, newshape=[]) /* ty=float64 */;
  %578 = @func_3223(%577) /* ty=(Tensor[(10, 10, 14), float64], Tensor[(?, 3, ?), float32]) */;
  %579 = %578.1;
  %580 = @func_5631() /* ty=Tensor[(1, 3, 1), float64] */;
  %581 = cast(%580, dtype="int64") /* ty=Tensor[(1, 3, 1), int64] */;
  %582 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%579, dtype="int64") /* ty=Tensor[(?, 3, ?), int64] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %585 = cast(8.40428f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %586 = reshape(%585, newshape=[]) /* ty=float64 */;
  %587 = @func_1779(%586) /* ty=(Tensor[(10, 10, 14), float64],) */;
  %588 = @func_2161() /* ty=Tensor[(1, 3, 1), float64] */;
  %589 = %575.0;
  %590 = @func_5631() /* ty=Tensor[(1, 3, 1), float64] */;
  %591 = logical_xor(%583, %584) /* ty=Tensor[(?, 3, ?), int64] */;
  %592 = %587.0;
  (%588, %589, %590, 8.40428f64 /* ty=float64 */, %591, %592)
}

def @func_2163() -> Tensor[(1, 3, 1), float64] {
  @func_2161() /* ty=Tensor[(1, 3, 1), float64] */
}

def @func_1764() -> (Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64]) {
  @func_1762() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64]) */
}

def @func_6164(%var_6163: Tensor[(1040), float32]) -> (Tensor[(?, 3, ?), uint64], Tensor[(12, 7, 11), int64], Tensor[(1040), float32]) {
  %599 = fn (%var_6160: Tensor[(1040), float32]) -> (Tensor[(?, 3, ?), uint64], Tensor[(12, 7, 11), int64], Tensor[(1040), float32]) {
    %593 = @func_5244() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32], Tensor[(7, 9, 9), float32], Tensor[(1, 3, 1), float64]) */;
    %594 = cast(%var_6160, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %595 = reshape(%594, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
    %596 = @func_5093(%595) /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(?, 3, ?), float64], Tensor[(9, 12, 12), int64], Tensor[(1296), int64], Tensor[(?, 3, ?), float64], Tensor[(10, 10, 14), float64], float64, Tensor[(351), uint64], Tensor[(1040), float32], Tensor[(351), uint64], Tensor[(12, 7, 11), int64], Tensor[(924), int64], Tensor[(1, 3, 1), float64]) */;
    %597 = %593.0;
    %598 = %596.10;
    (%597, %598, %var_6160)
  };
  %599(%var_6163) /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(12, 7, 11), int64], Tensor[(1040), float32]) */
}

def @func_891() -> (Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) {
  %611 = fn () -> (Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) {
    %600 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 9, 9), uint8] */, dtype="uint8") /* ty=Tensor[(7, 9, 9), uint8] */;
    %601 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(7, 9, 9), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %602 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 9, 9), uint8] */, dtype="uint8") /* ty=Tensor[(7, 9, 9), uint8] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %604 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
    %605 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 9, 9), uint8] */, dtype="float64") /* ty=Tensor[(7, 9, 9), float64] */;
    %606 = @func_541() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
    %607 = right_shift(%602, %603) /* ty=Tensor[(7, 9, 9), uint8] */;
    %608 = %604.0;
    %609 = sqrt(%605) /* ty=Tensor[(7, 9, 9), float64] */;
    %610 = %606.0;
    (%607, %608, %609, %610)
  };
  %611() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */
}

def @func_2396() -> Tensor[(?, 3, ?), float32] {
  %612 = fn () -> Tensor[(?, 3, ?), float32] {
    @func_1940() /* ty=Tensor[(?, 3, ?), float32] */
  };
  %612() /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_7515() -> (Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) {
  @func_7513() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */
}

def @func_5348() -> (Tensor[(1, 3, 1), float64],) {
  %613 = @func_2218() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %614 = %613.0;
  (%614,)
}

def @func_2603() -> Tensor[(1, 3, 1), float64] {
  %615 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %615.0
}

def @func_297() -> (Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) {
  %625 = fn () -> (Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) {
    %616 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 1), float64] */;
    %617 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 1), float64] */;
    %618 = acosh(%617) /* ty=Tensor[(1, 3, 1), float64] */;
    %619 = cast(%618, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
    %620 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(1, 3, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 3, 1), float64] */, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %623 = sin(%616) /* ty=Tensor[(1, 3, 1), float64] */;
    %624 = mod(%621, %622) /* ty=Tensor[(?, 3, ?), float32] */;
    (%623, %624)
  };
  %625() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */
}

def @func_5892(%var_5890: Tensor[(1, 14, 1), float64], %var_5891: Tensor[(12, 14, 11), float64]) -> (Tensor[(12, 14, 11), float64], Tensor[(?, 3, ?), uint64]) {
  @func_5888(%var_5890, %var_5891) /* ty=(Tensor[(12, 14, 11), float64], Tensor[(?, 3, ?), uint64]) */
}

def @func_2746() -> Tensor[(?, 3, ?), float32] {
  @func_2124() /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_4205() -> Tensor[(1, 3, 1), float64] {
  %627 = fn () -> Tensor[(1, 3, 1), float64] {
    %626 = @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */;
    %626.1
  };
  %627() /* ty=Tensor[(1, 3, 1), float64] */
}

def @func_4450(%var_4443: Tensor[(12, 7, 11), int64]) -> (Tensor[(12, 7, 11), int64],) {
  %628 = cast(%var_4443, dtype="int64") /* ty=Tensor[(12, 7, 11), int64] */;
  %629 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(12, 7, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 7, 11), int64] */, dtype="int64") /* ty=Tensor[(12, 7, 11), int64] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %632 = multiply(%630, %631) /* ty=Tensor[(12, 7, 11), int64] */;
  (%632,)
}

def @func_3815() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %637 = fn () -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
    %633 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
    %634 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
    %635 = %633.0;
    %636 = %634.0;
    (%635, %636)
  };
  %637() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */
}

def @func_5320(%var_5315: Tensor[(16, 3, 7), float64]) -> (Tensor[(1, 3, 1), float32], Tensor[(16, 3, 7), int16]) {
  %638 = @func_4709() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %639 = %638.0;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %641 = @func_4842() /* ty=(Tensor[(?, 3, ?), float64], Tensor[(?, 3, ?), float64]) */;
  %642 = %641.0;
  %643 = cast(%642, dtype="int16") /* ty=Tensor[(?, 3, ?), int16] */;
  %644 = cast(%var_5315, dtype="int16") /* ty=Tensor[(16, 3, 7), int16] */;
  %645 = atan(%640) /* ty=Tensor[(1, 3, 1), float32] */;
  %646 = bitwise_or(%643, %644) /* ty=Tensor[(16, 3, 7), int16] */;
  (%645, %646)
}

def @func_6843(%var_6842: Tensor[(15, 3, 3), float32]) -> Tensor[(15, 3, 3), bool] {
  %653 = fn (%var_6820: Tensor[(15, 3, 3), float32]) -> Tensor[(15, 3, 3), bool] {
    %647 = @func_3570() /* ty=Tensor[(?, 3, ?), float32] */;
    %648 = cast(%647, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
    %649 = cast(%var_6820, dtype="bool") /* ty=Tensor[(15, 3, 3), bool] */;
    %650 = not_equal(%648, %649) /* ty=Tensor[(15, 3, 3), bool] */;
    %651 = cast(%650, dtype="bool") /* ty=Tensor[(15, 3, 3), bool] */;
    %652 = cast(%647, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
    greater_equal(%651, %652) /* ty=Tensor[(15, 3, 3), bool] */
  };
  %653(%var_6842) /* ty=Tensor[(15, 3, 3), bool] */
}

def @func_5631() -> Tensor[(1, 3, 1), float64] {
  @func_1404() /* ty=Tensor[(1, 3, 1), float64] */
}

def @func_4480(%var_4479: Tensor[(9, 12, 12), int64]) -> (Tensor[(9, 12, 12), int64],) {
  %659 = fn (%var_4466: Tensor[(9, 12, 12), int64]) -> (Tensor[(9, 12, 12), int64],) {
    %654 = cast(%var_4466, dtype="int64") /* ty=Tensor[(9, 12, 12), int64] */;
    %655 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(9, 12, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %656 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 12, 12), int64] */, dtype="int64") /* ty=Tensor[(9, 12, 12), int64] */;
    %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %658 = bitwise_or(%656, %657) /* ty=Tensor[(9, 12, 12), int64] */;
    (%658,)
  };
  %659(%var_4479) /* ty=(Tensor[(9, 12, 12), int64],) */
}

def @func_1980() -> (Tensor[(1, 3, 1), float64],) {
  %660 = @func_344() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */;
  %661 = %660.1;
  (%661,)
}

def @func_6405(%var_6404: Tensor[(12, 13, 9), float64]) -> (Tensor[(12, 13, 9), float64], Tensor[(1, 3, 1), float64]) {
  %667 = fn (%var_6391: Tensor[(12, 13, 9), float64]) -> (Tensor[(12, 13, 9), float64], Tensor[(1, 3, 1), float64]) {
    %662 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 13, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 1), float64] */;
    %663 = cast(%var_6391, dtype="float64") /* ty=Tensor[(12, 13, 9), float64] */;
    %664 = @func_2776() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
    %665 = mod(%662, %663) /* ty=Tensor[(12, 13, 9), float64] */;
    %666 = %664.1;
    (%665, %666)
  };
  %667(%var_6404) /* ty=(Tensor[(12, 13, 9), float64], Tensor[(1, 3, 1), float64]) */
}

def @func_7612() -> (Tensor[(?, 3, ?), uint64],) {
  %668 = @func_1483() /* ty=(Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64]) */;
  %669 = %668.3;
  (%669,)
}

def @func_1942() -> Tensor[(?, 3, ?), float32] {
  @func_1940() /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_5246() -> (Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32], Tensor[(7, 9, 9), float32], Tensor[(1, 3, 1), float64]) {
  @func_5244() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), float32], Tensor[(7, 9, 9), float32], Tensor[(1, 3, 1), float64]) */
}

def @func_7657() -> Tensor[(?, 3, ?), uint64] {
  %670 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %670.1
}

def @func_1781(%var_1780: float64) -> (Tensor[(10, 10, 14), float64],) {
  %674 = fn (%var_1767: float64) -> (Tensor[(10, 10, 14), float64],) {
    %671 = cast(%var_1767, dtype="float64") /* ty=float64 */;
    %672 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
    %673 = mod(%671, %672) /* ty=Tensor[(10, 10, 14), float64] */;
    (%673,)
  };
  %674(%var_1780) /* ty=(Tensor[(10, 10, 14), float64],) */
}

def @func_7163() -> (Tensor[(1, 3, 1), float64],) {
  %677 = fn () -> (Tensor[(1, 3, 1), float64],) {
    %675 = @func_3384() /* ty=(Tensor[(?, 3, ?), float32], float64, Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) */;
    %676 = %675.4;
    (%676,)
  };
  %677() /* ty=(Tensor[(1, 3, 1), float64],) */
}

def @func_5876() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], float64, Tensor[(?, 3, ?), int64], Tensor[(10, 10, 14), float64]) {
  @func_5874() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], float64, Tensor[(?, 3, ?), int64], Tensor[(10, 10, 14), float64]) */
}

def @func_2124() -> Tensor[(?, 3, ?), float32] {
  %678 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %678.1
}

def @func_4919() -> (Tensor[(?, 3, ?), float64],) {
  %681 = fn () -> (Tensor[(?, 3, ?), float64],) {
    %679 = @func_4842() /* ty=(Tensor[(?, 3, ?), float64], Tensor[(?, 3, ?), float64]) */;
    %680 = %679.0;
    (%680,)
  };
  %681() /* ty=(Tensor[(?, 3, ?), float64],) */
}

def @func_917() -> (Tensor[(1, 3, 1), float64],) {
  %682 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %683 = %682.1;
  (%683,)
}

def @func_1014() -> Tensor[(?, 3, ?), float32] {
  %684 = @func_984() /* ty=Tensor[(?, 3, ?), uint64] */;
  %685 = cast(%684, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %686 = exp(%685) /* ty=Tensor[(?, 3, ?), float32] */;
  %687 = cast(%684, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%689, %690) /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_7299(%var_7298: Tensor[(16, 3, 9), uint64]) -> (Tensor[(?, 3, ?), uint64], Tensor[(16, 3, 9), int16], Tensor[(?, 3, ?), bool], Tensor[(1, 8, 15), float64], Tensor[(3, 40), float64]) {
  %704 = fn (%var_7261: Tensor[(16, 3, 9), uint64]) -> (Tensor[(?, 3, ?), uint64], Tensor[(16, 3, 9), int16], Tensor[(?, 3, ?), bool], Tensor[(1, 8, 15), float64], Tensor[(3, 40), float64]) {
    %691 = @func_6388() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) */;
    %692 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
    %693 = %692.0;
    %694 = cast(%693, dtype="int16") /* ty=Tensor[(?, 3, ?), int16] */;
    %695 = cast(%var_7261, dtype="int16") /* ty=Tensor[(16, 3, 9), int16] */;
    %696 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
    %697 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 40), float64] */, dtype="float64") /* ty=Tensor[(3, 40), float64] */;
    %698 = reshape(%697, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float64] */;
    %699 = @func_5434(%698) /* ty=(Tensor[(?, 8, 15), uint8], Tensor[(1, 8, 15), float64], Tensor[(1, 3, 1), float64]) */;
    %700 = %691.1;
    %701 = bitwise_and(%694, %695) /* ty=Tensor[(16, 3, 9), int16] */;
    %702 = %696.2;
    %703 = %699.1;
    (%700, %701, %702, %703, meta[relay.Constant][27] /* ty=Tensor[(3, 40), float64] */)
  };
  %704(%var_7298) /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(16, 3, 9), int16], Tensor[(?, 3, ?), bool], Tensor[(1, 8, 15), float64], Tensor[(3, 40), float64]) */
}

def @func_7513() -> (Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) {
  %705 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
  %706 = %705.0;
  %707 = @func_4417() /* ty=Tensor[(1, 3, 1), float64] */;
  (%706, %707)
}

def @func_1016() -> Tensor[(?, 3, ?), float32] {
  @func_1014() /* ty=Tensor[(?, 3, ?), float32] */
}

def @func_6265() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %708 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %709 = %708.1;
  %710 = @func_2161() /* ty=Tensor[(1, 3, 1), float64] */;
  (%709, %710)
}

def @func_2777() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  %715 = fn () -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
    %711 = @func_917() /* ty=(Tensor[(1, 3, 1), float64],) */;
    %712 = @func_1762() /* ty=(Tensor[(7, 9, 9), uint8], Tensor[(1, 3, 1), float64]) */;
    %713 = %711.0;
    %714 = %712.1;
    (%713, %714)
  };
  %715() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */
}

def @func_2605() -> Tensor[(1, 3, 1), float64] {
  @func_2603() /* ty=Tensor[(1, 3, 1), float64] */
}

def @func_2143() -> (Tensor[(?, 3, ?), float32],) {
  %718 = fn () -> (Tensor[(?, 3, ?), float32],) {
    %716 = @func_344() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */;
    %717 = %716.0;
    (%717,)
  };
  %718() /* ty=(Tensor[(?, 3, ?), float32],) */
}

def @func_5350() -> (Tensor[(1, 3, 1), float64],) {
  @func_5348() /* ty=(Tensor[(1, 3, 1), float64],) */
}

def @func_7594() -> Tensor[(1, 3, 1), float64] {
  @func_7592() /* ty=Tensor[(1, 3, 1), float64] */
}

def @func_3302(%var_3301: Tensor[(18), float32]) -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(18), float32], Tensor[(1, 3, 1), float64]) {
  %726 = fn (%var_3293: Tensor[(18), float32]) -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(18), float32], Tensor[(1, 3, 1), float64]) {
    %719 = cast(%var_3293, dtype="float32") /* ty=Tensor[(18), float32] */;
    %720 = reshape(%719, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float32] */;
    %721 = @func_2054(%720) /* ty=(Tensor[(3, 3, 2), float32], Tensor[(7, 9, 9), float64], Tensor[(1, 3, 1), float64]) */;
    %722 = @func_541() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
    %723 = @func_1170() /* ty=Tensor[(1, 3, 1), float64] */;
    %724 = %721.2;
    %725 = %722.0;
    (%723, %724, %var_3293, %725)
  };
  %726(%var_3301) /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64], Tensor[(18), float32], Tensor[(1, 3, 1), float64]) */
}

def @func_840() -> (Tensor[(1, 3, 1), float64],) {
  %727 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %728 = %727.0;
  (%728,)
}

def @func_468() -> (Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) {
  %729 = @func_344() /* ty=(Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64]) */;
  %730 = %729.1;
  %731 = cast(%730, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %732 = asinh(%731) /* ty=Tensor[(1, 3, 1), float32] */;
  %733 = cast(%730, dtype="uint64") /* ty=Tensor[(1, 3, 1), uint64] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%732, dtype="uint64") /* ty=Tensor[(1, 3, 1), uint64] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %737 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %738 = cast(%730, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %739 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%732, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %742 = @func_296() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), float32]) */;
  %743 = %742.1;
  %744 = cast(%743, dtype="float64") /* ty=Tensor[(?, 3, ?), float64] */;
  %745 = add(%735, %736) /* ty=Tensor[(?, 3, ?), uint64] */;
  %746 = %737.1;
  %747 = not_equal(%740, %741) /* ty=Tensor[(?, 3, ?), bool] */;
  %748 = sigmoid(%744) /* ty=Tensor[(?, 3, ?), float64] */;
  (%745, %746, %747, %748)
}

def @func_5436(%var_5435: Tensor[(1, 8, 15), float64]) -> (Tensor[(?, 8, 15), uint8], Tensor[(1, 8, 15), float64], Tensor[(1, 3, 1), float64]) {
  %760 = fn (%var_5408: Tensor[(1, 8, 15), float64]) -> (Tensor[(?, 8, 15), uint8], Tensor[(1, 8, 15), float64], Tensor[(1, 3, 1), float64]) {
    %749 = cast(%var_5408, dtype="float64") /* ty=Tensor[(1, 8, 15), float64] */;
    %750 = cosh(%749) /* ty=Tensor[(1, 8, 15), float64] */;
    %751 = cast(%750, dtype="uint8") /* ty=Tensor[(1, 8, 15), uint8] */;
    %752 = shape_of(%var_5408, dtype="int32") /* ty=Tensor[(3), int32] */;
    %753 = cast(%var_5408, dtype="uint8") /* ty=Tensor[(1, 8, 15), uint8] */;
    %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %755 = cast(%var_5408, dtype="float64") /* ty=Tensor[(1, 8, 15), float64] */;
    %756 = @func_1867() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
    %757 = bitwise_or(%753, %754) /* ty=Tensor[(?, 8, 15), uint8] */;
    %758 = sqrt(%755) /* ty=Tensor[(1, 8, 15), float64] */;
    %759 = %756.1;
    (%757, %758, %759)
  };
  %760(%var_5435) /* ty=(Tensor[(?, 8, 15), uint8], Tensor[(1, 8, 15), float64], Tensor[(1, 3, 1), float64]) */
}

def @func_1483() -> (Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), uint64]) {
  %761 = @func_585() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64]) */;
  %762 = %761.0;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %764 = acos(%763) /* ty=Tensor[(?, 3, ?), float32] */;
  %765 = cast(%764, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %766 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%762, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %769 = @func_468() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float64]) */;
  %770 = cast(%762, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %771 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%764, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %774 = logical_or(%772, %773) /* ty=Tensor[(?, 3, ?), bool] */;
  %775 = cast(%774, dtype="float32") /* ty=Tensor[(?, 3, ?), float32] */;
  %776 = log(%775) /* ty=Tensor[(?, 3, ?), float32] */;
  %777 = cast(%762, dtype="int8") /* ty=Tensor[(?, 3, ?), int8] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%776, dtype="int8") /* ty=Tensor[(?, 3, ?), int8] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %781 = multiply(%779, %780) /* ty=Tensor[(?, 3, ?), int8] */;
  %782 = cast(%776, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%781, dtype="bool") /* ty=Tensor[(?, 3, ?), bool] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %786 = @func_506() /* ty=(Tensor[(?, 3, ?), uint64], Tensor[(?, 3, ?), uint64]) */;
  %787 = greater_equal(%767, %768) /* ty=Tensor[(?, 3, ?), bool] */;
  %788 = %769.0;
  %789 = less(%784, %785) /* ty=Tensor[(?, 3, ?), bool] */;
  %790 = %786.1;
  (%787, %788, %789, %790)
}

def @func_1869() -> (Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) {
  @func_1867() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */
}

def @func_3384() -> (Tensor[(?, 3, ?), float32], float64, Tensor[(?, 3, ?), bool], Tensor[(?, 3, ?), float32], Tensor[(1, 3, 1), float64], Tensor[(?, 3, ?), uint64]) {
  %791 = cast(-7.98523f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %792 = reshape(%791, newshape=[]) /* ty=float64 */;
  %793 = @func_3223(%792) /* ty=(Tensor[(10, 10, 14), float64], Tensor[(?, 3, ?), float32]) */;
  %794 = @func_393() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %795 = %794.0;
  %796 = @func_2077() /* ty=(Tensor[(1, 3, 1), float64], Tensor[(1, 3, 1), float64]) */;
  %797 = %796.1;
  %798 = cast(%797, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %799 = shape_of(%795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%795, dtype="bool") /* ty=Tensor[(1, 3, 1), bool] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %802 = @func_604() /* ty=(Tensor[(1, 3, 1), float64],) */;
  %803 = @func_780() /* ty=(Tensor[(?, 3, ?), uint64],) */;
  %804 = %793.1;
  %805 = greater(%800, %801) /* ty=Tensor[(?, 3, ?), bool] */;
  %806 = @func_1014() /* ty=Tensor[(?, 3, ?), float32] */;
  %807 = %802.0;
  %808 = %803.0;
  (%804, -7.98523f64 /* ty=float64 */, %805, %806, %807, %808)
}

def @func_5976(%var_5975: Tensor[(14, 2, 10), float64]) -> Tensor[(14, 2, 10), float64] {
  %810 = fn (%var_5970: Tensor[(14, 2, 10), float64]) -> Tensor[(14, 2, 10), float64] {
    %809 = cast(%var_5970, dtype="float64") /* ty=Tensor[(14, 2, 10), float64] */;
    erf(%809) /* ty=Tensor[(14, 2, 10), float64] */
  };
  %810(%var_5975) /* ty=Tensor[(14, 2, 10), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen536/build/output.py", line 2478, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:29:27] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

