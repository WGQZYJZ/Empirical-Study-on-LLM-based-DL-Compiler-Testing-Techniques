==========mod==========
#[version = "0.0.5"]
def @func_5706() -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) {
  %0 = @func_2651() /* ty=Tensor[(2, 7, 9), float32] */;
  %1 = @func_2719() /* ty=Tensor[(2, 7, 9), float32] */;
  (%0, %1)
}

def @func_6137() -> (Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32]) {
  %2 = @func_2270() /* ty=(Tensor[(15, 16, 5), int64], Tensor[(600, 2), float64], Tensor[(2, 7, 9), float64]) */;
  %3 = %2.2;
  %4 = @func_2320() /* ty=Tensor[(2, 7, 9), float32] */;
  (%3, %4)
}

def @func_2550(%var_2533: Tensor[(48, 4), uint64]) -> (Tensor[(16, 2, 6), bool], uint64, Tensor[(48, 4), uint64], Tensor[(2, 7, 9), float64]) {
  %5 = cast(meta[relay.Constant][0] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %6 = cast(%var_2533, dtype="uint64") /* ty=Tensor[(48, 4), uint64] */;
  %7 = reshape(%5, newshape=[]) /* ty=uint64 */;
  %8 = reshape(%6, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), uint64] */;
  %9 = @func_690(%7, %8) /* ty=(Tensor[(16, 2, 6), bool],) */;
  %10 = @func_2320() /* ty=Tensor[(2, 7, 9), float32] */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 7, 9), float32] */, dtype="uint16") /* ty=Tensor[(2, 7, 9), uint16] */;
  %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%10, dtype="uint16") /* ty=Tensor[(2, 7, 9), uint16] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %15 = logical_xor(%13, %14) /* ty=Tensor[(2, 7, 9), uint16] */;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %17 = %9.0;
  %18 = erf(%16) /* ty=Tensor[(2, 7, 9), float64] */;
  (%17, meta[relay.Constant][0] /* ty=uint64 */, %var_2533, %18)
}

def @func_2914() -> (Tensor[(2, 7, 9), float32],) {
  %19 = @func_2181() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %20 = %19.0;
  (%20,)
}

def @func_3296(%var_3278: Tensor[(14, 6, 14), float64]) -> (Tensor[(14, 6, 14), float64], Tensor[(3, 14, 5), float32], Tensor[(210), float32]) {
  %21 = cast(%var_3278, dtype="float64") /* ty=Tensor[(14, 6, 14), float64] */;
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %23 = reshape(%22, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float32] */;
  %24 = acosh(%21) /* ty=Tensor[(14, 6, 14), float64] */;
  %25 = @func_814(%23) /* ty=Tensor[(3, 14, 5), float32] */;
  (%24, %25, meta[relay.Constant][2] /* ty=Tensor[(210), float32] */)
}

def @func_2388() -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) {
  %26 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %27 = @func_2043() /* ty=Tensor[(2, 7, 9), float32] */;
  %28 = %26.0;
  (%27, %28)
}

def @func_1547() -> (Tensor[(2, 7, 9), float32],) {
  %29 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 7, 9), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %30 = sin(%29) /* ty=Tensor[(2, 7, 9), float32] */;
  (%30,)
}

def @func_3381(%var_3350: Tensor[(192), uint64]) -> (Tensor[(10, 105), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(48, 4), float32]) {
  %31 = @func_2012() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) */;
  %32 = cast(meta[relay.Constant][4] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %33 = reshape(%32, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %34 = @func_1972(%33) /* ty=(Tensor[(3, 14, 5), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) */;
  %35 = cast(%var_3350, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %36 = reshape(%35, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint64] */;
  %37 = @func_2550(%36) /* ty=(Tensor[(16, 2, 6), bool], uint64, Tensor[(48, 4), uint64], Tensor[(2, 7, 9), float64]) */;
  %38 = %37.2;
  %39 = cast(%38, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %40 = log(%39) /* ty=Tensor[(48, 4), float32] */;
  %41 = cast(%40, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %42 = %31.2;
  %43 = %34.2;
  %44 = log2(%41) /* ty=Tensor[(48, 4), float32] */;
  (%42, %var_3350, %43, meta[relay.Constant][4] /* ty=Tensor[(210), float32] */, %44)
}

def @func_2483(%var_2476: Tensor[(2, 7, 9), float32]) -> (Tensor[(2, 7, 9), uint8],) {
  %45 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %46 = %45.0;
  %47 = cast(%var_2476, dtype="uint8") /* ty=Tensor[(2, 7, 9), uint8] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="uint8") /* ty=Tensor[(2, 7, 9), uint8] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %51 = bitwise_or(%49, %50) /* ty=Tensor[(2, 7, 9), uint8] */;
  (%51,)
}

def @func_1591() -> (Tensor[(2, 7, 9), float32],) {
  %52 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %53 = %52.0;
  (%53,)
}

def @func_2608() -> Tensor[(2, 7, 9), float32] {
  @func_1689() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_3636(%var_3587: Tensor[(168), int64]) -> (Tensor[(168), int64], Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float64]) {
  %54 = cast(%var_3587, dtype="int64") /* ty=Tensor[(168), int64] */;
  %55 = cast(%var_3587, dtype="int64") /* ty=Tensor[(168), int64] */;
  %56 = reshape(%54, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %57 = reshape(%55, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %58 = @func_2290(%56, %57) /* ty=(Tensor[(3, 14, 4), int64], Tensor[(2, 7, 9), float64]) */;
  %59 = %58.1;
  %60 = @func_2651() /* ty=Tensor[(2, 7, 9), float32] */;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %62 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%59, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %66 = reshape(%65, newshape=[8, 24]) /* ty=Tensor[(8, 24), uint64] */;
  %67 = @func_1812(%66) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(8, 24), float64]) */;
  %68 = floor_mod(%63, %64) /* ty=Tensor[(2, 7, 9), float64] */;
  %69 = %67.1;
  %70 = @func_3012() /* ty=Tensor[(2, 7, 9), float64] */;
  (%var_3587, %68, %69, meta[relay.Constant][5] /* ty=Tensor[(192), uint64] */, %70)
}

def @func_2865() -> (Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64]) {
  %71 = @func_2388() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */;
  %72 = @func_2793() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(4, 48), uint64]) */;
  %73 = %71.1;
  %74 = %72.3;
  (%73, %74)
}

def @func_5058(%var_5035: uint32, %var_5036: Tensor[(12, 9, 5), uint32]) -> (Tensor[(12, 9, 5), uint32], Tensor[(2, 7, 9), float32]) {
  %75 = cast(%var_5035, dtype="uint32") /* ty=uint32 */;
  %76 = cast(%var_5036, dtype="uint32") /* ty=Tensor[(12, 9, 5), uint32] */;
  %77 = right_shift(%75, %76) /* ty=Tensor[(12, 9, 5), uint32] */;
  %78 = @func_2608() /* ty=Tensor[(2, 7, 9), float32] */;
  (%77, %78)
}

def @func_6250(%var_6161: Tensor[(6, 12, 1), float64], %var_6162: Tensor[(6, 12, 5), float64]) -> (Tensor[(6, 12, 5), float64], Tensor[(2, 7, 9), float32], uint64, Tensor[(192, 1), uint64], Tensor[(2, 7, 9), float32], Tensor[(16, 10, 13), float64], Tensor[(2, 7, 9), int16], Tensor[(2, 7, 9), float64], Tensor[(6, 12, 192), int8]) {
  %79 = cast(%var_6161, dtype="float64") /* ty=Tensor[(6, 12, 1), float64] */;
  %80 = cast(%var_6162, dtype="float64") /* ty=Tensor[(6, 12, 5), float64] */;
  %81 = @func_5994() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %82 = cast(meta[relay.Constant][6] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
  %83 = reshape(%82, newshape=[]) /* ty=float64 */;
  %84 = @func_2073() /* ty=Tensor[(2, 7, 9), float32] */;
  %85 = cast(%84, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %86 = reshape(%85, newshape=[2, 7, 9]) /* ty=Tensor[(2, 7, 9), float32] */;
  %87 = @func_6137() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32]) */;
  %88 = cast(meta[relay.Constant][6] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %89 = cast(meta[relay.Constant][7] /* ty=Tensor[(192, 1), uint64] */, dtype="uint64") /* ty=Tensor[(192, 1), uint64] */;
  %90 = reshape(%88, newshape=[]) /* ty=uint64 */;
  %91 = reshape(%89, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %92 = @func_3193(%90, %91) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), uint32]) */;
  %93 = %92.4;
  %94 = cast(%93, dtype="bool") /* ty=Tensor[(192), bool] */;
  %95 = cast(%var_6161, dtype="bool") /* ty=Tensor[(6, 12, 1), bool] */;
  %96 = less_equal(%94, %95) /* ty=Tensor[(6, 12, 192), bool] */;
  %97 = cast(%96, dtype="int8") /* ty=Tensor[(6, 12, 192), int8] */;
  %98 = cast(%var_6161, dtype="int8") /* ty=Tensor[(6, 12, 1), int8] */;
  %99 = mod(%79, %80) /* ty=Tensor[(6, 12, 5), float64] */;
  %100 = %81.0;
  %101 = @func_5509(%83) /* ty=Tensor[(16, 10, 13), float64] */;
  %102 = @func_5300(%86) /* ty=Tensor[(2, 7, 9), int16] */;
  %103 = %87.0;
  %104 = bitwise_or(%97, %98) /* ty=Tensor[(6, 12, 192), int8] */;
  (%99, %84, meta[relay.Constant][6] /* ty=uint64 */, meta[relay.Constant][7] /* ty=Tensor[(192, 1), uint64] */, %100, %101, %102, %103, %104)
}

def @func_881(%var_875: uint64) -> Tensor[(5, 12, 13), uint64] {
  %105 = cast(%var_875, dtype="uint64") /* ty=uint64 */;
  %106 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 12, 13), uint64] */, dtype="uint64") /* ty=Tensor[(5, 12, 13), uint64] */;
  bitwise_or(%105, %106) /* ty=Tensor[(5, 12, 13), uint64] */
}

def @func_2338(%var_2326: Tensor[(6, 16, 11), float64]) -> (Tensor[(2, 7, 9), float32], Tensor[(6, 16, 11), float32]) {
  %107 = @func_2181() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %108 = cast(%var_2326, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  %109 = asin(%108) /* ty=Tensor[(6, 16, 11), float64] */;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  %111 = exp(%110) /* ty=Tensor[(6, 16, 11), float64] */;
  %112 = cast(%111, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %113 = %107.0;
  %114 = log10(%112) /* ty=Tensor[(6, 16, 11), float32] */;
  (%113, %114)
}

def @func_1828() -> Tensor[(2, 7, 9), float32] {
  %115 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %115.0
}

def @func_1812(%var_1800: Tensor[(8, 24), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(8, 24), float64]) {
  %116 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %117 = cast(%var_1800, dtype="uint64") /* ty=Tensor[(8, 24), uint64] */;
  %118 = reshape(%117, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %119 = @func_1786(%118) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64]) */;
  %120 = cast(%var_1800, dtype="float64") /* ty=Tensor[(8, 24), float64] */;
  %121 = %116.0;
  %122 = %119.0;
  %123 = sqrt(%120) /* ty=Tensor[(8, 24), float64] */;
  (%121, %122, %123)
}

def @func_4648(%var_4571: Tensor[(1050), float32], %var_4629: Tensor[(168), int64]) -> (Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(10, 12, 2), int16], Tensor[(2, 7, 9), float32], uint64, Tensor[(192), uint64], Tensor[(5, 15, 14), float32], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(144), float32], Tensor[(168), int64], Tensor[(5, 15, 14), float64]) {
  %124 = @func_4340() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(10, 12, 2), int16], Tensor[(240), int16]) */;
  %125 = cast(meta[relay.Constant][9] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %126 = cast(meta[relay.Constant][10] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %127 = reshape(%125, newshape=[]) /* ty=uint64 */;
  %128 = reshape(%126, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %129 = @func_3193(%127, %128) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), uint32]) */;
  %130 = cast(%var_4571, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %131 = reshape(%130, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %132 = @func_1644(%131) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(5, 15, 14), float64]) */;
  %133 = %132.2;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(5, 15, 14), float32] */;
  %135 = @func_2828() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %136 = cast(meta[relay.Constant][11] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %137 = cast(%var_4629, dtype="int64") /* ty=Tensor[(168), int64] */;
  %138 = cast(meta[relay.Constant][11] /* ty=Tensor[(144), float32] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %139 = reshape(%136, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float32] */;
  %140 = reshape(%137, newshape=[168]) /* ty=Tensor[(168), int64] */;
  %141 = reshape(%138, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %142 = @func_3128(%139, %140, %141) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(168), int64], Tensor[(3, 8, 6), float32], Tensor[(3, 8, 6), float32], Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) */;
  %143 = cast(%var_4571, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %144 = reshape(%143, newshape=[5, 15, 14]) /* ty=Tensor[(5, 15, 14), float32] */;
  %145 = @func_467(%144) /* ty=(Tensor[(5, 15, 14), float64], Tensor[(5, 15, 14), float64]) */;
  %146 = @func_2073() /* ty=Tensor[(2, 7, 9), float32] */;
  %147 = %124.1;
  %148 = %129.0;
  %149 = tan(%134) /* ty=Tensor[(5, 15, 14), float32] */;
  %150 = %135.0;
  %151 = %142.7;
  %152 = %145.1;
  (%146, %var_4571, %147, %148, meta[relay.Constant][9] /* ty=uint64 */, meta[relay.Constant][10] /* ty=Tensor[(192), uint64] */, %149, %150, %151, meta[relay.Constant][11] /* ty=Tensor[(144), float32] */, %var_4629, %152)
}

def @func_3695(%var_3673: Tensor[(10, 12, 2), int16]) -> Tensor[(10, 12, 2), int16] {
  %153 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 12, 2), int16] */, dtype="bool") /* ty=Tensor[(10, 12, 2), bool] */;
  %154 = shape_of(%var_3673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%var_3673, dtype="bool") /* ty=Tensor[(10, 12, 2), bool] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %157 = less(%155, %156) /* ty=Tensor[(10, 12, 2), bool] */;
  %158 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 12, 2), int16] */, dtype="int16") /* ty=Tensor[(10, 12, 2), int16] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="int16") /* ty=Tensor[(10, 12, 2), int16] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%160, %161) /* ty=Tensor[(10, 12, 2), int16] */
}

def @func_5601(%var_5591: Tensor[(1, 15, 12), float32]) -> Tensor[(1, 15, 12), float32] {
  %162 = cast(%var_5591, dtype="float32") /* ty=Tensor[(1, 15, 12), float32] */;
  acos(%162) /* ty=Tensor[(1, 15, 12), float32] */
}

def @func_3193(%var_3165: uint64, %var_3166: Tensor[(192), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), uint32]) {
  %163 = @func_2865() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64]) */;
  %164 = @func_2354() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %165 = %164.0;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %167 = cast(%var_3165, dtype="uint64") /* ty=uint64 */;
  %168 = cast(%var_3166, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %169 = reshape(%167, newshape=[]) /* ty=uint64 */;
  %170 = reshape(%168, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), uint64] */;
  %171 = @func_690(%169, %170) /* ty=(Tensor[(16, 2, 6), bool],) */;
  %172 = @func_2793() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(4, 48), uint64]) */;
  %173 = @func_2980() /* ty=(Tensor[(10, 105), uint32], Tensor[(10, 105), float32], Tensor[(10, 105), float32]) */;
  %174 = %163.0;
  %175 = asin(%166) /* ty=Tensor[(2, 7, 9), float64] */;
  %176 = %171.0;
  %177 = %172.0;
  %178 = %173.0;
  (%174, %175, %176, %var_3165, %var_3166, %177, %178)
}

def @func_4340() -> (Tensor[(2, 7, 9), float64], Tensor[(10, 12, 2), int16], Tensor[(240), int16]) {
  %179 = @func_2270() /* ty=(Tensor[(15, 16, 5), int64], Tensor[(600, 2), float64], Tensor[(2, 7, 9), float64]) */;
  %180 = cast(meta[relay.Constant][13] /* ty=Tensor[(240), int16] */, dtype="int16") /* ty=Tensor[(240), int16] */;
  %181 = reshape(%180, newshape=[10, 12, 2]) /* ty=Tensor[(10, 12, 2), int16] */;
  %182 = %179.2;
  %183 = @func_3695(%181) /* ty=Tensor[(10, 12, 2), int16] */;
  (%182, %183, meta[relay.Constant][13] /* ty=Tensor[(240), int16] */)
}

def @func_3958(%var_3903: Tensor[(84, 2), int64]) -> (Tensor[(2, 7, 9), float32], Tensor[(84, 2), int64], Tensor[(2, 7, 9), float32], Tensor[(192), float64]) {
  %184 = @func_2865() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64]) */;
  %185 = cast(%var_3903, dtype="int64") /* ty=Tensor[(84, 2), int64] */;
  %186 = reshape(%185, newshape=[168]) /* ty=Tensor[(168), int64] */;
  %187 = @func_3636(%186) /* ty=(Tensor[(168), int64], Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float64]) */;
  %188 = %187.3;
  %189 = cast(%188, dtype="float64") /* ty=Tensor[(192), float64] */;
  %190 = @func_2959() /* ty=Tensor[(2, 7, 9), float32] */;
  %191 = %184.0;
  %192 = asinh(%189) /* ty=Tensor[(192), float64] */;
  (%190, %var_3903, %191, %192)
}

def @main() -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], uint64, Tensor[(192), uint64], Tensor[(10, 105), float64]) {
  %193 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %194 = cast(meta[relay.Constant][14] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %195 = cast(meta[relay.Constant][15] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %196 = reshape(%194, newshape=[]) /* ty=uint64 */;
  %197 = reshape(%195, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %198 = @func_3193(%196, %197) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), uint32]) */;
  %199 = %198.6;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(10, 105), float64] */;
  %201 = %193.0;
  %202 = @func_2165() /* ty=Tensor[(2, 7, 9), float32] */;
  %203 = rsqrt(%200) /* ty=Tensor[(10, 105), float64] */;
  (%201, %202, meta[relay.Constant][14] /* ty=uint64 */, meta[relay.Constant][15] /* ty=Tensor[(192), uint64] */, %203)
}

def @func_5130() -> Tensor[(2, 7, 9), float32] {
  %204 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %204.0
}

def @func_2290(%var_2272: Tensor[(3, 14, 4), int64], %var_2273: Tensor[(3, 14, 4), int64]) -> (Tensor[(3, 14, 4), int64], Tensor[(2, 7, 9), float64]) {
  %205 = cast(%var_2273, dtype="int64") /* ty=Tensor[(3, 14, 4), int64] */;
  %206 = shape_of(%var_2272, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%var_2272, dtype="int64") /* ty=Tensor[(3, 14, 4), int64] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %209 = @func_2012() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) */;
  %210 = maximum(%207, %208) /* ty=Tensor[(3, 14, 4), int64] */;
  %211 = %209.0;
  (%210, %211)
}

def @func_3478() -> (Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(196), float64], uint64, uint64, Tensor[(2, 96), uint64], Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(195), int32], Tensor[(192), uint64], Tensor[(4, 48), uint64]) {
  %212 = cast(meta[relay.Constant][16] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %213 = reshape(%212, newshape=[14, 1, 14]) /* ty=Tensor[(14, 1, 14), float64] */;
  %214 = @func_1700(%213) /* ty=(Tensor[(14, 1, 14), float64],) */;
  %215 = cast(meta[relay.Constant][17] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %216 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 96), uint64] */, dtype="uint64") /* ty=Tensor[(2, 96), uint64] */;
  %217 = reshape(%215, newshape=[]) /* ty=uint64 */;
  %218 = reshape(%216, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %219 = @func_3193(%217, %218) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), uint32]) */;
  %220 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %221 = cast(meta[relay.Constant][19] /* ty=Tensor[(195), int32] */, dtype="int32") /* ty=Tensor[(195), int32] */;
  %222 = reshape(%221, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %223 = @func_2217(%222) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(13, ?, 15), int32], Tensor[(195), int32]) */;
  %224 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 96), uint64] */, dtype="uint64") /* ty=Tensor[(2, 96), uint64] */;
  %225 = reshape(%224, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %226 = @func_1786(%225) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64]) */;
  %227 = @func_2865() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64]) */;
  %228 = @func_2073() /* ty=Tensor[(2, 7, 9), float32] */;
  %229 = %214.0;
  %230 = %219.3;
  %231 = %220.0;
  %232 = %223.0;
  %233 = %226.3;
  %234 = %227.1;
  (%228, %229, meta[relay.Constant][16] /* ty=Tensor[(196), float64] */, %230, meta[relay.Constant][17] /* ty=uint64 */, meta[relay.Constant][18] /* ty=Tensor[(2, 96), uint64] */, %231, %232, meta[relay.Constant][19] /* ty=Tensor[(195), int32] */, %233, %234)
}

def @func_4058(%var_3978: Tensor[(16, 14, 2), int16], %var_3979: Tensor[(16, 14, 2), int16], %var_4005: Tensor[(210, 1), float32], %var_4023: Tensor[(16, 14, 2), float32], %var_4036: Tensor[(192), uint64]) -> (Tensor[(16, 14, 2), int16], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(210, 1), float32], Tensor[(3, 14, 4), int64], Tensor[(168), int64], Tensor[(16, 14, 2), bool], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(1056), float64]) {
  %235 = cast(%var_3979, dtype="int16") /* ty=Tensor[(16, 14, 2), int16] */;
  %236 = shape_of(%var_3978, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%var_3978, dtype="int16") /* ty=Tensor[(16, 14, 2), int16] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %239 = cast(%var_4005, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %240 = reshape(%239, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %241 = @func_1972(%240) /* ty=(Tensor[(3, 14, 5), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) */;
  %242 = cast(meta[relay.Constant][20] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %243 = cast(meta[relay.Constant][20] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %244 = reshape(%242, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %245 = reshape(%243, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %246 = @func_2290(%244, %245) /* ty=(Tensor[(3, 14, 4), int64], Tensor[(2, 7, 9), float64]) */;
  %247 = cast(%var_3979, dtype="float64") /* ty=Tensor[(16, 14, 2), float64] */;
  %248 = atanh(%247) /* ty=Tensor[(16, 14, 2), float64] */;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(16, 14, 2), float32] */;
  %250 = asin(%249) /* ty=Tensor[(16, 14, 2), float32] */;
  %251 = cast(%var_4023, dtype="uint8") /* ty=Tensor[(16, 14, 2), uint8] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="uint8") /* ty=Tensor[(16, 14, 2), uint8] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %255 = bitwise_or(%253, %254) /* ty=Tensor[(16, 14, 2), uint8] */;
  %256 = cast(%var_3978, dtype="bool") /* ty=Tensor[(16, 14, 2), bool] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="bool") /* ty=Tensor[(16, 14, 2), bool] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %260 = cast(%var_4036, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %261 = reshape(%260, newshape=[8, 24]) /* ty=Tensor[(8, 24), uint64] */;
  %262 = @func_1812(%261) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(8, 24), float64]) */;
  %263 = cast(meta[relay.Constant][21] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %264 = reshape(%263, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float64] */;
  %265 = @func_2338(%264) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(6, 16, 11), float32]) */;
  %266 = subtract(%237, %238) /* ty=Tensor[(16, 14, 2), int16] */;
  %267 = @func_2608() /* ty=Tensor[(2, 7, 9), float32] */;
  %268 = %241.1;
  %269 = %246.0;
  %270 = less(%258, %259) /* ty=Tensor[(16, 14, 2), bool] */;
  %271 = %262.1;
  %272 = %265.0;
  (%266, %267, %268, %var_4005, %269, meta[relay.Constant][20] /* ty=Tensor[(168), int64] */, %270, %271, %var_4036, %272, meta[relay.Constant][21] /* ty=Tensor[(1056), float64] */)
}

def @func_4149(%var_4092: Tensor[(3, 11, 8), float64], %var_4117: Tensor[(3, 11, 8), float32]) -> (Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float32], Tensor[(2, 7, 9), float32]) {
  %273 = cast(%var_4092, dtype="float64") /* ty=Tensor[(3, 11, 8), float64] */;
  %274 = cosh(%273) /* ty=Tensor[(3, 11, 8), float64] */;
  %275 = cast(%274, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
  %276 = erf(%275) /* ty=Tensor[(3, 11, 8), float32] */;
  %277 = cast(%274, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %281 = cast(%var_4117, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %282 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%276, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %285 = cast(%var_4092, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
  %286 = equal(%279, %280) /* ty=Tensor[(3, 11, 8), bool] */;
  %287 = logical_and(%283, %284) /* ty=Tensor[(3, 11, 8), bool] */;
  %288 = log2(%285) /* ty=Tensor[(3, 11, 8), float32] */;
  %289 = @func_2608() /* ty=Tensor[(2, 7, 9), float32] */;
  (%286, %287, %288, %289)
}

def @func_3128(%var_3039: Tensor[(3, 8, 6), float32], %var_3059: Tensor[(168), int64], %var_3091: Tensor[(3, 8, 6), float64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(168), int64], Tensor[(3, 8, 6), float32], Tensor[(3, 8, 6), float32], Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) {
  %290 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %291 = cast(%var_3059, dtype="int64") /* ty=Tensor[(168), int64] */;
  %292 = cast(%var_3059, dtype="int64") /* ty=Tensor[(168), int64] */;
  %293 = reshape(%291, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %294 = reshape(%292, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %295 = @func_2290(%293, %294) /* ty=(Tensor[(3, 14, 4), int64], Tensor[(2, 7, 9), float64]) */;
  %296 = cast(%var_3039, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %297 = tan(%296) /* ty=Tensor[(3, 8, 6), float32] */;
  %298 = cast(%var_3039, dtype="int8") /* ty=Tensor[(3, 8, 6), int8] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="int8") /* ty=Tensor[(3, 8, 6), int8] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %302 = logical_xor(%300, %301) /* ty=Tensor[(3, 8, 6), int8] */;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(3, 8, 6), float64] */;
  %304 = sqrt(%303) /* ty=Tensor[(3, 8, 6), float64] */;
  %305 = cast(%304, dtype="float64") /* ty=Tensor[(3, 8, 6), float64] */;
  %306 = erf(%305) /* ty=Tensor[(3, 8, 6), float64] */;
  %307 = cast(%302, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %311 = cast(%var_3091, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %312 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%304, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %315 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %316 = @func_2388() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */;
  %317 = cast(meta[relay.Constant][22] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %318 = reshape(%317, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %319 = @func_1972(%318) /* ty=(Tensor[(3, 14, 5), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) */;
  %320 = %290.0;
  %321 = %295.1;
  %322 = floor_mod(%309, %310) /* ty=Tensor[(3, 8, 6), float32] */;
  %323 = divide(%313, %314) /* ty=Tensor[(3, 8, 6), float32] */;
  %324 = %315.0;
  %325 = %316.1;
  %326 = %319.1;
  %327 = @func_2608() /* ty=Tensor[(2, 7, 9), float32] */;
  (%320, %321, %var_3059, %322, %323, %324, %325, %326, meta[relay.Constant][22] /* ty=Tensor[(210), float32] */, %327)
}

def @func_5768() -> Tensor[(2, 7, 9), float32] {
  @func_2165() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_3890(%var_3835: Tensor[(7, 8, 16), float64], %var_3836: Tensor[(7, 8, 16), float64]) -> (Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(7, 8, 16), uint64], Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(7, 8, 16), bool]) {
  %328 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %329 = @func_2793() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(4, 48), uint64]) */;
  %330 = cast(%var_3835, dtype="float64") /* ty=Tensor[(7, 8, 16), float64] */;
  %331 = asin(%330) /* ty=Tensor[(7, 8, 16), float64] */;
  %332 = cast(%331, dtype="float64") /* ty=Tensor[(7, 8, 16), float64] */;
  %333 = acos(%332) /* ty=Tensor[(7, 8, 16), float64] */;
  %334 = cast(%333, dtype="float64") /* ty=Tensor[(7, 8, 16), float64] */;
  %335 = sigmoid(%334) /* ty=Tensor[(7, 8, 16), float64] */;
  %336 = cast(%var_3835, dtype="int64") /* ty=Tensor[(7, 8, 16), int64] */;
  %337 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%333, dtype="int64") /* ty=Tensor[(7, 8, 16), int64] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %340 = multiply(%338, %339) /* ty=Tensor[(7, 8, 16), int64] */;
  %341 = cast(%340, dtype="uint64") /* ty=Tensor[(7, 8, 16), uint64] */;
  %342 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%335, dtype="uint64") /* ty=Tensor[(7, 8, 16), uint64] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %345 = cast(meta[relay.Constant][23] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %346 = reshape(%345, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %347 = @func_1644(%346) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(5, 15, 14), float64]) */;
  %348 = cast(%var_3836, dtype="float64") /* ty=Tensor[(7, 8, 16), float64] */;
  %349 = shape_of(%var_3835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%var_3835, dtype="float64") /* ty=Tensor[(7, 8, 16), float64] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %352 = mod(%350, %351) /* ty=Tensor[(7, 8, 16), float64] */;
  %353 = cast(%352, dtype="bool") /* ty=Tensor[(7, 8, 16), bool] */;
  %354 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%340, dtype="bool") /* ty=Tensor[(7, 8, 16), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = %328.0;
  %358 = %329.2;
  %359 = minimum(%343, %344) /* ty=Tensor[(7, 8, 16), uint64] */;
  %360 = %347.0;
  %361 = greater_equal(%355, %356) /* ty=Tensor[(7, 8, 16), bool] */;
  (%357, %358, %359, %360, meta[relay.Constant][23] /* ty=Tensor[(1050), float32] */, %361)
}

def @func_4301(%var_4275: Tensor[(240), int16], %var_4293: Tensor[(96, 2), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(10, 12, 2), int16], Tensor[(240), int16], Tensor[(48, 4), float32], Tensor[(96, 2), uint64]) {
  %362 = cast(%var_4275, dtype="int16") /* ty=Tensor[(240), int16] */;
  %363 = reshape(%362, newshape=[10, 12, 2]) /* ty=Tensor[(10, 12, 2), int16] */;
  %364 = cast(%var_4293, dtype="uint64") /* ty=Tensor[(96, 2), uint64] */;
  %365 = reshape(%364, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %366 = @func_3381(%365) /* ty=(Tensor[(10, 105), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(48, 4), float32]) */;
  %367 = @func_2320() /* ty=Tensor[(2, 7, 9), float32] */;
  %368 = @func_3695(%363) /* ty=Tensor[(10, 12, 2), int16] */;
  %369 = %366.4;
  (%367, %368, %var_4275, %369, %var_4293)
}

def @func_5827(%var_5821: Tensor[(2, 7, 9), float32]) -> (Tensor[(2, 7, 9), float64],) {
  %370 = @func_2651() /* ty=Tensor[(2, 7, 9), float32] */;
  %371 = cast(%var_5821, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %375 = maximum(%373, %374) /* ty=Tensor[(2, 7, 9), float64] */;
  (%375,)
}

def @func_2651() -> Tensor[(2, 7, 9), float32] {
  %376 = @func_2388() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */;
  %376.0
}

def @func_2043() -> Tensor[(2, 7, 9), float32] {
  @func_1828() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_5300(%var_5295: Tensor[(2, 7, 9), float32]) -> Tensor[(2, 7, 9), int16] {
  %377 = @func_1689() /* ty=Tensor[(2, 7, 9), float32] */;
  %378 = cast(%var_5295, dtype="int16") /* ty=Tensor[(2, 7, 9), int16] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="int16") /* ty=Tensor[(2, 7, 9), int16] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_xor(%380, %381) /* ty=Tensor[(2, 7, 9), int16] */
}

def @func_5421(%var_5366: Tensor[(192), uint64], %var_5395: Tensor[(6, 28), int64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(10, 12, 2), uint8], Tensor[(2, 7, 9), float64], Tensor[(6, 28), int64], Tensor[(2, 7, 9), float32], Tensor[(24, 10), float32], Tensor[(10, 12, 2), float32]) {
  %382 = @func_2828() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %383 = cast(meta[relay.Constant][24] /* ty=Tensor[(24, 10), int16] */, dtype="int16") /* ty=Tensor[(24, 10), int16] */;
  %384 = cast(%var_5366, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %385 = reshape(%383, newshape=[240]) /* ty=Tensor[(240), int16] */;
  %386 = reshape(%384, newshape=[96, 2]) /* ty=Tensor[(96, 2), uint64] */;
  %387 = @func_4301(%385, %386) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(10, 12, 2), int16], Tensor[(240), int16], Tensor[(48, 4), float32], Tensor[(96, 2), uint64]) */;
  %388 = %387.1;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(10, 12, 2), float64] */;
  %390 = asinh(%389) /* ty=Tensor[(10, 12, 2), float64] */;
  %391 = cast(%388, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %392 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(24, 10), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %393 = cast(meta[relay.Constant][24] /* ty=Tensor[(24, 10), int16] */, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %395 = floor_divide(%393, %394) /* ty=Tensor[(24, 10), float32] */;
  %396 = cast(%395, dtype="uint8") /* ty=Tensor[(24, 10), uint8] */;
  %397 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%390, dtype="uint8") /* ty=Tensor[(10, 12, 2), uint8] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %400 = cast(%var_5395, dtype="int64") /* ty=Tensor[(6, 28), int64] */;
  %401 = cast(%var_5395, dtype="int64") /* ty=Tensor[(6, 28), int64] */;
  %402 = reshape(%400, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %403 = reshape(%401, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %404 = @func_2290(%402, %403) /* ty=(Tensor[(3, 14, 4), int64], Tensor[(2, 7, 9), float64]) */;
  %405 = @func_2388() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */;
  %406 = cast(%395, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %407 = cast(%390, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %408 = @func_2165() /* ty=Tensor[(2, 7, 9), float32] */;
  %409 = %382.0;
  %410 = bitwise_or(%398, %399) /* ty=Tensor[(10, 12, 2), uint8] */;
  %411 = %404.1;
  %412 = %405.1;
  %413 = acosh(%406) /* ty=Tensor[(24, 10), float32] */;
  %414 = log2(%407) /* ty=Tensor[(10, 12, 2), float32] */;
  (%408, %409, %var_5366, %410, %411, %var_5395, %412, %413, %414)
}

def @func_2270() -> (Tensor[(15, 16, 5), int64], Tensor[(600, 2), float64], Tensor[(2, 7, 9), float64]) {
  %415 = cast(meta[relay.Constant][25] /* ty=Tensor[(600, 2), int64] */, dtype="int64") /* ty=Tensor[(600, 2), int64] */;
  %416 = cast(meta[relay.Constant][25] /* ty=Tensor[(600, 2), int64] */, dtype="int64") /* ty=Tensor[(600, 2), int64] */;
  %417 = reshape(%415, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), int64] */;
  %418 = reshape(%416, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), int64] */;
  %419 = @func_921(%417, %418) /* ty=(Tensor[(15, 16, 5), int64],) */;
  %420 = cast(meta[relay.Constant][25] /* ty=Tensor[(600, 2), int64] */, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
  %421 = @func_1828() /* ty=Tensor[(2, 7, 9), float32] */;
  %422 = cast(%421, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %423 = %419.0;
  %424 = rsqrt(%420) /* ty=Tensor[(600, 2), float64] */;
  %425 = acos(%422) /* ty=Tensor[(2, 7, 9), float64] */;
  (%423, %424, %425)
}

def @func_1700(%var_1692: Tensor[(14, 1, 14), float64]) -> (Tensor[(14, 1, 14), float64],) {
  %426 = cast(%var_1692, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  %427 = cos(%426) /* ty=Tensor[(14, 1, 14), float64] */;
  %428 = cast(%427, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  %429 = cosh(%428) /* ty=Tensor[(14, 1, 14), float64] */;
  (%429,)
}

def @func_5807() -> (Tensor[(2, 7, 9), float32],) {
  %430 = @func_2073() /* ty=Tensor[(2, 7, 9), float32] */;
  (%430,)
}

def @func_2959() -> Tensor[(2, 7, 9), float32] {
  %431 = @func_2914() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %431.0
}

def @func_690(%var_685: uint64, %var_686: Tensor[(16, 2, 6), uint64]) -> (Tensor[(16, 2, 6), bool],) {
  %432 = cast(%var_685, dtype="bool") /* ty=bool */;
  %433 = cast(%var_686, dtype="bool") /* ty=Tensor[(16, 2, 6), bool] */;
  %434 = equal(%432, %433) /* ty=Tensor[(16, 2, 6), bool] */;
  (%434,)
}

def @func_3546(%var_3504: Tensor[(9, 3, 15), float64], %var_3539: uint64) -> (Tensor[(9, 3, 15), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64]) {
  %435 = cast(%var_3504, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
  %436 = cast(%var_3539, dtype="uint64") /* ty=uint64 */;
  %437 = cast(meta[relay.Constant][26] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %438 = reshape(%436, newshape=[]) /* ty=uint64 */;
  %439 = reshape(%437, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), uint64] */;
  %440 = @func_690(%438, %439) /* ty=(Tensor[(16, 2, 6), bool],) */;
  %441 = exp(%435) /* ty=Tensor[(9, 3, 15), float64] */;
  %442 = %440.0;
  (%441, %442, %var_3539, meta[relay.Constant][26] /* ty=Tensor[(192), uint64] */)
}

def @func_3261(%var_3244: Tensor[(1, 192), uint64]) -> (Tensor[(2, 7, 9), bool], Tensor[(14, 1, 14), float64], Tensor[(1, 192), uint64]) {
  %443 = @func_1828() /* ty=Tensor[(2, 7, 9), float32] */;
  %444 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 7, 9), float32] */, dtype="bool") /* ty=Tensor[(2, 7, 9), bool] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="bool") /* ty=Tensor[(2, 7, 9), bool] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %448 = equal(%446, %447) /* ty=Tensor[(2, 7, 9), bool] */;
  %449 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 7, 9), float32] */, dtype="bool") /* ty=Tensor[(2, 7, 9), bool] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%448, dtype="bool") /* ty=Tensor[(2, 7, 9), bool] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %453 = cast(%var_3244, dtype="uint64") /* ty=Tensor[(1, 192), uint64] */;
  %454 = reshape(%453, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %455 = @func_2143(%454) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(14, 1, 14), float64], Tensor[(196, 1), float64], Tensor[(8, 24), float64], Tensor[(192), uint64]) */;
  %456 = greater_equal(%451, %452) /* ty=Tensor[(2, 7, 9), bool] */;
  %457 = %455.2;
  (%456, %457, %var_3244)
}

def @func_467(%var_446: Tensor[(5, 15, 14), float32]) -> (Tensor[(5, 15, 14), float64], Tensor[(5, 15, 14), float64]) {
  %458 = cast(%var_446, dtype="float32") /* ty=Tensor[(5, 15, 14), float32] */;
  %459 = erf(%458) /* ty=Tensor[(5, 15, 14), float32] */;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(5, 15, 14), float64] */;
  %461 = cast(%459, dtype="float64") /* ty=Tensor[(5, 15, 14), float64] */;
  %462 = acos(%460) /* ty=Tensor[(5, 15, 14), float64] */;
  %463 = log2(%461) /* ty=Tensor[(5, 15, 14), float64] */;
  (%462, %463)
}

def @func_5275() -> (Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(2, 7, 9), float32]) {
  %464 = @func_2320() /* ty=Tensor[(2, 7, 9), float32] */;
  %465 = cast(%464, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %466 = reshape(%465, newshape=[2, 7, 9]) /* ty=Tensor[(2, 7, 9), float32] */;
  %467 = @func_5009(%466) /* ty=(Tensor[(2, 7, 9), int64], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(196), float64]) */;
  %468 = cast(%464, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %469 = @func_5130() /* ty=Tensor[(2, 7, 9), float32] */;
  %470 = %467.2;
  %471 = sqrt(%468) /* ty=Tensor[(2, 7, 9), float32] */;
  (%469, %470, %471)
}

def @func_3012() -> Tensor[(2, 7, 9), float64] {
  %472 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %473 = %472.0;
  %474 = cast(%473, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  asinh(%474) /* ty=Tensor[(2, 7, 9), float64] */
}

def @func_2181() -> (Tensor[(2, 7, 9), float32],) {
  %475 = @func_1672() /* ty=Tensor[(2, 7, 9), float32] */;
  (%475,)
}

def @func_921(%var_915: Tensor[(15, 16, 5), int64], %var_916: Tensor[(15, 16, 5), int64]) -> (Tensor[(15, 16, 5), int64],) {
  %476 = cast(%var_916, dtype="int64") /* ty=Tensor[(15, 16, 5), int64] */;
  %477 = shape_of(%var_915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%var_915, dtype="int64") /* ty=Tensor[(15, 16, 5), int64] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %480 = right_shift(%478, %479) /* ty=Tensor[(15, 16, 5), int64] */;
  (%480,)
}

def @func_2980() -> (Tensor[(10, 105), uint32], Tensor[(10, 105), float32], Tensor[(10, 105), float32]) {
  %481 = @func_2012() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) */;
  %482 = %481.2;
  %483 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 105), float32] */, dtype="uint32") /* ty=Tensor[(10, 105), uint32] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(2), int32] */;
  %485 = cast(%482, dtype="uint32") /* ty=Tensor[(10, 105), uint32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %487 = cast(%482, dtype="float32") /* ty=Tensor[(10, 105), float32] */;
  %488 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 105), float32] */, dtype="float32") /* ty=Tensor[(10, 105), float32] */;
  %489 = subtract(%485, %486) /* ty=Tensor[(10, 105), uint32] */;
  %490 = sqrt(%487) /* ty=Tensor[(10, 105), float32] */;
  %491 = acosh(%488) /* ty=Tensor[(10, 105), float32] */;
  (%489, %490, %491)
}

def @func_4899(%var_4887: uint64) -> (Tensor[(2, 7, 9), float32], Tensor[(14, 6, 14), float64], Tensor[(1176), float64], Tensor[(5, 12, 13), uint64], uint64) {
  %492 = @func_2388() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */;
  %493 = cast(meta[relay.Constant][29] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %494 = reshape(%493, newshape=[14, 6, 14]) /* ty=Tensor[(14, 6, 14), float64] */;
  %495 = @func_3296(%494) /* ty=(Tensor[(14, 6, 14), float64], Tensor[(3, 14, 5), float32], Tensor[(210), float32]) */;
  %496 = cast(%var_4887, dtype="uint64") /* ty=uint64 */;
  %497 = reshape(%496, newshape=[]) /* ty=uint64 */;
  %498 = %492.0;
  %499 = %495.0;
  %500 = @func_881(%497) /* ty=Tensor[(5, 12, 13), uint64] */;
  (%498, %499, meta[relay.Constant][29] /* ty=Tensor[(1176), float64] */, %500, %var_4887)
}

def @func_2719() -> Tensor[(2, 7, 9), float32] {
  %501 = @func_2354() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %501.0
}

def @func_6324(%var_6318: Tensor[(600, 2), float64]) -> (Tensor[(600, 2), float64],) {
  %502 = @func_3755() /* ty=(Tensor[(600, 2), float64], Tensor[(2, 7, 9), float32]) */;
  %503 = %502.0;
  %504 = cast(%var_6318, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(2), int32] */;
  %506 = cast(%503, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %508 = mod(%506, %507) /* ty=Tensor[(600, 2), float64] */;
  (%508,)
}

def @func_58(%var_26: Tensor[(3, 4, 8), float32]) -> (Tensor[(3, 4, 8), float32], Tensor[(3, 4, 8), float32]) {
  %509 = cast(%var_26, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %510 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 4, 8), float32] */, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
  %511 = shape_of(%var_26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%var_26, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %514 = greater(%512, %513) /* ty=Tensor[(3, 4, 8), bool] */;
  %515 = cast(%514, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %516 = log2(%509) /* ty=Tensor[(3, 4, 8), float32] */;
  %517 = acos(%515) /* ty=Tensor[(3, 4, 8), float32] */;
  (%516, %517)
}

def @func_2828() -> (Tensor[(2, 7, 9), float32],) {
  %518 = @func_2388() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */;
  %519 = %518.0;
  (%519,)
}

def @func_1672() -> Tensor[(2, 7, 9), float32] {
  %520 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %520.0
}

def @func_2320() -> Tensor[(2, 7, 9), float32] {
  @func_2165() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_1878(%var_1871: Tensor[(195, 1), int32]) -> (Tensor[(6, 12, 13), float32], Tensor[(6, 12, 13), bool], Tensor[(13, ?, 15), int32], Tensor[(195, 1), int32]) {
  %521 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 12, 13), int64] */, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %522 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 12, 13), int64] */, dtype="int64") /* ty=Tensor[(6, 12, 13), int64] */;
  %523 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(6, 12, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 12, 13), int64] */, dtype="int64") /* ty=Tensor[(6, 12, 13), int64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %526 = bitwise_and(%524, %525) /* ty=Tensor[(6, 12, 13), int64] */;
  %527 = cast(%526, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
  %528 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(6, 12, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 12, 13), int64] */, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %531 = cast(%var_1871, dtype="int32") /* ty=Tensor[(195, 1), int32] */;
  %532 = cast(%var_1871, dtype="int32") /* ty=Tensor[(195, 1), int32] */;
  %533 = reshape(%531, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int32] */;
  %534 = reshape(%532, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int32] */;
  %535 = @func_1565(%533, %534) /* ty=(Tensor[(13, ?, 15), int32],) */;
  %536 = asin(%521) /* ty=Tensor[(6, 12, 13), float32] */;
  %537 = less(%529, %530) /* ty=Tensor[(6, 12, 13), bool] */;
  %538 = %535.0;
  (%536, %537, %538, %var_1871)
}

def @func_2165() -> Tensor[(2, 7, 9), float32] {
  @func_2043() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_1565(%var_1552: Tensor[(13, 1, 15), int32], %var_1553: Tensor[(13, 1, 15), int32]) -> (Tensor[(13, ?, 15), int32],) {
  %539 = cast(%var_1553, dtype="int32") /* ty=Tensor[(13, 1, 15), int32] */;
  %540 = shape_of(%var_1552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%var_1552, dtype="int32") /* ty=Tensor[(13, 1, 15), int32] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %543 = bitwise_or(%541, %542) /* ty=Tensor[(13, ?, 15), int32] */;
  (%543,)
}

def @func_4844() -> Tensor[(195), float32] {
  %544 = @func_3478() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(196), float64], uint64, uint64, Tensor[(2, 96), uint64], Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(195), int32], Tensor[(192), uint64], Tensor[(4, 48), uint64]) */;
  %545 = %544.8;
  %546 = cast(%545, dtype="float32") /* ty=Tensor[(195), float32] */;
  sqrt(%546) /* ty=Tensor[(195), float32] */
}

def @func_5009(%var_4981: Tensor[(2, 7, 9), float32]) -> (Tensor[(2, 7, 9), int64], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(196), float64]) {
  %547 = @func_2914() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %548 = %547.0;
  %549 = cast(%var_4981, dtype="int64") /* ty=Tensor[(2, 7, 9), int64] */;
  %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%548, dtype="int64") /* ty=Tensor[(2, 7, 9), int64] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %553 = @func_2181() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %554 = cast(meta[relay.Constant][33] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %555 = reshape(%554, newshape=[14, 1, 14]) /* ty=Tensor[(14, 1, 14), float64] */;
  %556 = @func_1700(%555) /* ty=(Tensor[(14, 1, 14), float64],) */;
  %557 = add(%551, %552) /* ty=Tensor[(2, 7, 9), int64] */;
  %558 = %553.0;
  %559 = %556.0;
  (%557, %558, %559, meta[relay.Constant][33] /* ty=Tensor[(196), float64] */)
}

def @func_2143(%var_2134: Tensor[(192), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(14, 1, 14), float64], Tensor[(196, 1), float64], Tensor[(8, 24), float64], Tensor[(192), uint64]) {
  %560 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %561 = @func_2012() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) */;
  %562 = cast(meta[relay.Constant][34] /* ty=Tensor[(196, 1), float64] */, dtype="float64") /* ty=Tensor[(196, 1), float64] */;
  %563 = reshape(%562, newshape=[14, 1, 14]) /* ty=Tensor[(14, 1, 14), float64] */;
  %564 = @func_1700(%563) /* ty=(Tensor[(14, 1, 14), float64],) */;
  %565 = cast(%var_2134, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %566 = reshape(%565, newshape=[8, 24]) /* ty=Tensor[(8, 24), uint64] */;
  %567 = @func_1812(%566) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(8, 24), float64]) */;
  %568 = %560.0;
  %569 = %561.0;
  %570 = %564.0;
  %571 = %567.2;
  (%568, %569, %570, meta[relay.Constant][34] /* ty=Tensor[(196, 1), float64] */, %571, %var_2134)
}

def @func_2012() -> (Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) {
  %572 = @func_1672() /* ty=Tensor[(2, 7, 9), float32] */;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %574 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 105), float32] */, dtype="float32") /* ty=Tensor[(10, 105), float32] */;
  %575 = reshape(%574, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %576 = @func_1644(%575) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(5, 15, 14), float64]) */;
  %577 = exp(%573) /* ty=Tensor[(2, 7, 9), float64] */;
  %578 = %576.0;
  (%577, %578, meta[relay.Constant][35] /* ty=Tensor[(10, 105), float32] */)
}

def @func_1644(%var_1626: Tensor[(1050), float32]) -> (Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(5, 15, 14), float64]) {
  %579 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %580 = cast(%var_1626, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %581 = reshape(%580, newshape=[5, 15, 14]) /* ty=Tensor[(5, 15, 14), float32] */;
  %582 = @func_467(%581) /* ty=(Tensor[(5, 15, 14), float64], Tensor[(5, 15, 14), float64]) */;
  %583 = %582.0;
  %584 = cast(%583, dtype="float64") /* ty=Tensor[(5, 15, 14), float64] */;
  %585 = %579.0;
  %586 = cosh(%584) /* ty=Tensor[(5, 15, 14), float64] */;
  (%585, %var_1626, %586)
}

def @func_1689() -> Tensor[(2, 7, 9), float32] {
  %587 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %588 = %587.0;
  %589 = cast(%588, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  atanh(%589) /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_1786(%var_1784: Tensor[(192), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64]) {
  %590 = @func_1672() /* ty=Tensor[(2, 7, 9), float32] */;
  %591 = cast(%590, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %592 = acosh(%591) /* ty=Tensor[(2, 7, 9), float64] */;
  %593 = cast(%592, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %594 = cast(meta[relay.Constant][36] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %595 = cast(%var_1784, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %596 = reshape(%594, newshape=[]) /* ty=uint64 */;
  %597 = reshape(%595, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), uint64] */;
  %598 = @func_690(%596, %597) /* ty=(Tensor[(16, 2, 6), bool],) */;
  %599 = cosh(%593) /* ty=Tensor[(2, 7, 9), float32] */;
  %600 = %598.0;
  (%599, %600, meta[relay.Constant][36] /* ty=uint64 */, %var_1784)
}

def @func_2354() -> (Tensor[(2, 7, 9), float32],) {
  %601 = @func_2181() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %602 = %601.0;
  (%602,)
}

def @func_2793() -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(4, 48), uint64]) {
  %603 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 48), uint64] */, dtype="uint64") /* ty=Tensor[(4, 48), uint64] */;
  %604 = reshape(%603, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %605 = @func_2143(%604) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(14, 1, 14), float64], Tensor[(196, 1), float64], Tensor[(8, 24), float64], Tensor[(192), uint64]) */;
  %606 = @func_2043() /* ty=Tensor[(2, 7, 9), float32] */;
  %607 = @func_2073() /* ty=Tensor[(2, 7, 9), float32] */;
  %608 = %605.2;
  (%606, %607, %608, meta[relay.Constant][37] /* ty=Tensor[(4, 48), uint64] */)
}

def @func_5100() -> (Tensor[(2, 7, 9), float32],) {
  %609 = @func_2959() /* ty=Tensor[(2, 7, 9), float32] */;
  (%609,)
}

def @func_5916() -> (Tensor[(195), float32], Tensor[(2, 7, 9), float32]) {
  %610 = @func_4844() /* ty=Tensor[(195), float32] */;
  %611 = @func_2165() /* ty=Tensor[(2, 7, 9), float32] */;
  (%610, %611)
}

def @func_6073(%var_6053: uint16, %var_6054: Tensor[(5, 8, 16), uint16]) -> (Tensor[(5, 8, 16), bool], Tensor[(16, 10, 13), float64], Tensor[(5, 8, 16), float32], Tensor[(5, 8, 16), float32]) {
  %612 = cast(%var_6053, dtype="bool") /* ty=bool */;
  %613 = cast(%var_6054, dtype="bool") /* ty=Tensor[(5, 8, 16), bool] */;
  %614 = cast(%var_6053, dtype="float64") /* ty=float64 */;
  %615 = reshape(%614, newshape=[]) /* ty=float64 */;
  %616 = cast(%var_6054, dtype="float32") /* ty=Tensor[(5, 8, 16), float32] */;
  %617 = cast(%var_6054, dtype="float32") /* ty=Tensor[(5, 8, 16), float32] */;
  %618 = less(%612, %613) /* ty=Tensor[(5, 8, 16), bool] */;
  %619 = @func_5509(%615) /* ty=Tensor[(16, 10, 13), float64] */;
  %620 = sqrt(%616) /* ty=Tensor[(5, 8, 16), float32] */;
  %621 = acosh(%617) /* ty=Tensor[(5, 8, 16), float32] */;
  (%618, %619, %620, %621)
}

def @func_5488(%var_5486: uint64) -> (Tensor[(2, 7, 9), float64], uint64, uint64) {
  %622 = cast(%var_5486, dtype="uint64") /* ty=uint64 */;
  %623 = reshape(%622, newshape=[]) /* ty=uint64 */;
  %624 = @func_4899(%623) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(14, 6, 14), float64], Tensor[(1176), float64], Tensor[(5, 12, 13), uint64], uint64) */;
  %625 = @func_3012() /* ty=Tensor[(2, 7, 9), float64] */;
  %626 = %624.4;
  (%625, %626, %var_5486)
}

def @func_4227(%var_4204: Tensor[(4, 1, 16), uint8], %var_4205: Tensor[(4, 12, 16), uint8]) -> (Tensor[(4, 12, 16), uint8], Tensor[(4, 12, 16), uint8]) {
  %627 = cast(%var_4204, dtype="uint8") /* ty=Tensor[(4, 1, 16), uint8] */;
  %628 = cast(%var_4205, dtype="uint8") /* ty=Tensor[(4, 12, 16), uint8] */;
  %629 = cast(%var_4205, dtype="float64") /* ty=Tensor[(4, 12, 16), float64] */;
  %630 = atan(%629) /* ty=Tensor[(4, 12, 16), float64] */;
  %631 = cast(%var_4205, dtype="uint8") /* ty=Tensor[(4, 12, 16), uint8] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%630, dtype="uint8") /* ty=Tensor[(4, 12, 16), uint8] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %635 = subtract(%627, %628) /* ty=Tensor[(4, 12, 16), uint8] */;
  %636 = bitwise_or(%633, %634) /* ty=Tensor[(4, 12, 16), uint8] */;
  (%635, %636)
}

def @func_1972(%var_1948: Tensor[(210), float32]) -> (Tensor[(3, 14, 5), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) {
  %637 = cast(%var_1948, dtype="float32") /* ty=Tensor[(210), float32] */;
  %638 = reshape(%637, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float32] */;
  %639 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %640 = %639.0;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %642 = @func_814(%638) /* ty=Tensor[(3, 14, 5), float32] */;
  %643 = sigmoid(%641) /* ty=Tensor[(2, 7, 9), float32] */;
  (%642, %var_1948, %643)
}

def @func_4535(%var_4455: Tensor[(240), int16], %var_4509: Tensor[(1050), float32]) -> (Tensor[(2, 7, 9), float32], Tensor[(10, 12, 2), int16], Tensor[(240), int16], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64], Tensor[(2, 7, 9), float32], Tensor[(1050), float32]) {
  %644 = @func_2012() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) */;
  %645 = cast(%var_4455, dtype="int16") /* ty=Tensor[(240), int16] */;
  %646 = reshape(%645, newshape=[10, 12, 2]) /* ty=Tensor[(10, 12, 2), int16] */;
  %647 = cast(meta[relay.Constant][38] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %648 = reshape(%647, newshape=[1, 192]) /* ty=Tensor[(1, 192), uint64] */;
  %649 = @func_3261(%648) /* ty=(Tensor[(2, 7, 9), bool], Tensor[(14, 1, 14), float64], Tensor[(1, 192), uint64]) */;
  %650 = %649.0;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %652 = @func_2865() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64]) */;
  %653 = cast(%var_4509, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %654 = reshape(%653, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %655 = @func_1644(%654) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(5, 15, 14), float64]) */;
  %656 = %644.1;
  %657 = @func_3695(%646) /* ty=Tensor[(10, 12, 2), int16] */;
  %658 = log10(%651) /* ty=Tensor[(2, 7, 9), float32] */;
  %659 = %652.1;
  %660 = %655.0;
  (%656, %657, %var_4455, meta[relay.Constant][38] /* ty=Tensor[(192), uint64] */, %658, %659, %660, %var_4509)
}

def @func_3755() -> (Tensor[(600, 2), float64], Tensor[(2, 7, 9), float32]) {
  %661 = @func_2270() /* ty=(Tensor[(15, 16, 5), int64], Tensor[(600, 2), float64], Tensor[(2, 7, 9), float64]) */;
  %662 = @func_2959() /* ty=Tensor[(2, 7, 9), float32] */;
  %663 = cast(%662, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %664 = %661.1;
  %665 = atan(%663) /* ty=Tensor[(2, 7, 9), float32] */;
  (%664, %665)
}

def @func_5509(%var_5501: float64) -> Tensor[(16, 10, 13), float64] {
  %666 = cast(%var_5501, dtype="float64") /* ty=float64 */;
  %667 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 10, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 10, 13), float64] */;
  maximum(%666, %667) /* ty=Tensor[(16, 10, 13), float64] */
}

def @func_814(%var_807: Tensor[(3, 14, 5), float32]) -> Tensor[(3, 14, 5), float32] {
  %668 = cast(%var_807, dtype="float32") /* ty=Tensor[(3, 14, 5), float32] */;
  log(%668) /* ty=Tensor[(3, 14, 5), float32] */
}

def @func_5076(%var_5069: Tensor[(9, 13, 2), float64]) -> Tensor[(9, 13, 2), float32] {
  %669 = cast(%var_5069, dtype="float64") /* ty=Tensor[(9, 13, 2), float64] */;
  %670 = exp(%669) /* ty=Tensor[(9, 13, 2), float64] */;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(9, 13, 2), float32] */;
  erf(%671) /* ty=Tensor[(9, 13, 2), float32] */
}

def @func_5994() -> (Tensor[(2, 7, 9), float32],) {
  %672 = @func_2608() /* ty=Tensor[(2, 7, 9), float32] */;
  (%672,)
}

def @func_2073() -> Tensor[(2, 7, 9), float32] {
  @func_2043() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_2217(%var_2215: Tensor[(195), int32]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(13, ?, 15), int32], Tensor[(195), int32]) {
  %673 = @func_2181() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %674 = cast(%var_2215, dtype="int32") /* ty=Tensor[(195), int32] */;
  %675 = cast(%var_2215, dtype="int32") /* ty=Tensor[(195), int32] */;
  %676 = reshape(%674, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int32] */;
  %677 = reshape(%675, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int32] */;
  %678 = @func_1565(%676, %677) /* ty=(Tensor[(13, ?, 15), int32],) */;
  %679 = %673.0;
  %680 = @func_2043() /* ty=Tensor[(2, 7, 9), float32] */;
  %681 = %678.0;
  (%679, %680, %681, %var_2215)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4648(%var_4571: Tensor[(1050), float32], %var_4629: Tensor[(168), int64]) -> (Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(10, 12, 2), int16], Tensor[(2, 7, 9), float32], uint64, Tensor[(192), uint64], Tensor[(5, 15, 14), float32], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(144), float32], Tensor[(168), int64], Tensor[(5, 15, 14), float64]) {
  %0 = @func_4340() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(10, 12, 2), int16], Tensor[(240), int16]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %3 = reshape(%1, newshape=[]) /* ty=uint64 */;
  %4 = reshape(%2, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %5 = @func_3193(%3, %4) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), uint32]) */;
  %6 = cast(%var_4571, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %7 = reshape(%6, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %8 = @func_1644(%7) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(5, 15, 14), float64]) */;
  %9 = %8.2;
  %10 = cast(%9, dtype="float32") /* ty=Tensor[(5, 15, 14), float32] */;
  %11 = @func_2828() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %12 = cast(meta[relay.Constant][2] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %13 = cast(%var_4629, dtype="int64") /* ty=Tensor[(168), int64] */;
  %14 = cast(meta[relay.Constant][2] /* ty=Tensor[(144), float32] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %15 = reshape(%12, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float32] */;
  %16 = reshape(%13, newshape=[168]) /* ty=Tensor[(168), int64] */;
  %17 = reshape(%14, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %18 = @func_3128(%15, %16, %17) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(168), int64], Tensor[(3, 8, 6), float32], Tensor[(3, 8, 6), float32], Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) */;
  %19 = cast(%var_4571, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %20 = reshape(%19, newshape=[5, 15, 14]) /* ty=Tensor[(5, 15, 14), float32] */;
  %21 = @func_467(%20) /* ty=(Tensor[(5, 15, 14), float64], Tensor[(5, 15, 14), float64]) */;
  %22 = @func_2073() /* ty=Tensor[(2, 7, 9), float32] */;
  %23 = %0.1;
  %24 = %5.0;
  %25 = tan(%10) /* ty=Tensor[(5, 15, 14), float32] */;
  %26 = %11.0;
  %27 = %18.7;
  %28 = %21.1;
  (%22, %var_4571, %23, %24, meta[relay.Constant][0] /* ty=uint64 */, meta[relay.Constant][1] /* ty=Tensor[(192), uint64] */, %25, %26, %27, meta[relay.Constant][2] /* ty=Tensor[(144), float32] */, %var_4629, %28)
}

def @func_2217(%var_2215: Tensor[(195), int32]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(13, ?, 15), int32], Tensor[(195), int32]) {
  %29 = @func_2181() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %30 = cast(%var_2215, dtype="int32") /* ty=Tensor[(195), int32] */;
  %31 = cast(%var_2215, dtype="int32") /* ty=Tensor[(195), int32] */;
  %32 = reshape(%30, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int32] */;
  %33 = reshape(%31, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int32] */;
  %34 = @func_1565(%32, %33) /* ty=(Tensor[(13, ?, 15), int32],) */;
  %35 = %29.0;
  %36 = @func_2043() /* ty=Tensor[(2, 7, 9), float32] */;
  %37 = %34.0;
  (%35, %36, %37, %var_2215)
}

def @func_6324(%var_6318: Tensor[(600, 2), float64]) -> (Tensor[(600, 2), float64],) {
  %38 = @func_3755() /* ty=(Tensor[(600, 2), float64], Tensor[(2, 7, 9), float32]) */;
  %39 = %38.0;
  %40 = cast(%var_6318, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
  %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(2), int32] */;
  %42 = cast(%39, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %44 = mod(%42, %43) /* ty=Tensor[(600, 2), float64] */;
  (%44,)
}

def @func_1975(%var_1973: Tensor[(210), float32]) -> (Tensor[(3, 14, 5), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) {
  @func_1972(%var_1973) /* ty=(Tensor[(3, 14, 5), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) */
}

def @func_1972(%var_1948: Tensor[(210), float32]) -> (Tensor[(3, 14, 5), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) {
  %45 = cast(%var_1948, dtype="float32") /* ty=Tensor[(210), float32] */;
  %46 = reshape(%45, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float32] */;
  %47 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %48 = %47.0;
  %49 = cast(%48, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %50 = @func_814(%46) /* ty=Tensor[(3, 14, 5), float32] */;
  %51 = sigmoid(%49) /* ty=Tensor[(2, 7, 9), float32] */;
  (%50, %var_1948, %51)
}

def @func_1548() -> (Tensor[(2, 7, 9), float32],) {
  %54 = fn () -> (Tensor[(2, 7, 9), float32],) {
    %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 7, 9), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
    %53 = sin(%52) /* ty=Tensor[(2, 7, 9), float32] */;
    (%53,)
  };
  %54() /* ty=(Tensor[(2, 7, 9), float32],) */
}

def @func_4341() -> (Tensor[(2, 7, 9), float64], Tensor[(10, 12, 2), int16], Tensor[(240), int16]) {
  %60 = fn () -> (Tensor[(2, 7, 9), float64], Tensor[(10, 12, 2), int16], Tensor[(240), int16]) {
    %55 = @func_2270() /* ty=(Tensor[(15, 16, 5), int64], Tensor[(600, 2), float64], Tensor[(2, 7, 9), float64]) */;
    %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(240), int16] */, dtype="int16") /* ty=Tensor[(240), int16] */;
    %57 = reshape(%56, newshape=[10, 12, 2]) /* ty=Tensor[(10, 12, 2), int16] */;
    %58 = %55.2;
    %59 = @func_3695(%57) /* ty=Tensor[(10, 12, 2), int16] */;
    (%58, %59, meta[relay.Constant][4] /* ty=Tensor[(240), int16] */)
  };
  %60() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(10, 12, 2), int16], Tensor[(240), int16]) */
}

def @func_814(%var_807: Tensor[(3, 14, 5), float32]) -> Tensor[(3, 14, 5), float32] {
  %61 = cast(%var_807, dtype="float32") /* ty=Tensor[(3, 14, 5), float32] */;
  log(%61) /* ty=Tensor[(3, 14, 5), float32] */
}

def @func_5277() -> (Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(2, 7, 9), float32]) {
  @func_5275() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(2, 7, 9), float32]) */
}

def @func_2720() -> Tensor[(2, 7, 9), float32] {
  %63 = fn () -> Tensor[(2, 7, 9), float32] {
    %62 = @func_2354() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %62.0
  };
  %63() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_4065(%var_4060: Tensor[(16, 14, 2), int16], %var_4061: Tensor[(16, 14, 2), int16], %var_4062: Tensor[(210, 1), float32], %var_4063: Tensor[(16, 14, 2), float32], %var_4064: Tensor[(192), uint64]) -> (Tensor[(16, 14, 2), int16], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(210, 1), float32], Tensor[(3, 14, 4), int64], Tensor[(168), int64], Tensor[(16, 14, 2), bool], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(1056), float64]) {
  @func_4058(%var_4060, %var_4061, %var_4062, %var_4063, %var_4064) /* ty=(Tensor[(16, 14, 2), int16], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(210, 1), float32], Tensor[(3, 14, 4), int64], Tensor[(168), int64], Tensor[(16, 14, 2), bool], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(1056), float64]) */
}

def @func_5300(%var_5295: Tensor[(2, 7, 9), float32]) -> Tensor[(2, 7, 9), int16] {
  %64 = @func_1689() /* ty=Tensor[(2, 7, 9), float32] */;
  %65 = cast(%var_5295, dtype="int16") /* ty=Tensor[(2, 7, 9), int16] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="int16") /* ty=Tensor[(2, 7, 9), int16] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_xor(%67, %68) /* ty=Tensor[(2, 7, 9), int16] */
}

def @func_1565(%var_1552: Tensor[(13, 1, 15), int32], %var_1553: Tensor[(13, 1, 15), int32]) -> (Tensor[(13, ?, 15), int32],) {
  %69 = cast(%var_1553, dtype="int32") /* ty=Tensor[(13, 1, 15), int32] */;
  %70 = shape_of(%var_1552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%var_1552, dtype="int32") /* ty=Tensor[(13, 1, 15), int32] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %73 = bitwise_or(%71, %72) /* ty=Tensor[(13, ?, 15), int32] */;
  (%73,)
}

def @func_5011(%var_5010: Tensor[(2, 7, 9), float32]) -> (Tensor[(2, 7, 9), int64], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(196), float64]) {
  %87 = fn (%var_4981: Tensor[(2, 7, 9), float32]) -> (Tensor[(2, 7, 9), int64], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(196), float64]) {
    %74 = @func_2914() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %75 = %74.0;
    %76 = cast(%var_4981, dtype="int64") /* ty=Tensor[(2, 7, 9), int64] */;
    %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
    %78 = cast(%75, dtype="int64") /* ty=Tensor[(2, 7, 9), int64] */;
    %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %80 = @func_2181() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %81 = cast(meta[relay.Constant][5] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
    %82 = reshape(%81, newshape=[14, 1, 14]) /* ty=Tensor[(14, 1, 14), float64] */;
    %83 = @func_1700(%82) /* ty=(Tensor[(14, 1, 14), float64],) */;
    %84 = add(%78, %79) /* ty=Tensor[(2, 7, 9), int64] */;
    %85 = %80.0;
    %86 = %83.0;
    (%84, %85, %86, meta[relay.Constant][5] /* ty=Tensor[(196), float64] */)
  };
  %87(%var_5010) /* ty=(Tensor[(2, 7, 9), int64], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(196), float64]) */
}

def @func_5490(%var_5489: uint64) -> (Tensor[(2, 7, 9), float64], uint64, uint64) {
  %93 = fn (%var_5486: uint64) -> (Tensor[(2, 7, 9), float64], uint64, uint64) {
    %88 = cast(%var_5486, dtype="uint64") /* ty=uint64 */;
    %89 = reshape(%88, newshape=[]) /* ty=uint64 */;
    %90 = @func_4899(%89) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(14, 6, 14), float64], Tensor[(1176), float64], Tensor[(5, 12, 13), uint64], uint64) */;
    %91 = @func_3012() /* ty=Tensor[(2, 7, 9), float64] */;
    %92 = %90.4;
    (%91, %92, %var_5486)
  };
  %93(%var_5489) /* ty=(Tensor[(2, 7, 9), float64], uint64, uint64) */
}

def @func_1700(%var_1692: Tensor[(14, 1, 14), float64]) -> (Tensor[(14, 1, 14), float64],) {
  %94 = cast(%var_1692, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  %95 = cos(%94) /* ty=Tensor[(14, 1, 14), float64] */;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  %97 = cosh(%96) /* ty=Tensor[(14, 1, 14), float64] */;
  (%97,)
}

def @func_5101() -> (Tensor[(2, 7, 9), float32],) {
  %99 = fn () -> (Tensor[(2, 7, 9), float32],) {
    %98 = @func_2959() /* ty=Tensor[(2, 7, 9), float32] */;
    (%98,)
  };
  %99() /* ty=(Tensor[(2, 7, 9), float32],) */
}

def @func_5769() -> Tensor[(2, 7, 9), float32] {
  %100 = fn () -> Tensor[(2, 7, 9), float32] {
    @func_2165() /* ty=Tensor[(2, 7, 9), float32] */
  };
  %100() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_3014() -> Tensor[(2, 7, 9), float64] {
  @func_3012() /* ty=Tensor[(2, 7, 9), float64] */
}

def @func_2340(%var_2339: Tensor[(6, 16, 11), float64]) -> (Tensor[(2, 7, 9), float32], Tensor[(6, 16, 11), float32]) {
  %109 = fn (%var_2326: Tensor[(6, 16, 11), float64]) -> (Tensor[(2, 7, 9), float32], Tensor[(6, 16, 11), float32]) {
    %101 = @func_2181() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %102 = cast(%var_2326, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
    %103 = asin(%102) /* ty=Tensor[(6, 16, 11), float64] */;
    %104 = cast(%103, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
    %105 = exp(%104) /* ty=Tensor[(6, 16, 11), float64] */;
    %106 = cast(%105, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %107 = %101.0;
    %108 = log10(%106) /* ty=Tensor[(6, 16, 11), float32] */;
    (%107, %108)
  };
  %109(%var_2339) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(6, 16, 11), float32]) */
}

def @func_3697(%var_3696: Tensor[(10, 12, 2), int16]) -> Tensor[(10, 12, 2), int16] {
  %119 = fn (%var_3673: Tensor[(10, 12, 2), int16]) -> Tensor[(10, 12, 2), int16] {
    %110 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 12, 2), int16] */, dtype="bool") /* ty=Tensor[(10, 12, 2), bool] */;
    %111 = shape_of(%var_3673, dtype="int32") /* ty=Tensor[(3), int32] */;
    %112 = cast(%var_3673, dtype="bool") /* ty=Tensor[(10, 12, 2), bool] */;
    %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %114 = less(%112, %113) /* ty=Tensor[(10, 12, 2), bool] */;
    %115 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 12, 2), int16] */, dtype="int16") /* ty=Tensor[(10, 12, 2), int16] */;
    %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
    %117 = cast(%114, dtype="int16") /* ty=Tensor[(10, 12, 2), int16] */;
    %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    maximum(%117, %118) /* ty=Tensor[(10, 12, 2), int16] */
  };
  %119(%var_3696) /* ty=Tensor[(10, 12, 2), int16] */
}

def @func_4652(%var_4650: Tensor[(1050), float32], %var_4651: Tensor[(168), int64]) -> (Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(10, 12, 2), int16], Tensor[(2, 7, 9), float32], uint64, Tensor[(192), uint64], Tensor[(5, 15, 14), float32], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(144), float32], Tensor[(168), int64], Tensor[(5, 15, 14), float64]) {
  @func_4648(%var_4650, %var_4651) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(10, 12, 2), int16], Tensor[(2, 7, 9), float32], uint64, Tensor[(192), uint64], Tensor[(5, 15, 14), float32], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(144), float32], Tensor[(168), int64], Tensor[(5, 15, 14), float64]) */
}

def @main() -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], uint64, Tensor[(192), uint64], Tensor[(10, 105), float64]) {
  %120 = @func_1548() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %121 = cast(meta[relay.Constant][7] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %123 = reshape(%121, newshape=[]) /* ty=uint64 */;
  %124 = reshape(%122, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %125 = @func_3197(%123, %124) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), uint32]) */;
  %126 = %125.6;
  %127 = cast(%126, dtype="float64") /* ty=Tensor[(10, 105), float64] */;
  %128 = %120.0;
  %129 = @func_2165() /* ty=Tensor[(2, 7, 9), float32] */;
  %130 = rsqrt(%127) /* ty=Tensor[(10, 105), float64] */;
  (%128, %129, meta[relay.Constant][7] /* ty=uint64 */, meta[relay.Constant][8] /* ty=Tensor[(192), uint64] */, %130)
}

def @func_5421(%var_5366: Tensor[(192), uint64], %var_5395: Tensor[(6, 28), int64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(10, 12, 2), uint8], Tensor[(2, 7, 9), float64], Tensor[(6, 28), int64], Tensor[(2, 7, 9), float32], Tensor[(24, 10), float32], Tensor[(10, 12, 2), float32]) {
  %131 = @func_2828() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %132 = cast(meta[relay.Constant][9] /* ty=Tensor[(24, 10), int16] */, dtype="int16") /* ty=Tensor[(24, 10), int16] */;
  %133 = cast(%var_5366, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %134 = reshape(%132, newshape=[240]) /* ty=Tensor[(240), int16] */;
  %135 = reshape(%133, newshape=[96, 2]) /* ty=Tensor[(96, 2), uint64] */;
  %136 = @func_4301(%134, %135) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(10, 12, 2), int16], Tensor[(240), int16], Tensor[(48, 4), float32], Tensor[(96, 2), uint64]) */;
  %137 = %136.1;
  %138 = cast(%137, dtype="float64") /* ty=Tensor[(10, 12, 2), float64] */;
  %139 = asinh(%138) /* ty=Tensor[(10, 12, 2), float64] */;
  %140 = cast(%137, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %141 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(24, 10), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %142 = cast(meta[relay.Constant][9] /* ty=Tensor[(24, 10), int16] */, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %144 = floor_divide(%142, %143) /* ty=Tensor[(24, 10), float32] */;
  %145 = cast(%144, dtype="uint8") /* ty=Tensor[(24, 10), uint8] */;
  %146 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%139, dtype="uint8") /* ty=Tensor[(10, 12, 2), uint8] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %149 = cast(%var_5395, dtype="int64") /* ty=Tensor[(6, 28), int64] */;
  %150 = cast(%var_5395, dtype="int64") /* ty=Tensor[(6, 28), int64] */;
  %151 = reshape(%149, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %152 = reshape(%150, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %153 = @func_2290(%151, %152) /* ty=(Tensor[(3, 14, 4), int64], Tensor[(2, 7, 9), float64]) */;
  %154 = @func_2388() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */;
  %155 = cast(%144, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %156 = cast(%139, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %157 = @func_2165() /* ty=Tensor[(2, 7, 9), float32] */;
  %158 = %131.0;
  %159 = bitwise_or(%147, %148) /* ty=Tensor[(10, 12, 2), uint8] */;
  %160 = %153.1;
  %161 = %154.1;
  %162 = acosh(%155) /* ty=Tensor[(24, 10), float32] */;
  %163 = log2(%156) /* ty=Tensor[(10, 12, 2), float32] */;
  (%157, %158, %var_5366, %159, %160, %var_5395, %161, %162, %163)
}

def @func_6253(%var_6251: Tensor[(6, 12, 1), float64], %var_6252: Tensor[(6, 12, 5), float64]) -> (Tensor[(6, 12, 5), float64], Tensor[(2, 7, 9), float32], uint64, Tensor[(192, 1), uint64], Tensor[(2, 7, 9), float32], Tensor[(16, 10, 13), float64], Tensor[(2, 7, 9), int16], Tensor[(2, 7, 9), float64], Tensor[(6, 12, 192), int8]) {
  %190 = fn (%var_6161: Tensor[(6, 12, 1), float64], %var_6162: Tensor[(6, 12, 5), float64]) -> (Tensor[(6, 12, 5), float64], Tensor[(2, 7, 9), float32], uint64, Tensor[(192, 1), uint64], Tensor[(2, 7, 9), float32], Tensor[(16, 10, 13), float64], Tensor[(2, 7, 9), int16], Tensor[(2, 7, 9), float64], Tensor[(6, 12, 192), int8]) {
    %164 = cast(%var_6161, dtype="float64") /* ty=Tensor[(6, 12, 1), float64] */;
    %165 = cast(%var_6162, dtype="float64") /* ty=Tensor[(6, 12, 5), float64] */;
    %166 = @func_5994() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %167 = cast(meta[relay.Constant][10] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
    %168 = reshape(%167, newshape=[]) /* ty=float64 */;
    %169 = @func_2073() /* ty=Tensor[(2, 7, 9), float32] */;
    %170 = cast(%169, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
    %171 = reshape(%170, newshape=[2, 7, 9]) /* ty=Tensor[(2, 7, 9), float32] */;
    %172 = @func_6137() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32]) */;
    %173 = cast(meta[relay.Constant][10] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %174 = cast(meta[relay.Constant][11] /* ty=Tensor[(192, 1), uint64] */, dtype="uint64") /* ty=Tensor[(192, 1), uint64] */;
    %175 = reshape(%173, newshape=[]) /* ty=uint64 */;
    %176 = reshape(%174, newshape=[192]) /* ty=Tensor[(192), uint64] */;
    %177 = @func_3193(%175, %176) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), uint32]) */;
    %178 = %177.4;
    %179 = cast(%178, dtype="bool") /* ty=Tensor[(192), bool] */;
    %180 = cast(%var_6161, dtype="bool") /* ty=Tensor[(6, 12, 1), bool] */;
    %181 = less_equal(%179, %180) /* ty=Tensor[(6, 12, 192), bool] */;
    %182 = cast(%181, dtype="int8") /* ty=Tensor[(6, 12, 192), int8] */;
    %183 = cast(%var_6161, dtype="int8") /* ty=Tensor[(6, 12, 1), int8] */;
    %184 = mod(%164, %165) /* ty=Tensor[(6, 12, 5), float64] */;
    %185 = %166.0;
    %186 = @func_5509(%168) /* ty=Tensor[(16, 10, 13), float64] */;
    %187 = @func_5300(%171) /* ty=Tensor[(2, 7, 9), int16] */;
    %188 = %172.0;
    %189 = bitwise_or(%182, %183) /* ty=Tensor[(6, 12, 192), int8] */;
    (%184, %169, meta[relay.Constant][10] /* ty=uint64 */, meta[relay.Constant][11] /* ty=Tensor[(192, 1), uint64] */, %185, %186, %187, %188, %189)
  };
  %190(%var_6251, %var_6252) /* ty=(Tensor[(6, 12, 5), float64], Tensor[(2, 7, 9), float32], uint64, Tensor[(192, 1), uint64], Tensor[(2, 7, 9), float32], Tensor[(16, 10, 13), float64], Tensor[(2, 7, 9), int16], Tensor[(2, 7, 9), float64], Tensor[(6, 12, 192), int8]) */
}

def @func_817(%var_815: Tensor[(3, 14, 5), float32]) -> Tensor[(3, 14, 5), float32] {
  @func_814(%var_815) /* ty=Tensor[(3, 14, 5), float32] */
}

def @func_2182() -> (Tensor[(2, 7, 9), float32],) {
  %192 = fn () -> (Tensor[(2, 7, 9), float32],) {
    %191 = @func_1672() /* ty=Tensor[(2, 7, 9), float32] */;
    (%191,)
  };
  %192() /* ty=(Tensor[(2, 7, 9), float32],) */
}

def @func_2145(%var_2144: Tensor[(192), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(14, 1, 14), float64], Tensor[(196, 1), float64], Tensor[(8, 24), float64], Tensor[(192), uint64]) {
  %205 = fn (%var_2134: Tensor[(192), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(14, 1, 14), float64], Tensor[(196, 1), float64], Tensor[(8, 24), float64], Tensor[(192), uint64]) {
    %193 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %194 = @func_2012() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) */;
    %195 = cast(meta[relay.Constant][12] /* ty=Tensor[(196, 1), float64] */, dtype="float64") /* ty=Tensor[(196, 1), float64] */;
    %196 = reshape(%195, newshape=[14, 1, 14]) /* ty=Tensor[(14, 1, 14), float64] */;
    %197 = @func_1700(%196) /* ty=(Tensor[(14, 1, 14), float64],) */;
    %198 = cast(%var_2134, dtype="uint64") /* ty=Tensor[(192), uint64] */;
    %199 = reshape(%198, newshape=[8, 24]) /* ty=Tensor[(8, 24), uint64] */;
    %200 = @func_1812(%199) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(8, 24), float64]) */;
    %201 = %193.0;
    %202 = %194.0;
    %203 = %197.0;
    %204 = %200.2;
    (%201, %202, %203, meta[relay.Constant][12] /* ty=Tensor[(196, 1), float64] */, %204, %var_2134)
  };
  %205(%var_2144) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(14, 1, 14), float64], Tensor[(196, 1), float64], Tensor[(8, 24), float64], Tensor[(192), uint64]) */
}

def @func_925(%var_923: Tensor[(15, 16, 5), int64], %var_924: Tensor[(15, 16, 5), int64]) -> (Tensor[(15, 16, 5), int64],) {
  @func_921(%var_923, %var_924) /* ty=(Tensor[(15, 16, 5), int64],) */
}

def @func_1691() -> Tensor[(2, 7, 9), float32] {
  @func_1689() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_5511(%var_5510: float64) -> Tensor[(16, 10, 13), float64] {
  %208 = fn (%var_5501: float64) -> Tensor[(16, 10, 13), float64] {
    %206 = cast(%var_5501, dtype="float64") /* ty=float64 */;
    %207 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 10, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 10, 13), float64] */;
    maximum(%206, %207) /* ty=Tensor[(16, 10, 13), float64] */
  };
  %208(%var_5510) /* ty=Tensor[(16, 10, 13), float64] */
}

def @func_1814(%var_1813: Tensor[(8, 24), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(8, 24), float64]) {
  %217 = fn (%var_1800: Tensor[(8, 24), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(8, 24), float64]) {
    %209 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %210 = cast(%var_1800, dtype="uint64") /* ty=Tensor[(8, 24), uint64] */;
    %211 = reshape(%210, newshape=[192]) /* ty=Tensor[(192), uint64] */;
    %212 = @func_1786(%211) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64]) */;
    %213 = cast(%var_1800, dtype="float64") /* ty=Tensor[(8, 24), float64] */;
    %214 = %209.0;
    %215 = %212.0;
    %216 = sqrt(%213) /* ty=Tensor[(8, 24), float64] */;
    (%214, %215, %216)
  };
  %217(%var_1813) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(8, 24), float64]) */
}

def @func_3757() -> (Tensor[(600, 2), float64], Tensor[(2, 7, 9), float32]) {
  @func_3755() /* ty=(Tensor[(600, 2), float64], Tensor[(2, 7, 9), float32]) */
}

def @func_4152(%var_4150: Tensor[(3, 11, 8), float64], %var_4151: Tensor[(3, 11, 8), float32]) -> (Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float32], Tensor[(2, 7, 9), float32]) {
  %235 = fn (%var_4092: Tensor[(3, 11, 8), float64], %var_4117: Tensor[(3, 11, 8), float32]) -> (Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float32], Tensor[(2, 7, 9), float32]) {
    %218 = cast(%var_4092, dtype="float64") /* ty=Tensor[(3, 11, 8), float64] */;
    %219 = cosh(%218) /* ty=Tensor[(3, 11, 8), float64] */;
    %220 = cast(%219, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
    %221 = erf(%220) /* ty=Tensor[(3, 11, 8), float32] */;
    %222 = cast(%219, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
    %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
    %224 = cast(%221, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
    %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %226 = cast(%var_4117, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
    %227 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
    %228 = cast(%221, dtype="bool") /* ty=Tensor[(3, 11, 8), bool] */;
    %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %230 = cast(%var_4092, dtype="float32") /* ty=Tensor[(3, 11, 8), float32] */;
    %231 = equal(%224, %225) /* ty=Tensor[(3, 11, 8), bool] */;
    %232 = logical_and(%228, %229) /* ty=Tensor[(3, 11, 8), bool] */;
    %233 = log2(%230) /* ty=Tensor[(3, 11, 8), float32] */;
    %234 = @func_2608() /* ty=Tensor[(2, 7, 9), float32] */;
    (%231, %232, %233, %234)
  };
  %235(%var_4150, %var_4151) /* ty=(Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), bool], Tensor[(3, 11, 8), float32], Tensor[(2, 7, 9), float32]) */
}

def @func_5829(%var_5828: Tensor[(2, 7, 9), float32]) -> (Tensor[(2, 7, 9), float64],) {
  %242 = fn (%var_5821: Tensor[(2, 7, 9), float32]) -> (Tensor[(2, 7, 9), float64],) {
    %236 = @func_2651() /* ty=Tensor[(2, 7, 9), float32] */;
    %237 = cast(%var_5821, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
    %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
    %239 = cast(%236, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
    %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %241 = maximum(%239, %240) /* ty=Tensor[(2, 7, 9), float64] */;
    (%241,)
  };
  %242(%var_5828) /* ty=(Tensor[(2, 7, 9), float64],) */
}

def @func_2829() -> (Tensor[(2, 7, 9), float32],) {
  %245 = fn () -> (Tensor[(2, 7, 9), float32],) {
    %243 = @func_2388() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */;
    %244 = %243.0;
    (%244,)
  };
  %245() /* ty=(Tensor[(2, 7, 9), float32],) */
}

def @func_3636(%var_3587: Tensor[(168), int64]) -> (Tensor[(168), int64], Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float64]) {
  %246 = cast(%var_3587, dtype="int64") /* ty=Tensor[(168), int64] */;
  %247 = cast(%var_3587, dtype="int64") /* ty=Tensor[(168), int64] */;
  %248 = reshape(%246, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %249 = reshape(%247, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %250 = @func_2290(%248, %249) /* ty=(Tensor[(3, 14, 4), int64], Tensor[(2, 7, 9), float64]) */;
  %251 = %250.1;
  %252 = @func_2651() /* ty=Tensor[(2, 7, 9), float32] */;
  %253 = cast(%252, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %254 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%251, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %257 = cast(meta[relay.Constant][14] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %258 = reshape(%257, newshape=[8, 24]) /* ty=Tensor[(8, 24), uint64] */;
  %259 = @func_1812(%258) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(8, 24), float64]) */;
  %260 = floor_mod(%255, %256) /* ty=Tensor[(2, 7, 9), float64] */;
  %261 = %259.1;
  %262 = @func_3012() /* ty=Tensor[(2, 7, 9), float64] */;
  (%var_3587, %260, %261, meta[relay.Constant][14] /* ty=Tensor[(192), uint64] */, %262)
}

def @func_1789(%var_1787: Tensor[(192), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64]) {
  @func_1786(%var_1787) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64]) */
}

def @func_2866() -> (Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64]) {
  %267 = fn () -> (Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64]) {
    %263 = @func_2388() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */;
    %264 = @func_2793() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(4, 48), uint64]) */;
    %265 = %263.1;
    %266 = %264.3;
    (%265, %266)
  };
  %267() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64]) */
}

def @func_2916() -> (Tensor[(2, 7, 9), float32],) {
  @func_2914() /* ty=(Tensor[(2, 7, 9), float32],) */
}

def @func_5425(%var_5423: Tensor[(192), uint64], %var_5424: Tensor[(6, 28), int64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(10, 12, 2), uint8], Tensor[(2, 7, 9), float64], Tensor[(6, 28), int64], Tensor[(2, 7, 9), float32], Tensor[(24, 10), float32], Tensor[(10, 12, 2), float32]) {
  @func_5421(%var_5423, %var_5424) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(10, 12, 2), uint8], Tensor[(2, 7, 9), float64], Tensor[(6, 28), int64], Tensor[(2, 7, 9), float32], Tensor[(24, 10), float32], Tensor[(10, 12, 2), float32]) */
}

def @func_694(%var_692: uint64, %var_693: Tensor[(16, 2, 6), uint64]) -> (Tensor[(16, 2, 6), bool],) {
  @func_690(%var_692, %var_693) /* ty=(Tensor[(16, 2, 6), bool],) */
}

def @func_5058(%var_5035: uint32, %var_5036: Tensor[(12, 9, 5), uint32]) -> (Tensor[(12, 9, 5), uint32], Tensor[(2, 7, 9), float32]) {
  %268 = cast(%var_5035, dtype="uint32") /* ty=uint32 */;
  %269 = cast(%var_5036, dtype="uint32") /* ty=Tensor[(12, 9, 5), uint32] */;
  %270 = right_shift(%268, %269) /* ty=Tensor[(12, 9, 5), uint32] */;
  %271 = @func_2608() /* ty=Tensor[(2, 7, 9), float32] */;
  (%270, %271)
}

def @func_6076(%var_6074: uint16, %var_6075: Tensor[(5, 8, 16), uint16]) -> (Tensor[(5, 8, 16), bool], Tensor[(16, 10, 13), float64], Tensor[(5, 8, 16), float32], Tensor[(5, 8, 16), float32]) {
  %282 = fn (%var_6053: uint16, %var_6054: Tensor[(5, 8, 16), uint16]) -> (Tensor[(5, 8, 16), bool], Tensor[(16, 10, 13), float64], Tensor[(5, 8, 16), float32], Tensor[(5, 8, 16), float32]) {
    %272 = cast(%var_6053, dtype="bool") /* ty=bool */;
    %273 = cast(%var_6054, dtype="bool") /* ty=Tensor[(5, 8, 16), bool] */;
    %274 = cast(%var_6053, dtype="float64") /* ty=float64 */;
    %275 = reshape(%274, newshape=[]) /* ty=float64 */;
    %276 = cast(%var_6054, dtype="float32") /* ty=Tensor[(5, 8, 16), float32] */;
    %277 = cast(%var_6054, dtype="float32") /* ty=Tensor[(5, 8, 16), float32] */;
    %278 = less(%272, %273) /* ty=Tensor[(5, 8, 16), bool] */;
    %279 = @func_5509(%275) /* ty=Tensor[(16, 10, 13), float64] */;
    %280 = sqrt(%276) /* ty=Tensor[(5, 8, 16), float32] */;
    %281 = acosh(%277) /* ty=Tensor[(5, 8, 16), float32] */;
    (%278, %279, %280, %281)
  };
  %282(%var_6074, %var_6075) /* ty=(Tensor[(5, 8, 16), bool], Tensor[(16, 10, 13), float64], Tensor[(5, 8, 16), float32], Tensor[(5, 8, 16), float32]) */
}

def @func_1830() -> Tensor[(2, 7, 9), float32] {
  @func_1828() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_5303(%var_5301: Tensor[(2, 7, 9), float32]) -> Tensor[(2, 7, 9), int16] {
  @func_5300(%var_5301) /* ty=Tensor[(2, 7, 9), int16] */
}

def @func_2389() -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) {
  %286 = fn () -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) {
    %283 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %284 = @func_2043() /* ty=Tensor[(2, 7, 9), float32] */;
    %285 = %283.0;
    (%284, %285)
  };
  %286() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */
}

def @func_2608() -> Tensor[(2, 7, 9), float32] {
  @func_1689() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_6327(%var_6325: Tensor[(600, 2), float64]) -> (Tensor[(600, 2), float64],) {
  @func_6324(%var_6325) /* ty=(Tensor[(600, 2), float64],) */
}

def @func_2012() -> (Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) {
  %287 = @func_1672() /* ty=Tensor[(2, 7, 9), float32] */;
  %288 = cast(%287, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %289 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 105), float32] */, dtype="float32") /* ty=Tensor[(10, 105), float32] */;
  %290 = reshape(%289, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %291 = @func_1644(%290) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(5, 15, 14), float64]) */;
  %292 = exp(%288) /* ty=Tensor[(2, 7, 9), float64] */;
  %293 = %291.0;
  (%292, %293, meta[relay.Constant][15] /* ty=Tensor[(10, 105), float32] */)
}

def @func_6138() -> (Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32]) {
  %297 = fn () -> (Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32]) {
    %294 = @func_2270() /* ty=(Tensor[(15, 16, 5), int64], Tensor[(600, 2), float64], Tensor[(2, 7, 9), float64]) */;
    %295 = %294.2;
    %296 = @func_2320() /* ty=Tensor[(2, 7, 9), float32] */;
    (%295, %296)
  };
  %297() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32]) */
}

def @func_4535(%var_4455: Tensor[(240), int16], %var_4509: Tensor[(1050), float32]) -> (Tensor[(2, 7, 9), float32], Tensor[(10, 12, 2), int16], Tensor[(240), int16], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64], Tensor[(2, 7, 9), float32], Tensor[(1050), float32]) {
  %298 = @func_2012() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) */;
  %299 = cast(%var_4455, dtype="int16") /* ty=Tensor[(240), int16] */;
  %300 = reshape(%299, newshape=[10, 12, 2]) /* ty=Tensor[(10, 12, 2), int16] */;
  %301 = cast(meta[relay.Constant][16] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %302 = reshape(%301, newshape=[1, 192]) /* ty=Tensor[(1, 192), uint64] */;
  %303 = @func_3261(%302) /* ty=(Tensor[(2, 7, 9), bool], Tensor[(14, 1, 14), float64], Tensor[(1, 192), uint64]) */;
  %304 = %303.0;
  %305 = cast(%304, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %306 = @func_2865() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64]) */;
  %307 = cast(%var_4509, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %308 = reshape(%307, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %309 = @func_1644(%308) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(5, 15, 14), float64]) */;
  %310 = %298.1;
  %311 = @func_3695(%300) /* ty=Tensor[(10, 12, 2), int16] */;
  %312 = log10(%305) /* ty=Tensor[(2, 7, 9), float32] */;
  %313 = %306.1;
  %314 = %309.0;
  (%310, %311, %var_4455, meta[relay.Constant][16] /* ty=Tensor[(192), uint64] */, %312, %313, %314, %var_4509)
}

def @func_5807() -> (Tensor[(2, 7, 9), float32],) {
  %315 = @func_2073() /* ty=Tensor[(2, 7, 9), float32] */;
  (%315,)
}

def @func_2960() -> Tensor[(2, 7, 9), float32] {
  %317 = fn () -> Tensor[(2, 7, 9), float32] {
    %316 = @func_2914() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %316.0
  };
  %317() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_5062(%var_5060: uint32, %var_5061: Tensor[(12, 9, 5), uint32]) -> (Tensor[(12, 9, 5), uint32], Tensor[(2, 7, 9), float32]) {
  @func_5058(%var_5060, %var_5061) /* ty=(Tensor[(12, 9, 5), uint32], Tensor[(2, 7, 9), float32]) */
}

def @func_3263(%var_3262: Tensor[(1, 192), uint64]) -> (Tensor[(2, 7, 9), bool], Tensor[(14, 1, 14), float64], Tensor[(1, 192), uint64]) {
  %333 = fn (%var_3244: Tensor[(1, 192), uint64]) -> (Tensor[(2, 7, 9), bool], Tensor[(14, 1, 14), float64], Tensor[(1, 192), uint64]) {
    %318 = @func_1828() /* ty=Tensor[(2, 7, 9), float32] */;
    %319 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 7, 9), float32] */, dtype="bool") /* ty=Tensor[(2, 7, 9), bool] */;
    %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
    %321 = cast(%318, dtype="bool") /* ty=Tensor[(2, 7, 9), bool] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %323 = equal(%321, %322) /* ty=Tensor[(2, 7, 9), bool] */;
    %324 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 7, 9), float32] */, dtype="bool") /* ty=Tensor[(2, 7, 9), bool] */;
    %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
    %326 = cast(%323, dtype="bool") /* ty=Tensor[(2, 7, 9), bool] */;
    %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %328 = cast(%var_3244, dtype="uint64") /* ty=Tensor[(1, 192), uint64] */;
    %329 = reshape(%328, newshape=[192]) /* ty=Tensor[(192), uint64] */;
    %330 = @func_2143(%329) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(14, 1, 14), float64], Tensor[(196, 1), float64], Tensor[(8, 24), float64], Tensor[(192), uint64]) */;
    %331 = greater_equal(%326, %327) /* ty=Tensor[(2, 7, 9), bool] */;
    %332 = %330.2;
    (%331, %332, %var_3244)
  };
  %333(%var_3262) /* ty=(Tensor[(2, 7, 9), bool], Tensor[(14, 1, 14), float64], Tensor[(1, 192), uint64]) */
}

def @func_2271() -> (Tensor[(15, 16, 5), int64], Tensor[(600, 2), float64], Tensor[(2, 7, 9), float64]) {
  %345 = fn () -> (Tensor[(15, 16, 5), int64], Tensor[(600, 2), float64], Tensor[(2, 7, 9), float64]) {
    %334 = cast(meta[relay.Constant][18] /* ty=Tensor[(600, 2), int64] */, dtype="int64") /* ty=Tensor[(600, 2), int64] */;
    %335 = cast(meta[relay.Constant][18] /* ty=Tensor[(600, 2), int64] */, dtype="int64") /* ty=Tensor[(600, 2), int64] */;
    %336 = reshape(%334, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), int64] */;
    %337 = reshape(%335, newshape=[15, 16, 5]) /* ty=Tensor[(15, 16, 5), int64] */;
    %338 = @func_921(%336, %337) /* ty=(Tensor[(15, 16, 5), int64],) */;
    %339 = cast(meta[relay.Constant][18] /* ty=Tensor[(600, 2), int64] */, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
    %340 = @func_1828() /* ty=Tensor[(2, 7, 9), float32] */;
    %341 = cast(%340, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
    %342 = %338.0;
    %343 = rsqrt(%339) /* ty=Tensor[(600, 2), float64] */;
    %344 = acos(%341) /* ty=Tensor[(2, 7, 9), float64] */;
    (%342, %343, %344)
  };
  %345() /* ty=(Tensor[(15, 16, 5), int64], Tensor[(600, 2), float64], Tensor[(2, 7, 9), float64]) */
}

def @func_2293(%var_2291: Tensor[(3, 14, 4), int64], %var_2292: Tensor[(3, 14, 4), int64]) -> (Tensor[(3, 14, 4), int64], Tensor[(2, 7, 9), float64]) {
  %353 = fn (%var_2272: Tensor[(3, 14, 4), int64], %var_2273: Tensor[(3, 14, 4), int64]) -> (Tensor[(3, 14, 4), int64], Tensor[(2, 7, 9), float64]) {
    %346 = cast(%var_2273, dtype="int64") /* ty=Tensor[(3, 14, 4), int64] */;
    %347 = shape_of(%var_2272, dtype="int32") /* ty=Tensor[(3), int32] */;
    %348 = cast(%var_2272, dtype="int64") /* ty=Tensor[(3, 14, 4), int64] */;
    %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %350 = @func_2012() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) */;
    %351 = maximum(%348, %349) /* ty=Tensor[(3, 14, 4), int64] */;
    %352 = %350.0;
    (%351, %352)
  };
  %353(%var_2291, %var_2292) /* ty=(Tensor[(3, 14, 4), int64], Tensor[(2, 7, 9), float64]) */
}

def @func_690(%var_685: uint64, %var_686: Tensor[(16, 2, 6), uint64]) -> (Tensor[(16, 2, 6), bool],) {
  %354 = cast(%var_685, dtype="bool") /* ty=bool */;
  %355 = cast(%var_686, dtype="bool") /* ty=Tensor[(16, 2, 6), bool] */;
  %356 = equal(%354, %355) /* ty=Tensor[(16, 2, 6), bool] */;
  (%356,)
}

def @func_4304(%var_4302: Tensor[(240), int16], %var_4303: Tensor[(96, 2), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(10, 12, 2), int16], Tensor[(240), int16], Tensor[(48, 4), float32], Tensor[(96, 2), uint64]) {
  %365 = fn (%var_4275: Tensor[(240), int16], %var_4293: Tensor[(96, 2), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(10, 12, 2), int16], Tensor[(240), int16], Tensor[(48, 4), float32], Tensor[(96, 2), uint64]) {
    %357 = cast(%var_4275, dtype="int16") /* ty=Tensor[(240), int16] */;
    %358 = reshape(%357, newshape=[10, 12, 2]) /* ty=Tensor[(10, 12, 2), int16] */;
    %359 = cast(%var_4293, dtype="uint64") /* ty=Tensor[(96, 2), uint64] */;
    %360 = reshape(%359, newshape=[192]) /* ty=Tensor[(192), uint64] */;
    %361 = @func_3381(%360) /* ty=(Tensor[(10, 105), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(48, 4), float32]) */;
    %362 = @func_2320() /* ty=Tensor[(2, 7, 9), float32] */;
    %363 = @func_3695(%358) /* ty=Tensor[(10, 12, 2), int16] */;
    %364 = %361.4;
    (%362, %363, %var_4275, %364, %var_4293)
  };
  %365(%var_4302, %var_4303) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(10, 12, 2), int16], Tensor[(240), int16], Tensor[(48, 4), float32], Tensor[(96, 2), uint64]) */
}

def @func_2356() -> (Tensor[(2, 7, 9), float32],) {
  @func_2354() /* ty=(Tensor[(2, 7, 9), float32],) */
}

def @func_5707() -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) {
  %368 = fn () -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) {
    %366 = @func_2651() /* ty=Tensor[(2, 7, 9), float32] */;
    %367 = @func_2719() /* ty=Tensor[(2, 7, 9), float32] */;
    (%366, %367)
  };
  %368() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */
}

def @func_2980() -> (Tensor[(10, 105), uint32], Tensor[(10, 105), float32], Tensor[(10, 105), float32]) {
  %369 = @func_2012() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) */;
  %370 = %369.2;
  %371 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 105), float32] */, dtype="uint32") /* ty=Tensor[(10, 105), uint32] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(2), int32] */;
  %373 = cast(%370, dtype="uint32") /* ty=Tensor[(10, 105), uint32] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %375 = cast(%370, dtype="float32") /* ty=Tensor[(10, 105), float32] */;
  %376 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 105), float32] */, dtype="float32") /* ty=Tensor[(10, 105), float32] */;
  %377 = subtract(%373, %374) /* ty=Tensor[(10, 105), uint32] */;
  %378 = sqrt(%375) /* ty=Tensor[(10, 105), float32] */;
  %379 = acosh(%376) /* ty=Tensor[(10, 105), float32] */;
  (%377, %378, %379)
}

def @func_5809() -> (Tensor[(2, 7, 9), float32],) {
  @func_5807() /* ty=(Tensor[(2, 7, 9), float32],) */
}

def @func_3546(%var_3504: Tensor[(9, 3, 15), float64], %var_3539: uint64) -> (Tensor[(9, 3, 15), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64]) {
  %380 = cast(%var_3504, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
  %381 = cast(%var_3539, dtype="uint64") /* ty=uint64 */;
  %382 = cast(meta[relay.Constant][20] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %383 = reshape(%381, newshape=[]) /* ty=uint64 */;
  %384 = reshape(%382, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), uint64] */;
  %385 = @func_690(%383, %384) /* ty=(Tensor[(16, 2, 6), bool],) */;
  %386 = exp(%380) /* ty=Tensor[(9, 3, 15), float64] */;
  %387 = %385.0;
  (%386, %387, %var_3539, meta[relay.Constant][20] /* ty=Tensor[(192), uint64] */)
}

def @func_1646(%var_1645: Tensor[(1050), float32]) -> (Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(5, 15, 14), float64]) {
  %396 = fn (%var_1626: Tensor[(1050), float32]) -> (Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(5, 15, 14), float64]) {
    %388 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %389 = cast(%var_1626, dtype="float32") /* ty=Tensor[(1050), float32] */;
    %390 = reshape(%389, newshape=[5, 15, 14]) /* ty=Tensor[(5, 15, 14), float32] */;
    %391 = @func_467(%390) /* ty=(Tensor[(5, 15, 14), float64], Tensor[(5, 15, 14), float64]) */;
    %392 = %391.0;
    %393 = cast(%392, dtype="float64") /* ty=Tensor[(5, 15, 14), float64] */;
    %394 = %388.0;
    %395 = cosh(%393) /* ty=Tensor[(5, 15, 14), float64] */;
    (%394, %var_1626, %395)
  };
  %396(%var_1645) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(5, 15, 14), float64]) */
}

def @func_3755() -> (Tensor[(600, 2), float64], Tensor[(2, 7, 9), float32]) {
  %397 = @func_2270() /* ty=(Tensor[(15, 16, 5), int64], Tensor[(600, 2), float64], Tensor[(2, 7, 9), float64]) */;
  %398 = @func_2959() /* ty=Tensor[(2, 7, 9), float32] */;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %400 = %397.1;
  %401 = atan(%399) /* ty=Tensor[(2, 7, 9), float32] */;
  (%400, %401)
}

def @func_469(%var_468: Tensor[(5, 15, 14), float32]) -> (Tensor[(5, 15, 14), float64], Tensor[(5, 15, 14), float64]) {
  %408 = fn (%var_446: Tensor[(5, 15, 14), float32]) -> (Tensor[(5, 15, 14), float64], Tensor[(5, 15, 14), float64]) {
    %402 = cast(%var_446, dtype="float32") /* ty=Tensor[(5, 15, 14), float32] */;
    %403 = erf(%402) /* ty=Tensor[(5, 15, 14), float32] */;
    %404 = cast(%403, dtype="float64") /* ty=Tensor[(5, 15, 14), float64] */;
    %405 = cast(%403, dtype="float64") /* ty=Tensor[(5, 15, 14), float64] */;
    %406 = acos(%404) /* ty=Tensor[(5, 15, 14), float64] */;
    %407 = log2(%405) /* ty=Tensor[(5, 15, 14), float64] */;
    (%406, %407)
  };
  %408(%var_468) /* ty=(Tensor[(5, 15, 14), float64], Tensor[(5, 15, 14), float64]) */
}

def @func_2220(%var_2218: Tensor[(195), int32]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(13, ?, 15), int32], Tensor[(195), int32]) {
  @func_2217(%var_2218) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(13, ?, 15), int32], Tensor[(195), int32]) */
}

def @func_4845() -> Tensor[(195), float32] {
  %412 = fn () -> Tensor[(195), float32] {
    %409 = @func_3478() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(196), float64], uint64, uint64, Tensor[(2, 96), uint64], Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(195), int32], Tensor[(192), uint64], Tensor[(4, 48), uint64]) */;
    %410 = %409.8;
    %411 = cast(%410, dtype="float32") /* ty=Tensor[(195), float32] */;
    sqrt(%411) /* ty=Tensor[(195), float32] */
  };
  %412() /* ty=Tensor[(195), float32] */
}

def @func_2914() -> (Tensor[(2, 7, 9), float32],) {
  %413 = @func_2181() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %414 = %413.0;
  (%414,)
}

def @func_1703(%var_1701: Tensor[(14, 1, 14), float64]) -> (Tensor[(14, 1, 14), float64],) {
  @func_1700(%var_1701) /* ty=(Tensor[(14, 1, 14), float64],) */
}

def @func_883(%var_882: uint64) -> Tensor[(5, 12, 13), uint64] {
  %417 = fn (%var_875: uint64) -> Tensor[(5, 12, 13), uint64] {
    %415 = cast(%var_875, dtype="uint64") /* ty=uint64 */;
    %416 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 12, 13), uint64] */, dtype="uint64") /* ty=Tensor[(5, 12, 13), uint64] */;
    bitwise_or(%415, %416) /* ty=Tensor[(5, 12, 13), uint64] */
  };
  %417(%var_882) /* ty=Tensor[(5, 12, 13), uint64] */
}

def @func_2354() -> (Tensor[(2, 7, 9), float32],) {
  %418 = @func_2181() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %419 = %418.0;
  (%419,)
}

def @func_4899(%var_4887: uint64) -> (Tensor[(2, 7, 9), float32], Tensor[(14, 6, 14), float64], Tensor[(1176), float64], Tensor[(5, 12, 13), uint64], uint64) {
  %420 = @func_2388() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */;
  %421 = cast(meta[relay.Constant][22] /* ty=Tensor[(1176), float64] */, dtype="float64") /* ty=Tensor[(1176), float64] */;
  %422 = reshape(%421, newshape=[14, 6, 14]) /* ty=Tensor[(14, 6, 14), float64] */;
  %423 = @func_3296(%422) /* ty=(Tensor[(14, 6, 14), float64], Tensor[(3, 14, 5), float32], Tensor[(210), float32]) */;
  %424 = cast(%var_4887, dtype="uint64") /* ty=uint64 */;
  %425 = reshape(%424, newshape=[]) /* ty=uint64 */;
  %426 = %420.0;
  %427 = %423.0;
  %428 = @func_881(%425) /* ty=Tensor[(5, 12, 13), uint64] */;
  (%426, %427, meta[relay.Constant][22] /* ty=Tensor[(1176), float64] */, %428, %var_4887)
}

def @func_4058(%var_3978: Tensor[(16, 14, 2), int16], %var_3979: Tensor[(16, 14, 2), int16], %var_4005: Tensor[(210, 1), float32], %var_4023: Tensor[(16, 14, 2), float32], %var_4036: Tensor[(192), uint64]) -> (Tensor[(16, 14, 2), int16], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(210, 1), float32], Tensor[(3, 14, 4), int64], Tensor[(168), int64], Tensor[(16, 14, 2), bool], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(1056), float64]) {
  %429 = cast(%var_3979, dtype="int16") /* ty=Tensor[(16, 14, 2), int16] */;
  %430 = shape_of(%var_3978, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%var_3978, dtype="int16") /* ty=Tensor[(16, 14, 2), int16] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %433 = cast(%var_4005, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %434 = reshape(%433, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %435 = @func_1972(%434) /* ty=(Tensor[(3, 14, 5), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) */;
  %436 = cast(meta[relay.Constant][23] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %437 = cast(meta[relay.Constant][23] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %438 = reshape(%436, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %439 = reshape(%437, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %440 = @func_2290(%438, %439) /* ty=(Tensor[(3, 14, 4), int64], Tensor[(2, 7, 9), float64]) */;
  %441 = cast(%var_3979, dtype="float64") /* ty=Tensor[(16, 14, 2), float64] */;
  %442 = atanh(%441) /* ty=Tensor[(16, 14, 2), float64] */;
  %443 = cast(%442, dtype="float32") /* ty=Tensor[(16, 14, 2), float32] */;
  %444 = asin(%443) /* ty=Tensor[(16, 14, 2), float32] */;
  %445 = cast(%var_4023, dtype="uint8") /* ty=Tensor[(16, 14, 2), uint8] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%444, dtype="uint8") /* ty=Tensor[(16, 14, 2), uint8] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %449 = bitwise_or(%447, %448) /* ty=Tensor[(16, 14, 2), uint8] */;
  %450 = cast(%var_3978, dtype="bool") /* ty=Tensor[(16, 14, 2), bool] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%449, dtype="bool") /* ty=Tensor[(16, 14, 2), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %454 = cast(%var_4036, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %455 = reshape(%454, newshape=[8, 24]) /* ty=Tensor[(8, 24), uint64] */;
  %456 = @func_1812(%455) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(8, 24), float64]) */;
  %457 = cast(meta[relay.Constant][24] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %458 = reshape(%457, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float64] */;
  %459 = @func_2338(%458) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(6, 16, 11), float32]) */;
  %460 = subtract(%431, %432) /* ty=Tensor[(16, 14, 2), int16] */;
  %461 = @func_2608() /* ty=Tensor[(2, 7, 9), float32] */;
  %462 = %435.1;
  %463 = %440.0;
  %464 = less(%452, %453) /* ty=Tensor[(16, 14, 2), bool] */;
  %465 = %456.1;
  %466 = %459.0;
  (%460, %461, %462, %var_4005, %463, meta[relay.Constant][23] /* ty=Tensor[(168), int64] */, %464, %465, %var_4036, %466, meta[relay.Constant][24] /* ty=Tensor[(1056), float64] */)
}

def @func_4539(%var_4537: Tensor[(240), int16], %var_4538: Tensor[(1050), float32]) -> (Tensor[(2, 7, 9), float32], Tensor[(10, 12, 2), int16], Tensor[(240), int16], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64], Tensor[(2, 7, 9), float32], Tensor[(1050), float32]) {
  @func_4535(%var_4537, %var_4538) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(10, 12, 2), int16], Tensor[(240), int16], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64], Tensor[(2, 7, 9), float32], Tensor[(1050), float32]) */
}

def @func_2014() -> (Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) {
  @func_2012() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) */
}

def @func_5995() -> (Tensor[(2, 7, 9), float32],) {
  %468 = fn () -> (Tensor[(2, 7, 9), float32],) {
    %467 = @func_2608() /* ty=Tensor[(2, 7, 9), float32] */;
    (%467,)
  };
  %468() /* ty=(Tensor[(2, 7, 9), float32],) */
}

def @func_2167() -> Tensor[(2, 7, 9), float32] {
  @func_2165() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_2793() -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(4, 48), uint64]) {
  %469 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 48), uint64] */, dtype="uint64") /* ty=Tensor[(4, 48), uint64] */;
  %470 = reshape(%469, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %471 = @func_2143(%470) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(14, 1, 14), float64], Tensor[(196, 1), float64], Tensor[(8, 24), float64], Tensor[(192), uint64]) */;
  %472 = @func_2043() /* ty=Tensor[(2, 7, 9), float32] */;
  %473 = @func_2073() /* ty=Tensor[(2, 7, 9), float32] */;
  %474 = %471.2;
  (%472, %473, %474, meta[relay.Constant][25] /* ty=Tensor[(4, 48), uint64] */)
}

def @func_2652() -> Tensor[(2, 7, 9), float32] {
  %476 = fn () -> Tensor[(2, 7, 9), float32] {
    %475 = @func_2388() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */;
    %475.0
  };
  %476() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_3193(%var_3165: uint64, %var_3166: Tensor[(192), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), uint32]) {
  %477 = @func_2865() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64]) */;
  %478 = @func_2354() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %479 = %478.0;
  %480 = cast(%479, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %481 = cast(%var_3165, dtype="uint64") /* ty=uint64 */;
  %482 = cast(%var_3166, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %483 = reshape(%481, newshape=[]) /* ty=uint64 */;
  %484 = reshape(%482, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), uint64] */;
  %485 = @func_690(%483, %484) /* ty=(Tensor[(16, 2, 6), bool],) */;
  %486 = @func_2793() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(4, 48), uint64]) */;
  %487 = @func_2980() /* ty=(Tensor[(10, 105), uint32], Tensor[(10, 105), float32], Tensor[(10, 105), float32]) */;
  %488 = %477.0;
  %489 = asin(%480) /* ty=Tensor[(2, 7, 9), float64] */;
  %490 = %485.0;
  %491 = %486.0;
  %492 = %487.0;
  (%488, %489, %490, %var_3165, %var_3166, %491, %492)
}

def @func_5917() -> (Tensor[(195), float32], Tensor[(2, 7, 9), float32]) {
  %495 = fn () -> (Tensor[(195), float32], Tensor[(2, 7, 9), float32]) {
    %493 = @func_4844() /* ty=Tensor[(195), float32] */;
    %494 = @func_2165() /* ty=Tensor[(2, 7, 9), float32] */;
    (%493, %494)
  };
  %495() /* ty=(Tensor[(195), float32], Tensor[(2, 7, 9), float32]) */
}

def @func_60(%var_59: Tensor[(3, 4, 8), float32]) -> (Tensor[(3, 4, 8), float32], Tensor[(3, 4, 8), float32]) {
  %505 = fn (%var_26: Tensor[(3, 4, 8), float32]) -> (Tensor[(3, 4, 8), float32], Tensor[(3, 4, 8), float32]) {
    %496 = cast(%var_26, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
    %497 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 4, 8), float32] */, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
    %498 = shape_of(%var_26, dtype="int32") /* ty=Tensor[(3), int32] */;
    %499 = cast(%var_26, dtype="bool") /* ty=Tensor[(3, 4, 8), bool] */;
    %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %501 = greater(%499, %500) /* ty=Tensor[(3, 4, 8), bool] */;
    %502 = cast(%501, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
    %503 = log2(%496) /* ty=Tensor[(3, 4, 8), float32] */;
    %504 = acos(%502) /* ty=Tensor[(3, 4, 8), float32] */;
    (%503, %504)
  };
  %505(%var_59) /* ty=(Tensor[(3, 4, 8), float32], Tensor[(3, 4, 8), float32]) */
}

def @func_1786(%var_1784: Tensor[(192), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64]) {
  %506 = @func_1672() /* ty=Tensor[(2, 7, 9), float32] */;
  %507 = cast(%506, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %508 = acosh(%507) /* ty=Tensor[(2, 7, 9), float64] */;
  %509 = cast(%508, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %510 = cast(meta[relay.Constant][27] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %511 = cast(%var_1784, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %512 = reshape(%510, newshape=[]) /* ty=uint64 */;
  %513 = reshape(%511, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), uint64] */;
  %514 = @func_690(%512, %513) /* ty=(Tensor[(16, 2, 6), bool],) */;
  %515 = cosh(%509) /* ty=Tensor[(2, 7, 9), float32] */;
  %516 = %514.0;
  (%515, %516, meta[relay.Constant][27] /* ty=uint64 */, %var_1784)
}

def @func_5132() -> Tensor[(2, 7, 9), float32] {
  @func_5130() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_2044() -> Tensor[(2, 7, 9), float32] {
  %517 = fn () -> Tensor[(2, 7, 9), float32] {
    @func_1828() /* ty=Tensor[(2, 7, 9), float32] */
  };
  %517() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_1828() -> Tensor[(2, 7, 9), float32] {
  %518 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %518.0
}

def @func_2322() -> Tensor[(2, 7, 9), float32] {
  @func_2320() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_3133(%var_3130: Tensor[(3, 8, 6), float32], %var_3131: Tensor[(168), int64], %var_3132: Tensor[(3, 8, 6), float64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(168), int64], Tensor[(3, 8, 6), float32], Tensor[(3, 8, 6), float32], Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) {
  @func_3128(%var_3130, %var_3131, %var_3132) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(168), int64], Tensor[(3, 8, 6), float32], Tensor[(3, 8, 6), float32], Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) */
}

def @func_3893(%var_3891: Tensor[(7, 8, 16), float64], %var_3892: Tensor[(7, 8, 16), float64]) -> (Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(7, 8, 16), uint64], Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(7, 8, 16), bool]) {
  %553 = fn (%var_3835: Tensor[(7, 8, 16), float64], %var_3836: Tensor[(7, 8, 16), float64]) -> (Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(7, 8, 16), uint64], Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(7, 8, 16), bool]) {
    %519 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %520 = @func_2793() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(4, 48), uint64]) */;
    %521 = cast(%var_3835, dtype="float64") /* ty=Tensor[(7, 8, 16), float64] */;
    %522 = asin(%521) /* ty=Tensor[(7, 8, 16), float64] */;
    %523 = cast(%522, dtype="float64") /* ty=Tensor[(7, 8, 16), float64] */;
    %524 = acos(%523) /* ty=Tensor[(7, 8, 16), float64] */;
    %525 = cast(%524, dtype="float64") /* ty=Tensor[(7, 8, 16), float64] */;
    %526 = sigmoid(%525) /* ty=Tensor[(7, 8, 16), float64] */;
    %527 = cast(%var_3835, dtype="int64") /* ty=Tensor[(7, 8, 16), int64] */;
    %528 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
    %529 = cast(%524, dtype="int64") /* ty=Tensor[(7, 8, 16), int64] */;
    %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %531 = multiply(%529, %530) /* ty=Tensor[(7, 8, 16), int64] */;
    %532 = cast(%531, dtype="uint64") /* ty=Tensor[(7, 8, 16), uint64] */;
    %533 = shape_of(%526, dtype="int32") /* ty=Tensor[(3), int32] */;
    %534 = cast(%526, dtype="uint64") /* ty=Tensor[(7, 8, 16), uint64] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %536 = cast(meta[relay.Constant][28] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
    %537 = reshape(%536, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
    %538 = @func_1644(%537) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(5, 15, 14), float64]) */;
    %539 = cast(%var_3836, dtype="float64") /* ty=Tensor[(7, 8, 16), float64] */;
    %540 = shape_of(%var_3835, dtype="int32") /* ty=Tensor[(3), int32] */;
    %541 = cast(%var_3835, dtype="float64") /* ty=Tensor[(7, 8, 16), float64] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %543 = mod(%541, %542) /* ty=Tensor[(7, 8, 16), float64] */;
    %544 = cast(%543, dtype="bool") /* ty=Tensor[(7, 8, 16), bool] */;
    %545 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(%531, dtype="bool") /* ty=Tensor[(7, 8, 16), bool] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %548 = %519.0;
    %549 = %520.2;
    %550 = minimum(%534, %535) /* ty=Tensor[(7, 8, 16), uint64] */;
    %551 = %538.0;
    %552 = greater_equal(%546, %547) /* ty=Tensor[(7, 8, 16), bool] */;
    (%548, %549, %550, %551, meta[relay.Constant][28] /* ty=Tensor[(1050), float32] */, %552)
  };
  %553(%var_3891, %var_3892) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(7, 8, 16), uint64], Tensor[(2, 7, 9), float32], Tensor[(1050), float32], Tensor[(7, 8, 16), bool]) */
}

def @func_4230(%var_4228: Tensor[(4, 1, 16), uint8], %var_4229: Tensor[(4, 12, 16), uint8]) -> (Tensor[(4, 12, 16), uint8], Tensor[(4, 12, 16), uint8]) {
  %564 = fn (%var_4204: Tensor[(4, 1, 16), uint8], %var_4205: Tensor[(4, 12, 16), uint8]) -> (Tensor[(4, 12, 16), uint8], Tensor[(4, 12, 16), uint8]) {
    %554 = cast(%var_4204, dtype="uint8") /* ty=Tensor[(4, 1, 16), uint8] */;
    %555 = cast(%var_4205, dtype="uint8") /* ty=Tensor[(4, 12, 16), uint8] */;
    %556 = cast(%var_4205, dtype="float64") /* ty=Tensor[(4, 12, 16), float64] */;
    %557 = atan(%556) /* ty=Tensor[(4, 12, 16), float64] */;
    %558 = cast(%var_4205, dtype="uint8") /* ty=Tensor[(4, 12, 16), uint8] */;
    %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %560 = cast(%557, dtype="uint8") /* ty=Tensor[(4, 12, 16), uint8] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %562 = subtract(%554, %555) /* ty=Tensor[(4, 12, 16), uint8] */;
    %563 = bitwise_or(%560, %561) /* ty=Tensor[(4, 12, 16), uint8] */;
    (%562, %563)
  };
  %564(%var_4228, %var_4229) /* ty=(Tensor[(4, 12, 16), uint8], Tensor[(4, 12, 16), uint8]) */
}

def @func_2552(%var_2551: Tensor[(48, 4), uint64]) -> (Tensor[(16, 2, 6), bool], uint64, Tensor[(48, 4), uint64], Tensor[(2, 7, 9), float64]) {
  %579 = fn (%var_2533: Tensor[(48, 4), uint64]) -> (Tensor[(16, 2, 6), bool], uint64, Tensor[(48, 4), uint64], Tensor[(2, 7, 9), float64]) {
    %565 = cast(meta[relay.Constant][29] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %566 = cast(%var_2533, dtype="uint64") /* ty=Tensor[(48, 4), uint64] */;
    %567 = reshape(%565, newshape=[]) /* ty=uint64 */;
    %568 = reshape(%566, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), uint64] */;
    %569 = @func_690(%567, %568) /* ty=(Tensor[(16, 2, 6), bool],) */;
    %570 = @func_2320() /* ty=Tensor[(2, 7, 9), float32] */;
    %571 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 7, 9), float32] */, dtype="uint16") /* ty=Tensor[(2, 7, 9), uint16] */;
    %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
    %573 = cast(%570, dtype="uint16") /* ty=Tensor[(2, 7, 9), uint16] */;
    %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %575 = logical_xor(%573, %574) /* ty=Tensor[(2, 7, 9), uint16] */;
    %576 = cast(%575, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
    %577 = %569.0;
    %578 = erf(%576) /* ty=Tensor[(2, 7, 9), float64] */;
    (%577, meta[relay.Constant][29] /* ty=uint64 */, %var_2533, %578)
  };
  %579(%var_2551) /* ty=(Tensor[(16, 2, 6), bool], uint64, Tensor[(48, 4), uint64], Tensor[(2, 7, 9), float64]) */
}

def @func_3639(%var_3637: Tensor[(168), int64]) -> (Tensor[(168), int64], Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float64]) {
  @func_3636(%var_3637) /* ty=(Tensor[(168), int64], Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float64]) */
}

def @func_3197(%var_3195: uint64, %var_3196: Tensor[(192), uint64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), uint32]) {
  @func_3193(%var_3195, %var_3196) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), uint32]) */
}

def @func_3383(%var_3382: Tensor[(192), uint64]) -> (Tensor[(10, 105), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(48, 4), float32]) {
  %594 = fn (%var_3350: Tensor[(192), uint64]) -> (Tensor[(10, 105), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(48, 4), float32]) {
    %580 = @func_2012() /* ty=(Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), float32]) */;
    %581 = cast(meta[relay.Constant][31] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %582 = reshape(%581, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %583 = @func_1972(%582) /* ty=(Tensor[(3, 14, 5), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) */;
    %584 = cast(%var_3350, dtype="uint64") /* ty=Tensor[(192), uint64] */;
    %585 = reshape(%584, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint64] */;
    %586 = @func_2550(%585) /* ty=(Tensor[(16, 2, 6), bool], uint64, Tensor[(48, 4), uint64], Tensor[(2, 7, 9), float64]) */;
    %587 = %586.2;
    %588 = cast(%587, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
    %589 = log(%588) /* ty=Tensor[(48, 4), float32] */;
    %590 = cast(%589, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
    %591 = %580.2;
    %592 = %583.2;
    %593 = log2(%590) /* ty=Tensor[(48, 4), float32] */;
    (%591, %var_3350, %592, meta[relay.Constant][31] /* ty=Tensor[(210), float32] */, %593)
  };
  %594(%var_3382) /* ty=(Tensor[(10, 105), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(48, 4), float32]) */
}

def @func_2165() -> Tensor[(2, 7, 9), float32] {
  @func_2043() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_1673() -> Tensor[(2, 7, 9), float32] {
  %596 = fn () -> Tensor[(2, 7, 9), float32] {
    %595 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %595.0
  };
  %596() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_4902(%var_4900: uint64) -> (Tensor[(2, 7, 9), float32], Tensor[(14, 6, 14), float64], Tensor[(1176), float64], Tensor[(5, 12, 13), uint64], uint64) {
  @func_4899(%var_4900) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(14, 6, 14), float64], Tensor[(1176), float64], Tensor[(5, 12, 13), uint64], uint64) */
}

def @func_1569(%var_1567: Tensor[(13, 1, 15), int32], %var_1568: Tensor[(13, 1, 15), int32]) -> (Tensor[(13, ?, 15), int32],) {
  @func_1565(%var_1567, %var_1568) /* ty=(Tensor[(13, ?, 15), int32],) */
}

def @func_3128(%var_3039: Tensor[(3, 8, 6), float32], %var_3059: Tensor[(168), int64], %var_3091: Tensor[(3, 8, 6), float64]) -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(168), int64], Tensor[(3, 8, 6), float32], Tensor[(3, 8, 6), float32], Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(210), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) {
  %597 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %598 = cast(%var_3059, dtype="int64") /* ty=Tensor[(168), int64] */;
  %599 = cast(%var_3059, dtype="int64") /* ty=Tensor[(168), int64] */;
  %600 = reshape(%598, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %601 = reshape(%599, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), int64] */;
  %602 = @func_2290(%600, %601) /* ty=(Tensor[(3, 14, 4), int64], Tensor[(2, 7, 9), float64]) */;
  %603 = cast(%var_3039, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %604 = tan(%603) /* ty=Tensor[(3, 8, 6), float32] */;
  %605 = cast(%var_3039, dtype="int8") /* ty=Tensor[(3, 8, 6), int8] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%604, dtype="int8") /* ty=Tensor[(3, 8, 6), int8] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %609 = logical_xor(%607, %608) /* ty=Tensor[(3, 8, 6), int8] */;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(3, 8, 6), float64] */;
  %611 = sqrt(%610) /* ty=Tensor[(3, 8, 6), float64] */;
  %612 = cast(%611, dtype="float64") /* ty=Tensor[(3, 8, 6), float64] */;
  %613 = erf(%612) /* ty=Tensor[(3, 8, 6), float64] */;
  %614 = cast(%609, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%613, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %618 = cast(%var_3091, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %619 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%611, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %622 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %623 = @func_2388() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32]) */;
  %624 = cast(meta[relay.Constant][32] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %625 = reshape(%624, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %626 = @func_1972(%625) /* ty=(Tensor[(3, 14, 5), float32], Tensor[(210), float32], Tensor[(2, 7, 9), float32]) */;
  %627 = %597.0;
  %628 = %602.1;
  %629 = floor_mod(%616, %617) /* ty=Tensor[(3, 8, 6), float32] */;
  %630 = divide(%620, %621) /* ty=Tensor[(3, 8, 6), float32] */;
  %631 = %622.0;
  %632 = %623.1;
  %633 = %626.1;
  %634 = @func_2608() /* ty=Tensor[(2, 7, 9), float32] */;
  (%627, %628, %var_3059, %629, %630, %631, %632, %633, meta[relay.Constant][32] /* ty=Tensor[(210), float32] */, %634)
}

def @func_2320() -> Tensor[(2, 7, 9), float32] {
  @func_2165() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_1689() -> Tensor[(2, 7, 9), float32] {
  %635 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %636 = %635.0;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  atanh(%637) /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_2075() -> Tensor[(2, 7, 9), float32] {
  @func_2073() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_3012() -> Tensor[(2, 7, 9), float64] {
  %638 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %639 = %638.0;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  asinh(%640) /* ty=Tensor[(2, 7, 9), float64] */
}

def @func_1592() -> (Tensor[(2, 7, 9), float32],) {
  %643 = fn () -> (Tensor[(2, 7, 9), float32],) {
    %641 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %642 = %641.0;
    (%642,)
  };
  %643() /* ty=(Tensor[(2, 7, 9), float32],) */
}

def @func_3550(%var_3548: Tensor[(9, 3, 15), float64], %var_3549: uint64) -> (Tensor[(9, 3, 15), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64]) {
  @func_3546(%var_3548, %var_3549) /* ty=(Tensor[(9, 3, 15), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64]) */
}

def @func_1880(%var_1879: Tensor[(195, 1), int32]) -> (Tensor[(6, 12, 13), float32], Tensor[(6, 12, 13), bool], Tensor[(13, ?, 15), int32], Tensor[(195, 1), int32]) {
  %662 = fn (%var_1871: Tensor[(195, 1), int32]) -> (Tensor[(6, 12, 13), float32], Tensor[(6, 12, 13), bool], Tensor[(13, ?, 15), int32], Tensor[(195, 1), int32]) {
    %644 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 12, 13), int64] */, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
    %645 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 12, 13), int64] */, dtype="int64") /* ty=Tensor[(6, 12, 13), int64] */;
    %646 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(6, 12, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %647 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 12, 13), int64] */, dtype="int64") /* ty=Tensor[(6, 12, 13), int64] */;
    %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %649 = bitwise_and(%647, %648) /* ty=Tensor[(6, 12, 13), int64] */;
    %650 = cast(%649, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
    %651 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(6, 12, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %652 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 12, 13), int64] */, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
    %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %654 = cast(%var_1871, dtype="int32") /* ty=Tensor[(195, 1), int32] */;
    %655 = cast(%var_1871, dtype="int32") /* ty=Tensor[(195, 1), int32] */;
    %656 = reshape(%654, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int32] */;
    %657 = reshape(%655, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int32] */;
    %658 = @func_1565(%656, %657) /* ty=(Tensor[(13, ?, 15), int32],) */;
    %659 = asin(%644) /* ty=Tensor[(6, 12, 13), float32] */;
    %660 = less(%652, %653) /* ty=Tensor[(6, 12, 13), bool] */;
    %661 = %658.0;
    (%659, %660, %661, %var_1871)
  };
  %662(%var_1879) /* ty=(Tensor[(6, 12, 13), float32], Tensor[(6, 12, 13), bool], Tensor[(13, ?, 15), int32], Tensor[(195, 1), int32]) */
}

def @func_2795() -> (Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(4, 48), uint64]) {
  @func_2793() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(4, 48), uint64]) */
}

def @func_3298(%var_3297: Tensor[(14, 6, 14), float64]) -> (Tensor[(14, 6, 14), float64], Tensor[(3, 14, 5), float32], Tensor[(210), float32]) {
  %668 = fn (%var_3278: Tensor[(14, 6, 14), float64]) -> (Tensor[(14, 6, 14), float64], Tensor[(3, 14, 5), float32], Tensor[(210), float32]) {
    %663 = cast(%var_3278, dtype="float64") /* ty=Tensor[(14, 6, 14), float64] */;
    %664 = cast(meta[relay.Constant][35] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %665 = reshape(%664, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float32] */;
    %666 = acosh(%663) /* ty=Tensor[(14, 6, 14), float64] */;
    %667 = @func_814(%665) /* ty=Tensor[(3, 14, 5), float32] */;
    (%666, %667, meta[relay.Constant][35] /* ty=Tensor[(210), float32] */)
  };
  %668(%var_3297) /* ty=(Tensor[(14, 6, 14), float64], Tensor[(3, 14, 5), float32], Tensor[(210), float32]) */
}

def @func_2610() -> Tensor[(2, 7, 9), float32] {
  @func_2608() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_2073() -> Tensor[(2, 7, 9), float32] {
  @func_2043() /* ty=Tensor[(2, 7, 9), float32] */
}

def @func_2982() -> (Tensor[(10, 105), uint32], Tensor[(10, 105), float32], Tensor[(10, 105), float32]) {
  @func_2980() /* ty=(Tensor[(10, 105), uint32], Tensor[(10, 105), float32], Tensor[(10, 105), float32]) */
}

def @func_921(%var_915: Tensor[(15, 16, 5), int64], %var_916: Tensor[(15, 16, 5), int64]) -> (Tensor[(15, 16, 5), int64],) {
  %669 = cast(%var_916, dtype="int64") /* ty=Tensor[(15, 16, 5), int64] */;
  %670 = shape_of(%var_915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%var_915, dtype="int64") /* ty=Tensor[(15, 16, 5), int64] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %673 = right_shift(%671, %672) /* ty=Tensor[(15, 16, 5), int64] */;
  (%673,)
}

def @func_2485(%var_2484: Tensor[(2, 7, 9), float32]) -> (Tensor[(2, 7, 9), uint8],) {
  %681 = fn (%var_2476: Tensor[(2, 7, 9), float32]) -> (Tensor[(2, 7, 9), uint8],) {
    %674 = @func_1547() /* ty=(Tensor[(2, 7, 9), float32],) */;
    %675 = %674.0;
    %676 = cast(%var_2476, dtype="uint8") /* ty=Tensor[(2, 7, 9), uint8] */;
    %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
    %678 = cast(%675, dtype="uint8") /* ty=Tensor[(2, 7, 9), uint8] */;
    %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %680 = bitwise_or(%678, %679) /* ty=Tensor[(2, 7, 9), uint8] */;
    (%680,)
  };
  %681(%var_2484) /* ty=(Tensor[(2, 7, 9), uint8],) */
}

def @func_5078(%var_5077: Tensor[(9, 13, 2), float64]) -> Tensor[(9, 13, 2), float32] {
  %685 = fn (%var_5069: Tensor[(9, 13, 2), float64]) -> Tensor[(9, 13, 2), float32] {
    %682 = cast(%var_5069, dtype="float64") /* ty=Tensor[(9, 13, 2), float64] */;
    %683 = exp(%682) /* ty=Tensor[(9, 13, 2), float64] */;
    %684 = cast(%683, dtype="float32") /* ty=Tensor[(9, 13, 2), float32] */;
    erf(%684) /* ty=Tensor[(9, 13, 2), float32] */
  };
  %685(%var_5077) /* ty=Tensor[(9, 13, 2), float32] */
}

def @func_3480() -> (Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(196), float64], uint64, uint64, Tensor[(2, 96), uint64], Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(195), int32], Tensor[(192), uint64], Tensor[(4, 48), uint64]) {
  @func_3478() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(196), float64], uint64, uint64, Tensor[(2, 96), uint64], Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(195), int32], Tensor[(192), uint64], Tensor[(4, 48), uint64]) */
}

def @func_5275() -> (Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(2, 7, 9), float32]) {
  %686 = @func_2320() /* ty=Tensor[(2, 7, 9), float32] */;
  %687 = cast(%686, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %688 = reshape(%687, newshape=[2, 7, 9]) /* ty=Tensor[(2, 7, 9), float32] */;
  %689 = @func_5009(%688) /* ty=(Tensor[(2, 7, 9), int64], Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(196), float64]) */;
  %690 = cast(%686, dtype="float32") /* ty=Tensor[(2, 7, 9), float32] */;
  %691 = @func_5130() /* ty=Tensor[(2, 7, 9), float32] */;
  %692 = %689.2;
  %693 = sqrt(%690) /* ty=Tensor[(2, 7, 9), float32] */;
  (%691, %692, %693)
}

def @func_5603(%var_5602: Tensor[(1, 15, 12), float32]) -> Tensor[(1, 15, 12), float32] {
  %695 = fn (%var_5591: Tensor[(1, 15, 12), float32]) -> Tensor[(1, 15, 12), float32] {
    %694 = cast(%var_5591, dtype="float32") /* ty=Tensor[(1, 15, 12), float32] */;
    acos(%694) /* ty=Tensor[(1, 15, 12), float32] */
  };
  %695(%var_5602) /* ty=Tensor[(1, 15, 12), float32] */
}

def @func_5130() -> Tensor[(2, 7, 9), float32] {
  %696 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %696.0
}

def @func_3960(%var_3959: Tensor[(84, 2), int64]) -> (Tensor[(2, 7, 9), float32], Tensor[(84, 2), int64], Tensor[(2, 7, 9), float32], Tensor[(192), float64]) {
  %706 = fn (%var_3903: Tensor[(84, 2), int64]) -> (Tensor[(2, 7, 9), float32], Tensor[(84, 2), int64], Tensor[(2, 7, 9), float32], Tensor[(192), float64]) {
    %697 = @func_2865() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64]) */;
    %698 = cast(%var_3903, dtype="int64") /* ty=Tensor[(84, 2), int64] */;
    %699 = reshape(%698, newshape=[168]) /* ty=Tensor[(168), int64] */;
    %700 = @func_3636(%699) /* ty=(Tensor[(168), int64], Tensor[(2, 7, 9), float64], Tensor[(2, 7, 9), float32], Tensor[(192), uint64], Tensor[(2, 7, 9), float64]) */;
    %701 = %700.3;
    %702 = cast(%701, dtype="float64") /* ty=Tensor[(192), float64] */;
    %703 = @func_2959() /* ty=Tensor[(2, 7, 9), float32] */;
    %704 = %697.0;
    %705 = asinh(%702) /* ty=Tensor[(192), float64] */;
    (%703, %var_3903, %704, %705)
  };
  %706(%var_3959) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(84, 2), int64], Tensor[(2, 7, 9), float32], Tensor[(192), float64]) */
}

def @func_3478() -> (Tensor[(2, 7, 9), float32], Tensor[(14, 1, 14), float64], Tensor[(196), float64], uint64, uint64, Tensor[(2, 96), uint64], Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(195), int32], Tensor[(192), uint64], Tensor[(4, 48), uint64]) {
  %707 = cast(meta[relay.Constant][36] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %708 = reshape(%707, newshape=[14, 1, 14]) /* ty=Tensor[(14, 1, 14), float64] */;
  %709 = @func_1700(%708) /* ty=(Tensor[(14, 1, 14), float64],) */;
  %710 = cast(meta[relay.Constant][37] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %711 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 96), uint64] */, dtype="uint64") /* ty=Tensor[(2, 96), uint64] */;
  %712 = reshape(%710, newshape=[]) /* ty=uint64 */;
  %713 = reshape(%711, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %714 = @func_3193(%712, %713) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float64], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64], Tensor[(2, 7, 9), float32], Tensor[(10, 105), uint32]) */;
  %715 = @func_1591() /* ty=(Tensor[(2, 7, 9), float32],) */;
  %716 = cast(meta[relay.Constant][39] /* ty=Tensor[(195), int32] */, dtype="int32") /* ty=Tensor[(195), int32] */;
  %717 = reshape(%716, newshape=[195]) /* ty=Tensor[(195), int32] */;
  %718 = @func_2217(%717) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(2, 7, 9), float32], Tensor[(13, ?, 15), int32], Tensor[(195), int32]) */;
  %719 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 96), uint64] */, dtype="uint64") /* ty=Tensor[(2, 96), uint64] */;
  %720 = reshape(%719, newshape=[192]) /* ty=Tensor[(192), uint64] */;
  %721 = @func_1786(%720) /* ty=(Tensor[(2, 7, 9), float32], Tensor[(16, 2, 6), bool], uint64, Tensor[(192), uint64]) */;
  %722 = @func_2865() /* ty=(Tensor[(2, 7, 9), float32], Tensor[(4, 48), uint64]) */;
  %723 = @func_2073() /* ty=Tensor[(2, 7, 9), float32] */;
  %724 = %709.0;
  %725 = %714.3;
  %726 = %715.0;
  %727 = %718.0;
  %728 = %721.3;
  %729 = %722.1;
  (%723, %724, meta[relay.Constant][36] /* ty=Tensor[(196), float64] */, %725, meta[relay.Constant][37] /* ty=uint64 */, meta[relay.Constant][38] /* ty=Tensor[(2, 96), uint64] */, %726, %727, meta[relay.Constant][39] /* ty=Tensor[(195), int32] */, %728, %729)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen79/build/output.py", line 1860, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:48:15] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

