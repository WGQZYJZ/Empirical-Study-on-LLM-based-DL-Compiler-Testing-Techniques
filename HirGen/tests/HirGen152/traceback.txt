==========mod==========
#[version = "0.0.5"]
def @func_2962(%var_2951: Tensor[(7, 9, 5), float64]) -> (Tensor[(7, 9, 5), float64], Tensor[(15, 11, 6), int8]) {
  %0 = cast(%var_2951, dtype="float64") /* ty=Tensor[(7, 9, 5), float64] */;
  %1 = @func_2873() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %2 = atanh(%0) /* ty=Tensor[(7, 9, 5), float64] */;
  %3 = %1.0;
  (%2, %3)
}

def @func_1637(%var_1596: Tensor[(11, 6, 16), bool], %var_1597: Tensor[(11, 6, 16), bool]) -> (Tensor[(11, 6, 16), bool], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(2, 15, 3), int32], Tensor[(11, 6, 16), float32]) {
  %4 = cast(%var_1597, dtype="bool") /* ty=Tensor[(11, 6, 16), bool] */;
  %5 = shape_of(%var_1596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%var_1596, dtype="bool") /* ty=Tensor[(11, 6, 16), bool] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
  %10 = reshape(%8, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %11 = reshape(%9, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %12 = @func_128(%10, %11) /* ty=Tensor[(2, 15, 3), int32] */;
  %13 = cast(%12, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
  %15 = reshape(%13, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %16 = reshape(%14, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %17 = cast(%var_1596, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
  %18 = acosh(%17) /* ty=Tensor[(11, 6, 16), float64] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
  %20 = logical_and(%6, %7) /* ty=Tensor[(11, 6, 16), bool] */;
  %21 = @func_128(%15, %16) /* ty=Tensor[(2, 15, 3), int32] */;
  %22 = log10(%19) /* ty=Tensor[(11, 6, 16), float32] */;
  (%20, %12, meta[relay.Constant][0] /* ty=Tensor[(90), int32] */, %21, %22)
}

def @func_6152() -> Tensor[(15, 11, 6), int8] {
  @func_6105() /* ty=Tensor[(15, 11, 6), int8] */
}

def @func_5581() -> Tensor[(90), int32] {
  %23 = @func_3069() /* ty=(Tensor[(90), int32],) */;
  %23.0
}

def @func_5230(%var_5158: Tensor[(3, 16, 15), uint32], %var_5159: Tensor[(3, 16, 15), uint32]) -> (Tensor[(3, 16, 15), bool], Tensor[(90), int32], Tensor[(3, 16, 15), bool], Tensor[(3, 16, 15), float64], Tensor[(15, 11, 6), float64], Tensor[(7, 8, 8), float64], Tensor[(448), float64], Tensor[(15, 11, 6), float32], Tensor[(3, 16, 15), float64]) {
  %24 = cast(%var_5159, dtype="bool") /* ty=Tensor[(3, 16, 15), bool] */;
  %25 = shape_of(%var_5158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%var_5158, dtype="bool") /* ty=Tensor[(3, 16, 15), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = @func_3763() /* ty=(Tensor[(90), int32],) */;
  %29 = cast(%var_5158, dtype="bool") /* ty=Tensor[(3, 16, 15), bool] */;
  %30 = shape_of(%var_5159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%var_5159, dtype="bool") /* ty=Tensor[(3, 16, 15), bool] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %33 = cast(%var_5158, dtype="float32") /* ty=Tensor[(3, 16, 15), float32] */;
  %34 = exp(%33) /* ty=Tensor[(3, 16, 15), float32] */;
  %35 = cast(%34, dtype="float64") /* ty=Tensor[(3, 16, 15), float64] */;
  %36 = @func_2793() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) */;
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %38 = reshape(%37, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
  %39 = @func_2409(%38) /* ty=(Tensor[(7, 8, 8), float64],) */;
  %40 = @func_5123() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %41 = cast(%34, dtype="float64") /* ty=Tensor[(3, 16, 15), float64] */;
  %42 = less(%26, %27) /* ty=Tensor[(3, 16, 15), bool] */;
  %43 = %28.0;
  %44 = greater(%31, %32) /* ty=Tensor[(3, 16, 15), bool] */;
  %45 = log2(%35) /* ty=Tensor[(3, 16, 15), float64] */;
  %46 = %36.0;
  %47 = %39.0;
  %48 = %40.0;
  %49 = acosh(%41) /* ty=Tensor[(3, 16, 15), float64] */;
  (%42, %43, %44, %45, %46, %47, meta[relay.Constant][1] /* ty=Tensor[(448), float64] */, %48, %49)
}

def @func_1311(%var_1285: Tensor[(10, 2, 1), float32], %var_1307: Tensor[(90, 1), int32]) -> (Tensor[(10, 2, 13), float64], Tensor[(2, 15, 3), int32], Tensor[(90, 1), int32]) {
  %50 = cast(%var_1285, dtype="float32") /* ty=Tensor[(10, 2, 1), float32] */;
  %51 = erf(%50) /* ty=Tensor[(10, 2, 1), float32] */;
  %52 = cast(%51, dtype="float64") /* ty=Tensor[(10, 2, 1), float64] */;
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 2, 13), float32] */, dtype="float64") /* ty=Tensor[(10, 2, 13), float64] */;
  %54 = mod(%52, %53) /* ty=Tensor[(10, 2, 13), float64] */;
  %55 = cast(%51, dtype="float64") /* ty=Tensor[(10, 2, 1), float64] */;
  %56 = cast(%54, dtype="float64") /* ty=Tensor[(10, 2, 13), float64] */;
  %57 = cast(%var_1307, dtype="int32") /* ty=Tensor[(90, 1), int32] */;
  %58 = cast(%var_1307, dtype="int32") /* ty=Tensor[(90, 1), int32] */;
  %59 = reshape(%57, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %60 = reshape(%58, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %61 = maximum(%55, %56) /* ty=Tensor[(10, 2, 13), float64] */;
  %62 = @func_128(%59, %60) /* ty=Tensor[(2, 15, 3), int32] */;
  (%61, %62, %var_1307)
}

def @func_5447() -> (Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32]) {
  %63 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %64 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %65 = @func_3901() /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), float32]) */;
  %66 = %63.0;
  %67 = %64.0;
  %68 = %65.1;
  (%66, %67, %68)
}

def @func_7716() -> (Tensor[(15, 11, 6), float32],) {
  %69 = @func_6949() /* ty=(Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32]) */;
  %70 = %69.1;
  (%70,)
}

def @func_7891() -> (Tensor[(90), int32],) {
  %71 = @func_5888() /* ty=(Tensor[(90), int32],) */;
  %72 = %71.0;
  (%72,)
}

def @func_6105() -> Tensor[(15, 11, 6), int8] {
  %73 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %73.0
}

def @func_2482(%var_2471: Tensor[(12), float32]) -> (Tensor[(15, 11, 6), int8], Tensor[(1, 12, 13), int32], int32, Tensor[(12), float32]) {
  %74 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %75 = cast(-9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %76 = cast(%var_2471, dtype="float32") /* ty=Tensor[(12), float32] */;
  %77 = reshape(%75, newshape=[]) /* ty=int32 */;
  %78 = reshape(%76, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %79 = @func_1712(%77, %78) /* ty=(Tensor[(1, 12, 13), int32], Tensor[(2, 15, 3), int32], Tensor[(12), float32]) */;
  %80 = %74.0;
  %81 = %79.0;
  (%80, %81, -9 /* ty=int32 */, %var_2471)
}

def @func_4567(%var_4562: Tensor[(12), float32]) -> (Tensor[(15, 11, 6), bool], Tensor[(2, 15, 3), int32], Tensor[(12), float32], Tensor[(156), float32]) {
  %82 = @func_4417() /* ty=Tensor[(15, 11, 6), int8] */;
  %83 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 11, 6), int8] */, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %87 = cast(%var_4562, dtype="float32") /* ty=Tensor[(12), float32] */;
  %88 = cast(meta[relay.Constant][4] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %89 = reshape(%87, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), float32] */;
  %90 = reshape(%88, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float32] */;
  %91 = @func_991(%89, %90) /* ty=(Tensor[(6, 2, 13), float32], Tensor[(2, 15, 3), int32], Tensor[(5, 234), uint8], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32]) */;
  %92 = greater_equal(%85, %86) /* ty=Tensor[(15, 11, 6), bool] */;
  %93 = %91.1;
  (%92, %93, %var_4562, meta[relay.Constant][4] /* ty=Tensor[(156), float32] */)
}

def @func_5680(%var_5590: Tensor[(1, 4, 11), uint16], %var_5591: Tensor[(4, 4, 11), uint16], %var_5598: Tensor[(390, 3), uint8], %var_5611: Tensor[(600), float32], %var_5629: Tensor[(180), float64]) -> (Tensor[(4, 4, 11), uint16], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8], Tensor[(390, 3), uint8], Tensor[(15, 11, 6), int8], Tensor[(600), float32], Tensor[(90), int32], Tensor[(4, 4, 11), bool], Tensor[(15, 11, 6), float32], Tensor[(180), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), bool], Tensor[(4, 4, 11), float64], Tensor[(4, 4, 11), float32]) {
  %94 = cast(%var_5590, dtype="uint16") /* ty=Tensor[(1, 4, 11), uint16] */;
  %95 = cast(%var_5591, dtype="uint16") /* ty=Tensor[(4, 4, 11), uint16] */;
  %96 = @func_4979() /* ty=(Tensor[(8, 1, 7), float64], Tensor[(15, 11, 6), float32]) */;
  %97 = cast(%var_5598, dtype="uint8") /* ty=Tensor[(390, 3), uint8] */;
  %98 = cast(%var_5598, dtype="uint8") /* ty=Tensor[(390, 3), uint8] */;
  %99 = reshape(%97, newshape=[1170]) /* ty=Tensor[(1170), uint8] */;
  %100 = reshape(%98, newshape=[1170]) /* ty=Tensor[(1170), uint8] */;
  %101 = @func_3622(%99, %100) /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(1170), bool], Tensor[(2, 15, 3), int32], Tensor[(120), int32]) */;
  %102 = cast(%var_5611, dtype="float32") /* ty=Tensor[(600), float32] */;
  %103 = cast(%var_5611, dtype="float32") /* ty=Tensor[(600), float32] */;
  %104 = reshape(%102, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), float32] */;
  %105 = reshape(%103, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), float32] */;
  %106 = @func_4038(%104, %105) /* ty=(Tensor[(10, 10, 6), bool], Tensor[(15, 11, 6), int8]) */;
  %107 = @func_3964() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(90), int32]) */;
  %108 = cast(%var_5591, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %109 = tan(%108) /* ty=Tensor[(4, 4, 11), float64] */;
  %110 = cast(%109, dtype="bool") /* ty=Tensor[(4, 4, 11), bool] */;
  %111 = cast(%var_5590, dtype="bool") /* ty=Tensor[(1, 4, 11), bool] */;
  %112 = cast(%var_5629, dtype="float64") /* ty=Tensor[(180), float64] */;
  %113 = reshape(%112, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), float64] */;
  %114 = @func_4156(%113) /* ty=(Tensor[(15, 11, 6), float32], Tensor[(3, 6, 10), float32], Tensor[(6, 6, 5), float32], Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) */;
  %115 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %116 = %101.1;
  %117 = cast(%116, dtype="int8") /* ty=Tensor[(15, 11, 6), int8] */;
  %118 = reshape(%117, newshape=[15, 11, 6]) /* ty=Tensor[(15, 11, 6), int8] */;
  %119 = @func_3038(%118) /* ty=(Tensor[(15, 11, 6), bool], Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8]) */;
  %120 = cast(%var_5591, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %121 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%109, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %124 = cast(%var_5590, dtype="float32") /* ty=Tensor[(1, 4, 11), float32] */;
  %125 = cast(%109, dtype="float32") /* ty=Tensor[(4, 4, 11), float32] */;
  %126 = bitwise_or(%94, %95) /* ty=Tensor[(4, 4, 11), uint16] */;
  %127 = %96.1;
  %128 = %106.1;
  %129 = %107.1;
  %130 = logical_or(%110, %111) /* ty=Tensor[(4, 4, 11), bool] */;
  %131 = %114.0;
  %132 = %115.0;
  %133 = %119.0;
  %134 = floor_mod(%122, %123) /* ty=Tensor[(4, 4, 11), float64] */;
  %135 = subtract(%124, %125) /* ty=Tensor[(4, 4, 11), float32] */;
  (%126, %127, %116, %var_5598, %128, %var_5611, %129, %130, %131, %var_5629, %132, %133, %134, %135)
}

def @func_5888() -> (Tensor[(90), int32],) {
  %136 = @func_3901() /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), float32]) */;
  %137 = %136.0;
  (%137,)
}

def @func_5979() -> (Tensor[(15, 11, 6), float64],) {
  %138 = @func_4344() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %139 = %138.0;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %141 = log2(%140) /* ty=Tensor[(15, 11, 6), float64] */;
  %142 = cast(%139, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %146 = divide(%144, %145) /* ty=Tensor[(15, 11, 6), float64] */;
  (%146,)
}

def @func_6888(%var_6862: Tensor[(1, 8, 15), float32], %var_6880: Tensor[(11, 8, 15), float32]) -> (Tensor[(16, 12, 3), float64], Tensor[(576), bool], Tensor[(15, 11, 6), float32], Tensor[(11, 8, 15), bool]) {
  %147 = cast(meta[relay.Constant][5] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %148 = reshape(%147, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), bool] */;
  %149 = @func_5367(%148) /* ty=(Tensor[(15, 11, 6), float32], Tensor[(16, 12, 3), float64], Tensor[(16, 12, 3), int32]) */;
  %150 = @func_4614() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %151 = cast(%var_6862, dtype="float32") /* ty=Tensor[(1, 8, 15), float32] */;
  %152 = sin(%151) /* ty=Tensor[(1, 8, 15), float32] */;
  %153 = cast(%152, dtype="bool") /* ty=Tensor[(1, 8, 15), bool] */;
  %154 = cast(%var_6880, dtype="bool") /* ty=Tensor[(11, 8, 15), bool] */;
  %155 = %149.1;
  %156 = %150.0;
  %157 = equal(%153, %154) /* ty=Tensor[(11, 8, 15), bool] */;
  (%155, meta[relay.Constant][5] /* ty=Tensor[(576), bool] */, %156, %157)
}

def @func_3069() -> (Tensor[(90), int32],) {
  %158 = @func_2793() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) */;
  %159 = %158.2;
  (%159,)
}

def @func_2692() -> (Tensor[(15, 11, 6), int8],) {
  %160 = @func_2401() /* ty=Tensor[(15, 11, 6), int8] */;
  (%160,)
}

def @func_991(%var_947: Tensor[(6, 2, 1), float32], %var_948: Tensor[(6, 2, 13), float32]) -> (Tensor[(6, 2, 13), float32], Tensor[(2, 15, 3), int32], Tensor[(5, 234), uint8], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32]) {
  %161 = cast(%var_947, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %162 = cast(%var_948, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  %163 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 234), uint8] */, dtype="uint8") /* ty=Tensor[(5, 234), uint8] */;
  %164 = reshape(%163, newshape=[6, 13, 15]) /* ty=Tensor[(6, 13, 15), uint8] */;
  %165 = @func_498(%164) /* ty=(Tensor[(6, 13, 15), float64], Tensor[(2, 15, 3), int32]) */;
  %166 = %165.1;
  %167 = cast(%166, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
  %168 = cast(%166, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
  %169 = reshape(%167, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %170 = reshape(%168, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %171 = @func_128(%169, %170) /* ty=Tensor[(2, 15, 3), int32] */;
  %172 = cast(%171, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
  %173 = cast(%166, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
  %174 = reshape(%172, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %175 = reshape(%173, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %176 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 234), uint8] */, dtype="uint8") /* ty=Tensor[(5, 234), uint8] */;
  %177 = reshape(%176, newshape=[6, 13, 15]) /* ty=Tensor[(6, 13, 15), uint8] */;
  %178 = @func_498(%177) /* ty=(Tensor[(6, 13, 15), float64], Tensor[(2, 15, 3), int32]) */;
  %179 = floor_mod(%161, %162) /* ty=Tensor[(6, 2, 13), float32] */;
  %180 = @func_128(%174, %175) /* ty=Tensor[(2, 15, 3), int32] */;
  %181 = %178.1;
  (%179, %166, meta[relay.Constant][6] /* ty=Tensor[(5, 234), uint8] */, %171, %180, %181)
}

def @func_6587() -> Tensor[(15, 11, 6), float32] {
  %182 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %182.0
}

def @func_5318() -> Tensor[(15, 11, 6), float32] {
  @func_2990() /* ty=Tensor[(15, 11, 6), float32] */
}

def @func_6044(%var_6033: Tensor[(130, 9), uint8]) -> (Tensor[(15, 11, 6), float64], Tensor[(1170), bool], Tensor[(130, 9), uint8], Tensor[(15, 11, 6), int8]) {
  %183 = @func_5016() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %184 = %183.0;
  %185 = cast(%184, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %186 = cast(%var_6033, dtype="uint8") /* ty=Tensor[(130, 9), uint8] */;
  %187 = cast(%var_6033, dtype="uint8") /* ty=Tensor[(130, 9), uint8] */;
  %188 = reshape(%186, newshape=[1170]) /* ty=Tensor[(1170), uint8] */;
  %189 = reshape(%187, newshape=[1170]) /* ty=Tensor[(1170), uint8] */;
  %190 = @func_3622(%188, %189) /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(1170), bool], Tensor[(2, 15, 3), int32], Tensor[(120), int32]) */;
  %191 = @func_4276() /* ty=(Tensor[(15, 11, 6), int8], Tensor[(3, 5, 1), bool], Tensor[(15), float32]) */;
  %192 = sigmoid(%185) /* ty=Tensor[(15, 11, 6), float64] */;
  %193 = %190.3;
  %194 = %191.0;
  (%192, %193, %var_6033, %194)
}

def @func_5873(%var_5854: Tensor[(1, 9, 12), uint8]) -> Tensor[(10, 9, 12), uint8] {
  %195 = cast(%var_5854, dtype="uint8") /* ty=Tensor[(1, 9, 12), uint8] */;
  %196 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 9, 12), uint8] */, dtype="uint8") /* ty=Tensor[(10, 9, 12), uint8] */;
  minimum(%195, %196) /* ty=Tensor[(10, 9, 12), uint8] */
}

def @func_2793() -> (Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) {
  %197 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %198 = %197.0;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %200 = tan(%199) /* ty=Tensor[(15, 11, 6), float32] */;
  %201 = @func_2632() /* ty=Tensor[(15, 11, 6), int8] */;
  %202 = cast(%201, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %203 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%198, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %206 = greater(%204, %205) /* ty=Tensor[(15, 11, 6), bool] */;
  %207 = cast(%198, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%206, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = less(%209, %210) /* ty=Tensor[(15, 11, 6), bool] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %213 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%200, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %216 = cast(meta[relay.Constant][8] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
  %217 = cast(meta[relay.Constant][8] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
  %218 = reshape(%216, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %219 = reshape(%217, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %220 = floor_mod(%214, %215) /* ty=Tensor[(15, 11, 6), float64] */;
  %221 = @func_128(%218, %219) /* ty=Tensor[(2, 15, 3), int32] */;
  (%220, %221, meta[relay.Constant][8] /* ty=Tensor[(90), int32] */)
}

def @func_5512() -> (Tensor[(2, 15, 3), int32],) {
  %222 = @func_2824() /* ty=(Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) */;
  %223 = %222.0;
  (%223,)
}

def @func_4417() -> Tensor[(15, 11, 6), int8] {
  %224 = @func_3330() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %224.0
}

def @func_4038(%var_4029: Tensor[(10, 10, 6), float32], %var_4030: Tensor[(10, 10, 6), float32]) -> (Tensor[(10, 10, 6), bool], Tensor[(15, 11, 6), int8]) {
  %225 = cast(%var_4030, dtype="bool") /* ty=Tensor[(10, 10, 6), bool] */;
  %226 = shape_of(%var_4029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%var_4029, dtype="bool") /* ty=Tensor[(10, 10, 6), bool] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %229 = @func_3330() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %230 = greater(%227, %228) /* ty=Tensor[(10, 10, 6), bool] */;
  %231 = %229.0;
  (%230, %231)
}

def @func_4832() -> (Tensor[(15, 11, 6), float32], Tensor[(90), int32]) {
  %232 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %233 = @func_3763() /* ty=(Tensor[(90), int32],) */;
  %234 = %232.0;
  %235 = %233.0;
  (%234, %235)
}

def @func_3508() -> (Tensor[(15, 11, 6), float64],) {
  %236 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %237 = %236.0;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %239 = acosh(%238) /* ty=Tensor[(15, 11, 6), float32] */;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %241 = asinh(%240) /* ty=Tensor[(15, 11, 6), float64] */;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %243 = log10(%242) /* ty=Tensor[(15, 11, 6), float64] */;
  %244 = cast(%243, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %245 = rsqrt(%244) /* ty=Tensor[(15, 11, 6), float64] */;
  (%245,)
}

def @func_4883(%var_4879: Tensor[(448), float64]) -> (Tensor[(15, 11, 6), float32], Tensor[(7, 8, 8), float64], Tensor[(448), float64]) {
  %246 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %247 = cast(%var_4879, dtype="float64") /* ty=Tensor[(448), float64] */;
  %248 = reshape(%247, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
  %249 = @func_2409(%248) /* ty=(Tensor[(7, 8, 8), float64],) */;
  %250 = %246.0;
  %251 = %249.0;
  (%250, %251, %var_4879)
}

def @func_7708() -> (Tensor[(7, 5, 3), float32], Tensor[(15, 11, 6), int8], Tensor[(90), int32], Tensor[(90), int32]) {
  %252 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %253 = @func_4344() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %254 = @func_6399() /* ty=(Tensor[(90), int32], Tensor[(2, 15, 3), int32]) */;
  %255 = @func_4832() /* ty=(Tensor[(15, 11, 6), float32], Tensor[(90), int32]) */;
  %256 = erf(%252) /* ty=Tensor[(7, 5, 3), float32] */;
  %257 = %253.0;
  %258 = %254.0;
  %259 = %255.1;
  (%256, %257, %258, %259)
}

def @func_3122(%var_3100: Tensor[(12), float32]) -> (Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(12), float32], Tensor[(156), float32], Tensor[(20), float32], Tensor[(90, ?), bool]) {
  %260 = cast(%var_3100, dtype="float32") /* ty=Tensor[(12), float32] */;
  %261 = cast(meta[relay.Constant][10] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %262 = reshape(%260, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), float32] */;
  %263 = reshape(%261, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float32] */;
  %264 = @func_991(%262, %263) /* ty=(Tensor[(6, 2, 13), float32], Tensor[(2, 15, 3), int32], Tensor[(5, 234), uint8], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32]) */;
  %265 = cast(meta[relay.Constant][11] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %266 = %264.5;
  %267 = cast(%266, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
  %268 = reshape(%265, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %269 = reshape(%267, newshape=[90, 1]) /* ty=Tensor[(90, 1), int32] */;
  %270 = @func_1311(%268, %269) /* ty=(Tensor[(10, 2, 13), float64], Tensor[(2, 15, 3), int32], Tensor[(90, 1), int32]) */;
  %271 = %270.2;
  %272 = @func_3069() /* ty=(Tensor[(90), int32],) */;
  %273 = %272.0;
  %274 = cast(%273, dtype="bool") /* ty=Tensor[(90), bool] */;
  %275 = shape_of(%271, dtype="int32") /* ty=Tensor[(2), int32] */;
  %276 = cast(%271, dtype="bool") /* ty=Tensor[(90, 1), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %278 = @func_2632() /* ty=Tensor[(15, 11, 6), int8] */;
  %279 = greater_equal(%276, %277) /* ty=Tensor[(90, ?), bool] */;
  (%278, %266, %var_3100, meta[relay.Constant][10] /* ty=Tensor[(156), float32] */, meta[relay.Constant][11] /* ty=Tensor[(20), float32] */, %279)
}

def @func_3238(%var_3225: Tensor[(2, 528), bool]) -> (Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(2, 528), bool]) {
  %280 = @func_2873() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %281 = cast(%var_3225, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %282 = cast(%var_3225, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %283 = reshape(%281, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), bool] */;
  %284 = reshape(%282, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), bool] */;
  %285 = @func_1637(%283, %284) /* ty=(Tensor[(11, 6, 16), bool], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(2, 15, 3), int32], Tensor[(11, 6, 16), float32]) */;
  %286 = %280.0;
  %287 = %285.3;
  (%286, %287, %var_3225)
}

def @func_6846() -> (Tensor[(15, 11, 6), float32],) {
  %288 = @func_5447() /* ty=(Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32]) */;
  %289 = %288.1;
  (%289,)
}

def @func_6613() -> Tensor[(15, 11, 6), float64] {
  @func_4221() /* ty=Tensor[(15, 11, 6), float64] */
}

def @func_6488(%var_6474: Tensor[(12, 50), float32]) -> (Tensor[(15, 11, 6), float64], Tensor[(10, 10, 6), bool], Tensor[(12, 50), float32]) {
  %290 = @func_3508() /* ty=(Tensor[(15, 11, 6), float64],) */;
  %291 = cast(%var_6474, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  %292 = cast(%var_6474, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  %293 = reshape(%291, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), float32] */;
  %294 = reshape(%292, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), float32] */;
  %295 = @func_4038(%293, %294) /* ty=(Tensor[(10, 10, 6), bool], Tensor[(15, 11, 6), int8]) */;
  %296 = %290.0;
  %297 = %295.0;
  (%296, %297, %var_6474)
}

def @func_5123() -> (Tensor[(15, 11, 6), float32],) {
  %298 = @func_5016() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %299 = %298.0;
  (%299,)
}

def @func_7509() -> (Tensor[(15, 11, 6), float32],) {
  %300 = @func_5123() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %301 = %300.0;
  (%301,)
}

def @func_3540() -> Tensor[(90), int32] {
  %302 = @func_2793() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) */;
  %302.2
}

def @func_3997(%var_3994: int32) -> (Tensor[(15, 11, 6), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) {
  %303 = @func_3508() /* ty=(Tensor[(15, 11, 6), float64],) */;
  %304 = cast(%var_3994, dtype="int32") /* ty=int32 */;
  %305 = cast(meta[relay.Constant][12] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
  %306 = reshape(%304, newshape=[]) /* ty=int32 */;
  %307 = reshape(%305, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int32] */;
  %308 = %303.0;
  %309 = @func_1360(%306, %307) /* ty=Tensor[(1, 10, 3), bool] */;
  (%308, %309, %var_3994, meta[relay.Constant][12] /* ty=Tensor[(30), int32] */)
}

def @func_1527(%var_1524: Tensor[(14, 3, 14), float64]) -> Tensor[(14, 3, 14), float64] {
  %310 = cast(%var_1524, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  log10(%310) /* ty=Tensor[(14, 3, 14), float64] */
}

def @func_6450() -> (Tensor[(90), int32], Tensor[(15, 11, 6), float32]) {
  %311 = @func_5918() /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), float32]) */;
  %312 = @func_6302() /* ty=(Tensor[(15, 11, 6), uint64], Tensor[(15, 11, 6), float32]) */;
  %313 = %311.0;
  %314 = %312.1;
  (%313, %314)
}

def @func_3912(%var_3905: Tensor[(10, 15, 12), float64]) -> (Tensor[(10, 15, 12), float64],) {
  %315 = cast(-3.93252f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %316 = cast(%var_3905, dtype="float64") /* ty=Tensor[(10, 15, 12), float64] */;
  %317 = mod(%315, %316) /* ty=Tensor[(10, 15, 12), float64] */;
  (%317,)
}

def @func_7165() -> (Tensor[(15, 11, 6), float32], Tensor[(108), uint8], Tensor[(90), int32], Tensor[(10, 9, 12), float64]) {
  %318 = @func_4614() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %319 = @func_3763() /* ty=(Tensor[(90), int32],) */;
  %320 = cast(meta[relay.Constant][13] /* ty=Tensor[(108), uint8] */, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %321 = reshape(%320, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), uint8] */;
  %322 = @func_5873(%321) /* ty=Tensor[(10, 9, 12), uint8] */;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(10, 9, 12), float64] */;
  %324 = asinh(%323) /* ty=Tensor[(10, 9, 12), float64] */;
  %325 = cast(%324, dtype="float64") /* ty=Tensor[(10, 9, 12), float64] */;
  %326 = %318.0;
  %327 = %319.0;
  %328 = cosh(%325) /* ty=Tensor[(10, 9, 12), float64] */;
  (%326, meta[relay.Constant][13] /* ty=Tensor[(108), uint8] */, %327, %328)
}

def @func_4100(%var_4095: Tensor[(15, 11, 6), int8]) -> (Tensor[(15, 11, 6), float64],) {
  %329 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %330 = %329.0;
  %331 = cast(%var_4095, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %335 = floor_divide(%333, %334) /* ty=Tensor[(15, 11, 6), float64] */;
  (%335,)
}

def @func_6698() -> (Tensor[(15, 11, 6), int8],) {
  %336 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %337 = %336.0;
  (%337,)
}

def @func_2165(%var_2161: Tensor[(3, 5, 1), float32]) -> Tensor[(3, 5, 1), bool] {
  %338 = cast(3.24423f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %339 = cast(%var_2161, dtype="bool") /* ty=Tensor[(3, 5, 1), bool] */;
  greater_equal(%338, %339) /* ty=Tensor[(3, 5, 1), bool] */
}

def @func_4712(%var_4674: Tensor[(18, 36), float64]) -> (Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), int8], Tensor[(18, 36), uint16], Tensor[(1, 10, 3), bool], int32, Tensor[(990), float64]) {
  %340 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %341 = cast(meta[relay.Constant][14] /* ty=Tensor[(18, 36), float64] */, dtype="uint16") /* ty=Tensor[(18, 36), uint16] */;
  %342 = shape_of(%var_4674, dtype="int32") /* ty=Tensor[(2), int32] */;
  %343 = cast(%var_4674, dtype="uint16") /* ty=Tensor[(18, 36), uint16] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %345 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %346 = reshape(%345, newshape=[]) /* ty=int32 */;
  %347 = @func_3997(%346) /* ty=(Tensor[(15, 11, 6), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) */;
  %348 = cast(%var_4674, dtype="float64") /* ty=Tensor[(18, 36), float64] */;
  %349 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
  %350 = cast(%349, dtype="int8") /* ty=Tensor[(15, 11, 6), int8] */;
  %351 = reshape(%348, newshape=[6, 9, 12]) /* ty=Tensor[(6, 9, 12), float64] */;
  %352 = reshape(%350, newshape=[990]) /* ty=Tensor[(990), int8] */;
  %353 = @func_3358(%351, %352) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(15, 11, 6), bool], Tensor[(990), int8]) */;
  %354 = %353.2;
  %355 = cast(%354, dtype="float64") /* ty=Tensor[(990), float64] */;
  %356 = %340.0;
  %357 = right_shift(%343, %344) /* ty=Tensor[(18, 36), uint16] */;
  %358 = %347.1;
  %359 = atanh(%355) /* ty=Tensor[(990), float64] */;
  (%349, %356, %357, %358, 5 /* ty=int32 */, %359)
}

def @func_7860(%var_7827: Tensor[(1320), float32], %var_7831: Tensor[(156), float32], %var_7843: Tensor[(648), float64]) -> (Tensor[(15, 11, 6), int8], Tensor[(576), bool], Tensor[(120), float32], Tensor[(1320), float32], Tensor[(2, 15, 3), int32], Tensor[(1, 12), float32], Tensor[(156), float64], Tensor[(990), int8], Tensor[(648), float64]) {
  %360 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %361 = cast(%var_7827, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %362 = reshape(%360, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float32] */;
  %363 = reshape(%361, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
  %364 = @func_6888(%362, %363) /* ty=(Tensor[(16, 12, 3), float64], Tensor[(576), bool], Tensor[(15, 11, 6), float32], Tensor[(11, 8, 15), bool]) */;
  %365 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 12), float32] */, dtype="float32") /* ty=Tensor[(1, 12), float32] */;
  %366 = cast(%var_7831, dtype="float32") /* ty=Tensor[(156), float32] */;
  %367 = reshape(%365, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), float32] */;
  %368 = reshape(%366, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float32] */;
  %369 = @func_991(%367, %368) /* ty=(Tensor[(6, 2, 13), float32], Tensor[(2, 15, 3), int32], Tensor[(5, 234), uint8], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32]) */;
  %370 = cast(%var_7831, dtype="float64") /* ty=Tensor[(156), float64] */;
  %371 = cast(%var_7843, dtype="float64") /* ty=Tensor[(648), float64] */;
  %372 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
  %373 = cast(%372, dtype="int8") /* ty=Tensor[(15, 11, 6), int8] */;
  %374 = reshape(%371, newshape=[6, 9, 12]) /* ty=Tensor[(6, 9, 12), float64] */;
  %375 = reshape(%373, newshape=[990]) /* ty=Tensor[(990), int8] */;
  %376 = @func_3358(%374, %375) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(15, 11, 6), bool], Tensor[(990), int8]) */;
  %377 = %364.1;
  %378 = %369.5;
  %379 = cos(%370) /* ty=Tensor[(156), float64] */;
  %380 = %376.2;
  (%372, %377, meta[relay.Constant][15] /* ty=Tensor[(120), float32] */, %var_7827, %378, meta[relay.Constant][16] /* ty=Tensor[(1, 12), float32] */, %379, %380, %var_7843)
}

def @func_6399() -> (Tensor[(90), int32], Tensor[(2, 15, 3), int32]) {
  %381 = @func_5512() /* ty=(Tensor[(2, 15, 3), int32],) */;
  %382 = @func_3138() /* ty=Tensor[(90), int32] */;
  %383 = %381.0;
  (%382, %383)
}

def @func_3038(%var_3006: Tensor[(15, 11, 6), int8]) -> (Tensor[(15, 11, 6), bool], Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8]) {
  %384 = @func_2873() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %385 = %384.0;
  %386 = cast(%var_3006, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%385, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %390 = cast(%385, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %391 = @func_2873() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %392 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %393 = less_equal(%388, %389) /* ty=Tensor[(15, 11, 6), bool] */;
  %394 = asin(%390) /* ty=Tensor[(15, 11, 6), float64] */;
  %395 = %391.0;
  %396 = @func_2990() /* ty=Tensor[(15, 11, 6), float32] */;
  %397 = %392.0;
  (%393, %394, %395, %396, %397)
}

def @func_2632() -> Tensor[(15, 11, 6), int8] {
  @func_2401() /* ty=Tensor[(15, 11, 6), int8] */
}

def @func_3138() -> Tensor[(90), int32] {
  %398 = @func_3069() /* ty=(Tensor[(90), int32],) */;
  %398.0
}

def @func_4276() -> (Tensor[(15, 11, 6), int8], Tensor[(3, 5, 1), bool], Tensor[(15), float32]) {
  %399 = @func_2873() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %400 = cast(meta[relay.Constant][17] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %401 = reshape(%400, newshape=[3, 5, 1]) /* ty=Tensor[(3, 5, 1), float32] */;
  %402 = %399.0;
  %403 = @func_2165(%401) /* ty=Tensor[(3, 5, 1), bool] */;
  (%402, %403, meta[relay.Constant][17] /* ty=Tensor[(15), float32] */)
}

def @func_6369(%var_6359: Tensor[(32, 8), uint8]) -> (Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), bool], Tensor[(32, 8), uint8], Tensor[(15, 11, 6), int8], Tensor[(90), int32]) {
  %404 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %405 = cast(%var_6359, dtype="uint8") /* ty=Tensor[(32, 8), uint8] */;
  %406 = cast(%var_6359, dtype="uint8") /* ty=Tensor[(32, 8), uint8] */;
  %407 = reshape(%405, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), uint8] */;
  %408 = reshape(%406, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), uint8] */;
  %409 = @func_3304(%407, %408) /* ty=(Tensor[(2, 16, 8), uint8], Tensor[(15, 11, 6), int8], Tensor[(30), int32], Tensor[(90), int32], Tensor[(528), float32], Tensor[(15, 11, 6), bool], Tensor[(7, 9, 5), float64], Tensor[(315, 1), float64]) */;
  %410 = @func_4344() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %411 = @func_5888() /* ty=(Tensor[(90), int32],) */;
  %412 = %404.0;
  %413 = %409.5;
  %414 = %410.0;
  %415 = %411.0;
  (%412, %413, %var_6359, %414, %415)
}

def @func_7477() -> (Tensor[(15, 11, 6), float32],) {
  %416 = @func_2990() /* ty=Tensor[(15, 11, 6), float32] */;
  (%416,)
}

def @func_2824() -> (Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) {
  %417 = @func_2793() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) */;
  %418 = %417.1;
  %419 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
  (%418, %419)
}

def @func_6007() -> (Tensor[(90), float64], Tensor[(15, 11, 6), float32]) {
  %420 = @func_3069() /* ty=(Tensor[(90), int32],) */;
  %421 = %420.0;
  %422 = cast(%421, dtype="float64") /* ty=Tensor[(90), float64] */;
  %423 = @func_5123() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %424 = sigmoid(%422) /* ty=Tensor[(90), float64] */;
  %425 = %423.0;
  (%424, %425)
}

def @func_4446() -> Tensor[(90), int32] {
  %426 = @func_3636() /* ty=(Tensor[(90), int32],) */;
  %426.0
}

def @func_4156(%var_4114: Tensor[(3, 6, 10), float64]) -> (Tensor[(15, 11, 6), float32], Tensor[(3, 6, 10), float32], Tensor[(6, 6, 5), float32], Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) {
  %427 = cast(%var_4114, dtype="float64") /* ty=Tensor[(3, 6, 10), float64] */;
  %428 = atanh(%427) /* ty=Tensor[(3, 6, 10), float64] */;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %430 = sqrt(%429) /* ty=Tensor[(3, 6, 10), float32] */;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %432 = reshape(%431, newshape=[6, 6, 5]) /* ty=Tensor[(6, 6, 5), float32] */;
  %433 = @func_3978(%432) /* ty=(Tensor[(6, 6, 5), float32],) */;
  %434 = @func_2824() /* ty=(Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) */;
  %435 = @func_3825() /* ty=Tensor[(15, 11, 6), float32] */;
  %436 = %433.0;
  %437 = %434.0;
  %438 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
  (%435, %430, %436, %437, %438)
}

def @func_4614() -> (Tensor[(15, 11, 6), float32],) {
  %439 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %440 = %439.0;
  (%440,)
}

def @func_3622(%var_3604: Tensor[(1170), uint8], %var_3611: Tensor[(1170), uint8]) -> (Tensor[(90), int32], Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(1170), bool], Tensor[(2, 15, 3), int32], Tensor[(120), int32]) {
  %441 = @func_3069() /* ty=(Tensor[(90), int32],) */;
  %442 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %443 = cast(%var_3604, dtype="uint8") /* ty=Tensor[(1170), uint8] */;
  %444 = reshape(%443, newshape=[6, 13, 15]) /* ty=Tensor[(6, 13, 15), uint8] */;
  %445 = @func_498(%444) /* ty=(Tensor[(6, 13, 15), float64], Tensor[(2, 15, 3), int32]) */;
  %446 = cast(%var_3611, dtype="bool") /* ty=Tensor[(1170), bool] */;
  %447 = shape_of(%var_3604, dtype="int32") /* ty=Tensor[(1), int32] */;
  %448 = cast(%var_3604, dtype="bool") /* ty=Tensor[(1170), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?), bool] */;
  %450 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %451 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %452 = %441.0;
  %453 = cast(%452, dtype="int32") /* ty=Tensor[(90), int32] */;
  %454 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), int32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %455 = reshape(%450, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), int32] */;
  %456 = reshape(%451, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), int32] */;
  %457 = reshape(%453, newshape=[90]) /* ty=Tensor[(90), int32] */;
  %458 = reshape(%454, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), float32] */;
  %459 = @func_2571(%455, %456, %457, %458) /* ty=(Tensor[(10, 4, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(10, 4, 3), float32], Tensor[(10, 4, 3), uint8], Tensor[(2, 15, 3), int32], int32, Tensor[(12), float32]) */;
  %460 = %442.0;
  %461 = %445.1;
  %462 = less(%448, %449) /* ty=Tensor[(1170), bool] */;
  %463 = %459.5;
  (%452, %460, %461, %462, %463, meta[relay.Constant][18] /* ty=Tensor[(120), int32] */)
}

def @func_3978(%var_3967: Tensor[(6, 6, 5), float32]) -> (Tensor[(6, 6, 5), float32],) {
  %464 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 6, 5), float32] */;
  %465 = shape_of(%var_3967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%var_3967, dtype="float32") /* ty=Tensor[(6, 6, 5), float32] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %468 = power(%466, %467) /* ty=Tensor[(6, 6, 5), float32] */;
  (%468,)
}

def @func_4979() -> (Tensor[(8, 1, 7), float64], Tensor[(15, 11, 6), float32]) {
  %469 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 1, 7), float64] */, dtype="float64") /* ty=Tensor[(8, 1, 7), float64] */;
  %470 = @func_4614() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %471 = cos(%469) /* ty=Tensor[(8, 1, 7), float64] */;
  %472 = %470.0;
  (%471, %472)
}

def @func_2401() -> Tensor[(15, 11, 6), int8] {
  %473 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 11, 6), int8] */, dtype="int8") /* ty=Tensor[(15, 11, 6), int8] */;
  %474 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(15, 11, 6), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 11, 6), int8] */, dtype="int8") /* ty=Tensor[(15, 11, 6), int8] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%475, %476) /* ty=Tensor[(15, 11, 6), int8] */
}

def @func_6253(%var_6198: int32, %var_6208: Tensor[(176), uint16], %var_6209: Tensor[(1170), uint8], %var_6210: Tensor[(600), float32], %var_6211: Tensor[(180), float64], %var_6240: Tensor[(140), float64]) -> (Tensor[(90), int32], int32, int32, Tensor[(90), int32], Tensor[(90), int32], Tensor[(44), uint16], Tensor[(176), uint16], Tensor[(1170), uint8], Tensor[(600), float32], Tensor[(180), float64], Tensor[(90), int32], Tensor[(15, 11, 6), uint32], Tensor[(30), int32], Tensor[(140), float64], Tensor[(30), int32], Tensor[(15, 11, 6), int8]) {
  %477 = cast(%var_6198, dtype="int32") /* ty=int32 */;
  %478 = reshape(%477, newshape=[]) /* ty=int32 */;
  %479 = @func_3997(%478) /* ty=(Tensor[(15, 11, 6), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) */;
  %480 = cast(meta[relay.Constant][23] /* ty=Tensor[(44), uint16] */, dtype="uint16") /* ty=Tensor[(44), uint16] */;
  %481 = cast(%var_6208, dtype="uint16") /* ty=Tensor[(176), uint16] */;
  %482 = cast(%var_6209, dtype="uint8") /* ty=Tensor[(1170), uint8] */;
  %483 = cast(%var_6210, dtype="float32") /* ty=Tensor[(600), float32] */;
  %484 = cast(%var_6211, dtype="float64") /* ty=Tensor[(180), float64] */;
  %485 = reshape(%480, newshape=[1, 4, 11]) /* ty=Tensor[(1, 4, 11), uint16] */;
  %486 = reshape(%481, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), uint16] */;
  %487 = reshape(%482, newshape=[390, 3]) /* ty=Tensor[(390, 3), uint8] */;
  %488 = reshape(%483, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %489 = reshape(%484, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %490 = @func_5680(%485, %486, %487, %488, %489) /* ty=(Tensor[(4, 4, 11), uint16], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8], Tensor[(390, 3), uint8], Tensor[(15, 11, 6), int8], Tensor[(600), float32], Tensor[(90), int32], Tensor[(4, 4, 11), bool], Tensor[(15, 11, 6), float32], Tensor[(180), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), bool], Tensor[(4, 4, 11), float64], Tensor[(4, 4, 11), float32]) */;
  %491 = @func_3964() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(90), int32]) */;
  %492 = %491.0;
  %493 = cast(%492, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %494 = exp(%493) /* ty=Tensor[(15, 11, 6), float32] */;
  %495 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 11, 6), float32] */, dtype="uint32") /* ty=Tensor[(15, 11, 6), uint32] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="uint32") /* ty=Tensor[(15, 11, 6), uint32] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %499 = cast(%var_6240, dtype="float64") /* ty=Tensor[(140), float64] */;
  %500 = reshape(%499, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), float64] */;
  %501 = @func_5302(%500) /* ty=(Tensor[(10, 2, 7), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) */;
  %502 = cast(%var_6240, dtype="float64") /* ty=Tensor[(140), float64] */;
  %503 = reshape(%502, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), float64] */;
  %504 = @func_5302(%503) /* ty=(Tensor[(10, 2, 7), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) */;
  %505 = @func_3540() /* ty=Tensor[(90), int32] */;
  %506 = %479.2;
  %507 = @func_3138() /* ty=Tensor[(90), int32] */;
  %508 = %490.6;
  %509 = @func_4446() /* ty=Tensor[(90), int32] */;
  %510 = left_shift(%497, %498) /* ty=Tensor[(15, 11, 6), uint32] */;
  %511 = %501.3;
  %512 = %504.3;
  %513 = @func_6105() /* ty=Tensor[(15, 11, 6), int8] */;
  (%505, %506, %var_6198, %507, %508, meta[relay.Constant][23] /* ty=Tensor[(44), uint16] */, %var_6208, %var_6209, %var_6210, %var_6211, %509, %510, %511, %var_6240, %512, %513)
}

def @func_3763() -> (Tensor[(90), int32],) {
  %514 = @func_3540() /* ty=Tensor[(90), int32] */;
  (%514,)
}

def @func_3636() -> (Tensor[(90), int32],) {
  %515 = @func_3069() /* ty=(Tensor[(90), int32],) */;
  %516 = %515.0;
  (%516,)
}

def @func_6427() -> Tensor[(15, 11, 6), float32] {
  %517 = @func_5016() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %517.0
}

def @func_2460() -> (Tensor[(15, 11, 6), int8],) {
  %518 = @func_2401() /* ty=Tensor[(15, 11, 6), int8] */;
  (%518,)
}

def @func_4221() -> Tensor[(15, 11, 6), float64] {
  %519 = @func_2793() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) */;
  %520 = %519.0;
  %521 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 11, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%520, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%523, %524) /* ty=Tensor[(15, 11, 6), float64] */
}

def @func_1712(%var_1672: int32, %var_1697: Tensor[(12), float32]) -> (Tensor[(1, 12, 13), int32], Tensor[(2, 15, 3), int32], Tensor[(12), float32]) {
  %525 = cast(%var_1672, dtype="int32") /* ty=int32 */;
  %526 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 12, 13), int32] */, dtype="int32") /* ty=Tensor[(1, 12, 13), int32] */;
  %527 = cast(%var_1697, dtype="float32") /* ty=Tensor[(12), float32] */;
  %528 = minimum(%525, %526) /* ty=Tensor[(1, 12, 13), int32] */;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(1, 12, 13), float32] */;
  %530 = reshape(%527, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), float32] */;
  %531 = reshape(%529, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float32] */;
  %532 = @func_991(%530, %531) /* ty=(Tensor[(6, 2, 13), float32], Tensor[(2, 15, 3), int32], Tensor[(5, 234), uint8], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32]) */;
  %533 = %532.3;
  (%528, %533, %var_1697)
}

def @func_6949() -> (Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32]) {
  %534 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %535 = %534.0;
  %536 = @func_6587() /* ty=Tensor[(15, 11, 6), float32] */;
  (%535, %536)
}

def @func_2873() -> (Tensor[(15, 11, 6), int8],) {
  %537 = @func_2632() /* ty=Tensor[(15, 11, 6), int8] */;
  (%537,)
}

def @func_5247(%var_5243: Tensor[(11, 7, 13), float64]) -> Tensor[(11, 7, 13), float64] {
  %538 = cast(%var_5243, dtype="float64") /* ty=Tensor[(11, 7, 13), float64] */;
  sigmoid(%538) /* ty=Tensor[(11, 7, 13), float64] */
}

def @func_6337() -> Tensor[(15, 11, 6), int8] {
  %539 = @func_4376() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %539.0
}

def @func_4484() -> Tensor[(15, 11, 6), int32] {
  %540 = @func_3964() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(90), int32]) */;
  %541 = %540.0;
  %542 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 11, 6), float64] */, dtype="int32") /* ty=Tensor[(15, 11, 6), int32] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="int32") /* ty=Tensor[(15, 11, 6), int32] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%544, %545) /* ty=Tensor[(15, 11, 6), int32] */
}

def @func_1360(%var_1343: int32, %var_1344: Tensor[(1, 10, 3), int32]) -> Tensor[(1, 10, 3), bool] {
  %546 = cast(%var_1343, dtype="bool") /* ty=bool */;
  %547 = cast(%var_1344, dtype="bool") /* ty=Tensor[(1, 10, 3), bool] */;
  less(%546, %547) /* ty=Tensor[(1, 10, 3), bool] */
}

def @func_5485(%var_5472: Tensor[(16, 8, 3), float32], %var_5473: Tensor[(16, 8, 3), float32]) -> (Tensor[(16, 8, 3), bool], Tensor[(15, 11, 6), float64]) {
  %548 = cast(%var_5473, dtype="bool") /* ty=Tensor[(16, 8, 3), bool] */;
  %549 = shape_of(%var_5472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%var_5472, dtype="bool") /* ty=Tensor[(16, 8, 3), bool] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %552 = @func_3508() /* ty=(Tensor[(15, 11, 6), float64],) */;
  %553 = not_equal(%550, %551) /* ty=Tensor[(16, 8, 3), bool] */;
  %554 = %552.0;
  (%553, %554)
}

def @func_4767(%var_4751: Tensor[(11, 1, 4), float32]) -> (Tensor[(11, 1, 4), float32], Tensor[(11, 1, 4), float64]) {
  %555 = cast(%var_4751, dtype="float32") /* ty=Tensor[(11, 1, 4), float32] */;
  %556 = cast(%var_4751, dtype="float64") /* ty=Tensor[(11, 1, 4), float64] */;
  %557 = log2(%555) /* ty=Tensor[(11, 1, 4), float32] */;
  %558 = sqrt(%556) /* ty=Tensor[(11, 1, 4), float64] */;
  (%557, %558)
}

def @func_3738(%var_3665: Tensor[(15, 11, 6), int8], %var_3681: Tensor[(15, 11, 6), float64], %var_3704: Tensor[(315), float64], %var_3708: Tensor[(90), int32]) -> (Tensor[(15, 11, 6), int32], Tensor[(15, 11, 6), bool], Tensor[(256), uint8], Tensor[(15, 11, 6), int16], Tensor[(15, 11, 6), int8], Tensor[(315), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) {
  %559 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
  %560 = cast(%var_3665, dtype="int32") /* ty=Tensor[(15, 11, 6), int32] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="int32") /* ty=Tensor[(15, 11, 6), int32] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %564 = cast(meta[relay.Constant][28] /* ty=Tensor[(256), uint8] */, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %565 = cast(meta[relay.Constant][28] /* ty=Tensor[(256), uint8] */, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %566 = reshape(%564, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), uint8] */;
  %567 = reshape(%565, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), uint8] */;
  %568 = @func_3304(%566, %567) /* ty=(Tensor[(2, 16, 8), uint8], Tensor[(15, 11, 6), int8], Tensor[(30), int32], Tensor[(90), int32], Tensor[(528), float32], Tensor[(15, 11, 6), bool], Tensor[(7, 9, 5), float64], Tensor[(315, 1), float64]) */;
  %569 = @func_3508() /* ty=(Tensor[(15, 11, 6), float64],) */;
  %570 = %569.0;
  %571 = cast(%var_3681, dtype="int16") /* ty=Tensor[(15, 11, 6), int16] */;
  %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%570, dtype="int16") /* ty=Tensor[(15, 11, 6), int16] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %575 = cast(%var_3704, dtype="float64") /* ty=Tensor[(315), float64] */;
  %576 = reshape(%575, newshape=[7, 9, 5]) /* ty=Tensor[(7, 9, 5), float64] */;
  %577 = @func_2962(%576) /* ty=(Tensor[(7, 9, 5), float64], Tensor[(15, 11, 6), int8]) */;
  %578 = cast(%var_3708, dtype="int32") /* ty=Tensor[(90), int32] */;
  %579 = cast(%var_3708, dtype="int32") /* ty=Tensor[(90), int32] */;
  %580 = reshape(%578, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %581 = reshape(%579, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %582 = bitwise_or(%562, %563) /* ty=Tensor[(15, 11, 6), int32] */;
  %583 = %568.5;
  %584 = bitwise_xor(%573, %574) /* ty=Tensor[(15, 11, 6), int16] */;
  %585 = %577.1;
  %586 = @func_128(%580, %581) /* ty=Tensor[(2, 15, 3), int32] */;
  (%582, %583, meta[relay.Constant][28] /* ty=Tensor[(256), uint8] */, %584, %585, %var_3704, %586, %var_3708)
}

def @func_6302() -> (Tensor[(15, 11, 6), uint64], Tensor[(15, 11, 6), float32]) {
  %587 = @func_6105() /* ty=Tensor[(15, 11, 6), int8] */;
  %588 = @func_4221() /* ty=Tensor[(15, 11, 6), float64] */;
  %589 = cast(%588, dtype="uint64") /* ty=Tensor[(15, 11, 6), uint64] */;
  %590 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%587, dtype="uint64") /* ty=Tensor[(15, 11, 6), uint64] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %593 = cast(%587, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %594 = multiply(%591, %592) /* ty=Tensor[(15, 11, 6), uint64] */;
  %595 = log(%593) /* ty=Tensor[(15, 11, 6), float32] */;
  (%594, %595)
}

def @func_2287(%var_2236: Tensor[(11, 12, 4), uint32], %var_2237: Tensor[(11, 12, 4), uint32]) -> (Tensor[(11, 12, 4), bool], Tensor[(1, 10, 3), bool], Tensor[(30), int32], Tensor[(11, 12, 4), float32]) {
  %596 = cast(%var_2237, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %597 = shape_of(%var_2236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%var_2236, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %600 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %601 = cast(meta[relay.Constant][29] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
  %602 = reshape(%600, newshape=[]) /* ty=int32 */;
  %603 = reshape(%601, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int32] */;
  %604 = cast(%var_2237, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
  %605 = cast(-4 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %606 = equal(%604, %605) /* ty=Tensor[(11, 12, 4), bool] */;
  %607 = cast(%606, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
  %608 = less_equal(%598, %599) /* ty=Tensor[(11, 12, 4), bool] */;
  %609 = @func_1360(%602, %603) /* ty=Tensor[(1, 10, 3), bool] */;
  %610 = asinh(%607) /* ty=Tensor[(11, 12, 4), float32] */;
  (%608, %609, meta[relay.Constant][29] /* ty=Tensor[(30), int32] */, %610)
}

def @func_4737() -> (Tensor[(15, 11, 6), float64],) {
  %611 = @func_4221() /* ty=Tensor[(15, 11, 6), float64] */;
  (%611,)
}

def @func_2990() -> Tensor[(15, 11, 6), float32] {
  %612 = @func_2401() /* ty=Tensor[(15, 11, 6), int8] */;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  cosh(%613) /* ty=Tensor[(15, 11, 6), float32] */
}

def @func_2645() -> Tensor[(15, 11, 6), int8] {
  %614 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %614.0
}

def @func_498(%var_485: Tensor[(6, 13, 15), uint8]) -> (Tensor[(6, 13, 15), float64], Tensor[(2, 15, 3), int32]) {
  %615 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 1, 15), uint8] */, dtype="bool") /* ty=Tensor[(6, 1, 15), bool] */;
  %616 = cast(%var_485, dtype="bool") /* ty=Tensor[(6, 13, 15), bool] */;
  %617 = less_equal(%615, %616) /* ty=Tensor[(6, 13, 15), bool] */;
  %618 = cast(%617, dtype="float64") /* ty=Tensor[(6, 13, 15), float64] */;
  %619 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 1, 15), uint8] */, dtype="int32") /* ty=Tensor[(6, 1, 15), int32] */;
  %620 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 1, 15), uint8] */, dtype="int32") /* ty=Tensor[(6, 1, 15), int32] */;
  %621 = reshape(%619, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %622 = reshape(%620, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %623 = acosh(%618) /* ty=Tensor[(6, 13, 15), float64] */;
  %624 = @func_128(%621, %622) /* ty=Tensor[(2, 15, 3), int32] */;
  (%623, %624)
}

def @func_5041(%var_5036: Tensor[(15, 11, 6), int8]) -> Tensor[(15, 11, 6), bool] {
  %625 = @func_2401() /* ty=Tensor[(15, 11, 6), int8] */;
  %626 = cast(%var_5036, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%625, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%628, %629) /* ty=Tensor[(15, 11, 6), bool] */
}

def @func_5367(%var_5347: Tensor[(16, 12, 3), bool]) -> (Tensor[(15, 11, 6), float32], Tensor[(16, 12, 3), float64], Tensor[(16, 12, 3), int32]) {
  %630 = @func_5016() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %631 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 12, 3), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %632 = acosh(%631) /* ty=Tensor[(16, 12, 3), float32] */;
  %633 = cast(%632, dtype="float64") /* ty=Tensor[(16, 12, 3), float64] */;
  %634 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 12, 3), float32] */, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
  %635 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%632, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = logical_or(%636, %637) /* ty=Tensor[(16, 12, 3), bool] */;
  %639 = cast(%var_5347, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%638, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %643 = floor_mod(%641, %642) /* ty=Tensor[(16, 12, 3), float32] */;
  %644 = cast(%643, dtype="int32") /* ty=Tensor[(16, 12, 3), int32] */;
  %645 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(16, 12, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 12, 3), float32] */, dtype="int32") /* ty=Tensor[(16, 12, 3), int32] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %648 = %630.0;
  %649 = log2(%633) /* ty=Tensor[(16, 12, 3), float64] */;
  %650 = multiply(%646, %647) /* ty=Tensor[(16, 12, 3), int32] */;
  (%648, %649, %650)
}

def @func_7654(%var_7631: Tensor[(3, 40), float32], %var_7632: Tensor[(1320), float32]) -> (Tensor[(90), int32], Tensor[(15, 11, 6), float32], Tensor[(448), float64], Tensor[(16, 12, 3), float64], Tensor[(3, 40), float32], Tensor[(1320), float32], Tensor[(11, 1, 4), float32], Tensor[(44), float32]) {
  %651 = @func_3964() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(90), int32]) */;
  %652 = cast(meta[relay.Constant][33] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %653 = reshape(%652, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %654 = @func_4883(%653) /* ty=(Tensor[(15, 11, 6), float32], Tensor[(7, 8, 8), float64], Tensor[(448), float64]) */;
  %655 = cast(%var_7631, dtype="float32") /* ty=Tensor[(3, 40), float32] */;
  %656 = cast(%var_7632, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %657 = reshape(%655, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float32] */;
  %658 = reshape(%656, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
  %659 = @func_6888(%657, %658) /* ty=(Tensor[(16, 12, 3), float64], Tensor[(576), bool], Tensor[(15, 11, 6), float32], Tensor[(11, 8, 15), bool]) */;
  %660 = cast(meta[relay.Constant][34] /* ty=Tensor[(44), float32] */, dtype="float32") /* ty=Tensor[(44), float32] */;
  %661 = reshape(%660, newshape=[11, 1, 4]) /* ty=Tensor[(11, 1, 4), float32] */;
  %662 = @func_4767(%661) /* ty=(Tensor[(11, 1, 4), float32], Tensor[(11, 1, 4), float64]) */;
  %663 = %651.1;
  %664 = %654.0;
  %665 = %659.0;
  %666 = %662.0;
  (%663, %664, meta[relay.Constant][33] /* ty=Tensor[(448), float64] */, %665, %var_7631, %var_7632, %666, meta[relay.Constant][34] /* ty=Tensor[(44), float32] */)
}

def @func_128(%var_112: Tensor[(2, 15, 3), int32], %var_113: Tensor[(2, 15, 3), int32]) -> Tensor[(2, 15, 3), int32] {
  %667 = cast(%var_113, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
  %668 = shape_of(%var_112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%var_112, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%669, %670) /* ty=Tensor[(2, 15, 3), int32] */
}

def @func_6571() -> (Tensor[(90), int32], Tensor[(15, 11, 6), int8]) {
  %671 = @func_5267() /* ty=(Tensor[(90), int32], Tensor[(90), int32]) */;
  %672 = @func_4376() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %673 = %671.1;
  %674 = %672.0;
  (%673, %674)
}

def @func_3964() -> (Tensor[(15, 11, 6), float64], Tensor[(90), int32]) {
  %675 = @func_2990() /* ty=Tensor[(15, 11, 6), float32] */;
  %676 = cast(%675, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %677 = @func_3636() /* ty=(Tensor[(90), int32],) */;
  %678 = sin(%676) /* ty=Tensor[(15, 11, 6), float64] */;
  %679 = %677.0;
  (%678, %679)
}

def @func_4344() -> (Tensor[(15, 11, 6), int8],) {
  %680 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %681 = %680.0;
  (%681,)
}

def @func_5808() -> Tensor[(90), int32] {
  %682 = @func_5267() /* ty=(Tensor[(90), int32], Tensor[(90), int32]) */;
  %682.1
}

def @func_5918() -> (Tensor[(90), int32], Tensor[(15, 11, 6), float32]) {
  %683 = @func_4614() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %684 = @func_5808() /* ty=Tensor[(90), int32] */;
  %685 = %683.0;
  (%684, %685)
}

def @func_7350(%var_7307: Tensor[(30), int32], %var_7340: Tensor[(384), float32]) -> (Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32], Tensor[(15, 11, 6), float32], Tensor[(90), int32], Tensor[(16, 8, 3), bool], Tensor[(384), float32], Tensor[(15, 11, 6), int8]) {
  %686 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %687 = cast(%var_7307, dtype="int32") /* ty=Tensor[(30), int32] */;
  %688 = reshape(%686, newshape=[]) /* ty=int32 */;
  %689 = reshape(%687, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int32] */;
  %690 = @func_4484() /* ty=Tensor[(15, 11, 6), int32] */;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %692 = @func_5267() /* ty=(Tensor[(90), int32], Tensor[(90), int32]) */;
  %693 = cast(%var_7340, dtype="float32") /* ty=Tensor[(384), float32] */;
  %694 = cast(%var_7340, dtype="float32") /* ty=Tensor[(384), float32] */;
  %695 = reshape(%693, newshape=[16, 8, 3]) /* ty=Tensor[(16, 8, 3), float32] */;
  %696 = reshape(%694, newshape=[16, 8, 3]) /* ty=Tensor[(16, 8, 3), float32] */;
  %697 = @func_5485(%695, %696) /* ty=(Tensor[(16, 8, 3), bool], Tensor[(15, 11, 6), float64]) */;
  %698 = @func_1360(%688, %689) /* ty=Tensor[(1, 10, 3), bool] */;
  %699 = erf(%691) /* ty=Tensor[(15, 11, 6), float32] */;
  %700 = %692.1;
  %701 = %697.0;
  %702 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
  (%698, -2 /* ty=int32 */, %var_7307, %699, %700, %701, %var_7340, %702)
}

def @func_7967(%var_7945: Tensor[(15, 11, 6), int8], %var_7962: uint64, %var_7963: Tensor[(36, 10), uint64]) -> (Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int32], Tensor[(90), int32], Tensor[(12, 2, 15), bool], uint64, Tensor[(36, 10), uint64]) {
  %703 = @func_4276() /* ty=(Tensor[(15, 11, 6), int8], Tensor[(3, 5, 1), bool], Tensor[(15), float32]) */;
  %704 = %703.0;
  %705 = cast(%var_7945, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%704, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %709 = cast(%var_7962, dtype="uint64") /* ty=uint64 */;
  %710 = cast(%var_7963, dtype="uint64") /* ty=Tensor[(36, 10), uint64] */;
  %711 = reshape(%709, newshape=[]) /* ty=uint64 */;
  %712 = reshape(%710, newshape=[12, 2, 15]) /* ty=Tensor[(12, 2, 15), uint64] */;
  %713 = @func_5062(%711, %712) /* ty=(Tensor[(12, 2, 15), bool],) */;
  %714 = minimum(%707, %708) /* ty=Tensor[(15, 11, 6), float32] */;
  %715 = @func_4484() /* ty=Tensor[(15, 11, 6), int32] */;
  %716 = @func_5808() /* ty=Tensor[(90), int32] */;
  %717 = %713.0;
  (%714, %715, %716, %717, %var_7962, %var_7963)
}

def @func_7678() -> (Tensor[(90), int32],) {
  %718 = @func_4446() /* ty=Tensor[(90), int32] */;
  (%718,)
}

def @func_5062(%var_5055: uint64, %var_5056: Tensor[(12, 2, 15), uint64]) -> (Tensor[(12, 2, 15), bool],) {
  %719 = cast(%var_5055, dtype="bool") /* ty=bool */;
  %720 = cast(%var_5056, dtype="bool") /* ty=Tensor[(12, 2, 15), bool] */;
  %721 = equal(%719, %720) /* ty=Tensor[(12, 2, 15), bool] */;
  (%721,)
}

def @func_6742() -> (Tensor[(90), int32], Tensor[(15, 11, 6), int8]) {
  %722 = @func_3763() /* ty=(Tensor[(90), int32],) */;
  %723 = %722.0;
  %724 = @func_6337() /* ty=Tensor[(15, 11, 6), int8] */;
  (%723, %724)
}

def @func_2571(%var_2502: Tensor[(10, 4, 3), int32], %var_2503: Tensor[(10, 4, 3), int32], %var_2526: Tensor[(90), int32], %var_2529: Tensor[(10, 4, 3), float32]) -> (Tensor[(10, 4, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(10, 4, 3), float32], Tensor[(10, 4, 3), uint8], Tensor[(2, 15, 3), int32], int32, Tensor[(12), float32]) {
  %725 = cast(%var_2503, dtype="int32") /* ty=Tensor[(10, 4, 3), int32] */;
  %726 = shape_of(%var_2502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%var_2502, dtype="int32") /* ty=Tensor[(10, 4, 3), int32] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %729 = cast(%var_2526, dtype="int32") /* ty=Tensor[(90), int32] */;
  %730 = cast(%var_2526, dtype="int32") /* ty=Tensor[(90), int32] */;
  %731 = reshape(%729, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %732 = reshape(%730, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %733 = cast(%var_2502, dtype="float32") /* ty=Tensor[(10, 4, 3), float32] */;
  %734 = cosh(%733) /* ty=Tensor[(10, 4, 3), float32] */;
  %735 = cast(%var_2529, dtype="float32") /* ty=Tensor[(10, 4, 3), float32] */;
  %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%734, dtype="float32") /* ty=Tensor[(10, 4, 3), float32] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %739 = cast(%var_2503, dtype="bool") /* ty=Tensor[(10, 4, 3), bool] */;
  %740 = shape_of(%var_2502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%var_2502, dtype="bool") /* ty=Tensor[(10, 4, 3), bool] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %743 = less_equal(%741, %742) /* ty=Tensor[(10, 4, 3), bool] */;
  %744 = cast(%743, dtype="uint8") /* ty=Tensor[(10, 4, 3), uint8] */;
  %745 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%734, dtype="uint8") /* ty=Tensor[(10, 4, 3), uint8] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %748 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %749 = cast(meta[relay.Constant][35] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
  %750 = reshape(%748, newshape=[]) /* ty=int32 */;
  %751 = reshape(%749, newshape=[12]) /* ty=Tensor[(12), float32] */;
  %752 = @func_1712(%750, %751) /* ty=(Tensor[(1, 12, 13), int32], Tensor[(2, 15, 3), int32], Tensor[(12), float32]) */;
  %753 = bitwise_and(%727, %728) /* ty=Tensor[(10, 4, 3), int32] */;
  %754 = @func_128(%731, %732) /* ty=Tensor[(2, 15, 3), int32] */;
  %755 = subtract(%737, %738) /* ty=Tensor[(10, 4, 3), float32] */;
  %756 = minimum(%746, %747) /* ty=Tensor[(10, 4, 3), uint8] */;
  %757 = %752.1;
  (%753, %754, %var_2526, %755, %756, %757, 8 /* ty=int32 */, meta[relay.Constant][35] /* ty=Tensor[(12), float32] */)
}

def @func_4503() -> (Tensor[(15, 11, 6), float32],) {
  %758 = @func_2990() /* ty=Tensor[(15, 11, 6), float32] */;
  (%758,)
}

def @func_3358(%var_3344: Tensor[(6, 9, 12), float64], %var_3356: Tensor[(990), int8]) -> (Tensor[(6, 9, 12), float64], Tensor[(15, 11, 6), bool], Tensor[(990), int8]) {
  %759 = cast(%var_3344, dtype="float64") /* ty=Tensor[(6, 9, 12), float64] */;
  %760 = cast(%var_3356, dtype="int8") /* ty=Tensor[(990), int8] */;
  %761 = reshape(%760, newshape=[15, 11, 6]) /* ty=Tensor[(15, 11, 6), int8] */;
  %762 = @func_3038(%761) /* ty=(Tensor[(15, 11, 6), bool], Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8]) */;
  %763 = tan(%759) /* ty=Tensor[(6, 9, 12), float64] */;
  %764 = %762.0;
  (%763, %764, %var_3356)
}

def @main(%var_7992: Tensor[(11, 5, 12), float64], %var_8000: Tensor[(11, 5, 12), float64]) -> (Tensor[(11, 5, 12), bool],) {
  %765 = cast(%var_7992, dtype="float64") /* ty=Tensor[(11, 5, 12), float64] */;
  %766 = erf(%765) /* ty=Tensor[(11, 5, 12), float64] */;
  %767 = cast(%var_8000, dtype="bool") /* ty=Tensor[(11, 5, 12), bool] */;
  %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%766, dtype="bool") /* ty=Tensor[(11, 5, 12), bool] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %771 = equal(%769, %770) /* ty=Tensor[(11, 5, 12), bool] */;
  (%771,)
}

def @func_5016() -> (Tensor[(15, 11, 6), float32],) {
  %772 = @func_3825() /* ty=Tensor[(15, 11, 6), float32] */;
  (%772,)
}

def @func_5267() -> (Tensor[(90), int32], Tensor[(90), int32]) {
  %773 = @func_3763() /* ty=(Tensor[(90), int32],) */;
  %774 = @func_3636() /* ty=(Tensor[(90), int32],) */;
  %775 = %773.0;
  %776 = %774.0;
  (%775, %776)
}

def @func_7026(%var_6992: Tensor[(528), uint32], %var_7005: Tensor[(4, 264), bool]) -> (Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(30), int32], Tensor[(528), uint32], Tensor[(90), int32], Tensor[(4, 264), float32]) {
  %777 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %778 = cast(%var_6992, dtype="uint32") /* ty=Tensor[(528), uint32] */;
  %779 = cast(%var_6992, dtype="uint32") /* ty=Tensor[(528), uint32] */;
  %780 = reshape(%778, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), uint32] */;
  %781 = reshape(%779, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), uint32] */;
  %782 = @func_2287(%780, %781) /* ty=(Tensor[(11, 12, 4), bool], Tensor[(1, 10, 3), bool], Tensor[(30), int32], Tensor[(11, 12, 4), float32]) */;
  %783 = cast(%var_7005, dtype="bool") /* ty=Tensor[(4, 264), bool] */;
  %784 = cast(%var_7005, dtype="bool") /* ty=Tensor[(4, 264), bool] */;
  %785 = reshape(%783, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), bool] */;
  %786 = reshape(%784, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), bool] */;
  %787 = @func_1637(%785, %786) /* ty=(Tensor[(11, 6, 16), bool], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(2, 15, 3), int32], Tensor[(11, 6, 16), float32]) */;
  %788 = cast(%var_7005, dtype="float32") /* ty=Tensor[(4, 264), float32] */;
  %789 = %777.0;
  %790 = @func_3825() /* ty=Tensor[(15, 11, 6), float32] */;
  %791 = @func_6587() /* ty=Tensor[(15, 11, 6), float32] */;
  %792 = %782.2;
  %793 = %787.2;
  %794 = acos(%788) /* ty=Tensor[(4, 264), float32] */;
  (%789, %790, %791, %792, %var_6992, %793, %794)
}

def @func_6660(%var_6627: Tensor[(3, 15, 15), float64]) -> (Tensor[(3, 15, 15), float64], Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), int8]) {
  %795 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 15, 1), float64] */, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
  %796 = cast(%var_6627, dtype="float64") /* ty=Tensor[(3, 15, 15), float64] */;
  %797 = @func_2824() /* ty=(Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) */;
  %798 = power(%795, %796) /* ty=Tensor[(3, 15, 15), float64] */;
  %799 = %797.0;
  %800 = @func_2401() /* ty=Tensor[(15, 11, 6), int8] */;
  %801 = @func_6152() /* ty=Tensor[(15, 11, 6), int8] */;
  (%798, %799, %800, %801)
}

def @func_4864(%var_4857: Tensor[(8, 16, 6), float64], %var_4858: Tensor[(8, 16, 6), float64]) -> Tensor[(8, 16, 6), bool] {
  %802 = cast(%var_4858, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %803 = shape_of(%var_4857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(%var_4857, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%804, %805) /* ty=Tensor[(8, 16, 6), bool] */
}

def @func_3901() -> (Tensor[(90), int32], Tensor[(15, 11, 6), float32]) {
  %806 = @func_3763() /* ty=(Tensor[(90), int32],) */;
  %807 = %806.0;
  %808 = @func_3825() /* ty=Tensor[(15, 11, 6), float32] */;
  (%807, %808)
}

def @func_4376() -> (Tensor[(15, 11, 6), int8],) {
  %809 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %810 = %809.0;
  (%810,)
}

def @func_3304(%var_3246: Tensor[(2, 16, 8), uint8], %var_3247: Tensor[(2, 16, 8), uint8]) -> (Tensor[(2, 16, 8), uint8], Tensor[(15, 11, 6), int8], Tensor[(30), int32], Tensor[(90), int32], Tensor[(528), float32], Tensor[(15, 11, 6), bool], Tensor[(7, 9, 5), float64], Tensor[(315, 1), float64]) {
  %811 = cast(%var_3247, dtype="uint8") /* ty=Tensor[(2, 16, 8), uint8] */;
  %812 = shape_of(%var_3246, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%var_3246, dtype="uint8") /* ty=Tensor[(2, 16, 8), uint8] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %815 = @func_2873() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %816 = cast(meta[relay.Constant][37] /* ty=Tensor[(528), uint32] */, dtype="uint32") /* ty=Tensor[(528), uint32] */;
  %817 = cast(meta[relay.Constant][37] /* ty=Tensor[(528), uint32] */, dtype="uint32") /* ty=Tensor[(528), uint32] */;
  %818 = reshape(%816, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), uint32] */;
  %819 = reshape(%817, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), uint32] */;
  %820 = @func_2287(%818, %819) /* ty=(Tensor[(11, 12, 4), bool], Tensor[(1, 10, 3), bool], Tensor[(30), int32], Tensor[(11, 12, 4), float32]) */;
  %821 = @func_3069() /* ty=(Tensor[(90), int32],) */;
  %822 = cast(meta[relay.Constant][37] /* ty=Tensor[(528), uint32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %823 = %815.0;
  %824 = cast(%823, dtype="int8") /* ty=Tensor[(15, 11, 6), int8] */;
  %825 = reshape(%824, newshape=[15, 11, 6]) /* ty=Tensor[(15, 11, 6), int8] */;
  %826 = @func_3038(%825) /* ty=(Tensor[(15, 11, 6), bool], Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8]) */;
  %827 = cast(meta[relay.Constant][38] /* ty=Tensor[(315, 1), float64] */, dtype="float64") /* ty=Tensor[(315, 1), float64] */;
  %828 = reshape(%827, newshape=[7, 9, 5]) /* ty=Tensor[(7, 9, 5), float64] */;
  %829 = @func_2962(%828) /* ty=(Tensor[(7, 9, 5), float64], Tensor[(15, 11, 6), int8]) */;
  %830 = subtract(%813, %814) /* ty=Tensor[(2, 16, 8), uint8] */;
  %831 = %820.2;
  %832 = %821.0;
  %833 = log10(%822) /* ty=Tensor[(528), float32] */;
  %834 = %826.0;
  %835 = %829.0;
  (%830, %823, %831, %832, %833, %834, %835, meta[relay.Constant][38] /* ty=Tensor[(315, 1), float64] */)
}

def @func_5302(%var_5293: Tensor[(10, 2, 7), float64]) -> (Tensor[(10, 2, 7), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) {
  %836 = cast(%var_5293, dtype="float64") /* ty=Tensor[(10, 2, 7), float64] */;
  %837 = cast(-3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %838 = cast(meta[relay.Constant][39] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
  %839 = reshape(%837, newshape=[]) /* ty=int32 */;
  %840 = reshape(%838, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int32] */;
  %841 = atanh(%836) /* ty=Tensor[(10, 2, 7), float64] */;
  %842 = @func_1360(%839, %840) /* ty=Tensor[(1, 10, 3), bool] */;
  (%841, %842, -3 /* ty=int32 */, meta[relay.Constant][39] /* ty=Tensor[(30), int32] */)
}

def @func_2409(%var_2404: Tensor[(7, 8, 8), float64]) -> (Tensor[(7, 8, 8), float64],) {
  %843 = cast(%var_2404, dtype="float64") /* ty=Tensor[(7, 8, 8), float64] */;
  %844 = sqrt(%843) /* ty=Tensor[(7, 8, 8), float64] */;
  (%844,)
}

def @func_3330() -> (Tensor[(15, 11, 6), int8],) {
  %845 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
  (%845,)
}

def @func_3825() -> Tensor[(15, 11, 6), float32] {
  @func_2990() /* ty=Tensor[(15, 11, 6), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7967(%var_7945: Tensor[(15, 11, 6), int8], %var_7962: uint64, %var_7963: Tensor[(36, 10), uint64]) -> (Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int32], Tensor[(90), int32], Tensor[(12, 2, 15), bool], uint64, Tensor[(36, 10), uint64]) {
  %0 = @func_4276() /* ty=(Tensor[(15, 11, 6), int8], Tensor[(3, 5, 1), bool], Tensor[(15), float32]) */;
  %1 = %0.0;
  %2 = cast(%var_7945, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %6 = cast(%var_7962, dtype="uint64") /* ty=uint64 */;
  %7 = cast(%var_7963, dtype="uint64") /* ty=Tensor[(36, 10), uint64] */;
  %8 = reshape(%6, newshape=[]) /* ty=uint64 */;
  %9 = reshape(%7, newshape=[12, 2, 15]) /* ty=Tensor[(12, 2, 15), uint64] */;
  %10 = @func_5062(%8, %9) /* ty=(Tensor[(12, 2, 15), bool],) */;
  %11 = minimum(%4, %5) /* ty=Tensor[(15, 11, 6), float32] */;
  %12 = @func_4484() /* ty=Tensor[(15, 11, 6), int32] */;
  %13 = @func_5808() /* ty=Tensor[(90), int32] */;
  %14 = %10.0;
  (%11, %12, %13, %14, %var_7962, %var_7963)
}

def @func_501(%var_499: Tensor[(6, 13, 15), uint8]) -> (Tensor[(6, 13, 15), float64], Tensor[(2, 15, 3), int32]) {
  @func_498(%var_499) /* ty=(Tensor[(6, 13, 15), float64], Tensor[(2, 15, 3), int32]) */
}

def @func_3826() -> Tensor[(15, 11, 6), float32] {
  %15 = fn () -> Tensor[(15, 11, 6), float32] {
    @func_2990() /* ty=Tensor[(15, 11, 6), float32] */
  };
  %15() /* ty=Tensor[(15, 11, 6), float32] */
}

def @func_2992() -> Tensor[(15, 11, 6), float32] {
  @func_2990() /* ty=Tensor[(15, 11, 6), float32] */
}

def @func_6401() -> (Tensor[(90), int32], Tensor[(2, 15, 3), int32]) {
  @func_6399() /* ty=(Tensor[(90), int32], Tensor[(2, 15, 3), int32]) */
}

def @func_6451() -> (Tensor[(90), int32], Tensor[(15, 11, 6), float32]) {
  %20 = fn () -> (Tensor[(90), int32], Tensor[(15, 11, 6), float32]) {
    %16 = @func_5918() /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), float32]) */;
    %17 = @func_6302() /* ty=(Tensor[(15, 11, 6), uint64], Tensor[(15, 11, 6), float32]) */;
    %18 = %16.0;
    %19 = %17.1;
    (%18, %19)
  };
  %20() /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), float32]) */
}

def @func_2167(%var_2166: Tensor[(3, 5, 1), float32]) -> Tensor[(3, 5, 1), bool] {
  %23 = fn (%var_2161: Tensor[(3, 5, 1), float32]) -> Tensor[(3, 5, 1), bool] {
    %21 = cast(3.24423f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %22 = cast(%var_2161, dtype="bool") /* ty=Tensor[(3, 5, 1), bool] */;
    greater_equal(%21, %22) /* ty=Tensor[(3, 5, 1), bool] */
  };
  %23(%var_2166) /* ty=Tensor[(3, 5, 1), bool] */
}

def @func_3331() -> (Tensor[(15, 11, 6), int8],) {
  %25 = fn () -> (Tensor[(15, 11, 6), int8],) {
    %24 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
    (%24,)
  };
  %25() /* ty=(Tensor[(15, 11, 6), int8],) */
}

def @func_4418() -> Tensor[(15, 11, 6), int8] {
  %27 = fn () -> Tensor[(15, 11, 6), int8] {
    %26 = @func_3330() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %26.0
  };
  %27() /* ty=Tensor[(15, 11, 6), int8] */
}

def @func_2794() -> (Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) {
  %53 = fn () -> (Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) {
    %28 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %29 = %28.0;
    %30 = cast(%29, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
    %31 = tan(%30) /* ty=Tensor[(15, 11, 6), float32] */;
    %32 = @func_2632() /* ty=Tensor[(15, 11, 6), int8] */;
    %33 = cast(%32, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
    %34 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
    %35 = cast(%29, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
    %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %37 = greater(%35, %36) /* ty=Tensor[(15, 11, 6), bool] */;
    %38 = cast(%29, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
    %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
    %40 = cast(%37, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
    %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %42 = less(%40, %41) /* ty=Tensor[(15, 11, 6), bool] */;
    %43 = cast(%42, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %44 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
    %45 = cast(%31, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %47 = cast(meta[relay.Constant][0] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
    %48 = cast(meta[relay.Constant][0] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
    %49 = reshape(%47, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %50 = reshape(%48, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %51 = floor_mod(%45, %46) /* ty=Tensor[(15, 11, 6), float64] */;
    %52 = @func_128(%49, %50) /* ty=Tensor[(2, 15, 3), int32] */;
    (%51, %52, meta[relay.Constant][0] /* ty=Tensor[(90), int32] */)
  };
  %53() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) */
}

def @func_5230(%var_5158: Tensor[(3, 16, 15), uint32], %var_5159: Tensor[(3, 16, 15), uint32]) -> (Tensor[(3, 16, 15), bool], Tensor[(90), int32], Tensor[(3, 16, 15), bool], Tensor[(3, 16, 15), float64], Tensor[(15, 11, 6), float64], Tensor[(7, 8, 8), float64], Tensor[(448), float64], Tensor[(15, 11, 6), float32], Tensor[(3, 16, 15), float64]) {
  %54 = cast(%var_5159, dtype="bool") /* ty=Tensor[(3, 16, 15), bool] */;
  %55 = shape_of(%var_5158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%var_5158, dtype="bool") /* ty=Tensor[(3, 16, 15), bool] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %58 = @func_3763() /* ty=(Tensor[(90), int32],) */;
  %59 = cast(%var_5158, dtype="bool") /* ty=Tensor[(3, 16, 15), bool] */;
  %60 = shape_of(%var_5159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%var_5159, dtype="bool") /* ty=Tensor[(3, 16, 15), bool] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %63 = cast(%var_5158, dtype="float32") /* ty=Tensor[(3, 16, 15), float32] */;
  %64 = exp(%63) /* ty=Tensor[(3, 16, 15), float32] */;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(3, 16, 15), float64] */;
  %66 = @func_2793() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) */;
  %67 = cast(meta[relay.Constant][1] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %68 = reshape(%67, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
  %69 = @func_2409(%68) /* ty=(Tensor[(7, 8, 8), float64],) */;
  %70 = @func_5123() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %71 = cast(%64, dtype="float64") /* ty=Tensor[(3, 16, 15), float64] */;
  %72 = less(%56, %57) /* ty=Tensor[(3, 16, 15), bool] */;
  %73 = %58.0;
  %74 = greater(%61, %62) /* ty=Tensor[(3, 16, 15), bool] */;
  %75 = log2(%65) /* ty=Tensor[(3, 16, 15), float64] */;
  %76 = %66.0;
  %77 = %69.0;
  %78 = %70.0;
  %79 = acosh(%71) /* ty=Tensor[(3, 16, 15), float64] */;
  (%72, %73, %74, %75, %76, %77, meta[relay.Constant][1] /* ty=Tensor[(448), float64] */, %78, %79)
}

def @func_3901() -> (Tensor[(90), int32], Tensor[(15, 11, 6), float32]) {
  %80 = @func_3763() /* ty=(Tensor[(90), int32],) */;
  %81 = %80.0;
  %82 = @func_3825() /* ty=Tensor[(15, 11, 6), float32] */;
  (%81, %82)
}

def @func_7680() -> (Tensor[(90), int32],) {
  @func_7678() /* ty=(Tensor[(90), int32],) */
}

def @func_2826() -> (Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) {
  @func_2824() /* ty=(Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) */
}

def @func_4864(%var_4857: Tensor[(8, 16, 6), float64], %var_4858: Tensor[(8, 16, 6), float64]) -> Tensor[(8, 16, 6), bool] {
  %83 = cast(%var_4858, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %84 = shape_of(%var_4857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%var_4857, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%85, %86) /* ty=Tensor[(8, 16, 6), bool] */
}

def @func_3540() -> Tensor[(90), int32] {
  %87 = @func_2793() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) */;
  %87.2
}

def @func_6588() -> Tensor[(15, 11, 6), float32] {
  %89 = fn () -> Tensor[(15, 11, 6), float32] {
    %88 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %88.0
  };
  %89() /* ty=Tensor[(15, 11, 6), float32] */
}

def @func_5267() -> (Tensor[(90), int32], Tensor[(90), int32]) {
  %90 = @func_3763() /* ty=(Tensor[(90), int32],) */;
  %91 = @func_3636() /* ty=(Tensor[(90), int32],) */;
  %92 = %90.0;
  %93 = %91.0;
  (%92, %93)
}

def @func_3069() -> (Tensor[(90), int32],) {
  %94 = @func_2793() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) */;
  %95 = %94.2;
  (%95,)
}

def @func_3638() -> (Tensor[(90), int32],) {
  @func_3636() /* ty=(Tensor[(90), int32],) */
}

def @func_3041(%var_3039: Tensor[(15, 11, 6), int8]) -> (Tensor[(15, 11, 6), bool], Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8]) {
  @func_3038(%var_3039) /* ty=(Tensor[(15, 11, 6), bool], Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8]) */
}

def @func_3903() -> (Tensor[(90), int32], Tensor[(15, 11, 6), float32]) {
  @func_3901() /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), float32]) */
}

def @func_2462() -> (Tensor[(15, 11, 6), int8],) {
  @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */
}

def @func_7165() -> (Tensor[(15, 11, 6), float32], Tensor[(108), uint8], Tensor[(90), int32], Tensor[(10, 9, 12), float64]) {
  %96 = @func_4614() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %97 = @func_3763() /* ty=(Tensor[(90), int32],) */;
  %98 = cast(meta[relay.Constant][2] /* ty=Tensor[(108), uint8] */, dtype="uint8") /* ty=Tensor[(108), uint8] */;
  %99 = reshape(%98, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), uint8] */;
  %100 = @func_5873(%99) /* ty=Tensor[(10, 9, 12), uint8] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(10, 9, 12), float64] */;
  %102 = asinh(%101) /* ty=Tensor[(10, 9, 12), float64] */;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(10, 9, 12), float64] */;
  %104 = %96.0;
  %105 = %97.0;
  %106 = cosh(%103) /* ty=Tensor[(10, 9, 12), float64] */;
  (%104, meta[relay.Constant][2] /* ty=Tensor[(108), uint8] */, %105, %106)
}

def @func_4038(%var_4029: Tensor[(10, 10, 6), float32], %var_4030: Tensor[(10, 10, 6), float32]) -> (Tensor[(10, 10, 6), bool], Tensor[(15, 11, 6), int8]) {
  %107 = cast(%var_4030, dtype="bool") /* ty=Tensor[(10, 10, 6), bool] */;
  %108 = shape_of(%var_4029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%var_4029, dtype="bool") /* ty=Tensor[(10, 10, 6), bool] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %111 = @func_3330() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %112 = greater(%109, %110) /* ty=Tensor[(10, 10, 6), bool] */;
  %113 = %111.0;
  (%112, %113)
}

def @func_6153() -> Tensor[(15, 11, 6), int8] {
  %114 = fn () -> Tensor[(15, 11, 6), int8] {
    @func_6105() /* ty=Tensor[(15, 11, 6), int8] */
  };
  %114() /* ty=Tensor[(15, 11, 6), int8] */
}

def @func_6046(%var_6045: Tensor[(130, 9), uint8]) -> (Tensor[(15, 11, 6), float64], Tensor[(1170), bool], Tensor[(130, 9), uint8], Tensor[(15, 11, 6), int8]) {
  %127 = fn (%var_6033: Tensor[(130, 9), uint8]) -> (Tensor[(15, 11, 6), float64], Tensor[(1170), bool], Tensor[(130, 9), uint8], Tensor[(15, 11, 6), int8]) {
    %115 = @func_5016() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %116 = %115.0;
    %117 = cast(%116, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %118 = cast(%var_6033, dtype="uint8") /* ty=Tensor[(130, 9), uint8] */;
    %119 = cast(%var_6033, dtype="uint8") /* ty=Tensor[(130, 9), uint8] */;
    %120 = reshape(%118, newshape=[1170]) /* ty=Tensor[(1170), uint8] */;
    %121 = reshape(%119, newshape=[1170]) /* ty=Tensor[(1170), uint8] */;
    %122 = @func_3622(%120, %121) /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(1170), bool], Tensor[(2, 15, 3), int32], Tensor[(120), int32]) */;
    %123 = @func_4276() /* ty=(Tensor[(15, 11, 6), int8], Tensor[(3, 5, 1), bool], Tensor[(15), float32]) */;
    %124 = sigmoid(%117) /* ty=Tensor[(15, 11, 6), float64] */;
    %125 = %122.3;
    %126 = %123.0;
    (%124, %125, %var_6033, %126)
  };
  %127(%var_6045) /* ty=(Tensor[(15, 11, 6), float64], Tensor[(1170), bool], Tensor[(130, 9), uint8], Tensor[(15, 11, 6), int8]) */
}

def @func_5888() -> (Tensor[(90), int32],) {
  %128 = @func_3901() /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), float32]) */;
  %129 = %128.0;
  (%129,)
}

def @func_2411(%var_2410: Tensor[(7, 8, 8), float64]) -> (Tensor[(7, 8, 8), float64],) {
  %132 = fn (%var_2404: Tensor[(7, 8, 8), float64]) -> (Tensor[(7, 8, 8), float64],) {
    %130 = cast(%var_2404, dtype="float64") /* ty=Tensor[(7, 8, 8), float64] */;
    %131 = sqrt(%130) /* ty=Tensor[(7, 8, 8), float64] */;
    (%131,)
  };
  %132(%var_2410) /* ty=(Tensor[(7, 8, 8), float64],) */
}

def @func_1640(%var_1638: Tensor[(11, 6, 16), bool], %var_1639: Tensor[(11, 6, 16), bool]) -> (Tensor[(11, 6, 16), bool], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(2, 15, 3), int32], Tensor[(11, 6, 16), float32]) {
  %152 = fn (%var_1596: Tensor[(11, 6, 16), bool], %var_1597: Tensor[(11, 6, 16), bool]) -> (Tensor[(11, 6, 16), bool], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(2, 15, 3), int32], Tensor[(11, 6, 16), float32]) {
    %133 = cast(%var_1597, dtype="bool") /* ty=Tensor[(11, 6, 16), bool] */;
    %134 = shape_of(%var_1596, dtype="int32") /* ty=Tensor[(3), int32] */;
    %135 = cast(%var_1596, dtype="bool") /* ty=Tensor[(11, 6, 16), bool] */;
    %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %137 = cast(meta[relay.Constant][3] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
    %138 = cast(meta[relay.Constant][3] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
    %139 = reshape(%137, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %140 = reshape(%138, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %141 = @func_128(%139, %140) /* ty=Tensor[(2, 15, 3), int32] */;
    %142 = cast(%141, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
    %143 = cast(meta[relay.Constant][3] /* ty=Tensor[(90), int32] */, dtype="int32") /* ty=Tensor[(90), int32] */;
    %144 = reshape(%142, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %145 = reshape(%143, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %146 = cast(%var_1596, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
    %147 = acosh(%146) /* ty=Tensor[(11, 6, 16), float64] */;
    %148 = cast(%147, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
    %149 = logical_and(%135, %136) /* ty=Tensor[(11, 6, 16), bool] */;
    %150 = @func_128(%144, %145) /* ty=Tensor[(2, 15, 3), int32] */;
    %151 = log10(%148) /* ty=Tensor[(11, 6, 16), float32] */;
    (%149, %141, meta[relay.Constant][3] /* ty=Tensor[(90), int32] */, %150, %151)
  };
  %152(%var_1638, %var_1639) /* ty=(Tensor[(11, 6, 16), bool], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(2, 15, 3), int32], Tensor[(11, 6, 16), float32]) */
}

def @func_5583() -> Tensor[(90), int32] {
  @func_5581() /* ty=Tensor[(90), int32] */
}

def @func_6662(%var_6661: Tensor[(3, 15, 15), float64]) -> (Tensor[(3, 15, 15), float64], Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), int8]) {
  %160 = fn (%var_6627: Tensor[(3, 15, 15), float64]) -> (Tensor[(3, 15, 15), float64], Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), int8]) {
    %153 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 15, 1), float64] */, dtype="float64") /* ty=Tensor[(3, 15, 1), float64] */;
    %154 = cast(%var_6627, dtype="float64") /* ty=Tensor[(3, 15, 15), float64] */;
    %155 = @func_2824() /* ty=(Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) */;
    %156 = power(%153, %154) /* ty=Tensor[(3, 15, 15), float64] */;
    %157 = %155.0;
    %158 = @func_2401() /* ty=Tensor[(15, 11, 6), int8] */;
    %159 = @func_6152() /* ty=Tensor[(15, 11, 6), int8] */;
    (%156, %157, %158, %159)
  };
  %160(%var_6661) /* ty=(Tensor[(3, 15, 15), float64], Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), int8]) */
}

def @func_5124() -> (Tensor[(15, 11, 6), float32],) {
  %163 = fn () -> (Tensor[(15, 11, 6), float32],) {
    %161 = @func_5016() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %162 = %161.0;
    (%162,)
  };
  %163() /* ty=(Tensor[(15, 11, 6), float32],) */
}

def @func_3978(%var_3967: Tensor[(6, 6, 5), float32]) -> (Tensor[(6, 6, 5), float32],) {
  %164 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 6, 5), float32] */;
  %165 = shape_of(%var_3967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%var_3967, dtype="float32") /* ty=Tensor[(6, 6, 5), float32] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %168 = power(%166, %167) /* ty=Tensor[(6, 6, 5), float32] */;
  (%168,)
}

def @func_3124(%var_3123: Tensor[(12), float32]) -> (Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(12), float32], Tensor[(156), float32], Tensor[(20), float32], Tensor[(90, ?), bool]) {
  %189 = fn (%var_3100: Tensor[(12), float32]) -> (Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(12), float32], Tensor[(156), float32], Tensor[(20), float32], Tensor[(90, ?), bool]) {
    %169 = cast(%var_3100, dtype="float32") /* ty=Tensor[(12), float32] */;
    %170 = cast(meta[relay.Constant][6] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
    %171 = reshape(%169, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), float32] */;
    %172 = reshape(%170, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float32] */;
    %173 = @func_991(%171, %172) /* ty=(Tensor[(6, 2, 13), float32], Tensor[(2, 15, 3), int32], Tensor[(5, 234), uint8], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32]) */;
    %174 = cast(meta[relay.Constant][7] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
    %175 = %173.5;
    %176 = cast(%175, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
    %177 = reshape(%174, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
    %178 = reshape(%176, newshape=[90, 1]) /* ty=Tensor[(90, 1), int32] */;
    %179 = @func_1311(%177, %178) /* ty=(Tensor[(10, 2, 13), float64], Tensor[(2, 15, 3), int32], Tensor[(90, 1), int32]) */;
    %180 = %179.2;
    %181 = @func_3069() /* ty=(Tensor[(90), int32],) */;
    %182 = %181.0;
    %183 = cast(%182, dtype="bool") /* ty=Tensor[(90), bool] */;
    %184 = shape_of(%180, dtype="int32") /* ty=Tensor[(2), int32] */;
    %185 = cast(%180, dtype="bool") /* ty=Tensor[(90, 1), bool] */;
    %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %187 = @func_2632() /* ty=Tensor[(15, 11, 6), int8] */;
    %188 = greater_equal(%185, %186) /* ty=Tensor[(90, ?), bool] */;
    (%187, %175, %var_3100, meta[relay.Constant][6] /* ty=Tensor[(156), float32] */, meta[relay.Constant][7] /* ty=Tensor[(20), float32] */, %188)
  };
  %189(%var_3123) /* ty=(Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(12), float32], Tensor[(156), float32], Tensor[(20), float32], Tensor[(90, ?), bool]) */
}

def @func_3139() -> Tensor[(90), int32] {
  %191 = fn () -> Tensor[(90), int32] {
    %190 = @func_3069() /* ty=(Tensor[(90), int32],) */;
    %190.0
  };
  %191() /* ty=Tensor[(90), int32] */
}

def @func_3361(%var_3359: Tensor[(6, 9, 12), float64], %var_3360: Tensor[(990), int8]) -> (Tensor[(6, 9, 12), float64], Tensor[(15, 11, 6), bool], Tensor[(990), int8]) {
  %198 = fn (%var_3344: Tensor[(6, 9, 12), float64], %var_3356: Tensor[(990), int8]) -> (Tensor[(6, 9, 12), float64], Tensor[(15, 11, 6), bool], Tensor[(990), int8]) {
    %192 = cast(%var_3344, dtype="float64") /* ty=Tensor[(6, 9, 12), float64] */;
    %193 = cast(%var_3356, dtype="int8") /* ty=Tensor[(990), int8] */;
    %194 = reshape(%193, newshape=[15, 11, 6]) /* ty=Tensor[(15, 11, 6), int8] */;
    %195 = @func_3038(%194) /* ty=(Tensor[(15, 11, 6), bool], Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8]) */;
    %196 = tan(%192) /* ty=Tensor[(6, 9, 12), float64] */;
    %197 = %195.0;
    (%196, %197, %var_3356)
  };
  %198(%var_3359, %var_3360) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(15, 11, 6), bool], Tensor[(990), int8]) */
}

def @func_7708() -> (Tensor[(7, 5, 3), float32], Tensor[(15, 11, 6), int8], Tensor[(90), int32], Tensor[(90), int32]) {
  %199 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %200 = @func_4344() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %201 = @func_6399() /* ty=(Tensor[(90), int32], Tensor[(2, 15, 3), int32]) */;
  %202 = @func_4832() /* ty=(Tensor[(15, 11, 6), float32], Tensor[(90), int32]) */;
  %203 = erf(%199) /* ty=Tensor[(7, 5, 3), float32] */;
  %204 = %200.0;
  %205 = %201.0;
  %206 = %202.1;
  (%203, %204, %205, %206)
}

def @func_4158(%var_4157: Tensor[(3, 6, 10), float64]) -> (Tensor[(15, 11, 6), float32], Tensor[(3, 6, 10), float32], Tensor[(6, 6, 5), float32], Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) {
  %219 = fn (%var_4114: Tensor[(3, 6, 10), float64]) -> (Tensor[(15, 11, 6), float32], Tensor[(3, 6, 10), float32], Tensor[(6, 6, 5), float32], Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) {
    %207 = cast(%var_4114, dtype="float64") /* ty=Tensor[(3, 6, 10), float64] */;
    %208 = atanh(%207) /* ty=Tensor[(3, 6, 10), float64] */;
    %209 = cast(%208, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
    %210 = sqrt(%209) /* ty=Tensor[(3, 6, 10), float32] */;
    %211 = cast(%210, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
    %212 = reshape(%211, newshape=[6, 6, 5]) /* ty=Tensor[(6, 6, 5), float32] */;
    %213 = @func_3978(%212) /* ty=(Tensor[(6, 6, 5), float32],) */;
    %214 = @func_2824() /* ty=(Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) */;
    %215 = @func_3825() /* ty=Tensor[(15, 11, 6), float32] */;
    %216 = %213.0;
    %217 = %214.0;
    %218 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
    (%215, %210, %216, %217, %218)
  };
  %219(%var_4157) /* ty=(Tensor[(15, 11, 6), float32], Tensor[(3, 6, 10), float32], Tensor[(6, 6, 5), float32], Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) */
}

def @func_5247(%var_5243: Tensor[(11, 7, 13), float64]) -> Tensor[(11, 7, 13), float64] {
  %220 = cast(%var_5243, dtype="float64") /* ty=Tensor[(11, 7, 13), float64] */;
  sigmoid(%220) /* ty=Tensor[(11, 7, 13), float64] */
}

def @func_2694() -> (Tensor[(15, 11, 6), int8],) {
  @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */
}

def @func_5485(%var_5472: Tensor[(16, 8, 3), float32], %var_5473: Tensor[(16, 8, 3), float32]) -> (Tensor[(16, 8, 3), bool], Tensor[(15, 11, 6), float64]) {
  %221 = cast(%var_5473, dtype="bool") /* ty=Tensor[(16, 8, 3), bool] */;
  %222 = shape_of(%var_5472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%var_5472, dtype="bool") /* ty=Tensor[(16, 8, 3), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = @func_3508() /* ty=(Tensor[(15, 11, 6), float64],) */;
  %226 = not_equal(%223, %224) /* ty=Tensor[(16, 8, 3), bool] */;
  %227 = %225.0;
  (%226, %227)
}

def @func_2633() -> Tensor[(15, 11, 6), int8] {
  %228 = fn () -> Tensor[(15, 11, 6), int8] {
    @func_2401() /* ty=Tensor[(15, 11, 6), int8] */
  };
  %228() /* ty=Tensor[(15, 11, 6), int8] */
}

def @func_4739() -> (Tensor[(15, 11, 6), float64],) {
  @func_4737() /* ty=(Tensor[(15, 11, 6), float64],) */
}

def @func_3240(%var_3239: Tensor[(2, 528), bool]) -> (Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(2, 528), bool]) {
  %237 = fn (%var_3225: Tensor[(2, 528), bool]) -> (Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(2, 528), bool]) {
    %229 = @func_2873() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %230 = cast(%var_3225, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
    %231 = cast(%var_3225, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
    %232 = reshape(%230, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), bool] */;
    %233 = reshape(%231, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), bool] */;
    %234 = @func_1637(%232, %233) /* ty=(Tensor[(11, 6, 16), bool], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(2, 15, 3), int32], Tensor[(11, 6, 16), float32]) */;
    %235 = %229.0;
    %236 = %234.3;
    (%235, %236, %var_3225)
  };
  %237(%var_3239) /* ty=(Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(2, 528), bool]) */
}

def @func_5489(%var_5487: Tensor[(16, 8, 3), float32], %var_5488: Tensor[(16, 8, 3), float32]) -> (Tensor[(16, 8, 3), bool], Tensor[(15, 11, 6), float64]) {
  @func_5485(%var_5487, %var_5488) /* ty=(Tensor[(16, 8, 3), bool], Tensor[(15, 11, 6), float64]) */
}

def @func_6007() -> (Tensor[(90), float64], Tensor[(15, 11, 6), float32]) {
  %238 = @func_3069() /* ty=(Tensor[(90), int32],) */;
  %239 = %238.0;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(90), float64] */;
  %241 = @func_5123() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %242 = sigmoid(%240) /* ty=Tensor[(90), float64] */;
  %243 = %241.0;
  (%242, %243)
}

def @func_6429() -> Tensor[(15, 11, 6), float32] {
  @func_6427() /* ty=Tensor[(15, 11, 6), float32] */
}

def @func_7710() -> (Tensor[(7, 5, 3), float32], Tensor[(15, 11, 6), int8], Tensor[(90), int32], Tensor[(90), int32]) {
  @func_7708() /* ty=(Tensor[(7, 5, 3), float32], Tensor[(15, 11, 6), int8], Tensor[(90), int32], Tensor[(90), int32]) */
}

def @main(%var_7992: Tensor[(11, 5, 12), float64], %var_8000: Tensor[(11, 5, 12), float64]) -> (Tensor[(11, 5, 12), bool],) {
  %244 = cast(%var_7992, dtype="float64") /* ty=Tensor[(11, 5, 12), float64] */;
  %245 = erf(%244) /* ty=Tensor[(11, 5, 12), float64] */;
  %246 = cast(%var_8000, dtype="bool") /* ty=Tensor[(11, 5, 12), bool] */;
  %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%245, dtype="bool") /* ty=Tensor[(11, 5, 12), bool] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %250 = equal(%248, %249) /* ty=Tensor[(11, 5, 12), bool] */;
  (%250,)
}

def @func_6950() -> (Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32]) {
  %254 = fn () -> (Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32]) {
    %251 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %252 = %251.0;
    %253 = @func_6587() /* ty=Tensor[(15, 11, 6), float32] */;
    (%252, %253)
  };
  %254() /* ty=(Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32]) */
}

def @func_7860(%var_7827: Tensor[(1320), float32], %var_7831: Tensor[(156), float32], %var_7843: Tensor[(648), float64]) -> (Tensor[(15, 11, 6), int8], Tensor[(576), bool], Tensor[(120), float32], Tensor[(1320), float32], Tensor[(2, 15, 3), int32], Tensor[(1, 12), float32], Tensor[(156), float64], Tensor[(990), int8], Tensor[(648), float64]) {
  %255 = cast(meta[relay.Constant][9] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %256 = cast(%var_7827, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %257 = reshape(%255, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float32] */;
  %258 = reshape(%256, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
  %259 = @func_6888(%257, %258) /* ty=(Tensor[(16, 12, 3), float64], Tensor[(576), bool], Tensor[(15, 11, 6), float32], Tensor[(11, 8, 15), bool]) */;
  %260 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 12), float32] */, dtype="float32") /* ty=Tensor[(1, 12), float32] */;
  %261 = cast(%var_7831, dtype="float32") /* ty=Tensor[(156), float32] */;
  %262 = reshape(%260, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), float32] */;
  %263 = reshape(%261, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float32] */;
  %264 = @func_991(%262, %263) /* ty=(Tensor[(6, 2, 13), float32], Tensor[(2, 15, 3), int32], Tensor[(5, 234), uint8], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32]) */;
  %265 = cast(%var_7831, dtype="float64") /* ty=Tensor[(156), float64] */;
  %266 = cast(%var_7843, dtype="float64") /* ty=Tensor[(648), float64] */;
  %267 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
  %268 = cast(%267, dtype="int8") /* ty=Tensor[(15, 11, 6), int8] */;
  %269 = reshape(%266, newshape=[6, 9, 12]) /* ty=Tensor[(6, 9, 12), float64] */;
  %270 = reshape(%268, newshape=[990]) /* ty=Tensor[(990), int8] */;
  %271 = @func_3358(%269, %270) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(15, 11, 6), bool], Tensor[(990), int8]) */;
  %272 = %259.1;
  %273 = %264.5;
  %274 = cos(%265) /* ty=Tensor[(156), float64] */;
  %275 = %271.2;
  (%267, %272, meta[relay.Constant][9] /* ty=Tensor[(120), float32] */, %var_7827, %273, meta[relay.Constant][10] /* ty=Tensor[(1, 12), float32] */, %274, %275, %var_7843)
}

def @func_7657(%var_7655: Tensor[(3, 40), float32], %var_7656: Tensor[(1320), float32]) -> (Tensor[(90), int32], Tensor[(15, 11, 6), float32], Tensor[(448), float64], Tensor[(16, 12, 3), float64], Tensor[(3, 40), float32], Tensor[(1320), float32], Tensor[(11, 1, 4), float32], Tensor[(44), float32]) {
  %292 = fn (%var_7631: Tensor[(3, 40), float32], %var_7632: Tensor[(1320), float32]) -> (Tensor[(90), int32], Tensor[(15, 11, 6), float32], Tensor[(448), float64], Tensor[(16, 12, 3), float64], Tensor[(3, 40), float32], Tensor[(1320), float32], Tensor[(11, 1, 4), float32], Tensor[(44), float32]) {
    %276 = @func_3964() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(90), int32]) */;
    %277 = cast(meta[relay.Constant][11] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
    %278 = reshape(%277, newshape=[448]) /* ty=Tensor[(448), float64] */;
    %279 = @func_4883(%278) /* ty=(Tensor[(15, 11, 6), float32], Tensor[(7, 8, 8), float64], Tensor[(448), float64]) */;
    %280 = cast(%var_7631, dtype="float32") /* ty=Tensor[(3, 40), float32] */;
    %281 = cast(%var_7632, dtype="float32") /* ty=Tensor[(1320), float32] */;
    %282 = reshape(%280, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float32] */;
    %283 = reshape(%281, newshape=[11, 8, 15]) /* ty=Tensor[(11, 8, 15), float32] */;
    %284 = @func_6888(%282, %283) /* ty=(Tensor[(16, 12, 3), float64], Tensor[(576), bool], Tensor[(15, 11, 6), float32], Tensor[(11, 8, 15), bool]) */;
    %285 = cast(meta[relay.Constant][12] /* ty=Tensor[(44), float32] */, dtype="float32") /* ty=Tensor[(44), float32] */;
    %286 = reshape(%285, newshape=[11, 1, 4]) /* ty=Tensor[(11, 1, 4), float32] */;
    %287 = @func_4767(%286) /* ty=(Tensor[(11, 1, 4), float32], Tensor[(11, 1, 4), float64]) */;
    %288 = %276.1;
    %289 = %279.0;
    %290 = %284.0;
    %291 = %287.0;
    (%288, %289, meta[relay.Constant][11] /* ty=Tensor[(448), float64] */, %290, %var_7631, %var_7632, %291, meta[relay.Constant][12] /* ty=Tensor[(44), float32] */)
  };
  %292(%var_7655, %var_7656) /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), float32], Tensor[(448), float64], Tensor[(16, 12, 3), float64], Tensor[(3, 40), float32], Tensor[(1320), float32], Tensor[(11, 1, 4), float32], Tensor[(44), float32]) */
}

def @func_6261(%var_6255: int32, %var_6256: Tensor[(176), uint16], %var_6257: Tensor[(1170), uint8], %var_6258: Tensor[(600), float32], %var_6259: Tensor[(180), float64], %var_6260: Tensor[(140), float64]) -> (Tensor[(90), int32], int32, int32, Tensor[(90), int32], Tensor[(90), int32], Tensor[(44), uint16], Tensor[(176), uint16], Tensor[(1170), uint8], Tensor[(600), float32], Tensor[(180), float64], Tensor[(90), int32], Tensor[(15, 11, 6), uint32], Tensor[(30), int32], Tensor[(140), float64], Tensor[(30), int32], Tensor[(15, 11, 6), int8]) {
  @func_6253(%var_6255, %var_6256, %var_6257, %var_6258, %var_6259, %var_6260) /* ty=(Tensor[(90), int32], int32, int32, Tensor[(90), int32], Tensor[(90), int32], Tensor[(44), uint16], Tensor[(176), uint16], Tensor[(1170), uint8], Tensor[(600), float32], Tensor[(180), float64], Tensor[(90), int32], Tensor[(15, 11, 6), uint32], Tensor[(30), int32], Tensor[(140), float64], Tensor[(30), int32], Tensor[(15, 11, 6), int8]) */
}

def @func_4569(%var_4568: Tensor[(12), float32]) -> (Tensor[(15, 11, 6), bool], Tensor[(2, 15, 3), int32], Tensor[(12), float32], Tensor[(156), float32]) {
  %305 = fn (%var_4562: Tensor[(12), float32]) -> (Tensor[(15, 11, 6), bool], Tensor[(2, 15, 3), int32], Tensor[(12), float32], Tensor[(156), float32]) {
    %293 = @func_4417() /* ty=Tensor[(15, 11, 6), int8] */;
    %294 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 11, 6), int8] */, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
    %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
    %296 = cast(%293, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %298 = cast(%var_4562, dtype="float32") /* ty=Tensor[(12), float32] */;
    %299 = cast(meta[relay.Constant][14] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
    %300 = reshape(%298, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), float32] */;
    %301 = reshape(%299, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float32] */;
    %302 = @func_991(%300, %301) /* ty=(Tensor[(6, 2, 13), float32], Tensor[(2, 15, 3), int32], Tensor[(5, 234), uint8], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32]) */;
    %303 = greater_equal(%296, %297) /* ty=Tensor[(15, 11, 6), bool] */;
    %304 = %302.1;
    (%303, %304, %var_4562, meta[relay.Constant][14] /* ty=Tensor[(156), float32] */)
  };
  %305(%var_4568) /* ty=(Tensor[(15, 11, 6), bool], Tensor[(2, 15, 3), int32], Tensor[(12), float32], Tensor[(156), float32]) */
}

def @func_5320() -> Tensor[(15, 11, 6), float32] {
  @func_5318() /* ty=Tensor[(15, 11, 6), float32] */
}

def @func_2290(%var_2288: Tensor[(11, 12, 4), uint32], %var_2289: Tensor[(11, 12, 4), uint32]) -> (Tensor[(11, 12, 4), bool], Tensor[(1, 10, 3), bool], Tensor[(30), int32], Tensor[(11, 12, 4), float32]) {
  %321 = fn (%var_2236: Tensor[(11, 12, 4), uint32], %var_2237: Tensor[(11, 12, 4), uint32]) -> (Tensor[(11, 12, 4), bool], Tensor[(1, 10, 3), bool], Tensor[(30), int32], Tensor[(11, 12, 4), float32]) {
    %306 = cast(%var_2237, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
    %307 = shape_of(%var_2236, dtype="int32") /* ty=Tensor[(3), int32] */;
    %308 = cast(%var_2236, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
    %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %310 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %311 = cast(meta[relay.Constant][15] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
    %312 = reshape(%310, newshape=[]) /* ty=int32 */;
    %313 = reshape(%311, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int32] */;
    %314 = cast(%var_2237, dtype="bool") /* ty=Tensor[(11, 12, 4), bool] */;
    %315 = cast(-4 /* ty=int32 */, dtype="bool") /* ty=bool */;
    %316 = equal(%314, %315) /* ty=Tensor[(11, 12, 4), bool] */;
    %317 = cast(%316, dtype="float32") /* ty=Tensor[(11, 12, 4), float32] */;
    %318 = less_equal(%308, %309) /* ty=Tensor[(11, 12, 4), bool] */;
    %319 = @func_1360(%312, %313) /* ty=Tensor[(1, 10, 3), bool] */;
    %320 = asinh(%317) /* ty=Tensor[(11, 12, 4), float32] */;
    (%318, %319, meta[relay.Constant][15] /* ty=Tensor[(30), int32] */, %320)
  };
  %321(%var_2288, %var_2289) /* ty=(Tensor[(11, 12, 4), bool], Tensor[(1, 10, 3), bool], Tensor[(30), int32], Tensor[(11, 12, 4), float32]) */
}

def @func_4615() -> (Tensor[(15, 11, 6), float32],) {
  %324 = fn () -> (Tensor[(15, 11, 6), float32],) {
    %322 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %323 = %322.0;
    (%323,)
  };
  %324() /* ty=(Tensor[(15, 11, 6), float32],) */
}

def @func_7029(%var_7027: Tensor[(528), uint32], %var_7028: Tensor[(4, 264), bool]) -> (Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(30), int32], Tensor[(528), uint32], Tensor[(90), int32], Tensor[(4, 264), float32]) {
  %343 = fn (%var_6992: Tensor[(528), uint32], %var_7005: Tensor[(4, 264), bool]) -> (Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(30), int32], Tensor[(528), uint32], Tensor[(90), int32], Tensor[(4, 264), float32]) {
    %325 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %326 = cast(%var_6992, dtype="uint32") /* ty=Tensor[(528), uint32] */;
    %327 = cast(%var_6992, dtype="uint32") /* ty=Tensor[(528), uint32] */;
    %328 = reshape(%326, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), uint32] */;
    %329 = reshape(%327, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), uint32] */;
    %330 = @func_2287(%328, %329) /* ty=(Tensor[(11, 12, 4), bool], Tensor[(1, 10, 3), bool], Tensor[(30), int32], Tensor[(11, 12, 4), float32]) */;
    %331 = cast(%var_7005, dtype="bool") /* ty=Tensor[(4, 264), bool] */;
    %332 = cast(%var_7005, dtype="bool") /* ty=Tensor[(4, 264), bool] */;
    %333 = reshape(%331, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), bool] */;
    %334 = reshape(%332, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), bool] */;
    %335 = @func_1637(%333, %334) /* ty=(Tensor[(11, 6, 16), bool], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(2, 15, 3), int32], Tensor[(11, 6, 16), float32]) */;
    %336 = cast(%var_7005, dtype="float32") /* ty=Tensor[(4, 264), float32] */;
    %337 = %325.0;
    %338 = @func_3825() /* ty=Tensor[(15, 11, 6), float32] */;
    %339 = @func_6587() /* ty=Tensor[(15, 11, 6), float32] */;
    %340 = %330.2;
    %341 = %335.2;
    %342 = acos(%336) /* ty=Tensor[(4, 264), float32] */;
    (%337, %338, %339, %340, %var_6992, %341, %342)
  };
  %343(%var_7027, %var_7028) /* ty=(Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(30), int32], Tensor[(528), uint32], Tensor[(90), int32], Tensor[(4, 264), float32]) */
}

def @func_2964(%var_2963: Tensor[(7, 9, 5), float64]) -> (Tensor[(7, 9, 5), float64], Tensor[(15, 11, 6), int8]) {
  %348 = fn (%var_2951: Tensor[(7, 9, 5), float64]) -> (Tensor[(7, 9, 5), float64], Tensor[(15, 11, 6), int8]) {
    %344 = cast(%var_2951, dtype="float64") /* ty=Tensor[(7, 9, 5), float64] */;
    %345 = @func_2873() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %346 = atanh(%344) /* ty=Tensor[(7, 9, 5), float64] */;
    %347 = %345.0;
    (%346, %347)
  };
  %348(%var_2963) /* ty=(Tensor[(7, 9, 5), float64], Tensor[(15, 11, 6), int8]) */
}

def @func_2484(%var_2483: Tensor[(12), float32]) -> (Tensor[(15, 11, 6), int8], Tensor[(1, 12, 13), int32], int32, Tensor[(12), float32]) {
  %357 = fn (%var_2471: Tensor[(12), float32]) -> (Tensor[(15, 11, 6), int8], Tensor[(1, 12, 13), int32], int32, Tensor[(12), float32]) {
    %349 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %350 = cast(-9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %351 = cast(%var_2471, dtype="float32") /* ty=Tensor[(12), float32] */;
    %352 = reshape(%350, newshape=[]) /* ty=int32 */;
    %353 = reshape(%351, newshape=[12]) /* ty=Tensor[(12), float32] */;
    %354 = @func_1712(%352, %353) /* ty=(Tensor[(1, 12, 13), int32], Tensor[(2, 15, 3), int32], Tensor[(12), float32]) */;
    %355 = %349.0;
    %356 = %354.0;
    (%355, %356, -9 /* ty=int32 */, %var_2471)
  };
  %357(%var_2483) /* ty=(Tensor[(15, 11, 6), int8], Tensor[(1, 12, 13), int32], int32, Tensor[(12), float32]) */
}

def @func_5448() -> (Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32]) {
  %364 = fn () -> (Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32]) {
    %358 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %359 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %360 = @func_3901() /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), float32]) */;
    %361 = %358.0;
    %362 = %359.0;
    %363 = %360.1;
    (%361, %362, %363)
  };
  %364() /* ty=(Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32]) */
}

def @func_7865(%var_7862: Tensor[(1320), float32], %var_7863: Tensor[(156), float32], %var_7864: Tensor[(648), float64]) -> (Tensor[(15, 11, 6), int8], Tensor[(576), bool], Tensor[(120), float32], Tensor[(1320), float32], Tensor[(2, 15, 3), int32], Tensor[(1, 12), float32], Tensor[(156), float64], Tensor[(990), int8], Tensor[(648), float64]) {
  @func_7860(%var_7862, %var_7863, %var_7864) /* ty=(Tensor[(15, 11, 6), int8], Tensor[(576), bool], Tensor[(120), float32], Tensor[(1320), float32], Tensor[(2, 15, 3), int32], Tensor[(1, 12), float32], Tensor[(156), float64], Tensor[(990), int8], Tensor[(648), float64]) */
}

def @func_3307(%var_3305: Tensor[(2, 16, 8), uint8], %var_3306: Tensor[(2, 16, 8), uint8]) -> (Tensor[(2, 16, 8), uint8], Tensor[(15, 11, 6), int8], Tensor[(30), int32], Tensor[(90), int32], Tensor[(528), float32], Tensor[(15, 11, 6), bool], Tensor[(7, 9, 5), float64], Tensor[(315, 1), float64]) {
  %390 = fn (%var_3246: Tensor[(2, 16, 8), uint8], %var_3247: Tensor[(2, 16, 8), uint8]) -> (Tensor[(2, 16, 8), uint8], Tensor[(15, 11, 6), int8], Tensor[(30), int32], Tensor[(90), int32], Tensor[(528), float32], Tensor[(15, 11, 6), bool], Tensor[(7, 9, 5), float64], Tensor[(315, 1), float64]) {
    %365 = cast(%var_3247, dtype="uint8") /* ty=Tensor[(2, 16, 8), uint8] */;
    %366 = shape_of(%var_3246, dtype="int32") /* ty=Tensor[(3), int32] */;
    %367 = cast(%var_3246, dtype="uint8") /* ty=Tensor[(2, 16, 8), uint8] */;
    %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %369 = @func_2873() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %370 = cast(meta[relay.Constant][16] /* ty=Tensor[(528), uint32] */, dtype="uint32") /* ty=Tensor[(528), uint32] */;
    %371 = cast(meta[relay.Constant][16] /* ty=Tensor[(528), uint32] */, dtype="uint32") /* ty=Tensor[(528), uint32] */;
    %372 = reshape(%370, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), uint32] */;
    %373 = reshape(%371, newshape=[11, 12, 4]) /* ty=Tensor[(11, 12, 4), uint32] */;
    %374 = @func_2287(%372, %373) /* ty=(Tensor[(11, 12, 4), bool], Tensor[(1, 10, 3), bool], Tensor[(30), int32], Tensor[(11, 12, 4), float32]) */;
    %375 = @func_3069() /* ty=(Tensor[(90), int32],) */;
    %376 = cast(meta[relay.Constant][16] /* ty=Tensor[(528), uint32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
    %377 = %369.0;
    %378 = cast(%377, dtype="int8") /* ty=Tensor[(15, 11, 6), int8] */;
    %379 = reshape(%378, newshape=[15, 11, 6]) /* ty=Tensor[(15, 11, 6), int8] */;
    %380 = @func_3038(%379) /* ty=(Tensor[(15, 11, 6), bool], Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8]) */;
    %381 = cast(meta[relay.Constant][17] /* ty=Tensor[(315, 1), float64] */, dtype="float64") /* ty=Tensor[(315, 1), float64] */;
    %382 = reshape(%381, newshape=[7, 9, 5]) /* ty=Tensor[(7, 9, 5), float64] */;
    %383 = @func_2962(%382) /* ty=(Tensor[(7, 9, 5), float64], Tensor[(15, 11, 6), int8]) */;
    %384 = subtract(%367, %368) /* ty=Tensor[(2, 16, 8), uint8] */;
    %385 = %374.2;
    %386 = %375.0;
    %387 = log10(%376) /* ty=Tensor[(528), float32] */;
    %388 = %380.0;
    %389 = %383.0;
    (%384, %377, %385, %386, %387, %388, %389, meta[relay.Constant][17] /* ty=Tensor[(315, 1), float64] */)
  };
  %390(%var_3305, %var_3306) /* ty=(Tensor[(2, 16, 8), uint8], Tensor[(15, 11, 6), int8], Tensor[(30), int32], Tensor[(90), int32], Tensor[(528), float32], Tensor[(15, 11, 6), bool], Tensor[(7, 9, 5), float64], Tensor[(315, 1), float64]) */
}

def @func_5890() -> (Tensor[(90), int32],) {
  @func_5888() /* ty=(Tensor[(90), int32],) */
}

def @func_5318() -> Tensor[(15, 11, 6), float32] {
  @func_2990() /* ty=Tensor[(15, 11, 6), float32] */
}

def @func_6009() -> (Tensor[(90), float64], Tensor[(15, 11, 6), float32]) {
  @func_6007() /* ty=(Tensor[(90), float64], Tensor[(15, 11, 6), float32]) */
}

def @func_4981() -> (Tensor[(8, 1, 7), float64], Tensor[(15, 11, 6), float32]) {
  @func_4979() /* ty=(Tensor[(8, 1, 7), float64], Tensor[(15, 11, 6), float32]) */
}

def @func_5065(%var_5063: uint64, %var_5064: Tensor[(12, 2, 15), uint64]) -> (Tensor[(12, 2, 15), bool],) {
  %394 = fn (%var_5055: uint64, %var_5056: Tensor[(12, 2, 15), uint64]) -> (Tensor[(12, 2, 15), bool],) {
    %391 = cast(%var_5055, dtype="bool") /* ty=bool */;
    %392 = cast(%var_5056, dtype="bool") /* ty=Tensor[(12, 2, 15), bool] */;
    %393 = equal(%391, %392) /* ty=Tensor[(12, 2, 15), bool] */;
    (%393,)
  };
  %394(%var_5063, %var_5064) /* ty=(Tensor[(12, 2, 15), bool],) */
}

def @func_4344() -> (Tensor[(15, 11, 6), int8],) {
  %395 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %396 = %395.0;
  (%396,)
}

def @func_7718() -> (Tensor[(15, 11, 6), float32],) {
  @func_7716() /* ty=(Tensor[(15, 11, 6), float32],) */
}

def @func_5809() -> Tensor[(90), int32] {
  %398 = fn () -> Tensor[(90), int32] {
    %397 = @func_5267() /* ty=(Tensor[(90), int32], Tensor[(90), int32]) */;
    %397.1
  };
  %398() /* ty=Tensor[(90), int32] */
}

def @func_6302() -> (Tensor[(15, 11, 6), uint64], Tensor[(15, 11, 6), float32]) {
  %399 = @func_6105() /* ty=Tensor[(15, 11, 6), int8] */;
  %400 = @func_4221() /* ty=Tensor[(15, 11, 6), float64] */;
  %401 = cast(%400, dtype="uint64") /* ty=Tensor[(15, 11, 6), uint64] */;
  %402 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%399, dtype="uint64") /* ty=Tensor[(15, 11, 6), uint64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %405 = cast(%399, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %406 = multiply(%403, %404) /* ty=Tensor[(15, 11, 6), uint64] */;
  %407 = log(%405) /* ty=Tensor[(15, 11, 6), float32] */;
  (%406, %407)
}

def @func_3764() -> (Tensor[(90), int32],) {
  %409 = fn () -> (Tensor[(90), int32],) {
    %408 = @func_3540() /* ty=Tensor[(90), int32] */;
    (%408,)
  };
  %409() /* ty=(Tensor[(90), int32],) */
}

def @func_4377() -> (Tensor[(15, 11, 6), int8],) {
  %412 = fn () -> (Tensor[(15, 11, 6), int8],) {
    %410 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %411 = %410.0;
    (%411,)
  };
  %412() /* ty=(Tensor[(15, 11, 6), int8],) */
}

def @func_5250(%var_5248: Tensor[(11, 7, 13), float64]) -> Tensor[(11, 7, 13), float64] {
  @func_5247(%var_5248) /* ty=Tensor[(11, 7, 13), float64] */
}

def @func_7716() -> (Tensor[(15, 11, 6), float32],) {
  %413 = @func_6949() /* ty=(Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32]) */;
  %414 = %413.1;
  (%414,)
}

def @func_5016() -> (Tensor[(15, 11, 6), float32],) {
  %415 = @func_3825() /* ty=Tensor[(15, 11, 6), float32] */;
  (%415,)
}

def @func_4102(%var_4101: Tensor[(15, 11, 6), int8]) -> (Tensor[(15, 11, 6), float64],) {
  %423 = fn (%var_4095: Tensor[(15, 11, 6), int8]) -> (Tensor[(15, 11, 6), float64],) {
    %416 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %417 = %416.0;
    %418 = cast(%var_4095, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(%417, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %422 = floor_divide(%420, %421) /* ty=Tensor[(15, 11, 6), float64] */;
    (%422,)
  };
  %423(%var_4101) /* ty=(Tensor[(15, 11, 6), float64],) */
}

def @func_7478() -> (Tensor[(15, 11, 6), float32],) {
  %425 = fn () -> (Tensor[(15, 11, 6), float32],) {
    %424 = @func_2990() /* ty=Tensor[(15, 11, 6), float32] */;
    (%424,)
  };
  %425() /* ty=(Tensor[(15, 11, 6), float32],) */
}

def @func_5302(%var_5293: Tensor[(10, 2, 7), float64]) -> (Tensor[(10, 2, 7), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) {
  %426 = cast(%var_5293, dtype="float64") /* ty=Tensor[(10, 2, 7), float64] */;
  %427 = cast(-3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %428 = cast(meta[relay.Constant][18] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
  %429 = reshape(%427, newshape=[]) /* ty=int32 */;
  %430 = reshape(%428, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int32] */;
  %431 = atanh(%426) /* ty=Tensor[(10, 2, 7), float64] */;
  %432 = @func_1360(%429, %430) /* ty=Tensor[(1, 10, 3), bool] */;
  (%431, %432, -3 /* ty=int32 */, meta[relay.Constant][18] /* ty=Tensor[(30), int32] */)
}

def @func_3743(%var_3739: Tensor[(15, 11, 6), int8], %var_3740: Tensor[(15, 11, 6), float64], %var_3741: Tensor[(315), float64], %var_3742: Tensor[(90), int32]) -> (Tensor[(15, 11, 6), int32], Tensor[(15, 11, 6), bool], Tensor[(256), uint8], Tensor[(15, 11, 6), int16], Tensor[(15, 11, 6), int8], Tensor[(315), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) {
  %461 = fn (%var_3665: Tensor[(15, 11, 6), int8], %var_3681: Tensor[(15, 11, 6), float64], %var_3704: Tensor[(315), float64], %var_3708: Tensor[(90), int32]) -> (Tensor[(15, 11, 6), int32], Tensor[(15, 11, 6), bool], Tensor[(256), uint8], Tensor[(15, 11, 6), int16], Tensor[(15, 11, 6), int8], Tensor[(315), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) {
    %433 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
    %434 = cast(%var_3665, dtype="int32") /* ty=Tensor[(15, 11, 6), int32] */;
    %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
    %436 = cast(%433, dtype="int32") /* ty=Tensor[(15, 11, 6), int32] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %438 = cast(meta[relay.Constant][19] /* ty=Tensor[(256), uint8] */, dtype="uint8") /* ty=Tensor[(256), uint8] */;
    %439 = cast(meta[relay.Constant][19] /* ty=Tensor[(256), uint8] */, dtype="uint8") /* ty=Tensor[(256), uint8] */;
    %440 = reshape(%438, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), uint8] */;
    %441 = reshape(%439, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), uint8] */;
    %442 = @func_3304(%440, %441) /* ty=(Tensor[(2, 16, 8), uint8], Tensor[(15, 11, 6), int8], Tensor[(30), int32], Tensor[(90), int32], Tensor[(528), float32], Tensor[(15, 11, 6), bool], Tensor[(7, 9, 5), float64], Tensor[(315, 1), float64]) */;
    %443 = @func_3508() /* ty=(Tensor[(15, 11, 6), float64],) */;
    %444 = %443.0;
    %445 = cast(%var_3681, dtype="int16") /* ty=Tensor[(15, 11, 6), int16] */;
    %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
    %447 = cast(%444, dtype="int16") /* ty=Tensor[(15, 11, 6), int16] */;
    %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %449 = cast(%var_3704, dtype="float64") /* ty=Tensor[(315), float64] */;
    %450 = reshape(%449, newshape=[7, 9, 5]) /* ty=Tensor[(7, 9, 5), float64] */;
    %451 = @func_2962(%450) /* ty=(Tensor[(7, 9, 5), float64], Tensor[(15, 11, 6), int8]) */;
    %452 = cast(%var_3708, dtype="int32") /* ty=Tensor[(90), int32] */;
    %453 = cast(%var_3708, dtype="int32") /* ty=Tensor[(90), int32] */;
    %454 = reshape(%452, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %455 = reshape(%453, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %456 = bitwise_or(%436, %437) /* ty=Tensor[(15, 11, 6), int32] */;
    %457 = %442.5;
    %458 = bitwise_xor(%447, %448) /* ty=Tensor[(15, 11, 6), int16] */;
    %459 = %451.1;
    %460 = @func_128(%454, %455) /* ty=Tensor[(2, 15, 3), int32] */;
    (%456, %457, meta[relay.Constant][19] /* ty=Tensor[(256), uint8] */, %458, %459, %var_3704, %460, %var_3708)
  };
  %461(%var_3739, %var_3740, %var_3741, %var_3742) /* ty=(Tensor[(15, 11, 6), int32], Tensor[(15, 11, 6), bool], Tensor[(256), uint8], Tensor[(15, 11, 6), int16], Tensor[(15, 11, 6), int8], Tensor[(315), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) */
}

def @func_4486() -> Tensor[(15, 11, 6), int32] {
  @func_4484() /* ty=Tensor[(15, 11, 6), int32] */
}

def @func_6253(%var_6198: int32, %var_6208: Tensor[(176), uint16], %var_6209: Tensor[(1170), uint8], %var_6210: Tensor[(600), float32], %var_6211: Tensor[(180), float64], %var_6240: Tensor[(140), float64]) -> (Tensor[(90), int32], int32, int32, Tensor[(90), int32], Tensor[(90), int32], Tensor[(44), uint16], Tensor[(176), uint16], Tensor[(1170), uint8], Tensor[(600), float32], Tensor[(180), float64], Tensor[(90), int32], Tensor[(15, 11, 6), uint32], Tensor[(30), int32], Tensor[(140), float64], Tensor[(30), int32], Tensor[(15, 11, 6), int8]) {
  %462 = cast(%var_6198, dtype="int32") /* ty=int32 */;
  %463 = reshape(%462, newshape=[]) /* ty=int32 */;
  %464 = @func_3997(%463) /* ty=(Tensor[(15, 11, 6), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) */;
  %465 = cast(meta[relay.Constant][20] /* ty=Tensor[(44), uint16] */, dtype="uint16") /* ty=Tensor[(44), uint16] */;
  %466 = cast(%var_6208, dtype="uint16") /* ty=Tensor[(176), uint16] */;
  %467 = cast(%var_6209, dtype="uint8") /* ty=Tensor[(1170), uint8] */;
  %468 = cast(%var_6210, dtype="float32") /* ty=Tensor[(600), float32] */;
  %469 = cast(%var_6211, dtype="float64") /* ty=Tensor[(180), float64] */;
  %470 = reshape(%465, newshape=[1, 4, 11]) /* ty=Tensor[(1, 4, 11), uint16] */;
  %471 = reshape(%466, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), uint16] */;
  %472 = reshape(%467, newshape=[390, 3]) /* ty=Tensor[(390, 3), uint8] */;
  %473 = reshape(%468, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %474 = reshape(%469, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %475 = @func_5680(%470, %471, %472, %473, %474) /* ty=(Tensor[(4, 4, 11), uint16], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8], Tensor[(390, 3), uint8], Tensor[(15, 11, 6), int8], Tensor[(600), float32], Tensor[(90), int32], Tensor[(4, 4, 11), bool], Tensor[(15, 11, 6), float32], Tensor[(180), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), bool], Tensor[(4, 4, 11), float64], Tensor[(4, 4, 11), float32]) */;
  %476 = @func_3964() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(90), int32]) */;
  %477 = %476.0;
  %478 = cast(%477, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %479 = exp(%478) /* ty=Tensor[(15, 11, 6), float32] */;
  %480 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 11, 6), float32] */, dtype="uint32") /* ty=Tensor[(15, 11, 6), uint32] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%479, dtype="uint32") /* ty=Tensor[(15, 11, 6), uint32] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %484 = cast(%var_6240, dtype="float64") /* ty=Tensor[(140), float64] */;
  %485 = reshape(%484, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), float64] */;
  %486 = @func_5302(%485) /* ty=(Tensor[(10, 2, 7), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) */;
  %487 = cast(%var_6240, dtype="float64") /* ty=Tensor[(140), float64] */;
  %488 = reshape(%487, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), float64] */;
  %489 = @func_5302(%488) /* ty=(Tensor[(10, 2, 7), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) */;
  %490 = @func_3540() /* ty=Tensor[(90), int32] */;
  %491 = %464.2;
  %492 = @func_3138() /* ty=Tensor[(90), int32] */;
  %493 = %475.6;
  %494 = @func_4446() /* ty=Tensor[(90), int32] */;
  %495 = left_shift(%482, %483) /* ty=Tensor[(15, 11, 6), uint32] */;
  %496 = %486.3;
  %497 = %489.3;
  %498 = @func_6105() /* ty=Tensor[(15, 11, 6), int8] */;
  (%490, %491, %var_6198, %492, %493, meta[relay.Constant][20] /* ty=Tensor[(44), uint16] */, %var_6208, %var_6209, %var_6210, %var_6211, %494, %495, %496, %var_6240, %497, %498)
}

def @func_7678() -> (Tensor[(90), int32],) {
  %499 = @func_4446() /* ty=Tensor[(90), int32] */;
  (%499,)
}

def @func_2460() -> (Tensor[(15, 11, 6), int8],) {
  %500 = @func_2401() /* ty=Tensor[(15, 11, 6), int8] */;
  (%500,)
}

def @func_5043(%var_5042: Tensor[(15, 11, 6), int8]) -> Tensor[(15, 11, 6), bool] {
  %506 = fn (%var_5036: Tensor[(15, 11, 6), int8]) -> Tensor[(15, 11, 6), bool] {
    %501 = @func_2401() /* ty=Tensor[(15, 11, 6), int8] */;
    %502 = cast(%var_5036, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
    %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
    %504 = cast(%501, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
    %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%504, %505) /* ty=Tensor[(15, 11, 6), bool] */
  };
  %506(%var_5042) /* ty=Tensor[(15, 11, 6), bool] */
}

def @func_5876(%var_5874: Tensor[(1, 9, 12), uint8]) -> Tensor[(10, 9, 12), uint8] {
  @func_5873(%var_5874) /* ty=Tensor[(10, 9, 12), uint8] */
}

def @func_4346() -> (Tensor[(15, 11, 6), int8],) {
  @func_4344() /* ty=(Tensor[(15, 11, 6), int8],) */
}

def @func_4714(%var_4713: Tensor[(18, 36), float64]) -> (Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), int8], Tensor[(18, 36), uint16], Tensor[(1, 10, 3), bool], int32, Tensor[(990), float64]) {
  %527 = fn (%var_4674: Tensor[(18, 36), float64]) -> (Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), int8], Tensor[(18, 36), uint16], Tensor[(1, 10, 3), bool], int32, Tensor[(990), float64]) {
    %507 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %508 = cast(meta[relay.Constant][22] /* ty=Tensor[(18, 36), float64] */, dtype="uint16") /* ty=Tensor[(18, 36), uint16] */;
    %509 = shape_of(%var_4674, dtype="int32") /* ty=Tensor[(2), int32] */;
    %510 = cast(%var_4674, dtype="uint16") /* ty=Tensor[(18, 36), uint16] */;
    %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %512 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %513 = reshape(%512, newshape=[]) /* ty=int32 */;
    %514 = @func_3997(%513) /* ty=(Tensor[(15, 11, 6), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) */;
    %515 = cast(%var_4674, dtype="float64") /* ty=Tensor[(18, 36), float64] */;
    %516 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
    %517 = cast(%516, dtype="int8") /* ty=Tensor[(15, 11, 6), int8] */;
    %518 = reshape(%515, newshape=[6, 9, 12]) /* ty=Tensor[(6, 9, 12), float64] */;
    %519 = reshape(%517, newshape=[990]) /* ty=Tensor[(990), int8] */;
    %520 = @func_3358(%518, %519) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(15, 11, 6), bool], Tensor[(990), int8]) */;
    %521 = %520.2;
    %522 = cast(%521, dtype="float64") /* ty=Tensor[(990), float64] */;
    %523 = %507.0;
    %524 = right_shift(%510, %511) /* ty=Tensor[(18, 36), uint16] */;
    %525 = %514.1;
    %526 = atanh(%522) /* ty=Tensor[(990), float64] */;
    (%516, %523, %524, %525, 5 /* ty=int32 */, %526)
  };
  %527(%var_4713) /* ty=(Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), int8], Tensor[(18, 36), uint16], Tensor[(1, 10, 3), bool], int32, Tensor[(990), float64]) */
}

def @func_2874() -> (Tensor[(15, 11, 6), int8],) {
  %529 = fn () -> (Tensor[(15, 11, 6), int8],) {
    %528 = @func_2632() /* ty=Tensor[(15, 11, 6), int8] */;
    (%528,)
  };
  %529() /* ty=(Tensor[(15, 11, 6), int8],) */
}

def @func_4484() -> Tensor[(15, 11, 6), int32] {
  %530 = @func_3964() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(90), int32]) */;
  %531 = %530.0;
  %532 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 11, 6), float64] */, dtype="int32") /* ty=Tensor[(15, 11, 6), int32] */;
  %533 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%531, dtype="int32") /* ty=Tensor[(15, 11, 6), int32] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%534, %535) /* ty=Tensor[(15, 11, 6), int32] */
}

def @func_2403() -> Tensor[(15, 11, 6), int8] {
  @func_2401() /* ty=Tensor[(15, 11, 6), int8] */
}

def @func_3981(%var_3979: Tensor[(6, 6, 5), float32]) -> (Tensor[(6, 6, 5), float32],) {
  @func_3978(%var_3979) /* ty=(Tensor[(6, 6, 5), float32],) */
}

def @func_7167() -> (Tensor[(15, 11, 6), float32], Tensor[(108), uint8], Tensor[(90), int32], Tensor[(10, 9, 12), float64]) {
  @func_7165() /* ty=(Tensor[(15, 11, 6), float32], Tensor[(108), uint8], Tensor[(90), int32], Tensor[(10, 9, 12), float64]) */
}

def @func_994(%var_992: Tensor[(6, 2, 1), float32], %var_993: Tensor[(6, 2, 13), float32]) -> (Tensor[(6, 2, 13), float32], Tensor[(2, 15, 3), int32], Tensor[(5, 234), uint8], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32]) {
  %557 = fn (%var_947: Tensor[(6, 2, 1), float32], %var_948: Tensor[(6, 2, 13), float32]) -> (Tensor[(6, 2, 13), float32], Tensor[(2, 15, 3), int32], Tensor[(5, 234), uint8], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32]) {
    %536 = cast(%var_947, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
    %537 = cast(%var_948, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
    %538 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 234), uint8] */, dtype="uint8") /* ty=Tensor[(5, 234), uint8] */;
    %539 = reshape(%538, newshape=[6, 13, 15]) /* ty=Tensor[(6, 13, 15), uint8] */;
    %540 = @func_498(%539) /* ty=(Tensor[(6, 13, 15), float64], Tensor[(2, 15, 3), int32]) */;
    %541 = %540.1;
    %542 = cast(%541, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
    %543 = cast(%541, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
    %544 = reshape(%542, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %545 = reshape(%543, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %546 = @func_128(%544, %545) /* ty=Tensor[(2, 15, 3), int32] */;
    %547 = cast(%546, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
    %548 = cast(%541, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
    %549 = reshape(%547, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %550 = reshape(%548, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %551 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 234), uint8] */, dtype="uint8") /* ty=Tensor[(5, 234), uint8] */;
    %552 = reshape(%551, newshape=[6, 13, 15]) /* ty=Tensor[(6, 13, 15), uint8] */;
    %553 = @func_498(%552) /* ty=(Tensor[(6, 13, 15), float64], Tensor[(2, 15, 3), int32]) */;
    %554 = floor_mod(%536, %537) /* ty=Tensor[(6, 2, 13), float32] */;
    %555 = @func_128(%549, %550) /* ty=Tensor[(2, 15, 3), int32] */;
    %556 = %553.1;
    (%554, %541, meta[relay.Constant][24] /* ty=Tensor[(5, 234), uint8] */, %546, %555, %556)
  };
  %557(%var_992, %var_993) /* ty=(Tensor[(6, 2, 13), float32], Tensor[(2, 15, 3), int32], Tensor[(5, 234), uint8], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32]) */
}

def @func_1527(%var_1524: Tensor[(14, 3, 14), float64]) -> Tensor[(14, 3, 14), float64] {
  %558 = cast(%var_1524, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  log10(%558) /* ty=Tensor[(14, 3, 14), float64] */
}

def @func_128(%var_112: Tensor[(2, 15, 3), int32], %var_113: Tensor[(2, 15, 3), int32]) -> Tensor[(2, 15, 3), int32] {
  %559 = cast(%var_113, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
  %560 = shape_of(%var_112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%var_112, dtype="int32") /* ty=Tensor[(2, 15, 3), int32] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%561, %562) /* ty=Tensor[(2, 15, 3), int32] */
}

def @func_5687(%var_5682: Tensor[(1, 4, 11), uint16], %var_5683: Tensor[(4, 4, 11), uint16], %var_5684: Tensor[(390, 3), uint8], %var_5685: Tensor[(600), float32], %var_5686: Tensor[(180), float64]) -> (Tensor[(4, 4, 11), uint16], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8], Tensor[(390, 3), uint8], Tensor[(15, 11, 6), int8], Tensor[(600), float32], Tensor[(90), int32], Tensor[(4, 4, 11), bool], Tensor[(15, 11, 6), float32], Tensor[(180), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), bool], Tensor[(4, 4, 11), float64], Tensor[(4, 4, 11), float32]) {
  @func_5680(%var_5682, %var_5683, %var_5684, %var_5685, %var_5686) /* ty=(Tensor[(4, 4, 11), uint16], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8], Tensor[(390, 3), uint8], Tensor[(15, 11, 6), int8], Tensor[(600), float32], Tensor[(90), int32], Tensor[(4, 4, 11), bool], Tensor[(15, 11, 6), float32], Tensor[(180), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), bool], Tensor[(4, 4, 11), float64], Tensor[(4, 4, 11), float32]) */
}

def @func_4446() -> Tensor[(90), int32] {
  %563 = @func_3636() /* ty=(Tensor[(90), int32],) */;
  %563.0
}

def @func_6304() -> (Tensor[(15, 11, 6), uint64], Tensor[(15, 11, 6), float32]) {
  @func_6302() /* ty=(Tensor[(15, 11, 6), uint64], Tensor[(15, 11, 6), float32]) */
}

def @func_5018() -> (Tensor[(15, 11, 6), float32],) {
  @func_5016() /* ty=(Tensor[(15, 11, 6), float32],) */
}

def @func_3071() -> (Tensor[(90), int32],) {
  @func_3069() /* ty=(Tensor[(90), int32],) */
}

def @func_3542() -> Tensor[(90), int32] {
  @func_3540() /* ty=Tensor[(90), int32] */
}

def @func_4276() -> (Tensor[(15, 11, 6), int8], Tensor[(3, 5, 1), bool], Tensor[(15), float32]) {
  %564 = @func_2873() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %565 = cast(meta[relay.Constant][25] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %566 = reshape(%565, newshape=[3, 5, 1]) /* ty=Tensor[(3, 5, 1), float32] */;
  %567 = %564.0;
  %568 = @func_2165(%566) /* ty=Tensor[(3, 5, 1), bool] */;
  (%567, %568, meta[relay.Constant][25] /* ty=Tensor[(15), float32] */)
}

def @func_1530(%var_1528: Tensor[(14, 3, 14), float64]) -> Tensor[(14, 3, 14), float64] {
  @func_1527(%var_1528) /* ty=Tensor[(14, 3, 14), float64] */
}

def @func_4448() -> Tensor[(90), int32] {
  @func_4446() /* ty=Tensor[(90), int32] */
}

def @func_6699() -> (Tensor[(15, 11, 6), int8],) {
  %571 = fn () -> (Tensor[(15, 11, 6), int8],) {
    %569 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %570 = %569.0;
    (%570,)
  };
  %571() /* ty=(Tensor[(15, 11, 6), int8],) */
}

def @func_4042(%var_4040: Tensor[(10, 10, 6), float32], %var_4041: Tensor[(10, 10, 6), float32]) -> (Tensor[(10, 10, 6), bool], Tensor[(15, 11, 6), int8]) {
  @func_4038(%var_4040, %var_4041) /* ty=(Tensor[(10, 10, 6), bool], Tensor[(15, 11, 6), int8]) */
}

def @func_2692() -> (Tensor[(15, 11, 6), int8],) {
  %572 = @func_2401() /* ty=Tensor[(15, 11, 6), int8] */;
  (%572,)
}

def @func_5305(%var_5303: Tensor[(10, 2, 7), float64]) -> (Tensor[(10, 2, 7), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) {
  @func_5302(%var_5303) /* ty=(Tensor[(10, 2, 7), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) */
}

def @func_6107() -> Tensor[(15, 11, 6), int8] {
  @func_6105() /* ty=Tensor[(15, 11, 6), int8] */
}

def @func_7353(%var_7351: Tensor[(30), int32], %var_7352: Tensor[(384), float32]) -> (Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32], Tensor[(15, 11, 6), float32], Tensor[(90), int32], Tensor[(16, 8, 3), bool], Tensor[(384), float32], Tensor[(15, 11, 6), int8]) {
  %590 = fn (%var_7307: Tensor[(30), int32], %var_7340: Tensor[(384), float32]) -> (Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32], Tensor[(15, 11, 6), float32], Tensor[(90), int32], Tensor[(16, 8, 3), bool], Tensor[(384), float32], Tensor[(15, 11, 6), int8]) {
    %573 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %574 = cast(%var_7307, dtype="int32") /* ty=Tensor[(30), int32] */;
    %575 = reshape(%573, newshape=[]) /* ty=int32 */;
    %576 = reshape(%574, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int32] */;
    %577 = @func_4484() /* ty=Tensor[(15, 11, 6), int32] */;
    %578 = cast(%577, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
    %579 = @func_5267() /* ty=(Tensor[(90), int32], Tensor[(90), int32]) */;
    %580 = cast(%var_7340, dtype="float32") /* ty=Tensor[(384), float32] */;
    %581 = cast(%var_7340, dtype="float32") /* ty=Tensor[(384), float32] */;
    %582 = reshape(%580, newshape=[16, 8, 3]) /* ty=Tensor[(16, 8, 3), float32] */;
    %583 = reshape(%581, newshape=[16, 8, 3]) /* ty=Tensor[(16, 8, 3), float32] */;
    %584 = @func_5485(%582, %583) /* ty=(Tensor[(16, 8, 3), bool], Tensor[(15, 11, 6), float64]) */;
    %585 = @func_1360(%575, %576) /* ty=Tensor[(1, 10, 3), bool] */;
    %586 = erf(%578) /* ty=Tensor[(15, 11, 6), float32] */;
    %587 = %579.1;
    %588 = %584.0;
    %589 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
    (%585, -2 /* ty=int32 */, %var_7307, %586, %587, %588, %var_7340, %589)
  };
  %590(%var_7351, %var_7352) /* ty=(Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32], Tensor[(15, 11, 6), float32], Tensor[(90), int32], Tensor[(16, 8, 3), bool], Tensor[(384), float32], Tensor[(15, 11, 6), int8]) */
}

def @func_498(%var_485: Tensor[(6, 13, 15), uint8]) -> (Tensor[(6, 13, 15), float64], Tensor[(2, 15, 3), int32]) {
  %591 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 1, 15), uint8] */, dtype="bool") /* ty=Tensor[(6, 1, 15), bool] */;
  %592 = cast(%var_485, dtype="bool") /* ty=Tensor[(6, 13, 15), bool] */;
  %593 = less_equal(%591, %592) /* ty=Tensor[(6, 13, 15), bool] */;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(6, 13, 15), float64] */;
  %595 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 1, 15), uint8] */, dtype="int32") /* ty=Tensor[(6, 1, 15), int32] */;
  %596 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 1, 15), uint8] */, dtype="int32") /* ty=Tensor[(6, 1, 15), int32] */;
  %597 = reshape(%595, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %598 = reshape(%596, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
  %599 = acosh(%594) /* ty=Tensor[(6, 13, 15), float64] */;
  %600 = @func_128(%597, %598) /* ty=Tensor[(2, 15, 3), int32] */;
  (%599, %600)
}

def @func_6338() -> Tensor[(15, 11, 6), int8] {
  %602 = fn () -> Tensor[(15, 11, 6), int8] {
    %601 = @func_4376() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %601.0
  };
  %602() /* ty=Tensor[(15, 11, 6), int8] */
}

def @func_4868(%var_4866: Tensor[(8, 16, 6), float64], %var_4867: Tensor[(8, 16, 6), float64]) -> Tensor[(8, 16, 6), bool] {
  @func_4864(%var_4866, %var_4867) /* ty=Tensor[(8, 16, 6), bool] */
}

def @func_4222() -> Tensor[(15, 11, 6), float64] {
  %609 = fn () -> Tensor[(15, 11, 6), float64] {
    %603 = @func_2793() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) */;
    %604 = %603.0;
    %605 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 11, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
    %607 = cast(%604, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%607, %608) /* ty=Tensor[(15, 11, 6), float64] */
  };
  %609() /* ty=Tensor[(15, 11, 6), float64] */
}

def @func_3038(%var_3006: Tensor[(15, 11, 6), int8]) -> (Tensor[(15, 11, 6), bool], Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8]) {
  %610 = @func_2873() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %611 = %610.0;
  %612 = cast(%var_3006, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %616 = cast(%611, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %617 = @func_2873() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %618 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %619 = less_equal(%614, %615) /* ty=Tensor[(15, 11, 6), bool] */;
  %620 = asin(%616) /* ty=Tensor[(15, 11, 6), float64] */;
  %621 = %617.0;
  %622 = @func_2990() /* ty=Tensor[(15, 11, 6), float32] */;
  %623 = %618.0;
  (%619, %620, %621, %622, %623)
}

def @func_6399() -> (Tensor[(90), int32], Tensor[(2, 15, 3), int32]) {
  %624 = @func_5512() /* ty=(Tensor[(2, 15, 3), int32],) */;
  %625 = @func_3138() /* ty=Tensor[(90), int32] */;
  %626 = %624.0;
  (%625, %626)
}

def @func_3964() -> (Tensor[(15, 11, 6), float64], Tensor[(90), int32]) {
  %627 = @func_2990() /* ty=Tensor[(15, 11, 6), float32] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
  %629 = @func_3636() /* ty=(Tensor[(90), int32],) */;
  %630 = sin(%628) /* ty=Tensor[(15, 11, 6), float64] */;
  %631 = %629.0;
  (%630, %631)
}

def @func_6490(%var_6489: Tensor[(12, 50), float32]) -> (Tensor[(15, 11, 6), float64], Tensor[(10, 10, 6), bool], Tensor[(12, 50), float32]) {
  %640 = fn (%var_6474: Tensor[(12, 50), float32]) -> (Tensor[(15, 11, 6), float64], Tensor[(10, 10, 6), bool], Tensor[(12, 50), float32]) {
    %632 = @func_3508() /* ty=(Tensor[(15, 11, 6), float64],) */;
    %633 = cast(%var_6474, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
    %634 = cast(%var_6474, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
    %635 = reshape(%633, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), float32] */;
    %636 = reshape(%634, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), float32] */;
    %637 = @func_4038(%635, %636) /* ty=(Tensor[(10, 10, 6), bool], Tensor[(15, 11, 6), int8]) */;
    %638 = %632.0;
    %639 = %637.0;
    (%638, %639, %var_6474)
  };
  %640(%var_6489) /* ty=(Tensor[(15, 11, 6), float64], Tensor[(10, 10, 6), bool], Tensor[(12, 50), float32]) */
}

def @func_5269() -> (Tensor[(90), int32], Tensor[(90), int32]) {
  @func_5267() /* ty=(Tensor[(90), int32], Tensor[(90), int32]) */
}

def @func_5873(%var_5854: Tensor[(1, 9, 12), uint8]) -> Tensor[(10, 9, 12), uint8] {
  %641 = cast(%var_5854, dtype="uint8") /* ty=Tensor[(1, 9, 12), uint8] */;
  %642 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 9, 12), uint8] */, dtype="uint8") /* ty=Tensor[(10, 9, 12), uint8] */;
  minimum(%641, %642) /* ty=Tensor[(10, 9, 12), uint8] */
}

def @func_6847() -> (Tensor[(15, 11, 6), float32],) {
  %645 = fn () -> (Tensor[(15, 11, 6), float32],) {
    %643 = @func_5447() /* ty=(Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), float32]) */;
    %644 = %643.1;
    (%644,)
  };
  %645() /* ty=(Tensor[(15, 11, 6), float32],) */
}

def @func_4883(%var_4879: Tensor[(448), float64]) -> (Tensor[(15, 11, 6), float32], Tensor[(7, 8, 8), float64], Tensor[(448), float64]) {
  %646 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %647 = cast(%var_4879, dtype="float64") /* ty=Tensor[(448), float64] */;
  %648 = reshape(%647, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), float64] */;
  %649 = @func_2409(%648) /* ty=(Tensor[(7, 8, 8), float64],) */;
  %650 = %646.0;
  %651 = %649.0;
  (%650, %651, %var_4879)
}

def @func_2990() -> Tensor[(15, 11, 6), float32] {
  %652 = @func_2401() /* ty=Tensor[(15, 11, 6), int8] */;
  %653 = cast(%652, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  cosh(%653) /* ty=Tensor[(15, 11, 6), float32] */
}

def @func_1715(%var_1713: int32, %var_1714: Tensor[(12), float32]) -> (Tensor[(1, 12, 13), int32], Tensor[(2, 15, 3), int32], Tensor[(12), float32]) {
  %663 = fn (%var_1672: int32, %var_1697: Tensor[(12), float32]) -> (Tensor[(1, 12, 13), int32], Tensor[(2, 15, 3), int32], Tensor[(12), float32]) {
    %654 = cast(%var_1672, dtype="int32") /* ty=int32 */;
    %655 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 12, 13), int32] */, dtype="int32") /* ty=Tensor[(1, 12, 13), int32] */;
    %656 = cast(%var_1697, dtype="float32") /* ty=Tensor[(12), float32] */;
    %657 = minimum(%654, %655) /* ty=Tensor[(1, 12, 13), int32] */;
    %658 = cast(%657, dtype="float32") /* ty=Tensor[(1, 12, 13), float32] */;
    %659 = reshape(%656, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), float32] */;
    %660 = reshape(%658, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float32] */;
    %661 = @func_991(%659, %660) /* ty=(Tensor[(6, 2, 13), float32], Tensor[(2, 15, 3), int32], Tensor[(5, 234), uint8], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(2, 15, 3), int32]) */;
    %662 = %661.3;
    (%657, %662, %var_1697)
  };
  %663(%var_1713, %var_1714) /* ty=(Tensor[(1, 12, 13), int32], Tensor[(2, 15, 3), int32], Tensor[(12), float32]) */
}

def @func_4278() -> (Tensor[(15, 11, 6), int8], Tensor[(3, 5, 1), bool], Tensor[(15), float32]) {
  @func_4276() /* ty=(Tensor[(15, 11, 6), int8], Tensor[(3, 5, 1), bool], Tensor[(15), float32]) */
}

def @func_5980() -> (Tensor[(15, 11, 6), float64],) {
  %673 = fn () -> (Tensor[(15, 11, 6), float64],) {
    %664 = @func_4344() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %665 = %664.0;
    %666 = cast(%665, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %667 = log2(%666) /* ty=Tensor[(15, 11, 6), float64] */;
    %668 = cast(%665, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%667, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %672 = divide(%670, %671) /* ty=Tensor[(15, 11, 6), float64] */;
    (%672,)
  };
  %673() /* ty=(Tensor[(15, 11, 6), float64],) */
}

def @func_2646() -> Tensor[(15, 11, 6), int8] {
  %675 = fn () -> Tensor[(15, 11, 6), int8] {
    %674 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %674.0
  };
  %675() /* ty=Tensor[(15, 11, 6), int8] */
}

def @func_3636() -> (Tensor[(90), int32],) {
  %676 = @func_3069() /* ty=(Tensor[(90), int32],) */;
  %677 = %676.0;
  (%677,)
}

def @func_5234(%var_5232: Tensor[(3, 16, 15), uint32], %var_5233: Tensor[(3, 16, 15), uint32]) -> (Tensor[(3, 16, 15), bool], Tensor[(90), int32], Tensor[(3, 16, 15), bool], Tensor[(3, 16, 15), float64], Tensor[(15, 11, 6), float64], Tensor[(7, 8, 8), float64], Tensor[(448), float64], Tensor[(15, 11, 6), float32], Tensor[(3, 16, 15), float64]) {
  @func_5230(%var_5232, %var_5233) /* ty=(Tensor[(3, 16, 15), bool], Tensor[(90), int32], Tensor[(3, 16, 15), bool], Tensor[(3, 16, 15), float64], Tensor[(15, 11, 6), float64], Tensor[(7, 8, 8), float64], Tensor[(448), float64], Tensor[(15, 11, 6), float32], Tensor[(3, 16, 15), float64]) */
}

def @func_5680(%var_5590: Tensor[(1, 4, 11), uint16], %var_5591: Tensor[(4, 4, 11), uint16], %var_5598: Tensor[(390, 3), uint8], %var_5611: Tensor[(600), float32], %var_5629: Tensor[(180), float64]) -> (Tensor[(4, 4, 11), uint16], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8], Tensor[(390, 3), uint8], Tensor[(15, 11, 6), int8], Tensor[(600), float32], Tensor[(90), int32], Tensor[(4, 4, 11), bool], Tensor[(15, 11, 6), float32], Tensor[(180), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), bool], Tensor[(4, 4, 11), float64], Tensor[(4, 4, 11), float32]) {
  %678 = cast(%var_5590, dtype="uint16") /* ty=Tensor[(1, 4, 11), uint16] */;
  %679 = cast(%var_5591, dtype="uint16") /* ty=Tensor[(4, 4, 11), uint16] */;
  %680 = @func_4979() /* ty=(Tensor[(8, 1, 7), float64], Tensor[(15, 11, 6), float32]) */;
  %681 = cast(%var_5598, dtype="uint8") /* ty=Tensor[(390, 3), uint8] */;
  %682 = cast(%var_5598, dtype="uint8") /* ty=Tensor[(390, 3), uint8] */;
  %683 = reshape(%681, newshape=[1170]) /* ty=Tensor[(1170), uint8] */;
  %684 = reshape(%682, newshape=[1170]) /* ty=Tensor[(1170), uint8] */;
  %685 = @func_3622(%683, %684) /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(1170), bool], Tensor[(2, 15, 3), int32], Tensor[(120), int32]) */;
  %686 = cast(%var_5611, dtype="float32") /* ty=Tensor[(600), float32] */;
  %687 = cast(%var_5611, dtype="float32") /* ty=Tensor[(600), float32] */;
  %688 = reshape(%686, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), float32] */;
  %689 = reshape(%687, newshape=[10, 10, 6]) /* ty=Tensor[(10, 10, 6), float32] */;
  %690 = @func_4038(%688, %689) /* ty=(Tensor[(10, 10, 6), bool], Tensor[(15, 11, 6), int8]) */;
  %691 = @func_3964() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(90), int32]) */;
  %692 = cast(%var_5591, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %693 = tan(%692) /* ty=Tensor[(4, 4, 11), float64] */;
  %694 = cast(%693, dtype="bool") /* ty=Tensor[(4, 4, 11), bool] */;
  %695 = cast(%var_5590, dtype="bool") /* ty=Tensor[(1, 4, 11), bool] */;
  %696 = cast(%var_5629, dtype="float64") /* ty=Tensor[(180), float64] */;
  %697 = reshape(%696, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), float64] */;
  %698 = @func_4156(%697) /* ty=(Tensor[(15, 11, 6), float32], Tensor[(3, 6, 10), float32], Tensor[(6, 6, 5), float32], Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) */;
  %699 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %700 = %685.1;
  %701 = cast(%700, dtype="int8") /* ty=Tensor[(15, 11, 6), int8] */;
  %702 = reshape(%701, newshape=[15, 11, 6]) /* ty=Tensor[(15, 11, 6), int8] */;
  %703 = @func_3038(%702) /* ty=(Tensor[(15, 11, 6), bool], Tensor[(15, 11, 6), float64], Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int8]) */;
  %704 = cast(%var_5591, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %705 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%693, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %708 = cast(%var_5590, dtype="float32") /* ty=Tensor[(1, 4, 11), float32] */;
  %709 = cast(%693, dtype="float32") /* ty=Tensor[(4, 4, 11), float32] */;
  %710 = bitwise_or(%678, %679) /* ty=Tensor[(4, 4, 11), uint16] */;
  %711 = %680.1;
  %712 = %690.1;
  %713 = %691.1;
  %714 = logical_or(%694, %695) /* ty=Tensor[(4, 4, 11), bool] */;
  %715 = %698.0;
  %716 = %699.0;
  %717 = %703.0;
  %718 = floor_mod(%706, %707) /* ty=Tensor[(4, 4, 11), float64] */;
  %719 = subtract(%708, %709) /* ty=Tensor[(4, 4, 11), float32] */;
  (%710, %711, %700, %var_5598, %712, %var_5611, %713, %714, %715, %var_5629, %716, %717, %718, %719)
}

def @func_5919() -> (Tensor[(90), int32], Tensor[(15, 11, 6), float32]) {
  %723 = fn () -> (Tensor[(90), int32], Tensor[(15, 11, 6), float32]) {
    %720 = @func_4614() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %721 = @func_5808() /* ty=Tensor[(90), int32] */;
    %722 = %720.0;
    (%721, %722)
  };
  %723() /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), float32]) */
}

def @func_3626(%var_3624: Tensor[(1170), uint8], %var_3625: Tensor[(1170), uint8]) -> (Tensor[(90), int32], Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(1170), bool], Tensor[(2, 15, 3), int32], Tensor[(120), int32]) {
  @func_3622(%var_3624, %var_3625) /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(1170), bool], Tensor[(2, 15, 3), int32], Tensor[(120), int32]) */
}

def @func_4737() -> (Tensor[(15, 11, 6), float64],) {
  %724 = @func_4221() /* ty=Tensor[(15, 11, 6), float64] */;
  (%724,)
}

def @func_6105() -> Tensor[(15, 11, 6), int8] {
  %725 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %725.0
}

def @func_2401() -> Tensor[(15, 11, 6), int8] {
  %726 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 11, 6), int8] */, dtype="int8") /* ty=Tensor[(15, 11, 6), int8] */;
  %727 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(15, 11, 6), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 11, 6), int8] */, dtype="int8") /* ty=Tensor[(15, 11, 6), int8] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%728, %729) /* ty=Tensor[(15, 11, 6), int8] */
}

def @func_3622(%var_3604: Tensor[(1170), uint8], %var_3611: Tensor[(1170), uint8]) -> (Tensor[(90), int32], Tensor[(15, 11, 6), int8], Tensor[(2, 15, 3), int32], Tensor[(1170), bool], Tensor[(2, 15, 3), int32], Tensor[(120), int32]) {
  %730 = @func_3069() /* ty=(Tensor[(90), int32],) */;
  %731 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
  %732 = cast(%var_3604, dtype="uint8") /* ty=Tensor[(1170), uint8] */;
  %733 = reshape(%732, newshape=[6, 13, 15]) /* ty=Tensor[(6, 13, 15), uint8] */;
  %734 = @func_498(%733) /* ty=(Tensor[(6, 13, 15), float64], Tensor[(2, 15, 3), int32]) */;
  %735 = cast(%var_3611, dtype="bool") /* ty=Tensor[(1170), bool] */;
  %736 = shape_of(%var_3604, dtype="int32") /* ty=Tensor[(1), int32] */;
  %737 = cast(%var_3604, dtype="bool") /* ty=Tensor[(1170), bool] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?), bool] */;
  %739 = cast(meta[relay.Constant][32] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %740 = cast(meta[relay.Constant][32] /* ty=Tensor[(120), int32] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %741 = %730.0;
  %742 = cast(%741, dtype="int32") /* ty=Tensor[(90), int32] */;
  %743 = cast(meta[relay.Constant][32] /* ty=Tensor[(120), int32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %744 = reshape(%739, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), int32] */;
  %745 = reshape(%740, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), int32] */;
  %746 = reshape(%742, newshape=[90]) /* ty=Tensor[(90), int32] */;
  %747 = reshape(%743, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), float32] */;
  %748 = @func_2571(%744, %745, %746, %747) /* ty=(Tensor[(10, 4, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(10, 4, 3), float32], Tensor[(10, 4, 3), uint8], Tensor[(2, 15, 3), int32], int32, Tensor[(12), float32]) */;
  %749 = %731.0;
  %750 = %734.1;
  %751 = less(%737, %738) /* ty=Tensor[(1170), bool] */;
  %752 = %748.5;
  (%741, %749, %750, %751, %752, meta[relay.Constant][32] /* ty=Tensor[(120), int32] */)
}

def @func_3509() -> (Tensor[(15, 11, 6), float64],) {
  %763 = fn () -> (Tensor[(15, 11, 6), float64],) {
    %753 = @func_2460() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %754 = %753.0;
    %755 = cast(%754, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
    %756 = acosh(%755) /* ty=Tensor[(15, 11, 6), float32] */;
    %757 = cast(%756, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %758 = asinh(%757) /* ty=Tensor[(15, 11, 6), float64] */;
    %759 = cast(%758, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %760 = log10(%759) /* ty=Tensor[(15, 11, 6), float64] */;
    %761 = cast(%760, dtype="float64") /* ty=Tensor[(15, 11, 6), float64] */;
    %762 = rsqrt(%761) /* ty=Tensor[(15, 11, 6), float64] */;
    (%762,)
  };
  %763() /* ty=(Tensor[(15, 11, 6), float64],) */
}

def @func_6371(%var_6370: Tensor[(32, 8), uint8]) -> (Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), bool], Tensor[(32, 8), uint8], Tensor[(15, 11, 6), int8], Tensor[(90), int32]) {
  %776 = fn (%var_6359: Tensor[(32, 8), uint8]) -> (Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), bool], Tensor[(32, 8), uint8], Tensor[(15, 11, 6), int8], Tensor[(90), int32]) {
    %764 = @func_2692() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %765 = cast(%var_6359, dtype="uint8") /* ty=Tensor[(32, 8), uint8] */;
    %766 = cast(%var_6359, dtype="uint8") /* ty=Tensor[(32, 8), uint8] */;
    %767 = reshape(%765, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), uint8] */;
    %768 = reshape(%766, newshape=[2, 16, 8]) /* ty=Tensor[(2, 16, 8), uint8] */;
    %769 = @func_3304(%767, %768) /* ty=(Tensor[(2, 16, 8), uint8], Tensor[(15, 11, 6), int8], Tensor[(30), int32], Tensor[(90), int32], Tensor[(528), float32], Tensor[(15, 11, 6), bool], Tensor[(7, 9, 5), float64], Tensor[(315, 1), float64]) */;
    %770 = @func_4344() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %771 = @func_5888() /* ty=(Tensor[(90), int32],) */;
    %772 = %764.0;
    %773 = %769.5;
    %774 = %770.0;
    %775 = %771.0;
    (%772, %773, %var_6359, %774, %775)
  };
  %776(%var_6370) /* ty=(Tensor[(15, 11, 6), int8], Tensor[(15, 11, 6), bool], Tensor[(32, 8), uint8], Tensor[(15, 11, 6), int8], Tensor[(90), int32]) */
}

def @func_6427() -> Tensor[(15, 11, 6), float32] {
  %777 = @func_5016() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %777.0
}

def @func_3966() -> (Tensor[(15, 11, 6), float64], Tensor[(90), int32]) {
  @func_3964() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(90), int32]) */
}

def @func_4505() -> (Tensor[(15, 11, 6), float32],) {
  @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */
}

def @func_4979() -> (Tensor[(8, 1, 7), float64], Tensor[(15, 11, 6), float32]) {
  %778 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 1, 7), float64] */, dtype="float64") /* ty=Tensor[(8, 1, 7), float64] */;
  %779 = @func_4614() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %780 = cos(%778) /* ty=Tensor[(8, 1, 7), float64] */;
  %781 = %779.0;
  (%780, %781)
}

def @func_1314(%var_1312: Tensor[(10, 2, 1), float32], %var_1313: Tensor[(90, 1), int32]) -> (Tensor[(10, 2, 13), float64], Tensor[(2, 15, 3), int32], Tensor[(90, 1), int32]) {
  %795 = fn (%var_1285: Tensor[(10, 2, 1), float32], %var_1307: Tensor[(90, 1), int32]) -> (Tensor[(10, 2, 13), float64], Tensor[(2, 15, 3), int32], Tensor[(90, 1), int32]) {
    %782 = cast(%var_1285, dtype="float32") /* ty=Tensor[(10, 2, 1), float32] */;
    %783 = erf(%782) /* ty=Tensor[(10, 2, 1), float32] */;
    %784 = cast(%783, dtype="float64") /* ty=Tensor[(10, 2, 1), float64] */;
    %785 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 2, 13), float32] */, dtype="float64") /* ty=Tensor[(10, 2, 13), float64] */;
    %786 = mod(%784, %785) /* ty=Tensor[(10, 2, 13), float64] */;
    %787 = cast(%783, dtype="float64") /* ty=Tensor[(10, 2, 1), float64] */;
    %788 = cast(%786, dtype="float64") /* ty=Tensor[(10, 2, 13), float64] */;
    %789 = cast(%var_1307, dtype="int32") /* ty=Tensor[(90, 1), int32] */;
    %790 = cast(%var_1307, dtype="int32") /* ty=Tensor[(90, 1), int32] */;
    %791 = reshape(%789, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %792 = reshape(%790, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %793 = maximum(%787, %788) /* ty=Tensor[(10, 2, 13), float64] */;
    %794 = @func_128(%791, %792) /* ty=Tensor[(2, 15, 3), int32] */;
    (%793, %794, %var_1307)
  };
  %795(%var_1312, %var_1313) /* ty=(Tensor[(10, 2, 13), float64], Tensor[(2, 15, 3), int32], Tensor[(90, 1), int32]) */
}

def @func_2824() -> (Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) {
  %796 = @func_2793() /* ty=(Tensor[(15, 11, 6), float64], Tensor[(2, 15, 3), int32], Tensor[(90), int32]) */;
  %797 = %796.1;
  %798 = @func_2645() /* ty=Tensor[(15, 11, 6), int8] */;
  (%797, %798)
}

def @func_3914(%var_3913: Tensor[(10, 15, 12), float64]) -> (Tensor[(10, 15, 12), float64],) {
  %802 = fn (%var_3905: Tensor[(10, 15, 12), float64]) -> (Tensor[(10, 15, 12), float64],) {
    %799 = cast(-3.93252f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %800 = cast(%var_3905, dtype="float64") /* ty=Tensor[(10, 15, 12), float64] */;
    %801 = mod(%799, %800) /* ty=Tensor[(10, 15, 12), float64] */;
    (%801,)
  };
  %802(%var_3913) /* ty=(Tensor[(10, 15, 12), float64],) */
}

def @func_5369(%var_5368: Tensor[(16, 12, 3), bool]) -> (Tensor[(15, 11, 6), float32], Tensor[(16, 12, 3), float64], Tensor[(16, 12, 3), int32]) {
  %824 = fn (%var_5347: Tensor[(16, 12, 3), bool]) -> (Tensor[(15, 11, 6), float32], Tensor[(16, 12, 3), float64], Tensor[(16, 12, 3), int32]) {
    %803 = @func_5016() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %804 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 12, 3), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
    %805 = acosh(%804) /* ty=Tensor[(16, 12, 3), float32] */;
    %806 = cast(%805, dtype="float64") /* ty=Tensor[(16, 12, 3), float64] */;
    %807 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 12, 3), float32] */, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
    %808 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
    %809 = cast(%805, dtype="bool") /* ty=Tensor[(16, 12, 3), bool] */;
    %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %811 = logical_or(%809, %810) /* ty=Tensor[(16, 12, 3), bool] */;
    %812 = cast(%var_5347, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
    %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
    %814 = cast(%811, dtype="float32") /* ty=Tensor[(16, 12, 3), float32] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %816 = floor_mod(%814, %815) /* ty=Tensor[(16, 12, 3), float32] */;
    %817 = cast(%816, dtype="int32") /* ty=Tensor[(16, 12, 3), int32] */;
    %818 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(16, 12, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %819 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 12, 3), float32] */, dtype="int32") /* ty=Tensor[(16, 12, 3), int32] */;
    %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %821 = %803.0;
    %822 = log2(%806) /* ty=Tensor[(16, 12, 3), float64] */;
    %823 = multiply(%819, %820) /* ty=Tensor[(16, 12, 3), int32] */;
    (%821, %822, %823)
  };
  %824(%var_5368) /* ty=(Tensor[(15, 11, 6), float32], Tensor[(16, 12, 3), float64], Tensor[(16, 12, 3), int32]) */
}

def @func_4503() -> (Tensor[(15, 11, 6), float32],) {
  %825 = @func_2990() /* ty=Tensor[(15, 11, 6), float32] */;
  (%825,)
}

def @func_3999(%var_3998: int32) -> (Tensor[(15, 11, 6), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) {
  %833 = fn (%var_3994: int32) -> (Tensor[(15, 11, 6), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) {
    %826 = @func_3508() /* ty=(Tensor[(15, 11, 6), float64],) */;
    %827 = cast(%var_3994, dtype="int32") /* ty=int32 */;
    %828 = cast(meta[relay.Constant][37] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
    %829 = reshape(%827, newshape=[]) /* ty=int32 */;
    %830 = reshape(%828, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int32] */;
    %831 = %826.0;
    %832 = @func_1360(%829, %830) /* ty=Tensor[(1, 10, 3), bool] */;
    (%831, %832, %var_3994, meta[relay.Constant][37] /* ty=Tensor[(30), int32] */)
  };
  %833(%var_3998) /* ty=(Tensor[(15, 11, 6), float64], Tensor[(1, 10, 3), bool], int32, Tensor[(30), int32]) */
}

def @func_4833() -> (Tensor[(15, 11, 6), float32], Tensor[(90), int32]) {
  %838 = fn () -> (Tensor[(15, 11, 6), float32], Tensor[(90), int32]) {
    %834 = @func_4503() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %835 = @func_3763() /* ty=(Tensor[(90), int32],) */;
    %836 = %834.0;
    %837 = %835.0;
    (%836, %837)
  };
  %838() /* ty=(Tensor[(15, 11, 6), float32], Tensor[(90), int32]) */
}

def @func_5581() -> Tensor[(90), int32] {
  %839 = @func_3069() /* ty=(Tensor[(90), int32],) */;
  %839.0
}

def @func_4767(%var_4751: Tensor[(11, 1, 4), float32]) -> (Tensor[(11, 1, 4), float32], Tensor[(11, 1, 4), float64]) {
  %840 = cast(%var_4751, dtype="float32") /* ty=Tensor[(11, 1, 4), float32] */;
  %841 = cast(%var_4751, dtype="float64") /* ty=Tensor[(11, 1, 4), float64] */;
  %842 = log2(%840) /* ty=Tensor[(11, 1, 4), float32] */;
  %843 = sqrt(%841) /* ty=Tensor[(11, 1, 4), float64] */;
  (%842, %843)
}

def @func_7510() -> (Tensor[(15, 11, 6), float32],) {
  %846 = fn () -> (Tensor[(15, 11, 6), float32],) {
    %844 = @func_5123() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %845 = %844.0;
    (%845,)
  };
  %846() /* ty=(Tensor[(15, 11, 6), float32],) */
}

def @func_6891(%var_6889: Tensor[(1, 8, 15), float32], %var_6890: Tensor[(11, 8, 15), float32]) -> (Tensor[(16, 12, 3), float64], Tensor[(576), bool], Tensor[(15, 11, 6), float32], Tensor[(11, 8, 15), bool]) {
  %858 = fn (%var_6862: Tensor[(1, 8, 15), float32], %var_6880: Tensor[(11, 8, 15), float32]) -> (Tensor[(16, 12, 3), float64], Tensor[(576), bool], Tensor[(15, 11, 6), float32], Tensor[(11, 8, 15), bool]) {
    %847 = cast(meta[relay.Constant][38] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
    %848 = reshape(%847, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), bool] */;
    %849 = @func_5367(%848) /* ty=(Tensor[(15, 11, 6), float32], Tensor[(16, 12, 3), float64], Tensor[(16, 12, 3), int32]) */;
    %850 = @func_4614() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %851 = cast(%var_6862, dtype="float32") /* ty=Tensor[(1, 8, 15), float32] */;
    %852 = sin(%851) /* ty=Tensor[(1, 8, 15), float32] */;
    %853 = cast(%852, dtype="bool") /* ty=Tensor[(1, 8, 15), bool] */;
    %854 = cast(%var_6880, dtype="bool") /* ty=Tensor[(11, 8, 15), bool] */;
    %855 = %849.1;
    %856 = %850.0;
    %857 = equal(%853, %854) /* ty=Tensor[(11, 8, 15), bool] */;
    (%855, meta[relay.Constant][38] /* ty=Tensor[(576), bool] */, %856, %857)
  };
  %858(%var_6889, %var_6890) /* ty=(Tensor[(16, 12, 3), float64], Tensor[(576), bool], Tensor[(15, 11, 6), float32], Tensor[(11, 8, 15), bool]) */
}

def @func_6614() -> Tensor[(15, 11, 6), float64] {
  %859 = fn () -> Tensor[(15, 11, 6), float64] {
    @func_4221() /* ty=Tensor[(15, 11, 6), float64] */
  };
  %859() /* ty=Tensor[(15, 11, 6), float64] */
}

def @func_6744() -> (Tensor[(90), int32], Tensor[(15, 11, 6), int8]) {
  @func_6742() /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), int8]) */
}

def @func_4886(%var_4884: Tensor[(448), float64]) -> (Tensor[(15, 11, 6), float32], Tensor[(7, 8, 8), float64], Tensor[(448), float64]) {
  @func_4883(%var_4884) /* ty=(Tensor[(15, 11, 6), float32], Tensor[(7, 8, 8), float64], Tensor[(448), float64]) */
}

def @func_5513() -> (Tensor[(2, 15, 3), int32],) {
  %862 = fn () -> (Tensor[(2, 15, 3), int32],) {
    %860 = @func_2824() /* ty=(Tensor[(2, 15, 3), int32], Tensor[(15, 11, 6), int8]) */;
    %861 = %860.0;
    (%861,)
  };
  %862() /* ty=(Tensor[(2, 15, 3), int32],) */
}

def @func_4770(%var_4768: Tensor[(11, 1, 4), float32]) -> (Tensor[(11, 1, 4), float32], Tensor[(11, 1, 4), float64]) {
  @func_4767(%var_4768) /* ty=(Tensor[(11, 1, 4), float32], Tensor[(11, 1, 4), float64]) */
}

def @func_1363(%var_1361: int32, %var_1362: Tensor[(1, 10, 3), int32]) -> Tensor[(1, 10, 3), bool] {
  %865 = fn (%var_1343: int32, %var_1344: Tensor[(1, 10, 3), int32]) -> Tensor[(1, 10, 3), bool] {
    %863 = cast(%var_1343, dtype="bool") /* ty=bool */;
    %864 = cast(%var_1344, dtype="bool") /* ty=Tensor[(1, 10, 3), bool] */;
    less(%863, %864) /* ty=Tensor[(1, 10, 3), bool] */
  };
  %865(%var_1361, %var_1362) /* ty=Tensor[(1, 10, 3), bool] */
}

def @func_7972(%var_7969: Tensor[(15, 11, 6), int8], %var_7970: uint64, %var_7971: Tensor[(36, 10), uint64]) -> (Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int32], Tensor[(90), int32], Tensor[(12, 2, 15), bool], uint64, Tensor[(36, 10), uint64]) {
  @func_7967(%var_7969, %var_7970, %var_7971) /* ty=(Tensor[(15, 11, 6), float32], Tensor[(15, 11, 6), int32], Tensor[(90), int32], Tensor[(12, 2, 15), bool], uint64, Tensor[(36, 10), uint64]) */
}

def @func_6742() -> (Tensor[(90), int32], Tensor[(15, 11, 6), int8]) {
  %866 = @func_3763() /* ty=(Tensor[(90), int32],) */;
  %867 = %866.0;
  %868 = @func_6337() /* ty=Tensor[(15, 11, 6), int8] */;
  (%867, %868)
}

def @func_6572() -> (Tensor[(90), int32], Tensor[(15, 11, 6), int8]) {
  %873 = fn () -> (Tensor[(90), int32], Tensor[(15, 11, 6), int8]) {
    %869 = @func_5267() /* ty=(Tensor[(90), int32], Tensor[(90), int32]) */;
    %870 = @func_4376() /* ty=(Tensor[(15, 11, 6), int8],) */;
    %871 = %869.1;
    %872 = %870.0;
    (%871, %872)
  };
  %873() /* ty=(Tensor[(90), int32], Tensor[(15, 11, 6), int8]) */
}

def @func_7892() -> (Tensor[(90), int32],) {
  %876 = fn () -> (Tensor[(90), int32],) {
    %874 = @func_5888() /* ty=(Tensor[(90), int32],) */;
    %875 = %874.0;
    (%875,)
  };
  %876() /* ty=(Tensor[(90), int32],) */
}

def @func_132(%var_130: Tensor[(2, 15, 3), int32], %var_131: Tensor[(2, 15, 3), int32]) -> Tensor[(2, 15, 3), int32] {
  @func_128(%var_130, %var_131) /* ty=Tensor[(2, 15, 3), int32] */
}

def @func_2576(%var_2572: Tensor[(10, 4, 3), int32], %var_2573: Tensor[(10, 4, 3), int32], %var_2574: Tensor[(90), int32], %var_2575: Tensor[(10, 4, 3), float32]) -> (Tensor[(10, 4, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(10, 4, 3), float32], Tensor[(10, 4, 3), uint8], Tensor[(2, 15, 3), int32], int32, Tensor[(12), float32]) {
  %910 = fn (%var_2502: Tensor[(10, 4, 3), int32], %var_2503: Tensor[(10, 4, 3), int32], %var_2526: Tensor[(90), int32], %var_2529: Tensor[(10, 4, 3), float32]) -> (Tensor[(10, 4, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(10, 4, 3), float32], Tensor[(10, 4, 3), uint8], Tensor[(2, 15, 3), int32], int32, Tensor[(12), float32]) {
    %877 = cast(%var_2503, dtype="int32") /* ty=Tensor[(10, 4, 3), int32] */;
    %878 = shape_of(%var_2502, dtype="int32") /* ty=Tensor[(3), int32] */;
    %879 = cast(%var_2502, dtype="int32") /* ty=Tensor[(10, 4, 3), int32] */;
    %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %881 = cast(%var_2526, dtype="int32") /* ty=Tensor[(90), int32] */;
    %882 = cast(%var_2526, dtype="int32") /* ty=Tensor[(90), int32] */;
    %883 = reshape(%881, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %884 = reshape(%882, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), int32] */;
    %885 = cast(%var_2502, dtype="float32") /* ty=Tensor[(10, 4, 3), float32] */;
    %886 = cosh(%885) /* ty=Tensor[(10, 4, 3), float32] */;
    %887 = cast(%var_2529, dtype="float32") /* ty=Tensor[(10, 4, 3), float32] */;
    %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
    %889 = cast(%886, dtype="float32") /* ty=Tensor[(10, 4, 3), float32] */;
    %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %891 = cast(%var_2503, dtype="bool") /* ty=Tensor[(10, 4, 3), bool] */;
    %892 = shape_of(%var_2502, dtype="int32") /* ty=Tensor[(3), int32] */;
    %893 = cast(%var_2502, dtype="bool") /* ty=Tensor[(10, 4, 3), bool] */;
    %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %895 = less_equal(%893, %894) /* ty=Tensor[(10, 4, 3), bool] */;
    %896 = cast(%895, dtype="uint8") /* ty=Tensor[(10, 4, 3), uint8] */;
    %897 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
    %898 = cast(%886, dtype="uint8") /* ty=Tensor[(10, 4, 3), uint8] */;
    %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %900 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %901 = cast(meta[relay.Constant][39] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
    %902 = reshape(%900, newshape=[]) /* ty=int32 */;
    %903 = reshape(%901, newshape=[12]) /* ty=Tensor[(12), float32] */;
    %904 = @func_1712(%902, %903) /* ty=(Tensor[(1, 12, 13), int32], Tensor[(2, 15, 3), int32], Tensor[(12), float32]) */;
    %905 = bitwise_and(%879, %880) /* ty=Tensor[(10, 4, 3), int32] */;
    %906 = @func_128(%883, %884) /* ty=Tensor[(2, 15, 3), int32] */;
    %907 = subtract(%889, %890) /* ty=Tensor[(10, 4, 3), float32] */;
    %908 = minimum(%898, %899) /* ty=Tensor[(10, 4, 3), uint8] */;
    %909 = %904.1;
    (%905, %906, %var_2526, %907, %908, %909, 8 /* ty=int32 */, meta[relay.Constant][39] /* ty=Tensor[(12), float32] */)
  };
  %910(%var_2572, %var_2573, %var_2574, %var_2575) /* ty=(Tensor[(10, 4, 3), int32], Tensor[(2, 15, 3), int32], Tensor[(90), int32], Tensor[(10, 4, 3), float32], Tensor[(10, 4, 3), uint8], Tensor[(2, 15, 3), int32], int32, Tensor[(12), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen152/build/output.py:2437: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen152/build/output.py", line 2442, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(660) tvmgen_default_fused_erf_cast_cast_reshape_equal_kernel0(signed char* __restrict__ T_equal, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_equal[(((int)threadIdx.x))] = ((signed char)(((bool)erf(placeholder[(((int)threadIdx.x))])) == ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

