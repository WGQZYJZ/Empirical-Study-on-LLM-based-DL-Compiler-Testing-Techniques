==========mod==========
#[version = "0.0.5"]
def @func_3581() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %0 = @func_2637() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %1 = @func_1668() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %2 = %0.2;
  %3 = %1.0;
  (%2, %3)
}

def @func_4557() -> (Tensor[(3, 40), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) {
  %4 = @func_4201() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(3, 40), int64], Tensor[(120), int64], Tensor[(15, 8, 13), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) */;
  %5 = %4.1;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(3, 40), float32] */;
  %7 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %8 = tan(%6) /* ty=Tensor[(3, 40), float32] */;
  %9 = %7.0;
  %10 = @func_539() /* ty=Tensor[(11, 13, 13), float32] */;
  (%8, %9, %10)
}

def @func_5943() -> (Tensor[(11, 13, 13), float32],) {
  %11 = @func_4349() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %12 = %11.0;
  (%12,)
}

def @func_7475() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), float64]) {
  %13 = @func_1496() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(75), uint32] */, dtype="uint32") /* ty=Tensor[(75), uint32] */;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(675), uint32] */, dtype="uint32") /* ty=Tensor[(675), uint32] */;
  %16 = reshape(%14, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), uint32] */;
  %17 = reshape(%15, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint32] */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(675), uint32] */, dtype="float64") /* ty=Tensor[(675), float64] */;
  %19 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
  %20 = %13.0;
  %21 = @func_1270(%16, %17) /* ty=Tensor[(15, 5, 9), uint32] */;
  %22 = sinh(%18) /* ty=Tensor[(675), float64] */;
  (%19, %20, %21, meta[relay.Constant][0] /* ty=Tensor[(75), uint32] */, %22)
}

def @func_1873() -> Tensor[(11, 13, 13), float32] {
  @func_539() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_3636() -> (Tensor[(11, 13, 13), float32],) {
  %23 = @func_2637() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %24 = %23.1;
  (%24,)
}

def @func_4076() -> Tensor[(11, 13, 13), float32] {
  @func_3714() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_242() -> (Tensor[(11, 13, 13), float32],) {
  %25 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  (%25,)
}

def @func_7878() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %26 = @func_4629() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %27 = @func_6698() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32]) */;
  %28 = %26.0;
  %29 = %27.3;
  (%28, %29)
}

def @func_3390(%var_3344: uint64, %var_3345: Tensor[(8, 13, 13), uint64], %var_3362: Tensor[(936), float64], %var_3385: Tensor[(8, 13, 13), bool]) -> (Tensor[(6, 13, 12), int32], Tensor[(936), float64], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(8, 13, 13), uint32]) {
  %30 = cast(%var_3362, dtype="float64") /* ty=Tensor[(936), float64] */;
  %31 = cast(%var_3362, dtype="float64") /* ty=Tensor[(936), float64] */;
  %32 = reshape(%30, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %33 = reshape(%31, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %34 = cast(%var_3344, dtype="bool") /* ty=bool */;
  %35 = cast(%var_3345, dtype="bool") /* ty=Tensor[(8, 13, 13), bool] */;
  %36 = less(%34, %35) /* ty=Tensor[(8, 13, 13), bool] */;
  %37 = cast(%var_3385, dtype="uint32") /* ty=Tensor[(8, 13, 13), uint32] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%36, dtype="uint32") /* ty=Tensor[(8, 13, 13), uint32] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %41 = @func_64(%32, %33) /* ty=Tensor[(6, 13, 12), int32] */;
  %42 = @func_3161() /* ty=Tensor[(11, 13, 13), float32] */;
  %43 = @func_1124() /* ty=Tensor[(936, 1), float64] */;
  %44 = right_shift(%39, %40) /* ty=Tensor[(8, 13, 13), uint32] */;
  (%41, %var_3362, %42, %43, %44)
}

def @func_1969(%var_1967: Tensor[(2, 468), float64]) -> (Tensor[(1560), int64], Tensor[(6, 13, 12), int32], Tensor[(2, 468), float64]) {
  %45 = @func_1772() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) */;
  %46 = cast(%var_1967, dtype="float64") /* ty=Tensor[(2, 468), float64] */;
  %47 = cast(%var_1967, dtype="float64") /* ty=Tensor[(2, 468), float64] */;
  %48 = reshape(%46, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %49 = reshape(%47, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %50 = %45.3;
  %51 = @func_64(%48, %49) /* ty=Tensor[(6, 13, 12), int32] */;
  (%50, %51, %var_1967)
}

def @func_3714() -> Tensor[(11, 13, 13), float32] {
  %52 = @func_3581() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %52.0
}

def @func_2683() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64]) {
  %53 = @func_1487() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %54 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %55 = reshape(%54, newshape=[3, 40]) /* ty=Tensor[(3, 40), int64] */;
  %56 = @func_1709(%55) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(3, 40), int64]) */;
  %57 = %53.0;
  %58 = %56.0;
  (%57, %58, meta[relay.Constant][2] /* ty=Tensor[(120), int64] */)
}

def @func_6222() -> Tensor[(11, 13, 13), float32] {
  %59 = @func_5715() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %59.0
}

def @func_1220() -> (Tensor[(11, 13, 13), float32],) {
  %60 = @func_724() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
  %61 = %60.0;
  (%61,)
}

def @func_1939() -> (Tensor[(11, 13, 13), float32],) {
  %62 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %63 = %62.0;
  (%63,)
}

def @func_2637() -> (Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %64 = @func_724() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
  %65 = %64.1;
  %66 = @func_1236() /* ty=Tensor[(11, 13, 13), float32] */;
  %67 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  (%65, %66, %67)
}

def @main(%var_7947: Tensor[(936), float64]) -> (Tensor[(11, 13, 13), float64], Tensor[(2, 468), bool], Tensor[(2, 468), float64]) {
  %68 = @func_2755() /* ty=(Tensor[(11, 13, 13), float64],) */;
  %69 = cast(%var_7947, dtype="float64") /* ty=Tensor[(936), float64] */;
  %70 = reshape(%69, newshape=[2, 468]) /* ty=Tensor[(2, 468), float64] */;
  %71 = @func_1969(%70) /* ty=(Tensor[(1560), int64], Tensor[(6, 13, 12), int32], Tensor[(2, 468), float64]) */;
  %72 = %71.2;
  %73 = cast(%72, dtype="float64") /* ty=Tensor[(2, 468), float64] */;
  %74 = atan(%73) /* ty=Tensor[(2, 468), float64] */;
  %75 = cast(%var_7947, dtype="bool") /* ty=Tensor[(936), bool] */;
  %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(2), int32] */;
  %77 = cast(%74, dtype="bool") /* ty=Tensor[(2, 468), bool] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %79 = cast(%74, dtype="float64") /* ty=Tensor[(2, 468), float64] */;
  %80 = %68.0;
  %81 = equal(%77, %78) /* ty=Tensor[(2, 468), bool] */;
  %82 = cosh(%79) /* ty=Tensor[(2, 468), float64] */;
  (%80, %81, %82)
}

def @func_4790() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936), int32]) {
  %83 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %84 = cast(meta[relay.Constant][3] /* ty=Tensor[(936), int32] */, dtype="int32") /* ty=Tensor[(936), int32] */;
  %85 = reshape(%84, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), int32] */;
  %86 = @func_1623(%85) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(6, 13, 12), uint32], Tensor[(6, 13, 12), float32]) */;
  %87 = %83.0;
  %88 = %86.2;
  (%87, %88, meta[relay.Constant][3] /* ty=Tensor[(936), int32] */)
}

def @func_298() -> (Tensor[(11, 13, 13), float32],) {
  %89 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  (%89,)
}

def @func_4168() -> Tensor[(11, 13, 13), float32] {
  %90 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %90.0
}

def @func_2847() -> Tensor[(14, 5, 10), float64] {
  @func_2717() /* ty=Tensor[(14, 5, 10), float64] */
}

def @func_5635() -> (Tensor[(1, 120), int64], Tensor[(936), float64], Tensor[(6, 13, 12), float64]) {
  %91 = @func_4420() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1, 120), int64]) */;
  %92 = cast(meta[relay.Constant][4] /* ty=Tensor[(936), float64] */, dtype="float64") /* ty=Tensor[(936), float64] */;
  %93 = cast(meta[relay.Constant][4] /* ty=Tensor[(936), float64] */, dtype="float64") /* ty=Tensor[(936), float64] */;
  %94 = reshape(%92, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %95 = reshape(%93, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %96 = @func_64(%94, %95) /* ty=Tensor[(6, 13, 12), int32] */;
  %97 = @func_5452() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936), float64], Tensor[(6, 13, 12), float64], Tensor[(6, 13, 12), float64]) */;
  %98 = %97.2;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %100 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%96, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %103 = %91.3;
  %104 = floor_mod(%101, %102) /* ty=Tensor[(6, 13, 12), float64] */;
  (%103, meta[relay.Constant][4] /* ty=Tensor[(936), float64] */, %104)
}

def @func_1668() -> (Tensor[(11, 13, 13), float32],) {
  %105 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
  (%105,)
}

def @func_1124() -> Tensor[(936, 1), float64] {
  %106 = @func_724() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
  %106.1
}

def @func_6565(%var_6525: Tensor[(8, 12, 10), int8], %var_6530: Tensor[(8, 12, 10), int8]) -> (Tensor[(8, 12, 10), int8], Tensor[(8, 12, 10), int16], Tensor[(468, 2), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %107 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 12, 10), int8] */, dtype="int8") /* ty=Tensor[(1, 12, 10), int8] */;
  %108 = cast(%var_6525, dtype="int8") /* ty=Tensor[(8, 12, 10), int8] */;
  %109 = cast(%var_6530, dtype="int16") /* ty=Tensor[(8, 12, 10), int16] */;
  %110 = shape_of(%var_6525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%var_6525, dtype="int16") /* ty=Tensor[(8, 12, 10), int16] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %113 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %114 = @func_4947() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) */;
  %115 = right_shift(%107, %108) /* ty=Tensor[(8, 12, 10), int8] */;
  %116 = bitwise_xor(%111, %112) /* ty=Tensor[(8, 12, 10), int16] */;
  %117 = %113.2;
  %118 = @func_6222() /* ty=Tensor[(11, 13, 13), float32] */;
  %119 = %114.0;
  %120 = @func_492() /* ty=Tensor[(11, 13, 13), float32] */;
  (%115, %116, %117, %118, %119, %120)
}

def @func_1270(%var_1245: Tensor[(15, 5, 1), uint32], %var_1246: Tensor[(15, 5, 9), uint32]) -> Tensor[(15, 5, 9), uint32] {
  %121 = cast(%var_1245, dtype="uint32") /* ty=Tensor[(15, 5, 1), uint32] */;
  %122 = cast(%var_1246, dtype="uint32") /* ty=Tensor[(15, 5, 9), uint32] */;
  bitwise_or(%121, %122) /* ty=Tensor[(15, 5, 9), uint32] */
}

def @func_3954(%var_3926: Tensor[(936, 16), float64], %var_3941: Tensor[(75), uint32], %var_3942: Tensor[(675), uint32]) -> (Tensor[(936, 16), uint64], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), uint32], Tensor[(9, 11, ?), float32], Tensor[(1, 99), float32]) {
  %123 = @func_1782() /* ty=(Tensor[(936, 1), float64],) */;
  %124 = %123.0;
  %125 = cast(%124, dtype="uint64") /* ty=Tensor[(936, 1), uint64] */;
  %126 = cast(%var_3926, dtype="uint64") /* ty=Tensor[(936, 16), uint64] */;
  %127 = cast(%var_3941, dtype="uint32") /* ty=Tensor[(75), uint32] */;
  %128 = cast(%var_3942, dtype="uint32") /* ty=Tensor[(675), uint32] */;
  %129 = reshape(%127, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), uint32] */;
  %130 = reshape(%128, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint32] */;
  %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 99), float32] */, dtype="float32") /* ty=Tensor[(1, 99), float32] */;
  %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 99), float32] */, dtype="float32") /* ty=Tensor[(1, 99), float32] */;
  %133 = reshape(%131, newshape=[9, 11, 1]) /* ty=Tensor[(9, 11, 1), float32] */;
  %134 = reshape(%132, newshape=[9, 11, 1]) /* ty=Tensor[(9, 11, 1), float32] */;
  %135 = @func_3829(%133, %134) /* ty=(Tensor[(9, 11, ?), float32],) */;
  %136 = bitwise_or(%125, %126) /* ty=Tensor[(936, 16), uint64] */;
  %137 = @func_1270(%129, %130) /* ty=Tensor[(15, 5, 9), uint32] */;
  %138 = %135.0;
  (%136, %137, %var_3941, %var_3942, %138, meta[relay.Constant][6] /* ty=Tensor[(1, 99), float32] */)
}

def @func_7042() -> Tensor[(11, 13, 13), float32] {
  @func_205() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_2829() -> Tensor[(11, 13, 13), float32] {
  %139 = @func_1487() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %139.0
}

def @func_6492() -> Tensor[(6, 13, 12), uint8] {
  %140 = @func_5635() /* ty=(Tensor[(1, 120), int64], Tensor[(936), float64], Tensor[(6, 13, 12), float64]) */;
  %141 = %140.2;
  %142 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 13, 12), float64] */, dtype="uint8") /* ty=Tensor[(6, 13, 12), uint8] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="uint8") /* ty=Tensor[(6, 13, 12), uint8] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%144, %145) /* ty=Tensor[(6, 13, 12), uint8] */
}

def @func_6056(%var_6052: Tensor[(15, 7, 4), float32]) -> (Tensor[(15, 7, 4), float32],) {
  %146 = cast(%var_6052, dtype="float32") /* ty=Tensor[(15, 7, 4), float32] */;
  %147 = erf(%146) /* ty=Tensor[(15, 7, 4), float32] */;
  (%147,)
}

def @func_4117(%var_4099: Tensor[(60, 2), int64]) -> (Tensor[(10, 1, 7), float64], Tensor[(3, 40), int64], Tensor[(60, 2), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %148 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 1, 7), float64] */, dtype="float64") /* ty=Tensor[(10, 1, 7), float64] */;
  %149 = cast(%var_4099, dtype="int64") /* ty=Tensor[(60, 2), int64] */;
  %150 = cast(meta[relay.Constant][9] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %151 = reshape(%149, newshape=[3, 40]) /* ty=Tensor[(3, 40), int64] */;
  %152 = reshape(%150, newshape=[1560]) /* ty=Tensor[(1560), int64] */;
  %153 = @func_2199(%151, %152) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(3, 40), int64], Tensor[(1560), int64]) */;
  %154 = @func_3017() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(30, 4), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */;
  %155 = acos(%148) /* ty=Tensor[(10, 1, 7), float64] */;
  %156 = %153.2;
  %157 = %154.0;
  %158 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  (%155, %156, %var_4099, meta[relay.Constant][9] /* ty=Tensor[(1560), int64] */, %157, %158)
}

def @func_2755() -> (Tensor[(11, 13, 13), float64],) {
  %159 = @func_1668() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %160 = %159.0;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(11, 13, 13), float64] */;
  %162 = sin(%161) /* ty=Tensor[(11, 13, 13), float64] */;
  (%162,)
}

def @func_3757(%var_3746: Tensor[(120), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64]) {
  %163 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %164 = cast(%var_3746, dtype="int64") /* ty=Tensor[(120), int64] */;
  %165 = cast(meta[relay.Constant][10] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %166 = reshape(%164, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), int64] */;
  %167 = reshape(%165, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int64] */;
  %168 = @func_327(%166, %167) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */;
  %169 = %163.0;
  %170 = %168.1;
  (%169, %170, %var_3746, meta[relay.Constant][10] /* ty=Tensor[(1560), int64] */)
}

def @func_437(%var_416: Tensor[(120), int64], %var_417: Tensor[(6, 260), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(6, 260), int64], Tensor[(11, 13, 13), float32]) {
  %171 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %172 = cast(%var_416, dtype="int64") /* ty=Tensor[(120), int64] */;
  %173 = cast(%var_417, dtype="int64") /* ty=Tensor[(6, 260), int64] */;
  %174 = reshape(%172, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), int64] */;
  %175 = reshape(%173, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int64] */;
  %176 = @func_327(%174, %175) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */;
  %177 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %178 = %171.1;
  %179 = %176.1;
  %180 = %177.0;
  (%178, %179, %var_416, %var_417, %180)
}

def @func_2245() -> (Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) {
  %181 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %182 = @func_724() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
  %183 = %181.0;
  %184 = %182.1;
  (%183, %184)
}

def @func_5131() -> (Tensor[(11, 13, 13), float32],) {
  %185 = @func_2829() /* ty=Tensor[(11, 13, 13), float32] */;
  (%185,)
}

def @func_1346(%var_1328: bool) -> (Tensor[(11, 13, 13), float32], Tensor[(120), int64], bool, Tensor[(6, 20), int64], Tensor[(13, 26), float32]) {
  %186 = cast(%var_1328, dtype="bool") /* ty=bool */;
  %187 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 26), bool] */, dtype="bool") /* ty=Tensor[(13, 26), bool] */;
  %188 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 20), int64] */, dtype="int64") /* ty=Tensor[(6, 20), int64] */;
  %189 = reshape(%186, newshape=[]) /* ty=bool */;
  %190 = reshape(%187, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), bool] */;
  %191 = reshape(%188, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %192 = @func_980(%189, %190, %191) /* ty=(Tensor[(13, 13, 2), bool], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) */;
  %193 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 26), bool] */, dtype="float32") /* ty=Tensor[(13, 26), float32] */;
  %194 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
  %195 = %192.2;
  %196 = exp(%193) /* ty=Tensor[(13, 26), float32] */;
  (%194, %195, %var_1328, meta[relay.Constant][12] /* ty=Tensor[(6, 20), int64] */, %196)
}

def @func_2199(%var_2189: Tensor[(3, 40), int64], %var_2190: Tensor[(1560), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(3, 40), int64], Tensor[(1560), int64]) {
  %197 = @func_1220() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %198 = %197.0;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(11, 13, 13), float32] */;
  %200 = cast(%var_2189, dtype="int64") /* ty=Tensor[(3, 40), int64] */;
  %201 = cast(%var_2190, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %202 = reshape(%200, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), int64] */;
  %203 = reshape(%201, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int64] */;
  %204 = @func_327(%202, %203) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */;
  %205 = sqrt(%199) /* ty=Tensor[(11, 13, 13), float32] */;
  %206 = %204.0;
  (%205, %206, %var_2189, %var_2190)
}

def @func_6284(%var_6243: uint32) -> (Tensor[(?, 7, 5), bool], Tensor[(?, 7, 5), bool]) {
  %207 = cast(%var_6243, dtype="uint32") /* ty=uint32 */;
  %208 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 7, 5), uint32] */, dtype="uint32") /* ty=Tensor[(1, 7, 5), uint32] */;
  %209 = right_shift(%207, %208) /* ty=Tensor[(1, 7, 5), uint32] */;
  %210 = cast(%209, dtype="float32") /* ty=Tensor[(1, 7, 5), float32] */;
  %211 = tan(%210) /* ty=Tensor[(1, 7, 5), float32] */;
  %212 = cast(%209, dtype="bool") /* ty=Tensor[(1, 7, 5), bool] */;
  %213 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%211, dtype="bool") /* ty=Tensor[(1, 7, 5), bool] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %216 = cast(%209, dtype="bool") /* ty=Tensor[(1, 7, 5), bool] */;
  %217 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%211, dtype="bool") /* ty=Tensor[(1, 7, 5), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = greater_equal(%214, %215) /* ty=Tensor[(?, 7, 5), bool] */;
  %221 = less_equal(%218, %219) /* ty=Tensor[(?, 7, 5), bool] */;
  (%220, %221)
}

def @func_7539() -> (bool, Tensor[(11, 13, 13), float32]) {
  %222 = @func_6900() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(13, 16, 3), int8], Tensor[(624), int8], Tensor[(936, 1), float64], Tensor[(120), int64], bool, Tensor[(11, 13, 13), float32]) */;
  %223 = @func_3636() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %224 = %222.5;
  %225 = %223.0;
  (%224, %225)
}

def @func_205() -> Tensor[(11, 13, 13), float32] {
  %226 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %226.0
}

def @func_4713(%var_4681: Tensor[(936, 12), float64]) -> (Tensor[(936, 12), bool], Tensor[(1560), int64], Tensor[(936, 12), float32], Tensor[(936, 1), float64]) {
  %227 = @func_1124() /* ty=Tensor[(936, 1), float64] */;
  %228 = cast(%227, dtype="bool") /* ty=Tensor[(936, 1), bool] */;
  %229 = cast(%var_4681, dtype="bool") /* ty=Tensor[(936, 12), bool] */;
  %230 = @func_3017() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(30, 4), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */;
  %231 = cast(%var_4681, dtype="float32") /* ty=Tensor[(936, 12), float32] */;
  %232 = cast(%227, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
  %233 = greater_equal(%228, %229) /* ty=Tensor[(936, 12), bool] */;
  %234 = %230.4;
  %235 = cos(%231) /* ty=Tensor[(936, 12), float32] */;
  %236 = asin(%232) /* ty=Tensor[(936, 1), float64] */;
  (%233, %234, %235, %236)
}

def @func_492() -> Tensor[(11, 13, 13), float32] {
  %237 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %237.0
}

def @func_4201() -> (Tensor[(11, 13, 13), float32], Tensor[(3, 40), int64], Tensor[(120), int64], Tensor[(15, 8, 13), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) {
  %238 = cast(meta[relay.Constant][14] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %239 = reshape(%238, newshape=[60, 2]) /* ty=Tensor[(60, 2), int64] */;
  %240 = @func_4117(%239) /* ty=(Tensor[(10, 1, 7), float64], Tensor[(3, 40), int64], Tensor[(60, 2), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %241 = %240.1;
  %242 = cast(%241, dtype="int64") /* ty=Tensor[(3, 40), int64] */;
  %243 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 1560), int64] */, dtype="int64") /* ty=Tensor[(1, 1560), int64] */;
  %244 = reshape(%242, newshape=[3, 40]) /* ty=Tensor[(3, 40), int64] */;
  %245 = reshape(%243, newshape=[1560]) /* ty=Tensor[(1560), int64] */;
  %246 = @func_2199(%244, %245) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(3, 40), int64], Tensor[(1560), int64]) */;
  %247 = @func_1496() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %248 = @func_4168() /* ty=Tensor[(11, 13, 13), float32] */;
  %249 = %246.1;
  %250 = %247.0;
  (%248, %241, meta[relay.Constant][14] /* ty=Tensor[(120), int64] */, %249, meta[relay.Constant][15] /* ty=Tensor[(1, 1560), int64] */, %250)
}

def @func_4737() -> Tensor[(468, 2), float64] {
  %251 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %251.2
}

def @func_4349() -> (Tensor[(11, 13, 13), float32],) {
  %252 = @func_1873() /* ty=Tensor[(11, 13, 13), float32] */;
  (%252,)
}

def @func_4328(%var_4251: Tensor[(120), int64], %var_4256: Tensor[(16, 1560), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(16, 1560), bool], Tensor[(1, 1560), float32], Tensor[(75), bool], Tensor[(75), float64]) {
  %253 = @func_2103() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %254 = cast(%var_4251, dtype="int64") /* ty=Tensor[(120), int64] */;
  %255 = reshape(%254, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %256 = @func_1110(%255) /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1, 1560), int64]) */;
  %257 = %256.3;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(1, 1560), float32] */;
  %259 = cast(%var_4256, dtype="float32") /* ty=Tensor[(16, 1560), float32] */;
  %260 = multiply(%258, %259) /* ty=Tensor[(16, 1560), float32] */;
  %261 = cast(%257, dtype="bool") /* ty=Tensor[(1, 1560), bool] */;
  %262 = cast(%260, dtype="bool") /* ty=Tensor[(16, 1560), bool] */;
  %263 = cast(%257, dtype="float32") /* ty=Tensor[(1, 1560), float32] */;
  %264 = cast(meta[relay.Constant][16] /* ty=Tensor[(75), float64] */, dtype="float64") /* ty=Tensor[(75), float64] */;
  %265 = cast(meta[relay.Constant][16] /* ty=Tensor[(75), float64] */, dtype="float64") /* ty=Tensor[(75), float64] */;
  %266 = reshape(%264, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %267 = reshape(%265, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %268 = @func_1408(%266, %267) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(1, 15, 5), float64], Tensor[(75), bool], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64]) */;
  %269 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
  %270 = @func_4076() /* ty=Tensor[(11, 13, 13), float32] */;
  %271 = %253.1;
  %272 = logical_and(%261, %262) /* ty=Tensor[(16, 1560), bool] */;
  %273 = sqrt(%263) /* ty=Tensor[(1, 1560), float32] */;
  %274 = %268.2;
  (%269, %270, %271, %var_4251, %272, %273, %274, meta[relay.Constant][16] /* ty=Tensor[(75), float64] */)
}

def @func_6908() -> (Tensor[(11, 13, 13), float32], Tensor[(8, 8, 1), int32], int32, Tensor[(1, 64), int32]) {
  %275 = @func_3618() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %276 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %277 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 64), int32] */, dtype="int32") /* ty=Tensor[(1, 64), int32] */;
  %278 = reshape(%276, newshape=[]) /* ty=int32 */;
  %279 = reshape(%277, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), int32] */;
  %280 = %275.0;
  %281 = @func_4513(%278, %279) /* ty=Tensor[(8, 8, 1), int32] */;
  (%280, %281, 8 /* ty=int32 */, meta[relay.Constant][17] /* ty=Tensor[(1, 64), int32] */)
}

def @func_3017() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(30, 4), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) {
  %282 = @func_1496() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %283 = %282.1;
  %284 = cast(%283, dtype="float32") /* ty=Tensor[(11, 13, 13), float32] */;
  %285 = @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %286 = cast(meta[relay.Constant][18] /* ty=Tensor[(30, 4), int64] */, dtype="int64") /* ty=Tensor[(30, 4), int64] */;
  %287 = cast(meta[relay.Constant][19] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %288 = reshape(%286, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %289 = reshape(%287, newshape=[6, 260]) /* ty=Tensor[(6, 260), int64] */;
  %290 = @func_437(%288, %289) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(6, 260), int64], Tensor[(11, 13, 13), float32]) */;
  %291 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %292 = asinh(%284) /* ty=Tensor[(11, 13, 13), float32] */;
  %293 = %285.3;
  %294 = %290.4;
  %295 = %291.0;
  (%292, %293, %294, meta[relay.Constant][18] /* ty=Tensor[(30, 4), int64] */, meta[relay.Constant][19] /* ty=Tensor[(1560), int64] */, %295)
}

def @func_4613(%var_4593: Tensor[(7488), float32]) -> (Tensor[(7488), float32], Tensor[(11, 13, 13), uint32]) {
  %296 = @func_3161() /* ty=Tensor[(11, 13, 13), float32] */;
  %297 = cast(%var_4593, dtype="float32") /* ty=Tensor[(7488), float32] */;
  %298 = reshape(%297, newshape=[936, 8]) /* ty=Tensor[(936, 8), float32] */;
  %299 = @func_2151(%298) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 8), uint8], Tensor[(11, 13, 13), float32]) */;
  %300 = %299.0;
  %301 = cast(%300, dtype="uint32") /* ty=Tensor[(11, 13, 13), uint32] */;
  %302 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%296, dtype="uint32") /* ty=Tensor[(11, 13, 13), uint32] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %305 = left_shift(%303, %304) /* ty=Tensor[(11, 13, 13), uint32] */;
  (%var_4593, %305)
}

def @func_724() -> (Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) {
  %306 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %307 = %306.2;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
  %309 = @func_492() /* ty=Tensor[(11, 13, 13), float32] */;
  %310 = rsqrt(%308) /* ty=Tensor[(936, 1), float64] */;
  (%309, %310)
}

def @func_3812(%var_3788: Tensor[(936, 3), float64]) -> (Tensor[(936, 3), bool],) {
  %311 = @func_2245() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
  %312 = %311.1;
  %313 = cast(%312, dtype="int32") /* ty=Tensor[(936, 1), int32] */;
  %314 = cast(%var_3788, dtype="int32") /* ty=Tensor[(936, 3), int32] */;
  %315 = bitwise_or(%313, %314) /* ty=Tensor[(936, 3), int32] */;
  %316 = cast(%var_3788, dtype="uint64") /* ty=Tensor[(936, 3), uint64] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(2), int32] */;
  %318 = cast(%315, dtype="uint64") /* ty=Tensor[(936, 3), uint64] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %320 = maximum(%318, %319) /* ty=Tensor[(936, 3), uint64] */;
  %321 = cast(%315, dtype="bool") /* ty=Tensor[(936, 3), bool] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(2), int32] */;
  %323 = cast(%320, dtype="bool") /* ty=Tensor[(936, 3), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %325 = not_equal(%323, %324) /* ty=Tensor[(936, 3), bool] */;
  (%325,)
}

def @func_3618() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %326 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %327 = @func_2829() /* ty=Tensor[(11, 13, 13), float32] */;
  %328 = %326.0;
  (%327, %328)
}

def @func_3277(%var_3214: Tensor[(75), float64], %var_3218: Tensor[(75), float64], %var_3235: Tensor[(14, 5, 10), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(75), float32], Tensor[(14, 5, 10), uint32]) {
  %329 = @func_2637() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %330 = cast(%var_3214, dtype="float64") /* ty=Tensor[(75), float64] */;
  %331 = cast(%var_3214, dtype="float64") /* ty=Tensor[(75), float64] */;
  %332 = reshape(%330, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %333 = reshape(%331, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %334 = @func_1408(%332, %333) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(1, 15, 5), float64], Tensor[(75), bool], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64]) */;
  %335 = cast(%var_3218, dtype="float32") /* ty=Tensor[(75), float32] */;
  %336 = shape_of(%var_3214, dtype="int32") /* ty=Tensor[(1), int32] */;
  %337 = cast(%var_3214, dtype="float32") /* ty=Tensor[(75), float32] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?), float32] */;
  %339 = @func_2847() /* ty=Tensor[(14, 5, 10), float64] */;
  %340 = cast(%339, dtype="float64") /* ty=Tensor[(14, 5, 10), float64] */;
  %341 = atanh(%340) /* ty=Tensor[(14, 5, 10), float64] */;
  %342 = cast(%var_3235, dtype="bool") /* ty=Tensor[(14, 5, 10), bool] */;
  %343 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%339, dtype="bool") /* ty=Tensor[(14, 5, 10), bool] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %346 = not_equal(%344, %345) /* ty=Tensor[(14, 5, 10), bool] */;
  %347 = cast(%346, dtype="uint32") /* ty=Tensor[(14, 5, 10), uint32] */;
  %348 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%341, dtype="uint32") /* ty=Tensor[(14, 5, 10), uint32] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %351 = %329.1;
  %352 = @func_1124() /* ty=Tensor[(936, 1), float64] */;
  %353 = %334.0;
  %354 = floor_mod(%337, %338) /* ty=Tensor[(75), float32] */;
  %355 = bitwise_xor(%349, %350) /* ty=Tensor[(14, 5, 10), uint32] */;
  (%351, %352, %353, %354, %355)
}

def @func_4947() -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) {
  %356 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %357 = @func_4344() /* ty=(Tensor[(6, 13, 12), float64],) */;
  %358 = %357.0;
  %359 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 13, 12), float64] */, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %363 = %356.0;
  %364 = logical_and(%361, %362) /* ty=Tensor[(6, 13, 12), bool] */;
  (%363, %364)
}

def @func_6117() -> (Tensor[(468, 2), float64], Tensor[(8, 7, 8), float64]) {
  %365 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %366 = @func_5017() /* ty=(Tensor[(8, 7, 8), float32], Tensor[(936, 1), float64]) */;
  %367 = %366.0;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(8, 7, 8), float64] */;
  %369 = %365.2;
  %370 = acosh(%368) /* ty=Tensor[(8, 7, 8), float64] */;
  (%369, %370)
}

def @func_124() -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) {
  %371 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 13, 13), float32] */;
  %372 = cast(meta[relay.Constant][22] /* ty=Tensor[(468, 2), float64] */, dtype="float64") /* ty=Tensor[(468, 2), float64] */;
  %373 = cast(meta[relay.Constant][22] /* ty=Tensor[(468, 2), float64] */, dtype="float64") /* ty=Tensor[(468, 2), float64] */;
  %374 = reshape(%372, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %375 = reshape(%373, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %376 = erf(%371) /* ty=Tensor[(11, 13, 13), float32] */;
  %377 = @func_64(%374, %375) /* ty=Tensor[(6, 13, 12), int32] */;
  (%376, %377, meta[relay.Constant][22] /* ty=Tensor[(468, 2), float64] */)
}

def @func_5183() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %378 = @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %379 = @func_3714() /* ty=Tensor[(11, 13, 13), float32] */;
  %380 = %378.5;
  (%379, %380)
}

def @func_3114(%var_3111: Tensor[(75), uint32], %var_3112: Tensor[(675), uint32]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), uint32]) {
  %381 = cast(%var_3111, dtype="uint32") /* ty=Tensor[(75), uint32] */;
  %382 = cast(%var_3112, dtype="uint32") /* ty=Tensor[(675), uint32] */;
  %383 = reshape(%381, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), uint32] */;
  %384 = reshape(%382, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint32] */;
  %385 = @func_492() /* ty=Tensor[(11, 13, 13), float32] */;
  %386 = @func_539() /* ty=Tensor[(11, 13, 13), float32] */;
  %387 = @func_1270(%383, %384) /* ty=Tensor[(15, 5, 9), uint32] */;
  (%385, %386, %387, %var_3111, %var_3112)
}

def @func_5023() -> (Tensor[(11, 13, 13), float32],) {
  %388 = @func_1541() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %389 = %388.2;
  (%389,)
}

def @func_6402(%var_6342: Tensor[(6, 13, 12), bool], %var_6355: Tensor[(420), float32]) -> (Tensor[(936, 3), bool], Tensor[(2808), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), uint32], Tensor[(936, 1), float64], Tensor[(420), float32], Tensor[(8, 13, 13), uint32], uint64, Tensor[(1352), uint64], Tensor[(15, 7, 4), float32], Tensor[(11, 13, 13), float64]) {
  %390 = cast(meta[relay.Constant][23] /* ty=Tensor[(2808), float64] */, dtype="float64") /* ty=Tensor[(2808), float64] */;
  %391 = reshape(%390, newshape=[936, 3]) /* ty=Tensor[(936, 3), float64] */;
  %392 = @func_3812(%391) /* ty=(Tensor[(936, 3), bool],) */;
  %393 = @func_1772() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) */;
  %394 = @func_4947() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) */;
  %395 = %394.1;
  %396 = cast(%var_6342, dtype="uint32") /* ty=Tensor[(6, 13, 12), uint32] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="uint32") /* ty=Tensor[(6, 13, 12), uint32] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %400 = cast(meta[relay.Constant][24] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %401 = cast(meta[relay.Constant][25] /* ty=Tensor[(1352), uint64] */, dtype="uint64") /* ty=Tensor[(1352), uint64] */;
  %402 = cast(%var_6342, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %403 = cast(meta[relay.Constant][25] /* ty=Tensor[(1352), uint64] */, dtype="bool") /* ty=Tensor[(1352), bool] */;
  %404 = reshape(%400, newshape=[]) /* ty=uint64 */;
  %405 = reshape(%401, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), uint64] */;
  %406 = reshape(%402, newshape=[936]) /* ty=Tensor[(936), float64] */;
  %407 = reshape(%403, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), bool] */;
  %408 = @func_3390(%404, %405, %406, %407) /* ty=(Tensor[(6, 13, 12), int32], Tensor[(936), float64], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(8, 13, 13), uint32]) */;
  %409 = cast(%var_6355, dtype="float32") /* ty=Tensor[(420), float32] */;
  %410 = reshape(%409, newshape=[15, 7, 4]) /* ty=Tensor[(15, 7, 4), float32] */;
  %411 = @func_6056(%410) /* ty=(Tensor[(15, 7, 4), float32],) */;
  %412 = %411.0;
  %413 = cast(%412, dtype="float64") /* ty=Tensor[(15, 7, 4), float64] */;
  %414 = sin(%413) /* ty=Tensor[(15, 7, 4), float64] */;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(15, 7, 4), float32] */;
  %416 = @func_2755() /* ty=(Tensor[(11, 13, 13), float64],) */;
  %417 = %392.0;
  %418 = %393.0;
  %419 = add(%398, %399) /* ty=Tensor[(6, 13, 12), uint32] */;
  %420 = @func_1124() /* ty=Tensor[(936, 1), float64] */;
  %421 = %408.4;
  %422 = log(%415) /* ty=Tensor[(15, 7, 4), float32] */;
  %423 = %416.0;
  (%417, meta[relay.Constant][23] /* ty=Tensor[(2808), float64] */, %418, %419, %420, %var_6355, %421, meta[relay.Constant][24] /* ty=uint64 */, meta[relay.Constant][25] /* ty=Tensor[(1352), uint64] */, %422, %423)
}

def @func_5924(%var_5902: Tensor[(14, 15, 10), int8], %var_5910: Tensor[(1, 75), float64]) -> (Tensor[(14, 15, 10), float32], Tensor[(1, 15, 5), float64], Tensor[(1, 75), float64], Tensor[(6, 13, 12), float64]) {
  %424 = cast(%var_5902, dtype="bool") /* ty=Tensor[(14, 15, 10), bool] */;
  %425 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(14, 15, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 15, 10), int8] */, dtype="bool") /* ty=Tensor[(14, 15, 10), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %428 = less(%426, %427) /* ty=Tensor[(14, 15, 10), bool] */;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(14, 15, 10), float32] */;
  %430 = cast(%var_5910, dtype="float64") /* ty=Tensor[(1, 75), float64] */;
  %431 = reshape(%430, newshape=[1, 15, 5]) /* ty=Tensor[(1, 15, 5), float64] */;
  %432 = @func_5452() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936), float64], Tensor[(6, 13, 12), float64], Tensor[(6, 13, 12), float64]) */;
  %433 = exp(%429) /* ty=Tensor[(14, 15, 10), float32] */;
  %434 = @func_454(%431) /* ty=Tensor[(1, 15, 5), float64] */;
  %435 = %432.3;
  (%433, %434, %var_5910, %435)
}

def @func_7755() -> Tensor[(11, 13, 13), float32] {
  %436 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %436.0
}

def @func_893() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) {
  %437 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %438 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %439 = cast(meta[relay.Constant][27] /* ty=Tensor[(936, 1), float64] */, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
  %440 = cast(meta[relay.Constant][27] /* ty=Tensor[(936, 1), float64] */, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
  %441 = reshape(%439, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %442 = reshape(%440, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %443 = @func_64(%441, %442) /* ty=Tensor[(6, 13, 12), int32] */;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %445 = cosh(%444) /* ty=Tensor[(6, 13, 12), float32] */;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %447 = %437.0;
  %448 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  %449 = %438.1;
  %450 = asin(%446) /* ty=Tensor[(6, 13, 12), float64] */;
  %451 = @func_492() /* ty=Tensor[(11, 13, 13), float32] */;
  (%447, %448, meta[relay.Constant][27] /* ty=Tensor[(936, 1), float64] */, %449, %450, %451)
}

def @func_1060(%var_1053: Tensor[(120), int64]) -> (Tensor[(6, 13, 12), int32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) {
  %452 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %453 = cast(%var_1053, dtype="int64") /* ty=Tensor[(120), int64] */;
  %454 = cast(meta[relay.Constant][28] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %455 = reshape(%453, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), int64] */;
  %456 = reshape(%454, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int64] */;
  %457 = @func_327(%455, %456) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */;
  %458 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %459 = %452.3;
  %460 = %457.0;
  %461 = %458.0;
  (%459, %460, %var_1053, meta[relay.Constant][28] /* ty=Tensor[(1560), int64] */, %461)
}

def @func_2476(%var_2456: Tensor[(13, 16, 3), int8]) -> Tensor[(13, 16, 3), int8] {
  %462 = cast(%var_2456, dtype="int8") /* ty=Tensor[(13, 16, 3), int8] */;
  %463 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(13, 16, 3), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 16, 3), int8] */, dtype="int8") /* ty=Tensor[(13, 16, 3), int8] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%464, %465) /* ty=Tensor[(13, 16, 3), int8] */
}

def @func_1709(%var_1692: Tensor[(3, 40), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(3, 40), int64]) {
  %466 = @func_1487() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %467 = cast(%var_1692, dtype="int64") /* ty=Tensor[(3, 40), int64] */;
  %468 = reshape(%467, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %469 = @func_1060(%468) /* ty=(Tensor[(6, 13, 12), int32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */;
  %470 = %466.0;
  %471 = %469.0;
  (%470, %471, %var_1692)
}

def @func_1772() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) {
  %472 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %473 = cast(meta[relay.Constant][30] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %474 = cast(meta[relay.Constant][31] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %475 = reshape(%473, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %476 = reshape(%474, newshape=[6, 260]) /* ty=Tensor[(6, 260), int64] */;
  %477 = @func_437(%475, %476) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(6, 260), int64], Tensor[(11, 13, 13), float32]) */;
  %478 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 14), float64] */;
  %479 = acos(%478) /* ty=Tensor[(5, 11, 14), float64] */;
  %480 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 14), float64] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%479, dtype="float64") /* ty=Tensor[(5, 11, 14), float64] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %484 = subtract(%482, %483) /* ty=Tensor[(5, 11, 14), float64] */;
  %485 = cast(%479, dtype="int64") /* ty=Tensor[(5, 11, 14), int64] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="int64") /* ty=Tensor[(5, 11, 14), int64] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %489 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 11, 14), float64] */, dtype="bool") /* ty=Tensor[(5, 11, 14), bool] */;
  %490 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%479, dtype="bool") /* ty=Tensor[(5, 11, 14), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %493 = %472.0;
  %494 = %477.1;
  %495 = minimum(%487, %488) /* ty=Tensor[(5, 11, 14), int64] */;
  %496 = less_equal(%491, %492) /* ty=Tensor[(5, 11, 14), bool] */;
  (%493, %494, meta[relay.Constant][30] /* ty=Tensor[(120), int64] */, meta[relay.Constant][31] /* ty=Tensor[(1560), int64] */, %495, %496)
}

def @func_4513(%var_4497: int32, %var_4498: Tensor[(8, 8, 1), int32]) -> Tensor[(8, 8, 1), int32] {
  %497 = cast(%var_4497, dtype="int32") /* ty=int32 */;
  %498 = cast(%var_4498, dtype="int32") /* ty=Tensor[(8, 8, 1), int32] */;
  add(%497, %498) /* ty=Tensor[(8, 8, 1), int32] */
}

def @func_7157(%var_7097: Tensor[(75), float64], %var_7108: Tensor[(6, 13, 12), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(75), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float32], Tensor[(16, 1560), bool], Tensor[(1, 120), int64], Tensor[(11, 13, 13), float32], Tensor[(12, 2080), float32]) {
  %499 = cast(%var_7097, dtype="float64") /* ty=Tensor[(75), float64] */;
  %500 = cast(%var_7097, dtype="float64") /* ty=Tensor[(75), float64] */;
  %501 = reshape(%499, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %502 = reshape(%500, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %503 = @func_1408(%501, %502) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(1, 15, 5), float64], Tensor[(75), bool], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64]) */;
  %504 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %505 = %504.0;
  %506 = cast(%505, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %507 = tan(%506) /* ty=Tensor[(6, 13, 12), float64] */;
  %508 = cast(%var_7108, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %512 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 120), int64] */, dtype="int64") /* ty=Tensor[(1, 120), int64] */;
  %513 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 2080), int64] */, dtype="int64") /* ty=Tensor[(12, 2080), int64] */;
  %514 = reshape(%512, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %515 = reshape(%513, newshape=[16, 1560]) /* ty=Tensor[(16, 1560), int64] */;
  %516 = @func_4328(%514, %515) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(16, 1560), bool], Tensor[(1, 1560), float32], Tensor[(75), bool], Tensor[(75), float64]) */;
  %517 = @func_3581() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %518 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 2080), int64] */, dtype="float32") /* ty=Tensor[(12, 2080), float32] */;
  %519 = sqrt(%518) /* ty=Tensor[(12, 2080), float32] */;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(12, 2080), float64] */;
  %521 = erf(%520) /* ty=Tensor[(12, 2080), float64] */;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(12, 2080), float32] */;
  %523 = %503.0;
  %524 = @func_2829() /* ty=Tensor[(11, 13, 13), float32] */;
  %525 = floor_divide(%510, %511) /* ty=Tensor[(6, 13, 12), float32] */;
  %526 = %516.4;
  %527 = %517.0;
  %528 = sin(%522) /* ty=Tensor[(12, 2080), float32] */;
  (%523, %var_7097, %524, %525, %526, meta[relay.Constant][33] /* ty=Tensor[(1, 120), int64] */, %527, %528)
}

def @func_6698() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32]) {
  %529 = @func_4344() /* ty=(Tensor[(6, 13, 12), float64],) */;
  %530 = %529.0;
  %531 = cast(%530, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %532 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %533 = @func_4999() /* ty=Tensor[(11, 13, 13), float32] */;
  %534 = @func_4437() /* ty=Tensor[(11, 13, 13), float32] */;
  %535 = atan(%531) /* ty=Tensor[(6, 13, 12), float32] */;
  %536 = %532.0;
  (%533, %534, %535, %536)
}

def @func_1155() -> (Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %537 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %538 = %537.3;
  %539 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 13, 12), int32] */, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %543 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %544 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %545 = power(%541, %542) /* ty=Tensor[(6, 13, 12), float32] */;
  %546 = %543.0;
  %547 = %544.0;
  (%545, %546, %547)
}

def @func_1496() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %548 = @func_724() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
  %549 = %548.0;
  %550 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  (%549, %550)
}

def @func_5801() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(468, 2), float64]) {
  %551 = @func_4201() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(3, 40), int64], Tensor[(120), int64], Tensor[(15, 8, 13), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) */;
  %552 = @func_1496() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %553 = @func_4629() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %554 = %551.0;
  %555 = %552.0;
  %556 = %553.0;
  %557 = @func_4737() /* ty=Tensor[(468, 2), float64] */;
  (%554, %555, %556, %557)
}

def @func_454(%var_446: Tensor[(1, 15, 5), float64]) -> Tensor[(1, 15, 5), float64] {
  %558 = cast(0.666966f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %559 = cast(%var_446, dtype="float64") /* ty=Tensor[(1, 15, 5), float64] */;
  add(%558, %559) /* ty=Tensor[(1, 15, 5), float64] */
}

def @func_3829(%var_3817: Tensor[(9, 11, 1), float32], %var_3818: Tensor[(9, 11, 1), float32]) -> (Tensor[(9, 11, ?), float32],) {
  %560 = cast(%var_3818, dtype="float32") /* ty=Tensor[(9, 11, 1), float32] */;
  %561 = shape_of(%var_3817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_3817, dtype="float32") /* ty=Tensor[(9, 11, 1), float32] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %564 = power(%562, %563) /* ty=Tensor[(9, 11, ?), float32] */;
  (%564,)
}

def @func_4344() -> (Tensor[(6, 13, 12), float64],) {
  %565 = @func_2429() /* ty=Tensor[(6, 13, 12), float64] */;
  (%565,)
}

def @func_2103() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %566 = @func_1939() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %567 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %568 = %566.0;
  %569 = %567.1;
  (%568, %569)
}

def @func_1110(%var_1095: Tensor[(120), int64]) -> (Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1, 1560), int64]) {
  %570 = @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %571 = cast(%var_1095, dtype="int64") /* ty=Tensor[(120), int64] */;
  %572 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 1560), int64] */, dtype="int64") /* ty=Tensor[(1, 1560), int64] */;
  %573 = reshape(%571, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %574 = reshape(%572, newshape=[6, 260]) /* ty=Tensor[(6, 260), int64] */;
  %575 = @func_437(%573, %574) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(6, 260), int64], Tensor[(11, 13, 13), float32]) */;
  %576 = %570.4;
  %577 = %575.4;
  (%576, %577, %var_1095, meta[relay.Constant][36] /* ty=Tensor[(1, 1560), int64] */)
}

def @func_5017() -> (Tensor[(8, 7, 8), float32], Tensor[(936, 1), float64]) {
  %578 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 7, 8), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 8), float32] */;
  %579 = cosh(%578) /* ty=Tensor[(8, 7, 8), float32] */;
  %580 = @func_1124() /* ty=Tensor[(936, 1), float64] */;
  (%579, %580)
}

def @func_2717() -> Tensor[(14, 5, 10), float64] {
  %581 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 10), float64] */;
  sin(%581) /* ty=Tensor[(14, 5, 10), float64] */
}

def @func_5743() -> Tensor[(11, 13, 13), float32] {
  %582 = @func_2103() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %582.1
}

def @func_2151(%var_2134: Tensor[(936, 8), float32]) -> (Tensor[(11, 13, 13), float32], Tensor[(936, 8), uint8], Tensor[(11, 13, 13), float32]) {
  %583 = @func_1782() /* ty=(Tensor[(936, 1), float64],) */;
  %584 = %583.0;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(936, 1), float32] */;
  %586 = cast(meta[relay.Constant][39] /* ty=Tensor[(936, 8), float64] */, dtype="float32") /* ty=Tensor[(936, 8), float32] */;
  %587 = minimum(%585, %586) /* ty=Tensor[(936, 8), float32] */;
  %588 = cast(%var_2134, dtype="uint8") /* ty=Tensor[(936, 8), uint8] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(2), int32] */;
  %590 = cast(%587, dtype="uint8") /* ty=Tensor[(936, 8), uint8] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %592 = @func_1849() /* ty=Tensor[(11, 13, 13), float32] */;
  %593 = bitwise_or(%590, %591) /* ty=Tensor[(936, 8), uint8] */;
  %594 = @func_1873() /* ty=Tensor[(11, 13, 13), float32] */;
  (%592, %593, %594)
}

def @func_2350(%var_2342: Tensor[(75), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(75), float64]) {
  %595 = @func_1220() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %596 = @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %597 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %598 = cast(%var_2342, dtype="float64") /* ty=Tensor[(75), float64] */;
  %599 = cast(%var_2342, dtype="float64") /* ty=Tensor[(75), float64] */;
  %600 = reshape(%598, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %601 = reshape(%599, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %602 = @func_1408(%600, %601) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(1, 15, 5), float64], Tensor[(75), bool], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64]) */;
  %603 = %595.0;
  %604 = %596.0;
  %605 = %597.0;
  %606 = %602.0;
  (%603, %604, %605, %606, %var_2342)
}

def @func_539() -> Tensor[(11, 13, 13), float32] {
  %607 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %607.0
}

def @func_3967() -> (Tensor[(11, 13, 13), float32],) {
  %608 = @func_2103() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %609 = %608.0;
  (%609,)
}

def @func_7293(%var_7189: Tensor[(99), float32], %var_7217: Tensor[(99), float32]) -> (Tensor[(120), int64], Tensor[(99), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(9, 11, 11), float32], int32, Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool], Tensor[(11, 13, 13), float32]) {
  %610 = @func_4420() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1, 120), int64]) */;
  %611 = cast(%var_7217, dtype="float32") /* ty=Tensor[(99), float32] */;
  %612 = shape_of(%var_7189, dtype="int32") /* ty=Tensor[(1), int32] */;
  %613 = cast(%var_7189, dtype="float32") /* ty=Tensor[(99), float32] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?), float32] */;
  %615 = @func_1487() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %616 = cast(%var_7189, dtype="float32") /* ty=Tensor[(99), float32] */;
  %617 = cast(%var_7189, dtype="float32") /* ty=Tensor[(99), float32] */;
  %618 = reshape(%616, newshape=[9, 11, 1]) /* ty=Tensor[(9, 11, 1), float32] */;
  %619 = reshape(%617, newshape=[9, 11, 1]) /* ty=Tensor[(9, 11, 1), float32] */;
  %620 = @func_3829(%618, %619) /* ty=(Tensor[(9, 11, ?), float32],) */;
  %621 = %620.0;
  %622 = cast(%621, dtype="bool") /* ty=Tensor[(9, 11, ?), bool] */;
  %623 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 11, 11), float32] */, dtype="bool") /* ty=Tensor[(9, 11, 11), bool] */;
  %624 = greater_equal(%622, %623) /* ty=Tensor[(9, 11, 11), bool] */;
  %625 = cast(%624, dtype="float32") /* ty=Tensor[(9, 11, 11), float32] */;
  %626 = @func_6908() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(8, 8, 1), int32], int32, Tensor[(1, 64), int32]) */;
  %627 = @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %628 = @func_4947() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) */;
  %629 = %610.2;
  %630 = mod(%613, %614) /* ty=Tensor[(99), float32] */;
  %631 = %615.0;
  %632 = @func_492() /* ty=Tensor[(11, 13, 13), float32] */;
  %633 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
  %634 = tan(%625) /* ty=Tensor[(9, 11, 11), float32] */;
  %635 = %626.2;
  %636 = %627.5;
  %637 = %628.1;
  %638 = @func_492() /* ty=Tensor[(11, 13, 13), float32] */;
  (%629, %630, %631, %632, %633, %634, %635, %636, %637, %638)
}

def @func_2939() -> (Tensor[(936, 1), float64],) {
  %639 = @func_2637() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %640 = %639.0;
  (%640,)
}

def @func_5452() -> (Tensor[(11, 13, 13), float32], Tensor[(936), float64], Tensor[(6, 13, 12), float64], Tensor[(6, 13, 12), float64]) {
  %641 = @func_1496() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %642 = cast(meta[relay.Constant][41] /* ty=Tensor[(936), float64] */, dtype="float64") /* ty=Tensor[(936), float64] */;
  %643 = cast(meta[relay.Constant][41] /* ty=Tensor[(936), float64] */, dtype="float64") /* ty=Tensor[(936), float64] */;
  %644 = reshape(%642, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %645 = reshape(%643, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %646 = @func_64(%644, %645) /* ty=Tensor[(6, 13, 12), int32] */;
  %647 = cast(%646, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %648 = @func_4557() /* ty=(Tensor[(3, 40), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %649 = %641.1;
  %650 = sin(%647) /* ty=Tensor[(6, 13, 12), float64] */;
  %651 = %648.1;
  (%649, meta[relay.Constant][41] /* ty=Tensor[(936), float64] */, %650, %651)
}

def @func_1236() -> Tensor[(11, 13, 13), float32] {
  %652 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %652.0
}

def @func_5715() -> (Tensor[(11, 13, 13), float32],) {
  %653 = @func_539() /* ty=Tensor[(11, 13, 13), float32] */;
  (%653,)
}

def @func_6782(%var_6754: Tensor[(11, 13, 13), float32]) -> (Tensor[(11, 13, 13), bool], Tensor[(11, 13, 13), float32]) {
  %654 = @func_4629() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %655 = %654.0;
  %656 = cast(%var_6754, dtype="bool") /* ty=Tensor[(11, 13, 13), bool] */;
  %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%655, dtype="bool") /* ty=Tensor[(11, 13, 13), bool] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %660 = @func_1668() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %661 = logical_or(%658, %659) /* ty=Tensor[(11, 13, 13), bool] */;
  %662 = %660.0;
  (%661, %662)
}

def @func_1310() -> Tensor[(11, 13, 13), float32] {
  %663 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %663.0
}

def @func_3067() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %664 = @func_1772() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) */;
  %665 = @func_1155() /* ty=(Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %666 = %664.1;
  %667 = %665.1;
  %668 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  (%666, %667, %668)
}

def @func_3320(%var_3314: Tensor[(6, 13, 12), int32]) -> (Tensor[(6, 13, 12), uint16],) {
  %669 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %670 = %669.1;
  %671 = cast(%var_3314, dtype="uint16") /* ty=Tensor[(6, 13, 12), uint16] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%670, dtype="uint16") /* ty=Tensor[(6, 13, 12), uint16] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %675 = logical_xor(%673, %674) /* ty=Tensor[(6, 13, 12), uint16] */;
  (%675,)
}

def @func_6434() -> Tensor[(11, 13, 13), float32] {
  %676 = @func_3017() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(30, 4), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */;
  %676.5
}

def @func_1849() -> Tensor[(11, 13, 13), float32] {
  @func_539() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_4999() -> Tensor[(11, 13, 13), float32] {
  %677 = @func_3636() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %677.0
}

def @func_7401(%var_7378: Tensor[(5, 6, 13), float64]) -> (Tensor[(5, 6, 13), int16],) {
  %678 = cast(%var_7378, dtype="float64") /* ty=Tensor[(5, 6, 13), float64] */;
  %679 = log2(%678) /* ty=Tensor[(5, 6, 13), float64] */;
  %680 = cast(%var_7378, dtype="int16") /* ty=Tensor[(5, 6, 13), int16] */;
  %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%679, dtype="int16") /* ty=Tensor[(5, 6, 13), int16] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %684 = multiply(%682, %683) /* ty=Tensor[(5, 6, 13), int16] */;
  (%684,)
}

def @func_7585() -> Tensor[(11, 13, 13), float32] {
  @func_1236() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_7796(%var_7789: Tensor[(3, 7, 5), uint32]) -> (Tensor[(3, 7, 5), bool],) {
  %685 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 7, 5), uint32] */, dtype="bool") /* ty=Tensor[(3, 7, 5), bool] */;
  %686 = shape_of(%var_7789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%var_7789, dtype="bool") /* ty=Tensor[(3, 7, 5), bool] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %689 = greater(%687, %688) /* ty=Tensor[(3, 7, 5), bool] */;
  (%689,)
}

def @func_382() -> (Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) {
  %690 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %691 = %690.1;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %693 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %694 = acos(%692) /* ty=Tensor[(6, 13, 12), float64] */;
  %695 = %693.0;
  (%694, %695)
}

def @func_1408(%var_1378: Tensor[(75), float64], %var_1381: Tensor[(75), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(1, 15, 5), float64], Tensor[(75), bool], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64]) {
  %696 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %697 = cast(%var_1378, dtype="float64") /* ty=Tensor[(75), float64] */;
  %698 = reshape(%697, newshape=[1, 15, 5]) /* ty=Tensor[(1, 15, 5), float64] */;
  %699 = cast(%var_1381, dtype="bool") /* ty=Tensor[(75), bool] */;
  %700 = shape_of(%var_1378, dtype="int32") /* ty=Tensor[(1), int32] */;
  %701 = cast(%var_1378, dtype="bool") /* ty=Tensor[(75), bool] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?), bool] */;
  %703 = @func_1220() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %704 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %705 = %696.0;
  %706 = @func_454(%698) /* ty=Tensor[(1, 15, 5), float64] */;
  %707 = less_equal(%701, %702) /* ty=Tensor[(75), bool] */;
  %708 = %703.0;
  %709 = %704.0;
  (%705, %706, %707, %708, %709)
}

def @func_1782() -> (Tensor[(936, 1), float64],) {
  %710 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %711 = %710.2;
  (%711,)
}

def @func_64(%var_43: Tensor[(6, 13, 12), float64], %var_50: Tensor[(6, 13, 12), float64]) -> Tensor[(6, 13, 12), int32] {
  %712 = cast(%var_43, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %713 = rsqrt(%712) /* ty=Tensor[(6, 13, 12), float64] */;
  %714 = cast(%var_50, dtype="int32") /* ty=Tensor[(6, 13, 12), int32] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="int32") /* ty=Tensor[(6, 13, 12), int32] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  left_shift(%716, %717) /* ty=Tensor[(6, 13, 12), int32] */
}

def @func_807(%var_795: Tensor[(11, 13, 13), float32]) -> Tensor[(11, 13, 13), uint16] {
  %718 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %719 = %718.0;
  %720 = cast(%var_795, dtype="uint16") /* ty=Tensor[(11, 13, 13), uint16] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="uint16") /* ty=Tensor[(11, 13, 13), uint16] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  add(%722, %723) /* ty=Tensor[(11, 13, 13), uint16] */
}

def @func_4983(%var_4976: Tensor[(16, 4, 16), float64]) -> Tensor[(16, 4, 16), float32] {
  %724 = cast(%var_4976, dtype="float64") /* ty=Tensor[(16, 4, 16), float64] */;
  %725 = log10(%724) /* ty=Tensor[(16, 4, 16), float64] */;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(16, 4, 16), float32] */;
  acosh(%726) /* ty=Tensor[(16, 4, 16), float32] */
}

def @func_6203() -> (Tensor[(11, 13, 13), float32],) {
  %727 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %728 = %727.0;
  (%728,)
}

def @func_4876() -> Tensor[(936, 1), float64] {
  %729 = @func_1782() /* ty=(Tensor[(936, 1), float64],) */;
  %730 = %729.0;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
  acos(%731) /* ty=Tensor[(936, 1), float64] */
}

def @func_3465(%var_3438: Tensor[(624), int8], %var_3454: Tensor[(936, 15), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(13, 16, 3), int8], Tensor[(936, 624), bool], Tensor[(936, 15), uint16], Tensor[(13, 16, 3), int8]) {
  %732 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %733 = cast(%var_3438, dtype="int8") /* ty=Tensor[(624), int8] */;
  %734 = reshape(%733, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int8] */;
  %735 = @func_1782() /* ty=(Tensor[(936, 1), float64],) */;
  %736 = %735.0;
  %737 = cast(%var_3438, dtype="bool") /* ty=Tensor[(624), bool] */;
  %738 = cast(%736, dtype="bool") /* ty=Tensor[(936, 1), bool] */;
  %739 = cast(%736, dtype="uint16") /* ty=Tensor[(936, 1), uint16] */;
  %740 = cast(%var_3454, dtype="uint16") /* ty=Tensor[(936, 15), uint16] */;
  %741 = @func_2476(%734) /* ty=Tensor[(13, 16, 3), int8] */;
  %742 = cast(%741, dtype="int8") /* ty=Tensor[(13, 16, 3), int8] */;
  %743 = reshape(%742, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int8] */;
  %744 = %732.1;
  %745 = greater_equal(%737, %738) /* ty=Tensor[(936, 624), bool] */;
  %746 = bitwise_xor(%739, %740) /* ty=Tensor[(936, 15), uint16] */;
  %747 = @func_2476(%743) /* ty=Tensor[(13, 16, 3), int8] */;
  (%744, %741, %745, %746, %747)
}

def @func_635() -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) {
  %748 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %749 = cast(meta[relay.Constant][43] /* ty=Tensor[(936, 1), float64] */, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
  %750 = cast(meta[relay.Constant][43] /* ty=Tensor[(936, 1), float64] */, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
  %751 = reshape(%749, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %752 = reshape(%750, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %753 = @func_64(%751, %752) /* ty=Tensor[(6, 13, 12), int32] */;
  %754 = cast(%753, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %755 = cast(%753, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %756 = reshape(%754, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %757 = reshape(%755, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %758 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %759 = %748.1;
  %760 = @func_64(%756, %757) /* ty=Tensor[(6, 13, 12), int32] */;
  %761 = %758.1;
  (%759, %753, meta[relay.Constant][43] /* ty=Tensor[(936, 1), float64] */, %760, %761)
}

def @func_2429() -> Tensor[(6, 13, 12), float64] {
  %762 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %762.0
}

def @func_1541() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %763 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %764 = @func_1220() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %765 = @func_1300() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %766 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %767 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %768 = %763.0;
  %769 = %764.0;
  %770 = %765.0;
  %771 = %766.0;
  %772 = %767.0;
  (%768, %769, %770, %771, %772)
}

def @func_7660() -> (Tensor[(11, 13, 13), float32],) {
  %773 = @func_2103() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %774 = %773.0;
  (%774,)
}

def @func_2610() -> (Tensor[(11, 13, 13), float32],) {
  %775 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
  (%775,)
}

def @func_1300() -> (Tensor[(11, 13, 13), float32],) {
  %776 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %777 = %776.0;
  (%777,)
}

def @func_7641() -> Tensor[(6, 13, 12), bool] {
  %778 = @func_4947() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) */;
  %778.1
}

def @func_3866() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %779 = @func_3618() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %780 = %779.0;
  %781 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  (%780, %781)
}

def @func_4437() -> Tensor[(11, 13, 13), float32] {
  @func_1873() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_6900() -> (Tensor[(11, 13, 13), float32], Tensor[(13, 16, 3), int8], Tensor[(624), int8], Tensor[(936, 1), float64], Tensor[(120), int64], bool, Tensor[(11, 13, 13), float32]) {
  %782 = @func_6320() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(16, 4, 16), float32], Tensor[(1024), float64]) */;
  %783 = cast(meta[relay.Constant][44] /* ty=Tensor[(624), int8] */, dtype="int8") /* ty=Tensor[(624), int8] */;
  %784 = reshape(%783, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int8] */;
  %785 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %786 = reshape(%785, newshape=[]) /* ty=bool */;
  %787 = @func_1346(%786) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(120), int64], bool, Tensor[(6, 20), int64], Tensor[(13, 26), float32]) */;
  %788 = @func_5801() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(468, 2), float64]) */;
  %789 = %782.1;
  %790 = @func_2476(%784) /* ty=Tensor[(13, 16, 3), int8] */;
  %791 = @func_1124() /* ty=Tensor[(936, 1), float64] */;
  %792 = %787.1;
  %793 = %788.0;
  (%789, %790, meta[relay.Constant][44] /* ty=Tensor[(624), int8] */, %791, %792, False /* ty=bool */, %793)
}

def @func_6414() -> Tensor[(11, 13, 13), float32] {
  %794 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %794.0
}

def @func_5585() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), uint16], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(60, 2), int64], Tensor[(11, 13, 13), float32], Tensor[(936, ?), uint64]) {
  %795 = @func_2637() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %796 = @func_1668() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %797 = @func_2637() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %798 = %797.1;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(11, 13, 13), float32] */;
  %800 = reshape(%799, newshape=[11, 13, 13]) /* ty=Tensor[(11, 13, 13), float32] */;
  %801 = @func_3017() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(30, 4), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */;
  %802 = @func_3967() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %803 = @func_3067() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %804 = cast(meta[relay.Constant][45] /* ty=Tensor[(60, 2), int64] */, dtype="int64") /* ty=Tensor[(60, 2), int64] */;
  %805 = reshape(%804, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %806 = @func_1060(%805) /* ty=(Tensor[(6, 13, 12), int32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */;
  %807 = @func_3581() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %808 = @func_2939() /* ty=(Tensor[(936, 1), float64],) */;
  %809 = %808.0;
  %810 = @func_4344() /* ty=(Tensor[(6, 13, 12), float64],) */;
  %811 = %810.0;
  %812 = cast(%811, dtype="int32") /* ty=Tensor[(6, 13, 12), int32] */;
  %813 = shape_of(%809, dtype="int32") /* ty=Tensor[(2), int32] */;
  %814 = cast(%809, dtype="int32") /* ty=Tensor[(936, 1), int32] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %816 = minimum(%814, %815) /* ty=Tensor[(936, ?), int32] */;
  %817 = cast(%809, dtype="uint64") /* ty=Tensor[(936, 1), uint64] */;
  %818 = shape_of(%816, dtype="int32") /* ty=Tensor[(2), int32] */;
  %819 = cast(%816, dtype="uint64") /* ty=Tensor[(936, ?), uint64] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %821 = %795.2;
  %822 = %796.0;
  %823 = @func_807(%800) /* ty=Tensor[(11, 13, 13), uint16] */;
  %824 = %801.2;
  %825 = %802.0;
  %826 = %803.0;
  %827 = %806.0;
  %828 = %807.0;
  %829 = multiply(%819, %820) /* ty=Tensor[(936, ?), uint64] */;
  (%821, %822, %798, %823, %824, %825, %826, %827, meta[relay.Constant][45] /* ty=Tensor[(60, 2), int64] */, %828, %829)
}

def @func_3161() -> Tensor[(11, 13, 13), float32] {
  %830 = @func_1939() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %830.0
}

def @func_5403() -> (Tensor[(11, 13, 13), float32], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), uint32]) {
  %831 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %832 = cast(meta[relay.Constant][46] /* ty=Tensor[(75), uint32] */, dtype="uint32") /* ty=Tensor[(75), uint32] */;
  %833 = cast(meta[relay.Constant][47] /* ty=Tensor[(675), uint32] */, dtype="uint32") /* ty=Tensor[(675), uint32] */;
  %834 = reshape(%832, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), uint32] */;
  %835 = reshape(%833, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint32] */;
  %836 = %831.0;
  %837 = @func_1270(%834, %835) /* ty=Tensor[(15, 5, 9), uint32] */;
  (%836, %837, meta[relay.Constant][46] /* ty=Tensor[(75), uint32] */, meta[relay.Constant][47] /* ty=Tensor[(675), uint32] */)
}

def @func_5294(%var_5188: Tensor[(13, 10, 4), float32], %var_5200: Tensor[(13, 10, 4), float32], %var_5290: Tensor[(13, 10, 4), float64]) -> (Tensor[(13, 10, 4), uint64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 5), float64], Tensor[(11, 13, 13), float32], Tensor[(1, 120), int64], Tensor[(11, 13, 13), float32], Tensor[(1560), int64], Tensor[(5, 11, 14), bool], Tensor[(11, 13, 13), float32], Tensor[(13, 10, 4), int32]) {
  %838 = cast(%var_5188, dtype="float32") /* ty=Tensor[(13, 10, 4), float32] */;
  %839 = log(%838) /* ty=Tensor[(13, 10, 4), float32] */;
  %840 = cast(%var_5200, dtype="uint64") /* ty=Tensor[(13, 10, 4), uint64] */;
  %841 = shape_of(%839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%839, dtype="uint64") /* ty=Tensor[(13, 10, 4), uint64] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %844 = @func_5078() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(120), int64]) */;
  %845 = cast(meta[relay.Constant][48] /* ty=Tensor[(15, 5), float64] */, dtype="float64") /* ty=Tensor[(15, 5), float64] */;
  %846 = reshape(%845, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %847 = @func_2350(%846) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(75), float64]) */;
  %848 = @func_5183() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %849 = @func_4420() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1, 120), int64]) */;
  %850 = %849.3;
  %851 = cast(%850, dtype="int64") /* ty=Tensor[(1, 120), int64] */;
  %852 = cast(meta[relay.Constant][49] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %853 = reshape(%851, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %854 = reshape(%852, newshape=[6, 260]) /* ty=Tensor[(6, 260), int64] */;
  %855 = @func_437(%853, %854) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(6, 260), int64], Tensor[(11, 13, 13), float32]) */;
  %856 = @func_1772() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) */;
  %857 = %856.4;
  %858 = cast(%857, dtype="float32") /* ty=Tensor[(5, 11, 14), float32] */;
  %859 = sin(%858) /* ty=Tensor[(5, 11, 14), float32] */;
  %860 = cast(%857, dtype="bool") /* ty=Tensor[(5, 11, 14), bool] */;
  %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %862 = cast(%859, dtype="bool") /* ty=Tensor[(5, 11, 14), bool] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %864 = @func_2245() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
  %865 = cast(%var_5188, dtype="float64") /* ty=Tensor[(13, 10, 4), float64] */;
  %866 = exp(%865) /* ty=Tensor[(13, 10, 4), float64] */;
  %867 = cast(%var_5290, dtype="int32") /* ty=Tensor[(13, 10, 4), int32] */;
  %868 = shape_of(%866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %869 = cast(%866, dtype="int32") /* ty=Tensor[(13, 10, 4), int32] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %871 = right_shift(%842, %843) /* ty=Tensor[(13, 10, 4), uint64] */;
  %872 = @func_3161() /* ty=Tensor[(11, 13, 13), float32] */;
  %873 = %844.0;
  %874 = %847.3;
  %875 = %848.1;
  %876 = %855.4;
  %877 = logical_and(%862, %863) /* ty=Tensor[(5, 11, 14), bool] */;
  %878 = %864.0;
  %879 = multiply(%869, %870) /* ty=Tensor[(13, 10, 4), int32] */;
  (%871, %872, %873, %874, meta[relay.Constant][48] /* ty=Tensor[(15, 5), float64] */, %875, %850, %876, meta[relay.Constant][49] /* ty=Tensor[(1560), int64] */, %877, %878, %879)
}

def @func_666() -> (Tensor[(11, 13, 13), float32],) {
  %880 = @func_539() /* ty=Tensor[(11, 13, 13), float32] */;
  (%880,)
}

def @func_4629() -> (Tensor[(11, 13, 13), float32],) {
  %881 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %882 = %881.0;
  (%882,)
}

def @func_7748() -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) {
  %883 = @func_3067() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %884 = @func_4947() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) */;
  %885 = %884.1;
  %886 = cast(%885, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %887 = log2(%886) /* ty=Tensor[(6, 13, 12), float32] */;
  %888 = cast(%887, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %889 = sinh(%888) /* ty=Tensor[(6, 13, 12), float64] */;
  %890 = cast(%889, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
  %891 = shape_of(%887, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(%887, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %894 = %883.1;
  %895 = less(%892, %893) /* ty=Tensor[(6, 13, 12), bool] */;
  (%894, %895)
}

def @func_6320() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(16, 4, 16), float32], Tensor[(1024), float64]) {
  %896 = @func_2103() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %897 = @func_5131() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %898 = cast(meta[relay.Constant][50] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %899 = reshape(%898, newshape=[16, 4, 16]) /* ty=Tensor[(16, 4, 16), float64] */;
  %900 = %896.1;
  %901 = @func_539() /* ty=Tensor[(11, 13, 13), float32] */;
  %902 = %897.0;
  %903 = @func_4983(%899) /* ty=Tensor[(16, 4, 16), float32] */;
  (%900, %901, %902, %903, meta[relay.Constant][50] /* ty=Tensor[(1024), float64] */)
}

def @func_6017() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %904 = @func_2610() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %905 = @func_4076() /* ty=Tensor[(11, 13, 13), float32] */;
  %906 = %904.0;
  (%905, %906)
}

def @func_980(%var_946: bool, %var_947: Tensor[(13, 13, 2), bool], %var_962: Tensor[(120), int64]) -> (Tensor[(13, 13, 2), bool], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) {
  %907 = cast(%var_946, dtype="bool") /* ty=bool */;
  %908 = cast(%var_947, dtype="bool") /* ty=Tensor[(13, 13, 2), bool] */;
  %909 = cast(%var_962, dtype="int64") /* ty=Tensor[(120), int64] */;
  %910 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 1560), int64] */, dtype="int64") /* ty=Tensor[(1, 1560), int64] */;
  %911 = reshape(%909, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), int64] */;
  %912 = reshape(%910, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int64] */;
  %913 = @func_327(%911, %912) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */;
  %914 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %915 = logical_or(%907, %908) /* ty=Tensor[(13, 13, 2), bool] */;
  %916 = %913.1;
  %917 = %914.0;
  (%915, %916, %var_962, meta[relay.Constant][51] /* ty=Tensor[(1, 1560), int64] */, %917)
}

def @func_327(%var_320: Tensor[(15, 8, 1), int64], %var_321: Tensor[(15, 8, 13), int64]) -> (Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) {
  %918 = cast(%var_320, dtype="int64") /* ty=Tensor[(15, 8, 1), int64] */;
  %919 = cast(%var_321, dtype="int64") /* ty=Tensor[(15, 8, 13), int64] */;
  %920 = bitwise_and(%918, %919) /* ty=Tensor[(15, 8, 13), int64] */;
  %921 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  (%920, %921)
}

def @func_1623(%var_1608: Tensor[(6, 13, 12), int32]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(6, 13, 12), uint32], Tensor[(6, 13, 12), float32]) {
  %922 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %923 = @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %924 = cast(meta[relay.Constant][52] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %925 = cast(meta[relay.Constant][53] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %926 = reshape(%924, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), int64] */;
  %927 = reshape(%925, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int64] */;
  %928 = @func_327(%926, %927) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */;
  %929 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %930 = %929.1;
  %931 = cast(%var_1608, dtype="uint32") /* ty=Tensor[(6, 13, 12), uint32] */;
  %932 = shape_of(%930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%930, dtype="uint32") /* ty=Tensor[(6, 13, 12), uint32] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %935 = @func_1155() /* ty=(Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %936 = %922.0;
  %937 = %923.0;
  %938 = @func_1236() /* ty=Tensor[(11, 13, 13), float32] */;
  %939 = %928.0;
  %940 = subtract(%933, %934) /* ty=Tensor[(6, 13, 12), uint32] */;
  %941 = %935.0;
  (%936, %937, %938, %939, meta[relay.Constant][52] /* ty=Tensor[(120), int64] */, meta[relay.Constant][53] /* ty=Tensor[(1560), int64] */, %940, %941)
}

def @func_5078() -> (Tensor[(11, 13, 13), float32], Tensor[(120), int64]) {
  %942 = @func_4349() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %943 = @func_1772() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) */;
  %944 = %942.0;
  %945 = %943.2;
  (%944, %945)
}

def @func_1487() -> (Tensor[(11, 13, 13), float32],) {
  %946 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %947 = %946.0;
  (%947,)
}

def @func_4420() -> (Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1, 120), int64]) {
  %948 = @func_4201() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(3, 40), int64], Tensor[(120), int64], Tensor[(15, 8, 13), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) */;
  %949 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 120), int64] */, dtype="int64") /* ty=Tensor[(1, 120), int64] */;
  %950 = reshape(%949, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %951 = @func_3757(%950) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64]) */;
  %952 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
  %953 = %948.3;
  %954 = %951.2;
  (%952, %953, %954, meta[relay.Constant][54] /* ty=Tensor[(1, 120), int64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2352(%var_2351: Tensor[(75), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(75), float64]) {
  %12 = fn (%var_2342: Tensor[(75), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(75), float64]) {
    %0 = @func_1220() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %1 = @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
    %2 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %3 = cast(%var_2342, dtype="float64") /* ty=Tensor[(75), float64] */;
    %4 = cast(%var_2342, dtype="float64") /* ty=Tensor[(75), float64] */;
    %5 = reshape(%3, newshape=[75]) /* ty=Tensor[(75), float64] */;
    %6 = reshape(%4, newshape=[75]) /* ty=Tensor[(75), float64] */;
    %7 = @func_1408(%5, %6) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(1, 15, 5), float64], Tensor[(75), bool], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64]) */;
    %8 = %0.0;
    %9 = %1.0;
    %10 = %2.0;
    %11 = %7.0;
    (%8, %9, %10, %11, %var_2342)
  };
  %12(%var_2351) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(75), float64]) */
}

def @func_1302() -> (Tensor[(11, 13, 13), float32],) {
  @func_1300() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_5080() -> (Tensor[(11, 13, 13), float32], Tensor[(120), int64]) {
  @func_5078() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(120), int64]) */
}

def @func_494() -> Tensor[(11, 13, 13), float32] {
  @func_492() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_3759(%var_3758: Tensor[(120), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64]) {
  %21 = fn (%var_3746: Tensor[(120), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64]) {
    %13 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %14 = cast(%var_3746, dtype="int64") /* ty=Tensor[(120), int64] */;
    %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
    %16 = reshape(%14, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), int64] */;
    %17 = reshape(%15, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int64] */;
    %18 = @func_327(%16, %17) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */;
    %19 = %13.0;
    %20 = %18.1;
    (%19, %20, %var_3746, meta[relay.Constant][0] /* ty=Tensor[(1560), int64] */)
  };
  %21(%var_3758) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64]) */
}

def @func_3968() -> (Tensor[(11, 13, 13), float32],) {
  %24 = fn () -> (Tensor[(11, 13, 13), float32],) {
    %22 = @func_2103() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %23 = %22.0;
    (%23,)
  };
  %24() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_7798(%var_7797: Tensor[(3, 7, 5), uint32]) -> (Tensor[(3, 7, 5), bool],) {
  %30 = fn (%var_7789: Tensor[(3, 7, 5), uint32]) -> (Tensor[(3, 7, 5), bool],) {
    %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 7, 5), uint32] */, dtype="bool") /* ty=Tensor[(3, 7, 5), bool] */;
    %26 = shape_of(%var_7789, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%var_7789, dtype="bool") /* ty=Tensor[(3, 7, 5), bool] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %29 = greater(%27, %28) /* ty=Tensor[(3, 7, 5), bool] */;
    (%29,)
  };
  %30(%var_7797) /* ty=(Tensor[(3, 7, 5), bool],) */
}

def @func_1941() -> (Tensor[(11, 13, 13), float32],) {
  @func_1939() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_437(%var_416: Tensor[(120), int64], %var_417: Tensor[(6, 260), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(6, 260), int64], Tensor[(11, 13, 13), float32]) {
  %31 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %32 = cast(%var_416, dtype="int64") /* ty=Tensor[(120), int64] */;
  %33 = cast(%var_417, dtype="int64") /* ty=Tensor[(6, 260), int64] */;
  %34 = reshape(%32, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), int64] */;
  %35 = reshape(%33, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int64] */;
  %36 = @func_327(%34, %35) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */;
  %37 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %38 = %31.1;
  %39 = %36.1;
  %40 = %37.0;
  (%38, %39, %var_416, %var_417, %40)
}

def @func_454(%var_446: Tensor[(1, 15, 5), float64]) -> Tensor[(1, 15, 5), float64] {
  %41 = cast(0.666966f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %42 = cast(%var_446, dtype="float64") /* ty=Tensor[(1, 15, 5), float64] */;
  add(%41, %42) /* ty=Tensor[(1, 15, 5), float64] */
}

def @func_1497() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %46 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
    %43 = @func_724() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
    %44 = %43.0;
    %45 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
    (%44, %45)
  };
  %46() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_1237() -> Tensor[(11, 13, 13), float32] {
  %48 = fn () -> Tensor[(11, 13, 13), float32] {
    %47 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
    %47.0
  };
  %48() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_2611() -> (Tensor[(11, 13, 13), float32],) {
  %50 = fn () -> (Tensor[(11, 13, 13), float32],) {
    %49 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
    (%49,)
  };
  %50() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_5000() -> Tensor[(11, 13, 13), float32] {
  %52 = fn () -> Tensor[(11, 13, 13), float32] {
    %51 = @func_3636() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %51.0
  };
  %52() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_4077() -> Tensor[(11, 13, 13), float32] {
  %53 = fn () -> Tensor[(11, 13, 13), float32] {
    @func_3714() /* ty=Tensor[(11, 13, 13), float32] */
  };
  %53() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_726() -> (Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) {
  @func_724() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */
}

def @func_6406(%var_6404: Tensor[(6, 13, 12), bool], %var_6405: Tensor[(420), float32]) -> (Tensor[(936, 3), bool], Tensor[(2808), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), uint32], Tensor[(936, 1), float64], Tensor[(420), float32], Tensor[(8, 13, 13), uint32], uint64, Tensor[(1352), uint64], Tensor[(15, 7, 4), float32], Tensor[(11, 13, 13), float64]) {
  @func_6402(%var_6404, %var_6405) /* ty=(Tensor[(936, 3), bool], Tensor[(2808), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), uint32], Tensor[(936, 1), float64], Tensor[(420), float32], Tensor[(8, 13, 13), uint32], uint64, Tensor[(1352), uint64], Tensor[(15, 7, 4), float32], Tensor[(11, 13, 13), float64]) */
}

def @func_1623(%var_1608: Tensor[(6, 13, 12), int32]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(6, 13, 12), uint32], Tensor[(6, 13, 12), float32]) {
  %54 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %55 = @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %56 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %58 = reshape(%56, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), int64] */;
  %59 = reshape(%57, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int64] */;
  %60 = @func_327(%58, %59) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */;
  %61 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %62 = %61.1;
  %63 = cast(%var_1608, dtype="uint32") /* ty=Tensor[(6, 13, 12), uint32] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="uint32") /* ty=Tensor[(6, 13, 12), uint32] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %67 = @func_1155() /* ty=(Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %68 = %54.0;
  %69 = %55.0;
  %70 = @func_1236() /* ty=Tensor[(11, 13, 13), float32] */;
  %71 = %60.0;
  %72 = subtract(%65, %66) /* ty=Tensor[(6, 13, 12), uint32] */;
  %73 = %67.0;
  (%68, %69, %70, %71, meta[relay.Constant][2] /* ty=Tensor[(120), int64] */, meta[relay.Constant][3] /* ty=Tensor[(1560), int64] */, %72, %73)
}

def @func_205() -> Tensor[(11, 13, 13), float32] {
  %74 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %74.0
}

def @func_6058(%var_6057: Tensor[(15, 7, 4), float32]) -> (Tensor[(15, 7, 4), float32],) {
  %77 = fn (%var_6052: Tensor[(15, 7, 4), float32]) -> (Tensor[(15, 7, 4), float32],) {
    %75 = cast(%var_6052, dtype="float32") /* ty=Tensor[(15, 7, 4), float32] */;
    %76 = erf(%75) /* ty=Tensor[(15, 7, 4), float32] */;
    (%76,)
  };
  %77(%var_6057) /* ty=(Tensor[(15, 7, 4), float32],) */
}

def @func_3322(%var_3321: Tensor[(6, 13, 12), int32]) -> (Tensor[(6, 13, 12), uint16],) {
  %85 = fn (%var_3314: Tensor[(6, 13, 12), int32]) -> (Tensor[(6, 13, 12), uint16],) {
    %78 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
    %79 = %78.1;
    %80 = cast(%var_3314, dtype="uint16") /* ty=Tensor[(6, 13, 12), uint16] */;
    %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
    %82 = cast(%79, dtype="uint16") /* ty=Tensor[(6, 13, 12), uint16] */;
    %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %84 = logical_xor(%82, %83) /* ty=Tensor[(6, 13, 12), uint16] */;
    (%84,)
  };
  %85(%var_3321) /* ty=(Tensor[(6, 13, 12), uint16],) */
}

def @func_1711(%var_1710: Tensor[(3, 40), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(3, 40), int64]) {
  %92 = fn (%var_1692: Tensor[(3, 40), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(3, 40), int64]) {
    %86 = @func_1487() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %87 = cast(%var_1692, dtype="int64") /* ty=Tensor[(3, 40), int64] */;
    %88 = reshape(%87, newshape=[120]) /* ty=Tensor[(120), int64] */;
    %89 = @func_1060(%88) /* ty=(Tensor[(6, 13, 12), int32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */;
    %90 = %86.0;
    %91 = %89.0;
    (%90, %91, %var_1692)
  };
  %92(%var_1710) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(3, 40), int64]) */
}

def @func_7403(%var_7402: Tensor[(5, 6, 13), float64]) -> (Tensor[(5, 6, 13), int16],) {
  %100 = fn (%var_7378: Tensor[(5, 6, 13), float64]) -> (Tensor[(5, 6, 13), int16],) {
    %93 = cast(%var_7378, dtype="float64") /* ty=Tensor[(5, 6, 13), float64] */;
    %94 = log2(%93) /* ty=Tensor[(5, 6, 13), float64] */;
    %95 = cast(%var_7378, dtype="int16") /* ty=Tensor[(5, 6, 13), int16] */;
    %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
    %97 = cast(%94, dtype="int16") /* ty=Tensor[(5, 6, 13), int16] */;
    %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %99 = multiply(%97, %98) /* ty=Tensor[(5, 6, 13), int16] */;
    (%99,)
  };
  %100(%var_7402) /* ty=(Tensor[(5, 6, 13), int16],) */
}

def @func_5636() -> (Tensor[(1, 120), int64], Tensor[(936), float64], Tensor[(6, 13, 12), float64]) {
  %115 = fn () -> (Tensor[(1, 120), int64], Tensor[(936), float64], Tensor[(6, 13, 12), float64]) {
    %101 = @func_4420() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1, 120), int64]) */;
    %102 = cast(meta[relay.Constant][4] /* ty=Tensor[(936), float64] */, dtype="float64") /* ty=Tensor[(936), float64] */;
    %103 = cast(meta[relay.Constant][4] /* ty=Tensor[(936), float64] */, dtype="float64") /* ty=Tensor[(936), float64] */;
    %104 = reshape(%102, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
    %105 = reshape(%103, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
    %106 = @func_64(%104, %105) /* ty=Tensor[(6, 13, 12), int32] */;
    %107 = @func_5452() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936), float64], Tensor[(6, 13, 12), float64], Tensor[(6, 13, 12), float64]) */;
    %108 = %107.2;
    %109 = cast(%108, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
    %110 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%106, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %113 = %101.3;
    %114 = floor_mod(%111, %112) /* ty=Tensor[(6, 13, 12), float64] */;
    (%113, meta[relay.Constant][4] /* ty=Tensor[(936), float64] */, %114)
  };
  %115() /* ty=(Tensor[(1, 120), int64], Tensor[(936), float64], Tensor[(6, 13, 12), float64]) */
}

def @func_4328(%var_4251: Tensor[(120), int64], %var_4256: Tensor[(16, 1560), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(16, 1560), bool], Tensor[(1, 1560), float32], Tensor[(75), bool], Tensor[(75), float64]) {
  %116 = @func_2103() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %117 = cast(%var_4251, dtype="int64") /* ty=Tensor[(120), int64] */;
  %118 = reshape(%117, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %119 = @func_1110(%118) /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1, 1560), int64]) */;
  %120 = %119.3;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(1, 1560), float32] */;
  %122 = cast(%var_4256, dtype="float32") /* ty=Tensor[(16, 1560), float32] */;
  %123 = multiply(%121, %122) /* ty=Tensor[(16, 1560), float32] */;
  %124 = cast(%120, dtype="bool") /* ty=Tensor[(1, 1560), bool] */;
  %125 = cast(%123, dtype="bool") /* ty=Tensor[(16, 1560), bool] */;
  %126 = cast(%120, dtype="float32") /* ty=Tensor[(1, 1560), float32] */;
  %127 = cast(meta[relay.Constant][5] /* ty=Tensor[(75), float64] */, dtype="float64") /* ty=Tensor[(75), float64] */;
  %128 = cast(meta[relay.Constant][5] /* ty=Tensor[(75), float64] */, dtype="float64") /* ty=Tensor[(75), float64] */;
  %129 = reshape(%127, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %130 = reshape(%128, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %131 = @func_1408(%129, %130) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(1, 15, 5), float64], Tensor[(75), bool], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64]) */;
  %132 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
  %133 = @func_4076() /* ty=Tensor[(11, 13, 13), float32] */;
  %134 = %116.1;
  %135 = logical_and(%124, %125) /* ty=Tensor[(16, 1560), bool] */;
  %136 = sqrt(%126) /* ty=Tensor[(1, 1560), float32] */;
  %137 = %131.2;
  (%132, %133, %134, %var_4251, %135, %136, %137, meta[relay.Constant][5] /* ty=Tensor[(75), float64] */)
}

def @func_5294(%var_5188: Tensor[(13, 10, 4), float32], %var_5200: Tensor[(13, 10, 4), float32], %var_5290: Tensor[(13, 10, 4), float64]) -> (Tensor[(13, 10, 4), uint64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 5), float64], Tensor[(11, 13, 13), float32], Tensor[(1, 120), int64], Tensor[(11, 13, 13), float32], Tensor[(1560), int64], Tensor[(5, 11, 14), bool], Tensor[(11, 13, 13), float32], Tensor[(13, 10, 4), int32]) {
  %138 = cast(%var_5188, dtype="float32") /* ty=Tensor[(13, 10, 4), float32] */;
  %139 = log(%138) /* ty=Tensor[(13, 10, 4), float32] */;
  %140 = cast(%var_5200, dtype="uint64") /* ty=Tensor[(13, 10, 4), uint64] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%139, dtype="uint64") /* ty=Tensor[(13, 10, 4), uint64] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %144 = @func_5078() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(120), int64]) */;
  %145 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 5), float64] */, dtype="float64") /* ty=Tensor[(15, 5), float64] */;
  %146 = reshape(%145, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %147 = @func_2350(%146) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(75), float64]) */;
  %148 = @func_5183() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %149 = @func_4420() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1, 120), int64]) */;
  %150 = %149.3;
  %151 = cast(%150, dtype="int64") /* ty=Tensor[(1, 120), int64] */;
  %152 = cast(meta[relay.Constant][7] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %153 = reshape(%151, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %154 = reshape(%152, newshape=[6, 260]) /* ty=Tensor[(6, 260), int64] */;
  %155 = @func_437(%153, %154) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(6, 260), int64], Tensor[(11, 13, 13), float32]) */;
  %156 = @func_1772() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) */;
  %157 = %156.4;
  %158 = cast(%157, dtype="float32") /* ty=Tensor[(5, 11, 14), float32] */;
  %159 = sin(%158) /* ty=Tensor[(5, 11, 14), float32] */;
  %160 = cast(%157, dtype="bool") /* ty=Tensor[(5, 11, 14), bool] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="bool") /* ty=Tensor[(5, 11, 14), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %164 = @func_2245() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
  %165 = cast(%var_5188, dtype="float64") /* ty=Tensor[(13, 10, 4), float64] */;
  %166 = exp(%165) /* ty=Tensor[(13, 10, 4), float64] */;
  %167 = cast(%var_5290, dtype="int32") /* ty=Tensor[(13, 10, 4), int32] */;
  %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%166, dtype="int32") /* ty=Tensor[(13, 10, 4), int32] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %171 = right_shift(%142, %143) /* ty=Tensor[(13, 10, 4), uint64] */;
  %172 = @func_3161() /* ty=Tensor[(11, 13, 13), float32] */;
  %173 = %144.0;
  %174 = %147.3;
  %175 = %148.1;
  %176 = %155.4;
  %177 = logical_and(%162, %163) /* ty=Tensor[(5, 11, 14), bool] */;
  %178 = %164.0;
  %179 = multiply(%169, %170) /* ty=Tensor[(13, 10, 4), int32] */;
  (%171, %172, %173, %174, meta[relay.Constant][6] /* ty=Tensor[(15, 5), float64] */, %175, %150, %176, meta[relay.Constant][7] /* ty=Tensor[(1560), int64] */, %177, %178, %179)
}

def @func_441(%var_439: Tensor[(120), int64], %var_440: Tensor[(6, 260), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(6, 260), int64], Tensor[(11, 13, 13), float32]) {
  @func_437(%var_439, %var_440) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(6, 260), int64], Tensor[(11, 13, 13), float32]) */
}

def @func_6017() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %180 = @func_2610() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %181 = @func_4076() /* ty=Tensor[(11, 13, 13), float32] */;
  %182 = %180.0;
  (%181, %182)
}

def @func_1972(%var_1970: Tensor[(2, 468), float64]) -> (Tensor[(1560), int64], Tensor[(6, 13, 12), int32], Tensor[(2, 468), float64]) {
  @func_1969(%var_1970) /* ty=(Tensor[(1560), int64], Tensor[(6, 13, 12), int32], Tensor[(2, 468), float64]) */
}

def @func_2104() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %187 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
    %183 = @func_1939() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %184 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
    %185 = %183.0;
    %186 = %184.1;
    (%185, %186)
  };
  %187() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_6698() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32]) {
  %188 = @func_4344() /* ty=(Tensor[(6, 13, 12), float64],) */;
  %189 = %188.0;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %191 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %192 = @func_4999() /* ty=Tensor[(11, 13, 13), float32] */;
  %193 = @func_4437() /* ty=Tensor[(11, 13, 13), float32] */;
  %194 = atan(%190) /* ty=Tensor[(6, 13, 12), float32] */;
  %195 = %191.0;
  (%192, %193, %194, %195)
}

def @func_2684() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64]) {
  %202 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64]) {
    %196 = @func_1487() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %197 = cast(meta[relay.Constant][8] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
    %198 = reshape(%197, newshape=[3, 40]) /* ty=Tensor[(3, 40), int64] */;
    %199 = @func_1709(%198) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(3, 40), int64]) */;
    %200 = %196.0;
    %201 = %199.0;
    (%200, %201, meta[relay.Constant][8] /* ty=Tensor[(120), int64] */)
  };
  %202() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64]) */
}

def @func_2638() -> (Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %207 = fn () -> (Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
    %203 = @func_724() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
    %204 = %203.1;
    %205 = @func_1236() /* ty=Tensor[(11, 13, 13), float32] */;
    %206 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
    (%204, %205, %206)
  };
  %207() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_3582() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %212 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
    %208 = @func_2637() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %209 = @func_1668() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %210 = %208.2;
    %211 = %209.0;
    (%210, %211)
  };
  %212() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_1349(%var_1347: bool) -> (Tensor[(11, 13, 13), float32], Tensor[(120), int64], bool, Tensor[(6, 20), int64], Tensor[(13, 26), float32]) {
  @func_1346(%var_1347) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(120), int64], bool, Tensor[(6, 20), int64], Tensor[(13, 26), float32]) */
}

def @func_7757() -> Tensor[(11, 13, 13), float32] {
  @func_7755() /* ty=Tensor[(11, 13, 13), float32] */
}

def @main(%var_7947: Tensor[(936), float64]) -> (Tensor[(11, 13, 13), float64], Tensor[(2, 468), bool], Tensor[(2, 468), float64]) {
  %213 = @func_2756() /* ty=(Tensor[(11, 13, 13), float64],) */;
  %214 = cast(%var_7947, dtype="float64") /* ty=Tensor[(936), float64] */;
  %215 = reshape(%214, newshape=[2, 468]) /* ty=Tensor[(2, 468), float64] */;
  %216 = @func_1972(%215) /* ty=(Tensor[(1560), int64], Tensor[(6, 13, 12), int32], Tensor[(2, 468), float64]) */;
  %217 = %216.2;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(2, 468), float64] */;
  %219 = atan(%218) /* ty=Tensor[(2, 468), float64] */;
  %220 = cast(%var_7947, dtype="bool") /* ty=Tensor[(936), bool] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(2), int32] */;
  %222 = cast(%219, dtype="bool") /* ty=Tensor[(2, 468), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %224 = cast(%219, dtype="float64") /* ty=Tensor[(2, 468), float64] */;
  %225 = %213.0;
  %226 = equal(%222, %223) /* ty=Tensor[(2, 468), bool] */;
  %227 = cosh(%224) /* ty=Tensor[(2, 468), float64] */;
  (%225, %226, %227)
}

def @func_3620() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  @func_3618() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_4615(%var_4614: Tensor[(7488), float32]) -> (Tensor[(7488), float32], Tensor[(11, 13, 13), uint32]) {
  %238 = fn (%var_4593: Tensor[(7488), float32]) -> (Tensor[(7488), float32], Tensor[(11, 13, 13), uint32]) {
    %228 = @func_3161() /* ty=Tensor[(11, 13, 13), float32] */;
    %229 = cast(%var_4593, dtype="float32") /* ty=Tensor[(7488), float32] */;
    %230 = reshape(%229, newshape=[936, 8]) /* ty=Tensor[(936, 8), float32] */;
    %231 = @func_2151(%230) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 8), uint8], Tensor[(11, 13, 13), float32]) */;
    %232 = %231.0;
    %233 = cast(%232, dtype="uint32") /* ty=Tensor[(11, 13, 13), uint32] */;
    %234 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
    %235 = cast(%228, dtype="uint32") /* ty=Tensor[(11, 13, 13), uint32] */;
    %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %237 = left_shift(%235, %236) /* ty=Tensor[(11, 13, 13), uint32] */;
    (%var_4593, %237)
  };
  %238(%var_4614) /* ty=(Tensor[(7488), float32], Tensor[(11, 13, 13), uint32]) */
}

def @func_4344() -> (Tensor[(6, 13, 12), float64],) {
  %239 = @func_2429() /* ty=Tensor[(6, 13, 12), float64] */;
  (%239,)
}

def @func_636() -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) {
  %254 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) {
    %240 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
    %241 = cast(meta[relay.Constant][9] /* ty=Tensor[(936, 1), float64] */, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
    %242 = cast(meta[relay.Constant][9] /* ty=Tensor[(936, 1), float64] */, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
    %243 = reshape(%241, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
    %244 = reshape(%242, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
    %245 = @func_64(%243, %244) /* ty=Tensor[(6, 13, 12), int32] */;
    %246 = cast(%245, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
    %247 = cast(%245, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
    %248 = reshape(%246, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
    %249 = reshape(%247, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
    %250 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
    %251 = %240.1;
    %252 = @func_64(%248, %249) /* ty=Tensor[(6, 13, 12), int32] */;
    %253 = %250.1;
    (%251, %245, meta[relay.Constant][9] /* ty=Tensor[(936, 1), float64] */, %252, %253)
  };
  %254() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */
}

def @func_2429() -> Tensor[(6, 13, 12), float64] {
  %255 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %255.0
}

def @func_3017() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(30, 4), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) {
  %256 = @func_1496() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %257 = %256.1;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(11, 13, 13), float32] */;
  %259 = @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %260 = cast(meta[relay.Constant][10] /* ty=Tensor[(30, 4), int64] */, dtype="int64") /* ty=Tensor[(30, 4), int64] */;
  %261 = cast(meta[relay.Constant][11] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %262 = reshape(%260, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %263 = reshape(%261, newshape=[6, 260]) /* ty=Tensor[(6, 260), int64] */;
  %264 = @func_437(%262, %263) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(6, 260), int64], Tensor[(11, 13, 13), float32]) */;
  %265 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %266 = asinh(%258) /* ty=Tensor[(11, 13, 13), float32] */;
  %267 = %259.3;
  %268 = %264.4;
  %269 = %265.0;
  (%266, %267, %268, meta[relay.Constant][10] /* ty=Tensor[(30, 4), int64] */, meta[relay.Constant][11] /* ty=Tensor[(1560), int64] */, %269)
}

def @func_3812(%var_3788: Tensor[(936, 3), float64]) -> (Tensor[(936, 3), bool],) {
  %270 = @func_2245() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
  %271 = %270.1;
  %272 = cast(%271, dtype="int32") /* ty=Tensor[(936, 1), int32] */;
  %273 = cast(%var_3788, dtype="int32") /* ty=Tensor[(936, 3), int32] */;
  %274 = bitwise_or(%272, %273) /* ty=Tensor[(936, 3), int32] */;
  %275 = cast(%var_3788, dtype="uint64") /* ty=Tensor[(936, 3), uint64] */;
  %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(2), int32] */;
  %277 = cast(%274, dtype="uint64") /* ty=Tensor[(936, 3), uint64] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %279 = maximum(%277, %278) /* ty=Tensor[(936, 3), uint64] */;
  %280 = cast(%274, dtype="bool") /* ty=Tensor[(936, 3), bool] */;
  %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(2), int32] */;
  %282 = cast(%279, dtype="bool") /* ty=Tensor[(936, 3), bool] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %284 = not_equal(%282, %283) /* ty=Tensor[(936, 3), bool] */;
  (%284,)
}

def @func_4877() -> Tensor[(936, 1), float64] {
  %288 = fn () -> Tensor[(936, 1), float64] {
    %285 = @func_1782() /* ty=(Tensor[(936, 1), float64],) */;
    %286 = %285.0;
    %287 = cast(%286, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
    acos(%287) /* ty=Tensor[(936, 1), float64] */
  };
  %288() /* ty=Tensor[(936, 1), float64] */
}

def @func_6223() -> Tensor[(11, 13, 13), float32] {
  %290 = fn () -> Tensor[(11, 13, 13), float32] {
    %289 = @func_5715() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %289.0
  };
  %290() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_3958(%var_3955: Tensor[(936, 16), float64], %var_3956: Tensor[(75), uint32], %var_3957: Tensor[(675), uint32]) -> (Tensor[(936, 16), uint64], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), uint32], Tensor[(9, 11, ?), float32], Tensor[(1, 99), float32]) {
  %307 = fn (%var_3926: Tensor[(936, 16), float64], %var_3941: Tensor[(75), uint32], %var_3942: Tensor[(675), uint32]) -> (Tensor[(936, 16), uint64], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), uint32], Tensor[(9, 11, ?), float32], Tensor[(1, 99), float32]) {
    %291 = @func_1782() /* ty=(Tensor[(936, 1), float64],) */;
    %292 = %291.0;
    %293 = cast(%292, dtype="uint64") /* ty=Tensor[(936, 1), uint64] */;
    %294 = cast(%var_3926, dtype="uint64") /* ty=Tensor[(936, 16), uint64] */;
    %295 = cast(%var_3941, dtype="uint32") /* ty=Tensor[(75), uint32] */;
    %296 = cast(%var_3942, dtype="uint32") /* ty=Tensor[(675), uint32] */;
    %297 = reshape(%295, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), uint32] */;
    %298 = reshape(%296, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint32] */;
    %299 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 99), float32] */, dtype="float32") /* ty=Tensor[(1, 99), float32] */;
    %300 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 99), float32] */, dtype="float32") /* ty=Tensor[(1, 99), float32] */;
    %301 = reshape(%299, newshape=[9, 11, 1]) /* ty=Tensor[(9, 11, 1), float32] */;
    %302 = reshape(%300, newshape=[9, 11, 1]) /* ty=Tensor[(9, 11, 1), float32] */;
    %303 = @func_3829(%301, %302) /* ty=(Tensor[(9, 11, ?), float32],) */;
    %304 = bitwise_or(%293, %294) /* ty=Tensor[(936, 16), uint64] */;
    %305 = @func_1270(%297, %298) /* ty=Tensor[(15, 5, 9), uint32] */;
    %306 = %303.0;
    (%304, %305, %var_3941, %var_3942, %306, meta[relay.Constant][12] /* ty=Tensor[(1, 99), float32] */)
  };
  %307(%var_3955, %var_3956, %var_3957) /* ty=(Tensor[(936, 16), uint64], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), uint32], Tensor[(9, 11, ?), float32], Tensor[(1, 99), float32]) */
}

def @func_4119(%var_4118: Tensor[(60, 2), int64]) -> (Tensor[(10, 1, 7), float64], Tensor[(3, 40), int64], Tensor[(60, 2), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %319 = fn (%var_4099: Tensor[(60, 2), int64]) -> (Tensor[(10, 1, 7), float64], Tensor[(3, 40), int64], Tensor[(60, 2), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
    %308 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 1, 7), float64] */, dtype="float64") /* ty=Tensor[(10, 1, 7), float64] */;
    %309 = cast(%var_4099, dtype="int64") /* ty=Tensor[(60, 2), int64] */;
    %310 = cast(meta[relay.Constant][14] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
    %311 = reshape(%309, newshape=[3, 40]) /* ty=Tensor[(3, 40), int64] */;
    %312 = reshape(%310, newshape=[1560]) /* ty=Tensor[(1560), int64] */;
    %313 = @func_2199(%311, %312) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(3, 40), int64], Tensor[(1560), int64]) */;
    %314 = @func_3017() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(30, 4), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */;
    %315 = acos(%308) /* ty=Tensor[(10, 1, 7), float64] */;
    %316 = %313.2;
    %317 = %314.0;
    %318 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
    (%315, %316, %var_4099, meta[relay.Constant][14] /* ty=Tensor[(1560), int64] */, %317, %318)
  };
  %319(%var_4118) /* ty=(Tensor[(10, 1, 7), float64], Tensor[(3, 40), int64], Tensor[(60, 2), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_7662() -> (Tensor[(11, 13, 13), float32],) {
  @func_7660() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_724() -> (Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) {
  %320 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %321 = %320.2;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
  %323 = @func_492() /* ty=Tensor[(11, 13, 13), float32] */;
  %324 = rsqrt(%322) /* ty=Tensor[(936, 1), float64] */;
  (%323, %324)
}

def @func_1784() -> (Tensor[(936, 1), float64],) {
  @func_1782() /* ty=(Tensor[(936, 1), float64],) */
}

def @func_1489() -> (Tensor[(11, 13, 13), float32],) {
  @func_1487() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_5802() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(468, 2), float64]) {
  %332 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(468, 2), float64]) {
    %325 = @func_4201() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(3, 40), int64], Tensor[(120), int64], Tensor[(15, 8, 13), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) */;
    %326 = @func_1496() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %327 = @func_4629() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %328 = %325.0;
    %329 = %326.0;
    %330 = %327.0;
    %331 = @func_4737() /* ty=Tensor[(468, 2), float64] */;
    (%328, %329, %330, %331)
  };
  %332() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(468, 2), float64]) */
}

def @func_5453() -> (Tensor[(11, 13, 13), float32], Tensor[(936), float64], Tensor[(6, 13, 12), float64], Tensor[(6, 13, 12), float64]) {
  %344 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(936), float64], Tensor[(6, 13, 12), float64], Tensor[(6, 13, 12), float64]) {
    %333 = @func_1496() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %334 = cast(meta[relay.Constant][15] /* ty=Tensor[(936), float64] */, dtype="float64") /* ty=Tensor[(936), float64] */;
    %335 = cast(meta[relay.Constant][15] /* ty=Tensor[(936), float64] */, dtype="float64") /* ty=Tensor[(936), float64] */;
    %336 = reshape(%334, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
    %337 = reshape(%335, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
    %338 = @func_64(%336, %337) /* ty=Tensor[(6, 13, 12), int32] */;
    %339 = cast(%338, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
    %340 = @func_4557() /* ty=(Tensor[(3, 40), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
    %341 = %333.1;
    %342 = sin(%339) /* ty=Tensor[(6, 13, 12), float64] */;
    %343 = %340.1;
    (%341, meta[relay.Constant][15] /* ty=Tensor[(936), float64] */, %342, %343)
  };
  %344() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936), float64], Tensor[(6, 13, 12), float64], Tensor[(6, 13, 12), float64]) */
}

def @func_1408(%var_1378: Tensor[(75), float64], %var_1381: Tensor[(75), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(1, 15, 5), float64], Tensor[(75), bool], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64]) {
  %345 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %346 = cast(%var_1378, dtype="float64") /* ty=Tensor[(75), float64] */;
  %347 = reshape(%346, newshape=[1, 15, 5]) /* ty=Tensor[(1, 15, 5), float64] */;
  %348 = cast(%var_1381, dtype="bool") /* ty=Tensor[(75), bool] */;
  %349 = shape_of(%var_1378, dtype="int32") /* ty=Tensor[(1), int32] */;
  %350 = cast(%var_1378, dtype="bool") /* ty=Tensor[(75), bool] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?), bool] */;
  %352 = @func_1220() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %353 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %354 = %345.0;
  %355 = @func_454(%347) /* ty=Tensor[(1, 15, 5), float64] */;
  %356 = less_equal(%350, %351) /* ty=Tensor[(75), bool] */;
  %357 = %352.0;
  %358 = %353.0;
  (%354, %355, %356, %357, %358)
}

def @func_6901() -> (Tensor[(11, 13, 13), float32], Tensor[(13, 16, 3), int8], Tensor[(624), int8], Tensor[(936, 1), float64], Tensor[(120), int64], bool, Tensor[(11, 13, 13), float32]) {
  %371 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(13, 16, 3), int8], Tensor[(624), int8], Tensor[(936, 1), float64], Tensor[(120), int64], bool, Tensor[(11, 13, 13), float32]) {
    %359 = @func_6320() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(16, 4, 16), float32], Tensor[(1024), float64]) */;
    %360 = cast(meta[relay.Constant][16] /* ty=Tensor[(624), int8] */, dtype="int8") /* ty=Tensor[(624), int8] */;
    %361 = reshape(%360, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int8] */;
    %362 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %363 = reshape(%362, newshape=[]) /* ty=bool */;
    %364 = @func_1346(%363) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(120), int64], bool, Tensor[(6, 20), int64], Tensor[(13, 26), float32]) */;
    %365 = @func_5801() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(468, 2), float64]) */;
    %366 = %359.1;
    %367 = @func_2476(%361) /* ty=Tensor[(13, 16, 3), int8] */;
    %368 = @func_1124() /* ty=Tensor[(936, 1), float64] */;
    %369 = %364.1;
    %370 = %365.0;
    (%366, %367, meta[relay.Constant][16] /* ty=Tensor[(624), int8] */, %368, %369, False /* ty=bool */, %370)
  };
  %371() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(13, 16, 3), int8], Tensor[(624), int8], Tensor[(936, 1), float64], Tensor[(120), int64], bool, Tensor[(11, 13, 13), float32]) */
}

def @func_7044() -> Tensor[(11, 13, 13), float32] {
  @func_7042() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_4948() -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) {
  %381 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) {
    %372 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %373 = @func_4344() /* ty=(Tensor[(6, 13, 12), float64],) */;
    %374 = %373.0;
    %375 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 13, 12), float64] */, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
    %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
    %377 = cast(%374, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
    %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %379 = %372.0;
    %380 = logical_and(%377, %378) /* ty=Tensor[(6, 13, 12), bool] */;
    (%379, %380)
  };
  %381() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) */
}

def @func_457(%var_455: Tensor[(1, 15, 5), float64]) -> Tensor[(1, 15, 5), float64] {
  @func_454(%var_455) /* ty=Tensor[(1, 15, 5), float64] */
}

def @func_893() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) {
  %382 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %383 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %384 = cast(meta[relay.Constant][18] /* ty=Tensor[(936, 1), float64] */, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
  %385 = cast(meta[relay.Constant][18] /* ty=Tensor[(936, 1), float64] */, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
  %386 = reshape(%384, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %387 = reshape(%385, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %388 = @func_64(%386, %387) /* ty=Tensor[(6, 13, 12), int32] */;
  %389 = cast(%388, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %390 = cosh(%389) /* ty=Tensor[(6, 13, 12), float32] */;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %392 = %382.0;
  %393 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  %394 = %383.1;
  %395 = asin(%391) /* ty=Tensor[(6, 13, 12), float64] */;
  %396 = @func_492() /* ty=Tensor[(11, 13, 13), float32] */;
  (%392, %393, meta[relay.Constant][18] /* ty=Tensor[(936, 1), float64] */, %394, %395, %396)
}

def @func_2431() -> Tensor[(6, 13, 12), float64] {
  @func_2429() /* ty=Tensor[(6, 13, 12), float64] */
}

def @func_6568(%var_6566: Tensor[(8, 12, 10), int8], %var_6567: Tensor[(8, 12, 10), int8]) -> (Tensor[(8, 12, 10), int8], Tensor[(8, 12, 10), int16], Tensor[(468, 2), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %411 = fn (%var_6525: Tensor[(8, 12, 10), int8], %var_6530: Tensor[(8, 12, 10), int8]) -> (Tensor[(8, 12, 10), int8], Tensor[(8, 12, 10), int16], Tensor[(468, 2), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
    %397 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 12, 10), int8] */, dtype="int8") /* ty=Tensor[(1, 12, 10), int8] */;
    %398 = cast(%var_6525, dtype="int8") /* ty=Tensor[(8, 12, 10), int8] */;
    %399 = cast(%var_6530, dtype="int16") /* ty=Tensor[(8, 12, 10), int16] */;
    %400 = shape_of(%var_6525, dtype="int32") /* ty=Tensor[(3), int32] */;
    %401 = cast(%var_6525, dtype="int16") /* ty=Tensor[(8, 12, 10), int16] */;
    %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %403 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
    %404 = @func_4947() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) */;
    %405 = right_shift(%397, %398) /* ty=Tensor[(8, 12, 10), int8] */;
    %406 = bitwise_xor(%401, %402) /* ty=Tensor[(8, 12, 10), int16] */;
    %407 = %403.2;
    %408 = @func_6222() /* ty=Tensor[(11, 13, 13), float32] */;
    %409 = %404.0;
    %410 = @func_492() /* ty=Tensor[(11, 13, 13), float32] */;
    (%405, %406, %407, %408, %409, %410)
  };
  %411(%var_6566, %var_6567) /* ty=(Tensor[(8, 12, 10), int8], Tensor[(8, 12, 10), int16], Tensor[(468, 2), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_4346() -> (Tensor[(6, 13, 12), float64],) {
  @func_4344() /* ty=(Tensor[(6, 13, 12), float64],) */
}

def @func_4630() -> (Tensor[(11, 13, 13), float32],) {
  %414 = fn () -> (Tensor[(11, 13, 13), float32],) {
    %412 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
    %413 = %412.0;
    (%413,)
  };
  %414() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_7660() -> (Tensor[(11, 13, 13), float32],) {
  %415 = @func_2103() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %416 = %415.0;
  (%416,)
}

def @func_1874() -> Tensor[(11, 13, 13), float32] {
  %417 = fn () -> Tensor[(11, 13, 13), float32] {
    @func_539() /* ty=Tensor[(11, 13, 13), float32] */
  };
  %417() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_5132() -> (Tensor[(11, 13, 13), float32],) {
  %419 = fn () -> (Tensor[(11, 13, 13), float32],) {
    %418 = @func_2829() /* ty=Tensor[(11, 13, 13), float32] */;
    (%418,)
  };
  %419() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_4715(%var_4714: Tensor[(936, 12), float64]) -> (Tensor[(936, 12), bool], Tensor[(1560), int64], Tensor[(936, 12), float32], Tensor[(936, 1), float64]) {
  %430 = fn (%var_4681: Tensor[(936, 12), float64]) -> (Tensor[(936, 12), bool], Tensor[(1560), int64], Tensor[(936, 12), float32], Tensor[(936, 1), float64]) {
    %420 = @func_1124() /* ty=Tensor[(936, 1), float64] */;
    %421 = cast(%420, dtype="bool") /* ty=Tensor[(936, 1), bool] */;
    %422 = cast(%var_4681, dtype="bool") /* ty=Tensor[(936, 12), bool] */;
    %423 = @func_3017() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(30, 4), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */;
    %424 = cast(%var_4681, dtype="float32") /* ty=Tensor[(936, 12), float32] */;
    %425 = cast(%420, dtype="float64") /* ty=Tensor[(936, 1), float64] */;
    %426 = greater_equal(%421, %422) /* ty=Tensor[(936, 12), bool] */;
    %427 = %423.4;
    %428 = cos(%424) /* ty=Tensor[(936, 12), float32] */;
    %429 = asin(%425) /* ty=Tensor[(936, 1), float64] */;
    (%426, %427, %428, %429)
  };
  %430(%var_4714) /* ty=(Tensor[(936, 12), bool], Tensor[(1560), int64], Tensor[(936, 12), float32], Tensor[(936, 1), float64]) */
}

def @func_3069() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  @func_3067() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_5184() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %434 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
    %431 = @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
    %432 = @func_3714() /* ty=Tensor[(11, 13, 13), float32] */;
    %433 = %431.5;
    (%432, %433)
  };
  %434() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_7755() -> Tensor[(11, 13, 13), float32] {
  %435 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %435.0
}

def @func_3118(%var_3116: Tensor[(75), uint32], %var_3117: Tensor[(675), uint32]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), uint32]) {
  @func_3114(%var_3116, %var_3117) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), uint32]) */
}

def @func_1669() -> (Tensor[(11, 13, 13), float32],) {
  %437 = fn () -> (Tensor[(11, 13, 13), float32],) {
    %436 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
    (%436,)
  };
  %437() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_2246() -> (Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) {
  %442 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) {
    %438 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %439 = @func_724() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
    %440 = %438.0;
    %441 = %439.1;
    (%440, %441)
  };
  %442() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */
}

def @func_2718() -> Tensor[(14, 5, 10), float64] {
  %444 = fn () -> Tensor[(14, 5, 10), float64] {
    %443 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 10), float64] */;
    sin(%443) /* ty=Tensor[(14, 5, 10), float64] */
  };
  %444() /* ty=Tensor[(14, 5, 10), float64] */
}

def @func_1270(%var_1245: Tensor[(15, 5, 1), uint32], %var_1246: Tensor[(15, 5, 9), uint32]) -> Tensor[(15, 5, 9), uint32] {
  %445 = cast(%var_1245, dtype="uint32") /* ty=Tensor[(15, 5, 1), uint32] */;
  %446 = cast(%var_1246, dtype="uint32") /* ty=Tensor[(15, 5, 9), uint32] */;
  bitwise_or(%445, %446) /* ty=Tensor[(15, 5, 9), uint32] */
}

def @func_7643() -> Tensor[(6, 13, 12), bool] {
  @func_7641() /* ty=Tensor[(6, 13, 12), bool] */
}

def @func_3114(%var_3111: Tensor[(75), uint32], %var_3112: Tensor[(675), uint32]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), uint32]) {
  %447 = cast(%var_3111, dtype="uint32") /* ty=Tensor[(75), uint32] */;
  %448 = cast(%var_3112, dtype="uint32") /* ty=Tensor[(675), uint32] */;
  %449 = reshape(%447, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), uint32] */;
  %450 = reshape(%448, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint32] */;
  %451 = @func_492() /* ty=Tensor[(11, 13, 13), float32] */;
  %452 = @func_539() /* ty=Tensor[(11, 13, 13), float32] */;
  %453 = @func_1270(%449, %450) /* ty=Tensor[(15, 5, 9), uint32] */;
  (%451, %452, %453, %var_3111, %var_3112)
}

def @func_1060(%var_1053: Tensor[(120), int64]) -> (Tensor[(6, 13, 12), int32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) {
  %454 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %455 = cast(%var_1053, dtype="int64") /* ty=Tensor[(120), int64] */;
  %456 = cast(meta[relay.Constant][21] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
  %457 = reshape(%455, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), int64] */;
  %458 = reshape(%456, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int64] */;
  %459 = @func_327(%457, %458) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */;
  %460 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %461 = %454.3;
  %462 = %459.0;
  %463 = %460.0;
  (%461, %462, %var_1053, meta[relay.Constant][21] /* ty=Tensor[(1560), int64] */, %463)
}

def @func_540() -> Tensor[(11, 13, 13), float32] {
  %465 = fn () -> Tensor[(11, 13, 13), float32] {
    %464 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %464.0
  };
  %465() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_1157() -> (Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  @func_1155() /* ty=(Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_4513(%var_4497: int32, %var_4498: Tensor[(8, 8, 1), int32]) -> Tensor[(8, 8, 1), int32] {
  %466 = cast(%var_4497, dtype="int32") /* ty=int32 */;
  %467 = cast(%var_4498, dtype="int32") /* ty=Tensor[(8, 8, 1), int32] */;
  add(%466, %467) /* ty=Tensor[(8, 8, 1), int32] */
}

def @func_299() -> (Tensor[(11, 13, 13), float32],) {
  %469 = fn () -> (Tensor[(11, 13, 13), float32],) {
    %468 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
    (%468,)
  };
  %469() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_5078() -> (Tensor[(11, 13, 13), float32], Tensor[(120), int64]) {
  %470 = @func_4349() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %471 = @func_1772() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) */;
  %472 = %470.0;
  %473 = %471.2;
  (%472, %473)
}

def @func_809(%var_808: Tensor[(11, 13, 13), float32]) -> Tensor[(11, 13, 13), uint16] {
  %480 = fn (%var_795: Tensor[(11, 13, 13), float32]) -> Tensor[(11, 13, 13), uint16] {
    %474 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
    %475 = %474.0;
    %476 = cast(%var_795, dtype="uint16") /* ty=Tensor[(11, 13, 13), uint16] */;
    %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
    %478 = cast(%475, dtype="uint16") /* ty=Tensor[(11, 13, 13), uint16] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    add(%478, %479) /* ty=Tensor[(11, 13, 13), uint16] */
  };
  %480(%var_808) /* ty=Tensor[(11, 13, 13), uint16] */
}

def @func_6909() -> (Tensor[(11, 13, 13), float32], Tensor[(8, 8, 1), int32], int32, Tensor[(1, 64), int32]) {
  %488 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(8, 8, 1), int32], int32, Tensor[(1, 64), int32]) {
    %481 = @func_3618() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %482 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %483 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 64), int32] */, dtype="int32") /* ty=Tensor[(1, 64), int32] */;
    %484 = reshape(%482, newshape=[]) /* ty=int32 */;
    %485 = reshape(%483, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), int32] */;
    %486 = %481.0;
    %487 = @func_4513(%484, %485) /* ty=Tensor[(8, 8, 1), int32] */;
    (%486, %487, 8 /* ty=int32 */, meta[relay.Constant][22] /* ty=Tensor[(1, 64), int32] */)
  };
  %488() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(8, 8, 1), int32], int32, Tensor[(1, 64), int32]) */
}

def @func_3395(%var_3391: uint64, %var_3392: Tensor[(8, 13, 13), uint64], %var_3393: Tensor[(936), float64], %var_3394: Tensor[(8, 13, 13), bool]) -> (Tensor[(6, 13, 12), int32], Tensor[(936), float64], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(8, 13, 13), uint32]) {
  %504 = fn (%var_3344: uint64, %var_3345: Tensor[(8, 13, 13), uint64], %var_3362: Tensor[(936), float64], %var_3385: Tensor[(8, 13, 13), bool]) -> (Tensor[(6, 13, 12), int32], Tensor[(936), float64], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(8, 13, 13), uint32]) {
    %489 = cast(%var_3362, dtype="float64") /* ty=Tensor[(936), float64] */;
    %490 = cast(%var_3362, dtype="float64") /* ty=Tensor[(936), float64] */;
    %491 = reshape(%489, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
    %492 = reshape(%490, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
    %493 = cast(%var_3344, dtype="bool") /* ty=bool */;
    %494 = cast(%var_3345, dtype="bool") /* ty=Tensor[(8, 13, 13), bool] */;
    %495 = less(%493, %494) /* ty=Tensor[(8, 13, 13), bool] */;
    %496 = cast(%var_3385, dtype="uint32") /* ty=Tensor[(8, 13, 13), uint32] */;
    %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(%495, dtype="uint32") /* ty=Tensor[(8, 13, 13), uint32] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %500 = @func_64(%491, %492) /* ty=Tensor[(6, 13, 12), int32] */;
    %501 = @func_3161() /* ty=Tensor[(11, 13, 13), float32] */;
    %502 = @func_1124() /* ty=Tensor[(936, 1), float64] */;
    %503 = right_shift(%498, %499) /* ty=Tensor[(8, 13, 13), uint32] */;
    (%500, %var_3362, %501, %502, %503)
  };
  %504(%var_3391, %var_3392, %var_3393, %var_3394) /* ty=(Tensor[(6, 13, 12), int32], Tensor[(936), float64], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(8, 13, 13), uint32]) */
}

def @func_6700() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32]) {
  @func_6698() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_1300() -> (Tensor[(11, 13, 13), float32],) {
  %505 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %506 = %505.0;
  (%506,)
}

def @func_5743() -> Tensor[(11, 13, 13), float32] {
  %507 = @func_2103() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %507.1
}

def @func_5927(%var_5925: Tensor[(14, 15, 10), int8], %var_5926: Tensor[(1, 75), float64]) -> (Tensor[(14, 15, 10), float32], Tensor[(1, 15, 5), float64], Tensor[(1, 75), float64], Tensor[(6, 13, 12), float64]) {
  %520 = fn (%var_5902: Tensor[(14, 15, 10), int8], %var_5910: Tensor[(1, 75), float64]) -> (Tensor[(14, 15, 10), float32], Tensor[(1, 15, 5), float64], Tensor[(1, 75), float64], Tensor[(6, 13, 12), float64]) {
    %508 = cast(%var_5902, dtype="bool") /* ty=Tensor[(14, 15, 10), bool] */;
    %509 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(14, 15, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %510 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 15, 10), int8] */, dtype="bool") /* ty=Tensor[(14, 15, 10), bool] */;
    %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %512 = less(%510, %511) /* ty=Tensor[(14, 15, 10), bool] */;
    %513 = cast(%512, dtype="float32") /* ty=Tensor[(14, 15, 10), float32] */;
    %514 = cast(%var_5910, dtype="float64") /* ty=Tensor[(1, 75), float64] */;
    %515 = reshape(%514, newshape=[1, 15, 5]) /* ty=Tensor[(1, 15, 5), float64] */;
    %516 = @func_5452() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936), float64], Tensor[(6, 13, 12), float64], Tensor[(6, 13, 12), float64]) */;
    %517 = exp(%513) /* ty=Tensor[(14, 15, 10), float32] */;
    %518 = @func_454(%515) /* ty=Tensor[(1, 15, 5), float64] */;
    %519 = %516.3;
    (%517, %518, %var_5910, %519)
  };
  %520(%var_5925, %var_5926) /* ty=(Tensor[(14, 15, 10), float32], Tensor[(1, 15, 5), float64], Tensor[(1, 75), float64], Tensor[(6, 13, 12), float64]) */
}

def @func_4790() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936), int32]) {
  %521 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %522 = cast(meta[relay.Constant][24] /* ty=Tensor[(936), int32] */, dtype="int32") /* ty=Tensor[(936), int32] */;
  %523 = reshape(%522, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), int32] */;
  %524 = @func_1623(%523) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(6, 13, 12), uint32], Tensor[(6, 13, 12), float32]) */;
  %525 = %521.0;
  %526 = %524.2;
  (%525, %526, meta[relay.Constant][24] /* ty=Tensor[(936), int32] */)
}

def @func_7641() -> Tensor[(6, 13, 12), bool] {
  %527 = @func_4947() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) */;
  %527.1
}

def @func_3162() -> Tensor[(11, 13, 13), float32] {
  %529 = fn () -> Tensor[(11, 13, 13), float32] {
    %528 = @func_1939() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %528.0
  };
  %529() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_6415() -> Tensor[(11, 13, 13), float32] {
  %531 = fn () -> Tensor[(11, 13, 13), float32] {
    %530 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
    %530.0
  };
  %531() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_3867() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %535 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
    %532 = @func_3618() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %533 = %532.0;
    %534 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
    (%533, %534)
  };
  %535() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_2830() -> Tensor[(11, 13, 13), float32] {
  %537 = fn () -> Tensor[(11, 13, 13), float32] {
    %536 = @func_1487() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %536.0
  };
  %537() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_3715() -> Tensor[(11, 13, 13), float32] {
  %539 = fn () -> Tensor[(11, 13, 13), float32] {
    %538 = @func_3581() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %538.0
  };
  %539() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_5025() -> (Tensor[(11, 13, 13), float32],) {
  @func_5023() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_2202(%var_2200: Tensor[(3, 40), int64], %var_2201: Tensor[(1560), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(3, 40), int64], Tensor[(1560), int64]) {
  %550 = fn (%var_2189: Tensor[(3, 40), int64], %var_2190: Tensor[(1560), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(3, 40), int64], Tensor[(1560), int64]) {
    %540 = @func_1220() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %541 = %540.0;
    %542 = cast(%541, dtype="float32") /* ty=Tensor[(11, 13, 13), float32] */;
    %543 = cast(%var_2189, dtype="int64") /* ty=Tensor[(3, 40), int64] */;
    %544 = cast(%var_2190, dtype="int64") /* ty=Tensor[(1560), int64] */;
    %545 = reshape(%543, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), int64] */;
    %546 = reshape(%544, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int64] */;
    %547 = @func_327(%545, %546) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */;
    %548 = sqrt(%542) /* ty=Tensor[(11, 13, 13), float32] */;
    %549 = %547.0;
    (%548, %549, %var_2189, %var_2190)
  };
  %550(%var_2200, %var_2201) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(3, 40), int64], Tensor[(1560), int64]) */
}

def @func_6118() -> (Tensor[(468, 2), float64], Tensor[(8, 7, 8), float64]) {
  %557 = fn () -> (Tensor[(468, 2), float64], Tensor[(8, 7, 8), float64]) {
    %551 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
    %552 = @func_5017() /* ty=(Tensor[(8, 7, 8), float32], Tensor[(936, 1), float64]) */;
    %553 = %552.0;
    %554 = cast(%553, dtype="float64") /* ty=Tensor[(8, 7, 8), float64] */;
    %555 = %551.2;
    %556 = acosh(%554) /* ty=Tensor[(8, 7, 8), float64] */;
    (%555, %556)
  };
  %557() /* ty=(Tensor[(468, 2), float64], Tensor[(8, 7, 8), float64]) */
}

def @func_331(%var_329: Tensor[(15, 8, 1), int64], %var_330: Tensor[(15, 8, 13), int64]) -> (Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) {
  @func_327(%var_329, %var_330) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */
}

def @func_1126() -> Tensor[(936, 1), float64] {
  @func_1124() /* ty=Tensor[(936, 1), float64] */
}

def @func_7879() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %562 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
    %558 = @func_4629() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %559 = @func_6698() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32]) */;
    %560 = %558.0;
    %561 = %559.3;
    (%560, %561)
  };
  %562() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_1412(%var_1410: Tensor[(75), float64], %var_1411: Tensor[(75), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(1, 15, 5), float64], Tensor[(75), bool], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64]) {
  @func_1408(%var_1410, %var_1411) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(1, 15, 5), float64], Tensor[(75), bool], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64]) */
}

def @func_244() -> (Tensor[(11, 13, 13), float32],) {
  @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_4517(%var_4515: int32, %var_4516: Tensor[(8, 8, 1), int32]) -> Tensor[(8, 8, 1), int32] {
  @func_4513(%var_4515, %var_4516) /* ty=Tensor[(8, 8, 1), int32] */
}

def @func_3281(%var_3278: Tensor[(75), float64], %var_3279: Tensor[(75), float64], %var_3280: Tensor[(14, 5, 10), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(75), float32], Tensor[(14, 5, 10), uint32]) {
  %590 = fn (%var_3214: Tensor[(75), float64], %var_3218: Tensor[(75), float64], %var_3235: Tensor[(14, 5, 10), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(75), float32], Tensor[(14, 5, 10), uint32]) {
    %563 = @func_2637() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %564 = cast(%var_3214, dtype="float64") /* ty=Tensor[(75), float64] */;
    %565 = cast(%var_3214, dtype="float64") /* ty=Tensor[(75), float64] */;
    %566 = reshape(%564, newshape=[75]) /* ty=Tensor[(75), float64] */;
    %567 = reshape(%565, newshape=[75]) /* ty=Tensor[(75), float64] */;
    %568 = @func_1408(%566, %567) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(1, 15, 5), float64], Tensor[(75), bool], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64]) */;
    %569 = cast(%var_3218, dtype="float32") /* ty=Tensor[(75), float32] */;
    %570 = shape_of(%var_3214, dtype="int32") /* ty=Tensor[(1), int32] */;
    %571 = cast(%var_3214, dtype="float32") /* ty=Tensor[(75), float32] */;
    %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?), float32] */;
    %573 = @func_2847() /* ty=Tensor[(14, 5, 10), float64] */;
    %574 = cast(%573, dtype="float64") /* ty=Tensor[(14, 5, 10), float64] */;
    %575 = atanh(%574) /* ty=Tensor[(14, 5, 10), float64] */;
    %576 = cast(%var_3235, dtype="bool") /* ty=Tensor[(14, 5, 10), bool] */;
    %577 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
    %578 = cast(%573, dtype="bool") /* ty=Tensor[(14, 5, 10), bool] */;
    %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %580 = not_equal(%578, %579) /* ty=Tensor[(14, 5, 10), bool] */;
    %581 = cast(%580, dtype="uint32") /* ty=Tensor[(14, 5, 10), uint32] */;
    %582 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
    %583 = cast(%575, dtype="uint32") /* ty=Tensor[(14, 5, 10), uint32] */;
    %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %585 = %563.1;
    %586 = @func_1124() /* ty=Tensor[(936, 1), float64] */;
    %587 = %568.0;
    %588 = floor_mod(%571, %572) /* ty=Tensor[(75), float32] */;
    %589 = bitwise_xor(%583, %584) /* ty=Tensor[(14, 5, 10), uint32] */;
    (%585, %586, %587, %588, %589)
  };
  %590(%var_3278, %var_3279, %var_3280) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(75), float32], Tensor[(14, 5, 10), uint32]) */
}

def @func_1782() -> (Tensor[(936, 1), float64],) {
  %591 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %592 = %591.2;
  (%592,)
}

def @func_7157(%var_7097: Tensor[(75), float64], %var_7108: Tensor[(6, 13, 12), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(75), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float32], Tensor[(16, 1560), bool], Tensor[(1, 120), int64], Tensor[(11, 13, 13), float32], Tensor[(12, 2080), float32]) {
  %593 = cast(%var_7097, dtype="float64") /* ty=Tensor[(75), float64] */;
  %594 = cast(%var_7097, dtype="float64") /* ty=Tensor[(75), float64] */;
  %595 = reshape(%593, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %596 = reshape(%594, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %597 = @func_1408(%595, %596) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(1, 15, 5), float64], Tensor[(75), bool], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64]) */;
  %598 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
  %599 = %598.0;
  %600 = cast(%599, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %601 = tan(%600) /* ty=Tensor[(6, 13, 12), float64] */;
  %602 = cast(%var_7108, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %606 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 120), int64] */, dtype="int64") /* ty=Tensor[(1, 120), int64] */;
  %607 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 2080), int64] */, dtype="int64") /* ty=Tensor[(12, 2080), int64] */;
  %608 = reshape(%606, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %609 = reshape(%607, newshape=[16, 1560]) /* ty=Tensor[(16, 1560), int64] */;
  %610 = @func_4328(%608, %609) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(16, 1560), bool], Tensor[(1, 1560), float32], Tensor[(75), bool], Tensor[(75), float64]) */;
  %611 = @func_3581() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %612 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 2080), int64] */, dtype="float32") /* ty=Tensor[(12, 2080), float32] */;
  %613 = sqrt(%612) /* ty=Tensor[(12, 2080), float32] */;
  %614 = cast(%613, dtype="float64") /* ty=Tensor[(12, 2080), float64] */;
  %615 = erf(%614) /* ty=Tensor[(12, 2080), float64] */;
  %616 = cast(%615, dtype="float32") /* ty=Tensor[(12, 2080), float32] */;
  %617 = %597.0;
  %618 = @func_2829() /* ty=Tensor[(11, 13, 13), float32] */;
  %619 = floor_divide(%604, %605) /* ty=Tensor[(6, 13, 12), float32] */;
  %620 = %610.4;
  %621 = %611.0;
  %622 = sin(%616) /* ty=Tensor[(12, 2080), float32] */;
  (%617, %var_7097, %618, %619, %620, meta[relay.Constant][25] /* ty=Tensor[(1, 120), int64] */, %621, %622)
}

def @func_2941() -> (Tensor[(936, 1), float64],) {
  @func_2939() /* ty=(Tensor[(936, 1), float64],) */
}

def @func_3468(%var_3466: Tensor[(624), int8], %var_3467: Tensor[(936, 15), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(13, 16, 3), int8], Tensor[(936, 624), bool], Tensor[(936, 15), uint16], Tensor[(13, 16, 3), int8]) {
  %639 = fn (%var_3438: Tensor[(624), int8], %var_3454: Tensor[(936, 15), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(13, 16, 3), int8], Tensor[(936, 624), bool], Tensor[(936, 15), uint16], Tensor[(13, 16, 3), int8]) {
    %623 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
    %624 = cast(%var_3438, dtype="int8") /* ty=Tensor[(624), int8] */;
    %625 = reshape(%624, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int8] */;
    %626 = @func_1782() /* ty=(Tensor[(936, 1), float64],) */;
    %627 = %626.0;
    %628 = cast(%var_3438, dtype="bool") /* ty=Tensor[(624), bool] */;
    %629 = cast(%627, dtype="bool") /* ty=Tensor[(936, 1), bool] */;
    %630 = cast(%627, dtype="uint16") /* ty=Tensor[(936, 1), uint16] */;
    %631 = cast(%var_3454, dtype="uint16") /* ty=Tensor[(936, 15), uint16] */;
    %632 = @func_2476(%625) /* ty=Tensor[(13, 16, 3), int8] */;
    %633 = cast(%632, dtype="int8") /* ty=Tensor[(13, 16, 3), int8] */;
    %634 = reshape(%633, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), int8] */;
    %635 = %623.1;
    %636 = greater_equal(%628, %629) /* ty=Tensor[(936, 624), bool] */;
    %637 = bitwise_xor(%630, %631) /* ty=Tensor[(936, 15), uint16] */;
    %638 = @func_2476(%634) /* ty=Tensor[(13, 16, 3), int8] */;
    (%635, %632, %636, %637, %638)
  };
  %639(%var_3466, %var_3467) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(13, 16, 3), int8], Tensor[(936, 624), bool], Tensor[(936, 15), uint16], Tensor[(13, 16, 3), int8]) */
}

def @func_64(%var_43: Tensor[(6, 13, 12), float64], %var_50: Tensor[(6, 13, 12), float64]) -> Tensor[(6, 13, 12), int32] {
  %640 = cast(%var_43, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %641 = rsqrt(%640) /* ty=Tensor[(6, 13, 12), float64] */;
  %642 = cast(%var_50, dtype="int32") /* ty=Tensor[(6, 13, 12), int32] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="int32") /* ty=Tensor[(6, 13, 12), int32] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  left_shift(%644, %645) /* ty=Tensor[(6, 13, 12), int32] */
}

def @func_1773() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) {
  %671 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) {
    %646 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %647 = cast(meta[relay.Constant][27] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
    %648 = cast(meta[relay.Constant][28] /* ty=Tensor[(1560), int64] */, dtype="int64") /* ty=Tensor[(1560), int64] */;
    %649 = reshape(%647, newshape=[120]) /* ty=Tensor[(120), int64] */;
    %650 = reshape(%648, newshape=[6, 260]) /* ty=Tensor[(6, 260), int64] */;
    %651 = @func_437(%649, %650) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(6, 260), int64], Tensor[(11, 13, 13), float32]) */;
    %652 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 14), float64] */;
    %653 = acos(%652) /* ty=Tensor[(5, 11, 14), float64] */;
    %654 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 14), float64] */;
    %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
    %656 = cast(%653, dtype="float64") /* ty=Tensor[(5, 11, 14), float64] */;
    %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %658 = subtract(%656, %657) /* ty=Tensor[(5, 11, 14), float64] */;
    %659 = cast(%653, dtype="int64") /* ty=Tensor[(5, 11, 14), int64] */;
    %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
    %661 = cast(%658, dtype="int64") /* ty=Tensor[(5, 11, 14), int64] */;
    %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %663 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 11, 14), float64] */, dtype="bool") /* ty=Tensor[(5, 11, 14), bool] */;
    %664 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
    %665 = cast(%653, dtype="bool") /* ty=Tensor[(5, 11, 14), bool] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %667 = %646.0;
    %668 = %651.1;
    %669 = minimum(%661, %662) /* ty=Tensor[(5, 11, 14), int64] */;
    %670 = less_equal(%665, %666) /* ty=Tensor[(5, 11, 14), bool] */;
    (%667, %668, meta[relay.Constant][27] /* ty=Tensor[(120), int64] */, meta[relay.Constant][28] /* ty=Tensor[(1560), int64] */, %669, %670)
  };
  %671() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) */
}

def @func_4558() -> (Tensor[(3, 40), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) {
  %679 = fn () -> (Tensor[(3, 40), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) {
    %672 = @func_4201() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(3, 40), int64], Tensor[(120), int64], Tensor[(15, 8, 13), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) */;
    %673 = %672.1;
    %674 = cast(%673, dtype="float32") /* ty=Tensor[(3, 40), float32] */;
    %675 = @func_382() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
    %676 = tan(%674) /* ty=Tensor[(3, 40), float32] */;
    %677 = %675.0;
    %678 = @func_539() /* ty=Tensor[(11, 13, 13), float32] */;
    (%676, %677, %678)
  };
  %679() /* ty=(Tensor[(3, 40), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */
}

def @func_4420() -> (Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1, 120), int64]) {
  %680 = @func_4201() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(3, 40), int64], Tensor[(120), int64], Tensor[(15, 8, 13), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) */;
  %681 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 120), int64] */, dtype="int64") /* ty=Tensor[(1, 120), int64] */;
  %682 = reshape(%681, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %683 = @func_3757(%682) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64]) */;
  %684 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
  %685 = %680.3;
  %686 = %683.2;
  (%684, %685, %686, meta[relay.Constant][30] /* ty=Tensor[(1, 120), int64] */)
}

def @func_4422() -> (Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1, 120), int64]) {
  @func_4420() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1, 120), int64]) */
}

def @func_7475() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), float64]) {
  %687 = @func_1496() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %688 = cast(meta[relay.Constant][31] /* ty=Tensor[(75), uint32] */, dtype="uint32") /* ty=Tensor[(75), uint32] */;
  %689 = cast(meta[relay.Constant][32] /* ty=Tensor[(675), uint32] */, dtype="uint32") /* ty=Tensor[(675), uint32] */;
  %690 = reshape(%688, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), uint32] */;
  %691 = reshape(%689, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint32] */;
  %692 = cast(meta[relay.Constant][32] /* ty=Tensor[(675), uint32] */, dtype="float64") /* ty=Tensor[(675), float64] */;
  %693 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
  %694 = %687.0;
  %695 = @func_1270(%690, %691) /* ty=Tensor[(15, 5, 9), uint32] */;
  %696 = sinh(%692) /* ty=Tensor[(675), float64] */;
  (%693, %694, %695, meta[relay.Constant][31] /* ty=Tensor[(75), uint32] */, %696)
}

def @func_7296(%var_7294: Tensor[(99), float32], %var_7295: Tensor[(99), float32]) -> (Tensor[(120), int64], Tensor[(99), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(9, 11, 11), float32], int32, Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool], Tensor[(11, 13, 13), float32]) {
  %726 = fn (%var_7189: Tensor[(99), float32], %var_7217: Tensor[(99), float32]) -> (Tensor[(120), int64], Tensor[(99), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(9, 11, 11), float32], int32, Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool], Tensor[(11, 13, 13), float32]) {
    %697 = @func_4420() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1, 120), int64]) */;
    %698 = cast(%var_7217, dtype="float32") /* ty=Tensor[(99), float32] */;
    %699 = shape_of(%var_7189, dtype="int32") /* ty=Tensor[(1), int32] */;
    %700 = cast(%var_7189, dtype="float32") /* ty=Tensor[(99), float32] */;
    %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?), float32] */;
    %702 = @func_1487() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %703 = cast(%var_7189, dtype="float32") /* ty=Tensor[(99), float32] */;
    %704 = cast(%var_7189, dtype="float32") /* ty=Tensor[(99), float32] */;
    %705 = reshape(%703, newshape=[9, 11, 1]) /* ty=Tensor[(9, 11, 1), float32] */;
    %706 = reshape(%704, newshape=[9, 11, 1]) /* ty=Tensor[(9, 11, 1), float32] */;
    %707 = @func_3829(%705, %706) /* ty=(Tensor[(9, 11, ?), float32],) */;
    %708 = %707.0;
    %709 = cast(%708, dtype="bool") /* ty=Tensor[(9, 11, ?), bool] */;
    %710 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 11, 11), float32] */, dtype="bool") /* ty=Tensor[(9, 11, 11), bool] */;
    %711 = greater_equal(%709, %710) /* ty=Tensor[(9, 11, 11), bool] */;
    %712 = cast(%711, dtype="float32") /* ty=Tensor[(9, 11, 11), float32] */;
    %713 = @func_6908() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(8, 8, 1), int32], int32, Tensor[(1, 64), int32]) */;
    %714 = @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
    %715 = @func_4947() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) */;
    %716 = %697.2;
    %717 = mod(%700, %701) /* ty=Tensor[(99), float32] */;
    %718 = %702.0;
    %719 = @func_492() /* ty=Tensor[(11, 13, 13), float32] */;
    %720 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
    %721 = tan(%712) /* ty=Tensor[(9, 11, 11), float32] */;
    %722 = %713.2;
    %723 = %714.5;
    %724 = %715.1;
    %725 = @func_492() /* ty=Tensor[(11, 13, 13), float32] */;
    (%716, %717, %718, %719, %720, %721, %722, %723, %724, %725)
  };
  %726(%var_7294, %var_7295) /* ty=(Tensor[(120), int64], Tensor[(99), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(9, 11, 11), float32], int32, Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool], Tensor[(11, 13, 13), float32]) */
}

def @func_2478(%var_2477: Tensor[(13, 16, 3), int8]) -> Tensor[(13, 16, 3), int8] {
  %731 = fn (%var_2456: Tensor[(13, 16, 3), int8]) -> Tensor[(13, 16, 3), int8] {
    %727 = cast(%var_2456, dtype="int8") /* ty=Tensor[(13, 16, 3), int8] */;
    %728 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(13, 16, 3), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %729 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 16, 3), int8] */, dtype="int8") /* ty=Tensor[(13, 16, 3), int8] */;
    %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_or(%729, %730) /* ty=Tensor[(13, 16, 3), int8] */
  };
  %731(%var_2477) /* ty=Tensor[(13, 16, 3), int8] */
}

def @func_5299(%var_5296: Tensor[(13, 10, 4), float32], %var_5297: Tensor[(13, 10, 4), float32], %var_5298: Tensor[(13, 10, 4), float64]) -> (Tensor[(13, 10, 4), uint64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 5), float64], Tensor[(11, 13, 13), float32], Tensor[(1, 120), int64], Tensor[(11, 13, 13), float32], Tensor[(1560), int64], Tensor[(5, 11, 14), bool], Tensor[(11, 13, 13), float32], Tensor[(13, 10, 4), int32]) {
  @func_5294(%var_5296, %var_5297, %var_5298) /* ty=(Tensor[(13, 10, 4), uint64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 5), float64], Tensor[(11, 13, 13), float32], Tensor[(1, 120), int64], Tensor[(11, 13, 13), float32], Tensor[(1560), int64], Tensor[(5, 11, 14), bool], Tensor[(11, 13, 13), float32], Tensor[(13, 10, 4), int32]) */
}

def @func_7161(%var_7159: Tensor[(75), float64], %var_7160: Tensor[(6, 13, 12), float64]) -> (Tensor[(11, 13, 13), float32], Tensor[(75), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float32], Tensor[(16, 1560), bool], Tensor[(1, 120), int64], Tensor[(11, 13, 13), float32], Tensor[(12, 2080), float32]) {
  @func_7157(%var_7159, %var_7160) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(75), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float32], Tensor[(16, 1560), bool], Tensor[(1, 120), int64], Tensor[(11, 13, 13), float32], Tensor[(12, 2080), float32]) */
}

def @func_7749() -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) {
  %745 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) {
    %732 = @func_3067() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %733 = @func_4947() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) */;
    %734 = %733.1;
    %735 = cast(%734, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
    %736 = log2(%735) /* ty=Tensor[(6, 13, 12), float32] */;
    %737 = cast(%736, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
    %738 = sinh(%737) /* ty=Tensor[(6, 13, 12), float64] */;
    %739 = cast(%738, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
    %740 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
    %741 = cast(%736, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
    %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %743 = %732.1;
    %744 = less(%741, %742) /* ty=Tensor[(6, 13, 12), bool] */;
    (%743, %744)
  };
  %745() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) */
}

def @func_5745() -> Tensor[(11, 13, 13), float32] {
  @func_5743() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_895() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) {
  @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */
}

def @func_7477() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), float64]) {
  @func_7475() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), float64]) */
}

def @func_1969(%var_1967: Tensor[(2, 468), float64]) -> (Tensor[(1560), int64], Tensor[(6, 13, 12), int32], Tensor[(2, 468), float64]) {
  %746 = @func_1772() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) */;
  %747 = cast(%var_1967, dtype="float64") /* ty=Tensor[(2, 468), float64] */;
  %748 = cast(%var_1967, dtype="float64") /* ty=Tensor[(2, 468), float64] */;
  %749 = reshape(%747, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %750 = reshape(%748, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
  %751 = %746.3;
  %752 = @func_64(%749, %750) /* ty=Tensor[(6, 13, 12), int32] */;
  (%751, %752, %var_1967)
}

def @func_1849() -> Tensor[(11, 13, 13), float32] {
  @func_539() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_4332(%var_4330: Tensor[(120), int64], %var_4331: Tensor[(16, 1560), int64]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(16, 1560), bool], Tensor[(1, 1560), float32], Tensor[(75), bool], Tensor[(75), float64]) {
  @func_4328(%var_4330, %var_4331) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(16, 1560), bool], Tensor[(1, 1560), float32], Tensor[(75), bool], Tensor[(75), float64]) */
}

def @func_4739() -> Tensor[(468, 2), float64] {
  @func_4737() /* ty=Tensor[(468, 2), float64] */
}

def @func_6435() -> Tensor[(11, 13, 13), float32] {
  %754 = fn () -> Tensor[(11, 13, 13), float32] {
    %753 = @func_3017() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(30, 4), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */;
    %753.5
  };
  %754() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_1063(%var_1061: Tensor[(120), int64]) -> (Tensor[(6, 13, 12), int32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) {
  @func_1060(%var_1061) /* ty=(Tensor[(6, 13, 12), int32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */
}

def @func_327(%var_320: Tensor[(15, 8, 1), int64], %var_321: Tensor[(15, 8, 13), int64]) -> (Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) {
  %755 = cast(%var_320, dtype="int64") /* ty=Tensor[(15, 8, 1), int64] */;
  %756 = cast(%var_321, dtype="int64") /* ty=Tensor[(15, 8, 13), int64] */;
  %757 = bitwise_and(%755, %756) /* ty=Tensor[(15, 8, 13), int64] */;
  %758 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  (%757, %758)
}

def @func_68(%var_66: Tensor[(6, 13, 12), float64], %var_67: Tensor[(6, 13, 12), float64]) -> Tensor[(6, 13, 12), int32] {
  @func_64(%var_66, %var_67) /* ty=Tensor[(6, 13, 12), int32] */
}

def @func_1274(%var_1272: Tensor[(15, 5, 1), uint32], %var_1273: Tensor[(15, 5, 9), uint32]) -> Tensor[(15, 5, 9), uint32] {
  @func_1270(%var_1272, %var_1273) /* ty=Tensor[(15, 5, 9), uint32] */
}

def @func_6402(%var_6342: Tensor[(6, 13, 12), bool], %var_6355: Tensor[(420), float32]) -> (Tensor[(936, 3), bool], Tensor[(2808), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), uint32], Tensor[(936, 1), float64], Tensor[(420), float32], Tensor[(8, 13, 13), uint32], uint64, Tensor[(1352), uint64], Tensor[(15, 7, 4), float32], Tensor[(11, 13, 13), float64]) {
  %759 = cast(meta[relay.Constant][35] /* ty=Tensor[(2808), float64] */, dtype="float64") /* ty=Tensor[(2808), float64] */;
  %760 = reshape(%759, newshape=[936, 3]) /* ty=Tensor[(936, 3), float64] */;
  %761 = @func_3812(%760) /* ty=(Tensor[(936, 3), bool],) */;
  %762 = @func_1772() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) */;
  %763 = @func_4947() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), bool]) */;
  %764 = %763.1;
  %765 = cast(%var_6342, dtype="uint32") /* ty=Tensor[(6, 13, 12), uint32] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%764, dtype="uint32") /* ty=Tensor[(6, 13, 12), uint32] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %769 = cast(meta[relay.Constant][36] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %770 = cast(meta[relay.Constant][37] /* ty=Tensor[(1352), uint64] */, dtype="uint64") /* ty=Tensor[(1352), uint64] */;
  %771 = cast(%var_6342, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %772 = cast(meta[relay.Constant][37] /* ty=Tensor[(1352), uint64] */, dtype="bool") /* ty=Tensor[(1352), bool] */;
  %773 = reshape(%769, newshape=[]) /* ty=uint64 */;
  %774 = reshape(%770, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), uint64] */;
  %775 = reshape(%771, newshape=[936]) /* ty=Tensor[(936), float64] */;
  %776 = reshape(%772, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), bool] */;
  %777 = @func_3390(%773, %774, %775, %776) /* ty=(Tensor[(6, 13, 12), int32], Tensor[(936), float64], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(8, 13, 13), uint32]) */;
  %778 = cast(%var_6355, dtype="float32") /* ty=Tensor[(420), float32] */;
  %779 = reshape(%778, newshape=[15, 7, 4]) /* ty=Tensor[(15, 7, 4), float32] */;
  %780 = @func_6056(%779) /* ty=(Tensor[(15, 7, 4), float32],) */;
  %781 = %780.0;
  %782 = cast(%781, dtype="float64") /* ty=Tensor[(15, 7, 4), float64] */;
  %783 = sin(%782) /* ty=Tensor[(15, 7, 4), float64] */;
  %784 = cast(%783, dtype="float32") /* ty=Tensor[(15, 7, 4), float32] */;
  %785 = @func_2755() /* ty=(Tensor[(11, 13, 13), float64],) */;
  %786 = %761.0;
  %787 = %762.0;
  %788 = add(%767, %768) /* ty=Tensor[(6, 13, 12), uint32] */;
  %789 = @func_1124() /* ty=Tensor[(936, 1), float64] */;
  %790 = %777.4;
  %791 = log(%784) /* ty=Tensor[(15, 7, 4), float32] */;
  %792 = %785.0;
  (%786, meta[relay.Constant][35] /* ty=Tensor[(2808), float64] */, %787, %788, %789, %var_6355, %790, meta[relay.Constant][36] /* ty=uint64 */, meta[relay.Constant][37] /* ty=Tensor[(1352), uint64] */, %791, %792)
}

def @func_3067() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %793 = @func_1772() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(5, 11, 14), int64], Tensor[(5, 11, 14), bool]) */;
  %794 = @func_1155() /* ty=(Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %795 = %793.1;
  %796 = %794.1;
  %797 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  (%795, %796, %797)
}

def @func_1346(%var_1328: bool) -> (Tensor[(11, 13, 13), float32], Tensor[(120), int64], bool, Tensor[(6, 20), int64], Tensor[(13, 26), float32]) {
  %798 = cast(%var_1328, dtype="bool") /* ty=bool */;
  %799 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 26), bool] */, dtype="bool") /* ty=Tensor[(13, 26), bool] */;
  %800 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 20), int64] */, dtype="int64") /* ty=Tensor[(6, 20), int64] */;
  %801 = reshape(%798, newshape=[]) /* ty=bool */;
  %802 = reshape(%799, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), bool] */;
  %803 = reshape(%800, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %804 = @func_980(%801, %802, %803) /* ty=(Tensor[(13, 13, 2), bool], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) */;
  %805 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 26), bool] */, dtype="float32") /* ty=Tensor[(13, 26), float32] */;
  %806 = @func_1310() /* ty=Tensor[(11, 13, 13), float32] */;
  %807 = %804.2;
  %808 = exp(%805) /* ty=Tensor[(13, 26), float32] */;
  (%806, %807, %var_1328, meta[relay.Constant][39] /* ty=Tensor[(6, 20), int64] */, %808)
}

def @func_2849() -> Tensor[(14, 5, 10), float64] {
  @func_2847() /* ty=Tensor[(14, 5, 10), float64] */
}

def @func_5716() -> (Tensor[(11, 13, 13), float32],) {
  %810 = fn () -> (Tensor[(11, 13, 13), float32],) {
    %809 = @func_539() /* ty=Tensor[(11, 13, 13), float32] */;
    (%809,)
  };
  %810() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_7586() -> Tensor[(11, 13, 13), float32] {
  %811 = fn () -> Tensor[(11, 13, 13), float32] {
    @func_1236() /* ty=Tensor[(11, 13, 13), float32] */
  };
  %811() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_2939() -> (Tensor[(936, 1), float64],) {
  %812 = @func_2637() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %813 = %812.0;
  (%813,)
}

def @func_4985(%var_4984: Tensor[(16, 4, 16), float64]) -> Tensor[(16, 4, 16), float32] {
  %817 = fn (%var_4976: Tensor[(16, 4, 16), float64]) -> Tensor[(16, 4, 16), float32] {
    %814 = cast(%var_4976, dtype="float64") /* ty=Tensor[(16, 4, 16), float64] */;
    %815 = log10(%814) /* ty=Tensor[(16, 4, 16), float64] */;
    %816 = cast(%815, dtype="float32") /* ty=Tensor[(16, 4, 16), float32] */;
    acosh(%816) /* ty=Tensor[(16, 4, 16), float32] */
  };
  %817(%var_4984) /* ty=Tensor[(16, 4, 16), float32] */
}

def @func_6494() -> Tensor[(6, 13, 12), uint8] {
  @func_6492() /* ty=Tensor[(6, 13, 12), uint8] */
}

def @func_3618() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %818 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %819 = @func_2829() /* ty=Tensor[(11, 13, 13), float32] */;
  %820 = %818.0;
  (%819, %820)
}

def @func_4792() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936), int32]) {
  @func_4790() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936), int32]) */
}

def @func_1939() -> (Tensor[(11, 13, 13), float32],) {
  %821 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %822 = %821.0;
  (%822,)
}

def @func_3815(%var_3813: Tensor[(936, 3), float64]) -> (Tensor[(936, 3), bool],) {
  @func_3812(%var_3813) /* ty=(Tensor[(936, 3), bool],) */
}

def @func_2153(%var_2152: Tensor[(936, 8), float32]) -> (Tensor[(11, 13, 13), float32], Tensor[(936, 8), uint8], Tensor[(11, 13, 13), float32]) {
  %835 = fn (%var_2134: Tensor[(936, 8), float32]) -> (Tensor[(11, 13, 13), float32], Tensor[(936, 8), uint8], Tensor[(11, 13, 13), float32]) {
    %823 = @func_1782() /* ty=(Tensor[(936, 1), float64],) */;
    %824 = %823.0;
    %825 = cast(%824, dtype="float32") /* ty=Tensor[(936, 1), float32] */;
    %826 = cast(meta[relay.Constant][40] /* ty=Tensor[(936, 8), float64] */, dtype="float32") /* ty=Tensor[(936, 8), float32] */;
    %827 = minimum(%825, %826) /* ty=Tensor[(936, 8), float32] */;
    %828 = cast(%var_2134, dtype="uint8") /* ty=Tensor[(936, 8), uint8] */;
    %829 = shape_of(%827, dtype="int32") /* ty=Tensor[(2), int32] */;
    %830 = cast(%827, dtype="uint8") /* ty=Tensor[(936, 8), uint8] */;
    %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %832 = @func_1849() /* ty=Tensor[(11, 13, 13), float32] */;
    %833 = bitwise_or(%830, %831) /* ty=Tensor[(936, 8), uint8] */;
    %834 = @func_1873() /* ty=Tensor[(11, 13, 13), float32] */;
    (%832, %833, %834)
  };
  %835(%var_2152) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 8), uint8], Tensor[(11, 13, 13), float32]) */
}

def @func_1626(%var_1624: Tensor[(6, 13, 12), int32]) -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(6, 13, 12), uint32], Tensor[(6, 13, 12), float32]) {
  @func_1623(%var_1624) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(6, 13, 12), uint32], Tensor[(6, 13, 12), float32]) */
}

def @func_5943() -> (Tensor[(11, 13, 13), float32],) {
  %836 = @func_4349() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %837 = %836.0;
  (%837,)
}

def @func_5586() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), uint16], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(60, 2), int64], Tensor[(11, 13, 13), float32], Tensor[(936, ?), uint64]) {
  %873 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), uint16], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(60, 2), int64], Tensor[(11, 13, 13), float32], Tensor[(936, ?), uint64]) {
    %838 = @func_2637() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %839 = @func_1668() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %840 = @func_2637() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %841 = %840.1;
    %842 = cast(%841, dtype="float32") /* ty=Tensor[(11, 13, 13), float32] */;
    %843 = reshape(%842, newshape=[11, 13, 13]) /* ty=Tensor[(11, 13, 13), float32] */;
    %844 = @func_3017() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(30, 4), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */;
    %845 = @func_3967() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %846 = @func_3067() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %847 = cast(meta[relay.Constant][41] /* ty=Tensor[(60, 2), int64] */, dtype="int64") /* ty=Tensor[(60, 2), int64] */;
    %848 = reshape(%847, newshape=[120]) /* ty=Tensor[(120), int64] */;
    %849 = @func_1060(%848) /* ty=(Tensor[(6, 13, 12), int32], Tensor[(15, 8, 13), int64], Tensor[(120), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */;
    %850 = @func_3581() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %851 = @func_2939() /* ty=(Tensor[(936, 1), float64],) */;
    %852 = %851.0;
    %853 = @func_4344() /* ty=(Tensor[(6, 13, 12), float64],) */;
    %854 = %853.0;
    %855 = cast(%854, dtype="int32") /* ty=Tensor[(6, 13, 12), int32] */;
    %856 = shape_of(%852, dtype="int32") /* ty=Tensor[(2), int32] */;
    %857 = cast(%852, dtype="int32") /* ty=Tensor[(936, 1), int32] */;
    %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %859 = minimum(%857, %858) /* ty=Tensor[(936, ?), int32] */;
    %860 = cast(%852, dtype="uint64") /* ty=Tensor[(936, 1), uint64] */;
    %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(2), int32] */;
    %862 = cast(%859, dtype="uint64") /* ty=Tensor[(936, ?), uint64] */;
    %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %864 = %838.2;
    %865 = %839.0;
    %866 = @func_807(%843) /* ty=Tensor[(11, 13, 13), uint16] */;
    %867 = %844.2;
    %868 = %845.0;
    %869 = %846.0;
    %870 = %849.0;
    %871 = %850.0;
    %872 = multiply(%862, %863) /* ty=Tensor[(936, ?), uint64] */;
    (%864, %865, %841, %866, %867, %868, %869, %870, meta[relay.Constant][41] /* ty=Tensor[(60, 2), int64] */, %871, %872)
  };
  %873() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), uint16], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(60, 2), int64], Tensor[(11, 13, 13), float32], Tensor[(936, ?), uint64]) */
}

def @func_1541() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %874 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %875 = @func_1220() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %876 = @func_1300() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %877 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %878 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %879 = %874.0;
  %880 = %875.0;
  %881 = %876.0;
  %882 = %877.0;
  %883 = %878.0;
  (%879, %880, %881, %882, %883)
}

def @func_6204() -> (Tensor[(11, 13, 13), float32],) {
  %886 = fn () -> (Tensor[(11, 13, 13), float32],) {
    %884 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
    %885 = %884.0;
    (%885,)
  };
  %886() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_7540() -> (bool, Tensor[(11, 13, 13), float32]) {
  %891 = fn () -> (bool, Tensor[(11, 13, 13), float32]) {
    %887 = @func_6900() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(13, 16, 3), int8], Tensor[(624), int8], Tensor[(936, 1), float64], Tensor[(120), int64], bool, Tensor[(11, 13, 13), float32]) */;
    %888 = @func_3636() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %889 = %887.5;
    %890 = %888.0;
    (%889, %890)
  };
  %891() /* ty=(bool, Tensor[(11, 13, 13), float32]) */
}

def @func_4202() -> (Tensor[(11, 13, 13), float32], Tensor[(3, 40), int64], Tensor[(120), int64], Tensor[(15, 8, 13), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) {
  %905 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(3, 40), int64], Tensor[(120), int64], Tensor[(15, 8, 13), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) {
    %892 = cast(meta[relay.Constant][42] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
    %893 = reshape(%892, newshape=[60, 2]) /* ty=Tensor[(60, 2), int64] */;
    %894 = @func_4117(%893) /* ty=(Tensor[(10, 1, 7), float64], Tensor[(3, 40), int64], Tensor[(60, 2), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %895 = %894.1;
    %896 = cast(%895, dtype="int64") /* ty=Tensor[(3, 40), int64] */;
    %897 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 1560), int64] */, dtype="int64") /* ty=Tensor[(1, 1560), int64] */;
    %898 = reshape(%896, newshape=[3, 40]) /* ty=Tensor[(3, 40), int64] */;
    %899 = reshape(%897, newshape=[1560]) /* ty=Tensor[(1560), int64] */;
    %900 = @func_2199(%898, %899) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 8, 13), int64], Tensor[(3, 40), int64], Tensor[(1560), int64]) */;
    %901 = @func_1496() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %902 = @func_4168() /* ty=Tensor[(11, 13, 13), float32] */;
    %903 = %900.1;
    %904 = %901.0;
    (%902, %895, meta[relay.Constant][42] /* ty=Tensor[(120), int64] */, %903, meta[relay.Constant][43] /* ty=Tensor[(1, 1560), int64] */, %904)
  };
  %905() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(3, 40), int64], Tensor[(120), int64], Tensor[(15, 8, 13), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) */
}

def @func_1155() -> (Tensor[(6, 13, 12), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  %906 = @func_635() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(936, 1), float64], Tensor[(6, 13, 12), int32], Tensor[(6, 13, 12), int32]) */;
  %907 = %906.3;
  %908 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 13, 12), int32] */, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %909 = shape_of(%907, dtype="int32") /* ty=Tensor[(3), int32] */;
  %910 = cast(%907, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %912 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %913 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %914 = power(%910, %911) /* ty=Tensor[(6, 13, 12), float32] */;
  %915 = %912.0;
  %916 = %913.0;
  (%914, %915, %916)
}

def @func_1543() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  @func_1541() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_1487() -> (Tensor[(11, 13, 13), float32],) {
  %917 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %918 = %917.0;
  (%918,)
}

def @func_207() -> Tensor[(11, 13, 13), float32] {
  @func_205() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_2847() -> Tensor[(14, 5, 10), float64] {
  @func_2717() /* ty=Tensor[(14, 5, 10), float64] */
}

def @func_3833(%var_3831: Tensor[(9, 11, 1), float32], %var_3832: Tensor[(9, 11, 1), float32]) -> (Tensor[(9, 11, ?), float32],) {
  @func_3829(%var_3831, %var_3832) /* ty=(Tensor[(9, 11, ?), float32],) */
}

def @func_667() -> (Tensor[(11, 13, 13), float32],) {
  %920 = fn () -> (Tensor[(11, 13, 13), float32],) {
    %919 = @func_539() /* ty=Tensor[(11, 13, 13), float32] */;
    (%919,)
  };
  %920() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_4350() -> (Tensor[(11, 13, 13), float32],) {
  %922 = fn () -> (Tensor[(11, 13, 13), float32],) {
    %921 = @func_1873() /* ty=Tensor[(11, 13, 13), float32] */;
    (%921,)
  };
  %922() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_6019() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) {
  @func_6017() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */
}

def @func_1221() -> (Tensor[(11, 13, 13), float32],) {
  %925 = fn () -> (Tensor[(11, 13, 13), float32],) {
    %923 = @func_724() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
    %924 = %923.0;
    (%924,)
  };
  %925() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_7042() -> Tensor[(11, 13, 13), float32] {
  @func_205() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_1311() -> Tensor[(11, 13, 13), float32] {
  %927 = fn () -> Tensor[(11, 13, 13), float32] {
    %926 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
    %926.0
  };
  %927() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_4737() -> Tensor[(468, 2), float64] {
  %928 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
  %928.2
}

def @func_5945() -> (Tensor[(11, 13, 13), float32],) {
  @func_5943() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_3637() -> (Tensor[(11, 13, 13), float32],) {
  %931 = fn () -> (Tensor[(11, 13, 13), float32],) {
    %929 = @func_2637() /* ty=(Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %930 = %929.1;
    (%930,)
  };
  %931() /* ty=(Tensor[(11, 13, 13), float32],) */
}

def @func_4437() -> Tensor[(11, 13, 13), float32] {
  @func_1873() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_4439() -> Tensor[(11, 13, 13), float32] {
  @func_4437() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_984(%var_981: bool, %var_982: Tensor[(13, 13, 2), bool], %var_983: Tensor[(120), int64]) -> (Tensor[(13, 13, 2), bool], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) {
  %943 = fn (%var_946: bool, %var_947: Tensor[(13, 13, 2), bool], %var_962: Tensor[(120), int64]) -> (Tensor[(13, 13, 2), bool], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) {
    %932 = cast(%var_946, dtype="bool") /* ty=bool */;
    %933 = cast(%var_947, dtype="bool") /* ty=Tensor[(13, 13, 2), bool] */;
    %934 = cast(%var_962, dtype="int64") /* ty=Tensor[(120), int64] */;
    %935 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 1560), int64] */, dtype="int64") /* ty=Tensor[(1, 1560), int64] */;
    %936 = reshape(%934, newshape=[15, 8, 1]) /* ty=Tensor[(15, 8, 1), int64] */;
    %937 = reshape(%935, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int64] */;
    %938 = @func_327(%936, %937) /* ty=(Tensor[(15, 8, 13), int64], Tensor[(11, 13, 13), float32]) */;
    %939 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %940 = logical_or(%932, %933) /* ty=Tensor[(13, 13, 2), bool] */;
    %941 = %938.1;
    %942 = %939.0;
    (%940, %941, %var_962, meta[relay.Constant][45] /* ty=Tensor[(1, 1560), int64] */, %942)
  };
  %943(%var_981, %var_982, %var_983) /* ty=(Tensor[(13, 13, 2), bool], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1, 1560), int64], Tensor[(11, 13, 13), float32]) */
}

def @func_3829(%var_3817: Tensor[(9, 11, 1), float32], %var_3818: Tensor[(9, 11, 1), float32]) -> (Tensor[(9, 11, ?), float32],) {
  %944 = cast(%var_3818, dtype="float32") /* ty=Tensor[(9, 11, 1), float32] */;
  %945 = shape_of(%var_3817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %946 = cast(%var_3817, dtype="float32") /* ty=Tensor[(9, 11, 1), float32] */;
  %947 = dyn.reshape(%944, %945, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %948 = power(%946, %947) /* ty=Tensor[(9, 11, ?), float32] */;
  (%948,)
}

def @func_1112(%var_1111: Tensor[(120), int64]) -> (Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1, 1560), int64]) {
  %957 = fn (%var_1095: Tensor[(120), int64]) -> (Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1, 1560), int64]) {
    %949 = @func_893() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64], Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */;
    %950 = cast(%var_1095, dtype="int64") /* ty=Tensor[(120), int64] */;
    %951 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 1560), int64] */, dtype="int64") /* ty=Tensor[(1, 1560), int64] */;
    %952 = reshape(%950, newshape=[120]) /* ty=Tensor[(120), int64] */;
    %953 = reshape(%951, newshape=[6, 260]) /* ty=Tensor[(6, 260), int64] */;
    %954 = @func_437(%952, %953) /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(6, 260), int64], Tensor[(11, 13, 13), float32]) */;
    %955 = %949.4;
    %956 = %954.4;
    (%955, %956, %var_1095, meta[relay.Constant][46] /* ty=Tensor[(1, 1560), int64] */)
  };
  %957(%var_1111) /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32], Tensor[(120), int64], Tensor[(1, 1560), int64]) */
}

def @func_3019() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(30, 4), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) {
  @func_3017() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(30, 4), int64], Tensor[(1560), int64], Tensor[(11, 13, 13), float32]) */
}

def @func_242() -> (Tensor[(11, 13, 13), float32],) {
  %958 = @func_205() /* ty=Tensor[(11, 13, 13), float32] */;
  (%958,)
}

def @func_2756() -> (Tensor[(11, 13, 13), float64],) {
  %963 = fn () -> (Tensor[(11, 13, 13), float64],) {
    %959 = @func_1668() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %960 = %959.0;
    %961 = cast(%960, dtype="float64") /* ty=Tensor[(11, 13, 13), float64] */;
    %962 = sin(%961) /* ty=Tensor[(11, 13, 13), float64] */;
    (%962,)
  };
  %963() /* ty=(Tensor[(11, 13, 13), float64],) */
}

def @func_5018() -> (Tensor[(8, 7, 8), float32], Tensor[(936, 1), float64]) {
  %967 = fn () -> (Tensor[(8, 7, 8), float32], Tensor[(936, 1), float64]) {
    %964 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 7, 8), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 8), float32] */;
    %965 = cosh(%964) /* ty=Tensor[(8, 7, 8), float32] */;
    %966 = @func_1124() /* ty=Tensor[(936, 1), float64] */;
    (%965, %966)
  };
  %967() /* ty=(Tensor[(8, 7, 8), float32], Tensor[(936, 1), float64]) */
}

def @func_6321() -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(16, 4, 16), float32], Tensor[(1024), float64]) {
  %976 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(16, 4, 16), float32], Tensor[(1024), float64]) {
    %968 = @func_2103() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
    %969 = @func_5131() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %970 = cast(meta[relay.Constant][48] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
    %971 = reshape(%970, newshape=[16, 4, 16]) /* ty=Tensor[(16, 4, 16), float64] */;
    %972 = %968.1;
    %973 = @func_539() /* ty=Tensor[(11, 13, 13), float32] */;
    %974 = %969.0;
    %975 = @func_4983(%971) /* ty=Tensor[(16, 4, 16), float32] */;
    (%972, %973, %974, %975, meta[relay.Constant][48] /* ty=Tensor[(1024), float64] */)
  };
  %976() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(16, 4, 16), float32], Tensor[(1024), float64]) */
}

def @func_6784(%var_6783: Tensor[(11, 13, 13), float32]) -> (Tensor[(11, 13, 13), bool], Tensor[(11, 13, 13), float32]) {
  %986 = fn (%var_6754: Tensor[(11, 13, 13), float32]) -> (Tensor[(11, 13, 13), bool], Tensor[(11, 13, 13), float32]) {
    %977 = @func_4629() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %978 = %977.0;
    %979 = cast(%var_6754, dtype="bool") /* ty=Tensor[(11, 13, 13), bool] */;
    %980 = shape_of(%978, dtype="int32") /* ty=Tensor[(3), int32] */;
    %981 = cast(%978, dtype="bool") /* ty=Tensor[(11, 13, 13), bool] */;
    %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %983 = @func_1668() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %984 = logical_or(%981, %982) /* ty=Tensor[(11, 13, 13), bool] */;
    %985 = %983.0;
    (%984, %985)
  };
  %986(%var_6783) /* ty=(Tensor[(11, 13, 13), bool], Tensor[(11, 13, 13), float32]) */
}

def @func_125() -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) {
  %994 = fn () -> (Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) {
    %987 = cast(meta[relay.Constant][49] /* ty=Tensor[(11, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 13, 13), float32] */;
    %988 = cast(meta[relay.Constant][50] /* ty=Tensor[(468, 2), float64] */, dtype="float64") /* ty=Tensor[(468, 2), float64] */;
    %989 = cast(meta[relay.Constant][50] /* ty=Tensor[(468, 2), float64] */, dtype="float64") /* ty=Tensor[(468, 2), float64] */;
    %990 = reshape(%988, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
    %991 = reshape(%989, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), float64] */;
    %992 = erf(%987) /* ty=Tensor[(11, 13, 13), float32] */;
    %993 = @func_64(%990, %991) /* ty=Tensor[(6, 13, 12), int32] */;
    (%992, %993, meta[relay.Constant][50] /* ty=Tensor[(468, 2), float64] */)
  };
  %994() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */
}

def @func_6492() -> Tensor[(6, 13, 12), uint8] {
  %995 = @func_5635() /* ty=(Tensor[(1, 120), int64], Tensor[(936), float64], Tensor[(6, 13, 12), float64]) */;
  %996 = %995.2;
  %997 = cast(meta[relay.Constant][51] /* ty=Tensor[(6, 13, 12), float64] */, dtype="uint8") /* ty=Tensor[(6, 13, 12), uint8] */;
  %998 = shape_of(%996, dtype="int32") /* ty=Tensor[(3), int32] */;
  %999 = cast(%996, dtype="uint8") /* ty=Tensor[(6, 13, 12), uint8] */;
  %1000 = dyn.reshape(%997, %998, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%999, %1000) /* ty=Tensor[(6, 13, 12), uint8] */
}

def @func_5405() -> (Tensor[(11, 13, 13), float32], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), uint32]) {
  @func_5403() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), uint32]) */
}

def @func_6286(%var_6285: uint32) -> (Tensor[(?, 7, 5), bool], Tensor[(?, 7, 5), bool]) {
  %1016 = fn (%var_6243: uint32) -> (Tensor[(?, 7, 5), bool], Tensor[(?, 7, 5), bool]) {
    %1001 = cast(%var_6243, dtype="uint32") /* ty=uint32 */;
    %1002 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 7, 5), uint32] */, dtype="uint32") /* ty=Tensor[(1, 7, 5), uint32] */;
    %1003 = right_shift(%1001, %1002) /* ty=Tensor[(1, 7, 5), uint32] */;
    %1004 = cast(%1003, dtype="float32") /* ty=Tensor[(1, 7, 5), float32] */;
    %1005 = tan(%1004) /* ty=Tensor[(1, 7, 5), float32] */;
    %1006 = cast(%1003, dtype="bool") /* ty=Tensor[(1, 7, 5), bool] */;
    %1007 = shape_of(%1005, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1008 = cast(%1005, dtype="bool") /* ty=Tensor[(1, 7, 5), bool] */;
    %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1010 = cast(%1003, dtype="bool") /* ty=Tensor[(1, 7, 5), bool] */;
    %1011 = shape_of(%1005, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1012 = cast(%1005, dtype="bool") /* ty=Tensor[(1, 7, 5), bool] */;
    %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1014 = greater_equal(%1008, %1009) /* ty=Tensor[(?, 7, 5), bool] */;
    %1015 = less_equal(%1012, %1013) /* ty=Tensor[(?, 7, 5), bool] */;
    (%1014, %1015)
  };
  %1016(%var_6285) /* ty=(Tensor[(?, 7, 5), bool], Tensor[(?, 7, 5), bool]) */
}

def @func_5023() -> (Tensor[(11, 13, 13), float32],) {
  %1017 = @func_1541() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32], Tensor[(11, 13, 13), float32]) */;
  %1018 = %1017.2;
  (%1018,)
}

def @func_492() -> Tensor[(11, 13, 13), float32] {
  %1019 = @func_298() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %1019.0
}

def @func_4169() -> Tensor[(11, 13, 13), float32] {
  %1021 = fn () -> Tensor[(11, 13, 13), float32] {
    %1020 = @func_666() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %1020.0
  };
  %1021() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_1851() -> Tensor[(11, 13, 13), float32] {
  @func_1849() /* ty=Tensor[(11, 13, 13), float32] */
}

def @func_383() -> (Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) {
  %1028 = fn () -> (Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) {
    %1022 = @func_124() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(6, 13, 12), int32], Tensor[(468, 2), float64]) */;
    %1023 = %1022.1;
    %1024 = cast(%1023, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
    %1025 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
    %1026 = acos(%1024) /* ty=Tensor[(6, 13, 12), float64] */;
    %1027 = %1025.0;
    (%1026, %1027)
  };
  %1028() /* ty=(Tensor[(6, 13, 12), float64], Tensor[(11, 13, 13), float32]) */
}

def @func_1124() -> Tensor[(936, 1), float64] {
  %1029 = @func_724() /* ty=(Tensor[(11, 13, 13), float32], Tensor[(936, 1), float64]) */;
  %1029.1
}

def @func_5403() -> (Tensor[(11, 13, 13), float32], Tensor[(15, 5, 9), uint32], Tensor[(75), uint32], Tensor[(675), uint32]) {
  %1030 = @func_242() /* ty=(Tensor[(11, 13, 13), float32],) */;
  %1031 = cast(meta[relay.Constant][53] /* ty=Tensor[(75), uint32] */, dtype="uint32") /* ty=Tensor[(75), uint32] */;
  %1032 = cast(meta[relay.Constant][54] /* ty=Tensor[(675), uint32] */, dtype="uint32") /* ty=Tensor[(675), uint32] */;
  %1033 = reshape(%1031, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), uint32] */;
  %1034 = reshape(%1032, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), uint32] */;
  %1035 = %1030.0;
  %1036 = @func_1270(%1033, %1034) /* ty=Tensor[(15, 5, 9), uint32] */;
  (%1035, %1036, meta[relay.Constant][53] /* ty=Tensor[(75), uint32] */, meta[relay.Constant][54] /* ty=Tensor[(675), uint32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen594/build/output.py", line 2942, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:37:20] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

