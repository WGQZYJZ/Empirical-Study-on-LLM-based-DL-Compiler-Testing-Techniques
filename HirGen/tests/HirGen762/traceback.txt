==========mod==========
#[version = "0.0.5"]
def @func_5284() -> Tensor[(168, 8), bool] {
  %0 = @func_3793() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) */;
  %0.0
}

def @func_1498(%var_1481: Tensor[(10, 4, 15), float32]) -> Tensor[(10, 4, 15), float32] {
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %2 = shape_of(%var_1481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%var_1481, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%3, %4) /* ty=Tensor[(10, 4, 15), float32] */
}

def @func_5573() -> (Tensor[(168, 8), bool],) {
  %5 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %6 = %5.0;
  (%6,)
}

def @func_1719() -> (Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  %7 = @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */;
  %8 = %7.5;
  %9 = @func_1521() /* ty=Tensor[(168, 8), bool] */;
  (%8, %9)
}

def @func_10159() -> (Tensor[(180, 4), float32],) {
  %10 = @func_6778() /* ty=(Tensor[(168, 8), int8], Tensor[(180, 4), float32], Tensor[(180, 4), float32]) */;
  %11 = %10.1;
  (%11,)
}

def @func_5896(%var_5880: Tensor[(11, 4, 13), uint8], %var_5881: Tensor[(11, 4, 13), uint8]) -> (Tensor[(11, 4, 13), uint8], Tensor[(16, 7, 12), int8]) {
  %12 = cast(%var_5881, dtype="uint8") /* ty=Tensor[(11, 4, 13), uint8] */;
  %13 = shape_of(%var_5880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%var_5880, dtype="uint8") /* ty=Tensor[(11, 4, 13), uint8] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %16 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %17 = bitwise_or(%14, %15) /* ty=Tensor[(11, 4, 13), uint8] */;
  %18 = %16.1;
  (%17, %18)
}

def @func_6778() -> (Tensor[(168, 8), int8], Tensor[(180, 4), float32], Tensor[(180, 4), float32]) {
  %19 = @func_5573() /* ty=(Tensor[(168, 8), bool],) */;
  %20 = %19.0;
  %21 = @func_3259() /* ty=(Tensor[(168, 8), bool],) */;
  %22 = %21.0;
  %23 = cast(%22, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
  %24 = shape_of(%20, dtype="int32") /* ty=Tensor[(2), int32] */;
  %25 = cast(%20, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %27 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %28 = %27.3;
  %29 = cast(%28, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %30 = sin(%29) /* ty=Tensor[(180, 4), float32] */;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %32 = reshape(%31, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %33 = @func_2010(%32) /* ty=(Tensor[(180, 4), float32],) */;
  %34 = bitwise_or(%25, %26) /* ty=Tensor[(168, 8), int8] */;
  %35 = %33.0;
  (%34, %30, %35)
}

def @func_2861() -> Tensor[(168, 8), float64] {
  %36 = @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */;
  %37 = %36.5;
  %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(168, 8), bool] */, dtype="float64") /* ty=Tensor[(168, 8), float64] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(2), int32] */;
  %40 = cast(%37, dtype="float64") /* ty=Tensor[(168, 8), float64] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  floor_divide(%40, %41) /* ty=Tensor[(168, 8), float64] */
}

def @func_6811() -> Tensor[(180, 4), float64] {
  %42 = @func_4248() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), bool], Tensor[(180, 4), float64]) */;
  %42.2
}

def @func_7354() -> (Tensor[(168, 8), uint16], Tensor[(168, 8), float32], Tensor[(168, 8), bool], Tensor[(7, 9, 12), float64], Tensor[(756), float64]) {
  %43 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
  %44 = @func_3529() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(168, 8), float32]) */;
  %45 = @func_4204() /* ty=(Tensor[(168, 8), bool],) */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %47 = reshape(%46, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float64] */;
  %48 = @func_4947(%47) /* ty=(Tensor[(7, 9, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), uint64]) */;
  %49 = %43.3;
  %50 = %44.1;
  %51 = %45.0;
  %52 = %48.0;
  (%49, %50, %51, %52, meta[relay.Constant][2] /* ty=Tensor[(756), float64] */)
}

def @func_1972() -> (Tensor[(168, 8), bool], Tensor[(180, 4), float32]) {
  %53 = @func_1521() /* ty=Tensor[(168, 8), bool] */;
  %54 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  (%53, %54)
}

def @func_8398() -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8]) {
  %55 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %56 = @func_8100() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %57 = %55.0;
  %58 = %56.0;
  (%57, %58)
}

def @func_3680() -> (Tensor[(168, 8), bool], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool]) {
  %59 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %60 = @func_3034() /* ty=(Tensor[(8, 6, 15), uint16],) */;
  %61 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %62 = @func_3119() /* ty=(Tensor[(168, 8), float32], Tensor[(168, 8), bool]) */;
  %63 = %59.0;
  %64 = %60.0;
  %65 = %61.1;
  %66 = %62.1;
  (%63, %64, %65, %66)
}

def @func_9719() -> (Tensor[(11, 14, 13), float32], Tensor[(1344), int8], Tensor[(720), float32]) {
  %67 = cast(meta[relay.Constant][3] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %68 = reshape(%67, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %69 = @func_2822(%68) /* ty=(Tensor[(6, 16, 12), float64], Tensor[(10, 4, 15), float32], Tensor[(600), float32], Tensor[(180, 4), float32], Tensor[(1344), int8], Tensor[(720), float32]) */;
  %70 = @func_8176() /* ty=Tensor[(11, 14, 13), float32] */;
  %71 = %69.4;
  (%70, %71, meta[relay.Constant][3] /* ty=Tensor[(720), float32] */)
}

def @func_10685() -> Tensor[(6, 16, 12), float64] {
  %72 = @func_3937() /* ty=(Tensor[(11, 14, 13), int64], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %72.1
}

def @func_7066() -> (Tensor[(12, 60), float32],) {
  %73 = @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */;
  %74 = %73.4;
  (%74,)
}

def @func_10145() -> (Tensor[(180, 4), float32],) {
  %75 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %76 = %75.3;
  (%76,)
}

def @func_10290() -> Tensor[(16, 7, 12), int8] {
  %77 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %77.0
}

def @func_2906() -> (Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) {
  %78 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %79 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %80 = %78.2;
  %81 = %79.1;
  (%80, %81)
}

def @func_2147() -> (Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) {
  %82 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %83 = %82.1;
  %84 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  (%83, %84)
}

def @func_6016() -> (Tensor[(168, 8), bool],) {
  %85 = @func_3937() /* ty=(Tensor[(11, 14, 13), int64], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %86 = %85.3;
  (%86,)
}

def @func_4659(%var_4653: Tensor[(720), float32]) -> (Tensor[(16, 7, 12), float64], Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(720), float32]) {
  %87 = @func_2997() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float64]) */;
  %88 = @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */;
  %89 = cast(%var_4653, dtype="float32") /* ty=Tensor[(720), float32] */;
  %90 = reshape(%89, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %91 = @func_3218(%90) /* ty=(Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(720), float32], Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32]) */;
  %92 = %87.1;
  %93 = %88.5;
  %94 = %91.3;
  (%92, %93, %94, %var_4653)
}

def @func_5756() -> (Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float64]) {
  %95 = @func_3793() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) */;
  %96 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %97 = %95.8;
  %98 = %96.4;
  (%97, %98)
}

def @func_8873() -> Tensor[(6, 16, 12), float64] {
  @func_6219() /* ty=Tensor[(6, 16, 12), float64] */
}

def @func_7249() -> (Tensor[(168, 8), bool],) {
  %99 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %100 = %99.0;
  (%100,)
}

def @func_3847(%var_3844: Tensor[(1344), int8]) -> (Tensor[(11, 14, 13), float64], Tensor[(8, 6, 15), float32], Tensor[(1344), int8], Tensor[(720), float32]) {
  %101 = @func_3358() /* ty=(Tensor[(11, 14, 13), float32], Tensor[(11, 14, 13), int64]) */;
  %102 = %101.0;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(11, 14, 13), float64] */;
  %104 = cast(%var_3844, dtype="int8") /* ty=Tensor[(1344), int8] */;
  %105 = cast(meta[relay.Constant][4] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %106 = reshape(%104, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
  %107 = reshape(%105, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %108 = @func_1069(%106, %107) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */;
  %109 = sqrt(%103) /* ty=Tensor[(11, 14, 13), float64] */;
  %110 = %108.2;
  (%109, %110, %var_3844, meta[relay.Constant][4] /* ty=Tensor[(720), float32] */)
}

def @func_8666(%var_8615: Tensor[(1344), int8]) -> (Tensor[(1344), int8], Tensor[(8, 6, 15), float64], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool]) {
  %111 = @func_7274() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16]) */;
  %112 = %111.1;
  %113 = cast(%var_8615, dtype="int8") /* ty=Tensor[(1344), int8] */;
  %114 = cast(%112, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  %115 = reshape(%113, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
  %116 = reshape(%114, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %117 = @func_1069(%115, %116) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */;
  %118 = %117.3;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(4, 180), float64] */;
  %120 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%112, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %123 = floor_mod(%121, %122) /* ty=Tensor[(8, 6, 15), float64] */;
  %124 = @func_5831() /* ty=Tensor[(16, 7, 12), int8] */;
  %125 = @func_4856() /* ty=Tensor[(168, 8), bool] */;
  (%var_8615, %123, %124, %125)
}

def @func_4204() -> (Tensor[(168, 8), bool],) {
  %126 = @func_4102() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %127 = %126.1;
  (%127,)
}

def @func_8729(%var_8700: Tensor[(720), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(10, 4, 15), float32], Tensor[(720), float32], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(13, 16, 7), float32]) {
  %128 = @func_8398() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8]) */;
  %129 = cast(%var_8700, dtype="float32") /* ty=Tensor[(720), float32] */;
  %130 = reshape(%129, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %131 = @func_2822(%130) /* ty=(Tensor[(6, 16, 12), float64], Tensor[(10, 4, 15), float32], Tensor[(600), float32], Tensor[(180, 4), float32], Tensor[(1344), int8], Tensor[(720), float32]) */;
  %132 = @func_3034() /* ty=(Tensor[(8, 6, 15), uint16],) */;
  %133 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %134 = %128.1;
  %135 = %131.1;
  %136 = %132.0;
  %137 = @func_3344() /* ty=Tensor[(16, 7, 12), int8] */;
  %138 = %133.0;
  (%134, %135, %var_8700, %136, %137, %138)
}

def @func_3259() -> (Tensor[(168, 8), bool],) {
  %139 = @func_1521() /* ty=Tensor[(168, 8), bool] */;
  (%139,)
}

def @func_8137() -> (Tensor[(16, 7, 12), int8], Tensor[(16, 13, 12), int8], Tensor[(2496), int16], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) {
  %140 = cast(meta[relay.Constant][5] /* ty=Tensor[(2496), float64] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %141 = reshape(%140, newshape=[2496]) /* ty=Tensor[(2496), float64] */;
  %142 = @func_5315(%141) /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) */;
  %143 = cast(meta[relay.Constant][6] /* ty=Tensor[(2496), float64] */, dtype="int16") /* ty=Tensor[(2496), int16] */;
  %144 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(2496), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %145 = cast(meta[relay.Constant][5] /* ty=Tensor[(2496), float64] */, dtype="int16") /* ty=Tensor[(2496), int16] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?), int16] */;
  %147 = minimum(%145, %146) /* ty=Tensor[(2496), int16] */;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %149 = reshape(%148, newshape=[2496]) /* ty=Tensor[(2496), float64] */;
  %150 = @func_5315(%149) /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) */;
  %151 = @func_6504() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float64]) */;
  %152 = @func_1663() /* ty=Tensor[(16, 7, 12), int8] */;
  %153 = %142.1;
  %154 = %150.0;
  %155 = %151.0;
  (%152, %153, %147, %154, %155)
}

def @func_7166() -> (Tensor[(180, 4), float32], Tensor[(16, 7, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(240), float32], Tensor[(6, 16, 12), float32], Tensor[(1920), float32]) {
  %156 = @func_6280() /* ty=(Tensor[(180, 4), float32],) */;
  %157 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %158 = cast(meta[relay.Constant][7] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %159 = %156.0;
  %160 = cast(%159, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %161 = reshape(%158, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %162 = reshape(%160, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %163 = @func_2288(%161, %162) /* ty=(Tensor[(5, 16, 3), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %164 = cast(meta[relay.Constant][8] /* ty=Tensor[(1920), float32] */, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %165 = reshape(%164, newshape=[12, 16, 10]) /* ty=Tensor[(12, 16, 10), float32] */;
  %166 = @func_5451(%165) /* ty=(Tensor[(12, 16, 10), float32], Tensor[(6, 16, 12), float32]) */;
  %167 = %157.1;
  %168 = %163.1;
  %169 = %166.1;
  (%159, %167, %168, meta[relay.Constant][7] /* ty=Tensor[(240), float32] */, %169, meta[relay.Constant][8] /* ty=Tensor[(1920), float32] */)
}

def @func_4880() -> (Tensor[(16, 7, 12), int8],) {
  %170 = @func_3344() /* ty=Tensor[(16, 7, 12), int8] */;
  (%170,)
}

def @func_8100() -> (Tensor[(16, 7, 12), int8],) {
  %171 = @func_1663() /* ty=Tensor[(16, 7, 12), int8] */;
  (%171,)
}

def @func_9432(%var_9417: Tensor[(13, 1, 10), int8], %var_9418: Tensor[(13, 7, 10), int8]) -> (Tensor[(13, 7, 10), int8], Tensor[(168, 8), bool]) {
  %172 = cast(%var_9417, dtype="int8") /* ty=Tensor[(13, 1, 10), int8] */;
  %173 = cast(%var_9418, dtype="int8") /* ty=Tensor[(13, 7, 10), int8] */;
  %174 = right_shift(%172, %173) /* ty=Tensor[(13, 7, 10), int8] */;
  %175 = @func_6848() /* ty=Tensor[(168, 8), bool] */;
  (%174, %175)
}

def @func_9994() -> Tensor[(16, 7, 12), int8] {
  @func_3344() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_5627() -> (Tensor[(16, 7, 12), int8],) {
  %176 = @func_5154() /* ty=Tensor[(16, 7, 12), int8] */;
  (%176,)
}

def @func_10937() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float64]) {
  %177 = @func_10010() /* ty=(Tensor[(168, 8), bool],) */;
  %178 = %177.0;
  %179 = @func_9994() /* ty=Tensor[(16, 7, 12), int8] */;
  %180 = @func_10685() /* ty=Tensor[(6, 16, 12), float64] */;
  (%178, %179, %180)
}

def @func_9254() -> (Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) {
  %181 = @func_6443() /* ty=(Tensor[(168, 8), bool],) */;
  %182 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %183 = @func_7643() /* ty=(Tensor[(180, 4), float32],) */;
  %184 = %181.0;
  %185 = %182.3;
  %186 = @func_6162() /* ty=Tensor[(16, 7, 12), int8] */;
  %187 = %183.0;
  (%184, %185, %186, %187)
}

def @func_2822(%var_2813: Tensor[(720), float32]) -> (Tensor[(6, 16, 12), float64], Tensor[(10, 4, 15), float32], Tensor[(600), float32], Tensor[(180, 4), float32], Tensor[(1344), int8], Tensor[(720), float32]) {
  %188 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %189 = cast(meta[relay.Constant][9] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %190 = reshape(%189, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float32] */;
  %191 = cast(meta[relay.Constant][10] /* ty=Tensor[(1344), int8] */, dtype="int8") /* ty=Tensor[(1344), int8] */;
  %192 = cast(%var_2813, dtype="float32") /* ty=Tensor[(720), float32] */;
  %193 = reshape(%191, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
  %194 = reshape(%192, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %195 = @func_2347(%193, %194) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), uint8], Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(720), float32]) */;
  %196 = %188.0;
  %197 = @func_1498(%190) /* ty=Tensor[(10, 4, 15), float32] */;
  %198 = %195.3;
  (%196, %197, meta[relay.Constant][9] /* ty=Tensor[(600), float32] */, %198, meta[relay.Constant][10] /* ty=Tensor[(1344), int8] */, %var_2813)
}

def @func_7189() -> (Tensor[(180, 4), float64],) {
  %199 = @func_6811() /* ty=Tensor[(180, 4), float64] */;
  (%199,)
}

def @func_10234() -> (Tensor[(16, 7, 12), int8], Tensor[(11, 4, 13), uint8], Tensor[(572), uint8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  %200 = cast(meta[relay.Constant][11] /* ty=Tensor[(572), uint8] */, dtype="uint8") /* ty=Tensor[(572), uint8] */;
  %201 = cast(meta[relay.Constant][11] /* ty=Tensor[(572), uint8] */, dtype="uint8") /* ty=Tensor[(572), uint8] */;
  %202 = reshape(%200, newshape=[11, 4, 13]) /* ty=Tensor[(11, 4, 13), uint8] */;
  %203 = reshape(%201, newshape=[11, 4, 13]) /* ty=Tensor[(11, 4, 13), uint8] */;
  %204 = @func_5896(%202, %203) /* ty=(Tensor[(11, 4, 13), uint8], Tensor[(16, 7, 12), int8]) */;
  %205 = @func_8100() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %206 = @func_8958() /* ty=(Tensor[(168, 8), bool],) */;
  %207 = %206.0;
  %208 = @func_4997() /* ty=Tensor[(168, 8), float32] */;
  %209 = cast(%208, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %210 = shape_of(%207, dtype="int32") /* ty=Tensor[(2), int32] */;
  %211 = cast(%207, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %213 = @func_830() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) */;
  %214 = @func_5154() /* ty=Tensor[(16, 7, 12), int8] */;
  %215 = %204.0;
  %216 = @func_6848() /* ty=Tensor[(168, 8), bool] */;
  %217 = %205.0;
  %218 = equal(%211, %212) /* ty=Tensor[(168, 8), bool] */;
  %219 = %213.1;
  (%214, %215, meta[relay.Constant][11] /* ty=Tensor[(572), uint8] */, %216, %217, %218, %219)
}

def @func_2997() -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float64]) {
  %220 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
  %221 = %220.1;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(16, 7, 12), float64] */;
  %223 = @func_1663() /* ty=Tensor[(16, 7, 12), int8] */;
  %224 = log2(%222) /* ty=Tensor[(16, 7, 12), float64] */;
  (%223, %224)
}

def @func_10703() -> Tensor[(6, 16, 12), float64] {
  @func_8873() /* ty=Tensor[(6, 16, 12), float64] */
}

def @func_5676(%var_5668: Tensor[(168, 8), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(168, 8), uint16]) {
  %225 = @func_4248() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), bool], Tensor[(180, 4), float64]) */;
  %226 = %225.0;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %228 = atanh(%227) /* ty=Tensor[(168, 8), float32] */;
  %229 = cast(%var_5668, dtype="uint16") /* ty=Tensor[(168, 8), uint16] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(2), int32] */;
  %231 = cast(%228, dtype="uint16") /* ty=Tensor[(168, 8), uint16] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %233 = @func_2025() /* ty=Tensor[(16, 7, 12), int8] */;
  %234 = maximum(%231, %232) /* ty=Tensor[(168, 8), uint16] */;
  (%233, %234)
}

def @func_3937() -> (Tensor[(11, 14, 13), int64], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  %235 = @func_3358() /* ty=(Tensor[(11, 14, 13), float32], Tensor[(11, 14, 13), int64]) */;
  %236 = @func_1954() /* ty=(Tensor[(6, 16, 12), float64],) */;
  %237 = %235.1;
  %238 = %236.0;
  %239 = @func_1521() /* ty=Tensor[(168, 8), bool] */;
  %240 = @func_1817() /* ty=Tensor[(168, 8), bool] */;
  (%237, %238, %239, %240)
}

def @func_1428() -> (Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) {
  %241 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %242 = %241.0;
  %243 = cast(%242, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
  %244 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 720), float32] */, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %245 = reshape(%243, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
  %246 = reshape(%244, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %247 = @func_1069(%245, %246) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */;
  %248 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 720), float32] */, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %249 = reshape(%248, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %250 = @func_434(%249) /* ty=(Tensor[(8, 6, 15), float32],) */;
  %251 = %250.0;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  %253 = reshape(%252, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %254 = @func_786(%253) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float32], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float32]) */;
  %255 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 720), float32] */, dtype="uint16") /* ty=Tensor[(1, 720), uint16] */;
  %256 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%251, dtype="uint16") /* ty=Tensor[(8, 6, 15), uint16] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %259 = cast(%242, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %260 = log(%259) /* ty=Tensor[(168, 8), float32] */;
  %261 = cast(%242, dtype="uint16") /* ty=Tensor[(168, 8), uint16] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(2), int32] */;
  %263 = cast(%260, dtype="uint16") /* ty=Tensor[(168, 8), uint16] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %265 = %247.1;
  %266 = %254.6;
  %267 = bitwise_or(%257, %258) /* ty=Tensor[(8, 6, 15), uint16] */;
  %268 = right_shift(%263, %264) /* ty=Tensor[(168, 8), uint16] */;
  (%265, %266, %267, %268)
}

def @func_2347(%var_2332: Tensor[(16, 7, 12), int8], %var_2345: Tensor[(720), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), uint8], Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(720), float32]) {
  %269 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %270 = @func_2025() /* ty=Tensor[(16, 7, 12), int8] */;
  %271 = cast(%var_2332, dtype="uint8") /* ty=Tensor[(16, 7, 12), uint8] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="uint8") /* ty=Tensor[(16, 7, 12), uint8] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %275 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %276 = cast(%var_2345, dtype="float32") /* ty=Tensor[(720), float32] */;
  %277 = reshape(%276, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %278 = @func_2010(%277) /* ty=(Tensor[(180, 4), float32],) */;
  %279 = %269.0;
  %280 = bitwise_or(%273, %274) /* ty=Tensor[(16, 7, 12), uint8] */;
  %281 = %275.0;
  %282 = %278.0;
  (%279, %280, %281, %282, %var_2345)
}

def @func_3034() -> (Tensor[(8, 6, 15), uint16],) {
  %283 = @func_2401() /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) */;
  %284 = %283.0;
  (%284,)
}

def @func_24(%var_6: Tensor[(16, 7, 12), bool], %var_7: Tensor[(16, 7, 12), bool], %var_15: Tensor[(16, 7, 12), bool]) -> Tensor[(16, 7, 12), int8] {
  %285 = cast(%var_7, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %286 = shape_of(%var_6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%var_6, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %289 = logical_and(%287, %288) /* ty=Tensor[(16, 7, 12), bool] */;
  %290 = cast(%var_15, dtype="int16") /* ty=Tensor[(16, 7, 12), int16] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="int16") /* ty=Tensor[(16, 7, 12), int16] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %294 = add(%292, %293) /* ty=Tensor[(16, 7, 12), int16] */;
  %295 = cast(%var_6, dtype="int8") /* ty=Tensor[(16, 7, 12), int8] */;
  %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%294, dtype="int8") /* ty=Tensor[(16, 7, 12), int8] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_xor(%297, %298) /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_7593(%var_7546: Tensor[(12, 2, 9), uint64]) -> Tensor[(12, 2, 9), uint64] {
  %299 = cast(%var_7546, dtype="uint64") /* ty=Tensor[(12, 2, 9), uint64] */;
  %300 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(12, 2, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 2, 9), uint64] */, dtype="uint64") /* ty=Tensor[(12, 2, 9), uint64] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%301, %302) /* ty=Tensor[(12, 2, 9), uint64] */
}

def @func_6443() -> (Tensor[(168, 8), bool],) {
  %303 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %304 = %303.0;
  (%304,)
}

def @func_3218(%var_3183: Tensor[(720), float32]) -> (Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(720), float32], Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32]) {
  %305 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %306 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %307 = cast(%var_3183, dtype="float32") /* ty=Tensor[(720), float32] */;
  %308 = reshape(%307, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
  %309 = @func_854(%308) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */;
  %310 = %309.0;
  %311 = cast(%310, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %312 = %305.1;
  %313 = %306.0;
  %314 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  %315 = erf(%311) /* ty=Tensor[(16, 7, 12), float32] */;
  (%312, %313, %var_3183, %314, %315)
}

def @func_5421() -> (Tensor[(180, 4), float32], Tensor[(168, 8), bool], Tensor[(168, 8), float64], Tensor[(168, 8), float32]) {
  %316 = @func_2906() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %317 = @func_4102() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %318 = @func_1521() /* ty=Tensor[(168, 8), bool] */;
  %319 = cast(%318, dtype="float64") /* ty=Tensor[(168, 8), float64] */;
  %320 = %316.1;
  %321 = %317.1;
  %322 = log10(%319) /* ty=Tensor[(168, 8), float64] */;
  %323 = @func_4997() /* ty=Tensor[(168, 8), float32] */;
  (%320, %321, %322, %323)
}

def @func_8549() -> (Tensor[(168, 8), bool], Tensor[(168, 8), int32], Tensor[(720), float32]) {
  %324 = @func_1719() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %325 = %324.1;
  %326 = cast(%325, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %327 = cast(meta[relay.Constant][14] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %328 = reshape(%326, newshape=[168, 8]) /* ty=Tensor[(168, 8), bool] */;
  %329 = reshape(%327, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %330 = @func_8524(%328, %329) /* ty=(Tensor[(168, 8), int32], Tensor[(168, 8), bool], Tensor[(6, 16, 12), float64], Tensor[(720), float32]) */;
  %331 = %330.0;
  (%325, %331, meta[relay.Constant][14] /* ty=Tensor[(720), float32] */)
}

def @func_4478(%var_4432: Tensor[(16, 7, 12), float64]) -> (Tensor[(16, 7, 12), float32], Tensor[(16, 7, 12), int8]) {
  %332 = @func_3793() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) */;
  %333 = %332.1;
  %334 = cast(%var_4432, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %338 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %339 = floor_mod(%336, %337) /* ty=Tensor[(16, 7, 12), float32] */;
  %340 = %338.0;
  (%339, %340)
}

def @func_5116(%var_5109: Tensor[(180, 4), float32]) -> (Tensor[(168, 8), bool], Tensor[(180, 4), bool]) {
  %341 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %342 = %341.0;
  %343 = cast(meta[relay.Constant][15] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(2), int32] */;
  %345 = cast(%342, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %347 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %348 = %347.3;
  %349 = cast(%var_5109, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(2), int32] */;
  %351 = cast(%348, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %353 = logical_and(%345, %346) /* ty=Tensor[(168, 8), bool] */;
  %354 = greater(%351, %352) /* ty=Tensor[(180, 4), bool] */;
  (%353, %354)
}

def @func_10816() -> (Tensor[(168, 8), bool], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  %355 = @func_7492() /* ty=(Tensor[(168, 8), bool],) */;
  %356 = @func_10010() /* ty=(Tensor[(168, 8), bool],) */;
  %357 = @func_7492() /* ty=(Tensor[(168, 8), bool],) */;
  %358 = %355.0;
  %359 = %356.0;
  %360 = %357.0;
  (%358, %359, %360)
}

def @func_5831() -> Tensor[(16, 7, 12), int8] {
  @func_1663() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_9968() -> Tensor[(3, 3, 6), float64] {
  %361 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 3, 6), float64] */;
  rsqrt(%361) /* ty=Tensor[(3, 3, 6), float64] */
}

def @func_10085() -> Tensor[(16, 13, 12), int8] {
  %362 = @func_8137() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 13, 12), int8], Tensor[(2496), int16], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) */;
  %362.1
}

def @func_1306() -> Tensor[(180, 4), float32] {
  %363 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %363.1
}

def @func_2686() -> (Tensor[(168, 8), uint16], Tensor[(180, 4), float32]) {
  %364 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
  %365 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %366 = %364.3;
  %367 = %365.1;
  (%366, %367)
}

def @func_1592() -> (Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) {
  %368 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %369 = %368.2;
  %370 = cast(%369, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %371 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  %372 = cast(%371, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %373 = reshape(%372, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %374 = @func_786(%373) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float32], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float32]) */;
  %375 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %376 = %375.1;
  %377 = cast(%376, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %378 = reshape(%377, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
  %379 = @func_854(%378) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */;
  %380 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %381 = log10(%370) /* ty=Tensor[(16, 7, 12), float32] */;
  %382 = %374.8;
  %383 = %379.2;
  %384 = %380.2;
  (%371, %381, %382, %376, %383, %384)
}

def @func_9291() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float32], Tensor[(168, 8), bool]) {
  %385 = @func_5573() /* ty=(Tensor[(168, 8), bool],) */;
  %386 = @func_5154() /* ty=Tensor[(16, 7, 12), int8] */;
  %387 = cast(%386, dtype="float64") /* ty=Tensor[(16, 7, 12), float64] */;
  %388 = reshape(%387, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), float64] */;
  %389 = @func_4478(%388) /* ty=(Tensor[(16, 7, 12), float32], Tensor[(16, 7, 12), int8]) */;
  %390 = %385.0;
  %391 = %389.0;
  %392 = @func_8598() /* ty=Tensor[(168, 8), bool] */;
  (%390, %386, %391, %392)
}

def @func_6848() -> Tensor[(168, 8), bool] {
  @func_1817() /* ty=Tensor[(168, 8), bool] */
}

def @func_6119() -> Tensor[(16, 7, 12), int8] {
  %393 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %393.0
}

def @func_1069(%var_1044: Tensor[(16, 7, 12), int8], %var_1065: Tensor[(4, 180), float32]) -> (Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) {
  %394 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %395 = %394.1;
  %396 = cast(%var_1044, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %400 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %401 = cast(%var_1065, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
  %402 = reshape(%401, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %403 = @func_434(%402) /* ty=(Tensor[(8, 6, 15), float32],) */;
  %404 = less(%398, %399) /* ty=Tensor[(16, 7, 12), bool] */;
  %405 = %400.0;
  %406 = %403.0;
  (%404, %405, %406, %var_1065)
}

def @func_4102() -> (Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  %407 = @func_1719() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %408 = @func_1817() /* ty=Tensor[(168, 8), bool] */;
  %409 = %407.1;
  (%408, %409)
}

def @func_1954() -> (Tensor[(6, 16, 12), float64],) {
  %410 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
  %411 = %410.0;
  (%411,)
}

def @func_3344() -> Tensor[(16, 7, 12), int8] {
  %412 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %412.0
}

def @func_4947(%var_4909: Tensor[(7, 9, 12), float64]) -> (Tensor[(7, 9, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), uint64]) {
  %413 = cast(%var_4909, dtype="float64") /* ty=Tensor[(7, 9, 12), float64] */;
  %414 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(7, 9, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 12), float64] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %417 = @func_2906() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %418 = @func_2087() /* ty=Tensor[(168, 8), bool] */;
  %419 = cast(%418, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %420 = asinh(%419) /* ty=Tensor[(168, 8), float32] */;
  %421 = cast(meta[relay.Constant][18] /* ty=Tensor[(168, 8), float32] */, dtype="uint64") /* ty=Tensor[(168, 8), uint64] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(2), int32] */;
  %423 = cast(%420, dtype="uint64") /* ty=Tensor[(168, 8), uint64] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %425 = floor_divide(%415, %416) /* ty=Tensor[(7, 9, 12), float64] */;
  %426 = %417.0;
  %427 = @func_2025() /* ty=Tensor[(16, 7, 12), int8] */;
  %428 = add(%423, %424) /* ty=Tensor[(168, 8), uint64] */;
  (%425, %426, %427, %428)
}

def @func_4856() -> Tensor[(168, 8), bool] {
  @func_1817() /* ty=Tensor[(168, 8), bool] */
}

def @func_854(%var_849: Tensor[(12, 60), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) {
  %429 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %430 = cast(%var_849, dtype="float32") /* ty=Tensor[(12, 60), float32] */;
  %431 = reshape(%430, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %432 = @func_786(%431) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float32], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float32]) */;
  %433 = %429.3;
  %434 = %432.3;
  (%433, %434, %var_849)
}

def @func_4248() -> (Tensor[(168, 8), bool], Tensor[(180, 4), bool], Tensor[(180, 4), float64]) {
  %435 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %436 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %437 = %436.1;
  %438 = cast(%437, dtype="float64") /* ty=Tensor[(180, 4), float64] */;
  %439 = log10(%438) /* ty=Tensor[(180, 4), float64] */;
  %440 = cast(%439, dtype="float64") /* ty=Tensor[(180, 4), float64] */;
  %441 = sigmoid(%440) /* ty=Tensor[(180, 4), float64] */;
  %442 = cast(%439, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(2), int32] */;
  %444 = cast(%441, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %446 = cast(%439, dtype="float64") /* ty=Tensor[(180, 4), float64] */;
  %447 = shape_of(%441, dtype="int32") /* ty=Tensor[(2), int32] */;
  %448 = cast(%441, dtype="float64") /* ty=Tensor[(180, 4), float64] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %450 = %435.0;
  %451 = logical_and(%444, %445) /* ty=Tensor[(180, 4), bool] */;
  %452 = multiply(%448, %449) /* ty=Tensor[(180, 4), float64] */;
  (%450, %451, %452)
}

def @func_5493() -> (Tensor[(168, 8), float32], Tensor[(720), float32]) {
  %453 = @func_3119() /* ty=(Tensor[(168, 8), float32], Tensor[(168, 8), bool]) */;
  %454 = %453.0;
  %455 = cast(%454, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
  %456 = reshape(%455, newshape=[1344]) /* ty=Tensor[(1344), int8] */;
  %457 = @func_3847(%456) /* ty=(Tensor[(11, 14, 13), float64], Tensor[(8, 6, 15), float32], Tensor[(1344), int8], Tensor[(720), float32]) */;
  %458 = %457.3;
  (%454, %458)
}

def @func_6280() -> (Tensor[(180, 4), float32],) {
  %459 = @func_2686() /* ty=(Tensor[(168, 8), uint16], Tensor[(180, 4), float32]) */;
  %460 = %459.1;
  (%460,)
}

def @func_2510(%var_2500: Tensor[(180, 4), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(180, 4), uint8], Tensor[(84, 16), float64]) {
  %461 = cast(meta[relay.Constant][19] /* ty=Tensor[(84, 16), bool] */, dtype="bool") /* ty=Tensor[(84, 16), bool] */;
  %462 = cast(meta[relay.Constant][19] /* ty=Tensor[(84, 16), bool] */, dtype="bool") /* ty=Tensor[(84, 16), bool] */;
  %463 = cast(meta[relay.Constant][19] /* ty=Tensor[(84, 16), bool] */, dtype="bool") /* ty=Tensor[(84, 16), bool] */;
  %464 = reshape(%461, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %465 = reshape(%462, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %466 = reshape(%463, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %467 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %468 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %469 = %468.1;
  %470 = cast(%var_2500, dtype="uint8") /* ty=Tensor[(180, 4), uint8] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(2), int32] */;
  %472 = cast(%469, dtype="uint8") /* ty=Tensor[(180, 4), uint8] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %474 = cast(meta[relay.Constant][19] /* ty=Tensor[(84, 16), bool] */, dtype="float64") /* ty=Tensor[(84, 16), float64] */;
  %475 = @func_24(%464, %465, %466) /* ty=Tensor[(16, 7, 12), int8] */;
  %476 = %467.0;
  %477 = bitwise_or(%472, %473) /* ty=Tensor[(180, 4), uint8] */;
  %478 = asin(%474) /* ty=Tensor[(84, 16), float64] */;
  (%475, %476, %477, %478)
}

def @func_5799() -> Tensor[(16, 7, 12), int8] {
  @func_2025() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_1817() -> Tensor[(168, 8), bool] {
  %479 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %479.2
}

def @func_10382() -> Tensor[(16, 7, 12), int8] {
  %480 = @func_7773() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8]) */;
  %480.0
}

def @func_9179() -> Tensor[(8, 6, 15), uint16] {
  %481 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
  %481.2
}

def @func_6540() -> (Tensor[(180, 4), float32],) {
  %482 = @func_5994() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool]) */;
  %483 = %482.0;
  (%483,)
}

def @func_3628() -> (Tensor[(168, 8), bool],) {
  %484 = @func_1719() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %485 = %484.1;
  (%485,)
}

def @func_3606(%var_3598: Tensor[(3, 3, 13), uint8], %var_3599: Tensor[(3, 3, 13), uint8]) -> Tensor[(3, 3, 13), uint8] {
  %486 = cast(%var_3599, dtype="uint8") /* ty=Tensor[(3, 3, 13), uint8] */;
  %487 = shape_of(%var_3598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%var_3598, dtype="uint8") /* ty=Tensor[(3, 3, 13), uint8] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  minimum(%488, %489) /* ty=Tensor[(3, 3, 13), uint8] */
}

def @func_7773() -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8]) {
  %490 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %491 = %490.2;
  %492 = @func_2025() /* ty=Tensor[(16, 7, 12), int8] */;
  (%491, %492)
}

def @main(%var_10989: Tensor[(168, 8), bool]) -> Tensor[(168, 8), bool] {
  %493 = @func_3628() /* ty=(Tensor[(168, 8), bool],) */;
  %494 = %493.0;
  %495 = cast(%var_10989, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(2), int32] */;
  %497 = cast(%494, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  less_equal(%497, %498) /* ty=Tensor[(168, 8), bool] */
}

def @func_6672() -> (Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool]) {
  %499 = @func_5493() /* ty=(Tensor[(168, 8), float32], Tensor[(720), float32]) */;
  %500 = @func_5421() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool], Tensor[(168, 8), float64], Tensor[(168, 8), float32]) */;
  %501 = %500.2;
  %502 = cast(%501, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %503 = @func_6016() /* ty=(Tensor[(168, 8), bool],) */;
  %504 = %499.0;
  %505 = tan(%502) /* ty=Tensor[(168, 8), float32] */;
  %506 = @func_6219() /* ty=Tensor[(6, 16, 12), float64] */;
  %507 = %503.0;
  (%504, %505, %506, %507)
}

def @func_8274() -> (Tensor[(168, 8), bool], Tensor[(720), float32], Tensor[(16, 7, 12), int8]) {
  %508 = @func_4102() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %509 = @func_7308() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) */;
  %510 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %511 = %508.0;
  %512 = %509.2;
  %513 = %510.1;
  (%511, %512, %513)
}

def @func_3529() -> (Tensor[(16, 7, 12), int8], Tensor[(168, 8), float32]) {
  %514 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %515 = @func_3259() /* ty=(Tensor[(168, 8), bool],) */;
  %516 = %515.0;
  %517 = cast(%516, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %518 = atan(%517) /* ty=Tensor[(168, 8), float32] */;
  %519 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %520 = %519.1;
  %521 = cast(%520, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %522 = shape_of(%518, dtype="int32") /* ty=Tensor[(2), int32] */;
  %523 = cast(%518, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %525 = %514.1;
  %526 = divide(%523, %524) /* ty=Tensor[(168, 8), float32] */;
  (%525, %526)
}

def @func_9406() -> Tensor[(168, 8), bool] {
  %527 = @func_8958() /* ty=(Tensor[(168, 8), bool],) */;
  %527.0
}

def @func_10491() -> (Tensor[(16, 7, 12), int8],) {
  %528 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %529 = %528.3;
  (%529,)
}

def @func_434(%var_422: Tensor[(8, 6, 15), float32]) -> (Tensor[(8, 6, 15), float32],) {
  %530 = cast(%var_422, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  %531 = acosh(%530) /* ty=Tensor[(8, 6, 15), float32] */;
  (%531,)
}

def @func_6138() -> (Tensor[(168, 8), float64],) {
  %532 = @func_5421() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool], Tensor[(168, 8), float64], Tensor[(168, 8), float32]) */;
  %533 = %532.2;
  (%533,)
}

def @func_1521() -> Tensor[(168, 8), bool] {
  %534 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %534.2
}

def @func_10619(%var_10610: Tensor[(720), float32]) -> (Tensor[(168, 8), float32], Tensor[(168, 8), bool], Tensor[(720), float32], Tensor[(720), float32], Tensor[(16, 7, 12), int8]) {
  %535 = @func_4102() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %536 = cast(%var_10610, dtype="float32") /* ty=Tensor[(720), float32] */;
  %537 = reshape(%536, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %538 = @func_4659(%537) /* ty=(Tensor[(16, 7, 12), float64], Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(720), float32]) */;
  %539 = @func_5627() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %540 = @func_4997() /* ty=Tensor[(168, 8), float32] */;
  %541 = %535.0;
  %542 = %538.3;
  %543 = %539.0;
  (%540, %541, %542, %var_10610, %543)
}

def @func_7841() -> (Tensor[(168, 8), bool],) {
  %544 = @func_2087() /* ty=Tensor[(168, 8), bool] */;
  (%544,)
}

def @func_10185(%var_10176: Tensor[(5, 3, 1), float64]) -> (Tensor[(5, 3, 1), float64],) {
  %545 = cast(%var_10176, dtype="float64") /* ty=Tensor[(5, 3, 1), float64] */;
  %546 = rsqrt(%545) /* ty=Tensor[(5, 3, 1), float64] */;
  (%546,)
}

def @func_6988(%var_6956: Tensor[(168, 8), bool]) -> (Tensor[(168, 8), int32], Tensor[(6, 16, 12), float64], Tensor[(720), float32], Tensor[(16, 7, 12), float64]) {
  %547 = @func_4204() /* ty=(Tensor[(168, 8), bool],) */;
  %548 = %547.0;
  %549 = cast(%var_6956, dtype="int32") /* ty=Tensor[(168, 8), int32] */;
  %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(2), int32] */;
  %551 = cast(%548, dtype="int32") /* ty=Tensor[(168, 8), int32] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %553 = cast(%var_6956, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
  %554 = cast(meta[relay.Constant][20] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %555 = reshape(%553, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
  %556 = reshape(%554, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %557 = @func_1069(%555, %556) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */;
  %558 = minimum(%551, %552) /* ty=Tensor[(168, 8), int32] */;
  %559 = %557.1;
  %560 = @func_6824() /* ty=Tensor[(16, 7, 12), float64] */;
  (%558, %559, meta[relay.Constant][20] /* ty=Tensor[(720), float32] */, %560)
}

def @func_6219() -> Tensor[(6, 16, 12), float64] {
  %561 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
  %561.0
}

def @func_2666(%var_2620: Tensor[(168, 8), bool]) -> (Tensor[(168, 8), int8], Tensor[(180, 4), float32], Tensor[(180, 4), float64]) {
  %562 = @func_2087() /* ty=Tensor[(168, 8), bool] */;
  %563 = cast(%var_2620, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(2), int32] */;
  %565 = cast(%562, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %567 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %568 = %567.1;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %570 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  %571 = cast(%570, dtype="float64") /* ty=Tensor[(180, 4), float64] */;
  %572 = left_shift(%565, %566) /* ty=Tensor[(168, 8), int8] */;
  %573 = log(%569) /* ty=Tensor[(180, 4), float32] */;
  %574 = exp(%571) /* ty=Tensor[(180, 4), float64] */;
  (%572, %573, %574)
}

def @func_7233() -> (Tensor[(16, 7, 12), int8],) {
  %575 = @func_2997() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float64]) */;
  %576 = %575.0;
  (%576,)
}

def @func_4769(%var_4748: Tensor[(11, 9, 5), float32]) -> (Tensor[(11, 9, 5), float32],) {
  %577 = cast(%var_4748, dtype="float32") /* ty=Tensor[(11, 9, 5), float32] */;
  %578 = asin(%577) /* ty=Tensor[(11, 9, 5), float32] */;
  (%578,)
}

def @func_3119() -> (Tensor[(168, 8), float32], Tensor[(168, 8), bool]) {
  %579 = @func_2861() /* ty=Tensor[(168, 8), float64] */;
  %580 = cast(%579, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %581 = acos(%580) /* ty=Tensor[(168, 8), float32] */;
  %582 = @func_2087() /* ty=Tensor[(168, 8), bool] */;
  (%581, %582)
}

def @func_2025() -> Tensor[(16, 7, 12), int8] {
  %583 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %583.4
}

def @func_9791(%var_9774: Tensor[(14, 12, 6), float32]) -> (Tensor[(14, 12, 6), float32], Tensor[(14, 12, 6), float64]) {
  %584 = cast(%var_9774, dtype="float32") /* ty=Tensor[(14, 12, 6), float32] */;
  %585 = cast(%var_9774, dtype="float64") /* ty=Tensor[(14, 12, 6), float64] */;
  %586 = cosh(%584) /* ty=Tensor[(14, 12, 6), float32] */;
  %587 = sinh(%585) /* ty=Tensor[(14, 12, 6), float64] */;
  (%586, %587)
}

def @func_8309() -> Tensor[(168, 8), bool] {
  %588 = @func_4102() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %588.1
}

def @func_9020() -> (Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(180, 4), float32], Tensor[(180, 4), float32]) {
  %589 = @func_6280() /* ty=(Tensor[(180, 4), float32],) */;
  %590 = @func_2906() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %591 = @func_8988() /* ty=Tensor[(16, 7, 12), float64] */;
  %592 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  %593 = %589.0;
  %594 = %590.1;
  (%591, %592, %593, %594)
}

def @func_9606(%var_9591: Tensor[(168, 8), bool]) -> Tensor[(168, 8), int16] {
  %595 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %596 = %595.0;
  %597 = cast(%var_9591, dtype="int16") /* ty=Tensor[(168, 8), int16] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(2), int32] */;
  %599 = cast(%596, dtype="int16") /* ty=Tensor[(168, 8), int16] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  multiply(%599, %600) /* ty=Tensor[(168, 8), int16] */
}

def @func_7492() -> (Tensor[(168, 8), bool],) {
  %601 = @func_5573() /* ty=(Tensor[(168, 8), bool],) */;
  %602 = %601.0;
  (%602,)
}

def @func_5154() -> Tensor[(16, 7, 12), int8] {
  %603 = @func_3793() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) */;
  %603.8
}

def @func_10033() -> Tensor[(168, 8), float64] {
  %604 = @func_6138() /* ty=(Tensor[(168, 8), float64],) */;
  %604.0
}

def @func_9377() -> (Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) {
  %605 = @func_1954() /* ty=(Tensor[(6, 16, 12), float64],) */;
  %606 = cast(meta[relay.Constant][21] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %607 = reshape(%606, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %608 = @func_3218(%607) /* ty=(Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(720), float32], Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32]) */;
  %609 = %605.0;
  %610 = @func_5154() /* ty=Tensor[(16, 7, 12), int8] */;
  %611 = %608.1;
  (%609, %610, %611, meta[relay.Constant][21] /* ty=Tensor[(720), float32] */)
}

def @func_2288(%var_2239: Tensor[(5, 16, 3), float32], %var_2246: Tensor[(720), float32]) -> (Tensor[(5, 16, 3), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) {
  %612 = cast(%var_2239, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
  %613 = cast(%var_2246, dtype="float32") /* ty=Tensor[(720), float32] */;
  %614 = reshape(%613, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %615 = @func_434(%614) /* ty=(Tensor[(8, 6, 15), float32],) */;
  %616 = sigmoid(%612) /* ty=Tensor[(5, 16, 3), float32] */;
  %617 = %615.0;
  (%616, %617, %var_2246)
}

def @func_7274() -> (Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16]) {
  %618 = @func_7233() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %619 = @func_2401() /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) */;
  %620 = %618.0;
  %621 = %619.0;
  (%620, %621)
}

def @func_4059() -> Tensor[(168, 8), bool] {
  @func_2087() /* ty=Tensor[(168, 8), bool] */
}

def @func_3301(%var_3290: Tensor[(180, 4), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(180, 4), bool]) {
  %622 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %623 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  %624 = cast(%var_3290, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
  %625 = shape_of(%623, dtype="int32") /* ty=Tensor[(2), int32] */;
  %626 = cast(%623, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %628 = %622.1;
  %629 = less_equal(%626, %627) /* ty=Tensor[(180, 4), bool] */;
  (%628, %629)
}

def @func_9493() -> (Tensor[(16, 7, 12), int8],) {
  %630 = @func_6119() /* ty=Tensor[(16, 7, 12), int8] */;
  (%630,)
}

def @func_4398(%var_4373: Tensor[(16, 13, 12), float64]) -> (Tensor[(16, 13, 12), int8],) {
  %631 = cast(%var_4373, dtype="float64") /* ty=Tensor[(16, 13, 12), float64] */;
  %632 = tan(%631) /* ty=Tensor[(16, 13, 12), float64] */;
  %633 = cast(%var_4373, dtype="int8") /* ty=Tensor[(16, 13, 12), int8] */;
  %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%632, dtype="int8") /* ty=Tensor[(16, 13, 12), int8] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %637 = left_shift(%635, %636) /* ty=Tensor[(16, 13, 12), int8] */;
  (%637,)
}

def @func_10663() -> (Tensor[(168, 8), bool], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) {
  %638 = @func_6443() /* ty=(Tensor[(168, 8), bool],) */;
  %639 = cast(meta[relay.Constant][22] /* ty=Tensor[(2496), float64] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %640 = reshape(%639, newshape=[2496]) /* ty=Tensor[(2496), float64] */;
  %641 = @func_5315(%640) /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) */;
  %642 = %638.0;
  %643 = %641.1;
  (%642, %643, meta[relay.Constant][22] /* ty=Tensor[(2496), float64] */)
}

def @func_10256() -> Tensor[(16, 7, 12), int8] {
  @func_3999() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_807() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  %644 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %645 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %646 = %644.2;
  %647 = %645.3;
  (%646, %647)
}

def @func_8598() -> Tensor[(168, 8), bool] {
  %648 = @func_6016() /* ty=(Tensor[(168, 8), bool],) */;
  %648.0
}

def @func_6162() -> Tensor[(16, 7, 12), int8] {
  @func_5799() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_6348() -> Tensor[(168, 8), float64] {
  %649 = @func_2861() /* ty=Tensor[(168, 8), float64] */;
  %650 = cast(%649, dtype="float64") /* ty=Tensor[(168, 8), float64] */;
  rsqrt(%650) /* ty=Tensor[(168, 8), float64] */
}

def @func_8958() -> (Tensor[(168, 8), bool],) {
  %651 = @func_7492() /* ty=(Tensor[(168, 8), bool],) */;
  %652 = %651.0;
  (%652,)
}

def @func_10967() -> (Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  %653 = @func_3119() /* ty=(Tensor[(168, 8), float32], Tensor[(168, 8), bool]) */;
  %654 = @func_9291() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float32], Tensor[(168, 8), bool]) */;
  %655 = %653.1;
  %656 = %654.0;
  (%655, %656)
}

def @func_4804() -> (Tensor[(15, 5, 5), float64],) {
  %657 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 5), float64] */;
  %658 = acos(%657) /* ty=Tensor[(15, 5, 5), float64] */;
  (%658,)
}

def @func_786(%var_733: Tensor[(4, 180), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float32], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float32]) {
  %659 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %660 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %661 = cast(%var_733, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
  %662 = reshape(%661, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %663 = @func_434(%662) /* ty=(Tensor[(8, 6, 15), float32],) */;
  %664 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %665 = cast(%var_733, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
  %666 = reshape(%665, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %667 = @func_434(%666) /* ty=(Tensor[(8, 6, 15), float32],) */;
  %668 = %667.0;
  %669 = cast(%var_733, dtype="uint16") /* ty=Tensor[(4, 180), uint16] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%668, dtype="uint16") /* ty=Tensor[(8, 6, 15), uint16] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %673 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %674 = %664.3;
  %675 = cast(%674, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %676 = %660.3;
  %677 = cast(%676, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %678 = cast(%674, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %679 = reshape(%675, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %680 = reshape(%677, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %681 = reshape(%678, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %682 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %683 = cast(%var_733, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
  %684 = reshape(%683, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %685 = @func_434(%684) /* ty=(Tensor[(8, 6, 15), float32],) */;
  %686 = %659.1;
  %687 = %663.0;
  %688 = multiply(%671, %672) /* ty=Tensor[(8, 6, 15), uint16] */;
  %689 = %673.1;
  %690 = @func_24(%679, %680, %681) /* ty=Tensor[(16, 7, 12), int8] */;
  %691 = %682.2;
  %692 = %685.0;
  (%686, %676, %687, %674, %688, %689, %690, %691, %692)
}

def @func_7643() -> (Tensor[(180, 4), float32],) {
  %693 = @func_5421() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool], Tensor[(168, 8), float64], Tensor[(168, 8), float32]) */;
  %694 = %693.0;
  (%694,)
}

def @func_7896() -> Tensor[(168, 8), bool] {
  %695 = @func_5994() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool]) */;
  %695.1
}

def @func_8216() -> Tensor[(16, 7, 12), int8] {
  @func_5831() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_4721(%var_4679: Tensor[(5, 6, 10), uint32], %var_4680: Tensor[(5, 6, 10), uint32], %var_4690: Tensor[(720), float32]) -> (Tensor[(5, 6, 10), bool], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) {
  %696 = cast(%var_4680, dtype="bool") /* ty=Tensor[(5, 6, 10), bool] */;
  %697 = shape_of(%var_4679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_4679, dtype="bool") /* ty=Tensor[(5, 6, 10), bool] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %700 = cast(%var_4690, dtype="float32") /* ty=Tensor[(720), float32] */;
  %701 = reshape(%700, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %702 = @func_3301(%701) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), bool]) */;
  %703 = equal(%698, %699) /* ty=Tensor[(5, 6, 10), bool] */;
  %704 = %702.0;
  (%703, %704, %var_4690)
}

def @func_1927(%var_1881: Tensor[(168, 8), bool]) -> (Tensor[(6, 16, 12), float64], Tensor[(168, 8), uint64], Tensor[(16, 7, 12), int8]) {
  %705 = @func_830() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) */;
  %706 = @func_1817() /* ty=Tensor[(168, 8), bool] */;
  %707 = cast(%var_1881, dtype="uint16") /* ty=Tensor[(168, 8), uint16] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(2), int32] */;
  %709 = cast(%706, dtype="uint16") /* ty=Tensor[(168, 8), uint16] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %711 = subtract(%709, %710) /* ty=Tensor[(168, 8), uint16] */;
  %712 = cast(%var_1881, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(2), int32] */;
  %714 = cast(%711, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %716 = less(%714, %715) /* ty=Tensor[(168, 8), bool] */;
  %717 = cast(meta[relay.Constant][24] /* ty=Tensor[(168, 8), bool] */, dtype="uint64") /* ty=Tensor[(168, 8), uint64] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(2), int32] */;
  %719 = cast(%716, dtype="uint64") /* ty=Tensor[(168, 8), uint64] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %721 = cast(%716, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %722 = cast(meta[relay.Constant][24] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %723 = cast(meta[relay.Constant][24] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %724 = reshape(%721, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %725 = reshape(%722, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %726 = reshape(%723, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %727 = %705.0;
  %728 = bitwise_and(%719, %720) /* ty=Tensor[(168, 8), uint64] */;
  %729 = @func_24(%724, %725, %726) /* ty=Tensor[(16, 7, 12), int8] */;
  (%727, %728, %729)
}

def @func_4997() -> Tensor[(168, 8), float32] {
  %730 = @func_3793() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) */;
  %730.3
}

def @func_6871() -> (Tensor[(180, 4), float32],) {
  %731 = @func_2906() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %732 = %731.1;
  (%732,)
}

def @func_2010(%var_2001: Tensor[(180, 4), float32]) -> (Tensor[(180, 4), float32],) {
  %733 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %734 = %733.1;
  %735 = cast(%var_2001, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(2), int32] */;
  %737 = cast(%734, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %739 = power(%737, %738) /* ty=Tensor[(180, 4), float32] */;
  (%739,)
}

def @func_8988() -> Tensor[(16, 7, 12), float64] {
  %740 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %740.1
}

def @func_10405() -> (Tensor[(168, 8), bool],) {
  %741 = @func_1817() /* ty=Tensor[(168, 8), bool] */;
  (%741,)
}

def @func_3999() -> Tensor[(16, 7, 12), int8] {
  @func_2025() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_10540() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  %742 = @func_7841() /* ty=(Tensor[(168, 8), bool],) */;
  %743 = %742.0;
  %744 = @func_10256() /* ty=Tensor[(16, 7, 12), int8] */;
  (%743, %744)
}

def @func_10010() -> (Tensor[(168, 8), bool],) {
  %745 = @func_6016() /* ty=(Tensor[(168, 8), bool],) */;
  %746 = %745.0;
  (%746,)
}

def @func_5451(%var_5437: Tensor[(12, 16, 10), float32]) -> (Tensor[(12, 16, 10), float32], Tensor[(6, 16, 12), float32]) {
  %747 = cast(%var_5437, dtype="float32") /* ty=Tensor[(12, 16, 10), float32] */;
  %748 = sqrt(%747) /* ty=Tensor[(12, 16, 10), float32] */;
  %749 = @func_5162() /* ty=Tensor[(6, 16, 12), float32] */;
  (%748, %749)
}

def @func_8524(%var_8473: Tensor[(168, 8), bool], %var_8519: Tensor[(720), float32]) -> (Tensor[(168, 8), int32], Tensor[(168, 8), bool], Tensor[(6, 16, 12), float64], Tensor[(720), float32]) {
  %750 = @func_1817() /* ty=Tensor[(168, 8), bool] */;
  %751 = cast(%var_8473, dtype="int32") /* ty=Tensor[(168, 8), int32] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(2), int32] */;
  %753 = cast(%750, dtype="int32") /* ty=Tensor[(168, 8), int32] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %755 = cast(%750, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %756 = shape_of(%var_8473, dtype="int32") /* ty=Tensor[(2), int32] */;
  %757 = cast(%var_8473, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %759 = cast(%750, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
  %760 = cast(%var_8519, dtype="float32") /* ty=Tensor[(720), float32] */;
  %761 = reshape(%759, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
  %762 = reshape(%760, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %763 = @func_1069(%761, %762) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */;
  %764 = bitwise_xor(%753, %754) /* ty=Tensor[(168, 8), int32] */;
  %765 = greater(%757, %758) /* ty=Tensor[(168, 8), bool] */;
  %766 = %763.1;
  (%764, %765, %766, %var_8519)
}

def @func_2401() -> (Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) {
  %767 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
  %768 = %767.2;
  %769 = @func_1663() /* ty=Tensor[(16, 7, 12), int8] */;
  (%768, %769)
}

def @func_3793() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) {
  %770 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %771 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %772 = @func_3628() /* ty=(Tensor[(168, 8), bool],) */;
  %773 = %772.0;
  %774 = cast(%773, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %775 = erf(%774) /* ty=Tensor[(168, 8), float32] */;
  %776 = cast(%775, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %777 = acosh(%776) /* ty=Tensor[(168, 8), float32] */;
  %778 = @func_3344() /* ty=Tensor[(16, 7, 12), int8] */;
  %779 = cast(%778, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %780 = shape_of(%777, dtype="int32") /* ty=Tensor[(2), int32] */;
  %781 = cast(%777, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %783 = cast(%775, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %784 = cast(meta[relay.Constant][25] /* ty=Tensor[(24, 10), float32] */, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %785 = %771.3;
  %786 = cast(%785, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %787 = reshape(%784, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %788 = reshape(%786, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %789 = @func_2288(%787, %788) /* ty=(Tensor[(5, 16, 3), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %790 = cast(%785, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %791 = reshape(%790, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %792 = @func_3301(%791) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), bool]) */;
  %793 = %792.1;
  %794 = cast(%793, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %795 = reshape(%794, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
  %796 = @func_854(%795) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */;
  %797 = @func_2087() /* ty=Tensor[(168, 8), bool] */;
  %798 = %770.1;
  %799 = power(%781, %782) /* ty=Tensor[(168, 8), float32] */;
  %800 = cos(%783) /* ty=Tensor[(168, 8), float32] */;
  %801 = %789.0;
  %802 = %796.1;
  (%797, %798, %785, %799, %800, %801, meta[relay.Constant][25] /* ty=Tensor[(24, 10), float32] */, %793, %802)
}

def @func_7112(%var_7098: Tensor[(12, 60), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(12, 60), float32]) {
  %803 = cast(%var_7098, dtype="float32") /* ty=Tensor[(12, 60), float32] */;
  %804 = reshape(%803, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %805 = @func_5116(%804) /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), bool]) */;
  %806 = cast(%var_7098, dtype="float32") /* ty=Tensor[(12, 60), float32] */;
  %807 = @func_3999() /* ty=Tensor[(16, 7, 12), int8] */;
  %808 = %805.0;
  %809 = log(%806) /* ty=Tensor[(12, 60), float32] */;
  (%807, %808, %809)
}

def @func_700() -> (Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  %810 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 16, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 16, 7), float32] */;
  %811 = cast(meta[relay.Constant][27] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %812 = cast(meta[relay.Constant][27] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %813 = cast(meta[relay.Constant][27] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %814 = reshape(%811, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %815 = reshape(%812, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %816 = reshape(%813, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %817 = cast(meta[relay.Constant][27] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %818 = cast(meta[relay.Constant][27] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %819 = cast(meta[relay.Constant][27] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %820 = reshape(%817, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %821 = reshape(%818, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %822 = reshape(%819, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %823 = exp(%810) /* ty=Tensor[(13, 16, 7), float32] */;
  %824 = @func_24(%814, %815, %816) /* ty=Tensor[(16, 7, 12), int8] */;
  %825 = @func_24(%820, %821, %822) /* ty=Tensor[(16, 7, 12), int8] */;
  (%823, %824, meta[relay.Constant][27] /* ty=Tensor[(168, 8), bool] */, %825)
}

def @func_5994() -> (Tensor[(180, 4), float32], Tensor[(168, 8), bool]) {
  %826 = @func_4102() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %827 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  %828 = %826.0;
  (%827, %828)
}

def @func_6504() -> (Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float64]) {
  %829 = @func_3628() /* ty=(Tensor[(168, 8), bool],) */;
  %830 = @func_3034() /* ty=(Tensor[(8, 6, 15), uint16],) */;
  %831 = %830.0;
  %832 = cast(%831, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
  %833 = @func_5799() /* ty=Tensor[(16, 7, 12), int8] */;
  %834 = %829.0;
  %835 = rsqrt(%832) /* ty=Tensor[(8, 6, 15), float64] */;
  (%833, %834, %835)
}

def @func_2087() -> Tensor[(168, 8), bool] {
  %836 = @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */;
  %836.5
}

def @func_3358() -> (Tensor[(11, 14, 13), float32], Tensor[(11, 14, 13), int64]) {
  %837 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 14, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 14, 13), float32] */;
  %838 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(11, 14, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 14, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 14, 13), float32] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %841 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 14, 13), float32] */, dtype="int64") /* ty=Tensor[(11, 14, 13), int64] */;
  %842 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(11, 14, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 14, 13), float32] */, dtype="int64") /* ty=Tensor[(11, 14, 13), int64] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %845 = divide(%839, %840) /* ty=Tensor[(11, 14, 13), float32] */;
  %846 = logical_xor(%843, %844) /* ty=Tensor[(11, 14, 13), int64] */;
  (%845, %846)
}

def @func_6070() -> (Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8]) {
  %847 = @func_830() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) */;
  %848 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %849 = %847.0;
  %850 = %848.1;
  (%849, %850)
}

def @func_7757(%var_7712: Tensor[(16, 7, 12), int8]) -> (Tensor[(16, 7, 12), uint64], Tensor[(6, 16, 12), float64]) {
  %851 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
  %852 = %851.1;
  %853 = cast(%var_7712, dtype="uint64") /* ty=Tensor[(16, 7, 12), uint64] */;
  %854 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%852, dtype="uint64") /* ty=Tensor[(16, 7, 12), uint64] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %857 = @func_3937() /* ty=(Tensor[(11, 14, 13), int64], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %858 = multiply(%855, %856) /* ty=Tensor[(16, 7, 12), uint64] */;
  %859 = %857.1;
  (%858, %859)
}

def @func_7471() -> Tensor[(168, 8), float32] {
  %860 = @func_5493() /* ty=(Tensor[(168, 8), float32], Tensor[(720), float32]) */;
  %860.0
}

def @func_8176() -> Tensor[(11, 14, 13), float32] {
  %861 = @func_3358() /* ty=(Tensor[(11, 14, 13), float32], Tensor[(11, 14, 13), int64]) */;
  %861.0
}

def @func_5315(%var_5297: Tensor[(2496), float64]) -> (Tensor[(8, 6, 15), uint16], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) {
  %862 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
  %863 = cast(%var_5297, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %864 = reshape(%863, newshape=[16, 13, 12]) /* ty=Tensor[(16, 13, 12), float64] */;
  %865 = @func_4398(%864) /* ty=(Tensor[(16, 13, 12), int8],) */;
  %866 = %862.2;
  %867 = %865.0;
  (%866, %867, %var_5297)
}

def @func_1194() -> (Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) {
  %868 = cast(meta[relay.Constant][30] /* ty=Tensor[(1344), int8] */, dtype="int8") /* ty=Tensor[(1344), int8] */;
  %869 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %870 = %869.1;
  %871 = cast(%870, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %872 = reshape(%868, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
  %873 = reshape(%871, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %874 = @func_1069(%872, %873) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */;
  %875 = %874.0;
  %876 = cast(%875, dtype="float64") /* ty=Tensor[(16, 7, 12), float64] */;
  %877 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %878 = cast(%870, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %879 = acosh(%878) /* ty=Tensor[(180, 4), float32] */;
  %880 = cast(%879, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %881 = reshape(%880, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
  %882 = @func_854(%881) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */;
  %883 = rsqrt(%876) /* ty=Tensor[(16, 7, 12), float64] */;
  %884 = %877.1;
  %885 = %882.1;
  (meta[relay.Constant][30] /* ty=Tensor[(1344), int8] */, %883, %884, %879, %885)
}

def @func_6824() -> Tensor[(16, 7, 12), float64] {
  %886 = @func_2997() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float64]) */;
  %886.1
}

def @func_7480() -> (Tensor[(168, 8), float32],) {
  %887 = @func_5493() /* ty=(Tensor[(168, 8), float32], Tensor[(720), float32]) */;
  %888 = %887.0;
  (%888,)
}

def @func_8058(%var_7946: Tensor[(10, 3, 1), float64], %var_7952: Tensor[(10, 3, 5), float64], %var_8040: Tensor[(168, 8), bool]) -> (Tensor[(10, 3, 5), uint32], Tensor[(168, 8), float32], Tensor[(16, 7, 12), int8], Tensor[(10, 3, ?), uint32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), float32], Tensor[(720), float32], Tensor[(168, 8), float32], Tensor[(10, 3, 1), float32]) {
  %889 = cast(%var_7946, dtype="uint32") /* ty=Tensor[(10, 3, 1), uint32] */;
  %890 = cast(%var_7952, dtype="uint32") /* ty=Tensor[(10, 3, 5), uint32] */;
  %891 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %892 = cast(%var_7946, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  %893 = cosh(%892) /* ty=Tensor[(10, 3, 1), float64] */;
  %894 = cast(%var_7946, dtype="uint32") /* ty=Tensor[(10, 3, 1), uint32] */;
  %895 = shape_of(%893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %896 = cast(%893, dtype="uint32") /* ty=Tensor[(10, 3, 1), uint32] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %898 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %899 = @func_3259() /* ty=(Tensor[(168, 8), bool],) */;
  %900 = %898.0;
  %901 = cast(%900, dtype="int8") /* ty=Tensor[(16, 7, 12), int8] */;
  %902 = reshape(%901, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
  %903 = @func_2204(%902) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(16, 7, 12), float32]) */;
  %904 = @func_5493() /* ty=(Tensor[(168, 8), float32], Tensor[(720), float32]) */;
  %905 = @func_5284() /* ty=Tensor[(168, 8), bool] */;
  %906 = cast(%var_8040, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %907 = shape_of(%905, dtype="int32") /* ty=Tensor[(2), int32] */;
  %908 = cast(%905, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %910 = cast(%893, dtype="float32") /* ty=Tensor[(10, 3, 1), float32] */;
  %911 = logical_xor(%889, %890) /* ty=Tensor[(10, 3, 5), uint32] */;
  %912 = @func_4997() /* ty=Tensor[(168, 8), float32] */;
  %913 = %891.0;
  %914 = subtract(%896, %897) /* ty=Tensor[(10, 3, ?), uint32] */;
  %915 = %899.0;
  %916 = %903.1;
  %917 = %904.1;
  %918 = floor_mod(%908, %909) /* ty=Tensor[(168, 8), float32] */;
  %919 = log(%910) /* ty=Tensor[(10, 3, 1), float32] */;
  (%911, %912, %913, %914, %900, %915, %916, %917, %918, %919)
}

def @func_4349(%var_4287: Tensor[(180, 4), float32], %var_4324: Tensor[(1344), bool]) -> (Tensor[(180, 4), float32], Tensor[(8, 6, 15), float32], Tensor[(6, 16, 12), float64], Tensor[(1344), bool], Tensor[(6, 16, 12), bool], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  %920 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %921 = %920.1;
  %922 = cast(%var_4287, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %923 = shape_of(%921, dtype="int32") /* ty=Tensor[(2), int32] */;
  %924 = cast(%921, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %926 = mod(%924, %925) /* ty=Tensor[(180, 4), float32] */;
  %927 = cast(%926, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %928 = reshape(%927, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %929 = @func_434(%928) /* ty=(Tensor[(8, 6, 15), float32],) */;
  %930 = cast(%var_4324, dtype="bool") /* ty=Tensor[(1344), bool] */;
  %931 = reshape(%930, newshape=[168, 8]) /* ty=Tensor[(168, 8), bool] */;
  %932 = @func_1927(%931) /* ty=(Tensor[(6, 16, 12), float64], Tensor[(168, 8), uint64], Tensor[(16, 7, 12), int8]) */;
  %933 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %934 = %933.0;
  %935 = cast(%934, dtype="float64") /* ty=Tensor[(6, 16, 12), float64] */;
  %936 = sin(%935) /* ty=Tensor[(6, 16, 12), float64] */;
  %937 = cast(%934, dtype="int16") /* ty=Tensor[(6, 16, 12), int16] */;
  %938 = shape_of(%936, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%936, dtype="int16") /* ty=Tensor[(6, 16, 12), int16] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %941 = bitwise_and(%939, %940) /* ty=Tensor[(6, 16, 12), int16] */;
  %942 = cast(%936, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %943 = shape_of(%941, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%941, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %946 = @func_4204() /* ty=(Tensor[(168, 8), bool],) */;
  %947 = @func_3937() /* ty=(Tensor[(11, 14, 13), int64], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %948 = %929.0;
  %949 = %932.0;
  %950 = not_equal(%944, %945) /* ty=Tensor[(6, 16, 12), bool] */;
  %951 = %946.0;
  %952 = %947.2;
  (%926, %948, %949, %var_4324, %950, %951, %952)
}

def @func_10742() -> (Tensor[(168, 8), float32],) {
  %953 = @func_7480() /* ty=(Tensor[(168, 8), float32],) */;
  %954 = %953.0;
  (%954,)
}

def @func_830() -> (Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) {
  %955 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 16, 12), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 12), float64] */;
  %956 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %957 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 16, 12), float64] */, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
  %958 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(6, 16, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %959 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 16, 12), float64] */, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
  %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %961 = exp(%955) /* ty=Tensor[(6, 16, 12), float64] */;
  %962 = %956.1;
  %963 = power(%959, %960) /* ty=Tensor[(6, 16, 12), float32] */;
  (%961, %962, %963)
}

def @func_3025() -> (Tensor[(16, 7, 12), int8],) {
  %964 = @func_1663() /* ty=Tensor[(16, 7, 12), int8] */;
  (%964,)
}

def @func_5162() -> Tensor[(6, 16, 12), float32] {
  %965 = @func_830() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) */;
  %965.2
}

def @func_7308() -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) {
  %966 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %967 = cast(meta[relay.Constant][33] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %968 = reshape(%967, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %969 = @func_2510(%968) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(180, 4), uint8], Tensor[(84, 16), float64]) */;
  %970 = %966.0;
  %971 = %969.1;
  (%970, %971, meta[relay.Constant][33] /* ty=Tensor[(720), float32] */)
}

def @func_6372(%var_6366: Tensor[(168, 8), bool]) -> (Tensor[(168, 8), bool],) {
  %972 = @func_3259() /* ty=(Tensor[(168, 8), bool],) */;
  %973 = %972.0;
  %974 = cast(%var_6366, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %975 = shape_of(%973, dtype="int32") /* ty=Tensor[(2), int32] */;
  %976 = cast(%973, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %977 = dyn.reshape(%974, %975, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %978 = logical_or(%976, %977) /* ty=Tensor[(168, 8), bool] */;
  (%978,)
}

def @func_8893() -> Tensor[(168, 8), float32] {
  %979 = @func_5421() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool], Tensor[(168, 8), float64], Tensor[(168, 8), float32]) */;
  %979.3
}

def @func_2204(%var_2193: Tensor[(16, 7, 12), int8]) -> (Tensor[(16, 7, 12), bool], Tensor[(16, 7, 12), float32]) {
  %980 = @func_2025() /* ty=Tensor[(16, 7, 12), int8] */;
  %981 = cast(%var_2193, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %982 = shape_of(%980, dtype="int32") /* ty=Tensor[(3), int32] */;
  %983 = cast(%980, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %985 = cast(%var_2193, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %986 = logical_or(%983, %984) /* ty=Tensor[(16, 7, 12), bool] */;
  %987 = sqrt(%985) /* ty=Tensor[(16, 7, 12), float32] */;
  (%986, %987)
}

def @func_1663() -> Tensor[(16, 7, 12), int8] {
  %988 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %988.1
}

def @func_8330() -> (Tensor[(16, 7, 12), int8],) {
  %989 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %990 = %989.0;
  (%990,)
}

def @func_4137() -> (Tensor[(12, 60), float64],) {
  %991 = @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */;
  %992 = %991.4;
  %993 = cast(%992, dtype="float64") /* ty=Tensor[(12, 60), float64] */;
  %994 = sigmoid(%993) /* ty=Tensor[(12, 60), float64] */;
  (%994,)
}

def @func_944() -> (Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) {
  %995 = @func_830() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) */;
  %996 = cast(meta[relay.Constant][34] /* ty=Tensor[(180, 4), float32] */, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %997 = reshape(%996, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
  %998 = @func_854(%997) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */;
  %999 = cast(meta[relay.Constant][34] /* ty=Tensor[(180, 4), float32] */, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %1000 = reshape(%999, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %1001 = @func_434(%1000) /* ty=(Tensor[(8, 6, 15), float32],) */;
  %1002 = %1001.0;
  %1003 = cast(%1002, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  %1004 = reshape(%1003, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
  %1005 = @func_854(%1004) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */;
  %1006 = cast(%1002, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
  %1007 = %995.0;
  %1008 = %998.1;
  %1009 = %1005.2;
  %1010 = atanh(%1006) /* ty=Tensor[(8, 6, 15), float64] */;
  (%1007, meta[relay.Constant][34] /* ty=Tensor[(180, 4), float32] */, %1008, %1009, %1010)
}

def @func_10890() -> (Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32]) {
  %1011 = @func_7274() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16]) */;
  %1012 = %1011.1;
  %1013 = cast(%1012, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  %1014 = @func_5994() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool]) */;
  %1015 = asinh(%1013) /* ty=Tensor[(8, 6, 15), float32] */;
  %1016 = %1014.0;
  (%1015, %1016)
}

def @func_9674(%var_9640: Tensor[(168, 8), bool]) -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), float32], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  %1017 = @func_8958() /* ty=(Tensor[(168, 8), bool],) */;
  %1018 = %1017.0;
  %1019 = cast(%var_9640, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %1020 = shape_of(%1018, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1021 = cast(%1018, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %1022 = dyn.reshape(%1019, %1020, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1023 = @func_9254() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %1024 = @func_2401() /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) */;
  %1025 = cast(%var_9640, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %1026 = @func_4204() /* ty=(Tensor[(168, 8), bool],) */;
  %1027 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %1028 = greater_equal(%1021, %1022) /* ty=Tensor[(168, 8), bool] */;
  %1029 = %1023.2;
  %1030 = %1024.1;
  %1031 = sqrt(%1025) /* ty=Tensor[(168, 8), float32] */;
  %1032 = %1026.0;
  %1033 = %1027.1;
  (%1028, %1029, %1030, %1031, %1032, %1033)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6016() -> (Tensor[(168, 8), bool],) {
  %0 = @func_3937() /* ty=(Tensor[(11, 14, 13), int64], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %1 = %0.3;
  (%1,)
}

def @func_7066() -> (Tensor[(12, 60), float32],) {
  %2 = @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */;
  %3 = %2.4;
  (%3,)
}

def @func_2906() -> (Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) {
  %4 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %5 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %6 = %4.2;
  %7 = %5.1;
  (%6, %7)
}

def @func_3629() -> (Tensor[(168, 8), bool],) {
  %10 = fn () -> (Tensor[(168, 8), bool],) {
    %8 = @func_1719() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
    %9 = %8.1;
    (%9,)
  };
  %10() /* ty=(Tensor[(168, 8), bool],) */
}

def @func_3999() -> Tensor[(16, 7, 12), int8] {
  @func_2025() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_6674() -> (Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool]) {
  @func_6672() /* ty=(Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool]) */
}

def @func_10188(%var_10186: Tensor[(5, 3, 1), float64]) -> (Tensor[(5, 3, 1), float64],) {
  @func_10185(%var_10186) /* ty=(Tensor[(5, 3, 1), float64],) */
}

def @func_2668(%var_2667: Tensor[(168, 8), bool]) -> (Tensor[(168, 8), int8], Tensor[(180, 4), float32], Tensor[(180, 4), float64]) {
  %24 = fn (%var_2620: Tensor[(168, 8), bool]) -> (Tensor[(168, 8), int8], Tensor[(180, 4), float32], Tensor[(180, 4), float64]) {
    %11 = @func_2087() /* ty=Tensor[(168, 8), bool] */;
    %12 = cast(%var_2620, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
    %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(2), int32] */;
    %14 = cast(%11, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %16 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
    %17 = %16.1;
    %18 = cast(%17, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
    %19 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
    %20 = cast(%19, dtype="float64") /* ty=Tensor[(180, 4), float64] */;
    %21 = left_shift(%14, %15) /* ty=Tensor[(168, 8), int8] */;
    %22 = log(%18) /* ty=Tensor[(180, 4), float32] */;
    %23 = exp(%20) /* ty=Tensor[(180, 4), float64] */;
    (%21, %22, %23)
  };
  %24(%var_2667) /* ty=(Tensor[(168, 8), int8], Tensor[(180, 4), float32], Tensor[(180, 4), float64]) */
}

def @func_7251() -> (Tensor[(168, 8), bool],) {
  @func_7249() /* ty=(Tensor[(168, 8), bool],) */
}

def @func_6374(%var_6373: Tensor[(168, 8), bool]) -> (Tensor[(168, 8), bool],) {
  %32 = fn (%var_6366: Tensor[(168, 8), bool]) -> (Tensor[(168, 8), bool],) {
    %25 = @func_3259() /* ty=(Tensor[(168, 8), bool],) */;
    %26 = %25.0;
    %27 = cast(%var_6366, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
    %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(2), int32] */;
    %29 = cast(%26, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
    %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %31 = logical_or(%29, %30) /* ty=Tensor[(168, 8), bool] */;
    (%31,)
  };
  %32(%var_6373) /* ty=(Tensor[(168, 8), bool],) */
}

def @func_2027() -> Tensor[(16, 7, 12), int8] {
  @func_2025() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_8549() -> (Tensor[(168, 8), bool], Tensor[(168, 8), int32], Tensor[(720), float32]) {
  %33 = @func_1719() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %34 = %33.1;
  %35 = cast(%34, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %37 = reshape(%35, newshape=[168, 8]) /* ty=Tensor[(168, 8), bool] */;
  %38 = reshape(%36, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %39 = @func_8524(%37, %38) /* ty=(Tensor[(168, 8), int32], Tensor[(168, 8), bool], Tensor[(6, 16, 12), float64], Tensor[(720), float32]) */;
  %40 = %39.0;
  (%34, %40, meta[relay.Constant][0] /* ty=Tensor[(720), float32] */)
}

def @func_8551() -> (Tensor[(168, 8), bool], Tensor[(168, 8), int32], Tensor[(720), float32]) {
  @func_8549() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), int32], Tensor[(720), float32]) */
}

def @func_4998() -> Tensor[(168, 8), float32] {
  %42 = fn () -> Tensor[(168, 8), float32] {
    %41 = @func_3793() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) */;
    %41.3
  };
  %42() /* ty=Tensor[(168, 8), float32] */
}

def @func_24(%var_6: Tensor[(16, 7, 12), bool], %var_7: Tensor[(16, 7, 12), bool], %var_15: Tensor[(16, 7, 12), bool]) -> Tensor[(16, 7, 12), int8] {
  %43 = cast(%var_7, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %44 = shape_of(%var_6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%var_6, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %47 = logical_and(%45, %46) /* ty=Tensor[(16, 7, 12), bool] */;
  %48 = cast(%var_15, dtype="int16") /* ty=Tensor[(16, 7, 12), int16] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="int16") /* ty=Tensor[(16, 7, 12), int16] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %52 = add(%50, %51) /* ty=Tensor[(16, 7, 12), int16] */;
  %53 = cast(%var_6, dtype="int8") /* ty=Tensor[(16, 7, 12), int8] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%52, dtype="int8") /* ty=Tensor[(16, 7, 12), int8] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_xor(%55, %56) /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_5164() -> Tensor[(6, 16, 12), float32] {
  @func_5162() /* ty=Tensor[(6, 16, 12), float32] */
}

def @func_434(%var_422: Tensor[(8, 6, 15), float32]) -> (Tensor[(8, 6, 15), float32],) {
  %57 = cast(%var_422, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  %58 = acosh(%57) /* ty=Tensor[(8, 6, 15), float32] */;
  (%58,)
}

def @func_2687() -> (Tensor[(168, 8), uint16], Tensor[(180, 4), float32]) {
  %63 = fn () -> (Tensor[(168, 8), uint16], Tensor[(180, 4), float32]) {
    %59 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
    %60 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
    %61 = %59.3;
    %62 = %60.1;
    (%61, %62)
  };
  %63() /* ty=(Tensor[(168, 8), uint16], Tensor[(180, 4), float32]) */
}

def @func_3681() -> (Tensor[(168, 8), bool], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool]) {
  %72 = fn () -> (Tensor[(168, 8), bool], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool]) {
    %64 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %65 = @func_3034() /* ty=(Tensor[(8, 6, 15), uint16],) */;
    %66 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %67 = @func_3119() /* ty=(Tensor[(168, 8), float32], Tensor[(168, 8), bool]) */;
    %68 = %64.0;
    %69 = %65.0;
    %70 = %66.1;
    %71 = %67.1;
    (%68, %69, %70, %71)
  };
  %72() /* ty=(Tensor[(168, 8), bool], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool]) */
}

def @func_3939() -> (Tensor[(11, 14, 13), int64], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  @func_3937() /* ty=(Tensor[(11, 14, 13), int64], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */
}

def @func_6281() -> (Tensor[(180, 4), float32],) {
  %75 = fn () -> (Tensor[(180, 4), float32],) {
    %73 = @func_2686() /* ty=(Tensor[(168, 8), uint16], Tensor[(180, 4), float32]) */;
    %74 = %73.1;
    (%74,)
  };
  %75() /* ty=(Tensor[(180, 4), float32],) */
}

def @func_10160() -> (Tensor[(180, 4), float32],) {
  %78 = fn () -> (Tensor[(180, 4), float32],) {
    %76 = @func_6778() /* ty=(Tensor[(168, 8), int8], Tensor[(180, 4), float32], Tensor[(180, 4), float32]) */;
    %77 = %76.1;
    (%77,)
  };
  %78() /* ty=(Tensor[(180, 4), float32],) */
}

def @func_9436(%var_9434: Tensor[(13, 1, 10), int8], %var_9435: Tensor[(13, 7, 10), int8]) -> (Tensor[(13, 7, 10), int8], Tensor[(168, 8), bool]) {
  @func_9432(%var_9434, %var_9435) /* ty=(Tensor[(13, 7, 10), int8], Tensor[(168, 8), bool]) */
}

def @func_701() -> (Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  %95 = fn () -> (Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
    %79 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 16, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 16, 7), float32] */;
    %80 = cast(meta[relay.Constant][2] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
    %81 = cast(meta[relay.Constant][2] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
    %82 = cast(meta[relay.Constant][2] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
    %83 = reshape(%80, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
    %84 = reshape(%81, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
    %85 = reshape(%82, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
    %86 = cast(meta[relay.Constant][2] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
    %87 = cast(meta[relay.Constant][2] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
    %88 = cast(meta[relay.Constant][2] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
    %89 = reshape(%86, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
    %90 = reshape(%87, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
    %91 = reshape(%88, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
    %92 = exp(%79) /* ty=Tensor[(13, 16, 7), float32] */;
    %93 = @func_24(%83, %84, %85) /* ty=Tensor[(16, 7, 12), int8] */;
    %94 = @func_24(%89, %90, %91) /* ty=Tensor[(16, 7, 12), int8] */;
    (%92, %93, meta[relay.Constant][2] /* ty=Tensor[(168, 8), bool] */, %94)
  };
  %95() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */
}

def @func_5315(%var_5297: Tensor[(2496), float64]) -> (Tensor[(8, 6, 15), uint16], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) {
  %96 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
  %97 = cast(%var_5297, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %98 = reshape(%97, newshape=[16, 13, 12]) /* ty=Tensor[(16, 13, 12), float64] */;
  %99 = @func_4398(%98) /* ty=(Tensor[(16, 13, 12), int8],) */;
  %100 = %96.2;
  %101 = %99.0;
  (%100, %101, %var_5297)
}

def @func_8218() -> Tensor[(16, 7, 12), int8] {
  @func_8216() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_6072() -> (Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8]) {
  @func_6070() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8]) */
}

def @func_8330() -> (Tensor[(16, 7, 12), int8],) {
  %102 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %103 = %102.0;
  (%103,)
}

def @func_7068() -> (Tensor[(12, 60), float32],) {
  @func_7066() /* ty=(Tensor[(12, 60), float32],) */
}

def @func_2908() -> (Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) {
  @func_2906() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */
}

def @func_10491() -> (Tensor[(16, 7, 12), int8],) {
  %104 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %105 = %104.3;
  (%105,)
}

def @func_6119() -> Tensor[(16, 7, 12), int8] {
  %106 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %106.0
}

def @func_2401() -> (Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) {
  %107 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
  %108 = %107.2;
  %109 = @func_1663() /* ty=Tensor[(16, 7, 12), int8] */;
  (%108, %109)
}

def @func_1719() -> (Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  %110 = @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */;
  %111 = %110.5;
  %112 = @func_1521() /* ty=Tensor[(168, 8), bool] */;
  (%111, %112)
}

def @func_807() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  %113 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %114 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %115 = %113.2;
  %116 = %114.3;
  (%115, %116)
}

def @func_3937() -> (Tensor[(11, 14, 13), int64], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  %117 = @func_3358() /* ty=(Tensor[(11, 14, 13), float32], Tensor[(11, 14, 13), int64]) */;
  %118 = @func_1954() /* ty=(Tensor[(6, 16, 12), float64],) */;
  %119 = %117.1;
  %120 = %118.0;
  %121 = @func_1521() /* ty=Tensor[(168, 8), bool] */;
  %122 = @func_1817() /* ty=Tensor[(168, 8), bool] */;
  (%119, %120, %121, %122)
}

def @func_7233() -> (Tensor[(16, 7, 12), int8],) {
  %123 = @func_2997() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float64]) */;
  %124 = %123.0;
  (%124,)
}

def @func_10742() -> (Tensor[(168, 8), float32],) {
  %125 = @func_7480() /* ty=(Tensor[(168, 8), float32],) */;
  %126 = %125.0;
  (%126,)
}

def @func_5574() -> (Tensor[(168, 8), bool],) {
  %129 = fn () -> (Tensor[(168, 8), bool],) {
    %127 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %128 = %127.0;
    (%128,)
  };
  %129() /* ty=(Tensor[(168, 8), bool],) */
}

def @func_7114(%var_7113: Tensor[(12, 60), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(12, 60), float32]) {
  %137 = fn (%var_7098: Tensor[(12, 60), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(12, 60), float32]) {
    %130 = cast(%var_7098, dtype="float32") /* ty=Tensor[(12, 60), float32] */;
    %131 = reshape(%130, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
    %132 = @func_5116(%131) /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), bool]) */;
    %133 = cast(%var_7098, dtype="float32") /* ty=Tensor[(12, 60), float32] */;
    %134 = @func_3999() /* ty=Tensor[(16, 7, 12), int8] */;
    %135 = %132.0;
    %136 = log(%133) /* ty=Tensor[(12, 60), float32] */;
    (%134, %135, %136)
  };
  %137(%var_7113) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(12, 60), float32]) */
}

def @func_809() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */
}

def @func_8666(%var_8615: Tensor[(1344), int8]) -> (Tensor[(1344), int8], Tensor[(8, 6, 15), float64], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool]) {
  %138 = @func_7274() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16]) */;
  %139 = %138.1;
  %140 = cast(%var_8615, dtype="int8") /* ty=Tensor[(1344), int8] */;
  %141 = cast(%139, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  %142 = reshape(%140, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
  %143 = reshape(%141, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %144 = @func_1069(%142, %143) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */;
  %145 = %144.3;
  %146 = cast(%145, dtype="float64") /* ty=Tensor[(4, 180), float64] */;
  %147 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%139, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %150 = floor_mod(%148, %149) /* ty=Tensor[(8, 6, 15), float64] */;
  %151 = @func_5831() /* ty=Tensor[(16, 7, 12), int8] */;
  %152 = @func_4856() /* ty=Tensor[(168, 8), bool] */;
  (%var_8615, %150, %151, %152)
}

def @func_4726(%var_4723: Tensor[(5, 6, 10), uint32], %var_4724: Tensor[(5, 6, 10), uint32], %var_4725: Tensor[(720), float32]) -> (Tensor[(5, 6, 10), bool], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) {
  @func_4721(%var_4723, %var_4724, %var_4725) /* ty=(Tensor[(5, 6, 10), bool], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) */
}

def @func_10939() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float64]) {
  @func_10937() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float64]) */
}

def @func_3795() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) {
  @func_3793() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) */
}

def @func_4721(%var_4679: Tensor[(5, 6, 10), uint32], %var_4680: Tensor[(5, 6, 10), uint32], %var_4690: Tensor[(720), float32]) -> (Tensor[(5, 6, 10), bool], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) {
  %153 = cast(%var_4680, dtype="bool") /* ty=Tensor[(5, 6, 10), bool] */;
  %154 = shape_of(%var_4679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%var_4679, dtype="bool") /* ty=Tensor[(5, 6, 10), bool] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %157 = cast(%var_4690, dtype="float32") /* ty=Tensor[(720), float32] */;
  %158 = reshape(%157, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %159 = @func_3301(%158) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), bool]) */;
  %160 = equal(%155, %156) /* ty=Tensor[(5, 6, 10), bool] */;
  %161 = %159.0;
  (%160, %161, %var_4690)
}

def @func_4881() -> (Tensor[(16, 7, 12), int8],) {
  %163 = fn () -> (Tensor[(16, 7, 12), int8],) {
    %162 = @func_3344() /* ty=Tensor[(16, 7, 12), int8] */;
    (%162,)
  };
  %163() /* ty=(Tensor[(16, 7, 12), int8],) */
}

def @func_2013(%var_2011: Tensor[(180, 4), float32]) -> (Tensor[(180, 4), float32],) {
  @func_2010(%var_2011) /* ty=(Tensor[(180, 4), float32],) */
}

def @func_8990() -> Tensor[(16, 7, 12), float64] {
  @func_8988() /* ty=Tensor[(16, 7, 12), float64] */
}

def @func_7472() -> Tensor[(168, 8), float32] {
  %165 = fn () -> Tensor[(168, 8), float32] {
    %164 = @func_5493() /* ty=(Tensor[(168, 8), float32], Tensor[(720), float32]) */;
    %164.0
  };
  %165() /* ty=Tensor[(168, 8), float32] */
}

def @func_10011() -> (Tensor[(168, 8), bool],) {
  %168 = fn () -> (Tensor[(168, 8), bool],) {
    %166 = @func_6016() /* ty=(Tensor[(168, 8), bool],) */;
    %167 = %166.0;
    (%167,)
  };
  %168() /* ty=(Tensor[(168, 8), bool],) */
}

def @func_5494() -> (Tensor[(168, 8), float32], Tensor[(720), float32]) {
  %175 = fn () -> (Tensor[(168, 8), float32], Tensor[(720), float32]) {
    %169 = @func_3119() /* ty=(Tensor[(168, 8), float32], Tensor[(168, 8), bool]) */;
    %170 = %169.0;
    %171 = cast(%170, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
    %172 = reshape(%171, newshape=[1344]) /* ty=Tensor[(1344), int8] */;
    %173 = @func_3847(%172) /* ty=(Tensor[(11, 14, 13), float64], Tensor[(8, 6, 15), float32], Tensor[(1344), int8], Tensor[(720), float32]) */;
    %174 = %173.3;
    (%170, %174)
  };
  %175() /* ty=(Tensor[(168, 8), float32], Tensor[(720), float32]) */
}

def @func_1429() -> (Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) {
  %204 = fn () -> (Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) {
    %176 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %177 = %176.0;
    %178 = cast(%177, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
    %179 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 720), float32] */, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
    %180 = reshape(%178, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
    %181 = reshape(%179, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
    %182 = @func_1069(%180, %181) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */;
    %183 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 720), float32] */, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
    %184 = reshape(%183, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
    %185 = @func_434(%184) /* ty=(Tensor[(8, 6, 15), float32],) */;
    %186 = %185.0;
    %187 = cast(%186, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
    %188 = reshape(%187, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
    %189 = @func_786(%188) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float32], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float32]) */;
    %190 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 720), float32] */, dtype="uint16") /* ty=Tensor[(1, 720), uint16] */;
    %191 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %192 = cast(%186, dtype="uint16") /* ty=Tensor[(8, 6, 15), uint16] */;
    %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %194 = cast(%177, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
    %195 = log(%194) /* ty=Tensor[(168, 8), float32] */;
    %196 = cast(%177, dtype="uint16") /* ty=Tensor[(168, 8), uint16] */;
    %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(2), int32] */;
    %198 = cast(%195, dtype="uint16") /* ty=Tensor[(168, 8), uint16] */;
    %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %200 = %182.1;
    %201 = %189.6;
    %202 = bitwise_or(%192, %193) /* ty=Tensor[(8, 6, 15), uint16] */;
    %203 = right_shift(%198, %199) /* ty=Tensor[(168, 8), uint16] */;
    (%200, %201, %202, %203)
  };
  %204() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */
}

def @func_5422() -> (Tensor[(180, 4), float32], Tensor[(168, 8), bool], Tensor[(168, 8), float64], Tensor[(168, 8), float32]) {
  %213 = fn () -> (Tensor[(180, 4), float32], Tensor[(168, 8), bool], Tensor[(168, 8), float64], Tensor[(168, 8), float32]) {
    %205 = @func_2906() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
    %206 = @func_4102() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
    %207 = @func_1521() /* ty=Tensor[(168, 8), bool] */;
    %208 = cast(%207, dtype="float64") /* ty=Tensor[(168, 8), float64] */;
    %209 = %205.1;
    %210 = %206.1;
    %211 = log10(%208) /* ty=Tensor[(168, 8), float64] */;
    %212 = @func_4997() /* ty=Tensor[(168, 8), float32] */;
    (%209, %210, %211, %212)
  };
  %213() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool], Tensor[(168, 8), float64], Tensor[(168, 8), float32]) */
}

def @func_788(%var_787: Tensor[(4, 180), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float32], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float32]) {
  %248 = fn (%var_733: Tensor[(4, 180), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float32], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float32]) {
    %214 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %215 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %216 = cast(%var_733, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
    %217 = reshape(%216, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
    %218 = @func_434(%217) /* ty=(Tensor[(8, 6, 15), float32],) */;
    %219 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %220 = cast(%var_733, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
    %221 = reshape(%220, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
    %222 = @func_434(%221) /* ty=(Tensor[(8, 6, 15), float32],) */;
    %223 = %222.0;
    %224 = cast(%var_733, dtype="uint16") /* ty=Tensor[(4, 180), uint16] */;
    %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
    %226 = cast(%223, dtype="uint16") /* ty=Tensor[(8, 6, 15), uint16] */;
    %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %228 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %229 = %219.3;
    %230 = cast(%229, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
    %231 = %215.3;
    %232 = cast(%231, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
    %233 = cast(%229, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
    %234 = reshape(%230, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
    %235 = reshape(%232, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
    %236 = reshape(%233, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
    %237 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %238 = cast(%var_733, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
    %239 = reshape(%238, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
    %240 = @func_434(%239) /* ty=(Tensor[(8, 6, 15), float32],) */;
    %241 = %214.1;
    %242 = %218.0;
    %243 = multiply(%226, %227) /* ty=Tensor[(8, 6, 15), uint16] */;
    %244 = %228.1;
    %245 = @func_24(%234, %235, %236) /* ty=Tensor[(16, 7, 12), int8] */;
    %246 = %237.2;
    %247 = %240.0;
    (%241, %231, %242, %229, %243, %244, %245, %246, %247)
  };
  %248(%var_787) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float32], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float32]) */
}

def @func_8138() -> (Tensor[(16, 7, 12), int8], Tensor[(16, 13, 12), int8], Tensor[(2496), int16], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) {
  %265 = fn () -> (Tensor[(16, 7, 12), int8], Tensor[(16, 13, 12), int8], Tensor[(2496), int16], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) {
    %249 = cast(meta[relay.Constant][4] /* ty=Tensor[(2496), float64] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
    %250 = reshape(%249, newshape=[2496]) /* ty=Tensor[(2496), float64] */;
    %251 = @func_5315(%250) /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) */;
    %252 = cast(meta[relay.Constant][5] /* ty=Tensor[(2496), float64] */, dtype="int16") /* ty=Tensor[(2496), int16] */;
    %253 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2496), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %254 = cast(meta[relay.Constant][4] /* ty=Tensor[(2496), float64] */, dtype="int16") /* ty=Tensor[(2496), int16] */;
    %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?), int16] */;
    %256 = minimum(%254, %255) /* ty=Tensor[(2496), int16] */;
    %257 = cast(%256, dtype="float64") /* ty=Tensor[(2496), float64] */;
    %258 = reshape(%257, newshape=[2496]) /* ty=Tensor[(2496), float64] */;
    %259 = @func_5315(%258) /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) */;
    %260 = @func_6504() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float64]) */;
    %261 = @func_1663() /* ty=Tensor[(16, 7, 12), int8] */;
    %262 = %251.1;
    %263 = %259.0;
    %264 = %260.0;
    (%261, %262, %256, %263, %264)
  };
  %265() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 13, 12), int8], Tensor[(2496), int16], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) */
}

def @func_1973() -> (Tensor[(168, 8), bool], Tensor[(180, 4), float32]) {
  %268 = fn () -> (Tensor[(168, 8), bool], Tensor[(180, 4), float32]) {
    %266 = @func_1521() /* ty=Tensor[(168, 8), bool] */;
    %267 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
    (%266, %267)
  };
  %268() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */
}

def @func_7897() -> Tensor[(168, 8), bool] {
  %270 = fn () -> Tensor[(168, 8), bool] {
    %269 = @func_5994() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool]) */;
    %269.1
  };
  %270() /* ty=Tensor[(168, 8), bool] */
}

def @func_6505() -> (Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float64]) {
  %278 = fn () -> (Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float64]) {
    %271 = @func_3628() /* ty=(Tensor[(168, 8), bool],) */;
    %272 = @func_3034() /* ty=(Tensor[(8, 6, 15), uint16],) */;
    %273 = %272.0;
    %274 = cast(%273, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
    %275 = @func_5799() /* ty=Tensor[(16, 7, 12), int8] */;
    %276 = %271.0;
    %277 = rsqrt(%274) /* ty=Tensor[(8, 6, 15), float64] */;
    (%275, %276, %277)
  };
  %278() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float64]) */
}

def @func_5678(%var_5677: Tensor[(168, 8), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(168, 8), uint16]) {
  %289 = fn (%var_5668: Tensor[(168, 8), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(168, 8), uint16]) {
    %279 = @func_4248() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), bool], Tensor[(180, 4), float64]) */;
    %280 = %279.0;
    %281 = cast(%280, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
    %282 = atanh(%281) /* ty=Tensor[(168, 8), float32] */;
    %283 = cast(%var_5668, dtype="uint16") /* ty=Tensor[(168, 8), uint16] */;
    %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(2), int32] */;
    %285 = cast(%282, dtype="uint16") /* ty=Tensor[(168, 8), uint16] */;
    %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %287 = @func_2025() /* ty=Tensor[(16, 7, 12), int8] */;
    %288 = maximum(%285, %286) /* ty=Tensor[(168, 8), uint16] */;
    (%287, %288)
  };
  %289(%var_5677) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(168, 8), uint16]) */
}

def @func_10085() -> Tensor[(16, 13, 12), int8] {
  %290 = @func_8137() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 13, 12), int8], Tensor[(2496), int16], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) */;
  %290.1
}

def @func_9674(%var_9640: Tensor[(168, 8), bool]) -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), float32], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  %291 = @func_8958() /* ty=(Tensor[(168, 8), bool],) */;
  %292 = %291.0;
  %293 = cast(%var_9640, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(2), int32] */;
  %295 = cast(%292, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %297 = @func_9254() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %298 = @func_2401() /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) */;
  %299 = cast(%var_9640, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %300 = @func_4204() /* ty=(Tensor[(168, 8), bool],) */;
  %301 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %302 = greater_equal(%295, %296) /* ty=Tensor[(168, 8), bool] */;
  %303 = %297.2;
  %304 = %298.1;
  %305 = sqrt(%299) /* ty=Tensor[(168, 8), float32] */;
  %306 = %300.0;
  %307 = %301.1;
  (%302, %303, %304, %305, %306, %307)
}

def @func_7596(%var_7594: Tensor[(12, 2, 9), uint64]) -> Tensor[(12, 2, 9), uint64] {
  @func_7593(%var_7594) /* ty=Tensor[(12, 2, 9), uint64] */
}

def @func_832() -> (Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) {
  @func_830() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) */
}

def @func_1721() -> (Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  @func_1719() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */
}

def @func_8177() -> Tensor[(11, 14, 13), float32] {
  %309 = fn () -> Tensor[(11, 14, 13), float32] {
    %308 = @func_3358() /* ty=(Tensor[(11, 14, 13), float32], Tensor[(11, 14, 13), int64]) */;
    %308.0
  };
  %309() /* ty=Tensor[(11, 14, 13), float32] */
}

def @func_1927(%var_1881: Tensor[(168, 8), bool]) -> (Tensor[(6, 16, 12), float64], Tensor[(168, 8), uint64], Tensor[(16, 7, 12), int8]) {
  %310 = @func_830() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) */;
  %311 = @func_1817() /* ty=Tensor[(168, 8), bool] */;
  %312 = cast(%var_1881, dtype="uint16") /* ty=Tensor[(168, 8), uint16] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(2), int32] */;
  %314 = cast(%311, dtype="uint16") /* ty=Tensor[(168, 8), uint16] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %316 = subtract(%314, %315) /* ty=Tensor[(168, 8), uint16] */;
  %317 = cast(%var_1881, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(2), int32] */;
  %319 = cast(%316, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %321 = less(%319, %320) /* ty=Tensor[(168, 8), bool] */;
  %322 = cast(meta[relay.Constant][6] /* ty=Tensor[(168, 8), bool] */, dtype="uint64") /* ty=Tensor[(168, 8), uint64] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(2), int32] */;
  %324 = cast(%321, dtype="uint64") /* ty=Tensor[(168, 8), uint64] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %326 = cast(%321, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %327 = cast(meta[relay.Constant][6] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %328 = cast(meta[relay.Constant][6] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %329 = reshape(%326, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %330 = reshape(%327, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %331 = reshape(%328, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
  %332 = %310.0;
  %333 = bitwise_and(%324, %325) /* ty=Tensor[(168, 8), uint64] */;
  %334 = @func_24(%329, %330, %331) /* ty=Tensor[(16, 7, 12), int8] */;
  (%332, %333, %334)
}

def @func_4480(%var_4479: Tensor[(16, 7, 12), float64]) -> (Tensor[(16, 7, 12), float32], Tensor[(16, 7, 12), int8]) {
  %344 = fn (%var_4432: Tensor[(16, 7, 12), float64]) -> (Tensor[(16, 7, 12), float32], Tensor[(16, 7, 12), int8]) {
    %335 = @func_3793() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) */;
    %336 = %335.1;
    %337 = cast(%var_4432, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
    %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
    %339 = cast(%336, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
    %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %341 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
    %342 = floor_mod(%339, %340) /* ty=Tensor[(16, 7, 12), float32] */;
    %343 = %341.0;
    (%342, %343)
  };
  %344(%var_4479) /* ty=(Tensor[(16, 7, 12), float32], Tensor[(16, 7, 12), int8]) */
}

def @func_7644() -> (Tensor[(180, 4), float32],) {
  %347 = fn () -> (Tensor[(180, 4), float32],) {
    %345 = @func_5421() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool], Tensor[(168, 8), float64], Tensor[(168, 8), float32]) */;
    %346 = %345.0;
    (%346,)
  };
  %347() /* ty=(Tensor[(180, 4), float32],) */
}

def @func_1592() -> (Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) {
  %348 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %349 = %348.2;
  %350 = cast(%349, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %351 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %353 = reshape(%352, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %354 = @func_786(%353) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float32], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float32]) */;
  %355 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %356 = %355.1;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %358 = reshape(%357, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
  %359 = @func_854(%358) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */;
  %360 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %361 = log10(%350) /* ty=Tensor[(16, 7, 12), float32] */;
  %362 = %354.8;
  %363 = %359.2;
  %364 = %360.2;
  (%351, %361, %362, %356, %363, %364)
}

def @func_9407() -> Tensor[(168, 8), bool] {
  %366 = fn () -> Tensor[(168, 8), bool] {
    %365 = @func_8958() /* ty=(Tensor[(168, 8), bool],) */;
    %365.0
  };
  %366() /* ty=Tensor[(168, 8), bool] */
}

def @func_6813() -> Tensor[(180, 4), float64] {
  @func_6811() /* ty=Tensor[(180, 4), float64] */
}

def @func_2088() -> Tensor[(168, 8), bool] {
  %368 = fn () -> Tensor[(168, 8), bool] {
    %367 = @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */;
    %367.5
  };
  %368() /* ty=Tensor[(168, 8), bool] */
}

def @func_7189() -> (Tensor[(180, 4), float64],) {
  %369 = @func_6811() /* ty=Tensor[(180, 4), float64] */;
  (%369,)
}

def @func_5899(%var_5897: Tensor[(11, 4, 13), uint8], %var_5898: Tensor[(11, 4, 13), uint8]) -> (Tensor[(11, 4, 13), uint8], Tensor[(16, 7, 12), int8]) {
  %377 = fn (%var_5880: Tensor[(11, 4, 13), uint8], %var_5881: Tensor[(11, 4, 13), uint8]) -> (Tensor[(11, 4, 13), uint8], Tensor[(16, 7, 12), int8]) {
    %370 = cast(%var_5881, dtype="uint8") /* ty=Tensor[(11, 4, 13), uint8] */;
    %371 = shape_of(%var_5880, dtype="int32") /* ty=Tensor[(3), int32] */;
    %372 = cast(%var_5880, dtype="uint8") /* ty=Tensor[(11, 4, 13), uint8] */;
    %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %374 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %375 = bitwise_or(%372, %373) /* ty=Tensor[(11, 4, 13), uint8] */;
    %376 = %374.1;
    (%375, %376)
  };
  %377(%var_5897, %var_5898) /* ty=(Tensor[(11, 4, 13), uint8], Tensor[(16, 7, 12), int8]) */
}

def @func_9606(%var_9591: Tensor[(168, 8), bool]) -> Tensor[(168, 8), int16] {
  %378 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %379 = %378.0;
  %380 = cast(%var_9591, dtype="int16") /* ty=Tensor[(168, 8), int16] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(2), int32] */;
  %382 = cast(%379, dtype="int16") /* ty=Tensor[(168, 8), int16] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  multiply(%382, %383) /* ty=Tensor[(168, 8), int16] */
}

def @func_8310() -> Tensor[(168, 8), bool] {
  %385 = fn () -> Tensor[(168, 8), bool] {
    %384 = @func_4102() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
    %384.1
  };
  %385() /* ty=Tensor[(168, 8), bool] */
}

def @func_3530() -> (Tensor[(16, 7, 12), int8], Tensor[(168, 8), float32]) {
  %399 = fn () -> (Tensor[(16, 7, 12), int8], Tensor[(168, 8), float32]) {
    %386 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %387 = @func_3259() /* ty=(Tensor[(168, 8), bool],) */;
    %388 = %387.0;
    %389 = cast(%388, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
    %390 = atan(%389) /* ty=Tensor[(168, 8), float32] */;
    %391 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %392 = %391.1;
    %393 = cast(%392, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
    %394 = shape_of(%390, dtype="int32") /* ty=Tensor[(2), int32] */;
    %395 = cast(%390, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
    %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %397 = %386.1;
    %398 = divide(%395, %396) /* ty=Tensor[(168, 8), float32] */;
    (%397, %398)
  };
  %399() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(168, 8), float32]) */
}

def @func_1500(%var_1499: Tensor[(10, 4, 15), float32]) -> Tensor[(10, 4, 15), float32] {
  %404 = fn (%var_1481: Tensor[(10, 4, 15), float32]) -> Tensor[(10, 4, 15), float32] {
    %400 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
    %401 = shape_of(%var_1481, dtype="int32") /* ty=Tensor[(3), int32] */;
    %402 = cast(%var_1481, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
    %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%402, %403) /* ty=Tensor[(10, 4, 15), float32] */
  };
  %404(%var_1499) /* ty=Tensor[(10, 4, 15), float32] */
}

def @func_10664() -> (Tensor[(168, 8), bool], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) {
  %411 = fn () -> (Tensor[(168, 8), bool], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) {
    %405 = @func_6443() /* ty=(Tensor[(168, 8), bool],) */;
    %406 = cast(meta[relay.Constant][8] /* ty=Tensor[(2496), float64] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
    %407 = reshape(%406, newshape=[2496]) /* ty=Tensor[(2496), float64] */;
    %408 = @func_5315(%407) /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) */;
    %409 = %405.0;
    %410 = %408.1;
    (%409, %410, meta[relay.Constant][8] /* ty=Tensor[(2496), float64] */)
  };
  %411() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) */
}

def @func_10384() -> Tensor[(16, 7, 12), int8] {
  @func_10382() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_4949(%var_4948: Tensor[(7, 9, 12), float64]) -> (Tensor[(7, 9, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), uint64]) {
  %428 = fn (%var_4909: Tensor[(7, 9, 12), float64]) -> (Tensor[(7, 9, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), uint64]) {
    %412 = cast(%var_4909, dtype="float64") /* ty=Tensor[(7, 9, 12), float64] */;
    %413 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(7, 9, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %414 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 12), float64] */;
    %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %416 = @func_2906() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
    %417 = @func_2087() /* ty=Tensor[(168, 8), bool] */;
    %418 = cast(%417, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
    %419 = asinh(%418) /* ty=Tensor[(168, 8), float32] */;
    %420 = cast(meta[relay.Constant][10] /* ty=Tensor[(168, 8), float32] */, dtype="uint64") /* ty=Tensor[(168, 8), uint64] */;
    %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(2), int32] */;
    %422 = cast(%419, dtype="uint64") /* ty=Tensor[(168, 8), uint64] */;
    %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %424 = floor_divide(%414, %415) /* ty=Tensor[(7, 9, 12), float64] */;
    %425 = %416.0;
    %426 = @func_2025() /* ty=Tensor[(16, 7, 12), int8] */;
    %427 = add(%422, %423) /* ty=Tensor[(168, 8), uint64] */;
    (%424, %425, %426, %427)
  };
  %428(%var_4948) /* ty=(Tensor[(7, 9, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), uint64]) */
}

def @func_8895() -> Tensor[(168, 8), float32] {
  @func_8893() /* ty=Tensor[(168, 8), float32] */
}

def @func_4206() -> (Tensor[(168, 8), bool],) {
  @func_4204() /* ty=(Tensor[(168, 8), bool],) */
}

def @func_5833() -> Tensor[(16, 7, 12), int8] {
  @func_5831() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_7167() -> (Tensor[(180, 4), float32], Tensor[(16, 7, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(240), float32], Tensor[(6, 16, 12), float32], Tensor[(1920), float32]) {
  %443 = fn () -> (Tensor[(180, 4), float32], Tensor[(16, 7, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(240), float32], Tensor[(6, 16, 12), float32], Tensor[(1920), float32]) {
    %429 = @func_6280() /* ty=(Tensor[(180, 4), float32],) */;
    %430 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
    %431 = cast(meta[relay.Constant][11] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %432 = %429.0;
    %433 = cast(%432, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
    %434 = reshape(%431, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
    %435 = reshape(%433, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %436 = @func_2288(%434, %435) /* ty=(Tensor[(5, 16, 3), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
    %437 = cast(meta[relay.Constant][12] /* ty=Tensor[(1920), float32] */, dtype="float32") /* ty=Tensor[(1920), float32] */;
    %438 = reshape(%437, newshape=[12, 16, 10]) /* ty=Tensor[(12, 16, 10), float32] */;
    %439 = @func_5451(%438) /* ty=(Tensor[(12, 16, 10), float32], Tensor[(6, 16, 12), float32]) */;
    %440 = %430.1;
    %441 = %436.1;
    %442 = %439.1;
    (%432, %440, %441, meta[relay.Constant][11] /* ty=Tensor[(240), float32] */, %442, meta[relay.Constant][12] /* ty=Tensor[(1920), float32] */)
  };
  %443() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(240), float32], Tensor[(6, 16, 12), float32], Tensor[(1920), float32]) */
}

def @func_10258() -> Tensor[(16, 7, 12), int8] {
  @func_10256() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_5629() -> (Tensor[(16, 7, 12), int8],) {
  @func_5627() /* ty=(Tensor[(16, 7, 12), int8],) */
}

def @func_2512(%var_2511: Tensor[(180, 4), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(180, 4), uint8], Tensor[(84, 16), float64]) {
  %462 = fn (%var_2500: Tensor[(180, 4), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(180, 4), uint8], Tensor[(84, 16), float64]) {
    %444 = cast(meta[relay.Constant][13] /* ty=Tensor[(84, 16), bool] */, dtype="bool") /* ty=Tensor[(84, 16), bool] */;
    %445 = cast(meta[relay.Constant][13] /* ty=Tensor[(84, 16), bool] */, dtype="bool") /* ty=Tensor[(84, 16), bool] */;
    %446 = cast(meta[relay.Constant][13] /* ty=Tensor[(84, 16), bool] */, dtype="bool") /* ty=Tensor[(84, 16), bool] */;
    %447 = reshape(%444, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
    %448 = reshape(%445, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
    %449 = reshape(%446, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), bool] */;
    %450 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
    %451 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
    %452 = %451.1;
    %453 = cast(%var_2500, dtype="uint8") /* ty=Tensor[(180, 4), uint8] */;
    %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(2), int32] */;
    %455 = cast(%452, dtype="uint8") /* ty=Tensor[(180, 4), uint8] */;
    %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %457 = cast(meta[relay.Constant][13] /* ty=Tensor[(84, 16), bool] */, dtype="float64") /* ty=Tensor[(84, 16), float64] */;
    %458 = @func_24(%447, %448, %449) /* ty=Tensor[(16, 7, 12), int8] */;
    %459 = %450.0;
    %460 = bitwise_or(%455, %456) /* ty=Tensor[(180, 4), uint8] */;
    %461 = asin(%457) /* ty=Tensor[(84, 16), float64] */;
    (%458, %459, %460, %461)
  };
  %462(%var_2511) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(180, 4), uint8], Tensor[(84, 16), float64]) */
}

def @func_2288(%var_2239: Tensor[(5, 16, 3), float32], %var_2246: Tensor[(720), float32]) -> (Tensor[(5, 16, 3), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) {
  %463 = cast(%var_2239, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
  %464 = cast(%var_2246, dtype="float32") /* ty=Tensor[(720), float32] */;
  %465 = reshape(%464, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %466 = @func_434(%465) /* ty=(Tensor[(8, 6, 15), float32],) */;
  %467 = sigmoid(%463) /* ty=Tensor[(5, 16, 3), float32] */;
  %468 = %466.0;
  (%467, %468, %var_2246)
}

def @func_4250() -> (Tensor[(168, 8), bool], Tensor[(180, 4), bool], Tensor[(180, 4), float64]) {
  @func_4248() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), bool], Tensor[(180, 4), float64]) */
}

def @func_3610(%var_3608: Tensor[(3, 3, 13), uint8], %var_3609: Tensor[(3, 3, 13), uint8]) -> Tensor[(3, 3, 13), uint8] {
  @func_3606(%var_3608, %var_3609) /* ty=Tensor[(3, 3, 13), uint8] */
}

def @func_3025() -> (Tensor[(16, 7, 12), int8],) {
  %469 = @func_1663() /* ty=Tensor[(16, 7, 12), int8] */;
  (%469,)
}

def @func_8275() -> (Tensor[(168, 8), bool], Tensor[(720), float32], Tensor[(16, 7, 12), int8]) {
  %476 = fn () -> (Tensor[(168, 8), bool], Tensor[(720), float32], Tensor[(16, 7, 12), int8]) {
    %470 = @func_4102() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
    %471 = @func_7308() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) */;
    %472 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %473 = %470.0;
    %474 = %471.2;
    %475 = %472.1;
    (%473, %474, %475)
  };
  %476() /* ty=(Tensor[(168, 8), bool], Tensor[(720), float32], Tensor[(16, 7, 12), int8]) */
}

def @func_6164() -> Tensor[(16, 7, 12), int8] {
  @func_6162() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_2998() -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float64]) {
  %482 = fn () -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float64]) {
    %477 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
    %478 = %477.1;
    %479 = cast(%478, dtype="float64") /* ty=Tensor[(16, 7, 12), float64] */;
    %480 = @func_1663() /* ty=Tensor[(16, 7, 12), int8] */;
    %481 = log2(%479) /* ty=Tensor[(16, 7, 12), float64] */;
    (%480, %481)
  };
  %482() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float64]) */
}

def @func_4771(%var_4770: Tensor[(11, 9, 5), float32]) -> (Tensor[(11, 9, 5), float32],) {
  %485 = fn (%var_4748: Tensor[(11, 9, 5), float32]) -> (Tensor[(11, 9, 5), float32],) {
    %483 = cast(%var_4748, dtype="float32") /* ty=Tensor[(11, 9, 5), float32] */;
    %484 = asin(%483) /* ty=Tensor[(11, 9, 5), float32] */;
    (%484,)
  };
  %485(%var_4770) /* ty=(Tensor[(11, 9, 5), float32],) */
}

def @func_7355() -> (Tensor[(168, 8), uint16], Tensor[(168, 8), float32], Tensor[(168, 8), bool], Tensor[(7, 9, 12), float64], Tensor[(756), float64]) {
  %496 = fn () -> (Tensor[(168, 8), uint16], Tensor[(168, 8), float32], Tensor[(168, 8), bool], Tensor[(7, 9, 12), float64], Tensor[(756), float64]) {
    %486 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
    %487 = @func_3529() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(168, 8), float32]) */;
    %488 = @func_4204() /* ty=(Tensor[(168, 8), bool],) */;
    %489 = cast(meta[relay.Constant][14] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
    %490 = reshape(%489, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float64] */;
    %491 = @func_4947(%490) /* ty=(Tensor[(7, 9, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), uint64]) */;
    %492 = %486.3;
    %493 = %487.1;
    %494 = %488.0;
    %495 = %491.0;
    (%492, %493, %494, %495, meta[relay.Constant][14] /* ty=Tensor[(756), float64] */)
  };
  %496() /* ty=(Tensor[(168, 8), uint16], Tensor[(168, 8), float32], Tensor[(168, 8), bool], Tensor[(7, 9, 12), float64], Tensor[(756), float64]) */
}

def @func_7774() -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8]) {
  %500 = fn () -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8]) {
    %497 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
    %498 = %497.2;
    %499 = @func_2025() /* ty=Tensor[(16, 7, 12), int8] */;
    (%498, %499)
  };
  %500() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8]) */
}

def @func_8988() -> Tensor[(16, 7, 12), float64] {
  %501 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %501.1
}

def @func_10968() -> (Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  %506 = fn () -> (Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
    %502 = @func_3119() /* ty=(Tensor[(168, 8), float32], Tensor[(168, 8), bool]) */;
    %503 = @func_9291() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float32], Tensor[(168, 8), bool]) */;
    %504 = %502.1;
    %505 = %503.0;
    (%504, %505)
  };
  %506() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */
}

def @func_10406() -> (Tensor[(168, 8), bool],) {
  %508 = fn () -> (Tensor[(168, 8), bool],) {
    %507 = @func_1817() /* ty=Tensor[(168, 8), bool] */;
    (%507,)
  };
  %508() /* ty=(Tensor[(168, 8), bool],) */
}

def @func_6541() -> (Tensor[(180, 4), float32],) {
  %511 = fn () -> (Tensor[(180, 4), float32],) {
    %509 = @func_5994() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool]) */;
    %510 = %509.0;
    (%510,)
  };
  %511() /* ty=(Tensor[(180, 4), float32],) */
}

def @func_8527(%var_8525: Tensor[(168, 8), bool], %var_8526: Tensor[(720), float32]) -> (Tensor[(168, 8), int32], Tensor[(168, 8), bool], Tensor[(6, 16, 12), float64], Tensor[(720), float32]) {
  %529 = fn (%var_8473: Tensor[(168, 8), bool], %var_8519: Tensor[(720), float32]) -> (Tensor[(168, 8), int32], Tensor[(168, 8), bool], Tensor[(6, 16, 12), float64], Tensor[(720), float32]) {
    %512 = @func_1817() /* ty=Tensor[(168, 8), bool] */;
    %513 = cast(%var_8473, dtype="int32") /* ty=Tensor[(168, 8), int32] */;
    %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(2), int32] */;
    %515 = cast(%512, dtype="int32") /* ty=Tensor[(168, 8), int32] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %517 = cast(%512, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
    %518 = shape_of(%var_8473, dtype="int32") /* ty=Tensor[(2), int32] */;
    %519 = cast(%var_8473, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
    %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %521 = cast(%512, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
    %522 = cast(%var_8519, dtype="float32") /* ty=Tensor[(720), float32] */;
    %523 = reshape(%521, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
    %524 = reshape(%522, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
    %525 = @func_1069(%523, %524) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */;
    %526 = bitwise_xor(%515, %516) /* ty=Tensor[(168, 8), int32] */;
    %527 = greater(%519, %520) /* ty=Tensor[(168, 8), bool] */;
    %528 = %525.1;
    (%526, %527, %528, %var_8519)
  };
  %529(%var_8525, %var_8526) /* ty=(Tensor[(168, 8), int32], Tensor[(168, 8), bool], Tensor[(6, 16, 12), float64], Tensor[(720), float32]) */
}

def @func_10382() -> Tensor[(16, 7, 12), int8] {
  %530 = @func_7773() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8]) */;
  %530.0
}

def @func_9677(%var_9675: Tensor[(168, 8), bool]) -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), float32], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  @func_9674(%var_9675) /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), float32], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */
}

def @func_6849() -> Tensor[(168, 8), bool] {
  %531 = fn () -> Tensor[(168, 8), bool] {
    @func_1817() /* ty=Tensor[(168, 8), bool] */
  };
  %531() /* ty=Tensor[(168, 8), bool] */
}

def @func_9254() -> (Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) {
  %532 = @func_6443() /* ty=(Tensor[(168, 8), bool],) */;
  %533 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %534 = @func_7643() /* ty=(Tensor[(180, 4), float32],) */;
  %535 = %532.0;
  %536 = %533.3;
  %537 = @func_6162() /* ty=Tensor[(16, 7, 12), int8] */;
  %538 = %534.0;
  (%535, %536, %537, %538)
}

def @func_10185(%var_10176: Tensor[(5, 3, 1), float64]) -> (Tensor[(5, 3, 1), float64],) {
  %539 = cast(%var_10176, dtype="float64") /* ty=Tensor[(5, 3, 1), float64] */;
  %540 = rsqrt(%539) /* ty=Tensor[(5, 3, 1), float64] */;
  (%540,)
}

def @func_9379() -> (Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) {
  @func_9377() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) */
}

def @func_4204() -> (Tensor[(168, 8), bool],) {
  %541 = @func_4102() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %542 = %541.1;
  (%542,)
}

def @func_7309() -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) {
  %549 = fn () -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) {
    %543 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
    %544 = cast(meta[relay.Constant][15] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %545 = reshape(%544, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
    %546 = @func_2510(%545) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(180, 4), uint8], Tensor[(84, 16), float64]) */;
    %547 = %543.0;
    %548 = %546.1;
    (%547, %548, meta[relay.Constant][15] /* ty=Tensor[(720), float32] */)
  };
  %549() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) */
}

def @func_9996() -> Tensor[(16, 7, 12), int8] {
  @func_9994() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_4138() -> (Tensor[(12, 60), float64],) {
  %554 = fn () -> (Tensor[(12, 60), float64],) {
    %550 = @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */;
    %551 = %550.4;
    %552 = cast(%551, dtype="float64") /* ty=Tensor[(12, 60), float64] */;
    %553 = sigmoid(%552) /* ty=Tensor[(12, 60), float64] */;
    (%553,)
  };
  %554() /* ty=(Tensor[(12, 60), float64],) */
}

def @func_5162() -> Tensor[(6, 16, 12), float32] {
  %555 = @func_830() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) */;
  %555.2
}

def @func_8332() -> (Tensor[(16, 7, 12), int8],) {
  @func_8330() /* ty=(Tensor[(16, 7, 12), int8],) */
}

def @func_7235() -> (Tensor[(16, 7, 12), int8],) {
  @func_7233() /* ty=(Tensor[(16, 7, 12), int8],) */
}

def @func_8398() -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8]) {
  %556 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %557 = @func_8100() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %558 = %556.0;
  %559 = %557.0;
  (%558, %559)
}

def @func_5156() -> Tensor[(16, 7, 12), int8] {
  @func_5154() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_3847(%var_3844: Tensor[(1344), int8]) -> (Tensor[(11, 14, 13), float64], Tensor[(8, 6, 15), float32], Tensor[(1344), int8], Tensor[(720), float32]) {
  %560 = @func_3358() /* ty=(Tensor[(11, 14, 13), float32], Tensor[(11, 14, 13), int64]) */;
  %561 = %560.0;
  %562 = cast(%561, dtype="float64") /* ty=Tensor[(11, 14, 13), float64] */;
  %563 = cast(%var_3844, dtype="int8") /* ty=Tensor[(1344), int8] */;
  %564 = cast(meta[relay.Constant][16] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %565 = reshape(%563, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
  %566 = reshape(%564, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %567 = @func_1069(%565, %566) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */;
  %568 = sqrt(%562) /* ty=Tensor[(11, 14, 13), float64] */;
  %569 = %567.2;
  (%568, %569, %var_3844, meta[relay.Constant][16] /* ty=Tensor[(720), float32] */)
}

def @func_10892() -> (Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32]) {
  @func_10890() /* ty=(Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32]) */
}

def @func_1930(%var_1928: Tensor[(168, 8), bool]) -> (Tensor[(6, 16, 12), float64], Tensor[(168, 8), uint64], Tensor[(16, 7, 12), int8]) {
  @func_1927(%var_1928) /* ty=(Tensor[(6, 16, 12), float64], Tensor[(168, 8), uint64], Tensor[(16, 7, 12), int8]) */
}

def @func_7760(%var_7758: Tensor[(16, 7, 12), int8]) -> (Tensor[(16, 7, 12), uint64], Tensor[(6, 16, 12), float64]) {
  @func_7757(%var_7758) /* ty=(Tensor[(16, 7, 12), uint64], Tensor[(6, 16, 12), float64]) */
}

def @func_7249() -> (Tensor[(168, 8), bool],) {
  %570 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %571 = %570.0;
  (%571,)
}

def @func_3359() -> (Tensor[(11, 14, 13), float32], Tensor[(11, 14, 13), int64]) {
  %582 = fn () -> (Tensor[(11, 14, 13), float32], Tensor[(11, 14, 13), int64]) {
    %572 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 14, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 14, 13), float32] */;
    %573 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(11, 14, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 14, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 14, 13), float32] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %576 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 14, 13), float32] */, dtype="int64") /* ty=Tensor[(11, 14, 13), int64] */;
    %577 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(11, 14, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %578 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 14, 13), float32] */, dtype="int64") /* ty=Tensor[(11, 14, 13), int64] */;
    %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %580 = divide(%574, %575) /* ty=Tensor[(11, 14, 13), float32] */;
    %581 = logical_xor(%578, %579) /* ty=Tensor[(11, 14, 13), int64] */;
    (%580, %581)
  };
  %582() /* ty=(Tensor[(11, 14, 13), float32], Tensor[(11, 14, 13), int64]) */
}

def @func_6139() -> (Tensor[(168, 8), float64],) {
  %585 = fn () -> (Tensor[(168, 8), float64],) {
    %583 = @func_5421() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool], Tensor[(168, 8), float64], Tensor[(168, 8), float32]) */;
    %584 = %583.2;
    (%584,)
  };
  %585() /* ty=(Tensor[(168, 8), float64],) */
}

def @func_7276() -> (Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16]) {
  @func_7274() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16]) */
}

def @func_5831() -> Tensor[(16, 7, 12), int8] {
  @func_1663() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_7494() -> (Tensor[(168, 8), bool],) {
  @func_7492() /* ty=(Tensor[(168, 8), bool],) */
}

def @func_4858() -> Tensor[(168, 8), bool] {
  @func_4856() /* ty=Tensor[(168, 8), bool] */
}

def @func_6811() -> Tensor[(180, 4), float64] {
  %586 = @func_4248() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), bool], Tensor[(180, 4), float64]) */;
  %586.2
}

def @func_8669(%var_8667: Tensor[(1344), int8]) -> (Tensor[(1344), int8], Tensor[(8, 6, 15), float64], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool]) {
  @func_8666(%var_8667) /* ty=(Tensor[(1344), int8], Tensor[(8, 6, 15), float64], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool]) */
}

def @func_5757() -> (Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float64]) {
  %591 = fn () -> (Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float64]) {
    %587 = @func_3793() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) */;
    %588 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
    %589 = %587.8;
    %590 = %588.4;
    (%589, %590)
  };
  %591() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float64]) */
}

def @func_6825() -> Tensor[(16, 7, 12), float64] {
  %593 = fn () -> Tensor[(16, 7, 12), float64] {
    %592 = @func_2997() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float64]) */;
    %592.1
  };
  %593() /* ty=Tensor[(16, 7, 12), float64] */
}

def @main(%var_10989: Tensor[(168, 8), bool]) -> Tensor[(168, 8), bool] {
  %594 = @func_3629() /* ty=(Tensor[(168, 8), bool],) */;
  %595 = %594.0;
  %596 = cast(%var_10989, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(2), int32] */;
  %598 = cast(%595, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  less_equal(%598, %599) /* ty=Tensor[(168, 8), bool] */
}

def @func_5286() -> Tensor[(168, 8), bool] {
  @func_5284() /* ty=Tensor[(168, 8), bool] */
}

def @func_7593(%var_7546: Tensor[(12, 2, 9), uint64]) -> Tensor[(12, 2, 9), uint64] {
  %600 = cast(%var_7546, dtype="uint64") /* ty=Tensor[(12, 2, 9), uint64] */;
  %601 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(12, 2, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 2, 9), uint64] */, dtype="uint64") /* ty=Tensor[(12, 2, 9), uint64] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%602, %603) /* ty=Tensor[(12, 2, 9), uint64] */
}

def @func_10937() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float64]) {
  %604 = @func_10010() /* ty=(Tensor[(168, 8), bool],) */;
  %605 = %604.0;
  %606 = @func_9994() /* ty=Tensor[(16, 7, 12), int8] */;
  %607 = @func_10685() /* ty=Tensor[(6, 16, 12), float64] */;
  (%605, %606, %607)
}

def @func_8893() -> Tensor[(168, 8), float32] {
  %608 = @func_5421() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool], Tensor[(168, 8), float64], Tensor[(168, 8), float32]) */;
  %608.3
}

def @func_9180() -> Tensor[(8, 6, 15), uint16] {
  %610 = fn () -> Tensor[(8, 6, 15), uint16] {
    %609 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
    %609.2
  };
  %610() /* ty=Tensor[(8, 6, 15), uint16] */
}

def @func_10686() -> Tensor[(6, 16, 12), float64] {
  %612 = fn () -> Tensor[(6, 16, 12), float64] {
    %611 = @func_3937() /* ty=(Tensor[(11, 14, 13), int64], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
    %611.1
  };
  %612() /* ty=Tensor[(6, 16, 12), float64] */
}

def @func_3220(%var_3219: Tensor[(720), float32]) -> (Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(720), float32], Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32]) {
  %624 = fn (%var_3183: Tensor[(720), float32]) -> (Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(720), float32], Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32]) {
    %613 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
    %614 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
    %615 = cast(%var_3183, dtype="float32") /* ty=Tensor[(720), float32] */;
    %616 = reshape(%615, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
    %617 = @func_854(%616) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */;
    %618 = %617.0;
    %619 = cast(%618, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
    %620 = %613.1;
    %621 = %614.0;
    %622 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
    %623 = erf(%619) /* ty=Tensor[(16, 7, 12), float32] */;
    (%620, %621, %var_3183, %622, %623)
  };
  %624(%var_3219) /* ty=(Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(720), float32], Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32]) */
}

def @func_945() -> (Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) {
  %641 = fn () -> (Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) {
    %625 = @func_830() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) */;
    %626 = cast(meta[relay.Constant][20] /* ty=Tensor[(180, 4), float32] */, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
    %627 = reshape(%626, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
    %628 = @func_854(%627) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */;
    %629 = cast(meta[relay.Constant][20] /* ty=Tensor[(180, 4), float32] */, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
    %630 = reshape(%629, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
    %631 = @func_434(%630) /* ty=(Tensor[(8, 6, 15), float32],) */;
    %632 = %631.0;
    %633 = cast(%632, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
    %634 = reshape(%633, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
    %635 = @func_854(%634) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */;
    %636 = cast(%632, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
    %637 = %625.0;
    %638 = %628.1;
    %639 = %635.2;
    %640 = atanh(%636) /* ty=Tensor[(8, 6, 15), float64] */;
    (%637, meta[relay.Constant][20] /* ty=Tensor[(180, 4), float32] */, %638, %639, %640)
  };
  %641() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */
}

def @func_2204(%var_2193: Tensor[(16, 7, 12), int8]) -> (Tensor[(16, 7, 12), bool], Tensor[(16, 7, 12), float32]) {
  %642 = @func_2025() /* ty=Tensor[(16, 7, 12), int8] */;
  %643 = cast(%var_2193, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%642, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %647 = cast(%var_2193, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %648 = logical_or(%645, %646) /* ty=Tensor[(16, 7, 12), bool] */;
  %649 = sqrt(%647) /* ty=Tensor[(16, 7, 12), float32] */;
  (%648, %649)
}

def @func_9022() -> (Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(180, 4), float32], Tensor[(180, 4), float32]) {
  @func_9020() /* ty=(Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(180, 4), float32], Tensor[(180, 4), float32]) */
}

def @func_6988(%var_6956: Tensor[(168, 8), bool]) -> (Tensor[(168, 8), int32], Tensor[(6, 16, 12), float64], Tensor[(720), float32], Tensor[(16, 7, 12), float64]) {
  %650 = @func_4204() /* ty=(Tensor[(168, 8), bool],) */;
  %651 = %650.0;
  %652 = cast(%var_6956, dtype="int32") /* ty=Tensor[(168, 8), int32] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(2), int32] */;
  %654 = cast(%651, dtype="int32") /* ty=Tensor[(168, 8), int32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %656 = cast(%var_6956, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
  %657 = cast(meta[relay.Constant][21] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %658 = reshape(%656, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
  %659 = reshape(%657, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %660 = @func_1069(%658, %659) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */;
  %661 = minimum(%654, %655) /* ty=Tensor[(168, 8), int32] */;
  %662 = %660.1;
  %663 = @func_6824() /* ty=Tensor[(16, 7, 12), float64] */;
  (%661, %662, meta[relay.Constant][21] /* ty=Tensor[(720), float32] */, %663)
}

def @func_5453(%var_5452: Tensor[(12, 16, 10), float32]) -> (Tensor[(12, 16, 10), float32], Tensor[(6, 16, 12), float32]) {
  %667 = fn (%var_5437: Tensor[(12, 16, 10), float32]) -> (Tensor[(12, 16, 10), float32], Tensor[(6, 16, 12), float32]) {
    %664 = cast(%var_5437, dtype="float32") /* ty=Tensor[(12, 16, 10), float32] */;
    %665 = sqrt(%664) /* ty=Tensor[(12, 16, 10), float32] */;
    %666 = @func_5162() /* ty=Tensor[(6, 16, 12), float32] */;
    (%665, %666)
  };
  %667(%var_5452) /* ty=(Tensor[(12, 16, 10), float32], Tensor[(6, 16, 12), float32]) */
}

def @func_5627() -> (Tensor[(16, 7, 12), int8],) {
  %668 = @func_5154() /* ty=Tensor[(16, 7, 12), int8] */;
  (%668,)
}

def @func_10542() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  @func_10540() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */
}

def @func_10256() -> Tensor[(16, 7, 12), int8] {
  @func_3999() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_4353(%var_4351: Tensor[(180, 4), float32], %var_4352: Tensor[(1344), bool]) -> (Tensor[(180, 4), float32], Tensor[(8, 6, 15), float32], Tensor[(6, 16, 12), float64], Tensor[(1344), bool], Tensor[(6, 16, 12), bool], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  @func_4349(%var_4351, %var_4352) /* ty=(Tensor[(180, 4), float32], Tensor[(8, 6, 15), float32], Tensor[(6, 16, 12), float64], Tensor[(1344), bool], Tensor[(6, 16, 12), bool], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */
}

def @func_5800() -> Tensor[(16, 7, 12), int8] {
  %669 = fn () -> Tensor[(16, 7, 12), int8] {
    @func_2025() /* ty=Tensor[(16, 7, 12), int8] */
  };
  %669() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_9793(%var_9792: Tensor[(14, 12, 6), float32]) -> (Tensor[(14, 12, 6), float32], Tensor[(14, 12, 6), float64]) {
  %674 = fn (%var_9774: Tensor[(14, 12, 6), float32]) -> (Tensor[(14, 12, 6), float32], Tensor[(14, 12, 6), float64]) {
    %670 = cast(%var_9774, dtype="float32") /* ty=Tensor[(14, 12, 6), float32] */;
    %671 = cast(%var_9774, dtype="float64") /* ty=Tensor[(14, 12, 6), float64] */;
    %672 = cosh(%670) /* ty=Tensor[(14, 12, 6), float32] */;
    %673 = sinh(%671) /* ty=Tensor[(14, 12, 6), float64] */;
    (%672, %673)
  };
  %674(%var_9792) /* ty=(Tensor[(14, 12, 6), float32], Tensor[(14, 12, 6), float64]) */
}

def @func_5996() -> (Tensor[(180, 4), float32], Tensor[(168, 8), bool]) {
  @func_5994() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool]) */
}

def @func_10034() -> Tensor[(168, 8), float64] {
  %676 = fn () -> Tensor[(168, 8), float64] {
    %675 = @func_6138() /* ty=(Tensor[(168, 8), float64],) */;
    %675.0
  };
  %676() /* ty=Tensor[(168, 8), float64] */
}

def @func_4103() -> (Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  %680 = fn () -> (Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
    %677 = @func_1719() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
    %678 = @func_1817() /* ty=Tensor[(168, 8), bool] */;
    %679 = %677.1;
    (%678, %679)
  };
  %680() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */
}

def @func_8100() -> (Tensor[(16, 7, 12), int8],) {
  %681 = @func_1663() /* ty=Tensor[(16, 7, 12), int8] */;
  (%681,)
}

def @func_5118(%var_5117: Tensor[(180, 4), float32]) -> (Tensor[(168, 8), bool], Tensor[(180, 4), bool]) {
  %696 = fn (%var_5109: Tensor[(180, 4), float32]) -> (Tensor[(168, 8), bool], Tensor[(180, 4), bool]) {
    %682 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
    %683 = %682.0;
    %684 = cast(meta[relay.Constant][22] /* ty=Tensor[(168, 8), bool] */, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
    %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(2), int32] */;
    %686 = cast(%683, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %688 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
    %689 = %688.3;
    %690 = cast(%var_5109, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
    %691 = shape_of(%689, dtype="int32") /* ty=Tensor[(2), int32] */;
    %692 = cast(%689, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
    %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %694 = logical_and(%686, %687) /* ty=Tensor[(168, 8), bool] */;
    %695 = greater(%692, %693) /* ty=Tensor[(180, 4), bool] */;
    (%694, %695)
  };
  %696(%var_5117) /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), bool]) */
}

def @func_9493() -> (Tensor[(16, 7, 12), int8],) {
  %697 = @func_6119() /* ty=Tensor[(16, 7, 12), int8] */;
  (%697,)
}

def @func_2861() -> Tensor[(168, 8), float64] {
  %698 = @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */;
  %699 = %698.5;
  %700 = cast(meta[relay.Constant][23] /* ty=Tensor[(168, 8), bool] */, dtype="float64") /* ty=Tensor[(168, 8), float64] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(2), int32] */;
  %702 = cast(%699, dtype="float64") /* ty=Tensor[(168, 8), float64] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  floor_divide(%702, %703) /* ty=Tensor[(168, 8), float64] */
}

def @func_7481() -> (Tensor[(168, 8), float32],) {
  %706 = fn () -> (Tensor[(168, 8), float32],) {
    %704 = @func_5493() /* ty=(Tensor[(168, 8), float32], Tensor[(720), float32]) */;
    %705 = %704.0;
    (%705,)
  };
  %706() /* ty=(Tensor[(168, 8), float32],) */
}

def @func_6991(%var_6989: Tensor[(168, 8), bool]) -> (Tensor[(168, 8), int32], Tensor[(6, 16, 12), float64], Tensor[(720), float32], Tensor[(16, 7, 12), float64]) {
  @func_6988(%var_6989) /* ty=(Tensor[(168, 8), int32], Tensor[(6, 16, 12), float64], Tensor[(720), float32], Tensor[(16, 7, 12), float64]) */
}

def @func_1195() -> (Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) {
  %725 = fn () -> (Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) {
    %707 = cast(meta[relay.Constant][24] /* ty=Tensor[(1344), int8] */, dtype="int8") /* ty=Tensor[(1344), int8] */;
    %708 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
    %709 = %708.1;
    %710 = cast(%709, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
    %711 = reshape(%707, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
    %712 = reshape(%710, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
    %713 = @func_1069(%711, %712) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */;
    %714 = %713.0;
    %715 = cast(%714, dtype="float64") /* ty=Tensor[(16, 7, 12), float64] */;
    %716 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %717 = cast(%709, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
    %718 = acosh(%717) /* ty=Tensor[(180, 4), float32] */;
    %719 = cast(%718, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
    %720 = reshape(%719, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
    %721 = @func_854(%720) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */;
    %722 = rsqrt(%715) /* ty=Tensor[(16, 7, 12), float64] */;
    %723 = %716.1;
    %724 = %721.1;
    (meta[relay.Constant][24] /* ty=Tensor[(1344), int8] */, %722, %723, %718, %724)
  };
  %725() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */
}

def @func_3260() -> (Tensor[(168, 8), bool],) {
  %727 = fn () -> (Tensor[(168, 8), bool],) {
    %726 = @func_1521() /* ty=Tensor[(168, 8), bool] */;
    (%726,)
  };
  %727() /* ty=(Tensor[(168, 8), bool],) */
}

def @func_2825(%var_2823: Tensor[(720), float32]) -> (Tensor[(6, 16, 12), float64], Tensor[(10, 4, 15), float32], Tensor[(600), float32], Tensor[(180, 4), float32], Tensor[(1344), int8], Tensor[(720), float32]) {
  @func_2822(%var_2823) /* ty=(Tensor[(6, 16, 12), float64], Tensor[(10, 4, 15), float32], Tensor[(600), float32], Tensor[(180, 4), float32], Tensor[(1344), int8], Tensor[(720), float32]) */
}

def @func_4805() -> (Tensor[(15, 5, 5), float64],) {
  %730 = fn () -> (Tensor[(15, 5, 5), float64],) {
    %728 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 5), float64] */;
    %729 = acos(%728) /* ty=Tensor[(15, 5, 5), float64] */;
    (%729,)
  };
  %730() /* ty=(Tensor[(15, 5, 5), float64],) */
}

def @func_6672() -> (Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool]) {
  %731 = @func_5493() /* ty=(Tensor[(168, 8), float32], Tensor[(720), float32]) */;
  %732 = @func_5421() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool], Tensor[(168, 8), float64], Tensor[(168, 8), float32]) */;
  %733 = %732.2;
  %734 = cast(%733, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %735 = @func_6016() /* ty=(Tensor[(168, 8), bool],) */;
  %736 = %731.0;
  %737 = tan(%734) /* ty=Tensor[(168, 8), float32] */;
  %738 = @func_6219() /* ty=Tensor[(6, 16, 12), float64] */;
  %739 = %735.0;
  (%736, %737, %738, %739)
}

def @func_10619(%var_10610: Tensor[(720), float32]) -> (Tensor[(168, 8), float32], Tensor[(168, 8), bool], Tensor[(720), float32], Tensor[(720), float32], Tensor[(16, 7, 12), int8]) {
  %740 = @func_4102() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %741 = cast(%var_10610, dtype="float32") /* ty=Tensor[(720), float32] */;
  %742 = reshape(%741, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %743 = @func_4659(%742) /* ty=(Tensor[(16, 7, 12), float64], Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(720), float32]) */;
  %744 = @func_5627() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %745 = @func_4997() /* ty=Tensor[(168, 8), float32] */;
  %746 = %740.0;
  %747 = %743.3;
  %748 = %744.0;
  (%745, %746, %747, %var_10610, %748)
}

def @func_9994() -> Tensor[(16, 7, 12), int8] {
  @func_3344() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_2863() -> Tensor[(168, 8), float64] {
  @func_2861() /* ty=Tensor[(168, 8), float64] */
}

def @func_10493() -> (Tensor[(16, 7, 12), int8],) {
  @func_10491() /* ty=(Tensor[(16, 7, 12), int8],) */
}

def @func_3606(%var_3598: Tensor[(3, 3, 13), uint8], %var_3599: Tensor[(3, 3, 13), uint8]) -> Tensor[(3, 3, 13), uint8] {
  %749 = cast(%var_3599, dtype="uint8") /* ty=Tensor[(3, 3, 13), uint8] */;
  %750 = shape_of(%var_3598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%var_3598, dtype="uint8") /* ty=Tensor[(3, 3, 13), uint8] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  minimum(%751, %752) /* ty=Tensor[(3, 3, 13), uint8] */
}

def @func_6018() -> (Tensor[(168, 8), bool],) {
  @func_6016() /* ty=(Tensor[(168, 8), bool],) */
}

def @func_3027() -> (Tensor[(16, 7, 12), int8],) {
  @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */
}

def @func_7757(%var_7712: Tensor[(16, 7, 12), int8]) -> (Tensor[(16, 7, 12), uint64], Tensor[(6, 16, 12), float64]) {
  %753 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
  %754 = %753.1;
  %755 = cast(%var_7712, dtype="uint64") /* ty=Tensor[(16, 7, 12), uint64] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%754, dtype="uint64") /* ty=Tensor[(16, 7, 12), uint64] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %759 = @func_3937() /* ty=(Tensor[(11, 14, 13), int64], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %760 = multiply(%757, %758) /* ty=Tensor[(16, 7, 12), uint64] */;
  %761 = %759.1;
  (%760, %761)
}

def @func_8729(%var_8700: Tensor[(720), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(10, 4, 15), float32], Tensor[(720), float32], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(13, 16, 7), float32]) {
  %762 = @func_8398() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8]) */;
  %763 = cast(%var_8700, dtype="float32") /* ty=Tensor[(720), float32] */;
  %764 = reshape(%763, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %765 = @func_2822(%764) /* ty=(Tensor[(6, 16, 12), float64], Tensor[(10, 4, 15), float32], Tensor[(600), float32], Tensor[(180, 4), float32], Tensor[(1344), int8], Tensor[(720), float32]) */;
  %766 = @func_3034() /* ty=(Tensor[(8, 6, 15), uint16],) */;
  %767 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %768 = %762.1;
  %769 = %765.1;
  %770 = %766.0;
  %771 = @func_3344() /* ty=Tensor[(16, 7, 12), int8] */;
  %772 = %767.0;
  (%768, %769, %var_8700, %770, %771, %772)
}

def @func_4248() -> (Tensor[(168, 8), bool], Tensor[(180, 4), bool], Tensor[(180, 4), float64]) {
  %773 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %774 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %775 = %774.1;
  %776 = cast(%775, dtype="float64") /* ty=Tensor[(180, 4), float64] */;
  %777 = log10(%776) /* ty=Tensor[(180, 4), float64] */;
  %778 = cast(%777, dtype="float64") /* ty=Tensor[(180, 4), float64] */;
  %779 = sigmoid(%778) /* ty=Tensor[(180, 4), float64] */;
  %780 = cast(%777, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
  %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(2), int32] */;
  %782 = cast(%779, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %784 = cast(%777, dtype="float64") /* ty=Tensor[(180, 4), float64] */;
  %785 = shape_of(%779, dtype="int32") /* ty=Tensor[(2), int32] */;
  %786 = cast(%779, dtype="float64") /* ty=Tensor[(180, 4), float64] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %788 = %773.0;
  %789 = logical_and(%782, %783) /* ty=Tensor[(180, 4), bool] */;
  %790 = multiply(%786, %787) /* ty=Tensor[(180, 4), float64] */;
  (%788, %789, %790)
}

def @func_2010(%var_2001: Tensor[(180, 4), float32]) -> (Tensor[(180, 4), float32],) {
  %791 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %792 = %791.1;
  %793 = cast(%var_2001, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(2), int32] */;
  %795 = cast(%792, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %797 = power(%795, %796) /* ty=Tensor[(180, 4), float32] */;
  (%797,)
}

def @func_10622(%var_10620: Tensor[(720), float32]) -> (Tensor[(168, 8), float32], Tensor[(168, 8), bool], Tensor[(720), float32], Tensor[(720), float32], Tensor[(16, 7, 12), int8]) {
  @func_10619(%var_10620) /* ty=(Tensor[(168, 8), float32], Tensor[(168, 8), bool], Tensor[(720), float32], Tensor[(720), float32], Tensor[(16, 7, 12), int8]) */
}

def @func_10890() -> (Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32]) {
  %798 = @func_7274() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16]) */;
  %799 = %798.1;
  %800 = cast(%799, dtype="float32") /* ty=Tensor[(8, 6, 15), float32] */;
  %801 = @func_5994() /* ty=(Tensor[(180, 4), float32], Tensor[(168, 8), bool]) */;
  %802 = asinh(%800) /* ty=Tensor[(8, 6, 15), float32] */;
  %803 = %801.0;
  (%802, %803)
}

def @func_10291() -> Tensor[(16, 7, 12), int8] {
  %805 = fn () -> Tensor[(16, 7, 12), int8] {
    %804 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
    %804.0
  };
  %805() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_6348() -> Tensor[(168, 8), float64] {
  %806 = @func_2861() /* ty=Tensor[(168, 8), float64] */;
  %807 = cast(%806, dtype="float64") /* ty=Tensor[(168, 8), float64] */;
  rsqrt(%807) /* ty=Tensor[(168, 8), float64] */
}

def @func_4001() -> Tensor[(16, 7, 12), int8] {
  @func_3999() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_9377() -> (Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(720), float32]) {
  %808 = @func_1954() /* ty=(Tensor[(6, 16, 12), float64],) */;
  %809 = cast(meta[relay.Constant][26] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %810 = reshape(%809, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %811 = @func_3218(%810) /* ty=(Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(720), float32], Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32]) */;
  %812 = %808.0;
  %813 = @func_5154() /* ty=Tensor[(16, 7, 12), int8] */;
  %814 = %811.1;
  (%812, %813, %814, meta[relay.Constant][26] /* ty=Tensor[(720), float32] */)
}

def @func_10704() -> Tensor[(6, 16, 12), float64] {
  %815 = fn () -> Tensor[(6, 16, 12), float64] {
    @func_8873() /* ty=Tensor[(6, 16, 12), float64] */
  };
  %815() /* ty=Tensor[(6, 16, 12), float64] */
}

def @func_9609(%var_9607: Tensor[(168, 8), bool]) -> Tensor[(168, 8), int16] {
  @func_9606(%var_9607) /* ty=Tensor[(168, 8), int16] */
}

def @func_9495() -> (Tensor[(16, 7, 12), int8],) {
  @func_9493() /* ty=(Tensor[(16, 7, 12), int8],) */
}

def @func_5154() -> Tensor[(16, 7, 12), int8] {
  %816 = @func_3793() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) */;
  %816.8
}

def @func_8960() -> (Tensor[(168, 8), bool],) {
  @func_8958() /* ty=(Tensor[(168, 8), bool],) */
}

def @func_4398(%var_4373: Tensor[(16, 13, 12), float64]) -> (Tensor[(16, 13, 12), int8],) {
  %817 = cast(%var_4373, dtype="float64") /* ty=Tensor[(16, 13, 12), float64] */;
  %818 = tan(%817) /* ty=Tensor[(16, 13, 12), float64] */;
  %819 = cast(%var_4373, dtype="int8") /* ty=Tensor[(16, 13, 12), int8] */;
  %820 = shape_of(%818, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%818, dtype="int8") /* ty=Tensor[(16, 13, 12), int8] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %823 = left_shift(%821, %822) /* ty=Tensor[(16, 13, 12), int8] */;
  (%823,)
}

def @func_6779() -> (Tensor[(168, 8), int8], Tensor[(180, 4), float32], Tensor[(180, 4), float32]) {
  %841 = fn () -> (Tensor[(168, 8), int8], Tensor[(180, 4), float32], Tensor[(180, 4), float32]) {
    %824 = @func_5573() /* ty=(Tensor[(168, 8), bool],) */;
    %825 = %824.0;
    %826 = @func_3259() /* ty=(Tensor[(168, 8), bool],) */;
    %827 = %826.0;
    %828 = cast(%827, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
    %829 = shape_of(%825, dtype="int32") /* ty=Tensor[(2), int32] */;
    %830 = cast(%825, dtype="int8") /* ty=Tensor[(168, 8), int8] */;
    %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %832 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
    %833 = %832.3;
    %834 = cast(%833, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
    %835 = sin(%834) /* ty=Tensor[(180, 4), float32] */;
    %836 = cast(%835, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
    %837 = reshape(%836, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
    %838 = @func_2010(%837) /* ty=(Tensor[(180, 4), float32],) */;
    %839 = bitwise_or(%830, %831) /* ty=Tensor[(168, 8), int8] */;
    %840 = %838.0;
    (%839, %835, %840)
  };
  %841() /* ty=(Tensor[(168, 8), int8], Tensor[(180, 4), float32], Tensor[(180, 4), float32]) */
}

def @func_1069(%var_1044: Tensor[(16, 7, 12), int8], %var_1065: Tensor[(4, 180), float32]) -> (Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) {
  %842 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %843 = %842.1;
  %844 = cast(%var_1044, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %845 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%843, dtype="bool") /* ty=Tensor[(16, 7, 12), bool] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %848 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %849 = cast(%var_1065, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
  %850 = reshape(%849, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %851 = @func_434(%850) /* ty=(Tensor[(8, 6, 15), float32],) */;
  %852 = less(%846, %847) /* ty=Tensor[(16, 7, 12), bool] */;
  %853 = %848.0;
  %854 = %851.0;
  (%852, %853, %854, %var_1065)
}

def @func_2403() -> (Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) {
  @func_2401() /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) */
}

def @func_9256() -> (Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) {
  @func_9254() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */
}

def @func_3346() -> Tensor[(16, 7, 12), int8] {
  @func_3344() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_1307() -> Tensor[(180, 4), float32] {
  %856 = fn () -> Tensor[(180, 4), float32] {
    %855 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
    %855.1
  };
  %856() /* ty=Tensor[(180, 4), float32] */
}

def @func_854(%var_849: Tensor[(12, 60), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) {
  %857 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %858 = cast(%var_849, dtype="float32") /* ty=Tensor[(12, 60), float32] */;
  %859 = reshape(%858, newshape=[4, 180]) /* ty=Tensor[(4, 180), float32] */;
  %860 = @func_786(%859) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), float32], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(8, 6, 15), float32]) */;
  %861 = %857.3;
  %862 = %860.3;
  (%861, %862, %var_849)
}

def @func_5318(%var_5316: Tensor[(2496), float64]) -> (Tensor[(8, 6, 15), uint16], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) {
  @func_5315(%var_5316) /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 13, 12), int8], Tensor[(2496), float64]) */
}

def @func_3304(%var_3302: Tensor[(180, 4), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(180, 4), bool]) {
  @func_3301(%var_3302) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), bool]) */
}

def @func_9020() -> (Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(180, 4), float32], Tensor[(180, 4), float32]) {
  %863 = @func_6280() /* ty=(Tensor[(180, 4), float32],) */;
  %864 = @func_2906() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %865 = @func_8988() /* ty=Tensor[(16, 7, 12), float64] */;
  %866 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  %867 = %863.0;
  %868 = %864.1;
  (%865, %866, %867, %868)
}

def @func_8874() -> Tensor[(6, 16, 12), float64] {
  %869 = fn () -> Tensor[(6, 16, 12), float64] {
    @func_6219() /* ty=Tensor[(6, 16, 12), float64] */
  };
  %869() /* ty=Tensor[(6, 16, 12), float64] */
}

def @func_8216() -> Tensor[(16, 7, 12), int8] {
  @func_5831() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_1522() -> Tensor[(168, 8), bool] {
  %871 = fn () -> Tensor[(168, 8), bool] {
    %870 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %870.2
  };
  %871() /* ty=Tensor[(168, 8), bool] */
}

def @func_9969() -> Tensor[(3, 3, 6), float64] {
  %873 = fn () -> Tensor[(3, 3, 6), float64] {
    %872 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 3, 6), float64] */;
    rsqrt(%872) /* ty=Tensor[(3, 3, 6), float64] */
  };
  %873() /* ty=Tensor[(3, 3, 6), float64] */
}

def @func_3850(%var_3848: Tensor[(1344), int8]) -> (Tensor[(11, 14, 13), float64], Tensor[(8, 6, 15), float32], Tensor[(1344), int8], Tensor[(720), float32]) {
  @func_3847(%var_3848) /* ty=(Tensor[(11, 14, 13), float64], Tensor[(8, 6, 15), float32], Tensor[(1344), int8], Tensor[(720), float32]) */
}

def @func_6872() -> (Tensor[(180, 4), float32],) {
  %876 = fn () -> (Tensor[(180, 4), float32],) {
    %874 = @func_2906() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
    %875 = %874.1;
    (%875,)
  };
  %876() /* ty=(Tensor[(180, 4), float32],) */
}

def @func_10147() -> (Tensor[(180, 4), float32],) {
  @func_10145() /* ty=(Tensor[(180, 4), float32],) */
}

def @func_6162() -> Tensor[(16, 7, 12), int8] {
  @func_5799() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_9432(%var_9417: Tensor[(13, 1, 10), int8], %var_9418: Tensor[(13, 7, 10), int8]) -> (Tensor[(13, 7, 10), int8], Tensor[(168, 8), bool]) {
  %877 = cast(%var_9417, dtype="int8") /* ty=Tensor[(13, 1, 10), int8] */;
  %878 = cast(%var_9418, dtype="int8") /* ty=Tensor[(13, 7, 10), int8] */;
  %879 = right_shift(%877, %878) /* ty=Tensor[(13, 7, 10), int8] */;
  %880 = @func_6848() /* ty=Tensor[(168, 8), bool] */;
  (%879, %880)
}

def @func_7841() -> (Tensor[(168, 8), bool],) {
  %881 = @func_2087() /* ty=Tensor[(168, 8), bool] */;
  (%881,)
}

def @func_6070() -> (Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8]) {
  %882 = @func_830() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) */;
  %883 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %884 = %882.0;
  %885 = %883.1;
  (%884, %885)
}

def @func_2292(%var_2290: Tensor[(5, 16, 3), float32], %var_2291: Tensor[(720), float32]) -> (Tensor[(5, 16, 3), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) {
  @func_2288(%var_2290, %var_2291) /* ty=(Tensor[(5, 16, 3), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */
}

def @func_29(%var_26: Tensor[(16, 7, 12), bool], %var_27: Tensor[(16, 7, 12), bool], %var_28: Tensor[(16, 7, 12), bool]) -> Tensor[(16, 7, 12), int8] {
  @func_24(%var_26, %var_27, %var_28) /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_2025() -> Tensor[(16, 7, 12), int8] {
  %886 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %886.4
}

def @func_4349(%var_4287: Tensor[(180, 4), float32], %var_4324: Tensor[(1344), bool]) -> (Tensor[(180, 4), float32], Tensor[(8, 6, 15), float32], Tensor[(6, 16, 12), float64], Tensor[(1344), bool], Tensor[(6, 16, 12), bool], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  %887 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %888 = %887.1;
  %889 = cast(%var_4287, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %890 = shape_of(%888, dtype="int32") /* ty=Tensor[(2), int32] */;
  %891 = cast(%888, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %893 = mod(%891, %892) /* ty=Tensor[(180, 4), float32] */;
  %894 = cast(%893, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %895 = reshape(%894, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float32] */;
  %896 = @func_434(%895) /* ty=(Tensor[(8, 6, 15), float32],) */;
  %897 = cast(%var_4324, dtype="bool") /* ty=Tensor[(1344), bool] */;
  %898 = reshape(%897, newshape=[168, 8]) /* ty=Tensor[(168, 8), bool] */;
  %899 = @func_1927(%898) /* ty=(Tensor[(6, 16, 12), float64], Tensor[(168, 8), uint64], Tensor[(16, 7, 12), int8]) */;
  %900 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %901 = %900.0;
  %902 = cast(%901, dtype="float64") /* ty=Tensor[(6, 16, 12), float64] */;
  %903 = sin(%902) /* ty=Tensor[(6, 16, 12), float64] */;
  %904 = cast(%901, dtype="int16") /* ty=Tensor[(6, 16, 12), int16] */;
  %905 = shape_of(%903, dtype="int32") /* ty=Tensor[(3), int32] */;
  %906 = cast(%903, dtype="int16") /* ty=Tensor[(6, 16, 12), int16] */;
  %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %908 = bitwise_and(%906, %907) /* ty=Tensor[(6, 16, 12), int16] */;
  %909 = cast(%903, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %910 = shape_of(%908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(%908, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %913 = @func_4204() /* ty=(Tensor[(168, 8), bool],) */;
  %914 = @func_3937() /* ty=(Tensor[(11, 14, 13), int64], Tensor[(6, 16, 12), float64], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %915 = %896.0;
  %916 = %899.0;
  %917 = not_equal(%911, %912) /* ty=Tensor[(6, 16, 12), bool] */;
  %918 = %913.0;
  %919 = %914.2;
  (%893, %915, %916, %var_4324, %917, %918, %919)
}

def @func_8102() -> (Tensor[(16, 7, 12), int8],) {
  @func_8100() /* ty=(Tensor[(16, 7, 12), int8],) */
}

def @func_1594() -> (Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) {
  @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */
}

def @func_6444() -> (Tensor[(168, 8), bool],) {
  %922 = fn () -> (Tensor[(168, 8), bool],) {
    %920 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
    %921 = %920.0;
    (%921,)
  };
  %922() /* ty=(Tensor[(168, 8), bool],) */
}

def @func_10540() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  %923 = @func_7841() /* ty=(Tensor[(168, 8), bool],) */;
  %924 = %923.0;
  %925 = @func_10256() /* ty=Tensor[(16, 7, 12), int8] */;
  (%924, %925)
}

def @func_7274() -> (Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16]) {
  %926 = @func_7233() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %927 = @func_2401() /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) */;
  %928 = %926.0;
  %929 = %927.0;
  (%928, %929)
}

def @func_1664() -> Tensor[(16, 7, 12), int8] {
  %931 = fn () -> Tensor[(16, 7, 12), int8] {
    %930 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %930.1
  };
  %931() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_10744() -> (Tensor[(168, 8), float32],) {
  @func_10742() /* ty=(Tensor[(168, 8), float32],) */
}

def @func_4856() -> Tensor[(168, 8), bool] {
  @func_1817() /* ty=Tensor[(168, 8), bool] */
}

def @func_5284() -> Tensor[(168, 8), bool] {
  %932 = @func_3793() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) */;
  %932.0
}

def @func_10236() -> (Tensor[(16, 7, 12), int8], Tensor[(11, 4, 13), uint8], Tensor[(572), uint8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  @func_10234() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(11, 4, 13), uint8], Tensor[(572), uint8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */
}

def @func_10145() -> (Tensor[(180, 4), float32],) {
  %933 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %934 = %933.3;
  (%934,)
}

def @func_2207(%var_2205: Tensor[(16, 7, 12), int8]) -> (Tensor[(16, 7, 12), bool], Tensor[(16, 7, 12), float32]) {
  @func_2204(%var_2205) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(16, 7, 12), float32]) */
}

def @func_3121() -> (Tensor[(168, 8), float32], Tensor[(168, 8), bool]) {
  @func_3119() /* ty=(Tensor[(168, 8), float32], Tensor[(168, 8), bool]) */
}

def @func_3344() -> Tensor[(16, 7, 12), int8] {
  %935 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %935.0
}

def @func_3035() -> (Tensor[(8, 6, 15), uint16],) {
  %938 = fn () -> (Tensor[(8, 6, 15), uint16],) {
    %936 = @func_2401() /* ty=(Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8]) */;
    %937 = %936.0;
    (%937,)
  };
  %938() /* ty=(Tensor[(8, 6, 15), uint16],) */
}

def @func_2351(%var_2349: Tensor[(16, 7, 12), int8], %var_2350: Tensor[(720), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), uint8], Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(720), float32]) {
  @func_2347(%var_2349, %var_2350) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), uint8], Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(720), float32]) */
}

def @func_1818() -> Tensor[(168, 8), bool] {
  %940 = fn () -> Tensor[(168, 8), bool] {
    %939 = @func_700() /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
    %939.2
  };
  %940() /* ty=Tensor[(168, 8), bool] */
}

def @func_857(%var_855: Tensor[(12, 60), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) {
  @func_854(%var_855) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */
}

def @func_4061() -> Tensor[(168, 8), bool] {
  @func_4059() /* ty=Tensor[(168, 8), bool] */
}

def @func_10087() -> Tensor[(16, 13, 12), int8] {
  @func_10085() /* ty=Tensor[(16, 13, 12), int8] */
}

def @func_4401(%var_4399: Tensor[(16, 13, 12), float64]) -> (Tensor[(16, 13, 12), int8],) {
  @func_4398(%var_4399) /* ty=(Tensor[(16, 13, 12), int8],) */
}

def @func_8958() -> (Tensor[(168, 8), bool],) {
  %941 = @func_7492() /* ty=(Tensor[(168, 8), bool],) */;
  %942 = %941.0;
  (%942,)
}

def @func_2822(%var_2813: Tensor[(720), float32]) -> (Tensor[(6, 16, 12), float64], Tensor[(10, 4, 15), float32], Tensor[(600), float32], Tensor[(180, 4), float32], Tensor[(1344), int8], Tensor[(720), float32]) {
  %943 = @func_944() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32], Tensor[(8, 6, 15), float64]) */;
  %944 = cast(meta[relay.Constant][28] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %945 = reshape(%944, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float32] */;
  %946 = cast(meta[relay.Constant][29] /* ty=Tensor[(1344), int8] */, dtype="int8") /* ty=Tensor[(1344), int8] */;
  %947 = cast(%var_2813, dtype="float32") /* ty=Tensor[(720), float32] */;
  %948 = reshape(%946, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
  %949 = reshape(%947, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %950 = @func_2347(%948, %949) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), uint8], Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(720), float32]) */;
  %951 = %943.0;
  %952 = @func_1498(%945) /* ty=Tensor[(10, 4, 15), float32] */;
  %953 = %950.3;
  (%951, %952, meta[relay.Constant][28] /* ty=Tensor[(600), float32] */, %953, meta[relay.Constant][29] /* ty=Tensor[(1344), int8] */, %var_2813)
}

def @func_2149() -> (Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) {
  @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */
}

def @func_4059() -> Tensor[(168, 8), bool] {
  @func_2087() /* ty=Tensor[(168, 8), bool] */
}

def @func_7191() -> (Tensor[(180, 4), float64],) {
  @func_7189() /* ty=(Tensor[(180, 4), float64],) */
}

def @func_2347(%var_2332: Tensor[(16, 7, 12), int8], %var_2345: Tensor[(720), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), uint8], Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(720), float32]) {
  %954 = @func_2147() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) */;
  %955 = @func_2025() /* ty=Tensor[(16, 7, 12), int8] */;
  %956 = cast(%var_2332, dtype="uint8") /* ty=Tensor[(16, 7, 12), uint8] */;
  %957 = shape_of(%955, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(%955, dtype="uint8") /* ty=Tensor[(16, 7, 12), uint8] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %960 = @func_1972() /* ty=(Tensor[(168, 8), bool], Tensor[(180, 4), float32]) */;
  %961 = cast(%var_2345, dtype="float32") /* ty=Tensor[(720), float32] */;
  %962 = reshape(%961, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %963 = @func_2010(%962) /* ty=(Tensor[(180, 4), float32],) */;
  %964 = %954.0;
  %965 = bitwise_or(%958, %959) /* ty=Tensor[(16, 7, 12), uint8] */;
  %966 = %960.0;
  %967 = %963.0;
  (%964, %965, %966, %967, %var_2345)
}

def @func_7492() -> (Tensor[(168, 8), bool],) {
  %968 = @func_5573() /* ty=(Tensor[(168, 8), bool],) */;
  %969 = %968.0;
  (%969,)
}

def @func_3119() -> (Tensor[(168, 8), float32], Tensor[(168, 8), bool]) {
  %970 = @func_2861() /* ty=Tensor[(168, 8), float64] */;
  %971 = cast(%970, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %972 = acos(%971) /* ty=Tensor[(168, 8), float32] */;
  %973 = @func_2087() /* ty=Tensor[(168, 8), bool] */;
  (%972, %973)
}

def @func_5994() -> (Tensor[(180, 4), float32], Tensor[(168, 8), bool]) {
  %974 = @func_4102() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */;
  %975 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  %976 = %974.0;
  (%975, %976)
}

def @func_10234() -> (Tensor[(16, 7, 12), int8], Tensor[(11, 4, 13), uint8], Tensor[(572), uint8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) {
  %977 = cast(meta[relay.Constant][30] /* ty=Tensor[(572), uint8] */, dtype="uint8") /* ty=Tensor[(572), uint8] */;
  %978 = cast(meta[relay.Constant][30] /* ty=Tensor[(572), uint8] */, dtype="uint8") /* ty=Tensor[(572), uint8] */;
  %979 = reshape(%977, newshape=[11, 4, 13]) /* ty=Tensor[(11, 4, 13), uint8] */;
  %980 = reshape(%978, newshape=[11, 4, 13]) /* ty=Tensor[(11, 4, 13), uint8] */;
  %981 = @func_5896(%979, %980) /* ty=(Tensor[(11, 4, 13), uint8], Tensor[(16, 7, 12), int8]) */;
  %982 = @func_8100() /* ty=(Tensor[(16, 7, 12), int8],) */;
  %983 = @func_8958() /* ty=(Tensor[(168, 8), bool],) */;
  %984 = %983.0;
  %985 = @func_4997() /* ty=Tensor[(168, 8), float32] */;
  %986 = cast(%985, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %987 = shape_of(%984, dtype="int32") /* ty=Tensor[(2), int32] */;
  %988 = cast(%984, dtype="bool") /* ty=Tensor[(168, 8), bool] */;
  %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %990 = @func_830() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) */;
  %991 = @func_5154() /* ty=Tensor[(16, 7, 12), int8] */;
  %992 = %981.0;
  %993 = @func_6848() /* ty=Tensor[(168, 8), bool] */;
  %994 = %982.0;
  %995 = equal(%988, %989) /* ty=Tensor[(168, 8), bool] */;
  %996 = %990.1;
  (%991, %992, meta[relay.Constant][30] /* ty=Tensor[(572), uint8] */, %993, %994, %995, %996)
}

def @func_3793() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), float64], Tensor[(180, 4), float32], Tensor[(168, 8), float32], Tensor[(168, 8), float32], Tensor[(5, 16, 3), float32], Tensor[(24, 10), float32], Tensor[(180, 4), bool], Tensor[(16, 7, 12), int8]) {
  %997 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %998 = @func_1194() /* ty=(Tensor[(1344), int8], Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32], Tensor[(16, 7, 12), int8]) */;
  %999 = @func_3628() /* ty=(Tensor[(168, 8), bool],) */;
  %1000 = %999.0;
  %1001 = cast(%1000, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %1002 = erf(%1001) /* ty=Tensor[(168, 8), float32] */;
  %1003 = cast(%1002, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %1004 = acosh(%1003) /* ty=Tensor[(168, 8), float32] */;
  %1005 = @func_3344() /* ty=Tensor[(16, 7, 12), int8] */;
  %1006 = cast(%1005, dtype="float32") /* ty=Tensor[(16, 7, 12), float32] */;
  %1007 = shape_of(%1004, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1008 = cast(%1004, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1010 = cast(%1002, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
  %1011 = cast(meta[relay.Constant][31] /* ty=Tensor[(24, 10), float32] */, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %1012 = %998.3;
  %1013 = cast(%1012, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %1014 = reshape(%1011, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %1015 = reshape(%1013, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %1016 = @func_2288(%1014, %1015) /* ty=(Tensor[(5, 16, 3), float32], Tensor[(8, 6, 15), float32], Tensor[(720), float32]) */;
  %1017 = cast(%1012, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %1018 = reshape(%1017, newshape=[180, 4]) /* ty=Tensor[(180, 4), float32] */;
  %1019 = @func_3301(%1018) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(180, 4), bool]) */;
  %1020 = %1019.1;
  %1021 = cast(%1020, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %1022 = reshape(%1021, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
  %1023 = @func_854(%1022) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8], Tensor[(12, 60), float32]) */;
  %1024 = @func_2087() /* ty=Tensor[(168, 8), bool] */;
  %1025 = %997.1;
  %1026 = power(%1008, %1009) /* ty=Tensor[(168, 8), float32] */;
  %1027 = cos(%1010) /* ty=Tensor[(168, 8), float32] */;
  %1028 = %1016.0;
  %1029 = %1023.1;
  (%1024, %1025, %1012, %1026, %1027, %1028, meta[relay.Constant][31] /* ty=Tensor[(24, 10), float32] */, %1020, %1029)
}

def @func_437(%var_435: Tensor[(8, 6, 15), float32]) -> (Tensor[(8, 6, 15), float32],) {
  @func_434(%var_435) /* ty=(Tensor[(8, 6, 15), float32],) */
}

def @func_8732(%var_8730: Tensor[(720), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(10, 4, 15), float32], Tensor[(720), float32], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(13, 16, 7), float32]) {
  @func_8729(%var_8730) /* ty=(Tensor[(16, 7, 12), int8], Tensor[(10, 4, 15), float32], Tensor[(720), float32], Tensor[(8, 6, 15), uint16], Tensor[(16, 7, 12), int8], Tensor[(13, 16, 7), float32]) */
}

def @func_7843() -> (Tensor[(168, 8), bool],) {
  @func_7841() /* ty=(Tensor[(168, 8), bool],) */
}

def @func_10817() -> (Tensor[(168, 8), bool], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
  %1036 = fn () -> (Tensor[(168, 8), bool], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) {
    %1030 = @func_7492() /* ty=(Tensor[(168, 8), bool],) */;
    %1031 = @func_10010() /* ty=(Tensor[(168, 8), bool],) */;
    %1032 = @func_7492() /* ty=(Tensor[(168, 8), bool],) */;
    %1033 = %1030.0;
    %1034 = %1031.0;
    %1035 = %1032.0;
    (%1033, %1034, %1035)
  };
  %1036() /* ty=(Tensor[(168, 8), bool], Tensor[(168, 8), bool], Tensor[(168, 8), bool]) */
}

def @func_4661(%var_4660: Tensor[(720), float32]) -> (Tensor[(16, 7, 12), float64], Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(720), float32]) {
  %1045 = fn (%var_4653: Tensor[(720), float32]) -> (Tensor[(16, 7, 12), float64], Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(720), float32]) {
    %1037 = @func_2997() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float64]) */;
    %1038 = @func_1592() /* ty=(Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32], Tensor[(8, 6, 15), float32], Tensor[(180, 4), float32], Tensor[(12, 60), float32], Tensor[(168, 8), bool]) */;
    %1039 = cast(%var_4653, dtype="float32") /* ty=Tensor[(720), float32] */;
    %1040 = reshape(%1039, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %1041 = @func_3218(%1040) /* ty=(Tensor[(16, 7, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(720), float32], Tensor[(180, 4), float32], Tensor[(16, 7, 12), float32]) */;
    %1042 = %1037.1;
    %1043 = %1038.5;
    %1044 = %1041.3;
    (%1042, %1043, %1044, %var_4653)
  };
  %1045(%var_4660) /* ty=(Tensor[(16, 7, 12), float64], Tensor[(168, 8), bool], Tensor[(180, 4), float32], Tensor[(720), float32]) */
}

def @func_8400() -> (Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8]) {
  @func_8398() /* ty=(Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), int8]) */
}

def @func_3301(%var_3290: Tensor[(180, 4), float32]) -> (Tensor[(16, 7, 12), int8], Tensor[(180, 4), bool]) {
  %1046 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %1047 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  %1048 = cast(%var_3290, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
  %1049 = shape_of(%1047, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1050 = cast(%1047, dtype="bool") /* ty=Tensor[(180, 4), bool] */;
  %1051 = dyn.reshape(%1048, %1049, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1052 = %1046.1;
  %1053 = less_equal(%1050, %1051) /* ty=Tensor[(180, 4), bool] */;
  (%1052, %1053)
}

def @func_9720() -> (Tensor[(11, 14, 13), float32], Tensor[(1344), int8], Tensor[(720), float32]) {
  %1059 = fn () -> (Tensor[(11, 14, 13), float32], Tensor[(1344), int8], Tensor[(720), float32]) {
    %1054 = cast(meta[relay.Constant][32] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %1055 = reshape(%1054, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %1056 = @func_2822(%1055) /* ty=(Tensor[(6, 16, 12), float64], Tensor[(10, 4, 15), float32], Tensor[(600), float32], Tensor[(180, 4), float32], Tensor[(1344), int8], Tensor[(720), float32]) */;
    %1057 = @func_8176() /* ty=Tensor[(11, 14, 13), float32] */;
    %1058 = %1056.4;
    (%1057, %1058, meta[relay.Constant][32] /* ty=Tensor[(720), float32] */)
  };
  %1059() /* ty=(Tensor[(11, 14, 13), float32], Tensor[(1344), int8], Tensor[(720), float32]) */
}

def @func_8599() -> Tensor[(168, 8), bool] {
  %1061 = fn () -> Tensor[(168, 8), bool] {
    %1060 = @func_6016() /* ty=(Tensor[(168, 8), bool],) */;
    %1060.0
  };
  %1061() /* ty=Tensor[(168, 8), bool] */
}

def @func_1073(%var_1071: Tensor[(16, 7, 12), int8], %var_1072: Tensor[(4, 180), float32]) -> (Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) {
  @func_1069(%var_1071, %var_1072) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(6, 16, 12), float64], Tensor[(8, 6, 15), float32], Tensor[(4, 180), float32]) */
}

def @func_9292() -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float32], Tensor[(168, 8), bool]) {
  %1070 = fn () -> (Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float32], Tensor[(168, 8), bool]) {
    %1062 = @func_5573() /* ty=(Tensor[(168, 8), bool],) */;
    %1063 = @func_5154() /* ty=Tensor[(16, 7, 12), int8] */;
    %1064 = cast(%1063, dtype="float64") /* ty=Tensor[(16, 7, 12), float64] */;
    %1065 = reshape(%1064, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), float64] */;
    %1066 = @func_4478(%1065) /* ty=(Tensor[(16, 7, 12), float32], Tensor[(16, 7, 12), int8]) */;
    %1067 = %1062.0;
    %1068 = %1066.0;
    %1069 = @func_8598() /* ty=Tensor[(168, 8), bool] */;
    (%1067, %1063, %1068, %1069)
  };
  %1070() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8], Tensor[(16, 7, 12), float32], Tensor[(168, 8), bool]) */
}

def @func_1955() -> (Tensor[(6, 16, 12), float64],) {
  %1073 = fn () -> (Tensor[(6, 16, 12), float64],) {
    %1071 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
    %1072 = %1071.0;
    (%1072,)
  };
  %1073() /* ty=(Tensor[(6, 16, 12), float64],) */
}

def @func_2147() -> (Tensor[(16, 7, 12), int8], Tensor[(180, 4), float32]) {
  %1074 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %1075 = %1074.1;
  %1076 = @func_1306() /* ty=Tensor[(180, 4), float32] */;
  (%1075, %1076)
}

def @func_6121() -> Tensor[(16, 7, 12), int8] {
  @func_6119() /* ty=Tensor[(16, 7, 12), int8] */
}

def @func_6350() -> Tensor[(168, 8), float64] {
  @func_6348() /* ty=Tensor[(168, 8), float64] */
}

def @func_8062(%var_8059: Tensor[(10, 3, 1), float64], %var_8060: Tensor[(10, 3, 5), float64], %var_8061: Tensor[(168, 8), bool]) -> (Tensor[(10, 3, 5), uint32], Tensor[(168, 8), float32], Tensor[(16, 7, 12), int8], Tensor[(10, 3, ?), uint32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), float32], Tensor[(720), float32], Tensor[(168, 8), float32], Tensor[(10, 3, 1), float32]) {
  %1108 = fn (%var_7946: Tensor[(10, 3, 1), float64], %var_7952: Tensor[(10, 3, 5), float64], %var_8040: Tensor[(168, 8), bool]) -> (Tensor[(10, 3, 5), uint32], Tensor[(168, 8), float32], Tensor[(16, 7, 12), int8], Tensor[(10, 3, ?), uint32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), float32], Tensor[(720), float32], Tensor[(168, 8), float32], Tensor[(10, 3, 1), float32]) {
    %1077 = cast(%var_7946, dtype="uint32") /* ty=Tensor[(10, 3, 1), uint32] */;
    %1078 = cast(%var_7952, dtype="uint32") /* ty=Tensor[(10, 3, 5), uint32] */;
    %1079 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
    %1080 = cast(%var_7946, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
    %1081 = cosh(%1080) /* ty=Tensor[(10, 3, 1), float64] */;
    %1082 = cast(%var_7946, dtype="uint32") /* ty=Tensor[(10, 3, 1), uint32] */;
    %1083 = shape_of(%1081, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1084 = cast(%1081, dtype="uint32") /* ty=Tensor[(10, 3, 1), uint32] */;
    %1085 = dyn.reshape(%1082, %1083, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1086 = @func_3025() /* ty=(Tensor[(16, 7, 12), int8],) */;
    %1087 = @func_3259() /* ty=(Tensor[(168, 8), bool],) */;
    %1088 = %1086.0;
    %1089 = cast(%1088, dtype="int8") /* ty=Tensor[(16, 7, 12), int8] */;
    %1090 = reshape(%1089, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), int8] */;
    %1091 = @func_2204(%1090) /* ty=(Tensor[(16, 7, 12), bool], Tensor[(16, 7, 12), float32]) */;
    %1092 = @func_5493() /* ty=(Tensor[(168, 8), float32], Tensor[(720), float32]) */;
    %1093 = @func_5284() /* ty=Tensor[(168, 8), bool] */;
    %1094 = cast(%var_8040, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
    %1095 = shape_of(%1093, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1096 = cast(%1093, dtype="float32") /* ty=Tensor[(168, 8), float32] */;
    %1097 = dyn.reshape(%1094, %1095, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1098 = cast(%1081, dtype="float32") /* ty=Tensor[(10, 3, 1), float32] */;
    %1099 = logical_xor(%1077, %1078) /* ty=Tensor[(10, 3, 5), uint32] */;
    %1100 = @func_4997() /* ty=Tensor[(168, 8), float32] */;
    %1101 = %1079.0;
    %1102 = subtract(%1084, %1085) /* ty=Tensor[(10, 3, ?), uint32] */;
    %1103 = %1087.0;
    %1104 = %1091.1;
    %1105 = %1092.1;
    %1106 = floor_mod(%1096, %1097) /* ty=Tensor[(168, 8), float32] */;
    %1107 = log(%1098) /* ty=Tensor[(10, 3, 1), float32] */;
    (%1099, %1100, %1101, %1102, %1088, %1103, %1104, %1105, %1106, %1107)
  };
  %1108(%var_8059, %var_8060, %var_8061) /* ty=(Tensor[(10, 3, 5), uint32], Tensor[(168, 8), float32], Tensor[(16, 7, 12), int8], Tensor[(10, 3, ?), uint32], Tensor[(16, 7, 12), int8], Tensor[(168, 8), bool], Tensor[(16, 7, 12), float32], Tensor[(720), float32], Tensor[(168, 8), float32], Tensor[(10, 3, 1), float32]) */
}

def @func_6220() -> Tensor[(6, 16, 12), float64] {
  %1110 = fn () -> Tensor[(6, 16, 12), float64] {
    %1109 = @func_1428() /* ty=(Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(8, 6, 15), uint16], Tensor[(168, 8), uint16]) */;
    %1109.0
  };
  %1110() /* ty=Tensor[(6, 16, 12), float64] */
}

def @func_830() -> (Tensor[(6, 16, 12), float64], Tensor[(16, 7, 12), int8], Tensor[(6, 16, 12), float32]) {
  %1111 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 16, 12), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 12), float64] */;
  %1112 = @func_807() /* ty=(Tensor[(168, 8), bool], Tensor[(16, 7, 12), int8]) */;
  %1113 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 16, 12), float64] */, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
  %1114 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(6, 16, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1115 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 16, 12), float64] */, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
  %1116 = dyn.reshape(%1113, %1114, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1117 = exp(%1111) /* ty=Tensor[(6, 16, 12), float64] */;
  %1118 = %1112.1;
  %1119 = power(%1115, %1116) /* ty=Tensor[(6, 16, 12), float32] */;
  (%1117, %1118, %1119)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen762/build/output.py", line 3580, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:08:33] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

