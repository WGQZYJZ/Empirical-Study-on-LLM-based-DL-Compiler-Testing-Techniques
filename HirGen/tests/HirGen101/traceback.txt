==========mod==========
#[version = "0.0.5"]
def @func_5902() -> (Tensor[(11, 11, 13), float32],) {
  %0 = @func_2733() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %1 = %0.0;
  (%1,)
}

def @func_4571(%var_4564: Tensor[(10, 5), float64], %var_4565: Tensor[(10, 5), float64]) -> Tensor[(10, 5), float64] {
  %2 = cast(%var_4565, dtype="float64") /* ty=Tensor[(10, 5), float64] */;
  %3 = shape_of(%var_4564, dtype="int32") /* ty=Tensor[(2), int32] */;
  %4 = cast(%var_4564, dtype="float64") /* ty=Tensor[(10, 5), float64] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  power(%4, %5) /* ty=Tensor[(10, 5), float64] */
}

def @func_1071() -> (Tensor[(11, 11, 13), float32],) {
  %6 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  (%6,)
}

def @func_5659() -> Tensor[(11, 11, 13), float32] {
  %7 = @func_1941() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %7.0
}

def @func_5743(%var_5681: Tensor[(11, 10, 6), float64], %var_5715: Tensor[(11, 10, 6), float64]) -> (Tensor[(11, 10, 6), bool], Tensor[(11, 10, 6), uint16], Tensor[(11, 10, 6), float32]) {
  %8 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %9 = %8.0;
  %10 = cast(%var_5681, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %14 = cast(%var_5681, dtype="uint16") /* ty=Tensor[(11, 10, 6), uint16] */;
  %15 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%9, dtype="uint16") /* ty=Tensor[(11, 10, 6), uint16] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %18 = cast(%var_5715, dtype="float32") /* ty=Tensor[(11, 10, 6), float32] */;
  %19 = shape_of(%var_5681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%var_5681, dtype="float32") /* ty=Tensor[(11, 10, 6), float32] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %22 = logical_or(%12, %13) /* ty=Tensor[(11, 10, 6), bool] */;
  %23 = subtract(%16, %17) /* ty=Tensor[(11, 10, 6), uint16] */;
  %24 = floor_mod(%20, %21) /* ty=Tensor[(11, 10, 6), float32] */;
  (%22, %23, %24)
}

def @func_3006() -> Tensor[(11, 11, 13), float32] {
  %25 = @func_1829() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %25.0
}

def @func_1640(%var_1636: Tensor[(416), uint64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64]) {
  %26 = cast(%var_1636, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %27 = cast(%var_1636, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %28 = reshape(%26, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %29 = reshape(%27, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %30 = @func_1263(%28, %29) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(11, 11, 13), float32]) */;
  %31 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %32 = %30.1;
  (%31, %32, %var_1636)
}

def @func_3445() -> (Tensor[(11, 11, 13), float32], Tensor[(91, 1), float64], Tensor[(416), float32]) {
  %33 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %34 = cast(meta[relay.Constant][0] /* ty=Tensor[(91, 1), float64] */, dtype="float64") /* ty=Tensor[(91, 1), float64] */;
  %35 = reshape(%34, newshape=[13, 7]) /* ty=Tensor[(13, 7), float64] */;
  %36 = @func_2820(%35) /* ty=(Tensor[(196), float64], Tensor[(196), float32], Tensor[(196), float32], Tensor[(16, 2), uint8], Tensor[(11, 11, 13), bool], Tensor[(16, 13, 2), uint64], Tensor[(416), uint64], Tensor[(7, 13, 1), float64], Tensor[(13, 7), float64]) */;
  %37 = %36.6;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(416), float32] */;
  %39 = %33.0;
  %40 = log(%38) /* ty=Tensor[(416), float32] */;
  (%39, meta[relay.Constant][0] /* ty=Tensor[(91, 1), float64] */, %40)
}

def @func_5555(%var_5535: Tensor[(5, 1, 8), float32]) -> Tensor[(5, 1, 8), float32] {
  %41 = cast(%var_5535, dtype="float32") /* ty=Tensor[(5, 1, 8), float32] */;
  asin(%41) /* ty=Tensor[(5, 1, 8), float32] */
}

def @func_5360() -> (Tensor[(11, 10, 6), uint8],) {
  %42 = @func_3367() /* ty=(Tensor[(11, 10, 6), uint8],) */;
  %43 = %42.0;
  (%43,)
}

def @func_1195(%var_1176: Tensor[(11, 11, 13), float32]) -> (Tensor[(11, 11, 13), bool],) {
  %44 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %45 = cast(%var_1176, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%44, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %49 = equal(%47, %48) /* ty=Tensor[(11, 11, 13), bool] */;
  (%49,)
}

def @func_3935() -> (Tensor[(11, 11, 13), float32], Tensor[(96), float32], Tensor[(11, 10, 6), int16]) {
  %50 = @func_1789() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %51 = cast(meta[relay.Constant][1] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %52 = reshape(%51, newshape=[16, 1, 6]) /* ty=Tensor[(16, 1, 6), float32] */;
  %53 = @func_2652(%52) /* ty=(Tensor[(16, 1, 6), float32], Tensor[(11, 11, 13), bool], Tensor[(1573), float32], Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32]) */;
  %54 = %53.3;
  %55 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 10, 6), float64] */, dtype="int16") /* ty=Tensor[(11, 10, 6), int16] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="int16") /* ty=Tensor[(11, 10, 6), int16] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %59 = %50.0;
  %60 = bitwise_and(%57, %58) /* ty=Tensor[(11, 10, 6), int16] */;
  (%59, meta[relay.Constant][1] /* ty=Tensor[(96), float32] */, %60)
}

def @func_5202() -> (Tensor[(11, 11, 13), float32],) {
  %61 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  (%61,)
}

def @func_6156() -> (Tensor[(11, 11, 13), float32],) {
  %62 = @func_1941() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %63 = %62.0;
  (%63,)
}

def @func_6096(%var_6079: Tensor[(13, 9, 10), float32], %var_6080: Tensor[(13, 9, 10), float32]) -> (Tensor[(13, 9, 10), float32],) {
  %64 = cast(%var_6080, dtype="float32") /* ty=Tensor[(13, 9, 10), float32] */;
  %65 = shape_of(%var_6079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%var_6079, dtype="float32") /* ty=Tensor[(13, 9, 10), float32] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %68 = power(%66, %67) /* ty=Tensor[(13, 9, 10), float32] */;
  (%68,)
}

def @func_2677(%var_2671: float64, %var_2672: Tensor[(7, 13, 1), float64]) -> Tensor[(7, 13, 1), float64] {
  %69 = cast(%var_2671, dtype="float64") /* ty=float64 */;
  %70 = cast(%var_2672, dtype="float64") /* ty=Tensor[(7, 13, 1), float64] */;
  divide(%69, %70) /* ty=Tensor[(7, 13, 1), float64] */
}

def @func_3977() -> (Tensor[(11, 11, 13), uint32],) {
  %71 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %72 = cast(%71, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %73 = reshape(%72, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %74 = @func_1195(%73) /* ty=(Tensor[(11, 11, 13), bool],) */;
  %75 = %74.0;
  %76 = cast(%71, dtype="uint32") /* ty=Tensor[(11, 11, 13), uint32] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%75, dtype="uint32") /* ty=Tensor[(11, 11, 13), uint32] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %80 = left_shift(%78, %79) /* ty=Tensor[(11, 11, 13), uint32] */;
  (%80,)
}

def @func_1082() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %81 = @func_1071() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %82 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %83 = %81.0;
  (%82, %83)
}

def @func_4692(%var_4613: Tensor[(260), uint8], %var_4630: Tensor[(260), uint8]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), bool], Tensor[(260), bool], Tensor[(11, 11, 13), float32], Tensor[(260), bool], Tensor[(260), bool], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) {
  %84 = @func_3076() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %85 = %84.0;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %87 = cast(%var_4613, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %88 = reshape(%86, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %89 = reshape(%87, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %90 = @func_2463(%88, %89) /* ty=(Tensor[(11, 11, 13), bool], Tensor[(260), int64], Tensor[(4, 5, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(1, 14, 14), float32], Tensor[(864), int16], Tensor[(11, 11, 13), float64]) */;
  %91 = cast(%var_4630, dtype="bool") /* ty=Tensor[(260), bool] */;
  %92 = shape_of(%var_4613, dtype="int32") /* ty=Tensor[(1), int32] */;
  %93 = cast(%var_4613, dtype="bool") /* ty=Tensor[(260), bool] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?), bool] */;
  %95 = @func_1966() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %96 = cast(%var_4613, dtype="bool") /* ty=Tensor[(260), bool] */;
  %97 = shape_of(%var_4630, dtype="int32") /* ty=Tensor[(1), int32] */;
  %98 = cast(%var_4630, dtype="bool") /* ty=Tensor[(260), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?), bool] */;
  %100 = cast(%var_4613, dtype="float64") /* ty=Tensor[(260), float64] */;
  %101 = atanh(%100) /* ty=Tensor[(260), float64] */;
  %102 = cast(%var_4613, dtype="bool") /* ty=Tensor[(260), bool] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(1), int32] */;
  %104 = cast(%101, dtype="bool") /* ty=Tensor[(260), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?), bool] */;
  %106 = @func_3445() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(91, 1), float64], Tensor[(416), float32]) */;
  %107 = @func_3122() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %108 = %90.0;
  %109 = less(%93, %94) /* ty=Tensor[(260), bool] */;
  %110 = %95.0;
  %111 = logical_or(%98, %99) /* ty=Tensor[(260), bool] */;
  %112 = logical_and(%104, %105) /* ty=Tensor[(260), bool] */;
  %113 = %106.0;
  %114 = %107.0;
  (%85, %108, %109, %110, %111, %112, %113, %114)
}

def @func_4957(%var_4932: Tensor[(1, 5, 3), float64]) -> (Tensor[(?, 5, 3), float32], Tensor[(13, 7, 13), float64], Tensor[(1183), float64], Tensor[(11, 11, 13), bool], Tensor[(1573), float32]) {
  %115 = cast(%var_4932, dtype="float64") /* ty=Tensor[(1, 5, 3), float64] */;
  %116 = acos(%115) /* ty=Tensor[(1, 5, 3), float64] */;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(1, 5, 3), float32] */;
  %118 = shape_of(%var_4932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%var_4932, dtype="float32") /* ty=Tensor[(1, 5, 3), float32] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %121 = cast(meta[relay.Constant][3] /* ty=Tensor[(1183), float64] */, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %122 = reshape(%121, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float64] */;
  %123 = @func_1492(%122) /* ty=(Tensor[(13, 7, 13), float64],) */;
  %124 = cast(meta[relay.Constant][4] /* ty=Tensor[(1573), float32] */, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %125 = reshape(%124, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %126 = @func_1195(%125) /* ty=(Tensor[(11, 11, 13), bool],) */;
  %127 = mod(%119, %120) /* ty=Tensor[(?, 5, 3), float32] */;
  %128 = %123.0;
  %129 = %126.0;
  (%127, %128, meta[relay.Constant][3] /* ty=Tensor[(1183), float64] */, %129, meta[relay.Constant][4] /* ty=Tensor[(1573), float32] */)
}

def @func_5500(%var_5492: Tensor[(288), float32]) -> (Tensor[(11, 11, 13), float64], Tensor[(11, 10, 6), float64], Tensor[(9, 8, 4), float32], Tensor[(288), float32]) {
  %130 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %131 = %130.0;
  %132 = cast(%131, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %133 = cast(%var_5492, dtype="float32") /* ty=Tensor[(288), float32] */;
  %134 = cast(%var_5492, dtype="float32") /* ty=Tensor[(288), float32] */;
  %135 = reshape(%133, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %136 = reshape(%134, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %137 = @func_2120() /* ty=Tensor[(11, 11, 13), float64] */;
  %138 = exp(%132) /* ty=Tensor[(11, 10, 6), float64] */;
  %139 = @func_3133(%135, %136) /* ty=Tensor[(9, 8, 4), float32] */;
  (%137, %138, %139, %var_5492)
}

def @func_6641() -> (Tensor[(11, 11, 13), float32],) {
  %140 = @func_1408() /* ty=Tensor[(11, 11, 13), float32] */;
  (%140,)
}

def @func_2485() -> (Tensor[(11, 11, 13), float32],) {
  %141 = @func_2221() /* ty=Tensor[(11, 11, 13), float32] */;
  (%141,)
}

def @func_2049() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %142 = @func_1082() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %143 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %144 = %142.0;
  %145 = %143.0;
  (%144, %145)
}

def @func_3133(%var_3128: Tensor[(9, 8, 4), float32], %var_3129: Tensor[(9, 8, 4), float32]) -> Tensor[(9, 8, 4), float32] {
  %146 = cast(%var_3129, dtype="float32") /* ty=Tensor[(9, 8, 4), float32] */;
  %147 = shape_of(%var_3128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%var_3128, dtype="float32") /* ty=Tensor[(9, 8, 4), float32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%148, %149) /* ty=Tensor[(9, 8, 4), float32] */
}

def @func_4163() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %150 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %151 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %152 = %150.0;
  %153 = %151.0;
  (%152, %153)
}

def @func_1749() -> (Tensor[(11, 11, 13), float32],) {
  %154 = @func_1082() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %155 = %154.1;
  (%155,)
}

def @func_2552() -> (Tensor[(11, 11, 13), float32],) {
  %156 = @func_1789() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %157 = %156.0;
  (%157,)
}

def @func_3712(%var_3682: Tensor[(1, 11, 10), float64], %var_3683: Tensor[(1, 11, 10), float64]) -> (Tensor[(?, 11, 10), float64], Tensor[(1, 11, 10), float32]) {
  %158 = cast(%var_3683, dtype="float64") /* ty=Tensor[(1, 11, 10), float64] */;
  %159 = shape_of(%var_3682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%var_3682, dtype="float64") /* ty=Tensor[(1, 11, 10), float64] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %162 = cast(%var_3682, dtype="float32") /* ty=Tensor[(1, 11, 10), float32] */;
  %163 = divide(%160, %161) /* ty=Tensor[(?, 11, 10), float64] */;
  %164 = rsqrt(%162) /* ty=Tensor[(1, 11, 10), float32] */;
  (%163, %164)
}

def @func_3088(%var_3082: Tensor[(12, 7, 9), uint64], %var_3083: Tensor[(12, 7, 9), uint64]) -> Tensor[(12, 7, 9), bool] {
  %165 = cast(%var_3083, dtype="bool") /* ty=Tensor[(12, 7, 9), bool] */;
  %166 = shape_of(%var_3082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_3082, dtype="bool") /* ty=Tensor[(12, 7, 9), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%167, %168) /* ty=Tensor[(12, 7, 9), bool] */
}

def @func_5910(%var_5905: Tensor[(14, 8, 5), float32]) -> (Tensor[(14, 8, 5), float32],) {
  %169 = cast(%var_5905, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %170 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(14, 8, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %173 = floor_mod(%171, %172) /* ty=Tensor[(14, 8, 5), float32] */;
  (%173,)
}

def @func_6422(%var_6403: Tensor[(4, 8, 13), uint64], %var_6404: Tensor[(4, 8, 13), uint64]) -> (Tensor[(4, 8, 13), int64], Tensor[(4, 8, 13), float64]) {
  %174 = cast(%var_6404, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
  %175 = shape_of(%var_6403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%var_6403, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %178 = less_equal(%176, %177) /* ty=Tensor[(4, 8, 13), bool] */;
  %179 = cast(%178, dtype="int64") /* ty=Tensor[(4, 8, 13), int64] */;
  %180 = shape_of(%var_6403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%var_6403, dtype="int64") /* ty=Tensor[(4, 8, 13), int64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %183 = cast(%var_6404, dtype="float64") /* ty=Tensor[(4, 8, 13), float64] */;
  %184 = left_shift(%181, %182) /* ty=Tensor[(4, 8, 13), int64] */;
  %185 = cosh(%183) /* ty=Tensor[(4, 8, 13), float64] */;
  (%184, %185)
}

def @func_6732() -> (Tensor[(11, 11, 13), float32],) {
  %186 = @func_1408() /* ty=Tensor[(11, 11, 13), float32] */;
  (%186,)
}

def @func_6739(%var_6734: Tensor[(3, 14, 11), uint64], %var_6735: Tensor[(3, 14, 11), uint64]) -> Tensor[(3, 14, 11), bool] {
  %187 = cast(%var_6735, dtype="bool") /* ty=Tensor[(3, 14, 11), bool] */;
  %188 = shape_of(%var_6734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%var_6734, dtype="bool") /* ty=Tensor[(3, 14, 11), bool] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%189, %190) /* ty=Tensor[(3, 14, 11), bool] */
}

def @func_4819() -> (Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), uint8], Tensor[(11, 11, 13), uint32], Tensor[(11, 11, 13), bool]) {
  %191 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %192 = @func_3367() /* ty=(Tensor[(11, 10, 6), uint8],) */;
  %193 = @func_3977() /* ty=(Tensor[(11, 11, 13), uint32],) */;
  %194 = %191.0;
  %195 = cast(%194, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %196 = reshape(%195, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %197 = @func_1195(%196) /* ty=(Tensor[(11, 11, 13), bool],) */;
  %198 = @func_2120() /* ty=Tensor[(11, 11, 13), float64] */;
  %199 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  %200 = %192.0;
  %201 = %193.0;
  %202 = %197.0;
  (%198, %199, %194, %200, %201, %202)
}

def @func_7017(%var_6984: Tensor[(98, 2), float32], %var_6995: Tensor[(1, 16, 2), uint32]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(196), float64], Tensor[(98, 2), float32], Tensor[(11, 11, 13), float32], Tensor[(312), float64], Tensor[(1, 16, 2), float64]) {
  %203 = @func_3935() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(96), float32], Tensor[(11, 10, 6), int16]) */;
  %204 = @func_1966() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %205 = @func_3646() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(2, 2, 14), uint32], uint32, Tensor[(196), float32]) */;
  %206 = %205.2;
  %207 = cast(%206, dtype="uint32") /* ty=uint32 */;
  %208 = cast(%var_6984, dtype="float32") /* ty=Tensor[(98, 2), float32] */;
  %209 = reshape(%207, newshape=[]) /* ty=uint32 */;
  %210 = reshape(%208, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %211 = @func_404(%209, %210) /* ty=(Tensor[(2, 2, 14), uint32], Tensor[(1, 14, 14), float32], Tensor[(196), float64]) */;
  %212 = cast(meta[relay.Constant][6] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %213 = reshape(%212, newshape=[13, 6, 4]) /* ty=Tensor[(13, 6, 4), float64] */;
  %214 = @func_6051(%213) /* ty=(Tensor[(13, 6, 4), float64], Tensor[(11, 11, 13), float32], Tensor[(416), float32], Tensor[(11, 11, 13), float32]) */;
  %215 = cast(%206, dtype="float64") /* ty=float64 */;
  %216 = cast(%var_6995, dtype="float64") /* ty=Tensor[(1, 16, 2), float64] */;
  %217 = %203.0;
  %218 = %204.0;
  %219 = %211.2;
  %220 = %214.3;
  %221 = floor_divide(%215, %216) /* ty=Tensor[(1, 16, 2), float64] */;
  (%217, %218, %219, %var_6984, %220, meta[relay.Constant][6] /* ty=Tensor[(312), float64] */, %221)
}

def @func_4735() -> (Tensor[(11, 11, 13), float32],) {
  %222 = @func_1082() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %223 = %222.0;
  (%223,)
}

def @func_6718(%var_6702: Tensor[(260), uint8]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(260), int64], Tensor[(260), uint8], Tensor[(11, 11, 13), float32]) {
  %224 = @func_4984() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */;
  %225 = @func_5996() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %226 = %224.0;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %228 = cast(%var_6702, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %229 = reshape(%227, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %230 = reshape(%228, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %231 = @func_2463(%229, %230) /* ty=(Tensor[(11, 11, 13), bool], Tensor[(260), int64], Tensor[(4, 5, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(1, 14, 14), float32], Tensor[(864), int16], Tensor[(11, 11, 13), float64]) */;
  %232 = @func_6641() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %233 = %232.0;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %235 = %225.0;
  %236 = %231.1;
  %237 = log2(%234) /* ty=Tensor[(11, 11, 13), float32] */;
  (%226, %235, %236, %var_6702, %237)
}

def @func_4560(%var_4548: Tensor[(960), uint32]) -> (Tensor[(11, 11, 13), float32], Tensor[(4, 16, 15), uint32], Tensor[(960), uint32]) {
  %238 = @func_1941() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %239 = cast(%var_4548, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %240 = reshape(%239, newshape=[4, 16, 15]) /* ty=Tensor[(4, 16, 15), uint32] */;
  %241 = @func_2370(%240) /* ty=(Tensor[(4, 16, 15), uint32],) */;
  %242 = %238.0;
  %243 = %241.0;
  (%242, %243, %var_4548)
}

def @func_2463(%var_2396: Tensor[(11, 11, 13), float32], %var_2411: Tensor[(260), uint8]) -> (Tensor[(11, 11, 13), bool], Tensor[(260), int64], Tensor[(4, 5, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(1, 14, 14), float32], Tensor[(864), int16], Tensor[(11, 11, 13), float64]) {
  %244 = @func_1408() /* ty=Tensor[(11, 11, 13), float32] */;
  %245 = cast(%var_2396, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%244, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %249 = cast(%var_2411, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %250 = cast(%var_2411, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %251 = reshape(%249, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
  %252 = reshape(%250, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
  %253 = @func_2301(%251, %252) /* ty=(Tensor[(4, 5, 13), bool],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="int64") /* ty=Tensor[(4, 5, 13), int64] */;
  %256 = shape_of(%var_2411, dtype="int32") /* ty=Tensor[(1), int32] */;
  %257 = cast(%var_2411, dtype="int64") /* ty=Tensor[(260), int64] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?), int64] */;
  %259 = cast(%254, dtype="float32") /* ty=Tensor[(4, 5, 13), float32] */;
  %260 = @func_1972() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %261 = cast(meta[relay.Constant][7] /* ty=Tensor[(864), int16] */, dtype="int16") /* ty=Tensor[(864), int16] */;
  %262 = cast(meta[relay.Constant][7] /* ty=Tensor[(864), int16] */, dtype="int16") /* ty=Tensor[(864), int16] */;
  %263 = reshape(%261, newshape=[9, 16, 6]) /* ty=Tensor[(9, 16, 6), int16] */;
  %264 = reshape(%262, newshape=[9, 16, 6]) /* ty=Tensor[(9, 16, 6), int16] */;
  %265 = @func_802(%263, %264) /* ty=(Tensor[(9, 16, 6), int16], Tensor[(1, 14, 14), float32], Tensor[(196), float32]) */;
  %266 = @func_1789() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %267 = %266.0;
  %268 = cast(%267, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %269 = not_equal(%247, %248) /* ty=Tensor[(11, 11, 13), bool] */;
  %270 = logical_xor(%257, %258) /* ty=Tensor[(260), int64] */;
  %271 = erf(%259) /* ty=Tensor[(4, 5, 13), float32] */;
  %272 = %260.0;
  %273 = %265.1;
  %274 = acosh(%268) /* ty=Tensor[(11, 11, 13), float64] */;
  (%269, %270, %271, %272, %273, meta[relay.Constant][7] /* ty=Tensor[(864), int16] */, %274)
}

def @func_5847() -> (Tensor[(11, 10, 6), float64],) {
  %275 = @func_4984() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */;
  %276 = %275.1;
  (%276,)
}

def @func_6619(%var_6611: Tensor[(360), float32]) -> (Tensor[(11, 10, 6), uint8], Tensor[(12, 6, 5), float32], Tensor[(360), float32], Tensor[(1, 60), float32]) {
  %277 = @func_3367() /* ty=(Tensor[(11, 10, 6), uint8],) */;
  %278 = cast(%var_6611, dtype="float32") /* ty=Tensor[(360), float32] */;
  %279 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 60), float32] */, dtype="float32") /* ty=Tensor[(1, 60), float32] */;
  %280 = reshape(%278, newshape=[12, 6, 5]) /* ty=Tensor[(12, 6, 5), float32] */;
  %281 = reshape(%279, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %282 = @func_5944(%280, %281) /* ty=(Tensor[(12, 6, 5), float32], Tensor[(1, 14, 14), float32], Tensor[(60), float32]) */;
  %283 = %277.0;
  %284 = %282.0;
  (%283, %284, %var_6611, meta[relay.Constant][8] /* ty=Tensor[(1, 60), float32] */)
}

def @func_802(%var_776: Tensor[(9, 16, 6), int16], %var_777: Tensor[(9, 16, 6), int16]) -> (Tensor[(9, 16, 6), int16], Tensor[(1, 14, 14), float32], Tensor[(196), float32]) {
  %285 = cast(%var_777, dtype="int16") /* ty=Tensor[(9, 16, 6), int16] */;
  %286 = shape_of(%var_776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%var_776, dtype="int16") /* ty=Tensor[(9, 16, 6), int16] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %289 = cast(meta[relay.Constant][9] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %290 = reshape(%289, newshape=[1, 14, 14]) /* ty=Tensor[(1, 14, 14), float32] */;
  %291 = @func_37(%290) /* ty=(Tensor[(1, 14, 14), float32],) */;
  %292 = bitwise_and(%287, %288) /* ty=Tensor[(9, 16, 6), int16] */;
  %293 = %291.0;
  (%292, %293, meta[relay.Constant][9] /* ty=Tensor[(196), float32] */)
}

def @func_2820(%var_2817: Tensor[(13, 7), float64]) -> (Tensor[(196), float64], Tensor[(196), float32], Tensor[(196), float32], Tensor[(16, 2), uint8], Tensor[(11, 11, 13), bool], Tensor[(16, 13, 2), uint64], Tensor[(416), uint64], Tensor[(7, 13, 1), float64], Tensor[(13, 7), float64]) {
  %294 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %295 = cast(meta[relay.Constant][11] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %296 = reshape(%294, newshape=[]) /* ty=uint32 */;
  %297 = reshape(%295, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %298 = @func_404(%296, %297) /* ty=(Tensor[(2, 2, 14), uint32], Tensor[(1, 14, 14), float32], Tensor[(196), float64]) */;
  %299 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="uint8") /* ty=uint8 */;
  %300 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 2), uint8] */, dtype="uint8") /* ty=Tensor[(16, 2), uint8] */;
  %301 = reshape(%299, newshape=[]) /* ty=uint8 */;
  %302 = reshape(%300, newshape=[8, 1, 4]) /* ty=Tensor[(8, 1, 4), uint8] */;
  %303 = @func_885(%301, %302) /* ty=(Tensor[(196), float32], Tensor[(196), float32], Tensor[(196), float32], Tensor[(60), float32], Tensor[(8, ?, 4), bool]) */;
  %304 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %305 = %304.0;
  %306 = cast(%305, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %307 = sinh(%306) /* ty=Tensor[(11, 11, 13), float32] */;
  %308 = cast(%307, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %309 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %310 = cast(meta[relay.Constant][13] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %311 = cast(meta[relay.Constant][13] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %312 = reshape(%310, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %313 = reshape(%311, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %314 = @func_1263(%312, %313) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(11, 11, 13), float32]) */;
  %315 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="float64") /* ty=float64 */;
  %316 = cast(%var_2817, dtype="float64") /* ty=Tensor[(13, 7), float64] */;
  %317 = reshape(%315, newshape=[]) /* ty=float64 */;
  %318 = reshape(%316, newshape=[7, 13, 1]) /* ty=Tensor[(7, 13, 1), float64] */;
  %319 = %298.2;
  %320 = %303.1;
  %321 = less(%308, %309) /* ty=Tensor[(11, 11, 13), bool] */;
  %322 = %314.0;
  %323 = @func_2677(%317, %318) /* ty=Tensor[(7, 13, 1), float64] */;
  (%319, meta[relay.Constant][11] /* ty=Tensor[(196), float32] */, %320, meta[relay.Constant][12] /* ty=Tensor[(16, 2), uint8] */, %321, %322, meta[relay.Constant][13] /* ty=Tensor[(416), uint64] */, %323, %var_2817)
}

def @func_5334() -> (Tensor[(11, 11, 13), float32],) {
  %324 = @func_2049() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %325 = %324.0;
  (%325,)
}

def @func_2652(%var_2606: Tensor[(16, 1, 6), float32]) -> (Tensor[(16, 1, 6), float32], Tensor[(11, 11, 13), bool], Tensor[(1573), float32], Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32]) {
  %326 = cast(6.45177f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %327 = cast(%var_2606, dtype="float32") /* ty=Tensor[(16, 1, 6), float32] */;
  %328 = cast(meta[relay.Constant][14] /* ty=Tensor[(1573), float32] */, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %329 = reshape(%328, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %330 = @func_1195(%329) /* ty=(Tensor[(11, 11, 13), bool],) */;
  %331 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %332 = floor_divide(%326, %327) /* ty=Tensor[(16, 1, 6), float32] */;
  %333 = %330.0;
  %334 = %331.0;
  %335 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  (%332, %333, meta[relay.Constant][14] /* ty=Tensor[(1573), float32] */, %334, %335)
}

def @func_6278(%var_6262: Tensor[(416), uint64], %var_6267: Tensor[(756), uint64]) -> (Tensor[(11, 11, 13), float32], float64, Tensor[(416), uint64], Tensor[(12, 7, 9), bool], Tensor[(756), uint64], Tensor[(11, 11, 13), bool]) {
  %336 = @func_5334() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %337 = cast(%var_6262, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %338 = reshape(%337, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %339 = @func_3760(%338) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64], Tensor[(416), uint64], float64) */;
  %340 = cast(%var_6267, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %341 = cast(%var_6267, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %342 = reshape(%340, newshape=[12, 7, 9]) /* ty=Tensor[(12, 7, 9), uint64] */;
  %343 = reshape(%341, newshape=[12, 7, 9]) /* ty=Tensor[(12, 7, 9), uint64] */;
  %344 = %336.0;
  %345 = cast(%344, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %346 = cast(%344, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %347 = reshape(%345, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %348 = reshape(%346, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %349 = @func_1556(%347, %348) /* ty=(Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), int64], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), uint64]) */;
  %350 = %339.4;
  %351 = @func_3088(%342, %343) /* ty=Tensor[(12, 7, 9), bool] */;
  %352 = %349.0;
  (%344, %350, %var_6262, %351, %var_6267, %352)
}

def @func_885(%var_836: uint8, %var_837: Tensor[(8, 1, 4), uint8]) -> (Tensor[(196), float32], Tensor[(196), float32], Tensor[(196), float32], Tensor[(60), float32], Tensor[(8, ?, 4), bool]) {
  %353 = cast(meta[relay.Constant][15] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %354 = reshape(%353, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %355 = @func_239(%354) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(16, 8, 7), float64]) */;
  %356 = cast(meta[relay.Constant][16] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %357 = reshape(%356, newshape=[3, 5, 4]) /* ty=Tensor[(3, 5, 4), float32] */;
  %358 = @func_478(%357) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(3, 5, 4), float64]) */;
  %359 = cast(%var_836, dtype="uint8") /* ty=uint8 */;
  %360 = cast(%var_837, dtype="uint8") /* ty=Tensor[(8, 1, 4), uint8] */;
  %361 = bitwise_and(%359, %360) /* ty=Tensor[(8, 1, 4), uint8] */;
  %362 = cast(%var_837, dtype="bool") /* ty=Tensor[(8, 1, 4), bool] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="bool") /* ty=Tensor[(8, 1, 4), bool] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %366 = %355.1;
  %367 = %358.1;
  %368 = less(%364, %365) /* ty=Tensor[(8, ?, 4), bool] */;
  (%366, meta[relay.Constant][15] /* ty=Tensor[(196), float32] */, %367, meta[relay.Constant][16] /* ty=Tensor[(60), float32] */, %368)
}

def @func_7075() -> Tensor[(11, 11, 13), float32] {
  %369 = @func_3076() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %369.0
}

def @func_6809() -> Tensor[(11, 11, 13), float32] {
  %370 = @func_6499() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64]) */;
  %370.0
}

def @func_1696(%var_1671: Tensor[(1183), float64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(196), float32], Tensor[(49, 4), float64], Tensor[(1183), int32]) {
  %371 = cast(meta[relay.Constant][17] /* ty=Tensor[(49, 4), float32] */, dtype="float32") /* ty=Tensor[(49, 4), float32] */;
  %372 = reshape(%371, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %373 = @func_239(%372) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(16, 8, 7), float64]) */;
  %374 = cast(meta[relay.Constant][17] /* ty=Tensor[(49, 4), float32] */, dtype="float64") /* ty=Tensor[(49, 4), float64] */;
  %375 = cast(%var_1671, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %376 = reshape(%375, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float64] */;
  %377 = @func_1492(%376) /* ty=(Tensor[(13, 7, 13), float64],) */;
  %378 = %377.0;
  %379 = cast(%378, dtype="int32") /* ty=Tensor[(13, 7, 13), int32] */;
  %380 = shape_of(%var_1671, dtype="int32") /* ty=Tensor[(1), int32] */;
  %381 = cast(%var_1671, dtype="int32") /* ty=Tensor[(1183), int32] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?), int32] */;
  %383 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  %384 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %385 = %373.1;
  %386 = exp(%374) /* ty=Tensor[(49, 4), float64] */;
  %387 = subtract(%381, %382) /* ty=Tensor[(1183), int32] */;
  (%383, %384, %385, %386, %387)
}

def @func_4078(%var_3996: Tensor[(756), uint64], %var_4010: Tensor[(110), float64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(12, 7, 9), bool], Tensor[(756), uint64], Tensor[(1, 11, 10), float32], Tensor[(12, 7, 9), bool], Tensor[(11, 11, 13), float32], Tensor[(110), int32], Tensor[(11, 11, 13), float32]) {
  %388 = @func_1966() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %389 = cast(%var_3996, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %390 = cast(%var_3996, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %391 = reshape(%389, newshape=[12, 7, 9]) /* ty=Tensor[(12, 7, 9), uint64] */;
  %392 = reshape(%390, newshape=[12, 7, 9]) /* ty=Tensor[(12, 7, 9), uint64] */;
  %393 = cast(meta[relay.Constant][18] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %394 = cast(meta[relay.Constant][18] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %395 = reshape(%393, newshape=[1, 11, 10]) /* ty=Tensor[(1, 11, 10), float64] */;
  %396 = reshape(%394, newshape=[1, 11, 10]) /* ty=Tensor[(1, 11, 10), float64] */;
  %397 = @func_3712(%395, %396) /* ty=(Tensor[(?, 11, 10), float64], Tensor[(1, 11, 10), float32]) */;
  %398 = cast(%var_3996, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %399 = @func_3088(%391, %392) /* ty=Tensor[(12, 7, 9), bool] */;
  %400 = cast(%399, dtype="uint64") /* ty=Tensor[(12, 7, 9), uint64] */;
  %401 = reshape(%398, newshape=[12, 7, 9]) /* ty=Tensor[(12, 7, 9), uint64] */;
  %402 = reshape(%400, newshape=[12, 7, 9]) /* ty=Tensor[(12, 7, 9), uint64] */;
  %403 = @func_1778() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %404 = cast(%var_4010, dtype="int64") /* ty=Tensor[(110), int64] */;
  %405 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(110), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %406 = cast(meta[relay.Constant][18] /* ty=Tensor[(110), float64] */, dtype="int64") /* ty=Tensor[(110), int64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?), int64] */;
  %408 = bitwise_and(%406, %407) /* ty=Tensor[(110), int64] */;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(110), float64] */;
  %410 = erf(%409) /* ty=Tensor[(110), float64] */;
  %411 = cast(meta[relay.Constant][19] /* ty=Tensor[(110), float64] */, dtype="int64") /* ty=Tensor[(110), int64] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(1), int32] */;
  %413 = cast(%410, dtype="int64") /* ty=Tensor[(110), int64] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?), int64] */;
  %415 = right_shift(%413, %414) /* ty=Tensor[(110), int64] */;
  %416 = cast(%408, dtype="int32") /* ty=Tensor[(110), int32] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(1), int32] */;
  %418 = cast(%415, dtype="int32") /* ty=Tensor[(110), int32] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?), int32] */;
  %420 = %388.0;
  %421 = @func_2221() /* ty=Tensor[(11, 11, 13), float32] */;
  %422 = %397.1;
  %423 = @func_3088(%401, %402) /* ty=Tensor[(12, 7, 9), bool] */;
  %424 = %403.0;
  %425 = bitwise_xor(%418, %419) /* ty=Tensor[(110), int32] */;
  %426 = @func_2221() /* ty=Tensor[(11, 11, 13), float32] */;
  (%420, %421, %399, %var_3996, %422, %423, %424, %425, %426)
}

def @func_2221() -> Tensor[(11, 11, 13), float32] {
  %427 = @func_2049() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %427.0
}

def @func_6499() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64]) {
  %428 = @func_2552() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %429 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %430 = %428.0;
  %431 = @func_2120() /* ty=Tensor[(11, 11, 13), float64] */;
  (%429, %430, %431)
}

def @func_2497() -> Tensor[(11, 11, 13), float32] {
  %432 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %432.0
}

def @func_1829() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %433 = @func_1071() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %434 = %433.0;
  %435 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  (%434, %435)
}

def @func_3122() -> (Tensor[(11, 10, 6), float64],) {
  %436 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %437 = %436.0;
  (%437,)
}

def @func_6849() -> (Tensor[(11, 10, 6), float64],) {
  %438 = @func_1723() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %439 = %438.0;
  (%439,)
}

def @func_1941() -> (Tensor[(11, 11, 13), float32],) {
  %440 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %442 = atanh(%441) /* ty=Tensor[(11, 11, 13), float32] */;
  (%442,)
}

def @func_4898() -> (Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %443 = @func_1071() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %444 = %443.0;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %446 = @func_2485() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %447 = @func_1972() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %448 = erf(%445) /* ty=Tensor[(11, 11, 13), float64] */;
  %449 = %446.0;
  %450 = %447.0;
  (%448, %449, %450)
}

def @func_1374(%var_1330: Tensor[(11, 11, 13), float32]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), bool]) {
  %451 = @func_1071() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %452 = %451.0;
  %453 = cast(%452, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %454 = reshape(%453, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %455 = @func_1195(%454) /* ty=(Tensor[(11, 11, 13), bool],) */;
  %456 = %455.0;
  %457 = cast(%456, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %458 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %459 = cast(%var_1330, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %463 = cast(%var_1330, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %464 = cast(%var_1330, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %465 = reshape(%464, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %466 = @func_1195(%465) /* ty=(Tensor[(11, 11, 13), bool],) */;
  %467 = acos(%457) /* ty=Tensor[(11, 11, 13), float64] */;
  %468 = logical_and(%461, %462) /* ty=Tensor[(11, 11, 13), bool] */;
  %469 = exp(%463) /* ty=Tensor[(11, 11, 13), float32] */;
  %470 = %466.0;
  (%452, %467, %468, %469, %470)
}

def @func_5266() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %471 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %472 = @func_2485() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %473 = %471.0;
  %474 = %472.0;
  (%473, %474)
}

def @func_605(%var_590: Tensor[(14, 8, 11), float32]) -> (Tensor[(14, 8, 11), float32], Tensor[(1, 14, 14), float32], Tensor[(7, 28), float32]) {
  %475 = cast(%var_590, dtype="float32") /* ty=Tensor[(14, 8, 11), float32] */;
  %476 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 28), float32] */, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %477 = reshape(%476, newshape=[1, 14, 14]) /* ty=Tensor[(1, 14, 14), float32] */;
  %478 = @func_37(%477) /* ty=(Tensor[(1, 14, 14), float32],) */;
  %479 = sigmoid(%475) /* ty=Tensor[(14, 8, 11), float32] */;
  %480 = %478.0;
  (%479, %480, meta[relay.Constant][20] /* ty=Tensor[(7, 28), float32] */)
}

def @func_1408() -> Tensor[(11, 11, 13), float32] {
  %481 = @func_1071() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %482 = %481.0;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  sigmoid(%483) /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_1799() -> (Tensor[(11, 10, 6), float64],) {
  %484 = @func_1723() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %485 = %484.0;
  (%485,)
}

def @func_5453() -> (Tensor[(11, 11, 13), float32],) {
  %486 = @func_5166() /* ty=Tensor[(11, 11, 13), float32] */;
  (%486,)
}

def @main(%var_7102: Tensor[(11, 7, 10), uint32], %var_7103: Tensor[(11, 7, 10), uint32], %var_7109: Tensor[(756), uint64]) -> (Tensor[(11, 7, 10), uint32], Tensor[(11, 11, 13), float32], Tensor[(756), uint64], Tensor[(110), float64], Tensor[(11, 7, 10), float32], Tensor[(11, 7, 10), float32]) {
  %487 = cast(%var_7103, dtype="uint32") /* ty=Tensor[(11, 7, 10), uint32] */;
  %488 = shape_of(%var_7102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%var_7102, dtype="uint32") /* ty=Tensor[(11, 7, 10), uint32] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %491 = cast(%var_7109, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %492 = cast(meta[relay.Constant][21] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %493 = reshape(%491, newshape=[756]) /* ty=Tensor[(756), uint64] */;
  %494 = reshape(%492, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %495 = @func_4078(%493, %494) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(12, 7, 9), bool], Tensor[(756), uint64], Tensor[(1, 11, 10), float32], Tensor[(12, 7, 9), bool], Tensor[(11, 11, 13), float32], Tensor[(110), int32], Tensor[(11, 11, 13), float32]) */;
  %496 = cast(%var_7102, dtype="float64") /* ty=Tensor[(11, 7, 10), float64] */;
  %497 = acosh(%496) /* ty=Tensor[(11, 7, 10), float64] */;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(11, 7, 10), float64] */;
  %499 = asin(%498) /* ty=Tensor[(11, 7, 10), float64] */;
  %500 = cast(%499, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %501 = cast(%499, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %502 = subtract(%489, %490) /* ty=Tensor[(11, 7, 10), uint32] */;
  %503 = %495.6;
  %504 = log2(%500) /* ty=Tensor[(11, 7, 10), float32] */;
  %505 = cos(%501) /* ty=Tensor[(11, 7, 10), float32] */;
  (%502, %503, %var_7109, meta[relay.Constant][21] /* ty=Tensor[(110), float64] */, %504, %505)
}

def @func_2181(%var_2135: int32, %var_2136: Tensor[(6, 14, 2), int32], %var_2161: Tensor[(32, 1), uint8]) -> (Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(6, 14, 2), uint16], Tensor[(60), float32], Tensor[(32, 1), uint8], Tensor[(11, 11, 13), float32]) {
  %506 = cast(%var_2135, dtype="uint32") /* ty=uint32 */;
  %507 = cast(meta[relay.Constant][22] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %508 = reshape(%506, newshape=[]) /* ty=uint32 */;
  %509 = reshape(%507, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %510 = @func_404(%508, %509) /* ty=(Tensor[(2, 2, 14), uint32], Tensor[(1, 14, 14), float32], Tensor[(196), float64]) */;
  %511 = cast(%var_2135, dtype="int32") /* ty=int32 */;
  %512 = cast(%var_2136, dtype="int32") /* ty=Tensor[(6, 14, 2), int32] */;
  %513 = left_shift(%511, %512) /* ty=Tensor[(6, 14, 2), int32] */;
  %514 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 14, 2), int32] */, dtype="uint16") /* ty=Tensor[(6, 14, 2), uint16] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="uint16") /* ty=Tensor[(6, 14, 2), uint16] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %518 = cast(%var_2135, dtype="uint8") /* ty=uint8 */;
  %519 = cast(%var_2161, dtype="uint8") /* ty=Tensor[(32, 1), uint8] */;
  %520 = reshape(%518, newshape=[]) /* ty=uint8 */;
  %521 = reshape(%519, newshape=[8, 1, 4]) /* ty=Tensor[(8, 1, 4), uint8] */;
  %522 = @func_885(%520, %521) /* ty=(Tensor[(196), float32], Tensor[(196), float32], Tensor[(196), float32], Tensor[(60), float32], Tensor[(8, ?, 4), bool]) */;
  %523 = @func_1966() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %524 = %510.1;
  %525 = bitwise_and(%516, %517) /* ty=Tensor[(6, 14, 2), uint16] */;
  %526 = %522.3;
  %527 = %523.0;
  (%524, meta[relay.Constant][22] /* ty=Tensor[(196), float32] */, %525, %526, %var_2161, %527)
}

def @func_2733() -> (Tensor[(11, 11, 13), float32],) {
  %528 = @func_2485() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %529 = %528.0;
  (%529,)
}

def @func_5125() -> Tensor[(11, 10, 6), float64] {
  %530 = @func_3122() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %531 = %530.0;
  %532 = cast(%531, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  acos(%532) /* ty=Tensor[(11, 10, 6), float64] */
}

def @func_3076() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %533 = @func_1941() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %534 = @func_1829() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %535 = %533.0;
  %536 = %534.1;
  (%535, %536)
}

def @func_1556(%var_1503: Tensor[(11, 11, 13), float32], %var_1519: Tensor[(11, 11, 13), float32]) -> (Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), int64], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), uint64]) {
  %537 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  %538 = cast(%var_1503, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%537, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %542 = cast(%var_1519, dtype="int64") /* ty=Tensor[(11, 11, 13), int64] */;
  %543 = shape_of(%var_1503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%var_1503, dtype="int64") /* ty=Tensor[(11, 11, 13), int64] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %546 = greater_equal(%540, %541) /* ty=Tensor[(11, 11, 13), bool] */;
  %547 = cast(%546, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %548 = reshape(%547, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %549 = @func_1374(%548) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), bool]) */;
  %550 = @func_1408() /* ty=Tensor[(11, 11, 13), float32] */;
  %551 = cast(%550, dtype="uint64") /* ty=Tensor[(11, 11, 13), uint64] */;
  %552 = shape_of(%var_1519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%var_1519, dtype="uint64") /* ty=Tensor[(11, 11, 13), uint64] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %555 = multiply(%544, %545) /* ty=Tensor[(11, 11, 13), int64] */;
  %556 = %549.1;
  %557 = bitwise_xor(%553, %554) /* ty=Tensor[(11, 11, 13), uint64] */;
  (%546, %555, %556, %557)
}

def @func_6943(%var_6909: Tensor[(416), uint64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64], Tensor[(416), uint64], Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32]) {
  %558 = @func_2733() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %559 = cast(%var_6909, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %560 = reshape(%559, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %561 = @func_1640(%560) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64]) */;
  %562 = @func_1082() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %563 = %558.0;
  %564 = @func_3006() /* ty=Tensor[(11, 11, 13), float32] */;
  %565 = %561.2;
  %566 = @func_5125() /* ty=Tensor[(11, 10, 6), float64] */;
  %567 = %562.0;
  (%563, %564, %565, %var_6909, %566, %567)
}

def @func_1065() -> Tensor[(11, 11, 13), float32] {
  %568 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %568.0
}

def @func_2098(%var_2088: Tensor[(11, 11, 13), float32]) -> Tensor[(11, 11, 13), float64] {
  %569 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  %570 = cast(%var_2088, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  minimum(%572, %573) /* ty=Tensor[(11, 11, 13), float64] */
}

def @func_5996() -> (Tensor[(11, 11, 13), float32],) {
  %574 = @func_4819() /* ty=(Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), uint8], Tensor[(11, 11, 13), uint32], Tensor[(11, 11, 13), bool]) */;
  %575 = %574.1;
  (%575,)
}

def @func_1130() -> Tensor[(11, 11, 13), float32] {
  %576 = @func_1082() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %576.0
}

def @func_2120() -> Tensor[(11, 11, 13), float64] {
  %577 = @func_1071() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %578 = %577.0;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  cos(%579) /* ty=Tensor[(11, 11, 13), float64] */
}

def @func_1972() -> (Tensor[(11, 11, 13), float32],) {
  %580 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %581 = %580.0;
  (%581,)
}

def @func_1263(%var_1247: Tensor[(16, 13, 2), uint64], %var_1248: Tensor[(16, 13, 2), uint64]) -> (Tensor[(16, 13, 2), uint64], Tensor[(11, 11, 13), float32]) {
  %582 = cast(%var_1248, dtype="uint64") /* ty=Tensor[(16, 13, 2), uint64] */;
  %583 = shape_of(%var_1247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%var_1247, dtype="uint64") /* ty=Tensor[(16, 13, 2), uint64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %586 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %587 = minimum(%584, %585) /* ty=Tensor[(16, 13, 2), uint64] */;
  %588 = %586.0;
  (%587, %588)
}

def @func_37(%var_24: Tensor[(1, 14, 14), float32]) -> (Tensor[(1, 14, 14), float32],) {
  %589 = cast(%var_24, dtype="float32") /* ty=Tensor[(1, 14, 14), float32] */;
  %590 = asinh(%589) /* ty=Tensor[(1, 14, 14), float32] */;
  (%590,)
}

def @func_1723() -> (Tensor[(11, 10, 6), float64],) {
  %591 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 10, 6), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %592 = log10(%591) /* ty=Tensor[(11, 10, 6), float64] */;
  (%592,)
}

def @func_3896(%var_3873: Tensor[(960), uint32]) -> (Tensor[(11, 11, 13), int32], Tensor[(11, 11, 13), float32], Tensor[(4, 16, 15), float64], Tensor[(11, 10, 6), float64]) {
  %593 = @func_2120() /* ty=Tensor[(11, 11, 13), float64] */;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %595 = log(%594) /* ty=Tensor[(11, 11, 13), float64] */;
  %596 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %597 = cast(%596, dtype="int32") /* ty=Tensor[(11, 11, 13), int32] */;
  %598 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%595, dtype="int32") /* ty=Tensor[(11, 11, 13), int32] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %601 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %602 = cast(%var_3873, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %603 = reshape(%602, newshape=[4, 16, 15]) /* ty=Tensor[(4, 16, 15), uint32] */;
  %604 = @func_2370(%603) /* ty=(Tensor[(4, 16, 15), uint32],) */;
  %605 = %604.0;
  %606 = cast(%var_3873, dtype="float64") /* ty=Tensor[(960), float64] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="float64") /* ty=Tensor[(4, 16, 15), float64] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %610 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %611 = bitwise_and(%599, %600) /* ty=Tensor[(11, 11, 13), int32] */;
  %612 = %601.0;
  %613 = power(%608, %609) /* ty=Tensor[(4, 16, 15), float64] */;
  %614 = %610.0;
  (%611, %612, %613, %614)
}

def @func_5409() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(960), uint32], Tensor[(960), uint32], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) {
  %615 = @func_2049() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %616 = @func_4984() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */;
  %617 = @func_1972() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %618 = cast(meta[relay.Constant][25] /* ty=Tensor[(960), uint32] */, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %619 = reshape(%618, newshape=[960]) /* ty=Tensor[(960), uint32] */;
  %620 = @func_4560(%619) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(4, 16, 15), uint32], Tensor[(960), uint32]) */;
  %621 = @func_5202() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %622 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %623 = %615.1;
  %624 = %616.0;
  %625 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  %626 = %617.0;
  %627 = %620.2;
  %628 = %621.0;
  %629 = %622.0;
  (%623, %624, %625, %626, %627, meta[relay.Constant][25] /* ty=Tensor[(960), uint32] */, %628, %629)
}

def @func_4471(%var_4428: Tensor[(286, 55), float32]) -> (Tensor[(11, 11, 13), float32], Tensor[(7, 3, 11), uint16], Tensor[(231), bool], Tensor[(260, 1), uint8], Tensor[(11, 11, 13), float32], Tensor[(286, 55), float64], Tensor[(11, 11, 13), bool], Tensor[(416), uint64], Tensor[(416), uint64]) {
  %630 = @func_1941() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %631 = cast(meta[relay.Constant][26] /* ty=Tensor[(231), bool] */, dtype="bool") /* ty=Tensor[(231), bool] */;
  %632 = cast(meta[relay.Constant][26] /* ty=Tensor[(231), bool] */, dtype="bool") /* ty=Tensor[(231), bool] */;
  %633 = %630.0;
  %634 = cast(%633, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %635 = cast(meta[relay.Constant][27] /* ty=Tensor[(260, 1), uint8] */, dtype="uint8") /* ty=Tensor[(260, 1), uint8] */;
  %636 = cast(%var_4428, dtype="float32") /* ty=Tensor[(286, 55), float32] */;
  %637 = reshape(%631, newshape=[7, 3, 11]) /* ty=Tensor[(7, 3, 11), bool] */;
  %638 = reshape(%632, newshape=[7, 3, 11]) /* ty=Tensor[(7, 3, 11), bool] */;
  %639 = reshape(%634, newshape=[1, 1573]) /* ty=Tensor[(1, 1573), float32] */;
  %640 = reshape(%635, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %641 = reshape(%636, newshape=[10, 1573]) /* ty=Tensor[(10, 1573), float32] */;
  %642 = @func_3502(%637, %638, %639, %640, %641) /* ty=(Tensor[(7, 3, 11), uint16], Tensor[(260), int64], Tensor[(260), uint8], Tensor[(10, 1573), int16], Tensor[(11, 11, 13), float32]) */;
  %643 = cast(%633, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %644 = reshape(%643, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %645 = @func_1374(%644) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), bool]) */;
  %646 = cast(%var_4428, dtype="float64") /* ty=Tensor[(286, 55), float64] */;
  %647 = %645.0;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %649 = cast(meta[relay.Constant][27] /* ty=Tensor[(260, 1), uint8] */, dtype="uint8") /* ty=Tensor[(260, 1), uint8] */;
  %650 = reshape(%648, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %651 = reshape(%649, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %652 = @func_2463(%650, %651) /* ty=(Tensor[(11, 11, 13), bool], Tensor[(260), int64], Tensor[(4, 5, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(1, 14, 14), float32], Tensor[(864), int16], Tensor[(11, 11, 13), float64]) */;
  %653 = cast(meta[relay.Constant][28] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %654 = reshape(%653, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %655 = @func_3760(%654) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64], Tensor[(416), uint64], float64) */;
  %656 = %642.0;
  %657 = acosh(%646) /* ty=Tensor[(286, 55), float64] */;
  %658 = %652.0;
  %659 = %655.2;
  (%633, %656, meta[relay.Constant][26] /* ty=Tensor[(231), bool] */, meta[relay.Constant][27] /* ty=Tensor[(260, 1), uint8] */, %647, %657, %658, %659, meta[relay.Constant][28] /* ty=Tensor[(416), uint64] */)
}

def @func_7052() -> (Tensor[(11, 9, 7), bool],) {
  %660 = @func_6552() /* ty=(Tensor[(11, 9, 7), float64],) */;
  %661 = %660.0;
  %662 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 9, 7), float64] */, dtype="bool") /* ty=Tensor[(11, 9, 7), bool] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="bool") /* ty=Tensor[(11, 9, 7), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %666 = less(%664, %665) /* ty=Tensor[(11, 9, 7), bool] */;
  (%666,)
}

def @func_6552() -> (Tensor[(11, 9, 7), float64],) {
  %667 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 9, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
  %668 = atanh(%667) /* ty=Tensor[(11, 9, 7), float64] */;
  (%668,)
}

def @func_478(%var_461: Tensor[(3, 5, 4), float32]) -> (Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(3, 5, 4), float64]) {
  %669 = cast(meta[relay.Constant][31] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %670 = reshape(%669, newshape=[1, 14, 14]) /* ty=Tensor[(1, 14, 14), float32] */;
  %671 = @func_37(%670) /* ty=(Tensor[(1, 14, 14), float32],) */;
  %672 = cast(%var_461, dtype="float32") /* ty=Tensor[(3, 5, 4), float32] */;
  %673 = tan(%672) /* ty=Tensor[(3, 5, 4), float32] */;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(3, 5, 4), float64] */;
  %675 = %671.0;
  %676 = sin(%674) /* ty=Tensor[(3, 5, 4), float64] */;
  (%675, meta[relay.Constant][31] /* ty=Tensor[(196), float32] */, %676)
}

def @func_3367() -> (Tensor[(11, 10, 6), uint8],) {
  %677 = @func_1723() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %678 = %677.0;
  %679 = @func_1723() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %680 = %679.0;
  %681 = cast(%680, dtype="uint8") /* ty=Tensor[(11, 10, 6), uint8] */;
  %682 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%678, dtype="uint8") /* ty=Tensor[(11, 10, 6), uint8] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %685 = left_shift(%683, %684) /* ty=Tensor[(11, 10, 6), uint8] */;
  (%685,)
}

def @func_3344(%var_3332: Tensor[(960), uint32]) -> (Tensor[(4, 16, 15), uint32], Tensor[(960), uint32], Tensor[(11, 11, 13), float64]) {
  %686 = cast(%var_3332, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %687 = reshape(%686, newshape=[4, 16, 15]) /* ty=Tensor[(4, 16, 15), uint32] */;
  %688 = @func_2370(%687) /* ty=(Tensor[(4, 16, 15), uint32],) */;
  %689 = @func_2485() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %690 = %689.0;
  %691 = @func_2485() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %692 = %691.0;
  %693 = cast(%692, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %694 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%690, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %697 = %688.0;
  %698 = divide(%695, %696) /* ty=Tensor[(11, 11, 13), float64] */;
  (%697, %var_3332, %698)
}

def @func_5629() -> Tensor[(11, 11, 13), float32] {
  @func_5166() /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_3273() -> (Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32], Tensor[(4, 5, 13), bool], Tensor[(260), uint8]) {
  %699 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %700 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %701 = cast(meta[relay.Constant][32] /* ty=Tensor[(260), uint8] */, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %702 = cast(meta[relay.Constant][32] /* ty=Tensor[(260), uint8] */, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %703 = reshape(%701, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
  %704 = reshape(%702, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
  %705 = @func_2301(%703, %704) /* ty=(Tensor[(4, 5, 13), bool],) */;
  %706 = %699.0;
  %707 = %700.0;
  %708 = %705.0;
  (%706, %707, %708, meta[relay.Constant][32] /* ty=Tensor[(260), uint8] */)
}

def @func_2876() -> (Tensor[(11, 11, 13), float32],) {
  %709 = @func_1966() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %710 = %709.0;
  (%710,)
}

def @func_1966() -> (Tensor[(11, 11, 13), float32],) {
  %711 = @func_1408() /* ty=Tensor[(11, 11, 13), float32] */;
  (%711,)
}

def @func_2370(%var_2361: Tensor[(4, 16, 15), uint32]) -> (Tensor[(4, 16, 15), uint32],) {
  %712 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 16, 15), uint32] */, dtype="uint32") /* ty=Tensor[(4, 16, 15), uint32] */;
  %713 = shape_of(%var_2361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%var_2361, dtype="uint32") /* ty=Tensor[(4, 16, 15), uint32] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %716 = logical_xor(%714, %715) /* ty=Tensor[(4, 16, 15), uint32] */;
  (%716,)
}

def @func_3760(%var_3744: Tensor[(416), uint64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64], Tensor[(416), uint64], float64) {
  %717 = @func_1829() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %718 = cast(%var_3744, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %719 = reshape(%718, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %720 = @func_1640(%719) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64]) */;
  %721 = cast(-2.55737f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %722 = cast(%var_3744, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %723 = reshape(%721, newshape=[]) /* ty=float64 */;
  %724 = reshape(%722, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %725 = @func_2341(%723, %724) /* ty=(Tensor[(6, 10, 14), float64], Tensor[(196), float32], Tensor[(168), int32], Tensor[(32), uint8], Tensor[(416), uint64], Tensor[(416), uint64], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */;
  %726 = %717.0;
  %727 = %720.0;
  %728 = %725.5;
  (%726, %727, %var_3744, %728, -2.55737f64 /* ty=float64 */)
}

def @func_3502(%var_3457: Tensor[(7, 3, 11), bool], %var_3458: Tensor[(7, 3, 11), bool], %var_3485: Tensor[(1, 1573), float32], %var_3486: Tensor[(260), uint8], %var_3488: Tensor[(10, 1573), float32]) -> (Tensor[(7, 3, 11), uint16], Tensor[(260), int64], Tensor[(260), uint8], Tensor[(10, 1573), int16], Tensor[(11, 11, 13), float32]) {
  %729 = cast(%var_3458, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
  %730 = shape_of(%var_3457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%var_3457, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %733 = logical_or(%731, %732) /* ty=Tensor[(7, 3, 11), bool] */;
  %734 = cast(%733, dtype="uint64") /* ty=Tensor[(7, 3, 11), uint64] */;
  %735 = shape_of(%var_3457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%var_3457, dtype="uint64") /* ty=Tensor[(7, 3, 11), uint64] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %738 = subtract(%736, %737) /* ty=Tensor[(7, 3, 11), uint64] */;
  %739 = cast(%var_3458, dtype="uint16") /* ty=Tensor[(7, 3, 11), uint16] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="uint16") /* ty=Tensor[(7, 3, 11), uint16] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %743 = cast(%var_3485, dtype="float32") /* ty=Tensor[(1, 1573), float32] */;
  %744 = cast(%var_3486, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %745 = reshape(%743, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %746 = reshape(%744, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %747 = @func_2463(%745, %746) /* ty=(Tensor[(11, 11, 13), bool], Tensor[(260), int64], Tensor[(4, 5, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(1, 14, 14), float32], Tensor[(864), int16], Tensor[(11, 11, 13), float64]) */;
  %748 = cast(%var_3485, dtype="int16") /* ty=Tensor[(1, 1573), int16] */;
  %749 = cast(%var_3488, dtype="int16") /* ty=Tensor[(10, 1573), int16] */;
  %750 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %751 = maximum(%741, %742) /* ty=Tensor[(7, 3, 11), uint16] */;
  %752 = %747.1;
  %753 = bitwise_and(%748, %749) /* ty=Tensor[(10, 1573), int16] */;
  %754 = %750.0;
  (%751, %752, %var_3486, %753, %754)
}

def @func_6520(%var_6511: Tensor[(11, 10, 6), float64]) -> (Tensor[(11, 10, 6), bool],) {
  %755 = @func_3122() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %756 = %755.0;
  %757 = cast(%var_6511, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %761 = less_equal(%759, %760) /* ty=Tensor[(11, 10, 6), bool] */;
  (%761,)
}

def @func_1492(%var_1484: Tensor[(13, 7, 13), float64]) -> (Tensor[(13, 7, 13), float64],) {
  %762 = cast(%var_1484, dtype="float64") /* ty=Tensor[(13, 7, 13), float64] */;
  %763 = acos(%762) /* ty=Tensor[(13, 7, 13), float64] */;
  (%763,)
}

def @func_239(%var_183: Tensor[(196), float32]) -> (Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(16, 8, 7), float64]) {
  %764 = cast(%var_183, dtype="float32") /* ty=Tensor[(196), float32] */;
  %765 = reshape(%764, newshape=[1, 14, 14]) /* ty=Tensor[(1, 14, 14), float32] */;
  %766 = @func_37(%765) /* ty=(Tensor[(1, 14, 14), float32],) */;
  %767 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 8, 7), float32] */, dtype="float32") /* ty=Tensor[(16, 8, 7), float32] */;
  %768 = cosh(%767) /* ty=Tensor[(16, 8, 7), float32] */;
  %769 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 8, 7), float32] */, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%768, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %773 = logical_or(%771, %772) /* ty=Tensor[(16, 8, 7), bool] */;
  %774 = cast(%768, dtype="int16") /* ty=Tensor[(16, 8, 7), int16] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%773, dtype="int16") /* ty=Tensor[(16, 8, 7), int16] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %778 = multiply(%776, %777) /* ty=Tensor[(16, 8, 7), int16] */;
  %779 = cast(%778, dtype="float64") /* ty=Tensor[(16, 8, 7), float64] */;
  %780 = %766.0;
  %781 = rsqrt(%779) /* ty=Tensor[(16, 8, 7), float64] */;
  (%780, %var_183, %781)
}

def @func_5944(%var_5927: Tensor[(12, 6, 5), float32], %var_5936: Tensor[(60), float32]) -> (Tensor[(12, 6, 5), float32], Tensor[(1, 14, 14), float32], Tensor[(60), float32]) {
  %782 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 5), float32] */;
  %783 = shape_of(%var_5927, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%var_5927, dtype="float32") /* ty=Tensor[(12, 6, 5), float32] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %786 = cast(%var_5936, dtype="float32") /* ty=Tensor[(60), float32] */;
  %787 = reshape(%786, newshape=[3, 5, 4]) /* ty=Tensor[(3, 5, 4), float32] */;
  %788 = @func_478(%787) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(3, 5, 4), float64]) */;
  %789 = divide(%784, %785) /* ty=Tensor[(12, 6, 5), float32] */;
  %790 = %788.0;
  (%789, %790, %var_5936)
}

def @func_1789() -> (Tensor[(11, 11, 13), float32],) {
  %791 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %792 = %791.0;
  (%792,)
}

def @func_6589(%var_6579: Tensor[(560), float32]) -> (Tensor[(11, 11, 13), float32], Tensor[(14, 8, 5), float32], Tensor[(560), float32], Tensor[(11, 10, 6), float64]) {
  %793 = @func_4984() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */;
  %794 = cast(%var_6579, dtype="float32") /* ty=Tensor[(560), float32] */;
  %795 = reshape(%794, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), float32] */;
  %796 = @func_5910(%795) /* ty=(Tensor[(14, 8, 5), float32],) */;
  %797 = @func_3122() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %798 = %797.0;
  %799 = cast(%798, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %800 = %793.0;
  %801 = %796.0;
  %802 = rsqrt(%799) /* ty=Tensor[(11, 10, 6), float64] */;
  (%800, %801, %var_6579, %802)
}

def @func_2301(%var_2294: Tensor[(4, 5, 13), uint8], %var_2295: Tensor[(4, 5, 13), uint8]) -> (Tensor[(4, 5, 13), bool],) {
  %803 = cast(%var_2295, dtype="bool") /* ty=Tensor[(4, 5, 13), bool] */;
  %804 = shape_of(%var_2294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%var_2294, dtype="bool") /* ty=Tensor[(4, 5, 13), bool] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %807 = greater(%805, %806) /* ty=Tensor[(4, 5, 13), bool] */;
  (%807,)
}

def @func_1778() -> (Tensor[(11, 11, 13), float32],) {
  %808 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  (%808,)
}

def @func_3646() -> (Tensor[(11, 11, 13), float32], Tensor[(2, 2, 14), uint32], uint32, Tensor[(196), float32]) {
  %809 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %810 = cast(%809, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %811 = cast(meta[relay.Constant][36] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %812 = cast(meta[relay.Constant][37] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %813 = reshape(%811, newshape=[]) /* ty=uint32 */;
  %814 = reshape(%812, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %815 = @func_404(%813, %814) /* ty=(Tensor[(2, 2, 14), uint32], Tensor[(1, 14, 14), float32], Tensor[(196), float64]) */;
  %816 = log10(%810) /* ty=Tensor[(11, 11, 13), float32] */;
  %817 = %815.0;
  (%816, %817, meta[relay.Constant][36] /* ty=uint32 */, meta[relay.Constant][37] /* ty=Tensor[(196), float32] */)
}

def @func_404(%var_391: uint32, %var_397: Tensor[(196), float32]) -> (Tensor[(2, 2, 14), uint32], Tensor[(1, 14, 14), float32], Tensor[(196), float64]) {
  %818 = cast(%var_391, dtype="uint32") /* ty=uint32 */;
  %819 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 2, 14), uint32] */, dtype="uint32") /* ty=Tensor[(2, 2, 14), uint32] */;
  %820 = cast(%var_397, dtype="float32") /* ty=Tensor[(196), float32] */;
  %821 = reshape(%820, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %822 = @func_239(%821) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(16, 8, 7), float64]) */;
  %823 = cast(%var_397, dtype="float64") /* ty=Tensor[(196), float64] */;
  %824 = bitwise_or(%818, %819) /* ty=Tensor[(2, 2, 14), uint32] */;
  %825 = %822.0;
  %826 = cosh(%823) /* ty=Tensor[(196), float64] */;
  (%824, %825, %826)
}

def @func_2341(%var_2306: float64, %var_2324: Tensor[(416), uint64]) -> (Tensor[(6, 10, 14), float64], Tensor[(196), float32], Tensor[(168), int32], Tensor[(32), uint8], Tensor[(416), uint64], Tensor[(416), uint64], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) {
  %827 = cast(%var_2306, dtype="float64") /* ty=float64 */;
  %828 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(6, 10, 14), float64] */;
  %829 = cast(%var_2306, dtype="int32") /* ty=int32 */;
  %830 = cast(meta[relay.Constant][40] /* ty=Tensor[(168), int32] */, dtype="int32") /* ty=Tensor[(168), int32] */;
  %831 = cast(meta[relay.Constant][41] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %832 = reshape(%829, newshape=[]) /* ty=int32 */;
  %833 = reshape(%830, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), int32] */;
  %834 = reshape(%831, newshape=[32, 1]) /* ty=Tensor[(32, 1), uint8] */;
  %835 = @func_2181(%832, %833, %834) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(6, 14, 2), uint16], Tensor[(60), float32], Tensor[(32, 1), uint8], Tensor[(11, 11, 13), float32]) */;
  %836 = cast(%var_2324, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %837 = reshape(%836, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %838 = @func_1640(%837) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64]) */;
  %839 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %840 = %839.0;
  %841 = cast(%840, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %842 = @func_1723() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %843 = power(%827, %828) /* ty=Tensor[(6, 10, 14), float64] */;
  %844 = %835.1;
  %845 = %838.2;
  %846 = rsqrt(%841) /* ty=Tensor[(11, 11, 13), float32] */;
  %847 = %842.0;
  (%843, %844, meta[relay.Constant][40] /* ty=Tensor[(168), int32] */, meta[relay.Constant][41] /* ty=Tensor[(32), uint8] */, %845, %var_2324, %846, %847)
}

def @func_954() -> (Tensor[(11, 11, 13), float32],) {
  %848 = cast(meta[relay.Constant][42] /* ty=Tensor[(11, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %849 = sin(%848) /* ty=Tensor[(11, 11, 13), float32] */;
  (%849,)
}

def @func_4984() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) {
  %850 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %851 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  %852 = %850.0;
  (%851, %852)
}

def @func_5166() -> Tensor[(11, 11, 13), float32] {
  %853 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %853.0
}

def @func_5111(%var_5066: Tensor[(54, 14), uint64], %var_5067: Tensor[(110), float64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(54, 14), uint64], Tensor[(110), bool]) {
  %854 = @func_2876() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %855 = cast(%var_5066, dtype="uint64") /* ty=Tensor[(54, 14), uint64] */;
  %856 = cast(%var_5067, dtype="float64") /* ty=Tensor[(110), float64] */;
  %857 = reshape(%855, newshape=[756]) /* ty=Tensor[(756), uint64] */;
  %858 = reshape(%856, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %859 = @func_4078(%857, %858) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(12, 7, 9), bool], Tensor[(756), uint64], Tensor[(1, 11, 10), float32], Tensor[(12, 7, 9), bool], Tensor[(11, 11, 13), float32], Tensor[(110), int32], Tensor[(11, 11, 13), float32]) */;
  %860 = cast(meta[relay.Constant][43] /* ty=Tensor[(110), float64] */, dtype="bool") /* ty=Tensor[(110), bool] */;
  %861 = shape_of(%var_5067, dtype="int32") /* ty=Tensor[(1), int32] */;
  %862 = cast(%var_5067, dtype="bool") /* ty=Tensor[(110), bool] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?), bool] */;
  %864 = %854.0;
  %865 = %859.6;
  %866 = less(%862, %863) /* ty=Tensor[(110), bool] */;
  (%864, %865, %var_5066, %866)
}

def @func_4854() -> (Tensor[(11, 11, 13), float32],) {
  %867 = @func_1941() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %868 = %867.0;
  (%868,)
}

def @func_6051(%var_6012: Tensor[(13, 6, 4), float64]) -> (Tensor[(13, 6, 4), float64], Tensor[(11, 11, 13), float32], Tensor[(416), float32], Tensor[(11, 11, 13), float32]) {
  %869 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 6, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 4), float64] */;
  %870 = shape_of(%var_6012, dtype="int32") /* ty=Tensor[(3), int32] */;
  %871 = cast(%var_6012, dtype="float64") /* ty=Tensor[(13, 6, 4), float64] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %873 = @func_3445() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(91, 1), float64], Tensor[(416), float32]) */;
  %874 = floor_mod(%871, %872) /* ty=Tensor[(13, 6, 4), float64] */;
  %875 = @func_5629() /* ty=Tensor[(11, 11, 13), float32] */;
  %876 = %873.2;
  %877 = @func_5166() /* ty=Tensor[(11, 11, 13), float32] */;
  (%874, %875, %876, %877)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1374(%var_1330: Tensor[(11, 11, 13), float32]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), bool]) {
  %0 = @func_1071() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %3 = reshape(%2, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %4 = @func_1195(%3) /* ty=(Tensor[(11, 11, 13), bool],) */;
  %5 = %4.0;
  %6 = cast(%5, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %7 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %8 = cast(%var_1330, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%7, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %12 = cast(%var_1330, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %13 = cast(%var_1330, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %14 = reshape(%13, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %15 = @func_1195(%14) /* ty=(Tensor[(11, 11, 13), bool],) */;
  %16 = acos(%6) /* ty=Tensor[(11, 11, 13), float64] */;
  %17 = logical_and(%10, %11) /* ty=Tensor[(11, 11, 13), bool] */;
  %18 = exp(%12) /* ty=Tensor[(11, 11, 13), float32] */;
  %19 = %15.0;
  (%1, %16, %17, %18, %19)
}

def @func_2304(%var_2302: Tensor[(4, 5, 13), uint8], %var_2303: Tensor[(4, 5, 13), uint8]) -> (Tensor[(4, 5, 13), bool],) {
  %25 = fn (%var_2294: Tensor[(4, 5, 13), uint8], %var_2295: Tensor[(4, 5, 13), uint8]) -> (Tensor[(4, 5, 13), bool],) {
    %20 = cast(%var_2295, dtype="bool") /* ty=Tensor[(4, 5, 13), bool] */;
    %21 = shape_of(%var_2294, dtype="int32") /* ty=Tensor[(3), int32] */;
    %22 = cast(%var_2294, dtype="bool") /* ty=Tensor[(4, 5, 13), bool] */;
    %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %24 = greater(%22, %23) /* ty=Tensor[(4, 5, 13), bool] */;
    (%24,)
  };
  %25(%var_2302, %var_2303) /* ty=(Tensor[(4, 5, 13), bool],) */
}

def @func_3935() -> (Tensor[(11, 11, 13), float32], Tensor[(96), float32], Tensor[(11, 10, 6), int16]) {
  %26 = @func_1789() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %27 = cast(meta[relay.Constant][0] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %28 = reshape(%27, newshape=[16, 1, 6]) /* ty=Tensor[(16, 1, 6), float32] */;
  %29 = @func_2652(%28) /* ty=(Tensor[(16, 1, 6), float32], Tensor[(11, 11, 13), bool], Tensor[(1573), float32], Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32]) */;
  %30 = %29.3;
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 10, 6), float64] */, dtype="int16") /* ty=Tensor[(11, 10, 6), int16] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="int16") /* ty=Tensor[(11, 10, 6), int16] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %35 = %26.0;
  %36 = bitwise_and(%33, %34) /* ty=Tensor[(11, 10, 6), int16] */;
  (%35, meta[relay.Constant][0] /* ty=Tensor[(96), float32] */, %36)
}

def @func_3978() -> (Tensor[(11, 11, 13), uint32],) {
  %47 = fn () -> (Tensor[(11, 11, 13), uint32],) {
    %37 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
    %38 = cast(%37, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %39 = reshape(%38, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
    %40 = @func_1195(%39) /* ty=(Tensor[(11, 11, 13), bool],) */;
    %41 = %40.0;
    %42 = cast(%37, dtype="uint32") /* ty=Tensor[(11, 11, 13), uint32] */;
    %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
    %44 = cast(%41, dtype="uint32") /* ty=Tensor[(11, 11, 13), uint32] */;
    %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %46 = left_shift(%44, %45) /* ty=Tensor[(11, 11, 13), uint32] */;
    (%46,)
  };
  %47() /* ty=(Tensor[(11, 11, 13), uint32],) */
}

def @func_6500() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64]) {
  %52 = fn () -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64]) {
    %48 = @func_2552() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %49 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
    %50 = %48.0;
    %51 = @func_2120() /* ty=Tensor[(11, 11, 13), float64] */;
    (%49, %50, %51)
  };
  %52() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64]) */
}

def @func_5115(%var_5113: Tensor[(54, 14), uint64], %var_5114: Tensor[(110), float64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(54, 14), uint64], Tensor[(110), bool]) {
  @func_5111(%var_5113, %var_5114) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(54, 14), uint64], Tensor[(110), bool]) */
}

def @func_608(%var_606: Tensor[(14, 8, 11), float32]) -> (Tensor[(14, 8, 11), float32], Tensor[(1, 14, 14), float32], Tensor[(7, 28), float32]) {
  @func_605(%var_606) /* ty=(Tensor[(14, 8, 11), float32], Tensor[(1, 14, 14), float32], Tensor[(7, 28), float32]) */
}

def @func_5630() -> Tensor[(11, 11, 13), float32] {
  %53 = fn () -> Tensor[(11, 11, 13), float32] {
    @func_5166() /* ty=Tensor[(11, 11, 13), float32] */
  };
  %53() /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_6589(%var_6579: Tensor[(560), float32]) -> (Tensor[(11, 11, 13), float32], Tensor[(14, 8, 5), float32], Tensor[(560), float32], Tensor[(11, 10, 6), float64]) {
  %54 = @func_4984() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */;
  %55 = cast(%var_6579, dtype="float32") /* ty=Tensor[(560), float32] */;
  %56 = reshape(%55, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), float32] */;
  %57 = @func_5910(%56) /* ty=(Tensor[(14, 8, 5), float32],) */;
  %58 = @func_3122() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %59 = %58.0;
  %60 = cast(%59, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %61 = %54.0;
  %62 = %57.0;
  %63 = rsqrt(%60) /* ty=Tensor[(11, 10, 6), float64] */;
  (%61, %62, %var_6579, %63)
}

def @func_1132() -> Tensor[(11, 11, 13), float32] {
  @func_1130() /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_2098(%var_2088: Tensor[(11, 11, 13), float32]) -> Tensor[(11, 11, 13), float64] {
  %64 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  %65 = cast(%var_2088, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  minimum(%67, %68) /* ty=Tensor[(11, 11, 13), float64] */
}

def @func_1084() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  @func_1082() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */
}

def @func_1066() -> Tensor[(11, 11, 13), float32] {
  %70 = fn () -> Tensor[(11, 11, 13), float32] {
    %69 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %69.0
  };
  %70() /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_3899(%var_3897: Tensor[(960), uint32]) -> (Tensor[(11, 11, 13), int32], Tensor[(11, 11, 13), float32], Tensor[(4, 16, 15), float64], Tensor[(11, 10, 6), float64]) {
  @func_3896(%var_3897) /* ty=(Tensor[(11, 11, 13), int32], Tensor[(11, 11, 13), float32], Tensor[(4, 16, 15), float64], Tensor[(11, 10, 6), float64]) */
}

def @func_2823(%var_2821: Tensor[(13, 7), float64]) -> (Tensor[(196), float64], Tensor[(196), float32], Tensor[(196), float32], Tensor[(16, 2), uint8], Tensor[(11, 11, 13), bool], Tensor[(16, 13, 2), uint64], Tensor[(416), uint64], Tensor[(7, 13, 1), float64], Tensor[(13, 7), float64]) {
  @func_2820(%var_2821) /* ty=(Tensor[(196), float64], Tensor[(196), float32], Tensor[(196), float32], Tensor[(16, 2), uint8], Tensor[(11, 11, 13), bool], Tensor[(16, 13, 2), uint64], Tensor[(416), uint64], Tensor[(7, 13, 1), float64], Tensor[(13, 7), float64]) */
}

def @func_6053(%var_6052: Tensor[(13, 6, 4), float64]) -> (Tensor[(13, 6, 4), float64], Tensor[(11, 11, 13), float32], Tensor[(416), float32], Tensor[(11, 11, 13), float32]) {
  %80 = fn (%var_6012: Tensor[(13, 6, 4), float64]) -> (Tensor[(13, 6, 4), float64], Tensor[(11, 11, 13), float32], Tensor[(416), float32], Tensor[(11, 11, 13), float32]) {
    %71 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 6, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 4), float64] */;
    %72 = shape_of(%var_6012, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%var_6012, dtype="float64") /* ty=Tensor[(13, 6, 4), float64] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %75 = @func_3445() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(91, 1), float64], Tensor[(416), float32]) */;
    %76 = floor_mod(%73, %74) /* ty=Tensor[(13, 6, 4), float64] */;
    %77 = @func_5629() /* ty=Tensor[(11, 11, 13), float32] */;
    %78 = %75.2;
    %79 = @func_5166() /* ty=Tensor[(11, 11, 13), float32] */;
    (%76, %77, %78, %79)
  };
  %80(%var_6052) /* ty=(Tensor[(13, 6, 4), float64], Tensor[(11, 11, 13), float32], Tensor[(416), float32], Tensor[(11, 11, 13), float32]) */
}

def @func_2735() -> (Tensor[(11, 11, 13), float32],) {
  @func_2733() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_6850() -> (Tensor[(11, 10, 6), float64],) {
  %83 = fn () -> (Tensor[(11, 10, 6), float64],) {
    %81 = @func_1723() /* ty=(Tensor[(11, 10, 6), float64],) */;
    %82 = %81.0;
    (%82,)
  };
  %83() /* ty=(Tensor[(11, 10, 6), float64],) */
}

def @func_1973() -> (Tensor[(11, 11, 13), float32],) {
  %86 = fn () -> (Tensor[(11, 11, 13), float32],) {
    %84 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %85 = %84.0;
    (%85,)
  };
  %86() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_2373(%var_2371: Tensor[(4, 16, 15), uint32]) -> (Tensor[(4, 16, 15), uint32],) {
  @func_2370(%var_2371) /* ty=(Tensor[(4, 16, 15), uint32],) */
}

def @func_2051() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  @func_2049() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */
}

def @func_3447() -> (Tensor[(11, 11, 13), float32], Tensor[(91, 1), float64], Tensor[(416), float32]) {
  @func_3445() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(91, 1), float64], Tensor[(416), float32]) */
}

def @func_481(%var_479: Tensor[(3, 5, 4), float32]) -> (Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(3, 5, 4), float64]) {
  @func_478(%var_479) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(3, 5, 4), float64]) */
}

def @func_1494(%var_1493: Tensor[(13, 7, 13), float64]) -> (Tensor[(13, 7, 13), float64],) {
  %89 = fn (%var_1484: Tensor[(13, 7, 13), float64]) -> (Tensor[(13, 7, 13), float64],) {
    %87 = cast(%var_1484, dtype="float64") /* ty=Tensor[(13, 7, 13), float64] */;
    %88 = acos(%87) /* ty=Tensor[(13, 7, 13), float64] */;
    (%88,)
  };
  %89(%var_1493) /* ty=(Tensor[(13, 7, 13), float64],) */
}

def @func_3937() -> (Tensor[(11, 11, 13), float32], Tensor[(96), float32], Tensor[(11, 10, 6), int16]) {
  @func_3935() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(96), float32], Tensor[(11, 10, 6), int16]) */
}

def @func_1780() -> (Tensor[(11, 11, 13), float32],) {
  @func_1778() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_605(%var_590: Tensor[(14, 8, 11), float32]) -> (Tensor[(14, 8, 11), float32], Tensor[(1, 14, 14), float32], Tensor[(7, 28), float32]) {
  %90 = cast(%var_590, dtype="float32") /* ty=Tensor[(14, 8, 11), float32] */;
  %91 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 28), float32] */, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %92 = reshape(%91, newshape=[1, 14, 14]) /* ty=Tensor[(1, 14, 14), float32] */;
  %93 = @func_37(%92) /* ty=(Tensor[(1, 14, 14), float32],) */;
  %94 = sigmoid(%90) /* ty=Tensor[(14, 8, 11), float32] */;
  %95 = %93.0;
  (%94, %95, meta[relay.Constant][3] /* ty=Tensor[(7, 28), float32] */)
}

def @func_5362() -> (Tensor[(11, 10, 6), uint8],) {
  @func_5360() /* ty=(Tensor[(11, 10, 6), uint8],) */
}

def @func_2487() -> (Tensor[(11, 11, 13), float32],) {
  @func_2485() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_5944(%var_5927: Tensor[(12, 6, 5), float32], %var_5936: Tensor[(60), float32]) -> (Tensor[(12, 6, 5), float32], Tensor[(1, 14, 14), float32], Tensor[(60), float32]) {
  %96 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 5), float32] */;
  %97 = shape_of(%var_5927, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%var_5927, dtype="float32") /* ty=Tensor[(12, 6, 5), float32] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %100 = cast(%var_5936, dtype="float32") /* ty=Tensor[(60), float32] */;
  %101 = reshape(%100, newshape=[3, 5, 4]) /* ty=Tensor[(3, 5, 4), float32] */;
  %102 = @func_478(%101) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(3, 5, 4), float64]) */;
  %103 = divide(%98, %99) /* ty=Tensor[(12, 6, 5), float32] */;
  %104 = %102.0;
  (%103, %104, %var_5936)
}

def @func_2680(%var_2678: float64, %var_2679: Tensor[(7, 13, 1), float64]) -> Tensor[(7, 13, 1), float64] {
  %107 = fn (%var_2671: float64, %var_2672: Tensor[(7, 13, 1), float64]) -> Tensor[(7, 13, 1), float64] {
    %105 = cast(%var_2671, dtype="float64") /* ty=float64 */;
    %106 = cast(%var_2672, dtype="float64") /* ty=Tensor[(7, 13, 1), float64] */;
    divide(%105, %106) /* ty=Tensor[(7, 13, 1), float64] */
  };
  %107(%var_2678, %var_2679) /* ty=Tensor[(7, 13, 1), float64] */
}

def @func_1801() -> (Tensor[(11, 10, 6), float64],) {
  @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */
}

def @func_2466(%var_2464: Tensor[(11, 11, 13), float32], %var_2465: Tensor[(260), uint8]) -> (Tensor[(11, 11, 13), bool], Tensor[(260), int64], Tensor[(4, 5, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(1, 14, 14), float32], Tensor[(864), int16], Tensor[(11, 11, 13), float64]) {
  %139 = fn (%var_2396: Tensor[(11, 11, 13), float32], %var_2411: Tensor[(260), uint8]) -> (Tensor[(11, 11, 13), bool], Tensor[(260), int64], Tensor[(4, 5, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(1, 14, 14), float32], Tensor[(864), int16], Tensor[(11, 11, 13), float64]) {
    %108 = @func_1408() /* ty=Tensor[(11, 11, 13), float32] */;
    %109 = cast(%var_2396, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
    %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%108, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %113 = cast(%var_2411, dtype="uint8") /* ty=Tensor[(260), uint8] */;
    %114 = cast(%var_2411, dtype="uint8") /* ty=Tensor[(260), uint8] */;
    %115 = reshape(%113, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
    %116 = reshape(%114, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
    %117 = @func_2301(%115, %116) /* ty=(Tensor[(4, 5, 13), bool],) */;
    %118 = %117.0;
    %119 = cast(%118, dtype="int64") /* ty=Tensor[(4, 5, 13), int64] */;
    %120 = shape_of(%var_2411, dtype="int32") /* ty=Tensor[(1), int32] */;
    %121 = cast(%var_2411, dtype="int64") /* ty=Tensor[(260), int64] */;
    %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?), int64] */;
    %123 = cast(%118, dtype="float32") /* ty=Tensor[(4, 5, 13), float32] */;
    %124 = @func_1972() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %125 = cast(meta[relay.Constant][5] /* ty=Tensor[(864), int16] */, dtype="int16") /* ty=Tensor[(864), int16] */;
    %126 = cast(meta[relay.Constant][5] /* ty=Tensor[(864), int16] */, dtype="int16") /* ty=Tensor[(864), int16] */;
    %127 = reshape(%125, newshape=[9, 16, 6]) /* ty=Tensor[(9, 16, 6), int16] */;
    %128 = reshape(%126, newshape=[9, 16, 6]) /* ty=Tensor[(9, 16, 6), int16] */;
    %129 = @func_802(%127, %128) /* ty=(Tensor[(9, 16, 6), int16], Tensor[(1, 14, 14), float32], Tensor[(196), float32]) */;
    %130 = @func_1789() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %131 = %130.0;
    %132 = cast(%131, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
    %133 = not_equal(%111, %112) /* ty=Tensor[(11, 11, 13), bool] */;
    %134 = logical_xor(%121, %122) /* ty=Tensor[(260), int64] */;
    %135 = erf(%123) /* ty=Tensor[(4, 5, 13), float32] */;
    %136 = %124.0;
    %137 = %129.1;
    %138 = acosh(%132) /* ty=Tensor[(11, 11, 13), float64] */;
    (%133, %134, %135, %136, %137, meta[relay.Constant][5] /* ty=Tensor[(864), int16] */, %138)
  };
  %139(%var_2464, %var_2465) /* ty=(Tensor[(11, 11, 13), bool], Tensor[(260), int64], Tensor[(4, 5, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(1, 14, 14), float32], Tensor[(864), int16], Tensor[(11, 11, 13), float64]) */
}

def @func_4562(%var_4561: Tensor[(960), uint32]) -> (Tensor[(11, 11, 13), float32], Tensor[(4, 16, 15), uint32], Tensor[(960), uint32]) {
  %146 = fn (%var_4548: Tensor[(960), uint32]) -> (Tensor[(11, 11, 13), float32], Tensor[(4, 16, 15), uint32], Tensor[(960), uint32]) {
    %140 = @func_1941() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %141 = cast(%var_4548, dtype="uint32") /* ty=Tensor[(960), uint32] */;
    %142 = reshape(%141, newshape=[4, 16, 15]) /* ty=Tensor[(4, 16, 15), uint32] */;
    %143 = @func_2370(%142) /* ty=(Tensor[(4, 16, 15), uint32],) */;
    %144 = %140.0;
    %145 = %143.0;
    (%144, %145, %var_4548)
  };
  %146(%var_4561) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(4, 16, 15), uint32], Tensor[(960), uint32]) */
}

def @func_2878() -> (Tensor[(11, 11, 13), float32],) {
  @func_2876() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_1377(%var_1375: Tensor[(11, 11, 13), float32]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), bool]) {
  @func_1374(%var_1375) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), bool]) */
}

def @func_2101(%var_2099: Tensor[(11, 11, 13), float32]) -> Tensor[(11, 11, 13), float64] {
  @func_2098(%var_2099) /* ty=Tensor[(11, 11, 13), float64] */
}

def @func_1640(%var_1636: Tensor[(416), uint64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64]) {
  %147 = cast(%var_1636, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %148 = cast(%var_1636, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %149 = reshape(%147, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %150 = reshape(%148, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %151 = @func_1263(%149, %150) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(11, 11, 13), float32]) */;
  %152 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %153 = %151.1;
  (%152, %153, %var_1636)
}

def @func_6099(%var_6097: Tensor[(13, 9, 10), float32], %var_6098: Tensor[(13, 9, 10), float32]) -> (Tensor[(13, 9, 10), float32],) {
  %159 = fn (%var_6079: Tensor[(13, 9, 10), float32], %var_6080: Tensor[(13, 9, 10), float32]) -> (Tensor[(13, 9, 10), float32],) {
    %154 = cast(%var_6080, dtype="float32") /* ty=Tensor[(13, 9, 10), float32] */;
    %155 = shape_of(%var_6079, dtype="int32") /* ty=Tensor[(3), int32] */;
    %156 = cast(%var_6079, dtype="float32") /* ty=Tensor[(13, 9, 10), float32] */;
    %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %158 = power(%156, %157) /* ty=Tensor[(13, 9, 10), float32] */;
    (%158,)
  };
  %159(%var_6097, %var_6098) /* ty=(Tensor[(13, 9, 10), float32],) */
}

def @func_5503(%var_5501: Tensor[(288), float32]) -> (Tensor[(11, 11, 13), float64], Tensor[(11, 10, 6), float64], Tensor[(9, 8, 4), float32], Tensor[(288), float32]) {
  @func_5500(%var_5501) /* ty=(Tensor[(11, 11, 13), float64], Tensor[(11, 10, 6), float64], Tensor[(9, 8, 4), float32], Tensor[(288), float32]) */
}

def @func_1799() -> (Tensor[(11, 10, 6), float64],) {
  %160 = @func_1723() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %161 = %160.0;
  (%161,)
}

def @func_4737() -> (Tensor[(11, 11, 13), float32],) {
  @func_4735() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_6733() -> (Tensor[(11, 11, 13), float32],) {
  %163 = fn () -> (Tensor[(11, 11, 13), float32],) {
    %162 = @func_1408() /* ty=Tensor[(11, 11, 13), float32] */;
    (%162,)
  };
  %163() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_3273() -> (Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32], Tensor[(4, 5, 13), bool], Tensor[(260), uint8]) {
  %164 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %165 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %166 = cast(meta[relay.Constant][6] /* ty=Tensor[(260), uint8] */, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %167 = cast(meta[relay.Constant][6] /* ty=Tensor[(260), uint8] */, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %168 = reshape(%166, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
  %169 = reshape(%167, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
  %170 = @func_2301(%168, %169) /* ty=(Tensor[(4, 5, 13), bool],) */;
  %171 = %164.0;
  %172 = %165.0;
  %173 = %170.0;
  (%171, %172, %173, meta[relay.Constant][6] /* ty=Tensor[(260), uint8] */)
}

def @func_3007() -> Tensor[(11, 11, 13), float32] {
  %175 = fn () -> Tensor[(11, 11, 13), float32] {
    %174 = @func_1829() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
    %174.0
  };
  %175() /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_3346(%var_3345: Tensor[(960), uint32]) -> (Tensor[(4, 16, 15), uint32], Tensor[(960), uint32], Tensor[(11, 11, 13), float64]) {
  %189 = fn (%var_3332: Tensor[(960), uint32]) -> (Tensor[(4, 16, 15), uint32], Tensor[(960), uint32], Tensor[(11, 11, 13), float64]) {
    %176 = cast(%var_3332, dtype="uint32") /* ty=Tensor[(960), uint32] */;
    %177 = reshape(%176, newshape=[4, 16, 15]) /* ty=Tensor[(4, 16, 15), uint32] */;
    %178 = @func_2370(%177) /* ty=(Tensor[(4, 16, 15), uint32],) */;
    %179 = @func_2485() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %180 = %179.0;
    %181 = @func_2485() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %182 = %181.0;
    %183 = cast(%182, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
    %184 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
    %185 = cast(%180, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
    %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %187 = %178.0;
    %188 = divide(%185, %186) /* ty=Tensor[(11, 11, 13), float64] */;
    (%187, %var_3332, %188)
  };
  %189(%var_3345) /* ty=(Tensor[(4, 16, 15), uint32], Tensor[(960), uint32], Tensor[(11, 11, 13), float64]) */
}

def @func_3092(%var_3090: Tensor[(12, 7, 9), uint64], %var_3091: Tensor[(12, 7, 9), uint64]) -> Tensor[(12, 7, 9), bool] {
  @func_3088(%var_3090, %var_3091) /* ty=Tensor[(12, 7, 9), bool] */
}

def @func_2186(%var_2183: int32, %var_2184: Tensor[(6, 14, 2), int32], %var_2185: Tensor[(32, 1), uint8]) -> (Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(6, 14, 2), uint16], Tensor[(60), float32], Tensor[(32, 1), uint8], Tensor[(11, 11, 13), float32]) {
  @func_2181(%var_2183, %var_2184, %var_2185) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(6, 14, 2), uint16], Tensor[(60), float32], Tensor[(32, 1), uint8], Tensor[(11, 11, 13), float32]) */
}

def @func_4820() -> (Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), uint8], Tensor[(11, 11, 13), uint32], Tensor[(11, 11, 13), bool]) {
  %202 = fn () -> (Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), uint8], Tensor[(11, 11, 13), uint32], Tensor[(11, 11, 13), bool]) {
    %190 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %191 = @func_3367() /* ty=(Tensor[(11, 10, 6), uint8],) */;
    %192 = @func_3977() /* ty=(Tensor[(11, 11, 13), uint32],) */;
    %193 = %190.0;
    %194 = cast(%193, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %195 = reshape(%194, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
    %196 = @func_1195(%195) /* ty=(Tensor[(11, 11, 13), bool],) */;
    %197 = @func_2120() /* ty=Tensor[(11, 11, 13), float64] */;
    %198 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
    %199 = %191.0;
    %200 = %192.0;
    %201 = %196.0;
    (%197, %198, %193, %199, %200, %201)
  };
  %202() /* ty=(Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), uint8], Tensor[(11, 11, 13), uint32], Tensor[(11, 11, 13), bool]) */
}

def @func_5335() -> (Tensor[(11, 11, 13), float32],) {
  %205 = fn () -> (Tensor[(11, 11, 13), float32],) {
    %203 = @func_2049() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
    %204 = %203.0;
    (%204,)
  };
  %205() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_5267() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %210 = fn () -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
    %206 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %207 = @func_2485() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %208 = %206.0;
    %209 = %207.0;
    (%208, %209)
  };
  %210() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */
}

def @func_3896(%var_3873: Tensor[(960), uint32]) -> (Tensor[(11, 11, 13), int32], Tensor[(11, 11, 13), float32], Tensor[(4, 16, 15), float64], Tensor[(11, 10, 6), float64]) {
  %211 = @func_2120() /* ty=Tensor[(11, 11, 13), float64] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
  %213 = log(%212) /* ty=Tensor[(11, 11, 13), float64] */;
  %214 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %215 = cast(%214, dtype="int32") /* ty=Tensor[(11, 11, 13), int32] */;
  %216 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%213, dtype="int32") /* ty=Tensor[(11, 11, 13), int32] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %219 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %220 = cast(%var_3873, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %221 = reshape(%220, newshape=[4, 16, 15]) /* ty=Tensor[(4, 16, 15), uint32] */;
  %222 = @func_2370(%221) /* ty=(Tensor[(4, 16, 15), uint32],) */;
  %223 = %222.0;
  %224 = cast(%var_3873, dtype="float64") /* ty=Tensor[(960), float64] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="float64") /* ty=Tensor[(4, 16, 15), float64] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %228 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %229 = bitwise_and(%217, %218) /* ty=Tensor[(11, 11, 13), int32] */;
  %230 = %219.0;
  %231 = power(%226, %227) /* ty=Tensor[(4, 16, 15), float64] */;
  %232 = %228.0;
  (%229, %230, %231, %232)
}

def @func_5913(%var_5911: Tensor[(14, 8, 5), float32]) -> (Tensor[(14, 8, 5), float32],) {
  @func_5910(%var_5911) /* ty=(Tensor[(14, 8, 5), float32],) */
}

def @func_5453() -> (Tensor[(11, 11, 13), float32],) {
  %233 = @func_5166() /* ty=Tensor[(11, 11, 13), float32] */;
  (%233,)
}

def @func_2876() -> (Tensor[(11, 11, 13), float32],) {
  %234 = @func_1966() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %235 = %234.0;
  (%235,)
}

def @func_3368() -> (Tensor[(11, 10, 6), uint8],) {
  %245 = fn () -> (Tensor[(11, 10, 6), uint8],) {
    %236 = @func_1723() /* ty=(Tensor[(11, 10, 6), float64],) */;
    %237 = %236.0;
    %238 = @func_1723() /* ty=(Tensor[(11, 10, 6), float64],) */;
    %239 = %238.0;
    %240 = cast(%239, dtype="uint8") /* ty=Tensor[(11, 10, 6), uint8] */;
    %241 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
    %242 = cast(%237, dtype="uint8") /* ty=Tensor[(11, 10, 6), uint8] */;
    %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %244 = left_shift(%242, %243) /* ty=Tensor[(11, 10, 6), uint8] */;
    (%244,)
  };
  %245() /* ty=(Tensor[(11, 10, 6), uint8],) */
}

def @func_1266(%var_1264: Tensor[(16, 13, 2), uint64], %var_1265: Tensor[(16, 13, 2), uint64]) -> (Tensor[(16, 13, 2), uint64], Tensor[(11, 11, 13), float32]) {
  %253 = fn (%var_1247: Tensor[(16, 13, 2), uint64], %var_1248: Tensor[(16, 13, 2), uint64]) -> (Tensor[(16, 13, 2), uint64], Tensor[(11, 11, 13), float32]) {
    %246 = cast(%var_1248, dtype="uint64") /* ty=Tensor[(16, 13, 2), uint64] */;
    %247 = shape_of(%var_1247, dtype="int32") /* ty=Tensor[(3), int32] */;
    %248 = cast(%var_1247, dtype="uint64") /* ty=Tensor[(16, 13, 2), uint64] */;
    %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %250 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %251 = minimum(%248, %249) /* ty=Tensor[(16, 13, 2), uint64] */;
    %252 = %250.0;
    (%251, %252)
  };
  %253(%var_1264, %var_1265) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(11, 11, 13), float32]) */
}

def @func_5166() -> Tensor[(11, 11, 13), float32] {
  %254 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %254.0
}

def @func_4696(%var_4694: Tensor[(260), uint8], %var_4695: Tensor[(260), uint8]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), bool], Tensor[(260), bool], Tensor[(11, 11, 13), float32], Tensor[(260), bool], Tensor[(260), bool], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) {
  @func_4692(%var_4694, %var_4695) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), bool], Tensor[(260), bool], Tensor[(11, 11, 13), float32], Tensor[(260), bool], Tensor[(260), bool], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */
}

def @func_4984() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) {
  %255 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %256 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  %257 = %255.0;
  (%256, %257)
}

def @func_1724() -> (Tensor[(11, 10, 6), float64],) {
  %260 = fn () -> (Tensor[(11, 10, 6), float64],) {
    %258 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 10, 6), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
    %259 = log10(%258) /* ty=Tensor[(11, 10, 6), float64] */;
    (%259,)
  };
  %260() /* ty=(Tensor[(11, 10, 6), float64],) */
}

def @func_5660() -> Tensor[(11, 11, 13), float32] {
  %262 = fn () -> Tensor[(11, 11, 13), float32] {
    %261 = @func_1941() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %261.0
  };
  %262() /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_1829() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %263 = @func_1071() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %264 = %263.0;
  %265 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  (%264, %265)
}

def @func_5948(%var_5946: Tensor[(12, 6, 5), float32], %var_5947: Tensor[(60), float32]) -> (Tensor[(12, 6, 5), float32], Tensor[(1, 14, 14), float32], Tensor[(60), float32]) {
  @func_5944(%var_5946, %var_5947) /* ty=(Tensor[(12, 6, 5), float32], Tensor[(1, 14, 14), float32], Tensor[(60), float32]) */
}

def @func_3647() -> (Tensor[(11, 11, 13), float32], Tensor[(2, 2, 14), uint32], uint32, Tensor[(196), float32]) {
  %275 = fn () -> (Tensor[(11, 11, 13), float32], Tensor[(2, 2, 14), uint32], uint32, Tensor[(196), float32]) {
    %266 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
    %267 = cast(%266, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %268 = cast(meta[relay.Constant][8] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %269 = cast(meta[relay.Constant][9] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
    %270 = reshape(%268, newshape=[]) /* ty=uint32 */;
    %271 = reshape(%269, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %272 = @func_404(%270, %271) /* ty=(Tensor[(2, 2, 14), uint32], Tensor[(1, 14, 14), float32], Tensor[(196), float64]) */;
    %273 = log10(%267) /* ty=Tensor[(11, 11, 13), float32] */;
    %274 = %272.0;
    (%273, %274, meta[relay.Constant][8] /* ty=uint32 */, meta[relay.Constant][9] /* ty=Tensor[(196), float32] */)
  };
  %275() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(2, 2, 14), uint32], uint32, Tensor[(196), float32]) */
}

def @func_6592(%var_6590: Tensor[(560), float32]) -> (Tensor[(11, 11, 13), float32], Tensor[(14, 8, 5), float32], Tensor[(560), float32], Tensor[(11, 10, 6), float64]) {
  @func_6589(%var_6590) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(14, 8, 5), float32], Tensor[(560), float32], Tensor[(11, 10, 6), float64]) */
}

def @func_6422(%var_6403: Tensor[(4, 8, 13), uint64], %var_6404: Tensor[(4, 8, 13), uint64]) -> (Tensor[(4, 8, 13), int64], Tensor[(4, 8, 13), float64]) {
  %276 = cast(%var_6404, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
  %277 = shape_of(%var_6403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%var_6403, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %280 = less_equal(%278, %279) /* ty=Tensor[(4, 8, 13), bool] */;
  %281 = cast(%280, dtype="int64") /* ty=Tensor[(4, 8, 13), int64] */;
  %282 = shape_of(%var_6403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_6403, dtype="int64") /* ty=Tensor[(4, 8, 13), int64] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %285 = cast(%var_6404, dtype="float64") /* ty=Tensor[(4, 8, 13), float64] */;
  %286 = left_shift(%283, %284) /* ty=Tensor[(4, 8, 13), int64] */;
  %287 = cosh(%285) /* ty=Tensor[(4, 8, 13), float64] */;
  (%286, %287)
}

def @func_6643() -> (Tensor[(11, 11, 13), float32],) {
  @func_6641() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_1966() -> (Tensor[(11, 11, 13), float32],) {
  %288 = @func_1408() /* ty=Tensor[(11, 11, 13), float32] */;
  (%288,)
}

def @func_1699(%var_1697: Tensor[(1183), float64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(196), float32], Tensor[(49, 4), float64], Tensor[(1183), int32]) {
  @func_1696(%var_1697) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(196), float32], Tensor[(49, 4), float64], Tensor[(1183), int32]) */
}

def @func_4574(%var_4572: Tensor[(10, 5), float64], %var_4573: Tensor[(10, 5), float64]) -> Tensor[(10, 5), float64] {
  %293 = fn (%var_4564: Tensor[(10, 5), float64], %var_4565: Tensor[(10, 5), float64]) -> Tensor[(10, 5), float64] {
    %289 = cast(%var_4565, dtype="float64") /* ty=Tensor[(10, 5), float64] */;
    %290 = shape_of(%var_4564, dtype="int32") /* ty=Tensor[(2), int32] */;
    %291 = cast(%var_4564, dtype="float64") /* ty=Tensor[(10, 5), float64] */;
    %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    power(%291, %292) /* ty=Tensor[(10, 5), float64] */
  };
  %293(%var_4572, %var_4573) /* ty=Tensor[(10, 5), float64] */
}

def @func_6552() -> (Tensor[(11, 9, 7), float64],) {
  %294 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 9, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
  %295 = atanh(%294) /* ty=Tensor[(11, 9, 7), float64] */;
  (%295,)
}

def @func_5360() -> (Tensor[(11, 10, 6), uint8],) {
  %296 = @func_3367() /* ty=(Tensor[(11, 10, 6), uint8],) */;
  %297 = %296.0;
  (%297,)
}

def @func_2344(%var_2342: float64, %var_2343: Tensor[(416), uint64]) -> (Tensor[(6, 10, 14), float64], Tensor[(196), float32], Tensor[(168), int32], Tensor[(32), uint8], Tensor[(416), uint64], Tensor[(416), uint64], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) {
  %319 = fn (%var_2306: float64, %var_2324: Tensor[(416), uint64]) -> (Tensor[(6, 10, 14), float64], Tensor[(196), float32], Tensor[(168), int32], Tensor[(32), uint8], Tensor[(416), uint64], Tensor[(416), uint64], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) {
    %298 = cast(%var_2306, dtype="float64") /* ty=float64 */;
    %299 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(6, 10, 14), float64] */;
    %300 = cast(%var_2306, dtype="int32") /* ty=int32 */;
    %301 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), int32] */, dtype="int32") /* ty=Tensor[(168), int32] */;
    %302 = cast(meta[relay.Constant][13] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
    %303 = reshape(%300, newshape=[]) /* ty=int32 */;
    %304 = reshape(%301, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), int32] */;
    %305 = reshape(%302, newshape=[32, 1]) /* ty=Tensor[(32, 1), uint8] */;
    %306 = @func_2181(%303, %304, %305) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(6, 14, 2), uint16], Tensor[(60), float32], Tensor[(32, 1), uint8], Tensor[(11, 11, 13), float32]) */;
    %307 = cast(%var_2324, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %308 = reshape(%307, newshape=[416]) /* ty=Tensor[(416), uint64] */;
    %309 = @func_1640(%308) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64]) */;
    %310 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %311 = %310.0;
    %312 = cast(%311, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %313 = @func_1723() /* ty=(Tensor[(11, 10, 6), float64],) */;
    %314 = power(%298, %299) /* ty=Tensor[(6, 10, 14), float64] */;
    %315 = %306.1;
    %316 = %309.2;
    %317 = rsqrt(%312) /* ty=Tensor[(11, 11, 13), float32] */;
    %318 = %313.0;
    (%314, %315, meta[relay.Constant][12] /* ty=Tensor[(168), int32] */, meta[relay.Constant][13] /* ty=Tensor[(32), uint8] */, %316, %var_2324, %317, %318)
  };
  %319(%var_2342, %var_2343) /* ty=(Tensor[(6, 10, 14), float64], Tensor[(196), float32], Tensor[(168), int32], Tensor[(32), uint8], Tensor[(416), uint64], Tensor[(416), uint64], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */
}

def @func_2485() -> (Tensor[(11, 11, 13), float32],) {
  %320 = @func_2221() /* ty=Tensor[(11, 11, 13), float32] */;
  (%320,)
}

def @func_6811() -> Tensor[(11, 11, 13), float32] {
  @func_6809() /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_1072() -> (Tensor[(11, 11, 13), float32],) {
  %322 = fn () -> (Tensor[(11, 11, 13), float32],) {
    %321 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
    (%321,)
  };
  %322() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_1559(%var_1557: Tensor[(11, 11, 13), float32], %var_1558: Tensor[(11, 11, 13), float32]) -> (Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), int64], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), uint64]) {
  %344 = fn (%var_1503: Tensor[(11, 11, 13), float32], %var_1519: Tensor[(11, 11, 13), float32]) -> (Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), int64], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), uint64]) {
    %323 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
    %324 = cast(%var_1503, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
    %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
    %326 = cast(%323, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
    %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %328 = cast(%var_1519, dtype="int64") /* ty=Tensor[(11, 11, 13), int64] */;
    %329 = shape_of(%var_1503, dtype="int32") /* ty=Tensor[(3), int32] */;
    %330 = cast(%var_1503, dtype="int64") /* ty=Tensor[(11, 11, 13), int64] */;
    %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %332 = greater_equal(%326, %327) /* ty=Tensor[(11, 11, 13), bool] */;
    %333 = cast(%332, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %334 = reshape(%333, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
    %335 = @func_1374(%334) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), bool]) */;
    %336 = @func_1408() /* ty=Tensor[(11, 11, 13), float32] */;
    %337 = cast(%336, dtype="uint64") /* ty=Tensor[(11, 11, 13), uint64] */;
    %338 = shape_of(%var_1519, dtype="int32") /* ty=Tensor[(3), int32] */;
    %339 = cast(%var_1519, dtype="uint64") /* ty=Tensor[(11, 11, 13), uint64] */;
    %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %341 = multiply(%330, %331) /* ty=Tensor[(11, 11, 13), int64] */;
    %342 = %335.1;
    %343 = bitwise_xor(%339, %340) /* ty=Tensor[(11, 11, 13), uint64] */;
    (%332, %341, %342, %343)
  };
  %344(%var_1557, %var_1558) /* ty=(Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), int64], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), uint64]) */
}

def @func_4692(%var_4613: Tensor[(260), uint8], %var_4630: Tensor[(260), uint8]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), bool], Tensor[(260), bool], Tensor[(11, 11, 13), float32], Tensor[(260), bool], Tensor[(260), bool], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) {
  %345 = @func_3076() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %346 = %345.0;
  %347 = cast(%346, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %348 = cast(%var_4613, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %349 = reshape(%347, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %350 = reshape(%348, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %351 = @func_2463(%349, %350) /* ty=(Tensor[(11, 11, 13), bool], Tensor[(260), int64], Tensor[(4, 5, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(1, 14, 14), float32], Tensor[(864), int16], Tensor[(11, 11, 13), float64]) */;
  %352 = cast(%var_4630, dtype="bool") /* ty=Tensor[(260), bool] */;
  %353 = shape_of(%var_4613, dtype="int32") /* ty=Tensor[(1), int32] */;
  %354 = cast(%var_4613, dtype="bool") /* ty=Tensor[(260), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?), bool] */;
  %356 = @func_1966() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %357 = cast(%var_4613, dtype="bool") /* ty=Tensor[(260), bool] */;
  %358 = shape_of(%var_4630, dtype="int32") /* ty=Tensor[(1), int32] */;
  %359 = cast(%var_4630, dtype="bool") /* ty=Tensor[(260), bool] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?), bool] */;
  %361 = cast(%var_4613, dtype="float64") /* ty=Tensor[(260), float64] */;
  %362 = atanh(%361) /* ty=Tensor[(260), float64] */;
  %363 = cast(%var_4613, dtype="bool") /* ty=Tensor[(260), bool] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(1), int32] */;
  %365 = cast(%362, dtype="bool") /* ty=Tensor[(260), bool] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?), bool] */;
  %367 = @func_3445() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(91, 1), float64], Tensor[(416), float32]) */;
  %368 = @func_3122() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %369 = %351.0;
  %370 = less(%354, %355) /* ty=Tensor[(260), bool] */;
  %371 = %356.0;
  %372 = logical_or(%359, %360) /* ty=Tensor[(260), bool] */;
  %373 = logical_and(%365, %366) /* ty=Tensor[(260), bool] */;
  %374 = %367.0;
  %375 = %368.0;
  (%346, %369, %370, %371, %372, %373, %374, %375)
}

def @func_4960(%var_4958: Tensor[(1, 5, 3), float64]) -> (Tensor[(?, 5, 3), float32], Tensor[(13, 7, 13), float64], Tensor[(1183), float64], Tensor[(11, 11, 13), bool], Tensor[(1573), float32]) {
  @func_4957(%var_4958) /* ty=(Tensor[(?, 5, 3), float32], Tensor[(13, 7, 13), float64], Tensor[(1183), float64], Tensor[(11, 11, 13), bool], Tensor[(1573), float32]) */
}

def @func_6742(%var_6740: Tensor[(3, 14, 11), uint64], %var_6741: Tensor[(3, 14, 11), uint64]) -> Tensor[(3, 14, 11), bool] {
  %380 = fn (%var_6734: Tensor[(3, 14, 11), uint64], %var_6735: Tensor[(3, 14, 11), uint64]) -> Tensor[(3, 14, 11), bool] {
    %376 = cast(%var_6735, dtype="bool") /* ty=Tensor[(3, 14, 11), bool] */;
    %377 = shape_of(%var_6734, dtype="int32") /* ty=Tensor[(3), int32] */;
    %378 = cast(%var_6734, dtype="bool") /* ty=Tensor[(3, 14, 11), bool] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%378, %379) /* ty=Tensor[(3, 14, 11), bool] */
  };
  %380(%var_6740, %var_6741) /* ty=Tensor[(3, 14, 11), bool] */
}

def @func_4164() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %385 = fn () -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
    %381 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %382 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %383 = %381.0;
    %384 = %382.0;
    (%383, %384)
  };
  %385() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */
}

def @func_3088(%var_3082: Tensor[(12, 7, 9), uint64], %var_3083: Tensor[(12, 7, 9), uint64]) -> Tensor[(12, 7, 9), bool] {
  %386 = cast(%var_3083, dtype="bool") /* ty=Tensor[(12, 7, 9), bool] */;
  %387 = shape_of(%var_3082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%var_3082, dtype="bool") /* ty=Tensor[(12, 7, 9), bool] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%388, %389) /* ty=Tensor[(12, 7, 9), bool] */
}

def @func_6720(%var_6719: Tensor[(260), uint8]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(260), int64], Tensor[(260), uint8], Tensor[(11, 11, 13), float32]) {
  %404 = fn (%var_6702: Tensor[(260), uint8]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(260), int64], Tensor[(260), uint8], Tensor[(11, 11, 13), float32]) {
    %390 = @func_4984() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */;
    %391 = @func_5996() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %392 = %390.0;
    %393 = cast(%392, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %394 = cast(%var_6702, dtype="uint8") /* ty=Tensor[(260), uint8] */;
    %395 = reshape(%393, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
    %396 = reshape(%394, newshape=[260]) /* ty=Tensor[(260), uint8] */;
    %397 = @func_2463(%395, %396) /* ty=(Tensor[(11, 11, 13), bool], Tensor[(260), int64], Tensor[(4, 5, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(1, 14, 14), float32], Tensor[(864), int16], Tensor[(11, 11, 13), float64]) */;
    %398 = @func_6641() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %399 = %398.0;
    %400 = cast(%399, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %401 = %391.0;
    %402 = %397.1;
    %403 = log2(%400) /* ty=Tensor[(11, 11, 13), float32] */;
    (%392, %401, %402, %var_6702, %403)
  };
  %404(%var_6719) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(260), int64], Tensor[(260), uint8], Tensor[(11, 11, 13), float32]) */
}

def @func_2733() -> (Tensor[(11, 11, 13), float32],) {
  %405 = @func_2485() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %406 = %405.0;
  (%406,)
}

def @func_1778() -> (Tensor[(11, 11, 13), float32],) {
  %407 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  (%407,)
}

def @func_1790() -> (Tensor[(11, 11, 13), float32],) {
  %410 = fn () -> (Tensor[(11, 11, 13), float32],) {
    %408 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %409 = %408.0;
    (%409,)
  };
  %410() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_2553() -> (Tensor[(11, 11, 13), float32],) {
  %413 = fn () -> (Tensor[(11, 11, 13), float32],) {
    %411 = @func_1789() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %412 = %411.0;
    (%412,)
  };
  %413() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_4473(%var_4472: Tensor[(286, 55), float32]) -> (Tensor[(11, 11, 13), float32], Tensor[(7, 3, 11), uint16], Tensor[(231), bool], Tensor[(260, 1), uint8], Tensor[(11, 11, 13), float32], Tensor[(286, 55), float64], Tensor[(11, 11, 13), bool], Tensor[(416), uint64], Tensor[(416), uint64]) {
  %444 = fn (%var_4428: Tensor[(286, 55), float32]) -> (Tensor[(11, 11, 13), float32], Tensor[(7, 3, 11), uint16], Tensor[(231), bool], Tensor[(260, 1), uint8], Tensor[(11, 11, 13), float32], Tensor[(286, 55), float64], Tensor[(11, 11, 13), bool], Tensor[(416), uint64], Tensor[(416), uint64]) {
    %414 = @func_1941() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %415 = cast(meta[relay.Constant][14] /* ty=Tensor[(231), bool] */, dtype="bool") /* ty=Tensor[(231), bool] */;
    %416 = cast(meta[relay.Constant][14] /* ty=Tensor[(231), bool] */, dtype="bool") /* ty=Tensor[(231), bool] */;
    %417 = %414.0;
    %418 = cast(%417, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %419 = cast(meta[relay.Constant][15] /* ty=Tensor[(260, 1), uint8] */, dtype="uint8") /* ty=Tensor[(260, 1), uint8] */;
    %420 = cast(%var_4428, dtype="float32") /* ty=Tensor[(286, 55), float32] */;
    %421 = reshape(%415, newshape=[7, 3, 11]) /* ty=Tensor[(7, 3, 11), bool] */;
    %422 = reshape(%416, newshape=[7, 3, 11]) /* ty=Tensor[(7, 3, 11), bool] */;
    %423 = reshape(%418, newshape=[1, 1573]) /* ty=Tensor[(1, 1573), float32] */;
    %424 = reshape(%419, newshape=[260]) /* ty=Tensor[(260), uint8] */;
    %425 = reshape(%420, newshape=[10, 1573]) /* ty=Tensor[(10, 1573), float32] */;
    %426 = @func_3502(%421, %422, %423, %424, %425) /* ty=(Tensor[(7, 3, 11), uint16], Tensor[(260), int64], Tensor[(260), uint8], Tensor[(10, 1573), int16], Tensor[(11, 11, 13), float32]) */;
    %427 = cast(%417, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %428 = reshape(%427, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
    %429 = @func_1374(%428) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), bool]) */;
    %430 = cast(%var_4428, dtype="float64") /* ty=Tensor[(286, 55), float64] */;
    %431 = %429.0;
    %432 = cast(%431, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %433 = cast(meta[relay.Constant][15] /* ty=Tensor[(260, 1), uint8] */, dtype="uint8") /* ty=Tensor[(260, 1), uint8] */;
    %434 = reshape(%432, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
    %435 = reshape(%433, newshape=[260]) /* ty=Tensor[(260), uint8] */;
    %436 = @func_2463(%434, %435) /* ty=(Tensor[(11, 11, 13), bool], Tensor[(260), int64], Tensor[(4, 5, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(1, 14, 14), float32], Tensor[(864), int16], Tensor[(11, 11, 13), float64]) */;
    %437 = cast(meta[relay.Constant][16] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %438 = reshape(%437, newshape=[416]) /* ty=Tensor[(416), uint64] */;
    %439 = @func_3760(%438) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64], Tensor[(416), uint64], float64) */;
    %440 = %426.0;
    %441 = acosh(%430) /* ty=Tensor[(286, 55), float64] */;
    %442 = %436.0;
    %443 = %439.2;
    (%417, %440, meta[relay.Constant][14] /* ty=Tensor[(231), bool] */, meta[relay.Constant][15] /* ty=Tensor[(260, 1), uint8] */, %431, %441, %442, %443, meta[relay.Constant][16] /* ty=Tensor[(416), uint64] */)
  };
  %444(%var_4472) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(7, 3, 11), uint16], Tensor[(231), bool], Tensor[(260, 1), uint8], Tensor[(11, 11, 13), float32], Tensor[(286, 55), float64], Tensor[(11, 11, 13), bool], Tensor[(416), uint64], Tensor[(416), uint64]) */
}

def @func_404(%var_391: uint32, %var_397: Tensor[(196), float32]) -> (Tensor[(2, 2, 14), uint32], Tensor[(1, 14, 14), float32], Tensor[(196), float64]) {
  %445 = cast(%var_391, dtype="uint32") /* ty=uint32 */;
  %446 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 2, 14), uint32] */, dtype="uint32") /* ty=Tensor[(2, 2, 14), uint32] */;
  %447 = cast(%var_397, dtype="float32") /* ty=Tensor[(196), float32] */;
  %448 = reshape(%447, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %449 = @func_239(%448) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(16, 8, 7), float64]) */;
  %450 = cast(%var_397, dtype="float64") /* ty=Tensor[(196), float64] */;
  %451 = bitwise_or(%445, %446) /* ty=Tensor[(2, 2, 14), uint32] */;
  %452 = %449.0;
  %453 = cosh(%450) /* ty=Tensor[(196), float64] */;
  (%451, %452, %453)
}

def @func_3715(%var_3713: Tensor[(1, 11, 10), float64], %var_3714: Tensor[(1, 11, 10), float64]) -> (Tensor[(?, 11, 10), float64], Tensor[(1, 11, 10), float32]) {
  %461 = fn (%var_3682: Tensor[(1, 11, 10), float64], %var_3683: Tensor[(1, 11, 10), float64]) -> (Tensor[(?, 11, 10), float64], Tensor[(1, 11, 10), float32]) {
    %454 = cast(%var_3683, dtype="float64") /* ty=Tensor[(1, 11, 10), float64] */;
    %455 = shape_of(%var_3682, dtype="int32") /* ty=Tensor[(3), int32] */;
    %456 = cast(%var_3682, dtype="float64") /* ty=Tensor[(1, 11, 10), float64] */;
    %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %458 = cast(%var_3682, dtype="float32") /* ty=Tensor[(1, 11, 10), float32] */;
    %459 = divide(%456, %457) /* ty=Tensor[(?, 11, 10), float64] */;
    %460 = rsqrt(%458) /* ty=Tensor[(1, 11, 10), float32] */;
    (%459, %460)
  };
  %461(%var_3713, %var_3714) /* ty=(Tensor[(?, 11, 10), float64], Tensor[(1, 11, 10), float32]) */
}

def @func_4986() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) {
  @func_4984() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */
}

def @func_5998() -> (Tensor[(11, 11, 13), float32],) {
  @func_5996() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_5555(%var_5535: Tensor[(5, 1, 8), float32]) -> Tensor[(5, 1, 8), float32] {
  %462 = cast(%var_5535, dtype="float32") /* ty=Tensor[(5, 1, 8), float32] */;
  asin(%462) /* ty=Tensor[(5, 1, 8), float32] */
}

def @func_4735() -> (Tensor[(11, 11, 13), float32],) {
  %463 = @func_1082() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %464 = %463.0;
  (%464,)
}

def @func_5500(%var_5492: Tensor[(288), float32]) -> (Tensor[(11, 11, 13), float64], Tensor[(11, 10, 6), float64], Tensor[(9, 8, 4), float32], Tensor[(288), float32]) {
  %465 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %466 = %465.0;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %468 = cast(%var_5492, dtype="float32") /* ty=Tensor[(288), float32] */;
  %469 = cast(%var_5492, dtype="float32") /* ty=Tensor[(288), float32] */;
  %470 = reshape(%468, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %471 = reshape(%469, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %472 = @func_2120() /* ty=Tensor[(11, 11, 13), float64] */;
  %473 = exp(%467) /* ty=Tensor[(11, 10, 6), float64] */;
  %474 = @func_3133(%470, %471) /* ty=Tensor[(9, 8, 4), float32] */;
  (%472, %473, %474, %var_5492)
}

def @func_2221() -> Tensor[(11, 11, 13), float32] {
  %475 = @func_2049() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %475.0
}

def @func_5168() -> Tensor[(11, 11, 13), float32] {
  @func_5166() /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_7052() -> (Tensor[(11, 9, 7), bool],) {
  %476 = @func_6552() /* ty=(Tensor[(11, 9, 7), float64],) */;
  %477 = %476.0;
  %478 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 9, 7), float64] */, dtype="bool") /* ty=Tensor[(11, 9, 7), bool] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%477, dtype="bool") /* ty=Tensor[(11, 9, 7), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %482 = less(%480, %481) /* ty=Tensor[(11, 9, 7), bool] */;
  (%482,)
}

def @func_802(%var_776: Tensor[(9, 16, 6), int16], %var_777: Tensor[(9, 16, 6), int16]) -> (Tensor[(9, 16, 6), int16], Tensor[(1, 14, 14), float32], Tensor[(196), float32]) {
  %483 = cast(%var_777, dtype="int16") /* ty=Tensor[(9, 16, 6), int16] */;
  %484 = shape_of(%var_776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%var_776, dtype="int16") /* ty=Tensor[(9, 16, 6), int16] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %487 = cast(meta[relay.Constant][19] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %488 = reshape(%487, newshape=[1, 14, 14]) /* ty=Tensor[(1, 14, 14), float32] */;
  %489 = @func_37(%488) /* ty=(Tensor[(1, 14, 14), float32],) */;
  %490 = bitwise_and(%485, %486) /* ty=Tensor[(9, 16, 6), int16] */;
  %491 = %489.0;
  (%490, %491, meta[relay.Constant][19] /* ty=Tensor[(196), float32] */)
}

def @func_6943(%var_6909: Tensor[(416), uint64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64], Tensor[(416), uint64], Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32]) {
  %492 = @func_2733() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %493 = cast(%var_6909, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %494 = reshape(%493, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %495 = @func_1640(%494) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64]) */;
  %496 = @func_1082() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %497 = %492.0;
  %498 = @func_3006() /* ty=Tensor[(11, 11, 13), float32] */;
  %499 = %495.2;
  %500 = @func_5125() /* ty=Tensor[(11, 10, 6), float64] */;
  %501 = %496.0;
  (%497, %498, %499, %var_6909, %500, %501)
}

def @func_5111(%var_5066: Tensor[(54, 14), uint64], %var_5067: Tensor[(110), float64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(54, 14), uint64], Tensor[(110), bool]) {
  %502 = @func_2876() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %503 = cast(%var_5066, dtype="uint64") /* ty=Tensor[(54, 14), uint64] */;
  %504 = cast(%var_5067, dtype="float64") /* ty=Tensor[(110), float64] */;
  %505 = reshape(%503, newshape=[756]) /* ty=Tensor[(756), uint64] */;
  %506 = reshape(%504, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %507 = @func_4078(%505, %506) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(12, 7, 9), bool], Tensor[(756), uint64], Tensor[(1, 11, 10), float32], Tensor[(12, 7, 9), bool], Tensor[(11, 11, 13), float32], Tensor[(110), int32], Tensor[(11, 11, 13), float32]) */;
  %508 = cast(meta[relay.Constant][20] /* ty=Tensor[(110), float64] */, dtype="bool") /* ty=Tensor[(110), bool] */;
  %509 = shape_of(%var_5067, dtype="int32") /* ty=Tensor[(1), int32] */;
  %510 = cast(%var_5067, dtype="bool") /* ty=Tensor[(110), bool] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?), bool] */;
  %512 = %502.0;
  %513 = %507.6;
  %514 = less(%510, %511) /* ty=Tensor[(110), bool] */;
  (%512, %513, %var_5066, %514)
}

def @func_3078() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  @func_3076() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */
}

def @func_2370(%var_2361: Tensor[(4, 16, 15), uint32]) -> (Tensor[(4, 16, 15), uint32],) {
  %515 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 16, 15), uint32] */, dtype="uint32") /* ty=Tensor[(4, 16, 15), uint32] */;
  %516 = shape_of(%var_2361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%var_2361, dtype="uint32") /* ty=Tensor[(4, 16, 15), uint32] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %519 = logical_xor(%517, %518) /* ty=Tensor[(4, 16, 15), uint32] */;
  (%519,)
}

def @func_2498() -> Tensor[(11, 11, 13), float32] {
  %521 = fn () -> Tensor[(11, 11, 13), float32] {
    %520 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %520.0
  };
  %521() /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_3076() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %522 = @func_1941() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %523 = @func_1829() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %524 = %522.0;
  %525 = %523.1;
  (%524, %525)
}

def @func_3760(%var_3744: Tensor[(416), uint64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64], Tensor[(416), uint64], float64) {
  %526 = @func_1829() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %527 = cast(%var_3744, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %528 = reshape(%527, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %529 = @func_1640(%528) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64]) */;
  %530 = cast(-2.55737f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %531 = cast(%var_3744, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %532 = reshape(%530, newshape=[]) /* ty=float64 */;
  %533 = reshape(%531, newshape=[416]) /* ty=Tensor[(416), uint64] */;
  %534 = @func_2341(%532, %533) /* ty=(Tensor[(6, 10, 14), float64], Tensor[(196), float32], Tensor[(168), int32], Tensor[(32), uint8], Tensor[(416), uint64], Tensor[(416), uint64], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */;
  %535 = %526.0;
  %536 = %529.0;
  %537 = %534.5;
  (%535, %536, %var_3744, %537, -2.55737f64 /* ty=float64 */)
}

def @func_6809() -> Tensor[(11, 11, 13), float32] {
  %538 = @func_6499() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float64]) */;
  %538.0
}

def @func_4855() -> (Tensor[(11, 11, 13), float32],) {
  %541 = fn () -> (Tensor[(11, 11, 13), float32],) {
    %539 = @func_1941() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %540 = %539.0;
    (%540,)
  };
  %541() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_806(%var_804: Tensor[(9, 16, 6), int16], %var_805: Tensor[(9, 16, 6), int16]) -> (Tensor[(9, 16, 6), int16], Tensor[(1, 14, 14), float32], Tensor[(196), float32]) {
  @func_802(%var_804, %var_805) /* ty=(Tensor[(9, 16, 6), int16], Tensor[(1, 14, 14), float32], Tensor[(196), float32]) */
}

def @func_1942() -> (Tensor[(11, 11, 13), float32],) {
  %545 = fn () -> (Tensor[(11, 11, 13), float32],) {
    %542 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
    %543 = cast(%542, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %544 = atanh(%543) /* ty=Tensor[(11, 11, 13), float32] */;
    (%544,)
  };
  %545() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_4899() -> (Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %554 = fn () -> (Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
    %546 = @func_1071() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %547 = %546.0;
    %548 = cast(%547, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
    %549 = @func_2485() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %550 = @func_1972() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %551 = erf(%548) /* ty=Tensor[(11, 11, 13), float64] */;
    %552 = %549.0;
    %553 = %550.0;
    (%551, %552, %553)
  };
  %554() /* ty=(Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */
}

def @func_6523(%var_6521: Tensor[(11, 10, 6), float64]) -> (Tensor[(11, 10, 6), bool],) {
  @func_6520(%var_6521) /* ty=(Tensor[(11, 10, 6), bool],) */
}

def @func_5204() -> (Tensor[(11, 11, 13), float32],) {
  @func_5202() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_5910(%var_5905: Tensor[(14, 8, 5), float32]) -> (Tensor[(14, 8, 5), float32],) {
  %555 = cast(%var_5905, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %556 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(14, 8, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %559 = floor_mod(%557, %558) /* ty=Tensor[(14, 8, 5), float32] */;
  (%559,)
}

def @func_6520(%var_6511: Tensor[(11, 10, 6), float64]) -> (Tensor[(11, 10, 6), bool],) {
  %560 = @func_3122() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %561 = %560.0;
  %562 = cast(%var_6511, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%561, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %566 = less_equal(%564, %565) /* ty=Tensor[(11, 10, 6), bool] */;
  (%566,)
}

def @func_5746(%var_5744: Tensor[(11, 10, 6), float64], %var_5745: Tensor[(11, 10, 6), float64]) -> (Tensor[(11, 10, 6), bool], Tensor[(11, 10, 6), uint16], Tensor[(11, 10, 6), float32]) {
  %584 = fn (%var_5681: Tensor[(11, 10, 6), float64], %var_5715: Tensor[(11, 10, 6), float64]) -> (Tensor[(11, 10, 6), bool], Tensor[(11, 10, 6), uint16], Tensor[(11, 10, 6), float32]) {
    %567 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
    %568 = %567.0;
    %569 = cast(%var_5681, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
    %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
    %571 = cast(%568, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
    %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %573 = cast(%var_5681, dtype="uint16") /* ty=Tensor[(11, 10, 6), uint16] */;
    %574 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
    %575 = cast(%568, dtype="uint16") /* ty=Tensor[(11, 10, 6), uint16] */;
    %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %577 = cast(%var_5715, dtype="float32") /* ty=Tensor[(11, 10, 6), float32] */;
    %578 = shape_of(%var_5681, dtype="int32") /* ty=Tensor[(3), int32] */;
    %579 = cast(%var_5681, dtype="float32") /* ty=Tensor[(11, 10, 6), float32] */;
    %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %581 = logical_or(%571, %572) /* ty=Tensor[(11, 10, 6), bool] */;
    %582 = subtract(%575, %576) /* ty=Tensor[(11, 10, 6), uint16] */;
    %583 = floor_mod(%579, %580) /* ty=Tensor[(11, 10, 6), float32] */;
    (%581, %582, %583)
  };
  %584(%var_5744, %var_5745) /* ty=(Tensor[(11, 10, 6), bool], Tensor[(11, 10, 6), uint16], Tensor[(11, 10, 6), float32]) */
}

def @func_6621(%var_6620: Tensor[(360), float32]) -> (Tensor[(11, 10, 6), uint8], Tensor[(12, 6, 5), float32], Tensor[(360), float32], Tensor[(1, 60), float32]) {
  %593 = fn (%var_6611: Tensor[(360), float32]) -> (Tensor[(11, 10, 6), uint8], Tensor[(12, 6, 5), float32], Tensor[(360), float32], Tensor[(1, 60), float32]) {
    %585 = @func_3367() /* ty=(Tensor[(11, 10, 6), uint8],) */;
    %586 = cast(%var_6611, dtype="float32") /* ty=Tensor[(360), float32] */;
    %587 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 60), float32] */, dtype="float32") /* ty=Tensor[(1, 60), float32] */;
    %588 = reshape(%586, newshape=[12, 6, 5]) /* ty=Tensor[(12, 6, 5), float32] */;
    %589 = reshape(%587, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %590 = @func_5944(%588, %589) /* ty=(Tensor[(12, 6, 5), float32], Tensor[(1, 14, 14), float32], Tensor[(60), float32]) */;
    %591 = %585.0;
    %592 = %590.0;
    (%591, %592, %var_6611, meta[relay.Constant][23] /* ty=Tensor[(1, 60), float32] */)
  };
  %593(%var_6620) /* ty=(Tensor[(11, 10, 6), uint8], Tensor[(12, 6, 5), float32], Tensor[(360), float32], Tensor[(1, 60), float32]) */
}

def @func_6946(%var_6944: Tensor[(416), uint64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64], Tensor[(416), uint64], Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32]) {
  @func_6943(%var_6944) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64], Tensor[(416), uint64], Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32]) */
}

def @func_888(%var_886: uint8, %var_887: Tensor[(8, 1, 4), uint8]) -> (Tensor[(196), float32], Tensor[(196), float32], Tensor[(196), float32], Tensor[(60), float32], Tensor[(8, ?, 4), bool]) {
  %610 = fn (%var_836: uint8, %var_837: Tensor[(8, 1, 4), uint8]) -> (Tensor[(196), float32], Tensor[(196), float32], Tensor[(196), float32], Tensor[(60), float32], Tensor[(8, ?, 4), bool]) {
    %594 = cast(meta[relay.Constant][24] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
    %595 = reshape(%594, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %596 = @func_239(%595) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(16, 8, 7), float64]) */;
    %597 = cast(meta[relay.Constant][25] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %598 = reshape(%597, newshape=[3, 5, 4]) /* ty=Tensor[(3, 5, 4), float32] */;
    %599 = @func_478(%598) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(3, 5, 4), float64]) */;
    %600 = cast(%var_836, dtype="uint8") /* ty=uint8 */;
    %601 = cast(%var_837, dtype="uint8") /* ty=Tensor[(8, 1, 4), uint8] */;
    %602 = bitwise_and(%600, %601) /* ty=Tensor[(8, 1, 4), uint8] */;
    %603 = cast(%var_837, dtype="bool") /* ty=Tensor[(8, 1, 4), bool] */;
    %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
    %605 = cast(%602, dtype="bool") /* ty=Tensor[(8, 1, 4), bool] */;
    %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %607 = %596.1;
    %608 = %599.1;
    %609 = less(%605, %606) /* ty=Tensor[(8, ?, 4), bool] */;
    (%607, meta[relay.Constant][24] /* ty=Tensor[(196), float32] */, %608, meta[relay.Constant][25] /* ty=Tensor[(60), float32] */, %609)
  };
  %610(%var_886, %var_887) /* ty=(Tensor[(196), float32], Tensor[(196), float32], Tensor[(196), float32], Tensor[(60), float32], Tensor[(8, ?, 4), bool]) */
}

def @func_5558(%var_5556: Tensor[(5, 1, 8), float32]) -> Tensor[(5, 1, 8), float32] {
  @func_5555(%var_5556) /* ty=Tensor[(5, 1, 8), float32] */
}

def @func_37(%var_24: Tensor[(1, 14, 14), float32]) -> (Tensor[(1, 14, 14), float32],) {
  %611 = cast(%var_24, dtype="float32") /* ty=Tensor[(1, 14, 14), float32] */;
  %612 = asinh(%611) /* ty=Tensor[(1, 14, 14), float32] */;
  (%612,)
}

def @func_2655(%var_2653: Tensor[(16, 1, 6), float32]) -> (Tensor[(16, 1, 6), float32], Tensor[(11, 11, 13), bool], Tensor[(1573), float32], Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32]) {
  @func_2652(%var_2653) /* ty=(Tensor[(16, 1, 6), float32], Tensor[(11, 11, 13), bool], Tensor[(1573), float32], Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32]) */
}

def @func_3502(%var_3457: Tensor[(7, 3, 11), bool], %var_3458: Tensor[(7, 3, 11), bool], %var_3485: Tensor[(1, 1573), float32], %var_3486: Tensor[(260), uint8], %var_3488: Tensor[(10, 1573), float32]) -> (Tensor[(7, 3, 11), uint16], Tensor[(260), int64], Tensor[(260), uint8], Tensor[(10, 1573), int16], Tensor[(11, 11, 13), float32]) {
  %613 = cast(%var_3458, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
  %614 = shape_of(%var_3457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%var_3457, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = logical_or(%615, %616) /* ty=Tensor[(7, 3, 11), bool] */;
  %618 = cast(%617, dtype="uint64") /* ty=Tensor[(7, 3, 11), uint64] */;
  %619 = shape_of(%var_3457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%var_3457, dtype="uint64") /* ty=Tensor[(7, 3, 11), uint64] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %622 = subtract(%620, %621) /* ty=Tensor[(7, 3, 11), uint64] */;
  %623 = cast(%var_3458, dtype="uint16") /* ty=Tensor[(7, 3, 11), uint16] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%622, dtype="uint16") /* ty=Tensor[(7, 3, 11), uint16] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %627 = cast(%var_3485, dtype="float32") /* ty=Tensor[(1, 1573), float32] */;
  %628 = cast(%var_3486, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %629 = reshape(%627, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %630 = reshape(%628, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %631 = @func_2463(%629, %630) /* ty=(Tensor[(11, 11, 13), bool], Tensor[(260), int64], Tensor[(4, 5, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(1, 14, 14), float32], Tensor[(864), int16], Tensor[(11, 11, 13), float64]) */;
  %632 = cast(%var_3485, dtype="int16") /* ty=Tensor[(1, 1573), int16] */;
  %633 = cast(%var_3488, dtype="int16") /* ty=Tensor[(10, 1573), int16] */;
  %634 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %635 = maximum(%625, %626) /* ty=Tensor[(7, 3, 11), uint16] */;
  %636 = %631.1;
  %637 = bitwise_and(%632, %633) /* ty=Tensor[(10, 1573), int16] */;
  %638 = %634.0;
  (%635, %636, %var_3486, %637, %638)
}

def @func_3509(%var_3504: Tensor[(7, 3, 11), bool], %var_3505: Tensor[(7, 3, 11), bool], %var_3506: Tensor[(1, 1573), float32], %var_3507: Tensor[(260), uint8], %var_3508: Tensor[(10, 1573), float32]) -> (Tensor[(7, 3, 11), uint16], Tensor[(260), int64], Tensor[(260), uint8], Tensor[(10, 1573), int16], Tensor[(11, 11, 13), float32]) {
  @func_3502(%var_3504, %var_3505, %var_3506, %var_3507, %var_3508) /* ty=(Tensor[(7, 3, 11), uint16], Tensor[(260), int64], Tensor[(260), uint8], Tensor[(10, 1573), int16], Tensor[(11, 11, 13), float32]) */
}

def @func_5455() -> (Tensor[(11, 11, 13), float32],) {
  @func_5453() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_3275() -> (Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32], Tensor[(4, 5, 13), bool], Tensor[(260), uint8]) {
  @func_3273() /* ty=(Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32], Tensor[(4, 5, 13), bool], Tensor[(260), uint8]) */
}

def @func_1082() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %639 = @func_1071() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %640 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %641 = %639.0;
  (%640, %641)
}

def @func_7054() -> (Tensor[(11, 9, 7), bool],) {
  @func_7052() /* ty=(Tensor[(11, 9, 7), bool],) */
}

def @func_955() -> (Tensor[(11, 11, 13), float32],) {
  %644 = fn () -> (Tensor[(11, 11, 13), float32],) {
    %642 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %643 = sin(%642) /* ty=Tensor[(11, 11, 13), float32] */;
    (%643,)
  };
  %644() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_7076() -> Tensor[(11, 11, 13), float32] {
  %646 = fn () -> Tensor[(11, 11, 13), float32] {
    %645 = @func_3076() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
    %645.0
  };
  %646() /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_1696(%var_1671: Tensor[(1183), float64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(196), float32], Tensor[(49, 4), float64], Tensor[(1183), int32]) {
  %647 = cast(meta[relay.Constant][27] /* ty=Tensor[(49, 4), float32] */, dtype="float32") /* ty=Tensor[(49, 4), float32] */;
  %648 = reshape(%647, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %649 = @func_239(%648) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(16, 8, 7), float64]) */;
  %650 = cast(meta[relay.Constant][27] /* ty=Tensor[(49, 4), float32] */, dtype="float64") /* ty=Tensor[(49, 4), float64] */;
  %651 = cast(%var_1671, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %652 = reshape(%651, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float64] */;
  %653 = @func_1492(%652) /* ty=(Tensor[(13, 7, 13), float64],) */;
  %654 = %653.0;
  %655 = cast(%654, dtype="int32") /* ty=Tensor[(13, 7, 13), int32] */;
  %656 = shape_of(%var_1671, dtype="int32") /* ty=Tensor[(1), int32] */;
  %657 = cast(%var_1671, dtype="int32") /* ty=Tensor[(1183), int32] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?), int32] */;
  %659 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  %660 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %661 = %649.1;
  %662 = exp(%650) /* ty=Tensor[(49, 4), float64] */;
  %663 = subtract(%657, %658) /* ty=Tensor[(1183), int32] */;
  (%659, %660, %661, %662, %663)
}

def @func_2181(%var_2135: int32, %var_2136: Tensor[(6, 14, 2), int32], %var_2161: Tensor[(32, 1), uint8]) -> (Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(6, 14, 2), uint16], Tensor[(60), float32], Tensor[(32, 1), uint8], Tensor[(11, 11, 13), float32]) {
  %664 = cast(%var_2135, dtype="uint32") /* ty=uint32 */;
  %665 = cast(meta[relay.Constant][28] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %666 = reshape(%664, newshape=[]) /* ty=uint32 */;
  %667 = reshape(%665, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %668 = @func_404(%666, %667) /* ty=(Tensor[(2, 2, 14), uint32], Tensor[(1, 14, 14), float32], Tensor[(196), float64]) */;
  %669 = cast(%var_2135, dtype="int32") /* ty=int32 */;
  %670 = cast(%var_2136, dtype="int32") /* ty=Tensor[(6, 14, 2), int32] */;
  %671 = left_shift(%669, %670) /* ty=Tensor[(6, 14, 2), int32] */;
  %672 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 14, 2), int32] */, dtype="uint16") /* ty=Tensor[(6, 14, 2), uint16] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="uint16") /* ty=Tensor[(6, 14, 2), uint16] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %676 = cast(%var_2135, dtype="uint8") /* ty=uint8 */;
  %677 = cast(%var_2161, dtype="uint8") /* ty=Tensor[(32, 1), uint8] */;
  %678 = reshape(%676, newshape=[]) /* ty=uint8 */;
  %679 = reshape(%677, newshape=[8, 1, 4]) /* ty=Tensor[(8, 1, 4), uint8] */;
  %680 = @func_885(%678, %679) /* ty=(Tensor[(196), float32], Tensor[(196), float32], Tensor[(196), float32], Tensor[(60), float32], Tensor[(8, ?, 4), bool]) */;
  %681 = @func_1966() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %682 = %668.1;
  %683 = bitwise_and(%674, %675) /* ty=Tensor[(6, 14, 2), uint16] */;
  %684 = %680.3;
  %685 = %681.0;
  (%682, meta[relay.Constant][28] /* ty=Tensor[(196), float32] */, %683, %684, %var_2161, %685)
}

def @func_1130() -> Tensor[(11, 11, 13), float32] {
  %686 = @func_1082() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %686.0
}

def @func_1198(%var_1196: Tensor[(11, 11, 13), float32]) -> (Tensor[(11, 11, 13), bool],) {
  @func_1195(%var_1196) /* ty=(Tensor[(11, 11, 13), bool],) */
}

def @func_1409() -> Tensor[(11, 11, 13), float32] {
  %690 = fn () -> Tensor[(11, 11, 13), float32] {
    %687 = @func_1071() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %688 = %687.0;
    %689 = cast(%688, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    sigmoid(%689) /* ty=Tensor[(11, 11, 13), float32] */
  };
  %690() /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_1831() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  @func_1829() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */
}

def @func_241(%var_240: Tensor[(196), float32]) -> (Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(16, 8, 7), float64]) {
  %709 = fn (%var_183: Tensor[(196), float32]) -> (Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(16, 8, 7), float64]) {
    %691 = cast(%var_183, dtype="float32") /* ty=Tensor[(196), float32] */;
    %692 = reshape(%691, newshape=[1, 14, 14]) /* ty=Tensor[(1, 14, 14), float32] */;
    %693 = @func_37(%692) /* ty=(Tensor[(1, 14, 14), float32],) */;
    %694 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 8, 7), float32] */, dtype="float32") /* ty=Tensor[(16, 8, 7), float32] */;
    %695 = cosh(%694) /* ty=Tensor[(16, 8, 7), float32] */;
    %696 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 8, 7), float32] */, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
    %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
    %698 = cast(%695, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
    %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %700 = logical_or(%698, %699) /* ty=Tensor[(16, 8, 7), bool] */;
    %701 = cast(%695, dtype="int16") /* ty=Tensor[(16, 8, 7), int16] */;
    %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
    %703 = cast(%700, dtype="int16") /* ty=Tensor[(16, 8, 7), int16] */;
    %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %705 = multiply(%703, %704) /* ty=Tensor[(16, 8, 7), int16] */;
    %706 = cast(%705, dtype="float64") /* ty=Tensor[(16, 8, 7), float64] */;
    %707 = %693.0;
    %708 = rsqrt(%706) /* ty=Tensor[(16, 8, 7), float64] */;
    (%707, %var_183, %708)
  };
  %709(%var_240) /* ty=(Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(16, 8, 7), float64]) */
}

def @func_4081(%var_4079: Tensor[(756), uint64], %var_4080: Tensor[(110), float64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(12, 7, 9), bool], Tensor[(756), uint64], Tensor[(1, 11, 10), float32], Tensor[(12, 7, 9), bool], Tensor[(11, 11, 13), float32], Tensor[(110), int32], Tensor[(11, 11, 13), float32]) {
  %749 = fn (%var_3996: Tensor[(756), uint64], %var_4010: Tensor[(110), float64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(12, 7, 9), bool], Tensor[(756), uint64], Tensor[(1, 11, 10), float32], Tensor[(12, 7, 9), bool], Tensor[(11, 11, 13), float32], Tensor[(110), int32], Tensor[(11, 11, 13), float32]) {
    %710 = @func_1966() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %711 = cast(%var_3996, dtype="uint64") /* ty=Tensor[(756), uint64] */;
    %712 = cast(%var_3996, dtype="uint64") /* ty=Tensor[(756), uint64] */;
    %713 = reshape(%711, newshape=[12, 7, 9]) /* ty=Tensor[(12, 7, 9), uint64] */;
    %714 = reshape(%712, newshape=[12, 7, 9]) /* ty=Tensor[(12, 7, 9), uint64] */;
    %715 = cast(meta[relay.Constant][31] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
    %716 = cast(meta[relay.Constant][31] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
    %717 = reshape(%715, newshape=[1, 11, 10]) /* ty=Tensor[(1, 11, 10), float64] */;
    %718 = reshape(%716, newshape=[1, 11, 10]) /* ty=Tensor[(1, 11, 10), float64] */;
    %719 = @func_3712(%717, %718) /* ty=(Tensor[(?, 11, 10), float64], Tensor[(1, 11, 10), float32]) */;
    %720 = cast(%var_3996, dtype="uint64") /* ty=Tensor[(756), uint64] */;
    %721 = @func_3088(%713, %714) /* ty=Tensor[(12, 7, 9), bool] */;
    %722 = cast(%721, dtype="uint64") /* ty=Tensor[(12, 7, 9), uint64] */;
    %723 = reshape(%720, newshape=[12, 7, 9]) /* ty=Tensor[(12, 7, 9), uint64] */;
    %724 = reshape(%722, newshape=[12, 7, 9]) /* ty=Tensor[(12, 7, 9), uint64] */;
    %725 = @func_1778() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %726 = cast(%var_4010, dtype="int64") /* ty=Tensor[(110), int64] */;
    %727 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(110), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %728 = cast(meta[relay.Constant][31] /* ty=Tensor[(110), float64] */, dtype="int64") /* ty=Tensor[(110), int64] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?), int64] */;
    %730 = bitwise_and(%728, %729) /* ty=Tensor[(110), int64] */;
    %731 = cast(%730, dtype="float64") /* ty=Tensor[(110), float64] */;
    %732 = erf(%731) /* ty=Tensor[(110), float64] */;
    %733 = cast(meta[relay.Constant][32] /* ty=Tensor[(110), float64] */, dtype="int64") /* ty=Tensor[(110), int64] */;
    %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(1), int32] */;
    %735 = cast(%732, dtype="int64") /* ty=Tensor[(110), int64] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?), int64] */;
    %737 = right_shift(%735, %736) /* ty=Tensor[(110), int64] */;
    %738 = cast(%730, dtype="int32") /* ty=Tensor[(110), int32] */;
    %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(1), int32] */;
    %740 = cast(%737, dtype="int32") /* ty=Tensor[(110), int32] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?), int32] */;
    %742 = %710.0;
    %743 = @func_2221() /* ty=Tensor[(11, 11, 13), float32] */;
    %744 = %719.1;
    %745 = @func_3088(%723, %724) /* ty=Tensor[(12, 7, 9), bool] */;
    %746 = %725.0;
    %747 = bitwise_xor(%740, %741) /* ty=Tensor[(110), int32] */;
    %748 = @func_2221() /* ty=Tensor[(11, 11, 13), float32] */;
    (%742, %743, %721, %var_3996, %744, %745, %746, %747, %748)
  };
  %749(%var_4079, %var_4080) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(12, 7, 9), bool], Tensor[(756), uint64], Tensor[(1, 11, 10), float32], Tensor[(12, 7, 9), bool], Tensor[(11, 11, 13), float32], Tensor[(110), int32], Tensor[(11, 11, 13), float32]) */
}

def @func_4957(%var_4932: Tensor[(1, 5, 3), float64]) -> (Tensor[(?, 5, 3), float32], Tensor[(13, 7, 13), float64], Tensor[(1183), float64], Tensor[(11, 11, 13), bool], Tensor[(1573), float32]) {
  %750 = cast(%var_4932, dtype="float64") /* ty=Tensor[(1, 5, 3), float64] */;
  %751 = acos(%750) /* ty=Tensor[(1, 5, 3), float64] */;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(1, 5, 3), float32] */;
  %753 = shape_of(%var_4932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%var_4932, dtype="float32") /* ty=Tensor[(1, 5, 3), float32] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %756 = cast(meta[relay.Constant][33] /* ty=Tensor[(1183), float64] */, dtype="float64") /* ty=Tensor[(1183), float64] */;
  %757 = reshape(%756, newshape=[13, 7, 13]) /* ty=Tensor[(13, 7, 13), float64] */;
  %758 = @func_1492(%757) /* ty=(Tensor[(13, 7, 13), float64],) */;
  %759 = cast(meta[relay.Constant][34] /* ty=Tensor[(1573), float32] */, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %760 = reshape(%759, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %761 = @func_1195(%760) /* ty=(Tensor[(11, 11, 13), bool],) */;
  %762 = mod(%754, %755) /* ty=Tensor[(?, 5, 3), float32] */;
  %763 = %758.0;
  %764 = %761.0;
  (%762, %763, meta[relay.Constant][33] /* ty=Tensor[(1183), float64] */, %764, meta[relay.Constant][34] /* ty=Tensor[(1573), float32] */)
}

def @func_3123() -> (Tensor[(11, 10, 6), float64],) {
  %767 = fn () -> (Tensor[(11, 10, 6), float64],) {
    %765 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
    %766 = %765.0;
    (%766,)
  };
  %767() /* ty=(Tensor[(11, 10, 6), float64],) */
}

def @func_3763(%var_3761: Tensor[(416), uint64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64], Tensor[(416), uint64], float64) {
  @func_3760(%var_3761) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64], Tensor[(416), uint64], float64) */
}

def @func_2652(%var_2606: Tensor[(16, 1, 6), float32]) -> (Tensor[(16, 1, 6), float32], Tensor[(11, 11, 13), bool], Tensor[(1573), float32], Tensor[(11, 10, 6), float64], Tensor[(11, 11, 13), float32]) {
  %768 = cast(6.45177f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %769 = cast(%var_2606, dtype="float32") /* ty=Tensor[(16, 1, 6), float32] */;
  %770 = cast(meta[relay.Constant][35] /* ty=Tensor[(1573), float32] */, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %771 = reshape(%770, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
  %772 = @func_1195(%771) /* ty=(Tensor[(11, 11, 13), bool],) */;
  %773 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %774 = floor_divide(%768, %769) /* ty=Tensor[(16, 1, 6), float32] */;
  %775 = %772.0;
  %776 = %773.0;
  %777 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  (%774, %775, meta[relay.Constant][35] /* ty=Tensor[(1573), float32] */, %776, %777)
}

def @func_5411() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(960), uint32], Tensor[(960), uint32], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) {
  @func_5409() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(960), uint32], Tensor[(960), uint32], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */
}

def @func_1195(%var_1176: Tensor[(11, 11, 13), float32]) -> (Tensor[(11, 11, 13), bool],) {
  %778 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  %779 = cast(%var_1176, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%778, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %783 = equal(%781, %782) /* ty=Tensor[(11, 11, 13), bool] */;
  (%783,)
}

def @func_5996() -> (Tensor[(11, 11, 13), float32],) {
  %784 = @func_4819() /* ty=(Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), uint8], Tensor[(11, 11, 13), uint32], Tensor[(11, 11, 13), bool]) */;
  %785 = %784.1;
  (%785,)
}

def @func_6641() -> (Tensor[(11, 11, 13), float32],) {
  %786 = @func_1408() /* ty=Tensor[(11, 11, 13), float32] */;
  (%786,)
}

def @func_6157() -> (Tensor[(11, 11, 13), float32],) {
  %789 = fn () -> (Tensor[(11, 11, 13), float32],) {
    %787 = @func_1941() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %788 = %787.0;
    (%788,)
  };
  %789() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_2049() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) {
  %790 = @func_1082() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %791 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %792 = %790.0;
  %793 = %791.0;
  (%792, %793)
}

def @func_408(%var_406: uint32, %var_407: Tensor[(196), float32]) -> (Tensor[(2, 2, 14), uint32], Tensor[(1, 14, 14), float32], Tensor[(196), float64]) {
  @func_404(%var_406, %var_407) /* ty=(Tensor[(2, 2, 14), uint32], Tensor[(1, 14, 14), float32], Tensor[(196), float64]) */
}

def @func_6281(%var_6279: Tensor[(416), uint64], %var_6280: Tensor[(756), uint64]) -> (Tensor[(11, 11, 13), float32], float64, Tensor[(416), uint64], Tensor[(12, 7, 9), bool], Tensor[(756), uint64], Tensor[(11, 11, 13), bool]) {
  %811 = fn (%var_6262: Tensor[(416), uint64], %var_6267: Tensor[(756), uint64]) -> (Tensor[(11, 11, 13), float32], float64, Tensor[(416), uint64], Tensor[(12, 7, 9), bool], Tensor[(756), uint64], Tensor[(11, 11, 13), bool]) {
    %794 = @func_5334() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %795 = cast(%var_6262, dtype="uint64") /* ty=Tensor[(416), uint64] */;
    %796 = reshape(%795, newshape=[416]) /* ty=Tensor[(416), uint64] */;
    %797 = @func_3760(%796) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64], Tensor[(416), uint64], float64) */;
    %798 = cast(%var_6267, dtype="uint64") /* ty=Tensor[(756), uint64] */;
    %799 = cast(%var_6267, dtype="uint64") /* ty=Tensor[(756), uint64] */;
    %800 = reshape(%798, newshape=[12, 7, 9]) /* ty=Tensor[(12, 7, 9), uint64] */;
    %801 = reshape(%799, newshape=[12, 7, 9]) /* ty=Tensor[(12, 7, 9), uint64] */;
    %802 = %794.0;
    %803 = cast(%802, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %804 = cast(%802, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
    %805 = reshape(%803, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
    %806 = reshape(%804, newshape=[11, 11, 13]) /* ty=Tensor[(11, 11, 13), float32] */;
    %807 = @func_1556(%805, %806) /* ty=(Tensor[(11, 11, 13), bool], Tensor[(11, 11, 13), int64], Tensor[(11, 11, 13), float64], Tensor[(11, 11, 13), uint64]) */;
    %808 = %797.4;
    %809 = @func_3088(%800, %801) /* ty=Tensor[(12, 7, 9), bool] */;
    %810 = %807.0;
    (%802, %808, %var_6262, %809, %var_6267, %810)
  };
  %811(%var_6279, %var_6280) /* ty=(Tensor[(11, 11, 13), float32], float64, Tensor[(416), uint64], Tensor[(12, 7, 9), bool], Tensor[(756), uint64], Tensor[(11, 11, 13), bool]) */
}

def @func_5903() -> (Tensor[(11, 11, 13), float32],) {
  %814 = fn () -> (Tensor[(11, 11, 13), float32],) {
    %812 = @func_2733() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %813 = %812.0;
    (%813,)
  };
  %814() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @main(%var_7102: Tensor[(11, 7, 10), uint32], %var_7103: Tensor[(11, 7, 10), uint32], %var_7109: Tensor[(756), uint64]) -> (Tensor[(11, 7, 10), uint32], Tensor[(11, 11, 13), float32], Tensor[(756), uint64], Tensor[(110), float64], Tensor[(11, 7, 10), float32], Tensor[(11, 7, 10), float32]) {
  %815 = cast(%var_7103, dtype="uint32") /* ty=Tensor[(11, 7, 10), uint32] */;
  %816 = shape_of(%var_7102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%var_7102, dtype="uint32") /* ty=Tensor[(11, 7, 10), uint32] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %819 = cast(%var_7109, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %820 = cast(meta[relay.Constant][36] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %821 = reshape(%819, newshape=[756]) /* ty=Tensor[(756), uint64] */;
  %822 = reshape(%820, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %823 = @func_4081(%821, %822) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(12, 7, 9), bool], Tensor[(756), uint64], Tensor[(1, 11, 10), float32], Tensor[(12, 7, 9), bool], Tensor[(11, 11, 13), float32], Tensor[(110), int32], Tensor[(11, 11, 13), float32]) */;
  %824 = cast(%var_7102, dtype="float64") /* ty=Tensor[(11, 7, 10), float64] */;
  %825 = acosh(%824) /* ty=Tensor[(11, 7, 10), float64] */;
  %826 = cast(%825, dtype="float64") /* ty=Tensor[(11, 7, 10), float64] */;
  %827 = asin(%826) /* ty=Tensor[(11, 7, 10), float64] */;
  %828 = cast(%827, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %829 = cast(%827, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %830 = subtract(%817, %818) /* ty=Tensor[(11, 7, 10), uint32] */;
  %831 = %823.6;
  %832 = log2(%828) /* ty=Tensor[(11, 7, 10), float32] */;
  %833 = cos(%829) /* ty=Tensor[(11, 7, 10), float32] */;
  (%830, %831, %var_7109, meta[relay.Constant][36] /* ty=Tensor[(110), float64] */, %832, %833)
}

def @func_1750() -> (Tensor[(11, 11, 13), float32],) {
  %836 = fn () -> (Tensor[(11, 11, 13), float32],) {
    %834 = @func_1082() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
    %835 = %834.1;
    (%835,)
  };
  %836() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_1968() -> (Tensor[(11, 11, 13), float32],) {
  @func_1966() /* ty=(Tensor[(11, 11, 13), float32],) */
}

def @func_3445() -> (Tensor[(11, 11, 13), float32], Tensor[(91, 1), float64], Tensor[(416), float32]) {
  %837 = @func_1749() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %838 = cast(meta[relay.Constant][37] /* ty=Tensor[(91, 1), float64] */, dtype="float64") /* ty=Tensor[(91, 1), float64] */;
  %839 = reshape(%838, newshape=[13, 7]) /* ty=Tensor[(13, 7), float64] */;
  %840 = @func_2820(%839) /* ty=(Tensor[(196), float64], Tensor[(196), float32], Tensor[(196), float32], Tensor[(16, 2), uint8], Tensor[(11, 11, 13), bool], Tensor[(16, 13, 2), uint64], Tensor[(416), uint64], Tensor[(7, 13, 1), float64], Tensor[(13, 7), float64]) */;
  %841 = %840.6;
  %842 = cast(%841, dtype="float32") /* ty=Tensor[(416), float32] */;
  %843 = %837.0;
  %844 = log(%842) /* ty=Tensor[(416), float32] */;
  (%843, meta[relay.Constant][37] /* ty=Tensor[(91, 1), float64] */, %844)
}

def @func_7020(%var_7018: Tensor[(98, 2), float32], %var_7019: Tensor[(1, 16, 2), uint32]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(196), float64], Tensor[(98, 2), float32], Tensor[(11, 11, 13), float32], Tensor[(312), float64], Tensor[(1, 16, 2), float64]) {
  %864 = fn (%var_6984: Tensor[(98, 2), float32], %var_6995: Tensor[(1, 16, 2), uint32]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(196), float64], Tensor[(98, 2), float32], Tensor[(11, 11, 13), float32], Tensor[(312), float64], Tensor[(1, 16, 2), float64]) {
    %845 = @func_3935() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(96), float32], Tensor[(11, 10, 6), int16]) */;
    %846 = @func_1966() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %847 = @func_3646() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(2, 2, 14), uint32], uint32, Tensor[(196), float32]) */;
    %848 = %847.2;
    %849 = cast(%848, dtype="uint32") /* ty=uint32 */;
    %850 = cast(%var_6984, dtype="float32") /* ty=Tensor[(98, 2), float32] */;
    %851 = reshape(%849, newshape=[]) /* ty=uint32 */;
    %852 = reshape(%850, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %853 = @func_404(%851, %852) /* ty=(Tensor[(2, 2, 14), uint32], Tensor[(1, 14, 14), float32], Tensor[(196), float64]) */;
    %854 = cast(meta[relay.Constant][38] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
    %855 = reshape(%854, newshape=[13, 6, 4]) /* ty=Tensor[(13, 6, 4), float64] */;
    %856 = @func_6051(%855) /* ty=(Tensor[(13, 6, 4), float64], Tensor[(11, 11, 13), float32], Tensor[(416), float32], Tensor[(11, 11, 13), float32]) */;
    %857 = cast(%848, dtype="float64") /* ty=float64 */;
    %858 = cast(%var_6995, dtype="float64") /* ty=Tensor[(1, 16, 2), float64] */;
    %859 = %845.0;
    %860 = %846.0;
    %861 = %853.2;
    %862 = %856.3;
    %863 = floor_divide(%857, %858) /* ty=Tensor[(1, 16, 2), float64] */;
    (%859, %860, %861, %var_6984, %862, meta[relay.Constant][38] /* ty=Tensor[(312), float64] */, %863)
  };
  %864(%var_7018, %var_7019) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(196), float64], Tensor[(98, 2), float32], Tensor[(11, 11, 13), float32], Tensor[(312), float64], Tensor[(1, 16, 2), float64]) */
}

def @func_1643(%var_1641: Tensor[(416), uint64]) -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64]) {
  @func_1640(%var_1641) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(416), uint64]) */
}

def @func_2820(%var_2817: Tensor[(13, 7), float64]) -> (Tensor[(196), float64], Tensor[(196), float32], Tensor[(196), float32], Tensor[(16, 2), uint8], Tensor[(11, 11, 13), bool], Tensor[(16, 13, 2), uint64], Tensor[(416), uint64], Tensor[(7, 13, 1), float64], Tensor[(13, 7), float64]) {
  %865 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %866 = cast(meta[relay.Constant][40] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %867 = reshape(%865, newshape=[]) /* ty=uint32 */;
  %868 = reshape(%866, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %869 = @func_404(%867, %868) /* ty=(Tensor[(2, 2, 14), uint32], Tensor[(1, 14, 14), float32], Tensor[(196), float64]) */;
  %870 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="uint8") /* ty=uint8 */;
  %871 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 2), uint8] */, dtype="uint8") /* ty=Tensor[(16, 2), uint8] */;
  %872 = reshape(%870, newshape=[]) /* ty=uint8 */;
  %873 = reshape(%871, newshape=[8, 1, 4]) /* ty=Tensor[(8, 1, 4), uint8] */;
  %874 = @func_885(%872, %873) /* ty=(Tensor[(196), float32], Tensor[(196), float32], Tensor[(196), float32], Tensor[(60), float32], Tensor[(8, ?, 4), bool]) */;
  %875 = @func_954() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %876 = %875.0;
  %877 = cast(%876, dtype="float32") /* ty=Tensor[(11, 11, 13), float32] */;
  %878 = sinh(%877) /* ty=Tensor[(11, 11, 13), float32] */;
  %879 = cast(%878, dtype="bool") /* ty=Tensor[(11, 11, 13), bool] */;
  %880 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %881 = cast(meta[relay.Constant][42] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %882 = cast(meta[relay.Constant][42] /* ty=Tensor[(416), uint64] */, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %883 = reshape(%881, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %884 = reshape(%882, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), uint64] */;
  %885 = @func_1263(%883, %884) /* ty=(Tensor[(16, 13, 2), uint64], Tensor[(11, 11, 13), float32]) */;
  %886 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="float64") /* ty=float64 */;
  %887 = cast(%var_2817, dtype="float64") /* ty=Tensor[(13, 7), float64] */;
  %888 = reshape(%886, newshape=[]) /* ty=float64 */;
  %889 = reshape(%887, newshape=[7, 13, 1]) /* ty=Tensor[(7, 13, 1), float64] */;
  %890 = %869.2;
  %891 = %874.1;
  %892 = less(%879, %880) /* ty=Tensor[(11, 11, 13), bool] */;
  %893 = %885.0;
  %894 = @func_2677(%888, %889) /* ty=Tensor[(7, 13, 1), float64] */;
  (%890, meta[relay.Constant][40] /* ty=Tensor[(196), float32] */, %891, meta[relay.Constant][41] /* ty=Tensor[(16, 2), uint8] */, %892, %893, meta[relay.Constant][42] /* ty=Tensor[(416), uint64] */, %894, %var_2817)
}

def @func_2223() -> Tensor[(11, 11, 13), float32] {
  @func_2221() /* ty=Tensor[(11, 11, 13), float32] */
}

def @func_2121() -> Tensor[(11, 11, 13), float64] {
  %898 = fn () -> Tensor[(11, 11, 13), float64] {
    %895 = @func_1071() /* ty=(Tensor[(11, 11, 13), float32],) */;
    %896 = %895.0;
    %897 = cast(%896, dtype="float64") /* ty=Tensor[(11, 11, 13), float64] */;
    cos(%897) /* ty=Tensor[(11, 11, 13), float64] */
  };
  %898() /* ty=Tensor[(11, 11, 13), float64] */
}

def @func_3136(%var_3134: Tensor[(9, 8, 4), float32], %var_3135: Tensor[(9, 8, 4), float32]) -> Tensor[(9, 8, 4), float32] {
  %903 = fn (%var_3128: Tensor[(9, 8, 4), float32], %var_3129: Tensor[(9, 8, 4), float32]) -> Tensor[(9, 8, 4), float32] {
    %899 = cast(%var_3129, dtype="float32") /* ty=Tensor[(9, 8, 4), float32] */;
    %900 = shape_of(%var_3128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %901 = cast(%var_3128, dtype="float32") /* ty=Tensor[(9, 8, 4), float32] */;
    %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%901, %902) /* ty=Tensor[(9, 8, 4), float32] */
  };
  %903(%var_3134, %var_3135) /* ty=Tensor[(9, 8, 4), float32] */
}

def @func_40(%var_38: Tensor[(1, 14, 14), float32]) -> (Tensor[(1, 14, 14), float32],) {
  @func_37(%var_38) /* ty=(Tensor[(1, 14, 14), float32],) */
}

def @func_5126() -> Tensor[(11, 10, 6), float64] {
  %907 = fn () -> Tensor[(11, 10, 6), float64] {
    %904 = @func_3122() /* ty=(Tensor[(11, 10, 6), float64],) */;
    %905 = %904.0;
    %906 = cast(%905, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
    acos(%906) /* ty=Tensor[(11, 10, 6), float64] */
  };
  %907() /* ty=Tensor[(11, 10, 6), float64] */
}

def @func_5409() -> (Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32], Tensor[(960), uint32], Tensor[(960), uint32], Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) {
  %908 = @func_2049() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 11, 13), float32]) */;
  %909 = @func_4984() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */;
  %910 = @func_1972() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %911 = cast(meta[relay.Constant][43] /* ty=Tensor[(960), uint32] */, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %912 = reshape(%911, newshape=[960]) /* ty=Tensor[(960), uint32] */;
  %913 = @func_4560(%912) /* ty=(Tensor[(11, 11, 13), float32], Tensor[(4, 16, 15), uint32], Tensor[(960), uint32]) */;
  %914 = @func_5202() /* ty=(Tensor[(11, 11, 13), float32],) */;
  %915 = @func_1799() /* ty=(Tensor[(11, 10, 6), float64],) */;
  %916 = %908.1;
  %917 = %909.0;
  %918 = @func_1130() /* ty=Tensor[(11, 11, 13), float32] */;
  %919 = %910.0;
  %920 = %913.2;
  %921 = %914.0;
  %922 = %915.0;
  (%916, %917, %918, %919, %920, meta[relay.Constant][43] /* ty=Tensor[(960), uint32] */, %921, %922)
}

def @func_5848() -> (Tensor[(11, 10, 6), float64],) {
  %925 = fn () -> (Tensor[(11, 10, 6), float64],) {
    %923 = @func_4984() /* ty=(Tensor[(11, 11, 13), float32], Tensor[(11, 10, 6), float64]) */;
    %924 = %923.1;
    (%924,)
  };
  %925() /* ty=(Tensor[(11, 10, 6), float64],) */
}

def @func_6554() -> (Tensor[(11, 9, 7), float64],) {
  @func_6552() /* ty=(Tensor[(11, 9, 7), float64],) */
}

def @func_6426(%var_6424: Tensor[(4, 8, 13), uint64], %var_6425: Tensor[(4, 8, 13), uint64]) -> (Tensor[(4, 8, 13), int64], Tensor[(4, 8, 13), float64]) {
  @func_6422(%var_6424, %var_6425) /* ty=(Tensor[(4, 8, 13), int64], Tensor[(4, 8, 13), float64]) */
}

def @func_478(%var_461: Tensor[(3, 5, 4), float32]) -> (Tensor[(1, 14, 14), float32], Tensor[(196), float32], Tensor[(3, 5, 4), float64]) {
  %926 = cast(meta[relay.Constant][44] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %927 = reshape(%926, newshape=[1, 14, 14]) /* ty=Tensor[(1, 14, 14), float32] */;
  %928 = @func_37(%927) /* ty=(Tensor[(1, 14, 14), float32],) */;
  %929 = cast(%var_461, dtype="float32") /* ty=Tensor[(3, 5, 4), float32] */;
  %930 = tan(%929) /* ty=Tensor[(3, 5, 4), float32] */;
  %931 = cast(%930, dtype="float64") /* ty=Tensor[(3, 5, 4), float64] */;
  %932 = %928.0;
  %933 = sin(%931) /* ty=Tensor[(3, 5, 4), float64] */;
  (%932, meta[relay.Constant][44] /* ty=Tensor[(196), float32] */, %933)
}

def @func_5202() -> (Tensor[(11, 11, 13), float32],) {
  %934 = @func_1065() /* ty=Tensor[(11, 11, 13), float32] */;
  (%934,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen101/build/output.py", line 2405, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:49:47] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

