==========mod==========
#[version = "0.0.5"]
def @func_6934() -> (Tensor[(672), int32], Tensor[(8, 6, 14), bool]) {
  %0 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %1 = @func_5310() /* ty=Tensor[(672), int32] */;
  %2 = %0.1;
  (%1, %2)
}

def @func_6850(%var_6804: Tensor[(11, 15, 14), int16], %var_6805: Tensor[(11, 15, 14), int16], %var_6815: Tensor[(70), bool]) -> (Tensor[(11, 15, 14), int16], Tensor[(15, 2, 1), float64], Tensor[(2, 5, 7), float64], Tensor[(70), bool]) {
  %3 = cast(%var_6805, dtype="int16") /* ty=Tensor[(11, 15, 14), int16] */;
  %4 = shape_of(%var_6804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_6804, dtype="int16") /* ty=Tensor[(11, 15, 14), int16] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %7 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %8 = cast(%var_6815, dtype="bool") /* ty=Tensor[(70), bool] */;
  %9 = cast(%var_6815, dtype="bool") /* ty=Tensor[(70), bool] */;
  %10 = reshape(%8, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
  %11 = reshape(%9, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
  %12 = @func_3114(%10, %11) /* ty=(Tensor[(2, 5, 7), bool], Tensor[(10, 4, 3), bool], Tensor[(120), bool], Tensor[(2, 5, 7), float64]) */;
  %13 = subtract(%5, %6) /* ty=Tensor[(11, 15, 14), int16] */;
  %14 = %7.2;
  %15 = %12.3;
  (%13, %14, %15, %var_6815)
}

def @func_3857(%var_3825: int8, %var_3826: Tensor[(2, 11, 15), int8]) -> Tensor[(2, 11, 15), int32] {
  %16 = cast(%var_3825, dtype="int8") /* ty=int8 */;
  %17 = cast(%var_3826, dtype="int8") /* ty=Tensor[(2, 11, 15), int8] */;
  %18 = left_shift(%16, %17) /* ty=Tensor[(2, 11, 15), int8] */;
  %19 = cast(%var_3825, dtype="float64") /* ty=float64 */;
  %20 = cast(%var_3826, dtype="float64") /* ty=Tensor[(2, 11, 15), float64] */;
  %21 = floor_divide(%19, %20) /* ty=Tensor[(2, 11, 15), float64] */;
  %22 = cast(%21, dtype="int32") /* ty=Tensor[(2, 11, 15), int32] */;
  %23 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%18, dtype="int32") /* ty=Tensor[(2, 11, 15), int32] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%24, %25) /* ty=Tensor[(2, 11, 15), int32] */
}

def @func_6014(%var_5995: Tensor[(6, 12, 16), uint8], %var_5996: Tensor[(6, 12, 16), uint8]) -> (Tensor[(6, 12, 16), uint8], Tensor[(6, 12, 16), uint64]) {
  %26 = cast(%var_5996, dtype="uint8") /* ty=Tensor[(6, 12, 16), uint8] */;
  %27 = shape_of(%var_5995, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%var_5995, dtype="uint8") /* ty=Tensor[(6, 12, 16), uint8] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %30 = cast(%var_5995, dtype="uint64") /* ty=Tensor[(6, 12, 16), uint64] */;
  %31 = shape_of(%var_5996, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_5996, dtype="uint64") /* ty=Tensor[(6, 12, 16), uint64] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %34 = subtract(%28, %29) /* ty=Tensor[(6, 12, 16), uint8] */;
  %35 = add(%32, %33) /* ty=Tensor[(6, 12, 16), uint64] */;
  (%34, %35)
}

def @func_4184(%var_4157: Tensor[(70), bool]) -> (Tensor[(10, 12, 1), float32], Tensor[(9, 14, 15), float64], Tensor[(8, 6, 14), bool], Tensor[(585, 3), int8], Tensor[(168, 4), int32], Tensor[(120), bool], Tensor[(70), bool], Tensor[(9, 14, 15), float64]) {
  %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(10, 12, 1), float32] */;
  %37 = sinh(%36) /* ty=Tensor[(10, 12, 1), float32] */;
  %38 = cast(%37, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
  %39 = reshape(%38, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), bool] */;
  %40 = @func_2548(%39) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) */;
  %41 = cast(meta[relay.Constant][1] /* ty=Tensor[(585, 3), int8] */, dtype="int8") /* ty=Tensor[(585, 3), int8] */;
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(585, 3), int8] */, dtype="int8") /* ty=Tensor[(585, 3), int8] */;
  %43 = reshape(%41, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
  %44 = reshape(%42, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
  %45 = @func_878(%43, %44) /* ty=(Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) */;
  %46 = cast(%37, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
  %47 = reshape(%46, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), bool] */;
  %48 = @func_2548(%47) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) */;
  %49 = cast(%var_4157, dtype="bool") /* ty=Tensor[(70), bool] */;
  %50 = cast(%var_4157, dtype="bool") /* ty=Tensor[(70), bool] */;
  %51 = reshape(%49, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
  %52 = reshape(%50, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
  %53 = @func_3114(%51, %52) /* ty=(Tensor[(2, 5, 7), bool], Tensor[(10, 4, 3), bool], Tensor[(120), bool], Tensor[(2, 5, 7), float64]) */;
  %54 = %40.5;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(9, 14, 15), float64] */;
  %56 = cast(%54, dtype="float64") /* ty=Tensor[(9, 14, 15), float64] */;
  %57 = reshape(%55, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %58 = reshape(%56, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %59 = @func_2266(%57, %58) /* ty=(Tensor[(9, 14, 15), float64],) */;
  %60 = %45.3;
  %61 = %48.6;
  %62 = %53.2;
  %63 = %59.0;
  (%37, %54, %60, meta[relay.Constant][1] /* ty=Tensor[(585, 3), int8] */, %61, %62, %var_4157, %63)
}

def @func_4896() -> Tensor[(15, 2, 1), float64] {
  @func_4760() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_13870() -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32], Tensor[(10, 12, 2), float32]) {
  %64 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %65 = @func_6576() /* ty=Tensor[(672), int32] */;
  %66 = @func_6227() /* ty=Tensor[(10, 12, 2), float32] */;
  (%64, %65, %66)
}

def @func_8170() -> (Tensor[(672), int32],) {
  %67 = @func_6576() /* ty=Tensor[(672), int32] */;
  (%67,)
}

def @func_12477(%var_12430: Tensor[(8, 4, 9), float64]) -> (Tensor[(8, 4, 9), float64], Tensor[(672), int32], Tensor[(8, 6, 14), bool], Tensor[(15, 2, 3), uint32], Tensor[(240), float32], Tensor[(672), int32]) {
  %68 = cast(%var_12430, dtype="float64") /* ty=Tensor[(8, 4, 9), float64] */;
  %69 = @func_7082() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
  %70 = @func_10518() /* ty=(Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %71 = cast(meta[relay.Constant][2] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %72 = reshape(%71, newshape=[10, 12, 2]) /* ty=Tensor[(10, 12, 2), float32] */;
  %73 = @func_9227(%72) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) */;
  %74 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %75 = acos(%68) /* ty=Tensor[(8, 4, 9), float64] */;
  %76 = %69.0;
  %77 = %70.0;
  %78 = %73.1;
  %79 = %74.0;
  (%75, %76, %77, %78, meta[relay.Constant][2] /* ty=Tensor[(240), float32] */, %79)
}

def @func_9728() -> (Tensor[(15, 2, 1), float64],) {
  %80 = @func_4896() /* ty=Tensor[(15, 2, 1), float64] */;
  (%80,)
}

def @func_11076(%var_11012: Tensor[(16, 12, 7), float32], %var_11063: Tensor[(1, 56), float64]) -> (Tensor[(16, 12, 7), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8], Tensor[(16, 12, 7), float64], Tensor[(16, 12, 7), bool], Tensor[(16, 12, 7), int16], Tensor[(8, 7, 14), float64], Tensor[(1, 56), float64], Tensor[(784), float64]) {
  %81 = cast(%var_11012, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %82 = sqrt(%81) /* ty=Tensor[(16, 12, 7), float32] */;
  %83 = cast(%var_11012, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %87 = cast(meta[relay.Constant][3] /* ty=Tensor[(1152), uint8] */, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %88 = cast(meta[relay.Constant][3] /* ty=Tensor[(1152), uint8] */, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %89 = reshape(%87, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %90 = reshape(%88, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %91 = @func_6014(%89, %90) /* ty=(Tensor[(6, 12, 16), uint8], Tensor[(6, 12, 16), uint64]) */;
  %92 = cast(%var_11012, dtype="float64") /* ty=Tensor[(16, 12, 7), float64] */;
  %93 = cast(%var_11012, dtype="bool") /* ty=Tensor[(16, 12, 7), bool] */;
  %94 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%82, dtype="bool") /* ty=Tensor[(16, 12, 7), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %97 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 12, 7), float32] */, dtype="int16") /* ty=Tensor[(16, 12, 7), int16] */;
  %98 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%82, dtype="int16") /* ty=Tensor[(16, 12, 7), int16] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %101 = cast(%var_11063, dtype="float64") /* ty=Tensor[(1, 56), float64] */;
  %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %103 = reshape(%101, newshape=[8, 7, 1]) /* ty=Tensor[(8, 7, 1), float64] */;
  %104 = reshape(%102, newshape=[8, 7, 14]) /* ty=Tensor[(8, 7, 14), float64] */;
  %105 = @func_4241(%103, %104) /* ty=(Tensor[(8, 7, 14), float64],) */;
  %106 = power(%85, %86) /* ty=Tensor[(16, 12, 7), float32] */;
  %107 = %91.0;
  %108 = atanh(%92) /* ty=Tensor[(16, 12, 7), float64] */;
  %109 = logical_and(%95, %96) /* ty=Tensor[(16, 12, 7), bool] */;
  %110 = add(%99, %100) /* ty=Tensor[(16, 12, 7), int16] */;
  %111 = %105.0;
  (%106, %107, meta[relay.Constant][3] /* ty=Tensor[(1152), uint8] */, %108, %109, %110, %111, %var_11063, meta[relay.Constant][5] /* ty=Tensor[(784), float64] */)
}

def @func_13239(%var_13226: float64, %var_13227: Tensor[(8, 9, 1), float64]) -> (Tensor[(8, 9, 1), float64],) {
  %112 = cast(%var_13226, dtype="float64") /* ty=float64 */;
  %113 = cast(%var_13227, dtype="float64") /* ty=Tensor[(8, 9, 1), float64] */;
  %114 = floor_mod(%112, %113) /* ty=Tensor[(8, 9, 1), float64] */;
  (%114,)
}

def @func_6545(%var_6529: Tensor[(9, 6, 1), float32]) -> (Tensor[(9, 6, 1), float32],) {
  %115 = cast(-7.7602f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %116 = cast(%var_6529, dtype="float32") /* ty=Tensor[(9, 6, 1), float32] */;
  %117 = mod(%115, %116) /* ty=Tensor[(9, 6, 1), float32] */;
  (%117,)
}

def @func_14488() -> (Tensor[(10, 12, 2), float32],) {
  %118 = @func_12631() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %119 = %118.0;
  (%119,)
}

def @func_14826() -> (Tensor[(10, 12, 2), float32],) {
  %120 = @func_7291() /* ty=Tensor[(10, 12, 2), float32] */;
  (%120,)
}

def @func_14709() -> (Tensor[(15, 2, 1), float64],) {
  %121 = @func_14543() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %122 = %121.0;
  (%122,)
}

def @func_11719(%var_11699: Tensor[(1344), float32], %var_11700: Tensor[(56), float64]) -> (Tensor[(10, 12, 2), float64], Tensor[(784), float64], Tensor[(1344), float32], Tensor[(56), float64], Tensor[(10, 12, 2), float32]) {
  %123 = @func_10052() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %124 = %123.0;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(10, 12, 2), float64] */;
  %126 = cast(%var_11699, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %127 = cast(%var_11700, dtype="float64") /* ty=Tensor[(56), float64] */;
  %128 = reshape(%126, newshape=[16, 12, 7]) /* ty=Tensor[(16, 12, 7), float32] */;
  %129 = reshape(%127, newshape=[1, 56]) /* ty=Tensor[(1, 56), float64] */;
  %130 = @func_11076(%128, %129) /* ty=(Tensor[(16, 12, 7), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8], Tensor[(16, 12, 7), float64], Tensor[(16, 12, 7), bool], Tensor[(16, 12, 7), int16], Tensor[(8, 7, 14), float64], Tensor[(1, 56), float64], Tensor[(784), float64]) */;
  %131 = sin(%125) /* ty=Tensor[(10, 12, 2), float64] */;
  %132 = %130.8;
  %133 = @func_8592() /* ty=Tensor[(10, 12, 2), float32] */;
  (%131, %132, %var_11699, %var_11700, %133)
}

def @func_6343() -> (Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) {
  %134 = @func_5310() /* ty=Tensor[(672), int32] */;
  %135 = @func_6040() /* ty=Tensor[(672), int32] */;
  %136 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  (%134, %135, %136)
}

def @func_11084() -> (Tensor[(10, 12, 2), float64],) {
  %137 = @func_9980() /* ty=(Tensor[(672), int32], Tensor[(10, 12, 2), float64]) */;
  %138 = %137.1;
  (%138,)
}

def @func_6576() -> Tensor[(672), int32] {
  %139 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
  %139.1
}

def @func_5792(%var_5787: Tensor[(120), int64]) -> (Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(96, 4), float32], Tensor[(120), int64]) {
  %140 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %141 = cast(%var_5787, dtype="int64") /* ty=Tensor[(120), int64] */;
  %142 = reshape(%141, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %143 = @func_5117(%142) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(24, 16), uint16], Tensor[(120), int64], Tensor[(96, 4), float32], Tensor[(70), bool]) */;
  %144 = %140.2;
  %145 = @func_4896() /* ty=Tensor[(15, 2, 1), float64] */;
  %146 = %143.3;
  (%144, %145, %146, %var_5787)
}

def @func_15417(%var_15360: Tensor[(3, 5, 4), int16], %var_15369: Tensor[(1152), uint8]) -> (Tensor[(3, 5, 4), bool], Tensor[(10, 12, 2), float32], Tensor[(1152), uint8], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64]) {
  %147 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 5, 4), int16] */, dtype="bool") /* ty=Tensor[(3, 5, 4), bool] */;
  %148 = shape_of(%var_15360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%var_15360, dtype="bool") /* ty=Tensor[(3, 5, 4), bool] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %151 = cast(%var_15369, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %152 = reshape(%151, newshape=[1152]) /* ty=Tensor[(1152), uint8] */;
  %153 = @func_7151(%152) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8]) */;
  %154 = @func_13061() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %155 = less(%149, %150) /* ty=Tensor[(3, 5, 4), bool] */;
  %156 = %153.1;
  %157 = %154.1;
  %158 = @func_10824() /* ty=Tensor[(15, 2, 1), float64] */;
  (%155, %156, %var_15369, %157, %158)
}

def @func_14439() -> (Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(48, 24), uint8]) {
  %159 = @func_7066() /* ty=(Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) */;
  %160 = @func_12872() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint64], Tensor[(10, 12, 2), float32]) */;
  %161 = cast(meta[relay.Constant][7] /* ty=Tensor[(48, 24), uint8] */, dtype="uint8") /* ty=Tensor[(48, 24), uint8] */;
  %162 = reshape(%161, newshape=[1152]) /* ty=Tensor[(1152), uint8] */;
  %163 = @func_13964(%162) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8]) */;
  %164 = %159.0;
  %165 = %160.0;
  %166 = %163.2;
  (%164, %165, %166, meta[relay.Constant][7] /* ty=Tensor[(48, 24), uint8] */)
}

def @func_10082() -> Tensor[(672), int32] {
  %167 = @func_9665() /* ty=(Tensor[(672), int32],) */;
  %167.0
}

def @func_6745(%var_6689: Tensor[(10, 15, 10), float64]) -> (Tensor[(10, 15, 10), float64], Tensor[(672), int32], Tensor[(8, 6, 14), bool], Tensor[(15, 2, 672), uint8], Tensor[(10, 15, 10), int8], Tensor[(15, 2, 672), float32], Tensor[(10, 12, 2), float32]) {
  %168 = cast(%var_6689, dtype="float64") /* ty=Tensor[(10, 15, 10), float64] */;
  %169 = @func_6040() /* ty=Tensor[(672), int32] */;
  %170 = cast(%169, dtype="int32") /* ty=Tensor[(672), int32] */;
  %171 = reshape(%170, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
  %172 = @func_651(%171) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
  %173 = cast(%var_6689, dtype="float32") /* ty=Tensor[(10, 15, 10), float32] */;
  %174 = atanh(%173) /* ty=Tensor[(10, 15, 10), float32] */;
  %175 = cast(%var_6689, dtype="int8") /* ty=Tensor[(10, 15, 10), int8] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="int8") /* ty=Tensor[(10, 15, 10), int8] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %179 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(15, 2, 672), float32] */;
  %181 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %182 = exp(%168) /* ty=Tensor[(10, 15, 10), float64] */;
  %183 = %172.0;
  %184 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  %185 = subtract(%177, %178) /* ty=Tensor[(10, 15, 10), int8] */;
  %186 = sigmoid(%180) /* ty=Tensor[(15, 2, 672), float32] */;
  %187 = %181.0;
  (%182, %169, %183, %184, %185, %186, %187)
}

def @func_5948() -> Tensor[(15, 2, 672), uint8] {
  %188 = @func_4896() /* ty=Tensor[(15, 2, 1), float64] */;
  %189 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %190 = %189.0;
  %191 = cast(%188, dtype="uint8") /* ty=Tensor[(15, 2, 1), uint8] */;
  %192 = cast(%190, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  right_shift(%191, %192) /* ty=Tensor[(15, 2, 672), uint8] */
}

def @func_9383() -> Tensor[(10, 12, 2), float32] {
  %193 = @func_8549() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) */;
  %193.0
}

def @func_14336() -> (Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64], Tensor[(120), int64]) {
  %194 = @func_6934() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
  %195 = @func_10212() /* ty=(Tensor[(15, 2, 1), float32], Tensor[(15, 2, 1), float64]) */;
  %196 = cast(meta[relay.Constant][8] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %197 = reshape(%196, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %198 = @func_5117(%197) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(24, 16), uint16], Tensor[(120), int64], Tensor[(96, 4), float32], Tensor[(70), bool]) */;
  %199 = %194.1;
  %200 = %195.1;
  %201 = %198.0;
  (%199, %200, %201, meta[relay.Constant][8] /* ty=Tensor[(120), int64] */)
}

def @func_9980() -> (Tensor[(672), int32], Tensor[(10, 12, 2), float64]) {
  %202 = @func_8752() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(10, 12, 2), float64]) */;
  %203 = @func_5310() /* ty=Tensor[(672), int32] */;
  %204 = %202.2;
  (%203, %204)
}

def @func_12403() -> (Tensor[(672), int32], Tensor[(15, 2, 1), float64]) {
  %205 = @func_9476() /* ty=(Tensor[(672), int32],) */;
  %206 = @func_9728() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %207 = %205.0;
  %208 = %206.0;
  (%207, %208)
}

def @func_878(%var_839: Tensor[(13, 9, 15), int8], %var_840: Tensor[(13, 9, 15), int8]) -> (Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) {
  %209 = cast(%var_840, dtype="int8") /* ty=Tensor[(13, 9, 15), int8] */;
  %210 = shape_of(%var_839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_839, dtype="int8") /* ty=Tensor[(13, 9, 15), int8] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %213 = cast(meta[relay.Constant][9] /* ty=Tensor[(168, 4), int32] */, dtype="int32") /* ty=Tensor[(168, 4), int32] */;
  %214 = reshape(%213, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
  %215 = @func_651(%214) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
  %216 = cast(meta[relay.Constant][9] /* ty=Tensor[(168, 4), int32] */, dtype="int32") /* ty=Tensor[(168, 4), int32] */;
  %217 = reshape(%216, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
  %218 = @func_651(%217) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
  %219 = bitwise_xor(%211, %212) /* ty=Tensor[(13, 9, 15), int8] */;
  %220 = %215.0;
  %221 = %218.0;
  (%219, %220, meta[relay.Constant][9] /* ty=Tensor[(168, 4), int32] */, %221)
}

def @func_5437(%var_5405: Tensor[(15, 2, 3), float64]) -> (Tensor[(15, 2, 3), uint32], Tensor[(672), int32]) {
  %222 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %223 = cast(%222, dtype="uint32") /* ty=Tensor[(15, 2, 1), uint32] */;
  %224 = cast(%var_5405, dtype="uint32") /* ty=Tensor[(15, 2, 3), uint32] */;
  %225 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %226 = left_shift(%223, %224) /* ty=Tensor[(15, 2, 3), uint32] */;
  %227 = %225.0;
  (%226, %227)
}

def @func_10824() -> Tensor[(15, 2, 1), float64] {
  %228 = @func_8834() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(70), bool]) */;
  %228.0
}

def @func_2887(%var_2865: Tensor[(4, 6, 16), float32]) -> (Tensor[(4, 6, 16), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) {
  %229 = cast(%var_2865, dtype="float32") /* ty=Tensor[(4, 6, 16), float32] */;
  %230 = cast(meta[relay.Constant][10] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %231 = reshape(%230, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
  %232 = @func_651(%231) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
  %233 = log2(%229) /* ty=Tensor[(4, 6, 16), float32] */;
  %234 = %232.0;
  (%233, %234, meta[relay.Constant][10] /* ty=Tensor[(672), int32] */)
}

def @func_10728() -> (Tensor[(15, 2, 1), float64],) {
  %235 = @func_9728() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %236 = %235.0;
  (%236,)
}

def @func_651(%var_631: Tensor[(8, 6, 14), int32]) -> (Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) {
  %237 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 6, 14), int32] */, dtype="bool") /* ty=Tensor[(8, 6, 14), bool] */;
  %238 = shape_of(%var_631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%var_631, dtype="bool") /* ty=Tensor[(8, 6, 14), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %241 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 6, 14), int32] */, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
  %242 = equal(%239, %240) /* ty=Tensor[(8, 6, 14), bool] */;
  %243 = sinh(%241) /* ty=Tensor[(8, 6, 14), float32] */;
  (%242, %243)
}

def @func_4388(%var_4291: Tensor[(3, 5, 8), int64], %var_4292: Tensor[(3, 5, 8), int64], %var_4311: Tensor[(24, 16), float32], %var_4344: Tensor[(24, 16), float32]) -> (Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float64], Tensor[(672), int32], Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(24, 16), uint16], Tensor[(120), bool], Tensor[(70), bool], Tensor[(10, 4, 3), bool], Tensor[(4, 6, 16), float32]) {
  %244 = cast(%var_4292, dtype="int64") /* ty=Tensor[(3, 5, 8), int64] */;
  %245 = shape_of(%var_4291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%var_4291, dtype="int64") /* ty=Tensor[(3, 5, 8), int64] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %248 = cast(%var_4292, dtype="float64") /* ty=Tensor[(3, 5, 8), float64] */;
  %249 = cast(%var_4311, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
  %250 = reshape(%249, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), float32] */;
  %251 = @func_2887(%250) /* ty=(Tensor[(4, 6, 16), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */;
  %252 = cosh(%248) /* ty=Tensor[(3, 5, 8), float64] */;
  %253 = cast(%252, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %254 = reshape(%253, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), bool] */;
  %255 = @func_2548(%254) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) */;
  %256 = cast(meta[relay.Constant][12] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %257 = cast(meta[relay.Constant][12] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %258 = reshape(%256, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %259 = reshape(%257, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %260 = @func_2266(%258, %259) /* ty=(Tensor[(9, 14, 15), float64],) */;
  %261 = cast(%var_4344, dtype="uint16") /* ty=Tensor[(24, 16), uint16] */;
  %262 = shape_of(%var_4311, dtype="int32") /* ty=Tensor[(2), int32] */;
  %263 = cast(%var_4311, dtype="uint16") /* ty=Tensor[(24, 16), uint16] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %265 = cast(meta[relay.Constant][13] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
  %266 = cast(meta[relay.Constant][13] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
  %267 = reshape(%265, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
  %268 = reshape(%266, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
  %269 = @func_3114(%267, %268) /* ty=(Tensor[(2, 5, 7), bool], Tensor[(10, 4, 3), bool], Tensor[(120), bool], Tensor[(2, 5, 7), float64]) */;
  %270 = logical_xor(%246, %247) /* ty=Tensor[(3, 5, 8), int64] */;
  %271 = cast(%270, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %272 = reshape(%271, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), bool] */;
  %273 = @func_2548(%272) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) */;
  %274 = cast(%var_4311, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
  %275 = reshape(%274, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), float32] */;
  %276 = @func_2887(%275) /* ty=(Tensor[(4, 6, 16), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */;
  %277 = %251.2;
  %278 = %255.0;
  %279 = %260.0;
  %280 = subtract(%263, %264) /* ty=Tensor[(24, 16), uint16] */;
  %281 = %269.2;
  %282 = %273.0;
  %283 = %276.0;
  (%270, %252, %277, %278, %279, meta[relay.Constant][12] /* ty=Tensor[(1890), float64] */, %280, %281, meta[relay.Constant][13] /* ty=Tensor[(70), bool] */, %282, %283)
}

def @func_7429() -> Tensor[(15, 2, 1), float64] {
  %284 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
  %284.2
}

def @func_11540() -> Tensor[(15, 2, 1), float64] {
  @func_11523() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_11587() -> (Tensor[(10, 12, 2), float32],) {
  %285 = @func_8518() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %286 = %285.0;
  (%286,)
}

def @func_10052() -> (Tensor[(10, 12, 2), float32],) {
  %287 = @func_8549() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) */;
  %288 = %287.0;
  (%288,)
}

def @func_12631() -> (Tensor[(10, 12, 2), float32],) {
  %289 = @func_6519() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %290 = %289.0;
  (%290,)
}

def @func_4760() -> Tensor[(15, 2, 1), float64] {
  %291 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 2, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
  acosh(%291) /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_4864() -> (Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) {
  %292 = cast(meta[relay.Constant][15] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %293 = reshape(%292, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
  %294 = @func_651(%293) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
  %295 = %294.0;
  %296 = cast(%295, dtype="int32") /* ty=Tensor[(8, 6, 14), int32] */;
  %297 = reshape(%296, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
  %298 = @func_651(%297) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
  %299 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %300 = %298.1;
  (%299, %295, meta[relay.Constant][15] /* ty=Tensor[(672), int32] */, %300)
}

def @func_13975() -> (Tensor[(672), int32],) {
  %301 = @func_12420() /* ty=Tensor[(672), int32] */;
  (%301,)
}

def @func_12953(%var_12920: Tensor[(30), float64], %var_12946: Tensor[(90), float64]) -> (Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(30), float64], Tensor[(4, 16, 4), float64], Tensor[(8, 32), float32], Tensor[(672), int32], Tensor[(90), float64]) {
  %302 = cast(%var_12920, dtype="float64") /* ty=Tensor[(30), float64] */;
  %303 = reshape(%302, newshape=[15, 2, 1]) /* ty=Tensor[(15, 2, 1), float64] */;
  %304 = @func_5764(%303) /* ty=(Tensor[(15, 2, 672), float64], Tensor[(10, 12, 2), float32]) */;
  %305 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 32), float32] */, dtype="float32") /* ty=Tensor[(8, 32), float32] */;
  %306 = reshape(%305, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float32] */;
  %307 = @func_7989(%306) /* ty=(Tensor[(4, 16, 4), float64],) */;
  %308 = cast(%var_12946, dtype="float64") /* ty=Tensor[(90), float64] */;
  %309 = reshape(%308, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
  %310 = @func_5437(%309) /* ty=(Tensor[(15, 2, 3), uint32], Tensor[(672), int32]) */;
  %311 = @func_9839() /* ty=Tensor[(672), int32] */;
  %312 = %304.1;
  %313 = %307.0;
  %314 = %310.1;
  (%311, %312, %var_12920, %313, meta[relay.Constant][16] /* ty=Tensor[(8, 32), float32] */, %314, %var_12946)
}

def @func_13565(%var_13557: Tensor[(840), float64]) -> (Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(840), float64], Tensor[(70), bool], Tensor[(384), float32]) {
  %315 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %316 = cast(%var_13557, dtype="float64") /* ty=Tensor[(840), float64] */;
  %317 = cast(meta[relay.Constant][17] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
  %318 = reshape(%316, newshape=[15, 14, 4]) /* ty=Tensor[(15, 14, 4), float64] */;
  %319 = reshape(%317, newshape=[70]) /* ty=Tensor[(70), bool] */;
  %320 = @func_7013(%318, %319) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 14, 4), float32], Tensor[(168, 4), int32], Tensor[(70), bool]) */;
  %321 = @func_9593() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(384), float32], Tensor[(384), float32], Tensor[(672), int32]) */;
  %322 = %315.0;
  %323 = %320.0;
  %324 = %321.2;
  (%322, %323, %var_13557, meta[relay.Constant][17] /* ty=Tensor[(70), bool] */, %324)
}

def @func_8472() -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32]) {
  %325 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %326 = @func_8221() /* ty=Tensor[(15, 2, 1), float64] */;
  %327 = %325.0;
  (%326, %327)
}

def @func_8120() -> (Tensor[(70), bool],) {
  %328 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %329 = %328.1;
  (%329,)
}

def @func_11192(%var_11186: Tensor[(135, 14), int8]) -> (Tensor[(672), int32], Tensor[(15, 2, 384), bool], Tensor[(4, 16, 4), float64], Tensor[(256), float32], Tensor[(3, 9, 5), float64], Tensor[(135, 14), float64]) {
  %330 = cast(meta[relay.Constant][18] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %331 = reshape(%330, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %332 = @func_5623(%331) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), float32]) */;
  %333 = @func_9728() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %334 = %333.0;
  %335 = cast(meta[relay.Constant][18] /* ty=Tensor[(384), float32] */, dtype="bool") /* ty=Tensor[(384), bool] */;
  %336 = cast(%334, dtype="bool") /* ty=Tensor[(15, 2, 1), bool] */;
  %337 = cast(meta[relay.Constant][19] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %338 = reshape(%337, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float32] */;
  %339 = @func_7989(%338) /* ty=(Tensor[(4, 16, 4), float64],) */;
  %340 = cast(meta[relay.Constant][20] /* ty=Tensor[(135, 1), int8] */, dtype="int8") /* ty=Tensor[(135, 1), int8] */;
  %341 = cast(meta[relay.Constant][20] /* ty=Tensor[(135, 1), int8] */, dtype="int8") /* ty=Tensor[(135, 1), int8] */;
  %342 = reshape(%340, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), int8] */;
  %343 = reshape(%341, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), int8] */;
  %344 = @func_9336(%342, %343) /* ty=(Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) */;
  %345 = cast(meta[relay.Constant][20] /* ty=Tensor[(135, 1), int8] */, dtype="float64") /* ty=Tensor[(135, 1), float64] */;
  %346 = cast(%var_11186, dtype="float64") /* ty=Tensor[(135, 14), float64] */;
  %347 = %332.1;
  %348 = less_equal(%335, %336) /* ty=Tensor[(15, 2, 384), bool] */;
  %349 = %339.0;
  %350 = %344.1;
  %351 = mod(%345, %346) /* ty=Tensor[(135, 14), float64] */;
  (%347, %348, %349, meta[relay.Constant][19] /* ty=Tensor[(256), float32] */, %350, %351)
}

def @func_9522() -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  %352 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  %353 = @func_9249() /* ty=Tensor[(15, 2, 1), float64] */;
  %354 = @func_9099() /* ty=Tensor[(10, 12, 2), float32] */;
  (%352, %353, %354)
}

def @func_7013(%var_6967: Tensor[(15, 14, 4), float64], %var_7001: Tensor[(70), bool]) -> (Tensor[(10, 12, 2), float32], Tensor[(15, 14, 4), float32], Tensor[(168, 4), int32], Tensor[(70), bool]) {
  %355 = @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %356 = cast(%var_6967, dtype="float64") /* ty=Tensor[(15, 14, 4), float64] */;
  %357 = exp(%356) /* ty=Tensor[(15, 14, 4), float64] */;
  %358 = cast(%357, dtype="float32") /* ty=Tensor[(15, 14, 4), float32] */;
  %359 = cast(%var_7001, dtype="bool") /* ty=Tensor[(70), bool] */;
  %360 = reshape(%359, newshape=[70]) /* ty=Tensor[(70), bool] */;
  %361 = @func_4184(%360) /* ty=(Tensor[(10, 12, 1), float32], Tensor[(9, 14, 15), float64], Tensor[(8, 6, 14), bool], Tensor[(585, 3), int8], Tensor[(168, 4), int32], Tensor[(120), bool], Tensor[(70), bool], Tensor[(9, 14, 15), float64]) */;
  %362 = %355.0;
  %363 = sinh(%358) /* ty=Tensor[(15, 14, 4), float32] */;
  %364 = %361.4;
  (%362, %363, %364, %var_7001)
}

def @func_5919() -> (Tensor[(10, 12, 2), float32],) {
  %365 = @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %366 = %365.0;
  (%366,)
}

def @func_14238(%var_14230: Tensor[(1, 135), int8]) -> (Tensor[(15, 2, 1), float64], Tensor[(3, 9, 5), float64], Tensor[(1, 135), int8], Tensor[(15, 2, 672), float32], Tensor[(20160), uint8]) {
  %367 = cast(%var_14230, dtype="int8") /* ty=Tensor[(1, 135), int8] */;
  %368 = cast(%var_14230, dtype="int8") /* ty=Tensor[(1, 135), int8] */;
  %369 = reshape(%367, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), int8] */;
  %370 = reshape(%368, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), int8] */;
  %371 = @func_9336(%369, %370) /* ty=(Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) */;
  %372 = cast(meta[relay.Constant][21] /* ty=Tensor[(20160), uint8] */, dtype="uint8") /* ty=Tensor[(20160), uint8] */;
  %373 = reshape(%372, newshape=[15, 2, 672]) /* ty=Tensor[(15, 2, 672), uint8] */;
  %374 = @func_6172(%373) /* ty=(Tensor[(15, 2, 672), float32], Tensor[(10, 12, 2), float32]) */;
  %375 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %376 = %371.1;
  %377 = %374.0;
  (%375, %376, %var_14230, %377, meta[relay.Constant][21] /* ty=Tensor[(20160), uint8] */)
}

def @func_15678() -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32], Tensor[(4, 16, 4), float64], Tensor[(256, 1), float32]) {
  %378 = @func_12361() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool]) */;
  %379 = cast(meta[relay.Constant][22] /* ty=Tensor[(256, 1), float32] */, dtype="float32") /* ty=Tensor[(256, 1), float32] */;
  %380 = reshape(%379, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float32] */;
  %381 = @func_7989(%380) /* ty=(Tensor[(4, 16, 4), float64],) */;
  %382 = %378.0;
  %383 = @func_13030() /* ty=Tensor[(10, 12, 2), float32] */;
  %384 = %381.0;
  (%382, %383, %384, meta[relay.Constant][22] /* ty=Tensor[(256, 1), float32] */)
}

def @func_8148(%var_8145: Tensor[(4, 196), float64]) -> (Tensor[(15, 2, 1), float64], Tensor[(784), float64], Tensor[(4, 196), float64]) {
  %385 = @func_5966() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %386 = cast(%var_8145, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %387 = reshape(%386, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %388 = @func_4807(%387) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 7, 14), float64], Tensor[(784), float64], Tensor[(2, 28), float64]) */;
  %389 = %385.0;
  %390 = %388.2;
  (%389, %390, %var_8145)
}

def @func_6590() -> (Tensor[(672), int32], Tensor[(672), int32]) {
  %391 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
  %392 = %391.0;
  %393 = @func_6040() /* ty=Tensor[(672), int32] */;
  (%392, %393)
}

def @func_10549() -> Tensor[(10, 12, 2), float32] {
  @func_7291() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_5310() -> Tensor[(672), int32] {
  %394 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %394.0
}

def @func_7879(%var_7874: Tensor[(1755), int8]) -> (Tensor[(672), int32], Tensor[(672), int32], Tensor[(672), int32], Tensor[(8, 6, 14), bool], Tensor[(1755), int8], Tensor[(8, 6, 14), bool]) {
  %395 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
  %396 = @func_6651() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
  %397 = cast(%var_7874, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %398 = cast(%var_7874, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %399 = reshape(%397, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
  %400 = reshape(%398, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
  %401 = @func_878(%399, %400) /* ty=(Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) */;
  %402 = @func_7082() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
  %403 = %395.1;
  %404 = @func_6040() /* ty=Tensor[(672), int32] */;
  %405 = %396.1;
  %406 = %401.1;
  %407 = %402.1;
  (%403, %404, %405, %406, %var_7874, %407)
}

def @func_10936() -> Tensor[(15, 2, 1), float64] {
  @func_10639() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_8625() -> (Tensor[(15, 2, 1), float64],) {
  %408 = @func_7429() /* ty=Tensor[(15, 2, 1), float64] */;
  (%408,)
}

def @func_14915(%var_14850: Tensor[(15, 2, 11), float64]) -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 11), float32], Tensor[(15, 2, 11), float32], Tensor[(15, 2, 1), float64]) {
  %409 = @func_10824() /* ty=Tensor[(15, 2, 1), float64] */;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  %411 = cast(%var_14850, dtype="float32") /* ty=Tensor[(15, 2, 11), float32] */;
  %412 = cast(%var_14850, dtype="float64") /* ty=Tensor[(15, 2, 11), float64] */;
  %413 = acos(%412) /* ty=Tensor[(15, 2, 11), float64] */;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(15, 2, 11), float32] */;
  %415 = @func_6507() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %416 = @func_8871() /* ty=Tensor[(10, 12, 2), float32] */;
  %417 = power(%410, %411) /* ty=Tensor[(15, 2, 11), float32] */;
  %418 = cosh(%414) /* ty=Tensor[(15, 2, 11), float32] */;
  %419 = %415.0;
  (%416, %417, %418, %419)
}

def @func_9024() -> (Tensor[(90), float64], Tensor[(15, 2, 672), uint32], Tensor[(15, 2, 672), int32], Tensor[(10, 12, 2), float32]) {
  %420 = @func_8803() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %421 = %420.0;
  %422 = @func_6040() /* ty=Tensor[(672), int32] */;
  %423 = cast(%421, dtype="uint32") /* ty=Tensor[(15, 2, 1), uint32] */;
  %424 = cast(%422, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %425 = cast(meta[relay.Constant][23] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %426 = reshape(%425, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
  %427 = @func_5437(%426) /* ty=(Tensor[(15, 2, 3), uint32], Tensor[(672), int32]) */;
  %428 = %427.1;
  %429 = cast(%428, dtype="int32") /* ty=Tensor[(672), int32] */;
  %430 = cast(%421, dtype="int32") /* ty=Tensor[(15, 2, 1), int32] */;
  %431 = logical_xor(%423, %424) /* ty=Tensor[(15, 2, 672), uint32] */;
  %432 = left_shift(%429, %430) /* ty=Tensor[(15, 2, 672), int32] */;
  %433 = @func_7490() /* ty=Tensor[(10, 12, 2), float32] */;
  (meta[relay.Constant][23] /* ty=Tensor[(90), float64] */, %431, %432, %433)
}

def @func_11523() -> Tensor[(15, 2, 1), float64] {
  @func_9136() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_9160() -> Tensor[(10, 12, 2), float32] {
  %434 = @func_8549() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) */;
  %434.0
}

def @func_15004() -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint8], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) {
  %435 = @func_9522() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %436 = %435.0;
  %437 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  %438 = @func_9099() /* ty=Tensor[(10, 12, 2), float32] */;
  %439 = @func_9099() /* ty=Tensor[(10, 12, 2), float32] */;
  (%436, %437, %438, %439)
}

def @func_8910() -> (Tensor[(10, 12, 2), float64], Tensor[(10, 12, 2), float32]) {
  %440 = @func_8752() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(10, 12, 2), float64]) */;
  %441 = @func_8803() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %442 = %440.2;
  %443 = %441.1;
  (%442, %443)
}

def @func_14610() -> Tensor[(672), int32] {
  @func_6787() /* ty=Tensor[(672), int32] */
}

def @func_13061() -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  %444 = @func_9728() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %445 = %444.0;
  %446 = @func_13030() /* ty=Tensor[(10, 12, 2), float32] */;
  (%445, %446)
}

def @func_7336() -> (Tensor[(672), int32],) {
  %447 = @func_6651() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
  %448 = %447.1;
  (%448,)
}

def @func_13964(%var_13949: Tensor[(1152), uint8]) -> (Tensor[(10, 12, 2), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8]) {
  %449 = cast(meta[relay.Constant][24] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %450 = reshape(%449, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
  %451 = @func_651(%450) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
  %452 = cast(%var_13949, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %453 = cast(%var_13949, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %454 = reshape(%452, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %455 = reshape(%453, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %456 = @func_6014(%454, %455) /* ty=(Tensor[(6, 12, 16), uint8], Tensor[(6, 12, 16), uint64]) */;
  %457 = @func_8871() /* ty=Tensor[(10, 12, 2), float32] */;
  %458 = %451.0;
  %459 = %456.0;
  (%457, %458, meta[relay.Constant][24] /* ty=Tensor[(672), int32] */, %459, %var_13949)
}

def @func_11245() -> (Tensor[(15, 2, 1), float64],) {
  %460 = @func_8221() /* ty=Tensor[(15, 2, 1), float64] */;
  (%460,)
}

def @func_4241(%var_4236: Tensor[(8, 7, 1), float64], %var_4237: Tensor[(8, 7, 14), float64]) -> (Tensor[(8, 7, 14), float64],) {
  %461 = cast(%var_4236, dtype="float64") /* ty=Tensor[(8, 7, 1), float64] */;
  %462 = cast(%var_4237, dtype="float64") /* ty=Tensor[(8, 7, 14), float64] */;
  %463 = floor_divide(%461, %462) /* ty=Tensor[(8, 7, 14), float64] */;
  (%463,)
}

def @func_12361() -> (Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool]) {
  %464 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %465 = %464.2;
  %466 = @func_10237() /* ty=Tensor[(8, 6, 14), bool] */;
  (%465, %466)
}

def @func_15507() -> Tensor[(672), int32] {
  @func_10082() /* ty=Tensor[(672), int32] */
}

def @func_6172(%var_6150: Tensor[(15, 2, 672), uint8]) -> (Tensor[(15, 2, 672), float32], Tensor[(10, 12, 2), float32]) {
  %467 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  %468 = cast(%var_6150, dtype="int32") /* ty=Tensor[(15, 2, 672), int32] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="int32") /* ty=Tensor[(15, 2, 672), int32] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %472 = multiply(%470, %471) /* ty=Tensor[(15, 2, 672), int32] */;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(15, 2, 672), float32] */;
  %474 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %475 = sin(%473) /* ty=Tensor[(15, 2, 672), float32] */;
  %476 = %474.0;
  (%475, %476)
}

def @func_8592() -> Tensor[(10, 12, 2), float32] {
  %477 = @func_8384() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %477.0
}

def @func_8849() -> (Tensor[(672), int32], Tensor[(70), bool]) {
  %478 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %479 = @func_6787() /* ty=Tensor[(672), int32] */;
  %480 = %478.1;
  (%479, %480)
}

def @func_11789() -> Tensor[(10, 12, 2), float32] {
  @func_9099() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_10212() -> (Tensor[(15, 2, 1), float32], Tensor[(15, 2, 1), float64]) {
  %481 = @func_8221() /* ty=Tensor[(15, 2, 1), float64] */;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  %483 = cast(%481, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
  %484 = asinh(%482) /* ty=Tensor[(15, 2, 1), float32] */;
  %485 = cos(%483) /* ty=Tensor[(15, 2, 1), float64] */;
  (%484, %485)
}

def @func_13663(%var_13650: Tensor[(6), float32]) -> (Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(6), float32]) {
  %486 = @func_12361() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool]) */;
  %487 = cast(%var_13650, dtype="float32") /* ty=Tensor[(6), float32] */;
  %488 = reshape(%487, newshape=[3, 2]) /* ty=Tensor[(3, 2), float32] */;
  %489 = @func_10426(%488) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint8], Tensor[(672), int32], Tensor[(3, 2), float32], Tensor[(15, 2, 672), float64], Tensor[(10, 12, 2), float32]) */;
  %490 = %486.1;
  %491 = %489.5;
  (%490, %491, %var_13650)
}

def @func_10426(%var_10411: Tensor[(3, 2), float32]) -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint8], Tensor[(672), int32], Tensor[(3, 2), float32], Tensor[(15, 2, 672), float64], Tensor[(10, 12, 2), float32]) {
  %492 = @func_8549() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) */;
  %493 = @func_9839() /* ty=Tensor[(672), int32] */;
  %494 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  %495 = cast(%493, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %496 = cast(%494, dtype="uint8") /* ty=Tensor[(15, 2, 672), uint8] */;
  %497 = cast(%var_10411, dtype="float32") /* ty=Tensor[(3, 2), float32] */;
  %498 = cast(%493, dtype="int32") /* ty=Tensor[(672), int32] */;
  %499 = reshape(%497, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), float32] */;
  %500 = reshape(%498, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %501 = @func_3069(%499, %500) /* ty=(Tensor[(?, 2, 3), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */;
  %502 = cast(%494, dtype="float64") /* ty=Tensor[(15, 2, 672), float64] */;
  %503 = @func_10052() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %504 = %492.1;
  %505 = bitwise_and(%495, %496) /* ty=Tensor[(15, 2, 672), uint8] */;
  %506 = %501.2;
  %507 = cos(%502) /* ty=Tensor[(15, 2, 672), float64] */;
  %508 = %503.0;
  (%504, %505, %506, %var_10411, %507, %508)
}

def @func_8834() -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(70), bool]) {
  %509 = @func_6651() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
  %510 = @func_7066() /* ty=(Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) */;
  %511 = @func_8120() /* ty=(Tensor[(70), bool],) */;
  %512 = %509.0;
  %513 = @func_6787() /* ty=Tensor[(672), int32] */;
  %514 = %510.2;
  %515 = %511.0;
  (%512, %513, %514, %515)
}

def @func_12173() -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), bool], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) {
  %516 = @func_7429() /* ty=Tensor[(15, 2, 1), float64] */;
  %517 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %518 = %517.0;
  %519 = cast(%516, dtype="bool") /* ty=Tensor[(15, 2, 1), bool] */;
  %520 = cast(%518, dtype="bool") /* ty=Tensor[(672), bool] */;
  %521 = @func_7907() /* ty=Tensor[(10, 12, 2), float32] */;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %523 = reshape(%522, newshape=[10, 12, 2]) /* ty=Tensor[(10, 12, 2), float32] */;
  %524 = @func_7540(%523) /* ty=(Tensor[(10, 12, 2), float32],) */;
  %525 = logical_and(%519, %520) /* ty=Tensor[(15, 2, 672), bool] */;
  %526 = @func_6227() /* ty=Tensor[(10, 12, 2), float32] */;
  %527 = %524.0;
  (%521, %525, %526, %527)
}

def @func_13030() -> Tensor[(10, 12, 2), float32] {
  @func_6227() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_13295() -> (Tensor[(10, 12, 2), float32],) {
  %528 = @func_9099() /* ty=Tensor[(10, 12, 2), float32] */;
  (%528,)
}

def @func_15145() -> (Tensor[(672), int32],) {
  %529 = @func_10082() /* ty=Tensor[(672), int32] */;
  (%529,)
}

def @func_8871() -> Tensor[(10, 12, 2), float32] {
  %530 = @func_8384() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %530.0
}

def @func_5623(%var_5595: Tensor[(384), float32]) -> (Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), float32]) {
  %531 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %532 = cast(%var_5595, dtype="float32") /* ty=Tensor[(384), float32] */;
  %533 = reshape(%532, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), float32] */;
  %534 = @func_2887(%533) /* ty=(Tensor[(4, 6, 16), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */;
  %535 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %536 = %535.1;
  %537 = cast(%536, dtype="float64") /* ty=Tensor[(8, 6, 14), float64] */;
  %538 = sigmoid(%537) /* ty=Tensor[(8, 6, 14), float64] */;
  %539 = cast(%538, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
  %540 = %531.0;
  %541 = @func_5310() /* ty=Tensor[(672), int32] */;
  %542 = @func_4896() /* ty=Tensor[(15, 2, 1), float64] */;
  %543 = %534.0;
  %544 = log(%539) /* ty=Tensor[(8, 6, 14), float32] */;
  (%540, %541, %542, %543, %var_5595, %544)
}

def @func_9593() -> (Tensor[(15, 2, 1), float64], Tensor[(384), float32], Tensor[(384), float32], Tensor[(672), int32]) {
  %545 = @func_5966() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %546 = %545.0;
  %547 = cast(%546, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
  %548 = cast(meta[relay.Constant][25] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %549 = reshape(%548, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %550 = @func_7729(%549) /* ty=(Tensor[(672), int32], Tensor[(384), float32], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(4, 6, 16), float64]) */;
  %551 = asin(%547) /* ty=Tensor[(15, 2, 1), float64] */;
  %552 = %550.1;
  %553 = @func_5310() /* ty=Tensor[(672), int32] */;
  (%551, %552, meta[relay.Constant][25] /* ty=Tensor[(384), float32] */, %553)
}

def @func_14270() -> (Tensor[(10, 12, 2), float32],) {
  %554 = @func_11587() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %555 = %554.0;
  (%555,)
}

def @func_12086() -> (Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) {
  %556 = @func_11918() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
  %557 = @func_10775() /* ty=Tensor[(10, 12, 2), float32] */;
  %558 = @func_5310() /* ty=Tensor[(672), int32] */;
  %559 = %556.0;
  (%557, %558, %559)
}

def @func_14558() -> (Tensor[(672), int32],) {
  %560 = @func_8472() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
  %561 = %560.1;
  (%561,)
}

def @func_4807(%var_4799: Tensor[(784), float64]) -> (Tensor[(15, 2, 1), float64], Tensor[(8, 7, 14), float64], Tensor[(784), float64], Tensor[(2, 28), float64]) {
  %562 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 28), float64] */, dtype="float64") /* ty=Tensor[(2, 28), float64] */;
  %563 = cast(%var_4799, dtype="float64") /* ty=Tensor[(784), float64] */;
  %564 = reshape(%562, newshape=[8, 7, 1]) /* ty=Tensor[(8, 7, 1), float64] */;
  %565 = reshape(%563, newshape=[8, 7, 14]) /* ty=Tensor[(8, 7, 14), float64] */;
  %566 = @func_4241(%564, %565) /* ty=(Tensor[(8, 7, 14), float64],) */;
  %567 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 28), float64] */, dtype="float64") /* ty=Tensor[(2, 28), float64] */;
  %568 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %569 = %566.0;
  %570 = rsqrt(%567) /* ty=Tensor[(2, 28), float64] */;
  (%568, %569, %var_4799, %570)
}

def @func_9630() -> Tensor[(15, 2, 1), float32] {
  %571 = @func_9389() /* ty=Tensor[(15, 2, 1), float64] */;
  %572 = cast(%571, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  sqrt(%572) /* ty=Tensor[(15, 2, 1), float32] */
}

def @func_15748() -> Tensor[(672), int32] {
  @func_6040() /* ty=Tensor[(672), int32] */
}

def @func_7490() -> Tensor[(10, 12, 2), float32] {
  @func_7291() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_13589(%var_13586: Tensor[(4, 13, 8), float64]) -> Tensor[(4, 13, 8), float64] {
  %573 = cast(%var_13586, dtype="float64") /* ty=Tensor[(4, 13, 8), float64] */;
  asin(%573) /* ty=Tensor[(4, 13, 8), float64] */
}

def @func_15638(%var_15551: Tensor[(15, 2, 15), float64], %var_15614: Tensor[(1152), uint8]) -> (Tensor[(15, 2, 15), bool], Tensor[(8, 6, 14), float32], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 15), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8], Tensor[(?, 9, 12), float64], Tensor[(108), float64], Tensor[(15, 2, 1), float64]) {
  %574 = @func_6651() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
  %575 = %574.0;
  %576 = cast(%575, dtype="bool") /* ty=Tensor[(15, 2, 1), bool] */;
  %577 = cast(%var_15551, dtype="bool") /* ty=Tensor[(15, 2, 15), bool] */;
  %578 = less(%576, %577) /* ty=Tensor[(15, 2, 15), bool] */;
  %579 = cast(%575, dtype="bool") /* ty=Tensor[(15, 2, 1), bool] */;
  %580 = cast(%578, dtype="bool") /* ty=Tensor[(15, 2, 15), bool] */;
  %581 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %582 = @func_15304() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %583 = cast(%575, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  %584 = cast(%var_15551, dtype="float32") /* ty=Tensor[(15, 2, 15), float32] */;
  %585 = cast(%var_15614, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %586 = cast(%var_15614, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %587 = reshape(%585, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %588 = reshape(%586, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %589 = @func_6014(%587, %588) /* ty=(Tensor[(6, 12, 16), uint8], Tensor[(6, 12, 16), uint64]) */;
  %590 = cast(meta[relay.Constant][27] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %591 = reshape(%590, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float64] */;
  %592 = @func_12289(%591) /* ty=(Tensor[(?, 9, 12), float64], Tensor[(1, 9, 12), float64]) */;
  %593 = @func_8625() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %594 = logical_or(%579, %580) /* ty=Tensor[(15, 2, 15), bool] */;
  %595 = %581.3;
  %596 = %582.0;
  %597 = power(%583, %584) /* ty=Tensor[(15, 2, 15), float32] */;
  %598 = %589.0;
  %599 = %592.0;
  %600 = %593.0;
  (%594, %595, %596, %597, %598, %var_15614, %599, meta[relay.Constant][27] /* ty=Tensor[(108), float64] */, %600)
}

def @func_10775() -> Tensor[(10, 12, 2), float32] {
  %601 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %601.0
}

def @func_11918() -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32]) {
  %602 = @func_11124() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %603 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
  %604 = %602.0;
  %605 = %603.1;
  (%604, %605)
}

def @func_15474() -> Tensor[(10, 12, 2), float32] {
  %606 = @func_10518() /* ty=(Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %606.2
}

def @func_2548(%var_2485: Tensor[(10, 4, 3), bool]) -> (Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) {
  %607 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 4, 1), bool] */, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
  %608 = cast(%var_2485, dtype="bool") /* ty=Tensor[(10, 4, 3), bool] */;
  %609 = cast(meta[relay.Constant][29] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %610 = cast(meta[relay.Constant][29] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %611 = reshape(%609, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %612 = reshape(%610, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %613 = @func_2266(%611, %612) /* ty=(Tensor[(9, 14, 15), float64],) */;
  %614 = cast(meta[relay.Constant][30] /* ty=Tensor[(1755), int8] */, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %615 = cast(meta[relay.Constant][30] /* ty=Tensor[(1755), int8] */, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %616 = reshape(%614, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
  %617 = reshape(%615, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
  %618 = @func_878(%616, %617) /* ty=(Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) */;
  %619 = cast(meta[relay.Constant][29] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %620 = cast(meta[relay.Constant][29] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %621 = reshape(%619, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %622 = reshape(%620, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %623 = @func_2266(%621, %622) /* ty=(Tensor[(9, 14, 15), float64],) */;
  %624 = %618.0;
  %625 = cast(%624, dtype="int8") /* ty=Tensor[(13, 9, 15), int8] */;
  %626 = cast(meta[relay.Constant][30] /* ty=Tensor[(1755), int8] */, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %627 = reshape(%625, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
  %628 = reshape(%626, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
  %629 = @func_878(%627, %628) /* ty=(Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) */;
  %630 = %613.0;
  %631 = cast(%630, dtype="float64") /* ty=Tensor[(9, 14, 15), float64] */;
  %632 = cast(meta[relay.Constant][29] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %633 = reshape(%631, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %634 = reshape(%632, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %635 = @func_2266(%633, %634) /* ty=(Tensor[(9, 14, 15), float64],) */;
  %636 = cast(meta[relay.Constant][30] /* ty=Tensor[(1755), int8] */, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %637 = cast(%624, dtype="int8") /* ty=Tensor[(13, 9, 15), int8] */;
  %638 = reshape(%636, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
  %639 = reshape(%637, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
  %640 = @func_878(%638, %639) /* ty=(Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) */;
  %641 = logical_or(%607, %608) /* ty=Tensor[(10, 4, 3), bool] */;
  %642 = %623.0;
  %643 = %629.2;
  %644 = %635.0;
  %645 = %640.0;
  (%641, %630, meta[relay.Constant][29] /* ty=Tensor[(1890), float64] */, %624, meta[relay.Constant][30] /* ty=Tensor[(1755), int8] */, %642, %643, %644, %645)
}

def @func_9227(%var_9198: Tensor[(10, 12, 2), float32]) -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) {
  %646 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %647 = %646.0;
  %648 = cast(%var_9198, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %652 = cast(meta[relay.Constant][31] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %653 = reshape(%652, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
  %654 = @func_5437(%653) /* ty=(Tensor[(15, 2, 3), uint32], Tensor[(672), int32]) */;
  %655 = mod(%650, %651) /* ty=Tensor[(10, 12, 2), float32] */;
  %656 = %654.0;
  (%655, %656, meta[relay.Constant][31] /* ty=Tensor[(90), float64] */)
}

def @func_13803(%var_13784: Tensor[(72), float64]) -> (Tensor[(15, 2, 1), float64], Tensor[(8, 9, 1), float64], float64, Tensor[(72), float64], Tensor[(15, 2, 1), float64]) {
  %657 = cast(-2.18383f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %658 = cast(%var_13784, dtype="float64") /* ty=Tensor[(72), float64] */;
  %659 = reshape(%657, newshape=[]) /* ty=float64 */;
  %660 = reshape(%658, newshape=[8, 9, 1]) /* ty=Tensor[(8, 9, 1), float64] */;
  %661 = @func_13239(%659, %660) /* ty=(Tensor[(8, 9, 1), float64],) */;
  %662 = @func_8625() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %663 = @func_10639() /* ty=Tensor[(15, 2, 1), float64] */;
  %664 = %661.0;
  %665 = %662.0;
  (%663, %664, -2.18383f64 /* ty=float64 */, %var_13784, %665)
}

def @func_5663() -> Tensor[(10, 12, 2), float32] {
  %666 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %666.0
}

def @func_13739() -> (Tensor[(10, 12, 2), float32],) {
  %667 = @func_8871() /* ty=Tensor[(10, 12, 2), float32] */;
  (%667,)
}

def @func_12639() -> Tensor[(5, 10, 10), float32] {
  %668 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 10, 10), float32] */;
  log10(%668) /* ty=Tensor[(5, 10, 10), float32] */
}

def @func_15261() -> Tensor[(672), int32] {
  @func_10082() /* ty=Tensor[(672), int32] */
}

def @func_8384() -> (Tensor[(10, 12, 2), float32],) {
  %669 = @func_7756() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %670 = %669.0;
  (%670,)
}

def @func_15304() -> (Tensor[(15, 2, 1), float64],) {
  %671 = @func_9389() /* ty=Tensor[(15, 2, 1), float64] */;
  (%671,)
}

def @func_9099() -> Tensor[(10, 12, 2), float32] {
  %672 = @func_7756() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %672.0
}

def @func_5764(%var_5737: Tensor[(15, 2, 1), float64]) -> (Tensor[(15, 2, 672), float64], Tensor[(10, 12, 2), float32]) {
  %673 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %674 = cast(%var_5737, dtype="uint32") /* ty=Tensor[(15, 2, 1), uint32] */;
  %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%673, dtype="uint32") /* ty=Tensor[(15, 2, 1), uint32] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %678 = maximum(%676, %677) /* ty=Tensor[(15, 2, ?), uint32] */;
  %679 = @func_5310() /* ty=Tensor[(672), int32] */;
  %680 = cast(%678, dtype="bool") /* ty=Tensor[(15, 2, ?), bool] */;
  %681 = cast(%679, dtype="bool") /* ty=Tensor[(672), bool] */;
  %682 = less_equal(%680, %681) /* ty=Tensor[(15, 2, 672), bool] */;
  %683 = cast(%682, dtype="float32") /* ty=Tensor[(15, 2, 672), float32] */;
  %684 = tan(%683) /* ty=Tensor[(15, 2, 672), float32] */;
  %685 = cast(%684, dtype="float64") /* ty=Tensor[(15, 2, 672), float64] */;
  %686 = log2(%685) /* ty=Tensor[(15, 2, 672), float64] */;
  %687 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  (%686, %687)
}

def @func_10056() -> (Tensor[(15, 2, 1), float64],) {
  %688 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
  %689 = %688.2;
  (%689,)
}

def @func_9691() -> (Tensor[(672), int32], Tensor[(15, 2, 672), uint8]) {
  %690 = @func_6590() /* ty=(Tensor[(672), int32], Tensor[(672), int32]) */;
  %691 = %690.0;
  %692 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  (%691, %692)
}

def @func_10999() -> (Tensor[(5, 15, 10), float32],) {
  %693 = @func_10797() /* ty=Tensor[(5, 15, 10), float32] */;
  (%693,)
}

def @func_7907() -> Tensor[(10, 12, 2), float32] {
  %694 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %694.0
}

def @func_5820() -> Tensor[(672), int32] {
  %695 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %695.2
}

def @func_11426(%var_11327: Tensor[(1, 208), float64], %var_11370: Tensor[(384), float32]) -> (Tensor[(?, 208), bool], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), uint64], Tensor[(15, 2, 1), float64], Tensor[(784), float64]) {
  %696 = cast(%var_11327, dtype="float64") /* ty=Tensor[(1, 208), float64] */;
  %697 = reshape(%696, newshape=[4, 13, 4]) /* ty=Tensor[(4, 13, 4), float64] */;
  %698 = @func_5367(%697) /* ty=(Tensor[(4, 13, 4), float64],) */;
  %699 = %698.0;
  %700 = cast(%699, dtype="bool") /* ty=Tensor[(4, 13, 4), bool] */;
  %701 = shape_of(%var_11327, dtype="int32") /* ty=Tensor[(2), int32] */;
  %702 = cast(%var_11327, dtype="bool") /* ty=Tensor[(1, 208), bool] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %704 = cast(%var_11370, dtype="float32") /* ty=Tensor[(384), float32] */;
  %705 = reshape(%704, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %706 = @func_5623(%705) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), float32]) */;
  %707 = @func_7082() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
  %708 = %707.1;
  %709 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 6, 14), bool] */, dtype="uint64") /* ty=Tensor[(8, 6, 14), uint64] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="uint64") /* ty=Tensor[(8, 6, 14), uint64] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %713 = cast(meta[relay.Constant][34] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %714 = reshape(%713, newshape=[4, 196]) /* ty=Tensor[(4, 196), float64] */;
  %715 = @func_8148(%714) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(784), float64], Tensor[(4, 196), float64]) */;
  %716 = greater_equal(%702, %703) /* ty=Tensor[(?, 208), bool] */;
  %717 = %706.3;
  %718 = left_shift(%711, %712) /* ty=Tensor[(8, 6, 14), uint64] */;
  %719 = %715.0;
  (%716, %717, %var_11370, %718, %719, meta[relay.Constant][34] /* ty=Tensor[(784), float64] */)
}

def @func_6787() -> Tensor[(672), int32] {
  @func_5820() /* ty=Tensor[(672), int32] */
}

def @func_12420() -> Tensor[(672), int32] {
  @func_10082() /* ty=Tensor[(672), int32] */
}

def @func_9665() -> (Tensor[(672), int32],) {
  %720 = @func_6590() /* ty=(Tensor[(672), int32], Tensor[(672), int32]) */;
  %721 = %720.0;
  (%721,)
}

def @func_10237() -> Tensor[(8, 6, 14), bool] {
  %722 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %722.1
}

def @func_5154() -> (Tensor[(672), int32],) {
  %723 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %724 = %723.2;
  (%724,)
}

def @func_10639() -> Tensor[(15, 2, 1), float64] {
  @func_9136() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_5009() -> (Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) {
  %725 = cast(meta[relay.Constant][35] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
  %726 = cast(meta[relay.Constant][35] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
  %727 = reshape(%725, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
  %728 = reshape(%726, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
  %729 = @func_3114(%727, %728) /* ty=(Tensor[(2, 5, 7), bool], Tensor[(10, 4, 3), bool], Tensor[(120), bool], Tensor[(2, 5, 7), float64]) */;
  %730 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
  %732 = %729.1;
  %733 = tan(%731) /* ty=Tensor[(15, 2, 1), float64] */;
  (%732, meta[relay.Constant][35] /* ty=Tensor[(70), bool] */, %733)
}

def @func_6507() -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  %734 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
  %735 = %734.2;
  %736 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  (%735, %736)
}

def @func_8221() -> Tensor[(15, 2, 1), float64] {
  @func_7429() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_11890() -> (Tensor[(10, 12, 2), float32], Tensor[(784), float64], Tensor[(784), float64], Tensor[(10, 12, 2), float32]) {
  %737 = @func_8384() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %738 = %737.0;
  %739 = cast(%738, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %740 = cast(meta[relay.Constant][36] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %741 = reshape(%740, newshape=[4, 196]) /* ty=Tensor[(4, 196), float64] */;
  %742 = @func_8148(%741) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(784), float64], Tensor[(4, 196), float64]) */;
  %743 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %744 = log(%739) /* ty=Tensor[(10, 12, 2), float32] */;
  %745 = %742.1;
  %746 = %743.0;
  (%744, %745, meta[relay.Constant][36] /* ty=Tensor[(784), float64] */, %746)
}

def @func_14781(%var_14745: Tensor[(6), float32], %var_14761: Tensor[(1344), float32], %var_14762: Tensor[(2, 28), float64]) -> (Tensor[(10, 12, 2), float32], Tensor[(6), float32], Tensor[(8, 6, 14), float64], Tensor[(784), float64], Tensor[(1344), float32], Tensor[(2, 28), float64], Tensor[(672), int32]) {
  %747 = cast(%var_14745, dtype="float32") /* ty=Tensor[(6), float32] */;
  %748 = reshape(%747, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %749 = @func_13663(%748) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(6), float32]) */;
  %750 = %749.0;
  %751 = cast(%750, dtype="float64") /* ty=Tensor[(8, 6, 14), float64] */;
  %752 = cast(%var_14761, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %753 = cast(%var_14762, dtype="float64") /* ty=Tensor[(2, 28), float64] */;
  %754 = reshape(%752, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %755 = reshape(%753, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %756 = @func_11719(%754, %755) /* ty=(Tensor[(10, 12, 2), float64], Tensor[(784), float64], Tensor[(1344), float32], Tensor[(56), float64], Tensor[(10, 12, 2), float32]) */;
  %757 = @func_9593() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(384), float32], Tensor[(384), float32], Tensor[(672), int32]) */;
  %758 = @func_13030() /* ty=Tensor[(10, 12, 2), float32] */;
  %759 = sin(%751) /* ty=Tensor[(8, 6, 14), float64] */;
  %760 = %756.1;
  %761 = %757.3;
  (%758, %var_14745, %759, %760, %var_14761, %var_14762, %761)
}

def @func_10683() -> (Tensor[(10, 12, 2), float32],) {
  %762 = @func_7756() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %763 = %762.0;
  (%763,)
}

def @func_7082() -> (Tensor[(672), int32], Tensor[(8, 6, 14), bool]) {
  %764 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %765 = @func_5310() /* ty=Tensor[(672), int32] */;
  %766 = %764.1;
  (%765, %766)
}

def @func_5255(%var_5251: Tensor[(96, 4), float32]) -> (Tensor[(10, 4, 3), bool], Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(96, 4), float32]) {
  %767 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %768 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %769 = cast(%var_5251, dtype="float32") /* ty=Tensor[(96, 4), float32] */;
  %770 = reshape(%769, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), float32] */;
  %771 = @func_2887(%770) /* ty=(Tensor[(4, 6, 16), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */;
  %772 = %767.0;
  %773 = %768.2;
  %774 = %771.1;
  (%772, %773, %774, %var_5251)
}

def @func_7729(%var_7677: Tensor[(384), float32]) -> (Tensor[(672), int32], Tensor[(384), float32], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(4, 6, 16), float64]) {
  %775 = cast(meta[relay.Constant][37] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %776 = cast(meta[relay.Constant][37] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %777 = reshape(%775, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %778 = reshape(%776, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %779 = @func_2266(%777, %778) /* ty=(Tensor[(9, 14, 15), float64],) */;
  %780 = cast(%var_7677, dtype="float32") /* ty=Tensor[(384), float32] */;
  %781 = reshape(%780, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %782 = @func_5623(%781) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), float32]) */;
  %783 = %782.3;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(4, 6, 16), float64] */;
  %785 = exp(%784) /* ty=Tensor[(4, 6, 16), float64] */;
  %786 = cast(%785, dtype="float64") /* ty=Tensor[(4, 6, 16), float64] */;
  %787 = @func_5310() /* ty=Tensor[(672), int32] */;
  %788 = %779.0;
  %789 = acosh(%786) /* ty=Tensor[(4, 6, 16), float64] */;
  (%787, %var_7677, %788, meta[relay.Constant][37] /* ty=Tensor[(1890), float64] */, %789)
}

def @func_8752() -> (Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(10, 12, 2), float64]) {
  %790 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %791 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(10, 12, 2), float64] */;
  %793 = %790.0;
  %794 = @func_6040() /* ty=Tensor[(672), int32] */;
  %795 = atanh(%792) /* ty=Tensor[(10, 12, 2), float64] */;
  (%793, %794, %795)
}

def @func_7989(%var_7965: Tensor[(4, 16, 4), float32]) -> (Tensor[(4, 16, 4), float64],) {
  %796 = cast(%var_7965, dtype="float32") /* ty=Tensor[(4, 16, 4), float32] */;
  %797 = tan(%796) /* ty=Tensor[(4, 16, 4), float32] */;
  %798 = cast(%797, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
  %799 = acosh(%798) /* ty=Tensor[(4, 16, 4), float64] */;
  (%799,)
}

def @func_12323() -> (Tensor[(10, 12, 2), float64], Tensor[(10, 12, 2), float32]) {
  %800 = @func_11084() /* ty=(Tensor[(10, 12, 2), float64],) */;
  %801 = @func_9522() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %802 = %801.2;
  %803 = cast(%802, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %804 = %800.0;
  %805 = acosh(%803) /* ty=Tensor[(10, 12, 2), float32] */;
  (%804, %805)
}

def @func_5117(%var_5094: Tensor[(120), int64]) -> (Tensor[(15, 2, 1), float64], Tensor[(24, 16), uint16], Tensor[(120), int64], Tensor[(96, 4), float32], Tensor[(70), bool]) {
  %806 = cast(%var_5094, dtype="int64") /* ty=Tensor[(120), int64] */;
  %807 = cast(%var_5094, dtype="int64") /* ty=Tensor[(120), int64] */;
  %808 = cast(meta[relay.Constant][38] /* ty=Tensor[(96, 4), float32] */, dtype="float32") /* ty=Tensor[(96, 4), float32] */;
  %809 = cast(meta[relay.Constant][38] /* ty=Tensor[(96, 4), float32] */, dtype="float32") /* ty=Tensor[(96, 4), float32] */;
  %810 = reshape(%806, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), int64] */;
  %811 = reshape(%807, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), int64] */;
  %812 = reshape(%808, newshape=[24, 16]) /* ty=Tensor[(24, 16), float32] */;
  %813 = reshape(%809, newshape=[24, 16]) /* ty=Tensor[(24, 16), float32] */;
  %814 = @func_4388(%810, %811, %812, %813) /* ty=(Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float64], Tensor[(672), int32], Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(24, 16), uint16], Tensor[(120), bool], Tensor[(70), bool], Tensor[(10, 4, 3), bool], Tensor[(4, 6, 16), float32]) */;
  %815 = cast(%var_5094, dtype="int64") /* ty=Tensor[(120), int64] */;
  %816 = cast(%var_5094, dtype="int64") /* ty=Tensor[(120), int64] */;
  %817 = %814.6;
  %818 = cast(%817, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
  %819 = cast(%817, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
  %820 = reshape(%815, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), int64] */;
  %821 = reshape(%816, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), int64] */;
  %822 = reshape(%818, newshape=[24, 16]) /* ty=Tensor[(24, 16), float32] */;
  %823 = reshape(%819, newshape=[24, 16]) /* ty=Tensor[(24, 16), float32] */;
  %824 = @func_4388(%820, %821, %822, %823) /* ty=(Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float64], Tensor[(672), int32], Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(24, 16), uint16], Tensor[(120), bool], Tensor[(70), bool], Tensor[(10, 4, 3), bool], Tensor[(4, 6, 16), float32]) */;
  %825 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %826 = %824.8;
  (%825, %817, %var_5094, meta[relay.Constant][38] /* ty=Tensor[(96, 4), float32] */, %826)
}

def @func_12289(%var_12264: Tensor[(1, 9, 12), float64]) -> (Tensor[(?, 9, 12), float64], Tensor[(1, 9, 12), float64]) {
  %827 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %828 = shape_of(%var_12264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%var_12264, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %831 = cast(%var_12264, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %832 = floor_mod(%829, %830) /* ty=Tensor[(?, 9, 12), float64] */;
  %833 = cos(%831) /* ty=Tensor[(1, 9, 12), float64] */;
  (%832, %833)
}

def @func_9469(%var_9451: Tensor[(9, 9, 16), float32]) -> (Tensor[(9, 9, 16), float32], Tensor[(5, 15, 10), float32]) {
  %834 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 9, 16), float32] */, dtype="float32") /* ty=Tensor[(9, 9, 16), float32] */;
  %835 = shape_of(%var_9451, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%var_9451, dtype="float32") /* ty=Tensor[(9, 9, 16), float32] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %838 = floor_mod(%836, %837) /* ty=Tensor[(9, 9, 16), float32] */;
  %839 = @func_8031() /* ty=Tensor[(5, 15, 10), float32] */;
  (%838, %839)
}

def @func_9839() -> Tensor[(672), int32] {
  %840 = @func_7336() /* ty=(Tensor[(672), int32],) */;
  %840.0
}

def @func_11124() -> (Tensor[(15, 2, 1), float64],) {
  %841 = @func_6507() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %842 = %841.0;
  (%842,)
}

def @func_13857() -> (Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(8, 7, 14), float64], Tensor[(14, 4), float64], Tensor[(1, 784), float64]) {
  %843 = @func_6934() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
  %844 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 4), float64] */;
  %845 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 784), float64] */, dtype="float64") /* ty=Tensor[(1, 784), float64] */;
  %846 = reshape(%844, newshape=[8, 7, 1]) /* ty=Tensor[(8, 7, 1), float64] */;
  %847 = reshape(%845, newshape=[8, 7, 14]) /* ty=Tensor[(8, 7, 14), float64] */;
  %848 = @func_4241(%846, %847) /* ty=(Tensor[(8, 7, 14), float64],) */;
  %849 = %843.1;
  %850 = @func_10587() /* ty=Tensor[(10, 12, 2), float32] */;
  %851 = %848.0;
  (%849, %850, %851, meta[relay.Constant][41] /* ty=Tensor[(14, 4), float64] */, meta[relay.Constant][42] /* ty=Tensor[(1, 784), float64] */)
}

def @func_5966() -> (Tensor[(15, 2, 1), float64],) {
  %852 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %853 = %852.2;
  (%853,)
}

def @func_14398() -> (Tensor[(672), int32], Tensor[(672), int32], Tensor[(672), int32]) {
  %854 = @func_8752() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(10, 12, 2), float64]) */;
  %855 = @func_12420() /* ty=Tensor[(672), int32] */;
  %856 = %854.1;
  %857 = @func_6576() /* ty=Tensor[(672), int32] */;
  (%855, %856, %857)
}

def @func_8549() -> (Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) {
  %858 = @func_8106() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %859 = @func_7291() /* ty=Tensor[(10, 12, 2), float32] */;
  %860 = %858.0;
  (%859, %860)
}

def @func_10518() -> (Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  %861 = @func_6934() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
  %862 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %863 = %861.1;
  %864 = @func_9389() /* ty=Tensor[(15, 2, 1), float64] */;
  %865 = %862.0;
  (%863, %864, %865)
}

def @func_9136() -> Tensor[(15, 2, 1), float64] {
  @func_4760() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_12749(%var_12726: uint8, %var_12727: Tensor[(1, 3, 11), uint8]) -> (Tensor[(1, 3, 11), uint8], Tensor[(10, 12, 2), float32]) {
  %866 = cast(%var_12726, dtype="uint8") /* ty=uint8 */;
  %867 = cast(%var_12727, dtype="uint8") /* ty=Tensor[(1, 3, 11), uint8] */;
  %868 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %869 = bitwise_xor(%866, %867) /* ty=Tensor[(1, 3, 11), uint8] */;
  %870 = %868.0;
  (%869, %870)
}

def @main() -> (Tensor[(15, 2, 70), uint8],) {
  %871 = @func_11689() /* ty=(Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64]) */;
  %872 = %871.2;
  %873 = @func_13138() /* ty=(Tensor[(70), bool],) */;
  %874 = %873.0;
  %875 = cast(%872, dtype="uint8") /* ty=Tensor[(15, 2, 1), uint8] */;
  %876 = cast(%874, dtype="uint8") /* ty=Tensor[(70), uint8] */;
  %877 = minimum(%875, %876) /* ty=Tensor[(15, 2, 70), uint8] */;
  (%877,)
}

def @func_11689() -> (Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64]) {
  %878 = @func_9522() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %879 = @func_6040() /* ty=Tensor[(672), int32] */;
  %880 = %878.1;
  %881 = @func_8221() /* ty=Tensor[(15, 2, 1), float64] */;
  (%879, %880, %881)
}

def @func_7540(%var_7529: Tensor[(10, 12, 2), float32]) -> (Tensor[(10, 12, 2), float32],) {
  %882 = @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %883 = %882.0;
  %884 = cast(%var_7529, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(%883, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %888 = floor_divide(%886, %887) /* ty=Tensor[(10, 12, 2), float32] */;
  (%888,)
}

def @func_7151(%var_7144: Tensor[(1152), uint8]) -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8]) {
  %889 = cast(%var_7144, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %890 = cast(%var_7144, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %891 = reshape(%889, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %892 = reshape(%890, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %893 = @func_6014(%891, %892) /* ty=(Tensor[(6, 12, 16), uint8], Tensor[(6, 12, 16), uint64]) */;
  %894 = @func_4896() /* ty=Tensor[(15, 2, 1), float64] */;
  %895 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  %896 = %893.0;
  (%894, %895, %896, %var_7144)
}

def @func_6040() -> Tensor[(672), int32] {
  @func_5820() /* ty=Tensor[(672), int32] */
}

def @func_5869() -> (Tensor[(10, 12, 2), float32],) {
  %897 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %898 = %897.0;
  (%898,)
}

def @func_7756() -> (Tensor[(10, 12, 2), float32],) {
  %899 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  (%899,)
}

def @func_10587() -> Tensor[(10, 12, 2), float32] {
  %900 = @func_8910() /* ty=(Tensor[(10, 12, 2), float64], Tensor[(10, 12, 2), float32]) */;
  %900.1
}

def @func_9336(%var_9316: Tensor[(3, 9, 5), int8], %var_9317: Tensor[(3, 9, 5), int8]) -> (Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) {
  %901 = cast(%var_9317, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
  %902 = shape_of(%var_9316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %903 = cast(%var_9316, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %905 = cast(%var_9317, dtype="float64") /* ty=Tensor[(3, 9, 5), float64] */;
  %906 = greater(%903, %904) /* ty=Tensor[(3, 9, 5), bool] */;
  %907 = sin(%905) /* ty=Tensor[(3, 9, 5), float64] */;
  (%906, %907)
}

def @func_14582() -> Tensor[(10, 12, 2), float64] {
  %908 = @func_11084() /* ty=(Tensor[(10, 12, 2), float64],) */;
  %908.0
}

def @func_12872() -> (Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint64], Tensor[(10, 12, 2), float32]) {
  %909 = @func_10936() /* ty=Tensor[(15, 2, 1), float64] */;
  %910 = @func_8170() /* ty=(Tensor[(672), int32],) */;
  %911 = %910.0;
  %912 = cast(%909, dtype="uint64") /* ty=Tensor[(15, 2, 1), uint64] */;
  %913 = cast(%911, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %914 = @func_9160() /* ty=Tensor[(10, 12, 2), float32] */;
  %915 = @func_9160() /* ty=Tensor[(10, 12, 2), float32] */;
  %916 = @func_9383() /* ty=Tensor[(10, 12, 2), float32] */;
  %917 = @func_7907() /* ty=Tensor[(10, 12, 2), float32] */;
  %918 = bitwise_xor(%912, %913) /* ty=Tensor[(15, 2, 672), uint64] */;
  %919 = @func_7907() /* ty=Tensor[(10, 12, 2), float32] */;
  (%914, %915, %916, %917, %918, %919)
}

def @func_15160() -> (Tensor[(672), int32],) {
  %920 = @func_13975() /* ty=(Tensor[(672), int32],) */;
  %921 = %920.0;
  (%921,)
}

def @func_13605() -> Tensor[(672), int32] {
  %922 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %922.0
}

def @func_12775(%var_12762: Tensor[(1890), float64]) -> (Tensor[(672), int32], Tensor[(9, 14, 15), float64], Tensor[(1890), float64]) {
  %923 = @func_12403() /* ty=(Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
  %924 = cast(%var_12762, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %925 = cast(%var_12762, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %926 = reshape(%924, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %927 = reshape(%925, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %928 = @func_2266(%926, %927) /* ty=(Tensor[(9, 14, 15), float64],) */;
  %929 = %923.0;
  %930 = %928.0;
  (%929, %930, %var_12762)
}

def @func_9717() -> (Tensor[(10, 12, 2), float32],) {
  %931 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  %932 = cast(%931, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %933 = tan(%932) /* ty=Tensor[(10, 12, 2), float32] */;
  (%933,)
}

def @func_9786() -> (Tensor[(672), int32], Tensor[(672), int32], Tensor[(10, 4, 3), bool], Tensor[(10, 12, 2), float32]) {
  %934 = @func_6934() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
  %935 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
  %936 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %937 = %934.0;
  %938 = %935.0;
  %939 = %936.0;
  %940 = @func_7291() /* ty=Tensor[(10, 12, 2), float32] */;
  (%937, %938, %939, %940)
}

def @func_3114(%var_3082: Tensor[(2, 5, 7), bool], %var_3083: Tensor[(2, 5, 7), bool]) -> (Tensor[(2, 5, 7), bool], Tensor[(10, 4, 3), bool], Tensor[(120), bool], Tensor[(2, 5, 7), float64]) {
  %941 = cast(%var_3083, dtype="bool") /* ty=Tensor[(2, 5, 7), bool] */;
  %942 = shape_of(%var_3082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%var_3082, dtype="bool") /* ty=Tensor[(2, 5, 7), bool] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %945 = cast(meta[relay.Constant][43] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %946 = reshape(%945, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), bool] */;
  %947 = @func_2548(%946) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) */;
  %948 = cast(%var_3083, dtype="float64") /* ty=Tensor[(2, 5, 7), float64] */;
  %949 = logical_or(%943, %944) /* ty=Tensor[(2, 5, 7), bool] */;
  %950 = %947.0;
  %951 = log2(%948) /* ty=Tensor[(2, 5, 7), float64] */;
  (%949, %950, meta[relay.Constant][43] /* ty=Tensor[(120), bool] */, %951)
}

def @func_9476() -> (Tensor[(672), int32],) {
  %952 = @func_6590() /* ty=(Tensor[(672), int32], Tensor[(672), int32]) */;
  %953 = %952.0;
  (%953,)
}

def @func_5168() -> (Tensor[(10, 12, 2), float32],) {
  %954 = cast(meta[relay.Constant][44] /* ty=Tensor[(10, 12, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %955 = atan(%954) /* ty=Tensor[(10, 12, 2), float32] */;
  (%955,)
}

def @func_9249() -> Tensor[(15, 2, 1), float64] {
  @func_8221() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_8031() -> Tensor[(5, 15, 10), float32] {
  %956 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 15, 10), float32] */;
  atanh(%956) /* ty=Tensor[(5, 15, 10), float32] */
}

def @func_8803() -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  %957 = @func_8106() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %958 = @func_4896() /* ty=Tensor[(15, 2, 1), float64] */;
  %959 = %957.0;
  (%958, %959)
}

def @func_11980() -> (Tensor[(15, 2, 1), float64],) {
  %960 = @func_5966() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %961 = %960.0;
  (%961,)
}

def @func_13902() -> Tensor[(15, 2, 1), float64] {
  %962 = @func_12361() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool]) */;
  %962.0
}

def @func_8518() -> (Tensor[(10, 12, 2), float32],) {
  %963 = @func_8384() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %964 = %963.0;
  (%964,)
}

def @func_14543() -> (Tensor[(15, 2, 1), float64],) {
  %965 = @func_13061() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %966 = %965.0;
  (%966,)
}

def @func_6227() -> Tensor[(10, 12, 2), float32] {
  %967 = @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %967.0
}

def @func_9389() -> Tensor[(15, 2, 1), float64] {
  @func_8221() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_12589() -> (Tensor[(10, 12, 2), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) {
  %968 = @func_11486() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64]) */;
  %969 = @func_8472() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
  %970 = @func_7907() /* ty=Tensor[(10, 12, 2), float32] */;
  %971 = %968.2;
  %972 = %969.1;
  (%970, %971, %972)
}

def @func_2266(%var_2255: Tensor[(9, 14, 15), float64], %var_2256: Tensor[(9, 14, 15), float64]) -> (Tensor[(9, 14, 15), float64],) {
  %973 = cast(%var_2256, dtype="float64") /* ty=Tensor[(9, 14, 15), float64] */;
  %974 = shape_of(%var_2255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %975 = cast(%var_2255, dtype="float64") /* ty=Tensor[(9, 14, 15), float64] */;
  %976 = dyn.reshape(%973, %974, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %977 = divide(%975, %976) /* ty=Tensor[(9, 14, 15), float64] */;
  (%977,)
}

def @func_9547() -> Tensor[(672), int32] {
  @func_5310() /* ty=Tensor[(672), int32] */
}

def @func_14104(%var_14078: Tensor[(15, 2, 672), uint8]) -> (Tensor[(15, 2, 672), float32], Tensor[(15, 2, 672), bool], Tensor[(15, 2, 1), float32]) {
  %978 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  %979 = cast(%var_14078, dtype="float32") /* ty=Tensor[(15, 2, 672), float32] */;
  %980 = shape_of(%978, dtype="int32") /* ty=Tensor[(3), int32] */;
  %981 = cast(%978, dtype="float32") /* ty=Tensor[(15, 2, 672), float32] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %983 = cast(%978, dtype="bool") /* ty=Tensor[(15, 2, 672), bool] */;
  %984 = shape_of(%var_14078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %985 = cast(%var_14078, dtype="bool") /* ty=Tensor[(15, 2, 672), bool] */;
  %986 = dyn.reshape(%983, %984, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %987 = floor_divide(%981, %982) /* ty=Tensor[(15, 2, 672), float32] */;
  %988 = greater(%985, %986) /* ty=Tensor[(15, 2, 672), bool] */;
  %989 = @func_9630() /* ty=Tensor[(15, 2, 1), float32] */;
  (%987, %988, %989)
}

def @func_10352() -> (Tensor[(672), int32], Tensor[(15, 2, 1), float32]) {
  %990 = @func_9547() /* ty=Tensor[(672), int32] */;
  %991 = @func_9630() /* ty=Tensor[(15, 2, 1), float32] */;
  (%990, %991)
}

def @func_7607(%var_7555: Tensor[(8, 15, 8), uint64]) -> (Tensor[(8, 15, 8), uint64], Tensor[(8, 15, 8), float64], Tensor[(8, 15, 8), float64]) {
  %992 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 15, 8), uint64] */, dtype="uint64") /* ty=Tensor[(8, 15, 8), uint64] */;
  %993 = shape_of(%var_7555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %994 = cast(%var_7555, dtype="uint64") /* ty=Tensor[(8, 15, 8), uint64] */;
  %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %996 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 15, 8), uint64] */, dtype="float64") /* ty=Tensor[(8, 15, 8), float64] */;
  %997 = shape_of(%var_7555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %998 = cast(%var_7555, dtype="float64") /* ty=Tensor[(8, 15, 8), float64] */;
  %999 = dyn.reshape(%996, %997, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1000 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 15, 8), uint64] */, dtype="float64") /* ty=Tensor[(8, 15, 8), float64] */;
  %1001 = multiply(%994, %995) /* ty=Tensor[(8, 15, 8), uint64] */;
  %1002 = divide(%998, %999) /* ty=Tensor[(8, 15, 8), float64] */;
  %1003 = erf(%1000) /* ty=Tensor[(8, 15, 8), float64] */;
  (%1001, %1002, %1003)
}

def @func_9888() -> (Tensor[(672), int32],) {
  %1004 = @func_6787() /* ty=Tensor[(672), int32] */;
  (%1004,)
}

def @func_8654(%var_8649: Tensor[(16, 13, 16), float32], %var_8650: Tensor[(16, 13, 16), float32]) -> (Tensor[(16, 13, 16), float32],) {
  %1005 = cast(%var_8650, dtype="float32") /* ty=Tensor[(16, 13, 16), float32] */;
  %1006 = shape_of(%var_8649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1007 = cast(%var_8649, dtype="float32") /* ty=Tensor[(16, 13, 16), float32] */;
  %1008 = dyn.reshape(%1005, %1006, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1009 = divide(%1007, %1008) /* ty=Tensor[(16, 13, 16), float32] */;
  (%1009,)
}

def @func_7291() -> Tensor[(10, 12, 2), float32] {
  %1010 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %1010.0
}

def @func_11756() -> Tensor[(672), int32] {
  @func_10082() /* ty=Tensor[(672), int32] */
}

def @func_13266() -> (Tensor[(70), bool],) {
  %1011 = @func_13138() /* ty=(Tensor[(70), bool],) */;
  %1012 = %1011.0;
  (%1012,)
}

def @func_6519() -> (Tensor[(10, 12, 2), float32],) {
  %1013 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  (%1013,)
}

def @func_6651() -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32]) {
  %1014 = @func_5966() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %1015 = %1014.0;
  %1016 = @func_6576() /* ty=Tensor[(672), int32] */;
  (%1015, %1016)
}

def @func_13690() -> (Tensor[(672), int32],) {
  %1017 = @func_9888() /* ty=(Tensor[(672), int32],) */;
  %1018 = %1017.0;
  (%1018,)
}

def @func_13138() -> (Tensor[(70), bool],) {
  %1019 = @func_8120() /* ty=(Tensor[(70), bool],) */;
  %1020 = %1019.0;
  (%1020,)
}

def @func_15295() -> (Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64]) {
  %1021 = @func_8472() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
  %1022 = @func_13902() /* ty=Tensor[(15, 2, 1), float64] */;
  %1023 = %1021.0;
  (%1022, %1023)
}

def @func_3069(%var_3055: Tensor[(1, 2, 3), float32], %var_3066: Tensor[(672), int32]) -> (Tensor[(?, 2, 3), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) {
  %1024 = cast(%var_3055, dtype="float32") /* ty=Tensor[(1, 2, 3), float32] */;
  %1025 = sin(%1024) /* ty=Tensor[(1, 2, 3), float32] */;
  %1026 = cast(%1025, dtype="float32") /* ty=Tensor[(1, 2, 3), float32] */;
  %1027 = shape_of(%var_3055, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1028 = cast(%var_3055, dtype="float32") /* ty=Tensor[(1, 2, 3), float32] */;
  %1029 = dyn.reshape(%1026, %1027, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1030 = cast(%var_3066, dtype="int32") /* ty=Tensor[(672), int32] */;
  %1031 = reshape(%1030, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
  %1032 = @func_651(%1031) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
  %1033 = mod(%1028, %1029) /* ty=Tensor[(?, 2, 3), float32] */;
  %1034 = %1032.0;
  (%1033, %1034, %var_3066)
}

def @func_7066() -> (Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) {
  %1035 = @func_6651() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
  %1036 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %1037 = @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %1038 = cast(meta[relay.Constant][48] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %1039 = reshape(%1038, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
  %1040 = @func_5437(%1039) /* ty=(Tensor[(15, 2, 3), uint32], Tensor[(672), int32]) */;
  %1041 = %1035.1;
  %1042 = %1036.0;
  %1043 = %1037.0;
  %1044 = %1040.0;
  (%1041, %1042, %1043, %1044, meta[relay.Constant][48] /* ty=Tensor[(90), float64] */)
}

def @func_5367(%var_5364: Tensor[(4, 13, 4), float64]) -> (Tensor[(4, 13, 4), float64],) {
  %1045 = cast(%var_5364, dtype="float64") /* ty=Tensor[(4, 13, 4), float64] */;
  %1046 = sinh(%1045) /* ty=Tensor[(4, 13, 4), float64] */;
  (%1046,)
}

def @func_11486() -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64]) {
  %1047 = @func_10518() /* ty=(Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %1048 = @func_10052() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %1049 = @func_9522() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %1050 = @func_9160() /* ty=Tensor[(10, 12, 2), float32] */;
  %1051 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %1052 = %1047.0;
  %1053 = %1048.0;
  %1054 = %1049.1;
  (%1050, %1051, %1052, %1053, %1054)
}

def @func_8106() -> (Tensor[(10, 12, 2), float32],) {
  %1055 = @func_7490() /* ty=Tensor[(10, 12, 2), float32] */;
  (%1055,)
}

def @func_10797() -> Tensor[(5, 15, 10), float32] {
  @func_8031() /* ty=Tensor[(5, 15, 10), float32] */
}

def @func_15791() -> Tensor[(10, 4, 3), float64] {
  %1056 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %1057 = %1056.0;
  %1058 = cast(%1057, dtype="float64") /* ty=Tensor[(10, 4, 3), float64] */;
  sinh(%1058) /* ty=Tensor[(10, 4, 3), float64] */
}

def @func_13220(%var_13168: Tensor[(240), float32]) -> (Tensor[(10, 4, 3), bool], Tensor[(10, 12, 2), float32], Tensor[(240), float32], Tensor[(10, 12, 2), float32], Tensor[(784), float64]) {
  %1059 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %1060 = cast(%var_13168, dtype="float32") /* ty=Tensor[(240), float32] */;
  %1061 = reshape(%1060, newshape=[10, 12, 2]) /* ty=Tensor[(10, 12, 2), float32] */;
  %1062 = @func_7540(%1061) /* ty=(Tensor[(10, 12, 2), float32],) */;
  %1063 = @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %1064 = @func_11890() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(784), float64], Tensor[(784), float64], Tensor[(10, 12, 2), float32]) */;
  %1065 = %1059.0;
  %1066 = %1062.0;
  %1067 = %1063.0;
  %1068 = %1064.1;
  (%1065, %1066, %var_13168, %1067, %1068)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_13903() -> Tensor[(15, 2, 1), float64] {
  %1 = fn () -> Tensor[(15, 2, 1), float64] {
    %0 = @func_12361() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool]) */;
    %0.0
  };
  %1() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_10082() -> Tensor[(672), int32] {
  %2 = @func_9665() /* ty=(Tensor[(672), int32],) */;
  %2.0
}

def @func_5011() -> (Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) {
  @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */
}

def @func_7731(%var_7730: Tensor[(384), float32]) -> (Tensor[(672), int32], Tensor[(384), float32], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(4, 6, 16), float64]) {
  %18 = fn (%var_7677: Tensor[(384), float32]) -> (Tensor[(672), int32], Tensor[(384), float32], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(4, 6, 16), float64]) {
    %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %5 = reshape(%3, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %6 = reshape(%4, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %7 = @func_2266(%5, %6) /* ty=(Tensor[(9, 14, 15), float64],) */;
    %8 = cast(%var_7677, dtype="float32") /* ty=Tensor[(384), float32] */;
    %9 = reshape(%8, newshape=[384]) /* ty=Tensor[(384), float32] */;
    %10 = @func_5623(%9) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), float32]) */;
    %11 = %10.3;
    %12 = cast(%11, dtype="float64") /* ty=Tensor[(4, 6, 16), float64] */;
    %13 = exp(%12) /* ty=Tensor[(4, 6, 16), float64] */;
    %14 = cast(%13, dtype="float64") /* ty=Tensor[(4, 6, 16), float64] */;
    %15 = @func_5310() /* ty=Tensor[(672), int32] */;
    %16 = %7.0;
    %17 = acosh(%14) /* ty=Tensor[(4, 6, 16), float64] */;
    (%15, %var_7677, %16, meta[relay.Constant][0] /* ty=Tensor[(1890), float64] */, %17)
  };
  %18(%var_7730) /* ty=(Tensor[(672), int32], Tensor[(384), float32], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(4, 6, 16), float64]) */
}

def @func_10057() -> (Tensor[(15, 2, 1), float64],) {
  %21 = fn () -> (Tensor[(15, 2, 1), float64],) {
    %19 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
    %20 = %19.2;
    (%20,)
  };
  %21() /* ty=(Tensor[(15, 2, 1), float64],) */
}

def @func_6519() -> (Tensor[(10, 12, 2), float32],) {
  %22 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  (%22,)
}

def @func_8384() -> (Tensor[(10, 12, 2), float32],) {
  %23 = @func_7756() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %24 = %23.0;
  (%24,)
}

def @func_12421() -> Tensor[(672), int32] {
  %25 = fn () -> Tensor[(672), int32] {
    @func_10082() /* ty=Tensor[(672), int32] */
  };
  %25() /* ty=Tensor[(672), int32] */
}

def @func_6175(%var_6173: Tensor[(15, 2, 672), uint8]) -> (Tensor[(15, 2, 672), float32], Tensor[(10, 12, 2), float32]) {
  @func_6172(%var_6173) /* ty=(Tensor[(15, 2, 672), float32], Tensor[(10, 12, 2), float32]) */
}

def @func_7084() -> (Tensor[(672), int32], Tensor[(8, 6, 14), bool]) {
  @func_7082() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */
}

def @func_15160() -> (Tensor[(672), int32],) {
  %26 = @func_13975() /* ty=(Tensor[(672), int32],) */;
  %27 = %26.0;
  (%27,)
}

def @func_7610(%var_7608: Tensor[(8, 15, 8), uint64]) -> (Tensor[(8, 15, 8), uint64], Tensor[(8, 15, 8), float64], Tensor[(8, 15, 8), float64]) {
  @func_7607(%var_7608) /* ty=(Tensor[(8, 15, 8), uint64], Tensor[(8, 15, 8), float64], Tensor[(8, 15, 8), float64]) */
}

def @func_4809(%var_4808: Tensor[(784), float64]) -> (Tensor[(15, 2, 1), float64], Tensor[(8, 7, 14), float64], Tensor[(784), float64], Tensor[(2, 28), float64]) {
  %37 = fn (%var_4799: Tensor[(784), float64]) -> (Tensor[(15, 2, 1), float64], Tensor[(8, 7, 14), float64], Tensor[(784), float64], Tensor[(2, 28), float64]) {
    %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 28), float64] */, dtype="float64") /* ty=Tensor[(2, 28), float64] */;
    %29 = cast(%var_4799, dtype="float64") /* ty=Tensor[(784), float64] */;
    %30 = reshape(%28, newshape=[8, 7, 1]) /* ty=Tensor[(8, 7, 1), float64] */;
    %31 = reshape(%29, newshape=[8, 7, 14]) /* ty=Tensor[(8, 7, 14), float64] */;
    %32 = @func_4241(%30, %31) /* ty=(Tensor[(8, 7, 14), float64],) */;
    %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 28), float64] */, dtype="float64") /* ty=Tensor[(2, 28), float64] */;
    %34 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
    %35 = %32.0;
    %36 = rsqrt(%33) /* ty=Tensor[(2, 28), float64] */;
    (%34, %35, %var_4799, %36)
  };
  %37(%var_4808) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 7, 14), float64], Tensor[(784), float64], Tensor[(2, 28), float64]) */
}

def @func_9665() -> (Tensor[(672), int32],) {
  %38 = @func_6590() /* ty=(Tensor[(672), int32], Tensor[(672), int32]) */;
  %39 = %38.0;
  (%39,)
}

def @func_9717() -> (Tensor[(10, 12, 2), float32],) {
  %40 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  %41 = cast(%40, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %42 = tan(%41) /* ty=Tensor[(10, 12, 2), float32] */;
  (%42,)
}

def @func_10238() -> Tensor[(8, 6, 14), bool] {
  %44 = fn () -> Tensor[(8, 6, 14), bool] {
    %43 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
    %43.1
  };
  %44() /* ty=Tensor[(8, 6, 14), bool] */
}

def @func_10683() -> (Tensor[(10, 12, 2), float32],) {
  %45 = @func_7756() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %46 = %45.0;
  (%46,)
}

def @func_11719(%var_11699: Tensor[(1344), float32], %var_11700: Tensor[(56), float64]) -> (Tensor[(10, 12, 2), float64], Tensor[(784), float64], Tensor[(1344), float32], Tensor[(56), float64], Tensor[(10, 12, 2), float32]) {
  %47 = @func_10052() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %48 = %47.0;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(10, 12, 2), float64] */;
  %50 = cast(%var_11699, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %51 = cast(%var_11700, dtype="float64") /* ty=Tensor[(56), float64] */;
  %52 = reshape(%50, newshape=[16, 12, 7]) /* ty=Tensor[(16, 12, 7), float32] */;
  %53 = reshape(%51, newshape=[1, 56]) /* ty=Tensor[(1, 56), float64] */;
  %54 = @func_11076(%52, %53) /* ty=(Tensor[(16, 12, 7), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8], Tensor[(16, 12, 7), float64], Tensor[(16, 12, 7), bool], Tensor[(16, 12, 7), int16], Tensor[(8, 7, 14), float64], Tensor[(1, 56), float64], Tensor[(784), float64]) */;
  %55 = sin(%49) /* ty=Tensor[(10, 12, 2), float64] */;
  %56 = %54.8;
  %57 = @func_8592() /* ty=Tensor[(10, 12, 2), float32] */;
  (%55, %56, %var_11699, %var_11700, %57)
}

def @func_10641() -> Tensor[(15, 2, 1), float64] {
  @func_10639() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_5950() -> Tensor[(15, 2, 672), uint8] {
  @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */
}

def @func_13061() -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  %58 = @func_9728() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %59 = %58.0;
  %60 = @func_13030() /* ty=Tensor[(10, 12, 2), float32] */;
  (%59, %60)
}

def @func_14490() -> (Tensor[(10, 12, 2), float32],) {
  @func_14488() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_4760() -> Tensor[(15, 2, 1), float64] {
  %61 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 2, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
  acosh(%61) /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_7756() -> (Tensor[(10, 12, 2), float32],) {
  %62 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  (%62,)
}

def @func_11758() -> Tensor[(672), int32] {
  @func_11756() /* ty=Tensor[(672), int32] */
}

def @func_7490() -> Tensor[(10, 12, 2), float32] {
  @func_7291() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_11541() -> Tensor[(15, 2, 1), float64] {
  %63 = fn () -> Tensor[(15, 2, 1), float64] {
    @func_11523() /* ty=Tensor[(15, 2, 1), float64] */
  };
  %63() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_5921() -> (Tensor[(10, 12, 2), float32],) {
  @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_8625() -> (Tensor[(15, 2, 1), float64],) {
  %64 = @func_7429() /* ty=Tensor[(15, 2, 1), float64] */;
  (%64,)
}

def @func_9667() -> (Tensor[(672), int32],) {
  @func_9665() /* ty=(Tensor[(672), int32],) */
}

def @func_11124() -> (Tensor[(15, 2, 1), float64],) {
  %65 = @func_6507() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %66 = %65.0;
  (%66,)
}

def @func_14559() -> (Tensor[(672), int32],) {
  %69 = fn () -> (Tensor[(672), int32],) {
    %67 = @func_8472() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
    %68 = %67.1;
    (%68,)
  };
  %69() /* ty=(Tensor[(672), int32],) */
}

def @func_5626(%var_5624: Tensor[(384), float32]) -> (Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), float32]) {
  @func_5623(%var_5624) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), float32]) */
}

def @func_5258(%var_5256: Tensor[(96, 4), float32]) -> (Tensor[(10, 4, 3), bool], Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(96, 4), float32]) {
  @func_5255(%var_5256) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(96, 4), float32]) */
}

def @func_7991(%var_7990: Tensor[(4, 16, 4), float32]) -> (Tensor[(4, 16, 4), float64],) {
  %74 = fn (%var_7965: Tensor[(4, 16, 4), float32]) -> (Tensor[(4, 16, 4), float64],) {
    %70 = cast(%var_7965, dtype="float32") /* ty=Tensor[(4, 16, 4), float32] */;
    %71 = tan(%70) /* ty=Tensor[(4, 16, 4), float32] */;
    %72 = cast(%71, dtype="float64") /* ty=Tensor[(4, 16, 4), float64] */;
    %73 = acosh(%72) /* ty=Tensor[(4, 16, 4), float64] */;
    (%73,)
  };
  %74(%var_7990) /* ty=(Tensor[(4, 16, 4), float64],) */
}

def @func_9391() -> Tensor[(15, 2, 1), float64] {
  @func_9389() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_4393(%var_4389: Tensor[(3, 5, 8), int64], %var_4390: Tensor[(3, 5, 8), int64], %var_4391: Tensor[(24, 16), float32], %var_4392: Tensor[(24, 16), float32]) -> (Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float64], Tensor[(672), int32], Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(24, 16), uint16], Tensor[(120), bool], Tensor[(70), bool], Tensor[(10, 4, 3), bool], Tensor[(4, 6, 16), float32]) {
  %115 = fn (%var_4291: Tensor[(3, 5, 8), int64], %var_4292: Tensor[(3, 5, 8), int64], %var_4311: Tensor[(24, 16), float32], %var_4344: Tensor[(24, 16), float32]) -> (Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float64], Tensor[(672), int32], Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(24, 16), uint16], Tensor[(120), bool], Tensor[(70), bool], Tensor[(10, 4, 3), bool], Tensor[(4, 6, 16), float32]) {
    %75 = cast(%var_4292, dtype="int64") /* ty=Tensor[(3, 5, 8), int64] */;
    %76 = shape_of(%var_4291, dtype="int32") /* ty=Tensor[(3), int32] */;
    %77 = cast(%var_4291, dtype="int64") /* ty=Tensor[(3, 5, 8), int64] */;
    %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %79 = cast(%var_4292, dtype="float64") /* ty=Tensor[(3, 5, 8), float64] */;
    %80 = cast(%var_4311, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
    %81 = reshape(%80, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), float32] */;
    %82 = @func_2887(%81) /* ty=(Tensor[(4, 6, 16), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */;
    %83 = cosh(%79) /* ty=Tensor[(3, 5, 8), float64] */;
    %84 = cast(%83, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
    %85 = reshape(%84, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), bool] */;
    %86 = @func_2548(%85) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) */;
    %87 = cast(meta[relay.Constant][3] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %88 = cast(meta[relay.Constant][3] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %89 = reshape(%87, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %90 = reshape(%88, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %91 = @func_2266(%89, %90) /* ty=(Tensor[(9, 14, 15), float64],) */;
    %92 = cast(%var_4344, dtype="uint16") /* ty=Tensor[(24, 16), uint16] */;
    %93 = shape_of(%var_4311, dtype="int32") /* ty=Tensor[(2), int32] */;
    %94 = cast(%var_4311, dtype="uint16") /* ty=Tensor[(24, 16), uint16] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %96 = cast(meta[relay.Constant][4] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
    %97 = cast(meta[relay.Constant][4] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
    %98 = reshape(%96, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
    %99 = reshape(%97, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
    %100 = @func_3114(%98, %99) /* ty=(Tensor[(2, 5, 7), bool], Tensor[(10, 4, 3), bool], Tensor[(120), bool], Tensor[(2, 5, 7), float64]) */;
    %101 = logical_xor(%77, %78) /* ty=Tensor[(3, 5, 8), int64] */;
    %102 = cast(%101, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
    %103 = reshape(%102, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), bool] */;
    %104 = @func_2548(%103) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) */;
    %105 = cast(%var_4311, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
    %106 = reshape(%105, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), float32] */;
    %107 = @func_2887(%106) /* ty=(Tensor[(4, 6, 16), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */;
    %108 = %82.2;
    %109 = %86.0;
    %110 = %91.0;
    %111 = subtract(%94, %95) /* ty=Tensor[(24, 16), uint16] */;
    %112 = %100.2;
    %113 = %104.0;
    %114 = %107.0;
    (%101, %83, %108, %109, %110, meta[relay.Constant][3] /* ty=Tensor[(1890), float64] */, %111, %112, meta[relay.Constant][4] /* ty=Tensor[(70), bool] */, %113, %114)
  };
  %115(%var_4389, %var_4390, %var_4391, %var_4392) /* ty=(Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float64], Tensor[(672), int32], Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(24, 16), uint16], Tensor[(120), bool], Tensor[(70), bool], Tensor[(10, 4, 3), bool], Tensor[(4, 6, 16), float32]) */
}

def @func_881(%var_879: Tensor[(13, 9, 15), int8], %var_880: Tensor[(13, 9, 15), int8]) -> (Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) {
  %129 = fn (%var_839: Tensor[(13, 9, 15), int8], %var_840: Tensor[(13, 9, 15), int8]) -> (Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) {
    %116 = cast(%var_840, dtype="int8") /* ty=Tensor[(13, 9, 15), int8] */;
    %117 = shape_of(%var_839, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(%var_839, dtype="int8") /* ty=Tensor[(13, 9, 15), int8] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %120 = cast(meta[relay.Constant][5] /* ty=Tensor[(168, 4), int32] */, dtype="int32") /* ty=Tensor[(168, 4), int32] */;
    %121 = reshape(%120, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
    %122 = @func_651(%121) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
    %123 = cast(meta[relay.Constant][5] /* ty=Tensor[(168, 4), int32] */, dtype="int32") /* ty=Tensor[(168, 4), int32] */;
    %124 = reshape(%123, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
    %125 = @func_651(%124) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
    %126 = bitwise_xor(%118, %119) /* ty=Tensor[(13, 9, 15), int8] */;
    %127 = %122.0;
    %128 = %125.0;
    (%126, %127, meta[relay.Constant][5] /* ty=Tensor[(168, 4), int32] */, %128)
  };
  %129(%var_879, %var_880) /* ty=(Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) */
}

def @func_13690() -> (Tensor[(672), int32],) {
  %130 = @func_9888() /* ty=(Tensor[(672), int32],) */;
  %131 = %130.0;
  (%131,)
}

def @func_6854(%var_6851: Tensor[(11, 15, 14), int16], %var_6852: Tensor[(11, 15, 14), int16], %var_6853: Tensor[(70), bool]) -> (Tensor[(11, 15, 14), int16], Tensor[(15, 2, 1), float64], Tensor[(2, 5, 7), float64], Tensor[(70), bool]) {
  %145 = fn (%var_6804: Tensor[(11, 15, 14), int16], %var_6805: Tensor[(11, 15, 14), int16], %var_6815: Tensor[(70), bool]) -> (Tensor[(11, 15, 14), int16], Tensor[(15, 2, 1), float64], Tensor[(2, 5, 7), float64], Tensor[(70), bool]) {
    %132 = cast(%var_6805, dtype="int16") /* ty=Tensor[(11, 15, 14), int16] */;
    %133 = shape_of(%var_6804, dtype="int32") /* ty=Tensor[(3), int32] */;
    %134 = cast(%var_6804, dtype="int16") /* ty=Tensor[(11, 15, 14), int16] */;
    %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %136 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
    %137 = cast(%var_6815, dtype="bool") /* ty=Tensor[(70), bool] */;
    %138 = cast(%var_6815, dtype="bool") /* ty=Tensor[(70), bool] */;
    %139 = reshape(%137, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
    %140 = reshape(%138, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
    %141 = @func_3114(%139, %140) /* ty=(Tensor[(2, 5, 7), bool], Tensor[(10, 4, 3), bool], Tensor[(120), bool], Tensor[(2, 5, 7), float64]) */;
    %142 = subtract(%134, %135) /* ty=Tensor[(11, 15, 14), int16] */;
    %143 = %136.2;
    %144 = %141.3;
    (%142, %143, %144, %var_6815)
  };
  %145(%var_6851, %var_6852, %var_6853) /* ty=(Tensor[(11, 15, 14), int16], Tensor[(15, 2, 1), float64], Tensor[(2, 5, 7), float64], Tensor[(70), bool]) */
}

def @func_9472(%var_9470: Tensor[(9, 9, 16), float32]) -> (Tensor[(9, 9, 16), float32], Tensor[(5, 15, 10), float32]) {
  @func_9469(%var_9470) /* ty=(Tensor[(9, 9, 16), float32], Tensor[(5, 15, 10), float32]) */
}

def @func_12292(%var_12290: Tensor[(1, 9, 12), float64]) -> (Tensor[(?, 9, 12), float64], Tensor[(1, 9, 12), float64]) {
  @func_12289(%var_12290) /* ty=(Tensor[(?, 9, 12), float64], Tensor[(1, 9, 12), float64]) */
}

def @func_2270(%var_2268: Tensor[(9, 14, 15), float64], %var_2269: Tensor[(9, 14, 15), float64]) -> (Tensor[(9, 14, 15), float64],) {
  @func_2266(%var_2268, %var_2269) /* ty=(Tensor[(9, 14, 15), float64],) */
}

def @func_11126() -> (Tensor[(15, 2, 1), float64],) {
  @func_11124() /* ty=(Tensor[(15, 2, 1), float64],) */
}

def @func_6745(%var_6689: Tensor[(10, 15, 10), float64]) -> (Tensor[(10, 15, 10), float64], Tensor[(672), int32], Tensor[(8, 6, 14), bool], Tensor[(15, 2, 672), uint8], Tensor[(10, 15, 10), int8], Tensor[(15, 2, 672), float32], Tensor[(10, 12, 2), float32]) {
  %146 = cast(%var_6689, dtype="float64") /* ty=Tensor[(10, 15, 10), float64] */;
  %147 = @func_6040() /* ty=Tensor[(672), int32] */;
  %148 = cast(%147, dtype="int32") /* ty=Tensor[(672), int32] */;
  %149 = reshape(%148, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
  %150 = @func_651(%149) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
  %151 = cast(%var_6689, dtype="float32") /* ty=Tensor[(10, 15, 10), float32] */;
  %152 = atanh(%151) /* ty=Tensor[(10, 15, 10), float32] */;
  %153 = cast(%var_6689, dtype="int8") /* ty=Tensor[(10, 15, 10), int8] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="int8") /* ty=Tensor[(10, 15, 10), int8] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %157 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  %158 = cast(%157, dtype="float32") /* ty=Tensor[(15, 2, 672), float32] */;
  %159 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %160 = exp(%146) /* ty=Tensor[(10, 15, 10), float64] */;
  %161 = %150.0;
  %162 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  %163 = subtract(%155, %156) /* ty=Tensor[(10, 15, 10), int8] */;
  %164 = sigmoid(%158) /* ty=Tensor[(15, 2, 672), float32] */;
  %165 = %159.0;
  (%160, %147, %161, %162, %163, %164, %165)
}

def @func_13591(%var_13590: Tensor[(4, 13, 8), float64]) -> Tensor[(4, 13, 8), float64] {
  %167 = fn (%var_13586: Tensor[(4, 13, 8), float64]) -> Tensor[(4, 13, 8), float64] {
    %166 = cast(%var_13586, dtype="float64") /* ty=Tensor[(4, 13, 8), float64] */;
    asin(%166) /* ty=Tensor[(4, 13, 8), float64] */
  };
  %167(%var_13590) /* ty=Tensor[(4, 13, 8), float64] */
}

def @func_13858() -> (Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(8, 7, 14), float64], Tensor[(14, 4), float64], Tensor[(1, 784), float64]) {
  %177 = fn () -> (Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(8, 7, 14), float64], Tensor[(14, 4), float64], Tensor[(1, 784), float64]) {
    %168 = @func_6934() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
    %169 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 4), float64] */;
    %170 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 784), float64] */, dtype="float64") /* ty=Tensor[(1, 784), float64] */;
    %171 = reshape(%169, newshape=[8, 7, 1]) /* ty=Tensor[(8, 7, 1), float64] */;
    %172 = reshape(%170, newshape=[8, 7, 14]) /* ty=Tensor[(8, 7, 14), float64] */;
    %173 = @func_4241(%171, %172) /* ty=(Tensor[(8, 7, 14), float64],) */;
    %174 = %168.1;
    %175 = @func_10587() /* ty=Tensor[(10, 12, 2), float32] */;
    %176 = %173.0;
    (%174, %175, %176, meta[relay.Constant][6] /* ty=Tensor[(14, 4), float64] */, meta[relay.Constant][7] /* ty=Tensor[(1, 784), float64] */)
  };
  %177() /* ty=(Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(8, 7, 14), float64], Tensor[(14, 4), float64], Tensor[(1, 784), float64]) */
}

def @func_5665() -> Tensor[(10, 12, 2), float32] {
  @func_5663() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_7293() -> Tensor[(10, 12, 2), float32] {
  @func_7291() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_5370(%var_5368: Tensor[(4, 13, 4), float64]) -> (Tensor[(4, 13, 4), float64],) {
  @func_5367(%var_5368) /* ty=(Tensor[(4, 13, 4), float64],) */
}

def @func_10551() -> Tensor[(10, 12, 2), float32] {
  @func_10549() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_12175() -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), bool], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) {
  @func_12173() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), bool], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) */
}

def @func_15162() -> (Tensor[(672), int32],) {
  @func_15160() /* ty=(Tensor[(672), int32],) */
}

def @func_12873() -> (Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint64], Tensor[(10, 12, 2), float32]) {
  %189 = fn () -> (Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint64], Tensor[(10, 12, 2), float32]) {
    %178 = @func_10936() /* ty=Tensor[(15, 2, 1), float64] */;
    %179 = @func_8170() /* ty=(Tensor[(672), int32],) */;
    %180 = %179.0;
    %181 = cast(%178, dtype="uint64") /* ty=Tensor[(15, 2, 1), uint64] */;
    %182 = cast(%180, dtype="uint64") /* ty=Tensor[(672), uint64] */;
    %183 = @func_9160() /* ty=Tensor[(10, 12, 2), float32] */;
    %184 = @func_9160() /* ty=Tensor[(10, 12, 2), float32] */;
    %185 = @func_9383() /* ty=Tensor[(10, 12, 2), float32] */;
    %186 = @func_7907() /* ty=Tensor[(10, 12, 2), float32] */;
    %187 = bitwise_xor(%181, %182) /* ty=Tensor[(15, 2, 672), uint64] */;
    %188 = @func_7907() /* ty=Tensor[(10, 12, 2), float32] */;
    (%183, %184, %185, %186, %187, %188)
  };
  %189() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint64], Tensor[(10, 12, 2), float32]) */
}

def @func_14400() -> (Tensor[(672), int32], Tensor[(672), int32], Tensor[(672), int32]) {
  @func_14398() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(672), int32]) */
}

def @func_13297() -> (Tensor[(10, 12, 2), float32],) {
  @func_13295() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_13606() -> Tensor[(672), int32] {
  %191 = fn () -> Tensor[(672), int32] {
    %190 = @func_5154() /* ty=(Tensor[(672), int32],) */;
    %190.0
  };
  %191() /* ty=Tensor[(672), int32] */
}

def @func_8657(%var_8655: Tensor[(16, 13, 16), float32], %var_8656: Tensor[(16, 13, 16), float32]) -> (Tensor[(16, 13, 16), float32],) {
  %197 = fn (%var_8649: Tensor[(16, 13, 16), float32], %var_8650: Tensor[(16, 13, 16), float32]) -> (Tensor[(16, 13, 16), float32],) {
    %192 = cast(%var_8650, dtype="float32") /* ty=Tensor[(16, 13, 16), float32] */;
    %193 = shape_of(%var_8649, dtype="int32") /* ty=Tensor[(3), int32] */;
    %194 = cast(%var_8649, dtype="float32") /* ty=Tensor[(16, 13, 16), float32] */;
    %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %196 = divide(%194, %195) /* ty=Tensor[(16, 13, 16), float32] */;
    (%196,)
  };
  %197(%var_8655, %var_8656) /* ty=(Tensor[(16, 13, 16), float32],) */
}

def @func_10728() -> (Tensor[(15, 2, 1), float64],) {
  %198 = @func_9728() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %199 = %198.0;
  (%199,)
}

def @func_5794(%var_5793: Tensor[(120), int64]) -> (Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(96, 4), float32], Tensor[(120), int64]) {
  %207 = fn (%var_5787: Tensor[(120), int64]) -> (Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(96, 4), float32], Tensor[(120), int64]) {
    %200 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
    %201 = cast(%var_5787, dtype="int64") /* ty=Tensor[(120), int64] */;
    %202 = reshape(%201, newshape=[120]) /* ty=Tensor[(120), int64] */;
    %203 = @func_5117(%202) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(24, 16), uint16], Tensor[(120), int64], Tensor[(96, 4), float32], Tensor[(70), bool]) */;
    %204 = %200.2;
    %205 = @func_4896() /* ty=Tensor[(15, 2, 1), float64] */;
    %206 = %203.3;
    (%204, %205, %206, %var_5787)
  };
  %207(%var_5793) /* ty=(Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(96, 4), float32], Tensor[(120), int64]) */
}

def @func_6041() -> Tensor[(672), int32] {
  %208 = fn () -> Tensor[(672), int32] {
    @func_5820() /* ty=Tensor[(672), int32] */
  };
  %208() /* ty=Tensor[(672), int32] */
}

def @func_12289(%var_12264: Tensor[(1, 9, 12), float64]) -> (Tensor[(?, 9, 12), float64], Tensor[(1, 9, 12), float64]) {
  %209 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %210 = shape_of(%var_12264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_12264, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %213 = cast(%var_12264, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %214 = floor_mod(%211, %212) /* ty=Tensor[(?, 9, 12), float64] */;
  %215 = cos(%213) /* ty=Tensor[(1, 9, 12), float64] */;
  (%214, %215)
}

def @func_3118(%var_3116: Tensor[(2, 5, 7), bool], %var_3117: Tensor[(2, 5, 7), bool]) -> (Tensor[(2, 5, 7), bool], Tensor[(10, 4, 3), bool], Tensor[(120), bool], Tensor[(2, 5, 7), float64]) {
  @func_3114(%var_3116, %var_3117) /* ty=(Tensor[(2, 5, 7), bool], Tensor[(10, 4, 3), bool], Tensor[(120), bool], Tensor[(2, 5, 7), float64]) */
}

def @func_6789() -> Tensor[(672), int32] {
  @func_6787() /* ty=Tensor[(672), int32] */
}

def @func_9227(%var_9198: Tensor[(10, 12, 2), float32]) -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) {
  %216 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %217 = %216.0;
  %218 = cast(%var_9198, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %222 = cast(meta[relay.Constant][9] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %223 = reshape(%222, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
  %224 = @func_5437(%223) /* ty=(Tensor[(15, 2, 3), uint32], Tensor[(672), int32]) */;
  %225 = mod(%220, %221) /* ty=Tensor[(10, 12, 2), float32] */;
  %226 = %224.0;
  (%225, %226, meta[relay.Constant][9] /* ty=Tensor[(90), float64] */)
}

def @func_9691() -> (Tensor[(672), int32], Tensor[(15, 2, 672), uint8]) {
  %227 = @func_6590() /* ty=(Tensor[(672), int32], Tensor[(672), int32]) */;
  %228 = %227.0;
  %229 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  (%228, %229)
}

def @func_12639() -> Tensor[(5, 10, 10), float32] {
  %230 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 10, 10), float32] */;
  log10(%230) /* ty=Tensor[(5, 10, 10), float32] */
}

def @func_4245(%var_4243: Tensor[(8, 7, 1), float64], %var_4244: Tensor[(8, 7, 14), float64]) -> (Tensor[(8, 7, 14), float64],) {
  @func_4241(%var_4243, %var_4244) /* ty=(Tensor[(8, 7, 14), float64],) */
}

def @func_5919() -> (Tensor[(10, 12, 2), float32],) {
  %231 = @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %232 = %231.0;
  (%232,)
}

def @func_14104(%var_14078: Tensor[(15, 2, 672), uint8]) -> (Tensor[(15, 2, 672), float32], Tensor[(15, 2, 672), bool], Tensor[(15, 2, 1), float32]) {
  %233 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  %234 = cast(%var_14078, dtype="float32") /* ty=Tensor[(15, 2, 672), float32] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%233, dtype="float32") /* ty=Tensor[(15, 2, 672), float32] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %238 = cast(%233, dtype="bool") /* ty=Tensor[(15, 2, 672), bool] */;
  %239 = shape_of(%var_14078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%var_14078, dtype="bool") /* ty=Tensor[(15, 2, 672), bool] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %242 = floor_divide(%236, %237) /* ty=Tensor[(15, 2, 672), float32] */;
  %243 = greater(%240, %241) /* ty=Tensor[(15, 2, 672), bool] */;
  %244 = @func_9630() /* ty=Tensor[(15, 2, 1), float32] */;
  (%242, %243, %244)
}

def @func_15507() -> Tensor[(672), int32] {
  @func_10082() /* ty=Tensor[(672), int32] */
}

def @func_8752() -> (Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(10, 12, 2), float64]) {
  %245 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %246 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(10, 12, 2), float64] */;
  %248 = %245.0;
  %249 = @func_6040() /* ty=Tensor[(672), int32] */;
  %250 = atanh(%247) /* ty=Tensor[(10, 12, 2), float64] */;
  (%248, %249, %250)
}

def @func_5663() -> Tensor[(10, 12, 2), float32] {
  %251 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %251.0
}

def @func_9523() -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  %255 = fn () -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
    %252 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
    %253 = @func_9249() /* ty=Tensor[(15, 2, 1), float64] */;
    %254 = @func_9099() /* ty=Tensor[(10, 12, 2), float32] */;
    (%252, %253, %254)
  };
  %255() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */
}

def @func_3857(%var_3825: int8, %var_3826: Tensor[(2, 11, 15), int8]) -> Tensor[(2, 11, 15), int32] {
  %256 = cast(%var_3825, dtype="int8") /* ty=int8 */;
  %257 = cast(%var_3826, dtype="int8") /* ty=Tensor[(2, 11, 15), int8] */;
  %258 = left_shift(%256, %257) /* ty=Tensor[(2, 11, 15), int8] */;
  %259 = cast(%var_3825, dtype="float64") /* ty=float64 */;
  %260 = cast(%var_3826, dtype="float64") /* ty=Tensor[(2, 11, 15), float64] */;
  %261 = floor_divide(%259, %260) /* ty=Tensor[(2, 11, 15), float64] */;
  %262 = cast(%261, dtype="int32") /* ty=Tensor[(2, 11, 15), int32] */;
  %263 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%258, dtype="int32") /* ty=Tensor[(2, 11, 15), int32] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%264, %265) /* ty=Tensor[(2, 11, 15), int32] */
}

def @func_15509() -> Tensor[(672), int32] {
  @func_15507() /* ty=Tensor[(672), int32] */
}

def @func_6591() -> (Tensor[(672), int32], Tensor[(672), int32]) {
  %269 = fn () -> (Tensor[(672), int32], Tensor[(672), int32]) {
    %266 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
    %267 = %266.0;
    %268 = @func_6040() /* ty=Tensor[(672), int32] */;
    (%267, %268)
  };
  %269() /* ty=(Tensor[(672), int32], Tensor[(672), int32]) */
}

def @func_15304() -> (Tensor[(15, 2, 1), float64],) {
  %270 = @func_9389() /* ty=Tensor[(15, 2, 1), float64] */;
  (%270,)
}

def @func_13692() -> (Tensor[(672), int32],) {
  @func_13690() /* ty=(Tensor[(672), int32],) */
}

def @func_13140() -> (Tensor[(70), bool],) {
  @func_13138() /* ty=(Tensor[(70), bool],) */
}

def @func_4186(%var_4185: Tensor[(70), bool]) -> (Tensor[(10, 12, 1), float32], Tensor[(9, 14, 15), float64], Tensor[(8, 6, 14), bool], Tensor[(585, 3), int8], Tensor[(168, 4), int32], Tensor[(120), bool], Tensor[(70), bool], Tensor[(9, 14, 15), float64]) {
  %299 = fn (%var_4157: Tensor[(70), bool]) -> (Tensor[(10, 12, 1), float32], Tensor[(9, 14, 15), float64], Tensor[(8, 6, 14), bool], Tensor[(585, 3), int8], Tensor[(168, 4), int32], Tensor[(120), bool], Tensor[(70), bool], Tensor[(9, 14, 15), float64]) {
    %271 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(10, 12, 1), float32] */;
    %272 = sinh(%271) /* ty=Tensor[(10, 12, 1), float32] */;
    %273 = cast(%272, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
    %274 = reshape(%273, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), bool] */;
    %275 = @func_2548(%274) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) */;
    %276 = cast(meta[relay.Constant][12] /* ty=Tensor[(585, 3), int8] */, dtype="int8") /* ty=Tensor[(585, 3), int8] */;
    %277 = cast(meta[relay.Constant][12] /* ty=Tensor[(585, 3), int8] */, dtype="int8") /* ty=Tensor[(585, 3), int8] */;
    %278 = reshape(%276, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
    %279 = reshape(%277, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
    %280 = @func_878(%278, %279) /* ty=(Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) */;
    %281 = cast(%272, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
    %282 = reshape(%281, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), bool] */;
    %283 = @func_2548(%282) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) */;
    %284 = cast(%var_4157, dtype="bool") /* ty=Tensor[(70), bool] */;
    %285 = cast(%var_4157, dtype="bool") /* ty=Tensor[(70), bool] */;
    %286 = reshape(%284, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
    %287 = reshape(%285, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
    %288 = @func_3114(%286, %287) /* ty=(Tensor[(2, 5, 7), bool], Tensor[(10, 4, 3), bool], Tensor[(120), bool], Tensor[(2, 5, 7), float64]) */;
    %289 = %275.5;
    %290 = cast(%289, dtype="float64") /* ty=Tensor[(9, 14, 15), float64] */;
    %291 = cast(%289, dtype="float64") /* ty=Tensor[(9, 14, 15), float64] */;
    %292 = reshape(%290, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %293 = reshape(%291, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %294 = @func_2266(%292, %293) /* ty=(Tensor[(9, 14, 15), float64],) */;
    %295 = %280.3;
    %296 = %283.6;
    %297 = %288.2;
    %298 = %294.0;
    (%272, %289, %295, meta[relay.Constant][12] /* ty=Tensor[(585, 3), int8] */, %296, %297, %var_4157, %298)
  };
  %299(%var_4185) /* ty=(Tensor[(10, 12, 1), float32], Tensor[(9, 14, 15), float64], Tensor[(8, 6, 14), bool], Tensor[(585, 3), int8], Tensor[(168, 4), int32], Tensor[(120), bool], Tensor[(70), bool], Tensor[(9, 14, 15), float64]) */
}

def @func_15296() -> (Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64]) {
  %303 = fn () -> (Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64]) {
    %300 = @func_8472() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
    %301 = @func_13902() /* ty=Tensor[(15, 2, 1), float64] */;
    %302 = %300.0;
    (%301, %302)
  };
  %303() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64]) */
}

def @func_9719() -> (Tensor[(10, 12, 2), float32],) {
  @func_9717() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_4865() -> (Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) {
  %313 = fn () -> (Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) {
    %304 = cast(meta[relay.Constant][13] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
    %305 = reshape(%304, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
    %306 = @func_651(%305) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
    %307 = %306.0;
    %308 = cast(%307, dtype="int32") /* ty=Tensor[(8, 6, 14), int32] */;
    %309 = reshape(%308, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
    %310 = @func_651(%309) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
    %311 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
    %312 = %310.1;
    (%311, %307, meta[relay.Constant][13] /* ty=Tensor[(672), int32] */, %312)
  };
  %313() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */
}

def @func_11488() -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64]) {
  @func_11486() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64]) */
}

def @func_15147() -> (Tensor[(672), int32],) {
  @func_15145() /* ty=(Tensor[(672), int32],) */
}

def @main() -> (Tensor[(15, 2, 70), uint8],) {
  %314 = @func_11690() /* ty=(Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64]) */;
  %315 = %314.2;
  %316 = @func_13140() /* ty=(Tensor[(70), bool],) */;
  %317 = %316.0;
  %318 = cast(%315, dtype="uint8") /* ty=Tensor[(15, 2, 1), uint8] */;
  %319 = cast(%317, dtype="uint8") /* ty=Tensor[(70), uint8] */;
  %320 = minimum(%318, %319) /* ty=Tensor[(15, 2, 70), uint8] */;
  (%320,)
}

def @func_9730() -> (Tensor[(15, 2, 1), float64],) {
  @func_9728() /* ty=(Tensor[(15, 2, 1), float64],) */
}

def @func_9728() -> (Tensor[(15, 2, 1), float64],) {
  %321 = @func_4896() /* ty=Tensor[(15, 2, 1), float64] */;
  (%321,)
}

def @func_11523() -> Tensor[(15, 2, 1), float64] {
  @func_9136() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_7154(%var_7152: Tensor[(1152), uint8]) -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8]) {
  @func_7151(%var_7152) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8]) */
}

def @func_8549() -> (Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) {
  %322 = @func_8106() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %323 = @func_7291() /* ty=Tensor[(10, 12, 2), float32] */;
  %324 = %322.0;
  (%323, %324)
}

def @func_8520() -> (Tensor[(10, 12, 2), float32],) {
  @func_8518() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_14785(%var_14782: Tensor[(6), float32], %var_14783: Tensor[(1344), float32], %var_14784: Tensor[(2, 28), float64]) -> (Tensor[(10, 12, 2), float32], Tensor[(6), float32], Tensor[(8, 6, 14), float64], Tensor[(784), float64], Tensor[(1344), float32], Tensor[(2, 28), float64], Tensor[(672), int32]) {
  %340 = fn (%var_14745: Tensor[(6), float32], %var_14761: Tensor[(1344), float32], %var_14762: Tensor[(2, 28), float64]) -> (Tensor[(10, 12, 2), float32], Tensor[(6), float32], Tensor[(8, 6, 14), float64], Tensor[(784), float64], Tensor[(1344), float32], Tensor[(2, 28), float64], Tensor[(672), int32]) {
    %325 = cast(%var_14745, dtype="float32") /* ty=Tensor[(6), float32] */;
    %326 = reshape(%325, newshape=[6]) /* ty=Tensor[(6), float32] */;
    %327 = @func_13663(%326) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(6), float32]) */;
    %328 = %327.0;
    %329 = cast(%328, dtype="float64") /* ty=Tensor[(8, 6, 14), float64] */;
    %330 = cast(%var_14761, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %331 = cast(%var_14762, dtype="float64") /* ty=Tensor[(2, 28), float64] */;
    %332 = reshape(%330, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
    %333 = reshape(%331, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %334 = @func_11719(%332, %333) /* ty=(Tensor[(10, 12, 2), float64], Tensor[(784), float64], Tensor[(1344), float32], Tensor[(56), float64], Tensor[(10, 12, 2), float32]) */;
    %335 = @func_9593() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(384), float32], Tensor[(384), float32], Tensor[(672), int32]) */;
    %336 = @func_13030() /* ty=Tensor[(10, 12, 2), float32] */;
    %337 = sin(%329) /* ty=Tensor[(8, 6, 14), float64] */;
    %338 = %334.1;
    %339 = %335.3;
    (%336, %var_14745, %337, %338, %var_14761, %var_14762, %339)
  };
  %340(%var_14782, %var_14783, %var_14784) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(6), float32], Tensor[(8, 6, 14), float64], Tensor[(784), float64], Tensor[(1344), float32], Tensor[(2, 28), float64], Tensor[(672), int32]) */
}

def @func_9250() -> Tensor[(15, 2, 1), float64] {
  %341 = fn () -> Tensor[(15, 2, 1), float64] {
    @func_8221() /* ty=Tensor[(15, 2, 1), float64] */
  };
  %341() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_8805() -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  @func_8803() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */
}

def @func_11080(%var_11078: Tensor[(16, 12, 7), float32], %var_11079: Tensor[(1, 56), float64]) -> (Tensor[(16, 12, 7), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8], Tensor[(16, 12, 7), float64], Tensor[(16, 12, 7), bool], Tensor[(16, 12, 7), int16], Tensor[(8, 7, 14), float64], Tensor[(1, 56), float64], Tensor[(784), float64]) {
  @func_11076(%var_11078, %var_11079) /* ty=(Tensor[(16, 12, 7), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8], Tensor[(16, 12, 7), float64], Tensor[(16, 12, 7), bool], Tensor[(16, 12, 7), int16], Tensor[(8, 7, 14), float64], Tensor[(1, 56), float64], Tensor[(784), float64]) */
}

def @func_14398() -> (Tensor[(672), int32], Tensor[(672), int32], Tensor[(672), int32]) {
  %342 = @func_8752() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(10, 12, 2), float64]) */;
  %343 = @func_12420() /* ty=Tensor[(672), int32] */;
  %344 = %342.1;
  %345 = @func_6576() /* ty=Tensor[(672), int32] */;
  (%343, %344, %345)
}

def @func_3073(%var_3071: Tensor[(1, 2, 3), float32], %var_3072: Tensor[(672), int32]) -> (Tensor[(?, 2, 3), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) {
  @func_3069(%var_3071, %var_3072) /* ty=(Tensor[(?, 2, 3), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */
}

def @func_9389() -> Tensor[(15, 2, 1), float64] {
  @func_8221() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_13138() -> (Tensor[(70), bool],) {
  %346 = @func_8120() /* ty=(Tensor[(70), bool],) */;
  %347 = %346.0;
  (%347,)
}

def @func_12777(%var_12776: Tensor[(1890), float64]) -> (Tensor[(672), int32], Tensor[(9, 14, 15), float64], Tensor[(1890), float64]) {
  %356 = fn (%var_12762: Tensor[(1890), float64]) -> (Tensor[(672), int32], Tensor[(9, 14, 15), float64], Tensor[(1890), float64]) {
    %348 = @func_12403() /* ty=(Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
    %349 = cast(%var_12762, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %350 = cast(%var_12762, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %351 = reshape(%349, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %352 = reshape(%350, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %353 = @func_2266(%351, %352) /* ty=(Tensor[(9, 14, 15), float64],) */;
    %354 = %348.0;
    %355 = %353.0;
    (%354, %355, %var_12762)
  };
  %356(%var_12776) /* ty=(Tensor[(672), int32], Tensor[(9, 14, 15), float64], Tensor[(1890), float64]) */
}

def @func_13030() -> Tensor[(10, 12, 2), float32] {
  @func_6227() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_7607(%var_7555: Tensor[(8, 15, 8), uint64]) -> (Tensor[(8, 15, 8), uint64], Tensor[(8, 15, 8), float64], Tensor[(8, 15, 8), float64]) {
  %357 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 15, 8), uint64] */, dtype="uint64") /* ty=Tensor[(8, 15, 8), uint64] */;
  %358 = shape_of(%var_7555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%var_7555, dtype="uint64") /* ty=Tensor[(8, 15, 8), uint64] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %361 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 15, 8), uint64] */, dtype="float64") /* ty=Tensor[(8, 15, 8), float64] */;
  %362 = shape_of(%var_7555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%var_7555, dtype="float64") /* ty=Tensor[(8, 15, 8), float64] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %365 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 15, 8), uint64] */, dtype="float64") /* ty=Tensor[(8, 15, 8), float64] */;
  %366 = multiply(%359, %360) /* ty=Tensor[(8, 15, 8), uint64] */;
  %367 = divide(%363, %364) /* ty=Tensor[(8, 15, 8), float64] */;
  %368 = erf(%365) /* ty=Tensor[(8, 15, 8), float64] */;
  (%366, %367, %368)
}

def @func_9786() -> (Tensor[(672), int32], Tensor[(672), int32], Tensor[(10, 4, 3), bool], Tensor[(10, 12, 2), float32]) {
  %369 = @func_6934() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
  %370 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
  %371 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %372 = %369.0;
  %373 = %370.0;
  %374 = %371.0;
  %375 = @func_7291() /* ty=Tensor[(10, 12, 2), float32] */;
  (%372, %373, %374, %375)
}

def @func_10518() -> (Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  %376 = @func_6934() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
  %377 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %378 = %376.1;
  %379 = @func_9389() /* ty=Tensor[(15, 2, 1), float64] */;
  %380 = %377.0;
  (%378, %379, %380)
}

def @func_10587() -> Tensor[(10, 12, 2), float32] {
  %381 = @func_8910() /* ty=(Tensor[(10, 12, 2), float64], Tensor[(10, 12, 2), float32]) */;
  %381.1
}

def @func_2550(%var_2549: Tensor[(10, 4, 3), bool]) -> (Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) {
  %421 = fn (%var_2485: Tensor[(10, 4, 3), bool]) -> (Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) {
    %382 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 4, 1), bool] */, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
    %383 = cast(%var_2485, dtype="bool") /* ty=Tensor[(10, 4, 3), bool] */;
    %384 = cast(meta[relay.Constant][17] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %385 = cast(meta[relay.Constant][17] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %386 = reshape(%384, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %387 = reshape(%385, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %388 = @func_2266(%386, %387) /* ty=(Tensor[(9, 14, 15), float64],) */;
    %389 = cast(meta[relay.Constant][18] /* ty=Tensor[(1755), int8] */, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %390 = cast(meta[relay.Constant][18] /* ty=Tensor[(1755), int8] */, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %391 = reshape(%389, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
    %392 = reshape(%390, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
    %393 = @func_878(%391, %392) /* ty=(Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) */;
    %394 = cast(meta[relay.Constant][17] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %395 = cast(meta[relay.Constant][17] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %396 = reshape(%394, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %397 = reshape(%395, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %398 = @func_2266(%396, %397) /* ty=(Tensor[(9, 14, 15), float64],) */;
    %399 = %393.0;
    %400 = cast(%399, dtype="int8") /* ty=Tensor[(13, 9, 15), int8] */;
    %401 = cast(meta[relay.Constant][18] /* ty=Tensor[(1755), int8] */, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %402 = reshape(%400, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
    %403 = reshape(%401, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
    %404 = @func_878(%402, %403) /* ty=(Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) */;
    %405 = %388.0;
    %406 = cast(%405, dtype="float64") /* ty=Tensor[(9, 14, 15), float64] */;
    %407 = cast(meta[relay.Constant][17] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %408 = reshape(%406, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %409 = reshape(%407, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %410 = @func_2266(%408, %409) /* ty=(Tensor[(9, 14, 15), float64],) */;
    %411 = cast(meta[relay.Constant][18] /* ty=Tensor[(1755), int8] */, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %412 = cast(%399, dtype="int8") /* ty=Tensor[(13, 9, 15), int8] */;
    %413 = reshape(%411, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
    %414 = reshape(%412, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
    %415 = @func_878(%413, %414) /* ty=(Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) */;
    %416 = logical_or(%382, %383) /* ty=Tensor[(10, 4, 3), bool] */;
    %417 = %398.0;
    %418 = %404.2;
    %419 = %410.0;
    %420 = %415.0;
    (%416, %405, meta[relay.Constant][17] /* ty=Tensor[(1890), float64] */, %399, meta[relay.Constant][18] /* ty=Tensor[(1755), int8] */, %417, %418, %419, %420)
  };
  %421(%var_2549) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) */
}

def @func_14270() -> (Tensor[(10, 12, 2), float32],) {
  %422 = @func_11587() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %423 = %422.0;
  (%423,)
}

def @func_7431() -> Tensor[(15, 2, 1), float64] {
  @func_7429() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_14827() -> (Tensor[(10, 12, 2), float32],) {
  %425 = fn () -> (Tensor[(10, 12, 2), float32],) {
    %424 = @func_7291() /* ty=Tensor[(10, 12, 2), float32] */;
    (%424,)
  };
  %425() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_8148(%var_8145: Tensor[(4, 196), float64]) -> (Tensor[(15, 2, 1), float64], Tensor[(784), float64], Tensor[(4, 196), float64]) {
  %426 = @func_5966() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %427 = cast(%var_8145, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %428 = reshape(%427, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %429 = @func_4807(%428) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 7, 14), float64], Tensor[(784), float64], Tensor[(2, 28), float64]) */;
  %430 = %426.0;
  %431 = %429.2;
  (%430, %431, %var_8145)
}

def @func_9469(%var_9451: Tensor[(9, 9, 16), float32]) -> (Tensor[(9, 9, 16), float32], Tensor[(5, 15, 10), float32]) {
  %432 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 9, 16), float32] */, dtype="float32") /* ty=Tensor[(9, 9, 16), float32] */;
  %433 = shape_of(%var_9451, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%var_9451, dtype="float32") /* ty=Tensor[(9, 9, 16), float32] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %436 = floor_mod(%434, %435) /* ty=Tensor[(9, 9, 16), float32] */;
  %437 = @func_8031() /* ty=Tensor[(5, 15, 10), float32] */;
  (%436, %437)
}

def @func_15306() -> (Tensor[(15, 2, 1), float64],) {
  @func_15304() /* ty=(Tensor[(15, 2, 1), float64],) */
}

def @func_4898() -> Tensor[(15, 2, 1), float64] {
  @func_4896() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_2887(%var_2865: Tensor[(4, 6, 16), float32]) -> (Tensor[(4, 6, 16), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) {
  %438 = cast(%var_2865, dtype="float32") /* ty=Tensor[(4, 6, 16), float32] */;
  %439 = cast(meta[relay.Constant][20] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %440 = reshape(%439, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
  %441 = @func_651(%440) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
  %442 = log2(%438) /* ty=Tensor[(4, 6, 16), float32] */;
  %443 = %441.0;
  (%442, %443, meta[relay.Constant][20] /* ty=Tensor[(672), int32] */)
}

def @func_8850() -> (Tensor[(672), int32], Tensor[(70), bool]) {
  %447 = fn () -> (Tensor[(672), int32], Tensor[(70), bool]) {
    %444 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
    %445 = @func_6787() /* ty=Tensor[(672), int32] */;
    %446 = %444.1;
    (%445, %446)
  };
  %447() /* ty=(Tensor[(672), int32], Tensor[(70), bool]) */
}

def @func_10549() -> Tensor[(10, 12, 2), float32] {
  @func_7291() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_13032() -> Tensor[(10, 12, 2), float32] {
  @func_13030() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_11194(%var_11193: Tensor[(135, 14), int8]) -> (Tensor[(672), int32], Tensor[(15, 2, 384), bool], Tensor[(4, 16, 4), float64], Tensor[(256), float32], Tensor[(3, 9, 5), float64], Tensor[(135, 14), float64]) {
  %470 = fn (%var_11186: Tensor[(135, 14), int8]) -> (Tensor[(672), int32], Tensor[(15, 2, 384), bool], Tensor[(4, 16, 4), float64], Tensor[(256), float32], Tensor[(3, 9, 5), float64], Tensor[(135, 14), float64]) {
    %448 = cast(meta[relay.Constant][21] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
    %449 = reshape(%448, newshape=[384]) /* ty=Tensor[(384), float32] */;
    %450 = @func_5623(%449) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), float32]) */;
    %451 = @func_9728() /* ty=(Tensor[(15, 2, 1), float64],) */;
    %452 = %451.0;
    %453 = cast(meta[relay.Constant][21] /* ty=Tensor[(384), float32] */, dtype="bool") /* ty=Tensor[(384), bool] */;
    %454 = cast(%452, dtype="bool") /* ty=Tensor[(15, 2, 1), bool] */;
    %455 = cast(meta[relay.Constant][22] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
    %456 = reshape(%455, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float32] */;
    %457 = @func_7989(%456) /* ty=(Tensor[(4, 16, 4), float64],) */;
    %458 = cast(meta[relay.Constant][23] /* ty=Tensor[(135, 1), int8] */, dtype="int8") /* ty=Tensor[(135, 1), int8] */;
    %459 = cast(meta[relay.Constant][23] /* ty=Tensor[(135, 1), int8] */, dtype="int8") /* ty=Tensor[(135, 1), int8] */;
    %460 = reshape(%458, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), int8] */;
    %461 = reshape(%459, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), int8] */;
    %462 = @func_9336(%460, %461) /* ty=(Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) */;
    %463 = cast(meta[relay.Constant][23] /* ty=Tensor[(135, 1), int8] */, dtype="float64") /* ty=Tensor[(135, 1), float64] */;
    %464 = cast(%var_11186, dtype="float64") /* ty=Tensor[(135, 14), float64] */;
    %465 = %450.1;
    %466 = less_equal(%453, %454) /* ty=Tensor[(15, 2, 384), bool] */;
    %467 = %457.0;
    %468 = %462.1;
    %469 = mod(%463, %464) /* ty=Tensor[(135, 14), float64] */;
    (%465, %466, %467, meta[relay.Constant][22] /* ty=Tensor[(256), float32] */, %468, %469)
  };
  %470(%var_11193) /* ty=(Tensor[(672), int32], Tensor[(15, 2, 384), bool], Tensor[(4, 16, 4), float64], Tensor[(256), float32], Tensor[(3, 9, 5), float64], Tensor[(135, 14), float64]) */
}

def @func_13967(%var_13965: Tensor[(1152), uint8]) -> (Tensor[(10, 12, 2), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8]) {
  @func_13964(%var_13965) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8]) */
}

def @func_9026() -> (Tensor[(90), float64], Tensor[(15, 2, 672), uint32], Tensor[(15, 2, 672), int32], Tensor[(10, 12, 2), float32]) {
  @func_9024() /* ty=(Tensor[(90), float64], Tensor[(15, 2, 672), uint32], Tensor[(15, 2, 672), int32], Tensor[(10, 12, 2), float32]) */
}

def @func_15748() -> Tensor[(672), int32] {
  @func_6040() /* ty=Tensor[(672), int32] */
}

def @func_9981() -> (Tensor[(672), int32], Tensor[(10, 12, 2), float64]) {
  %474 = fn () -> (Tensor[(672), int32], Tensor[(10, 12, 2), float64]) {
    %471 = @func_8752() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(10, 12, 2), float64]) */;
    %472 = @func_5310() /* ty=Tensor[(672), int32] */;
    %473 = %471.2;
    (%472, %473)
  };
  %474() /* ty=(Tensor[(672), int32], Tensor[(10, 12, 2), float64]) */
}

def @func_12361() -> (Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool]) {
  %475 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %476 = %475.2;
  %477 = @func_10237() /* ty=Tensor[(8, 6, 14), bool] */;
  (%476, %477)
}

def @func_8518() -> (Tensor[(10, 12, 2), float32],) {
  %478 = @func_8384() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %479 = %478.0;
  (%479,)
}

def @func_10938() -> Tensor[(15, 2, 1), float64] {
  @func_10936() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_5871() -> (Tensor[(10, 12, 2), float32],) {
  @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_12405() -> (Tensor[(672), int32], Tensor[(15, 2, 1), float64]) {
  @func_12403() /* ty=(Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */
}

def @func_14583() -> Tensor[(10, 12, 2), float64] {
  %481 = fn () -> Tensor[(10, 12, 2), float64] {
    %480 = @func_11084() /* ty=(Tensor[(10, 12, 2), float64],) */;
    %480.0
  };
  %481() /* ty=Tensor[(10, 12, 2), float64] */
}

def @func_5767(%var_5765: Tensor[(15, 2, 1), float64]) -> (Tensor[(15, 2, 672), float64], Tensor[(10, 12, 2), float32]) {
  @func_5764(%var_5765) /* ty=(Tensor[(15, 2, 672), float64], Tensor[(10, 12, 2), float32]) */
}

def @func_5948() -> Tensor[(15, 2, 672), uint8] {
  %482 = @func_4896() /* ty=Tensor[(15, 2, 1), float64] */;
  %483 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %484 = %483.0;
  %485 = cast(%482, dtype="uint8") /* ty=Tensor[(15, 2, 1), uint8] */;
  %486 = cast(%484, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  right_shift(%485, %486) /* ty=Tensor[(15, 2, 672), uint8] */
}

def @func_7082() -> (Tensor[(672), int32], Tensor[(8, 6, 14), bool]) {
  %487 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %488 = @func_5310() /* ty=Tensor[(672), int32] */;
  %489 = %487.1;
  (%488, %489)
}

def @func_10352() -> (Tensor[(672), int32], Tensor[(15, 2, 1), float32]) {
  %490 = @func_9547() /* ty=Tensor[(672), int32] */;
  %491 = @func_9630() /* ty=Tensor[(15, 2, 1), float32] */;
  (%490, %491)
}

def @func_9889() -> (Tensor[(672), int32],) {
  %493 = fn () -> (Tensor[(672), int32],) {
    %492 = @func_6787() /* ty=Tensor[(672), int32] */;
    (%492,)
  };
  %493() /* ty=(Tensor[(672), int32],) */
}

def @func_6547(%var_6546: Tensor[(9, 6, 1), float32]) -> (Tensor[(9, 6, 1), float32],) {
  %497 = fn (%var_6529: Tensor[(9, 6, 1), float32]) -> (Tensor[(9, 6, 1), float32],) {
    %494 = cast(-7.7602f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %495 = cast(%var_6529, dtype="float32") /* ty=Tensor[(9, 6, 1), float32] */;
    %496 = mod(%494, %495) /* ty=Tensor[(9, 6, 1), float32] */;
    (%496,)
  };
  %497(%var_6546) /* ty=(Tensor[(9, 6, 1), float32],) */
}

def @func_14107(%var_14105: Tensor[(15, 2, 672), uint8]) -> (Tensor[(15, 2, 672), float32], Tensor[(15, 2, 672), bool], Tensor[(15, 2, 1), float32]) {
  @func_14104(%var_14105) /* ty=(Tensor[(15, 2, 672), float32], Tensor[(15, 2, 672), bool], Tensor[(15, 2, 1), float32]) */
}

def @func_6172(%var_6150: Tensor[(15, 2, 672), uint8]) -> (Tensor[(15, 2, 672), float32], Tensor[(10, 12, 2), float32]) {
  %498 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  %499 = cast(%var_6150, dtype="int32") /* ty=Tensor[(15, 2, 672), int32] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%498, dtype="int32") /* ty=Tensor[(15, 2, 672), int32] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %503 = multiply(%501, %502) /* ty=Tensor[(15, 2, 672), int32] */;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(15, 2, 672), float32] */;
  %505 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %506 = sin(%504) /* ty=Tensor[(15, 2, 672), float32] */;
  %507 = %505.0;
  (%506, %507)
}

def @func_13871() -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32], Tensor[(10, 12, 2), float32]) {
  %511 = fn () -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32], Tensor[(10, 12, 2), float32]) {
    %508 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
    %509 = @func_6576() /* ty=Tensor[(672), int32] */;
    %510 = @func_6227() /* ty=Tensor[(10, 12, 2), float32] */;
    (%508, %509, %510)
  };
  %511() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32], Tensor[(10, 12, 2), float32]) */
}

def @func_14272() -> (Tensor[(10, 12, 2), float32],) {
  @func_14270() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_9477() -> (Tensor[(672), int32],) {
  %514 = fn () -> (Tensor[(672), int32],) {
    %512 = @func_6590() /* ty=(Tensor[(672), int32], Tensor[(672), int32]) */;
    %513 = %512.0;
    (%513,)
  };
  %514() /* ty=(Tensor[(672), int32],) */
}

def @func_13805(%var_13804: Tensor[(72), float64]) -> (Tensor[(15, 2, 1), float64], Tensor[(8, 9, 1), float64], float64, Tensor[(72), float64], Tensor[(15, 2, 1), float64]) {
  %524 = fn (%var_13784: Tensor[(72), float64]) -> (Tensor[(15, 2, 1), float64], Tensor[(8, 9, 1), float64], float64, Tensor[(72), float64], Tensor[(15, 2, 1), float64]) {
    %515 = cast(-2.18383f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %516 = cast(%var_13784, dtype="float64") /* ty=Tensor[(72), float64] */;
    %517 = reshape(%515, newshape=[]) /* ty=float64 */;
    %518 = reshape(%516, newshape=[8, 9, 1]) /* ty=Tensor[(8, 9, 1), float64] */;
    %519 = @func_13239(%517, %518) /* ty=(Tensor[(8, 9, 1), float64],) */;
    %520 = @func_8625() /* ty=(Tensor[(15, 2, 1), float64],) */;
    %521 = @func_10639() /* ty=Tensor[(15, 2, 1), float64] */;
    %522 = %519.0;
    %523 = %520.0;
    (%521, %522, -2.18383f64 /* ty=float64 */, %var_13784, %523)
  };
  %524(%var_13804) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 9, 1), float64], float64, Tensor[(72), float64], Tensor[(15, 2, 1), float64]) */
}

def @func_7067() -> (Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) {
  %535 = fn () -> (Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) {
    %525 = @func_6651() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
    %526 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
    %527 = @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */;
    %528 = cast(meta[relay.Constant][24] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %529 = reshape(%528, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
    %530 = @func_5437(%529) /* ty=(Tensor[(15, 2, 3), uint32], Tensor[(672), int32]) */;
    %531 = %525.1;
    %532 = %526.0;
    %533 = %527.0;
    %534 = %530.0;
    (%531, %532, %533, %534, meta[relay.Constant][24] /* ty=Tensor[(90), float64] */)
  };
  %535() /* ty=(Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) */
}

def @func_15638(%var_15551: Tensor[(15, 2, 15), float64], %var_15614: Tensor[(1152), uint8]) -> (Tensor[(15, 2, 15), bool], Tensor[(8, 6, 14), float32], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 15), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8], Tensor[(?, 9, 12), float64], Tensor[(108), float64], Tensor[(15, 2, 1), float64]) {
  %536 = @func_6651() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
  %537 = %536.0;
  %538 = cast(%537, dtype="bool") /* ty=Tensor[(15, 2, 1), bool] */;
  %539 = cast(%var_15551, dtype="bool") /* ty=Tensor[(15, 2, 15), bool] */;
  %540 = less(%538, %539) /* ty=Tensor[(15, 2, 15), bool] */;
  %541 = cast(%537, dtype="bool") /* ty=Tensor[(15, 2, 1), bool] */;
  %542 = cast(%540, dtype="bool") /* ty=Tensor[(15, 2, 15), bool] */;
  %543 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %544 = @func_15304() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %545 = cast(%537, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  %546 = cast(%var_15551, dtype="float32") /* ty=Tensor[(15, 2, 15), float32] */;
  %547 = cast(%var_15614, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %548 = cast(%var_15614, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %549 = reshape(%547, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %550 = reshape(%548, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %551 = @func_6014(%549, %550) /* ty=(Tensor[(6, 12, 16), uint8], Tensor[(6, 12, 16), uint64]) */;
  %552 = cast(meta[relay.Constant][25] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %553 = reshape(%552, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float64] */;
  %554 = @func_12289(%553) /* ty=(Tensor[(?, 9, 12), float64], Tensor[(1, 9, 12), float64]) */;
  %555 = @func_8625() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %556 = logical_or(%541, %542) /* ty=Tensor[(15, 2, 15), bool] */;
  %557 = %543.3;
  %558 = %544.0;
  %559 = power(%545, %546) /* ty=Tensor[(15, 2, 15), float32] */;
  %560 = %551.0;
  %561 = %554.0;
  %562 = %555.0;
  (%556, %557, %558, %559, %560, %var_15614, %561, meta[relay.Constant][25] /* ty=Tensor[(108), float64] */, %562)
}

def @func_11756() -> Tensor[(672), int32] {
  @func_10082() /* ty=Tensor[(672), int32] */
}

def @func_8386() -> (Tensor[(10, 12, 2), float32],) {
  @func_8384() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_13242(%var_13240: float64, %var_13241: Tensor[(8, 9, 1), float64]) -> (Tensor[(8, 9, 1), float64],) {
  %566 = fn (%var_13226: float64, %var_13227: Tensor[(8, 9, 1), float64]) -> (Tensor[(8, 9, 1), float64],) {
    %563 = cast(%var_13226, dtype="float64") /* ty=float64 */;
    %564 = cast(%var_13227, dtype="float64") /* ty=Tensor[(8, 9, 1), float64] */;
    %565 = floor_mod(%563, %564) /* ty=Tensor[(8, 9, 1), float64] */;
    (%565,)
  };
  %566(%var_13240, %var_13241) /* ty=(Tensor[(8, 9, 1), float64],) */
}

def @func_11486() -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64]) {
  %567 = @func_10518() /* ty=(Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %568 = @func_10052() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %569 = @func_9522() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %570 = @func_9160() /* ty=Tensor[(10, 12, 2), float32] */;
  %571 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %572 = %567.0;
  %573 = %568.0;
  %574 = %569.1;
  (%570, %571, %572, %573, %574)
}

def @func_5869() -> (Tensor[(10, 12, 2), float32],) {
  %575 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %576 = %575.0;
  (%576,)
}

def @func_11430(%var_11428: Tensor[(1, 208), float64], %var_11429: Tensor[(384), float32]) -> (Tensor[(?, 208), bool], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), uint64], Tensor[(15, 2, 1), float64], Tensor[(784), float64]) {
  @func_11426(%var_11428, %var_11429) /* ty=(Tensor[(?, 208), bool], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), uint64], Tensor[(15, 2, 1), float64], Tensor[(784), float64]) */
}

def @func_8171() -> (Tensor[(672), int32],) {
  %578 = fn () -> (Tensor[(672), int32],) {
    %577 = @func_6576() /* ty=Tensor[(672), int32] */;
    (%577,)
  };
  %578() /* ty=(Tensor[(672), int32],) */
}

def @func_651(%var_631: Tensor[(8, 6, 14), int32]) -> (Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) {
  %579 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 6, 14), int32] */, dtype="bool") /* ty=Tensor[(8, 6, 14), bool] */;
  %580 = shape_of(%var_631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%var_631, dtype="bool") /* ty=Tensor[(8, 6, 14), bool] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %583 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 6, 14), int32] */, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
  %584 = equal(%581, %582) /* ty=Tensor[(8, 6, 14), bool] */;
  %585 = sinh(%583) /* ty=Tensor[(8, 6, 14), float32] */;
  (%584, %585)
}

def @func_13268() -> (Tensor[(70), bool],) {
  @func_13266() /* ty=(Tensor[(70), bool],) */
}

def @func_8910() -> (Tensor[(10, 12, 2), float64], Tensor[(10, 12, 2), float32]) {
  %586 = @func_8752() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(10, 12, 2), float64]) */;
  %587 = @func_8803() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %588 = %586.2;
  %589 = %587.1;
  (%588, %589)
}

def @func_12752(%var_12750: uint8, %var_12751: Tensor[(1, 3, 11), uint8]) -> (Tensor[(1, 3, 11), uint8], Tensor[(10, 12, 2), float32]) {
  %595 = fn (%var_12726: uint8, %var_12727: Tensor[(1, 3, 11), uint8]) -> (Tensor[(1, 3, 11), uint8], Tensor[(10, 12, 2), float32]) {
    %590 = cast(%var_12726, dtype="uint8") /* ty=uint8 */;
    %591 = cast(%var_12727, dtype="uint8") /* ty=Tensor[(1, 3, 11), uint8] */;
    %592 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
    %593 = bitwise_xor(%590, %591) /* ty=Tensor[(1, 3, 11), uint8] */;
    %594 = %592.0;
    (%593, %594)
  };
  %595(%var_12750, %var_12751) /* ty=(Tensor[(1, 3, 11), uint8], Tensor[(10, 12, 2), float32]) */
}

def @func_10520() -> (Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  @func_10518() /* ty=(Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */
}

def @func_5168() -> (Tensor[(10, 12, 2), float32],) {
  %596 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 12, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %597 = atan(%596) /* ty=Tensor[(10, 12, 2), float32] */;
  (%597,)
}

def @func_11690() -> (Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64]) {
  %602 = fn () -> (Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64]) {
    %598 = @func_9522() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
    %599 = @func_6040() /* ty=Tensor[(672), int32] */;
    %600 = %598.1;
    %601 = @func_8221() /* ty=Tensor[(15, 2, 1), float64] */;
    (%599, %600, %601)
  };
  %602() /* ty=(Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64]) */
}

def @func_8754() -> (Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(10, 12, 2), float64]) {
  @func_8752() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(10, 12, 2), float64]) */
}

def @func_10798() -> Tensor[(5, 15, 10), float32] {
  %603 = fn () -> Tensor[(5, 15, 10), float32] {
    @func_8031() /* ty=Tensor[(5, 15, 10), float32] */
  };
  %603() /* ty=Tensor[(5, 15, 10), float32] */
}

def @func_5170() -> (Tensor[(10, 12, 2), float32],) {
  @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_12363() -> (Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool]) {
  @func_12361() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool]) */
}

def @func_7907() -> Tensor[(10, 12, 2), float32] {
  %604 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %604.0
}

def @func_13741() -> (Tensor[(10, 12, 2), float32],) {
  @func_13739() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_11981() -> (Tensor[(15, 2, 1), float64],) {
  %607 = fn () -> (Tensor[(15, 2, 1), float64],) {
    %605 = @func_5966() /* ty=(Tensor[(15, 2, 1), float64],) */;
    %606 = %605.0;
    (%606,)
  };
  %607() /* ty=(Tensor[(15, 2, 1), float64],) */
}

def @func_12477(%var_12430: Tensor[(8, 4, 9), float64]) -> (Tensor[(8, 4, 9), float64], Tensor[(672), int32], Tensor[(8, 6, 14), bool], Tensor[(15, 2, 3), uint32], Tensor[(240), float32], Tensor[(672), int32]) {
  %608 = cast(%var_12430, dtype="float64") /* ty=Tensor[(8, 4, 9), float64] */;
  %609 = @func_7082() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
  %610 = @func_10518() /* ty=(Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %611 = cast(meta[relay.Constant][28] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %612 = reshape(%611, newshape=[10, 12, 2]) /* ty=Tensor[(10, 12, 2), float32] */;
  %613 = @func_9227(%612) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) */;
  %614 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %615 = acos(%608) /* ty=Tensor[(8, 4, 9), float64] */;
  %616 = %609.0;
  %617 = %610.0;
  %618 = %613.1;
  %619 = %614.0;
  (%615, %616, %617, %618, meta[relay.Constant][28] /* ty=Tensor[(240), float32] */, %619)
}

def @func_13063() -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  @func_13061() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */
}

def @func_5367(%var_5364: Tensor[(4, 13, 4), float64]) -> (Tensor[(4, 13, 4), float64],) {
  %620 = cast(%var_5364, dtype="float64") /* ty=Tensor[(4, 13, 4), float64] */;
  %621 = sinh(%620) /* ty=Tensor[(4, 13, 4), float64] */;
  (%621,)
}

def @func_15750() -> Tensor[(672), int32] {
  @func_15748() /* ty=Tensor[(672), int32] */
}

def @func_13222(%var_13221: Tensor[(240), float32]) -> (Tensor[(10, 4, 3), bool], Tensor[(10, 12, 2), float32], Tensor[(240), float32], Tensor[(10, 12, 2), float32], Tensor[(784), float64]) {
  %632 = fn (%var_13168: Tensor[(240), float32]) -> (Tensor[(10, 4, 3), bool], Tensor[(10, 12, 2), float32], Tensor[(240), float32], Tensor[(10, 12, 2), float32], Tensor[(784), float64]) {
    %622 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
    %623 = cast(%var_13168, dtype="float32") /* ty=Tensor[(240), float32] */;
    %624 = reshape(%623, newshape=[10, 12, 2]) /* ty=Tensor[(10, 12, 2), float32] */;
    %625 = @func_7540(%624) /* ty=(Tensor[(10, 12, 2), float32],) */;
    %626 = @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */;
    %627 = @func_11890() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(784), float64], Tensor[(784), float64], Tensor[(10, 12, 2), float32]) */;
    %628 = %622.0;
    %629 = %625.0;
    %630 = %626.0;
    %631 = %627.1;
    (%628, %629, %var_13168, %630, %631)
  };
  %632(%var_13221) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(10, 12, 2), float32], Tensor[(240), float32], Tensor[(10, 12, 2), float32], Tensor[(784), float64]) */
}

def @func_6227() -> Tensor[(10, 12, 2), float32] {
  %633 = @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %633.0
}

def @func_6229() -> Tensor[(10, 12, 2), float32] {
  @func_6227() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_2890(%var_2888: Tensor[(4, 6, 16), float32]) -> (Tensor[(4, 6, 16), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) {
  @func_2887(%var_2888) /* ty=(Tensor[(4, 6, 16), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */
}

def @func_8472() -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32]) {
  %634 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %635 = @func_8221() /* ty=Tensor[(15, 2, 1), float64] */;
  %636 = %634.0;
  (%635, %636)
}

def @func_3861(%var_3859: int8, %var_3860: Tensor[(2, 11, 15), int8]) -> Tensor[(2, 11, 15), int32] {
  @func_3857(%var_3859, %var_3860) /* ty=Tensor[(2, 11, 15), int32] */
}

def @func_9788() -> (Tensor[(672), int32], Tensor[(672), int32], Tensor[(10, 4, 3), bool], Tensor[(10, 12, 2), float32]) {
  @func_9786() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(10, 4, 3), bool], Tensor[(10, 12, 2), float32]) */
}

def @func_6014(%var_5995: Tensor[(6, 12, 16), uint8], %var_5996: Tensor[(6, 12, 16), uint8]) -> (Tensor[(6, 12, 16), uint8], Tensor[(6, 12, 16), uint64]) {
  %637 = cast(%var_5996, dtype="uint8") /* ty=Tensor[(6, 12, 16), uint8] */;
  %638 = shape_of(%var_5995, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%var_5995, dtype="uint8") /* ty=Tensor[(6, 12, 16), uint8] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %641 = cast(%var_5995, dtype="uint64") /* ty=Tensor[(6, 12, 16), uint64] */;
  %642 = shape_of(%var_5996, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%var_5996, dtype="uint64") /* ty=Tensor[(6, 12, 16), uint64] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %645 = subtract(%639, %640) /* ty=Tensor[(6, 12, 16), uint8] */;
  %646 = add(%643, %644) /* ty=Tensor[(6, 12, 16), uint64] */;
  (%645, %646)
}

def @func_11086() -> (Tensor[(10, 12, 2), float64],) {
  @func_11084() /* ty=(Tensor[(10, 12, 2), float64],) */
}

def @func_14544() -> (Tensor[(15, 2, 1), float64],) {
  %649 = fn () -> (Tensor[(15, 2, 1), float64],) {
    %647 = @func_13061() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
    %648 = %647.0;
    (%648,)
  };
  %649() /* ty=(Tensor[(15, 2, 1), float64],) */
}

def @func_15262() -> Tensor[(672), int32] {
  %650 = fn () -> Tensor[(672), int32] {
    @func_10082() /* ty=Tensor[(672), int32] */
  };
  %650() /* ty=Tensor[(672), int32] */
}

def @func_9230(%var_9228: Tensor[(10, 12, 2), float32]) -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) {
  @func_9227(%var_9228) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) */
}

def @func_9840() -> Tensor[(672), int32] {
  %652 = fn () -> Tensor[(672), int32] {
    %651 = @func_7336() /* ty=(Tensor[(672), int32],) */;
    %651.0
  };
  %652() /* ty=Tensor[(672), int32] */
}

def @func_5764(%var_5737: Tensor[(15, 2, 1), float64]) -> (Tensor[(15, 2, 672), float64], Tensor[(10, 12, 2), float32]) {
  %653 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %654 = cast(%var_5737, dtype="uint32") /* ty=Tensor[(15, 2, 1), uint32] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%653, dtype="uint32") /* ty=Tensor[(15, 2, 1), uint32] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %658 = maximum(%656, %657) /* ty=Tensor[(15, 2, ?), uint32] */;
  %659 = @func_5310() /* ty=Tensor[(672), int32] */;
  %660 = cast(%658, dtype="bool") /* ty=Tensor[(15, 2, ?), bool] */;
  %661 = cast(%659, dtype="bool") /* ty=Tensor[(672), bool] */;
  %662 = less_equal(%660, %661) /* ty=Tensor[(15, 2, 672), bool] */;
  %663 = cast(%662, dtype="float32") /* ty=Tensor[(15, 2, 672), float32] */;
  %664 = tan(%663) /* ty=Tensor[(15, 2, 672), float32] */;
  %665 = cast(%664, dtype="float64") /* ty=Tensor[(15, 2, 672), float64] */;
  %666 = log2(%665) /* ty=Tensor[(15, 2, 672), float64] */;
  %667 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  (%666, %667)
}

def @func_8121() -> (Tensor[(70), bool],) {
  %670 = fn () -> (Tensor[(70), bool],) {
    %668 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
    %669 = %668.1;
    (%669,)
  };
  %670() /* ty=(Tensor[(70), bool],) */
}

def @func_14336() -> (Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64], Tensor[(120), int64]) {
  %671 = @func_6934() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
  %672 = @func_10212() /* ty=(Tensor[(15, 2, 1), float32], Tensor[(15, 2, 1), float64]) */;
  %673 = cast(meta[relay.Constant][29] /* ty=Tensor[(120), int64] */, dtype="int64") /* ty=Tensor[(120), int64] */;
  %674 = reshape(%673, newshape=[120]) /* ty=Tensor[(120), int64] */;
  %675 = @func_5117(%674) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(24, 16), uint16], Tensor[(120), int64], Tensor[(96, 4), float32], Tensor[(70), bool]) */;
  %676 = %671.1;
  %677 = %672.1;
  %678 = %675.0;
  (%676, %677, %678, meta[relay.Constant][29] /* ty=Tensor[(120), int64] */)
}

def @func_6018(%var_6016: Tensor[(6, 12, 16), uint8], %var_6017: Tensor[(6, 12, 16), uint8]) -> (Tensor[(6, 12, 16), uint8], Tensor[(6, 12, 16), uint64]) {
  @func_6014(%var_6016, %var_6017) /* ty=(Tensor[(6, 12, 16), uint8], Tensor[(6, 12, 16), uint64]) */
}

def @func_13739() -> (Tensor[(10, 12, 2), float32],) {
  %679 = @func_8871() /* ty=Tensor[(10, 12, 2), float32] */;
  (%679,)
}

def @func_13964(%var_13949: Tensor[(1152), uint8]) -> (Tensor[(10, 12, 2), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8]) {
  %680 = cast(meta[relay.Constant][30] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %681 = reshape(%680, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
  %682 = @func_651(%681) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
  %683 = cast(%var_13949, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %684 = cast(%var_13949, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %685 = reshape(%683, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %686 = reshape(%684, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %687 = @func_6014(%685, %686) /* ty=(Tensor[(6, 12, 16), uint8], Tensor[(6, 12, 16), uint64]) */;
  %688 = @func_8871() /* ty=Tensor[(10, 12, 2), float32] */;
  %689 = %682.0;
  %690 = %687.0;
  (%688, %689, meta[relay.Constant][30] /* ty=Tensor[(672), int32] */, %690, %var_13949)
}

def @func_10777() -> Tensor[(10, 12, 2), float32] {
  @func_10775() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_9101() -> Tensor[(10, 12, 2), float32] {
  @func_9099() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_15005() -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint8], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) {
  %696 = fn () -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint8], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) {
    %691 = @func_9522() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
    %692 = %691.0;
    %693 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
    %694 = @func_9099() /* ty=Tensor[(10, 12, 2), float32] */;
    %695 = @func_9099() /* ty=Tensor[(10, 12, 2), float32] */;
    (%692, %693, %694, %695)
  };
  %696() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint8], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) */
}

def @func_5821() -> Tensor[(672), int32] {
  %698 = fn () -> Tensor[(672), int32] {
    %697 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
    %697.2
  };
  %698() /* ty=Tensor[(672), int32] */
}

def @func_4762() -> Tensor[(15, 2, 1), float64] {
  @func_4760() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_8551() -> (Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) {
  @func_8549() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) */
}

def @func_6748(%var_6746: Tensor[(10, 15, 10), float64]) -> (Tensor[(10, 15, 10), float64], Tensor[(672), int32], Tensor[(8, 6, 14), bool], Tensor[(15, 2, 672), uint8], Tensor[(10, 15, 10), int8], Tensor[(15, 2, 672), float32], Tensor[(10, 12, 2), float32]) {
  @func_6745(%var_6746) /* ty=(Tensor[(10, 15, 10), float64], Tensor[(672), int32], Tensor[(8, 6, 14), bool], Tensor[(15, 2, 672), uint8], Tensor[(10, 15, 10), int8], Tensor[(15, 2, 672), float32], Tensor[(10, 12, 2), float32]) */
}

def @func_9138() -> Tensor[(15, 2, 1), float64] {
  @func_9136() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_15642(%var_15640: Tensor[(15, 2, 15), float64], %var_15641: Tensor[(1152), uint8]) -> (Tensor[(15, 2, 15), bool], Tensor[(8, 6, 14), float32], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 15), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8], Tensor[(?, 9, 12), float64], Tensor[(108), float64], Tensor[(15, 2, 1), float64]) {
  @func_15638(%var_15640, %var_15641) /* ty=(Tensor[(15, 2, 15), bool], Tensor[(8, 6, 14), float32], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 15), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8], Tensor[(?, 9, 12), float64], Tensor[(108), float64], Tensor[(15, 2, 1), float64]) */
}

def @func_15420(%var_15418: Tensor[(3, 5, 4), int16], %var_15419: Tensor[(1152), uint8]) -> (Tensor[(3, 5, 4), bool], Tensor[(10, 12, 2), float32], Tensor[(1152), uint8], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64]) {
  %711 = fn (%var_15360: Tensor[(3, 5, 4), int16], %var_15369: Tensor[(1152), uint8]) -> (Tensor[(3, 5, 4), bool], Tensor[(10, 12, 2), float32], Tensor[(1152), uint8], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64]) {
    %699 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 5, 4), int16] */, dtype="bool") /* ty=Tensor[(3, 5, 4), bool] */;
    %700 = shape_of(%var_15360, dtype="int32") /* ty=Tensor[(3), int32] */;
    %701 = cast(%var_15360, dtype="bool") /* ty=Tensor[(3, 5, 4), bool] */;
    %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %703 = cast(%var_15369, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
    %704 = reshape(%703, newshape=[1152]) /* ty=Tensor[(1152), uint8] */;
    %705 = @func_7151(%704) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8]) */;
    %706 = @func_13061() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
    %707 = less(%701, %702) /* ty=Tensor[(3, 5, 4), bool] */;
    %708 = %705.1;
    %709 = %706.1;
    %710 = @func_10824() /* ty=Tensor[(15, 2, 1), float64] */;
    (%707, %708, %var_15369, %709, %710)
  };
  %711(%var_15418, %var_15419) /* ty=(Tensor[(3, 5, 4), bool], Tensor[(10, 12, 2), float32], Tensor[(1152), uint8], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64]) */
}

def @func_11084() -> (Tensor[(10, 12, 2), float64],) {
  %712 = @func_9980() /* ty=(Tensor[(672), int32], Tensor[(10, 12, 2), float64]) */;
  %713 = %712.1;
  (%713,)
}

def @func_10426(%var_10411: Tensor[(3, 2), float32]) -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint8], Tensor[(672), int32], Tensor[(3, 2), float32], Tensor[(15, 2, 672), float64], Tensor[(10, 12, 2), float32]) {
  %714 = @func_8549() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) */;
  %715 = @func_9839() /* ty=Tensor[(672), int32] */;
  %716 = @func_5948() /* ty=Tensor[(15, 2, 672), uint8] */;
  %717 = cast(%715, dtype="uint8") /* ty=Tensor[(672), uint8] */;
  %718 = cast(%716, dtype="uint8") /* ty=Tensor[(15, 2, 672), uint8] */;
  %719 = cast(%var_10411, dtype="float32") /* ty=Tensor[(3, 2), float32] */;
  %720 = cast(%715, dtype="int32") /* ty=Tensor[(672), int32] */;
  %721 = reshape(%719, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), float32] */;
  %722 = reshape(%720, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %723 = @func_3069(%721, %722) /* ty=(Tensor[(?, 2, 3), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */;
  %724 = cast(%716, dtype="float64") /* ty=Tensor[(15, 2, 672), float64] */;
  %725 = @func_10052() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %726 = %714.1;
  %727 = bitwise_and(%717, %718) /* ty=Tensor[(15, 2, 672), uint8] */;
  %728 = %723.2;
  %729 = cos(%724) /* ty=Tensor[(15, 2, 672), float64] */;
  %730 = %725.0;
  (%726, %727, %728, %var_10411, %729, %730)
}

def @func_6344() -> (Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) {
  %734 = fn () -> (Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) {
    %731 = @func_5310() /* ty=Tensor[(672), int32] */;
    %732 = @func_6040() /* ty=Tensor[(672), int32] */;
    %733 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
    (%731, %732, %733)
  };
  %734() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */
}

def @func_6934() -> (Tensor[(672), int32], Tensor[(8, 6, 14), bool]) {
  %735 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %736 = @func_5310() /* ty=Tensor[(672), int32] */;
  %737 = %735.1;
  (%736, %737)
}

def @func_5255(%var_5251: Tensor[(96, 4), float32]) -> (Tensor[(10, 4, 3), bool], Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(96, 4), float32]) {
  %738 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %739 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %740 = cast(%var_5251, dtype="float32") /* ty=Tensor[(96, 4), float32] */;
  %741 = reshape(%740, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), float32] */;
  %742 = @func_2887(%741) /* ty=(Tensor[(4, 6, 16), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */;
  %743 = %738.0;
  %744 = %739.2;
  %745 = %742.1;
  (%743, %744, %745, %var_5251)
}

def @func_9384() -> Tensor[(10, 12, 2), float32] {
  %747 = fn () -> Tensor[(10, 12, 2), float32] {
    %746 = @func_8549() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) */;
    %746.0
  };
  %747() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_5439(%var_5438: Tensor[(15, 2, 3), float64]) -> (Tensor[(15, 2, 3), uint32], Tensor[(672), int32]) {
  %754 = fn (%var_5405: Tensor[(15, 2, 3), float64]) -> (Tensor[(15, 2, 3), uint32], Tensor[(672), int32]) {
    %748 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
    %749 = cast(%748, dtype="uint32") /* ty=Tensor[(15, 2, 1), uint32] */;
    %750 = cast(%var_5405, dtype="uint32") /* ty=Tensor[(15, 2, 3), uint32] */;
    %751 = @func_5154() /* ty=(Tensor[(672), int32],) */;
    %752 = left_shift(%749, %750) /* ty=Tensor[(15, 2, 3), uint32] */;
    %753 = %751.0;
    (%752, %753)
  };
  %754(%var_5438) /* ty=(Tensor[(15, 2, 3), uint32], Tensor[(672), int32]) */
}

def @func_10213() -> (Tensor[(15, 2, 1), float32], Tensor[(15, 2, 1), float64]) {
  %760 = fn () -> (Tensor[(15, 2, 1), float32], Tensor[(15, 2, 1), float64]) {
    %755 = @func_8221() /* ty=Tensor[(15, 2, 1), float64] */;
    %756 = cast(%755, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
    %757 = cast(%755, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
    %758 = asinh(%756) /* ty=Tensor[(15, 2, 1), float32] */;
    %759 = cos(%757) /* ty=Tensor[(15, 2, 1), float64] */;
    (%758, %759)
  };
  %760() /* ty=(Tensor[(15, 2, 1), float32], Tensor[(15, 2, 1), float64]) */
}

def @func_11891() -> (Tensor[(10, 12, 2), float32], Tensor[(784), float64], Tensor[(784), float64], Tensor[(10, 12, 2), float32]) {
  %771 = fn () -> (Tensor[(10, 12, 2), float32], Tensor[(784), float64], Tensor[(784), float64], Tensor[(10, 12, 2), float32]) {
    %761 = @func_8384() /* ty=(Tensor[(10, 12, 2), float32],) */;
    %762 = %761.0;
    %763 = cast(%762, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
    %764 = cast(meta[relay.Constant][32] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %765 = reshape(%764, newshape=[4, 196]) /* ty=Tensor[(4, 196), float64] */;
    %766 = @func_8148(%765) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(784), float64], Tensor[(4, 196), float64]) */;
    %767 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
    %768 = log(%763) /* ty=Tensor[(10, 12, 2), float32] */;
    %769 = %766.1;
    %770 = %767.0;
    (%768, %769, meta[relay.Constant][32] /* ty=Tensor[(784), float64] */, %770)
  };
  %771() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(784), float64], Tensor[(784), float64], Tensor[(10, 12, 2), float32]) */
}

def @func_12632() -> (Tensor[(10, 12, 2), float32],) {
  %774 = fn () -> (Tensor[(10, 12, 2), float32],) {
    %772 = @func_6519() /* ty=(Tensor[(10, 12, 2), float32],) */;
    %773 = %772.0;
    (%773,)
  };
  %774() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_14915(%var_14850: Tensor[(15, 2, 11), float64]) -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 11), float32], Tensor[(15, 2, 11), float32], Tensor[(15, 2, 1), float64]) {
  %775 = @func_10824() /* ty=Tensor[(15, 2, 1), float64] */;
  %776 = cast(%775, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  %777 = cast(%var_14850, dtype="float32") /* ty=Tensor[(15, 2, 11), float32] */;
  %778 = cast(%var_14850, dtype="float64") /* ty=Tensor[(15, 2, 11), float64] */;
  %779 = acos(%778) /* ty=Tensor[(15, 2, 11), float64] */;
  %780 = cast(%779, dtype="float32") /* ty=Tensor[(15, 2, 11), float32] */;
  %781 = @func_6507() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %782 = @func_8871() /* ty=Tensor[(10, 12, 2), float32] */;
  %783 = power(%776, %777) /* ty=Tensor[(15, 2, 11), float32] */;
  %784 = cosh(%780) /* ty=Tensor[(15, 2, 11), float32] */;
  %785 = %781.0;
  (%782, %783, %784, %785)
}

def @func_5966() -> (Tensor[(15, 2, 1), float64],) {
  %786 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %787 = %786.2;
  (%787,)
}

def @func_13977() -> (Tensor[(672), int32],) {
  @func_13975() /* ty=(Tensor[(672), int32],) */
}

def @func_5120(%var_5118: Tensor[(120), int64]) -> (Tensor[(15, 2, 1), float64], Tensor[(24, 16), uint16], Tensor[(120), int64], Tensor[(96, 4), float32], Tensor[(70), bool]) {
  @func_5117(%var_5118) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(24, 16), uint16], Tensor[(120), int64], Tensor[(96, 4), float32], Tensor[(70), bool]) */
}

def @func_7017(%var_7015: Tensor[(15, 14, 4), float64], %var_7016: Tensor[(70), bool]) -> (Tensor[(10, 12, 2), float32], Tensor[(15, 14, 4), float32], Tensor[(168, 4), int32], Tensor[(70), bool]) {
  @func_7013(%var_7015, %var_7016) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 14, 4), float32], Tensor[(168, 4), int32], Tensor[(70), bool]) */
}

def @func_7291() -> Tensor[(10, 12, 2), float32] {
  %788 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %788.0
}

def @func_9099() -> Tensor[(10, 12, 2), float32] {
  %789 = @func_7756() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %789.0
}

def @func_10999() -> (Tensor[(5, 15, 10), float32],) {
  %790 = @func_10797() /* ty=Tensor[(5, 15, 10), float32] */;
  (%790,)
}

def @func_14488() -> (Tensor[(10, 12, 2), float32],) {
  %791 = @func_12631() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %792 = %791.0;
  (%792,)
}

def @func_15793() -> Tensor[(10, 4, 3), float64] {
  @func_15791() /* ty=Tensor[(10, 4, 3), float64] */
}

def @func_15679() -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32], Tensor[(4, 16, 4), float64], Tensor[(256, 1), float32]) {
  %800 = fn () -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32], Tensor[(4, 16, 4), float64], Tensor[(256, 1), float32]) {
    %793 = @func_12361() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool]) */;
    %794 = cast(meta[relay.Constant][33] /* ty=Tensor[(256, 1), float32] */, dtype="float32") /* ty=Tensor[(256, 1), float32] */;
    %795 = reshape(%794, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float32] */;
    %796 = @func_7989(%795) /* ty=(Tensor[(4, 16, 4), float64],) */;
    %797 = %793.0;
    %798 = @func_13030() /* ty=Tensor[(10, 12, 2), float32] */;
    %799 = %796.0;
    (%797, %798, %799, meta[relay.Constant][33] /* ty=Tensor[(256, 1), float32] */)
  };
  %800() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32], Tensor[(4, 16, 4), float64], Tensor[(256, 1), float32]) */
}

def @func_5117(%var_5094: Tensor[(120), int64]) -> (Tensor[(15, 2, 1), float64], Tensor[(24, 16), uint16], Tensor[(120), int64], Tensor[(96, 4), float32], Tensor[(70), bool]) {
  %801 = cast(%var_5094, dtype="int64") /* ty=Tensor[(120), int64] */;
  %802 = cast(%var_5094, dtype="int64") /* ty=Tensor[(120), int64] */;
  %803 = cast(meta[relay.Constant][34] /* ty=Tensor[(96, 4), float32] */, dtype="float32") /* ty=Tensor[(96, 4), float32] */;
  %804 = cast(meta[relay.Constant][34] /* ty=Tensor[(96, 4), float32] */, dtype="float32") /* ty=Tensor[(96, 4), float32] */;
  %805 = reshape(%801, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), int64] */;
  %806 = reshape(%802, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), int64] */;
  %807 = reshape(%803, newshape=[24, 16]) /* ty=Tensor[(24, 16), float32] */;
  %808 = reshape(%804, newshape=[24, 16]) /* ty=Tensor[(24, 16), float32] */;
  %809 = @func_4388(%805, %806, %807, %808) /* ty=(Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float64], Tensor[(672), int32], Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(24, 16), uint16], Tensor[(120), bool], Tensor[(70), bool], Tensor[(10, 4, 3), bool], Tensor[(4, 6, 16), float32]) */;
  %810 = cast(%var_5094, dtype="int64") /* ty=Tensor[(120), int64] */;
  %811 = cast(%var_5094, dtype="int64") /* ty=Tensor[(120), int64] */;
  %812 = %809.6;
  %813 = cast(%812, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
  %814 = cast(%812, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
  %815 = reshape(%810, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), int64] */;
  %816 = reshape(%811, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), int64] */;
  %817 = reshape(%813, newshape=[24, 16]) /* ty=Tensor[(24, 16), float32] */;
  %818 = reshape(%814, newshape=[24, 16]) /* ty=Tensor[(24, 16), float32] */;
  %819 = @func_4388(%815, %816, %817, %818) /* ty=(Tensor[(3, 5, 8), int64], Tensor[(3, 5, 8), float64], Tensor[(672), int32], Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(24, 16), uint16], Tensor[(120), bool], Tensor[(70), bool], Tensor[(10, 4, 3), bool], Tensor[(4, 6, 16), float32]) */;
  %820 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %821 = %819.8;
  (%820, %812, %var_5094, meta[relay.Constant][34] /* ty=Tensor[(96, 4), float32] */, %821)
}

def @func_14338() -> (Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64], Tensor[(120), int64]) {
  @func_14336() /* ty=(Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(15, 2, 1), float64], Tensor[(120), int64]) */
}

def @func_13568(%var_13566: Tensor[(840), float64]) -> (Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(840), float64], Tensor[(70), bool], Tensor[(384), float32]) {
  @func_13565(%var_13566) /* ty=(Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(840), float64], Tensor[(70), bool], Tensor[(384), float32]) */
}

def @func_10354() -> (Tensor[(672), int32], Tensor[(15, 2, 1), float32]) {
  @func_10352() /* ty=(Tensor[(672), int32], Tensor[(15, 2, 1), float32]) */
}

def @func_10589() -> Tensor[(10, 12, 2), float32] {
  @func_10587() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_13663(%var_13650: Tensor[(6), float32]) -> (Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(6), float32]) {
  %822 = @func_12361() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool]) */;
  %823 = cast(%var_13650, dtype="float32") /* ty=Tensor[(6), float32] */;
  %824 = reshape(%823, newshape=[3, 2]) /* ty=Tensor[(3, 2), float32] */;
  %825 = @func_10426(%824) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint8], Tensor[(672), int32], Tensor[(3, 2), float32], Tensor[(15, 2, 672), float64], Tensor[(10, 12, 2), float32]) */;
  %826 = %822.1;
  %827 = %825.5;
  (%826, %827, %var_13650)
}

def @func_13565(%var_13557: Tensor[(840), float64]) -> (Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(840), float64], Tensor[(70), bool], Tensor[(384), float32]) {
  %828 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %829 = cast(%var_13557, dtype="float64") /* ty=Tensor[(840), float64] */;
  %830 = cast(meta[relay.Constant][35] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
  %831 = reshape(%829, newshape=[15, 14, 4]) /* ty=Tensor[(15, 14, 4), float64] */;
  %832 = reshape(%830, newshape=[70]) /* ty=Tensor[(70), bool] */;
  %833 = @func_7013(%831, %832) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 14, 4), float32], Tensor[(168, 4), int32], Tensor[(70), bool]) */;
  %834 = @func_9593() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(384), float32], Tensor[(384), float32], Tensor[(672), int32]) */;
  %835 = %828.0;
  %836 = %833.0;
  %837 = %834.2;
  (%835, %836, %var_13557, meta[relay.Constant][35] /* ty=Tensor[(70), bool] */, %837)
}

def @func_11076(%var_11012: Tensor[(16, 12, 7), float32], %var_11063: Tensor[(1, 56), float64]) -> (Tensor[(16, 12, 7), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8], Tensor[(16, 12, 7), float64], Tensor[(16, 12, 7), bool], Tensor[(16, 12, 7), int16], Tensor[(8, 7, 14), float64], Tensor[(1, 56), float64], Tensor[(784), float64]) {
  %838 = cast(%var_11012, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %839 = sqrt(%838) /* ty=Tensor[(16, 12, 7), float32] */;
  %840 = cast(%var_11012, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %841 = shape_of(%839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%839, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %844 = cast(meta[relay.Constant][36] /* ty=Tensor[(1152), uint8] */, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %845 = cast(meta[relay.Constant][36] /* ty=Tensor[(1152), uint8] */, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %846 = reshape(%844, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %847 = reshape(%845, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %848 = @func_6014(%846, %847) /* ty=(Tensor[(6, 12, 16), uint8], Tensor[(6, 12, 16), uint64]) */;
  %849 = cast(%var_11012, dtype="float64") /* ty=Tensor[(16, 12, 7), float64] */;
  %850 = cast(%var_11012, dtype="bool") /* ty=Tensor[(16, 12, 7), bool] */;
  %851 = shape_of(%839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %852 = cast(%839, dtype="bool") /* ty=Tensor[(16, 12, 7), bool] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %854 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 12, 7), float32] */, dtype="int16") /* ty=Tensor[(16, 12, 7), int16] */;
  %855 = shape_of(%839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%839, dtype="int16") /* ty=Tensor[(16, 12, 7), int16] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %858 = cast(%var_11063, dtype="float64") /* ty=Tensor[(1, 56), float64] */;
  %859 = cast(meta[relay.Constant][38] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %860 = reshape(%858, newshape=[8, 7, 1]) /* ty=Tensor[(8, 7, 1), float64] */;
  %861 = reshape(%859, newshape=[8, 7, 14]) /* ty=Tensor[(8, 7, 14), float64] */;
  %862 = @func_4241(%860, %861) /* ty=(Tensor[(8, 7, 14), float64],) */;
  %863 = power(%842, %843) /* ty=Tensor[(16, 12, 7), float32] */;
  %864 = %848.0;
  %865 = atanh(%849) /* ty=Tensor[(16, 12, 7), float64] */;
  %866 = logical_and(%852, %853) /* ty=Tensor[(16, 12, 7), bool] */;
  %867 = add(%856, %857) /* ty=Tensor[(16, 12, 7), int16] */;
  %868 = %862.0;
  (%863, %864, meta[relay.Constant][36] /* ty=Tensor[(1152), uint8] */, %865, %866, %867, %868, %var_11063, meta[relay.Constant][38] /* ty=Tensor[(784), float64] */)
}

def @func_14440() -> (Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(48, 24), uint8]) {
  %877 = fn () -> (Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(48, 24), uint8]) {
    %869 = @func_7066() /* ty=(Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) */;
    %870 = @func_12872() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint64], Tensor[(10, 12, 2), float32]) */;
    %871 = cast(meta[relay.Constant][39] /* ty=Tensor[(48, 24), uint8] */, dtype="uint8") /* ty=Tensor[(48, 24), uint8] */;
    %872 = reshape(%871, newshape=[1152]) /* ty=Tensor[(1152), uint8] */;
    %873 = @func_13964(%872) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8]) */;
    %874 = %869.0;
    %875 = %870.0;
    %876 = %873.2;
    (%874, %875, %876, meta[relay.Constant][39] /* ty=Tensor[(48, 24), uint8] */)
  };
  %877() /* ty=(Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(48, 24), uint8]) */
}

def @func_5154() -> (Tensor[(672), int32],) {
  %878 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %879 = %878.2;
  (%879,)
}

def @func_10053() -> (Tensor[(10, 12, 2), float32],) {
  %882 = fn () -> (Tensor[(10, 12, 2), float32],) {
    %880 = @func_8549() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) */;
    %881 = %880.0;
    (%881,)
  };
  %882() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_6521() -> (Tensor[(10, 12, 2), float32],) {
  @func_6519() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_6936() -> (Tensor[(672), int32], Tensor[(8, 6, 14), bool]) {
  @func_6934() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */
}

def @func_14710() -> (Tensor[(15, 2, 1), float64],) {
  %885 = fn () -> (Tensor[(15, 2, 1), float64],) {
    %883 = @func_14543() /* ty=(Tensor[(15, 2, 1), float64],) */;
    %884 = %883.0;
    (%884,)
  };
  %885() /* ty=(Tensor[(15, 2, 1), float64],) */
}

def @func_12403() -> (Tensor[(672), int32], Tensor[(15, 2, 1), float64]) {
  %886 = @func_9476() /* ty=(Tensor[(672), int32],) */;
  %887 = @func_9728() /* ty=(Tensor[(15, 2, 1), float64],) */;
  %888 = %886.0;
  %889 = %887.0;
  (%888, %889)
}

def @func_6652() -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32]) {
  %893 = fn () -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32]) {
    %890 = @func_5966() /* ty=(Tensor[(15, 2, 1), float64],) */;
    %891 = %890.0;
    %892 = @func_6576() /* ty=Tensor[(672), int32] */;
    (%891, %892)
  };
  %893() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */
}

def @func_9594() -> (Tensor[(15, 2, 1), float64], Tensor[(384), float32], Tensor[(384), float32], Tensor[(672), int32]) {
  %903 = fn () -> (Tensor[(15, 2, 1), float64], Tensor[(384), float32], Tensor[(384), float32], Tensor[(672), int32]) {
    %894 = @func_5966() /* ty=(Tensor[(15, 2, 1), float64],) */;
    %895 = %894.0;
    %896 = cast(%895, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
    %897 = cast(meta[relay.Constant][40] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
    %898 = reshape(%897, newshape=[384]) /* ty=Tensor[(384), float32] */;
    %899 = @func_7729(%898) /* ty=(Tensor[(672), int32], Tensor[(384), float32], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(4, 6, 16), float64]) */;
    %900 = asin(%896) /* ty=Tensor[(15, 2, 1), float64] */;
    %901 = %899.1;
    %902 = @func_5310() /* ty=Tensor[(672), int32] */;
    (%900, %901, meta[relay.Constant][40] /* ty=Tensor[(384), float32] */, %902)
  };
  %903() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(384), float32], Tensor[(384), float32], Tensor[(672), int32]) */
}

def @func_6577() -> Tensor[(672), int32] {
  %905 = fn () -> Tensor[(672), int32] {
    %904 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
    %904.1
  };
  %905() /* ty=Tensor[(672), int32] */
}

def @func_11001() -> (Tensor[(5, 15, 10), float32],) {
  @func_10999() /* ty=(Tensor[(5, 15, 10), float32],) */
}

def @func_8803() -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  %906 = @func_8106() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %907 = @func_4896() /* ty=Tensor[(15, 2, 1), float64] */;
  %908 = %906.0;
  (%907, %908)
}

def @func_9024() -> (Tensor[(90), float64], Tensor[(15, 2, 672), uint32], Tensor[(15, 2, 672), int32], Tensor[(10, 12, 2), float32]) {
  %909 = @func_8803() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %910 = %909.0;
  %911 = @func_6040() /* ty=Tensor[(672), int32] */;
  %912 = cast(%910, dtype="uint32") /* ty=Tensor[(15, 2, 1), uint32] */;
  %913 = cast(%911, dtype="uint32") /* ty=Tensor[(672), uint32] */;
  %914 = cast(meta[relay.Constant][41] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %915 = reshape(%914, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
  %916 = @func_5437(%915) /* ty=(Tensor[(15, 2, 3), uint32], Tensor[(672), int32]) */;
  %917 = %916.1;
  %918 = cast(%917, dtype="int32") /* ty=Tensor[(672), int32] */;
  %919 = cast(%910, dtype="int32") /* ty=Tensor[(15, 2, 1), int32] */;
  %920 = logical_xor(%912, %913) /* ty=Tensor[(15, 2, 672), uint32] */;
  %921 = left_shift(%918, %919) /* ty=Tensor[(15, 2, 672), int32] */;
  %922 = @func_7490() /* ty=Tensor[(10, 12, 2), float32] */;
  (meta[relay.Constant][41] /* ty=Tensor[(90), float64] */, %920, %921, %922)
}

def @func_12173() -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), bool], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) {
  %923 = @func_7429() /* ty=Tensor[(15, 2, 1), float64] */;
  %924 = @func_5154() /* ty=(Tensor[(672), int32],) */;
  %925 = %924.0;
  %926 = cast(%923, dtype="bool") /* ty=Tensor[(15, 2, 1), bool] */;
  %927 = cast(%925, dtype="bool") /* ty=Tensor[(672), bool] */;
  %928 = @func_7907() /* ty=Tensor[(10, 12, 2), float32] */;
  %929 = cast(%928, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %930 = reshape(%929, newshape=[10, 12, 2]) /* ty=Tensor[(10, 12, 2), float32] */;
  %931 = @func_7540(%930) /* ty=(Tensor[(10, 12, 2), float32],) */;
  %932 = logical_and(%926, %927) /* ty=Tensor[(15, 2, 672), bool] */;
  %933 = @func_6227() /* ty=Tensor[(10, 12, 2), float32] */;
  %934 = %931.0;
  (%928, %932, %933, %934)
}

def @func_10084() -> Tensor[(672), int32] {
  @func_10082() /* ty=Tensor[(672), int32] */
}

def @func_7336() -> (Tensor[(672), int32],) {
  %935 = @func_6651() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
  %936 = %935.1;
  (%936,)
}

def @func_12641() -> Tensor[(5, 10, 10), float32] {
  @func_12639() /* ty=Tensor[(5, 10, 10), float32] */
}

def @func_13266() -> (Tensor[(70), bool],) {
  %937 = @func_13138() /* ty=(Tensor[(70), bool],) */;
  %938 = %937.0;
  (%938,)
}

def @func_11919() -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32]) {
  %943 = fn () -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32]) {
    %939 = @func_11124() /* ty=(Tensor[(15, 2, 1), float64],) */;
    %940 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
    %941 = %939.0;
    %942 = %940.1;
    (%941, %942)
  };
  %943() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */
}

def @func_5968() -> (Tensor[(15, 2, 1), float64],) {
  @func_5966() /* ty=(Tensor[(15, 2, 1), float64],) */
}

def @func_7429() -> Tensor[(15, 2, 1), float64] {
  %944 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
  %944.2
}

def @func_13666(%var_13664: Tensor[(6), float32]) -> (Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(6), float32]) {
  @func_13663(%var_13664) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(6), float32]) */
}

def @func_7542(%var_7541: Tensor[(10, 12, 2), float32]) -> (Tensor[(10, 12, 2), float32],) {
  %952 = fn (%var_7529: Tensor[(10, 12, 2), float32]) -> (Tensor[(10, 12, 2), float32],) {
    %945 = @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */;
    %946 = %945.0;
    %947 = cast(%var_7529, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
    %948 = shape_of(%946, dtype="int32") /* ty=Tensor[(3), int32] */;
    %949 = cast(%946, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
    %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %951 = floor_divide(%949, %950) /* ty=Tensor[(10, 12, 2), float32] */;
    (%951,)
  };
  %952(%var_7541) /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_7492() -> Tensor[(10, 12, 2), float32] {
  @func_7490() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_4896() -> Tensor[(15, 2, 1), float64] {
  @func_4760() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_12086() -> (Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) {
  %953 = @func_11918() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
  %954 = @func_10775() /* ty=Tensor[(10, 12, 2), float32] */;
  %955 = @func_5310() /* ty=Tensor[(672), int32] */;
  %956 = %953.0;
  (%954, %955, %956)
}

def @func_7338() -> (Tensor[(672), int32],) {
  @func_7336() /* ty=(Tensor[(672), int32],) */
}

def @func_11723(%var_11721: Tensor[(1344), float32], %var_11722: Tensor[(56), float64]) -> (Tensor[(10, 12, 2), float64], Tensor[(784), float64], Tensor[(1344), float32], Tensor[(56), float64], Tensor[(10, 12, 2), float32]) {
  @func_11719(%var_11721, %var_11722) /* ty=(Tensor[(10, 12, 2), float64], Tensor[(784), float64], Tensor[(1344), float32], Tensor[(56), float64], Tensor[(10, 12, 2), float32]) */
}

def @func_14611() -> Tensor[(672), int32] {
  %957 = fn () -> Tensor[(672), int32] {
    @func_6787() /* ty=Tensor[(672), int32] */
  };
  %957() /* ty=Tensor[(672), int32] */
}

def @func_5311() -> Tensor[(672), int32] {
  %959 = fn () -> Tensor[(672), int32] {
    %958 = @func_5154() /* ty=(Tensor[(672), int32],) */;
    %958.0
  };
  %959() /* ty=Tensor[(672), int32] */
}

def @func_2266(%var_2255: Tensor[(9, 14, 15), float64], %var_2256: Tensor[(9, 14, 15), float64]) -> (Tensor[(9, 14, 15), float64],) {
  %960 = cast(%var_2256, dtype="float64") /* ty=Tensor[(9, 14, 15), float64] */;
  %961 = shape_of(%var_2255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %962 = cast(%var_2255, dtype="float64") /* ty=Tensor[(9, 14, 15), float64] */;
  %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %964 = divide(%962, %963) /* ty=Tensor[(9, 14, 15), float64] */;
  (%964,)
}

def @func_5156() -> (Tensor[(672), int32],) {
  @func_5154() /* ty=(Tensor[(672), int32],) */
}

def @func_9161() -> Tensor[(10, 12, 2), float32] {
  %966 = fn () -> Tensor[(10, 12, 2), float32] {
    %965 = @func_8549() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32]) */;
    %965.0
  };
  %966() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_11247() -> (Tensor[(15, 2, 1), float64],) {
  @func_11245() /* ty=(Tensor[(15, 2, 1), float64],) */
}

def @func_7909() -> Tensor[(10, 12, 2), float32] {
  @func_7907() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_6787() -> Tensor[(672), int32] {
  @func_5820() /* ty=Tensor[(672), int32] */
}

def @func_7151(%var_7144: Tensor[(1152), uint8]) -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32], Tensor[(6, 12, 16), uint8], Tensor[(1152), uint8]) {
  %967 = cast(%var_7144, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %968 = cast(%var_7144, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %969 = reshape(%967, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %970 = reshape(%968, newshape=[6, 12, 16]) /* ty=Tensor[(6, 12, 16), uint8] */;
  %971 = @func_6014(%969, %970) /* ty=(Tensor[(6, 12, 16), uint8], Tensor[(6, 12, 16), uint64]) */;
  %972 = @func_4896() /* ty=Tensor[(15, 2, 1), float64] */;
  %973 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
  %974 = %971.0;
  (%972, %973, %974, %var_7144)
}

def @func_14240(%var_14239: Tensor[(1, 135), int8]) -> (Tensor[(15, 2, 1), float64], Tensor[(3, 9, 5), float64], Tensor[(1, 135), int8], Tensor[(15, 2, 672), float32], Tensor[(20160), uint8]) {
  %986 = fn (%var_14230: Tensor[(1, 135), int8]) -> (Tensor[(15, 2, 1), float64], Tensor[(3, 9, 5), float64], Tensor[(1, 135), int8], Tensor[(15, 2, 672), float32], Tensor[(20160), uint8]) {
    %975 = cast(%var_14230, dtype="int8") /* ty=Tensor[(1, 135), int8] */;
    %976 = cast(%var_14230, dtype="int8") /* ty=Tensor[(1, 135), int8] */;
    %977 = reshape(%975, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), int8] */;
    %978 = reshape(%976, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), int8] */;
    %979 = @func_9336(%977, %978) /* ty=(Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) */;
    %980 = cast(meta[relay.Constant][42] /* ty=Tensor[(20160), uint8] */, dtype="uint8") /* ty=Tensor[(20160), uint8] */;
    %981 = reshape(%980, newshape=[15, 2, 672]) /* ty=Tensor[(15, 2, 672), uint8] */;
    %982 = @func_6172(%981) /* ty=(Tensor[(15, 2, 672), float32], Tensor[(10, 12, 2), float32]) */;
    %983 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
    %984 = %979.1;
    %985 = %982.0;
    (%983, %984, %var_14230, %985, meta[relay.Constant][42] /* ty=Tensor[(20160), uint8] */)
  };
  %986(%var_14239) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(3, 9, 5), float64], Tensor[(1, 135), int8], Tensor[(15, 2, 672), float32], Tensor[(20160), uint8]) */
}

def @func_8835() -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(70), bool]) {
  %994 = fn () -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(70), bool]) {
    %987 = @func_6651() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
    %988 = @func_7066() /* ty=(Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 3), uint32], Tensor[(90), float64]) */;
    %989 = @func_8120() /* ty=(Tensor[(70), bool],) */;
    %990 = %987.0;
    %991 = @func_6787() /* ty=Tensor[(672), int32] */;
    %992 = %988.2;
    %993 = %989.0;
    (%990, %991, %992, %993)
  };
  %994() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(70), bool]) */
}

def @func_4241(%var_4236: Tensor[(8, 7, 1), float64], %var_4237: Tensor[(8, 7, 14), float64]) -> (Tensor[(8, 7, 14), float64],) {
  %995 = cast(%var_4236, dtype="float64") /* ty=Tensor[(8, 7, 1), float64] */;
  %996 = cast(%var_4237, dtype="float64") /* ty=Tensor[(8, 7, 14), float64] */;
  %997 = floor_divide(%995, %996) /* ty=Tensor[(8, 7, 14), float64] */;
  (%997,)
}

def @func_12323() -> (Tensor[(10, 12, 2), float64], Tensor[(10, 12, 2), float32]) {
  %998 = @func_11084() /* ty=(Tensor[(10, 12, 2), float64],) */;
  %999 = @func_9522() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %1000 = %999.2;
  %1001 = cast(%1000, dtype="float32") /* ty=Tensor[(10, 12, 2), float32] */;
  %1002 = %998.0;
  %1003 = acosh(%1001) /* ty=Tensor[(10, 12, 2), float32] */;
  (%1002, %1003)
}

def @func_15791() -> Tensor[(10, 4, 3), float64] {
  %1004 = @func_5009() /* ty=(Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) */;
  %1005 = %1004.0;
  %1006 = cast(%1005, dtype="float64") /* ty=Tensor[(10, 4, 3), float64] */;
  sinh(%1006) /* ty=Tensor[(10, 4, 3), float64] */
}

def @func_8151(%var_8149: Tensor[(4, 196), float64]) -> (Tensor[(15, 2, 1), float64], Tensor[(784), float64], Tensor[(4, 196), float64]) {
  @func_8148(%var_8149) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(784), float64], Tensor[(4, 196), float64]) */
}

def @func_8912() -> (Tensor[(10, 12, 2), float64], Tensor[(10, 12, 2), float32]) {
  @func_8910() /* ty=(Tensor[(10, 12, 2), float64], Tensor[(10, 12, 2), float32]) */
}

def @func_8871() -> Tensor[(10, 12, 2), float32] {
  %1007 = @func_8384() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %1007.0
}

def @func_10825() -> Tensor[(15, 2, 1), float64] {
  %1009 = fn () -> Tensor[(15, 2, 1), float64] {
    %1008 = @func_8834() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(70), bool]) */;
    %1008.0
  };
  %1009() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_8474() -> (Tensor[(15, 2, 1), float64], Tensor[(672), int32]) {
  @func_8472() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */
}

def @func_11426(%var_11327: Tensor[(1, 208), float64], %var_11370: Tensor[(384), float32]) -> (Tensor[(?, 208), bool], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), uint64], Tensor[(15, 2, 1), float64], Tensor[(784), float64]) {
  %1010 = cast(%var_11327, dtype="float64") /* ty=Tensor[(1, 208), float64] */;
  %1011 = reshape(%1010, newshape=[4, 13, 4]) /* ty=Tensor[(4, 13, 4), float64] */;
  %1012 = @func_5367(%1011) /* ty=(Tensor[(4, 13, 4), float64],) */;
  %1013 = %1012.0;
  %1014 = cast(%1013, dtype="bool") /* ty=Tensor[(4, 13, 4), bool] */;
  %1015 = shape_of(%var_11327, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1016 = cast(%var_11327, dtype="bool") /* ty=Tensor[(1, 208), bool] */;
  %1017 = dyn.reshape(%1014, %1015, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1018 = cast(%var_11370, dtype="float32") /* ty=Tensor[(384), float32] */;
  %1019 = reshape(%1018, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %1020 = @func_5623(%1019) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), float32]) */;
  %1021 = @func_7082() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
  %1022 = %1021.1;
  %1023 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 6, 14), bool] */, dtype="uint64") /* ty=Tensor[(8, 6, 14), uint64] */;
  %1024 = shape_of(%1022, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1025 = cast(%1022, dtype="uint64") /* ty=Tensor[(8, 6, 14), uint64] */;
  %1026 = dyn.reshape(%1023, %1024, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1027 = cast(meta[relay.Constant][44] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %1028 = reshape(%1027, newshape=[4, 196]) /* ty=Tensor[(4, 196), float64] */;
  %1029 = @func_8148(%1028) /* ty=(Tensor[(15, 2, 1), float64], Tensor[(784), float64], Tensor[(4, 196), float64]) */;
  %1030 = greater_equal(%1016, %1017) /* ty=Tensor[(?, 208), bool] */;
  %1031 = %1020.3;
  %1032 = left_shift(%1025, %1026) /* ty=Tensor[(8, 6, 14), uint64] */;
  %1033 = %1029.0;
  (%1030, %1031, %var_11370, %1032, %1033, meta[relay.Constant][44] /* ty=Tensor[(784), float64] */)
}

def @func_11588() -> (Tensor[(10, 12, 2), float32],) {
  %1036 = fn () -> (Tensor[(10, 12, 2), float32],) {
    %1034 = @func_8518() /* ty=(Tensor[(10, 12, 2), float32],) */;
    %1035 = %1034.0;
    (%1035,)
  };
  %1036() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_8593() -> Tensor[(10, 12, 2), float32] {
  %1038 = fn () -> Tensor[(10, 12, 2), float32] {
    %1037 = @func_8384() /* ty=(Tensor[(10, 12, 2), float32],) */;
    %1037.0
  };
  %1038() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_14918(%var_14916: Tensor[(15, 2, 11), float64]) -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 11), float32], Tensor[(15, 2, 11), float32], Tensor[(15, 2, 1), float64]) {
  @func_14915(%var_14916) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 11), float32], Tensor[(15, 2, 11), float32], Tensor[(15, 2, 1), float64]) */
}

def @func_10730() -> (Tensor[(15, 2, 1), float64],) {
  @func_10728() /* ty=(Tensor[(15, 2, 1), float64],) */
}

def @func_10429(%var_10427: Tensor[(3, 2), float32]) -> (Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint8], Tensor[(672), int32], Tensor[(3, 2), float32], Tensor[(15, 2, 672), float64], Tensor[(10, 12, 2), float32]) {
  @func_10426(%var_10427) /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 672), uint8], Tensor[(672), int32], Tensor[(3, 2), float32], Tensor[(15, 2, 672), float64], Tensor[(10, 12, 2), float32]) */
}

def @func_10639() -> Tensor[(15, 2, 1), float64] {
  @func_9136() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_3069(%var_3055: Tensor[(1, 2, 3), float32], %var_3066: Tensor[(672), int32]) -> (Tensor[(?, 2, 3), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) {
  %1039 = cast(%var_3055, dtype="float32") /* ty=Tensor[(1, 2, 3), float32] */;
  %1040 = sin(%1039) /* ty=Tensor[(1, 2, 3), float32] */;
  %1041 = cast(%1040, dtype="float32") /* ty=Tensor[(1, 2, 3), float32] */;
  %1042 = shape_of(%var_3055, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1043 = cast(%var_3055, dtype="float32") /* ty=Tensor[(1, 2, 3), float32] */;
  %1044 = dyn.reshape(%1041, %1042, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1045 = cast(%var_3066, dtype="int32") /* ty=Tensor[(672), int32] */;
  %1046 = reshape(%1045, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), int32] */;
  %1047 = @func_651(%1046) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */;
  %1048 = mod(%1043, %1044) /* ty=Tensor[(?, 2, 3), float32] */;
  %1049 = %1047.0;
  (%1048, %1049, %var_3066)
}

def @func_7013(%var_6967: Tensor[(15, 14, 4), float64], %var_7001: Tensor[(70), bool]) -> (Tensor[(10, 12, 2), float32], Tensor[(15, 14, 4), float32], Tensor[(168, 4), int32], Tensor[(70), bool]) {
  %1050 = @func_5869() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %1051 = cast(%var_6967, dtype="float64") /* ty=Tensor[(15, 14, 4), float64] */;
  %1052 = exp(%1051) /* ty=Tensor[(15, 14, 4), float64] */;
  %1053 = cast(%1052, dtype="float32") /* ty=Tensor[(15, 14, 4), float32] */;
  %1054 = cast(%var_7001, dtype="bool") /* ty=Tensor[(70), bool] */;
  %1055 = reshape(%1054, newshape=[70]) /* ty=Tensor[(70), bool] */;
  %1056 = @func_4184(%1055) /* ty=(Tensor[(10, 12, 1), float32], Tensor[(9, 14, 15), float64], Tensor[(8, 6, 14), bool], Tensor[(585, 3), int8], Tensor[(168, 4), int32], Tensor[(120), bool], Tensor[(70), bool], Tensor[(9, 14, 15), float64]) */;
  %1057 = %1050.0;
  %1058 = sinh(%1053) /* ty=Tensor[(15, 14, 4), float32] */;
  %1059 = %1056.4;
  (%1057, %1058, %1059, %var_7001)
}

def @func_12088() -> (Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) {
  @func_12086() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */
}

def @func_8032() -> Tensor[(5, 15, 10), float32] {
  %1061 = fn () -> Tensor[(5, 15, 10), float32] {
    %1060 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 15, 10), float32] */;
    atanh(%1060) /* ty=Tensor[(5, 15, 10), float32] */
  };
  %1061() /* ty=Tensor[(5, 15, 10), float32] */
}

def @func_15145() -> (Tensor[(672), int32],) {
  %1062 = @func_10082() /* ty=Tensor[(672), int32] */;
  (%1062,)
}

def @func_9136() -> Tensor[(15, 2, 1), float64] {
  @func_4760() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_11525() -> Tensor[(15, 2, 1), float64] {
  @func_11523() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_11791() -> Tensor[(10, 12, 2), float32] {
  @func_11789() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_13295() -> (Tensor[(10, 12, 2), float32],) {
  %1063 = @func_9099() /* ty=Tensor[(10, 12, 2), float32] */;
  (%1063,)
}

def @func_9548() -> Tensor[(672), int32] {
  %1064 = fn () -> Tensor[(672), int32] {
    @func_5310() /* ty=Tensor[(672), int32] */
  };
  %1064() /* ty=Tensor[(672), int32] */
}

def @func_15474() -> Tensor[(10, 12, 2), float32] {
  %1065 = @func_10518() /* ty=(Tensor[(8, 6, 14), bool], Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */;
  %1065.2
}

def @func_13975() -> (Tensor[(672), int32],) {
  %1066 = @func_12420() /* ty=Tensor[(672), int32] */;
  (%1066,)
}

def @func_7758() -> (Tensor[(10, 12, 2), float32],) {
  @func_7756() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_12480(%var_12478: Tensor[(8, 4, 9), float64]) -> (Tensor[(8, 4, 9), float64], Tensor[(672), int32], Tensor[(8, 6, 14), bool], Tensor[(15, 2, 3), uint32], Tensor[(240), float32], Tensor[(672), int32]) {
  @func_12477(%var_12478) /* ty=(Tensor[(8, 4, 9), float64], Tensor[(672), int32], Tensor[(8, 6, 14), bool], Tensor[(15, 2, 3), uint32], Tensor[(240), float32], Tensor[(672), int32]) */
}

def @func_11789() -> Tensor[(10, 12, 2), float32] {
  @func_9099() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_8222() -> Tensor[(15, 2, 1), float64] {
  %1067 = fn () -> Tensor[(15, 2, 1), float64] {
    @func_7429() /* ty=Tensor[(15, 2, 1), float64] */
  };
  %1067() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_5623(%var_5595: Tensor[(384), float32]) -> (Tensor[(10, 12, 2), float32], Tensor[(672), int32], Tensor[(15, 2, 1), float64], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(8, 6, 14), float32]) {
  %1068 = @func_5168() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %1069 = cast(%var_5595, dtype="float32") /* ty=Tensor[(384), float32] */;
  %1070 = reshape(%1069, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), float32] */;
  %1071 = @func_2887(%1070) /* ty=(Tensor[(4, 6, 16), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */;
  %1072 = @func_4864() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(672), int32], Tensor[(8, 6, 14), float32]) */;
  %1073 = %1072.1;
  %1074 = cast(%1073, dtype="float64") /* ty=Tensor[(8, 6, 14), float64] */;
  %1075 = sigmoid(%1074) /* ty=Tensor[(8, 6, 14), float64] */;
  %1076 = cast(%1075, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
  %1077 = %1068.0;
  %1078 = @func_5310() /* ty=Tensor[(672), int32] */;
  %1079 = @func_4896() /* ty=Tensor[(15, 2, 1), float64] */;
  %1080 = %1071.0;
  %1081 = log(%1076) /* ty=Tensor[(8, 6, 14), float32] */;
  (%1077, %1078, %1079, %1080, %var_5595, %1081)
}

def @func_8107() -> (Tensor[(10, 12, 2), float32],) {
  %1083 = fn () -> (Tensor[(10, 12, 2), float32],) {
    %1082 = @func_7490() /* ty=Tensor[(10, 12, 2), float32] */;
    (%1082,)
  };
  %1083() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_8627() -> (Tensor[(15, 2, 1), float64],) {
  @func_8625() /* ty=(Tensor[(15, 2, 1), float64],) */
}

def @func_12590() -> (Tensor[(10, 12, 2), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) {
  %1089 = fn () -> (Tensor[(10, 12, 2), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) {
    %1084 = @func_11486() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64], Tensor[(8, 6, 14), bool], Tensor[(10, 12, 2), float32], Tensor[(15, 2, 1), float64]) */;
    %1085 = @func_8472() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
    %1086 = @func_7907() /* ty=Tensor[(10, 12, 2), float32] */;
    %1087 = %1084.2;
    %1088 = %1085.1;
    (%1086, %1087, %1088)
  };
  %1089() /* ty=(Tensor[(10, 12, 2), float32], Tensor[(8, 6, 14), bool], Tensor[(672), int32]) */
}

def @func_8873() -> Tensor[(10, 12, 2), float32] {
  @func_8871() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_9631() -> Tensor[(15, 2, 1), float32] {
  %1092 = fn () -> Tensor[(15, 2, 1), float32] {
    %1090 = @func_9389() /* ty=Tensor[(15, 2, 1), float64] */;
    %1091 = cast(%1090, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
    sqrt(%1091) /* ty=Tensor[(15, 2, 1), float32] */
  };
  %1092() /* ty=Tensor[(15, 2, 1), float32] */
}

def @func_11245() -> (Tensor[(15, 2, 1), float64],) {
  %1093 = @func_8221() /* ty=Tensor[(15, 2, 1), float64] */;
  (%1093,)
}

def @func_6508() -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
  %1097 = fn () -> (Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) {
    %1094 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
    %1095 = %1094.2;
    %1096 = @func_5663() /* ty=Tensor[(10, 12, 2), float32] */;
    (%1095, %1096)
  };
  %1097() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(10, 12, 2), float32]) */
}

def @func_10936() -> Tensor[(15, 2, 1), float64] {
  @func_10639() /* ty=Tensor[(15, 2, 1), float64] */
}

def @func_12956(%var_12954: Tensor[(30), float64], %var_12955: Tensor[(90), float64]) -> (Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(30), float64], Tensor[(4, 16, 4), float64], Tensor[(8, 32), float32], Tensor[(672), int32], Tensor[(90), float64]) {
  %1111 = fn (%var_12920: Tensor[(30), float64], %var_12946: Tensor[(90), float64]) -> (Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(30), float64], Tensor[(4, 16, 4), float64], Tensor[(8, 32), float32], Tensor[(672), int32], Tensor[(90), float64]) {
    %1098 = cast(%var_12920, dtype="float64") /* ty=Tensor[(30), float64] */;
    %1099 = reshape(%1098, newshape=[15, 2, 1]) /* ty=Tensor[(15, 2, 1), float64] */;
    %1100 = @func_5764(%1099) /* ty=(Tensor[(15, 2, 672), float64], Tensor[(10, 12, 2), float32]) */;
    %1101 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 32), float32] */, dtype="float32") /* ty=Tensor[(8, 32), float32] */;
    %1102 = reshape(%1101, newshape=[4, 16, 4]) /* ty=Tensor[(4, 16, 4), float32] */;
    %1103 = @func_7989(%1102) /* ty=(Tensor[(4, 16, 4), float64],) */;
    %1104 = cast(%var_12946, dtype="float64") /* ty=Tensor[(90), float64] */;
    %1105 = reshape(%1104, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
    %1106 = @func_5437(%1105) /* ty=(Tensor[(15, 2, 3), uint32], Tensor[(672), int32]) */;
    %1107 = @func_9839() /* ty=Tensor[(672), int32] */;
    %1108 = %1100.1;
    %1109 = %1103.0;
    %1110 = %1106.1;
    (%1107, %1108, %var_12920, %1109, meta[relay.Constant][46] /* ty=Tensor[(8, 32), float32] */, %1110, %var_12946)
  };
  %1111(%var_12954, %var_12955) /* ty=(Tensor[(672), int32], Tensor[(10, 12, 2), float32], Tensor[(30), float64], Tensor[(4, 16, 4), float64], Tensor[(8, 32), float32], Tensor[(672), int32], Tensor[(90), float64]) */
}

def @func_10685() -> (Tensor[(10, 12, 2), float32],) {
  @func_10683() /* ty=(Tensor[(10, 12, 2), float32],) */
}

def @func_15476() -> Tensor[(10, 12, 2), float32] {
  @func_15474() /* ty=Tensor[(10, 12, 2), float32] */
}

def @func_7881(%var_7880: Tensor[(1755), int8]) -> (Tensor[(672), int32], Tensor[(672), int32], Tensor[(672), int32], Tensor[(8, 6, 14), bool], Tensor[(1755), int8], Tensor[(8, 6, 14), bool]) {
  %1125 = fn (%var_7874: Tensor[(1755), int8]) -> (Tensor[(672), int32], Tensor[(672), int32], Tensor[(672), int32], Tensor[(8, 6, 14), bool], Tensor[(1755), int8], Tensor[(8, 6, 14), bool]) {
    %1112 = @func_6343() /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(15, 2, 1), float64]) */;
    %1113 = @func_6651() /* ty=(Tensor[(15, 2, 1), float64], Tensor[(672), int32]) */;
    %1114 = cast(%var_7874, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %1115 = cast(%var_7874, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %1116 = reshape(%1114, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
    %1117 = reshape(%1115, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), int8] */;
    %1118 = @func_878(%1116, %1117) /* ty=(Tensor[(13, 9, 15), int8], Tensor[(8, 6, 14), bool], Tensor[(168, 4), int32], Tensor[(8, 6, 14), bool]) */;
    %1119 = @func_7082() /* ty=(Tensor[(672), int32], Tensor[(8, 6, 14), bool]) */;
    %1120 = %1112.1;
    %1121 = @func_6040() /* ty=Tensor[(672), int32] */;
    %1122 = %1113.1;
    %1123 = %1118.1;
    %1124 = %1119.1;
    (%1120, %1121, %1122, %1123, %var_7874, %1124)
  };
  %1125(%var_7880) /* ty=(Tensor[(672), int32], Tensor[(672), int32], Tensor[(672), int32], Tensor[(8, 6, 14), bool], Tensor[(1755), int8], Tensor[(8, 6, 14), bool]) */
}

def @func_12325() -> (Tensor[(10, 12, 2), float64], Tensor[(10, 12, 2), float32]) {
  @func_12323() /* ty=(Tensor[(10, 12, 2), float64], Tensor[(10, 12, 2), float32]) */
}

def @func_10775() -> Tensor[(10, 12, 2), float32] {
  %1126 = @func_5919() /* ty=(Tensor[(10, 12, 2), float32],) */;
  %1126.0
}

def @func_9693() -> (Tensor[(672), int32], Tensor[(15, 2, 672), uint8]) {
  @func_9691() /* ty=(Tensor[(672), int32], Tensor[(15, 2, 672), uint8]) */
}

def @func_9339(%var_9337: Tensor[(3, 9, 5), int8], %var_9338: Tensor[(3, 9, 5), int8]) -> (Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) {
  %1134 = fn (%var_9316: Tensor[(3, 9, 5), int8], %var_9317: Tensor[(3, 9, 5), int8]) -> (Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) {
    %1127 = cast(%var_9317, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
    %1128 = shape_of(%var_9316, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1129 = cast(%var_9316, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
    %1130 = dyn.reshape(%1127, %1128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1131 = cast(%var_9317, dtype="float64") /* ty=Tensor[(3, 9, 5), float64] */;
    %1132 = greater(%1129, %1130) /* ty=Tensor[(3, 9, 5), bool] */;
    %1133 = sin(%1131) /* ty=Tensor[(3, 9, 5), float64] */;
    (%1132, %1133)
  };
  %1134(%var_9337, %var_9338) /* ty=(Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) */
}

def @func_654(%var_652: Tensor[(8, 6, 14), int32]) -> (Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) {
  @func_651(%var_652) /* ty=(Tensor[(8, 6, 14), bool], Tensor[(8, 6, 14), float32]) */
}

def @func_3114(%var_3082: Tensor[(2, 5, 7), bool], %var_3083: Tensor[(2, 5, 7), bool]) -> (Tensor[(2, 5, 7), bool], Tensor[(10, 4, 3), bool], Tensor[(120), bool], Tensor[(2, 5, 7), float64]) {
  %1135 = cast(%var_3083, dtype="bool") /* ty=Tensor[(2, 5, 7), bool] */;
  %1136 = shape_of(%var_3082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1137 = cast(%var_3082, dtype="bool") /* ty=Tensor[(2, 5, 7), bool] */;
  %1138 = dyn.reshape(%1135, %1136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1139 = cast(meta[relay.Constant][47] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %1140 = reshape(%1139, newshape=[10, 4, 3]) /* ty=Tensor[(10, 4, 3), bool] */;
  %1141 = @func_2548(%1140) /* ty=(Tensor[(10, 4, 3), bool], Tensor[(9, 14, 15), float64], Tensor[(1890), float64], Tensor[(13, 9, 15), int8], Tensor[(1755), int8], Tensor[(9, 14, 15), float64], Tensor[(168, 4), int32], Tensor[(9, 14, 15), float64], Tensor[(13, 9, 15), int8]) */;
  %1142 = cast(%var_3083, dtype="float64") /* ty=Tensor[(2, 5, 7), float64] */;
  %1143 = logical_or(%1137, %1138) /* ty=Tensor[(2, 5, 7), bool] */;
  %1144 = %1141.0;
  %1145 = log2(%1142) /* ty=Tensor[(2, 5, 7), float64] */;
  (%1143, %1144, meta[relay.Constant][47] /* ty=Tensor[(120), bool] */, %1145)
}

def @func_5009() -> (Tensor[(10, 4, 3), bool], Tensor[(70), bool], Tensor[(15, 2, 1), float64]) {
  %1146 = cast(meta[relay.Constant][48] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
  %1147 = cast(meta[relay.Constant][48] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
  %1148 = reshape(%1146, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
  %1149 = reshape(%1147, newshape=[2, 5, 7]) /* ty=Tensor[(2, 5, 7), bool] */;
  %1150 = @func_3114(%1148, %1149) /* ty=(Tensor[(2, 5, 7), bool], Tensor[(10, 4, 3), bool], Tensor[(120), bool], Tensor[(2, 5, 7), float64]) */;
  %1151 = @func_4760() /* ty=Tensor[(15, 2, 1), float64] */;
  %1152 = cast(%1151, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
  %1153 = %1150.1;
  %1154 = tan(%1152) /* ty=Tensor[(15, 2, 1), float64] */;
  (%1153, meta[relay.Constant][48] /* ty=Tensor[(70), bool] */, %1154)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen798/build/output.py", line 4085, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:15:18] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

