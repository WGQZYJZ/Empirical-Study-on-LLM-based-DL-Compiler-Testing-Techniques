==========mod==========
#[version = "0.0.5"]
def @func_3892(%var_3853: Tensor[(6, 12, 6), bool], %var_3881: Tensor[(224), float64], %var_3882: Tensor[(108), float64]) -> (Tensor[(6, 12, 6), bool], Tensor[(6, ?, 6), float64], Tensor[(14, 8, 2), bool], Tensor[(224), float64], Tensor[(108), float64]) {
  %0 = @func_1745() /* ty=Tensor[(6, ?, 6), bool] */;
  %1 = cast(%0, dtype="bool") /* ty=Tensor[(6, ?, 6), bool] */;
  %2 = cast(%var_3853, dtype="bool") /* ty=Tensor[(6, 12, 6), bool] */;
  %3 = cast(%0, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %4 = cast(%var_3881, dtype="float64") /* ty=Tensor[(224), float64] */;
  %5 = cast(%var_3882, dtype="float64") /* ty=Tensor[(108), float64] */;
  %6 = reshape(%4, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
  %7 = reshape(%5, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %8 = @func_3449(%6, %7) /* ty=(Tensor[(14, 8, 2), bool], Tensor[(6, 1, 6), float32], Tensor[(108), float64]) */;
  %9 = not_equal(%1, %2) /* ty=Tensor[(6, 12, 6), bool] */;
  %10 = sqrt(%3) /* ty=Tensor[(6, ?, 6), float64] */;
  %11 = %8.0;
  (%9, %10, %11, %var_3881, %var_3882)
}

def @func_4786() -> Tensor[(6, 1, 6), float64] {
  %12 = @func_4477() /* ty=(Tensor[(5, 5, 10), uint64], Tensor[(6, 1, 6), float64]) */;
  %12.1
}

def @func_5800() -> Tensor[(6, 1, 6), float64] {
  %13 = @func_1728() /* ty=(Tensor[(6, 1, 6), float64],) */;
  %13.0
}

def @func_610() -> (Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64]) {
  %14 = @func_407() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %15 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
  %16 = %15.1;
  %17 = cast(%16, dtype="float64") /* ty=Tensor[(6, 1, 6), float64] */;
  %18 = %14.0;
  %19 = erf(%17) /* ty=Tensor[(6, 1, 6), float64] */;
  (%18, %19)
}

def @func_93() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) {
  %20 = cast(-3.81751f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 1, 6), float64] */;
  %22 = power(%20, %21) /* ty=Tensor[(6, 1, 6), float64] */;
  %23 = cast(-3.81751f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
  %24 = cast(%22, dtype="int64") /* ty=Tensor[(6, 1, 6), int64] */;
  %25 = cast(%22, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
  %26 = multiply(%23, %24) /* ty=Tensor[(6, 1, 6), int64] */;
  %27 = sigmoid(%25) /* ty=Tensor[(6, 1, 6), float32] */;
  (%26, %27)
}

def @func_2722() -> Tensor[(6, 1, 6), float32] {
  %28 = @func_1197() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */;
  %29 = %28.1;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
  cosh(%30) /* ty=Tensor[(6, 1, 6), float32] */
}

def @func_4959() -> (Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), bool]) {
  %31 = @func_1964() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %32 = @func_2629() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %33 = %31.0;
  %34 = %32.0;
  (%33, %34)
}

def @func_3536() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) {
  %35 = @func_167() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) */;
  %36 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
  %37 = %35.0;
  %38 = %36.0;
  (%37, %38)
}

def @func_4233(%var_4212: Tensor[(162, 2), float64]) -> (Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(162, 2), float64], Tensor[(6, 1, 6), float64], Tensor[(4, 2, ?), float32]) {
  %39 = cast(%var_4212, dtype="float64") /* ty=Tensor[(162, 2), float64] */;
  %40 = reshape(%39, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), float64] */;
  %41 = @func_2059(%40) /* ty=(Tensor[(6, ?, 6), int32], Tensor[(6, 9, 6), bool], Tensor[(6, 9, 6), float32]) */;
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(8), uint32] */, dtype="uint32") /* ty=Tensor[(8), uint32] */;
  %43 = reshape(%42, newshape=[4, 2, 1]) /* ty=Tensor[(4, 2, 1), uint32] */;
  %44 = @func_2656(%43) /* ty=(Tensor[(4, 2, ?), bool],) */;
  %45 = %44.0;
  %46 = cast(meta[relay.Constant][1] /* ty=Tensor[(8), uint32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="float32") /* ty=Tensor[(4, 2, ?), float32] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %50 = @func_255() /* ty=Tensor[(6, 1, 6), int64] */;
  %51 = %41.2;
  %52 = @func_276() /* ty=Tensor[(6, 1, 6), float64] */;
  %53 = power(%48, %49) /* ty=Tensor[(4, 2, ?), float32] */;
  (%50, %51, %var_4212, %52, %53)
}

def @func_3079() -> (Tensor[(6, 2, 6), int32], Tensor[(6, 2, 6), float64]) {
  %54 = @func_1745() /* ty=Tensor[(6, ?, 6), bool] */;
  %55 = cast(%54, dtype="int32") /* ty=Tensor[(6, ?, 6), int32] */;
  %56 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 2, 6), bool] */, dtype="int32") /* ty=Tensor[(6, 2, 6), int32] */;
  %57 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 2, 6), bool] */, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %58 = logical_xor(%55, %56) /* ty=Tensor[(6, 2, 6), int32] */;
  %59 = atan(%57) /* ty=Tensor[(6, 2, 6), float64] */;
  (%58, %59)
}

def @func_2629() -> (Tensor[(6, ?, 6), bool],) {
  %60 = @func_707() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %61 = %60.0;
  (%61,)
}

def @func_4386(%var_4381: Tensor[(224), float64], %var_4382: Tensor[(108), float64]) -> (Tensor[(6, 1, 6), int64], Tensor[(6, 12, 6), bool], Tensor[(432), bool], Tensor[(224), float64], Tensor[(108), float64]) {
  %62 = @func_926() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) */;
  %63 = cast(meta[relay.Constant][3] /* ty=Tensor[(432), bool] */, dtype="bool") /* ty=Tensor[(432), bool] */;
  %64 = cast(%var_4381, dtype="float64") /* ty=Tensor[(224), float64] */;
  %65 = cast(%var_4382, dtype="float64") /* ty=Tensor[(108), float64] */;
  %66 = reshape(%63, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), bool] */;
  %67 = reshape(%64, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %68 = reshape(%65, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %69 = @func_3892(%66, %67, %68) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(6, ?, 6), float64], Tensor[(14, 8, 2), bool], Tensor[(224), float64], Tensor[(108), float64]) */;
  %70 = %62.0;
  %71 = %69.0;
  (%70, %71, meta[relay.Constant][3] /* ty=Tensor[(432), bool] */, %var_4381, %var_4382)
}

def @func_3109() -> (Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float32]) {
  %72 = @func_1633() /* ty=(Tensor[(6, 9, 6), float32],) */;
  %73 = @func_926() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) */;
  %74 = %72.0;
  %75 = %73.1;
  (%74, %75)
}

def @func_3340(%var_3319: Tensor[(9, 11, 10), uint16], %var_3331: Tensor[(9, 11, 10), uint16]) -> (Tensor[(9, 11, 10), float32], Tensor[(6, ?, 6), float32]) {
  %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 11, 10), uint16] */, dtype="uint16") /* ty=Tensor[(9, 11, 10), uint16] */;
  %77 = shape_of(%var_3319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%var_3319, dtype="uint16") /* ty=Tensor[(9, 11, 10), uint16] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %80 = add(%78, %79) /* ty=Tensor[(9, 11, 10), uint16] */;
  %81 = cast(%var_3331, dtype="float32") /* ty=Tensor[(9, 11, 10), float32] */;
  %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%80, dtype="float32") /* ty=Tensor[(9, 11, 10), float32] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %85 = floor_divide(%83, %84) /* ty=Tensor[(9, 11, 10), float32] */;
  %86 = @func_2832() /* ty=Tensor[(6, ?, 6), float32] */;
  (%85, %86)
}

def @func_5783(%var_5781: Tensor[(108), float64]) -> (Tensor[(6, 1, 6), int64], Tensor[(6, 3, 6), bool], Tensor[(108), float64]) {
  %87 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
  %88 = cast(%var_5781, dtype="float64") /* ty=Tensor[(108), float64] */;
  %89 = reshape(%88, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), float64] */;
  %90 = @func_1472(%89) /* ty=(Tensor[(6, 3, 6), bool], Tensor[(6, 1, 6), float32], Tensor[(6, 9, 6), float32]) */;
  %91 = %87.2;
  %92 = %90.0;
  (%91, %92, %var_5781)
}

def @func_1426(%var_1420: Tensor[(260), uint8]) -> (Tensor[(6, 9, 6), float64], Tensor[(6, ?, 6), bool], Tensor[(4, 5, 13), uint8], Tensor[(260), uint8], Tensor[(6, 9, 6), float32]) {
  %93 = @func_953() /* ty=Tensor[(6, 9, 6), float32] */;
  %94 = cast(%93, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
  %95 = @func_707() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %96 = cast(%var_1420, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %97 = reshape(%96, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
  %98 = @func_326(%97) /* ty=(Tensor[(4, 5, 13), uint8], Tensor[(4, 5, 13), uint32], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) */;
  %99 = cast(%93, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %100 = atan(%99) /* ty=Tensor[(6, 9, 6), float32] */;
  %101 = cast(%100, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %102 = exp(%94) /* ty=Tensor[(6, 9, 6), float64] */;
  %103 = %95.0;
  %104 = %98.0;
  %105 = atanh(%101) /* ty=Tensor[(6, 9, 6), float32] */;
  (%102, %103, %104, %var_1420, %105)
}

def @func_119() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) {
  %106 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %107 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %108 = %107.1;
  %109 = cast(%108, dtype="float64") /* ty=Tensor[(6, 1, 6), float64] */;
  %110 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %111 = %106.0;
  %112 = log(%109) /* ty=Tensor[(6, 1, 6), float64] */;
  %113 = %110.0;
  (%111, %112, %113)
}

def @func_1947() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), float32]) {
  %114 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
  %115 = %114.0;
  %116 = @func_953() /* ty=Tensor[(6, 9, 6), float32] */;
  %117 = @func_1363() /* ty=Tensor[(6, ?, 6), float32] */;
  (%115, %116, %117)
}

def @func_4668() -> (Tensor[(6, 1, 6), float64],) {
  %118 = @func_1728() /* ty=(Tensor[(6, 1, 6), float64],) */;
  %119 = %118.0;
  (%119,)
}

def @func_1145(%var_1118: Tensor[(6, 1, 6), float64]) -> (Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), bool]) {
  %120 = @func_285() /* ty=Tensor[(6, 1, 6), float64] */;
  %121 = cast(%var_1118, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %125 = cast(%120, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
  %126 = sin(%125) /* ty=Tensor[(6, 1, 6), float32] */;
  %127 = cast(%120, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %131 = mod(%123, %124) /* ty=Tensor[(6, ?, 6), float32] */;
  %132 = less_equal(%129, %130) /* ty=Tensor[(6, ?, 6), bool] */;
  (%131, %132)
}

def @func_1834() -> Tensor[(6, 1, 6), float64] {
  @func_731() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_1197() -> (Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) {
  %133 = @func_407() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %134 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %135 = %133.0;
  %136 = %134.1;
  (%135, %136)
}

def @func_3819() -> (Tensor[(5, 7, 13), float32],) {
  %137 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 13), float32] */;
  %138 = asin(%137) /* ty=Tensor[(5, 7, 13), float32] */;
  (%138,)
}

def @func_1472(%var_1453: Tensor[(6, 3, 6), float64]) -> (Tensor[(6, 3, 6), bool], Tensor[(6, 1, 6), float32], Tensor[(6, 9, 6), float32]) {
  %139 = @func_1245() /* ty=(Tensor[(6, 1, 6), float64],) */;
  %140 = %139.0;
  %141 = cast(%140, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
  %142 = cast(%var_1453, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
  %143 = cast(%140, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
  %144 = less_equal(%141, %142) /* ty=Tensor[(6, 3, 6), bool] */;
  %145 = tan(%143) /* ty=Tensor[(6, 1, 6), float32] */;
  %146 = @func_953() /* ty=Tensor[(6, 9, 6), float32] */;
  (%144, %145, %146)
}

def @func_242() -> (Tensor[(6, 1, 6), int64],) {
  %147 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
  %148 = %147.0;
  (%148,)
}

def @func_1865() -> Tensor[(6, 9, 6), float32] {
  %149 = @func_561() /* ty=(Tensor[(6, 9, 6), float32],) */;
  %149.0
}

def @func_5056() -> Tensor[(6, ?, 6), int16] {
  @func_3775() /* ty=Tensor[(6, ?, 6), int16] */
}

def @func_4142(%var_4113: uint32, %var_4114: Tensor[(10, 6, 5), uint32]) -> Tensor[(10, 6, 5), bool] {
  %150 = cast(%var_4113, dtype="uint32") /* ty=uint32 */;
  %151 = cast(%var_4114, dtype="uint32") /* ty=Tensor[(10, 6, 5), uint32] */;
  %152 = maximum(%150, %151) /* ty=Tensor[(10, 6, 5), uint32] */;
  %153 = cast(%152, dtype="bool") /* ty=Tensor[(10, 6, 5), bool] */;
  %154 = cast(%var_4113, dtype="bool") /* ty=bool */;
  less_equal(%153, %154) /* ty=Tensor[(10, 6, 5), bool] */
}

def @func_4769(%var_4749: Tensor[(6, 11, 6), float32]) -> Tensor[(6, 11, 6), float64] {
  %155 = @func_1889() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %156 = %155.0;
  %157 = cast(%156, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %158 = cast(%var_4749, dtype="float64") /* ty=Tensor[(6, 11, 6), float64] */;
  add(%157, %158) /* ty=Tensor[(6, 11, 6), float64] */
}

def @func_1964() -> (Tensor[(6, ?, 6), float32],) {
  %159 = @func_1363() /* ty=Tensor[(6, ?, 6), float32] */;
  (%159,)
}

def @func_1104(%var_1055: Tensor[(6, 10, 6), int64], %var_1102: Tensor[(260), uint8]) -> (Tensor[(6, 9, 6), float32], Tensor[(6, 10, 6), uint16], Tensor[(6, 10, 6), float32], Tensor[(6, 1, 6), int64], Tensor[(260), uint8]) {
  %160 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
  %161 = %160.0;
  %162 = cast(%161, dtype="uint16") /* ty=Tensor[(6, 1, 6), uint16] */;
  %163 = cast(%var_1055, dtype="uint16") /* ty=Tensor[(6, 10, 6), uint16] */;
  %164 = cast(%var_1055, dtype="float32") /* ty=Tensor[(6, 10, 6), float32] */;
  %165 = cast(%var_1102, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %166 = reshape(%165, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
  %167 = @func_326(%166) /* ty=(Tensor[(4, 5, 13), uint8], Tensor[(4, 5, 13), uint32], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) */;
  %168 = @func_953() /* ty=Tensor[(6, 9, 6), float32] */;
  %169 = bitwise_xor(%162, %163) /* ty=Tensor[(6, 10, 6), uint16] */;
  %170 = acosh(%164) /* ty=Tensor[(6, 10, 6), float32] */;
  %171 = %167.2;
  (%168, %169, %170, %171, %var_1102)
}

def @func_4249(%var_4239: float32, %var_4240: Tensor[(12, 11, 2), float32], %var_4245: Tensor[(432), bool]) -> (Tensor[(12, 11, 2), float32], Tensor[(6, ?, 6), float64], Tensor[(432), bool], Tensor[(2, 112), float64], Tensor[(108), float64]) {
  %172 = cast(%var_4239, dtype="float32") /* ty=float32 */;
  %173 = cast(%var_4240, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
  %174 = cast(%var_4245, dtype="bool") /* ty=Tensor[(432), bool] */;
  %175 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 112), float64] */, dtype="float64") /* ty=Tensor[(2, 112), float64] */;
  %176 = cast(meta[relay.Constant][7] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %177 = reshape(%174, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), bool] */;
  %178 = reshape(%175, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %179 = reshape(%176, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %180 = @func_3892(%177, %178, %179) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(6, ?, 6), float64], Tensor[(14, 8, 2), bool], Tensor[(224), float64], Tensor[(108), float64]) */;
  %181 = floor_mod(%172, %173) /* ty=Tensor[(12, 11, 2), float32] */;
  %182 = %180.1;
  (%181, %182, %var_4245, meta[relay.Constant][6] /* ty=Tensor[(2, 112), float64] */, meta[relay.Constant][7] /* ty=Tensor[(108), float64] */)
}

def @func_167() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) {
  %183 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
  %184 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %185 = %183.0;
  %186 = %184.0;
  (%185, %186)
}

def @func_4649(%var_4627: Tensor[(3, 10, 8), float64]) -> (Tensor[(3, 10, 8), float64],) {
  %187 = cast(%var_4627, dtype="float64") /* ty=Tensor[(3, 10, 8), float64] */;
  %188 = sqrt(%187) /* ty=Tensor[(3, 10, 8), float64] */;
  (%188,)
}

def @func_326(%var_296: Tensor[(4, 5, 13), uint8]) -> (Tensor[(4, 5, 13), uint8], Tensor[(4, 5, 13), uint32], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) {
  %189 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 5, 13), uint8] */, dtype="uint8") /* ty=Tensor[(4, 5, 13), uint8] */;
  %190 = shape_of(%var_296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%var_296, dtype="uint8") /* ty=Tensor[(4, 5, 13), uint8] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %193 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 5, 13), uint8] */, dtype="uint32") /* ty=Tensor[(4, 5, 13), uint32] */;
  %194 = shape_of(%var_296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%var_296, dtype="uint32") /* ty=Tensor[(4, 5, 13), uint32] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %197 = @func_167() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) */;
  %198 = bitwise_or(%191, %192) /* ty=Tensor[(4, 5, 13), uint8] */;
  %199 = add(%195, %196) /* ty=Tensor[(4, 5, 13), uint32] */;
  %200 = %197.1;
  %201 = @func_285() /* ty=Tensor[(6, 1, 6), float64] */;
  (%198, %199, %200, %201)
}

def @func_4519(%var_4509: Tensor[(6, 4, 6), float32]) -> (Tensor[(6, 4, 6), bool],) {
  %202 = @func_3634() /* ty=Tensor[(6, 1, 6), float32] */;
  %203 = cast(%202, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
  %204 = cast(%var_4509, dtype="bool") /* ty=Tensor[(6, 4, 6), bool] */;
  %205 = logical_or(%203, %204) /* ty=Tensor[(6, 4, 6), bool] */;
  (%205,)
}

def @func_2751() -> (Tensor[(6, 1, 6), float64],) {
  %206 = @func_2594() /* ty=Tensor[(6, 1, 6), float64] */;
  (%206,)
}

def @func_1363() -> Tensor[(6, ?, 6), float32] {
  %207 = @func_610() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64]) */;
  %208 = %207.0;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(6, ?, 6), float32] */;
  asin(%209) /* ty=Tensor[(6, ?, 6), float32] */
}

def @func_980(%var_957: Tensor[(3, 1, 5), float64]) -> (Tensor[(3, 1, 5), float64],) {
  %210 = cast(%var_957, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
  %211 = cos(%210) /* ty=Tensor[(3, 1, 5), float64] */;
  (%211,)
}

def @func_1745() -> Tensor[(6, ?, 6), bool] {
  %212 = @func_707() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %212.0
}

def @func_649(%var_638: Tensor[(5, 5, 7), uint64]) -> (Tensor[(5, 5, 7), bool], Tensor[(6, 1, 6), int64]) {
  %213 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 5, 7), uint64] */, dtype="bool") /* ty=Tensor[(5, 5, 7), bool] */;
  %214 = shape_of(%var_638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%var_638, dtype="bool") /* ty=Tensor[(5, 5, 7), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %217 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
  %218 = greater_equal(%215, %216) /* ty=Tensor[(5, 5, 7), bool] */;
  %219 = %217.0;
  (%218, %219)
}

def @func_2791(%var_2777: Tensor[(6, 4, 6), float32]) -> (Tensor[(6, 4, 6), bool], Tensor[(6, ?, 6), bool]) {
  %220 = @func_1947() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), float32]) */;
  %221 = %220.2;
  %222 = cast(%221, dtype="bool") /* ty=Tensor[(6, ?, 6), bool] */;
  %223 = cast(%var_2777, dtype="bool") /* ty=Tensor[(6, 4, 6), bool] */;
  %224 = @func_1584() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %225 = less(%222, %223) /* ty=Tensor[(6, 4, 6), bool] */;
  %226 = %224.0;
  (%225, %226)
}

def @func_4282() -> Tensor[(6, ?, 6), bool] {
  @func_506() /* ty=Tensor[(6, ?, 6), bool] */
}

def @func_1911() -> (Tensor[(6, ?, 6), float32],) {
  %227 = @func_1363() /* ty=Tensor[(6, ?, 6), float32] */;
  (%227,)
}

def @func_2288() -> (Tensor[(6, 1, 6), float32], Tensor[(6, ?, 6), uint64], Tensor[(260), uint8], Tensor[(36, 10), float64]) {
  %228 = @func_1197() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */;
  %229 = cast(meta[relay.Constant][10] /* ty=Tensor[(36, 10), int64] */, dtype="int64") /* ty=Tensor[(36, 10), int64] */;
  %230 = cast(meta[relay.Constant][11] /* ty=Tensor[(260), uint8] */, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %231 = reshape(%229, newshape=[360]) /* ty=Tensor[(360), int64] */;
  %232 = reshape(%230, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %233 = @func_1662(%231, %232) /* ty=(Tensor[(6, ?, 6), uint64], Tensor[(6, 9, 6), float32], Tensor[(360), int64], Tensor[(260), uint8]) */;
  %234 = cast(meta[relay.Constant][10] /* ty=Tensor[(36, 10), int64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %235 = %228.1;
  %236 = %233.0;
  %237 = asinh(%234) /* ty=Tensor[(36, 10), float64] */;
  (%235, %236, meta[relay.Constant][11] /* ty=Tensor[(260), uint8] */, %237)
}

def @func_5555() -> (Tensor[(6, 5, 6), uint16],) {
  %238 = @func_2356() /* ty=(Tensor[(6, ?, 6), float64], Tensor[(6, ?, 6), float64]) */;
  %239 = %238.0;
  %240 = cast(%239, dtype="uint16") /* ty=Tensor[(6, ?, 6), uint16] */;
  %241 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 5, 6), float64] */, dtype="uint16") /* ty=Tensor[(6, 5, 6), uint16] */;
  %242 = bitwise_and(%240, %241) /* ty=Tensor[(6, 5, 6), uint16] */;
  (%242,)
}

def @func_5123(%var_5096: Tensor[(5, 13, 10), int32]) -> (Tensor[(5, 13, 10), int32], Tensor[(5, 13, 10), float64], Tensor[(6, ?, 6), float32]) {
  %243 = cast(%var_5096, dtype="int32") /* ty=Tensor[(5, 13, 10), int32] */;
  %244 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(5, 13, 10), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 13, 10), int32] */, dtype="int32") /* ty=Tensor[(5, 13, 10), int32] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %247 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 13, 10), int32] */, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
  %248 = @func_4819() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %249 = logical_xor(%245, %246) /* ty=Tensor[(5, 13, 10), int32] */;
  %250 = sinh(%247) /* ty=Tensor[(5, 13, 10), float64] */;
  %251 = %248.0;
  (%249, %250, %251)
}

def @func_6323(%var_6318: Tensor[(6, 4, 6), bool]) -> (Tensor[(6, 4, 6), float64],) {
  %252 = @func_4282() /* ty=Tensor[(6, ?, 6), bool] */;
  %253 = cast(%252, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %254 = cast(%var_6318, dtype="float64") /* ty=Tensor[(6, 4, 6), float64] */;
  %255 = divide(%253, %254) /* ty=Tensor[(6, 4, 6), float64] */;
  (%255,)
}

def @func_1728() -> (Tensor[(6, 1, 6), float64],) {
  %256 = @func_731() /* ty=Tensor[(6, 1, 6), float64] */;
  (%256,)
}

def @main(%var_6360: Tensor[(10, 1, 2), float32]) -> Tensor[(10, ?, 2), float32] {
  %257 = cast(%var_6360, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %258 = asin(%257) /* ty=Tensor[(10, 1, 2), float32] */;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %260 = log(%259) /* ty=Tensor[(10, 1, 2), float64] */;
  %261 = cast(%var_6360, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%260, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%263, %264) /* ty=Tensor[(10, ?, 2), float32] */
}

def @func_3263() -> Tensor[(6, ?, 6), float32] {
  @func_2832() /* ty=Tensor[(6, ?, 6), float32] */
}

def @func_4158() -> (Tensor[(6, ?, 6), bool],) {
  %265 = @func_2629() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %266 = %265.0;
  (%266,)
}

def @func_4477() -> (Tensor[(5, 5, 10), uint64], Tensor[(6, 1, 6), float64]) {
  %267 = @func_3735() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(5, 5, 10), uint64], Tensor[(5, 5), uint64], Tensor[(25, 10), uint64]) */;
  %268 = %267.1;
  %269 = @func_2594() /* ty=Tensor[(6, 1, 6), float64] */;
  (%268, %269)
}

def @func_5677() -> (Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), int16], Tensor[(6, 2, 6), int32]) {
  %270 = @func_4819() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %271 = @func_3079() /* ty=(Tensor[(6, 2, 6), int32], Tensor[(6, 2, 6), float64]) */;
  %272 = %270.0;
  %273 = @func_3263() /* ty=Tensor[(6, ?, 6), float32] */;
  %274 = @func_3277() /* ty=Tensor[(6, ?, 6), int16] */;
  %275 = %271.0;
  (%272, %273, %274, %275)
}

def @func_2356() -> (Tensor[(6, ?, 6), float64], Tensor[(6, ?, 6), float64]) {
  %276 = @func_1363() /* ty=Tensor[(6, ?, 6), float32] */;
  %277 = cast(%276, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %278 = cast(%276, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %279 = log2(%277) /* ty=Tensor[(6, ?, 6), float64] */;
  %280 = sinh(%278) /* ty=Tensor[(6, ?, 6), float64] */;
  (%279, %280)
}

def @func_707() -> (Tensor[(6, ?, 6), bool],) {
  %281 = @func_407() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %282 = %281.0;
  (%282,)
}

def @func_561() -> (Tensor[(6, 9, 6), float32],) {
  %283 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
  %284 = %283.0;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
  %286 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 9, 6), int64] */, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %287 = divide(%285, %286) /* ty=Tensor[(6, 9, 6), float32] */;
  (%287,)
}

def @func_731() -> Tensor[(6, 1, 6), float64] {
  @func_276() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_285() -> Tensor[(6, 1, 6), float64] {
  @func_276() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_3089() -> (Tensor[(7, 10, 12), float64], Tensor[(6, 1, 6), float32]) {
  %288 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(7, 10, 12), float64] */;
  %289 = @func_1197() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */;
  %290 = sin(%288) /* ty=Tensor[(7, 10, 12), float64] */;
  %291 = %289.1;
  (%290, %291)
}

def @func_1584() -> (Tensor[(6, ?, 6), bool],) {
  %292 = @func_506() /* ty=Tensor[(6, ?, 6), bool] */;
  (%292,)
}

def @func_3277() -> Tensor[(6, ?, 6), int16] {
  %293 = @func_2994() /* ty=(Tensor[(6, ?, 6), int16],) */;
  %293.0
}

def @func_3735() -> (Tensor[(6, 1, 6), int64], Tensor[(5, 5, 10), uint64], Tensor[(5, 5), uint64], Tensor[(25, 10), uint64]) {
  %294 = @func_3579() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) */;
  %295 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 5), uint64] */, dtype="uint64") /* ty=Tensor[(5, 5), uint64] */;
  %296 = cast(meta[relay.Constant][17] /* ty=Tensor[(25, 10), uint64] */, dtype="uint64") /* ty=Tensor[(25, 10), uint64] */;
  %297 = reshape(%295, newshape=[5, 5, 1]) /* ty=Tensor[(5, 5, 1), uint64] */;
  %298 = reshape(%296, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), uint64] */;
  %299 = %294.0;
  %300 = @func_3218(%297, %298) /* ty=Tensor[(5, 5, 10), uint64] */;
  (%299, %300, meta[relay.Constant][16] /* ty=Tensor[(5, 5), uint64] */, meta[relay.Constant][17] /* ty=Tensor[(25, 10), uint64] */)
}

def @func_1889() -> (Tensor[(6, ?, 6), float32],) {
  %301 = @func_1363() /* ty=Tensor[(6, ?, 6), float32] */;
  (%301,)
}

def @func_255() -> Tensor[(6, 1, 6), int64] {
  %302 = @func_167() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) */;
  %302.0
}

def @func_1662(%var_1652: Tensor[(360), int64], %var_1653: Tensor[(260), uint8]) -> (Tensor[(6, ?, 6), uint64], Tensor[(6, 9, 6), float32], Tensor[(360), int64], Tensor[(260), uint8]) {
  %303 = @func_685() /* ty=(Tensor[(6, ?, 6), uint64], Tensor[(6, 1, 6), float64], Tensor[(6, ?, 6), bool]) */;
  %304 = cast(%var_1652, dtype="int64") /* ty=Tensor[(360), int64] */;
  %305 = cast(%var_1653, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %306 = reshape(%304, newshape=[6, 10, 6]) /* ty=Tensor[(6, 10, 6), int64] */;
  %307 = reshape(%305, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %308 = @func_1104(%306, %307) /* ty=(Tensor[(6, 9, 6), float32], Tensor[(6, 10, 6), uint16], Tensor[(6, 10, 6), float32], Tensor[(6, 1, 6), int64], Tensor[(260), uint8]) */;
  %309 = %303.0;
  %310 = %308.0;
  (%309, %310, %var_1652, %var_1653)
}

def @func_1234() -> (Tensor[(6, ?, 6), bool],) {
  %311 = @func_610() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64]) */;
  %312 = %311.0;
  (%312,)
}

def @func_3775() -> Tensor[(6, ?, 6), int16] {
  %313 = @func_2994() /* ty=(Tensor[(6, ?, 6), int16],) */;
  %313.0
}

def @func_5620(%var_5596: Tensor[(2, 1, 15), float32], %var_5604: Tensor[(2, 12, 15), float32]) -> (Tensor[(2, 12, 15), bool], Tensor[(2, 12, 15), bool]) {
  %314 = cast(%var_5604, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
  %315 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(2, 12, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 12, 15), float32] */, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %318 = cast(%var_5596, dtype="float32") /* ty=Tensor[(2, 1, 15), float32] */;
  %319 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(2, 12, 15), float32] */;
  %320 = mod(%318, %319) /* ty=Tensor[(2, 12, 15), float32] */;
  %321 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 12, 15), float32] */, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%320, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = not_equal(%316, %317) /* ty=Tensor[(2, 12, 15), bool] */;
  %326 = less_equal(%323, %324) /* ty=Tensor[(2, 12, 15), bool] */;
  (%325, %326)
}

def @func_1245() -> (Tensor[(6, 1, 6), float64],) {
  %327 = @func_285() /* ty=Tensor[(6, 1, 6), float64] */;
  (%327,)
}

def @func_747() -> (Tensor[(6, 8, 6), bool],) {
  %328 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
  %329 = %328.0;
  %330 = cast(%329, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
  %331 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 8, 6), int64] */, dtype="bool") /* ty=Tensor[(6, 8, 6), bool] */;
  %332 = equal(%330, %331) /* ty=Tensor[(6, 8, 6), bool] */;
  (%332,)
}

def @func_2689(%var_2674: Tensor[(4, 1, 15), float32]) -> (Tensor[(4, 1, 15), float32],) {
  %333 = cast(%var_2674, dtype="float32") /* ty=Tensor[(4, 1, 15), float32] */;
  %334 = log10(%333) /* ty=Tensor[(4, 1, 15), float32] */;
  (%334,)
}

def @func_506() -> Tensor[(6, ?, 6), bool] {
  %335 = @func_407() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %335.0
}

def @func_2594() -> Tensor[(6, 1, 6), float64] {
  %336 = @func_685() /* ty=(Tensor[(6, ?, 6), uint64], Tensor[(6, 1, 6), float64], Tensor[(6, ?, 6), bool]) */;
  %336.1
}

def @func_3579() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) {
  %337 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
  %338 = @func_1633() /* ty=(Tensor[(6, 9, 6), float32],) */;
  %339 = %337.2;
  %340 = %338.0;
  (%339, %340)
}

def @func_4005(%var_3981: Tensor[(6, 7, 6), float32]) -> (Tensor[(6, 7, 6), uint16],) {
  %341 = @func_1911() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %342 = %341.0;
  %343 = cast(%342, dtype="uint16") /* ty=Tensor[(6, ?, 6), uint16] */;
  %344 = cast(%var_3981, dtype="uint16") /* ty=Tensor[(6, 7, 6), uint16] */;
  %345 = logical_xor(%343, %344) /* ty=Tensor[(6, 7, 6), uint16] */;
  (%345,)
}

def @func_926() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) {
  %346 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
  %347 = @func_561() /* ty=(Tensor[(6, 9, 6), float32],) */;
  %348 = %346.0;
  %349 = %347.0;
  (%348, %349)
}

def @func_3204(%var_3183: Tensor[(6, 2, 6), float32]) -> (Tensor[(6, 2, 6), int32],) {
  %350 = @func_3079() /* ty=(Tensor[(6, 2, 6), int32], Tensor[(6, 2, 6), float64]) */;
  %351 = %350.0;
  %352 = cast(%351, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %353 = sqrt(%352) /* ty=Tensor[(6, 2, 6), float64] */;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %355 = rsqrt(%354) /* ty=Tensor[(6, 2, 6), float64] */;
  %356 = cast(%355, dtype="float32") /* ty=Tensor[(6, 2, 6), float32] */;
  %357 = tan(%356) /* ty=Tensor[(6, 2, 6), float32] */;
  %358 = cast(%var_3183, dtype="int8") /* ty=Tensor[(6, 2, 6), int8] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="int8") /* ty=Tensor[(6, 2, 6), int8] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %362 = minimum(%360, %361) /* ty=Tensor[(6, 2, 6), int8] */;
  %363 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 2, 6), int8] */, dtype="int32") /* ty=Tensor[(6, 2, 6), int32] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%362, dtype="int32") /* ty=Tensor[(6, 2, 6), int32] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %367 = multiply(%365, %366) /* ty=Tensor[(6, 2, 6), int32] */;
  (%367,)
}

def @func_4923() -> (Tensor[(6, ?, 6), bool],) {
  %368 = @func_1197() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */;
  %369 = %368.0;
  (%369,)
}

def @func_5459(%var_5437: Tensor[(175), uint64]) -> (Tensor[(6, 15, 6), uint64], Tensor[(5, 5, 7), bool], Tensor[(175), uint64], Tensor[(6, 15, 6), float32]) {
  %370 = @func_276() /* ty=Tensor[(6, 1, 6), float64] */;
  %371 = cast(%370, dtype="uint64") /* ty=Tensor[(6, 1, 6), uint64] */;
  %372 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 15, 6), float64] */, dtype="uint64") /* ty=Tensor[(6, 15, 6), uint64] */;
  %373 = cast(%var_5437, dtype="uint64") /* ty=Tensor[(175), uint64] */;
  %374 = reshape(%373, newshape=[5, 5, 7]) /* ty=Tensor[(5, 5, 7), uint64] */;
  %375 = @func_649(%374) /* ty=(Tensor[(5, 5, 7), bool], Tensor[(6, 1, 6), int64]) */;
  %376 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 15, 6), float64] */, dtype="float32") /* ty=Tensor[(6, 15, 6), float32] */;
  %377 = subtract(%371, %372) /* ty=Tensor[(6, 15, 6), uint64] */;
  %378 = %375.0;
  %379 = atanh(%376) /* ty=Tensor[(6, 15, 6), float32] */;
  (%377, %378, %var_5437, %379)
}

def @func_3499(%var_3463: Tensor[(65, 4), uint8]) -> (Tensor[(6, 1, 6), int64], Tensor[(260), uint8], Tensor[(65, 4), float64]) {
  %380 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
  %381 = cast(%var_3463, dtype="uint8") /* ty=Tensor[(65, 4), uint8] */;
  %382 = reshape(%381, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %383 = @func_1426(%382) /* ty=(Tensor[(6, 9, 6), float64], Tensor[(6, ?, 6), bool], Tensor[(4, 5, 13), uint8], Tensor[(260), uint8], Tensor[(6, 9, 6), float32]) */;
  %384 = cast(%var_3463, dtype="float64") /* ty=Tensor[(65, 4), float64] */;
  %385 = %380.2;
  %386 = %383.3;
  %387 = cos(%384) /* ty=Tensor[(65, 4), float64] */;
  (%385, %386, %387)
}

def @func_2165(%var_2127: Tensor[(16, 3, 14), uint16]) -> (Tensor[(16, 3, 14), float32], Tensor[(3, 14, 7), bool], Tensor[(1800), float32], Tensor[(294, 1), uint32]) {
  %388 = cast(%var_2127, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
  %389 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(16, 3, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 3, 14), uint16] */, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %392 = less_equal(%390, %391) /* ty=Tensor[(16, 3, 14), bool] */;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  %394 = sin(%393) /* ty=Tensor[(16, 3, 14), float64] */;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(16, 3, 14), float32] */;
  %396 = cast(meta[relay.Constant][24] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %397 = cast(meta[relay.Constant][25] /* ty=Tensor[(294, 1), uint32] */, dtype="uint32") /* ty=Tensor[(294, 1), uint32] */;
  %398 = reshape(%396, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
  %399 = reshape(%397, newshape=[294]) /* ty=Tensor[(294), uint32] */;
  %400 = @func_1559(%398, %399) /* ty=(Tensor[(15, 10, 12), float32], Tensor[(3, 14, 7), bool], Tensor[(294), uint32], Tensor[(6, ?, 6), bool]) */;
  %401 = log10(%395) /* ty=Tensor[(16, 3, 14), float32] */;
  %402 = %400.1;
  (%401, %402, meta[relay.Constant][24] /* ty=Tensor[(1800), float32] */, meta[relay.Constant][25] /* ty=Tensor[(294, 1), uint32] */)
}

def @func_1559(%var_1538: Tensor[(15, 10, 12), float32], %var_1549: Tensor[(294), uint32]) -> (Tensor[(15, 10, 12), float32], Tensor[(3, 14, 7), bool], Tensor[(294), uint32], Tensor[(6, ?, 6), bool]) {
  %403 = cast(%var_1538, dtype="float32") /* ty=Tensor[(15, 10, 12), float32] */;
  %404 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(15, 10, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 10, 12), float32] */, dtype="float32") /* ty=Tensor[(15, 10, 12), float32] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %407 = cast(%var_1549, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %408 = reshape(%407, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), uint32] */;
  %409 = @func_939(%408) /* ty=(Tensor[(3, 14, 7), bool], Tensor[(6, ?, 6), bool]) */;
  %410 = @func_1197() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */;
  %411 = mod(%405, %406) /* ty=Tensor[(15, 10, 12), float32] */;
  %412 = %409.0;
  %413 = %410.0;
  (%411, %412, %var_1549, %413)
}

def @func_3634() -> Tensor[(6, 1, 6), float32] {
  %414 = @func_3089() /* ty=(Tensor[(7, 10, 12), float64], Tensor[(6, 1, 6), float32]) */;
  %414.1
}

def @func_1633() -> (Tensor[(6, 9, 6), float32],) {
  %415 = @func_926() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) */;
  %416 = %415.1;
  (%416,)
}

def @func_4819() -> (Tensor[(6, ?, 6), float32],) {
  %417 = @func_3263() /* ty=Tensor[(6, ?, 6), float32] */;
  (%417,)
}

def @func_5922(%var_5871: Tensor[(8, 16, 2), float32]) -> (Tensor[(8, 16, 2), float32], Tensor[(8, 16, 2), float32], Tensor[(6, ?, 6), bool], Tensor[(6, ?, 6), float32]) {
  %418 = cast(%var_5871, dtype="float32") /* ty=Tensor[(8, 16, 2), float32] */;
  %419 = cast(%var_5871, dtype="float32") /* ty=Tensor[(8, 16, 2), float32] */;
  %420 = @func_685() /* ty=(Tensor[(6, ?, 6), uint64], Tensor[(6, 1, 6), float64], Tensor[(6, ?, 6), bool]) */;
  %421 = @func_1964() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %422 = atan(%418) /* ty=Tensor[(8, 16, 2), float32] */;
  %423 = asin(%419) /* ty=Tensor[(8, 16, 2), float32] */;
  %424 = %420.2;
  %425 = %421.0;
  (%422, %423, %424, %425)
}

def @func_5762() -> (Tensor[(15, 16, ?), bool], Tensor[(15, 16, ?), float32]) {
  %426 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 16, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 1), float64] */;
  %427 = sin(%426) /* ty=Tensor[(15, 16, 1), float64] */;
  %428 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 16, 1), float64] */, dtype="bool") /* ty=Tensor[(15, 16, 1), bool] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(15, 16, 1), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %432 = less(%430, %431) /* ty=Tensor[(15, 16, ?), bool] */;
  %433 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 16, 1), float64] */, dtype="bool") /* ty=Tensor[(15, 16, 1), bool] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="bool") /* ty=Tensor[(15, 16, ?), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %437 = cast(%432, dtype="float32") /* ty=Tensor[(15, 16, ?), float32] */;
  %438 = logical_and(%435, %436) /* ty=Tensor[(15, 16, ?), bool] */;
  %439 = erf(%437) /* ty=Tensor[(15, 16, ?), float32] */;
  (%438, %439)
}

def @func_953() -> Tensor[(6, 9, 6), float32] {
  %440 = @func_561() /* ty=(Tensor[(6, 9, 6), float32],) */;
  %440.0
}

def @func_4446() -> (Tensor[(6, 9, 6), float32], Tensor[(260), uint8], Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), float64]) {
  %441 = @func_2288() /* ty=(Tensor[(6, 1, 6), float32], Tensor[(6, ?, 6), uint64], Tensor[(260), uint8], Tensor[(36, 10), float64]) */;
  %442 = @func_953() /* ty=Tensor[(6, 9, 6), float32] */;
  %443 = cast(%442, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
  %444 = reshape(%443, newshape=[162, 2]) /* ty=Tensor[(162, 2), float64] */;
  %445 = @func_4233(%444) /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(162, 2), float64], Tensor[(6, 1, 6), float64], Tensor[(4, 2, ?), float32]) */;
  %446 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
  %447 = %446.1;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
  %449 = reshape(%448, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), float32] */;
  %450 = @func_2890(%449) /* ty=(Tensor[(9, 2, 2), float32],) */;
  %451 = %450.0;
  %452 = cast(%451, dtype="int64") /* ty=Tensor[(9, 2, 2), int64] */;
  %453 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%447, dtype="int64") /* ty=Tensor[(6, 1, 6), int64] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %456 = subtract(%454, %455) /* ty=Tensor[(6, ?, 6), int64] */;
  %457 = cast(%451, dtype="float64") /* ty=Tensor[(9, 2, 2), float64] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%456, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %461 = %441.2;
  %462 = %445.1;
  %463 = floor_mod(%459, %460) /* ty=Tensor[(6, ?, 6), float64] */;
  (%442, %461, %462, %463)
}

def @func_4977() -> (Tensor[(6, ?, 6), float32],) {
  %464 = @func_1889() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %465 = %464.0;
  (%465,)
}

def @func_6048() -> (Tensor[(6, 1, 6), float64],) {
  %466 = @func_3715() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) */;
  %467 = %466.1;
  (%467,)
}

def @func_5279() -> (Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), int16], Tensor[(5, 7, 13), float32]) {
  %468 = @func_1947() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), float32]) */;
  %469 = @func_3819() /* ty=(Tensor[(5, 7, 13), float32],) */;
  %470 = %469.0;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(5, 7, 13), float32] */;
  %472 = %468.1;
  %473 = @func_3277() /* ty=Tensor[(6, ?, 6), int16] */;
  %474 = acos(%471) /* ty=Tensor[(5, 7, 13), float32] */;
  (%472, %473, %474)
}

def @func_3449(%var_3430: Tensor[(14, 8, 2), float64], %var_3444: Tensor[(108), float64]) -> (Tensor[(14, 8, 2), bool], Tensor[(6, 1, 6), float32], Tensor[(108), float64]) {
  %475 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 8, 2), float64] */, dtype="bool") /* ty=Tensor[(14, 8, 2), bool] */;
  %476 = shape_of(%var_3430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%var_3430, dtype="bool") /* ty=Tensor[(14, 8, 2), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %479 = cast(%var_3444, dtype="float64") /* ty=Tensor[(108), float64] */;
  %480 = reshape(%479, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), float64] */;
  %481 = @func_1472(%480) /* ty=(Tensor[(6, 3, 6), bool], Tensor[(6, 1, 6), float32], Tensor[(6, 9, 6), float32]) */;
  %482 = equal(%477, %478) /* ty=Tensor[(14, 8, 2), bool] */;
  %483 = %481.1;
  (%482, %483, %var_3444)
}

def @func_6309(%var_6283: Tensor[(9, 36), float64]) -> (Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64], Tensor[(9, 36), float64]) {
  %484 = @func_1584() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %485 = @func_3536() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) */;
  %486 = cast(%var_6283, dtype="float64") /* ty=Tensor[(9, 36), float64] */;
  %487 = reshape(%486, newshape=[162, 2]) /* ty=Tensor[(162, 2), float64] */;
  %488 = @func_4233(%487) /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(162, 2), float64], Tensor[(6, 1, 6), float64], Tensor[(4, 2, ?), float32]) */;
  %489 = %484.0;
  %490 = @func_1834() /* ty=Tensor[(6, 1, 6), float64] */;
  %491 = %485.0;
  %492 = %488.0;
  (%489, %490, %491, %492, %var_6283)
}

def @func_2832() -> Tensor[(6, ?, 6), float32] {
  %493 = @func_1889() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %493.0
}

def @func_2481(%var_2472: float64, %var_2473: Tensor[(6, 9, 15), float64]) -> (Tensor[(6, 9, 15), float64],) {
  %494 = cast(%var_2472, dtype="float64") /* ty=float64 */;
  %495 = cast(%var_2473, dtype="float64") /* ty=Tensor[(6, 9, 15), float64] */;
  %496 = minimum(%494, %495) /* ty=Tensor[(6, 9, 15), float64] */;
  (%496,)
}

def @func_3601() -> Tensor[(6, 1, 6), float64] {
  @func_285() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_5848() -> (Tensor[(6, 8, 6), bool], Tensor[(6, 8, 6), float64]) {
  %497 = @func_285() /* ty=Tensor[(6, 1, 6), float64] */;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(6, 1, 6), float64] */;
  %499 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 8, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 8, 6), float64] */;
  %500 = floor_divide(%498, %499) /* ty=Tensor[(6, 8, 6), float64] */;
  %501 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 8, 6), float64] */, dtype="bool") /* ty=Tensor[(6, 8, 6), bool] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="bool") /* ty=Tensor[(6, 8, 6), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %505 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 8, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 8, 6), float64] */;
  %506 = less(%503, %504) /* ty=Tensor[(6, 8, 6), bool] */;
  %507 = asinh(%505) /* ty=Tensor[(6, 8, 6), float64] */;
  (%506, %507)
}

def @func_2107() -> Tensor[(6, 1, 6), int64] {
  %508 = @func_926() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) */;
  %508.0
}

def @func_2656(%var_2640: Tensor[(4, 2, 1), uint32]) -> (Tensor[(4, 2, ?), bool],) {
  %509 = cast(meta[relay.Constant][31] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %510 = cast(%var_2640, dtype="bool") /* ty=Tensor[(4, 2, 1), bool] */;
  %511 = greater_equal(%509, %510) /* ty=Tensor[(4, 2, 1), bool] */;
  %512 = cast(%511, dtype="bool") /* ty=Tensor[(4, 2, 1), bool] */;
  %513 = shape_of(%var_2640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%var_2640, dtype="bool") /* ty=Tensor[(4, 2, 1), bool] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %516 = equal(%514, %515) /* ty=Tensor[(4, 2, ?), bool] */;
  (%516,)
}

def @func_2890(%var_2880: Tensor[(9, 2, 2), float32]) -> (Tensor[(9, 2, 2), float32],) {
  %517 = cast(%var_2880, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %518 = exp(%517) /* ty=Tensor[(9, 2, 2), float32] */;
  (%518,)
}

def @func_5402() -> Tensor[(6, 9, 6), float32] {
  %519 = @func_561() /* ty=(Tensor[(6, 9, 6), float32],) */;
  %519.0
}

def @func_5290() -> (Tensor[(6, ?, 6), float32],) {
  %520 = @func_4819() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %521 = %520.0;
  (%521,)
}

def @func_5502() -> Tensor[(6, 8, 6), uint8] {
  %522 = @func_731() /* ty=Tensor[(6, 1, 6), float64] */;
  %523 = @func_747() /* ty=(Tensor[(6, 8, 6), bool],) */;
  %524 = %523.0;
  %525 = cast(%522, dtype="uint8") /* ty=Tensor[(6, 1, 6), uint8] */;
  %526 = cast(%524, dtype="uint8") /* ty=Tensor[(6, 8, 6), uint8] */;
  bitwise_or(%525, %526) /* ty=Tensor[(6, 8, 6), uint8] */
}

def @func_4807() -> Tensor[(5, 11, 12), float32] {
  %527 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 12), float64] */;
  %528 = erf(%527) /* ty=Tensor[(5, 11, 12), float64] */;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(5, 11, 12), float32] */;
  atan(%529) /* ty=Tensor[(5, 11, 12), float32] */
}

def @func_407() -> (Tensor[(6, ?, 6), bool],) {
  %530 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %531 = %530.0;
  %532 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %533 = %532.1;
  %534 = cast(%533, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
  %535 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%531, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %538 = less(%536, %537) /* ty=Tensor[(6, ?, 6), bool] */;
  (%538,)
}

def @func_2423() -> Tensor[(6, ?, 6), bool] {
  %539 = @func_1197() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */;
  %539.0
}

def @func_1206() -> Tensor[(6, 1, 6), int64] {
  @func_255() /* ty=Tensor[(6, 1, 6), int64] */
}

def @func_276() -> Tensor[(6, 1, 6), float64] {
  %540 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %541 = %540.0;
  %542 = cast(%541, dtype="float64") /* ty=Tensor[(6, 1, 6), float64] */;
  asinh(%542) /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_939(%var_930: Tensor[(3, 14, 7), uint32]) -> (Tensor[(3, 14, 7), bool], Tensor[(6, ?, 6), bool]) {
  %543 = cast(%var_930, dtype="bool") /* ty=Tensor[(3, 14, 7), bool] */;
  %544 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(3, 14, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 14, 7), uint32] */, dtype="bool") /* ty=Tensor[(3, 14, 7), bool] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %547 = greater(%545, %546) /* ty=Tensor[(3, 14, 7), bool] */;
  %548 = @func_506() /* ty=Tensor[(6, ?, 6), bool] */;
  (%547, %548)
}

def @func_3053(%var_3037: Tensor[(36, 10), float64], %var_3049: Tensor[(260), uint8]) -> (Tensor[(6, ?, 6), bool], Tensor[(36, 10), bool], Tensor[(4, 5, 13), uint32], Tensor[(260), uint8]) {
  %549 = @func_2288() /* ty=(Tensor[(6, 1, 6), float32], Tensor[(6, ?, 6), uint64], Tensor[(260), uint8], Tensor[(36, 10), float64]) */;
  %550 = %549.3;
  %551 = cast(%var_3037, dtype="bool") /* ty=Tensor[(36, 10), bool] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(2), int32] */;
  %553 = cast(%550, dtype="bool") /* ty=Tensor[(36, 10), bool] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %555 = cast(%var_3049, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %556 = reshape(%555, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
  %557 = @func_326(%556) /* ty=(Tensor[(4, 5, 13), uint8], Tensor[(4, 5, 13), uint32], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) */;
  %558 = @func_1745() /* ty=Tensor[(6, ?, 6), bool] */;
  %559 = equal(%553, %554) /* ty=Tensor[(36, 10), bool] */;
  %560 = %557.1;
  (%558, %559, %560, %var_3049)
}

def @func_4691() -> Tensor[(6, ?, 6), int16] {
  %561 = @func_2994() /* ty=(Tensor[(6, ?, 6), int16],) */;
  %561.0
}

def @func_3715() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) {
  %562 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
  %563 = %562.0;
  %564 = @func_1834() /* ty=Tensor[(6, 1, 6), float64] */;
  (%563, %564)
}

def @func_685() -> (Tensor[(6, ?, 6), uint64], Tensor[(6, 1, 6), float64], Tensor[(6, ?, 6), bool]) {
  %565 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
  %566 = %565.1;
  %567 = cast(%566, dtype="float64") /* ty=Tensor[(6, 1, 6), float64] */;
  %568 = acosh(%567) /* ty=Tensor[(6, 1, 6), float64] */;
  %569 = cast(%566, dtype="uint64") /* ty=Tensor[(6, 1, 6), uint64] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="uint64") /* ty=Tensor[(6, 1, 6), uint64] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %573 = bitwise_xor(%571, %572) /* ty=Tensor[(6, ?, 6), uint64] */;
  %574 = @func_285() /* ty=Tensor[(6, 1, 6), float64] */;
  %575 = @func_506() /* ty=Tensor[(6, ?, 6), bool] */;
  (%573, %574, %575)
}

def @func_2994() -> (Tensor[(6, ?, 6), int16],) {
  %576 = @func_2594() /* ty=Tensor[(6, 1, 6), float64] */;
  %577 = @func_1889() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %578 = %577.0;
  %579 = cast(%578, dtype="int16") /* ty=Tensor[(6, ?, 6), int16] */;
  %580 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%576, dtype="int16") /* ty=Tensor[(6, 1, 6), int16] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %583 = right_shift(%581, %582) /* ty=Tensor[(6, ?, 6), int16] */;
  (%583,)
}

def @func_2059(%var_2042: Tensor[(6, 9, 6), float64]) -> (Tensor[(6, ?, 6), int32], Tensor[(6, 9, 6), bool], Tensor[(6, 9, 6), float32]) {
  %584 = @func_1964() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %585 = %584.0;
  %586 = cast(%585, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %587 = exp(%586) /* ty=Tensor[(6, ?, 6), float64] */;
  %588 = cast(%585, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%587, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %592 = floor_divide(%590, %591) /* ty=Tensor[(6, ?, 6), float64] */;
  %593 = cast(%585, dtype="int32") /* ty=Tensor[(6, ?, 6), int32] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="int32") /* ty=Tensor[(6, ?, 6), int32] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %597 = cast(%592, dtype="bool") /* ty=Tensor[(6, ?, 6), bool] */;
  %598 = cast(%var_2042, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
  %599 = cast(%var_2042, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %600 = add(%595, %596) /* ty=Tensor[(6, ?, 6), int32] */;
  %601 = less(%597, %598) /* ty=Tensor[(6, 9, 6), bool] */;
  %602 = asinh(%599) /* ty=Tensor[(6, 9, 6), float32] */;
  (%600, %601, %602)
}

def @func_6212(%var_6175: Tensor[(6, 13, 6), int16]) -> (Tensor[(6, 13, 6), bool], Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64]) {
  %603 = @func_4691() /* ty=Tensor[(6, ?, 6), int16] */;
  %604 = cast(%603, dtype="bool") /* ty=Tensor[(6, ?, 6), bool] */;
  %605 = cast(%var_6175, dtype="bool") /* ty=Tensor[(6, 13, 6), bool] */;
  %606 = cast(%603, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %607 = reshape(%606, newshape=[6, 1, 6]) /* ty=Tensor[(6, 1, 6), float64] */;
  %608 = @func_1145(%607) /* ty=(Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), bool]) */;
  %609 = @func_1245() /* ty=(Tensor[(6, 1, 6), float64],) */;
  %610 = equal(%604, %605) /* ty=Tensor[(6, 13, 6), bool] */;
  %611 = %608.1;
  %612 = %609.0;
  (%610, %611, %612)
}

def @func_3218(%var_3212: Tensor[(5, 5, 1), uint64], %var_3213: Tensor[(5, 5, 10), uint64]) -> Tensor[(5, 5, 10), uint64] {
  %613 = cast(%var_3212, dtype="uint64") /* ty=Tensor[(5, 5, 1), uint64] */;
  %614 = cast(%var_3213, dtype="uint64") /* ty=Tensor[(5, 5, 10), uint64] */;
  bitwise_and(%613, %614) /* ty=Tensor[(5, 5, 10), uint64] */
}

def @func_2876(%var_2864: Tensor[(15), float64]) -> (Tensor[(6, 9, 6), float32], Tensor[(3, 1, 5), float64], Tensor[(15), float64], Tensor[(6, 8, 6), bool]) {
  %615 = @func_1633() /* ty=(Tensor[(6, 9, 6), float32],) */;
  %616 = cast(%var_2864, dtype="float64") /* ty=Tensor[(15), float64] */;
  %617 = reshape(%616, newshape=[3, 1, 5]) /* ty=Tensor[(3, 1, 5), float64] */;
  %618 = @func_980(%617) /* ty=(Tensor[(3, 1, 5), float64],) */;
  %619 = @func_747() /* ty=(Tensor[(6, 8, 6), bool],) */;
  %620 = %615.0;
  %621 = %618.0;
  %622 = %619.0;
  (%620, %621, %var_2864, %622)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2890(%var_2880: Tensor[(9, 2, 2), float32]) -> (Tensor[(9, 2, 2), float32],) {
  %0 = cast(%var_2880, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %1 = exp(%0) /* ty=Tensor[(9, 2, 2), float32] */;
  (%1,)
}

def @func_4249(%var_4239: float32, %var_4240: Tensor[(12, 11, 2), float32], %var_4245: Tensor[(432), bool]) -> (Tensor[(12, 11, 2), float32], Tensor[(6, ?, 6), float64], Tensor[(432), bool], Tensor[(2, 112), float64], Tensor[(108), float64]) {
  %2 = cast(%var_4239, dtype="float32") /* ty=float32 */;
  %3 = cast(%var_4240, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
  %4 = cast(%var_4245, dtype="bool") /* ty=Tensor[(432), bool] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 112), float64] */, dtype="float64") /* ty=Tensor[(2, 112), float64] */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %7 = reshape(%4, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), bool] */;
  %8 = reshape(%5, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %9 = reshape(%6, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %10 = @func_3892(%7, %8, %9) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(6, ?, 6), float64], Tensor[(14, 8, 2), bool], Tensor[(224), float64], Tensor[(108), float64]) */;
  %11 = floor_mod(%2, %3) /* ty=Tensor[(12, 11, 2), float32] */;
  %12 = %10.1;
  (%11, %12, %var_4245, meta[relay.Constant][0] /* ty=Tensor[(2, 112), float64] */, meta[relay.Constant][1] /* ty=Tensor[(108), float64] */)
}

def @func_6309(%var_6283: Tensor[(9, 36), float64]) -> (Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64], Tensor[(9, 36), float64]) {
  %13 = @func_1584() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %14 = @func_3536() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) */;
  %15 = cast(%var_6283, dtype="float64") /* ty=Tensor[(9, 36), float64] */;
  %16 = reshape(%15, newshape=[162, 2]) /* ty=Tensor[(162, 2), float64] */;
  %17 = @func_4233(%16) /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(162, 2), float64], Tensor[(6, 1, 6), float64], Tensor[(4, 2, ?), float32]) */;
  %18 = %13.0;
  %19 = @func_1834() /* ty=Tensor[(6, 1, 6), float64] */;
  %20 = %14.0;
  %21 = %17.0;
  (%18, %19, %20, %21, %var_6283)
}

def @func_3777() -> Tensor[(6, ?, 6), int16] {
  @func_3775() /* ty=Tensor[(6, ?, 6), int16] */
}

def @func_3819() -> (Tensor[(5, 7, 13), float32],) {
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 13), float32] */;
  %23 = asin(%22) /* ty=Tensor[(5, 7, 13), float32] */;
  (%23,)
}

def @func_4448() -> (Tensor[(6, 9, 6), float32], Tensor[(260), uint8], Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), float64]) {
  @func_4446() /* ty=(Tensor[(6, 9, 6), float32], Tensor[(260), uint8], Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), float64]) */
}

def @func_4142(%var_4113: uint32, %var_4114: Tensor[(10, 6, 5), uint32]) -> Tensor[(10, 6, 5), bool] {
  %24 = cast(%var_4113, dtype="uint32") /* ty=uint32 */;
  %25 = cast(%var_4114, dtype="uint32") /* ty=Tensor[(10, 6, 5), uint32] */;
  %26 = maximum(%24, %25) /* ty=Tensor[(10, 6, 5), uint32] */;
  %27 = cast(%26, dtype="bool") /* ty=Tensor[(10, 6, 5), bool] */;
  %28 = cast(%var_4113, dtype="bool") /* ty=bool */;
  less_equal(%27, %28) /* ty=Tensor[(10, 6, 5), bool] */
}

def @func_4390(%var_4388: Tensor[(224), float64], %var_4389: Tensor[(108), float64]) -> (Tensor[(6, 1, 6), int64], Tensor[(6, 12, 6), bool], Tensor[(432), bool], Tensor[(224), float64], Tensor[(108), float64]) {
  @func_4386(%var_4388, %var_4389) /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 12, 6), bool], Tensor[(432), bool], Tensor[(224), float64], Tensor[(108), float64]) */
}

def @func_2659(%var_2657: Tensor[(4, 2, 1), uint32]) -> (Tensor[(4, 2, ?), bool],) {
  @func_2656(%var_2657) /* ty=(Tensor[(4, 2, ?), bool],) */
}

def @func_982(%var_981: Tensor[(3, 1, 5), float64]) -> (Tensor[(3, 1, 5), float64],) {
  %31 = fn (%var_957: Tensor[(3, 1, 5), float64]) -> (Tensor[(3, 1, 5), float64],) {
    %29 = cast(%var_957, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
    %30 = cos(%29) /* ty=Tensor[(3, 1, 5), float64] */;
    (%30,)
  };
  %31(%var_981) /* ty=(Tensor[(3, 1, 5), float64],) */
}

def @func_1865() -> Tensor[(6, 9, 6), float32] {
  %32 = @func_561() /* ty=(Tensor[(6, 9, 6), float32],) */;
  %32.0
}

def @func_3536() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) {
  %33 = @func_167() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) */;
  %34 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
  %35 = %33.0;
  %36 = %34.0;
  (%35, %36)
}

def @func_5462(%var_5460: Tensor[(175), uint64]) -> (Tensor[(6, 15, 6), uint64], Tensor[(5, 5, 7), bool], Tensor[(175), uint64], Tensor[(6, 15, 6), float32]) {
  @func_5459(%var_5460) /* ty=(Tensor[(6, 15, 6), uint64], Tensor[(5, 5, 7), bool], Tensor[(175), uint64], Tensor[(6, 15, 6), float32]) */
}

def @func_3602() -> Tensor[(6, 1, 6), float64] {
  %37 = fn () -> Tensor[(6, 1, 6), float64] {
    @func_285() /* ty=Tensor[(6, 1, 6), float64] */
  };
  %37() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_5504() -> Tensor[(6, 8, 6), uint8] {
  @func_5502() /* ty=Tensor[(6, 8, 6), uint8] */
}

def @func_732() -> Tensor[(6, 1, 6), float64] {
  %38 = fn () -> Tensor[(6, 1, 6), float64] {
    @func_276() /* ty=Tensor[(6, 1, 6), float64] */
  };
  %38() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_1208() -> Tensor[(6, 1, 6), int64] {
  @func_1206() /* ty=Tensor[(6, 1, 6), int64] */
}

def @func_2723() -> Tensor[(6, 1, 6), float32] {
  %42 = fn () -> Tensor[(6, 1, 6), float32] {
    %39 = @func_1197() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */;
    %40 = %39.1;
    %41 = cast(%40, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
    cosh(%41) /* ty=Tensor[(6, 1, 6), float32] */
  };
  %42() /* ty=Tensor[(6, 1, 6), float32] */
}

def @func_2595() -> Tensor[(6, 1, 6), float64] {
  %44 = fn () -> Tensor[(6, 1, 6), float64] {
    %43 = @func_685() /* ty=(Tensor[(6, ?, 6), uint64], Tensor[(6, 1, 6), float64], Tensor[(6, ?, 6), bool]) */;
    %43.1
  };
  %44() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_507() -> Tensor[(6, ?, 6), bool] {
  %46 = fn () -> Tensor[(6, ?, 6), bool] {
    %45 = @func_407() /* ty=(Tensor[(6, ?, 6), bool],) */;
    %45.0
  };
  %46() /* ty=Tensor[(6, ?, 6), bool] */
}

def @func_4159() -> (Tensor[(6, ?, 6), bool],) {
  %49 = fn () -> (Tensor[(6, ?, 6), bool],) {
    %47 = @func_2629() /* ty=(Tensor[(6, ?, 6), bool],) */;
    %48 = %47.0;
    (%48,)
  };
  %49() /* ty=(Tensor[(6, ?, 6), bool],) */
}

def @func_4925() -> (Tensor[(6, ?, 6), bool],) {
  @func_4923() /* ty=(Tensor[(6, ?, 6), bool],) */
}

def @func_4978() -> (Tensor[(6, ?, 6), float32],) {
  %52 = fn () -> (Tensor[(6, ?, 6), float32],) {
    %50 = @func_1889() /* ty=(Tensor[(6, ?, 6), float32],) */;
    %51 = %50.0;
    (%51,)
  };
  %52() /* ty=(Tensor[(6, ?, 6), float32],) */
}

def @func_1728() -> (Tensor[(6, 1, 6), float64],) {
  %53 = @func_731() /* ty=Tensor[(6, 1, 6), float64] */;
  (%53,)
}

def @func_5058() -> Tensor[(6, ?, 6), int16] {
  @func_5056() /* ty=Tensor[(6, ?, 6), int16] */
}

def @func_6326(%var_6324: Tensor[(6, 4, 6), bool]) -> (Tensor[(6, 4, 6), float64],) {
  @func_6323(%var_6324) /* ty=(Tensor[(6, 4, 6), float64],) */
}

def @func_3080() -> (Tensor[(6, 2, 6), int32], Tensor[(6, 2, 6), float64]) {
  %60 = fn () -> (Tensor[(6, 2, 6), int32], Tensor[(6, 2, 6), float64]) {
    %54 = @func_1745() /* ty=Tensor[(6, ?, 6), bool] */;
    %55 = cast(%54, dtype="int32") /* ty=Tensor[(6, ?, 6), int32] */;
    %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 2, 6), bool] */, dtype="int32") /* ty=Tensor[(6, 2, 6), int32] */;
    %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 2, 6), bool] */, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
    %58 = logical_xor(%55, %56) /* ty=Tensor[(6, 2, 6), int32] */;
    %59 = atan(%57) /* ty=Tensor[(6, 2, 6), float64] */;
    (%58, %59)
  };
  %60() /* ty=(Tensor[(6, 2, 6), int32], Tensor[(6, 2, 6), float64]) */
}

def @func_2752() -> (Tensor[(6, 1, 6), float64],) {
  %62 = fn () -> (Tensor[(6, 1, 6), float64],) {
    %61 = @func_2594() /* ty=Tensor[(6, 1, 6), float64] */;
    (%61,)
  };
  %62() /* ty=(Tensor[(6, 1, 6), float64],) */
}

def @func_243() -> (Tensor[(6, 1, 6), int64],) {
  %65 = fn () -> (Tensor[(6, 1, 6), int64],) {
    %63 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
    %64 = %63.0;
    (%64,)
  };
  %65() /* ty=(Tensor[(6, 1, 6), int64],) */
}

def @func_5679() -> (Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), int16], Tensor[(6, 2, 6), int32]) {
  @func_5677() /* ty=(Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), int16], Tensor[(6, 2, 6), int32]) */
}

def @func_5801() -> Tensor[(6, 1, 6), float64] {
  %67 = fn () -> Tensor[(6, 1, 6), float64] {
    %66 = @func_1728() /* ty=(Tensor[(6, 1, 6), float64],) */;
    %66.0
  };
  %67() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_1426(%var_1420: Tensor[(260), uint8]) -> (Tensor[(6, 9, 6), float64], Tensor[(6, ?, 6), bool], Tensor[(4, 5, 13), uint8], Tensor[(260), uint8], Tensor[(6, 9, 6), float32]) {
  %68 = @func_953() /* ty=Tensor[(6, 9, 6), float32] */;
  %69 = cast(%68, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
  %70 = @func_707() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %71 = cast(%var_1420, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %72 = reshape(%71, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
  %73 = @func_326(%72) /* ty=(Tensor[(4, 5, 13), uint8], Tensor[(4, 5, 13), uint32], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) */;
  %74 = cast(%68, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %75 = atan(%74) /* ty=Tensor[(6, 9, 6), float32] */;
  %76 = cast(%75, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %77 = exp(%69) /* ty=Tensor[(6, 9, 6), float64] */;
  %78 = %70.0;
  %79 = %73.0;
  %80 = atanh(%76) /* ty=Tensor[(6, 9, 6), float32] */;
  (%77, %78, %79, %var_1420, %80)
}

def @func_4446() -> (Tensor[(6, 9, 6), float32], Tensor[(260), uint8], Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), float64]) {
  %81 = @func_2288() /* ty=(Tensor[(6, 1, 6), float32], Tensor[(6, ?, 6), uint64], Tensor[(260), uint8], Tensor[(36, 10), float64]) */;
  %82 = @func_953() /* ty=Tensor[(6, 9, 6), float32] */;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
  %84 = reshape(%83, newshape=[162, 2]) /* ty=Tensor[(162, 2), float64] */;
  %85 = @func_4233(%84) /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(162, 2), float64], Tensor[(6, 1, 6), float64], Tensor[(4, 2, ?), float32]) */;
  %86 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
  %87 = %86.1;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
  %89 = reshape(%88, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), float32] */;
  %90 = @func_2890(%89) /* ty=(Tensor[(9, 2, 2), float32],) */;
  %91 = %90.0;
  %92 = cast(%91, dtype="int64") /* ty=Tensor[(9, 2, 2), int64] */;
  %93 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%87, dtype="int64") /* ty=Tensor[(6, 1, 6), int64] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %96 = subtract(%94, %95) /* ty=Tensor[(6, ?, 6), int64] */;
  %97 = cast(%91, dtype="float64") /* ty=Tensor[(9, 2, 2), float64] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%96, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %101 = %81.2;
  %102 = %85.1;
  %103 = floor_mod(%99, %100) /* ty=Tensor[(6, ?, 6), float64] */;
  (%82, %101, %102, %103)
}

def @func_1746() -> Tensor[(6, ?, 6), bool] {
  %105 = fn () -> Tensor[(6, ?, 6), bool] {
    %104 = @func_707() /* ty=(Tensor[(6, ?, 6), bool],) */;
    %104.0
  };
  %105() /* ty=Tensor[(6, ?, 6), bool] */
}

def @func_2357() -> (Tensor[(6, ?, 6), float64], Tensor[(6, ?, 6), float64]) {
  %111 = fn () -> (Tensor[(6, ?, 6), float64], Tensor[(6, ?, 6), float64]) {
    %106 = @func_1363() /* ty=Tensor[(6, ?, 6), float32] */;
    %107 = cast(%106, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
    %108 = cast(%106, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
    %109 = log2(%107) /* ty=Tensor[(6, ?, 6), float64] */;
    %110 = sinh(%108) /* ty=Tensor[(6, ?, 6), float64] */;
    (%109, %110)
  };
  %111() /* ty=(Tensor[(6, ?, 6), float64], Tensor[(6, ?, 6), float64]) */
}

def @func_5849() -> (Tensor[(6, 8, 6), bool], Tensor[(6, 8, 6), float64]) {
  %123 = fn () -> (Tensor[(6, 8, 6), bool], Tensor[(6, 8, 6), float64]) {
    %112 = @func_285() /* ty=Tensor[(6, 1, 6), float64] */;
    %113 = cast(%112, dtype="float64") /* ty=Tensor[(6, 1, 6), float64] */;
    %114 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 8, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 8, 6), float64] */;
    %115 = floor_divide(%113, %114) /* ty=Tensor[(6, 8, 6), float64] */;
    %116 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 8, 6), float64] */, dtype="bool") /* ty=Tensor[(6, 8, 6), bool] */;
    %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(%115, dtype="bool") /* ty=Tensor[(6, 8, 6), bool] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %120 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 8, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 8, 6), float64] */;
    %121 = less(%118, %119) /* ty=Tensor[(6, 8, 6), bool] */;
    %122 = asinh(%120) /* ty=Tensor[(6, 8, 6), float64] */;
    (%121, %122)
  };
  %123() /* ty=(Tensor[(6, 8, 6), bool], Tensor[(6, 8, 6), float64]) */
}

def @func_954() -> Tensor[(6, 9, 6), float32] {
  %125 = fn () -> Tensor[(6, 9, 6), float32] {
    %124 = @func_561() /* ty=(Tensor[(6, 9, 6), float32],) */;
    %124.0
  };
  %125() /* ty=Tensor[(6, 9, 6), float32] */
}

def @func_1634() -> (Tensor[(6, 9, 6), float32],) {
  %128 = fn () -> (Tensor[(6, 9, 6), float32],) {
    %126 = @func_926() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) */;
    %127 = %126.1;
    (%127,)
  };
  %128() /* ty=(Tensor[(6, 9, 6), float32],) */
}

def @func_286() -> Tensor[(6, 1, 6), float64] {
  %129 = fn () -> Tensor[(6, 1, 6), float64] {
    @func_276() /* ty=Tensor[(6, 1, 6), float64] */
  };
  %129() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_5290() -> (Tensor[(6, ?, 6), float32],) {
  %130 = @func_4819() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %131 = %130.0;
  (%131,)
}

def @func_1730() -> (Tensor[(6, 1, 6), float64],) {
  @func_1728() /* ty=(Tensor[(6, 1, 6), float64],) */
}

def @func_4772(%var_4770: Tensor[(6, 11, 6), float32]) -> Tensor[(6, 11, 6), float64] {
  @func_4769(%var_4770) /* ty=Tensor[(6, 11, 6), float64] */
}

def @func_562() -> (Tensor[(6, 9, 6), float32],) {
  %137 = fn () -> (Tensor[(6, 9, 6), float32],) {
    %132 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
    %133 = %132.0;
    %134 = cast(%133, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
    %135 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 9, 6), int64] */, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
    %136 = divide(%134, %135) /* ty=Tensor[(6, 9, 6), float32] */;
    (%136,)
  };
  %137() /* ty=(Tensor[(6, 9, 6), float32],) */
}

def @func_651(%var_650: Tensor[(5, 5, 7), uint64]) -> (Tensor[(5, 5, 7), bool], Tensor[(6, 1, 6), int64]) {
  %145 = fn (%var_638: Tensor[(5, 5, 7), uint64]) -> (Tensor[(5, 5, 7), bool], Tensor[(6, 1, 6), int64]) {
    %138 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 5, 7), uint64] */, dtype="bool") /* ty=Tensor[(5, 5, 7), bool] */;
    %139 = shape_of(%var_638, dtype="int32") /* ty=Tensor[(3), int32] */;
    %140 = cast(%var_638, dtype="bool") /* ty=Tensor[(5, 5, 7), bool] */;
    %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %142 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
    %143 = greater_equal(%140, %141) /* ty=Tensor[(5, 5, 7), bool] */;
    %144 = %142.0;
    (%143, %144)
  };
  %145(%var_650) /* ty=(Tensor[(5, 5, 7), bool], Tensor[(6, 1, 6), int64]) */
}

def @func_2485(%var_2483: float64, %var_2484: Tensor[(6, 9, 15), float64]) -> (Tensor[(6, 9, 15), float64],) {
  @func_2481(%var_2483, %var_2484) /* ty=(Tensor[(6, 9, 15), float64],) */
}

def @func_2878(%var_2877: Tensor[(15), float64]) -> (Tensor[(6, 9, 6), float32], Tensor[(3, 1, 5), float64], Tensor[(15), float64], Tensor[(6, 8, 6), bool]) {
  %154 = fn (%var_2864: Tensor[(15), float64]) -> (Tensor[(6, 9, 6), float32], Tensor[(3, 1, 5), float64], Tensor[(15), float64], Tensor[(6, 8, 6), bool]) {
    %146 = @func_1633() /* ty=(Tensor[(6, 9, 6), float32],) */;
    %147 = cast(%var_2864, dtype="float64") /* ty=Tensor[(15), float64] */;
    %148 = reshape(%147, newshape=[3, 1, 5]) /* ty=Tensor[(3, 1, 5), float64] */;
    %149 = @func_980(%148) /* ty=(Tensor[(3, 1, 5), float64],) */;
    %150 = @func_747() /* ty=(Tensor[(6, 8, 6), bool],) */;
    %151 = %146.0;
    %152 = %149.0;
    %153 = %150.0;
    (%151, %152, %var_2864, %153)
  };
  %154(%var_2877) /* ty=(Tensor[(6, 9, 6), float32], Tensor[(3, 1, 5), float64], Tensor[(15), float64], Tensor[(6, 8, 6), bool]) */
}

def @func_928() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) {
  @func_926() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) */
}

def @func_5502() -> Tensor[(6, 8, 6), uint8] {
  %155 = @func_731() /* ty=Tensor[(6, 1, 6), float64] */;
  %156 = @func_747() /* ty=(Tensor[(6, 8, 6), bool],) */;
  %157 = %156.0;
  %158 = cast(%155, dtype="uint8") /* ty=Tensor[(6, 1, 6), uint8] */;
  %159 = cast(%157, dtype="uint8") /* ty=Tensor[(6, 8, 6), uint8] */;
  bitwise_or(%158, %159) /* ty=Tensor[(6, 8, 6), uint8] */
}

def @func_119() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) {
  %160 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %161 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %162 = %161.1;
  %163 = cast(%162, dtype="float64") /* ty=Tensor[(6, 1, 6), float64] */;
  %164 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %165 = %160.0;
  %166 = log(%163) /* ty=Tensor[(6, 1, 6), float64] */;
  %167 = %164.0;
  (%165, %166, %167)
}

def @func_3821() -> (Tensor[(5, 7, 13), float32],) {
  @func_3819() /* ty=(Tensor[(5, 7, 13), float32],) */
}

def @func_5764() -> (Tensor[(15, 16, ?), bool], Tensor[(15, 16, ?), float32]) {
  @func_5762() /* ty=(Tensor[(15, 16, ?), bool], Tensor[(15, 16, ?), float32]) */
}

def @func_407() -> (Tensor[(6, ?, 6), bool],) {
  %168 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %169 = %168.0;
  %170 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %171 = %170.1;
  %172 = cast(%171, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
  %173 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%169, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %176 = less(%174, %175) /* ty=Tensor[(6, ?, 6), bool] */;
  (%176,)
}

def @func_2893(%var_2891: Tensor[(9, 2, 2), float32]) -> (Tensor[(9, 2, 2), float32],) {
  @func_2890(%var_2891) /* ty=(Tensor[(9, 2, 2), float32],) */
}

def @func_1586() -> (Tensor[(6, ?, 6), bool],) {
  @func_1584() /* ty=(Tensor[(6, ?, 6), bool],) */
}

def @func_4235(%var_4234: Tensor[(162, 2), float64]) -> (Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(162, 2), float64], Tensor[(6, 1, 6), float64], Tensor[(4, 2, ?), float32]) {
  %192 = fn (%var_4212: Tensor[(162, 2), float64]) -> (Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(162, 2), float64], Tensor[(6, 1, 6), float64], Tensor[(4, 2, ?), float32]) {
    %177 = cast(%var_4212, dtype="float64") /* ty=Tensor[(162, 2), float64] */;
    %178 = reshape(%177, newshape=[6, 9, 6]) /* ty=Tensor[(6, 9, 6), float64] */;
    %179 = @func_2059(%178) /* ty=(Tensor[(6, ?, 6), int32], Tensor[(6, 9, 6), bool], Tensor[(6, 9, 6), float32]) */;
    %180 = cast(meta[relay.Constant][8] /* ty=Tensor[(8), uint32] */, dtype="uint32") /* ty=Tensor[(8), uint32] */;
    %181 = reshape(%180, newshape=[4, 2, 1]) /* ty=Tensor[(4, 2, 1), uint32] */;
    %182 = @func_2656(%181) /* ty=(Tensor[(4, 2, ?), bool],) */;
    %183 = %182.0;
    %184 = cast(meta[relay.Constant][8] /* ty=Tensor[(8), uint32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
    %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
    %186 = cast(%183, dtype="float32") /* ty=Tensor[(4, 2, ?), float32] */;
    %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %188 = @func_255() /* ty=Tensor[(6, 1, 6), int64] */;
    %189 = %179.2;
    %190 = @func_276() /* ty=Tensor[(6, 1, 6), float64] */;
    %191 = power(%186, %187) /* ty=Tensor[(4, 2, ?), float32] */;
    (%188, %189, %var_4212, %190, %191)
  };
  %192(%var_4234) /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(162, 2), float64], Tensor[(6, 1, 6), float64], Tensor[(4, 2, ?), float32]) */
}

def @func_4693() -> Tensor[(6, ?, 6), int16] {
  @func_4691() /* ty=Tensor[(6, ?, 6), int16] */
}

def @func_4254(%var_4251: float32, %var_4252: Tensor[(12, 11, 2), float32], %var_4253: Tensor[(432), bool]) -> (Tensor[(12, 11, 2), float32], Tensor[(6, ?, 6), float64], Tensor[(432), bool], Tensor[(2, 112), float64], Tensor[(108), float64]) {
  @func_4249(%var_4251, %var_4252, %var_4253) /* ty=(Tensor[(12, 11, 2), float32], Tensor[(6, ?, 6), float64], Tensor[(432), bool], Tensor[(2, 112), float64], Tensor[(108), float64]) */
}

def @func_1834() -> Tensor[(6, 1, 6), float64] {
  @func_731() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_708() -> (Tensor[(6, ?, 6), bool],) {
  %195 = fn () -> (Tensor[(6, ?, 6), bool],) {
    %193 = @func_407() /* ty=(Tensor[(6, ?, 6), bool],) */;
    %194 = %193.0;
    (%194,)
  };
  %195() /* ty=(Tensor[(6, ?, 6), bool],) */
}

def @func_4386(%var_4381: Tensor[(224), float64], %var_4382: Tensor[(108), float64]) -> (Tensor[(6, 1, 6), int64], Tensor[(6, 12, 6), bool], Tensor[(432), bool], Tensor[(224), float64], Tensor[(108), float64]) {
  %196 = @func_926() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) */;
  %197 = cast(meta[relay.Constant][9] /* ty=Tensor[(432), bool] */, dtype="bool") /* ty=Tensor[(432), bool] */;
  %198 = cast(%var_4381, dtype="float64") /* ty=Tensor[(224), float64] */;
  %199 = cast(%var_4382, dtype="float64") /* ty=Tensor[(108), float64] */;
  %200 = reshape(%197, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), bool] */;
  %201 = reshape(%198, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %202 = reshape(%199, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %203 = @func_3892(%200, %201, %202) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(6, ?, 6), float64], Tensor[(14, 8, 2), bool], Tensor[(224), float64], Tensor[(108), float64]) */;
  %204 = %196.0;
  %205 = %203.0;
  (%204, %205, meta[relay.Constant][9] /* ty=Tensor[(432), bool] */, %var_4381, %var_4382)
}

def @func_1584() -> (Tensor[(6, ?, 6), bool],) {
  %206 = @func_506() /* ty=Tensor[(6, ?, 6), bool] */;
  (%206,)
}

def @func_3775() -> Tensor[(6, ?, 6), int16] {
  %207 = @func_2994() /* ty=(Tensor[(6, ?, 6), int16],) */;
  %207.0
}

def @func_4808() -> Tensor[(5, 11, 12), float32] {
  %211 = fn () -> Tensor[(5, 11, 12), float32] {
    %208 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 12), float64] */;
    %209 = erf(%208) /* ty=Tensor[(5, 11, 12), float64] */;
    %210 = cast(%209, dtype="float32") /* ty=Tensor[(5, 11, 12), float32] */;
    atan(%210) /* ty=Tensor[(5, 11, 12), float32] */
  };
  %211() /* ty=Tensor[(5, 11, 12), float32] */
}

def @func_5125(%var_5124: Tensor[(5, 13, 10), int32]) -> (Tensor[(5, 13, 10), int32], Tensor[(5, 13, 10), float64], Tensor[(6, ?, 6), float32]) {
  %221 = fn (%var_5096: Tensor[(5, 13, 10), int32]) -> (Tensor[(5, 13, 10), int32], Tensor[(5, 13, 10), float64], Tensor[(6, ?, 6), float32]) {
    %212 = cast(%var_5096, dtype="int32") /* ty=Tensor[(5, 13, 10), int32] */;
    %213 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(5, 13, 10), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %214 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 13, 10), int32] */, dtype="int32") /* ty=Tensor[(5, 13, 10), int32] */;
    %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %216 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 13, 10), int32] */, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
    %217 = @func_4819() /* ty=(Tensor[(6, ?, 6), float32],) */;
    %218 = logical_xor(%214, %215) /* ty=Tensor[(5, 13, 10), int32] */;
    %219 = sinh(%216) /* ty=Tensor[(5, 13, 10), float64] */;
    %220 = %217.0;
    (%218, %219, %220)
  };
  %221(%var_5124) /* ty=(Tensor[(5, 13, 10), int32], Tensor[(5, 13, 10), float64], Tensor[(6, ?, 6), float32]) */
}

def @func_685() -> (Tensor[(6, ?, 6), uint64], Tensor[(6, 1, 6), float64], Tensor[(6, ?, 6), bool]) {
  %222 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
  %223 = %222.1;
  %224 = cast(%223, dtype="float64") /* ty=Tensor[(6, 1, 6), float64] */;
  %225 = acosh(%224) /* ty=Tensor[(6, 1, 6), float64] */;
  %226 = cast(%223, dtype="uint64") /* ty=Tensor[(6, 1, 6), uint64] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%225, dtype="uint64") /* ty=Tensor[(6, 1, 6), uint64] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %230 = bitwise_xor(%228, %229) /* ty=Tensor[(6, ?, 6), uint64] */;
  %231 = @func_285() /* ty=Tensor[(6, 1, 6), float64] */;
  %232 = @func_506() /* ty=Tensor[(6, ?, 6), bool] */;
  (%230, %231, %232)
}

def @func_1474(%var_1473: Tensor[(6, 3, 6), float64]) -> (Tensor[(6, 3, 6), bool], Tensor[(6, 1, 6), float32], Tensor[(6, 9, 6), float32]) {
  %241 = fn (%var_1453: Tensor[(6, 3, 6), float64]) -> (Tensor[(6, 3, 6), bool], Tensor[(6, 1, 6), float32], Tensor[(6, 9, 6), float32]) {
    %233 = @func_1245() /* ty=(Tensor[(6, 1, 6), float64],) */;
    %234 = %233.0;
    %235 = cast(%234, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
    %236 = cast(%var_1453, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
    %237 = cast(%234, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
    %238 = less_equal(%235, %236) /* ty=Tensor[(6, 3, 6), bool] */;
    %239 = tan(%237) /* ty=Tensor[(6, 1, 6), float32] */;
    %240 = @func_953() /* ty=Tensor[(6, 9, 6), float32] */;
    (%238, %239, %240)
  };
  %241(%var_1473) /* ty=(Tensor[(6, 3, 6), bool], Tensor[(6, 1, 6), float32], Tensor[(6, 9, 6), float32]) */
}

def @func_1911() -> (Tensor[(6, ?, 6), float32],) {
  %242 = @func_1363() /* ty=Tensor[(6, ?, 6), float32] */;
  (%242,)
}

def @func_276() -> Tensor[(6, 1, 6), float64] {
  %243 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
  %244 = %243.0;
  %245 = cast(%244, dtype="float64") /* ty=Tensor[(6, 1, 6), float64] */;
  asinh(%245) /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_1107(%var_1105: Tensor[(6, 10, 6), int64], %var_1106: Tensor[(260), uint8]) -> (Tensor[(6, 9, 6), float32], Tensor[(6, 10, 6), uint16], Tensor[(6, 10, 6), float32], Tensor[(6, 1, 6), int64], Tensor[(260), uint8]) {
  %258 = fn (%var_1055: Tensor[(6, 10, 6), int64], %var_1102: Tensor[(260), uint8]) -> (Tensor[(6, 9, 6), float32], Tensor[(6, 10, 6), uint16], Tensor[(6, 10, 6), float32], Tensor[(6, 1, 6), int64], Tensor[(260), uint8]) {
    %246 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
    %247 = %246.0;
    %248 = cast(%247, dtype="uint16") /* ty=Tensor[(6, 1, 6), uint16] */;
    %249 = cast(%var_1055, dtype="uint16") /* ty=Tensor[(6, 10, 6), uint16] */;
    %250 = cast(%var_1055, dtype="float32") /* ty=Tensor[(6, 10, 6), float32] */;
    %251 = cast(%var_1102, dtype="uint8") /* ty=Tensor[(260), uint8] */;
    %252 = reshape(%251, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
    %253 = @func_326(%252) /* ty=(Tensor[(4, 5, 13), uint8], Tensor[(4, 5, 13), uint32], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) */;
    %254 = @func_953() /* ty=Tensor[(6, 9, 6), float32] */;
    %255 = bitwise_xor(%248, %249) /* ty=Tensor[(6, 10, 6), uint16] */;
    %256 = acosh(%250) /* ty=Tensor[(6, 10, 6), float32] */;
    %257 = %253.2;
    (%254, %255, %256, %257, %var_1102)
  };
  %258(%var_1105, %var_1106) /* ty=(Tensor[(6, 9, 6), float32], Tensor[(6, 10, 6), uint16], Tensor[(6, 10, 6), float32], Tensor[(6, 1, 6), int64], Tensor[(260), uint8]) */
}

def @func_2165(%var_2127: Tensor[(16, 3, 14), uint16]) -> (Tensor[(16, 3, 14), float32], Tensor[(3, 14, 7), bool], Tensor[(1800), float32], Tensor[(294, 1), uint32]) {
  %259 = cast(%var_2127, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
  %260 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(16, 3, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 3, 14), uint16] */, dtype="bool") /* ty=Tensor[(16, 3, 14), bool] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %263 = less_equal(%261, %262) /* ty=Tensor[(16, 3, 14), bool] */;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(16, 3, 14), float64] */;
  %265 = sin(%264) /* ty=Tensor[(16, 3, 14), float64] */;
  %266 = cast(%265, dtype="float32") /* ty=Tensor[(16, 3, 14), float32] */;
  %267 = cast(meta[relay.Constant][13] /* ty=Tensor[(1800), float32] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %268 = cast(meta[relay.Constant][14] /* ty=Tensor[(294, 1), uint32] */, dtype="uint32") /* ty=Tensor[(294, 1), uint32] */;
  %269 = reshape(%267, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float32] */;
  %270 = reshape(%268, newshape=[294]) /* ty=Tensor[(294), uint32] */;
  %271 = @func_1559(%269, %270) /* ty=(Tensor[(15, 10, 12), float32], Tensor[(3, 14, 7), bool], Tensor[(294), uint32], Tensor[(6, ?, 6), bool]) */;
  %272 = log10(%266) /* ty=Tensor[(16, 3, 14), float32] */;
  %273 = %271.1;
  (%272, %273, meta[relay.Constant][13] /* ty=Tensor[(1800), float32] */, meta[relay.Constant][14] /* ty=Tensor[(294, 1), uint32] */)
}

def @func_1867() -> Tensor[(6, 9, 6), float32] {
  @func_1865() /* ty=Tensor[(6, 9, 6), float32] */
}

def @func_2631() -> (Tensor[(6, ?, 6), bool],) {
  @func_2629() /* ty=(Tensor[(6, ?, 6), bool],) */
}

def @func_2108() -> Tensor[(6, 1, 6), int64] {
  %275 = fn () -> Tensor[(6, 1, 6), int64] {
    %274 = @func_926() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) */;
    %274.0
  };
  %275() /* ty=Tensor[(6, 1, 6), int64] */
}

def @func_3343(%var_3341: Tensor[(9, 11, 10), uint16], %var_3342: Tensor[(9, 11, 10), uint16]) -> (Tensor[(9, 11, 10), float32], Tensor[(6, ?, 6), float32]) {
  %287 = fn (%var_3319: Tensor[(9, 11, 10), uint16], %var_3331: Tensor[(9, 11, 10), uint16]) -> (Tensor[(9, 11, 10), float32], Tensor[(6, ?, 6), float32]) {
    %276 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 11, 10), uint16] */, dtype="uint16") /* ty=Tensor[(9, 11, 10), uint16] */;
    %277 = shape_of(%var_3319, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(%var_3319, dtype="uint16") /* ty=Tensor[(9, 11, 10), uint16] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %280 = add(%278, %279) /* ty=Tensor[(9, 11, 10), uint16] */;
    %281 = cast(%var_3331, dtype="float32") /* ty=Tensor[(9, 11, 10), float32] */;
    %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(3), int32] */;
    %283 = cast(%280, dtype="float32") /* ty=Tensor[(9, 11, 10), float32] */;
    %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %285 = floor_divide(%283, %284) /* ty=Tensor[(9, 11, 10), float32] */;
    %286 = @func_2832() /* ty=Tensor[(6, ?, 6), float32] */;
    (%285, %286)
  };
  %287(%var_3341, %var_3342) /* ty=(Tensor[(9, 11, 10), float32], Tensor[(6, ?, 6), float32]) */
}

def @func_3715() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) {
  %288 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
  %289 = %288.0;
  %290 = @func_1834() /* ty=Tensor[(6, 1, 6), float64] */;
  (%289, %290)
}

def @func_5925(%var_5923: Tensor[(8, 16, 2), float32]) -> (Tensor[(8, 16, 2), float32], Tensor[(8, 16, 2), float32], Tensor[(6, ?, 6), bool], Tensor[(6, ?, 6), float32]) {
  @func_5922(%var_5923) /* ty=(Tensor[(8, 16, 2), float32], Tensor[(8, 16, 2), float32], Tensor[(6, ?, 6), bool], Tensor[(6, ?, 6), float32]) */
}

def @func_5459(%var_5437: Tensor[(175), uint64]) -> (Tensor[(6, 15, 6), uint64], Tensor[(5, 5, 7), bool], Tensor[(175), uint64], Tensor[(6, 15, 6), float32]) {
  %291 = @func_276() /* ty=Tensor[(6, 1, 6), float64] */;
  %292 = cast(%291, dtype="uint64") /* ty=Tensor[(6, 1, 6), uint64] */;
  %293 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 15, 6), float64] */, dtype="uint64") /* ty=Tensor[(6, 15, 6), uint64] */;
  %294 = cast(%var_5437, dtype="uint64") /* ty=Tensor[(175), uint64] */;
  %295 = reshape(%294, newshape=[5, 5, 7]) /* ty=Tensor[(5, 5, 7), uint64] */;
  %296 = @func_649(%295) /* ty=(Tensor[(5, 5, 7), bool], Tensor[(6, 1, 6), int64]) */;
  %297 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 15, 6), float64] */, dtype="float32") /* ty=Tensor[(6, 15, 6), float32] */;
  %298 = subtract(%292, %293) /* ty=Tensor[(6, 15, 6), uint64] */;
  %299 = %296.0;
  %300 = atanh(%297) /* ty=Tensor[(6, 15, 6), float32] */;
  (%298, %299, %var_5437, %300)
}

def @func_5785(%var_5784: Tensor[(108), float64]) -> (Tensor[(6, 1, 6), int64], Tensor[(6, 3, 6), bool], Tensor[(108), float64]) {
  %307 = fn (%var_5781: Tensor[(108), float64]) -> (Tensor[(6, 1, 6), int64], Tensor[(6, 3, 6), bool], Tensor[(108), float64]) {
    %301 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
    %302 = cast(%var_5781, dtype="float64") /* ty=Tensor[(108), float64] */;
    %303 = reshape(%302, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), float64] */;
    %304 = @func_1472(%303) /* ty=(Tensor[(6, 3, 6), bool], Tensor[(6, 1, 6), float32], Tensor[(6, 9, 6), float32]) */;
    %305 = %301.2;
    %306 = %304.0;
    (%305, %306, %var_5781)
  };
  %307(%var_5784) /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 3, 6), bool], Tensor[(108), float64]) */
}

def @func_1365() -> Tensor[(6, ?, 6), float32] {
  @func_1363() /* ty=Tensor[(6, ?, 6), float32] */
}

def @func_409() -> (Tensor[(6, ?, 6), bool],) {
  @func_407() /* ty=(Tensor[(6, ?, 6), bool],) */
}

def @func_3717() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) {
  @func_3715() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) */
}

def @func_2290() -> (Tensor[(6, 1, 6), float32], Tensor[(6, ?, 6), uint64], Tensor[(260), uint8], Tensor[(36, 10), float64]) {
  @func_2288() /* ty=(Tensor[(6, 1, 6), float32], Tensor[(6, ?, 6), uint64], Tensor[(260), uint8], Tensor[(36, 10), float64]) */
}

def @func_3897(%var_3894: Tensor[(6, 12, 6), bool], %var_3895: Tensor[(224), float64], %var_3896: Tensor[(108), float64]) -> (Tensor[(6, 12, 6), bool], Tensor[(6, ?, 6), float64], Tensor[(14, 8, 2), bool], Tensor[(224), float64], Tensor[(108), float64]) {
  @func_3892(%var_3894, %var_3895, %var_3896) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(6, ?, 6), float64], Tensor[(14, 8, 2), bool], Tensor[(224), float64], Tensor[(108), float64]) */
}

def @func_3264() -> Tensor[(6, ?, 6), float32] {
  %308 = fn () -> Tensor[(6, ?, 6), float32] {
    @func_2832() /* ty=Tensor[(6, ?, 6), float32] */
  };
  %308() /* ty=Tensor[(6, ?, 6), float32] */
}

def @func_4521(%var_4520: Tensor[(6, 4, 6), float32]) -> (Tensor[(6, 4, 6), bool],) {
  %313 = fn (%var_4509: Tensor[(6, 4, 6), float32]) -> (Tensor[(6, 4, 6), bool],) {
    %309 = @func_3634() /* ty=Tensor[(6, 1, 6), float32] */;
    %310 = cast(%309, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
    %311 = cast(%var_4509, dtype="bool") /* ty=Tensor[(6, 4, 6), bool] */;
    %312 = logical_or(%310, %311) /* ty=Tensor[(6, 4, 6), bool] */;
    (%312,)
  };
  %313(%var_4520) /* ty=(Tensor[(6, 4, 6), bool],) */
}

def @func_5556() -> (Tensor[(6, 5, 6), uint16],) {
  %319 = fn () -> (Tensor[(6, 5, 6), uint16],) {
    %314 = @func_2356() /* ty=(Tensor[(6, ?, 6), float64], Tensor[(6, ?, 6), float64]) */;
    %315 = %314.0;
    %316 = cast(%315, dtype="uint16") /* ty=Tensor[(6, ?, 6), uint16] */;
    %317 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 5, 6), float64] */, dtype="uint16") /* ty=Tensor[(6, 5, 6), uint16] */;
    %318 = bitwise_and(%316, %317) /* ty=Tensor[(6, 5, 6), uint16] */;
    (%318,)
  };
  %319() /* ty=(Tensor[(6, 5, 6), uint16],) */
}

def @func_1246() -> (Tensor[(6, 1, 6), float64],) {
  %321 = fn () -> (Tensor[(6, 1, 6), float64],) {
    %320 = @func_285() /* ty=Tensor[(6, 1, 6), float64] */;
    (%320,)
  };
  %321() /* ty=(Tensor[(6, 1, 6), float64],) */
}

def @func_256() -> Tensor[(6, 1, 6), int64] {
  %323 = fn () -> Tensor[(6, 1, 6), int64] {
    %322 = @func_167() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) */;
    %322.0
  };
  %323() /* ty=Tensor[(6, 1, 6), int64] */
}

def @func_1964() -> (Tensor[(6, ?, 6), float32],) {
  %324 = @func_1363() /* ty=Tensor[(6, ?, 6), float32] */;
  (%324,)
}

def @func_1198() -> (Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) {
  %329 = fn () -> (Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) {
    %325 = @func_407() /* ty=(Tensor[(6, ?, 6), bool],) */;
    %326 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
    %327 = %325.0;
    %328 = %326.1;
    (%327, %328)
  };
  %329() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */
}

def @func_926() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) {
  %330 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
  %331 = @func_561() /* ty=(Tensor[(6, 9, 6), float32],) */;
  %332 = %330.0;
  %333 = %331.0;
  (%332, %333)
}

def @func_2833() -> Tensor[(6, ?, 6), float32] {
  %335 = fn () -> Tensor[(6, ?, 6), float32] {
    %334 = @func_1889() /* ty=(Tensor[(6, ?, 6), float32],) */;
    %334.0
  };
  %335() /* ty=Tensor[(6, ?, 6), float32] */
}

def @func_1563(%var_1561: Tensor[(15, 10, 12), float32], %var_1562: Tensor[(294), uint32]) -> (Tensor[(15, 10, 12), float32], Tensor[(3, 14, 7), bool], Tensor[(294), uint32], Tensor[(6, ?, 6), bool]) {
  @func_1559(%var_1561, %var_1562) /* ty=(Tensor[(15, 10, 12), float32], Tensor[(3, 14, 7), bool], Tensor[(294), uint32], Tensor[(6, ?, 6), bool]) */
}

def @func_4960() -> (Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), bool]) {
  %340 = fn () -> (Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), bool]) {
    %336 = @func_1964() /* ty=(Tensor[(6, ?, 6), float32],) */;
    %337 = @func_2629() /* ty=(Tensor[(6, ?, 6), bool],) */;
    %338 = %336.0;
    %339 = %337.0;
    (%338, %339)
  };
  %340() /* ty=(Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), bool]) */
}

def @func_5762() -> (Tensor[(15, 16, ?), bool], Tensor[(15, 16, ?), float32]) {
  %341 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 16, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 1), float64] */;
  %342 = sin(%341) /* ty=Tensor[(15, 16, 1), float64] */;
  %343 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 16, 1), float64] */, dtype="bool") /* ty=Tensor[(15, 16, 1), bool] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%342, dtype="bool") /* ty=Tensor[(15, 16, 1), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %347 = less(%345, %346) /* ty=Tensor[(15, 16, ?), bool] */;
  %348 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 16, 1), float64] */, dtype="bool") /* ty=Tensor[(15, 16, 1), bool] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="bool") /* ty=Tensor[(15, 16, ?), bool] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %352 = cast(%347, dtype="float32") /* ty=Tensor[(15, 16, ?), float32] */;
  %353 = logical_and(%350, %351) /* ty=Tensor[(15, 16, ?), bool] */;
  %354 = erf(%352) /* ty=Tensor[(15, 16, ?), float32] */;
  (%353, %354)
}

def @func_1666(%var_1664: Tensor[(360), int64], %var_1665: Tensor[(260), uint8]) -> (Tensor[(6, ?, 6), uint64], Tensor[(6, 9, 6), float32], Tensor[(360), int64], Tensor[(260), uint8]) {
  @func_1662(%var_1664, %var_1665) /* ty=(Tensor[(6, ?, 6), uint64], Tensor[(6, 9, 6), float32], Tensor[(360), int64], Tensor[(260), uint8]) */
}

def @func_4146(%var_4144: uint32, %var_4145: Tensor[(10, 6, 5), uint32]) -> Tensor[(10, 6, 5), bool] {
  @func_4142(%var_4144, %var_4145) /* ty=Tensor[(10, 6, 5), bool] */
}

def @func_1836() -> Tensor[(6, 1, 6), float64] {
  @func_1834() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_3635() -> Tensor[(6, 1, 6), float32] {
  %356 = fn () -> Tensor[(6, 1, 6), float32] {
    %355 = @func_3089() /* ty=(Tensor[(7, 10, 12), float64], Tensor[(6, 1, 6), float32]) */;
    %355.1
  };
  %356() /* ty=Tensor[(6, 1, 6), float32] */
}

def @func_5403() -> Tensor[(6, 9, 6), float32] {
  %358 = fn () -> Tensor[(6, 9, 6), float32] {
    %357 = @func_561() /* ty=(Tensor[(6, 9, 6), float32],) */;
    %357.0
  };
  %358() /* ty=Tensor[(6, 9, 6), float32] */
}

def @main(%var_6360: Tensor[(10, 1, 2), float32]) -> Tensor[(10, ?, 2), float32] {
  %359 = cast(%var_6360, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %360 = asin(%359) /* ty=Tensor[(10, 1, 2), float32] */;
  %361 = cast(%360, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %362 = log(%361) /* ty=Tensor[(10, 1, 2), float64] */;
  %363 = cast(%var_6360, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%362, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%365, %366) /* ty=Tensor[(10, ?, 2), float32] */
}

def @func_3736() -> (Tensor[(6, 1, 6), int64], Tensor[(5, 5, 10), uint64], Tensor[(5, 5), uint64], Tensor[(25, 10), uint64]) {
  %374 = fn () -> (Tensor[(6, 1, 6), int64], Tensor[(5, 5, 10), uint64], Tensor[(5, 5), uint64], Tensor[(25, 10), uint64]) {
    %367 = @func_3579() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) */;
    %368 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 5), uint64] */, dtype="uint64") /* ty=Tensor[(5, 5), uint64] */;
    %369 = cast(meta[relay.Constant][20] /* ty=Tensor[(25, 10), uint64] */, dtype="uint64") /* ty=Tensor[(25, 10), uint64] */;
    %370 = reshape(%368, newshape=[5, 5, 1]) /* ty=Tensor[(5, 5, 1), uint64] */;
    %371 = reshape(%369, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), uint64] */;
    %372 = %367.0;
    %373 = @func_3218(%370, %371) /* ty=Tensor[(5, 5, 10), uint64] */;
    (%372, %373, meta[relay.Constant][19] /* ty=Tensor[(5, 5), uint64] */, meta[relay.Constant][20] /* ty=Tensor[(25, 10), uint64] */)
  };
  %374() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(5, 5, 10), uint64], Tensor[(5, 5), uint64], Tensor[(25, 10), uint64]) */
}

def @func_4786() -> Tensor[(6, 1, 6), float64] {
  %375 = @func_4477() /* ty=(Tensor[(5, 5, 10), uint64], Tensor[(6, 1, 6), float64]) */;
  %375.1
}

def @func_3538() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) {
  @func_3536() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) */
}

def @func_2481(%var_2472: float64, %var_2473: Tensor[(6, 9, 15), float64]) -> (Tensor[(6, 9, 15), float64],) {
  %376 = cast(%var_2472, dtype="float64") /* ty=float64 */;
  %377 = cast(%var_2473, dtype="float64") /* ty=Tensor[(6, 9, 15), float64] */;
  %378 = minimum(%376, %377) /* ty=Tensor[(6, 9, 15), float64] */;
  (%378,)
}

def @func_2794(%var_2792: Tensor[(6, 4, 6), float32]) -> (Tensor[(6, 4, 6), bool], Tensor[(6, ?, 6), bool]) {
  @func_2791(%var_2792) /* ty=(Tensor[(6, 4, 6), bool], Tensor[(6, ?, 6), bool]) */
}

def @func_6049() -> (Tensor[(6, 1, 6), float64],) {
  %381 = fn () -> (Tensor[(6, 1, 6), float64],) {
    %379 = @func_3715() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) */;
    %380 = %379.1;
    (%380,)
  };
  %381() /* ty=(Tensor[(6, 1, 6), float64],) */
}

def @func_4282() -> Tensor[(6, ?, 6), bool] {
  @func_506() /* ty=Tensor[(6, ?, 6), bool] */
}

def @func_5056() -> Tensor[(6, ?, 6), int16] {
  @func_3775() /* ty=Tensor[(6, ?, 6), int16] */
}

def @func_4651(%var_4650: Tensor[(3, 10, 8), float64]) -> (Tensor[(3, 10, 8), float64],) {
  %384 = fn (%var_4627: Tensor[(3, 10, 8), float64]) -> (Tensor[(3, 10, 8), float64],) {
    %382 = cast(%var_4627, dtype="float64") /* ty=Tensor[(3, 10, 8), float64] */;
    %383 = sqrt(%382) /* ty=Tensor[(3, 10, 8), float64] */;
    (%383,)
  };
  %384(%var_4650) /* ty=(Tensor[(3, 10, 8), float64],) */
}

def @func_3110() -> (Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float32]) {
  %389 = fn () -> (Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float32]) {
    %385 = @func_1633() /* ty=(Tensor[(6, 9, 6), float32],) */;
    %386 = @func_926() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) */;
    %387 = %385.0;
    %388 = %386.1;
    (%387, %388)
  };
  %389() /* ty=(Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float32]) */
}

def @func_3453(%var_3451: Tensor[(14, 8, 2), float64], %var_3452: Tensor[(108), float64]) -> (Tensor[(14, 8, 2), bool], Tensor[(6, 1, 6), float32], Tensor[(108), float64]) {
  @func_3449(%var_3451, %var_3452) /* ty=(Tensor[(14, 8, 2), bool], Tensor[(6, 1, 6), float32], Tensor[(108), float64]) */
}

def @func_6312(%var_6310: Tensor[(9, 36), float64]) -> (Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64], Tensor[(9, 36), float64]) {
  @func_6309(%var_6310) /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64], Tensor[(9, 36), float64]) */
}

def @func_95() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) {
  @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */
}

def @func_3501(%var_3500: Tensor[(65, 4), uint8]) -> (Tensor[(6, 1, 6), int64], Tensor[(260), uint8], Tensor[(65, 4), float64]) {
  %398 = fn (%var_3463: Tensor[(65, 4), uint8]) -> (Tensor[(6, 1, 6), int64], Tensor[(260), uint8], Tensor[(65, 4), float64]) {
    %390 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
    %391 = cast(%var_3463, dtype="uint8") /* ty=Tensor[(65, 4), uint8] */;
    %392 = reshape(%391, newshape=[260]) /* ty=Tensor[(260), uint8] */;
    %393 = @func_1426(%392) /* ty=(Tensor[(6, 9, 6), float64], Tensor[(6, ?, 6), bool], Tensor[(4, 5, 13), uint8], Tensor[(260), uint8], Tensor[(6, 9, 6), float32]) */;
    %394 = cast(%var_3463, dtype="float64") /* ty=Tensor[(65, 4), float64] */;
    %395 = %390.2;
    %396 = %393.3;
    %397 = cos(%394) /* ty=Tensor[(65, 4), float64] */;
    (%395, %396, %397)
  };
  %398(%var_3500) /* ty=(Tensor[(6, 1, 6), int64], Tensor[(260), uint8], Tensor[(65, 4), float64]) */
}

def @func_5623(%var_5621: Tensor[(2, 1, 15), float32], %var_5622: Tensor[(2, 12, 15), float32]) -> (Tensor[(2, 12, 15), bool], Tensor[(2, 12, 15), bool]) {
  %412 = fn (%var_5596: Tensor[(2, 1, 15), float32], %var_5604: Tensor[(2, 12, 15), float32]) -> (Tensor[(2, 12, 15), bool], Tensor[(2, 12, 15), bool]) {
    %399 = cast(%var_5604, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
    %400 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(2, 12, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %401 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 12, 15), float32] */, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
    %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %403 = cast(%var_5596, dtype="float32") /* ty=Tensor[(2, 1, 15), float32] */;
    %404 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(2, 12, 15), float32] */;
    %405 = mod(%403, %404) /* ty=Tensor[(2, 12, 15), float32] */;
    %406 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 12, 15), float32] */, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
    %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
    %408 = cast(%405, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %410 = not_equal(%401, %402) /* ty=Tensor[(2, 12, 15), bool] */;
    %411 = less_equal(%408, %409) /* ty=Tensor[(2, 12, 15), bool] */;
    (%410, %411)
  };
  %412(%var_5621, %var_5622) /* ty=(Tensor[(2, 12, 15), bool], Tensor[(2, 12, 15), bool]) */
}

def @func_942(%var_940: Tensor[(3, 14, 7), uint32]) -> (Tensor[(3, 14, 7), bool], Tensor[(6, ?, 6), bool]) {
  @func_939(%var_940) /* ty=(Tensor[(3, 14, 7), bool], Tensor[(6, ?, 6), bool]) */
}

def @func_6214(%var_6213: Tensor[(6, 13, 6), int16]) -> (Tensor[(6, 13, 6), bool], Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64]) {
  %423 = fn (%var_6175: Tensor[(6, 13, 6), int16]) -> (Tensor[(6, 13, 6), bool], Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64]) {
    %413 = @func_4691() /* ty=Tensor[(6, ?, 6), int16] */;
    %414 = cast(%413, dtype="bool") /* ty=Tensor[(6, ?, 6), bool] */;
    %415 = cast(%var_6175, dtype="bool") /* ty=Tensor[(6, 13, 6), bool] */;
    %416 = cast(%413, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
    %417 = reshape(%416, newshape=[6, 1, 6]) /* ty=Tensor[(6, 1, 6), float64] */;
    %418 = @func_1145(%417) /* ty=(Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), bool]) */;
    %419 = @func_1245() /* ty=(Tensor[(6, 1, 6), float64],) */;
    %420 = equal(%414, %415) /* ty=Tensor[(6, 13, 6), bool] */;
    %421 = %418.1;
    %422 = %419.0;
    (%420, %421, %422)
  };
  %423(%var_6213) /* ty=(Tensor[(6, 13, 6), bool], Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64]) */
}

def @func_3056(%var_3054: Tensor[(36, 10), float64], %var_3055: Tensor[(260), uint8]) -> (Tensor[(6, ?, 6), bool], Tensor[(36, 10), bool], Tensor[(4, 5, 13), uint32], Tensor[(260), uint8]) {
  %436 = fn (%var_3037: Tensor[(36, 10), float64], %var_3049: Tensor[(260), uint8]) -> (Tensor[(6, ?, 6), bool], Tensor[(36, 10), bool], Tensor[(4, 5, 13), uint32], Tensor[(260), uint8]) {
    %424 = @func_2288() /* ty=(Tensor[(6, 1, 6), float32], Tensor[(6, ?, 6), uint64], Tensor[(260), uint8], Tensor[(36, 10), float64]) */;
    %425 = %424.3;
    %426 = cast(%var_3037, dtype="bool") /* ty=Tensor[(36, 10), bool] */;
    %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(2), int32] */;
    %428 = cast(%425, dtype="bool") /* ty=Tensor[(36, 10), bool] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %430 = cast(%var_3049, dtype="uint8") /* ty=Tensor[(260), uint8] */;
    %431 = reshape(%430, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), uint8] */;
    %432 = @func_326(%431) /* ty=(Tensor[(4, 5, 13), uint8], Tensor[(4, 5, 13), uint32], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) */;
    %433 = @func_1745() /* ty=Tensor[(6, ?, 6), bool] */;
    %434 = equal(%428, %429) /* ty=Tensor[(36, 10), bool] */;
    %435 = %432.1;
    (%433, %434, %435, %var_3049)
  };
  %436(%var_3054, %var_3055) /* ty=(Tensor[(6, ?, 6), bool], Tensor[(36, 10), bool], Tensor[(4, 5, 13), uint32], Tensor[(260), uint8]) */
}

def @func_2168(%var_2166: Tensor[(16, 3, 14), uint16]) -> (Tensor[(16, 3, 14), float32], Tensor[(3, 14, 7), bool], Tensor[(1800), float32], Tensor[(294, 1), uint32]) {
  @func_2165(%var_2166) /* ty=(Tensor[(16, 3, 14), float32], Tensor[(3, 14, 7), bool], Tensor[(1800), float32], Tensor[(294, 1), uint32]) */
}

def @func_4923() -> (Tensor[(6, ?, 6), bool],) {
  %437 = @func_1197() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */;
  %438 = %437.0;
  (%438,)
}

def @func_4284() -> Tensor[(6, ?, 6), bool] {
  @func_4282() /* ty=Tensor[(6, ?, 6), bool] */
}

def @func_3449(%var_3430: Tensor[(14, 8, 2), float64], %var_3444: Tensor[(108), float64]) -> (Tensor[(14, 8, 2), bool], Tensor[(6, 1, 6), float32], Tensor[(108), float64]) {
  %439 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 8, 2), float64] */, dtype="bool") /* ty=Tensor[(14, 8, 2), bool] */;
  %440 = shape_of(%var_3430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_3430, dtype="bool") /* ty=Tensor[(14, 8, 2), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %443 = cast(%var_3444, dtype="float64") /* ty=Tensor[(108), float64] */;
  %444 = reshape(%443, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), float64] */;
  %445 = @func_1472(%444) /* ty=(Tensor[(6, 3, 6), bool], Tensor[(6, 1, 6), float32], Tensor[(6, 9, 6), float32]) */;
  %446 = equal(%441, %442) /* ty=Tensor[(14, 8, 2), bool] */;
  %447 = %445.1;
  (%446, %447, %var_3444)
}

def @func_4007(%var_4006: Tensor[(6, 7, 6), float32]) -> (Tensor[(6, 7, 6), uint16],) {
  %453 = fn (%var_3981: Tensor[(6, 7, 6), float32]) -> (Tensor[(6, 7, 6), uint16],) {
    %448 = @func_1911() /* ty=(Tensor[(6, ?, 6), float32],) */;
    %449 = %448.0;
    %450 = cast(%449, dtype="uint16") /* ty=Tensor[(6, ?, 6), uint16] */;
    %451 = cast(%var_3981, dtype="uint16") /* ty=Tensor[(6, 7, 6), uint16] */;
    %452 = logical_xor(%450, %451) /* ty=Tensor[(6, 7, 6), uint16] */;
    (%452,)
  };
  %453(%var_4006) /* ty=(Tensor[(6, 7, 6), uint16],) */
}

def @func_5280() -> (Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), int16], Tensor[(5, 7, 13), float32]) {
  %461 = fn () -> (Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), int16], Tensor[(5, 7, 13), float32]) {
    %454 = @func_1947() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), float32]) */;
    %455 = @func_3819() /* ty=(Tensor[(5, 7, 13), float32],) */;
    %456 = %455.0;
    %457 = cast(%456, dtype="float32") /* ty=Tensor[(5, 7, 13), float32] */;
    %458 = %454.1;
    %459 = @func_3277() /* ty=Tensor[(6, ?, 6), int16] */;
    %460 = acos(%457) /* ty=Tensor[(5, 7, 13), float32] */;
    (%458, %459, %460)
  };
  %461() /* ty=(Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), int16], Tensor[(5, 7, 13), float32]) */
}

def @func_6323(%var_6318: Tensor[(6, 4, 6), bool]) -> (Tensor[(6, 4, 6), float64],) {
  %462 = @func_4282() /* ty=Tensor[(6, ?, 6), bool] */;
  %463 = cast(%462, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %464 = cast(%var_6318, dtype="float64") /* ty=Tensor[(6, 4, 6), float64] */;
  %465 = divide(%463, %464) /* ty=Tensor[(6, 4, 6), float64] */;
  (%465,)
}

def @func_611() -> (Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64]) {
  %472 = fn () -> (Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64]) {
    %466 = @func_407() /* ty=(Tensor[(6, ?, 6), bool],) */;
    %467 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
    %468 = %467.1;
    %469 = cast(%468, dtype="float64") /* ty=Tensor[(6, 1, 6), float64] */;
    %470 = %466.0;
    %471 = erf(%469) /* ty=Tensor[(6, 1, 6), float64] */;
    (%470, %471)
  };
  %472() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64]) */
}

def @func_1235() -> (Tensor[(6, ?, 6), bool],) {
  %475 = fn () -> (Tensor[(6, ?, 6), bool],) {
    %473 = @func_610() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64]) */;
    %474 = %473.0;
    (%474,)
  };
  %475() /* ty=(Tensor[(6, ?, 6), bool],) */
}

def @func_3892(%var_3853: Tensor[(6, 12, 6), bool], %var_3881: Tensor[(224), float64], %var_3882: Tensor[(108), float64]) -> (Tensor[(6, 12, 6), bool], Tensor[(6, ?, 6), float64], Tensor[(14, 8, 2), bool], Tensor[(224), float64], Tensor[(108), float64]) {
  %476 = @func_1745() /* ty=Tensor[(6, ?, 6), bool] */;
  %477 = cast(%476, dtype="bool") /* ty=Tensor[(6, ?, 6), bool] */;
  %478 = cast(%var_3853, dtype="bool") /* ty=Tensor[(6, 12, 6), bool] */;
  %479 = cast(%476, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %480 = cast(%var_3881, dtype="float64") /* ty=Tensor[(224), float64] */;
  %481 = cast(%var_3882, dtype="float64") /* ty=Tensor[(108), float64] */;
  %482 = reshape(%480, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float64] */;
  %483 = reshape(%481, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %484 = @func_3449(%482, %483) /* ty=(Tensor[(14, 8, 2), bool], Tensor[(6, 1, 6), float32], Tensor[(108), float64]) */;
  %485 = not_equal(%477, %478) /* ty=Tensor[(6, 12, 6), bool] */;
  %486 = sqrt(%479) /* ty=Tensor[(6, ?, 6), float64] */;
  %487 = %484.0;
  (%485, %486, %487, %var_3881, %var_3882)
}

def @func_2425() -> Tensor[(6, ?, 6), bool] {
  @func_2423() /* ty=Tensor[(6, ?, 6), bool] */
}

def @func_939(%var_930: Tensor[(3, 14, 7), uint32]) -> (Tensor[(3, 14, 7), bool], Tensor[(6, ?, 6), bool]) {
  %488 = cast(%var_930, dtype="bool") /* ty=Tensor[(3, 14, 7), bool] */;
  %489 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(3, 14, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 14, 7), uint32] */, dtype="bool") /* ty=Tensor[(3, 14, 7), bool] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %492 = greater(%490, %491) /* ty=Tensor[(3, 14, 7), bool] */;
  %493 = @func_506() /* ty=Tensor[(6, ?, 6), bool] */;
  (%492, %493)
}

def @func_168() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) {
  %498 = fn () -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) {
    %494 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
    %495 = @func_93() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) */;
    %496 = %494.0;
    %497 = %495.0;
    (%496, %497)
  };
  %498() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) */
}

def @func_748() -> (Tensor[(6, 8, 6), bool],) {
  %504 = fn () -> (Tensor[(6, 8, 6), bool],) {
    %499 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
    %500 = %499.0;
    %501 = cast(%500, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
    %502 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 8, 6), int64] */, dtype="bool") /* ty=Tensor[(6, 8, 6), bool] */;
    %503 = equal(%501, %502) /* ty=Tensor[(6, 8, 6), bool] */;
    (%503,)
  };
  %504() /* ty=(Tensor[(6, 8, 6), bool],) */
}

def @func_1429(%var_1427: Tensor[(260), uint8]) -> (Tensor[(6, 9, 6), float64], Tensor[(6, ?, 6), bool], Tensor[(4, 5, 13), uint8], Tensor[(260), uint8], Tensor[(6, 9, 6), float32]) {
  @func_1426(%var_1427) /* ty=(Tensor[(6, 9, 6), float64], Tensor[(6, ?, 6), bool], Tensor[(4, 5, 13), uint8], Tensor[(260), uint8], Tensor[(6, 9, 6), float32]) */
}

def @func_2791(%var_2777: Tensor[(6, 4, 6), float32]) -> (Tensor[(6, 4, 6), bool], Tensor[(6, ?, 6), bool]) {
  %505 = @func_1947() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), float32]) */;
  %506 = %505.2;
  %507 = cast(%506, dtype="bool") /* ty=Tensor[(6, ?, 6), bool] */;
  %508 = cast(%var_2777, dtype="bool") /* ty=Tensor[(6, 4, 6), bool] */;
  %509 = @func_1584() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %510 = less(%507, %508) /* ty=Tensor[(6, 4, 6), bool] */;
  %511 = %509.0;
  (%510, %511)
}

def @func_1662(%var_1652: Tensor[(360), int64], %var_1653: Tensor[(260), uint8]) -> (Tensor[(6, ?, 6), uint64], Tensor[(6, 9, 6), float32], Tensor[(360), int64], Tensor[(260), uint8]) {
  %512 = @func_685() /* ty=(Tensor[(6, ?, 6), uint64], Tensor[(6, 1, 6), float64], Tensor[(6, ?, 6), bool]) */;
  %513 = cast(%var_1652, dtype="int64") /* ty=Tensor[(360), int64] */;
  %514 = cast(%var_1653, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %515 = reshape(%513, newshape=[6, 10, 6]) /* ty=Tensor[(6, 10, 6), int64] */;
  %516 = reshape(%514, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %517 = @func_1104(%515, %516) /* ty=(Tensor[(6, 9, 6), float32], Tensor[(6, 10, 6), uint16], Tensor[(6, 10, 6), float32], Tensor[(6, 1, 6), int64], Tensor[(260), uint8]) */;
  %518 = %512.0;
  %519 = %517.0;
  (%518, %519, %var_1652, %var_1653)
}

def @func_5677() -> (Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), int16], Tensor[(6, 2, 6), int32]) {
  %520 = @func_4819() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %521 = @func_3079() /* ty=(Tensor[(6, 2, 6), int32], Tensor[(6, 2, 6), float64]) */;
  %522 = %520.0;
  %523 = @func_3263() /* ty=Tensor[(6, ?, 6), float32] */;
  %524 = @func_3277() /* ty=Tensor[(6, ?, 6), int16] */;
  %525 = %521.0;
  (%522, %523, %524, %525)
}

def @func_4669() -> (Tensor[(6, 1, 6), float64],) {
  %528 = fn () -> (Tensor[(6, 1, 6), float64],) {
    %526 = @func_1728() /* ty=(Tensor[(6, 1, 6), float64],) */;
    %527 = %526.0;
    (%527,)
  };
  %528() /* ty=(Tensor[(6, 1, 6), float64],) */
}

def @func_5292() -> (Tensor[(6, ?, 6), float32],) {
  @func_5290() /* ty=(Tensor[(6, ?, 6), float32],) */
}

def @func_2691(%var_2690: Tensor[(4, 1, 15), float32]) -> (Tensor[(4, 1, 15), float32],) {
  %531 = fn (%var_2674: Tensor[(4, 1, 15), float32]) -> (Tensor[(4, 1, 15), float32],) {
    %529 = cast(%var_2674, dtype="float32") /* ty=Tensor[(4, 1, 15), float32] */;
    %530 = log10(%529) /* ty=Tensor[(4, 1, 15), float32] */;
    (%530,)
  };
  %531(%var_2690) /* ty=(Tensor[(4, 1, 15), float32],) */
}

def @func_2996() -> (Tensor[(6, ?, 6), int16],) {
  @func_2994() /* ty=(Tensor[(6, ?, 6), int16],) */
}

def @func_4820() -> (Tensor[(6, ?, 6), float32],) {
  %533 = fn () -> (Tensor[(6, ?, 6), float32],) {
    %532 = @func_3263() /* ty=Tensor[(6, ?, 6), float32] */;
    (%532,)
  };
  %533() /* ty=(Tensor[(6, ?, 6), float32],) */
}

def @func_1363() -> Tensor[(6, ?, 6), float32] {
  %534 = @func_610() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float64]) */;
  %535 = %534.0;
  %536 = cast(%535, dtype="float32") /* ty=Tensor[(6, ?, 6), float32] */;
  asin(%536) /* ty=Tensor[(6, ?, 6), float32] */
}

def @func_4691() -> Tensor[(6, ?, 6), int16] {
  %537 = @func_2994() /* ty=(Tensor[(6, ?, 6), int16],) */;
  %537.0
}

def @func_3207(%var_3205: Tensor[(6, 2, 6), float32]) -> (Tensor[(6, 2, 6), int32],) {
  @func_3204(%var_3205) /* ty=(Tensor[(6, 2, 6), int32],) */
}

def @func_121() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) {
  @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */
}

def @func_3204(%var_3183: Tensor[(6, 2, 6), float32]) -> (Tensor[(6, 2, 6), int32],) {
  %538 = @func_3079() /* ty=(Tensor[(6, 2, 6), int32], Tensor[(6, 2, 6), float64]) */;
  %539 = %538.0;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %541 = sqrt(%540) /* ty=Tensor[(6, 2, 6), float64] */;
  %542 = cast(%541, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %543 = rsqrt(%542) /* ty=Tensor[(6, 2, 6), float64] */;
  %544 = cast(%543, dtype="float32") /* ty=Tensor[(6, 2, 6), float32] */;
  %545 = tan(%544) /* ty=Tensor[(6, 2, 6), float32] */;
  %546 = cast(%var_3183, dtype="int8") /* ty=Tensor[(6, 2, 6), int8] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="int8") /* ty=Tensor[(6, 2, 6), int8] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %550 = minimum(%548, %549) /* ty=Tensor[(6, 2, 6), int8] */;
  %551 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 2, 6), int8] */, dtype="int32") /* ty=Tensor[(6, 2, 6), int32] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%550, dtype="int32") /* ty=Tensor[(6, 2, 6), int32] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %555 = multiply(%553, %554) /* ty=Tensor[(6, 2, 6), int32] */;
  (%555,)
}

def @func_328(%var_327: Tensor[(4, 5, 13), uint8]) -> (Tensor[(4, 5, 13), uint8], Tensor[(4, 5, 13), uint32], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) {
  %569 = fn (%var_296: Tensor[(4, 5, 13), uint8]) -> (Tensor[(4, 5, 13), uint8], Tensor[(4, 5, 13), uint32], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) {
    %556 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 5, 13), uint8] */, dtype="uint8") /* ty=Tensor[(4, 5, 13), uint8] */;
    %557 = shape_of(%var_296, dtype="int32") /* ty=Tensor[(3), int32] */;
    %558 = cast(%var_296, dtype="uint8") /* ty=Tensor[(4, 5, 13), uint8] */;
    %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %560 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 5, 13), uint8] */, dtype="uint32") /* ty=Tensor[(4, 5, 13), uint32] */;
    %561 = shape_of(%var_296, dtype="int32") /* ty=Tensor[(3), int32] */;
    %562 = cast(%var_296, dtype="uint32") /* ty=Tensor[(4, 5, 13), uint32] */;
    %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %564 = @func_167() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), int64]) */;
    %565 = bitwise_or(%558, %559) /* ty=Tensor[(4, 5, 13), uint8] */;
    %566 = add(%562, %563) /* ty=Tensor[(4, 5, 13), uint32] */;
    %567 = %564.1;
    %568 = @func_285() /* ty=Tensor[(6, 1, 6), float64] */;
    (%565, %566, %567, %568)
  };
  %569(%var_327) /* ty=(Tensor[(4, 5, 13), uint8], Tensor[(4, 5, 13), uint32], Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64]) */
}

def @func_3221(%var_3219: Tensor[(5, 5, 1), uint64], %var_3220: Tensor[(5, 5, 10), uint64]) -> Tensor[(5, 5, 10), uint64] {
  %572 = fn (%var_3212: Tensor[(5, 5, 1), uint64], %var_3213: Tensor[(5, 5, 10), uint64]) -> Tensor[(5, 5, 10), uint64] {
    %570 = cast(%var_3212, dtype="uint64") /* ty=Tensor[(5, 5, 1), uint64] */;
    %571 = cast(%var_3213, dtype="uint64") /* ty=Tensor[(5, 5, 10), uint64] */;
    bitwise_and(%570, %571) /* ty=Tensor[(5, 5, 10), uint64] */
  };
  %572(%var_3219, %var_3220) /* ty=Tensor[(5, 5, 10), uint64] */
}

def @func_3580() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) {
  %577 = fn () -> (Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) {
    %573 = @func_119() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float64], Tensor[(6, 1, 6), int64]) */;
    %574 = @func_1633() /* ty=(Tensor[(6, 9, 6), float32],) */;
    %575 = %573.2;
    %576 = %574.0;
    (%575, %576)
  };
  %577() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32]) */
}

def @func_93() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 1, 6), float32]) {
  %578 = cast(-3.81751f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %579 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 1, 6), float64] */;
  %580 = power(%578, %579) /* ty=Tensor[(6, 1, 6), float64] */;
  %581 = cast(-3.81751f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
  %582 = cast(%580, dtype="int64") /* ty=Tensor[(6, 1, 6), int64] */;
  %583 = cast(%580, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
  %584 = multiply(%581, %582) /* ty=Tensor[(6, 1, 6), int64] */;
  %585 = sigmoid(%583) /* ty=Tensor[(6, 1, 6), float32] */;
  (%584, %585)
}

def @func_2423() -> Tensor[(6, ?, 6), bool] {
  %586 = @func_1197() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */;
  %586.0
}

def @func_1206() -> Tensor[(6, 1, 6), int64] {
  @func_255() /* ty=Tensor[(6, 1, 6), int64] */
}

def @func_1559(%var_1538: Tensor[(15, 10, 12), float32], %var_1549: Tensor[(294), uint32]) -> (Tensor[(15, 10, 12), float32], Tensor[(3, 14, 7), bool], Tensor[(294), uint32], Tensor[(6, ?, 6), bool]) {
  %587 = cast(%var_1538, dtype="float32") /* ty=Tensor[(15, 10, 12), float32] */;
  %588 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(15, 10, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 10, 12), float32] */, dtype="float32") /* ty=Tensor[(15, 10, 12), float32] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %591 = cast(%var_1549, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %592 = reshape(%591, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), uint32] */;
  %593 = @func_939(%592) /* ty=(Tensor[(3, 14, 7), bool], Tensor[(6, ?, 6), bool]) */;
  %594 = @func_1197() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */;
  %595 = mod(%589, %590) /* ty=Tensor[(15, 10, 12), float32] */;
  %596 = %593.0;
  %597 = %594.0;
  (%595, %596, %var_1549, %597)
}

def @func_278() -> Tensor[(6, 1, 6), float64] {
  @func_276() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_1966() -> (Tensor[(6, ?, 6), float32],) {
  @func_1964() /* ty=(Tensor[(6, ?, 6), float32],) */
}

def @func_4788() -> Tensor[(6, 1, 6), float64] {
  @func_4786() /* ty=Tensor[(6, 1, 6), float64] */
}

def @func_2061(%var_2060: Tensor[(6, 9, 6), float64]) -> (Tensor[(6, ?, 6), int32], Tensor[(6, 9, 6), bool], Tensor[(6, 9, 6), float32]) {
  %617 = fn (%var_2042: Tensor[(6, 9, 6), float64]) -> (Tensor[(6, ?, 6), int32], Tensor[(6, 9, 6), bool], Tensor[(6, 9, 6), float32]) {
    %598 = @func_1964() /* ty=(Tensor[(6, ?, 6), float32],) */;
    %599 = %598.0;
    %600 = cast(%599, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
    %601 = exp(%600) /* ty=Tensor[(6, ?, 6), float64] */;
    %602 = cast(%599, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
    %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
    %604 = cast(%601, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
    %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %606 = floor_divide(%604, %605) /* ty=Tensor[(6, ?, 6), float64] */;
    %607 = cast(%599, dtype="int32") /* ty=Tensor[(6, ?, 6), int32] */;
    %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
    %609 = cast(%606, dtype="int32") /* ty=Tensor[(6, ?, 6), int32] */;
    %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %611 = cast(%606, dtype="bool") /* ty=Tensor[(6, ?, 6), bool] */;
    %612 = cast(%var_2042, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
    %613 = cast(%var_2042, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
    %614 = add(%609, %610) /* ty=Tensor[(6, ?, 6), int32] */;
    %615 = less(%611, %612) /* ty=Tensor[(6, 9, 6), bool] */;
    %616 = asinh(%613) /* ty=Tensor[(6, 9, 6), float32] */;
    (%614, %615, %616)
  };
  %617(%var_2060) /* ty=(Tensor[(6, ?, 6), int32], Tensor[(6, 9, 6), bool], Tensor[(6, 9, 6), float32]) */
}

def @func_2994() -> (Tensor[(6, ?, 6), int16],) {
  %618 = @func_2594() /* ty=Tensor[(6, 1, 6), float64] */;
  %619 = @func_1889() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %620 = %619.0;
  %621 = cast(%620, dtype="int16") /* ty=Tensor[(6, ?, 6), int16] */;
  %622 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%618, dtype="int16") /* ty=Tensor[(6, 1, 6), int16] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %625 = right_shift(%623, %624) /* ty=Tensor[(6, ?, 6), int16] */;
  (%625,)
}

def @func_1948() -> (Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), float32]) {
  %630 = fn () -> (Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), float32]) {
    %626 = @func_242() /* ty=(Tensor[(6, 1, 6), int64],) */;
    %627 = %626.0;
    %628 = @func_953() /* ty=Tensor[(6, 9, 6), float32] */;
    %629 = @func_1363() /* ty=Tensor[(6, ?, 6), float32] */;
    (%627, %628, %629)
  };
  %630() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(6, 9, 6), float32], Tensor[(6, ?, 6), float32]) */
}

def @func_2656(%var_2640: Tensor[(4, 2, 1), uint32]) -> (Tensor[(4, 2, ?), bool],) {
  %631 = cast(meta[relay.Constant][30] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %632 = cast(%var_2640, dtype="bool") /* ty=Tensor[(4, 2, 1), bool] */;
  %633 = greater_equal(%631, %632) /* ty=Tensor[(4, 2, 1), bool] */;
  %634 = cast(%633, dtype="bool") /* ty=Tensor[(4, 2, 1), bool] */;
  %635 = shape_of(%var_2640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_2640, dtype="bool") /* ty=Tensor[(4, 2, 1), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = equal(%636, %637) /* ty=Tensor[(4, 2, ?), bool] */;
  (%638,)
}

def @func_2629() -> (Tensor[(6, ?, 6), bool],) {
  %639 = @func_707() /* ty=(Tensor[(6, ?, 6), bool],) */;
  %640 = %639.0;
  (%640,)
}

def @func_1913() -> (Tensor[(6, ?, 6), float32],) {
  @func_1911() /* ty=(Tensor[(6, ?, 6), float32],) */
}

def @func_1147(%var_1146: Tensor[(6, 1, 6), float64]) -> (Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), bool]) {
  %654 = fn (%var_1118: Tensor[(6, 1, 6), float64]) -> (Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), bool]) {
    %641 = @func_285() /* ty=Tensor[(6, 1, 6), float64] */;
    %642 = cast(%var_1118, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
    %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %644 = cast(%641, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %646 = cast(%641, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
    %647 = sin(%646) /* ty=Tensor[(6, 1, 6), float32] */;
    %648 = cast(%641, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
    %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
    %650 = cast(%647, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %652 = mod(%644, %645) /* ty=Tensor[(6, ?, 6), float32] */;
    %653 = less_equal(%650, %651) /* ty=Tensor[(6, ?, 6), bool] */;
    (%652, %653)
  };
  %654(%var_1146) /* ty=(Tensor[(6, ?, 6), float32], Tensor[(6, ?, 6), bool]) */
}

def @func_4478() -> (Tensor[(5, 5, 10), uint64], Tensor[(6, 1, 6), float64]) {
  %658 = fn () -> (Tensor[(5, 5, 10), uint64], Tensor[(6, 1, 6), float64]) {
    %655 = @func_3735() /* ty=(Tensor[(6, 1, 6), int64], Tensor[(5, 5, 10), uint64], Tensor[(5, 5), uint64], Tensor[(25, 10), uint64]) */;
    %656 = %655.1;
    %657 = @func_2594() /* ty=Tensor[(6, 1, 6), float64] */;
    (%656, %657)
  };
  %658() /* ty=(Tensor[(5, 5, 10), uint64], Tensor[(6, 1, 6), float64]) */
}

def @func_687() -> (Tensor[(6, ?, 6), uint64], Tensor[(6, 1, 6), float64], Tensor[(6, ?, 6), bool]) {
  @func_685() /* ty=(Tensor[(6, ?, 6), uint64], Tensor[(6, 1, 6), float64], Tensor[(6, ?, 6), bool]) */
}

def @func_1890() -> (Tensor[(6, ?, 6), float32],) {
  %660 = fn () -> (Tensor[(6, ?, 6), float32],) {
    %659 = @func_1363() /* ty=Tensor[(6, ?, 6), float32] */;
    (%659,)
  };
  %660() /* ty=(Tensor[(6, ?, 6), float32],) */
}

def @func_2288() -> (Tensor[(6, 1, 6), float32], Tensor[(6, ?, 6), uint64], Tensor[(260), uint8], Tensor[(36, 10), float64]) {
  %661 = @func_1197() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */;
  %662 = cast(meta[relay.Constant][31] /* ty=Tensor[(36, 10), int64] */, dtype="int64") /* ty=Tensor[(36, 10), int64] */;
  %663 = cast(meta[relay.Constant][32] /* ty=Tensor[(260), uint8] */, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %664 = reshape(%662, newshape=[360]) /* ty=Tensor[(360), int64] */;
  %665 = reshape(%663, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %666 = @func_1662(%664, %665) /* ty=(Tensor[(6, ?, 6), uint64], Tensor[(6, 9, 6), float32], Tensor[(360), int64], Tensor[(260), uint8]) */;
  %667 = cast(meta[relay.Constant][31] /* ty=Tensor[(36, 10), int64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %668 = %661.1;
  %669 = %666.0;
  %670 = asinh(%667) /* ty=Tensor[(36, 10), float64] */;
  (%668, %669, meta[relay.Constant][32] /* ty=Tensor[(260), uint8] */, %670)
}

def @func_3278() -> Tensor[(6, ?, 6), int16] {
  %672 = fn () -> Tensor[(6, ?, 6), int16] {
    %671 = @func_2994() /* ty=(Tensor[(6, ?, 6), int16],) */;
    %671.0
  };
  %672() /* ty=Tensor[(6, ?, 6), int16] */
}

def @func_4769(%var_4749: Tensor[(6, 11, 6), float32]) -> Tensor[(6, 11, 6), float64] {
  %673 = @func_1889() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %674 = %673.0;
  %675 = cast(%674, dtype="float64") /* ty=Tensor[(6, ?, 6), float64] */;
  %676 = cast(%var_4749, dtype="float64") /* ty=Tensor[(6, 11, 6), float64] */;
  add(%675, %676) /* ty=Tensor[(6, 11, 6), float64] */
}

def @func_5922(%var_5871: Tensor[(8, 16, 2), float32]) -> (Tensor[(8, 16, 2), float32], Tensor[(8, 16, 2), float32], Tensor[(6, ?, 6), bool], Tensor[(6, ?, 6), float32]) {
  %677 = cast(%var_5871, dtype="float32") /* ty=Tensor[(8, 16, 2), float32] */;
  %678 = cast(%var_5871, dtype="float32") /* ty=Tensor[(8, 16, 2), float32] */;
  %679 = @func_685() /* ty=(Tensor[(6, ?, 6), uint64], Tensor[(6, 1, 6), float64], Tensor[(6, ?, 6), bool]) */;
  %680 = @func_1964() /* ty=(Tensor[(6, ?, 6), float32],) */;
  %681 = atan(%677) /* ty=Tensor[(8, 16, 2), float32] */;
  %682 = asin(%678) /* ty=Tensor[(8, 16, 2), float32] */;
  %683 = %679.2;
  %684 = %680.0;
  (%681, %682, %683, %684)
}

def @func_3090() -> (Tensor[(7, 10, 12), float64], Tensor[(6, 1, 6), float32]) {
  %689 = fn () -> (Tensor[(7, 10, 12), float64], Tensor[(6, 1, 6), float32]) {
    %685 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(7, 10, 12), float64] */;
    %686 = @func_1197() /* ty=(Tensor[(6, ?, 6), bool], Tensor[(6, 1, 6), float32]) */;
    %687 = sin(%685) /* ty=Tensor[(7, 10, 12), float64] */;
    %688 = %686.1;
    (%687, %688)
  };
  %689() /* ty=(Tensor[(7, 10, 12), float64], Tensor[(6, 1, 6), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen319/build/output.py:2251: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen319/build/output.py", line 2256, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(20) tvmgen_default_fused_asin_cast_log_cast_reshape_floor_divide_kernel0(float* __restrict__ T_floor_divide, float* __restrict__ placeholder) {
  T_floor_divide[(((int)threadIdx.x))] = floorf((((float)log(((double)asinf(placeholder[(((int)threadIdx.x))])))) / placeholder[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

