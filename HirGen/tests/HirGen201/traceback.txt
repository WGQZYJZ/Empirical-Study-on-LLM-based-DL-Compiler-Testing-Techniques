==========mod==========
#[version = "0.0.5"]
def @func_1763(%var_1743: Tensor[(2, 216), float32]) -> (Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32], Tensor[(2, 7, 13), uint32], int32, Tensor[(36, 10), float64], Tensor[(2, 216), float32]) {
  %0 = @func_1397() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) */;
  %1 = @func_1397() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) */;
  %2 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %4 = cast(%var_1743, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %5 = reshape(%2, newshape=[]) /* ty=int32 */;
  %6 = reshape(%3, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %7 = reshape(%4, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %8 = @func_1374(%5, %6, %7) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), uint32], Tensor[(1, 675), bool], Tensor[(2, 7, 13), bool], Tensor[(9, 9, 10), bool], Tensor[(810), int32], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(1, 245), float64], Tensor[(432), float32], Tensor[(2, 7, 13), bool]) */;
  %9 = %0.0;
  %10 = %1.1;
  %11 = %8.0;
  (%9, %10, %11, 5 /* ty=int32 */, meta[relay.Constant][0] /* ty=Tensor[(36, 10), float64] */, %var_1743)
}

def @func_1717(%var_1695: Tensor[(10, 11, 10), float32]) -> (Tensor[(10, 11, 10), float32], Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64]) {
  %12 = cast(%var_1695, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %13 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %14 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
  %15 = cosh(%12) /* ty=Tensor[(10, 11, 10), float32] */;
  %16 = %13.0;
  %17 = %14.0;
  (%15, %16, %17)
}

def @func_2303() -> Tensor[(13, 12, 245), bool] {
  %18 = @func_2204() /* ty=Tensor[(13, 12, 245), float64] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
  %20 = exp(%19) /* ty=Tensor[(13, 12, 245), float32] */;
  %21 = cast(%20, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
  %22 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%18, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%23, %24) /* ty=Tensor[(13, 12, 245), bool] */
}

def @func_1100() -> (Tensor[(13, 12, 245), float64],) {
  %25 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %26 = %25.2;
  (%26,)
}

def @func_1987(%var_1974: Tensor[(360), float64], %var_1982: Tensor[(182), uint32]) -> (Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) {
  %27 = @func_1549() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(15, 5, 9), bool], Tensor[(675, 1), bool]) */;
  %28 = cast(%var_1974, dtype="float64") /* ty=Tensor[(360), float64] */;
  %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %30 = reshape(%28, newshape=[9, 10, 4]) /* ty=Tensor[(9, 10, 4), float64] */;
  %31 = reshape(%29, newshape=[980]) /* ty=Tensor[(980), float32] */;
  %32 = @func_275(%30, %31) /* ty=(Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) */;
  %33 = cast(%var_1982, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %34 = reshape(%33, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), uint32] */;
  %35 = @func_672(%34) /* ty=(Tensor[(2, 7, 13), bool],) */;
  %36 = %27.2;
  %37 = %32.0;
  %38 = %35.0;
  (%36, %37, %var_1974, meta[relay.Constant][1] /* ty=Tensor[(980), float32] */, %38, %var_1982)
}

def @func_2636(%var_2561: Tensor[(294), float64], %var_2572: Tensor[(180, 2), float64], %var_2573: Tensor[(182), uint32], %var_2634: Tensor[(1, 810), int32]) -> (Tensor[(15, 5, 9), bool], Tensor[(294), float64], Tensor[(360), float64], Tensor[(180, 2), float64], Tensor[(182), uint32], Tensor[(3, 14, 7), float64], Tensor[(13, 12, 245), bool], Tensor[(9, 9, 10), bool], int32, Tensor[(1, 810), int32]) {
  %39 = @func_1549() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(15, 5, 9), bool], Tensor[(675, 1), bool]) */;
  %40 = cast(%var_2572, dtype="float64") /* ty=Tensor[(180, 2), float64] */;
  %41 = cast(%var_2573, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %42 = reshape(%40, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %43 = reshape(%41, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %44 = @func_1987(%42, %43) /* ty=(Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) */;
  %45 = cast(%var_2561, dtype="float64") /* ty=Tensor[(294), float64] */;
  %46 = reshape(%45, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
  %47 = @func_326(%46) /* ty=(Tensor[(3, 14, 7), float64],) */;
  %48 = %47.0;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(3, 14, 7), float64] */;
  %50 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %51 = cast(%var_2634, dtype="int32") /* ty=Tensor[(1, 810), int32] */;
  %52 = reshape(%50, newshape=[]) /* ty=int32 */;
  %53 = reshape(%51, newshape=[9, 9, 10]) /* ty=Tensor[(9, 9, 10), int32] */;
  %54 = %39.1;
  %55 = %44.2;
  %56 = atan(%49) /* ty=Tensor[(3, 14, 7), float64] */;
  %57 = @func_1953() /* ty=Tensor[(13, 12, 245), bool] */;
  %58 = @func_846(%52, %53) /* ty=Tensor[(9, 9, 10), bool] */;
  (%54, %var_2561, %55, %var_2572, %var_2573, %56, %57, %58, 6 /* ty=int32 */, %var_2634)
}

def @func_2363() -> (Tensor[(13, 12, ?), float64], Tensor[(2, 7, 13), float32]) {
  %59 = @func_2021() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(7, 35), float64]) */;
  %60 = @func_2136() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32]) */;
  %61 = %59.0;
  %62 = %60.1;
  (%61, %62)
}

def @func_4582(%var_4571: Tensor[(810), int32], %var_4580: Tensor[(1248), float64]) -> (Tensor[(10, 14, 7), float32], Tensor[(9, 9, 10), bool], int32, Tensor[(810), int32], Tensor[(2, 7, 13), uint32], Tensor[(1248), float64]) {
  %63 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %64 = cast(%var_4571, dtype="int32") /* ty=Tensor[(810), int32] */;
  %65 = reshape(%63, newshape=[]) /* ty=int32 */;
  %66 = reshape(%64, newshape=[9, 9, 10]) /* ty=Tensor[(9, 9, 10), int32] */;
  %67 = cast(%var_4580, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %68 = reshape(%67, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), float64] */;
  %69 = @func_1607(%68) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 8), uint8], Tensor[(2, 7, 13), float32], Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64]) */;
  %70 = @func_3159() /* ty=Tensor[(10, 14, 7), float32] */;
  %71 = @func_846(%65, %66) /* ty=Tensor[(9, 9, 10), bool] */;
  %72 = %69.3;
  (%70, %71, -4 /* ty=int32 */, %var_4571, %72, %var_4580)
}

def @func_4756(%var_4678: Tensor[(8, 2, 4), float64], %var_4699: Tensor[(360), float64], %var_4725: int32) -> (Tensor[(245), float64], Tensor[(360), float64], Tensor[(490, 2), float32], Tensor[(2, 7, 13), uint32], int32, Tensor[(8, 2, 4), int16], Tensor[(10, 14, 7), float32]) {
  %73 = cast(%var_4699, dtype="float64") /* ty=Tensor[(360), float64] */;
  %74 = cast(meta[relay.Constant][2] /* ty=Tensor[(490, 2), float32] */, dtype="float32") /* ty=Tensor[(490, 2), float32] */;
  %75 = reshape(%73, newshape=[9, 10, 4]) /* ty=Tensor[(9, 10, 4), float64] */;
  %76 = reshape(%74, newshape=[980]) /* ty=Tensor[(980), float32] */;
  %77 = @func_275(%75, %76) /* ty=(Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) */;
  %78 = cast(%var_4725, dtype="int32") /* ty=int32 */;
  %79 = reshape(%78, newshape=[]) /* ty=int32 */;
  %80 = @func_2084(%79) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(2, 7, 13), uint32], int32, Tensor[(360), float64], Tensor[(432), float32]) */;
  %81 = cast(%var_4678, dtype="float64") /* ty=Tensor[(8, 2, 4), float64] */;
  %82 = cosh(%81) /* ty=Tensor[(8, 2, 4), float64] */;
  %83 = cast(%82, dtype="float32") /* ty=Tensor[(8, 2, 4), float32] */;
  %84 = log(%83) /* ty=Tensor[(8, 2, 4), float32] */;
  %85 = cast(%84, dtype="int16") /* ty=Tensor[(8, 2, 4), int16] */;
  %86 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%82, dtype="int16") /* ty=Tensor[(8, 2, 4), int16] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %89 = @func_2781() /* ty=(Tensor[(10, 14, 7), float32],) */;
  %90 = %77.2;
  %91 = %80.2;
  %92 = right_shift(%87, %88) /* ty=Tensor[(8, 2, 4), int16] */;
  %93 = %89.0;
  (%90, %var_4699, meta[relay.Constant][2] /* ty=Tensor[(490, 2), float32] */, %91, %var_4725, %92, %93)
}

def @func_4799(%var_4781: Tensor[(16, 8, 16), uint64]) -> (Tensor[(16, 8, 16), uint64], Tensor[(13, 12, 245), float64]) {
  %94 = cast(%var_4781, dtype="uint64") /* ty=Tensor[(16, 8, 16), uint64] */;
  %95 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(16, 8, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 8, 16), uint64] */, dtype="uint64") /* ty=Tensor[(16, 8, 16), uint64] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %98 = subtract(%96, %97) /* ty=Tensor[(16, 8, 16), uint64] */;
  %99 = @func_2204() /* ty=Tensor[(13, 12, 245), float64] */;
  (%98, %99)
}

def @func_3159() -> Tensor[(10, 14, 7), float32] {
  %100 = @func_2021() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(7, 35), float64]) */;
  %100.1
}

def @func_1472(%var_1448: Tensor[(2, 7, 13), uint32], %var_1467: int32) -> (Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), float32], Tensor[(9, 9, 10), bool], int32, Tensor[(810, 1), int32]) {
  %101 = @func_794() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */;
  %102 = %101.1;
  %103 = cast(%var_1448, dtype="uint64") /* ty=Tensor[(2, 7, 13), uint64] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="uint64") /* ty=Tensor[(2, 7, 13), uint64] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %107 = multiply(%105, %106) /* ty=Tensor[(2, 7, 13), uint64] */;
  %108 = cast(%var_1448, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %112 = cast(%107, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
  %113 = cast(%var_1467, dtype="int32") /* ty=int32 */;
  %114 = cast(meta[relay.Constant][4] /* ty=Tensor[(810, 1), int32] */, dtype="int32") /* ty=Tensor[(810, 1), int32] */;
  %115 = reshape(%113, newshape=[]) /* ty=int32 */;
  %116 = reshape(%114, newshape=[9, 9, 10]) /* ty=Tensor[(9, 9, 10), int32] */;
  %117 = add(%110, %111) /* ty=Tensor[(2, 7, 13), float64] */;
  %118 = sin(%112) /* ty=Tensor[(2, 7, 13), float32] */;
  %119 = @func_846(%115, %116) /* ty=Tensor[(9, 9, 10), bool] */;
  (%117, %118, %119, %var_1467, meta[relay.Constant][4] /* ty=Tensor[(810, 1), int32] */)
}

def @func_2191() -> Tensor[(8, 8, 5), int32] {
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 8, 5), int32] */, dtype="int32") /* ty=Tensor[(8, 8, 5), int32] */;
  %121 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(8, 8, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 8, 5), int32] */, dtype="int32") /* ty=Tensor[(8, 8, 5), int32] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_and(%122, %123) /* ty=Tensor[(8, 8, 5), int32] */
}

def @func_3441() -> (Tensor[(2, 7, 13), uint32],) {
  %124 = @func_3379() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %125 = %124.0;
  (%125,)
}

def @func_2136() -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32]) {
  %126 = @func_794() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */;
  %127 = @func_1512() /* ty=(Tensor[(2, 7, 13), float32],) */;
  %128 = %127.0;
  %129 = @func_794() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */;
  %130 = %129.0;
  %131 = cast(%130, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
  %132 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%128, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %135 = %126.1;
  %136 = mod(%133, %134) /* ty=Tensor[(2, 7, 13), float32] */;
  (%135, %136)
}

def @func_846(%var_841: int32, %var_842: Tensor[(9, 9, 10), int32]) -> Tensor[(9, 9, 10), bool] {
  %137 = cast(%var_841, dtype="bool") /* ty=bool */;
  %138 = cast(%var_842, dtype="bool") /* ty=Tensor[(9, 9, 10), bool] */;
  not_equal(%137, %138) /* ty=Tensor[(9, 9, 10), bool] */
}

def @func_1687(%var_1658: Tensor[(7, 16, 15), uint8], %var_1659: Tensor[(7, 16, 15), uint8]) -> (Tensor[(7, 16, 15), bool], Tensor[(7, 16, 15), float32]) {
  %139 = cast(%var_1659, dtype="uint8") /* ty=Tensor[(7, 16, 15), uint8] */;
  %140 = shape_of(%var_1658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%var_1658, dtype="uint8") /* ty=Tensor[(7, 16, 15), uint8] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %143 = add(%141, %142) /* ty=Tensor[(7, 16, 15), uint8] */;
  %144 = cast(%var_1659, dtype="bool") /* ty=Tensor[(7, 16, 15), bool] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%143, dtype="bool") /* ty=Tensor[(7, 16, 15), bool] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %148 = cast(%var_1659, dtype="float32") /* ty=Tensor[(7, 16, 15), float32] */;
  %149 = less_equal(%146, %147) /* ty=Tensor[(7, 16, 15), bool] */;
  %150 = exp(%148) /* ty=Tensor[(7, 16, 15), float32] */;
  (%149, %150)
}

def @func_1397() -> (Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) {
  %151 = @func_794() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */;
  %152 = @func_1205() /* ty=(Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), uint32]) */;
  %153 = %152.1;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
  %155 = acos(%154) /* ty=Tensor[(13, 12, 245), float32] */;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
  %157 = %151.0;
  %158 = asinh(%156) /* ty=Tensor[(13, 12, 245), float32] */;
  (%157, %158)
}

def @func_2754() -> (Tensor[(13, 12, 245), int16],) {
  %159 = @func_1205() /* ty=(Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), uint32]) */;
  %160 = %159.0;
  (%160,)
}

def @func_4343() -> Tensor[(2, 7, 13), float64] {
  %161 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %162 = %161.0;
  %163 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 7, 13), uint32] */, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%165, %166) /* ty=Tensor[(2, 7, 13), float64] */
}

def @func_3918() -> (Tensor[(13, 12, 245), bool], Tensor[(360), float64], Tensor[(15, 5, 9), bool]) {
  %167 = @func_3771() /* ty=(Tensor[(360), float64], Tensor[(2, 7, 13), float64]) */;
  %168 = @func_1549() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(15, 5, 9), bool], Tensor[(675, 1), bool]) */;
  %169 = @func_2656() /* ty=Tensor[(13, 12, 245), bool] */;
  %170 = %167.0;
  %171 = %168.1;
  (%169, %170, %171)
}

def @func_2204() -> Tensor[(13, 12, 245), float64] {
  %172 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
  %172.0
}

def @func_2021() -> (Tensor[(13, 12, ?), float64], Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(7, 35), float64]) {
  %173 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %174 = cast(meta[relay.Constant][8] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %175 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 35), float64] */, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
  %176 = reshape(%174, newshape=[10, 14, 7]) /* ty=Tensor[(10, 14, 7), float32] */;
  %177 = reshape(%175, newshape=[7, 35]) /* ty=Tensor[(7, 35), float64] */;
  %178 = @func_114(%176, %177) /* ty=(Tensor[(5, 7, 7), float64], Tensor[(7, 35), float64], Tensor[(5, 7, 7), float64], Tensor[(10, 14, 7), float32]) */;
  %179 = %173.0;
  %180 = %178.3;
  (%179, %180, meta[relay.Constant][8] /* ty=Tensor[(980), float32] */, meta[relay.Constant][9] /* ty=Tensor[(7, 35), float64] */)
}

def @func_1512() -> (Tensor[(2, 7, 13), float32],) {
  %181 = @func_1489() /* ty=Tensor[(2, 7, 13), uint32] */;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
  %183 = sqrt(%182) /* ty=Tensor[(2, 7, 13), float32] */;
  (%183,)
}

def @func_2031(%var_2026: Tensor[(15, 2, 8), int16]) -> Tensor[(15, 2, 8), int16] {
  %184 = cast(%var_2026, dtype="int16") /* ty=Tensor[(15, 2, 8), int16] */;
  %185 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(15, 2, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 2, 8), int16] */, dtype="int16") /* ty=Tensor[(15, 2, 8), int16] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  add(%186, %187) /* ty=Tensor[(15, 2, 8), int16] */
}

def @func_2844(%var_2813: Tensor[(13, 12, 10), float64], %var_2826: Tensor[(1100), float32]) -> (Tensor[(13, 12, 10), float32], Tensor[(13, 12, 245), float64], Tensor[(980), float32], Tensor[(13, 12, 1100), float32]) {
  %188 = @func_2363() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 7, 13), float32]) */;
  %189 = %188.0;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(13, 12, ?), float32] */;
  %191 = cast(%var_2813, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
  %192 = cast(%var_2826, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %193 = reshape(%192, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), float32] */;
  %194 = @func_1717(%193) /* ty=(Tensor[(10, 11, 10), float32], Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64]) */;
  %195 = @func_991() /* ty=(Tensor[(2, 7, 13), int16], Tensor[(980), float32], Tensor[(360), float64]) */;
  %196 = cast(%var_2826, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %197 = cast(%189, dtype="float32") /* ty=Tensor[(13, 12, ?), float32] */;
  %198 = mod(%190, %191) /* ty=Tensor[(13, 12, 10), float32] */;
  %199 = %194.2;
  %200 = %195.1;
  %201 = divide(%196, %197) /* ty=Tensor[(13, 12, 1100), float32] */;
  (%198, %199, %200, %201)
}

def @func_1489() -> Tensor[(2, 7, 13), uint32] {
  %202 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %202.0
}

def @func_5083() -> (Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), int16], Tensor[(294), float64], Tensor[(9, 2, 8), float64], Tensor[(9, 16, 3), float32], Tensor[(245), float64]) {
  %203 = @func_3441() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %204 = cast(meta[relay.Constant][11] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %205 = reshape(%204, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %206 = @func_5009(%205) /* ty=(Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(13, 12, 245), int16], Tensor[(16, 5, 9), int8]) */;
  %207 = cast(meta[relay.Constant][12] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %208 = reshape(%207, newshape=[9, 2, 8]) /* ty=Tensor[(9, 2, 8), float64] */;
  %209 = @func_4438(%208) /* ty=Tensor[(9, 2, 8), float64] */;
  %210 = cast(meta[relay.Constant][12] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="float64") /* ty=Tensor[(9, 2, 8), float64] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %214 = cast(meta[relay.Constant][13] /* ty=Tensor[(245), float64] */, dtype="float64") /* ty=Tensor[(245), float64] */;
  %215 = reshape(%214, newshape=[245, 1]) /* ty=Tensor[(245, 1), float64] */;
  %216 = @func_3219(%215) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(5, 7, 7), float64], Tensor[(245, 1), float64], Tensor[(12, 36), float32], Tensor[(13, 12, 245), bool], Tensor[(13, 12, 245), float64]) */;
  %217 = %203.0;
  %218 = %206.2;
  %219 = floor_divide(%212, %213) /* ty=Tensor[(9, 2, 8), float64] */;
  %220 = %216.0;
  (%217, %218, meta[relay.Constant][11] /* ty=Tensor[(294), float64] */, %219, %220, meta[relay.Constant][13] /* ty=Tensor[(245), float64] */)
}

def @func_3138() -> (Tensor[(1, 4, 3), float64],) {
  %221 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 4, 3), float64] */, dtype="float64") /* ty=Tensor[(1, 4, 3), float64] */;
  %222 = acosh(%221) /* ty=Tensor[(1, 4, 3), float64] */;
  (%222,)
}

def @func_114(%var_82: Tensor[(10, 14, 7), float32], %var_86: Tensor[(7, 35), float64]) -> (Tensor[(5, 7, 7), float64], Tensor[(7, 35), float64], Tensor[(5, 7, 7), float64], Tensor[(10, 14, 7), float32]) {
  %223 = cast(%var_86, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
  %224 = cast(%var_86, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
  %225 = reshape(%223, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %226 = reshape(%224, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %227 = @func_36(%225, %226) /* ty=(Tensor[(5, 7, 7), float64],) */;
  %228 = cast(%var_86, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
  %229 = cast(%var_86, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
  %230 = reshape(%228, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %231 = reshape(%229, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %232 = @func_36(%230, %231) /* ty=(Tensor[(5, 7, 7), float64],) */;
  %233 = cast(%var_82, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
  %234 = acos(%233) /* ty=Tensor[(10, 14, 7), float32] */;
  %235 = cast(%234, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
  %236 = %227.0;
  %237 = %232.0;
  %238 = atan(%235) /* ty=Tensor[(10, 14, 7), float32] */;
  (%236, %var_86, %237, %238)
}

def @func_637() -> (Tensor[(2, 7, 13), uint32],) {
  %239 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %240 = %239.0;
  (%240,)
}

def @main(%var_5092: Tensor[(9, 15, 16), bool], %var_5093: Tensor[(9, 15, 16), bool]) -> (Tensor[(9, 15, 16), bool],) {
  %241 = cast(%var_5093, dtype="bool") /* ty=Tensor[(9, 15, 16), bool] */;
  %242 = shape_of(%var_5092, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%var_5092, dtype="bool") /* ty=Tensor[(9, 15, 16), bool] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %245 = logical_and(%243, %244) /* ty=Tensor[(9, 15, 16), bool] */;
  (%245,)
}

def @func_4820() -> Tensor[(2, 180), int16] {
  %246 = @func_1857() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 180), int16]) */;
  %246.1
}

def @func_5009(%var_4972: Tensor[(294), float64]) -> (Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(13, 12, 245), int16], Tensor[(16, 5, 9), int8]) {
  %247 = cast(%var_4972, dtype="float64") /* ty=Tensor[(294), float64] */;
  %248 = reshape(%247, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
  %249 = @func_326(%248) /* ty=(Tensor[(3, 14, 7), float64],) */;
  %250 = @func_2754() /* ty=(Tensor[(13, 12, 245), int16],) */;
  %251 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
  %252 = rsqrt(%251) /* ty=Tensor[(16, 5, 9), float32] */;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
  %254 = sigmoid(%253) /* ty=Tensor[(16, 5, 9), float32] */;
  %255 = cast(%252, dtype="int8") /* ty=Tensor[(16, 5, 9), int8] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%254, dtype="int8") /* ty=Tensor[(16, 5, 9), int8] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %259 = %249.0;
  %260 = %250.0;
  %261 = logical_xor(%257, %258) /* ty=Tensor[(16, 5, 9), int8] */;
  (%259, %var_4972, %260, %261)
}

def @func_2781() -> (Tensor[(10, 14, 7), float32],) {
  %262 = @func_2021() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(7, 35), float64]) */;
  %263 = %262.1;
  (%263,)
}

def @func_275(%var_249: Tensor[(9, 10, 4), float64], %var_262: Tensor[(980), float32]) -> (Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) {
  %264 = cast(%var_249, dtype="float64") /* ty=Tensor[(9, 10, 4), float64] */;
  %265 = cast(meta[relay.Constant][16] /* ty=Tensor[(245), float64] */, dtype="float64") /* ty=Tensor[(245), float64] */;
  %266 = cast(meta[relay.Constant][16] /* ty=Tensor[(245), float64] */, dtype="float64") /* ty=Tensor[(245), float64] */;
  %267 = reshape(%265, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %268 = reshape(%266, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %269 = @func_36(%267, %268) /* ty=(Tensor[(5, 7, 7), float64],) */;
  %270 = cast(%var_262, dtype="float32") /* ty=Tensor[(980), float32] */;
  %271 = cast(meta[relay.Constant][16] /* ty=Tensor[(245), float64] */, dtype="float64") /* ty=Tensor[(245), float64] */;
  %272 = reshape(%270, newshape=[10, 14, 7]) /* ty=Tensor[(10, 14, 7), float32] */;
  %273 = reshape(%271, newshape=[7, 35]) /* ty=Tensor[(7, 35), float64] */;
  %274 = @func_114(%272, %273) /* ty=(Tensor[(5, 7, 7), float64], Tensor[(7, 35), float64], Tensor[(5, 7, 7), float64], Tensor[(10, 14, 7), float32]) */;
  %275 = cos(%264) /* ty=Tensor[(9, 10, 4), float64] */;
  %276 = %269.0;
  %277 = %274.0;
  (%275, %276, meta[relay.Constant][16] /* ty=Tensor[(245), float64] */, %277, %var_262)
}

def @func_794() -> (Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) {
  %278 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %279 = %278.0;
  %280 = cast(%279, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %281 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %282 = sinh(%280) /* ty=Tensor[(2, 7, 13), float64] */;
  %283 = %281.0;
  (%282, %283)
}

def @func_4383() -> (Tensor[(13, 12, 245), bool], Tensor[(7, 16, 15), float32], Tensor[(84, 20), uint8]) {
  %284 = cast(meta[relay.Constant][17] /* ty=Tensor[(84, 20), uint8] */, dtype="uint8") /* ty=Tensor[(84, 20), uint8] */;
  %285 = cast(meta[relay.Constant][17] /* ty=Tensor[(84, 20), uint8] */, dtype="uint8") /* ty=Tensor[(84, 20), uint8] */;
  %286 = reshape(%284, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), uint8] */;
  %287 = reshape(%285, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), uint8] */;
  %288 = @func_1687(%286, %287) /* ty=(Tensor[(7, 16, 15), bool], Tensor[(7, 16, 15), float32]) */;
  %289 = @func_2656() /* ty=Tensor[(13, 12, 245), bool] */;
  %290 = %288.1;
  (%289, %290, meta[relay.Constant][17] /* ty=Tensor[(84, 20), uint8] */)
}

def @func_3950(%var_3940: Tensor[(12, 14, 14), uint16], %var_3941: Tensor[(12, 14, 14), uint16]) -> Tensor[(12, 14, 14), bool] {
  %291 = cast(%var_3941, dtype="uint16") /* ty=Tensor[(12, 14, 14), uint16] */;
  %292 = shape_of(%var_3940, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_3940, dtype="uint16") /* ty=Tensor[(12, 14, 14), uint16] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %295 = right_shift(%293, %294) /* ty=Tensor[(12, 14, 14), uint16] */;
  %296 = cast(%var_3941, dtype="bool") /* ty=Tensor[(12, 14, 14), bool] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="bool") /* ty=Tensor[(12, 14, 14), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%298, %299) /* ty=Tensor[(12, 14, 14), bool] */
}

def @func_4422(%var_4414: Tensor[(13, 12, 245), float64]) -> Tensor[(13, 12, 245), int32] {
  %300 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %301 = %300.2;
  %302 = cast(%var_4414, dtype="int32") /* ty=Tensor[(13, 12, 245), int32] */;
  %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%301, dtype="int32") /* ty=Tensor[(13, 12, 245), int32] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  minimum(%304, %305) /* ty=Tensor[(13, 12, 245), int32] */
}

def @func_4279() -> (Tensor[(2, 7, 13), uint32],) {
  %306 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %307 = %306.0;
  (%307,)
}

def @func_4931(%var_4927: Tensor[(675), bool]) -> (Tensor[(13, 12, 245), float64], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) {
  %308 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %309 = cast(%var_4927, dtype="bool") /* ty=Tensor[(675), bool] */;
  %310 = reshape(%309, newshape=[675]) /* ty=Tensor[(675), bool] */;
  %311 = @func_3671(%310) /* ty=(Tensor[(13, 12, 245), bool], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) */;
  %312 = %308.2;
  %313 = %311.1;
  (%312, %313, %var_4927)
}

def @func_2499(%var_2484: Tensor[(15, 11, 10), float32], %var_2489: Tensor[(245), float64]) -> (Tensor[(15, 11, 10), float32], Tensor[(5, 7, 7), float64], Tensor[(245), float64]) {
  %314 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 10), float32] */;
  %315 = cast(%var_2484, dtype="float32") /* ty=Tensor[(15, 11, 10), float32] */;
  %316 = cast(%var_2489, dtype="float64") /* ty=Tensor[(245), float64] */;
  %317 = cast(%var_2489, dtype="float64") /* ty=Tensor[(245), float64] */;
  %318 = reshape(%316, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %319 = reshape(%317, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %320 = @func_36(%318, %319) /* ty=(Tensor[(5, 7, 7), float64],) */;
  %321 = mod(%314, %315) /* ty=Tensor[(15, 11, 10), float32] */;
  %322 = %320.0;
  (%321, %322, %var_2489)
}

def @func_3842(%var_3822: Tensor[(11, 11, 8), uint16]) -> (Tensor[(11, 11, 8), uint16], Tensor[(13, 12, 245), float32]) {
  %323 = cast(%var_3822, dtype="uint16") /* ty=Tensor[(11, 11, 8), uint16] */;
  %324 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(11, 11, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 11, 8), uint16] */, dtype="uint16") /* ty=Tensor[(11, 11, 8), uint16] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %327 = @func_1397() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) */;
  %328 = bitwise_and(%325, %326) /* ty=Tensor[(11, 11, 8), uint16] */;
  %329 = %327.1;
  (%328, %329)
}

def @func_4255(%var_4242: Tensor[(294), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), bool], Tensor[(360), float64], int32, int32, Tensor[(2, 180), float64], Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(810), int32]) {
  %330 = @func_3379() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %331 = @func_3256() /* ty=(Tensor[(2, 7, 13), float32], Tensor[(2, 7, 13), bool]) */;
  %332 = %331.1;
  %333 = cast(%332, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %334 = rsqrt(%333) /* ty=Tensor[(2, 7, 13), float64] */;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %336 = cast(meta[relay.Constant][20] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %337 = log2(%335) /* ty=Tensor[(2, 7, 13), float64] */;
  %338 = cast(%337, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
  %339 = reshape(%336, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %340 = reshape(%338, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %341 = @func_1987(%339, %340) /* ty=(Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) */;
  %342 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %343 = reshape(%342, newshape=[]) /* ty=int32 */;
  %344 = @func_4150(%343) /* ty=(Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), bool], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), bool], int32, int32) */;
  %345 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %346 = cast(%var_4242, dtype="float64") /* ty=Tensor[(294), float64] */;
  %347 = %345.1;
  %348 = cast(%347, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
  %349 = %330.0;
  %350 = cast(%349, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
  %351 = cast(meta[relay.Constant][21] /* ty=Tensor[(810), int32] */, dtype="int32") /* ty=Tensor[(810), int32] */;
  %352 = reshape(%346, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %353 = reshape(%348, newshape=[180, 2]) /* ty=Tensor[(180, 2), float64] */;
  %354 = reshape(%350, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %355 = reshape(%351, newshape=[1, 810]) /* ty=Tensor[(1, 810), int32] */;
  %356 = @func_2636(%352, %353, %354, %355) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(294), float64], Tensor[(360), float64], Tensor[(180, 2), float64], Tensor[(182), uint32], Tensor[(3, 14, 7), float64], Tensor[(13, 12, 245), bool], Tensor[(9, 9, 10), bool], int32, Tensor[(1, 810), int32]) */;
  %357 = %341.4;
  %358 = %344.5;
  %359 = %356.5;
  (%349, %337, %357, meta[relay.Constant][20] /* ty=Tensor[(360), float64] */, %358, 1 /* ty=int32 */, %347, %359, %var_4242, meta[relay.Constant][21] /* ty=Tensor[(810), int32] */)
}

def @func_3414(%var_3398: Tensor[(13, 12, 245), bool]) -> Tensor[(13, 12, 245), float64] {
  %360 = @func_2303() /* ty=Tensor[(13, 12, 245), bool] */;
  %361 = cast(%var_3398, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%360, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%363, %364) /* ty=Tensor[(13, 12, 245), float64] */
}

def @func_3219(%var_3182: Tensor[(245, 1), float64]) -> (Tensor[(9, 16, 3), float32], Tensor[(5, 7, 7), float64], Tensor[(245, 1), float64], Tensor[(12, 36), float32], Tensor[(13, 12, 245), bool], Tensor[(13, 12, 245), float64]) {
  %365 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 36), float32] */, dtype="float32") /* ty=Tensor[(12, 36), float32] */;
  %366 = reshape(%365, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %367 = @func_369(%366) /* ty=(Tensor[(7, 35), float64], Tensor[(980), float32], Tensor[(1, 245), float64], Tensor[(9, 16, 3), float32]) */;
  %368 = cast(%var_3182, dtype="float64") /* ty=Tensor[(245, 1), float64] */;
  %369 = cast(%var_3182, dtype="float64") /* ty=Tensor[(245, 1), float64] */;
  %370 = reshape(%368, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %371 = reshape(%369, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %372 = @func_36(%370, %371) /* ty=(Tensor[(5, 7, 7), float64],) */;
  %373 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 36), float32] */, dtype="float32") /* ty=Tensor[(12, 36), float32] */;
  %374 = @func_1953() /* ty=Tensor[(13, 12, 245), bool] */;
  %375 = cast(%374, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %376 = acosh(%375) /* ty=Tensor[(13, 12, 245), float64] */;
  %377 = cast(%376, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
  %378 = sin(%377) /* ty=Tensor[(13, 12, 245), float32] */;
  %379 = cast(%376, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%378, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %383 = cast(%376, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %384 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%378, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %387 = %367.3;
  %388 = %372.0;
  %389 = log2(%373) /* ty=Tensor[(12, 36), float32] */;
  %390 = greater_equal(%381, %382) /* ty=Tensor[(13, 12, 245), bool] */;
  %391 = add(%385, %386) /* ty=Tensor[(13, 12, 245), float64] */;
  (%387, %388, %var_3182, %389, %390, %391)
}

def @func_3671(%var_3656: Tensor[(675), bool]) -> (Tensor[(13, 12, 245), bool], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) {
  %392 = cast(%var_3656, dtype="bool") /* ty=Tensor[(675), bool] */;
  %393 = reshape(%392, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
  %394 = @func_826(%393) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(2, 7, 13), uint32]) */;
  %395 = @func_2656() /* ty=Tensor[(13, 12, 245), bool] */;
  %396 = %394.0;
  (%395, %396, %var_3656)
}

def @func_1607(%var_1567: Tensor[(13, 12, 8), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 8), uint8], Tensor[(2, 7, 13), float32], Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64]) {
  %397 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %398 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %399 = %398.0;
  %400 = cast(%399, dtype="uint8") /* ty=Tensor[(13, 12, ?), uint8] */;
  %401 = cast(%var_1567, dtype="uint8") /* ty=Tensor[(13, 12, 8), uint8] */;
  %402 = @func_1512() /* ty=(Tensor[(2, 7, 13), float32],) */;
  %403 = @func_794() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */;
  %404 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
  %405 = %397.0;
  %406 = right_shift(%400, %401) /* ty=Tensor[(13, 12, 8), uint8] */;
  %407 = %402.0;
  %408 = %403.1;
  %409 = %404.0;
  (%405, %406, %407, %408, %409)
}

def @func_2935() -> Tensor[(13, 12, 245), float32] {
  %410 = @func_1953() /* ty=Tensor[(13, 12, 245), bool] */;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
  log10(%411) /* ty=Tensor[(13, 12, 245), float32] */
}

def @func_545(%var_524: Tensor[(360), float64]) -> (Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(16, 12, 9), uint64], Tensor[(5, 7, 7), float64]) {
  %412 = cast(meta[relay.Constant][23] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %413 = cast(meta[relay.Constant][24] /* ty=Tensor[(245), float64] */, dtype="float64") /* ty=Tensor[(245), float64] */;
  %414 = reshape(%412, newshape=[10, 14, 7]) /* ty=Tensor[(10, 14, 7), float32] */;
  %415 = reshape(%413, newshape=[7, 35]) /* ty=Tensor[(7, 35), float64] */;
  %416 = @func_114(%414, %415) /* ty=(Tensor[(5, 7, 7), float64], Tensor[(7, 35), float64], Tensor[(5, 7, 7), float64], Tensor[(10, 14, 7), float32]) */;
  %417 = cast(%var_524, dtype="float64") /* ty=Tensor[(360), float64] */;
  %418 = cast(meta[relay.Constant][23] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %419 = reshape(%417, newshape=[9, 10, 4]) /* ty=Tensor[(9, 10, 4), float64] */;
  %420 = reshape(%418, newshape=[980]) /* ty=Tensor[(980), float32] */;
  %421 = @func_275(%419, %420) /* ty=(Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) */;
  %422 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 12, 9), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %423 = acosh(%422) /* ty=Tensor[(16, 12, 9), float32] */;
  %424 = cast(%423, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %425 = log2(%424) /* ty=Tensor[(16, 12, 9), float32] */;
  %426 = cast(%423, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %430 = less_equal(%428, %429) /* ty=Tensor[(16, 12, 9), bool] */;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(16, 12, 9), float64] */;
  %432 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%423, dtype="float64") /* ty=Tensor[(16, 12, 9), float64] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %435 = floor_mod(%433, %434) /* ty=Tensor[(16, 12, 9), float64] */;
  %436 = cast(%435, dtype="uint64") /* ty=Tensor[(16, 12, 9), uint64] */;
  %437 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%425, dtype="uint64") /* ty=Tensor[(16, 12, 9), uint64] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %440 = cast(%var_524, dtype="float64") /* ty=Tensor[(360), float64] */;
  %441 = %416.3;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
  %443 = reshape(%440, newshape=[9, 10, 4]) /* ty=Tensor[(9, 10, 4), float64] */;
  %444 = reshape(%442, newshape=[980]) /* ty=Tensor[(980), float32] */;
  %445 = @func_275(%443, %444) /* ty=(Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) */;
  %446 = %421.1;
  %447 = bitwise_xor(%438, %439) /* ty=Tensor[(16, 12, 9), uint64] */;
  %448 = %445.1;
  (%441, meta[relay.Constant][23] /* ty=Tensor[(980), float32] */, meta[relay.Constant][24] /* ty=Tensor[(245), float64] */, %446, %var_524, %447, %448)
}

def @func_623() -> (Tensor[(2, 7, 13), uint32],) {
  %449 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
  %450 = exp(%449) /* ty=Tensor[(2, 7, 13), float32] */;
  %451 = cast(%450, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
  %452 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(2, 7, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 7, 13), float32] */, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %455 = right_shift(%453, %454) /* ty=Tensor[(2, 7, 13), uint32] */;
  (%455,)
}

def @func_3771() -> (Tensor[(360), float64], Tensor[(2, 7, 13), float64]) {
  %456 = @func_991() /* ty=(Tensor[(2, 7, 13), int16], Tensor[(980), float32], Tensor[(360), float64]) */;
  %457 = %456.2;
  %458 = @func_2217() /* ty=Tensor[(2, 7, 13), float64] */;
  (%457, %458)
}

def @func_1374(%var_1298: int32, %var_1307: Tensor[(360), float64], %var_1365: Tensor[(432), float32]) -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), uint32], Tensor[(1, 675), bool], Tensor[(2, 7, 13), bool], Tensor[(9, 9, 10), bool], Tensor[(810), int32], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(1, 245), float64], Tensor[(432), float32], Tensor[(2, 7, 13), bool]) {
  %459 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %460 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 675), bool] */, dtype="bool") /* ty=Tensor[(1, 675), bool] */;
  %461 = reshape(%460, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
  %462 = @func_826(%461) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(2, 7, 13), uint32]) */;
  %463 = %462.2;
  %464 = cast(%463, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
  %465 = reshape(%464, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), uint32] */;
  %466 = @func_672(%465) /* ty=(Tensor[(2, 7, 13), bool],) */;
  %467 = cast(%var_1298, dtype="int32") /* ty=int32 */;
  %468 = cast(meta[relay.Constant][28] /* ty=Tensor[(810), int32] */, dtype="int32") /* ty=Tensor[(810), int32] */;
  %469 = reshape(%467, newshape=[]) /* ty=int32 */;
  %470 = reshape(%468, newshape=[9, 9, 10]) /* ty=Tensor[(9, 9, 10), int32] */;
  %471 = cast(%var_1307, dtype="float64") /* ty=Tensor[(360), float64] */;
  %472 = reshape(%471, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %473 = @func_545(%472) /* ty=(Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(16, 12, 9), uint64], Tensor[(5, 7, 7), float64]) */;
  %474 = cast(%var_1365, dtype="float32") /* ty=Tensor[(432), float32] */;
  %475 = reshape(%474, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %476 = @func_369(%475) /* ty=(Tensor[(7, 35), float64], Tensor[(980), float32], Tensor[(1, 245), float64], Tensor[(9, 16, 3), float32]) */;
  %477 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %478 = %477.0;
  %479 = cast(%478, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %480 = asin(%479) /* ty=Tensor[(2, 7, 13), float64] */;
  %481 = cast(%480, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %482 = log(%481) /* ty=Tensor[(2, 7, 13), float64] */;
  %483 = cast(%482, dtype="bool") /* ty=Tensor[(2, 7, 13), bool] */;
  %484 = cast(%var_1298, dtype="bool") /* ty=bool */;
  %485 = %459.0;
  %486 = %466.0;
  %487 = @func_846(%469, %470) /* ty=Tensor[(9, 9, 10), bool] */;
  %488 = %473.6;
  %489 = %476.2;
  %490 = less_equal(%483, %484) /* ty=Tensor[(2, 7, 13), bool] */;
  (%485, %463, meta[relay.Constant][27] /* ty=Tensor[(1, 675), bool] */, %486, %487, meta[relay.Constant][28] /* ty=Tensor[(810), int32] */, %488, %var_1307, %489, %var_1365, %490)
}

def @func_3351() -> Tensor[(2, 7, 13), float32] {
  %491 = @func_2136() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32]) */;
  %492 = %491.1;
  %493 = cast(%492, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
  erf(%493) /* ty=Tensor[(2, 7, 13), float32] */
}

def @func_672(%var_657: Tensor[(2, 7, 13), uint32]) -> (Tensor[(2, 7, 13), bool],) {
  %494 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %495 = %494.0;
  %496 = cast(%var_657, dtype="bool") /* ty=Tensor[(2, 7, 13), bool] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="bool") /* ty=Tensor[(2, 7, 13), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %500 = greater_equal(%498, %499) /* ty=Tensor[(2, 7, 13), bool] */;
  (%500,)
}

def @func_2097() -> Tensor[(2, 7, 13), uint32] {
  @func_1489() /* ty=Tensor[(2, 7, 13), uint32] */
}

def @func_2367() -> (Tensor[(2, 7, 13), uint32],) {
  %501 = @func_2097() /* ty=Tensor[(2, 7, 13), uint32] */;
  (%501,)
}

def @func_2217() -> Tensor[(2, 7, 13), float64] {
  %502 = @func_1397() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) */;
  %502.0
}

def @func_1953() -> Tensor[(13, 12, 245), bool] {
  %503 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
  %504 = %503.0;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %506 = sinh(%505) /* ty=Tensor[(13, 12, 245), float64] */;
  %507 = cast(%504, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%506, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%509, %510) /* ty=Tensor[(13, 12, 245), bool] */
}

def @func_2656() -> Tensor[(13, 12, 245), bool] {
  @func_1953() /* ty=Tensor[(13, 12, 245), bool] */
}

def @func_2717(%var_2701: Tensor[(2, 7, 13), uint32]) -> (Tensor[(2, 7, 13), int32],) {
  %511 = @func_2097() /* ty=Tensor[(2, 7, 13), uint32] */;
  %512 = cast(%var_2701, dtype="int32") /* ty=Tensor[(2, 7, 13), int32] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="int32") /* ty=Tensor[(2, 7, 13), int32] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %516 = minimum(%514, %515) /* ty=Tensor[(2, 7, 13), int32] */;
  (%516,)
}

def @func_3808(%var_3787: Tensor[(13, 360), float64], %var_3792: Tensor[(13, 360), uint8]) -> (Tensor[(13, 12, 245), float64], Tensor[(2, 7, 13), uint32], Tensor[(13, 360), float64], Tensor[(1, 360), float64], Tensor[(13, 12, 245), float64]) {
  %517 = @func_1205() /* ty=(Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), uint32]) */;
  %518 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 360), float64] */, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %519 = reshape(%518, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %520 = @func_3507(%519) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(245), float64], Tensor[(360), float64], Tensor[(980), float32]) */;
  %521 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 360), float64] */, dtype="uint8") /* ty=Tensor[(1, 360), uint8] */;
  %522 = cast(%var_3787, dtype="uint8") /* ty=Tensor[(13, 360), uint8] */;
  %523 = bitwise_xor(%521, %522) /* ty=Tensor[(13, 360), uint8] */;
  %524 = cast(%var_3792, dtype="float64") /* ty=Tensor[(13, 360), float64] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(2), int32] */;
  %526 = cast(%523, dtype="float64") /* ty=Tensor[(13, 360), float64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %528 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 360), float64] */, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %529 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
  %530 = %517.1;
  %531 = %520.0;
  %532 = mod(%526, %527) /* ty=Tensor[(13, 360), float64] */;
  %533 = rsqrt(%528) /* ty=Tensor[(1, 360), float64] */;
  %534 = %529.0;
  (%530, %531, %532, %533, %534)
}

def @func_3507(%var_3501: Tensor[(360), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(245), float64], Tensor[(360), float64], Tensor[(980), float32]) {
  %535 = @func_2367() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %536 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
  %537 = cast(%var_3501, dtype="float64") /* ty=Tensor[(360), float64] */;
  %538 = cast(meta[relay.Constant][30] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %539 = reshape(%537, newshape=[9, 10, 4]) /* ty=Tensor[(9, 10, 4), float64] */;
  %540 = reshape(%538, newshape=[980]) /* ty=Tensor[(980), float32] */;
  %541 = @func_275(%539, %540) /* ty=(Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) */;
  %542 = %535.0;
  %543 = %536.0;
  %544 = %541.2;
  (%542, %543, %544, %var_3501, meta[relay.Constant][30] /* ty=Tensor[(980), float32] */)
}

def @func_3630(%var_3613: Tensor[(13, 12, 245), bool]) -> (Tensor[(13, 12, 245), uint16],) {
  %545 = @func_2656() /* ty=Tensor[(13, 12, 245), bool] */;
  %546 = cast(%var_3613, dtype="uint16") /* ty=Tensor[(13, 12, 245), uint16] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="uint16") /* ty=Tensor[(13, 12, 245), uint16] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %550 = logical_xor(%548, %549) /* ty=Tensor[(13, 12, 245), uint16] */;
  (%550,)
}

def @func_369(%var_343: Tensor[(9, 16, 3), float32]) -> (Tensor[(7, 35), float64], Tensor[(980), float32], Tensor[(1, 245), float64], Tensor[(9, 16, 3), float32]) {
  %551 = cast(meta[relay.Constant][31] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %552 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 245), float64] */, dtype="float64") /* ty=Tensor[(1, 245), float64] */;
  %553 = reshape(%551, newshape=[10, 14, 7]) /* ty=Tensor[(10, 14, 7), float32] */;
  %554 = reshape(%552, newshape=[7, 35]) /* ty=Tensor[(7, 35), float64] */;
  %555 = @func_114(%553, %554) /* ty=(Tensor[(5, 7, 7), float64], Tensor[(7, 35), float64], Tensor[(5, 7, 7), float64], Tensor[(10, 14, 7), float32]) */;
  %556 = cast(%var_343, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %557 = log10(%556) /* ty=Tensor[(9, 16, 3), float32] */;
  %558 = cast(%var_343, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %562 = %555.1;
  %563 = power(%560, %561) /* ty=Tensor[(9, 16, 3), float32] */;
  (%562, meta[relay.Constant][31] /* ty=Tensor[(980), float32] */, meta[relay.Constant][32] /* ty=Tensor[(1, 245), float64] */, %563)
}

def @func_1205() -> (Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), uint32]) {
  %564 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %565 = %564.2;
  %566 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 12, 245), float64] */, dtype="int16") /* ty=Tensor[(13, 12, 245), int16] */;
  %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%565, dtype="int16") /* ty=Tensor[(13, 12, 245), int16] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %570 = cast(%565, dtype="int8") /* ty=Tensor[(13, 12, 245), int8] */;
  %571 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(13, 12, 245), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 12, 245), float64] */, dtype="int8") /* ty=Tensor[(13, 12, 245), int8] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %574 = bitwise_xor(%572, %573) /* ty=Tensor[(13, 12, 245), int8] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
  %576 = rsqrt(%575) /* ty=Tensor[(13, 12, 245), float32] */;
  %577 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 12, 245), float64] */, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %581 = floor_divide(%579, %580) /* ty=Tensor[(13, 12, 245), float32] */;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %583 = cast(%576, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %584 = cast(%581, dtype="uint32") /* ty=Tensor[(13, 12, 245), uint32] */;
  %585 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%576, dtype="uint32") /* ty=Tensor[(13, 12, 245), uint32] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %588 = left_shift(%568, %569) /* ty=Tensor[(13, 12, 245), int16] */;
  %589 = cosh(%582) /* ty=Tensor[(13, 12, 245), float64] */;
  %590 = erf(%583) /* ty=Tensor[(13, 12, 245), float64] */;
  %591 = maximum(%586, %587) /* ty=Tensor[(13, 12, 245), uint32] */;
  (%588, %589, %590, %591)
}

def @func_991() -> (Tensor[(2, 7, 13), int16], Tensor[(980), float32], Tensor[(360), float64]) {
  %592 = @func_794() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */;
  %593 = %592.0;
  %594 = cast(%593, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
  %595 = reshape(%594, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), uint32] */;
  %596 = @func_672(%595) /* ty=(Tensor[(2, 7, 13), bool],) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="int16") /* ty=Tensor[(2, 7, 13), int16] */;
  %599 = shape_of(%593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%593, dtype="int16") /* ty=Tensor[(2, 7, 13), int16] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %602 = cast(meta[relay.Constant][34] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %603 = reshape(%602, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %604 = @func_545(%603) /* ty=(Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(16, 12, 9), uint64], Tensor[(5, 7, 7), float64]) */;
  %605 = bitwise_or(%600, %601) /* ty=Tensor[(2, 7, 13), int16] */;
  %606 = %604.1;
  (%605, %606, meta[relay.Constant][34] /* ty=Tensor[(360), float64] */)
}

def @func_3379() -> (Tensor[(2, 7, 13), uint32],) {
  %607 = @func_2097() /* ty=Tensor[(2, 7, 13), uint32] */;
  (%607,)
}

def @func_326(%var_313: Tensor[(3, 14, 7), float64]) -> (Tensor[(3, 14, 7), float64],) {
  %608 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 14, 7), float64] */, dtype="float64") /* ty=Tensor[(3, 14, 7), float64] */;
  %609 = shape_of(%var_313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%var_313, dtype="float64") /* ty=Tensor[(3, 14, 7), float64] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %612 = divide(%610, %611) /* ty=Tensor[(3, 14, 7), float64] */;
  (%612,)
}

def @func_2683(%var_2672: Tensor[(1, 360), float64]) -> (Tensor[(13, 12, 245), bool], Tensor[(9, 10, 4), float64], Tensor[(1, 360), float64], Tensor[(182), uint32], Tensor[(13, 12, 245), float32], Tensor[(2, 7, 13), uint32]) {
  %613 = cast(%var_2672, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %614 = cast(meta[relay.Constant][36] /* ty=Tensor[(182), uint32] */, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %615 = reshape(%613, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %616 = reshape(%614, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %617 = @func_1987(%615, %616) /* ty=(Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) */;
  %618 = @func_1397() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) */;
  %619 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %620 = @func_2656() /* ty=Tensor[(13, 12, 245), bool] */;
  %621 = %617.1;
  %622 = %618.1;
  %623 = %619.0;
  (%620, %621, %var_2672, meta[relay.Constant][36] /* ty=Tensor[(182), uint32] */, %622, %623)
}

def @func_3757(%var_3691: Tensor[(294), float64], %var_3709: Tensor[(675), bool]) -> (Tensor[(2, 7, 13), uint32], Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(15, 5, 9), bool], Tensor[(675), bool], Tensor[(2, 7, 13), bool], Tensor[(360), float64]) {
  %624 = @func_3441() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %625 = cast(%var_3691, dtype="float64") /* ty=Tensor[(294), float64] */;
  %626 = reshape(%625, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
  %627 = @func_326(%626) /* ty=(Tensor[(3, 14, 7), float64],) */;
  %628 = cast(%var_3709, dtype="bool") /* ty=Tensor[(675), bool] */;
  %629 = reshape(%628, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
  %630 = @func_826(%629) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(2, 7, 13), uint32]) */;
  %631 = cast(meta[relay.Constant][37] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %632 = %624.0;
  %633 = cast(%632, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
  %634 = reshape(%631, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %635 = reshape(%633, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %636 = @func_1987(%634, %635) /* ty=(Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) */;
  %637 = %627.0;
  %638 = %630.0;
  %639 = %636.4;
  (%632, %637, %var_3691, %638, %var_3709, %639, meta[relay.Constant][37] /* ty=Tensor[(360), float64] */)
}

def @func_3077(%var_3045: Tensor[(2, 7, 13), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), int64], Tensor[(360), float64], Tensor[(360), float64]) {
  %640 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %641 = @func_2097() /* ty=Tensor[(2, 7, 13), uint32] */;
  %642 = cast(%641, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %643 = acosh(%642) /* ty=Tensor[(2, 7, 13), float64] */;
  %644 = cast(%var_3045, dtype="int64") /* ty=Tensor[(2, 7, 13), int64] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="int64") /* ty=Tensor[(2, 7, 13), int64] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %648 = cast(meta[relay.Constant][38] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %649 = logical_xor(%646, %647) /* ty=Tensor[(2, 7, 13), int64] */;
  %650 = cast(%649, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
  %651 = reshape(%648, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %652 = reshape(%650, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %653 = @func_1987(%651, %652) /* ty=(Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) */;
  %654 = %640.0;
  %655 = %653.2;
  (%654, %649, %655, meta[relay.Constant][38] /* ty=Tensor[(360), float64] */)
}

def @func_4150(%var_4141: int32) -> (Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), bool], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), bool], int32, int32) {
  %656 = @func_2656() /* ty=Tensor[(13, 12, 245), bool] */;
  %657 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 12, 245), bool] */, dtype="int16") /* ty=Tensor[(13, 12, 245), int16] */;
  %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%656, dtype="int16") /* ty=Tensor[(13, 12, 245), int16] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %661 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 12, 245), bool] */, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
  %662 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%656, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %665 = cast(%656, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %666 = cast(%var_4141, dtype="int32") /* ty=int32 */;
  %667 = reshape(%666, newshape=[]) /* ty=int32 */;
  %668 = @func_2084(%667) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(2, 7, 13), uint32], int32, Tensor[(360), float64], Tensor[(432), float32]) */;
  %669 = right_shift(%659, %660) /* ty=Tensor[(13, 12, 245), int16] */;
  %670 = less(%663, %664) /* ty=Tensor[(13, 12, 245), bool] */;
  %671 = sigmoid(%665) /* ty=Tensor[(13, 12, 245), float64] */;
  %672 = @func_2303() /* ty=Tensor[(13, 12, 245), bool] */;
  %673 = %668.3;
  (%669, %670, %671, %672, %673, %var_4141)
}

def @func_2084(%var_2061: int32) -> (Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(2, 7, 13), uint32], int32, Tensor[(360), float64], Tensor[(432), float32]) {
  %674 = @func_1857() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 180), int16]) */;
  %675 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
  %676 = cast(%var_2061, dtype="int32") /* ty=int32 */;
  %677 = cast(meta[relay.Constant][40] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %678 = cast(meta[relay.Constant][41] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %679 = reshape(%676, newshape=[]) /* ty=int32 */;
  %680 = reshape(%677, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %681 = reshape(%678, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %682 = @func_1374(%679, %680, %681) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), uint32], Tensor[(1, 675), bool], Tensor[(2, 7, 13), bool], Tensor[(9, 9, 10), bool], Tensor[(810), int32], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(1, 245), float64], Tensor[(432), float32], Tensor[(2, 7, 13), bool]) */;
  %683 = %674.0;
  %684 = %675.0;
  %685 = %682.0;
  (%683, %684, %685, %var_2061, meta[relay.Constant][40] /* ty=Tensor[(360), float64] */, meta[relay.Constant][41] /* ty=Tensor[(432), float32] */)
}

def @func_36(%var_8: Tensor[(5, 7, 7), float64], %var_13: Tensor[(5, 7, 7), float64]) -> (Tensor[(5, 7, 7), float64],) {
  %686 = cast(%var_8, dtype="float64") /* ty=Tensor[(5, 7, 7), float64] */;
  %687 = log2(%686) /* ty=Tensor[(5, 7, 7), float64] */;
  %688 = cast(%var_13, dtype="bool") /* ty=Tensor[(5, 7, 7), bool] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%687, dtype="bool") /* ty=Tensor[(5, 7, 7), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %692 = logical_or(%690, %691) /* ty=Tensor[(5, 7, 7), bool] */;
  %693 = cast(%692, dtype="float64") /* ty=Tensor[(5, 7, 7), float64] */;
  %694 = asinh(%693) /* ty=Tensor[(5, 7, 7), float64] */;
  (%694,)
}

def @func_826(%var_810: Tensor[(15, 5, 9), bool]) -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(2, 7, 13), uint32]) {
  %695 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 5, 9), bool] */, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %696 = shape_of(%var_810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%var_810, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %699 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 5, 9), bool] */, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %700 = shape_of(%var_810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%var_810, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %703 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %704 = logical_and(%697, %698) /* ty=Tensor[(15, 5, 9), bool] */;
  %705 = floor_mod(%701, %702) /* ty=Tensor[(15, 5, 9), float32] */;
  %706 = %703.0;
  (%704, %705, %706)
}

def @func_3256() -> (Tensor[(2, 7, 13), float32], Tensor[(2, 7, 13), bool]) {
  %707 = @func_2136() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32]) */;
  %708 = @func_2367() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %709 = %708.0;
  %710 = cast(%709, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
  %711 = log10(%710) /* ty=Tensor[(2, 7, 13), float32] */;
  %712 = cast(%709, dtype="bool") /* ty=Tensor[(2, 7, 13), bool] */;
  %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%711, dtype="bool") /* ty=Tensor[(2, 7, 13), bool] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %716 = %707.1;
  %717 = less(%714, %715) /* ty=Tensor[(2, 7, 13), bool] */;
  (%716, %717)
}

def @func_3578(%var_3566: Tensor[(294), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32], Tensor[(3, 14, 7), float64], Tensor[(294), float64]) {
  %718 = @func_3441() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %719 = @func_2363() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 7, 13), float32]) */;
  %720 = cast(%var_3566, dtype="float64") /* ty=Tensor[(294), float64] */;
  %721 = reshape(%720, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
  %722 = @func_326(%721) /* ty=(Tensor[(3, 14, 7), float64],) */;
  %723 = %718.0;
  %724 = %719.1;
  %725 = %722.0;
  (%723, %724, %725, %var_3566)
}

def @func_1549() -> (Tensor[(13, 12, ?), float64], Tensor[(15, 5, 9), bool], Tensor[(675, 1), bool]) {
  %726 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %727 = cast(meta[relay.Constant][43] /* ty=Tensor[(675, 1), bool] */, dtype="bool") /* ty=Tensor[(675, 1), bool] */;
  %728 = reshape(%727, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
  %729 = @func_826(%728) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(2, 7, 13), uint32]) */;
  %730 = %726.0;
  %731 = %729.0;
  (%730, %731, meta[relay.Constant][43] /* ty=Tensor[(675, 1), bool] */)
}

def @func_4438(%var_4426: Tensor[(9, 2, 8), float64]) -> Tensor[(9, 2, 8), float64] {
  %732 = cast(%var_4426, dtype="float64") /* ty=Tensor[(9, 2, 8), float64] */;
  %733 = log2(%732) /* ty=Tensor[(9, 2, 8), float64] */;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(9, 2, 8), float64] */;
  sigmoid(%734) /* ty=Tensor[(9, 2, 8), float64] */
}

def @func_892() -> (Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) {
  %735 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 12, 1), float32] */;
  %736 = log2(%735) /* ty=Tensor[(13, 12, 1), float32] */;
  %737 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 12, 1), float32] */, dtype="float64") /* ty=Tensor[(13, 12, 1), float64] */;
  %738 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%736, dtype="float64") /* ty=Tensor[(13, 12, 1), float64] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %741 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 180), float64] */, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
  %742 = reshape(%741, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %743 = @func_545(%742) /* ty=(Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(16, 12, 9), uint64], Tensor[(5, 7, 7), float64]) */;
  %744 = %743.2;
  %745 = cast(%744, dtype="float64") /* ty=Tensor[(245), float64] */;
  %746 = cast(%736, dtype="float64") /* ty=Tensor[(13, 12, 1), float64] */;
  %747 = mod(%739, %740) /* ty=Tensor[(13, 12, ?), float64] */;
  %748 = divide(%745, %746) /* ty=Tensor[(13, 12, 245), float64] */;
  (%747, meta[relay.Constant][45] /* ty=Tensor[(2, 180), float64] */, %748)
}

def @func_4091(%var_4085: Tensor[(294), float64], %var_4086: Tensor[(360), float64], %var_4087: Tensor[(26, 7), uint32], %var_4088: Tensor[(27, 30), int32]) -> (Tensor[(10, 14, 7), float64], Tensor[(8, 8, 5), int32], Tensor[(2, 216), float32], Tensor[(12, 36), float32], Tensor[(294), float64], Tensor[(294), float64], Tensor[(360), float64], Tensor[(26, 7), uint32], Tensor[(27, 30), int32]) {
  %749 = @func_2781() /* ty=(Tensor[(10, 14, 7), float32],) */;
  %750 = %749.0;
  %751 = cast(%750, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
  %752 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 36), float32] */, dtype="float32") /* ty=Tensor[(12, 36), float32] */;
  %753 = reshape(%752, newshape=[2, 216]) /* ty=Tensor[(2, 216), float32] */;
  %754 = @func_1763(%753) /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32], Tensor[(2, 7, 13), uint32], int32, Tensor[(36, 10), float64], Tensor[(2, 216), float32]) */;
  %755 = cast(%var_4085, dtype="float64") /* ty=Tensor[(294), float64] */;
  %756 = cast(%var_4086, dtype="float64") /* ty=Tensor[(360), float64] */;
  %757 = cast(%var_4087, dtype="uint32") /* ty=Tensor[(26, 7), uint32] */;
  %758 = cast(%var_4088, dtype="int32") /* ty=Tensor[(27, 30), int32] */;
  %759 = reshape(%755, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %760 = reshape(%756, newshape=[180, 2]) /* ty=Tensor[(180, 2), float64] */;
  %761 = reshape(%757, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %762 = reshape(%758, newshape=[1, 810]) /* ty=Tensor[(1, 810), int32] */;
  %763 = @func_2636(%759, %760, %761, %762) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(294), float64], Tensor[(360), float64], Tensor[(180, 2), float64], Tensor[(182), uint32], Tensor[(3, 14, 7), float64], Tensor[(13, 12, 245), bool], Tensor[(9, 9, 10), bool], int32, Tensor[(1, 810), int32]) */;
  %764 = asinh(%751) /* ty=Tensor[(10, 14, 7), float64] */;
  %765 = @func_2191() /* ty=Tensor[(8, 8, 5), int32] */;
  %766 = %754.5;
  %767 = %763.1;
  (%764, %765, %766, meta[relay.Constant][46] /* ty=Tensor[(12, 36), float32] */, %767, %var_4085, %var_4086, %var_4087, %var_4088)
}

def @func_1857() -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 180), int16]) {
  %768 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %769 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %770 = %769.1;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
  %772 = erf(%771) /* ty=Tensor[(2, 180), float64] */;
  %773 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 180), float64] */, dtype="bool") /* ty=Tensor[(2, 180), bool] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(2), int32] */;
  %775 = cast(%772, dtype="bool") /* ty=Tensor[(2, 180), bool] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %777 = not_equal(%775, %776) /* ty=Tensor[(2, 180), bool] */;
  %778 = cast(%770, dtype="int16") /* ty=Tensor[(2, 180), int16] */;
  %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(2), int32] */;
  %780 = cast(%777, dtype="int16") /* ty=Tensor[(2, 180), int16] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %782 = %768.0;
  %783 = logical_xor(%780, %781) /* ty=Tensor[(2, 180), int16] */;
  (%782, %783)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2641(%var_2637: Tensor[(294), float64], %var_2638: Tensor[(180, 2), float64], %var_2639: Tensor[(182), uint32], %var_2640: Tensor[(1, 810), int32]) -> (Tensor[(15, 5, 9), bool], Tensor[(294), float64], Tensor[(360), float64], Tensor[(180, 2), float64], Tensor[(182), uint32], Tensor[(3, 14, 7), float64], Tensor[(13, 12, 245), bool], Tensor[(9, 9, 10), bool], int32, Tensor[(1, 810), int32]) {
  %20 = fn (%var_2561: Tensor[(294), float64], %var_2572: Tensor[(180, 2), float64], %var_2573: Tensor[(182), uint32], %var_2634: Tensor[(1, 810), int32]) -> (Tensor[(15, 5, 9), bool], Tensor[(294), float64], Tensor[(360), float64], Tensor[(180, 2), float64], Tensor[(182), uint32], Tensor[(3, 14, 7), float64], Tensor[(13, 12, 245), bool], Tensor[(9, 9, 10), bool], int32, Tensor[(1, 810), int32]) {
    %0 = @func_1549() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(15, 5, 9), bool], Tensor[(675, 1), bool]) */;
    %1 = cast(%var_2572, dtype="float64") /* ty=Tensor[(180, 2), float64] */;
    %2 = cast(%var_2573, dtype="uint32") /* ty=Tensor[(182), uint32] */;
    %3 = reshape(%1, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %4 = reshape(%2, newshape=[182]) /* ty=Tensor[(182), uint32] */;
    %5 = @func_1987(%3, %4) /* ty=(Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) */;
    %6 = cast(%var_2561, dtype="float64") /* ty=Tensor[(294), float64] */;
    %7 = reshape(%6, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
    %8 = @func_326(%7) /* ty=(Tensor[(3, 14, 7), float64],) */;
    %9 = %8.0;
    %10 = cast(%9, dtype="float64") /* ty=Tensor[(3, 14, 7), float64] */;
    %11 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %12 = cast(%var_2634, dtype="int32") /* ty=Tensor[(1, 810), int32] */;
    %13 = reshape(%11, newshape=[]) /* ty=int32 */;
    %14 = reshape(%12, newshape=[9, 9, 10]) /* ty=Tensor[(9, 9, 10), int32] */;
    %15 = %0.1;
    %16 = %5.2;
    %17 = atan(%10) /* ty=Tensor[(3, 14, 7), float64] */;
    %18 = @func_1953() /* ty=Tensor[(13, 12, 245), bool] */;
    %19 = @func_846(%13, %14) /* ty=Tensor[(9, 9, 10), bool] */;
    (%15, %var_2561, %16, %var_2572, %var_2573, %17, %18, %19, 6 /* ty=int32 */, %var_2634)
  };
  %20(%var_2637, %var_2638, %var_2639, %var_2640) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(294), float64], Tensor[(360), float64], Tensor[(180, 2), float64], Tensor[(182), uint32], Tensor[(3, 14, 7), float64], Tensor[(13, 12, 245), bool], Tensor[(9, 9, 10), bool], int32, Tensor[(1, 810), int32]) */
}

def @func_624() -> (Tensor[(2, 7, 13), uint32],) {
  %28 = fn () -> (Tensor[(2, 7, 13), uint32],) {
    %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
    %22 = exp(%21) /* ty=Tensor[(2, 7, 13), float32] */;
    %23 = cast(%22, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
    %24 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(2, 7, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 7, 13), float32] */, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
    %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %27 = right_shift(%25, %26) /* ty=Tensor[(2, 7, 13), uint32] */;
    (%27,)
  };
  %28() /* ty=(Tensor[(2, 7, 13), uint32],) */
}

def @func_3222(%var_3220: Tensor[(245, 1), float64]) -> (Tensor[(9, 16, 3), float32], Tensor[(5, 7, 7), float64], Tensor[(245, 1), float64], Tensor[(12, 36), float32], Tensor[(13, 12, 245), bool], Tensor[(13, 12, 245), float64]) {
  @func_3219(%var_3220) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(5, 7, 7), float64], Tensor[(245, 1), float64], Tensor[(12, 36), float32], Tensor[(13, 12, 245), bool], Tensor[(13, 12, 245), float64]) */
}

def @func_3442() -> (Tensor[(2, 7, 13), uint32],) {
  %31 = fn () -> (Tensor[(2, 7, 13), uint32],) {
    %29 = @func_3379() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %30 = %29.0;
    (%30,)
  };
  %31() /* ty=(Tensor[(2, 7, 13), uint32],) */
}

def @func_2206() -> Tensor[(13, 12, 245), float64] {
  @func_2204() /* ty=Tensor[(13, 12, 245), float64] */
}

def @func_826(%var_810: Tensor[(15, 5, 9), bool]) -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(2, 7, 13), uint32]) {
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 5, 9), bool] */, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %33 = shape_of(%var_810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%var_810, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 5, 9), bool] */, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %37 = shape_of(%var_810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%var_810, dtype="float32") /* ty=Tensor[(15, 5, 9), float32] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %40 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %41 = logical_and(%34, %35) /* ty=Tensor[(15, 5, 9), bool] */;
  %42 = floor_mod(%38, %39) /* ty=Tensor[(15, 5, 9), float32] */;
  %43 = %40.0;
  (%41, %42, %43)
}

def @func_36(%var_8: Tensor[(5, 7, 7), float64], %var_13: Tensor[(5, 7, 7), float64]) -> (Tensor[(5, 7, 7), float64],) {
  %44 = cast(%var_8, dtype="float64") /* ty=Tensor[(5, 7, 7), float64] */;
  %45 = log2(%44) /* ty=Tensor[(5, 7, 7), float64] */;
  %46 = cast(%var_13, dtype="bool") /* ty=Tensor[(5, 7, 7), bool] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="bool") /* ty=Tensor[(5, 7, 7), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %50 = logical_or(%48, %49) /* ty=Tensor[(5, 7, 7), bool] */;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(5, 7, 7), float64] */;
  %52 = asinh(%51) /* ty=Tensor[(5, 7, 7), float64] */;
  (%52,)
}

def @func_1514() -> (Tensor[(2, 7, 13), float32],) {
  @func_1512() /* ty=(Tensor[(2, 7, 13), float32],) */
}

def @func_2364() -> (Tensor[(13, 12, ?), float64], Tensor[(2, 7, 13), float32]) {
  %57 = fn () -> (Tensor[(13, 12, ?), float64], Tensor[(2, 7, 13), float32]) {
    %53 = @func_2021() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(7, 35), float64]) */;
    %54 = @func_2136() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32]) */;
    %55 = %53.0;
    %56 = %54.1;
    (%55, %56)
  };
  %57() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 7, 13), float32]) */
}

def @func_3760(%var_3758: Tensor[(294), float64], %var_3759: Tensor[(675), bool]) -> (Tensor[(2, 7, 13), uint32], Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(15, 5, 9), bool], Tensor[(675), bool], Tensor[(2, 7, 13), bool], Tensor[(360), float64]) {
  %74 = fn (%var_3691: Tensor[(294), float64], %var_3709: Tensor[(675), bool]) -> (Tensor[(2, 7, 13), uint32], Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(15, 5, 9), bool], Tensor[(675), bool], Tensor[(2, 7, 13), bool], Tensor[(360), float64]) {
    %58 = @func_3441() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %59 = cast(%var_3691, dtype="float64") /* ty=Tensor[(294), float64] */;
    %60 = reshape(%59, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
    %61 = @func_326(%60) /* ty=(Tensor[(3, 14, 7), float64],) */;
    %62 = cast(%var_3709, dtype="bool") /* ty=Tensor[(675), bool] */;
    %63 = reshape(%62, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
    %64 = @func_826(%63) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(2, 7, 13), uint32]) */;
    %65 = cast(meta[relay.Constant][2] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %66 = %58.0;
    %67 = cast(%66, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
    %68 = reshape(%65, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %69 = reshape(%67, newshape=[182]) /* ty=Tensor[(182), uint32] */;
    %70 = @func_1987(%68, %69) /* ty=(Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) */;
    %71 = %61.0;
    %72 = %64.0;
    %73 = %70.4;
    (%66, %71, %var_3691, %72, %var_3709, %73, meta[relay.Constant][2] /* ty=Tensor[(360), float64] */)
  };
  %74(%var_3758, %var_3759) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(15, 5, 9), bool], Tensor[(675), bool], Tensor[(2, 7, 13), bool], Tensor[(360), float64]) */
}

def @func_1490() -> Tensor[(2, 7, 13), uint32] {
  %76 = fn () -> Tensor[(2, 7, 13), uint32] {
    %75 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %75.0
  };
  %76() /* ty=Tensor[(2, 7, 13), uint32] */
}

def @func_1720(%var_1718: Tensor[(10, 11, 10), float32]) -> (Tensor[(10, 11, 10), float32], Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64]) {
  @func_1717(%var_1718) /* ty=(Tensor[(10, 11, 10), float32], Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64]) */
}

def @func_4384() -> (Tensor[(13, 12, 245), bool], Tensor[(7, 16, 15), float32], Tensor[(84, 20), uint8]) {
  %84 = fn () -> (Tensor[(13, 12, 245), bool], Tensor[(7, 16, 15), float32], Tensor[(84, 20), uint8]) {
    %77 = cast(meta[relay.Constant][3] /* ty=Tensor[(84, 20), uint8] */, dtype="uint8") /* ty=Tensor[(84, 20), uint8] */;
    %78 = cast(meta[relay.Constant][3] /* ty=Tensor[(84, 20), uint8] */, dtype="uint8") /* ty=Tensor[(84, 20), uint8] */;
    %79 = reshape(%77, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), uint8] */;
    %80 = reshape(%78, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), uint8] */;
    %81 = @func_1687(%79, %80) /* ty=(Tensor[(7, 16, 15), bool], Tensor[(7, 16, 15), float32]) */;
    %82 = @func_2656() /* ty=Tensor[(13, 12, 245), bool] */;
    %83 = %81.1;
    (%82, %83, meta[relay.Constant][3] /* ty=Tensor[(84, 20), uint8] */)
  };
  %84() /* ty=(Tensor[(13, 12, 245), bool], Tensor[(7, 16, 15), float32], Tensor[(84, 20), uint8]) */
}

def @func_3257() -> (Tensor[(2, 7, 13), float32], Tensor[(2, 7, 13), bool]) {
  %96 = fn () -> (Tensor[(2, 7, 13), float32], Tensor[(2, 7, 13), bool]) {
    %85 = @func_2136() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32]) */;
    %86 = @func_2367() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %87 = %86.0;
    %88 = cast(%87, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
    %89 = log10(%88) /* ty=Tensor[(2, 7, 13), float32] */;
    %90 = cast(%87, dtype="bool") /* ty=Tensor[(2, 7, 13), bool] */;
    %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
    %92 = cast(%89, dtype="bool") /* ty=Tensor[(2, 7, 13), bool] */;
    %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %94 = %85.1;
    %95 = less(%92, %93) /* ty=Tensor[(2, 7, 13), bool] */;
    (%94, %95)
  };
  %96() /* ty=(Tensor[(2, 7, 13), float32], Tensor[(2, 7, 13), bool]) */
}

def @func_2204() -> Tensor[(13, 12, 245), float64] {
  %97 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
  %97.0
}

def @func_3919() -> (Tensor[(13, 12, 245), bool], Tensor[(360), float64], Tensor[(15, 5, 9), bool]) {
  %103 = fn () -> (Tensor[(13, 12, 245), bool], Tensor[(360), float64], Tensor[(15, 5, 9), bool]) {
    %98 = @func_3771() /* ty=(Tensor[(360), float64], Tensor[(2, 7, 13), float64]) */;
    %99 = @func_1549() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(15, 5, 9), bool], Tensor[(675, 1), bool]) */;
    %100 = @func_2656() /* ty=Tensor[(13, 12, 245), bool] */;
    %101 = %98.0;
    %102 = %99.1;
    (%100, %101, %102)
  };
  %103() /* ty=(Tensor[(13, 12, 245), bool], Tensor[(360), float64], Tensor[(15, 5, 9), bool]) */
}

def @func_4438(%var_4426: Tensor[(9, 2, 8), float64]) -> Tensor[(9, 2, 8), float64] {
  %104 = cast(%var_4426, dtype="float64") /* ty=Tensor[(9, 2, 8), float64] */;
  %105 = log2(%104) /* ty=Tensor[(9, 2, 8), float64] */;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(9, 2, 8), float64] */;
  sigmoid(%106) /* ty=Tensor[(9, 2, 8), float64] */
}

def @func_4821() -> Tensor[(2, 180), int16] {
  %108 = fn () -> Tensor[(2, 180), int16] {
    %107 = @func_1857() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 180), int16]) */;
    %107.1
  };
  %108() /* ty=Tensor[(2, 180), int16] */
}

def @func_3630(%var_3613: Tensor[(13, 12, 245), bool]) -> (Tensor[(13, 12, 245), uint16],) {
  %109 = @func_2656() /* ty=Tensor[(13, 12, 245), bool] */;
  %110 = cast(%var_3613, dtype="uint16") /* ty=Tensor[(13, 12, 245), uint16] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="uint16") /* ty=Tensor[(13, 12, 245), uint16] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %114 = logical_xor(%112, %113) /* ty=Tensor[(13, 12, 245), uint16] */;
  (%114,)
}

def @func_2138() -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32]) {
  @func_2136() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32]) */
}

def @func_3808(%var_3787: Tensor[(13, 360), float64], %var_3792: Tensor[(13, 360), uint8]) -> (Tensor[(13, 12, 245), float64], Tensor[(2, 7, 13), uint32], Tensor[(13, 360), float64], Tensor[(1, 360), float64], Tensor[(13, 12, 245), float64]) {
  %115 = @func_1205() /* ty=(Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), uint32]) */;
  %116 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 360), float64] */, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %117 = reshape(%116, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %118 = @func_3507(%117) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(245), float64], Tensor[(360), float64], Tensor[(980), float32]) */;
  %119 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 360), float64] */, dtype="uint8") /* ty=Tensor[(1, 360), uint8] */;
  %120 = cast(%var_3787, dtype="uint8") /* ty=Tensor[(13, 360), uint8] */;
  %121 = bitwise_xor(%119, %120) /* ty=Tensor[(13, 360), uint8] */;
  %122 = cast(%var_3792, dtype="float64") /* ty=Tensor[(13, 360), float64] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(2), int32] */;
  %124 = cast(%121, dtype="float64") /* ty=Tensor[(13, 360), float64] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %126 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 360), float64] */, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %127 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
  %128 = %115.1;
  %129 = %118.0;
  %130 = mod(%124, %125) /* ty=Tensor[(13, 360), float64] */;
  %131 = rsqrt(%126) /* ty=Tensor[(1, 360), float64] */;
  %132 = %127.0;
  (%128, %129, %130, %131, %132)
}

def @func_4150(%var_4141: int32) -> (Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), bool], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), bool], int32, int32) {
  %133 = @func_2656() /* ty=Tensor[(13, 12, 245), bool] */;
  %134 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 12, 245), bool] */, dtype="int16") /* ty=Tensor[(13, 12, 245), int16] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="int16") /* ty=Tensor[(13, 12, 245), int16] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %138 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 12, 245), bool] */, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
  %139 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%133, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %142 = cast(%133, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %143 = cast(%var_4141, dtype="int32") /* ty=int32 */;
  %144 = reshape(%143, newshape=[]) /* ty=int32 */;
  %145 = @func_2084(%144) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(2, 7, 13), uint32], int32, Tensor[(360), float64], Tensor[(432), float32]) */;
  %146 = right_shift(%136, %137) /* ty=Tensor[(13, 12, 245), int16] */;
  %147 = less(%140, %141) /* ty=Tensor[(13, 12, 245), bool] */;
  %148 = sigmoid(%142) /* ty=Tensor[(13, 12, 245), float64] */;
  %149 = @func_2303() /* ty=Tensor[(13, 12, 245), bool] */;
  %150 = %145.3;
  (%146, %147, %148, %149, %150, %var_4141)
}

def @func_2657() -> Tensor[(13, 12, 245), bool] {
  %151 = fn () -> Tensor[(13, 12, 245), bool] {
    @func_1953() /* ty=Tensor[(13, 12, 245), bool] */
  };
  %151() /* ty=Tensor[(13, 12, 245), bool] */
}

def @func_3140() -> (Tensor[(1, 4, 3), float64],) {
  @func_3138() /* ty=(Tensor[(1, 4, 3), float64],) */
}

def @func_5011(%var_5010: Tensor[(294), float64]) -> (Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(13, 12, 245), int16], Tensor[(16, 5, 9), int8]) {
  %167 = fn (%var_4972: Tensor[(294), float64]) -> (Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(13, 12, 245), int16], Tensor[(16, 5, 9), int8]) {
    %152 = cast(%var_4972, dtype="float64") /* ty=Tensor[(294), float64] */;
    %153 = reshape(%152, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
    %154 = @func_326(%153) /* ty=(Tensor[(3, 14, 7), float64],) */;
    %155 = @func_2754() /* ty=(Tensor[(13, 12, 245), int16],) */;
    %156 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
    %157 = rsqrt(%156) /* ty=Tensor[(16, 5, 9), float32] */;
    %158 = cast(%157, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
    %159 = sigmoid(%158) /* ty=Tensor[(16, 5, 9), float32] */;
    %160 = cast(%157, dtype="int8") /* ty=Tensor[(16, 5, 9), int8] */;
    %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
    %162 = cast(%159, dtype="int8") /* ty=Tensor[(16, 5, 9), int8] */;
    %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %164 = %154.0;
    %165 = %155.0;
    %166 = logical_xor(%162, %163) /* ty=Tensor[(16, 5, 9), int8] */;
    (%164, %var_4972, %165, %166)
  };
  %167(%var_5010) /* ty=(Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(13, 12, 245), int16], Tensor[(16, 5, 9), int8]) */
}

def @func_3812(%var_3810: Tensor[(13, 360), float64], %var_3811: Tensor[(13, 360), uint8]) -> (Tensor[(13, 12, 245), float64], Tensor[(2, 7, 13), uint32], Tensor[(13, 360), float64], Tensor[(1, 360), float64], Tensor[(13, 12, 245), float64]) {
  @func_3808(%var_3810, %var_3811) /* ty=(Tensor[(13, 12, 245), float64], Tensor[(2, 7, 13), uint32], Tensor[(13, 360), float64], Tensor[(1, 360), float64], Tensor[(13, 12, 245), float64]) */
}

def @func_2782() -> (Tensor[(10, 14, 7), float32],) {
  %170 = fn () -> (Tensor[(10, 14, 7), float32],) {
    %168 = @func_2021() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(7, 35), float64]) */;
    %169 = %168.1;
    (%169,)
  };
  %170() /* ty=(Tensor[(10, 14, 7), float32],) */
}

def @func_4096(%var_4092: Tensor[(294), float64], %var_4093: Tensor[(360), float64], %var_4094: Tensor[(26, 7), uint32], %var_4095: Tensor[(27, 30), int32]) -> (Tensor[(10, 14, 7), float64], Tensor[(8, 8, 5), int32], Tensor[(2, 216), float32], Tensor[(12, 36), float32], Tensor[(294), float64], Tensor[(294), float64], Tensor[(360), float64], Tensor[(26, 7), uint32], Tensor[(27, 30), int32]) {
  %190 = fn (%var_4085: Tensor[(294), float64], %var_4086: Tensor[(360), float64], %var_4087: Tensor[(26, 7), uint32], %var_4088: Tensor[(27, 30), int32]) -> (Tensor[(10, 14, 7), float64], Tensor[(8, 8, 5), int32], Tensor[(2, 216), float32], Tensor[(12, 36), float32], Tensor[(294), float64], Tensor[(294), float64], Tensor[(360), float64], Tensor[(26, 7), uint32], Tensor[(27, 30), int32]) {
    %171 = @func_2781() /* ty=(Tensor[(10, 14, 7), float32],) */;
    %172 = %171.0;
    %173 = cast(%172, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
    %174 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 36), float32] */, dtype="float32") /* ty=Tensor[(12, 36), float32] */;
    %175 = reshape(%174, newshape=[2, 216]) /* ty=Tensor[(2, 216), float32] */;
    %176 = @func_1763(%175) /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32], Tensor[(2, 7, 13), uint32], int32, Tensor[(36, 10), float64], Tensor[(2, 216), float32]) */;
    %177 = cast(%var_4085, dtype="float64") /* ty=Tensor[(294), float64] */;
    %178 = cast(%var_4086, dtype="float64") /* ty=Tensor[(360), float64] */;
    %179 = cast(%var_4087, dtype="uint32") /* ty=Tensor[(26, 7), uint32] */;
    %180 = cast(%var_4088, dtype="int32") /* ty=Tensor[(27, 30), int32] */;
    %181 = reshape(%177, newshape=[294]) /* ty=Tensor[(294), float64] */;
    %182 = reshape(%178, newshape=[180, 2]) /* ty=Tensor[(180, 2), float64] */;
    %183 = reshape(%179, newshape=[182]) /* ty=Tensor[(182), uint32] */;
    %184 = reshape(%180, newshape=[1, 810]) /* ty=Tensor[(1, 810), int32] */;
    %185 = @func_2636(%181, %182, %183, %184) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(294), float64], Tensor[(360), float64], Tensor[(180, 2), float64], Tensor[(182), uint32], Tensor[(3, 14, 7), float64], Tensor[(13, 12, 245), bool], Tensor[(9, 9, 10), bool], int32, Tensor[(1, 810), int32]) */;
    %186 = asinh(%173) /* ty=Tensor[(10, 14, 7), float64] */;
    %187 = @func_2191() /* ty=Tensor[(8, 8, 5), int32] */;
    %188 = %176.5;
    %189 = %185.1;
    (%186, %187, %188, meta[relay.Constant][7] /* ty=Tensor[(12, 36), float32] */, %189, %var_4085, %var_4086, %var_4087, %var_4088)
  };
  %190(%var_4092, %var_4093, %var_4094, %var_4095) /* ty=(Tensor[(10, 14, 7), float64], Tensor[(8, 8, 5), int32], Tensor[(2, 216), float32], Tensor[(12, 36), float32], Tensor[(294), float64], Tensor[(294), float64], Tensor[(360), float64], Tensor[(26, 7), uint32], Tensor[(27, 30), int32]) */
}

def @main(%var_5092: Tensor[(9, 15, 16), bool], %var_5093: Tensor[(9, 15, 16), bool]) -> (Tensor[(9, 15, 16), bool],) {
  %191 = cast(%var_5093, dtype="bool") /* ty=Tensor[(9, 15, 16), bool] */;
  %192 = shape_of(%var_5092, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%var_5092, dtype="bool") /* ty=Tensor[(9, 15, 16), bool] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %195 = logical_and(%193, %194) /* ty=Tensor[(9, 15, 16), bool] */;
  (%195,)
}

def @func_1100() -> (Tensor[(13, 12, 245), float64],) {
  %196 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %197 = %196.2;
  (%197,)
}

def @func_1687(%var_1658: Tensor[(7, 16, 15), uint8], %var_1659: Tensor[(7, 16, 15), uint8]) -> (Tensor[(7, 16, 15), bool], Tensor[(7, 16, 15), float32]) {
  %198 = cast(%var_1659, dtype="uint8") /* ty=Tensor[(7, 16, 15), uint8] */;
  %199 = shape_of(%var_1658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%var_1658, dtype="uint8") /* ty=Tensor[(7, 16, 15), uint8] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %202 = add(%200, %201) /* ty=Tensor[(7, 16, 15), uint8] */;
  %203 = cast(%var_1659, dtype="bool") /* ty=Tensor[(7, 16, 15), bool] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%202, dtype="bool") /* ty=Tensor[(7, 16, 15), bool] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %207 = cast(%var_1659, dtype="float32") /* ty=Tensor[(7, 16, 15), float32] */;
  %208 = less_equal(%205, %206) /* ty=Tensor[(7, 16, 15), bool] */;
  %209 = exp(%207) /* ty=Tensor[(7, 16, 15), float32] */;
  (%208, %209)
}

def @func_3633(%var_3631: Tensor[(13, 12, 245), bool]) -> (Tensor[(13, 12, 245), uint16],) {
  @func_3630(%var_3631) /* ty=(Tensor[(13, 12, 245), uint16],) */
}

def @func_1551() -> (Tensor[(13, 12, ?), float64], Tensor[(15, 5, 9), bool], Tensor[(675, 1), bool]) {
  @func_1549() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(15, 5, 9), bool], Tensor[(675, 1), bool]) */
}

def @func_2717(%var_2701: Tensor[(2, 7, 13), uint32]) -> (Tensor[(2, 7, 13), int32],) {
  %210 = @func_2097() /* ty=Tensor[(2, 7, 13), uint32] */;
  %211 = cast(%var_2701, dtype="int32") /* ty=Tensor[(2, 7, 13), int32] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%210, dtype="int32") /* ty=Tensor[(2, 7, 13), int32] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %215 = minimum(%213, %214) /* ty=Tensor[(2, 7, 13), int32] */;
  (%215,)
}

def @func_3381() -> (Tensor[(2, 7, 13), uint32],) {
  @func_3379() /* ty=(Tensor[(2, 7, 13), uint32],) */
}

def @func_2193() -> Tensor[(8, 8, 5), int32] {
  @func_2191() /* ty=Tensor[(8, 8, 5), int32] */
}

def @func_894() -> (Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) {
  @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */
}

def @func_40(%var_38: Tensor[(5, 7, 7), float64], %var_39: Tensor[(5, 7, 7), float64]) -> (Tensor[(5, 7, 7), float64],) {
  @func_36(%var_38, %var_39) /* ty=(Tensor[(5, 7, 7), float64],) */
}

def @func_2936() -> Tensor[(13, 12, 245), float32] {
  %218 = fn () -> Tensor[(13, 12, 245), float32] {
    %216 = @func_1953() /* ty=Tensor[(13, 12, 245), bool] */;
    %217 = cast(%216, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
    log10(%217) /* ty=Tensor[(13, 12, 245), float32] */
  };
  %218() /* ty=Tensor[(13, 12, 245), float32] */
}

def @func_4345() -> Tensor[(2, 7, 13), float64] {
  @func_4343() /* ty=Tensor[(2, 7, 13), float64] */
}

def @func_3953(%var_3951: Tensor[(12, 14, 14), uint16], %var_3952: Tensor[(12, 14, 14), uint16]) -> Tensor[(12, 14, 14), bool] {
  %228 = fn (%var_3940: Tensor[(12, 14, 14), uint16], %var_3941: Tensor[(12, 14, 14), uint16]) -> Tensor[(12, 14, 14), bool] {
    %219 = cast(%var_3941, dtype="uint16") /* ty=Tensor[(12, 14, 14), uint16] */;
    %220 = shape_of(%var_3940, dtype="int32") /* ty=Tensor[(3), int32] */;
    %221 = cast(%var_3940, dtype="uint16") /* ty=Tensor[(12, 14, 14), uint16] */;
    %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %223 = right_shift(%221, %222) /* ty=Tensor[(12, 14, 14), uint16] */;
    %224 = cast(%var_3941, dtype="bool") /* ty=Tensor[(12, 14, 14), bool] */;
    %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
    %226 = cast(%223, dtype="bool") /* ty=Tensor[(12, 14, 14), bool] */;
    %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%226, %227) /* ty=Tensor[(12, 14, 14), bool] */
  };
  %228(%var_3951, %var_3952) /* ty=Tensor[(12, 14, 14), bool] */
}

def @func_4760(%var_4757: Tensor[(8, 2, 4), float64], %var_4758: Tensor[(360), float64], %var_4759: int32) -> (Tensor[(245), float64], Tensor[(360), float64], Tensor[(490, 2), float32], Tensor[(2, 7, 13), uint32], int32, Tensor[(8, 2, 4), int16], Tensor[(10, 14, 7), float32]) {
  %250 = fn (%var_4678: Tensor[(8, 2, 4), float64], %var_4699: Tensor[(360), float64], %var_4725: int32) -> (Tensor[(245), float64], Tensor[(360), float64], Tensor[(490, 2), float32], Tensor[(2, 7, 13), uint32], int32, Tensor[(8, 2, 4), int16], Tensor[(10, 14, 7), float32]) {
    %229 = cast(%var_4699, dtype="float64") /* ty=Tensor[(360), float64] */;
    %230 = cast(meta[relay.Constant][8] /* ty=Tensor[(490, 2), float32] */, dtype="float32") /* ty=Tensor[(490, 2), float32] */;
    %231 = reshape(%229, newshape=[9, 10, 4]) /* ty=Tensor[(9, 10, 4), float64] */;
    %232 = reshape(%230, newshape=[980]) /* ty=Tensor[(980), float32] */;
    %233 = @func_275(%231, %232) /* ty=(Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) */;
    %234 = cast(%var_4725, dtype="int32") /* ty=int32 */;
    %235 = reshape(%234, newshape=[]) /* ty=int32 */;
    %236 = @func_2084(%235) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(2, 7, 13), uint32], int32, Tensor[(360), float64], Tensor[(432), float32]) */;
    %237 = cast(%var_4678, dtype="float64") /* ty=Tensor[(8, 2, 4), float64] */;
    %238 = cosh(%237) /* ty=Tensor[(8, 2, 4), float64] */;
    %239 = cast(%238, dtype="float32") /* ty=Tensor[(8, 2, 4), float32] */;
    %240 = log(%239) /* ty=Tensor[(8, 2, 4), float32] */;
    %241 = cast(%240, dtype="int16") /* ty=Tensor[(8, 2, 4), int16] */;
    %242 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
    %243 = cast(%238, dtype="int16") /* ty=Tensor[(8, 2, 4), int16] */;
    %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %245 = @func_2781() /* ty=(Tensor[(10, 14, 7), float32],) */;
    %246 = %233.2;
    %247 = %236.2;
    %248 = right_shift(%243, %244) /* ty=Tensor[(8, 2, 4), int16] */;
    %249 = %245.0;
    (%246, %var_4699, meta[relay.Constant][8] /* ty=Tensor[(490, 2), float32] */, %247, %var_4725, %248, %249)
  };
  %250(%var_4757, %var_4758, %var_4759) /* ty=(Tensor[(245), float64], Tensor[(360), float64], Tensor[(490, 2), float32], Tensor[(2, 7, 13), uint32], int32, Tensor[(8, 2, 4), int16], Tensor[(10, 14, 7), float32]) */
}

def @func_1607(%var_1567: Tensor[(13, 12, 8), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 8), uint8], Tensor[(2, 7, 13), float32], Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64]) {
  %251 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %252 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %253 = %252.0;
  %254 = cast(%253, dtype="uint8") /* ty=Tensor[(13, 12, ?), uint8] */;
  %255 = cast(%var_1567, dtype="uint8") /* ty=Tensor[(13, 12, 8), uint8] */;
  %256 = @func_1512() /* ty=(Tensor[(2, 7, 13), float32],) */;
  %257 = @func_794() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */;
  %258 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
  %259 = %251.0;
  %260 = right_shift(%254, %255) /* ty=Tensor[(13, 12, 8), uint8] */;
  %261 = %256.0;
  %262 = %257.1;
  %263 = %258.0;
  (%259, %260, %261, %262, %263)
}

def @func_892() -> (Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) {
  %264 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 12, 1), float32] */;
  %265 = log2(%264) /* ty=Tensor[(13, 12, 1), float32] */;
  %266 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 12, 1), float32] */, dtype="float64") /* ty=Tensor[(13, 12, 1), float64] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="float64") /* ty=Tensor[(13, 12, 1), float64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %270 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 180), float64] */, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
  %271 = reshape(%270, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %272 = @func_545(%271) /* ty=(Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(16, 12, 9), uint64], Tensor[(5, 7, 7), float64]) */;
  %273 = %272.2;
  %274 = cast(%273, dtype="float64") /* ty=Tensor[(245), float64] */;
  %275 = cast(%265, dtype="float64") /* ty=Tensor[(13, 12, 1), float64] */;
  %276 = mod(%268, %269) /* ty=Tensor[(13, 12, ?), float64] */;
  %277 = divide(%274, %275) /* ty=Tensor[(13, 12, 245), float64] */;
  (%276, meta[relay.Constant][10] /* ty=Tensor[(2, 180), float64] */, %277)
}

def @func_328(%var_327: Tensor[(3, 14, 7), float64]) -> (Tensor[(3, 14, 7), float64],) {
  %283 = fn (%var_313: Tensor[(3, 14, 7), float64]) -> (Tensor[(3, 14, 7), float64],) {
    %278 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 14, 7), float64] */, dtype="float64") /* ty=Tensor[(3, 14, 7), float64] */;
    %279 = shape_of(%var_313, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%var_313, dtype="float64") /* ty=Tensor[(3, 14, 7), float64] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %282 = divide(%280, %281) /* ty=Tensor[(3, 14, 7), float64] */;
    (%282,)
  };
  %283(%var_327) /* ty=(Tensor[(3, 14, 7), float64],) */
}

def @func_3161() -> Tensor[(10, 14, 7), float32] {
  @func_3159() /* ty=Tensor[(10, 14, 7), float32] */
}

def @func_1475(%var_1473: Tensor[(2, 7, 13), uint32], %var_1474: int32) -> (Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), float32], Tensor[(9, 9, 10), bool], int32, Tensor[(810, 1), int32]) {
  %303 = fn (%var_1448: Tensor[(2, 7, 13), uint32], %var_1467: int32) -> (Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), float32], Tensor[(9, 9, 10), bool], int32, Tensor[(810, 1), int32]) {
    %284 = @func_794() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */;
    %285 = %284.1;
    %286 = cast(%var_1448, dtype="uint64") /* ty=Tensor[(2, 7, 13), uint64] */;
    %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
    %288 = cast(%285, dtype="uint64") /* ty=Tensor[(2, 7, 13), uint64] */;
    %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %290 = multiply(%288, %289) /* ty=Tensor[(2, 7, 13), uint64] */;
    %291 = cast(%var_1448, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
    %292 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
    %293 = cast(%290, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
    %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %295 = cast(%290, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
    %296 = cast(%var_1467, dtype="int32") /* ty=int32 */;
    %297 = cast(meta[relay.Constant][12] /* ty=Tensor[(810, 1), int32] */, dtype="int32") /* ty=Tensor[(810, 1), int32] */;
    %298 = reshape(%296, newshape=[]) /* ty=int32 */;
    %299 = reshape(%297, newshape=[9, 9, 10]) /* ty=Tensor[(9, 9, 10), int32] */;
    %300 = add(%293, %294) /* ty=Tensor[(2, 7, 13), float64] */;
    %301 = sin(%295) /* ty=Tensor[(2, 7, 13), float32] */;
    %302 = @func_846(%298, %299) /* ty=Tensor[(9, 9, 10), bool] */;
    (%300, %301, %302, %var_1467, meta[relay.Constant][12] /* ty=Tensor[(810, 1), int32] */)
  };
  %303(%var_1473, %var_1474) /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), float32], Tensor[(9, 9, 10), bool], int32, Tensor[(810, 1), int32]) */
}

def @func_2098() -> Tensor[(2, 7, 13), uint32] {
  %304 = fn () -> Tensor[(2, 7, 13), uint32] {
    @func_1489() /* ty=Tensor[(2, 7, 13), uint32] */
  };
  %304() /* ty=Tensor[(2, 7, 13), uint32] */
}

def @func_1398() -> (Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) {
  %313 = fn () -> (Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) {
    %305 = @func_794() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */;
    %306 = @func_1205() /* ty=(Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), uint32]) */;
    %307 = %306.1;
    %308 = cast(%307, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
    %309 = acos(%308) /* ty=Tensor[(13, 12, 245), float32] */;
    %310 = cast(%309, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
    %311 = %305.0;
    %312 = asinh(%310) /* ty=Tensor[(13, 12, 245), float32] */;
    (%311, %312)
  };
  %313() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) */
}

def @func_2304() -> Tensor[(13, 12, 245), bool] {
  %321 = fn () -> Tensor[(13, 12, 245), bool] {
    %314 = @func_2204() /* ty=Tensor[(13, 12, 245), float64] */;
    %315 = cast(%314, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
    %316 = exp(%315) /* ty=Tensor[(13, 12, 245), float32] */;
    %317 = cast(%316, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
    %318 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(%314, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%319, %320) /* ty=Tensor[(13, 12, 245), bool] */
  };
  %321() /* ty=Tensor[(13, 12, 245), bool] */
}

def @func_4343() -> Tensor[(2, 7, 13), float64] {
  %322 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %323 = %322.0;
  %324 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 7, 13), uint32] */, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%323, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%326, %327) /* ty=Tensor[(2, 7, 13), float64] */
}

def @func_2499(%var_2484: Tensor[(15, 11, 10), float32], %var_2489: Tensor[(245), float64]) -> (Tensor[(15, 11, 10), float32], Tensor[(5, 7, 7), float64], Tensor[(245), float64]) {
  %328 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 10), float32] */;
  %329 = cast(%var_2484, dtype="float32") /* ty=Tensor[(15, 11, 10), float32] */;
  %330 = cast(%var_2489, dtype="float64") /* ty=Tensor[(245), float64] */;
  %331 = cast(%var_2489, dtype="float64") /* ty=Tensor[(245), float64] */;
  %332 = reshape(%330, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %333 = reshape(%331, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %334 = @func_36(%332, %333) /* ty=(Tensor[(5, 7, 7), float64],) */;
  %335 = mod(%328, %329) /* ty=Tensor[(15, 11, 10), float32] */;
  %336 = %334.0;
  (%335, %336, %var_2489)
}

def @func_3080(%var_3078: Tensor[(2, 7, 13), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), int64], Tensor[(360), float64], Tensor[(360), float64]) {
  @func_3077(%var_3078) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), int64], Tensor[(360), float64], Tensor[(360), float64]) */
}

def @func_1549() -> (Tensor[(13, 12, ?), float64], Tensor[(15, 5, 9), bool], Tensor[(675, 1), bool]) {
  %337 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %338 = cast(meta[relay.Constant][15] /* ty=Tensor[(675, 1), bool] */, dtype="bool") /* ty=Tensor[(675, 1), bool] */;
  %339 = reshape(%338, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
  %340 = @func_826(%339) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(2, 7, 13), uint32]) */;
  %341 = %337.0;
  %342 = %340.0;
  (%341, %342, meta[relay.Constant][15] /* ty=Tensor[(675, 1), bool] */)
}

def @func_1717(%var_1695: Tensor[(10, 11, 10), float32]) -> (Tensor[(10, 11, 10), float32], Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64]) {
  %343 = cast(%var_1695, dtype="float32") /* ty=Tensor[(10, 11, 10), float32] */;
  %344 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %345 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
  %346 = cosh(%343) /* ty=Tensor[(10, 11, 10), float32] */;
  %347 = %344.0;
  %348 = %345.0;
  (%346, %347, %348)
}

def @func_3845(%var_3843: Tensor[(11, 11, 8), uint16]) -> (Tensor[(11, 11, 8), uint16], Tensor[(13, 12, 245), float32]) {
  @func_3842(%var_3843) /* ty=(Tensor[(11, 11, 8), uint16], Tensor[(13, 12, 245), float32]) */
}

def @func_1512() -> (Tensor[(2, 7, 13), float32],) {
  %349 = @func_1489() /* ty=Tensor[(2, 7, 13), uint32] */;
  %350 = cast(%349, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
  %351 = sqrt(%350) /* ty=Tensor[(2, 7, 13), float32] */;
  (%351,)
}

def @func_992() -> (Tensor[(2, 7, 13), int16], Tensor[(980), float32], Tensor[(360), float64]) {
  %367 = fn () -> (Tensor[(2, 7, 13), int16], Tensor[(980), float32], Tensor[(360), float64]) {
    %352 = @func_794() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */;
    %353 = %352.0;
    %354 = cast(%353, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
    %355 = reshape(%354, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), uint32] */;
    %356 = @func_672(%355) /* ty=(Tensor[(2, 7, 13), bool],) */;
    %357 = %356.0;
    %358 = cast(%357, dtype="int16") /* ty=Tensor[(2, 7, 13), int16] */;
    %359 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %360 = cast(%353, dtype="int16") /* ty=Tensor[(2, 7, 13), int16] */;
    %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %362 = cast(meta[relay.Constant][16] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %363 = reshape(%362, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %364 = @func_545(%363) /* ty=(Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(16, 12, 9), uint64], Tensor[(5, 7, 7), float64]) */;
    %365 = bitwise_or(%360, %361) /* ty=Tensor[(2, 7, 13), int16] */;
    %366 = %364.1;
    (%365, %366, meta[relay.Constant][16] /* ty=Tensor[(360), float64] */)
  };
  %367() /* ty=(Tensor[(2, 7, 13), int16], Tensor[(980), float32], Tensor[(360), float64]) */
}

def @func_2136() -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32]) {
  %368 = @func_794() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */;
  %369 = @func_1512() /* ty=(Tensor[(2, 7, 13), float32],) */;
  %370 = %369.0;
  %371 = @func_794() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */;
  %372 = %371.0;
  %373 = cast(%372, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
  %374 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%370, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %377 = %368.1;
  %378 = mod(%375, %376) /* ty=Tensor[(2, 7, 13), float32] */;
  (%377, %378)
}

def @func_278(%var_276: Tensor[(9, 10, 4), float64], %var_277: Tensor[(980), float32]) -> (Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) {
  %393 = fn (%var_249: Tensor[(9, 10, 4), float64], %var_262: Tensor[(980), float32]) -> (Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) {
    %379 = cast(%var_249, dtype="float64") /* ty=Tensor[(9, 10, 4), float64] */;
    %380 = cast(meta[relay.Constant][17] /* ty=Tensor[(245), float64] */, dtype="float64") /* ty=Tensor[(245), float64] */;
    %381 = cast(meta[relay.Constant][17] /* ty=Tensor[(245), float64] */, dtype="float64") /* ty=Tensor[(245), float64] */;
    %382 = reshape(%380, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
    %383 = reshape(%381, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
    %384 = @func_36(%382, %383) /* ty=(Tensor[(5, 7, 7), float64],) */;
    %385 = cast(%var_262, dtype="float32") /* ty=Tensor[(980), float32] */;
    %386 = cast(meta[relay.Constant][17] /* ty=Tensor[(245), float64] */, dtype="float64") /* ty=Tensor[(245), float64] */;
    %387 = reshape(%385, newshape=[10, 14, 7]) /* ty=Tensor[(10, 14, 7), float32] */;
    %388 = reshape(%386, newshape=[7, 35]) /* ty=Tensor[(7, 35), float64] */;
    %389 = @func_114(%387, %388) /* ty=(Tensor[(5, 7, 7), float64], Tensor[(7, 35), float64], Tensor[(5, 7, 7), float64], Tensor[(10, 14, 7), float32]) */;
    %390 = cos(%379) /* ty=Tensor[(9, 10, 4), float64] */;
    %391 = %384.0;
    %392 = %389.0;
    (%390, %391, meta[relay.Constant][17] /* ty=Tensor[(245), float64] */, %392, %var_262)
  };
  %393(%var_276, %var_277) /* ty=(Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) */
}

def @func_1378(%var_1375: int32, %var_1376: Tensor[(360), float64], %var_1377: Tensor[(432), float32]) -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), uint32], Tensor[(1, 675), bool], Tensor[(2, 7, 13), bool], Tensor[(9, 9, 10), bool], Tensor[(810), int32], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(1, 245), float64], Tensor[(432), float32], Tensor[(2, 7, 13), bool]) {
  %426 = fn (%var_1298: int32, %var_1307: Tensor[(360), float64], %var_1365: Tensor[(432), float32]) -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), uint32], Tensor[(1, 675), bool], Tensor[(2, 7, 13), bool], Tensor[(9, 9, 10), bool], Tensor[(810), int32], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(1, 245), float64], Tensor[(432), float32], Tensor[(2, 7, 13), bool]) {
    %394 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %395 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 675), bool] */, dtype="bool") /* ty=Tensor[(1, 675), bool] */;
    %396 = reshape(%395, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
    %397 = @func_826(%396) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(2, 7, 13), uint32]) */;
    %398 = %397.2;
    %399 = cast(%398, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
    %400 = reshape(%399, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), uint32] */;
    %401 = @func_672(%400) /* ty=(Tensor[(2, 7, 13), bool],) */;
    %402 = cast(%var_1298, dtype="int32") /* ty=int32 */;
    %403 = cast(meta[relay.Constant][19] /* ty=Tensor[(810), int32] */, dtype="int32") /* ty=Tensor[(810), int32] */;
    %404 = reshape(%402, newshape=[]) /* ty=int32 */;
    %405 = reshape(%403, newshape=[9, 9, 10]) /* ty=Tensor[(9, 9, 10), int32] */;
    %406 = cast(%var_1307, dtype="float64") /* ty=Tensor[(360), float64] */;
    %407 = reshape(%406, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %408 = @func_545(%407) /* ty=(Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(16, 12, 9), uint64], Tensor[(5, 7, 7), float64]) */;
    %409 = cast(%var_1365, dtype="float32") /* ty=Tensor[(432), float32] */;
    %410 = reshape(%409, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
    %411 = @func_369(%410) /* ty=(Tensor[(7, 35), float64], Tensor[(980), float32], Tensor[(1, 245), float64], Tensor[(9, 16, 3), float32]) */;
    %412 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %413 = %412.0;
    %414 = cast(%413, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
    %415 = asin(%414) /* ty=Tensor[(2, 7, 13), float64] */;
    %416 = cast(%415, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
    %417 = log(%416) /* ty=Tensor[(2, 7, 13), float64] */;
    %418 = cast(%417, dtype="bool") /* ty=Tensor[(2, 7, 13), bool] */;
    %419 = cast(%var_1298, dtype="bool") /* ty=bool */;
    %420 = %394.0;
    %421 = %401.0;
    %422 = @func_846(%404, %405) /* ty=Tensor[(9, 9, 10), bool] */;
    %423 = %408.6;
    %424 = %411.2;
    %425 = less_equal(%418, %419) /* ty=Tensor[(2, 7, 13), bool] */;
    (%420, %398, meta[relay.Constant][18] /* ty=Tensor[(1, 675), bool] */, %421, %422, meta[relay.Constant][19] /* ty=Tensor[(810), int32] */, %423, %var_1307, %424, %var_1365, %425)
  };
  %426(%var_1375, %var_1376, %var_1377) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), uint32], Tensor[(1, 675), bool], Tensor[(2, 7, 13), bool], Tensor[(9, 9, 10), bool], Tensor[(810), int32], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(1, 245), float64], Tensor[(432), float32], Tensor[(2, 7, 13), bool]) */
}

def @func_1765(%var_1764: Tensor[(2, 216), float32]) -> (Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32], Tensor[(2, 7, 13), uint32], int32, Tensor[(36, 10), float64], Tensor[(2, 216), float32]) {
  %439 = fn (%var_1743: Tensor[(2, 216), float32]) -> (Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32], Tensor[(2, 7, 13), uint32], int32, Tensor[(36, 10), float64], Tensor[(2, 216), float32]) {
    %427 = @func_1397() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) */;
    %428 = @func_1397() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) */;
    %429 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %430 = cast(meta[relay.Constant][20] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
    %431 = cast(%var_1743, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
    %432 = reshape(%429, newshape=[]) /* ty=int32 */;
    %433 = reshape(%430, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %434 = reshape(%431, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %435 = @func_1374(%432, %433, %434) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), uint32], Tensor[(1, 675), bool], Tensor[(2, 7, 13), bool], Tensor[(9, 9, 10), bool], Tensor[(810), int32], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(1, 245), float64], Tensor[(432), float32], Tensor[(2, 7, 13), bool]) */;
    %436 = %427.0;
    %437 = %428.1;
    %438 = %435.0;
    (%436, %437, %438, 5 /* ty=int32 */, meta[relay.Constant][20] /* ty=Tensor[(36, 10), float64] */, %var_1743)
  };
  %439(%var_1764) /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32], Tensor[(2, 7, 13), uint32], int32, Tensor[(36, 10), float64], Tensor[(2, 216), float32]) */
}

def @func_3138() -> (Tensor[(1, 4, 3), float64],) {
  %440 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 4, 3), float64] */, dtype="float64") /* ty=Tensor[(1, 4, 3), float64] */;
  %441 = acosh(%440) /* ty=Tensor[(1, 4, 3), float64] */;
  (%441,)
}

def @func_2022() -> (Tensor[(13, 12, ?), float64], Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(7, 35), float64]) {
  %450 = fn () -> (Tensor[(13, 12, ?), float64], Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(7, 35), float64]) {
    %442 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
    %443 = cast(meta[relay.Constant][22] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
    %444 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 35), float64] */, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
    %445 = reshape(%443, newshape=[10, 14, 7]) /* ty=Tensor[(10, 14, 7), float32] */;
    %446 = reshape(%444, newshape=[7, 35]) /* ty=Tensor[(7, 35), float64] */;
    %447 = @func_114(%445, %446) /* ty=(Tensor[(5, 7, 7), float64], Tensor[(7, 35), float64], Tensor[(5, 7, 7), float64], Tensor[(10, 14, 7), float32]) */;
    %448 = %442.0;
    %449 = %447.3;
    (%448, %449, meta[relay.Constant][22] /* ty=Tensor[(980), float32] */, meta[relay.Constant][23] /* ty=Tensor[(7, 35), float64] */)
  };
  %450() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(7, 35), float64]) */
}

def @func_2756() -> (Tensor[(13, 12, 245), int16],) {
  @func_2754() /* ty=(Tensor[(13, 12, 245), int16],) */
}

def @func_1954() -> Tensor[(13, 12, 245), bool] {
  %459 = fn () -> Tensor[(13, 12, 245), bool] {
    %451 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
    %452 = %451.0;
    %453 = cast(%452, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
    %454 = sinh(%453) /* ty=Tensor[(13, 12, 245), float64] */;
    %455 = cast(%452, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
    %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
    %457 = cast(%454, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
    %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%457, %458) /* ty=Tensor[(13, 12, 245), bool] */
  };
  %459() /* ty=Tensor[(13, 12, 245), bool] */
}

def @func_638() -> (Tensor[(2, 7, 13), uint32],) {
  %462 = fn () -> (Tensor[(2, 7, 13), uint32],) {
    %460 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %461 = %460.0;
    (%461,)
  };
  %462() /* ty=(Tensor[(2, 7, 13), uint32],) */
}

def @func_1102() -> (Tensor[(13, 12, 245), float64],) {
  @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */
}

def @func_3416(%var_3415: Tensor[(13, 12, 245), bool]) -> Tensor[(13, 12, 245), float64] {
  %468 = fn (%var_3398: Tensor[(13, 12, 245), bool]) -> Tensor[(13, 12, 245), float64] {
    %463 = @func_2303() /* ty=Tensor[(13, 12, 245), bool] */;
    %464 = cast(%var_3398, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
    %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %466 = cast(%463, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
    %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%466, %467) /* ty=Tensor[(13, 12, 245), float64] */
  };
  %468(%var_3415) /* ty=Tensor[(13, 12, 245), float64] */
}

def @func_3674(%var_3672: Tensor[(675), bool]) -> (Tensor[(13, 12, 245), bool], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) {
  @func_3671(%var_3672) /* ty=(Tensor[(13, 12, 245), bool], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) */
}

def @func_3772() -> (Tensor[(360), float64], Tensor[(2, 7, 13), float64]) {
  %472 = fn () -> (Tensor[(360), float64], Tensor[(2, 7, 13), float64]) {
    %469 = @func_991() /* ty=(Tensor[(2, 7, 13), int16], Tensor[(980), float32], Tensor[(360), float64]) */;
    %470 = %469.2;
    %471 = @func_2217() /* ty=Tensor[(2, 7, 13), float64] */;
    (%470, %471)
  };
  %472() /* ty=(Tensor[(360), float64], Tensor[(2, 7, 13), float64]) */
}

def @func_4153(%var_4151: int32) -> (Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), bool], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), bool], int32, int32) {
  @func_4150(%var_4151) /* ty=(Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), bool], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), bool], int32, int32) */
}

def @func_1691(%var_1689: Tensor[(7, 16, 15), uint8], %var_1690: Tensor[(7, 16, 15), uint8]) -> (Tensor[(7, 16, 15), bool], Tensor[(7, 16, 15), float32]) {
  @func_1687(%var_1689, %var_1690) /* ty=(Tensor[(7, 16, 15), bool], Tensor[(7, 16, 15), float32]) */
}

def @func_2087(%var_2085: int32) -> (Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(2, 7, 13), uint32], int32, Tensor[(360), float64], Tensor[(432), float32]) {
  @func_2084(%var_2085) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(2, 7, 13), uint32], int32, Tensor[(360), float64], Tensor[(432), float32]) */
}

def @func_2847(%var_2845: Tensor[(13, 12, 10), float64], %var_2846: Tensor[(1100), float32]) -> (Tensor[(13, 12, 10), float32], Tensor[(13, 12, 245), float64], Tensor[(980), float32], Tensor[(13, 12, 1100), float32]) {
  %487 = fn (%var_2813: Tensor[(13, 12, 10), float64], %var_2826: Tensor[(1100), float32]) -> (Tensor[(13, 12, 10), float32], Tensor[(13, 12, 245), float64], Tensor[(980), float32], Tensor[(13, 12, 1100), float32]) {
    %473 = @func_2363() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 7, 13), float32]) */;
    %474 = %473.0;
    %475 = cast(%474, dtype="float32") /* ty=Tensor[(13, 12, ?), float32] */;
    %476 = cast(%var_2813, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
    %477 = cast(%var_2826, dtype="float32") /* ty=Tensor[(1100), float32] */;
    %478 = reshape(%477, newshape=[10, 11, 10]) /* ty=Tensor[(10, 11, 10), float32] */;
    %479 = @func_1717(%478) /* ty=(Tensor[(10, 11, 10), float32], Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64]) */;
    %480 = @func_991() /* ty=(Tensor[(2, 7, 13), int16], Tensor[(980), float32], Tensor[(360), float64]) */;
    %481 = cast(%var_2826, dtype="float32") /* ty=Tensor[(1100), float32] */;
    %482 = cast(%474, dtype="float32") /* ty=Tensor[(13, 12, ?), float32] */;
    %483 = mod(%475, %476) /* ty=Tensor[(13, 12, 10), float32] */;
    %484 = %479.2;
    %485 = %480.1;
    %486 = divide(%481, %482) /* ty=Tensor[(13, 12, 1100), float32] */;
    (%483, %484, %485, %486)
  };
  %487(%var_2845, %var_2846) /* ty=(Tensor[(13, 12, 10), float32], Tensor[(13, 12, 245), float64], Tensor[(980), float32], Tensor[(13, 12, 1100), float32]) */
}

def @func_4280() -> (Tensor[(2, 7, 13), uint32],) {
  %490 = fn () -> (Tensor[(2, 7, 13), uint32],) {
    %488 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %489 = %488.0;
    (%489,)
  };
  %490() /* ty=(Tensor[(2, 7, 13), uint32],) */
}

def @func_117(%var_115: Tensor[(10, 14, 7), float32], %var_116: Tensor[(7, 35), float64]) -> (Tensor[(5, 7, 7), float64], Tensor[(7, 35), float64], Tensor[(5, 7, 7), float64], Tensor[(10, 14, 7), float32]) {
  %507 = fn (%var_82: Tensor[(10, 14, 7), float32], %var_86: Tensor[(7, 35), float64]) -> (Tensor[(5, 7, 7), float64], Tensor[(7, 35), float64], Tensor[(5, 7, 7), float64], Tensor[(10, 14, 7), float32]) {
    %491 = cast(%var_86, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
    %492 = cast(%var_86, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
    %493 = reshape(%491, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
    %494 = reshape(%492, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
    %495 = @func_36(%493, %494) /* ty=(Tensor[(5, 7, 7), float64],) */;
    %496 = cast(%var_86, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
    %497 = cast(%var_86, dtype="float64") /* ty=Tensor[(7, 35), float64] */;
    %498 = reshape(%496, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
    %499 = reshape(%497, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
    %500 = @func_36(%498, %499) /* ty=(Tensor[(5, 7, 7), float64],) */;
    %501 = cast(%var_82, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
    %502 = acos(%501) /* ty=Tensor[(10, 14, 7), float32] */;
    %503 = cast(%502, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
    %504 = %495.0;
    %505 = %500.0;
    %506 = atan(%503) /* ty=Tensor[(10, 14, 7), float32] */;
    (%504, %var_86, %505, %506)
  };
  %507(%var_115, %var_116) /* ty=(Tensor[(5, 7, 7), float64], Tensor[(7, 35), float64], Tensor[(5, 7, 7), float64], Tensor[(10, 14, 7), float32]) */
}

def @func_4801(%var_4800: Tensor[(16, 8, 16), uint64]) -> (Tensor[(16, 8, 16), uint64], Tensor[(13, 12, 245), float64]) {
  %514 = fn (%var_4781: Tensor[(16, 8, 16), uint64]) -> (Tensor[(16, 8, 16), uint64], Tensor[(13, 12, 245), float64]) {
    %508 = cast(%var_4781, dtype="uint64") /* ty=Tensor[(16, 8, 16), uint64] */;
    %509 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(16, 8, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %510 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 8, 16), uint64] */, dtype="uint64") /* ty=Tensor[(16, 8, 16), uint64] */;
    %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %512 = subtract(%510, %511) /* ty=Tensor[(16, 8, 16), uint64] */;
    %513 = @func_2204() /* ty=Tensor[(13, 12, 245), float64] */;
    (%512, %513)
  };
  %514(%var_4800) /* ty=(Tensor[(16, 8, 16), uint64], Tensor[(13, 12, 245), float64]) */
}

def @func_2720(%var_2718: Tensor[(2, 7, 13), uint32]) -> (Tensor[(2, 7, 13), int32],) {
  @func_2717(%var_2718) /* ty=(Tensor[(2, 7, 13), int32],) */
}

def @func_4931(%var_4927: Tensor[(675), bool]) -> (Tensor[(13, 12, 245), float64], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) {
  %515 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %516 = cast(%var_4927, dtype="bool") /* ty=Tensor[(675), bool] */;
  %517 = reshape(%516, newshape=[675]) /* ty=Tensor[(675), bool] */;
  %518 = @func_3671(%517) /* ty=(Tensor[(13, 12, 245), bool], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) */;
  %519 = %515.2;
  %520 = %518.1;
  (%519, %520, %var_4927)
}

def @func_3842(%var_3822: Tensor[(11, 11, 8), uint16]) -> (Tensor[(11, 11, 8), uint16], Tensor[(13, 12, 245), float32]) {
  %521 = cast(%var_3822, dtype="uint16") /* ty=Tensor[(11, 11, 8), uint16] */;
  %522 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(11, 11, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 11, 8), uint16] */, dtype="uint16") /* ty=Tensor[(11, 11, 8), uint16] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %525 = @func_1397() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) */;
  %526 = bitwise_and(%523, %524) /* ty=Tensor[(11, 11, 8), uint16] */;
  %527 = %525.1;
  (%526, %527)
}

def @func_3219(%var_3182: Tensor[(245, 1), float64]) -> (Tensor[(9, 16, 3), float32], Tensor[(5, 7, 7), float64], Tensor[(245, 1), float64], Tensor[(12, 36), float32], Tensor[(13, 12, 245), bool], Tensor[(13, 12, 245), float64]) {
  %528 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 36), float32] */, dtype="float32") /* ty=Tensor[(12, 36), float32] */;
  %529 = reshape(%528, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %530 = @func_369(%529) /* ty=(Tensor[(7, 35), float64], Tensor[(980), float32], Tensor[(1, 245), float64], Tensor[(9, 16, 3), float32]) */;
  %531 = cast(%var_3182, dtype="float64") /* ty=Tensor[(245, 1), float64] */;
  %532 = cast(%var_3182, dtype="float64") /* ty=Tensor[(245, 1), float64] */;
  %533 = reshape(%531, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %534 = reshape(%532, newshape=[5, 7, 7]) /* ty=Tensor[(5, 7, 7), float64] */;
  %535 = @func_36(%533, %534) /* ty=(Tensor[(5, 7, 7), float64],) */;
  %536 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 36), float32] */, dtype="float32") /* ty=Tensor[(12, 36), float32] */;
  %537 = @func_1953() /* ty=Tensor[(13, 12, 245), bool] */;
  %538 = cast(%537, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %539 = acosh(%538) /* ty=Tensor[(13, 12, 245), float64] */;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
  %541 = sin(%540) /* ty=Tensor[(13, 12, 245), float32] */;
  %542 = cast(%539, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="bool") /* ty=Tensor[(13, 12, 245), bool] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %546 = cast(%539, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %547 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%541, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %550 = %530.3;
  %551 = %535.0;
  %552 = log2(%536) /* ty=Tensor[(12, 36), float32] */;
  %553 = greater_equal(%544, %545) /* ty=Tensor[(13, 12, 245), bool] */;
  %554 = add(%548, %549) /* ty=Tensor[(13, 12, 245), float64] */;
  (%550, %551, %var_3182, %552, %553, %554)
}

def @func_4424(%var_4423: Tensor[(13, 12, 245), float64]) -> Tensor[(13, 12, 245), int32] {
  %561 = fn (%var_4414: Tensor[(13, 12, 245), float64]) -> Tensor[(13, 12, 245), int32] {
    %555 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
    %556 = %555.2;
    %557 = cast(%var_4414, dtype="int32") /* ty=Tensor[(13, 12, 245), int32] */;
    %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
    %559 = cast(%556, dtype="int32") /* ty=Tensor[(13, 12, 245), int32] */;
    %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    minimum(%559, %560) /* ty=Tensor[(13, 12, 245), int32] */
  };
  %561(%var_4423) /* ty=Tensor[(13, 12, 245), int32] */
}

def @func_849(%var_847: int32, %var_848: Tensor[(9, 9, 10), int32]) -> Tensor[(9, 9, 10), bool] {
  %564 = fn (%var_841: int32, %var_842: Tensor[(9, 9, 10), int32]) -> Tensor[(9, 9, 10), bool] {
    %562 = cast(%var_841, dtype="bool") /* ty=bool */;
    %563 = cast(%var_842, dtype="bool") /* ty=Tensor[(9, 9, 10), bool] */;
    not_equal(%562, %563) /* ty=Tensor[(9, 9, 10), bool] */
  };
  %564(%var_847, %var_848) /* ty=Tensor[(9, 9, 10), bool] */
}

def @func_3509(%var_3508: Tensor[(360), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(245), float64], Tensor[(360), float64], Tensor[(980), float32]) {
  %575 = fn (%var_3501: Tensor[(360), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(245), float64], Tensor[(360), float64], Tensor[(980), float32]) {
    %565 = @func_2367() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %566 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
    %567 = cast(%var_3501, dtype="float64") /* ty=Tensor[(360), float64] */;
    %568 = cast(meta[relay.Constant][27] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
    %569 = reshape(%567, newshape=[9, 10, 4]) /* ty=Tensor[(9, 10, 4), float64] */;
    %570 = reshape(%568, newshape=[980]) /* ty=Tensor[(980), float32] */;
    %571 = @func_275(%569, %570) /* ty=(Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) */;
    %572 = %565.0;
    %573 = %566.0;
    %574 = %571.2;
    (%572, %573, %574, %var_3501, meta[relay.Constant][27] /* ty=Tensor[(980), float32] */)
  };
  %575(%var_3508) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(245), float64], Tensor[(360), float64], Tensor[(980), float32]) */
}

def @func_3580(%var_3579: Tensor[(294), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32], Tensor[(3, 14, 7), float64], Tensor[(294), float64]) {
  %584 = fn (%var_3566: Tensor[(294), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32], Tensor[(3, 14, 7), float64], Tensor[(294), float64]) {
    %576 = @func_3441() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %577 = @func_2363() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 7, 13), float32]) */;
    %578 = cast(%var_3566, dtype="float64") /* ty=Tensor[(294), float64] */;
    %579 = reshape(%578, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), float64] */;
    %580 = @func_326(%579) /* ty=(Tensor[(3, 14, 7), float64],) */;
    %581 = %576.0;
    %582 = %577.1;
    %583 = %580.0;
    (%581, %582, %583, %var_3566)
  };
  %584(%var_3579) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32], Tensor[(3, 14, 7), float64], Tensor[(294), float64]) */
}

def @func_2033(%var_2032: Tensor[(15, 2, 8), int16]) -> Tensor[(15, 2, 8), int16] {
  %589 = fn (%var_2026: Tensor[(15, 2, 8), int16]) -> Tensor[(15, 2, 8), int16] {
    %585 = cast(%var_2026, dtype="int16") /* ty=Tensor[(15, 2, 8), int16] */;
    %586 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(15, 2, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %587 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 2, 8), int16] */, dtype="int16") /* ty=Tensor[(15, 2, 8), int16] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    add(%587, %588) /* ty=Tensor[(15, 2, 8), int16] */
  };
  %589(%var_2032) /* ty=Tensor[(15, 2, 8), int16] */
}

def @func_1987(%var_1974: Tensor[(360), float64], %var_1982: Tensor[(182), uint32]) -> (Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) {
  %590 = @func_1549() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(15, 5, 9), bool], Tensor[(675, 1), bool]) */;
  %591 = cast(%var_1974, dtype="float64") /* ty=Tensor[(360), float64] */;
  %592 = cast(meta[relay.Constant][29] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %593 = reshape(%591, newshape=[9, 10, 4]) /* ty=Tensor[(9, 10, 4), float64] */;
  %594 = reshape(%592, newshape=[980]) /* ty=Tensor[(980), float32] */;
  %595 = @func_275(%593, %594) /* ty=(Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) */;
  %596 = cast(%var_1982, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %597 = reshape(%596, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), uint32] */;
  %598 = @func_672(%597) /* ty=(Tensor[(2, 7, 13), bool],) */;
  %599 = %590.2;
  %600 = %595.0;
  %601 = %598.0;
  (%599, %600, %var_1974, meta[relay.Constant][29] /* ty=Tensor[(980), float32] */, %601, %var_1982)
}

def @func_675(%var_673: Tensor[(2, 7, 13), uint32]) -> (Tensor[(2, 7, 13), bool],) {
  @func_672(%var_673) /* ty=(Tensor[(2, 7, 13), bool],) */
}

def @func_2084(%var_2061: int32) -> (Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64], Tensor[(2, 7, 13), uint32], int32, Tensor[(360), float64], Tensor[(432), float32]) {
  %602 = @func_1857() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 180), int16]) */;
  %603 = @func_1100() /* ty=(Tensor[(13, 12, 245), float64],) */;
  %604 = cast(%var_2061, dtype="int32") /* ty=int32 */;
  %605 = cast(meta[relay.Constant][30] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %606 = cast(meta[relay.Constant][31] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %607 = reshape(%604, newshape=[]) /* ty=int32 */;
  %608 = reshape(%605, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %609 = reshape(%606, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %610 = @func_1374(%607, %608, %609) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), uint32], Tensor[(1, 675), bool], Tensor[(2, 7, 13), bool], Tensor[(9, 9, 10), bool], Tensor[(810), int32], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(1, 245), float64], Tensor[(432), float32], Tensor[(2, 7, 13), bool]) */;
  %611 = %602.0;
  %612 = %603.0;
  %613 = %610.0;
  (%611, %612, %613, %var_2061, meta[relay.Constant][30] /* ty=Tensor[(360), float64] */, meta[relay.Constant][31] /* ty=Tensor[(432), float32] */)
}

def @func_2368() -> (Tensor[(2, 7, 13), uint32],) {
  %615 = fn () -> (Tensor[(2, 7, 13), uint32],) {
    %614 = @func_2097() /* ty=Tensor[(2, 7, 13), uint32] */;
    (%614,)
  };
  %615() /* ty=(Tensor[(2, 7, 13), uint32],) */
}

def @func_547(%var_546: Tensor[(360), float64]) -> (Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(16, 12, 9), uint64], Tensor[(5, 7, 7), float64]) {
  %653 = fn (%var_524: Tensor[(360), float64]) -> (Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(16, 12, 9), uint64], Tensor[(5, 7, 7), float64]) {
    %616 = cast(meta[relay.Constant][32] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
    %617 = cast(meta[relay.Constant][33] /* ty=Tensor[(245), float64] */, dtype="float64") /* ty=Tensor[(245), float64] */;
    %618 = reshape(%616, newshape=[10, 14, 7]) /* ty=Tensor[(10, 14, 7), float32] */;
    %619 = reshape(%617, newshape=[7, 35]) /* ty=Tensor[(7, 35), float64] */;
    %620 = @func_114(%618, %619) /* ty=(Tensor[(5, 7, 7), float64], Tensor[(7, 35), float64], Tensor[(5, 7, 7), float64], Tensor[(10, 14, 7), float32]) */;
    %621 = cast(%var_524, dtype="float64") /* ty=Tensor[(360), float64] */;
    %622 = cast(meta[relay.Constant][32] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
    %623 = reshape(%621, newshape=[9, 10, 4]) /* ty=Tensor[(9, 10, 4), float64] */;
    %624 = reshape(%622, newshape=[980]) /* ty=Tensor[(980), float32] */;
    %625 = @func_275(%623, %624) /* ty=(Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) */;
    %626 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 12, 9), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
    %627 = acosh(%626) /* ty=Tensor[(16, 12, 9), float32] */;
    %628 = cast(%627, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
    %629 = log2(%628) /* ty=Tensor[(16, 12, 9), float32] */;
    %630 = cast(%627, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
    %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
    %632 = cast(%629, dtype="bool") /* ty=Tensor[(16, 12, 9), bool] */;
    %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %634 = less_equal(%632, %633) /* ty=Tensor[(16, 12, 9), bool] */;
    %635 = cast(%634, dtype="float64") /* ty=Tensor[(16, 12, 9), float64] */;
    %636 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
    %637 = cast(%627, dtype="float64") /* ty=Tensor[(16, 12, 9), float64] */;
    %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %639 = floor_mod(%637, %638) /* ty=Tensor[(16, 12, 9), float64] */;
    %640 = cast(%639, dtype="uint64") /* ty=Tensor[(16, 12, 9), uint64] */;
    %641 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
    %642 = cast(%629, dtype="uint64") /* ty=Tensor[(16, 12, 9), uint64] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %644 = cast(%var_524, dtype="float64") /* ty=Tensor[(360), float64] */;
    %645 = %620.3;
    %646 = cast(%645, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
    %647 = reshape(%644, newshape=[9, 10, 4]) /* ty=Tensor[(9, 10, 4), float64] */;
    %648 = reshape(%646, newshape=[980]) /* ty=Tensor[(980), float32] */;
    %649 = @func_275(%647, %648) /* ty=(Tensor[(9, 10, 4), float64], Tensor[(5, 7, 7), float64], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(980), float32]) */;
    %650 = %625.1;
    %651 = bitwise_xor(%642, %643) /* ty=Tensor[(16, 12, 9), uint64] */;
    %652 = %649.1;
    (%645, meta[relay.Constant][32] /* ty=Tensor[(980), float32] */, meta[relay.Constant][33] /* ty=Tensor[(245), float64] */, %650, %var_524, %651, %652)
  };
  %653(%var_546) /* ty=(Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(245), float64], Tensor[(5, 7, 7), float64], Tensor[(360), float64], Tensor[(16, 12, 9), uint64], Tensor[(5, 7, 7), float64]) */
}

def @func_2218() -> Tensor[(2, 7, 13), float64] {
  %655 = fn () -> Tensor[(2, 7, 13), float64] {
    %654 = @func_1397() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) */;
    %654.0
  };
  %655() /* ty=Tensor[(2, 7, 13), float64] */
}

def @func_2754() -> (Tensor[(13, 12, 245), int16],) {
  %656 = @func_1205() /* ty=(Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), uint32]) */;
  %657 = %656.0;
  (%657,)
}

def @func_2503(%var_2501: Tensor[(15, 11, 10), float32], %var_2502: Tensor[(245), float64]) -> (Tensor[(15, 11, 10), float32], Tensor[(5, 7, 7), float64], Tensor[(245), float64]) {
  @func_2499(%var_2501, %var_2502) /* ty=(Tensor[(15, 11, 10), float32], Tensor[(5, 7, 7), float64], Tensor[(245), float64]) */
}

def @func_672(%var_657: Tensor[(2, 7, 13), uint32]) -> (Tensor[(2, 7, 13), bool],) {
  %658 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %659 = %658.0;
  %660 = cast(%var_657, dtype="bool") /* ty=Tensor[(2, 7, 13), bool] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="bool") /* ty=Tensor[(2, 7, 13), bool] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %664 = greater_equal(%662, %663) /* ty=Tensor[(2, 7, 13), bool] */;
  (%664,)
}

def @func_2685(%var_2684: Tensor[(1, 360), float64]) -> (Tensor[(13, 12, 245), bool], Tensor[(9, 10, 4), float64], Tensor[(1, 360), float64], Tensor[(182), uint32], Tensor[(13, 12, 245), float32], Tensor[(2, 7, 13), uint32]) {
  %676 = fn (%var_2672: Tensor[(1, 360), float64]) -> (Tensor[(13, 12, 245), bool], Tensor[(9, 10, 4), float64], Tensor[(1, 360), float64], Tensor[(182), uint32], Tensor[(13, 12, 245), float32], Tensor[(2, 7, 13), uint32]) {
    %665 = cast(%var_2672, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
    %666 = cast(meta[relay.Constant][35] /* ty=Tensor[(182), uint32] */, dtype="uint32") /* ty=Tensor[(182), uint32] */;
    %667 = reshape(%665, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %668 = reshape(%666, newshape=[182]) /* ty=Tensor[(182), uint32] */;
    %669 = @func_1987(%667, %668) /* ty=(Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) */;
    %670 = @func_1397() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(13, 12, 245), float32]) */;
    %671 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %672 = @func_2656() /* ty=Tensor[(13, 12, 245), bool] */;
    %673 = %669.1;
    %674 = %670.1;
    %675 = %671.0;
    (%672, %673, %var_2672, meta[relay.Constant][35] /* ty=Tensor[(182), uint32] */, %674, %675)
  };
  %676(%var_2684) /* ty=(Tensor[(13, 12, 245), bool], Tensor[(9, 10, 4), float64], Tensor[(1, 360), float64], Tensor[(182), uint32], Tensor[(13, 12, 245), float32], Tensor[(2, 7, 13), uint32]) */
}

def @func_795() -> (Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) {
  %683 = fn () -> (Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) {
    %677 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %678 = %677.0;
    %679 = cast(%678, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
    %680 = @func_637() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %681 = sinh(%679) /* ty=Tensor[(2, 7, 13), float64] */;
    %682 = %680.0;
    (%681, %682)
  };
  %683() /* ty=(Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), uint32]) */
}

def @func_1207() -> (Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), uint32]) {
  @func_1205() /* ty=(Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), uint32]) */
}

def @func_372(%var_370: Tensor[(9, 16, 3), float32]) -> (Tensor[(7, 35), float64], Tensor[(980), float32], Tensor[(1, 245), float64], Tensor[(9, 16, 3), float32]) {
  @func_369(%var_370) /* ty=(Tensor[(7, 35), float64], Tensor[(980), float32], Tensor[(1, 245), float64], Tensor[(9, 16, 3), float32]) */
}

def @func_3352() -> Tensor[(2, 7, 13), float32] {
  %687 = fn () -> Tensor[(2, 7, 13), float32] {
    %684 = @func_2136() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float32]) */;
    %685 = %684.1;
    %686 = cast(%685, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
    erf(%686) /* ty=Tensor[(2, 7, 13), float32] */
  };
  %687() /* ty=Tensor[(2, 7, 13), float32] */
}

def @func_3379() -> (Tensor[(2, 7, 13), uint32],) {
  %688 = @func_2097() /* ty=Tensor[(2, 7, 13), uint32] */;
  (%688,)
}

def @func_3671(%var_3656: Tensor[(675), bool]) -> (Tensor[(13, 12, 245), bool], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) {
  %689 = cast(%var_3656, dtype="bool") /* ty=Tensor[(675), bool] */;
  %690 = reshape(%689, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), bool] */;
  %691 = @func_826(%690) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(2, 7, 13), uint32]) */;
  %692 = @func_2656() /* ty=Tensor[(13, 12, 245), bool] */;
  %693 = %691.0;
  (%692, %693, %var_3656)
}

def @func_4257(%var_4256: Tensor[(294), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), bool], Tensor[(360), float64], int32, int32, Tensor[(2, 180), float64], Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(810), int32]) {
  %724 = fn (%var_4242: Tensor[(294), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), bool], Tensor[(360), float64], int32, int32, Tensor[(2, 180), float64], Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(810), int32]) {
    %694 = @func_3379() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %695 = @func_3256() /* ty=(Tensor[(2, 7, 13), float32], Tensor[(2, 7, 13), bool]) */;
    %696 = %695.1;
    %697 = cast(%696, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
    %698 = rsqrt(%697) /* ty=Tensor[(2, 7, 13), float64] */;
    %699 = cast(%698, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
    %700 = cast(meta[relay.Constant][36] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %701 = log2(%699) /* ty=Tensor[(2, 7, 13), float64] */;
    %702 = cast(%701, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
    %703 = reshape(%700, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %704 = reshape(%702, newshape=[182]) /* ty=Tensor[(182), uint32] */;
    %705 = @func_1987(%703, %704) /* ty=(Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) */;
    %706 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %707 = reshape(%706, newshape=[]) /* ty=int32 */;
    %708 = @func_4150(%707) /* ty=(Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), bool], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), bool], int32, int32) */;
    %709 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
    %710 = cast(%var_4242, dtype="float64") /* ty=Tensor[(294), float64] */;
    %711 = %709.1;
    %712 = cast(%711, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
    %713 = %694.0;
    %714 = cast(%713, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
    %715 = cast(meta[relay.Constant][37] /* ty=Tensor[(810), int32] */, dtype="int32") /* ty=Tensor[(810), int32] */;
    %716 = reshape(%710, newshape=[294]) /* ty=Tensor[(294), float64] */;
    %717 = reshape(%712, newshape=[180, 2]) /* ty=Tensor[(180, 2), float64] */;
    %718 = reshape(%714, newshape=[182]) /* ty=Tensor[(182), uint32] */;
    %719 = reshape(%715, newshape=[1, 810]) /* ty=Tensor[(1, 810), int32] */;
    %720 = @func_2636(%716, %717, %718, %719) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(294), float64], Tensor[(360), float64], Tensor[(180, 2), float64], Tensor[(182), uint32], Tensor[(3, 14, 7), float64], Tensor[(13, 12, 245), bool], Tensor[(9, 9, 10), bool], int32, Tensor[(1, 810), int32]) */;
    %721 = %705.4;
    %722 = %708.5;
    %723 = %720.5;
    (%713, %701, %721, meta[relay.Constant][36] /* ty=Tensor[(360), float64] */, %722, 1 /* ty=int32 */, %711, %723, %var_4242, meta[relay.Constant][37] /* ty=Tensor[(810), int32] */)
  };
  %724(%var_4256) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), float64], Tensor[(2, 7, 13), bool], Tensor[(360), float64], int32, int32, Tensor[(2, 180), float64], Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(810), int32]) */
}

def @func_4582(%var_4571: Tensor[(810), int32], %var_4580: Tensor[(1248), float64]) -> (Tensor[(10, 14, 7), float32], Tensor[(9, 9, 10), bool], int32, Tensor[(810), int32], Tensor[(2, 7, 13), uint32], Tensor[(1248), float64]) {
  %725 = cast(-4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %726 = cast(%var_4571, dtype="int32") /* ty=Tensor[(810), int32] */;
  %727 = reshape(%725, newshape=[]) /* ty=int32 */;
  %728 = reshape(%726, newshape=[9, 9, 10]) /* ty=Tensor[(9, 9, 10), int32] */;
  %729 = cast(%var_4580, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %730 = reshape(%729, newshape=[13, 12, 8]) /* ty=Tensor[(13, 12, 8), float64] */;
  %731 = @func_1607(%730) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 8), uint8], Tensor[(2, 7, 13), float32], Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64]) */;
  %732 = @func_3159() /* ty=Tensor[(10, 14, 7), float32] */;
  %733 = @func_846(%727, %728) /* ty=Tensor[(9, 9, 10), bool] */;
  %734 = %731.3;
  (%732, %733, -4 /* ty=int32 */, %var_4571, %734, %var_4580)
}

def @func_4934(%var_4932: Tensor[(675), bool]) -> (Tensor[(13, 12, 245), float64], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) {
  @func_4931(%var_4932) /* ty=(Tensor[(13, 12, 245), float64], Tensor[(15, 5, 9), bool], Tensor[(675), bool]) */
}

def @func_369(%var_343: Tensor[(9, 16, 3), float32]) -> (Tensor[(7, 35), float64], Tensor[(980), float32], Tensor[(1, 245), float64], Tensor[(9, 16, 3), float32]) {
  %735 = cast(meta[relay.Constant][38] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %736 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 245), float64] */, dtype="float64") /* ty=Tensor[(1, 245), float64] */;
  %737 = reshape(%735, newshape=[10, 14, 7]) /* ty=Tensor[(10, 14, 7), float32] */;
  %738 = reshape(%736, newshape=[7, 35]) /* ty=Tensor[(7, 35), float64] */;
  %739 = @func_114(%737, %738) /* ty=(Tensor[(5, 7, 7), float64], Tensor[(7, 35), float64], Tensor[(5, 7, 7), float64], Tensor[(10, 14, 7), float32]) */;
  %740 = cast(%var_343, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %741 = log10(%740) /* ty=Tensor[(9, 16, 3), float32] */;
  %742 = cast(%var_343, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %746 = %739.1;
  %747 = power(%744, %745) /* ty=Tensor[(9, 16, 3), float32] */;
  (%746, meta[relay.Constant][38] /* ty=Tensor[(980), float32] */, meta[relay.Constant][39] /* ty=Tensor[(1, 245), float64] */, %747)
}

def @func_1610(%var_1608: Tensor[(13, 12, 8), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 8), uint8], Tensor[(2, 7, 13), float32], Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64]) {
  @func_1607(%var_1608) /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 8), uint8], Tensor[(2, 7, 13), float32], Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), float64]) */
}

def @func_4441(%var_4439: Tensor[(9, 2, 8), float64]) -> Tensor[(9, 2, 8), float64] {
  @func_4438(%var_4439) /* ty=Tensor[(9, 2, 8), float64] */
}

def @func_1205() -> (Tensor[(13, 12, 245), int16], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), float64], Tensor[(13, 12, 245), uint32]) {
  %748 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
  %749 = %748.2;
  %750 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 12, 245), float64] */, dtype="int16") /* ty=Tensor[(13, 12, 245), int16] */;
  %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%749, dtype="int16") /* ty=Tensor[(13, 12, 245), int16] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %754 = cast(%749, dtype="int8") /* ty=Tensor[(13, 12, 245), int8] */;
  %755 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(13, 12, 245), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 12, 245), float64] */, dtype="int8") /* ty=Tensor[(13, 12, 245), int8] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %758 = bitwise_xor(%756, %757) /* ty=Tensor[(13, 12, 245), int8] */;
  %759 = cast(%758, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
  %760 = rsqrt(%759) /* ty=Tensor[(13, 12, 245), float32] */;
  %761 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 12, 245), float64] */, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
  %762 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%760, dtype="float32") /* ty=Tensor[(13, 12, 245), float32] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %765 = floor_divide(%763, %764) /* ty=Tensor[(13, 12, 245), float32] */;
  %766 = cast(%765, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %767 = cast(%760, dtype="float64") /* ty=Tensor[(13, 12, 245), float64] */;
  %768 = cast(%765, dtype="uint32") /* ty=Tensor[(13, 12, 245), uint32] */;
  %769 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%760, dtype="uint32") /* ty=Tensor[(13, 12, 245), uint32] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %772 = left_shift(%752, %753) /* ty=Tensor[(13, 12, 245), int16] */;
  %773 = cosh(%766) /* ty=Tensor[(13, 12, 245), float64] */;
  %774 = erf(%767) /* ty=Tensor[(13, 12, 245), float64] */;
  %775 = maximum(%770, %771) /* ty=Tensor[(13, 12, 245), uint32] */;
  (%772, %773, %774, %775)
}

def @func_5084() -> (Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), int16], Tensor[(294), float64], Tensor[(9, 2, 8), float64], Tensor[(9, 16, 3), float32], Tensor[(245), float64]) {
  %794 = fn () -> (Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), int16], Tensor[(294), float64], Tensor[(9, 2, 8), float64], Tensor[(9, 16, 3), float32], Tensor[(245), float64]) {
    %776 = @func_3441() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %777 = cast(meta[relay.Constant][41] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
    %778 = reshape(%777, newshape=[294]) /* ty=Tensor[(294), float64] */;
    %779 = @func_5009(%778) /* ty=(Tensor[(3, 14, 7), float64], Tensor[(294), float64], Tensor[(13, 12, 245), int16], Tensor[(16, 5, 9), int8]) */;
    %780 = cast(meta[relay.Constant][42] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %781 = reshape(%780, newshape=[9, 2, 8]) /* ty=Tensor[(9, 2, 8), float64] */;
    %782 = @func_4438(%781) /* ty=Tensor[(9, 2, 8), float64] */;
    %783 = cast(meta[relay.Constant][42] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
    %785 = cast(%782, dtype="float64") /* ty=Tensor[(9, 2, 8), float64] */;
    %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %787 = cast(meta[relay.Constant][43] /* ty=Tensor[(245), float64] */, dtype="float64") /* ty=Tensor[(245), float64] */;
    %788 = reshape(%787, newshape=[245, 1]) /* ty=Tensor[(245, 1), float64] */;
    %789 = @func_3219(%788) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(5, 7, 7), float64], Tensor[(245, 1), float64], Tensor[(12, 36), float32], Tensor[(13, 12, 245), bool], Tensor[(13, 12, 245), float64]) */;
    %790 = %776.0;
    %791 = %779.2;
    %792 = floor_divide(%785, %786) /* ty=Tensor[(9, 2, 8), float64] */;
    %793 = %789.0;
    (%790, %791, meta[relay.Constant][41] /* ty=Tensor[(294), float64] */, %792, %793, meta[relay.Constant][43] /* ty=Tensor[(245), float64] */)
  };
  %794() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(13, 12, 245), int16], Tensor[(294), float64], Tensor[(9, 2, 8), float64], Tensor[(9, 16, 3), float32], Tensor[(245), float64]) */
}

def @func_4586(%var_4584: Tensor[(810), int32], %var_4585: Tensor[(1248), float64]) -> (Tensor[(10, 14, 7), float32], Tensor[(9, 9, 10), bool], int32, Tensor[(810), int32], Tensor[(2, 7, 13), uint32], Tensor[(1248), float64]) {
  @func_4582(%var_4584, %var_4585) /* ty=(Tensor[(10, 14, 7), float32], Tensor[(9, 9, 10), bool], int32, Tensor[(810), int32], Tensor[(2, 7, 13), uint32], Tensor[(1248), float64]) */
}

def @func_3077(%var_3045: Tensor[(2, 7, 13), float64]) -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 7, 13), int64], Tensor[(360), float64], Tensor[(360), float64]) {
  %795 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
  %796 = @func_2097() /* ty=Tensor[(2, 7, 13), uint32] */;
  %797 = cast(%796, dtype="float64") /* ty=Tensor[(2, 7, 13), float64] */;
  %798 = acosh(%797) /* ty=Tensor[(2, 7, 13), float64] */;
  %799 = cast(%var_3045, dtype="int64") /* ty=Tensor[(2, 7, 13), int64] */;
  %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%798, dtype="int64") /* ty=Tensor[(2, 7, 13), int64] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %803 = cast(meta[relay.Constant][44] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %804 = logical_xor(%801, %802) /* ty=Tensor[(2, 7, 13), int64] */;
  %805 = cast(%804, dtype="uint32") /* ty=Tensor[(2, 7, 13), uint32] */;
  %806 = reshape(%803, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %807 = reshape(%805, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %808 = @func_1987(%806, %807) /* ty=(Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) */;
  %809 = %795.0;
  %810 = %808.2;
  (%809, %804, %810, meta[relay.Constant][44] /* ty=Tensor[(360), float64] */)
}

def @func_1858() -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 180), int16]) {
  %827 = fn () -> (Tensor[(2, 7, 13), uint32], Tensor[(2, 180), int16]) {
    %811 = @func_623() /* ty=(Tensor[(2, 7, 13), uint32],) */;
    %812 = @func_892() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(2, 180), float64], Tensor[(13, 12, 245), float64]) */;
    %813 = %812.1;
    %814 = cast(%813, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
    %815 = erf(%814) /* ty=Tensor[(2, 180), float64] */;
    %816 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 180), float64] */, dtype="bool") /* ty=Tensor[(2, 180), bool] */;
    %817 = shape_of(%815, dtype="int32") /* ty=Tensor[(2), int32] */;
    %818 = cast(%815, dtype="bool") /* ty=Tensor[(2, 180), bool] */;
    %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %820 = not_equal(%818, %819) /* ty=Tensor[(2, 180), bool] */;
    %821 = cast(%813, dtype="int16") /* ty=Tensor[(2, 180), int16] */;
    %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(2), int32] */;
    %823 = cast(%820, dtype="int16") /* ty=Tensor[(2, 180), int16] */;
    %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %825 = %811.0;
    %826 = logical_xor(%823, %824) /* ty=Tensor[(2, 180), int16] */;
    (%825, %826)
  };
  %827() /* ty=(Tensor[(2, 7, 13), uint32], Tensor[(2, 180), int16]) */
}

def @func_2191() -> Tensor[(8, 8, 5), int32] {
  %828 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 8, 5), int32] */, dtype="int32") /* ty=Tensor[(8, 8, 5), int32] */;
  %829 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(8, 8, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 8, 5), int32] */, dtype="int32") /* ty=Tensor[(8, 8, 5), int32] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_and(%830, %831) /* ty=Tensor[(8, 8, 5), int32] */
}

def @func_3159() -> Tensor[(10, 14, 7), float32] {
  %832 = @func_2021() /* ty=(Tensor[(13, 12, ?), float64], Tensor[(10, 14, 7), float32], Tensor[(980), float32], Tensor[(7, 35), float64]) */;
  %832.1
}

def @func_1991(%var_1989: Tensor[(360), float64], %var_1990: Tensor[(182), uint32]) -> (Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) {
  @func_1987(%var_1989, %var_1990) /* ty=(Tensor[(675, 1), bool], Tensor[(9, 10, 4), float64], Tensor[(360), float64], Tensor[(980), float32], Tensor[(2, 7, 13), bool], Tensor[(182), uint32]) */
}

def @func_829(%var_827: Tensor[(15, 5, 9), bool]) -> (Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(2, 7, 13), uint32]) {
  @func_826(%var_827) /* ty=(Tensor[(15, 5, 9), bool], Tensor[(15, 5, 9), float32], Tensor[(2, 7, 13), uint32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen201/build/output.py:1855: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen201/build/output.py", line 1860, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_reshape_logical_and_kernel0(signed char* __restrict__ T_logical_and, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 135) {
    if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 2160) {
      T_logical_and[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = ((signed char)(((bool)placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]) && ((bool)placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))])));
    }
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

