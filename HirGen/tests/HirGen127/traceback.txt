==========mod==========
#[version = "0.0.5"]
def @func_4686(%var_4677: Tensor[(5, 3, 12), float64]) -> (Tensor[(5, 3, 12), float64],) {
  %0 = cast(%var_4677, dtype="float64") /* ty=Tensor[(5, 3, 12), float64] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(5, 3, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 3, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 3, 12), float64] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %4 = mod(%2, %3) /* ty=Tensor[(5, 3, 12), float64] */;
  (%4,)
}

def @func_921(%var_911: Tensor[(8, 9, 15), int64], %var_912: Tensor[(8, 9, 15), int64]) -> Tensor[(8, 9, 15), bool] {
  %5 = cast(%var_912, dtype="bool") /* ty=Tensor[(8, 9, 15), bool] */;
  %6 = shape_of(%var_911, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_911, dtype="bool") /* ty=Tensor[(8, 9, 15), bool] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%7, %8) /* ty=Tensor[(8, 9, 15), bool] */
}

def @func_1031(%var_1021: Tensor[(15, 9, 11), float32]) -> (Tensor[(15, 9, 11), float32],) {
  %9 = cast(%var_1021, dtype="float32") /* ty=Tensor[(15, 9, 11), float32] */;
  %10 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(15, 9, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 9, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 9, 11), float32] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %13 = floor_mod(%11, %12) /* ty=Tensor[(15, 9, 11), float32] */;
  (%13,)
}

def @func_1446(%var_1416: uint16, %var_1417: Tensor[(5, 5, 5), uint16], %var_1440: Tensor[(1080), int64]) -> (Tensor[(5, 5, 5), uint16], Tensor[(8, 9, 15), bool], Tensor[(1080), int64]) {
  %14 = cast(%var_1416, dtype="uint16") /* ty=uint16 */;
  %15 = cast(%var_1417, dtype="uint16") /* ty=Tensor[(5, 5, 5), uint16] */;
  %16 = cast(%var_1440, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %17 = cast(%var_1440, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %18 = reshape(%16, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %19 = reshape(%17, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %20 = maximum(%14, %15) /* ty=Tensor[(5, 5, 5), uint16] */;
  %21 = @func_921(%18, %19) /* ty=Tensor[(8, 9, 15), bool] */;
  (%20, %21, %var_1440)
}

def @func_5379() -> (Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) {
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 3, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 3, 10), float64] */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 3, 10), float64] */, dtype="float32") /* ty=Tensor[(4, 3, 10), float32] */;
  %24 = asin(%22) /* ty=Tensor[(4, 3, 10), float64] */;
  %25 = log2(%23) /* ty=Tensor[(4, 3, 10), float32] */;
  (%24, %25)
}

def @func_5954(%var_5949: Tensor[(11, 10, 7), float32]) -> Tensor[(11, 10, 7), float32] {
  %26 = cast(-3.03212f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %27 = cast(%var_5949, dtype="float32") /* ty=Tensor[(11, 10, 7), float32] */;
  mod(%26, %27) /* ty=Tensor[(11, 10, 7), float32] */
}

def @func_1546(%var_1520: Tensor[(12, 13, 9), float64]) -> (Tensor[(12, 13, 9), float64], Tensor[(12, 13, 9), float64]) {
  %28 = cast(%var_1520, dtype="float64") /* ty=Tensor[(12, 13, 9), float64] */;
  %29 = cast(%var_1520, dtype="float64") /* ty=Tensor[(12, 13, 9), float64] */;
  %30 = tan(%28) /* ty=Tensor[(12, 13, 9), float64] */;
  %31 = sinh(%29) /* ty=Tensor[(12, 13, 9), float64] */;
  (%30, %31)
}

def @func_5575(%var_5511: int16, %var_5545: Tensor[(4, 24), float64], %var_5571: Tensor[(4, 24), float64]) -> (Tensor[(4, 3, 10), float64], Tensor[(6, 8, 2), bool], Tensor[(4, 24), float32], Tensor[(4, 24), float32], Tensor[(4, 24), float32], Tensor[(4, 24), int16]) {
  %32 = @func_5379() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */;
  %33 = cast(%var_5511, dtype="int16") /* ty=int16 */;
  %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 24), int16] */, dtype="int16") /* ty=Tensor[(4, 24), int16] */;
  %35 = reshape(%33, newshape=[]) /* ty=int16 */;
  %36 = reshape(%34, newshape=[6, 8, 2]) /* ty=Tensor[(6, 8, 2), int16] */;
  %37 = @func_3880(%35, %36) /* ty=(Tensor[(6, 8, 2), bool],) */;
  %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 24), int16] */, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %39 = sinh(%38) /* ty=Tensor[(4, 24), float64] */;
  %40 = cast(%39, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %41 = cast(%var_5511, dtype="float32") /* ty=float32 */;
  %42 = cast(%var_5545, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %43 = shape_of(%39, dtype="int32") /* ty=Tensor[(2), int32] */;
  %44 = cast(%39, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %46 = cast(%var_5545, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %47 = cast(%var_5571, dtype="int16") /* ty=Tensor[(4, 24), int16] */;
  %48 = shape_of(%39, dtype="int32") /* ty=Tensor[(2), int32] */;
  %49 = cast(%39, dtype="int16") /* ty=Tensor[(4, 24), int16] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %51 = %32.0;
  %52 = %37.0;
  %53 = divide(%40, %41) /* ty=Tensor[(4, 24), float32] */;
  %54 = mod(%44, %45) /* ty=Tensor[(4, 24), float32] */;
  %55 = cosh(%46) /* ty=Tensor[(4, 24), float32] */;
  %56 = right_shift(%49, %50) /* ty=Tensor[(4, 24), int16] */;
  (%51, %52, %53, %54, %55, %56)
}

def @func_1584(%var_1556: Tensor[(14, 11, 10), float64], %var_1570: uint8, %var_1571: Tensor[(324), uint8]) -> (Tensor[(14, 11, 10), float64], Tensor[(12, 3, 9), uint8], uint8, Tensor[(324), uint8], Tensor[(12, 3, 9), uint8]) {
  %57 = cast(%var_1556, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
  %58 = cast(%var_1570, dtype="uint8") /* ty=uint8 */;
  %59 = cast(%var_1571, dtype="uint8") /* ty=Tensor[(324), uint8] */;
  %60 = reshape(%58, newshape=[]) /* ty=uint8 */;
  %61 = reshape(%59, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), uint8] */;
  %62 = cast(%var_1570, dtype="uint8") /* ty=uint8 */;
  %63 = @func_560(%60, %61) /* ty=Tensor[(12, 3, 9), uint8] */;
  %64 = cast(%63, dtype="uint8") /* ty=Tensor[(12, 3, 9), uint8] */;
  %65 = reshape(%62, newshape=[]) /* ty=uint8 */;
  %66 = reshape(%64, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), uint8] */;
  %67 = atan(%57) /* ty=Tensor[(14, 11, 10), float64] */;
  %68 = @func_560(%65, %66) /* ty=Tensor[(12, 3, 9), uint8] */;
  (%67, %63, %var_1570, %var_1571, %68)
}

def @func_2220(%var_2191: Tensor[(12, 14), float32], %var_2195: Tensor[(192), float64]) -> (Tensor[(12, 14), float32], Tensor[(6, 2, 16), float64], Tensor[(192), float64]) {
  %69 = cast(%var_2191, dtype="float32") /* ty=Tensor[(12, 14), float32] */;
  %70 = cast(%var_2195, dtype="float64") /* ty=Tensor[(192), float64] */;
  %71 = reshape(%70, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float64] */;
  %72 = erf(%69) /* ty=Tensor[(12, 14), float32] */;
  %73 = @func_1767(%71) /* ty=Tensor[(6, 2, 16), float64] */;
  (%72, %73, %var_2195)
}

def @func_3880(%var_3871: int16, %var_3872: Tensor[(6, 8, 2), int16]) -> (Tensor[(6, 8, 2), bool],) {
  %74 = cast(%var_3871, dtype="bool") /* ty=bool */;
  %75 = cast(%var_3872, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
  %76 = greater_equal(%74, %75) /* ty=Tensor[(6, 8, 2), bool] */;
  (%76,)
}

def @func_5763(%var_5749: Tensor[(6, 2, 16), float64]) -> (Tensor[(4, 3, 10), float32], Tensor[(192), float64], Tensor[(6, 2, 16), int64]) {
  %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %78 = reshape(%77, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float64] */;
  %79 = @func_1767(%78) /* ty=Tensor[(6, 2, 16), float64] */;
  %80 = cast(%var_5749, dtype="bool") /* ty=Tensor[(6, 2, 16), bool] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="bool") /* ty=Tensor[(6, 2, 16), bool] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %84 = not_equal(%82, %83) /* ty=Tensor[(6, 2, 16), bool] */;
  %85 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 2, 16), bool] */, dtype="int64") /* ty=Tensor[(6, 2, 16), int64] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="int64") /* ty=Tensor[(6, 2, 16), int64] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %89 = @func_5411() /* ty=Tensor[(4, 3, 10), float32] */;
  %90 = logical_xor(%87, %88) /* ty=Tensor[(6, 2, 16), int64] */;
  (%89, meta[relay.Constant][4] /* ty=Tensor[(192), float64] */, %90)
}

def @func_5411() -> Tensor[(4, 3, 10), float32] {
  %91 = @func_5379() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */;
  %91.1
}

def @main() -> (Tensor[(4, 3, 10), float32], int16, Tensor[(96), int32]) {
  %92 = @func_5379() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */;
  %93 = cast(meta[relay.Constant][6] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %94 = cast(meta[relay.Constant][7] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %95 = cast(meta[relay.Constant][7] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %96 = reshape(%93, newshape=[]) /* ty=int16 */;
  %97 = reshape(%94, newshape=[4, 24]) /* ty=Tensor[(4, 24), float64] */;
  %98 = reshape(%95, newshape=[4, 24]) /* ty=Tensor[(4, 24), float64] */;
  %99 = @func_5575(%96, %97, %98) /* ty=(Tensor[(4, 3, 10), float64], Tensor[(6, 8, 2), bool], Tensor[(4, 24), float32], Tensor[(4, 24), float32], Tensor[(4, 24), float32], Tensor[(4, 24), int16]) */;
  %100 = %99.2;
  %101 = cast(%100, dtype="int32") /* ty=Tensor[(4, 24), int32] */;
  %102 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(96), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(96), float64] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?), int32] */;
  %105 = %92.1;
  %106 = left_shift(%103, %104) /* ty=Tensor[(96), int32] */;
  (%105, meta[relay.Constant][6] /* ty=int16 */, %106)
}

def @func_3340(%var_3243: Tensor[(7, 2, 6), float64], %var_3292: Tensor[(1080), int64], %var_3301: Tensor[(8, 24), float64], %var_3303: Tensor[(8, 9, 15), float64], %var_3326: Tensor[(960), uint16]) -> (Tensor[(7, 2, 6), float64], Tensor[(3, 7, 14), uint64], Tensor[(294), uint64], Tensor[(1080), int64], Tensor[(6, 2, 16), float64], Tensor[(8, 24), float64], Tensor[(8, 9, 15), float32], Tensor[(8, 9, 15), bool], Tensor[(960), uint16], Tensor[(8, 9, 15), float32]) {
  %107 = cast(4.54687f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %108 = cast(%var_3243, dtype="float64") /* ty=Tensor[(7, 2, 6), float64] */;
  %109 = cast(4.54687f64 /* ty=float64 */, dtype="uint64") /* ty=uint64 */;
  %110 = cast(meta[relay.Constant][8] /* ty=Tensor[(294), uint64] */, dtype="uint64") /* ty=Tensor[(294), uint64] */;
  %111 = reshape(%109, newshape=[]) /* ty=uint64 */;
  %112 = reshape(%110, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), uint64] */;
  %113 = @func_2556(%111, %112) /* ty=(Tensor[(3, 7, 14), uint64],) */;
  %114 = cast(%var_3301, dtype="float64") /* ty=Tensor[(8, 24), float64] */;
  %115 = reshape(%114, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float64] */;
  %116 = cast(%var_3292, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %117 = cast(%var_3292, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %118 = reshape(%116, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %119 = reshape(%117, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %120 = @func_921(%118, %119) /* ty=Tensor[(8, 9, 15), bool] */;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(8, 9, 15), float64] */;
  %122 = acosh(%121) /* ty=Tensor[(8, 9, 15), float64] */;
  %123 = cast(%120, dtype="float32") /* ty=Tensor[(8, 9, 15), float32] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="float32") /* ty=Tensor[(8, 9, 15), float32] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %127 = cast(%var_3326, dtype="uint16") /* ty=Tensor[(960), uint16] */;
  %128 = subtract(%125, %126) /* ty=Tensor[(8, 9, 15), float32] */;
  %129 = cast(%128, dtype="int64") /* ty=Tensor[(8, 9, 15), int64] */;
  %130 = reshape(%127, newshape=[15, 8, 8]) /* ty=Tensor[(15, 8, 8), uint16] */;
  %131 = reshape(%129, newshape=[90, 12]) /* ty=Tensor[(90, 12), int64] */;
  %132 = @func_995(%130, %131) /* ty=(Tensor[(15, 8, 8), bool], Tensor[(8, 9, 15), bool], Tensor[(90, 12), int64], Tensor[(15, 8, 8), bool]) */;
  %133 = cast(%var_3303, dtype="float32") /* ty=Tensor[(8, 9, 15), float32] */;
  %134 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%122, dtype="float32") /* ty=Tensor[(8, 9, 15), float32] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %137 = floor_divide(%135, %136) /* ty=Tensor[(8, 9, 15), float32] */;
  %138 = cast(%137, dtype="float32") /* ty=Tensor[(8, 9, 15), float32] */;
  %139 = power(%107, %108) /* ty=Tensor[(7, 2, 6), float64] */;
  %140 = %113.0;
  %141 = @func_1767(%115) /* ty=Tensor[(6, 2, 16), float64] */;
  %142 = %132.1;
  %143 = atanh(%138) /* ty=Tensor[(8, 9, 15), float32] */;
  (%139, %140, meta[relay.Constant][8] /* ty=Tensor[(294), uint64] */, %var_3292, %141, %var_3301, %128, %142, %var_3326, %143)
}

def @func_4867(%var_4855: Tensor[(10, 4, 4), float64]) -> (Tensor[(10, 4, 4), float64],) {
  %144 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 4, 4), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 4), float64] */;
  %145 = shape_of(%var_4855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%var_4855, dtype="float64") /* ty=Tensor[(10, 4, 4), float64] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %148 = floor_divide(%146, %147) /* ty=Tensor[(10, 4, 4), float64] */;
  %149 = cast(%148, dtype="float64") /* ty=Tensor[(10, 4, 4), float64] */;
  %150 = erf(%149) /* ty=Tensor[(10, 4, 4), float64] */;
  (%150,)
}

def @func_3110(%var_3008: Tensor[(1, 4, 6), uint64], %var_3009: Tensor[(16, 4, 6), uint64], %var_3054: Tensor[(1152), int16], %var_3072: Tensor[(520), uint8]) -> (Tensor[(15, 9, 11), float32], Tensor[(1, 1485), float32], Tensor[(16, 4, 6), int16], Tensor[(16, 4, 6), float32], Tensor[(16, 8, 9), int16], Tensor[(1152), int16], Tensor[(16, 8, 9), float32], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(16, 4, 6), float64]) {
  %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 1485), float32] */, dtype="float32") /* ty=Tensor[(1, 1485), float32] */;
  %152 = reshape(%151, newshape=[1485]) /* ty=Tensor[(1485), float32] */;
  %153 = @func_2367(%152) /* ty=(Tensor[(12, 7, 8), bool], Tensor[(15, 9, 11), float32], Tensor[(1485), float32], Tensor[(6, 12, 14), float32], Tensor[(1008), int16]) */;
  %154 = cast(%var_3008, dtype="uint64") /* ty=Tensor[(1, 4, 6), uint64] */;
  %155 = cast(%var_3009, dtype="uint64") /* ty=Tensor[(16, 4, 6), uint64] */;
  %156 = bitwise_xor(%154, %155) /* ty=Tensor[(16, 4, 6), uint64] */;
  %157 = cast(%var_3009, dtype="float32") /* ty=Tensor[(16, 4, 6), float32] */;
  %158 = cosh(%157) /* ty=Tensor[(16, 4, 6), float32] */;
  %159 = cast(%158, dtype="int16") /* ty=Tensor[(16, 4, 6), int16] */;
  %160 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%156, dtype="int16") /* ty=Tensor[(16, 4, 6), int16] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %163 = cast(%158, dtype="int8") /* ty=Tensor[(16, 4, 6), int8] */;
  %164 = cast(%var_3008, dtype="int8") /* ty=Tensor[(1, 4, 6), int8] */;
  %165 = maximum(%163, %164) /* ty=Tensor[(16, 4, 6), int8] */;
  %166 = cast(%165, dtype="float32") /* ty=Tensor[(16, 4, 6), float32] */;
  %167 = sigmoid(%166) /* ty=Tensor[(16, 4, 6), float32] */;
  %168 = cast(%167, dtype="float32") /* ty=Tensor[(16, 4, 6), float32] */;
  %169 = cast(%var_3054, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %170 = cast(%var_3054, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %171 = reshape(%169, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
  %172 = reshape(%170, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
  %173 = @func_2936(%171, %172) /* ty=(Tensor[(16, 8, 9), int16], Tensor[(16, 8, 9), float32]) */;
  %174 = cast(%var_3054, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %175 = cast(%var_3054, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %176 = reshape(%174, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
  %177 = reshape(%175, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
  %178 = @func_2936(%176, %177) /* ty=(Tensor[(16, 8, 9), int16], Tensor[(16, 8, 9), float32]) */;
  %179 = cast(%var_3072, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %180 = cast(%var_3072, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %181 = reshape(%179, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
  %182 = reshape(%180, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
  %183 = @func_1648(%181, %182) /* ty=(Tensor[(8, 5, 13), float32],) */;
  %184 = cast(%158, dtype="float32") /* ty=Tensor[(16, 4, 6), float32] */;
  %185 = rsqrt(%184) /* ty=Tensor[(16, 4, 6), float32] */;
  %186 = cast(%185, dtype="float64") /* ty=Tensor[(16, 4, 6), float64] */;
  %187 = %153.1;
  %188 = bitwise_and(%161, %162) /* ty=Tensor[(16, 4, 6), int16] */;
  %189 = acosh(%168) /* ty=Tensor[(16, 4, 6), float32] */;
  %190 = %173.0;
  %191 = %178.1;
  %192 = %183.0;
  %193 = tan(%186) /* ty=Tensor[(16, 4, 6), float64] */;
  (%187, meta[relay.Constant][10] /* ty=Tensor[(1, 1485), float32] */, %188, %189, %190, %var_3054, %191, %192, %var_3072, %193)
}

def @func_3680(%var_3658: Tensor[(4, 12, 2), uint8]) -> (Tensor[(4, 12, 2), float64],) {
  %194 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 12, 2), uint8] */, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %195 = cos(%194) /* ty=Tensor[(4, 12, 2), float32] */;
  %196 = cast(%var_3658, dtype="int8") /* ty=Tensor[(4, 12, 2), int8] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="int8") /* ty=Tensor[(4, 12, 2), int8] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %200 = left_shift(%198, %199) /* ty=Tensor[(4, 12, 2), int8] */;
  %201 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 12, 2), uint8] */, dtype="uint8") /* ty=Tensor[(4, 12, 2), uint8] */;
  %202 = shape_of(%var_3658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%var_3658, dtype="uint8") /* ty=Tensor[(4, 12, 2), uint8] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %205 = bitwise_or(%203, %204) /* ty=Tensor[(4, 12, 2), uint8] */;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %207 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%200, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %210 = minimum(%208, %209) /* ty=Tensor[(4, 12, 2), float64] */;
  (%210,)
}

def @func_2999(%var_2957: Tensor[(294, 1), uint64], %var_2962: Tensor[(520), uint8], %var_2979: Tensor[(192), float64]) -> (Tensor[(7, 9, 12), uint16], Tensor[(3, 7, 14), uint64], uint64, Tensor[(294, 1), uint64], Tensor[(12, 14), float32], Tensor[(168), float32], Tensor[(192), float64], Tensor[(8, 5, 13), bool], Tensor[(5, 9, 14), float64], Tensor[(210, 3), uint8]) {
  %211 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 9, 12), uint16] */, dtype="uint16") /* ty=Tensor[(7, 9, 12), uint16] */;
  %212 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(7, 9, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 9, 12), uint16] */, dtype="uint16") /* ty=Tensor[(7, 9, 12), uint16] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %215 = cast(meta[relay.Constant][14] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %216 = cast(%var_2957, dtype="uint64") /* ty=Tensor[(294, 1), uint64] */;
  %217 = reshape(%215, newshape=[]) /* ty=uint64 */;
  %218 = reshape(%216, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), uint64] */;
  %219 = @func_2556(%217, %218) /* ty=(Tensor[(3, 7, 14), uint64],) */;
  %220 = cast(meta[relay.Constant][15] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %221 = cast(%var_2979, dtype="float64") /* ty=Tensor[(192), float64] */;
  %222 = reshape(%220, newshape=[12, 14]) /* ty=Tensor[(12, 14), float32] */;
  %223 = reshape(%221, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %224 = @func_2220(%222, %223) /* ty=(Tensor[(12, 14), float32], Tensor[(6, 2, 16), float64], Tensor[(192), float64]) */;
  %225 = cast(%var_2962, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %226 = cast(%var_2962, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %227 = reshape(%225, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
  %228 = reshape(%226, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
  %229 = @func_1648(%227, %228) /* ty=(Tensor[(8, 5, 13), float32],) */;
  %230 = %229.0;
  %231 = cast(%var_2962, dtype="bool") /* ty=Tensor[(520), bool] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%230, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %235 = cast(meta[relay.Constant][16] /* ty=Tensor[(210, 3), uint8] */, dtype="uint8") /* ty=Tensor[(210, 3), uint8] */;
  %236 = reshape(%235, newshape=[5, 9, 14]) /* ty=Tensor[(5, 9, 14), uint8] */;
  %237 = @func_2771(%236) /* ty=(Tensor[(240), float32], Tensor[(1008), int16], Tensor[(5, 9, 14), float64], Tensor[(65, 240), int64]) */;
  %238 = multiply(%213, %214) /* ty=Tensor[(7, 9, 12), uint16] */;
  %239 = %219.0;
  %240 = %224.0;
  %241 = less(%233, %234) /* ty=Tensor[(8, 5, 13), bool] */;
  %242 = %237.2;
  (%238, %239, meta[relay.Constant][14] /* ty=uint64 */, %var_2957, %240, meta[relay.Constant][15] /* ty=Tensor[(168), float32] */, %var_2979, %241, %242, meta[relay.Constant][16] /* ty=Tensor[(210, 3), uint8] */)
}

def @func_995(%var_932: Tensor[(15, 8, 8), uint16], %var_977: Tensor[(90, 12), int64]) -> (Tensor[(15, 8, 8), bool], Tensor[(8, 9, 15), bool], Tensor[(90, 12), int64], Tensor[(15, 8, 8), bool]) {
  %243 = cast(meta[relay.Constant][17] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %244 = cast(%var_932, dtype="bool") /* ty=Tensor[(15, 8, 8), bool] */;
  %245 = cast(%var_977, dtype="int64") /* ty=Tensor[(90, 12), int64] */;
  %246 = cast(%var_977, dtype="int64") /* ty=Tensor[(90, 12), int64] */;
  %247 = reshape(%245, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %248 = reshape(%246, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %249 = cast(meta[relay.Constant][17] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %250 = cast(%var_932, dtype="bool") /* ty=Tensor[(15, 8, 8), bool] */;
  %251 = not_equal(%243, %244) /* ty=Tensor[(15, 8, 8), bool] */;
  %252 = @func_921(%247, %248) /* ty=Tensor[(8, 9, 15), bool] */;
  %253 = greater(%249, %250) /* ty=Tensor[(15, 8, 8), bool] */;
  (%251, %252, %var_977, %253)
}

def @func_1648(%var_1595: Tensor[(8, 5, 13), uint8], %var_1596: Tensor[(8, 5, 13), uint8]) -> (Tensor[(8, 5, 13), float32],) {
  %254 = cast(%var_1596, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
  %255 = shape_of(%var_1595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%var_1595, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %258 = not_equal(%256, %257) /* ty=Tensor[(8, 5, 13), bool] */;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(8, 5, 13), float64] */;
  %260 = sqrt(%259) /* ty=Tensor[(8, 5, 13), float64] */;
  %261 = cast(%var_1596, dtype="uint16") /* ty=Tensor[(8, 5, 13), uint16] */;
  %262 = shape_of(%var_1595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%var_1595, dtype="uint16") /* ty=Tensor[(8, 5, 13), uint16] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %265 = left_shift(%263, %264) /* ty=Tensor[(8, 5, 13), uint16] */;
  %266 = cast(%265, dtype="float32") /* ty=Tensor[(8, 5, 13), float32] */;
  %267 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%260, dtype="float32") /* ty=Tensor[(8, 5, 13), float32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %270 = power(%268, %269) /* ty=Tensor[(8, 5, 13), float32] */;
  (%270,)
}

def @func_181(%var_167: Tensor[(6, 12, 14), int16]) -> (Tensor[(6, 12, 14), float32],) {
  %271 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 12, 14), int16] */, dtype="int16") /* ty=Tensor[(6, 12, 14), int16] */;
  %272 = shape_of(%var_167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%var_167, dtype="int16") /* ty=Tensor[(6, 12, 14), int16] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %275 = left_shift(%273, %274) /* ty=Tensor[(6, 12, 14), int16] */;
  %276 = cast(%275, dtype="float32") /* ty=Tensor[(6, 12, 14), float32] */;
  %277 = atan(%276) /* ty=Tensor[(6, 12, 14), float32] */;
  (%277,)
}

def @func_2430(%var_2403: Tensor[(1, 13, 5), float32], %var_2407: Tensor[(240), float32], %var_2408: Tensor[(1008), int16]) -> (Tensor[(240), float32], Tensor[(1008), int16], Tensor[(?, 13, 5), int64], Tensor[(84, 12), float32]) {
  %278 = cast(%var_2403, dtype="float32") /* ty=Tensor[(1, 13, 5), float32] */;
  %279 = cos(%278) /* ty=Tensor[(1, 13, 5), float32] */;
  %280 = cast(%var_2403, dtype="int64") /* ty=Tensor[(1, 13, 5), int64] */;
  %281 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%279, dtype="int64") /* ty=Tensor[(1, 13, 5), int64] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %284 = cast(%var_2407, dtype="float32") /* ty=Tensor[(240), float32] */;
  %285 = cast(%var_2408, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %286 = reshape(%284, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float32] */;
  %287 = reshape(%285, newshape=[84, 12]) /* ty=Tensor[(84, 12), int16] */;
  %288 = @func_1701(%286, %287) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(6, 12, 14), float32], Tensor[(84, 12), int16]) */;
  %289 = %288.2;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(84, 12), float32] */;
  %291 = add(%282, %283) /* ty=Tensor[(?, 13, 5), int64] */;
  %292 = sinh(%290) /* ty=Tensor[(84, 12), float32] */;
  (%var_2407, %var_2408, %291, %292)
}

def @func_5707(%var_5702: Tensor[(7, 14, 10), uint64]) -> Tensor[(7, 14, 10), bool] {
  %293 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 14, 10), uint64] */, dtype="bool") /* ty=Tensor[(7, 14, 10), bool] */;
  %294 = shape_of(%var_5702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%var_5702, dtype="bool") /* ty=Tensor[(7, 14, 10), bool] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%295, %296) /* ty=Tensor[(7, 14, 10), bool] */
}

def @func_6090(%var_5985: Tensor[(15, 6, 4), uint8], %var_5986: Tensor[(15, 6, 4), uint8], %var_6001: Tensor[(1, 630), uint8], %var_6004: Tensor[(180), float64]) -> (Tensor[(65, 240), int64], Tensor[(1, 630), uint8], Tensor[(5, 3, 12), float64], Tensor[(180), float64], Tensor[(10, 3, 8), float32], Tensor[(2, 120), float32], Tensor[(1008), int16], Tensor[(15, 6, 4), float32], Tensor[(15, 6, 4), float64], Tensor[(15, 6, 4), float32], Tensor[(4, 15, 11), float32], Tensor[(32), float32], Tensor[(660), uint16]) {
  %297 = cast(%var_6001, dtype="uint8") /* ty=Tensor[(1, 630), uint8] */;
  %298 = reshape(%297, newshape=[5, 9, 14]) /* ty=Tensor[(5, 9, 14), uint8] */;
  %299 = @func_2771(%298) /* ty=(Tensor[(240), float32], Tensor[(1008), int16], Tensor[(5, 9, 14), float64], Tensor[(65, 240), int64]) */;
  %300 = cast(%var_6004, dtype="float64") /* ty=Tensor[(180), float64] */;
  %301 = reshape(%300, newshape=[5, 3, 12]) /* ty=Tensor[(5, 3, 12), float64] */;
  %302 = @func_4686(%301) /* ty=(Tensor[(5, 3, 12), float64],) */;
  %303 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 120), float32] */, dtype="float32") /* ty=Tensor[(2, 120), float32] */;
  %304 = cast(meta[relay.Constant][21] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %305 = reshape(%303, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float32] */;
  %306 = reshape(%304, newshape=[84, 12]) /* ty=Tensor[(84, 12), int16] */;
  %307 = @func_1701(%305, %306) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(6, 12, 14), float32], Tensor[(84, 12), int16]) */;
  %308 = cast(%var_5986, dtype="uint8") /* ty=Tensor[(15, 6, 4), uint8] */;
  %309 = shape_of(%var_5985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%var_5985, dtype="uint8") /* ty=Tensor[(15, 6, 4), uint8] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %312 = right_shift(%310, %311) /* ty=Tensor[(15, 6, 4), uint8] */;
  %313 = cast(%var_5986, dtype="float64") /* ty=Tensor[(15, 6, 4), float64] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="float64") /* ty=Tensor[(15, 6, 4), float64] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %317 = divide(%315, %316) /* ty=Tensor[(15, 6, 4), float64] */;
  %318 = cast(%317, dtype="float32") /* ty=Tensor[(15, 6, 4), float32] */;
  %319 = shape_of(%var_5986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%var_5986, dtype="float32") /* ty=Tensor[(15, 6, 4), float32] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %322 = cast(%317, dtype="float64") /* ty=Tensor[(15, 6, 4), float64] */;
  %323 = asinh(%322) /* ty=Tensor[(15, 6, 4), float64] */;
  %324 = cast(%323, dtype="float64") /* ty=Tensor[(15, 6, 4), float64] */;
  %325 = cast(%312, dtype="float32") /* ty=Tensor[(15, 6, 4), float32] */;
  %326 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %327 = cast(meta[relay.Constant][22] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %328 = cast(meta[relay.Constant][23] /* ty=Tensor[(660), uint16] */, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %329 = reshape(%326, newshape=[2, 16, 1]) /* ty=Tensor[(2, 16, 1), float32] */;
  %330 = reshape(%327, newshape=[2, 16, 1]) /* ty=Tensor[(2, 16, 1), float32] */;
  %331 = reshape(%328, newshape=[660]) /* ty=Tensor[(660), uint16] */;
  %332 = @func_4813(%329, %330, %331) /* ty=(Tensor[(2, 16, ?), float32], Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32], Tensor[(2, 16, 660), float64]) */;
  %333 = %299.3;
  %334 = %302.0;
  %335 = %307.0;
  %336 = mod(%320, %321) /* ty=Tensor[(15, 6, 4), float32] */;
  %337 = exp(%324) /* ty=Tensor[(15, 6, 4), float64] */;
  %338 = log10(%325) /* ty=Tensor[(15, 6, 4), float32] */;
  %339 = %332.2;
  (%333, %var_6001, %334, %var_6004, %335, meta[relay.Constant][20] /* ty=Tensor[(2, 120), float32] */, meta[relay.Constant][21] /* ty=Tensor[(1008), int16] */, %336, %337, %338, %339, meta[relay.Constant][22] /* ty=Tensor[(32), float32] */, meta[relay.Constant][23] /* ty=Tensor[(660), uint16] */)
}

def @func_2936(%var_2916: Tensor[(16, 8, 9), int16], %var_2917: Tensor[(16, 8, 9), int16]) -> (Tensor[(16, 8, 9), int16], Tensor[(16, 8, 9), float32]) {
  %340 = cast(%var_2917, dtype="int16") /* ty=Tensor[(16, 8, 9), int16] */;
  %341 = shape_of(%var_2916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_2916, dtype="int16") /* ty=Tensor[(16, 8, 9), int16] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %344 = cast(%var_2916, dtype="float32") /* ty=Tensor[(16, 8, 9), float32] */;
  %345 = add(%342, %343) /* ty=Tensor[(16, 8, 9), int16] */;
  %346 = rsqrt(%344) /* ty=Tensor[(16, 8, 9), float32] */;
  (%345, %346)
}

def @func_3578(%var_3553: Tensor[(3, 5, 10), int16]) -> (Tensor[(3, 5, 10), int16], Tensor[(84, 12), int16], Tensor[(240), float32], Tensor[(1008), int16], Tensor[(3, 5, 10), float64]) {
  %347 = cast(%var_3553, dtype="int16") /* ty=Tensor[(3, 5, 10), int16] */;
  %348 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(3, 5, 10), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 5, 10), int16] */, dtype="int16") /* ty=Tensor[(3, 5, 10), int16] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %351 = cast(meta[relay.Constant][25] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %352 = cast(meta[relay.Constant][26] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %353 = reshape(%351, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float32] */;
  %354 = reshape(%352, newshape=[84, 12]) /* ty=Tensor[(84, 12), int16] */;
  %355 = @func_1701(%353, %354) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(6, 12, 14), float32], Tensor[(84, 12), int16]) */;
  %356 = cast(%var_3553, dtype="float64") /* ty=Tensor[(3, 5, 10), float64] */;
  %357 = subtract(%349, %350) /* ty=Tensor[(3, 5, 10), int16] */;
  %358 = %355.2;
  %359 = log2(%356) /* ty=Tensor[(3, 5, 10), float64] */;
  (%357, %358, meta[relay.Constant][25] /* ty=Tensor[(240), float32] */, meta[relay.Constant][26] /* ty=Tensor[(1008), int16] */, %359)
}

def @func_4395(%var_4317: Tensor[(8, 5, 7), float32], %var_4329: Tensor[(84), float64], %var_4331: Tensor[(192), float64], %var_4344: Tensor[(520), uint8], %var_4350: Tensor[(1152), int16], %var_4353: Tensor[(1008), int16], %var_4367: Tensor[(8, 5, 7), float32]) -> (Tensor[(8, 5, 7), int64], Tensor[(294), uint64], Tensor[(84), float64], Tensor[(1080), int64], Tensor[(192), float64], Tensor[(960), uint16], Tensor[(5, 9, 14), float64], Tensor[(520), uint8], Tensor[(16, 8, 9), float32], Tensor[(1152), int16], Tensor[(6, 12, 14), float32], Tensor[(1008), int16], Tensor[(8, 5, 7), bool], Tensor[(90, 12), int64]) {
  %360 = cast(%var_4317, dtype="float32") /* ty=Tensor[(8, 5, 7), float32] */;
  %361 = sqrt(%360) /* ty=Tensor[(8, 5, 7), float32] */;
  %362 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 5, 7), float32] */, dtype="int64") /* ty=Tensor[(8, 5, 7), int64] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="int64") /* ty=Tensor[(8, 5, 7), int64] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %366 = cast(%var_4329, dtype="float64") /* ty=Tensor[(84), float64] */;
  %367 = cast(meta[relay.Constant][28] /* ty=Tensor[(1080), int64] */, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %368 = cast(%var_4331, dtype="float64") /* ty=Tensor[(192), float64] */;
  %369 = cast(meta[relay.Constant][28] /* ty=Tensor[(1080), int64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %370 = cast(meta[relay.Constant][29] /* ty=Tensor[(960), uint16] */, dtype="uint16") /* ty=Tensor[(960), uint16] */;
  %371 = reshape(%366, newshape=[7, 2, 6]) /* ty=Tensor[(7, 2, 6), float64] */;
  %372 = reshape(%367, newshape=[1080]) /* ty=Tensor[(1080), int64] */;
  %373 = reshape(%368, newshape=[8, 24]) /* ty=Tensor[(8, 24), float64] */;
  %374 = reshape(%369, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), float64] */;
  %375 = reshape(%370, newshape=[960]) /* ty=Tensor[(960), uint16] */;
  %376 = @func_3340(%371, %372, %373, %374, %375) /* ty=(Tensor[(7, 2, 6), float64], Tensor[(3, 7, 14), uint64], Tensor[(294), uint64], Tensor[(1080), int64], Tensor[(6, 2, 16), float64], Tensor[(8, 24), float64], Tensor[(8, 9, 15), float32], Tensor[(8, 9, 15), bool], Tensor[(960), uint16], Tensor[(8, 9, 15), float32]) */;
  %377 = %376.2;
  %378 = cast(%377, dtype="uint64") /* ty=Tensor[(294), uint64] */;
  %379 = cast(%var_4344, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %380 = cast(%var_4331, dtype="float64") /* ty=Tensor[(192), float64] */;
  %381 = reshape(%378, newshape=[294, 1]) /* ty=Tensor[(294, 1), uint64] */;
  %382 = reshape(%379, newshape=[520]) /* ty=Tensor[(520), uint8] */;
  %383 = reshape(%380, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %384 = @func_2999(%381, %382, %383) /* ty=(Tensor[(7, 9, 12), uint16], Tensor[(3, 7, 14), uint64], uint64, Tensor[(294, 1), uint64], Tensor[(12, 14), float32], Tensor[(168), float32], Tensor[(192), float64], Tensor[(8, 5, 13), bool], Tensor[(5, 9, 14), float64], Tensor[(210, 3), uint8]) */;
  %385 = cast(%var_4350, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %386 = cast(%var_4350, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %387 = reshape(%385, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
  %388 = reshape(%386, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
  %389 = @func_2936(%387, %388) /* ty=(Tensor[(16, 8, 9), int16], Tensor[(16, 8, 9), float32]) */;
  %390 = cast(%var_4353, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %391 = reshape(%390, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %392 = @func_181(%391) /* ty=(Tensor[(6, 12, 14), float32],) */;
  %393 = cast(%361, dtype="float32") /* ty=Tensor[(8, 5, 7), float32] */;
  %394 = cosh(%393) /* ty=Tensor[(8, 5, 7), float32] */;
  %395 = cast(%var_4367, dtype="bool") /* ty=Tensor[(8, 5, 7), bool] */;
  %396 = shape_of(%394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%394, dtype="bool") /* ty=Tensor[(8, 5, 7), bool] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %399 = cast(meta[relay.Constant][29] /* ty=Tensor[(960), uint16] */, dtype="uint16") /* ty=Tensor[(960), uint16] */;
  %400 = cast(meta[relay.Constant][28] /* ty=Tensor[(1080), int64] */, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %401 = reshape(%399, newshape=[15, 8, 8]) /* ty=Tensor[(15, 8, 8), uint16] */;
  %402 = reshape(%400, newshape=[90, 12]) /* ty=Tensor[(90, 12), int64] */;
  %403 = @func_995(%401, %402) /* ty=(Tensor[(15, 8, 8), bool], Tensor[(8, 9, 15), bool], Tensor[(90, 12), int64], Tensor[(15, 8, 8), bool]) */;
  %404 = multiply(%364, %365) /* ty=Tensor[(8, 5, 7), int64] */;
  %405 = %384.8;
  %406 = %389.1;
  %407 = %392.0;
  %408 = not_equal(%397, %398) /* ty=Tensor[(8, 5, 7), bool] */;
  %409 = %403.2;
  (%404, %377, %var_4329, meta[relay.Constant][28] /* ty=Tensor[(1080), int64] */, %var_4331, meta[relay.Constant][29] /* ty=Tensor[(960), uint16] */, %405, %var_4344, %406, %var_4350, %407, %var_4353, %408, %409)
}

def @func_1767(%var_1752: Tensor[(6, 2, 16), float64]) -> Tensor[(6, 2, 16), float64] {
  %410 = cast(%var_1752, dtype="float64") /* ty=Tensor[(6, 2, 16), float64] */;
  %411 = cosh(%410) /* ty=Tensor[(6, 2, 16), float64] */;
  %412 = cast(%411, dtype="float64") /* ty=Tensor[(6, 2, 16), float64] */;
  acos(%412) /* ty=Tensor[(6, 2, 16), float64] */
}

def @func_3178(%var_3166: Tensor[(520), uint8], %var_3176: Tensor[(1080), int64]) -> (Tensor[(5, 8, 5), float64], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(8, 9, 15), bool], Tensor[(1080), int64]) {
  %413 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %414 = log(%413) /* ty=Tensor[(5, 8, 5), float64] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %416 = rsqrt(%415) /* ty=Tensor[(5, 8, 5), float64] */;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %418 = cast(%var_3166, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %419 = cast(%var_3166, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %420 = reshape(%418, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
  %421 = reshape(%419, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
  %422 = @func_1648(%420, %421) /* ty=(Tensor[(8, 5, 13), float32],) */;
  %423 = cast(%var_3176, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %424 = cast(%var_3176, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %425 = reshape(%423, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %426 = reshape(%424, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %427 = asin(%417) /* ty=Tensor[(5, 8, 5), float64] */;
  %428 = %422.0;
  %429 = @func_921(%425, %426) /* ty=Tensor[(8, 9, 15), bool] */;
  (%427, %428, %var_3166, %429, %var_3176)
}

def @func_5419() -> (Tensor[(4, 3, 10), float64],) {
  %430 = @func_5379() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */;
  %431 = %430.0;
  (%431,)
}

def @func_560(%var_552: uint8, %var_553: Tensor[(12, 3, 9), uint8]) -> Tensor[(12, 3, 9), uint8] {
  %432 = cast(%var_552, dtype="uint8") /* ty=uint8 */;
  %433 = cast(%var_553, dtype="uint8") /* ty=Tensor[(12, 3, 9), uint8] */;
  bitwise_and(%432, %433) /* ty=Tensor[(12, 3, 9), uint8] */
}

def @func_6136() -> Tensor[(4, 3, 10), float64] {
  %434 = @func_5379() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */;
  %434.0
}

def @func_1701(%var_1686: Tensor[(10, 3, 8), float32], %var_1698: Tensor[(84, 12), int16]) -> (Tensor[(10, 3, 8), float32], Tensor[(6, 12, 14), float32], Tensor[(84, 12), int16]) {
  %435 = cast(%var_1686, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %436 = cast(%var_1698, dtype="int16") /* ty=Tensor[(84, 12), int16] */;
  %437 = reshape(%436, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %438 = @func_181(%437) /* ty=(Tensor[(6, 12, 14), float32],) */;
  %439 = asinh(%435) /* ty=Tensor[(10, 3, 8), float32] */;
  %440 = %438.0;
  (%439, %440, %var_1698)
}

def @func_5653(%var_5608: Tensor[(5, 10, 12), uint64], %var_5609: Tensor[(5, 10, 12), uint64], %var_5622: Tensor[(520), uint8], %var_5642: Tensor[(180), float64], %var_5650: Tensor[(1152), int16]) -> (Tensor[(5, 10, 12), float32], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(5, 3, 12), float64], Tensor[(180), float64], Tensor[(16, 8, 9), float32], Tensor[(1152), int16]) {
  %441 = cast(%var_5609, dtype="bool") /* ty=Tensor[(5, 10, 12), bool] */;
  %442 = shape_of(%var_5608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%var_5608, dtype="bool") /* ty=Tensor[(5, 10, 12), bool] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %445 = not_equal(%443, %444) /* ty=Tensor[(5, 10, 12), bool] */;
  %446 = cast(%445, dtype="float32") /* ty=Tensor[(5, 10, 12), float32] */;
  %447 = cast(%var_5622, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %448 = cast(%var_5622, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %449 = reshape(%447, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
  %450 = reshape(%448, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
  %451 = @func_1648(%449, %450) /* ty=(Tensor[(8, 5, 13), float32],) */;
  %452 = cast(%var_5642, dtype="float64") /* ty=Tensor[(180), float64] */;
  %453 = reshape(%452, newshape=[5, 3, 12]) /* ty=Tensor[(5, 3, 12), float64] */;
  %454 = @func_4686(%453) /* ty=(Tensor[(5, 3, 12), float64],) */;
  %455 = cast(%var_5650, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %456 = cast(%var_5650, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %457 = reshape(%455, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
  %458 = reshape(%456, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
  %459 = @func_2936(%457, %458) /* ty=(Tensor[(16, 8, 9), int16], Tensor[(16, 8, 9), float32]) */;
  %460 = rsqrt(%446) /* ty=Tensor[(5, 10, 12), float32] */;
  %461 = %451.0;
  %462 = %454.0;
  %463 = %459.1;
  (%460, %461, %var_5622, %462, %var_5642, %463, %var_5650)
}

def @func_5905(%var_5817: Tensor[(7, 5, 6), float64], %var_5839: Tensor[(600), uint64], %var_5848: Tensor[(160), float64]) -> (Tensor[(7, 5, 6), float64], Tensor[(8, 5, 13), float32], Tensor[(600), uint64], Tensor[(520), uint8], Tensor[(30, 6), float64], Tensor[(1152), int16], Tensor[(10, 4, 4), float64], Tensor[(8, 9, 15), bool], Tensor[(90, 12), int64], Tensor[(4, 3, 10), float32], Tensor[(192), float64], Tensor[(160), float32]) {
  %464 = cast(%var_5817, dtype="float64") /* ty=Tensor[(7, 5, 6), float64] */;
  %465 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(7, 5, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 5, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 5, 6), float64] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %468 = cast(%var_5839, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %469 = cast(%var_5839, dtype="uint64") /* ty=Tensor[(600), uint64] */;
  %470 = cast(meta[relay.Constant][32] /* ty=Tensor[(520), uint8] */, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %471 = cast(meta[relay.Constant][33] /* ty=Tensor[(30, 6), float64] */, dtype="float64") /* ty=Tensor[(30, 6), float64] */;
  %472 = cast(meta[relay.Constant][34] /* ty=Tensor[(1152), int16] */, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %473 = reshape(%468, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint64] */;
  %474 = reshape(%469, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint64] */;
  %475 = reshape(%470, newshape=[520]) /* ty=Tensor[(520), uint8] */;
  %476 = reshape(%471, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %477 = reshape(%472, newshape=[1152]) /* ty=Tensor[(1152), int16] */;
  %478 = @func_5653(%473, %474, %475, %476, %477) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(5, 3, 12), float64], Tensor[(180), float64], Tensor[(16, 8, 9), float32], Tensor[(1152), int16]) */;
  %479 = cast(%var_5848, dtype="float64") /* ty=Tensor[(160), float64] */;
  %480 = reshape(%479, newshape=[10, 4, 4]) /* ty=Tensor[(10, 4, 4), float64] */;
  %481 = @func_4867(%480) /* ty=(Tensor[(10, 4, 4), float64],) */;
  %482 = cast(meta[relay.Constant][35] /* ty=Tensor[(90, 12), int64] */, dtype="int64") /* ty=Tensor[(90, 12), int64] */;
  %483 = cast(meta[relay.Constant][35] /* ty=Tensor[(90, 12), int64] */, dtype="int64") /* ty=Tensor[(90, 12), int64] */;
  %484 = reshape(%482, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %485 = reshape(%483, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %486 = cast(meta[relay.Constant][36] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %487 = reshape(%486, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float64] */;
  %488 = @func_5763(%487) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(192), float64], Tensor[(6, 2, 16), int64]) */;
  %489 = cast(%var_5848, dtype="float32") /* ty=Tensor[(160), float32] */;
  %490 = floor_mod(%466, %467) /* ty=Tensor[(7, 5, 6), float64] */;
  %491 = %478.1;
  %492 = %481.0;
  %493 = @func_921(%484, %485) /* ty=Tensor[(8, 9, 15), bool] */;
  %494 = %488.0;
  %495 = atan(%489) /* ty=Tensor[(160), float32] */;
  (%490, %491, %var_5839, meta[relay.Constant][32] /* ty=Tensor[(520), uint8] */, meta[relay.Constant][33] /* ty=Tensor[(30, 6), float64] */, meta[relay.Constant][34] /* ty=Tensor[(1152), int16] */, %492, %493, meta[relay.Constant][35] /* ty=Tensor[(90, 12), int64] */, %494, meta[relay.Constant][36] /* ty=Tensor[(192), float64] */, %495)
}

def @func_5691() -> Tensor[(4, 3, 10), float64] {
  %496 = @func_5379() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */;
  %496.0
}

def @func_2367(%var_2352: Tensor[(1485), float32]) -> (Tensor[(12, 7, 8), bool], Tensor[(15, 9, 11), float32], Tensor[(1485), float32], Tensor[(6, 12, 14), float32], Tensor[(1008), int16]) {
  %497 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 7, 8), float32] */, dtype="float32") /* ty=Tensor[(12, 7, 8), float32] */;
  %498 = rsqrt(%497) /* ty=Tensor[(12, 7, 8), float32] */;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(12, 7, 8), float64] */;
  %500 = log10(%499) /* ty=Tensor[(12, 7, 8), float64] */;
  %501 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 7, 8), float32] */, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %505 = cast(%var_2352, dtype="float32") /* ty=Tensor[(1485), float32] */;
  %506 = reshape(%505, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), float32] */;
  %507 = @func_1031(%506) /* ty=(Tensor[(15, 9, 11), float32],) */;
  %508 = cast(meta[relay.Constant][38] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %509 = reshape(%508, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %510 = @func_181(%509) /* ty=(Tensor[(6, 12, 14), float32],) */;
  %511 = not_equal(%503, %504) /* ty=Tensor[(12, 7, 8), bool] */;
  %512 = %507.0;
  %513 = %510.0;
  (%511, %512, %var_2352, %513, meta[relay.Constant][38] /* ty=Tensor[(1008), int16] */)
}

def @func_6168(%var_6164: Tensor[(2, 5, 11), float32]) -> Tensor[(2, 5, 11), float32] {
  %514 = cast(%var_6164, dtype="float32") /* ty=Tensor[(2, 5, 11), float32] */;
  %515 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(2, 5, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 11), float32] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%516, %517) /* ty=Tensor[(2, 5, 11), float32] */
}

def @func_2556(%var_2548: uint64, %var_2549: Tensor[(3, 7, 14), uint64]) -> (Tensor[(3, 7, 14), uint64],) {
  %518 = cast(%var_2548, dtype="uint64") /* ty=uint64 */;
  %519 = cast(%var_2549, dtype="uint64") /* ty=Tensor[(3, 7, 14), uint64] */;
  %520 = bitwise_xor(%518, %519) /* ty=Tensor[(3, 7, 14), uint64] */;
  (%520,)
}

def @func_5802(%var_5786: Tensor[(5, 9, 4), float32]) -> (Tensor[(5, 9, 4), float32],) {
  %521 = cast(%var_5786, dtype="float32") /* ty=Tensor[(5, 9, 4), float32] */;
  %522 = sinh(%521) /* ty=Tensor[(5, 9, 4), float32] */;
  %523 = cast(%522, dtype="float32") /* ty=Tensor[(5, 9, 4), float32] */;
  %524 = acosh(%523) /* ty=Tensor[(5, 9, 4), float32] */;
  (%524,)
}

def @func_4813(%var_4792: Tensor[(2, 16, 1), float32], %var_4793: Tensor[(2, 16, 1), float32], %var_4801: Tensor[(660), uint16]) -> (Tensor[(2, 16, ?), float32], Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32], Tensor[(2, 16, 660), float64]) {
  %525 = cast(%var_4793, dtype="bool") /* ty=Tensor[(2, 16, 1), bool] */;
  %526 = shape_of(%var_4792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%var_4792, dtype="bool") /* ty=Tensor[(2, 16, 1), bool] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %529 = less(%527, %528) /* ty=Tensor[(2, 16, ?), bool] */;
  %530 = cast(%529, dtype="float32") /* ty=Tensor[(2, 16, ?), float32] */;
  %531 = shape_of(%var_4792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%var_4792, dtype="float32") /* ty=Tensor[(2, 16, 1), float32] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %534 = cast(%var_4801, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %535 = cast(%var_4801, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %536 = reshape(%534, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), uint16] */;
  %537 = reshape(%535, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), uint16] */;
  %538 = @func_4592(%536, %537) /* ty=(Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32]) */;
  %539 = %538.0;
  %540 = cast(%539, dtype="uint16") /* ty=Tensor[(4, 15, 11), uint16] */;
  %541 = cast(%var_4801, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %542 = reshape(%540, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), uint16] */;
  %543 = reshape(%541, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), uint16] */;
  %544 = @func_4592(%542, %543) /* ty=(Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32]) */;
  %545 = cast(%529, dtype="float64") /* ty=Tensor[(2, 16, ?), float64] */;
  %546 = cast(%var_4801, dtype="float64") /* ty=Tensor[(660), float64] */;
  %547 = mod(%532, %533) /* ty=Tensor[(2, 16, ?), float32] */;
  %548 = %544.1;
  %549 = floor_mod(%545, %546) /* ty=Tensor[(2, 16, 660), float64] */;
  (%547, %539, %548, %549)
}

def @func_4626(%var_4599: Tensor[(15, 2, 10), int8], %var_4600: Tensor[(15, 2, 10), int8]) -> (Tensor[(15, 2, 10), uint64], Tensor[(15, 2, 10), float64]) {
  %550 = cast(%var_4600, dtype="int8") /* ty=Tensor[(15, 2, 10), int8] */;
  %551 = shape_of(%var_4599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%var_4599, dtype="int8") /* ty=Tensor[(15, 2, 10), int8] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %554 = add(%552, %553) /* ty=Tensor[(15, 2, 10), int8] */;
  %555 = cast(%var_4599, dtype="uint64") /* ty=Tensor[(15, 2, 10), uint64] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="uint64") /* ty=Tensor[(15, 2, 10), uint64] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %559 = cast(%var_4599, dtype="float64") /* ty=Tensor[(15, 2, 10), float64] */;
  %560 = left_shift(%557, %558) /* ty=Tensor[(15, 2, 10), uint64] */;
  %561 = log2(%559) /* ty=Tensor[(15, 2, 10), float64] */;
  (%560, %561)
}

def @func_2771(%var_2739: Tensor[(5, 9, 14), uint8]) -> (Tensor[(240), float32], Tensor[(1008), int16], Tensor[(5, 9, 14), float64], Tensor[(65, 240), int64]) {
  %562 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 9, 1), uint8] */, dtype="uint8") /* ty=Tensor[(5, 9, 1), uint8] */;
  %563 = cast(%var_2739, dtype="uint8") /* ty=Tensor[(5, 9, 14), uint8] */;
  %564 = left_shift(%562, %563) /* ty=Tensor[(5, 9, 14), uint8] */;
  %565 = cast(%564, dtype="float32") /* ty=Tensor[(5, 9, 14), float32] */;
  %566 = asin(%565) /* ty=Tensor[(5, 9, 14), float32] */;
  %567 = cast(%566, dtype="float64") /* ty=Tensor[(5, 9, 14), float64] */;
  %568 = cast(meta[relay.Constant][43] /* ty=Tensor[(65, 1), float32] */, dtype="float32") /* ty=Tensor[(65, 1), float32] */;
  %569 = cast(meta[relay.Constant][40] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %570 = cast(meta[relay.Constant][41] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %571 = reshape(%568, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %572 = reshape(%569, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %573 = reshape(%570, newshape=[1008]) /* ty=Tensor[(1008), int16] */;
  %574 = @func_2430(%571, %572, %573) /* ty=(Tensor[(240), float32], Tensor[(1008), int16], Tensor[(?, 13, 5), int64], Tensor[(84, 12), float32]) */;
  %575 = %574.0;
  %576 = cast(%575, dtype="int64") /* ty=Tensor[(240), int64] */;
  %577 = cast(meta[relay.Constant][43] /* ty=Tensor[(65, 1), float32] */, dtype="int64") /* ty=Tensor[(65, 1), int64] */;
  %578 = cosh(%567) /* ty=Tensor[(5, 9, 14), float64] */;
  %579 = minimum(%576, %577) /* ty=Tensor[(65, 240), int64] */;
  (meta[relay.Constant][40] /* ty=Tensor[(240), float32] */, meta[relay.Constant][41] /* ty=Tensor[(1008), int16] */, %578, %579)
}

def @func_3478(%var_3459: Tensor[(4, 13, 1), float32]) -> (Tensor[(4, 13, ?), bool],) {
  %580 = cast(%var_3459, dtype="float32") /* ty=Tensor[(4, 13, 1), float32] */;
  %581 = sin(%580) /* ty=Tensor[(4, 13, 1), float32] */;
  %582 = cast(%581, dtype="bool") /* ty=Tensor[(4, 13, 1), bool] */;
  %583 = shape_of(%var_3459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%var_3459, dtype="bool") /* ty=Tensor[(4, 13, 1), bool] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %586 = not_equal(%584, %585) /* ty=Tensor[(4, 13, ?), bool] */;
  (%586,)
}

def @func_3547(%var_3539: Tensor[(9, 11, 11), int16], %var_3540: Tensor[(9, 11, 11), int16]) -> (Tensor[(9, 11, 11), bool],) {
  %587 = cast(%var_3540, dtype="bool") /* ty=Tensor[(9, 11, 11), bool] */;
  %588 = shape_of(%var_3539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%var_3539, dtype="bool") /* ty=Tensor[(9, 11, 11), bool] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %591 = less_equal(%589, %590) /* ty=Tensor[(9, 11, 11), bool] */;
  (%591,)
}

def @func_4592(%var_4578: Tensor[(4, 15, 11), uint16], %var_4579: Tensor[(4, 15, 11), uint16]) -> (Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32]) {
  %592 = cast(%var_4579, dtype="uint16") /* ty=Tensor[(4, 15, 11), uint16] */;
  %593 = shape_of(%var_4578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%var_4578, dtype="uint16") /* ty=Tensor[(4, 15, 11), uint16] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %596 = cast(%var_4578, dtype="float32") /* ty=Tensor[(4, 15, 11), float32] */;
  %597 = logical_xor(%594, %595) /* ty=Tensor[(4, 15, 11), uint16] */;
  %598 = cosh(%596) /* ty=Tensor[(4, 15, 11), float32] */;
  (%597, %598)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2559(%var_2557: uint64, %var_2558: Tensor[(3, 7, 14), uint64]) -> (Tensor[(3, 7, 14), uint64],) {
  %3 = fn (%var_2548: uint64, %var_2549: Tensor[(3, 7, 14), uint64]) -> (Tensor[(3, 7, 14), uint64],) {
    %0 = cast(%var_2548, dtype="uint64") /* ty=uint64 */;
    %1 = cast(%var_2549, dtype="uint64") /* ty=Tensor[(3, 7, 14), uint64] */;
    %2 = bitwise_xor(%0, %1) /* ty=Tensor[(3, 7, 14), uint64] */;
    (%2,)
  };
  %3(%var_2557, %var_2558) /* ty=(Tensor[(3, 7, 14), uint64],) */
}

def @func_4869(%var_4868: Tensor[(10, 4, 4), float64]) -> (Tensor[(10, 4, 4), float64],) {
  %11 = fn (%var_4855: Tensor[(10, 4, 4), float64]) -> (Tensor[(10, 4, 4), float64],) {
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 4, 4), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 4), float64] */;
    %5 = shape_of(%var_4855, dtype="int32") /* ty=Tensor[(3), int32] */;
    %6 = cast(%var_4855, dtype="float64") /* ty=Tensor[(10, 4, 4), float64] */;
    %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %8 = floor_divide(%6, %7) /* ty=Tensor[(10, 4, 4), float64] */;
    %9 = cast(%8, dtype="float64") /* ty=Tensor[(10, 4, 4), float64] */;
    %10 = erf(%9) /* ty=Tensor[(10, 4, 4), float64] */;
    (%10,)
  };
  %11(%var_4868) /* ty=(Tensor[(10, 4, 4), float64],) */
}

def @func_3581(%var_3579: Tensor[(3, 5, 10), int16]) -> (Tensor[(3, 5, 10), int16], Tensor[(84, 12), int16], Tensor[(240), float32], Tensor[(1008), int16], Tensor[(3, 5, 10), float64]) {
  @func_3578(%var_3579) /* ty=(Tensor[(3, 5, 10), int16], Tensor[(84, 12), int16], Tensor[(240), float32], Tensor[(1008), int16], Tensor[(3, 5, 10), float64]) */
}

def @func_3003(%var_3000: Tensor[(294, 1), uint64], %var_3001: Tensor[(520), uint8], %var_3002: Tensor[(192), float64]) -> (Tensor[(7, 9, 12), uint16], Tensor[(3, 7, 14), uint64], uint64, Tensor[(294, 1), uint64], Tensor[(12, 14), float32], Tensor[(168), float32], Tensor[(192), float64], Tensor[(8, 5, 13), bool], Tensor[(5, 9, 14), float64], Tensor[(210, 3), uint8]) {
  %44 = fn (%var_2957: Tensor[(294, 1), uint64], %var_2962: Tensor[(520), uint8], %var_2979: Tensor[(192), float64]) -> (Tensor[(7, 9, 12), uint16], Tensor[(3, 7, 14), uint64], uint64, Tensor[(294, 1), uint64], Tensor[(12, 14), float32], Tensor[(168), float32], Tensor[(192), float64], Tensor[(8, 5, 13), bool], Tensor[(5, 9, 14), float64], Tensor[(210, 3), uint8]) {
    %12 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 9, 12), uint16] */, dtype="uint16") /* ty=Tensor[(7, 9, 12), uint16] */;
    %13 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(7, 9, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 9, 12), uint16] */, dtype="uint16") /* ty=Tensor[(7, 9, 12), uint16] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %16 = cast(meta[relay.Constant][3] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %17 = cast(%var_2957, dtype="uint64") /* ty=Tensor[(294, 1), uint64] */;
    %18 = reshape(%16, newshape=[]) /* ty=uint64 */;
    %19 = reshape(%17, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), uint64] */;
    %20 = @func_2556(%18, %19) /* ty=(Tensor[(3, 7, 14), uint64],) */;
    %21 = cast(meta[relay.Constant][4] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %22 = cast(%var_2979, dtype="float64") /* ty=Tensor[(192), float64] */;
    %23 = reshape(%21, newshape=[12, 14]) /* ty=Tensor[(12, 14), float32] */;
    %24 = reshape(%22, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %25 = @func_2220(%23, %24) /* ty=(Tensor[(12, 14), float32], Tensor[(6, 2, 16), float64], Tensor[(192), float64]) */;
    %26 = cast(%var_2962, dtype="uint8") /* ty=Tensor[(520), uint8] */;
    %27 = cast(%var_2962, dtype="uint8") /* ty=Tensor[(520), uint8] */;
    %28 = reshape(%26, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
    %29 = reshape(%27, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
    %30 = @func_1648(%28, %29) /* ty=(Tensor[(8, 5, 13), float32],) */;
    %31 = %30.0;
    %32 = cast(%var_2962, dtype="bool") /* ty=Tensor[(520), bool] */;
    %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
    %34 = cast(%31, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
    %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %36 = cast(meta[relay.Constant][5] /* ty=Tensor[(210, 3), uint8] */, dtype="uint8") /* ty=Tensor[(210, 3), uint8] */;
    %37 = reshape(%36, newshape=[5, 9, 14]) /* ty=Tensor[(5, 9, 14), uint8] */;
    %38 = @func_2771(%37) /* ty=(Tensor[(240), float32], Tensor[(1008), int16], Tensor[(5, 9, 14), float64], Tensor[(65, 240), int64]) */;
    %39 = multiply(%14, %15) /* ty=Tensor[(7, 9, 12), uint16] */;
    %40 = %20.0;
    %41 = %25.0;
    %42 = less(%34, %35) /* ty=Tensor[(8, 5, 13), bool] */;
    %43 = %38.2;
    (%39, %40, meta[relay.Constant][3] /* ty=uint64 */, %var_2957, %41, meta[relay.Constant][4] /* ty=Tensor[(168), float32] */, %var_2979, %42, %43, meta[relay.Constant][5] /* ty=Tensor[(210, 3), uint8] */)
  };
  %44(%var_3000, %var_3001, %var_3002) /* ty=(Tensor[(7, 9, 12), uint16], Tensor[(3, 7, 14), uint64], uint64, Tensor[(294, 1), uint64], Tensor[(12, 14), float32], Tensor[(168), float32], Tensor[(192), float64], Tensor[(8, 5, 13), bool], Tensor[(5, 9, 14), float64], Tensor[(210, 3), uint8]) */
}

def @func_5653(%var_5608: Tensor[(5, 10, 12), uint64], %var_5609: Tensor[(5, 10, 12), uint64], %var_5622: Tensor[(520), uint8], %var_5642: Tensor[(180), float64], %var_5650: Tensor[(1152), int16]) -> (Tensor[(5, 10, 12), float32], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(5, 3, 12), float64], Tensor[(180), float64], Tensor[(16, 8, 9), float32], Tensor[(1152), int16]) {
  %45 = cast(%var_5609, dtype="bool") /* ty=Tensor[(5, 10, 12), bool] */;
  %46 = shape_of(%var_5608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%var_5608, dtype="bool") /* ty=Tensor[(5, 10, 12), bool] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %49 = not_equal(%47, %48) /* ty=Tensor[(5, 10, 12), bool] */;
  %50 = cast(%49, dtype="float32") /* ty=Tensor[(5, 10, 12), float32] */;
  %51 = cast(%var_5622, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %52 = cast(%var_5622, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %53 = reshape(%51, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
  %54 = reshape(%52, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
  %55 = @func_1648(%53, %54) /* ty=(Tensor[(8, 5, 13), float32],) */;
  %56 = cast(%var_5642, dtype="float64") /* ty=Tensor[(180), float64] */;
  %57 = reshape(%56, newshape=[5, 3, 12]) /* ty=Tensor[(5, 3, 12), float64] */;
  %58 = @func_4686(%57) /* ty=(Tensor[(5, 3, 12), float64],) */;
  %59 = cast(%var_5650, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %60 = cast(%var_5650, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %61 = reshape(%59, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
  %62 = reshape(%60, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
  %63 = @func_2936(%61, %62) /* ty=(Tensor[(16, 8, 9), int16], Tensor[(16, 8, 9), float32]) */;
  %64 = rsqrt(%50) /* ty=Tensor[(5, 10, 12), float32] */;
  %65 = %55.0;
  %66 = %58.0;
  %67 = %63.1;
  (%64, %65, %var_5622, %66, %var_5642, %67, %var_5650)
}

def @func_2224(%var_2222: Tensor[(12, 14), float32], %var_2223: Tensor[(192), float64]) -> (Tensor[(12, 14), float32], Tensor[(6, 2, 16), float64], Tensor[(192), float64]) {
  @func_2220(%var_2222, %var_2223) /* ty=(Tensor[(12, 14), float32], Tensor[(6, 2, 16), float64], Tensor[(192), float64]) */
}

def @func_5660(%var_5655: Tensor[(5, 10, 12), uint64], %var_5656: Tensor[(5, 10, 12), uint64], %var_5657: Tensor[(520), uint8], %var_5658: Tensor[(180), float64], %var_5659: Tensor[(1152), int16]) -> (Tensor[(5, 10, 12), float32], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(5, 3, 12), float64], Tensor[(180), float64], Tensor[(16, 8, 9), float32], Tensor[(1152), int16]) {
  @func_5653(%var_5655, %var_5656, %var_5657, %var_5658, %var_5659) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(5, 3, 12), float64], Tensor[(180), float64], Tensor[(16, 8, 9), float32], Tensor[(1152), int16]) */
}

def @func_925(%var_923: Tensor[(8, 9, 15), int64], %var_924: Tensor[(8, 9, 15), int64]) -> Tensor[(8, 9, 15), bool] {
  @func_921(%var_923, %var_924) /* ty=Tensor[(8, 9, 15), bool] */
}

def @func_3182(%var_3180: Tensor[(520), uint8], %var_3181: Tensor[(1080), int64]) -> (Tensor[(5, 8, 5), float64], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(8, 9, 15), bool], Tensor[(1080), int64]) {
  @func_3178(%var_3180, %var_3181) /* ty=(Tensor[(5, 8, 5), float64], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(8, 9, 15), bool], Tensor[(1080), int64]) */
}

def @func_1033(%var_1032: Tensor[(15, 9, 11), float32]) -> (Tensor[(15, 9, 11), float32],) {
  %73 = fn (%var_1021: Tensor[(15, 9, 11), float32]) -> (Tensor[(15, 9, 11), float32],) {
    %68 = cast(%var_1021, dtype="float32") /* ty=Tensor[(15, 9, 11), float32] */;
    %69 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(15, 9, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 9, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 9, 11), float32] */;
    %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %72 = floor_mod(%70, %71) /* ty=Tensor[(15, 9, 11), float32] */;
    (%72,)
  };
  %73(%var_1032) /* ty=(Tensor[(15, 9, 11), float32],) */
}

def @func_3481(%var_3479: Tensor[(4, 13, 1), float32]) -> (Tensor[(4, 13, ?), bool],) {
  @func_3478(%var_3479) /* ty=(Tensor[(4, 13, ?), bool],) */
}

def @func_1704(%var_1702: Tensor[(10, 3, 8), float32], %var_1703: Tensor[(84, 12), int16]) -> (Tensor[(10, 3, 8), float32], Tensor[(6, 12, 14), float32], Tensor[(84, 12), int16]) {
  %80 = fn (%var_1686: Tensor[(10, 3, 8), float32], %var_1698: Tensor[(84, 12), int16]) -> (Tensor[(10, 3, 8), float32], Tensor[(6, 12, 14), float32], Tensor[(84, 12), int16]) {
    %74 = cast(%var_1686, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
    %75 = cast(%var_1698, dtype="int16") /* ty=Tensor[(84, 12), int16] */;
    %76 = reshape(%75, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
    %77 = @func_181(%76) /* ty=(Tensor[(6, 12, 14), float32],) */;
    %78 = asinh(%74) /* ty=Tensor[(10, 3, 8), float32] */;
    %79 = %77.0;
    (%78, %79, %var_1698)
  };
  %80(%var_1702, %var_1703) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(6, 12, 14), float32], Tensor[(84, 12), int16]) */
}

def @main() -> (Tensor[(4, 3, 10), float32], int16, Tensor[(96), int32]) {
  %81 = @func_5381() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */;
  %82 = cast(meta[relay.Constant][7] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %83 = cast(meta[relay.Constant][8] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %84 = cast(meta[relay.Constant][8] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %85 = reshape(%82, newshape=[]) /* ty=int16 */;
  %86 = reshape(%83, newshape=[4, 24]) /* ty=Tensor[(4, 24), float64] */;
  %87 = reshape(%84, newshape=[4, 24]) /* ty=Tensor[(4, 24), float64] */;
  %88 = @func_5580(%85, %86, %87) /* ty=(Tensor[(4, 3, 10), float64], Tensor[(6, 8, 2), bool], Tensor[(4, 24), float32], Tensor[(4, 24), float32], Tensor[(4, 24), float32], Tensor[(4, 24), int16]) */;
  %89 = %88.2;
  %90 = cast(%89, dtype="int32") /* ty=Tensor[(4, 24), int32] */;
  %91 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(96), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %92 = cast(meta[relay.Constant][8] /* ty=Tensor[(96), float64] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?), int32] */;
  %94 = %81.1;
  %95 = left_shift(%92, %93) /* ty=Tensor[(96), int32] */;
  (%94, meta[relay.Constant][7] /* ty=int16 */, %95)
}

def @func_2220(%var_2191: Tensor[(12, 14), float32], %var_2195: Tensor[(192), float64]) -> (Tensor[(12, 14), float32], Tensor[(6, 2, 16), float64], Tensor[(192), float64]) {
  %96 = cast(%var_2191, dtype="float32") /* ty=Tensor[(12, 14), float32] */;
  %97 = cast(%var_2195, dtype="float64") /* ty=Tensor[(192), float64] */;
  %98 = reshape(%97, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float64] */;
  %99 = erf(%96) /* ty=Tensor[(12, 14), float32] */;
  %100 = @func_1767(%98) /* ty=Tensor[(6, 2, 16), float64] */;
  (%99, %100, %var_2195)
}

def @func_1451(%var_1448: uint16, %var_1449: Tensor[(5, 5, 5), uint16], %var_1450: Tensor[(1080), int64]) -> (Tensor[(5, 5, 5), uint16], Tensor[(8, 9, 15), bool], Tensor[(1080), int64]) {
  @func_1446(%var_1448, %var_1449, %var_1450) /* ty=(Tensor[(5, 5, 5), uint16], Tensor[(8, 9, 15), bool], Tensor[(1080), int64]) */
}

def @func_3478(%var_3459: Tensor[(4, 13, 1), float32]) -> (Tensor[(4, 13, ?), bool],) {
  %101 = cast(%var_3459, dtype="float32") /* ty=Tensor[(4, 13, 1), float32] */;
  %102 = sin(%101) /* ty=Tensor[(4, 13, 1), float32] */;
  %103 = cast(%102, dtype="bool") /* ty=Tensor[(4, 13, 1), bool] */;
  %104 = shape_of(%var_3459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%var_3459, dtype="bool") /* ty=Tensor[(4, 13, 1), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %107 = not_equal(%105, %106) /* ty=Tensor[(4, 13, ?), bool] */;
  (%107,)
}

def @func_3550(%var_3548: Tensor[(9, 11, 11), int16], %var_3549: Tensor[(9, 11, 11), int16]) -> (Tensor[(9, 11, 11), bool],) {
  %113 = fn (%var_3539: Tensor[(9, 11, 11), int16], %var_3540: Tensor[(9, 11, 11), int16]) -> (Tensor[(9, 11, 11), bool],) {
    %108 = cast(%var_3540, dtype="bool") /* ty=Tensor[(9, 11, 11), bool] */;
    %109 = shape_of(%var_3539, dtype="int32") /* ty=Tensor[(3), int32] */;
    %110 = cast(%var_3539, dtype="bool") /* ty=Tensor[(9, 11, 11), bool] */;
    %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %112 = less_equal(%110, %111) /* ty=Tensor[(9, 11, 11), bool] */;
    (%112,)
  };
  %113(%var_3548, %var_3549) /* ty=(Tensor[(9, 11, 11), bool],) */
}

def @func_999(%var_997: Tensor[(15, 8, 8), uint16], %var_998: Tensor[(90, 12), int64]) -> (Tensor[(15, 8, 8), bool], Tensor[(8, 9, 15), bool], Tensor[(90, 12), int64], Tensor[(15, 8, 8), bool]) {
  @func_995(%var_997, %var_998) /* ty=(Tensor[(15, 8, 8), bool], Tensor[(8, 9, 15), bool], Tensor[(90, 12), int64], Tensor[(15, 8, 8), bool]) */
}

def @func_3347(%var_3342: Tensor[(7, 2, 6), float64], %var_3343: Tensor[(1080), int64], %var_3344: Tensor[(8, 24), float64], %var_3345: Tensor[(8, 9, 15), float64], %var_3346: Tensor[(960), uint16]) -> (Tensor[(7, 2, 6), float64], Tensor[(3, 7, 14), uint64], Tensor[(294), uint64], Tensor[(1080), int64], Tensor[(6, 2, 16), float64], Tensor[(8, 24), float64], Tensor[(8, 9, 15), float32], Tensor[(8, 9, 15), bool], Tensor[(960), uint16], Tensor[(8, 9, 15), float32]) {
  @func_3340(%var_3342, %var_3343, %var_3344, %var_3345, %var_3346) /* ty=(Tensor[(7, 2, 6), float64], Tensor[(3, 7, 14), uint64], Tensor[(294), uint64], Tensor[(1080), int64], Tensor[(6, 2, 16), float64], Tensor[(8, 24), float64], Tensor[(8, 9, 15), float32], Tensor[(8, 9, 15), bool], Tensor[(960), uint16], Tensor[(8, 9, 15), float32]) */
}

def @func_5691() -> Tensor[(4, 3, 10), float64] {
  %114 = @func_5379() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */;
  %114.0
}

def @func_4395(%var_4317: Tensor[(8, 5, 7), float32], %var_4329: Tensor[(84), float64], %var_4331: Tensor[(192), float64], %var_4344: Tensor[(520), uint8], %var_4350: Tensor[(1152), int16], %var_4353: Tensor[(1008), int16], %var_4367: Tensor[(8, 5, 7), float32]) -> (Tensor[(8, 5, 7), int64], Tensor[(294), uint64], Tensor[(84), float64], Tensor[(1080), int64], Tensor[(192), float64], Tensor[(960), uint16], Tensor[(5, 9, 14), float64], Tensor[(520), uint8], Tensor[(16, 8, 9), float32], Tensor[(1152), int16], Tensor[(6, 12, 14), float32], Tensor[(1008), int16], Tensor[(8, 5, 7), bool], Tensor[(90, 12), int64]) {
  %115 = cast(%var_4317, dtype="float32") /* ty=Tensor[(8, 5, 7), float32] */;
  %116 = sqrt(%115) /* ty=Tensor[(8, 5, 7), float32] */;
  %117 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 5, 7), float32] */, dtype="int64") /* ty=Tensor[(8, 5, 7), int64] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="int64") /* ty=Tensor[(8, 5, 7), int64] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %121 = cast(%var_4329, dtype="float64") /* ty=Tensor[(84), float64] */;
  %122 = cast(meta[relay.Constant][10] /* ty=Tensor[(1080), int64] */, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %123 = cast(%var_4331, dtype="float64") /* ty=Tensor[(192), float64] */;
  %124 = cast(meta[relay.Constant][10] /* ty=Tensor[(1080), int64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %125 = cast(meta[relay.Constant][11] /* ty=Tensor[(960), uint16] */, dtype="uint16") /* ty=Tensor[(960), uint16] */;
  %126 = reshape(%121, newshape=[7, 2, 6]) /* ty=Tensor[(7, 2, 6), float64] */;
  %127 = reshape(%122, newshape=[1080]) /* ty=Tensor[(1080), int64] */;
  %128 = reshape(%123, newshape=[8, 24]) /* ty=Tensor[(8, 24), float64] */;
  %129 = reshape(%124, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), float64] */;
  %130 = reshape(%125, newshape=[960]) /* ty=Tensor[(960), uint16] */;
  %131 = @func_3340(%126, %127, %128, %129, %130) /* ty=(Tensor[(7, 2, 6), float64], Tensor[(3, 7, 14), uint64], Tensor[(294), uint64], Tensor[(1080), int64], Tensor[(6, 2, 16), float64], Tensor[(8, 24), float64], Tensor[(8, 9, 15), float32], Tensor[(8, 9, 15), bool], Tensor[(960), uint16], Tensor[(8, 9, 15), float32]) */;
  %132 = %131.2;
  %133 = cast(%132, dtype="uint64") /* ty=Tensor[(294), uint64] */;
  %134 = cast(%var_4344, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %135 = cast(%var_4331, dtype="float64") /* ty=Tensor[(192), float64] */;
  %136 = reshape(%133, newshape=[294, 1]) /* ty=Tensor[(294, 1), uint64] */;
  %137 = reshape(%134, newshape=[520]) /* ty=Tensor[(520), uint8] */;
  %138 = reshape(%135, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %139 = @func_2999(%136, %137, %138) /* ty=(Tensor[(7, 9, 12), uint16], Tensor[(3, 7, 14), uint64], uint64, Tensor[(294, 1), uint64], Tensor[(12, 14), float32], Tensor[(168), float32], Tensor[(192), float64], Tensor[(8, 5, 13), bool], Tensor[(5, 9, 14), float64], Tensor[(210, 3), uint8]) */;
  %140 = cast(%var_4350, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %141 = cast(%var_4350, dtype="int16") /* ty=Tensor[(1152), int16] */;
  %142 = reshape(%140, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
  %143 = reshape(%141, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
  %144 = @func_2936(%142, %143) /* ty=(Tensor[(16, 8, 9), int16], Tensor[(16, 8, 9), float32]) */;
  %145 = cast(%var_4353, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %146 = reshape(%145, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
  %147 = @func_181(%146) /* ty=(Tensor[(6, 12, 14), float32],) */;
  %148 = cast(%116, dtype="float32") /* ty=Tensor[(8, 5, 7), float32] */;
  %149 = cosh(%148) /* ty=Tensor[(8, 5, 7), float32] */;
  %150 = cast(%var_4367, dtype="bool") /* ty=Tensor[(8, 5, 7), bool] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="bool") /* ty=Tensor[(8, 5, 7), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = cast(meta[relay.Constant][11] /* ty=Tensor[(960), uint16] */, dtype="uint16") /* ty=Tensor[(960), uint16] */;
  %155 = cast(meta[relay.Constant][10] /* ty=Tensor[(1080), int64] */, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %156 = reshape(%154, newshape=[15, 8, 8]) /* ty=Tensor[(15, 8, 8), uint16] */;
  %157 = reshape(%155, newshape=[90, 12]) /* ty=Tensor[(90, 12), int64] */;
  %158 = @func_995(%156, %157) /* ty=(Tensor[(15, 8, 8), bool], Tensor[(8, 9, 15), bool], Tensor[(90, 12), int64], Tensor[(15, 8, 8), bool]) */;
  %159 = multiply(%119, %120) /* ty=Tensor[(8, 5, 7), int64] */;
  %160 = %139.8;
  %161 = %144.1;
  %162 = %147.0;
  %163 = not_equal(%152, %153) /* ty=Tensor[(8, 5, 7), bool] */;
  %164 = %158.2;
  (%159, %132, %var_4329, meta[relay.Constant][10] /* ty=Tensor[(1080), int64] */, %var_4331, meta[relay.Constant][11] /* ty=Tensor[(960), uint16] */, %160, %var_4344, %161, %var_4350, %162, %var_4353, %163, %164)
}

def @func_4595(%var_4593: Tensor[(4, 15, 11), uint16], %var_4594: Tensor[(4, 15, 11), uint16]) -> (Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32]) {
  %172 = fn (%var_4578: Tensor[(4, 15, 11), uint16], %var_4579: Tensor[(4, 15, 11), uint16]) -> (Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32]) {
    %165 = cast(%var_4579, dtype="uint16") /* ty=Tensor[(4, 15, 11), uint16] */;
    %166 = shape_of(%var_4578, dtype="int32") /* ty=Tensor[(3), int32] */;
    %167 = cast(%var_4578, dtype="uint16") /* ty=Tensor[(4, 15, 11), uint16] */;
    %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %169 = cast(%var_4578, dtype="float32") /* ty=Tensor[(4, 15, 11), float32] */;
    %170 = logical_xor(%167, %168) /* ty=Tensor[(4, 15, 11), uint16] */;
    %171 = cosh(%169) /* ty=Tensor[(4, 15, 11), float32] */;
    (%170, %171)
  };
  %172(%var_4593, %var_4594) /* ty=(Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32]) */
}

def @func_2774(%var_2772: Tensor[(5, 9, 14), uint8]) -> (Tensor[(240), float32], Tensor[(1008), int16], Tensor[(5, 9, 14), float64], Tensor[(65, 240), int64]) {
  @func_2771(%var_2772) /* ty=(Tensor[(240), float32], Tensor[(1008), int16], Tensor[(5, 9, 14), float64], Tensor[(65, 240), int64]) */
}

def @func_1446(%var_1416: uint16, %var_1417: Tensor[(5, 5, 5), uint16], %var_1440: Tensor[(1080), int64]) -> (Tensor[(5, 5, 5), uint16], Tensor[(8, 9, 15), bool], Tensor[(1080), int64]) {
  %173 = cast(%var_1416, dtype="uint16") /* ty=uint16 */;
  %174 = cast(%var_1417, dtype="uint16") /* ty=Tensor[(5, 5, 5), uint16] */;
  %175 = cast(%var_1440, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %176 = cast(%var_1440, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %177 = reshape(%175, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %178 = reshape(%176, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %179 = maximum(%173, %174) /* ty=Tensor[(5, 5, 5), uint16] */;
  %180 = @func_921(%177, %178) /* ty=Tensor[(8, 9, 15), bool] */;
  (%179, %180, %var_1440)
}

def @func_1648(%var_1595: Tensor[(8, 5, 13), uint8], %var_1596: Tensor[(8, 5, 13), uint8]) -> (Tensor[(8, 5, 13), float32],) {
  %181 = cast(%var_1596, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
  %182 = shape_of(%var_1595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%var_1595, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %185 = not_equal(%183, %184) /* ty=Tensor[(8, 5, 13), bool] */;
  %186 = cast(%185, dtype="float64") /* ty=Tensor[(8, 5, 13), float64] */;
  %187 = sqrt(%186) /* ty=Tensor[(8, 5, 13), float64] */;
  %188 = cast(%var_1596, dtype="uint16") /* ty=Tensor[(8, 5, 13), uint16] */;
  %189 = shape_of(%var_1595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%var_1595, dtype="uint16") /* ty=Tensor[(8, 5, 13), uint16] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %192 = left_shift(%190, %191) /* ty=Tensor[(8, 5, 13), uint16] */;
  %193 = cast(%192, dtype="float32") /* ty=Tensor[(8, 5, 13), float32] */;
  %194 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%187, dtype="float32") /* ty=Tensor[(8, 5, 13), float32] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %197 = power(%195, %196) /* ty=Tensor[(8, 5, 13), float32] */;
  (%197,)
}

def @func_5909(%var_5906: Tensor[(7, 5, 6), float64], %var_5907: Tensor[(600), uint64], %var_5908: Tensor[(160), float64]) -> (Tensor[(7, 5, 6), float64], Tensor[(8, 5, 13), float32], Tensor[(600), uint64], Tensor[(520), uint8], Tensor[(30, 6), float64], Tensor[(1152), int16], Tensor[(10, 4, 4), float64], Tensor[(8, 9, 15), bool], Tensor[(90, 12), int64], Tensor[(4, 3, 10), float32], Tensor[(192), float64], Tensor[(160), float32]) {
  %230 = fn (%var_5817: Tensor[(7, 5, 6), float64], %var_5839: Tensor[(600), uint64], %var_5848: Tensor[(160), float64]) -> (Tensor[(7, 5, 6), float64], Tensor[(8, 5, 13), float32], Tensor[(600), uint64], Tensor[(520), uint8], Tensor[(30, 6), float64], Tensor[(1152), int16], Tensor[(10, 4, 4), float64], Tensor[(8, 9, 15), bool], Tensor[(90, 12), int64], Tensor[(4, 3, 10), float32], Tensor[(192), float64], Tensor[(160), float32]) {
    %198 = cast(%var_5817, dtype="float64") /* ty=Tensor[(7, 5, 6), float64] */;
    %199 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(7, 5, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %200 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 5, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 5, 6), float64] */;
    %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %202 = cast(%var_5839, dtype="uint64") /* ty=Tensor[(600), uint64] */;
    %203 = cast(%var_5839, dtype="uint64") /* ty=Tensor[(600), uint64] */;
    %204 = cast(meta[relay.Constant][13] /* ty=Tensor[(520), uint8] */, dtype="uint8") /* ty=Tensor[(520), uint8] */;
    %205 = cast(meta[relay.Constant][14] /* ty=Tensor[(30, 6), float64] */, dtype="float64") /* ty=Tensor[(30, 6), float64] */;
    %206 = cast(meta[relay.Constant][15] /* ty=Tensor[(1152), int16] */, dtype="int16") /* ty=Tensor[(1152), int16] */;
    %207 = reshape(%202, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint64] */;
    %208 = reshape(%203, newshape=[5, 10, 12]) /* ty=Tensor[(5, 10, 12), uint64] */;
    %209 = reshape(%204, newshape=[520]) /* ty=Tensor[(520), uint8] */;
    %210 = reshape(%205, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %211 = reshape(%206, newshape=[1152]) /* ty=Tensor[(1152), int16] */;
    %212 = @func_5653(%207, %208, %209, %210, %211) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(5, 3, 12), float64], Tensor[(180), float64], Tensor[(16, 8, 9), float32], Tensor[(1152), int16]) */;
    %213 = cast(%var_5848, dtype="float64") /* ty=Tensor[(160), float64] */;
    %214 = reshape(%213, newshape=[10, 4, 4]) /* ty=Tensor[(10, 4, 4), float64] */;
    %215 = @func_4867(%214) /* ty=(Tensor[(10, 4, 4), float64],) */;
    %216 = cast(meta[relay.Constant][16] /* ty=Tensor[(90, 12), int64] */, dtype="int64") /* ty=Tensor[(90, 12), int64] */;
    %217 = cast(meta[relay.Constant][16] /* ty=Tensor[(90, 12), int64] */, dtype="int64") /* ty=Tensor[(90, 12), int64] */;
    %218 = reshape(%216, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
    %219 = reshape(%217, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
    %220 = cast(meta[relay.Constant][17] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %221 = reshape(%220, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float64] */;
    %222 = @func_5763(%221) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(192), float64], Tensor[(6, 2, 16), int64]) */;
    %223 = cast(%var_5848, dtype="float32") /* ty=Tensor[(160), float32] */;
    %224 = floor_mod(%200, %201) /* ty=Tensor[(7, 5, 6), float64] */;
    %225 = %212.1;
    %226 = %215.0;
    %227 = @func_921(%218, %219) /* ty=Tensor[(8, 9, 15), bool] */;
    %228 = %222.0;
    %229 = atan(%223) /* ty=Tensor[(160), float32] */;
    (%224, %225, %var_5839, meta[relay.Constant][13] /* ty=Tensor[(520), uint8] */, meta[relay.Constant][14] /* ty=Tensor[(30, 6), float64] */, meta[relay.Constant][15] /* ty=Tensor[(1152), int16] */, %226, %227, meta[relay.Constant][16] /* ty=Tensor[(90, 12), int64] */, %228, meta[relay.Constant][17] /* ty=Tensor[(192), float64] */, %229)
  };
  %230(%var_5906, %var_5907, %var_5908) /* ty=(Tensor[(7, 5, 6), float64], Tensor[(8, 5, 13), float32], Tensor[(600), uint64], Tensor[(520), uint8], Tensor[(30, 6), float64], Tensor[(1152), int16], Tensor[(10, 4, 4), float64], Tensor[(8, 9, 15), bool], Tensor[(90, 12), int64], Tensor[(4, 3, 10), float32], Tensor[(192), float64], Tensor[(160), float32]) */
}

def @func_5693() -> Tensor[(4, 3, 10), float64] {
  @func_5691() /* ty=Tensor[(4, 3, 10), float64] */
}

def @func_563(%var_561: uint8, %var_562: Tensor[(12, 3, 9), uint8]) -> Tensor[(12, 3, 9), uint8] {
  %233 = fn (%var_552: uint8, %var_553: Tensor[(12, 3, 9), uint8]) -> Tensor[(12, 3, 9), uint8] {
    %231 = cast(%var_552, dtype="uint8") /* ty=uint8 */;
    %232 = cast(%var_553, dtype="uint8") /* ty=Tensor[(12, 3, 9), uint8] */;
    bitwise_and(%231, %232) /* ty=Tensor[(12, 3, 9), uint8] */
  };
  %233(%var_561, %var_562) /* ty=Tensor[(12, 3, 9), uint8] */
}

def @func_2369(%var_2368: Tensor[(1485), float32]) -> (Tensor[(12, 7, 8), bool], Tensor[(15, 9, 11), float32], Tensor[(1485), float32], Tensor[(6, 12, 14), float32], Tensor[(1008), int16]) {
  %251 = fn (%var_2352: Tensor[(1485), float32]) -> (Tensor[(12, 7, 8), bool], Tensor[(15, 9, 11), float32], Tensor[(1485), float32], Tensor[(6, 12, 14), float32], Tensor[(1008), int16]) {
    %234 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 7, 8), float32] */, dtype="float32") /* ty=Tensor[(12, 7, 8), float32] */;
    %235 = rsqrt(%234) /* ty=Tensor[(12, 7, 8), float32] */;
    %236 = cast(%235, dtype="float64") /* ty=Tensor[(12, 7, 8), float64] */;
    %237 = log10(%236) /* ty=Tensor[(12, 7, 8), float64] */;
    %238 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 7, 8), float32] */, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
    %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
    %240 = cast(%237, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
    %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %242 = cast(%var_2352, dtype="float32") /* ty=Tensor[(1485), float32] */;
    %243 = reshape(%242, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), float32] */;
    %244 = @func_1031(%243) /* ty=(Tensor[(15, 9, 11), float32],) */;
    %245 = cast(meta[relay.Constant][19] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
    %246 = reshape(%245, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int16] */;
    %247 = @func_181(%246) /* ty=(Tensor[(6, 12, 14), float32],) */;
    %248 = not_equal(%240, %241) /* ty=Tensor[(12, 7, 8), bool] */;
    %249 = %244.0;
    %250 = %247.0;
    (%248, %249, %var_2352, %250, meta[relay.Constant][19] /* ty=Tensor[(1008), int16] */)
  };
  %251(%var_2368) /* ty=(Tensor[(12, 7, 8), bool], Tensor[(15, 9, 11), float32], Tensor[(1485), float32], Tensor[(6, 12, 14), float32], Tensor[(1008), int16]) */
}

def @func_4817(%var_4814: Tensor[(2, 16, 1), float32], %var_4815: Tensor[(2, 16, 1), float32], %var_4816: Tensor[(660), uint16]) -> (Tensor[(2, 16, ?), float32], Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32], Tensor[(2, 16, 660), float64]) {
  %277 = fn (%var_4792: Tensor[(2, 16, 1), float32], %var_4793: Tensor[(2, 16, 1), float32], %var_4801: Tensor[(660), uint16]) -> (Tensor[(2, 16, ?), float32], Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32], Tensor[(2, 16, 660), float64]) {
    %252 = cast(%var_4793, dtype="bool") /* ty=Tensor[(2, 16, 1), bool] */;
    %253 = shape_of(%var_4792, dtype="int32") /* ty=Tensor[(3), int32] */;
    %254 = cast(%var_4792, dtype="bool") /* ty=Tensor[(2, 16, 1), bool] */;
    %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %256 = less(%254, %255) /* ty=Tensor[(2, 16, ?), bool] */;
    %257 = cast(%256, dtype="float32") /* ty=Tensor[(2, 16, ?), float32] */;
    %258 = shape_of(%var_4792, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(%var_4792, dtype="float32") /* ty=Tensor[(2, 16, 1), float32] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %261 = cast(%var_4801, dtype="uint16") /* ty=Tensor[(660), uint16] */;
    %262 = cast(%var_4801, dtype="uint16") /* ty=Tensor[(660), uint16] */;
    %263 = reshape(%261, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), uint16] */;
    %264 = reshape(%262, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), uint16] */;
    %265 = @func_4592(%263, %264) /* ty=(Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32]) */;
    %266 = %265.0;
    %267 = cast(%266, dtype="uint16") /* ty=Tensor[(4, 15, 11), uint16] */;
    %268 = cast(%var_4801, dtype="uint16") /* ty=Tensor[(660), uint16] */;
    %269 = reshape(%267, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), uint16] */;
    %270 = reshape(%268, newshape=[4, 15, 11]) /* ty=Tensor[(4, 15, 11), uint16] */;
    %271 = @func_4592(%269, %270) /* ty=(Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32]) */;
    %272 = cast(%256, dtype="float64") /* ty=Tensor[(2, 16, ?), float64] */;
    %273 = cast(%var_4801, dtype="float64") /* ty=Tensor[(660), float64] */;
    %274 = mod(%259, %260) /* ty=Tensor[(2, 16, ?), float32] */;
    %275 = %271.1;
    %276 = floor_mod(%272, %273) /* ty=Tensor[(2, 16, 660), float64] */;
    (%274, %266, %275, %276)
  };
  %277(%var_4814, %var_4815, %var_4816) /* ty=(Tensor[(2, 16, ?), float32], Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32], Tensor[(2, 16, 660), float64]) */
}

def @func_4404(%var_4397: Tensor[(8, 5, 7), float32], %var_4398: Tensor[(84), float64], %var_4399: Tensor[(192), float64], %var_4400: Tensor[(520), uint8], %var_4401: Tensor[(1152), int16], %var_4402: Tensor[(1008), int16], %var_4403: Tensor[(8, 5, 7), float32]) -> (Tensor[(8, 5, 7), int64], Tensor[(294), uint64], Tensor[(84), float64], Tensor[(1080), int64], Tensor[(192), float64], Tensor[(960), uint16], Tensor[(5, 9, 14), float64], Tensor[(520), uint8], Tensor[(16, 8, 9), float32], Tensor[(1152), int16], Tensor[(6, 12, 14), float32], Tensor[(1008), int16], Tensor[(8, 5, 7), bool], Tensor[(90, 12), int64]) {
  @func_4395(%var_4397, %var_4398, %var_4399, %var_4400, %var_4401, %var_4402, %var_4403) /* ty=(Tensor[(8, 5, 7), int64], Tensor[(294), uint64], Tensor[(84), float64], Tensor[(1080), int64], Tensor[(192), float64], Tensor[(960), uint16], Tensor[(5, 9, 14), float64], Tensor[(520), uint8], Tensor[(16, 8, 9), float32], Tensor[(1152), int16], Tensor[(6, 12, 14), float32], Tensor[(1008), int16], Tensor[(8, 5, 7), bool], Tensor[(90, 12), int64]) */
}

def @func_6170(%var_6169: Tensor[(2, 5, 11), float32]) -> Tensor[(2, 5, 11), float32] {
  %282 = fn (%var_6164: Tensor[(2, 5, 11), float32]) -> Tensor[(2, 5, 11), float32] {
    %278 = cast(%var_6164, dtype="float32") /* ty=Tensor[(2, 5, 11), float32] */;
    %279 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(2, 5, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 11), float32] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%280, %281) /* ty=Tensor[(2, 5, 11), float32] */
  };
  %282(%var_6169) /* ty=Tensor[(2, 5, 11), float32] */
}

def @func_5379() -> (Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) {
  %283 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 3, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 3, 10), float64] */;
  %284 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 3, 10), float64] */, dtype="float32") /* ty=Tensor[(4, 3, 10), float32] */;
  %285 = asin(%283) /* ty=Tensor[(4, 3, 10), float64] */;
  %286 = log2(%284) /* ty=Tensor[(4, 3, 10), float32] */;
  (%285, %286)
}

def @func_2771(%var_2739: Tensor[(5, 9, 14), uint8]) -> (Tensor[(240), float32], Tensor[(1008), int16], Tensor[(5, 9, 14), float64], Tensor[(65, 240), int64]) {
  %287 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 9, 1), uint8] */, dtype="uint8") /* ty=Tensor[(5, 9, 1), uint8] */;
  %288 = cast(%var_2739, dtype="uint8") /* ty=Tensor[(5, 9, 14), uint8] */;
  %289 = left_shift(%287, %288) /* ty=Tensor[(5, 9, 14), uint8] */;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(5, 9, 14), float32] */;
  %291 = asin(%290) /* ty=Tensor[(5, 9, 14), float32] */;
  %292 = cast(%291, dtype="float64") /* ty=Tensor[(5, 9, 14), float64] */;
  %293 = cast(meta[relay.Constant][25] /* ty=Tensor[(65, 1), float32] */, dtype="float32") /* ty=Tensor[(65, 1), float32] */;
  %294 = cast(meta[relay.Constant][22] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %295 = cast(meta[relay.Constant][23] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %296 = reshape(%293, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %297 = reshape(%294, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %298 = reshape(%295, newshape=[1008]) /* ty=Tensor[(1008), int16] */;
  %299 = @func_2430(%296, %297, %298) /* ty=(Tensor[(240), float32], Tensor[(1008), int16], Tensor[(?, 13, 5), int64], Tensor[(84, 12), float32]) */;
  %300 = %299.0;
  %301 = cast(%300, dtype="int64") /* ty=Tensor[(240), int64] */;
  %302 = cast(meta[relay.Constant][25] /* ty=Tensor[(65, 1), float32] */, dtype="int64") /* ty=Tensor[(65, 1), int64] */;
  %303 = cosh(%292) /* ty=Tensor[(5, 9, 14), float64] */;
  %304 = minimum(%301, %302) /* ty=Tensor[(65, 240), int64] */;
  (meta[relay.Constant][22] /* ty=Tensor[(240), float32] */, meta[relay.Constant][23] /* ty=Tensor[(1008), int16] */, %303, %304)
}

def @func_4626(%var_4599: Tensor[(15, 2, 10), int8], %var_4600: Tensor[(15, 2, 10), int8]) -> (Tensor[(15, 2, 10), uint64], Tensor[(15, 2, 10), float64]) {
  %305 = cast(%var_4600, dtype="int8") /* ty=Tensor[(15, 2, 10), int8] */;
  %306 = shape_of(%var_4599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%var_4599, dtype="int8") /* ty=Tensor[(15, 2, 10), int8] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %309 = add(%307, %308) /* ty=Tensor[(15, 2, 10), int8] */;
  %310 = cast(%var_4599, dtype="uint64") /* ty=Tensor[(15, 2, 10), uint64] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="uint64") /* ty=Tensor[(15, 2, 10), uint64] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %314 = cast(%var_4599, dtype="float64") /* ty=Tensor[(15, 2, 10), float64] */;
  %315 = left_shift(%312, %313) /* ty=Tensor[(15, 2, 10), uint64] */;
  %316 = log2(%314) /* ty=Tensor[(15, 2, 10), float64] */;
  (%315, %316)
}

def @func_2939(%var_2937: Tensor[(16, 8, 9), int16], %var_2938: Tensor[(16, 8, 9), int16]) -> (Tensor[(16, 8, 9), int16], Tensor[(16, 8, 9), float32]) {
  %324 = fn (%var_2916: Tensor[(16, 8, 9), int16], %var_2917: Tensor[(16, 8, 9), int16]) -> (Tensor[(16, 8, 9), int16], Tensor[(16, 8, 9), float32]) {
    %317 = cast(%var_2917, dtype="int16") /* ty=Tensor[(16, 8, 9), int16] */;
    %318 = shape_of(%var_2916, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(%var_2916, dtype="int16") /* ty=Tensor[(16, 8, 9), int16] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %321 = cast(%var_2916, dtype="float32") /* ty=Tensor[(16, 8, 9), float32] */;
    %322 = add(%319, %320) /* ty=Tensor[(16, 8, 9), int16] */;
    %323 = rsqrt(%321) /* ty=Tensor[(16, 8, 9), float32] */;
    (%322, %323)
  };
  %324(%var_2937, %var_2938) /* ty=(Tensor[(16, 8, 9), int16], Tensor[(16, 8, 9), float32]) */
}

def @func_4630(%var_4628: Tensor[(15, 2, 10), int8], %var_4629: Tensor[(15, 2, 10), int8]) -> (Tensor[(15, 2, 10), uint64], Tensor[(15, 2, 10), float64]) {
  @func_4626(%var_4628, %var_4629) /* ty=(Tensor[(15, 2, 10), uint64], Tensor[(15, 2, 10), float64]) */
}

def @func_1546(%var_1520: Tensor[(12, 13, 9), float64]) -> (Tensor[(12, 13, 9), float64], Tensor[(12, 13, 9), float64]) {
  %325 = cast(%var_1520, dtype="float64") /* ty=Tensor[(12, 13, 9), float64] */;
  %326 = cast(%var_1520, dtype="float64") /* ty=Tensor[(12, 13, 9), float64] */;
  %327 = tan(%325) /* ty=Tensor[(12, 13, 9), float64] */;
  %328 = sinh(%326) /* ty=Tensor[(12, 13, 9), float64] */;
  (%327, %328)
}

def @func_5420() -> (Tensor[(4, 3, 10), float64],) {
  %331 = fn () -> (Tensor[(4, 3, 10), float64],) {
    %329 = @func_5379() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */;
    %330 = %329.0;
    (%330,)
  };
  %331() /* ty=(Tensor[(4, 3, 10), float64],) */
}

def @func_5411() -> Tensor[(4, 3, 10), float32] {
  %332 = @func_5379() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */;
  %332.1
}

def @func_5956(%var_5955: Tensor[(11, 10, 7), float32]) -> Tensor[(11, 10, 7), float32] {
  %335 = fn (%var_5949: Tensor[(11, 10, 7), float32]) -> Tensor[(11, 10, 7), float32] {
    %333 = cast(-3.03212f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %334 = cast(%var_5949, dtype="float32") /* ty=Tensor[(11, 10, 7), float32] */;
    mod(%333, %334) /* ty=Tensor[(11, 10, 7), float32] */
  };
  %335(%var_5955) /* ty=Tensor[(11, 10, 7), float32] */
}

def @func_3340(%var_3243: Tensor[(7, 2, 6), float64], %var_3292: Tensor[(1080), int64], %var_3301: Tensor[(8, 24), float64], %var_3303: Tensor[(8, 9, 15), float64], %var_3326: Tensor[(960), uint16]) -> (Tensor[(7, 2, 6), float64], Tensor[(3, 7, 14), uint64], Tensor[(294), uint64], Tensor[(1080), int64], Tensor[(6, 2, 16), float64], Tensor[(8, 24), float64], Tensor[(8, 9, 15), float32], Tensor[(8, 9, 15), bool], Tensor[(960), uint16], Tensor[(8, 9, 15), float32]) {
  %336 = cast(4.54687f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %337 = cast(%var_3243, dtype="float64") /* ty=Tensor[(7, 2, 6), float64] */;
  %338 = cast(4.54687f64 /* ty=float64 */, dtype="uint64") /* ty=uint64 */;
  %339 = cast(meta[relay.Constant][26] /* ty=Tensor[(294), uint64] */, dtype="uint64") /* ty=Tensor[(294), uint64] */;
  %340 = reshape(%338, newshape=[]) /* ty=uint64 */;
  %341 = reshape(%339, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), uint64] */;
  %342 = @func_2556(%340, %341) /* ty=(Tensor[(3, 7, 14), uint64],) */;
  %343 = cast(%var_3301, dtype="float64") /* ty=Tensor[(8, 24), float64] */;
  %344 = reshape(%343, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float64] */;
  %345 = cast(%var_3292, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %346 = cast(%var_3292, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %347 = reshape(%345, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %348 = reshape(%346, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %349 = @func_921(%347, %348) /* ty=Tensor[(8, 9, 15), bool] */;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(8, 9, 15), float64] */;
  %351 = acosh(%350) /* ty=Tensor[(8, 9, 15), float64] */;
  %352 = cast(%349, dtype="float32") /* ty=Tensor[(8, 9, 15), float32] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="float32") /* ty=Tensor[(8, 9, 15), float32] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %356 = cast(%var_3326, dtype="uint16") /* ty=Tensor[(960), uint16] */;
  %357 = subtract(%354, %355) /* ty=Tensor[(8, 9, 15), float32] */;
  %358 = cast(%357, dtype="int64") /* ty=Tensor[(8, 9, 15), int64] */;
  %359 = reshape(%356, newshape=[15, 8, 8]) /* ty=Tensor[(15, 8, 8), uint16] */;
  %360 = reshape(%358, newshape=[90, 12]) /* ty=Tensor[(90, 12), int64] */;
  %361 = @func_995(%359, %360) /* ty=(Tensor[(15, 8, 8), bool], Tensor[(8, 9, 15), bool], Tensor[(90, 12), int64], Tensor[(15, 8, 8), bool]) */;
  %362 = cast(%var_3303, dtype="float32") /* ty=Tensor[(8, 9, 15), float32] */;
  %363 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%351, dtype="float32") /* ty=Tensor[(8, 9, 15), float32] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %366 = floor_divide(%364, %365) /* ty=Tensor[(8, 9, 15), float32] */;
  %367 = cast(%366, dtype="float32") /* ty=Tensor[(8, 9, 15), float32] */;
  %368 = power(%336, %337) /* ty=Tensor[(7, 2, 6), float64] */;
  %369 = %342.0;
  %370 = @func_1767(%344) /* ty=Tensor[(6, 2, 16), float64] */;
  %371 = %361.1;
  %372 = atanh(%367) /* ty=Tensor[(8, 9, 15), float32] */;
  (%368, %369, meta[relay.Constant][26] /* ty=Tensor[(294), uint64] */, %var_3292, %370, %var_3301, %357, %371, %var_3326, %372)
}

def @func_5381() -> (Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) {
  @func_5379() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */
}

def @func_5580(%var_5577: int16, %var_5578: Tensor[(4, 24), float64], %var_5579: Tensor[(4, 24), float64]) -> (Tensor[(4, 3, 10), float64], Tensor[(6, 8, 2), bool], Tensor[(4, 24), float32], Tensor[(4, 24), float32], Tensor[(4, 24), float32], Tensor[(4, 24), int16]) {
  @func_5575(%var_5577, %var_5578, %var_5579) /* ty=(Tensor[(4, 3, 10), float64], Tensor[(6, 8, 2), bool], Tensor[(4, 24), float32], Tensor[(4, 24), float32], Tensor[(4, 24), float32], Tensor[(4, 24), int16]) */
}

def @func_6095(%var_6091: Tensor[(15, 6, 4), uint8], %var_6092: Tensor[(15, 6, 4), uint8], %var_6093: Tensor[(1, 630), uint8], %var_6094: Tensor[(180), float64]) -> (Tensor[(65, 240), int64], Tensor[(1, 630), uint8], Tensor[(5, 3, 12), float64], Tensor[(180), float64], Tensor[(10, 3, 8), float32], Tensor[(2, 120), float32], Tensor[(1008), int16], Tensor[(15, 6, 4), float32], Tensor[(15, 6, 4), float64], Tensor[(15, 6, 4), float32], Tensor[(4, 15, 11), float32], Tensor[(32), float32], Tensor[(660), uint16]) {
  %416 = fn (%var_5985: Tensor[(15, 6, 4), uint8], %var_5986: Tensor[(15, 6, 4), uint8], %var_6001: Tensor[(1, 630), uint8], %var_6004: Tensor[(180), float64]) -> (Tensor[(65, 240), int64], Tensor[(1, 630), uint8], Tensor[(5, 3, 12), float64], Tensor[(180), float64], Tensor[(10, 3, 8), float32], Tensor[(2, 120), float32], Tensor[(1008), int16], Tensor[(15, 6, 4), float32], Tensor[(15, 6, 4), float64], Tensor[(15, 6, 4), float32], Tensor[(4, 15, 11), float32], Tensor[(32), float32], Tensor[(660), uint16]) {
    %373 = cast(%var_6001, dtype="uint8") /* ty=Tensor[(1, 630), uint8] */;
    %374 = reshape(%373, newshape=[5, 9, 14]) /* ty=Tensor[(5, 9, 14), uint8] */;
    %375 = @func_2771(%374) /* ty=(Tensor[(240), float32], Tensor[(1008), int16], Tensor[(5, 9, 14), float64], Tensor[(65, 240), int64]) */;
    %376 = cast(%var_6004, dtype="float64") /* ty=Tensor[(180), float64] */;
    %377 = reshape(%376, newshape=[5, 3, 12]) /* ty=Tensor[(5, 3, 12), float64] */;
    %378 = @func_4686(%377) /* ty=(Tensor[(5, 3, 12), float64],) */;
    %379 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 120), float32] */, dtype="float32") /* ty=Tensor[(2, 120), float32] */;
    %380 = cast(meta[relay.Constant][28] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
    %381 = reshape(%379, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float32] */;
    %382 = reshape(%380, newshape=[84, 12]) /* ty=Tensor[(84, 12), int16] */;
    %383 = @func_1701(%381, %382) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(6, 12, 14), float32], Tensor[(84, 12), int16]) */;
    %384 = cast(%var_5986, dtype="uint8") /* ty=Tensor[(15, 6, 4), uint8] */;
    %385 = shape_of(%var_5985, dtype="int32") /* ty=Tensor[(3), int32] */;
    %386 = cast(%var_5985, dtype="uint8") /* ty=Tensor[(15, 6, 4), uint8] */;
    %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %388 = right_shift(%386, %387) /* ty=Tensor[(15, 6, 4), uint8] */;
    %389 = cast(%var_5986, dtype="float64") /* ty=Tensor[(15, 6, 4), float64] */;
    %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
    %391 = cast(%388, dtype="float64") /* ty=Tensor[(15, 6, 4), float64] */;
    %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %393 = divide(%391, %392) /* ty=Tensor[(15, 6, 4), float64] */;
    %394 = cast(%393, dtype="float32") /* ty=Tensor[(15, 6, 4), float32] */;
    %395 = shape_of(%var_5986, dtype="int32") /* ty=Tensor[(3), int32] */;
    %396 = cast(%var_5986, dtype="float32") /* ty=Tensor[(15, 6, 4), float32] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %398 = cast(%393, dtype="float64") /* ty=Tensor[(15, 6, 4), float64] */;
    %399 = asinh(%398) /* ty=Tensor[(15, 6, 4), float64] */;
    %400 = cast(%399, dtype="float64") /* ty=Tensor[(15, 6, 4), float64] */;
    %401 = cast(%388, dtype="float32") /* ty=Tensor[(15, 6, 4), float32] */;
    %402 = cast(meta[relay.Constant][29] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
    %403 = cast(meta[relay.Constant][29] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
    %404 = cast(meta[relay.Constant][30] /* ty=Tensor[(660), uint16] */, dtype="uint16") /* ty=Tensor[(660), uint16] */;
    %405 = reshape(%402, newshape=[2, 16, 1]) /* ty=Tensor[(2, 16, 1), float32] */;
    %406 = reshape(%403, newshape=[2, 16, 1]) /* ty=Tensor[(2, 16, 1), float32] */;
    %407 = reshape(%404, newshape=[660]) /* ty=Tensor[(660), uint16] */;
    %408 = @func_4813(%405, %406, %407) /* ty=(Tensor[(2, 16, ?), float32], Tensor[(4, 15, 11), uint16], Tensor[(4, 15, 11), float32], Tensor[(2, 16, 660), float64]) */;
    %409 = %375.3;
    %410 = %378.0;
    %411 = %383.0;
    %412 = mod(%396, %397) /* ty=Tensor[(15, 6, 4), float32] */;
    %413 = exp(%400) /* ty=Tensor[(15, 6, 4), float64] */;
    %414 = log10(%401) /* ty=Tensor[(15, 6, 4), float32] */;
    %415 = %408.2;
    (%409, %var_6001, %410, %var_6004, %411, meta[relay.Constant][27] /* ty=Tensor[(2, 120), float32] */, meta[relay.Constant][28] /* ty=Tensor[(1008), int16] */, %412, %413, %414, %415, meta[relay.Constant][29] /* ty=Tensor[(32), float32] */, meta[relay.Constant][30] /* ty=Tensor[(660), uint16] */)
  };
  %416(%var_6091, %var_6092, %var_6093, %var_6094) /* ty=(Tensor[(65, 240), int64], Tensor[(1, 630), uint8], Tensor[(5, 3, 12), float64], Tensor[(180), float64], Tensor[(10, 3, 8), float32], Tensor[(2, 120), float32], Tensor[(1008), int16], Tensor[(15, 6, 4), float32], Tensor[(15, 6, 4), float64], Tensor[(15, 6, 4), float32], Tensor[(4, 15, 11), float32], Tensor[(32), float32], Tensor[(660), uint16]) */
}

def @func_3178(%var_3166: Tensor[(520), uint8], %var_3176: Tensor[(1080), int64]) -> (Tensor[(5, 8, 5), float64], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(8, 9, 15), bool], Tensor[(1080), int64]) {
  %417 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %418 = log(%417) /* ty=Tensor[(5, 8, 5), float64] */;
  %419 = cast(%418, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %420 = rsqrt(%419) /* ty=Tensor[(5, 8, 5), float64] */;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %422 = cast(%var_3166, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %423 = cast(%var_3166, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %424 = reshape(%422, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
  %425 = reshape(%423, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
  %426 = @func_1648(%424, %425) /* ty=(Tensor[(8, 5, 13), float32],) */;
  %427 = cast(%var_3176, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %428 = cast(%var_3176, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %429 = reshape(%427, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %430 = reshape(%428, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %431 = asin(%421) /* ty=Tensor[(5, 8, 5), float64] */;
  %432 = %426.0;
  %433 = @func_921(%429, %430) /* ty=Tensor[(8, 9, 15), bool] */;
  (%431, %432, %var_3166, %433, %var_3176)
}

def @func_1770(%var_1768: Tensor[(6, 2, 16), float64]) -> Tensor[(6, 2, 16), float64] {
  @func_1767(%var_1768) /* ty=Tensor[(6, 2, 16), float64] */
}

def @func_1588(%var_1585: Tensor[(14, 11, 10), float64], %var_1586: uint8, %var_1587: Tensor[(324), uint8]) -> (Tensor[(14, 11, 10), float64], Tensor[(12, 3, 9), uint8], uint8, Tensor[(324), uint8], Tensor[(12, 3, 9), uint8]) {
  %446 = fn (%var_1556: Tensor[(14, 11, 10), float64], %var_1570: uint8, %var_1571: Tensor[(324), uint8]) -> (Tensor[(14, 11, 10), float64], Tensor[(12, 3, 9), uint8], uint8, Tensor[(324), uint8], Tensor[(12, 3, 9), uint8]) {
    %434 = cast(%var_1556, dtype="float64") /* ty=Tensor[(14, 11, 10), float64] */;
    %435 = cast(%var_1570, dtype="uint8") /* ty=uint8 */;
    %436 = cast(%var_1571, dtype="uint8") /* ty=Tensor[(324), uint8] */;
    %437 = reshape(%435, newshape=[]) /* ty=uint8 */;
    %438 = reshape(%436, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), uint8] */;
    %439 = cast(%var_1570, dtype="uint8") /* ty=uint8 */;
    %440 = @func_560(%437, %438) /* ty=Tensor[(12, 3, 9), uint8] */;
    %441 = cast(%440, dtype="uint8") /* ty=Tensor[(12, 3, 9), uint8] */;
    %442 = reshape(%439, newshape=[]) /* ty=uint8 */;
    %443 = reshape(%441, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), uint8] */;
    %444 = atan(%434) /* ty=Tensor[(14, 11, 10), float64] */;
    %445 = @func_560(%442, %443) /* ty=Tensor[(12, 3, 9), uint8] */;
    (%444, %440, %var_1570, %var_1571, %445)
  };
  %446(%var_1585, %var_1586, %var_1587) /* ty=(Tensor[(14, 11, 10), float64], Tensor[(12, 3, 9), uint8], uint8, Tensor[(324), uint8], Tensor[(12, 3, 9), uint8]) */
}

def @func_3682(%var_3681: Tensor[(4, 12, 2), uint8]) -> (Tensor[(4, 12, 2), float64],) {
  %464 = fn (%var_3658: Tensor[(4, 12, 2), uint8]) -> (Tensor[(4, 12, 2), float64],) {
    %447 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 12, 2), uint8] */, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
    %448 = cos(%447) /* ty=Tensor[(4, 12, 2), float32] */;
    %449 = cast(%var_3658, dtype="int8") /* ty=Tensor[(4, 12, 2), int8] */;
    %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
    %451 = cast(%448, dtype="int8") /* ty=Tensor[(4, 12, 2), int8] */;
    %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %453 = left_shift(%451, %452) /* ty=Tensor[(4, 12, 2), int8] */;
    %454 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 12, 2), uint8] */, dtype="uint8") /* ty=Tensor[(4, 12, 2), uint8] */;
    %455 = shape_of(%var_3658, dtype="int32") /* ty=Tensor[(3), int32] */;
    %456 = cast(%var_3658, dtype="uint8") /* ty=Tensor[(4, 12, 2), uint8] */;
    %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %458 = bitwise_or(%456, %457) /* ty=Tensor[(4, 12, 2), uint8] */;
    %459 = cast(%458, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %460 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
    %461 = cast(%453, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %463 = minimum(%461, %462) /* ty=Tensor[(4, 12, 2), float64] */;
    (%463,)
  };
  %464(%var_3681) /* ty=(Tensor[(4, 12, 2), float64],) */
}

def @func_2430(%var_2403: Tensor[(1, 13, 5), float32], %var_2407: Tensor[(240), float32], %var_2408: Tensor[(1008), int16]) -> (Tensor[(240), float32], Tensor[(1008), int16], Tensor[(?, 13, 5), int64], Tensor[(84, 12), float32]) {
  %465 = cast(%var_2403, dtype="float32") /* ty=Tensor[(1, 13, 5), float32] */;
  %466 = cos(%465) /* ty=Tensor[(1, 13, 5), float32] */;
  %467 = cast(%var_2403, dtype="int64") /* ty=Tensor[(1, 13, 5), int64] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="int64") /* ty=Tensor[(1, 13, 5), int64] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %471 = cast(%var_2407, dtype="float32") /* ty=Tensor[(240), float32] */;
  %472 = cast(%var_2408, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %473 = reshape(%471, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float32] */;
  %474 = reshape(%472, newshape=[84, 12]) /* ty=Tensor[(84, 12), int16] */;
  %475 = @func_1701(%473, %474) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(6, 12, 14), float32], Tensor[(84, 12), int16]) */;
  %476 = %475.2;
  %477 = cast(%476, dtype="float32") /* ty=Tensor[(84, 12), float32] */;
  %478 = add(%469, %470) /* ty=Tensor[(?, 13, 5), int64] */;
  %479 = sinh(%477) /* ty=Tensor[(84, 12), float32] */;
  (%var_2407, %var_2408, %478, %479)
}

def @func_5805(%var_5803: Tensor[(5, 9, 4), float32]) -> (Tensor[(5, 9, 4), float32],) {
  @func_5802(%var_5803) /* ty=(Tensor[(5, 9, 4), float32],) */
}

def @func_5709(%var_5708: Tensor[(7, 14, 10), uint64]) -> Tensor[(7, 14, 10), bool] {
  %484 = fn (%var_5702: Tensor[(7, 14, 10), uint64]) -> Tensor[(7, 14, 10), bool] {
    %480 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 14, 10), uint64] */, dtype="bool") /* ty=Tensor[(7, 14, 10), bool] */;
    %481 = shape_of(%var_5702, dtype="int32") /* ty=Tensor[(3), int32] */;
    %482 = cast(%var_5702, dtype="bool") /* ty=Tensor[(7, 14, 10), bool] */;
    %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%482, %483) /* ty=Tensor[(7, 14, 10), bool] */
  };
  %484(%var_5708) /* ty=Tensor[(7, 14, 10), bool] */
}

def @func_6138() -> Tensor[(4, 3, 10), float64] {
  @func_6136() /* ty=Tensor[(4, 3, 10), float64] */
}

def @func_995(%var_932: Tensor[(15, 8, 8), uint16], %var_977: Tensor[(90, 12), int64]) -> (Tensor[(15, 8, 8), bool], Tensor[(8, 9, 15), bool], Tensor[(90, 12), int64], Tensor[(15, 8, 8), bool]) {
  %485 = cast(meta[relay.Constant][34] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %486 = cast(%var_932, dtype="bool") /* ty=Tensor[(15, 8, 8), bool] */;
  %487 = cast(%var_977, dtype="int64") /* ty=Tensor[(90, 12), int64] */;
  %488 = cast(%var_977, dtype="int64") /* ty=Tensor[(90, 12), int64] */;
  %489 = reshape(%487, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %490 = reshape(%488, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int64] */;
  %491 = cast(meta[relay.Constant][34] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %492 = cast(%var_932, dtype="bool") /* ty=Tensor[(15, 8, 8), bool] */;
  %493 = not_equal(%485, %486) /* ty=Tensor[(15, 8, 8), bool] */;
  %494 = @func_921(%489, %490) /* ty=Tensor[(8, 9, 15), bool] */;
  %495 = greater(%491, %492) /* ty=Tensor[(15, 8, 8), bool] */;
  (%493, %494, %var_977, %495)
}

def @func_3115(%var_3111: Tensor[(1, 4, 6), uint64], %var_3112: Tensor[(16, 4, 6), uint64], %var_3113: Tensor[(1152), int16], %var_3114: Tensor[(520), uint8]) -> (Tensor[(15, 9, 11), float32], Tensor[(1, 1485), float32], Tensor[(16, 4, 6), int16], Tensor[(16, 4, 6), float32], Tensor[(16, 8, 9), int16], Tensor[(1152), int16], Tensor[(16, 8, 9), float32], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(16, 4, 6), float64]) {
  %539 = fn (%var_3008: Tensor[(1, 4, 6), uint64], %var_3009: Tensor[(16, 4, 6), uint64], %var_3054: Tensor[(1152), int16], %var_3072: Tensor[(520), uint8]) -> (Tensor[(15, 9, 11), float32], Tensor[(1, 1485), float32], Tensor[(16, 4, 6), int16], Tensor[(16, 4, 6), float32], Tensor[(16, 8, 9), int16], Tensor[(1152), int16], Tensor[(16, 8, 9), float32], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(16, 4, 6), float64]) {
    %496 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1485), float32] */, dtype="float32") /* ty=Tensor[(1, 1485), float32] */;
    %497 = reshape(%496, newshape=[1485]) /* ty=Tensor[(1485), float32] */;
    %498 = @func_2367(%497) /* ty=(Tensor[(12, 7, 8), bool], Tensor[(15, 9, 11), float32], Tensor[(1485), float32], Tensor[(6, 12, 14), float32], Tensor[(1008), int16]) */;
    %499 = cast(%var_3008, dtype="uint64") /* ty=Tensor[(1, 4, 6), uint64] */;
    %500 = cast(%var_3009, dtype="uint64") /* ty=Tensor[(16, 4, 6), uint64] */;
    %501 = bitwise_xor(%499, %500) /* ty=Tensor[(16, 4, 6), uint64] */;
    %502 = cast(%var_3009, dtype="float32") /* ty=Tensor[(16, 4, 6), float32] */;
    %503 = cosh(%502) /* ty=Tensor[(16, 4, 6), float32] */;
    %504 = cast(%503, dtype="int16") /* ty=Tensor[(16, 4, 6), int16] */;
    %505 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
    %506 = cast(%501, dtype="int16") /* ty=Tensor[(16, 4, 6), int16] */;
    %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %508 = cast(%503, dtype="int8") /* ty=Tensor[(16, 4, 6), int8] */;
    %509 = cast(%var_3008, dtype="int8") /* ty=Tensor[(1, 4, 6), int8] */;
    %510 = maximum(%508, %509) /* ty=Tensor[(16, 4, 6), int8] */;
    %511 = cast(%510, dtype="float32") /* ty=Tensor[(16, 4, 6), float32] */;
    %512 = sigmoid(%511) /* ty=Tensor[(16, 4, 6), float32] */;
    %513 = cast(%512, dtype="float32") /* ty=Tensor[(16, 4, 6), float32] */;
    %514 = cast(%var_3054, dtype="int16") /* ty=Tensor[(1152), int16] */;
    %515 = cast(%var_3054, dtype="int16") /* ty=Tensor[(1152), int16] */;
    %516 = reshape(%514, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
    %517 = reshape(%515, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
    %518 = @func_2936(%516, %517) /* ty=(Tensor[(16, 8, 9), int16], Tensor[(16, 8, 9), float32]) */;
    %519 = cast(%var_3054, dtype="int16") /* ty=Tensor[(1152), int16] */;
    %520 = cast(%var_3054, dtype="int16") /* ty=Tensor[(1152), int16] */;
    %521 = reshape(%519, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
    %522 = reshape(%520, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), int16] */;
    %523 = @func_2936(%521, %522) /* ty=(Tensor[(16, 8, 9), int16], Tensor[(16, 8, 9), float32]) */;
    %524 = cast(%var_3072, dtype="uint8") /* ty=Tensor[(520), uint8] */;
    %525 = cast(%var_3072, dtype="uint8") /* ty=Tensor[(520), uint8] */;
    %526 = reshape(%524, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
    %527 = reshape(%525, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint8] */;
    %528 = @func_1648(%526, %527) /* ty=(Tensor[(8, 5, 13), float32],) */;
    %529 = cast(%503, dtype="float32") /* ty=Tensor[(16, 4, 6), float32] */;
    %530 = rsqrt(%529) /* ty=Tensor[(16, 4, 6), float32] */;
    %531 = cast(%530, dtype="float64") /* ty=Tensor[(16, 4, 6), float64] */;
    %532 = %498.1;
    %533 = bitwise_and(%506, %507) /* ty=Tensor[(16, 4, 6), int16] */;
    %534 = acosh(%513) /* ty=Tensor[(16, 4, 6), float32] */;
    %535 = %518.0;
    %536 = %523.1;
    %537 = %528.0;
    %538 = tan(%531) /* ty=Tensor[(16, 4, 6), float64] */;
    (%532, meta[relay.Constant][35] /* ty=Tensor[(1, 1485), float32] */, %533, %534, %535, %var_3054, %536, %537, %var_3072, %538)
  };
  %539(%var_3111, %var_3112, %var_3113, %var_3114) /* ty=(Tensor[(15, 9, 11), float32], Tensor[(1, 1485), float32], Tensor[(16, 4, 6), int16], Tensor[(16, 4, 6), float32], Tensor[(16, 8, 9), int16], Tensor[(1152), int16], Tensor[(16, 8, 9), float32], Tensor[(8, 5, 13), float32], Tensor[(520), uint8], Tensor[(16, 4, 6), float64]) */
}

def @func_6136() -> Tensor[(4, 3, 10), float64] {
  %540 = @func_5379() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */;
  %540.0
}

def @func_5575(%var_5511: int16, %var_5545: Tensor[(4, 24), float64], %var_5571: Tensor[(4, 24), float64]) -> (Tensor[(4, 3, 10), float64], Tensor[(6, 8, 2), bool], Tensor[(4, 24), float32], Tensor[(4, 24), float32], Tensor[(4, 24), float32], Tensor[(4, 24), int16]) {
  %541 = @func_5379() /* ty=(Tensor[(4, 3, 10), float64], Tensor[(4, 3, 10), float32]) */;
  %542 = cast(%var_5511, dtype="int16") /* ty=int16 */;
  %543 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 24), int16] */, dtype="int16") /* ty=Tensor[(4, 24), int16] */;
  %544 = reshape(%542, newshape=[]) /* ty=int16 */;
  %545 = reshape(%543, newshape=[6, 8, 2]) /* ty=Tensor[(6, 8, 2), int16] */;
  %546 = @func_3880(%544, %545) /* ty=(Tensor[(6, 8, 2), bool],) */;
  %547 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 24), int16] */, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %548 = sinh(%547) /* ty=Tensor[(4, 24), float64] */;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %550 = cast(%var_5511, dtype="float32") /* ty=float32 */;
  %551 = cast(%var_5545, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %552 = shape_of(%548, dtype="int32") /* ty=Tensor[(2), int32] */;
  %553 = cast(%548, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %555 = cast(%var_5545, dtype="float32") /* ty=Tensor[(4, 24), float32] */;
  %556 = cast(%var_5571, dtype="int16") /* ty=Tensor[(4, 24), int16] */;
  %557 = shape_of(%548, dtype="int32") /* ty=Tensor[(2), int32] */;
  %558 = cast(%548, dtype="int16") /* ty=Tensor[(4, 24), int16] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %560 = %541.0;
  %561 = %546.0;
  %562 = divide(%549, %550) /* ty=Tensor[(4, 24), float32] */;
  %563 = mod(%553, %554) /* ty=Tensor[(4, 24), float32] */;
  %564 = cosh(%555) /* ty=Tensor[(4, 24), float32] */;
  %565 = right_shift(%558, %559) /* ty=Tensor[(4, 24), int16] */;
  (%560, %561, %562, %563, %564, %565)
}

def @func_921(%var_911: Tensor[(8, 9, 15), int64], %var_912: Tensor[(8, 9, 15), int64]) -> Tensor[(8, 9, 15), bool] {
  %566 = cast(%var_912, dtype="bool") /* ty=Tensor[(8, 9, 15), bool] */;
  %567 = shape_of(%var_911, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%var_911, dtype="bool") /* ty=Tensor[(8, 9, 15), bool] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%568, %569) /* ty=Tensor[(8, 9, 15), bool] */
}

def @func_3883(%var_3881: int16, %var_3882: Tensor[(6, 8, 2), int16]) -> (Tensor[(6, 8, 2), bool],) {
  %573 = fn (%var_3871: int16, %var_3872: Tensor[(6, 8, 2), int16]) -> (Tensor[(6, 8, 2), bool],) {
    %570 = cast(%var_3871, dtype="bool") /* ty=bool */;
    %571 = cast(%var_3872, dtype="bool") /* ty=Tensor[(6, 8, 2), bool] */;
    %572 = greater_equal(%570, %571) /* ty=Tensor[(6, 8, 2), bool] */;
    (%572,)
  };
  %573(%var_3881, %var_3882) /* ty=(Tensor[(6, 8, 2), bool],) */
}

def @func_4688(%var_4687: Tensor[(5, 3, 12), float64]) -> (Tensor[(5, 3, 12), float64],) {
  %579 = fn (%var_4677: Tensor[(5, 3, 12), float64]) -> (Tensor[(5, 3, 12), float64],) {
    %574 = cast(%var_4677, dtype="float64") /* ty=Tensor[(5, 3, 12), float64] */;
    %575 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(5, 3, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %576 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 3, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 3, 12), float64] */;
    %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %578 = mod(%576, %577) /* ty=Tensor[(5, 3, 12), float64] */;
    (%578,)
  };
  %579(%var_4687) /* ty=(Tensor[(5, 3, 12), float64],) */
}

def @func_5802(%var_5786: Tensor[(5, 9, 4), float32]) -> (Tensor[(5, 9, 4), float32],) {
  %580 = cast(%var_5786, dtype="float32") /* ty=Tensor[(5, 9, 4), float32] */;
  %581 = sinh(%580) /* ty=Tensor[(5, 9, 4), float32] */;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(5, 9, 4), float32] */;
  %583 = acosh(%582) /* ty=Tensor[(5, 9, 4), float32] */;
  (%583,)
}

def @func_1652(%var_1650: Tensor[(8, 5, 13), uint8], %var_1651: Tensor[(8, 5, 13), uint8]) -> (Tensor[(8, 5, 13), float32],) {
  @func_1648(%var_1650, %var_1651) /* ty=(Tensor[(8, 5, 13), float32],) */
}

def @func_183(%var_182: Tensor[(6, 12, 14), int16]) -> (Tensor[(6, 12, 14), float32],) {
  %591 = fn (%var_167: Tensor[(6, 12, 14), int16]) -> (Tensor[(6, 12, 14), float32],) {
    %584 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 12, 14), int16] */, dtype="int16") /* ty=Tensor[(6, 12, 14), int16] */;
    %585 = shape_of(%var_167, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(%var_167, dtype="int16") /* ty=Tensor[(6, 12, 14), int16] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %588 = left_shift(%586, %587) /* ty=Tensor[(6, 12, 14), int16] */;
    %589 = cast(%588, dtype="float32") /* ty=Tensor[(6, 12, 14), float32] */;
    %590 = atan(%589) /* ty=Tensor[(6, 12, 14), float32] */;
    (%590,)
  };
  %591(%var_182) /* ty=(Tensor[(6, 12, 14), float32],) */
}

def @func_3578(%var_3553: Tensor[(3, 5, 10), int16]) -> (Tensor[(3, 5, 10), int16], Tensor[(84, 12), int16], Tensor[(240), float32], Tensor[(1008), int16], Tensor[(3, 5, 10), float64]) {
  %592 = cast(%var_3553, dtype="int16") /* ty=Tensor[(3, 5, 10), int16] */;
  %593 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(3, 5, 10), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 5, 10), int16] */, dtype="int16") /* ty=Tensor[(3, 5, 10), int16] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %596 = cast(meta[relay.Constant][40] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %597 = cast(meta[relay.Constant][41] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %598 = reshape(%596, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float32] */;
  %599 = reshape(%597, newshape=[84, 12]) /* ty=Tensor[(84, 12), int16] */;
  %600 = @func_1701(%598, %599) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(6, 12, 14), float32], Tensor[(84, 12), int16]) */;
  %601 = cast(%var_3553, dtype="float64") /* ty=Tensor[(3, 5, 10), float64] */;
  %602 = subtract(%594, %595) /* ty=Tensor[(3, 5, 10), int16] */;
  %603 = %600.2;
  %604 = log2(%601) /* ty=Tensor[(3, 5, 10), float64] */;
  (%602, %603, meta[relay.Constant][40] /* ty=Tensor[(240), float32] */, meta[relay.Constant][41] /* ty=Tensor[(1008), int16] */, %604)
}

def @func_5765(%var_5764: Tensor[(6, 2, 16), float64]) -> (Tensor[(4, 3, 10), float32], Tensor[(192), float64], Tensor[(6, 2, 16), int64]) {
  %619 = fn (%var_5749: Tensor[(6, 2, 16), float64]) -> (Tensor[(4, 3, 10), float32], Tensor[(192), float64], Tensor[(6, 2, 16), int64]) {
    %605 = cast(meta[relay.Constant][42] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %606 = reshape(%605, newshape=[6, 2, 16]) /* ty=Tensor[(6, 2, 16), float64] */;
    %607 = @func_1767(%606) /* ty=Tensor[(6, 2, 16), float64] */;
    %608 = cast(%var_5749, dtype="bool") /* ty=Tensor[(6, 2, 16), bool] */;
    %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%607, dtype="bool") /* ty=Tensor[(6, 2, 16), bool] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %612 = not_equal(%610, %611) /* ty=Tensor[(6, 2, 16), bool] */;
    %613 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 2, 16), bool] */, dtype="int64") /* ty=Tensor[(6, 2, 16), int64] */;
    %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
    %615 = cast(%612, dtype="int64") /* ty=Tensor[(6, 2, 16), int64] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %617 = @func_5411() /* ty=Tensor[(4, 3, 10), float32] */;
    %618 = logical_xor(%615, %616) /* ty=Tensor[(6, 2, 16), int64] */;
    (%617, meta[relay.Constant][42] /* ty=Tensor[(192), float64] */, %618)
  };
  %619(%var_5764) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(192), float64], Tensor[(6, 2, 16), int64]) */
}

def @func_2435(%var_2432: Tensor[(1, 13, 5), float32], %var_2433: Tensor[(240), float32], %var_2434: Tensor[(1008), int16]) -> (Tensor[(240), float32], Tensor[(1008), int16], Tensor[(?, 13, 5), int64], Tensor[(84, 12), float32]) {
  @func_2430(%var_2432, %var_2433, %var_2434) /* ty=(Tensor[(240), float32], Tensor[(1008), int16], Tensor[(?, 13, 5), int64], Tensor[(84, 12), float32]) */
}

def @func_1767(%var_1752: Tensor[(6, 2, 16), float64]) -> Tensor[(6, 2, 16), float64] {
  %620 = cast(%var_1752, dtype="float64") /* ty=Tensor[(6, 2, 16), float64] */;
  %621 = cosh(%620) /* ty=Tensor[(6, 2, 16), float64] */;
  %622 = cast(%621, dtype="float64") /* ty=Tensor[(6, 2, 16), float64] */;
  acos(%622) /* ty=Tensor[(6, 2, 16), float64] */
}

def @func_1549(%var_1547: Tensor[(12, 13, 9), float64]) -> (Tensor[(12, 13, 9), float64], Tensor[(12, 13, 9), float64]) {
  @func_1546(%var_1547) /* ty=(Tensor[(12, 13, 9), float64], Tensor[(12, 13, 9), float64]) */
}

def @func_5413() -> Tensor[(4, 3, 10), float32] {
  @func_5411() /* ty=Tensor[(4, 3, 10), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */the function is provided too many arguments expected 1, found 3

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
