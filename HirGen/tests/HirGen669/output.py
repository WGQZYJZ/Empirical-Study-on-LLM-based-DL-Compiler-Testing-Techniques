import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_17 = relay.var("var_17", dtype = "float32", shape = (1, 6, 6))#candidate|17|(1, 6, 6)|var|float32
var_18 = relay.var("var_18", dtype = "float32", shape = (10, 6, 6))#candidate|18|(10, 6, 6)|var|float32
bop_19 = relay.power(var_17.astype('float32'), var_18.astype('float32')) # shape=(10, 6, 6)
output = relay.Tuple([bop_19,])
output2 = relay.Tuple([bop_19,])
func_22 = relay.Function([var_17,var_18,], output)
mod['func_22'] = func_22
mod = relay.transform.InferType()(mod)
mutated_mod['func_22'] = func_22
mutated_mod = relay.transform.InferType()(mutated_mod)
func_22_call = mutated_mod.get_global_var('func_22')
var_24 = relay.var("var_24", dtype = "float32", shape = (1, 6, 6))#candidate|24|(1, 6, 6)|var|float32
var_25 = relay.var("var_25", dtype = "float32", shape = (10, 6, 6))#candidate|25|(10, 6, 6)|var|float32
call_23 = func_22_call(var_24,var_25,)
output = call_23
func_26 = relay.Function([var_24,var_25,], output)
mutated_mod['func_26'] = func_26
mutated_mod = relay.transform.InferType()(mutated_mod)
const_49 = relay.const(-5, dtype = "uint32")#candidate|49|()|const|uint32
var_50 = relay.var("var_50", dtype = "uint32", shape = (7, 15, 14))#candidate|50|(7, 15, 14)|var|uint32
bop_51 = relay.maximum(const_49.astype('uint32'), var_50.astype('uint32')) # shape=(7, 15, 14)
output = relay.Tuple([bop_51,])
output2 = relay.Tuple([bop_51,])
func_54 = relay.Function([var_50,], output)
mod['func_54'] = func_54
mod = relay.transform.InferType()(mod)
mutated_mod['func_54'] = func_54
mutated_mod = relay.transform.InferType()(mutated_mod)
var_55 = relay.var("var_55", dtype = "uint32", shape = (7, 15, 14))#candidate|55|(7, 15, 14)|var|uint32
func_54_call = mutated_mod.get_global_var('func_54')
call_56 = func_54_call(var_55)
output = call_56
func_57 = relay.Function([var_55], output)
mutated_mod['func_57'] = func_57
mutated_mod = relay.transform.InferType()(mutated_mod)
var_269 = relay.var("var_269", dtype = "uint64", shape = (3, 1, 14))#candidate|269|(3, 1, 14)|var|uint64
const_270 = relay.const([[[1,3,9,9,7,7,5,5,-1,7,4,4,-3,-6],[8,-8,-7,2,7,2,-1,-10,-10,-4,-8,4,-9,4]],[[5,-4,1,-4,5,6,7,-5,-9,-7,-2,4,3,1],[-6,7,-6,6,3,8,4,-9,2,-9,1,-1,-8,10]],[[-3,-7,-8,4,-7,1,-10,7,3,-5,2,-7,4,3],[-3,5,-5,-8,-7,9,1,-4,-1,5,9,-8,-7,-1]]], dtype = "uint64")#candidate|270|(3, 2, 14)|const|uint64
bop_271 = relay.right_shift(var_269.astype('uint64'), const_270.astype('uint64')) # shape=(3, 2, 14)
uop_278 = relay.sigmoid(var_269.astype('float32')) # shape=(3, 1, 14)
output = relay.Tuple([bop_271,uop_278,])
output2 = relay.Tuple([bop_271,uop_278,])
func_295 = relay.Function([var_269,], output)
mod['func_295'] = func_295
mod = relay.transform.InferType()(mod)
var_296 = relay.var("var_296", dtype = "uint64", shape = (3, 1, 14))#candidate|296|(3, 1, 14)|var|uint64
output = func_295(var_296)
func_297 = relay.Function([var_296], output)
mutated_mod['func_297'] = func_297
mutated_mod = relay.transform.InferType()(mutated_mod)
var_472 = relay.var("var_472", dtype = "float64", shape = (15, 7, 10))#candidate|472|(15, 7, 10)|var|float64
uop_473 = relay.erf(var_472.astype('float64')) # shape=(15, 7, 10)
output = relay.Tuple([uop_473,])
output2 = relay.Tuple([uop_473,])
func_480 = relay.Function([var_472,], output)
mod['func_480'] = func_480
mod = relay.transform.InferType()(mod)
var_481 = relay.var("var_481", dtype = "float64", shape = (15, 7, 10))#candidate|481|(15, 7, 10)|var|float64
output = func_480(var_481)
func_482 = relay.Function([var_481], output)
mutated_mod['func_482'] = func_482
mutated_mod = relay.transform.InferType()(mutated_mod)
var_804 = relay.var("var_804", dtype = "uint32", shape = (3, 16, 7))#candidate|804|(3, 16, 7)|var|uint32
var_805 = relay.var("var_805", dtype = "uint32", shape = (3, 16, 7))#candidate|805|(3, 16, 7)|var|uint32
bop_806 = relay.greater(var_804.astype('bool'), relay.reshape(var_805.astype('bool'), relay.shape_of(var_804))) # shape=(3, 16, 7)
uop_813 = relay.sin(var_805.astype('float64')) # shape=(3, 16, 7)
output = relay.Tuple([bop_806,uop_813,])
output2 = relay.Tuple([bop_806,uop_813,])
func_824 = relay.Function([var_804,var_805,], output)
mod['func_824'] = func_824
mod = relay.transform.InferType()(mod)
var_825 = relay.var("var_825", dtype = "uint32", shape = (3, 16, 7))#candidate|825|(3, 16, 7)|var|uint32
var_826 = relay.var("var_826", dtype = "uint32", shape = (3, 16, 7))#candidate|826|(3, 16, 7)|var|uint32
output = func_824(var_825,var_826,)
func_827 = relay.Function([var_825,var_826,], output)
mutated_mod['func_827'] = func_827
mutated_mod = relay.transform.InferType()(mutated_mod)
var_842 = relay.var("var_842", dtype = "float32", shape = (4, 10, 10))#candidate|842|(4, 10, 10)|var|float32
uop_843 = relay.sin(var_842.astype('float32')) # shape=(4, 10, 10)
output = relay.Tuple([uop_843,])
output2 = relay.Tuple([uop_843,])
func_846 = relay.Function([var_842,], output)
mod['func_846'] = func_846
mod = relay.transform.InferType()(mod)
var_847 = relay.var("var_847", dtype = "float32", shape = (4, 10, 10))#candidate|847|(4, 10, 10)|var|float32
output = func_846(var_847)
func_848 = relay.Function([var_847], output)
mutated_mod['func_848'] = func_848
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1279 = relay.const([[[-1.963598,-6.745162,0.607142,3.553784,4.549136,0.706225,5.744070,6.894193,-8.542565,4.875187,6.822100,8.433399,0.916231,3.143574,-3.974100],[-1.424071,7.490571,0.234407,-6.201765,5.352299,-4.349661,1.657775,-0.671961,4.748302,8.757735,5.508370,-9.193290,-2.127543,7.127613,6.763897],[-0.027552,4.634554,-5.799941,3.206486,7.058000,9.686275,1.276232,3.953598,7.205515,-4.064005,2.611014,7.982577,-6.139968,-6.117078,-2.339083],[9.700409,8.365064,-6.253422,4.005078,-6.981403,-7.062312,6.715656,-9.962167,6.828645,4.860645,-7.051151,-8.549105,-4.913232,5.699945,-8.306130],[-6.112874,8.334907,-3.360842,-0.680121,8.461122,-6.524057,-3.877522,1.871852,-7.176949,-7.101961,-4.314274,8.765794,-4.034096,-7.457823,-5.540592]],[[0.734153,-5.375025,-7.281597,-0.684980,6.234628,7.640689,1.395416,5.256872,-7.740372,-7.132445,1.409857,5.726941,5.905803,-0.735488,4.984902],[-3.155672,-4.407653,5.790772,-6.498370,7.373533,1.600122,9.156356,-4.590173,3.256870,2.209002,5.516063,6.208487,9.096752,-4.108040,-8.340911],[-4.842765,2.369876,4.877123,7.400731,-4.771026,7.799648,8.976558,7.117431,7.525205,-0.985474,-2.413982,1.584713,-5.569273,-4.484785,5.160317],[-5.434201,8.509752,-1.182340,8.428849,-7.607113,-0.354424,5.196463,6.861436,5.023490,-1.486022,3.638674,7.275481,-2.189187,5.061919,-9.752743],[1.750754,-1.220639,-2.326831,2.936025,-8.976139,-0.400712,-7.241882,-1.906510,-6.124912,-5.345683,2.368953,1.647564,7.804879,-0.547028,-2.778841]],[[6.213555,7.808453,-0.649724,-3.504228,4.748834,-6.653466,1.948088,-8.505702,-2.707653,7.988157,0.182503,-0.272379,8.438109,-2.189494,-1.512595],[-7.664353,-3.421191,1.919618,-9.733642,-1.565177,-5.467720,2.281337,3.272626,9.713836,-5.236940,4.254332,6.570919,-6.190120,6.590830,-0.934054],[3.703967,9.133005,-4.724459,-9.826491,-2.627890,9.201454,1.363380,-4.487210,-9.225507,-3.731406,-1.569060,-2.675831,1.308211,-5.369496,9.030101],[-5.857331,4.629686,-3.169393,-0.372383,-5.431588,8.869484,5.642480,-3.808251,-4.476133,3.259504,6.627329,-4.203084,3.103431,-3.270934,-0.721062],[-3.518492,-1.061364,-7.097754,-8.114787,-6.940509,6.085557,-7.085648,-8.825797,-4.849095,1.482018,-0.811321,2.369206,-9.860051,-5.170951,-4.471668]],[[-3.622762,-8.387760,-9.922646,6.739755,2.302364,-8.547610,2.855930,-7.119563,4.746418,-2.270403,-2.101215,-5.984442,9.878478,6.440335,9.885469],[-9.069146,-4.759953,9.746626,2.727703,3.954389,-8.023775,4.431965,-8.292905,3.504601,-8.827691,-0.561847,-7.984224,-5.738187,9.149747,-6.438371],[9.335809,-2.817372,0.746044,4.838075,-5.222352,1.336829,-9.100806,4.527508,-8.630533,-6.180264,-9.269958,-1.549244,9.606339,4.559763,-0.718693],[-6.984593,-9.880002,3.787191,-3.273702,3.054184,-2.707471,3.482332,5.612473,9.087961,1.032550,1.865530,9.514785,5.100727,-3.628244,5.982022],[-4.699762,5.942249,0.964625,-3.838510,7.328920,-8.381644,-7.409724,-5.247789,-0.843173,-9.648312,4.230225,-4.882469,0.179523,-2.582040,-3.739020]],[[-9.011164,8.344325,8.555778,-6.442744,-7.568273,1.371024,6.128543,-9.132007,-1.547428,-0.704794,-6.803978,-2.812195,-3.465915,-5.969702,6.193151],[-0.260767,8.084036,3.825454,-9.102085,-3.244190,6.066465,-3.961450,-0.237203,-7.847930,0.248513,2.290683,9.404369,-6.362777,2.657629,-2.463472],[1.082161,-7.583415,-8.985196,-9.137653,9.170296,4.057039,-6.266595,-2.420688,-7.561901,3.015043,7.230533,7.673922,-7.118396,-9.435396,8.989613],[6.941935,4.169413,7.752956,4.040198,1.671670,8.213302,-1.561086,-3.780842,-5.777667,1.463684,-4.001003,-8.453333,1.108274,-3.440763,-8.785736],[-8.219605,-5.946045,4.672085,1.406063,8.878070,8.966249,3.656768,4.304622,-1.922002,-1.656502,3.078475,-3.218335,5.829295,3.824471,9.016254]],[[5.048095,2.705449,-7.177816,6.134218,1.287242,-4.162463,7.559416,-1.460468,9.915037,-0.021995,1.410039,-4.993718,5.914871,5.855356,0.049549],[-0.749956,2.774403,7.615685,-4.661077,4.703710,2.012625,2.014694,-5.599521,6.445194,-6.785093,0.578829,-4.643683,-5.405026,3.061599,-7.947854],[-9.346187,2.798536,-6.265661,1.972083,-6.533029,-9.741662,-2.228935,-5.476104,-9.142179,-1.417153,-2.428075,-5.924843,-5.298769,-8.554058,-2.805653],[-5.810892,-1.127204,-5.260435,-9.671490,1.688765,1.615016,4.642301,4.398187,-2.862477,0.131458,2.314813,-4.496118,-3.160631,-1.913616,8.333830],[1.661006,3.497087,2.503074,-9.603863,-9.192997,-3.829281,-8.843069,7.777869,-0.934934,1.501007,3.408028,2.037269,-7.594377,-5.483188,-5.412407]],[[2.271959,5.409523,7.512008,9.540981,7.608378,-6.976961,8.213416,9.523833,-6.812688,-9.247558,4.416783,-1.814508,2.308689,0.629229,3.390062],[3.537731,6.530434,-9.329148,-9.617213,4.492747,6.506655,5.978323,-0.604700,7.448028,-9.125220,-2.645939,4.671206,-8.134079,9.022658,-7.387143],[-6.690993,8.244107,2.931018,-7.917114,8.883771,1.031857,1.844853,0.208917,5.813453,9.187246,-2.684628,2.900365,-4.359254,6.073191,2.113444],[6.922812,3.380613,-6.132407,-5.077627,-8.102109,-4.539978,-1.692360,1.865388,2.234542,-0.889531,-7.205638,-9.093119,7.017205,-2.257988,-4.022058],[-9.263532,3.152977,-9.482942,-3.003548,-9.816374,7.633015,-4.925339,6.827423,6.252503,-8.558412,7.038427,2.385439,1.273849,-1.643314,1.644493]],[[2.363395,-2.939344,2.996471,-1.063676,8.846570,5.488690,1.718553,-0.305814,7.994005,3.119120,-9.209792,-2.669506,-0.522713,-1.580805,8.310940],[1.728999,7.277570,3.557578,9.004708,5.934970,8.470768,1.118281,-2.486196,2.597150,2.852001,-1.071174,2.720534,7.860994,-2.503918,-0.956394],[5.071416,-6.647044,-7.506193,-9.481216,-3.610438,-0.232274,-7.638610,-2.581243,-6.846171,-9.037707,5.284743,9.681095,4.240644,-8.836516,-4.911589],[-7.159547,1.899694,-1.723813,-0.572912,6.306011,-2.349317,-7.913408,3.612243,-0.205763,-1.775327,4.115970,8.290228,-6.364974,-0.619191,-9.730809],[-1.181031,-7.242054,7.467949,7.705397,8.926259,-1.540750,-2.184088,-0.477257,-9.641780,4.304951,9.245137,-5.949100,9.855348,-9.452883,6.310438]],[[-9.853226,9.553772,2.983703,-1.499677,-2.760525,3.576741,6.907029,-1.026378,5.398316,-1.876529,3.749259,-1.924057,-3.432455,4.327907,5.083164],[9.729064,-8.078306,-1.357342,-3.410433,-4.820410,4.066478,7.846807,2.365179,-8.022697,-7.456059,-2.113159,9.071080,1.152845,-3.683855,-2.695999],[-5.624721,-1.371891,-8.531370,-2.019886,8.708843,3.072633,9.347001,4.155439,-8.734304,8.760434,5.120256,4.574870,-4.794878,-3.364109,5.960790],[-0.954322,1.623755,-4.906799,-3.867952,-2.874717,7.758314,-3.788634,-7.780928,0.975602,4.208343,-4.352551,-1.839429,7.676608,-6.036268,-3.563351],[-9.104653,4.951581,3.788430,5.378391,2.774323,1.504085,-2.540536,1.526708,1.245104,1.112380,5.524612,3.005028,7.471799,6.954995,0.979049]],[[2.368682,-3.187177,6.617448,-5.846343,2.081762,-5.964145,-4.971100,-4.521772,8.760863,0.821981,7.581846,-5.980206,-2.478251,6.350860,-3.357596],[8.967682,0.661372,-7.951050,8.894006,8.570757,-7.008203,6.738576,-5.704852,-0.508545,-9.063227,7.885398,9.973542,-2.170023,2.687599,8.391562],[-9.447675,-4.952947,-9.890181,-1.853442,0.606079,0.102925,0.178866,1.721008,-6.369349,-3.323637,6.768335,-9.019325,9.484020,-3.285030,8.401819],[-4.721888,1.361918,6.752386,-2.351696,5.371605,9.835334,4.345554,-4.230205,4.983194,0.901857,1.318756,8.415255,9.328147,-7.908975,0.933657],[9.203160,-6.129987,-2.229110,-5.650872,8.425213,6.217038,-0.860190,-1.874896,5.815793,-3.697206,1.885671,5.043745,8.406831,2.508205,-9.274952]],[[6.017089,2.542359,-5.815176,1.204603,-7.533968,2.568052,-3.137800,-7.897038,-3.553924,-1.988111,-5.526299,-7.565074,-6.990379,-2.545655,0.483180],[-2.438513,-2.504853,-1.789200,-7.927658,-7.196602,6.194253,-3.291664,6.885898,-7.842919,-1.533008,-7.865131,-2.625018,-0.353567,8.832759,-9.631196],[5.963741,0.011054,-5.415739,6.617489,-9.277449,6.368394,5.226307,3.808227,3.694903,-2.716495,-9.201409,-4.489808,4.716290,9.604972,-7.439800],[0.276737,-2.849370,3.115465,9.439462,6.285766,-0.273368,6.692663,-0.110113,3.203262,-9.592039,4.251637,-6.874260,2.776784,-8.552653,-3.203548],[-5.762581,4.831099,1.651418,-0.825328,4.228532,-6.118536,-3.339221,6.197988,-9.953880,-3.363588,-7.843535,3.937426,-7.031368,-0.424736,5.272547]],[[7.434361,-5.172768,-8.256790,1.234854,-6.784819,9.091992,5.786116,-2.560189,-6.394861,7.780189,4.649347,4.777684,-3.441989,9.346053,-1.011689],[-0.778229,8.447886,-0.008400,-8.036771,-8.174032,-4.584492,5.816261,1.242866,-8.898499,-3.835326,6.449249,2.741097,-1.919528,-6.370402,-0.225758],[-4.166808,-6.229113,-4.271625,8.448851,-5.701037,8.080558,3.907146,-0.821593,7.538110,5.220196,-6.012006,0.664749,5.106959,-0.382331,-9.427743],[-7.412832,0.943111,-8.349123,-1.922028,-1.838025,2.746071,9.652684,-9.343134,1.021395,8.697040,0.855667,1.733812,9.862927,-6.298984,-0.452247],[8.068361,1.604018,6.145901,-7.756589,4.544894,1.385777,-8.960484,-2.212426,-8.655824,-2.009790,-0.075668,-7.005117,1.253707,-7.431891,3.357833]]], dtype = "float32")#candidate|1279|(12, 5, 15)|const|float32
uop_1280 = relay.atan(const_1279.astype('float32')) # shape=(12, 5, 15)
output = uop_1280
output2 = uop_1280
func_1298 = relay.Function([], output)
mod['func_1298'] = func_1298
mod = relay.transform.InferType()(mod)
mutated_mod['func_1298'] = func_1298
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1298_call = mutated_mod.get_global_var('func_1298')
call_1299 = func_1298_call()
output = call_1299
func_1300 = relay.Function([], output)
mutated_mod['func_1300'] = func_1300
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1314 = relay.var("var_1314", dtype = "float64", shape = (2, 8, 9))#candidate|1314|(2, 8, 9)|var|float64
var_1315 = relay.var("var_1315", dtype = "float64", shape = (2, 8, 9))#candidate|1315|(2, 8, 9)|var|float64
bop_1316 = relay.less_equal(var_1314.astype('bool'), relay.reshape(var_1315.astype('bool'), relay.shape_of(var_1314))) # shape=(2, 8, 9)
uop_1319 = relay.acosh(var_1314.astype('float64')) # shape=(2, 8, 9)
func_480_call = mod.get_global_var('func_480')
func_482_call = mutated_mod.get_global_var('func_482')
var_1329 = relay.var("var_1329", dtype = "float64", shape = (1050,))#candidate|1329|(1050,)|var|float64
call_1328 = relay.TupleGetItem(func_480_call(relay.reshape(var_1329.astype('float64'), [15, 7, 10])), 0)
call_1330 = relay.TupleGetItem(func_482_call(relay.reshape(var_1329.astype('float64'), [15, 7, 10])), 0)
func_846_call = mod.get_global_var('func_846')
func_848_call = mutated_mod.get_global_var('func_848')
var_1332 = relay.var("var_1332", dtype = "float32", shape = (400,))#candidate|1332|(400,)|var|float32
call_1331 = relay.TupleGetItem(func_846_call(relay.reshape(var_1332.astype('float32'), [4, 10, 10])), 0)
call_1333 = relay.TupleGetItem(func_848_call(relay.reshape(var_1332.astype('float32'), [4, 10, 10])), 0)
func_824_call = mod.get_global_var('func_824')
func_827_call = mutated_mod.get_global_var('func_827')
const_1338 = relay.const([2,8,5,-10,-7,9,-10,10,-4,-7,-3,-10,-6,3,4,7,-1,-7,4,-9,-4,9,-5,-4,-8,-5,-1,9,7,-9,5,-7,2,3,5,8,-10,-3,-8,5,-10,-8,-7,-10,-10,-5,6,3,8,-3,10,2,10,5,4,3,-10,5,-9,-2,-6,6,-9,-10,-7,-7,6,-6,-5,-4,3,-5,10,2,4,8,1,4,5,4,-8,-8,2,-1,-5,10,-6,-10,-2,6,6,-8,10,-4,5,-6,3,-5,7,4,5,-9,6,7,-2,5,-9,-5,-2,-5,-9,10,-6,-6,5,5,3,-10,5,-6,10,-7,4,-9,10,-5,-8,10,-10,-7,8,4,9,-10,-1,3,10,2,1,2,9,2,-2,1,1,-8,3,-2,-8,-7,1,-2,-10,-6,-8,-4,-6,6,9,4,7,-8,-8,3,5,4,-9,-8,3,-2,2,9,10,-10,3,8,-7,-10,-9,8,-2,9,-1,2,10,-4,-10,10,8,-1,-3,-1,-9,5,4,1,8,-9,8,-2,7,-1,-8,-9,1,7,10,4,9,-7,-5,-8,2,-3,-1,9,10,5,8,-6,7,-5,-3,6,10,-4,-4,9,10,-6,-6,8,-2,-6,10,-1,7,-4,5,-2,-5,-2,-9,-7,-1,-1,-10,5,-6,4,4,3,-3,4,8,5,-2,-4,-5,3,6,7,5,-9,2,6,-1,9,-5,4,-1,-7,-7,6,-4,10,-5,9,8,2,1,7,-7,8,3,7,4,-7,-7,-2,3,4,-10,7,-10,9,-7,5,-7,9,-8,2,-2,-2,-3,3,-8,-6,-9,8,4,-1,6,-8,-9,-2,3,9,-2,-6,7,5,-8,6,3,-9,5,-9,-5,3,4,-3,9,4,-2,10], dtype = "uint32")#candidate|1338|(336,)|const|uint32
call_1337 = relay.TupleGetItem(func_824_call(relay.reshape(const_1338.astype('uint32'), [3, 16, 7]), relay.reshape(const_1338.astype('uint32'), [3, 16, 7]), ), 0)
call_1339 = relay.TupleGetItem(func_827_call(relay.reshape(const_1338.astype('uint32'), [3, 16, 7]), relay.reshape(const_1338.astype('uint32'), [3, 16, 7]), ), 0)
uop_1348 = relay.sinh(uop_1319.astype('float32')) # shape=(2, 8, 9)
func_22_call = mod.get_global_var('func_22')
func_26_call = mutated_mod.get_global_var('func_26')
const_1352 = relay.const([[-5.806413,-8.740278,6.158565,9.392783],[5.354953,-3.279733,-0.309964,0.710184],[8.341480,5.716573,-0.836318,-1.189032],[-1.155231,-3.907202,-9.374158,9.551167],[9.334005,0.139989,5.466400,1.528737],[1.164975,-3.539002,6.082011,-4.594493],[4.129924,-9.746389,4.761104,-9.049386],[5.414158,-8.620829,9.139971,-8.401005],[4.512936,8.611199,-0.955266,9.086364]], dtype = "float32")#candidate|1352|(9, 4)|const|float32
var_1353 = relay.var("var_1353", dtype = "float32", shape = (360,))#candidate|1353|(360,)|var|float32
call_1351 = relay.TupleGetItem(func_22_call(relay.reshape(const_1352.astype('float32'), [1, 6, 6]), relay.reshape(var_1353.astype('float32'), [10, 6, 6]), ), 0)
call_1354 = relay.TupleGetItem(func_26_call(relay.reshape(const_1352.astype('float32'), [1, 6, 6]), relay.reshape(var_1353.astype('float32'), [10, 6, 6]), ), 0)
func_824_call = mod.get_global_var('func_824')
func_827_call = mutated_mod.get_global_var('func_827')
call_1357 = relay.TupleGetItem(func_824_call(relay.reshape(const_1338.astype('uint32'), [3, 16, 7]), relay.reshape(const_1338.astype('uint32'), [3, 16, 7]), ), 1)
call_1358 = relay.TupleGetItem(func_827_call(relay.reshape(const_1338.astype('uint32'), [3, 16, 7]), relay.reshape(const_1338.astype('uint32'), [3, 16, 7]), ), 1)
output = relay.Tuple([bop_1316,call_1328,var_1329,call_1331,var_1332,call_1337,const_1338,uop_1348,call_1351,const_1352,var_1353,call_1357,])
output2 = relay.Tuple([bop_1316,call_1330,var_1329,call_1333,var_1332,call_1339,const_1338,uop_1348,call_1354,const_1352,var_1353,call_1358,])
func_1372 = relay.Function([var_1314,var_1315,var_1329,var_1332,var_1353,], output)
mod['func_1372'] = func_1372
mod = relay.transform.InferType()(mod)
mutated_mod['func_1372'] = func_1372
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1372_call = mutated_mod.get_global_var('func_1372')
var_1374 = relay.var("var_1374", dtype = "float64", shape = (2, 8, 9))#candidate|1374|(2, 8, 9)|var|float64
var_1375 = relay.var("var_1375", dtype = "float64", shape = (2, 8, 9))#candidate|1375|(2, 8, 9)|var|float64
var_1376 = relay.var("var_1376", dtype = "float64", shape = (1050,))#candidate|1376|(1050,)|var|float64
var_1377 = relay.var("var_1377", dtype = "float32", shape = (400,))#candidate|1377|(400,)|var|float32
var_1378 = relay.var("var_1378", dtype = "float32", shape = (360,))#candidate|1378|(360,)|var|float32
call_1373 = func_1372_call(var_1374,var_1375,var_1376,var_1377,var_1378,)
output = call_1373
func_1379 = relay.Function([var_1374,var_1375,var_1376,var_1377,var_1378,], output)
mutated_mod['func_1379'] = func_1379
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1298_call = mod.get_global_var('func_1298')
func_1300_call = mutated_mod.get_global_var('func_1300')
call_1434 = func_1298_call()
call_1435 = func_1298_call()
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
const_1455 = relay.const([-5,-5,3,2,4,7,-9,1,10,9,7,2,-1,-7,4,7,10,-8,4,8,9,-3,2,4,-7,1,4,-7,4,-3,4,8,4,9,-9,-5,4,-9,-9,10,5,-1,7,-4,-1,-1,-7,-9,6,10,-4,-4,-10,-7,-5,6,-8,-10,2,-6,-1,10,-6,2,8,9,-6,2,-7,4,8,3,6,1,-9,4,5,-9,-4,5,2,4,9,3,-7,-10,-8,10,-6,5,9,-7,-5,7,7,1,-10,-9,-3,4,9,2,7,-3,-5,10,10,-2,4,-2,3,-2,10,-1,2,-10,9,10,8,-9,-4,8,-6,6,-10,-1,-4,8,-4,5,-4,9,-1,-9,4,1,-9,-1,9,-7,10,4,10,-5,10,-2,-9,8,-10,8,-9,4,-9,-4,-4,7,-6,-7,-10,-3,-4,-5,-6,4,1,9,-2,7,10,8,-10,-8,-6,7,9,6,-6,8,-3,-5,-4,-4,9,-6,5,-3,-8,3,7,-10,1,10,7,9,-10,-6,-3,9,-4,-1,8,3,-6,-2,10,7,-7,1,7,-4,6,-9,2,9,4,6,5,-2,10,1,-3,1,9,4,4,3,9,7,2,1,9,10,7,-2,-5,4,3,-7,-1,-8,-2,5,3,-5,1,2,1,1,-5,4,-7,-7,-8,-5,-7,4,-4,-1,2,-3,-1,-2,-9,4,-7,2,-9,-6,-3,-7,-4,10,-3,-6,-6,-9,-3,3,5,6,6,-8,6,5,5,-2,5,6,2,3,10,-6,3,5,-9,-2,8,3,3,7,-9,4,10,2,-1,-1,8,-4,-9,1,-9,-4,-4,-2,2,-5,-6,-7,-1,8,5,-5,-7,6,-7,5,-1,-10,3,-1,9,7,5,4,2,-7,3,10,10,-7,2,-10,2,-9,4,-1,-6,-10,2,-8,-8,-1,-7,-1,8,4,2,4,-8,9,3,-4,-10,-1,-10,7,3,9,1,-9,-9,-9,-10,5,6,-7,5,7,8,8,-6,-6,-4,-1,4,-6,-4,6,-9,-2,-4,-3,2,4,7,-10,8,-4,-2,9,-6,10,1,-3,-4,3,-6,9,-6,2,9,-10,9,-9,-8,6,5,-3,-10,5,5,-6,-6,-1,-1,8,4,-5,2,3,-4,4,-4,4,-7,-2,8,-3,4,-7,-8,5,2,4,-5,4,5,9,-6,5,-3,-6,-4,7,5,-3,8,-5,-7,4,8,-3,7,4,4,-9,-8,-10,-7,10,-1,-5,10,-1,10,3,5,-3,-6,10,-10,-9,-5,9,-7,4,-4,9,10,5,7,-10,-1,-7,-3,1,5,10,-10,-1,-9,-7,5,-1,5,-7,-3,5,3,3,8,-7,-3,-4,-7,-1,2,-3,3,-4,-9,9,9,4,-5,-7,-2,-5,-5,-9,3,-3,10,-4,10,-9,10,-9,-1,4,-1,-8,-7,-7,1,-7,7,-1,-3,-8,-6,10,-5,6,3,4,1,8,-5,2,-2,-4,6,6,4,-2,2,-6,-2,-5,-4,-8,10,-5,-10,3,-6,1,-4,-1,2,7,-7,3,5,4,-6,4,-10,-3,6,2,-2,-3,-1,-5,2,-9,4,8,-1,-1,-7,-4,-6,9,2,-5,6,3,4,2,-9,-5,-4,-6,-7,3,4,1,2,-1,1,9,3,7,-9,5,2,4,-5,1,7,-4,-1,10,-6,8,-6,5,10,-1,2,8,6,-10,-2,10,6,2,-2,-1,-3,4,-7,-9,2,5,-5,-8,6,-3,10,10,9,1,2,8,2,-5,4,5,5,9,-6,-3,2,1,-9,-8,-10,-2,3,-10,-3,-6,-8,-2,-5,-2,-6,3,1,2,4,-10,10,-9,-1,2,3,-2,10,-3,-5,-6,-10,-10,3,-10,-3,3,2,10,10,-9,9,3,5,4,9,-10,-9,9,-2,8,1,1,-3,7,3,6,9,-9,5,4,-3,4,-7,-3,4,-6,-5,8,-10,-3,1,2,1,4,-7,2,7,2,-9,-2,-8,-9,7,-1,10,-7,3,3,-3,10,9,9,-7,9,8,10,2,-1,7,-8,-5,-10,-6,-2,3,-8,5,-8,10,8,-1,-4,-10,-3,-6,-3,-8,1,9,-5,-7,-5,-2,-5,-10,-2,3,-3,-10,1,-7,-9,9,-1,5,-1,10,-5,8,-5,-4,9,-3,-2,7,3,8,-1,3,-7,7,-1,3,9,7,-10,-3,10,-1,2,-6,4,-8,2,6,-10,-9,-9,-8,-6,4,-5,6,4,-8,5,-1,7,-3,-1,-8,3,-3,-2,5,-5,3,-6,5,-4,6,8,-8,7,4,2,10,-1,-2,-3,10,-3,-7,-4,9,-9,7,4,-2,9,-10,10,-8,4,-6,4,4,1,-8,-6,-2,4,2,-9,9,-10,8,-3,-3,-4,-6,6,-6,3,-1,1,-6,7,2,-2,-1,-4,-4,-5,5,-9,8,3,2,7,9,-1,4,-2,-3,9,-9,-4,9,-2,-9,-7,6,-10,-10,-4,-7,-5,-4,-7,-3,2,9,-5,-7,5,7,4,6,2,3,6,-2,10,9,-4,4,-2,-5,-3,5,-10,-4,6,8,-7,-3,-10,-5,2,8,4,-3,4,5,-2,-7,-5,-7,-10,-8,-6,1,7,-8,8,6,-7,10,8,-1,10,-1,9,-5,-2,8,-3,8,5,-10,2,-6,-6,10,-6,2,-9,10,-2,-6,7,2,1,1,-6,10,6,6,-4,3,9,7,-10,-5,1,7,-5,7,1,-3,-8,4,1,-3,-10,7,4,9,-1,6,-6,-2,-4,-7,9,-9,-3,1,6,-10,-2,6,-3,10,9,-7,-1,-6,-10,-9,4,-5,2,2,-2,4,1,10,7,7,-7,3,-5,-4,-5,-5,-10,6,8,2,2,4,6,-7,-3,10,-1,10,3,3,9,-5,-10,-3,-2,-10,10,8,-7,10,-1,2,3,-8,-7,4,-10,-5,1,1,-2,10,9,10,4,6,2,7,-1,2,5,6,-5,6,-10,1,-1,5,-8,-4,7,-8,-9,4,10,-9,-4,-10,7,-6,4,10,10,-3,-2,-1,-10,-8,5,-10,10,10,4,2,6,10,-7,5,-8,4,-7,1,-7,8,-10,7,-8,3,-6,3,1,4,-6,5,-9,-3,5,4,4,-4,-10,6,7,-10,-2,-7,-8,3,1,-7,-7,7,-6,-6,4,-7,-10,-10,2,-9,3,-7,8,7,8,-10,-6,-8,7,-5,5,-5,4,-1,-7,1,8,-3,10,6,3,2,2,-2,-6,-9,-6,6,-2,-8,-7,1,7,-4,3,4,5,-5,-7,-5,3,-4,10,1,-6,1,6,-1,-5,9,-4,-3,-10,-5,5,-2,3,9,7,-3,9,-10,-5,9,7,-9,-2,1,3,8,3,-8,7,10,-5,1,-9,8,-4,-6,-4,2,-7,7,9,10,5,-8,3,-8,-1,2,-10,5,-9,4,6,-9,-9,5,-10,-9,10,1,7,2,10,9,-6,5,5,-7,5,6,-2,1,-5,-1,8,-8,1,3,4,3,-6,5,8,-4,10,5,2,-6,-6,2,8,1,2,3,7,5,-6,9,-4,5,5,-6,7,4,8,1,7,-7,7,-4,8,2,-2,6,-3,2,2,-5,-1,-4,6,-6,7,-2,3,-1,-9,-3,-3,9,-9,-4,-10,-1,9,-1,-1,9,-10,4,-9,2,-7,1,5,6,10,6,10,-2,-1,5,9,1,7,3,-10,5,2,-9,-3,-1,-6,4,4,-4,-6,8,5,7,5,-7,4,4,8,-3,8,-6,2,-10,-6,1,5,1,1,1,5,2,-10,5,2,10,5,6,-10,4,-3,9,-8,-8,-8,4,-7,-3,5,-6,10,-6,-6,2,9,3,5,-9,-4,-10,6,-6,-2], dtype = "uint32")#candidate|1455|(1470,)|const|uint32
call_1454 = relay.TupleGetItem(func_54_call(relay.reshape(const_1455.astype('uint32'), [7, 15, 14])), 0)
call_1456 = relay.TupleGetItem(func_57_call(relay.reshape(const_1455.astype('uint32'), [7, 15, 14])), 0)
output = relay.Tuple([call_1434,call_1454,const_1455,])
output2 = relay.Tuple([call_1435,call_1456,const_1455,])
func_1463 = relay.Function([], output)
mod['func_1463'] = func_1463
mod = relay.transform.InferType()(mod)
mutated_mod['func_1463'] = func_1463
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1463_call = mutated_mod.get_global_var('func_1463')
call_1464 = func_1463_call()
output = call_1464
func_1465 = relay.Function([], output)
mutated_mod['func_1465'] = func_1465
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_1490 = relay.TupleGetItem(func_1463_call(), 2)
call_1491 = relay.TupleGetItem(func_1465_call(), 2)
output = call_1490
output2 = call_1491
func_1498 = relay.Function([], output)
mod['func_1498'] = func_1498
mod = relay.transform.InferType()(mod)
mutated_mod['func_1498'] = func_1498
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1498_call = mutated_mod.get_global_var('func_1498')
call_1499 = func_1498_call()
output = call_1499
func_1500 = relay.Function([], output)
mutated_mod['func_1500'] = func_1500
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_1542 = relay.TupleGetItem(func_1463_call(), 2)
call_1543 = relay.TupleGetItem(func_1465_call(), 2)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_1546 = relay.TupleGetItem(func_1463_call(), 2)
call_1547 = relay.TupleGetItem(func_1465_call(), 2)
func_824_call = mod.get_global_var('func_824')
func_827_call = mutated_mod.get_global_var('func_827')
const_1556 = relay.const([-10,4,7,10,5,3,-9,1,-9,-7,1,9,-1,7,5,3,-2,3,-6,7,7,5,3,1,7,6,-1,7,5,10,-8,9,4,1,-3,1,-10,-7,4,-6,5,10,-8,-1,-1,-5,6,8,6,-7,-10,8,-5,-7,-4,-2,7,-8,-1,10,-10,2,10,3,1,-2,8,-5,6,4,4,-10,9,6,7,-3,-2,10,-5,6,4,-9,10,5,-5,-8,6,10,6,-7,-3,-7,-5,4,1,-8,-10,7,-2,-7,-3,7,-5,-7,4,-3,6,1,8,-5,-7,-5,-9,-8,7,9,-2,-9,3,5,4,4,7,-5,-3,5,-3,-9,-5,5,-2,-1,-9,1,-10,9,6,6,-1,10,1,-3,10,-7,1,-6,-6,-9,-9,9,9,-3,-3,10,-2,-7,-10,5,2,-2,6,8,-4,9,5,3,7,-1,-5,-4,1,-9,-10,10,8,7,-9,6,-9,-9,2,-2,-7,7,2,-10,1,-6,4,6,-8,-6,9,-4,-4,7,-4,4,10,5,3,6,3,-8,6,8,9,2,-5,-8,-9,4,-2,5,2,-3,-3,10,1,-4,-1,4,4,10,2,8,-1,-5,3,-6,-9,-9,-9,2,-6,-10,7,-1,-10,2,-8,-3,7,3,-9,-6,-7,-5,-3,-6,-1,9,8,3,-10,-10,-7,9,-5,3,-9,-6,-3,3,-8,-8,5,1,7,3,-6,8,-10,-7,-9,-10,-9,-5,7,-10,-8,8,-4,-9,10,2,9,-9,-7,5,-7,4,-1,-8,-8,-7,-5,-10,-1,-3,2,-9,5,1,6,-8,1,9,-3,-4,3,5,-6,10,3,8,-9,8,7,-6,3,4,-5,8,9,-9,3,2,-1,7,-6,-1,4,-8,7,1], dtype = "uint32")#candidate|1556|(336,)|const|uint32
call_1555 = relay.TupleGetItem(func_824_call(relay.reshape(const_1556.astype('uint32'), [3, 16, 7]), relay.reshape(const_1556.astype('uint32'), [3, 16, 7]), ), 1)
call_1557 = relay.TupleGetItem(func_827_call(relay.reshape(const_1556.astype('uint32'), [3, 16, 7]), relay.reshape(const_1556.astype('uint32'), [3, 16, 7]), ), 1)
func_1298_call = mod.get_global_var('func_1298')
func_1300_call = mutated_mod.get_global_var('func_1300')
call_1560 = func_1298_call()
call_1561 = func_1298_call()
output = relay.Tuple([call_1542,call_1546,call_1555,const_1556,call_1560,])
output2 = relay.Tuple([call_1543,call_1547,call_1557,const_1556,call_1561,])
func_1563 = relay.Function([], output)
mod['func_1563'] = func_1563
mod = relay.transform.InferType()(mod)
output = func_1563()
func_1564 = relay.Function([], output)
mutated_mod['func_1564'] = func_1564
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1298_call = mod.get_global_var('func_1298')
func_1300_call = mutated_mod.get_global_var('func_1300')
call_1628 = func_1298_call()
call_1629 = func_1298_call()
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_1630 = relay.TupleGetItem(func_1463_call(), 1)
call_1631 = relay.TupleGetItem(func_1465_call(), 1)
uop_1636 = relay.atanh(call_1630.astype('float64')) # shape=(7, 15, 14)
uop_1638 = relay.atanh(call_1631.astype('float64')) # shape=(7, 15, 14)
uop_1639 = relay.sinh(uop_1636.astype('float32')) # shape=(7, 15, 14)
uop_1641 = relay.sinh(uop_1638.astype('float32')) # shape=(7, 15, 14)
uop_1668 = relay.asinh(uop_1636.astype('float64')) # shape=(7, 15, 14)
uop_1670 = relay.asinh(uop_1638.astype('float64')) # shape=(7, 15, 14)
bop_1676 = relay.floor_mod(uop_1636.astype('float32'), relay.reshape(call_1630.astype('float32'), relay.shape_of(uop_1636))) # shape=(7, 15, 14)
bop_1679 = relay.floor_mod(uop_1638.astype('float32'), relay.reshape(call_1631.astype('float32'), relay.shape_of(uop_1638))) # shape=(7, 15, 14)
func_824_call = mod.get_global_var('func_824')
func_827_call = mutated_mod.get_global_var('func_827')
var_1686 = relay.var("var_1686", dtype = "uint32", shape = (336,))#candidate|1686|(336,)|var|uint32
call_1685 = relay.TupleGetItem(func_824_call(relay.reshape(var_1686.astype('uint32'), [3, 16, 7]), relay.reshape(var_1686.astype('uint32'), [3, 16, 7]), ), 1)
call_1687 = relay.TupleGetItem(func_827_call(relay.reshape(var_1686.astype('uint32'), [3, 16, 7]), relay.reshape(var_1686.astype('uint32'), [3, 16, 7]), ), 1)
func_480_call = mod.get_global_var('func_480')
func_482_call = mutated_mod.get_global_var('func_482')
const_1694 = relay.const([7.081336,8.219856,2.195659,7.496795,-7.692828,-0.052449,5.427792,1.651893,0.217539,-9.873223,1.764764,3.115127,-7.405589,-1.760257,7.555773,-3.493004,-6.630269,5.932927,2.121455,-9.775628,-0.771876,-2.458399,3.409160,1.924129,2.592991,-2.584806,-6.696487,-2.156551,-4.808310,6.311938,5.960075,-3.968652,0.930657,6.369954,-0.990457,-2.266020,3.301310,-2.743688,-3.532379,6.606419,4.017507,-8.340788,3.100369,-1.515162,-1.973588,-4.916385,1.813388,8.145527,-3.172817,-1.370701,-6.995990,8.547414,0.508930,-9.093823,-1.685474,0.413515,0.024531,2.113107,-7.944372,-3.473084,0.594896,9.634747,6.720530,3.350996,8.284732,-9.164045,4.966873,5.635632,5.520045,-4.224679,-1.907280,9.325248,-9.304059,-9.514838,3.154699,7.676306,5.209391,8.185866,9.216490,5.601818,-4.521353,-4.826262,2.020882,-9.889208,6.613628,-5.843617,-9.174419,5.445897,6.622388,-7.628585,-0.420313,3.222376,-4.768540,-3.820985,-5.106349,-4.773073,9.678042,-4.372297,7.277013,2.659156,6.926938,-2.406356,2.098350,-0.083709,3.708008,7.618672,-4.219325,-2.845792,-0.830115,-0.532574,-4.798662,6.032271,1.299221,-9.140973,0.190654,2.653637,-8.554233,-3.801022,0.060045,-4.170293,3.860936,-8.435406,-7.553076,-1.804678,2.677135,0.915777,-8.049934,9.201579,-2.177772,-5.254675,0.142385,1.427309,8.850653,-3.651834,-3.632356,5.435493,-1.137050,-6.571448,-6.332257,8.173546,2.019716,1.536068,-6.082973,-1.044518,9.164467,-4.119408,-5.506485,-3.784471,5.878833,4.403591,5.558103,-4.997919,-6.891525,-5.530122,6.068825,4.607014,6.607967,-1.528307,3.747132,-0.275794,0.676426,-1.678763,-9.566487,2.527244,4.128795,-0.232920,-0.014682,-8.870282,5.374685,8.681430,2.904438,6.914767,-5.681623,-9.641985,-3.978148,-6.402870,4.880964,-3.432581,7.643933,8.988577,-1.709673,9.330502,-6.018017,5.530863,-3.856263,0.010588,8.872530,-2.391961,-4.675596,-0.216206,-2.114262,7.184263,6.268450,4.349069,8.522354,5.177007,-4.276331,-0.135720,-2.759634,-1.731086,8.594252,-9.084821,9.890250,-3.649392,2.776854,-2.704442,7.201415,9.803712,5.194744,6.637341,-3.714013,-5.621574,9.814260,4.330018,2.818560,-9.978491,8.420371,7.510729,-5.178275,8.762563,-8.839513,3.283081,5.097996,-2.078977,4.690191,4.129028,-4.759041,6.520240,1.553860,-3.565931,-3.042779,1.493825,8.752654,-2.374126,-5.296878,-1.635837,-9.684926,-6.578425,-7.011384,-6.561643,-6.481510,3.372674,-6.649483,-9.625031,-4.133028,-0.194467,2.678198,-9.222097,-8.400334,-4.138174,-6.602618,-1.951604,-7.586145,-3.595558,1.988580,1.888005,8.487145,8.284574,3.364508,3.712064,-3.653339,-1.834885,0.760702,-9.897443,-6.513040,-3.727218,6.957113,4.229325,6.502831,0.808955,-1.962373,-8.613777,6.241279,6.527090,6.044919,-5.059189,-6.214558,3.770701,-0.422435,-7.524568,2.549978,8.453385,0.299024,-4.471481,7.707164,6.613738,-5.715073,7.038289,0.672315,-7.524648,7.212672,-7.171937,-4.043368,2.084676,-1.049839,3.050259,-1.464420,-7.826211,2.451563,-9.504999,-8.168212,-9.550868,3.910866,0.926747,7.645512,0.284638,-9.501905,-4.627185,0.197876,2.321183,3.504881,7.037738,-4.121665,7.085713,2.569098,-1.999363,-4.930043,-4.372948,-3.033934,-3.899040,-4.690113,-6.553127,-6.115878,3.946650,-3.172613,1.017911,0.345805,9.758038,-2.686094,6.204232,-2.250545,-5.865464,-8.725483,-6.271531,-0.221133,-9.520731,-5.645589,7.850197,-4.941047,-5.893442,-6.993049,-3.102470,1.353665,3.265050,7.221743,8.778100,-8.930135,-2.631345,-5.725788,3.674251,7.212751,4.668675,-8.851199,-2.782822,6.501593,7.842209,-9.129615,2.694518,6.438333,-1.012956,7.987268,-0.163748,4.429101,2.226372,1.981231,-7.380301,-6.514986,-7.733592,-0.539467,0.568541,9.567760,1.593173,6.107928,0.267798,0.889923,3.585750,3.300868,-1.835831,-7.581612,1.541630,-0.579321,-5.961776,9.132896,2.305842,-7.694640,-1.870461,9.974278,1.602467,-1.801250,5.315062,-4.101078,7.996888,-1.967512,-3.871094,3.461410,-4.097369,7.353638,-4.649109,1.476751,2.930504,6.290623,-5.686980,9.158231,9.270161,-8.262771,-2.964275,3.502749,6.966249,2.613419,-6.874141,4.975563,7.705001,3.406107,7.837753,9.792144,-3.032294,-5.421682,-0.101265,7.090617,-3.509448,-4.802026,-3.103782,-7.791430,-9.010893,-5.238617,-1.486001,6.532434,-1.172849,8.525604,-4.146963,-2.346734,2.125176,2.806474,0.587390,0.576834,-3.704675,-0.113906,3.431794,-9.864829,-1.379274,-3.845664,-4.166936,-7.164407,1.522118,2.125478,2.419958,-3.225145,-2.790646,-8.448795,-9.371524,1.780969,1.058668,-7.215707,-0.271302,-6.979742,0.653346,2.036015,5.453905,-7.912860,-6.232870,-6.924322,-9.385971,-6.208157,-8.591271,-9.321954,5.935990,0.973189,9.030075,6.126753,1.392873,-8.466826,7.767342,-0.915323,-5.924393,2.644781,-9.672194,-2.683153,-1.731793,-6.575943,8.282810,-9.047481,-6.831593,6.980660,8.381116,-4.592712,4.930834,8.129420,-1.028783,8.120601,-3.443050,1.593622,-4.339450,0.863371,2.382299,2.730356,-8.175985,2.004416,5.188017,-2.593470,3.361024,2.016196,-5.580749,9.937922,4.545735,3.614531,8.879254,-7.869815,-2.263970,7.608048,2.786859,-8.687617,-2.859316,1.884434,-3.890687,-1.197779,-2.063241,-3.490438,-0.525741,0.621647,-9.102656,7.758015,-8.267723,2.794725,-4.380680,-2.000661,8.817504,3.534666,-2.631417,-0.383044,6.109659,-4.122440,-1.382080,-3.772456,4.436996,-9.807851,-4.971878,7.630041,-4.781968,9.655209,0.078312,-6.183741,-5.755860,-6.466765,-7.584723,2.058003,0.484355,1.315256,8.131742,-4.884872,-0.157078,-7.957800,8.026664,2.113647,0.327919,-5.985447,-3.355642,9.591485,-7.558103,1.781910,-2.967538,-2.014411,-3.728895,-6.167724,4.301378,-6.829035,0.903726,-6.389516,7.563911,-7.878894,-3.741994,0.976972,-5.972563,5.564961,3.464935,9.773372,-8.515157,7.363469,-9.874679,-3.580707,1.169582,2.466077,7.496209,6.110029,4.678233,2.313041,-1.549652,-6.808341,-7.393462,1.020683,-9.327452,4.350895,9.111130,2.671228,-3.560564,4.311324,4.659863,5.040602,0.630710,9.870252,-3.719391,-1.408530,8.548752,8.566409,6.234389,2.603617,-6.252468,-9.786569,-6.432599,5.134057,8.502904,-5.787183,0.677033,4.643244,-2.798038,1.958824,-3.809671,9.391018,-9.860421,3.611087,9.176335,7.674330,4.660447,6.366724,3.804885,4.277819,-5.446777,3.144496,6.943227,-4.964693,5.368911,-8.255575,6.920518,-7.279334,4.975506,9.761471,-4.849072,-0.107152,-5.438683,7.291187,-6.760518,-8.580971,-0.028967,-8.319877,4.483940,4.042501,-9.835320,-3.531985,4.145891,2.729638,-1.546926,-7.180346,2.115983,-8.023852,-4.385796,8.622525,-7.870784,1.464364,-8.888021,-0.657925,-0.382188,-9.176183,-8.619090,5.421236,5.148516,-6.196424,1.965479,5.284063,3.839630,7.663072,7.439126,-0.166382,-7.927471,1.944251,0.522090,-4.122614,7.736214,-5.241310,8.005001,-6.763776,-6.093293,-5.910430,0.429190,-3.815169,-6.884694,-6.709771,-3.922018,6.336710,1.194396,5.264515,6.130435,-2.255944,9.915389,-2.450189,-6.819475,1.576261,0.421239,2.626286,1.292589,1.818116,5.297212,-0.373749,-2.308574,-7.544848,-1.643014,-9.512129,-6.523078,-3.228456,1.410487,-6.164391,5.545493,-5.650889,-5.444502,2.594511,2.819515,9.640147,5.775691,-1.416973,5.335651,1.878362,6.090248,4.762673,-2.094530,3.682364,-3.241013,-1.278213,4.384807,-5.519965,-7.879319,-8.911630,-5.172443,-2.053231,0.718930,9.488630,8.699643,-2.051716,-7.686286,-4.316143,2.289319,-8.660438,-3.722722,-4.561552,7.761101,7.706189,-3.928031,7.323833,1.864084,-7.677002,8.751756,4.231104,-2.035231,4.751369,-8.501729,-1.141329,0.365203,9.634956,2.813564,8.982532,9.227242,-5.284705,-7.139744,-9.189501,3.966161,-6.372260,7.819676,5.458348,9.113312,-9.698693,8.177661,-0.607248,-9.389464,-2.615471,0.923358,-1.406729,-2.961644,-2.962308,9.473654,-0.115174,-0.906162,0.745772,-5.213714,3.528870,3.241832,6.584163,-2.643102,5.186470,-6.574996,-5.396343,9.513610,-8.808800,2.074882,1.860448,3.004146,0.537401,-3.890990,1.188613,-4.410967,8.928661,2.830184,-4.509529,-1.501202,-0.295852,8.413306,-5.700211,2.115956,-9.596362,5.663270,1.618320,3.962843,-7.916303,3.563147,-6.551916,8.946659,0.912737,6.258643,-8.389526,8.861384,-0.256808,-8.348924,-0.067080,4.339433,-3.261042,-3.317841,4.367854,1.043387,6.291437,-3.077184,-5.404602,6.456898,-8.167710,4.648485,-1.795204,9.327073,5.830331,4.477498,2.708902,-6.181671,-7.467354,-4.847066,-9.545810,7.314725,-3.072435,9.976088,1.787171,2.741370,3.715473,2.103741,8.928397,-6.747802,-5.061759,-2.917767,-0.204699,0.249490,4.909376,2.993101,5.218168,-6.006294,-8.784865,-6.181748,-3.734717,5.480607,-2.190156,-9.292774,5.077119,-1.360921,-8.412878,4.097862,0.388571,1.341485,-0.169018,-3.992842,-2.685602,-4.801389,5.871306,-9.921173,-3.822828,0.559605,-8.529483,-2.121325,0.948241,8.495739,-5.821128,-5.513797,-0.666542,-0.706032,-7.109184,-6.252110,9.434707,1.115569,-0.733147,1.826315,1.655937,7.142150,-2.174420,7.937652,2.460714,3.986613,-9.438983,4.474137,-1.972394,8.226219,5.869567,6.546569,-3.675282,7.409691,-5.376864,9.273611,7.161539,-8.063798,0.339663,3.104284,-3.046953,-5.014779,8.811271,5.323449,2.817763,-2.325537,3.327123,-2.797425,0.878163,-9.652623,-1.614623,7.667359,-2.141900,6.964880,-7.501967,-4.497654,6.153601,9.247735,1.531057,-0.468814,6.535483,8.367197,-4.366258,1.140982,4.511949,-1.423532,9.239738,7.280524,3.749363,9.946215,-1.058120,-8.325241,-7.583299,-8.144475,6.676781,3.164263,6.882378,6.476708,-2.934773,3.819754,-8.575035,1.224377,-7.768020,3.875892,6.241363,2.287672,1.853482,8.296595,7.014608,2.008277,3.209709,1.299103,6.002489,-7.951873,7.047214,6.211929,2.623672,-7.368541,1.245561,3.497290,-3.691827,-9.079871,6.578683,-2.711928,6.959774,5.025014,-7.373126,-0.096515,5.700380,8.112385,-5.227945,-6.571348,2.480553,3.017544,-6.274939,4.559377,6.689923,-2.265082,0.663579,1.132265,-7.736742,0.614078,-6.452315,-5.648524,1.873381,-5.237671,-5.615109,8.829859,7.254735,6.620670,-8.079086,9.590602,-0.566685,-5.062925,-5.676371,3.194321,-8.457026,1.023645,-8.184210,-1.008201,6.832854,7.002041,9.981779,8.030288,-6.225015,-2.106330,6.370567,-2.997884,-6.588353,6.331619,8.960725,4.052102,-0.757069,-4.192950,9.157705,-6.920917,7.507495,-5.763015,-3.662219,-1.376328,-9.017411,1.433117,-9.356386,-1.730922,-6.984299,4.308788,-0.536925,7.857541,2.642198,7.929416,-3.028021,1.887111,3.241154,-5.725196,0.962959,-9.673310,-9.929698,2.872858,-5.540881,7.467596], dtype = "float64")#candidate|1694|(1050,)|const|float64
call_1693 = relay.TupleGetItem(func_480_call(relay.reshape(const_1694.astype('float64'), [15, 7, 10])), 0)
call_1695 = relay.TupleGetItem(func_482_call(relay.reshape(const_1694.astype('float64'), [15, 7, 10])), 0)
func_824_call = mod.get_global_var('func_824')
func_827_call = mutated_mod.get_global_var('func_827')
call_1710 = relay.TupleGetItem(func_824_call(relay.reshape(var_1686.astype('uint32'), [3, 16, 7]), relay.reshape(call_1685.astype('uint32'), [3, 16, 7]), ), 1)
call_1711 = relay.TupleGetItem(func_827_call(relay.reshape(var_1686.astype('uint32'), [3, 16, 7]), relay.reshape(call_1685.astype('uint32'), [3, 16, 7]), ), 1)
output = relay.Tuple([call_1628,uop_1639,uop_1668,bop_1676,call_1685,var_1686,call_1693,const_1694,call_1710,])
output2 = relay.Tuple([call_1629,uop_1641,uop_1670,bop_1679,call_1687,var_1686,call_1695,const_1694,call_1711,])
func_1738 = relay.Function([var_1686,], output)
mod['func_1738'] = func_1738
mod = relay.transform.InferType()(mod)
mutated_mod['func_1738'] = func_1738
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1739 = relay.var("var_1739", dtype = "uint32", shape = (336,))#candidate|1739|(336,)|var|uint32
func_1738_call = mutated_mod.get_global_var('func_1738')
call_1740 = func_1738_call(var_1739)
output = call_1740
func_1741 = relay.Function([var_1739], output)
mutated_mod['func_1741'] = func_1741
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1563_call = mod.get_global_var('func_1563')
func_1564_call = mutated_mod.get_global_var('func_1564')
call_1758 = relay.TupleGetItem(func_1563_call(), 3)
call_1759 = relay.TupleGetItem(func_1564_call(), 3)
output = call_1758
output2 = call_1759
func_1773 = relay.Function([], output)
mod['func_1773'] = func_1773
mod = relay.transform.InferType()(mod)
mutated_mod['func_1773'] = func_1773
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1773_call = mutated_mod.get_global_var('func_1773')
call_1774 = func_1773_call()
output = call_1774
func_1775 = relay.Function([], output)
mutated_mod['func_1775'] = func_1775
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_1804 = relay.TupleGetItem(func_1463_call(), 1)
call_1805 = relay.TupleGetItem(func_1465_call(), 1)
func_1298_call = mod.get_global_var('func_1298')
func_1300_call = mutated_mod.get_global_var('func_1300')
call_1806 = func_1298_call()
call_1807 = func_1298_call()
output = relay.Tuple([call_1804,call_1806,])
output2 = relay.Tuple([call_1805,call_1807,])
func_1808 = relay.Function([], output)
mod['func_1808'] = func_1808
mod = relay.transform.InferType()(mod)
mutated_mod['func_1808'] = func_1808
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1808_call = mutated_mod.get_global_var('func_1808')
call_1809 = func_1808_call()
output = call_1809
func_1810 = relay.Function([], output)
mutated_mod['func_1810'] = func_1810
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1563_call = mod.get_global_var('func_1563')
func_1564_call = mutated_mod.get_global_var('func_1564')
call_1833 = relay.TupleGetItem(func_1563_call(), 4)
call_1834 = relay.TupleGetItem(func_1564_call(), 4)
uop_1850 = relay.asinh(call_1833.astype('float64')) # shape=(12, 5, 15)
uop_1852 = relay.asinh(call_1834.astype('float64')) # shape=(12, 5, 15)
func_1298_call = mod.get_global_var('func_1298')
func_1300_call = mutated_mod.get_global_var('func_1300')
call_1853 = func_1298_call()
call_1854 = func_1298_call()
func_824_call = mod.get_global_var('func_824')
func_827_call = mutated_mod.get_global_var('func_827')
const_1860 = relay.const([3,-7,-1,-6,2,-4,-8,8,-6,-4,-6,-3,-7,7,1,7,-7,-4,9,-1,-1,9,9,-9,2,2,-2,-2,-8,-4,8,-4,-6,-3,8,6,-10,-9,4,6,1,-5,-2,5,9,-10,-9,-2,-3,-9,-1,-10,-4,10,9,6,-3,-5,10,-7,-9,6,9,2,2,-3,-8,4,2,-10,1,10,-6,8,-7,5,-2,-2,8,3,5,3,-8,5,-2,-2,-10,-6,1,2,-1,-2,9,-3,9,-7,3,10,-10,3,2,6,2,-8,-7,1,-9,-10,8,-7,1,-3,-7,-8,-8,8,8,1,5,-3,2,-10,-6,1,-6,-10,4,1,-6,8,-10,5,-8,10,-8,6,6,10,8,7,-10,1,2,-7,1,-4,10,8,6,3,-2,3,-7,-1,4,9,9,-10,-3,9,2,4,-3,-4,-2,-6,-8,-2,1,9,5,1,-9,-3,10,6,-7,6,5,-2,6,1,4,8,1,3,7,-8,-7,-1,-6,8,7,5,5,1,5,5,7,7,1,4,3,6,-6,6,-6,-5,-2,7,10,-7,9,-4,-5,4,10,6,1,-5,1,-7,10,1,4,7,7,-9,-8,-3,-4,9,-7,9,-8,-3,10,7,-5,1,-8,3,4,2,-5,-5,3,4,10,6,-10,9,10,-1,6,-4,10,-10,1,8,-6,-6,-8,7,-6,8,-3,-7,2,-7,9,3,-1,6,4,2,7,-8,-10,3,-9,1,5,-6,7,-7,7,8,4,1,-9,7,3,-1,4,9,4,-7,10,-7,-7,5,-6,-3,8,6,9,3,3,-6,-9,-10,7,-3,-9,5,-5,-1,1,1,9,7,5,1,6,-4,-2,-8,-10,-5,-1,8,-9,9,2,-1], dtype = "uint32")#candidate|1860|(336,)|const|uint32
call_1859 = relay.TupleGetItem(func_824_call(relay.reshape(const_1860.astype('uint32'), [3, 16, 7]), relay.reshape(const_1860.astype('uint32'), [3, 16, 7]), ), 0)
call_1861 = relay.TupleGetItem(func_827_call(relay.reshape(const_1860.astype('uint32'), [3, 16, 7]), relay.reshape(const_1860.astype('uint32'), [3, 16, 7]), ), 0)
var_1862 = relay.var("var_1862", dtype = "bool", shape = (3, 16, 7))#candidate|1862|(3, 16, 7)|var|bool
bop_1863 = relay.floor_mod(call_1859.astype('float64'), relay.reshape(var_1862.astype('float64'), relay.shape_of(call_1859))) # shape=(3, 16, 7)
bop_1866 = relay.floor_mod(call_1861.astype('float64'), relay.reshape(var_1862.astype('float64'), relay.shape_of(call_1861))) # shape=(3, 16, 7)
func_1498_call = mod.get_global_var('func_1498')
func_1500_call = mutated_mod.get_global_var('func_1500')
call_1886 = func_1498_call()
call_1887 = func_1498_call()
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_1894 = relay.TupleGetItem(func_1463_call(), 2)
call_1895 = relay.TupleGetItem(func_1465_call(), 2)
func_22_call = mod.get_global_var('func_22')
func_26_call = mutated_mod.get_global_var('func_26')
const_1904 = relay.const([2.685526,-8.235715,-3.558290,-2.840971,1.159253,-0.182495,4.068690,-0.718343,-7.357625,4.323849,0.542281,-9.241343,-5.575996,5.483076,-1.457789,9.909942,6.431955,1.359553,-2.187519,2.339999,-3.846883,-0.105632,-6.245406,-8.543831,0.392951,-7.993669,-0.314855,4.295205,3.819014,1.613837,9.352022,4.474312,-6.285975,-9.092845,-4.055944,-3.492093], dtype = "float32")#candidate|1904|(36,)|const|float32
var_1905 = relay.var("var_1905", dtype = "float32", shape = (360,))#candidate|1905|(360,)|var|float32
call_1903 = relay.TupleGetItem(func_22_call(relay.reshape(const_1904.astype('float32'), [1, 6, 6]), relay.reshape(var_1905.astype('float32'), [10, 6, 6]), ), 0)
call_1906 = relay.TupleGetItem(func_26_call(relay.reshape(const_1904.astype('float32'), [1, 6, 6]), relay.reshape(var_1905.astype('float32'), [10, 6, 6]), ), 0)
output = relay.Tuple([uop_1850,call_1853,const_1860,bop_1863,call_1886,call_1894,call_1903,const_1904,var_1905,])
output2 = relay.Tuple([uop_1852,call_1854,const_1860,bop_1866,call_1887,call_1895,call_1906,const_1904,var_1905,])
func_1908 = relay.Function([var_1862,var_1905,], output)
mod['func_1908'] = func_1908
mod = relay.transform.InferType()(mod)
var_1909 = relay.var("var_1909", dtype = "bool", shape = (3, 16, 7))#candidate|1909|(3, 16, 7)|var|bool
var_1910 = relay.var("var_1910", dtype = "float32", shape = (360,))#candidate|1910|(360,)|var|float32
output = func_1908(var_1909,var_1910,)
func_1911 = relay.Function([var_1909,var_1910,], output)
mutated_mod['func_1911'] = func_1911
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2030 = relay.var("var_2030", dtype = "bool", shape = ())#candidate|2030|()|var|bool
var_2031 = relay.var("var_2031", dtype = "bool", shape = (8, 13, 11))#candidate|2031|(8, 13, 11)|var|bool
bop_2032 = relay.logical_or(var_2030.astype('bool'), var_2031.astype('bool')) # shape=(8, 13, 11)
output = relay.Tuple([bop_2032,])
output2 = relay.Tuple([bop_2032,])
func_2042 = relay.Function([var_2030,var_2031,], output)
mod['func_2042'] = func_2042
mod = relay.transform.InferType()(mod)
var_2043 = relay.var("var_2043", dtype = "bool", shape = ())#candidate|2043|()|var|bool
var_2044 = relay.var("var_2044", dtype = "bool", shape = (8, 13, 11))#candidate|2044|(8, 13, 11)|var|bool
output = func_2042(var_2043,var_2044,)
func_2045 = relay.Function([var_2043,var_2044,], output)
mutated_mod['func_2045'] = func_2045
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2088 = relay.var("var_2088", dtype = "int64", shape = (14, 13, 1))#candidate|2088|(14, 13, 1)|var|int64
var_2089 = relay.var("var_2089", dtype = "int64", shape = (14, 13, 9))#candidate|2089|(14, 13, 9)|var|int64
bop_2090 = relay.greater(var_2088.astype('bool'), var_2089.astype('bool')) # shape=(14, 13, 9)
output = bop_2090
output2 = bop_2090
func_2094 = relay.Function([var_2088,var_2089,], output)
mod['func_2094'] = func_2094
mod = relay.transform.InferType()(mod)
var_2095 = relay.var("var_2095", dtype = "int64", shape = (14, 13, 1))#candidate|2095|(14, 13, 1)|var|int64
var_2096 = relay.var("var_2096", dtype = "int64", shape = (14, 13, 9))#candidate|2096|(14, 13, 9)|var|int64
output = func_2094(var_2095,var_2096,)
func_2097 = relay.Function([var_2095,var_2096,], output)
mutated_mod['func_2097'] = func_2097
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1773_call = mod.get_global_var('func_1773')
func_1775_call = mutated_mod.get_global_var('func_1775')
call_2103 = func_1773_call()
call_2104 = func_1773_call()
output = relay.Tuple([call_2103,])
output2 = relay.Tuple([call_2104,])
func_2105 = relay.Function([], output)
mod['func_2105'] = func_2105
mod = relay.transform.InferType()(mod)
mutated_mod['func_2105'] = func_2105
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2105_call = mutated_mod.get_global_var('func_2105')
call_2106 = func_2105_call()
output = call_2106
func_2107 = relay.Function([], output)
mutated_mod['func_2107'] = func_2107
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2108 = relay.var("var_2108", dtype = "float32", shape = ())#candidate|2108|()|var|float32
var_2109 = relay.var("var_2109", dtype = "float32", shape = (8, 2, 3))#candidate|2109|(8, 2, 3)|var|float32
bop_2110 = relay.floor_divide(var_2108.astype('float32'), var_2109.astype('float32')) # shape=(8, 2, 3)
func_480_call = mod.get_global_var('func_480')
func_482_call = mutated_mod.get_global_var('func_482')
const_2131 = relay.const([[9.533130],[-9.249558],[-6.507129],[2.895615],[-8.491596],[-4.964017],[9.701615],[-3.922380],[2.613066],[-2.924673],[5.060096],[4.264216],[6.596298],[-4.320795],[-1.471420],[-3.995864],[2.356638],[4.373407],[-7.261958],[-0.012919],[-2.488001],[-8.494757],[0.165253],[4.944998],[-8.153888],[-3.469278],[-5.178295],[5.375097],[-4.688669],[-6.289060],[-2.435712],[8.174027],[0.701159],[-7.732245],[0.706396],[6.565815],[3.497054],[4.814857],[-2.335065],[5.549847],[0.967869],[4.182697],[9.403381],[8.335839],[-0.583169],[9.736469],[-8.067495],[-1.548395],[5.921898],[1.227880],[-4.485101],[3.871553],[3.721846],[-9.064998],[0.335975],[-9.315955],[3.238495],[-5.014536],[-9.135659],[6.416089],[7.954000],[-3.912941],[5.504020],[-9.081214],[7.179167],[8.155006],[-7.244486],[2.774707],[1.052937],[5.092231],[4.870614],[7.911937],[4.988167],[8.751058],[3.365076],[-4.833645],[5.881409],[-7.836406],[-4.818145],[-7.585093],[7.027257],[5.755250],[-1.843521],[8.691149],[-5.646929],[-3.517106],[-8.984880],[6.682573],[1.912921],[7.085764],[6.457977],[-8.652408],[-0.705560],[8.952917],[0.619984],[-8.268968],[4.411118],[-5.296144],[-3.221533],[8.164482],[-2.656822],[-3.357807],[-4.552476],[7.070703],[8.110067],[-5.921553],[-9.141075],[3.901105],[-5.422406],[1.632246],[-5.534663],[-3.631491],[2.255402],[8.143213],[-4.201717],[3.799765],[-3.922332],[5.574157],[3.873924],[5.285656],[4.497122],[3.886347],[-6.300704],[6.103687],[3.381252],[-1.877097],[-0.926225],[5.265478],[6.107851],[-9.845521],[5.722151],[-5.337978],[6.972789],[-6.988240],[-5.735024],[1.712335],[-0.542270],[-8.772956],[-4.060166],[1.231034],[-6.062337],[6.359521],[-5.415545],[5.708124],[-4.891029],[5.007497],[2.246323],[2.067888],[8.076747],[3.033868],[7.022603],[5.376063],[8.284534],[-8.145223],[0.020103],[3.990398],[6.925285],[6.366958],[2.262798],[1.337916],[-4.196220],[7.524888],[1.961108],[-0.145785],[5.433389],[-9.273249],[6.661414],[-8.934308],[7.992790],[-4.806449],[-4.976230],[8.250216],[-2.188784],[4.466103],[6.712523],[9.030028],[1.788135],[5.528324],[-6.237613],[2.497725],[4.308121],[-2.561313],[0.750847],[8.000182],[-2.499378],[-7.110436],[3.414164],[-4.989263],[-5.344990],[0.053556],[7.532611],[7.331438],[3.133759],[8.646470],[-6.584656],[1.611866],[-4.150620],[-9.576992],[-0.214036],[6.347785],[0.001499],[3.310345],[9.602113],[6.960898],[1.338117],[9.930629],[5.842769],[4.601783],[4.686253],[-0.919084],[3.039177],[8.728986],[-6.855515],[-4.619874],[9.566470],[9.755677],[6.811072],[9.996052],[-0.029856],[-6.168931],[7.028188],[-0.662416],[-6.067450],[0.669037],[-5.672670],[2.472361],[-9.498248],[-0.799442],[0.816487],[8.490030],[-3.888073],[7.375770],[-7.907813],[-1.302558],[0.361522],[-9.712982],[-4.747936],[-4.796853],[3.411947],[-8.549626],[8.196194],[5.529613],[-5.263417],[-9.549846],[-5.110868],[-4.701789],[-9.412361],[-6.580808],[-5.074909],[-2.966185],[1.595988],[-0.532134],[7.366986],[-0.471114],[-3.475044],[5.149418],[8.117337],[7.892352],[-6.773237],[0.756605],[-6.156100],[5.062619],[2.951157],[3.744065],[-4.202063],[-7.064940],[-2.636855],[3.248060],[1.760490],[-0.802011],[-3.230928],[0.940357],[4.270719],[9.102510],[6.917823],[-9.770343],[-5.417956],[-0.220770],[-1.051482],[7.892433],[5.478841],[-8.075260],[-8.640619],[-0.309884],[-2.659193],[7.160060],[-9.680946],[-3.431188],[-9.045371],[6.639480],[-4.641628],[0.283297],[9.550430],[-6.092572],[4.916534],[-5.249837],[9.230192],[-4.041096],[-9.882232],[2.881345],[-9.976074],[1.713644],[-9.122076],[-7.385592],[6.134184],[-6.744394],[6.668323],[-2.431133],[5.225305],[-1.168439],[-6.881470],[-0.131192],[-2.856014],[8.511810],[7.267783],[4.940781],[6.002696],[-8.779351],[-0.945623],[-4.902835],[-3.286099],[1.008139],[-3.956471],[-4.996509],[-2.075629],[-3.516743],[3.859314],[5.032159],[-7.199956],[-3.961160],[4.758043],[2.122789],[-9.557603],[-0.042714],[-5.441118],[-2.461998],[7.793542],[-0.671868],[9.110909],[-5.875487],[-9.095174],[-7.642144],[5.735538],[6.252573],[-2.069779],[3.706409],[5.167155],[-5.320509],[-4.418367],[-2.693369],[-9.174882],[6.800373],[-6.717518],[7.265568],[-5.642214],[2.172196],[5.036891],[-2.674128],[2.932533],[-9.578139],[2.924059],[-8.226867],[-2.686389],[-6.901944],[1.078331],[8.942031],[3.498237],[-6.758385],[-1.492949],[4.127593],[0.929131],[1.312280],[-4.365673],[6.298949],[3.192186],[9.970998],[9.351874],[7.189543],[-8.423404],[-9.421466],[-7.006482],[0.501943],[-3.747914],[9.925948],[-8.311262],[4.640750],[-5.364449],[-3.720273],[-4.305311],[-5.514506],[5.425942],[-8.162808],[4.573732],[-2.349392],[8.327405],[-4.840274],[-1.194866],[1.950763],[6.546187],[4.013922],[2.066149],[7.787416],[-1.638335],[-1.936731],[8.262941],[-5.888427],[-6.624571],[8.396211],[6.105644],[3.307331],[-1.311745],[-8.984248],[-6.563063],[8.076334],[8.751239],[2.233153],[4.865701],[-5.578352],[-1.804004],[-5.853996],[1.781147],[-8.736165],[9.856658],[-7.723133],[9.997601],[4.627952],[9.646704],[-1.443787],[1.194822],[2.816353],[-0.760367],[9.690176],[6.437297],[1.478799],[-7.041892],[9.760119],[0.322879],[5.835902],[6.310411],[1.460325],[4.226997],[-1.736143],[-0.053643],[-0.259476],[-2.172619],[-7.821862],[-8.067062],[-2.056461],[8.468787],[4.731433],[1.207833],[-0.855137],[-2.782906],[6.850424],[6.585356],[-5.011867],[7.838221],[6.001548],[1.497956],[9.186877],[5.526813],[0.910843],[1.447220],[4.140096],[3.418503],[-6.608869],[3.117883],[4.445190],[-3.122907],[8.570449],[3.137570],[-3.465956],[-6.963612],[4.386522],[-0.288324],[9.961661],[-9.950955],[0.403411],[-5.424480],[3.052749],[-8.220483],[-9.729726],[-7.161847],[4.589845],[-7.023546],[-2.082544],[6.239544],[-9.198599],[-9.381102],[1.344994],[-3.094153],[-3.109948],[7.092946],[-5.258533],[-6.371776],[-6.216850],[4.081417],[-5.433223],[-1.511652],[-8.594545],[-2.751609],[9.907909],[6.511619],[6.826958],[0.747119],[-5.503999],[8.314810],[-0.691041],[5.304307],[-7.859946],[-9.181952],[-3.334864],[2.177640],[0.107066],[-2.077341],[-3.493101],[-2.955135],[-5.307342],[9.359152],[1.091977],[9.886889],[-2.236238],[-7.212439],[1.175539],[6.540909],[3.149317],[-7.485948],[5.488626],[-9.519668],[-6.530849],[-1.646279],[2.073136],[-4.655079],[-9.835240],[4.431746],[-6.158549],[-8.528976],[9.093627],[3.405958],[-8.566110],[-6.182422],[0.163189],[7.390934],[-4.448050],[4.448918],[-6.241580],[4.180376],[8.952478],[-0.771421],[4.430775],[7.245496],[-2.613518],[-4.192315],[1.030099],[-8.521129],[-4.453035],[9.846155],[-7.503937],[-2.849825],[5.655054],[4.551793],[3.920801],[3.454454],[-5.116450],[3.646270],[-5.172792],[4.519463],[-8.014358],[-9.438240],[9.021830],[9.094577],[-5.976747],[0.481740],[0.526315],[9.306149],[-5.273750],[-7.013617],[-5.559058],[-5.575041],[1.395886],[-3.721071],[-8.206089],[-7.415661],[-6.240486],[-5.580788],[-8.440055],[2.393074],[1.733396],[2.536295],[9.992587],[4.505593],[6.728211],[7.258582],[3.809253],[-8.277343],[3.174982],[-5.407693],[-8.392603],[-7.093911],[-7.812893],[-2.015969],[-6.761064],[0.220884],[4.126873],[-7.760998],[4.195829],[-6.664760],[-3.057952],[-6.341379],[0.550129],[-1.603848],[-8.806066],[-9.227354],[-3.145211],[7.508691],[-9.082571],[3.017875],[5.349304],[-3.226050],[3.708014],[7.134859],[-1.226195],[1.827716],[-3.924238],[-9.512292],[-2.197242],[-2.387472],[-3.210708],[0.117181],[-0.068331],[7.674140],[-7.568697],[1.378863],[7.310303],[-4.448845],[7.257355],[8.232382],[0.676010],[-3.858911],[2.384214],[5.889964],[4.050165],[-2.045982],[0.792469],[-6.132545],[-3.626458],[-6.497200],[-1.851181],[-0.096037],[9.892451],[-9.712558],[8.489815],[-8.154410],[-4.024625],[-5.085810],[3.411622],[2.009831],[1.363486],[-7.733787],[1.106161],[-8.324628],[-5.249101],[8.273679],[8.448688],[-0.212485],[-3.081915],[9.271361],[1.508137],[5.524779],[-4.899170],[9.150605],[5.850521],[-1.065870],[-8.467201],[4.065486],[-9.568365],[5.907541],[-0.332250],[2.268638],[-2.961670],[-3.968000],[9.193408],[-8.735023],[8.181459],[-2.507410],[1.222675],[-3.535839],[9.871004],[-2.159576],[6.849300],[4.016450],[4.212837],[1.508238],[2.712123],[1.245611],[-6.886150],[6.552666],[9.173722],[-3.577705],[4.698954],[-7.064075],[-6.534451],[8.054317],[-5.084055],[6.514509],[-0.813720],[8.483138],[9.064464],[3.548983],[7.051801],[3.856747],[9.203121],[4.467493],[-8.398709],[0.619727],[6.072204],[6.948519],[-4.450978],[1.818110],[-7.240851],[4.916462],[0.237683],[-2.003760],[4.765559],[-3.124996],[6.280461],[-6.419716],[-4.268348],[5.814218],[-2.793292],[-7.561510],[9.656428],[9.191315],[-1.248258],[-4.193624],[-1.428114],[1.311533],[-9.391040],[-2.546715],[-1.459052],[-0.513298],[-1.848428],[-6.420648],[3.382584],[-5.700476],[-1.089296],[9.801339],[-8.907506],[-0.918248],[9.973752],[3.065960],[-0.348685],[1.712679],[-1.156762],[-6.282887],[-5.255341],[-6.110392],[8.409709],[0.558352],[5.286034],[-1.440585],[-2.103812],[9.402435],[7.780109],[-3.109631],[-2.537004],[-3.054857],[-1.338979],[5.068382],[5.673804],[6.251993],[-8.031391],[9.926176],[-3.723436],[-8.243718],[-7.866168],[-2.747832],[-2.637405],[6.599339],[1.119916],[-3.055474],[1.491618],[-0.547480],[1.541472],[-4.393443],[8.375989],[-4.164649],[-0.284558],[7.125832],[1.889528],[-1.591761],[1.580113],[-9.767806],[-6.251926],[1.250723],[9.785621],[2.195891],[-2.877409],[6.207140],[0.080623],[-1.257910],[9.738528],[-1.650370],[-3.714399],[1.964316],[-3.676233],[6.615556],[-9.646302],[2.546361],[9.037606],[-2.992633],[8.512131],[1.658869],[3.425259],[0.528484],[6.281092],[7.763232],[-2.221194],[-9.866389],[5.676967],[-6.854784],[5.489487],[5.272724],[-3.344054],[-8.031698],[9.527301],[-3.818950],[-7.406959],[-1.188389],[-8.277278],[-4.736029],[-4.351162],[0.717889],[5.254869],[0.620481],[2.190783],[-7.315755],[-4.709943],[-9.896541],[1.822119],[-8.245067],[4.487340],[5.497781],[5.848647],[5.782049],[1.719005],[7.236125],[1.122977],[-4.291791],[-1.499106],[2.746473],[-4.615697],[-7.380286],[-2.287629],[1.089759],[9.812990],[-3.035994],[-6.354211],[-0.362283],[-7.298921],[-0.817048],[5.306287],[6.256445],[-9.216639],[8.612901],[3.185078],[-6.708473],[8.874162],[-7.565474],[6.899980],[0.925244],[-8.913324],[0.355143],[5.735018],[-7.446705],[2.751257],[4.788790],[-8.754346],[4.201309],[-7.308667],[3.258901],[0.531832],[9.079093],[-7.236824],[-3.756644],[4.497314],[-7.874290],[-7.481772],[3.170769],[3.175661],[5.007292],[-9.829181],[7.280305],[7.142904],[4.218837],[1.089343],[6.189926],[-3.158958],[0.456214],[4.418189],[-2.960471],[7.599565],[-9.798629],[-0.280719],[8.813406],[6.560499],[-0.015332],[2.873029],[-0.253860],[-9.249316],[1.070634],[-2.811880],[-6.012673],[9.875529],[4.922892],[-2.135355],[-3.138536],[-6.749321],[1.014220],[-1.345842],[-1.571838],[1.695694],[8.455827],[-5.555840],[9.615905],[7.268964],[-2.351182],[1.911218],[-3.421895],[1.925616],[7.099586],[7.055507],[7.774119],[-6.466668],[-2.251232],[-2.535839],[-5.581822],[8.008150],[-3.184339],[9.032003],[-2.918912],[-3.852686],[-5.168014],[0.653026],[2.094239],[-8.369250],[-4.473341],[-4.129485],[7.354436],[-2.596116],[0.370847],[-9.409556],[-4.071330],[4.938268],[1.086797],[-7.646123],[1.265097],[5.450998],[7.350618],[-1.122777],[5.483546],[0.569807],[-1.574626],[7.943652],[2.560413],[7.554936],[-7.214260],[-3.379380],[1.309722],[-4.198184],[7.993938],[-8.015783],[7.388720],[-0.421176],[-6.623144],[9.029740],[-8.092382],[-0.423880],[-7.406077],[-8.772315],[4.092933],[-8.355956],[-1.082031],[9.912027],[-4.355569],[-1.302982],[-0.203226],[-4.523138],[-3.901374],[-5.615089],[2.730034],[-1.013014],[3.198418],[-4.972680],[0.004998],[2.139833],[-3.771925],[-7.885371],[-5.171274],[-6.960450],[1.930920],[-5.846068],[3.327818],[-2.284742],[-8.284601],[2.771979],[-7.716992],[6.589491],[-8.826246],[-1.382991],[-7.410067],[-1.658006],[9.761714],[1.797542],[-9.518908],[8.786635],[1.942225],[-3.719907],[-1.611414],[-4.457740],[8.099681],[2.536319],[-9.284744],[9.268005],[-3.072585],[-3.069715],[5.378846],[-6.027070],[0.551700],[2.926432],[7.665930],[-8.275607],[-9.156021],[-4.305861],[2.179276],[3.220431],[-4.202854],[-3.692678],[2.280320],[2.814734],[9.209960],[0.778284],[-9.484794],[-8.229360],[9.605245],[-5.068815],[-5.600628],[4.140677],[9.491373],[0.243830]], dtype = "float64")#candidate|2131|(1050, 1)|const|float64
call_2130 = relay.TupleGetItem(func_480_call(relay.reshape(const_2131.astype('float64'), [15, 7, 10])), 0)
call_2132 = relay.TupleGetItem(func_482_call(relay.reshape(const_2131.astype('float64'), [15, 7, 10])), 0)
output = relay.Tuple([bop_2110,call_2130,const_2131,])
output2 = relay.Tuple([bop_2110,call_2132,const_2131,])
func_2134 = relay.Function([var_2108,var_2109,], output)
mod['func_2134'] = func_2134
mod = relay.transform.InferType()(mod)
var_2135 = relay.var("var_2135", dtype = "float32", shape = ())#candidate|2135|()|var|float32
var_2136 = relay.var("var_2136", dtype = "float32", shape = (8, 2, 3))#candidate|2136|(8, 2, 3)|var|float32
output = func_2134(var_2135,var_2136,)
func_2137 = relay.Function([var_2135,var_2136,], output)
mutated_mod['func_2137'] = func_2137
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_2151 = relay.TupleGetItem(func_1463_call(), 2)
call_2152 = relay.TupleGetItem(func_1465_call(), 2)
output = relay.Tuple([call_2151,])
output2 = relay.Tuple([call_2152,])
func_2188 = relay.Function([], output)
mod['func_2188'] = func_2188
mod = relay.transform.InferType()(mod)
mutated_mod['func_2188'] = func_2188
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2188_call = mutated_mod.get_global_var('func_2188')
call_2189 = func_2188_call()
output = call_2189
func_2190 = relay.Function([], output)
mutated_mod['func_2190'] = func_2190
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2193 = relay.var("var_2193", dtype = "int32", shape = (11, 16, 6))#candidate|2193|(11, 16, 6)|var|int32
var_2194 = relay.var("var_2194", dtype = "int32", shape = (11, 16, 6))#candidate|2194|(11, 16, 6)|var|int32
bop_2195 = relay.logical_xor(var_2193.astype('int32'), relay.reshape(var_2194.astype('int32'), relay.shape_of(var_2193))) # shape=(11, 16, 6)
uop_2201 = relay.atanh(var_2194.astype('float32')) # shape=(11, 16, 6)
output = relay.Tuple([bop_2195,uop_2201,])
output2 = relay.Tuple([bop_2195,uop_2201,])
func_2203 = relay.Function([var_2193,var_2194,], output)
mod['func_2203'] = func_2203
mod = relay.transform.InferType()(mod)
mutated_mod['func_2203'] = func_2203
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2203_call = mutated_mod.get_global_var('func_2203')
var_2205 = relay.var("var_2205", dtype = "int32", shape = (11, 16, 6))#candidate|2205|(11, 16, 6)|var|int32
var_2206 = relay.var("var_2206", dtype = "int32", shape = (11, 16, 6))#candidate|2206|(11, 16, 6)|var|int32
call_2204 = func_2203_call(var_2205,var_2206,)
output = call_2204
func_2207 = relay.Function([var_2205,var_2206,], output)
mutated_mod['func_2207'] = func_2207
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1808_call = mod.get_global_var('func_1808')
func_1810_call = mutated_mod.get_global_var('func_1810')
call_2233 = relay.TupleGetItem(func_1808_call(), 1)
call_2234 = relay.TupleGetItem(func_1810_call(), 1)
output = call_2233
output2 = call_2234
func_2261 = relay.Function([], output)
mod['func_2261'] = func_2261
mod = relay.transform.InferType()(mod)
mutated_mod['func_2261'] = func_2261
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2261_call = mutated_mod.get_global_var('func_2261')
call_2262 = func_2261_call()
output = call_2262
func_2263 = relay.Function([], output)
mutated_mod['func_2263'] = func_2263
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1808_call = mod.get_global_var('func_1808')
func_1810_call = mutated_mod.get_global_var('func_1810')
call_2267 = relay.TupleGetItem(func_1808_call(), 1)
call_2268 = relay.TupleGetItem(func_1810_call(), 1)
output = relay.Tuple([call_2267,])
output2 = relay.Tuple([call_2268,])
func_2286 = relay.Function([], output)
mod['func_2286'] = func_2286
mod = relay.transform.InferType()(mod)
mutated_mod['func_2286'] = func_2286
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2286_call = mutated_mod.get_global_var('func_2286')
call_2287 = func_2286_call()
output = call_2287
func_2288 = relay.Function([], output)
mutated_mod['func_2288'] = func_2288
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1808_call = mod.get_global_var('func_1808')
func_1810_call = mutated_mod.get_global_var('func_1810')
call_2303 = relay.TupleGetItem(func_1808_call(), 1)
call_2304 = relay.TupleGetItem(func_1810_call(), 1)
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
var_2326 = relay.var("var_2326", dtype = "uint32", shape = (1470,))#candidate|2326|(1470,)|var|uint32
call_2325 = relay.TupleGetItem(func_54_call(relay.reshape(var_2326.astype('uint32'), [7, 15, 14])), 0)
call_2327 = relay.TupleGetItem(func_57_call(relay.reshape(var_2326.astype('uint32'), [7, 15, 14])), 0)
output = relay.Tuple([call_2303,call_2325,var_2326,])
output2 = relay.Tuple([call_2304,call_2327,var_2326,])
func_2329 = relay.Function([var_2326,], output)
mod['func_2329'] = func_2329
mod = relay.transform.InferType()(mod)
mutated_mod['func_2329'] = func_2329
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2330 = relay.var("var_2330", dtype = "uint32", shape = (1470,))#candidate|2330|(1470,)|var|uint32
func_2329_call = mutated_mod.get_global_var('func_2329')
call_2331 = func_2329_call(var_2330)
output = call_2331
func_2332 = relay.Function([var_2330], output)
mutated_mod['func_2332'] = func_2332
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2188_call = mod.get_global_var('func_2188')
func_2190_call = mutated_mod.get_global_var('func_2190')
call_2348 = relay.TupleGetItem(func_2188_call(), 0)
call_2349 = relay.TupleGetItem(func_2190_call(), 0)
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
call_2355 = relay.TupleGetItem(func_54_call(relay.reshape(call_2348.astype('uint32'), [7, 15, 14])), 0)
call_2356 = relay.TupleGetItem(func_57_call(relay.reshape(call_2348.astype('uint32'), [7, 15, 14])), 0)
func_1773_call = mod.get_global_var('func_1773')
func_1775_call = mutated_mod.get_global_var('func_1775')
call_2358 = func_1773_call()
call_2359 = func_1773_call()
output = relay.Tuple([call_2348,call_2355,call_2358,])
output2 = relay.Tuple([call_2349,call_2356,call_2359,])
func_2360 = relay.Function([], output)
mod['func_2360'] = func_2360
mod = relay.transform.InferType()(mod)
output = func_2360()
func_2361 = relay.Function([], output)
mutated_mod['func_2361'] = func_2361
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2360_call = mod.get_global_var('func_2360')
func_2361_call = mutated_mod.get_global_var('func_2361')
call_2385 = relay.TupleGetItem(func_2360_call(), 1)
call_2386 = relay.TupleGetItem(func_2361_call(), 1)
func_2188_call = mod.get_global_var('func_2188')
func_2190_call = mutated_mod.get_global_var('func_2190')
call_2413 = relay.TupleGetItem(func_2188_call(), 0)
call_2414 = relay.TupleGetItem(func_2190_call(), 0)
bop_2426 = relay.not_equal(call_2385.astype('bool'), relay.reshape(call_2413.astype('bool'), relay.shape_of(call_2385))) # shape=(7, 15, 14)
bop_2429 = relay.not_equal(call_2386.astype('bool'), relay.reshape(call_2414.astype('bool'), relay.shape_of(call_2386))) # shape=(7, 15, 14)
func_2329_call = mod.get_global_var('func_2329')
func_2332_call = mutated_mod.get_global_var('func_2332')
call_2441 = relay.TupleGetItem(func_2329_call(relay.reshape(call_2385.astype('uint32'), [1470,])), 1)
call_2442 = relay.TupleGetItem(func_2332_call(relay.reshape(call_2385.astype('uint32'), [1470,])), 1)
func_2286_call = mod.get_global_var('func_2286')
func_2288_call = mutated_mod.get_global_var('func_2288')
call_2453 = relay.TupleGetItem(func_2286_call(), 0)
call_2454 = relay.TupleGetItem(func_2288_call(), 0)
bop_2456 = relay.multiply(call_2441.astype('int8'), relay.reshape(bop_2426.astype('int8'), relay.shape_of(call_2441))) # shape=(7, 15, 14)
bop_2459 = relay.multiply(call_2442.astype('int8'), relay.reshape(bop_2429.astype('int8'), relay.shape_of(call_2442))) # shape=(7, 15, 14)
uop_2468 = relay.erf(call_2385.astype('float64')) # shape=(7, 15, 14)
uop_2470 = relay.erf(call_2386.astype('float64')) # shape=(7, 15, 14)
output = relay.Tuple([call_2453,bop_2456,uop_2468,])
output2 = relay.Tuple([call_2454,bop_2459,uop_2470,])
func_2477 = relay.Function([], output)
mod['func_2477'] = func_2477
mod = relay.transform.InferType()(mod)
mutated_mod['func_2477'] = func_2477
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2477_call = mutated_mod.get_global_var('func_2477')
call_2478 = func_2477_call()
output = call_2478
func_2479 = relay.Function([], output)
mutated_mod['func_2479'] = func_2479
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1808_call = mod.get_global_var('func_1808')
func_1810_call = mutated_mod.get_global_var('func_1810')
call_2495 = relay.TupleGetItem(func_1808_call(), 0)
call_2496 = relay.TupleGetItem(func_1810_call(), 0)
output = call_2495
output2 = call_2496
func_2504 = relay.Function([], output)
mod['func_2504'] = func_2504
mod = relay.transform.InferType()(mod)
output = func_2504()
func_2505 = relay.Function([], output)
mutated_mod['func_2505'] = func_2505
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2578 = relay.var("var_2578", dtype = "bool", shape = (5, 10, 11))#candidate|2578|(5, 10, 11)|var|bool
const_2579 = relay.const([[[True,True,True,True,False,True,True,True,False,True,True],[True,False,False,True,False,True,True,True,False,False,False],[False,False,False,True,False,True,True,False,True,True,True],[False,False,True,False,True,False,False,True,True,True,True],[True,False,False,False,True,True,True,False,True,True,False],[True,False,True,False,False,True,False,True,False,False,True],[True,False,False,False,False,True,True,True,True,True,False],[True,True,True,False,False,True,True,True,False,True,False],[True,True,False,False,True,True,False,False,False,True,False],[False,True,True,False,True,False,True,False,False,False,True]],[[False,False,False,True,True,True,True,False,True,False,False],[True,False,True,False,False,True,False,False,False,True,True],[True,True,False,True,False,False,False,False,False,False,False],[False,True,True,True,True,False,True,True,False,False,False],[True,True,False,True,True,False,True,False,False,False,True],[False,True,True,True,True,True,True,True,True,True,True],[True,False,False,True,True,True,True,False,True,False,True],[False,True,False,False,False,True,False,False,False,True,False],[False,False,True,True,True,True,True,False,False,False,False],[False,True,False,True,False,False,True,False,True,True,False]],[[True,True,False,False,False,True,True,True,True,True,True],[False,False,False,True,True,False,True,True,False,True,False],[False,True,False,False,False,True,True,True,True,True,False],[True,True,False,False,False,True,True,True,False,False,False],[False,True,True,False,True,True,True,False,True,True,True],[False,False,True,True,True,False,False,False,True,True,False],[True,False,False,True,True,False,True,True,False,False,True],[True,False,False,False,True,False,False,True,False,False,True],[True,True,False,False,True,True,True,False,True,False,False],[True,True,False,True,True,True,True,True,False,True,True]],[[False,True,True,True,True,False,True,True,True,False,False],[True,False,True,False,True,False,True,False,False,True,True],[False,False,False,False,False,True,False,True,True,True,False],[False,False,False,False,True,True,True,True,False,False,False],[True,True,True,True,False,True,False,True,True,False,False],[True,False,False,True,True,True,False,False,True,False,False],[True,False,True,True,True,False,True,True,False,False,False],[False,False,True,True,False,False,False,False,False,False,True],[False,True,False,True,True,False,True,True,False,False,True],[True,True,False,True,False,True,False,True,False,False,True]],[[True,True,True,True,False,True,False,False,False,False,True],[False,False,False,False,True,True,False,True,False,True,True],[False,True,True,True,True,False,True,True,True,False,False],[False,False,False,False,False,False,False,False,True,True,False],[True,True,True,False,False,True,False,True,False,False,False],[True,False,True,False,True,False,True,False,True,False,False],[True,False,False,False,False,False,True,True,True,True,True],[False,True,True,True,False,False,True,False,True,True,False],[False,True,False,True,False,False,False,False,False,True,False],[False,True,True,False,True,False,True,False,True,False,True]]], dtype = "bool")#candidate|2579|(5, 10, 11)|const|bool
bop_2580 = relay.logical_or(var_2578.astype('bool'), relay.reshape(const_2579.astype('bool'), relay.shape_of(var_2578))) # shape=(5, 10, 11)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_2587 = relay.TupleGetItem(func_1463_call(), 1)
call_2588 = relay.TupleGetItem(func_1465_call(), 1)
func_2286_call = mod.get_global_var('func_2286')
func_2288_call = mutated_mod.get_global_var('func_2288')
call_2615 = relay.TupleGetItem(func_2286_call(), 0)
call_2616 = relay.TupleGetItem(func_2288_call(), 0)
output = relay.Tuple([bop_2580,call_2587,call_2615,])
output2 = relay.Tuple([bop_2580,call_2588,call_2616,])
func_2622 = relay.Function([var_2578,], output)
mod['func_2622'] = func_2622
mod = relay.transform.InferType()(mod)
var_2623 = relay.var("var_2623", dtype = "bool", shape = (5, 10, 11))#candidate|2623|(5, 10, 11)|var|bool
output = func_2622(var_2623)
func_2624 = relay.Function([var_2623], output)
mutated_mod['func_2624'] = func_2624
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2477_call = mod.get_global_var('func_2477')
func_2479_call = mutated_mod.get_global_var('func_2479')
call_2686 = relay.TupleGetItem(func_2477_call(), 1)
call_2687 = relay.TupleGetItem(func_2479_call(), 1)
func_2105_call = mod.get_global_var('func_2105')
func_2107_call = mutated_mod.get_global_var('func_2107')
call_2692 = relay.TupleGetItem(func_2105_call(), 0)
call_2693 = relay.TupleGetItem(func_2107_call(), 0)
func_2042_call = mod.get_global_var('func_2042')
func_2045_call = mutated_mod.get_global_var('func_2045')
const_2699 = relay.const(False, dtype = "bool")#candidate|2699|()|const|bool
var_2700 = relay.var("var_2700", dtype = "bool", shape = (1144,))#candidate|2700|(1144,)|var|bool
call_2698 = relay.TupleGetItem(func_2042_call(relay.reshape(const_2699.astype('bool'), []), relay.reshape(var_2700.astype('bool'), [8, 13, 11]), ), 0)
call_2701 = relay.TupleGetItem(func_2045_call(relay.reshape(const_2699.astype('bool'), []), relay.reshape(var_2700.astype('bool'), [8, 13, 11]), ), 0)
uop_2703 = relay.asinh(var_2700.astype('float64')) # shape=(1144,)
var_2706 = relay.var("var_2706", dtype = "float64", shape = (1144,))#candidate|2706|(1144,)|var|float64
bop_2707 = relay.minimum(uop_2703.astype('int8'), relay.reshape(var_2706.astype('int8'), relay.shape_of(uop_2703))) # shape=(1144,)
output = relay.Tuple([call_2686,call_2692,call_2698,const_2699,bop_2707,])
output2 = relay.Tuple([call_2687,call_2693,call_2701,const_2699,bop_2707,])
func_2712 = relay.Function([var_2700,var_2706,], output)
mod['func_2712'] = func_2712
mod = relay.transform.InferType()(mod)
mutated_mod['func_2712'] = func_2712
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2712_call = mutated_mod.get_global_var('func_2712')
var_2714 = relay.var("var_2714", dtype = "bool", shape = (1144,))#candidate|2714|(1144,)|var|bool
var_2715 = relay.var("var_2715", dtype = "float64", shape = (1144,))#candidate|2715|(1144,)|var|float64
call_2713 = func_2712_call(var_2714,var_2715,)
output = call_2713
func_2716 = relay.Function([var_2714,var_2715,], output)
mutated_mod['func_2716'] = func_2716
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_2783 = relay.TupleGetItem(func_1463_call(), 0)
call_2784 = relay.TupleGetItem(func_1465_call(), 0)
uop_2788 = relay.cos(call_2783.astype('float32')) # shape=(12, 5, 15)
uop_2790 = relay.cos(call_2784.astype('float32')) # shape=(12, 5, 15)
output = relay.Tuple([uop_2788,])
output2 = relay.Tuple([uop_2790,])
func_2815 = relay.Function([], output)
mod['func_2815'] = func_2815
mod = relay.transform.InferType()(mod)
output = func_2815()
func_2816 = relay.Function([], output)
mutated_mod['func_2816'] = func_2816
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1498_call = mod.get_global_var('func_1498')
func_1500_call = mutated_mod.get_global_var('func_1500')
call_2817 = func_1498_call()
call_2818 = func_1498_call()
func_846_call = mod.get_global_var('func_846')
func_848_call = mutated_mod.get_global_var('func_848')
const_2822 = relay.const([6.869858,-7.849094,5.413610,7.860377,9.752857,1.635075,6.658289,7.362505,-4.120991,-1.185402,8.150688,0.796376,6.564345,-3.065858,-4.464166,-7.279957,8.768019,0.394180,-6.087292,-7.671643,7.376472,-5.191462,-7.258618,8.555522,9.489820,1.136611,9.421716,-1.129883,6.515784,-3.809087,-4.721178,1.062194,0.503305,-5.954979,-8.668731,0.982801,-7.324744,-6.958128,7.193967,8.132856,9.878490,9.389426,5.109869,-8.261077,5.005769,-3.076807,4.996358,9.656565,-3.838149,4.537707,-5.090338,-1.963897,-1.783945,-8.474477,-5.635242,-5.351107,-5.663187,0.867079,-6.302081,-5.543876,-8.885368,8.978708,-2.882559,-3.977406,7.943926,9.144952,-8.309409,-8.371608,-3.896452,-8.607972,7.696826,2.214044,9.762096,1.413072,-1.264468,2.646288,8.351315,-9.507220,1.360052,-7.971097,-8.147947,7.159375,-6.903662,-7.300267,-9.456768,8.948751,9.091849,8.896228,3.638872,-7.775111,-8.479905,-2.098072,2.619836,1.873435,0.328327,4.819332,-5.186792,-0.072052,-6.005597,7.531967,-7.988158,-4.133292,2.116474,-8.557338,5.063210,-6.797232,-1.928832,8.733493,-5.237265,-4.704417,-1.793300,6.126121,-5.909281,5.155475,-5.996476,4.423785,-0.959754,9.058061,7.652639,-4.395687,-3.309397,-2.061613,-9.015424,-9.564584,9.878018,-3.774350,-4.392033,-1.235539,-0.156176,-8.011324,-6.293951,4.722631,0.377089,4.704814,-3.045546,5.550122,-9.663699,1.717324,3.904572,4.771219,-8.571215,8.822897,-9.887419,-6.136943,4.400026,7.729079,-1.987245,-3.204137,1.294011,0.930847,-8.147158,8.120827,-9.978281,9.758052,-7.964910,-5.189704,-7.827691,-1.178833,7.101547,4.907808,7.448891,5.635354,5.751705,7.089585,5.260059,-2.275174,-6.474429,-7.446290,-5.849580,-3.897310,9.618734,-0.343478,-7.168561,-8.149003,4.705626,0.351087,-1.774705,-9.373586,-8.926114,9.388341,-7.606021,9.848389,7.994414,-5.058164,7.142712,-2.376887,7.128902,7.981967,4.958819,-0.181776,1.965641,6.943579,-3.450545,-5.021916,-9.528110,-7.401659,9.022231,5.757200,7.317593,6.613597,-8.206838,0.879092,-6.817474,-8.497942,-9.501729,-4.938790,-2.666879,-4.780181,8.191641,5.281925,-4.955152,8.591879,-0.596095,-2.052438,-1.488475,-7.132293,5.180663,-6.776107,-8.785571,-2.321950,7.564863,9.769244,-6.359473,-4.232347,-0.194955,1.946684,9.001781,-9.614222,9.038525,-9.398921,-3.193787,4.626226,-2.699657,4.345955,-0.413976,-3.579914,-9.686381,4.033938,5.207398,9.630102,7.055815,-0.314504,2.035915,-9.354849,2.780162,-6.602903,-3.841705,2.414271,5.215995,6.269383,-5.171317,-9.853509,3.956758,-5.276216,7.422700,-3.018006,-1.397394,-9.045148,-6.055022,4.724124,7.868422,1.537533,3.039407,-5.432051,-9.389099,-5.968381,5.610273,1.340928,-4.564941,3.863500,4.141695,-8.222505,-1.217215,1.569828,-1.886759,-5.238378,-6.865045,1.251543,0.512165,6.583872,6.360828,-9.126902,-5.769750,-8.056949,6.454591,-3.078068,9.903416,6.457558,6.133988,-8.230240,2.060293,9.163207,9.972409,9.857061,1.024364,-8.895373,-6.933854,8.537423,-5.754790,9.225996,-5.334120,2.818726,-1.208603,7.917787,7.652908,3.882955,9.045612,0.277569,1.062554,6.763555,3.653919,-8.109349,-7.898872,-9.441901,5.499299,6.365736,4.677966,2.704073,5.138100,-3.241622,8.239196,9.966462,-4.693090,6.266526,8.041081,-8.948968,-6.611044,-1.753995,0.415946,3.137559,-7.861159,-0.198695,4.945722,6.283775,-1.486550,-4.708722,-4.838117,-9.456335,-7.848870,-1.257247,-0.896668,-8.443178,0.343324,-8.253553,9.657218,0.416829,-1.551761,1.711769,-1.089451,-1.629837,-7.627416,-7.905016,-3.179529,-3.015942,-8.703070,-3.877443,8.167404,0.021512,6.286733,8.813592,4.139872,-3.613552,-6.357485,-5.212401,-0.408530,-5.151467,1.345745,3.417406,0.730732,-2.391750,6.814967,2.228840,8.625436,8.531803,-1.291718,2.782270,-1.278843,2.501745,0.959612,3.210035,-4.211958,6.395647,-5.493947,2.899116,-2.899839,9.021167,-6.261401,-7.730878,3.604778,-3.465647,6.100302,0.805105,7.563019,-0.257430,-5.273558,-4.088363,5.163021,-2.611045,2.933473,-9.878435], dtype = "float32")#candidate|2822|(400,)|const|float32
call_2821 = relay.TupleGetItem(func_846_call(relay.reshape(const_2822.astype('float32'), [4, 10, 10])), 0)
call_2823 = relay.TupleGetItem(func_848_call(relay.reshape(const_2822.astype('float32'), [4, 10, 10])), 0)
func_2042_call = mod.get_global_var('func_2042')
func_2045_call = mutated_mod.get_global_var('func_2045')
var_2827 = relay.var("var_2827", dtype = "bool", shape = ())#candidate|2827|()|var|bool
const_2828 = relay.const([False,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,False,True], dtype = "bool")#candidate|2828|(1144,)|const|bool
call_2826 = relay.TupleGetItem(func_2042_call(relay.reshape(var_2827.astype('bool'), []), relay.reshape(const_2828.astype('bool'), [8, 13, 11]), ), 0)
call_2829 = relay.TupleGetItem(func_2045_call(relay.reshape(var_2827.astype('bool'), []), relay.reshape(const_2828.astype('bool'), [8, 13, 11]), ), 0)
output = relay.Tuple([call_2817,call_2821,const_2822,call_2826,var_2827,const_2828,])
output2 = relay.Tuple([call_2818,call_2823,const_2822,call_2829,var_2827,const_2828,])
func_2832 = relay.Function([var_2827,], output)
mod['func_2832'] = func_2832
mod = relay.transform.InferType()(mod)
var_2833 = relay.var("var_2833", dtype = "bool", shape = ())#candidate|2833|()|var|bool
output = func_2832(var_2833)
func_2834 = relay.Function([var_2833], output)
mutated_mod['func_2834'] = func_2834
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1773_call = mod.get_global_var('func_1773')
func_1775_call = mutated_mod.get_global_var('func_1775')
call_2859 = func_1773_call()
call_2860 = func_1773_call()
func_1738_call = mod.get_global_var('func_1738')
func_1741_call = mutated_mod.get_global_var('func_1741')
call_2886 = relay.TupleGetItem(func_1738_call(relay.reshape(call_2859.astype('uint32'), [336,])), 4)
call_2887 = relay.TupleGetItem(func_1741_call(relay.reshape(call_2859.astype('uint32'), [336,])), 4)
output = relay.Tuple([call_2859,call_2886,])
output2 = relay.Tuple([call_2860,call_2887,])
func_2899 = relay.Function([], output)
mod['func_2899'] = func_2899
mod = relay.transform.InferType()(mod)
output = func_2899()
func_2900 = relay.Function([], output)
mutated_mod['func_2900'] = func_2900
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2360_call = mod.get_global_var('func_2360')
func_2361_call = mutated_mod.get_global_var('func_2361')
call_2906 = relay.TupleGetItem(func_2360_call(), 0)
call_2907 = relay.TupleGetItem(func_2361_call(), 0)
output = relay.Tuple([call_2906,])
output2 = relay.Tuple([call_2907,])
func_2910 = relay.Function([], output)
mod['func_2910'] = func_2910
mod = relay.transform.InferType()(mod)
output = func_2910()
func_2911 = relay.Function([], output)
mutated_mod['func_2911'] = func_2911
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_2912 = relay.TupleGetItem(func_1463_call(), 1)
call_2913 = relay.TupleGetItem(func_1465_call(), 1)
func_1773_call = mod.get_global_var('func_1773')
func_1775_call = mutated_mod.get_global_var('func_1775')
call_2914 = func_1773_call()
call_2915 = func_1773_call()
uop_2927 = relay.rsqrt(call_2912.astype('float32')) # shape=(7, 15, 14)
uop_2929 = relay.rsqrt(call_2913.astype('float32')) # shape=(7, 15, 14)
func_480_call = mod.get_global_var('func_480')
func_482_call = mutated_mod.get_global_var('func_482')
const_2933 = relay.const([[-1.565607,-5.823784,3.622828,7.428739,8.439648,8.292912,-1.671537,-0.712519,1.906130,-6.928444,9.581878,5.942045,9.654747,5.459049,-2.662014,5.688201,-0.050316,8.172335,7.212280,2.958317,5.251903,6.592542,1.704284,-4.822598,-3.244311,-9.983894,9.101899,5.009811,8.296112,-7.330256,-0.151556,-2.660237,-4.485142,-6.091943,-5.609601,-5.524191,5.779166,-4.312049,1.724854,5.447536,4.463986,2.434802,-7.746292,9.702335,7.636014,1.342813,9.264932,-4.976395,9.954852,2.900850,-5.768007,6.851405,6.114689,7.703840,-7.753028,-7.269599,-5.003283,8.500526,-9.492342,-8.789822,-0.402469,-7.231273,-8.581395,9.959558,7.634397,3.932240,-0.569290,0.905987,-6.745099,-0.536734,-8.698422,6.730852,-2.426459,9.871833,3.530542,-2.608522,0.522654,-8.089958,5.792578,-8.222566,-2.700951,1.986936,-6.773682,4.349631,7.655131,-2.976394,-7.028952,-5.928709,-4.690462,-4.342792,-3.969174,2.218772,5.796587,9.029073,-1.595287,2.416591,0.673453,6.040359,-9.678947,4.843840,5.116270,5.228199,4.415864,-8.902959,2.837977,4.912068,-5.442388,5.716099,-1.411514,-1.112076,-6.174648,-0.578862,-0.561709,-8.964619,-2.687251,-0.413945,0.073249,3.993202,-6.184205,-2.657660,-8.797643,9.203475,-7.664514,-7.305262,5.902622,5.473446,5.506121,7.238742,-8.384165,-8.994370,8.676538,-5.391921,-9.470157,3.916782,9.944023,-8.994816,-9.860876,-1.913388,-4.234132,6.043028,-3.751652,-7.608005,-3.735584,3.558164,4.590421,5.586272,6.154494,7.197336,-6.859349,-9.593839,-7.365603,6.889976,-3.954053,4.811285,6.737884,-9.705460,-0.190704,8.110765,-9.144069,3.359912,-0.837253,9.613310,-1.809527,4.692423,1.668614,-7.704842,-0.353997,-3.273163,-6.792787,4.511450,0.333892,0.348707,-3.124037,-8.638611,3.428304,-2.052944,8.160745,9.980782,-5.935944,-3.162612,-2.909493,1.559770,-0.068571,7.262025,-6.344429,-6.331044,-5.678213,4.487495,-5.443110,-9.487358,8.760432,5.563748,-0.459004,-1.639612,3.434690,-3.468705,8.948276,-4.146137,-0.121853,-6.275225,2.531105,-9.590366,-8.992833,-8.276232,3.978267,0.117776,-6.620327,6.629990,0.630804,4.712485],[-4.172325,1.549884,-8.095882,-6.902924,3.539190,7.757754,7.646516,7.349428,3.128501,8.692992,-5.340535,0.372360,9.582857,4.660300,-1.464547,-2.193829,-5.339464,-7.180484,2.876811,1.704919,-7.365130,5.008981,-0.266574,0.833336,8.249984,2.341618,6.073385,-4.323158,6.544288,-0.734958,-1.101195,1.606332,-0.635309,7.393620,-0.086761,-7.908910,2.950702,-2.615893,-3.078660,9.700549,-9.903828,4.882455,9.147450,8.209370,1.632047,-8.810791,-3.960143,8.321092,-4.832563,-6.759746,1.653944,5.857406,7.912734,8.254268,9.421193,8.694893,8.262963,-2.407363,-8.568470,3.469260,3.104387,7.000054,1.259184,-8.469582,-8.991711,-1.139324,7.108319,-7.519039,-7.774236,9.595423,4.921707,5.200342,5.528784,9.346771,4.705450,-4.837400,1.560772,-5.130022,-6.296705,-5.637091,-3.156046,-4.577228,-0.313719,-6.087949,-8.356399,-8.678784,-2.016582,-1.568937,0.819346,1.206717,0.219302,9.107027,8.363809,1.033876,-9.424000,-0.038355,7.315222,0.085375,-4.277131,-7.489962,2.070007,-7.115130,-5.980196,1.849333,-3.533981,0.817523,-0.538423,-1.390972,-7.951485,5.634612,9.109933,5.363676,4.198365,-2.010683,-4.278253,-0.140129,-6.178302,2.446878,-6.378932,-4.593800,9.054730,-0.672921,0.899863,-2.477526,-3.346152,-8.396691,4.811906,-3.130305,-2.315022,-7.162758,0.138949,-6.014765,9.468654,1.321348,5.409566,5.061843,8.840378,-5.458952,-2.887802,-8.444684,4.852474,6.581983,1.315872,9.132718,-1.040648,-1.594289,-2.965518,9.847300,9.914042,2.067060,5.235377,2.787872,-3.921607,1.668213,-2.395458,-6.964887,-4.171623,0.061761,1.909173,-7.852280,-7.621244,-7.982435,6.477104,8.980062,-1.772749,2.219668,9.495060,-0.748840,0.355128,-7.820946,5.960107,8.591976,-9.225906,4.586192,2.775552,-8.935118,1.209098,-8.303817,-0.933626,3.752115,6.480318,-1.039591,9.690246,-1.398504,-6.930320,6.203848,8.685224,-6.629035,4.484701,-8.803107,3.284690,-2.447734,6.927791,3.146275,-8.154796,-3.367033,-0.760668,-8.505505,0.897510,-2.814921,-9.776640,5.572188,-2.242301,3.958681,-7.419599,-1.621646,-9.912877,-0.776800,1.156515,-9.175317],[-8.211657,3.234947,3.108404,-9.501888,2.680279,4.331684,-2.376243,3.346042,-1.195570,-5.773454,-7.874226,-0.389690,-3.804228,-4.527121,-6.486183,9.442178,2.083016,4.020781,1.837097,8.886832,-6.832644,-3.405411,-6.778818,8.983140,-4.794091,2.424860,-5.187620,-0.517594,-2.364999,1.896208,8.218811,7.110015,5.445023,2.854845,-2.853500,6.000114,1.069220,-6.620854,-1.098662,-8.919079,9.148441,0.993920,8.079375,-7.369094,5.867028,6.083329,0.740709,6.104328,8.443488,8.710011,-9.436382,5.282245,-9.731845,7.417281,8.102747,1.159799,2.190291,0.521921,-4.318950,-1.488511,2.460056,-7.528728,-1.200680,8.714763,2.171072,3.897728,-3.767627,3.800464,-3.258802,2.240863,4.556626,7.629064,0.131653,5.736822,-7.748712,9.319169,2.680777,-6.853129,-9.675220,-3.939554,-6.090159,3.470122,-2.803086,3.624367,3.047567,-8.461941,-1.171214,3.516507,-1.894510,2.217178,-0.911205,-0.149991,9.405092,2.328845,6.919993,5.496306,0.957701,-1.062093,1.059762,8.184079,-7.590976,1.444031,2.816956,-4.347745,-2.383795,-5.392745,1.073863,-4.663417,-9.984021,-9.724798,4.628040,0.185124,-5.149332,-3.721894,-4.159022,-6.058700,-9.862096,8.408410,-4.642975,6.138207,9.621275,2.821525,7.605644,3.746189,2.120188,2.809244,4.029235,3.901204,-2.531401,-6.857091,3.533198,0.366541,-8.464880,6.230325,-3.509963,9.904925,9.643575,-5.542467,8.514685,-1.266135,8.045057,5.419029,-8.366418,-6.723968,3.808537,7.755182,7.002218,-0.457701,3.640910,-4.519047,-8.004004,-1.378718,-2.003644,-5.222294,-0.417842,-6.202369,-6.460539,7.074597,3.098471,9.674500,-3.122181,4.837670,9.907581,0.041562,-3.855825,4.039675,-6.837571,-8.167026,-0.264922,-6.635030,2.191361,5.373901,-4.938578,-1.537186,-1.589233,-3.784311,4.676877,0.687940,0.815586,4.879985,-5.491322,3.870815,-2.543907,-0.275271,-6.210247,-0.498787,4.015349,-0.228713,-6.953603,4.102496,-5.290741,8.921525,-1.123222,2.030253,1.464890,3.353467,3.496325,-0.238507,-4.350140,-8.657181,5.372431,-0.382313,-7.104773,9.623972,9.170835,-1.077915,-9.134354,7.175556,-9.345152,9.376284],[-6.418581,1.912623,8.261454,7.200975,-2.405257,-8.983424,-3.387819,7.121818,9.775605,7.818928,4.418679,5.392331,6.041037,-9.803574,5.428997,-6.061827,-6.554518,6.626980,6.446856,8.153997,-9.908758,-6.652244,-5.053956,-8.921533,-8.601032,8.872582,9.801586,6.440023,7.919013,-4.958209,9.909521,-7.489427,-7.196817,4.404759,2.345353,-6.804323,1.621482,-1.339631,-2.906013,1.409822,0.344444,-9.813090,2.308262,7.337884,-9.261882,0.697345,-0.017071,9.815848,5.944406,6.981857,-9.198445,0.180605,-8.065082,2.056843,-0.649314,1.461455,5.967249,-6.634709,0.451567,-0.513638,3.037349,-1.282884,4.467887,-6.715663,-9.542004,5.730322,9.566768,-3.563573,2.603585,-0.434158,7.825890,7.385018,-3.641529,9.668393,2.802817,2.683622,-5.877561,1.886850,2.150682,-8.497101,9.024560,-7.601305,-6.295603,-3.239702,8.017297,8.426430,-5.525544,0.975868,-3.860264,-9.869060,-6.424885,-1.955463,5.214577,5.827068,-7.861715,9.850375,9.655650,-0.847239,-8.961766,4.444732,-5.669965,-2.190773,2.801019,0.422151,5.541964,-0.791992,0.115508,-3.613485,-0.171658,7.404368,0.573197,-0.245238,5.780970,3.436475,1.926621,9.607702,2.443655,-8.419945,4.432953,2.866986,6.103955,6.561323,-3.277294,-6.399851,8.927090,0.631164,-7.580285,9.607321,3.641414,0.320013,-2.386961,-1.766956,0.022935,-0.944704,-0.984293,2.128247,5.652518,-8.182262,-0.233575,-0.850782,-4.866097,-3.612459,2.676468,-8.995337,-5.236054,9.489245,-0.785666,0.807644,-1.798122,4.616060,0.371076,4.325747,8.568857,-7.447109,-6.883796,6.495628,1.392093,9.698247,6.053024,8.594997,7.958299,-5.490948,-9.675958,3.391166,-3.665746,1.979293,6.024816,-4.796853,-3.909088,-0.615916,-8.378773,3.571360,-9.401294,-5.757374,4.539816,2.115026,1.175604,-0.420765,1.788660,-8.166129,-6.022849,6.829726,-0.404952,-9.599706,6.077860,9.165339,-1.047258,8.997064,8.202194,1.131538,8.788400,-8.762188,-2.623373,-8.481772,-2.939142,4.460962,-5.228388,0.350121,2.605033,2.285252,-0.392909,-2.127363,9.111303,9.790492,9.038510,0.787887,-6.771739,9.532651,3.338137,-8.056358],[0.383418,-6.200760,1.269201,-4.655702,-8.136295,0.583965,4.655352,8.689901,7.079291,0.955944,2.537876,8.318731,-1.190521,2.548530,-2.789860,-5.109326,0.106557,0.908941,-4.336646,6.216907,7.511801,1.268158,-5.867390,6.800951,-1.137325,5.467206,-3.280420,4.493055,8.663936,-0.082404,-8.883429,3.225309,8.470031,-3.688026,7.237500,-0.865810,-7.070831,9.246033,5.103423,-9.564996,0.488509,5.757495,-0.317358,1.323678,6.158629,6.280593,-6.336426,-8.404511,5.031902,1.123414,-5.438340,8.171138,8.317206,-7.594370,-3.909247,-3.907686,-7.553414,6.464807,-7.826218,-8.584278,-6.426704,-6.876967,2.341060,-1.037888,6.062746,4.287987,-1.127671,4.425029,2.555940,-1.135935,-1.133365,0.003896,-3.072353,-3.262443,8.199291,1.064387,-7.092196,-4.442496,-3.777886,9.351986,-8.167631,6.323218,7.140416,5.127352,-3.182423,-0.688799,-1.408981,2.509777,-9.956251,-2.858861,0.719003,0.132611,8.113439,0.001101,5.743133,2.266026,4.961710,-0.113646,1.189649,9.500905,9.674168,5.297175,2.551985,-2.287625,-7.614823,-2.157715,-6.112951,9.935339,4.793627,8.531914,3.488435,2.416065,-6.649134,-9.781182,8.850635,6.348852,0.763178,-1.936992,-3.677434,1.406537,1.792757,-4.818698,7.822484,4.447142,-7.177203,3.242421,-8.080411,-2.651262,-2.528544,-3.627342,-5.791571,-5.469066,-0.797377,-0.798049,-3.276702,0.963238,5.438197,1.843967,-8.233442,-9.244984,-7.427052,-3.643095,-5.861825,4.037120,8.040711,-0.649235,2.259155,-8.584784,9.950764,-1.317310,-8.658989,-0.038073,8.622871,-8.867180,-3.409550,-3.262220,5.736081,3.857334,8.310397,-2.304110,8.480008,-0.959762,-3.628698,-3.998412,-4.045360,5.989351,3.151431,-9.761404,7.110008,-7.886807,9.952470,-2.447504,4.968186,-9.983299,-0.105620,-1.911089,6.701158,0.928869,7.440004,-7.194076,-6.573241,-5.245358,9.486845,4.310599,9.073099,-6.928040,-2.295944,6.383732,2.649562,2.192597,0.438846,7.794894,-0.660630,-4.276843,-6.765823,7.324422,-8.682798,-6.157340,8.508749,-7.925661,5.063568,5.179172,-2.187586,-7.442645,9.594207,3.355912,0.116250,9.820890,7.513787,9.273161]], dtype = "float64")#candidate|2933|(5, 210)|const|float64
call_2932 = relay.TupleGetItem(func_480_call(relay.reshape(const_2933.astype('float64'), [15, 7, 10])), 0)
call_2934 = relay.TupleGetItem(func_482_call(relay.reshape(const_2933.astype('float64'), [15, 7, 10])), 0)
uop_2935 = relay.asinh(call_2932.astype('float64')) # shape=(15, 7, 10)
uop_2937 = relay.asinh(call_2934.astype('float64')) # shape=(15, 7, 10)
output = relay.Tuple([call_2914,uop_2927,const_2933,uop_2935,])
output2 = relay.Tuple([call_2915,uop_2929,const_2933,uop_2937,])
func_2944 = relay.Function([], output)
mod['func_2944'] = func_2944
mod = relay.transform.InferType()(mod)
output = func_2944()
func_2945 = relay.Function([], output)
mutated_mod['func_2945'] = func_2945
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2105_call = mod.get_global_var('func_2105')
func_2107_call = mutated_mod.get_global_var('func_2107')
call_2957 = relay.TupleGetItem(func_2105_call(), 0)
call_2958 = relay.TupleGetItem(func_2107_call(), 0)
func_2899_call = mod.get_global_var('func_2899')
func_2900_call = mutated_mod.get_global_var('func_2900')
call_2959 = relay.TupleGetItem(func_2899_call(), 1)
call_2960 = relay.TupleGetItem(func_2900_call(), 1)
func_1808_call = mod.get_global_var('func_1808')
func_1810_call = mutated_mod.get_global_var('func_1810')
call_2988 = relay.TupleGetItem(func_1808_call(), 0)
call_2989 = relay.TupleGetItem(func_1810_call(), 0)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_3037 = relay.TupleGetItem(func_1463_call(), 1)
call_3038 = relay.TupleGetItem(func_1465_call(), 1)
func_1563_call = mod.get_global_var('func_1563')
func_1564_call = mutated_mod.get_global_var('func_1564')
call_3056 = relay.TupleGetItem(func_1563_call(), 3)
call_3057 = relay.TupleGetItem(func_1564_call(), 3)
output = relay.Tuple([call_2957,call_2959,call_2988,call_3037,call_3056,])
output2 = relay.Tuple([call_2958,call_2960,call_2989,call_3038,call_3057,])
func_3085 = relay.Function([], output)
mod['func_3085'] = func_3085
mod = relay.transform.InferType()(mod)
output = func_3085()
func_3086 = relay.Function([], output)
mutated_mod['func_3086'] = func_3086
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3196 = relay.var("var_3196", dtype = "float64", shape = (14, 10, 4))#candidate|3196|(14, 10, 4)|var|float64
uop_3197 = relay.cos(var_3196.astype('float64')) # shape=(14, 10, 4)
output = relay.Tuple([uop_3197,])
output2 = relay.Tuple([uop_3197,])
func_3202 = relay.Function([var_3196,], output)
mod['func_3202'] = func_3202
mod = relay.transform.InferType()(mod)
var_3203 = relay.var("var_3203", dtype = "float64", shape = (14, 10, 4))#candidate|3203|(14, 10, 4)|var|float64
output = func_3202(var_3203)
func_3204 = relay.Function([var_3203], output)
mutated_mod['func_3204'] = func_3204
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2105_call = mod.get_global_var('func_2105')
func_2107_call = mutated_mod.get_global_var('func_2107')
call_3214 = relay.TupleGetItem(func_2105_call(), 0)
call_3215 = relay.TupleGetItem(func_2107_call(), 0)
output = relay.Tuple([call_3214,])
output2 = relay.Tuple([call_3215,])
func_3222 = relay.Function([], output)
mod['func_3222'] = func_3222
mod = relay.transform.InferType()(mod)
mutated_mod['func_3222'] = func_3222
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3222_call = mutated_mod.get_global_var('func_3222')
call_3223 = func_3222_call()
output = call_3223
func_3224 = relay.Function([], output)
mutated_mod['func_3224'] = func_3224
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3318 = relay.var("var_3318", dtype = "float32", shape = (12, 16, 6))#candidate|3318|(12, 16, 6)|var|float32
uop_3319 = relay.cosh(var_3318.astype('float32')) # shape=(12, 16, 6)
output = uop_3319
output2 = uop_3319
func_3325 = relay.Function([var_3318,], output)
mod['func_3325'] = func_3325
mod = relay.transform.InferType()(mod)
mutated_mod['func_3325'] = func_3325
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3326 = relay.var("var_3326", dtype = "float32", shape = (12, 16, 6))#candidate|3326|(12, 16, 6)|var|float32
func_3325_call = mutated_mod.get_global_var('func_3325')
call_3327 = func_3325_call(var_3326)
output = call_3327
func_3328 = relay.Function([var_3326], output)
mutated_mod['func_3328'] = func_3328
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1808_call = mod.get_global_var('func_1808')
func_1810_call = mutated_mod.get_global_var('func_1810')
call_3330 = relay.TupleGetItem(func_1808_call(), 0)
call_3331 = relay.TupleGetItem(func_1810_call(), 0)
func_2622_call = mod.get_global_var('func_2622')
func_2624_call = mutated_mod.get_global_var('func_2624')
const_3335 = relay.const([False,True,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,False,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,False,False,False,True,False], dtype = "bool")#candidate|3335|(550,)|const|bool
call_3334 = relay.TupleGetItem(func_2622_call(relay.reshape(const_3335.astype('bool'), [5, 10, 11])), 0)
call_3336 = relay.TupleGetItem(func_2624_call(relay.reshape(const_3335.astype('bool'), [5, 10, 11])), 0)
func_2188_call = mod.get_global_var('func_2188')
func_2190_call = mutated_mod.get_global_var('func_2190')
call_3338 = relay.TupleGetItem(func_2188_call(), 0)
call_3339 = relay.TupleGetItem(func_2190_call(), 0)
var_3344 = relay.var("var_3344", dtype = "uint32", shape = (1470,))#candidate|3344|(1470,)|var|uint32
bop_3345 = relay.floor_mod(call_3338.astype('float64'), relay.reshape(var_3344.astype('float64'), relay.shape_of(call_3338))) # shape=(1470,)
bop_3348 = relay.floor_mod(call_3339.astype('float64'), relay.reshape(var_3344.astype('float64'), relay.shape_of(call_3339))) # shape=(1470,)
bop_3366 = relay.less(const_3335.astype('bool'), relay.reshape(call_3334.astype('bool'), relay.shape_of(const_3335))) # shape=(550,)
bop_3369 = relay.less(const_3335.astype('bool'), relay.reshape(call_3336.astype('bool'), relay.shape_of(const_3335))) # shape=(550,)
func_2188_call = mod.get_global_var('func_2188')
func_2190_call = mutated_mod.get_global_var('func_2190')
call_3391 = relay.TupleGetItem(func_2188_call(), 0)
call_3392 = relay.TupleGetItem(func_2190_call(), 0)
bop_3399 = relay.power(call_3334.astype('float64'), relay.reshape(bop_3366.astype('float64'), relay.shape_of(call_3334))) # shape=(5, 10, 11)
bop_3402 = relay.power(call_3336.astype('float64'), relay.reshape(bop_3369.astype('float64'), relay.shape_of(call_3336))) # shape=(5, 10, 11)
bop_3418 = relay.bitwise_and(bop_3399.astype('int64'), relay.reshape(call_3334.astype('int64'), relay.shape_of(bop_3399))) # shape=(5, 10, 11)
bop_3421 = relay.bitwise_and(bop_3402.astype('int64'), relay.reshape(call_3336.astype('int64'), relay.shape_of(bop_3402))) # shape=(5, 10, 11)
output = relay.Tuple([call_3330,bop_3345,call_3391,bop_3418,])
output2 = relay.Tuple([call_3331,bop_3348,call_3392,bop_3421,])
func_3429 = relay.Function([var_3344,], output)
mod['func_3429'] = func_3429
mod = relay.transform.InferType()(mod)
var_3430 = relay.var("var_3430", dtype = "uint32", shape = (1470,))#candidate|3430|(1470,)|var|uint32
output = func_3429(var_3430)
func_3431 = relay.Function([var_3430], output)
mutated_mod['func_3431'] = func_3431
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2910_call = mod.get_global_var('func_2910')
func_2911_call = mutated_mod.get_global_var('func_2911')
call_3488 = relay.TupleGetItem(func_2910_call(), 0)
call_3489 = relay.TupleGetItem(func_2911_call(), 0)
func_2134_call = mod.get_global_var('func_2134')
func_2137_call = mutated_mod.get_global_var('func_2137')
const_3510 = relay.const(-3.437699, dtype = "float32")#candidate|3510|()|const|float32
var_3511 = relay.var("var_3511", dtype = "float32", shape = (48, 1))#candidate|3511|(48, 1)|var|float32
call_3509 = relay.TupleGetItem(func_2134_call(relay.reshape(const_3510.astype('float32'), []), relay.reshape(var_3511.astype('float32'), [8, 2, 3]), ), 1)
call_3512 = relay.TupleGetItem(func_2137_call(relay.reshape(const_3510.astype('float32'), []), relay.reshape(var_3511.astype('float32'), [8, 2, 3]), ), 1)
func_824_call = mod.get_global_var('func_824')
func_827_call = mutated_mod.get_global_var('func_827')
var_3516 = relay.var("var_3516", dtype = "uint32", shape = (24, 14))#candidate|3516|(24, 14)|var|uint32
call_3515 = relay.TupleGetItem(func_824_call(relay.reshape(var_3516.astype('uint32'), [3, 16, 7]), relay.reshape(var_3516.astype('uint32'), [3, 16, 7]), ), 1)
call_3517 = relay.TupleGetItem(func_827_call(relay.reshape(var_3516.astype('uint32'), [3, 16, 7]), relay.reshape(var_3516.astype('uint32'), [3, 16, 7]), ), 1)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_3524 = relay.TupleGetItem(func_1463_call(), 1)
call_3525 = relay.TupleGetItem(func_1465_call(), 1)
uop_3529 = relay.tan(call_3524.astype('float64')) # shape=(7, 15, 14)
uop_3531 = relay.tan(call_3525.astype('float64')) # shape=(7, 15, 14)
output = relay.Tuple([call_3488,call_3509,const_3510,var_3511,call_3515,var_3516,uop_3529,])
output2 = relay.Tuple([call_3489,call_3512,const_3510,var_3511,call_3517,var_3516,uop_3531,])
func_3548 = relay.Function([var_3511,var_3516,], output)
mod['func_3548'] = func_3548
mod = relay.transform.InferType()(mod)
mutated_mod['func_3548'] = func_3548
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3548_call = mutated_mod.get_global_var('func_3548')
var_3550 = relay.var("var_3550", dtype = "float32", shape = (48, 1))#candidate|3550|(48, 1)|var|float32
var_3551 = relay.var("var_3551", dtype = "uint32", shape = (24, 14))#candidate|3551|(24, 14)|var|uint32
call_3549 = func_3548_call(var_3550,var_3551,)
output = call_3549
func_3552 = relay.Function([var_3550,var_3551,], output)
mutated_mod['func_3552'] = func_3552
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_3612 = relay.TupleGetItem(func_1463_call(), 2)
call_3613 = relay.TupleGetItem(func_1465_call(), 2)
func_846_call = mod.get_global_var('func_846')
func_848_call = mutated_mod.get_global_var('func_848')
const_3645 = relay.const([[3.494235,8.657329,-4.599228,-1.827924,-0.193836,-3.769277,-1.518214,9.897909,6.349887,4.868378,6.862786,3.251303,4.011268,1.977311,7.904725,-2.292629,-0.604295,7.371152,9.074015,-1.611025,2.998851,7.742554,2.174433,4.999970,4.696790,1.350899,-1.999004,-3.084596,5.817844,7.189656,5.612266,-9.663678,8.655881,6.340389,9.625965,-2.921056,-2.569115,7.254440,8.787876,-7.392461,0.010160,2.568775,-9.604364,4.486877,8.417820,-4.114116,-1.319310,4.140222,-4.983698,1.431322,-4.296008,-8.363357,8.886416,-2.245189,-8.645564,7.720747,-9.659017,0.873353,-7.972291,1.411001,9.967019,1.547500,-2.888207,8.946995,1.512803,-7.440014,6.151803,-7.949940,-9.525860,7.350254,4.340309,2.874411,9.098241,-3.476328,7.451696,2.361601,1.566158,6.872829,4.266152,-6.194588,2.534797,-2.432401,6.035141,1.292466,-5.015125,-7.862909,-5.113177,2.719798,-0.332378,9.320543,0.126996,-0.598807,1.258785,-0.153295,-4.814663,1.084139,-7.064879,-1.716987,-2.637684,5.134685],[-5.961298,-5.898948,4.115343,-2.636586,6.332785,-3.504957,6.126155,1.248511,-9.226354,2.604675,-5.699538,-0.411692,2.426291,-6.585392,-5.046014,-8.001460,1.615143,0.103257,-8.984661,-4.959499,-2.630663,5.554653,6.344840,-7.187608,-8.324921,6.439822,5.437780,1.485319,-5.809900,-2.220509,-0.485811,-3.219482,-6.925846,-7.256073,1.089034,-6.056026,6.275610,2.815752,8.846942,-2.458748,-6.322465,-2.069860,6.852465,-9.346662,-5.257365,2.896581,1.289915,-8.399225,1.502209,-7.022510,-1.364606,-4.191161,-3.848196,-7.283407,-7.291511,-3.905550,-4.543793,-6.383940,-4.120223,-4.438482,9.865461,0.028873,0.502259,-3.300857,9.814447,0.364413,-5.724554,0.696554,-4.400957,-2.098340,2.038028,0.986165,2.331206,3.452483,-4.049500,-0.042822,0.350367,-2.597704,-0.535984,-8.786275,2.985243,6.366966,7.857022,8.074348,-2.171978,-1.912013,-2.123900,-7.438626,4.701071,5.423638,3.653809,-6.929915,-4.693967,4.654214,5.619508,-6.259093,4.821149,-8.690693,-5.657826,-5.209350],[1.986077,-0.384717,-8.659670,-3.229299,7.316747,4.068843,4.076996,7.840185,-6.619185,-7.987302,-1.384269,6.220617,-5.645586,1.855597,0.614388,-9.491995,-2.045085,-7.975064,2.193590,6.680875,-8.805695,6.966631,-8.931022,1.214418,2.497501,-2.207470,-3.719556,6.078233,-4.344886,-3.922531,5.029037,-0.273452,3.253151,-6.811406,6.228159,0.183210,2.832484,-2.757692,-2.023950,-9.385328,4.078047,6.912158,-4.670092,1.284800,0.572559,-8.329107,-2.462074,5.187418,0.895806,-4.115418,6.478925,6.236644,-8.456813,-1.596898,6.607661,-2.346036,5.216138,5.367742,-8.268198,-4.235106,-2.645516,-4.169925,-7.957924,-0.518832,-9.760700,-6.370306,3.790603,-7.628092,0.375807,-1.325083,1.929879,-2.296841,-0.990024,0.234190,-7.696936,3.542800,-5.277714,5.606619,2.980090,6.404562,-0.391584,7.403166,8.441392,8.160658,-0.331606,7.746684,-3.697755,-1.013663,0.909100,6.835850,-2.480626,-0.816779,7.034164,3.030124,-9.817500,-7.760052,-0.393431,-1.799306,9.035194,4.440170],[0.781271,3.172402,-3.366626,-8.292030,5.436379,1.808607,-0.436965,6.850478,3.447782,-3.077889,1.906879,-7.707168,-3.237508,8.303991,-1.569392,1.273290,6.087687,8.902402,3.506928,-1.767230,4.952560,-9.992396,4.040784,9.906876,-9.143390,-6.211412,-7.808142,5.797212,2.502399,-5.186398,7.728544,9.236259,6.644089,-7.270864,3.186885,8.834939,-4.907972,-9.297990,6.826910,-2.158592,-9.288393,2.181726,1.428922,0.874261,7.498798,-3.947470,-8.658982,-4.004192,-6.751918,-8.740944,0.441336,3.565238,2.181429,4.581713,9.278619,-3.418945,5.038406,2.039962,-1.911808,8.839696,-5.963965,9.825910,-0.057244,-3.098333,-5.778409,-5.827856,9.680324,-1.482646,5.811290,6.702507,2.960138,-4.179865,-9.989797,-1.871564,5.904359,-2.710434,6.329881,-3.795976,1.638467,6.040651,1.850338,4.374566,9.321729,0.745054,-5.162020,9.487076,-7.895843,-2.999581,8.897798,8.245164,-4.682352,4.904969,0.478736,4.083499,-0.698809,4.391478,-3.457653,-1.330778,-5.655997,0.428716]], dtype = "float32")#candidate|3645|(4, 100)|const|float32
call_3644 = relay.TupleGetItem(func_846_call(relay.reshape(const_3645.astype('float32'), [4, 10, 10])), 0)
call_3646 = relay.TupleGetItem(func_848_call(relay.reshape(const_3645.astype('float32'), [4, 10, 10])), 0)
output = relay.Tuple([call_3612,call_3644,const_3645,])
output2 = relay.Tuple([call_3613,call_3646,const_3645,])
func_3651 = relay.Function([], output)
mod['func_3651'] = func_3651
mod = relay.transform.InferType()(mod)
output = func_3651()
func_3652 = relay.Function([], output)
mutated_mod['func_3652'] = func_3652
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2815_call = mod.get_global_var('func_2815')
func_2816_call = mutated_mod.get_global_var('func_2816')
call_3675 = relay.TupleGetItem(func_2815_call(), 0)
call_3676 = relay.TupleGetItem(func_2816_call(), 0)
output = relay.Tuple([call_3675,])
output2 = relay.Tuple([call_3676,])
func_3678 = relay.Function([], output)
mod['func_3678'] = func_3678
mod = relay.transform.InferType()(mod)
output = func_3678()
func_3679 = relay.Function([], output)
mutated_mod['func_3679'] = func_3679
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3651_call = mod.get_global_var('func_3651')
func_3652_call = mutated_mod.get_global_var('func_3652')
call_3682 = relay.TupleGetItem(func_3651_call(), 2)
call_3683 = relay.TupleGetItem(func_3652_call(), 2)
var_3684 = relay.var("var_3684", dtype = "float32", shape = (4, 100))#candidate|3684|(4, 100)|var|float32
bop_3685 = relay.minimum(call_3682.astype('uint64'), relay.reshape(var_3684.astype('uint64'), relay.shape_of(call_3682))) # shape=(4, 100)
bop_3688 = relay.minimum(call_3683.astype('uint64'), relay.reshape(var_3684.astype('uint64'), relay.shape_of(call_3683))) # shape=(4, 100)
uop_3689 = relay.rsqrt(call_3682.astype('float64')) # shape=(4, 100)
uop_3691 = relay.rsqrt(call_3683.astype('float64')) # shape=(4, 100)
func_2042_call = mod.get_global_var('func_2042')
func_2045_call = mutated_mod.get_global_var('func_2045')
const_3697 = relay.const(True, dtype = "bool")#candidate|3697|()|const|bool
const_3698 = relay.const([[True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,False,True,False,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,True,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,False]], dtype = "bool")#candidate|3698|(1, 1144)|const|bool
call_3696 = relay.TupleGetItem(func_2042_call(relay.reshape(const_3697.astype('bool'), []), relay.reshape(const_3698.astype('bool'), [8, 13, 11]), ), 0)
call_3699 = relay.TupleGetItem(func_2045_call(relay.reshape(const_3697.astype('bool'), []), relay.reshape(const_3698.astype('bool'), [8, 13, 11]), ), 0)
uop_3706 = relay.log10(call_3682.astype('float64')) # shape=(4, 100)
uop_3708 = relay.log10(call_3683.astype('float64')) # shape=(4, 100)
bop_3715 = relay.maximum(uop_3689.astype('uint16'), relay.reshape(bop_3685.astype('uint16'), relay.shape_of(uop_3689))) # shape=(4, 100)
bop_3718 = relay.maximum(uop_3691.astype('uint16'), relay.reshape(bop_3688.astype('uint16'), relay.shape_of(uop_3691))) # shape=(4, 100)
func_1908_call = mod.get_global_var('func_1908')
func_1911_call = mutated_mod.get_global_var('func_1911')
var_3728 = relay.var("var_3728", dtype = "bool", shape = (336,))#candidate|3728|(336,)|var|bool
var_3729 = relay.var("var_3729", dtype = "float32", shape = (360,))#candidate|3729|(360,)|var|float32
call_3727 = relay.TupleGetItem(func_1908_call(relay.reshape(var_3728.astype('bool'), [3, 16, 7]), relay.reshape(var_3729.astype('float32'), [360,]), ), 5)
call_3730 = relay.TupleGetItem(func_1911_call(relay.reshape(var_3728.astype('bool'), [3, 16, 7]), relay.reshape(var_3729.astype('float32'), [360,]), ), 5)
var_3736 = relay.var("var_3736", dtype = "uint64", shape = (4, 100))#candidate|3736|(4, 100)|var|uint64
bop_3737 = relay.equal(bop_3685.astype('bool'), relay.reshape(var_3736.astype('bool'), relay.shape_of(bop_3685))) # shape=(4, 100)
bop_3740 = relay.equal(bop_3688.astype('bool'), relay.reshape(var_3736.astype('bool'), relay.shape_of(bop_3688))) # shape=(4, 100)
output = relay.Tuple([call_3696,const_3697,const_3698,uop_3706,bop_3715,call_3727,var_3728,var_3729,bop_3737,])
output2 = relay.Tuple([call_3699,const_3697,const_3698,uop_3708,bop_3718,call_3730,var_3728,var_3729,bop_3740,])
func_3742 = relay.Function([var_3684,var_3728,var_3729,var_3736,], output)
mod['func_3742'] = func_3742
mod = relay.transform.InferType()(mod)
var_3743 = relay.var("var_3743", dtype = "float32", shape = (4, 100))#candidate|3743|(4, 100)|var|float32
var_3744 = relay.var("var_3744", dtype = "bool", shape = (336,))#candidate|3744|(336,)|var|bool
var_3745 = relay.var("var_3745", dtype = "float32", shape = (360,))#candidate|3745|(360,)|var|float32
var_3746 = relay.var("var_3746", dtype = "uint64", shape = (4, 100))#candidate|3746|(4, 100)|var|uint64
output = func_3742(var_3743,var_3744,var_3745,var_3746,)
func_3747 = relay.Function([var_3743,var_3744,var_3745,var_3746,], output)
mutated_mod['func_3747'] = func_3747
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1773_call = mod.get_global_var('func_1773')
func_1775_call = mutated_mod.get_global_var('func_1775')
call_3757 = func_1773_call()
call_3758 = func_1773_call()
func_1908_call = mod.get_global_var('func_1908')
func_1911_call = mutated_mod.get_global_var('func_1911')
var_3762 = relay.var("var_3762", dtype = "float32", shape = (360,))#candidate|3762|(360,)|var|float32
call_3761 = relay.TupleGetItem(func_1908_call(relay.reshape(call_3757.astype('bool'), [3, 16, 7]), relay.reshape(var_3762.astype('float32'), [360,]), ), 1)
call_3763 = relay.TupleGetItem(func_1911_call(relay.reshape(call_3757.astype('bool'), [3, 16, 7]), relay.reshape(var_3762.astype('float32'), [360,]), ), 1)
func_2261_call = mod.get_global_var('func_2261')
func_2263_call = mutated_mod.get_global_var('func_2263')
call_3768 = func_2261_call()
call_3769 = func_2261_call()
func_1563_call = mod.get_global_var('func_1563')
func_1564_call = mutated_mod.get_global_var('func_1564')
call_3782 = relay.TupleGetItem(func_1563_call(), 2)
call_3783 = relay.TupleGetItem(func_1564_call(), 2)
func_2815_call = mod.get_global_var('func_2815')
func_2816_call = mutated_mod.get_global_var('func_2816')
call_3796 = relay.TupleGetItem(func_2815_call(), 0)
call_3797 = relay.TupleGetItem(func_2816_call(), 0)
output = relay.Tuple([call_3757,call_3761,var_3762,call_3768,call_3782,call_3796,])
output2 = relay.Tuple([call_3758,call_3763,var_3762,call_3769,call_3783,call_3797,])
func_3804 = relay.Function([var_3762,], output)
mod['func_3804'] = func_3804
mod = relay.transform.InferType()(mod)
mutated_mod['func_3804'] = func_3804
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3805 = relay.var("var_3805", dtype = "float32", shape = (360,))#candidate|3805|(360,)|var|float32
func_3804_call = mutated_mod.get_global_var('func_3804')
call_3806 = func_3804_call(var_3805)
output = call_3806
func_3807 = relay.Function([var_3805], output)
mutated_mod['func_3807'] = func_3807
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3678_call = mod.get_global_var('func_3678')
func_3679_call = mutated_mod.get_global_var('func_3679')
call_3874 = relay.TupleGetItem(func_3678_call(), 0)
call_3875 = relay.TupleGetItem(func_3679_call(), 0)
func_2042_call = mod.get_global_var('func_2042')
func_2045_call = mutated_mod.get_global_var('func_2045')
const_3880 = relay.const(True, dtype = "bool")#candidate|3880|()|const|bool
var_3881 = relay.var("var_3881", dtype = "bool", shape = (1144,))#candidate|3881|(1144,)|var|bool
call_3879 = relay.TupleGetItem(func_2042_call(relay.reshape(const_3880.astype('bool'), []), relay.reshape(var_3881.astype('bool'), [8, 13, 11]), ), 0)
call_3882 = relay.TupleGetItem(func_2045_call(relay.reshape(const_3880.astype('bool'), []), relay.reshape(var_3881.astype('bool'), [8, 13, 11]), ), 0)
func_1298_call = mod.get_global_var('func_1298')
func_1300_call = mutated_mod.get_global_var('func_1300')
call_3887 = func_1298_call()
call_3888 = func_1298_call()
bop_3896 = relay.less(const_3880.astype('bool'), call_3874.astype('bool')) # shape=(12, 5, 15)
bop_3899 = relay.less(const_3880.astype('bool'), call_3875.astype('bool')) # shape=(12, 5, 15)
output = relay.Tuple([call_3879,var_3881,call_3887,bop_3896,])
output2 = relay.Tuple([call_3882,var_3881,call_3888,bop_3899,])
func_3924 = relay.Function([var_3881,], output)
mod['func_3924'] = func_3924
mod = relay.transform.InferType()(mod)
var_3925 = relay.var("var_3925", dtype = "bool", shape = (1144,))#candidate|3925|(1144,)|var|bool
output = func_3924(var_3925)
func_3926 = relay.Function([var_3925], output)
mutated_mod['func_3926'] = func_3926
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3085_call = mod.get_global_var('func_3085')
func_3086_call = mutated_mod.get_global_var('func_3086')
call_3971 = relay.TupleGetItem(func_3085_call(), 4)
call_3972 = relay.TupleGetItem(func_3086_call(), 4)
func_2622_call = mod.get_global_var('func_2622')
func_2624_call = mutated_mod.get_global_var('func_2624')
var_3978 = relay.var("var_3978", dtype = "bool", shape = (1, 550))#candidate|3978|(1, 550)|var|bool
call_3977 = relay.TupleGetItem(func_2622_call(relay.reshape(var_3978.astype('bool'), [5, 10, 11])), 2)
call_3979 = relay.TupleGetItem(func_2624_call(relay.reshape(var_3978.astype('bool'), [5, 10, 11])), 2)
var_3981 = relay.var("var_3981", dtype = "bool", shape = (12, 550))#candidate|3981|(12, 550)|var|bool
bop_3982 = relay.bitwise_xor(var_3978.astype('uint64'), var_3981.astype('uint64')) # shape=(12, 550)
func_1773_call = mod.get_global_var('func_1773')
func_1775_call = mutated_mod.get_global_var('func_1775')
call_3986 = func_1773_call()
call_3987 = func_1773_call()
output = relay.Tuple([call_3971,call_3977,bop_3982,call_3986,])
output2 = relay.Tuple([call_3972,call_3979,bop_3982,call_3987,])
func_3991 = relay.Function([var_3978,var_3981,], output)
mod['func_3991'] = func_3991
mod = relay.transform.InferType()(mod)
var_3992 = relay.var("var_3992", dtype = "bool", shape = (1, 550))#candidate|3992|(1, 550)|var|bool
var_3993 = relay.var("var_3993", dtype = "bool", shape = (12, 550))#candidate|3993|(12, 550)|var|bool
output = func_3991(var_3992,var_3993,)
func_3994 = relay.Function([var_3992,var_3993,], output)
mutated_mod['func_3994'] = func_3994
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4128 = relay.var("var_4128", dtype = "uint64", shape = (13, 9, 6))#candidate|4128|(13, 9, 6)|var|uint64
var_4129 = relay.var("var_4129", dtype = "uint64", shape = (13, 9, 6))#candidate|4129|(13, 9, 6)|var|uint64
bop_4130 = relay.right_shift(var_4128.astype('uint64'), relay.reshape(var_4129.astype('uint64'), relay.shape_of(var_4128))) # shape=(13, 9, 6)
uop_4133 = relay.asinh(bop_4130.astype('float32')) # shape=(13, 9, 6)
func_2105_call = mod.get_global_var('func_2105')
func_2107_call = mutated_mod.get_global_var('func_2107')
call_4138 = relay.TupleGetItem(func_2105_call(), 0)
call_4139 = relay.TupleGetItem(func_2107_call(), 0)
func_2188_call = mod.get_global_var('func_2188')
func_2190_call = mutated_mod.get_global_var('func_2190')
call_4146 = relay.TupleGetItem(func_2188_call(), 0)
call_4147 = relay.TupleGetItem(func_2190_call(), 0)
func_2203_call = mod.get_global_var('func_2203')
func_2207_call = mutated_mod.get_global_var('func_2207')
var_4152 = relay.var("var_4152", dtype = "int32", shape = (1056,))#candidate|4152|(1056,)|var|int32
call_4151 = relay.TupleGetItem(func_2203_call(relay.reshape(var_4152.astype('int32'), [11, 16, 6]), relay.reshape(var_4152.astype('int32'), [11, 16, 6]), ), 1)
call_4153 = relay.TupleGetItem(func_2207_call(relay.reshape(var_4152.astype('int32'), [11, 16, 6]), relay.reshape(var_4152.astype('int32'), [11, 16, 6]), ), 1)
output = relay.Tuple([uop_4133,call_4138,call_4146,call_4151,var_4152,])
output2 = relay.Tuple([uop_4133,call_4139,call_4147,call_4153,var_4152,])
func_4155 = relay.Function([var_4128,var_4129,var_4152,], output)
mod['func_4155'] = func_4155
mod = relay.transform.InferType()(mod)
var_4156 = relay.var("var_4156", dtype = "uint64", shape = (13, 9, 6))#candidate|4156|(13, 9, 6)|var|uint64
var_4157 = relay.var("var_4157", dtype = "uint64", shape = (13, 9, 6))#candidate|4157|(13, 9, 6)|var|uint64
var_4158 = relay.var("var_4158", dtype = "int32", shape = (1056,))#candidate|4158|(1056,)|var|int32
output = func_4155(var_4156,var_4157,var_4158,)
func_4159 = relay.Function([var_4156,var_4157,var_4158,], output)
mutated_mod['func_4159'] = func_4159
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2477_call = mod.get_global_var('func_2477')
func_2479_call = mutated_mod.get_global_var('func_2479')
call_4191 = relay.TupleGetItem(func_2477_call(), 2)
call_4192 = relay.TupleGetItem(func_2479_call(), 2)
func_22_call = mod.get_global_var('func_22')
func_26_call = mutated_mod.get_global_var('func_26')
var_4196 = relay.var("var_4196", dtype = "float32", shape = (36,))#candidate|4196|(36,)|var|float32
var_4197 = relay.var("var_4197", dtype = "float32", shape = (360,))#candidate|4197|(360,)|var|float32
call_4195 = relay.TupleGetItem(func_22_call(relay.reshape(var_4196.astype('float32'), [1, 6, 6]), relay.reshape(var_4197.astype('float32'), [10, 6, 6]), ), 0)
call_4198 = relay.TupleGetItem(func_26_call(relay.reshape(var_4196.astype('float32'), [1, 6, 6]), relay.reshape(var_4197.astype('float32'), [10, 6, 6]), ), 0)
func_2477_call = mod.get_global_var('func_2477')
func_2479_call = mutated_mod.get_global_var('func_2479')
call_4209 = relay.TupleGetItem(func_2477_call(), 2)
call_4210 = relay.TupleGetItem(func_2479_call(), 2)
output = relay.Tuple([call_4191,call_4195,var_4196,var_4197,call_4209,])
output2 = relay.Tuple([call_4192,call_4198,var_4196,var_4197,call_4210,])
func_4219 = relay.Function([var_4196,var_4197,], output)
mod['func_4219'] = func_4219
mod = relay.transform.InferType()(mod)
mutated_mod['func_4219'] = func_4219
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4219_call = mutated_mod.get_global_var('func_4219')
var_4221 = relay.var("var_4221", dtype = "float32", shape = (36,))#candidate|4221|(36,)|var|float32
var_4222 = relay.var("var_4222", dtype = "float32", shape = (360,))#candidate|4222|(360,)|var|float32
call_4220 = func_4219_call(var_4221,var_4222,)
output = call_4220
func_4223 = relay.Function([var_4221,var_4222,], output)
mutated_mod['func_4223'] = func_4223
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2286_call = mod.get_global_var('func_2286')
func_2288_call = mutated_mod.get_global_var('func_2288')
call_4228 = relay.TupleGetItem(func_2286_call(), 0)
call_4229 = relay.TupleGetItem(func_2288_call(), 0)
output = relay.Tuple([call_4228,])
output2 = relay.Tuple([call_4229,])
func_4242 = relay.Function([], output)
mod['func_4242'] = func_4242
mod = relay.transform.InferType()(mod)
output = func_4242()
func_4243 = relay.Function([], output)
mutated_mod['func_4243'] = func_4243
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2105_call = mod.get_global_var('func_2105')
func_2107_call = mutated_mod.get_global_var('func_2107')
call_4246 = relay.TupleGetItem(func_2105_call(), 0)
call_4247 = relay.TupleGetItem(func_2107_call(), 0)
func_3548_call = mod.get_global_var('func_3548')
func_3552_call = mutated_mod.get_global_var('func_3552')
var_4264 = relay.var("var_4264", dtype = "float32", shape = (48,))#candidate|4264|(48,)|var|float32
call_4263 = relay.TupleGetItem(func_3548_call(relay.reshape(var_4264.astype('float32'), [48, 1]), relay.reshape(call_4246.astype('uint32'), [24, 14]), ), 2)
call_4265 = relay.TupleGetItem(func_3552_call(relay.reshape(var_4264.astype('float32'), [48, 1]), relay.reshape(call_4246.astype('uint32'), [24, 14]), ), 2)
output = relay.Tuple([call_4246,call_4263,var_4264,])
output2 = relay.Tuple([call_4247,call_4265,var_4264,])
func_4274 = relay.Function([var_4264,], output)
mod['func_4274'] = func_4274
mod = relay.transform.InferType()(mod)
mutated_mod['func_4274'] = func_4274
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4275 = relay.var("var_4275", dtype = "float32", shape = (48,))#candidate|4275|(48,)|var|float32
func_4274_call = mutated_mod.get_global_var('func_4274')
call_4276 = func_4274_call(var_4275)
output = call_4276
func_4277 = relay.Function([var_4275], output)
mutated_mod['func_4277'] = func_4277
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_4323 = relay.TupleGetItem(func_1463_call(), 2)
call_4324 = relay.TupleGetItem(func_1465_call(), 2)
output = relay.Tuple([call_4323,])
output2 = relay.Tuple([call_4324,])
func_4330 = relay.Function([], output)
mod['func_4330'] = func_4330
mod = relay.transform.InferType()(mod)
mutated_mod['func_4330'] = func_4330
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4330_call = mutated_mod.get_global_var('func_4330')
call_4331 = func_4330_call()
output = call_4331
func_4332 = relay.Function([], output)
mutated_mod['func_4332'] = func_4332
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1773_call = mod.get_global_var('func_1773')
func_1775_call = mutated_mod.get_global_var('func_1775')
call_4344 = func_1773_call()
call_4345 = func_1773_call()
output = relay.Tuple([call_4344,])
output2 = relay.Tuple([call_4345,])
func_4354 = relay.Function([], output)
mod['func_4354'] = func_4354
mod = relay.transform.InferType()(mod)
mutated_mod['func_4354'] = func_4354
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4354_call = mutated_mod.get_global_var('func_4354')
call_4355 = func_4354_call()
output = call_4355
func_4356 = relay.Function([], output)
mutated_mod['func_4356'] = func_4356
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4416 = relay.const([[[3.040280,-2.802981,-5.826985,-8.748856,-4.059662,-7.331952],[-3.120942,-8.585334,8.876907,7.103408,8.374344,5.485310],[1.653229,-1.810574,-9.758637,-1.661122,6.551628,-5.271034],[-8.079194,7.177022,0.604805,3.693864,-0.637859,0.316027],[-2.367268,-8.737385,-2.885747,1.761982,0.139568,6.823551],[5.656641,-8.380339,-2.695998,6.707680,1.426852,9.412515],[-4.938060,-6.373686,7.084530,-2.740331,-3.177325,4.950244],[-0.107127,-6.324447,-1.342310,6.511875,-9.272429,-4.064735],[-9.361391,0.040948,-5.355137,3.151672,6.755845,4.623961],[2.643223,-2.470429,-0.639245,-5.693622,-8.875051,8.049286],[-5.369677,6.081790,-8.326515,0.372245,4.386986,-8.192585],[6.640334,-0.405346,4.620945,5.933857,-5.723994,2.327552],[6.287530,1.317834,-5.458949,-3.619667,-7.889157,0.891739],[5.976109,6.532465,4.227641,-2.111668,1.491765,5.579887]],[[6.978431,8.911071,-2.219960,-2.330031,-7.792947,-1.273753],[-4.813444,5.875051,-4.940260,3.125961,9.407474,-1.529054],[-3.185540,-5.158532,8.682853,7.060833,-4.413215,-0.309427],[4.695163,5.140803,5.872965,-2.818986,-2.045906,-9.158146],[3.571660,6.425206,-3.761159,9.837254,-4.898750,8.242790],[-2.587931,-9.346888,7.922233,2.882223,-7.279235,2.084830],[-6.385042,8.703308,9.376831,1.085666,-3.085507,-1.639451],[-6.023386,0.305254,6.581470,4.934321,5.292387,-7.659262],[-8.359662,4.123991,-5.789955,-1.862756,0.028512,-3.867837],[0.758460,2.800240,-8.643909,8.693560,8.046190,4.685640],[2.208413,-8.519663,1.371213,8.592473,3.918683,-5.045130],[5.211465,-5.298091,-4.079211,-9.843924,3.227729,0.288562],[6.834897,-9.798798,-7.200872,2.103393,-9.795210,-5.653742],[-2.883398,-8.420976,3.979416,-1.579110,7.679907,4.791898]],[[3.594526,-3.255852,6.558836,-3.088486,-5.656961,6.389167],[-4.344078,-4.017217,6.677528,-7.534455,-7.805876,2.809006],[3.350489,4.262957,-4.149333,3.224215,-6.145760,-3.416020],[1.888316,-0.263955,-6.984072,-7.001156,-2.179075,0.494658],[-0.044159,4.886505,-1.206674,-7.433937,-7.214576,1.433618],[-2.737523,-5.039852,-8.641482,-7.580038,1.056468,6.173314],[-3.834005,6.385066,-9.794888,-0.100202,-1.772132,0.330012],[-0.953410,5.838372,3.929944,-1.307316,7.157638,-5.742775],[7.023897,7.867300,0.044650,-5.320699,9.861008,-6.087797],[9.800282,-3.734418,5.234559,-9.338930,7.301418,-4.968770],[-2.448681,-9.658303,-4.589706,6.567503,3.597824,-4.361912],[2.587930,-8.103970,-1.730489,-3.506187,-1.166011,-2.109836],[5.138854,4.092327,-4.028277,8.590361,-4.485674,-5.098433],[2.229252,0.553674,-7.941243,0.825127,-5.367722,-6.152086]],[[2.898660,-6.204774,2.989350,4.718439,-9.868742,0.466778],[-6.035956,0.845894,-6.556234,7.836696,-3.601484,-2.425397],[7.729573,-0.653135,-9.137851,-4.365993,-1.075286,5.601697],[8.484434,-5.294955,1.352196,-8.836236,-5.677317,6.398045],[6.145690,-1.305097,4.132689,1.642940,4.178124,-8.800269],[-5.515817,3.750278,-6.338245,7.514789,5.690794,3.896892],[5.649525,-0.365525,0.848211,8.336305,5.671353,-2.244654],[-8.852072,5.018286,-8.384557,2.725976,-9.536071,9.050339],[0.042369,5.594785,-4.241296,-1.578520,-0.811073,5.021305],[-1.204760,3.893527,1.190545,-7.128286,4.242663,4.413382],[1.593753,-7.267018,8.507816,-8.859432,-6.416880,5.348445],[-4.254142,8.891884,-3.552634,4.299599,6.909382,-0.308958],[-0.217815,-1.966245,-0.930447,1.276402,2.901358,-2.830932],[3.841339,1.846601,-1.337221,-9.853467,-3.591832,1.981157]],[[0.509354,4.200102,8.422462,9.031662,-4.361342,3.898688],[0.490115,4.902783,0.274557,9.341586,-7.118589,-8.205346],[3.968094,-1.944629,-7.007670,-9.703753,-8.290935,-3.334116],[-3.589811,2.685265,-6.677268,5.825331,-9.009654,-1.981594],[-0.127520,-4.071082,-7.478050,5.519422,-4.278395,-3.697790],[-1.073144,-8.649871,-4.383536,-2.066579,-7.165822,-2.805691],[5.741165,-6.105051,-7.331599,2.816742,-2.285003,9.620346],[-1.212949,-0.814328,-0.891861,-9.729900,0.561415,9.609002],[5.553700,-8.577699,-7.996650,-2.781466,8.223854,5.404769],[0.181281,-0.783214,-9.709284,0.855073,6.732190,8.811511],[-9.334036,-0.959865,-5.848742,3.458388,2.740162,5.920085],[-7.672484,8.693318,-7.344456,3.942522,2.286869,8.549726],[-0.665911,7.136098,-0.906672,8.889850,-8.779734,9.945893],[-1.185482,-7.131799,-8.797352,6.252377,-9.486938,-3.704732]],[[2.508452,-9.767253,-9.409230,-7.206726,-2.620051,-0.862918],[6.115618,5.830289,5.793500,-1.723966,-5.646097,4.627943],[6.765293,4.511113,-7.326523,-2.265359,-8.151061,-6.761177],[3.636893,1.451703,-6.315260,-0.593979,1.401932,5.576146],[-6.096252,-9.081547,9.579590,-7.172568,-6.723316,-5.657553],[6.853276,-0.914200,9.648474,-1.139641,-0.344211,5.887325],[1.895887,-3.846332,4.148026,5.627059,5.069968,-3.949287],[-6.494678,1.615551,6.282536,4.891535,6.154150,-5.405844],[-5.033698,6.935267,-4.817323,-9.830035,-4.559439,-5.908331],[-9.276465,-7.475703,-5.262423,-4.374043,7.841140,9.624759],[9.172821,5.555752,7.118575,-6.253369,9.283389,-5.987135],[-0.992548,1.545964,5.109895,-1.217733,-1.538604,9.868932],[-5.633176,8.319134,-9.385295,-2.398520,5.652929,-8.754010],[2.765228,-4.274869,-8.492587,-9.374962,6.107166,5.863802]]], dtype = "float32")#candidate|4416|(6, 14, 6)|const|float32
uop_4417 = relay.sinh(const_4416.astype('float32')) # shape=(6, 14, 6)
output = relay.Tuple([uop_4417,])
output2 = relay.Tuple([uop_4417,])
func_4419 = relay.Function([], output)
mod['func_4419'] = func_4419
mod = relay.transform.InferType()(mod)
output = func_4419()
func_4420 = relay.Function([], output)
mutated_mod['func_4420'] = func_4420
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1563_call = mod.get_global_var('func_1563')
func_1564_call = mutated_mod.get_global_var('func_1564')
call_4442 = relay.TupleGetItem(func_1563_call(), 1)
call_4443 = relay.TupleGetItem(func_1564_call(), 1)
output = relay.Tuple([call_4442,])
output2 = relay.Tuple([call_4443,])
func_4456 = relay.Function([], output)
mod['func_4456'] = func_4456
mod = relay.transform.InferType()(mod)
mutated_mod['func_4456'] = func_4456
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4456_call = mutated_mod.get_global_var('func_4456')
call_4457 = func_4456_call()
output = call_4457
func_4458 = relay.Function([], output)
mutated_mod['func_4458'] = func_4458
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4330_call = mod.get_global_var('func_4330')
func_4332_call = mutated_mod.get_global_var('func_4332')
call_4463 = relay.TupleGetItem(func_4330_call(), 0)
call_4464 = relay.TupleGetItem(func_4332_call(), 0)
output = relay.Tuple([call_4463,])
output2 = relay.Tuple([call_4464,])
func_4472 = relay.Function([], output)
mod['func_4472'] = func_4472
mod = relay.transform.InferType()(mod)
mutated_mod['func_4472'] = func_4472
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4472_call = mutated_mod.get_global_var('func_4472')
call_4473 = func_4472_call()
output = call_4473
func_4474 = relay.Function([], output)
mutated_mod['func_4474'] = func_4474
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1498_call = mod.get_global_var('func_1498')
func_1500_call = mutated_mod.get_global_var('func_1500')
call_4522 = func_1498_call()
call_4523 = func_1498_call()
output = call_4522
output2 = call_4523
func_4526 = relay.Function([], output)
mod['func_4526'] = func_4526
mod = relay.transform.InferType()(mod)
mutated_mod['func_4526'] = func_4526
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4526_call = mutated_mod.get_global_var('func_4526')
call_4527 = func_4526_call()
output = call_4527
func_4528 = relay.Function([], output)
mutated_mod['func_4528'] = func_4528
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3678_call = mod.get_global_var('func_3678')
func_3679_call = mutated_mod.get_global_var('func_3679')
call_4552 = relay.TupleGetItem(func_3678_call(), 0)
call_4553 = relay.TupleGetItem(func_3679_call(), 0)
func_1908_call = mod.get_global_var('func_1908')
func_1911_call = mutated_mod.get_global_var('func_1911')
const_4555 = relay.const([False,True,False,True,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,False], dtype = "bool")#candidate|4555|(336,)|const|bool
var_4556 = relay.var("var_4556", dtype = "float32", shape = (360,))#candidate|4556|(360,)|var|float32
call_4554 = relay.TupleGetItem(func_1908_call(relay.reshape(const_4555.astype('bool'), [3, 16, 7]), relay.reshape(var_4556.astype('float32'), [360,]), ), 8)
call_4557 = relay.TupleGetItem(func_1911_call(relay.reshape(const_4555.astype('bool'), [3, 16, 7]), relay.reshape(var_4556.astype('float32'), [360,]), ), 8)
func_4354_call = mod.get_global_var('func_4354')
func_4356_call = mutated_mod.get_global_var('func_4356')
call_4561 = relay.TupleGetItem(func_4354_call(), 0)
call_4562 = relay.TupleGetItem(func_4356_call(), 0)
output = relay.Tuple([call_4552,call_4554,const_4555,var_4556,call_4561,])
output2 = relay.Tuple([call_4553,call_4557,const_4555,var_4556,call_4562,])
func_4569 = relay.Function([var_4556,], output)
mod['func_4569'] = func_4569
mod = relay.transform.InferType()(mod)
mutated_mod['func_4569'] = func_4569
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4570 = relay.var("var_4570", dtype = "float32", shape = (360,))#candidate|4570|(360,)|var|float32
func_4569_call = mutated_mod.get_global_var('func_4569')
call_4571 = func_4569_call(var_4570)
output = call_4571
func_4572 = relay.Function([var_4570], output)
mutated_mod['func_4572'] = func_4572
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4472_call = mod.get_global_var('func_4472')
func_4474_call = mutated_mod.get_global_var('func_4474')
call_4584 = relay.TupleGetItem(func_4472_call(), 0)
call_4585 = relay.TupleGetItem(func_4474_call(), 0)
output = relay.Tuple([call_4584,])
output2 = relay.Tuple([call_4585,])
func_4592 = relay.Function([], output)
mod['func_4592'] = func_4592
mod = relay.transform.InferType()(mod)
mutated_mod['func_4592'] = func_4592
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4592_call = mutated_mod.get_global_var('func_4592')
call_4593 = func_4592_call()
output = call_4593
func_4594 = relay.Function([], output)
mutated_mod['func_4594'] = func_4594
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4354_call = mod.get_global_var('func_4354')
func_4356_call = mutated_mod.get_global_var('func_4356')
call_4605 = relay.TupleGetItem(func_4354_call(), 0)
call_4606 = relay.TupleGetItem(func_4356_call(), 0)
func_1372_call = mod.get_global_var('func_1372')
func_1379_call = mutated_mod.get_global_var('func_1379')
const_4697 = relay.const([6.748468,-2.487359,7.883388,-1.512793,-1.065444,9.520195,-2.846470,-4.535070,-4.572173,7.651584,1.967675,-2.232267,-3.325996,-2.605701,3.442622,-8.493849,-3.792423,6.362601,-5.740996,-0.929979,-4.780322,-1.920599,-0.273901,9.809582,-5.606733,-1.081881,-9.839233,3.823959,2.231716,-0.751867,6.625242,4.578952,-4.658932,6.922578,-2.504820,3.352564,-6.016984,9.182663,-5.336361,0.666092,4.771181,-5.023746,-1.432887,1.745436,8.154717,7.337162,-8.982883,-2.396240,1.235938,-9.277224,-2.414099,-3.236095,5.023592,0.417664,5.354943,-1.112798,1.540732,-6.041163,4.639107,3.342028,7.527875,7.725056,-9.870605,-9.622013,-0.203984,6.142110,-1.657969,3.385203,-8.462081,8.914999,6.194717,-9.090279,-8.693713,1.275024,-5.615410,5.173249,6.105698,-3.587949,-6.650661,3.043024,6.616229,5.876361,-7.086805,1.604384,-9.208137,-2.842702,1.104239,-7.831065,2.502247,5.639158,-1.794080,-9.699475,5.101526,6.935649,3.125544,-6.516848,-4.246750,3.343617,-2.239748,8.345231,2.836669,3.573595,-5.115179,9.280026,7.185438,-9.664971,6.872641,7.911889,0.725078,-2.027219,1.682583,8.563586,1.766989,-9.865858,0.119107,-7.201619,-6.313144,7.742175,1.389362,-9.332206,9.960715,-1.200609,5.777061,-8.406820,9.560754,-3.777499,8.201997,-4.162770,-6.219603,6.310717,-8.494332,-1.642077,7.775515,9.381621,-1.932804,9.067595,-0.777959,-6.559015,6.197208,-8.090238,-3.971158,9.329533,-1.221848,-8.835546], dtype = "float64")#candidate|4697|(144,)|const|float64
const_4698 = relay.const([7.657250,1.091377,1.438822,3.481671,-5.304347,-5.274828,9.106097,0.419060,-7.675418,-8.690761,4.656635,8.225898,3.229715,0.024066,-7.526841,3.721644,4.084032,0.798783,-8.621169,4.779857,-7.141637,-2.036302,2.137733,-8.671476,0.030780,6.059878,9.027607,-7.999562,0.519172,0.583308,-6.098665,8.199125,-3.254205,-6.250059,1.024310,0.276388,0.842612,-8.108539,4.165100,4.490537,9.209238,8.431307,1.068606,-4.903184,-9.627788,7.073175,-3.825283,-5.684940,4.328751,0.755304,1.719688,-6.609459,-1.171514,6.147354,9.830667,-3.347054,-6.494055,-3.573262,7.863123,-5.293410,-4.811129,-0.247306,-9.255454,5.633902,5.221124,3.084209,0.163000,-6.449801,-9.988122,3.043052,-1.892292,-7.052544,-0.871165,-0.583099,0.998727,0.827300,-8.679757,-6.369196,-7.519093,-4.081432,6.575467,-0.708527,-3.803632,-0.724912,8.706478,-0.055754,-8.736593,-5.763172,8.649200,-6.120076,7.060333,5.726920,-0.688796,-0.856247,6.569249,-1.126307,-2.398474,-6.090879,6.918389,5.647586,-5.622174,-4.359599,9.662480,2.543672,-6.447884,3.459932,4.544901,0.776479,0.303116,7.369670,1.637471,3.276072,-3.210999,-2.142031,-6.850197,-8.026647,6.593145,2.157560,5.438868,-3.041634,6.831872,3.166938,-2.836667,-2.197054,2.910395,-1.689862,2.259470,-9.943787,5.393647,-8.507324,7.779308,8.687964,6.318903,7.005297,8.227177,-8.269563,6.261128,-1.755131,9.635519,0.408758,-2.871666,8.230554,3.645496,9.512124,-6.500442,8.158044,1.925721,-2.837061,8.146009,6.666217,4.827179,0.845281,-7.875472,-9.495581,-6.193332,-4.538868,-5.858727,7.044447,4.087239,-7.355162,-5.620468,2.306390,-6.465897,-3.953420,6.522197,9.225979,-1.535937,-6.018555,-9.586903,-0.117722,-4.331860,2.604726,-8.722081,2.402468,0.444076,8.547805,6.698663,0.633599,-8.361101,4.468133,-1.140906,9.578144,-3.822515,3.187197,-2.657344,9.390407,-0.380596,7.486460,7.956491,-4.722703,2.264622,-2.495446,7.845746,-5.145796,-4.505279,6.267248,-8.323543,5.955060,-6.338022,4.251014,-9.643584,-1.393010,8.498752,4.686722,-0.604702,-0.738093,1.092713,-9.080633,-5.428356,-2.808248,-4.174341,0.027415,-8.428117,7.381907,3.127599,-9.478155,-0.282463,-4.564086,-4.704481,-9.939212,-7.932025,-3.643173,-9.805157,-9.680426,-0.682071,2.499321,-3.320872,1.121417,4.983629,-5.825736,-6.725376,-6.553597,2.408603,-9.136059,-8.462003,-8.486106,0.246465,-4.442599,9.697585,6.100627,4.516395,-7.819064,6.396847,5.929458,7.225186,-6.157178,-2.658671,-2.811124,2.878738,2.453614,0.666748,-9.320792,5.799441,-2.125584,6.541709,-7.817547,-2.244557,7.690005,-1.895475,-0.689690,-6.493327,4.638267,4.864125,-0.366919,9.959992,-0.631130,4.200426,3.440715,9.828367,6.055604,2.012113,-0.227749,-3.802895,-0.806062,-6.074394,-3.627238,7.055555,7.941954,6.011513,1.599840,5.645205,-3.818198,0.053026,3.937989,0.633518,7.002287,-6.564858,1.742181,5.420974,-7.078737,-9.935289,-6.905822,-6.506980,0.469951,1.119521,-0.734961,-1.598457,0.817522,6.118431,1.643241,0.812342,4.529570,-3.968144,2.704106,-3.124426,0.253722,-1.016618,-6.604610,2.669117,1.741097,6.872105,7.562390,-0.687169,6.440132,-4.949629,-3.371675,7.987343,2.786150,-5.721806,-3.401099,-6.546774,-3.864387,2.851536,-1.868109,-1.933546,-4.987040,7.149302,6.203454,-4.414564,6.994019,7.572421,3.769465,-3.085643,-9.959943,8.027137,5.017531,-6.840594,-7.617639,7.206750,-3.276834,-0.856426,1.866169,7.189904,2.515959,0.546631,-6.253437,7.371772,3.155252,-8.805327,-3.380310,-4.768096,-5.022998,9.869735,2.960802,6.121644,-0.227104,-6.958833,9.361055,4.679249,2.250338,-4.719725,3.076350,6.650908,6.816007,4.659515,0.837425,2.784368,-2.394482,6.678287,7.140181,-8.577621,-2.524221,5.866590,-4.264577,5.086023,2.319418,7.167337,7.554043,-8.982521,-7.480148,-6.491959,4.407313,4.002710,5.565448,9.632201,2.111498,-4.328925,-2.939596,-1.704555,-8.961915,4.861133,9.510958,7.199839,1.814052,1.817372,8.358571,-9.659546,8.239006,-1.228167,-1.795818,-3.849788,7.179776,4.175301,-9.718643,-8.923286,0.466871,9.784097,-0.825784,6.804958,-8.494641,-7.873214,8.243387,-4.140010,-3.033602,4.889960,7.642880,2.507273,-8.443495,-0.543422,-2.968695,-8.360241,-8.461551,-4.368971,-2.336328,1.975834,-0.935192,-5.092042,-3.832049,-2.722430,8.234091,0.738508,6.593038,-5.089886,9.713397,8.194012,3.983347,-4.747104,7.048237,3.128995,-9.564352,-1.273315,-8.663432,-3.592901,1.509704,5.226025,-5.567346,0.004912,7.192551,-4.484451,8.294599,-0.950248,0.940511,-2.074838,9.427737,-8.734168,-7.571075,-1.449330,9.257959,3.474674,-3.629548,3.480995,0.331443,-4.701806,-9.031413,-1.036052,-5.416355,6.217016,8.670449,-7.382033,9.564795,-4.097287,5.963991,-5.282201,-4.281850,-5.892443,-6.678461,4.064014,-5.831512,6.537481,-7.783564,-5.107069,-4.364280,-8.595108,-5.015415,9.603701,7.297489,3.958673,-4.365729,2.531554,-4.647623,3.943793,-3.918175,-0.029573,7.439218,6.686827,2.613325,-3.603464,1.905568,2.623706,-9.648380,8.023332,7.766377,-4.420670,-2.459195,-7.743402,2.168450,-3.896989,-0.121425,7.206859,-2.562723,-3.873590,-3.647632,8.792956,9.563366,2.399343,2.158648,-6.694352,-9.111991,3.110274,-8.427247,4.467082,6.527278,9.777924,-6.328919,9.449645,-3.190530,7.225114,4.778753,-2.360896,3.527623,-3.469895,6.352604,4.141061,9.726096,-0.051417,-4.665481,-5.168273,9.807584,-0.646312,-7.047412,-8.605831,0.200718,1.243714,5.972725,1.958389,-1.346478,4.009933,-9.464005,9.623092,3.539871,-7.822862,0.169389,-9.956135,-3.687195,-3.180783,-7.810972,7.473810,-2.045208,-4.305214,1.937817,8.649232,6.705433,1.671197,8.378262,-0.621617,-4.092574,6.319435,4.825752,2.648716,-8.040631,-4.856330,-3.120208,-7.294700,-8.006613,-4.527399,-2.170737,4.346894,4.262003,-6.974066,7.849410,8.452816,5.101770,5.811519,-1.346432,-4.653312,5.398195,-9.764309,7.848891,-1.659796,0.150716,1.129567,-8.851365,-3.733150,9.453185,5.669137,0.217490,-5.203282,3.138944,3.158195,-4.510360,-7.994030,-6.859203,-7.233021,9.414517,6.683795,5.139961,-1.254904,-1.946520,4.795418,5.094268,-3.384629,-5.186070,3.568479,7.567076,1.980101,0.798572,7.531200,-0.452675,1.655493,-5.860955,6.326138,2.791862,-1.577132,-6.351604,1.244915,-4.291330,-1.292850,-2.663301,-1.616282,-8.908388,-3.436151,1.004689,9.241423,2.528727,4.780009,2.996625,5.255537,-5.582994,-1.377189,-5.583967,8.983436,-8.304932,1.919977,9.960142,-2.376401,1.016570,2.879065,-1.678122,4.576404,1.494250,6.421377,9.880223,8.311487,-3.129854,-1.490251,9.853061,7.909098,0.688976,7.075264,-0.175957,-6.990299,-4.443834,-7.841163,-7.894351,-6.070927,-7.712286,-7.152093,-7.841583,-0.250699,-8.266691,4.635643,-5.391854,1.601395,7.107739,-9.006816,-2.662347,-9.445823,4.966141,0.666705,-9.046205,7.028233,4.608737,-2.113737,-7.535630,5.423408,8.527566,-6.943747,6.479793,8.033800,-1.076241,6.003614,-4.076167,9.902350,-3.936520,0.300172,-6.672307,-4.272201,-9.400022,-7.079233,3.697527,8.169076,-6.335754,-7.395452,0.980038,8.282012,5.048563,-3.247660,-6.073325,6.114729,-6.625803,2.721864,-2.851415,5.805315,-1.858804,2.000799,8.618773,-0.594316,-7.392811,5.589706,-8.333411,-2.396540,0.531930,3.545049,-9.370103,2.080148,0.632506,-2.289994,-1.411245,-4.384969,9.408720,-4.808926,7.157907,-9.136867,1.019561,3.485041,-9.968401,0.352211,4.091660,9.306302,-8.037168,-9.932558,5.348609,9.787318,-5.531866,-8.937678,6.757605,-5.881957,1.950824,-9.404440,9.367562,-8.715026,4.580947,0.041150,-4.696921,1.518348,5.239781,-9.014878,-2.962473,-5.056318,-0.516793,-3.565963,1.949824,-8.665526,9.382985,1.100464,-4.777155,7.562734,-1.437984,-6.923663,9.333221,6.799697,-6.516732,-4.025408,0.151073,2.476341,8.170968,6.657338,9.458593,-7.183243,-3.206086,9.697277,1.572364,9.056156,8.317485,0.188968,0.426382,-1.295153,-0.074102,-0.925765,4.284549,0.556821,5.508948,-9.545247,-8.434616,6.137319,-0.011331,-1.962318,4.930910,6.875313,4.123745,-4.295515,6.493790,-4.019807,9.754069,2.620596,5.458526,9.707304,4.756443,6.217031,-3.969675,1.702467,4.498918,7.398032,7.546805,0.930786,4.319382,6.673469,-6.360633,-2.400706,-5.732694,1.312249,8.227686,-1.076987,-3.032654,-4.263928,-7.620237,9.604840,8.462885,4.116241,-8.399079,-6.651266,-7.843171,-2.474832,7.188132,-1.546082,2.024347,5.252315,-9.868669,8.790084,7.331727,-3.529788,0.693905,9.196842,-3.814071,4.317268,-0.742524,-9.273161,9.581304,5.579475,8.139268,-5.568731,7.879092,7.149418,7.984726,-7.352157,8.885780,5.943036,6.115420,0.870996,5.592462,-3.101918,-2.303189,-6.036141,6.770486,0.104956,3.495887,6.548030,9.358461,-8.406421,-4.981679,-5.362127,4.511554,-7.500211,-8.114613,-0.487844,3.288178,8.843720,8.050912,7.500104,-2.524741,-6.723849,2.875064,-8.725931,-5.015689,8.546962,-5.688836,-0.761515,0.116021,-0.674506,1.354666,0.687918,5.072867,-8.043923,-6.039542,3.571936,-5.683379,-6.220435,-3.217973,5.808192,-4.639240,4.587724,-9.898849,-3.117227,-4.211895,7.355922,-4.875383,-1.543347,-4.466255,-6.488162,0.097957,1.732350,9.065942,3.532805,-6.961604,7.923057,8.209568,3.553994,-1.871210,-7.744186,-3.873763,-8.439545,-0.876001,-2.137717,-3.820442,-2.965072,5.680009,6.863459,1.205077,-1.823959,4.606064,-0.448883,-7.357888,-5.267168,-4.432921,0.918063,4.778105,5.011764,0.192291,-4.994823,-3.240203,2.900532,-6.494317,1.861963,9.829385,8.651890,3.904938,8.101158,-9.669399,-4.660913,-2.638967,4.553765,-2.739985,-1.700537,2.903620,9.322074,8.322419,7.075287,9.566160,4.814268,-4.895237,-5.777418,1.146604,8.522044,9.806087,-9.124702,0.509224,4.157453,-8.013479,4.344037,-2.056581,6.105417,7.713335,5.095857,7.232580,8.426086,-8.506368,4.238749,-6.471453,1.254926,7.412913,0.801676,0.038761,-8.679008,-5.762446,6.235069,-2.252409,-3.811918,2.965653,-8.306108,1.759189,-8.439388,3.900996,2.023429,-6.464512,-6.444773,-7.978384,5.922977,-3.351783,0.223315,9.061197,-0.269943,6.742045,-7.658301,-5.444421,-1.079251,-0.805219,0.199081,-2.548612,3.872071,4.307142,-7.405561,-4.376822,-6.447870,0.290536,0.776198,-3.865918,-1.429629,4.799825,4.627371,-1.784298,7.843851,-8.122095,-6.349229,1.208080,-9.386917,7.608553,-3.204914,-9.577749,3.837170,-2.060346,-1.892961,-5.622586,-9.423235,4.413637,7.784145,5.988800,5.499098,-1.180004,8.267742,5.352652,-0.129398,-3.898907,-9.862898,0.569018,7.230206,3.418520,9.005322,-3.472071,8.502202,3.395927], dtype = "float64")#candidate|4698|(1050,)|const|float64
const_4699 = relay.const([-3.769440,4.193831,5.290653,2.863721,9.431654,-8.763806,-5.435811,3.290350,4.021885,-4.256331,-9.598337,-6.092227,-0.030913,4.364382,0.629754,-8.403365,-8.531322,5.964909,2.838064,1.052480,-4.753343,-3.219196,-2.957311,-2.278932,-7.942284,-1.363321,-7.435851,-6.856621,-2.121538,-8.305387,-2.979348,2.106036,-4.316671,-4.263844,-1.615303,5.808461,6.082011,0.794137,6.400927,7.142493,-0.790192,6.134321,0.530365,-8.745097,1.786398,5.726864,4.970336,-1.828362,1.122661,9.365914,-3.565550,-1.010757,4.761333,3.117055,-3.237636,-9.476425,-9.006600,3.584256,-1.271395,0.766382,-7.006999,1.137841,-5.996033,-8.365746,5.770374,7.893069,-9.617957,3.067154,9.171657,-5.406872,-4.204137,0.017371,-5.067761,-2.677721,-6.024311,-2.084485,-5.775944,-1.931524,7.592043,-3.976428,7.238164,0.054932,7.936665,9.324383,1.744288,-7.211823,-0.524257,8.408620,-1.544078,8.976737,2.038488,-6.365762,-7.514731,-5.033031,9.264546,-6.542850,-9.902529,-5.294958,-1.704762,6.541777,1.098489,8.503625,9.766743,0.922147,-5.401210,-6.334496,-7.496798,9.766095,5.296731,9.353796,-2.090037,5.187825,1.958802,7.231387,7.407870,6.810156,-6.430179,2.580114,4.190777,-9.593889,2.417591,-4.814501,6.869467,-5.326748,0.284680,6.009672,8.641291,7.048559,-2.913846,5.037225,8.157347,-8.125817,3.929937,1.484061,-2.321014,8.423313,-0.614435,-9.917036,3.872286,-3.711550,-4.897916,1.737456,7.115139,-0.483912,5.714125,6.603677,-1.073107,-6.996637,5.431520,4.339466,1.143777,-3.462097,-2.065636,5.486261,0.968562,-3.262777,6.460217,-7.357224,-9.865343,-8.915874,-2.103529,-7.075810,-2.391168,-1.346964,-0.551036,2.918670,-1.558577,3.277898,-7.669420,9.516334,0.791335,9.158980,9.428148,6.819820,-0.355624,5.309301,9.894875,-2.072277,-1.363983,-3.406098,-7.493867,5.612771,2.740843,8.178589,7.131542,6.048598,-4.574866,-4.769875,-5.174831,-2.177669,5.022620,3.554069,0.193789,-4.106091,5.221853,6.926567,0.397166,-2.789575,6.819362,-0.835977,-9.293710,5.304783,0.722255,-0.212271,1.075355,-4.387380,-7.051220,-7.108314,0.931336,-3.684966,4.198958,-2.724423,-3.282829,9.404959,-1.434396,-0.095203,2.246742,-6.449373,1.410592,0.992157,3.408519,-8.768863,0.464790,8.170208,7.737459,4.982573,2.209860,1.451566,8.436440,-4.271052,7.176474,-1.106087,-0.654212,1.254078,-5.134097,8.879524,-0.762480,4.343241,-6.523260,3.214170,-3.663046,-5.295668,-9.260603,6.766740,-2.165837,-9.615209,6.560998,-1.402842,9.867808,9.665221,-2.715766,4.916456,-8.535373,1.842254,6.037770,7.005170,1.143864,-2.109473,6.423526,3.455970,7.796656,8.498608,5.976154,-7.386675,6.931587,-9.756611,-5.369567,5.481920,-8.001514,1.140844,0.746288,-7.188200,-5.314606,-2.724021,-2.152809,8.236445,0.347894,-0.442846,0.475535,8.585851,6.606024,-1.535897,0.669730,-6.427531,-7.350699,-1.000510,-9.669216,8.280005,7.852142,7.241076,9.020425,9.442089,4.794915,7.723253,-4.509457,-9.052491,-2.998475,-7.018621,-5.849946,-8.701208,-3.309478,-3.340947,2.407271,-3.249953,0.401095,-0.758330,-8.062894,-1.660144,-1.975807,-4.547002,-4.044970,-0.106451,-9.670594,9.996557,7.928994,1.394940,-5.688306,1.678229,4.587842,-3.045567,2.746052,-8.091797,-0.466848,1.929126,-8.190784,7.449980,-6.920365,-9.220492,-9.921107,7.612581,0.218672,-2.317899,-8.800951,1.920425,6.766380,9.019458,-4.880503,-7.625641,-2.856971,7.259955,-5.579517,9.024610,-1.503390,0.807226,3.606887,8.474650,6.424684,-5.991535,3.121818,-5.995537,3.529668,6.884579,8.617869,-7.313533,2.324141,-3.111412,0.035189,0.421827,6.420195,-1.356871,9.264313,0.526855,4.501282,5.083366,1.995750,3.043845,9.139151,4.096615,9.517193,-7.517396,7.253164,-2.037041,-9.928987,3.937660,-2.034585,1.505306,8.946633,-1.242552,-4.481721,5.063350,1.132478,4.978203,4.878762,0.519481,-1.809639,0.713709,7.755386,-6.120844,2.942580,6.116617,-8.299858,-9.061238,-4.566230,-9.317145,-9.453770,-5.929801,4.400769,-2.254352,-7.112681,0.066869], dtype = "float32")#candidate|4699|(400,)|const|float32
const_4700 = relay.const([-8.737659,-0.106301,5.374511,1.475187,-4.471918,4.317006,-6.891088,-2.978088,6.658362,3.713778,-0.157710,4.765064,0.258792,4.154551,5.053005,0.904310,0.094545,-7.230837,-1.016614,-1.529792,1.285479,5.235810,5.949640,-9.186186,-2.780957,0.499231,4.958640,-5.215966,9.970057,5.097925,-1.668426,-5.854789,-0.632305,-9.706743,-3.986172,-7.468245,-7.734524,-3.391799,4.867316,-1.251774,-4.640335,-0.806614,-6.292765,-5.234608,-4.328834,-1.793783,7.742593,-0.165316,2.165537,-1.515987,8.067753,4.003407,-3.192330,-6.334466,-8.438193,0.771532,-8.523553,-7.106987,-0.475787,3.934525,-4.594383,2.421041,-4.895684,-0.186636,-8.431562,-1.841738,2.999075,4.539961,2.522607,5.706483,-7.563709,-8.416205,-4.375381,1.698132,8.415542,9.362473,5.438419,6.293103,8.862330,1.124946,-5.118364,5.052431,-2.133403,5.981844,-2.557557,2.928191,-9.397775,-1.458841,7.115243,3.049949,-5.743626,-0.524053,-9.493072,6.895871,1.266202,7.274250,-5.800206,5.157770,-0.591666,-4.745547,5.356072,2.438406,8.120506,-6.526037,-5.379889,-3.708079,3.772817,-1.432025,-8.558711,8.645557,-5.845862,-7.140309,3.669736,4.155689,-0.996014,9.299309,-6.430509,7.572800,-1.406144,-8.205731,-0.252964,9.751134,9.607584,6.200725,2.678320,-1.023410,6.840181,2.991022,-5.019859,-4.182203,-5.853089,1.100873,8.494112,2.517533,-5.576246,-7.772190,-9.811635,-7.391595,1.560952,5.628424,-4.392501,-0.036838,-4.215909,0.274784,1.424996,-2.859204,1.427553,-3.919414,-3.542491,-8.788925,5.546872,3.911617,-7.739042,1.358561,0.742111,-5.795423,-2.616444,-2.454018,-3.758804,-5.437833,0.033626,-4.074899,-2.509188,3.086518,-8.511485,1.047217,-8.273255,2.983995,8.547659,-5.405582,0.883087,-6.086051,-2.106218,5.138491,-1.390168,-9.674163,-8.420025,-5.125456,3.015093,9.056704,8.565486,8.999811,-7.306327,-5.067231,5.426476,-1.080463,-8.617929,0.763670,5.251230,4.731726,-2.591505,-3.757660,-6.076918,8.431229,-4.691543,3.684922,5.758748,-4.570336,0.909904,2.444132,1.773074,-0.676510,3.950596,-9.476409,-1.640414,-3.229056,1.283510,4.979569,-6.115852,4.565151,8.050298,-6.183076,5.867200,-5.160714,-2.877402,-6.495775,-7.082761,2.398558,-0.303610,-7.939655,9.216592,5.347716,5.694854,1.166732,1.185458,1.966320,9.351122,3.872338,-5.697735,-1.708465,-5.570034,-2.619181,7.125177,-2.287965,-6.839847,-3.233442,1.853256,-9.528237,-0.269273,-3.220027,1.482535,-8.585994,-4.679842,4.054603,-0.436984,2.480844,-3.433247,2.941088,8.082270,2.309815,-9.790247,6.089345,7.753735,1.527608,2.252214,9.900818,9.163512,-7.872962,-3.861718,-8.237555,8.063425,7.192702,2.458409,2.676393,-8.894631,-9.717158,-7.904806,-9.377383,-6.932138,1.074269,-3.873374,-6.836007,-4.657346,2.334742,-4.368526,9.464107,7.940940,-7.244408,0.419471,9.281032,-1.014211,3.184682,9.986842,4.021448,7.002584,-4.609236,7.711859,1.676429,5.903517,-8.354084,-0.500371,9.687395,-3.178903,-9.824767,9.663375,7.614527,-8.848045,-4.337206,9.376674,7.568211,-6.178945,-0.429968,-5.906287,9.827562,-9.021007,9.114264,-4.177494,-1.109704,-4.310245,-9.950103,-8.787814,-5.772885,-1.908029,-2.405293,-6.169448,-9.751417,7.167997,-8.965393,-3.079814,7.542563,-8.509502,6.878956,1.193314,3.982488,2.763724,3.002316,-6.344340,-8.867723,-0.731832,-5.945104,-0.455264,5.098822,4.077648,5.912540,-5.477151,-3.257980,8.979930,0.916698,9.031109,5.755710,-9.232276,-7.920013,-3.726460,-9.221012,2.420881,5.616455,2.737929,-3.930614,-4.874704,3.184965,-5.281497,3.059448,7.349727,7.264915,-4.672929,1.153135,5.563805,0.409675,-9.281428,4.380641], dtype = "float32")#candidate|4700|(360,)|const|float32
call_4696 = relay.TupleGetItem(func_1372_call(relay.reshape(const_4697.astype('float64'), [2, 8, 9]), relay.reshape(const_4697.astype('float64'), [2, 8, 9]), relay.reshape(const_4698.astype('float64'), [1050,]), relay.reshape(const_4699.astype('float32'), [400,]), relay.reshape(const_4700.astype('float32'), [360,]), ), 9)
call_4701 = relay.TupleGetItem(func_1379_call(relay.reshape(const_4697.astype('float64'), [2, 8, 9]), relay.reshape(const_4697.astype('float64'), [2, 8, 9]), relay.reshape(const_4698.astype('float64'), [1050,]), relay.reshape(const_4699.astype('float32'), [400,]), relay.reshape(const_4700.astype('float32'), [360,]), ), 9)
func_1738_call = mod.get_global_var('func_1738')
func_1741_call = mutated_mod.get_global_var('func_1741')
call_4703 = relay.TupleGetItem(func_1738_call(relay.reshape(call_4605.astype('uint32'), [336,])), 8)
call_4704 = relay.TupleGetItem(func_1741_call(relay.reshape(call_4605.astype('uint32'), [336,])), 8)
output = relay.Tuple([call_4605,call_4696,const_4697,const_4698,const_4699,const_4700,call_4703,])
output2 = relay.Tuple([call_4606,call_4701,const_4697,const_4698,const_4699,const_4700,call_4704,])
func_4708 = relay.Function([], output)
mod['func_4708'] = func_4708
mod = relay.transform.InferType()(mod)
mutated_mod['func_4708'] = func_4708
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4708_call = mutated_mod.get_global_var('func_4708')
call_4709 = func_4708_call()
output = call_4709
func_4710 = relay.Function([], output)
mutated_mod['func_4710'] = func_4710
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2944_call = mod.get_global_var('func_2944')
func_2945_call = mutated_mod.get_global_var('func_2945')
call_4737 = relay.TupleGetItem(func_2944_call(), 3)
call_4738 = relay.TupleGetItem(func_2945_call(), 3)
uop_4751 = relay.cosh(call_4737.astype('float32')) # shape=(15, 7, 10)
uop_4753 = relay.cosh(call_4738.astype('float32')) # shape=(15, 7, 10)
uop_4763 = relay.acos(call_4737.astype('float32')) # shape=(15, 7, 10)
uop_4765 = relay.acos(call_4738.astype('float32')) # shape=(15, 7, 10)
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
const_4772 = relay.const([-8,-3,5,6,2,10,2,-8,2,-3,9,-6,8,-7,4,7,2,8,-5,-1,-2,8,6,6,10,-8,7,-9,4,3,-5,9,8,7,6,2,-9,-10,8,1,-7,-4,3,-9,-9,-4,-3,-4,-2,6,-8,-6,9,-10,-3,-5,-9,7,2,6,8,-8,5,-2,4,5,-6,-9,-6,-2,-9,1,5,10,4,1,-8,-5,-10,1,4,-7,6,5,-4,-5,3,-3,-4,6,-2,1,5,-4,2,-10,-1,5,3,-3,7,10,-2,8,9,-5,10,-1,-2,1,-10,8,-8,-1,5,5,-2,1,1,1,7,9,3,-2,8,-7,-4,2,-10,-2,8,6,-4,5,10,5,3,-5,-5,1,2,-4,5,-10,-10,1,-2,10,-5,3,-3,1,2,4,2,-3,-3,3,-4,4,-7,-3,-1,-5,10,-10,-6,-2,-6,8,-2,-4,-9,-5,-2,-6,-4,-8,-4,9,-10,-10,1,-7,-10,7,-9,9,10,2,2,10,8,9,8,-7,-9,9,1,-7,2,-3,6,10,3,-7,9,-1,3,9,9,4,-5,8,-8,6,-10,2,10,-2,-3,10,-4,8,-10,-1,-5,9,-7,-7,-1,-8,4,6,3,7,-5,-5,-7,-8,-10,-9,1,6,-4,-4,5,-7,1,3,1,9,6,-7,-7,-3,4,-3,-8,5,-9,9,3,3,1,-8,-5,-10,-1,5,4,6,-9,-4,-5,1,2,-9,7,-8,7,1,-3,4,-2,3,-8,5,-7,4,-2,7,6,6,10,-2,-10,-1,-7,-8,-6,4,-1,1,10,3,2,-5,-7,-4,4,6,-10,-8,3,-4,8,-3,9,-10,-9,2,-2,2,9,-8,9,-9,-10,5,-5,-10,-9,6,7,8,7,-7,-10,-10,-2,-3,10,-1,-9,4,5,10,7,1,-10,-9,-2,7,5,10,8,10,5,10,8,-9,8,-9,3,-8,-1,-1,-5,-7,-10,10,10,7,3,-9,-1,-4,-10,-5,-2,-8,-10,-10,-1,-5,-3,10,5,9,5,9,-10,7,7,-3,-5,-6,3,-1,-2,-7,3,10,-5,8,-9,-7,1,9,4,-10,6,-5,1,-3,-2,8,8,-5,-9,2,-9,8,-3,-9,10,7,5,-5,7,1,-8,7,9,8,5,5,-9,6,-10,8,-6,8,-6,-10,-4,-2,-2,-10,-9,6,-8,-7,-1,-6,8,3,-8,5,-7,-5,-8,3,6,-8,2,8,-2,-5,-8,8,-7,-9,-3,9,1,-10,10,6,7,-10,7,-8,-5,-6,6,-10,-2,-9,5,-6,1,7,9,9,7,-6,-9,5,-9,-8,4,9,-7,2,6,2,2,-9,3,9,-7,-6,9,-10,-4,-5,-6,-4,-5,-9,-2,8,-8,-7,7,3,-2,10,-4,-2,-1,-7,-5,2,-5,1,-9,5,8,-2,-9,6,-6,3,-9,8,-3,-6,6,-8,-8,10,8,9,-9,-8,8,10,-2,-3,1,2,-6,2,-8,-3,-9,-8,-2,2,9,-2,6,10,6,-1,-7,-10,-3,5,5,10,4,-1,-6,-8,5,-10,1,-10,-3,5,-6,-5,9,2,1,-8,-3,-1,-3,4,10,-8,-5,-1,1,-10,-3,8,4,-6,6,-10,-4,-6,2,5,-5,5,3,-8,-2,-1,-3,6,1,-4,7,-5,-7,-8,-2,-2,-5,-7,-5,-3,3,-3,-5,6,3,2,-4,-3,-10,9,-1,9,10,-4,-10,1,1,2,4,-1,-9,-9,1,-3,10,-3,5,-8,-7,-9,9,2,5,-5,3,-6,-10,7,-6,4,-4,-6,10,-3,6,6,5,5,-2,-1,-6,-1,-3,-10,9,-4,3,-2,-3,2,9,5,5,-6,-10,-6,-3,3,-3,2,6,-5,-7,4,1,1,3,6,6,7,-6,-2,-9,-4,7,6,-3,2,7,-9,-1,10,6,4,-5,-10,3,9,-5,6,-8,-5,1,-10,5,-7,-10,2,3,10,6,-9,1,3,-1,-10,-1,-10,6,1,9,-10,6,-9,-8,5,10,-5,1,7,-6,3,-3,10,-2,1,-2,4,-2,5,1,-6,-5,10,-10,2,-5,5,-7,-5,9,-2,-6,-9,9,-10,5,9,-8,9,-7,8,-3,8,-10,-1,-9,-8,-1,-5,10,-9,3,8,-9,1,-8,-8,2,3,10,-8,8,6,-4,8,-6,2,6,-3,7,-1,-3,-7,6,6,5,7,-2,1,-5,2,5,-3,4,-8,-9,5,9,-8,4,-2,-10,10,-1,-9,-9,10,-7,-7,-6,-1,5,9,-9,-8,1,-2,9,4,-5,8,6,-10,-8,3,1,1,9,9,-4,-3,-8,-7,-6,-7,-4,5,-3,-10,-1,7,6,-9,5,-4,-6,8,-1,1,4,10,-4,-7,-9,10,-1,-1,4,-1,-7,-1,-4,-7,2,4,-7,-5,1,-8,10,-2,6,7,5,-8,-4,7,8,3,-3,5,5,-1,-3,-9,-8,3,6,1,-9,-6,-9,-9,9,6,-2,2,-2,-6,-3,-7,5,2,-1,5,-5,3,3,3,-5,-4,10,6,10,-7,6,3,-6,-5,9,9,8,-9,3,5,-1,-6,-4,2,-2,-6,-3,-2,-3,9,4,7,9,6,-10,-9,7,-1,-8,6,2,-10,10,-5,6,6,-2,-5,1,-1,10,3,7,-2,-8,5,-2,-4,-7,-5,3,-7,6,-5,3,9,8,-3,-7,10,-5,3,1,2,-8,-5,10,-7,-1,-3,-2,10,-4,7,-9,-7,3,2,9,6,-10,-10,10,-7,4,7,-2,-6,-9,-8,-9,5,-4,7,-10,3,-3,-2,-2,8,-1,-10,4,-9,-8,-3,1,10,-4,1,2,-8,8,-10,1,6,4,4,1,-3,8,9,-2,7,8,2,1,-6,9,9,5,1,1,-7,7,-3,-6,6,-1,-5,-10,-8,-6,2,-2,5,-4,9,4,-8,-8,7,5,-1,8,-5,3,-3,-2,2,6,3,8,7,-8,2,-8,-9,6,-9,-7,7,2,7,-5,-7,-10,10,2,7,-4,7,2,5,7,-2,-2,2,-9,7,-2,4,5,-8,-3,7,8,9,10,-5,10,1,6,-6,-4,8,7,6,8,-9,10,8,9,-7,-1,-8,-10,3,-10,-3,-1,-10,5,-10,-9,3,4,9,-9,4,9,-3,9,-6,-4,-5,2,-5,9,-1,4,-2,-7,2,7,8,-6,-4,-6,5,-1,-6,4,-1,9,-3,-8,-9,-6,-3,-7,-9,-1,-7,5,-6,10,1,-5,7,6,7,5,-3,9,3,6,-8,-5,3,-6,-8,4,2,-6,5,1,8,-8,-6,-6,2,9,10,-4,5,5,-6,-7,-10,9,4,7,-3,-4,1,-8,-3,-2,2,-7,6,4,-1,-2,3,6,1,-3,8,3,-7,-4,-7,-3,-2,8,2,-4,1,4,9,-3,-3,5,2,-1,-1,9,-1,9,-3,-3,-6,-8,5,1,3,-2,-10,6,-7,5,3,-5,8,-10,-10,-8,2,-1,9,10,-8,8,1,4,-2,5,-2,-2,6,-3,-6,1,8,-6,-6,1,-1,5,-3,-2,-5,2,9,10,-7,10,-4,5,4,1,10,-5,-10,-4,9,-10,3,4,8,-7,-6,2,1,6,-1,-7,-8,3,-5,1,-5,8,2,1,-7,9,-9,-7,-10,-4,-7,-1,5,5,3,4,6,7,8,-2,-8,10,1,6,8,2,4,2,-7,9,-2,7,7,-10,6,9,2,-1,-7,-6,-10,-2,-10,-4,-3,7,8,-7,-2,9,8,1,-9,3,-1,3,-5,-6,1,-4,-4,4,-6,6,-8,5,-5,4,-9,10,-7,-3,-7,-9,-10,-5,-3,6,-9,-9,-7,1,-1,6,3,1,-8,-2,5,5,6], dtype = "uint32")#candidate|4772|(1470,)|const|uint32
call_4771 = relay.TupleGetItem(func_54_call(relay.reshape(const_4772.astype('uint32'), [7, 15, 14])), 0)
call_4773 = relay.TupleGetItem(func_57_call(relay.reshape(const_4772.astype('uint32'), [7, 15, 14])), 0)
output = relay.Tuple([uop_4751,uop_4763,call_4771,const_4772,])
output2 = relay.Tuple([uop_4753,uop_4765,call_4773,const_4772,])
func_4776 = relay.Function([], output)
mod['func_4776'] = func_4776
mod = relay.transform.InferType()(mod)
mutated_mod['func_4776'] = func_4776
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4776_call = mutated_mod.get_global_var('func_4776')
call_4777 = func_4776_call()
output = call_4777
func_4778 = relay.Function([], output)
mutated_mod['func_4778'] = func_4778
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4832 = relay.var("var_4832", dtype = "float32", shape = (2, 10, 9))#candidate|4832|(2, 10, 9)|var|float32
uop_4833 = relay.cos(var_4832.astype('float32')) # shape=(2, 10, 9)
func_3924_call = mod.get_global_var('func_3924')
func_3926_call = mutated_mod.get_global_var('func_3926')
var_4836 = relay.var("var_4836", dtype = "bool", shape = (1144,))#candidate|4836|(1144,)|var|bool
call_4835 = relay.TupleGetItem(func_3924_call(relay.reshape(var_4836.astype('bool'), [1144,])), 1)
call_4837 = relay.TupleGetItem(func_3926_call(relay.reshape(var_4836.astype('bool'), [1144,])), 1)
func_2286_call = mod.get_global_var('func_2286')
func_2288_call = mutated_mod.get_global_var('func_2288')
call_4842 = relay.TupleGetItem(func_2286_call(), 0)
call_4843 = relay.TupleGetItem(func_2288_call(), 0)
func_824_call = mod.get_global_var('func_824')
func_827_call = mutated_mod.get_global_var('func_827')
const_4852 = relay.const([-9,10,-2,-8,4,10,-8,5,8,1,-2,3,-7,-5,-5,5,9,-7,-4,1,-8,-7,3,-10,9,9,10,7,5,10,-10,-5,10,1,4,-1,4,9,-10,-10,-10,-2,-1,8,9,-7,2,-10,-5,-8,5,-3,9,-6,-1,-10,5,1,-1,3,10,-10,3,7,-1,9,8,4,-6,-6,9,7,-8,-2,-1,8,7,4,-8,-2,-7,4,4,3,-10,-6,5,-5,-4,-9,-5,4,4,4,10,10,6,3,4,10,6,-5,1,-3,10,-10,8,-7,-4,6,-6,1,2,3,-3,2,-1,8,8,7,-3,2,-2,8,1,-10,-2,-2,7,2,8,-9,2,1,9,7,4,5,-10,2,7,-10,-4,-3,8,3,1,7,9,3,-7,-2,-2,8,10,-5,3,7,-10,10,-8,-5,5,2,3,4,8,4,-2,5,-4,10,10,7,-10,9,10,-6,-10,-10,6,5,-7,7,9,3,4,1,3,-3,4,10,8,2,-6,8,-6,9,10,-5,10,4,-3,8,-4,-8,5,-4,-6,8,9,-8,-9,-10,-5,-1,3,10,2,-2,9,7,-10,6,9,9,-9,3,-6,-10,8,-9,-9,-8,7,9,2,9,-9,7,8,-8,-7,-5,-3,-7,6,-1,2,-8,-9,-4,-3,2,-9,-3,-9,4,-9,-10,-5,3,-10,6,6,-1,-1,6,10,-9,7,4,1,1,-6,-4,5,-2,-4,8,-4,-4,4,10,-8,-2,9,2,-5,-9,3,4,1,-4,6,-4,3,-7,8,10,6,-10,8,-6,4,-6,1,6,5,6,5,4,-9,-2,10,-2,4,1,3,-6,5,5,-1,-7,-4,10,4,-5,6,-10,1,-3,4,-8,-3,6], dtype = "uint32")#candidate|4852|(336,)|const|uint32
call_4851 = relay.TupleGetItem(func_824_call(relay.reshape(const_4852.astype('uint32'), [3, 16, 7]), relay.reshape(const_4852.astype('uint32'), [3, 16, 7]), ), 0)
call_4853 = relay.TupleGetItem(func_827_call(relay.reshape(const_4852.astype('uint32'), [3, 16, 7]), relay.reshape(const_4852.astype('uint32'), [3, 16, 7]), ), 0)
func_4708_call = mod.get_global_var('func_4708')
func_4710_call = mutated_mod.get_global_var('func_4710')
call_4869 = relay.TupleGetItem(func_4708_call(), 1)
call_4870 = relay.TupleGetItem(func_4710_call(), 1)
func_4419_call = mod.get_global_var('func_4419')
func_4420_call = mutated_mod.get_global_var('func_4420')
call_4874 = relay.TupleGetItem(func_4419_call(), 0)
call_4875 = relay.TupleGetItem(func_4420_call(), 0)
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
const_4878 = relay.const([[-1,-10,-8,-1,1,-1,-8,-8,-6,-5,10,-3,6,-1,-9,6,7,10,1,2,7,-10,-2,-6,-1,-1,8,-1,2,-5,-6,5,-10,-1,-8,-2,-6,-10,1,7,6,-5,1,-1,8,8,-8,1,7,7,-7,-10,1,3,5,6,-7,-6,-6,5,-4,8,-5,-9,1,8,7,2,8,-2,5,-2,8,5,6,8,5,1,-4,-10,8,-6,-6,3,-4,-4,-2,5,8,-3,-2,-4,6,-4,-8,9,2,9,4,1,6,8,4,7,5,-6,-1,-1,6,9,-2,9,4,4,-1,-7,-10,6,-10,6,3,10,2,2,9,-3,-2,6,2,3,3,-10,-6,-9,-9,10,8,-9,5,10,5,-6,-8,2,-2,-3,6,10,-2,-6,5,-7,8,-5,7,9,-3,-6,9,2,2,6,1,-10,6,-5,4,8,-6,-6,-10,-5,-2,-3,9,-2,-3,1,-4,-6,-6,5,-3,-3,6,3,6,9,9,1,-9,10,-9,5,-1,6,-4,-9,-4,7,4,5,8,-10,-8,-6,1,-9,7,6,5,-7,-4,5,9,-9,-3,-4,10,9,-4,5,3,8,7,9,-9,-10,-3,3,8,6,6,-2,4,4,-8,-3,-4,10,8,-5,8,-10,-4,-2,4,-4,7,-7,-7,7,10,8,-5,-7,-10,8,10,6,10,6,7,2,-6,-3,10,10,-3,5,-7,-1,-5,-2,8,8,-9,1,4,9,4,3,-3,-3,-1,6,-1,2,9,-10,5,4,4,-9,-9,-10,-10,7,6,-4,10,-5,-9,4,3,3,-4,4,-2,-8,-1,6,-3,-9,-4,-6,-4,-3,9,1,3,-10,2,-7,-8,7,-5,-3,7,9,-6,8,-7,-3,10,8,7,-10,-3,3,-6,-1,7,-1,-7,-8,5,-2,-6,-9,-6,-10,7,2,-9,-1,9,-7,-5,1,-9,6,-4,8,-1,6,4,-2,6,-10,9,1,3,-4,-4,-2,-5,-9,-7,9,-2,7,1,-8,3,3,1,-10,1,5,-1,8,-5,5,4,10,-10,-3,-6,9,10,1,-7,-8,-9,2,9,-5,9,-6,3,10,-7,-6,5,-2,9,-8,8,-3,-8,4,6,-2,9,-9,-8,-8,3,7,9,-3,-5,-3,9,-8,10,2,3,-5,4,7,-5,6,-10,4,-2,-8,-1,2,8,5,-3,-7,5,-1,6,-2,4,8,10,-5,-2,3,-5,-1,2,2,7,2,-9,-10,2,7,9,-9,-9,3,-7,-3,1,7,2,-1,-7,10,7,-3,1,4,-5,-10,9,-4,-2,-1,2,8,-7,4,1,10,-3,6,2,7,5,10,3,-2,-2,9,3,8,4,4,6,-5,6,5,3,5,-9,4,10,6,3,6,3,-5,-3,-4,4,8,-1,8,-4,4,8,5,3,2,1,1,-1,10,-7,5,-6,-1,-7,-10,2,6,1,-1,-7,2,10,-1,-2,-5,7,-10,2,-7,2,9,3,-5,-1,1,-9,5,8,8,-6,9,-2,4,2,-10,1,8,9,2,-2,-7,8,2,-5,-6,-3,4,-1,9,10,-8,3,8,-1,-1,3,-6,9,9,-8,6,-7,1,7,-3,-9,9,-7,3,7,-1,-1,3,6,-3,4,-10,-10,-1,8,5,3,1,-10,9,8,6,-8,-9,-1,-1,-4,6,-9,-10,-10,-6,8,4,4,3,-3,1,-10,-6,-7,-7,-7,6,1,6,-10,4,-2,5,-2,-5,-9,-8,1,1,-2,-10,1,-6,-1,-4,5,-10,-6,10,-3,-5,-5,3,-9,-3,-3,10,6,-8,8,-7,-10,1,-2,-6,-8,-9,-3,7,7,3,-3,-5,10,-8,-3,-5,-2,9,-5,-8,7,6,-10,-2,-4,-8,-9,-8,6,9,-10,2,-9,5,7,1,-3,-4,9,-1,-2,-10,1,1,-3,-7,-7,3,2,-3,1,1,-8,-6,-2,2,7,-6,-1,6,-1,4,-3,-3,-7,4,-10,-2,1,-7,-7,8,10,-2,2,4,-2,1,-9,10,3,-4,10,-1,-5,3,-7,4,6,-2,-4,4,-7,1,9,10,7,5,9,8,4,6,4,-3,-5,-1,-1,7,9,-2,1,-10,-5,6,1,-9,-7,8,-4,2,-8,-10,-5,5,-7,2,-10,-6,9,10,-8,-5,-6,6,6,1,10,-2,-10,-1,-5,-5,-7,-9,-5,-6,-2,7,6,7,-1,7,-10,8,-6,-9,4,-6,-6,-7,8,3,-6,5,4,-5,10,8,-1,-2,-5,-7,-6,10,-2,3,2,-9,8,10,5,9,-9,7,-3,-6,1,-7,-10,9,4,1,9,4,-3,-1,2,-8,-7,1,-6,-8,2,-4,-2,4,6,-2,5,-4,10,1,-7,3,3,-4,2,-4,9,9,-2,9,-10,4,-9,-6,-6,-3,3,9,-1,-5,-6,9,8,1,3,-7,-3,8,9,-2,-10,-10,-2,-1,1,-8,-4,6,-5,9,5,10,-6,1,-2,-2,8,7,10,-3,-3,-10,7,8,-1,9,2,-5,8,6,8,6,2,6,-3,-3,-1,3,8,-10,-8,-6,-10,1,-8,-2,6,10,1,-10,-6,-1,7,-3,-5,6,3,6,-5,-1,-7,-7,1,3,-5,6,-5,6,-1,8,3,-1,-8,-10,-5,5,-6,-5,2,-8,-10,-10,-3,8,7,-2,-2,7,-2,-2,-9,-9,9,-3,3,-2,8,-9,-8,7,-4,8,-1,-3,-3,10,-2,-1,6,-4,7,-1,7,8,-8,3,-1,6,-5,5,-4,1,7,-6,6,-1,7,-8,5,-2,-8,-4,7,2,-9,-1,5,8,4,4,-6,-2,10,-9,-5,-7,7,3,1,5,2,6,8,9,10,3,-2,-8,7,7,-10,9,8,-1,-7,1,-4,9,1,-5,3,6,7,8,-3,7,1,-1,8,-8,-10,-6,-7,6,3,10,3,3,-2,-5,-6,-8,-10,6,1,-3,-4,-7,4,-9,-7,6,5,-2,-8,1,1,1,-8,-7,10,2,-1,-2,-2,-3,-2,-3,-6,-3,3,-10,-3,4,-7,-2,5,10,-5,-10,-5,-8,-3,3,5,6,2,-2,7,8,-1,3,-6,-1,-5,-8,5,7,-6,-7,-8,10,-1,5,-10,-3,5,6,-9,2,7,6,3,-10,-6,1,2,-4,-4,2,-3,-7,-1,10,8,-3,2,-7,-5,-6,-3,-6,8,9,-2,8,-6,-4,5,-6,-7,-8,-8,-4,9,5,4,-9,3,4,1,-1,-4,3,-2,-4,7,8,4,-10,1,-7,9,7,7,9,5,4,-8,1,-5,-1,-5,-8,10,-6,-5,5,-10,-10,-6,-3,-3,-10,-4,-3,6,-1,-2,3,-9,2,-1,-8,9,-8,-8,-6,9,-2,-7,-4,-6,5,4,-9,-5,6,7,-7,-3,1,-5,10,5,7,-4,6,-3,-9,8,-1,8,9,3,-2,-10,-8,2,-8,-10,10,3,-8,-8,7,-5,-9,6,-8,5,-7,-3,-9,-3,-3,-2,-10,2,3,-5,5,1,-4,-5,7,-2,-6,-7,1,4,4,-8,2,2,-1,-8,-8,-2,5,7,-7,6,4,-8,5,9,-7,6,9,5,-7,-6,-1,9,6,-7,5,-6,-7,3,8,3,-1,5,7,9,2,-10,4,8,-7,4,-10,-2,7,-1,9,10,-5,1,-4,7,-8,10,8,3,-5,-9,9,4,-9,3,-10,-8,-10,6,-1,-2,10,10,-2,-3,-10,-3,-6,-7,3,4,2,8,-3,6,5,-3,-1,-3,6,1,-2,6,-3,-4,-2,-10,2,-4,10,9,9,-2,-6,3,-5,-9,9,7,-8,-8,1,3,-6,8,-9,3,10,-8,4,-8,8,-6,-3,-8,-5,-9,4,8,3]], dtype = "uint32")#candidate|4878|(1, 1470)|const|uint32
call_4877 = relay.TupleGetItem(func_54_call(relay.reshape(const_4878.astype('uint32'), [7, 15, 14])), 0)
call_4879 = relay.TupleGetItem(func_57_call(relay.reshape(const_4878.astype('uint32'), [7, 15, 14])), 0)
bop_4883 = relay.floor_mod(const_4878.astype('float64'), relay.reshape(call_4877.astype('float64'), relay.shape_of(const_4878))) # shape=(1, 1470)
bop_4886 = relay.floor_mod(const_4878.astype('float64'), relay.reshape(call_4879.astype('float64'), relay.shape_of(const_4878))) # shape=(1, 1470)
output = relay.Tuple([uop_4833,call_4835,var_4836,call_4842,call_4851,const_4852,call_4869,call_4874,bop_4883,])
output2 = relay.Tuple([uop_4833,call_4837,var_4836,call_4843,call_4853,const_4852,call_4870,call_4875,bop_4886,])
func_4890 = relay.Function([var_4832,var_4836,], output)
mod['func_4890'] = func_4890
mod = relay.transform.InferType()(mod)
var_4891 = relay.var("var_4891", dtype = "float32", shape = (2, 10, 9))#candidate|4891|(2, 10, 9)|var|float32
var_4892 = relay.var("var_4892", dtype = "bool", shape = (1144,))#candidate|4892|(1144,)|var|bool
output = func_4890(var_4891,var_4892,)
func_4893 = relay.Function([var_4891,var_4892,], output)
mutated_mod['func_4893'] = func_4893
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3085_call = mod.get_global_var('func_3085')
func_3086_call = mutated_mod.get_global_var('func_3086')
call_4931 = relay.TupleGetItem(func_3085_call(), 1)
call_4932 = relay.TupleGetItem(func_3086_call(), 1)
func_2261_call = mod.get_global_var('func_2261')
func_2263_call = mutated_mod.get_global_var('func_2263')
call_4942 = func_2261_call()
call_4943 = func_2261_call()
output = relay.Tuple([call_4931,call_4942,])
output2 = relay.Tuple([call_4932,call_4943,])
func_4949 = relay.Function([], output)
mod['func_4949'] = func_4949
mod = relay.transform.InferType()(mod)
mutated_mod['func_4949'] = func_4949
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4949_call = mutated_mod.get_global_var('func_4949')
call_4950 = func_4949_call()
output = call_4950
func_4951 = relay.Function([], output)
mutated_mod['func_4951'] = func_4951
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3678_call = mod.get_global_var('func_3678')
func_3679_call = mutated_mod.get_global_var('func_3679')
call_4984 = relay.TupleGetItem(func_3678_call(), 0)
call_4985 = relay.TupleGetItem(func_3679_call(), 0)
output = relay.Tuple([call_4984,])
output2 = relay.Tuple([call_4985,])
func_4994 = relay.Function([], output)
mod['func_4994'] = func_4994
mod = relay.transform.InferType()(mod)
output = func_4994()
func_4995 = relay.Function([], output)
mutated_mod['func_4995'] = func_4995
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1498_call = mod.get_global_var('func_1498')
func_1500_call = mutated_mod.get_global_var('func_1500')
call_4996 = func_1498_call()
call_4997 = func_1498_call()
func_4330_call = mod.get_global_var('func_4330')
func_4332_call = mutated_mod.get_global_var('func_4332')
call_5022 = relay.TupleGetItem(func_4330_call(), 0)
call_5023 = relay.TupleGetItem(func_4332_call(), 0)
func_4330_call = mod.get_global_var('func_4330')
func_4332_call = mutated_mod.get_global_var('func_4332')
call_5029 = relay.TupleGetItem(func_4330_call(), 0)
call_5030 = relay.TupleGetItem(func_4332_call(), 0)
output = relay.Tuple([call_4996,call_5022,call_5029,])
output2 = relay.Tuple([call_4997,call_5023,call_5030,])
func_5040 = relay.Function([], output)
mod['func_5040'] = func_5040
mod = relay.transform.InferType()(mod)
output = func_5040()
func_5041 = relay.Function([], output)
mutated_mod['func_5041'] = func_5041
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2910_call = mod.get_global_var('func_2910')
func_2911_call = mutated_mod.get_global_var('func_2911')
call_5049 = relay.TupleGetItem(func_2910_call(), 0)
call_5050 = relay.TupleGetItem(func_2911_call(), 0)
func_2286_call = mod.get_global_var('func_2286')
func_2288_call = mutated_mod.get_global_var('func_2288')
call_5056 = relay.TupleGetItem(func_2286_call(), 0)
call_5057 = relay.TupleGetItem(func_2288_call(), 0)
output = relay.Tuple([call_5049,call_5056,])
output2 = relay.Tuple([call_5050,call_5057,])
func_5096 = relay.Function([], output)
mod['func_5096'] = func_5096
mod = relay.transform.InferType()(mod)
output = func_5096()
func_5097 = relay.Function([], output)
mutated_mod['func_5097'] = func_5097
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3222_call = mod.get_global_var('func_3222')
func_3224_call = mutated_mod.get_global_var('func_3224')
call_5126 = relay.TupleGetItem(func_3222_call(), 0)
call_5127 = relay.TupleGetItem(func_3224_call(), 0)
func_3924_call = mod.get_global_var('func_3924')
func_3926_call = mutated_mod.get_global_var('func_3926')
const_5189 = relay.const([[False,True],[False,True],[True,True],[False,False],[True,True],[False,False],[True,True],[True,True],[False,False],[False,False],[True,True],[False,False],[False,False],[True,False],[True,False],[False,True],[True,False],[False,False],[True,False],[False,False],[True,False],[True,False],[False,False],[True,False],[False,True],[False,False],[True,False],[False,True],[True,True],[True,False],[False,False],[True,True],[False,True],[False,False],[True,False],[False,False],[True,True],[False,True],[False,True],[True,False],[True,False],[False,False],[False,False],[True,True],[False,False],[True,False],[False,False],[True,True],[True,True],[True,False],[False,True],[False,True],[True,False],[False,True],[False,True],[True,True],[True,False],[True,False],[False,False],[True,False],[False,True],[False,True],[True,False],[False,True],[True,True],[True,True],[False,False],[False,True],[False,False],[False,False],[False,False],[True,True],[False,False],[True,False],[False,True],[True,True],[False,True],[False,True],[True,False],[False,True],[True,False],[False,True],[False,True],[True,False],[True,True],[True,True],[True,False],[True,True],[True,False],[False,True],[True,True],[False,True],[False,False],[True,False],[False,True],[True,True],[True,True],[True,True],[False,False],[False,False],[True,True],[True,True],[True,False],[False,False],[True,False],[False,False],[True,False],[False,False],[True,True],[False,True],[False,True],[True,False],[False,False],[True,True],[False,True],[True,True],[False,False],[False,False],[True,True],[False,False],[True,False],[False,True],[True,False],[True,False],[True,True],[True,False],[False,False],[False,False],[False,True],[True,False],[True,False],[False,True],[True,False],[True,False],[True,False],[False,True],[False,False],[False,True],[True,True],[True,False],[False,True],[False,False],[True,False],[False,False],[False,False],[False,True],[False,False],[False,True],[True,False],[True,False],[False,True],[True,False],[False,True],[False,True],[False,True],[True,False],[False,False],[False,False],[False,True],[False,False],[True,False],[True,True],[True,False],[True,False],[False,False],[False,False],[False,False],[False,False],[True,False],[True,False],[False,False],[False,False],[False,True],[False,True],[False,False],[True,True],[True,True],[False,False],[True,True],[False,True],[False,False],[True,False],[False,True],[False,False],[False,True],[False,False],[True,False],[False,False],[True,True],[True,True],[True,False],[False,False],[True,True],[False,False],[False,False],[True,False],[True,False],[False,True],[False,False],[True,False],[True,True],[False,True],[False,False],[True,True],[True,False],[True,True],[False,True],[True,False],[False,False],[False,True],[False,False],[True,True],[False,False],[True,False],[False,False],[False,False],[False,False],[True,False],[True,False],[True,False],[False,False],[True,False],[False,True],[False,False],[True,True],[True,True],[True,True],[True,True],[True,False],[False,True],[False,False],[True,False],[True,False],[False,False],[False,False],[False,False],[False,False],[True,False],[True,True],[True,False],[False,False],[True,True],[True,False],[True,False],[False,True],[False,True],[True,True],[True,False],[False,False],[False,False],[False,True],[True,False],[True,False],[True,False],[True,False],[False,False],[False,True],[True,False],[False,False],[False,False],[True,False],[True,True],[False,True],[True,False],[True,False],[False,True],[True,True],[True,False],[True,False],[False,True],[False,False],[True,True],[True,False],[True,True],[True,True],[False,False],[False,True],[True,False],[False,True],[False,True],[True,False],[False,False],[False,False],[False,True],[False,False],[False,True],[False,True],[False,True],[False,True],[True,True],[False,True],[True,False],[False,True],[False,True],[False,False],[False,True],[True,True],[True,True],[True,True],[False,True],[True,True],[False,True],[False,False],[False,False],[True,True],[True,False],[False,True],[False,True],[False,True],[False,False],[True,False],[True,False],[True,False],[True,False],[True,False],[False,False],[True,False],[True,True],[True,True],[False,False],[True,True],[False,True],[False,True],[False,False],[False,False],[False,True],[True,True],[False,False],[True,True],[True,False],[True,True],[False,False],[True,True],[False,False],[True,False],[True,False],[True,True],[True,False],[False,False],[False,False],[False,True],[False,True],[False,False],[False,False],[True,True],[False,True],[False,True],[True,True],[False,True],[False,True],[True,True],[True,True],[False,True],[True,True],[True,True],[True,True],[False,True],[True,True],[True,True],[True,True],[False,True],[False,False],[False,True],[True,True],[True,True],[False,False],[False,False],[True,True],[True,False],[False,False],[False,True],[True,False],[True,False],[True,False],[True,False],[True,True],[False,True],[True,False],[True,True],[True,False],[False,False],[False,True],[False,False],[False,True],[False,False],[True,False],[True,False],[True,False],[True,False],[True,False],[True,False],[False,True],[False,True],[True,True],[False,True],[True,True],[True,True],[False,True],[True,False],[False,False],[False,True],[False,True],[True,True],[False,False],[False,True],[True,True],[True,True],[False,True],[False,True],[False,True],[False,True],[False,True],[True,False],[False,False],[False,False],[False,False],[True,True],[True,True],[False,True],[True,False],[False,False],[True,False],[True,True],[True,False],[True,False],[True,True],[True,True],[True,False],[True,True],[True,True],[False,True],[True,True],[False,False],[False,True],[False,False],[True,False],[False,True],[False,False],[False,False],[False,True],[False,True],[True,True],[False,False],[False,True],[True,True],[False,True],[False,True],[True,True],[True,True],[False,True],[True,True],[False,False],[False,False],[False,True],[False,False],[False,False],[True,True],[False,True],[True,False],[False,True],[True,False],[False,True],[True,True],[False,False],[True,False],[False,False],[False,False],[False,False],[False,False],[True,True],[False,False],[True,True],[True,True],[False,True],[True,False],[False,False],[False,False],[False,True],[False,False],[False,True],[True,False],[True,True],[False,False],[True,False],[False,True],[True,True],[True,True],[False,False],[False,True],[True,False],[True,True],[False,False],[False,False],[True,False],[True,True],[True,False],[True,False],[True,True],[False,False],[False,True],[True,True],[False,False],[False,False],[True,True],[True,False],[True,True],[False,True],[True,False],[False,False],[False,True],[False,True],[True,True],[True,False],[True,False],[False,True],[True,False],[False,True],[False,True],[True,True],[False,True],[False,True],[False,False],[False,True],[False,False],[True,False],[True,True],[True,False],[True,False],[False,False],[False,True],[True,True],[True,True],[False,True],[False,False],[True,False],[True,True],[True,True],[True,False],[False,True],[False,True],[True,False],[True,False],[False,False],[False,True],[False,True],[False,True],[False,True],[False,True],[False,True],[True,True],[True,False],[False,True],[True,True],[True,True],[False,True],[False,True],[True,True],[True,False],[True,False],[True,True],[True,True],[False,True],[False,True],[False,False],[False,True],[False,True],[True,False],[False,False],[False,True],[True,False],[True,False],[False,False]], dtype = "bool")#candidate|5189|(572, 2)|const|bool
call_5188 = relay.TupleGetItem(func_3924_call(relay.reshape(const_5189.astype('bool'), [1144,])), 0)
call_5190 = relay.TupleGetItem(func_3926_call(relay.reshape(const_5189.astype('bool'), [1144,])), 0)
output = relay.Tuple([call_5126,call_5188,const_5189,])
output2 = relay.Tuple([call_5127,call_5190,const_5189,])
func_5192 = relay.Function([], output)
mod['func_5192'] = func_5192
mod = relay.transform.InferType()(mod)
mutated_mod['func_5192'] = func_5192
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5192_call = mutated_mod.get_global_var('func_5192')
call_5193 = func_5192_call()
output = call_5193
func_5194 = relay.Function([], output)
mutated_mod['func_5194'] = func_5194
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4776_call = mod.get_global_var('func_4776')
func_4778_call = mutated_mod.get_global_var('func_4778')
call_5290 = relay.TupleGetItem(func_4776_call(), 1)
call_5291 = relay.TupleGetItem(func_4778_call(), 1)
const_5294 = relay.const([[[-1.434157,-0.756115,3.039976,6.307891,8.993300,-5.750720,-3.558472,-7.329872,5.562754,4.758448],[8.784010,0.519728,-8.406127,9.225845,-5.180268,-3.407745,0.913540,7.915500,4.444430,-5.954608],[-7.697563,-9.082881,-3.953656,-7.557343,7.765388,-6.216293,0.679718,5.971021,-7.090797,7.153360],[-7.618762,5.795126,-2.071957,-0.098496,4.714309,-3.952695,2.474263,-1.010092,4.887799,2.888059],[-1.969345,-4.390332,-6.248709,7.894542,-2.297276,7.749185,3.028238,-3.284660,2.058784,2.948901],[2.626920,6.802318,-8.486483,-7.619314,-4.224896,-7.345567,3.986469,-8.278563,2.373938,-7.892992],[-6.491914,-4.369742,-2.950842,0.662085,7.715215,-3.241775,9.387444,-7.243555,1.441635,3.975222]],[[-6.669664,-5.933238,-7.647168,7.460669,6.226946,2.372526,-7.821542,5.189284,-5.127907,-1.476172],[2.367801,-9.854304,-0.827608,8.071490,8.435442,3.274065,-4.217445,9.636838,-6.103994,-1.961024],[-2.012796,7.614434,4.136939,4.829240,-8.789846,-2.567160,-5.052691,-1.687012,5.601089,-5.933422],[-7.711103,-3.017074,-3.808443,-6.843658,7.466699,-8.641815,-0.335211,-3.990784,-9.094876,-5.286811],[3.158291,-3.502705,7.893137,5.359473,-8.922038,-4.245739,7.323198,-1.466497,-5.235055,5.613609],[0.964367,-1.068693,2.545173,-1.688588,-0.183351,-6.767951,8.805968,-3.608644,8.134186,0.981882],[3.029713,4.980752,-8.685895,-4.634542,-0.346878,-1.570009,8.018939,9.967892,2.212215,-3.043246]],[[-1.770786,-8.399984,-5.740983,2.559853,-5.154725,9.990838,-1.457780,-1.706539,-3.076371,7.233950],[-6.908055,7.254062,-0.268135,9.475361,-4.856533,-2.004127,-1.324849,-2.316071,5.681004,6.992436],[-2.357615,0.920623,2.451174,2.728846,6.799484,-6.339330,7.572421,1.968368,-6.612625,9.280683],[4.492513,-4.654926,-6.431910,-0.061530,-4.511963,8.281144,-0.742318,1.839623,3.707231,-5.548448],[2.295123,-7.315122,-6.491142,7.480581,-0.806811,3.730079,-8.221099,-8.965730,-7.597812,-9.121033],[-4.978103,8.982903,-5.268345,-5.368073,1.437136,-8.335770,9.297888,9.500695,5.242722,-2.398535],[-2.621375,2.825805,7.572477,4.051836,-5.919987,-7.157504,-9.458666,4.797251,-2.415652,-7.403876]],[[-7.457219,8.019292,2.857165,3.562955,6.349966,3.419424,6.856250,-5.037259,-5.488638,-3.017353],[0.950516,2.238480,-9.753577,-9.964238,-1.676316,3.508318,-7.627583,-7.752948,3.319570,-3.130350],[4.235804,-1.832918,-4.853130,-3.751885,4.561138,0.102130,9.274420,-5.164855,1.121466,2.113567],[5.430911,7.535619,6.023492,0.742177,7.397266,5.899724,9.432465,-5.802858,-7.732487,-7.843566],[3.975071,-7.170701,-6.586597,2.277648,4.962639,5.653245,3.389787,-7.858689,-0.992137,8.711931],[3.187133,2.821292,7.381563,-5.299982,-6.235942,7.701806,-1.028899,-2.663418,-9.797626,3.581024],[-5.844341,-9.687551,6.243266,-9.112395,-1.075553,8.410520,-5.762527,3.109702,-6.210054,1.973761]],[[-4.588596,9.350370,-4.118433,-6.731288,3.566375,1.520997,-9.418872,8.544440,-9.524311,-4.595900],[0.665971,4.850401,-6.056484,3.928889,-3.591033,3.154267,3.773651,-8.642376,-6.929281,-3.432078],[-5.015880,-0.911384,7.993004,-7.253132,4.225315,5.129768,-9.368386,5.951590,7.415378,-1.121033],[4.989532,-0.753607,-2.299061,0.794430,0.287139,-1.386556,5.232232,3.035810,-1.578475,-1.723711],[-1.065263,-7.693802,-1.150030,8.370219,6.003935,-1.394522,6.977824,8.069227,8.969701,-3.838465],[1.900541,-0.518741,7.192762,7.769479,5.896826,-8.324351,4.876209,-3.534792,-7.424438,6.116475],[5.151475,-9.457090,3.589638,-8.156441,-6.777561,0.215945,1.162638,-0.131132,1.767173,-3.347462]],[[-1.777483,-0.329311,-3.639311,0.799143,-4.651851,-4.748416,-8.049776,-1.954492,-6.390854,-4.556616],[-8.055621,-0.243158,6.155129,-8.912934,5.208274,5.666928,2.765388,6.676975,4.035510,-6.964561],[-8.150977,6.756951,-2.947889,-7.770169,4.848101,8.430592,-5.395670,1.117344,6.861671,0.905499],[9.751171,-4.079403,-0.403684,-3.877772,-0.676294,-8.531039,5.663594,-5.911313,5.964658,-1.352899],[4.823195,-1.596892,-6.041519,-4.194746,-2.128580,-5.440088,-6.856577,-1.845226,-9.083120,-3.904917],[-0.495750,2.130979,4.895386,9.489716,-7.859231,4.659606,1.815140,-0.993288,0.017776,6.481200],[-0.164511,5.100923,-7.113696,6.465682,-9.840026,-1.772640,-1.402806,-9.159621,7.611132,6.823206]],[[-8.649978,5.553540,-5.739288,3.398008,-1.341071,9.203320,-9.358148,-6.341955,3.032230,5.695245],[5.530100,-9.777361,-9.873099,1.380029,-5.386431,9.482154,4.869425,-5.573587,-5.707950,-9.406827],[1.437659,7.269033,-3.348280,-7.192821,-7.399037,-8.708615,0.367479,7.131629,4.000150,5.714933],[5.291733,-5.565651,-9.155517,8.143526,-6.468123,9.384851,9.588831,8.653432,-4.682270,3.543376],[-2.358955,7.502438,-3.595589,1.986333,1.586578,4.952225,7.154528,-1.600555,1.020216,4.267740],[0.154451,8.935746,5.692345,-1.431107,-3.334963,-2.168702,6.524249,8.784628,7.780473,-6.286790],[5.922289,8.287224,1.254886,-1.132831,8.524712,9.129374,4.376595,-5.345480,4.880004,-3.150075]],[[-0.918260,-5.185475,-4.337240,-7.702670,-8.106784,6.308358,-6.828004,5.203236,-4.603001,-0.615899],[9.015465,-0.537075,-2.450674,1.522407,7.050848,-3.170676,8.344539,-8.639349,-6.890754,3.667127],[9.491299,-9.284804,5.887720,0.474954,-6.116819,-7.365196,9.629802,-6.655181,4.552702,-0.413567],[1.953373,-1.422322,2.877768,1.814544,5.526421,8.273463,4.051934,5.098325,8.901701,-5.542189],[-5.450127,1.191925,4.106981,-8.481315,6.043746,3.461088,0.416536,0.677792,-8.780589,-6.467549],[2.582147,-6.942772,6.308738,-4.667197,9.953753,-3.444463,8.824306,3.162391,1.557271,5.203181],[-3.606704,-1.571113,-3.532166,8.645649,-7.247393,7.029263,4.073404,-6.480106,4.924880,8.778139]],[[6.574652,-1.213162,5.958367,7.123190,0.078435,6.825820,4.323965,9.574012,-2.668288,5.485248],[-3.122712,-7.273688,-6.017311,6.802043,1.336003,-8.727252,-7.564678,5.443484,7.571043,3.728727],[1.664293,-3.058265,-4.635305,2.107489,-4.806916,7.162483,3.310238,-9.040684,-0.527435,0.278394],[-1.354793,-2.241333,-9.718078,-1.710309,-4.388570,9.492283,0.601437,-8.838702,5.513094,-4.618330],[-1.702319,0.550868,6.684827,-5.077377,2.287113,-1.503721,3.942929,-3.088760,-5.015979,7.012383],[-2.853339,1.750746,2.389786,4.559162,7.612730,-8.544871,0.359411,0.779114,-4.131791,-8.449905],[7.486927,1.423960,1.556040,-7.224114,0.940854,-7.360057,-5.005907,8.083648,-2.723739,9.168302]],[[-6.879896,5.776911,7.648986,-8.765966,-9.414269,4.993128,0.721763,9.001162,-3.189214,2.702919],[6.513828,-7.911884,7.233180,4.436132,-1.485864,0.388212,9.100518,1.108173,7.796040,-2.333861],[-1.098507,5.836649,-4.453759,3.108970,-8.237867,-9.917927,-4.141023,-0.760657,-0.771135,8.354903],[-6.640800,0.387995,-7.355735,-2.942122,7.561097,4.526493,-4.793404,3.368895,4.707273,3.229469],[4.249733,-6.100987,-5.672553,8.680843,-6.085464,-4.731501,2.974008,-2.239984,-8.521324,4.711914],[5.581222,6.048333,0.674720,4.423823,0.206637,9.847104,-2.249111,4.124512,-7.680082,-4.288421],[1.905337,5.758116,-4.794916,-2.507006,-0.002302,-5.957758,0.293868,1.494984,2.675326,2.234804]],[[0.321252,9.684733,-3.688201,2.127337,-5.757745,-1.756993,-2.439788,-2.291973,4.423262,0.472605],[6.683939,-2.715505,6.720156,4.670993,-6.910362,-6.165183,7.609748,1.813306,-0.017369,-3.119860],[-3.582597,-3.122814,-5.192651,-4.441715,-7.883163,8.536988,2.694617,-6.519378,9.868919,1.115149],[-0.131261,-6.827227,-0.713429,-8.695917,-1.787832,8.675761,9.211365,2.795064,-4.896534,2.344236],[4.222056,-5.901010,-4.785332,6.803173,3.227578,8.550872,-0.245581,8.641640,-9.157749,0.075672],[6.379341,3.586741,1.212347,-7.803977,-6.728529,-0.742194,3.003938,5.218612,2.764219,5.458766],[0.879873,-6.578677,-5.985127,-2.560022,9.491981,4.332055,-4.250604,2.046025,0.379281,-9.506338]],[[-6.514432,0.741240,5.883586,4.968215,-4.518297,6.943953,-8.549301,9.576272,-1.978496,5.873466],[-8.180626,-0.582329,3.511768,-9.409928,8.906215,3.204992,3.381950,9.398314,1.414988,4.155769],[-3.752833,3.828066,-2.491649,3.385974,7.966519,2.590346,-3.804902,-0.593211,0.829590,-5.758914],[1.293543,-4.041717,8.701813,-1.262165,9.897642,-1.911236,-9.099821,-1.633902,-1.336684,3.498460],[-6.498835,0.369250,-7.983053,-5.074846,-5.127390,2.050378,-6.274618,-2.137411,3.931661,-2.838472],[-7.944244,-8.083412,9.280602,-0.669223,7.147472,0.625830,-0.294677,-1.837711,-9.930135,-4.060305],[5.172787,8.736514,-9.620388,3.200108,-8.282073,-8.155295,-5.043190,1.618564,7.291445,-9.807143]],[[-6.952710,-9.091211,-0.394889,2.654547,1.790675,-8.576963,1.331864,2.528703,5.507035,-1.849216],[-2.455068,9.657178,9.458008,-5.330735,-8.341552,6.708728,-3.245958,1.353365,-5.029557,-0.605962],[-2.382475,3.401085,-5.845138,0.537426,7.304801,5.702658,-6.278783,0.095194,1.952943,-8.848518],[-6.011824,-5.603365,6.113171,9.072508,2.738521,-7.050582,-9.474278,7.308409,-3.465201,2.015440],[-6.818021,1.968471,6.105978,3.580832,2.697507,-1.705805,4.064569,-5.508804,-7.907983,6.608717],[3.266985,3.762572,8.249974,-4.471478,-7.504275,0.348253,-0.314079,2.245857,8.625807,3.190372],[2.699766,-0.134969,-4.609680,1.876079,6.320874,-6.417119,-8.324799,-2.041492,0.803678,6.479543]],[[-1.430039,-4.516891,-4.887115,-8.640590,-7.820750,-9.034767,3.009600,2.545532,8.819247,-1.404128],[6.041902,-8.562559,9.760321,9.505359,4.999363,-8.698650,3.128223,8.128252,-4.285839,-1.109906],[2.766312,-6.872303,0.033149,-5.864322,0.742398,7.002046,-1.914035,-6.574494,7.780089,-4.905731],[1.605157,-7.915698,8.106988,-1.881257,-4.704854,1.982875,9.364387,-4.535422,4.356886,8.858374],[-7.877302,3.448629,-4.699473,-5.442873,3.707109,0.944406,2.768903,4.621250,0.355882,-6.194485],[-5.059539,8.255201,-5.842915,5.298186,-4.943953,-7.919018,8.728432,0.308624,3.604215,5.326816],[-6.933687,8.180643,8.588872,3.308966,-0.488931,-2.955471,7.692597,-8.041228,9.458708,1.321179]],[[5.606663,-1.593267,4.157142,-6.858913,3.905199,4.182527,-5.452597,0.031785,9.704535,-9.011683],[4.196683,3.161529,-9.344180,-6.359331,9.577953,-4.278801,3.997419,3.179514,-4.273946,3.953679],[-7.353380,-9.753935,-3.424206,-4.223648,-3.336453,8.808094,5.318723,-3.298227,8.591709,4.339136],[-1.445022,7.206143,5.920319,-8.348032,-1.807548,6.464902,-5.390934,-7.228860,-6.570542,-4.833581],[3.624582,-6.977372,-3.548385,6.362288,7.791295,-7.445865,-5.588924,3.369290,6.079829,4.752393],[5.429311,-2.720460,-0.682325,-0.653417,4.676149,8.395327,8.514619,3.648152,-3.913432,3.129766],[0.178667,2.071731,5.084907,5.225085,-0.416229,-3.476351,-9.693550,7.696124,3.094131,7.427280]]], dtype = "float32")#candidate|5294|(15, 7, 10)|const|float32
bop_5295 = relay.subtract(call_5290.astype('float32'), relay.reshape(const_5294.astype('float32'), relay.shape_of(call_5290))) # shape=(15, 7, 10)
bop_5298 = relay.subtract(call_5291.astype('float32'), relay.reshape(const_5294.astype('float32'), relay.shape_of(call_5291))) # shape=(15, 7, 10)
output = relay.Tuple([bop_5295,])
output2 = relay.Tuple([bop_5298,])
func_5308 = relay.Function([], output)
mod['func_5308'] = func_5308
mod = relay.transform.InferType()(mod)
mutated_mod['func_5308'] = func_5308
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5308_call = mutated_mod.get_global_var('func_5308')
call_5309 = func_5308_call()
output = call_5309
func_5310 = relay.Function([], output)
mutated_mod['func_5310'] = func_5310
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3678_call = mod.get_global_var('func_3678')
func_3679_call = mutated_mod.get_global_var('func_3679')
call_5471 = relay.TupleGetItem(func_3678_call(), 0)
call_5472 = relay.TupleGetItem(func_3679_call(), 0)
var_5482 = relay.var("var_5482", dtype = "float32", shape = (12, 5, 15))#candidate|5482|(12, 5, 15)|var|float32
bop_5483 = relay.minimum(call_5471.astype('float64'), relay.reshape(var_5482.astype('float64'), relay.shape_of(call_5471))) # shape=(12, 5, 15)
bop_5486 = relay.minimum(call_5472.astype('float64'), relay.reshape(var_5482.astype('float64'), relay.shape_of(call_5472))) # shape=(12, 5, 15)
func_1563_call = mod.get_global_var('func_1563')
func_1564_call = mutated_mod.get_global_var('func_1564')
call_5488 = relay.TupleGetItem(func_1563_call(), 1)
call_5489 = relay.TupleGetItem(func_1564_call(), 1)
func_4242_call = mod.get_global_var('func_4242')
func_4243_call = mutated_mod.get_global_var('func_4243')
call_5506 = relay.TupleGetItem(func_4242_call(), 0)
call_5507 = relay.TupleGetItem(func_4243_call(), 0)
func_3325_call = mod.get_global_var('func_3325')
func_3328_call = mutated_mod.get_global_var('func_3328')
var_5509 = relay.var("var_5509", dtype = "float32", shape = (1152,))#candidate|5509|(1152,)|var|float32
call_5508 = func_3325_call(relay.reshape(var_5509.astype('float32'), [12, 16, 6]))
call_5510 = func_3325_call(relay.reshape(var_5509.astype('float32'), [12, 16, 6]))
uop_5527 = relay.tan(call_5471.astype('float64')) # shape=(12, 5, 15)
uop_5529 = relay.tan(call_5472.astype('float64')) # shape=(12, 5, 15)
output = relay.Tuple([bop_5483,call_5488,call_5506,call_5508,var_5509,uop_5527,])
output2 = relay.Tuple([bop_5486,call_5489,call_5507,call_5510,var_5509,uop_5529,])
func_5536 = relay.Function([var_5482,var_5509,], output)
mod['func_5536'] = func_5536
mod = relay.transform.InferType()(mod)
var_5537 = relay.var("var_5537", dtype = "float32", shape = (12, 5, 15))#candidate|5537|(12, 5, 15)|var|float32
var_5538 = relay.var("var_5538", dtype = "float32", shape = (1152,))#candidate|5538|(1152,)|var|float32
output = func_5536(var_5537,var_5538,)
func_5539 = relay.Function([var_5537,var_5538,], output)
mutated_mod['func_5539'] = func_5539
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4708_call = mod.get_global_var('func_4708')
func_4710_call = mutated_mod.get_global_var('func_4710')
call_5594 = relay.TupleGetItem(func_4708_call(), 4)
call_5595 = relay.TupleGetItem(func_4710_call(), 4)
func_1498_call = mod.get_global_var('func_1498')
func_1500_call = mutated_mod.get_global_var('func_1500')
call_5598 = func_1498_call()
call_5599 = func_1498_call()
func_1738_call = mod.get_global_var('func_1738')
func_1741_call = mutated_mod.get_global_var('func_1741')
var_5615 = relay.var("var_5615", dtype = "uint32", shape = (336,))#candidate|5615|(336,)|var|uint32
call_5614 = relay.TupleGetItem(func_1738_call(relay.reshape(var_5615.astype('uint32'), [336,])), 5)
call_5616 = relay.TupleGetItem(func_1741_call(relay.reshape(var_5615.astype('uint32'), [336,])), 5)
output = relay.Tuple([call_5594,call_5598,call_5614,var_5615,])
output2 = relay.Tuple([call_5595,call_5599,call_5616,var_5615,])
func_5625 = relay.Function([var_5615,], output)
mod['func_5625'] = func_5625
mod = relay.transform.InferType()(mod)
var_5626 = relay.var("var_5626", dtype = "uint32", shape = (336,))#candidate|5626|(336,)|var|uint32
output = func_5625(var_5626)
func_5627 = relay.Function([var_5626], output)
mutated_mod['func_5627'] = func_5627
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5649 = relay.var("var_5649", dtype = "float64", shape = (13, 15, 2))#candidate|5649|(13, 15, 2)|var|float64
uop_5650 = relay.asin(var_5649.astype('float64')) # shape=(13, 15, 2)
output = uop_5650
output2 = uop_5650
func_5657 = relay.Function([var_5649,], output)
mod['func_5657'] = func_5657
mod = relay.transform.InferType()(mod)
mutated_mod['func_5657'] = func_5657
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5658 = relay.var("var_5658", dtype = "float64", shape = (13, 15, 2))#candidate|5658|(13, 15, 2)|var|float64
func_5657_call = mutated_mod.get_global_var('func_5657')
call_5659 = func_5657_call(var_5658)
output = call_5659
func_5660 = relay.Function([var_5658], output)
mutated_mod['func_5660'] = func_5660
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1563_call = mod.get_global_var('func_1563')
func_1564_call = mutated_mod.get_global_var('func_1564')
call_5811 = relay.TupleGetItem(func_1563_call(), 3)
call_5812 = relay.TupleGetItem(func_1564_call(), 3)
func_4526_call = mod.get_global_var('func_4526')
func_4528_call = mutated_mod.get_global_var('func_4528')
call_5827 = func_4526_call()
call_5828 = func_4526_call()
output = relay.Tuple([call_5811,call_5827,])
output2 = relay.Tuple([call_5812,call_5828,])
func_5839 = relay.Function([], output)
mod['func_5839'] = func_5839
mod = relay.transform.InferType()(mod)
output = func_5839()
func_5840 = relay.Function([], output)
mutated_mod['func_5840'] = func_5840
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5864 = relay.const([[[-6.600681],[-5.005764],[-9.824749],[-9.393574],[7.703725],[-9.665767],[-7.879126],[0.789819]],[[-5.258410],[7.192240],[0.333180],[2.492679],[-9.102910],[-6.769091],[-9.946386],[-4.255266]],[[5.074132],[3.866442],[8.148817],[1.323653],[7.492698],[7.112857],[-6.814075],[7.533480]],[[3.099700],[0.335175],[6.340451],[5.478292],[-2.287807],[1.402617],[3.426624],[-9.915300]]], dtype = "float32")#candidate|5864|(4, 8, 1)|const|float32
uop_5865 = relay.exp(const_5864.astype('float32')) # shape=(4, 8, 1)
bop_5891 = relay.greater(const_5864.astype('bool'), relay.reshape(uop_5865.astype('bool'), relay.shape_of(const_5864))) # shape=(4, 8, 1)
func_2832_call = mod.get_global_var('func_2832')
func_2834_call = mutated_mod.get_global_var('func_2834')
const_5914 = relay.const(False, dtype = "bool")#candidate|5914|()|const|bool
call_5913 = relay.TupleGetItem(func_2832_call(relay.reshape(const_5914.astype('bool'), [])), 0)
call_5915 = relay.TupleGetItem(func_2834_call(relay.reshape(const_5914.astype('bool'), [])), 0)
output = relay.Tuple([bop_5891,call_5913,const_5914,])
output2 = relay.Tuple([bop_5891,call_5915,const_5914,])
func_5926 = relay.Function([], output)
mod['func_5926'] = func_5926
mod = relay.transform.InferType()(mod)
output = func_5926()
func_5927 = relay.Function([], output)
mutated_mod['func_5927'] = func_5927
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3085_call = mod.get_global_var('func_3085')
func_3086_call = mutated_mod.get_global_var('func_3086')
call_5944 = relay.TupleGetItem(func_3085_call(), 3)
call_5945 = relay.TupleGetItem(func_3086_call(), 3)
output = relay.Tuple([call_5944,])
output2 = relay.Tuple([call_5945,])
func_5960 = relay.Function([], output)
mod['func_5960'] = func_5960
mod = relay.transform.InferType()(mod)
mutated_mod['func_5960'] = func_5960
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5960_call = mutated_mod.get_global_var('func_5960')
call_5961 = func_5960_call()
output = call_5961
func_5962 = relay.Function([], output)
mutated_mod['func_5962'] = func_5962
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4330_call = mod.get_global_var('func_4330')
func_4332_call = mutated_mod.get_global_var('func_4332')
call_5975 = relay.TupleGetItem(func_4330_call(), 0)
call_5976 = relay.TupleGetItem(func_4332_call(), 0)
output = relay.Tuple([call_5975,])
output2 = relay.Tuple([call_5976,])
func_5977 = relay.Function([], output)
mod['func_5977'] = func_5977
mod = relay.transform.InferType()(mod)
output = func_5977()
func_5978 = relay.Function([], output)
mutated_mod['func_5978'] = func_5978
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4354_call = mod.get_global_var('func_4354')
func_4356_call = mutated_mod.get_global_var('func_4356')
call_6088 = relay.TupleGetItem(func_4354_call(), 0)
call_6089 = relay.TupleGetItem(func_4356_call(), 0)
func_3085_call = mod.get_global_var('func_3085')
func_3086_call = mutated_mod.get_global_var('func_3086')
call_6095 = relay.TupleGetItem(func_3085_call(), 0)
call_6096 = relay.TupleGetItem(func_3086_call(), 0)
func_2944_call = mod.get_global_var('func_2944')
func_2945_call = mutated_mod.get_global_var('func_2945')
call_6109 = relay.TupleGetItem(func_2944_call(), 2)
call_6110 = relay.TupleGetItem(func_2945_call(), 2)
func_5839_call = mod.get_global_var('func_5839')
func_5840_call = mutated_mod.get_global_var('func_5840')
call_6118 = relay.TupleGetItem(func_5839_call(), 0)
call_6119 = relay.TupleGetItem(func_5840_call(), 0)
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
const_6143 = relay.const([4,9,1,8,-2,5,-8,3,-3,3,-8,10,8,9,4,-7,7,4,9,-1,10,10,-5,5,5,-1,8,8,-3,-8,-7,7,-10,-2,-6,-2,9,6,5,1,-1,5,-2,-5,-2,-5,-7,-2,7,8,9,10,9,1,9,-4,-2,10,-3,-2,6,-3,10,-2,1,10,7,5,8,-2,8,7,-6,-6,10,4,-3,-10,2,2,1,3,-2,6,6,6,3,-4,10,9,-7,-7,8,5,-1,-5,-7,-10,9,-8,3,9,-7,8,4,-7,-8,1,-4,-8,-1,7,1,8,5,-5,10,-6,-6,4,10,10,8,6,6,-8,6,9,-5,7,1,-10,-5,-9,1,-2,-5,-2,4,4,1,8,-9,5,4,-8,2,-7,4,-10,9,9,4,6,9,-7,4,-6,-4,9,-2,2,-2,-3,-7,5,-4,-8,6,-6,4,3,-3,-10,-1,5,-5,7,10,-8,-2,-10,7,-5,-4,8,-6,-5,-2,-6,-6,-6,9,-10,3,5,1,2,-5,-1,-7,6,-1,-10,8,6,6,6,-7,-6,4,-8,7,5,4,-9,-6,-4,-6,10,10,-9,-1,-4,1,1,-1,4,-6,10,-6,2,-5,-1,-1,-6,-8,-7,-8,-9,9,6,-6,8,9,5,8,-7,6,-4,8,7,-5,-7,5,3,4,6,10,-6,-3,-4,8,3,-9,10,7,3,2,-4,-6,3,-6,1,-2,-7,-8,5,2,2,5,7,9,-5,-2,10,-7,9,3,-1,7,-1,7,-2,3,8,-6,-1,9,-8,6,10,-2,-7,10,-1,4,-3,7,9,9,-8,-4,-10,5,-5,-5,-2,-5,3,5,-4,5,9,5,9,-5,1,-6,-4,8,-1,6,1,4,-9,-9,7,4,-5,6,-5,5,-4,-6,3,10,6,-9,9,2,-2,5,-6,-9,-10,-8,-8,2,5,8,3,-2,-6,-7,-6,-7,1,-10,-2,1,-2,8,4,-1,9,5,-9,-10,-9,2,-7,4,2,6,-10,8,8,3,-6,-8,-6,-7,-9,-10,4,-4,2,9,-1,-9,-4,5,3,-1,-4,5,2,-5,-9,-1,-8,3,4,-3,9,-6,-1,4,-2,-6,-5,-6,-5,10,-5,-8,-8,2,-5,7,-1,8,7,-7,-8,-7,3,10,6,1,-2,6,-2,-4,-7,2,7,9,1,-4,6,1,-5,-7,-2,-6,-7,-6,3,5,-2,-6,-6,-2,-1,-5,-6,-6,7,5,2,-6,4,-10,-2,4,2,3,-7,7,1,-4,-8,1,-2,5,-8,4,2,6,9,-8,-2,-10,-5,-4,9,-5,-8,2,-3,-5,9,10,1,5,-7,-2,-3,-5,-1,7,7,-7,-10,-5,6,-5,-7,-6,2,10,-2,6,7,6,-2,-8,-6,-4,-3,-1,-8,4,3,6,9,5,-2,-9,-4,-9,-7,-5,-3,1,-7,5,-3,3,-8,3,6,-1,1,-7,4,-1,-4,-7,-5,-1,3,8,-6,1,-9,-3,2,-3,-5,-10,-8,-1,-5,-9,7,3,-9,-7,1,9,4,-6,6,-1,-4,10,-10,-6,1,7,9,-9,2,-1,6,4,-4,6,4,2,6,9,5,5,3,4,-4,10,9,-3,-3,-4,-9,-8,-6,10,2,-2,-7,3,-8,3,9,2,-5,2,-1,-7,-7,-3,5,8,5,4,-6,-3,3,-10,7,10,-4,2,-1,6,-5,-2,6,-6,10,2,-7,2,-1,10,-2,-2,7,4,6,-9,-10,-9,-10,7,5,6,4,-1,8,-3,-4,-9,-10,2,-2,6,1,-10,10,-1,-9,-8,4,-8,-3,-5,9,-1,-8,4,1,3,5,2,-3,4,-9,6,4,-8,-6,-5,8,3,-6,-5,9,10,5,9,7,1,8,1,-3,8,-3,-4,6,6,-6,-2,3,9,5,8,-3,-10,-6,10,2,-9,-10,6,2,-1,-7,5,6,9,-4,-5,-6,6,8,3,8,4,7,-6,-6,-9,-2,4,-10,9,-10,1,-9,-9,-6,6,-4,-2,2,2,-6,10,7,4,-5,-1,7,-10,-10,-5,1,8,2,8,9,2,1,3,-6,-7,-2,-5,-10,-5,-3,-5,-2,2,5,1,-10,-7,-5,-10,9,-1,4,10,-10,-6,-5,-1,-6,-4,3,-4,8,-3,-4,-3,10,4,1,-10,8,8,-9,-2,-2,-7,-2,7,4,5,4,-1,-4,-8,6,8,6,-9,2,3,10,8,-2,-1,6,-2,-4,5,-7,-4,3,-9,7,5,9,-5,7,-10,10,-3,9,-9,10,2,-6,-4,-8,7,1,7,9,9,-5,7,2,2,-7,4,-4,9,-5,-9,4,-10,-10,-4,-1,7,4,1,-3,-9,3,-10,-2,-7,1,-1,3,-1,10,-2,-10,7,4,-2,-1,9,-4,1,9,-2,3,5,-7,-9,-2,8,-1,-8,10,-3,-10,-7,1,-2,-5,1,10,-3,2,3,-2,-8,5,9,-7,-8,-3,3,2,-6,-10,4,3,-8,-9,1,-2,-6,6,-2,-6,-1,-7,4,-10,6,-7,1,-8,-7,9,-8,-8,8,8,8,-2,4,3,-9,-8,2,-5,-7,9,-10,3,-9,-4,6,9,-7,-5,10,-9,-1,-2,-2,6,-10,3,-5,-9,9,1,5,-1,1,-3,4,-8,1,-7,-8,4,8,-9,-6,-9,-2,-10,10,-1,-5,-4,8,-3,-3,-4,1,-1,7,-4,-10,8,3,1,7,-8,6,-3,-3,5,-7,9,9,9,-1,9,-7,-3,2,6,6,6,-6,-8,5,7,4,-2,-7,9,5,9,-6,4,6,9,-4,6,4,-10,-7,1,-2,-4,-3,5,4,1,8,-8,-5,-8,4,10,-8,-8,-5,6,-3,6,-5,5,-7,-9,-2,-1,6,6,3,-9,-6,6,6,-9,-4,5,6,-1,8,7,-7,-5,-8,-4,-6,-4,9,-6,-1,4,-9,-5,10,-9,-5,8,-7,-6,3,7,-2,4,8,8,4,-7,2,-10,-9,3,-7,6,4,-10,2,8,8,-5,3,-8,-7,10,8,-4,-10,8,9,-3,6,10,1,-3,-2,-7,-4,-2,1,-10,5,-3,2,4,7,-4,3,2,4,4,4,2,8,8,-9,8,4,-9,-7,8,2,-9,-8,10,-8,9,-6,1,7,3,10,10,-3,8,3,3,10,4,-5,-9,9,-7,10,-8,9,-5,-1,1,-5,3,7,-7,10,-6,-6,-9,4,9,-4,-3,8,-2,-4,-4,-3,10,5,-8,1,-1,8,1,6,6,-6,-4,8,3,8,2,4,-3,1,3,5,8,-4,5,-10,-1,-9,-1,1,-10,1,2,6,-4,7,9,-3,-7,-8,8,-5,-6,-4,-3,1,7,5,-9,7,8,-3,7,-5,-5,-9,3,-2,8,6,-4,-5,2,2,-1,-7,2,7,7,4,-9,5,-6,-2,4,8,-6,-8,-4,-10,-9,5,8,-1,-6,-9,9,-8,2,1,-8,5,-3,2,3,-2,10,4,-9,-5,9,9,-7,-2,7,-6,-6,8,-3,-7,-4,-1,-6,4,-9,10,10,-7,-6,-7,-4,-9,3,-10,-10,7,5,10,-4,-7,-3,4,-8,-2,9,9,-2,6,6,4,-2,-9,10,10,-6,-8,6,2,-2,-8,4,6,6,3,-5,-5,9,-8,5,-4,7,-8,5,-8,-6,8,6,8,-4,-3,2,-10,1,-2,5,5,-10,-8,-7,-2,5,-3,-3,-4,-5,-10,2,-8,5,1,-5,-4,1,10,8,-1,1,7,-6,-3,-7,-8,2,-4,-5,8,1,-5,-6,10,-6,-9,4,2,-9,3,-1,-5,-6,-1,5,-2,-5,-9,-1,-5,2,5,1,10,-6,6,-3,-10,1,3,-3,2,-10,-7,4], dtype = "uint32")#candidate|6143|(1470,)|const|uint32
call_6142 = relay.TupleGetItem(func_54_call(relay.reshape(const_6143.astype('uint32'), [7, 15, 14])), 0)
call_6144 = relay.TupleGetItem(func_57_call(relay.reshape(const_6143.astype('uint32'), [7, 15, 14])), 0)
output = relay.Tuple([call_6088,call_6095,call_6109,call_6118,call_6142,const_6143,])
output2 = relay.Tuple([call_6089,call_6096,call_6110,call_6119,call_6144,const_6143,])
func_6161 = relay.Function([], output)
mod['func_6161'] = func_6161
mod = relay.transform.InferType()(mod)
mutated_mod['func_6161'] = func_6161
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6161_call = mutated_mod.get_global_var('func_6161')
call_6162 = func_6161_call()
output = call_6162
func_6163 = relay.Function([], output)
mutated_mod['func_6163'] = func_6163
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4456_call = mod.get_global_var('func_4456')
func_4458_call = mutated_mod.get_global_var('func_4458')
call_6198 = relay.TupleGetItem(func_4456_call(), 0)
call_6199 = relay.TupleGetItem(func_4458_call(), 0)
func_3924_call = mod.get_global_var('func_3924')
func_3926_call = mutated_mod.get_global_var('func_3926')
var_6203 = relay.var("var_6203", dtype = "bool", shape = (1144,))#candidate|6203|(1144,)|var|bool
call_6202 = relay.TupleGetItem(func_3924_call(relay.reshape(var_6203.astype('bool'), [1144,])), 1)
call_6204 = relay.TupleGetItem(func_3926_call(relay.reshape(var_6203.astype('bool'), [1144,])), 1)
func_2910_call = mod.get_global_var('func_2910')
func_2911_call = mutated_mod.get_global_var('func_2911')
call_6219 = relay.TupleGetItem(func_2910_call(), 0)
call_6220 = relay.TupleGetItem(func_2911_call(), 0)
uop_6223 = relay.sin(var_6203.astype('float64')) # shape=(1144,)
func_22_call = mod.get_global_var('func_22')
func_26_call = mutated_mod.get_global_var('func_26')
var_6234 = relay.var("var_6234", dtype = "float32", shape = (3, 12))#candidate|6234|(3, 12)|var|float32
var_6235 = relay.var("var_6235", dtype = "float32", shape = (360,))#candidate|6235|(360,)|var|float32
call_6233 = relay.TupleGetItem(func_22_call(relay.reshape(var_6234.astype('float32'), [1, 6, 6]), relay.reshape(var_6235.astype('float32'), [10, 6, 6]), ), 0)
call_6236 = relay.TupleGetItem(func_26_call(relay.reshape(var_6234.astype('float32'), [1, 6, 6]), relay.reshape(var_6235.astype('float32'), [10, 6, 6]), ), 0)
func_5977_call = mod.get_global_var('func_5977')
func_5978_call = mutated_mod.get_global_var('func_5978')
call_6241 = relay.TupleGetItem(func_5977_call(), 0)
call_6242 = relay.TupleGetItem(func_5978_call(), 0)
var_6243 = relay.var("var_6243", dtype = "float64", shape = (1144,))#candidate|6243|(1144,)|var|float64
bop_6244 = relay.less(uop_6223.astype('bool'), relay.reshape(var_6243.astype('bool'), relay.shape_of(uop_6223))) # shape=(1144,)
func_5657_call = mod.get_global_var('func_5657')
func_5660_call = mutated_mod.get_global_var('func_5660')
const_6248 = relay.const([[-7.715895,2.699931,-9.897446,7.077433,3.039633,-9.830326],[-1.083969,-4.891816,-4.548459,-3.014950,-7.819237,7.003158],[0.608357,6.962987,-2.427189,-3.476421,1.708894,-8.885478],[4.192260,-1.015851,-3.173343,1.662744,-9.319692,-8.073360],[3.741549,6.350602,0.418639,9.514980,8.545705,-9.528895],[9.593361,-4.505587,4.959808,-4.346457,3.786159,1.964633],[-9.522928,-4.175562,7.347702,2.525442,8.915939,-2.765799],[7.474472,1.335237,-9.234048,-0.871375,4.285783,-6.479826],[-5.931701,9.497923,-5.946101,3.612133,3.857618,2.697330],[-0.236101,6.229609,7.979507,5.599010,1.329453,5.807473],[-4.024132,1.678050,-4.662379,-4.141725,0.143926,-3.907142],[7.894905,-7.326945,1.694458,6.179121,-6.988687,2.450417],[-8.031074,-0.652698,-6.327406,1.452545,-7.226110,-4.506607],[4.503054,3.705317,-2.182088,-7.332260,1.417977,-6.820082],[-1.729484,6.795876,-6.211780,-1.083138,4.807032,-2.257044],[-2.799210,-1.708829,4.151538,7.868859,-0.252555,9.878026],[4.027766,-7.047082,-2.138919,1.964476,-9.665930,0.549974],[-0.931977,0.661614,-4.603403,2.288202,7.219253,9.707581],[-4.546866,9.192394,4.846288,5.334923,-8.619131,-7.594056],[-3.207794,9.171794,-2.033291,4.940876,-4.858185,-6.788256],[-5.140754,5.086123,8.938740,-5.233938,-0.977302,-5.743463],[-0.164667,-4.203436,8.053096,8.474704,-7.088645,-4.131323],[3.878348,7.754543,-2.478821,0.411911,2.647677,3.817055],[5.717326,-0.702518,4.869212,-8.069953,-8.132876,2.006337],[6.335238,3.554361,6.600455,-6.787478,2.599925,7.112244],[2.623325,6.758187,5.754047,0.913061,-4.661438,-5.458689],[2.254740,-7.321615,7.284303,0.020785,-2.423739,5.360942],[4.173903,5.430555,2.285011,-9.797158,6.302653,-4.872902],[-2.392927,1.331575,2.228137,8.746610,-1.846716,9.704236],[6.151722,-2.968111,5.523156,5.958031,4.312017,-4.036799],[7.932585,6.001115,-8.050101,-2.583251,-4.561910,7.980871],[4.827957,-4.398721,-4.896155,-6.989904,-2.060134,-8.142203],[-8.811226,-2.873525,-3.965633,-0.860983,-1.496837,-2.446188],[0.295374,1.222122,-8.245524,-0.663476,8.664711,-8.664219],[-3.917144,3.304995,8.204759,-8.354297,-6.559177,-0.829982],[7.520553,-7.096369,-8.046446,-7.978738,3.646885,6.748981],[4.168756,-9.146394,-5.062532,-9.485530,9.202702,-0.938314],[0.299685,-5.363469,3.419011,-1.615938,9.709320,-2.193005],[3.583735,-4.146429,2.927737,9.794238,6.648590,0.125291],[-5.450166,-7.073756,-5.254881,-2.770659,2.376812,3.351795],[4.723636,-8.883149,-8.684735,8.413943,7.560783,0.715690],[8.885905,9.270368,-8.113261,0.515335,2.256335,-2.614171],[-1.978623,3.055359,1.330108,-5.129577,2.659844,6.991125],[-1.298428,4.465536,-1.544400,-9.948452,2.573857,-7.222034],[-4.408570,-4.665976,8.873266,3.446748,-4.578531,-7.555909],[2.136609,-6.318159,4.429853,0.317128,-7.826777,6.850068],[4.918776,9.390193,-1.519987,-4.356036,7.874279,-5.418379],[7.187705,-3.562839,-3.349706,8.666767,8.622058,-8.212742],[7.046987,-4.152432,6.587286,9.784874,2.127694,7.028865],[-5.278305,1.925003,4.976587,3.235761,2.231372,-5.834601],[-4.114972,-7.801464,8.060558,-1.816536,-2.203481,2.254459],[-4.421836,-8.138655,2.208127,4.212180,7.191184,6.160735],[-9.246033,6.926047,-7.956915,-2.798693,4.146909,-3.365947],[1.439900,2.692072,-9.328645,3.400804,6.170192,-8.516759],[-9.346332,6.166135,-7.217137,-7.644362,1.145758,7.325118],[5.158701,-6.486927,-9.908972,3.348828,4.671164,7.463887],[8.677983,-2.504925,-1.867585,5.816973,5.259575,-4.390635],[1.491255,-7.162440,-8.459495,-2.254696,1.179113,-5.659575],[-0.927362,-4.471939,-7.184899,2.910079,-6.267662,2.199445],[-0.303506,1.583809,1.334696,-1.175098,-6.904378,5.690204],[-5.069426,-0.807871,-9.908895,7.558540,9.402559,-4.727754],[1.716067,3.416217,4.574886,-1.051759,-8.199052,3.688441],[0.796082,-7.243809,0.091760,-7.673531,-2.939367,9.912745],[4.583899,2.215900,-9.862757,-7.778838,8.750935,-8.699522],[-4.079653,-9.493392,-7.047788,-5.482228,6.122424,-3.106914]], dtype = "float64")#candidate|6248|(65, 6)|const|float64
call_6247 = func_5657_call(relay.reshape(const_6248.astype('float64'), [13, 15, 2]))
call_6249 = func_5657_call(relay.reshape(const_6248.astype('float64'), [13, 15, 2]))
output = relay.Tuple([call_6198,call_6202,call_6219,call_6233,var_6234,var_6235,call_6241,bop_6244,call_6247,const_6248,])
output2 = relay.Tuple([call_6199,call_6204,call_6220,call_6236,var_6234,var_6235,call_6242,bop_6244,call_6249,const_6248,])
func_6260 = relay.Function([var_6203,var_6234,var_6235,var_6243,], output)
mod['func_6260'] = func_6260
mod = relay.transform.InferType()(mod)
var_6261 = relay.var("var_6261", dtype = "bool", shape = (1144,))#candidate|6261|(1144,)|var|bool
var_6262 = relay.var("var_6262", dtype = "float32", shape = (3, 12))#candidate|6262|(3, 12)|var|float32
var_6263 = relay.var("var_6263", dtype = "float32", shape = (360,))#candidate|6263|(360,)|var|float32
var_6264 = relay.var("var_6264", dtype = "float64", shape = (1144,))#candidate|6264|(1144,)|var|float64
output = func_6260(var_6261,var_6262,var_6263,var_6264,)
func_6265 = relay.Function([var_6261,var_6262,var_6263,var_6264,], output)
mutated_mod['func_6265'] = func_6265
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6161_call = mod.get_global_var('func_6161')
func_6163_call = mutated_mod.get_global_var('func_6163')
call_6333 = relay.TupleGetItem(func_6161_call(), 5)
call_6334 = relay.TupleGetItem(func_6163_call(), 5)
output = relay.Tuple([call_6333,])
output2 = relay.Tuple([call_6334,])
func_6337 = relay.Function([], output)
mod['func_6337'] = func_6337
mod = relay.transform.InferType()(mod)
output = func_6337()
func_6338 = relay.Function([], output)
mutated_mod['func_6338'] = func_6338
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1298_call = mod.get_global_var('func_1298')
func_1300_call = mutated_mod.get_global_var('func_1300')
call_6344 = func_1298_call()
call_6345 = func_1298_call()
func_2261_call = mod.get_global_var('func_2261')
func_2263_call = mutated_mod.get_global_var('func_2263')
call_6360 = func_2261_call()
call_6361 = func_2261_call()
func_2910_call = mod.get_global_var('func_2910')
func_2911_call = mutated_mod.get_global_var('func_2911')
call_6362 = relay.TupleGetItem(func_2910_call(), 0)
call_6363 = relay.TupleGetItem(func_2911_call(), 0)
bop_6370 = relay.bitwise_or(call_6344.astype('int8'), relay.reshape(call_6360.astype('int8'), relay.shape_of(call_6344))) # shape=(12, 5, 15)
bop_6373 = relay.bitwise_or(call_6345.astype('int8'), relay.reshape(call_6361.astype('int8'), relay.shape_of(call_6345))) # shape=(12, 5, 15)
output = relay.Tuple([call_6362,bop_6370,])
output2 = relay.Tuple([call_6363,bop_6373,])
func_6390 = relay.Function([], output)
mod['func_6390'] = func_6390
mod = relay.transform.InferType()(mod)
mutated_mod['func_6390'] = func_6390
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6390_call = mutated_mod.get_global_var('func_6390')
call_6391 = func_6390_call()
output = call_6391
func_6392 = relay.Function([], output)
mutated_mod['func_6392'] = func_6392
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3678_call = mod.get_global_var('func_3678')
func_3679_call = mutated_mod.get_global_var('func_3679')
call_6425 = relay.TupleGetItem(func_3678_call(), 0)
call_6426 = relay.TupleGetItem(func_3679_call(), 0)
output = relay.Tuple([call_6425,])
output2 = relay.Tuple([call_6426,])
func_6440 = relay.Function([], output)
mod['func_6440'] = func_6440
mod = relay.transform.InferType()(mod)
output = func_6440()
func_6441 = relay.Function([], output)
mutated_mod['func_6441'] = func_6441
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2899_call = mod.get_global_var('func_2899')
func_2900_call = mutated_mod.get_global_var('func_2900')
call_6451 = relay.TupleGetItem(func_2899_call(), 0)
call_6452 = relay.TupleGetItem(func_2900_call(), 0)
output = relay.Tuple([call_6451,])
output2 = relay.Tuple([call_6452,])
func_6454 = relay.Function([], output)
mod['func_6454'] = func_6454
mod = relay.transform.InferType()(mod)
output = func_6454()
func_6455 = relay.Function([], output)
mutated_mod['func_6455'] = func_6455
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4456_call = mod.get_global_var('func_4456')
func_4458_call = mutated_mod.get_global_var('func_4458')
call_6512 = relay.TupleGetItem(func_4456_call(), 0)
call_6513 = relay.TupleGetItem(func_4458_call(), 0)
output = relay.Tuple([call_6512,])
output2 = relay.Tuple([call_6513,])
func_6522 = relay.Function([], output)
mod['func_6522'] = func_6522
mod = relay.transform.InferType()(mod)
mutated_mod['func_6522'] = func_6522
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6522_call = mutated_mod.get_global_var('func_6522')
call_6523 = func_6522_call()
output = call_6523
func_6524 = relay.Function([], output)
mutated_mod['func_6524'] = func_6524
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4949_call = mod.get_global_var('func_4949')
func_4951_call = mutated_mod.get_global_var('func_4951')
call_6535 = relay.TupleGetItem(func_4949_call(), 0)
call_6536 = relay.TupleGetItem(func_4951_call(), 0)
output = call_6535
output2 = call_6536
func_6555 = relay.Function([], output)
mod['func_6555'] = func_6555
mod = relay.transform.InferType()(mod)
mutated_mod['func_6555'] = func_6555
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6555_call = mutated_mod.get_global_var('func_6555')
call_6556 = func_6555_call()
output = call_6556
func_6557 = relay.Function([], output)
mutated_mod['func_6557'] = func_6557
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4776_call = mod.get_global_var('func_4776')
func_4778_call = mutated_mod.get_global_var('func_4778')
call_6573 = relay.TupleGetItem(func_4776_call(), 1)
call_6574 = relay.TupleGetItem(func_4778_call(), 1)
output = call_6573
output2 = call_6574
func_6579 = relay.Function([], output)
mod['func_6579'] = func_6579
mod = relay.transform.InferType()(mod)
mutated_mod['func_6579'] = func_6579
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6579_call = mutated_mod.get_global_var('func_6579')
call_6580 = func_6579_call()
output = call_6580
func_6581 = relay.Function([], output)
mutated_mod['func_6581'] = func_6581
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6593 = relay.const(6, dtype = "uint16")#candidate|6593|()|const|uint16
var_6594 = relay.var("var_6594", dtype = "uint16", shape = (15, 1, 14))#candidate|6594|(15, 1, 14)|var|uint16
bop_6595 = relay.bitwise_and(const_6593.astype('uint16'), var_6594.astype('uint16')) # shape=(15, 1, 14)
func_6260_call = mod.get_global_var('func_6260')
func_6265_call = mutated_mod.get_global_var('func_6265')
var_6603 = relay.var("var_6603", dtype = "bool", shape = (1144,))#candidate|6603|(1144,)|var|bool
var_6604 = relay.var("var_6604", dtype = "float32", shape = (36,))#candidate|6604|(36,)|var|float32
const_6605 = relay.const([[-0.873144,-6.557938,4.796213,-9.562609,3.257056,7.806581,-4.869026,3.798166,-8.331466,0.923875,-0.857915,-8.110735,4.674271,9.779234,-4.352049,7.671270,-6.708911,4.557626,-0.072149,-1.644008,-9.793839,-1.529447,6.562247,-6.817170,9.330070,2.615337,7.620878,3.150332,-7.917048,-7.076089,-4.538655,4.120620,2.862588,-4.269938,-4.689968,7.047696,-4.543829,6.195100,2.059812,-5.047859,2.142085,0.186948,3.100924,1.553321,9.744767,-8.290358,7.675106,7.841149,-7.715390,-4.566539,-3.787158,2.603068,-4.340706,-5.960611,-8.472884,-0.452244,-6.838066,-4.127911,8.954109,8.002440,4.258743,-4.715983,8.449613,4.800604,6.940772,-3.472689,-8.286220,8.649068,-8.664926,-8.167683,-7.116209,-0.045532,-5.191779,-4.992611,-2.113042,8.960310,9.837055,-0.791910,1.018839,-1.515258,-7.300995,-9.948965,-2.809779,2.201771,4.698847,-1.680630,-4.362976,-5.027634,7.094833,-7.522974,1.028600,-0.110795,5.898510,5.970096,-2.917828,-1.999725,4.414267,8.023514,-9.669560,-1.440620,1.438950,1.510947,-8.481439,-5.472959,-2.535666,0.873971,-5.178611,-2.173577,1.814830,-6.839140,5.349039,-8.015114,9.969784,-8.246195,-0.742734,1.382538,5.971210,5.890636,9.530067,-3.537120,2.062369,4.942413,9.594340,9.746446,2.997119,-0.397168,-4.091127,8.170097,3.480129,2.426148,5.539935,0.995222,7.182136,-6.565038,-0.271943,-7.026168,-1.507724,-8.997068,6.370689,-3.904411,9.125833,9.606323,7.856484,-9.007619,1.683289,-5.603076,-9.408943,3.354156,2.316027,-4.549475,-5.052866,4.432454,-1.086935,-1.484036,0.969684,1.882693,-5.805746,9.390614,8.789981,-0.734344,3.684398,4.308909,-4.201195,-1.362507,-4.475060,5.985473,5.910840,-0.417524,-7.766158,-5.570855,2.171936,3.964988,-9.726493,-6.940086,-2.105666,-2.882454,5.711253,4.711553,9.830071,3.764244],[7.272147,-6.714549,1.873206,-2.436708,-6.055247,-3.162372,-0.310567,9.939119,-9.084036,3.419268,-5.953003,-1.997098,8.024756,2.971368,8.954195,9.012338,3.532024,-2.184770,-7.872730,6.912761,7.026506,-3.075327,2.605259,-4.218842,3.669335,-5.808118,-1.927552,-5.049862,-9.338181,-5.186390,-3.343373,-3.854723,4.531971,5.109344,-6.456154,-0.573030,-5.180530,4.867670,-2.102611,6.801507,9.364854,8.653193,-5.774665,-4.207472,4.222005,1.356153,-0.767054,-8.199432,-5.693582,6.377864,-4.722395,-7.382864,-2.227067,-9.388544,5.660106,4.949846,0.777264,-6.804510,-4.330974,-8.496415,0.402294,1.620124,-9.609141,-5.070690,6.500087,8.129513,5.939040,-5.670059,6.647243,9.297859,-2.792164,-3.756605,6.909643,-9.826095,2.146158,-6.415403,-9.036902,-1.456646,0.777563,7.644003,-7.395734,-2.915885,-6.629206,4.929783,5.851142,-7.609994,1.433327,6.364645,-0.156389,-3.670107,-2.495760,-1.962613,1.412205,2.504831,8.690912,4.623389,1.299673,-3.701985,7.600811,-0.526787,-6.208111,-6.933917,8.857488,-9.283904,1.394995,3.156295,2.442207,-5.400820,-5.991688,2.031947,-0.368750,3.656644,-6.128394,5.670692,8.213014,-6.911527,7.647526,-7.952322,-9.481961,-3.504614,2.273661,-5.317341,2.277585,9.885312,-4.976154,-1.832136,-7.824737,9.222920,2.205629,-1.173987,-4.689355,-1.381752,8.686263,-8.935050,9.275654,-2.608072,-9.651105,-4.736125,9.876797,3.564114,-4.211065,0.396744,9.022500,-7.006034,7.083673,8.796036,8.040964,9.938284,-4.449348,8.386851,-2.454540,6.433198,-0.036265,4.162013,0.891044,6.375871,-8.496109,-7.604787,5.880787,-6.891760,7.346008,-6.216935,9.225823,-1.382462,1.619003,1.822648,6.406713,-8.054949,-6.791763,7.183801,-8.132118,-4.845551,4.081061,-5.689477,3.769899,-3.779993,8.893574,5.105289,-6.621581,-3.678981]], dtype = "float32")#candidate|6605|(2, 180)|const|float32
call_6602 = relay.TupleGetItem(func_6260_call(relay.reshape(var_6603.astype('bool'), [1144,]), relay.reshape(var_6604.astype('float32'), [3, 12]), relay.reshape(const_6605.astype('float32'), [360,]), relay.reshape(var_6603.astype('float64'), [1144,]), ), 3)
call_6606 = relay.TupleGetItem(func_6265_call(relay.reshape(var_6603.astype('bool'), [1144,]), relay.reshape(var_6604.astype('float32'), [3, 12]), relay.reshape(const_6605.astype('float32'), [360,]), relay.reshape(var_6603.astype('float64'), [1144,]), ), 3)
output = relay.Tuple([bop_6595,call_6602,var_6603,var_6604,const_6605,])
output2 = relay.Tuple([bop_6595,call_6606,var_6603,var_6604,const_6605,])
func_6610 = relay.Function([var_6594,var_6603,var_6604,], output)
mod['func_6610'] = func_6610
mod = relay.transform.InferType()(mod)
mutated_mod['func_6610'] = func_6610
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6610_call = mutated_mod.get_global_var('func_6610')
var_6612 = relay.var("var_6612", dtype = "uint16", shape = (15, 1, 14))#candidate|6612|(15, 1, 14)|var|uint16
var_6613 = relay.var("var_6613", dtype = "bool", shape = (1144,))#candidate|6613|(1144,)|var|bool
var_6614 = relay.var("var_6614", dtype = "float32", shape = (36,))#candidate|6614|(36,)|var|float32
call_6611 = func_6610_call(var_6612,var_6613,var_6614,)
output = call_6611
func_6615 = relay.Function([var_6612,var_6613,var_6614,], output)
mutated_mod['func_6615'] = func_6615
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1808_call = mod.get_global_var('func_1808')
func_1810_call = mutated_mod.get_global_var('func_1810')
call_6658 = relay.TupleGetItem(func_1808_call(), 1)
call_6659 = relay.TupleGetItem(func_1810_call(), 1)
func_2261_call = mod.get_global_var('func_2261')
func_2263_call = mutated_mod.get_global_var('func_2263')
call_6662 = func_2261_call()
call_6663 = func_2261_call()
func_3325_call = mod.get_global_var('func_3325')
func_3328_call = mutated_mod.get_global_var('func_3328')
var_6672 = relay.var("var_6672", dtype = "float32", shape = (1152,))#candidate|6672|(1152,)|var|float32
call_6671 = func_3325_call(relay.reshape(var_6672.astype('float32'), [12, 16, 6]))
call_6673 = func_3325_call(relay.reshape(var_6672.astype('float32'), [12, 16, 6]))
output = relay.Tuple([call_6658,call_6662,call_6671,var_6672,])
output2 = relay.Tuple([call_6659,call_6663,call_6673,var_6672,])
func_6678 = relay.Function([var_6672,], output)
mod['func_6678'] = func_6678
mod = relay.transform.InferType()(mod)
var_6679 = relay.var("var_6679", dtype = "float32", shape = (1152,))#candidate|6679|(1152,)|var|float32
output = func_6678(var_6679)
func_6680 = relay.Function([var_6679], output)
mutated_mod['func_6680'] = func_6680
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4456_call = mod.get_global_var('func_4456')
func_4458_call = mutated_mod.get_global_var('func_4458')
call_6741 = relay.TupleGetItem(func_4456_call(), 0)
call_6742 = relay.TupleGetItem(func_4458_call(), 0)
output = relay.Tuple([call_6741,])
output2 = relay.Tuple([call_6742,])
func_6765 = relay.Function([], output)
mod['func_6765'] = func_6765
mod = relay.transform.InferType()(mod)
mutated_mod['func_6765'] = func_6765
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6765_call = mutated_mod.get_global_var('func_6765')
call_6766 = func_6765_call()
output = call_6766
func_6767 = relay.Function([], output)
mutated_mod['func_6767'] = func_6767
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4419_call = mod.get_global_var('func_4419')
func_4420_call = mutated_mod.get_global_var('func_4420')
call_6807 = relay.TupleGetItem(func_4419_call(), 0)
call_6808 = relay.TupleGetItem(func_4420_call(), 0)
func_4592_call = mod.get_global_var('func_4592')
func_4594_call = mutated_mod.get_global_var('func_4594')
call_6824 = relay.TupleGetItem(func_4592_call(), 0)
call_6825 = relay.TupleGetItem(func_4594_call(), 0)
output = relay.Tuple([call_6807,call_6824,])
output2 = relay.Tuple([call_6808,call_6825,])
func_6831 = relay.Function([], output)
mod['func_6831'] = func_6831
mod = relay.transform.InferType()(mod)
mutated_mod['func_6831'] = func_6831
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6831_call = mutated_mod.get_global_var('func_6831')
call_6832 = func_6831_call()
output = call_6832
func_6833 = relay.Function([], output)
mutated_mod['func_6833'] = func_6833
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3651_call = mod.get_global_var('func_3651')
func_3652_call = mutated_mod.get_global_var('func_3652')
call_6844 = relay.TupleGetItem(func_3651_call(), 2)
call_6845 = relay.TupleGetItem(func_3652_call(), 2)
output = call_6844
output2 = call_6845
func_6849 = relay.Function([], output)
mod['func_6849'] = func_6849
mod = relay.transform.InferType()(mod)
output = func_6849()
func_6850 = relay.Function([], output)
mutated_mod['func_6850'] = func_6850
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6522_call = mod.get_global_var('func_6522')
func_6524_call = mutated_mod.get_global_var('func_6524')
call_7053 = relay.TupleGetItem(func_6522_call(), 0)
call_7054 = relay.TupleGetItem(func_6524_call(), 0)
output = relay.Tuple([call_7053,])
output2 = relay.Tuple([call_7054,])
func_7066 = relay.Function([], output)
mod['func_7066'] = func_7066
mod = relay.transform.InferType()(mod)
mutated_mod['func_7066'] = func_7066
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7066_call = mutated_mod.get_global_var('func_7066')
call_7067 = func_7066_call()
output = call_7067
func_7068 = relay.Function([], output)
mutated_mod['func_7068'] = func_7068
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4472_call = mod.get_global_var('func_4472')
func_4474_call = mutated_mod.get_global_var('func_4474')
call_7069 = relay.TupleGetItem(func_4472_call(), 0)
call_7070 = relay.TupleGetItem(func_4474_call(), 0)
func_4330_call = mod.get_global_var('func_4330')
func_4332_call = mutated_mod.get_global_var('func_4332')
call_7087 = relay.TupleGetItem(func_4330_call(), 0)
call_7088 = relay.TupleGetItem(func_4332_call(), 0)
output = relay.Tuple([call_7069,call_7087,])
output2 = relay.Tuple([call_7070,call_7088,])
func_7095 = relay.Function([], output)
mod['func_7095'] = func_7095
mod = relay.transform.InferType()(mod)
mutated_mod['func_7095'] = func_7095
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7095_call = mutated_mod.get_global_var('func_7095')
call_7096 = func_7095_call()
output = call_7096
func_7097 = relay.Function([], output)
mutated_mod['func_7097'] = func_7097
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5977_call = mod.get_global_var('func_5977')
func_5978_call = mutated_mod.get_global_var('func_5978')
call_7261 = relay.TupleGetItem(func_5977_call(), 0)
call_7262 = relay.TupleGetItem(func_5978_call(), 0)
output = relay.Tuple([call_7261,])
output2 = relay.Tuple([call_7262,])
func_7269 = relay.Function([], output)
mod['func_7269'] = func_7269
mod = relay.transform.InferType()(mod)
output = func_7269()
func_7270 = relay.Function([], output)
mutated_mod['func_7270'] = func_7270
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1463_call = mod.get_global_var('func_1463')
func_1465_call = mutated_mod.get_global_var('func_1465')
call_7286 = relay.TupleGetItem(func_1463_call(), 2)
call_7287 = relay.TupleGetItem(func_1465_call(), 2)
func_2105_call = mod.get_global_var('func_2105')
func_2107_call = mutated_mod.get_global_var('func_2107')
call_7297 = relay.TupleGetItem(func_2105_call(), 0)
call_7298 = relay.TupleGetItem(func_2107_call(), 0)
func_2203_call = mod.get_global_var('func_2203')
func_2207_call = mutated_mod.get_global_var('func_2207')
const_7308 = relay.const([-6,-9,7,-8,6,5,5,5,-7,-7,9,1,-9,5,10,-7,-2,3,-2,4,5,7,-1,7,-7,2,6,-9,-2,-2,8,-3,8,10,8,-7,-1,3,9,1,6,1,7,-7,-4,-3,10,1,-3,9,-4,6,-5,9,-1,-9,2,-1,7,7,-8,-2,-8,8,5,-7,-6,-4,4,-4,-2,3,10,-2,-1,10,1,8,6,-5,5,-10,4,1,-7,-2,5,-4,9,-4,7,10,6,1,5,-5,-5,1,-8,7,7,-4,-5,9,-4,-4,7,-1,1,-8,-8,-9,7,2,2,3,-9,2,-5,7,2,-4,-3,-3,-9,-5,4,-9,1,10,-1,3,-10,-3,3,-8,-9,-7,7,1,1,-10,7,9,1,3,10,1,10,9,-3,-2,7,-7,9,10,-3,6,2,-9,-3,-4,-10,-7,10,-8,10,7,9,-4,3,8,-6,5,-2,-2,1,-9,2,3,-1,7,3,1,-8,-8,-10,-7,3,-6,-10,-9,6,-2,-6,-2,-8,-8,-3,-10,-3,1,9,2,2,8,-10,-3,-6,7,-9,-9,-10,-5,6,-3,6,-6,4,8,8,9,4,4,-4,4,-2,8,9,-2,-1,-8,10,3,-2,1,-6,9,2,-9,-6,2,5,-7,-5,3,-7,4,-5,-1,-7,-8,-5,-4,10,-5,-6,4,7,10,-4,8,4,-9,9,5,-4,-3,-9,6,-2,-10,6,-2,7,2,2,3,4,-6,-1,10,-5,-4,2,6,1,-2,9,-9,-5,10,-3,-5,6,-1,-2,4,-6,2,8,-9,5,5,3,-4,7,8,-8,6,-2,-3,-7,-4,7,8,5,6,9,7,7,10,5,1,-1,-9,5,-9,-1,5,10,-5,1,6,3,1,5,2,-1,3,-2,-7,4,-9,-1,-5,10,-8,9,2,-9,4,8,2,-10,3,7,9,10,-8,-4,3,-3,6,7,6,1,-10,5,-10,8,7,5,-9,-5,5,-2,-5,9,4,9,2,9,1,-5,-7,4,10,-9,4,8,3,-10,-2,10,-7,-8,-1,2,-1,2,-1,1,8,10,5,-1,-7,-9,-10,-9,-7,5,-5,9,5,3,10,7,5,-7,-7,-9,1,-7,6,-7,2,3,10,-1,-3,-1,2,10,5,-8,-10,-9,6,2,-2,4,-3,-9,-9,10,-7,-7,-8,6,6,8,-2,7,-4,9,7,8,-2,-5,-9,5,5,-5,-2,-8,7,-4,-4,-9,9,-4,5,8,-1,8,-7,6,-8,-7,-3,9,-1,-1,6,-3,1,-3,1,4,2,2,7,-3,10,-5,3,5,9,-10,7,9,-1,4,2,4,2,-5,-3,-5,-8,-5,4,-8,-7,5,-2,-4,7,-4,6,4,5,6,-10,2,1,3,-9,-8,9,-10,10,-3,2,7,-7,-7,-2,10,-5,-4,-10,-4,7,-5,9,-7,-9,-7,8,-2,-7,-5,5,-3,-8,9,-5,8,6,10,9,4,6,9,-5,8,2,-1,3,-7,2,-10,2,-10,-1,4,6,6,-1,-7,-7,-10,-2,-8,-6,5,-3,-4,-3,3,-5,-2,7,4,-6,-8,-9,4,9,4,6,-5,6,-4,-4,-5,-6,-9,-6,4,-5,4,9,5,9,5,-1,-4,10,6,-7,-2,-9,-9,-5,4,3,3,-8,-2,-8,-2,-5,-5,-6,-6,3,7,10,-4,9,4,10,4,6,2,-10,2,-1,-10,-8,-2,-6,-3,-9,3,9,-9,-5,-4,8,-4,10,-6,2,2,4,-3,4,-1,4,-10,9,1,-2,-4,1,-9,-3,6,2,-7,1,-9,5,10,1,-2,7,6,-6,-10,-10,2,5,-1,5,3,8,-10,3,-10,-10,-7,-6,8,7,1,-6,-3,2,-10,-3,-10,7,2,2,4,-4,2,-8,-4,-8,-2,-9,-7,-10,5,-10,-4,8,6,-8,3,5,-6,6,8,4,-10,5,-3,6,10,-6,4,-10,4,-3,2,4,3,-7,-6,10,-3,7,10,7,-1,4,-6,6,-2,9,-8,-1,3,-1,8,-8,6,10,-9,8,9,5,-4,-3,1,10,5,2,1,8,7,-2,-1,9,-9,-2,-8,-2,-10,-9,-9,2,-2,3,-10,-3,-6,1,7,-9,-6,-3,-10,7,1,10,-6,-5,7,-10,-8,-7,7,-4,-8,9,6,10,-8,-5,-4,-1,7,7,-2,4,-9,4,7,-8,-3,-8,-10,4,-7,5,5,-2,-1,-8,-5,5,-1,1,9,2,-8,-2,1,4,-6,-9,-6,3,1,4,-2,-1,-10,-1,-4,2,5,10,-9,-6,-5,7,-8,-1,-2,5,4,8,-8,4,4,-6,1,7,-10,4,-7,-9,1,-4,-6,8,-4,-5,-7,-8,8,-2,-10,6,1,5,3,5,-5,9,-9,-3,-3,-9,9,1,-1,-4,-1,1,4,-2,-2,-3,7,8,8,10,10,-10,-7,6,-2,-9,5,-7,-5,-8,-7,4,2,1,-5,-9,-2,-6,10,9,4,-6,-7,8,3,9,-6,5,6,7,-9,-8,7,-4,-6,8,-2,-1,-9,-2,-4,2,7,7,5,5,-10,7,-9,-4,-5,-6,-1,7,-7,-2,-4,-10,-4,-4,-3,-3,4,-10,-10,-7,-9,3,2,-9,2,2,10,7,-1,2,-2,8,-6,10,-5,2,-3,-3,6,-4,7,-4,-7,10,-4,3,1,5,-10,-5,3,10,-4,-1,-6,9,-2,-10,-6,9,5,7,3,-1,-8,-9,-6,6,-3,10,-3,-5,-2,6,-5,9,8,4,-7,-6,3,-5], dtype = "int32")#candidate|7308|(1056,)|const|int32
call_7307 = relay.TupleGetItem(func_2203_call(relay.reshape(const_7308.astype('int32'), [11, 16, 6]), relay.reshape(const_7308.astype('int32'), [11, 16, 6]), ), 0)
call_7309 = relay.TupleGetItem(func_2207_call(relay.reshape(const_7308.astype('int32'), [11, 16, 6]), relay.reshape(const_7308.astype('int32'), [11, 16, 6]), ), 0)
output = relay.Tuple([call_7286,call_7297,call_7307,const_7308,])
output2 = relay.Tuple([call_7287,call_7298,call_7309,const_7308,])
func_7324 = relay.Function([], output)
mod['func_7324'] = func_7324
mod = relay.transform.InferType()(mod)
mutated_mod['func_7324'] = func_7324
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7324_call = mutated_mod.get_global_var('func_7324')
call_7325 = func_7324_call()
output = call_7325
func_7326 = relay.Function([], output)
mutated_mod['func_7326'] = func_7326
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7333 = relay.var("var_7333", dtype = "uint32", shape = (13, 8, 14))#candidate|7333|(13, 8, 14)|var|uint32
var_7334 = relay.var("var_7334", dtype = "uint32", shape = (13, 8, 14))#candidate|7334|(13, 8, 14)|var|uint32
bop_7335 = relay.add(var_7333.astype('uint32'), relay.reshape(var_7334.astype('uint32'), relay.shape_of(var_7333))) # shape=(13, 8, 14)
func_4472_call = mod.get_global_var('func_4472')
func_4474_call = mutated_mod.get_global_var('func_4474')
call_7339 = relay.TupleGetItem(func_4472_call(), 0)
call_7340 = relay.TupleGetItem(func_4474_call(), 0)
func_5308_call = mod.get_global_var('func_5308')
func_5310_call = mutated_mod.get_global_var('func_5310')
call_7343 = relay.TupleGetItem(func_5308_call(), 0)
call_7344 = relay.TupleGetItem(func_5310_call(), 0)
func_2477_call = mod.get_global_var('func_2477')
func_2479_call = mutated_mod.get_global_var('func_2479')
call_7345 = relay.TupleGetItem(func_2477_call(), 1)
call_7346 = relay.TupleGetItem(func_2479_call(), 1)
func_6260_call = mod.get_global_var('func_6260')
func_6265_call = mutated_mod.get_global_var('func_6265')
var_7362 = relay.var("var_7362", dtype = "bool", shape = (1, 1144))#candidate|7362|(1, 1144)|var|bool
const_7363 = relay.const([1.199008,7.217306,3.736124,-4.129112,0.484356,8.788901,-8.549133,-3.780093,0.570133,-5.444596,4.867543,3.453420,-9.633441,-3.968997,9.837942,-3.583107,-5.945278,-7.410223,-1.781618,8.299691,7.475218,9.710994,3.634528,-1.136629,-7.064373,4.770331,-7.990256,5.680861,-1.350318,-6.193124,1.633621,-6.839122,0.096764,-4.998053,-4.291046,9.318558], dtype = "float32")#candidate|7363|(36,)|const|float32
var_7364 = relay.var("var_7364", dtype = "float32", shape = (360,))#candidate|7364|(360,)|var|float32
call_7361 = relay.TupleGetItem(func_6260_call(relay.reshape(var_7362.astype('bool'), [1144,]), relay.reshape(const_7363.astype('float32'), [3, 12]), relay.reshape(var_7364.astype('float32'), [360,]), relay.reshape(var_7362.astype('float64'), [1144,]), ), 2)
call_7365 = relay.TupleGetItem(func_6265_call(relay.reshape(var_7362.astype('bool'), [1144,]), relay.reshape(const_7363.astype('float32'), [3, 12]), relay.reshape(var_7364.astype('float32'), [360,]), relay.reshape(var_7362.astype('float64'), [1144,]), ), 2)
output = relay.Tuple([bop_7335,call_7339,call_7343,call_7345,call_7361,var_7362,const_7363,var_7364,])
output2 = relay.Tuple([bop_7335,call_7340,call_7344,call_7346,call_7365,var_7362,const_7363,var_7364,])
func_7371 = relay.Function([var_7333,var_7334,var_7362,var_7364,], output)
mod['func_7371'] = func_7371
mod = relay.transform.InferType()(mod)
var_7372 = relay.var("var_7372", dtype = "uint32", shape = (13, 8, 14))#candidate|7372|(13, 8, 14)|var|uint32
var_7373 = relay.var("var_7373", dtype = "uint32", shape = (13, 8, 14))#candidate|7373|(13, 8, 14)|var|uint32
var_7374 = relay.var("var_7374", dtype = "bool", shape = (1, 1144))#candidate|7374|(1, 1144)|var|bool
var_7375 = relay.var("var_7375", dtype = "float32", shape = (360,))#candidate|7375|(360,)|var|float32
output = func_7371(var_7372,var_7373,var_7374,var_7375,)
func_7376 = relay.Function([var_7372,var_7373,var_7374,var_7375,], output)
mutated_mod['func_7376'] = func_7376
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7391 = relay.var("var_7391", dtype = "float64", shape = (4, 2, 3))#candidate|7391|(4, 2, 3)|var|float64
uop_7392 = relay.asinh(var_7391.astype('float64')) # shape=(4, 2, 3)
output = relay.Tuple([uop_7392,])
output2 = relay.Tuple([uop_7392,])
func_7398 = relay.Function([var_7391,], output)
mod['func_7398'] = func_7398
mod = relay.transform.InferType()(mod)
var_7399 = relay.var("var_7399", dtype = "float64", shape = (4, 2, 3))#candidate|7399|(4, 2, 3)|var|float64
output = func_7398(var_7399)
func_7400 = relay.Function([var_7399], output)
mutated_mod['func_7400'] = func_7400
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7410 = relay.var("var_7410", dtype = "float32", shape = (1, 1, 2))#candidate|7410|(1, 1, 2)|var|float32
uop_7411 = relay.sinh(var_7410.astype('float32')) # shape=(1, 1, 2)
func_2910_call = mod.get_global_var('func_2910')
func_2911_call = mutated_mod.get_global_var('func_2911')
call_7413 = relay.TupleGetItem(func_2910_call(), 0)
call_7414 = relay.TupleGetItem(func_2911_call(), 0)
uop_7435 = relay.cos(uop_7411.astype('float32')) # shape=(1, 1, 2)
output = relay.Tuple([call_7413,uop_7435,])
output2 = relay.Tuple([call_7414,uop_7435,])
func_7437 = relay.Function([var_7410,], output)
mod['func_7437'] = func_7437
mod = relay.transform.InferType()(mod)
var_7438 = relay.var("var_7438", dtype = "float32", shape = (1, 1, 2))#candidate|7438|(1, 1, 2)|var|float32
output = func_7437(var_7438)
func_7439 = relay.Function([var_7438], output)
mutated_mod['func_7439'] = func_7439
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3085_call = mod.get_global_var('func_3085')
func_3086_call = mutated_mod.get_global_var('func_3086')
call_7441 = relay.TupleGetItem(func_3085_call(), 3)
call_7442 = relay.TupleGetItem(func_3086_call(), 3)
uop_7445 = relay.asin(call_7441.astype('float32')) # shape=(7, 15, 14)
uop_7447 = relay.asin(call_7442.astype('float32')) # shape=(7, 15, 14)
uop_7452 = relay.sin(uop_7445.astype('float32')) # shape=(7, 15, 14)
uop_7454 = relay.sin(uop_7447.astype('float32')) # shape=(7, 15, 14)
func_6161_call = mod.get_global_var('func_6161')
func_6163_call = mutated_mod.get_global_var('func_6163')
call_7455 = relay.TupleGetItem(func_6161_call(), 5)
call_7456 = relay.TupleGetItem(func_6163_call(), 5)
func_6260_call = mod.get_global_var('func_6260')
func_6265_call = mutated_mod.get_global_var('func_6265')
const_7481 = relay.const([False,False,True,True,False,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,False,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,True,True], dtype = "bool")#candidate|7481|(1144,)|const|bool
const_7482 = relay.const([6.089208,-9.262413,3.923274,2.605327,9.875211,7.467959,9.543363,3.531284,8.435133,5.833041,6.416005,8.685039,-0.940215,-8.623593,6.845699,-3.846051,-3.820052,-8.136873,8.539328,4.506890,-9.756314,1.323007,3.919019,6.964970,4.732019,-7.885549,2.917643,-3.477998,3.275352,1.519639,-8.132483,4.677956,-6.761576,-4.093529,4.960691,6.983524], dtype = "float32")#candidate|7482|(36,)|const|float32
const_7483 = relay.const([9.609023,5.570387,-3.122494,0.624265,4.937609,2.829622,-2.155793,-9.501489,-4.302217,-5.421658,0.019271,8.943550,-4.039180,3.385534,3.255616,5.141480,9.757199,8.670633,-2.116702,9.757971,-0.305455,7.222560,1.480741,-8.005171,8.392077,1.884550,0.829490,-0.080072,8.543503,8.310454,-5.207902,8.711467,0.558143,5.810643,5.238886,-7.120436,4.449277,-2.720384,0.510764,0.313328,6.057222,9.231004,4.075531,5.107625,0.010219,9.803124,0.278823,-4.580440,8.672183,-7.511089,-5.374266,-7.890966,-8.721303,9.367955,1.812428,9.250752,4.966701,-1.217270,-6.550808,6.532753,-9.147479,0.956751,0.828076,5.875562,-5.325639,0.469732,-4.733769,-2.446149,-1.374607,-0.901078,-6.857752,1.840784,-7.261131,-7.000219,6.047216,0.441045,-1.509354,5.043651,-6.255389,-2.641364,-9.332622,5.694751,-5.261304,-6.554136,0.996805,-4.418208,-8.377943,4.750882,0.393994,9.005245,2.548392,3.288899,4.529476,6.252730,4.795585,-2.642973,3.296442,-6.933593,-0.605861,6.179070,7.963830,1.369321,1.171892,-3.013486,7.618506,6.074040,-2.853105,-0.946744,4.000456,3.920892,-1.501193,-4.447493,-3.162168,9.111424,0.896828,-0.930538,-1.733065,-4.360681,2.864449,8.098568,-0.133412,1.211054,6.159658,7.576532,-3.873761,3.874657,-9.849768,-1.181661,-2.916275,7.803868,-3.526537,-8.300168,-0.636890,-7.232483,6.442913,-3.800342,-2.314664,0.450032,5.401494,-4.024485,9.197783,-4.870922,-5.979018,-2.777840,-2.732943,-1.124647,-5.543984,-1.394665,-0.781740,-3.279282,-7.974422,5.012347,-9.426178,-6.492231,9.336840,2.115726,-8.780453,3.630809,1.648234,4.536111,7.501528,-9.102084,-2.079826,-7.214731,-7.594573,-3.889557,3.375389,4.690911,-2.129488,-6.764320,4.594245,5.789355,5.913688,-8.571129,-6.581932,2.464302,7.278329,4.175502,-0.521502,-5.298020,-7.128532,9.236355,5.963659,-4.943909,-7.340434,8.876607,-6.932655,7.136177,0.228742,-8.665749,1.500922,-2.131875,-4.301473,-9.125691,9.985818,2.545685,6.882748,-8.384260,2.292131,6.398167,8.698606,1.466684,1.083767,8.416695,-7.726661,-7.612272,6.534195,9.495257,3.940601,-7.619381,-9.355089,-3.467105,-9.665171,-8.293449,5.374988,2.168785,7.986192,9.596496,2.460665,5.562877,-6.936712,8.811502,-8.886582,2.633111,-6.955197,3.340749,7.151500,3.358065,-4.697610,-9.304582,9.051297,-7.413520,-2.465312,6.987128,-6.688388,-4.106161,-0.513873,1.409678,-9.473752,-6.525406,-2.357923,3.522114,-4.757361,-0.748591,3.449501,-3.574385,-0.713647,6.426647,-4.895498,6.237364,3.944439,-7.719723,6.005205,8.871258,-3.573458,4.693213,3.109255,0.978813,8.668511,-3.336906,-7.017054,1.828375,8.596331,4.697744,1.785126,-6.834622,-3.186508,-4.782418,-7.320239,3.023523,-8.097833,-1.229827,-6.490727,9.151350,9.690093,-3.527119,-8.307191,-6.007095,-9.300252,-2.626677,-5.640865,-1.356752,6.569487,5.832431,-4.766465,-7.582671,4.888364,-6.017023,-4.655184,9.351310,4.366730,5.497429,7.822350,2.409064,-5.661111,3.657587,8.637015,2.013772,-8.035258,-5.638289,-0.673800,5.380867,9.764696,0.969784,3.789786,6.613586,-3.938923,2.840517,4.230253,7.879223,-4.046277,-5.958783,-1.218030,-3.237015,-8.306423,-0.047542,1.396704,-0.738606,3.654313,7.988015,-4.269886,-5.222890,1.099931,-9.542165,-1.759732,-6.968944,-5.826809,-6.168568,3.449888,-6.524163,-9.427847,-9.040016,-5.252583,-7.432003,-7.899891,9.117829,7.317069,3.111050,0.927292,0.635979,6.299139,-1.109174,-3.984646,-9.440694,1.334211,-9.099874,6.394794,8.044928,0.424938,-4.370086,7.237179,6.211129,9.400330,-2.516866,-6.373309,-9.394448,9.166253,-1.823649,-8.457430,0.018546], dtype = "float32")#candidate|7483|(360,)|const|float32
call_7480 = relay.TupleGetItem(func_6260_call(relay.reshape(const_7481.astype('bool'), [1144,]), relay.reshape(const_7482.astype('float32'), [3, 12]), relay.reshape(const_7483.astype('float32'), [360,]), relay.reshape(const_7481.astype('float64'), [1144,]), ), 0)
call_7484 = relay.TupleGetItem(func_6265_call(relay.reshape(const_7481.astype('bool'), [1144,]), relay.reshape(const_7482.astype('float32'), [3, 12]), relay.reshape(const_7483.astype('float32'), [360,]), relay.reshape(const_7481.astype('float64'), [1144,]), ), 0)
output = relay.Tuple([uop_7452,call_7455,call_7480,const_7481,const_7482,const_7483,])
output2 = relay.Tuple([uop_7454,call_7456,call_7484,const_7481,const_7482,const_7483,])
func_7487 = relay.Function([], output)
mod['func_7487'] = func_7487
mod = relay.transform.InferType()(mod)
output = func_7487()
func_7488 = relay.Function([], output)
mutated_mod['func_7488'] = func_7488
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7066_call = mod.get_global_var('func_7066')
func_7068_call = mutated_mod.get_global_var('func_7068')
call_7611 = relay.TupleGetItem(func_7066_call(), 0)
call_7612 = relay.TupleGetItem(func_7068_call(), 0)
output = relay.Tuple([call_7611,])
output2 = relay.Tuple([call_7612,])
func_7626 = relay.Function([], output)
mod['func_7626'] = func_7626
mod = relay.transform.InferType()(mod)
output = func_7626()
func_7627 = relay.Function([], output)
mutated_mod['func_7627'] = func_7627
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1808_call = mod.get_global_var('func_1808')
func_1810_call = mutated_mod.get_global_var('func_1810')
call_7662 = relay.TupleGetItem(func_1808_call(), 1)
call_7663 = relay.TupleGetItem(func_1810_call(), 1)
output = relay.Tuple([call_7662,])
output2 = relay.Tuple([call_7663,])
func_7667 = relay.Function([], output)
mod['func_7667'] = func_7667
mod = relay.transform.InferType()(mod)
output = func_7667()
func_7668 = relay.Function([], output)
mutated_mod['func_7668'] = func_7668
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7807 = relay.var("var_7807", dtype = "int32", shape = ())#candidate|7807|()|var|int32
var_7808 = relay.var("var_7808", dtype = "int32", shape = (3, 1, 5))#candidate|7808|(3, 1, 5)|var|int32
bop_7809 = relay.right_shift(var_7807.astype('int32'), var_7808.astype('int32')) # shape=(3, 1, 5)
uop_7820 = relay.log10(var_7808.astype('float32')) # shape=(3, 1, 5)
output = relay.Tuple([bop_7809,uop_7820,])
output2 = relay.Tuple([bop_7809,uop_7820,])
func_7822 = relay.Function([var_7807,var_7808,], output)
mod['func_7822'] = func_7822
mod = relay.transform.InferType()(mod)
var_7823 = relay.var("var_7823", dtype = "int32", shape = ())#candidate|7823|()|var|int32
var_7824 = relay.var("var_7824", dtype = "int32", shape = (3, 1, 5))#candidate|7824|(3, 1, 5)|var|int32
output = func_7822(var_7823,var_7824,)
func_7825 = relay.Function([var_7823,var_7824,], output)
mutated_mod['func_7825'] = func_7825
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2815_call = mod.get_global_var('func_2815')
func_2816_call = mutated_mod.get_global_var('func_2816')
call_7847 = relay.TupleGetItem(func_2815_call(), 0)
call_7848 = relay.TupleGetItem(func_2816_call(), 0)
func_6849_call = mod.get_global_var('func_6849')
func_6850_call = mutated_mod.get_global_var('func_6850')
call_7851 = func_6849_call()
call_7852 = func_6849_call()
func_2105_call = mod.get_global_var('func_2105')
func_2107_call = mutated_mod.get_global_var('func_2107')
call_7861 = relay.TupleGetItem(func_2105_call(), 0)
call_7862 = relay.TupleGetItem(func_2107_call(), 0)
func_4592_call = mod.get_global_var('func_4592')
func_4594_call = mutated_mod.get_global_var('func_4594')
call_7864 = relay.TupleGetItem(func_4592_call(), 0)
call_7865 = relay.TupleGetItem(func_4594_call(), 0)
uop_7881 = relay.exp(call_7847.astype('float32')) # shape=(12, 5, 15)
uop_7883 = relay.exp(call_7848.astype('float32')) # shape=(12, 5, 15)
func_4708_call = mod.get_global_var('func_4708')
func_4710_call = mutated_mod.get_global_var('func_4710')
call_7904 = relay.TupleGetItem(func_4708_call(), 1)
call_7905 = relay.TupleGetItem(func_4710_call(), 1)
var_7917 = relay.var("var_7917", dtype = "float32", shape = (4, 100))#candidate|7917|(4, 100)|var|float32
bop_7918 = relay.less_equal(call_7851.astype('bool'), relay.reshape(var_7917.astype('bool'), relay.shape_of(call_7851))) # shape=(4, 100)
bop_7921 = relay.less_equal(call_7852.astype('bool'), relay.reshape(var_7917.astype('bool'), relay.shape_of(call_7852))) # shape=(4, 100)
func_295_call = mod.get_global_var('func_295')
func_297_call = mutated_mod.get_global_var('func_297')
const_7924 = relay.const([7,9,5,-6,-5,-5,8,4,-9,10,1,9,-1,4,-4,-2,9,10,-5,-9,1,-1,-1,-6,3,-8,-2,-8,2,6,-3,4,-10,-7,3,5,-9,-2,3,-1,-3,-3], dtype = "uint64")#candidate|7924|(42,)|const|uint64
call_7923 = relay.TupleGetItem(func_295_call(relay.reshape(const_7924.astype('uint64'), [3, 1, 14])), 1)
call_7925 = relay.TupleGetItem(func_297_call(relay.reshape(const_7924.astype('uint64'), [3, 1, 14])), 1)
func_3202_call = mod.get_global_var('func_3202')
func_3204_call = mutated_mod.get_global_var('func_3204')
var_7927 = relay.var("var_7927", dtype = "float64", shape = (560,))#candidate|7927|(560,)|var|float64
call_7926 = relay.TupleGetItem(func_3202_call(relay.reshape(var_7927.astype('float64'), [14, 10, 4])), 0)
call_7928 = relay.TupleGetItem(func_3204_call(relay.reshape(var_7927.astype('float64'), [14, 10, 4])), 0)
output = relay.Tuple([call_7861,call_7864,uop_7881,call_7904,bop_7918,call_7923,const_7924,call_7926,var_7927,])
output2 = relay.Tuple([call_7862,call_7865,uop_7883,call_7905,bop_7921,call_7925,const_7924,call_7928,var_7927,])
func_7931 = relay.Function([var_7917,var_7927,], output)
mod['func_7931'] = func_7931
mod = relay.transform.InferType()(mod)
mutated_mod['func_7931'] = func_7931
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7931_call = mutated_mod.get_global_var('func_7931')
var_7933 = relay.var("var_7933", dtype = "float32", shape = (4, 100))#candidate|7933|(4, 100)|var|float32
var_7934 = relay.var("var_7934", dtype = "float64", shape = (560,))#candidate|7934|(560,)|var|float64
call_7932 = func_7931_call(var_7933,var_7934,)
output = call_7932
func_7935 = relay.Function([var_7933,var_7934,], output)
mutated_mod['func_7935'] = func_7935
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2360_call = mod.get_global_var('func_2360')
func_2361_call = mutated_mod.get_global_var('func_2361')
call_7937 = relay.TupleGetItem(func_2360_call(), 2)
call_7938 = relay.TupleGetItem(func_2361_call(), 2)
output = call_7937
output2 = call_7938
func_7940 = relay.Function([], output)
mod['func_7940'] = func_7940
mod = relay.transform.InferType()(mod)
output = func_7940()
func_7941 = relay.Function([], output)
mutated_mod['func_7941'] = func_7941
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1773_call = mod.get_global_var('func_1773')
func_1775_call = mutated_mod.get_global_var('func_1775')
call_7954 = func_1773_call()
call_7955 = func_1773_call()
func_4155_call = mod.get_global_var('func_4155')
func_4159_call = mutated_mod.get_global_var('func_4159')
const_7962 = relay.const([5,-3,7,-6,-3,2,6,-7,-4,3,-1,4,-6,10,-5,9,7,6,2,-8,3,-7,4,1,1,5,-4,-5,3,4,-8,-7,-9,-2,5,5,10,8,-6,-3,4,6,-7,10,10,-10,-1,7,8,-10,-9,-2,9,-4,-8,9,-5,3,9,3,-9,10,-10,1,-6,2,10,-8,-3,-3,9,4,-10,-7,-10,8,5,-1,-7,-2,5,-10,-7,3,1,10,9,-6,-9,-6,3,-8,4,-3,4,-5,9,-6,-4,-6,-7,6,10,-3,-5,10,6,6,9,-2,5,4,1,-2,-10,-1,-7,-3,9,8,6,9,5,-2,7,1,-1,7,6,-8,-10,-3,8,-5,-1,-8,-2,9,-4,-4,-6,2,10,9,9,-2,8,7,3,-2,7,-1,7,-6,10,-10,7,-4,-1,4,-2,-10,-4,-8,-9,1,-8,-4,-2,-6,4,-1,-9,-9,9,2,-4,4,9,6,4,-5,2,9,-2,8,-10,9,5,-2,5,-6,6,6,-3,3,-10,10,-8,5,4,7,4,3,-6,-4,7,-8,1,8,6,1,-8,9,-10,5,10,7,-8,5,-5,2,10,-7,-6,5,6,10,-7,-9,3,-2,-8,9,9,-7,-5,-8,-3,-4,-10,2,4,-10,-1,7,-5,-9,8,-6,-1,1,5,1,-4,6,-3,-8,10,-8,-6,-7,4,3,-3,10,5,-2,-3,-8,-7,1,-1,-6,8,4,-9,-9,6,-6,3,4,9,8,-6,-1,9,2,-4,4,2,-9,6,5,-10,-2,-9,2,-2,-2,-7,3,6,9,-4,3,9,-9,10,9,-7,6,9,5,-8,-10,-1,-2,-8,8,-4,-10,-5,-9,4,-8,3,8,1,1,-4,6,-6,4,-1,-8,5,9,-8,6,8,-7,-7,-1,10,-8,7,-10,6,6,6,4,3,-3,2,5,5,-3,6,-1,-7,3,-4,-6,-6,-8,8,8,-5,-2,-2,9,8,-10,-7,5,1,-10,2,7,-10,-2,7,10,1,-1,9,-2,3,5,2,-5,-7,-10,-1,-7,-2,-1,-1,2,-3,6,-6,-10,10,-10,5,-7,-10,-1,2,4,-9,4,6,-3,-9,-2,7,6,9,-2,-9,7,6,2,8,-5,-1,-6,-2,-9,-7,-8,4,6,9,-8,-8,8,4,3,6,-8,6,-7,2,1,-6,8,4,3,-1,-2,7,3,9,-5,6,5,9,10,7,-5,-10,-3,6,-8,9,3,9,1,-4,5,2,-9,2,-6,-1,-4,-3,-7,-4,-3,-2,-1,4,9,10,5,-5,-5,-6,-8,2,-9,-10,4,-1,9,5,6,-3,7,-2,5,9,-6,9,-1,7,-5,-8,3,6,-5,-3,2,10,9,-10,-7,4,-3,7,-5,-5,3,9,-5,5,8,4,4,-7,-4,-9,7,6,8,5,-10,-4,-8,-7,10,6,2,7,-4,2,5,-10,-3,-4,10,4,2,2,-1,-4,3,-10,-9,-2,3,-8,-5,1,-5,-1,-4,4,3,7,-5,6,8,4,2,10,-1,-6,-9,4,-3,8,10,-3,-9,6,1,3,-7,-9,-2,8,7,10,10,9,-9,-1,10,1,-6,3,-8,-9,1,7,6,9,-7,1,-2,-3,7,9,9,7,6,3,6,2,9,-3,3,8,10,9,10,-3,7,-6,-2,2,-5,-4,4,-8,-5,7,2,8,-5,-4,-1,5,10,4,6,-2,8,10,3,-6,9,-6,9,7,-3,10,-9,-3,8,-1,-3,5,-10,-7,5,1,7,8,-3,1,-5,1,-9,5,4,-2,-8,10,4,-10,1,4,9,7,7,10,-2,-10,-7,-8,10,10,9,-7,-7], dtype = "uint64")#candidate|7962|(702,)|const|uint64
const_7963 = relay.const([[-7],[2],[-3],[-3],[-3],[-3],[-4],[7],[-1],[-2],[-4],[-1],[5],[9],[6],[-8],[8],[-9],[9],[1],[-5],[-4],[-5],[10],[5],[-7],[4],[-1],[3],[-8],[9],[4],[-4],[-6],[2],[-6],[4],[-5],[10],[-2],[-9],[5],[6],[4],[-7],[-10],[8],[2],[4],[-6],[9],[-3],[-9],[-9],[6],[-5],[2],[-10],[-7],[-10],[5],[-9],[-4],[7],[-10],[4],[3],[2],[10],[3],[5],[-2],[-10],[-7],[-7],[9],[7],[-4],[-8],[-6],[-4],[-10],[2],[2],[-3],[7],[-5],[-7],[1],[9],[-1],[9],[8],[-6],[6],[7],[-6],[8],[-10],[9],[7],[3],[5],[8],[4],[-4],[-8],[10],[6],[-2],[-9],[4],[-7],[3],[-5],[3],[8],[-6],[6],[9],[-1],[-4],[5],[5],[-1],[6],[8],[-5],[-2],[-2],[-9],[-1],[-1],[-10],[-10],[6],[1],[10],[-3],[9],[-4],[3],[-7],[-6],[-7],[8],[-5],[4],[3],[-10],[4],[-4],[-5],[5],[3],[-3],[-9],[10],[-9],[6],[9],[3],[-2],[-8],[3],[-10],[4],[-6],[-10],[9],[4],[-2],[-2],[-10],[-1],[6],[-10],[-1],[-8],[-7],[-7],[-1],[-1],[-1],[7],[6],[-6],[4],[-3],[9],[-9],[-3],[6],[1],[-5],[8],[-5],[4],[-8],[-7],[-5],[-4],[-1],[8],[-1],[7],[6],[10],[8],[-7],[-10],[-4],[7],[-1],[2],[-8],[10],[9],[10],[-7],[-8],[4],[-6],[5],[8],[6],[10],[4],[-1],[10],[2],[-2],[10],[6],[-3],[-3],[-9],[3],[3],[-1],[4],[10],[-1],[-1],[9],[6],[9],[-6],[1],[1],[6],[3],[2],[1],[7],[-6],[-1],[-5],[1],[3],[-7],[-3],[-6],[7],[4],[-9],[3],[8],[-1],[-3],[-2],[9],[5],[4],[-10],[-8],[-5],[-3],[-2],[6],[8],[8],[9],[-9],[4],[-9],[10],[8],[2],[5],[-8],[-8],[6],[1],[2],[5],[5],[3],[9],[4],[-5],[8],[1],[-3],[9],[-4],[9],[-9],[3],[-4],[-9],[7],[2],[8],[4],[-3],[-5],[2],[-10],[-8],[3],[5],[1],[-8],[3],[-9],[8],[-6],[6],[10],[-6],[-8],[-7],[-8],[7],[3],[5],[1],[-1],[2],[8],[-6],[-5],[-7],[-6],[10],[-3],[4],[9],[4],[-7],[6],[-4],[-10],[6],[8],[-3],[-2],[-7],[-1],[7],[7],[-2],[-9],[-5],[8],[9],[-6],[1],[-7],[9],[-2],[-10],[-1],[3],[-9],[5],[-2],[9],[7],[4],[5],[-9],[4],[8],[8],[-7],[-8],[-3],[3],[10],[8],[-2],[-2],[4],[4],[-7],[9],[2],[8],[7],[7],[-4],[-2],[-3],[7],[-10],[1],[-7],[-2],[4],[-7],[5],[-7],[-1],[6],[10],[-5],[-8],[5],[3],[9],[7],[3],[4],[-5],[1],[9],[9],[-4],[-2],[-10],[4],[9],[2],[5],[6],[-9],[3],[6],[-9],[-6],[-4],[6],[-3],[-6],[1],[-7],[3],[6],[10],[3],[5],[-8],[3],[-6],[7],[-3],[-8],[-6],[9],[6],[-2],[-6],[-9],[-2],[-6],[-4],[6],[1],[-5],[4],[-10],[-5],[-7],[-1],[-7],[-10],[-10],[-5],[9],[-9],[-4],[-9],[-4],[-4],[7],[3],[6],[-8],[-10],[-1],[6],[5],[-8],[-6],[-10],[5],[9],[-6],[2],[5],[9],[-1],[-7],[10],[-9],[-6],[2],[2],[4],[8],[-2],[-9],[7],[-5],[-7],[-10],[-8],[1],[-1],[-5],[-4],[5],[2],[8],[5],[1],[-1],[10],[10],[-6],[-8],[5],[-7],[-1],[9],[-1],[7],[-9],[-3],[-7],[4],[-6],[2],[10],[-3],[-1],[3],[7],[2],[10],[-6],[-4],[-7],[3],[9],[8],[2],[6],[-2],[-6],[-3],[6],[-2],[-7],[2],[6],[8],[-10],[3],[7],[-7],[-5],[9],[-3],[-10],[-3],[-7],[-10],[-3],[3],[-4],[-1],[1],[9],[7],[7],[-9],[3],[6],[8],[-6],[-10],[2],[-1],[-6],[-8],[5],[5],[3],[1],[-10],[-5],[3],[-8],[5],[-6],[6],[3],[-7],[-3],[-1],[5],[10],[-4],[-4],[2],[5],[6],[5],[-8],[9],[-1],[-3],[3],[3],[5],[6],[-1],[-10],[9],[2],[-1],[-1],[5],[-10],[-6],[7],[3],[4],[-10],[-1],[10],[-6],[6],[-6],[1],[8],[-4],[-8],[7],[-2],[-4],[2],[10],[3],[-2],[6],[-4],[3],[-8],[6],[-8],[1],[3],[3],[-7],[5],[-5],[-1],[1],[-7],[-10],[5],[5],[5],[8],[5],[4],[-9],[5],[-1],[6],[-6],[-10],[-8],[-10],[-4],[-7],[-4],[8],[8],[-9],[-3],[8],[3],[4],[8],[7],[3],[-10],[10],[3],[10],[-4],[4],[4],[-9],[6],[-9],[6],[2],[6],[-9],[5],[-2],[-2],[-2],[-6],[-7],[-7],[-4],[7],[-5],[7],[-9],[-7],[-2],[2],[-6],[5],[9],[8],[-2],[-6],[-7],[-2],[-5],[4],[1],[-5],[6],[-3],[3],[-4],[-10],[8],[-6],[-3],[-3],[9],[-1],[8],[-1],[-5],[6],[3],[1],[2],[1],[4],[-5],[-1],[1],[1],[-2],[-3],[-3],[-8],[-5],[-5],[2],[-5],[-5],[-9],[-3],[10],[-7],[8],[4],[3],[2],[-8],[7],[7],[6],[5],[3],[-4],[-8],[-7],[-10],[-10],[-7],[-7],[10],[6],[6],[-4],[7],[-6],[-5],[-4],[2],[-9],[1],[-1],[2],[-7],[10],[9],[-4],[1],[-6],[-2],[8],[5],[-9],[-2],[-6],[-1],[-6],[9],[-6],[6],[-2],[7],[7],[-7],[-4],[-5],[7],[4],[8],[8],[8],[3],[4],[3],[-10],[-7],[1],[10],[3],[-2],[-6],[-7],[-6],[10],[-8],[9],[10],[1],[4],[5],[2],[-6],[-5],[10],[4],[2],[8],[3],[-2],[-7],[-3],[-10],[10],[8],[-5],[10],[4],[-10],[-4],[6],[-2],[-6],[-10],[4],[3],[-4],[-2],[1],[6],[-8],[2],[-8],[-5],[5],[7],[-5],[-2],[1],[1],[-5],[1],[-3],[4],[2],[3],[10],[-9],[-2],[-5],[4],[-10],[4],[2],[-5],[-3],[7],[2],[6],[4],[-7],[-10],[-4],[5],[3],[-5],[-5],[8],[9],[7],[2],[4],[5],[-9],[-3],[8],[2],[7],[7],[4],[-6],[-9],[-5],[10],[-6],[8],[10],[-7],[-10],[-5],[9],[-3],[1],[7],[-3],[-2],[-9],[10],[9],[-8],[9],[-4],[7],[-4],[-6],[-2],[-10],[6],[-4],[-3],[-3],[6],[7],[5],[-5],[2],[-6],[3],[-6],[4],[3],[10],[10],[9],[8],[-1],[-7],[2],[2],[-10],[8],[-1],[8],[10],[10],[-7],[10],[10],[-3],[6],[-1],[4],[-5],[-3],[-4],[3],[7],[-8],[9],[-9],[4],[6],[5],[-5],[-7],[2],[7],[7],[2],[8],[5],[8],[7],[-6],[-8],[7],[-3],[7],[1],[6],[3],[5],[2],[2],[3],[10],[1],[-1],[5],[-3],[2],[-6],[-3],[3],[-5],[1],[7],[-7],[-9],[4],[9],[2],[-3],[-6],[-2],[-3],[1],[1],[4],[-9],[5]], dtype = "int32")#candidate|7963|(1056, 1)|const|int32
call_7961 = relay.TupleGetItem(func_4155_call(relay.reshape(const_7962.astype('uint64'), [13, 9, 6]), relay.reshape(const_7962.astype('uint64'), [13, 9, 6]), relay.reshape(const_7963.astype('int32'), [1056,]), ), 4)
call_7964 = relay.TupleGetItem(func_4159_call(relay.reshape(const_7962.astype('uint64'), [13, 9, 6]), relay.reshape(const_7962.astype('uint64'), [13, 9, 6]), relay.reshape(const_7963.astype('int32'), [1056,]), ), 4)
bop_7968 = relay.bitwise_and(const_7962.astype('int64'), const_7963.astype('int64')) # shape=(1056, 702)
func_6454_call = mod.get_global_var('func_6454')
func_6455_call = mutated_mod.get_global_var('func_6455')
call_7974 = relay.TupleGetItem(func_6454_call(), 0)
call_7975 = relay.TupleGetItem(func_6455_call(), 0)
uop_7996 = relay.sqrt(const_7962.astype('float64')) # shape=(702,)
bop_8003 = relay.add(uop_7996.astype('int16'), bop_7968.astype('int16')) # shape=(1056, 702)
output = relay.Tuple([call_7954,call_7961,call_7974,bop_8003,])
output2 = relay.Tuple([call_7955,call_7964,call_7975,bop_8003,])
func_8010 = relay.Function([], output)
mod['func_8010'] = func_8010
mod = relay.transform.InferType()(mod)
output = func_8010()
func_8011 = relay.Function([], output)
mutated_mod['func_8011'] = func_8011
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6161_call = mod.get_global_var('func_6161')
func_6163_call = mutated_mod.get_global_var('func_6163')
call_8017 = relay.TupleGetItem(func_6161_call(), 1)
call_8018 = relay.TupleGetItem(func_6163_call(), 1)
func_6454_call = mod.get_global_var('func_6454')
func_6455_call = mutated_mod.get_global_var('func_6455')
call_8026 = relay.TupleGetItem(func_6454_call(), 0)
call_8027 = relay.TupleGetItem(func_6455_call(), 0)
func_6522_call = mod.get_global_var('func_6522')
func_6524_call = mutated_mod.get_global_var('func_6524')
call_8036 = relay.TupleGetItem(func_6522_call(), 0)
call_8037 = relay.TupleGetItem(func_6524_call(), 0)
output = relay.Tuple([call_8017,call_8026,call_8036,])
output2 = relay.Tuple([call_8018,call_8027,call_8037,])
func_8038 = relay.Function([], output)
mod['func_8038'] = func_8038
mod = relay.transform.InferType()(mod)
output = func_8038()
func_8039 = relay.Function([], output)
mutated_mod['func_8039'] = func_8039
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5096_call = mod.get_global_var('func_5096')
func_5097_call = mutated_mod.get_global_var('func_5097')
call_8040 = relay.TupleGetItem(func_5096_call(), 0)
call_8041 = relay.TupleGetItem(func_5097_call(), 0)
func_1298_call = mod.get_global_var('func_1298')
func_1300_call = mutated_mod.get_global_var('func_1300')
call_8057 = func_1298_call()
call_8058 = func_1298_call()
output = relay.Tuple([call_8040,call_8057,])
output2 = relay.Tuple([call_8041,call_8058,])
func_8062 = relay.Function([], output)
mod['func_8062'] = func_8062
mod = relay.transform.InferType()(mod)
mutated_mod['func_8062'] = func_8062
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8062_call = mutated_mod.get_global_var('func_8062')
call_8063 = func_8062_call()
output = call_8063
func_8064 = relay.Function([], output)
mutated_mod['func_8064'] = func_8064
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2477_call = mod.get_global_var('func_2477')
func_2479_call = mutated_mod.get_global_var('func_2479')
call_8115 = relay.TupleGetItem(func_2477_call(), 0)
call_8116 = relay.TupleGetItem(func_2479_call(), 0)
func_4274_call = mod.get_global_var('func_4274')
func_4277_call = mutated_mod.get_global_var('func_4277')
var_8118 = relay.var("var_8118", dtype = "float32", shape = (48,))#candidate|8118|(48,)|var|float32
call_8117 = relay.TupleGetItem(func_4274_call(relay.reshape(var_8118.astype('float32'), [48,])), 0)
call_8119 = relay.TupleGetItem(func_4277_call(relay.reshape(var_8118.astype('float32'), [48,])), 0)
output = relay.Tuple([call_8115,call_8117,var_8118,])
output2 = relay.Tuple([call_8116,call_8119,var_8118,])
func_8125 = relay.Function([var_8118,], output)
mod['func_8125'] = func_8125
mod = relay.transform.InferType()(mod)
mutated_mod['func_8125'] = func_8125
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8126 = relay.var("var_8126", dtype = "float32", shape = (48,))#candidate|8126|(48,)|var|float32
func_8125_call = mutated_mod.get_global_var('func_8125')
call_8127 = func_8125_call(var_8126)
output = call_8127
func_8128 = relay.Function([var_8126], output)
mutated_mod['func_8128'] = func_8128
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8130 = relay.var("var_8130", dtype = "uint16", shape = (4, 14, 1))#candidate|8130|(4, 14, 1)|var|uint16
var_8131 = relay.var("var_8131", dtype = "uint16", shape = (4, 14, 16))#candidate|8131|(4, 14, 16)|var|uint16
bop_8132 = relay.less_equal(var_8130.astype('bool'), var_8131.astype('bool')) # shape=(4, 14, 16)
output = relay.Tuple([bop_8132,])
output2 = relay.Tuple([bop_8132,])
func_8138 = relay.Function([var_8130,var_8131,], output)
mod['func_8138'] = func_8138
mod = relay.transform.InferType()(mod)
mutated_mod['func_8138'] = func_8138
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8138_call = mutated_mod.get_global_var('func_8138')
var_8140 = relay.var("var_8140", dtype = "uint16", shape = (4, 14, 1))#candidate|8140|(4, 14, 1)|var|uint16
var_8141 = relay.var("var_8141", dtype = "uint16", shape = (4, 14, 16))#candidate|8141|(4, 14, 16)|var|uint16
call_8139 = func_8138_call(var_8140,var_8141,)
output = call_8139
func_8142 = relay.Function([var_8140,var_8141,], output)
mutated_mod['func_8142'] = func_8142
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4994_call = mod.get_global_var('func_4994')
func_4995_call = mutated_mod.get_global_var('func_4995')
call_8165 = relay.TupleGetItem(func_4994_call(), 0)
call_8166 = relay.TupleGetItem(func_4995_call(), 0)
func_2286_call = mod.get_global_var('func_2286')
func_2288_call = mutated_mod.get_global_var('func_2288')
call_8175 = relay.TupleGetItem(func_2286_call(), 0)
call_8176 = relay.TupleGetItem(func_2288_call(), 0)
func_4330_call = mod.get_global_var('func_4330')
func_4332_call = mutated_mod.get_global_var('func_4332')
call_8177 = relay.TupleGetItem(func_4330_call(), 0)
call_8178 = relay.TupleGetItem(func_4332_call(), 0)
output = relay.Tuple([call_8165,call_8175,call_8177,])
output2 = relay.Tuple([call_8166,call_8176,call_8178,])
func_8198 = relay.Function([], output)
mod['func_8198'] = func_8198
mod = relay.transform.InferType()(mod)
output = func_8198()
func_8199 = relay.Function([], output)
mutated_mod['func_8199'] = func_8199
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7626_call = mod.get_global_var('func_7626')
func_7627_call = mutated_mod.get_global_var('func_7627')
call_8214 = relay.TupleGetItem(func_7626_call(), 0)
call_8215 = relay.TupleGetItem(func_7627_call(), 0)
func_5625_call = mod.get_global_var('func_5625')
func_5627_call = mutated_mod.get_global_var('func_5627')
const_8225 = relay.const([-10,9,2,5,9,5,6,1,7,-3,-1,-1,7,-6,-1,3,1,-9,4,-1,3,6,2,-1,-3,4,-3,4,2,-6,-1,4,3,-5,7,-9,-3,-2,-4,-2,7,10,2,1,6,-6,-8,-10,-6,-9,2,5,-5,-8,10,-6,5,-9,2,10,-9,6,9,-8,1,-9,-5,8,-1,-9,-6,10,-2,8,-10,5,-5,7,-7,8,-4,4,-3,-9,9,-7,-2,-6,-7,10,5,9,8,-3,-2,-6,-1,-6,-1,9,3,-4,-5,1,5,1,9,-9,7,4,6,-8,8,-1,10,-8,-8,-8,-3,6,2,-7,9,-10,9,-8,1,3,-3,-10,-6,4,3,6,-2,-5,10,-7,-9,7,-8,4,-2,-3,-1,8,3,1,5,-3,10,3,-9,10,7,5,-2,-9,6,-1,-6,6,2,-7,-7,-6,-6,8,1,-3,-7,8,-9,-6,-10,6,8,5,-9,7,-3,-4,3,-6,2,-5,-10,-8,9,-6,1,-2,1,-8,-10,-8,-7,-3,4,5,1,-5,-10,-9,-5,7,-4,6,8,10,1,2,10,-10,-5,10,-4,6,-6,-4,-10,10,2,3,-1,10,9,-2,9,3,7,-1,-8,7,-4,6,4,9,-1,-7,-5,6,1,5,10,-4,-1,9,4,3,7,-1,5,-6,-4,9,-10,-5,5,-10,6,-1,1,-8,6,-2,-1,1,-6,-2,-9,-2,-8,-9,7,-7,5,1,9,-2,1,5,10,-7,4,9,-10,4,9,10,-5,8,6,8,1,8,8,3,3,6,-7,3,-7,-5,10,-10,-2,-7,-10,-4,6,10,-9,-2,2,2,-3,9,1,4,-9,6,-3,-10,7,3,-7,-7,-7,-7,-7,8,-3,7,1,5], dtype = "uint32")#candidate|8225|(336,)|const|uint32
call_8224 = relay.TupleGetItem(func_5625_call(relay.reshape(const_8225.astype('uint32'), [336,])), 2)
call_8226 = relay.TupleGetItem(func_5627_call(relay.reshape(const_8225.astype('uint32'), [336,])), 2)
output = relay.Tuple([call_8214,call_8224,const_8225,])
output2 = relay.Tuple([call_8215,call_8226,const_8225,])
func_8230 = relay.Function([], output)
mod['func_8230'] = func_8230
mod = relay.transform.InferType()(mod)
mutated_mod['func_8230'] = func_8230
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8230_call = mutated_mod.get_global_var('func_8230')
call_8231 = func_8230_call()
output = call_8231
func_8232 = relay.Function([], output)
mutated_mod['func_8232'] = func_8232
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2944_call = mod.get_global_var('func_2944')
func_2945_call = mutated_mod.get_global_var('func_2945')
call_8233 = relay.TupleGetItem(func_2944_call(), 3)
call_8234 = relay.TupleGetItem(func_2945_call(), 3)
output = call_8233
output2 = call_8234
func_8249 = relay.Function([], output)
mod['func_8249'] = func_8249
mod = relay.transform.InferType()(mod)
mutated_mod['func_8249'] = func_8249
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8249_call = mutated_mod.get_global_var('func_8249')
call_8250 = func_8249_call()
output = call_8250
func_8251 = relay.Function([], output)
mutated_mod['func_8251'] = func_8251
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6161_call = mod.get_global_var('func_6161')
func_6163_call = mutated_mod.get_global_var('func_6163')
call_8342 = relay.TupleGetItem(func_6161_call(), 1)
call_8343 = relay.TupleGetItem(func_6163_call(), 1)
func_4456_call = mod.get_global_var('func_4456')
func_4458_call = mutated_mod.get_global_var('func_4458')
call_8349 = relay.TupleGetItem(func_4456_call(), 0)
call_8350 = relay.TupleGetItem(func_4458_call(), 0)
output = relay.Tuple([call_8342,call_8349,])
output2 = relay.Tuple([call_8343,call_8350,])
func_8371 = relay.Function([], output)
mod['func_8371'] = func_8371
mod = relay.transform.InferType()(mod)
output = func_8371()
func_8372 = relay.Function([], output)
mutated_mod['func_8372'] = func_8372
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2188_call = mod.get_global_var('func_2188')
func_2190_call = mutated_mod.get_global_var('func_2190')
call_8391 = relay.TupleGetItem(func_2188_call(), 0)
call_8392 = relay.TupleGetItem(func_2190_call(), 0)
output = relay.Tuple([call_8391,])
output2 = relay.Tuple([call_8392,])
func_8394 = relay.Function([], output)
mod['func_8394'] = func_8394
mod = relay.transform.InferType()(mod)
output = func_8394()
func_8395 = relay.Function([], output)
mutated_mod['func_8395'] = func_8395
mutated_mod = relay.transform.InferType()(mutated_mod)
const_8434 = relay.const([[[7.767984,5.260643,7.756193,-7.944150,-0.244833],[0.278126,-7.778764,9.548726,1.426134,0.704096],[4.334267,2.473097,-2.463289,0.120159,-8.428845],[-8.109183,-8.328152,-4.047652,6.467488,4.141286],[9.479383,-1.900882,-6.187536,9.870525,6.524641],[8.257063,-5.852430,5.467002,8.201512,2.075653],[-1.645776,-1.498543,6.718701,-2.919966,0.027335]],[[-9.019543,-0.366485,-7.295732,-5.781479,-5.512709],[4.133613,-8.278612,-2.130483,-1.015575,2.469477],[-8.568849,-4.077319,-8.096833,8.531332,-3.770451],[-6.407995,8.206514,-2.176961,7.448639,6.624559],[-1.422140,-0.172847,0.800920,9.131267,-8.578415],[2.564344,-1.662368,7.817836,6.644221,7.458070],[-6.160691,-1.268363,-4.766212,8.116657,2.807477]],[[8.813895,1.924008,0.201556,-0.146724,5.580548],[9.974196,4.133478,-6.282005,-0.976335,8.710607],[6.103283,-8.074020,-7.220813,-0.364136,-5.687860],[-2.326666,-3.250898,5.818466,-9.405852,-1.513032],[3.508078,-7.579269,6.565582,4.478836,-5.253939],[1.996126,-7.963751,0.108238,-5.475113,5.688567],[-9.002335,-6.740004,4.169563,-1.216115,6.736718]],[[3.205156,-5.633879,-3.989502,-5.657772,9.647854],[-0.305859,9.219622,-5.373293,0.665277,-9.499491],[-7.340500,4.316511,9.038927,-5.337950,-5.079613],[-4.377489,-4.195161,-1.332728,-3.238461,4.132435],[3.797058,-2.263120,-8.161406,-3.749881,0.696766],[-5.346766,0.454601,-9.119092,4.814931,-5.678430],[2.689219,7.636796,8.721457,-3.817027,1.818614]],[[6.241863,0.095516,5.273353,8.759489,-1.633062],[-3.845214,-3.443226,-4.843543,6.854708,0.307868],[9.408887,-4.113824,2.420306,-0.064017,-0.672650],[0.568381,8.948846,8.775957,-6.707646,-0.605408],[-4.455717,-0.602759,-9.754375,6.342791,-0.621038],[1.777228,0.087340,-3.178613,9.674232,-1.339266],[-9.988753,6.384292,2.746128,-6.174887,1.285650]],[[-3.178989,-9.029362,-1.954639,0.360054,-3.654857],[9.560198,4.426439,8.294614,1.705263,0.903637],[-4.300155,6.934144,8.911680,7.905991,-7.937850],[-7.574935,-0.717546,7.206837,6.992276,-6.528653],[-8.233697,1.874430,7.881041,-8.021397,0.085533],[-4.128873,4.080796,1.786690,-9.935245,5.669398],[-8.583657,4.198755,-5.228785,2.328549,1.791782]],[[6.202582,3.057114,-1.788308,0.121705,8.782481],[-4.738060,1.176714,6.488026,-0.501108,1.796063],[4.286682,2.057733,-5.208258,5.190471,7.937007],[7.319239,6.414998,9.062663,1.404725,-1.539891],[7.590740,6.945867,-4.049435,8.944128,-2.717472],[-4.980604,-3.558483,2.056637,7.839053,6.632615],[2.022866,6.449732,0.734144,-4.588125,-3.315439]],[[-0.223579,1.719906,-7.283737,-5.490260,-1.120072],[-8.868027,-8.903364,-0.611769,0.748725,7.782337],[-5.702075,8.726719,7.924426,-0.070857,-4.083058],[-4.710599,-5.724931,-0.760388,9.521982,1.556665],[9.098595,9.988225,-8.115840,7.537435,9.943128],[-8.780815,-0.081861,-2.293258,0.181808,5.214009],[3.867841,-7.970435,-7.778901,-0.667021,6.022489]],[[6.142167,5.637151,5.657654,1.006230,2.287471],[1.950266,-2.505353,6.766342,4.573120,-2.388240],[-7.935846,-4.661087,1.126863,3.716508,-2.277668],[6.726626,-7.508927,-4.851072,7.183412,-1.882267],[3.423477,-8.322717,2.645040,-7.672516,-3.385584],[-1.201974,-7.106406,2.064413,3.677242,2.737912],[-4.399609,9.746115,7.787667,-8.620642,2.550701]]], dtype = "float32")#candidate|8434|(9, 7, 5)|const|float32
uop_8435 = relay.atanh(const_8434.astype('float32')) # shape=(9, 7, 5)
output = relay.Tuple([uop_8435,])
output2 = relay.Tuple([uop_8435,])
func_8440 = relay.Function([], output)
mod['func_8440'] = func_8440
mod = relay.transform.InferType()(mod)
mutated_mod['func_8440'] = func_8440
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8440_call = mutated_mod.get_global_var('func_8440')
call_8441 = func_8440_call()
output = call_8441
func_8442 = relay.Function([], output)
mutated_mod['func_8442'] = func_8442
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4472_call = mod.get_global_var('func_4472')
func_4474_call = mutated_mod.get_global_var('func_4474')
call_8448 = relay.TupleGetItem(func_4472_call(), 0)
call_8449 = relay.TupleGetItem(func_4474_call(), 0)
output = relay.Tuple([call_8448,])
output2 = relay.Tuple([call_8449,])
func_8450 = relay.Function([], output)
mod['func_8450'] = func_8450
mod = relay.transform.InferType()(mod)
mutated_mod['func_8450'] = func_8450
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8450_call = mutated_mod.get_global_var('func_8450')
call_8451 = func_8450_call()
output = call_8451
func_8452 = relay.Function([], output)
mutated_mod['func_8452'] = func_8452
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8371_call = mod.get_global_var('func_8371')
func_8372_call = mutated_mod.get_global_var('func_8372')
call_8466 = relay.TupleGetItem(func_8371_call(), 1)
call_8467 = relay.TupleGetItem(func_8372_call(), 1)
func_3429_call = mod.get_global_var('func_3429')
func_3431_call = mutated_mod.get_global_var('func_3431')
call_8500 = relay.TupleGetItem(func_3429_call(relay.reshape(call_8466.astype('uint32'), [1470,])), 1)
call_8501 = relay.TupleGetItem(func_3431_call(relay.reshape(call_8466.astype('uint32'), [1470,])), 1)
func_8198_call = mod.get_global_var('func_8198')
func_8199_call = mutated_mod.get_global_var('func_8199')
call_8505 = relay.TupleGetItem(func_8198_call(), 1)
call_8506 = relay.TupleGetItem(func_8199_call(), 1)
output = relay.Tuple([call_8466,call_8500,call_8505,])
output2 = relay.Tuple([call_8467,call_8501,call_8506,])
func_8521 = relay.Function([], output)
mod['func_8521'] = func_8521
mod = relay.transform.InferType()(mod)
mutated_mod['func_8521'] = func_8521
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8521_call = mutated_mod.get_global_var('func_8521')
call_8522 = func_8521_call()
output = call_8522
func_8523 = relay.Function([], output)
mutated_mod['func_8523'] = func_8523
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5308_call = mod.get_global_var('func_5308')
func_5310_call = mutated_mod.get_global_var('func_5310')
call_8556 = relay.TupleGetItem(func_5308_call(), 0)
call_8557 = relay.TupleGetItem(func_5310_call(), 0)
output = call_8556
output2 = call_8557
func_8560 = relay.Function([], output)
mod['func_8560'] = func_8560
mod = relay.transform.InferType()(mod)
output = func_8560()
func_8561 = relay.Function([], output)
mutated_mod['func_8561'] = func_8561
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2261_call = mod.get_global_var('func_2261')
func_2263_call = mutated_mod.get_global_var('func_2263')
call_8597 = func_2261_call()
call_8598 = func_2261_call()
output = call_8597
output2 = call_8598
func_8613 = relay.Function([], output)
mod['func_8613'] = func_8613
mod = relay.transform.InferType()(mod)
mutated_mod['func_8613'] = func_8613
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8613_call = mutated_mod.get_global_var('func_8613')
call_8614 = func_8613_call()
output = call_8614
func_8615 = relay.Function([], output)
mutated_mod['func_8615'] = func_8615
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8684 = relay.var("var_8684", dtype = "float32", shape = (7, 1, 4))#candidate|8684|(7, 1, 4)|var|float32
uop_8685 = relay.cosh(var_8684.astype('float32')) # shape=(7, 1, 4)
func_5625_call = mod.get_global_var('func_5625')
func_5627_call = mutated_mod.get_global_var('func_5627')
const_8691 = relay.const([[-5,2,-10,3,-3,6,-6,9,2,9,-10,-5,7,-10],[5,6,3,-5,1,8,8,7,2,6,-10,5,-5,3],[-8,-10,5,2,-4,-2,9,-10,3,-5,-5,-8,5,5],[6,3,2,-8,9,-6,8,-7,9,8,-7,6,-3,7],[10,7,9,-1,-5,-10,8,9,-6,-5,-6,-9,-5,6],[-1,-3,2,-6,-3,-4,5,-3,9,-1,8,2,-8,-8],[-5,-10,-5,9,4,-10,4,5,5,-2,-8,1,-8,2],[1,-8,2,5,10,5,-9,3,9,3,-4,10,8,9],[-2,4,1,-10,-10,2,-8,6,-4,-3,4,6,-4,3],[-6,10,5,1,-5,-1,-7,5,-10,7,7,-4,9,-1],[6,5,-8,2,-8,-9,6,-6,-1,-2,-9,4,10,-8],[-9,2,-5,-1,-1,-4,6,1,-3,8,-7,6,1,5],[7,-2,2,-4,-10,-10,8,1,-9,-9,-9,-6,-9,-6],[2,4,5,-8,10,6,8,3,9,-1,6,1,-9,6],[9,10,3,3,-2,5,-4,3,4,-10,-2,3,5,5],[-1,3,3,5,1,-2,-8,6,5,-6,7,-3,-8,-7],[10,-6,3,5,5,9,-6,9,-7,8,6,10,1,-4],[-10,4,3,3,9,1,5,-10,-3,7,-3,10,10,-3],[-3,-1,-8,-3,7,8,-3,10,8,-9,8,-1,-2,10],[-10,6,-10,8,-4,-8,6,-6,4,7,7,-5,3,-6],[4,8,9,-9,10,6,8,-4,-9,-5,6,6,-7,8],[4,6,10,-4,-7,7,-10,-3,6,-5,8,7,-4,-9],[4,3,-9,-8,3,7,6,-9,-6,7,2,6,-3,-5],[-8,8,-2,-1,-7,2,-2,-10,-5,-7,3,-5,-7,8]], dtype = "uint32")#candidate|8691|(24, 14)|const|uint32
call_8690 = relay.TupleGetItem(func_5625_call(relay.reshape(const_8691.astype('uint32'), [336,])), 0)
call_8692 = relay.TupleGetItem(func_5627_call(relay.reshape(const_8691.astype('uint32'), [336,])), 0)
output = relay.Tuple([uop_8685,call_8690,const_8691,])
output2 = relay.Tuple([uop_8685,call_8692,const_8691,])
func_8698 = relay.Function([var_8684,], output)
mod['func_8698'] = func_8698
mod = relay.transform.InferType()(mod)
var_8699 = relay.var("var_8699", dtype = "float32", shape = (7, 1, 4))#candidate|8699|(7, 1, 4)|var|float32
output = func_8698(var_8699)
func_8700 = relay.Function([var_8699], output)
mutated_mod['func_8700'] = func_8700
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5040_call = mod.get_global_var('func_5040')
func_5041_call = mutated_mod.get_global_var('func_5041')
call_8714 = relay.TupleGetItem(func_5040_call(), 1)
call_8715 = relay.TupleGetItem(func_5041_call(), 1)
func_6765_call = mod.get_global_var('func_6765')
func_6767_call = mutated_mod.get_global_var('func_6767')
call_8732 = relay.TupleGetItem(func_6765_call(), 0)
call_8733 = relay.TupleGetItem(func_6767_call(), 0)
output = relay.Tuple([call_8714,call_8732,])
output2 = relay.Tuple([call_8715,call_8733,])
func_8737 = relay.Function([], output)
mod['func_8737'] = func_8737
mod = relay.transform.InferType()(mod)
output = func_8737()
func_8738 = relay.Function([], output)
mutated_mod['func_8738'] = func_8738
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7487_call = mod.get_global_var('func_7487')
func_7488_call = mutated_mod.get_global_var('func_7488')
call_8793 = relay.TupleGetItem(func_7487_call(), 0)
call_8794 = relay.TupleGetItem(func_7488_call(), 0)
func_8198_call = mod.get_global_var('func_8198')
func_8199_call = mutated_mod.get_global_var('func_8199')
call_8815 = relay.TupleGetItem(func_8198_call(), 2)
call_8816 = relay.TupleGetItem(func_8199_call(), 2)
output = relay.Tuple([call_8793,call_8815,])
output2 = relay.Tuple([call_8794,call_8816,])
func_8827 = relay.Function([], output)
mod['func_8827'] = func_8827
mod = relay.transform.InferType()(mod)
mutated_mod['func_8827'] = func_8827
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8827_call = mutated_mod.get_global_var('func_8827')
call_8828 = func_8827_call()
output = call_8828
func_8829 = relay.Function([], output)
mutated_mod['func_8829'] = func_8829
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8872 = relay.var("var_8872", dtype = "float32", shape = (15, 2, 12))#candidate|8872|(15, 2, 12)|var|float32
var_8873 = relay.var("var_8873", dtype = "float32", shape = (15, 2, 12))#candidate|8873|(15, 2, 12)|var|float32
bop_8874 = relay.divide(var_8872.astype('float32'), relay.reshape(var_8873.astype('float32'), relay.shape_of(var_8872))) # shape=(15, 2, 12)
output = relay.Tuple([bop_8874,])
output2 = relay.Tuple([bop_8874,])
func_8888 = relay.Function([var_8872,var_8873,], output)
mod['func_8888'] = func_8888
mod = relay.transform.InferType()(mod)
mutated_mod['func_8888'] = func_8888
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8888_call = mutated_mod.get_global_var('func_8888')
var_8890 = relay.var("var_8890", dtype = "float32", shape = (15, 2, 12))#candidate|8890|(15, 2, 12)|var|float32
var_8891 = relay.var("var_8891", dtype = "float32", shape = (15, 2, 12))#candidate|8891|(15, 2, 12)|var|float32
call_8889 = func_8888_call(var_8890,var_8891,)
output = call_8889
func_8892 = relay.Function([var_8890,var_8891,], output)
mutated_mod['func_8892'] = func_8892
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5960_call = mod.get_global_var('func_5960')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_8907 = relay.TupleGetItem(func_5960_call(), 0)
call_8908 = relay.TupleGetItem(func_5962_call(), 0)
output = relay.Tuple([call_8907,])
output2 = relay.Tuple([call_8908,])
func_8939 = relay.Function([], output)
mod['func_8939'] = func_8939
mod = relay.transform.InferType()(mod)
mutated_mod['func_8939'] = func_8939
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8939_call = mutated_mod.get_global_var('func_8939')
call_8940 = func_8939_call()
output = call_8940
func_8941 = relay.Function([], output)
mutated_mod['func_8941'] = func_8941
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8560_call = mod.get_global_var('func_8560')
func_8561_call = mutated_mod.get_global_var('func_8561')
call_8959 = func_8560_call()
call_8960 = func_8560_call()
var_8968 = relay.var("var_8968", dtype = "float32", shape = (15, 7, 10))#candidate|8968|(15, 7, 10)|var|float32
bop_8969 = relay.logical_or(call_8959.astype('bool'), relay.reshape(var_8968.astype('bool'), relay.shape_of(call_8959))) # shape=(15, 7, 10)
bop_8972 = relay.logical_or(call_8960.astype('bool'), relay.reshape(var_8968.astype('bool'), relay.shape_of(call_8960))) # shape=(15, 7, 10)
output = bop_8969
output2 = bop_8972
func_8973 = relay.Function([var_8968,], output)
mod['func_8973'] = func_8973
mod = relay.transform.InferType()(mod)
var_8974 = relay.var("var_8974", dtype = "float32", shape = (15, 7, 10))#candidate|8974|(15, 7, 10)|var|float32
output = func_8973(var_8974)
func_8975 = relay.Function([var_8974], output)
mutated_mod['func_8975'] = func_8975
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6522_call = mod.get_global_var('func_6522')
func_6524_call = mutated_mod.get_global_var('func_6524')
call_9006 = relay.TupleGetItem(func_6522_call(), 0)
call_9007 = relay.TupleGetItem(func_6524_call(), 0)
func_5960_call = mod.get_global_var('func_5960')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_9013 = relay.TupleGetItem(func_5960_call(), 0)
call_9014 = relay.TupleGetItem(func_5962_call(), 0)
func_8613_call = mod.get_global_var('func_8613')
func_8615_call = mutated_mod.get_global_var('func_8615')
call_9026 = func_8613_call()
call_9027 = func_8613_call()
output = relay.Tuple([call_9006,call_9013,call_9026,])
output2 = relay.Tuple([call_9007,call_9014,call_9027,])
func_9035 = relay.Function([], output)
mod['func_9035'] = func_9035
mod = relay.transform.InferType()(mod)
output = func_9035()
func_9036 = relay.Function([], output)
mutated_mod['func_9036'] = func_9036
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4949_call = mod.get_global_var('func_4949')
func_4951_call = mutated_mod.get_global_var('func_4951')
call_9072 = relay.TupleGetItem(func_4949_call(), 1)
call_9073 = relay.TupleGetItem(func_4951_call(), 1)
output = relay.Tuple([call_9072,])
output2 = relay.Tuple([call_9073,])
func_9079 = relay.Function([], output)
mod['func_9079'] = func_9079
mod = relay.transform.InferType()(mod)
output = func_9079()
func_9080 = relay.Function([], output)
mutated_mod['func_9080'] = func_9080
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6579_call = mod.get_global_var('func_6579')
func_6581_call = mutated_mod.get_global_var('func_6581')
call_9081 = func_6579_call()
call_9082 = func_6579_call()
output = call_9081
output2 = call_9082
func_9085 = relay.Function([], output)
mod['func_9085'] = func_9085
mod = relay.transform.InferType()(mod)
output = func_9085()
func_9086 = relay.Function([], output)
mutated_mod['func_9086'] = func_9086
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4708_call = mod.get_global_var('func_4708')
func_4710_call = mutated_mod.get_global_var('func_4710')
call_9150 = relay.TupleGetItem(func_4708_call(), 1)
call_9151 = relay.TupleGetItem(func_4710_call(), 1)
func_8613_call = mod.get_global_var('func_8613')
func_8615_call = mutated_mod.get_global_var('func_8615')
call_9161 = func_8613_call()
call_9162 = func_8613_call()
func_5040_call = mod.get_global_var('func_5040')
func_5041_call = mutated_mod.get_global_var('func_5041')
call_9163 = relay.TupleGetItem(func_5040_call(), 1)
call_9164 = relay.TupleGetItem(func_5041_call(), 1)
output = relay.Tuple([call_9150,call_9161,call_9163,])
output2 = relay.Tuple([call_9151,call_9162,call_9164,])
func_9178 = relay.Function([], output)
mod['func_9178'] = func_9178
mod = relay.transform.InferType()(mod)
output = func_9178()
func_9179 = relay.Function([], output)
mutated_mod['func_9179'] = func_9179
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1498_call = mod.get_global_var('func_1498')
func_1500_call = mutated_mod.get_global_var('func_1500')
call_9185 = func_1498_call()
call_9186 = func_1498_call()
func_7324_call = mod.get_global_var('func_7324')
func_7326_call = mutated_mod.get_global_var('func_7326')
call_9190 = relay.TupleGetItem(func_7324_call(), 1)
call_9191 = relay.TupleGetItem(func_7326_call(), 1)
func_2188_call = mod.get_global_var('func_2188')
func_2190_call = mutated_mod.get_global_var('func_2190')
call_9198 = relay.TupleGetItem(func_2188_call(), 0)
call_9199 = relay.TupleGetItem(func_2190_call(), 0)
func_7437_call = mod.get_global_var('func_7437')
func_7439_call = mutated_mod.get_global_var('func_7439')
var_9202 = relay.var("var_9202", dtype = "float32", shape = (2,))#candidate|9202|(2,)|var|float32
call_9201 = relay.TupleGetItem(func_7437_call(relay.reshape(var_9202.astype('float32'), [1, 1, 2])), 0)
call_9203 = relay.TupleGetItem(func_7439_call(relay.reshape(var_9202.astype('float32'), [1, 1, 2])), 0)
output = relay.Tuple([call_9185,call_9190,call_9198,call_9201,var_9202,])
output2 = relay.Tuple([call_9186,call_9191,call_9199,call_9203,var_9202,])
func_9232 = relay.Function([var_9202,], output)
mod['func_9232'] = func_9232
mod = relay.transform.InferType()(mod)
var_9233 = relay.var("var_9233", dtype = "float32", shape = (2,))#candidate|9233|(2,)|var|float32
output = func_9232(var_9233)
func_9234 = relay.Function([var_9233], output)
mutated_mod['func_9234'] = func_9234
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4330_call = mod.get_global_var('func_4330')
func_4332_call = mutated_mod.get_global_var('func_4332')
call_9258 = relay.TupleGetItem(func_4330_call(), 0)
call_9259 = relay.TupleGetItem(func_4332_call(), 0)
output = relay.Tuple([call_9258,])
output2 = relay.Tuple([call_9259,])
func_9276 = relay.Function([], output)
mod['func_9276'] = func_9276
mod = relay.transform.InferType()(mod)
output = func_9276()
func_9277 = relay.Function([], output)
mutated_mod['func_9277'] = func_9277
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4776_call = mod.get_global_var('func_4776')
func_4778_call = mutated_mod.get_global_var('func_4778')
call_9284 = relay.TupleGetItem(func_4776_call(), 2)
call_9285 = relay.TupleGetItem(func_4778_call(), 2)
output = relay.Tuple([call_9284,])
output2 = relay.Tuple([call_9285,])
func_9289 = relay.Function([], output)
mod['func_9289'] = func_9289
mod = relay.transform.InferType()(mod)
output = func_9289()
func_9290 = relay.Function([], output)
mutated_mod['func_9290'] = func_9290
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5096_call = mod.get_global_var('func_5096')
func_5097_call = mutated_mod.get_global_var('func_5097')
call_9306 = relay.TupleGetItem(func_5096_call(), 1)
call_9307 = relay.TupleGetItem(func_5097_call(), 1)
func_2329_call = mod.get_global_var('func_2329')
func_2332_call = mutated_mod.get_global_var('func_2332')
const_9337 = relay.const([6,-8,5,7,1,8,8,10,-7,-7,-6,-9,10,-5,8,2,4,-8,-6,-2,8,2,9,-5,-8,1,1,1,10,6,1,-3,-10,5,-7,-2,-9,10,-6,-6,7,-10,-7,-2,8,4,-7,-6,9,2,-10,-10,1,-9,-5,3,2,2,8,-6,-3,-6,9,-7,5,2,-6,-4,-2,-3,-10,1,-4,3,7,6,2,-10,6,-7,9,-6,-4,1,5,-5,4,9,10,-8,1,-7,-8,2,-6,-2,-10,1,9,10,-10,1,2,10,1,-9,1,-5,-2,-2,-8,5,-5,2,8,9,8,2,9,-1,9,3,5,1,-7,-10,-9,2,1,7,-7,-9,-6,6,2,-8,-7,-5,8,-4,10,9,8,3,-7,-1,9,-1,1,-2,3,6,-10,-6,6,5,-5,7,-8,-5,3,9,-7,8,-8,-1,-8,-2,-7,-9,2,10,8,3,10,-1,3,4,2,8,-10,-2,-5,1,5,-8,3,4,-7,-9,4,-9,-2,7,-5,-6,3,5,2,-3,-5,-4,8,2,-7,-2,1,-8,-4,-10,1,4,-2,5,9,3,-8,4,6,-3,7,4,9,-4,6,-4,8,10,-10,-5,2,3,-4,-7,-3,3,-8,-1,-8,3,-6,10,4,-5,-4,3,10,-3,-3,7,1,-7,9,-9,10,1,-7,-2,-9,-9,-9,7,8,-6,-2,-4,-2,-3,8,8,-4,-6,7,5,-6,1,5,-7,-9,4,5,-6,9,-8,3,-5,-4,-9,-8,9,9,1,9,6,10,-1,10,-2,1,5,7,-3,10,1,6,-4,-1,8,-5,-10,-6,10,2,-4,3,9,1,10,-1,1,-3,2,-2,-6,5,-1,-10,-7,-4,-5,10,4,3,-3,5,4,1,-3,-6,-9,8,-4,-3,-9,3,2,8,-5,10,-7,-5,4,-7,-10,-10,6,9,4,-2,-6,9,-10,-6,7,-6,2,5,7,6,7,-6,-4,4,6,-3,4,-4,8,-1,5,-1,-9,6,-2,-1,10,3,-2,-2,-4,-3,-8,3,7,4,1,3,-4,6,-3,5,4,-7,-3,-7,7,-7,8,-2,-4,-9,2,7,-2,1,1,1,2,-4,-1,3,-2,3,-10,7,3,-3,9,-2,2,-8,-9,-8,7,5,-2,5,1,-4,-5,7,6,-3,-9,-5,8,3,2,-8,3,8,6,-9,-3,7,5,-6,-5,5,-5,4,4,3,-1,7,-4,9,-8,6,5,-1,-1,-1,-7,-10,-7,-10,-2,-10,-3,6,2,9,8,-3,-1,3,-1,-6,-1,5,-1,-10,7,7,-7,-7,-2,2,2,-3,2,-4,-10,-3,9,8,4,-4,-10,-1,5,9,-6,7,6,2,-8,1,7,9,-4,5,-9,-1,1,7,1,5,-6,-9,4,2,-8,-2,-9,-10,-1,2,-5,10,-6,3,-4,-9,3,-5,-7,-1,-10,-9,-5,3,-5,6,10,5,-3,-5,9,7,10,-8,-7,-6,-1,5,4,-2,4,9,1,2,-6,-3,1,-6,-2,-1,-3,-5,2,10,9,-6,-9,-1,-3,-6,-1,4,9,-6,4,9,6,4,5,5,8,-10,-10,-9,5,-2,6,-2,-5,7,8,9,-1,2,-10,1,2,-7,4,5,-5,8,2,8,6,9,1,-8,2,6,10,-10,-1,-5,4,4,7,-1,-10,6,-4,2,2,6,1,-6,1,1,4,9,-6,-9,5,-1,1,-2,4,-8,3,2,8,-5,5,-3,2,9,4,-2,-10,-3,4,-3,7,-7,-5,-4,-7,2,-5,-1,6,8,7,-9,2,-5,-7,-5,10,-7,-10,-10,2,-9,6,5,-9,3,2,5,6,-2,-10,9,8,-9,-1,-5,10,7,3,9,4,2,-6,9,8,-4,8,-10,-3,5,7,-4,-6,-2,-4,3,-3,-3,-3,-8,4,1,7,-8,-2,2,-7,-6,-9,1,7,9,-10,-8,5,-6,-10,-10,-8,-9,5,10,10,-2,2,2,9,1,4,-6,7,-7,-7,-8,-7,-5,-10,2,-1,-1,-10,-6,4,2,-9,4,-8,-7,-10,-10,-3,7,2,-5,6,9,9,-6,-5,1,-5,-3,8,6,4,4,2,1,3,-8,4,-6,3,7,8,-3,5,-6,6,10,9,-7,5,7,-8,8,4,-6,-6,6,-3,7,-5,-10,6,-10,3,-9,9,-10,-3,-8,2,8,9,4,-5,9,-5,-2,10,-7,1,-3,2,-7,2,5,-9,2,9,3,8,-5,-2,3,10,5,5,-2,-1,-5,-4,7,-3,5,-6,5,10,-4,-6,-4,-8,-6,9,2,-8,-3,7,-8,-10,2,9,9,-7,2,1,-8,5,3,-3,-3,4,-3,-5,-1,2,-10,-3,10,1,1,-8,-2,2,-8,-10,8,-7,5,2,7,-1,6,-6,-2,-10,1,-4,2,8,-3,-3,10,-1,-1,3,6,-7,-8,1,-1,4,9,-5,-4,-3,9,7,5,6,-1,-8,-3,-1,9,2,3,2,-4,4,-9,-6,-4,-10,10,-9,-7,8,-3,2,1,1,-1,-5,-9,-6,10,7,-2,-7,4,-3,-4,-2,10,-8,-9,-2,-4,-9,9,-3,7,3,8,-2,-7,-5,6,7,-3,-4,7,-5,6,-6,-9,-2,-1,-6,6,-3,-4,3,6,-3,-6,-1,6,4,10,-5,-10,-7,-5,-10,-2,-3,1,-6,7,-4,-8,-5,-1,-4,-10,-3,-7,1,-5,2,-6,-4,2,-4,9,3,-4,-2,9,7,-9,2,-3,10,6,5,-9,-8,1,2,-1,9,-5,-10,1,8,2,-7,-2,2,9,7,8,-10,9,-1,9,4,5,10,5,-7,7,1,9,7,-1,-5,-2,-10,-7,9,-4,-9,1,8,-9,-1,9,6,-5,7,7,-7,-6,-10,-1,-10,6,-6,1,10,-9,6,3,5,5,6,-3,-3,-1,6,5,-8,7,7,10,-6,8,-6,-4,-1,-4,-2,-9,9,-9,-3,-1,5,-7,-6,10,7,-5,-3,5,-7,10,-7,4,2,-1,6,-7,1,-3,-2,-8,3,1,2,9,-6,-9,-1,-1,4,7,7,5,10,3,-1,3,4,-9,2,6,-8,-3,7,1,9,3,3,-1,6,-9,7,-4,-5,-7,-2,9,5,-8,-7,4,-8,-9,7,-8,-6,-3,-8,-1,-9,-2,-1,-10,2,-1,-8,4,-3,8,2,6,-2,10,5,3,-10,-6,7,-9,5,-9,-4,8,-7,-1,2,-7,-6,4,-10,9,5,1,3,-2,-10,3,5,1,-10,1,10,8,-6,-1,-1,-6,-8,-10,-9,-1,-5,-2,8,4,-8,9,4,-7,-10,-9,-1,-7,4,-1,-2,-1,-9,-9,6,2,-8,-1,-8,5,7,9,8,6,-5,-2,-9,4,-6,4,6,-4,-7,-7,5,3,3,-7,-7,-3,-10,-9,-10,9,-6,5,-9,6,-8,-2,-4,-3,6,10,-5,-6,-9,-7,8,4,1,9,10,7,-10,-1,6,3,-5,5,-7,-8,6,5,3,9,9,-3,3,9,1,-10,-3,8,8,-10,2,1,-5,-3,4,-10,10,-3,7,8,1,6,-3,-4,6,5,-3,-10,-3,-5,-5,-1,2,9,6,-9,5,3,-8,8,2,-5,-2,-3,8,-3,7,-5,9,-10,1,-4,-3,-6,-3,-8,-10,9,-10,8,-4,-8,-8,-2,8,2,9,8,2,-4,8,9,7,-1,-2,-2,3,-9,-4,8,1,1,-7,-4,5,-1,2,-3,9,7,-7,8,-10,1,-8,-5,-10,-10,7,5,4,7,7,6,-5,5,-1,-10,-2,4,-1,-10,7,-7,4,8,-7,3,-4,9,-1,9,-9,-2,3,2,6,4,-2,10,2,-3,3,-4,4,-6,10], dtype = "uint32")#candidate|9337|(1470,)|const|uint32
call_9336 = relay.TupleGetItem(func_2329_call(relay.reshape(const_9337.astype('uint32'), [1470,])), 2)
call_9338 = relay.TupleGetItem(func_2332_call(relay.reshape(const_9337.astype('uint32'), [1470,])), 2)
output = relay.Tuple([call_9306,call_9336,const_9337,])
output2 = relay.Tuple([call_9307,call_9338,const_9337,])
func_9342 = relay.Function([], output)
mod['func_9342'] = func_9342
mod = relay.transform.InferType()(mod)
mutated_mod['func_9342'] = func_9342
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9342_call = mutated_mod.get_global_var('func_9342')
call_9343 = func_9342_call()
output = call_9343
func_9344 = relay.Function([], output)
mutated_mod['func_9344'] = func_9344
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2477_call = mod.get_global_var('func_2477')
func_2479_call = mutated_mod.get_global_var('func_2479')
call_9350 = relay.TupleGetItem(func_2477_call(), 1)
call_9351 = relay.TupleGetItem(func_2479_call(), 1)
func_8440_call = mod.get_global_var('func_8440')
func_8442_call = mutated_mod.get_global_var('func_8442')
call_9361 = relay.TupleGetItem(func_8440_call(), 0)
call_9362 = relay.TupleGetItem(func_8442_call(), 0)
func_1563_call = mod.get_global_var('func_1563')
func_1564_call = mutated_mod.get_global_var('func_1564')
call_9394 = relay.TupleGetItem(func_1563_call(), 4)
call_9395 = relay.TupleGetItem(func_1564_call(), 4)
var_9396 = relay.var("var_9396", dtype = "int8", shape = (7, 15, 14))#candidate|9396|(7, 15, 14)|var|int8
bop_9397 = relay.left_shift(call_9350.astype('int8'), relay.reshape(var_9396.astype('int8'), relay.shape_of(call_9350))) # shape=(7, 15, 14)
bop_9400 = relay.left_shift(call_9351.astype('int8'), relay.reshape(var_9396.astype('int8'), relay.shape_of(call_9351))) # shape=(7, 15, 14)
func_2815_call = mod.get_global_var('func_2815')
func_2816_call = mutated_mod.get_global_var('func_2816')
call_9401 = relay.TupleGetItem(func_2815_call(), 0)
call_9402 = relay.TupleGetItem(func_2816_call(), 0)
uop_9403 = relay.log2(var_9396.astype('float32')) # shape=(7, 15, 14)
output = relay.Tuple([call_9361,call_9394,bop_9397,call_9401,uop_9403,])
output2 = relay.Tuple([call_9362,call_9395,bop_9400,call_9402,uop_9403,])
func_9422 = relay.Function([var_9396,], output)
mod['func_9422'] = func_9422
mod = relay.transform.InferType()(mod)
var_9423 = relay.var("var_9423", dtype = "int8", shape = (7, 15, 14))#candidate|9423|(7, 15, 14)|var|int8
output = func_9422(var_9423)
func_9424 = relay.Function([var_9423], output)
mutated_mod['func_9424'] = func_9424
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8737_call = mod.get_global_var('func_8737')
func_8738_call = mutated_mod.get_global_var('func_8738')
call_9438 = relay.TupleGetItem(func_8737_call(), 0)
call_9439 = relay.TupleGetItem(func_8738_call(), 0)
output = relay.Tuple([call_9438,])
output2 = relay.Tuple([call_9439,])
func_9451 = relay.Function([], output)
mod['func_9451'] = func_9451
mod = relay.transform.InferType()(mod)
output = func_9451()
func_9452 = relay.Function([], output)
mutated_mod['func_9452'] = func_9452
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4456_call = mod.get_global_var('func_4456')
func_4458_call = mutated_mod.get_global_var('func_4458')
call_9519 = relay.TupleGetItem(func_4456_call(), 0)
call_9520 = relay.TupleGetItem(func_4458_call(), 0)
output = relay.Tuple([call_9519,])
output2 = relay.Tuple([call_9520,])
func_9530 = relay.Function([], output)
mod['func_9530'] = func_9530
mod = relay.transform.InferType()(mod)
mutated_mod['func_9530'] = func_9530
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9530_call = mutated_mod.get_global_var('func_9530')
call_9531 = func_9530_call()
output = call_9531
func_9532 = relay.Function([], output)
mutated_mod['func_9532'] = func_9532
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8440_call = mod.get_global_var('func_8440')
func_8442_call = mutated_mod.get_global_var('func_8442')
call_9594 = relay.TupleGetItem(func_8440_call(), 0)
call_9595 = relay.TupleGetItem(func_8442_call(), 0)
func_2188_call = mod.get_global_var('func_2188')
func_2190_call = mutated_mod.get_global_var('func_2190')
call_9596 = relay.TupleGetItem(func_2188_call(), 0)
call_9597 = relay.TupleGetItem(func_2190_call(), 0)
func_480_call = mod.get_global_var('func_480')
func_482_call = mutated_mod.get_global_var('func_482')
var_9605 = relay.var("var_9605", dtype = "float64", shape = (1050,))#candidate|9605|(1050,)|var|float64
call_9604 = relay.TupleGetItem(func_480_call(relay.reshape(var_9605.astype('float64'), [15, 7, 10])), 0)
call_9606 = relay.TupleGetItem(func_482_call(relay.reshape(var_9605.astype('float64'), [15, 7, 10])), 0)
output = relay.Tuple([call_9594,call_9596,call_9604,var_9605,])
output2 = relay.Tuple([call_9595,call_9597,call_9606,var_9605,])
func_9611 = relay.Function([var_9605,], output)
mod['func_9611'] = func_9611
mod = relay.transform.InferType()(mod)
var_9612 = relay.var("var_9612", dtype = "float64", shape = (1050,))#candidate|9612|(1050,)|var|float64
output = func_9611(var_9612)
func_9613 = relay.Function([var_9612], output)
mutated_mod['func_9613'] = func_9613
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7095_call = mod.get_global_var('func_7095')
func_7097_call = mutated_mod.get_global_var('func_7097')
call_9615 = relay.TupleGetItem(func_7095_call(), 0)
call_9616 = relay.TupleGetItem(func_7097_call(), 0)
output = relay.Tuple([call_9615,])
output2 = relay.Tuple([call_9616,])
func_9632 = relay.Function([], output)
mod['func_9632'] = func_9632
mod = relay.transform.InferType()(mod)
mutated_mod['func_9632'] = func_9632
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9632_call = mutated_mod.get_global_var('func_9632')
call_9633 = func_9632_call()
output = call_9633
func_9634 = relay.Function([], output)
mutated_mod['func_9634'] = func_9634
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8062_call = mod.get_global_var('func_8062')
func_8064_call = mutated_mod.get_global_var('func_8064')
call_9683 = relay.TupleGetItem(func_8062_call(), 0)
call_9684 = relay.TupleGetItem(func_8064_call(), 0)
func_6678_call = mod.get_global_var('func_6678')
func_6680_call = mutated_mod.get_global_var('func_6680')
var_9702 = relay.var("var_9702", dtype = "float32", shape = (1152,))#candidate|9702|(1152,)|var|float32
call_9701 = relay.TupleGetItem(func_6678_call(relay.reshape(var_9702.astype('float32'), [1152,])), 0)
call_9703 = relay.TupleGetItem(func_6680_call(relay.reshape(var_9702.astype('float32'), [1152,])), 0)
func_8125_call = mod.get_global_var('func_8125')
func_8128_call = mutated_mod.get_global_var('func_8128')
const_9705 = relay.const([-1.833813,-9.713022,-7.516144,-8.413364,-5.827228,-4.177193,6.223660,-3.757975,1.355837,8.876141,5.883509,-7.278027,-9.542002,6.600319,9.291648,6.333077,1.885620,5.279879,0.950312,-7.412960,0.452241,-8.229511,4.950886,7.078798,-6.031026,8.043857,9.809404,0.495747,-8.749715,2.414167,0.330891,7.063483,-5.429310,-9.703938,-9.629765,2.013257,8.485783,-5.643438,0.732253,6.100179,-5.496235,9.300269,3.384957,-8.684126,1.877800,5.197214,-1.005595,6.713653], dtype = "float32")#candidate|9705|(48,)|const|float32
call_9704 = relay.TupleGetItem(func_8125_call(relay.reshape(const_9705.astype('float32'), [48,])), 0)
call_9706 = relay.TupleGetItem(func_8128_call(relay.reshape(const_9705.astype('float32'), [48,])), 0)
func_4354_call = mod.get_global_var('func_4354')
func_4356_call = mutated_mod.get_global_var('func_4356')
call_9710 = relay.TupleGetItem(func_4354_call(), 0)
call_9711 = relay.TupleGetItem(func_4356_call(), 0)
output = relay.Tuple([call_9683,call_9701,var_9702,call_9704,const_9705,call_9710,])
output2 = relay.Tuple([call_9684,call_9703,var_9702,call_9706,const_9705,call_9711,])
func_9721 = relay.Function([var_9702,], output)
mod['func_9721'] = func_9721
mod = relay.transform.InferType()(mod)
var_9722 = relay.var("var_9722", dtype = "float32", shape = (1152,))#candidate|9722|(1152,)|var|float32
output = func_9721(var_9722)
func_9723 = relay.Function([var_9722], output)
mutated_mod['func_9723'] = func_9723
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4776_call = mod.get_global_var('func_4776')
func_4778_call = mutated_mod.get_global_var('func_4778')
call_9742 = relay.TupleGetItem(func_4776_call(), 3)
call_9743 = relay.TupleGetItem(func_4778_call(), 3)
func_9422_call = mod.get_global_var('func_9422')
func_9424_call = mutated_mod.get_global_var('func_9424')
call_9772 = relay.TupleGetItem(func_9422_call(relay.reshape(call_9742.astype('int8'), [7, 15, 14])), 2)
call_9773 = relay.TupleGetItem(func_9424_call(relay.reshape(call_9742.astype('int8'), [7, 15, 14])), 2)
func_3202_call = mod.get_global_var('func_3202')
func_3204_call = mutated_mod.get_global_var('func_3204')
var_9777 = relay.var("var_9777", dtype = "float64", shape = (560,))#candidate|9777|(560,)|var|float64
call_9776 = relay.TupleGetItem(func_3202_call(relay.reshape(var_9777.astype('float64'), [14, 10, 4])), 0)
call_9778 = relay.TupleGetItem(func_3204_call(relay.reshape(var_9777.astype('float64'), [14, 10, 4])), 0)
output = relay.Tuple([call_9742,call_9772,call_9776,var_9777,])
output2 = relay.Tuple([call_9743,call_9773,call_9778,var_9777,])
func_9780 = relay.Function([var_9777,], output)
mod['func_9780'] = func_9780
mod = relay.transform.InferType()(mod)
mutated_mod['func_9780'] = func_9780
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9781 = relay.var("var_9781", dtype = "float64", shape = (560,))#candidate|9781|(560,)|var|float64
func_9780_call = mutated_mod.get_global_var('func_9780')
call_9782 = func_9780_call(var_9781)
output = call_9782
func_9783 = relay.Function([var_9781], output)
mutated_mod['func_9783'] = func_9783
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9862 = relay.var("var_9862", dtype = "float32", shape = (5, 4, 6))#candidate|9862|(5, 4, 6)|var|float32
uop_9863 = relay.sin(var_9862.astype('float32')) # shape=(5, 4, 6)
func_8698_call = mod.get_global_var('func_8698')
func_8700_call = mutated_mod.get_global_var('func_8700')
var_9867 = relay.var("var_9867", dtype = "float32", shape = (28,))#candidate|9867|(28,)|var|float32
call_9866 = relay.TupleGetItem(func_8698_call(relay.reshape(var_9867.astype('float32'), [7, 1, 4])), 0)
call_9868 = relay.TupleGetItem(func_8700_call(relay.reshape(var_9867.astype('float32'), [7, 1, 4])), 0)
func_9232_call = mod.get_global_var('func_9232')
func_9234_call = mutated_mod.get_global_var('func_9234')
var_9870 = relay.var("var_9870", dtype = "float32", shape = (2,))#candidate|9870|(2,)|var|float32
call_9869 = relay.TupleGetItem(func_9232_call(relay.reshape(var_9870.astype('float32'), [2,])), 1)
call_9871 = relay.TupleGetItem(func_9234_call(relay.reshape(var_9870.astype('float32'), [2,])), 1)
func_3991_call = mod.get_global_var('func_3991')
func_3994_call = mutated_mod.get_global_var('func_3994')
const_9876 = relay.const([True,True,True,True,False,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,False,False,False,False,False,True,False,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,True,False,True,True], dtype = "bool")#candidate|9876|(550,)|const|bool
var_9877 = relay.var("var_9877", dtype = "bool", shape = (6600,))#candidate|9877|(6600,)|var|bool
call_9875 = relay.TupleGetItem(func_3991_call(relay.reshape(const_9876.astype('bool'), [1, 550]), relay.reshape(var_9877.astype('bool'), [12, 550]), ), 1)
call_9878 = relay.TupleGetItem(func_3994_call(relay.reshape(const_9876.astype('bool'), [1, 550]), relay.reshape(var_9877.astype('bool'), [12, 550]), ), 1)
output = relay.Tuple([uop_9863,call_9866,var_9867,call_9869,var_9870,call_9875,const_9876,var_9877,])
output2 = relay.Tuple([uop_9863,call_9868,var_9867,call_9871,var_9870,call_9878,const_9876,var_9877,])
func_9891 = relay.Function([var_9862,var_9867,var_9870,var_9877,], output)
mod['func_9891'] = func_9891
mod = relay.transform.InferType()(mod)
var_9892 = relay.var("var_9892", dtype = "float32", shape = (5, 4, 6))#candidate|9892|(5, 4, 6)|var|float32
var_9893 = relay.var("var_9893", dtype = "float32", shape = (28,))#candidate|9893|(28,)|var|float32
var_9894 = relay.var("var_9894", dtype = "float32", shape = (2,))#candidate|9894|(2,)|var|float32
var_9895 = relay.var("var_9895", dtype = "bool", shape = (6600,))#candidate|9895|(6600,)|var|bool
output = func_9891(var_9892,var_9893,var_9894,var_9895,)
func_9896 = relay.Function([var_9892,var_9893,var_9894,var_9895,], output)
mutated_mod['func_9896'] = func_9896
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7940_call = mod.get_global_var('func_7940')
func_7941_call = mutated_mod.get_global_var('func_7941')
call_9912 = func_7940_call()
call_9913 = func_7940_call()
func_3651_call = mod.get_global_var('func_3651')
func_3652_call = mutated_mod.get_global_var('func_3652')
call_9918 = relay.TupleGetItem(func_3651_call(), 2)
call_9919 = relay.TupleGetItem(func_3652_call(), 2)
func_6831_call = mod.get_global_var('func_6831')
func_6833_call = mutated_mod.get_global_var('func_6833')
call_9920 = relay.TupleGetItem(func_6831_call(), 0)
call_9921 = relay.TupleGetItem(func_6833_call(), 0)
var_9935 = relay.var("var_9935", dtype = "float32", shape = (4, 100))#candidate|9935|(4, 100)|var|float32
bop_9936 = relay.mod(call_9918.astype('float32'), relay.reshape(var_9935.astype('float32'), relay.shape_of(call_9918))) # shape=(4, 100)
bop_9939 = relay.mod(call_9919.astype('float32'), relay.reshape(var_9935.astype('float32'), relay.shape_of(call_9919))) # shape=(4, 100)
func_8125_call = mod.get_global_var('func_8125')
func_8128_call = mutated_mod.get_global_var('func_8128')
const_9949 = relay.const([-9.014967,4.098600,-4.693477,-0.369237,7.509193,-0.081984,8.126204,6.353752,-7.362493,3.672513,-1.109574,6.256328,-2.431114,-4.271156,8.581181,-3.244442,6.231541,8.094930,5.714428,3.497264,9.567845,6.843726,-4.320140,8.662436,0.567934,3.284829,5.816059,3.884814,9.566076,-3.719310,7.416733,-9.630579,-1.767991,8.303876,0.232994,-2.713938,-5.629793,3.933816,-9.004423,8.555233,1.593366,6.569694,-0.579759,5.902117,-1.934147,-7.976498,-5.220744,3.542667], dtype = "float32")#candidate|9949|(48,)|const|float32
call_9948 = relay.TupleGetItem(func_8125_call(relay.reshape(const_9949.astype('float32'), [48,])), 0)
call_9950 = relay.TupleGetItem(func_8128_call(relay.reshape(const_9949.astype('float32'), [48,])), 0)
bop_9952 = relay.floor_mod(bop_9936.astype('float64'), relay.reshape(call_9918.astype('float64'), relay.shape_of(bop_9936))) # shape=(4, 100)
bop_9955 = relay.floor_mod(bop_9939.astype('float64'), relay.reshape(call_9919.astype('float64'), relay.shape_of(bop_9939))) # shape=(4, 100)
func_3991_call = mod.get_global_var('func_3991')
func_3994_call = mutated_mod.get_global_var('func_3994')
var_9967 = relay.var("var_9967", dtype = "bool", shape = (550, 1))#candidate|9967|(550, 1)|var|bool
const_9968 = relay.const([False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,False,False,True,False,True,False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,False,False,False,True,True,True,True,False,False,False,False,True,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,True,True,False,True,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,True,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,True,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,True,False,False,False,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,True,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,False,True,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,True,False,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,False,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,True,False,True,True,False,True,True,True,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True], dtype = "bool")#candidate|9968|(6600,)|const|bool
call_9966 = relay.TupleGetItem(func_3991_call(relay.reshape(var_9967.astype('bool'), [1, 550]), relay.reshape(const_9968.astype('bool'), [12, 550]), ), 2)
call_9969 = relay.TupleGetItem(func_3994_call(relay.reshape(var_9967.astype('bool'), [1, 550]), relay.reshape(const_9968.astype('bool'), [12, 550]), ), 2)
output = relay.Tuple([call_9912,call_9920,call_9948,const_9949,bop_9952,call_9966,var_9967,const_9968,])
output2 = relay.Tuple([call_9913,call_9921,call_9950,const_9949,bop_9955,call_9969,var_9967,const_9968,])
func_9970 = relay.Function([var_9935,var_9967,], output)
mod['func_9970'] = func_9970
mod = relay.transform.InferType()(mod)
mutated_mod['func_9970'] = func_9970
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9970_call = mutated_mod.get_global_var('func_9970')
var_9972 = relay.var("var_9972", dtype = "float32", shape = (4, 100))#candidate|9972|(4, 100)|var|float32
var_9973 = relay.var("var_9973", dtype = "bool", shape = (550, 1))#candidate|9973|(550, 1)|var|bool
call_9971 = func_9970_call(var_9972,var_9973,)
output = call_9971
func_9974 = relay.Function([var_9972,var_9973,], output)
mutated_mod['func_9974'] = func_9974
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8939_call = mod.get_global_var('func_8939')
func_8941_call = mutated_mod.get_global_var('func_8941')
call_9992 = relay.TupleGetItem(func_8939_call(), 0)
call_9993 = relay.TupleGetItem(func_8941_call(), 0)
uop_10002 = relay.sqrt(call_9992.astype('float32')) # shape=(7, 15, 14)
uop_10004 = relay.sqrt(call_9993.astype('float32')) # shape=(7, 15, 14)
output = relay.Tuple([uop_10002,])
output2 = relay.Tuple([uop_10004,])
func_10016 = relay.Function([], output)
mod['func_10016'] = func_10016
mod = relay.transform.InferType()(mod)
mutated_mod['func_10016'] = func_10016
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10016_call = mutated_mod.get_global_var('func_10016')
call_10017 = func_10016_call()
output = call_10017
func_10018 = relay.Function([], output)
mutated_mod['func_10018'] = func_10018
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4472_call = mod.get_global_var('func_4472')
func_4474_call = mutated_mod.get_global_var('func_4474')
call_10052 = relay.TupleGetItem(func_4472_call(), 0)
call_10053 = relay.TupleGetItem(func_4474_call(), 0)
func_4456_call = mod.get_global_var('func_4456')
func_4458_call = mutated_mod.get_global_var('func_4458')
call_10063 = relay.TupleGetItem(func_4456_call(), 0)
call_10064 = relay.TupleGetItem(func_4458_call(), 0)
func_5096_call = mod.get_global_var('func_5096')
func_5097_call = mutated_mod.get_global_var('func_5097')
call_10073 = relay.TupleGetItem(func_5096_call(), 1)
call_10074 = relay.TupleGetItem(func_5097_call(), 1)
output = relay.Tuple([call_10052,call_10063,call_10073,])
output2 = relay.Tuple([call_10053,call_10064,call_10074,])
func_10096 = relay.Function([], output)
mod['func_10096'] = func_10096
mod = relay.transform.InferType()(mod)
mutated_mod['func_10096'] = func_10096
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10096_call = mutated_mod.get_global_var('func_10096')
call_10097 = func_10096_call()
output = call_10097
func_10098 = relay.Function([], output)
mutated_mod['func_10098'] = func_10098
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7269_call = mod.get_global_var('func_7269')
func_7270_call = mutated_mod.get_global_var('func_7270')
call_10107 = relay.TupleGetItem(func_7269_call(), 0)
call_10108 = relay.TupleGetItem(func_7270_call(), 0)
output = relay.Tuple([call_10107,])
output2 = relay.Tuple([call_10108,])
func_10113 = relay.Function([], output)
mod['func_10113'] = func_10113
mod = relay.transform.InferType()(mod)
output = func_10113()
func_10114 = relay.Function([], output)
mutated_mod['func_10114'] = func_10114
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2815_call = mod.get_global_var('func_2815')
func_2816_call = mutated_mod.get_global_var('func_2816')
call_10125 = relay.TupleGetItem(func_2815_call(), 0)
call_10126 = relay.TupleGetItem(func_2816_call(), 0)
func_7940_call = mod.get_global_var('func_7940')
func_7941_call = mutated_mod.get_global_var('func_7941')
call_10131 = func_7940_call()
call_10132 = func_7940_call()
func_8230_call = mod.get_global_var('func_8230')
func_8232_call = mutated_mod.get_global_var('func_8232')
call_10149 = relay.TupleGetItem(func_8230_call(), 1)
call_10150 = relay.TupleGetItem(func_8232_call(), 1)
var_10157 = relay.var("var_10157", dtype = "float32", shape = (12, 5, 15))#candidate|10157|(12, 5, 15)|var|float32
bop_10158 = relay.bitwise_xor(call_10125.astype('uint16'), relay.reshape(var_10157.astype('uint16'), relay.shape_of(call_10125))) # shape=(12, 5, 15)
bop_10161 = relay.bitwise_xor(call_10126.astype('uint16'), relay.reshape(var_10157.astype('uint16'), relay.shape_of(call_10126))) # shape=(12, 5, 15)
output = relay.Tuple([call_10131,call_10149,bop_10158,])
output2 = relay.Tuple([call_10132,call_10150,bop_10161,])
func_10214 = relay.Function([var_10157,], output)
mod['func_10214'] = func_10214
mod = relay.transform.InferType()(mod)
mutated_mod['func_10214'] = func_10214
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10215 = relay.var("var_10215", dtype = "float32", shape = (12, 5, 15))#candidate|10215|(12, 5, 15)|var|float32
func_10214_call = mutated_mod.get_global_var('func_10214')
call_10216 = func_10214_call(var_10215)
output = call_10216
func_10217 = relay.Function([var_10215], output)
mutated_mod['func_10217'] = func_10217
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7667_call = mod.get_global_var('func_7667')
func_7668_call = mutated_mod.get_global_var('func_7668')
call_10221 = relay.TupleGetItem(func_7667_call(), 0)
call_10222 = relay.TupleGetItem(func_7668_call(), 0)
var_10226 = relay.var("var_10226", dtype = "float32", shape = (12, 5, 15))#candidate|10226|(12, 5, 15)|var|float32
bop_10227 = relay.less_equal(call_10221.astype('bool'), relay.reshape(var_10226.astype('bool'), relay.shape_of(call_10221))) # shape=(12, 5, 15)
bop_10230 = relay.less_equal(call_10222.astype('bool'), relay.reshape(var_10226.astype('bool'), relay.shape_of(call_10222))) # shape=(12, 5, 15)
uop_10242 = relay.log2(var_10226.astype('float64')) # shape=(12, 5, 15)
func_3222_call = mod.get_global_var('func_3222')
func_3224_call = mutated_mod.get_global_var('func_3224')
call_10251 = relay.TupleGetItem(func_3222_call(), 0)
call_10252 = relay.TupleGetItem(func_3224_call(), 0)
bop_10260 = relay.floor_divide(uop_10242.astype('float32'), relay.reshape(bop_10227.astype('float32'), relay.shape_of(uop_10242))) # shape=(12, 5, 15)
bop_10263 = relay.floor_divide(uop_10242.astype('float32'), relay.reshape(bop_10230.astype('float32'), relay.shape_of(uop_10242))) # shape=(12, 5, 15)
func_2477_call = mod.get_global_var('func_2477')
func_2479_call = mutated_mod.get_global_var('func_2479')
call_10264 = relay.TupleGetItem(func_2477_call(), 2)
call_10265 = relay.TupleGetItem(func_2479_call(), 2)
func_8038_call = mod.get_global_var('func_8038')
func_8039_call = mutated_mod.get_global_var('func_8039')
call_10271 = relay.TupleGetItem(func_8038_call(), 2)
call_10272 = relay.TupleGetItem(func_8039_call(), 2)
func_3085_call = mod.get_global_var('func_3085')
func_3086_call = mutated_mod.get_global_var('func_3086')
call_10288 = relay.TupleGetItem(func_3085_call(), 1)
call_10289 = relay.TupleGetItem(func_3086_call(), 1)
func_2105_call = mod.get_global_var('func_2105')
func_2107_call = mutated_mod.get_global_var('func_2107')
call_10309 = relay.TupleGetItem(func_2105_call(), 0)
call_10310 = relay.TupleGetItem(func_2107_call(), 0)
func_8698_call = mod.get_global_var('func_8698')
func_8700_call = mutated_mod.get_global_var('func_8700')
const_10314 = relay.const([[-0.924498,2.366608,1.199406,-6.921420,3.517728,-6.724286,0.112469,9.460070,-1.508288,-3.527575,-8.809400,-6.421026,-2.905528,6.248839,-6.027212,-5.316249,-5.956890,-2.241910,6.391524,-4.608403,2.192157,5.906822,-4.081339,-3.185407,8.585818,-1.462446,-0.508818,-0.600309]], dtype = "float32")#candidate|10314|(1, 28)|const|float32
call_10313 = relay.TupleGetItem(func_8698_call(relay.reshape(const_10314.astype('float32'), [7, 1, 4])), 1)
call_10315 = relay.TupleGetItem(func_8700_call(relay.reshape(const_10314.astype('float32'), [7, 1, 4])), 1)
var_10322 = relay.var("var_10322", dtype = "float32", shape = (12, 5, 15))#candidate|10322|(12, 5, 15)|var|float32
bop_10323 = relay.logical_or(bop_10260.astype('bool'), relay.reshape(var_10322.astype('bool'), relay.shape_of(bop_10260))) # shape=(12, 5, 15)
bop_10326 = relay.logical_or(bop_10263.astype('bool'), relay.reshape(var_10322.astype('bool'), relay.shape_of(bop_10263))) # shape=(12, 5, 15)
func_4949_call = mod.get_global_var('func_4949')
func_4951_call = mutated_mod.get_global_var('func_4951')
call_10337 = relay.TupleGetItem(func_4949_call(), 0)
call_10338 = relay.TupleGetItem(func_4951_call(), 0)
func_1498_call = mod.get_global_var('func_1498')
func_1500_call = mutated_mod.get_global_var('func_1500')
call_10359 = func_1498_call()
call_10360 = func_1498_call()
func_7940_call = mod.get_global_var('func_7940')
func_7941_call = mutated_mod.get_global_var('func_7941')
call_10364 = func_7940_call()
call_10365 = func_7940_call()
func_4155_call = mod.get_global_var('func_4155')
func_4159_call = mutated_mod.get_global_var('func_4159')
const_10368 = relay.const([-5,-3,-8,-6,-10,-5,-7,-2,7,9,-4,1,3,3,1,4,-2,-10,10,1,4,-9,-2,8,-8,7,-5,9,-4,-6,10,-2,7,-5,7,-6,-2,2,3,5,-8,5,-1,-3,-9,-9,-1,1,2,-2,2,1,-3,7,-4,-9,-5,10,-1,10,-4,-8,1,-2,5,-3,3,2,9,-6,-2,-7,-1,2,2,1,10,-2,9,5,9,3,-1,10,4,3,10,4,9,-3,-9,-8,4,-1,5,4,-3,-5,-2,6,-8,-2,3,2,-4,-4,9,-2,-3,3,9,9,6,10,-9,-4,9,7,-3,-5,-4,-2,10,-6,-8,-8,-8,-3,-3,4,1,-8,5,-4,4,9,-8,-1,-4,-1,5,1,8,-10,7,2,-4,-10,-8,9,-4,10,-9,10,9,8,-3,-9,-3,4,5,-7,6,7,-2,6,9,7,8,-3,-1,10,2,-6,10,-6,-6,1,-10,6,9,9,-9,-5,-4,-3,-1,-8,4,-1,-2,7,-10,9,-1,4,-8,-9,7,-3,4,5,-3,-10,5,-1,-6,6,-1,8,4,3,2,9,5,2,8,-5,-10,-7,-6,-5,-9,10,10,3,9,5,7,5,-4,9,6,-4,-9,-5,-1,9,3,-1,9,-4,9,10,-3,-10,-1,10,5,6,-5,10,1,-6,-3,5,1,8,1,10,4,1,-8,-5,-5,8,-1,-5,-10,-5,8,-4,-3,10,2,-10,-7,4,-3,10,-7,7,-9,-10,-3,-3,-7,9,1,6,9,-2,8,-6,2,-1,4,-6,-10,3,1,4,3,10,5,9,-3,-2,6,3,4,6,-2,3,1,7,2,-4,7,8,9,7,6,-2,-9,-10,-9,-3,3,2,3,-9,-3,9,6,-1,3,-8,7,-3,5,9,2,-2,9,-10,-5,7,-2,5,4,-5,-6,-7,-3,9,-6,1,-2,4,8,6,-4,1,-9,-4,-6,9,-1,5,9,-1,2,-2,6,-8,1,-10,-6,9,-1,8,3,7,6,-8,-4,7,-1,-2,4,-3,-3,9,6,-7,-2,-2,4,1,-1,-2,-7,3,-9,-7,7,9,-3,-3,6,-7,7,-7,1,3,-6,9,6,-1,8,-10,-8,-7,5,3,10,-4,-9,9,9,-2,-7,-6,4,9,-7,-9,6,-9,7,-6,10,-5,-1,1,-6,-2,-3,-7,-8,-8,-3,-2,-4,2,3,-8,8,-3,8,8,6,-7,2,7,10,7,-4,-4,9,10,4,6,1,-2,3,1,1,2,3,3,7,-9,-10,1,-7,-3,9,4,7,9,3,3,7,7,-5,5,2,-6,5,2,-8,-4,4,-9,1,3,7,9,-1,5,-9,-9,2,-3,-1,-8,10,10,-9,7,6,-3,-5,-6,-1,2,1,10,7,10,-8,8,2,4,-6,1,-10,-4,9,3,1,9,-9,3,2,-3,-4,10,1,-9,-4,9,-5,3,3,5,3,3,-4,-7,4,9,-5,5,-3,-4,-5,5,6,-5,3,-2,-5,-10,5,-5,9,8,3,9,8,-4,-6,4,-6,2,2,-10,3,5,-9,-7,-6,-4,10,6,-9,-2,1,9,-6,1,-9,2,10,9,10,8,3,-5,-7,9,-3,-1,7,-4,-4,-1,-5,-2,2,6,7,8,-8,-1,5,-1,2,-5,-3,-2,-5,10,7,6,-1,-3,-6,8,-5,-9,10,-1,3,1,-6,-2,9,-10,4,-8,-10,-5,4,-10,-4,-1,10,-7,9,-6,-5,3,-2,10,3,-1,9,-9,1,5,-10,-10,-10,1,6,-4,10,3,-2,-8,-1,8,-6,6,-8,-3,-7,9,9,-7,-9,-4,-8,-1,-1,7,-9,-5], dtype = "uint64")#candidate|10368|(702,)|const|uint64
var_10369 = relay.var("var_10369", dtype = "int32", shape = (1056,))#candidate|10369|(1056,)|var|int32
call_10367 = relay.TupleGetItem(func_4155_call(relay.reshape(const_10368.astype('uint64'), [13, 9, 6]), relay.reshape(const_10368.astype('uint64'), [13, 9, 6]), relay.reshape(var_10369.astype('int32'), [1056,]), ), 4)
call_10370 = relay.TupleGetItem(func_4159_call(relay.reshape(const_10368.astype('uint64'), [13, 9, 6]), relay.reshape(const_10368.astype('uint64'), [13, 9, 6]), relay.reshape(var_10369.astype('int32'), [1056,]), ), 4)
func_3991_call = mod.get_global_var('func_3991')
func_3994_call = mutated_mod.get_global_var('func_3994')
const_10374 = relay.const([[False,True],[True,False],[False,False],[False,True],[False,True],[False,True],[True,True],[True,False],[False,True],[False,True],[False,True],[False,True],[False,False],[True,False],[False,False],[False,False],[True,True],[False,False],[True,False],[True,False],[True,True],[True,False],[True,False],[True,True],[True,True],[False,True],[False,True],[True,False],[True,False],[True,True],[False,True],[True,False],[True,False],[False,False],[False,True],[False,False],[True,True],[False,False],[False,True],[True,True],[False,False],[True,True],[True,False],[True,False],[False,False],[True,False],[False,False],[False,True],[False,False],[True,True],[False,False],[True,True],[True,True],[True,True],[True,False],[True,True],[False,False],[False,True],[False,False],[True,False],[False,False],[False,False],[True,True],[True,True],[True,True],[False,True],[True,True],[False,False],[True,True],[False,False],[False,True],[True,False],[True,False],[False,True],[False,True],[True,False],[False,True],[True,True],[False,False],[False,False],[True,True],[True,False],[False,False],[True,True],[True,True],[True,True],[False,True],[False,True],[True,False],[False,True],[True,True],[True,True],[False,False],[False,True],[True,True],[True,False],[False,False],[True,False],[False,False],[False,False],[True,True],[True,True],[False,True],[False,True],[True,False],[False,True],[True,False],[False,True],[False,True],[False,True],[False,True],[False,False],[False,True],[False,False],[True,False],[False,False],[False,False],[True,False],[True,True],[False,True],[True,False],[False,False],[False,False],[True,True],[True,False],[False,True],[True,False],[True,True],[True,False],[False,False],[False,False],[False,False],[False,True],[True,False],[False,True],[True,True],[True,True],[True,False],[True,True],[True,True],[True,True],[False,False],[False,False],[False,True],[False,False],[False,False],[False,False],[True,True],[False,False],[True,False],[True,False],[False,False],[True,True],[False,False],[False,True],[True,True],[True,False],[False,True],[False,False],[False,False],[False,False],[False,False],[True,True],[True,True],[True,False],[True,False],[False,True],[True,True],[True,True],[False,True],[True,True],[True,False],[True,True],[True,True],[True,True],[True,True],[False,False],[True,True],[True,True],[False,True],[True,True],[True,False],[True,False],[True,False],[False,True],[True,True],[True,False],[True,False],[True,False],[False,False],[True,True],[True,True],[True,True],[False,True],[False,False],[False,True],[False,True],[True,True],[False,True],[True,False],[False,False],[True,True],[True,False],[False,False],[False,False],[True,True],[True,False],[True,True],[True,True],[False,True],[False,False],[True,False],[True,False],[True,True],[True,False],[True,False],[False,False],[True,True],[False,True],[False,False],[True,True],[False,True],[True,True],[False,True],[False,False],[False,False],[False,True],[False,True],[False,True],[True,True],[True,False],[True,False],[True,True],[True,True],[False,True],[False,False],[False,False],[True,False],[True,True],[True,True],[True,True],[False,True],[True,False],[False,True],[False,True],[False,True],[False,False],[True,True],[True,True],[False,True],[False,False],[True,True],[False,False],[True,True],[True,False],[True,False],[True,True],[True,False],[True,False],[True,True],[True,False],[True,True],[False,False],[False,True],[True,True],[False,False],[True,False],[True,False],[False,False],[True,False],[False,False],[False,True],[True,False],[False,True],[False,True]], dtype = "bool")#candidate|10374|(275, 2)|const|bool
const_10375 = relay.const([True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,False,True,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,True,True,True,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,True,False,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,False,True,True,False,True,False,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,False,True,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,False,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,False,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,True,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,True,True,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,True,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,True,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,False,True,False,False,False,True], dtype = "bool")#candidate|10375|(6600,)|const|bool
call_10373 = relay.TupleGetItem(func_3991_call(relay.reshape(const_10374.astype('bool'), [1, 550]), relay.reshape(const_10375.astype('bool'), [12, 550]), ), 2)
call_10376 = relay.TupleGetItem(func_3994_call(relay.reshape(const_10374.astype('bool'), [1, 550]), relay.reshape(const_10375.astype('bool'), [12, 550]), ), 2)
output = relay.Tuple([call_10251,call_10264,call_10271,call_10288,call_10309,call_10313,const_10314,bop_10323,call_10337,call_10359,call_10364,call_10367,const_10368,var_10369,call_10373,const_10374,const_10375,])
output2 = relay.Tuple([call_10252,call_10265,call_10272,call_10289,call_10310,call_10315,const_10314,bop_10326,call_10338,call_10360,call_10365,call_10370,const_10368,var_10369,call_10376,const_10374,const_10375,])
func_10386 = relay.Function([var_10226,var_10322,var_10369,], output)
mod['func_10386'] = func_10386
mod = relay.transform.InferType()(mod)
var_10387 = relay.var("var_10387", dtype = "float32", shape = (12, 5, 15))#candidate|10387|(12, 5, 15)|var|float32
var_10388 = relay.var("var_10388", dtype = "float32", shape = (12, 5, 15))#candidate|10388|(12, 5, 15)|var|float32
var_10389 = relay.var("var_10389", dtype = "int32", shape = (1056,))#candidate|10389|(1056,)|var|int32
output = func_10386(var_10387,var_10388,var_10389,)
func_10390 = relay.Function([var_10387,var_10388,var_10389,], output)
mutated_mod['func_10390'] = func_10390
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8198_call = mod.get_global_var('func_8198')
func_8199_call = mutated_mod.get_global_var('func_8199')
call_10492 = relay.TupleGetItem(func_8198_call(), 0)
call_10493 = relay.TupleGetItem(func_8199_call(), 0)
uop_10505 = relay.sqrt(call_10492.astype('float32')) # shape=(12, 5, 15)
uop_10507 = relay.sqrt(call_10493.astype('float32')) # shape=(12, 5, 15)
output = uop_10505
output2 = uop_10507
func_10542 = relay.Function([], output)
mod['func_10542'] = func_10542
mod = relay.transform.InferType()(mod)
output = func_10542()
func_10543 = relay.Function([], output)
mutated_mod['func_10543'] = func_10543
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10560 = relay.var("var_10560", dtype = "uint64", shape = (1, 16, 10))#candidate|10560|(1, 16, 10)|var|uint64
const_10561 = relay.const([[[-5,9,-7,6,9,-9,10,-4,3,-9],[5,6,-2,2,-1,-2,-8,-2,-5,4],[-8,-6,5,3,5,-6,6,8,9,8],[5,-8,-2,-9,3,-10,6,-9,8,-10],[-4,5,-8,-7,-3,9,-8,2,-7,6],[4,-1,2,3,2,2,2,7,10,-9],[3,-2,2,1,-5,-1,3,-1,-2,4],[2,3,3,5,5,8,-9,9,4,-3],[6,-8,-8,3,-7,-5,3,2,7,9],[1,-10,-6,2,-8,9,-2,1,9,-1],[1,5,5,1,-5,6,8,6,4,5],[6,-3,2,8,2,-6,-5,-8,-8,-2],[7,-1,-3,-10,7,-8,7,9,7,-1],[-7,1,-9,2,-8,-2,-2,2,10,-2],[-5,-9,-4,-4,-8,-2,-5,4,-4,3],[3,-8,10,10,-2,-8,5,-1,-8,9]],[[-3,8,4,2,-10,-9,-2,-8,7,-2],[-2,-5,-8,5,-3,-1,-5,-4,2,-6],[-1,-7,-2,-3,5,-5,6,6,-8,1],[5,-8,10,9,8,-6,10,9,-8,-8],[-10,2,5,-1,8,6,3,-4,-6,6],[-10,-2,-6,2,-5,-9,-7,2,-8,7],[-6,-1,-7,-3,2,6,2,2,-10,1],[9,4,-10,8,-1,6,-7,8,4,6],[1,-7,1,10,-6,-1,-1,-10,1,-9],[-2,10,1,-1,9,10,1,-4,9,-6],[-5,1,-1,-4,-9,-3,-9,-10,10,7],[1,9,7,6,7,2,-8,7,5,10],[-6,5,-5,-6,-6,-4,10,-1,-1,2],[9,-2,-8,8,4,-5,2,-8,7,-4],[6,-2,-5,5,9,4,3,7,-6,-5],[3,-1,-2,-6,2,3,-9,-8,7,-2]],[[3,4,-3,9,4,-2,-4,5,-3,-6],[-10,4,-4,-6,6,-7,6,-6,2,10],[7,-4,6,-6,10,-3,1,-10,2,5],[-5,-6,4,2,7,-4,6,5,9,1],[3,8,3,-6,7,2,4,3,-2,-5],[-8,3,-9,6,-10,-5,-10,7,-2,-10],[-4,1,4,9,-10,7,5,4,8,10],[-6,1,8,1,10,-1,6,6,5,-6],[-10,-4,2,-9,-7,-8,-3,-1,4,-3],[5,-1,-3,1,-10,6,9,-7,10,-9],[2,-2,-6,-6,-6,5,2,-2,-10,-6],[7,2,-1,-7,4,10,5,1,-6,2],[-9,-3,4,7,-6,6,-4,-1,9,8],[6,-9,1,-2,8,-10,2,7,7,-10],[8,8,6,9,-9,-7,8,-8,8,7],[-6,3,8,-4,6,2,9,6,-1,-1]],[[3,-7,-3,-9,7,-7,2,-2,1,-9],[-1,-1,-1,6,-3,4,6,-6,-8,-10],[-2,7,8,-6,7,-8,-6,-9,-9,1],[-3,-7,-6,-7,-7,-7,-7,-2,-8,-6],[6,3,6,-1,8,-6,-6,-1,-5,5],[7,-2,10,9,-4,5,2,6,-10,2],[8,1,10,-6,-10,6,7,-2,-2,7],[10,8,9,-10,10,9,10,5,1,5],[-4,-1,-9,-10,-5,-8,10,-7,-1,-10],[-8,2,10,-8,-9,-4,-3,6,9,-4],[-4,9,2,4,2,-4,-2,6,4,-3],[-6,5,-4,-5,6,7,-4,5,2,-9],[3,5,-10,7,7,-6,-9,-6,10,5],[-1,-8,-1,-10,2,9,3,-1,7,8],[8,-10,-2,9,8,-10,10,-3,-10,-6],[-2,-8,-1,7,-6,5,-8,-10,-1,-4]],[[5,-7,3,6,3,-8,8,-10,-6,8],[-4,4,8,-2,-3,8,-2,2,3,9],[-9,10,4,6,-9,-9,-7,-6,-7,4],[7,-7,-4,-2,-7,4,-9,-5,8,-10],[8,-1,2,-10,8,-8,-5,-3,6,-8],[8,10,10,-10,-7,-5,-10,9,-6,3],[-4,-8,-6,8,6,-6,1,4,1,10],[-4,4,3,-8,-4,-2,1,-5,-1,-10],[2,1,-2,-5,-9,-3,-1,-7,-2,-3],[3,5,5,1,-5,-3,7,-10,-1,1],[1,-10,-3,-9,9,3,9,-8,-8,-10],[-9,1,9,4,10,7,-1,6,-4,-1],[6,7,-2,2,3,4,-5,8,8,-1],[7,-10,6,4,-10,5,9,-5,-6,-10],[7,10,6,-5,2,-3,-5,-9,8,3],[6,-7,-9,-5,-9,3,-6,-7,5,-9]],[[1,5,-4,9,8,3,7,9,4,10],[-9,-7,-9,7,10,8,7,-9,10,4],[-9,1,7,-1,-6,-2,5,-7,-8,6],[-2,1,-10,10,-8,7,1,1,-8,9],[-5,-6,-2,7,-9,10,-9,-1,-1,10],[-5,-5,3,-4,-10,4,4,10,-6,8],[9,-9,8,9,2,9,6,-6,9,1],[-3,-9,-6,-4,3,10,-1,2,10,3],[1,-1,-5,6,-7,5,4,8,2,-4],[8,-1,-2,10,-4,-6,-4,-4,4,-3],[8,10,4,2,1,-3,10,8,6,-6],[3,-9,-8,4,-4,-10,6,2,9,-8],[-2,1,-4,5,-9,10,2,-6,2,-2],[-8,-7,-6,6,7,-8,-4,8,-6,-6],[4,6,5,8,-4,4,-5,-8,-1,6],[10,-6,1,-10,7,-3,-4,-8,-10,8]],[[7,8,2,2,-4,-3,10,-7,-3,9],[7,-2,-10,-9,9,8,9,7,-4,7],[7,10,-9,-8,8,-4,-9,5,1,2],[1,-5,6,2,-2,7,8,7,-6,10],[2,8,-2,-9,-7,2,-10,10,10,-3],[-10,-2,-8,6,3,8,9,7,9,4],[-8,3,3,4,-5,8,7,-6,10,-1],[-7,10,-6,-9,4,10,2,-10,7,10],[10,9,-7,-4,-4,-2,7,1,1,-10],[-5,-7,-8,-4,10,8,2,-7,2,-10],[10,9,5,5,-10,-1,7,-4,4,9],[1,-3,-5,-6,6,3,-7,5,2,10],[-5,9,-10,9,8,-7,7,6,10,9],[5,2,-6,-5,-7,2,-7,-3,1,-8],[-10,-2,5,-9,9,1,-1,7,9,10],[9,9,-3,1,-6,5,-6,-3,4,-7]],[[3,8,-10,3,-6,-7,-5,1,9,-1],[4,1,4,2,9,2,5,7,-4,-9],[5,5,2,-7,-9,8,-4,-3,4,-8],[-3,6,-10,-7,3,-5,2,8,8,-5],[-2,2,3,-6,-1,1,-5,-5,-9,-9],[6,1,-6,2,-4,4,-1,4,2,-10],[-6,-8,-7,6,-5,8,-1,-1,-10,2],[1,2,2,5,-7,6,7,2,7,10],[5,3,-9,-2,7,-2,9,2,9,-7],[4,10,7,5,-2,-6,-3,10,3,-10],[7,1,-8,-9,-10,-5,-10,-4,-9,-1],[-4,-7,-3,-10,10,-9,5,-2,10,-10],[-8,3,-10,-4,-7,-9,9,-9,-2,3],[10,8,9,-8,3,-9,3,-8,-2,3],[7,-2,7,-3,2,-2,5,10,1,-4],[6,-7,7,3,10,-1,-7,5,4,-2]],[[3,1,-5,3,6,2,3,2,-7,-1],[10,-5,-5,-10,8,7,7,1,-6,-8],[2,-6,-1,6,3,4,9,2,-10,5],[6,1,-8,5,-5,-8,-7,3,-1,6],[8,9,9,-1,6,7,8,7,-10,-9],[7,3,10,-2,7,-8,7,-2,1,-3],[1,-10,8,4,2,-5,1,-5,-6,-5],[-4,-9,10,-5,-9,9,10,1,-9,-8],[-8,-1,10,1,2,10,7,-7,5,10],[-10,-5,8,-8,3,-7,-6,-2,-4,-4],[-9,2,-6,-4,9,-6,-5,-1,9,10],[-5,2,7,10,9,8,8,5,-7,8],[5,8,7,2,7,9,-3,3,-7,1],[-7,-1,9,1,-6,-3,-3,10,-10,-7],[6,-1,6,-9,9,6,-7,2,-6,-1],[2,-3,8,-6,-8,7,8,3,4,-9]]], dtype = "uint64")#candidate|10561|(9, 16, 10)|const|uint64
bop_10562 = relay.subtract(var_10560.astype('uint64'), const_10561.astype('uint64')) # shape=(9, 16, 10)
output = bop_10562
output2 = bop_10562
func_10566 = relay.Function([var_10560,], output)
mod['func_10566'] = func_10566
mod = relay.transform.InferType()(mod)
var_10567 = relay.var("var_10567", dtype = "uint64", shape = (1, 16, 10))#candidate|10567|(1, 16, 10)|var|uint64
output = func_10566(var_10567)
func_10568 = relay.Function([var_10567], output)
mutated_mod['func_10568'] = func_10568
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10613 = relay.var("var_10613", dtype = "float32", shape = (10, 16, 4))#candidate|10613|(10, 16, 4)|var|float32
uop_10614 = relay.erf(var_10613.astype('float32')) # shape=(10, 16, 4)
func_4592_call = mod.get_global_var('func_4592')
func_4594_call = mutated_mod.get_global_var('func_4594')
call_10617 = relay.TupleGetItem(func_4592_call(), 0)
call_10618 = relay.TupleGetItem(func_4594_call(), 0)
output = relay.Tuple([uop_10614,call_10617,])
output2 = relay.Tuple([uop_10614,call_10618,])
func_10620 = relay.Function([var_10613,], output)
mod['func_10620'] = func_10620
mod = relay.transform.InferType()(mod)
var_10621 = relay.var("var_10621", dtype = "float32", shape = (10, 16, 4))#candidate|10621|(10, 16, 4)|var|float32
output = func_10620(var_10621)
func_10622 = relay.Function([var_10621], output)
mutated_mod['func_10622'] = func_10622
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3085_call = mod.get_global_var('func_3085')
func_3086_call = mutated_mod.get_global_var('func_3086')
call_10657 = relay.TupleGetItem(func_3085_call(), 4)
call_10658 = relay.TupleGetItem(func_3086_call(), 4)
func_6337_call = mod.get_global_var('func_6337')
func_6338_call = mutated_mod.get_global_var('func_6338')
call_10669 = relay.TupleGetItem(func_6337_call(), 0)
call_10670 = relay.TupleGetItem(func_6338_call(), 0)
func_1372_call = mod.get_global_var('func_1372')
func_1379_call = mutated_mod.get_global_var('func_1379')
var_10675 = relay.var("var_10675", dtype = "float64", shape = (4, 36))#candidate|10675|(4, 36)|var|float64
const_10676 = relay.const([-4.517848,-1.099154,-8.064783,6.777622,-6.751812,4.898920,-0.643717,-0.938753,1.409025,6.422131,6.526954,6.391387,0.933118,8.146340,0.660118,-5.850449,-2.801067,0.588197,9.844236,-3.616186,-6.421167,-4.415500,6.302204,-4.483347,-5.110798,7.194313,-8.906639,6.806617,-6.180882,-9.448001,-8.379515,8.210642,-8.721455,6.837623,-7.914803,3.463557,-7.405886,6.739796,9.437662,-3.639122,3.208551,9.722329,4.860363,9.707287,-8.519521,1.631888,-9.081543,6.842958,-6.540132,-7.147759,-5.190960,7.344736,-1.769290,2.016957,-9.396924,6.458459,9.785787,2.404717,-5.677912,-6.126199,9.448766,9.661442,-8.106628,-7.099042,-7.104670,3.124184,-3.821919,6.426450,4.118664,-5.594096,-6.904542,0.285945,5.583579,-4.578436,4.329955,-0.439493,6.319261,-3.585688,-0.496190,-1.956364,-9.752576,3.825161,-2.124079,9.804002,2.698048,0.928903,2.613355,2.205168,-2.809467,-3.525648,-6.774473,-9.714873,9.175643,-7.319025,4.757784,-2.563861,-2.482639,-1.969006,-7.031827,1.909775,-4.141302,1.977936,2.853184,-4.148097,1.728096,-6.135124,8.758859,0.748485,3.586394,-3.323790,-5.030300,-9.217539,-8.049393,8.130969,-7.461896,9.899775,9.653629,6.584568,9.761210,-5.751495,-2.515005,7.072750,0.710695,-9.718897,-4.740596,5.179584,5.964265,8.376021,2.035167,-3.329374,6.407105,-6.629496,3.056578,-2.502123,6.723839,2.102435,5.427320,6.539837,4.915670,6.472426,-4.189260,-6.786617,6.892948,6.591533,-6.121136,-9.515519,9.641228,-6.497461,-1.763908,-1.036044,-7.169743,-1.191270,-3.528066,-6.906813,4.671017,7.136197,1.362216,-3.842692,5.963168,0.899191,2.899792,-2.324826,-2.170968,9.913371,8.149147,-3.902297,6.955368,4.649000,-8.336087,4.852548,6.253278,9.083583,-7.292737,0.932596,5.804604,5.723279,6.162559,-0.457955,1.271351,-2.468518,1.645015,-0.406902,3.447646,-7.181893,8.211567,-9.759017,-6.913171,0.707050,6.788555,-0.102835,4.205393,8.408623,0.121864,-5.554435,-6.463334,0.558354,4.022904,-9.059916,2.961493,-5.998090,7.210308,-3.426301,-3.958941,-9.103820,-8.047328,5.974923,4.106691,-5.167388,-3.554709,5.524000,-9.946052,-4.206155,-3.995341,-6.580595,3.189149,-5.995321,8.573135,-7.957477,9.955285,9.720194,7.129562,1.880279,-4.742172,-3.989825,9.252071,2.950388,-3.877198,2.962055,-5.718537,0.063757,1.652018,-7.706983,-4.415918,-0.584766,-4.447430,6.101313,-3.845310,-4.210207,9.167015,6.663508,-8.213939,-2.048318,-2.916959,5.915429,9.245126,-2.204406,-4.483538,-5.948000,9.444304,-8.696630,-8.569337,-3.868648,8.578167,2.396585,8.890471,6.420535,8.991480,-2.400628,0.397348,1.180806,-4.736695,9.589033,-4.405912,0.356337,5.850574,3.946047,-1.558530,-6.145744,-2.080907,-7.625265,0.202948,1.913635,5.052007,-9.908130,0.959551,6.931459,-6.344797,8.369276,-8.057989,-9.622412,-2.327180,-3.966619,8.537354,-9.657778,-9.334980,4.002579,-7.836452,3.587258,6.792895,2.221967,4.558674,-7.117399,4.470225,-6.981498,9.786138,6.704896,4.354072,-1.881883,9.479207,-0.430414,5.162530,9.420967,3.263997,0.331638,-3.490506,0.329881,5.632983,9.612370,8.239226,0.063400,3.088780,2.274823,-0.616840,3.745011,-9.994062,9.169748,-9.936117,-4.784312,9.061767,-8.285115,-6.813334,3.216182,0.852562,-7.168505,8.203864,3.665268,3.473988,8.057023,-5.008858,2.941982,-7.894624,-2.101858,4.211375,-6.545416,-7.917458,-9.246206,5.899948,6.242319,9.696600,6.519644,2.693518,7.236441,9.357736,-6.174469,3.922225,4.163425,-5.848115,-0.590225,-2.183325,8.135386,2.419871,7.035010,1.632590,-2.207552,-9.182204,5.118909,-8.570326,-2.758436,0.166969,-8.765732,-3.803268,6.826554,1.709635,-1.741960,-4.506735,7.836633,-9.537232,-2.322800,0.299294,-0.105787,8.687015,8.967691,-2.029105,7.372523,-0.529794,-2.908082,5.360485,0.640587,-7.216945,-2.901267,2.838469,-2.110815,-0.605631,-6.423384,5.257502,-3.032537,-3.095746,8.430157,5.694974,1.287393,-1.868728,5.428886,2.814572,-3.988918,-8.099923,-2.240197,-1.068309,9.841411,-9.695862,-7.410944,-8.333892,-6.405240,-1.042798,8.354755,-9.843577,3.463911,9.703785,4.936366,-2.411344,-4.749988,-4.213052,-2.689123,1.909296,-2.119503,7.077164,-6.352665,0.511148,7.167947,-6.727409,3.874944,8.769243,0.795098,2.699920,6.100880,-5.008290,8.405919,-2.856521,-3.881196,7.482482,7.334503,6.136670,5.483265,-2.471532,9.711830,0.435527,-3.717244,2.210774,1.515588,-0.443589,-8.902907,-3.460134,9.260434,-8.521181,8.252868,-4.962677,-2.984333,-7.014682,-1.236025,-5.735106,7.916960,7.012376,-8.302670,4.620600,1.819690,-1.439479,-9.546253,7.738364,-0.805601,1.747058,-8.978179,-8.726891,-9.900658,-0.438299,-7.839956,-6.381338,-8.032186,7.627281,-2.194901,6.395339,-7.033904,-5.700668,-9.141054,-2.733516,7.693824,-5.143232,-6.098802,-1.102041,4.799024,7.045579,-2.433126,9.471125,9.155608,9.475684,2.022188,-9.934986,4.891081,4.819894,-5.130854,-6.345109,8.678732,1.959374,1.543299,-1.357349,-5.466362,-1.978405,3.036198,-4.528231,-7.356658,6.162862,-9.964659,0.971415,-4.211984,7.828888,8.669899,-0.832771,5.966319,-6.843942,3.694488,8.774493,-4.565265,-0.753904,-2.788010,0.144395,0.703695,-7.007314,-7.845310,0.982274,-7.393519,0.919317,-5.012510,9.373899,-2.905667,-1.773698,-0.293171,4.439311,-8.476193,9.387302,-0.190926,3.921196,8.520120,0.191557,-1.956657,-1.438720,-0.696163,-0.121211,7.563012,-7.923206,7.201554,2.539271,-4.866989,-1.865055,4.933310,9.936419,-6.414006,3.879322,3.498786,5.274496,4.082616,-3.697460,-0.501683,-6.999446,-0.187086,7.332155,2.345565,-4.762012,9.870659,-9.199593,-6.123659,9.545608,3.997688,-9.640535,6.766235,-1.556707,1.434466,-2.526958,2.066672,6.955709,2.053590,9.010165,0.712294,9.832542,-6.931731,7.965762,3.853466,-8.591397,3.353388,2.807517,-9.225186,2.583777,1.395578,2.251243,-4.100300,-2.336728,8.037483,4.957575,9.484072,-6.285062,-1.884725,-4.436697,-8.499516,-6.148006,5.118035,-1.610852,6.829375,1.306145,-1.967327,8.760529,0.748511,-8.677914,3.131727,-6.056308,-4.829154,0.468865,-1.124116,3.251965,-0.357146,0.967189,2.895827,3.408865,0.853660,1.362576,-3.493181,5.222534,8.980523,-3.163627,9.984655,6.052895,6.574561,-6.441375,0.046022,-5.688021,-4.687160,6.367450,-1.217865,-1.219761,-2.162704,2.774819,9.731311,-9.472483,-2.163090,0.706907,1.766787,-9.179135,9.370589,5.480669,-9.781429,-2.540113,3.916575,-4.074387,1.844445,9.750965,5.801236,-6.919432,2.795627,5.417753,3.302855,2.475092,9.616201,-2.004880,4.544250,8.130201,7.838339,-2.423212,-7.818958,-9.796206,0.051289,4.073647,-4.415614,8.146160,-2.095570,-9.555904,-0.455055,6.456649,9.365517,-4.743751,1.131476,-7.112630,-6.143933,3.395954,3.812283,-3.251711,1.540076,8.921897,6.814082,-6.042133,2.167899,0.323255,-6.135566,-5.904434,-6.203802,-0.172949,-0.235026,0.844295,3.506705,3.371356,-9.735173,-8.664958,9.222110,-9.402548,-1.581984,8.334303,9.487746,5.575355,9.776572,4.899429,0.870289,6.572533,-1.631555,-3.023921,7.748696,-6.619920,8.494549,1.879529,9.385791,1.446641,-0.597578,0.638368,5.349786,-3.061945,-8.294766,7.417431,1.915455,-8.604684,4.897646,-9.507064,-4.597737,-7.537967,9.082760,2.355709,8.556353,-1.415085,9.021255,9.118241,8.698639,9.042106,6.213788,9.633222,9.319228,-8.008004,-8.911129,4.141763,-0.586221,-8.424560,1.212579,-2.989702,-7.660421,3.303470,-7.681843,-6.588162,-2.483147,-6.999644,-3.991376,-3.109890,0.048146,-3.578159,0.649037,-3.693431,-0.227835,4.470529,-6.481651,-9.652706,0.188830,-7.223839,2.630208,5.858801,-8.369690,9.714591,9.951111,-7.406603,2.649931,-3.954922,-8.790743,-9.143684,9.578997,7.124780,5.813886,-9.326081,2.935985,-9.756311,1.655356,-3.888653,2.110414,6.398241,3.089918,4.953361,-8.448303,-1.537116,4.604763,3.865368,-0.091469,-3.427278,6.734729,-5.086569,-0.537466,0.828437,-4.574599,9.275746,1.889466,-5.229892,4.328903,4.152351,0.731934,-2.982591,-3.478428,3.732997,-8.716765,-8.881577,-1.514644,-7.892365,-5.307027,0.644701,8.788428,-0.478370,3.523759,-7.169203,0.235206,-7.958393,0.978859,4.258086,5.215598,-6.171960,-7.976639,1.301372,-6.582929,8.719230,3.241160,3.217127,-4.545555,6.406903,5.064285,-9.044497,-0.681142,7.935240,9.070163,5.617340,-7.057864,3.258546,7.521977,0.958212,-0.197053,-4.216929,0.294286,6.185995,6.679940,0.794415,-5.061208,8.086032,2.027477,-5.149295,2.915699,4.508393,3.954233,7.977700,5.606435,-3.862988,7.157019,1.380657,9.386267,-6.017612,1.117462,0.436304,2.253366,-3.407953,0.375227,-3.351199,2.311943,-7.900777,-0.643994,6.884641,8.099992,9.522408,-5.917266,7.309541,4.377958,-8.288318,-5.428815,-4.154552,5.421510,-8.903287,8.053164,8.497195,-2.828764,-5.381897,5.680758,-1.582496,4.311168,-7.062333,-3.529987,2.334842,2.032382,-2.434587,9.560278,-8.302200,-9.751732,-6.561580,9.372379,-7.249392,6.663972,-5.837382,-9.832210,5.033326,-9.617218,4.772252,-6.927273,1.711774,-8.030317,9.111064,-2.229313,-1.922612,-8.588686,7.453951,3.094063,6.165312,-0.232295,2.062274,-7.907700,-5.913605,-0.061922,9.767076,0.462422,0.248713,-0.958399,3.937832,-0.536703,6.492016,-1.757913,-2.880415,-2.402252,2.910455,0.305650,2.973001,9.234617,-7.761337,5.425458,-7.318209,-8.150929,8.810889,-2.947209,-4.160869,-1.091329,3.977581,-2.682376,-6.486456,9.688299,4.341408,6.567943,-9.799429,-2.970261,-9.357971,-7.525000,-9.672756,-4.438516,-4.325643,5.065746,8.995726,-1.460875,-6.949863,-8.109598,-2.444930,-4.228029,-1.334614,-6.790997,1.705245,-6.382605,7.338893,-8.910234,7.514110,0.154449,-1.348385,-5.077424,-2.645518,-9.962226,2.674401,-3.866541,8.579910,3.971516,-4.728741,-0.563581,3.814214,5.321203,-7.158893,-8.097942,9.868907,3.343358,-2.841803,1.662062,-8.841709,-0.768030,5.619907,1.946265,3.579740,-4.464564,6.763018,8.771310,4.008788,5.507868,6.725366,-3.393856,1.311574,-6.730051,2.028995,-8.786999,8.683270,-4.038541,2.989615,2.597672,-3.563953,-4.568037,0.491278,-8.439631,0.553123,-8.078126,-6.225702,1.907919,-3.067375,2.445638,7.773789,6.912326,-6.296486,1.987698,-2.439264,9.858729,5.355167,-6.148234,6.116732,2.458200,-8.831536,4.435274,-2.686534,-5.709641,-9.238332,1.004480,8.511919,8.102338,-7.754912,-4.928443,5.694083,9.683864,1.786134,2.352332,9.928630,4.427065,-0.781722,-7.825287,0.289648,9.943871,-9.396254,-8.597667,-0.411336,-3.603332,-6.836762,6.563730,-9.326615,-5.020698,-3.586794,-8.995207,6.964340,7.699301,4.300397,-9.509793], dtype = "float64")#candidate|10676|(1050,)|const|float64
var_10677 = relay.var("var_10677", dtype = "float32", shape = (400,))#candidate|10677|(400,)|var|float32
var_10678 = relay.var("var_10678", dtype = "float32", shape = (360,))#candidate|10678|(360,)|var|float32
call_10674 = relay.TupleGetItem(func_1372_call(relay.reshape(var_10675.astype('float64'), [2, 8, 9]), relay.reshape(var_10675.astype('float64'), [2, 8, 9]), relay.reshape(const_10676.astype('float64'), [1050,]), relay.reshape(var_10677.astype('float32'), [400,]), relay.reshape(var_10678.astype('float32'), [360,]), ), 0)
call_10679 = relay.TupleGetItem(func_1379_call(relay.reshape(var_10675.astype('float64'), [2, 8, 9]), relay.reshape(var_10675.astype('float64'), [2, 8, 9]), relay.reshape(const_10676.astype('float64'), [1050,]), relay.reshape(var_10677.astype('float32'), [400,]), relay.reshape(var_10678.astype('float32'), [360,]), ), 0)
uop_10707 = relay.cosh(var_10675.astype('float32')) # shape=(4, 36)
output = relay.Tuple([call_10657,call_10669,call_10674,const_10676,var_10677,var_10678,uop_10707,])
output2 = relay.Tuple([call_10658,call_10670,call_10679,const_10676,var_10677,var_10678,uop_10707,])
func_10711 = relay.Function([var_10675,var_10677,var_10678,], output)
mod['func_10711'] = func_10711
mod = relay.transform.InferType()(mod)
var_10712 = relay.var("var_10712", dtype = "float64", shape = (4, 36))#candidate|10712|(4, 36)|var|float64
var_10713 = relay.var("var_10713", dtype = "float32", shape = (400,))#candidate|10713|(400,)|var|float32
var_10714 = relay.var("var_10714", dtype = "float32", shape = (360,))#candidate|10714|(360,)|var|float32
output = func_10711(var_10712,var_10713,var_10714,)
func_10715 = relay.Function([var_10712,var_10713,var_10714,], output)
mutated_mod['func_10715'] = func_10715
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2815_call = mod.get_global_var('func_2815')
func_2816_call = mutated_mod.get_global_var('func_2816')
call_10758 = relay.TupleGetItem(func_2815_call(), 0)
call_10759 = relay.TupleGetItem(func_2816_call(), 0)
func_8198_call = mod.get_global_var('func_8198')
func_8199_call = mutated_mod.get_global_var('func_8199')
call_10761 = relay.TupleGetItem(func_8198_call(), 2)
call_10762 = relay.TupleGetItem(func_8199_call(), 2)
output = relay.Tuple([call_10758,call_10761,])
output2 = relay.Tuple([call_10759,call_10762,])
func_10765 = relay.Function([], output)
mod['func_10765'] = func_10765
mod = relay.transform.InferType()(mod)
output = func_10765()
func_10766 = relay.Function([], output)
mutated_mod['func_10766'] = func_10766
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7667_call = mod.get_global_var('func_7667')
func_7668_call = mutated_mod.get_global_var('func_7668')
call_10855 = relay.TupleGetItem(func_7667_call(), 0)
call_10856 = relay.TupleGetItem(func_7668_call(), 0)
var_10864 = relay.var("var_10864", dtype = "float32", shape = (12, 5, 15))#candidate|10864|(12, 5, 15)|var|float32
bop_10865 = relay.logical_xor(call_10855.astype('uint8'), relay.reshape(var_10864.astype('uint8'), relay.shape_of(call_10855))) # shape=(12, 5, 15)
bop_10868 = relay.logical_xor(call_10856.astype('uint8'), relay.reshape(var_10864.astype('uint8'), relay.shape_of(call_10856))) # shape=(12, 5, 15)
output = relay.Tuple([bop_10865,])
output2 = relay.Tuple([bop_10868,])
func_10869 = relay.Function([var_10864,], output)
mod['func_10869'] = func_10869
mod = relay.transform.InferType()(mod)
mutated_mod['func_10869'] = func_10869
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10870 = relay.var("var_10870", dtype = "float32", shape = (12, 5, 15))#candidate|10870|(12, 5, 15)|var|float32
func_10869_call = mutated_mod.get_global_var('func_10869')
call_10871 = func_10869_call(var_10870)
output = call_10871
func_10872 = relay.Function([var_10870], output)
mutated_mod['func_10872'] = func_10872
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2261_call = mod.get_global_var('func_2261')
func_2263_call = mutated_mod.get_global_var('func_2263')
call_10913 = func_2261_call()
call_10914 = func_2261_call()
func_480_call = mod.get_global_var('func_480')
func_482_call = mutated_mod.get_global_var('func_482')
const_10917 = relay.const([5.918348,-3.413139,-3.600394,3.068325,-3.438191,1.215760,-9.241169,9.695360,0.264191,-8.512132,2.710330,-9.249681,9.739584,7.950645,8.100997,8.104705,-8.411526,0.643145,-6.949948,3.693943,5.433829,-5.073707,6.478559,4.814792,-4.494699,-3.088022,-6.878624,-1.066339,9.342245,3.008836,-7.964379,0.072374,-6.733938,2.448765,3.233208,-4.701025,3.480873,-4.249838,-0.315832,-4.385365,1.193754,-3.181972,8.138571,-1.732592,-8.333864,-3.772857,-6.738421,-7.139496,-2.147659,1.132395,-8.711978,-3.765715,5.376532,4.220173,-3.805719,-6.222023,-7.101668,-5.428232,3.416952,0.316070,-8.494759,4.783725,5.105223,7.896897,9.954969,-7.789644,-8.646818,-9.711014,7.747280,9.597306,6.972055,-7.922053,-3.143567,7.581921,6.710654,-3.226220,-0.144118,-1.422246,6.990169,-4.924418,-9.911154,-4.755405,5.935927,-0.978029,-7.879617,5.103792,-9.648077,-4.607651,-1.148900,-9.892530,-5.322713,7.307793,-1.169748,-3.458807,8.706442,3.184882,7.351476,6.948139,-3.261850,-9.419575,0.688252,-9.055193,3.519073,9.248052,-6.622562,9.831882,-3.294026,-9.877671,-8.385326,-8.681664,8.219320,1.751009,0.099918,0.198073,7.585019,9.574893,3.740976,-3.873073,-2.895398,-5.477760,8.997529,9.896134,-3.327604,0.436922,-6.860835,5.856432,7.215063,5.779311,8.394092,-3.447619,-9.502147,1.534213,3.373351,-1.252573,8.274502,-8.400208,-7.530960,-9.498903,1.205567,3.951332,6.647482,5.735844,7.061792,-9.119471,-3.166599,5.508213,-6.069648,-3.774392,-5.592780,8.415297,-9.617160,3.806647,3.556409,9.974001,0.520249,-2.794413,3.946021,3.196650,-0.122474,6.856339,-8.336301,6.216528,-7.875676,-8.140065,-2.062798,-8.679996,2.118495,3.217725,-3.128421,-4.267308,9.480232,-9.381966,-5.800707,-2.805141,0.882382,0.305109,-1.533820,-8.633636,3.262763,-4.560724,-3.258780,-3.436153,-6.628845,-0.178720,-0.548426,-3.401330,-9.427558,7.161207,-5.048518,9.114045,0.350480,9.000385,-0.716246,-8.670148,-4.864229,0.004465,-4.613547,-0.418708,-8.620333,4.865226,6.923062,-1.381002,-5.889594,2.258324,1.339566,1.176673,7.764147,0.465168,-9.227521,6.203132,-8.804136,-5.172387,-0.093658,8.927300,3.944885,-6.110304,-4.769505,-7.546011,-7.157335,6.317088,5.481319,-8.016114,3.617031,-3.574032,-8.177806,-9.134666,-3.166604,5.733470,9.614896,6.236812,2.669765,-0.885146,5.445153,-0.805083,-2.127072,0.610190,-6.334548,-8.354961,8.217300,-4.396493,8.294933,-0.315690,6.950054,-0.485060,-3.006318,8.258932,2.154049,4.651019,9.370904,-7.625671,5.590331,9.363289,-0.850352,3.560851,-4.769262,1.127281,-8.330104,0.766212,0.787947,5.028272,-9.477066,6.736673,-0.630862,-2.346174,-5.320470,7.050957,-7.940523,-5.625746,-3.682232,0.391363,4.304939,-0.340085,-3.818872,6.043869,-2.468494,-4.041405,0.823429,-9.699074,-9.983607,4.246680,-0.716620,2.375609,2.940204,4.394756,4.288406,-5.033508,7.658512,3.876592,9.332246,4.174976,4.732109,-1.025858,4.139126,-3.563761,2.145326,-3.577588,-5.510342,-4.600119,3.378405,9.905491,-6.205718,6.721081,8.740359,-1.981605,7.550810,-3.021193,0.812039,-9.443033,7.121426,-3.972044,-0.857605,-7.880842,-4.391458,2.864782,-0.966635,5.640371,-3.143464,-8.826473,7.631246,-0.170241,-9.856821,7.119665,8.426729,-0.401295,-0.389033,5.746574,-0.055016,8.987062,2.528998,-7.798278,1.883267,-3.737847,9.539587,2.959930,4.483365,1.623707,-7.964708,2.348167,-9.530819,8.863768,4.023869,-3.492654,-7.275176,-4.264096,-9.258949,-8.567186,-3.388248,6.278906,4.279365,-7.048270,5.074464,2.663545,-8.550594,6.888720,-6.688634,5.281856,-1.204507,2.487659,7.507478,-2.397562,6.174410,-8.878875,0.332235,4.806872,-7.880479,-5.254848,4.933750,-3.723665,-8.685903,9.171946,-4.596844,-6.101745,-5.959971,5.964946,-2.752505,5.069117,-9.696373,7.422701,0.627027,0.844452,5.023961,4.082807,7.890915,-0.167122,-0.573286,-1.937785,2.826920,9.359975,0.032065,4.670071,-3.100703,0.757401,-9.173499,-7.143677,1.739592,-7.714184,0.062812,7.569935,7.970244,9.707197,3.188822,-3.149959,-3.466235,-9.513130,-0.892601,7.063599,-7.925860,-3.766385,-9.514274,5.287271,-7.073921,-4.989292,7.137201,-8.963925,0.323546,-9.784908,8.855576,6.549781,-6.005763,7.366931,-3.053695,5.921709,0.994723,4.302548,3.110915,3.349119,-5.233284,6.871079,-5.182763,-4.402964,8.578063,-5.717726,0.455987,8.224993,-6.084645,2.366923,7.797042,2.490612,-9.000195,-1.665786,2.201284,9.571711,3.314753,-6.721524,-5.502628,-7.086148,1.457600,-8.940216,-1.031989,3.843611,7.837329,4.870028,2.141959,7.820196,-0.637988,1.867159,-9.669713,3.051964,-5.356582,5.414495,9.257186,-5.906770,-0.079524,3.120935,-4.184186,4.778648,6.473797,0.171870,-7.932521,-8.577944,-2.809889,-7.032659,-5.547541,5.220528,2.331533,3.603865,-0.125439,-6.021052,4.754269,9.204999,-0.122886,1.310949,-2.215204,-9.166411,4.985942,0.931409,8.655701,-9.113786,3.419036,-5.218786,-4.287120,3.079560,5.862248,-7.204972,-9.809983,3.983833,-1.317216,-2.911003,9.943893,2.119983,-5.772874,-3.245767,5.821573,9.311496,-2.087002,0.026529,-3.389005,0.971436,-8.237717,-1.918210,-8.734721,9.449929,-4.336947,1.044053,8.137130,-2.062777,8.034235,4.221052,-8.720516,0.873884,-5.294736,5.915453,-4.573423,-3.091940,-7.930906,9.605131,-6.599867,-0.039068,-8.590464,-7.012140,-0.618595,8.413384,-4.962602,-0.361870,-6.181358,6.332040,4.895171,5.184183,-4.619166,-1.069646,-7.265562,8.790975,7.414592,3.817997,6.142235,3.440199,-3.199626,5.400430,0.488343,1.509253,3.031417,-4.731898,-2.354955,-9.180448,2.735883,3.934646,-6.816637,2.749138,-2.041057,-4.427136,-4.273741,-1.805054,-9.927587,6.629754,2.666595,5.574809,-8.355670,7.944099,0.940911,7.535842,3.062042,-4.351600,7.034143,3.663534,-2.543791,4.439028,2.656493,-7.931968,9.416077,2.655822,-8.081235,2.833147,-6.051088,2.196306,7.197255,-6.840896,-9.412644,-9.928400,-2.652892,7.028685,2.207215,-0.057510,-4.520194,7.699847,-8.187678,3.562487,3.914632,6.338270,6.283401,-2.439689,5.198848,0.704341,8.284445,0.321269,3.646424,2.777590,1.839848,9.033850,-5.461142,8.255908,7.329271,0.119198,-4.773211,-9.579396,-3.266912,-8.295937,-6.058937,4.352387,3.408561,8.390682,9.567263,-9.712110,-5.861656,0.682696,-0.397120,-9.106859,8.267909,-9.907414,-9.898489,4.727858,1.533498,1.765305,-9.674847,-0.994407,6.626801,-5.956343,-4.899780,-8.687351,8.416295,7.065680,-7.140154,7.779893,3.510063,3.922881,3.936843,-9.513117,-8.004676,-5.639915,-8.367222,6.552812,-5.650110,8.437875,-3.393851,-9.914748,9.705500,7.401052,5.034917,2.430702,-5.290182,-1.620646,8.328861,3.608876,-8.861884,-5.814870,-0.584843,6.972021,-9.026953,2.796126,-7.190238,-7.889678,3.719963,3.167953,-3.181992,0.010273,-7.267584,-7.850940,2.184884,9.287638,2.632913,-0.873767,9.843013,7.252639,-6.864214,-7.215647,-0.820364,-4.417734,-8.276750,-3.313641,-7.089678,-7.246864,9.765946,1.027766,-0.353610,4.088908,-4.296256,4.314272,2.298851,3.705748,8.055599,-1.782582,-1.031311,3.719719,-2.329532,-0.043925,1.683058,7.384048,8.610646,9.366745,-9.526615,-9.504242,5.945309,-6.877908,-4.735403,-6.059058,-4.069087,3.782652,-3.823722,4.545646,-2.430215,9.347554,-6.314330,-8.633126,5.489168,2.242937,-5.595114,1.137237,2.857559,-2.849853,8.417362,1.480580,9.580526,0.668235,4.934893,6.586046,-9.945002,-4.611013,0.602931,-4.234927,-3.930442,-8.438998,5.025570,-2.857201,-0.761142,-1.531705,-4.439193,0.584508,-5.519227,9.109410,1.473857,8.170395,8.652220,5.225893,3.916816,-7.393845,0.921199,-5.279211,-8.818172,-2.272458,-5.796829,-5.341776,-7.180836,-5.110114,-4.973490,2.559654,-9.204076,5.121180,-0.346667,2.211762,5.822006,9.077539,-9.729820,8.089162,3.680869,6.446201,3.247538,-8.458360,0.289442,-6.915493,-8.671289,-6.374321,6.955464,-2.965856,-8.214769,3.625475,6.008795,-8.736665,-7.818399,-4.334477,4.686720,5.525258,-8.399553,6.540918,4.897158,5.019871,1.774695,-6.477614,-2.596851,-8.563350,-1.169522,-0.915054,-1.186000,-1.781542,-0.531690,-5.809642,-7.794329,-4.265768,5.371448,5.368738,-2.839698,-4.480160,-9.768526,-5.644332,-3.965058,9.114440,-7.580597,-9.621428,-8.793715,6.147843,-2.264154,1.006097,-4.360484,0.392393,1.038666,-5.744082,8.925698,0.126065,3.946526,-7.698827,-8.789107,0.473832,0.493528,6.757637,-3.258533,9.521304,6.098331,8.260441,-5.283606,5.734944,1.313808,2.115230,7.162435,-8.038341,-6.460205,-5.694962,-9.342726,0.058275,1.323185,-7.175138,-6.204395,-5.691188,-1.960316,5.762471,-5.847531,-5.874726,-1.601165,7.580079,-2.003003,-5.794376,-0.080046,3.524788,-3.426903,2.236682,0.450030,8.962653,3.861529,8.514847,-4.284647,-3.249906,-8.740231,-8.971821,7.861482,-9.130012,-9.976287,-2.800766,7.100884,9.175389,1.387511,8.178763,-6.159832,-1.437307,5.164687,4.873392,-4.086266,-7.234178,-9.779346,7.842358,-7.686807,8.768503,-1.625023,-8.904555,7.432783,-0.405078,-8.899433,-2.399884,-5.070414,-2.038209,-3.402436,4.304018,9.289012,6.775943,0.755877,8.132222,-5.211703,-1.083085,5.484753,-7.668674,-0.380945,9.393418,0.242555,-9.208321,-2.731222,3.693261,-9.600305,2.625043,-7.827772,-6.104136,4.251195,-3.053099,-1.069691,-5.484799,2.262717,8.497503,1.052117,-3.645708,-4.377716,8.920588,8.672455,4.496647,8.018928,4.819144,-6.362974,7.781990,-6.156106,1.267720,-0.698096,-1.287133,7.180414,-6.385797,-6.941530,7.753538,3.945338,7.545849,7.741602,-6.426225,7.618586,-6.261103,0.748996,9.097720,7.996384,4.892753,-9.303731,1.637758,3.567856,4.042220,-8.489097,-5.065124,9.332740,-4.870589,-0.315747,6.812903,9.368812,0.832780,-9.181709,-8.597395,-0.653494,5.068411,0.592322,-6.762309,-0.097222,-6.902181,-5.443010,-0.557537,-6.662241,-0.462039,-9.104470,-7.674321,9.382365,-6.890990,-4.712030,-9.896159,-6.971933,2.979783,-6.872298,-2.499313,3.764465,-5.672124,6.489563,4.171941,5.408913,7.609759,-7.199104,4.732494,9.074727,4.496462,-8.064426,-7.258801,6.483988,-4.953782,4.546277,3.873439,3.424551,-0.588278,-7.712284,-5.486299,2.131625,3.836468,0.259870,-6.201838,8.729318,-3.687571,1.339767,-5.363810,8.413773,-0.843124,-5.279638,0.760765,9.241494,-4.034522,-5.789778,-7.873085,-5.430962,9.293386,-7.892772,8.963304,6.303611,-9.482718,-9.031759,8.543989,9.908239,5.532936,1.263178,-3.827599,-5.637066,8.682321,7.806692,5.035578,9.142083,-5.499299,-0.456940,1.134089,5.455175,-8.280427,5.329397,5.512470,1.507723,-5.345468,-1.874386,-9.444443,5.130657,7.664497], dtype = "float64")#candidate|10917|(1050,)|const|float64
call_10916 = relay.TupleGetItem(func_480_call(relay.reshape(const_10917.astype('float64'), [15, 7, 10])), 0)
call_10918 = relay.TupleGetItem(func_482_call(relay.reshape(const_10917.astype('float64'), [15, 7, 10])), 0)
func_5960_call = mod.get_global_var('func_5960')
func_5962_call = mutated_mod.get_global_var('func_5962')
call_10920 = relay.TupleGetItem(func_5960_call(), 0)
call_10921 = relay.TupleGetItem(func_5962_call(), 0)
func_3325_call = mod.get_global_var('func_3325')
func_3328_call = mutated_mod.get_global_var('func_3328')
var_10923 = relay.var("var_10923", dtype = "float32", shape = (1152,))#candidate|10923|(1152,)|var|float32
call_10922 = func_3325_call(relay.reshape(var_10923.astype('float32'), [12, 16, 6]))
call_10924 = func_3325_call(relay.reshape(var_10923.astype('float32'), [12, 16, 6]))
func_480_call = mod.get_global_var('func_480')
func_482_call = mutated_mod.get_global_var('func_482')
call_10928 = relay.TupleGetItem(func_480_call(relay.reshape(call_10916.astype('float64'), [15, 7, 10])), 0)
call_10929 = relay.TupleGetItem(func_482_call(relay.reshape(call_10916.astype('float64'), [15, 7, 10])), 0)
var_10942 = relay.var("var_10942", dtype = "float64", shape = (1050,))#candidate|10942|(1050,)|var|float64
bop_10943 = relay.greater_equal(const_10917.astype('bool'), relay.reshape(var_10942.astype('bool'), relay.shape_of(const_10917))) # shape=(1050,)
func_8613_call = mod.get_global_var('func_8613')
func_8615_call = mutated_mod.get_global_var('func_8615')
call_10947 = func_8613_call()
call_10948 = func_8613_call()
output = relay.Tuple([call_10913,call_10916,call_10920,call_10922,var_10923,call_10928,bop_10943,call_10947,])
output2 = relay.Tuple([call_10914,call_10918,call_10921,call_10924,var_10923,call_10929,bop_10943,call_10948,])
func_10959 = relay.Function([var_10923,var_10942,], output)
mod['func_10959'] = func_10959
mod = relay.transform.InferType()(mod)
mutated_mod['func_10959'] = func_10959
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10959_call = mutated_mod.get_global_var('func_10959')
var_10961 = relay.var("var_10961", dtype = "float32", shape = (1152,))#candidate|10961|(1152,)|var|float32
var_10962 = relay.var("var_10962", dtype = "float64", shape = (1050,))#candidate|10962|(1050,)|var|float64
call_10960 = func_10959_call(var_10961,var_10962,)
output = call_10960
func_10963 = relay.Function([var_10961,var_10962,], output)
mutated_mod['func_10963'] = func_10963
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11095 = relay.var("var_11095", dtype = "float32", shape = (13, 6, 1))#candidate|11095|(13, 6, 1)|var|float32
uop_11096 = relay.asinh(var_11095.astype('float32')) # shape=(13, 6, 1)
uop_11099 = relay.log2(uop_11096.astype('float32')) # shape=(13, 6, 1)
output = relay.Tuple([uop_11099,])
output2 = relay.Tuple([uop_11099,])
F = relay.Function([var_11095,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_11095,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
